
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cbf4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000063e8  0802cdd8  0802cdd8  0003cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080331c0  080331c0  000507f0  2**0
                  CONTENTS
  4 .ARM          00000008  080331c0  080331c0  000431c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080331c8  080331c8  000507f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080331c8  080331c8  000431c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080331cc  080331cc  000431cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007f0  20000000  080331d0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9c0  200007f0  080339c0  000507f0  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  2000c1b0  080339c0  0005c1b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000507f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0010c762  00000000  00000000  00050819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000198fa  00000000  00000000  0015cf7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003c00  00000000  00000000  00176878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00008bf8  00000000  00000000  0017a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039c5e  00000000  00000000  00183070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000ccb3a  00000000  00000000  001bccce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b12fe  00000000  00000000  00289808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0033ab06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b32c  00000000  00000000  0033ab58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0007627e  00000000  00000000  00345e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200007f0 	.word	0x200007f0
 8000200:	00000000 	.word	0x00000000
 8000204:	0802cdc0 	.word	0x0802cdc0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200007f4 	.word	0x200007f4
 8000220:	0802cdc0 	.word	0x0802cdc0

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_fmul>:
 8000248:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800024c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000250:	bf1e      	ittt	ne
 8000252:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000256:	ea92 0f0c 	teqne	r2, ip
 800025a:	ea93 0f0c 	teqne	r3, ip
 800025e:	d06f      	beq.n	8000340 <__aeabi_fmul+0xf8>
 8000260:	441a      	add	r2, r3
 8000262:	ea80 0c01 	eor.w	ip, r0, r1
 8000266:	0240      	lsls	r0, r0, #9
 8000268:	bf18      	it	ne
 800026a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800026e:	d01e      	beq.n	80002ae <__aeabi_fmul+0x66>
 8000270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000274:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000278:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800027c:	fba0 3101 	umull	r3, r1, r0, r1
 8000280:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000284:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000288:	bf3e      	ittt	cc
 800028a:	0049      	lslcc	r1, r1, #1
 800028c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000290:	005b      	lslcc	r3, r3, #1
 8000292:	ea40 0001 	orr.w	r0, r0, r1
 8000296:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800029a:	2afd      	cmp	r2, #253	; 0xfd
 800029c:	d81d      	bhi.n	80002da <__aeabi_fmul+0x92>
 800029e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002a6:	bf08      	it	eq
 80002a8:	f020 0001 	biceq.w	r0, r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002b6:	bf08      	it	eq
 80002b8:	0249      	lsleq	r1, r1, #9
 80002ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002c2:	3a7f      	subs	r2, #127	; 0x7f
 80002c4:	bfc2      	ittt	gt
 80002c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002ce:	4770      	bxgt	lr
 80002d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d4:	f04f 0300 	mov.w	r3, #0
 80002d8:	3a01      	subs	r2, #1
 80002da:	dc5d      	bgt.n	8000398 <__aeabi_fmul+0x150>
 80002dc:	f112 0f19 	cmn.w	r2, #25
 80002e0:	bfdc      	itt	le
 80002e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002e6:	4770      	bxle	lr
 80002e8:	f1c2 0200 	rsb	r2, r2, #0
 80002ec:	0041      	lsls	r1, r0, #1
 80002ee:	fa21 f102 	lsr.w	r1, r1, r2
 80002f2:	f1c2 0220 	rsb	r2, r2, #32
 80002f6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002fa:	ea5f 0031 	movs.w	r0, r1, rrx
 80002fe:	f140 0000 	adc.w	r0, r0, #0
 8000302:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000306:	bf08      	it	eq
 8000308:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800030c:	4770      	bx	lr
 800030e:	f092 0f00 	teq	r2, #0
 8000312:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0040      	lsleq	r0, r0, #1
 800031a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800031e:	3a01      	subeq	r2, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xce>
 8000322:	ea40 000c 	orr.w	r0, r0, ip
 8000326:	f093 0f00 	teq	r3, #0
 800032a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800032e:	bf02      	ittt	eq
 8000330:	0049      	lsleq	r1, r1, #1
 8000332:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000336:	3b01      	subeq	r3, #1
 8000338:	d0f9      	beq.n	800032e <__aeabi_fmul+0xe6>
 800033a:	ea41 010c 	orr.w	r1, r1, ip
 800033e:	e78f      	b.n	8000260 <__aeabi_fmul+0x18>
 8000340:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000344:	ea92 0f0c 	teq	r2, ip
 8000348:	bf18      	it	ne
 800034a:	ea93 0f0c 	teqne	r3, ip
 800034e:	d00a      	beq.n	8000366 <__aeabi_fmul+0x11e>
 8000350:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000354:	bf18      	it	ne
 8000356:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800035a:	d1d8      	bne.n	800030e <__aeabi_fmul+0xc6>
 800035c:	ea80 0001 	eor.w	r0, r0, r1
 8000360:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f090 0f00 	teq	r0, #0
 800036a:	bf17      	itett	ne
 800036c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000370:	4608      	moveq	r0, r1
 8000372:	f091 0f00 	teqne	r1, #0
 8000376:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800037a:	d014      	beq.n	80003a6 <__aeabi_fmul+0x15e>
 800037c:	ea92 0f0c 	teq	r2, ip
 8000380:	d101      	bne.n	8000386 <__aeabi_fmul+0x13e>
 8000382:	0242      	lsls	r2, r0, #9
 8000384:	d10f      	bne.n	80003a6 <__aeabi_fmul+0x15e>
 8000386:	ea93 0f0c 	teq	r3, ip
 800038a:	d103      	bne.n	8000394 <__aeabi_fmul+0x14c>
 800038c:	024b      	lsls	r3, r1, #9
 800038e:	bf18      	it	ne
 8000390:	4608      	movne	r0, r1
 8000392:	d108      	bne.n	80003a6 <__aeabi_fmul+0x15e>
 8000394:	ea80 0001 	eor.w	r0, r0, r1
 8000398:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800039c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a4:	4770      	bx	lr
 80003a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_frsub>:
 80003b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__addsf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_fsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080003bc <__addsf3>:
 80003bc:	0042      	lsls	r2, r0, #1
 80003be:	bf1f      	itttt	ne
 80003c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003c4:	ea92 0f03 	teqne	r2, r3
 80003c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003d0:	d06a      	beq.n	80004a8 <__addsf3+0xec>
 80003d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003da:	bfc1      	itttt	gt
 80003dc:	18d2      	addgt	r2, r2, r3
 80003de:	4041      	eorgt	r1, r0
 80003e0:	4048      	eorgt	r0, r1
 80003e2:	4041      	eorgt	r1, r0
 80003e4:	bfb8      	it	lt
 80003e6:	425b      	neglt	r3, r3
 80003e8:	2b19      	cmp	r3, #25
 80003ea:	bf88      	it	hi
 80003ec:	4770      	bxhi	lr
 80003ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003fa:	bf18      	it	ne
 80003fc:	4240      	negne	r0, r0
 80003fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000402:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000406:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800040a:	bf18      	it	ne
 800040c:	4249      	negne	r1, r1
 800040e:	ea92 0f03 	teq	r2, r3
 8000412:	d03f      	beq.n	8000494 <__addsf3+0xd8>
 8000414:	f1a2 0201 	sub.w	r2, r2, #1
 8000418:	fa41 fc03 	asr.w	ip, r1, r3
 800041c:	eb10 000c 	adds.w	r0, r0, ip
 8000420:	f1c3 0320 	rsb	r3, r3, #32
 8000424:	fa01 f103 	lsl.w	r1, r1, r3
 8000428:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__addsf3+0x78>
 800042e:	4249      	negs	r1, r1
 8000430:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000434:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000438:	d313      	bcc.n	8000462 <__addsf3+0xa6>
 800043a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800043e:	d306      	bcc.n	800044e <__addsf3+0x92>
 8000440:	0840      	lsrs	r0, r0, #1
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	f102 0201 	add.w	r2, r2, #1
 800044a:	2afe      	cmp	r2, #254	; 0xfe
 800044c:	d251      	bcs.n	80004f2 <__addsf3+0x136>
 800044e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000452:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000456:	bf08      	it	eq
 8000458:	f020 0001 	biceq.w	r0, r0, #1
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	4770      	bx	lr
 8000462:	0049      	lsls	r1, r1, #1
 8000464:	eb40 0000 	adc.w	r0, r0, r0
 8000468:	3a01      	subs	r2, #1
 800046a:	bf28      	it	cs
 800046c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000470:	d2ed      	bcs.n	800044e <__addsf3+0x92>
 8000472:	fab0 fc80 	clz	ip, r0
 8000476:	f1ac 0c08 	sub.w	ip, ip, #8
 800047a:	ebb2 020c 	subs.w	r2, r2, ip
 800047e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000482:	bfaa      	itet	ge
 8000484:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000488:	4252      	neglt	r2, r2
 800048a:	4318      	orrge	r0, r3
 800048c:	bfbc      	itt	lt
 800048e:	40d0      	lsrlt	r0, r2
 8000490:	4318      	orrlt	r0, r3
 8000492:	4770      	bx	lr
 8000494:	f092 0f00 	teq	r2, #0
 8000498:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800049c:	bf06      	itte	eq
 800049e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80004a2:	3201      	addeq	r2, #1
 80004a4:	3b01      	subne	r3, #1
 80004a6:	e7b5      	b.n	8000414 <__addsf3+0x58>
 80004a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004b0:	bf18      	it	ne
 80004b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004b6:	d021      	beq.n	80004fc <__addsf3+0x140>
 80004b8:	ea92 0f03 	teq	r2, r3
 80004bc:	d004      	beq.n	80004c8 <__addsf3+0x10c>
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf08      	it	eq
 80004c4:	4608      	moveq	r0, r1
 80004c6:	4770      	bx	lr
 80004c8:	ea90 0f01 	teq	r0, r1
 80004cc:	bf1c      	itt	ne
 80004ce:	2000      	movne	r0, #0
 80004d0:	4770      	bxne	lr
 80004d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004d6:	d104      	bne.n	80004e2 <__addsf3+0x126>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	bf28      	it	cs
 80004dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	4770      	bx	lr
 80004e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004e6:	bf3c      	itt	cc
 80004e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004ec:	4770      	bxcc	lr
 80004ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fa:	4770      	bx	lr
 80004fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000500:	bf16      	itet	ne
 8000502:	4608      	movne	r0, r1
 8000504:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000508:	4601      	movne	r1, r0
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	bf06      	itte	eq
 800050e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000512:	ea90 0f01 	teqeq	r0, r1
 8000516:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800051a:	4770      	bx	lr

0800051c <__aeabi_ui2f>:
 800051c:	f04f 0300 	mov.w	r3, #0
 8000520:	e004      	b.n	800052c <__aeabi_i2f+0x8>
 8000522:	bf00      	nop

08000524 <__aeabi_i2f>:
 8000524:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000528:	bf48      	it	mi
 800052a:	4240      	negmi	r0, r0
 800052c:	ea5f 0c00 	movs.w	ip, r0
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000538:	4601      	mov	r1, r0
 800053a:	f04f 0000 	mov.w	r0, #0
 800053e:	e01c      	b.n	800057a <__aeabi_l2f+0x2a>

08000540 <__aeabi_ul2f>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	f04f 0300 	mov.w	r3, #0
 800054c:	e00a      	b.n	8000564 <__aeabi_l2f+0x14>
 800054e:	bf00      	nop

08000550 <__aeabi_l2f>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800055c:	d502      	bpl.n	8000564 <__aeabi_l2f+0x14>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	ea5f 0c01 	movs.w	ip, r1
 8000568:	bf02      	ittt	eq
 800056a:	4684      	moveq	ip, r0
 800056c:	4601      	moveq	r1, r0
 800056e:	2000      	moveq	r0, #0
 8000570:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000574:	bf08      	it	eq
 8000576:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800057a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800057e:	fabc f28c 	clz	r2, ip
 8000582:	3a08      	subs	r2, #8
 8000584:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000588:	db10      	blt.n	80005ac <__aeabi_l2f+0x5c>
 800058a:	fa01 fc02 	lsl.w	ip, r1, r2
 800058e:	4463      	add	r3, ip
 8000590:	fa00 fc02 	lsl.w	ip, r0, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800059c:	fa20 f202 	lsr.w	r2, r0, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f102 0220 	add.w	r2, r2, #32
 80005b0:	fa01 fc02 	lsl.w	ip, r1, r2
 80005b4:	f1c2 0220 	rsb	r2, r2, #32
 80005b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80005bc:	fa21 f202 	lsr.w	r2, r1, r2
 80005c0:	eb43 0002 	adc.w	r0, r3, r2
 80005c4:	bf08      	it	eq
 80005c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005ca:	4770      	bx	lr

080005cc <__aeabi_f2iz>:
 80005cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005d4:	d30f      	bcc.n	80005f6 <__aeabi_f2iz+0x2a>
 80005d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005de:	d90d      	bls.n	80005fc <__aeabi_f2iz+0x30>
 80005e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ec:	fa23 f002 	lsr.w	r0, r3, r2
 80005f0:	bf18      	it	ne
 80005f2:	4240      	negne	r0, r0
 80005f4:	4770      	bx	lr
 80005f6:	f04f 0000 	mov.w	r0, #0
 80005fa:	4770      	bx	lr
 80005fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000600:	d101      	bne.n	8000606 <__aeabi_f2iz+0x3a>
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	d105      	bne.n	8000612 <__aeabi_f2iz+0x46>
 8000606:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800060a:	bf08      	it	eq
 800060c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000610:	4770      	bx	lr
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	4770      	bx	lr

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000628:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800062c:	f000 b976 	b.w	800091c <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9e08      	ldr	r6, [sp, #32]
 800064e:	460d      	mov	r5, r1
 8000650:	4604      	mov	r4, r0
 8000652:	4688      	mov	r8, r1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d14d      	bne.n	80006f4 <__udivmoddi4+0xac>
 8000658:	428a      	cmp	r2, r1
 800065a:	4694      	mov	ip, r2
 800065c:	d968      	bls.n	8000730 <__udivmoddi4+0xe8>
 800065e:	fab2 f282 	clz	r2, r2
 8000662:	b152      	cbz	r2, 800067a <__udivmoddi4+0x32>
 8000664:	fa01 f302 	lsl.w	r3, r1, r2
 8000668:	f1c2 0120 	rsb	r1, r2, #32
 800066c:	fa20 f101 	lsr.w	r1, r0, r1
 8000670:	fa0c fc02 	lsl.w	ip, ip, r2
 8000674:	ea41 0803 	orr.w	r8, r1, r3
 8000678:	4094      	lsls	r4, r2
 800067a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800067e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000682:	fa1f fe8c 	uxth.w	lr, ip
 8000686:	fb01 8817 	mls	r8, r1, r7, r8
 800068a:	fb07 f00e 	mul.w	r0, r7, lr
 800068e:	0c23      	lsrs	r3, r4, #16
 8000690:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000694:	4298      	cmp	r0, r3
 8000696:	d90a      	bls.n	80006ae <__udivmoddi4+0x66>
 8000698:	eb1c 0303 	adds.w	r3, ip, r3
 800069c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80006a0:	f080 811e 	bcs.w	80008e0 <__udivmoddi4+0x298>
 80006a4:	4298      	cmp	r0, r3
 80006a6:	f240 811b 	bls.w	80008e0 <__udivmoddi4+0x298>
 80006aa:	3f02      	subs	r7, #2
 80006ac:	4463      	add	r3, ip
 80006ae:	1a1b      	subs	r3, r3, r0
 80006b0:	fbb3 f0f1 	udiv	r0, r3, r1
 80006b4:	fb01 3310 	mls	r3, r1, r0, r3
 80006b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c2:	45a6      	cmp	lr, r4
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x94>
 80006c6:	eb1c 0404 	adds.w	r4, ip, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ce:	f080 8109 	bcs.w	80008e4 <__udivmoddi4+0x29c>
 80006d2:	45a6      	cmp	lr, r4
 80006d4:	f240 8106 	bls.w	80008e4 <__udivmoddi4+0x29c>
 80006d8:	4464      	add	r4, ip
 80006da:	3802      	subs	r0, #2
 80006dc:	2100      	movs	r1, #0
 80006de:	eba4 040e 	sub.w	r4, r4, lr
 80006e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e6:	b11e      	cbz	r6, 80006f0 <__udivmoddi4+0xa8>
 80006e8:	2300      	movs	r3, #0
 80006ea:	40d4      	lsrs	r4, r2
 80006ec:	e9c6 4300 	strd	r4, r3, [r6]
 80006f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d908      	bls.n	800070a <__udivmoddi4+0xc2>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	f000 80ee 	beq.w	80008da <__udivmoddi4+0x292>
 80006fe:	2100      	movs	r1, #0
 8000700:	e9c6 0500 	strd	r0, r5, [r6]
 8000704:	4608      	mov	r0, r1
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d14a      	bne.n	80007a8 <__udivmoddi4+0x160>
 8000712:	42ab      	cmp	r3, r5
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xd4>
 8000716:	4282      	cmp	r2, r0
 8000718:	f200 80fc 	bhi.w	8000914 <__udivmoddi4+0x2cc>
 800071c:	1a84      	subs	r4, r0, r2
 800071e:	eb65 0303 	sbc.w	r3, r5, r3
 8000722:	2001      	movs	r0, #1
 8000724:	4698      	mov	r8, r3
 8000726:	2e00      	cmp	r6, #0
 8000728:	d0e2      	beq.n	80006f0 <__udivmoddi4+0xa8>
 800072a:	e9c6 4800 	strd	r4, r8, [r6]
 800072e:	e7df      	b.n	80006f0 <__udivmoddi4+0xa8>
 8000730:	b902      	cbnz	r2, 8000734 <__udivmoddi4+0xec>
 8000732:	deff      	udf	#255	; 0xff
 8000734:	fab2 f282 	clz	r2, r2
 8000738:	2a00      	cmp	r2, #0
 800073a:	f040 8091 	bne.w	8000860 <__udivmoddi4+0x218>
 800073e:	eba1 000c 	sub.w	r0, r1, ip
 8000742:	2101      	movs	r1, #1
 8000744:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000748:	fa1f fe8c 	uxth.w	lr, ip
 800074c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000750:	fb07 0013 	mls	r0, r7, r3, r0
 8000754:	0c25      	lsrs	r5, r4, #16
 8000756:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800075a:	fb0e f003 	mul.w	r0, lr, r3
 800075e:	42a8      	cmp	r0, r5
 8000760:	d908      	bls.n	8000774 <__udivmoddi4+0x12c>
 8000762:	eb1c 0505 	adds.w	r5, ip, r5
 8000766:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x12a>
 800076c:	42a8      	cmp	r0, r5
 800076e:	f200 80ce 	bhi.w	800090e <__udivmoddi4+0x2c6>
 8000772:	4643      	mov	r3, r8
 8000774:	1a2d      	subs	r5, r5, r0
 8000776:	fbb5 f0f7 	udiv	r0, r5, r7
 800077a:	fb07 5510 	mls	r5, r7, r0, r5
 800077e:	fb0e fe00 	mul.w	lr, lr, r0
 8000782:	b2a4      	uxth	r4, r4
 8000784:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000788:	45a6      	cmp	lr, r4
 800078a:	d908      	bls.n	800079e <__udivmoddi4+0x156>
 800078c:	eb1c 0404 	adds.w	r4, ip, r4
 8000790:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000794:	d202      	bcs.n	800079c <__udivmoddi4+0x154>
 8000796:	45a6      	cmp	lr, r4
 8000798:	f200 80b6 	bhi.w	8000908 <__udivmoddi4+0x2c0>
 800079c:	4628      	mov	r0, r5
 800079e:	eba4 040e 	sub.w	r4, r4, lr
 80007a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007a6:	e79e      	b.n	80006e6 <__udivmoddi4+0x9e>
 80007a8:	f1c1 0720 	rsb	r7, r1, #32
 80007ac:	408b      	lsls	r3, r1
 80007ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80007b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007b6:	fa25 fa07 	lsr.w	sl, r5, r7
 80007ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007be:	fbba f8f9 	udiv	r8, sl, r9
 80007c2:	fa20 f307 	lsr.w	r3, r0, r7
 80007c6:	fb09 aa18 	mls	sl, r9, r8, sl
 80007ca:	408d      	lsls	r5, r1
 80007cc:	fa1f fe8c 	uxth.w	lr, ip
 80007d0:	431d      	orrs	r5, r3
 80007d2:	fa00 f301 	lsl.w	r3, r0, r1
 80007d6:	fb08 f00e 	mul.w	r0, r8, lr
 80007da:	0c2c      	lsrs	r4, r5, #16
 80007dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80007e0:	42a0      	cmp	r0, r4
 80007e2:	fa02 f201 	lsl.w	r2, r2, r1
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b8>
 80007e8:	eb1c 0404 	adds.w	r4, ip, r4
 80007ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007f0:	f080 8088 	bcs.w	8000904 <__udivmoddi4+0x2bc>
 80007f4:	42a0      	cmp	r0, r4
 80007f6:	f240 8085 	bls.w	8000904 <__udivmoddi4+0x2bc>
 80007fa:	f1a8 0802 	sub.w	r8, r8, #2
 80007fe:	4464      	add	r4, ip
 8000800:	1a24      	subs	r4, r4, r0
 8000802:	fbb4 f0f9 	udiv	r0, r4, r9
 8000806:	fb09 4410 	mls	r4, r9, r0, r4
 800080a:	fb00 fe0e 	mul.w	lr, r0, lr
 800080e:	b2ad      	uxth	r5, r5
 8000810:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000814:	45a6      	cmp	lr, r4
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1e2>
 8000818:	eb1c 0404 	adds.w	r4, ip, r4
 800081c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000820:	d26c      	bcs.n	80008fc <__udivmoddi4+0x2b4>
 8000822:	45a6      	cmp	lr, r4
 8000824:	d96a      	bls.n	80008fc <__udivmoddi4+0x2b4>
 8000826:	3802      	subs	r0, #2
 8000828:	4464      	add	r4, ip
 800082a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800082e:	fba0 9502 	umull	r9, r5, r0, r2
 8000832:	eba4 040e 	sub.w	r4, r4, lr
 8000836:	42ac      	cmp	r4, r5
 8000838:	46c8      	mov	r8, r9
 800083a:	46ae      	mov	lr, r5
 800083c:	d356      	bcc.n	80008ec <__udivmoddi4+0x2a4>
 800083e:	d053      	beq.n	80008e8 <__udivmoddi4+0x2a0>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d069      	beq.n	8000918 <__udivmoddi4+0x2d0>
 8000844:	ebb3 0208 	subs.w	r2, r3, r8
 8000848:	eb64 040e 	sbc.w	r4, r4, lr
 800084c:	fa22 f301 	lsr.w	r3, r2, r1
 8000850:	fa04 f707 	lsl.w	r7, r4, r7
 8000854:	431f      	orrs	r7, r3
 8000856:	40cc      	lsrs	r4, r1
 8000858:	e9c6 7400 	strd	r7, r4, [r6]
 800085c:	2100      	movs	r1, #0
 800085e:	e747      	b.n	80006f0 <__udivmoddi4+0xa8>
 8000860:	fa0c fc02 	lsl.w	ip, ip, r2
 8000864:	f1c2 0120 	rsb	r1, r2, #32
 8000868:	fa25 f301 	lsr.w	r3, r5, r1
 800086c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000870:	fa20 f101 	lsr.w	r1, r0, r1
 8000874:	4095      	lsls	r5, r2
 8000876:	430d      	orrs	r5, r1
 8000878:	fbb3 f1f7 	udiv	r1, r3, r7
 800087c:	fb07 3311 	mls	r3, r7, r1, r3
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	0c28      	lsrs	r0, r5, #16
 8000886:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800088a:	fb01 f30e 	mul.w	r3, r1, lr
 800088e:	4283      	cmp	r3, r0
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d908      	bls.n	80008a8 <__udivmoddi4+0x260>
 8000896:	eb1c 0000 	adds.w	r0, ip, r0
 800089a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800089e:	d22f      	bcs.n	8000900 <__udivmoddi4+0x2b8>
 80008a0:	4283      	cmp	r3, r0
 80008a2:	d92d      	bls.n	8000900 <__udivmoddi4+0x2b8>
 80008a4:	3902      	subs	r1, #2
 80008a6:	4460      	add	r0, ip
 80008a8:	1ac0      	subs	r0, r0, r3
 80008aa:	fbb0 f3f7 	udiv	r3, r0, r7
 80008ae:	fb07 0013 	mls	r0, r7, r3, r0
 80008b2:	b2ad      	uxth	r5, r5
 80008b4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008b8:	fb03 f00e 	mul.w	r0, r3, lr
 80008bc:	42a8      	cmp	r0, r5
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x28a>
 80008c0:	eb1c 0505 	adds.w	r5, ip, r5
 80008c4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008c8:	d216      	bcs.n	80008f8 <__udivmoddi4+0x2b0>
 80008ca:	42a8      	cmp	r0, r5
 80008cc:	d914      	bls.n	80008f8 <__udivmoddi4+0x2b0>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4465      	add	r5, ip
 80008d2:	1a28      	subs	r0, r5, r0
 80008d4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008d8:	e738      	b.n	800074c <__udivmoddi4+0x104>
 80008da:	4631      	mov	r1, r6
 80008dc:	4630      	mov	r0, r6
 80008de:	e707      	b.n	80006f0 <__udivmoddi4+0xa8>
 80008e0:	462f      	mov	r7, r5
 80008e2:	e6e4      	b.n	80006ae <__udivmoddi4+0x66>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6f9      	b.n	80006dc <__udivmoddi4+0x94>
 80008e8:	454b      	cmp	r3, r9
 80008ea:	d2a9      	bcs.n	8000840 <__udivmoddi4+0x1f8>
 80008ec:	ebb9 0802 	subs.w	r8, r9, r2
 80008f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7a3      	b.n	8000840 <__udivmoddi4+0x1f8>
 80008f8:	4643      	mov	r3, r8
 80008fa:	e7ea      	b.n	80008d2 <__udivmoddi4+0x28a>
 80008fc:	4628      	mov	r0, r5
 80008fe:	e794      	b.n	800082a <__udivmoddi4+0x1e2>
 8000900:	4641      	mov	r1, r8
 8000902:	e7d1      	b.n	80008a8 <__udivmoddi4+0x260>
 8000904:	46d0      	mov	r8, sl
 8000906:	e77b      	b.n	8000800 <__udivmoddi4+0x1b8>
 8000908:	4464      	add	r4, ip
 800090a:	3802      	subs	r0, #2
 800090c:	e747      	b.n	800079e <__udivmoddi4+0x156>
 800090e:	3b02      	subs	r3, #2
 8000910:	4465      	add	r5, ip
 8000912:	e72f      	b.n	8000774 <__udivmoddi4+0x12c>
 8000914:	4608      	mov	r0, r1
 8000916:	e706      	b.n	8000726 <__udivmoddi4+0xde>
 8000918:	4631      	mov	r1, r6
 800091a:	e6e9      	b.n	80006f0 <__udivmoddi4+0xa8>

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b500      	push	{lr}
 8000922:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000924:	2300      	movs	r3, #0
 8000926:	9308      	str	r3, [sp, #32]
 8000928:	9309      	str	r3, [sp, #36]	; 0x24
 800092a:	930b      	str	r3, [sp, #44]	; 0x2c
 800092c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	9303      	str	r3, [sp, #12]
 8000934:	9304      	str	r3, [sp, #16]
 8000936:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000938:	2201      	movs	r2, #1
 800093a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000942:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2202      	movs	r2, #2
 8000946:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000948:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800094a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800094e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	a806      	add	r0, sp, #24
 8000952:	f001 fb03 	bl	8001f5c <HAL_RCC_OscConfig>
 8000956:	b980      	cbnz	r0, 800097a <SystemClock_Config+0x5a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2102      	movs	r1, #2
 800095e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096c:	a801      	add	r0, sp, #4
 800096e:	f001 fd43 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000972:	b920      	cbnz	r0, 800097e <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }
}
 8000974:	b011      	add	sp, #68	; 0x44
 8000976:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <SystemClock_Config+0x5c>
 800097e:	b672      	cpsid	i
 8000980:	e7fe      	b.n	8000980 <SystemClock_Config+0x60>
	...

08000984 <main>:
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8000988:	f000 fb4a 	bl	8001020 <HAL_Init>
  SystemClock_Config();
 800098c:	f7ff ffc8 	bl	8000920 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	2400      	movs	r4, #0
 8000992:	9407      	str	r4, [sp, #28]
 8000994:	9408      	str	r4, [sp, #32]
 8000996:	9409      	str	r4, [sp, #36]	; 0x24
 8000998:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	4dad      	ldr	r5, [pc, #692]	; (8000c50 <main+0x2cc>)
 800099c:	69ab      	ldr	r3, [r5, #24]
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	61ab      	str	r3, [r5, #24]
 80009a4:	69ab      	ldr	r3, [r5, #24]
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	9302      	str	r3, [sp, #8]
 80009ac:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	69ab      	ldr	r3, [r5, #24]
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	61ab      	str	r3, [r5, #24]
 80009b6:	69ab      	ldr	r3, [r5, #24]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	9303      	str	r3, [sp, #12]
 80009be:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	69ab      	ldr	r3, [r5, #24]
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	61ab      	str	r3, [r5, #24]
 80009c8:	69ab      	ldr	r3, [r5, #24]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	9304      	str	r3, [sp, #16]
 80009d0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	69ab      	ldr	r3, [r5, #24]
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	61ab      	str	r3, [r5, #24]
 80009da:	69ab      	ldr	r3, [r5, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	9305      	str	r3, [sp, #20]
 80009e2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	69ab      	ldr	r3, [r5, #24]
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	61ab      	str	r3, [r5, #24]
 80009ec:	69ab      	ldr	r3, [r5, #24]
 80009ee:	f003 0320 	and.w	r3, r3, #32
 80009f2:	9306      	str	r3, [sp, #24]
 80009f4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80009f6:	4f97      	ldr	r7, [pc, #604]	; (8000c54 <main+0x2d0>)
 80009f8:	4622      	mov	r2, r4
 80009fa:	2107      	movs	r1, #7
 80009fc:	4638      	mov	r0, r7
 80009fe:	f001 fa97 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8
 8000a02:	f8df a254 	ldr.w	sl, [pc, #596]	; 8000c58 <main+0x2d4>
 8000a06:	2201      	movs	r2, #1
 8000a08:	f240 3123 	movw	r1, #803	; 0x323
 8000a0c:	4650      	mov	r0, sl
 8000a0e:	f001 fa8f 	bl	8001f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000a12:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8000c5c <main+0x2d8>
 8000a16:	4622      	mov	r2, r4
 8000a18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a1c:	4648      	mov	r0, r9
 8000a1e:	f001 fa87 	bl	8001f30 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000a22:	2307      	movs	r3, #7
 8000a24:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2601      	movs	r6, #1
 8000a28:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2c:	f04f 0803 	mov.w	r8, #3
 8000a30:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	a907      	add	r1, sp, #28
 8000a36:	4638      	mov	r0, r7
 8000a38:	f001 f92a 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a44:	a907      	add	r1, sp, #28
 8000a46:	4638      	mov	r0, r7
 8000a48:	f001 f922 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	4b83      	ldr	r3, [pc, #524]	; (8000c60 <main+0x2dc>)
 8000a52:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a56:	a907      	add	r1, sp, #28
 8000a58:	4638      	mov	r0, r7
 8000a5a:	f001 f919 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	a907      	add	r1, sp, #28
 8000a6a:	487e      	ldr	r0, [pc, #504]	; (8000c64 <main+0x2e0>)
 8000a6c:	f001 f910 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a70:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	a907      	add	r1, sp, #28
 8000a78:	487b      	ldr	r0, [pc, #492]	; (8000c68 <main+0x2e4>)
 8000a7a:	f001 f909 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8
 8000a7e:	f240 3323 	movw	r3, #803	; 0x323
 8000a82:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	a907      	add	r1, sp, #28
 8000a8e:	4650      	mov	r0, sl
 8000a90:	f001 f8fe 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a98:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	a907      	add	r1, sp, #28
 8000aa4:	4648      	mov	r0, r9
 8000aa6:	f001 f8f3 	bl	8001c90 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000aaa:	4622      	mov	r2, r4
 8000aac:	4621      	mov	r1, r4
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f000 fb00 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f000 fb33 	bl	8001120 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	696b      	ldr	r3, [r5, #20]
 8000abc:	4333      	orrs	r3, r6
 8000abe:	616b      	str	r3, [r5, #20]
 8000ac0:	696b      	ldr	r3, [r5, #20]
 8000ac2:	4033      	ands	r3, r6
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000ac8:	4868      	ldr	r0, [pc, #416]	; (8000c6c <main+0x2e8>)
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <main+0x2ec>)
 8000acc:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000ace:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad2:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ad4:	2340      	movs	r3, #64	; 0x40
 8000ad6:	6083      	str	r3, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae0:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000ae8:	6184      	str	r4, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000aea:	61c4      	str	r4, [r0, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000aec:	f000 fb4a 	bl	8001184 <HAL_DMA_Init>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	f040 809a 	bne.w	8000c2a <main+0x2a6>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	4611      	mov	r1, r2
 8000afa:	200b      	movs	r0, #11
 8000afc:	f000 fada 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b00:	200b      	movs	r0, #11
 8000b02:	f000 fb0d 	bl	8001120 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	4611      	mov	r1, r2
 8000b0a:	200c      	movs	r0, #12
 8000b0c:	f000 fad2 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b10:	200c      	movs	r0, #12
 8000b12:	f000 fb05 	bl	8001120 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	4611      	mov	r1, r2
 8000b1a:	200d      	movs	r0, #13
 8000b1c:	f000 faca 	bl	80010b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b20:	200d      	movs	r0, #13
 8000b22:	f000 fafd 	bl	8001120 <HAL_NVIC_EnableIRQ>
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b26:	2200      	movs	r2, #0
 8000b28:	920d      	str	r2, [sp, #52]	; 0x34
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000b2a:	4852      	ldr	r0, [pc, #328]	; (8000c74 <main+0x2f0>)
 8000b2c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000b30:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b32:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000b36:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000b38:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b3a:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b3c:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b3e:	2110      	movs	r1, #16
 8000b40:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b42:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b44:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b46:	6202      	str	r2, [r0, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b48:	6242      	str	r2, [r0, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	6283      	str	r3, [r0, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b50:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b52:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b54:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b56:	6382      	str	r2, [r0, #56]	; 0x38
  Timing.AddressSetupTime = 15;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	9307      	str	r3, [sp, #28]
  Timing.AddressHoldTime = 15;
 8000b5c:	9308      	str	r3, [sp, #32]
  Timing.DataSetupTime = 255;
 8000b5e:	24ff      	movs	r4, #255	; 0xff
 8000b60:	9409      	str	r4, [sp, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000b62:	930a      	str	r3, [sp, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000b64:	910b      	str	r1, [sp, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000b66:	2311      	movs	r3, #17
 8000b68:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b6a:	a907      	add	r1, sp, #28
 8000b6c:	f001 fd1c 	bl	80025a8 <HAL_SRAM_Init>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d15c      	bne.n	8000c2e <main+0x2aa>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000b74:	4a40      	ldr	r2, [pc, #256]	; (8000c78 <main+0x2f4>)
 8000b76:	69d3      	ldr	r3, [r2, #28]
 8000b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7c:	61d3      	str	r3, [r2, #28]
  huart3.Instance = USART3;
 8000b7e:	483f      	ldr	r0, [pc, #252]	; (8000c7c <main+0x2f8>)
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <main+0x2fc>)
 8000b82:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000b84:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b88:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b8e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b90:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b92:	220c      	movs	r2, #12
 8000b94:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b9a:	f001 fdcd 	bl	8002738 <HAL_UART_Init>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d147      	bne.n	8000c32 <main+0x2ae>
  HAL_UART_MspInit(&huart3);
 8000ba2:	4c36      	ldr	r4, [pc, #216]	; (8000c7c <main+0x2f8>)
 8000ba4:	4620      	mov	r0, r4
 8000ba6:	f000 f8b9 	bl	8000d1c <HAL_UART_MspInit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&single_buffer, 1);
 8000baa:	2201      	movs	r2, #1
 8000bac:	4935      	ldr	r1, [pc, #212]	; (8000c84 <main+0x300>)
 8000bae:	4620      	mov	r0, r4
 8000bb0:	f002 f835 	bl	8002c1e <HAL_UART_Receive_IT>
  huart1.Instance = USART1;
 8000bb4:	4834      	ldr	r0, [pc, #208]	; (8000c88 <main+0x304>)
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <main+0x308>)
 8000bb8:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000bba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bbe:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	220c      	movs	r2, #12
 8000bca:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bcc:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bce:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd0:	f001 fdb2 	bl	8002738 <HAL_UART_Init>
 8000bd4:	bb78      	cbnz	r0, 8000c36 <main+0x2b2>
  hcrc.Instance = CRC;
 8000bd6:	482e      	ldr	r0, [pc, #184]	; (8000c90 <main+0x30c>)
 8000bd8:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <main+0x310>)
 8000bda:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bdc:	f000 fac2 	bl	8001164 <HAL_CRC_Init>
 8000be0:	bb58      	cbnz	r0, 8000c3a <main+0x2b6>
  lv_init(); //lvgl initialization
 8000be2:	f005 fe2d 	bl	8006840 <lv_init>
  lv_port_disp_init(); // lvgl display initialization
 8000be6:	f002 fed3 	bl	8003990 <lv_port_disp_init>
  lv_port_indev_init(); // lvgl touch initialization
 8000bea:	f002 ff1f 	bl	8003a2c <lv_port_indev_init>
  set_screen();
 8000bee:	f002 fa15 	bl	800301c <set_screen>
  debug_screen();
 8000bf2:	f002 fa1f 	bl	8003034 <debug_screen>
  HAL_Delay(4000);
 8000bf6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000bfa:	f000 fa35 	bl	8001068 <HAL_Delay>
  resetEsp();
 8000bfe:	f002 f8f1 	bl	8002de4 <resetEsp>
  checkAT();
 8000c02:	f002 f8e1 	bl	8002dc8 <checkAT>
  print_debug("Text"); // reset screen
 8000c06:	4824      	ldr	r0, [pc, #144]	; (8000c98 <main+0x314>)
 8000c08:	f002 fa4a 	bl	80030a0 <print_debug>
  HAL_Delay(4000);
 8000c0c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000c10:	f000 fa2a 	bl	8001068 <HAL_Delay>
  connectWifi("YangFamily","yang27764892"); // connect to wifi
 8000c14:	4921      	ldr	r1, [pc, #132]	; (8000c9c <main+0x318>)
 8000c16:	4822      	ldr	r0, [pc, #136]	; (8000ca0 <main+0x31c>)
 8000c18:	f002 f8f2 	bl	8002e00 <connectWifi>
  HAL_Delay(1000);
 8000c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c20:	f000 fa22 	bl	8001068 <HAL_Delay>
	  if(detect_server)
 8000c24:	4c1f      	ldr	r4, [pc, #124]	; (8000ca4 <main+0x320>)
		  detect_server = 0;
 8000c26:	2500      	movs	r5, #0
 8000c28:	e00e      	b.n	8000c48 <main+0x2c4>
 8000c2a:	b672      	cpsid	i
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <main+0x2a8>
 8000c2e:	b672      	cpsid	i
 8000c30:	e7fe      	b.n	8000c30 <main+0x2ac>
 8000c32:	b672      	cpsid	i
 8000c34:	e7fe      	b.n	8000c34 <main+0x2b0>
 8000c36:	b672      	cpsid	i
 8000c38:	e7fe      	b.n	8000c38 <main+0x2b4>
 8000c3a:	b672      	cpsid	i
 8000c3c:	e7fe      	b.n	8000c3c <main+0x2b8>
		  serverHandler();
 8000c3e:	f002 f94b 	bl	8002ed8 <serverHandler>
		  detect_server = 0;
 8000c42:	7025      	strb	r5, [r4, #0]
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
 8000c44:	f022 f9ea 	bl	802301c <lv_timer_handler>
	  if(detect_server)
 8000c48:	7823      	ldrb	r3, [r4, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f7      	bne.n	8000c3e <main+0x2ba>
 8000c4e:	e7f9      	b.n	8000c44 <main+0x2c0>
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40011800 	.word	0x40011800
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	40011400 	.word	0x40011400
 8000c60:	10210000 	.word	0x10210000
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	20000814 	.word	0x20000814
 8000c70:	40020008 	.word	0x40020008
 8000c74:	200008e0 	.word	0x200008e0
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	2000096c 	.word	0x2000096c
 8000c80:	40004800 	.word	0x40004800
 8000c84:	200011c1 	.word	0x200011c1
 8000c88:	20000928 	.word	0x20000928
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	2000080c 	.word	0x2000080c
 8000c94:	40023000 	.word	0x40023000
 8000c98:	0802cdf0 	.word	0x0802cdf0
 8000c9c:	0802cdf8 	.word	0x0802cdf8
 8000ca0:	0802ce08 	.word	0x0802ce08
 8000ca4:	200011c0 	.word	0x200011c0

08000ca8 <Error_Handler>:
 8000ca8:	b672      	cpsid	i
  while (1)
 8000caa:	e7fe      	b.n	8000caa <Error_Handler+0x2>

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_MspInit+0x3c>)
 8000cb0:	699a      	ldr	r2, [r3, #24]
 8000cb2:	f042 0201 	orr.w	r2, r2, #1
 8000cb6:	619a      	str	r2, [r3, #24]
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	f002 0201 	and.w	r2, r2, #1
 8000cbe:	9200      	str	r2, [sp, #0]
 8000cc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	69da      	ldr	r2, [r3, #28]
 8000cc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cc8:	61da      	str	r2, [r3, #28]
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <HAL_MspInit+0x40>)
 8000cd6:	6853      	ldr	r3, [r2, #4]
 8000cd8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	b002      	add	sp, #8
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000

08000cf0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000cf0:	6802      	ldr	r2, [r0, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_CRC_MspInit+0x28>)
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d000      	beq.n	8000cfa <HAL_CRC_MspInit+0xa>
 8000cf8:	4770      	bx	lr
{
 8000cfa:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cfc:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d12:	b002      	add	sp, #8
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023000 	.word	0x40023000

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	2300      	movs	r3, #0
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	9305      	str	r3, [sp, #20]
 8000d26:	9306      	str	r3, [sp, #24]
 8000d28:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000d2a:	6803      	ldr	r3, [r0, #0]
 8000d2c:	4a47      	ldr	r2, [pc, #284]	; (8000e4c <HAL_UART_MspInit+0x130>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d005      	beq.n	8000d3e <HAL_UART_MspInit+0x22>
 8000d32:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8000d34:	4a46      	ldr	r2, [pc, #280]	; (8000e50 <HAL_UART_MspInit+0x134>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d02b      	beq.n	8000d92 <HAL_UART_MspInit+0x76>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3a:	b008      	add	sp, #32
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3e:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <HAL_UART_MspInit+0x138>)
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d46:	619a      	str	r2, [r3, #24]
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	699a      	ldr	r2, [r3, #24]
 8000d54:	f042 0204 	orr.w	r2, r2, #4
 8000d58:	619a      	str	r2, [r3, #24]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	4c39      	ldr	r4, [pc, #228]	; (8000e58 <HAL_UART_MspInit+0x13c>)
 8000d74:	a904      	add	r1, sp, #16
 8000d76:	4620      	mov	r0, r4
 8000d78:	f000 ff8a 	bl	8001c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	a904      	add	r1, sp, #16
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f000 ff80 	bl	8001c90 <HAL_GPIO_Init>
 8000d90:	e7d3      	b.n	8000d3a <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d92:	4b30      	ldr	r3, [pc, #192]	; (8000e54 <HAL_UART_MspInit+0x138>)
 8000d94:	69da      	ldr	r2, [r3, #28]
 8000d96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d9a:	61da      	str	r2, [r3, #28]
 8000d9c:	69da      	ldr	r2, [r3, #28]
 8000d9e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000da2:	9202      	str	r2, [sp, #8]
 8000da4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	699a      	ldr	r2, [r3, #24]
 8000da8:	f042 0208 	orr.w	r2, r2, #8
 8000dac:	619a      	str	r2, [r3, #24]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	9303      	str	r3, [sp, #12]
 8000db6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	4e25      	ldr	r6, [pc, #148]	; (8000e5c <HAL_UART_MspInit+0x140>)
 8000dc8:	a904      	add	r1, sp, #16
 8000dca:	4630      	mov	r0, r6
 8000dcc:	f000 ff60 	bl	8001c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dd4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	a904      	add	r1, sp, #16
 8000dde:	4630      	mov	r0, r6
 8000de0:	f000 ff56 	bl	8001c90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000de4:	481e      	ldr	r0, [pc, #120]	; (8000e60 <HAL_UART_MspInit+0x144>)
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_UART_MspInit+0x148>)
 8000de8:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	6045      	str	r5, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dec:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000df2:	6105      	str	r5, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df4:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000df6:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df8:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000dfa:	f000 f9c3 	bl	8001184 <HAL_DMA_Init>
 8000dfe:	b9f0      	cbnz	r0, 8000e3e <HAL_UART_MspInit+0x122>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_UART_MspInit+0x144>)
 8000e02:	63a3      	str	r3, [r4, #56]	; 0x38
 8000e04:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <HAL_UART_MspInit+0x14c>)
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0x150>)
 8000e0a:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	60c2      	str	r2, [r0, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e18:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1a:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e1c:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e20:	f000 f9b0 	bl	8001184 <HAL_DMA_Init>
 8000e24:	b970      	cbnz	r0, 8000e44 <HAL_UART_MspInit+0x128>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_UART_MspInit+0x14c>)
 8000e28:	6363      	str	r3, [r4, #52]	; 0x34
 8000e2a:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4611      	mov	r1, r2
 8000e30:	2027      	movs	r0, #39	; 0x27
 8000e32:	f000 f93f 	bl	80010b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e36:	2027      	movs	r0, #39	; 0x27
 8000e38:	f000 f972 	bl	8001120 <HAL_NVIC_EnableIRQ>
}
 8000e3c:	e77d      	b.n	8000d3a <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8000e3e:	f7ff ff33 	bl	8000ca8 <Error_Handler>
 8000e42:	e7dd      	b.n	8000e00 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8000e44:	f7ff ff30 	bl	8000ca8 <Error_Handler>
 8000e48:	e7ed      	b.n	8000e26 <HAL_UART_MspInit+0x10a>
 8000e4a:	bf00      	nop
 8000e4c:	40013800 	.word	0x40013800
 8000e50:	40004800 	.word	0x40004800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	20000858 	.word	0x20000858
 8000e64:	40020030 	.word	0x40020030
 8000e68:	2000089c 	.word	0x2000089c
 8000e6c:	4002001c 	.word	0x4002001c

08000e70 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000e70:	b530      	push	{r4, r5, lr}
 8000e72:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e74:	2300      	movs	r3, #0
 8000e76:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_SRAM_MspInit+0x58>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	b10b      	cbz	r3, 8000e82 <HAL_SRAM_MspInit+0x12>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e7e:	b007      	add	sp, #28
 8000e80:	bd30      	pop	{r4, r5, pc}
  FSMC_Initialized = 1;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_SRAM_MspInit+0x58>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_SRAM_MspInit+0x5c>)
 8000e8a:	695a      	ldr	r2, [r3, #20]
 8000e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e9c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000ea0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2502      	movs	r5, #2
 8000ea4:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea6:	2403      	movs	r4, #3
 8000ea8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eaa:	a902      	add	r1, sp, #8
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <HAL_SRAM_MspInit+0x60>)
 8000eae:	f000 feef 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000eb2:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000eb6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	a902      	add	r1, sp, #8
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_SRAM_MspInit+0x64>)
 8000ec0:	f000 fee6 	bl	8001c90 <HAL_GPIO_Init>
}
 8000ec4:	e7db      	b.n	8000e7e <HAL_SRAM_MspInit+0xe>
 8000ec6:	bf00      	nop
 8000ec8:	200009b0 	.word	0x200009b0
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40011800 	.word	0x40011800
 8000ed4:	40011400 	.word	0x40011400

08000ed8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler>

08000eda <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler>

08000edc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler>

08000ede <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler>

08000ee0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler>

08000ee2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f000 f8ab 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bd08      	pop	{r3, pc}

08000ef0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ef0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	f001 f824 	bl	8001f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ef8:	bd08      	pop	{r3, pc}
	...

08000efc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000efc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8000efe:	4802      	ldr	r0, [pc, #8]	; (8000f08 <DMA1_Channel1_IRQHandler+0xc>)
 8000f00:	f000 fd54 	bl	80019ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f04:	bd08      	pop	{r3, pc}
 8000f06:	bf00      	nop
 8000f08:	20000814 	.word	0x20000814

08000f0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f0e:	4802      	ldr	r0, [pc, #8]	; (8000f18 <DMA1_Channel2_IRQHandler+0xc>)
 8000f10:	f000 fd4c 	bl	80019ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f14:	bd08      	pop	{r3, pc}
 8000f16:	bf00      	nop
 8000f18:	2000089c 	.word	0x2000089c

08000f1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000f1e:	4802      	ldr	r0, [pc, #8]	; (8000f28 <DMA1_Channel3_IRQHandler+0xc>)
 8000f20:	f000 fd44 	bl	80019ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f24:	bd08      	pop	{r3, pc}
 8000f26:	bf00      	nop
 8000f28:	20000858 	.word	0x20000858

08000f2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */


  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f2e:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USART3_IRQHandler+0xc>)
 8000f30:	f001 fd16 	bl	8002960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f34:	bd08      	pop	{r3, pc}
 8000f36:	bf00      	nop
 8000f38:	2000096c 	.word	0x2000096c

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b508      	push	{r3, lr}
 8000f3e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <_sbrk+0x38>)
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	b152      	cbz	r2, 8000f5c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <_sbrk+0x38>)
 8000f48:	6810      	ldr	r0, [r2, #0]
 8000f4a:	4403      	add	r3, r0
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <_sbrk+0x3c>)
 8000f4e:	490b      	ldr	r1, [pc, #44]	; (8000f7c <_sbrk+0x40>)
 8000f50:	1a52      	subs	r2, r2, r1
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d806      	bhi.n	8000f64 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <_sbrk+0x38>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f5a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000f5c:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x38>)
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <_sbrk+0x44>)
 8000f60:	6011      	str	r1, [r2, #0]
 8000f62:	e7f0      	b.n	8000f46 <_sbrk+0xa>
    errno = ENOMEM;
 8000f64:	f02b fa64 	bl	802c430 <__errno>
 8000f68:	230c      	movs	r3, #12
 8000f6a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f70:	e7f3      	b.n	8000f5a <_sbrk+0x1e>
 8000f72:	bf00      	nop
 8000f74:	200009b4 	.word	0x200009b4
 8000f78:	20010000 	.word	0x20010000
 8000f7c:	00001000 	.word	0x00001000
 8000f80:	2000c1b0 	.word	0x2000c1b0

08000f84 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	4770      	bx	lr
	...

08000f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fae:	f7ff ffe9 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f02b fa43 	bl	802c43c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb6:	f7ff fce5 	bl	8000984 <main>
  bx lr
 8000fba:	4770      	bx	lr
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	200007f0 	.word	0x200007f0
  ldr r2, =_sidata
 8000fc4:	080331d0 	.word	0x080331d0
  ldr r2, =_sbss
 8000fc8:	200007f0 	.word	0x200007f0
  ldr r4, =_ebss
 8000fcc:	2000c1b0 	.word	0x2000c1b0

08000fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_2_IRQHandler>
	...

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b510      	push	{r4, lr}
 8000fd6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_InitTick+0x40>)
 8000fda:	7818      	ldrb	r0, [r3, #0]
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_InitTick+0x44>)
 8000fe6:	6810      	ldr	r0, [r2, #0]
 8000fe8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fec:	f000 f8a6 	bl	800113c <HAL_SYSTICK_Config>
 8000ff0:	b968      	cbnz	r0, 800100e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	2c0f      	cmp	r4, #15
 8000ff4:	d901      	bls.n	8000ffa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	e00a      	b.n	8001010 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001002:	f000 f857 	bl	80010b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_InitTick+0x48>)
 8001008:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2000      	movs	r0, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
}
 8001010:	bd10      	pop	{r4, pc}
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008

08001020 <HAL_Init>:
{
 8001020:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001022:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_Init+0x20>)
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f82f 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ffce 	bl	8000fd4 <HAL_InitTick>
  HAL_MspInit();
 8001038:	f7ff fe38 	bl	8000cac <HAL_MspInit>
}
 800103c:	2000      	movs	r0, #0
 800103e:	bd08      	pop	{r3, pc}
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_IncTick+0x10>)
 8001046:	6811      	ldr	r1, [r2, #0]
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_IncTick+0x14>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	440b      	add	r3, r1
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200009b8 	.word	0x200009b8
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <HAL_GetTick+0x8>)
 800105e:	6818      	ldr	r0, [r3, #0]
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200009b8 	.word	0x200009b8

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b538      	push	{r3, r4, r5, lr}
 800106a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff fff6 	bl	800105c <HAL_GetTick>
 8001070:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001076:	d002      	beq.n	800107e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <HAL_Delay+0x24>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107e:	f7ff ffed 	bl	800105c <HAL_GetTick>
 8001082:	1b40      	subs	r0, r0, r5
 8001084:	42a0      	cmp	r0, r4
 8001086:	d3fa      	bcc.n	800107e <HAL_Delay+0x16>
  {
  }
}
 8001088:	bd38      	pop	{r3, r4, r5, pc}
 800108a:	bf00      	nop
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4907      	ldr	r1, [pc, #28]	; (80010b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001092:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001094:	0203      	lsls	r3, r0, #8
 8001096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800109e:	0412      	lsls	r2, r2, #16
 80010a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80010ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_NVIC_SetPriority+0x64>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010be:	f1c3 0c07 	rsb	ip, r3, #7
 80010c2:	f1bc 0f04 	cmp.w	ip, #4
 80010c6:	bf28      	it	cs
 80010c8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010cc:	f103 0e04 	add.w	lr, r3, #4
 80010d0:	f1be 0f06 	cmp.w	lr, #6
 80010d4:	bf8c      	ite	hi
 80010d6:	3b03      	subhi	r3, #3
 80010d8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010da:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80010de:	fa0e fc0c 	lsl.w	ip, lr, ip
 80010e2:	ea21 010c 	bic.w	r1, r1, ip
 80010e6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	fa0e f303 	lsl.w	r3, lr, r3
 80010ec:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80010f2:	2800      	cmp	r0, #0
 80010f4:	db09      	blt.n	800110a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	0109      	lsls	r1, r1, #4
 80010f8:	b2c9      	uxtb	r1, r1
 80010fa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80010fe:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001102:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001106:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	f000 000f 	and.w	r0, r0, #15
 800110e:	0109      	lsls	r1, r1, #4
 8001110:	b2c9      	uxtb	r1, r1
 8001112:	4b02      	ldr	r3, [pc, #8]	; (800111c <HAL_NVIC_SetPriority+0x68>)
 8001114:	5419      	strb	r1, [r3, r0]
 8001116:	e7f6      	b.n	8001106 <HAL_NVIC_SetPriority+0x52>
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	e000ed14 	.word	0xe000ed14

08001120 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001120:	2800      	cmp	r0, #0
 8001122:	db08      	blt.n	8001136 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001124:	0942      	lsrs	r2, r0, #5
 8001126:	f000 001f 	and.w	r0, r0, #31
 800112a:	2301      	movs	r3, #1
 800112c:	fa03 f000 	lsl.w	r0, r3, r0
 8001130:	4b01      	ldr	r3, [pc, #4]	; (8001138 <HAL_NVIC_EnableIRQ+0x18>)
 8001132:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100

0800113c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	3801      	subs	r0, #1
 800113e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001142:	d20b      	bcs.n	800115c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001144:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001148:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <HAL_SYSTICK_Config+0x24>)
 800114c:	21f0      	movs	r1, #240	; 0xf0
 800114e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001152:	2000      	movs	r0, #0
 8001154:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	2207      	movs	r2, #7
 8001158:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800115c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001164:	b158      	cbz	r0, 800117e <HAL_CRC_Init+0x1a>
{
 8001166:	b510      	push	{r4, lr}
 8001168:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800116a:	7943      	ldrb	r3, [r0, #5]
 800116c:	b11b      	cbz	r3, 8001176 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800116e:	2301      	movs	r3, #1
 8001170:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001172:	2000      	movs	r0, #0
}
 8001174:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001176:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001178:	f7ff fdba 	bl	8000cf0 <HAL_CRC_MspInit>
 800117c:	e7f7      	b.n	800116e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800117e:	2001      	movs	r0, #1
}
 8001180:	4770      	bx	lr
	...

08001184 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001184:	2800      	cmp	r0, #0
 8001186:	d03a      	beq.n	80011fe <HAL_DMA_Init+0x7a>
{
 8001188:	b410      	push	{r4}
 800118a:	4602      	mov	r2, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800118c:	6800      	ldr	r0, [r0, #0]
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_DMA_Init+0x80>)
 8001190:	4298      	cmp	r0, r3
 8001192:	d829      	bhi.n	80011e8 <HAL_DMA_Init+0x64>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_DMA_Init+0x84>)
 8001196:	4403      	add	r3, r0
 8001198:	491c      	ldr	r1, [pc, #112]	; (800120c <HAL_DMA_Init+0x88>)
 800119a:	fba1 1303 	umull	r1, r3, r1, r3
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_DMA_Init+0x8c>)
 80011a6:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011ae:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b0:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 80011b4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011b8:	6853      	ldr	r3, [r2, #4]
 80011ba:	6894      	ldr	r4, [r2, #8]
 80011bc:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	68d4      	ldr	r4, [r2, #12]
 80011c0:	4323      	orrs	r3, r4
 80011c2:	6914      	ldr	r4, [r2, #16]
 80011c4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c6:	6954      	ldr	r4, [r2, #20]
 80011c8:	4323      	orrs	r3, r4
 80011ca:	6994      	ldr	r4, [r2, #24]
 80011cc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ce:	69d4      	ldr	r4, [r2, #28]
 80011d0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80011d2:	430b      	orrs	r3, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011d4:	6003      	str	r3, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d6:	2000      	movs	r0, #0
 80011d8:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011da:	2301      	movs	r3, #1
 80011dc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011e0:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 80011e4:	bc10      	pop	{r4}
 80011e6:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_DMA_Init+0x90>)
 80011ea:	4403      	add	r3, r0
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <HAL_DMA_Init+0x88>)
 80011ee:	fba1 1303 	umull	r1, r3, r1, r3
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_DMA_Init+0x94>)
 80011fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011fc:	e7d4      	b.n	80011a8 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40020407 	.word	0x40020407
 8001208:	bffdfff8 	.word	0xbffdfff8
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	40020000 	.word	0x40020000
 8001214:	bffdfbf8 	.word	0xbffdfbf8
 8001218:	40020400 	.word	0x40020400

0800121c <HAL_DMA_Start>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800121c:	f890 c020 	ldrb.w	ip, [r0, #32]
 8001220:	f1bc 0f01 	cmp.w	ip, #1
 8001224:	d033      	beq.n	800128e <HAL_DMA_Start+0x72>
 8001226:	f04f 0c01 	mov.w	ip, #1
 800122a:	f880 c020 	strb.w	ip, [r0, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800122e:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 8001232:	f1bc 0f01 	cmp.w	ip, #1
 8001236:	d004      	beq.n	8001242 <HAL_DMA_Start+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8001238:	2300      	movs	r3, #0
 800123a:	f880 3020 	strb.w	r3, [r0, #32]
   status = HAL_BUSY;
 800123e:	2002      	movs	r0, #2
 8001240:	4770      	bx	lr
{
 8001242:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001244:	2402      	movs	r4, #2
 8001246:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124a:	2400      	movs	r4, #0
 800124c:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800124e:	6805      	ldr	r5, [r0, #0]
 8001250:	682c      	ldr	r4, [r5, #0]
 8001252:	f024 0401 	bic.w	r4, r4, #1
 8001256:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001258:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800125a:	2401      	movs	r4, #1
 800125c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800125e:	40b4      	lsls	r4, r6
 8001260:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001262:	6804      	ldr	r4, [r0, #0]
 8001264:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001266:	6843      	ldr	r3, [r0, #4]
 8001268:	2b10      	cmp	r3, #16
 800126a:	d00b      	beq.n	8001284 <HAL_DMA_Start+0x68>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800126c:	6803      	ldr	r3, [r0, #0]
 800126e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma);
 8001274:	6802      	ldr	r2, [r0, #0]
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2000      	movs	r0, #0
}
 8001280:	bc70      	pop	{r4, r5, r6}
 8001282:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001284:	6803      	ldr	r3, [r0, #0]
 8001286:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	60d9      	str	r1, [r3, #12]
 800128c:	e7f2      	b.n	8001274 <HAL_DMA_Start+0x58>
  __HAL_LOCK(hdma);
 800128e:	2002      	movs	r0, #2
}
 8001290:	4770      	bx	lr

08001292 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001292:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001296:	2b02      	cmp	r3, #2
 8001298:	d006      	beq.n	80012a8 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129a:	2304      	movs	r3, #4
 800129c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800129e:	2300      	movs	r3, #0
 80012a0:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
 80012a6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a8:	6802      	ldr	r2, [r0, #0]
 80012aa:	6813      	ldr	r3, [r2, #0]
 80012ac:	f023 030e 	bic.w	r3, r3, #14
 80012b0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80012b2:	6802      	ldr	r2, [r0, #0]
 80012b4:	6813      	ldr	r3, [r2, #0]
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012bc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80012be:	2201      	movs	r2, #1
 80012c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 80012c8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 80012cc:	2300      	movs	r3, #0
 80012ce:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 80012d2:	4618      	mov	r0, r3
}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_DMA_Abort_IT>:
{  
 80012d8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012da:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d003      	beq.n	80012ea <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	2304      	movs	r3, #4
 80012e4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
}
 80012e8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ea:	6802      	ldr	r2, [r0, #0]
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	f023 030e 	bic.w	r3, r3, #14
 80012f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80012f4:	6802      	ldr	r2, [r0, #0]
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012fe:	6803      	ldr	r3, [r0, #0]
 8001300:	4a4a      	ldr	r2, [pc, #296]	; (800142c <HAL_DMA_Abort_IT+0x154>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d94d      	bls.n	80013a2 <HAL_DMA_Abort_IT+0xca>
 8001306:	3a78      	subs	r2, #120	; 0x78
 8001308:	4293      	cmp	r3, r2
 800130a:	d023      	beq.n	8001354 <HAL_DMA_Abort_IT+0x7c>
 800130c:	3214      	adds	r2, #20
 800130e:	4293      	cmp	r3, r2
 8001310:	d02f      	beq.n	8001372 <HAL_DMA_Abort_IT+0x9a>
 8001312:	3214      	adds	r2, #20
 8001314:	4293      	cmp	r3, r2
 8001316:	d02e      	beq.n	8001376 <HAL_DMA_Abort_IT+0x9e>
 8001318:	3214      	adds	r2, #20
 800131a:	4293      	cmp	r3, r2
 800131c:	d02e      	beq.n	800137c <HAL_DMA_Abort_IT+0xa4>
 800131e:	3214      	adds	r2, #20
 8001320:	4293      	cmp	r3, r2
 8001322:	d02e      	beq.n	8001382 <HAL_DMA_Abort_IT+0xaa>
 8001324:	3214      	adds	r2, #20
 8001326:	4293      	cmp	r3, r2
 8001328:	d02e      	beq.n	8001388 <HAL_DMA_Abort_IT+0xb0>
 800132a:	3214      	adds	r2, #20
 800132c:	4293      	cmp	r3, r2
 800132e:	d02e      	beq.n	800138e <HAL_DMA_Abort_IT+0xb6>
 8001330:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001334:	4293      	cmp	r3, r2
 8001336:	d02d      	beq.n	8001394 <HAL_DMA_Abort_IT+0xbc>
 8001338:	3214      	adds	r2, #20
 800133a:	4293      	cmp	r3, r2
 800133c:	d02c      	beq.n	8001398 <HAL_DMA_Abort_IT+0xc0>
 800133e:	3214      	adds	r2, #20
 8001340:	4293      	cmp	r3, r2
 8001342:	d02b      	beq.n	800139c <HAL_DMA_Abort_IT+0xc4>
 8001344:	3214      	adds	r2, #20
 8001346:	4293      	cmp	r3, r2
 8001348:	bf0c      	ite	eq
 800134a:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 800134e:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001352:	e000      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 8001354:	2301      	movs	r3, #1
 8001356:	4a36      	ldr	r2, [pc, #216]	; (8001430 <HAL_DMA_Abort_IT+0x158>)
 8001358:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800135a:	2301      	movs	r3, #1
 800135c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001360:	2300      	movs	r3, #0
 8001362:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001366:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001368:	2b00      	cmp	r3, #0
 800136a:	d05d      	beq.n	8001428 <HAL_DMA_Abort_IT+0x150>
      hdma->XferAbortCallback(hdma);
 800136c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800136e:	2000      	movs	r0, #0
 8001370:	e7ba      	b.n	80012e8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001372:	2310      	movs	r3, #16
 8001374:	e7ef      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 8001376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137a:	e7ec      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	e7e9      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 8001382:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001386:	e7e6      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 8001388:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800138c:	e7e3      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 800138e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001392:	e7e0      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 8001394:	2301      	movs	r3, #1
 8001396:	e7de      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 8001398:	2310      	movs	r3, #16
 800139a:	e7dc      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 800139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a0:	e7d9      	b.n	8001356 <HAL_DMA_Abort_IT+0x7e>
 80013a2:	4a24      	ldr	r2, [pc, #144]	; (8001434 <HAL_DMA_Abort_IT+0x15c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d023      	beq.n	80013f0 <HAL_DMA_Abort_IT+0x118>
 80013a8:	3214      	adds	r2, #20
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d024      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x120>
 80013ae:	3214      	adds	r2, #20
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d023      	beq.n	80013fc <HAL_DMA_Abort_IT+0x124>
 80013b4:	3214      	adds	r2, #20
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d023      	beq.n	8001402 <HAL_DMA_Abort_IT+0x12a>
 80013ba:	3214      	adds	r2, #20
 80013bc:	4293      	cmp	r3, r2
 80013be:	d023      	beq.n	8001408 <HAL_DMA_Abort_IT+0x130>
 80013c0:	3214      	adds	r2, #20
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d023      	beq.n	800140e <HAL_DMA_Abort_IT+0x136>
 80013c6:	3214      	adds	r2, #20
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d023      	beq.n	8001414 <HAL_DMA_Abort_IT+0x13c>
 80013cc:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d022      	beq.n	800141a <HAL_DMA_Abort_IT+0x142>
 80013d4:	3214      	adds	r2, #20
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d021      	beq.n	800141e <HAL_DMA_Abort_IT+0x146>
 80013da:	3214      	adds	r2, #20
 80013dc:	4293      	cmp	r3, r2
 80013de:	d020      	beq.n	8001422 <HAL_DMA_Abort_IT+0x14a>
 80013e0:	3214      	adds	r2, #20
 80013e2:	4293      	cmp	r3, r2
 80013e4:	bf0c      	ite	eq
 80013e6:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80013ea:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80013ee:	e000      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 80013f0:	2301      	movs	r3, #1
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_DMA_Abort_IT+0x160>)
 80013f4:	6053      	str	r3, [r2, #4]
 80013f6:	e7b0      	b.n	800135a <HAL_DMA_Abort_IT+0x82>
 80013f8:	2310      	movs	r3, #16
 80013fa:	e7fa      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	e7f7      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	e7f4      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 8001408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140c:	e7f1      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 800140e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001412:	e7ee      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 8001414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001418:	e7eb      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 800141a:	2301      	movs	r3, #1
 800141c:	e7e9      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 800141e:	2310      	movs	r3, #16
 8001420:	e7e7      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
 8001422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001426:	e7e4      	b.n	80013f2 <HAL_DMA_Abort_IT+0x11a>
  HAL_StatusTypeDef status = HAL_OK;
 8001428:	2000      	movs	r0, #0
 800142a:	e75d      	b.n	80012e8 <HAL_DMA_Abort_IT+0x10>
 800142c:	40020080 	.word	0x40020080
 8001430:	40020400 	.word	0x40020400
 8001434:	40020008 	.word	0x40020008
 8001438:	40020000 	.word	0x40020000

0800143c <HAL_DMA_PollForTransfer>:
{
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	b083      	sub	sp, #12
 8001442:	4605      	mov	r5, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001444:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001448:	2b02      	cmp	r3, #2
 800144a:	d008      	beq.n	800145e <HAL_DMA_PollForTransfer+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144c:	2304      	movs	r3, #4
 800144e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001450:	2300      	movs	r3, #0
 8001452:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
}
 8001458:	b003      	add	sp, #12
 800145a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800145e:	468b      	mov	fp, r1
 8001460:	4614      	mov	r4, r2
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8001462:	6806      	ldr	r6, [r0, #0]
 8001464:	6833      	ldr	r3, [r6, #0]
 8001466:	f013 0f20 	tst.w	r3, #32
 800146a:	d127      	bne.n	80014bc <HAL_DMA_PollForTransfer+0x80>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800146c:	bb59      	cbnz	r1, 80014c6 <HAL_DMA_PollForTransfer+0x8a>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 800146e:	4baa      	ldr	r3, [pc, #680]	; (8001718 <HAL_DMA_PollForTransfer+0x2dc>)
 8001470:	429e      	cmp	r6, r3
 8001472:	d04f      	beq.n	8001514 <HAL_DMA_PollForTransfer+0xd8>
 8001474:	3314      	adds	r3, #20
 8001476:	429e      	cmp	r6, r3
 8001478:	d062      	beq.n	8001540 <HAL_DMA_PollForTransfer+0x104>
 800147a:	3314      	adds	r3, #20
 800147c:	429e      	cmp	r6, r3
 800147e:	d061      	beq.n	8001544 <HAL_DMA_PollForTransfer+0x108>
 8001480:	3314      	adds	r3, #20
 8001482:	429e      	cmp	r6, r3
 8001484:	d061      	beq.n	800154a <HAL_DMA_PollForTransfer+0x10e>
 8001486:	3314      	adds	r3, #20
 8001488:	429e      	cmp	r6, r3
 800148a:	d061      	beq.n	8001550 <HAL_DMA_PollForTransfer+0x114>
 800148c:	3314      	adds	r3, #20
 800148e:	429e      	cmp	r6, r3
 8001490:	d061      	beq.n	8001556 <HAL_DMA_PollForTransfer+0x11a>
 8001492:	3314      	adds	r3, #20
 8001494:	429e      	cmp	r6, r3
 8001496:	d061      	beq.n	800155c <HAL_DMA_PollForTransfer+0x120>
 8001498:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800149c:	429e      	cmp	r6, r3
 800149e:	d060      	beq.n	8001562 <HAL_DMA_PollForTransfer+0x126>
 80014a0:	3314      	adds	r3, #20
 80014a2:	429e      	cmp	r6, r3
 80014a4:	d05f      	beq.n	8001566 <HAL_DMA_PollForTransfer+0x12a>
 80014a6:	3314      	adds	r3, #20
 80014a8:	429e      	cmp	r6, r3
 80014aa:	d05e      	beq.n	800156a <HAL_DMA_PollForTransfer+0x12e>
 80014ac:	3314      	adds	r3, #20
 80014ae:	429e      	cmp	r6, r3
 80014b0:	bf0c      	ite	eq
 80014b2:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 80014b6:	f44f 3600 	movne.w	r6, #131072	; 0x20000
 80014ba:	e02c      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80014bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c0:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	e7c8      	b.n	8001458 <HAL_DMA_PollForTransfer+0x1c>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 80014c6:	4b94      	ldr	r3, [pc, #592]	; (8001718 <HAL_DMA_PollForTransfer+0x2dc>)
 80014c8:	429e      	cmp	r6, r3
 80014ca:	d051      	beq.n	8001570 <HAL_DMA_PollForTransfer+0x134>
 80014cc:	3314      	adds	r3, #20
 80014ce:	429e      	cmp	r6, r3
 80014d0:	d050      	beq.n	8001574 <HAL_DMA_PollForTransfer+0x138>
 80014d2:	3314      	adds	r3, #20
 80014d4:	429e      	cmp	r6, r3
 80014d6:	d04f      	beq.n	8001578 <HAL_DMA_PollForTransfer+0x13c>
 80014d8:	3314      	adds	r3, #20
 80014da:	429e      	cmp	r6, r3
 80014dc:	d04f      	beq.n	800157e <HAL_DMA_PollForTransfer+0x142>
 80014de:	3314      	adds	r3, #20
 80014e0:	429e      	cmp	r6, r3
 80014e2:	d04f      	beq.n	8001584 <HAL_DMA_PollForTransfer+0x148>
 80014e4:	3314      	adds	r3, #20
 80014e6:	429e      	cmp	r6, r3
 80014e8:	d04f      	beq.n	800158a <HAL_DMA_PollForTransfer+0x14e>
 80014ea:	3314      	adds	r3, #20
 80014ec:	429e      	cmp	r6, r3
 80014ee:	d04f      	beq.n	8001590 <HAL_DMA_PollForTransfer+0x154>
 80014f0:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80014f4:	429e      	cmp	r6, r3
 80014f6:	d04e      	beq.n	8001596 <HAL_DMA_PollForTransfer+0x15a>
 80014f8:	3314      	adds	r3, #20
 80014fa:	429e      	cmp	r6, r3
 80014fc:	d04d      	beq.n	800159a <HAL_DMA_PollForTransfer+0x15e>
 80014fe:	3314      	adds	r3, #20
 8001500:	429e      	cmp	r6, r3
 8001502:	d04c      	beq.n	800159e <HAL_DMA_PollForTransfer+0x162>
 8001504:	3314      	adds	r3, #20
 8001506:	429e      	cmp	r6, r3
 8001508:	bf0c      	ite	eq
 800150a:	f44f 4680 	moveq.w	r6, #16384	; 0x4000
 800150e:	f44f 2680 	movne.w	r6, #262144	; 0x40000
 8001512:	e000      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8001514:	2602      	movs	r6, #2
  tickstart = HAL_GetTick();
 8001516:	f7ff fda1 	bl	800105c <HAL_GetTick>
 800151a:	9001      	str	r0, [sp, #4]
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800151c:	4f7f      	ldr	r7, [pc, #508]	; (800171c <HAL_DMA_PollForTransfer+0x2e0>)
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 800151e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001718 <HAL_DMA_PollForTransfer+0x2dc>
 8001522:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8001720 <HAL_DMA_PollForTransfer+0x2e4>
 8001526:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8001724 <HAL_DMA_PollForTransfer+0x2e8>
 800152a:	f8cd b000 	str.w	fp, [sp]
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800152e:	682b      	ldr	r3, [r5, #0]
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8001530:	487d      	ldr	r0, [pc, #500]	; (8001728 <HAL_DMA_PollForTransfer+0x2ec>)
 8001532:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 800172c <HAL_DMA_PollForTransfer+0x2f0>
 8001536:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8001730 <HAL_DMA_PollForTransfer+0x2f4>
 800153a:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8001734 <HAL_DMA_PollForTransfer+0x2f8>
 800153e:	e037      	b.n	80015b0 <HAL_DMA_PollForTransfer+0x174>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8001540:	2620      	movs	r6, #32
 8001542:	e7e8      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001544:	f44f 7600 	mov.w	r6, #512	; 0x200
 8001548:	e7e5      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 800154a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 800154e:	e7e2      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001550:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001554:	e7df      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001556:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800155a:	e7dc      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 800155c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001560:	e7d9      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001562:	2602      	movs	r6, #2
 8001564:	e7d7      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001566:	2620      	movs	r6, #32
 8001568:	e7d5      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 800156a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800156e:	e7d2      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8001570:	2604      	movs	r6, #4
 8001572:	e7d0      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001574:	2640      	movs	r6, #64	; 0x40
 8001576:	e7ce      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001578:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800157c:	e7cb      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 800157e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8001582:	e7c8      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001584:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001588:	e7c5      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 800158a:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 800158e:	e7c2      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001590:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8001594:	e7bf      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 8001596:	2604      	movs	r6, #4
 8001598:	e7bd      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 800159a:	2640      	movs	r6, #64	; 0x40
 800159c:	e7bb      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
 800159e:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80015a2:	e7b8      	b.n	8001516 <HAL_DMA_PollForTransfer+0xda>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80015a4:	2208      	movs	r2, #8
 80015a6:	4211      	tst	r1, r2
 80015a8:	d144      	bne.n	8001634 <HAL_DMA_PollForTransfer+0x1f8>
    if(Timeout != HAL_MAX_DELAY)
 80015aa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80015ae:	d168      	bne.n	8001682 <HAL_DMA_PollForTransfer+0x246>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80015b0:	42bb      	cmp	r3, r7
 80015b2:	f240 80c3 	bls.w	800173c <HAL_DMA_PollForTransfer+0x300>
 80015b6:	4a60      	ldr	r2, [pc, #384]	; (8001738 <HAL_DMA_PollForTransfer+0x2fc>)
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	4232      	tst	r2, r6
 80015bc:	d174      	bne.n	80016a8 <HAL_DMA_PollForTransfer+0x26c>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_DMA_PollForTransfer+0x2fc>)
 80015c0:	6811      	ldr	r1, [r2, #0]
 80015c2:	4543      	cmp	r3, r8
 80015c4:	d0ee      	beq.n	80015a4 <HAL_DMA_PollForTransfer+0x168>
 80015c6:	454b      	cmp	r3, r9
 80015c8:	d019      	beq.n	80015fe <HAL_DMA_PollForTransfer+0x1c2>
 80015ca:	4553      	cmp	r3, sl
 80015cc:	d019      	beq.n	8001602 <HAL_DMA_PollForTransfer+0x1c6>
 80015ce:	4283      	cmp	r3, r0
 80015d0:	d01a      	beq.n	8001608 <HAL_DMA_PollForTransfer+0x1cc>
 80015d2:	4563      	cmp	r3, ip
 80015d4:	d01b      	beq.n	800160e <HAL_DMA_PollForTransfer+0x1d2>
 80015d6:	4573      	cmp	r3, lr
 80015d8:	d01c      	beq.n	8001614 <HAL_DMA_PollForTransfer+0x1d8>
 80015da:	42bb      	cmp	r3, r7
 80015dc:	d01d      	beq.n	800161a <HAL_DMA_PollForTransfer+0x1de>
 80015de:	455b      	cmp	r3, fp
 80015e0:	d01e      	beq.n	8001620 <HAL_DMA_PollForTransfer+0x1e4>
 80015e2:	321c      	adds	r2, #28
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d01d      	beq.n	8001624 <HAL_DMA_PollForTransfer+0x1e8>
 80015e8:	3214      	adds	r2, #20
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01c      	beq.n	8001628 <HAL_DMA_PollForTransfer+0x1ec>
 80015ee:	3214      	adds	r2, #20
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bf0c      	ite	eq
 80015f4:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 80015f8:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 80015fc:	e7d3      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	e7d1      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 8001602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001606:	e7ce      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 8001608:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800160c:	e7cb      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 800160e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001612:	e7c8      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 8001614:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001618:	e7c5      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 800161a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800161e:	e7c2      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 8001620:	2208      	movs	r2, #8
 8001622:	e7c0      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	e7be      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 8001628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162c:	e7bb      	b.n	80015a6 <HAL_DMA_PollForTransfer+0x16a>
 800162e:	2208      	movs	r2, #8
 8001630:	4211      	tst	r1, r2
 8001632:	d0ba      	beq.n	80015aa <HAL_DMA_PollForTransfer+0x16e>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001634:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001636:	2001      	movs	r0, #1
 8001638:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800163a:	fa00 f303 	lsl.w	r3, r0, r3
 800163e:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001640:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001642:	4303      	orrs	r3, r0
 8001644:	63ab      	str	r3, [r5, #56]	; 0x38
      hdma->State= HAL_DMA_STATE_READY;
 8001646:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 800164a:	2300      	movs	r3, #0
 800164c:	f885 3020 	strb.w	r3, [r5, #32]
      return HAL_ERROR;
 8001650:	e702      	b.n	8001458 <HAL_DMA_PollForTransfer+0x1c>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	e7ec      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 8001656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165a:	e7e9      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 800165c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001660:	e7e6      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 8001662:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001666:	e7e3      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 8001668:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800166c:	e7e0      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 800166e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001672:	e7dd      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 8001674:	2208      	movs	r2, #8
 8001676:	e7db      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	e7d9      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
 800167c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001680:	e7d6      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001682:	b134      	cbz	r4, 8001692 <HAL_DMA_PollForTransfer+0x256>
 8001684:	f7ff fcea 	bl	800105c <HAL_GetTick>
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	1ac0      	subs	r0, r0, r3
 800168c:	42a0      	cmp	r0, r4
 800168e:	f67f af4e 	bls.w	800152e <HAL_DMA_PollForTransfer+0xf2>
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8001692:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001694:	f043 0320 	orr.w	r3, r3, #32
 8001698:	63ab      	str	r3, [r5, #56]	; 0x38
        hdma->State = HAL_DMA_STATE_READY;
 800169a:	2001      	movs	r0, #1
 800169c:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        __HAL_UNLOCK(hdma);
 80016a0:	2300      	movs	r3, #0
 80016a2:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 80016a6:	e6d7      	b.n	8001458 <HAL_DMA_PollForTransfer+0x1c>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80016a8:	f8dd b000 	ldr.w	fp, [sp]
 80016ac:	f1bb 0f00 	cmp.w	fp, #0
 80016b0:	f000 80ac 	beq.w	800180c <HAL_DMA_PollForTransfer+0x3d0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016b4:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_DMA_PollForTransfer+0x2dc>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f000 8137 	beq.w	800192a <HAL_DMA_PollForTransfer+0x4ee>
 80016bc:	3214      	adds	r2, #20
 80016be:	4293      	cmp	r3, r2
 80016c0:	f000 8137 	beq.w	8001932 <HAL_DMA_PollForTransfer+0x4f6>
 80016c4:	3214      	adds	r2, #20
 80016c6:	4293      	cmp	r3, r2
 80016c8:	f000 8135 	beq.w	8001936 <HAL_DMA_PollForTransfer+0x4fa>
 80016cc:	3214      	adds	r2, #20
 80016ce:	4293      	cmp	r3, r2
 80016d0:	f000 8134 	beq.w	800193c <HAL_DMA_PollForTransfer+0x500>
 80016d4:	3214      	adds	r2, #20
 80016d6:	4293      	cmp	r3, r2
 80016d8:	f000 8133 	beq.w	8001942 <HAL_DMA_PollForTransfer+0x506>
 80016dc:	3214      	adds	r2, #20
 80016de:	4293      	cmp	r3, r2
 80016e0:	f000 8132 	beq.w	8001948 <HAL_DMA_PollForTransfer+0x50c>
 80016e4:	3214      	adds	r2, #20
 80016e6:	4293      	cmp	r3, r2
 80016e8:	f000 8131 	beq.w	800194e <HAL_DMA_PollForTransfer+0x512>
 80016ec:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f000 812f 	beq.w	8001954 <HAL_DMA_PollForTransfer+0x518>
 80016f6:	3214      	adds	r2, #20
 80016f8:	4293      	cmp	r3, r2
 80016fa:	f000 812d 	beq.w	8001958 <HAL_DMA_PollForTransfer+0x51c>
 80016fe:	3214      	adds	r2, #20
 8001700:	4293      	cmp	r3, r2
 8001702:	f000 812b 	beq.w	800195c <HAL_DMA_PollForTransfer+0x520>
 8001706:	3214      	adds	r2, #20
 8001708:	4293      	cmp	r3, r2
 800170a:	bf0c      	ite	eq
 800170c:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001710:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001714:	e10a      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 8001716:	bf00      	nop
 8001718:	40020008 	.word	0x40020008
 800171c:	40020080 	.word	0x40020080
 8001720:	4002001c 	.word	0x4002001c
 8001724:	40020030 	.word	0x40020030
 8001728:	40020044 	.word	0x40020044
 800172c:	40020058 	.word	0x40020058
 8001730:	4002006c 	.word	0x4002006c
 8001734:	40020408 	.word	0x40020408
 8001738:	40020400 	.word	0x40020400
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800173c:	4a97      	ldr	r2, [pc, #604]	; (800199c <HAL_DMA_PollForTransfer+0x560>)
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4232      	tst	r2, r6
 8001742:	d12a      	bne.n	800179a <HAL_DMA_PollForTransfer+0x35e>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8001744:	4a95      	ldr	r2, [pc, #596]	; (800199c <HAL_DMA_PollForTransfer+0x560>)
 8001746:	6811      	ldr	r1, [r2, #0]
 8001748:	4543      	cmp	r3, r8
 800174a:	f43f af70 	beq.w	800162e <HAL_DMA_PollForTransfer+0x1f2>
 800174e:	454b      	cmp	r3, r9
 8001750:	f43f af7f 	beq.w	8001652 <HAL_DMA_PollForTransfer+0x216>
 8001754:	4553      	cmp	r3, sl
 8001756:	f43f af7e 	beq.w	8001656 <HAL_DMA_PollForTransfer+0x21a>
 800175a:	4283      	cmp	r3, r0
 800175c:	f43f af7e 	beq.w	800165c <HAL_DMA_PollForTransfer+0x220>
 8001760:	4563      	cmp	r3, ip
 8001762:	f43f af7e 	beq.w	8001662 <HAL_DMA_PollForTransfer+0x226>
 8001766:	4573      	cmp	r3, lr
 8001768:	f43f af7e 	beq.w	8001668 <HAL_DMA_PollForTransfer+0x22c>
 800176c:	42bb      	cmp	r3, r7
 800176e:	f43f af7e 	beq.w	800166e <HAL_DMA_PollForTransfer+0x232>
 8001772:	455b      	cmp	r3, fp
 8001774:	f43f af7e 	beq.w	8001674 <HAL_DMA_PollForTransfer+0x238>
 8001778:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 800177c:	4293      	cmp	r3, r2
 800177e:	f43f af7b 	beq.w	8001678 <HAL_DMA_PollForTransfer+0x23c>
 8001782:	3214      	adds	r2, #20
 8001784:	4293      	cmp	r3, r2
 8001786:	f43f af79 	beq.w	800167c <HAL_DMA_PollForTransfer+0x240>
 800178a:	3214      	adds	r2, #20
 800178c:	4293      	cmp	r3, r2
 800178e:	bf0c      	ite	eq
 8001790:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 8001794:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 8001798:	e74a      	b.n	8001630 <HAL_DMA_PollForTransfer+0x1f4>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800179a:	f8dd b000 	ldr.w	fp, [sp]
 800179e:	f1bb 0f00 	cmp.w	fp, #0
 80017a2:	d07f      	beq.n	80018a4 <HAL_DMA_PollForTransfer+0x468>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017a4:	4a7e      	ldr	r2, [pc, #504]	; (80019a0 <HAL_DMA_PollForTransfer+0x564>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d884      	bhi.n	80016b4 <HAL_DMA_PollForTransfer+0x278>
 80017aa:	4a7e      	ldr	r2, [pc, #504]	; (80019a4 <HAL_DMA_PollForTransfer+0x568>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	f000 80d8 	beq.w	8001962 <HAL_DMA_PollForTransfer+0x526>
 80017b2:	3214      	adds	r2, #20
 80017b4:	4293      	cmp	r3, r2
 80017b6:	f000 80d8 	beq.w	800196a <HAL_DMA_PollForTransfer+0x52e>
 80017ba:	3214      	adds	r2, #20
 80017bc:	4293      	cmp	r3, r2
 80017be:	f000 80d6 	beq.w	800196e <HAL_DMA_PollForTransfer+0x532>
 80017c2:	3214      	adds	r2, #20
 80017c4:	4293      	cmp	r3, r2
 80017c6:	f000 80d5 	beq.w	8001974 <HAL_DMA_PollForTransfer+0x538>
 80017ca:	3214      	adds	r2, #20
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f000 80d4 	beq.w	800197a <HAL_DMA_PollForTransfer+0x53e>
 80017d2:	3214      	adds	r2, #20
 80017d4:	4293      	cmp	r3, r2
 80017d6:	f000 80d3 	beq.w	8001980 <HAL_DMA_PollForTransfer+0x544>
 80017da:	3214      	adds	r2, #20
 80017dc:	4293      	cmp	r3, r2
 80017de:	f000 80d2 	beq.w	8001986 <HAL_DMA_PollForTransfer+0x54a>
 80017e2:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	f000 80d0 	beq.w	800198c <HAL_DMA_PollForTransfer+0x550>
 80017ec:	3214      	adds	r2, #20
 80017ee:	4293      	cmp	r3, r2
 80017f0:	f000 80ce 	beq.w	8001990 <HAL_DMA_PollForTransfer+0x554>
 80017f4:	3214      	adds	r2, #20
 80017f6:	4293      	cmp	r3, r2
 80017f8:	f000 80cc 	beq.w	8001994 <HAL_DMA_PollForTransfer+0x558>
 80017fc:	3214      	adds	r2, #20
 80017fe:	4293      	cmp	r3, r2
 8001800:	bf0c      	ite	eq
 8001802:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001806:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 800180a:	e0ab      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800180c:	4a64      	ldr	r2, [pc, #400]	; (80019a0 <HAL_DMA_PollForTransfer+0x564>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d948      	bls.n	80018a4 <HAL_DMA_PollForTransfer+0x468>
 8001812:	3a78      	subs	r2, #120	; 0x78
 8001814:	4293      	cmp	r3, r2
 8001816:	d023      	beq.n	8001860 <HAL_DMA_PollForTransfer+0x424>
 8001818:	3214      	adds	r2, #20
 800181a:	4293      	cmp	r3, r2
 800181c:	d02a      	beq.n	8001874 <HAL_DMA_PollForTransfer+0x438>
 800181e:	3214      	adds	r2, #20
 8001820:	4293      	cmp	r3, r2
 8001822:	d029      	beq.n	8001878 <HAL_DMA_PollForTransfer+0x43c>
 8001824:	3214      	adds	r2, #20
 8001826:	4293      	cmp	r3, r2
 8001828:	d029      	beq.n	800187e <HAL_DMA_PollForTransfer+0x442>
 800182a:	3214      	adds	r2, #20
 800182c:	4293      	cmp	r3, r2
 800182e:	d029      	beq.n	8001884 <HAL_DMA_PollForTransfer+0x448>
 8001830:	3214      	adds	r2, #20
 8001832:	4293      	cmp	r3, r2
 8001834:	d029      	beq.n	800188a <HAL_DMA_PollForTransfer+0x44e>
 8001836:	3214      	adds	r2, #20
 8001838:	4293      	cmp	r3, r2
 800183a:	d029      	beq.n	8001890 <HAL_DMA_PollForTransfer+0x454>
 800183c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001840:	4293      	cmp	r3, r2
 8001842:	d028      	beq.n	8001896 <HAL_DMA_PollForTransfer+0x45a>
 8001844:	3214      	adds	r2, #20
 8001846:	4293      	cmp	r3, r2
 8001848:	d027      	beq.n	800189a <HAL_DMA_PollForTransfer+0x45e>
 800184a:	3214      	adds	r2, #20
 800184c:	4293      	cmp	r3, r2
 800184e:	d026      	beq.n	800189e <HAL_DMA_PollForTransfer+0x462>
 8001850:	3214      	adds	r2, #20
 8001852:	4293      	cmp	r3, r2
 8001854:	bf0c      	ite	eq
 8001856:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 800185a:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 800185e:	e000      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 8001860:	2302      	movs	r3, #2
 8001862:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_DMA_PollForTransfer+0x56c>)
 8001864:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001866:	2301      	movs	r3, #1
 8001868:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 800186c:	2000      	movs	r0, #0
 800186e:	f885 0020 	strb.w	r0, [r5, #32]
  return HAL_OK;
 8001872:	e5f1      	b.n	8001458 <HAL_DMA_PollForTransfer+0x1c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001874:	2320      	movs	r3, #32
 8001876:	e7f4      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 8001878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187c:	e7f1      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 800187e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001882:	e7ee      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 8001884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001888:	e7eb      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 800188a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800188e:	e7e8      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 8001890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001894:	e7e5      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 8001896:	2302      	movs	r3, #2
 8001898:	e7e3      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 800189a:	2320      	movs	r3, #32
 800189c:	e7e1      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 800189e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a2:	e7de      	b.n	8001862 <HAL_DMA_PollForTransfer+0x426>
 80018a4:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_DMA_PollForTransfer+0x568>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d023      	beq.n	80018f2 <HAL_DMA_PollForTransfer+0x4b6>
 80018aa:	3214      	adds	r2, #20
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d024      	beq.n	80018fa <HAL_DMA_PollForTransfer+0x4be>
 80018b0:	3214      	adds	r2, #20
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d023      	beq.n	80018fe <HAL_DMA_PollForTransfer+0x4c2>
 80018b6:	3214      	adds	r2, #20
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d023      	beq.n	8001904 <HAL_DMA_PollForTransfer+0x4c8>
 80018bc:	3214      	adds	r2, #20
 80018be:	4293      	cmp	r3, r2
 80018c0:	d023      	beq.n	800190a <HAL_DMA_PollForTransfer+0x4ce>
 80018c2:	3214      	adds	r2, #20
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d023      	beq.n	8001910 <HAL_DMA_PollForTransfer+0x4d4>
 80018c8:	3214      	adds	r2, #20
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d023      	beq.n	8001916 <HAL_DMA_PollForTransfer+0x4da>
 80018ce:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d022      	beq.n	800191c <HAL_DMA_PollForTransfer+0x4e0>
 80018d6:	3214      	adds	r2, #20
 80018d8:	4293      	cmp	r3, r2
 80018da:	d021      	beq.n	8001920 <HAL_DMA_PollForTransfer+0x4e4>
 80018dc:	3214      	adds	r2, #20
 80018de:	4293      	cmp	r3, r2
 80018e0:	d020      	beq.n	8001924 <HAL_DMA_PollForTransfer+0x4e8>
 80018e2:	3214      	adds	r2, #20
 80018e4:	4293      	cmp	r3, r2
 80018e6:	bf0c      	ite	eq
 80018e8:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 80018ec:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 80018f0:	e000      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 80018f2:	2302      	movs	r3, #2
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_DMA_PollForTransfer+0x560>)
 80018f6:	6053      	str	r3, [r2, #4]
 80018f8:	e7b5      	b.n	8001866 <HAL_DMA_PollForTransfer+0x42a>
 80018fa:	2320      	movs	r3, #32
 80018fc:	e7fa      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 80018fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001902:	e7f7      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 8001904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001908:	e7f4      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 800190a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190e:	e7f1      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 8001910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001914:	e7ee      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 8001916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800191a:	e7eb      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 800191c:	2302      	movs	r3, #2
 800191e:	e7e9      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 8001920:	2320      	movs	r3, #32
 8001922:	e7e7      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
 8001924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001928:	e7e4      	b.n	80018f4 <HAL_DMA_PollForTransfer+0x4b8>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800192a:	2304      	movs	r3, #4
 800192c:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <HAL_DMA_PollForTransfer+0x56c>)
 800192e:	6053      	str	r3, [r2, #4]
 8001930:	e79c      	b.n	800186c <HAL_DMA_PollForTransfer+0x430>
 8001932:	2340      	movs	r3, #64	; 0x40
 8001934:	e7fa      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 8001936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193a:	e7f7      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 800193c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001940:	e7f4      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 8001942:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001946:	e7f1      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 8001948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800194c:	e7ee      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 800194e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001952:	e7eb      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 8001954:	2304      	movs	r3, #4
 8001956:	e7e9      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 8001958:	2340      	movs	r3, #64	; 0x40
 800195a:	e7e7      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 800195c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001960:	e7e4      	b.n	800192c <HAL_DMA_PollForTransfer+0x4f0>
 8001962:	2304      	movs	r3, #4
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_DMA_PollForTransfer+0x560>)
 8001966:	6053      	str	r3, [r2, #4]
 8001968:	e780      	b.n	800186c <HAL_DMA_PollForTransfer+0x430>
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	e7fa      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 800196e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001972:	e7f7      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 8001974:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001978:	e7f4      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 800197a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800197e:	e7f1      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 8001980:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001984:	e7ee      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 8001986:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800198a:	e7eb      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 800198c:	2304      	movs	r3, #4
 800198e:	e7e9      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 8001990:	2340      	movs	r3, #64	; 0x40
 8001992:	e7e7      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 8001994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001998:	e7e4      	b.n	8001964 <HAL_DMA_PollForTransfer+0x528>
 800199a:	bf00      	nop
 800199c:	40020000 	.word	0x40020000
 80019a0:	40020080 	.word	0x40020080
 80019a4:	40020008 	.word	0x40020008
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_DMA_IRQHandler>:
{
 80019ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80019b0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80019b2:	6804      	ldr	r4, [r0, #0]
 80019b4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80019b8:	2304      	movs	r3, #4
 80019ba:	408b      	lsls	r3, r1
 80019bc:	4213      	tst	r3, r2
 80019be:	f000 8099 	beq.w	8001af4 <HAL_DMA_IRQHandler+0x148>
 80019c2:	f015 0f04 	tst.w	r5, #4
 80019c6:	f000 8095 	beq.w	8001af4 <HAL_DMA_IRQHandler+0x148>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	f013 0f20 	tst.w	r3, #32
 80019d0:	d103      	bne.n	80019da <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	4a98      	ldr	r2, [pc, #608]	; (8001c40 <HAL_DMA_IRQHandler+0x294>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d945      	bls.n	8001a6e <HAL_DMA_IRQHandler+0xc2>
 80019e2:	3a78      	subs	r2, #120	; 0x78
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d023      	beq.n	8001a30 <HAL_DMA_IRQHandler+0x84>
 80019e8:	3214      	adds	r2, #20
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d027      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x92>
 80019ee:	3214      	adds	r2, #20
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d026      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x96>
 80019f4:	3214      	adds	r2, #20
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d026      	beq.n	8001a48 <HAL_DMA_IRQHandler+0x9c>
 80019fa:	3214      	adds	r2, #20
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d026      	beq.n	8001a4e <HAL_DMA_IRQHandler+0xa2>
 8001a00:	3214      	adds	r2, #20
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d026      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xa8>
 8001a06:	3214      	adds	r2, #20
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d026      	beq.n	8001a5a <HAL_DMA_IRQHandler+0xae>
 8001a0c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d025      	beq.n	8001a60 <HAL_DMA_IRQHandler+0xb4>
 8001a14:	3214      	adds	r2, #20
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d024      	beq.n	8001a64 <HAL_DMA_IRQHandler+0xb8>
 8001a1a:	3214      	adds	r2, #20
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d023      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xbc>
 8001a20:	3214      	adds	r2, #20
 8001a22:	4293      	cmp	r3, r2
 8001a24:	bf0c      	ite	eq
 8001a26:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001a2a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001a2e:	e000      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a30:	2304      	movs	r3, #4
 8001a32:	4a84      	ldr	r2, [pc, #528]	; (8001c44 <HAL_DMA_IRQHandler+0x298>)
 8001a34:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001a36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a38:	b103      	cbz	r3, 8001a3c <HAL_DMA_IRQHandler+0x90>
      hdma->XferHalfCpltCallback(hdma);
 8001a3a:	4798      	blx	r3
}
 8001a3c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	e7f7      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a46:	e7f4      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a4c:	e7f1      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a52:	e7ee      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a58:	e7eb      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a5e:	e7e8      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e7e6      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	e7e4      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6c:	e7e1      	b.n	8001a32 <HAL_DMA_IRQHandler+0x86>
 8001a6e:	4a76      	ldr	r2, [pc, #472]	; (8001c48 <HAL_DMA_IRQHandler+0x29c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d023      	beq.n	8001abc <HAL_DMA_IRQHandler+0x110>
 8001a74:	3214      	adds	r2, #20
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d024      	beq.n	8001ac4 <HAL_DMA_IRQHandler+0x118>
 8001a7a:	3214      	adds	r2, #20
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d023      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x11c>
 8001a80:	3214      	adds	r2, #20
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d023      	beq.n	8001ace <HAL_DMA_IRQHandler+0x122>
 8001a86:	3214      	adds	r2, #20
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d023      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x128>
 8001a8c:	3214      	adds	r2, #20
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d023      	beq.n	8001ada <HAL_DMA_IRQHandler+0x12e>
 8001a92:	3214      	adds	r2, #20
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d023      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x134>
 8001a98:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d022      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x13a>
 8001aa0:	3214      	adds	r2, #20
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d021      	beq.n	8001aea <HAL_DMA_IRQHandler+0x13e>
 8001aa6:	3214      	adds	r2, #20
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d020      	beq.n	8001aee <HAL_DMA_IRQHandler+0x142>
 8001aac:	3214      	adds	r2, #20
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	bf0c      	ite	eq
 8001ab2:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001ab6:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001aba:	e000      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001abc:	2304      	movs	r3, #4
 8001abe:	4a63      	ldr	r2, [pc, #396]	; (8001c4c <HAL_DMA_IRQHandler+0x2a0>)
 8001ac0:	6053      	str	r3, [r2, #4]
 8001ac2:	e7b8      	b.n	8001a36 <HAL_DMA_IRQHandler+0x8a>
 8001ac4:	2340      	movs	r3, #64	; 0x40
 8001ac6:	e7fa      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001acc:	e7f7      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001ace:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ad2:	e7f4      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001ad4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad8:	e7f1      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ade:	e7ee      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001ae0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ae4:	e7eb      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e7e9      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	e7e7      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	e7e4      	b.n	8001abe <HAL_DMA_IRQHandler+0x112>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001af4:	2302      	movs	r3, #2
 8001af6:	408b      	lsls	r3, r1
 8001af8:	4213      	tst	r3, r2
 8001afa:	f000 80a9 	beq.w	8001c50 <HAL_DMA_IRQHandler+0x2a4>
 8001afe:	f015 0f02 	tst.w	r5, #2
 8001b02:	f000 80a5 	beq.w	8001c50 <HAL_DMA_IRQHandler+0x2a4>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	f013 0f20 	tst.w	r3, #32
 8001b0c:	d106      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x170>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	f023 030a 	bic.w	r3, r3, #10
 8001b14:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001b16:	2301      	movs	r3, #1
 8001b18:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b1c:	6803      	ldr	r3, [r0, #0]
 8001b1e:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_DMA_IRQHandler+0x294>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d94a      	bls.n	8001bba <HAL_DMA_IRQHandler+0x20e>
 8001b24:	3a78      	subs	r2, #120	; 0x78
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d023      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x1c6>
 8001b2a:	3214      	adds	r2, #20
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d02c      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x1de>
 8001b30:	3214      	adds	r2, #20
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02b      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x1e2>
 8001b36:	3214      	adds	r2, #20
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d02b      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x1e8>
 8001b3c:	3214      	adds	r2, #20
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x1ee>
 8001b42:	3214      	adds	r2, #20
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d02b      	beq.n	8001ba0 <HAL_DMA_IRQHandler+0x1f4>
 8001b48:	3214      	adds	r2, #20
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d02b      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x1fa>
 8001b4e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d02a      	beq.n	8001bac <HAL_DMA_IRQHandler+0x200>
 8001b56:	3214      	adds	r2, #20
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d029      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x204>
 8001b5c:	3214      	adds	r2, #20
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d028      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x208>
 8001b62:	3214      	adds	r2, #20
 8001b64:	4293      	cmp	r3, r2
 8001b66:	bf0c      	ite	eq
 8001b68:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8001b6c:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8001b70:	e000      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001b72:	2202      	movs	r2, #2
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <HAL_DMA_IRQHandler+0x298>)
 8001b76:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001b7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f43f af5b 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x90>
      hdma->XferCpltCallback(hdma);
 8001b86:	4798      	blx	r3
 8001b88:	e758      	b.n	8001a3c <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	e7f2      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b92:	e7ef      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001b94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b98:	e7ec      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b9e:	e7e9      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001ba0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ba4:	e7e6      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001baa:	e7e3      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001bac:	2202      	movs	r2, #2
 8001bae:	e7e1      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	e7df      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	e7dc      	b.n	8001b74 <HAL_DMA_IRQHandler+0x1c8>
 8001bba:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <HAL_DMA_IRQHandler+0x29c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d023      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x25c>
 8001bc0:	3214      	adds	r2, #20
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d024      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x264>
 8001bc6:	3214      	adds	r2, #20
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d023      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x268>
 8001bcc:	3214      	adds	r2, #20
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d023      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x26e>
 8001bd2:	3214      	adds	r2, #20
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d023      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x274>
 8001bd8:	3214      	adds	r2, #20
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d023      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x27a>
 8001bde:	3214      	adds	r2, #20
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d023      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x280>
 8001be4:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x286>
 8001bec:	3214      	adds	r2, #20
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d021      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x28a>
 8001bf2:	3214      	adds	r2, #20
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d020      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x28e>
 8001bf8:	3214      	adds	r2, #20
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	bf0c      	ite	eq
 8001bfe:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001c02:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001c06:	e000      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <HAL_DMA_IRQHandler+0x2a0>)
 8001c0c:	6053      	str	r3, [r2, #4]
 8001c0e:	e7b3      	b.n	8001b78 <HAL_DMA_IRQHandler+0x1cc>
 8001c10:	2320      	movs	r3, #32
 8001c12:	e7fa      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c18:	e7f7      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1e:	e7f4      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c24:	e7f1      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c2a:	e7ee      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c30:	e7eb      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e7e9      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c36:	2320      	movs	r3, #32
 8001c38:	e7e7      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c3e:	e7e4      	b.n	8001c0a <HAL_DMA_IRQHandler+0x25e>
 8001c40:	40020080 	.word	0x40020080
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020008 	.word	0x40020008
 8001c4c:	40020000 	.word	0x40020000
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c50:	2308      	movs	r3, #8
 8001c52:	fa03 f101 	lsl.w	r1, r3, r1
 8001c56:	4211      	tst	r1, r2
 8001c58:	f43f aef0 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x90>
 8001c5c:	f015 0f08 	tst.w	r5, #8
 8001c60:	f43f aeec 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	f023 030e 	bic.w	r3, r3, #14
 8001c6a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c6c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001c6e:	2301      	movs	r3, #1
 8001c70:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001c72:	fa03 f202 	lsl.w	r2, r3, r2
 8001c76:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c78:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001c84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f43f aed8 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x90>
      hdma->XferErrorCallback(hdma);
 8001c8c:	4798      	blx	r3
  return;
 8001c8e:	e6d5      	b.n	8001a3c <HAL_DMA_IRQHandler+0x90>

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c94:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	f8d1 9000 	ldr.w	r9, [r1]
 8001c9a:	f1b9 0f00 	cmp.w	r9, #0
 8001c9e:	f000 812f 	beq.w	8001f00 <HAL_GPIO_Init+0x270>
 8001ca2:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001ca4:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca6:	4e98      	ldr	r6, [pc, #608]	; (8001f08 <HAL_GPIO_Init+0x278>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	f8df e260 	ldr.w	lr, [pc, #608]	; 8001f0c <HAL_GPIO_Init+0x27c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cac:	4c98      	ldr	r4, [pc, #608]	; (8001f10 <HAL_GPIO_Init+0x280>)
      switch (GPIO_Init->Mode)
 8001cae:	4d99      	ldr	r5, [pc, #612]	; (8001f14 <HAL_GPIO_Init+0x284>)
 8001cb0:	4694      	mov	ip, r2
 8001cb2:	e0db      	b.n	8001e6c <HAL_GPIO_Init+0x1dc>
 8001cb4:	f04f 0c00 	mov.w	ip, #0
 8001cb8:	e026      	b.n	8001d08 <HAL_GPIO_Init+0x78>
 8001cba:	45a9      	cmp	r9, r5
 8001cbc:	d011      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
 8001cbe:	d908      	bls.n	8001cd2 <HAL_GPIO_Init+0x42>
 8001cc0:	f8df a254 	ldr.w	sl, [pc, #596]	; 8001f18 <HAL_GPIO_Init+0x288>
 8001cc4:	45d1      	cmp	r9, sl
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
 8001cc8:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
 8001ccc:	45d1      	cmp	r9, sl
 8001cce:	d008      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
 8001cd0:	e01a      	b.n	8001d08 <HAL_GPIO_Init+0x78>
 8001cd2:	f8df a248 	ldr.w	sl, [pc, #584]	; 8001f1c <HAL_GPIO_Init+0x28c>
 8001cd6:	45d1      	cmp	r9, sl
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
 8001cda:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8001cde:	45d1      	cmp	r9, sl
 8001ce0:	d10e      	bne.n	8001d00 <HAL_GPIO_Init+0x70>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001ce6:	f1bc 0f00 	cmp.w	ip, #0
 8001cea:	d07a      	beq.n	8001de2 <HAL_GPIO_Init+0x152>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cec:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8001cf0:	bf0c      	ite	eq
 8001cf2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001cf6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfa:	f04f 0c08 	mov.w	ip, #8
 8001cfe:	e003      	b.n	8001d08 <HAL_GPIO_Init+0x78>
      switch (GPIO_Init->Mode)
 8001d00:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8001d04:	45d1      	cmp	r9, sl
 8001d06:	d0ec      	beq.n	8001ce2 <HAL_GPIO_Init+0x52>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d08:	2fff      	cmp	r7, #255	; 0xff
 8001d0a:	bf99      	ittee	ls
 8001d0c:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d0e:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d10:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d14:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d18:	f8d9 8000 	ldr.w	r8, [r9]
 8001d1c:	f04f 0b0f 	mov.w	fp, #15
 8001d20:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001d24:	ea28 080b 	bic.w	r8, r8, fp
 8001d28:	fa0c fa0a 	lsl.w	sl, ip, sl
 8001d2c:	ea48 080a 	orr.w	r8, r8, sl
 8001d30:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d34:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001d38:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8001d3c:	f000 808f 	beq.w	8001e5e <HAL_GPIO_Init+0x1ce>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d40:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8001d44:	f048 0801 	orr.w	r8, r8, #1
 8001d48:	f8c6 8018 	str.w	r8, [r6, #24]
 8001d4c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8001d50:	f008 0801 	and.w	r8, r8, #1
 8001d54:	f8cd 8004 	str.w	r8, [sp, #4]
 8001d58:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001d5c:	f023 0803 	bic.w	r8, r3, #3
 8001d60:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d64:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001d68:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d6c:	f003 0903 	and.w	r9, r3, #3
 8001d70:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8001d74:	f04f 090f 	mov.w	r9, #15
 8001d78:	fa09 f90b 	lsl.w	r9, r9, fp
 8001d7c:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d80:	4570      	cmp	r0, lr
 8001d82:	d031      	beq.n	8001de8 <HAL_GPIO_Init+0x158>
 8001d84:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8001f20 <HAL_GPIO_Init+0x290>
 8001d88:	4548      	cmp	r0, r9
 8001d8a:	f000 80ad 	beq.w	8001ee8 <HAL_GPIO_Init+0x258>
 8001d8e:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001d92:	4548      	cmp	r0, r9
 8001d94:	f000 80ab 	beq.w	8001eee <HAL_GPIO_Init+0x25e>
 8001d98:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001d9c:	4548      	cmp	r0, r9
 8001d9e:	f000 80a9 	beq.w	8001ef4 <HAL_GPIO_Init+0x264>
 8001da2:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001da6:	4548      	cmp	r0, r9
 8001da8:	f000 80a7 	beq.w	8001efa <HAL_GPIO_Init+0x26a>
 8001dac:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001db0:	4548      	cmp	r0, r9
 8001db2:	bf0c      	ite	eq
 8001db4:	f04f 0905 	moveq.w	r9, #5
 8001db8:	f04f 0906 	movne.w	r9, #6
 8001dbc:	e016      	b.n	8001dec <HAL_GPIO_Init+0x15c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dbe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8001dc2:	e7a1      	b.n	8001d08 <HAL_GPIO_Init+0x78>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001dc8:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8001dcc:	e79c      	b.n	8001d08 <HAL_GPIO_Init+0x78>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dce:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001dd2:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8001dd6:	e797      	b.n	8001d08 <HAL_GPIO_Init+0x78>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001ddc:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8001de0:	e792      	b.n	8001d08 <HAL_GPIO_Init+0x78>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de2:	f04f 0c04 	mov.w	ip, #4
 8001de6:	e78f      	b.n	8001d08 <HAL_GPIO_Init+0x78>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de8:	f04f 0900 	mov.w	r9, #0
 8001dec:	fa09 f90b 	lsl.w	r9, r9, fp
 8001df0:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8001df4:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001dfc:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001e00:	f8d4 8000 	ldr.w	r8, [r4]
 8001e04:	bf14      	ite	ne
 8001e06:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e0a:	ea28 0807 	biceq.w	r8, r8, r7
 8001e0e:	f8c4 8000 	str.w	r8, [r4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e12:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001e16:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001e1a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8001e1e:	bf14      	ite	ne
 8001e20:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e24:	ea28 0807 	biceq.w	r8, r8, r7
 8001e28:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e2c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001e30:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e34:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001e38:	bf14      	ite	ne
 8001e3a:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e3e:	ea28 0807 	biceq.w	r8, r8, r7
 8001e42:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e46:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001e4a:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e4e:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8001e52:	bf14      	ite	ne
 8001e54:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e58:	ea28 0707 	biceq.w	r7, r8, r7
 8001e5c:	60e7      	str	r7, [r4, #12]
        }
      }
    }

	position++;
 8001e5e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	f8d1 9000 	ldr.w	r9, [r1]
 8001e64:	3204      	adds	r2, #4
 8001e66:	fa39 f703 	lsrs.w	r7, r9, r3
 8001e6a:	d049      	beq.n	8001f00 <HAL_GPIO_Init+0x270>
    ioposition = (0x01uL << position);
 8001e6c:	f04f 0801 	mov.w	r8, #1
 8001e70:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e74:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8001e78:	ea38 0909 	bics.w	r9, r8, r9
 8001e7c:	d1ef      	bne.n	8001e5e <HAL_GPIO_Init+0x1ce>
      switch (GPIO_Init->Mode)
 8001e7e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001e82:	f1b9 0f12 	cmp.w	r9, #18
 8001e86:	f63f af18 	bhi.w	8001cba <HAL_GPIO_Init+0x2a>
 8001e8a:	f1b9 0f12 	cmp.w	r9, #18
 8001e8e:	f63f af3b 	bhi.w	8001d08 <HAL_GPIO_Init+0x78>
 8001e92:	f20f 0a08 	addw	sl, pc, #8
 8001e96:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ce3 	.word	0x08001ce3
 8001ea0:	08001dbf 	.word	0x08001dbf
 8001ea4:	08001dcf 	.word	0x08001dcf
 8001ea8:	08001cb5 	.word	0x08001cb5
 8001eac:	08001d09 	.word	0x08001d09
 8001eb0:	08001d09 	.word	0x08001d09
 8001eb4:	08001d09 	.word	0x08001d09
 8001eb8:	08001d09 	.word	0x08001d09
 8001ebc:	08001d09 	.word	0x08001d09
 8001ec0:	08001d09 	.word	0x08001d09
 8001ec4:	08001d09 	.word	0x08001d09
 8001ec8:	08001d09 	.word	0x08001d09
 8001ecc:	08001d09 	.word	0x08001d09
 8001ed0:	08001d09 	.word	0x08001d09
 8001ed4:	08001d09 	.word	0x08001d09
 8001ed8:	08001d09 	.word	0x08001d09
 8001edc:	08001d09 	.word	0x08001d09
 8001ee0:	08001dc5 	.word	0x08001dc5
 8001ee4:	08001dd9 	.word	0x08001dd9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee8:	f04f 0901 	mov.w	r9, #1
 8001eec:	e77e      	b.n	8001dec <HAL_GPIO_Init+0x15c>
 8001eee:	f04f 0902 	mov.w	r9, #2
 8001ef2:	e77b      	b.n	8001dec <HAL_GPIO_Init+0x15c>
 8001ef4:	f04f 0903 	mov.w	r9, #3
 8001ef8:	e778      	b.n	8001dec <HAL_GPIO_Init+0x15c>
 8001efa:	f04f 0904 	mov.w	r9, #4
 8001efe:	e775      	b.n	8001dec <HAL_GPIO_Init+0x15c>
  }
}
 8001f00:	b003      	add	sp, #12
 8001f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40010800 	.word	0x40010800
 8001f10:	40010400 	.word	0x40010400
 8001f14:	10220000 	.word	0x10220000
 8001f18:	10310000 	.word	0x10310000
 8001f1c:	10120000 	.word	0x10120000
 8001f20:	40010c00 	.word	0x40010c00

08001f24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f24:	6883      	ldr	r3, [r0, #8]
 8001f26:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001f28:	bf14      	ite	ne
 8001f2a:	2001      	movne	r0, #1
 8001f2c:	2000      	moveq	r0, #0
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f30:	b10a      	cbz	r2, 8001f36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f32:	6101      	str	r1, [r0, #16]
 8001f34:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f36:	0409      	lsls	r1, r1, #16
 8001f38:	6101      	str	r1, [r0, #16]
  }
}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001f40:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4203      	tst	r3, r0
 8001f48:	d100      	bne.n	8001f4c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001f4a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001f4e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	f7ff fff4 	bl	8001f3c <HAL_GPIO_EXTI_Callback>
}
 8001f54:	e7f9      	b.n	8001f4a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001f56:	bf00      	nop
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	f000 8201 	beq.w	8002364 <HAL_RCC_OscConfig+0x408>
{
 8001f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	6803      	ldr	r3, [r0, #0]
 8001f6c:	f013 0f01 	tst.w	r3, #1
 8001f70:	d02c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f72:	4b9f      	ldr	r3, [pc, #636]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d01d      	beq.n	8001fba <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f7e:	4b9c      	ldr	r3, [pc, #624]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d012      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8a:	6863      	ldr	r3, [r4, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d041      	beq.n	8002016 <HAL_RCC_OscConfig+0xba>
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d155      	bne.n	8002042 <HAL_RCC_OscConfig+0xe6>
 8001f96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f9a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e037      	b.n	8002020 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001fb8:	d0e7      	beq.n	8001f8a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b8d      	ldr	r3, [pc, #564]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fc2:	d003      	beq.n	8001fcc <HAL_RCC_OscConfig+0x70>
 8001fc4:	6863      	ldr	r3, [r4, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 81ce 	beq.w	8002368 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	f013 0f02 	tst.w	r3, #2
 8001fd2:	d075      	beq.n	80020c0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd4:	4b86      	ldr	r3, [pc, #536]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f013 0f0c 	tst.w	r3, #12
 8001fdc:	d05f      	beq.n	800209e <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fde:	4b84      	ldr	r3, [pc, #528]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d054      	beq.n	8002094 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fea:	6923      	ldr	r3, [r4, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 808a 	beq.w	8002106 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff2:	4b80      	ldr	r3, [pc, #512]	; (80021f4 <HAL_RCC_OscConfig+0x298>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f830 	bl	800105c <HAL_GetTick>
 8001ffc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffe:	4e7c      	ldr	r6, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8002000:	6833      	ldr	r3, [r6, #0]
 8002002:	f013 0f02 	tst.w	r3, #2
 8002006:	d175      	bne.n	80020f4 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff f828 	bl	800105c <HAL_GetTick>
 800200c:	1b40      	subs	r0, r0, r5
 800200e:	2802      	cmp	r0, #2
 8002010:	d9f6      	bls.n	8002000 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8002012:	2003      	movs	r0, #3
 8002014:	e1ad      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002016:	4a76      	ldr	r2, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	b343      	cbz	r3, 8002076 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8002024:	f7ff f81a 	bl	800105c <HAL_GetTick>
 8002028:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4e71      	ldr	r6, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 800202c:	6833      	ldr	r3, [r6, #0]
 800202e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002032:	d1cb      	bne.n	8001fcc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f812 	bl	800105c <HAL_GetTick>
 8002038:	1b40      	subs	r0, r0, r5
 800203a:	2864      	cmp	r0, #100	; 0x64
 800203c:	d9f6      	bls.n	800202c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800203e:	2003      	movs	r0, #3
 8002040:	e197      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002046:	d009      	beq.n	800205c <HAL_RCC_OscConfig+0x100>
 8002048:	4b69      	ldr	r3, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e7e1      	b.n	8002020 <HAL_RCC_OscConfig+0xc4>
 800205c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002060:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e7d4      	b.n	8002020 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002076:	f7fe fff1 	bl	800105c <HAL_GetTick>
 800207a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207c:	4e5c      	ldr	r6, [pc, #368]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 800207e:	6833      	ldr	r3, [r6, #0]
 8002080:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002084:	d0a2      	beq.n	8001fcc <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002086:	f7fe ffe9 	bl	800105c <HAL_GetTick>
 800208a:	1b40      	subs	r0, r0, r5
 800208c:	2864      	cmp	r0, #100	; 0x64
 800208e:	d9f6      	bls.n	800207e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002090:	2003      	movs	r0, #3
 8002092:	e16e      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002094:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800209c:	d1a5      	bne.n	8001fea <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b54      	ldr	r3, [pc, #336]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f013 0f02 	tst.w	r3, #2
 80020a6:	d003      	beq.n	80020b0 <HAL_RCC_OscConfig+0x154>
 80020a8:	6923      	ldr	r3, [r4, #16]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	f040 815e 	bne.w	800236c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4a4f      	ldr	r2, [pc, #316]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	6961      	ldr	r1, [r4, #20]
 80020b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020be:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	f013 0f08 	tst.w	r3, #8
 80020c6:	d03d      	beq.n	8002144 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c8:	69a3      	ldr	r3, [r4, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d066      	beq.n	800219c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCC_OscConfig+0x298>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7fe ffc1 	bl	800105c <HAL_GetTick>
 80020da:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020dc:	4e44      	ldr	r6, [pc, #272]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 80020de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80020e0:	f013 0f02 	tst.w	r3, #2
 80020e4:	d121      	bne.n	800212a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e6:	f7fe ffb9 	bl	800105c <HAL_GetTick>
 80020ea:	1b40      	subs	r0, r0, r5
 80020ec:	2802      	cmp	r0, #2
 80020ee:	d9f6      	bls.n	80020de <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80020f0:	2003      	movs	r0, #3
 80020f2:	e13e      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4a3e      	ldr	r2, [pc, #248]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	6961      	ldr	r1, [r4, #20]
 80020fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e7dc      	b.n	80020c0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_RCC_OscConfig+0x298>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800210c:	f7fe ffa6 	bl	800105c <HAL_GetTick>
 8002110:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	4e37      	ldr	r6, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8002114:	6833      	ldr	r3, [r6, #0]
 8002116:	f013 0f02 	tst.w	r3, #2
 800211a:	d0d1      	beq.n	80020c0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800211c:	f7fe ff9e 	bl	800105c <HAL_GetTick>
 8002120:	1b40      	subs	r0, r0, r5
 8002122:	2802      	cmp	r0, #2
 8002124:	d9f6      	bls.n	8002114 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002126:	2003      	movs	r0, #3
 8002128:	e123      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800212a:	4b33      	ldr	r3, [pc, #204]	; (80021f8 <HAL_RCC_OscConfig+0x29c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a33      	ldr	r2, [pc, #204]	; (80021fc <HAL_RCC_OscConfig+0x2a0>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0a5b      	lsrs	r3, r3, #9
 8002136:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002138:	bf00      	nop
  }
  while (Delay --);
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	9201      	str	r2, [sp, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f9      	bne.n	8002138 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	f013 0f04 	tst.w	r3, #4
 800214a:	f000 809b 	beq.w	8002284 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002156:	d134      	bne.n	80021c2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800216c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_OscConfig+0x2a4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002176:	d026      	beq.n	80021c6 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	68e3      	ldr	r3, [r4, #12]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d042      	beq.n	8002204 <HAL_RCC_OscConfig+0x2a8>
 800217e:	2b00      	cmp	r3, #0
 8002180:	d158      	bne.n	8002234 <HAL_RCC_OscConfig+0x2d8>
 8002182:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002186:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	621a      	str	r2, [r3, #32]
 8002192:	6a1a      	ldr	r2, [r3, #32]
 8002194:	f022 0204 	bic.w	r2, r2, #4
 8002198:	621a      	str	r2, [r3, #32]
 800219a:	e038      	b.n	800220e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_RCC_OscConfig+0x298>)
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80021a4:	f7fe ff5a 	bl	800105c <HAL_GetTick>
 80021a8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021aa:	4e11      	ldr	r6, [pc, #68]	; (80021f0 <HAL_RCC_OscConfig+0x294>)
 80021ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80021ae:	f013 0f02 	tst.w	r3, #2
 80021b2:	d0c7      	beq.n	8002144 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7fe ff52 	bl	800105c <HAL_GetTick>
 80021b8:	1b40      	subs	r0, r0, r5
 80021ba:	2802      	cmp	r0, #2
 80021bc:	d9f6      	bls.n	80021ac <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80021be:	2003      	movs	r0, #3
 80021c0:	e0d7      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2500      	movs	r5, #0
 80021c4:	e7d3      	b.n	800216e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_RCC_OscConfig+0x2a4>)
 80021c8:	6813      	ldr	r3, [r2, #0]
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80021d0:	f7fe ff44 	bl	800105c <HAL_GetTick>
 80021d4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4f0a      	ldr	r7, [pc, #40]	; (8002200 <HAL_RCC_OscConfig+0x2a4>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021de:	d1cb      	bne.n	8002178 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7fe ff3c 	bl	800105c <HAL_GetTick>
 80021e4:	1b80      	subs	r0, r0, r6
 80021e6:	2864      	cmp	r0, #100	; 0x64
 80021e8:	d9f6      	bls.n	80021d8 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 80021ea:	2003      	movs	r0, #3
 80021ec:	e0c1      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	42420000 	.word	0x42420000
 80021f8:	20000000 	.word	0x20000000
 80021fc:	10624dd3 	.word	0x10624dd3
 8002200:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002204:	4a5e      	ldr	r2, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 8002206:	6a13      	ldr	r3, [r2, #32]
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220e:	68e3      	ldr	r3, [r4, #12]
 8002210:	b333      	cbz	r3, 8002260 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8002212:	f7fe ff23 	bl	800105c <HAL_GetTick>
 8002216:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	4f59      	ldr	r7, [pc, #356]	; (8002380 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f013 0f02 	tst.w	r3, #2
 8002224:	d12d      	bne.n	8002282 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe ff19 	bl	800105c <HAL_GetTick>
 800222a:	1b80      	subs	r0, r0, r6
 800222c:	4540      	cmp	r0, r8
 800222e:	d9f6      	bls.n	800221e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8002230:	2003      	movs	r0, #3
 8002232:	e09e      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	2b05      	cmp	r3, #5
 8002236:	d009      	beq.n	800224c <HAL_RCC_OscConfig+0x2f0>
 8002238:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 800223a:	6a1a      	ldr	r2, [r3, #32]
 800223c:	f022 0201 	bic.w	r2, r2, #1
 8002240:	621a      	str	r2, [r3, #32]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	f022 0204 	bic.w	r2, r2, #4
 8002248:	621a      	str	r2, [r3, #32]
 800224a:	e7e0      	b.n	800220e <HAL_RCC_OscConfig+0x2b2>
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	621a      	str	r2, [r3, #32]
 8002256:	6a1a      	ldr	r2, [r3, #32]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	621a      	str	r2, [r3, #32]
 800225e:	e7d6      	b.n	800220e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8002260:	f7fe fefc 	bl	800105c <HAL_GetTick>
 8002264:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002266:	4f46      	ldr	r7, [pc, #280]	; (8002380 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f013 0f02 	tst.w	r3, #2
 8002272:	d006      	beq.n	8002282 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f7fe fef2 	bl	800105c <HAL_GetTick>
 8002278:	1b80      	subs	r0, r0, r6
 800227a:	4540      	cmp	r0, r8
 800227c:	d9f6      	bls.n	800226c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 800227e:	2003      	movs	r0, #3
 8002280:	e077      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8002282:	b9e5      	cbnz	r5, 80022be <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002284:	69e3      	ldr	r3, [r4, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d072      	beq.n	8002370 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800228a:	4a3d      	ldr	r2, [pc, #244]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 800228c:	6852      	ldr	r2, [r2, #4]
 800228e:	f002 020c 	and.w	r2, r2, #12
 8002292:	2a08      	cmp	r2, #8
 8002294:	d056      	beq.n	8002344 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002296:	2b02      	cmp	r3, #2
 8002298:	d017      	beq.n	80022ca <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCC_OscConfig+0x428>)
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80022a0:	f7fe fedc 	bl	800105c <HAL_GetTick>
 80022a4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	4d36      	ldr	r5, [pc, #216]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022ae:	d047      	beq.n	8002340 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fed4 	bl	800105c <HAL_GetTick>
 80022b4:	1b00      	subs	r0, r0, r4
 80022b6:	2802      	cmp	r0, #2
 80022b8:	d9f6      	bls.n	80022a8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80022ba:	2003      	movs	r0, #3
 80022bc:	e059      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 80022c0:	69d3      	ldr	r3, [r2, #28]
 80022c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c6:	61d3      	str	r3, [r2, #28]
 80022c8:	e7dc      	b.n	8002284 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_RCC_OscConfig+0x428>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80022d0:	f7fe fec4 	bl	800105c <HAL_GetTick>
 80022d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	4e2a      	ldr	r6, [pc, #168]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 80022d8:	6833      	ldr	r3, [r6, #0]
 80022da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022de:	d006      	beq.n	80022ee <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe febc 	bl	800105c <HAL_GetTick>
 80022e4:	1b40      	subs	r0, r0, r5
 80022e6:	2802      	cmp	r0, #2
 80022e8:	d9f6      	bls.n	80022d8 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 80022ea:	2003      	movs	r0, #3
 80022ec:	e041      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022ee:	6a23      	ldr	r3, [r4, #32]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d01a      	beq.n	800232c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f6:	4922      	ldr	r1, [pc, #136]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 80022f8:	684a      	ldr	r2, [r1, #4]
 80022fa:	6a23      	ldr	r3, [r4, #32]
 80022fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80022fe:	4303      	orrs	r3, r0
 8002300:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_OscConfig+0x428>)
 800230a:	2201      	movs	r2, #1
 800230c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800230e:	f7fe fea5 	bl	800105c <HAL_GetTick>
 8002312:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002314:	4d1a      	ldr	r5, [pc, #104]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 8002316:	682b      	ldr	r3, [r5, #0]
 8002318:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800231c:	d10e      	bne.n	800233c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fe9d 	bl	800105c <HAL_GetTick>
 8002322:	1b00      	subs	r0, r0, r4
 8002324:	2802      	cmp	r0, #2
 8002326:	d9f6      	bls.n	8002316 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8002328:	2003      	movs	r0, #3
 800232a:	e022      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 800232e:	6853      	ldr	r3, [r2, #4]
 8002330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002334:	68a1      	ldr	r1, [r4, #8]
 8002336:	430b      	orrs	r3, r1
 8002338:	6053      	str	r3, [r2, #4]
 800233a:	e7dc      	b.n	80022f6 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 800233c:	2000      	movs	r0, #0
 800233e:	e018      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
 8002340:	2000      	movs	r0, #0
 8002342:	e016      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002344:	2b01      	cmp	r3, #1
 8002346:	d017      	beq.n	8002378 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_OscConfig+0x424>)
 800234a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002350:	6a22      	ldr	r2, [r4, #32]
 8002352:	4291      	cmp	r1, r2
 8002354:	d112      	bne.n	800237c <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002356:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 800235c:	1a18      	subs	r0, r3, r0
 800235e:	bf18      	it	ne
 8002360:	2001      	movne	r0, #1
 8002362:	e006      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
}
 8002366:	4770      	bx	lr
        return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
 800236a:	e002      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 800236c:	2001      	movs	r0, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8002370:	2000      	movs	r0, #0
}
 8002372:	b002      	add	sp, #8
 8002374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002378:	2001      	movs	r0, #1
 800237a:	e7fa      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 800237c:	2001      	movs	r0, #1
 800237e:	e7f8      	b.n	8002372 <HAL_RCC_OscConfig+0x416>
 8002380:	40021000 	.word	0x40021000
 8002384:	42420000 	.word	0x42420000

08002388 <HAL_RCC_GetSysClockFreq>:
{
 8002388:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x60>)
 800238c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800238e:	f10d 0c18 	add.w	ip, sp, #24
 8002392:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002396:	f240 2301 	movw	r3, #513	; 0x201
 800239a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_GetSysClockFreq+0x64>)
 80023a0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	2a08      	cmp	r2, #8
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80023aa:	4811      	ldr	r0, [pc, #68]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80023ac:	b006      	add	sp, #24
 80023ae:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80023b4:	3218      	adds	r2, #24
 80023b6:	446a      	add	r2, sp
 80023b8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80023c0:	d00d      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_GetSysClockFreq+0x64>)
 80023c4:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x68>)
 80023c8:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023cc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80023d0:	3318      	adds	r3, #24
 80023d2:	446b      	add	r3, sp
 80023d4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80023dc:	e7e6      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80023e0:	fb03 f000 	mul.w	r0, r3, r0
 80023e4:	e7e2      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x24>
 80023e6:	bf00      	nop
 80023e8:	0802ce2c 	.word	0x0802ce2c
 80023ec:	40021000 	.word	0x40021000
 80023f0:	007a1200 	.word	0x007a1200
 80023f4:	003d0900 	.word	0x003d0900

080023f8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80023f8:	2800      	cmp	r0, #0
 80023fa:	f000 80a2 	beq.w	8002542 <HAL_RCC_ClockConfig+0x14a>
{
 80023fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002402:	460d      	mov	r5, r1
 8002404:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002406:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_ClockConfig+0x15c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	428b      	cmp	r3, r1
 8002410:	d20b      	bcs.n	800242a <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4a50      	ldr	r2, [pc, #320]	; (8002554 <HAL_RCC_ClockConfig+0x15c>)
 8002414:	6813      	ldr	r3, [r2, #0]
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	430b      	orrs	r3, r1
 800241c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	6813      	ldr	r3, [r2, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	428b      	cmp	r3, r1
 8002426:	f040 808e 	bne.w	8002546 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	f013 0f02 	tst.w	r3, #2
 8002430:	d017      	beq.n	8002462 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002432:	f013 0f04 	tst.w	r3, #4
 8002436:	d004      	beq.n	8002442 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002438:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 800243a:	6853      	ldr	r3, [r2, #4]
 800243c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002440:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	f013 0f08 	tst.w	r3, #8
 8002448:	d004      	beq.n	8002454 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800244a:	4a43      	ldr	r2, [pc, #268]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 800244c:	6853      	ldr	r3, [r2, #4]
 800244e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002452:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4a40      	ldr	r2, [pc, #256]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 8002456:	6853      	ldr	r3, [r2, #4]
 8002458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245c:	68a1      	ldr	r1, [r4, #8]
 800245e:	430b      	orrs	r3, r1
 8002460:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	f013 0f01 	tst.w	r3, #1
 8002468:	d031      	beq.n	80024ce <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246a:	6862      	ldr	r2, [r4, #4]
 800246c:	2a01      	cmp	r2, #1
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002470:	2a02      	cmp	r2, #2
 8002472:	d025      	beq.n	80024c0 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f013 0f02 	tst.w	r3, #2
 800247c:	d065      	beq.n	800254a <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4936      	ldr	r1, [pc, #216]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 8002480:	684b      	ldr	r3, [r1, #4]
 8002482:	f023 0303 	bic.w	r3, r3, #3
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800248a:	f7fe fde7 	bl	800105c <HAL_GetTick>
 800248e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	4f31      	ldr	r7, [pc, #196]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	6862      	ldr	r2, [r4, #4]
 800249e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80024a2:	d014      	beq.n	80024ce <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe fdda 	bl	800105c <HAL_GetTick>
 80024a8:	1b80      	subs	r0, r0, r6
 80024aa:	4540      	cmp	r0, r8
 80024ac:	d9f3      	bls.n	8002496 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80024ae:	2003      	movs	r0, #3
 80024b0:	e045      	b.n	800253e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024ba:	d1e0      	bne.n	800247e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80024bc:	2001      	movs	r0, #1
 80024be:	e03e      	b.n	800253e <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024c8:	d1d9      	bne.n	800247e <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80024ca:	2001      	movs	r0, #1
 80024cc:	e037      	b.n	800253e <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCC_ClockConfig+0x15c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	42ab      	cmp	r3, r5
 80024d8:	d90a      	bls.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_RCC_ClockConfig+0x15c>)
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f023 0307 	bic.w	r3, r3, #7
 80024e2:	432b      	orrs	r3, r5
 80024e4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	42ab      	cmp	r3, r5
 80024ee:	d12e      	bne.n	800254e <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f013 0f04 	tst.w	r3, #4
 80024f6:	d006      	beq.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 80024fa:	6853      	ldr	r3, [r2, #4]
 80024fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002500:	68e1      	ldr	r1, [r4, #12]
 8002502:	430b      	orrs	r3, r1
 8002504:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	6823      	ldr	r3, [r4, #0]
 8002508:	f013 0f08 	tst.w	r3, #8
 800250c:	d007      	beq.n	800251e <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 8002510:	6853      	ldr	r3, [r2, #4]
 8002512:	6921      	ldr	r1, [r4, #16]
 8002514:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002518:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800251c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800251e:	f7ff ff33 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_RCC_ClockConfig+0x160>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_RCC_ClockConfig+0x164>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	40d8      	lsrs	r0, r3
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x168>)
 8002532:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_ClockConfig+0x16c>)
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	f7fe fd4c 	bl	8000fd4 <HAL_InitTick>
  return HAL_OK;
 800253c:	2000      	movs	r0, #0
}
 800253e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002542:	2001      	movs	r0, #1
}
 8002544:	4770      	bx	lr
    return HAL_ERROR;
 8002546:	2001      	movs	r0, #1
 8002548:	e7f9      	b.n	800253e <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e7f7      	b.n	800253e <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 800254e:	2001      	movs	r0, #1
 8002550:	e7f5      	b.n	800253e <HAL_RCC_ClockConfig+0x146>
 8002552:	bf00      	nop
 8002554:	40022000 	.word	0x40022000
 8002558:	40021000 	.word	0x40021000
 800255c:	0802ce14 	.word	0x0802ce14
 8002560:	20000000 	.word	0x20000000
 8002564:	20000008 	.word	0x20000008

08002568 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_RCC_GetPCLK1Freq+0x14>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002576:	6810      	ldr	r0, [r2, #0]
}
 8002578:	40d8      	lsrs	r0, r3
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000
 8002580:	0802ce24 	.word	0x0802ce24
 8002584:	20000000 	.word	0x20000000

08002588 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x14>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002596:	6810      	ldr	r0, [r2, #0]
}
 8002598:	40d8      	lsrs	r0, r3
 800259a:	4770      	bx	lr
 800259c:	40021000 	.word	0x40021000
 80025a0:	0802ce24 	.word	0x0802ce24
 80025a4:	20000000 	.word	0x20000000

080025a8 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80025a8:	b360      	cbz	r0, 8002604 <HAL_SRAM_Init+0x5c>
{
 80025aa:	b570      	push	{r4, r5, r6, lr}
 80025ac:	460e      	mov	r6, r1
 80025ae:	4615      	mov	r5, r2
 80025b0:	4604      	mov	r4, r0
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80025b2:	6983      	ldr	r3, [r0, #24]
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b8:	d026      	beq.n	8002608 <HAL_SRAM_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80025ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025be:	b1e3      	cbz	r3, 80025fa <HAL_SRAM_Init+0x52>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80025c0:	4621      	mov	r1, r4
 80025c2:	f851 0b08 	ldr.w	r0, [r1], #8
 80025c6:	f000 fb47 	bl	8002c58 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80025ca:	68a2      	ldr	r2, [r4, #8]
 80025cc:	4631      	mov	r1, r6
 80025ce:	6820      	ldr	r0, [r4, #0]
 80025d0:	f000 fb78 	bl	8002cc4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80025d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025d6:	68a2      	ldr	r2, [r4, #8]
 80025d8:	4629      	mov	r1, r5
 80025da:	6860      	ldr	r0, [r4, #4]
 80025dc:	f000 fb92 	bl	8002d04 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	68a1      	ldr	r1, [r4, #8]
 80025e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
 80025f6:	2000      	movs	r0, #0
}
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80025fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 80025fe:	f7fe fc37 	bl	8000e70 <HAL_SRAM_MspInit>
 8002602:	e7dd      	b.n	80025c0 <HAL_SRAM_Init+0x18>
    return HAL_ERROR;
 8002604:	2001      	movs	r0, #1
}
 8002606:	4770      	bx	lr
    return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
 800260a:	e7f5      	b.n	80025f8 <HAL_SRAM_Init+0x50>

0800260c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800260c:	6802      	ldr	r2, [r0, #0]
 800260e:	68d3      	ldr	r3, [r2, #12]
 8002610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002614:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002616:	6802      	ldr	r2, [r0, #0]
 8002618:	6953      	ldr	r3, [r2, #20]
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002620:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002622:	2b01      	cmp	r3, #1
 8002624:	d005      	beq.n	8002632 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002626:	2320      	movs	r3, #32
 8002628:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262c:	2300      	movs	r3, #0
 800262e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002630:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002632:	6802      	ldr	r2, [r0, #0]
 8002634:	68d3      	ldr	r3, [r2, #12]
 8002636:	f023 0310 	bic.w	r3, r3, #16
 800263a:	60d3      	str	r3, [r2, #12]
 800263c:	e7f3      	b.n	8002626 <UART_EndRxTransfer+0x1a>
	...

08002640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002640:	b510      	push	{r4, lr}
 8002642:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002644:	6802      	ldr	r2, [r0, #0]
 8002646:	6913      	ldr	r3, [r2, #16]
 8002648:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800264c:	68c1      	ldr	r1, [r0, #12]
 800264e:	430b      	orrs	r3, r1
 8002650:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8002652:	6801      	ldr	r1, [r0, #0]
 8002654:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002656:	6883      	ldr	r3, [r0, #8]
 8002658:	6900      	ldr	r0, [r0, #16]
 800265a:	4303      	orrs	r3, r0
 800265c:	6960      	ldr	r0, [r4, #20]
 800265e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002660:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002664:	f022 020c 	bic.w	r2, r2, #12
 8002668:	4313      	orrs	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	6953      	ldr	r3, [r2, #20]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	69a1      	ldr	r1, [r4, #24]
 8002676:	430b      	orrs	r3, r1
 8002678:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 800267a:	6822      	ldr	r2, [r4, #0]
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <UART_SetConfig+0x84>)
 800267e:	429a      	cmp	r2, r3
 8002680:	d01b      	beq.n	80026ba <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002682:	f7ff ff71 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8002686:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800268c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002690:	6862      	ldr	r2, [r4, #4]
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	fbb3 f3f2 	udiv	r3, r3, r2
 8002698:	6820      	ldr	r0, [r4, #0]
 800269a:	490b      	ldr	r1, [pc, #44]	; (80026c8 <UART_SetConfig+0x88>)
 800269c:	fba1 4203 	umull	r4, r2, r1, r3
 80026a0:	0952      	lsrs	r2, r2, #5
 80026a2:	2464      	movs	r4, #100	; 0x64
 80026a4:	fb04 3312 	mls	r3, r4, r2, r3
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	3332      	adds	r3, #50	; 0x32
 80026ac:	fba1 1303 	umull	r1, r3, r1, r3
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80026b6:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80026b8:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80026ba:	f7ff ff65 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 80026be:	4603      	mov	r3, r0
 80026c0:	e7e2      	b.n	8002688 <UART_SetConfig+0x48>
 80026c2:	bf00      	nop
 80026c4:	40013800 	.word	0x40013800
 80026c8:	51eb851f 	.word	0x51eb851f

080026cc <UART_WaitOnFlagUntilTimeout>:
{
 80026cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026d0:	4680      	mov	r8, r0
 80026d2:	460e      	mov	r6, r1
 80026d4:	4615      	mov	r5, r2
 80026d6:	4699      	mov	r9, r3
 80026d8:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026da:	f8d8 2000 	ldr.w	r2, [r8]
 80026de:	6814      	ldr	r4, [r2, #0]
 80026e0:	ea36 0304 	bics.w	r3, r6, r4
 80026e4:	bf0c      	ite	eq
 80026e6:	f04f 0c01 	moveq.w	ip, #1
 80026ea:	f04f 0c00 	movne.w	ip, #0
 80026ee:	45ac      	cmp	ip, r5
 80026f0:	d11f      	bne.n	8002732 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80026f6:	d0f2      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026f8:	b12f      	cbz	r7, 8002706 <UART_WaitOnFlagUntilTimeout+0x3a>
 80026fa:	f7fe fcaf 	bl	800105c <HAL_GetTick>
 80026fe:	eba0 0009 	sub.w	r0, r0, r9
 8002702:	42b8      	cmp	r0, r7
 8002704:	d9e9      	bls.n	80026da <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002706:	f8d8 2000 	ldr.w	r2, [r8]
 800270a:	68d3      	ldr	r3, [r2, #12]
 800270c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002710:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	f8d8 2000 	ldr.w	r2, [r8]
 8002716:	6953      	ldr	r3, [r2, #20]
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800271e:	2320      	movs	r3, #32
 8002720:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002724:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002728:	2300      	movs	r3, #0
 800272a:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 800272e:	2003      	movs	r0, #3
 8002730:	e000      	b.n	8002734 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8002732:	2000      	movs	r0, #0
}
 8002734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002738 <HAL_UART_Init>:
  if (huart == NULL)
 8002738:	b358      	cbz	r0, 8002792 <HAL_UART_Init+0x5a>
{
 800273a:	b510      	push	{r4, lr}
 800273c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800273e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002742:	b30b      	cbz	r3, 8002788 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002744:	2324      	movs	r3, #36	; 0x24
 8002746:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	68d3      	ldr	r3, [r2, #12]
 800274e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002752:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002754:	4620      	mov	r0, r4
 8002756:	f7ff ff73 	bl	8002640 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275a:	6822      	ldr	r2, [r4, #0]
 800275c:	6913      	ldr	r3, [r2, #16]
 800275e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002762:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	6953      	ldr	r3, [r2, #20]
 8002768:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800276c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	68d3      	ldr	r3, [r2, #12]
 8002772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002776:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002778:	2000      	movs	r0, #0
 800277a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800277c:	2320      	movs	r3, #32
 800277e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002782:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002786:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002788:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800278c:	f7fe fac6 	bl	8000d1c <HAL_UART_MspInit>
 8002790:	e7d8      	b.n	8002744 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002792:	2001      	movs	r0, #1
}
 8002794:	4770      	bx	lr

08002796 <HAL_UART_Transmit>:
{
 8002796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800279e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d15a      	bne.n	800285e <HAL_UART_Transmit+0xc8>
 80027a8:	4604      	mov	r4, r0
 80027aa:	460d      	mov	r5, r1
 80027ac:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80027ae:	2900      	cmp	r1, #0
 80027b0:	d059      	beq.n	8002866 <HAL_UART_Transmit+0xd0>
 80027b2:	2a00      	cmp	r2, #0
 80027b4:	d059      	beq.n	800286a <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 80027b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d057      	beq.n	800286e <HAL_UART_Transmit+0xd8>
 80027be:	2301      	movs	r3, #1
 80027c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c8:	2321      	movs	r3, #33	; 0x21
 80027ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80027ce:	f7fe fc45 	bl	800105c <HAL_GetTick>
 80027d2:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80027d4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80027d8:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027dc:	68a3      	ldr	r3, [r4, #8]
 80027de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e2:	d00c      	beq.n	80027fe <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 80027e4:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 80027e8:	2300      	movs	r3, #0
 80027ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80027ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b343      	cbz	r3, 8002846 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f4:	f04f 0900 	mov.w	r9, #0
 80027f8:	f04f 0880 	mov.w	r8, #128	; 0x80
 80027fc:	e014      	b.n	8002828 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fe:	6923      	ldr	r3, [r4, #16]
 8002800:	b913      	cbnz	r3, 8002808 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 8002802:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002804:	2500      	movs	r5, #0
 8002806:	e7ef      	b.n	80027e8 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8002808:	f04f 0a00 	mov.w	sl, #0
 800280c:	e7ec      	b.n	80027e8 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002818:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800281a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800281c:	3a01      	subs	r2, #1
 800281e:	b292      	uxth	r2, r2
 8002820:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002822:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002824:	b29b      	uxth	r3, r3
 8002826:	b173      	cbz	r3, 8002846 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002828:	9600      	str	r6, [sp, #0]
 800282a:	463b      	mov	r3, r7
 800282c:	464a      	mov	r2, r9
 800282e:	4641      	mov	r1, r8
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff ff4b 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 8002836:	b9e0      	cbnz	r0, 8002872 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8002838:	2d00      	cmp	r5, #0
 800283a:	d0e8      	beq.n	800280e <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002844:	e7e9      	b.n	800281a <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	9600      	str	r6, [sp, #0]
 8002848:	463b      	mov	r3, r7
 800284a:	2200      	movs	r2, #0
 800284c:	2140      	movs	r1, #64	; 0x40
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff3c 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 8002854:	b978      	cbnz	r0, 8002876 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8002856:	2320      	movs	r3, #32
 8002858:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800285c:	e000      	b.n	8002860 <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 800285e:	2002      	movs	r0, #2
}
 8002860:	b002      	add	sp, #8
 8002862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002866:	2001      	movs	r0, #1
 8002868:	e7fa      	b.n	8002860 <HAL_UART_Transmit+0xca>
 800286a:	2001      	movs	r0, #1
 800286c:	e7f8      	b.n	8002860 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 800286e:	2002      	movs	r0, #2
 8002870:	e7f6      	b.n	8002860 <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8002872:	2003      	movs	r0, #3
 8002874:	e7f4      	b.n	8002860 <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8002876:	2003      	movs	r0, #3
 8002878:	e7f2      	b.n	8002860 <HAL_UART_Transmit+0xca>

0800287a <HAL_UART_TxCpltCallback>:
}
 800287a:	4770      	bx	lr

0800287c <HAL_UART_ErrorCallback>:
}
 800287c:	4770      	bx	lr

0800287e <UART_DMAAbortOnError>:
{
 800287e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002880:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002886:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002888:	f7ff fff8 	bl	800287c <HAL_UART_ErrorCallback>
}
 800288c:	bd08      	pop	{r3, pc}

0800288e <HAL_UARTEx_RxEventCallback>:
}
 800288e:	4770      	bx	lr

08002890 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002890:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b22      	cmp	r3, #34	; 0x22
 8002898:	d11e      	bne.n	80028d8 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289a:	6883      	ldr	r3, [r0, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d006      	beq.n	80028b0 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028a4:	b183      	cbz	r3, 80028c8 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028a6:	6803      	ldr	r3, [r0, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028ae:	e01b      	b.n	80028e8 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b0:	6903      	ldr	r3, [r0, #16]
 80028b2:	b9ab      	cbnz	r3, 80028e0 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028b6:	6803      	ldr	r3, [r0, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028be:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80028c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028c2:	3302      	adds	r3, #2
 80028c4:	6283      	str	r3, [r0, #40]	; 0x28
 80028c6:	e013      	b.n	80028f0 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028c8:	6903      	ldr	r3, [r0, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1eb      	bne.n	80028a6 <UART_Receive_IT+0x16>
 80028ce:	e008      	b.n	80028e2 <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 80028d0:	f000 fb5c 	bl	8002f8c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80028d4:	2000      	movs	r0, #0
 80028d6:	e03f      	b.n	8002958 <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 80028d8:	2002      	movs	r0, #2
 80028da:	4770      	bx	lr
    return HAL_OK;
 80028dc:	2000      	movs	r0, #0
}
 80028de:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028e2:	6803      	ldr	r3, [r0, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80028ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028ec:	3301      	adds	r3, #1
 80028ee:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80028f0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ef      	bne.n	80028dc <UART_Receive_IT+0x4c>
{
 80028fc:	b500      	push	{lr}
 80028fe:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002900:	6802      	ldr	r2, [r0, #0]
 8002902:	68d3      	ldr	r3, [r2, #12]
 8002904:	f023 0320 	bic.w	r3, r3, #32
 8002908:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800290a:	6802      	ldr	r2, [r0, #0]
 800290c:	68d3      	ldr	r3, [r2, #12]
 800290e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002912:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002914:	6802      	ldr	r2, [r0, #0]
 8002916:	6953      	ldr	r3, [r2, #20]
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800291e:	2320      	movs	r3, #32
 8002920:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002924:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002926:	2b01      	cmp	r3, #1
 8002928:	d1d2      	bne.n	80028d0 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292a:	2300      	movs	r3, #0
 800292c:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800292e:	6802      	ldr	r2, [r0, #0]
 8002930:	68d3      	ldr	r3, [r2, #12]
 8002932:	f023 0310 	bic.w	r3, r3, #16
 8002936:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002938:	6803      	ldr	r3, [r0, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f012 0f10 	tst.w	r2, #16
 8002940:	d006      	beq.n	8002950 <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002942:	2200      	movs	r2, #0
 8002944:	9201      	str	r2, [sp, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	9201      	str	r2, [sp, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002950:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002952:	f7ff ff9c 	bl	800288e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002956:	2000      	movs	r0, #0
}
 8002958:	b003      	add	sp, #12
 800295a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002960 <HAL_UART_IRQHandler>:
{
 8002960:	b510      	push	{r4, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002966:	6802      	ldr	r2, [r0, #0]
 8002968:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296a:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800296c:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800296e:	f013 0f0f 	tst.w	r3, #15
 8002972:	d109      	bne.n	8002988 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002974:	f013 0f20 	tst.w	r3, #32
 8002978:	d00d      	beq.n	8002996 <HAL_UART_IRQHandler+0x36>
 800297a:	f011 0f20 	tst.w	r1, #32
 800297e:	d00a      	beq.n	8002996 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff ff85 	bl	8002890 <UART_Receive_IT>
      return;
 8002986:	e017      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002988:	f000 0001 	and.w	r0, r0, #1
 800298c:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 8002990:	ea5c 0c00 	orrs.w	ip, ip, r0
 8002994:	d112      	bne.n	80029bc <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002996:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002998:	2801      	cmp	r0, #1
 800299a:	d077      	beq.n	8002a8c <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800299c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029a0:	d003      	beq.n	80029aa <HAL_UART_IRQHandler+0x4a>
 80029a2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80029a6:	f040 80d9 	bne.w	8002b5c <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029ae:	d003      	beq.n	80029b8 <HAL_UART_IRQHandler+0x58>
 80029b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80029b4:	f040 80ff 	bne.w	8002bb6 <HAL_UART_IRQHandler+0x256>
}
 80029b8:	b002      	add	sp, #8
 80029ba:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029bc:	f013 0f01 	tst.w	r3, #1
 80029c0:	d006      	beq.n	80029d0 <HAL_UART_IRQHandler+0x70>
 80029c2:	f411 7f80 	tst.w	r1, #256	; 0x100
 80029c6:	d003      	beq.n	80029d0 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029d0:	f013 0f04 	tst.w	r3, #4
 80029d4:	d02f      	beq.n	8002a36 <HAL_UART_IRQHandler+0xd6>
 80029d6:	b158      	cbz	r0, 80029f0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029da:	f042 0202 	orr.w	r2, r2, #2
 80029de:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e0:	f013 0f02 	tst.w	r3, #2
 80029e4:	f000 80f2 	beq.w	8002bcc <HAL_UART_IRQHandler+0x26c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029ea:	f042 0204 	orr.w	r2, r2, #4
 80029ee:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80029f0:	f013 0f08 	tst.w	r3, #8
 80029f4:	d007      	beq.n	8002a06 <HAL_UART_IRQHandler+0xa6>
 80029f6:	f001 0220 	and.w	r2, r1, #32
 80029fa:	4302      	orrs	r2, r0
 80029fc:	d003      	beq.n	8002a06 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a00:	f042 0208 	orr.w	r2, r2, #8
 8002a04:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a08:	2a00      	cmp	r2, #0
 8002a0a:	d0d5      	beq.n	80029b8 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0c:	f013 0f20 	tst.w	r3, #32
 8002a10:	d002      	beq.n	8002a18 <HAL_UART_IRQHandler+0xb8>
 8002a12:	f011 0f20 	tst.w	r1, #32
 8002a16:	d114      	bne.n	8002a42 <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1e:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	4313      	orrs	r3, r2
 8002a28:	d10f      	bne.n	8002a4a <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7ff ff26 	bl	800287c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	6423      	str	r3, [r4, #64]	; 0x40
 8002a34:	e7c0      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a36:	f013 0f02 	tst.w	r3, #2
 8002a3a:	d0d9      	beq.n	80029f0 <HAL_UART_IRQHandler+0x90>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d0d7      	beq.n	80029f0 <HAL_UART_IRQHandler+0x90>
 8002a40:	e7d2      	b.n	80029e8 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7ff ff24 	bl	8002890 <UART_Receive_IT>
 8002a48:	e7e6      	b.n	8002a18 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f7ff fdde 	bl	800260c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002a58:	d014      	beq.n	8002a84 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a60:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a64:	b153      	cbz	r3, 8002a7c <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a66:	4a5c      	ldr	r2, [pc, #368]	; (8002bd8 <HAL_UART_IRQHandler+0x278>)
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a6c:	f7fe fc34 	bl	80012d8 <HAL_DMA_Abort_IT>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d0a1      	beq.n	80029b8 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a78:	4798      	blx	r3
 8002a7a:	e79d      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f7ff fefd 	bl	800287c <HAL_UART_ErrorCallback>
 8002a82:	e799      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fef9 	bl	800287c <HAL_UART_ErrorCallback>
 8002a8a:	e795      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002a8c:	f013 0f10 	tst.w	r3, #16
 8002a90:	d084      	beq.n	800299c <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002a92:	f011 0f10 	tst.w	r1, #16
 8002a96:	d081      	beq.n	800299c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	6813      	ldr	r3, [r2, #0]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	6853      	ldr	r3, [r2, #4]
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa6:	6953      	ldr	r3, [r2, #20]
 8002aa8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002aac:	d032      	beq.n	8002b14 <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002ab0:	680b      	ldr	r3, [r1, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f43f af7e 	beq.w	80029b8 <HAL_UART_IRQHandler+0x58>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002abc:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8002abe:	4298      	cmp	r0, r3
 8002ac0:	f67f af7a 	bls.w	80029b8 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac4:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ac6:	698b      	ldr	r3, [r1, #24]
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d107      	bne.n	8002adc <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002acc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002ace:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002ad0:	1ac9      	subs	r1, r1, r3
 8002ad2:	b289      	uxth	r1, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f7ff feda 	bl	800288e <HAL_UARTEx_RxEventCallback>
 8002ada:	e76d      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002adc:	68d3      	ldr	r3, [r2, #12]
 8002ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae2:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae4:	6822      	ldr	r2, [r4, #0]
 8002ae6:	6953      	ldr	r3, [r2, #20]
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	6822      	ldr	r2, [r4, #0]
 8002af0:	6953      	ldr	r3, [r2, #20]
 8002af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af6:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8002af8:	2320      	movs	r3, #32
 8002afa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afe:	2300      	movs	r3, #0
 8002b00:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b02:	6822      	ldr	r2, [r4, #0]
 8002b04:	68d3      	ldr	r3, [r2, #12]
 8002b06:	f023 0310 	bic.w	r3, r3, #16
 8002b0a:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b0e:	f7fe fbc0 	bl	8001292 <HAL_DMA_Abort>
 8002b12:	e7db      	b.n	8002acc <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b14:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002b16:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 8002b18:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f43f af4b 	beq.w	80029b8 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b22:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8002b24:	1a59      	subs	r1, r3, r1
 8002b26:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	f43f af45 	beq.w	80029b8 <HAL_UART_IRQHandler+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b2e:	68d3      	ldr	r3, [r2, #12]
 8002b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b34:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b36:	6822      	ldr	r2, [r4, #0]
 8002b38:	6953      	ldr	r3, [r2, #20]
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8002b40:	2320      	movs	r3, #32
 8002b42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b46:	2300      	movs	r3, #0
 8002b48:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4a:	6822      	ldr	r2, [r4, #0]
 8002b4c:	68d3      	ldr	r3, [r2, #12]
 8002b4e:	f023 0310 	bic.w	r3, r3, #16
 8002b52:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff fe9a 	bl	800288e <HAL_UARTEx_RxEventCallback>
 8002b5a:	e72d      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	f47f af28 	bne.w	80029b8 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b68:	68a3      	ldr	r3, [r4, #8]
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	d016      	beq.n	8002b9e <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b70:	6a23      	ldr	r3, [r4, #32]
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	6221      	str	r1, [r4, #32]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8002b7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f47f af18 	bne.w	80029b8 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	68d3      	ldr	r3, [r2, #12]
 8002b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b90:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	68d3      	ldr	r3, [r2, #12]
 8002b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b9a:	60d3      	str	r3, [r2, #12]
 8002b9c:	e70c      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9e:	6923      	ldr	r3, [r4, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1e5      	bne.n	8002b70 <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba4:	6a23      	ldr	r3, [r4, #32]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002bae:	6a23      	ldr	r3, [r4, #32]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	6223      	str	r3, [r4, #32]
 8002bb4:	e7e1      	b.n	8002b7a <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bb6:	68d3      	ldr	r3, [r2, #12]
 8002bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bbc:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff fe58 	bl	800287a <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002bca:	e6f5      	b.n	80029b8 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bcc:	f013 0f08 	tst.w	r3, #8
 8002bd0:	f47f af15 	bne.w	80029fe <HAL_UART_IRQHandler+0x9e>
 8002bd4:	e717      	b.n	8002a06 <HAL_UART_IRQHandler+0xa6>
 8002bd6:	bf00      	nop
 8002bd8:	0800287f 	.word	0x0800287f

08002bdc <HAL_UART_GetState>:
  temp1 = huart->gState;
 8002bdc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 8002be0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8002be4:	4318      	orrs	r0, r3
 8002be6:	4770      	bx	lr

08002be8 <UART_Start_Receive_IT>:
{
 8002be8:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8002bea:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bec:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002bee:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bf4:	2222      	movs	r2, #34	; 0x22
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8002bfa:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	68ca      	ldr	r2, [r1, #12]
 8002c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c06:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	694a      	ldr	r2, [r1, #20]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68d3      	ldr	r3, [r2, #12]
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	60d3      	str	r3, [r2, #12]
}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_UART_Receive_IT>:
{
 8002c1e:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c20:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d10d      	bne.n	8002c46 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8002c2a:	b171      	cbz	r1, 8002c4a <HAL_UART_Receive_IT+0x2c>
 8002c2c:	b17a      	cbz	r2, 8002c4e <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8002c2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d00d      	beq.n	8002c52 <HAL_UART_Receive_IT+0x34>
 8002c36:	2301      	movs	r3, #1
 8002c38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8002c40:	f7ff ffd2 	bl	8002be8 <UART_Start_Receive_IT>
 8002c44:	e000      	b.n	8002c48 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8002c46:	2002      	movs	r0, #2
}
 8002c48:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	e7fc      	b.n	8002c48 <HAL_UART_Receive_IT+0x2a>
 8002c4e:	2001      	movs	r0, #1
 8002c50:	e7fa      	b.n	8002c48 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8002c52:	2002      	movs	r0, #2
 8002c54:	e7f8      	b.n	8002c48 <HAL_UART_Receive_IT+0x2a>
	...

08002c58 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002c58:	b430      	push	{r4, r5}
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002c5a:	680a      	ldr	r2, [r1, #0]
 8002c5c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002c68:	688b      	ldr	r3, [r1, #8]
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	bf0c      	ite	eq
 8002c6e:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8002c72:	f04f 0c00 	movne.w	ip, #0
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002c76:	680a      	ldr	r2, [r1, #0]
 8002c78:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8002c7c:	684d      	ldr	r5, [r1, #4]
 8002c7e:	432b      	orrs	r3, r5
 8002c80:	68cd      	ldr	r5, [r1, #12]
 8002c82:	432b      	orrs	r3, r5
 8002c84:	690d      	ldr	r5, [r1, #16]
 8002c86:	432b      	orrs	r3, r5
 8002c88:	694d      	ldr	r5, [r1, #20]
 8002c8a:	432b      	orrs	r3, r5
 8002c8c:	69cd      	ldr	r5, [r1, #28]
 8002c8e:	432b      	orrs	r3, r5
 8002c90:	6a0d      	ldr	r5, [r1, #32]
 8002c92:	432b      	orrs	r3, r5
 8002c94:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002c96:	432b      	orrs	r3, r5
 8002c98:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8002c9a:	432b      	orrs	r3, r5
 8002c9c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 8002c9e:	432b      	orrs	r3, r5
 8002ca0:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002ca2:	432b      	orrs	r3, r5
 8002ca4:	698d      	ldr	r5, [r1, #24]
 8002ca6:	432b      	orrs	r3, r5
 8002ca8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002caa:	430b      	orrs	r3, r1
 8002cac:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <FSMC_NORSRAM_Init+0x68>)
 8002cae:	4021      	ands	r1, r4
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	ea43 030c 	orr.w	r3, r3, ip
 8002cb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 8002cba:	2000      	movs	r0, #0
 8002cbc:	bc30      	pop	{r4, r5}
 8002cbe:	4770      	bx	lr
 8002cc0:	fff00080 	.word	0xfff00080

08002cc4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002cc4:	b410      	push	{r4}
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002cc6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002cca:	6850      	ldr	r0, [r2, #4]
 8002ccc:	680b      	ldr	r3, [r1, #0]
 8002cce:	698c      	ldr	r4, [r1, #24]
 8002cd0:	4323      	orrs	r3, r4
 8002cd2:	684c      	ldr	r4, [r1, #4]
 8002cd4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002cd8:	688c      	ldr	r4, [r1, #8]
 8002cda:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8002cde:	68cc      	ldr	r4, [r1, #12]
 8002ce0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002ce4:	690c      	ldr	r4, [r1, #16]
 8002ce6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002cea:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8002cee:	6949      	ldr	r1, [r1, #20]
 8002cf0:	3902      	subs	r1, #2
 8002cf2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cf6:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 8002cfe:	2000      	movs	r0, #0
 8002d00:	bc10      	pop	{r4}
 8002d02:	4770      	bx	lr

08002d04 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d08:	d005      	beq.n	8002d16 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002d0a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002d0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002d12:	2000      	movs	r0, #0
 8002d14:	4770      	bx	lr
{
 8002d16:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002d18:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8002d1c:	680b      	ldr	r3, [r1, #0]
 8002d1e:	698d      	ldr	r5, [r1, #24]
 8002d20:	432b      	orrs	r3, r5
 8002d22:	684d      	ldr	r5, [r1, #4]
 8002d24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002d28:	688d      	ldr	r5, [r1, #8]
 8002d2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002d2e:	68c9      	ldr	r1, [r1, #12]
 8002d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8002d36:	4021      	ands	r1, r4
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8002d3e:	2000      	movs	r0, #0
 8002d40:	bc30      	pop	{r4, r5}
 8002d42:	4770      	bx	lr
 8002d44:	cff00000 	.word	0xcff00000

08002d48 <clearReceivedBuffer>:
    clearReceivedBuffer();
}

// Reset the buffer
void clearReceivedBuffer()
{
 8002d48:	b508      	push	{r3, lr}
    buffer_index = 0;
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <clearReceivedBuffer+0x14>)
 8002d4e:	6019      	str	r1, [r3, #0]
    memset(buffer,0,sizeof(buffer));
 8002d50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <clearReceivedBuffer+0x18>)
 8002d56:	f029 fbbd 	bl	802c4d4 <memset>
}
 8002d5a:	bd08      	pop	{r3, pc}
 8002d5c:	200011bc 	.word	0x200011bc
 8002d60:	200009bc 	.word	0x200009bc

08002d64 <sendData>:
{
 8002d64:	b510      	push	{r4, lr}
 8002d66:	4604      	mov	r4, r0
	clearReceivedBuffer();
 8002d68:	f7ff ffee 	bl	8002d48 <clearReceivedBuffer>
    HAL_UART_Transmit(&huart3, (uint8_t *)command,strlen(command),5000);
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7fd fa63 	bl	8000238 <strlen>
 8002d72:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d76:	b282      	uxth	r2, r0
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <sendData+0x2c>)
 8002d7c:	f7ff fd0b 	bl	8002796 <HAL_UART_Transmit>
    while(HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX);
 8002d80:	4c03      	ldr	r4, [pc, #12]	; (8002d90 <sendData+0x2c>)
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff ff2a 	bl	8002bdc <HAL_UART_GetState>
 8002d88:	2821      	cmp	r0, #33	; 0x21
 8002d8a:	d0fa      	beq.n	8002d82 <sendData+0x1e>
}
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000096c 	.word	0x2000096c

08002d94 <showResponse>:
{
 8002d94:	b510      	push	{r4, lr}
 8002d96:	f6ad 0d68 	subw	sp, sp, #2152	; 0x868
	sprintf(temp,"Size: %d\n%s", strlen(buffer),buffer);
 8002d9a:	4c09      	ldr	r4, [pc, #36]	; (8002dc0 <showResponse+0x2c>)
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f7fd fa4b 	bl	8000238 <strlen>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4623      	mov	r3, r4
 8002da6:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <showResponse+0x30>)
 8002da8:	a801      	add	r0, sp, #4
 8002daa:	f029 fd31 	bl	802c810 <siprintf>
	print_debug(temp);
 8002dae:	a801      	add	r0, sp, #4
 8002db0:	f000 f976 	bl	80030a0 <print_debug>
    clearReceivedBuffer();
 8002db4:	f7ff ffc8 	bl	8002d48 <clearReceivedBuffer>
}
 8002db8:	f60d 0d68 	addw	sp, sp, #2152	; 0x868
 8002dbc:	bd10      	pop	{r4, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200009bc 	.word	0x200009bc
 8002dc4:	0802ce40 	.word	0x0802ce40

08002dc8 <checkAT>:


// Send "AT" to check if working, should respond with OK
void checkAT()
{
 8002dc8:	b508      	push	{r3, lr}
	sendData("AT\r\n");
 8002dca:	4805      	ldr	r0, [pc, #20]	; (8002de0 <checkAT+0x18>)
 8002dcc:	f7ff ffca 	bl	8002d64 <sendData>
	HAL_Delay(1000);
 8002dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd4:	f7fe f948 	bl	8001068 <HAL_Delay>
	showResponse();
 8002dd8:	f7ff ffdc 	bl	8002d94 <showResponse>
}
 8002ddc:	bd08      	pop	{r3, pc}
 8002dde:	bf00      	nop
 8002de0:	0802ce4c 	.word	0x0802ce4c

08002de4 <resetEsp>:
	clearReceivedBuffer();
}

// Reset module
void resetEsp()
{
 8002de4:	b508      	push	{r3, lr}
	sendData("AT+RST\r\n");
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <resetEsp+0x18>)
 8002de8:	f7ff ffbc 	bl	8002d64 <sendData>
	HAL_Delay(5000);
 8002dec:	f241 3088 	movw	r0, #5000	; 0x1388
 8002df0:	f7fe f93a 	bl	8001068 <HAL_Delay>
	clearReceivedBuffer();
 8002df4:	f7ff ffa8 	bl	8002d48 <clearReceivedBuffer>
}
 8002df8:	bd08      	pop	{r3, pc}
 8002dfa:	bf00      	nop
 8002dfc:	0802ce54 	.word	0x0802ce54

08002e00 <connectWifi>:


// Connect to WIFI
void connectWifi(char* ssid, char* passwd)
{
 8002e00:	b530      	push	{r4, r5, lr}
 8002e02:	b09b      	sub	sp, #108	; 0x6c
 8002e04:	4604      	mov	r4, r0
 8002e06:	460d      	mov	r5, r1
	sendData("AT+CWMODE=1\r\n");
 8002e08:	4817      	ldr	r0, [pc, #92]	; (8002e68 <connectWifi+0x68>)
 8002e0a:	f7ff ffab 	bl	8002d64 <sendData>
	HAL_Delay(200);
 8002e0e:	20c8      	movs	r0, #200	; 0xc8
 8002e10:	f7fe f92a 	bl	8001068 <HAL_Delay>
	sendData("AT+CWDHCP=1,1\r\n");
 8002e14:	4815      	ldr	r0, [pc, #84]	; (8002e6c <connectWifi+0x6c>)
 8002e16:	f7ff ffa5 	bl	8002d64 <sendData>
	HAL_Delay(200);
 8002e1a:	20c8      	movs	r0, #200	; 0xc8
 8002e1c:	f7fe f924 	bl	8001068 <HAL_Delay>
	sendData("AT+CIPMUX=1\r\n");
 8002e20:	4813      	ldr	r0, [pc, #76]	; (8002e70 <connectWifi+0x70>)
 8002e22:	f7ff ff9f 	bl	8002d64 <sendData>
	HAL_Delay(200);
 8002e26:	20c8      	movs	r0, #200	; 0xc8
 8002e28:	f7fe f91e 	bl	8001068 <HAL_Delay>
	sendData("AT+CIPSERVER=1,80\r\n");
 8002e2c:	4811      	ldr	r0, [pc, #68]	; (8002e74 <connectWifi+0x74>)
 8002e2e:	f7ff ff99 	bl	8002d64 <sendData>
	HAL_Delay(200);
 8002e32:	20c8      	movs	r0, #200	; 0xc8
 8002e34:	f7fe f918 	bl	8001068 <HAL_Delay>
	char wifi_info[100]={0};
 8002e38:	2100      	movs	r1, #0
 8002e3a:	9101      	str	r1, [sp, #4]
 8002e3c:	2260      	movs	r2, #96	; 0x60
 8002e3e:	a802      	add	r0, sp, #8
 8002e40:	f029 fb48 	bl	802c4d4 <memset>
	sprintf(wifi_info,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,passwd);
 8002e44:	462b      	mov	r3, r5
 8002e46:	4622      	mov	r2, r4
 8002e48:	490b      	ldr	r1, [pc, #44]	; (8002e78 <connectWifi+0x78>)
 8002e4a:	a801      	add	r0, sp, #4
 8002e4c:	f029 fce0 	bl	802c810 <siprintf>
	sendData(wifi_info);
 8002e50:	a801      	add	r0, sp, #4
 8002e52:	f7ff ff87 	bl	8002d64 <sendData>
	HAL_Delay(5000);
 8002e56:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e5a:	f7fe f905 	bl	8001068 <HAL_Delay>
	clearReceivedBuffer();
 8002e5e:	f7ff ff73 	bl	8002d48 <clearReceivedBuffer>
//	showResponse();
//	HAL_Delay(1000);
}
 8002e62:	b01b      	add	sp, #108	; 0x6c
 8002e64:	bd30      	pop	{r4, r5, pc}
 8002e66:	bf00      	nop
 8002e68:	0802ce60 	.word	0x0802ce60
 8002e6c:	0802ce70 	.word	0x0802ce70
 8002e70:	0802ce80 	.word	0x0802ce80
 8002e74:	0802ce90 	.word	0x0802ce90
 8002e78:	0802cea4 	.word	0x0802cea4

08002e7c <sendWebsite>:
	clearReceivedBuffer();
}

// sends html file to server
void sendWebsite()
{
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	b08e      	sub	sp, #56	; 0x38
	char at_command[50] = {0};
 8002e80:	2100      	movs	r1, #0
 8002e82:	9101      	str	r1, [sp, #4]
 8002e84:	222e      	movs	r2, #46	; 0x2e
 8002e86:	a802      	add	r0, sp, #8
 8002e88:	f029 fb24 	bl	802c4d4 <memset>
	sprintf(at_command,"AT+CIPSEND=0,%i\r\n",strlen(html_file));
 8002e8c:	4c0f      	ldr	r4, [pc, #60]	; (8002ecc <sendWebsite+0x50>)
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7fd f9d2 	bl	8000238 <strlen>
 8002e94:	4602      	mov	r2, r0
 8002e96:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <sendWebsite+0x54>)
 8002e98:	a801      	add	r0, sp, #4
 8002e9a:	f029 fcb9 	bl	802c810 <siprintf>
	sendData(at_command);
 8002e9e:	a801      	add	r0, sp, #4
 8002ea0:	f7ff ff60 	bl	8002d64 <sendData>
	HAL_Delay(100);
 8002ea4:	2064      	movs	r0, #100	; 0x64
 8002ea6:	f7fe f8df 	bl	8001068 <HAL_Delay>
	sendData(html_file);
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f7ff ff5a 	bl	8002d64 <sendData>
	HAL_Delay(100);
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	f7fe f8d9 	bl	8001068 <HAL_Delay>
	sendData("AT+CIPCLOSE=0\r\n");
 8002eb6:	4807      	ldr	r0, [pc, #28]	; (8002ed4 <sendWebsite+0x58>)
 8002eb8:	f7ff ff54 	bl	8002d64 <sendData>
	HAL_Delay(100);
 8002ebc:	2064      	movs	r0, #100	; 0x64
 8002ebe:	f7fe f8d3 	bl	8001068 <HAL_Delay>
	clearReceivedBuffer();
 8002ec2:	f7ff ff41 	bl	8002d48 <clearReceivedBuffer>
}
 8002ec6:	b00e      	add	sp, #56	; 0x38
 8002ec8:	bd10      	pop	{r4, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c
 8002ed0:	0802cf0c 	.word	0x0802cf0c
 8002ed4:	0802cf20 	.word	0x0802cf20

08002ed8 <serverHandler>:
//
//}

// handles incoming requests
void serverHandler()
{
 8002ed8:	b508      	push	{r3, lr}
	__HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE);
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <serverHandler+0x8c>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68d3      	ldr	r3, [r2, #12]
 8002ee0:	f023 0320 	bic.w	r3, r3, #32
 8002ee4:	60d3      	str	r3, [r2, #12]
	// If an HTTP GET request header is found and requests for html page, then we give it default static webpage by sending HTML file to server
	if(strstr(buffer,"GET")!=NULL && (strstr(buffer,"html"))!=NULL)
 8002ee6:	4920      	ldr	r1, [pc, #128]	; (8002f68 <serverHandler+0x90>)
 8002ee8:	4820      	ldr	r0, [pc, #128]	; (8002f6c <serverHandler+0x94>)
 8002eea:	f029 fcb9 	bl	802c860 <strstr>
 8002eee:	b138      	cbz	r0, 8002f00 <serverHandler+0x28>
 8002ef0:	491f      	ldr	r1, [pc, #124]	; (8002f70 <serverHandler+0x98>)
 8002ef2:	481e      	ldr	r0, [pc, #120]	; (8002f6c <serverHandler+0x94>)
 8002ef4:	f029 fcb4 	bl	802c860 <strstr>
 8002ef8:	b110      	cbz	r0, 8002f00 <serverHandler+0x28>
	{
		sendWebsite();
 8002efa:	f7ff ffbf 	bl	8002e7c <sendWebsite>
 8002efe:	e027      	b.n	8002f50 <serverHandler+0x78>
////		print_debug(temp);
//		sendHandShake(temp);
//	}

	// If an HTTP POST request is detected, this means that the joystick is being moved
	else if(strstr(buffer,"POST")!=NULL)
 8002f00:	491c      	ldr	r1, [pc, #112]	; (8002f74 <serverHandler+0x9c>)
 8002f02:	481a      	ldr	r0, [pc, #104]	; (8002f6c <serverHandler+0x94>)
 8002f04:	f029 fcac 	bl	802c860 <strstr>
 8002f08:	b310      	cbz	r0, 8002f50 <serverHandler+0x78>
	{
		// todo
		// if forward string found, move forward
		if(strstr(buffer,"Forward")!=NULL)
 8002f0a:	491b      	ldr	r1, [pc, #108]	; (8002f78 <serverHandler+0xa0>)
 8002f0c:	4817      	ldr	r0, [pc, #92]	; (8002f6c <serverHandler+0x94>)
 8002f0e:	f029 fca7 	bl	802c860 <strstr>
 8002f12:	b110      	cbz	r0, 8002f1a <serverHandler+0x42>
		{
			print_debug("Forward");
 8002f14:	4818      	ldr	r0, [pc, #96]	; (8002f78 <serverHandler+0xa0>)
 8002f16:	f000 f8c3 	bl	80030a0 <print_debug>
		}
		if(strstr(buffer,"Left")!=NULL)
 8002f1a:	4918      	ldr	r1, [pc, #96]	; (8002f7c <serverHandler+0xa4>)
 8002f1c:	4813      	ldr	r0, [pc, #76]	; (8002f6c <serverHandler+0x94>)
 8002f1e:	f029 fc9f 	bl	802c860 <strstr>
 8002f22:	b110      	cbz	r0, 8002f2a <serverHandler+0x52>
		{

			print_debug("Left");
 8002f24:	4815      	ldr	r0, [pc, #84]	; (8002f7c <serverHandler+0xa4>)
 8002f26:	f000 f8bb 	bl	80030a0 <print_debug>
		}
		if(strstr(buffer,"Right")!=NULL)
 8002f2a:	4915      	ldr	r1, [pc, #84]	; (8002f80 <serverHandler+0xa8>)
 8002f2c:	480f      	ldr	r0, [pc, #60]	; (8002f6c <serverHandler+0x94>)
 8002f2e:	f029 fc97 	bl	802c860 <strstr>
 8002f32:	b110      	cbz	r0, 8002f3a <serverHandler+0x62>
		{
			print_debug("Right");
 8002f34:	4812      	ldr	r0, [pc, #72]	; (8002f80 <serverHandler+0xa8>)
 8002f36:	f000 f8b3 	bl	80030a0 <print_debug>
		}
		if(strstr(buffer,"Backward")!=NULL)
 8002f3a:	4912      	ldr	r1, [pc, #72]	; (8002f84 <serverHandler+0xac>)
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <serverHandler+0x94>)
 8002f3e:	f029 fc8f 	bl	802c860 <strstr>
 8002f42:	b110      	cbz	r0, 8002f4a <serverHandler+0x72>
		{
			print_debug("Backward");
 8002f44:	480f      	ldr	r0, [pc, #60]	; (8002f84 <serverHandler+0xac>)
 8002f46:	f000 f8ab 	bl	80030a0 <print_debug>
		}
		print_debug("Stay still");
 8002f4a:	480f      	ldr	r0, [pc, #60]	; (8002f88 <serverHandler+0xb0>)
 8002f4c:	f000 f8a8 	bl	80030a0 <print_debug>
	}
	clearReceivedBuffer();
 8002f50:	f7ff fefa 	bl	8002d48 <clearReceivedBuffer>
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <serverHandler+0x8c>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68d3      	ldr	r3, [r2, #12]
 8002f5a:	f043 0320 	orr.w	r3, r3, #32
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bd08      	pop	{r3, pc}
 8002f62:	bf00      	nop
 8002f64:	2000096c 	.word	0x2000096c
 8002f68:	0802cf30 	.word	0x0802cf30
 8002f6c:	200009bc 	.word	0x200009bc
 8002f70:	0802cf34 	.word	0x0802cf34
 8002f74:	0802cf3c 	.word	0x0802cf3c
 8002f78:	0802cf44 	.word	0x0802cf44
 8002f7c:	0802cf4c 	.word	0x0802cf4c
 8002f80:	0802cf54 	.word	0x0802cf54
 8002f84:	0802cf5c 	.word	0x0802cf5c
 8002f88:	0802cf68 	.word	0x0802cf68

08002f8c <HAL_UART_RxCpltCallback>:
	HAL_Delay(100);
	showResponse();
}

// UART callback function, adds response to buffer
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f8c:	b508      	push	{r3, lr}
    if(huart->Instance==USART3)
 8002f8e:	6802      	ldr	r2, [r0, #0]
 8002f90:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <HAL_UART_RxCpltCallback+0x78>)
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d000      	beq.n	8002f98 <HAL_UART_RxCpltCallback+0xc>
        		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
        			detect_server = 1;
		}
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&single_buffer, 1);
    }
}
 8002f96:	bd08      	pop	{r3, pc}
        if(buffer_index >= (RX_BUFFER_SIZE-1))
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_UART_RxCpltCallback+0x7c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d91f      	bls.n	8002fe4 <HAL_UART_RxCpltCallback+0x58>
        	buffer_index=RX_BUFFER_SIZE-1;
 8002fa4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002fa8:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_UART_RxCpltCallback+0x7c>)
 8002faa:	6013      	str	r3, [r2, #0]
        		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_UART_RxCpltCallback+0x80>)
 8002fae:	441a      	add	r2, r3
 8002fb0:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8002fb4:	2a0d      	cmp	r2, #13
 8002fb6:	d11e      	bne.n	8002ff6 <HAL_UART_RxCpltCallback+0x6a>
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_UART_RxCpltCallback+0x80>)
 8002fba:	441a      	add	r2, r3
 8002fbc:	f812 2c03 	ldrb.w	r2, [r2, #-3]
 8002fc0:	2a0a      	cmp	r2, #10
 8002fc2:	d118      	bne.n	8002ff6 <HAL_UART_RxCpltCallback+0x6a>
 8002fc4:	4a11      	ldr	r2, [pc, #68]	; (800300c <HAL_UART_RxCpltCallback+0x80>)
 8002fc6:	441a      	add	r2, r3
 8002fc8:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 8002fcc:	2a0d      	cmp	r2, #13
 8002fce:	d112      	bne.n	8002ff6 <HAL_UART_RxCpltCallback+0x6a>
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_UART_RxCpltCallback+0x80>)
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002fd8:	2b0a      	cmp	r3, #10
 8002fda:	d10c      	bne.n	8002ff6 <HAL_UART_RxCpltCallback+0x6a>
        			detect_server = 1;
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_UART_RxCpltCallback+0x84>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e008      	b.n	8002ff6 <HAL_UART_RxCpltCallback+0x6a>
            buffer[buffer_index] = single_buffer;
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_UART_RxCpltCallback+0x88>)
 8002fe6:	7811      	ldrb	r1, [r2, #0]
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_UART_RxCpltCallback+0x80>)
 8002fea:	54d1      	strb	r1, [r2, r3]
            buffer_index++;
 8002fec:	3301      	adds	r3, #1
 8002fee:	4a06      	ldr	r2, [pc, #24]	; (8003008 <HAL_UART_RxCpltCallback+0x7c>)
 8002ff0:	6013      	str	r3, [r2, #0]
        if(buffer_index > 5)
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d8da      	bhi.n	8002fac <HAL_UART_RxCpltCallback+0x20>
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&single_buffer, 1);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4906      	ldr	r1, [pc, #24]	; (8003014 <HAL_UART_RxCpltCallback+0x88>)
 8002ffa:	4807      	ldr	r0, [pc, #28]	; (8003018 <HAL_UART_RxCpltCallback+0x8c>)
 8002ffc:	f7ff fe0f 	bl	8002c1e <HAL_UART_Receive_IT>
}
 8003000:	e7c9      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xa>
 8003002:	bf00      	nop
 8003004:	40004800 	.word	0x40004800
 8003008:	200011bc 	.word	0x200011bc
 800300c:	200009bc 	.word	0x200009bc
 8003010:	200011c0 	.word	0x200011c0
 8003014:	200011c1 	.word	0x200011c1
 8003018:	2000096c 	.word	0x2000096c

0800301c <set_screen>:
	lv_obj_t * obj = lv_event_get_target(e);
	uint32_t id = lv_btnmatrix_get_selected_btn(obj);
}

void set_screen()
{
 800301c:	b508      	push	{r3, lr}
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 800301e:	f01d f9c5 	bl	80203ac <lv_disp_get_default>
 8003022:	f000 fd1b 	bl	8003a5c <lv_disp_get_scr_act>
	/*Change the active screen's background color*/
	lv_obj_set_style_bg_color(lv_scr_act(), lv_color_hex(0x282a36), LV_PART_MAIN);
 8003026:	2200      	movs	r2, #0
 8003028:	f642 1146 	movw	r1, #10566	; 0x2946
 800302c:	f008 fab3 	bl	800b596 <lv_obj_set_style_bg_color>
}
 8003030:	bd08      	pop	{r3, pc}
	...

08003034 <debug_screen>:

// Create debug text area
void debug_screen()
{
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	f01d f9b9 	bl	80203ac <lv_disp_get_default>
 800303a:	f000 fd0f 	bl	8003a5c <lv_disp_get_scr_act>
	// printing string section for debugging
	lv_obj_t* text_area= lv_obj_create(lv_scr_act());
 800303e:	f003 fc2b 	bl	8006898 <lv_obj_create>
 8003042:	4604      	mov	r4, r0
	lv_obj_set_size(text_area,240,240);
 8003044:	22f0      	movs	r2, #240	; 0xf0
 8003046:	4611      	mov	r1, r2
 8003048:	f004 fc7e 	bl	8007948 <lv_obj_set_size>
//	lv_obj_align(text_area, LV_ALIGN_BOTTOM_LEFT, 10, -10);
	lv_obj_align(text_area, LV_ALIGN_CENTER, 0, 0);
 800304c:	2300      	movs	r3, #0
 800304e:	461a      	mov	r2, r3
 8003050:	2109      	movs	r1, #9
 8003052:	4620      	mov	r0, r4
 8003054:	f004 fcde 	bl	8007a14 <lv_obj_align>

	change_label = lv_label_create(text_area);
 8003058:	4620      	mov	r0, r4
 800305a:	f024 ff67 	bl	8027f2c <lv_label_create>
 800305e:	4c0c      	ldr	r4, [pc, #48]	; (8003090 <debug_screen+0x5c>)
 8003060:	6020      	str	r0, [r4, #0]
	lv_label_set_text(change_label,"Text");
 8003062:	490c      	ldr	r1, [pc, #48]	; (8003094 <debug_screen+0x60>)
 8003064:	f025 fc3e 	bl	80288e4 <lv_label_set_text>
 * @param obj       pointer to an object to align
 * @note            if the parent size changes `obj` needs to be aligned manually again
 */
static inline void lv_obj_center(struct _lv_obj_t * obj)
{
    lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 8003068:	2300      	movs	r3, #0
 800306a:	461a      	mov	r2, r3
 800306c:	2109      	movs	r1, #9
 800306e:	6820      	ldr	r0, [r4, #0]
 8003070:	f004 fcd0 	bl	8007a14 <lv_obj_align>
	lv_obj_center(change_label);
	static lv_style_t style;
	lv_style_init(&style);
 8003074:	4d08      	ldr	r5, [pc, #32]	; (8003098 <debug_screen+0x64>)
 8003076:	4628      	mov	r0, r5
 8003078:	f01f fbed 	bl	8022856 <lv_style_init>
	lv_style_set_text_font(&style, &lv_font_montserrat_8); // <--- you have to enable other font sizes in menuconfig
 800307c:	4907      	ldr	r1, [pc, #28]	; (800309c <debug_screen+0x68>)
 800307e:	4628      	mov	r0, r5
 8003080:	f01f ff56 	bl	8022f30 <lv_style_set_text_font>
	lv_obj_add_style(change_label, &style, 0);  // <--- obj is the label
 8003084:	2200      	movs	r2, #0
 8003086:	4629      	mov	r1, r5
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	f007 fd33 	bl	800aaf4 <lv_obj_add_style>
}
 800308e:	bd38      	pop	{r3, r4, r5, pc}
 8003090:	200011c4 	.word	0x200011c4
 8003094:	0802cdf0 	.word	0x0802cdf0
 8003098:	200011c8 	.word	0x200011c8
 800309c:	08032b98 	.word	0x08032b98

080030a0 <print_debug>:
	lv_obj_add_event_cb(button_modes, event_button, LV_EVENT_ALL, NULL);

}

void print_debug(char* msg)
{
 80030a0:	b508      	push	{r3, lr}
 80030a2:	4601      	mov	r1, r0
	lv_label_set_text(change_label,msg);
 80030a4:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <print_debug+0x10>)
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	f025 fc1c 	bl	80288e4 <lv_label_set_text>
}
 80030ac:	bd08      	pop	{r3, pc}
 80030ae:	bf00      	nop
 80030b0:	200011c4 	.word	0x200011c4

080030b4 <ILI9341_Delay>:
}



static void ILI9341_Delay ( __IO uint32_t nCount )
{
 80030b4:	b082      	sub	sp, #8
 80030b6:	9001      	str	r0, [sp, #4]
  for ( ; nCount != 0; nCount -- );
 80030b8:	9b01      	ldr	r3, [sp, #4]
 80030ba:	b12b      	cbz	r3, 80030c8 <ILI9341_Delay+0x14>
 80030bc:	9b01      	ldr	r3, [sp, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	9b01      	ldr	r3, [sp, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f9      	bne.n	80030bc <ILI9341_Delay+0x8>
	
}
 80030c8:	b002      	add	sp, #8
 80030ca:	4770      	bx	lr

080030cc <ILI9341_ReadID>:
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80030cc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80030d0:	2204      	movs	r2, #4
 80030d2:	801a      	strh	r2, [r3, #0]
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 80030d4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	8818      	ldrh	r0, [r3, #0]
	
	ILI9341_Write_Cmd(0x04);
	ILI9341_Read_Data();
	ILI9341_Read_Data();
	id = ILI9341_Read_Data();
	id <<= 8;
 80030de:	0200      	lsls	r0, r0, #8
 80030e0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
	id |= ILI9341_Read_Data();
 80030e8:	4318      	orrs	r0, r3
	
  if(id == LCDID_ST7789V)
 80030ea:	f248 5352 	movw	r3, #34130	; 0x8552
 80030ee:	4298      	cmp	r0, r3
 80030f0:	d014      	beq.n	800311c <ILI9341_ReadID+0x50>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80030f2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80030f6:	22d3      	movs	r2, #211	; 0xd3
 80030f8:	801a      	strh	r2, [r3, #0]
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 80030fa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	8818      	ldrh	r0, [r3, #0]
  {
    ILI9341_Write_Cmd(0xD3);
    ILI9341_Read_Data();
    ILI9341_Read_Data();
    id = ILI9341_Read_Data();
    id <<= 8;
 8003104:	0200      	lsls	r0, r0, #8
 8003106:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
    id |= ILI9341_Read_Data();
 800310e:	4318      	orrs	r0, r3
    if(id == LCDID_ILI9341)
 8003110:	f249 3341 	movw	r3, #37697	; 0x9341
    {
      return id;
    }
  }
  
	return LCDID_UNKNOWN;
 8003114:	4298      	cmp	r0, r3
 8003116:	bf0c      	ite	eq
 8003118:	4618      	moveq	r0, r3
 800311a:	2000      	movne	r0, #0
}
 800311c:	4770      	bx	lr
	...

08003120 <ILI9341_Rst>:



void ILI9341_Rst( void )
{			
 8003120:	b510      	push	{r4, lr}
	digitalL( GPIOE,GPIO_PIN_1);	 //�͵�ƽ��λ
 8003122:	4c07      	ldr	r4, [pc, #28]	; (8003140 <ILI9341_Rst+0x20>)
 8003124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003128:	6123      	str	r3, [r4, #16]

	ILI9341_Delay ( 0xAFF ); 						   
 800312a:	f640 20ff 	movw	r0, #2815	; 0xaff
 800312e:	f7ff ffc1 	bl	80030b4 <ILI9341_Delay>

	digitalH( GPIOE,GPIO_PIN_1);		 	 
 8003132:	2302      	movs	r3, #2
 8003134:	6123      	str	r3, [r4, #16]

	ILI9341_Delay ( 0xAFF ); 	 	
 8003136:	f640 20ff 	movw	r0, #2815	; 0xaff
 800313a:	f7ff ffbb 	bl	80030b4 <ILI9341_Delay>
	
}
 800313e:	bd10      	pop	{r4, pc}
 8003140:	40011800 	.word	0x40011800

08003144 <ILI9341_GramScan>:


void ILI9341_GramScan ( uint8_t ucOption )
{	
	//������飬ֻ������0-7
	if(ucOption >7 )
 8003144:	2807      	cmp	r0, #7
 8003146:	d850      	bhi.n	80031ea <ILI9341_GramScan+0xa6>
{	
 8003148:	b410      	push	{r4}
		return;
	
	//����ģʽ����LCD_SCAN_MODE��ֵ����Ҫ���ڴ�����ѡ��������
	LCD_SCAN_MODE = ucOption;
 800314a:	4b28      	ldr	r3, [pc, #160]	; (80031ec <ILI9341_GramScan+0xa8>)
 800314c:	7018      	strb	r0, [r3, #0]
	
	//����ģʽ����XY��������ؿ��
	if(ucOption%2 == 0)	
 800314e:	f010 0f01 	tst.w	r0, #1
 8003152:	d138      	bne.n	80031c6 <ILI9341_GramScan+0x82>
	{
		//0 2 4 6ģʽ��X�������ؿ��Ϊ240��Y����Ϊ320
		LCD_X_LENGTH = ILI9341_LESS_PIXEL;
 8003154:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <ILI9341_GramScan+0xac>)
 8003156:	22f0      	movs	r2, #240	; 0xf0
 8003158:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_MORE_PIXEL;
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <ILI9341_GramScan+0xb0>)
 800315c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003160:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003162:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003166:	2236      	movs	r2, #54	; 0x36
 8003168:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_LESS_PIXEL; 
	}

	//0x36��������ĸ�3λ����������GRAMɨ�跽��	
	ILI9341_Write_Cmd ( 0x36 );
  if(lcdid == LCDID_ILI9341)
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <ILI9341_GramScan+0xb4>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	f249 3241 	movw	r2, #37697	; 0x9341
 8003172:	4293      	cmp	r3, r2
 8003174:	d02f      	beq.n	80031d6 <ILI9341_GramScan+0x92>
  {
    ILI9341_Write_Data ( 0x08 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
  }
  else if(lcdid == LCDID_ST7789V)
 8003176:	f248 5252 	movw	r2, #34130	; 0x8552
 800317a:	4293      	cmp	r3, r2
 800317c:	d031      	beq.n	80031e2 <ILI9341_GramScan+0x9e>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800317e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8003182:	232a      	movs	r3, #42	; 0x2a
 8003184:	800b      	strh	r3, [r1, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <ILI9341_GramScan+0xb8>)
 8003188:	2000      	movs	r0, #0
 800318a:	8018      	strh	r0, [r3, #0]
 800318c:	8018      	strh	r0, [r3, #0]
    ILI9341_Write_Data ( 0x00 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
  }
	ILI9341_Write_Cmd ( CMD_SetCoordinateX ); 
	ILI9341_Write_Data ( 0x00 );		/* x ��ʼ�����8λ */
	ILI9341_Write_Data ( 0x00 );		/* x ��ʼ�����8λ */
	ILI9341_Write_Data ( ((LCD_X_LENGTH-1)>>8)&0xFF ); /* x ���������8λ */	
 800318e:	4c18      	ldr	r4, [pc, #96]	; (80031f0 <ILI9341_GramScan+0xac>)
 8003190:	8822      	ldrh	r2, [r4, #0]
 8003192:	3a01      	subs	r2, #1
 8003194:	f3c2 2207 	ubfx	r2, r2, #8, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003198:	801a      	strh	r2, [r3, #0]
	ILI9341_Write_Data ( (LCD_X_LENGTH-1)&0xFF );				/* x ���������8λ */
 800319a:	8822      	ldrh	r2, [r4, #0]
 800319c:	3a01      	subs	r2, #1
 800319e:	b2d2      	uxtb	r2, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80031a0:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80031a2:	222b      	movs	r2, #43	; 0x2b
 80031a4:	800a      	strh	r2, [r1, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80031a6:	8018      	strh	r0, [r3, #0]
 80031a8:	8018      	strh	r0, [r3, #0]

	ILI9341_Write_Cmd ( CMD_SetCoordinateY ); 
	ILI9341_Write_Data ( 0x00 );		/* y ��ʼ�����8λ */
	ILI9341_Write_Data ( 0x00 );		/* y ��ʼ�����8λ */
	ILI9341_Write_Data ( ((LCD_Y_LENGTH-1)>>8)&0xFF );	/* y ���������8λ */	 
 80031aa:	4812      	ldr	r0, [pc, #72]	; (80031f4 <ILI9341_GramScan+0xb0>)
 80031ac:	8802      	ldrh	r2, [r0, #0]
 80031ae:	3a01      	subs	r2, #1
 80031b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80031b4:	801a      	strh	r2, [r3, #0]
	ILI9341_Write_Data ( (LCD_Y_LENGTH-1)&0xFF );				/* y ���������8λ */
 80031b6:	8802      	ldrh	r2, [r0, #0]
 80031b8:	3a01      	subs	r2, #1
 80031ba:	b2d2      	uxtb	r2, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80031bc:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80031be:	232c      	movs	r3, #44	; 0x2c
 80031c0:	800b      	strh	r3, [r1, #0]

	/* write gram start */
	ILI9341_Write_Cmd ( CMD_SetPixel );	
}
 80031c2:	bc10      	pop	{r4}
 80031c4:	4770      	bx	lr
		LCD_X_LENGTH = ILI9341_MORE_PIXEL;
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <ILI9341_GramScan+0xac>)
 80031c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031cc:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_LESS_PIXEL; 
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <ILI9341_GramScan+0xb0>)
 80031d0:	22f0      	movs	r2, #240	; 0xf0
 80031d2:	801a      	strh	r2, [r3, #0]
 80031d4:	e7c5      	b.n	8003162 <ILI9341_GramScan+0x1e>
    ILI9341_Write_Data ( 0x08 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
 80031d6:	0140      	lsls	r0, r0, #5
 80031d8:	f040 0008 	orr.w	r0, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <ILI9341_GramScan+0xb8>)
 80031de:	8018      	strh	r0, [r3, #0]
}
 80031e0:	e7cd      	b.n	800317e <ILI9341_GramScan+0x3a>
    ILI9341_Write_Data ( 0x00 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
 80031e2:	0140      	lsls	r0, r0, #5
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <ILI9341_GramScan+0xb8>)
 80031e6:	8018      	strh	r0, [r3, #0]
}
 80031e8:	e7c9      	b.n	800317e <ILI9341_GramScan+0x3a>
 80031ea:	4770      	bx	lr
 80031ec:	20000624 	.word	0x20000624
 80031f0:	20000626 	.word	0x20000626
 80031f4:	20000628 	.word	0x20000628
 80031f8:	200011d0 	.word	0x200011d0
 80031fc:	60020000 	.word	0x60020000

08003200 <ILI9341_OpenWindow>:



void ILI9341_OpenWindow ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight )
{	
 8003200:	b510      	push	{r4, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003202:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 8003206:	242a      	movs	r4, #42	; 0x2a
 8003208:	f8ae 4000 	strh.w	r4, [lr]
	ILI9341_Write_Cmd ( CMD_SetCoordinateX ); 				 /* ����X���� */
	ILI9341_Write_Data ( usX >> 8  );	 /* �ȸ�8λ��Ȼ���8λ */
 800320c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003210:	4c11      	ldr	r4, [pc, #68]	; (8003258 <ILI9341_OpenWindow+0x58>)
 8003212:	f8a4 c000 	strh.w	ip, [r4]
	ILI9341_Write_Data ( usX & 0xff  );	 /* ������ʼ��ͽ�����*/
 8003216:	fa5f fc80 	uxtb.w	ip, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800321a:	f8a4 c000 	strh.w	ip, [r4]
	ILI9341_Write_Data ( ( usX + usWidth - 1 ) >> 8  );
 800321e:	eb00 0c02 	add.w	ip, r0, r2
 8003222:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8003226:	f3cc 2c0f 	ubfx	ip, ip, #8, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800322a:	f8a4 c000 	strh.w	ip, [r4]
	ILI9341_Write_Data ( ( usX + usWidth - 1 ) & 0xff  );
 800322e:	3a01      	subs	r2, #1
 8003230:	4410      	add	r0, r2
 8003232:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003234:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003236:	222b      	movs	r2, #43	; 0x2b
 8003238:	f8ae 2000 	strh.w	r2, [lr]

	ILI9341_Write_Cmd ( CMD_SetCoordinateY ); 			     /* ����Y����*/
	ILI9341_Write_Data ( usY >> 8  );
 800323c:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800323e:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( usY & 0xff  );
 8003240:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003242:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( ( usY + usHeight - 1 ) >> 8 );
 8003244:	18ca      	adds	r2, r1, r3
 8003246:	3a01      	subs	r2, #1
 8003248:	f3c2 220f 	ubfx	r2, r2, #8, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800324c:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( ( usY + usHeight - 1) & 0xff );
 800324e:	3b01      	subs	r3, #1
 8003250:	4419      	add	r1, r3
 8003252:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003254:	8021      	strh	r1, [r4, #0]
	
}
 8003256:	bd10      	pop	{r4, pc}
 8003258:	60020000 	.word	0x60020000

0800325c <ILI9341_OpenWindow2>:


void ILI9341_OpenWindow2 ( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800325c:	b510      	push	{r4, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800325e:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
 8003262:	242a      	movs	r4, #42	; 0x2a
 8003264:	f8ac 4000 	strh.w	r4, [ip]
	ILI9341_Write_Cmd ( CMD_SetCoordinateX );
	ILI9341_Write_Data ( x1 >> 8  );
 8003268:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800326c:	4c0b      	ldr	r4, [pc, #44]	; (800329c <ILI9341_OpenWindow2+0x40>)
 800326e:	f8a4 e000 	strh.w	lr, [r4]
	ILI9341_Write_Data ( x1 & 0xff  );
 8003272:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003274:	8020      	strh	r0, [r4, #0]
	ILI9341_Write_Data ( x2 >> 8  );
 8003276:	0a10      	lsrs	r0, r2, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003278:	8020      	strh	r0, [r4, #0]
	ILI9341_Write_Data ( x2 & 0xff  );
 800327a:	b2d2      	uxtb	r2, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800327c:	8022      	strh	r2, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800327e:	222b      	movs	r2, #43	; 0x2b
 8003280:	f8ac 2000 	strh.w	r2, [ip]

	ILI9341_Write_Cmd ( CMD_SetCoordinateY );
	ILI9341_Write_Data ( y1 >> 8  );
 8003284:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003286:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( y1 & 0xff  );
 8003288:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800328a:	8021      	strh	r1, [r4, #0]
	ILI9341_Write_Data ( y2 >> 8 );
 800328c:	0a1a      	lsrs	r2, r3, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800328e:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( y2 & 0xff );
 8003290:	b2db      	uxtb	r3, r3
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003292:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003294:	232c      	movs	r3, #44	; 0x2c
 8003296:	f8ac 3000 	strh.w	r3, [ip]
	ILI9341_Write_Cmd(CMD_SetPixel);
}
 800329a:	bd10      	pop	{r4, pc}
 800329c:	60020000 	.word	0x60020000

080032a0 <ILI9341_Clear>:
	
}


void ILI9341_Clear ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight )
{
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4614      	mov	r4, r2
 80032a4:	461d      	mov	r5, r3
	ILI9341_OpenWindow ( usX, usY, usWidth, usHeight );
 80032a6:	f7ff ffab 	bl	8003200 <ILI9341_OpenWindow>

	ILI9341_FillColor ( usWidth * usHeight, CurrentBackColor);
 80032aa:	fb05 f404 	mul.w	r4, r5, r4
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <ILI9341_Clear+0x2c>)
 80032b0:	8819      	ldrh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80032b2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80032b6:	202c      	movs	r0, #44	; 0x2c
 80032b8:	8018      	strh	r0, [r3, #0]
	for ( i = 0; i < ulAmout_Point; i ++ )
 80032ba:	b12c      	cbz	r4, 80032c8 <ILI9341_Clear+0x28>
 80032bc:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80032be:	4804      	ldr	r0, [pc, #16]	; (80032d0 <ILI9341_Clear+0x30>)
 80032c0:	8001      	strh	r1, [r0, #0]
	for ( i = 0; i < ulAmout_Point; i ++ )
 80032c2:	3301      	adds	r3, #1
 80032c4:	429c      	cmp	r4, r3
 80032c6:	d1fb      	bne.n	80032c0 <ILI9341_Clear+0x20>
	
}
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
 80032ca:	bf00      	nop
 80032cc:	20000622 	.word	0x20000622
 80032d0:	60020000 	.word	0x60020000

080032d4 <ILI9341_Init>:
{
 80032d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    digitalL( GPIOD, GPIO_PIN_12);	
 80032d8:	4b71      	ldr	r3, [pc, #452]	; (80034a0 <ILI9341_Init+0x1cc>)
 80032da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032de:	611a      	str	r2, [r3, #16]
	ILI9341_Rst ();
 80032e0:	f7ff ff1e 	bl	8003120 <ILI9341_Rst>
  lcdid = ILI9341_ReadID();
 80032e4:	f7ff fef2 	bl	80030cc <ILI9341_ReadID>
 80032e8:	4b6e      	ldr	r3, [pc, #440]	; (80034a4 <ILI9341_Init+0x1d0>)
 80032ea:	8018      	strh	r0, [r3, #0]
  if(lcdid == LCDID_ILI9341)
 80032ec:	f249 3341 	movw	r3, #37697	; 0x9341
 80032f0:	4298      	cmp	r0, r3
 80032f2:	d015      	beq.n	8003320 <ILI9341_Init+0x4c>
  else if(lcdid == LCDID_ST7789V)
 80032f4:	f248 5352 	movw	r3, #34130	; 0x8552
 80032f8:	4298      	cmp	r0, r3
 80032fa:	f000 80dd 	beq.w	80034b8 <ILI9341_Init+0x1e4>
	ILI9341_GramScan(LCD_SCAN_MODE);
 80032fe:	4b6a      	ldr	r3, [pc, #424]	; (80034a8 <ILI9341_Init+0x1d4>)
 8003300:	7818      	ldrb	r0, [r3, #0]
 8003302:	f7ff ff1f 	bl	8003144 <ILI9341_GramScan>
  CurrentBackColor = Color;
 8003306:	4b69      	ldr	r3, [pc, #420]	; (80034ac <ILI9341_Init+0x1d8>)
 8003308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800330c:	801a      	strh	r2, [r3, #0]
	ILI9341_Clear(0,0,240,320);
 800330e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003312:	22f0      	movs	r2, #240	; 0xf0
 8003314:	2100      	movs	r1, #0
 8003316:	4608      	mov	r0, r1
 8003318:	f7ff ffc2 	bl	80032a0 <ILI9341_Clear>
}
 800331c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003320:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8003324:	23cf      	movs	r3, #207	; 0xcf
 8003326:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003328:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <ILI9341_Init+0x1dc>)
 800332a:	2200      	movs	r2, #0
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	2181      	movs	r1, #129	; 0x81
 8003330:	8019      	strh	r1, [r3, #0]
 8003332:	2630      	movs	r6, #48	; 0x30
 8003334:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003336:	20ed      	movs	r0, #237	; 0xed
 8003338:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800333a:	2064      	movs	r0, #100	; 0x64
 800333c:	8018      	strh	r0, [r3, #0]
 800333e:	2703      	movs	r7, #3
 8003340:	801f      	strh	r7, [r3, #0]
 8003342:	2012      	movs	r0, #18
 8003344:	8018      	strh	r0, [r3, #0]
 8003346:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003348:	21e8      	movs	r1, #232	; 0xe8
 800334a:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800334c:	2185      	movs	r1, #133	; 0x85
 800334e:	8019      	strh	r1, [r3, #0]
 8003350:	f04f 0910 	mov.w	r9, #16
 8003354:	f8a3 9000 	strh.w	r9, [r3]
 8003358:	2178      	movs	r1, #120	; 0x78
 800335a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800335c:	21cb      	movs	r1, #203	; 0xcb
 800335e:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003360:	f04f 0839 	mov.w	r8, #57	; 0x39
 8003364:	f8a3 8000 	strh.w	r8, [r3]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	8019      	strh	r1, [r3, #0]
 800336c:	801a      	strh	r2, [r3, #0]
 800336e:	2134      	movs	r1, #52	; 0x34
 8003370:	8019      	strh	r1, [r3, #0]
 8003372:	2006      	movs	r0, #6
 8003374:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003376:	21f7      	movs	r1, #247	; 0xf7
 8003378:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800337a:	2120      	movs	r1, #32
 800337c:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800337e:	21ea      	movs	r1, #234	; 0xea
 8003380:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003386:	21b1      	movs	r1, #177	; 0xb1
 8003388:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	f04f 0a1b 	mov.w	sl, #27
 8003390:	f8a3 a000 	strh.w	sl, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003394:	21b6      	movs	r1, #182	; 0xb6
 8003396:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003398:	210a      	movs	r1, #10
 800339a:	8019      	strh	r1, [r3, #0]
 800339c:	21a2      	movs	r1, #162	; 0xa2
 800339e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80033a0:	25c0      	movs	r5, #192	; 0xc0
 80033a2:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80033a4:	2535      	movs	r5, #53	; 0x35
 80033a6:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80033a8:	25c1      	movs	r5, #193	; 0xc1
 80033aa:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80033ac:	f04f 0c11 	mov.w	ip, #17
 80033b0:	f8a3 c000 	strh.w	ip, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80033b4:	25c5      	movs	r5, #197	; 0xc5
 80033b6:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80033b8:	2545      	movs	r5, #69	; 0x45
 80033ba:	801d      	strh	r5, [r3, #0]
 80033bc:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80033be:	25c7      	movs	r5, #199	; 0xc7
 80033c0:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80033c2:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80033c4:	21f2      	movs	r1, #242	; 0xf2
 80033c6:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80033c8:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80033ca:	2526      	movs	r5, #38	; 0x26
 80033cc:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80033ce:	f04f 0e01 	mov.w	lr, #1
 80033d2:	f8a3 e000 	strh.w	lr, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80033d6:	21e0      	movs	r1, #224	; 0xe0
 80033d8:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80033da:	210f      	movs	r1, #15
 80033dc:	8019      	strh	r1, [r3, #0]
 80033de:	801d      	strh	r5, [r3, #0]
 80033e0:	2524      	movs	r5, #36	; 0x24
 80033e2:	801d      	strh	r5, [r3, #0]
 80033e4:	250b      	movs	r5, #11
 80033e6:	801d      	strh	r5, [r3, #0]
 80033e8:	250e      	movs	r5, #14
 80033ea:	801d      	strh	r5, [r3, #0]
 80033ec:	2509      	movs	r5, #9
 80033ee:	801d      	strh	r5, [r3, #0]
 80033f0:	f04f 0b54 	mov.w	fp, #84	; 0x54
 80033f4:	f8a3 b000 	strh.w	fp, [r3]
 80033f8:	f04f 0ba8 	mov.w	fp, #168	; 0xa8
 80033fc:	f8a3 b000 	strh.w	fp, [r3]
 8003400:	f04f 0b46 	mov.w	fp, #70	; 0x46
 8003404:	f8a3 b000 	strh.w	fp, [r3]
 8003408:	f04f 0b0c 	mov.w	fp, #12
 800340c:	f8a3 b000 	strh.w	fp, [r3]
 8003410:	f04f 0b17 	mov.w	fp, #23
 8003414:	f8a3 b000 	strh.w	fp, [r3]
 8003418:	801d      	strh	r5, [r3, #0]
 800341a:	8019      	strh	r1, [r3, #0]
 800341c:	2507      	movs	r5, #7
 800341e:	801d      	strh	r5, [r3, #0]
 8003420:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003422:	f04f 0be1 	mov.w	fp, #225	; 0xe1
 8003426:	f8a4 b000 	strh.w	fp, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	f04f 0b19 	mov.w	fp, #25
 8003430:	f8a3 b000 	strh.w	fp, [r3]
 8003434:	f8a3 a000 	strh.w	sl, [r3]
 8003438:	f04f 0a04 	mov.w	sl, #4
 800343c:	f8a3 a000 	strh.w	sl, [r3]
 8003440:	f8a3 9000 	strh.w	r9, [r3]
 8003444:	801d      	strh	r5, [r3, #0]
 8003446:	252a      	movs	r5, #42	; 0x2a
 8003448:	801d      	strh	r5, [r3, #0]
 800344a:	f04f 0947 	mov.w	r9, #71	; 0x47
 800344e:	f8a3 9000 	strh.w	r9, [r3]
 8003452:	f8a3 8000 	strh.w	r8, [r3]
 8003456:	801f      	strh	r7, [r3, #0]
 8003458:	8018      	strh	r0, [r3, #0]
 800345a:	8018      	strh	r0, [r3, #0]
 800345c:	801e      	strh	r6, [r3, #0]
 800345e:	2038      	movs	r0, #56	; 0x38
 8003460:	8018      	strh	r0, [r3, #0]
 8003462:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003464:	2136      	movs	r1, #54	; 0x36
 8003466:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003468:	21c8      	movs	r1, #200	; 0xc8
 800346a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800346c:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800346e:	801a      	strh	r2, [r3, #0]
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	21ef      	movs	r1, #239	; 0xef
 8003476:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003478:	212b      	movs	r1, #43	; 0x2b
 800347a:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	f8a3 e000 	strh.w	lr, [r3]
 8003484:	223f      	movs	r2, #63	; 0x3f
 8003486:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003488:	223a      	movs	r2, #58	; 0x3a
 800348a:	8022      	strh	r2, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800348c:	2255      	movs	r2, #85	; 0x55
 800348e:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003490:	f8a4 c000 	strh.w	ip, [r4]
    ILI9341_Delay ( 0xAFFf<<2 );
 8003494:	4807      	ldr	r0, [pc, #28]	; (80034b4 <ILI9341_Init+0x1e0>)
 8003496:	f7ff fe0d 	bl	80030b4 <ILI9341_Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800349a:	2329      	movs	r3, #41	; 0x29
 800349c:	8023      	strh	r3, [r4, #0]
}
 800349e:	e72e      	b.n	80032fe <ILI9341_Init+0x2a>
 80034a0:	40011400 	.word	0x40011400
 80034a4:	200011d0 	.word	0x200011d0
 80034a8:	20000624 	.word	0x20000624
 80034ac:	20000622 	.word	0x20000622
 80034b0:	60020000 	.word	0x60020000
 80034b4:	0002bffc 	.word	0x0002bffc
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80034b8:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 80034bc:	23cf      	movs	r3, #207	; 0xcf
 80034be:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <ILI9341_Init+0x32c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	26c1      	movs	r6, #193	; 0xc1
 80034c8:	801e      	strh	r6, [r3, #0]
 80034ca:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80034ce:	f8a3 e000 	strh.w	lr, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80034d2:	21ed      	movs	r1, #237	; 0xed
 80034d4:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80034d6:	2164      	movs	r1, #100	; 0x64
 80034d8:	8019      	strh	r1, [r3, #0]
 80034da:	2103      	movs	r1, #3
 80034dc:	8019      	strh	r1, [r3, #0]
 80034de:	2112      	movs	r1, #18
 80034e0:	8019      	strh	r1, [r3, #0]
 80034e2:	2081      	movs	r0, #129	; 0x81
 80034e4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80034e6:	20e8      	movs	r0, #232	; 0xe8
 80034e8:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80034ea:	2085      	movs	r0, #133	; 0x85
 80034ec:	8018      	strh	r0, [r3, #0]
 80034ee:	2010      	movs	r0, #16
 80034f0:	8018      	strh	r0, [r3, #0]
 80034f2:	2078      	movs	r0, #120	; 0x78
 80034f4:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80034f6:	20cb      	movs	r0, #203	; 0xcb
 80034f8:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80034fa:	2039      	movs	r0, #57	; 0x39
 80034fc:	8018      	strh	r0, [r3, #0]
 80034fe:	252c      	movs	r5, #44	; 0x2c
 8003500:	801d      	strh	r5, [r3, #0]
 8003502:	801a      	strh	r2, [r3, #0]
 8003504:	2034      	movs	r0, #52	; 0x34
 8003506:	8018      	strh	r0, [r3, #0]
 8003508:	2002      	movs	r0, #2
 800350a:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800350c:	27f7      	movs	r7, #247	; 0xf7
 800350e:	8027      	strh	r7, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003510:	2720      	movs	r7, #32
 8003512:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003514:	27ea      	movs	r7, #234	; 0xea
 8003516:	8027      	strh	r7, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003518:	801a      	strh	r2, [r3, #0]
 800351a:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800351c:	27c0      	movs	r7, #192	; 0xc0
 800351e:	8027      	strh	r7, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003520:	2721      	movs	r7, #33	; 0x21
 8003522:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003524:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003526:	2711      	movs	r7, #17
 8003528:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800352a:	26c5      	movs	r6, #197	; 0xc5
 800352c:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800352e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8003532:	f8a3 c000 	strh.w	ip, [r3]
 8003536:	2633      	movs	r6, #51	; 0x33
 8003538:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800353a:	2636      	movs	r6, #54	; 0x36
 800353c:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800353e:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003540:	263a      	movs	r6, #58	; 0x3a
 8003542:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003544:	2655      	movs	r6, #85	; 0x55
 8003546:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003548:	26b1      	movs	r6, #177	; 0xb1
 800354a:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800354c:	801a      	strh	r2, [r3, #0]
 800354e:	f04f 0917 	mov.w	r9, #23
 8003552:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003556:	26b6      	movs	r6, #182	; 0xb6
 8003558:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800355a:	260a      	movs	r6, #10
 800355c:	801e      	strh	r6, [r3, #0]
 800355e:	26a2      	movs	r6, #162	; 0xa2
 8003560:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003562:	26f6      	movs	r6, #246	; 0xf6
 8003564:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003566:	2601      	movs	r6, #1
 8003568:	801e      	strh	r6, [r3, #0]
 800356a:	f8a3 e000 	strh.w	lr, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 800356e:	f04f 0ef2 	mov.w	lr, #242	; 0xf2
 8003572:	f8a4 e000 	strh.w	lr, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003576:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003578:	f04f 0e26 	mov.w	lr, #38	; 0x26
 800357c:	f8a4 e000 	strh.w	lr, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003580:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003582:	26e0      	movs	r6, #224	; 0xe0
 8003584:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003586:	f04f 08d0 	mov.w	r8, #208	; 0xd0
 800358a:	f8a3 8000 	strh.w	r8, [r3]
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	8018      	strh	r0, [r3, #0]
 8003592:	f04f 0e07 	mov.w	lr, #7
 8003596:	f8a3 e000 	strh.w	lr, [r3]
 800359a:	260b      	movs	r6, #11
 800359c:	801e      	strh	r6, [r3, #0]
 800359e:	261a      	movs	r6, #26
 80035a0:	801e      	strh	r6, [r3, #0]
 80035a2:	2631      	movs	r6, #49	; 0x31
 80035a4:	801e      	strh	r6, [r3, #0]
 80035a6:	2654      	movs	r6, #84	; 0x54
 80035a8:	801e      	strh	r6, [r3, #0]
 80035aa:	2640      	movs	r6, #64	; 0x40
 80035ac:	801e      	strh	r6, [r3, #0]
 80035ae:	2629      	movs	r6, #41	; 0x29
 80035b0:	801e      	strh	r6, [r3, #0]
 80035b2:	8019      	strh	r1, [r3, #0]
 80035b4:	8019      	strh	r1, [r3, #0]
 80035b6:	8019      	strh	r1, [r3, #0]
 80035b8:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80035bc:	21e1      	movs	r1, #225	; 0xe1
 80035be:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80035c0:	f8a3 8000 	strh.w	r8, [r3]
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	8018      	strh	r0, [r3, #0]
 80035c8:	f8a3 e000 	strh.w	lr, [r3]
 80035cc:	2205      	movs	r2, #5
 80035ce:	801a      	strh	r2, [r3, #0]
 80035d0:	2225      	movs	r2, #37	; 0x25
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	f8a3 c000 	strh.w	ip, [r3]
 80035d8:	2244      	movs	r2, #68	; 0x44
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	2245      	movs	r2, #69	; 0x45
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	221c      	movs	r2, #28
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	2118      	movs	r1, #24
 80035e6:	8019      	strh	r1, [r3, #0]
 80035e8:	2116      	movs	r1, #22
 80035ea:	8019      	strh	r1, [r3, #0]
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	221d      	movs	r2, #29
 80035f0:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80035f2:	8027      	strh	r7, [r4, #0]
    ILI9341_Delay ( 0xAFFf<<2 );
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <ILI9341_Init+0x330>)
 80035f6:	f7ff fd5d 	bl	80030b4 <ILI9341_Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80035fa:	8026      	strh	r6, [r4, #0]
 80035fc:	8025      	strh	r5, [r4, #0]
}
 80035fe:	e67e      	b.n	80032fe <ILI9341_Init+0x2a>
 8003600:	60020000 	.word	0x60020000
 8003604:	0002bffc 	.word	0x0002bffc

08003608 <XPT2046_DelayUS>:




static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8003608:	b082      	sub	sp, #8
 800360a:	9001      	str	r0, [sp, #4]
	uint32_t i;
	for ( i = 0; i < ulCount; i ++ )
 800360c:	9b01      	ldr	r3, [sp, #4]
 800360e:	b123      	cbz	r3, 800361a <XPT2046_DelayUS+0x12>
 8003610:	2300      	movs	r3, #0
 8003612:	3301      	adds	r3, #1
 8003614:	9a01      	ldr	r2, [sp, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d8fb      	bhi.n	8003612 <XPT2046_DelayUS+0xa>
	{
		uint8_t uc = 12;     //����ֵΪ12����Լ��1΢��
		while ( uc -- );     //��1΢��
	}
}
 800361a:	b002      	add	sp, #8
 800361c:	4770      	bx	lr
	...

08003620 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8003620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003624:	4607      	mov	r7, r0
	uint8_t i;
	XPT2046_MOSI_0();	
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <XPT2046_WriteCMD+0x54>)
 8003628:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800362c:	611a      	str	r2, [r3, #16]
	XPT2046_CLK_LOW();
 800362e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003632:	611a      	str	r2, [r3, #16]
 8003634:	2407      	movs	r4, #7
		if( ( ucCmd >> ( 7 - i ) ) & 0x01 )
		{
			XPT2046_MOSI_1()
		}else
		{
			XPT2046_MOSI_0();
 8003636:	461d      	mov	r5, r3
 8003638:	f44f 2880 	mov.w	r8, #262144	; 0x40000
		}
	  XPT2046_DelayUS ( 5 );
 800363c:	2605      	movs	r6, #5
		if( ( ucCmd >> ( 7 - i ) ) & 0x01 )
 800363e:	fa47 f304 	asr.w	r3, r7, r4
 8003642:	f013 0f01 	tst.w	r3, #1
			XPT2046_MOSI_1()
 8003646:	bf1a      	itte	ne
 8003648:	2304      	movne	r3, #4
 800364a:	612b      	strne	r3, [r5, #16]
			XPT2046_MOSI_0();
 800364c:	f8c5 8010 	streq.w	r8, [r5, #16]
	  XPT2046_DelayUS ( 5 );
 8003650:	4630      	mov	r0, r6
 8003652:	f7ff ffd9 	bl	8003608 <XPT2046_DelayUS>
		XPT2046_CLK_HIGH();
 8003656:	2301      	movs	r3, #1
 8003658:	612b      	str	r3, [r5, #16]
	  XPT2046_DelayUS ( 5 );
 800365a:	4630      	mov	r0, r6
 800365c:	f7ff ffd4 	bl	8003608 <XPT2046_DelayUS>
		XPT2046_CLK_LOW();
 8003660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003664:	612b      	str	r3, [r5, #16]
	for ( i = 0; i < 8; i ++ ) 
 8003666:	3c01      	subs	r4, #1
 8003668:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800366c:	d1e7      	bne.n	800363e <XPT2046_WriteCMD+0x1e>
	}
	
}
 800366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003672:	bf00      	nop
 8003674:	40011800 	.word	0x40011800

08003678 <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD ( void ) 
{
 8003678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	uint16_t usBuf=0, usTemp;
	XPT2046_MOSI_0();
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <XPT2046_ReadCMD+0x40>)
 800367e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003682:	611a      	str	r2, [r3, #16]
	XPT2046_CLK_HIGH();
 8003684:	2201      	movs	r2, #1
 8003686:	611a      	str	r2, [r3, #16]
 8003688:	250b      	movs	r5, #11
	uint16_t usBuf=0, usTemp;
 800368a:	2400      	movs	r4, #0
	for ( i=0;i<12;i++ ) 
	{
		XPT2046_CLK_LOW();    
 800368c:	461e      	mov	r6, r3
 800368e:	f44f 3880 	mov.w	r8, #65536	; 0x10000
		usTemp = XPT2046_MISO();
 8003692:	2708      	movs	r7, #8
		XPT2046_CLK_LOW();    
 8003694:	f8c6 8010 	str.w	r8, [r6, #16]
		usTemp = XPT2046_MISO();
 8003698:	4639      	mov	r1, r7
 800369a:	4630      	mov	r0, r6
 800369c:	f7fe fc42 	bl	8001f24 <HAL_GPIO_ReadPin>
		usBuf |= usTemp << ( 11 - i );
 80036a0:	40a8      	lsls	r0, r5
 80036a2:	4304      	orrs	r4, r0
 80036a4:	b2a4      	uxth	r4, r4
		XPT2046_CLK_HIGH();
 80036a6:	2301      	movs	r3, #1
 80036a8:	6133      	str	r3, [r6, #16]
	for ( i=0;i<12;i++ ) 
 80036aa:	3d01      	subs	r5, #1
 80036ac:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80036b0:	d1f0      	bne.n	8003694 <XPT2046_ReadCMD+0x1c>
	}
	return usBuf;
}
 80036b2:	4620      	mov	r0, r4
 80036b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b8:	40011800 	.word	0x40011800

080036bc <XPT2046_Init>:
{
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036be:	b087      	sub	sp, #28
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <XPT2046_Init+0x90>)
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c8:	619a      	str	r2, [r3, #24]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80036d0:	9200      	str	r2, [sp, #0]
 80036d2:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	619a      	str	r2, [r3, #24]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Pin=XPT2046_SPI_CLK_PIN;
 80036e6:	2401      	movs	r4, #1
 80036e8:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH ;	  
 80036ea:	2603      	movs	r6, #3
 80036ec:	9605      	str	r6, [sp, #20]
  GPIO_InitStructure.Mode=GPIO_MODE_OUTPUT_PP;
 80036ee:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(XPT2046_SPI_CLK_PORT, &GPIO_InitStructure);
 80036f0:	4d17      	ldr	r5, [pc, #92]	; (8003750 <XPT2046_Init+0x94>)
 80036f2:	a902      	add	r1, sp, #8
 80036f4:	4628      	mov	r0, r5
 80036f6:	f7fe facb 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = XPT2046_SPI_MOSI_PIN;
 80036fa:	2304      	movs	r3, #4
 80036fc:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(XPT2046_SPI_MOSI_PORT, &GPIO_InitStructure);
 80036fe:	a902      	add	r1, sp, #8
 8003700:	4628      	mov	r0, r5
 8003702:	f7fe fac5 	bl	8001c90 <HAL_GPIO_Init>
	GPIO_InitStructure.Pin = XPT2046_SPI_CS_PIN; 
 8003706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800370a:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH ;
 800370c:	9605      	str	r6, [sp, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;      
 800370e:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(XPT2046_SPI_CS_PORT, &GPIO_InitStructure); 
 8003710:	4f10      	ldr	r7, [pc, #64]	; (8003754 <XPT2046_Init+0x98>)
 8003712:	a902      	add	r1, sp, #8
 8003714:	4638      	mov	r0, r7
 8003716:	f7fe fabb 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = XPT2046_SPI_MISO_PIN; 
 800371a:	2308      	movs	r3, #8
 800371c:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH ;
 800371e:	9605      	str	r6, [sp, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;  //��������
 8003720:	2600      	movs	r6, #0
 8003722:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8003724:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(XPT2046_SPI_MISO_PORT, &GPIO_InitStructure);
 8003726:	eb0d 0103 	add.w	r1, sp, r3
 800372a:	4628      	mov	r0, r5
 800372c:	f7fe fab0 	bl	8001c90 <HAL_GPIO_Init>
  XPT2046_CS_DISABLE();		
 8003730:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003734:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pin = XPT2046_PENIRQ_GPIO_PIN;       
 8003736:	2310      	movs	r3, #16
 8003738:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;  //��������
 800373a:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800373c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(XPT2046_PENIRQ_GPIO_PORT, &GPIO_InitStructure);
 800373e:	a902      	add	r1, sp, #8
 8003740:	4628      	mov	r0, r5
 8003742:	f7fe faa5 	bl	8001c90 <HAL_GPIO_Init>
}
 8003746:	b007      	add	sp, #28
 8003748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000
 8003750:	40011800 	.word	0x40011800
 8003754:	40011400 	.word	0x40011400

08003758 <XPT2046_Get_TouchedPoint>:
	}   	
	return 0;    	
}

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	b08b      	sub	sp, #44	; 0x2c
 800375e:	4683      	mov	fp, r0
 8003760:	468a      	mov	sl, r1
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  //����X��Y���ж�β���
 8003762:	466e      	mov	r6, sp
 8003764:	2228      	movs	r2, #40	; 0x28
 8003766:	2100      	movs	r1, #0
 8003768:	4630      	mov	r0, r6
 800376a:	f028 feb3 	bl	802c4d4 <memset>
	uint8_t ucCount = 0, i;
 800376e:	2400      	movs	r4, #0
	XPT2046_WriteCMD ( ucChannel );
 8003770:	f04f 0990 	mov.w	r9, #144	; 0x90
	XPT2046_DelayUS ( 1 ); 
 8003774:	f04f 0801 	mov.w	r8, #1
	}	while ( ( XPT2046_PENIRQ_Read() == XPT2046_PENIRQ_ActiveLevel ) && ( ucCount < 10 ) );//�û����������ʱ��TP_INT_IN�ź�Ϊ�� ���� ucCount<10
 8003778:	4f6a      	ldr	r7, [pc, #424]	; (8003924 <XPT2046_Get_TouchedPoint+0x1cc>)
	XPT2046_WriteCMD ( ucChannel );
 800377a:	4648      	mov	r0, r9
 800377c:	f7ff ff50 	bl	8003620 <XPT2046_WriteCMD>
  return 	XPT2046_ReadCMD ();
 8003780:	f7ff ff7a 	bl	8003678 <XPT2046_ReadCMD>
 8003784:	4605      	mov	r5, r0
	XPT2046_DelayUS ( 1 ); 
 8003786:	4640      	mov	r0, r8
 8003788:	f7ff ff3e 	bl	8003608 <XPT2046_DelayUS>
	XPT2046_WriteCMD ( ucChannel );
 800378c:	20d0      	movs	r0, #208	; 0xd0
 800378e:	f7ff ff47 	bl	8003620 <XPT2046_WriteCMD>
  return 	XPT2046_ReadCMD ();
 8003792:	f7ff ff71 	bl	8003678 <XPT2046_ReadCMD>
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8003796:	f826 5b02 	strh.w	r5, [r6], #2
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 800379a:	8270      	strh	r0, [r6, #18]
		ucCount ++;  
 800379c:	3401      	adds	r4, #1
 800379e:	b2e4      	uxtb	r4, r4
	}	while ( ( XPT2046_PENIRQ_Read() == XPT2046_PENIRQ_ActiveLevel ) && ( ucCount < 10 ) );//�û����������ʱ��TP_INT_IN�ź�Ϊ�� ���� ucCount<10
 80037a0:	2110      	movs	r1, #16
 80037a2:	4638      	mov	r0, r7
 80037a4:	f7fe fbbe 	bl	8001f24 <HAL_GPIO_ReadPin>
 80037a8:	b980      	cbnz	r0, 80037cc <XPT2046_Get_TouchedPoint+0x74>
 80037aa:	2c0a      	cmp	r4, #10
 80037ac:	d1e5      	bne.n	800377a <XPT2046_Get_TouchedPoint+0x22>
	if ( XPT2046_PENIRQ_Read() != XPT2046_PENIRQ_ActiveLevel )
 80037ae:	2110      	movs	r1, #16
 80037b0:	485c      	ldr	r0, [pc, #368]	; (8003924 <XPT2046_Get_TouchedPoint+0x1cc>)
 80037b2:	f7fe fbb7 	bl	8001f24 <HAL_GPIO_ReadPin>
 80037b6:	b180      	cbz	r0, 80037da <XPT2046_Get_TouchedPoint+0x82>
		ucXPT2046_TouchFlag = 0;			//�жϱ�־��λ
 80037b8:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <XPT2046_Get_TouchedPoint+0x1d0>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
	if ( ucCount ==10 )		 					
 80037be:	2c0a      	cmp	r4, #10
		pDisplayCoordinate ->x = ( ( pTouchPara[LCD_SCAN_MODE].dX_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dX_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dX );        
		pDisplayCoordinate ->y = ( ( pTouchPara[LCD_SCAN_MODE].dY_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dY_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dY );

  }
	 
	else ucRet = 0;            //�����ȡ�Ĵ�����Ϣ�����򷵻�0
 80037c0:	bf18      	it	ne
 80037c2:	2000      	movne	r0, #0
	if ( ucCount ==10 )		 					
 80037c4:	d009      	beq.n	80037da <XPT2046_Get_TouchedPoint+0x82>
		
  return ucRet;
} 
 80037c6:	b00b      	add	sp, #44	; 0x2c
 80037c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ( XPT2046_PENIRQ_Read() != XPT2046_PENIRQ_ActiveLevel )
 80037cc:	2110      	movs	r1, #16
 80037ce:	4855      	ldr	r0, [pc, #340]	; (8003924 <XPT2046_Get_TouchedPoint+0x1cc>)
 80037d0:	f7fe fba8 	bl	8001f24 <HAL_GPIO_ReadPin>
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d0f2      	beq.n	80037be <XPT2046_Get_TouchedPoint+0x66>
 80037d8:	e7ee      	b.n	80037b8 <XPT2046_Get_TouchedPoint+0x60>
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 80037da:	f9bd c000 	ldrsh.w	ip, [sp]
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 80037de:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
		for ( i = 1; i < 10; i ++ )
 80037e2:	f10d 0012 	add.w	r0, sp, #18
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 80037e6:	466b      	mov	r3, sp
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 80037e8:	4664      	mov	r4, ip
 80037ea:	4665      	mov	r5, ip
 80037ec:	e004      	b.n	80037f8 <XPT2046_Get_TouchedPoint+0xa0>
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 80037ee:	4294      	cmp	r4, r2
 80037f0:	bfb8      	it	lt
 80037f2:	4614      	movlt	r4, r2
		for ( i = 1; i < 10; i ++ )
 80037f4:	4283      	cmp	r3, r0
 80037f6:	d005      	beq.n	8003804 <XPT2046_Get_TouchedPoint+0xac>
			if ( sBufferArray[ 0 ] [ i ] < lX_Min )
 80037f8:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 80037fc:	42aa      	cmp	r2, r5
 80037fe:	daf6      	bge.n	80037ee <XPT2046_Get_TouchedPoint+0x96>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8003800:	4615      	mov	r5, r2
 8003802:	e7f7      	b.n	80037f4 <XPT2046_Get_TouchedPoint+0x9c>
		for ( i = 1; i < 10; i ++ )
 8003804:	ae05      	add	r6, sp, #20
 8003806:	f10d 0026 	add.w	r0, sp, #38	; 0x26
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 800380a:	460b      	mov	r3, r1
 800380c:	460a      	mov	r2, r1
 800380e:	e004      	b.n	800381a <XPT2046_Get_TouchedPoint+0xc2>
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8003810:	42bb      	cmp	r3, r7
 8003812:	bfb8      	it	lt
 8003814:	463b      	movlt	r3, r7
		for ( i = 1; i < 10; i ++ )
 8003816:	4286      	cmp	r6, r0
 8003818:	d005      	beq.n	8003826 <XPT2046_Get_TouchedPoint+0xce>
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 800381a:	f936 7f02 	ldrsh.w	r7, [r6, #2]!
 800381e:	4297      	cmp	r7, r2
 8003820:	daf6      	bge.n	8003810 <XPT2046_Get_TouchedPoint+0xb8>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8003822:	463a      	mov	r2, r7
 8003824:	e7f7      	b.n	8003816 <XPT2046_Get_TouchedPoint+0xbe>
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003826:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 800382a:	4460      	add	r0, ip
 800382c:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8003830:	4430      	add	r0, r6
 8003832:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 8003836:	4430      	add	r0, r6
 8003838:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 800383c:	4430      	add	r0, r6
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 800383e:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003842:	4430      	add	r0, r6
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003844:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8003848:	4430      	add	r0, r6
 800384a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800384e:	4430      	add	r0, r6
 8003850:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8003854:	4430      	add	r0, r6
 8003856:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800385a:	4430      	add	r0, r6
 800385c:	1b40      	subs	r0, r0, r5
 800385e:	1b00      	subs	r0, r0, r4
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003860:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8003864:	440c      	add	r4, r1
 8003866:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 800386a:	440c      	add	r4, r1
 800386c:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8003870:	440c      	add	r4, r1
 8003872:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8003876:	440c      	add	r4, r1
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003878:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800387c:	440c      	add	r4, r1
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 800387e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8003882:	440c      	add	r4, r1
 8003884:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8003888:	440c      	add	r4, r1
 800388a:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 800388e:	440c      	add	r4, r1
 8003890:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
 8003894:	440c      	add	r4, r1
 8003896:	1aa4      	subs	r4, r4, r2
 8003898:	1ae4      	subs	r4, r4, r3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800389a:	f344 04cf 	sbfx	r4, r4, #3, #16
		pDisplayCoordinate ->x = ( ( pTouchPara[LCD_SCAN_MODE].dX_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dX_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dX );        
 800389e:	4e23      	ldr	r6, [pc, #140]	; (800392c <XPT2046_Get_TouchedPoint+0x1d4>)
 80038a0:	7835      	ldrb	r5, [r6, #0]
 80038a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038a6:	00ef      	lsls	r7, r5, #3
 80038a8:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80038ac:	f340 00cf 	sbfx	r0, r0, #3, #16
 80038b0:	f7fc fe38 	bl	8000524 <__aeabi_i2f>
 80038b4:	4680      	mov	r8, r0
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fc fe34 	bl	8000524 <__aeabi_i2f>
 80038bc:	4604      	mov	r4, r0
 80038be:	f85a 1007 	ldr.w	r1, [sl, r7]
 80038c2:	4640      	mov	r0, r8
 80038c4:	f7fc fcc0 	bl	8000248 <__aeabi_fmul>
 80038c8:	4607      	mov	r7, r0
 80038ca:	6869      	ldr	r1, [r5, #4]
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7fc fcbb 	bl	8000248 <__aeabi_fmul>
 80038d2:	4601      	mov	r1, r0
 80038d4:	4638      	mov	r0, r7
 80038d6:	f7fc fd71 	bl	80003bc <__addsf3>
 80038da:	68a9      	ldr	r1, [r5, #8]
 80038dc:	f7fc fd6e 	bl	80003bc <__addsf3>
 80038e0:	f7fc fe74 	bl	80005cc <__aeabi_f2iz>
 80038e4:	f8ab 0000 	strh.w	r0, [fp]
		pDisplayCoordinate ->y = ( ( pTouchPara[LCD_SCAN_MODE].dY_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dY_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dY );
 80038e8:	7833      	ldrb	r3, [r6, #0]
 80038ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038ee:	eb0a 0ac3 	add.w	sl, sl, r3, lsl #3
 80038f2:	f8da 100c 	ldr.w	r1, [sl, #12]
 80038f6:	4640      	mov	r0, r8
 80038f8:	f7fc fca6 	bl	8000248 <__aeabi_fmul>
 80038fc:	4605      	mov	r5, r0
 80038fe:	f8da 1010 	ldr.w	r1, [sl, #16]
 8003902:	4620      	mov	r0, r4
 8003904:	f7fc fca0 	bl	8000248 <__aeabi_fmul>
 8003908:	4601      	mov	r1, r0
 800390a:	4628      	mov	r0, r5
 800390c:	f7fc fd56 	bl	80003bc <__addsf3>
 8003910:	f8da 1014 	ldr.w	r1, [sl, #20]
 8003914:	f7fc fd52 	bl	80003bc <__addsf3>
 8003918:	f7fc fe58 	bl	80005cc <__aeabi_f2iz>
 800391c:	f8ab 0002 	strh.w	r0, [fp, #2]
	uint8_t ucRet = 1;           //���������򷵻�0
 8003920:	2001      	movs	r0, #1
 8003922:	e750      	b.n	80037c6 <XPT2046_Get_TouchedPoint+0x6e>
 8003924:	40011800 	.word	0x40011800
 8003928:	200011d2 	.word	0x200011d2
 800392c:	20000624 	.word	0x20000624

08003930 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	4605      	mov	r5, r0
	if(disp_flush_enabled) {
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <disp_flush+0x54>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b91b      	cbnz	r3, 8003942 <disp_flush+0x12>
		HAL_DMA_Start(&hdma_memtomem_dma1_channel1,(uint32_t)color_p,(uint32_t)0x60020000,size);
		HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, HAL_DMA_FULL_TRANSFER, 100);
	}
    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
	 lv_disp_flush_ready(disp_drv);
 800393a:	4628      	mov	r0, r5
 800393c:	f01c fd74 	bl	8020428 <lv_disp_flush_ready>
}
 8003940:	bd70      	pop	{r4, r5, r6, pc}
 8003942:	460c      	mov	r4, r1
 8003944:	4616      	mov	r6, r2
		ILI9341_OpenWindow2(area->x1,area->y1,area->x2,area->y2);
 8003946:	88cb      	ldrh	r3, [r1, #6]
 8003948:	888a      	ldrh	r2, [r1, #4]
 800394a:	8849      	ldrh	r1, [r1, #2]
 800394c:	8820      	ldrh	r0, [r4, #0]
 800394e:	f7ff fc85 	bl	800325c <ILI9341_OpenWindow2>
		uint32_t size = (area->x2 - area->x1 + 1) * (area->y2 - area->y1 + 1);
 8003952:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8003956:	f9b4 3000 	ldrsh.w	r3, [r4]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8003960:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8003964:	1a5b      	subs	r3, r3, r1
 8003966:	3301      	adds	r3, #1
		HAL_DMA_Start(&hdma_memtomem_dma1_channel1,(uint32_t)color_p,(uint32_t)0x60020000,size);
 8003968:	4c07      	ldr	r4, [pc, #28]	; (8003988 <disp_flush+0x58>)
 800396a:	fb02 3303 	mla	r3, r2, r3, r3
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <disp_flush+0x5c>)
 8003970:	4631      	mov	r1, r6
 8003972:	4620      	mov	r0, r4
 8003974:	f7fd fc52 	bl	800121c <HAL_DMA_Start>
		HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, HAL_DMA_FULL_TRANSFER, 100);
 8003978:	2264      	movs	r2, #100	; 0x64
 800397a:	2100      	movs	r1, #0
 800397c:	4620      	mov	r0, r4
 800397e:	f7fd fd5d 	bl	800143c <HAL_DMA_PollForTransfer>
 8003982:	e7da      	b.n	800393a <disp_flush+0xa>
 8003984:	200006ec 	.word	0x200006ec
 8003988:	20000814 	.word	0x20000814
 800398c:	60020000 	.word	0x60020000

08003990 <lv_port_disp_init>:
{
 8003990:	b538      	push	{r3, r4, r5, lr}
	ILI9341_Init();
 8003992:	f7ff fc9f 	bl	80032d4 <ILI9341_Init>
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 8003996:	4d0c      	ldr	r5, [pc, #48]	; (80039c8 <lv_port_disp_init+0x38>)
 8003998:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800399c:	2200      	movs	r2, #0
 800399e:	490b      	ldr	r1, [pc, #44]	; (80039cc <lv_port_disp_init+0x3c>)
 80039a0:	4628      	mov	r0, r5
 80039a2:	f01c fc4d 	bl	8020240 <lv_disp_draw_buf_init>
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 80039a6:	4c0a      	ldr	r4, [pc, #40]	; (80039d0 <lv_port_disp_init+0x40>)
 80039a8:	4620      	mov	r0, r4
 80039aa:	f01c fc21 	bl	80201f0 <lv_disp_drv_init>
    disp_drv.hor_res = MY_DISP_HOR_RES;
 80039ae:	23f0      	movs	r3, #240	; 0xf0
 80039b0:	8023      	strh	r3, [r4, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 80039b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80039b6:	8063      	strh	r3, [r4, #2]
    disp_drv.flush_cb = disp_flush;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <lv_port_disp_init+0x44>)
 80039ba:	6163      	str	r3, [r4, #20]
    disp_drv.draw_buf = &draw_buf_dsc_1;
 80039bc:	60e5      	str	r5, [r4, #12]
    lv_disp_drv_register(&disp_drv);
 80039be:	4620      	mov	r0, r4
 80039c0:	f01c fc4c 	bl	802025c <lv_disp_drv_register>
}
 80039c4:	bd38      	pop	{r3, r4, r5, pc}
 80039c6:	bf00      	nop
 80039c8:	200024e4 	.word	0x200024e4
 80039cc:	200011d4 	.word	0x200011d4
 80039d0:	20002494 	.word	0x20002494
 80039d4:	08003931 	.word	0x08003931

080039d8 <touchpad_read>:
	XPT2046_Init();
}

/*Will be called by the library to read the touchpad*/
static void touchpad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)
{
 80039d8:	b530      	push	{r4, r5, lr}
 80039da:	b083      	sub	sp, #12
 80039dc:	460c      	mov	r4, r1
/*Return true is the touchpad is pressed*/
static bool touchpad_is_pressed(void)
{
    /*Your code comes here*/
	strType_XPT2046_Coordinate strDisplayCoordinate;
	if( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ))
 80039de:	490f      	ldr	r1, [pc, #60]	; (8003a1c <touchpad_read+0x44>)
 80039e0:	4668      	mov	r0, sp
 80039e2:	f7ff feb9 	bl	8003758 <XPT2046_Get_TouchedPoint>
    if(touchpad_is_pressed()) {
 80039e6:	b950      	cbnz	r0, 80039fe <touchpad_read+0x26>
        data->state = LV_INDEV_STATE_REL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73a3      	strb	r3, [r4, #14]
    data->point.x = last_x;
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <touchpad_read+0x48>)
 80039ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f2:	8023      	strh	r3, [r4, #0]
    data->point.y = last_y;
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <touchpad_read+0x4c>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	8063      	strh	r3, [r4, #2]
}
 80039fa:	b003      	add	sp, #12
 80039fc:	bd30      	pop	{r4, r5, pc}
/*Get the x and y coordinates if the touchpad is pressed*/
static void touchpad_get_xy(lv_coord_t * x, lv_coord_t * y)
{
    /*Your code comes here*/
	static strType_XPT2046_Coordinate cinfo={-1,-1,-1,-1};; // x,y,last x,last y
	XPT2046_Get_TouchedPoint(&cinfo,strXPT2046_TouchPara);
 80039fe:	4d0a      	ldr	r5, [pc, #40]	; (8003a28 <touchpad_read+0x50>)
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <touchpad_read+0x44>)
 8003a02:	4628      	mov	r0, r5
 8003a04:	f7ff fea8 	bl	8003758 <XPT2046_Get_TouchedPoint>

    (*x) = cinfo.x;
 8003a08:	882a      	ldrh	r2, [r5, #0]
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <touchpad_read+0x48>)
 8003a0c:	801a      	strh	r2, [r3, #0]
    (*y) = cinfo.y;
 8003a0e:	886a      	ldrh	r2, [r5, #2]
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <touchpad_read+0x4c>)
 8003a12:	801a      	strh	r2, [r3, #0]
        data->state = LV_INDEV_STATE_PR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73a3      	strb	r3, [r4, #14]
 8003a18:	e7e8      	b.n	80039ec <touchpad_read+0x14>
 8003a1a:	bf00      	nop
 8003a1c:	2000062c 	.word	0x2000062c
 8003a20:	20002524 	.word	0x20002524
 8003a24:	20002526 	.word	0x20002526
 8003a28:	200006f0 	.word	0x200006f0

08003a2c <lv_port_indev_init>:
{
 8003a2c:	b510      	push	{r4, lr}
	XPT2046_Init();
 8003a2e:	f7ff fe45 	bl	80036bc <XPT2046_Init>
    lv_indev_drv_init(&indev_drv);
 8003a32:	4c07      	ldr	r4, [pc, #28]	; (8003a50 <lv_port_indev_init+0x24>)
 8003a34:	4620      	mov	r0, r4
 8003a36:	f01c fd0e 	bl	8020456 <lv_indev_drv_init>
    indev_drv.type = LV_INDEV_TYPE_POINTER;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	7023      	strb	r3, [r4, #0]
    indev_drv.read_cb = touchpad_read;
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <lv_port_indev_init+0x28>)
 8003a40:	6063      	str	r3, [r4, #4]
    indev_touchpad = lv_indev_drv_register(&indev_drv);
 8003a42:	4620      	mov	r0, r4
 8003a44:	f01c fd1c 	bl	8020480 <lv_indev_drv_register>
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <lv_port_indev_init+0x2c>)
 8003a4a:	6018      	str	r0, [r3, #0]
}
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	bf00      	nop
 8003a50:	20002500 	.word	0x20002500
 8003a54:	080039d9 	.word	0x080039d9
 8003a58:	20002520 	.word	0x20002520

08003a5c <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8003a5c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8003a5e:	4603      	mov	r3, r0
 8003a60:	b108      	cbz	r0, 8003a66 <lv_disp_get_scr_act+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8003a62:	6918      	ldr	r0, [r3, #16]
}
 8003a64:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8003a66:	f01c fca1 	bl	80203ac <lv_disp_get_default>
    if(!disp) {
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d1f8      	bne.n	8003a62 <lv_disp_get_scr_act+0x6>
 8003a70:	e7f8      	b.n	8003a64 <lv_disp_get_scr_act+0x8>

08003a72 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8003a72:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8003a74:	4603      	mov	r3, r0
 8003a76:	b108      	cbz	r0, 8003a7c <lv_disp_get_scr_prev+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8003a78:	6958      	ldr	r0, [r3, #20]
}
 8003a7a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8003a7c:	f01c fc96 	bl	80203ac <lv_disp_get_default>
    if(!disp) {
 8003a80:	4603      	mov	r3, r0
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d1f8      	bne.n	8003a78 <lv_disp_get_scr_prev+0x6>
 8003a86:	e7f8      	b.n	8003a7a <lv_disp_get_scr_prev+0x8>

08003a88 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8003a88:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	b108      	cbz	r0, 8003a92 <lv_disp_get_layer_top+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8003a8e:	69d8      	ldr	r0, [r3, #28]
}
 8003a90:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8003a92:	f01c fc8b 	bl	80203ac <lv_disp_get_default>
    if(!disp) {
 8003a96:	4603      	mov	r3, r0
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d1f8      	bne.n	8003a8e <lv_disp_get_layer_top+0x6>
 8003a9c:	e7f8      	b.n	8003a90 <lv_disp_get_layer_top+0x8>

08003a9e <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8003a9e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	b108      	cbz	r0, 8003aa8 <lv_disp_get_layer_sys+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8003aa4:	6a18      	ldr	r0, [r3, #32]
}
 8003aa6:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8003aa8:	f01c fc80 	bl	80203ac <lv_disp_get_default>
    if(!disp) {
 8003aac:	4603      	mov	r3, r0
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d1f8      	bne.n	8003aa4 <lv_disp_get_layer_sys+0x6>
 8003ab2:	e7f8      	b.n	8003aa6 <lv_disp_get_layer_sys+0x8>

08003ab4 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8003ab4:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	b108      	cbz	r0, 8003abe <lv_disp_get_theme+0xa>
    return disp->theme;
}
 8003aba:	6898      	ldr	r0, [r3, #8]
 8003abc:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 8003abe:	f01c fc75 	bl	80203ac <lv_disp_get_default>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	e7f9      	b.n	8003aba <lv_disp_get_theme+0x6>

08003ac6 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 8003ac6:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8003ac8:	4603      	mov	r3, r0
 8003aca:	b130      	cbz	r0, 8003ada <lv_disp_is_invalidation_enabled+0x14>
    if(!disp) {
        LV_LOG_WARN("no display registered");
        return false;
    }

    return (disp->inv_en_cnt > 0);
 8003acc:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	bfd4      	ite	le
 8003ad4:	2000      	movle	r0, #0
 8003ad6:	2001      	movgt	r0, #1
}
 8003ad8:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8003ada:	f01c fc67 	bl	80203ac <lv_disp_get_default>
    if(!disp) {
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d1f3      	bne.n	8003acc <lv_disp_is_invalidation_enabled+0x6>
        return false;
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	e7f7      	b.n	8003ad8 <lv_disp_is_invalidation_enabled+0x12>

08003ae8 <lv_obj_get_event_dsc>:

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8003ae8:	6880      	ldr	r0, [r0, #8]
 8003aea:	b158      	cbz	r0, 8003b04 <lv_obj_get_event_dsc+0x1c>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8003aec:	7e83      	ldrb	r3, [r0, #26]
 8003aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af2:	428b      	cmp	r3, r1
 8003af4:	d905      	bls.n	8003b02 <lv_obj_get_event_dsc+0x1a>

    return &obj->spec_attr->event_dsc[id];
 8003af6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003afa:	68c0      	ldr	r0, [r0, #12]
 8003afc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003b00:	4770      	bx	lr
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8003b02:	2000      	movs	r0, #0
}
 8003b04:	4770      	bx	lr

08003b06 <lv_obj_event_base>:
{
 8003b06:	b510      	push	{r4, lr}
 8003b08:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 8003b0a:	b140      	cbz	r0, 8003b1e <lv_obj_event_base+0x18>
    else base = class_p->base_class;
 8003b0c:	6800      	ldr	r0, [r0, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 8003b0e:	b148      	cbz	r0, 8003b24 <lv_obj_event_base+0x1e>
 8003b10:	6903      	ldr	r3, [r0, #16]
 8003b12:	b94b      	cbnz	r3, 8003b28 <lv_obj_event_base+0x22>
 8003b14:	6800      	ldr	r0, [r0, #0]
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d1fa      	bne.n	8003b10 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	e00e      	b.n	8003b3c <lv_obj_event_base+0x36>
    if(class_p == NULL) base = e->current_target->class_p;
 8003b1e:	684b      	ldr	r3, [r1, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	e7f4      	b.n	8003b0e <lv_obj_event_base+0x8>
    if(base == NULL) return LV_RES_OK;
 8003b24:	2001      	movs	r0, #1
 8003b26:	e009      	b.n	8003b3c <lv_obj_event_base+0x36>
    e->user_data = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60e3      	str	r3, [r4, #12]
    base->event_cb(base, e);
 8003b2c:	6903      	ldr	r3, [r0, #16]
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 8003b32:	7e20      	ldrb	r0, [r4, #24]
 8003b34:	f080 0001 	eor.w	r0, r0, #1
    if(base == NULL) return LV_RES_OK;
 8003b38:	f000 0001 	and.w	r0, r0, #1
}
 8003b3c:	bd10      	pop	{r4, pc}
	...

08003b40 <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4604      	mov	r4, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8003b44:	f000 fc82 	bl	800444c <lv_indev_get_act>
    if(indev_act) {
 8003b48:	b168      	cbz	r0, 8003b66 <event_send_core+0x26>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8003b4a:	6800      	ldr	r0, [r0, #0]
 8003b4c:	6883      	ldr	r3, [r0, #8]
 8003b4e:	b10b      	cbz	r3, 8003b54 <event_send_core+0x14>
 8003b50:	7a21      	ldrb	r1, [r4, #8]
 8003b52:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8003b54:	7e23      	ldrb	r3, [r4, #24]
 8003b56:	f013 0602 	ands.w	r6, r3, #2
 8003b5a:	f040 80c3 	bne.w	8003ce4 <event_send_core+0x1a4>
        if(e->deleted) return LV_RES_INV;
 8003b5e:	f013 0f01 	tst.w	r3, #1
 8003b62:	f040 80c0 	bne.w	8003ce6 <event_send_core+0x1a6>
    }

    lv_res_t res = LV_RES_OK;
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8003b66:	2100      	movs	r1, #0
 8003b68:	6860      	ldr	r0, [r4, #4]
 8003b6a:	f7ff ffbd 	bl	8003ae8 <lv_obj_get_event_dsc>

    uint32_t i = 0;
    while(event_dsc && res == LV_RES_OK) {
 8003b6e:	4603      	mov	r3, r0
 8003b70:	b330      	cbz	r0, 8003bc0 <event_send_core+0x80>
    uint32_t i = 0;
 8003b72:	2500      	movs	r5, #0
 8003b74:	e014      	b.n	8003ba0 <event_send_core+0x60>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
            e->user_data = event_dsc->user_data;
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	60e2      	str	r2, [r4, #12]
            event_dsc->cb(e);
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8003b80:	7e23      	ldrb	r3, [r4, #24]
 8003b82:	f013 0602 	ands.w	r6, r3, #2
 8003b86:	f040 80b0 	bne.w	8003cea <event_send_core+0x1aa>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8003b8a:	f013 0f01 	tst.w	r3, #1
 8003b8e:	f040 80aa 	bne.w	8003ce6 <event_send_core+0x1a6>
        }

        i++;
 8003b92:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8003b94:	4629      	mov	r1, r5
 8003b96:	6860      	ldr	r0, [r4, #4]
 8003b98:	f7ff ffa6 	bl	8003ae8 <lv_obj_get_event_dsc>
    while(event_dsc && res == LV_RES_OK) {
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	b178      	cbz	r0, 8003bc0 <event_send_core+0x80>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2a00      	cmp	r2, #0
 8003ba4:	d0f5      	beq.n	8003b92 <event_send_core+0x52>
 8003ba6:	7a1a      	ldrb	r2, [r3, #8]
 8003ba8:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8003bac:	2900      	cmp	r1, #0
 8003bae:	daf0      	bge.n	8003b92 <event_send_core+0x52>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8003bb0:	2a80      	cmp	r2, #128	; 0x80
 8003bb2:	d0e0      	beq.n	8003b76 <event_send_core+0x36>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8003bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb8:	7a21      	ldrb	r1, [r4, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8003bba:	428a      	cmp	r2, r1
 8003bbc:	d1e9      	bne.n	8003b92 <event_send_core+0x52>
 8003bbe:	e7da      	b.n	8003b76 <event_send_core+0x36>
    }

    res = lv_obj_event_base(NULL, e);
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7ff ff9f 	bl	8003b06 <lv_obj_event_base>

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8003bc8:	4606      	mov	r6, r0
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f000 808b 	beq.w	8003ce6 <event_send_core+0x1a6>
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6860      	ldr	r0, [r4, #4]
 8003bd4:	f7ff ff88 	bl	8003ae8 <lv_obj_get_event_dsc>

    i = 0;
    while(event_dsc && res == LV_RES_OK) {
 8003bd8:	4603      	mov	r3, r0
 8003bda:	b328      	cbz	r0, 8003c28 <event_send_core+0xe8>
 8003bdc:	2e01      	cmp	r6, #1
 8003bde:	f040 8082 	bne.w	8003ce6 <event_send_core+0x1a6>
 8003be2:	2500      	movs	r5, #0
 8003be4:	e012      	b.n	8003c0c <event_send_core+0xcc>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
            e->user_data = event_dsc->user_data;
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	60e2      	str	r2, [r4, #12]
            event_dsc->cb(e);
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4620      	mov	r0, r4
 8003bee:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8003bf0:	7e23      	ldrb	r3, [r4, #24]
 8003bf2:	f013 0202 	ands.w	r2, r3, #2
 8003bf6:	d176      	bne.n	8003ce6 <event_send_core+0x1a6>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 8003bf8:	f013 0f01 	tst.w	r3, #1
 8003bfc:	d177      	bne.n	8003cee <event_send_core+0x1ae>
        }

        i++;
 8003bfe:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8003c00:	4629      	mov	r1, r5
 8003c02:	6860      	ldr	r0, [r4, #4]
 8003c04:	f7ff ff70 	bl	8003ae8 <lv_obj_get_event_dsc>
    while(event_dsc && res == LV_RES_OK) {
 8003c08:	4603      	mov	r3, r0
 8003c0a:	b178      	cbz	r0, 8003c2c <event_send_core+0xec>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	2a00      	cmp	r2, #0
 8003c10:	d0f5      	beq.n	8003bfe <event_send_core+0xbe>
 8003c12:	7a19      	ldrb	r1, [r3, #8]
 8003c14:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	dbf0      	blt.n	8003bfe <event_send_core+0xbe>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8003c1c:	2900      	cmp	r1, #0
 8003c1e:	d0e2      	beq.n	8003be6 <event_send_core+0xa6>
 8003c20:	7a22      	ldrb	r2, [r4, #8]
 8003c22:	428a      	cmp	r2, r1
 8003c24:	d1eb      	bne.n	8003bfe <event_send_core+0xbe>
 8003c26:	e7de      	b.n	8003be6 <event_send_core+0xa6>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8003c28:	2e01      	cmp	r6, #1
 8003c2a:	d15c      	bne.n	8003ce6 <event_send_core+0x1a6>
 8003c2c:	6860      	ldr	r0, [r4, #4]
 8003c2e:	6843      	ldr	r3, [r0, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d05e      	beq.n	8003cf2 <event_send_core+0x1b2>
    return res;
}

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 8003c34:	7e23      	ldrb	r3, [r4, #24]
 8003c36:	f013 0f04 	tst.w	r3, #4
 8003c3a:	d15e      	bne.n	8003cfa <event_send_core+0x1ba>

    /*Event codes that always bubble*/
    switch(e->code) {
 8003c3c:	7a23      	ldrb	r3, [r4, #8]
 8003c3e:	3b23      	subs	r3, #35	; 0x23
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d80a      	bhi.n	8003c5a <event_send_core+0x11a>
        e->current_target = e->current_target->parent;
 8003c44:	6863      	ldr	r3, [r4, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	6063      	str	r3, [r4, #4]
        res = event_send_core(e);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ff78 	bl	8003b40 <event_send_core>
        if(e->stop_processing) return LV_RES_OK;
 8003c50:	2801      	cmp	r0, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2600      	movne	r6, #0
 8003c56:	2601      	moveq	r6, #1
 8003c58:	e045      	b.n	8003ce6 <event_send_core+0x1a6>
        default:
            break;
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8003c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c5e:	f002 feb7 	bl	80069d0 <lv_obj_has_flag>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d049      	beq.n	8003cfa <event_send_core+0x1ba>

    switch(e->code) {
 8003c66:	7a23      	ldrb	r3, [r4, #8]
 8003c68:	3b11      	subs	r3, #17
 8003c6a:	2b1b      	cmp	r3, #27
 8003c6c:	d8ea      	bhi.n	8003c44 <event_send_core+0x104>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <event_send_core+0x134>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003cf7 	.word	0x08003cf7
 8003c78:	08003cf7 	.word	0x08003cf7
 8003c7c:	08003cf7 	.word	0x08003cf7
 8003c80:	08003cf7 	.word	0x08003cf7
 8003c84:	08003cf7 	.word	0x08003cf7
 8003c88:	08003cf7 	.word	0x08003cf7
 8003c8c:	08003cf7 	.word	0x08003cf7
 8003c90:	08003cf7 	.word	0x08003cf7
 8003c94:	08003cf7 	.word	0x08003cf7
 8003c98:	08003cf7 	.word	0x08003cf7
 8003c9c:	08003cf7 	.word	0x08003cf7
 8003ca0:	08003c45 	.word	0x08003c45
 8003ca4:	08003c45 	.word	0x08003c45
 8003ca8:	08003cf7 	.word	0x08003cf7
 8003cac:	08003c45 	.word	0x08003c45
 8003cb0:	08003c45 	.word	0x08003c45
 8003cb4:	08003cf7 	.word	0x08003cf7
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003cf7 	.word	0x08003cf7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003c45 	.word	0x08003c45
 8003cc8:	08003c45 	.word	0x08003c45
 8003ccc:	08003c45 	.word	0x08003c45
 8003cd0:	08003c45 	.word	0x08003c45
 8003cd4:	08003cf7 	.word	0x08003cf7
 8003cd8:	08003cf7 	.word	0x08003cf7
 8003cdc:	08003c45 	.word	0x08003c45
 8003ce0:	08003cf7 	.word	0x08003cf7
        if(e->stop_processing) return LV_RES_OK;
 8003ce4:	2601      	movs	r6, #1
}
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
            if(e->stop_processing) return LV_RES_OK;
 8003cea:	2601      	movs	r6, #1
 8003cec:	e7fb      	b.n	8003ce6 <event_send_core+0x1a6>
            if(e->deleted) return LV_RES_INV;
 8003cee:	4616      	mov	r6, r2
 8003cf0:	e7f9      	b.n	8003ce6 <event_send_core+0x1a6>
    res = lv_obj_event_base(NULL, e);
 8003cf2:	2601      	movs	r6, #1
 8003cf4:	e7f7      	b.n	8003ce6 <event_send_core+0x1a6>
    switch(e->code) {
 8003cf6:	2601      	movs	r6, #1
 8003cf8:	e7f5      	b.n	8003ce6 <event_send_core+0x1a6>
    res = lv_obj_event_base(NULL, e);
 8003cfa:	2601      	movs	r6, #1
 8003cfc:	e7f3      	b.n	8003ce6 <event_send_core+0x1a6>
 8003cfe:	bf00      	nop

08003d00 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
 8003d00:	b1d8      	cbz	r0, 8003d3a <lv_event_send+0x3a>
{
 8003d02:	b510      	push	{r4, lr}
 8003d04:	b088      	sub	sp, #32
    e.target = obj;
 8003d06:	9001      	str	r0, [sp, #4]
    e.current_target = obj;
 8003d08:	9002      	str	r0, [sp, #8]
    e.code = event_code;
 8003d0a:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8003d0e:	2100      	movs	r1, #0
 8003d10:	9104      	str	r1, [sp, #16]
    e.param = param;
 8003d12:	9205      	str	r2, [sp, #20]
    e.deleted = 0;
 8003d14:	f89d 301c 	ldrb.w	r3, [sp, #28]
    e.stop_processing = 0;
 8003d18:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 8003d1c:	f361 0341 	bfi	r3, r1, #1, #1
 8003d20:	f88d 301c 	strb.w	r3, [sp, #28]
    e.prev = event_head;
 8003d24:	4c06      	ldr	r4, [pc, #24]	; (8003d40 <lv_event_send+0x40>)
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	9306      	str	r3, [sp, #24]
    event_head = &e;
 8003d2a:	a801      	add	r0, sp, #4
 8003d2c:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8003d2e:	f7ff ff07 	bl	8003b40 <event_send_core>
    event_head = e.prev;
 8003d32:	9b06      	ldr	r3, [sp, #24]
 8003d34:	6023      	str	r3, [r4, #0]
}
 8003d36:	b008      	add	sp, #32
 8003d38:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8003d3a:	2001      	movs	r0, #1
}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20002528 	.word	0x20002528

08003d44 <lv_event_get_target>:
}
 8003d44:	6800      	ldr	r0, [r0, #0]
 8003d46:	4770      	bx	lr

08003d48 <lv_event_get_current_target>:
}
 8003d48:	6840      	ldr	r0, [r0, #4]
 8003d4a:	4770      	bx	lr

08003d4c <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 8003d4c:	7a00      	ldrb	r0, [r0, #8]
}
 8003d4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003d52:	4770      	bx	lr

08003d54 <lv_event_get_param>:
}
 8003d54:	6900      	ldr	r0, [r0, #16]
 8003d56:	4770      	bx	lr

08003d58 <lv_event_get_user_data>:
}
 8003d58:	68c0      	ldr	r0, [r0, #12]
 8003d5a:	4770      	bx	lr

08003d5c <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <_lv_event_mark_deleted+0x24>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8003d60:	b93b      	cbnz	r3, 8003d72 <_lv_event_mark_deleted+0x16>
}
 8003d62:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8003d64:	7e1a      	ldrb	r2, [r3, #24]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8003d6c:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f7      	beq.n	8003d62 <_lv_event_mark_deleted+0x6>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	4282      	cmp	r2, r0
 8003d76:	d0f5      	beq.n	8003d64 <_lv_event_mark_deleted+0x8>
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4282      	cmp	r2, r0
 8003d7c:	d1f6      	bne.n	8003d6c <_lv_event_mark_deleted+0x10>
 8003d7e:	e7f1      	b.n	8003d64 <_lv_event_mark_deleted+0x8>
 8003d80:	20002528 	.word	0x20002528

08003d84 <lv_obj_add_event_cb>:
{
 8003d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d88:	4604      	mov	r4, r0
 8003d8a:	460f      	mov	r7, r1
 8003d8c:	4616      	mov	r6, r2
 8003d8e:	461d      	mov	r5, r3
    lv_obj_allocate_spec_attr(obj);
 8003d90:	f003 f846 	bl	8006e20 <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8003d94:	68a3      	ldr	r3, [r4, #8]
 8003d96:	7e98      	ldrb	r0, [r3, #26]
 8003d98:	1c42      	adds	r2, r0, #1
 8003d9a:	f362 0005 	bfi	r0, r2, #0, #6
 8003d9e:	7698      	strb	r0, [r3, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8003da0:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                               obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8003da4:	f898 001a 	ldrb.w	r0, [r8, #26]
 8003da8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8003dac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003db0:	0081      	lsls	r1, r0, #2
 8003db2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003db6:	f01d fd91 	bl	80218dc <lv_mem_realloc>
 8003dba:	f8c8 000c 	str.w	r0, [r8, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8003dbe:	68a3      	ldr	r3, [r4, #8]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	b352      	cbz	r2, 8003e1a <lv_obj_add_event_cb+0x96>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8003dc4:	7e9b      	ldrb	r3, [r3, #26]
 8003dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003dce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003dd2:	f843 7c0c 	str.w	r7, [r3, #-12]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 8003dd6:	68a2      	ldr	r2, [r4, #8]
 8003dd8:	7e93      	ldrb	r3, [r2, #26]
 8003dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dde:	68d2      	ldr	r2, [r2, #12]
 8003de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003de4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003de8:	f803 6c04 	strb.w	r6, [r3, #-4]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8003dec:	68a2      	ldr	r2, [r4, #8]
 8003dee:	7e93      	ldrb	r3, [r2, #26]
 8003df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003dfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003dfe:	f843 5c08 	str.w	r5, [r3, #-8]
    return &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
 8003e02:	68a2      	ldr	r2, [r4, #8]
 8003e04:	7e93      	ldrb	r3, [r2, #26]
 8003e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	3b0c      	subs	r3, #12
 8003e12:	68d0      	ldr	r0, [r2, #12]
}
 8003e14:	4418      	add	r0, r3
 8003e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8003e1a:	e7fe      	b.n	8003e1a <lv_obj_add_event_cb+0x96>

08003e1c <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 8003e1c:	7a03      	ldrb	r3, [r0, #8]
 8003e1e:	3b01      	subs	r3, #1
    if(e->code == LV_EVENT_PRESSED ||
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b0f      	cmp	r3, #15
    return e->param;
 8003e24:	bf94      	ite	ls
 8003e26:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 8003e28:	2000      	movhi	r0, #0
}
 8003e2a:	4770      	bx	lr

08003e2c <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8003e2c:	7a03      	ldrb	r3, [r0, #8]
 8003e2e:	3b14      	subs	r3, #20
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b05      	cmp	r3, #5
    return e->param;
 8003e34:	bf94      	ite	ls
 8003e36:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 8003e38:	2000      	movhi	r0, #0
}
 8003e3a:	4770      	bx	lr

08003e3c <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8003e3c:	7a03      	ldrb	r3, [r0, #8]
 8003e3e:	2b13      	cmp	r3, #19
 8003e40:	d000      	beq.n	8003e44 <lv_event_set_ext_draw_size+0x8>
}
 8003e42:	4770      	bx	lr
    return e->param;
 8003e44:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 8003e46:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	bfb8      	it	lt
 8003e4e:	4619      	movlt	r1, r3
 8003e50:	8011      	strh	r1, [r2, #0]
}
 8003e52:	e7f6      	b.n	8003e42 <lv_event_set_ext_draw_size+0x6>

08003e54 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	4605      	mov	r5, r0
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f01c fb37 	bl	80204cc <lv_indev_get_next>
    while(indev) {
 8003e5e:	b1d8      	cbz	r0, 8003e98 <get_indev+0x44>
 8003e60:	4604      	mov	r4, r0
    lv_indev_t * indev_group = NULL;
 8003e62:	2700      	movs	r7, #0
    lv_indev_t * indev_encoder = NULL;
 8003e64:	463e      	mov	r6, r7
 8003e66:	e004      	b.n	8003e72 <get_indev+0x1e>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f01c fb2f 	bl	80204cc <lv_indev_get_next>
    while(indev) {
 8003e6e:	4604      	mov	r4, r0
 8003e70:	b160      	cbz	r0, 8003e8c <get_indev+0x38>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8003e72:	4620      	mov	r0, r4
 8003e74:	f000 faf0 	bl	8004458 <lv_indev_get_type>
        if(indev->group == g) {
 8003e78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e7a:	42ab      	cmp	r3, r5
 8003e7c:	d1f4      	bne.n	8003e68 <get_indev+0x14>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8003e7e:	2802      	cmp	r0, #2
 8003e80:	d00f      	beq.n	8003ea2 <get_indev+0x4e>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8003e82:	4627      	mov	r7, r4
 8003e84:	2804      	cmp	r0, #4
 8003e86:	bf08      	it	eq
 8003e88:	4626      	moveq	r6, r4
 8003e8a:	e7ed      	b.n	8003e68 <get_indev+0x14>
    }

    if(indev_encoder) return indev_encoder;
 8003e8c:	b10e      	cbz	r6, 8003e92 <get_indev+0x3e>
    if(indev_group) return indev_group;

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
}
 8003e8e:	4630      	mov	r0, r6
 8003e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(indev_group) return indev_group;
 8003e92:	b10f      	cbz	r7, 8003e98 <get_indev+0x44>
 8003e94:	463e      	mov	r6, r7
 8003e96:	e7fa      	b.n	8003e8e <get_indev+0x3a>
    return lv_indev_get_next(NULL);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f01c fb17 	bl	80204cc <lv_indev_get_next>
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	e7f5      	b.n	8003e8e <get_indev+0x3a>
 8003ea2:	4626      	mov	r6, r4
 8003ea4:	e7f3      	b.n	8003e8e <get_indev+0x3a>

08003ea6 <focus_next_core>:
{
 8003ea6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(group->frozen) return focus_changed;
 8003eaa:	7f03      	ldrb	r3, [r0, #28]
 8003eac:	f013 0f01 	tst.w	r3, #1
 8003eb0:	d16f      	bne.n	8003f92 <focus_next_core+0xec>
 8003eb2:	4607      	mov	r7, r0
 8003eb4:	468b      	mov	fp, r1
 8003eb6:	4691      	mov	r9, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 8003eb8:	68c5      	ldr	r5, [r0, #12]
    bool can_begin           = true;
 8003eba:	f04f 0a01 	mov.w	sl, #1
    lv_obj_t ** obj_sentinel = NULL;
 8003ebe:	2600      	movs	r6, #0
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8003ec0:	46d0      	mov	r8, sl
        if(obj_next == NULL) {
 8003ec2:	b1f5      	cbz	r5, 8003f02 <focus_next_core+0x5c>
        if(obj_sentinel == NULL) {
 8003ec4:	2e00      	cmp	r6, #0
 8003ec6:	bf08      	it	eq
 8003ec8:	462e      	moveq	r6, r5
            obj_next = move(&group->obj_ll, obj_next);
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4638      	mov	r0, r7
 8003ece:	47c8      	blx	r9
 8003ed0:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return focus_changed;
 8003ed2:	42b0      	cmp	r0, r6
 8003ed4:	d065      	beq.n	8003fa2 <focus_next_core+0xfc>
        if(obj_next == NULL) continue;
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	d0f3      	beq.n	8003ec2 <focus_next_core+0x1c>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8003eda:	6828      	ldr	r0, [r5, #0]
 8003edc:	f002 fd85 	bl	80069ea <lv_obj_get_state>
 8003ee0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003ee4:	d1ed      	bne.n	8003ec2 <focus_next_core+0x1c>
        lv_obj_t * parent = *obj_next;
 8003ee6:	682c      	ldr	r4, [r5, #0]
        while(parent) {
 8003ee8:	b31c      	cbz	r4, 8003f32 <focus_next_core+0x8c>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8003eea:	4641      	mov	r1, r8
 8003eec:	4620      	mov	r0, r4
 8003eee:	f002 fd6f 	bl	80069d0 <lv_obj_has_flag>
 8003ef2:	b9b8      	cbnz	r0, 8003f24 <focus_next_core+0x7e>
            parent = lv_obj_get_parent(parent);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f007 fbb9 	bl	800b66c <lv_obj_get_parent>
        while(parent) {
 8003efa:	4604      	mov	r4, r0
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d1f4      	bne.n	8003eea <focus_next_core+0x44>
 8003f00:	e017      	b.n	8003f32 <focus_next_core+0x8c>
            if(group->wrap || obj_sentinel == NULL) {
 8003f02:	7f3b      	ldrb	r3, [r7, #28]
 8003f04:	f013 0f08 	tst.w	r3, #8
 8003f08:	d101      	bne.n	8003f0e <focus_next_core+0x68>
 8003f0a:	2e00      	cmp	r6, #0
 8003f0c:	d146      	bne.n	8003f9c <focus_next_core+0xf6>
                if(!can_begin) return focus_changed;
 8003f0e:	f1ba 0f00 	cmp.w	sl, #0
 8003f12:	d040      	beq.n	8003f96 <focus_next_core+0xf0>
                obj_next  = begin(&group->obj_ll);
 8003f14:	4638      	mov	r0, r7
 8003f16:	47d8      	blx	fp
 8003f18:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	d04d      	beq.n	8003fba <focus_next_core+0x114>
                can_begin = false;
 8003f1e:	f04f 0a00 	mov.w	sl, #0
 8003f22:	e7d8      	b.n	8003ed6 <focus_next_core+0x30>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8003f24:	b12c      	cbz	r4, 8003f32 <focus_next_core+0x8c>
 8003f26:	4641      	mov	r1, r8
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f002 fd51 	bl	80069d0 <lv_obj_has_flag>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d1c7      	bne.n	8003ec2 <focus_next_core+0x1c>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	d037      	beq.n	8003fa8 <focus_next_core+0x102>
    if(group->obj_focus) {
 8003f38:	b18b      	cbz	r3, 8003f5e <focus_next_core+0xb8>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8003f3a:	681c      	ldr	r4, [r3, #0]
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	f7ff ff89 	bl	8003e54 <get_indev>
 8003f42:	4602      	mov	r2, r0
 8003f44:	210f      	movs	r1, #15
 8003f46:	4620      	mov	r0, r4
 8003f48:	f7ff feda 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8003f4c:	2801      	cmp	r0, #1
 8003f4e:	d002      	beq.n	8003f56 <focus_next_core+0xb0>
 8003f50:	f04f 0a00 	mov.w	sl, #0
 8003f54:	e01f      	b.n	8003f96 <focus_next_core+0xf0>
        lv_obj_invalidate(*group->obj_focus);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	f004 f80d 	bl	8007f78 <lv_obj_invalidate>
    group->obj_focus = obj_next;
 8003f5e:	60fd      	str	r5, [r7, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8003f60:	682c      	ldr	r4, [r5, #0]
 8003f62:	4638      	mov	r0, r7
 8003f64:	f7ff ff76 	bl	8003e54 <get_indev>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	210e      	movs	r1, #14
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff fec7 	bl	8003d00 <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 8003f72:	2801      	cmp	r0, #1
 8003f74:	d002      	beq.n	8003f7c <focus_next_core+0xd6>
 8003f76:	f04f 0a00 	mov.w	sl, #0
 8003f7a:	e00c      	b.n	8003f96 <focus_next_core+0xf0>
    lv_obj_invalidate(*group->obj_focus);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	f003 fffa 	bl	8007f78 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	b193      	cbz	r3, 8003fae <focus_next_core+0x108>
 8003f88:	4638      	mov	r0, r7
 8003f8a:	4798      	blx	r3
    return focus_changed;
 8003f8c:	f04f 0a01 	mov.w	sl, #1
 8003f90:	e001      	b.n	8003f96 <focus_next_core+0xf0>
    if(group->frozen) return focus_changed;
 8003f92:	f04f 0a00 	mov.w	sl, #0
}
 8003f96:	4650      	mov	r0, sl
 8003f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return focus_changed;
 8003f9c:	f04f 0a00 	mov.w	sl, #0
 8003fa0:	e7f9      	b.n	8003f96 <focus_next_core+0xf0>
            if(obj_next == obj_sentinel) return focus_changed;
 8003fa2:	f04f 0a00 	mov.w	sl, #0
 8003fa6:	e7f6      	b.n	8003f96 <focus_next_core+0xf0>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8003fa8:	f04f 0a00 	mov.w	sl, #0
 8003fac:	e7f3      	b.n	8003f96 <focus_next_core+0xf0>
    return focus_changed;
 8003fae:	f04f 0a01 	mov.w	sl, #1
 8003fb2:	e7f0      	b.n	8003f96 <focus_next_core+0xf0>
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8003fb4:	f04f 0a00 	mov.w	sl, #0
 8003fb8:	e7ed      	b.n	8003f96 <focus_next_core+0xf0>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d0fa      	beq.n	8003fb4 <focus_next_core+0x10e>
                obj_next  = begin(&group->obj_ll);
 8003fbe:	4606      	mov	r6, r0
                can_begin = false;
 8003fc0:	f04f 0a00 	mov.w	sl, #0
 8003fc4:	e789      	b.n	8003eda <focus_next_core+0x34>
	...

08003fc8 <_lv_group_init>:
{
 8003fc8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8003fca:	2120      	movs	r1, #32
 8003fcc:	4801      	ldr	r0, [pc, #4]	; (8003fd4 <_lv_group_init+0xc>)
 8003fce:	f01d fa8c 	bl	80214ea <_lv_ll_init>
}
 8003fd2:	bd08      	pop	{r3, pc}
 8003fd4:	20002878 	.word	0x20002878

08003fd8 <lv_group_get_default>:
}
 8003fd8:	4b01      	ldr	r3, [pc, #4]	; (8003fe0 <lv_group_get_default+0x8>)
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	2000252c 	.word	0x2000252c

08003fe4 <lv_group_focus_next>:
{
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8003fe8:	4a05      	ldr	r2, [pc, #20]	; (8004000 <lv_group_focus_next+0x1c>)
 8003fea:	4906      	ldr	r1, [pc, #24]	; (8004004 <lv_group_focus_next+0x20>)
 8003fec:	f7ff ff5b 	bl	8003ea6 <focus_next_core>
    if(group->edge_cb) {
 8003ff0:	6963      	ldr	r3, [r4, #20]
 8003ff2:	b11b      	cbz	r3, 8003ffc <lv_group_focus_next+0x18>
        if(!focus_changed)
 8003ff4:	b910      	cbnz	r0, 8003ffc <lv_group_focus_next+0x18>
            group->edge_cb(group, true);
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	4798      	blx	r3
}
 8003ffc:	bd10      	pop	{r4, pc}
 8003ffe:	bf00      	nop
 8004000:	0802160d 	.word	0x0802160d
 8004004:	080215fd 	.word	0x080215fd

08004008 <lv_group_focus_prev>:
{
 8004008:	b510      	push	{r4, lr}
 800400a:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 800400c:	4a05      	ldr	r2, [pc, #20]	; (8004024 <lv_group_focus_prev+0x1c>)
 800400e:	4906      	ldr	r1, [pc, #24]	; (8004028 <lv_group_focus_prev+0x20>)
 8004010:	f7ff ff49 	bl	8003ea6 <focus_next_core>
    if(group->edge_cb) {
 8004014:	6963      	ldr	r3, [r4, #20]
 8004016:	b11b      	cbz	r3, 8004020 <lv_group_focus_prev+0x18>
        if(!focus_changed)
 8004018:	b910      	cbnz	r0, 8004020 <lv_group_focus_prev+0x18>
            group->edge_cb(group, false);
 800401a:	2100      	movs	r1, #0
 800401c:	4620      	mov	r0, r4
 800401e:	4798      	blx	r3
}
 8004020:	bd10      	pop	{r4, pc}
 8004022:	bf00      	nop
 8004024:	08021615 	.word	0x08021615
 8004028:	08021605 	.word	0x08021605

0800402c <lv_group_refocus>:
{
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8004030:	7f03      	ldrb	r3, [r0, #28]
 8004032:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 8004036:	f043 0308 	orr.w	r3, r3, #8
 800403a:	7703      	strb	r3, [r0, #28]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 800403c:	f013 0f04 	tst.w	r3, #4
 8004040:	d106      	bne.n	8004050 <lv_group_refocus+0x24>
        lv_group_focus_next(g);
 8004042:	f7ff ffcf 	bl	8003fe4 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8004046:	7f23      	ldrb	r3, [r4, #28]
 8004048:	f365 03c3 	bfi	r3, r5, #3, #1
 800404c:	7723      	strb	r3, [r4, #28]
}
 800404e:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8004050:	f7ff ffda 	bl	8004008 <lv_group_focus_prev>
 8004054:	e7f7      	b.n	8004046 <lv_group_refocus+0x1a>

08004056 <lv_group_remove_obj>:
{
 8004056:	b570      	push	{r4, r5, r6, lr}
 8004058:	4605      	mov	r5, r0
    lv_group_t * g = lv_obj_get_group(obj);
 800405a:	f002 fcce 	bl	80069fa <lv_obj_get_group>
    if(g == NULL) return;
 800405e:	b1a0      	cbz	r0, 800408a <lv_group_remove_obj+0x34>
 8004060:	4606      	mov	r6, r0
    if(g->obj_focus && *g->obj_focus == obj) {
 8004062:	68c3      	ldr	r3, [r0, #12]
 8004064:	b113      	cbz	r3, 800406c <lv_group_remove_obj+0x16>
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	42ab      	cmp	r3, r5
 800406a:	d00f      	beq.n	800408c <lv_group_remove_obj+0x36>
    _LV_LL_READ(&g->obj_ll, i) {
 800406c:	4630      	mov	r0, r6
 800406e:	f01d fac5 	bl	80215fc <_lv_ll_get_head>
 8004072:	4604      	mov	r4, r0
 8004074:	b148      	cbz	r0, 800408a <lv_group_remove_obj+0x34>
        if(*i == obj) {
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	42ab      	cmp	r3, r5
 800407a:	d031      	beq.n	80040e0 <lv_group_remove_obj+0x8a>
    _LV_LL_READ(&g->obj_ll, i) {
 800407c:	4621      	mov	r1, r4
 800407e:	4630      	mov	r0, r6
 8004080:	f01d fac4 	bl	802160c <_lv_ll_get_next>
 8004084:	4604      	mov	r4, r0
 8004086:	2800      	cmp	r0, #0
 8004088:	d1f5      	bne.n	8004076 <lv_group_remove_obj+0x20>
}
 800408a:	bd70      	pop	{r4, r5, r6, pc}
        if(g->frozen) g->frozen = 0;
 800408c:	7f03      	ldrb	r3, [r0, #28]
 800408e:	f013 0f01 	tst.w	r3, #1
 8004092:	d003      	beq.n	800409c <lv_group_remove_obj+0x46>
 8004094:	7f03      	ldrb	r3, [r0, #28]
 8004096:	f36f 0300 	bfc	r3, #0, #1
 800409a:	7703      	strb	r3, [r0, #28]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 800409c:	4630      	mov	r0, r6
 800409e:	f01d faad 	bl	80215fc <_lv_ll_get_head>
 80040a2:	68f3      	ldr	r3, [r6, #12]
 80040a4:	4283      	cmp	r3, r0
 80040a6:	d00b      	beq.n	80040c0 <lv_group_remove_obj+0x6a>
            lv_group_refocus(g);
 80040a8:	4630      	mov	r0, r6
 80040aa:	f7ff ffbf 	bl	800402c <lv_group_refocus>
    if(g->obj_focus && *g->obj_focus == obj) {
 80040ae:	68f3      	ldr	r3, [r6, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0db      	beq.n	800406c <lv_group_remove_obj+0x16>
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	42ab      	cmp	r3, r5
        g->obj_focus = NULL;
 80040b8:	bf04      	itt	eq
 80040ba:	2300      	moveq	r3, #0
 80040bc:	60f3      	streq	r3, [r6, #12]
 80040be:	e7d5      	b.n	800406c <lv_group_remove_obj+0x16>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 80040c0:	4630      	mov	r0, r6
 80040c2:	f01d fa9f 	bl	8021604 <_lv_ll_get_tail>
 80040c6:	68f3      	ldr	r3, [r6, #12]
 80040c8:	4283      	cmp	r3, r0
 80040ca:	d1ed      	bne.n	80040a8 <lv_group_remove_obj+0x52>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 80040cc:	681c      	ldr	r4, [r3, #0]
 80040ce:	4630      	mov	r0, r6
 80040d0:	f7ff fec0 	bl	8003e54 <get_indev>
 80040d4:	4602      	mov	r2, r0
 80040d6:	210f      	movs	r1, #15
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff fe11 	bl	8003d00 <lv_event_send>
 80040de:	e7e6      	b.n	80040ae <lv_group_remove_obj+0x58>
            _lv_ll_remove(&g->obj_ll, i);
 80040e0:	4621      	mov	r1, r4
 80040e2:	4630      	mov	r0, r6
 80040e4:	f01d fa47 	bl	8021576 <_lv_ll_remove>
            lv_mem_free(i);
 80040e8:	4620      	mov	r0, r4
 80040ea:	f01d fbdb 	bl	80218a4 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 80040ee:	68ab      	ldr	r3, [r5, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ca      	beq.n	800408a <lv_group_remove_obj+0x34>
 80040f4:	2200      	movs	r2, #0
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	e7c7      	b.n	800408a <lv_group_remove_obj+0x34>

080040fa <lv_group_add_obj>:
    if(group == NULL) return;
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d03a      	beq.n	8004174 <lv_group_add_obj+0x7a>
{
 80040fe:	b570      	push	{r4, r5, r6, lr}
 8004100:	460c      	mov	r4, r1
 8004102:	4605      	mov	r5, r0
    lv_group_remove_obj(obj);
 8004104:	4608      	mov	r0, r1
 8004106:	f7ff ffa6 	bl	8004056 <lv_group_remove_obj>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800410a:	4628      	mov	r0, r5
 800410c:	f01d fa76 	bl	80215fc <_lv_ll_get_head>
 8004110:	4601      	mov	r1, r0
 8004112:	b140      	cbz	r0, 8004126 <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 8004114:	680b      	ldr	r3, [r1, #0]
 8004116:	42a3      	cmp	r3, r4
 8004118:	d01d      	beq.n	8004156 <lv_group_add_obj+0x5c>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 800411a:	4628      	mov	r0, r5
 800411c:	f01d fa76 	bl	802160c <_lv_ll_get_next>
 8004120:	4601      	mov	r1, r0
 8004122:	2800      	cmp	r0, #0
 8004124:	d1f6      	bne.n	8004114 <lv_group_add_obj+0x1a>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8004126:	4620      	mov	r0, r4
 8004128:	f002 fc67 	bl	80069fa <lv_obj_get_group>
    if(group_cur) {
 800412c:	b1b0      	cbz	r0, 800415c <lv_group_add_obj+0x62>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	b11b      	cbz	r3, 800413c <lv_group_add_obj+0x42>
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	42a3      	cmp	r3, r4
 800413a:	d00d      	beq.n	8004158 <lv_group_add_obj+0x5e>
    obj->spec_attr->group_p = group;
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8004140:	4628      	mov	r0, r5
 8004142:	f01d f9f9 	bl	8021538 <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 8004146:	4606      	mov	r6, r0
 8004148:	b178      	cbz	r0, 800416a <lv_group_add_obj+0x70>
    *next = obj;
 800414a:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 800414c:	4628      	mov	r0, r5
 800414e:	f01d fa55 	bl	80215fc <_lv_ll_get_head>
 8004152:	4286      	cmp	r6, r0
 8004154:	d00a      	beq.n	800416c <lv_group_add_obj+0x72>
}
 8004156:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(group_cur);
 8004158:	f7ff ff68 	bl	800402c <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 800415c:	68a3      	ldr	r3, [r4, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ec      	bne.n	800413c <lv_group_add_obj+0x42>
 8004162:	4620      	mov	r0, r4
 8004164:	f002 fe5c 	bl	8006e20 <lv_obj_allocate_spec_attr>
 8004168:	e7e8      	b.n	800413c <lv_group_add_obj+0x42>
    LV_ASSERT_MALLOC(next);
 800416a:	e7fe      	b.n	800416a <lv_group_add_obj+0x70>
        lv_group_refocus(group);
 800416c:	4628      	mov	r0, r5
 800416e:	f7ff ff5d 	bl	800402c <lv_group_refocus>
    LV_LOG_TRACE("finished");
 8004172:	e7f0      	b.n	8004156 <lv_group_add_obj+0x5c>
 8004174:	4770      	bx	lr

08004176 <lv_group_get_focused>:
    if(!group) return NULL;
 8004176:	b118      	cbz	r0, 8004180 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
 8004178:	68c0      	ldr	r0, [r0, #12]
 800417a:	b108      	cbz	r0, 8004180 <lv_group_get_focused+0xa>
    return *group->obj_focus;
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	4770      	bx	lr
}
 8004180:	4770      	bx	lr

08004182 <lv_group_send_data>:
{
 8004182:	b510      	push	{r4, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 8004188:	f7ff fff5 	bl	8004176 <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 800418c:	b168      	cbz	r0, 80041aa <lv_group_send_data+0x28>
 800418e:	4604      	mov	r4, r0
    if(lv_obj_has_state(act, LV_STATE_DISABLED)) return LV_RES_OK;
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	f002 fc2c 	bl	80069ee <lv_obj_has_state>
 8004196:	b110      	cbz	r0, 800419e <lv_group_send_data+0x1c>
 8004198:	2001      	movs	r0, #1
}
 800419a:	b002      	add	sp, #8
 800419c:	bd10      	pop	{r4, pc}
    return lv_event_send(act, LV_EVENT_KEY, &c);
 800419e:	aa01      	add	r2, sp, #4
 80041a0:	210d      	movs	r1, #13
 80041a2:	4620      	mov	r0, r4
 80041a4:	f7ff fdac 	bl	8003d00 <lv_event_send>
 80041a8:	e7f7      	b.n	800419a <lv_group_send_data+0x18>
    if(act == NULL) return LV_RES_OK;
 80041aa:	2001      	movs	r0, #1
 80041ac:	e7f5      	b.n	800419a <lv_group_send_data+0x18>

080041ae <lv_group_set_editing>:
    if(group == NULL) return;
 80041ae:	b1f8      	cbz	r0, 80041f0 <lv_group_set_editing+0x42>
{
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 80041b4:	7f03      	ldrb	r3, [r0, #28]
 80041b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80041ba:	428b      	cmp	r3, r1
 80041bc:	d013      	beq.n	80041e6 <lv_group_set_editing+0x38>
    group->editing     = en_val;
 80041be:	7f03      	ldrb	r3, [r0, #28]
 80041c0:	f361 0341 	bfi	r3, r1, #1, #1
 80041c4:	7703      	strb	r3, [r0, #28]
    lv_obj_t * focused = lv_group_get_focused(group);
 80041c6:	f7ff ffd6 	bl	8004176 <lv_group_get_focused>
    if(focused) {
 80041ca:	4605      	mov	r5, r0
 80041cc:	b158      	cbz	r0, 80041e6 <lv_group_set_editing+0x38>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 80041ce:	68e3      	ldr	r3, [r4, #12]
 80041d0:	681e      	ldr	r6, [r3, #0]
 80041d2:	4620      	mov	r0, r4
 80041d4:	f7ff fe3e 	bl	8003e54 <get_indev>
 80041d8:	4602      	mov	r2, r0
 80041da:	210e      	movs	r1, #14
 80041dc:	4630      	mov	r0, r6
 80041de:	f7ff fd8f 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return;
 80041e2:	2801      	cmp	r0, #1
 80041e4:	d000      	beq.n	80041e8 <lv_group_set_editing+0x3a>
}
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_invalidate(focused);
 80041e8:	4628      	mov	r0, r5
 80041ea:	f003 fec5 	bl	8007f78 <lv_obj_invalidate>
 80041ee:	e7fa      	b.n	80041e6 <lv_group_set_editing+0x38>
 80041f0:	4770      	bx	lr

080041f2 <lv_group_focus_obj>:
    if(obj == NULL) return;
 80041f2:	2800      	cmp	r0, #0
 80041f4:	d047      	beq.n	8004286 <lv_group_focus_obj+0x94>
{
 80041f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f8:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 80041fa:	f002 fbfe 	bl	80069fa <lv_obj_get_group>
    if(g == NULL) return;
 80041fe:	4605      	mov	r5, r0
 8004200:	b118      	cbz	r0, 800420a <lv_group_focus_obj+0x18>
    if(g->frozen != 0) return;
 8004202:	7f03      	ldrb	r3, [r0, #28]
 8004204:	f013 0f01 	tst.w	r3, #1
 8004208:	d000      	beq.n	800420c <lv_group_focus_obj+0x1a>
}
 800420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_group_set_editing(g, false);
 800420c:	2100      	movs	r1, #0
 800420e:	f7ff ffce 	bl	80041ae <lv_group_set_editing>
    _LV_LL_READ(&g->obj_ll, i) {
 8004212:	4628      	mov	r0, r5
 8004214:	f01d f9f2 	bl	80215fc <_lv_ll_get_head>
 8004218:	4604      	mov	r4, r0
 800421a:	2800      	cmp	r0, #0
 800421c:	d0f5      	beq.n	800420a <lv_group_focus_obj+0x18>
        if(*i == obj) {
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	42b3      	cmp	r3, r6
 8004222:	d007      	beq.n	8004234 <lv_group_focus_obj+0x42>
    _LV_LL_READ(&g->obj_ll, i) {
 8004224:	4621      	mov	r1, r4
 8004226:	4628      	mov	r0, r5
 8004228:	f01d f9f0 	bl	802160c <_lv_ll_get_next>
 800422c:	4604      	mov	r4, r0
 800422e:	2800      	cmp	r0, #0
 8004230:	d1f5      	bne.n	800421e <lv_group_focus_obj+0x2c>
 8004232:	e7ea      	b.n	800420a <lv_group_focus_obj+0x18>
            if(g->obj_focus != NULL && obj != *g->obj_focus) {  /*Do not defocus if the same object needs to be focused again*/
 8004234:	68eb      	ldr	r3, [r5, #12]
 8004236:	b183      	cbz	r3, 800425a <lv_group_focus_obj+0x68>
 8004238:	681f      	ldr	r7, [r3, #0]
 800423a:	42b7      	cmp	r7, r6
 800423c:	d00d      	beq.n	800425a <lv_group_focus_obj+0x68>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 800423e:	4628      	mov	r0, r5
 8004240:	f7ff fe08 	bl	8003e54 <get_indev>
 8004244:	4602      	mov	r2, r0
 8004246:	210f      	movs	r1, #15
 8004248:	4638      	mov	r0, r7
 800424a:	f7ff fd59 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 800424e:	2801      	cmp	r0, #1
 8004250:	d1db      	bne.n	800420a <lv_group_focus_obj+0x18>
                lv_obj_invalidate(*g->obj_focus);
 8004252:	68eb      	ldr	r3, [r5, #12]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f003 fe8f 	bl	8007f78 <lv_obj_invalidate>
            g->obj_focus = i;
 800425a:	60ec      	str	r4, [r5, #12]
                if(g->focus_cb) g->focus_cb(g);
 800425c:	692b      	ldr	r3, [r5, #16]
 800425e:	b10b      	cbz	r3, 8004264 <lv_group_focus_obj+0x72>
 8004260:	4628      	mov	r0, r5
 8004262:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 8004264:	68eb      	ldr	r3, [r5, #12]
 8004266:	681c      	ldr	r4, [r3, #0]
 8004268:	4628      	mov	r0, r5
 800426a:	f7ff fdf3 	bl	8003e54 <get_indev>
 800426e:	4602      	mov	r2, r0
 8004270:	210e      	movs	r1, #14
 8004272:	4620      	mov	r0, r4
 8004274:	f7ff fd44 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 8004278:	2801      	cmp	r0, #1
 800427a:	d1c6      	bne.n	800420a <lv_group_focus_obj+0x18>
                lv_obj_invalidate(*g->obj_focus);
 800427c:	68eb      	ldr	r3, [r5, #12]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	f003 fe7a 	bl	8007f78 <lv_obj_invalidate>
 8004284:	e7c1      	b.n	800420a <lv_group_focus_obj+0x18>
 8004286:	4770      	bx	lr

08004288 <lv_group_get_editing>:
    if(!group) return false;
 8004288:	b118      	cbz	r0, 8004292 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800428a:	7f00      	ldrb	r0, [r0, #28]
 800428c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004290:	4770      	bx	lr
    if(!group) return false;
 8004292:	2000      	movs	r0, #0
}
 8004294:	4770      	bx	lr

08004296 <lv_group_get_obj_count>:
{
 8004296:	b508      	push	{r3, lr}
    return _lv_ll_get_len(&group->obj_ll);
 8004298:	f01d f9bf 	bl	802161a <_lv_ll_get_len>
}
 800429c:	bd08      	pop	{r3, pc}
	...

080042a0 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
 80042a0:	7943      	ldrb	r3, [r0, #5]
 80042a2:	f013 0f02 	tst.w	r3, #2
 80042a6:	d01b      	beq.n	80042e0 <indev_proc_reset_query_handler+0x40>
        indev->proc.types.pointer.act_obj           = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	6283      	str	r3, [r0, #40]	; 0x28
        indev->proc.types.pointer.last_obj          = NULL;
 80042ac:	62c3      	str	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.scroll_obj          = NULL;
 80042ae:	6303      	str	r3, [r0, #48]	; 0x30
        indev->proc.long_pr_sent                    = 0;
 80042b0:	7942      	ldrb	r2, [r0, #5]
        indev->proc.pr_timestamp                    = 0;
 80042b2:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
 80042b4:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.scroll_sum.x        = 0;
 80042b6:	8383      	strh	r3, [r0, #28]
        indev->proc.types.pointer.scroll_sum.y        = 0;
 80042b8:	83c3      	strh	r3, [r0, #30]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 80042ba:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
 80042be:	f363 0103 	bfi	r1, r3, #0, #4
 80042c2:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 80042c6:	8403      	strh	r3, [r0, #32]
        indev->proc.types.pointer.scroll_throw_vect.y = 0;
 80042c8:	8443      	strh	r3, [r0, #34]	; 0x22
        indev->proc.types.pointer.gesture_sum.x     = 0;
 80042ca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        indev->proc.types.pointer.gesture_sum.y     = 0;
 80042ce:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.reset_query                     = 0;
 80042d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042d6:	f363 0241 	bfi	r2, r3, #1, #1
 80042da:	7142      	strb	r2, [r0, #5]
        indev_obj_act                               = NULL;
 80042dc:	4a01      	ldr	r2, [pc, #4]	; (80042e4 <indev_proc_reset_query_handler+0x44>)
 80042de:	6013      	str	r3, [r2, #0]
    }
}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20002534 	.word	0x20002534

080042e8 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(_lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 80042e8:	7840      	ldrb	r0, [r0, #1]
 80042ea:	f010 0f02 	tst.w	r0, #2
 80042ee:	d002      	beq.n	80042f6 <indev_reset_check+0xe>
        indev_obj_act = NULL;
 80042f0:	4b02      	ldr	r3, [pc, #8]	; (80042fc <indev_reset_check+0x14>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
 80042f6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80042fa:	4770      	bx	lr
 80042fc:	20002534 	.word	0x20002534

08004300 <indev_proc_release>:
{
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	b083      	sub	sp, #12
 8004306:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 8004308:	7843      	ldrb	r3, [r0, #1]
 800430a:	f013 0f08 	tst.w	r3, #8
 800430e:	d158      	bne.n	80043c2 <indev_proc_release+0xc2>
    indev_obj_act = proc->types.pointer.act_obj;
 8004310:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <indev_proc_release+0x144>)
 8004314:	6018      	str	r0, [r3, #0]
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8004316:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    if(indev_obj_act) {
 8004318:	2800      	cmp	r0, #0
 800431a:	d068      	beq.n	80043ee <indev_proc_release+0xee>
        lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 800431c:	4b4a      	ldr	r3, [pc, #296]	; (8004448 <indev_proc_release+0x148>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2108      	movs	r1, #8
 8004322:	f7ff fced 	bl	8003d00 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8004326:	4620      	mov	r0, r4
 8004328:	f7ff ffde 	bl	80042e8 <indev_reset_check>
 800432c:	2800      	cmp	r0, #0
 800432e:	d165      	bne.n	80043fc <indev_proc_release+0xfc>
        if(scroll_obj == NULL) {
 8004330:	2d00      	cmp	r5, #0
 8004332:	d066      	beq.n	8004402 <indev_proc_release+0x102>
        proc->types.pointer.act_obj = NULL;
 8004334:	2600      	movs	r6, #0
 8004336:	6266      	str	r6, [r4, #36]	; 0x24
        proc->pr_timestamp          = 0;
 8004338:	6466      	str	r6, [r4, #68]	; 0x44
        proc->longpr_rep_timestamp  = 0;
 800433a:	64a6      	str	r6, [r4, #72]	; 0x48
            lv_point_t pivot = { 0, 0 };
 800433c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004340:	f8ad 6006 	strh.w	r6, [sp, #6]
            int16_t zoom = 256;
 8004344:	f44f 7780 	mov.w	r7, #256	; 0x100
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_transform_angle(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8004348:	f04f 0b6d 	mov.w	fp, #109	; 0x6d
 800434c:	46b0      	mov	r8, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800434e:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8004352:	465a      	mov	r2, fp
 8004354:	4641      	mov	r1, r8
 8004356:	4628      	mov	r0, r5
 8004358:	f006 fa46 	bl	800a7e8 <lv_obj_get_style_prop>
                angle += lv_obj_get_style_transform_angle(parent, 0);
 800435c:	4406      	add	r6, r0
 800435e:	fa1f f986 	uxth.w	r9, r6
 8004362:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8004364:	4652      	mov	r2, sl
 8004366:	4641      	mov	r1, r8
 8004368:	4628      	mov	r0, r5
 800436a:	f006 fa3d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800436e:	b200      	sxth	r0, r0
                zoom *= (lv_obj_get_style_transform_zoom(parent, 0) / 256);
 8004370:	2800      	cmp	r0, #0
 8004372:	bfb8      	it	lt
 8004374:	30ff      	addlt	r0, #255	; 0xff
 8004376:	1200      	asrs	r0, r0, #8
 8004378:	fb00 f707 	mul.w	r7, r0, r7
 800437c:	b23f      	sxth	r7, r7
                parent = lv_obj_get_parent(parent);
 800437e:	4628      	mov	r0, r5
 8004380:	f007 f974 	bl	800b66c <lv_obj_get_parent>
            while(parent) {
 8004384:	4605      	mov	r5, r0
 8004386:	2800      	cmp	r0, #0
 8004388:	d1e3      	bne.n	8004352 <indev_proc_release+0x52>
            if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 800438a:	b916      	cbnz	r6, 8004392 <indev_proc_release+0x92>
 800438c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8004390:	d02e      	beq.n	80043f0 <indev_proc_release+0xf0>
                zoom = (256 * 256) / zoom;
 8004392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004396:	fb93 f7f7 	sdiv	r7, r3, r7
                angle = -angle;
 800439a:	f1c9 0900 	rsb	r9, r9, #0
                lv_point_transform(&proc->types.pointer.scroll_throw_vect, angle, zoom, &pivot);
 800439e:	fa0f f989 	sxth.w	r9, r9
 80043a2:	b23f      	sxth	r7, r7
 80043a4:	ab01      	add	r3, sp, #4
 80043a6:	463a      	mov	r2, r7
 80043a8:	4649      	mov	r1, r9
 80043aa:	f104 001c 	add.w	r0, r4, #28
 80043ae:	f01c fd17 	bl	8020de0 <lv_point_transform>
                lv_point_transform(&proc->types.pointer.scroll_throw_vect_ori, angle, zoom, &pivot);
 80043b2:	ab01      	add	r3, sp, #4
 80043b4:	463a      	mov	r2, r7
 80043b6:	4649      	mov	r1, r9
 80043b8:	f104 0020 	add.w	r0, r4, #32
 80043bc:	f01c fd10 	bl	8020de0 <lv_point_transform>
    if(scroll_obj) {
 80043c0:	e016      	b.n	80043f0 <indev_proc_release+0xf0>
        lv_event_send(proc->types.pointer.act_obj, LV_EVENT_PRESS_LOST, indev_act);
 80043c2:	4b21      	ldr	r3, [pc, #132]	; (8004448 <indev_proc_release+0x148>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	2103      	movs	r1, #3
 80043c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80043ca:	f7ff fc99 	bl	8003d00 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff ff8a 	bl	80042e8 <indev_reset_check>
 80043d4:	b990      	cbnz	r0, 80043fc <indev_proc_release+0xfc>
        proc->types.pointer.act_obj  = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	6263      	str	r3, [r4, #36]	; 0x24
        proc->types.pointer.last_obj = NULL;
 80043da:	62a3      	str	r3, [r4, #40]	; 0x28
        proc->pr_timestamp           = 0;
 80043dc:	6463      	str	r3, [r4, #68]	; 0x44
        proc->longpr_rep_timestamp   = 0;
 80043de:	64a3      	str	r3, [r4, #72]	; 0x48
        proc->wait_until_release     = 0;
 80043e0:	7862      	ldrb	r2, [r4, #1]
 80043e2:	f363 02c3 	bfi	r2, r3, #3, #1
 80043e6:	7062      	strb	r2, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 80043e8:	4a16      	ldr	r2, [pc, #88]	; (8004444 <indev_proc_release+0x144>)
 80043ea:	6013      	str	r3, [r2, #0]
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80043ec:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    if(scroll_obj) {
 80043ee:	b12d      	cbz	r5, 80043fc <indev_proc_release+0xfc>
        _lv_indev_scroll_throw_handler(proc);
 80043f0:	4620      	mov	r0, r4
 80043f2:	f001 fcd9 	bl	8005da8 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7ff ff76 	bl	80042e8 <indev_reset_check>
}
 80043fc:	b003      	add	sp, #12
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(proc->long_pr_sent == 0) {
 8004402:	7863      	ldrb	r3, [r4, #1]
 8004404:	f013 0f01 	tst.w	r3, #1
 8004408:	d10b      	bne.n	8004422 <indev_proc_release+0x122>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <indev_proc_release+0x148>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	2104      	movs	r1, #4
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <indev_proc_release+0x144>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	f7ff fc74 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8004418:	4620      	mov	r0, r4
 800441a:	f7ff ff65 	bl	80042e8 <indev_reset_check>
 800441e:	2800      	cmp	r0, #0
 8004420:	d1ec      	bne.n	80043fc <indev_proc_release+0xfc>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <indev_proc_release+0x148>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	2107      	movs	r1, #7
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <indev_proc_release+0x144>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	f7ff fc68 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004430:	4620      	mov	r0, r4
 8004432:	f7ff ff59 	bl	80042e8 <indev_reset_check>
 8004436:	2800      	cmp	r0, #0
 8004438:	d1e0      	bne.n	80043fc <indev_proc_release+0xfc>
        proc->types.pointer.act_obj = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	6263      	str	r3, [r4, #36]	; 0x24
        proc->pr_timestamp          = 0;
 800443e:	6463      	str	r3, [r4, #68]	; 0x44
        proc->longpr_rep_timestamp  = 0;
 8004440:	64a3      	str	r3, [r4, #72]	; 0x48
    if(scroll_obj) {
 8004442:	e7db      	b.n	80043fc <indev_proc_release+0xfc>
 8004444:	20002534 	.word	0x20002534
 8004448:	20002530 	.word	0x20002530

0800444c <lv_indev_get_act>:
}
 800444c:	4b01      	ldr	r3, [pc, #4]	; (8004454 <lv_indev_get_act+0x8>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20002530 	.word	0x20002530

08004458 <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8004458:	b110      	cbz	r0, 8004460 <lv_indev_get_type+0x8>
    return indev->driver->type;
 800445a:	6803      	ldr	r3, [r0, #0]
 800445c:	7818      	ldrb	r0, [r3, #0]
 800445e:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8004460:	2000      	movs	r0, #0
}
 8004462:	4770      	bx	lr

08004464 <lv_indev_reset>:
{
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	460c      	mov	r4, r1
    if(indev) {
 8004468:	b318      	cbz	r0, 80044b2 <lv_indev_reset+0x4e>
 800446a:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
 800446c:	7942      	ldrb	r2, [r0, #5]
 800446e:	f042 0202 	orr.w	r2, r2, #2
 8004472:	7142      	strb	r2, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 8004474:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <lv_indev_reset+0xc0>)
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	4282      	cmp	r2, r0
 800447a:	d006      	beq.n	800448a <lv_indev_reset+0x26>
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	3a01      	subs	r2, #1
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	2a01      	cmp	r2, #1
 8004486:	d904      	bls.n	8004492 <lv_indev_reset+0x2e>
}
 8004488:	bd38      	pop	{r3, r4, r5, pc}
        if(indev_act == indev) indev_obj_act = NULL;
 800448a:	4a27      	ldr	r2, [pc, #156]	; (8004528 <lv_indev_reset+0xc4>)
 800448c:	2100      	movs	r1, #0
 800448e:	6011      	str	r1, [r2, #0]
 8004490:	e7f4      	b.n	800447c <lv_indev_reset+0x18>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8004492:	b1fc      	cbz	r4, 80044d4 <lv_indev_reset+0x70>
 8004494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004496:	42a2      	cmp	r2, r4
 8004498:	d019      	beq.n	80044ce <lv_indev_reset+0x6a>
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 800449a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800449c:	42a2      	cmp	r2, r4
 800449e:	d003      	beq.n	80044a8 <lv_indev_reset+0x44>
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	42a2      	cmp	r2, r4
 80044a4:	d1f0      	bne.n	8004488 <lv_indev_reset+0x24>
 80044a6:	e018      	b.n	80044da <lv_indev_reset+0x76>
                indev->proc.types.pointer.act_obj = NULL;
 80044a8:	2200      	movs	r2, #0
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80044ac:	2c00      	cmp	r4, #0
 80044ae:	d1f7      	bne.n	80044a0 <lv_indev_reset+0x3c>
 80044b0:	e013      	b.n	80044da <lv_indev_reset+0x76>
        lv_indev_t * i = lv_indev_get_next(NULL);
 80044b2:	2000      	movs	r0, #0
 80044b4:	f01c f80a 	bl	80204cc <lv_indev_get_next>
        while(i) {
 80044b8:	4603      	mov	r3, r0
 80044ba:	b120      	cbz	r0, 80044c6 <lv_indev_reset+0x62>
                    i->proc.types.pointer.last_pressed = NULL;
 80044bc:	2500      	movs	r5, #0
 80044be:	e018      	b.n	80044f2 <lv_indev_reset+0x8e>
                    i->proc.types.pointer.act_obj = NULL;
 80044c0:	629d      	str	r5, [r3, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 80044c2:	bb44      	cbnz	r4, 8004516 <lv_indev_reset+0xb2>
 80044c4:	e00e      	b.n	80044e4 <lv_indev_reset+0x80>
        indev_obj_act = NULL;
 80044c6:	4b18      	ldr	r3, [pc, #96]	; (8004528 <lv_indev_reset+0xc4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
}
 80044cc:	e7dc      	b.n	8004488 <lv_indev_reset+0x24>
                indev->proc.types.pointer.last_pressed = NULL;
 80044ce:	2200      	movs	r2, #0
 80044d0:	635a      	str	r2, [r3, #52]	; 0x34
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80044d2:	e7e2      	b.n	800449a <lv_indev_reset+0x36>
                indev->proc.types.pointer.last_pressed = NULL;
 80044d4:	2200      	movs	r2, #0
 80044d6:	635a      	str	r2, [r3, #52]	; 0x34
                indev->proc.types.pointer.act_obj = NULL;
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28
                indev->proc.types.pointer.last_obj = NULL;
 80044da:	2200      	movs	r2, #0
 80044dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80044de:	e7d3      	b.n	8004488 <lv_indev_reset+0x24>
                    i->proc.types.pointer.last_pressed = NULL;
 80044e0:	635d      	str	r5, [r3, #52]	; 0x34
                    i->proc.types.pointer.act_obj = NULL;
 80044e2:	629d      	str	r5, [r3, #40]	; 0x28
                    i->proc.types.pointer.last_obj = NULL;
 80044e4:	62dd      	str	r5, [r3, #44]	; 0x2c
            i = lv_indev_get_next(i);
 80044e6:	4618      	mov	r0, r3
 80044e8:	f01b fff0 	bl	80204cc <lv_indev_get_next>
        while(i) {
 80044ec:	4603      	mov	r3, r0
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d0e9      	beq.n	80044c6 <lv_indev_reset+0x62>
            i->proc.reset_query = 1;
 80044f2:	795a      	ldrb	r2, [r3, #5]
 80044f4:	f042 0202 	orr.w	r2, r2, #2
 80044f8:	715a      	strb	r2, [r3, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	3a01      	subs	r2, #1
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	2a01      	cmp	r2, #1
 8004504:	d8ef      	bhi.n	80044e6 <lv_indev_reset+0x82>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8004506:	2c00      	cmp	r4, #0
 8004508:	d0ea      	beq.n	80044e0 <lv_indev_reset+0x7c>
 800450a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450c:	42a2      	cmp	r2, r4
 800450e:	d006      	beq.n	800451e <lv_indev_reset+0xba>
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8004510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004512:	42a2      	cmp	r2, r4
 8004514:	d0d4      	beq.n	80044c0 <lv_indev_reset+0x5c>
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	42a2      	cmp	r2, r4
 800451a:	d1e4      	bne.n	80044e6 <lv_indev_reset+0x82>
 800451c:	e7e2      	b.n	80044e4 <lv_indev_reset+0x80>
                    i->proc.types.pointer.last_pressed = NULL;
 800451e:	635d      	str	r5, [r3, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8004520:	e7f6      	b.n	8004510 <lv_indev_reset+0xac>
 8004522:	bf00      	nop
 8004524:	20002530 	.word	0x20002530
 8004528:	20002534 	.word	0x20002534

0800452c <lv_indev_reset_long_press>:
{
 800452c:	b510      	push	{r4, lr}
 800452e:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 8004530:	7943      	ldrb	r3, [r0, #5]
 8004532:	f36f 0300 	bfc	r3, #0, #1
 8004536:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 8004538:	f01b fff7 	bl	802052a <lv_tick_get>
 800453c:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 800453e:	f01b fff4 	bl	802052a <lv_tick_get>
 8004542:	64a0      	str	r0, [r4, #72]	; 0x48
}
 8004544:	bd10      	pop	{r4, pc}

08004546 <lv_indev_get_point>:
    if(indev == NULL) {
 8004546:	b150      	cbz	r0, 800455e <lv_indev_get_point+0x18>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 8004548:	6803      	ldr	r3, [r0, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8004550:	2b01      	cmp	r3, #1
 8004552:	d008      	beq.n	8004566 <lv_indev_get_point+0x20>
        point->x = -1;
 8004554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004558:	800b      	strh	r3, [r1, #0]
        point->y = -1;
 800455a:	804b      	strh	r3, [r1, #2]
 800455c:	4770      	bx	lr
        point->x = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	800b      	strh	r3, [r1, #0]
        point->y = 0;
 8004562:	804b      	strh	r3, [r1, #2]
        return;
 8004564:	4770      	bx	lr
        point->x = indev->proc.types.pointer.act_point.x;
 8004566:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800456a:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 800456c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8004570:	804b      	strh	r3, [r1, #2]
}
 8004572:	4770      	bx	lr

08004574 <lv_indev_get_scroll_dir>:
    if(indev == NULL) return false;
 8004574:	b160      	cbz	r0, 8004590 <lv_indev_get_scroll_dir+0x1c>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8004576:	6803      	ldr	r3, [r0, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <lv_indev_get_scroll_dir+0x12>
 8004582:	2000      	movs	r0, #0
}
 8004584:	4770      	bx	lr
    return indev->proc.types.pointer.scroll_dir;
 8004586:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800458a:	f000 000f 	and.w	r0, r0, #15
 800458e:	4770      	bx	lr
    if(indev == NULL) return false;
 8004590:	2000      	movs	r0, #0
 8004592:	4770      	bx	lr

08004594 <lv_indev_get_scroll_obj>:
    if(indev == NULL) return NULL;
 8004594:	b148      	cbz	r0, 80045aa <lv_indev_get_scroll_obj+0x16>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800459e:	2a01      	cmp	r2, #1
 80045a0:	d001      	beq.n	80045a6 <lv_indev_get_scroll_obj+0x12>
 80045a2:	2000      	movs	r0, #0
}
 80045a4:	4770      	bx	lr
    return indev->proc.types.pointer.scroll_obj;
 80045a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80045a8:	4770      	bx	lr
 80045aa:	4770      	bx	lr

080045ac <lv_indev_get_vect>:
    point->x = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 80045b0:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 80045b2:	b128      	cbz	r0, 80045c0 <lv_indev_get_vect+0x14>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 80045b4:	6803      	ldr	r3, [r0, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d000      	beq.n	80045c2 <lv_indev_get_vect+0x16>
}
 80045c0:	4770      	bx	lr
        point->x = indev->proc.types.pointer.vect.x;
 80045c2:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 80045c6:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 80045c8:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 80045cc:	804b      	strh	r3, [r1, #2]
 80045ce:	e7f7      	b.n	80045c0 <lv_indev_get_vect+0x14>

080045d0 <lv_indev_wait_release>:
    if(indev == NULL)return;
 80045d0:	b118      	cbz	r0, 80045da <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 80045d2:	7943      	ldrb	r3, [r0, #5]
 80045d4:	f043 0308 	orr.w	r3, r3, #8
 80045d8:	7143      	strb	r3, [r0, #5]
}
 80045da:	4770      	bx	lr

080045dc <lv_indev_get_obj_act>:
}
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <lv_indev_get_obj_act+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20002534 	.word	0x20002534

080045e8 <lv_indev_search_obj>:
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	4605      	mov	r5, r0
 80045ee:	460c      	mov	r4, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 80045f0:	2101      	movs	r1, #1
 80045f2:	f002 f9ed 	bl	80069d0 <lv_obj_has_flag>
 80045f6:	bb80      	cbnz	r0, 800465a <lv_indev_search_obj+0x72>
    lv_point_t p_trans = *point;
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	9001      	str	r0, [sp, #4]
    lv_obj_transform_point(obj, &p_trans, false, true);
 80045fc:	2301      	movs	r3, #1
 80045fe:	2200      	movs	r2, #0
 8004600:	a901      	add	r1, sp, #4
 8004602:	4628      	mov	r0, r5
 8004604:	f003 fb62 	bl	8007ccc <lv_obj_transform_point>
    bool hit_test_ok = lv_obj_hit_test(obj, &p_trans);
 8004608:	a901      	add	r1, sp, #4
 800460a:	4628      	mov	r0, r5
 800460c:	f003 ff1b 	bl	8008446 <lv_obj_hit_test>
 8004610:	4606      	mov	r6, r0
    if(_lv_area_is_point_on(&obj->coords, &p_trans, 0) || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8004612:	2200      	movs	r2, #0
 8004614:	a901      	add	r1, sp, #4
 8004616:	f105 0014 	add.w	r0, r5, #20
 800461a:	f01c fa5d 	bl	8020ad8 <_lv_area_is_point_on>
 800461e:	b928      	cbnz	r0, 800462c <lv_indev_search_obj+0x44>
 8004620:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004624:	4628      	mov	r0, r5
 8004626:	f002 f9d3 	bl	80069d0 <lv_obj_has_flag>
 800462a:	b178      	cbz	r0, 800464c <lv_indev_search_obj+0x64>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800462c:	4628      	mov	r0, r5
 800462e:	f007 f836 	bl	800b69e <lv_obj_get_child_cnt>
        for(i = child_cnt - 1; i >= 0; i--) {
 8004632:	1e44      	subs	r4, r0, #1
 8004634:	d40a      	bmi.n	800464c <lv_indev_search_obj+0x64>
            lv_obj_t * child = obj->spec_attr->children[i];
 8004636:	68ab      	ldr	r3, [r5, #8]
 8004638:	681b      	ldr	r3, [r3, #0]
            found_p = lv_indev_search_obj(child, &p_trans);
 800463a:	a901      	add	r1, sp, #4
 800463c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004640:	f7ff ffd2 	bl	80045e8 <lv_indev_search_obj>
            if(found_p) return found_p;
 8004644:	4603      	mov	r3, r0
 8004646:	b928      	cbnz	r0, 8004654 <lv_indev_search_obj+0x6c>
        for(i = child_cnt - 1; i >= 0; i--) {
 8004648:	3c01      	subs	r4, #1
 800464a:	d5f4      	bpl.n	8004636 <lv_indev_search_obj+0x4e>
    else return NULL;
 800464c:	2e00      	cmp	r6, #0
 800464e:	bf14      	ite	ne
 8004650:	462b      	movne	r3, r5
 8004652:	2300      	moveq	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	b002      	add	sp, #8
 8004658:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	e7fa      	b.n	8004654 <lv_indev_search_obj+0x6c>
	...

08004660 <indev_proc_press>:
{
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 8004664:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004666:	4ba0      	ldr	r3, [pc, #640]	; (80048e8 <indev_proc_press+0x288>)
 8004668:	6018      	str	r0, [r3, #0]
    if(proc->wait_until_release != 0) return;
 800466a:	7863      	ldrb	r3, [r4, #1]
 800466c:	f013 0f08 	tst.w	r3, #8
 8004670:	d135      	bne.n	80046de <indev_proc_press+0x7e>
    lv_disp_t * disp = indev_act->driver->disp;
 8004672:	4b9e      	ldr	r3, [pc, #632]	; (80048ec <indev_proc_press+0x28c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691d      	ldr	r5, [r3, #16]
    if(indev_obj_act == NULL) {
 800467a:	2800      	cmp	r0, #0
 800467c:	d030      	beq.n	80046e0 <indev_proc_press+0x80>
    else if(proc->types.pointer.scroll_obj == NULL &&
 800467e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d057      	beq.n	8004734 <indev_proc_press+0xd4>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8004684:	88a2      	ldrh	r2, [r4, #4]
 8004686:	89a0      	ldrh	r0, [r4, #12]
 8004688:	1a12      	subs	r2, r2, r0
 800468a:	b210      	sxth	r0, r2
 800468c:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 800468e:	88e3      	ldrh	r3, [r4, #6]
 8004690:	89e1      	ldrh	r1, [r4, #14]
 8004692:	1a5b      	subs	r3, r3, r1
 8004694:	b219      	sxth	r1, r3
 8004696:	82e1      	strh	r1, [r4, #22]
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x + proc->types.pointer.vect.x) / 2;
 8004698:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
 800469c:	4402      	add	r2, r0
 800469e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80046a2:	1052      	asrs	r2, r2, #1
 80046a4:	83a2      	strh	r2, [r4, #28]
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 80046a6:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 80046aa:	440b      	add	r3, r1
 80046ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80046b0:	105b      	asrs	r3, r3, #1
 80046b2:	83e3      	strh	r3, [r4, #30]
    proc->types.pointer.scroll_throw_vect_ori = proc->types.pointer.scroll_throw_vect;
 80046b4:	69e3      	ldr	r3, [r4, #28]
 80046b6:	6223      	str	r3, [r4, #32]
    if(indev_obj_act) {
 80046b8:	4b8b      	ldr	r3, [pc, #556]	; (80048e8 <indev_proc_press+0x288>)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	b178      	cbz	r0, 80046de <indev_proc_press+0x7e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 80046be:	4b8b      	ldr	r3, [pc, #556]	; (80048ec <indev_proc_press+0x28c>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	2102      	movs	r1, #2
 80046c4:	f7ff fb1c 	bl	8003d00 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff fe0d 	bl	80042e8 <indev_reset_check>
 80046ce:	b930      	cbnz	r0, 80046de <indev_proc_press+0x7e>
        if(indev_act->proc.wait_until_release) return;
 80046d0:	4b86      	ldr	r3, [pc, #536]	; (80048ec <indev_proc_press+0x28c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	795b      	ldrb	r3, [r3, #5]
 80046d6:	f013 0f08 	tst.w	r3, #8
 80046da:	f000 8109 	beq.w	80048f0 <indev_proc_press+0x290>
}
 80046de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 80046e0:	4628      	mov	r0, r5
 80046e2:	f7ff f9dc 	bl	8003a9e <lv_disp_get_layer_sys>
 80046e6:	1d26      	adds	r6, r4, #4
 80046e8:	4631      	mov	r1, r6
 80046ea:	f7ff ff7d 	bl	80045e8 <lv_indev_search_obj>
 80046ee:	4b7e      	ldr	r3, [pc, #504]	; (80048e8 <indev_proc_press+0x288>)
 80046f0:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 80046f2:	b160      	cbz	r0, 800470e <indev_proc_press+0xae>
    if(new_obj_searched && proc->types.pointer.last_obj) {
 80046f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046f6:	b323      	cbz	r3, 8004742 <indev_proc_press+0xe2>
        proc->types.pointer.scroll_throw_vect.x = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	83a3      	strh	r3, [r4, #28]
        proc->types.pointer.scroll_throw_vect.y = 0;
 80046fc:	83e3      	strh	r3, [r4, #30]
        _lv_indev_scroll_throw_handler(proc);
 80046fe:	4620      	mov	r0, r4
 8004700:	f001 fb52 	bl	8005da8 <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 8004704:	4620      	mov	r0, r4
 8004706:	f7ff fdef 	bl	80042e8 <indev_reset_check>
 800470a:	b1d0      	cbz	r0, 8004742 <indev_proc_press+0xe2>
 800470c:	e7e7      	b.n	80046de <indev_proc_press+0x7e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 800470e:	4628      	mov	r0, r5
 8004710:	f7ff f9ba 	bl	8003a88 <lv_disp_get_layer_top>
 8004714:	4631      	mov	r1, r6
 8004716:	f7ff ff67 	bl	80045e8 <lv_indev_search_obj>
 800471a:	4b73      	ldr	r3, [pc, #460]	; (80048e8 <indev_proc_press+0x288>)
 800471c:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 800471e:	2800      	cmp	r0, #0
 8004720:	d1e8      	bne.n	80046f4 <indev_proc_press+0x94>
 8004722:	4628      	mov	r0, r5
 8004724:	f7ff f99a 	bl	8003a5c <lv_disp_get_scr_act>
 8004728:	4631      	mov	r1, r6
 800472a:	f7ff ff5d 	bl	80045e8 <lv_indev_search_obj>
 800472e:	4b6e      	ldr	r3, [pc, #440]	; (80048e8 <indev_proc_press+0x288>)
 8004730:	6018      	str	r0, [r3, #0]
 8004732:	e7df      	b.n	80046f4 <indev_proc_press+0x94>
            lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_PRESS_LOCK) == false) {
 8004734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004738:	f002 f94a 	bl	80069d0 <lv_obj_has_flag>
    else if(proc->types.pointer.scroll_obj == NULL &&
 800473c:	2800      	cmp	r0, #0
 800473e:	f000 8081 	beq.w	8004844 <indev_proc_press+0x1e4>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8004742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004744:	4b68      	ldr	r3, [pc, #416]	; (80048e8 <indev_proc_press+0x288>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4298      	cmp	r0, r3
 800474a:	d09b      	beq.n	8004684 <indev_proc_press+0x24>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 800474c:	88a3      	ldrh	r3, [r4, #4]
 800474e:	81a3      	strh	r3, [r4, #12]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8004750:	88e3      	ldrh	r3, [r4, #6]
 8004752:	81e3      	strh	r3, [r4, #14]
        if(proc->types.pointer.act_obj != NULL) {
 8004754:	b148      	cbz	r0, 800476a <indev_proc_press+0x10a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, indev_act);
 8004756:	4b65      	ldr	r3, [pc, #404]	; (80048ec <indev_proc_press+0x28c>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	2103      	movs	r1, #3
 800475c:	f7ff fad0 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff fdc1 	bl	80042e8 <indev_reset_check>
 8004766:	2800      	cmp	r0, #0
 8004768:	d1b9      	bne.n	80046de <indev_proc_press+0x7e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 800476a:	4b5f      	ldr	r3, [pc, #380]	; (80048e8 <indev_proc_press+0x288>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6263      	str	r3, [r4, #36]	; 0x24
        proc->types.pointer.last_obj = indev_obj_act;
 8004770:	62a3      	str	r3, [r4, #40]	; 0x28
        if(indev_obj_act != NULL) {
 8004772:	2b00      	cmp	r3, #0
 8004774:	d086      	beq.n	8004684 <indev_proc_press+0x24>
            proc->pr_timestamp                 = lv_tick_get();
 8004776:	f01b fed8 	bl	802052a <lv_tick_get>
 800477a:	6460      	str	r0, [r4, #68]	; 0x44
            proc->long_pr_sent                 = 0;
 800477c:	7863      	ldrb	r3, [r4, #1]
 800477e:	f36f 0300 	bfc	r3, #0, #1
 8004782:	7063      	strb	r3, [r4, #1]
            proc->types.pointer.scroll_sum.x     = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	8323      	strh	r3, [r4, #24]
            proc->types.pointer.scroll_sum.y     = 0;
 8004788:	8363      	strh	r3, [r4, #26]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 800478a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            proc->types.pointer.gesture_dir = LV_DIR_NONE;
 800478e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004792:	f363 1207 	bfi	r2, r3, #4, #4
 8004796:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
            proc->types.pointer.gesture_sent   = 0;
 800479a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800479e:	f363 0200 	bfi	r2, r3, #0, #1
 80047a2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
            proc->types.pointer.gesture_sum.x  = 0;
 80047a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
            proc->types.pointer.gesture_sum.y  = 0;
 80047a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
            proc->types.pointer.vect.x         = 0;
 80047aa:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.vect.y         = 0;
 80047ac:	82e3      	strh	r3, [r4, #22]
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 80047ae:	4b4f      	ldr	r3, [pc, #316]	; (80048ec <indev_proc_press+0x28c>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2101      	movs	r1, #1
 80047b4:	4b4c      	ldr	r3, [pc, #304]	; (80048e8 <indev_proc_press+0x288>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	f7ff faa2 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80047bc:	4620      	mov	r0, r4
 80047be:	f7ff fd93 	bl	80042e8 <indev_reset_check>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d18b      	bne.n	80046de <indev_proc_press+0x7e>
            if(indev_act->proc.wait_until_release) return;
 80047c6:	4b49      	ldr	r3, [pc, #292]	; (80048ec <indev_proc_press+0x28c>)
 80047c8:	681d      	ldr	r5, [r3, #0]
 80047ca:	796b      	ldrb	r3, [r5, #5]
 80047cc:	f013 0f08 	tst.w	r3, #8
 80047d0:	d185      	bne.n	80046de <indev_proc_press+0x7e>
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 80047d2:	2104      	movs	r1, #4
 80047d4:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <indev_proc_press+0x288>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	f002 f8fa 	bl	80069d0 <lv_obj_has_flag>
 80047dc:	b358      	cbz	r0, 8004836 <indev_proc_press+0x1d6>
       proc->types.pointer.last_pressed == indev_obj_act) {
 80047de:	4b42      	ldr	r3, [pc, #264]	; (80048e8 <indev_proc_press+0x288>)
 80047e0:	6818      	ldr	r0, [r3, #0]
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 80047e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80047e4:	4283      	cmp	r3, r0
 80047e6:	d026      	beq.n	8004836 <indev_proc_press+0x1d6>
            indev_click_focus(&indev_act->proc);
 80047e8:	1d2f      	adds	r7, r5, #4
    lv_group_t * g_act = lv_obj_get_group(indev_obj_act);
 80047ea:	f002 f906 	bl	80069fa <lv_obj_get_group>
 80047ee:	4606      	mov	r6, r0
    lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 80047f0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80047f2:	2800      	cmp	r0, #0
 80047f4:	f000 8148 	beq.w	8004a88 <indev_proc_press+0x428>
 80047f8:	f002 f8ff 	bl	80069fa <lv_obj_get_group>
    if(g_act == g_prev) {
 80047fc:	4286      	cmp	r6, r0
 80047fe:	d041      	beq.n	8004884 <indev_proc_press+0x224>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8004800:	2800      	cmp	r0, #0
 8004802:	f000 8144 	beq.w	8004a8e <indev_proc_press+0x42e>
            if(proc->types.pointer.last_pressed) {
 8004806:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004808:	b140      	cbz	r0, 800481c <indev_proc_press+0x1bc>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, indev_act);
 800480a:	4b38      	ldr	r3, [pc, #224]	; (80048ec <indev_proc_press+0x28c>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2110      	movs	r1, #16
 8004810:	f7ff fa76 	bl	8003d00 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8004814:	4638      	mov	r0, r7
 8004816:	f7ff fd67 	bl	80042e8 <indev_reset_check>
 800481a:	b960      	cbnz	r0, 8004836 <indev_proc_press+0x1d6>
        if(g_act) {
 800481c:	2e00      	cmp	r6, #0
 800481e:	d055      	beq.n	80048cc <indev_proc_press+0x26c>
            lv_group_focus_obj(indev_obj_act);
 8004820:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <indev_proc_press+0x288>)
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	f7ff fce5 	bl	80041f2 <lv_group_focus_obj>
            if(indev_reset_check(proc)) return;
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff fd5d 	bl	80042e8 <indev_reset_check>
 800482e:	b910      	cbnz	r0, 8004836 <indev_proc_press+0x1d6>
    proc->types.pointer.last_pressed = indev_obj_act;
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <indev_proc_press+0x288>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	636b      	str	r3, [r5, #52]	; 0x34
            if(indev_reset_check(proc)) return;
 8004836:	4620      	mov	r0, r4
 8004838:	f7ff fd56 	bl	80042e8 <indev_reset_check>
 800483c:	2800      	cmp	r0, #0
 800483e:	f43f af21 	beq.w	8004684 <indev_proc_press+0x24>
 8004842:	e74c      	b.n	80046de <indev_proc_press+0x7e>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8004844:	4628      	mov	r0, r5
 8004846:	f7ff f92a 	bl	8003a9e <lv_disp_get_layer_sys>
 800484a:	1d26      	adds	r6, r4, #4
 800484c:	4631      	mov	r1, r6
 800484e:	f7ff fecb 	bl	80045e8 <lv_indev_search_obj>
 8004852:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <indev_proc_press+0x288>)
 8004854:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8004856:	2800      	cmp	r0, #0
 8004858:	f47f af4c 	bne.w	80046f4 <indev_proc_press+0x94>
 800485c:	4628      	mov	r0, r5
 800485e:	f7ff f913 	bl	8003a88 <lv_disp_get_layer_top>
 8004862:	4631      	mov	r1, r6
 8004864:	f7ff fec0 	bl	80045e8 <lv_indev_search_obj>
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <indev_proc_press+0x288>)
 800486a:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 800486c:	2800      	cmp	r0, #0
 800486e:	f47f af41 	bne.w	80046f4 <indev_proc_press+0x94>
 8004872:	4628      	mov	r0, r5
 8004874:	f7ff f8f2 	bl	8003a5c <lv_disp_get_scr_act>
 8004878:	4631      	mov	r1, r6
 800487a:	f7ff feb5 	bl	80045e8 <lv_indev_search_obj>
 800487e:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <indev_proc_press+0x288>)
 8004880:	6018      	str	r0, [r3, #0]
 8004882:	e737      	b.n	80046f4 <indev_proc_press+0x94>
        if(g_act) {
 8004884:	b148      	cbz	r0, 800489a <indev_proc_press+0x23a>
            lv_group_focus_obj(indev_obj_act);
 8004886:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <indev_proc_press+0x288>)
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	f7ff fcb2 	bl	80041f2 <lv_group_focus_obj>
            if(indev_reset_check(proc)) return;
 800488e:	4638      	mov	r0, r7
 8004890:	f7ff fd2a 	bl	80042e8 <indev_reset_check>
 8004894:	2800      	cmp	r0, #0
 8004896:	d0cb      	beq.n	8004830 <indev_proc_press+0x1d0>
 8004898:	e7cd      	b.n	8004836 <indev_proc_press+0x1d6>
            if(proc->types.pointer.last_pressed) {
 800489a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800489c:	b148      	cbz	r0, 80048b2 <indev_proc_press+0x252>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <indev_proc_press+0x28c>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	210f      	movs	r1, #15
 80048a4:	f7ff fa2c 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80048a8:	4638      	mov	r0, r7
 80048aa:	f7ff fd1d 	bl	80042e8 <indev_reset_check>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d1c1      	bne.n	8004836 <indev_proc_press+0x1d6>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <indev_proc_press+0x28c>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	210e      	movs	r1, #14
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <indev_proc_press+0x288>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	f7ff fa20 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7ff fd11 	bl	80042e8 <indev_reset_check>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	d0b2      	beq.n	8004830 <indev_proc_press+0x1d0>
 80048ca:	e7b4      	b.n	8004836 <indev_proc_press+0x1d6>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <indev_proc_press+0x28c>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	210e      	movs	r1, #14
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <indev_proc_press+0x288>)
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	f7ff fa13 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80048da:	4638      	mov	r0, r7
 80048dc:	f7ff fd04 	bl	80042e8 <indev_reset_check>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d0a5      	beq.n	8004830 <indev_proc_press+0x1d0>
 80048e4:	e7a7      	b.n	8004836 <indev_proc_press+0x1d6>
 80048e6:	bf00      	nop
 80048e8:	20002534 	.word	0x20002534
 80048ec:	20002530 	.word	0x20002530
        _lv_indev_scroll_handler(proc);
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 ff4d 	bl	8005790 <_lv_indev_scroll_handler>
        if(indev_reset_check(proc)) return;
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff fcf6 	bl	80042e8 <indev_reset_check>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f47f aeee 	bne.w	80046de <indev_proc_press+0x7e>
    if(proc->types.pointer.scroll_obj) return;
 8004902:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004904:	b33b      	cbz	r3, 8004956 <indev_proc_press+0x2f6>
        if(indev_reset_check(proc)) return;
 8004906:	4620      	mov	r0, r4
 8004908:	f7ff fcee 	bl	80042e8 <indev_reset_check>
 800490c:	2800      	cmp	r0, #0
 800490e:	f47f aee6 	bne.w	80046de <indev_proc_press+0x7e>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 0) {
 8004912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004914:	2b00      	cmp	r3, #0
 8004916:	f47f aee2 	bne.w	80046de <indev_proc_press+0x7e>
 800491a:	7863      	ldrb	r3, [r4, #1]
 800491c:	f013 0f01 	tst.w	r3, #1
 8004920:	f000 808c 	beq.w	8004a3c <indev_proc_press+0x3dc>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver->long_press_repeat_time) {
 8004924:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004926:	f01b fe04 	bl	8020532 <lv_tick_elaps>
 800492a:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <indev_proc_press+0x450>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	8bdb      	ldrh	r3, [r3, #30]
 8004932:	4298      	cmp	r0, r3
 8004934:	f67f aed3 	bls.w	80046de <indev_proc_press+0x7e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8004938:	2106      	movs	r1, #6
 800493a:	4b5e      	ldr	r3, [pc, #376]	; (8004ab4 <indev_proc_press+0x454>)
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	f7ff f9df 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8004942:	4620      	mov	r0, r4
 8004944:	f7ff fcd0 	bl	80042e8 <indev_reset_check>
 8004948:	2800      	cmp	r0, #0
 800494a:	f47f aec8 	bne.w	80046de <indev_proc_press+0x7e>
                proc->longpr_rep_timestamp = lv_tick_get();
 800494e:	f01b fdec 	bl	802052a <lv_tick_get>
 8004952:	64a0      	str	r0, [r4, #72]	; 0x48
 8004954:	e6c3      	b.n	80046de <indev_proc_press+0x7e>
    if(proc->types.pointer.gesture_sent) return;
 8004956:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800495a:	f013 0f01 	tst.w	r3, #1
 800495e:	d1d2      	bne.n	8004906 <indev_proc_press+0x2a6>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8004960:	6a65      	ldr	r5, [r4, #36]	; 0x24
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 8004962:	2d00      	cmp	r5, #0
 8004964:	d0cf      	beq.n	8004906 <indev_proc_press+0x2a6>
 8004966:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800496a:	4631      	mov	r1, r6
 800496c:	4628      	mov	r0, r5
 800496e:	f002 f82f 	bl	80069d0 <lv_obj_has_flag>
 8004972:	b130      	cbz	r0, 8004982 <indev_proc_press+0x322>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8004974:	4628      	mov	r0, r5
 8004976:	f006 fe79 	bl	800b66c <lv_obj_get_parent>
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 800497a:	4605      	mov	r5, r0
 800497c:	2800      	cmp	r0, #0
 800497e:	d1f4      	bne.n	800496a <indev_proc_press+0x30a>
 8004980:	e7c1      	b.n	8004906 <indev_proc_press+0x2a6>
    if(gesture_obj == NULL) return;
 8004982:	2d00      	cmp	r5, #0
 8004984:	d0bf      	beq.n	8004906 <indev_proc_press+0x2a6>
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 8004986:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800498a:	4a49      	ldr	r2, [pc, #292]	; (8004ab0 <indev_proc_press+0x450>)
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	6811      	ldr	r1, [r2, #0]
 8004990:	7e88      	ldrb	r0, [r1, #26]
 8004992:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8004996:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800499a:	b289      	uxth	r1, r1
 800499c:	4281      	cmp	r1, r0
 800499e:	d20a      	bcs.n	80049b6 <indev_proc_press+0x356>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 80049a0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80049a4:	2900      	cmp	r1, #0
 80049a6:	bfb8      	it	lt
 80049a8:	4249      	neglt	r1, r1
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 80049aa:	b289      	uxth	r1, r1
 80049ac:	4288      	cmp	r0, r1
 80049ae:	d902      	bls.n	80049b6 <indev_proc_press+0x356>
        proc->types.pointer.gesture_sum.x = 0;
 80049b0:	2100      	movs	r1, #0
 80049b2:	87a1      	strh	r1, [r4, #60]	; 0x3c
        proc->types.pointer.gesture_sum.y = 0;
 80049b4:	87e1      	strh	r1, [r4, #62]	; 0x3e
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 80049b6:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80049b8:	440b      	add	r3, r1
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	87a3      	strh	r3, [r4, #60]	; 0x3c
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 80049be:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80049c0:	8ae0      	ldrh	r0, [r4, #22]
 80049c2:	4401      	add	r1, r0
 80049c4:	b209      	sxth	r1, r1
 80049c6:	87e1      	strh	r1, [r4, #62]	; 0x3e
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 80049c8:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 80049cc:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80049d0:	b280      	uxth	r0, r0
 80049d2:	6816      	ldr	r6, [r2, #0]
 80049d4:	7ef6      	ldrb	r6, [r6, #27]
 80049d6:	42b0      	cmp	r0, r6
 80049d8:	d806      	bhi.n	80049e8 <indev_proc_press+0x388>
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 80049da:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
 80049de:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 80049e2:	b2bf      	uxth	r7, r7
 80049e4:	42be      	cmp	r6, r7
 80049e6:	d28e      	bcs.n	8004906 <indev_proc_press+0x2a6>
        proc->types.pointer.gesture_sent = 1;
 80049e8:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
 80049ec:	f046 0601 	orr.w	r6, r6, #1
 80049f0:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 80049f4:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 80049f8:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
 80049fc:	b2b6      	uxth	r6, r6
 80049fe:	42b0      	cmp	r0, r6
 8004a00:	d911      	bls.n	8004a26 <indev_proc_press+0x3c6>
            if(proc->types.pointer.gesture_sum.x > 0)
 8004a02:	2b00      	cmp	r3, #0
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 8004a04:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004a08:	bfcc      	ite	gt
 8004a0a:	2102      	movgt	r1, #2
                proc->types.pointer.gesture_dir = LV_DIR_LEFT;
 8004a0c:	2101      	movle	r1, #1
 8004a0e:	f361 1307 	bfi	r3, r1, #4, #4
 8004a12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 8004a16:	210c      	movs	r1, #12
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f7ff f971 	bl	8003d00 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff fc62 	bl	80042e8 <indev_reset_check>
 8004a24:	e76f      	b.n	8004906 <indev_proc_press+0x2a6>
            if(proc->types.pointer.gesture_sum.y > 0)
 8004a26:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_DIR_BOTTOM;
 8004a28:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004a2c:	bfcc      	ite	gt
 8004a2e:	2108      	movgt	r1, #8
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 8004a30:	2104      	movle	r1, #4
 8004a32:	f361 1307 	bfi	r3, r1, #4, #4
 8004a36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a3a:	e7ec      	b.n	8004a16 <indev_proc_press+0x3b6>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver->long_press_time) {
 8004a3c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004a3e:	f01b fd78 	bl	8020532 <lv_tick_elaps>
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <indev_proc_press+0x450>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	8b9b      	ldrh	r3, [r3, #28]
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	d809      	bhi.n	8004a62 <indev_proc_press+0x402>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 8004a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f47f ae44 	bne.w	80046de <indev_proc_press+0x7e>
 8004a56:	7863      	ldrb	r3, [r4, #1]
 8004a58:	f013 0f01 	tst.w	r3, #1
 8004a5c:	f43f ae3f 	beq.w	80046de <indev_proc_press+0x7e>
 8004a60:	e760      	b.n	8004924 <indev_proc_press+0x2c4>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8004a62:	2105      	movs	r1, #5
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <indev_proc_press+0x454>)
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	f7ff f94a 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff fc3b 	bl	80042e8 <indev_reset_check>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	f47f ae33 	bne.w	80046de <indev_proc_press+0x7e>
                proc->long_pr_sent = 1;
 8004a78:	7863      	ldrb	r3, [r4, #1]
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	7063      	strb	r3, [r4, #1]
                proc->longpr_rep_timestamp = lv_tick_get();
 8004a80:	f01b fd53 	bl	802052a <lv_tick_get>
 8004a84:	64a0      	str	r0, [r4, #72]	; 0x48
 8004a86:	e7e2      	b.n	8004a4e <indev_proc_press+0x3ee>
    if(g_act == g_prev) {
 8004a88:	2e00      	cmp	r6, #0
 8004a8a:	f43f af12 	beq.w	80048b2 <indev_proc_press+0x252>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8004a8e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004a90:	2800      	cmp	r0, #0
 8004a92:	f43f aec3 	beq.w	800481c <indev_proc_press+0x1bc>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <indev_proc_press+0x450>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	210f      	movs	r1, #15
 8004a9c:	f7ff f930 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff fc21 	bl	80042e8 <indev_reset_check>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	f43f aeb8 	beq.w	800481c <indev_proc_press+0x1bc>
 8004aac:	e6c3      	b.n	8004836 <indev_proc_press+0x1d6>
 8004aae:	bf00      	nop
 8004ab0:	20002530 	.word	0x20002530
 8004ab4:	20002534 	.word	0x20002534

08004ab8 <lv_indev_read_timer_cb>:
{
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	b084      	sub	sp, #16
    indev_act = timer->user_data;
 8004abe:	68c4      	ldr	r4, [r0, #12]
 8004ac0:	4b9c      	ldr	r3, [pc, #624]	; (8004d34 <lv_indev_read_timer_cb+0x27c>)
 8004ac2:	601c      	str	r4, [r3, #0]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	b153      	cbz	r3, 8004ae0 <lv_indev_read_timer_cb+0x28>
    indev_proc_reset_query_handler(indev_act);
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7ff fbe8 	bl	80042a0 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled ||
 8004ad0:	7963      	ldrb	r3, [r4, #5]
 8004ad2:	f013 0f04 	tst.w	r3, #4
 8004ad6:	d103      	bne.n	8004ae0 <lv_indev_read_timer_cb+0x28>
       indev_act->driver->disp->prev_scr != NULL) return; /*Input disabled or screen animation active*/
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
    if(indev_act->proc.disabled ||
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	b113      	cbz	r3, 8004ae6 <lv_indev_read_timer_cb+0x2e>
}
 8004ae0:	b004      	add	sp, #16
 8004ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _lv_indev_read(indev_act, &data);
 8004ae6:	4d93      	ldr	r5, [pc, #588]	; (8004d34 <lv_indev_read_timer_cb+0x27c>)
        indev_obj_act = NULL;
 8004ae8:	4f93      	ldr	r7, [pc, #588]	; (8004d38 <lv_indev_read_timer_cb+0x280>)
 8004aea:	e0c9      	b.n	8004c80 <lv_indev_read_timer_cb+0x1c8>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	691c      	ldr	r4, [r3, #16]
 8004af0:	f01b fd1b 	bl	802052a <lv_tick_get>
 8004af4:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
 8004af8:	e0d9      	b.n	8004cae <lv_indev_read_timer_cb+0x1f6>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8004afa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8004afe:	2a00      	cmp	r2, #0
 8004b00:	d164      	bne.n	8004bcc <lv_indev_read_timer_cb+0x114>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8004b02:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	f000 8261 	beq.w	8004fce <lv_indev_read_timer_cb+0x516>
    if(i->proc.wait_until_release) {
 8004b0c:	7963      	ldrb	r3, [r4, #5]
 8004b0e:	f013 0f08 	tst.w	r3, #8
 8004b12:	d008      	beq.n	8004b26 <lv_indev_read_timer_cb+0x6e>
        i->proc.wait_until_release      = 0;
 8004b14:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp            = 0;
 8004b16:	2200      	movs	r2, #0
 8004b18:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8004b1a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8004b1e:	f362 0300 	bfi	r3, r2, #0, #1
 8004b22:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8004b24:	7222      	strb	r2, [r4, #8]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 8004b26:	f894 9008 	ldrb.w	r9, [r4, #8]
    i->proc.types.keypad.last_state = data->state;
 8004b2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004b2e:	7223      	strb	r3, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 8004b30:	9b01      	ldr	r3, [sp, #4]
 8004b32:	60e3      	str	r3, [r4, #12]
    lv_group_t * g = i->group;
 8004b34:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
    if(g == NULL) return;
 8004b38:	f1b8 0f00 	cmp.w	r8, #0
 8004b3c:	f000 809a 	beq.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
    indev_obj_act = lv_group_get_focused(g);
 8004b40:	4640      	mov	r0, r8
 8004b42:	f7ff fb18 	bl	8004176 <lv_group_get_focused>
 8004b46:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	f000 8093 	beq.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
    if(data->state != LV_INDEV_STATE_RELEASED) {
 8004b4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004b52:	b113      	cbz	r3, 8004b5a <lv_indev_read_timer_cb+0xa2>
        data->enc_diff = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8ad 300c 	strh.w	r3, [sp, #12]
    indev_obj_act = lv_group_get_focused(g);
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	f7ff fb0b 	bl	8004176 <lv_group_get_focused>
 8004b60:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f000 8086 	beq.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8004b68:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f000 8234 	beq.w	8004fda <lv_indev_read_timer_cb+0x522>
    else if(data->state == LV_INDEV_STATE_RELEASED && last_state == LV_INDEV_STATE_PRESSED) {
 8004b72:	b91b      	cbnz	r3, 8004b7c <lv_indev_read_timer_cb+0xc4>
 8004b74:	f1b9 0f01 	cmp.w	r9, #1
 8004b78:	f000 8312 	beq.w	80051a0 <lv_indev_read_timer_cb+0x6e8>
    indev_obj_act = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	603b      	str	r3, [r7, #0]
    if(data->enc_diff != 0) {
 8004b80:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d075      	beq.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        if(lv_group_get_editing(g)) {
 8004b88:	4640      	mov	r0, r8
 8004b8a:	f7ff fb7d 	bl	8004288 <lv_group_get_editing>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f000 83a2 	beq.w	80052d8 <lv_indev_read_timer_cb+0x820>
            if(data->enc_diff < 0) {
 8004b94:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f2c0 8386 	blt.w	80052aa <lv_indev_read_timer_cb+0x7f2>
                for(s = 0; s < data->enc_diff; s++) {
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	dd68      	ble.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
 8004ba2:	f04f 0900 	mov.w	r9, #0
                    lv_group_send_data(g, LV_KEY_RIGHT);
 8004ba6:	f04f 0a13 	mov.w	sl, #19
                    if(indev_reset_check(&i->proc)) return;
 8004baa:	3404      	adds	r4, #4
                    lv_group_send_data(g, LV_KEY_RIGHT);
 8004bac:	4651      	mov	r1, sl
 8004bae:	4640      	mov	r0, r8
 8004bb0:	f7ff fae7 	bl	8004182 <lv_group_send_data>
                    if(indev_reset_check(&i->proc)) return;
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff fb97 	bl	80042e8 <indev_reset_check>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d15a      	bne.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < data->enc_diff; s++) {
 8004bbe:	f109 0901 	add.w	r9, r9, #1
 8004bc2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004bc6:	4599      	cmp	r9, r3
 8004bc8:	dbf0      	blt.n	8004bac <lv_indev_read_timer_cb+0xf4>
 8004bca:	e053      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 8004bcc:	691c      	ldr	r4, [r3, #16]
 8004bce:	f01b fcac 	bl	802052a <lv_tick_get>
 8004bd2:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
 8004bd6:	e06a      	b.n	8004cae <lv_indev_read_timer_cb+0x1f6>
    lv_disp_t * disp = i->driver->disp;
 8004bd8:	6911      	ldr	r1, [r2, #16]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 8004bda:	f9bd 2000 	ldrsh.w	r2, [sp]
 8004bde:	82a2      	strh	r2, [r4, #20]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 8004be0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8004be4:	82e3      	strh	r3, [r4, #22]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 8004be6:	f8d1 c000 	ldr.w	ip, [r1]
 8004bea:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8004bee:	f010 0f20 	tst.w	r0, #32
 8004bf2:	d104      	bne.n	8004bfe <lv_indev_read_timer_cb+0x146>
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8004bf4:	f000 0030 	and.w	r0, r0, #48	; 0x30
 8004bf8:	2810      	cmp	r0, #16
 8004bfa:	d11d      	bne.n	8004c38 <lv_indev_read_timer_cb+0x180>
 8004bfc:	e010      	b.n	8004c20 <lv_indev_read_timer_cb+0x168>
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 8004bfe:	43d2      	mvns	r2, r2
 8004c00:	f8bc 0000 	ldrh.w	r0, [ip]
 8004c04:	4402      	add	r2, r0
 8004c06:	f8ad 2000 	strh.w	r2, [sp]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 8004c0a:	680a      	ldr	r2, [r1, #0]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	8852      	ldrh	r2, [r2, #2]
 8004c10:	4413      	add	r3, r2
 8004c12:	f8ad 3002 	strh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 8004c16:	680b      	ldr	r3, [r1, #0]
 8004c18:	7c1b      	ldrb	r3, [r3, #16]
 8004c1a:	f013 0f10 	tst.w	r3, #16
 8004c1e:	d00b      	beq.n	8004c38 <lv_indev_read_timer_cb+0x180>
        lv_coord_t tmp = data->point.y;
 8004c20:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
        data->point.y = data->point.x;
 8004c24:	f8bd 2000 	ldrh.w	r2, [sp]
 8004c28:	f8ad 2002 	strh.w	r2, [sp, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 8004c2c:	680a      	ldr	r2, [r1, #0]
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	8852      	ldrh	r2, [r2, #2]
 8004c32:	4413      	add	r3, r2
 8004c34:	f8ad 3000 	strh.w	r3, [sp]
    if(data->point.x >= lv_disp_get_hor_res(i->driver->disp)) {
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	6918      	ldr	r0, [r3, #16]
 8004c3c:	f01b fbbc 	bl	80203b8 <lv_disp_get_hor_res>
    if(data->point.y >= lv_disp_get_ver_res(i->driver->disp)) {
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	6918      	ldr	r0, [r3, #16]
 8004c44:	f01b fbcc 	bl	80203e0 <lv_disp_get_ver_res>
    if(i->cursor != NULL &&
 8004c48:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004c4a:	b118      	cbz	r0, 8004c54 <lv_indev_read_timer_cb+0x19c>
 8004c4c:	6922      	ldr	r2, [r4, #16]
 8004c4e:	9b00      	ldr	r3, [sp, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d164      	bne.n	8004d1e <lv_indev_read_timer_cb+0x266>
    i->proc.types.pointer.act_point.x = data->point.x;
 8004c54:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c58:	8123      	strh	r3, [r4, #8]
    i->proc.types.pointer.act_point.y = data->point.y;
 8004c5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004c5e:	8163      	strh	r3, [r4, #10]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 8004c60:	7923      	ldrb	r3, [r4, #4]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d062      	beq.n	8004d2c <lv_indev_read_timer_cb+0x274>
        indev_proc_release(&i->proc);
 8004c66:	1d20      	adds	r0, r4, #4
 8004c68:	f7ff fb4a 	bl	8004300 <indev_proc_release>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8004c6c:	8923      	ldrh	r3, [r4, #8]
 8004c6e:	8223      	strh	r3, [r4, #16]
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8004c70:	8963      	ldrh	r3, [r4, #10]
 8004c72:	8263      	strh	r3, [r4, #18]
        indev_proc_reset_query_handler(indev_act);
 8004c74:	6828      	ldr	r0, [r5, #0]
 8004c76:	f7ff fb13 	bl	80042a0 <indev_proc_reset_query_handler>
    } while(continue_reading);
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	f000 836b 	beq.w	8005356 <lv_indev_read_timer_cb+0x89e>
        _lv_indev_read(indev_act, &data);
 8004c80:	4669      	mov	r1, sp
 8004c82:	6828      	ldr	r0, [r5, #0]
 8004c84:	f01b fc30 	bl	80204e8 <_lv_indev_read>
        continue_reading = data.continue_reading;
 8004c88:	f89d 600f 	ldrb.w	r6, [sp, #15]
        indev_proc_reset_query_handler(indev_act);
 8004c8c:	682c      	ldr	r4, [r5, #0]
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7ff fb06 	bl	80042a0 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
        indev_act->proc.state = data.state;
 8004c98:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004c9c:	7123      	strb	r3, [r4, #4]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f43f af24 	beq.w	8004aec <lv_indev_read_timer_cb+0x34>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	781a      	ldrb	r2, [r3, #0]
 8004ca8:	2a04      	cmp	r2, #4
 8004caa:	f43f af26 	beq.w	8004afa <lv_indev_read_timer_cb+0x42>
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 8004cae:	682c      	ldr	r4, [r5, #0]
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	7813      	ldrb	r3, [r2, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d08f      	beq.n	8004bd8 <lv_indev_read_timer_cb+0x120>
        else if(indev_act->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d03f      	beq.n	8004d3c <lv_indev_read_timer_cb+0x284>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER) {
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	f43f af20 	beq.w	8004b02 <lv_indev_read_timer_cb+0x4a>
        else if(indev_act->driver->type == LV_INDEV_TYPE_BUTTON) {
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d1d6      	bne.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    if(i->btn_points == NULL) {
 8004cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0d3      	beq.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8004ccc:	9a02      	ldr	r2, [sp, #8]
 8004cce:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8004cd2:	f933 9022 	ldrsh.w	r9, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 8004cd6:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 8004cda:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	f000 8328 	beq.w	8005334 <lv_indev_read_timer_cb+0x87c>
    if(indev_reset_check(&i->proc)) return;
 8004ce4:	f104 0804 	add.w	r8, r4, #4
 8004ce8:	4640      	mov	r0, r8
 8004cea:	f7ff fafd 	bl	80042e8 <indev_reset_check>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d1c0      	bne.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    i->proc.types.pointer.act_point.x = x;
 8004cf2:	f8a4 9008 	strh.w	r9, [r4, #8]
    i->proc.types.pointer.act_point.y = y;
 8004cf6:	f8a4 a00a 	strh.w	sl, [r4, #10]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8004cfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	f000 8325 	beq.w	800534e <lv_indev_read_timer_cb+0x896>
    else indev_proc_release(&i->proc);
 8004d04:	4640      	mov	r0, r8
 8004d06:	f7ff fafb 	bl	8004300 <indev_proc_release>
    if(indev_reset_check(&i->proc)) return;
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	f7ff faec 	bl	80042e8 <indev_reset_check>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d1af      	bne.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8004d14:	8923      	ldrh	r3, [r4, #8]
 8004d16:	8223      	strh	r3, [r4, #16]
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8004d18:	8963      	ldrh	r3, [r4, #10]
 8004d1a:	8263      	strh	r3, [r4, #18]
 8004d1c:	e7aa      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 8004d1e:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8004d22:	f9bd 1000 	ldrsh.w	r1, [sp]
 8004d26:	f002 fdd7 	bl	80078d8 <lv_obj_set_pos>
 8004d2a:	e793      	b.n	8004c54 <lv_indev_read_timer_cb+0x19c>
        indev_proc_press(&i->proc);
 8004d2c:	1d20      	adds	r0, r4, #4
 8004d2e:	f7ff fc97 	bl	8004660 <indev_proc_press>
 8004d32:	e79b      	b.n	8004c6c <lv_indev_read_timer_cb+0x1b4>
 8004d34:	20002530 	.word	0x20002530
 8004d38:	20002534 	.word	0x20002534
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8004d3c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d02f      	beq.n	8004da4 <lv_indev_read_timer_cb+0x2ec>
    if(i->proc.wait_until_release) {
 8004d44:	7963      	ldrb	r3, [r4, #5]
 8004d46:	f013 0f08 	tst.w	r3, #8
 8004d4a:	d008      	beq.n	8004d5e <lv_indev_read_timer_cb+0x2a6>
        i->proc.wait_until_release      = 0;
 8004d4c:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp            = 0;
 8004d4e:	2200      	movs	r2, #0
 8004d50:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8004d52:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8004d56:	f362 0300 	bfi	r3, r2, #0, #1
 8004d5a:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8004d5c:	7222      	strb	r2, [r4, #8]
    lv_group_t * g = i->group;
 8004d5e:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
    if(g == NULL) return;
 8004d62:	f1b8 0f00 	cmp.w	r8, #0
 8004d66:	d085      	beq.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    indev_obj_act = lv_group_get_focused(g);
 8004d68:	4640      	mov	r0, r8
 8004d6a:	f7ff fa04 	bl	8004176 <lv_group_get_focused>
 8004d6e:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8004d70:	2800      	cmp	r0, #0
 8004d72:	f43f af7f 	beq.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
    bool dis = lv_obj_has_state(indev_obj_act, LV_STATE_DISABLED);
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	f001 fe39 	bl	80069ee <lv_obj_has_state>
 8004d7c:	4681      	mov	r9, r0
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8004d7e:	68e0      	ldr	r0, [r4, #12]
    i->proc.types.keypad.last_key = data->key;
 8004d80:	9a01      	ldr	r2, [sp, #4]
 8004d82:	60e2      	str	r2, [r4, #12]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8004d84:	7a21      	ldrb	r1, [r4, #8]
    i->proc.types.keypad.last_state = data->state;
 8004d86:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004d8a:	7223      	strb	r3, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d00e      	beq.n	8004dae <lv_indev_read_timer_cb+0x2f6>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 8004d90:	f1b9 0f00 	cmp.w	r9, #0
 8004d94:	d103      	bne.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
    else if(!dis && data->state == LV_INDEV_STATE_RELEASED && prev_state == LV_INDEV_STATE_PRESSED) {
 8004d96:	b913      	cbnz	r3, 8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004d98:	2901      	cmp	r1, #1
 8004d9a:	f000 80e7 	beq.w	8004f6c <lv_indev_read_timer_cb+0x4b4>
    indev_obj_act = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	e767      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8004da4:	7963      	ldrb	r3, [r4, #5]
 8004da6:	f013 0f08 	tst.w	r3, #8
 8004daa:	d0d8      	beq.n	8004d5e <lv_indev_read_timer_cb+0x2a6>
 8004dac:	e762      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8004dae:	b341      	cbz	r1, 8004e02 <lv_indev_read_timer_cb+0x34a>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 8004db0:	f1b9 0f00 	cmp.w	r9, #0
 8004db4:	d1f3      	bne.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004db6:	2901      	cmp	r1, #1
 8004db8:	d1f1      	bne.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
        if(data->key == LV_KEY_ENTER) {
 8004dba:	2a0a      	cmp	r2, #10
 8004dbc:	d07e      	beq.n	8004ebc <lv_indev_read_timer_cb+0x404>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8004dbe:	7963      	ldrb	r3, [r4, #5]
 8004dc0:	f013 0f01 	tst.w	r3, #1
 8004dc4:	f000 8086 	beq.w	8004ed4 <lv_indev_read_timer_cb+0x41c>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8004dc8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004dca:	f01b fbb2 	bl	8020532 <lv_tick_elaps>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	8bdb      	ldrh	r3, [r3, #30]
        else if(i->proc.long_pr_sent != 0 &&
 8004dd2:	4298      	cmp	r0, r3
 8004dd4:	d9e3      	bls.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8004dd6:	f01b fba8 	bl	802052a <lv_tick_get>
 8004dda:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8004ddc:	9901      	ldr	r1, [sp, #4]
 8004dde:	290a      	cmp	r1, #10
 8004de0:	f000 809c 	beq.w	8004f1c <lv_indev_read_timer_cb+0x464>
            else if(data->key == LV_KEY_NEXT) {
 8004de4:	2909      	cmp	r1, #9
 8004de6:	f000 80a5 	beq.w	8004f34 <lv_indev_read_timer_cb+0x47c>
            else if(data->key == LV_KEY_PREV) {
 8004dea:	290b      	cmp	r1, #11
 8004dec:	f000 80b0 	beq.w	8004f50 <lv_indev_read_timer_cb+0x498>
                lv_group_send_data(g, data->key);
 8004df0:	4640      	mov	r0, r8
 8004df2:	f7ff f9c6 	bl	8004182 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8004df6:	1d20      	adds	r0, r4, #4
 8004df8:	f7ff fa76 	bl	80042e8 <indev_reset_check>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d0ce      	beq.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004e00:	e738      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        i->proc.pr_timestamp = lv_tick_get();
 8004e02:	f01b fb92 	bl	802052a <lv_tick_get>
 8004e06:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_NEXT) {
 8004e08:	9901      	ldr	r1, [sp, #4]
 8004e0a:	2909      	cmp	r1, #9
 8004e0c:	d011      	beq.n	8004e32 <lv_indev_read_timer_cb+0x37a>
        else if(data->key == LV_KEY_PREV) {
 8004e0e:	290b      	cmp	r1, #11
 8004e10:	d01c      	beq.n	8004e4c <lv_indev_read_timer_cb+0x394>
        else if(!dis) {
 8004e12:	f1b9 0f00 	cmp.w	r9, #0
 8004e16:	d1c2      	bne.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
            if(data->key == LV_KEY_ENTER) {
 8004e18:	290a      	cmp	r1, #10
 8004e1a:	d024      	beq.n	8004e66 <lv_indev_read_timer_cb+0x3ae>
            else if(data->key == LV_KEY_ESC) {
 8004e1c:	291b      	cmp	r1, #27
 8004e1e:	d037      	beq.n	8004e90 <lv_indev_read_timer_cb+0x3d8>
                lv_group_send_data(g, data->key);
 8004e20:	4640      	mov	r0, r8
 8004e22:	f7ff f9ae 	bl	8004182 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8004e26:	1d20      	adds	r0, r4, #4
 8004e28:	f7ff fa5e 	bl	80042e8 <indev_reset_check>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d0b6      	beq.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004e30:	e720      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8004e32:	2100      	movs	r1, #0
 8004e34:	4640      	mov	r0, r8
 8004e36:	f7ff f9ba 	bl	80041ae <lv_group_set_editing>
            lv_group_focus_next(g);
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7ff f8d2 	bl	8003fe4 <lv_group_focus_next>
            if(indev_reset_check(&i->proc)) return;
 8004e40:	1d20      	adds	r0, r4, #4
 8004e42:	f7ff fa51 	bl	80042e8 <indev_reset_check>
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d0a9      	beq.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004e4a:	e713      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f7ff f9ad 	bl	80041ae <lv_group_set_editing>
            lv_group_focus_prev(g);
 8004e54:	4640      	mov	r0, r8
 8004e56:	f7ff f8d7 	bl	8004008 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 8004e5a:	1d20      	adds	r0, r4, #4
 8004e5c:	f7ff fa44 	bl	80042e8 <indev_reset_check>
 8004e60:	2800      	cmp	r0, #0
 8004e62:	d09c      	beq.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004e64:	e706      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                lv_group_send_data(g, LV_KEY_ENTER);
 8004e66:	4640      	mov	r0, r8
 8004e68:	f7ff f98b 	bl	8004182 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8004e6c:	3404      	adds	r4, #4
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff fa3a 	bl	80042e8 <indev_reset_check>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	f47f aefd 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                if(!dis) lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8004e7a:	682a      	ldr	r2, [r5, #0]
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	6838      	ldr	r0, [r7, #0]
 8004e80:	f7fe ff3e 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7ff fa2f 	bl	80042e8 <indev_reset_check>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d087      	beq.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004e8e:	e6f1      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                lv_group_send_data(g, LV_KEY_ESC);
 8004e90:	4640      	mov	r0, r8
 8004e92:	f7ff f976 	bl	8004182 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8004e96:	3404      	adds	r4, #4
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff fa25 	bl	80042e8 <indev_reset_check>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f47f aee8 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8004ea4:	682a      	ldr	r2, [r5, #0]
 8004ea6:	2120      	movs	r1, #32
 8004ea8:	6838      	ldr	r0, [r7, #0]
 8004eaa:	f7fe ff29 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7ff fa1a 	bl	80042e8 <indev_reset_check>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f43f af72 	beq.w	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004eba:	e6db      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8004ebc:	682a      	ldr	r2, [r5, #0]
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	6838      	ldr	r0, [r7, #0]
 8004ec2:	f7fe ff1d 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8004ec6:	1d20      	adds	r0, r4, #4
 8004ec8:	f7ff fa0e 	bl	80042e8 <indev_reset_check>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	f43f af76 	beq.w	8004dbe <lv_indev_read_timer_cb+0x306>
 8004ed2:	e6cf      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8004ed4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004ed6:	f01b fb2c 	bl	8020532 <lv_tick_elaps>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	8b9b      	ldrh	r3, [r3, #28]
 8004ede:	4298      	cmp	r0, r3
 8004ee0:	d916      	bls.n	8004f10 <lv_indev_read_timer_cb+0x458>
            i->proc.long_pr_sent = 1;
 8004ee2:	7963      	ldrb	r3, [r4, #5]
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	7163      	strb	r3, [r4, #5]
            if(data->key == LV_KEY_ENTER) {
 8004eea:	9b01      	ldr	r3, [sp, #4]
 8004eec:	2b0a      	cmp	r3, #10
 8004eee:	f47f af56 	bne.w	8004d9e <lv_indev_read_timer_cb+0x2e6>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8004ef2:	f01b fb1a 	bl	802052a <lv_tick_get>
 8004ef6:	64e0      	str	r0, [r4, #76]	; 0x4c
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8004ef8:	682a      	ldr	r2, [r5, #0]
 8004efa:	2105      	movs	r1, #5
 8004efc:	6838      	ldr	r0, [r7, #0]
 8004efe:	f7fe feff 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8004f02:	1d20      	adds	r0, r4, #4
 8004f04:	f7ff f9f0 	bl	80042e8 <indev_reset_check>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	f43f af48 	beq.w	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004f0e:	e6b1      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        else if(i->proc.long_pr_sent != 0 &&
 8004f10:	7963      	ldrb	r3, [r4, #5]
 8004f12:	f013 0f01 	tst.w	r3, #1
 8004f16:	f43f af42 	beq.w	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004f1a:	e755      	b.n	8004dc8 <lv_indev_read_timer_cb+0x310>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8004f1c:	682a      	ldr	r2, [r5, #0]
 8004f1e:	2106      	movs	r1, #6
 8004f20:	6838      	ldr	r0, [r7, #0]
 8004f22:	f7fe feed 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8004f26:	1d20      	adds	r0, r4, #4
 8004f28:	f7ff f9de 	bl	80042e8 <indev_reset_check>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f43f af36 	beq.w	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004f32:	e69f      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8004f34:	2100      	movs	r1, #0
 8004f36:	4640      	mov	r0, r8
 8004f38:	f7ff f939 	bl	80041ae <lv_group_set_editing>
                lv_group_focus_next(g);
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	f7ff f851 	bl	8003fe4 <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 8004f42:	1d20      	adds	r0, r4, #4
 8004f44:	f7ff f9d0 	bl	80042e8 <indev_reset_check>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	f43f af28 	beq.w	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004f4e:	e691      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8004f50:	2100      	movs	r1, #0
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff f92b 	bl	80041ae <lv_group_set_editing>
                lv_group_focus_prev(g);
 8004f58:	4640      	mov	r0, r8
 8004f5a:	f7ff f855 	bl	8004008 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 8004f5e:	1d20      	adds	r0, r4, #4
 8004f60:	f7ff f9c2 	bl	80042e8 <indev_reset_check>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	f43f af1a 	beq.w	8004d9e <lv_indev_read_timer_cb+0x2e6>
 8004f6a:	e683      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        data->key = prev_key;
 8004f6c:	9001      	str	r0, [sp, #4]
        if(data->key == LV_KEY_ENTER) {
 8004f6e:	280a      	cmp	r0, #10
 8004f70:	d006      	beq.n	8004f80 <lv_indev_read_timer_cb+0x4c8>
        i->proc.pr_timestamp = 0;
 8004f72:	2200      	movs	r2, #0
 8004f74:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 8004f76:	7963      	ldrb	r3, [r4, #5]
 8004f78:	f362 0300 	bfi	r3, r2, #0, #1
 8004f7c:	7163      	strb	r3, [r4, #5]
 8004f7e:	e70e      	b.n	8004d9e <lv_indev_read_timer_cb+0x2e6>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8004f80:	682a      	ldr	r2, [r5, #0]
 8004f82:	2108      	movs	r1, #8
 8004f84:	6838      	ldr	r0, [r7, #0]
 8004f86:	f7fe febb 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8004f8a:	f104 0804 	add.w	r8, r4, #4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f7ff f9aa 	bl	80042e8 <indev_reset_check>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f47f ae6d 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
            if(i->proc.long_pr_sent == 0) {
 8004f9a:	7963      	ldrb	r3, [r4, #5]
 8004f9c:	f013 0f01 	tst.w	r3, #1
 8004fa0:	d10a      	bne.n	8004fb8 <lv_indev_read_timer_cb+0x500>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8004fa2:	682a      	ldr	r2, [r5, #0]
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	6838      	ldr	r0, [r7, #0]
 8004fa8:	f7fe feaa 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8004fac:	4640      	mov	r0, r8
 8004fae:	f7ff f99b 	bl	80042e8 <indev_reset_check>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f47f ae5e 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8004fb8:	682a      	ldr	r2, [r5, #0]
 8004fba:	2107      	movs	r1, #7
 8004fbc:	6838      	ldr	r0, [r7, #0]
 8004fbe:	f7fe fe9f 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	f7ff f990 	bl	80042e8 <indev_reset_check>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d0d2      	beq.n	8004f72 <lv_indev_read_timer_cb+0x4ba>
 8004fcc:	e652      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8004fce:	7963      	ldrb	r3, [r4, #5]
 8004fd0:	f013 0f08 	tst.w	r3, #8
 8004fd4:	f43f ada7 	beq.w	8004b26 <lv_indev_read_timer_cb+0x6e>
 8004fd8:	e64c      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	d022      	beq.n	8005026 <lv_indev_read_timer_cb+0x56e>
    else if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_PRESSED) {
 8004fe0:	f1b9 0f01 	cmp.w	r9, #1
 8004fe4:	f47f adca 	bne.w	8004b7c <lv_indev_read_timer_cb+0xc4>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8004fe8:	7963      	ldrb	r3, [r4, #5]
 8004fea:	f013 0f01 	tst.w	r3, #1
 8004fee:	d077      	beq.n	80050e0 <lv_indev_read_timer_cb+0x628>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 8004ff0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004ff2:	f01b fa9e 	bl	8020532 <lv_tick_elaps>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	8bdb      	ldrh	r3, [r3, #30]
 8004ffa:	4298      	cmp	r0, r3
 8004ffc:	f67f adbe 	bls.w	8004b7c <lv_indev_read_timer_cb+0xc4>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8005000:	f01b fa93 	bl	802052a <lv_tick_get>
 8005004:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8005006:	9901      	ldr	r1, [sp, #4]
 8005008:	290a      	cmp	r1, #10
 800500a:	f000 80ad 	beq.w	8005168 <lv_indev_read_timer_cb+0x6b0>
            else if(data->key == LV_KEY_LEFT) {
 800500e:	2914      	cmp	r1, #20
 8005010:	f000 80b6 	beq.w	8005180 <lv_indev_read_timer_cb+0x6c8>
            else if(data->key == LV_KEY_RIGHT) {
 8005014:	2913      	cmp	r1, #19
 8005016:	f040 80b9 	bne.w	800518c <lv_indev_read_timer_cb+0x6d4>
                data->enc_diff++;
 800501a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800501e:	3301      	adds	r3, #1
 8005020:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005024:	e5aa      	b.n	8004b7c <lv_indev_read_timer_cb+0xc4>
        i->proc.pr_timestamp = lv_tick_get();
 8005026:	f01b fa80 	bl	802052a <lv_tick_get>
 800502a:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 800502c:	9901      	ldr	r1, [sp, #4]
 800502e:	290a      	cmp	r1, #10
 8005030:	d00f      	beq.n	8005052 <lv_indev_read_timer_cb+0x59a>
        else if(data->key == LV_KEY_LEFT) {
 8005032:	2914      	cmp	r1, #20
 8005034:	d031      	beq.n	800509a <lv_indev_read_timer_cb+0x5e2>
        else if(data->key == LV_KEY_RIGHT) {
 8005036:	2913      	cmp	r1, #19
 8005038:	d035      	beq.n	80050a6 <lv_indev_read_timer_cb+0x5ee>
        else if(data->key == LV_KEY_ESC) {
 800503a:	291b      	cmp	r1, #27
 800503c:	d039      	beq.n	80050b2 <lv_indev_read_timer_cb+0x5fa>
            lv_group_send_data(g, data->key);
 800503e:	4640      	mov	r0, r8
 8005040:	f7ff f89f 	bl	8004182 <lv_group_send_data>
            if(indev_reset_check(&i->proc)) return;
 8005044:	1d20      	adds	r0, r4, #4
 8005046:	f7ff f94f 	bl	80042e8 <indev_reset_check>
 800504a:	2800      	cmp	r0, #0
 800504c:	f43f ad96 	beq.w	8004b7c <lv_indev_read_timer_cb+0xc4>
 8005050:	e610      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8005052:	6838      	ldr	r0, [r7, #0]
 8005054:	f001 ffa5 	bl	8006fa2 <lv_obj_is_editable>
 8005058:	b130      	cbz	r0, 8005068 <lv_indev_read_timer_cb+0x5b0>
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 800505a:	4640      	mov	r0, r8
 800505c:	f7ff f914 	bl	8004288 <lv_group_get_editing>
 8005060:	2800      	cmp	r0, #0
 8005062:	f43f ad8b 	beq.w	8004b7c <lv_indev_read_timer_cb+0xc4>
 8005066:	e00c      	b.n	8005082 <lv_indev_read_timer_cb+0x5ca>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 8005068:	2110      	movs	r1, #16
 800506a:	6838      	ldr	r0, [r7, #0]
 800506c:	f001 fcb0 	bl	80069d0 <lv_obj_has_flag>
 8005070:	4681      	mov	r9, r0
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 8005072:	4640      	mov	r0, r8
 8005074:	f7ff f908 	bl	8004288 <lv_group_get_editing>
 8005078:	b918      	cbnz	r0, 8005082 <lv_indev_read_timer_cb+0x5ca>
 800507a:	f1b9 0f00 	cmp.w	r9, #0
 800507e:	f47f ad7d 	bne.w	8004b7c <lv_indev_read_timer_cb+0xc4>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8005082:	682a      	ldr	r2, [r5, #0]
 8005084:	2101      	movs	r1, #1
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f7fe fe3a 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800508c:	1d20      	adds	r0, r4, #4
 800508e:	f7ff f92b 	bl	80042e8 <indev_reset_check>
 8005092:	2800      	cmp	r0, #0
 8005094:	f43f ad72 	beq.w	8004b7c <lv_indev_read_timer_cb+0xc4>
 8005098:	e5ec      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
            data->enc_diff--;
 800509a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80050a4:	e56a      	b.n	8004b7c <lv_indev_read_timer_cb+0xc4>
            data->enc_diff++;
 80050a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80050b0:	e564      	b.n	8004b7c <lv_indev_read_timer_cb+0xc4>
            lv_group_send_data(g, LV_KEY_ESC);
 80050b2:	4640      	mov	r0, r8
 80050b4:	f7ff f865 	bl	8004182 <lv_group_send_data>
            if(indev_reset_check(&i->proc)) return;
 80050b8:	f104 0904 	add.w	r9, r4, #4
 80050bc:	4648      	mov	r0, r9
 80050be:	f7ff f913 	bl	80042e8 <indev_reset_check>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	f47f add6 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 80050c8:	682a      	ldr	r2, [r5, #0]
 80050ca:	2120      	movs	r1, #32
 80050cc:	6838      	ldr	r0, [r7, #0]
 80050ce:	f7fe fe17 	bl	8003d00 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80050d2:	4648      	mov	r0, r9
 80050d4:	f7ff f908 	bl	80042e8 <indev_reset_check>
 80050d8:	2800      	cmp	r0, #0
 80050da:	f43f ad4f 	beq.w	8004b7c <lv_indev_read_timer_cb+0xc4>
 80050de:	e5c9      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 80050e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80050e2:	f01b fa26 	bl	8020532 <lv_tick_elaps>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	8b9b      	ldrh	r3, [r3, #28]
 80050ea:	4298      	cmp	r0, r3
 80050ec:	d805      	bhi.n	80050fa <lv_indev_read_timer_cb+0x642>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 80050ee:	7963      	ldrb	r3, [r4, #5]
 80050f0:	f013 0f01 	tst.w	r3, #1
 80050f4:	f43f ad42 	beq.w	8004b7c <lv_indev_read_timer_cb+0xc4>
 80050f8:	e77a      	b.n	8004ff0 <lv_indev_read_timer_cb+0x538>
            i->proc.long_pr_sent = 1;
 80050fa:	7963      	ldrb	r3, [r4, #5]
 80050fc:	f043 0301 	orr.w	r3, r3, #1
 8005100:	7163      	strb	r3, [r4, #5]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 8005102:	f01b fa12 	bl	802052a <lv_tick_get>
 8005106:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 8005108:	9b01      	ldr	r3, [sp, #4]
 800510a:	2b0a      	cmp	r3, #10
 800510c:	d004      	beq.n	8005118 <lv_indev_read_timer_cb+0x660>
            i->proc.long_pr_sent = 1;
 800510e:	7963      	ldrb	r3, [r4, #5]
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	7163      	strb	r3, [r4, #5]
 8005116:	e531      	b.n	8004b7c <lv_indev_read_timer_cb+0xc4>
                bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8005118:	6838      	ldr	r0, [r7, #0]
 800511a:	f001 ff42 	bl	8006fa2 <lv_obj_is_editable>
 800511e:	b190      	cbz	r0, 8005146 <lv_indev_read_timer_cb+0x68e>
                    if(lv_group_get_obj_count(g) > 1) {
 8005120:	4640      	mov	r0, r8
 8005122:	f7ff f8b8 	bl	8004296 <lv_group_get_obj_count>
 8005126:	2801      	cmp	r0, #1
 8005128:	d9f1      	bls.n	800510e <lv_indev_read_timer_cb+0x656>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 800512a:	4640      	mov	r0, r8
 800512c:	f7ff f8ac 	bl	8004288 <lv_group_get_editing>
 8005130:	f080 0101 	eor.w	r1, r0, #1
 8005134:	b2c9      	uxtb	r1, r1
 8005136:	4640      	mov	r0, r8
 8005138:	f7ff f839 	bl	80041ae <lv_group_set_editing>
                        lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 800513c:	2120      	movs	r1, #32
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f001 fc3b 	bl	80069ba <lv_obj_clear_state>
 8005144:	e7e3      	b.n	800510e <lv_indev_read_timer_cb+0x656>
                                              lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 8005146:	2110      	movs	r1, #16
 8005148:	6838      	ldr	r0, [r7, #0]
 800514a:	f001 fc41 	bl	80069d0 <lv_obj_has_flag>
                if(editable_or_scrollable) {
 800514e:	2800      	cmp	r0, #0
 8005150:	d1e6      	bne.n	8005120 <lv_indev_read_timer_cb+0x668>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8005152:	682a      	ldr	r2, [r5, #0]
 8005154:	2105      	movs	r1, #5
 8005156:	6838      	ldr	r0, [r7, #0]
 8005158:	f7fe fdd2 	bl	8003d00 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 800515c:	1d20      	adds	r0, r4, #4
 800515e:	f7ff f8c3 	bl	80042e8 <indev_reset_check>
 8005162:	2800      	cmp	r0, #0
 8005164:	d0d3      	beq.n	800510e <lv_indev_read_timer_cb+0x656>
 8005166:	e585      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8005168:	682a      	ldr	r2, [r5, #0]
 800516a:	2106      	movs	r1, #6
 800516c:	6838      	ldr	r0, [r7, #0]
 800516e:	f7fe fdc7 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005172:	1d20      	adds	r0, r4, #4
 8005174:	f7ff f8b8 	bl	80042e8 <indev_reset_check>
 8005178:	2800      	cmp	r0, #0
 800517a:	f43f acff 	beq.w	8004b7c <lv_indev_read_timer_cb+0xc4>
 800517e:	e579      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                data->enc_diff--;
 8005180:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005184:	3b01      	subs	r3, #1
 8005186:	f8ad 300c 	strh.w	r3, [sp, #12]
 800518a:	e4f7      	b.n	8004b7c <lv_indev_read_timer_cb+0xc4>
                lv_group_send_data(g, data->key);
 800518c:	4640      	mov	r0, r8
 800518e:	f7fe fff8 	bl	8004182 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8005192:	1d20      	adds	r0, r4, #4
 8005194:	f7ff f8a8 	bl	80042e8 <indev_reset_check>
 8005198:	2800      	cmp	r0, #0
 800519a:	f43f acef 	beq.w	8004b7c <lv_indev_read_timer_cb+0xc4>
 800519e:	e569      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        if(data->key == LV_KEY_ENTER) {
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	2b0a      	cmp	r3, #10
 80051a4:	d006      	beq.n	80051b4 <lv_indev_read_timer_cb+0x6fc>
        i->proc.pr_timestamp = 0;
 80051a6:	2200      	movs	r2, #0
 80051a8:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 80051aa:	7963      	ldrb	r3, [r4, #5]
 80051ac:	f362 0300 	bfi	r3, r2, #0, #1
 80051b0:	7163      	strb	r3, [r4, #5]
 80051b2:	e4e3      	b.n	8004b7c <lv_indev_read_timer_cb+0xc4>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 80051b4:	f001 fef5 	bl	8006fa2 <lv_obj_is_editable>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d03a      	beq.n	8005232 <lv_indev_read_timer_cb+0x77a>
            else if(lv_group_get_editing(g)) {
 80051bc:	4640      	mov	r0, r8
 80051be:	f7ff f863 	bl	8004288 <lv_group_get_editing>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d068      	beq.n	8005298 <lv_indev_read_timer_cb+0x7e0>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 80051c6:	7963      	ldrb	r3, [r4, #5]
 80051c8:	f013 0f01 	tst.w	r3, #1
 80051cc:	d004      	beq.n	80051d8 <lv_indev_read_timer_cb+0x720>
 80051ce:	4640      	mov	r0, r8
 80051d0:	f7ff f861 	bl	8004296 <lv_group_get_obj_count>
 80051d4:	2801      	cmp	r0, #1
 80051d6:	d85a      	bhi.n	800528e <lv_indev_read_timer_cb+0x7d6>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80051d8:	682a      	ldr	r2, [r5, #0]
 80051da:	2108      	movs	r1, #8
 80051dc:	6838      	ldr	r0, [r7, #0]
 80051de:	f7fe fd8f 	bl	8003d00 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80051e2:	f104 0904 	add.w	r9, r4, #4
 80051e6:	4648      	mov	r0, r9
 80051e8:	f7ff f87e 	bl	80042e8 <indev_reset_check>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	f47f ad41 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 80051f2:	682a      	ldr	r2, [r5, #0]
 80051f4:	2104      	movs	r1, #4
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f7fe fd82 	bl	8003d00 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80051fc:	4648      	mov	r0, r9
 80051fe:	f7ff f873 	bl	80042e8 <indev_reset_check>
 8005202:	2800      	cmp	r0, #0
 8005204:	f47f ad36 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8005208:	682a      	ldr	r2, [r5, #0]
 800520a:	2107      	movs	r1, #7
 800520c:	6838      	ldr	r0, [r7, #0]
 800520e:	f7fe fd77 	bl	8003d00 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8005212:	4648      	mov	r0, r9
 8005214:	f7ff f868 	bl	80042e8 <indev_reset_check>
 8005218:	2800      	cmp	r0, #0
 800521a:	f47f ad2b 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                    lv_group_send_data(g, LV_KEY_ENTER);
 800521e:	210a      	movs	r1, #10
 8005220:	4640      	mov	r0, r8
 8005222:	f7fe ffae 	bl	8004182 <lv_group_send_data>
                    if(indev_reset_check(&i->proc)) return;
 8005226:	4648      	mov	r0, r9
 8005228:	f7ff f85e 	bl	80042e8 <indev_reset_check>
 800522c:	2800      	cmp	r0, #0
 800522e:	d0ba      	beq.n	80051a6 <lv_indev_read_timer_cb+0x6ee>
 8005230:	e520      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 8005232:	2110      	movs	r1, #16
 8005234:	6838      	ldr	r0, [r7, #0]
 8005236:	f001 fbcb 	bl	80069d0 <lv_obj_has_flag>
            if(editable_or_scrollable == false) {
 800523a:	2800      	cmp	r0, #0
 800523c:	d1be      	bne.n	80051bc <lv_indev_read_timer_cb+0x704>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 800523e:	682a      	ldr	r2, [r5, #0]
 8005240:	2108      	movs	r1, #8
 8005242:	6838      	ldr	r0, [r7, #0]
 8005244:	f7fe fd5c 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005248:	f104 0904 	add.w	r9, r4, #4
 800524c:	4648      	mov	r0, r9
 800524e:	f7ff f84b 	bl	80042e8 <indev_reset_check>
 8005252:	2800      	cmp	r0, #0
 8005254:	f47f ad0e 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8005258:	7963      	ldrb	r3, [r4, #5]
 800525a:	f013 0f01 	tst.w	r3, #1
 800525e:	d010      	beq.n	8005282 <lv_indev_read_timer_cb+0x7ca>
                if(indev_reset_check(&i->proc)) return;
 8005260:	4648      	mov	r0, r9
 8005262:	f7ff f841 	bl	80042e8 <indev_reset_check>
 8005266:	2800      	cmp	r0, #0
 8005268:	f47f ad04 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 800526c:	682a      	ldr	r2, [r5, #0]
 800526e:	2107      	movs	r1, #7
 8005270:	6838      	ldr	r0, [r7, #0]
 8005272:	f7fe fd45 	bl	8003d00 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005276:	4648      	mov	r0, r9
 8005278:	f7ff f836 	bl	80042e8 <indev_reset_check>
 800527c:	2800      	cmp	r0, #0
 800527e:	d092      	beq.n	80051a6 <lv_indev_read_timer_cb+0x6ee>
 8005280:	e4f8      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8005282:	682a      	ldr	r2, [r5, #0]
 8005284:	2104      	movs	r1, #4
 8005286:	6838      	ldr	r0, [r7, #0]
 8005288:	f7fe fd3a 	bl	8003d00 <lv_event_send>
 800528c:	e7e8      	b.n	8005260 <lv_indev_read_timer_cb+0x7a8>
                    lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 800528e:	2120      	movs	r1, #32
 8005290:	6838      	ldr	r0, [r7, #0]
 8005292:	f001 fb92 	bl	80069ba <lv_obj_clear_state>
 8005296:	e786      	b.n	80051a6 <lv_indev_read_timer_cb+0x6ee>
            else if(!i->proc.long_pr_sent) {
 8005298:	7963      	ldrb	r3, [r4, #5]
 800529a:	f013 0f01 	tst.w	r3, #1
 800529e:	d182      	bne.n	80051a6 <lv_indev_read_timer_cb+0x6ee>
                lv_group_set_editing(g, true); /*Set edit mode*/
 80052a0:	2101      	movs	r1, #1
 80052a2:	4640      	mov	r0, r8
 80052a4:	f7fe ff83 	bl	80041ae <lv_group_set_editing>
 80052a8:	e77d      	b.n	80051a6 <lv_indev_read_timer_cb+0x6ee>
                for(s = 0; s < -data->enc_diff; s++) {
 80052aa:	f04f 0900 	mov.w	r9, #0
                    lv_group_send_data(g, LV_KEY_LEFT);
 80052ae:	f04f 0a14 	mov.w	sl, #20
                    if(indev_reset_check(&i->proc)) return;
 80052b2:	3404      	adds	r4, #4
                    lv_group_send_data(g, LV_KEY_LEFT);
 80052b4:	4651      	mov	r1, sl
 80052b6:	4640      	mov	r0, r8
 80052b8:	f7fe ff63 	bl	8004182 <lv_group_send_data>
                    if(indev_reset_check(&i->proc)) return;
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff f813 	bl	80042e8 <indev_reset_check>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f47f acd6 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < -data->enc_diff; s++) {
 80052c8:	f109 0901 	add.w	r9, r9, #1
 80052cc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80052d0:	425b      	negs	r3, r3
 80052d2:	4599      	cmp	r9, r3
 80052d4:	dbee      	blt.n	80052b4 <lv_indev_read_timer_cb+0x7fc>
 80052d6:	e4cd      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
            if(data->enc_diff < 0) {
 80052d8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	db15      	blt.n	800530c <lv_indev_read_timer_cb+0x854>
                for(s = 0; s < data->enc_diff; s++) {
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f77f acc7 	ble.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
 80052e6:	f04f 0900 	mov.w	r9, #0
                    if(indev_reset_check(&i->proc)) return;
 80052ea:	3404      	adds	r4, #4
                    lv_group_focus_next(g);
 80052ec:	4640      	mov	r0, r8
 80052ee:	f7fe fe79 	bl	8003fe4 <lv_group_focus_next>
                    if(indev_reset_check(&i->proc)) return;
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7fe fff8 	bl	80042e8 <indev_reset_check>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	f47f acbb 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < data->enc_diff; s++) {
 80052fe:	f109 0901 	add.w	r9, r9, #1
 8005302:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005306:	4599      	cmp	r9, r3
 8005308:	dbf0      	blt.n	80052ec <lv_indev_read_timer_cb+0x834>
 800530a:	e4b3      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < -data->enc_diff; s++) {
 800530c:	f04f 0900 	mov.w	r9, #0
                    if(indev_reset_check(&i->proc)) return;
 8005310:	3404      	adds	r4, #4
                    lv_group_focus_prev(g);
 8005312:	4640      	mov	r0, r8
 8005314:	f7fe fe78 	bl	8004008 <lv_group_focus_prev>
                    if(indev_reset_check(&i->proc)) return;
 8005318:	4620      	mov	r0, r4
 800531a:	f7fe ffe5 	bl	80042e8 <indev_reset_check>
 800531e:	2800      	cmp	r0, #0
 8005320:	f47f aca8 	bne.w	8004c74 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < -data->enc_diff; s++) {
 8005324:	f109 0901 	add.w	r9, r9, #1
 8005328:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800532c:	425b      	negs	r3, r3
 800532e:	4599      	cmp	r9, r3
 8005330:	dbef      	blt.n	8005312 <lv_indev_read_timer_cb+0x85a>
 8005332:	e49f      	b.n	8004c74 <lv_indev_read_timer_cb+0x1bc>
        if(i->proc.types.pointer.last_point.x != x ||
 8005334:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8005338:	454b      	cmp	r3, r9
 800533a:	d104      	bne.n	8005346 <lv_indev_read_timer_cb+0x88e>
 800533c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8005340:	4553      	cmp	r3, sl
 8005342:	f43f accf 	beq.w	8004ce4 <lv_indev_read_timer_cb+0x22c>
            indev_proc_release(&i->proc);
 8005346:	1d20      	adds	r0, r4, #4
 8005348:	f7fe ffda 	bl	8004300 <indev_proc_release>
 800534c:	e4ca      	b.n	8004ce4 <lv_indev_read_timer_cb+0x22c>
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 800534e:	4640      	mov	r0, r8
 8005350:	f7ff f986 	bl	8004660 <indev_proc_press>
 8005354:	e4d9      	b.n	8004d0a <lv_indev_read_timer_cb+0x252>
    indev_act     = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	4a02      	ldr	r2, [pc, #8]	; (8005364 <lv_indev_read_timer_cb+0x8ac>)
 800535a:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
 800535c:	4a02      	ldr	r2, [pc, #8]	; (8005368 <lv_indev_read_timer_cb+0x8b0>)
 800535e:	6013      	str	r3, [r2, #0]
    INDEV_TRACE("finished");
 8005360:	f7ff bbbe 	b.w	8004ae0 <lv_indev_read_timer_cb+0x28>
 8005364:	20002530 	.word	0x20002530
 8005368:	20002534 	.word	0x20002534

0800536c <find_snap_point_y>:
 * @param ofs offset to snap points. Useful to get a snap point in an imagined case
 *            what if children are already moved by this value
 * @return the distance of the snap point.
 */
static lv_coord_t find_snap_point_y(const lv_obj_t * obj, lv_coord_t min, lv_coord_t max, lv_coord_t ofs)
{
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	b089      	sub	sp, #36	; 0x24
 8005372:	4606      	mov	r6, r0
 8005374:	9101      	str	r1, [sp, #4]
 8005376:	9203      	str	r2, [sp, #12]
 8005378:	9302      	str	r3, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_y(obj);
 800537a:	f003 ff8f 	bl	800929c <lv_obj_get_scroll_snap_y>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 800537e:	b918      	cbnz	r0, 8005388 <find_snap_point_y+0x1c>
 8005380:	2000      	movs	r0, #0
            }
        }
    }

    return dist == LV_COORD_MAX ? 0 : -dist;
}
 8005382:	b009      	add	sp, #36	; 0x24
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005388:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800538a:	2210      	movs	r2, #16
 800538c:	2100      	movs	r1, #0
 800538e:	4630      	mov	r0, r6
 8005390:	f005 fa2a 	bl	800a7e8 <lv_obj_get_style_prop>
 8005394:	9004      	str	r0, [sp, #16]
    return (lv_coord_t)v.num;
 8005396:	b203      	sxth	r3, r0
 8005398:	9307      	str	r3, [sp, #28]
}

static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800539a:	2211      	movs	r2, #17
 800539c:	2100      	movs	r1, #0
 800539e:	4630      	mov	r0, r6
 80053a0:	f005 fa22 	bl	800a7e8 <lv_obj_get_style_prop>
 80053a4:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)v.num;
 80053a6:	b203      	sxth	r3, r0
 80053a8:	9305      	str	r3, [sp, #20]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80053aa:	4630      	mov	r0, r6
 80053ac:	f006 f977 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80053b0:	4607      	mov	r7, r0
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d06e      	beq.n	8005494 <find_snap_point_y+0x128>
 80053b6:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 80053b8:	f641 79ff 	movw	r9, #8191	; 0x1fff
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80053bc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800549c <find_snap_point_y+0x130>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 80053c0:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80053c4:	e025      	b.n	8005412 <find_snap_point_y+0xa6>
                    y_child = child->coords.y2;
 80053c6:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
                    y_parent = obj->coords.y2 - pad_bottom;
 80053ca:	8b72      	ldrh	r2, [r6, #26]
 80053cc:	9906      	ldr	r1, [sp, #24]
 80053ce:	1a52      	subs	r2, r2, r1
 80053d0:	b212      	sxth	r2, r2
                    break;
 80053d2:	e03d      	b.n	8005450 <find_snap_point_y+0xe4>
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 80053d4:	8aeb      	ldrh	r3, [r5, #22]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80053d6:	8b6a      	ldrh	r2, [r5, #26]
 80053d8:	3201      	adds	r2, #1
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	b211      	sxth	r1, r2
 80053de:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80053e2:	440a      	add	r2, r1
 80053e4:	eb03 0362 	add.w	r3, r3, r2, asr #1
 80053e8:	b21b      	sxth	r3, r3
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 80053ea:	8af1      	ldrh	r1, [r6, #22]
 80053ec:	8b72      	ldrh	r2, [r6, #26]
 80053ee:	3201      	adds	r2, #1
 80053f0:	1a52      	subs	r2, r2, r1
 80053f2:	b212      	sxth	r2, r2
 80053f4:	9807      	ldr	r0, [sp, #28]
 80053f6:	1a12      	subs	r2, r2, r0
 80053f8:	9805      	ldr	r0, [sp, #20]
 80053fa:	1a12      	subs	r2, r2, r0
 80053fc:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8005400:	9a04      	ldr	r2, [sp, #16]
 8005402:	188a      	adds	r2, r1, r2
 8005404:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8005408:	b212      	sxth	r2, r2
                    break;
 800540a:	e021      	b.n	8005450 <find_snap_point_y+0xe4>
    for(i = 0; i < child_cnt; i++) {
 800540c:	3401      	adds	r4, #1
 800540e:	42a7      	cmp	r7, r4
 8005410:	d038      	beq.n	8005484 <find_snap_point_y+0x118>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005412:	68b3      	ldr	r3, [r6, #8]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800541a:	4641      	mov	r1, r8
 800541c:	4628      	mov	r0, r5
 800541e:	f001 fade 	bl	80069de <lv_obj_has_flag_any>
 8005422:	2800      	cmp	r0, #0
 8005424:	d1f2      	bne.n	800540c <find_snap_point_y+0xa0>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 8005426:	4659      	mov	r1, fp
 8005428:	4628      	mov	r0, r5
 800542a:	f001 fad1 	bl	80069d0 <lv_obj_has_flag>
 800542e:	2800      	cmp	r0, #0
 8005430:	d0ec      	beq.n	800540c <find_snap_point_y+0xa0>
            switch(align) {
 8005432:	f1ba 0f02 	cmp.w	sl, #2
 8005436:	d0c6      	beq.n	80053c6 <find_snap_point_y+0x5a>
 8005438:	f1ba 0f03 	cmp.w	sl, #3
 800543c:	d0ca      	beq.n	80053d4 <find_snap_point_y+0x68>
 800543e:	f1ba 0f01 	cmp.w	sl, #1
 8005442:	d1e3      	bne.n	800540c <find_snap_point_y+0xa0>
                    y_child = child->coords.y1;
 8005444:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
                    y_parent = obj->coords.y1 + pad_top;
 8005448:	8af2      	ldrh	r2, [r6, #22]
 800544a:	9904      	ldr	r1, [sp, #16]
 800544c:	440a      	add	r2, r1
 800544e:	b212      	sxth	r2, r2
            y_child += ofs;
 8005450:	9902      	ldr	r1, [sp, #8]
 8005452:	440b      	add	r3, r1
 8005454:	b299      	uxth	r1, r3
 8005456:	b21b      	sxth	r3, r3
            if(y_child >= min && y_child <= max) {
 8005458:	9801      	ldr	r0, [sp, #4]
 800545a:	4283      	cmp	r3, r0
 800545c:	dbd6      	blt.n	800540c <find_snap_point_y+0xa0>
 800545e:	9803      	ldr	r0, [sp, #12]
 8005460:	4283      	cmp	r3, r0
 8005462:	dcd3      	bgt.n	800540c <find_snap_point_y+0xa0>
                lv_coord_t y = y_child -  y_parent;
 8005464:	1a8a      	subs	r2, r1, r2
 8005466:	b212      	sxth	r2, r2
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 8005468:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800546c:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8005470:	ea89 73e9 	eor.w	r3, r9, r9, asr #31
 8005474:	eba3 73e9 	sub.w	r3, r3, r9, asr #31
 8005478:	b289      	uxth	r1, r1
 800547a:	b29b      	uxth	r3, r3
 800547c:	4299      	cmp	r1, r3
 800547e:	bf38      	it	cc
 8005480:	4691      	movcc	r9, r2
 8005482:	e7c3      	b.n	800540c <find_snap_point_y+0xa0>
    return dist == LV_COORD_MAX ? 0 : -dist;
 8005484:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005488:	4599      	cmp	r9, r3
 800548a:	d005      	beq.n	8005498 <find_snap_point_y+0x12c>
 800548c:	f1c9 0000 	rsb	r0, r9, #0
 8005490:	b200      	sxth	r0, r0
 8005492:	e776      	b.n	8005382 <find_snap_point_y+0x16>
 8005494:	2000      	movs	r0, #0
 8005496:	e774      	b.n	8005382 <find_snap_point_y+0x16>
 8005498:	2000      	movs	r0, #0
 800549a:	e772      	b.n	8005382 <find_snap_point_y+0x16>
 800549c:	00040001 	.word	0x00040001

080054a0 <find_snap_point_x>:
{
 80054a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	b089      	sub	sp, #36	; 0x24
 80054a6:	4606      	mov	r6, r0
 80054a8:	9101      	str	r1, [sp, #4]
 80054aa:	9203      	str	r2, [sp, #12]
 80054ac:	9302      	str	r3, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_x(obj);
 80054ae:	f003 feed 	bl	800928c <lv_obj_get_scroll_snap_x>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 80054b2:	b918      	cbnz	r0, 80054bc <find_snap_point_x+0x1c>
 80054b4:	2000      	movs	r0, #0
}
 80054b6:	b009      	add	sp, #36	; 0x24
 80054b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054bc:	4682      	mov	sl, r0
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80054be:	2212      	movs	r2, #18
 80054c0:	2100      	movs	r1, #0
 80054c2:	4630      	mov	r0, r6
 80054c4:	f005 f990 	bl	800a7e8 <lv_obj_get_style_prop>
 80054c8:	9004      	str	r0, [sp, #16]
    return (lv_coord_t)v.num;
 80054ca:	b203      	sxth	r3, r0
 80054cc:	9307      	str	r3, [sp, #28]
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80054ce:	2213      	movs	r2, #19
 80054d0:	2100      	movs	r1, #0
 80054d2:	4630      	mov	r0, r6
 80054d4:	f005 f988 	bl	800a7e8 <lv_obj_get_style_prop>
 80054d8:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)v.num;
 80054da:	b203      	sxth	r3, r0
 80054dc:	9305      	str	r3, [sp, #20]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80054de:	4630      	mov	r0, r6
 80054e0:	f006 f8dd 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80054e4:	4607      	mov	r7, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d06e      	beq.n	80055c8 <find_snap_point_x+0x128>
 80054ea:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 80054ec:	f641 79ff 	movw	r9, #8191	; 0x1fff
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80054f0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80055d0 <find_snap_point_x+0x130>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 80054f4:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80054f8:	e025      	b.n	8005546 <find_snap_point_x+0xa6>
                    x_child = child->coords.x2;
 80054fa:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
                    x_parent = obj->coords.x2 - pad_right;
 80054fe:	8b32      	ldrh	r2, [r6, #24]
 8005500:	9906      	ldr	r1, [sp, #24]
 8005502:	1a52      	subs	r2, r2, r1
 8005504:	b212      	sxth	r2, r2
                    break;
 8005506:	e03d      	b.n	8005584 <find_snap_point_x+0xe4>
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8005508:	8aab      	ldrh	r3, [r5, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800550a:	8b2a      	ldrh	r2, [r5, #24]
 800550c:	3201      	adds	r2, #1
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	b211      	sxth	r1, r2
 8005512:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005516:	440a      	add	r2, r1
 8005518:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800551c:	b21b      	sxth	r3, r3
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 800551e:	8ab1      	ldrh	r1, [r6, #20]
 8005520:	8b32      	ldrh	r2, [r6, #24]
 8005522:	3201      	adds	r2, #1
 8005524:	1a52      	subs	r2, r2, r1
 8005526:	b212      	sxth	r2, r2
 8005528:	9807      	ldr	r0, [sp, #28]
 800552a:	1a12      	subs	r2, r2, r0
 800552c:	9805      	ldr	r0, [sp, #20]
 800552e:	1a12      	subs	r2, r2, r0
 8005530:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8005534:	9a04      	ldr	r2, [sp, #16]
 8005536:	188a      	adds	r2, r1, r2
 8005538:	eb02 0260 	add.w	r2, r2, r0, asr #1
 800553c:	b212      	sxth	r2, r2
                    break;
 800553e:	e021      	b.n	8005584 <find_snap_point_x+0xe4>
    for(i = 0; i < child_cnt; i++) {
 8005540:	3401      	adds	r4, #1
 8005542:	42a7      	cmp	r7, r4
 8005544:	d038      	beq.n	80055b8 <find_snap_point_x+0x118>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005546:	68b3      	ldr	r3, [r6, #8]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800554e:	4641      	mov	r1, r8
 8005550:	4628      	mov	r0, r5
 8005552:	f001 fa44 	bl	80069de <lv_obj_has_flag_any>
 8005556:	2800      	cmp	r0, #0
 8005558:	d1f2      	bne.n	8005540 <find_snap_point_x+0xa0>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 800555a:	4659      	mov	r1, fp
 800555c:	4628      	mov	r0, r5
 800555e:	f001 fa37 	bl	80069d0 <lv_obj_has_flag>
 8005562:	2800      	cmp	r0, #0
 8005564:	d0ec      	beq.n	8005540 <find_snap_point_x+0xa0>
            switch(align) {
 8005566:	f1ba 0f02 	cmp.w	sl, #2
 800556a:	d0c6      	beq.n	80054fa <find_snap_point_x+0x5a>
 800556c:	f1ba 0f03 	cmp.w	sl, #3
 8005570:	d0ca      	beq.n	8005508 <find_snap_point_x+0x68>
 8005572:	f1ba 0f01 	cmp.w	sl, #1
 8005576:	d1e3      	bne.n	8005540 <find_snap_point_x+0xa0>
                    x_child = child->coords.x1;
 8005578:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
                    x_parent = obj->coords.x1 + pad_left;
 800557c:	8ab2      	ldrh	r2, [r6, #20]
 800557e:	9904      	ldr	r1, [sp, #16]
 8005580:	440a      	add	r2, r1
 8005582:	b212      	sxth	r2, r2
            x_child += ofs;
 8005584:	9902      	ldr	r1, [sp, #8]
 8005586:	440b      	add	r3, r1
 8005588:	b299      	uxth	r1, r3
 800558a:	b21b      	sxth	r3, r3
            if(x_child >= min && x_child <= max) {
 800558c:	9801      	ldr	r0, [sp, #4]
 800558e:	4283      	cmp	r3, r0
 8005590:	dbd6      	blt.n	8005540 <find_snap_point_x+0xa0>
 8005592:	9803      	ldr	r0, [sp, #12]
 8005594:	4283      	cmp	r3, r0
 8005596:	dcd3      	bgt.n	8005540 <find_snap_point_x+0xa0>
                lv_coord_t x = x_child -  x_parent;
 8005598:	1a8a      	subs	r2, r1, r2
 800559a:	b212      	sxth	r2, r2
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 800559c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80055a0:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80055a4:	ea89 73e9 	eor.w	r3, r9, r9, asr #31
 80055a8:	eba3 73e9 	sub.w	r3, r3, r9, asr #31
 80055ac:	b289      	uxth	r1, r1
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4299      	cmp	r1, r3
 80055b2:	bf38      	it	cc
 80055b4:	4691      	movcc	r9, r2
 80055b6:	e7c3      	b.n	8005540 <find_snap_point_x+0xa0>
    return dist == LV_COORD_MAX ? 0 : -dist;
 80055b8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80055bc:	4599      	cmp	r9, r3
 80055be:	d005      	beq.n	80055cc <find_snap_point_x+0x12c>
 80055c0:	f1c9 0000 	rsb	r0, r9, #0
 80055c4:	b200      	sxth	r0, r0
 80055c6:	e776      	b.n	80054b6 <find_snap_point_x+0x16>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e774      	b.n	80054b6 <find_snap_point_x+0x16>
 80055cc:	2000      	movs	r0, #0
 80055ce:	e772      	b.n	80054b6 <find_snap_point_x+0x16>
 80055d0:	00040001 	.word	0x00040001

080055d4 <elastic_diff>:
    return move;
}

static lv_coord_t elastic_diff(lv_obj_t * scroll_obj, lv_coord_t diff, lv_coord_t scroll_start, lv_coord_t scroll_end,
                               lv_dir_t dir)
{
 80055d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	4605      	mov	r5, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	4617      	mov	r7, r2
 80055de:	461e      	mov	r6, r3
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 80055e0:	2120      	movs	r1, #32
 80055e2:	f001 f9f5 	bl	80069d0 <lv_obj_has_flag>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f000 80c5 	beq.w	8005776 <elastic_diff+0x1a2>
        /*If there is snapping in the current direction don't use the elastic factor because
         *it's natural that the first and last items are scrolled (snapped) in.*/
        lv_scroll_snap_t snap;
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 80055ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	d02d      	beq.n	8005650 <elastic_diff+0x7c>
 80055f4:	4628      	mov	r0, r5
 80055f6:	f003 fe51 	bl	800929c <lv_obj_get_scroll_snap_y>
 80055fa:	4680      	mov	r8, r0

        lv_obj_t * act_obj = lv_indev_get_obj_act();
 80055fc:	f7fe ffee 	bl	80045dc <lv_indev_get_obj_act>
 8005600:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005602:	2210      	movs	r2, #16
 8005604:	2100      	movs	r1, #0
 8005606:	4628      	mov	r0, r5
 8005608:	f005 f8ee 	bl	800a7e8 <lv_obj_get_style_prop>
 800560c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800560e:	2211      	movs	r2, #17
 8005610:	2100      	movs	r1, #0
 8005612:	4628      	mov	r0, r5
 8005614:	f005 f8e8 	bl	800a7e8 <lv_obj_get_style_prop>
        }
        else {
            lv_coord_t pad_top = lv_obj_get_style_pad_top(scroll_obj, LV_PART_MAIN);
            lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(scroll_obj, LV_PART_MAIN);

            switch(snap) {
 8005618:	f1b8 0f02 	cmp.w	r8, #2
 800561c:	f000 8086 	beq.w	800572c <elastic_diff+0x158>
 8005620:	f1b8 0f03 	cmp.w	r8, #3
 8005624:	d059      	beq.n	80056da <elastic_diff+0x106>
 8005626:	f1b8 0f01 	cmp.w	r8, #1
 800562a:	d079      	beq.n	8005720 <elastic_diff+0x14c>
                    act_obj_point = act_obj->coords.y2;
                    break;
            }
        }

        if(scroll_end < 0) {
 800562c:	2e00      	cmp	r6, #0
 800562e:	f280 8088 	bge.w	8005742 <elastic_diff+0x16e>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;

            /*Rounding*/
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8005632:	2c00      	cmp	r4, #0
 8005634:	bfbc      	itt	lt
 8005636:	1ea0      	sublt	r0, r4, #2
 8005638:	b204      	sxthlt	r4, r0
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 800563a:	2c00      	cmp	r4, #0
 800563c:	bfc4      	itt	gt
 800563e:	1ca0      	addgt	r0, r4, #2
 8005640:	b204      	sxthgt	r4, r0
            return diff / ELASTIC_SLOWNESS_FACTOR;
 8005642:	4620      	mov	r0, r4
 8005644:	2c00      	cmp	r4, #0
 8005646:	bfb8      	it	lt
 8005648:	1ce0      	addlt	r0, r4, #3
 800564a:	f340 008f 	sbfx	r0, r0, #2, #16
 800564e:	e09b      	b.n	8005788 <elastic_diff+0x1b4>
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8005650:	4628      	mov	r0, r5
 8005652:	f003 fe1b 	bl	800928c <lv_obj_get_scroll_snap_x>
 8005656:	4680      	mov	r8, r0
        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8005658:	f7fe ffc0 	bl	80045dc <lv_indev_get_obj_act>
 800565c:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800565e:	2212      	movs	r2, #18
 8005660:	2100      	movs	r1, #0
 8005662:	4628      	mov	r0, r5
 8005664:	f005 f8c0 	bl	800a7e8 <lv_obj_get_style_prop>
 8005668:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800566a:	2213      	movs	r2, #19
 800566c:	2100      	movs	r1, #0
 800566e:	4628      	mov	r0, r5
 8005670:	f005 f8ba 	bl	800a7e8 <lv_obj_get_style_prop>
            switch(snap) {
 8005674:	f1b8 0f02 	cmp.w	r8, #2
 8005678:	d029      	beq.n	80056ce <elastic_diff+0xfa>
 800567a:	f1b8 0f03 	cmp.w	r8, #3
 800567e:	d008      	beq.n	8005692 <elastic_diff+0xbe>
 8005680:	f1b8 0f01 	cmp.w	r8, #1
 8005684:	d1d2      	bne.n	800562c <elastic_diff+0x58>
                    snap_point = scroll_obj->coords.x1 + pad_left;
 8005686:	8aab      	ldrh	r3, [r5, #20]
 8005688:	4453      	add	r3, sl
 800568a:	b21b      	sxth	r3, r3
                    act_obj_point = act_obj->coords.x1;
 800568c:	f9b9 2014 	ldrsh.w	r2, [r9, #20]
                    break;
 8005690:	e040      	b.n	8005714 <elastic_diff+0x140>
 8005692:	8aaa      	ldrh	r2, [r5, #20]
 8005694:	8b2b      	ldrh	r3, [r5, #24]
 8005696:	3301      	adds	r3, #1
 8005698:	1a9b      	subs	r3, r3, r2
                    snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
 800569a:	b21b      	sxth	r3, r3
 800569c:	fa0f f18a 	sxth.w	r1, sl
 80056a0:	1a5b      	subs	r3, r3, r1
 80056a2:	b200      	sxth	r0, r0
 80056a4:	1a1b      	subs	r3, r3, r0
 80056a6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80056aa:	4452      	add	r2, sl
 80056ac:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80056b0:	b21b      	sxth	r3, r3
 80056b2:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 80056b6:	f8b9 1018 	ldrh.w	r1, [r9, #24]
 80056ba:	3101      	adds	r1, #1
 80056bc:	1a89      	subs	r1, r1, r2
                    act_obj_point = lv_area_get_width(&act_obj->coords) / 2 + act_obj->coords.x1;
 80056be:	b208      	sxth	r0, r1
 80056c0:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 80056c4:	4401      	add	r1, r0
 80056c6:	eb02 0261 	add.w	r2, r2, r1, asr #1
 80056ca:	b212      	sxth	r2, r2
                    break;
 80056cc:	e022      	b.n	8005714 <elastic_diff+0x140>
                    snap_point = scroll_obj->coords.x2 - pad_right;
 80056ce:	8b2b      	ldrh	r3, [r5, #24]
 80056d0:	1a18      	subs	r0, r3, r0
 80056d2:	b203      	sxth	r3, r0
                    act_obj_point = act_obj->coords.x2;
 80056d4:	f9b9 2018 	ldrsh.w	r2, [r9, #24]
                    break;
 80056d8:	e01c      	b.n	8005714 <elastic_diff+0x140>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80056da:	8ae9      	ldrh	r1, [r5, #22]
 80056dc:	8b6a      	ldrh	r2, [r5, #26]
 80056de:	3201      	adds	r2, #1
 80056e0:	1a52      	subs	r2, r2, r1
                    snap_point = pad_top + (lv_area_get_height(&scroll_obj->coords) - pad_top - pad_bottom) / 2 + scroll_obj->coords.y1;
 80056e2:	b212      	sxth	r2, r2
 80056e4:	fa0f f389 	sxth.w	r3, r9
 80056e8:	1ad2      	subs	r2, r2, r3
 80056ea:	b200      	sxth	r0, r0
 80056ec:	1a13      	subs	r3, r2, r0
 80056ee:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80056f2:	4449      	add	r1, r9
 80056f4:	eb01 0363 	add.w	r3, r1, r3, asr #1
 80056f8:	b21b      	sxth	r3, r3
 80056fa:	f8ba 2016 	ldrh.w	r2, [sl, #22]
 80056fe:	f8ba 101a 	ldrh.w	r1, [sl, #26]
 8005702:	3101      	adds	r1, #1
 8005704:	1a89      	subs	r1, r1, r2
                    act_obj_point = lv_area_get_height(&act_obj->coords) / 2 + act_obj->coords.y1;
 8005706:	b208      	sxth	r0, r1
 8005708:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 800570c:	4401      	add	r1, r0
 800570e:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8005712:	b212      	sxth	r2, r2
        if(scroll_end < 0) {
 8005714:	2e00      	cmp	r6, #0
 8005716:	db0f      	blt.n	8005738 <elastic_diff+0x164>
        }
        else if(scroll_start < 0) {
 8005718:	2f00      	cmp	r7, #0
 800571a:	db28      	blt.n	800576e <elastic_diff+0x19a>
 800571c:	4620      	mov	r0, r4
 800571e:	e033      	b.n	8005788 <elastic_diff+0x1b4>
                    snap_point = scroll_obj->coords.y1 + pad_top;
 8005720:	8aeb      	ldrh	r3, [r5, #22]
 8005722:	444b      	add	r3, r9
 8005724:	b21b      	sxth	r3, r3
                    act_obj_point = act_obj->coords.y1;
 8005726:	f9ba 2016 	ldrsh.w	r2, [sl, #22]
                    break;
 800572a:	e7f3      	b.n	8005714 <elastic_diff+0x140>
                    snap_point = scroll_obj->coords.y2 - pad_bottom;
 800572c:	8b6b      	ldrh	r3, [r5, #26]
 800572e:	1a18      	subs	r0, r3, r0
 8005730:	b203      	sxth	r3, r0
                    act_obj_point = act_obj->coords.y2;
 8005732:	f9ba 201a 	ldrsh.w	r2, [sl, #26]
                    break;
 8005736:	e7ed      	b.n	8005714 <elastic_diff+0x140>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;
 8005738:	4293      	cmp	r3, r2
 800573a:	f6bf af7a 	bge.w	8005632 <elastic_diff+0x5e>
 800573e:	4620      	mov	r0, r4
 8005740:	e022      	b.n	8005788 <elastic_diff+0x1b4>
        else if(scroll_start < 0) {
 8005742:	2f00      	cmp	r7, #0
 8005744:	da22      	bge.n	800578c <elastic_diff+0x1b8>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 8005746:	f1b8 0f00 	cmp.w	r8, #0
 800574a:	d10e      	bne.n	800576a <elastic_diff+0x196>

            /*Rounding*/
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 800574c:	2c00      	cmp	r4, #0
 800574e:	bfbc      	itt	lt
 8005750:	1ea0      	sublt	r0, r4, #2
 8005752:	b204      	sxthlt	r4, r0
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 8005754:	2c00      	cmp	r4, #0
 8005756:	bfc4      	itt	gt
 8005758:	1ca0      	addgt	r0, r4, #2
 800575a:	b204      	sxthgt	r4, r0
            return diff / ELASTIC_SLOWNESS_FACTOR;
 800575c:	4620      	mov	r0, r4
 800575e:	2c00      	cmp	r4, #0
 8005760:	bfb8      	it	lt
 8005762:	1ce0      	addlt	r0, r4, #3
 8005764:	f340 008f 	sbfx	r0, r0, #2, #16
 8005768:	e00e      	b.n	8005788 <elastic_diff+0x1b4>
 800576a:	2200      	movs	r2, #0
 800576c:	4613      	mov	r3, r2
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 800576e:	4293      	cmp	r3, r2
 8005770:	ddec      	ble.n	800574c <elastic_diff+0x178>
 8005772:	4620      	mov	r0, r4
 8005774:	e008      	b.n	8005788 <elastic_diff+0x1b4>
        }
    }
    else {
        /*Scroll back to the boundary if required*/
        if(scroll_end + diff < 0) diff = - scroll_end;
 8005776:	42e6      	cmn	r6, r4
 8005778:	bf44      	itt	mi
 800577a:	4270      	negmi	r0, r6
 800577c:	b204      	sxthmi	r4, r0
        if(scroll_start - diff < 0) diff = scroll_start;
 800577e:	1b3b      	subs	r3, r7, r4
 8005780:	ea34 0023 	bics.w	r0, r4, r3, asr #32
 8005784:	bf28      	it	cs
 8005786:	4638      	movcs	r0, r7
    }

    return diff;
}
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	4620      	mov	r0, r4
 800578e:	e7fb      	b.n	8005788 <elastic_diff+0x1b4>

08005790 <_lv_indev_scroll_handler>:
    if(proc->types.pointer.vect.x == 0 && proc->types.pointer.vect.y == 0) {
 8005790:	6943      	ldr	r3, [r0, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8305 	beq.w	8005da2 <_lv_indev_scroll_handler+0x612>
{
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	b08d      	sub	sp, #52	; 0x34
 800579e:	4607      	mov	r7, r0
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80057a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80057a2:	9302      	str	r3, [sp, #8]
    if(scroll_obj == NULL) {
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a2 	beq.w	80058ee <_lv_indev_scroll_handler+0x15e>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 80057aa:	9e02      	ldr	r6, [sp, #8]
 80057ac:	f44f 7480 	mov.w	r4, #256	; 0x100
 80057b0:	2500      	movs	r5, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80057b2:	f04f 0b6d 	mov.w	fp, #109	; 0x6d
 80057b6:	46a8      	mov	r8, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80057b8:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80057bc:	465a      	mov	r2, fp
 80057be:	4641      	mov	r1, r8
 80057c0:	4630      	mov	r0, r6
 80057c2:	f005 f811 	bl	800a7e8 <lv_obj_get_style_prop>
        angle += lv_obj_get_style_transform_angle(parent, 0);
 80057c6:	4405      	add	r5, r0
 80057c8:	fa1f f985 	uxth.w	r9, r5
 80057cc:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80057ce:	4652      	mov	r2, sl
 80057d0:	4641      	mov	r1, r8
 80057d2:	4630      	mov	r0, r6
 80057d4:	f005 f808 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80057d8:	b200      	sxth	r0, r0
        zoom *= (lv_obj_get_style_transform_zoom(parent, 0) / 256);
 80057da:	2800      	cmp	r0, #0
 80057dc:	bfb8      	it	lt
 80057de:	30ff      	addlt	r0, #255	; 0xff
 80057e0:	1200      	asrs	r0, r0, #8
 80057e2:	fb00 f404 	mul.w	r4, r0, r4
 80057e6:	b224      	sxth	r4, r4
        parent = lv_obj_get_parent(parent);
 80057e8:	4630      	mov	r0, r6
 80057ea:	f005 ff3f 	bl	800b66c <lv_obj_get_parent>
    while(parent) {
 80057ee:	4606      	mov	r6, r0
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d1e3      	bne.n	80057bc <_lv_indev_scroll_handler+0x2c>
    if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 80057f4:	b915      	cbnz	r5, 80057fc <_lv_indev_scroll_handler+0x6c>
 80057f6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80057fa:	d011      	beq.n	8005820 <_lv_indev_scroll_handler+0x90>
        zoom = (256 * 256) / zoom;
 80057fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005800:	fb92 f2f4 	sdiv	r2, r2, r4
        lv_point_t pivot = { 0, 0 };
 8005804:	2300      	movs	r3, #0
 8005806:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800580a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        angle = -angle;
 800580e:	f1c9 0100 	rsb	r1, r9, #0
        lv_point_transform(&proc->types.pointer.vect, angle, zoom, &pivot);
 8005812:	ab0b      	add	r3, sp, #44	; 0x2c
 8005814:	b212      	sxth	r2, r2
 8005816:	b209      	sxth	r1, r1
 8005818:	f107 0014 	add.w	r0, r7, #20
 800581c:	f01b fae0 	bl	8020de0 <lv_point_transform>
    if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8005820:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2b03      	cmp	r3, #3
 800582a:	f000 8289 	beq.w	8005d40 <_lv_indev_scroll_handler+0x5b0>
        lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 800582e:	9d02      	ldr	r5, [sp, #8]
 8005830:	4628      	mov	r0, r5
 8005832:	f003 fd4b 	bl	80092cc <lv_obj_get_scroll_top>
 8005836:	4604      	mov	r4, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8005838:	4628      	mov	r0, r5
 800583a:	f003 fd4f 	bl	80092dc <lv_obj_get_scroll_bottom>
 800583e:	4603      	mov	r3, r0
        diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 8005840:	220c      	movs	r2, #12
 8005842:	9200      	str	r2, [sp, #0]
 8005844:	4622      	mov	r2, r4
 8005846:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800584a:	4628      	mov	r0, r5
 800584c:	f7ff fec2 	bl	80055d4 <elastic_diff>
 8005850:	4604      	mov	r4, r0
    lv_coord_t diff_x = 0;
 8005852:	2500      	movs	r5, #0
    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8005854:	9802      	ldr	r0, [sp, #8]
 8005856:	f003 fd11 	bl	800927c <lv_obj_get_scroll_dir>
    if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 800585a:	f010 0f01 	tst.w	r0, #1
 800585e:	bf04      	itt	eq
 8005860:	ea05 75e5 	andeq.w	r5, r5, r5, asr #31
 8005864:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_RIGHT)  == 0 && diff_x < 0) diff_x = 0;
 8005866:	f010 0f02 	tst.w	r0, #2
 800586a:	bf04      	itt	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8005872:	f010 0f04 	tst.w	r0, #4
 8005876:	bf04      	itt	eq
 8005878:	ea04 74e4 	andeq.w	r4, r4, r4, asr #31
 800587c:	b224      	sxtheq	r4, r4
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && diff_y < 0) diff_y = 0;
 800587e:	f010 0f08 	tst.w	r0, #8
 8005882:	bf04      	itt	eq
 8005884:	ea24 74e4 	biceq.w	r4, r4, r4, asr #31
 8005888:	b224      	sxtheq	r4, r4
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 800588a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800588e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005892:	18e1      	adds	r1, r4, r3
 8005894:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8005896:	bfbc      	itt	lt
 8005898:	1ad2      	sublt	r2, r2, r3
 800589a:	b214      	sxthlt	r4, r2
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 800589c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80058a0:	18e1      	adds	r1, r4, r3
 80058a2:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 80058a4:	bfc4      	itt	gt
 80058a6:	1ad3      	subgt	r3, r2, r3
 80058a8:	b21c      	sxthgt	r4, r3
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 80058aa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80058ae:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80058b2:	18e9      	adds	r1, r5, r3
 80058b4:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 80058b6:	bfbc      	itt	lt
 80058b8:	1ad2      	sublt	r2, r2, r3
 80058ba:	b215      	sxthlt	r5, r2
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 80058bc:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80058c0:	18e9      	adds	r1, r5, r3
 80058c2:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 80058c4:	bfc4      	itt	gt
 80058c6:	1ad3      	subgt	r3, r2, r3
 80058c8:	b21d      	sxthgt	r5, r3
    _lv_obj_scroll_by_raw(scroll_obj, diff_x, diff_y);
 80058ca:	4622      	mov	r2, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	9802      	ldr	r0, [sp, #8]
 80058d0:	f003 fe7e 	bl	80095d0 <_lv_obj_scroll_by_raw>
    if(proc->reset_query) return;
 80058d4:	787b      	ldrb	r3, [r7, #1]
 80058d6:	f013 0f02 	tst.w	r3, #2
 80058da:	d105      	bne.n	80058e8 <_lv_indev_scroll_handler+0x158>
    proc->types.pointer.scroll_sum.x += diff_x;
 80058dc:	8b38      	ldrh	r0, [r7, #24]
 80058de:	4405      	add	r5, r0
 80058e0:	833d      	strh	r5, [r7, #24]
    proc->types.pointer.scroll_sum.y += diff_y;
 80058e2:	8b78      	ldrh	r0, [r7, #26]
 80058e4:	4404      	add	r4, r0
 80058e6:	837c      	strh	r4, [r7, #26]
}
 80058e8:	b00d      	add	sp, #52	; 0x34
 80058ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev_act = lv_indev_get_act();
 80058ee:	f7fe fdad 	bl	800444c <lv_indev_get_act>
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 80058f2:	6803      	ldr	r3, [r0, #0]
 80058f4:	7e1b      	ldrb	r3, [r3, #24]
 80058f6:	9303      	str	r3, [sp, #12]
    lv_obj_t * obj_act = proc->types.pointer.act_obj;
 80058f8:	f8d7 a024 	ldr.w	sl, [r7, #36]	; 0x24
    proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 80058fc:	8b3b      	ldrh	r3, [r7, #24]
 80058fe:	8aba      	ldrh	r2, [r7, #20]
 8005900:	4413      	add	r3, r2
 8005902:	833b      	strh	r3, [r7, #24]
    proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 8005904:	8b7b      	ldrh	r3, [r7, #26]
 8005906:	8afa      	ldrh	r2, [r7, #22]
 8005908:	4413      	add	r3, r2
 800590a:	837b      	strh	r3, [r7, #26]
    while(obj_act) {
 800590c:	f1ba 0f00 	cmp.w	sl, #0
 8005910:	d0ea      	beq.n	80058e8 <_lv_indev_scroll_handler+0x158>
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 8005912:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005916:	9307      	str	r3, [sp, #28]
    lv_dir_t dir_candidate = LV_DIR_NONE;
 8005918:	2300      	movs	r3, #0
 800591a:	9306      	str	r3, [sp, #24]
    bool ver_en = false;
 800591c:	9304      	str	r3, [sp, #16]
    bool hor_en = false;
 800591e:	9305      	str	r3, [sp, #20]
        lv_point_t pivot = { 0, 0 };
 8005920:	469b      	mov	fp, r3
 8005922:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
 8005926:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
        while(parent) {
 800592a:	f1ba 0f00 	cmp.w	sl, #0
 800592e:	f000 8230 	beq.w	8005d92 <_lv_indev_scroll_handler+0x602>
 8005932:	4656      	mov	r6, sl
        int16_t zoom = 256;
 8005934:	f44f 7480 	mov.w	r4, #256	; 0x100
        int16_t angle = 0;
 8005938:	465d      	mov	r5, fp
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800593a:	f04f 096c 	mov.w	r9, #108	; 0x6c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800593e:	226d      	movs	r2, #109	; 0x6d
 8005940:	4659      	mov	r1, fp
 8005942:	4630      	mov	r0, r6
 8005944:	f004 ff50 	bl	800a7e8 <lv_obj_get_style_prop>
            angle += lv_obj_get_style_transform_angle(parent, 0);
 8005948:	4405      	add	r5, r0
 800594a:	fa1f f885 	uxth.w	r8, r5
 800594e:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8005950:	464a      	mov	r2, r9
 8005952:	4659      	mov	r1, fp
 8005954:	4630      	mov	r0, r6
 8005956:	f004 ff47 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800595a:	b200      	sxth	r0, r0
            zoom *= (lv_obj_get_style_transform_zoom(parent, 0) / 256);
 800595c:	2800      	cmp	r0, #0
 800595e:	bfb8      	it	lt
 8005960:	30ff      	addlt	r0, #255	; 0xff
 8005962:	1200      	asrs	r0, r0, #8
 8005964:	fb00 f404 	mul.w	r4, r0, r4
 8005968:	b224      	sxth	r4, r4
            parent = lv_obj_get_parent(parent);
 800596a:	4630      	mov	r0, r6
 800596c:	f005 fe7e 	bl	800b66c <lv_obj_get_parent>
        while(parent) {
 8005970:	4606      	mov	r6, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d1e3      	bne.n	800593e <_lv_indev_scroll_handler+0x1ae>
        lv_point_t obj_scroll_sum = proc->types.pointer.scroll_sum;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	930b      	str	r3, [sp, #44]	; 0x2c
        if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 800597a:	b915      	cbnz	r5, 8005982 <_lv_indev_scroll_handler+0x1f2>
 800597c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8005980:	d00b      	beq.n	800599a <_lv_indev_scroll_handler+0x20a>
            zoom = (256 * 256) / zoom;
 8005982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005986:	fb92 f2f4 	sdiv	r2, r2, r4
            angle = -angle;
 800598a:	f1c8 0100 	rsb	r1, r8, #0
            lv_point_transform(&obj_scroll_sum, angle, zoom, &pivot);
 800598e:	ab0a      	add	r3, sp, #40	; 0x28
 8005990:	b212      	sxth	r2, r2
 8005992:	b209      	sxth	r1, r1
 8005994:	a80b      	add	r0, sp, #44	; 0x2c
 8005996:	f01b fa23 	bl	8020de0 <lv_point_transform>
        if(LV_ABS(obj_scroll_sum.x) > LV_ABS(obj_scroll_sum.y)) {
 800599a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 800599e:	2a00      	cmp	r2, #0
 80059a0:	bfb8      	it	lt
 80059a2:	4252      	neglt	r2, r2
 80059a4:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bfb8      	it	lt
 80059ac:	425b      	neglt	r3, r3
 80059ae:	b292      	uxth	r2, r2
 80059b0:	b29b      	uxth	r3, r3
            ver_en = true;
 80059b2:	9904      	ldr	r1, [sp, #16]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	bf98      	it	ls
 80059b8:	2101      	movls	r1, #1
 80059ba:	9104      	str	r1, [sp, #16]
 80059bc:	9c05      	ldr	r4, [sp, #20]
 80059be:	429a      	cmp	r2, r3
 80059c0:	bf88      	it	hi
 80059c2:	2401      	movhi	r4, #1
 80059c4:	9405      	str	r4, [sp, #20]
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLLABLE) == false) {
 80059c6:	2110      	movs	r1, #16
 80059c8:	4650      	mov	r0, sl
 80059ca:	f001 f801 	bl	80069d0 <lv_obj_has_flag>
 80059ce:	b9b8      	cbnz	r0, 8005a00 <_lv_indev_scroll_handler+0x270>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 80059d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059d4:	4650      	mov	r0, sl
 80059d6:	f000 fffb 	bl	80069d0 <lv_obj_has_flag>
 80059da:	b910      	cbnz	r0, 80059e2 <_lv_indev_scroll_handler+0x252>
 80059dc:	2c00      	cmp	r4, #0
 80059de:	f040 80b2 	bne.w	8005b46 <_lv_indev_scroll_handler+0x3b6>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 80059e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059e6:	4650      	mov	r0, sl
 80059e8:	f000 fff2 	bl	80069d0 <lv_obj_has_flag>
 80059ec:	b918      	cbnz	r0, 80059f6 <_lv_indev_scroll_handler+0x266>
 80059ee:	9b04      	ldr	r3, [sp, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f040 80a8 	bne.w	8005b46 <_lv_indev_scroll_handler+0x3b6>
            obj_act = lv_obj_get_parent(obj_act);
 80059f6:	4650      	mov	r0, sl
 80059f8:	f005 fe38 	bl	800b66c <lv_obj_get_parent>
 80059fc:	4682      	mov	sl, r0
            continue;
 80059fe:	e09e      	b.n	8005b3e <_lv_indev_scroll_handler+0x3ae>
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 8005a00:	4650      	mov	r0, sl
 8005a02:	f003 fc3b 	bl	800927c <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 8005a06:	f010 0f01 	tst.w	r0, #1
 8005a0a:	9b05      	ldr	r3, [sp, #20]
 8005a0c:	bf14      	ite	ne
 8005a0e:	461e      	movne	r6, r3
 8005a10:	2600      	moveq	r6, #0
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 8005a12:	f010 0f02 	tst.w	r0, #2
 8005a16:	bf08      	it	eq
 8005a18:	2300      	moveq	r3, #0
 8005a1a:	9309      	str	r3, [sp, #36]	; 0x24
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 8005a1c:	f010 0f04 	tst.w	r0, #4
 8005a20:	9b04      	ldr	r3, [sp, #16]
 8005a22:	bf14      	ite	ne
 8005a24:	461c      	movne	r4, r3
 8005a26:	2400      	moveq	r4, #0
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 8005a28:	f010 0f08 	tst.w	r0, #8
 8005a2c:	bf14      	ite	ne
 8005a2e:	461d      	movne	r5, r3
 8005a30:	2500      	moveq	r5, #0
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 8005a32:	4650      	mov	r0, sl
 8005a34:	f003 fc4a 	bl	80092cc <lv_obj_get_scroll_top>
 8005a38:	4680      	mov	r8, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj_act);
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	f003 fc4e 	bl	80092dc <lv_obj_get_scroll_bottom>
 8005a40:	9008      	str	r0, [sp, #32]
        lv_coord_t sl = lv_obj_get_scroll_left(obj_act);
 8005a42:	4650      	mov	r0, sl
 8005a44:	f003 fcb4 	bl	80093b0 <lv_obj_get_scroll_left>
 8005a48:	4681      	mov	r9, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f003 fd24 	bl	8009498 <lv_obj_get_scroll_right>
        if((st > 0 || sb > 0)  &&
 8005a50:	f1b8 0f00 	cmp.w	r8, #0
 8005a54:	f340 80b8 	ble.w	8005bc8 <_lv_indev_scroll_handler+0x438>
 8005a58:	b12c      	cbz	r4, 8005a66 <_lv_indev_scroll_handler+0x2d6>
           ((up_en    && obj_scroll_sum.y >=   scroll_limit) ||
 8005a5a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8005a5e:	9a07      	ldr	r2, [sp, #28]
 8005a60:	4293      	cmp	r3, r2
 8005a62:	f280 80b6 	bge.w	8005bd2 <_lv_indev_scroll_handler+0x442>
 8005a66:	b16d      	cbz	r5, 8005a84 <_lv_indev_scroll_handler+0x2f4>
            (down_en  && obj_scroll_sum.y <= - scroll_limit))) {
 8005a68:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8005a6c:	9b03      	ldr	r3, [sp, #12]
 8005a6e:	425b      	negs	r3, r3
 8005a70:	9902      	ldr	r1, [sp, #8]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	bfd8      	it	le
 8005a76:	4651      	movle	r1, sl
 8005a78:	9102      	str	r1, [sp, #8]
 8005a7a:	9906      	ldr	r1, [sp, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	bfd8      	it	le
 8005a80:	210c      	movle	r1, #12
 8005a82:	9106      	str	r1, [sp, #24]
        if((sl > 0 || sr > 0)  &&
 8005a84:	f1b9 0f00 	cmp.w	r9, #0
 8005a88:	f340 80a8 	ble.w	8005bdc <_lv_indev_scroll_handler+0x44c>
 8005a8c:	b12e      	cbz	r6, 8005a9a <_lv_indev_scroll_handler+0x30a>
           ((left_en   && obj_scroll_sum.x >=   scroll_limit) ||
 8005a8e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8005a92:	9a07      	ldr	r2, [sp, #28]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	f280 80a5 	bge.w	8005be4 <_lv_indev_scroll_handler+0x454>
 8005a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9c:	b16b      	cbz	r3, 8005aba <_lv_indev_scroll_handler+0x32a>
            (right_en  && obj_scroll_sum.x <= - scroll_limit))) {
 8005a9e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	425b      	negs	r3, r3
 8005aa6:	9902      	ldr	r1, [sp, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	bfd8      	it	le
 8005aac:	4651      	movle	r1, sl
 8005aae:	9102      	str	r1, [sp, #8]
 8005ab0:	9906      	ldr	r1, [sp, #24]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	bfd8      	it	le
 8005ab6:	2103      	movle	r1, #3
 8005ab8:	9106      	str	r1, [sp, #24]
        if(st <= 0) up_en = false;
 8005aba:	f1b8 0f00 	cmp.w	r8, #0
 8005abe:	bfd8      	it	le
 8005ac0:	2400      	movle	r4, #0
        if(sb <= 0) down_en = false;
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfd8      	it	le
 8005ac8:	2500      	movle	r5, #0
        if(sl <= 0) left_en = false;
 8005aca:	f1b9 0f00 	cmp.w	r9, #0
 8005ace:	f340 8163 	ble.w	8005d98 <_lv_indev_scroll_handler+0x608>
        if(sr <= 0) right_en = false;
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	f340 8148 	ble.w	8005d68 <_lv_indev_scroll_handler+0x5d8>
        if((left_en  && obj_scroll_sum.x >=   scroll_limit) ||
 8005ad8:	b12e      	cbz	r6, 8005ae6 <_lv_indev_scroll_handler+0x356>
 8005ada:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8005ade:	9a07      	ldr	r2, [sp, #28]
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	f280 814a 	bge.w	8005d7a <_lv_indev_scroll_handler+0x5ea>
 8005ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae8:	b133      	cbz	r3, 8005af8 <_lv_indev_scroll_handler+0x368>
           (right_en && obj_scroll_sum.x <= - scroll_limit) ||
 8005aea:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	425b      	negs	r3, r3
 8005af2:	429a      	cmp	r2, r3
 8005af4:	f340 8141 	ble.w	8005d7a <_lv_indev_scroll_handler+0x5ea>
 8005af8:	b12c      	cbz	r4, 8005b06 <_lv_indev_scroll_handler+0x376>
           (up_en    && obj_scroll_sum.y >=   scroll_limit) ||
 8005afa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8005afe:	9a07      	ldr	r2, [sp, #28]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	f280 813a 	bge.w	8005d7a <_lv_indev_scroll_handler+0x5ea>
 8005b06:	b135      	cbz	r5, 8005b16 <_lv_indev_scroll_handler+0x386>
           (down_en  && obj_scroll_sum.y <= - scroll_limit)) {
 8005b08:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	425b      	negs	r3, r3
 8005b10:	429a      	cmp	r2, r3
 8005b12:	f340 8132 	ble.w	8005d7a <_lv_indev_scroll_handler+0x5ea>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 8005b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f000 ff58 	bl	80069d0 <lv_obj_has_flag>
 8005b20:	b908      	cbnz	r0, 8005b26 <_lv_indev_scroll_handler+0x396>
 8005b22:	9b05      	ldr	r3, [sp, #20]
 8005b24:	b97b      	cbnz	r3, 8005b46 <_lv_indev_scroll_handler+0x3b6>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 8005b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	f000 ff50 	bl	80069d0 <lv_obj_has_flag>
 8005b30:	b908      	cbnz	r0, 8005b36 <_lv_indev_scroll_handler+0x3a6>
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	b93b      	cbnz	r3, 8005b46 <_lv_indev_scroll_handler+0x3b6>
        obj_act = lv_obj_get_parent(obj_act);
 8005b36:	4650      	mov	r0, sl
 8005b38:	f005 fd98 	bl	800b66c <lv_obj_get_parent>
 8005b3c:	4682      	mov	sl, r0
    while(obj_act) {
 8005b3e:	f1ba 0f00 	cmp.w	sl, #0
 8005b42:	f47f aeee 	bne.w	8005922 <_lv_indev_scroll_handler+0x192>
    if(obj_candidate) {
 8005b46:	9a02      	ldr	r2, [sp, #8]
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	f43f aecd 	beq.w	80058e8 <_lv_indev_scroll_handler+0x158>
        proc->types.pointer.scroll_dir = dir_candidate;
 8005b4e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005b52:	9906      	ldr	r1, [sp, #24]
 8005b54:	f361 0303 	bfi	r3, r1, #0, #4
 8005b58:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        proc->types.pointer.scroll_obj = obj_candidate;
 8005b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
        proc->types.pointer.scroll_sum.x = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	833b      	strh	r3, [r7, #24]
        proc->types.pointer.scroll_sum.y = 0;
 8005b62:	837b      	strh	r3, [r7, #26]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	4610      	mov	r0, r2
 8005b68:	f000 ff32 	bl	80069d0 <lv_obj_has_flag>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d13e      	bne.n	8005bee <_lv_indev_scroll_handler+0x45e>
        lv_area_set(&proc->types.pointer.scroll_area, LV_COORD_MIN, LV_COORD_MIN, LV_COORD_MAX, LV_COORD_MAX);
 8005b70:	498c      	ldr	r1, [pc, #560]	; (8005da4 <_lv_indev_scroll_handler+0x614>)
 8005b72:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	460a      	mov	r2, r1
 8005b7a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005b7e:	f01a ff21 	bl	80209c4 <lv_area_set>
    if(proc->types.pointer.scroll_area.x1 == 0) proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 8005b82:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005b86:	b913      	cbnz	r3, 8005b8e <_lv_indev_scroll_handler+0x3fe>
 8005b88:	f24e 0301 	movw	r3, #57345	; 0xe001
 8005b8c:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8005b8e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8005b92:	b913      	cbnz	r3, 8005b9a <_lv_indev_scroll_handler+0x40a>
 8005b94:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005b98:	873b      	strh	r3, [r7, #56]	; 0x38
    if(proc->types.pointer.scroll_area.y1 == 0) proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 8005b9a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b9e:	b913      	cbnz	r3, 8005ba6 <_lv_indev_scroll_handler+0x416>
 8005ba0:	f24e 0301 	movw	r3, #57345	; 0xe001
 8005ba4:	86fb      	strh	r3, [r7, #54]	; 0x36
    if(proc->types.pointer.scroll_area.y2 == 0) proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 8005ba6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8005baa:	b913      	cbnz	r3, 8005bb2 <_lv_indev_scroll_handler+0x422>
 8005bac:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005bb0:	877b      	strh	r3, [r7, #58]	; 0x3a
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2109      	movs	r1, #9
 8005bb6:	9802      	ldr	r0, [sp, #8]
 8005bb8:	f7fe f8a2 	bl	8003d00 <lv_event_send>
        if(proc->reset_query) return;
 8005bbc:	787b      	ldrb	r3, [r7, #1]
 8005bbe:	f013 0f02 	tst.w	r3, #2
 8005bc2:	f43f adf2 	beq.w	80057aa <_lv_indev_scroll_handler+0x1a>
 8005bc6:	e68f      	b.n	80058e8 <_lv_indev_scroll_handler+0x158>
        if((st > 0 || sb > 0)  &&
 8005bc8:	9b08      	ldr	r3, [sp, #32]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f73f af44 	bgt.w	8005a58 <_lv_indev_scroll_handler+0x2c8>
 8005bd0:	e758      	b.n	8005a84 <_lv_indev_scroll_handler+0x2f4>
 8005bd2:	f8cd a008 	str.w	sl, [sp, #8]
            dir_candidate = LV_DIR_VER;
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	9306      	str	r3, [sp, #24]
 8005bda:	e753      	b.n	8005a84 <_lv_indev_scroll_handler+0x2f4>
        if((sl > 0 || sr > 0)  &&
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	f73f af55 	bgt.w	8005a8c <_lv_indev_scroll_handler+0x2fc>
 8005be2:	e76a      	b.n	8005aba <_lv_indev_scroll_handler+0x32a>
 8005be4:	f8cd a008 	str.w	sl, [sp, #8]
            dir_candidate = LV_DIR_HOR;
 8005be8:	2303      	movs	r3, #3
 8005bea:	9306      	str	r3, [sp, #24]
 8005bec:	e765      	b.n	8005aba <_lv_indev_scroll_handler+0x32a>
        switch(lv_obj_get_scroll_snap_y(obj)) {
 8005bee:	9802      	ldr	r0, [sp, #8]
 8005bf0:	f003 fb54 	bl	800929c <lv_obj_get_scroll_snap_y>
 8005bf4:	2802      	cmp	r0, #2
 8005bf6:	d02e      	beq.n	8005c56 <_lv_indev_scroll_handler+0x4c6>
 8005bf8:	2803      	cmp	r0, #3
 8005bfa:	d03f      	beq.n	8005c7c <_lv_indev_scroll_handler+0x4ec>
 8005bfc:	2801      	cmp	r0, #1
 8005bfe:	d006      	beq.n	8005c0e <_lv_indev_scroll_handler+0x47e>
                proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 8005c00:	f24e 0301 	movw	r3, #57345	; 0xe001
 8005c04:	86fb      	strh	r3, [r7, #54]	; 0x36
                proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 8005c06:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005c0a:	877b      	strh	r3, [r7, #58]	; 0x3a
                break;
 8005c0c:	e013      	b.n	8005c36 <_lv_indev_scroll_handler+0x4a6>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 8005c0e:	9c02      	ldr	r4, [sp, #8]
 8005c10:	4620      	mov	r0, r4
 8005c12:	8ae1      	ldrh	r1, [r4, #22]
 8005c14:	3101      	adds	r1, #1
 8005c16:	2300      	movs	r3, #0
 8005c18:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005c1c:	b209      	sxth	r1, r1
 8005c1e:	f7ff fba5 	bl	800536c <find_snap_point_y>
 8005c22:	86f8      	strh	r0, [r7, #54]	; 0x36
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 8005c24:	4620      	mov	r0, r4
 8005c26:	8ae2      	ldrh	r2, [r4, #22]
 8005c28:	3a01      	subs	r2, #1
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	b212      	sxth	r2, r2
 8005c2e:	495d      	ldr	r1, [pc, #372]	; (8005da4 <_lv_indev_scroll_handler+0x614>)
 8005c30:	f7ff fb9c 	bl	800536c <find_snap_point_y>
 8005c34:	8778      	strh	r0, [r7, #58]	; 0x3a
        switch(lv_obj_get_scroll_snap_x(obj)) {
 8005c36:	9802      	ldr	r0, [sp, #8]
 8005c38:	f003 fb28 	bl	800928c <lv_obj_get_scroll_snap_x>
 8005c3c:	2802      	cmp	r0, #2
 8005c3e:	d04e      	beq.n	8005cde <_lv_indev_scroll_handler+0x54e>
 8005c40:	2803      	cmp	r0, #3
 8005c42:	d05f      	beq.n	8005d04 <_lv_indev_scroll_handler+0x574>
 8005c44:	2801      	cmp	r0, #1
 8005c46:	d037      	beq.n	8005cb8 <_lv_indev_scroll_handler+0x528>
                proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 8005c48:	f24e 0301 	movw	r3, #57345	; 0xe001
 8005c4c:	86bb      	strh	r3, [r7, #52]	; 0x34
                proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8005c4e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005c52:	873b      	strh	r3, [r7, #56]	; 0x38
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8005c54:	e7a1      	b.n	8005b9a <_lv_indev_scroll_handler+0x40a>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 8005c56:	2300      	movs	r3, #0
 8005c58:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005c5c:	9c02      	ldr	r4, [sp, #8]
 8005c5e:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7ff fb82 	bl	800536c <find_snap_point_y>
 8005c68:	86f8      	strh	r0, [r7, #54]	; 0x36
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8005c70:	494c      	ldr	r1, [pc, #304]	; (8005da4 <_lv_indev_scroll_handler+0x614>)
 8005c72:	4620      	mov	r0, r4
 8005c74:	f7ff fb7a 	bl	800536c <find_snap_point_y>
 8005c78:	8778      	strh	r0, [r7, #58]	; 0x3a
                break;
 8005c7a:	e7dc      	b.n	8005c36 <_lv_indev_scroll_handler+0x4a6>
                    lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 8005c7c:	9d02      	ldr	r5, [sp, #8]
 8005c7e:	4628      	mov	r0, r5
 8005c80:	8aea      	ldrh	r2, [r5, #22]
 8005c82:	8b6b      	ldrh	r3, [r5, #26]
 8005c84:	3301      	adds	r3, #1
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	b219      	sxth	r1, r3
 8005c8a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8005c8e:	440b      	add	r3, r1
 8005c90:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8005c94:	b29c      	uxth	r4, r3
                    proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 8005c96:	1c61      	adds	r1, r4, #1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005c9e:	b209      	sxth	r1, r1
 8005ca0:	f7ff fb64 	bl	800536c <find_snap_point_y>
 8005ca4:	86f8      	strh	r0, [r7, #54]	; 0x36
                    proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 8005ca6:	1e62      	subs	r2, r4, #1
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b212      	sxth	r2, r2
 8005cac:	493d      	ldr	r1, [pc, #244]	; (8005da4 <_lv_indev_scroll_handler+0x614>)
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7ff fb5c 	bl	800536c <find_snap_point_y>
 8005cb4:	8778      	strh	r0, [r7, #58]	; 0x3a
                    break;
 8005cb6:	e7be      	b.n	8005c36 <_lv_indev_scroll_handler+0x4a6>
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005cbe:	9c02      	ldr	r4, [sp, #8]
 8005cc0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f7ff fbeb 	bl	80054a0 <find_snap_point_x>
 8005cca:	86b8      	strh	r0, [r7, #52]	; 0x34
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x1, 0);
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8005cd2:	4934      	ldr	r1, [pc, #208]	; (8005da4 <_lv_indev_scroll_handler+0x614>)
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f7ff fbe3 	bl	80054a0 <find_snap_point_x>
 8005cda:	8738      	strh	r0, [r7, #56]	; 0x38
                break;
 8005cdc:	e751      	b.n	8005b82 <_lv_indev_scroll_handler+0x3f2>
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005ce4:	9c02      	ldr	r4, [sp, #8]
 8005ce6:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8005cea:	4620      	mov	r0, r4
 8005cec:	f7ff fbd8 	bl	80054a0 <find_snap_point_x>
 8005cf0:	86b8      	strh	r0, [r7, #52]	; 0x34
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8005cf8:	492a      	ldr	r1, [pc, #168]	; (8005da4 <_lv_indev_scroll_handler+0x614>)
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f7ff fbd0 	bl	80054a0 <find_snap_point_x>
 8005d00:	8738      	strh	r0, [r7, #56]	; 0x38
                break;
 8005d02:	e73e      	b.n	8005b82 <_lv_indev_scroll_handler+0x3f2>
                    lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 8005d04:	9d02      	ldr	r5, [sp, #8]
 8005d06:	4628      	mov	r0, r5
 8005d08:	8aaa      	ldrh	r2, [r5, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005d0a:	8b2b      	ldrh	r3, [r5, #24]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	b219      	sxth	r1, r3
 8005d12:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8005d16:	440b      	add	r3, r1
 8005d18:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8005d1c:	b29c      	uxth	r4, r3
                    proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 8005d1e:	1c61      	adds	r1, r4, #1
 8005d20:	2300      	movs	r3, #0
 8005d22:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005d26:	b209      	sxth	r1, r1
 8005d28:	f7ff fbba 	bl	80054a0 <find_snap_point_x>
 8005d2c:	86b8      	strh	r0, [r7, #52]	; 0x34
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 8005d2e:	1e62      	subs	r2, r4, #1
 8005d30:	2300      	movs	r3, #0
 8005d32:	b212      	sxth	r2, r2
 8005d34:	491b      	ldr	r1, [pc, #108]	; (8005da4 <_lv_indev_scroll_handler+0x614>)
 8005d36:	4628      	mov	r0, r5
 8005d38:	f7ff fbb2 	bl	80054a0 <find_snap_point_x>
 8005d3c:	8738      	strh	r0, [r7, #56]	; 0x38
                    break;
 8005d3e:	e720      	b.n	8005b82 <_lv_indev_scroll_handler+0x3f2>
        lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8005d40:	9d02      	ldr	r5, [sp, #8]
 8005d42:	4628      	mov	r0, r5
 8005d44:	f003 fba8 	bl	8009498 <lv_obj_get_scroll_right>
 8005d48:	4604      	mov	r4, r0
        lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f003 fb30 	bl	80093b0 <lv_obj_get_scroll_left>
 8005d50:	4602      	mov	r2, r0
        diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8005d52:	2303      	movs	r3, #3
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4623      	mov	r3, r4
 8005d58:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f7ff fc39 	bl	80055d4 <elastic_diff>
 8005d62:	4605      	mov	r5, r0
    lv_coord_t diff_y = 0;
 8005d64:	2400      	movs	r4, #0
 8005d66:	e575      	b.n	8005854 <_lv_indev_scroll_handler+0xc4>
        if((left_en  && obj_scroll_sum.x >=   scroll_limit) ||
 8005d68:	2e00      	cmp	r6, #0
 8005d6a:	f43f aec5 	beq.w	8005af8 <_lv_indev_scroll_handler+0x368>
 8005d6e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8005d72:	9a07      	ldr	r2, [sp, #28]
 8005d74:	4293      	cmp	r3, r2
 8005d76:	f6ff aebf 	blt.w	8005af8 <_lv_indev_scroll_handler+0x368>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 8005d7a:	9b05      	ldr	r3, [sp, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bf14      	ite	ne
 8005d80:	2203      	movne	r2, #3
 8005d82:	220c      	moveq	r2, #12
 8005d84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005d88:	f362 0303 	bfi	r3, r2, #0, #4
 8005d8c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            break;
 8005d90:	e6d9      	b.n	8005b46 <_lv_indev_scroll_handler+0x3b6>
        lv_point_t obj_scroll_sum = proc->types.pointer.scroll_sum;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	930b      	str	r3, [sp, #44]	; 0x2c
        if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 8005d96:	e600      	b.n	800599a <_lv_indev_scroll_handler+0x20a>
        if(sr <= 0) right_en = false;
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	f77f aead 	ble.w	8005af8 <_lv_indev_scroll_handler+0x368>
        if(sl <= 0) left_en = false;
 8005d9e:	465e      	mov	r6, fp
 8005da0:	e69a      	b.n	8005ad8 <_lv_indev_scroll_handler+0x348>
 8005da2:	4770      	bx	lr
 8005da4:	ffffe001 	.word	0xffffe001

08005da8 <_lv_indev_scroll_throw_handler>:
{
 8005da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dac:	b082      	sub	sp, #8
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8005dae:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    if(scroll_obj == NULL) return;
 8005db0:	b12e      	cbz	r6, 8005dbe <_lv_indev_scroll_throw_handler+0x16>
 8005db2:	4604      	mov	r4, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_NONE) return;
 8005db4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005db8:	f013 0f0f 	tst.w	r3, #15
 8005dbc:	d102      	bne.n	8005dc4 <_lv_indev_scroll_throw_handler+0x1c>
}
 8005dbe:	b002      	add	sp, #8
 8005dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_indev_t * indev_act = lv_indev_get_act();
 8005dc4:	f7fe fb42 	bl	800444c <lv_indev_get_act>
 8005dc8:	4607      	mov	r7, r0
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8005dca:	6803      	ldr	r3, [r0, #0]
 8005dcc:	7e5d      	ldrb	r5, [r3, #25]
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8005dce:	2140      	movs	r1, #64	; 0x40
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f000 fdfd 	bl	80069d0 <lv_obj_has_flag>
 8005dd6:	b910      	cbnz	r0, 8005dde <_lv_indev_scroll_throw_handler+0x36>
        proc->types.pointer.scroll_throw_vect.y = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	83e3      	strh	r3, [r4, #30]
        proc->types.pointer.scroll_throw_vect.x = 0;
 8005ddc:	83a3      	strh	r3, [r4, #28]
    lv_scroll_snap_t align_x = lv_obj_get_scroll_snap_x(scroll_obj);
 8005dde:	4630      	mov	r0, r6
 8005de0:	f003 fa54 	bl	800928c <lv_obj_get_scroll_snap_x>
 8005de4:	4680      	mov	r8, r0
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 8005de6:	4630      	mov	r0, r6
 8005de8:	f003 fa58 	bl	800929c <lv_obj_get_scroll_snap_y>
 8005dec:	4682      	mov	sl, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 8005dee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	d01e      	beq.n	8005e38 <_lv_indev_scroll_throw_handler+0x90>
    else if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	f000 80a4 	beq.w	8005f48 <_lv_indev_scroll_throw_handler+0x1a0>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 8005e00:	69e3      	ldr	r3, [r4, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1db      	bne.n	8005dbe <_lv_indev_scroll_throw_handler+0x16>
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8005e06:	f1ba 0f00 	cmp.w	sl, #0
 8005e0a:	d040      	beq.n	8005e8e <_lv_indev_scroll_throw_handler+0xe6>
        if(align_x == LV_SCROLL_SNAP_NONE) {
 8005e0c:	f1b8 0f00 	cmp.w	r8, #0
 8005e10:	f000 8111 	beq.w	8006036 <_lv_indev_scroll_throw_handler+0x28e>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_END, indev_act);
 8005e14:	463a      	mov	r2, r7
 8005e16:	210a      	movs	r1, #10
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7fd ff71 	bl	8003d00 <lv_event_send>
        if(proc->reset_query) return;
 8005e1e:	7863      	ldrb	r3, [r4, #1]
 8005e20:	f013 0f02 	tst.w	r3, #2
 8005e24:	d1cb      	bne.n	8005dbe <_lv_indev_scroll_throw_handler+0x16>
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 8005e26:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005e2a:	f36f 0303 	bfc	r3, #0, #4
 8005e2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        proc->types.pointer.scroll_obj = NULL;
 8005e32:	2300      	movs	r3, #0
 8005e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e36:	e7c2      	b.n	8005dbe <_lv_indev_scroll_throw_handler+0x16>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	83a3      	strh	r3, [r4, #28]
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d13d      	bne.n	8005ebc <_lv_indev_scroll_throw_handler+0x114>
                proc->types.pointer.scroll_throw_vect.y * (100 - scroll_throw) / 100;
 8005e40:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8005e44:	f1c5 0564 	rsb	r5, r5, #100	; 0x64
 8005e48:	fb03 f505 	mul.w	r5, r3, r5
 8005e4c:	4b8a      	ldr	r3, [pc, #552]	; (8006078 <_lv_indev_scroll_throw_handler+0x2d0>)
 8005e4e:	fb83 2305 	smull	r2, r3, r3, r5
 8005e52:	17ed      	asrs	r5, r5, #31
 8005e54:	ebc5 1563 	rsb	r5, r5, r3, asr #5
            proc->types.pointer.scroll_throw_vect.y =
 8005e58:	83e5      	strh	r5, [r4, #30]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f003 fa3e 	bl	80092dc <lv_obj_get_scroll_bottom>
 8005e60:	4605      	mov	r5, r0
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8005e62:	4630      	mov	r0, r6
 8005e64:	f003 fa32 	bl	80092cc <lv_obj_get_scroll_top>
 8005e68:	4602      	mov	r2, r0
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	462b      	mov	r3, r5
 8005e70:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
 8005e74:	4630      	mov	r0, r6
 8005e76:	f7ff fbad 	bl	80055d4 <elastic_diff>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	83e0      	strh	r0, [r4, #30]
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4619      	mov	r1, r3
 8005e82:	4630      	mov	r0, r6
 8005e84:	f003 fbe2 	bl	800964c <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 8005e88:	69e3      	ldr	r3, [r4, #28]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d197      	bne.n	8005dbe <_lv_indev_scroll_throw_handler+0x16>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f003 fa1c 	bl	80092cc <lv_obj_get_scroll_top>
 8005e94:	4605      	mov	r5, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8005e96:	4630      	mov	r0, r6
 8005e98:	f003 fa20 	bl	80092dc <lv_obj_get_scroll_bottom>
            if(st > 0 || sb > 0) {
 8005e9c:	2d00      	cmp	r5, #0
 8005e9e:	f340 80bf 	ble.w	8006020 <_lv_indev_scroll_throw_handler+0x278>
                if(st < 0) {
 8005ea2:	2d00      	cmp	r5, #0
 8005ea4:	f2c0 80c0 	blt.w	8006028 <_lv_indev_scroll_throw_handler+0x280>
                else if(sb < 0) {
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	daaf      	bge.n	8005e0c <_lv_indev_scroll_throw_handler+0x64>
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 8005eac:	4242      	negs	r2, r0
 8005eae:	2301      	movs	r3, #1
 8005eb0:	b212      	sxth	r2, r2
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f003 fbc9 	bl	800964c <lv_obj_scroll_by>
 8005eba:	e7a7      	b.n	8005e0c <_lv_indev_scroll_throw_handler+0x64>
    lv_coord_t y = proc->types.pointer.scroll_throw_vect.y;
 8005ebc:	f9b4 501e 	ldrsh.w	r5, [r4, #30]
    lv_indev_t * indev_act = lv_indev_get_act();
 8005ec0:	f7fe fac4 	bl	800444c <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8005ec4:	6803      	ldr	r3, [r0, #0]
 8005ec6:	7e5a      	ldrb	r2, [r3, #25]
    while(y) {
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	d03b      	beq.n	8005f44 <_lv_indev_scroll_throw_handler+0x19c>
    lv_coord_t move = 0;
 8005ecc:	f04f 0900 	mov.w	r9, #0
        y = y * (100 - scroll_throw) / 100;
 8005ed0:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8005ed4:	4968      	ldr	r1, [pc, #416]	; (8006078 <_lv_indev_scroll_throw_handler+0x2d0>)
        move += y;
 8005ed6:	44a9      	add	r9, r5
 8005ed8:	fa0f f989 	sxth.w	r9, r9
        y = y * (100 - scroll_throw) / 100;
 8005edc:	fb02 f505 	mul.w	r5, r2, r5
 8005ee0:	fb81 0305 	smull	r0, r3, r1, r5
 8005ee4:	17ed      	asrs	r5, r5, #31
 8005ee6:	ebc5 1563 	rsb	r5, r5, r3, asr #5
 8005eea:	b22d      	sxth	r5, r5
    while(y) {
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	d1f2      	bne.n	8005ed6 <_lv_indev_scroll_throw_handler+0x12e>
            proc->types.pointer.scroll_throw_vect.y = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	83e3      	strh	r3, [r4, #30]
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8005ef4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8005ef8:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8005efc:	eb09 0103 	add.w	r1, r9, r3
 8005f00:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8005f02:	bfbc      	itt	lt
 8005f04:	1ad2      	sublt	r2, r2, r3
 8005f06:	fa0f f982 	sxthlt.w	r9, r2
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 8005f0a:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8005f0e:	eb09 0103 	add.w	r1, r9, r3
 8005f12:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8005f14:	bfc4      	itt	gt
 8005f16:	1ad2      	subgt	r2, r2, r3
 8005f18:	fa0f f982 	sxthgt.w	r9, r2
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005f22:	4956      	ldr	r1, [pc, #344]	; (800607c <_lv_indev_scroll_throw_handler+0x2d4>)
 8005f24:	4630      	mov	r0, r6
 8005f26:	f7ff fa21 	bl	800536c <find_snap_point_y>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 8005f2a:	eb09 0200 	add.w	r2, r9, r0
 8005f2e:	2301      	movs	r3, #1
 8005f30:	b212      	sxth	r2, r2
 8005f32:	2100      	movs	r1, #0
 8005f34:	4630      	mov	r0, r6
 8005f36:	f003 fb89 	bl	800964c <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 8005f3a:	69e3      	ldr	r3, [r4, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f af3e 	bne.w	8005dbe <_lv_indev_scroll_throw_handler+0x16>
 8005f42:	e763      	b.n	8005e0c <_lv_indev_scroll_throw_handler+0x64>
    lv_coord_t move = 0;
 8005f44:	46a9      	mov	r9, r5
 8005f46:	e7d3      	b.n	8005ef0 <_lv_indev_scroll_throw_handler+0x148>
        proc->types.pointer.scroll_throw_vect.y = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	83e3      	strh	r3, [r4, #30]
        if(align_x == LV_SCROLL_SNAP_NONE) {
 8005f4c:	f1b8 0f00 	cmp.w	r8, #0
 8005f50:	d124      	bne.n	8005f9c <_lv_indev_scroll_throw_handler+0x1f4>
                proc->types.pointer.scroll_throw_vect.x * (100 - scroll_throw) / 100;
 8005f52:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8005f56:	f1c5 0564 	rsb	r5, r5, #100	; 0x64
 8005f5a:	fb03 f505 	mul.w	r5, r3, r5
 8005f5e:	4b46      	ldr	r3, [pc, #280]	; (8006078 <_lv_indev_scroll_throw_handler+0x2d0>)
 8005f60:	fb83 2305 	smull	r2, r3, r3, r5
 8005f64:	17ed      	asrs	r5, r5, #31
 8005f66:	ebc5 1563 	rsb	r5, r5, r3, asr #5
            proc->types.pointer.scroll_throw_vect.x =
 8005f6a:	83a5      	strh	r5, [r4, #28]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f003 fa1f 	bl	80093b0 <lv_obj_get_scroll_left>
 8005f72:	4605      	mov	r5, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8005f74:	4630      	mov	r0, r6
 8005f76:	f003 fa8f 	bl	8009498 <lv_obj_get_scroll_right>
 8005f7a:	4603      	mov	r3, r0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	9200      	str	r2, [sp, #0]
 8005f80:	462a      	mov	r2, r5
 8005f82:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
 8005f86:	4630      	mov	r0, r6
 8005f88:	f7ff fb24 	bl	80055d4 <elastic_diff>
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	83a0      	strh	r0, [r4, #28]
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8005f90:	2300      	movs	r3, #0
 8005f92:	461a      	mov	r2, r3
 8005f94:	4630      	mov	r0, r6
 8005f96:	f003 fb59 	bl	800964c <lv_obj_scroll_by>
 8005f9a:	e731      	b.n	8005e00 <_lv_indev_scroll_throw_handler+0x58>
    lv_coord_t x = proc->types.pointer.scroll_throw_vect.x;
 8005f9c:	f9b4 501c 	ldrsh.w	r5, [r4, #28]
    lv_indev_t * indev_act = lv_indev_get_act();
 8005fa0:	f7fe fa54 	bl	800444c <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8005fa4:	6803      	ldr	r3, [r0, #0]
 8005fa6:	7e5a      	ldrb	r2, [r3, #25]
    while(x) {
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	d037      	beq.n	800601c <_lv_indev_scroll_throw_handler+0x274>
    lv_coord_t move = 0;
 8005fac:	f04f 0900 	mov.w	r9, #0
        x = x * (100 - scroll_throw) / 100;
 8005fb0:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8005fb4:	4930      	ldr	r1, [pc, #192]	; (8006078 <_lv_indev_scroll_throw_handler+0x2d0>)
        move += x;
 8005fb6:	44a9      	add	r9, r5
 8005fb8:	fa0f f989 	sxth.w	r9, r9
        x = x * (100 - scroll_throw) / 100;
 8005fbc:	fb02 f505 	mul.w	r5, r2, r5
 8005fc0:	fb81 0305 	smull	r0, r3, r1, r5
 8005fc4:	17ed      	asrs	r5, r5, #31
 8005fc6:	ebc5 1563 	rsb	r5, r5, r3, asr #5
 8005fca:	b22d      	sxth	r5, r5
    while(x) {
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	d1f2      	bne.n	8005fb6 <_lv_indev_scroll_throw_handler+0x20e>
            proc->types.pointer.scroll_throw_vect.x = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	83a3      	strh	r3, [r4, #28]
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8005fd4:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8005fd8:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8005fdc:	eb09 0103 	add.w	r1, r9, r3
 8005fe0:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 8005fe2:	bfbc      	itt	lt
 8005fe4:	1ad2      	sublt	r2, r2, r3
 8005fe6:	fa0f f982 	sxthlt.w	r9, r2
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8005fea:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8005fee:	eb09 0103 	add.w	r1, r9, r3
 8005ff2:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 8005ff4:	bfc4      	itt	gt
 8005ff6:	1ad3      	subgt	r3, r2, r3
 8005ff8:	fa0f f983 	sxthgt.w	r9, r3
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006002:	491e      	ldr	r1, [pc, #120]	; (800607c <_lv_indev_scroll_throw_handler+0x2d4>)
 8006004:	4630      	mov	r0, r6
 8006006:	f7ff fa4b 	bl	80054a0 <find_snap_point_x>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 800600a:	eb00 0109 	add.w	r1, r0, r9
 800600e:	2301      	movs	r3, #1
 8006010:	2200      	movs	r2, #0
 8006012:	b209      	sxth	r1, r1
 8006014:	4630      	mov	r0, r6
 8006016:	f003 fb19 	bl	800964c <lv_obj_scroll_by>
 800601a:	e6f1      	b.n	8005e00 <_lv_indev_scroll_throw_handler+0x58>
    lv_coord_t move = 0;
 800601c:	46a9      	mov	r9, r5
 800601e:	e7d7      	b.n	8005fd0 <_lv_indev_scroll_throw_handler+0x228>
            if(st > 0 || sb > 0) {
 8006020:	2800      	cmp	r0, #0
 8006022:	f73f af3e 	bgt.w	8005ea2 <_lv_indev_scroll_throw_handler+0xfa>
 8006026:	e6f1      	b.n	8005e0c <_lv_indev_scroll_throw_handler+0x64>
                    lv_obj_scroll_by(scroll_obj, 0, st, LV_ANIM_ON);
 8006028:	2301      	movs	r3, #1
 800602a:	462a      	mov	r2, r5
 800602c:	2100      	movs	r1, #0
 800602e:	4630      	mov	r0, r6
 8006030:	f003 fb0c 	bl	800964c <lv_obj_scroll_by>
 8006034:	e6ea      	b.n	8005e0c <_lv_indev_scroll_throw_handler+0x64>
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8006036:	4630      	mov	r0, r6
 8006038:	f003 f9ba 	bl	80093b0 <lv_obj_get_scroll_left>
 800603c:	4605      	mov	r5, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 800603e:	4630      	mov	r0, r6
 8006040:	f003 fa2a 	bl	8009498 <lv_obj_get_scroll_right>
            if(sl > 0 || sr > 0) {
 8006044:	2d00      	cmp	r5, #0
 8006046:	dd0c      	ble.n	8006062 <_lv_indev_scroll_throw_handler+0x2ba>
                if(sl < 0) {
 8006048:	2d00      	cmp	r5, #0
 800604a:	db0d      	blt.n	8006068 <_lv_indev_scroll_throw_handler+0x2c0>
                else if(sr < 0) {
 800604c:	2800      	cmp	r0, #0
 800604e:	f6bf aee1 	bge.w	8005e14 <_lv_indev_scroll_throw_handler+0x6c>
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 8006052:	4241      	negs	r1, r0
 8006054:	2301      	movs	r3, #1
 8006056:	2200      	movs	r2, #0
 8006058:	b209      	sxth	r1, r1
 800605a:	4630      	mov	r0, r6
 800605c:	f003 faf6 	bl	800964c <lv_obj_scroll_by>
 8006060:	e6d8      	b.n	8005e14 <_lv_indev_scroll_throw_handler+0x6c>
            if(sl > 0 || sr > 0) {
 8006062:	2800      	cmp	r0, #0
 8006064:	dcf0      	bgt.n	8006048 <_lv_indev_scroll_throw_handler+0x2a0>
 8006066:	e6d5      	b.n	8005e14 <_lv_indev_scroll_throw_handler+0x6c>
                    lv_obj_scroll_by(scroll_obj, sl, 0, LV_ANIM_ON);
 8006068:	2301      	movs	r3, #1
 800606a:	2200      	movs	r2, #0
 800606c:	4629      	mov	r1, r5
 800606e:	4630      	mov	r0, r6
 8006070:	f003 faec 	bl	800964c <lv_obj_scroll_by>
 8006074:	e6ce      	b.n	8005e14 <_lv_indev_scroll_throw_handler+0x6c>
 8006076:	bf00      	nop
 8006078:	51eb851f 	.word	0x51eb851f
 800607c:	ffffe001 	.word	0xffffe001

08006080 <lv_indev_scroll_throw_predict>:
    if(indev == NULL) return 0;
 8006080:	b1f8      	cbz	r0, 80060c2 <lv_indev_scroll_throw_predict+0x42>
 8006082:	4602      	mov	r2, r0
    switch(dir) {
 8006084:	2903      	cmp	r1, #3
 8006086:	d019      	beq.n	80060bc <lv_indev_scroll_throw_predict+0x3c>
 8006088:	290c      	cmp	r1, #12
 800608a:	d11c      	bne.n	80060c6 <lv_indev_scroll_throw_predict+0x46>
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 800608c:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	7e51      	ldrb	r1, [r2, #25]
    while(v) {
 8006094:	b1cb      	cbz	r3, 80060ca <lv_indev_scroll_throw_predict+0x4a>
{
 8006096:	b410      	push	{r4}
    lv_coord_t sum = 0;
 8006098:	2000      	movs	r0, #0
        v = v * (100 - scroll_throw) / 100;
 800609a:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 800609e:	4c0c      	ldr	r4, [pc, #48]	; (80060d0 <lv_indev_scroll_throw_predict+0x50>)
        sum += v;
 80060a0:	4418      	add	r0, r3
 80060a2:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	fb84 c203 	smull	ip, r2, r4, r3
 80060ac:	17db      	asrs	r3, r3, #31
 80060ae:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80060b2:	b21b      	sxth	r3, r3
    while(v) {
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f3      	bne.n	80060a0 <lv_indev_scroll_throw_predict+0x20>
}
 80060b8:	bc10      	pop	{r4}
 80060ba:	4770      	bx	lr
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 80060bc:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
            break;
 80060c0:	e7e6      	b.n	8006090 <lv_indev_scroll_throw_predict+0x10>
    if(indev == NULL) return 0;
 80060c2:	2000      	movs	r0, #0
 80060c4:	4770      	bx	lr
    switch(dir) {
 80060c6:	2000      	movs	r0, #0
 80060c8:	4770      	bx	lr
    lv_coord_t sum = 0;
 80060ca:	4618      	mov	r0, r3
}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	51eb851f 	.word	0x51eb851f

080060d4 <lv_obj_draw>:
        obj->spec_attr = NULL;
    }
}

static void lv_obj_draw(lv_event_t * e)
{
 80060d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d8:	b0a4      	sub	sp, #144	; 0x90
 80060da:	4606      	mov	r6, r0
    lv_event_code_t code = lv_event_get_code(e);
 80060dc:	f7fd fe36 	bl	8003d4c <lv_event_get_code>
 80060e0:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7fd fe2e 	bl	8003d44 <lv_event_get_target>
 80060e8:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 80060ea:	2d12      	cmp	r5, #18
 80060ec:	d007      	beq.n	80060fe <lv_obj_draw+0x2a>
        }

        info->res = LV_COVER_RES_COVER;

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80060ee:	2d15      	cmp	r5, #21
 80060f0:	d050      	beq.n	8006194 <lv_obj_draw+0xc0>

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
    }
    else if(code == LV_EVENT_DRAW_POST) {
 80060f2:	2d18      	cmp	r5, #24
 80060f4:	f000 80ae 	beq.w	8006254 <lv_obj_draw+0x180>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
        }
    }
}
 80060f8:	b024      	add	sp, #144	; 0x90
 80060fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80060fe:	4630      	mov	r0, r6
 8006100:	f7fd fe28 	bl	8003d54 <lv_event_get_param>
 8006104:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8006106:	7803      	ldrb	r3, [r0, #0]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d0f5      	beq.n	80060f8 <lv_obj_draw+0x24>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 800610c:	2217      	movs	r2, #23
 800610e:	2100      	movs	r1, #0
 8006110:	4620      	mov	r0, r4
 8006112:	f004 fb69 	bl	800a7e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8006116:	b110      	cbz	r0, 800611e <lv_obj_draw+0x4a>
            info->res = LV_COVER_RES_MASKED;
 8006118:	2302      	movs	r3, #2
 800611a:	702b      	strb	r3, [r5, #0]
            return;
 800611c:	e7ec      	b.n	80060f8 <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 800611e:	220b      	movs	r2, #11
 8006120:	2100      	movs	r1, #0
 8006122:	4620      	mov	r0, r4
 8006124:	f004 fb60 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006128:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800612a:	2268      	movs	r2, #104	; 0x68
 800612c:	2100      	movs	r1, #0
 800612e:	4620      	mov	r0, r4
 8006130:	f004 fb5a 	bl	800a7e8 <lv_obj_get_style_prop>
 8006134:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8006136:	2269      	movs	r2, #105	; 0x69
 8006138:	2100      	movs	r1, #0
 800613a:	4620      	mov	r0, r4
 800613c:	f004 fb54 	bl	800a7e8 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8006140:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8006144:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
    dest->y2 = src->y2;
 8006148:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 800614c:	b2b3      	uxth	r3, r6
 800614e:	8aa1      	ldrh	r1, [r4, #20]
 8006150:	1ac9      	subs	r1, r1, r3
 8006152:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
        coords.x2 += w;
 8006156:	4473      	add	r3, lr
 8006158:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        coords.y1 -= h;
 800615c:	b280      	uxth	r0, r0
 800615e:	1a12      	subs	r2, r2, r0
 8006160:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        coords.y2 += h;
 8006164:	4460      	add	r0, ip
 8006166:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 800616a:	463a      	mov	r2, r7
 800616c:	a912      	add	r1, sp, #72	; 0x48
 800616e:	6868      	ldr	r0, [r5, #4]
 8006170:	f01a fd8f 	bl	8020c92 <_lv_area_is_in>
 8006174:	b910      	cbnz	r0, 800617c <lv_obj_draw+0xa8>
            info->res = LV_COVER_RES_NOT_COVER;
 8006176:	2301      	movs	r3, #1
 8006178:	702b      	strb	r3, [r5, #0]
            return;
 800617a:	e7bd      	b.n	80060f8 <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800617c:	2221      	movs	r2, #33	; 0x21
 800617e:	2100      	movs	r1, #0
 8006180:	4620      	mov	r0, r4
 8006182:	f004 fb31 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006186:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8006188:	28fc      	cmp	r0, #252	; 0xfc
            info->res = LV_COVER_RES_NOT_COVER;
 800618a:	bf94      	ite	ls
 800618c:	2301      	movls	r3, #1
        info->res = LV_COVER_RES_COVER;
 800618e:	2300      	movhi	r3, #0
 8006190:	702b      	strb	r3, [r5, #0]
 8006192:	e7b1      	b.n	80060f8 <lv_obj_draw+0x24>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8006194:	4630      	mov	r0, r6
 8006196:	f7fd fe49 	bl	8003e2c <lv_event_get_draw_ctx>
 800619a:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 800619c:	a804      	add	r0, sp, #16
 800619e:	f008 ffe3 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 80061a2:	2234      	movs	r2, #52	; 0x34
 80061a4:	2100      	movs	r1, #0
 80061a6:	4620      	mov	r0, r4
 80061a8:	f004 fb1e 	bl	800a7e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 80061ac:	b128      	cbz	r0, 80061ba <lv_obj_draw+0xe6>
            draw_dsc.border_post = 1;
 80061ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 80061ba:	af04      	add	r7, sp, #16
 80061bc:	463a      	mov	r2, r7
 80061be:	2100      	movs	r1, #0
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 ff4b 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80061c6:	2268      	movs	r2, #104	; 0x68
 80061c8:	2100      	movs	r1, #0
 80061ca:	4620      	mov	r0, r4
 80061cc:	f004 fb0c 	bl	800a7e8 <lv_obj_get_style_prop>
 80061d0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80061d2:	2269      	movs	r2, #105	; 0x69
 80061d4:	2100      	movs	r1, #0
 80061d6:	4620      	mov	r0, r4
 80061d8:	f004 fb06 	bl	800a7e8 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 80061dc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 80061e0:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
    dest->y2 = src->y2;
 80061e4:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 80061e8:	b2ab      	uxth	r3, r5
 80061ea:	8aa1      	ldrh	r1, [r4, #20]
 80061ec:	1ac9      	subs	r1, r1, r3
 80061ee:	f8ad 1008 	strh.w	r1, [sp, #8]
        coords.x2 += w;
 80061f2:	4473      	add	r3, lr
 80061f4:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.y1 -= h;
 80061f8:	b283      	uxth	r3, r0
 80061fa:	1ad2      	subs	r2, r2, r3
 80061fc:	f8ad 200a 	strh.w	r2, [sp, #10]
        coords.y2 += h;
 8006200:	4463      	add	r3, ip
 8006202:	f8ad 300e 	strh.w	r3, [sp, #14]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8006206:	4631      	mov	r1, r6
 8006208:	a812      	add	r0, sp, #72	; 0x48
 800620a:	f001 fa62 	bl	80076d2 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 800620e:	4bd0      	ldr	r3, [pc, #832]	; (8006550 <lv_obj_draw+0x47c>)
 8006210:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8006212:	2500      	movs	r5, #0
 8006214:	9514      	str	r5, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
 8006216:	9716      	str	r7, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
 8006218:	ab02      	add	r3, sp, #8
 800621a:	9315      	str	r3, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
 800621c:	951f      	str	r5, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 800621e:	aa12      	add	r2, sp, #72	; 0x48
 8006220:	211a      	movs	r1, #26
 8006222:	4620      	mov	r0, r4
 8006224:	f7fd fd6c 	bl	8003d00 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8006228:	2217      	movs	r2, #23
 800622a:	4629      	mov	r1, r5
 800622c:	4620      	mov	r0, r4
 800622e:	f004 fadb 	bl	800a7e8 <lv_obj_get_style_prop>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8006232:	b120      	cbz	r0, 800623e <lv_obj_draw+0x16a>
 8006234:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 815a 	bne.w	80064f2 <lv_obj_draw+0x41e>
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 800623e:	aa02      	add	r2, sp, #8
 8006240:	a904      	add	r1, sp, #16
 8006242:	4630      	mov	r0, r6
 8006244:	f008 ffec 	bl	800f220 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006248:	aa12      	add	r2, sp, #72	; 0x48
 800624a:	211b      	movs	r1, #27
 800624c:	4620      	mov	r0, r4
 800624e:	f7fd fd57 	bl	8003d00 <lv_event_send>
 8006252:	e751      	b.n	80060f8 <lv_obj_draw+0x24>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8006254:	4630      	mov	r0, r6
 8006256:	f7fd fde9 	bl	8003e2c <lv_event_get_draw_ctx>
 800625a:	4605      	mov	r5, r0
static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800625c:	aa02      	add	r2, sp, #8
 800625e:	4669      	mov	r1, sp
 8006260:	4620      	mov	r0, r4
 8006262:	f003 fcd5 	bl	8009c10 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8006266:	4668      	mov	r0, sp
 8006268:	f01a fbbd 	bl	80209e6 <lv_area_get_size>
 800626c:	b920      	cbnz	r0, 8006278 <lv_obj_draw+0x1a4>
 800626e:	a802      	add	r0, sp, #8
 8006270:	f01a fbb9 	bl	80209e6 <lv_area_get_size>
 8006274:	2800      	cmp	r0, #0
 8006276:	d067      	beq.n	8006348 <lv_obj_draw+0x274>
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
    lv_draw_rect_dsc_init(dsc);
 8006278:	a804      	add	r0, sp, #16
 800627a:	f008 ff75 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800627e:	2221      	movs	r2, #33	; 0x21
 8006280:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006284:	4620      	mov	r0, r4
 8006286:	f004 faaf 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800628a:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 800628c:	f88d 0013 	strb.w	r0, [sp, #19]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8006290:	2802      	cmp	r0, #2
 8006292:	f200 80ba 	bhi.w	800640a <lv_obj_draw+0x336>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8006296:	2231      	movs	r2, #49	; 0x31
 8006298:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800629c:	4620      	mov	r0, r4
 800629e:	f004 faa3 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80062a2:	b2c0      	uxtb	r0, r0
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 80062a4:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 80062a8:	2802      	cmp	r0, #2
 80062aa:	f200 80b7 	bhi.w	800641c <lv_obj_draw+0x348>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80062ae:	2245      	movs	r2, #69	; 0x45
 80062b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80062b4:	4620      	mov	r0, r4
 80062b6:	f004 fa97 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80062ba:	b2c0      	uxtb	r0, r0
            dsc->border_opa = LV_OPA_TRANSP;
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 80062bc:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 80062c0:	2802      	cmp	r0, #2
 80062c2:	f200 80c3 	bhi.w	800644c <lv_obj_draw+0x378>
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80062c6:	2260      	movs	r2, #96	; 0x60
 80062c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80062cc:	4620      	mov	r0, r4
 80062ce:	f004 fa8b 	bl	800a7e8 <lv_obj_get_style_prop>
            dsc->shadow_opa = LV_OPA_TRANSP;
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
    if(opa < LV_OPA_MAX) {
 80062d2:	b2c3      	uxtb	r3, r0
 80062d4:	2bfc      	cmp	r3, #252	; 0xfc
 80062d6:	d80d      	bhi.n	80062f4 <lv_obj_draw+0x220>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 80062d8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80062dc:	fb03 f000 	mul.w	r0, r3, r0
 80062e0:	1200      	asrs	r0, r0, #8
 80062e2:	f88d 0013 	strb.w	r0, [sp, #19]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 80062e6:	fb00 f303 	mul.w	r3, r0, r3
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 80062f0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 80062f4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80062f8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8006302:	4313      	orrs	r3, r2
 8006304:	d020      	beq.n	8006348 <lv_obj_draw+0x274>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8006306:	220b      	movs	r2, #11
 8006308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800630c:	4620      	mov	r0, r4
 800630e:	f004 fa6b 	bl	800a7e8 <lv_obj_get_style_prop>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8006312:	f8ad 0010 	strh.w	r0, [sp, #16]
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8006316:	4629      	mov	r1, r5
 8006318:	a812      	add	r0, sp, #72	; 0x48
 800631a:	f001 f9da 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 800631e:	4b8c      	ldr	r3, [pc, #560]	; (8006550 <lv_obj_draw+0x47c>)
 8006320:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8006322:	2302      	movs	r3, #2
 8006324:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.rect_dsc = &draw_dsc;
 8006326:	ab04      	add	r3, sp, #16
 8006328:	9316      	str	r3, [sp, #88]	; 0x58
    part_dsc.part = LV_PART_SCROLLBAR;
 800632a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800632e:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
 8006330:	4668      	mov	r0, sp
 8006332:	f01a fb58 	bl	80209e6 <lv_area_get_size>
 8006336:	2800      	cmp	r0, #0
 8006338:	f040 80a8 	bne.w	800648c <lv_obj_draw+0x3b8>
    if(lv_area_get_size(&ver_area) > 0) {
 800633c:	a802      	add	r0, sp, #8
 800633e:	f01a fb52 	bl	80209e6 <lv_area_get_size>
 8006342:	2800      	cmp	r0, #0
 8006344:	f040 80b4 	bne.w	80064b0 <lv_obj_draw+0x3dc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8006348:	2217      	movs	r2, #23
 800634a:	2100      	movs	r1, #0
 800634c:	4620      	mov	r0, r4
 800634e:	f004 fa4b 	bl	800a7e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8006352:	2800      	cmp	r0, #0
 8006354:	f040 80bf 	bne.w	80064d6 <lv_obj_draw+0x402>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8006358:	2234      	movs	r2, #52	; 0x34
 800635a:	2100      	movs	r1, #0
 800635c:	4620      	mov	r0, r4
 800635e:	f004 fa43 	bl	800a7e8 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8006362:	2800      	cmp	r0, #0
 8006364:	f43f aec8 	beq.w	80060f8 <lv_obj_draw+0x24>
            lv_draw_rect_dsc_init(&draw_dsc);
 8006368:	af04      	add	r7, sp, #16
 800636a:	4638      	mov	r0, r7
 800636c:	f008 fefc 	bl	800f168 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006370:	2600      	movs	r6, #0
 8006372:	f88d 6013 	strb.w	r6, [sp, #19]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8006376:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 800637a:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 800637e:	f88d 6046 	strb.w	r6, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8006382:	463a      	mov	r2, r7
 8006384:	4631      	mov	r1, r6
 8006386:	4620      	mov	r0, r4
 8006388:	f000 fe68 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800638c:	2268      	movs	r2, #104	; 0x68
 800638e:	4631      	mov	r1, r6
 8006390:	4620      	mov	r0, r4
 8006392:	f004 fa29 	bl	800a7e8 <lv_obj_get_style_prop>
 8006396:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8006398:	2269      	movs	r2, #105	; 0x69
 800639a:	4631      	mov	r1, r6
 800639c:	4620      	mov	r0, r4
 800639e:	f004 fa23 	bl	800a7e8 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 80063a2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 80063a6:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
    dest->y2 = src->y2;
 80063aa:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
            coords.x1 -= w;
 80063ae:	fa1f f388 	uxth.w	r3, r8
 80063b2:	8aa1      	ldrh	r1, [r4, #20]
 80063b4:	1ac9      	subs	r1, r1, r3
 80063b6:	f8ad 1008 	strh.w	r1, [sp, #8]
            coords.x2 += w;
 80063ba:	4473      	add	r3, lr
 80063bc:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.y1 -= h;
 80063c0:	b280      	uxth	r0, r0
 80063c2:	1a12      	subs	r2, r2, r0
 80063c4:	f8ad 200a 	strh.w	r2, [sp, #10]
            coords.y2 += h;
 80063c8:	4460      	add	r0, ip
 80063ca:	f8ad 000e 	strh.w	r0, [sp, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80063ce:	4629      	mov	r1, r5
 80063d0:	a812      	add	r0, sp, #72	; 0x48
 80063d2:	f001 f97e 	bl	80076d2 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 80063d6:	4b5e      	ldr	r3, [pc, #376]	; (8006550 <lv_obj_draw+0x47c>)
 80063d8:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 80063da:	2301      	movs	r3, #1
 80063dc:	9314      	str	r3, [sp, #80]	; 0x50
            part_dsc.rect_dsc = &draw_dsc;
 80063de:	9716      	str	r7, [sp, #88]	; 0x58
            part_dsc.draw_area = &coords;
 80063e0:	f10d 0808 	add.w	r8, sp, #8
 80063e4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
            part_dsc.part = LV_PART_MAIN;
 80063e8:	961f      	str	r6, [sp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80063ea:	aa12      	add	r2, sp, #72	; 0x48
 80063ec:	211a      	movs	r1, #26
 80063ee:	4620      	mov	r0, r4
 80063f0:	f7fd fc86 	bl	8003d00 <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80063f4:	4642      	mov	r2, r8
 80063f6:	4639      	mov	r1, r7
 80063f8:	4628      	mov	r0, r5
 80063fa:	f008 ff11 	bl	800f220 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80063fe:	aa12      	add	r2, sp, #72	; 0x48
 8006400:	211b      	movs	r1, #27
 8006402:	4620      	mov	r0, r4
 8006404:	f7fd fc7c 	bl	8003d00 <lv_event_send>
 8006408:	e676      	b.n	80060f8 <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 800640a:	2220      	movs	r2, #32
 800640c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006410:	4620      	mov	r0, r4
 8006412:	f004 f9e9 	bl	800a7e8 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8006416:	f8ad 0014 	strh.w	r0, [sp, #20]
 800641a:	e73c      	b.n	8006296 <lv_obj_draw+0x1c2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800641c:	2232      	movs	r2, #50	; 0x32
 800641e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006422:	4620      	mov	r0, r4
 8006424:	f004 f9e0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006428:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 800642a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 800642e:	2800      	cmp	r0, #0
 8006430:	dc03      	bgt.n	800643a <lv_obj_draw+0x366>
            dsc->border_opa = LV_OPA_TRANSP;
 8006432:	2300      	movs	r3, #0
 8006434:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8006438:	e739      	b.n	80062ae <lv_obj_draw+0x1da>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 800643a:	2230      	movs	r2, #48	; 0x30
 800643c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006440:	4620      	mov	r0, r4
 8006442:	f004 f9d1 	bl	800a7e8 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8006446:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 800644a:	e730      	b.n	80062ae <lv_obj_draw+0x1da>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 800644c:	2240      	movs	r2, #64	; 0x40
 800644e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006452:	4620      	mov	r0, r4
 8006454:	f004 f9c8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006458:	b200      	sxth	r0, r0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 800645a:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 800645e:	2800      	cmp	r0, #0
 8006460:	dc03      	bgt.n	800646a <lv_obj_draw+0x396>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8006462:	2300      	movs	r3, #0
 8006464:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8006468:	e72d      	b.n	80062c6 <lv_obj_draw+0x1f2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800646a:	2243      	movs	r2, #67	; 0x43
 800646c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006470:	4620      	mov	r0, r4
 8006472:	f004 f9b9 	bl	800a7e8 <lv_obj_get_style_prop>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8006476:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 800647a:	2244      	movs	r2, #68	; 0x44
 800647c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006480:	4620      	mov	r0, r4
 8006482:	f004 f9b1 	bl	800a7e8 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8006486:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 800648a:	e71c      	b.n	80062c6 <lv_obj_draw+0x1f2>
        part_dsc.draw_area = &hor_area;
 800648c:	f8cd d054 	str.w	sp, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8006490:	aa12      	add	r2, sp, #72	; 0x48
 8006492:	211a      	movs	r1, #26
 8006494:	4620      	mov	r0, r4
 8006496:	f7fd fc33 	bl	8003d00 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 800649a:	466a      	mov	r2, sp
 800649c:	a904      	add	r1, sp, #16
 800649e:	4628      	mov	r0, r5
 80064a0:	f008 febe 	bl	800f220 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80064a4:	aa12      	add	r2, sp, #72	; 0x48
 80064a6:	211b      	movs	r1, #27
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7fd fc29 	bl	8003d00 <lv_event_send>
 80064ae:	e745      	b.n	800633c <lv_obj_draw+0x268>
        part_dsc.draw_area = &ver_area;
 80064b0:	ae02      	add	r6, sp, #8
 80064b2:	9615      	str	r6, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80064b4:	aa12      	add	r2, sp, #72	; 0x48
 80064b6:	211a      	movs	r1, #26
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7fd fc21 	bl	8003d00 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 80064be:	9615      	str	r6, [sp, #84]	; 0x54
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 80064c0:	4632      	mov	r2, r6
 80064c2:	a904      	add	r1, sp, #16
 80064c4:	4628      	mov	r0, r5
 80064c6:	f008 feab 	bl	800f220 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 80064ca:	aa12      	add	r2, sp, #72	; 0x48
 80064cc:	211b      	movs	r1, #27
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7fd fc16 	bl	8003d00 <lv_event_send>
 80064d4:	e738      	b.n	8006348 <lv_obj_draw+0x274>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 80064d6:	f504 7090 	add.w	r0, r4, #288	; 0x120
 80064da:	f008 fa4b 	bl	800e974 <lv_draw_mask_remove_custom>
            if(param) {
 80064de:	4606      	mov	r6, r0
 80064e0:	2800      	cmp	r0, #0
 80064e2:	f43f af39 	beq.w	8006358 <lv_obj_draw+0x284>
                lv_draw_mask_free_param(param);
 80064e6:	f008 fa5d 	bl	800e9a4 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 80064ea:	4630      	mov	r0, r6
 80064ec:	f01b fa70 	bl	80219d0 <lv_mem_buf_release>
 80064f0:	e732      	b.n	8006358 <lv_obj_draw+0x284>
        const void * bg_img_src = draw_dsc.bg_img_src;
 80064f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
            draw_dsc.bg_img_src = NULL;
 80064f6:	2700      	movs	r7, #0
 80064f8:	9708      	str	r7, [sp, #32]
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 80064fa:	aa02      	add	r2, sp, #8
 80064fc:	a904      	add	r1, sp, #16
 80064fe:	4630      	mov	r0, r6
 8006500:	f008 fe8e 	bl	800f220 <lv_draw_rect>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8006504:	2018      	movs	r0, #24
 8006506:	f01b fa01 	bl	802190c <lv_mem_buf_get>
 800650a:	4605      	mov	r5, r0
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 800650c:	463b      	mov	r3, r7
 800650e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8006512:	f104 0114 	add.w	r1, r4, #20
 8006516:	f008 fbd3 	bl	800ecc0 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 800651a:	f504 7190 	add.w	r1, r4, #288	; 0x120
 800651e:	4628      	mov	r0, r5
 8006520:	f008 f9cc 	bl	800e8bc <lv_draw_mask_add>
            if(bg_img_src) {
 8006524:	f1b8 0f00 	cmp.w	r8, #0
 8006528:	f43f ae8e 	beq.w	8006248 <lv_obj_draw+0x174>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 800652c:	2300      	movs	r3, #0
 800652e:	f88d 3013 	strb.w	r3, [sp, #19]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8006532:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8006536:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 800653a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                draw_dsc.bg_img_src = bg_img_src;
 800653e:	f8cd 8020 	str.w	r8, [sp, #32]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006542:	aa02      	add	r2, sp, #8
 8006544:	a904      	add	r1, sp, #16
 8006546:	4630      	mov	r0, r6
 8006548:	f008 fe6a 	bl	800f220 <lv_draw_rect>
 800654c:	e67c      	b.n	8006248 <lv_obj_draw+0x174>
 800654e:	bf00      	nop
 8006550:	0802cf74 	.word	0x0802cf74

08006554 <lv_obj_constructor>:
{
 8006554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006558:	460c      	mov	r4, r1
    lv_obj_t * parent = obj->parent;
 800655a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    if(parent) {
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	d026      	beq.n	80065b2 <lv_obj_constructor+0x5e>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8006564:	4640      	mov	r0, r8
 8006566:	f002 ff23 	bl	80093b0 <lv_obj_get_scroll_left>
 800656a:	4607      	mov	r7, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800656c:	4640      	mov	r0, r8
 800656e:	f002 fead 	bl	80092cc <lv_obj_get_scroll_top>
 8006572:	4605      	mov	r5, r0
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8006574:	f8b8 6016 	ldrh.w	r6, [r8, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006578:	2210      	movs	r2, #16
 800657a:	2100      	movs	r1, #0
 800657c:	4640      	mov	r0, r8
 800657e:	f004 f933 	bl	800a7e8 <lv_obj_get_style_prop>
 8006582:	1833      	adds	r3, r6, r0
 8006584:	1b5b      	subs	r3, r3, r5
 8006586:	b29b      	uxth	r3, r3
 8006588:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 800658a:	3b01      	subs	r3, #1
 800658c:	8363      	strh	r3, [r4, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 800658e:	f8b8 5014 	ldrh.w	r5, [r8, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006592:	2212      	movs	r2, #18
 8006594:	2100      	movs	r1, #0
 8006596:	4640      	mov	r0, r8
 8006598:	f004 f926 	bl	800a7e8 <lv_obj_get_style_prop>
 800659c:	4405      	add	r5, r0
 800659e:	1be8      	subs	r0, r5, r7
 80065a0:	b280      	uxth	r0, r0
 80065a2:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 80065a4:	3801      	subs	r0, #1
 80065a6:	8320      	strh	r0, [r4, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80065a8:	f64b 3376 	movw	r3, #47990	; 0xbb76
 80065ac:	61e3      	str	r3, [r4, #28]
}
 80065ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 80065b2:	f641 0376 	movw	r3, #6262	; 0x1876
 80065b6:	61cb      	str	r3, [r1, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80065b8:	e7f9      	b.n	80065ae <lv_obj_constructor+0x5a>

080065ba <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 80065ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065be:	b08d      	sub	sp, #52	; 0x34
 80065c0:	910a      	str	r1, [sp, #40]	; 0x28
    if(obj->state == new_state) return;
 80065c2:	8c03      	ldrh	r3, [r0, #32]
 80065c4:	9309      	str	r3, [sp, #36]	; 0x24
 80065c6:	428b      	cmp	r3, r1
 80065c8:	d008      	beq.n	80065dc <lv_obj_set_state+0x22>
 80065ca:	4683      	mov	fp, r0
 80065cc:	460c      	mov	r4, r1

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
 80065ce:	8401      	strh	r1, [r0, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 80065d0:	460a      	mov	r2, r1
 80065d2:	4619      	mov	r1, r3
 80065d4:	f004 fe4c 	bl	800b270 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 80065d8:	9008      	str	r0, [sp, #32]
 80065da:	b910      	cbnz	r0, 80065e2 <lv_obj_set_state+0x28>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 80065dc:	b00d      	add	sp, #52	; 0x34
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80065e2:	f44f 7020 	mov.w	r0, #640	; 0x280
 80065e6:	f01b f991 	bl	802190c <lv_mem_buf_get>
 80065ea:	9005      	str	r0, [sp, #20]
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80065ec:	f44f 7120 	mov.w	r1, #640	; 0x280
 80065f0:	f01b fbba 	bl	8021d68 <lv_memset_00>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80065f4:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 80065f8:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 80065fc:	f000 80fc 	beq.w	80067f8 <lv_obj_set_state+0x23e>
 8006600:	2200      	movs	r2, #0
    uint32_t tsi = 0;
 8006602:	4692      	mov	sl, r2
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8006604:	43e3      	mvns	r3, r4
 8006606:	9307      	str	r3, [sp, #28]
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8006608:	f8cd b010 	str.w	fp, [sp, #16]
 800660c:	4693      	mov	fp, r2
 800660e:	e01b      	b.n	8006648 <lv_obj_set_state+0x8e>
        for(i = 0; i < style->prop_cnt; i++) {
 8006610:	79dd      	ldrb	r5, [r3, #7]
 8006612:	b165      	cbz	r5, 800662e <lv_obj_set_state+0x74>
            const_prop = style->v_p.const_props + i;
 8006614:	681c      	ldr	r4, [r3, #0]
 8006616:	4622      	mov	r2, r4
        for(i = 0; i < style->prop_cnt; i++) {
 8006618:	2300      	movs	r3, #0
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 800661a:	f834 1033 	ldrh.w	r1, [r4, r3, lsl #3]
            if(prop_id == prop) {
 800661e:	f3c1 000d 	ubfx	r0, r1, #0, #14
 8006622:	2866      	cmp	r0, #102	; 0x66
 8006624:	d048      	beq.n	80066b8 <lv_obj_set_state+0xfe>
        for(i = 0; i < style->prop_cnt; i++) {
 8006626:	3301      	adds	r3, #1
 8006628:	3208      	adds	r2, #8
 800662a:	42ab      	cmp	r3, r5
 800662c:	d1f5      	bne.n	800661a <lv_obj_set_state+0x60>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 800662e:	f10b 0b01 	add.w	fp, fp, #1
 8006632:	9b04      	ldr	r3, [sp, #16]
 8006634:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006636:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800663a:	455b      	cmp	r3, fp
 800663c:	f240 80c5 	bls.w	80067ca <lv_obj_set_state+0x210>
 8006640:	f1ba 0f1f 	cmp.w	sl, #31
 8006644:	f200 80ec 	bhi.w	8006820 <lv_obj_set_state+0x266>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8006648:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800664c:	9f04      	ldr	r7, [sp, #16]
 800664e:	68fd      	ldr	r5, [r7, #12]
 8006650:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8006654:	9606      	str	r6, [sp, #24]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006656:	6870      	ldr	r0, [r6, #4]
 8006658:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800665c:	f004 ff3f 	bl	800b4de <lv_obj_style_get_selector_state>
 8006660:	4680      	mov	r8, r0
 8006662:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4423      	add	r3, r4
 8006668:	6858      	ldr	r0, [r3, #4]
 800666a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800666e:	f004 ff38 	bl	800b4e2 <lv_obj_style_get_selector_part>
 8006672:	4607      	mov	r7, r0
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	ea13 0f08 	tst.w	r3, r8
 800667a:	d1d8      	bne.n	800662e <lv_obj_set_state+0x74>
        if(obj_style->is_trans) continue;
 800667c:	79f3      	ldrb	r3, [r6, #7]
 800667e:	f013 0f02 	tst.w	r3, #2
 8006682:	d1d4      	bne.n	800662e <lv_obj_set_state+0x74>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8006684:	592b      	ldr	r3, [r5, r4]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8006686:	889a      	ldrh	r2, [r3, #4]
 8006688:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800668c:	428a      	cmp	r2, r1
 800668e:	d0bf      	beq.n	8006610 <lv_obj_set_state+0x56>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8006690:	79d8      	ldrb	r0, [r3, #7]
 8006692:	2800      	cmp	r0, #0
 8006694:	d0cb      	beq.n	800662e <lv_obj_set_state+0x74>
    if(style->prop_cnt > 1) {
 8006696:	2801      	cmp	r0, #1
 8006698:	d936      	bls.n	8006708 <lv_obj_set_state+0x14e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 800669a:	681c      	ldr	r4, [r3, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 800669c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80066a0:	3a02      	subs	r2, #2
 80066a2:	2300      	movs	r3, #0
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 80066a4:	f832 1f02 	ldrh.w	r1, [r2, #2]!
            if(prop_id == prop) {
 80066a8:	f3c1 050d 	ubfx	r5, r1, #0, #14
 80066ac:	2d66      	cmp	r5, #102	; 0x66
 80066ae:	d01d      	beq.n	80066ec <lv_obj_set_state+0x132>
        for(i = 0; i < style->prop_cnt; i++) {
 80066b0:	3301      	adds	r3, #1
 80066b2:	4298      	cmp	r0, r3
 80066b4:	d1f6      	bne.n	80066a4 <lv_obj_set_state+0xea>
 80066b6:	e7ba      	b.n	800662e <lv_obj_set_state+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 80066b8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80066bc:	d1b7      	bne.n	800662e <lv_obj_set_state+0x74>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80066be:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 80066c2:	d10f      	bne.n	80066e4 <lv_obj_set_state+0x12a>
 80066c4:	f8d2 9004 	ldr.w	r9, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 80066c8:	f8d9 3000 	ldr.w	r3, [r9]
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0ad      	beq.n	800662e <lv_obj_set_state+0x74>
 80066d2:	f1ba 0f1f 	cmp.w	sl, #31
 80066d6:	d8aa      	bhi.n	800662e <lv_obj_set_state+0x74>
 80066d8:	f04f 0800 	mov.w	r8, #0
 80066dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80066e0:	46bb      	mov	fp, r7
 80066e2:	e047      	b.n	8006774 <lv_obj_set_state+0x1ba>
 80066e4:	f01c f98c 	bl	8022a00 <lv_style_prop_get_default>
 80066e8:	4681      	mov	r9, r0
 80066ea:	e7ed      	b.n	80066c8 <lv_obj_set_state+0x10e>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 80066ec:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80066f0:	d19d      	bne.n	800662e <lv_obj_set_state+0x74>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 80066f2:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 80066f6:	d102      	bne.n	80066fe <lv_obj_set_state+0x144>
                    *value = values[i];
 80066f8:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
 80066fc:	e7e4      	b.n	80066c8 <lv_obj_set_state+0x10e>
                    *value = lv_style_prop_get_default(prop_id);
 80066fe:	2066      	movs	r0, #102	; 0x66
 8006700:	f01c f97e 	bl	8022a00 <lv_style_prop_get_default>
 8006704:	4681      	mov	r9, r0
 8006706:	e7df      	b.n	80066c8 <lv_obj_set_state+0x10e>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8006708:	f3c2 010d 	ubfx	r1, r2, #0, #14
 800670c:	2966      	cmp	r1, #102	; 0x66
 800670e:	d18e      	bne.n	800662e <lv_obj_set_state+0x74>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8006710:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006714:	d18b      	bne.n	800662e <lv_obj_set_state+0x74>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8006716:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800671a:	d102      	bne.n	8006722 <lv_obj_set_state+0x168>
 800671c:	f8d3 9000 	ldr.w	r9, [r3]
 8006720:	e7d2      	b.n	80066c8 <lv_obj_set_state+0x10e>
 8006722:	2066      	movs	r0, #102	; 0x66
 8006724:	f01c f96c 	bl	8022a00 <lv_style_prop_get_default>
 8006728:	4681      	mov	r9, r0
 800672a:	e7cd      	b.n	80066c8 <lv_obj_set_state+0x10e>
            for(t = 0; t < tsi; t++) {
 800672c:	3601      	adds	r6, #1
 800672e:	3414      	adds	r4, #20
 8006730:	4556      	cmp	r6, sl
 8006732:	d025      	beq.n	8006780 <lv_obj_set_state+0x1c6>
                lv_style_selector_t selector = ts[t].selector;
 8006734:	6867      	ldr	r7, [r4, #4]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8006736:	4638      	mov	r0, r7
 8006738:	f004 fed1 	bl	800b4de <lv_obj_style_get_selector_state>
 800673c:	4605      	mov	r5, r0
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 800673e:	4638      	mov	r0, r7
 8006740:	f004 fecf 	bl	800b4e2 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8006744:	f8d9 3000 	ldr.w	r3, [r9]
 8006748:	8922      	ldrh	r2, [r4, #8]
 800674a:	f833 3008 	ldrh.w	r3, [r3, r8]
 800674e:	429a      	cmp	r2, r3
 8006750:	d1ec      	bne.n	800672c <lv_obj_set_state+0x172>
 8006752:	4583      	cmp	fp, r0
 8006754:	d1ea      	bne.n	800672c <lv_obj_set_state+0x172>
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	42ab      	cmp	r3, r5
 800675a:	d8e7      	bhi.n	800672c <lv_obj_set_state+0x172>
            if(t == tsi) {
 800675c:	45b2      	cmp	sl, r6
 800675e:	d00f      	beq.n	8006780 <lv_obj_set_state+0x1c6>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006760:	f108 0802 	add.w	r8, r8, #2
 8006764:	f8d9 3000 	ldr.w	r3, [r9]
 8006768:	f833 3008 	ldrh.w	r3, [r3, r8]
 800676c:	b353      	cbz	r3, 80067c4 <lv_obj_set_state+0x20a>
 800676e:	f1ba 0f1f 	cmp.w	sl, #31
 8006772:	d824      	bhi.n	80067be <lv_obj_set_state+0x204>
            for(t = 0; t < tsi; t++) {
 8006774:	f1ba 0f00 	cmp.w	sl, #0
 8006778:	d002      	beq.n	8006780 <lv_obj_set_state+0x1c6>
 800677a:	9c05      	ldr	r4, [sp, #20]
 800677c:	2600      	movs	r6, #0
 800677e:	e7d9      	b.n	8006734 <lv_obj_set_state+0x17a>
                ts[tsi].time = tr->time;
 8006780:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8006784:	9805      	ldr	r0, [sp, #20]
 8006786:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800678a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800678e:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
                ts[tsi].delay = tr->delay;
 8006792:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006796:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8006798:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800679c:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 800679e:	f8d9 2000 	ldr.w	r2, [r9]
 80067a2:	f832 2008 	ldrh.w	r2, [r2, r8]
 80067a6:	811a      	strh	r2, [r3, #8]
                ts[tsi].user_data = tr->user_data;
 80067a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80067ac:	611a      	str	r2, [r3, #16]
                ts[tsi].selector = obj_style->selector;
 80067ae:	9a06      	ldr	r2, [sp, #24]
 80067b0:	6852      	ldr	r2, [r2, #4]
 80067b2:	f3c2 0217 	ubfx	r2, r2, #0, #24
 80067b6:	605a      	str	r2, [r3, #4]
                tsi++;
 80067b8:	f10a 0a01 	add.w	sl, sl, #1
 80067bc:	e7d0      	b.n	8006760 <lv_obj_set_state+0x1a6>
 80067be:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80067c2:	e734      	b.n	800662e <lv_obj_set_state+0x74>
 80067c4:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80067c8:	e731      	b.n	800662e <lv_obj_set_state+0x74>
    for(i = 0; i < tsi; i++) {
 80067ca:	f8dd b010 	ldr.w	fp, [sp, #16]
 80067ce:	f1ba 0f00 	cmp.w	sl, #0
 80067d2:	d011      	beq.n	80067f8 <lv_obj_set_state+0x23e>
 80067d4:	9c05      	ldr	r4, [sp, #20]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 80067d6:	2500      	movs	r5, #0
 80067d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80067da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 80067dc:	6860      	ldr	r0, [r4, #4]
 80067de:	f004 fe80 	bl	800b4e2 <lv_obj_style_get_selector_part>
 80067e2:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 80067e4:	9400      	str	r4, [sp, #0]
 80067e6:	463b      	mov	r3, r7
 80067e8:	4632      	mov	r2, r6
 80067ea:	4658      	mov	r0, fp
 80067ec:	f004 fc6c 	bl	800b0c8 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 80067f0:	3501      	adds	r5, #1
 80067f2:	3414      	adds	r4, #20
 80067f4:	45aa      	cmp	sl, r5
 80067f6:	d1f1      	bne.n	80067dc <lv_obj_set_state+0x222>
    lv_mem_buf_release(ts);
 80067f8:	9805      	ldr	r0, [sp, #20]
 80067fa:	f01b f8e9 	bl	80219d0 <lv_mem_buf_release>
    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 80067fe:	9b08      	ldr	r3, [sp, #32]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d010      	beq.n	8006826 <lv_obj_set_state+0x26c>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8006804:	9b08      	ldr	r3, [sp, #32]
 8006806:	2b03      	cmp	r3, #3
 8006808:	d011      	beq.n	800682e <lv_obj_set_state+0x274>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 800680a:	9b08      	ldr	r3, [sp, #32]
 800680c:	2b02      	cmp	r3, #2
 800680e:	f47f aee5 	bne.w	80065dc <lv_obj_set_state+0x22>
        lv_obj_invalidate(obj);
 8006812:	4658      	mov	r0, fp
 8006814:	f001 fbb0 	bl	8007f78 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 8006818:	4658      	mov	r0, fp
 800681a:	f000 ff69 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
 800681e:	e6dd      	b.n	80065dc <lv_obj_set_state+0x22>
 8006820:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006824:	e7d6      	b.n	80067d4 <lv_obj_set_state+0x21a>
        lv_obj_invalidate(obj);
 8006826:	4658      	mov	r0, fp
 8006828:	f001 fba6 	bl	8007f78 <lv_obj_invalidate>
 800682c:	e6d6      	b.n	80065dc <lv_obj_set_state+0x22>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800682e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006832:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006836:	4658      	mov	r0, fp
 8006838:	f004 f898 	bl	800a96c <lv_obj_refresh_style>
 800683c:	e6ce      	b.n	80065dc <lv_obj_set_state+0x22>
	...

08006840 <lv_init>:
{
 8006840:	b508      	push	{r3, lr}
    if(lv_initialized) {
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <lv_init+0x4c>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b103      	cbz	r3, 800684a <lv_init+0xa>
}
 8006848:	bd08      	pop	{r3, pc}
    lv_mem_init();
 800684a:	f01a ffff 	bl	802184c <lv_mem_init>
    _lv_timer_core_init();
 800684e:	f01c fba5 	bl	8022f9c <_lv_timer_core_init>
    _lv_fs_init();
 8006852:	f01a fc7f 	bl	8021154 <_lv_fs_init>
    _lv_anim_core_init();
 8006856:	f019 ff75 	bl	8020744 <_lv_anim_core_init>
    _lv_group_init();
 800685a:	f7fd fbb5 	bl	8003fc8 <_lv_group_init>
    lv_draw_init();
 800685e:	f006 fa5b 	bl	800cd18 <lv_draw_init>
    _lv_obj_style_init();
 8006862:	f003 ffb3 	bl	800a7cc <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8006866:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800686a:	4809      	ldr	r0, [pc, #36]	; (8006890 <lv_init+0x50>)
 800686c:	f01a fe3d 	bl	80214ea <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8006870:	215c      	movs	r1, #92	; 0x5c
 8006872:	4808      	ldr	r0, [pc, #32]	; (8006894 <lv_init+0x54>)
 8006874:	f01a fe39 	bl	80214ea <_lv_ll_init>
    _lv_refr_init();
 8006878:	f005 f91c 	bl	800bab4 <_lv_refr_init>
    _lv_img_decoder_init();
 800687c:	f009 f9b8 	bl	800fbf0 <_lv_img_decoder_init>
    lv_extra_init();
 8006880:	f010 fe7a 	bl	8017578 <lv_extra_init>
    lv_initialized = true;
 8006884:	4b01      	ldr	r3, [pc, #4]	; (800688c <lv_init+0x4c>)
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
    LV_LOG_TRACE("finished");
 800688a:	e7dd      	b.n	8006848 <lv_init+0x8>
 800688c:	20002538 	.word	0x20002538
 8006890:	200027dc 	.word	0x200027dc
 8006894:	200028bc 	.word	0x200028bc

08006898 <lv_obj_create>:
{
 8006898:	b510      	push	{r4, lr}
 800689a:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 800689c:	4803      	ldr	r0, [pc, #12]	; (80068ac <lv_obj_create+0x14>)
 800689e:	f000 faf7 	bl	8006e90 <lv_obj_class_create_obj>
 80068a2:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80068a4:	f000 fba1 	bl	8006fea <lv_obj_class_init_obj>
}
 80068a8:	4620      	mov	r0, r4
 80068aa:	bd10      	pop	{r4, pc}
 80068ac:	0802cf74 	.word	0x0802cf74

080068b0 <lv_obj_add_flag>:
{
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	4604      	mov	r4, r0
 80068b6:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 80068b8:	f001 f850 	bl	800795c <lv_obj_is_layout_positioned>
 80068bc:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 80068be:	f015 0f01 	tst.w	r5, #1
 80068c2:	d117      	bne.n	80068f4 <lv_obj_add_flag+0x44>
    obj->flags |= f;
 80068c4:	69e3      	ldr	r3, [r4, #28]
 80068c6:	432b      	orrs	r3, r5
 80068c8:	61e3      	str	r3, [r4, #28]
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 80068ca:	4620      	mov	r0, r4
 80068cc:	f001 f846 	bl	800795c <lv_obj_is_layout_positioned>
 80068d0:	42b0      	cmp	r0, r6
 80068d2:	d102      	bne.n	80068da <lv_obj_add_flag+0x2a>
 80068d4:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 80068d8:	d007      	beq.n	80068ea <lv_obj_add_flag+0x3a>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80068da:	4620      	mov	r0, r4
 80068dc:	f004 fec6 	bl	800b66c <lv_obj_get_parent>
 80068e0:	f001 f856 	bl	8007990 <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 80068e4:	4620      	mov	r0, r4
 80068e6:	f001 f853 	bl	8007990 <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 80068ea:	f015 0f10 	tst.w	r5, #16
 80068ee:	d10b      	bne.n	8006908 <lv_obj_add_flag+0x58>
}
 80068f0:	b004      	add	sp, #16
 80068f2:	bd70      	pop	{r4, r5, r6, pc}
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 80068f4:	4620      	mov	r0, r4
 80068f6:	f001 fb3f 	bl	8007f78 <lv_obj_invalidate>
    obj->flags |= f;
 80068fa:	69e3      	ldr	r3, [r4, #28]
 80068fc:	432b      	orrs	r3, r5
 80068fe:	61e3      	str	r3, [r4, #28]
        lv_obj_invalidate(obj);
 8006900:	4620      	mov	r0, r4
 8006902:	f001 fb39 	bl	8007f78 <lv_obj_invalidate>
 8006906:	e7e0      	b.n	80068ca <lv_obj_add_flag+0x1a>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006908:	aa02      	add	r2, sp, #8
 800690a:	4669      	mov	r1, sp
 800690c:	4620      	mov	r0, r4
 800690e:	f003 f97f 	bl	8009c10 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8006912:	4669      	mov	r1, sp
 8006914:	4620      	mov	r0, r4
 8006916:	f001 fb0b 	bl	8007f30 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 800691a:	a902      	add	r1, sp, #8
 800691c:	4620      	mov	r0, r4
 800691e:	f001 fb07 	bl	8007f30 <lv_obj_invalidate_area>
}
 8006922:	e7e5      	b.n	80068f0 <lv_obj_add_flag+0x40>

08006924 <lv_obj_clear_flag>:
{
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	4604      	mov	r4, r0
 800692a:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 800692c:	f001 f816 	bl	800795c <lv_obj_is_layout_positioned>
 8006930:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8006932:	f015 0f10 	tst.w	r5, #16
 8006936:	d115      	bne.n	8006964 <lv_obj_clear_flag+0x40>
    obj->flags &= (~f);
 8006938:	69e3      	ldr	r3, [r4, #28]
 800693a:	ea23 0305 	bic.w	r3, r3, r5
 800693e:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8006940:	f015 0f01 	tst.w	r5, #1
 8006944:	d11c      	bne.n	8006980 <lv_obj_clear_flag+0x5c>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8006946:	4620      	mov	r0, r4
 8006948:	f001 f808 	bl	800795c <lv_obj_is_layout_positioned>
 800694c:	42b0      	cmp	r0, r6
 800694e:	d102      	bne.n	8006956 <lv_obj_clear_flag+0x32>
 8006950:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8006954:	d004      	beq.n	8006960 <lv_obj_clear_flag+0x3c>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8006956:	4620      	mov	r0, r4
 8006958:	f004 fe88 	bl	800b66c <lv_obj_get_parent>
 800695c:	f001 f818 	bl	8007990 <lv_obj_mark_layout_as_dirty>
}
 8006960:	b004      	add	sp, #16
 8006962:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006964:	aa02      	add	r2, sp, #8
 8006966:	4669      	mov	r1, sp
 8006968:	4620      	mov	r0, r4
 800696a:	f003 f951 	bl	8009c10 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 800696e:	4669      	mov	r1, sp
 8006970:	4620      	mov	r0, r4
 8006972:	f001 fadd 	bl	8007f30 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8006976:	a902      	add	r1, sp, #8
 8006978:	4620      	mov	r0, r4
 800697a:	f001 fad9 	bl	8007f30 <lv_obj_invalidate_area>
 800697e:	e7db      	b.n	8006938 <lv_obj_clear_flag+0x14>
        lv_obj_invalidate(obj);
 8006980:	4620      	mov	r0, r4
 8006982:	f001 faf9 	bl	8007f78 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8006986:	4620      	mov	r0, r4
 8006988:	f000 ffe8 	bl	800795c <lv_obj_is_layout_positioned>
 800698c:	2800      	cmp	r0, #0
 800698e:	d0da      	beq.n	8006946 <lv_obj_clear_flag+0x22>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8006990:	4620      	mov	r0, r4
 8006992:	f004 fe6b 	bl	800b66c <lv_obj_get_parent>
 8006996:	f000 fffb 	bl	8007990 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fff8 	bl	8007990 <lv_obj_mark_layout_as_dirty>
 80069a0:	e7d1      	b.n	8006946 <lv_obj_clear_flag+0x22>

080069a2 <lv_obj_add_state>:
{
 80069a2:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state | state;
 80069a4:	8c03      	ldrh	r3, [r0, #32]
 80069a6:	ea43 0201 	orr.w	r2, r3, r1
    if(obj->state != new_state) {
 80069aa:	ea31 0303 	bics.w	r3, r1, r3
 80069ae:	d100      	bne.n	80069b2 <lv_obj_add_state+0x10>
}
 80069b0:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 80069b2:	4611      	mov	r1, r2
 80069b4:	f7ff fe01 	bl	80065ba <lv_obj_set_state>
}
 80069b8:	e7fa      	b.n	80069b0 <lv_obj_add_state+0xe>

080069ba <lv_obj_clear_state>:
{
 80069ba:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state & (~state);
 80069bc:	8c03      	ldrh	r3, [r0, #32]
 80069be:	ea23 0201 	bic.w	r2, r3, r1
    if(obj->state != new_state) {
 80069c2:	4219      	tst	r1, r3
 80069c4:	d100      	bne.n	80069c8 <lv_obj_clear_state+0xe>
}
 80069c6:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 80069c8:	4611      	mov	r1, r2
 80069ca:	f7ff fdf6 	bl	80065ba <lv_obj_set_state>
}
 80069ce:	e7fa      	b.n	80069c6 <lv_obj_clear_state+0xc>

080069d0 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 80069d0:	69c3      	ldr	r3, [r0, #28]
 80069d2:	ea31 0303 	bics.w	r3, r1, r3
}
 80069d6:	bf0c      	ite	eq
 80069d8:	2001      	moveq	r0, #1
 80069da:	2000      	movne	r0, #0
 80069dc:	4770      	bx	lr

080069de <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 80069de:	69c3      	ldr	r3, [r0, #28]
 80069e0:	4219      	tst	r1, r3
}
 80069e2:	bf14      	ite	ne
 80069e4:	2001      	movne	r0, #1
 80069e6:	2000      	moveq	r0, #0
 80069e8:	4770      	bx	lr

080069ea <lv_obj_get_state>:
}
 80069ea:	8c00      	ldrh	r0, [r0, #32]
 80069ec:	4770      	bx	lr

080069ee <lv_obj_has_state>:
    return obj->state & state ? true : false;
 80069ee:	8c03      	ldrh	r3, [r0, #32]
 80069f0:	4219      	tst	r1, r3
}
 80069f2:	bf14      	ite	ne
 80069f4:	2001      	movne	r0, #1
 80069f6:	2000      	moveq	r0, #0
 80069f8:	4770      	bx	lr

080069fa <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 80069fa:	6880      	ldr	r0, [r0, #8]
 80069fc:	b100      	cbz	r0, 8006a00 <lv_obj_get_group+0x6>
 80069fe:	6880      	ldr	r0, [r0, #8]
}
 8006a00:	4770      	bx	lr

08006a02 <lv_obj_event>:
{
 8006a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a04:	b085      	sub	sp, #20
 8006a06:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 8006a08:	4608      	mov	r0, r1
 8006a0a:	f7fd f99f 	bl	8003d4c <lv_event_get_code>
 8006a0e:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7fd f999 	bl	8003d48 <lv_event_get_current_target>
 8006a16:	4605      	mov	r5, r0
    if(code == LV_EVENT_PRESSED) {
 8006a18:	2c01      	cmp	r4, #1
 8006a1a:	d029      	beq.n	8006a70 <lv_obj_event+0x6e>
    else if(code == LV_EVENT_RELEASED) {
 8006a1c:	2c08      	cmp	r4, #8
 8006a1e:	d02c      	beq.n	8006a7a <lv_obj_event+0x78>
    else if(code == LV_EVENT_PRESS_LOST) {
 8006a20:	2c03      	cmp	r4, #3
 8006a22:	d04b      	beq.n	8006abc <lv_obj_event+0xba>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8006a24:	2c2a      	cmp	r4, #42	; 0x2a
 8006a26:	d04d      	beq.n	8006ac4 <lv_obj_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 8006a28:	2c0d      	cmp	r4, #13
 8006a2a:	d05b      	beq.n	8006ae4 <lv_obj_event+0xe2>
    else if(code == LV_EVENT_FOCUSED) {
 8006a2c:	2c0e      	cmp	r4, #14
 8006a2e:	f000 8121 	beq.w	8006c74 <lv_obj_event+0x272>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8006a32:	2c09      	cmp	r4, #9
 8006a34:	f000 814c 	beq.w	8006cd0 <lv_obj_event+0x2ce>
    else if(code == LV_EVENT_SCROLL_END) {
 8006a38:	2c0a      	cmp	r4, #10
 8006a3a:	f000 814d 	beq.w	8006cd8 <lv_obj_event+0x2d6>
    else if(code == LV_EVENT_DEFOCUSED) {
 8006a3e:	2c0f      	cmp	r4, #15
 8006a40:	f000 8161 	beq.w	8006d06 <lv_obj_event+0x304>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8006a44:	2c29      	cmp	r4, #41	; 0x29
 8006a46:	f000 8162 	beq.w	8006d0e <lv_obj_event+0x30c>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 8006a4a:	2c22      	cmp	r4, #34	; 0x22
 8006a4c:	f000 8183 	beq.w	8006d56 <lv_obj_event+0x354>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8006a50:	2c13      	cmp	r4, #19
 8006a52:	f000 81a8 	beq.w	8006da6 <lv_obj_event+0x3a4>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 8006a56:	2c18      	cmp	r4, #24
 8006a58:	d80d      	bhi.n	8006a76 <lv_obj_event+0x74>
 8006a5a:	f04f 7392 	mov.w	r3, #19136512	; 0x1240000
 8006a5e:	fa23 f404 	lsr.w	r4, r3, r4
 8006a62:	f014 0f01 	tst.w	r4, #1
 8006a66:	d006      	beq.n	8006a76 <lv_obj_event+0x74>
        lv_obj_draw(e);
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7ff fb33 	bl	80060d4 <lv_obj_draw>
 8006a6e:	e002      	b.n	8006a76 <lv_obj_event+0x74>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8006a70:	2120      	movs	r1, #32
 8006a72:	f7ff ff96 	bl	80069a2 <lv_obj_add_state>
}
 8006a76:	b005      	add	sp, #20
 8006a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8006a7a:	2120      	movs	r1, #32
 8006a7c:	f7ff ff9d 	bl	80069ba <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7fd f967 	bl	8003d54 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8006a86:	f7fd fd85 	bl	8004594 <lv_indev_get_scroll_obj>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d1f3      	bne.n	8006a76 <lv_obj_event+0x74>
    return (obj->flags & f)  == f ? true : false;
 8006a8e:	69eb      	ldr	r3, [r5, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8006a90:	f013 0f08 	tst.w	r3, #8
 8006a94:	d0ef      	beq.n	8006a76 <lv_obj_event+0x74>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 8006a96:	8c2b      	ldrh	r3, [r5, #32]
 8006a98:	f013 0f01 	tst.w	r3, #1
 8006a9c:	d109      	bne.n	8006ab2 <lv_obj_event+0xb0>
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7ff ff7e 	bl	80069a2 <lv_obj_add_state>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	211c      	movs	r1, #28
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f7fd f928 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 8006ab0:	e7e1      	b.n	8006a76 <lv_obj_event+0x74>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f7ff ff80 	bl	80069ba <lv_obj_clear_state>
 8006aba:	e7f4      	b.n	8006aa6 <lv_obj_event+0xa4>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8006abc:	2120      	movs	r1, #32
 8006abe:	f7ff ff7c 	bl	80069ba <lv_obj_clear_state>
 8006ac2:	e7d8      	b.n	8006a76 <lv_obj_event+0x74>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006ac4:	f004 fdeb 	bl	800b69e <lv_obj_get_child_cnt>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8006ac8:	4606      	mov	r6, r0
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d0d3      	beq.n	8006a76 <lv_obj_event+0x74>
 8006ace:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8006ad0:	68ab      	ldr	r3, [r5, #8]
 8006ad2:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 8006ad4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006ad8:	f000 ff5a 	bl	8007990 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 8006adc:	3401      	adds	r4, #1
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d1f6      	bne.n	8006ad0 <lv_obj_event+0xce>
 8006ae2:	e7c8      	b.n	8006a76 <lv_obj_event+0x74>
    return (obj->flags & f)  == f ? true : false;
 8006ae4:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8006ae6:	f013 0f08 	tst.w	r3, #8
 8006aea:	d13b      	bne.n	8006b64 <lv_obj_event+0x162>
    return (obj->flags & f)  == f ? true : false;
 8006aec:	f403 6301 	and.w	r3, r3, #2064	; 0x810
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 8006af0:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006af4:	d1bf      	bne.n	8006a76 <lv_obj_event+0x74>
 8006af6:	f000 fa54 	bl	8006fa2 <lv_obj_is_editable>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d1bb      	bne.n	8006a76 <lv_obj_event+0x74>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8006afe:	4628      	mov	r0, r5
 8006b00:	f002 fc56 	bl	80093b0 <lv_obj_get_scroll_left>
 8006b04:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8006b06:	4628      	mov	r0, r5
 8006b08:	f002 fcc6 	bl	8009498 <lv_obj_get_scroll_right>
 8006b0c:	4604      	mov	r4, r0
            char c = *((char *)lv_event_get_param(e));
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7fd f920 	bl	8003d54 <lv_event_get_param>
 8006b14:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 8006b16:	2b12      	cmp	r3, #18
 8006b18:	d043      	beq.n	8006ba2 <lv_obj_event+0x1a0>
            else if(c == LV_KEY_UP) {
 8006b1a:	2b11      	cmp	r3, #17
 8006b1c:	d054      	beq.n	8006bc8 <lv_obj_event+0x1c6>
            else if(c == LV_KEY_RIGHT) {
 8006b1e:	2b13      	cmp	r3, #19
 8006b20:	d065      	beq.n	8006bee <lv_obj_event+0x1ec>
            else if(c == LV_KEY_LEFT) {
 8006b22:	2b14      	cmp	r3, #20
 8006b24:	d1a7      	bne.n	8006a76 <lv_obj_event+0x74>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006b26:	4628      	mov	r0, r5
 8006b28:	f002 fba8 	bl	800927c <lv_obj_get_scroll_dir>
 8006b2c:	f010 0f03 	tst.w	r0, #3
 8006b30:	f000 808d 	beq.w	8006c4e <lv_obj_event+0x24c>
 8006b34:	2f00      	cmp	r7, #0
 8006b36:	dc02      	bgt.n	8006b3e <lv_obj_event+0x13c>
 8006b38:	2c00      	cmp	r4, #0
 8006b3a:	f340 8088 	ble.w	8006c4e <lv_obj_event+0x24c>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f002 fbb4 	bl	80092ac <lv_obj_get_scroll_x>
 8006b44:	4604      	mov	r4, r0
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 ffcf 	bl	8007aea <lv_obj_get_width>
 8006b4c:	4601      	mov	r1, r0
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	bfb8      	it	lt
 8006b52:	1cc1      	addlt	r1, r0, #3
 8006b54:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 8006b58:	2200      	movs	r2, #0
 8006b5a:	b209      	sxth	r1, r1
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f002 fe83 	bl	8009868 <lv_obj_scroll_to_x>
 8006b62:	e788      	b.n	8006a76 <lv_obj_event+0x74>
            char c = *((char *)lv_event_get_param(e));
 8006b64:	4630      	mov	r0, r6
 8006b66:	f7fd f8f5 	bl	8003d54 <lv_event_get_param>
 8006b6a:	7804      	ldrb	r4, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8006b6c:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 8006b70:	2b11      	cmp	r3, #17
 8006b72:	d007      	beq.n	8006b84 <lv_obj_event+0x182>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8006b74:	2c14      	cmp	r4, #20
 8006b76:	d00f      	beq.n	8006b98 <lv_obj_event+0x196>
 8006b78:	2c12      	cmp	r4, #18
 8006b7a:	d00d      	beq.n	8006b98 <lv_obj_event+0x196>
            if(c != LV_KEY_ENTER) {
 8006b7c:	2c0a      	cmp	r4, #10
 8006b7e:	f43f af7a 	beq.w	8006a76 <lv_obj_event+0x74>
 8006b82:	e003      	b.n	8006b8c <lv_obj_event+0x18a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8006b84:	2101      	movs	r1, #1
 8006b86:	4628      	mov	r0, r5
 8006b88:	f7ff ff0b 	bl	80069a2 <lv_obj_add_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	211c      	movs	r1, #28
 8006b90:	4628      	mov	r0, r5
 8006b92:	f7fd f8b5 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 8006b96:	e76e      	b.n	8006a76 <lv_obj_event+0x74>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8006b98:	2101      	movs	r1, #1
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f7ff ff0d 	bl	80069ba <lv_obj_clear_state>
 8006ba0:	e7ec      	b.n	8006b7c <lv_obj_event+0x17a>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f002 fb8a 	bl	80092bc <lv_obj_get_scroll_y>
 8006ba8:	4604      	mov	r4, r0
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 ffa3 	bl	8007af6 <lv_obj_get_height>
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	bfb8      	it	lt
 8006bb6:	1cc1      	addlt	r1, r0, #3
 8006bb8:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	b209      	sxth	r1, r1
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f002 fe65 	bl	8009890 <lv_obj_scroll_to_y>
 8006bc6:	e756      	b.n	8006a76 <lv_obj_event+0x74>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f002 fb77 	bl	80092bc <lv_obj_get_scroll_y>
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 ff90 	bl	8007af6 <lv_obj_get_height>
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	bfb8      	it	lt
 8006bdc:	1cc1      	addlt	r1, r0, #3
 8006bde:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 8006be2:	2200      	movs	r2, #0
 8006be4:	b209      	sxth	r1, r1
 8006be6:	4628      	mov	r0, r5
 8006be8:	f002 fe52 	bl	8009890 <lv_obj_scroll_to_y>
 8006bec:	e743      	b.n	8006a76 <lv_obj_event+0x74>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f002 fb44 	bl	800927c <lv_obj_get_scroll_dir>
 8006bf4:	f010 0f03 	tst.w	r0, #3
 8006bf8:	d016      	beq.n	8006c28 <lv_obj_event+0x226>
 8006bfa:	2f00      	cmp	r7, #0
 8006bfc:	dc01      	bgt.n	8006c02 <lv_obj_event+0x200>
 8006bfe:	2c00      	cmp	r4, #0
 8006c00:	dd12      	ble.n	8006c28 <lv_obj_event+0x226>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8006c02:	4628      	mov	r0, r5
 8006c04:	f002 fb52 	bl	80092ac <lv_obj_get_scroll_x>
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 ff6d 	bl	8007aea <lv_obj_get_width>
 8006c10:	4601      	mov	r1, r0
 8006c12:	2800      	cmp	r0, #0
 8006c14:	bfb8      	it	lt
 8006c16:	1cc1      	addlt	r1, r0, #3
 8006c18:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	b209      	sxth	r1, r1
 8006c20:	4628      	mov	r0, r5
 8006c22:	f002 fe21 	bl	8009868 <lv_obj_scroll_to_x>
 8006c26:	e726      	b.n	8006a76 <lv_obj_event+0x74>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f002 fb47 	bl	80092bc <lv_obj_get_scroll_y>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4628      	mov	r0, r5
 8006c32:	f000 ff60 	bl	8007af6 <lv_obj_get_height>
 8006c36:	4601      	mov	r1, r0
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	bfb8      	it	lt
 8006c3c:	1cc1      	addlt	r1, r0, #3
 8006c3e:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8006c42:	2200      	movs	r2, #0
 8006c44:	b209      	sxth	r1, r1
 8006c46:	4628      	mov	r0, r5
 8006c48:	f002 fe22 	bl	8009890 <lv_obj_scroll_to_y>
 8006c4c:	e713      	b.n	8006a76 <lv_obj_event+0x74>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f002 fb34 	bl	80092bc <lv_obj_get_scroll_y>
 8006c54:	4604      	mov	r4, r0
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 ff4d 	bl	8007af6 <lv_obj_get_height>
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	bfb8      	it	lt
 8006c62:	1cc1      	addlt	r1, r0, #3
 8006c64:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 8006c68:	2200      	movs	r2, #0
 8006c6a:	b209      	sxth	r1, r1
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f002 fe0f 	bl	8009890 <lv_obj_scroll_to_y>
 8006c72:	e700      	b.n	8006a76 <lv_obj_event+0x74>
    return (obj->flags & f)  == f ? true : false;
 8006c74:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8006c76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006c7a:	d117      	bne.n	8006cac <lv_obj_event+0x2aa>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f7ff febc 	bl	80069fa <lv_obj_get_group>
 8006c82:	f7fd fb01 	bl	8004288 <lv_group_get_editing>
 8006c86:	4604      	mov	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
 8006c88:	f7fd fbe0 	bl	800444c <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8006c8c:	b190      	cbz	r0, 8006cb4 <lv_obj_event+0x2b2>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8006c8e:	f7fd fbe3 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8006c92:	2802      	cmp	r0, #2
 8006c94:	d012      	beq.n	8006cbc <lv_obj_event+0x2ba>
 8006c96:	2804      	cmp	r0, #4
 8006c98:	bf14      	ite	ne
 8006c9a:	2102      	movne	r1, #2
 8006c9c:	2106      	moveq	r1, #6
        if(editing) {
 8006c9e:	b17c      	cbz	r4, 8006cc0 <lv_obj_event+0x2be>
            lv_obj_add_state(obj, state);
 8006ca0:	f041 0108 	orr.w	r1, r1, #8
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f7ff fe7c 	bl	80069a2 <lv_obj_add_state>
 8006caa:	e6e4      	b.n	8006a76 <lv_obj_event+0x74>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8006cac:	2101      	movs	r1, #1
 8006cae:	f002 ff8d 	bl	8009bcc <lv_obj_scroll_to_view_recursive>
 8006cb2:	e7e3      	b.n	8006c7c <lv_obj_event+0x27a>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f7fd f8b1 	bl	8003e1c <lv_event_get_indev>
 8006cba:	e7e8      	b.n	8006c8e <lv_obj_event+0x28c>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8006cbc:	2106      	movs	r1, #6
 8006cbe:	e7ee      	b.n	8006c9e <lv_obj_event+0x29c>
            lv_obj_add_state(obj, state);
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f7ff fe6e 	bl	80069a2 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 8006cc6:	2108      	movs	r1, #8
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f7ff fe76 	bl	80069ba <lv_obj_clear_state>
 8006cce:	e6d2      	b.n	8006a76 <lv_obj_event+0x74>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8006cd0:	2140      	movs	r1, #64	; 0x40
 8006cd2:	f7ff fe66 	bl	80069a2 <lv_obj_add_state>
 8006cd6:	e6ce      	b.n	8006a76 <lv_obj_event+0x74>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 8006cd8:	2140      	movs	r1, #64	; 0x40
 8006cda:	f7ff fe6e 	bl	80069ba <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f002 fac4 	bl	800926c <lv_obj_get_scrollbar_mode>
 8006ce4:	2802      	cmp	r0, #2
 8006ce6:	f47f aec6 	bne.w	8006a76 <lv_obj_event+0x74>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006cea:	aa02      	add	r2, sp, #8
 8006cec:	4669      	mov	r1, sp
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f002 ff8e 	bl	8009c10 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 8006cf4:	4669      	mov	r1, sp
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f001 f91a 	bl	8007f30 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 8006cfc:	a902      	add	r1, sp, #8
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f001 f916 	bl	8007f30 <lv_obj_invalidate_area>
 8006d04:	e6b7      	b.n	8006a76 <lv_obj_event+0x74>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 8006d06:	210e      	movs	r1, #14
 8006d08:	f7ff fe57 	bl	80069ba <lv_obj_clear_state>
 8006d0c:	e6b3      	b.n	8006a76 <lv_obj_event+0x74>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8006d0e:	2209      	movs	r2, #9
 8006d10:	2100      	movs	r1, #0
 8006d12:	f003 fd69 	bl	800a7e8 <lv_obj_get_style_prop>
 8006d16:	4604      	mov	r4, r0
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8006d18:	220a      	movs	r2, #10
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f003 fd63 	bl	800a7e8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8006d22:	b280      	uxth	r0, r0
        if(layout || align) {
 8006d24:	b910      	cbnz	r0, 8006d2c <lv_obj_event+0x32a>
 8006d26:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006d2a:	d002      	beq.n	8006d32 <lv_obj_event+0x330>
            lv_obj_mark_layout_as_dirty(obj);
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 fe2f 	bl	8007990 <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8006d32:	4628      	mov	r0, r5
 8006d34:	f004 fcb3 	bl	800b69e <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 8006d38:	4606      	mov	r6, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	f43f ae9b 	beq.w	8006a76 <lv_obj_event+0x74>
 8006d40:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8006d42:	68ab      	ldr	r3, [r5, #8]
 8006d44:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 8006d46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006d4a:	f000 fe21 	bl	8007990 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8006d4e:	3401      	adds	r4, #1
 8006d50:	42a6      	cmp	r6, r4
 8006d52:	d1f6      	bne.n	8006d42 <lv_obj_event+0x340>
 8006d54:	e68f      	b.n	8006a76 <lv_obj_event+0x74>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8006d56:	2201      	movs	r2, #1
 8006d58:	2100      	movs	r1, #0
 8006d5a:	f003 fd45 	bl	800a7e8 <lv_obj_get_style_prop>
 8006d5e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8006d60:	2204      	movs	r2, #4
 8006d62:	2100      	movs	r1, #0
 8006d64:	4628      	mov	r0, r5
 8006d66:	f003 fd3f 	bl	800a7e8 <lv_obj_get_style_prop>
 8006d6a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8006d6c:	2209      	movs	r2, #9
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4628      	mov	r0, r5
 8006d72:	f003 fd39 	bl	800a7e8 <lv_obj_get_style_prop>
 8006d76:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8006d78:	220a      	movs	r2, #10
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f003 fd33 	bl	800a7e8 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8006d82:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8006d84:	b958      	cbnz	r0, 8006d9e <lv_obj_event+0x39c>
 8006d86:	f016 0fff 	tst.w	r6, #255	; 0xff
 8006d8a:	d108      	bne.n	8006d9e <lv_obj_event+0x39c>
 8006d8c:	b224      	sxth	r4, r4
 8006d8e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8006d92:	429c      	cmp	r4, r3
 8006d94:	d003      	beq.n	8006d9e <lv_obj_event+0x39c>
 8006d96:	b238      	sxth	r0, r7
 8006d98:	4298      	cmp	r0, r3
 8006d9a:	f47f ae6c 	bne.w	8006a76 <lv_obj_event+0x74>
            lv_obj_mark_layout_as_dirty(obj);
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fdf6 	bl	8007990 <lv_obj_mark_layout_as_dirty>
 8006da4:	e667      	b.n	8006a76 <lv_obj_event+0x74>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 8006da6:	2100      	movs	r1, #0
 8006da8:	f000 fc29 	bl	80075fe <lv_obj_calculate_ext_draw_size>
 8006dac:	4601      	mov	r1, r0
        lv_event_set_ext_draw_size(e, d);
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7fd f844 	bl	8003e3c <lv_event_set_ext_draw_size>
 8006db4:	e65f      	b.n	8006a76 <lv_obj_event+0x74>
	...

08006db8 <lv_obj_destructor>:
{
 8006db8:	b510      	push	{r4, lr}
 8006dba:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 8006dbc:	4608      	mov	r0, r1
 8006dbe:	f7fc ffcd 	bl	8003d5c <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f003 fd0a 	bl	800a7dc <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8006dc8:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <lv_obj_destructor+0x64>)
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f004 f801 	bl	800add4 <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	f003 fd02 	bl	800a7dc <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f019 fce6 	bl	80207ac <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 8006de0:	4620      	mov	r0, r4
 8006de2:	f7ff fe0a 	bl	80069fa <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 8006de6:	b110      	cbz	r0, 8006dee <lv_obj_destructor+0x36>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7fd f934 	bl	8004056 <lv_group_remove_obj>
    if(obj->spec_attr) {
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	b19b      	cbz	r3, 8006e1a <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	b120      	cbz	r0, 8006e00 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 8006df6:	f01a fd55 	bl	80218a4 <lv_mem_free>
            obj->spec_attr->children = NULL;
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 8006e00:	68a3      	ldr	r3, [r4, #8]
 8006e02:	68d8      	ldr	r0, [r3, #12]
 8006e04:	b120      	cbz	r0, 8006e10 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 8006e06:	f01a fd4d 	bl	80218a4 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 8006e10:	68a0      	ldr	r0, [r4, #8]
 8006e12:	f01a fd47 	bl	80218a4 <lv_mem_free>
        obj->spec_attr = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60a3      	str	r3, [r4, #8]
}
 8006e1a:	bd10      	pop	{r4, pc}
 8006e1c:	000fffff 	.word	0x000fffff

08006e20 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 8006e20:	6883      	ldr	r3, [r0, #8]
 8006e22:	b103      	cbz	r3, 8006e26 <lv_obj_allocate_spec_attr+0x6>
 8006e24:	4770      	bx	lr
{
 8006e26:	b510      	push	{r4, lr}
 8006e28:	4604      	mov	r4, r0
        x++;
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <lv_obj_allocate_spec_attr+0x3c>)
 8006e2c:	6813      	ldr	r3, [r2, #0]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 8006e32:	201c      	movs	r0, #28
 8006e34:	f01a fd18 	bl	8021868 <lv_mem_alloc>
 8006e38:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 8006e3a:	b168      	cbz	r0, 8006e58 <lv_obj_allocate_spec_attr+0x38>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8006e3c:	211c      	movs	r1, #28
 8006e3e:	f01a ff93 	bl	8021d68 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8006e42:	68a2      	ldr	r2, [r4, #8]
 8006e44:	7e53      	ldrb	r3, [r2, #25]
 8006e46:	f043 030f 	orr.w	r3, r3, #15
 8006e4a:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8006e4c:	68a2      	ldr	r2, [r4, #8]
 8006e4e:	7e13      	ldrb	r3, [r2, #24]
 8006e50:	f043 0303 	orr.w	r3, r3, #3
 8006e54:	7613      	strb	r3, [r2, #24]
}
 8006e56:	bd10      	pop	{r4, pc}
        LV_ASSERT_MALLOC(obj->spec_attr);
 8006e58:	e7fe      	b.n	8006e58 <lv_obj_allocate_spec_attr+0x38>
 8006e5a:	bf00      	nop
 8006e5c:	2000253c 	.word	0x2000253c

08006e60 <lv_obj_check_type>:
    if(obj == NULL) return false;
 8006e60:	b128      	cbz	r0, 8006e6e <lv_obj_check_type+0xe>
    return obj->class_p == class_p ? true : false;
 8006e62:	6800      	ldr	r0, [r0, #0]
 8006e64:	4288      	cmp	r0, r1
 8006e66:	bf14      	ite	ne
 8006e68:	2000      	movne	r0, #0
 8006e6a:	2001      	moveq	r0, #1
 8006e6c:	4770      	bx	lr
    if(obj == NULL) return false;
 8006e6e:	2000      	movs	r0, #0
}
 8006e70:	4770      	bx	lr

08006e72 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8006e72:	b538      	push	{r3, r4, r5, lr}
 8006e74:	4604      	mov	r4, r0
    const lv_obj_class_t * original_class_p = obj->class_p;
 8006e76:	6805      	ldr	r5, [r0, #0]

    if(obj->class_p->base_class) {
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b113      	cbz	r3, 8006e82 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8006e7c:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8006e7e:	f7ff fff8 	bl	8006e72 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 8006e82:	6025      	str	r5, [r4, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8006e84:	686b      	ldr	r3, [r5, #4]
 8006e86:	b113      	cbz	r3, 8006e8e <lv_obj_construct+0x1c>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	4798      	blx	r3
}
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}

08006e90 <lv_obj_class_create_obj>:
{
 8006e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e92:	460d      	mov	r5, r1

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
 8006e94:	4607      	mov	r7, r0

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8006e96:	2400      	movs	r4, #0
    while(base && base->instance_size == 0) base = base->base_class;
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d049      	beq.n	8006f30 <lv_obj_class_create_obj+0xa0>
    const lv_obj_class_t * base = class_p;
 8006e9c:	4603      	mov	r3, r0
    while(base && base->instance_size == 0) base = base->base_class;
 8006e9e:	4a38      	ldr	r2, [pc, #224]	; (8006f80 <lv_obj_class_create_obj+0xf0>)
 8006ea0:	6998      	ldr	r0, [r3, #24]
 8006ea2:	ea12 0400 	ands.w	r4, r2, r0
 8006ea6:	d140      	bne.n	8006f2a <lv_obj_class_create_obj+0x9a>
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f8      	bne.n	8006ea0 <lv_obj_class_create_obj+0x10>
 8006eae:	e03f      	b.n	8006f30 <lv_obj_class_create_obj+0xa0>
        lv_disp_t * disp = lv_disp_get_default();
 8006eb0:	f019 fa7c 	bl	80203ac <lv_disp_get_default>
        if(!disp) {
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	b1e0      	cbz	r0, 8006ef2 <lv_obj_class_create_obj+0x62>
        if(disp->screens == NULL) {
 8006eb8:	68c0      	ldr	r0, [r0, #12]
 8006eba:	b1f8      	cbz	r0, 8006efc <lv_obj_class_create_obj+0x6c>
            disp->screen_cnt++;
 8006ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ebe:	3101      	adds	r1, #1
 8006ec0:	6261      	str	r1, [r4, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8006ec2:	0089      	lsls	r1, r1, #2
 8006ec4:	f01a fd0a 	bl	80218dc <lv_mem_realloc>
 8006ec8:	60e0      	str	r0, [r4, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8006eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
        obj->coords.x1 = 0;
 8006ed6:	2400      	movs	r4, #0
 8006ed8:	82b4      	strh	r4, [r6, #20]
        obj->coords.y1 = 0;
 8006eda:	82f4      	strh	r4, [r6, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8006edc:	4620      	mov	r0, r4
 8006ede:	f019 fa6b 	bl	80203b8 <lv_disp_get_hor_res>
 8006ee2:	1e43      	subs	r3, r0, #1
 8006ee4:	8333      	strh	r3, [r6, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f019 fa7a 	bl	80203e0 <lv_disp_get_ver_res>
 8006eec:	1e43      	subs	r3, r0, #1
 8006eee:	8373      	strh	r3, [r6, #26]
 8006ef0:	e043      	b.n	8006f7a <lv_obj_class_create_obj+0xea>
            lv_mem_free(obj);
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f01a fcd6 	bl	80218a4 <lv_mem_free>
            return NULL;
 8006ef8:	4626      	mov	r6, r4
 8006efa:	e03e      	b.n	8006f7a <lv_obj_class_create_obj+0xea>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8006efc:	2004      	movs	r0, #4
 8006efe:	f01a fcb3 	bl	8021868 <lv_mem_alloc>
 8006f02:	60e0      	str	r0, [r4, #12]
            disp->screens[0] = obj;
 8006f04:	6006      	str	r6, [r0, #0]
            disp->screen_cnt = 1;
 8006f06:	2301      	movs	r3, #1
 8006f08:	6263      	str	r3, [r4, #36]	; 0x24
 8006f0a:	e7e4      	b.n	8006ed6 <lv_obj_class_create_obj+0x46>
            lv_obj_allocate_spec_attr(parent);
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f7ff ff87 	bl	8006e20 <lv_obj_allocate_spec_attr>
 8006f12:	e01c      	b.n	8006f4e <lv_obj_class_create_obj+0xbe>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8006f14:	2004      	movs	r0, #4
 8006f16:	f01a fca7 	bl	8021868 <lv_mem_alloc>
 8006f1a:	6020      	str	r0, [r4, #0]
            parent->spec_attr->children[0] = obj;
 8006f1c:	68ab      	ldr	r3, [r5, #8]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	601e      	str	r6, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8006f22:	68ab      	ldr	r3, [r5, #8]
 8006f24:	2201      	movs	r2, #1
 8006f26:	605a      	str	r2, [r3, #4]
 8006f28:	e027      	b.n	8006f7a <lv_obj_class_create_obj+0xea>

    return base->instance_size;
 8006f2a:	699c      	ldr	r4, [r3, #24]
 8006f2c:	f3c4 140f 	ubfx	r4, r4, #4, #16
    lv_obj_t * obj = lv_mem_alloc(s);
 8006f30:	4620      	mov	r0, r4
 8006f32:	f01a fc99 	bl	8021868 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 8006f36:	4606      	mov	r6, r0
 8006f38:	b1f8      	cbz	r0, 8006f7a <lv_obj_class_create_obj+0xea>
    lv_memset_00(obj, s);
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	f01a ff14 	bl	8021d68 <lv_memset_00>
    obj->class_p = class_p;
 8006f40:	6037      	str	r7, [r6, #0]
    obj->parent = parent;
 8006f42:	6075      	str	r5, [r6, #4]
    if(parent == NULL) {
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	d0b3      	beq.n	8006eb0 <lv_obj_class_create_obj+0x20>
        if(parent->spec_attr == NULL) {
 8006f48:	68ab      	ldr	r3, [r5, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0de      	beq.n	8006f0c <lv_obj_class_create_obj+0x7c>
        if(parent->spec_attr->children == NULL) {
 8006f4e:	68ac      	ldr	r4, [r5, #8]
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0de      	beq.n	8006f14 <lv_obj_class_create_obj+0x84>
            parent->spec_attr->child_cnt++;
 8006f56:	6863      	ldr	r3, [r4, #4]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	6063      	str	r3, [r4, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8006f5c:	68ac      	ldr	r4, [r5, #8]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8006f5e:	6861      	ldr	r1, [r4, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8006f60:	0089      	lsls	r1, r1, #2
 8006f62:	6820      	ldr	r0, [r4, #0]
 8006f64:	f01a fcba 	bl	80218dc <lv_mem_realloc>
 8006f68:	6020      	str	r0, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8006f6a:	68aa      	ldr	r2, [r5, #8]
 8006f6c:	6853      	ldr	r3, [r2, #4]
 8006f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f72:	3b01      	subs	r3, #1
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
}
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	000ffff0 	.word	0x000ffff0

08006f84 <_lv_obj_destruct>:
{
 8006f84:	b510      	push	{r4, lr}
 8006f86:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8006f88:	6800      	ldr	r0, [r0, #0]
 8006f8a:	6883      	ldr	r3, [r0, #8]
 8006f8c:	b10b      	cbz	r3, 8006f92 <_lv_obj_destruct+0xe>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	4798      	blx	r3
    if(obj->class_p->base_class) {
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b11b      	cbz	r3, 8006fa0 <_lv_obj_destruct+0x1c>
        obj->class_p = obj->class_p->base_class;
 8006f98:	6023      	str	r3, [r4, #0]
        _lv_obj_destruct(obj);
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7ff fff2 	bl	8006f84 <_lv_obj_destruct>
}
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <lv_obj_is_editable>:
    const lv_obj_class_t * class_p = obj->class_p;
 8006fa2:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8006fa4:	b143      	cbz	r3, 8006fb8 <lv_obj_is_editable+0x16>
 8006fa6:	7e18      	ldrb	r0, [r3, #24]
 8006fa8:	f010 0003 	ands.w	r0, r0, #3
 8006fac:	d106      	bne.n	8006fbc <lv_obj_is_editable+0x1a>
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1f8      	bne.n	8006fa6 <lv_obj_is_editable+0x4>
    if(class_p == NULL) return false;
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4770      	bx	lr
 8006fb8:	2000      	movs	r0, #0
 8006fba:	4770      	bx	lr
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8006fbc:	2801      	cmp	r0, #1
 8006fbe:	bf14      	ite	ne
 8006fc0:	2000      	movne	r0, #0
 8006fc2:	2001      	moveq	r0, #1
}
 8006fc4:	4770      	bx	lr

08006fc6 <lv_obj_is_group_def>:
    const lv_obj_class_t * class_p = obj->class_p;
 8006fc6:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 8006fc8:	b143      	cbz	r3, 8006fdc <lv_obj_is_group_def+0x16>
 8006fca:	7e18      	ldrb	r0, [r3, #24]
 8006fcc:	f010 000c 	ands.w	r0, r0, #12
 8006fd0:	d106      	bne.n	8006fe0 <lv_obj_is_group_def+0x1a>
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f8      	bne.n	8006fca <lv_obj_is_group_def+0x4>
    if(class_p == NULL) return false;
 8006fd8:	2000      	movs	r0, #0
 8006fda:	4770      	bx	lr
 8006fdc:	2000      	movs	r0, #0
 8006fde:	4770      	bx	lr
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8006fe0:	2804      	cmp	r0, #4
 8006fe2:	bf14      	ite	ne
 8006fe4:	2000      	movne	r0, #0
 8006fe6:	2001      	moveq	r0, #1
}
 8006fe8:	4770      	bx	lr

08006fea <lv_obj_class_init_obj>:
{
 8006fea:	b538      	push	{r3, r4, r5, lr}
 8006fec:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 8006fee:	f000 fccf 	bl	8007990 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f003 fbf2 	bl	800a7dc <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f005 fe71 	bl	800cce0 <lv_theme_apply>
    lv_obj_construct(obj);
 8006ffe:	4620      	mov	r0, r4
 8007000:	f7ff ff37 	bl	8006e72 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 8007004:	2001      	movs	r0, #1
 8007006:	f003 fbe9 	bl	800a7dc <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800700a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800700e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007012:	4620      	mov	r0, r4
 8007014:	f003 fcaa 	bl	800a96c <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fe03 	bl	8007c24 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 800701e:	f7fc ffdb 	bl	8003fd8 <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 8007022:	b120      	cbz	r0, 800702e <lv_obj_class_init_obj+0x44>
 8007024:	4605      	mov	r5, r0
 8007026:	4620      	mov	r0, r4
 8007028:	f7ff ffcd 	bl	8006fc6 <lv_obj_is_group_def>
 800702c:	b988      	cbnz	r0, 8007052 <lv_obj_class_init_obj+0x68>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800702e:	4620      	mov	r0, r4
 8007030:	f004 fb1c 	bl	800b66c <lv_obj_get_parent>
    if(parent) {
 8007034:	4605      	mov	r5, r0
 8007036:	b158      	cbz	r0, 8007050 <lv_obj_class_init_obj+0x66>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8007038:	4622      	mov	r2, r4
 800703a:	2122      	movs	r1, #34	; 0x22
 800703c:	f7fc fe60 	bl	8003d00 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 8007040:	4622      	mov	r2, r4
 8007042:	2123      	movs	r1, #35	; 0x23
 8007044:	4628      	mov	r0, r5
 8007046:	f7fc fe5b 	bl	8003d00 <lv_event_send>
        lv_obj_invalidate(obj);
 800704a:	4620      	mov	r0, r4
 800704c:	f000 ff94 	bl	8007f78 <lv_obj_invalidate>
}
 8007050:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_add_obj(def_group, obj);
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	f7fd f850 	bl	80040fa <lv_group_add_obj>
 800705a:	e7e8      	b.n	800702e <lv_obj_class_init_obj+0x44>

0800705c <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	4605      	mov	r5, r0
 8007060:	4614      	mov	r4, r2
    lv_opa_t opa = LV_OPA_COVER;
    if(part != LV_PART_MAIN) {
 8007062:	460e      	mov	r6, r1
 8007064:	2900      	cmp	r1, #0
 8007066:	d13e      	bne.n	80070e6 <lv_obj_init_draw_rect_dsc+0x8a>
    lv_opa_t opa = LV_OPA_COVER;
 8007068:	27ff      	movs	r7, #255	; 0xff
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 800706a:	220b      	movs	r2, #11
 800706c:	4631      	mov	r1, r6
 800706e:	4628      	mov	r0, r5
 8007070:	f003 fbba 	bl	800a7e8 <lv_obj_get_style_prop>
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8007074:	8020      	strh	r0, [r4, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8007076:	78e3      	ldrb	r3, [r4, #3]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d14b      	bne.n	8007114 <lv_obj_init_draw_rect_dsc+0xb8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800707c:	2232      	movs	r2, #50	; 0x32
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	f003 fbb1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007086:	b200      	sxth	r0, r0
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8007088:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 800708a:	b120      	cbz	r0, 8007096 <lv_obj_init_draw_rect_dsc+0x3a>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 800708c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007090:	2b00      	cmp	r3, #0
 8007092:	f040 809c 	bne.w	80071ce <lv_obj_init_draw_rect_dsc+0x172>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8007096:	2235      	movs	r2, #53	; 0x35
 8007098:	4631      	mov	r1, r6
 800709a:	4628      	mov	r0, r5
 800709c:	f003 fba4 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80070a0:	b200      	sxth	r0, r0
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 80070a2:	84e0      	strh	r0, [r4, #38]	; 0x26
    if(draw_dsc->outline_width) {
 80070a4:	b120      	cbz	r0, 80070b0 <lv_obj_init_draw_rect_dsc+0x54>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 80070a6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 80b1 	bne.w	8007212 <lv_obj_init_draw_rect_dsc+0x1b6>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 80070b0:	7ea3      	ldrb	r3, [r4, #26]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f040 80ca 	bne.w	800724c <lv_obj_init_draw_rect_dsc+0x1f0>
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 80070b8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f040 810a 	bne.w	80072d6 <lv_obj_init_draw_rect_dsc+0x27a>
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 80070c2:	b17e      	cbz	r6, 80070e4 <lv_obj_init_draw_rect_dsc+0x88>
        if(opa < LV_OPA_MAX) {
 80070c4:	2ffc      	cmp	r7, #252	; 0xfc
 80070c6:	d80d      	bhi.n	80070e4 <lv_obj_init_draw_rect_dsc+0x88>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80070c8:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 80070cc:	fb00 f707 	mul.w	r7, r0, r7
 80070d0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80070d4:	70e7      	strb	r7, [r4, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80070d6:	76a7      	strb	r7, [r4, #26]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80070d8:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80070dc:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80070e0:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
        }
    }
}
 80070e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80070e6:	2260      	movs	r2, #96	; 0x60
 80070e8:	f003 fb7e 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80070ec:	b2c7      	uxtb	r7, r0
        if(opa <= LV_OPA_MIN) {
 80070ee:	2f02      	cmp	r7, #2
 80070f0:	d906      	bls.n	8007100 <lv_obj_init_draw_rect_dsc+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80070f2:	2267      	movs	r2, #103	; 0x67
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	f003 fb76 	bl	800a7e8 <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80070fc:	70a0      	strb	r0, [r4, #2]
 80070fe:	e7b4      	b.n	800706a <lv_obj_init_draw_rect_dsc+0xe>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8007100:	2300      	movs	r3, #0
 8007102:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8007104:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8007106:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 800710a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 800710e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
            return;
 8007112:	e7e7      	b.n	80070e4 <lv_obj_init_draw_rect_dsc+0x88>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8007114:	2221      	movs	r2, #33	; 0x21
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	f003 fb65 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800711e:	b2c0      	uxtb	r0, r0
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8007120:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8007122:	2802      	cmp	r0, #2
 8007124:	d9aa      	bls.n	800707c <lv_obj_init_draw_rect_dsc+0x20>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8007126:	2220      	movs	r2, #32
 8007128:	4631      	mov	r1, r6
 800712a:	4628      	mov	r0, r5
 800712c:	f003 fb5c 	bl	800a7e8 <lv_obj_get_style_prop>
 8007130:	4602      	mov	r2, r0
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	f004 f87d 	bl	800b234 <_lv_obj_style_apply_color_filter>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 800713a:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 800713c:	2226      	movs	r2, #38	; 0x26
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	f003 fb51 	bl	800a7e8 <lv_obj_get_style_prop>
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8007146:	4601      	mov	r1, r0
 8007148:	b118      	cbz	r0, 8007152 <lv_obj_init_draw_rect_dsc+0xf6>
 800714a:	7a43      	ldrb	r3, [r0, #9]
 800714c:	f013 0f07 	tst.w	r3, #7
 8007150:	d115      	bne.n	800717e <lv_obj_init_draw_rect_dsc+0x122>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8007152:	2223      	movs	r2, #35	; 0x23
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	f003 fb46 	bl	800a7e8 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 800715c:	7be3      	ldrb	r3, [r4, #15]
 800715e:	f360 0302 	bfi	r3, r0, #0, #3
 8007162:	73e3      	strb	r3, [r4, #15]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8007164:	f013 0f07 	tst.w	r3, #7
 8007168:	d10e      	bne.n	8007188 <lv_obj_init_draw_rect_dsc+0x12c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 800716a:	2227      	movs	r2, #39	; 0x27
 800716c:	4631      	mov	r1, r6
 800716e:	4628      	mov	r0, r5
 8007170:	f003 fb3a 	bl	800a7e8 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8007174:	7be3      	ldrb	r3, [r4, #15]
 8007176:	f360 03c5 	bfi	r3, r0, #3, #3
 800717a:	73e3      	strb	r3, [r4, #15]
 800717c:	e77e      	b.n	800707c <lv_obj_init_draw_rect_dsc+0x20>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 800717e:	220a      	movs	r2, #10
 8007180:	1da0      	adds	r0, r4, #6
 8007182:	f01a fc5b 	bl	8021a3c <lv_memcpy>
 8007186:	e779      	b.n	800707c <lv_obj_init_draw_rect_dsc+0x20>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8007188:	2220      	movs	r2, #32
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	f003 fb2b 	bl	800a7e8 <lv_obj_get_style_prop>
 8007192:	4602      	mov	r2, r0
 8007194:	4631      	mov	r1, r6
 8007196:	4628      	mov	r0, r5
 8007198:	f004 f84c 	bl	800b234 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 800719c:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 800719e:	2222      	movs	r2, #34	; 0x22
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	f003 fb20 	bl	800a7e8 <lv_obj_get_style_prop>
 80071a8:	4602      	mov	r2, r0
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	f004 f841 	bl	800b234 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 80071b2:	8160      	strh	r0, [r4, #10]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 80071b4:	2224      	movs	r2, #36	; 0x24
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	f003 fb15 	bl	800a7e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 80071be:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 80071c0:	2225      	movs	r2, #37	; 0x25
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	f003 fb0f 	bl	800a7e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 80071ca:	7320      	strb	r0, [r4, #12]
 80071cc:	e7cd      	b.n	800716a <lv_obj_init_draw_rect_dsc+0x10e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 80071ce:	2231      	movs	r2, #49	; 0x31
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	f003 fb08 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80071d8:	b2c0      	uxtb	r0, r0
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 80071da:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80071de:	2802      	cmp	r0, #2
 80071e0:	f67f af59 	bls.w	8007096 <lv_obj_init_draw_rect_dsc+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80071e4:	2233      	movs	r2, #51	; 0x33
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	f003 fafd 	bl	800a7e8 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80071ee:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80071f2:	f360 0345 	bfi	r3, r0, #1, #5
 80071f6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80071fa:	2230      	movs	r2, #48	; 0x30
 80071fc:	4631      	mov	r1, r6
 80071fe:	4628      	mov	r0, r5
 8007200:	f003 faf2 	bl	800a7e8 <lv_obj_get_style_prop>
 8007204:	4602      	mov	r2, r0
 8007206:	4631      	mov	r1, r6
 8007208:	4628      	mov	r0, r5
 800720a:	f004 f813 	bl	800b234 <_lv_obj_style_apply_color_filter>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 800720e:	83e0      	strh	r0, [r4, #30]
 8007210:	e741      	b.n	8007096 <lv_obj_init_draw_rect_dsc+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8007212:	2237      	movs	r2, #55	; 0x37
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	f003 fae6 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800721c:	b2c0      	uxtb	r0, r0
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 800721e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8007222:	2802      	cmp	r0, #2
 8007224:	f67f af44 	bls.w	80070b0 <lv_obj_init_draw_rect_dsc+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8007228:	2238      	movs	r2, #56	; 0x38
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	f003 fadb 	bl	800a7e8 <lv_obj_get_style_prop>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8007232:	8520      	strh	r0, [r4, #40]	; 0x28
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 8007234:	2236      	movs	r2, #54	; 0x36
 8007236:	4631      	mov	r1, r6
 8007238:	4628      	mov	r0, r5
 800723a:	f003 fad5 	bl	800a7e8 <lv_obj_get_style_prop>
 800723e:	4602      	mov	r2, r0
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	f003 fff6 	bl	800b234 <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8007248:	84a0      	strh	r0, [r4, #36]	; 0x24
 800724a:	e731      	b.n	80070b0 <lv_obj_init_draw_rect_dsc+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 800724c:	2228      	movs	r2, #40	; 0x28
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	f003 fac9 	bl	800a7e8 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8007256:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 8007258:	2800      	cmp	r0, #0
 800725a:	f43f af2d 	beq.w	80070b8 <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 800725e:	2229      	movs	r2, #41	; 0x29
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	f003 fac0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007268:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 800726a:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 800726c:	2802      	cmp	r0, #2
 800726e:	f67f af23 	bls.w	80070b8 <lv_obj_init_draw_rect_dsc+0x5c>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8007272:	6920      	ldr	r0, [r4, #16]
 8007274:	f006 f83f 	bl	800d2f6 <lv_img_src_get_type>
 8007278:	2802      	cmp	r0, #2
 800727a:	d01a      	beq.n	80072b2 <lv_obj_init_draw_rect_dsc+0x256>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 800727c:	222a      	movs	r2, #42	; 0x2a
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	f003 fab1 	bl	800a7e8 <lv_obj_get_style_prop>
 8007286:	4602      	mov	r2, r0
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	f003 ffd2 	bl	800b234 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8007290:	8320      	strh	r0, [r4, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8007292:	222b      	movs	r2, #43	; 0x2b
 8007294:	4631      	mov	r1, r6
 8007296:	4628      	mov	r0, r5
 8007298:	f003 faa6 	bl	800a7e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 800729c:	76e0      	strb	r0, [r4, #27]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 800729e:	222c      	movs	r2, #44	; 0x2c
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	f003 faa0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (bool)v.num;
 80072a8:	3800      	subs	r0, #0
 80072aa:	bf18      	it	ne
 80072ac:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 80072ae:	7720      	strb	r0, [r4, #28]
 80072b0:	e702      	b.n	80070b8 <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80072b2:	2257      	movs	r2, #87	; 0x57
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	f003 fa96 	bl	800a7e8 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 80072bc:	6160      	str	r0, [r4, #20]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 80072be:	2255      	movs	r2, #85	; 0x55
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	f003 fa90 	bl	800a7e8 <lv_obj_get_style_prop>
 80072c8:	4602      	mov	r2, r0
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	f003 ffb1 	bl	800b234 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 80072d2:	8320      	strh	r0, [r4, #24]
 80072d4:	e6f0      	b.n	80070b8 <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80072d6:	2240      	movs	r2, #64	; 0x40
 80072d8:	4631      	mov	r1, r6
 80072da:	4628      	mov	r0, r5
 80072dc:	f003 fa84 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80072e0:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 80072e2:	85e0      	strh	r0, [r4, #46]	; 0x2e
        if(draw_dsc->shadow_width) {
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f43f aeec 	beq.w	80070c2 <lv_obj_init_draw_rect_dsc+0x66>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80072ea:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	f67f aee7 	bls.w	80070c2 <lv_obj_init_draw_rect_dsc+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80072f4:	2245      	movs	r2, #69	; 0x45
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	f003 fa75 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80072fe:	b2c0      	uxtb	r0, r0
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8007300:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8007304:	2802      	cmp	r0, #2
 8007306:	f67f aedc 	bls.w	80070c2 <lv_obj_init_draw_rect_dsc+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 800730a:	2241      	movs	r2, #65	; 0x41
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	f003 fa6a 	bl	800a7e8 <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8007314:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8007316:	2242      	movs	r2, #66	; 0x42
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	f003 fa64 	bl	800a7e8 <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8007320:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8007322:	2243      	movs	r2, #67	; 0x43
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	f003 fa5e 	bl	800a7e8 <lv_obj_get_style_prop>
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 800732c:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 800732e:	2244      	movs	r2, #68	; 0x44
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	f003 fa58 	bl	800a7e8 <lv_obj_get_style_prop>
 8007338:	4602      	mov	r2, r0
 800733a:	4631      	mov	r1, r6
 800733c:	4628      	mov	r0, r5
 800733e:	f003 ff79 	bl	800b234 <_lv_obj_style_apply_color_filter>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8007342:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8007344:	e6bd      	b.n	80070c2 <lv_obj_init_draw_rect_dsc+0x66>

08007346 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007346:	b570      	push	{r4, r5, r6, lr}
 8007348:	4606      	mov	r6, r0
 800734a:	460c      	mov	r4, r1
 800734c:	4615      	mov	r5, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 800734e:	2256      	movs	r2, #86	; 0x56
 8007350:	f003 fa4a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007354:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007356:	76ab      	strb	r3, [r5, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007358:	2b02      	cmp	r3, #2
 800735a:	d93d      	bls.n	80073d8 <lv_obj_init_draw_label_dsc+0x92>

    if(part != LV_PART_MAIN) {
 800735c:	b17c      	cbz	r4, 800737e <lv_obj_init_draw_label_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800735e:	2260      	movs	r2, #96	; 0x60
 8007360:	4621      	mov	r1, r4
 8007362:	4630      	mov	r0, r6
 8007364:	f003 fa40 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007368:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 800736a:	2b02      	cmp	r3, #2
 800736c:	d935      	bls.n	80073da <lv_obj_init_draw_label_dsc+0x94>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 800736e:	2bfc      	cmp	r3, #252	; 0xfc
 8007370:	d805      	bhi.n	800737e <lv_obj_init_draw_label_dsc+0x38>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007372:	7eab      	ldrb	r3, [r5, #26]
 8007374:	b2c0      	uxtb	r0, r0
 8007376:	fb03 f000 	mul.w	r0, r3, r0
 800737a:	1200      	asrs	r0, r0, #8
 800737c:	76a8      	strb	r0, [r5, #26]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 800737e:	2255      	movs	r2, #85	; 0x55
 8007380:	4621      	mov	r1, r4
 8007382:	4630      	mov	r0, r6
 8007384:	f003 fa30 	bl	800a7e8 <lv_obj_get_style_prop>
 8007388:	4602      	mov	r2, r0
 800738a:	4621      	mov	r1, r4
 800738c:	4630      	mov	r0, r6
 800738e:	f003 ff51 	bl	800b234 <_lv_obj_style_apply_color_filter>
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8007392:	81a8      	strh	r0, [r5, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8007394:	2258      	movs	r2, #88	; 0x58
 8007396:	4621      	mov	r1, r4
 8007398:	4630      	mov	r0, r6
 800739a:	f003 fa25 	bl	800a7e8 <lv_obj_get_style_prop>
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 800739e:	82a8      	strh	r0, [r5, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80073a0:	2259      	movs	r2, #89	; 0x59
 80073a2:	4621      	mov	r1, r4
 80073a4:	4630      	mov	r0, r6
 80073a6:	f003 fa1f 	bl	800a7e8 <lv_obj_get_style_prop>
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 80073aa:	8268      	strh	r0, [r5, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 80073ac:	225a      	movs	r2, #90	; 0x5a
 80073ae:	4621      	mov	r1, r4
 80073b0:	4630      	mov	r0, r6
 80073b2:	f003 fa19 	bl	800a7e8 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 80073b6:	7fab      	ldrb	r3, [r5, #30]
 80073b8:	f360 0302 	bfi	r3, r0, #0, #3
 80073bc:	77ab      	strb	r3, [r5, #30]
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80073be:	b97c      	cbnz	r4, 80073e0 <lv_obj_init_draw_label_dsc+0x9a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80073c0:	2257      	movs	r2, #87	; 0x57
 80073c2:	4621      	mov	r1, r4
 80073c4:	4630      	mov	r0, r6
 80073c6:	f003 fa0f 	bl	800a7e8 <lv_obj_get_style_prop>
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 80073ca:	6028      	str	r0, [r5, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 80073cc:	225b      	movs	r2, #91	; 0x5b
 80073ce:	4621      	mov	r1, r4
 80073d0:	4630      	mov	r0, r6
 80073d2:	f003 fa09 	bl	800a7e8 <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 80073d6:	7728      	strb	r0, [r5, #28]
}
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = LV_OPA_TRANSP;
 80073da:	2300      	movs	r3, #0
 80073dc:	76ab      	strb	r3, [r5, #26]
            return;
 80073de:	e7fb      	b.n	80073d8 <lv_obj_init_draw_label_dsc+0x92>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80073e0:	2267      	movs	r2, #103	; 0x67
 80073e2:	4621      	mov	r1, r4
 80073e4:	4630      	mov	r0, r6
 80073e6:	f003 f9ff 	bl	800a7e8 <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80073ea:	7fab      	ldrb	r3, [r5, #30]
 80073ec:	f360 03c5 	bfi	r3, r0, #3, #3
 80073f0:	77ab      	strb	r3, [r5, #30]
 80073f2:	e7e5      	b.n	80073c0 <lv_obj_init_draw_label_dsc+0x7a>

080073f4 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	460e      	mov	r6, r1
 80073fa:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 80073fc:	2246      	movs	r2, #70	; 0x46
 80073fe:	f003 f9f3 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007402:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 8007404:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007406:	2802      	cmp	r0, #2
 8007408:	d932      	bls.n	8007470 <lv_obj_init_draw_img_dsc+0x7c>

    if(part != LV_PART_MAIN) {
 800740a:	b17e      	cbz	r6, 800742c <lv_obj_init_draw_img_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800740c:	2260      	movs	r2, #96	; 0x60
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	f003 f9e9 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007416:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 8007418:	2b02      	cmp	r3, #2
 800741a:	d92a      	bls.n	8007472 <lv_obj_init_draw_img_dsc+0x7e>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 800741c:	2bfc      	cmp	r3, #252	; 0xfc
 800741e:	d805      	bhi.n	800742c <lv_obj_init_draw_img_dsc+0x38>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007420:	7ae3      	ldrb	r3, [r4, #11]
 8007422:	b2c0      	uxtb	r0, r0
 8007424:	fb03 f000 	mul.w	r0, r3, r0
 8007428:	1200      	asrs	r0, r0, #8
 800742a:	72e0      	strb	r0, [r4, #11]
        }
    }

    draw_dsc->angle = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	8023      	strh	r3, [r4, #0]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8007430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007434:	8063      	strh	r3, [r4, #2]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007436:	8b2b      	ldrh	r3, [r5, #24]
 8007438:	3301      	adds	r3, #1
 800743a:	8aaa      	ldrh	r2, [r5, #20]
 800743c:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 800743e:	b21a      	sxth	r2, r3
 8007440:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8007444:	4413      	add	r3, r2
 8007446:	105b      	asrs	r3, r3, #1
 8007448:	80a3      	strh	r3, [r4, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800744a:	8b6b      	ldrh	r3, [r5, #26]
 800744c:	3301      	adds	r3, #1
 800744e:	8aea      	ldrh	r2, [r5, #22]
 8007450:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8007452:	b21a      	sxth	r2, r3
 8007454:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8007458:	4413      	add	r3, r2
 800745a:	105b      	asrs	r3, r3, #1
 800745c:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 800745e:	2248      	movs	r2, #72	; 0x48
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	f003 f9c0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007468:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 800746a:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 800746c:	b920      	cbnz	r0, 8007478 <lv_obj_init_draw_img_dsc+0x84>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800746e:	b97e      	cbnz	r6, 8007490 <lv_obj_init_draw_img_dsc+0x9c>
#endif
}
 8007470:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = LV_OPA_TRANSP;
 8007472:	2300      	movs	r3, #0
 8007474:	72e3      	strb	r3, [r4, #11]
            return;
 8007476:	e7fb      	b.n	8007470 <lv_obj_init_draw_img_dsc+0x7c>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 8007478:	2247      	movs	r2, #71	; 0x47
 800747a:	4631      	mov	r1, r6
 800747c:	4628      	mov	r0, r5
 800747e:	f003 f9b3 	bl	800a7e8 <lv_obj_get_style_prop>
 8007482:	4602      	mov	r2, r0
 8007484:	4631      	mov	r1, r6
 8007486:	4628      	mov	r0, r5
 8007488:	f003 fed4 	bl	800b234 <_lv_obj_style_apply_color_filter>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 800748c:	8120      	strh	r0, [r4, #8]
 800748e:	e7ee      	b.n	800746e <lv_obj_init_draw_img_dsc+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007490:	2267      	movs	r2, #103	; 0x67
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	f003 f9a7 	bl	800a7e8 <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 800749a:	7b23      	ldrb	r3, [r4, #12]
 800749c:	f360 0303 	bfi	r3, r0, #0, #4
 80074a0:	7323      	strb	r3, [r4, #12]
 80074a2:	e7e5      	b.n	8007470 <lv_obj_init_draw_img_dsc+0x7c>

080074a4 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	4606      	mov	r6, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 80074ac:	224e      	movs	r2, #78	; 0x4e
 80074ae:	f003 f99b 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80074b2:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 80074b4:	7223      	strb	r3, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d918      	bls.n	80074ec <lv_obj_init_draw_line_dsc+0x48>

    if(part != LV_PART_MAIN) {
 80074ba:	b17d      	cbz	r5, 80074dc <lv_obj_init_draw_line_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80074bc:	2260      	movs	r2, #96	; 0x60
 80074be:	4629      	mov	r1, r5
 80074c0:	4630      	mov	r0, r6
 80074c2:	f003 f991 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80074c6:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d910      	bls.n	80074ee <lv_obj_init_draw_line_dsc+0x4a>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 80074cc:	2bfc      	cmp	r3, #252	; 0xfc
 80074ce:	d805      	bhi.n	80074dc <lv_obj_init_draw_line_dsc+0x38>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 80074d0:	7a23      	ldrb	r3, [r4, #8]
 80074d2:	b2c0      	uxtb	r0, r0
 80074d4:	fb03 f000 	mul.w	r0, r3, r0
 80074d8:	1200      	asrs	r0, r0, #8
 80074da:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80074dc:	2249      	movs	r2, #73	; 0x49
 80074de:	4629      	mov	r1, r5
 80074e0:	4630      	mov	r0, r6
 80074e2:	f003 f981 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80074e6:	b200      	sxth	r0, r0
        }
    }

    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 80074e8:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 80074ea:	b918      	cbnz	r0, 80074f4 <lv_obj_init_draw_line_dsc+0x50>
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 80074ec:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = LV_OPA_TRANSP;
 80074ee:	2300      	movs	r3, #0
 80074f0:	7223      	strb	r3, [r4, #8]
            return;
 80074f2:	e7fb      	b.n	80074ec <lv_obj_init_draw_line_dsc+0x48>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR));
 80074f4:	224d      	movs	r2, #77	; 0x4d
 80074f6:	4629      	mov	r1, r5
 80074f8:	4630      	mov	r0, r6
 80074fa:	f003 f975 	bl	800a7e8 <lv_obj_get_style_prop>
 80074fe:	4602      	mov	r2, r0
 8007500:	4629      	mov	r1, r5
 8007502:	4630      	mov	r0, r6
 8007504:	f003 fe96 	bl	800b234 <_lv_obj_style_apply_color_filter>
    draw_dsc->color = lv_obj_get_style_line_color_filtered(obj, part);
 8007508:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 800750a:	224a      	movs	r2, #74	; 0x4a
 800750c:	4629      	mov	r1, r5
 800750e:	4630      	mov	r0, r6
 8007510:	f003 f96a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007514:	b200      	sxth	r0, r0
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8007516:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 8007518:	b9c8      	cbnz	r0, 800754e <lv_obj_init_draw_line_dsc+0xaa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 800751a:	224c      	movs	r2, #76	; 0x4c
 800751c:	4629      	mov	r1, r5
 800751e:	4630      	mov	r0, r6
 8007520:	f003 f962 	bl	800a7e8 <lv_obj_get_style_prop>
    return (bool)v.num;
 8007524:	3800      	subs	r0, #0
 8007526:	bf18      	it	ne
 8007528:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 800752a:	7a63      	ldrb	r3, [r4, #9]
 800752c:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 8007530:	f360 03c3 	bfi	r3, r0, #3, #1
 8007534:	7263      	strb	r3, [r4, #9]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007536:	2d00      	cmp	r5, #0
 8007538:	d0d8      	beq.n	80074ec <lv_obj_init_draw_line_dsc+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800753a:	2267      	movs	r2, #103	; 0x67
 800753c:	4629      	mov	r1, r5
 800753e:	4630      	mov	r0, r6
 8007540:	f003 f952 	bl	800a7e8 <lv_obj_get_style_prop>
 8007544:	7a63      	ldrb	r3, [r4, #9]
 8007546:	f360 0301 	bfi	r3, r0, #0, #2
 800754a:	7263      	strb	r3, [r4, #9]
 800754c:	e7ce      	b.n	80074ec <lv_obj_init_draw_line_dsc+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 800754e:	224b      	movs	r2, #75	; 0x4b
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f003 f948 	bl	800a7e8 <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8007558:	80e0      	strh	r0, [r4, #6]
 800755a:	e7de      	b.n	800751a <lv_obj_init_draw_line_dsc+0x76>

0800755c <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4606      	mov	r6, r0
 8007560:	460d      	mov	r5, r1
 8007562:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8007564:	2250      	movs	r2, #80	; 0x50
 8007566:	f003 f93f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800756a:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 800756c:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 800756e:	b900      	cbnz	r0, 8007572 <lv_obj_init_draw_arc_dsc+0x16>
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8007570:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 8007572:	2253      	movs	r2, #83	; 0x53
 8007574:	4629      	mov	r1, r5
 8007576:	4630      	mov	r0, r6
 8007578:	f003 f936 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800757c:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 800757e:	7323      	strb	r3, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007580:	2b02      	cmp	r3, #2
 8007582:	d9f5      	bls.n	8007570 <lv_obj_init_draw_arc_dsc+0x14>
    if(part != LV_PART_MAIN) {
 8007584:	b17d      	cbz	r5, 80075a6 <lv_obj_init_draw_arc_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007586:	2260      	movs	r2, #96	; 0x60
 8007588:	4629      	mov	r1, r5
 800758a:	4630      	mov	r0, r6
 800758c:	f003 f92c 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007590:	b2c3      	uxtb	r3, r0
        if(opa <= LV_OPA_MIN) {
 8007592:	2b02      	cmp	r3, #2
 8007594:	d930      	bls.n	80075f8 <lv_obj_init_draw_arc_dsc+0x9c>
        if(opa < LV_OPA_MAX) {
 8007596:	2bfc      	cmp	r3, #252	; 0xfc
 8007598:	d805      	bhi.n	80075a6 <lv_obj_init_draw_arc_dsc+0x4a>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 800759a:	7b23      	ldrb	r3, [r4, #12]
 800759c:	b2c0      	uxtb	r0, r0
 800759e:	fb03 f000 	mul.w	r0, r3, r0
 80075a2:	1200      	asrs	r0, r0, #8
 80075a4:	7320      	strb	r0, [r4, #12]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR));
 80075a6:	2252      	movs	r2, #82	; 0x52
 80075a8:	4629      	mov	r1, r5
 80075aa:	4630      	mov	r0, r6
 80075ac:	f003 f91c 	bl	800a7e8 <lv_obj_get_style_prop>
 80075b0:	4602      	mov	r2, r0
 80075b2:	4629      	mov	r1, r5
 80075b4:	4630      	mov	r0, r6
 80075b6:	f003 fe3d 	bl	800b234 <_lv_obj_style_apply_color_filter>
    draw_dsc->color = lv_obj_get_style_arc_color_filtered(obj, part);
 80075ba:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 80075bc:	2254      	movs	r2, #84	; 0x54
 80075be:	4629      	mov	r1, r5
 80075c0:	4630      	mov	r0, r6
 80075c2:	f003 f911 	bl	800a7e8 <lv_obj_get_style_prop>
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 80075c6:	60a0      	str	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 80075c8:	2251      	movs	r2, #81	; 0x51
 80075ca:	4629      	mov	r1, r5
 80075cc:	4630      	mov	r0, r6
 80075ce:	f003 f90b 	bl	800a7e8 <lv_obj_get_style_prop>
    return (bool)v.num;
 80075d2:	3800      	subs	r0, #0
 80075d4:	bf18      	it	ne
 80075d6:	2001      	movne	r0, #1
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 80075d8:	7b63      	ldrb	r3, [r4, #13]
 80075da:	f360 0382 	bfi	r3, r0, #2, #1
 80075de:	7363      	strb	r3, [r4, #13]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80075e0:	2d00      	cmp	r5, #0
 80075e2:	d0c5      	beq.n	8007570 <lv_obj_init_draw_arc_dsc+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80075e4:	2267      	movs	r2, #103	; 0x67
 80075e6:	4629      	mov	r1, r5
 80075e8:	4630      	mov	r0, r6
 80075ea:	f003 f8fd 	bl	800a7e8 <lv_obj_get_style_prop>
 80075ee:	7b63      	ldrb	r3, [r4, #13]
 80075f0:	f360 0301 	bfi	r3, r0, #0, #2
 80075f4:	7363      	strb	r3, [r4, #13]
 80075f6:	e7bb      	b.n	8007570 <lv_obj_init_draw_arc_dsc+0x14>
            draw_dsc->opa = LV_OPA_TRANSP;
 80075f8:	2300      	movs	r3, #0
 80075fa:	7323      	strb	r3, [r4, #12]
            return;
 80075fc:	e7b8      	b.n	8007570 <lv_obj_init_draw_arc_dsc+0x14>

080075fe <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 80075fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007600:	4605      	mov	r5, r0
 8007602:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8007604:	2240      	movs	r2, #64	; 0x40
 8007606:	f003 f8ef 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800760a:	b204      	sxth	r4, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 800760c:	b9e4      	cbnz	r4, 8007648 <lv_obj_calculate_ext_draw_size+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800760e:	2235      	movs	r2, #53	; 0x35
 8007610:	4631      	mov	r1, r6
 8007612:	4628      	mov	r0, r5
 8007614:	f003 f8e8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007618:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 800761a:	2f00      	cmp	r7, #0
 800761c:	d145      	bne.n	80076aa <lv_obj_calculate_ext_draw_size+0xac>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800761e:	2268      	movs	r2, #104	; 0x68
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	f003 f8e0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007628:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 800762a:	2269      	movs	r2, #105	; 0x69
 800762c:	4631      	mov	r1, r6
 800762e:	4628      	mov	r0, r5
 8007630:	f003 f8da 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007634:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 8007636:	42b8      	cmp	r0, r7
 8007638:	bfb8      	it	lt
 800763a:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 800763c:	2800      	cmp	r0, #0
 800763e:	bfc4      	itt	gt
 8007640:	1900      	addgt	r0, r0, r4
 8007642:	b204      	sxthgt	r4, r0

    return s;
}
 8007644:	4620      	mov	r0, r4
 8007646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8007648:	2245      	movs	r2, #69	; 0x45
 800764a:	4631      	mov	r1, r6
 800764c:	4628      	mov	r0, r5
 800764e:	f003 f8cb 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007652:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 8007654:	2802      	cmp	r0, #2
 8007656:	d801      	bhi.n	800765c <lv_obj_calculate_ext_draw_size+0x5e>
    lv_coord_t s = 0;
 8007658:	2400      	movs	r4, #0
 800765a:	e7d8      	b.n	800760e <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 800765c:	2243      	movs	r2, #67	; 0x43
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	f003 f8c1 	bl	800a7e8 <lv_obj_get_style_prop>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8007666:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	eb03 0464 	add.w	r4, r3, r4, asr #1
 8007670:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8007672:	2241      	movs	r2, #65	; 0x41
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	f003 f8b6 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800767c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 800767e:	2242      	movs	r2, #66	; 0x42
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	f003 f8b0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007688:	b203      	sxth	r3, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 800768a:	2b00      	cmp	r3, #0
 800768c:	bfb8      	it	lt
 800768e:	425b      	neglt	r3, r3
 8007690:	2f00      	cmp	r7, #0
 8007692:	bfb8      	it	lt
 8007694:	427f      	neglt	r7, r7
 8007696:	b29b      	uxth	r3, r3
 8007698:	b2bf      	uxth	r7, r7
 800769a:	42bb      	cmp	r3, r7
 800769c:	bf2c      	ite	cs
 800769e:	18e4      	addcs	r4, r4, r3
 80076a0:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 80076a2:	b220      	sxth	r0, r4
 80076a4:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 80076a8:	e7b1      	b.n	800760e <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80076aa:	2237      	movs	r2, #55	; 0x37
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	f003 f89a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80076b4:	b2c0      	uxtb	r0, r0
        if(outline_opa > LV_OPA_MIN) {
 80076b6:	2802      	cmp	r0, #2
 80076b8:	d9b1      	bls.n	800761e <lv_obj_calculate_ext_draw_size+0x20>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80076ba:	2238      	movs	r2, #56	; 0x38
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	f003 f892 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80076c4:	b200      	sxth	r0, r0
            s = LV_MAX(s, outline_pad + outline_width);
 80076c6:	4438      	add	r0, r7
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	bfb8      	it	lt
 80076cc:	4620      	movlt	r0, r4
 80076ce:	b204      	sxth	r4, r0
 80076d0:	e7a5      	b.n	800761e <lv_obj_calculate_ext_draw_size+0x20>

080076d2 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 80076d2:	b538      	push	{r3, r4, r5, lr}
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 80076d8:	2148      	movs	r1, #72	; 0x48
 80076da:	f01a fb45 	bl	8021d68 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 80076de:	6025      	str	r5, [r4, #0]
}
 80076e0:	bd38      	pop	{r3, r4, r5, pc}

080076e2 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 80076e2:	6883      	ldr	r3, [r0, #8]
 80076e4:	b113      	cbz	r3, 80076ec <_lv_obj_get_ext_draw_size+0xa>
 80076e6:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80076ea:	4770      	bx	lr
    else return 0;
 80076ec:	2000      	movs	r0, #0
}
 80076ee:	4770      	bx	lr

080076f0 <lv_obj_refresh_ext_draw_size>:
{
 80076f0:	b530      	push	{r4, r5, lr}
 80076f2:	b083      	sub	sp, #12
 80076f4:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 80076f6:	f7ff fff4 	bl	80076e2 <_lv_obj_get_ext_draw_size>
 80076fa:	4605      	mov	r5, r0
    lv_coord_t s_new = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8007702:	f10d 0206 	add.w	r2, sp, #6
 8007706:	2113      	movs	r1, #19
 8007708:	4620      	mov	r0, r4
 800770a:	f7fc faf9 	bl	8003d00 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 800770e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8007712:	42ab      	cmp	r3, r5
 8007714:	d10a      	bne.n	800772c <lv_obj_refresh_ext_draw_size+0x3c>
    if(obj->spec_attr) {
 8007716:	68a3      	ldr	r3, [r4, #8]
 8007718:	b163      	cbz	r3, 8007734 <lv_obj_refresh_ext_draw_size+0x44>
        obj->spec_attr->ext_draw_size = s_new;
 800771a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800771e:	82da      	strh	r2, [r3, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 8007720:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8007724:	42ab      	cmp	r3, r5
 8007726:	d111      	bne.n	800774c <lv_obj_refresh_ext_draw_size+0x5c>
}
 8007728:	b003      	add	sp, #12
 800772a:	bd30      	pop	{r4, r5, pc}
    if(s_new != s_old) lv_obj_invalidate(obj);
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fc23 	bl	8007f78 <lv_obj_invalidate>
 8007732:	e7f0      	b.n	8007716 <lv_obj_refresh_ext_draw_size+0x26>
    else if(s_new != 0) {
 8007734:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f1      	beq.n	8007720 <lv_obj_refresh_ext_draw_size+0x30>
        lv_obj_allocate_spec_attr(obj);
 800773c:	4620      	mov	r0, r4
 800773e:	f7ff fb6f 	bl	8006e20 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8007742:	68a3      	ldr	r3, [r4, #8]
 8007744:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007748:	82da      	strh	r2, [r3, #22]
 800774a:	e7e9      	b.n	8007720 <lv_obj_refresh_ext_draw_size+0x30>
    if(s_new != s_old) lv_obj_invalidate(obj);
 800774c:	4620      	mov	r0, r4
 800774e:	f000 fc13 	bl	8007f78 <lv_obj_invalidate>
}
 8007752:	e7e9      	b.n	8007728 <lv_obj_refresh_ext_draw_size+0x38>

08007754 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 8007754:	6883      	ldr	r3, [r0, #8]
 8007756:	b113      	cbz	r3, 800775e <_lv_obj_get_layer_type+0xa>
 8007758:	7e98      	ldrb	r0, [r3, #26]
 800775a:	0980      	lsrs	r0, r0, #6
 800775c:	4770      	bx	lr
    else return LV_LAYER_TYPE_NONE;
 800775e:	2000      	movs	r0, #0
}
 8007760:	4770      	bx	lr
	...

08007764 <transform_point>:
        }
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8007764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007768:	b083      	sub	sp, #12
 800776a:	4604      	mov	r4, r0
 800776c:	460f      	mov	r7, r1
 800776e:	4690      	mov	r8, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8007770:	226d      	movs	r2, #109	; 0x6d
 8007772:	2100      	movs	r1, #0
 8007774:	f003 f838 	bl	800a7e8 <lv_obj_get_style_prop>
 8007778:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 800777a:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800777e:	226c      	movs	r2, #108	; 0x6c
 8007780:	2100      	movs	r1, #0
 8007782:	4620      	mov	r0, r4
 8007784:	f003 f830 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007788:	b205      	sxth	r5, r0
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 800778a:	f1b9 0f00 	cmp.w	r9, #0
 800778e:	d102      	bne.n	8007796 <transform_point+0x32>
 8007790:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007794:	d037      	beq.n	8007806 <transform_point+0xa2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8007796:	226e      	movs	r2, #110	; 0x6e
 8007798:	2100      	movs	r1, #0
 800779a:	4620      	mov	r0, r4
 800779c:	f003 f824 	bl	800a7e8 <lv_obj_get_style_prop>

    lv_point_t pivot = {
 80077a0:	f8ad 0004 	strh.w	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 80077a4:	226f      	movs	r2, #111	; 0x6f
 80077a6:	2100      	movs	r1, #0
 80077a8:	4620      	mov	r0, r4
 80077aa:	f003 f81d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80077ae:	b202      	sxth	r2, r0
 80077b0:	f8ad 2006 	strh.w	r2, [sp, #6]
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 80077b4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80077b8:	f403 41c0 	and.w	r1, r3, #24576	; 0x6000
 80077bc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80077c0:	d024      	beq.n	800780c <transform_point+0xa8>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 80077c2:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 80077c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ca:	d03b      	beq.n	8007844 <transform_point+0xe0>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
    }

    pivot.x = obj->coords.x1 + pivot.x;
 80077cc:	8aa3      	ldrh	r3, [r4, #20]
 80077ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80077d2:	4413      	add	r3, r2
 80077d4:	f8ad 3004 	strh.w	r3, [sp, #4]
    pivot.y = obj->coords.y1 + pivot.y;
 80077d8:	8ae3      	ldrh	r3, [r4, #22]
 80077da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80077de:	4413      	add	r3, r2
 80077e0:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(inv) {
 80077e4:	f1b8 0f00 	cmp.w	r8, #0
 80077e8:	d007      	beq.n	80077fa <transform_point+0x96>
        angle = -angle;
 80077ea:	4276      	negs	r6, r6
 80077ec:	fa0f f986 	sxth.w	r9, r6
        zoom = (256 * 256) / zoom;
 80077f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80077f4:	fb90 f5f5 	sdiv	r5, r0, r5
 80077f8:	b22d      	sxth	r5, r5
    }

    lv_point_transform(p, angle, zoom, &pivot);
 80077fa:	ab01      	add	r3, sp, #4
 80077fc:	462a      	mov	r2, r5
 80077fe:	4649      	mov	r1, r9
 8007800:	4638      	mov	r0, r7
 8007802:	f019 faed 	bl	8020de0 <lv_point_transform>
}
 8007806:	b003      	add	sp, #12
 8007808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(LV_COORD_IS_PCT(pivot.x)) {
 800780c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007810:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007814:	dcd5      	bgt.n	80077c2 <transform_point+0x5e>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8007816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781a:	bfc8      	it	gt
 800781c:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007820:	8b21      	ldrh	r1, [r4, #24]
 8007822:	3101      	adds	r1, #1
 8007824:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8007828:	eba1 010c 	sub.w	r1, r1, ip
 800782c:	b209      	sxth	r1, r1
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	4911      	ldr	r1, [pc, #68]	; (8007878 <transform_point+0x114>)
 8007834:	fb81 c103 	smull	ip, r1, r1, r3
 8007838:	17db      	asrs	r3, r3, #31
 800783a:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 800783e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007842:	e7be      	b.n	80077c2 <transform_point+0x5e>
    if(LV_COORD_IS_PCT(pivot.y)) {
 8007844:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007848:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800784c:	dcbe      	bgt.n	80077cc <transform_point+0x68>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800784e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007852:	bfc8      	it	gt
 8007854:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007858:	8b63      	ldrh	r3, [r4, #26]
 800785a:	3301      	adds	r3, #1
 800785c:	8ae1      	ldrh	r1, [r4, #22]
 800785e:	1a5b      	subs	r3, r3, r1
 8007860:	b21b      	sxth	r3, r3
 8007862:	fb03 f202 	mul.w	r2, r3, r2
 8007866:	4b04      	ldr	r3, [pc, #16]	; (8007878 <transform_point+0x114>)
 8007868:	fb83 1302 	smull	r1, r3, r3, r2
 800786c:	17d2      	asrs	r2, r2, #31
 800786e:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8007872:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007876:	e7a9      	b.n	80077cc <transform_point+0x68>
 8007878:	51eb851f 	.word	0x51eb851f

0800787c <lv_obj_set_x>:
{
 800787c:	b530      	push	{r4, r5, lr}
 800787e:	b083      	sub	sp, #12
 8007880:	4605      	mov	r5, r0
 8007882:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8007884:	2300      	movs	r3, #0
 8007886:	aa01      	add	r2, sp, #4
 8007888:	2107      	movs	r1, #7
 800788a:	f003 fbc6 	bl	800b01a <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 800788e:	2801      	cmp	r0, #1
 8007890:	d007      	beq.n	80078a2 <lv_obj_set_x+0x26>
 8007892:	b920      	cbnz	r0, 800789e <lv_obj_set_x+0x22>
        lv_obj_set_style_x(obj, x, 0);
 8007894:	2200      	movs	r2, #0
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f003 fe4b 	bl	800b534 <lv_obj_set_style_x>
}
 800789e:	b003      	add	sp, #12
 80078a0:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 80078a2:	9b01      	ldr	r3, [sp, #4]
 80078a4:	42a3      	cmp	r3, r4
 80078a6:	d1f5      	bne.n	8007894 <lv_obj_set_x+0x18>
 80078a8:	e7f9      	b.n	800789e <lv_obj_set_x+0x22>

080078aa <lv_obj_set_y>:
{
 80078aa:	b530      	push	{r4, r5, lr}
 80078ac:	b083      	sub	sp, #12
 80078ae:	4605      	mov	r5, r0
 80078b0:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 80078b2:	2300      	movs	r3, #0
 80078b4:	aa01      	add	r2, sp, #4
 80078b6:	2108      	movs	r1, #8
 80078b8:	f003 fbaf 	bl	800b01a <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 80078bc:	2801      	cmp	r0, #1
 80078be:	d007      	beq.n	80078d0 <lv_obj_set_y+0x26>
 80078c0:	b920      	cbnz	r0, 80078cc <lv_obj_set_y+0x22>
        lv_obj_set_style_y(obj, y, 0);
 80078c2:	2200      	movs	r2, #0
 80078c4:	4621      	mov	r1, r4
 80078c6:	4628      	mov	r0, r5
 80078c8:	f003 fe3b 	bl	800b542 <lv_obj_set_style_y>
}
 80078cc:	b003      	add	sp, #12
 80078ce:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 80078d0:	9b01      	ldr	r3, [sp, #4]
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	d1f5      	bne.n	80078c2 <lv_obj_set_y+0x18>
 80078d6:	e7f9      	b.n	80078cc <lv_obj_set_y+0x22>

080078d8 <lv_obj_set_pos>:
{
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4604      	mov	r4, r0
 80078dc:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 80078de:	f7ff ffcd 	bl	800787c <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 80078e2:	4629      	mov	r1, r5
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff ffe0 	bl	80078aa <lv_obj_set_y>
}
 80078ea:	bd38      	pop	{r3, r4, r5, pc}

080078ec <lv_obj_set_width>:
{
 80078ec:	b530      	push	{r4, r5, lr}
 80078ee:	b083      	sub	sp, #12
 80078f0:	4605      	mov	r5, r0
 80078f2:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 80078f4:	2300      	movs	r3, #0
 80078f6:	aa01      	add	r2, sp, #4
 80078f8:	2101      	movs	r1, #1
 80078fa:	f003 fb8e 	bl	800b01a <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 80078fe:	2801      	cmp	r0, #1
 8007900:	d007      	beq.n	8007912 <lv_obj_set_width+0x26>
 8007902:	b920      	cbnz	r0, 800790e <lv_obj_set_width+0x22>
        lv_obj_set_style_width(obj, w, 0);
 8007904:	2200      	movs	r2, #0
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f003 fdfe 	bl	800b50a <lv_obj_set_style_width>
}
 800790e:	b003      	add	sp, #12
 8007910:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8007912:	9b01      	ldr	r3, [sp, #4]
 8007914:	42a3      	cmp	r3, r4
 8007916:	d1f5      	bne.n	8007904 <lv_obj_set_width+0x18>
 8007918:	e7f9      	b.n	800790e <lv_obj_set_width+0x22>

0800791a <lv_obj_set_height>:
{
 800791a:	b530      	push	{r4, r5, lr}
 800791c:	b083      	sub	sp, #12
 800791e:	4605      	mov	r5, r0
 8007920:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8007922:	2300      	movs	r3, #0
 8007924:	aa01      	add	r2, sp, #4
 8007926:	2104      	movs	r1, #4
 8007928:	f003 fb77 	bl	800b01a <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 800792c:	2801      	cmp	r0, #1
 800792e:	d007      	beq.n	8007940 <lv_obj_set_height+0x26>
 8007930:	b920      	cbnz	r0, 800793c <lv_obj_set_height+0x22>
        lv_obj_set_style_height(obj, h, 0);
 8007932:	2200      	movs	r2, #0
 8007934:	4621      	mov	r1, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f003 fdf5 	bl	800b526 <lv_obj_set_style_height>
}
 800793c:	b003      	add	sp, #12
 800793e:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	42a3      	cmp	r3, r4
 8007944:	d1f5      	bne.n	8007932 <lv_obj_set_height+0x18>
 8007946:	e7f9      	b.n	800793c <lv_obj_set_height+0x22>

08007948 <lv_obj_set_size>:
{
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4604      	mov	r4, r0
 800794c:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 800794e:	f7ff ffcd 	bl	80078ec <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 8007952:	4629      	mov	r1, r5
 8007954:	4620      	mov	r0, r4
 8007956:	f7ff ffe0 	bl	800791a <lv_obj_set_height>
}
 800795a:	bd38      	pop	{r3, r4, r5, pc}

0800795c <lv_obj_is_layout_positioned>:
{
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8007960:	490a      	ldr	r1, [pc, #40]	; (800798c <lv_obj_is_layout_positioned+0x30>)
 8007962:	f7ff f83c 	bl	80069de <lv_obj_has_flag_any>
 8007966:	b110      	cbz	r0, 800796e <lv_obj_is_layout_positioned+0x12>
 8007968:	2400      	movs	r4, #0
}
 800796a:	4620      	mov	r0, r4
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007970:	4628      	mov	r0, r5
 8007972:	f003 fe7b 	bl	800b66c <lv_obj_get_parent>
    if(parent == NULL) return false;
 8007976:	2800      	cmp	r0, #0
 8007978:	d0f7      	beq.n	800796a <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800797a:	220a      	movs	r2, #10
 800797c:	2100      	movs	r1, #0
 800797e:	f002 ff33 	bl	800a7e8 <lv_obj_get_style_prop>
    if(layout) return true;
 8007982:	b284      	uxth	r4, r0
 8007984:	3c00      	subs	r4, #0
 8007986:	bf18      	it	ne
 8007988:	2401      	movne	r4, #1
 800798a:	e7ee      	b.n	800796a <lv_obj_is_layout_positioned+0xe>
 800798c:	00060001 	.word	0x00060001

08007990 <lv_obj_mark_layout_as_dirty>:
{
 8007990:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 8007992:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_obj_t * scr = lv_obj_get_screen(obj);
 800799e:	f003 fe3a 	bl	800b616 <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 80079a2:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80079a6:	f042 0202 	orr.w	r2, r2, #2
 80079aa:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_disp_t * disp = lv_obj_get_disp(scr);
 80079ae:	f003 fe39 	bl	800b624 <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 80079b2:	6840      	ldr	r0, [r0, #4]
 80079b4:	b108      	cbz	r0, 80079ba <lv_obj_mark_layout_as_dirty+0x2a>
 80079b6:	f01b fc1a 	bl	80231ee <lv_timer_resume>
}
 80079ba:	bd08      	pop	{r3, pc}

080079bc <lv_obj_set_layout>:
{
 80079bc:	b510      	push	{r4, lr}
 80079be:	4604      	mov	r4, r0
    lv_obj_set_style_layout(obj, layout, 0);
 80079c0:	2200      	movs	r2, #0
 80079c2:	b289      	uxth	r1, r1
 80079c4:	f003 fe19 	bl	800b5fa <lv_obj_set_style_layout>
    lv_obj_mark_layout_as_dirty(obj);
 80079c8:	4620      	mov	r0, r4
 80079ca:	f7ff ffe1 	bl	8007990 <lv_obj_mark_layout_as_dirty>
}
 80079ce:	bd10      	pop	{r4, pc}

080079d0 <lv_layout_register>:
{
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4605      	mov	r5, r0
 80079d4:	460c      	mov	r4, r1
    layout_cnt++;
 80079d6:	4a0d      	ldr	r2, [pc, #52]	; (8007a0c <lv_layout_register+0x3c>)
 80079d8:	6813      	ldr	r3, [r2, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	6013      	str	r3, [r2, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 80079de:	4e0c      	ldr	r6, [pc, #48]	; (8007a10 <lv_layout_register+0x40>)
 80079e0:	00d9      	lsls	r1, r3, #3
 80079e2:	6830      	ldr	r0, [r6, #0]
 80079e4:	f019 ff7a 	bl	80218dc <lv_mem_realloc>
 80079e8:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 80079ea:	b168      	cbz	r0, 8007a08 <lv_layout_register+0x38>
 80079ec:	4603      	mov	r3, r0
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 80079ee:	4a07      	ldr	r2, [pc, #28]	; (8007a0c <lv_layout_register+0x3c>)
 80079f0:	6810      	ldr	r0, [r2, #0]
 80079f2:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 80079f6:	3a01      	subs	r2, #1
 80079f8:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <lv_layout_register+0x40>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8007a04:	6054      	str	r4, [r2, #4]
}
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8007a08:	e7fe      	b.n	8007a08 <lv_layout_register+0x38>
 8007a0a:	bf00      	nop
 8007a0c:	20002540 	.word	0x20002540
 8007a10:	200028c8 	.word	0x200028c8

08007a14 <lv_obj_align>:
{
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4604      	mov	r4, r0
 8007a18:	4615      	mov	r5, r2
 8007a1a:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f003 fd97 	bl	800b550 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 8007a22:	4632      	mov	r2, r6
 8007a24:	4629      	mov	r1, r5
 8007a26:	4620      	mov	r0, r4
 8007a28:	f7ff ff56 	bl	80078d8 <lv_obj_set_pos>
}
 8007a2c:	bd70      	pop	{r4, r5, r6, pc}

08007a2e <lv_obj_get_coords>:
    dest->x1 = src->x1;
 8007a2e:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8007a32:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8007a34:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8007a38:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8007a3a:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8007a3e:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8007a40:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8007a44:	80cb      	strh	r3, [r1, #6]
}
 8007a46:	4770      	bx	lr

08007a48 <lv_obj_get_x>:
{
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007a4e:	f003 fe0d 	bl	800b66c <lv_obj_get_parent>
    if(parent) {
 8007a52:	b1c8      	cbz	r0, 8007a88 <lv_obj_get_x+0x40>
 8007a54:	4606      	mov	r6, r0
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8007a56:	8aa4      	ldrh	r4, [r4, #20]
 8007a58:	f8b0 8014 	ldrh.w	r8, [r0, #20]
        rel_x += lv_obj_get_scroll_x(parent);
 8007a5c:	f001 fc26 	bl	80092ac <lv_obj_get_scroll_x>
 8007a60:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007a62:	2212      	movs	r2, #18
 8007a64:	2100      	movs	r1, #0
 8007a66:	4630      	mov	r0, r6
 8007a68:	f002 febe 	bl	800a7e8 <lv_obj_get_style_prop>
 8007a6c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007a6e:	2232      	movs	r2, #50	; 0x32
 8007a70:	2100      	movs	r1, #0
 8007a72:	4630      	mov	r0, r6
 8007a74:	f002 feb8 	bl	800a7e8 <lv_obj_get_style_prop>
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8007a78:	4405      	add	r5, r0
 8007a7a:	1b64      	subs	r4, r4, r5
 8007a7c:	eba4 0008 	sub.w	r0, r4, r8
 8007a80:	4438      	add	r0, r7
 8007a82:	b200      	sxth	r0, r0
}
 8007a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rel_x = obj->coords.x1;
 8007a88:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8007a8c:	e7fa      	b.n	8007a84 <lv_obj_get_x+0x3c>

08007a8e <lv_obj_get_y>:
{
 8007a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a92:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8007a94:	f003 fdea 	bl	800b66c <lv_obj_get_parent>
    if(parent) {
 8007a98:	b1c8      	cbz	r0, 8007ace <lv_obj_get_y+0x40>
 8007a9a:	4606      	mov	r6, r0
        rel_y = obj->coords.y1 - parent->coords.y1;
 8007a9c:	8ae4      	ldrh	r4, [r4, #22]
 8007a9e:	f8b0 8016 	ldrh.w	r8, [r0, #22]
        rel_y += lv_obj_get_scroll_y(parent);
 8007aa2:	f001 fc0b 	bl	80092bc <lv_obj_get_scroll_y>
 8007aa6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4630      	mov	r0, r6
 8007aae:	f002 fe9b 	bl	800a7e8 <lv_obj_get_style_prop>
 8007ab2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007ab4:	2232      	movs	r2, #50	; 0x32
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f002 fe95 	bl	800a7e8 <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8007abe:	4405      	add	r5, r0
 8007ac0:	1b64      	subs	r4, r4, r5
 8007ac2:	eba4 0008 	sub.w	r0, r4, r8
 8007ac6:	4438      	add	r0, r7
 8007ac8:	b200      	sxth	r0, r0
}
 8007aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rel_y = obj->coords.y1;
 8007ace:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8007ad2:	e7fa      	b.n	8007aca <lv_obj_get_y+0x3c>

08007ad4 <lv_obj_get_y2>:
{
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	4604      	mov	r4, r0
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 8007ad8:	f7ff ffd9 	bl	8007a8e <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007adc:	8b63      	ldrh	r3, [r4, #26]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	8ae2      	ldrh	r2, [r4, #22]
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	4418      	add	r0, r3
}
 8007ae6:	b200      	sxth	r0, r0
 8007ae8:	bd10      	pop	{r4, pc}

08007aea <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007aea:	8b03      	ldrh	r3, [r0, #24]
 8007aec:	3301      	adds	r3, #1
 8007aee:	8a80      	ldrh	r0, [r0, #20]
 8007af0:	1a18      	subs	r0, r3, r0
}
 8007af2:	b200      	sxth	r0, r0
 8007af4:	4770      	bx	lr

08007af6 <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007af6:	8b43      	ldrh	r3, [r0, #26]
 8007af8:	3301      	adds	r3, #1
 8007afa:	8ac0      	ldrh	r0, [r0, #22]
 8007afc:	1a18      	subs	r0, r3, r0
}
 8007afe:	b200      	sxth	r0, r0
 8007b00:	4770      	bx	lr

08007b02 <lv_obj_get_content_width>:
{
 8007b02:	b570      	push	{r4, r5, r6, lr}
 8007b04:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007b06:	2212      	movs	r2, #18
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f002 fe6d 	bl	800a7e8 <lv_obj_get_style_prop>
 8007b0e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007b10:	2213      	movs	r2, #19
 8007b12:	2100      	movs	r1, #0
 8007b14:	4628      	mov	r0, r5
 8007b16:	f002 fe67 	bl	800a7e8 <lv_obj_get_style_prop>
 8007b1a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007b1c:	2232      	movs	r2, #50	; 0x32
 8007b1e:	2100      	movs	r1, #0
 8007b20:	4628      	mov	r0, r5
 8007b22:	f002 fe61 	bl	800a7e8 <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 8007b26:	4434      	add	r4, r6
 8007b28:	f1c4 0401 	rsb	r4, r4, #1
 8007b2c:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
 8007b30:	8b28      	ldrh	r0, [r5, #24]
 8007b32:	4404      	add	r4, r0
 8007b34:	8aa8      	ldrh	r0, [r5, #20]
 8007b36:	1a20      	subs	r0, r4, r0
}
 8007b38:	b200      	sxth	r0, r0
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}

08007b3c <lv_obj_get_content_height>:
{
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007b40:	2210      	movs	r2, #16
 8007b42:	2100      	movs	r1, #0
 8007b44:	f002 fe50 	bl	800a7e8 <lv_obj_get_style_prop>
 8007b48:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007b4a:	2211      	movs	r2, #17
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f002 fe4a 	bl	800a7e8 <lv_obj_get_style_prop>
 8007b54:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007b56:	2232      	movs	r2, #50	; 0x32
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f002 fe44 	bl	800a7e8 <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8007b60:	4434      	add	r4, r6
 8007b62:	f1c4 0401 	rsb	r4, r4, #1
 8007b66:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
 8007b6a:	8b68      	ldrh	r0, [r5, #26]
 8007b6c:	4404      	add	r4, r0
 8007b6e:	8ae8      	ldrh	r0, [r5, #22]
 8007b70:	1a20      	subs	r0, r4, r0
}
 8007b72:	b200      	sxth	r0, r0
 8007b74:	bd70      	pop	{r4, r5, r6, pc}

08007b76 <lv_obj_get_content_coords>:
{
 8007b76:	b570      	push	{r4, r5, r6, lr}
 8007b78:	4606      	mov	r6, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	2232      	movs	r2, #50	; 0x32
 8007b7e:	2100      	movs	r1, #0
 8007b80:	f002 fe32 	bl	800a7e8 <lv_obj_get_style_prop>
 8007b84:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, area);
 8007b86:	4621      	mov	r1, r4
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f7ff ff50 	bl	8007a2e <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8007b8e:	4269      	negs	r1, r5
 8007b90:	b209      	sxth	r1, r1
 8007b92:	460a      	mov	r2, r1
 8007b94:	4620      	mov	r0, r4
 8007b96:	f018 ff34 	bl	8020a02 <lv_area_increase>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007b9a:	2212      	movs	r2, #18
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f002 fe22 	bl	800a7e8 <lv_obj_get_style_prop>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8007ba4:	8823      	ldrh	r3, [r4, #0]
 8007ba6:	4418      	add	r0, r3
 8007ba8:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8007baa:	2213      	movs	r2, #19
 8007bac:	2100      	movs	r1, #0
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f002 fe1a 	bl	800a7e8 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8007bb4:	88a3      	ldrh	r3, [r4, #4]
 8007bb6:	1a1b      	subs	r3, r3, r0
 8007bb8:	80a3      	strh	r3, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007bba:	2210      	movs	r2, #16
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f002 fe12 	bl	800a7e8 <lv_obj_get_style_prop>
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8007bc4:	8863      	ldrh	r3, [r4, #2]
 8007bc6:	4418      	add	r0, r3
 8007bc8:	8060      	strh	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007bca:	2211      	movs	r2, #17
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f002 fe0a 	bl	800a7e8 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8007bd4:	88e3      	ldrh	r3, [r4, #6]
 8007bd6:	1a1b      	subs	r3, r3, r0
 8007bd8:	80e3      	strh	r3, [r4, #6]
}
 8007bda:	bd70      	pop	{r4, r5, r6, pc}

08007bdc <lv_obj_get_self_width>:
{
 8007bdc:	b500      	push	{lr}
 8007bde:	b083      	sub	sp, #12
    lv_point_t p = {0, LV_COORD_MIN};
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007be6:	f24e 0301 	movw	r3, #57345	; 0xe001
 8007bea:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8007bee:	aa01      	add	r2, sp, #4
 8007bf0:	212c      	movs	r1, #44	; 0x2c
 8007bf2:	f7fc f885 	bl	8003d00 <lv_event_send>
}
 8007bf6:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8007bfa:	b003      	add	sp, #12
 8007bfc:	f85d fb04 	ldr.w	pc, [sp], #4

08007c00 <lv_obj_get_self_height>:
{
 8007c00:	b500      	push	{lr}
 8007c02:	b083      	sub	sp, #12
    lv_point_t p = {LV_COORD_MIN, 0};
 8007c04:	f24e 0301 	movw	r3, #57345	; 0xe001
 8007c08:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8007c12:	aa01      	add	r2, sp, #4
 8007c14:	212c      	movs	r1, #44	; 0x2c
 8007c16:	f7fc f873 	bl	8003d00 <lv_event_send>
}
 8007c1a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8007c1e:	b003      	add	sp, #12
 8007c20:	f85d fb04 	ldr.w	pc, [sp], #4

08007c24 <lv_obj_refresh_self_size>:
{
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8007c28:	2201      	movs	r2, #1
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f002 fddc 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007c30:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007c32:	2204      	movs	r2, #4
 8007c34:	2100      	movs	r1, #0
 8007c36:	4620      	mov	r0, r4
 8007c38:	f002 fdd6 	bl	800a7e8 <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8007c3c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8007c40:	429d      	cmp	r5, r3
 8007c42:	d002      	beq.n	8007c4a <lv_obj_refresh_self_size+0x26>
 8007c44:	b200      	sxth	r0, r0
 8007c46:	4298      	cmp	r0, r3
 8007c48:	d104      	bne.n	8007c54 <lv_obj_refresh_self_size+0x30>
    lv_obj_mark_layout_as_dirty(obj);
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7ff fea0 	bl	8007990 <lv_obj_mark_layout_as_dirty>
    return true;
 8007c50:	2001      	movs	r0, #1
}
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8007c54:	2000      	movs	r0, #0
 8007c56:	e7fc      	b.n	8007c52 <lv_obj_refresh_self_size+0x2e>

08007c58 <lv_obj_move_children_by>:
{
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	4680      	mov	r8, r0
 8007c60:	460e      	mov	r6, r1
 8007c62:	9100      	str	r1, [sp, #0]
 8007c64:	4614      	mov	r4, r2
 8007c66:	9201      	str	r2, [sp, #4]
 8007c68:	4699      	mov	r9, r3
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007c6a:	f003 fd18 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8007c6e:	b350      	cbz	r0, 8007cc6 <lv_obj_move_children_by+0x6e>
 8007c70:	4682      	mov	sl, r0
 8007c72:	2500      	movs	r5, #0
        child->coords.x1 += x_diff;
 8007c74:	b2b7      	uxth	r7, r6
        child->coords.y1 += y_diff;
 8007c76:	b2a6      	uxth	r6, r4
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8007c78:	46ab      	mov	fp, r5
 8007c7a:	e014      	b.n	8007ca6 <lv_obj_move_children_by+0x4e>
        child->coords.x1 += x_diff;
 8007c7c:	8aa3      	ldrh	r3, [r4, #20]
 8007c7e:	443b      	add	r3, r7
 8007c80:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 8007c82:	8ae3      	ldrh	r3, [r4, #22]
 8007c84:	4433      	add	r3, r6
 8007c86:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 8007c88:	8b23      	ldrh	r3, [r4, #24]
 8007c8a:	443b      	add	r3, r7
 8007c8c:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 8007c8e:	8b63      	ldrh	r3, [r4, #26]
 8007c90:	4433      	add	r3, r6
 8007c92:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8007c94:	465b      	mov	r3, fp
 8007c96:	9a01      	ldr	r2, [sp, #4]
 8007c98:	9900      	ldr	r1, [sp, #0]
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7ff ffdc 	bl	8007c58 <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	45aa      	cmp	sl, r5
 8007ca4:	d00f      	beq.n	8007cc6 <lv_obj_move_children_by+0x6e>
        lv_obj_t * child = obj->spec_attr->children[i];
 8007ca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8007cb0:	f1b9 0f00 	cmp.w	r9, #0
 8007cb4:	d0e2      	beq.n	8007c7c <lv_obj_move_children_by+0x24>
 8007cb6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f7fe fe88 	bl	80069d0 <lv_obj_has_flag>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0db      	beq.n	8007c7c <lv_obj_move_children_by+0x24>
 8007cc4:	e7ec      	b.n	8007ca0 <lv_obj_move_children_by+0x48>
}
 8007cc6:	b003      	add	sp, #12
 8007cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ccc <lv_obj_transform_point>:
    if(obj) {
 8007ccc:	b380      	cbz	r0, 8007d30 <lv_obj_transform_point+0x64>
{
 8007cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd2:	460f      	mov	r7, r1
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	4680      	mov	r8, r0
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8007cda:	f7ff fd3b 	bl	8007754 <_lv_obj_get_layer_type>
 8007cde:	4606      	mov	r6, r0
        if(inv) {
 8007ce0:	b19d      	cbz	r5, 8007d0a <lv_obj_transform_point+0x3e>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8007ce2:	b91c      	cbnz	r4, 8007cec <lv_obj_transform_point+0x20>
            if(do_tranf) transform_point(obj, p, inv);
 8007ce4:	2e02      	cmp	r6, #2
 8007ce6:	d00a      	beq.n	8007cfe <lv_obj_transform_point+0x32>
}
 8007ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8007cec:	4640      	mov	r0, r8
 8007cee:	f003 fcbd 	bl	800b66c <lv_obj_get_parent>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	f7ff ffe8 	bl	8007ccc <lv_obj_transform_point>
 8007cfc:	e7f2      	b.n	8007ce4 <lv_obj_transform_point+0x18>
            if(do_tranf) transform_point(obj, p, inv);
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4639      	mov	r1, r7
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7ff fd2e 	bl	8007764 <transform_point>
 8007d08:	e7ee      	b.n	8007ce8 <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 8007d0a:	2802      	cmp	r0, #2
 8007d0c:	d00a      	beq.n	8007d24 <lv_obj_transform_point+0x58>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8007d0e:	2c00      	cmp	r4, #0
 8007d10:	d0ea      	beq.n	8007ce8 <lv_obj_transform_point+0x1c>
 8007d12:	4640      	mov	r0, r8
 8007d14:	f003 fcaa 	bl	800b66c <lv_obj_get_parent>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7ff ffd5 	bl	8007ccc <lv_obj_transform_point>
}
 8007d22:	e7e1      	b.n	8007ce8 <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 8007d24:	2200      	movs	r2, #0
 8007d26:	4639      	mov	r1, r7
 8007d28:	4640      	mov	r0, r8
 8007d2a:	f7ff fd1b 	bl	8007764 <transform_point>
 8007d2e:	e7ee      	b.n	8007d0e <lv_obj_transform_point+0x42>
 8007d30:	4770      	bx	lr

08007d32 <lv_obj_get_transformed_area>:
{
 8007d32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d34:	b085      	sub	sp, #20
 8007d36:	4605      	mov	r5, r0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	4616      	mov	r6, r2
 8007d3c:	461f      	mov	r7, r3
        {area->x1, area->y1},
 8007d3e:	f9b1 1000 	ldrsh.w	r1, [r1]
    lv_point_t p[4] = {
 8007d42:	f8ad 1000 	strh.w	r1, [sp]
        {area->x1, area->y1},
 8007d46:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
    lv_point_t p[4] = {
 8007d4a:	f8ad e002 	strh.w	lr, [sp, #2]
 8007d4e:	f8ad 1004 	strh.w	r1, [sp, #4]
        {area->x1, area->y2},
 8007d52:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    lv_point_t p[4] = {
 8007d56:	f8ad 1006 	strh.w	r1, [sp, #6]
        {area->x2, area->y1},
 8007d5a:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
    lv_point_t p[4] = {
 8007d5e:	f8ad c008 	strh.w	ip, [sp, #8]
 8007d62:	f8ad e00a 	strh.w	lr, [sp, #10]
 8007d66:	f8ad c00c 	strh.w	ip, [sp, #12]
 8007d6a:	f8ad 100e 	strh.w	r1, [sp, #14]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 8007d6e:	4669      	mov	r1, sp
 8007d70:	f7ff ffac 	bl	8007ccc <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 8007d74:	463b      	mov	r3, r7
 8007d76:	4632      	mov	r2, r6
 8007d78:	a901      	add	r1, sp, #4
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f7ff ffa6 	bl	8007ccc <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 8007d80:	463b      	mov	r3, r7
 8007d82:	4632      	mov	r2, r6
 8007d84:	a902      	add	r1, sp, #8
 8007d86:	4628      	mov	r0, r5
 8007d88:	f7ff ffa0 	bl	8007ccc <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	4632      	mov	r2, r6
 8007d90:	a903      	add	r1, sp, #12
 8007d92:	4628      	mov	r0, r5
 8007d94:	f7ff ff9a 	bl	8007ccc <lv_obj_transform_point>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 8007d98:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8007d9c:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 8007da0:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8007da4:	f9bd 1000 	ldrsh.w	r1, [sp]
 8007da8:	461a      	mov	r2, r3
 8007daa:	42ab      	cmp	r3, r5
 8007dac:	bfa8      	it	ge
 8007dae:	462a      	movge	r2, r5
 8007db0:	4282      	cmp	r2, r0
 8007db2:	bfa8      	it	ge
 8007db4:	4602      	movge	r2, r0
 8007db6:	428a      	cmp	r2, r1
 8007db8:	bfa8      	it	ge
 8007dba:	460a      	movge	r2, r1
 8007dbc:	8022      	strh	r2, [r4, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 8007dbe:	42ab      	cmp	r3, r5
 8007dc0:	bfb8      	it	lt
 8007dc2:	462b      	movlt	r3, r5
 8007dc4:	4283      	cmp	r3, r0
 8007dc6:	bfb8      	it	lt
 8007dc8:	4603      	movlt	r3, r0
 8007dca:	428b      	cmp	r3, r1
 8007dcc:	bfb8      	it	lt
 8007dce:	460b      	movlt	r3, r1
 8007dd0:	80a3      	strh	r3, [r4, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8007dd2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8007dd6:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8007dda:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8007dde:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8007de2:	461a      	mov	r2, r3
 8007de4:	42ab      	cmp	r3, r5
 8007de6:	bfa8      	it	ge
 8007de8:	462a      	movge	r2, r5
 8007dea:	4282      	cmp	r2, r0
 8007dec:	bfa8      	it	ge
 8007dee:	4602      	movge	r2, r0
 8007df0:	428a      	cmp	r2, r1
 8007df2:	bfa8      	it	ge
 8007df4:	460a      	movge	r2, r1
 8007df6:	8062      	strh	r2, [r4, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8007df8:	42ab      	cmp	r3, r5
 8007dfa:	bfb8      	it	lt
 8007dfc:	462b      	movlt	r3, r5
 8007dfe:	4283      	cmp	r3, r0
 8007e00:	bfb8      	it	lt
 8007e02:	4603      	movlt	r3, r0
 8007e04:	428b      	cmp	r3, r1
 8007e06:	bfb8      	it	lt
 8007e08:	460b      	movlt	r3, r1
 8007e0a:	80e3      	strh	r3, [r4, #6]
    lv_area_increase(area, 5, 5);
 8007e0c:	2205      	movs	r2, #5
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4620      	mov	r0, r4
 8007e12:	f018 fdf6 	bl	8020a02 <lv_area_increase>
}
 8007e16:	b005      	add	sp, #20
 8007e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e1a <lv_obj_area_is_visible>:
{
 8007e1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	4604      	mov	r4, r0
 8007e22:	460e      	mov	r6, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8007e24:	2101      	movs	r1, #1
 8007e26:	f7fe fdd3 	bl	80069d0 <lv_obj_has_flag>
 8007e2a:	b128      	cbz	r0, 8007e38 <lv_obj_area_is_visible+0x1e>
 8007e2c:	f04f 0900 	mov.w	r9, #0
}
 8007e30:	4648      	mov	r0, r9
 8007e32:	b003      	add	sp, #12
 8007e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e38:	4681      	mov	r9, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f003 fbeb 	bl	800b616 <lv_obj_get_screen>
 8007e40:	4605      	mov	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8007e42:	f003 fbef 	bl	800b624 <lv_obj_get_disp>
 8007e46:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8007e48:	f7fb fe08 	bl	8003a5c <lv_disp_get_scr_act>
 8007e4c:	4285      	cmp	r5, r0
 8007e4e:	d00e      	beq.n	8007e6e <lv_obj_area_is_visible+0x54>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7fb fe0e 	bl	8003a72 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8007e56:	4285      	cmp	r5, r0
 8007e58:	d009      	beq.n	8007e6e <lv_obj_area_is_visible+0x54>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	f7fb fe14 	bl	8003a88 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8007e60:	4285      	cmp	r5, r0
 8007e62:	d004      	beq.n	8007e6e <lv_obj_area_is_visible+0x54>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7fb fe1a 	bl	8003a9e <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8007e6a:	4285      	cmp	r5, r0
 8007e6c:	d1e0      	bne.n	8007e30 <lv_obj_area_is_visible+0x16>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8007e6e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7fe fdb3 	bl	80069de <lv_obj_has_flag_any>
 8007e78:	b9e0      	cbnz	r0, 8007eb4 <lv_obj_area_is_visible+0x9a>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7ff fc31 	bl	80076e2 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8007e80:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8007e84:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    dest->y2 = src->y2;
 8007e88:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
        obj_coords.x1 -= ext_size;
 8007e8c:	b280      	uxth	r0, r0
 8007e8e:	8aa1      	ldrh	r1, [r4, #20]
 8007e90:	1a09      	subs	r1, r1, r0
 8007e92:	f8ad 1000 	strh.w	r1, [sp]
        obj_coords.y1 -= ext_size;
 8007e96:	1a12      	subs	r2, r2, r0
 8007e98:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
 8007e9c:	4403      	add	r3, r0
 8007e9e:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
 8007ea2:	4428      	add	r0, r5
 8007ea4:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8007ea8:	466a      	mov	r2, sp
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4630      	mov	r0, r6
 8007eae:	f018 fdc6 	bl	8020a3e <_lv_area_intersect>
 8007eb2:	b178      	cbz	r0, 8007ed4 <lv_obj_area_is_visible+0xba>
    lv_obj_get_transformed_area(obj, area, true, false);
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7ff ff39 	bl	8007d32 <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f003 fbd3 	bl	800b66c <lv_obj_get_parent>
    while(par != NULL) {
 8007ec6:	4604      	mov	r4, r0
 8007ec8:	b378      	cbz	r0, 8007f2a <lv_obj_area_is_visible+0x110>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 8007eca:	2701      	movs	r7, #1
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8007ecc:	f44f 2800 	mov.w	r8, #524288	; 0x80000
            lv_area_t par_area = par->coords;
 8007ed0:	466d      	mov	r5, sp
 8007ed2:	e006      	b.n	8007ee2 <lv_obj_area_is_visible+0xc8>
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8007ed4:	4681      	mov	r9, r0
 8007ed6:	e7ab      	b.n	8007e30 <lv_obj_area_is_visible+0x16>
        par = lv_obj_get_parent(par);
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f003 fbc7 	bl	800b66c <lv_obj_get_parent>
    while(par != NULL) {
 8007ede:	4604      	mov	r4, r0
 8007ee0:	b300      	cbz	r0, 8007f24 <lv_obj_area_is_visible+0x10a>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7fe fd73 	bl	80069d0 <lv_obj_has_flag>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d1a0      	bne.n	8007e30 <lv_obj_area_is_visible+0x16>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8007eee:	4641      	mov	r1, r8
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f7fe fd74 	bl	80069de <lv_obj_has_flag_any>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d1ee      	bne.n	8007ed8 <lv_obj_area_is_visible+0xbe>
            lv_area_t par_area = par->coords;
 8007efa:	f104 0314 	add.w	r3, r4, #20
 8007efe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007f02:	e885 0003 	stmia.w	r5, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8007f06:	2300      	movs	r3, #0
 8007f08:	463a      	mov	r2, r7
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff ff10 	bl	8007d32 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 8007f12:	462a      	mov	r2, r5
 8007f14:	4631      	mov	r1, r6
 8007f16:	4630      	mov	r0, r6
 8007f18:	f018 fd91 	bl	8020a3e <_lv_area_intersect>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1db      	bne.n	8007ed8 <lv_obj_area_is_visible+0xbe>
 8007f20:	4681      	mov	r9, r0
 8007f22:	e785      	b.n	8007e30 <lv_obj_area_is_visible+0x16>
    return true;
 8007f24:	f04f 0901 	mov.w	r9, #1
 8007f28:	e782      	b.n	8007e30 <lv_obj_area_is_visible+0x16>
 8007f2a:	f04f 0901 	mov.w	r9, #1
 8007f2e:	e77f      	b.n	8007e30 <lv_obj_area_is_visible+0x16>

08007f30 <lv_obj_invalidate_area>:
{
 8007f30:	b530      	push	{r4, r5, lr}
 8007f32:	b083      	sub	sp, #12
 8007f34:	4605      	mov	r5, r0
 8007f36:	460c      	mov	r4, r1
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8007f38:	f003 fb74 	bl	800b624 <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8007f3c:	f7fb fdc3 	bl	8003ac6 <lv_disp_is_invalidation_enabled>
 8007f40:	b908      	cbnz	r0, 8007f46 <lv_obj_invalidate_area+0x16>
}
 8007f42:	b003      	add	sp, #12
 8007f44:	bd30      	pop	{r4, r5, pc}
    dest->x1 = src->x1;
 8007f46:	8823      	ldrh	r3, [r4, #0]
 8007f48:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8007f4c:	8863      	ldrh	r3, [r4, #2]
 8007f4e:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8007f52:	88a3      	ldrh	r3, [r4, #4]
 8007f54:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8007f58:	88e3      	ldrh	r3, [r4, #6]
 8007f5a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8007f5e:	4669      	mov	r1, sp
 8007f60:	4628      	mov	r0, r5
 8007f62:	f7ff ff5a 	bl	8007e1a <lv_obj_area_is_visible>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d0eb      	beq.n	8007f42 <lv_obj_invalidate_area+0x12>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f003 fb5a 	bl	800b624 <lv_obj_get_disp>
 8007f70:	4669      	mov	r1, sp
 8007f72:	f004 fb3f 	bl	800c5f4 <_lv_inv_area>
 8007f76:	e7e4      	b.n	8007f42 <lv_obj_invalidate_area+0x12>

08007f78 <lv_obj_invalidate>:
{
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8007f7e:	f7ff fbb0 	bl	80076e2 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8007f82:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    dest->x2 = src->x2;
 8007f86:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8007f8a:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
    obj_coords.x1 -= ext_size;
 8007f8e:	b283      	uxth	r3, r0
 8007f90:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8007f94:	ebac 0c03 	sub.w	ip, ip, r3
 8007f98:	f8ad c000 	strh.w	ip, [sp]
    obj_coords.y1 -= ext_size;
 8007f9c:	1ac9      	subs	r1, r1, r3
 8007f9e:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.x2 += ext_size;
 8007fa2:	441a      	add	r2, r3
 8007fa4:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 8007fa8:	4473      	add	r3, lr
 8007faa:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 8007fae:	4669      	mov	r1, sp
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f7ff ffbd 	bl	8007f30 <lv_obj_invalidate_area>
}
 8007fb6:	b002      	add	sp, #8
 8007fb8:	bd10      	pop	{r4, pc}

08007fba <lv_obj_move_to>:
{
 8007fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	460e      	mov	r6, r1
 8007fc4:	4615      	mov	r5, r2
    lv_obj_t * parent = obj->parent;
 8007fc6:	6847      	ldr	r7, [r0, #4]
    if(parent) {
 8007fc8:	b32f      	cbz	r7, 8008016 <lv_obj_move_to+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8007fca:	2212      	movs	r2, #18
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f002 fc0a 	bl	800a7e8 <lv_obj_get_style_prop>
 8007fd4:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007fd6:	2210      	movs	r2, #16
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f002 fc04 	bl	800a7e8 <lv_obj_get_style_prop>
 8007fe0:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8007fe2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7fe fcf2 	bl	80069d0 <lv_obj_has_flag>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d036      	beq.n	800805e <lv_obj_move_to+0xa4>
            x += pad_left + parent->coords.x1;
 8007ff0:	4446      	add	r6, r8
 8007ff2:	f8b7 8014 	ldrh.w	r8, [r7, #20]
 8007ff6:	4446      	add	r6, r8
 8007ff8:	b236      	sxth	r6, r6
            y += pad_top + parent->coords.y1;
 8007ffa:	444d      	add	r5, r9
 8007ffc:	8afa      	ldrh	r2, [r7, #22]
 8007ffe:	4415      	add	r5, r2
 8008000:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008002:	2232      	movs	r2, #50	; 0x32
 8008004:	2100      	movs	r1, #0
 8008006:	4638      	mov	r0, r7
 8008008:	f002 fbee 	bl	800a7e8 <lv_obj_get_style_prop>
        x += border_width;
 800800c:	b280      	uxth	r0, r0
 800800e:	4406      	add	r6, r0
 8008010:	b236      	sxth	r6, r6
        y += border_width;
 8008012:	4405      	add	r5, r0
 8008014:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
 8008016:	8aa1      	ldrh	r1, [r4, #20]
 8008018:	1a76      	subs	r6, r6, r1
 800801a:	fa1f f886 	uxth.w	r8, r6
 800801e:	b236      	sxth	r6, r6
    diff.y = y - obj->coords.y1;
 8008020:	8ae2      	ldrh	r2, [r4, #22]
 8008022:	1aad      	subs	r5, r5, r2
 8008024:	fa1f f985 	uxth.w	r9, r5
 8008028:	b22d      	sxth	r5, r5
    if(diff.x == 0 && diff.y == 0) return;
 800802a:	ea58 0309 	orrs.w	r3, r8, r9
 800802e:	d05f      	beq.n	80080f0 <lv_obj_move_to+0x136>
    lv_obj_invalidate(obj);
 8008030:	4620      	mov	r0, r4
 8008032:	f7ff ffa1 	bl	8007f78 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 8008036:	a902      	add	r1, sp, #8
 8008038:	4620      	mov	r0, r4
 800803a:	f7ff fcf8 	bl	8007a2e <lv_obj_get_coords>
    if(parent) {
 800803e:	b33f      	cbz	r7, 8008090 <lv_obj_move_to+0xd6>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8008040:	4669      	mov	r1, sp
 8008042:	4638      	mov	r0, r7
 8008044:	f7ff fd97 	bl	8007b76 <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8008048:	2200      	movs	r2, #0
 800804a:	4669      	mov	r1, sp
 800804c:	a802      	add	r0, sp, #8
 800804e:	f018 fe20 	bl	8020c92 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8008052:	4682      	mov	sl, r0
 8008054:	b9f0      	cbnz	r0, 8008094 <lv_obj_move_to+0xda>
 8008056:	4638      	mov	r0, r7
 8008058:	f002 fa0c 	bl	800a474 <lv_obj_scrollbar_invalidate>
 800805c:	e01a      	b.n	8008094 <lv_obj_move_to+0xda>
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 800805e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008062:	fa0f f888 	sxth.w	r8, r8
 8008066:	4498      	add	r8, r3
 8008068:	4638      	mov	r0, r7
 800806a:	f001 f91f 	bl	80092ac <lv_obj_get_scroll_x>
 800806e:	eba8 0800 	sub.w	r8, r8, r0
 8008072:	4446      	add	r6, r8
 8008074:	b236      	sxth	r6, r6
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8008076:	f9b7 8016 	ldrsh.w	r8, [r7, #22]
 800807a:	fa0f f989 	sxth.w	r9, r9
 800807e:	44c8      	add	r8, r9
 8008080:	4638      	mov	r0, r7
 8008082:	f001 f91b 	bl	80092bc <lv_obj_get_scroll_y>
 8008086:	eba8 0800 	sub.w	r8, r8, r0
 800808a:	4445      	add	r5, r8
 800808c:	b22d      	sxth	r5, r5
 800808e:	e7b8      	b.n	8008002 <lv_obj_move_to+0x48>
    bool on1 = false;
 8008090:	f04f 0a00 	mov.w	sl, #0
    obj->coords.x1 += diff.x;
 8008094:	8aa3      	ldrh	r3, [r4, #20]
 8008096:	4443      	add	r3, r8
 8008098:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 800809a:	8ae3      	ldrh	r3, [r4, #22]
 800809c:	444b      	add	r3, r9
 800809e:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 80080a0:	8b23      	ldrh	r3, [r4, #24]
 80080a2:	4498      	add	r8, r3
 80080a4:	f8a4 8018 	strh.w	r8, [r4, #24]
    obj->coords.y2 += diff.y;
 80080a8:	8b63      	ldrh	r3, [r4, #26]
 80080aa:	4499      	add	r9, r3
 80080ac:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 80080b0:	2300      	movs	r3, #0
 80080b2:	462a      	mov	r2, r5
 80080b4:	4631      	mov	r1, r6
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff fdce 	bl	8007c58 <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80080bc:	b1af      	cbz	r7, 80080ea <lv_obj_move_to+0x130>
 80080be:	4622      	mov	r2, r4
 80080c0:	2122      	movs	r1, #34	; 0x22
 80080c2:	4638      	mov	r0, r7
 80080c4:	f7fb fe1c 	bl	8003d00 <lv_event_send>
    lv_obj_invalidate(obj);
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7ff ff55 	bl	8007f78 <lv_obj_invalidate>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 80080ce:	2200      	movs	r2, #0
 80080d0:	4669      	mov	r1, sp
 80080d2:	f104 0014 	add.w	r0, r4, #20
 80080d6:	f018 fddc 	bl	8020c92 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 80080da:	f1ba 0f00 	cmp.w	sl, #0
 80080de:	d100      	bne.n	80080e2 <lv_obj_move_to+0x128>
 80080e0:	b130      	cbz	r0, 80080f0 <lv_obj_move_to+0x136>
 80080e2:	4638      	mov	r0, r7
 80080e4:	f002 f9c6 	bl	800a474 <lv_obj_scrollbar_invalidate>
 80080e8:	e002      	b.n	80080f0 <lv_obj_move_to+0x136>
    lv_obj_invalidate(obj);
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff ff44 	bl	8007f78 <lv_obj_invalidate>
}
 80080f0:	b004      	add	sp, #16
 80080f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080080f8 <lv_obj_refr_pos>:
{
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	b087      	sub	sp, #28
 80080fe:	4604      	mov	r4, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 8008100:	f7ff fc2c 	bl	800795c <lv_obj_is_layout_positioned>
 8008104:	b110      	cbz	r0, 800810c <lv_obj_refr_pos+0x14>
}
 8008106:	b007      	add	sp, #28
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800810c:	4620      	mov	r0, r4
 800810e:	f003 faad 	bl	800b66c <lv_obj_get_parent>
 8008112:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8008114:	2207      	movs	r2, #7
 8008116:	2100      	movs	r1, #0
 8008118:	4620      	mov	r0, r4
 800811a:	f002 fb65 	bl	800a7e8 <lv_obj_get_style_prop>
 800811e:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 8008120:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8008122:	2208      	movs	r2, #8
 8008124:	2100      	movs	r1, #0
 8008126:	4620      	mov	r0, r4
 8008128:	f002 fb5e 	bl	800a7e8 <lv_obj_get_style_prop>
 800812c:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 800812e:	b205      	sxth	r5, r0
    if(parent == NULL) {
 8008130:	f1b8 0f00 	cmp.w	r8, #0
 8008134:	d058      	beq.n	80081e8 <lv_obj_refr_pos+0xf0>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 8008136:	4640      	mov	r0, r8
 8008138:	f7ff fce3 	bl	8007b02 <lv_obj_get_content_width>
 800813c:	9000      	str	r0, [sp, #0]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 800813e:	4640      	mov	r0, r8
 8008140:	f7ff fcfc 	bl	8007b3c <lv_obj_get_content_height>
 8008144:	9001      	str	r0, [sp, #4]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 8008146:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 800814a:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 800814e:	d051      	beq.n	80081f4 <lv_obj_refr_pos+0xfc>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8008150:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 8008154:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8008158:	d061      	beq.n	800821e <lv_obj_refr_pos+0x126>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800815a:	226a      	movs	r2, #106	; 0x6a
 800815c:	2100      	movs	r1, #0
 800815e:	4620      	mov	r0, r4
 8008160:	f002 fb42 	bl	800a7e8 <lv_obj_get_style_prop>
 8008164:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8008166:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800816a:	226b      	movs	r2, #107	; 0x6b
 800816c:	2100      	movs	r1, #0
 800816e:	4620      	mov	r0, r4
 8008170:	f002 fb3a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008174:	b203      	sxth	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008176:	8aa1      	ldrh	r1, [r4, #20]
 8008178:	9104      	str	r1, [sp, #16]
 800817a:	8b22      	ldrh	r2, [r4, #24]
 800817c:	3201      	adds	r2, #1
 800817e:	b292      	uxth	r2, r2
 8008180:	9205      	str	r2, [sp, #20]
 8008182:	1a52      	subs	r2, r2, r1
 8008184:	b212      	sxth	r2, r2
 8008186:	9203      	str	r2, [sp, #12]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008188:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 800818c:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8008190:	f109 0901 	add.w	r9, r9, #1
 8008194:	fa1f f989 	uxth.w	r9, r9
 8008198:	eba9 020a 	sub.w	r2, r9, sl
 800819c:	b212      	sxth	r2, r2
 800819e:	9202      	str	r2, [sp, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80081a0:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 80081a4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80081a8:	d04e      	beq.n	8008248 <lv_obj_refr_pos+0x150>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80081aa:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 80081ae:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80081b2:	d060      	beq.n	8008276 <lv_obj_refr_pos+0x17e>
    x += tr_x;
 80081b4:	445f      	add	r7, fp
 80081b6:	b2be      	uxth	r6, r7
 80081b8:	b23f      	sxth	r7, r7
    y += tr_y;
 80081ba:	441d      	add	r5, r3
 80081bc:	fa1f fb85 	uxth.w	fp, r5
 80081c0:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80081c2:	2209      	movs	r2, #9
 80081c4:	2100      	movs	r1, #0
 80081c6:	4620      	mov	r0, r4
 80081c8:	f002 fb0e 	bl	800a7e8 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 80081cc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80081d0:	d066      	beq.n	80082a0 <lv_obj_refr_pos+0x1a8>
    if(align == LV_ALIGN_TOP_LEFT) {
 80081d2:	2801      	cmp	r0, #1
 80081d4:	d06c      	beq.n	80082b0 <lv_obj_refr_pos+0x1b8>
        switch(align) {
 80081d6:	3802      	subs	r0, #2
 80081d8:	2807      	cmp	r0, #7
 80081da:	d87a      	bhi.n	80082d2 <lv_obj_refr_pos+0x1da>
 80081dc:	e8df f000 	tbb	[pc, r0]
 80081e0:	9a937f6e 	.word	0x9a937f6e
 80081e4:	cdba87ac 	.word	0xcdba87ac
        lv_obj_move_to(obj, x, y);
 80081e8:	462a      	mov	r2, r5
 80081ea:	4639      	mov	r1, r7
 80081ec:	4620      	mov	r0, r4
 80081ee:	f7ff fee4 	bl	8007fba <lv_obj_move_to>
        return;
 80081f2:	e788      	b.n	8008106 <lv_obj_refr_pos+0xe>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80081f4:	f427 43c0 	bic.w	r3, r7, #24576	; 0x6000
 80081f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081fc:	dca8      	bgt.n	8008150 <lv_obj_refr_pos+0x58>
 80081fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008202:	bfc8      	it	gt
 8008204:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8008208:	9a00      	ldr	r2, [sp, #0]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	4a66      	ldr	r2, [pc, #408]	; (80083a8 <lv_obj_refr_pos+0x2b0>)
 8008210:	fb82 1203 	smull	r1, r2, r2, r3
 8008214:	17df      	asrs	r7, r3, #31
 8008216:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 800821a:	b23f      	sxth	r7, r7
 800821c:	e798      	b.n	8008150 <lv_obj_refr_pos+0x58>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 800821e:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
 8008222:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008226:	dc98      	bgt.n	800815a <lv_obj_refr_pos+0x62>
 8008228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800822c:	bfc8      	it	gt
 800822e:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	4a5b      	ldr	r2, [pc, #364]	; (80083a8 <lv_obj_refr_pos+0x2b0>)
 800823a:	fb82 1203 	smull	r1, r2, r2, r3
 800823e:	17dd      	asrs	r5, r3, #31
 8008240:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 8008244:	b22d      	sxth	r5, r5
 8008246:	e788      	b.n	800815a <lv_obj_refr_pos+0x62>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8008248:	f42b 42c0 	bic.w	r2, fp, #24576	; 0x6000
 800824c:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008250:	dcab      	bgt.n	80081aa <lv_obj_refr_pos+0xb2>
 8008252:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008256:	bfc8      	it	gt
 8008258:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800825c:	9903      	ldr	r1, [sp, #12]
 800825e:	fb01 f202 	mul.w	r2, r1, r2
 8008262:	4951      	ldr	r1, [pc, #324]	; (80083a8 <lv_obj_refr_pos+0x2b0>)
 8008264:	fb81 6102 	smull	r6, r1, r1, r2
 8008268:	ea4f 7be2 	mov.w	fp, r2, asr #31
 800826c:	ebcb 1b61 	rsb	fp, fp, r1, asr #5
 8008270:	fa0f fb8b 	sxth.w	fp, fp
 8008274:	e799      	b.n	80081aa <lv_obj_refr_pos+0xb2>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8008276:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800827a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800827e:	dc99      	bgt.n	80081b4 <lv_obj_refr_pos+0xbc>
 8008280:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008284:	bfc8      	it	gt
 8008286:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800828a:	9b02      	ldr	r3, [sp, #8]
 800828c:	fb03 f202 	mul.w	r2, r3, r2
 8008290:	4945      	ldr	r1, [pc, #276]	; (80083a8 <lv_obj_refr_pos+0x2b0>)
 8008292:	fb81 3102 	smull	r3, r1, r1, r2
 8008296:	17d3      	asrs	r3, r2, #31
 8008298:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 800829c:	b21b      	sxth	r3, r3
 800829e:	e789      	b.n	80081b4 <lv_obj_refr_pos+0xbc>
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80082a0:	2216      	movs	r2, #22
 80082a2:	2100      	movs	r1, #0
 80082a4:	4640      	mov	r0, r8
 80082a6:	f002 fa9f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80082aa:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80082ac:	2801      	cmp	r0, #1
 80082ae:	d016      	beq.n	80082de <lv_obj_refr_pos+0x1e6>
        lv_obj_move_to(obj, x, y);
 80082b0:	462a      	mov	r2, r5
 80082b2:	4639      	mov	r1, r7
 80082b4:	4620      	mov	r0, r4
 80082b6:	f7ff fe80 	bl	8007fba <lv_obj_move_to>
 80082ba:	e724      	b.n	8008106 <lv_obj_refr_pos+0xe>
                x += pw / 2 - w / 2;
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
 80082c8:	107f      	asrs	r7, r7, #1
 80082ca:	ebc7 0760 	rsb	r7, r7, r0, asr #1
 80082ce:	4437      	add	r7, r6
 80082d0:	b23f      	sxth	r7, r7
        lv_obj_move_to(obj, x, y);
 80082d2:	462a      	mov	r2, r5
 80082d4:	4639      	mov	r1, r7
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7ff fe6f 	bl	8007fba <lv_obj_move_to>
 80082dc:	e713      	b.n	8008106 <lv_obj_refr_pos+0xe>
                x += pw - w;
 80082de:	9b04      	ldr	r3, [sp, #16]
 80082e0:	9a05      	ldr	r2, [sp, #20]
 80082e2:	1a9f      	subs	r7, r3, r2
 80082e4:	9b00      	ldr	r3, [sp, #0]
 80082e6:	441f      	add	r7, r3
 80082e8:	4437      	add	r7, r6
 80082ea:	b23f      	sxth	r7, r7
                break;
 80082ec:	e7f1      	b.n	80082d2 <lv_obj_refr_pos+0x1da>
                y += ph / 2 - h / 2;
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80082f4:	9b02      	ldr	r3, [sp, #8]
 80082f6:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 80082fa:	106d      	asrs	r5, r5, #1
 80082fc:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 8008300:	445d      	add	r5, fp
 8008302:	b22d      	sxth	r5, r5
                break;
 8008304:	e7e5      	b.n	80082d2 <lv_obj_refr_pos+0x1da>
                y += ph - h;
 8008306:	ebaa 0509 	sub.w	r5, sl, r9
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	441d      	add	r5, r3
 800830e:	445d      	add	r5, fp
 8008310:	b22d      	sxth	r5, r5
                break;
 8008312:	e7de      	b.n	80082d2 <lv_obj_refr_pos+0x1da>
                x += pw / 2 - w / 2;
 8008314:	9b00      	ldr	r3, [sp, #0]
 8008316:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
 8008320:	107f      	asrs	r7, r7, #1
 8008322:	ebc7 0760 	rsb	r7, r7, r0, asr #1
 8008326:	4437      	add	r7, r6
 8008328:	b23f      	sxth	r7, r7
                y += ph - h;
 800832a:	ebaa 0509 	sub.w	r5, sl, r9
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	441d      	add	r5, r3
 8008332:	445d      	add	r5, fp
 8008334:	b22d      	sxth	r5, r5
                break;
 8008336:	e7cc      	b.n	80082d2 <lv_obj_refr_pos+0x1da>
                x += pw - w;
 8008338:	9b04      	ldr	r3, [sp, #16]
 800833a:	9a05      	ldr	r2, [sp, #20]
 800833c:	1a9f      	subs	r7, r3, r2
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	441f      	add	r7, r3
 8008342:	4437      	add	r7, r6
 8008344:	b23f      	sxth	r7, r7
                y += ph - h;
 8008346:	ebaa 0509 	sub.w	r5, sl, r9
 800834a:	9b01      	ldr	r3, [sp, #4]
 800834c:	441d      	add	r5, r3
 800834e:	445d      	add	r5, fp
 8008350:	b22d      	sxth	r5, r5
                break;
 8008352:	e7be      	b.n	80082d2 <lv_obj_refr_pos+0x1da>
                x += pw - w;
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	9a05      	ldr	r2, [sp, #20]
 8008358:	1a9f      	subs	r7, r3, r2
 800835a:	9b00      	ldr	r3, [sp, #0]
 800835c:	441f      	add	r7, r3
 800835e:	4437      	add	r7, r6
 8008360:	b23f      	sxth	r7, r7
                y += ph / 2 - h / 2;
 8008362:	9b01      	ldr	r3, [sp, #4]
 8008364:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 800836e:	106d      	asrs	r5, r5, #1
 8008370:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 8008374:	445d      	add	r5, fp
 8008376:	b22d      	sxth	r5, r5
                break;
 8008378:	e7ab      	b.n	80082d2 <lv_obj_refr_pos+0x1da>
                x += pw / 2 - w / 2;
 800837a:	9b00      	ldr	r3, [sp, #0]
 800837c:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
 8008386:	107f      	asrs	r7, r7, #1
 8008388:	ebc7 0760 	rsb	r7, r7, r0, asr #1
 800838c:	4437      	add	r7, r6
 800838e:	b23f      	sxth	r7, r7
                y += ph / 2 - h / 2;
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8008396:	9b02      	ldr	r3, [sp, #8]
 8008398:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 800839c:	106d      	asrs	r5, r5, #1
 800839e:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 80083a2:	445d      	add	r5, fp
 80083a4:	b22d      	sxth	r5, r5
                break;
 80083a6:	e794      	b.n	80082d2 <lv_obj_refr_pos+0x1da>
 80083a8:	51eb851f 	.word	0x51eb851f

080083ac <lv_obj_is_visible>:
{
 80083ac:	b510      	push	{r4, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 80083b2:	f7ff f996 	bl	80076e2 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 80083b6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    dest->x2 = src->x2;
 80083ba:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 80083be:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
    obj_coords.x1 -= ext_size;
 80083c2:	b283      	uxth	r3, r0
 80083c4:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 80083c8:	ebac 0c03 	sub.w	ip, ip, r3
 80083cc:	f8ad c000 	strh.w	ip, [sp]
    obj_coords.y1 -= ext_size;
 80083d0:	1ac9      	subs	r1, r1, r3
 80083d2:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.x2 += ext_size;
 80083d6:	441a      	add	r2, r3
 80083d8:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 80083dc:	4473      	add	r3, lr
 80083de:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 80083e2:	4669      	mov	r1, sp
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff fd18 	bl	8007e1a <lv_obj_area_is_visible>
}
 80083ea:	b002      	add	sp, #8
 80083ec:	bd10      	pop	{r4, pc}

080083ee <lv_obj_set_ext_click_area>:
{
 80083ee:	b538      	push	{r3, r4, r5, lr}
 80083f0:	4605      	mov	r5, r0
 80083f2:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 80083f4:	f7fe fd14 	bl	8006e20 <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 80083f8:	68ab      	ldr	r3, [r5, #8]
 80083fa:	829c      	strh	r4, [r3, #20]
}
 80083fc:	bd38      	pop	{r3, r4, r5, pc}

080083fe <lv_obj_get_click_area>:
{
 80083fe:	b510      	push	{r4, lr}
    dest->x1 = src->x1;
 8008400:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8008404:	f8a1 e000 	strh.w	lr, [r1]
    dest->y1 = src->y1;
 8008408:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
 800840c:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 800840e:	f9b0 c018 	ldrsh.w	ip, [r0, #24]
 8008412:	f8a1 c004 	strh.w	ip, [r1, #4]
    dest->y2 = src->y2;
 8008416:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 800841a:	80cb      	strh	r3, [r1, #6]
    if(obj->spec_attr) {
 800841c:	6884      	ldr	r4, [r0, #8]
 800841e:	b18c      	cbz	r4, 8008444 <lv_obj_get_click_area+0x46>
        area->x1 -= obj->spec_attr->ext_click_pad;
 8008420:	8aa4      	ldrh	r4, [r4, #20]
 8008422:	ebae 0e04 	sub.w	lr, lr, r4
 8008426:	f8a1 e000 	strh.w	lr, [r1]
        area->x2 += obj->spec_attr->ext_click_pad;
 800842a:	6884      	ldr	r4, [r0, #8]
 800842c:	8aa4      	ldrh	r4, [r4, #20]
 800842e:	44a4      	add	ip, r4
 8008430:	f8a1 c004 	strh.w	ip, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 8008434:	6884      	ldr	r4, [r0, #8]
 8008436:	8aa4      	ldrh	r4, [r4, #20]
 8008438:	1b12      	subs	r2, r2, r4
 800843a:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 800843c:	6882      	ldr	r2, [r0, #8]
 800843e:	8a92      	ldrh	r2, [r2, #20]
 8008440:	4413      	add	r3, r2
 8008442:	80cb      	strh	r3, [r1, #6]
}
 8008444:	bd10      	pop	{r4, pc}

08008446 <lv_obj_hit_test>:
{
 8008446:	b570      	push	{r4, r5, r6, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	4606      	mov	r6, r0
 800844c:	460c      	mov	r4, r1
    if(!lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) return false;
 800844e:	2102      	movs	r1, #2
 8008450:	f7fe fabe 	bl	80069d0 <lv_obj_has_flag>
 8008454:	4605      	mov	r5, r0
 8008456:	b910      	cbnz	r0, 800845e <lv_obj_hit_test+0x18>
}
 8008458:	4628      	mov	r0, r5
 800845a:	b004      	add	sp, #16
 800845c:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_state(obj, LV_STATE_DISABLED)) return false;
 800845e:	2180      	movs	r1, #128	; 0x80
 8008460:	4630      	mov	r0, r6
 8008462:	f7fe fac4 	bl	80069ee <lv_obj_has_state>
 8008466:	b108      	cbz	r0, 800846c <lv_obj_hit_test+0x26>
 8008468:	2500      	movs	r5, #0
 800846a:	e7f5      	b.n	8008458 <lv_obj_hit_test+0x12>
    lv_obj_get_click_area(obj, &a);
 800846c:	a902      	add	r1, sp, #8
 800846e:	4630      	mov	r0, r6
 8008470:	f7ff ffc5 	bl	80083fe <lv_obj_get_click_area>
    bool res = _lv_area_is_point_on(&a, point, 0);
 8008474:	2200      	movs	r2, #0
 8008476:	4621      	mov	r1, r4
 8008478:	a802      	add	r0, sp, #8
 800847a:	f018 fb2d 	bl	8020ad8 <_lv_area_is_point_on>
    if(res == false) return false;
 800847e:	4605      	mov	r5, r0
 8008480:	2800      	cmp	r0, #0
 8008482:	d0e9      	beq.n	8008458 <lv_obj_hit_test+0x12>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 8008484:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008488:	4630      	mov	r0, r6
 800848a:	f7fe faa1 	bl	80069d0 <lv_obj_has_flag>
 800848e:	2800      	cmp	r0, #0
 8008490:	d0e2      	beq.n	8008458 <lv_obj_hit_test+0x12>
        hit_info.point = point;
 8008492:	9400      	str	r4, [sp, #0]
        hit_info.res = true;
 8008494:	2301      	movs	r3, #1
 8008496:	f88d 3004 	strb.w	r3, [sp, #4]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 800849a:	466a      	mov	r2, sp
 800849c:	2111      	movs	r1, #17
 800849e:	4630      	mov	r0, r6
 80084a0:	f7fb fc2e 	bl	8003d00 <lv_event_send>
        return hit_info.res;
 80084a4:	f89d 5004 	ldrb.w	r5, [sp, #4]
 80084a8:	e7d6      	b.n	8008458 <lv_obj_hit_test+0x12>
	...

080084ac <lv_clamp_width>:
{
 80084ac:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80084ae:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 80084b2:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 80084b6:	d00c      	beq.n	80084d2 <lv_clamp_width+0x26>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80084b8:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 80084bc:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 80084c0:	d01c      	beq.n	80084fc <lv_clamp_width+0x50>
    return LV_CLAMP(min_width, width, max_width);
 80084c2:	4290      	cmp	r0, r2
 80084c4:	bfa8      	it	ge
 80084c6:	4610      	movge	r0, r2
}
 80084c8:	4288      	cmp	r0, r1
 80084ca:	bfb8      	it	lt
 80084cc:	4608      	movlt	r0, r1
 80084ce:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 80084d2:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 80084d6:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 80084da:	dced      	bgt.n	80084b8 <lv_clamp_width+0xc>
 80084dc:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 80084e0:	bfc8      	it	gt
 80084e2:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 80084e6:	fb0c fc03 	mul.w	ip, ip, r3
 80084ea:	490e      	ldr	r1, [pc, #56]	; (8008524 <lv_clamp_width+0x78>)
 80084ec:	fb81 1e0c 	smull	r1, lr, r1, ip
 80084f0:	ea4f 71ec 	mov.w	r1, ip, asr #31
 80084f4:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 80084f8:	b209      	sxth	r1, r1
 80084fa:	e7dd      	b.n	80084b8 <lv_clamp_width+0xc>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 80084fc:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 8008500:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8008504:	dcdd      	bgt.n	80084c2 <lv_clamp_width+0x16>
 8008506:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 800850a:	bfc8      	it	gt
 800850c:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 8008510:	fb0c f303 	mul.w	r3, ip, r3
 8008514:	4a03      	ldr	r2, [pc, #12]	; (8008524 <lv_clamp_width+0x78>)
 8008516:	fb82 c203 	smull	ip, r2, r2, r3
 800851a:	17db      	asrs	r3, r3, #31
 800851c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8008520:	b21a      	sxth	r2, r3
 8008522:	e7ce      	b.n	80084c2 <lv_clamp_width+0x16>
 8008524:	51eb851f 	.word	0x51eb851f

08008528 <lv_clamp_height>:
{
 8008528:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 800852a:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 800852e:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 8008532:	d00c      	beq.n	800854e <lv_clamp_height+0x26>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8008534:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 8008538:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 800853c:	d01c      	beq.n	8008578 <lv_clamp_height+0x50>
    return LV_CLAMP(min_height, height, max_height);
 800853e:	4290      	cmp	r0, r2
 8008540:	bfa8      	it	ge
 8008542:	4610      	movge	r0, r2
}
 8008544:	4288      	cmp	r0, r1
 8008546:	bfb8      	it	lt
 8008548:	4608      	movlt	r0, r1
 800854a:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 800854e:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 8008552:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8008556:	dced      	bgt.n	8008534 <lv_clamp_height+0xc>
 8008558:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 800855c:	bfc8      	it	gt
 800855e:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 8008562:	fb0c fc03 	mul.w	ip, ip, r3
 8008566:	490e      	ldr	r1, [pc, #56]	; (80085a0 <lv_clamp_height+0x78>)
 8008568:	fb81 1e0c 	smull	r1, lr, r1, ip
 800856c:	ea4f 71ec 	mov.w	r1, ip, asr #31
 8008570:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 8008574:	b209      	sxth	r1, r1
 8008576:	e7dd      	b.n	8008534 <lv_clamp_height+0xc>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8008578:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 800857c:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8008580:	dcdd      	bgt.n	800853e <lv_clamp_height+0x16>
 8008582:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8008586:	bfc8      	it	gt
 8008588:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 800858c:	fb0c f303 	mul.w	r3, ip, r3
 8008590:	4a03      	ldr	r2, [pc, #12]	; (80085a0 <lv_clamp_height+0x78>)
 8008592:	fb82 c203 	smull	ip, r2, r2, r3
 8008596:	17db      	asrs	r3, r3, #31
 8008598:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800859c:	b21a      	sxth	r2, r3
 800859e:	e7ce      	b.n	800853e <lv_clamp_height+0x16>
 80085a0:	51eb851f 	.word	0x51eb851f

080085a4 <lv_obj_refr_size>:
{
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	b08d      	sub	sp, #52	; 0x34
    if(obj->w_layout && obj->h_layout) return false;
 80085aa:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80085ae:	f003 0306 	and.w	r3, r3, #6
 80085b2:	2b06      	cmp	r3, #6
 80085b4:	f000 8336 	beq.w	8008c24 <lv_obj_refr_size+0x680>
 80085b8:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80085ba:	f003 f857 	bl	800b66c <lv_obj_get_parent>
    if(parent == NULL) return false;
 80085be:	4607      	mov	r7, r0
 80085c0:	2800      	cmp	r0, #0
 80085c2:	f000 8331 	beq.w	8008c28 <lv_obj_refr_size+0x684>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fef2 	bl	80093b0 <lv_obj_get_scroll_left>
 80085cc:	9000      	str	r0, [sp, #0]
    if(obj->w_layout) {
 80085ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80085d2:	f013 0f04 	tst.w	r3, #4
 80085d6:	d024      	beq.n	8008622 <lv_obj_refr_size+0x7e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80085d8:	8b25      	ldrh	r5, [r4, #24]
 80085da:	3501      	adds	r5, #1
 80085dc:	8aa0      	ldrh	r0, [r4, #20]
 80085de:	1a2d      	subs	r5, r5, r0
 80085e0:	b22d      	sxth	r5, r5
    bool w_is_content = false;
 80085e2:	2600      	movs	r6, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fe71 	bl	80092cc <lv_obj_get_scroll_top>
 80085ea:	4680      	mov	r8, r0
    if(obj->h_layout) {
 80085ec:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80085f0:	f013 0f02 	tst.w	r3, #2
 80085f4:	f000 818e 	beq.w	8008914 <lv_obj_refr_size+0x370>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80085f8:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80085fc:	f109 0901 	add.w	r9, r9, #1
 8008600:	8ae0      	ldrh	r0, [r4, #22]
 8008602:	eba9 0900 	sub.w	r9, r9, r0
 8008606:	fa0f f989 	sxth.w	r9, r9
    if(w_is_content || h_is_content) {
 800860a:	2e00      	cmp	r6, #0
 800860c:	f040 827e 	bne.w	8008b0c <lv_obj_refr_size+0x568>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008610:	8b23      	ldrh	r3, [r4, #24]
 8008612:	3301      	adds	r3, #1
 8008614:	8aa2      	ldrh	r2, [r4, #20]
 8008616:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8008618:	b21b      	sxth	r3, r3
 800861a:	429d      	cmp	r5, r3
 800861c:	f040 828a 	bne.w	8008b34 <lv_obj_refr_size+0x590>
 8008620:	e2cc      	b.n	8008bbc <lv_obj_refr_size+0x618>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008622:	2201      	movs	r2, #1
 8008624:	2100      	movs	r1, #0
 8008626:	4620      	mov	r0, r4
 8008628:	f002 f8de 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800862c:	b205      	sxth	r5, r0
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 800862e:	f242 76d1 	movw	r6, #10193	; 0x27d1
 8008632:	42b5      	cmp	r5, r6
 8008634:	bf14      	ite	ne
 8008636:	2600      	movne	r6, #0
 8008638:	2601      	moveq	r6, #1
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 800863a:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 800863e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008642:	d044      	beq.n	80086ce <lv_obj_refr_size+0x12a>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8008644:	4638      	mov	r0, r7
 8008646:	f7ff fa5c 	bl	8007b02 <lv_obj_get_content_width>
 800864a:	9001      	str	r0, [sp, #4]
        if(w_is_content) {
 800864c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008650:	429d      	cmp	r5, r3
 8008652:	d15f      	bne.n	8008714 <lv_obj_refr_size+0x170>
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8008654:	2200      	movs	r2, #0
 8008656:	4611      	mov	r1, r2
 8008658:	4620      	mov	r0, r4
 800865a:	f001 f905 	bl	8009868 <lv_obj_scroll_to_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800865e:	2232      	movs	r2, #50	; 0x32
 8008660:	2100      	movs	r1, #0
 8008662:	4620      	mov	r0, r4
 8008664:	f002 f8c0 	bl	800a7e8 <lv_obj_get_style_prop>
 8008668:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800866a:	2213      	movs	r2, #19
 800866c:	2100      	movs	r1, #0
 800866e:	4620      	mov	r0, r4
 8008670:	f002 f8ba 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8008674:	b2ad      	uxth	r5, r5
 8008676:	4428      	add	r0, r5
 8008678:	fa1f f880 	uxth.w	r8, r0
 800867c:	f8cd 800c 	str.w	r8, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008680:	2212      	movs	r2, #18
 8008682:	2100      	movs	r1, #0
 8008684:	4620      	mov	r0, r4
 8008686:	f002 f8af 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800868a:	4405      	add	r5, r0
 800868c:	b2ad      	uxth	r5, r5
 800868e:	9502      	str	r5, [sp, #8]
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8008690:	4620      	mov	r0, r4
 8008692:	f7ff faa3 	bl	8007bdc <lv_obj_get_self_width>
 8008696:	4643      	mov	r3, r8
 8008698:	195d      	adds	r5, r3, r5
 800869a:	4405      	add	r5, r0
 800869c:	b22d      	sxth	r5, r5
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800869e:	4620      	mov	r0, r4
 80086a0:	f002 fffd 	bl	800b69e <lv_obj_get_child_cnt>
 80086a4:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80086a6:	2216      	movs	r2, #22
 80086a8:	2100      	movs	r1, #0
 80086aa:	4620      	mov	r0, r4
 80086ac:	f002 f89c 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80086b0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80086b2:	2801      	cmp	r0, #1
 80086b4:	d042      	beq.n	800873c <lv_obj_refr_size+0x198>
        for(i = 0; i < child_cnt; i++) {
 80086b6:	f1bb 0f00 	cmp.w	fp, #0
 80086ba:	d02b      	beq.n	8008714 <lv_obj_refr_size+0x170>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80086bc:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80086c0:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 80086c2:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 80089b0 <lv_obj_refr_size+0x40c>
        for(i = 0; i < child_cnt; i++) {
 80086c6:	f04f 0900 	mov.w	r9, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80086ca:	46a2      	mov	sl, r4
 80086cc:	e0b9      	b.n	8008842 <lv_obj_refr_size+0x29e>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 80086ce:	f425 48c0 	bic.w	r8, r5, #24576	; 0x6000
 80086d2:	f5b8 6ffa 	cmp.w	r8, #2000	; 0x7d0
 80086d6:	dcb5      	bgt.n	8008644 <lv_obj_refr_size+0xa0>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 80086d8:	4638      	mov	r0, r7
 80086da:	f7ff fa12 	bl	8007b02 <lv_obj_get_content_width>
 80086de:	9001      	str	r0, [sp, #4]
        if(w_is_content) {
 80086e0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80086e4:	429d      	cmp	r5, r3
 80086e6:	d0b5      	beq.n	8008654 <lv_obj_refr_size+0xb0>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80086e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086ec:	f013 0f04 	tst.w	r3, #4
 80086f0:	f000 80eb 	beq.w	80088ca <lv_obj_refr_size+0x326>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 80086f4:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 80086f8:	bfc8      	it	gt
 80086fa:	f5c8 787a 	rsbgt	r8, r8, #1000	; 0x3e8
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	fb08 f803 	mul.w	r8, r8, r3
 8008704:	4bab      	ldr	r3, [pc, #684]	; (80089b4 <lv_obj_refr_size+0x410>)
 8008706:	fb83 2308 	smull	r2, r3, r3, r8
 800870a:	ea4f 75e8 	mov.w	r5, r8, asr #31
 800870e:	ebc5 1563 	rsb	r5, r5, r3, asr #5
 8008712:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8008714:	2202      	movs	r2, #2
 8008716:	2100      	movs	r1, #0
 8008718:	4620      	mov	r0, r4
 800871a:	f002 f865 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800871e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8008722:	2203      	movs	r2, #3
 8008724:	2100      	movs	r1, #0
 8008726:	4620      	mov	r0, r4
 8008728:	f002 f85e 	bl	800a7e8 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	b202      	sxth	r2, r0
 8008730:	4641      	mov	r1, r8
 8008732:	4628      	mov	r0, r5
 8008734:	f7ff feba 	bl	80084ac <lv_clamp_width>
 8008738:	4605      	mov	r5, r0
 800873a:	e753      	b.n	80085e4 <lv_obj_refr_size+0x40>
        for(i = 0; i < child_cnt; i++) {
 800873c:	f1bb 0f00 	cmp.w	fp, #0
 8008740:	d0e8      	beq.n	8008714 <lv_obj_refr_size+0x170>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8008742:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008746:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 8008748:	f8df a264 	ldr.w	sl, [pc, #612]	; 80089b0 <lv_obj_refr_size+0x40c>
        for(i = 0; i < child_cnt; i++) {
 800874c:	f04f 0800 	mov.w	r8, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008750:	46a1      	mov	r9, r4
 8008752:	e01d      	b.n	8008790 <lv_obj_refr_size+0x1ec>
 8008754:	2209      	movs	r2, #9
 8008756:	2100      	movs	r1, #0
 8008758:	4620      	mov	r0, r4
 800875a:	f002 f845 	bl	800a7e8 <lv_obj_get_style_prop>
                switch(align) {
 800875e:	b2c3      	uxtb	r3, r0
 8008760:	2b08      	cmp	r3, #8
 8008762:	d831      	bhi.n	80087c8 <lv_obj_refr_size+0x224>
 8008764:	e8df f003 	tbb	[pc, r3]
 8008768:	05303005 	.word	0x05303005
 800876c:	30053030 	.word	0x30053030
 8008770:	05          	.byte	0x05
 8008771:	00          	.byte	0x00
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8008772:	f9b9 3018 	ldrsh.w	r3, [r9, #24]
 8008776:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800877a:	1a9b      	subs	r3, r3, r2
 800877c:	3301      	adds	r3, #1
 800877e:	459a      	cmp	sl, r3
 8008780:	bfb8      	it	lt
 8008782:	469a      	movlt	sl, r3
 8008784:	fa0f fa8a 	sxth.w	sl, sl
        for(i = 0; i < child_cnt; i++) {
 8008788:	f108 0801 	add.w	r8, r8, #1
 800878c:	45c3      	cmp	fp, r8
 800878e:	d033      	beq.n	80087f8 <lv_obj_refr_size+0x254>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008790:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800879a:	4987      	ldr	r1, [pc, #540]	; (80089b8 <lv_obj_refr_size+0x414>)
 800879c:	4620      	mov	r0, r4
 800879e:	f7fe f91e 	bl	80069de <lv_obj_has_flag_any>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d1f0      	bne.n	8008788 <lv_obj_refr_size+0x1e4>
            if(!lv_obj_is_layout_positioned(child)) {
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff f8d8 	bl	800795c <lv_obj_is_layout_positioned>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0d1      	beq.n	8008754 <lv_obj_refr_size+0x1b0>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 80087b0:	f9b9 3018 	ldrsh.w	r3, [r9, #24]
 80087b4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	3301      	adds	r3, #1
 80087bc:	459a      	cmp	sl, r3
 80087be:	bfb8      	it	lt
 80087c0:	469a      	movlt	sl, r3
 80087c2:	fa0f fa8a 	sxth.w	sl, sl
 80087c6:	e7df      	b.n	8008788 <lv_obj_refr_size+0x1e4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80087c8:	2207      	movs	r2, #7
 80087ca:	2100      	movs	r1, #0
 80087cc:	4620      	mov	r0, r4
 80087ce:	f002 f80b 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80087d2:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d1d7      	bne.n	8008788 <lv_obj_refr_size+0x1e4>
 80087d8:	8b23      	ldrh	r3, [r4, #24]
 80087da:	3301      	adds	r3, #1
 80087dc:	8aa2      	ldrh	r2, [r4, #20]
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 80087e2:	b21b      	sxth	r3, r3
 80087e4:	9904      	ldr	r1, [sp, #16]
 80087e6:	440b      	add	r3, r1
 80087e8:	459a      	cmp	sl, r3
 80087ea:	dccd      	bgt.n	8008788 <lv_obj_refr_size+0x1e4>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	eb03 0a02 	add.w	sl, r3, r2
 80087f2:	fa0f fa8a 	sxth.w	sl, sl
 80087f6:	e7c7      	b.n	8008788 <lv_obj_refr_size+0x1e4>
        if(child_res != LV_COORD_MIN) {
 80087f8:	464c      	mov	r4, r9
 80087fa:	4b6d      	ldr	r3, [pc, #436]	; (80089b0 <lv_obj_refr_size+0x40c>)
 80087fc:	459a      	cmp	sl, r3
 80087fe:	d089      	beq.n	8008714 <lv_obj_refr_size+0x170>
            child_res += pad_left;
 8008800:	9b02      	ldr	r3, [sp, #8]
 8008802:	4453      	add	r3, sl
 8008804:	b21b      	sxth	r3, r3
 8008806:	e058      	b.n	80088ba <lv_obj_refr_size+0x316>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008808:	2209      	movs	r2, #9
 800880a:	2100      	movs	r1, #0
 800880c:	4620      	mov	r0, r4
 800880e:	f001 ffeb 	bl	800a7e8 <lv_obj_get_style_prop>
                switch(align) {
 8008812:	b2c0      	uxtb	r0, r0
 8008814:	2807      	cmp	r0, #7
 8008816:	d830      	bhi.n	800887a <lv_obj_refr_size+0x2d6>
 8008818:	2301      	movs	r3, #1
 800881a:	fa03 f000 	lsl.w	r0, r3, r0
 800881e:	f010 0f93 	tst.w	r0, #147	; 0x93
 8008822:	d02a      	beq.n	800887a <lv_obj_refr_size+0x2d6>
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8008824:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8008828:	f9ba 2014 	ldrsh.w	r2, [sl, #20]
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	3301      	adds	r3, #1
 8008830:	4598      	cmp	r8, r3
 8008832:	bfb8      	it	lt
 8008834:	4698      	movlt	r8, r3
 8008836:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < child_cnt; i++) {
 800883a:	f109 0901 	add.w	r9, r9, #1
 800883e:	45cb      	cmp	fp, r9
 8008840:	d033      	beq.n	80088aa <lv_obj_refr_size+0x306>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008842:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f853 4029 	ldr.w	r4, [r3, r9, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800884c:	495a      	ldr	r1, [pc, #360]	; (80089b8 <lv_obj_refr_size+0x414>)
 800884e:	4620      	mov	r0, r4
 8008850:	f7fe f8c5 	bl	80069de <lv_obj_has_flag_any>
 8008854:	2800      	cmp	r0, #0
 8008856:	d1f0      	bne.n	800883a <lv_obj_refr_size+0x296>
            if(!lv_obj_is_layout_positioned(child)) {
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff f87f 	bl	800795c <lv_obj_is_layout_positioned>
 800885e:	2800      	cmp	r0, #0
 8008860:	d0d2      	beq.n	8008808 <lv_obj_refr_size+0x264>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8008862:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8008866:	f9ba 2014 	ldrsh.w	r2, [sl, #20]
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	3301      	adds	r3, #1
 800886e:	4598      	cmp	r8, r3
 8008870:	bfb8      	it	lt
 8008872:	4698      	movlt	r8, r3
 8008874:	fa0f f888 	sxth.w	r8, r8
 8008878:	e7df      	b.n	800883a <lv_obj_refr_size+0x296>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 800887a:	2208      	movs	r2, #8
 800887c:	2100      	movs	r1, #0
 800887e:	4620      	mov	r0, r4
 8008880:	f001 ffb2 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008884:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8008886:	2800      	cmp	r0, #0
 8008888:	d1d7      	bne.n	800883a <lv_obj_refr_size+0x296>
 800888a:	8b23      	ldrh	r3, [r4, #24]
 800888c:	3301      	adds	r3, #1
 800888e:	8aa2      	ldrh	r2, [r4, #20]
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8008894:	b21b      	sxth	r3, r3
 8008896:	9904      	ldr	r1, [sp, #16]
 8008898:	440b      	add	r3, r1
 800889a:	4598      	cmp	r8, r3
 800889c:	dccd      	bgt.n	800883a <lv_obj_refr_size+0x296>
 800889e:	9b02      	ldr	r3, [sp, #8]
 80088a0:	eb03 0802 	add.w	r8, r3, r2
 80088a4:	fa0f f888 	sxth.w	r8, r8
 80088a8:	e7c7      	b.n	800883a <lv_obj_refr_size+0x296>
        if(child_res != LV_COORD_MIN) {
 80088aa:	4654      	mov	r4, sl
 80088ac:	4b40      	ldr	r3, [pc, #256]	; (80089b0 <lv_obj_refr_size+0x40c>)
 80088ae:	4598      	cmp	r8, r3
 80088b0:	f43f af30 	beq.w	8008714 <lv_obj_refr_size+0x170>
            child_res += pad_right;
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	4443      	add	r3, r8
 80088b8:	b21b      	sxth	r3, r3
    if(child_res == LV_COORD_MIN) return self_w;
 80088ba:	4a3d      	ldr	r2, [pc, #244]	; (80089b0 <lv_obj_refr_size+0x40c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	f43f af29 	beq.w	8008714 <lv_obj_refr_size+0x170>
    else return LV_MAX(child_res, self_w);
 80088c2:	429d      	cmp	r5, r3
 80088c4:	bfb8      	it	lt
 80088c6:	461d      	movlt	r5, r3
 80088c8:	e724      	b.n	8008714 <lv_obj_refr_size+0x170>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80088ca:	2201      	movs	r2, #1
 80088cc:	2100      	movs	r1, #0
 80088ce:	4638      	mov	r0, r7
 80088d0:	f001 ff8a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80088d4:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 80088d6:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80088da:	4298      	cmp	r0, r3
 80088dc:	f47f af0a 	bne.w	80086f4 <lv_obj_refr_size+0x150>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80088e0:	2232      	movs	r2, #50	; 0x32
 80088e2:	2100      	movs	r1, #0
 80088e4:	4620      	mov	r0, r4
 80088e6:	f001 ff7f 	bl	800a7e8 <lv_obj_get_style_prop>
 80088ea:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80088ec:	2212      	movs	r2, #18
 80088ee:	2100      	movs	r1, #0
 80088f0:	4620      	mov	r0, r4
 80088f2:	f001 ff79 	bl	800a7e8 <lv_obj_get_style_prop>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 80088f6:	eb00 0508 	add.w	r5, r0, r8
 80088fa:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80088fc:	2213      	movs	r2, #19
 80088fe:	2100      	movs	r1, #0
 8008900:	4620      	mov	r0, r4
 8008902:	f001 ff71 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008906:	b203      	sxth	r3, r0
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8008908:	fa0f f888 	sxth.w	r8, r8
 800890c:	4443      	add	r3, r8
 800890e:	441d      	add	r5, r3
 8008910:	b22d      	sxth	r5, r5
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8008912:	e6ff      	b.n	8008714 <lv_obj_refr_size+0x170>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008914:	2204      	movs	r2, #4
 8008916:	2100      	movs	r1, #0
 8008918:	4620      	mov	r0, r4
 800891a:	f001 ff65 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800891e:	fa0f fb80 	sxth.w	fp, r0
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8008922:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8008926:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800892a:	d047      	beq.n	80089bc <lv_obj_refr_size+0x418>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 800892c:	4638      	mov	r0, r7
 800892e:	f7ff f905 	bl	8007b3c <lv_obj_get_content_height>
 8008932:	9001      	str	r0, [sp, #4]
        if(h_is_content) {
 8008934:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008938:	459b      	cmp	fp, r3
 800893a:	d163      	bne.n	8008a04 <lv_obj_refr_size+0x460>
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 800893c:	2200      	movs	r2, #0
 800893e:	4611      	mov	r1, r2
 8008940:	4620      	mov	r0, r4
 8008942:	f000 ffa5 	bl	8009890 <lv_obj_scroll_to_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008946:	2232      	movs	r2, #50	; 0x32
 8008948:	2100      	movs	r1, #0
 800894a:	4620      	mov	r0, r4
 800894c:	f001 ff4c 	bl	800a7e8 <lv_obj_get_style_prop>
 8008950:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008952:	2210      	movs	r2, #16
 8008954:	2100      	movs	r1, #0
 8008956:	4620      	mov	r0, r4
 8008958:	f001 ff46 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 800895c:	fa1f f989 	uxth.w	r9, r9
 8008960:	4448      	add	r0, r9
 8008962:	fa1f fa80 	uxth.w	sl, r0
 8008966:	f8cd a01c 	str.w	sl, [sp, #28]
 800896a:	b203      	sxth	r3, r0
 800896c:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800896e:	2211      	movs	r2, #17
 8008970:	2100      	movs	r1, #0
 8008972:	4620      	mov	r0, r4
 8008974:	f001 ff38 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8008978:	4481      	add	r9, r0
 800897a:	fa1f f989 	uxth.w	r9, r9
 800897e:	f8cd 9014 	str.w	r9, [sp, #20]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8008982:	4620      	mov	r0, r4
 8008984:	f7ff f93c 	bl	8007c00 <lv_obj_get_self_height>
 8008988:	4653      	mov	r3, sl
 800898a:	444b      	add	r3, r9
 800898c:	4403      	add	r3, r0
 800898e:	b21b      	sxth	r3, r3
 8008990:	9302      	str	r3, [sp, #8]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008992:	4620      	mov	r0, r4
 8008994:	f002 fe83 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8008998:	2800      	cmp	r0, #0
 800899a:	f000 809f 	beq.w	8008adc <lv_obj_refr_size+0x538>
    lv_coord_t child_res = LV_COORD_MIN;
 800899e:	f8df a010 	ldr.w	sl, [pc, #16]	; 80089b0 <lv_obj_refr_size+0x40c>
    for(i = 0; i < child_cnt; i++) {
 80089a2:	f04f 0900 	mov.w	r9, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80089a6:	9503      	str	r5, [sp, #12]
 80089a8:	9704      	str	r7, [sp, #16]
 80089aa:	4607      	mov	r7, r0
 80089ac:	e057      	b.n	8008a5e <lv_obj_refr_size+0x4ba>
 80089ae:	bf00      	nop
 80089b0:	ffffe001 	.word	0xffffe001
 80089b4:	51eb851f 	.word	0x51eb851f
 80089b8:	00040001 	.word	0x00040001
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 80089bc:	f42b 49c0 	bic.w	r9, fp, #24576	; 0x6000
 80089c0:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
 80089c4:	dcb2      	bgt.n	800892c <lv_obj_refr_size+0x388>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7ff f8b8 	bl	8007b3c <lv_obj_get_content_height>
 80089cc:	9001      	str	r0, [sp, #4]
        if(h_is_content) {
 80089ce:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80089d2:	459b      	cmp	fp, r3
 80089d4:	d0b2      	beq.n	800893c <lv_obj_refr_size+0x398>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80089d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089da:	f013 0f02 	tst.w	r3, #2
 80089de:	f000 80f1 	beq.w	8008bc4 <lv_obj_refr_size+0x620>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 80089e2:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 80089e6:	bfc8      	it	gt
 80089e8:	f5c9 797a 	rsbgt	r9, r9, #1000	; 0x3e8
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	fb09 f903 	mul.w	r9, r9, r3
 80089f2:	4b8f      	ldr	r3, [pc, #572]	; (8008c30 <lv_obj_refr_size+0x68c>)
 80089f4:	fb83 2309 	smull	r2, r3, r3, r9
 80089f8:	ea4f 7be9 	mov.w	fp, r9, asr #31
 80089fc:	ebcb 1b63 	rsb	fp, fp, r3, asr #5
 8008a00:	fa0f fb8b 	sxth.w	fp, fp
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8008a04:	2205      	movs	r2, #5
 8008a06:	2100      	movs	r1, #0
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f001 feed 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008a0e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8008a12:	2206      	movs	r2, #6
 8008a14:	2100      	movs	r1, #0
 8008a16:	4620      	mov	r0, r4
 8008a18:	f001 fee6 	bl	800a7e8 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	b202      	sxth	r2, r0
 8008a20:	4649      	mov	r1, r9
 8008a22:	4658      	mov	r0, fp
 8008a24:	f7ff fd80 	bl	8008528 <lv_clamp_height>
 8008a28:	4681      	mov	r9, r0
    if(w_is_content || h_is_content) {
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	d16e      	bne.n	8008b0c <lv_obj_refr_size+0x568>
 8008a2e:	e073      	b.n	8008b18 <lv_obj_refr_size+0x574>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008a30:	2209      	movs	r2, #9
 8008a32:	2100      	movs	r1, #0
 8008a34:	4628      	mov	r0, r5
 8008a36:	f001 fed7 	bl	800a7e8 <lv_obj_get_style_prop>
            switch(align) {
 8008a3a:	b2c0      	uxtb	r0, r0
 8008a3c:	2803      	cmp	r0, #3
 8008a3e:	d829      	bhi.n	8008a94 <lv_obj_refr_size+0x4f0>
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8008a40:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8008a44:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	459a      	cmp	sl, r3
 8008a4e:	bfb8      	it	lt
 8008a50:	469a      	movlt	sl, r3
 8008a52:	fa0f fa8a 	sxth.w	sl, sl
    for(i = 0; i < child_cnt; i++) {
 8008a56:	f109 0901 	add.w	r9, r9, #1
 8008a5a:	454f      	cmp	r7, r9
 8008a5c:	d031      	beq.n	8008ac2 <lv_obj_refr_size+0x51e>
        lv_obj_t * child = obj->spec_attr->children[i];
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008a66:	4973      	ldr	r1, [pc, #460]	; (8008c34 <lv_obj_refr_size+0x690>)
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f7fd ffb8 	bl	80069de <lv_obj_has_flag_any>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d1f1      	bne.n	8008a56 <lv_obj_refr_size+0x4b2>
        if(!lv_obj_is_layout_positioned(child)) {
 8008a72:	4628      	mov	r0, r5
 8008a74:	f7fe ff72 	bl	800795c <lv_obj_is_layout_positioned>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d0d9      	beq.n	8008a30 <lv_obj_refr_size+0x48c>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8008a7c:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8008a80:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	3301      	adds	r3, #1
 8008a88:	459a      	cmp	sl, r3
 8008a8a:	bfb8      	it	lt
 8008a8c:	469a      	movlt	sl, r3
 8008a8e:	fa0f fa8a 	sxth.w	sl, sl
 8008a92:	e7e0      	b.n	8008a56 <lv_obj_refr_size+0x4b2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8008a94:	2208      	movs	r2, #8
 8008a96:	2100      	movs	r1, #0
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f001 fea5 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008a9e:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d1d8      	bne.n	8008a56 <lv_obj_refr_size+0x4b2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008aa4:	8b6b      	ldrh	r3, [r5, #26]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	8aea      	ldrh	r2, [r5, #22]
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	b29a      	uxth	r2, r3
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8008aae:	b21b      	sxth	r3, r3
 8008ab0:	9906      	ldr	r1, [sp, #24]
 8008ab2:	440b      	add	r3, r1
 8008ab4:	459a      	cmp	sl, r3
 8008ab6:	dcce      	bgt.n	8008a56 <lv_obj_refr_size+0x4b2>
 8008ab8:	9b07      	ldr	r3, [sp, #28]
 8008aba:	441a      	add	r2, r3
 8008abc:	fa0f fa82 	sxth.w	sl, r2
 8008ac0:	e7c9      	b.n	8008a56 <lv_obj_refr_size+0x4b2>
    if(child_res != LV_COORD_MIN) {
 8008ac2:	9d03      	ldr	r5, [sp, #12]
 8008ac4:	9f04      	ldr	r7, [sp, #16]
 8008ac6:	4b5c      	ldr	r3, [pc, #368]	; (8008c38 <lv_obj_refr_size+0x694>)
 8008ac8:	459a      	cmp	sl, r3
 8008aca:	d007      	beq.n	8008adc <lv_obj_refr_size+0x538>
        child_res += pad_bottom;
 8008acc:	9b05      	ldr	r3, [sp, #20]
 8008ace:	4453      	add	r3, sl
        return LV_MAX(child_res, self_h);
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	9a02      	ldr	r2, [sp, #8]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	bfb8      	it	lt
 8008ad8:	461a      	movlt	r2, r3
 8008ada:	9202      	str	r2, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8008adc:	2205      	movs	r2, #5
 8008ade:	2100      	movs	r1, #0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f001 fe81 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008ae6:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8008aea:	2206      	movs	r2, #6
 8008aec:	2100      	movs	r1, #0
 8008aee:	4620      	mov	r0, r4
 8008af0:	f001 fe7a 	bl	800a7e8 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 8008af4:	9b01      	ldr	r3, [sp, #4]
 8008af6:	b202      	sxth	r2, r0
 8008af8:	4649      	mov	r1, r9
 8008afa:	9802      	ldr	r0, [sp, #8]
 8008afc:	f7ff fd14 	bl	8008528 <lv_clamp_height>
 8008b00:	4681      	mov	r9, r0
    if(w_is_content || h_is_content) {
 8008b02:	b91e      	cbnz	r6, 8008b0c <lv_obj_refr_size+0x568>
 8008b04:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008b08:	459b      	cmp	fp, r3
 8008b0a:	d105      	bne.n	8008b18 <lv_obj_refr_size+0x574>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4642      	mov	r2, r8
 8008b10:	9900      	ldr	r1, [sp, #0]
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 fed0 	bl	80098b8 <lv_obj_scroll_to>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008b18:	8b23      	ldrh	r3, [r4, #24]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	8aa2      	ldrh	r2, [r4, #20]
 8008b1e:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8008b20:	b21b      	sxth	r3, r3
 8008b22:	429d      	cmp	r5, r3
 8008b24:	d106      	bne.n	8008b34 <lv_obj_refr_size+0x590>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008b26:	8b63      	ldrh	r3, [r4, #26]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	8ae2      	ldrh	r2, [r4, #22]
 8008b2c:	1a9b      	subs	r3, r3, r2
 8008b2e:	b21b      	sxth	r3, r3
 8008b30:	454b      	cmp	r3, r9
 8008b32:	d07b      	beq.n	8008c2c <lv_obj_refr_size+0x688>
    lv_obj_invalidate(obj);
 8008b34:	4620      	mov	r0, r4
 8008b36:	f7ff fa1f 	bl	8007f78 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 8008b3a:	a90a      	add	r1, sp, #40	; 0x28
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f7fe ff76 	bl	8007a2e <lv_obj_get_coords>
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8008b42:	a908      	add	r1, sp, #32
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff f816 	bl	8007b76 <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	a908      	add	r1, sp, #32
 8008b4e:	a80a      	add	r0, sp, #40	; 0x28
 8008b50:	f018 f89f 	bl	8020c92 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8008b54:	4606      	mov	r6, r0
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d05b      	beq.n	8008c12 <lv_obj_refr_size+0x66e>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8008b5a:	8ae0      	ldrh	r0, [r4, #22]
 8008b5c:	3801      	subs	r0, #1
 8008b5e:	4481      	add	r9, r0
 8008b60:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008b64:	2216      	movs	r2, #22
 8008b66:	2100      	movs	r1, #0
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f001 fe3d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008b6e:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008b70:	2801      	cmp	r0, #1
 8008b72:	d052      	beq.n	8008c1a <lv_obj_refr_size+0x676>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8008b74:	8aa0      	ldrh	r0, [r4, #20]
 8008b76:	3801      	subs	r0, #1
 8008b78:	4405      	add	r5, r0
 8008b7a:	8325      	strh	r5, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8008b7c:	aa0a      	add	r2, sp, #40	; 0x28
 8008b7e:	2129      	movs	r1, #41	; 0x29
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7fb f8bd 	bl	8003d00 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8008b86:	4622      	mov	r2, r4
 8008b88:	2122      	movs	r1, #34	; 0x22
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f7fb f8b8 	bl	8003d00 <lv_event_send>
    lv_obj_invalidate(obj);
 8008b90:	4620      	mov	r0, r4
 8008b92:	f7ff f9f1 	bl	8007f78 <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 8008b96:	2100      	movs	r1, #0
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f001 fc8e 	bl	800a4ba <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	a908      	add	r1, sp, #32
 8008ba2:	f104 0014 	add.w	r0, r4, #20
 8008ba6:	f018 f874 	bl	8020c92 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 8008baa:	b906      	cbnz	r6, 8008bae <lv_obj_refr_size+0x60a>
 8008bac:	b110      	cbz	r0, 8008bb4 <lv_obj_refr_size+0x610>
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f001 fc60 	bl	800a474 <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f7fe fd9b 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
    return true;
 8008bba:	2601      	movs	r6, #1
}
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	b00d      	add	sp, #52	; 0x34
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	4638      	mov	r0, r7
 8008bca:	f001 fe0d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008bce:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8008bd0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008bd4:	4298      	cmp	r0, r3
 8008bd6:	f47f af04 	bne.w	80089e2 <lv_obj_refr_size+0x43e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008bda:	2232      	movs	r2, #50	; 0x32
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4620      	mov	r0, r4
 8008be0:	f001 fe02 	bl	800a7e8 <lv_obj_get_style_prop>
 8008be4:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008be6:	2210      	movs	r2, #16
 8008be8:	2100      	movs	r1, #0
 8008bea:	4620      	mov	r0, r4
 8008bec:	f001 fdfc 	bl	800a7e8 <lv_obj_get_style_prop>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 8008bf0:	eb00 090a 	add.w	r9, r0, sl
 8008bf4:	fa1f f989 	uxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8008bf8:	2211      	movs	r2, #17
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f001 fdf3 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008c02:	b203      	sxth	r3, r0
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 8008c04:	fa0f fa8a 	sxth.w	sl, sl
 8008c08:	4453      	add	r3, sl
 8008c0a:	444b      	add	r3, r9
 8008c0c:	fa0f fb83 	sxth.w	fp, r3
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8008c10:	e6f8      	b.n	8008a04 <lv_obj_refr_size+0x460>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8008c12:	4638      	mov	r0, r7
 8008c14:	f001 fc2e 	bl	800a474 <lv_obj_scrollbar_invalidate>
 8008c18:	e79f      	b.n	8008b5a <lv_obj_refr_size+0x5b6>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 8008c1a:	8b20      	ldrh	r0, [r4, #24]
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	1b45      	subs	r5, r0, r5
 8008c20:	82a5      	strh	r5, [r4, #20]
 8008c22:	e7ab      	b.n	8008b7c <lv_obj_refr_size+0x5d8>
    if(obj->w_layout && obj->h_layout) return false;
 8008c24:	2600      	movs	r6, #0
 8008c26:	e7c9      	b.n	8008bbc <lv_obj_refr_size+0x618>
    if(parent == NULL) return false;
 8008c28:	2600      	movs	r6, #0
 8008c2a:	e7c7      	b.n	8008bbc <lv_obj_refr_size+0x618>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	e7c5      	b.n	8008bbc <lv_obj_refr_size+0x618>
 8008c30:	51eb851f 	.word	0x51eb851f
 8008c34:	00040001 	.word	0x00040001
 8008c38:	ffffe001 	.word	0xffffe001

08008c3c <layout_update_core>:
{
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4605      	mov	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008c40:	f002 fd2d 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8008c44:	b180      	cbz	r0, 8008c68 <layout_update_core+0x2c>
 8008c46:	4606      	mov	r6, r0
 8008c48:	2400      	movs	r4, #0
        lv_obj_t * child = obj->spec_attr->children[i];
 8008c4a:	68ab      	ldr	r3, [r5, #8]
 8008c4c:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 8008c4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008c52:	f7ff fff3 	bl	8008c3c <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 8008c56:	3401      	adds	r4, #1
 8008c58:	42a6      	cmp	r6, r4
 8008c5a:	d1f6      	bne.n	8008c4a <layout_update_core+0xe>
    if(obj->layout_inv == 0) return;
 8008c5c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8008c60:	f013 0f01 	tst.w	r3, #1
 8008c64:	d112      	bne.n	8008c8c <layout_update_core+0x50>
}
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->layout_inv == 0) return;
 8008c68:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8008c6c:	f013 0f01 	tst.w	r3, #1
 8008c70:	d0f9      	beq.n	8008c66 <layout_update_core+0x2a>
    obj->layout_inv = 0;
 8008c72:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8008c76:	f36f 0300 	bfc	r3, #0, #1
 8008c7a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_refr_size(obj);
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f7ff fc90 	bl	80085a4 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8008c84:	4628      	mov	r0, r5
 8008c86:	f7ff fa37 	bl	80080f8 <lv_obj_refr_pos>
    if(child_cnt > 0) {
 8008c8a:	e7ec      	b.n	8008c66 <layout_update_core+0x2a>
    obj->layout_inv = 0;
 8008c8c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8008c90:	f36f 0300 	bfc	r3, #0, #1
 8008c94:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_refr_size(obj);
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f7ff fc83 	bl	80085a4 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f7ff fa2a 	bl	80080f8 <lv_obj_refr_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8008ca4:	220a      	movs	r2, #10
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f001 fd9d 	bl	800a7e8 <lv_obj_get_style_prop>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8008cae:	b280      	uxth	r0, r0
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d0d8      	beq.n	8008c66 <layout_update_core+0x2a>
 8008cb4:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <layout_update_core+0x9c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4283      	cmp	r3, r0
 8008cba:	d3d4      	bcc.n	8008c66 <layout_update_core+0x2a>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8008cbc:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8008cc0:	3801      	subs	r0, #1
 8008cc2:	4b06      	ldr	r3, [pc, #24]	; (8008cdc <layout_update_core+0xa0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 8008cca:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8008cce:	6851      	ldr	r1, [r2, #4]
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	4798      	blx	r3
 8008cd4:	e7c7      	b.n	8008c66 <layout_update_core+0x2a>
 8008cd6:	bf00      	nop
 8008cd8:	20002540 	.word	0x20002540
 8008cdc:	200028c8 	.word	0x200028c8

08008ce0 <lv_obj_update_layout>:
    if(mutex) {
 8008ce0:	4b10      	ldr	r3, [pc, #64]	; (8008d24 <lv_obj_update_layout+0x44>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <lv_obj_update_layout+0x8>
 8008ce6:	4770      	bx	lr
{
 8008ce8:	b510      	push	{r4, lr}
    mutex = true;
 8008cea:	4b0e      	ldr	r3, [pc, #56]	; (8008d24 <lv_obj_update_layout+0x44>)
 8008cec:	2201      	movs	r2, #1
 8008cee:	701a      	strb	r2, [r3, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008cf0:	f002 fc91 	bl	800b616 <lv_obj_get_screen>
 8008cf4:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 8008cf6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8008cfa:	f013 0f02 	tst.w	r3, #2
 8008cfe:	d00d      	beq.n	8008d1c <lv_obj_update_layout+0x3c>
        scr->scr_layout_inv = 0;
 8008d00:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008d04:	f36f 0341 	bfc	r3, #1, #1
 8008d08:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff ff95 	bl	8008c3c <layout_update_core>
    while(scr->scr_layout_inv) {
 8008d12:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8008d16:	f013 0f02 	tst.w	r3, #2
 8008d1a:	d1f1      	bne.n	8008d00 <lv_obj_update_layout+0x20>
    mutex = false;
 8008d1c:	4b01      	ldr	r3, [pc, #4]	; (8008d24 <lv_obj_update_layout+0x44>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]
}
 8008d22:	bd10      	pop	{r4, pc}
 8008d24:	20002544 	.word	0x20002544

08008d28 <lv_obj_align_to>:
{
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	4681      	mov	r9, r0
 8008d30:	460e      	mov	r6, r1
 8008d32:	4693      	mov	fp, r2
 8008d34:	9301      	str	r3, [sp, #4]
    lv_obj_update_layout(obj);
 8008d36:	f7ff ffd3 	bl	8008ce0 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	d051      	beq.n	8008de2 <lv_obj_align_to+0xba>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008d3e:	4648      	mov	r0, r9
 8008d40:	f002 fc94 	bl	800b66c <lv_obj_get_parent>
 8008d44:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008d46:	2232      	movs	r2, #50	; 0x32
 8008d48:	2100      	movs	r1, #0
 8008d4a:	f001 fd4d 	bl	800a7e8 <lv_obj_get_style_prop>
 8008d4e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008d50:	2212      	movs	r2, #18
 8008d52:	2100      	movs	r1, #0
 8008d54:	4640      	mov	r0, r8
 8008d56:	f001 fd47 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 8008d5a:	b2bf      	uxth	r7, r7
 8008d5c:	eb07 0a00 	add.w	sl, r7, r0
 8008d60:	fa0f fa8a 	sxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008d64:	2210      	movs	r2, #16
 8008d66:	2100      	movs	r1, #0
 8008d68:	4640      	mov	r0, r8
 8008d6a:	f001 fd3d 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8008d6e:	4407      	add	r7, r0
 8008d70:	b23f      	sxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008d72:	2232      	movs	r2, #50	; 0x32
 8008d74:	2100      	movs	r1, #0
 8008d76:	4630      	mov	r0, r6
 8008d78:	f001 fd36 	bl	800a7e8 <lv_obj_get_style_prop>
 8008d7c:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008d7e:	2212      	movs	r2, #18
 8008d80:	2100      	movs	r1, #0
 8008d82:	4630      	mov	r0, r6
 8008d84:	f001 fd30 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 8008d88:	b2a4      	uxth	r4, r4
 8008d8a:	1825      	adds	r5, r4, r0
 8008d8c:	b2ab      	uxth	r3, r5
 8008d8e:	9302      	str	r3, [sp, #8]
 8008d90:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008d92:	2210      	movs	r2, #16
 8008d94:	2100      	movs	r1, #0
 8008d96:	4630      	mov	r0, r6
 8008d98:	f001 fd26 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 8008d9c:	4404      	add	r4, r0
 8008d9e:	b2a3      	uxth	r3, r4
 8008da0:	9303      	str	r3, [sp, #12]
 8008da2:	b224      	sxth	r4, r4
    if(align == LV_ALIGN_DEFAULT) {
 8008da4:	f1bb 0f00 	cmp.w	fp, #0
 8008da8:	d020      	beq.n	8008dec <lv_obj_align_to+0xc4>
    switch(align) {
 8008daa:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008dae:	2a14      	cmp	r2, #20
 8008db0:	f200 8208 	bhi.w	80091c4 <lv_obj_align_to+0x49c>
 8008db4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008db8:	00830022 	.word	0x00830022
 8008dbc:	00a70099 	.word	0x00a70099
 8008dc0:	00d800b5 	.word	0x00d800b5
 8008dc4:	010a00f3 	.word	0x010a00f3
 8008dc8:	012e0057 	.word	0x012e0057
 8008dcc:	01550137 	.word	0x01550137
 8008dd0:	016e0167 	.word	0x016e0167
 8008dd4:	019a018a 	.word	0x019a018a
 8008dd8:	01c101a3 	.word	0x01c101a3
 8008ddc:	01da01d3 	.word	0x01da01d3
 8008de0:	01f6      	.short	0x01f6
    if(base == NULL) base = lv_obj_get_parent(obj);
 8008de2:	4648      	mov	r0, r9
 8008de4:	f002 fc42 	bl	800b66c <lv_obj_get_parent>
 8008de8:	4606      	mov	r6, r0
 8008dea:	e7a8      	b.n	8008d3e <lv_obj_align_to+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008dec:	2216      	movs	r2, #22
 8008dee:	2100      	movs	r1, #0
 8008df0:	4630      	mov	r0, r6
 8008df2:	f001 fcf9 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008df6:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8008df8:	2801      	cmp	r0, #1
 8008dfa:	d076      	beq.n	8008eea <lv_obj_align_to+0x1c2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008dfc:	2216      	movs	r2, #22
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4640      	mov	r0, r8
 8008e02:	f001 fcf1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008e06:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008e08:	2801      	cmp	r0, #1
 8008e0a:	f000 81de 	beq.w	80091ca <lv_obj_align_to+0x4a2>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 8008e0e:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	4418      	add	r0, r3
 8008e16:	f9b8 b014 	ldrsh.w	fp, [r8, #20]
 8008e1a:	eba0 0b0b 	sub.w	fp, r0, fp
 8008e1e:	4640      	mov	r0, r8
 8008e20:	f000 fac6 	bl	80093b0 <lv_obj_get_scroll_left>
 8008e24:	4458      	add	r0, fp
 8008e26:	eba0 0a0a 	sub.w	sl, r0, sl
 8008e2a:	4455      	add	r5, sl
 8008e2c:	b22d      	sxth	r5, r5
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 8008e2e:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 8008e32:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8008e36:	4430      	add	r0, r6
 8008e38:	f9b8 6016 	ldrsh.w	r6, [r8, #22]
 8008e3c:	1b86      	subs	r6, r0, r6
 8008e3e:	4640      	mov	r0, r8
 8008e40:	f000 fa44 	bl	80092cc <lv_obj_get_scroll_top>
 8008e44:	4430      	add	r0, r6
 8008e46:	1bc7      	subs	r7, r0, r7
 8008e48:	443c      	add	r4, r7
 8008e4a:	b2a4      	uxth	r4, r4
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2101      	movs	r1, #1
 8008e50:	4648      	mov	r0, r9
 8008e52:	f002 fb7d 	bl	800b550 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x, y);
 8008e56:	b222      	sxth	r2, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4648      	mov	r0, r9
 8008e5c:	f7fe fd3c 	bl	80078d8 <lv_obj_set_pos>
}
 8008e60:	b005      	add	sp, #20
 8008e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7fe fe4b 	bl	8007b02 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008e6c:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8008e70:	3301      	adds	r3, #1
 8008e72:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	b21a      	sxth	r2, r3
 8008e7a:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8008e7e:	4415      	add	r5, r2
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	eba3 0565 	sub.w	r5, r3, r5, asr #1
 8008e86:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008e8a:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8008e8e:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7fe fe53 	bl	8007b3c <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008e96:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 8008ea0:	1a9b      	subs	r3, r3, r2
 8008ea2:	b21a      	sxth	r2, r3
 8008ea4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8008ea8:	4413      	add	r3, r2
 8008eaa:	9a03      	ldr	r2, [sp, #12]
 8008eac:	eba2 0b63 	sub.w	fp, r2, r3, asr #1
 8008eb0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008eb4:	eb0b 0b60 	add.w	fp, fp, r0, asr #1
 8008eb8:	fa0f f48b 	sxth.w	r4, fp
            break;
 8008ebc:	e79e      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7fe fe1f 	bl	8007b02 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008ec4:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	b21a      	sxth	r2, r3
 8008ed2:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8008ed6:	4415      	add	r5, r2
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	eba3 0565 	sub.w	r5, r3, r5, asr #1
 8008ede:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008ee2:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8008ee6:	b22d      	sxth	r5, r5
            break;
 8008ee8:	e788      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8008eea:	4630      	mov	r0, r6
 8008eec:	f7fe fe09 	bl	8007b02 <lv_obj_get_content_width>
 8008ef0:	9b02      	ldr	r3, [sp, #8]
 8008ef2:	1e5d      	subs	r5, r3, #1
 8008ef4:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 8008ef8:	441d      	add	r5, r3
 8008efa:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8008efe:	1aed      	subs	r5, r5, r3
 8008f00:	4405      	add	r5, r0
 8008f02:	b22d      	sxth	r5, r5
            break;
 8008f04:	e77a      	b.n	8008dfc <lv_obj_align_to+0xd4>
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8008f06:	4630      	mov	r0, r6
 8008f08:	f7fe fe18 	bl	8007b3c <lv_obj_get_content_height>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	1e5c      	subs	r4, r3, #1
 8008f10:	f8b9 b016 	ldrh.w	fp, [r9, #22]
 8008f14:	445c      	add	r4, fp
 8008f16:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8008f1a:	1ae4      	subs	r4, r4, r3
 8008f1c:	4404      	add	r4, r0
 8008f1e:	b224      	sxth	r4, r4
            break;
 8008f20:	e76c      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7fe fded 	bl	8007b02 <lv_obj_get_content_width>
 8008f28:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	b21a      	sxth	r2, r3
 8008f36:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8008f3a:	4415      	add	r5, r2
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	eba3 0565 	sub.w	r5, r3, r5, asr #1
 8008f42:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008f46:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8008f4a:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7fe fdf5 	bl	8007b3c <lv_obj_get_content_height>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	1e5c      	subs	r4, r3, #1
 8008f56:	f8b9 b016 	ldrh.w	fp, [r9, #22]
 8008f5a:	445c      	add	r4, fp
 8008f5c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8008f60:	1ae4      	subs	r4, r4, r3
 8008f62:	4404      	add	r4, r0
 8008f64:	b224      	sxth	r4, r4
            break;
 8008f66:	e749      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f7fe fdca 	bl	8007b02 <lv_obj_get_content_width>
 8008f6e:	9b02      	ldr	r3, [sp, #8]
 8008f70:	1e5d      	subs	r5, r3, #1
 8008f72:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 8008f76:	441d      	add	r5, r3
 8008f78:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8008f7c:	1aed      	subs	r5, r5, r3
 8008f7e:	4405      	add	r5, r0
 8008f80:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7fe fdda 	bl	8007b3c <lv_obj_get_content_height>
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	1e5c      	subs	r4, r3, #1
 8008f8c:	f8b9 b016 	ldrh.w	fp, [r9, #22]
 8008f90:	445c      	add	r4, fp
 8008f92:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8008f96:	1ae4      	subs	r4, r4, r3
 8008f98:	4404      	add	r4, r0
 8008f9a:	b224      	sxth	r4, r4
            break;
 8008f9c:	e72e      	b.n	8008dfc <lv_obj_align_to+0xd4>
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7fe fdcc 	bl	8007b3c <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008fa4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	b21a      	sxth	r2, r3
 8008fb2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8008fb6:	4413      	add	r3, r2
 8008fb8:	9a03      	ldr	r2, [sp, #12]
 8008fba:	eba2 0b63 	sub.w	fp, r2, r3, asr #1
 8008fbe:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008fc2:	eb0b 0b60 	add.w	fp, fp, r0, asr #1
 8008fc6:	fa0f f48b 	sxth.w	r4, fp
            break;
 8008fca:	e717      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f7fe fd98 	bl	8007b02 <lv_obj_get_content_width>
 8008fd2:	9b02      	ldr	r3, [sp, #8]
 8008fd4:	1e5d      	subs	r5, r3, #1
 8008fd6:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 8008fda:	441d      	add	r5, r3
 8008fdc:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8008fe0:	1aed      	subs	r5, r5, r3
 8008fe2:	4405      	add	r5, r0
 8008fe4:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f7fe fda8 	bl	8007b3c <lv_obj_get_content_height>
 8008fec:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 8008ff6:	1a9b      	subs	r3, r3, r2
 8008ff8:	b21a      	sxth	r2, r3
 8008ffa:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8008ffe:	4413      	add	r3, r2
 8009000:	9a03      	ldr	r2, [sp, #12]
 8009002:	eba2 0b63 	sub.w	fp, r2, r3, asr #1
 8009006:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800900a:	eb0b 0b60 	add.w	fp, fp, r0, asr #1
 800900e:	fa0f f48b 	sxth.w	r4, fp
            break;
 8009012:	e6f3      	b.n	8008dfc <lv_obj_align_to+0xd4>
            y = -lv_obj_get_height(obj);
 8009014:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 8009018:	3c01      	subs	r4, #1
 800901a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800901e:	1ae4      	subs	r4, r4, r3
 8009020:	b224      	sxth	r4, r4
            x = 0;
 8009022:	2500      	movs	r5, #0
            break;
 8009024:	e6ea      	b.n	8008dfc <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009026:	8b33      	ldrh	r3, [r6, #24]
 8009028:	3301      	adds	r3, #1
 800902a:	8ab2      	ldrh	r2, [r6, #20]
 800902c:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800902e:	b21a      	sxth	r2, r3
 8009030:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8009034:	442a      	add	r2, r5
 8009036:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800903a:	3301      	adds	r3, #1
 800903c:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8009040:	1a5b      	subs	r3, r3, r1
 8009042:	b219      	sxth	r1, r3
 8009044:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8009048:	440d      	add	r5, r1
 800904a:	106d      	asrs	r5, r5, #1
 800904c:	ebc5 0562 	rsb	r5, r5, r2, asr #1
 8009050:	b22d      	sxth	r5, r5
            y = -lv_obj_get_height(obj);
 8009052:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 8009056:	3c01      	subs	r4, #1
 8009058:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800905c:	1ae4      	subs	r4, r4, r3
 800905e:	b224      	sxth	r4, r4
            break;
 8009060:	e6cc      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009062:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 8009066:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800906a:	1aed      	subs	r5, r5, r3
 800906c:	8b33      	ldrh	r3, [r6, #24]
 800906e:	441d      	add	r5, r3
 8009070:	8ab3      	ldrh	r3, [r6, #20]
 8009072:	1aed      	subs	r5, r5, r3
 8009074:	b22d      	sxth	r5, r5
            y = -lv_obj_get_height(obj);
 8009076:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 800907a:	3c01      	subs	r4, #1
 800907c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8009080:	1ae4      	subs	r4, r4, r3
 8009082:	b224      	sxth	r4, r4
            break;
 8009084:	e6ba      	b.n	8008dfc <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009086:	8b74      	ldrh	r4, [r6, #26]
 8009088:	3401      	adds	r4, #1
 800908a:	8af3      	ldrh	r3, [r6, #22]
 800908c:	1ae4      	subs	r4, r4, r3
 800908e:	b224      	sxth	r4, r4
            x = 0;
 8009090:	2500      	movs	r5, #0
            break;
 8009092:	e6b3      	b.n	8008dfc <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009094:	8b33      	ldrh	r3, [r6, #24]
 8009096:	3301      	adds	r3, #1
 8009098:	8ab2      	ldrh	r2, [r6, #20]
 800909a:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 800909c:	b21a      	sxth	r2, r3
 800909e:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 80090a2:	442a      	add	r2, r5
 80090a4:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80090a8:	3301      	adds	r3, #1
 80090aa:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 80090ae:	1a5b      	subs	r3, r3, r1
 80090b0:	b219      	sxth	r1, r3
 80090b2:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 80090b6:	440d      	add	r5, r1
 80090b8:	106d      	asrs	r5, r5, #1
 80090ba:	ebc5 0562 	rsb	r5, r5, r2, asr #1
 80090be:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80090c0:	8b74      	ldrh	r4, [r6, #26]
 80090c2:	3401      	adds	r4, #1
 80090c4:	8af3      	ldrh	r3, [r6, #22]
 80090c6:	1ae4      	subs	r4, r4, r3
 80090c8:	b224      	sxth	r4, r4
            break;
 80090ca:	e697      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80090cc:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 80090d0:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80090d4:	1aed      	subs	r5, r5, r3
 80090d6:	8b33      	ldrh	r3, [r6, #24]
 80090d8:	441d      	add	r5, r3
 80090da:	8ab3      	ldrh	r3, [r6, #20]
 80090dc:	1aed      	subs	r5, r5, r3
 80090de:	b22d      	sxth	r5, r5
 80090e0:	8b74      	ldrh	r4, [r6, #26]
 80090e2:	3401      	adds	r4, #1
 80090e4:	8af3      	ldrh	r3, [r6, #22]
 80090e6:	1ae4      	subs	r4, r4, r3
 80090e8:	b224      	sxth	r4, r4
            break;
 80090ea:	e687      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = -lv_obj_get_width(obj);
 80090ec:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 80090f0:	3d01      	subs	r5, #1
 80090f2:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80090f6:	1aed      	subs	r5, r5, r3
 80090f8:	b22d      	sxth	r5, r5
            y = 0;
 80090fa:	2400      	movs	r4, #0
            break;
 80090fc:	e67e      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = -lv_obj_get_width(obj);
 80090fe:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 8009102:	3d01      	subs	r5, #1
 8009104:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8009108:	1aed      	subs	r5, r5, r3
 800910a:	b22d      	sxth	r5, r5
 800910c:	8b73      	ldrh	r3, [r6, #26]
 800910e:	3301      	adds	r3, #1
 8009110:	8af2      	ldrh	r2, [r6, #22]
 8009112:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009114:	b21a      	sxth	r2, r3
 8009116:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800911a:	4422      	add	r2, r4
 800911c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8009120:	3301      	adds	r3, #1
 8009122:	f8b9 1016 	ldrh.w	r1, [r9, #22]
 8009126:	1a5b      	subs	r3, r3, r1
 8009128:	b219      	sxth	r1, r3
 800912a:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800912e:	440c      	add	r4, r1
 8009130:	1064      	asrs	r4, r4, #1
 8009132:	ebc4 0462 	rsb	r4, r4, r2, asr #1
 8009136:	b224      	sxth	r4, r4
            break;
 8009138:	e660      	b.n	8008dfc <lv_obj_align_to+0xd4>
            x = -lv_obj_get_width(obj);
 800913a:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 800913e:	3d01      	subs	r5, #1
 8009140:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8009144:	1aed      	subs	r5, r5, r3
 8009146:	b22d      	sxth	r5, r5
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009148:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 800914c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8009150:	1ae4      	subs	r4, r4, r3
 8009152:	8b73      	ldrh	r3, [r6, #26]
 8009154:	441c      	add	r4, r3
 8009156:	8af3      	ldrh	r3, [r6, #22]
 8009158:	1ae4      	subs	r4, r4, r3
 800915a:	b224      	sxth	r4, r4
            break;
 800915c:	e64e      	b.n	8008dfc <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800915e:	8b35      	ldrh	r5, [r6, #24]
 8009160:	3501      	adds	r5, #1
 8009162:	8ab3      	ldrh	r3, [r6, #20]
 8009164:	1aed      	subs	r5, r5, r3
 8009166:	b22d      	sxth	r5, r5
            y = 0;
 8009168:	2400      	movs	r4, #0
            break;
 800916a:	e647      	b.n	8008dfc <lv_obj_align_to+0xd4>
 800916c:	8b35      	ldrh	r5, [r6, #24]
 800916e:	3501      	adds	r5, #1
 8009170:	8ab3      	ldrh	r3, [r6, #20]
 8009172:	1aed      	subs	r5, r5, r3
 8009174:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009176:	8b73      	ldrh	r3, [r6, #26]
 8009178:	3301      	adds	r3, #1
 800917a:	8af2      	ldrh	r2, [r6, #22]
 800917c:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 800917e:	b21a      	sxth	r2, r3
 8009180:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8009184:	4422      	add	r2, r4
 8009186:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800918a:	3301      	adds	r3, #1
 800918c:	f8b9 1016 	ldrh.w	r1, [r9, #22]
 8009190:	1a5b      	subs	r3, r3, r1
 8009192:	b219      	sxth	r1, r3
 8009194:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8009198:	440c      	add	r4, r1
 800919a:	1064      	asrs	r4, r4, #1
 800919c:	ebc4 0462 	rsb	r4, r4, r2, asr #1
 80091a0:	b224      	sxth	r4, r4
            break;
 80091a2:	e62b      	b.n	8008dfc <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80091a4:	8b35      	ldrh	r5, [r6, #24]
 80091a6:	3501      	adds	r5, #1
 80091a8:	8ab3      	ldrh	r3, [r6, #20]
 80091aa:	1aed      	subs	r5, r5, r3
 80091ac:	b22d      	sxth	r5, r5
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80091ae:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 80091b2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80091b6:	1ae4      	subs	r4, r4, r3
 80091b8:	8b73      	ldrh	r3, [r6, #26]
 80091ba:	441c      	add	r4, r3
 80091bc:	8af3      	ldrh	r3, [r6, #22]
 80091be:	1ae4      	subs	r4, r4, r3
 80091c0:	b224      	sxth	r4, r4
            break;
 80091c2:	e61b      	b.n	8008dfc <lv_obj_align_to+0xd4>
    lv_coord_t y = 0;
 80091c4:	2400      	movs	r4, #0
    lv_coord_t x = 0;
 80091c6:	4625      	mov	r5, r4
 80091c8:	e618      	b.n	8008dfc <lv_obj_align_to+0xd4>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 80091ca:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	4418      	add	r0, r3
 80091d2:	f9b8 b014 	ldrsh.w	fp, [r8, #20]
 80091d6:	eba0 0b0b 	sub.w	fp, r0, fp
 80091da:	4640      	mov	r0, r8
 80091dc:	f000 f95c 	bl	8009498 <lv_obj_get_scroll_right>
 80091e0:	4458      	add	r0, fp
 80091e2:	eba0 0a0a 	sub.w	sl, r0, sl
 80091e6:	4455      	add	r5, sl
 80091e8:	b22d      	sxth	r5, r5
 80091ea:	e620      	b.n	8008e2e <lv_obj_align_to+0x106>

080091ec <scroll_anim_ready_cb>:
{
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 80091ec:	b508      	push	{r3, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 80091ee:	2200      	movs	r2, #0
 80091f0:	210a      	movs	r1, #10
 80091f2:	6800      	ldr	r0, [r0, #0]
 80091f4:	f7fa fd84 	bl	8003d00 <lv_event_send>
}
 80091f8:	bd08      	pop	{r3, pc}

080091fa <lv_obj_set_scrollbar_mode>:
{
 80091fa:	b538      	push	{r3, r4, r5, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 8009200:	f7fd fe0e 	bl	8006e20 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 8009204:	68a2      	ldr	r2, [r4, #8]
 8009206:	7e13      	ldrb	r3, [r2, #24]
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	42ab      	cmp	r3, r5
 800920e:	d006      	beq.n	800921e <lv_obj_set_scrollbar_mode+0x24>
    obj->spec_attr->scrollbar_mode = mode;
 8009210:	7e13      	ldrb	r3, [r2, #24]
 8009212:	f365 0301 	bfi	r3, r5, #0, #2
 8009216:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 8009218:	4620      	mov	r0, r4
 800921a:	f7fe fead 	bl	8007f78 <lv_obj_invalidate>
}
 800921e:	bd38      	pop	{r3, r4, r5, pc}

08009220 <lv_obj_set_scroll_dir>:
{
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4605      	mov	r5, r0
 8009224:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8009226:	f7fd fdfb 	bl	8006e20 <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 800922a:	68aa      	ldr	r2, [r5, #8]
 800922c:	7e53      	ldrb	r3, [r2, #25]
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	42a3      	cmp	r3, r4
 8009234:	d003      	beq.n	800923e <lv_obj_set_scroll_dir+0x1e>
        obj->spec_attr->scroll_dir = dir;
 8009236:	7e53      	ldrb	r3, [r2, #25]
 8009238:	f364 0303 	bfi	r3, r4, #0, #4
 800923c:	7653      	strb	r3, [r2, #25]
}
 800923e:	bd38      	pop	{r3, r4, r5, pc}

08009240 <lv_obj_set_scroll_snap_x>:
{
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4605      	mov	r5, r0
 8009244:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8009246:	f7fd fdeb 	bl	8006e20 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 800924a:	68ab      	ldr	r3, [r5, #8]
 800924c:	7e1a      	ldrb	r2, [r3, #24]
 800924e:	f364 0283 	bfi	r2, r4, #2, #2
 8009252:	761a      	strb	r2, [r3, #24]
}
 8009254:	bd38      	pop	{r3, r4, r5, pc}

08009256 <lv_obj_set_scroll_snap_y>:
{
 8009256:	b538      	push	{r3, r4, r5, lr}
 8009258:	4605      	mov	r5, r0
 800925a:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 800925c:	f7fd fde0 	bl	8006e20 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 8009260:	68ab      	ldr	r3, [r5, #8]
 8009262:	7e1a      	ldrb	r2, [r3, #24]
 8009264:	f364 1205 	bfi	r2, r4, #4, #2
 8009268:	761a      	strb	r2, [r3, #24]
}
 800926a:	bd38      	pop	{r3, r4, r5, pc}

0800926c <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 800926c:	6883      	ldr	r3, [r0, #8]
 800926e:	b11b      	cbz	r3, 8009278 <lv_obj_get_scrollbar_mode+0xc>
 8009270:	7e18      	ldrb	r0, [r3, #24]
 8009272:	f000 0003 	and.w	r0, r0, #3
 8009276:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 8009278:	2003      	movs	r0, #3
}
 800927a:	4770      	bx	lr

0800927c <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 800927c:	6883      	ldr	r3, [r0, #8]
 800927e:	b11b      	cbz	r3, 8009288 <lv_obj_get_scroll_dir+0xc>
 8009280:	7e58      	ldrb	r0, [r3, #25]
 8009282:	f000 000f 	and.w	r0, r0, #15
 8009286:	4770      	bx	lr
    else return LV_DIR_ALL;
 8009288:	200f      	movs	r0, #15
}
 800928a:	4770      	bx	lr

0800928c <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 800928c:	6883      	ldr	r3, [r0, #8]
 800928e:	b11b      	cbz	r3, 8009298 <lv_obj_get_scroll_snap_x+0xc>
 8009290:	7e18      	ldrb	r0, [r3, #24]
 8009292:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8009296:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 8009298:	2000      	movs	r0, #0
}
 800929a:	4770      	bx	lr

0800929c <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 800929c:	6883      	ldr	r3, [r0, #8]
 800929e:	b11b      	cbz	r3, 80092a8 <lv_obj_get_scroll_snap_y+0xc>
 80092a0:	7e18      	ldrb	r0, [r3, #24]
 80092a2:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80092a6:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 80092a8:	2000      	movs	r0, #0
}
 80092aa:	4770      	bx	lr

080092ac <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 80092ac:	6883      	ldr	r3, [r0, #8]
 80092ae:	b11b      	cbz	r3, 80092b8 <lv_obj_get_scroll_x+0xc>
    return -obj->spec_attr->scroll.x;
 80092b0:	8a18      	ldrh	r0, [r3, #16]
 80092b2:	4240      	negs	r0, r0
 80092b4:	b200      	sxth	r0, r0
 80092b6:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 80092b8:	2000      	movs	r0, #0
}
 80092ba:	4770      	bx	lr

080092bc <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 80092bc:	6883      	ldr	r3, [r0, #8]
 80092be:	b11b      	cbz	r3, 80092c8 <lv_obj_get_scroll_y+0xc>
    return -obj->spec_attr->scroll.y;
 80092c0:	8a58      	ldrh	r0, [r3, #18]
 80092c2:	4240      	negs	r0, r0
 80092c4:	b200      	sxth	r0, r0
 80092c6:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 80092c8:	2000      	movs	r0, #0
}
 80092ca:	4770      	bx	lr

080092cc <lv_obj_get_scroll_top>:
    if(obj->spec_attr == NULL) return 0;
 80092cc:	6883      	ldr	r3, [r0, #8]
 80092ce:	b11b      	cbz	r3, 80092d8 <lv_obj_get_scroll_top+0xc>
    return -obj->spec_attr->scroll.y;
 80092d0:	8a58      	ldrh	r0, [r3, #18]
 80092d2:	4240      	negs	r0, r0
 80092d4:	b200      	sxth	r0, r0
 80092d6:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 80092d8:	2000      	movs	r0, #0
}
 80092da:	4770      	bx	lr

080092dc <lv_obj_get_scroll_bottom>:
{
 80092dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e0:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80092e2:	f002 f9dc 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d049      	beq.n	800937e <lv_obj_get_scroll_bottom+0xa2>
 80092ea:	4680      	mov	r8, r0
 80092ec:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 80092ee:	4f2e      	ldr	r7, [pc, #184]	; (80093a8 <lv_obj_get_scroll_bottom+0xcc>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80092f0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80093ac <lv_obj_get_scroll_bottom+0xd0>
 80092f4:	e007      	b.n	8009306 <lv_obj_get_scroll_bottom+0x2a>
        child_res = LV_MAX(child_res, child->coords.y2);
 80092f6:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 80092fa:	429f      	cmp	r7, r3
 80092fc:	bfb8      	it	lt
 80092fe:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8009300:	3401      	adds	r4, #1
 8009302:	45a0      	cmp	r8, r4
 8009304:	d00a      	beq.n	800931c <lv_obj_get_scroll_bottom+0x40>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009306:	68b3      	ldr	r3, [r6, #8]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800930e:	4649      	mov	r1, r9
 8009310:	4628      	mov	r0, r5
 8009312:	f7fd fb64 	bl	80069de <lv_obj_has_flag_any>
 8009316:	2800      	cmp	r0, #0
 8009318:	d0ed      	beq.n	80092f6 <lv_obj_get_scroll_bottom+0x1a>
 800931a:	e7f1      	b.n	8009300 <lv_obj_get_scroll_bottom+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800931c:	2210      	movs	r2, #16
 800931e:	2100      	movs	r1, #0
 8009320:	4630      	mov	r0, r6
 8009322:	f001 fa61 	bl	800a7e8 <lv_obj_get_style_prop>
 8009326:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009328:	2211      	movs	r2, #17
 800932a:	2100      	movs	r1, #0
 800932c:	4630      	mov	r0, r6
 800932e:	f001 fa5b 	bl	800a7e8 <lv_obj_get_style_prop>
 8009332:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009334:	2232      	movs	r2, #50	; 0x32
 8009336:	2100      	movs	r1, #0
 8009338:	4630      	mov	r0, r6
 800933a:	f001 fa55 	bl	800a7e8 <lv_obj_get_style_prop>
 800933e:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
 8009340:	4b19      	ldr	r3, [pc, #100]	; (80093a8 <lv_obj_get_scroll_bottom+0xcc>)
 8009342:	429f      	cmp	r7, r3
 8009344:	d004      	beq.n	8009350 <lv_obj_get_scroll_bottom+0x74>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8009346:	1823      	adds	r3, r4, r0
 8009348:	8b72      	ldrh	r2, [r6, #26]
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	441f      	add	r7, r3
 800934e:	b23f      	sxth	r7, r7
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8009350:	4630      	mov	r0, r6
 8009352:	f7fe fc55 	bl	8007c00 <lv_obj_get_self_height>
 8009356:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8009358:	4630      	mov	r0, r6
 800935a:	f7fe fbcc 	bl	8007af6 <lv_obj_get_height>
 800935e:	4444      	add	r4, r8
 8009360:	444c      	add	r4, r9
 8009362:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009366:	1a24      	subs	r4, r4, r0
 8009368:	b2a4      	uxth	r4, r4
    self_h -= lv_obj_get_scroll_y(obj);
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ffa6 	bl	80092bc <lv_obj_get_scroll_y>
 8009370:	1a20      	subs	r0, r4, r0
    return LV_MAX(child_res, self_h);
 8009372:	b200      	sxth	r0, r0
 8009374:	42b8      	cmp	r0, r7
 8009376:	bfb8      	it	lt
 8009378:	4638      	movlt	r0, r7
}
 800937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800937e:	2210      	movs	r2, #16
 8009380:	2100      	movs	r1, #0
 8009382:	4630      	mov	r0, r6
 8009384:	f001 fa30 	bl	800a7e8 <lv_obj_get_style_prop>
 8009388:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800938a:	2211      	movs	r2, #17
 800938c:	2100      	movs	r1, #0
 800938e:	4630      	mov	r0, r6
 8009390:	f001 fa2a 	bl	800a7e8 <lv_obj_get_style_prop>
 8009394:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009396:	2232      	movs	r2, #50	; 0x32
 8009398:	2100      	movs	r1, #0
 800939a:	4630      	mov	r0, r6
 800939c:	f001 fa24 	bl	800a7e8 <lv_obj_get_style_prop>
 80093a0:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
 80093a2:	4f01      	ldr	r7, [pc, #4]	; (80093a8 <lv_obj_get_scroll_bottom+0xcc>)
 80093a4:	e7d4      	b.n	8009350 <lv_obj_get_scroll_bottom+0x74>
 80093a6:	bf00      	nop
 80093a8:	ffffe001 	.word	0xffffe001
 80093ac:	00040001 	.word	0x00040001

080093b0 <lv_obj_get_scroll_left>:
{
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	b083      	sub	sp, #12
 80093b6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80093b8:	2216      	movs	r2, #22
 80093ba:	2100      	movs	r1, #0
 80093bc:	f001 fa14 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80093c0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80093c2:	2801      	cmp	r0, #1
 80093c4:	d008      	beq.n	80093d8 <lv_obj_get_scroll_left+0x28>
        if(obj->spec_attr == NULL) return 0;
 80093c6:	68a3      	ldr	r3, [r4, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d05e      	beq.n	800948a <lv_obj_get_scroll_left+0xda>
        return -obj->spec_attr->scroll.x;
 80093cc:	8a18      	ldrh	r0, [r3, #16]
 80093ce:	4240      	negs	r0, r0
 80093d0:	b200      	sxth	r0, r0
}
 80093d2:	b003      	add	sp, #12
 80093d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80093d8:	2213      	movs	r2, #19
 80093da:	2100      	movs	r1, #0
 80093dc:	4620      	mov	r0, r4
 80093de:	f001 fa03 	bl	800a7e8 <lv_obj_get_style_prop>
 80093e2:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80093e4:	2212      	movs	r2, #18
 80093e6:	2100      	movs	r1, #0
 80093e8:	4620      	mov	r0, r4
 80093ea:	f001 f9fd 	bl	800a7e8 <lv_obj_get_style_prop>
 80093ee:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80093f0:	2232      	movs	r2, #50	; 0x32
 80093f2:	2100      	movs	r1, #0
 80093f4:	4620      	mov	r0, r4
 80093f6:	f001 f9f7 	bl	800a7e8 <lv_obj_get_style_prop>
 80093fa:	4682      	mov	sl, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80093fc:	4620      	mov	r0, r4
 80093fe:	f002 f94e 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8009402:	4680      	mov	r8, r0
 8009404:	2800      	cmp	r0, #0
 8009406:	d03c      	beq.n	8009482 <lv_obj_get_scroll_left+0xd2>
    lv_coord_t x1 = LV_COORD_MAX;
 8009408:	f641 77ff 	movw	r7, #8191	; 0x1fff
    for(i = 0; i < child_cnt; i++) {
 800940c:	2500      	movs	r5, #0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800940e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8009490 <lv_obj_get_scroll_left+0xe0>
 8009412:	e007      	b.n	8009424 <lv_obj_get_scroll_left+0x74>
        x1 = LV_MIN(x1, child->coords.x1);
 8009414:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8009418:	429f      	cmp	r7, r3
 800941a:	bfa8      	it	ge
 800941c:	461f      	movge	r7, r3
    for(i = 0; i < child_cnt; i++) {
 800941e:	3501      	adds	r5, #1
 8009420:	45a8      	cmp	r8, r5
 8009422:	d00a      	beq.n	800943a <lv_obj_get_scroll_left+0x8a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009424:	68a3      	ldr	r3, [r4, #8]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800942c:	4649      	mov	r1, r9
 800942e:	4630      	mov	r0, r6
 8009430:	f7fd fad5 	bl	80069de <lv_obj_has_flag_any>
 8009434:	2800      	cmp	r0, #0
 8009436:	d0ed      	beq.n	8009414 <lv_obj_get_scroll_left+0x64>
 8009438:	e7f1      	b.n	800941e <lv_obj_get_scroll_left+0x6e>
    if(x1 != LV_COORD_MAX) {
 800943a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800943e:	429f      	cmp	r7, r3
 8009440:	d021      	beq.n	8009486 <lv_obj_get_scroll_left+0xd6>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8009442:	eb0b 000a 	add.w	r0, fp, sl
 8009446:	8aa3      	ldrh	r3, [r4, #20]
 8009448:	4418      	add	r0, r3
 800944a:	1bc7      	subs	r7, r0, r7
 800944c:	b23f      	sxth	r7, r7
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 800944e:	4620      	mov	r0, r4
 8009450:	f7fe fbc4 	bl	8007bdc <lv_obj_get_self_width>
 8009454:	4606      	mov	r6, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8009456:	4620      	mov	r0, r4
 8009458:	f7fe fb47 	bl	8007aea <lv_obj_get_width>
 800945c:	4605      	mov	r5, r0
 800945e:	9b01      	ldr	r3, [sp, #4]
 8009460:	445b      	add	r3, fp
 8009462:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 8009466:	44b2      	add	sl, r6
 8009468:	fa1f fa8a 	uxth.w	sl, sl
    self_w += lv_obj_get_scroll_x(obj);
 800946c:	4620      	mov	r0, r4
 800946e:	f7ff ff1d 	bl	80092ac <lv_obj_get_scroll_x>
 8009472:	4482      	add	sl, r0
 8009474:	ebaa 0005 	sub.w	r0, sl, r5
    return LV_MAX(child_res, self_w);
 8009478:	b200      	sxth	r0, r0
 800947a:	42b8      	cmp	r0, r7
 800947c:	bfb8      	it	lt
 800947e:	4638      	movlt	r0, r7
 8009480:	e7a7      	b.n	80093d2 <lv_obj_get_scroll_left+0x22>
        child_res = LV_COORD_MIN;
 8009482:	4f04      	ldr	r7, [pc, #16]	; (8009494 <lv_obj_get_scroll_left+0xe4>)
 8009484:	e7e3      	b.n	800944e <lv_obj_get_scroll_left+0x9e>
 8009486:	4f03      	ldr	r7, [pc, #12]	; (8009494 <lv_obj_get_scroll_left+0xe4>)
 8009488:	e7e1      	b.n	800944e <lv_obj_get_scroll_left+0x9e>
        if(obj->spec_attr == NULL) return 0;
 800948a:	2000      	movs	r0, #0
 800948c:	e7a1      	b.n	80093d2 <lv_obj_get_scroll_left+0x22>
 800948e:	bf00      	nop
 8009490:	00040001 	.word	0x00040001
 8009494:	ffffe001 	.word	0xffffe001

08009498 <lv_obj_get_scroll_right>:
{
 8009498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800949c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800949e:	2216      	movs	r2, #22
 80094a0:	2100      	movs	r1, #0
 80094a2:	f001 f9a1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80094a6:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80094a8:	2801      	cmp	r0, #1
 80094aa:	d105      	bne.n	80094b8 <lv_obj_get_scroll_right+0x20>
        if(obj->spec_attr == NULL) return 0;
 80094ac:	68ab      	ldr	r3, [r5, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d052      	beq.n	8009558 <lv_obj_get_scroll_right+0xc0>
        return obj->spec_attr->scroll.x;
 80094b2:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
 80094b6:	e04d      	b.n	8009554 <lv_obj_get_scroll_right+0xbc>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80094b8:	4628      	mov	r0, r5
 80094ba:	f002 f8f0 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80094be:	4680      	mov	r8, r0
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d04b      	beq.n	800955c <lv_obj_get_scroll_right+0xc4>
 80094c4:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 80094c6:	4f2f      	ldr	r7, [pc, #188]	; (8009584 <lv_obj_get_scroll_right+0xec>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80094c8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8009588 <lv_obj_get_scroll_right+0xf0>
 80094cc:	e007      	b.n	80094de <lv_obj_get_scroll_right+0x46>
        child_res = LV_MAX(child_res, child->coords.x2);
 80094ce:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 80094d2:	429f      	cmp	r7, r3
 80094d4:	bfb8      	it	lt
 80094d6:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 80094d8:	3401      	adds	r4, #1
 80094da:	45a0      	cmp	r8, r4
 80094dc:	d00a      	beq.n	80094f4 <lv_obj_get_scroll_right+0x5c>
        lv_obj_t * child = obj->spec_attr->children[i];
 80094de:	68ab      	ldr	r3, [r5, #8]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80094e6:	4649      	mov	r1, r9
 80094e8:	4630      	mov	r0, r6
 80094ea:	f7fd fa78 	bl	80069de <lv_obj_has_flag_any>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d0ed      	beq.n	80094ce <lv_obj_get_scroll_right+0x36>
 80094f2:	e7f1      	b.n	80094d8 <lv_obj_get_scroll_right+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80094f4:	2213      	movs	r2, #19
 80094f6:	2100      	movs	r1, #0
 80094f8:	4628      	mov	r0, r5
 80094fa:	f001 f975 	bl	800a7e8 <lv_obj_get_style_prop>
 80094fe:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009500:	2212      	movs	r2, #18
 8009502:	2100      	movs	r1, #0
 8009504:	4628      	mov	r0, r5
 8009506:	f001 f96f 	bl	800a7e8 <lv_obj_get_style_prop>
 800950a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800950c:	2232      	movs	r2, #50	; 0x32
 800950e:	2100      	movs	r1, #0
 8009510:	4628      	mov	r0, r5
 8009512:	f001 f969 	bl	800a7e8 <lv_obj_get_style_prop>
 8009516:	4680      	mov	r8, r0
    if(child_res != LV_COORD_MIN) {
 8009518:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <lv_obj_get_scroll_right+0xec>)
 800951a:	429f      	cmp	r7, r3
 800951c:	d005      	beq.n	800952a <lv_obj_get_scroll_right+0x92>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 800951e:	eb09 0300 	add.w	r3, r9, r0
 8009522:	8b28      	ldrh	r0, [r5, #24]
 8009524:	1a1b      	subs	r3, r3, r0
 8009526:	441f      	add	r7, r3
 8009528:	b23f      	sxth	r7, r7
    self_w = lv_obj_get_self_width(obj);
 800952a:	4628      	mov	r0, r5
 800952c:	f7fe fb56 	bl	8007bdc <lv_obj_get_self_width>
 8009530:	4682      	mov	sl, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8009532:	4628      	mov	r0, r5
 8009534:	f7fe fad9 	bl	8007aea <lv_obj_get_width>
 8009538:	444c      	add	r4, r9
 800953a:	4454      	add	r4, sl
 800953c:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8009540:	1a24      	subs	r4, r4, r0
 8009542:	b2a4      	uxth	r4, r4
    self_w -= lv_obj_get_scroll_x(obj);
 8009544:	4628      	mov	r0, r5
 8009546:	f7ff feb1 	bl	80092ac <lv_obj_get_scroll_x>
 800954a:	1a20      	subs	r0, r4, r0
    return LV_MAX(child_res, self_w);
 800954c:	b200      	sxth	r0, r0
 800954e:	42b8      	cmp	r0, r7
 8009550:	bfb8      	it	lt
 8009552:	4638      	movlt	r0, r7
}
 8009554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(obj->spec_attr == NULL) return 0;
 8009558:	2000      	movs	r0, #0
 800955a:	e7fb      	b.n	8009554 <lv_obj_get_scroll_right+0xbc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800955c:	2213      	movs	r2, #19
 800955e:	2100      	movs	r1, #0
 8009560:	4628      	mov	r0, r5
 8009562:	f001 f941 	bl	800a7e8 <lv_obj_get_style_prop>
 8009566:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009568:	2212      	movs	r2, #18
 800956a:	2100      	movs	r1, #0
 800956c:	4628      	mov	r0, r5
 800956e:	f001 f93b 	bl	800a7e8 <lv_obj_get_style_prop>
 8009572:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009574:	2232      	movs	r2, #50	; 0x32
 8009576:	2100      	movs	r1, #0
 8009578:	4628      	mov	r0, r5
 800957a:	f001 f935 	bl	800a7e8 <lv_obj_get_style_prop>
 800957e:	4680      	mov	r8, r0
    if(child_res != LV_COORD_MIN) {
 8009580:	4f00      	ldr	r7, [pc, #0]	; (8009584 <lv_obj_get_scroll_right+0xec>)
 8009582:	e7d2      	b.n	800952a <lv_obj_get_scroll_right+0x92>
 8009584:	ffffe001 	.word	0xffffe001
 8009588:	00040001 	.word	0x00040001

0800958c <lv_obj_get_scroll_end>:
{
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4605      	mov	r5, r0
 8009590:	460c      	mov	r4, r1
    a = lv_anim_get(obj, scroll_x_anim);
 8009592:	490d      	ldr	r1, [pc, #52]	; (80095c8 <lv_obj_get_scroll_end+0x3c>)
 8009594:	f017 f986 	bl	80208a4 <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8009598:	b168      	cbz	r0, 80095b6 <lv_obj_get_scroll_end+0x2a>
 800959a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800959c:	425b      	negs	r3, r3
 800959e:	b21b      	sxth	r3, r3
 80095a0:	8023      	strh	r3, [r4, #0]
    a = lv_anim_get(obj, scroll_y_anim);
 80095a2:	490a      	ldr	r1, [pc, #40]	; (80095cc <lv_obj_get_scroll_end+0x40>)
 80095a4:	4628      	mov	r0, r5
 80095a6:	f017 f97d 	bl	80208a4 <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 80095aa:	b148      	cbz	r0, 80095c0 <lv_obj_get_scroll_end+0x34>
 80095ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80095ae:	4240      	negs	r0, r0
 80095b0:	b200      	sxth	r0, r0
 80095b2:	8060      	strh	r0, [r4, #2]
}
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 80095b6:	4628      	mov	r0, r5
 80095b8:	f7ff fe78 	bl	80092ac <lv_obj_get_scroll_x>
 80095bc:	4603      	mov	r3, r0
 80095be:	e7ef      	b.n	80095a0 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 80095c0:	4628      	mov	r0, r5
 80095c2:	f7ff fe7b 	bl	80092bc <lv_obj_get_scroll_y>
 80095c6:	e7f4      	b.n	80095b2 <lv_obj_get_scroll_end+0x26>
 80095c8:	08009635 	.word	0x08009635
 80095cc:	0800961d 	.word	0x0800961d

080095d0 <_lv_obj_scroll_by_raw>:
{
 80095d0:	b570      	push	{r4, r5, r6, lr}
    if(x == 0 && y == 0) return LV_RES_OK;
 80095d2:	ea51 0302 	orrs.w	r3, r1, r2
 80095d6:	d102      	bne.n	80095de <_lv_obj_scroll_by_raw+0xe>
 80095d8:	2501      	movs	r5, #1
}
 80095da:	4628      	mov	r0, r5
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
 80095de:	4604      	mov	r4, r0
 80095e0:	460d      	mov	r5, r1
 80095e2:	4616      	mov	r6, r2
    lv_obj_allocate_spec_attr(obj);
 80095e4:	f7fd fc1c 	bl	8006e20 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 80095e8:	68a2      	ldr	r2, [r4, #8]
 80095ea:	8a13      	ldrh	r3, [r2, #16]
 80095ec:	442b      	add	r3, r5
 80095ee:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
 80095f0:	68a2      	ldr	r2, [r4, #8]
 80095f2:	8a53      	ldrh	r3, [r2, #18]
 80095f4:	4433      	add	r3, r6
 80095f6:	8253      	strh	r3, [r2, #18]
    lv_obj_move_children_by(obj, x, y, true);
 80095f8:	2301      	movs	r3, #1
 80095fa:	4632      	mov	r2, r6
 80095fc:	4629      	mov	r1, r5
 80095fe:	4620      	mov	r0, r4
 8009600:	f7fe fb2a 	bl	8007c58 <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8009604:	2200      	movs	r2, #0
 8009606:	210b      	movs	r1, #11
 8009608:	4620      	mov	r0, r4
 800960a:	f7fa fb79 	bl	8003d00 <lv_event_send>
 800960e:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8009610:	2801      	cmp	r0, #1
 8009612:	d1e2      	bne.n	80095da <_lv_obj_scroll_by_raw+0xa>
    lv_obj_invalidate(obj);
 8009614:	4620      	mov	r0, r4
 8009616:	f7fe fcaf 	bl	8007f78 <lv_obj_invalidate>
    return LV_RES_OK;
 800961a:	e7de      	b.n	80095da <_lv_obj_scroll_by_raw+0xa>

0800961c <scroll_y_anim>:
{
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4604      	mov	r4, r0
 8009620:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8009622:	f7ff fe4b 	bl	80092bc <lv_obj_get_scroll_y>
 8009626:	1942      	adds	r2, r0, r5
 8009628:	b212      	sxth	r2, r2
 800962a:	2100      	movs	r1, #0
 800962c:	4620      	mov	r0, r4
 800962e:	f7ff ffcf 	bl	80095d0 <_lv_obj_scroll_by_raw>
}
 8009632:	bd38      	pop	{r3, r4, r5, pc}

08009634 <scroll_x_anim>:
{
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4604      	mov	r4, r0
 8009638:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 800963a:	f7ff fe37 	bl	80092ac <lv_obj_get_scroll_x>
 800963e:	1941      	adds	r1, r0, r5
 8009640:	2200      	movs	r2, #0
 8009642:	b209      	sxth	r1, r1
 8009644:	4620      	mov	r0, r4
 8009646:	f7ff ffc3 	bl	80095d0 <_lv_obj_scroll_by_raw>
}
 800964a:	bd38      	pop	{r3, r4, r5, pc}

0800964c <lv_obj_scroll_by>:
{
 800964c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800964e:	b093      	sub	sp, #76	; 0x4c
 8009650:	4604      	mov	r4, r0
 8009652:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 8009654:	460e      	mov	r6, r1
 8009656:	2900      	cmp	r1, #0
 8009658:	d178      	bne.n	800974c <lv_obj_scroll_by+0x100>
 800965a:	2a00      	cmp	r2, #0
 800965c:	f000 8087 	beq.w	800976e <lv_obj_scroll_by+0x122>
    if(anim_en == LV_ANIM_ON) {
 8009660:	2b01      	cmp	r3, #1
 8009662:	d175      	bne.n	8009750 <lv_obj_scroll_by+0x104>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8009664:	4620      	mov	r0, r4
 8009666:	f001 ffdd 	bl	800b624 <lv_obj_get_disp>
 800966a:	4607      	mov	r7, r0
        lv_anim_init(&a);
 800966c:	a801      	add	r0, sp, #4
 800966e:	f017 f883 	bl	8020778 <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 8009672:	9401      	str	r4, [sp, #4]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8009674:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <lv_obj_scroll_by+0x128>)
 8009676:	9304      	str	r3, [sp, #16]
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 8009678:	4638      	mov	r0, r7
 800967a:	f016 feb1 	bl	80203e0 <lv_disp_get_ver_res>
 800967e:	462a      	mov	r2, r5
 8009680:	2100      	movs	r1, #0
 8009682:	f340 005d 	sbfx	r0, r0, #1, #30
 8009686:	f017 f929 	bl	80208dc <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800968a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800968e:	bf28      	it	cs
 8009690:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8009694:	28c8      	cmp	r0, #200	; 0xc8
 8009696:	bf38      	it	cc
 8009698:	20c8      	movcc	r0, #200	; 0xc8
 800969a:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 800969c:	4620      	mov	r0, r4
 800969e:	f7ff fe0d 	bl	80092bc <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 80096a2:	4243      	negs	r3, r0
    a->start_value = start;
 80096a4:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 80096a6:	930a      	str	r3, [sp, #40]	; 0x28
 80096a8:	1a28      	subs	r0, r5, r0
    a->end_value = end;
 80096aa:	900b      	str	r0, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 80096ac:	4b32      	ldr	r3, [pc, #200]	; (8009778 <lv_obj_scroll_by+0x12c>)
 80096ae:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 80096b0:	4b32      	ldr	r3, [pc, #200]	; (800977c <lv_obj_scroll_by+0x130>)
 80096b2:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 80096b4:	aa01      	add	r2, sp, #4
 80096b6:	2109      	movs	r1, #9
 80096b8:	4620      	mov	r0, r4
 80096ba:	f7fa fb21 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 80096be:	2801      	cmp	r0, #1
 80096c0:	d155      	bne.n	800976e <lv_obj_scroll_by+0x122>
            lv_anim_start(&a);
 80096c2:	a801      	add	r0, sp, #4
 80096c4:	f017 f8aa 	bl	802081c <lv_anim_start>
 80096c8:	e051      	b.n	800976e <lv_obj_scroll_by+0x122>
        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 80096ca:	462a      	mov	r2, r5
 80096cc:	4631      	mov	r1, r6
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7ff ff7e 	bl	80095d0 <_lv_obj_scroll_by_raw>
        if(res != LV_RES_OK) return;
 80096d4:	2801      	cmp	r0, #1
 80096d6:	d14a      	bne.n	800976e <lv_obj_scroll_by+0x122>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 80096d8:	2200      	movs	r2, #0
 80096da:	210a      	movs	r1, #10
 80096dc:	4620      	mov	r0, r4
 80096de:	f7fa fb0f 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return;
 80096e2:	e044      	b.n	800976e <lv_obj_scroll_by+0x122>
        lv_disp_t * d = lv_obj_get_disp(obj);
 80096e4:	4620      	mov	r0, r4
 80096e6:	f001 ff9d 	bl	800b624 <lv_obj_get_disp>
 80096ea:	4607      	mov	r7, r0
        lv_anim_init(&a);
 80096ec:	a801      	add	r0, sp, #4
 80096ee:	f017 f843 	bl	8020778 <lv_anim_init>
    a->var = var;
 80096f2:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 80096f4:	4b1f      	ldr	r3, [pc, #124]	; (8009774 <lv_obj_scroll_by+0x128>)
 80096f6:	9304      	str	r3, [sp, #16]
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 80096f8:	4638      	mov	r0, r7
 80096fa:	f016 fe5d 	bl	80203b8 <lv_disp_get_hor_res>
 80096fe:	4632      	mov	r2, r6
 8009700:	2100      	movs	r1, #0
 8009702:	f340 005d 	sbfx	r0, r0, #1, #30
 8009706:	f017 f8e9 	bl	80208dc <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 800970a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800970e:	bf28      	it	cs
 8009710:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8009714:	28c8      	cmp	r0, #200	; 0xc8
 8009716:	bf38      	it	cc
 8009718:	20c8      	movcc	r0, #200	; 0xc8
 800971a:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 800971c:	4620      	mov	r0, r4
 800971e:	f7ff fdc5 	bl	80092ac <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 8009722:	4243      	negs	r3, r0
    a->start_value = start;
 8009724:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 8009726:	930a      	str	r3, [sp, #40]	; 0x28
 8009728:	1a30      	subs	r0, r6, r0
    a->end_value = end;
 800972a:	900b      	str	r0, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 800972c:	4b14      	ldr	r3, [pc, #80]	; (8009780 <lv_obj_scroll_by+0x134>)
 800972e:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8009730:	4b12      	ldr	r3, [pc, #72]	; (800977c <lv_obj_scroll_by+0x130>)
 8009732:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8009734:	aa01      	add	r2, sp, #4
 8009736:	2109      	movs	r1, #9
 8009738:	4620      	mov	r0, r4
 800973a:	f7fa fae1 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 800973e:	2801      	cmp	r0, #1
 8009740:	d115      	bne.n	800976e <lv_obj_scroll_by+0x122>
            lv_anim_start(&a);
 8009742:	a801      	add	r0, sp, #4
 8009744:	f017 f86a 	bl	802081c <lv_anim_start>
        if(dy) {
 8009748:	b18d      	cbz	r5, 800976e <lv_obj_scroll_by+0x122>
 800974a:	e795      	b.n	8009678 <lv_obj_scroll_by+0x2c>
    if(anim_en == LV_ANIM_ON) {
 800974c:	2b01      	cmp	r3, #1
 800974e:	d0c9      	beq.n	80096e4 <lv_obj_scroll_by+0x98>
        lv_anim_del(obj, scroll_y_anim);
 8009750:	4909      	ldr	r1, [pc, #36]	; (8009778 <lv_obj_scroll_by+0x12c>)
 8009752:	4620      	mov	r0, r4
 8009754:	f017 f82a 	bl	80207ac <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8009758:	4909      	ldr	r1, [pc, #36]	; (8009780 <lv_obj_scroll_by+0x134>)
 800975a:	4620      	mov	r0, r4
 800975c:	f017 f826 	bl	80207ac <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8009760:	2200      	movs	r2, #0
 8009762:	2109      	movs	r1, #9
 8009764:	4620      	mov	r0, r4
 8009766:	f7fa facb 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return;
 800976a:	2801      	cmp	r0, #1
 800976c:	d0ad      	beq.n	80096ca <lv_obj_scroll_by+0x7e>
}
 800976e:	b013      	add	sp, #76	; 0x4c
 8009770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009772:	bf00      	nop
 8009774:	080091ed 	.word	0x080091ed
 8009778:	0800961d 	.word	0x0800961d
 800977c:	080208fb 	.word	0x080208fb
 8009780:	08009635 	.word	0x08009635

08009784 <lv_obj_scroll_by_bounded>:
{
 8009784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009788:	4698      	mov	r8, r3
    if(dx == 0 && dy == 0) return;
 800978a:	ea51 0302 	orrs.w	r3, r1, r2
 800978e:	d101      	bne.n	8009794 <lv_obj_scroll_by_bounded+0x10>
}
 8009790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009794:	4607      	mov	r7, r0
 8009796:	460c      	mov	r4, r1
 8009798:	4615      	mov	r5, r2
    lv_obj_update_layout(obj);
 800979a:	f7ff faa1 	bl	8008ce0 <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 800979e:	4638      	mov	r0, r7
 80097a0:	f7ff fd84 	bl	80092ac <lv_obj_get_scroll_x>
 80097a4:	b286      	uxth	r6, r0
    lv_coord_t x_bounded = x_current + dx;
 80097a6:	1ba4      	subs	r4, r4, r6
 80097a8:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80097aa:	2216      	movs	r2, #22
 80097ac:	2100      	movs	r1, #0
 80097ae:	4638      	mov	r0, r7
 80097b0:	f001 f81a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80097b4:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80097b6:	2801      	cmp	r0, #1
 80097b8:	d02e      	beq.n	8009818 <lv_obj_scroll_by_bounded+0x94>
        if(x_bounded > 0) x_bounded = 0;
 80097ba:	2c00      	cmp	r4, #0
 80097bc:	dd1a      	ble.n	80097f4 <lv_obj_scroll_by_bounded+0x70>
 80097be:	2400      	movs	r4, #0
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff fd7b 	bl	80092bc <lv_obj_get_scroll_y>
 80097c6:	fa1f f980 	uxth.w	r9, r0
    lv_coord_t y_bounded = y_current + dy;
 80097ca:	eba5 0509 	sub.w	r5, r5, r9
 80097ce:	b22d      	sxth	r5, r5
    if(y_bounded > 0) y_bounded = 0;
 80097d0:	2d00      	cmp	r5, #0
 80097d2:	dd36      	ble.n	8009842 <lv_obj_scroll_by_bounded+0xbe>
 80097d4:	2500      	movs	r5, #0
    dx = x_bounded - x_current;
 80097d6:	1931      	adds	r1, r6, r4
 80097d8:	b289      	uxth	r1, r1
    dy = y_bounded - y_current;
 80097da:	eb09 0205 	add.w	r2, r9, r5
 80097de:	b292      	uxth	r2, r2
    if(dx || dy) {
 80097e0:	ea51 0302 	orrs.w	r3, r1, r2
 80097e4:	d0d4      	beq.n	8009790 <lv_obj_scroll_by_bounded+0xc>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 80097e6:	4643      	mov	r3, r8
 80097e8:	b212      	sxth	r2, r2
 80097ea:	b209      	sxth	r1, r1
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7ff ff2d 	bl	800964c <lv_obj_scroll_by>
 80097f2:	e7cd      	b.n	8009790 <lv_obj_scroll_by_bounded+0xc>
        if(x_bounded < 0) {
 80097f4:	dae4      	bge.n	80097c0 <lv_obj_scroll_by_bounded+0x3c>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 80097f6:	4638      	mov	r0, r7
 80097f8:	f7ff fdda 	bl	80093b0 <lv_obj_get_scroll_left>
 80097fc:	4681      	mov	r9, r0
 80097fe:	4638      	mov	r0, r7
 8009800:	f7ff fe4a 	bl	8009498 <lv_obj_get_scroll_right>
 8009804:	eb09 0300 	add.w	r3, r9, r0
 8009808:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 800980a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 800980e:	425a      	negs	r2, r3
 8009810:	4294      	cmp	r4, r2
 8009812:	dad5      	bge.n	80097c0 <lv_obj_scroll_by_bounded+0x3c>
 8009814:	b214      	sxth	r4, r2
 8009816:	e7d3      	b.n	80097c0 <lv_obj_scroll_by_bounded+0x3c>
        if(x_bounded < 0) x_bounded = 0;
 8009818:	2c00      	cmp	r4, #0
 800981a:	db10      	blt.n	800983e <lv_obj_scroll_by_bounded+0xba>
        if(x_bounded > 0) {
 800981c:	ddd0      	ble.n	80097c0 <lv_obj_scroll_by_bounded+0x3c>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 800981e:	4638      	mov	r0, r7
 8009820:	f7ff fdc6 	bl	80093b0 <lv_obj_get_scroll_left>
 8009824:	4681      	mov	r9, r0
 8009826:	4638      	mov	r0, r7
 8009828:	f7ff fe36 	bl	8009498 <lv_obj_get_scroll_right>
 800982c:	4481      	add	r9, r0
 800982e:	fa0f f989 	sxth.w	r9, r9
            if(x_bounded > scroll_max) x_bounded = scroll_max;
 8009832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009836:	454c      	cmp	r4, r9
 8009838:	bfa8      	it	ge
 800983a:	464c      	movge	r4, r9
 800983c:	e7c0      	b.n	80097c0 <lv_obj_scroll_by_bounded+0x3c>
        if(x_bounded < 0) x_bounded = 0;
 800983e:	2400      	movs	r4, #0
 8009840:	e7be      	b.n	80097c0 <lv_obj_scroll_by_bounded+0x3c>
    if(y_bounded < 0) {
 8009842:	dac8      	bge.n	80097d6 <lv_obj_scroll_by_bounded+0x52>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8009844:	4638      	mov	r0, r7
 8009846:	f7ff fd41 	bl	80092cc <lv_obj_get_scroll_top>
 800984a:	4682      	mov	sl, r0
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff fd45 	bl	80092dc <lv_obj_get_scroll_bottom>
 8009852:	eb0a 0300 	add.w	r3, sl, r0
 8009856:	b21b      	sxth	r3, r3
        if(scroll_max < 0) scroll_max = 0;
 8009858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 800985c:	425a      	negs	r2, r3
 800985e:	4295      	cmp	r5, r2
 8009860:	dab9      	bge.n	80097d6 <lv_obj_scroll_by_bounded+0x52>
 8009862:	b215      	sxth	r5, r2
 8009864:	e7b7      	b.n	80097d6 <lv_obj_scroll_by_bounded+0x52>
	...

08009868 <lv_obj_scroll_to_x>:
{
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	4604      	mov	r4, r0
 800986c:	460e      	mov	r6, r1
 800986e:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_x_anim);
 8009870:	4906      	ldr	r1, [pc, #24]	; (800988c <lv_obj_scroll_to_x+0x24>)
 8009872:	f016 ff9b 	bl	80207ac <lv_anim_del>
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 8009876:	4620      	mov	r0, r4
 8009878:	f7ff fd18 	bl	80092ac <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 800987c:	1b81      	subs	r1, r0, r6
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 800987e:	462b      	mov	r3, r5
 8009880:	2200      	movs	r2, #0
 8009882:	b209      	sxth	r1, r1
 8009884:	4620      	mov	r0, r4
 8009886:	f7ff ff7d 	bl	8009784 <lv_obj_scroll_by_bounded>
}
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	08009635 	.word	0x08009635

08009890 <lv_obj_scroll_to_y>:
{
 8009890:	b570      	push	{r4, r5, r6, lr}
 8009892:	4604      	mov	r4, r0
 8009894:	460e      	mov	r6, r1
 8009896:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_y_anim);
 8009898:	4906      	ldr	r1, [pc, #24]	; (80098b4 <lv_obj_scroll_to_y+0x24>)
 800989a:	f016 ff87 	bl	80207ac <lv_anim_del>
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 800989e:	4620      	mov	r0, r4
 80098a0:	f7ff fd0c 	bl	80092bc <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 80098a4:	1b80      	subs	r0, r0, r6
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 80098a6:	462b      	mov	r3, r5
 80098a8:	b202      	sxth	r2, r0
 80098aa:	2100      	movs	r1, #0
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7ff ff69 	bl	8009784 <lv_obj_scroll_by_bounded>
}
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
 80098b4:	0800961d 	.word	0x0800961d

080098b8 <lv_obj_scroll_to>:
{
 80098b8:	b570      	push	{r4, r5, r6, lr}
 80098ba:	4605      	mov	r5, r0
 80098bc:	4616      	mov	r6, r2
 80098be:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 80098c0:	461a      	mov	r2, r3
 80098c2:	f7ff ffd1 	bl	8009868 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 80098c6:	4622      	mov	r2, r4
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	f7ff ffe0 	bl	8009890 <lv_obj_scroll_to_y>
}
 80098d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080098d4 <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 80098d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	b08b      	sub	sp, #44	; 0x2c
 80098da:	4680      	mov	r8, r0
 80098dc:	460d      	mov	r5, r1
 80098de:	9103      	str	r1, [sp, #12]
 80098e0:	4617      	mov	r7, r2
 80098e2:	9302      	str	r3, [sp, #8]
    lv_obj_t * parent = lv_obj_get_parent(child);
 80098e4:	4608      	mov	r0, r1
 80098e6:	f001 fec1 	bl	800b66c <lv_obj_get_parent>
 80098ea:	4604      	mov	r4, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 80098ec:	2110      	movs	r1, #16
 80098ee:	f7fd f86f 	bl	80069d0 <lv_obj_has_flag>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f000 80db 	beq.w	8009aae <scroll_area_into_view+0x1da>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7ff fcbf 	bl	800927c <lv_obj_get_scroll_dir>
 80098fe:	9001      	str	r0, [sp, #4]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8009900:	4620      	mov	r0, r4
 8009902:	f7ff fccb 	bl	800929c <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8009906:	4683      	mov	fp, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d038      	beq.n	800997e <scroll_area_into_view+0xaa>
 800990c:	f105 0a14 	add.w	sl, r5, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009910:	2232      	movs	r2, #50	; 0x32
 8009912:	2100      	movs	r1, #0
 8009914:	4620      	mov	r0, r4
 8009916:	f000 ff67 	bl	800a7e8 <lv_obj_get_style_prop>
 800991a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800991c:	2210      	movs	r2, #16
 800991e:	2100      	movs	r1, #0
 8009920:	4620      	mov	r0, r4
 8009922:	f000 ff61 	bl	800a7e8 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8009926:	b2ad      	uxth	r5, r5
 8009928:	4428      	add	r0, r5
 800992a:	b286      	uxth	r6, r0
 800992c:	9604      	str	r6, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800992e:	2211      	movs	r2, #17
 8009930:	2100      	movs	r1, #0
 8009932:	4620      	mov	r0, r4
 8009934:	f000 ff58 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8009938:	4428      	add	r0, r5
 800993a:	b281      	uxth	r1, r0
 800993c:	9105      	str	r1, [sp, #20]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800993e:	887b      	ldrh	r3, [r7, #2]
 8009940:	1af6      	subs	r6, r6, r3
 8009942:	8ae2      	ldrh	r2, [r4, #22]
 8009944:	4416      	add	r6, r2
 8009946:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800994a:	1ab6      	subs	r6, r6, r2
 800994c:	b236      	sxth	r6, r6
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800994e:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009952:	9207      	str	r2, [sp, #28]
 8009954:	8b60      	ldrh	r0, [r4, #26]
 8009956:	9008      	str	r0, [sp, #32]
 8009958:	440b      	add	r3, r1
 800995a:	b29b      	uxth	r3, r3
 800995c:	9309      	str	r3, [sp, #36]	; 0x24
 800995e:	eba3 0900 	sub.w	r9, r3, r0
 8009962:	4491      	add	r9, r2
 8009964:	fa0f f989 	sxth.w	r9, r9
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8009968:	4620      	mov	r0, r4
 800996a:	f7fe f8c4 	bl	8007af6 <lv_obj_get_height>
 800996e:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 8009970:	2e00      	cmp	r6, #0
 8009972:	db06      	blt.n	8009982 <scroll_area_into_view+0xae>
 8009974:	f1b9 0f00 	cmp.w	r9, #0
 8009978:	db03      	blt.n	8009982 <scroll_area_into_view+0xae>
 800997a:	2600      	movs	r6, #0
 800997c:	e00b      	b.n	8009996 <scroll_area_into_view+0xc2>
    else area_tmp = area;
 800997e:	46c2      	mov	sl, r8
 8009980:	e7c6      	b.n	8009910 <scroll_area_into_view+0x3c>
    else if(top_diff > 0) {
 8009982:	2e00      	cmp	r6, #0
 8009984:	f340 8096 	ble.w	8009ab4 <scroll_area_into_view+0x1e0>
        y_scroll = top_diff;
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8009988:	4620      	mov	r0, r4
 800998a:	f7ff fc9f 	bl	80092cc <lv_obj_get_scroll_top>
        if(st - y_scroll < 0) y_scroll = 0;
 800998e:	1b80      	subs	r0, r0, r6
 8009990:	2800      	cmp	r0, #0
 8009992:	bfb8      	it	lt
 8009994:	2600      	movlt	r6, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 8009996:	f1bb 0f02 	cmp.w	fp, #2
 800999a:	f000 80a6 	beq.w	8009aea <scroll_area_into_view+0x216>
 800999e:	f1bb 0f03 	cmp.w	fp, #3
 80099a2:	f000 80aa 	beq.w	8009afa <scroll_area_into_view+0x226>
 80099a6:	f1bb 0f01 	cmp.w	fp, #1
 80099aa:	f000 8095 	beq.w	8009ad8 <scroll_area_into_view+0x204>
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7ff fc6c 	bl	800928c <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 80099b4:	4682      	mov	sl, r0
 80099b6:	b110      	cbz	r0, 80099be <scroll_area_into_view+0xea>
 80099b8:	9b03      	ldr	r3, [sp, #12]
 80099ba:	f103 0814 	add.w	r8, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80099be:	2212      	movs	r2, #18
 80099c0:	2100      	movs	r1, #0
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 ff10 	bl	800a7e8 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 80099c8:	eb05 0900 	add.w	r9, r5, r0
 80099cc:	fa1f f989 	uxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80099d0:	2213      	movs	r2, #19
 80099d2:	2100      	movs	r1, #0
 80099d4:	4620      	mov	r0, r4
 80099d6:	f000 ff07 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 80099da:	4405      	add	r5, r0
 80099dc:	fa1f fb85 	uxth.w	fp, r5
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 80099e0:	883b      	ldrh	r3, [r7, #0]
 80099e2:	eba9 0503 	sub.w	r5, r9, r3
 80099e6:	8aa2      	ldrh	r2, [r4, #20]
 80099e8:	4415      	add	r5, r2
 80099ea:	f8b8 2000 	ldrh.w	r2, [r8]
 80099ee:	1aad      	subs	r5, r5, r2
 80099f0:	b22d      	sxth	r5, r5
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 80099f2:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80099f6:	8b21      	ldrh	r1, [r4, #24]
 80099f8:	445b      	add	r3, fp
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	1a5a      	subs	r2, r3, r1
 80099fe:	4402      	add	r2, r0
 8009a00:	b212      	sxth	r2, r2
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 8009a02:	2d00      	cmp	r5, #0
 8009a04:	f2c0 8095 	blt.w	8009b32 <scroll_area_into_view+0x25e>
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	f2c0 8092 	blt.w	8009b32 <scroll_area_into_view+0x25e>
 8009a0e:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8009a10:	4620      	mov	r0, r4
 8009a12:	f7fe f86a 	bl	8007aea <lv_obj_get_width>
    switch(snap_x) {
 8009a16:	f1ba 0f02 	cmp.w	sl, #2
 8009a1a:	f000 80aa 	beq.w	8009b72 <scroll_area_into_view+0x29e>
 8009a1e:	f1ba 0f03 	cmp.w	sl, #3
 8009a22:	f000 80af 	beq.w	8009b84 <scroll_area_into_view+0x2b0>
 8009a26:	f1ba 0f01 	cmp.w	sl, #1
 8009a2a:	f000 809a 	beq.w	8009b62 <scroll_area_into_view+0x28e>
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 8009a2e:	4965      	ldr	r1, [pc, #404]	; (8009bc4 <scroll_area_into_view+0x2f0>)
 8009a30:	4620      	mov	r0, r4
 8009a32:	f016 febb 	bl	80207ac <lv_anim_del>
 8009a36:	4680      	mov	r8, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 8009a38:	4963      	ldr	r1, [pc, #396]	; (8009bc8 <scroll_area_into_view+0x2f4>)
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f016 feb6 	bl	80207ac <lv_anim_del>
    if(y_del || x_del) {
 8009a40:	f1b8 0f00 	cmp.w	r8, #0
 8009a44:	d100      	bne.n	8009a48 <scroll_area_into_view+0x174>
 8009a46:	b130      	cbz	r0, 8009a56 <scroll_area_into_view+0x182>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 8009a48:	2200      	movs	r2, #0
 8009a4a:	210a      	movs	r1, #10
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f7fa f957 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return;
 8009a52:	2801      	cmp	r0, #1
 8009a54:	d12b      	bne.n	8009aae <scroll_area_into_view+0x1da>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	f013 0f01 	tst.w	r3, #1
 8009a5c:	bf04      	itt	eq
 8009a5e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a62:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	f013 0f02 	tst.w	r3, #2
 8009a6a:	bf04      	itt	eq
 8009a6c:	ea05 75e5 	andeq.w	r5, r5, r5, asr #31
 8009a70:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 8009a72:	9b01      	ldr	r3, [sp, #4]
 8009a74:	f013 0f04 	tst.w	r3, #4
 8009a78:	bf04      	itt	eq
 8009a7a:	ea26 76e6 	biceq.w	r6, r6, r6, asr #31
 8009a7e:	b236      	sxtheq	r6, r6
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	f013 0f08 	tst.w	r3, #8
 8009a86:	bf04      	itt	eq
 8009a88:	ea06 76e6 	andeq.w	r6, r6, r6, asr #31
 8009a8c:	b236      	sxtheq	r6, r6

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8009a8e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009a92:	9a02      	ldr	r2, [sp, #8]
 8009a94:	2a00      	cmp	r2, #0
 8009a96:	f040 8090 	bne.w	8009bba <scroll_area_into_view+0x2e6>
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8009a9a:	887b      	ldrh	r3, [r7, #2]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4413      	add	r3, r2
 8009aa0:	807b      	strh	r3, [r7, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 8009aa2:	9b02      	ldr	r3, [sp, #8]
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7ff fdcf 	bl	800964c <lv_obj_scroll_by>
}
 8009aae:	b00b      	add	sp, #44	; 0x2c
 8009ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(bottom_diff > 0) {
 8009ab4:	f1b9 0f00 	cmp.w	r9, #0
 8009ab8:	dc01      	bgt.n	8009abe <scroll_area_into_view+0x1ea>
    lv_coord_t y_scroll = 0;
 8009aba:	2600      	movs	r6, #0
 8009abc:	e76b      	b.n	8009996 <scroll_area_into_view+0xc2>
        y_scroll = -bottom_diff;
 8009abe:	9b08      	ldr	r3, [sp, #32]
 8009ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ac2:	1a9e      	subs	r6, r3, r2
 8009ac4:	9b07      	ldr	r3, [sp, #28]
 8009ac6:	1af6      	subs	r6, r6, r3
 8009ac8:	b236      	sxth	r6, r6
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 8009aca:	4620      	mov	r0, r4
 8009acc:	f7ff fc06 	bl	80092dc <lv_obj_get_scroll_bottom>
        if(sb + y_scroll < 0) y_scroll = 0;
 8009ad0:	42f0      	cmn	r0, r6
 8009ad2:	bf48      	it	mi
 8009ad4:	2600      	movmi	r6, #0
 8009ad6:	e75e      	b.n	8009996 <scroll_area_into_view+0xc2>
            y_scroll += snap_goal - act;
 8009ad8:	8ae6      	ldrh	r6, [r4, #22]
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	4433      	add	r3, r6
 8009ade:	461e      	mov	r6, r3
 8009ae0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8009ae4:	1af6      	subs	r6, r6, r3
 8009ae6:	b236      	sxth	r6, r6
            break;
 8009ae8:	e761      	b.n	80099ae <scroll_area_into_view+0xda>
            y_scroll += snap_goal - act;
 8009aea:	8b66      	ldrh	r6, [r4, #26]
 8009aec:	9b05      	ldr	r3, [sp, #20]
 8009aee:	1af6      	subs	r6, r6, r3
 8009af0:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8009af4:	1af6      	subs	r6, r6, r3
 8009af6:	b236      	sxth	r6, r6
            break;
 8009af8:	e759      	b.n	80099ae <scroll_area_into_view+0xda>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009afa:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 8009afe:	9805      	ldr	r0, [sp, #20]
 8009b00:	9904      	ldr	r1, [sp, #16]
 8009b02:	4408      	add	r0, r1
 8009b04:	9a06      	ldr	r2, [sp, #24]
 8009b06:	1a10      	subs	r0, r2, r0
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 8009b08:	b206      	sxth	r6, r0
 8009b0a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8009b0e:	4430      	add	r0, r6
            y_scroll += snap_goal - act;
 8009b10:	8ae6      	ldrh	r6, [r4, #22]
 8009b12:	440e      	add	r6, r1
 8009b14:	1af6      	subs	r6, r6, r3
 8009b16:	eb06 0660 	add.w	r6, r6, r0, asr #1
 8009b1a:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009b1e:	3201      	adds	r2, #1
 8009b20:	1ad3      	subs	r3, r2, r3
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 8009b22:	b21a      	sxth	r2, r3
 8009b24:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8009b28:	4413      	add	r3, r2
            y_scroll += snap_goal - act;
 8009b2a:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 8009b2e:	b236      	sxth	r6, r6
            break;
 8009b30:	e73d      	b.n	80099ae <scroll_area_into_view+0xda>
    else if(left_diff > 0) {
 8009b32:	2d00      	cmp	r5, #0
 8009b34:	dc03      	bgt.n	8009b3e <scroll_area_into_view+0x26a>
    else if(right_diff > 0) {
 8009b36:	2a00      	cmp	r2, #0
 8009b38:	dc09      	bgt.n	8009b4e <scroll_area_into_view+0x27a>
    lv_coord_t x_scroll = 0;
 8009b3a:	2500      	movs	r5, #0
 8009b3c:	e768      	b.n	8009a10 <scroll_area_into_view+0x13c>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f7ff fc36 	bl	80093b0 <lv_obj_get_scroll_left>
        if(sl - x_scroll < 0) x_scroll = 0;
 8009b44:	1b40      	subs	r0, r0, r5
 8009b46:	2800      	cmp	r0, #0
 8009b48:	bfb8      	it	lt
 8009b4a:	2500      	movlt	r5, #0
 8009b4c:	e760      	b.n	8009a10 <scroll_area_into_view+0x13c>
        x_scroll = -right_diff;
 8009b4e:	1acb      	subs	r3, r1, r3
 8009b50:	1a18      	subs	r0, r3, r0
 8009b52:	b205      	sxth	r5, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 8009b54:	4620      	mov	r0, r4
 8009b56:	f7ff fc9f 	bl	8009498 <lv_obj_get_scroll_right>
        if(sr + x_scroll < 0) x_scroll = 0;
 8009b5a:	42e8      	cmn	r0, r5
 8009b5c:	bf48      	it	mi
 8009b5e:	2500      	movmi	r5, #0
 8009b60:	e756      	b.n	8009a10 <scroll_area_into_view+0x13c>
            x_scroll += snap_goal - act;
 8009b62:	8aa5      	ldrh	r5, [r4, #20]
 8009b64:	444d      	add	r5, r9
 8009b66:	f8b8 9000 	ldrh.w	r9, [r8]
 8009b6a:	eba5 0509 	sub.w	r5, r5, r9
 8009b6e:	b22d      	sxth	r5, r5
            break;
 8009b70:	e75d      	b.n	8009a2e <scroll_area_into_view+0x15a>
            x_scroll += snap_goal - act;
 8009b72:	8b25      	ldrh	r5, [r4, #24]
 8009b74:	eba5 050b 	sub.w	r5, r5, fp
 8009b78:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009b7c:	eba5 050b 	sub.w	r5, r5, fp
 8009b80:	b22d      	sxth	r5, r5
            break;
 8009b82:	e754      	b.n	8009a2e <scroll_area_into_view+0x15a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009b84:	f8b8 2000 	ldrh.w	r2, [r8]
            x_scroll += snap_goal - act;
 8009b88:	8aa5      	ldrh	r5, [r4, #20]
 8009b8a:	444d      	add	r5, r9
 8009b8c:	1aad      	subs	r5, r5, r2
 8009b8e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8009b92:	3301      	adds	r3, #1
 8009b94:	1a9b      	subs	r3, r3, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 8009b96:	b21a      	sxth	r2, r3
 8009b98:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8009b9c:	4413      	add	r3, r2
            x_scroll += snap_goal - act;
 8009b9e:	eba5 0563 	sub.w	r5, r5, r3, asr #1
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 8009ba2:	44d9      	add	r9, fp
 8009ba4:	eba0 0909 	sub.w	r9, r0, r9
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 8009ba8:	fa0f f089 	sxth.w	r0, r9
 8009bac:	f3c9 39c0 	ubfx	r9, r9, #15, #1
 8009bb0:	4481      	add	r9, r0
            x_scroll += snap_goal - act;
 8009bb2:	eb05 0569 	add.w	r5, r5, r9, asr #1
 8009bb6:	b22d      	sxth	r5, r5
            break;
 8009bb8:	e739      	b.n	8009a2e <scroll_area_into_view+0x15a>
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 8009bba:	442b      	add	r3, r5
 8009bbc:	803b      	strh	r3, [r7, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 8009bbe:	887b      	ldrh	r3, [r7, #2]
 8009bc0:	4632      	mov	r2, r6
 8009bc2:	e76c      	b.n	8009a9e <scroll_area_into_view+0x1ca>
 8009bc4:	0800961d 	.word	0x0800961d
 8009bc8:	08009635 	.word	0x08009635

08009bcc <lv_obj_scroll_to_view_recursive>:
{
 8009bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
    lv_obj_update_layout(obj);
 8009bd4:	f7ff f884 	bl	8008ce0 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009bde:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8009be2:	4630      	mov	r0, r6
 8009be4:	f001 fd42 	bl	800b66c <lv_obj_get_parent>
    while(parent) {
 8009be8:	b178      	cbz	r0, 8009c0a <lv_obj_scroll_to_view_recursive+0x3e>
 8009bea:	4604      	mov	r4, r0
    lv_obj_t * child = obj;
 8009bec:	4635      	mov	r5, r6
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 8009bee:	3614      	adds	r6, #20
 8009bf0:	463b      	mov	r3, r7
 8009bf2:	aa01      	add	r2, sp, #4
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7ff fe6c 	bl	80098d4 <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 8009bfc:	4625      	mov	r5, r4
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f001 fd34 	bl	800b66c <lv_obj_get_parent>
    while(parent) {
 8009c04:	4604      	mov	r4, r0
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d1f2      	bne.n	8009bf0 <lv_obj_scroll_to_view_recursive+0x24>
}
 8009c0a:	b003      	add	sp, #12
 8009c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009c10 <lv_obj_get_scrollbar_area>:
{
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	b093      	sub	sp, #76	; 0x4c
 8009c16:	4604      	mov	r4, r0
 8009c18:	468b      	mov	fp, r1
 8009c1a:	4615      	mov	r5, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 8009c1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009c20:	9600      	str	r6, [sp, #0]
 8009c22:	4633      	mov	r3, r6
 8009c24:	2200      	movs	r2, #0
 8009c26:	4611      	mov	r1, r2
 8009c28:	4658      	mov	r0, fp
 8009c2a:	f016 fecb 	bl	80209c4 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 8009c2e:	9600      	str	r6, [sp, #0]
 8009c30:	4633      	mov	r3, r6
 8009c32:	2200      	movs	r2, #0
 8009c34:	4611      	mov	r1, r2
 8009c36:	4628      	mov	r0, r5
 8009c38:	f016 fec4 	bl	80209c4 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 8009c3c:	2110      	movs	r1, #16
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f7fc fec6 	bl	80069d0 <lv_obj_has_flag>
 8009c44:	b128      	cbz	r0, 8009c52 <lv_obj_get_scrollbar_area+0x42>
 8009c46:	4606      	mov	r6, r0
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7ff fb0f 	bl	800926c <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 8009c4e:	4681      	mov	r9, r0
 8009c50:	b910      	cbnz	r0, 8009c58 <lv_obj_get_scrollbar_area+0x48>
}
 8009c52:	b013      	add	sp, #76	; 0x4c
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8009c58:	2000      	movs	r0, #0
 8009c5a:	f016 fc37 	bl	80204cc <lv_indev_get_next>
 8009c5e:	4607      	mov	r7, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 8009c60:	f1b9 0f02 	cmp.w	r9, #2
 8009c64:	d13d      	bne.n	8009ce2 <lv_obj_get_scrollbar_area+0xd2>
        while(indev) {
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d0f3      	beq.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f7fa fc92 	bl	8004594 <lv_indev_get_scroll_obj>
 8009c70:	4284      	cmp	r4, r0
 8009c72:	d006      	beq.n	8009c82 <lv_obj_get_scrollbar_area+0x72>
            indev = lv_indev_get_next(indev);
 8009c74:	4638      	mov	r0, r7
 8009c76:	f016 fc29 	bl	80204cc <lv_indev_get_next>
        while(indev) {
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d1f4      	bne.n	8009c6a <lv_obj_get_scrollbar_area+0x5a>
 8009c80:	e7e7      	b.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
        if(indev == NULL)  return;
 8009c82:	2f00      	cmp	r7, #0
 8009c84:	d0e5      	beq.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7ff fb20 	bl	80092cc <lv_obj_get_scroll_top>
 8009c8c:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f7ff fb24 	bl	80092dc <lv_obj_get_scroll_bottom>
 8009c94:	9003      	str	r0, [sp, #12]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7ff fb8a 	bl	80093b0 <lv_obj_get_scroll_left>
 8009c9c:	9004      	str	r0, [sp, #16]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff fbfa 	bl	8009498 <lv_obj_get_scroll_right>
 8009ca4:	9005      	str	r0, [sp, #20]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7ff fae8 	bl	800927c <lv_obj_get_scroll_dir>
 8009cac:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
 8009cae:	f010 0f0c 	tst.w	r0, #12
 8009cb2:	f040 8142 	bne.w	8009f3a <lv_obj_get_scrollbar_area+0x32a>
    if((dir & LV_DIR_HOR) &&
 8009cb6:	f010 0f03 	tst.w	r0, #3
 8009cba:	d0ca      	beq.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8009cbc:	f1b9 0f03 	cmp.w	r9, #3
 8009cc0:	bf08      	it	eq
 8009cc2:	f04f 0900 	moveq.w	r9, #0
 8009cc6:	f000 812b 	beq.w	8009f20 <lv_obj_get_scrollbar_area+0x310>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8009cca:	f1b9 0f02 	cmp.w	r9, #2
 8009cce:	f040 8145 	bne.w	8009f5c <lv_obj_get_scrollbar_area+0x34c>
 8009cd2:	f04f 0900 	mov.w	r9, #0
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f7fa fc4c 	bl	8004574 <lv_indev_get_scroll_dir>
 8009cdc:	2803      	cmp	r0, #3
 8009cde:	d128      	bne.n	8009d32 <lv_obj_get_scrollbar_area+0x122>
 8009ce0:	e02b      	b.n	8009d3a <lv_obj_get_scrollbar_area+0x12a>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff faf2 	bl	80092cc <lv_obj_get_scroll_top>
 8009ce8:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff faf6 	bl	80092dc <lv_obj_get_scroll_bottom>
 8009cf0:	9003      	str	r0, [sp, #12]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f7ff fb5c 	bl	80093b0 <lv_obj_get_scroll_left>
 8009cf8:	9004      	str	r0, [sp, #16]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f7ff fbcc 	bl	8009498 <lv_obj_get_scroll_right>
 8009d00:	9005      	str	r0, [sp, #20]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff faba 	bl	800927c <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 8009d08:	f010 0f0c 	tst.w	r0, #12
 8009d0c:	f000 839e 	beq.w	800a44c <lv_obj_get_scrollbar_area+0x83c>
 8009d10:	f1b9 0f01 	cmp.w	r9, #1
 8009d14:	f000 83a6 	beq.w	800a464 <lv_obj_get_scrollbar_area+0x854>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8009d18:	f1b9 0f03 	cmp.w	r9, #3
 8009d1c:	f000 80f7 	beq.w	8009f0e <lv_obj_get_scrollbar_area+0x2fe>
    if((dir & LV_DIR_HOR) &&
 8009d20:	f010 0f03 	tst.w	r0, #3
 8009d24:	d095      	beq.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8009d26:	f1b9 0f03 	cmp.w	r9, #3
 8009d2a:	f000 8114 	beq.w	8009f56 <lv_obj_get_scrollbar_area+0x346>
 8009d2e:	f04f 0900 	mov.w	r9, #0
    if(!hor_draw && !ver_draw) return;
 8009d32:	f1b9 0f00 	cmp.w	r9, #0
 8009d36:	d08c      	beq.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
 8009d38:	2600      	movs	r6, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8009d3a:	2216      	movs	r2, #22
 8009d3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fd51 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8009d46:	b2c3      	uxtb	r3, r0
 8009d48:	930d      	str	r3, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009d4a:	2210      	movs	r2, #16
 8009d4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 fd49 	bl	800a7e8 <lv_obj_get_style_prop>
 8009d56:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009d58:	2211      	movs	r2, #17
 8009d5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 fd42 	bl	800a7e8 <lv_obj_get_style_prop>
 8009d64:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009d66:	2212      	movs	r2, #18
 8009d68:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 fd3b 	bl	800a7e8 <lv_obj_get_style_prop>
 8009d72:	900c      	str	r0, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009d74:	2213      	movs	r2, #19
 8009d76:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 fd34 	bl	800a7e8 <lv_obj_get_style_prop>
 8009d80:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8009d82:	2201      	movs	r2, #1
 8009d84:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fd2d 	bl	800a7e8 <lv_obj_get_style_prop>
 8009d8e:	900b      	str	r0, [sp, #44]	; 0x2c
    return (lv_coord_t)v.num;
 8009d90:	b207      	sxth	r7, r0
    lv_coord_t obj_h = lv_obj_get_height(obj);
 8009d92:	4620      	mov	r0, r4
 8009d94:	f7fd feaf 	bl	8007af6 <lv_obj_get_height>
 8009d98:	4682      	mov	sl, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f7fd fea5 	bl	8007aea <lv_obj_get_width>
 8009da0:	9006      	str	r0, [sp, #24]
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	bf14      	ite	ne
 8009da8:	463b      	movne	r3, r7
 8009daa:	2300      	moveq	r3, #0
 8009dac:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	bf08      	it	eq
 8009db2:	2700      	moveq	r7, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8009db4:	2221      	movs	r2, #33	; 0x21
 8009db6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 fd14 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8009dc0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8009dc2:	2801      	cmp	r0, #1
 8009dc4:	f240 80cd 	bls.w	8009f62 <lv_obj_get_scrollbar_area+0x352>
    if(ver_draw && content_h) {
 8009dc8:	f1b9 0f00 	cmp.w	r9, #0
 8009dcc:	f000 8111 	beq.w	8009ff2 <lv_obj_get_scrollbar_area+0x3e2>
    lv_coord_t content_h = obj_h + st + sb;
 8009dd0:	fa1f f98a 	uxth.w	r9, sl
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	eb09 0003 	add.w	r0, r9, r3
 8009dda:	4480      	add	r8, r0
 8009ddc:	fa1f f388 	uxth.w	r3, r8
 8009de0:	930e      	str	r3, [sp, #56]	; 0x38
 8009de2:	fa0f f088 	sxth.w	r0, r8
    if(ver_draw && content_h) {
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f000 8103 	beq.w	8009ff2 <lv_obj_get_scrollbar_area+0x3e2>
        ver_area->y1 = obj->coords.y1;
 8009dec:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8009df0:	806b      	strh	r3, [r5, #2]
        ver_area->y2 = obj->coords.y2;
 8009df2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8009df6:	80eb      	strh	r3, [r5, #6]
        if(rtl) {
 8009df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	f000 80bc 	beq.w	8009f78 <lv_obj_get_scrollbar_area+0x368>
            ver_area->x2 = obj->coords.x2 - right_space;
 8009e00:	8b23      	ldrh	r3, [r4, #24]
 8009e02:	9a08      	ldr	r2, [sp, #32]
 8009e04:	1a9b      	subs	r3, r3, r2
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	80ab      	strh	r3, [r5, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 8009e0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e0c:	f1c2 0201 	rsb	r2, r2, #1
 8009e10:	4413      	add	r3, r2
 8009e12:	802b      	strh	r3, [r5, #0]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 8009e14:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8009e18:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e1a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8009e1e:	9210      	str	r2, [sp, #64]	; 0x40
 8009e20:	9711      	str	r7, [sp, #68]	; 0x44
 8009e22:	ebaa 0803 	sub.w	r8, sl, r3
 8009e26:	eba8 0802 	sub.w	r8, r8, r2
 8009e2a:	eba8 0807 	sub.w	r8, r8, r7
 8009e2e:	fb0a f808 	mul.w	r8, sl, r8
 8009e32:	fb98 f8f0 	sdiv	r8, r8, r0
 8009e36:	fa0f f888 	sxth.w	r8, r8
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8009e3a:	46c2      	mov	sl, r8
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f016 fae3 	bl	8020408 <lv_disp_get_dpi>
 8009e42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009e46:	0040      	lsls	r0, r0, #1
 8009e48:	28ef      	cmp	r0, #239	; 0xef
 8009e4a:	f300 809f 	bgt.w	8009f8c <lv_obj_get_scrollbar_area+0x37c>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	459a      	cmp	sl, r3
 8009e52:	f340 80a9 	ble.w	8009fa8 <lv_obj_get_scrollbar_area+0x398>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8009e56:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8009e5a:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8009e5e:	b2bf      	uxth	r7, r7
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 8009e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e62:	eba3 0309 	sub.w	r3, r3, r9
 8009e66:	b219      	sxth	r1, r3
        if(scroll_h <= 0) {
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	f340 80b9 	ble.w	8009fe0 <lv_obj_get_scrollbar_area+0x3d0>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 8009e6e:	fa1f f888 	uxth.w	r8, r8
 8009e72:	eb00 030a 	add.w	r3, r0, sl
 8009e76:	eba9 0303 	sub.w	r3, r9, r3
 8009e7a:	1bdb      	subs	r3, r3, r7
 8009e7c:	eba3 0308 	sub.w	r3, r3, r8
 8009e80:	b29b      	uxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8009e82:	8ae2      	ldrh	r2, [r4, #22]
 8009e84:	4402      	add	r2, r0
 8009e86:	eb02 0c03 	add.w	ip, r2, r3
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 8009e8a:	b21b      	sxth	r3, r3
 8009e8c:	9a03      	ldr	r2, [sp, #12]
 8009e8e:	fb02 f303 	mul.w	r3, r2, r3
 8009e92:	fb93 f3f1 	sdiv	r3, r3, r1
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 8009e96:	ebac 0303 	sub.w	r3, ip, r3
 8009e9a:	b21a      	sxth	r2, r3
 8009e9c:	806a      	strh	r2, [r5, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 8009e9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009ea2:	4443      	add	r3, r8
 8009ea4:	80eb      	strh	r3, [r5, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 8009ea6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8009eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eac:	4443      	add	r3, r8
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	f2c0 8143 	blt.w	800a13a <lv_obj_get_scrollbar_area+0x52a>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 8009eb4:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8009eb8:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8009ebc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009ec2:	1a1b      	subs	r3, r3, r0
 8009ec4:	4299      	cmp	r1, r3
 8009ec6:	f340 8094 	ble.w	8009ff2 <lv_obj_get_scrollbar_area+0x3e2>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 8009eca:	eba2 020a 	sub.w	r2, r2, sl
 8009ece:	1bd7      	subs	r7, r2, r7
 8009ed0:	b23f      	sxth	r7, r7
 8009ed2:	80ef      	strh	r7, [r5, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	f016 fa97 	bl	8020408 <lv_disp_get_dpi>
 8009eda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009ede:	0043      	lsls	r3, r0, #1
 8009ee0:	2bef      	cmp	r3, #239	; 0xef
 8009ee2:	f300 8169 	bgt.w	800a1b8 <lv_obj_get_scrollbar_area+0x5a8>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	1afb      	subs	r3, r7, r3
 8009eea:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	da7f      	bge.n	8009ff2 <lv_obj_get_scrollbar_area+0x3e2>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 8009ef2:	88ef      	ldrh	r7, [r5, #6]
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	f016 fa87 	bl	8020408 <lv_disp_get_dpi>
 8009efa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009efe:	0043      	lsls	r3, r0, #1
 8009f00:	2bef      	cmp	r3, #239	; 0xef
 8009f02:	f300 8167 	bgt.w	800a1d4 <lv_obj_get_scrollbar_area+0x5c4>
 8009f06:	2301      	movs	r3, #1
 8009f08:	1afb      	subs	r3, r7, r3
 8009f0a:	806b      	strh	r3, [r5, #2]
 8009f0c:	e071      	b.n	8009ff2 <lv_obj_get_scrollbar_area+0x3e2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8009f0e:	f1b8 0f00 	cmp.w	r8, #0
 8009f12:	dd0e      	ble.n	8009f32 <lv_obj_get_scrollbar_area+0x322>
    if((dir & LV_DIR_HOR) &&
 8009f14:	f010 0f03 	tst.w	r0, #3
 8009f18:	bf18      	it	ne
 8009f1a:	46b1      	movne	r9, r6
 8009f1c:	f000 8293 	beq.w	800a446 <lv_obj_get_scrollbar_area+0x836>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 8009f20:	9b04      	ldr	r3, [sp, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f73f af09 	bgt.w	8009d3a <lv_obj_get_scrollbar_area+0x12a>
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f73f af05 	bgt.w	8009d3a <lv_obj_get_scrollbar_area+0x12a>
 8009f30:	e6ff      	b.n	8009d32 <lv_obj_get_scrollbar_area+0x122>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 8009f32:	9b03      	ldr	r3, [sp, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dced      	bgt.n	8009f14 <lv_obj_get_scrollbar_area+0x304>
 8009f38:	e6f2      	b.n	8009d20 <lv_obj_get_scrollbar_area+0x110>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	f7fa fb1a 	bl	8004574 <lv_indev_get_scroll_dir>
 8009f40:	280c      	cmp	r0, #12
 8009f42:	bf14      	ite	ne
 8009f44:	f04f 0900 	movne.w	r9, #0
 8009f48:	f04f 0901 	moveq.w	r9, #1
    if((dir & LV_DIR_HOR) &&
 8009f4c:	f01a 0f03 	tst.w	sl, #3
 8009f50:	f43f aeef 	beq.w	8009d32 <lv_obj_get_scrollbar_area+0x122>
 8009f54:	e6bf      	b.n	8009cd6 <lv_obj_get_scrollbar_area+0xc6>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 8009f56:	f04f 0900 	mov.w	r9, #0
 8009f5a:	e7e1      	b.n	8009f20 <lv_obj_get_scrollbar_area+0x310>
 8009f5c:	f04f 0900 	mov.w	r9, #0
 8009f60:	e6e7      	b.n	8009d32 <lv_obj_get_scrollbar_area+0x122>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8009f62:	2231      	movs	r2, #49	; 0x31
 8009f64:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f000 fc3d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8009f6e:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 8009f70:	2801      	cmp	r0, #1
 8009f72:	f63f af29 	bhi.w	8009dc8 <lv_obj_get_scrollbar_area+0x1b8>
 8009f76:	e66c      	b.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
            ver_area->x1 = obj->coords.x1 + left_space;
 8009f78:	8aa3      	ldrh	r3, [r4, #20]
 8009f7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f7c:	4413      	add	r3, r2
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	802b      	strh	r3, [r5, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 8009f82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f84:	3a01      	subs	r2, #1
 8009f86:	4413      	add	r3, r2
 8009f88:	80ab      	strh	r3, [r5, #4]
 8009f8a:	e743      	b.n	8009e14 <lv_obj_get_scrollbar_area+0x204>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f016 fa3b 	bl	8020408 <lv_disp_get_dpi>
 8009f92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009f96:	0043      	lsls	r3, r0, #1
 8009f98:	3350      	adds	r3, #80	; 0x50
 8009f9a:	4ab7      	ldr	r2, [pc, #732]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 8009f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8009fa0:	17db      	asrs	r3, r3, #31
 8009fa2:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8009fa6:	e753      	b.n	8009e50 <lv_obj_get_scrollbar_area+0x240>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	f016 fa2d 	bl	8020408 <lv_disp_get_dpi>
 8009fae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009fb2:	0043      	lsls	r3, r0, #1
 8009fb4:	2bef      	cmp	r3, #239	; 0xef
 8009fb6:	dc02      	bgt.n	8009fbe <lv_obj_get_scrollbar_area+0x3ae>
 8009fb8:	f04f 0801 	mov.w	r8, #1
 8009fbc:	e74b      	b.n	8009e56 <lv_obj_get_scrollbar_area+0x246>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f016 fa22 	bl	8020408 <lv_disp_get_dpi>
 8009fc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009fc8:	0043      	lsls	r3, r0, #1
 8009fca:	3350      	adds	r3, #80	; 0x50
 8009fcc:	4aaa      	ldr	r2, [pc, #680]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 8009fce:	fb82 1203 	smull	r1, r2, r2, r3
 8009fd2:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8009fd6:	ebc8 18a2 	rsb	r8, r8, r2, asr #6
 8009fda:	fa0f f888 	sxth.w	r8, r8
 8009fde:	e73a      	b.n	8009e56 <lv_obj_get_scrollbar_area+0x246>
            ver_area->y1 = obj->coords.y1 + top_space;
 8009fe0:	8ae3      	ldrh	r3, [r4, #22]
 8009fe2:	4418      	add	r0, r3
 8009fe4:	8068      	strh	r0, [r5, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 8009fe6:	ea6f 030a 	mvn.w	r3, sl
 8009fea:	8b62      	ldrh	r2, [r4, #26]
 8009fec:	4413      	add	r3, r2
 8009fee:	1bdf      	subs	r7, r3, r7
 8009ff0:	80ef      	strh	r7, [r5, #6]
    if(hor_draw && content_w) {
 8009ff2:	2e00      	cmp	r6, #0
 8009ff4:	f43f ae2d 	beq.w	8009c52 <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t content_w = obj_w + sl + sr;
 8009ff8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8009ffc:	9b05      	ldr	r3, [sp, #20]
 8009ffe:	18f0      	adds	r0, r6, r3
 800a000:	9b04      	ldr	r3, [sp, #16]
 800a002:	4418      	add	r0, r3
 800a004:	fa1f f880 	uxth.w	r8, r0
 800a008:	b200      	sxth	r0, r0
    if(hor_draw && content_w) {
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f43f ae21 	beq.w	8009c52 <lv_obj_get_scrollbar_area+0x42>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800a010:	8b62      	ldrh	r2, [r4, #26]
 800a012:	9b07      	ldr	r3, [sp, #28]
 800a014:	1ad2      	subs	r2, r2, r3
 800a016:	b292      	uxth	r2, r2
 800a018:	f8ab 2006 	strh.w	r2, [fp, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800a01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01e:	f1c3 0301 	rsb	r3, r3, #1
 800a022:	4413      	add	r3, r2
 800a024:	f8ab 3002 	strh.w	r3, [fp, #2]
        hor_area->x1 = obj->coords.x1;
 800a028:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800a02c:	f8ab 3000 	strh.w	r3, [fp]
        hor_area->x2 = obj->coords.x2;
 800a030:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800a034:	f8ab 3004 	strh.w	r3, [fp, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800a038:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 800a03c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 800a040:	9a06      	ldr	r2, [sp, #24]
 800a042:	eba2 0509 	sub.w	r5, r2, r9
 800a046:	eba5 050a 	sub.w	r5, r5, sl
 800a04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04c:	1aed      	subs	r5, r5, r3
 800a04e:	fb02 f505 	mul.w	r5, r2, r5
 800a052:	fb95 f0f0 	sdiv	r0, r5, r0
 800a056:	b205      	sxth	r5, r0
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800a058:	462f      	mov	r7, r5
 800a05a:	2000      	movs	r0, #0
 800a05c:	f016 f9d4 	bl	8020408 <lv_disp_get_dpi>
 800a060:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a064:	0040      	lsls	r0, r0, #1
 800a066:	28ef      	cmp	r0, #239	; 0xef
 800a068:	f300 80c3 	bgt.w	800a1f2 <lv_obj_get_scrollbar_area+0x5e2>
 800a06c:	2301      	movs	r3, #1
 800a06e:	429f      	cmp	r7, r3
 800a070:	f340 80cd 	ble.w	800a20e <lv_obj_get_scrollbar_area+0x5fe>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800a074:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800a078:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a07c:	9303      	str	r3, [sp, #12]
 800a07e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800a082:	eba8 0806 	sub.w	r8, r8, r6
 800a086:	fa0f f888 	sxth.w	r8, r8
        if(scroll_w <= 0) {
 800a08a:	f1b8 0f00 	cmp.w	r8, #0
 800a08e:	f340 80d7 	ble.w	800a240 <lv_obj_get_scrollbar_area+0x630>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800a092:	b2ad      	uxth	r5, r5
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	18c3      	adds	r3, r0, r3
 800a098:	1af3      	subs	r3, r6, r3
 800a09a:	1bdb      	subs	r3, r3, r7
 800a09c:	1b5b      	subs	r3, r3, r5
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800a09e:	b21a      	sxth	r2, r3
 800a0a0:	9905      	ldr	r1, [sp, #20]
 800a0a2:	fb01 f202 	mul.w	r2, r1, r2
 800a0a6:	fb92 f8f8 	sdiv	r8, r2, r8
            sb_x = rem - sb_x;
 800a0aa:	eba3 0308 	sub.w	r3, r3, r8
 800a0ae:	b29b      	uxth	r3, r3
            if(rtl) {
 800a0b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0b2:	2a01      	cmp	r2, #1
 800a0b4:	f000 80e2 	beq.w	800a27c <lv_obj_get_scrollbar_area+0x66c>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800a0b8:	8aa2      	ldrh	r2, [r4, #20]
 800a0ba:	4402      	add	r2, r0
 800a0bc:	4413      	add	r3, r2
 800a0be:	b21a      	sxth	r2, r3
 800a0c0:	f8ab 2000 	strh.w	r2, [fp]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800a0c4:	3d01      	subs	r5, #1
 800a0c6:	442b      	add	r3, r5
 800a0c8:	f8ab 3004 	strh.w	r3, [fp, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800a0cc:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 800a0d0:	44a9      	add	r9, r5
 800a0d2:	454a      	cmp	r2, r9
 800a0d4:	f2c0 8161 	blt.w	800a39a <lv_obj_get_scrollbar_area+0x78a>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800a0d8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800a0dc:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	eba3 0a0a 	sub.w	sl, r3, sl
 800a0e8:	4551      	cmp	r1, sl
 800a0ea:	f77f adb2 	ble.w	8009c52 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	1ad4      	subs	r4, r2, r3
 800a0f2:	1be4      	subs	r4, r4, r7
 800a0f4:	b224      	sxth	r4, r4
 800a0f6:	f8ab 4004 	strh.w	r4, [fp, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	f016 f984 	bl	8020408 <lv_disp_get_dpi>
 800a100:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a104:	0043      	lsls	r3, r0, #1
 800a106:	2bef      	cmp	r3, #239	; 0xef
 800a108:	f300 8183 	bgt.w	800a412 <lv_obj_get_scrollbar_area+0x802>
 800a10c:	2301      	movs	r3, #1
 800a10e:	1ae3      	subs	r3, r4, r3
 800a110:	f9bb 2000 	ldrsh.w	r2, [fp]
 800a114:	4293      	cmp	r3, r2
 800a116:	f6bf ad9c 	bge.w	8009c52 <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a11a:	f8bb 4004 	ldrh.w	r4, [fp, #4]
 800a11e:	2000      	movs	r0, #0
 800a120:	f016 f972 	bl	8020408 <lv_disp_get_dpi>
 800a124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a128:	0043      	lsls	r3, r0, #1
 800a12a:	2bef      	cmp	r3, #239	; 0xef
 800a12c:	f300 817f 	bgt.w	800a42e <lv_obj_get_scrollbar_area+0x81e>
 800a130:	2301      	movs	r3, #1
 800a132:	1ae3      	subs	r3, r4, r3
 800a134:	f8ab 3000 	strh.w	r3, [fp]
 800a138:	e58b      	b.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
                ver_area->y1 = obj->coords.y1 + top_space;
 800a13a:	4440      	add	r0, r8
 800a13c:	fa0f f880 	sxth.w	r8, r0
 800a140:	f8a5 8002 	strh.w	r8, [r5, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800a144:	2000      	movs	r0, #0
 800a146:	f016 f95f 	bl	8020408 <lv_disp_get_dpi>
 800a14a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a14e:	0043      	lsls	r3, r0, #1
 800a150:	2bef      	cmp	r3, #239	; 0xef
 800a152:	dc14      	bgt.n	800a17e <lv_obj_get_scrollbar_area+0x56e>
 800a154:	2301      	movs	r3, #1
 800a156:	4443      	add	r3, r8
 800a158:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800a15c:	4293      	cmp	r3, r2
 800a15e:	f77f aea9 	ble.w	8009eb4 <lv_obj_get_scrollbar_area+0x2a4>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800a162:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 800a166:	2000      	movs	r0, #0
 800a168:	f016 f94e 	bl	8020408 <lv_disp_get_dpi>
 800a16c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a170:	0043      	lsls	r3, r0, #1
 800a172:	2bef      	cmp	r3, #239	; 0xef
 800a174:	dc11      	bgt.n	800a19a <lv_obj_get_scrollbar_area+0x58a>
 800a176:	2301      	movs	r3, #1
 800a178:	4443      	add	r3, r8
 800a17a:	80eb      	strh	r3, [r5, #6]
 800a17c:	e69a      	b.n	8009eb4 <lv_obj_get_scrollbar_area+0x2a4>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800a17e:	2000      	movs	r0, #0
 800a180:	f016 f942 	bl	8020408 <lv_disp_get_dpi>
 800a184:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a188:	0043      	lsls	r3, r0, #1
 800a18a:	3350      	adds	r3, #80	; 0x50
 800a18c:	4a3a      	ldr	r2, [pc, #232]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 800a18e:	fb82 1203 	smull	r1, r2, r2, r3
 800a192:	17db      	asrs	r3, r3, #31
 800a194:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a198:	e7dd      	b.n	800a156 <lv_obj_get_scrollbar_area+0x546>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800a19a:	2000      	movs	r0, #0
 800a19c:	f016 f934 	bl	8020408 <lv_disp_get_dpi>
 800a1a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1a4:	0043      	lsls	r3, r0, #1
 800a1a6:	3350      	adds	r3, #80	; 0x50
 800a1a8:	4a33      	ldr	r2, [pc, #204]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 800a1aa:	fb82 1203 	smull	r1, r2, r2, r3
 800a1ae:	17db      	asrs	r3, r3, #31
 800a1b0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	e7df      	b.n	800a178 <lv_obj_get_scrollbar_area+0x568>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	f016 f925 	bl	8020408 <lv_disp_get_dpi>
 800a1be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1c2:	0043      	lsls	r3, r0, #1
 800a1c4:	3350      	adds	r3, #80	; 0x50
 800a1c6:	4a2c      	ldr	r2, [pc, #176]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 800a1c8:	fb82 1203 	smull	r1, r2, r2, r3
 800a1cc:	17db      	asrs	r3, r3, #31
 800a1ce:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a1d2:	e689      	b.n	8009ee8 <lv_obj_get_scrollbar_area+0x2d8>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	f016 f917 	bl	8020408 <lv_disp_get_dpi>
 800a1da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1de:	0043      	lsls	r3, r0, #1
 800a1e0:	3350      	adds	r3, #80	; 0x50
 800a1e2:	4a25      	ldr	r2, [pc, #148]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 800a1e4:	fb82 1203 	smull	r1, r2, r2, r3
 800a1e8:	17db      	asrs	r3, r3, #31
 800a1ea:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	e68a      	b.n	8009f08 <lv_obj_get_scrollbar_area+0x2f8>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f016 f908 	bl	8020408 <lv_disp_get_dpi>
 800a1f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1fc:	0043      	lsls	r3, r0, #1
 800a1fe:	3350      	adds	r3, #80	; 0x50
 800a200:	4a1d      	ldr	r2, [pc, #116]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 800a202:	fb82 1203 	smull	r1, r2, r2, r3
 800a206:	17db      	asrs	r3, r3, #31
 800a208:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a20c:	e72f      	b.n	800a06e <lv_obj_get_scrollbar_area+0x45e>
 800a20e:	2000      	movs	r0, #0
 800a210:	f016 f8fa 	bl	8020408 <lv_disp_get_dpi>
 800a214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a218:	0043      	lsls	r3, r0, #1
 800a21a:	2bef      	cmp	r3, #239	; 0xef
 800a21c:	dc01      	bgt.n	800a222 <lv_obj_get_scrollbar_area+0x612>
 800a21e:	2501      	movs	r5, #1
 800a220:	e728      	b.n	800a074 <lv_obj_get_scrollbar_area+0x464>
 800a222:	2000      	movs	r0, #0
 800a224:	f016 f8f0 	bl	8020408 <lv_disp_get_dpi>
 800a228:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a22c:	0043      	lsls	r3, r0, #1
 800a22e:	3350      	adds	r3, #80	; 0x50
 800a230:	4a11      	ldr	r2, [pc, #68]	; (800a278 <lv_obj_get_scrollbar_area+0x668>)
 800a232:	fb82 1203 	smull	r1, r2, r2, r3
 800a236:	17dd      	asrs	r5, r3, #31
 800a238:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
 800a23c:	b22d      	sxth	r5, r5
 800a23e:	e719      	b.n	800a074 <lv_obj_get_scrollbar_area+0x464>
            if(rtl) {
 800a240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a242:	2b01      	cmp	r3, #1
 800a244:	d00b      	beq.n	800a25e <lv_obj_get_scrollbar_area+0x64e>
                hor_area->x1 = obj->coords.x1 + left_space;
 800a246:	8aa3      	ldrh	r3, [r4, #20]
 800a248:	4418      	add	r0, r3
 800a24a:	f8ab 0000 	strh.w	r0, [fp]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	43db      	mvns	r3, r3
 800a252:	8b22      	ldrh	r2, [r4, #24]
 800a254:	4413      	add	r3, r2
 800a256:	1bdb      	subs	r3, r3, r7
 800a258:	f8ab 3004 	strh.w	r3, [fp, #4]
 800a25c:	e4f9      	b.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800a25e:	1e43      	subs	r3, r0, #1
 800a260:	8aa2      	ldrh	r2, [r4, #20]
 800a262:	4413      	add	r3, r2
 800a264:	443b      	add	r3, r7
 800a266:	f8ab 3000 	strh.w	r3, [fp]
                hor_area->x2 = obj->coords.x2 - right_space;
 800a26a:	8b23      	ldrh	r3, [r4, #24]
 800a26c:	9a03      	ldr	r2, [sp, #12]
 800a26e:	1a9f      	subs	r7, r3, r2
 800a270:	f8ab 7004 	strh.w	r7, [fp, #4]
 800a274:	e4ed      	b.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
 800a276:	bf00      	nop
 800a278:	66666667 	.word	0x66666667
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800a27c:	8aa2      	ldrh	r2, [r4, #20]
 800a27e:	4402      	add	r2, r0
 800a280:	443a      	add	r2, r7
 800a282:	4413      	add	r3, r2
 800a284:	b21a      	sxth	r2, r3
 800a286:	f8ab 2000 	strh.w	r2, [fp]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800a28a:	3d01      	subs	r5, #1
 800a28c:	442b      	add	r3, r5
 800a28e:	f8ab 3004 	strh.w	r3, [fp, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800a292:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800a296:	eb01 0309 	add.w	r3, r1, r9
 800a29a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a29c:	442b      	add	r3, r5
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	db2b      	blt.n	800a2fa <lv_obj_get_scrollbar_area+0x6ea>
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800a2a2:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800a2a6:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800a2aa:	eba3 0a0a 	sub.w	sl, r3, sl
 800a2ae:	4552      	cmp	r2, sl
 800a2b0:	f77f accf 	ble.w	8009c52 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800a2b4:	9a03      	ldr	r2, [sp, #12]
 800a2b6:	1a9b      	subs	r3, r3, r2
 800a2b8:	b21c      	sxth	r4, r3
 800a2ba:	f8ab 4004 	strh.w	r4, [fp, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a2be:	2000      	movs	r0, #0
 800a2c0:	f016 f8a2 	bl	8020408 <lv_disp_get_dpi>
 800a2c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a2c8:	0043      	lsls	r3, r0, #1
 800a2ca:	2bef      	cmp	r3, #239	; 0xef
 800a2cc:	dc4e      	bgt.n	800a36c <lv_obj_get_scrollbar_area+0x75c>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	1ae3      	subs	r3, r4, r3
 800a2d2:	f9bb 2000 	ldrsh.w	r2, [fp]
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	f6bf acbb 	bge.w	8009c52 <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a2dc:	f8bb 4004 	ldrh.w	r4, [fp, #4]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	f016 f891 	bl	8020408 <lv_disp_get_dpi>
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	fb00 f303 	mul.w	r3, r0, r3
 800a2ec:	2bef      	cmp	r3, #239	; 0xef
 800a2ee:	dc48      	bgt.n	800a382 <lv_obj_get_scrollbar_area+0x772>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	1ae3      	subs	r3, r4, r3
 800a2f4:	f8ab 3000 	strh.w	r3, [fp]
 800a2f8:	e4ab      	b.n	8009c52 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800a2fa:	1845      	adds	r5, r0, r1
 800a2fc:	443d      	add	r5, r7
 800a2fe:	b22d      	sxth	r5, r5
 800a300:	f8ab 5000 	strh.w	r5, [fp]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800a304:	2000      	movs	r0, #0
 800a306:	f016 f87f 	bl	8020408 <lv_disp_get_dpi>
 800a30a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a30e:	0043      	lsls	r3, r0, #1
 800a310:	2bef      	cmp	r3, #239	; 0xef
 800a312:	dc14      	bgt.n	800a33e <lv_obj_get_scrollbar_area+0x72e>
 800a314:	2301      	movs	r3, #1
 800a316:	442b      	add	r3, r5
 800a318:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800a31c:	4293      	cmp	r3, r2
 800a31e:	ddc0      	ble.n	800a2a2 <lv_obj_get_scrollbar_area+0x692>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800a320:	f8bb 5000 	ldrh.w	r5, [fp]
 800a324:	2000      	movs	r0, #0
 800a326:	f016 f86f 	bl	8020408 <lv_disp_get_dpi>
 800a32a:	230a      	movs	r3, #10
 800a32c:	fb00 f303 	mul.w	r3, r0, r3
 800a330:	2bef      	cmp	r3, #239	; 0xef
 800a332:	dc0f      	bgt.n	800a354 <lv_obj_get_scrollbar_area+0x744>
 800a334:	2301      	movs	r3, #1
 800a336:	442b      	add	r3, r5
 800a338:	f8ab 3004 	strh.w	r3, [fp, #4]
 800a33c:	e7b1      	b.n	800a2a2 <lv_obj_get_scrollbar_area+0x692>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800a33e:	2000      	movs	r0, #0
 800a340:	f016 f862 	bl	8020408 <lv_disp_get_dpi>
 800a344:	220a      	movs	r2, #10
 800a346:	fb02 f300 	mul.w	r3, r2, r0
 800a34a:	3350      	adds	r3, #80	; 0x50
 800a34c:	22a0      	movs	r2, #160	; 0xa0
 800a34e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a352:	e7e0      	b.n	800a316 <lv_obj_get_scrollbar_area+0x706>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800a354:	2000      	movs	r0, #0
 800a356:	f016 f857 	bl	8020408 <lv_disp_get_dpi>
 800a35a:	220a      	movs	r2, #10
 800a35c:	fb02 f300 	mul.w	r3, r2, r0
 800a360:	3350      	adds	r3, #80	; 0x50
 800a362:	22a0      	movs	r2, #160	; 0xa0
 800a364:	fb93 f3f2 	sdiv	r3, r3, r2
 800a368:	b29b      	uxth	r3, r3
 800a36a:	e7e4      	b.n	800a336 <lv_obj_get_scrollbar_area+0x726>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a36c:	2000      	movs	r0, #0
 800a36e:	f016 f84b 	bl	8020408 <lv_disp_get_dpi>
 800a372:	220a      	movs	r2, #10
 800a374:	fb02 f300 	mul.w	r3, r2, r0
 800a378:	3350      	adds	r3, #80	; 0x50
 800a37a:	22a0      	movs	r2, #160	; 0xa0
 800a37c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a380:	e7a6      	b.n	800a2d0 <lv_obj_get_scrollbar_area+0x6c0>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a382:	2000      	movs	r0, #0
 800a384:	f016 f840 	bl	8020408 <lv_disp_get_dpi>
 800a388:	220a      	movs	r2, #10
 800a38a:	fb02 f300 	mul.w	r3, r2, r0
 800a38e:	3350      	adds	r3, #80	; 0x50
 800a390:	22a0      	movs	r2, #160	; 0xa0
 800a392:	fb93 f3f2 	sdiv	r3, r3, r2
 800a396:	b29b      	uxth	r3, r3
 800a398:	e7ab      	b.n	800a2f2 <lv_obj_get_scrollbar_area+0x6e2>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800a39a:	4428      	add	r0, r5
 800a39c:	b205      	sxth	r5, r0
 800a39e:	f8ab 5000 	strh.w	r5, [fp]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	f016 f830 	bl	8020408 <lv_disp_get_dpi>
 800a3a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3ac:	0043      	lsls	r3, r0, #1
 800a3ae:	2bef      	cmp	r3, #239	; 0xef
 800a3b0:	dc15      	bgt.n	800a3de <lv_obj_get_scrollbar_area+0x7ce>
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	442b      	add	r3, r5
 800a3b6:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	f77f ae8c 	ble.w	800a0d8 <lv_obj_get_scrollbar_area+0x4c8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800a3c0:	f8bb 5000 	ldrh.w	r5, [fp]
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	f016 f81f 	bl	8020408 <lv_disp_get_dpi>
 800a3ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3ce:	0043      	lsls	r3, r0, #1
 800a3d0:	2bef      	cmp	r3, #239	; 0xef
 800a3d2:	dc12      	bgt.n	800a3fa <lv_obj_get_scrollbar_area+0x7ea>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	442b      	add	r3, r5
 800a3d8:	f8ab 3004 	strh.w	r3, [fp, #4]
 800a3dc:	e67c      	b.n	800a0d8 <lv_obj_get_scrollbar_area+0x4c8>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800a3de:	2000      	movs	r0, #0
 800a3e0:	f016 f812 	bl	8020408 <lv_disp_get_dpi>
 800a3e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3e8:	0043      	lsls	r3, r0, #1
 800a3ea:	3350      	adds	r3, #80	; 0x50
 800a3ec:	4a20      	ldr	r2, [pc, #128]	; (800a470 <lv_obj_get_scrollbar_area+0x860>)
 800a3ee:	fb82 1203 	smull	r1, r2, r2, r3
 800a3f2:	17db      	asrs	r3, r3, #31
 800a3f4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a3f8:	e7dc      	b.n	800a3b4 <lv_obj_get_scrollbar_area+0x7a4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	f016 f804 	bl	8020408 <lv_disp_get_dpi>
 800a400:	220a      	movs	r2, #10
 800a402:	fb02 f300 	mul.w	r3, r2, r0
 800a406:	3350      	adds	r3, #80	; 0x50
 800a408:	22a0      	movs	r2, #160	; 0xa0
 800a40a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	e7e1      	b.n	800a3d6 <lv_obj_get_scrollbar_area+0x7c6>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a412:	2000      	movs	r0, #0
 800a414:	f015 fff8 	bl	8020408 <lv_disp_get_dpi>
 800a418:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a41c:	0043      	lsls	r3, r0, #1
 800a41e:	3350      	adds	r3, #80	; 0x50
 800a420:	4a13      	ldr	r2, [pc, #76]	; (800a470 <lv_obj_get_scrollbar_area+0x860>)
 800a422:	fb82 1203 	smull	r1, r2, r2, r3
 800a426:	17db      	asrs	r3, r3, #31
 800a428:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a42c:	e66f      	b.n	800a10e <lv_obj_get_scrollbar_area+0x4fe>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a42e:	2000      	movs	r0, #0
 800a430:	f015 ffea 	bl	8020408 <lv_disp_get_dpi>
 800a434:	220a      	movs	r2, #10
 800a436:	fb02 f300 	mul.w	r3, r2, r0
 800a43a:	3350      	adds	r3, #80	; 0x50
 800a43c:	22a0      	movs	r2, #160	; 0xa0
 800a43e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a442:	b29b      	uxth	r3, r3
 800a444:	e675      	b.n	800a132 <lv_obj_get_scrollbar_area+0x522>
    if((dir & LV_DIR_HOR) &&
 800a446:	46b1      	mov	r9, r6
 800a448:	2600      	movs	r6, #0
 800a44a:	e476      	b.n	8009d3a <lv_obj_get_scrollbar_area+0x12a>
 800a44c:	f010 0f03 	tst.w	r0, #3
 800a450:	f43f abff 	beq.w	8009c52 <lv_obj_get_scrollbar_area+0x42>
 800a454:	f1b9 0f01 	cmp.w	r9, #1
 800a458:	bf08      	it	eq
 800a45a:	f04f 0900 	moveq.w	r9, #0
 800a45e:	f43f ac6c 	beq.w	8009d3a <lv_obj_get_scrollbar_area+0x12a>
 800a462:	e42b      	b.n	8009cbc <lv_obj_get_scrollbar_area+0xac>
        ver_draw = true;
 800a464:	46b1      	mov	r9, r6
    if((dir & LV_DIR_HOR) &&
 800a466:	f010 0603 	ands.w	r6, r0, #3
 800a46a:	bf18      	it	ne
 800a46c:	2601      	movne	r6, #1
 800a46e:	e464      	b.n	8009d3a <lv_obj_get_scrollbar_area+0x12a>
 800a470:	66666667 	.word	0x66666667

0800a474 <lv_obj_scrollbar_invalidate>:
{
 800a474:	b510      	push	{r4, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800a47a:	466a      	mov	r2, sp
 800a47c:	a902      	add	r1, sp, #8
 800a47e:	f7ff fbc7 	bl	8009c10 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800a482:	a802      	add	r0, sp, #8
 800a484:	f016 faaf 	bl	80209e6 <lv_area_get_size>
 800a488:	b918      	cbnz	r0, 800a492 <lv_obj_scrollbar_invalidate+0x1e>
 800a48a:	4668      	mov	r0, sp
 800a48c:	f016 faab 	bl	80209e6 <lv_area_get_size>
 800a490:	b138      	cbz	r0, 800a4a2 <lv_obj_scrollbar_invalidate+0x2e>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800a492:	a802      	add	r0, sp, #8
 800a494:	f016 faa7 	bl	80209e6 <lv_area_get_size>
 800a498:	b928      	cbnz	r0, 800a4a6 <lv_obj_scrollbar_invalidate+0x32>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800a49a:	4668      	mov	r0, sp
 800a49c:	f016 faa3 	bl	80209e6 <lv_area_get_size>
 800a4a0:	b930      	cbnz	r0, 800a4b0 <lv_obj_scrollbar_invalidate+0x3c>
}
 800a4a2:	b004      	add	sp, #16
 800a4a4:	bd10      	pop	{r4, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800a4a6:	a902      	add	r1, sp, #8
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7fd fd41 	bl	8007f30 <lv_obj_invalidate_area>
 800a4ae:	e7f4      	b.n	800a49a <lv_obj_scrollbar_invalidate+0x26>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800a4b0:	4669      	mov	r1, sp
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f7fd fd3c 	bl	8007f30 <lv_obj_invalidate_area>
 800a4b8:	e7f3      	b.n	800a4a2 <lv_obj_scrollbar_invalidate+0x2e>

0800a4ba <lv_obj_readjust_scroll>:
{
 800a4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4bc:	4604      	mov	r4, r0
 800a4be:	460d      	mov	r5, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800a4c0:	f7fe feec 	bl	800929c <lv_obj_get_scroll_snap_y>
 800a4c4:	b120      	cbz	r0, 800a4d0 <lv_obj_readjust_scroll+0x16>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f7fe fee0 	bl	800928c <lv_obj_get_scroll_snap_x>
 800a4cc:	b1b0      	cbz	r0, 800a4fc <lv_obj_readjust_scroll+0x42>
}
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7fe fefb 	bl	80092cc <lv_obj_get_scroll_top>
 800a4d6:	4606      	mov	r6, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f7fe feff 	bl	80092dc <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 800a4de:	1e03      	subs	r3, r0, #0
 800a4e0:	daf1      	bge.n	800a4c6 <lv_obj_readjust_scroll+0xc>
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	ddef      	ble.n	800a4c6 <lv_obj_readjust_scroll+0xc>
            sb = LV_MIN(st, -sb);
 800a4e6:	425b      	negs	r3, r3
 800a4e8:	429e      	cmp	r6, r3
 800a4ea:	bfa8      	it	ge
 800a4ec:	461e      	movge	r6, r3
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800a4ee:	462b      	mov	r3, r5
 800a4f0:	b232      	sxth	r2, r6
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f7ff f8a9 	bl	800964c <lv_obj_scroll_by>
 800a4fa:	e7e4      	b.n	800a4c6 <lv_obj_readjust_scroll+0xc>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f7fe ff57 	bl	80093b0 <lv_obj_get_scroll_left>
 800a502:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800a504:	4620      	mov	r0, r4
 800a506:	f7fe ffc7 	bl	8009498 <lv_obj_get_scroll_right>
 800a50a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a50c:	2216      	movs	r2, #22
 800a50e:	2100      	movs	r1, #0
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f969 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800a516:	b2c3      	uxtb	r3, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d00e      	beq.n	800a53a <lv_obj_readjust_scroll+0x80>
            if(sr < 0 && sl > 0) {
 800a51c:	2e00      	cmp	r6, #0
 800a51e:	dad6      	bge.n	800a4ce <lv_obj_readjust_scroll+0x14>
 800a520:	2f00      	cmp	r7, #0
 800a522:	ddd4      	ble.n	800a4ce <lv_obj_readjust_scroll+0x14>
                sr = LV_MIN(sl, -sr);
 800a524:	4276      	negs	r6, r6
 800a526:	42be      	cmp	r6, r7
 800a528:	bfa8      	it	ge
 800a52a:	463e      	movge	r6, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800a52c:	462b      	mov	r3, r5
 800a52e:	2200      	movs	r2, #0
 800a530:	b231      	sxth	r1, r6
 800a532:	4620      	mov	r0, r4
 800a534:	f7ff f88a 	bl	800964c <lv_obj_scroll_by>
 800a538:	e7c9      	b.n	800a4ce <lv_obj_readjust_scroll+0x14>
            if(sl < 0 && sr > 0) {
 800a53a:	2f00      	cmp	r7, #0
 800a53c:	dac7      	bge.n	800a4ce <lv_obj_readjust_scroll+0x14>
 800a53e:	2e00      	cmp	r6, #0
 800a540:	ddc5      	ble.n	800a4ce <lv_obj_readjust_scroll+0x14>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800a542:	462b      	mov	r3, r5
 800a544:	2200      	movs	r2, #0
 800a546:	4639      	mov	r1, r7
 800a548:	4620      	mov	r0, r4
 800a54a:	f7ff f87f 	bl	800964c <lv_obj_scroll_by>
}
 800a54e:	e7be      	b.n	800a4ce <lv_obj_readjust_scroll+0x14>

0800a550 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800a550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	4606      	mov	r6, r0
 800a556:	4689      	mov	r9, r1
 800a558:	4693      	mov	fp, r2
 800a55a:	4698      	mov	r8, r3
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800a55c:	482d      	ldr	r0, [pc, #180]	; (800a614 <trans_del+0xc4>)
 800a55e:	f017 f851 	bl	8021604 <_lv_ll_get_tail>
    while(tr != NULL) {
 800a562:	2800      	cmp	r0, #0
 800a564:	d04f      	beq.n	800a606 <trans_del+0xb6>
 800a566:	4604      	mov	r4, r0
        if(tr == tr_limit) break;
 800a568:	4540      	cmp	r0, r8
 800a56a:	d050      	beq.n	800a60e <trans_del+0xbe>
    bool removed = false;
 800a56c:	2700      	movs	r7, #0

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800a56e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800a614 <trans_del+0xc4>
 800a572:	e00a      	b.n	800a58a <trans_del+0x3a>

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800a574:	88ab      	ldrh	r3, [r5, #4]
 800a576:	455b      	cmp	r3, fp
 800a578:	d017      	beq.n	800a5aa <trans_del+0x5a>
 800a57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a57e:	459b      	cmp	fp, r3
 800a580:	d013      	beq.n	800a5aa <trans_del+0x5a>
    while(tr != NULL) {
 800a582:	2c00      	cmp	r4, #0
 800a584:	d040      	beq.n	800a608 <trans_del+0xb8>
        if(tr == tr_limit) break;
 800a586:	45a0      	cmp	r8, r4
 800a588:	d03e      	beq.n	800a608 <trans_del+0xb8>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800a58a:	4625      	mov	r5, r4
 800a58c:	4621      	mov	r1, r4
 800a58e:	4650      	mov	r0, sl
 800a590:	f017 f840 	bl	8021614 <_lv_ll_get_prev>
 800a594:	4604      	mov	r4, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800a596:	682b      	ldr	r3, [r5, #0]
 800a598:	42b3      	cmp	r3, r6
 800a59a:	d1f2      	bne.n	800a582 <trans_del+0x32>
 800a59c:	68ab      	ldr	r3, [r5, #8]
 800a59e:	454b      	cmp	r3, r9
 800a5a0:	d0e8      	beq.n	800a574 <trans_del+0x24>
 800a5a2:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
 800a5a6:	d1ec      	bne.n	800a582 <trans_del+0x32>
 800a5a8:	e7e4      	b.n	800a574 <trans_del+0x24>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800a5aa:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 800a5ac:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800a5b0:	bf18      	it	ne
 800a5b2:	2700      	movne	r7, #0
 800a5b4:	d116      	bne.n	800a5e4 <trans_del+0x94>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f016 f8f7 	bl	80207ac <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f016 ffd8 	bl	8021576 <_lv_ll_remove>
            lv_mem_free(tr);
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f017 f96c 	bl	80218a4 <lv_mem_free>
            removed = true;
 800a5cc:	2701      	movs	r7, #1
 800a5ce:	e7d8      	b.n	800a582 <trans_del+0x32>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800a5d0:	88a9      	ldrh	r1, [r5, #4]
 800a5d2:	5810      	ldr	r0, [r2, r0]
 800a5d4:	f018 f994 	bl	8022900 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800a5d8:	3701      	adds	r7, #1
 800a5da:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 800a5dc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800a5e0:	42bb      	cmp	r3, r7
 800a5e2:	d9e8      	bls.n	800a5b6 <trans_del+0x66>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800a5e4:	00f8      	lsls	r0, r7, #3
 800a5e6:	68f2      	ldr	r2, [r6, #12]
 800a5e8:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
 800a5ec:	79d9      	ldrb	r1, [r3, #7]
 800a5ee:	f011 0f02 	tst.w	r1, #2
 800a5f2:	d0f1      	beq.n	800a5d8 <trans_del+0x88>
 800a5f4:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
 800a5f8:	d0ea      	beq.n	800a5d0 <trans_del+0x80>
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800a600:	454b      	cmp	r3, r9
 800a602:	d1e9      	bne.n	800a5d8 <trans_del+0x88>
 800a604:	e7e4      	b.n	800a5d0 <trans_del+0x80>
    bool removed = false;
 800a606:	2700      	movs	r7, #0

        }
        tr = tr_prev;
    }
    return removed;
}
 800a608:	4638      	mov	r0, r7
 800a60a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool removed = false;
 800a60e:	2700      	movs	r7, #0
 800a610:	e7fa      	b.n	800a608 <trans_del+0xb8>
 800a612:	bf00      	nop
 800a614:	200028cc 	.word	0x200028cc

0800a618 <refresh_children_style>:
{
 800a618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a61c:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800a61e:	f001 f83e 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800a622:	b1c8      	cbz	r0, 800a658 <refresh_children_style+0x40>
 800a624:	4607      	mov	r7, r0
 800a626:	2500      	movs	r5, #0
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800a628:	46a9      	mov	r9, r5
 800a62a:	f04f 082a 	mov.w	r8, #42	; 0x2a
        lv_obj_t * child = obj->spec_attr->children[i];
 800a62e:	68b3      	ldr	r3, [r6, #8]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        lv_obj_invalidate(child);
 800a636:	4620      	mov	r0, r4
 800a638:	f7fd fc9e 	bl	8007f78 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800a63c:	464a      	mov	r2, r9
 800a63e:	4641      	mov	r1, r8
 800a640:	4620      	mov	r0, r4
 800a642:	f7f9 fb5d 	bl	8003d00 <lv_event_send>
        lv_obj_invalidate(child);
 800a646:	4620      	mov	r0, r4
 800a648:	f7fd fc96 	bl	8007f78 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7ff ffe3 	bl	800a618 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800a652:	3501      	adds	r5, #1
 800a654:	42af      	cmp	r7, r5
 800a656:	d1ea      	bne.n	800a62e <refresh_children_style+0x16>
}
 800a658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a65c <get_local_style>:
{
 800a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 800a664:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 800a666:	f3c7 07c5 	ubfx	r7, r7, #3, #6
 800a66a:	b197      	cbz	r7, 800a692 <get_local_style+0x36>
 800a66c:	4638      	mov	r0, r7
 800a66e:	68e3      	ldr	r3, [r4, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	e003      	b.n	800a67c <get_local_style+0x20>
 800a674:	3201      	adds	r2, #1
 800a676:	3308      	adds	r3, #8
 800a678:	4282      	cmp	r2, r0
 800a67a:	d00b      	beq.n	800a694 <get_local_style+0x38>
        if(obj->styles[i].is_local &&
 800a67c:	79d9      	ldrb	r1, [r3, #7]
 800a67e:	f011 0f01 	tst.w	r1, #1
 800a682:	d0f7      	beq.n	800a674 <get_local_style+0x18>
           obj->styles[i].selector == selector) {
 800a684:	6859      	ldr	r1, [r3, #4]
 800a686:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 800a68a:	42a9      	cmp	r1, r5
 800a68c:	d1f2      	bne.n	800a674 <get_local_style+0x18>
            return obj->styles[i].style;
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	e045      	b.n	800a71e <get_local_style+0xc2>
    for(i = 0; i < obj->style_cnt; i++) {
 800a692:	2700      	movs	r7, #0
    obj->style_cnt++;
 800a694:	1c79      	adds	r1, r7, #1
 800a696:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a69a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a69c:	f361 03c8 	bfi	r3, r1, #3, #6
 800a6a0:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800a6a2:	00c9      	lsls	r1, r1, #3
 800a6a4:	68e0      	ldr	r0, [r4, #12]
 800a6a6:	f017 f919 	bl	80218dc <lv_mem_realloc>
 800a6aa:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->styles);
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d038      	beq.n	800a722 <get_local_style+0xc6>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800a6b0:	8c66      	ldrh	r6, [r4, #34]	; 0x22
 800a6b2:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 800a6b6:	3e01      	subs	r6, #1
 800a6b8:	d00f      	beq.n	800a6da <get_local_style+0x7e>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800a6ba:	68e2      	ldr	r2, [r4, #12]
 800a6bc:	00f1      	lsls	r1, r6, #3
 800a6be:	f1a1 0308 	sub.w	r3, r1, #8
 800a6c2:	4413      	add	r3, r2
 800a6c4:	79d8      	ldrb	r0, [r3, #7]
 800a6c6:	f010 0f03 	tst.w	r0, #3
 800a6ca:	d106      	bne.n	800a6da <get_local_style+0x7e>
        obj->styles[i] = obj->styles[i - 1];
 800a6cc:	440a      	add	r2, r1
 800a6ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6d2:	e882 0003 	stmia.w	r2, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800a6d6:	3e01      	subs	r6, #1
 800a6d8:	d1ef      	bne.n	800a6ba <get_local_style+0x5e>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800a6da:	00f7      	lsls	r7, r6, #3
 800a6dc:	68e0      	ldr	r0, [r4, #12]
 800a6de:	2108      	movs	r1, #8
 800a6e0:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800a6e4:	f017 fb40 	bl	8021d68 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800a6e8:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800a6ec:	2008      	movs	r0, #8
 800a6ee:	f017 f8bb 	bl	8021868 <lv_mem_alloc>
 800a6f2:	f848 0036 	str.w	r0, [r8, r6, lsl #3]
    lv_style_init(obj->styles[i].style);
 800a6f6:	68e3      	ldr	r3, [r4, #12]
 800a6f8:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
 800a6fc:	f018 f8ab 	bl	8022856 <lv_style_init>
    obj->styles[i].is_local = 1;
 800a700:	68e3      	ldr	r3, [r4, #12]
 800a702:	443b      	add	r3, r7
 800a704:	79da      	ldrb	r2, [r3, #7]
 800a706:	f042 0201 	orr.w	r2, r2, #1
 800a70a:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 800a70c:	68e3      	ldr	r3, [r4, #12]
 800a70e:	443b      	add	r3, r7
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	f365 0217 	bfi	r2, r5, #0, #24
 800a716:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 800a718:	68e3      	ldr	r3, [r4, #12]
 800a71a:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
}
 800a71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(obj->styles);
 800a722:	e7fe      	b.n	800a722 <get_local_style+0xc6>

0800a724 <get_trans_style>:
{
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	4604      	mov	r4, r0
 800a728:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 800a72a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 800a72c:	f3c0 00c5 	ubfx	r0, r0, #3, #6
 800a730:	b1c0      	cbz	r0, 800a764 <get_trans_style+0x40>
 800a732:	4601      	mov	r1, r0
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800a734:	68e6      	ldr	r6, [r4, #12]
 800a736:	4633      	mov	r3, r6
    for(i = 0; i < obj->style_cnt; i++) {
 800a738:	2200      	movs	r2, #0
 800a73a:	e003      	b.n	800a744 <get_trans_style+0x20>
 800a73c:	3201      	adds	r2, #1
 800a73e:	3308      	adds	r3, #8
 800a740:	428a      	cmp	r2, r1
 800a742:	d010      	beq.n	800a766 <get_trans_style+0x42>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800a744:	f893 c007 	ldrb.w	ip, [r3, #7]
 800a748:	f01c 0f02 	tst.w	ip, #2
 800a74c:	d0f6      	beq.n	800a73c <get_trans_style+0x18>
 800a74e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a752:	f3cc 0c17 	ubfx	ip, ip, #0, #24
 800a756:	45ac      	cmp	ip, r5
 800a758:	d1f0      	bne.n	800a73c <get_trans_style+0x18>
    if(i != obj->style_cnt) return &obj->styles[i];
 800a75a:	4291      	cmp	r1, r2
 800a75c:	d003      	beq.n	800a766 <get_trans_style+0x42>
 800a75e:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
}
 800a762:	bd70      	pop	{r4, r5, r6, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 800a764:	2000      	movs	r0, #0
    obj->style_cnt++;
 800a766:	1c41      	adds	r1, r0, #1
 800a768:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a76c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a76e:	f361 03c8 	bfi	r3, r1, #3, #6
 800a772:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800a774:	00c9      	lsls	r1, r1, #3
 800a776:	68e0      	ldr	r0, [r4, #12]
 800a778:	f017 f8b0 	bl	80218dc <lv_mem_realloc>
 800a77c:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800a77e:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800a780:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 800a784:	3a01      	subs	r2, #1
 800a786:	d008      	beq.n	800a79a <get_trans_style+0x76>
        obj->styles[i] = obj->styles[i - 1];
 800a788:	68e3      	ldr	r3, [r4, #12]
 800a78a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a78e:	e913 0003 	ldmdb	r3, {r0, r1}
 800a792:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800a796:	3a01      	subs	r2, #1
 800a798:	d1f6      	bne.n	800a788 <get_trans_style+0x64>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800a79a:	2108      	movs	r1, #8
 800a79c:	68e0      	ldr	r0, [r4, #12]
 800a79e:	f017 fae3 	bl	8021d68 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800a7a2:	68e6      	ldr	r6, [r4, #12]
 800a7a4:	2008      	movs	r0, #8
 800a7a6:	f017 f85f 	bl	8021868 <lv_mem_alloc>
 800a7aa:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 800a7ac:	68e3      	ldr	r3, [r4, #12]
 800a7ae:	6818      	ldr	r0, [r3, #0]
 800a7b0:	f018 f851 	bl	8022856 <lv_style_init>
    obj->styles[0].is_trans = 1;
 800a7b4:	68e2      	ldr	r2, [r4, #12]
 800a7b6:	79d3      	ldrb	r3, [r2, #7]
 800a7b8:	f043 0302 	orr.w	r3, r3, #2
 800a7bc:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800a7be:	68e3      	ldr	r3, [r4, #12]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	f365 0217 	bfi	r2, r5, #0, #24
 800a7c6:	605a      	str	r2, [r3, #4]
    return &obj->styles[0];
 800a7c8:	68e0      	ldr	r0, [r4, #12]
 800a7ca:	e7ca      	b.n	800a762 <get_trans_style+0x3e>

0800a7cc <_lv_obj_style_init>:
{
 800a7cc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800a7ce:	2114      	movs	r1, #20
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <_lv_obj_style_init+0xc>)
 800a7d2:	f016 fe8a 	bl	80214ea <_lv_ll_init>
}
 800a7d6:	bd08      	pop	{r3, pc}
 800a7d8:	200028cc 	.word	0x200028cc

0800a7dc <lv_obj_enable_style_refresh>:
    style_refr = en;
 800a7dc:	4b01      	ldr	r3, [pc, #4]	; (800a7e4 <lv_obj_enable_style_refresh+0x8>)
 800a7de:	7018      	strb	r0, [r3, #0]
}
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	200006f8 	.word	0x200006f8

0800a7e8 <lv_obj_get_style_prop>:
{
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	4693      	mov	fp, r2
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f018 fa6f 	bl	8022cd8 <_lv_style_prop_lookup_flags>
 800a7fa:	f000 0301 	and.w	r3, r0, #1
 800a7fe:	9301      	str	r3, [sp, #4]
    while(obj) {
 800a800:	2d00      	cmp	r5, #0
 800a802:	f040 8098 	bne.w	800a936 <lv_obj_get_style_prop+0x14e>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800a806:	b92f      	cbnz	r7, 800a814 <lv_obj_get_style_prop+0x2c>
 800a808:	f1bb 0f01 	cmp.w	fp, #1
 800a80c:	d072      	beq.n	800a8f4 <lv_obj_get_style_prop+0x10c>
 800a80e:	f1bb 0f04 	cmp.w	fp, #4
 800a812:	d06f      	beq.n	800a8f4 <lv_obj_get_style_prop+0x10c>
            value_act = lv_style_prop_get_default(prop);
 800a814:	4658      	mov	r0, fp
 800a816:	f018 f8f3 	bl	8022a00 <lv_style_prop_get_default>
 800a81a:	e066      	b.n	800a8ea <lv_obj_get_style_prop+0x102>
            *v = value_tmp;
 800a81c:	9803      	ldr	r0, [sp, #12]
            return LV_STYLE_RES_FOUND;
 800a81e:	e064      	b.n	800a8ea <lv_obj_get_style_prop+0x102>
    for(i = 0; i < obj->style_cnt; i++) {
 800a820:	3401      	adds	r4, #1
 800a822:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800a824:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800a828:	429c      	cmp	r4, r3
 800a82a:	d277      	bcs.n	800a91c <lv_obj_get_style_prop+0x134>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800a82c:	00e0      	lsls	r0, r4, #3
 800a82e:	68ea      	ldr	r2, [r5, #12]
 800a830:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
        if(obj_style->is_trans == false) break;
 800a834:	79d9      	ldrb	r1, [r3, #7]
 800a836:	f011 0f02 	tst.w	r1, #2
 800a83a:	d017      	beq.n	800a86c <lv_obj_get_style_prop+0x84>
        if(skip_trans) continue;
 800a83c:	2e00      	cmp	r6, #0
 800a83e:	d1ef      	bne.n	800a820 <lv_obj_get_style_prop+0x38>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800a840:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 800a842:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800a846:	42bb      	cmp	r3, r7
 800a848:	d1ea      	bne.n	800a820 <lv_obj_get_style_prop+0x38>
        if((obj_style->style->has_group & group) == 0) continue;
 800a84a:	5810      	ldr	r0, [r2, r0]
 800a84c:	7983      	ldrb	r3, [r0, #6]
 800a84e:	ea18 0f03 	tst.w	r8, r3
 800a852:	d0e5      	beq.n	800a820 <lv_obj_get_style_prop+0x38>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800a854:	aa03      	add	r2, sp, #12
 800a856:	4659      	mov	r1, fp
 800a858:	f018 f92a 	bl	8022ab0 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 800a85c:	2801      	cmp	r0, #1
 800a85e:	d0dd      	beq.n	800a81c <lv_obj_get_style_prop+0x34>
        else if(found == LV_STYLE_RES_INHERIT) {
 800a860:	2802      	cmp	r0, #2
 800a862:	d1dd      	bne.n	800a820 <lv_obj_get_style_prop+0x38>
        if(!inheritable) break;
 800a864:	9b01      	ldr	r3, [sp, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d15e      	bne.n	800a928 <lv_obj_get_style_prop+0x140>
 800a86a:	e7cc      	b.n	800a806 <lv_obj_get_style_prop+0x1e>
    for(; i < obj->style_cnt; i++) {
 800a86c:	4646      	mov	r6, r8
 800a86e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800a870:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800a874:	42a3      	cmp	r3, r4
 800a876:	d951      	bls.n	800a91c <lv_obj_get_style_prop+0x134>
 800a878:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a87c:	e012      	b.n	800a8a4 <lv_obj_get_style_prop+0xbc>
            if(state_act == state) {
 800a87e:	9b00      	ldr	r3, [sp, #0]
 800a880:	4543      	cmp	r3, r8
 800a882:	d007      	beq.n	800a894 <lv_obj_get_style_prop+0xac>
    for(; i < obj->style_cnt; i++) {
 800a884:	3401      	adds	r4, #1
 800a886:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800a888:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800a88c:	429c      	cmp	r4, r3
 800a88e:	d22b      	bcs.n	800a8e8 <lv_obj_get_style_prop+0x100>
                weight = state_act;
 800a890:	46c2      	mov	sl, r8
 800a892:	e007      	b.n	800a8a4 <lv_obj_get_style_prop+0xbc>
                *v = value_tmp;
 800a894:	9803      	ldr	r0, [sp, #12]
                return LV_STYLE_RES_FOUND;
 800a896:	e028      	b.n	800a8ea <lv_obj_get_style_prop+0x102>
    for(; i < obj->style_cnt; i++) {
 800a898:	3401      	adds	r4, #1
 800a89a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800a89c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	d21e      	bcs.n	800a8e2 <lv_obj_get_style_prop+0xfa>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800a8a4:	68eb      	ldr	r3, [r5, #12]
 800a8a6:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800a8aa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800a8ae:	7983      	ldrb	r3, [r0, #6]
 800a8b0:	421e      	tst	r6, r3
 800a8b2:	d0f1      	beq.n	800a898 <lv_obj_get_style_prop+0xb0>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800a8b4:	6853      	ldr	r3, [r2, #4]
 800a8b6:	f3c3 0217 	ubfx	r2, r3, #0, #24
    return selector & 0xFF0000;
 800a8ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800a8be:	42bb      	cmp	r3, r7
 800a8c0:	d1ea      	bne.n	800a898 <lv_obj_get_style_prop+0xb0>
    return selector & 0xFFFF;
 800a8c2:	fa1f f882 	uxth.w	r8, r2
        if((state_act & state_inv)) continue;
 800a8c6:	ea12 0f09 	tst.w	r2, r9
 800a8ca:	d1e5      	bne.n	800a898 <lv_obj_get_style_prop+0xb0>
        if(state_act <= weight) continue;
 800a8cc:	45d0      	cmp	r8, sl
 800a8ce:	dde3      	ble.n	800a898 <lv_obj_get_style_prop+0xb0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800a8d0:	aa03      	add	r2, sp, #12
 800a8d2:	4659      	mov	r1, fp
 800a8d4:	f018 f8ec 	bl	8022ab0 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 800a8d8:	2801      	cmp	r0, #1
 800a8da:	d0d0      	beq.n	800a87e <lv_obj_get_style_prop+0x96>
        else if(found == LV_STYLE_RES_INHERIT) {
 800a8dc:	2802      	cmp	r0, #2
 800a8de:	d1db      	bne.n	800a898 <lv_obj_get_style_prop+0xb0>
 800a8e0:	e7c0      	b.n	800a864 <lv_obj_get_style_prop+0x7c>
    if(weight >= 0) {
 800a8e2:	f1ba 0f00 	cmp.w	sl, #0
 800a8e6:	db19      	blt.n	800a91c <lv_obj_get_style_prop+0x134>
        *v = value_tmp;
 800a8e8:	9803      	ldr	r0, [sp, #12]
}
 800a8ea:	b005      	add	sp, #20
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            part = LV_PART_MAIN;
 800a8f0:	2700      	movs	r7, #0
 800a8f2:	e020      	b.n	800a936 <lv_obj_get_style_prop+0x14e>
            const lv_obj_class_t * cls = obj->class_p;
 800a8f4:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 800a8f6:	b93b      	cbnz	r3, 800a908 <lv_obj_get_style_prop+0x120>
                value_act.num = 0;
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e7f6      	b.n	800a8ea <lv_obj_get_style_prop+0x102>
                    if(cls->width_def != 0) break;
 800a8fc:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800a900:	2800      	cmp	r0, #0
 800a902:	d1f2      	bne.n	800a8ea <lv_obj_get_style_prop+0x102>
                cls = cls->base_class;
 800a904:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 800a906:	b13b      	cbz	r3, 800a918 <lv_obj_get_style_prop+0x130>
                if(prop == LV_STYLE_WIDTH) {
 800a908:	f1bb 0f01 	cmp.w	fp, #1
 800a90c:	d0f6      	beq.n	800a8fc <lv_obj_get_style_prop+0x114>
                    if(cls->height_def != 0) break;
 800a90e:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800a912:	2800      	cmp	r0, #0
 800a914:	d0f6      	beq.n	800a904 <lv_obj_get_style_prop+0x11c>
 800a916:	e7e8      	b.n	800a8ea <lv_obj_get_style_prop+0x102>
                value_act.num = 0;
 800a918:	2000      	movs	r0, #0
 800a91a:	e7e6      	b.n	800a8ea <lv_obj_get_style_prop+0x102>
        if(!inheritable) break;
 800a91c:	9b01      	ldr	r3, [sp, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f43f af71 	beq.w	800a806 <lv_obj_get_style_prop+0x1e>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800a924:	2f00      	cmp	r7, #0
 800a926:	d1e3      	bne.n	800a8f0 <lv_obj_get_style_prop+0x108>
        obj = lv_obj_get_parent(obj);
 800a928:	4628      	mov	r0, r5
 800a92a:	f000 fe9f 	bl	800b66c <lv_obj_get_parent>
    while(obj) {
 800a92e:	4605      	mov	r5, r0
 800a930:	2800      	cmp	r0, #0
 800a932:	f43f af68 	beq.w	800a806 <lv_obj_get_style_prop+0x1e>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800a936:	4658      	mov	r0, fp
 800a938:	f018 f92f 	bl	8022b9a <_lv_style_get_prop_group>
 800a93c:	2301      	movs	r3, #1
 800a93e:	fa03 f600 	lsl.w	r6, r3, r0
 800a942:	b2f6      	uxtb	r6, r6
    lv_state_t state = obj->state;
 800a944:	8c2b      	ldrh	r3, [r5, #32]
 800a946:	9300      	str	r3, [sp, #0]
    lv_state_t state_inv = ~state;
 800a948:	ea6f 0903 	mvn.w	r9, r3
 800a94c:	fa1f f989 	uxth.w	r9, r9
    bool skip_trans = obj->skip_trans;
 800a950:	f895 8022 	ldrb.w	r8, [r5, #34]	; 0x22
 800a954:	f3c8 0880 	ubfx	r8, r8, #2, #1
    for(i = 0; i < obj->style_cnt; i++) {
 800a958:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800a95a:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800a95e:	d0dd      	beq.n	800a91c <lv_obj_get_style_prop+0x134>
 800a960:	2400      	movs	r4, #0
 800a962:	4643      	mov	r3, r8
 800a964:	46b0      	mov	r8, r6
 800a966:	461e      	mov	r6, r3
 800a968:	e760      	b.n	800a82c <lv_obj_get_style_prop+0x44>
	...

0800a96c <lv_obj_refresh_style>:
    if(!style_refr) return;
 800a96c:	4b60      	ldr	r3, [pc, #384]	; (800aaf0 <lv_obj_refresh_style+0x184>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	b903      	cbnz	r3, 800a974 <lv_obj_refresh_style+0x8>
 800a972:	4770      	bx	lr
{
 800a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a978:	4606      	mov	r6, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	4615      	mov	r5, r2
    lv_obj_invalidate(obj);
 800a97e:	f7fd fafb 	bl	8007f78 <lv_obj_invalidate>
    return selector & 0xFF0000;
 800a982:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800a986:	4628      	mov	r0, r5
 800a988:	f018 f9a6 	bl	8022cd8 <_lv_style_prop_lookup_flags>
 800a98c:	f000 0704 	and.w	r7, r0, #4
 800a990:	4628      	mov	r0, r5
 800a992:	f018 f9a1 	bl	8022cd8 <_lv_style_prop_lookup_flags>
 800a996:	f000 0802 	and.w	r8, r0, #2
 800a99a:	4628      	mov	r0, r5
 800a99c:	f018 f99c 	bl	8022cd8 <_lv_style_prop_lookup_flags>
 800a9a0:	4681      	mov	r9, r0
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f018 f998 	bl	8022cd8 <_lv_style_prop_lookup_flags>
 800a9a8:	4682      	mov	sl, r0
    if(is_layout_refr) {
 800a9aa:	b15f      	cbz	r7, 800a9c4 <lv_obj_refresh_style+0x58>
        if(part == LV_PART_ANY ||
 800a9ac:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 800a9b0:	d000      	beq.n	800a9b4 <lv_obj_refresh_style+0x48>
 800a9b2:	bb6c      	cbnz	r4, 800aa10 <lv_obj_refresh_style+0xa4>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	212a      	movs	r1, #42	; 0x2a
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7f9 f9a1 	bl	8003d00 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f7fc ffe6 	bl	8007990 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800a9c4:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 800a9c8:	d000      	beq.n	800a9cc <lv_obj_refresh_style+0x60>
 800a9ca:	b984      	cbnz	r4, 800a9ee <lv_obj_refresh_style+0x82>
 800a9cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9d0:	429d      	cmp	r5, r3
 800a9d2:	d000      	beq.n	800a9d6 <lv_obj_refresh_style+0x6a>
 800a9d4:	b12f      	cbz	r7, 800a9e2 <lv_obj_refresh_style+0x76>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f000 fe48 	bl	800b66c <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800a9dc:	b108      	cbz	r0, 800a9e2 <lv_obj_refresh_style+0x76>
 800a9de:	f7fc ffd7 	bl	8007990 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800a9e2:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 800a9e6:	d128      	bne.n	800aa3a <lv_obj_refresh_style+0xce>
 800a9e8:	f01a 0f10 	tst.w	sl, #16
 800a9ec:	d128      	bne.n	800aa40 <lv_obj_refresh_style+0xd4>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800a9ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9f2:	429d      	cmp	r5, r3
 800a9f4:	d070      	beq.n	800aad8 <lv_obj_refresh_style+0x16c>
 800a9f6:	f1b8 0f00 	cmp.w	r8, #0
 800a9fa:	d166      	bne.n	800aaca <lv_obj_refresh_style+0x15e>
    lv_obj_invalidate(obj);
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7fd fabb 	bl	8007f78 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800aa02:	f019 0f01 	tst.w	r9, #1
 800aa06:	d070      	beq.n	800aaea <lv_obj_refresh_style+0x17e>
 800aa08:	ea58 0307 	orrs.w	r3, r8, r7
 800aa0c:	d06d      	beq.n	800aaea <lv_obj_refresh_style+0x17e>
 800aa0e:	e069      	b.n	800aae4 <lv_obj_refresh_style+0x178>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800aa10:	2204      	movs	r2, #4
 800aa12:	2100      	movs	r1, #0
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7ff fee7 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800aa1a:	b200      	sxth	r0, r0
           part == LV_PART_MAIN ||
 800aa1c:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800aa20:	4298      	cmp	r0, r3
 800aa22:	d0c7      	beq.n	800a9b4 <lv_obj_refresh_style+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800aa24:	2201      	movs	r2, #1
 800aa26:	2100      	movs	r1, #0
 800aa28:	4630      	mov	r0, r6
 800aa2a:	f7ff fedd 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800aa2e:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800aa30:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800aa34:	4298      	cmp	r0, r3
 800aa36:	d1da      	bne.n	800a9ee <lv_obj_refresh_style+0x82>
 800aa38:	e7bc      	b.n	800a9b4 <lv_obj_refresh_style+0x48>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800aa3a:	2c00      	cmp	r4, #0
 800aa3c:	d0d4      	beq.n	800a9e8 <lv_obj_refresh_style+0x7c>
 800aa3e:	e7d6      	b.n	800a9ee <lv_obj_refresh_style+0x82>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800aa40:	226d      	movs	r2, #109	; 0x6d
 800aa42:	2100      	movs	r1, #0
 800aa44:	4630      	mov	r0, r6
 800aa46:	f7ff fecf 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800aa4a:	b200      	sxth	r0, r0
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800aa4c:	bb98      	cbnz	r0, 800aab6 <lv_obj_refresh_style+0x14a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800aa4e:	226c      	movs	r2, #108	; 0x6c
 800aa50:	2100      	movs	r1, #0
 800aa52:	4630      	mov	r0, r6
 800aa54:	f7ff fec8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800aa58:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800aa5a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800aa5e:	d002      	beq.n	800aa66 <lv_obj_refresh_style+0xfa>
 800aa60:	f04f 0a02 	mov.w	sl, #2
 800aa64:	e029      	b.n	800aaba <lv_obj_refresh_style+0x14e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800aa66:	2260      	movs	r2, #96	; 0x60
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff febc 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800aa70:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800aa72:	28ff      	cmp	r0, #255	; 0xff
 800aa74:	d002      	beq.n	800aa7c <lv_obj_refresh_style+0x110>
 800aa76:	f04f 0a01 	mov.w	sl, #1
 800aa7a:	e01e      	b.n	800aaba <lv_obj_refresh_style+0x14e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800aa7c:	2267      	movs	r2, #103	; 0x67
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff feb1 	bl	800a7e8 <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800aa86:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800aa8a:	bf14      	ite	ne
 800aa8c:	f04f 0a01 	movne.w	sl, #1
 800aa90:	f04f 0a00 	moveq.w	sl, #0
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800aa94:	68b3      	ldr	r3, [r6, #8]
 800aa96:	b99b      	cbnz	r3, 800aac0 <lv_obj_refresh_style+0x154>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0a8      	beq.n	800a9ee <lv_obj_refresh_style+0x82>
            lv_obj_allocate_spec_attr(obj);
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7fc f9bf 	bl	8006e20 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800aaa2:	68b3      	ldr	r3, [r6, #8]
 800aaa4:	7e9a      	ldrb	r2, [r3, #26]
 800aaa6:	f36a 1287 	bfi	r2, sl, #6, #2
 800aaaa:	769a      	strb	r2, [r3, #26]
 800aaac:	e79f      	b.n	800a9ee <lv_obj_refresh_style+0x82>
            refresh_children_style(obj);
 800aaae:	4630      	mov	r0, r6
 800aab0:	f7ff fdb2 	bl	800a618 <refresh_children_style>
 800aab4:	e019      	b.n	800aaea <lv_obj_refresh_style+0x17e>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800aab6:	f04f 0a02 	mov.w	sl, #2
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800aaba:	68b3      	ldr	r3, [r6, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0ed      	beq.n	800aa9c <lv_obj_refresh_style+0x130>
 800aac0:	7e9a      	ldrb	r2, [r3, #26]
 800aac2:	f36a 1287 	bfi	r2, sl, #6, #2
 800aac6:	769a      	strb	r2, [r3, #26]
 800aac8:	e791      	b.n	800a9ee <lv_obj_refresh_style+0x82>
        lv_obj_refresh_ext_draw_size(obj);
 800aaca:	4630      	mov	r0, r6
 800aacc:	f7fc fe10 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7fd fa51 	bl	8007f78 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800aad6:	e794      	b.n	800aa02 <lv_obj_refresh_style+0x96>
        lv_obj_refresh_ext_draw_size(obj);
 800aad8:	4630      	mov	r0, r6
 800aada:	f7fc fe09 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800aade:	4630      	mov	r0, r6
 800aae0:	f7fd fa4a 	bl	8007f78 <lv_obj_invalidate>
        if(part != LV_PART_SCROLLBAR) {
 800aae4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800aae8:	d1e1      	bne.n	800aaae <lv_obj_refresh_style+0x142>
}
 800aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaee:	bf00      	nop
 800aaf0:	200006f8 	.word	0x200006f8

0800aaf4 <lv_obj_add_style>:
{
 800aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460f      	mov	r7, r1
 800aafc:	4616      	mov	r6, r2
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800aafe:	2300      	movs	r3, #0
 800ab00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab04:	4631      	mov	r1, r6
 800ab06:	f7ff fd23 	bl	800a550 <trans_del>
    for(i = 0; i < obj->style_cnt; i++) {
 800ab0a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800ab0c:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800ab10:	2900      	cmp	r1, #0
 800ab12:	d043      	beq.n	800ab9c <lv_obj_add_style+0xa8>
 800ab14:	4608      	mov	r0, r1
 800ab16:	68e3      	ldr	r3, [r4, #12]
 800ab18:	2500      	movs	r5, #0
        if(obj->styles[i].is_local) continue;
 800ab1a:	79da      	ldrb	r2, [r3, #7]
 800ab1c:	f012 0f03 	tst.w	r2, #3
 800ab20:	d004      	beq.n	800ab2c <lv_obj_add_style+0x38>
    for(i = 0; i < obj->style_cnt; i++) {
 800ab22:	3501      	adds	r5, #1
 800ab24:	3308      	adds	r3, #8
 800ab26:	4285      	cmp	r5, r0
 800ab28:	d1f7      	bne.n	800ab1a <lv_obj_add_style+0x26>
 800ab2a:	4605      	mov	r5, r0
    obj->style_cnt++;
 800ab2c:	3101      	adds	r1, #1
 800ab2e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800ab32:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ab34:	f361 03c8 	bfi	r3, r1, #3, #6
 800ab38:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800ab3a:	00c9      	lsls	r1, r1, #3
 800ab3c:	68e0      	ldr	r0, [r4, #12]
 800ab3e:	f016 fecd 	bl	80218dc <lv_mem_realloc>
 800ab42:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800ab44:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
 800ab48:	f3cc 0cc5 	ubfx	ip, ip, #3, #6
 800ab4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ab50:	45ac      	cmp	ip, r5
 800ab52:	d90a      	bls.n	800ab6a <lv_obj_add_style+0x76>
        obj->styles[j] = obj->styles[j - 1];
 800ab54:	68e3      	ldr	r3, [r4, #12]
 800ab56:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800ab5a:	e913 0003 	ldmdb	r3, {r0, r1}
 800ab5e:	e883 0003 	stmia.w	r3, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800ab62:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ab66:	45ac      	cmp	ip, r5
 800ab68:	d8f4      	bhi.n	800ab54 <lv_obj_add_style+0x60>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800ab6a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800ab6e:	68e0      	ldr	r0, [r4, #12]
 800ab70:	2108      	movs	r1, #8
 800ab72:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800ab76:	f017 f8f7 	bl	8021d68 <lv_memset_00>
    obj->styles[i].style = style;
 800ab7a:	68e3      	ldr	r3, [r4, #12]
 800ab7c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    obj->styles[i].selector = selector;
 800ab80:	68e3      	ldr	r3, [r4, #12]
 800ab82:	4443      	add	r3, r8
 800ab84:	685a      	ldr	r2, [r3, #4]
 800ab86:	f366 0217 	bfi	r2, r6, #0, #24
 800ab8a:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800ab8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab90:	4631      	mov	r1, r6
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7ff feea 	bl	800a96c <lv_obj_refresh_style>
}
 800ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 800ab9c:	460d      	mov	r5, r1
 800ab9e:	2100      	movs	r1, #0
 800aba0:	e7c4      	b.n	800ab2c <lv_obj_add_style+0x38>

0800aba2 <report_style_change_core>:
{
 800aba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba4:	4604      	mov	r4, r0
 800aba6:	460e      	mov	r6, r1
    for(i = 0; i < obj->style_cnt; i++) {
 800aba8:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800abaa:	f3c3 00c5 	ubfx	r0, r3, #3, #6
 800abae:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800abb2:	d011      	beq.n	800abd8 <report_style_change_core+0x36>
        if(style == NULL || obj->styles[i].style == style) {
 800abb4:	b14c      	cbz	r4, 800abca <report_style_change_core+0x28>
 800abb6:	68c9      	ldr	r1, [r1, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800abb8:	2300      	movs	r3, #0
        if(style == NULL || obj->styles[i].style == style) {
 800abba:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800abbe:	42a2      	cmp	r2, r4
 800abc0:	d003      	beq.n	800abca <report_style_change_core+0x28>
    for(i = 0; i < obj->style_cnt; i++) {
 800abc2:	3301      	adds	r3, #1
 800abc4:	4283      	cmp	r3, r0
 800abc6:	d1f8      	bne.n	800abba <report_style_change_core+0x18>
 800abc8:	e006      	b.n	800abd8 <report_style_change_core+0x36>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800abca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abce:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff feca 	bl	800a96c <lv_obj_refresh_style>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800abd8:	4630      	mov	r0, r6
 800abda:	f000 fd60 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800abde:	4607      	mov	r7, r0
 800abe0:	b150      	cbz	r0, 800abf8 <report_style_change_core+0x56>
 800abe2:	2500      	movs	r5, #0
        report_style_change_core(style, obj->spec_attr->children[i]);
 800abe4:	68b3      	ldr	r3, [r6, #8]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800abec:	4620      	mov	r0, r4
 800abee:	f7ff ffd8 	bl	800aba2 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 800abf2:	3501      	adds	r5, #1
 800abf4:	42af      	cmp	r7, r5
 800abf6:	d1f5      	bne.n	800abe4 <report_style_change_core+0x42>
}
 800abf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abfc <lv_obj_report_style_change>:
    if(!style_refr) return;
 800abfc:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <lv_obj_report_style_change+0x44>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	b903      	cbnz	r3, 800ac04 <lv_obj_report_style_change+0x8>
 800ac02:	4770      	bx	lr
{
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 800ac08:	2000      	movs	r0, #0
 800ac0a:	f015 fc13 	bl	8020434 <lv_disp_get_next>
    while(d) {
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b980      	cbnz	r0, 800ac34 <lv_obj_report_style_change+0x38>
}
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 800ac14:	68eb      	ldr	r3, [r5, #12]
 800ac16:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	f7ff ffc1 	bl	800aba2 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 800ac20:	3401      	adds	r4, #1
 800ac22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	d8f5      	bhi.n	800ac14 <lv_obj_report_style_change+0x18>
        d = lv_disp_get_next(d);
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f015 fc03 	bl	8020434 <lv_disp_get_next>
    while(d) {
 800ac2e:	4605      	mov	r5, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d0ee      	beq.n	800ac12 <lv_obj_report_style_change+0x16>
        for(i = 0; i < d->screen_cnt; i++) {
 800ac34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac36:	2400      	movs	r4, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1eb      	bne.n	800ac14 <lv_obj_report_style_change+0x18>
 800ac3c:	e7f4      	b.n	800ac28 <lv_obj_report_style_change+0x2c>
 800ac3e:	bf00      	nop
 800ac40:	200006f8 	.word	0x200006f8

0800ac44 <trans_anim_cb>:
{
 800ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac48:	b082      	sub	sp, #8
    lv_obj_t * obj = tr->obj;
 800ac4a:	6805      	ldr	r5, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 800ac4c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800ac4e:	f3c3 0cc5 	ubfx	ip, r3, #3, #6
 800ac52:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800ac56:	f000 80b7 	beq.w	800adc8 <trans_anim_cb+0x184>
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	460f      	mov	r7, r1
 800ac5e:	2200      	movs	r2, #0
 800ac60:	e003      	b.n	800ac6a <trans_anim_cb+0x26>
 800ac62:	3201      	adds	r2, #1
 800ac64:	4562      	cmp	r2, ip
 800ac66:	f000 80af 	beq.w	800adc8 <trans_anim_cb+0x184>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800ac6a:	00d6      	lsls	r6, r2, #3
 800ac6c:	68eb      	ldr	r3, [r5, #12]
 800ac6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac72:	79d8      	ldrb	r0, [r3, #7]
 800ac74:	f010 0f02 	tst.w	r0, #2
 800ac78:	d0f3      	beq.n	800ac62 <trans_anim_cb+0x1e>
 800ac7a:	6858      	ldr	r0, [r3, #4]
 800ac7c:	f3c0 0017 	ubfx	r0, r0, #0, #24
 800ac80:	68a1      	ldr	r1, [r4, #8]
 800ac82:	4288      	cmp	r0, r1
 800ac84:	d1ed      	bne.n	800ac62 <trans_anim_cb+0x1e>
        switch(tr->prop) {
 800ac86:	88a1      	ldrh	r1, [r4, #4]
 800ac88:	f1a1 0220 	sub.w	r2, r1, #32
 800ac8c:	2a47      	cmp	r2, #71	; 0x47
 800ac8e:	f200 8082 	bhi.w	800ad96 <trans_anim_cb+0x152>
 800ac92:	e8df f002 	tbb	[pc, r2]
 800ac96:	8053      	.short	0x8053
 800ac98:	80808080 	.word	0x80808080
 800ac9c:	80808080 	.word	0x80808080
 800aca0:	80808080 	.word	0x80808080
 800aca4:	80538080 	.word	0x80538080
 800aca8:	80242480 	.word	0x80242480
 800acac:	80808053 	.word	0x80808053
 800acb0:	80808080 	.word	0x80808080
 800acb4:	80808080 	.word	0x80808080
 800acb8:	80538080 	.word	0x80538080
 800acbc:	80805380 	.word	0x80805380
 800acc0:	80808080 	.word	0x80808080
 800acc4:	80808080 	.word	0x80808080
 800acc8:	53808080 	.word	0x53808080
 800accc:	80803e80 	.word	0x80803e80
 800acd0:	80808080 	.word	0x80808080
 800acd4:	45808080 	.word	0x45808080
 800acd8:	80808080 	.word	0x80808080
 800acdc:	243e      	.short	0x243e
                if(v < 255) value_final.num = tr->start_value.num;
 800acde:	2ffe      	cmp	r7, #254	; 0xfe
 800ace0:	bfd4      	ite	le
 800ace2:	f8d4 800c 	ldrle.w	r8, [r4, #12]
                else value_final.num = tr->end_value.num;
 800ace6:	f8d4 8010 	ldrgt.w	r8, [r4, #16]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800acea:	aa01      	add	r2, sp, #4
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f017 fedf 	bl	8022ab0 <lv_style_get_prop>
 800acf2:	b110      	cbz	r0, 800acfa <trans_anim_cb+0xb6>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800acf4:	9f01      	ldr	r7, [sp, #4]
 800acf6:	45b8      	cmp	r8, r7
 800acf8:	d05e      	beq.n	800adb8 <trans_anim_cb+0x174>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800acfa:	68eb      	ldr	r3, [r5, #12]
 800acfc:	4642      	mov	r2, r8
 800acfe:	88a1      	ldrh	r1, [r4, #4]
 800ad00:	5998      	ldr	r0, [r3, r6]
 800ad02:	f017 ffe1 	bl	8022cc8 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800ad06:	88a2      	ldrh	r2, [r4, #4]
 800ad08:	68a1      	ldr	r1, [r4, #8]
 800ad0a:	6820      	ldr	r0, [r4, #0]
 800ad0c:	f7ff fe2e 	bl	800a96c <lv_obj_refresh_style>
}
 800ad10:	e05a      	b.n	800adc8 <trans_anim_cb+0x184>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800ad12:	2ffe      	cmp	r7, #254	; 0xfe
 800ad14:	bfd4      	ite	le
 800ad16:	f8d4 800c 	ldrle.w	r8, [r4, #12]
                else value_final.ptr = tr->end_value.ptr;
 800ad1a:	f8d4 8010 	ldrgt.w	r8, [r4, #16]
 800ad1e:	e7e4      	b.n	800acea <trans_anim_cb+0xa6>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800ad20:	68e2      	ldr	r2, [r4, #12]
 800ad22:	b132      	cbz	r2, 800ad32 <trans_anim_cb+0xee>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800ad24:	6920      	ldr	r0, [r4, #16]
 800ad26:	b138      	cbz	r0, 800ad38 <trans_anim_cb+0xf4>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800ad28:	2f7f      	cmp	r7, #127	; 0x7f
 800ad2a:	bfcc      	ite	gt
 800ad2c:	4680      	movgt	r8, r0
 800ad2e:	4690      	movle	r8, r2
 800ad30:	e7db      	b.n	800acea <trans_anim_cb+0xa6>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800ad32:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800ad36:	e7d8      	b.n	800acea <trans_anim_cb+0xa6>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800ad38:	4690      	mov	r8, r2
 800ad3a:	e7d6      	b.n	800acea <trans_anim_cb+0xa6>
                if(v <= 0) value_final.color = tr->start_value.color;
 800ad3c:	2f00      	cmp	r7, #0
 800ad3e:	dd07      	ble.n	800ad50 <trans_anim_cb+0x10c>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800ad40:	2ffe      	cmp	r7, #254	; 0xfe
 800ad42:	dd0b      	ble.n	800ad5c <trans_anim_cb+0x118>
 800ad44:	8a22      	ldrh	r2, [r4, #16]
 800ad46:	f04f 0800 	mov.w	r8, #0
 800ad4a:	f362 080f 	bfi	r8, r2, #0, #16
 800ad4e:	e7cc      	b.n	800acea <trans_anim_cb+0xa6>
                if(v <= 0) value_final.color = tr->start_value.color;
 800ad50:	89a2      	ldrh	r2, [r4, #12]
 800ad52:	f04f 0800 	mov.w	r8, #0
 800ad56:	f362 080f 	bfi	r8, r2, #0, #16
 800ad5a:	e7c6      	b.n	800acea <trans_anim_cb+0xa6>
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800ad5c:	89a0      	ldrh	r0, [r4, #12]
 800ad5e:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 800ad62:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800add0 <trans_anim_cb+0x18c>
 800ad66:	ea00 000c 	and.w	r0, r0, ip
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800ad6a:	8a22      	ldrh	r2, [r4, #16]
 800ad6c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800ad70:	ea02 020c 	and.w	r2, r2, ip
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800ad74:	1a12      	subs	r2, r2, r0
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800ad76:	b2ff      	uxtb	r7, r7
 800ad78:	3704      	adds	r7, #4
 800ad7a:	08ff      	lsrs	r7, r7, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800ad7c:	fb07 f202 	mul.w	r2, r7, r2
 800ad80:	eb00 1252 	add.w	r2, r0, r2, lsr #5
 800ad84:	ea02 020c 	and.w	r2, r2, ip
    ret.full = (uint16_t)((result >> 16) | result);
 800ad88:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 800ad8c:	f04f 0800 	mov.w	r8, #0
 800ad90:	f362 080f 	bfi	r8, r2, #0, #16
 800ad94:	e7a9      	b.n	800acea <trans_anim_cb+0xa6>
                if(v == 0) value_final.num = tr->start_value.num;
 800ad96:	b917      	cbnz	r7, 800ad9e <trans_anim_cb+0x15a>
 800ad98:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800ad9c:	e7a5      	b.n	800acea <trans_anim_cb+0xa6>
                else if(v == 255) value_final.num = tr->end_value.num;
 800ad9e:	2fff      	cmp	r7, #255	; 0xff
 800ada0:	d007      	beq.n	800adb2 <trans_anim_cb+0x16e>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800ada2:	68e0      	ldr	r0, [r4, #12]
 800ada4:	6922      	ldr	r2, [r4, #16]
 800ada6:	1a12      	subs	r2, r2, r0
 800ada8:	fb02 f707 	mul.w	r7, r2, r7
 800adac:	eb00 2827 	add.w	r8, r0, r7, asr #8
 800adb0:	e79b      	b.n	800acea <trans_anim_cb+0xa6>
                else if(v == 255) value_final.num = tr->end_value.num;
 800adb2:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800adb6:	e798      	b.n	800acea <trans_anim_cb+0xa6>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800adb8:	68eb      	ldr	r3, [r5, #12]
 800adba:	4642      	mov	r2, r8
 800adbc:	88a1      	ldrh	r1, [r4, #4]
 800adbe:	5998      	ldr	r0, [r3, r6]
 800adc0:	f017 ff82 	bl	8022cc8 <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800adc4:	45b8      	cmp	r8, r7
 800adc6:	d19e      	bne.n	800ad06 <trans_anim_cb+0xc2>
}
 800adc8:	b002      	add	sp, #8
 800adca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adce:	bf00      	nop
 800add0:	07e0f81f 	.word	0x07e0f81f

0800add4 <lv_obj_remove_style>:
{
 800add4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 800adda:	fa1f f882 	uxth.w	r8, r2
    return selector & 0xFF0000;
 800adde:	f402 077f 	and.w	r7, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800ade2:	468a      	mov	sl, r1
 800ade4:	b1a1      	cbz	r1, 800ae10 <lv_obj_remove_style+0x3c>
 800ade6:	f891 b007 	ldrb.w	fp, [r1, #7]
 800adea:	f1bb 0b00 	subs.w	fp, fp, #0
 800adee:	bf18      	it	ne
 800adf0:	f04f 0b01 	movne.w	fp, #1
 800adf4:	f1cb 0b00 	rsb	fp, fp, #0
 800adf8:	fa1f fb8b 	uxth.w	fp, fp
    while(i <  obj->style_cnt) {
 800adfc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800adfe:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800ae02:	d073      	beq.n	800aeec <lv_obj_remove_style+0x118>
    bool deleted = false;
 800ae04:	2200      	movs	r2, #0
    uint32_t i = 0;
 800ae06:	4616      	mov	r6, r2
        if((state != LV_STATE_ANY && state_act != state) ||
 800ae08:	f64f 79ff 	movw	r9, #65535	; 0xffff
            obj->styles[i].style = NULL;
 800ae0c:	4655      	mov	r5, sl
 800ae0e:	e00d      	b.n	800ae2c <lv_obj_remove_style+0x58>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800ae10:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800ae14:	e7f2      	b.n	800adfc <lv_obj_remove_style+0x28>
           (part != LV_PART_ANY && part_act != part) ||
 800ae16:	b1fd      	cbz	r5, 800ae58 <lv_obj_remove_style+0x84>
           (style != NULL && style != obj->styles[i].style)) {
 800ae18:	f851 300a 	ldr.w	r3, [r1, sl]
 800ae1c:	42ab      	cmp	r3, r5
 800ae1e:	d01b      	beq.n	800ae58 <lv_obj_remove_style+0x84>
            i++;
 800ae20:	3601      	adds	r6, #1
    while(i <  obj->style_cnt) {
 800ae22:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ae24:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800ae28:	42b3      	cmp	r3, r6
 800ae2a:	d95b      	bls.n	800aee4 <lv_obj_remove_style+0x110>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800ae2c:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 800ae30:	68e1      	ldr	r1, [r4, #12]
 800ae32:	eb01 00c6 	add.w	r0, r1, r6, lsl #3
 800ae36:	6843      	ldr	r3, [r0, #4]
 800ae38:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 800ae3c:	45c8      	cmp	r8, r9
 800ae3e:	d003      	beq.n	800ae48 <lv_obj_remove_style+0x74>
 800ae40:	fa1f fc83 	uxth.w	ip, r3
 800ae44:	45e0      	cmp	r8, ip
 800ae46:	d1eb      	bne.n	800ae20 <lv_obj_remove_style+0x4c>
 800ae48:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800ae4c:	d0e3      	beq.n	800ae16 <lv_obj_remove_style+0x42>
    return selector & 0xFF0000;
 800ae4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 800ae52:	429f      	cmp	r7, r3
 800ae54:	d0df      	beq.n	800ae16 <lv_obj_remove_style+0x42>
 800ae56:	e7e3      	b.n	800ae20 <lv_obj_remove_style+0x4c>
        if(obj->styles[i].is_trans) {
 800ae58:	79c3      	ldrb	r3, [r0, #7]
 800ae5a:	f013 0f02 	tst.w	r3, #2
 800ae5e:	d12c      	bne.n	800aeba <lv_obj_remove_style+0xe6>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800ae60:	68e3      	ldr	r3, [r4, #12]
 800ae62:	eb03 020a 	add.w	r2, r3, sl
 800ae66:	79d2      	ldrb	r2, [r2, #7]
 800ae68:	f012 0f03 	tst.w	r2, #3
 800ae6c:	d12c      	bne.n	800aec8 <lv_obj_remove_style+0xf4>
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800ae6e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800ae70:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800ae74:	1e4b      	subs	r3, r1, #1
 800ae76:	42b3      	cmp	r3, r6
 800ae78:	d911      	bls.n	800ae9e <lv_obj_remove_style+0xca>
 800ae7a:	f10a 0a08 	add.w	sl, sl, #8
 800ae7e:	4632      	mov	r2, r6
            obj->styles[j] = obj->styles[j + 1];
 800ae80:	68e3      	ldr	r3, [r4, #12]
 800ae82:	3201      	adds	r2, #1
 800ae84:	4453      	add	r3, sl
 800ae86:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae8a:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800ae8e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800ae90:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800ae94:	f10a 0a08 	add.w	sl, sl, #8
 800ae98:	1e4b      	subs	r3, r1, #1
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d3f0      	bcc.n	800ae80 <lv_obj_remove_style+0xac>
        obj->style_cnt--;
 800ae9e:	313f      	adds	r1, #63	; 0x3f
 800aea0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800aea4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800aea6:	f361 03c8 	bfi	r3, r1, #3, #6
 800aeaa:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800aeac:	00c9      	lsls	r1, r1, #3
 800aeae:	68e0      	ldr	r0, [r4, #12]
 800aeb0:	f016 fd14 	bl	80218dc <lv_mem_realloc>
 800aeb4:	60e0      	str	r0, [r4, #12]
        deleted = true;
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	e7b3      	b.n	800ae22 <lv_obj_remove_style+0x4e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800aeba:	2300      	movs	r3, #0
 800aebc:	464a      	mov	r2, r9
 800aebe:	4639      	mov	r1, r7
 800aec0:	4620      	mov	r0, r4
 800aec2:	f7ff fb45 	bl	800a550 <trans_del>
 800aec6:	e7cb      	b.n	800ae60 <lv_obj_remove_style+0x8c>
            lv_style_reset(obj->styles[i].style);
 800aec8:	f853 000a 	ldr.w	r0, [r3, sl]
 800aecc:	f017 fcc8 	bl	8022860 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800aed0:	68e3      	ldr	r3, [r4, #12]
 800aed2:	f853 000a 	ldr.w	r0, [r3, sl]
 800aed6:	f016 fce5 	bl	80218a4 <lv_mem_free>
            obj->styles[i].style = NULL;
 800aeda:	68e3      	ldr	r3, [r4, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f843 200a 	str.w	r2, [r3, sl]
 800aee2:	e7c4      	b.n	800ae6e <lv_obj_remove_style+0x9a>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800aee4:	b112      	cbz	r2, 800aeec <lv_obj_remove_style+0x118>
 800aee6:	f1bb 0f00 	cmp.w	fp, #0
 800aeea:	d101      	bne.n	800aef0 <lv_obj_remove_style+0x11c>
}
 800aeec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refresh_style(obj, part, prop);
 800aef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aef4:	4639      	mov	r1, r7
 800aef6:	4620      	mov	r0, r4
 800aef8:	f7ff fd38 	bl	800a96c <lv_obj_refresh_style>
}
 800aefc:	e7f6      	b.n	800aeec <lv_obj_remove_style+0x118>
	...

0800af00 <trans_anim_ready_cb>:
{
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 800af04:	6804      	ldr	r4, [r0, #0]
    lv_obj_t * obj = tr->obj;
 800af06:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 800af08:	88a6      	ldrh	r6, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800af0a:	482a      	ldr	r0, [pc, #168]	; (800afb4 <trans_anim_ready_cb+0xb4>)
 800af0c:	f016 fb76 	bl	80215fc <_lv_ll_get_head>
 800af10:	2800      	cmp	r0, #0
 800af12:	d045      	beq.n	800afa0 <trans_anim_ready_cb+0xa0>
 800af14:	4601      	mov	r1, r0
 800af16:	4f27      	ldr	r7, [pc, #156]	; (800afb4 <trans_anim_ready_cb+0xb4>)
 800af18:	e005      	b.n	800af26 <trans_anim_ready_cb+0x26>
 800af1a:	4638      	mov	r0, r7
 800af1c:	f016 fb76 	bl	802160c <_lv_ll_get_next>
 800af20:	4601      	mov	r1, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	d03c      	beq.n	800afa0 <trans_anim_ready_cb+0xa0>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800af26:	428c      	cmp	r4, r1
 800af28:	d0f7      	beq.n	800af1a <trans_anim_ready_cb+0x1a>
 800af2a:	680a      	ldr	r2, [r1, #0]
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d1f3      	bne.n	800af1a <trans_anim_ready_cb+0x1a>
 800af32:	688a      	ldr	r2, [r1, #8]
 800af34:	68a3      	ldr	r3, [r4, #8]
 800af36:	429a      	cmp	r2, r3
 800af38:	d1ef      	bne.n	800af1a <trans_anim_ready_cb+0x1a>
 800af3a:	888a      	ldrh	r2, [r1, #4]
 800af3c:	88a3      	ldrh	r3, [r4, #4]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d1eb      	bne.n	800af1a <trans_anim_ready_cb+0x1a>
 800af42:	e02b      	b.n	800af9c <trans_anim_ready_cb+0x9c>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800af44:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800af48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800af4c:	59e1      	ldr	r1, [r4, r7]
 800af4e:	4628      	mov	r0, r5
 800af50:	f7ff ff40 	bl	800add4 <lv_obj_remove_style>
 800af54:	e022      	b.n	800af9c <trans_anim_ready_cb+0x9c>
        for(i = 0; i < obj->style_cnt; i++) {
 800af56:	3301      	adds	r3, #1
 800af58:	3208      	adds	r2, #8
 800af5a:	4563      	cmp	r3, ip
 800af5c:	d01e      	beq.n	800af9c <trans_anim_ready_cb+0x9c>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800af5e:	00df      	lsls	r7, r3, #3
 800af60:	79d1      	ldrb	r1, [r2, #7]
 800af62:	f011 0f02 	tst.w	r1, #2
 800af66:	d0f6      	beq.n	800af56 <trans_anim_ready_cb+0x56>
 800af68:	6851      	ldr	r1, [r2, #4]
 800af6a:	f3c1 0117 	ubfx	r1, r1, #0, #24
 800af6e:	68a0      	ldr	r0, [r4, #8]
 800af70:	4281      	cmp	r1, r0
 800af72:	d1f0      	bne.n	800af56 <trans_anim_ready_cb+0x56>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800af74:	4621      	mov	r1, r4
 800af76:	480f      	ldr	r0, [pc, #60]	; (800afb4 <trans_anim_ready_cb+0xb4>)
 800af78:	f016 fafd 	bl	8021576 <_lv_ll_remove>
                lv_mem_free(tr);
 800af7c:	4620      	mov	r0, r4
 800af7e:	f016 fc91 	bl	80218a4 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 800af82:	68ec      	ldr	r4, [r5, #12]
 800af84:	eb04 0807 	add.w	r8, r4, r7
                lv_style_remove_prop(obj_style->style, prop);
 800af88:	4631      	mov	r1, r6
 800af8a:	59e0      	ldr	r0, [r4, r7]
 800af8c:	f017 fcb8 	bl	8022900 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 800af90:	68eb      	ldr	r3, [r5, #12]
 800af92:	59d8      	ldr	r0, [r3, r7]
 800af94:	f017 fdfc 	bl	8022b90 <lv_style_is_empty>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d1d3      	bne.n	800af44 <trans_anim_ready_cb+0x44>
}
 800af9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(i = 0; i < obj->style_cnt; i++) {
 800afa0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800afa2:	f3c3 0cc5 	ubfx	ip, r3, #3, #6
 800afa6:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800afaa:	d0f7      	beq.n	800af9c <trans_anim_ready_cb+0x9c>
 800afac:	68ea      	ldr	r2, [r5, #12]
 800afae:	2300      	movs	r3, #0
 800afb0:	e7d5      	b.n	800af5e <trans_anim_ready_cb+0x5e>
 800afb2:	bf00      	nop
 800afb4:	200028cc 	.word	0x200028cc

0800afb8 <trans_anim_start_cb>:
{
 800afb8:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
 800afba:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 800afbc:	68a5      	ldr	r5, [r4, #8]
 800afbe:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800afc2:	88a2      	ldrh	r2, [r4, #4]
 800afc4:	4629      	mov	r1, r5
 800afc6:	6820      	ldr	r0, [r4, #0]
 800afc8:	f7ff fc0e 	bl	800a7e8 <lv_obj_get_style_prop>
 800afcc:	60e0      	str	r0, [r4, #12]
    lv_style_prop_t prop_tmp = tr->prop;
 800afce:	88a6      	ldrh	r6, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 800afd0:	2300      	movs	r3, #0
 800afd2:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800afd4:	4623      	mov	r3, r4
 800afd6:	4632      	mov	r2, r6
 800afd8:	4629      	mov	r1, r5
 800afda:	6820      	ldr	r0, [r4, #0]
 800afdc:	f7ff fab8 	bl	800a550 <trans_del>
    tr->prop = prop_tmp;
 800afe0:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800afe2:	68a1      	ldr	r1, [r4, #8]
 800afe4:	6820      	ldr	r0, [r4, #0]
 800afe6:	f7ff fb9d 	bl	800a724 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800afea:	68e2      	ldr	r2, [r4, #12]
 800afec:	88a1      	ldrh	r1, [r4, #4]
 800afee:	6800      	ldr	r0, [r0, #0]
 800aff0:	f017 fe6a 	bl	8022cc8 <lv_style_set_prop>
}
 800aff4:	bd70      	pop	{r4, r5, r6, pc}

0800aff6 <lv_obj_set_local_style_prop>:
{
 800aff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff8:	4606      	mov	r6, r0
 800affa:	460d      	mov	r5, r1
 800affc:	4617      	mov	r7, r2
 800affe:	461c      	mov	r4, r3
    lv_style_t * style = get_local_style(obj, selector);
 800b000:	4619      	mov	r1, r3
 800b002:	f7ff fb2b 	bl	800a65c <get_local_style>
    lv_style_set_prop(style, prop, value);
 800b006:	463a      	mov	r2, r7
 800b008:	4629      	mov	r1, r5
 800b00a:	f017 fe5d 	bl	8022cc8 <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 800b00e:	462a      	mov	r2, r5
 800b010:	4621      	mov	r1, r4
 800b012:	4630      	mov	r0, r6
 800b014:	f7ff fcaa 	bl	800a96c <lv_obj_refresh_style>
}
 800b018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b01a <lv_obj_get_local_style_prop>:
{
 800b01a:	b538      	push	{r3, r4, r5, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800b01c:	8c45      	ldrh	r5, [r0, #34]	; 0x22
 800b01e:	f3c5 04c5 	ubfx	r4, r5, #3, #6
 800b022:	f415 7ffc 	tst.w	r5, #504	; 0x1f8
 800b026:	d019      	beq.n	800b05c <lv_obj_get_local_style_prop+0x42>
 800b028:	68c0      	ldr	r0, [r0, #12]
 800b02a:	f04f 0c00 	mov.w	ip, #0
 800b02e:	e004      	b.n	800b03a <lv_obj_get_local_style_prop+0x20>
 800b030:	f10c 0c01 	add.w	ip, ip, #1
 800b034:	3008      	adds	r0, #8
 800b036:	45a4      	cmp	ip, r4
 800b038:	d00e      	beq.n	800b058 <lv_obj_get_local_style_prop+0x3e>
        if(obj->styles[i].is_local &&
 800b03a:	f890 e007 	ldrb.w	lr, [r0, #7]
 800b03e:	f01e 0f01 	tst.w	lr, #1
 800b042:	d0f5      	beq.n	800b030 <lv_obj_get_local_style_prop+0x16>
           obj->styles[i].selector == selector) {
 800b044:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800b048:	f3ce 0e17 	ubfx	lr, lr, #0, #24
        if(obj->styles[i].is_local &&
 800b04c:	459e      	cmp	lr, r3
 800b04e:	d1ef      	bne.n	800b030 <lv_obj_get_local_style_prop+0x16>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800b050:	6800      	ldr	r0, [r0, #0]
 800b052:	f017 fd2d 	bl	8022ab0 <lv_style_get_prop>
 800b056:	e000      	b.n	800b05a <lv_obj_get_local_style_prop+0x40>
    return LV_STYLE_RES_NOT_FOUND;
 800b058:	2000      	movs	r0, #0
}
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
    return LV_STYLE_RES_NOT_FOUND;
 800b05c:	2000      	movs	r0, #0
 800b05e:	e7fc      	b.n	800b05a <lv_obj_get_local_style_prop+0x40>

0800b060 <lv_obj_remove_local_style_prop>:
{
 800b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b062:	4614      	mov	r4, r2
    for(i = 0; i < obj->style_cnt; i++) {
 800b064:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800b066:	f3c3 02c5 	ubfx	r2, r3, #3, #6
 800b06a:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b06e:	d027      	beq.n	800b0c0 <lv_obj_remove_local_style_prop+0x60>
 800b070:	4605      	mov	r5, r0
 800b072:	460e      	mov	r6, r1
        if(obj->styles[i].is_local &&
 800b074:	68c0      	ldr	r0, [r0, #12]
 800b076:	4603      	mov	r3, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800b078:	f04f 0c00 	mov.w	ip, #0
 800b07c:	e004      	b.n	800b088 <lv_obj_remove_local_style_prop+0x28>
 800b07e:	f10c 0c01 	add.w	ip, ip, #1
 800b082:	3308      	adds	r3, #8
 800b084:	4594      	cmp	ip, r2
 800b086:	d018      	beq.n	800b0ba <lv_obj_remove_local_style_prop+0x5a>
        if(obj->styles[i].is_local &&
 800b088:	f893 e007 	ldrb.w	lr, [r3, #7]
 800b08c:	f01e 0f01 	tst.w	lr, #1
 800b090:	d0f5      	beq.n	800b07e <lv_obj_remove_local_style_prop+0x1e>
           obj->styles[i].selector == selector) {
 800b092:	6859      	ldr	r1, [r3, #4]
 800b094:	f3c1 0e17 	ubfx	lr, r1, #0, #24
        if(obj->styles[i].is_local &&
 800b098:	45a6      	cmp	lr, r4
 800b09a:	d1f0      	bne.n	800b07e <lv_obj_remove_local_style_prop+0x1e>
    if(i == obj->style_cnt) return false;
 800b09c:	4562      	cmp	r2, ip
 800b09e:	d011      	beq.n	800b0c4 <lv_obj_remove_local_style_prop+0x64>
    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	f850 003c 	ldr.w	r0, [r0, ip, lsl #3]
 800b0a6:	f017 fc2b 	bl	8022900 <lv_style_remove_prop>
    if(res == LV_RES_OK) {
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	b130      	cbz	r0, 800b0bc <lv_obj_remove_local_style_prop+0x5c>
        lv_obj_refresh_style(obj, selector, prop);
 800b0ae:	4632      	mov	r2, r6
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f7ff fc5a 	bl	800a96c <lv_obj_refresh_style>
 800b0b8:	e000      	b.n	800b0bc <lv_obj_remove_local_style_prop+0x5c>
    if(i == obj->style_cnt) return false;
 800b0ba:	2700      	movs	r7, #0
}
 800b0bc:	4638      	mov	r0, r7
 800b0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(i == obj->style_cnt) return false;
 800b0c0:	2700      	movs	r7, #0
 800b0c2:	e7fb      	b.n	800b0bc <lv_obj_remove_local_style_prop+0x5c>
 800b0c4:	2700      	movs	r7, #0
 800b0c6:	e7f9      	b.n	800b0bc <lv_obj_remove_local_style_prop+0x5c>

0800b0c8 <_lv_obj_style_create_transition>:
{
 800b0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0cc:	b092      	sub	sp, #72	; 0x48
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460e      	mov	r6, r1
 800b0d2:	4691      	mov	r9, r2
 800b0d4:	4698      	mov	r8, r3
 800b0d6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    obj->skip_trans = 1;
 800b0d8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800b0dc:	f043 0304 	orr.w	r3, r3, #4
 800b0e0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    obj->state = prev_state;
 800b0e4:	8402      	strh	r2, [r0, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b0e6:	892a      	ldrh	r2, [r5, #8]
 800b0e8:	f7ff fb7e 	bl	800a7e8 <lv_obj_get_style_prop>
 800b0ec:	4682      	mov	sl, r0
    obj->state = new_state;
 800b0ee:	f8a4 8020 	strh.w	r8, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b0f2:	892a      	ldrh	r2, [r5, #8]
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7ff fb76 	bl	800a7e8 <lv_obj_get_style_prop>
 800b0fc:	4607      	mov	r7, r0
    obj->skip_trans = 0;
 800b0fe:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800b102:	f36f 0382 	bfc	r3, #2, #1
 800b106:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800b10a:	4582      	cmp	sl, r0
 800b10c:	d047      	beq.n	800b19e <_lv_obj_style_create_transition+0xd6>
    obj->state = prev_state;
 800b10e:	f8a4 9020 	strh.w	r9, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b112:	892a      	ldrh	r2, [r5, #8]
 800b114:	4631      	mov	r1, r6
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff fb66 	bl	800a7e8 <lv_obj_get_style_prop>
 800b11c:	4681      	mov	r9, r0
    obj->state = new_state;
 800b11e:	f8a4 8020 	strh.w	r8, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800b122:	4631      	mov	r1, r6
 800b124:	4620      	mov	r0, r4
 800b126:	f7ff fafd 	bl	800a724 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800b12a:	464a      	mov	r2, r9
 800b12c:	8929      	ldrh	r1, [r5, #8]
 800b12e:	6800      	ldr	r0, [r0, #0]
 800b130:	f017 fdca 	bl	8022cc8 <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800b134:	892b      	ldrh	r3, [r5, #8]
 800b136:	2b0b      	cmp	r3, #11
 800b138:	d033      	beq.n	800b1a2 <_lv_obj_style_create_transition+0xda>
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800b13a:	483a      	ldr	r0, [pc, #232]	; (800b224 <_lv_obj_style_create_transition+0x15c>)
 800b13c:	f016 f9dd 	bl	80214fa <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 800b140:	4680      	mov	r8, r0
 800b142:	2800      	cmp	r0, #0
 800b144:	d053      	beq.n	800b1ee <_lv_obj_style_create_transition+0x126>
    tr->start_value = v1;
 800b146:	f8c0 900c 	str.w	r9, [r0, #12]
    tr->end_value = v2;
 800b14a:	6107      	str	r7, [r0, #16]
    tr->obj = obj;
 800b14c:	6004      	str	r4, [r0, #0]
    tr->prop = tr_dsc->prop;
 800b14e:	892b      	ldrh	r3, [r5, #8]
 800b150:	8083      	strh	r3, [r0, #4]
    tr->selector = part;
 800b152:	6086      	str	r6, [r0, #8]
    lv_anim_init(&a);
 800b154:	a801      	add	r0, sp, #4
 800b156:	f015 fb0f 	bl	8020778 <lv_anim_init>
    a->var = var;
 800b15a:	f8cd 8004 	str.w	r8, [sp, #4]
    a->exec_cb = exec_cb;
 800b15e:	4b32      	ldr	r3, [pc, #200]	; (800b228 <_lv_obj_style_create_transition+0x160>)
 800b160:	9302      	str	r3, [sp, #8]
    a->start_cb = start_cb;
 800b162:	4b32      	ldr	r3, [pc, #200]	; (800b22c <_lv_obj_style_create_transition+0x164>)
 800b164:	9303      	str	r3, [sp, #12]
    a->ready_cb = ready_cb;
 800b166:	4b32      	ldr	r3, [pc, #200]	; (800b230 <_lv_obj_style_create_transition+0x168>)
 800b168:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 800b16a:	2300      	movs	r3, #0
 800b16c:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 800b16e:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 800b170:	22ff      	movs	r2, #255	; 0xff
 800b172:	920b      	str	r2, [sp, #44]	; 0x2c
    a->time = duration;
 800b174:	882a      	ldrh	r2, [r5, #0]
 800b176:	920c      	str	r2, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
 800b178:	886a      	ldrh	r2, [r5, #2]
 800b17a:	4252      	negs	r2, r2
 800b17c:	920d      	str	r2, [sp, #52]	; 0x34
    a->path_cb = path_cb;
 800b17e:	68ea      	ldr	r2, [r5, #12]
 800b180:	9208      	str	r2, [sp, #32]
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 800b182:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800b186:	f363 0200 	bfi	r2, r3, #0, #1
 800b18a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    a.user_data = tr_dsc->user_data;
 800b18e:	692b      	ldr	r3, [r5, #16]
 800b190:	9307      	str	r3, [sp, #28]
    lv_anim_start(&a);
 800b192:	a801      	add	r0, sp, #4
 800b194:	f015 fb42 	bl	802081c <lv_anim_start>
}
 800b198:	b012      	add	sp, #72	; 0x48
 800b19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800b19e:	d1b6      	bne.n	800b10e <_lv_obj_style_create_transition+0x46>
 800b1a0:	e7fa      	b.n	800b198 <_lv_obj_style_create_transition+0xd0>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800b1a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b1a6:	4599      	cmp	r9, r3
 800b1a8:	d022      	beq.n	800b1f0 <_lv_obj_style_create_transition+0x128>
 800b1aa:	429f      	cmp	r7, r3
 800b1ac:	d1c5      	bne.n	800b13a <_lv_obj_style_create_transition+0x72>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f7fc fc9b 	bl	8007aea <lv_obj_get_width>
 800b1b4:	4680      	mov	r8, r0
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f7fc fc9d 	bl	8007af6 <lv_obj_get_height>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800b1bc:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800b1c0:	f348 084f 	sbfx	r8, r8, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800b1c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b1c8:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800b1cc:	4598      	cmp	r8, r3
 800b1ce:	db0a      	blt.n	800b1e6 <_lv_obj_style_create_transition+0x11e>
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	b21f      	sxth	r7, r3
 800b1d4:	e7b1      	b.n	800b13a <_lv_obj_style_create_transition+0x72>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800b1d6:	f108 0901 	add.w	r9, r8, #1
 800b1da:	fa0f f989 	sxth.w	r9, r9
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800b1de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b1e2:	429f      	cmp	r7, r3
 800b1e4:	d1a9      	bne.n	800b13a <_lv_obj_style_create_transition+0x72>
 800b1e6:	f108 0701 	add.w	r7, r8, #1
 800b1ea:	b23f      	sxth	r7, r7
 800b1ec:	e7a5      	b.n	800b13a <_lv_obj_style_create_transition+0x72>
    LV_ASSERT_MALLOC(tr);
 800b1ee:	e7fe      	b.n	800b1ee <_lv_obj_style_create_transition+0x126>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f7fc fc7a 	bl	8007aea <lv_obj_get_width>
 800b1f6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b1fa:	f340 084f 	sbfx	r8, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800b1fe:	4620      	mov	r0, r4
 800b200:	f7fc fc79 	bl	8007af6 <lv_obj_get_height>
 800b204:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b208:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800b20c:	4598      	cmp	r8, r3
 800b20e:	dbe2      	blt.n	800b1d6 <_lv_obj_style_create_transition+0x10e>
 800b210:	f103 0901 	add.w	r9, r3, #1
 800b214:	fa0f f989 	sxth.w	r9, r9
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800b218:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b21c:	4297      	cmp	r7, r2
 800b21e:	d18c      	bne.n	800b13a <_lv_obj_style_create_transition+0x72>
 800b220:	e7d6      	b.n	800b1d0 <_lv_obj_style_create_transition+0x108>
 800b222:	bf00      	nop
 800b224:	200028cc 	.word	0x200028cc
 800b228:	0800ac45 	.word	0x0800ac45
 800b22c:	0800afb9 	.word	0x0800afb9
 800b230:	0800af01 	.word	0x0800af01

0800b234 <_lv_obj_style_apply_color_filter>:
{
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b236:	4614      	mov	r4, r2
    if(obj == NULL) return v;
 800b238:	b1c0      	cbz	r0, 800b26c <_lv_obj_style_apply_color_filter+0x38>
 800b23a:	460d      	mov	r5, r1
 800b23c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800b23e:	2261      	movs	r2, #97	; 0x61
 800b240:	f7ff fad2 	bl	800a7e8 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 800b244:	4607      	mov	r7, r0
 800b246:	b178      	cbz	r0, 800b268 <_lv_obj_style_apply_color_filter+0x34>
 800b248:	6803      	ldr	r3, [r0, #0]
 800b24a:	b16b      	cbz	r3, 800b268 <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800b24c:	2262      	movs	r2, #98	; 0x62
 800b24e:	4629      	mov	r1, r5
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff fac9 	bl	800a7e8 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800b256:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 800b25a:	d005      	beq.n	800b268 <_lv_obj_style_apply_color_filter+0x34>
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	4621      	mov	r1, r4
 800b260:	4638      	mov	r0, r7
 800b262:	4798      	blx	r3
 800b264:	f360 040f 	bfi	r4, r0, #0, #16
    return v;
 800b268:	4620      	mov	r0, r4
}
 800b26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj == NULL) return v;
 800b26c:	4610      	mov	r0, r2
 800b26e:	e7fc      	b.n	800b26a <_lv_obj_style_apply_color_filter+0x36>

0800b270 <_lv_obj_style_state_compare>:
{
 800b270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b274:	b083      	sub	sp, #12
    for(i = 0; i < obj->style_cnt; i++) {
 800b276:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800b278:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b27c:	f000 812c 	beq.w	800b4d8 <_lv_obj_style_state_compare+0x268>
 800b280:	4606      	mov	r6, r0
 800b282:	2500      	movs	r5, #0
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800b284:	46a9      	mov	r9, r5
        bool valid1 = state_act & (~state1) ? false : true;
 800b286:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 800b28a:	43d7      	mvns	r7, r2
 800b28c:	e015      	b.n	800b2ba <_lv_obj_style_state_compare+0x4a>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800b28e:	f04f 0903 	mov.w	r9, #3
}
 800b292:	4648      	mov	r0, r9
 800b294:	b003      	add	sp, #12
 800b296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b29a:	aa01      	add	r2, sp, #4
 800b29c:	2169      	movs	r1, #105	; 0x69
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f017 fc06 	bl	8022ab0 <lv_style_get_prop>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	f000 80ae 	beq.w	800b406 <_lv_obj_style_state_compare+0x196>
 800b2aa:	f04f 0902 	mov.w	r9, #2
    for(i = 0; i < obj->style_cnt; i++) {
 800b2ae:	3501      	adds	r5, #1
 800b2b0:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 800b2b2:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b2b6:	42ab      	cmp	r3, r5
 800b2b8:	d9eb      	bls.n	800b292 <_lv_obj_style_state_compare+0x22>
        if(obj->styles[i].is_trans) continue;
 800b2ba:	00e8      	lsls	r0, r5, #3
 800b2bc:	68f2      	ldr	r2, [r6, #12]
 800b2be:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 800b2c2:	79d9      	ldrb	r1, [r3, #7]
 800b2c4:	f011 0f02 	tst.w	r1, #2
 800b2c8:	d1f1      	bne.n	800b2ae <_lv_obj_style_state_compare+0x3e>
        bool valid1 = state_act & (~state1) ? false : true;
 800b2ca:	8899      	ldrh	r1, [r3, #4]
 800b2cc:	ea18 0f01 	tst.w	r8, r1
 800b2d0:	bf0c      	ite	eq
 800b2d2:	2301      	moveq	r3, #1
 800b2d4:	2300      	movne	r3, #0
        bool valid2 = state_act & (~state2) ? false : true;
 800b2d6:	420f      	tst	r7, r1
        if(valid1 != valid2) {
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	bf0c      	ite	eq
 800b2dc:	2101      	moveq	r1, #1
 800b2de:	2100      	movne	r1, #0
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	d0e4      	beq.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            lv_style_t * style = obj->styles[i].style;
 800b2e4:	5814      	ldr	r4, [r2, r0]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800b2e6:	aa01      	add	r2, sp, #4
 800b2e8:	2110      	movs	r1, #16
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f017 fbe0 	bl	8022ab0 <lv_style_get_prop>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d1cc      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800b2f4:	aa01      	add	r2, sp, #4
 800b2f6:	2111      	movs	r1, #17
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f017 fbd9 	bl	8022ab0 <lv_style_get_prop>
 800b2fe:	2800      	cmp	r0, #0
 800b300:	d1c5      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800b302:	aa01      	add	r2, sp, #4
 800b304:	2112      	movs	r1, #18
 800b306:	4620      	mov	r0, r4
 800b308:	f017 fbd2 	bl	8022ab0 <lv_style_get_prop>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1be      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800b310:	aa01      	add	r2, sp, #4
 800b312:	2113      	movs	r1, #19
 800b314:	4620      	mov	r0, r4
 800b316:	f017 fbcb 	bl	8022ab0 <lv_style_get_prop>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d1b7      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800b31e:	aa01      	add	r2, sp, #4
 800b320:	2115      	movs	r1, #21
 800b322:	4620      	mov	r0, r4
 800b324:	f017 fbc4 	bl	8022ab0 <lv_style_get_prop>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d1b0      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800b32c:	aa01      	add	r2, sp, #4
 800b32e:	2114      	movs	r1, #20
 800b330:	4620      	mov	r0, r4
 800b332:	f017 fbbd 	bl	8022ab0 <lv_style_get_prop>
 800b336:	2800      	cmp	r0, #0
 800b338:	d1a9      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800b33a:	aa01      	add	r2, sp, #4
 800b33c:	210a      	movs	r1, #10
 800b33e:	4620      	mov	r0, r4
 800b340:	f017 fbb6 	bl	8022ab0 <lv_style_get_prop>
 800b344:	2800      	cmp	r0, #0
 800b346:	d1a2      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800b348:	aa01      	add	r2, sp, #4
 800b34a:	216a      	movs	r1, #106	; 0x6a
 800b34c:	4620      	mov	r0, r4
 800b34e:	f017 fbaf 	bl	8022ab0 <lv_style_get_prop>
 800b352:	2800      	cmp	r0, #0
 800b354:	d19b      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800b356:	aa01      	add	r2, sp, #4
 800b358:	216b      	movs	r1, #107	; 0x6b
 800b35a:	4620      	mov	r0, r4
 800b35c:	f017 fba8 	bl	8022ab0 <lv_style_get_prop>
 800b360:	2800      	cmp	r0, #0
 800b362:	d194      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800b364:	aa01      	add	r2, sp, #4
 800b366:	2101      	movs	r1, #1
 800b368:	4620      	mov	r0, r4
 800b36a:	f017 fba1 	bl	8022ab0 <lv_style_get_prop>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d18d      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800b372:	aa01      	add	r2, sp, #4
 800b374:	2104      	movs	r1, #4
 800b376:	4620      	mov	r0, r4
 800b378:	f017 fb9a 	bl	8022ab0 <lv_style_get_prop>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d186      	bne.n	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800b380:	aa01      	add	r2, sp, #4
 800b382:	2102      	movs	r1, #2
 800b384:	4620      	mov	r0, r4
 800b386:	f017 fb93 	bl	8022ab0 <lv_style_get_prop>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	f47f af7f 	bne.w	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800b390:	aa01      	add	r2, sp, #4
 800b392:	2103      	movs	r1, #3
 800b394:	4620      	mov	r0, r4
 800b396:	f017 fb8b 	bl	8022ab0 <lv_style_get_prop>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	f47f af77 	bne.w	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800b3a0:	aa01      	add	r2, sp, #4
 800b3a2:	2105      	movs	r1, #5
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f017 fb83 	bl	8022ab0 <lv_style_get_prop>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f47f af6f 	bne.w	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800b3b0:	aa01      	add	r2, sp, #4
 800b3b2:	2106      	movs	r1, #6
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f017 fb7b 	bl	8022ab0 <lv_style_get_prop>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	f47f af67 	bne.w	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800b3c0:	aa01      	add	r2, sp, #4
 800b3c2:	2132      	movs	r1, #50	; 0x32
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f017 fb73 	bl	8022ab0 <lv_style_get_prop>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	f47f af5f 	bne.w	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800b3d0:	aa01      	add	r2, sp, #4
 800b3d2:	216d      	movs	r1, #109	; 0x6d
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f017 fb6b 	bl	8022ab0 <lv_style_get_prop>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	f47f af57 	bne.w	800b28e <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800b3e0:	aa01      	add	r2, sp, #4
 800b3e2:	216c      	movs	r1, #108	; 0x6c
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f017 fb63 	bl	8022ab0 <lv_style_get_prop>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f47f af4f 	bne.w	800b28e <_lv_obj_style_state_compare+0x1e>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b3f0:	aa01      	add	r2, sp, #4
 800b3f2:	2168      	movs	r1, #104	; 0x68
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f017 fb5b 	bl	8022ab0 <lv_style_get_prop>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f43f af4d 	beq.w	800b29a <_lv_obj_style_state_compare+0x2a>
 800b400:	f04f 0902 	mov.w	r9, #2
 800b404:	e753      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b406:	aa01      	add	r2, sp, #4
 800b408:	216d      	movs	r1, #109	; 0x6d
 800b40a:	4620      	mov	r0, r4
 800b40c:	f017 fb50 	bl	8022ab0 <lv_style_get_prop>
 800b410:	b110      	cbz	r0, 800b418 <_lv_obj_style_state_compare+0x1a8>
 800b412:	f04f 0902 	mov.w	r9, #2
 800b416:	e74a      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b418:	aa01      	add	r2, sp, #4
 800b41a:	216c      	movs	r1, #108	; 0x6c
 800b41c:	4620      	mov	r0, r4
 800b41e:	f017 fb47 	bl	8022ab0 <lv_style_get_prop>
 800b422:	b110      	cbz	r0, 800b42a <_lv_obj_style_state_compare+0x1ba>
 800b424:	f04f 0902 	mov.w	r9, #2
 800b428:	e741      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b42a:	aa01      	add	r2, sp, #4
 800b42c:	2137      	movs	r1, #55	; 0x37
 800b42e:	4620      	mov	r0, r4
 800b430:	f017 fb3e 	bl	8022ab0 <lv_style_get_prop>
 800b434:	b110      	cbz	r0, 800b43c <_lv_obj_style_state_compare+0x1cc>
 800b436:	f04f 0902 	mov.w	r9, #2
 800b43a:	e738      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b43c:	aa01      	add	r2, sp, #4
 800b43e:	2138      	movs	r1, #56	; 0x38
 800b440:	4620      	mov	r0, r4
 800b442:	f017 fb35 	bl	8022ab0 <lv_style_get_prop>
 800b446:	b110      	cbz	r0, 800b44e <_lv_obj_style_state_compare+0x1de>
 800b448:	f04f 0902 	mov.w	r9, #2
 800b44c:	e72f      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b44e:	aa01      	add	r2, sp, #4
 800b450:	2135      	movs	r1, #53	; 0x35
 800b452:	4620      	mov	r0, r4
 800b454:	f017 fb2c 	bl	8022ab0 <lv_style_get_prop>
 800b458:	b110      	cbz	r0, 800b460 <_lv_obj_style_state_compare+0x1f0>
 800b45a:	f04f 0902 	mov.w	r9, #2
 800b45e:	e726      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b460:	aa01      	add	r2, sp, #4
 800b462:	2140      	movs	r1, #64	; 0x40
 800b464:	4620      	mov	r0, r4
 800b466:	f017 fb23 	bl	8022ab0 <lv_style_get_prop>
 800b46a:	b110      	cbz	r0, 800b472 <_lv_obj_style_state_compare+0x202>
 800b46c:	f04f 0902 	mov.w	r9, #2
 800b470:	e71d      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b472:	aa01      	add	r2, sp, #4
 800b474:	2145      	movs	r1, #69	; 0x45
 800b476:	4620      	mov	r0, r4
 800b478:	f017 fb1a 	bl	8022ab0 <lv_style_get_prop>
 800b47c:	b110      	cbz	r0, 800b484 <_lv_obj_style_state_compare+0x214>
 800b47e:	f04f 0902 	mov.w	r9, #2
 800b482:	e714      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b484:	aa01      	add	r2, sp, #4
 800b486:	2141      	movs	r1, #65	; 0x41
 800b488:	4620      	mov	r0, r4
 800b48a:	f017 fb11 	bl	8022ab0 <lv_style_get_prop>
 800b48e:	b110      	cbz	r0, 800b496 <_lv_obj_style_state_compare+0x226>
 800b490:	f04f 0902 	mov.w	r9, #2
 800b494:	e70b      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b496:	aa01      	add	r2, sp, #4
 800b498:	2142      	movs	r1, #66	; 0x42
 800b49a:	4620      	mov	r0, r4
 800b49c:	f017 fb08 	bl	8022ab0 <lv_style_get_prop>
 800b4a0:	b110      	cbz	r0, 800b4a8 <_lv_obj_style_state_compare+0x238>
 800b4a2:	f04f 0902 	mov.w	r9, #2
 800b4a6:	e702      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b4a8:	aa01      	add	r2, sp, #4
 800b4aa:	2143      	movs	r1, #67	; 0x43
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f017 faff 	bl	8022ab0 <lv_style_get_prop>
 800b4b2:	b110      	cbz	r0, 800b4ba <_lv_obj_style_state_compare+0x24a>
 800b4b4:	f04f 0902 	mov.w	r9, #2
 800b4b8:	e6f9      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b4ba:	aa01      	add	r2, sp, #4
 800b4bc:	2149      	movs	r1, #73	; 0x49
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f017 faf6 	bl	8022ab0 <lv_style_get_prop>
 800b4c4:	b928      	cbnz	r0, 800b4d2 <_lv_obj_style_state_compare+0x262>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800b4c6:	f1b9 0f01 	cmp.w	r9, #1
 800b4ca:	bf38      	it	cc
 800b4cc:	f04f 0901 	movcc.w	r9, #1
 800b4d0:	e6ed      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b4d2:	f04f 0902 	mov.w	r9, #2
 800b4d6:	e6ea      	b.n	800b2ae <_lv_obj_style_state_compare+0x3e>
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800b4d8:	f04f 0900 	mov.w	r9, #0
 800b4dc:	e6d9      	b.n	800b292 <_lv_obj_style_state_compare+0x22>

0800b4de <lv_obj_style_get_selector_state>:
}
 800b4de:	b280      	uxth	r0, r0
 800b4e0:	4770      	bx	lr

0800b4e2 <lv_obj_style_get_selector_part>:
}
 800b4e2:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800b4e6:	4770      	bx	lr

0800b4e8 <lv_obj_calculate_style_text_align>:
{
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800b4ee:	225b      	movs	r2, #91	; 0x5b
 800b4f0:	f7ff f97a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_text_align_t)v.num;
 800b4f4:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800b4f6:	2216      	movs	r2, #22
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f7ff f974 	bl	800a7e8 <lv_obj_get_style_prop>
}
 800b500:	4620      	mov	r0, r4
 800b502:	2c01      	cmp	r4, #1
 800b504:	bf38      	it	cc
 800b506:	2001      	movcc	r0, #1
 800b508:	bd70      	pop	{r4, r5, r6, pc}

0800b50a <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b50a:	b508      	push	{r3, lr}
 800b50c:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 800b50e:	460a      	mov	r2, r1
 800b510:	2101      	movs	r1, #1
 800b512:	f7ff fd70 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b516:	bd08      	pop	{r3, pc}

0800b518 <lv_obj_set_style_min_width>:

void lv_obj_set_style_min_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b518:	b508      	push	{r3, lr}
 800b51a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MIN_WIDTH, v, selector);
 800b51c:	460a      	mov	r2, r1
 800b51e:	2102      	movs	r1, #2
 800b520:	f7ff fd69 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b524:	bd08      	pop	{r3, pc}

0800b526 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b526:	b508      	push	{r3, lr}
 800b528:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 800b52a:	460a      	mov	r2, r1
 800b52c:	2104      	movs	r1, #4
 800b52e:	f7ff fd62 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b532:	bd08      	pop	{r3, pc}

0800b534 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b534:	b508      	push	{r3, lr}
 800b536:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800b538:	460a      	mov	r2, r1
 800b53a:	2107      	movs	r1, #7
 800b53c:	f7ff fd5b 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b540:	bd08      	pop	{r3, pc}

0800b542 <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b542:	b508      	push	{r3, lr}
 800b544:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800b546:	460a      	mov	r2, r1
 800b548:	2108      	movs	r1, #8
 800b54a:	f7ff fd54 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b54e:	bd08      	pop	{r3, pc}

0800b550 <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 800b550:	b508      	push	{r3, lr}
 800b552:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 800b554:	460a      	mov	r2, r1
 800b556:	2109      	movs	r1, #9
 800b558:	f7ff fd4d 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b55c:	bd08      	pop	{r3, pc}

0800b55e <lv_obj_set_style_pad_top>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TRANSFORM_PIVOT_Y, v, selector);
}

void lv_obj_set_style_pad_top(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b55e:	b508      	push	{r3, lr}
 800b560:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_TOP, v, selector);
 800b562:	460a      	mov	r2, r1
 800b564:	2110      	movs	r1, #16
 800b566:	f7ff fd46 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b56a:	bd08      	pop	{r3, pc}

0800b56c <lv_obj_set_style_pad_bottom>:

void lv_obj_set_style_pad_bottom(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b56c:	b508      	push	{r3, lr}
 800b56e:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_BOTTOM, v, selector);
 800b570:	460a      	mov	r2, r1
 800b572:	2111      	movs	r1, #17
 800b574:	f7ff fd3f 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b578:	bd08      	pop	{r3, pc}

0800b57a <lv_obj_set_style_pad_left>:

void lv_obj_set_style_pad_left(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b57a:	b508      	push	{r3, lr}
 800b57c:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_LEFT, v, selector);
 800b57e:	460a      	mov	r2, r1
 800b580:	2112      	movs	r1, #18
 800b582:	f7ff fd38 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b586:	bd08      	pop	{r3, pc}

0800b588 <lv_obj_set_style_pad_right>:

void lv_obj_set_style_pad_right(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800b588:	b508      	push	{r3, lr}
 800b58a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_RIGHT, v, selector);
 800b58c:	460a      	mov	r2, r1
 800b58e:	2113      	movs	r1, #19
 800b590:	f7ff fd31 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b594:	bd08      	pop	{r3, pc}

0800b596 <lv_obj_set_style_bg_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_COLUMN, v, selector);
}

void lv_obj_set_style_bg_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800b596:	b500      	push	{lr}
 800b598:	b083      	sub	sp, #12
 800b59a:	4613      	mov	r3, r2
    lv_style_value_t v = {
 800b59c:	f04f 0c00 	mov.w	ip, #0
 800b5a0:	f8ad c000 	strh.w	ip, [sp]
 800b5a4:	4662      	mov	r2, ip
 800b5a6:	f36c 421f 	bfi	r2, ip, #16, #16
 800b5aa:	f361 020f 	bfi	r2, r1, #0, #16
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_COLOR, v, selector);
 800b5ae:	2120      	movs	r1, #32
 800b5b0:	f7ff fd21 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b5b4:	b003      	add	sp, #12
 800b5b6:	f85d fb04 	ldr.w	pc, [sp], #4

0800b5ba <lv_obj_set_style_bg_opa>:

void lv_obj_set_style_bg_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800b5ba:	b508      	push	{r3, lr}
 800b5bc:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_OPA, v, selector);
 800b5be:	460a      	mov	r2, r1
 800b5c0:	2121      	movs	r1, #33	; 0x21
 800b5c2:	f7ff fd18 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b5c6:	bd08      	pop	{r3, pc}

0800b5c8 <lv_obj_set_style_text_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ARC_IMG_SRC, v, selector);
}

void lv_obj_set_style_text_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800b5c8:	b500      	push	{lr}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	4613      	mov	r3, r2
    lv_style_value_t v = {
 800b5ce:	f04f 0c00 	mov.w	ip, #0
 800b5d2:	f8ad c000 	strh.w	ip, [sp]
 800b5d6:	4662      	mov	r2, ip
 800b5d8:	f36c 421f 	bfi	r2, ip, #16, #16
 800b5dc:	f361 020f 	bfi	r2, r1, #0, #16
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_COLOR, v, selector);
 800b5e0:	2155      	movs	r1, #85	; 0x55
 800b5e2:	f7ff fd08 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b5e6:	b003      	add	sp, #12
 800b5e8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b5ec <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 800b5ec:	b508      	push	{r3, lr}
 800b5ee:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 800b5f0:	460a      	mov	r2, r1
 800b5f2:	215b      	movs	r1, #91	; 0x5b
 800b5f4:	f7ff fcff 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b5f8:	bd08      	pop	{r3, pc}

0800b5fa <lv_obj_set_style_layout>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BLEND_MODE, v, selector);
}

void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
 800b5fa:	b508      	push	{r3, lr}
 800b5fc:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 800b5fe:	460a      	mov	r2, r1
 800b600:	210a      	movs	r1, #10
 800b602:	f7ff fcf8 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b606:	bd08      	pop	{r3, pc}

0800b608 <lv_obj_set_style_base_dir>:

void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
 800b608:	b508      	push	{r3, lr}
 800b60a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 800b60c:	460a      	mov	r2, r1
 800b60e:	2116      	movs	r1, #22
 800b610:	f7ff fcf1 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 800b614:	bd08      	pop	{r3, pc}

0800b616 <lv_obj_get_screen>:

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 800b616:	e000      	b.n	800b61a <lv_obj_get_screen+0x4>
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800b618:	4618      	mov	r0, r3
    if(obj == NULL) return NULL;
 800b61a:	b110      	cbz	r0, 800b622 <lv_obj_get_screen+0xc>
    return obj->parent;
 800b61c:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1fa      	bne.n	800b618 <lv_obj_get_screen+0x2>
}
 800b622:	4770      	bx	lr

0800b624 <lv_obj_get_disp>:
{
 800b624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b626:	4605      	mov	r5, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800b628:	6843      	ldr	r3, [r0, #4]
 800b62a:	b113      	cbz	r3, 800b632 <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 800b62c:	f7ff fff3 	bl	800b616 <lv_obj_get_screen>
 800b630:	4605      	mov	r5, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800b632:	480d      	ldr	r0, [pc, #52]	; (800b668 <lv_obj_get_disp+0x44>)
 800b634:	f015 ffe2 	bl	80215fc <_lv_ll_get_head>
 800b638:	4601      	mov	r1, r0
 800b63a:	b190      	cbz	r0, 800b662 <lv_obj_get_disp+0x3e>
 800b63c:	4f0a      	ldr	r7, [pc, #40]	; (800b668 <lv_obj_get_disp+0x44>)
        for(i = 0; i < d->screen_cnt; i++) {
 800b63e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800b640:	b14e      	cbz	r6, 800b656 <lv_obj_get_disp+0x32>
 800b642:	68ca      	ldr	r2, [r1, #12]
 800b644:	3a04      	subs	r2, #4
 800b646:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800b648:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800b64c:	42ac      	cmp	r4, r5
 800b64e:	d008      	beq.n	800b662 <lv_obj_get_disp+0x3e>
        for(i = 0; i < d->screen_cnt; i++) {
 800b650:	3301      	adds	r3, #1
 800b652:	42b3      	cmp	r3, r6
 800b654:	d1f8      	bne.n	800b648 <lv_obj_get_disp+0x24>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800b656:	4638      	mov	r0, r7
 800b658:	f015 ffd8 	bl	802160c <_lv_ll_get_next>
 800b65c:	4601      	mov	r1, r0
 800b65e:	2800      	cmp	r0, #0
 800b660:	d1ed      	bne.n	800b63e <lv_obj_get_disp+0x1a>
}
 800b662:	4608      	mov	r0, r1
 800b664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b666:	bf00      	nop
 800b668:	200027dc 	.word	0x200027dc

0800b66c <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 800b66c:	b108      	cbz	r0, 800b672 <lv_obj_get_parent+0x6>
    return obj->parent;
 800b66e:	6840      	ldr	r0, [r0, #4]
 800b670:	4770      	bx	lr
}
 800b672:	4770      	bx	lr

0800b674 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 800b674:	6880      	ldr	r0, [r0, #8]
 800b676:	b188      	cbz	r0, 800b69c <lv_obj_get_child+0x28>

    uint32_t idu;
    if(id < 0) {
 800b678:	2900      	cmp	r1, #0
 800b67a:	db07      	blt.n	800b68c <lv_obj_get_child+0x18>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
        idu = (uint32_t) id;
    }
    else {
        idu = id;
 800b67c:	460b      	mov	r3, r1
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800b67e:	6842      	ldr	r2, [r0, #4]
 800b680:	429a      	cmp	r2, r3
 800b682:	d90a      	bls.n	800b69a <lv_obj_get_child+0x26>
    else return obj->spec_attr->children[id];
 800b684:	6803      	ldr	r3, [r0, #0]
 800b686:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800b68a:	4770      	bx	lr
        id = obj->spec_attr->child_cnt + id;
 800b68c:	6843      	ldr	r3, [r0, #4]
 800b68e:	4419      	add	r1, r3
 800b690:	460b      	mov	r3, r1
        if(id < 0) return NULL;
 800b692:	2900      	cmp	r1, #0
 800b694:	daf3      	bge.n	800b67e <lv_obj_get_child+0xa>
 800b696:	2000      	movs	r0, #0
 800b698:	4770      	bx	lr
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800b69a:	2000      	movs	r0, #0
}
 800b69c:	4770      	bx	lr

0800b69e <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 800b69e:	6883      	ldr	r3, [r0, #8]
 800b6a0:	b10b      	cbz	r3, 800b6a6 <lv_obj_get_child_cnt+0x8>
    return obj->spec_attr->child_cnt;
 800b6a2:	6858      	ldr	r0, [r3, #4]
 800b6a4:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800b6a6:	2000      	movs	r0, #0
}
 800b6a8:	4770      	bx	lr

0800b6aa <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 800b6aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj == NULL) return NULL;
 800b6ac:	b1a8      	cbz	r0, 800b6da <lv_obj_get_index+0x30>
 800b6ae:	4607      	mov	r7, r0
    return obj->parent;
 800b6b0:	6846      	ldr	r6, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 800b6b2:	b1a6      	cbz	r6, 800b6de <lv_obj_get_index+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f7ff fff2 	bl	800b69e <lv_obj_get_child_cnt>
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	2400      	movs	r4, #0
 800b6be:	42a5      	cmp	r5, r4
 800b6c0:	d007      	beq.n	800b6d2 <lv_obj_get_index+0x28>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f7ff ffd5 	bl	800b674 <lv_obj_get_child>
 800b6ca:	4287      	cmp	r7, r0
 800b6cc:	d003      	beq.n	800b6d6 <lv_obj_get_index+0x2c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800b6ce:	3401      	adds	r4, #1
 800b6d0:	e7f5      	b.n	800b6be <lv_obj_get_index+0x14>
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 800b6d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(parent == NULL) return 0;
 800b6da:	2400      	movs	r4, #0
 800b6dc:	e7fb      	b.n	800b6d6 <lv_obj_get_index+0x2c>
 800b6de:	2400      	movs	r4, #0
 800b6e0:	e7f9      	b.n	800b6d6 <lv_obj_get_index+0x2c>

0800b6e2 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 800b6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e4:	4605      	mov	r5, r0
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2121      	movs	r1, #33	; 0x21
 800b6ea:	f7f8 fb09 	bl	8003d00 <lv_event_send>
    if(res == LV_RES_INV) return;
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d060      	beq.n	800b7b4 <obj_del_core+0xd2>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f7ff ffbd 	bl	800b674 <lv_obj_get_child>
    while(child) {
 800b6fa:	b140      	cbz	r0, 800b70e <obj_del_core+0x2c>
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 800b6fc:	2400      	movs	r4, #0
        obj_del_core(child);
 800b6fe:	f7ff fff0 	bl	800b6e2 <obj_del_core>
        child = lv_obj_get_child(obj, 0);
 800b702:	4621      	mov	r1, r4
 800b704:	4628      	mov	r0, r5
 800b706:	f7ff ffb5 	bl	800b674 <lv_obj_get_child>
    while(child) {
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d1f7      	bne.n	800b6fe <obj_del_core+0x1c>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 800b70e:	4628      	mov	r0, r5
 800b710:	f7fb f973 	bl	80069fa <lv_obj_get_group>
 800b714:	4606      	mov	r6, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800b716:	2000      	movs	r0, #0
 800b718:	f014 fed8 	bl	80204cc <lv_indev_get_next>
    while(indev) {
 800b71c:	4604      	mov	r4, r0
 800b71e:	b308      	cbz	r0, 800b764 <obj_del_core+0x82>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
            lv_indev_reset(indev, obj);
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
 800b720:	2700      	movs	r7, #0
 800b722:	e00f      	b.n	800b744 <obj_del_core+0x62>
            lv_indev_reset(indev, obj);
 800b724:	4629      	mov	r1, r5
 800b726:	4620      	mov	r0, r4
 800b728:	f7f8 fe9c 	bl	8004464 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800b72c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b72e:	42ab      	cmp	r3, r5
            indev->proc.types.pointer.last_pressed = NULL;
 800b730:	bf08      	it	eq
 800b732:	6367      	streq	r7, [r4, #52]	; 0x34
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800b734:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b736:	42b3      	cmp	r3, r6
 800b738:	d00b      	beq.n	800b752 <obj_del_core+0x70>
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 800b73a:	4620      	mov	r0, r4
 800b73c:	f014 fec6 	bl	80204cc <lv_indev_get_next>
    while(indev) {
 800b740:	4604      	mov	r4, r0
 800b742:	b178      	cbz	r0, 800b764 <obj_del_core+0x82>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800b744:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b746:	42ab      	cmp	r3, r5
 800b748:	d0ec      	beq.n	800b724 <obj_del_core+0x42>
 800b74a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	d1ed      	bne.n	800b72c <obj_del_core+0x4a>
 800b750:	e7e8      	b.n	800b724 <obj_del_core+0x42>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800b752:	f7f8 ff43 	bl	80045dc <lv_indev_get_obj_act>
 800b756:	4285      	cmp	r5, r0
 800b758:	d1ef      	bne.n	800b73a <obj_del_core+0x58>
            lv_indev_reset(indev, obj);
 800b75a:	4629      	mov	r1, r5
 800b75c:	4620      	mov	r0, r4
 800b75e:	f7f8 fe81 	bl	8004464 <lv_indev_reset>
 800b762:	e7ea      	b.n	800b73a <obj_del_core+0x58>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 800b764:	4628      	mov	r0, r5
 800b766:	f7fb fc0d 	bl	8006f84 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 800b76a:	686c      	ldr	r4, [r5, #4]
 800b76c:	b31c      	cbz	r4, 800b7b6 <obj_del_core+0xd4>
        disp->screen_cnt--;
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
    }
    /*Remove the object from the child list of its parent*/
    else {
        uint32_t id = lv_obj_get_index(obj);
 800b76e:	4628      	mov	r0, r5
 800b770:	f7ff ff9b 	bl	800b6aa <lv_obj_get_index>
        uint32_t i;
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800b774:	68a1      	ldr	r1, [r4, #8]
 800b776:	684b      	ldr	r3, [r1, #4]
 800b778:	3b01      	subs	r3, #1
 800b77a:	4298      	cmp	r0, r3
 800b77c:	d20e      	bcs.n	800b79c <obj_del_core+0xba>
 800b77e:	1c42      	adds	r2, r0, #1
 800b780:	0092      	lsls	r2, r2, #2
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800b782:	680b      	ldr	r3, [r1, #0]
 800b784:	3001      	adds	r0, #1
 800b786:	5899      	ldr	r1, [r3, r2]
 800b788:	4413      	add	r3, r2
 800b78a:	f843 1c04 	str.w	r1, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800b78e:	686b      	ldr	r3, [r5, #4]
 800b790:	6899      	ldr	r1, [r3, #8]
 800b792:	684b      	ldr	r3, [r1, #4]
 800b794:	3b01      	subs	r3, #1
 800b796:	3204      	adds	r2, #4
 800b798:	4298      	cmp	r0, r3
 800b79a:	d3f2      	bcc.n	800b782 <obj_del_core+0xa0>
        }
        obj->parent->spec_attr->child_cnt--;
 800b79c:	604b      	str	r3, [r1, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800b79e:	686b      	ldr	r3, [r5, #4]
 800b7a0:	689c      	ldr	r4, [r3, #8]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800b7a2:	6861      	ldr	r1, [r4, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800b7a4:	0089      	lsls	r1, r1, #2
 800b7a6:	6820      	ldr	r0, [r4, #0]
 800b7a8:	f016 f898 	bl	80218dc <lv_mem_realloc>
 800b7ac:	6020      	str	r0, [r4, #0]
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f016 f878 	bl	80218a4 <lv_mem_free>
}
 800b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_disp_t * disp = lv_obj_get_disp(obj);
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f7ff ff34 	bl	800b624 <lv_obj_get_disp>
 800b7bc:	4604      	mov	r4, r0
        for(i = 0; i < disp->screen_cnt; i++) {
 800b7be:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b7c0:	b311      	cbz	r1, 800b808 <obj_del_core+0x126>
 800b7c2:	68c2      	ldr	r2, [r0, #12]
 800b7c4:	3a04      	subs	r2, #4
 800b7c6:	2300      	movs	r3, #0
            if(disp->screens[i] == obj) break;
 800b7c8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b7cc:	42a8      	cmp	r0, r5
 800b7ce:	d004      	beq.n	800b7da <obj_del_core+0xf8>
        for(i = 0; i < disp->screen_cnt; i++) {
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	428b      	cmp	r3, r1
 800b7d4:	d1f8      	bne.n	800b7c8 <obj_del_core+0xe6>
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800b7d6:	3901      	subs	r1, #1
 800b7d8:	e00f      	b.n	800b7fa <obj_del_core+0x118>
 800b7da:	3901      	subs	r1, #1
 800b7dc:	4299      	cmp	r1, r3
 800b7de:	d90c      	bls.n	800b7fa <obj_del_core+0x118>
 800b7e0:	1c58      	adds	r0, r3, #1
 800b7e2:	0080      	lsls	r0, r0, #2
            disp->screens[i] = disp->screens[i + 1];
 800b7e4:	68e2      	ldr	r2, [r4, #12]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	5811      	ldr	r1, [r2, r0]
 800b7ea:	4402      	add	r2, r0
 800b7ec:	f842 1c04 	str.w	r1, [r2, #-4]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800b7f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b7f2:	3901      	subs	r1, #1
 800b7f4:	3004      	adds	r0, #4
 800b7f6:	428b      	cmp	r3, r1
 800b7f8:	d3f4      	bcc.n	800b7e4 <obj_del_core+0x102>
        disp->screen_cnt--;
 800b7fa:	6261      	str	r1, [r4, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800b7fc:	0089      	lsls	r1, r1, #2
 800b7fe:	68e0      	ldr	r0, [r4, #12]
 800b800:	f016 f86c 	bl	80218dc <lv_mem_realloc>
 800b804:	60e0      	str	r0, [r4, #12]
 800b806:	e7d2      	b.n	800b7ae <obj_del_core+0xcc>
        for(i = 0; i < disp->screen_cnt; i++) {
 800b808:	460b      	mov	r3, r1
 800b80a:	e7e9      	b.n	800b7e0 <obj_del_core+0xfe>

0800b80c <lv_obj_del>:
{
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800b810:	f7fc fbb2 	bl	8007f78 <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 800b814:	b1e4      	cbz	r4, 800b850 <lv_obj_del+0x44>
    return obj->parent;
 800b816:	6865      	ldr	r5, [r4, #4]
    if(par) {
 800b818:	b1d5      	cbz	r5, 800b850 <lv_obj_del+0x44>
        lv_obj_scrollbar_invalidate(par);
 800b81a:	4628      	mov	r0, r5
 800b81c:	f7fe fe2a 	bl	800a474 <lv_obj_scrollbar_invalidate>
    obj_del_core(obj);
 800b820:	4620      	mov	r0, r4
 800b822:	f7ff ff5e 	bl	800b6e2 <obj_del_core>
        lv_obj_update_layout(par);
 800b826:	4628      	mov	r0, r5
 800b828:	f7fd fa5a 	bl	8008ce0 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800b82c:	2100      	movs	r1, #0
 800b82e:	4628      	mov	r0, r5
 800b830:	f7fe fe43 	bl	800a4ba <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800b834:	4628      	mov	r0, r5
 800b836:	f7fe fe1d 	bl	800a474 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800b83a:	2200      	movs	r2, #0
 800b83c:	2122      	movs	r1, #34	; 0x22
 800b83e:	4628      	mov	r0, r5
 800b840:	f7f8 fa5e 	bl	8003d00 <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800b844:	2200      	movs	r2, #0
 800b846:	2124      	movs	r1, #36	; 0x24
 800b848:	4628      	mov	r0, r5
 800b84a:	f7f8 fa59 	bl	8003d00 <lv_event_send>
}
 800b84e:	bd70      	pop	{r4, r5, r6, pc}
        disp = lv_obj_get_disp(obj);
 800b850:	4620      	mov	r0, r4
 800b852:	f7ff fee7 	bl	800b624 <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 800b856:	4605      	mov	r5, r0
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0f8      	beq.n	800b84e <lv_obj_del+0x42>
        if(disp->act_scr == obj) act_scr_del = true;
 800b85c:	692e      	ldr	r6, [r5, #16]
    obj_del_core(obj);
 800b85e:	4620      	mov	r0, r4
 800b860:	f7ff ff3f 	bl	800b6e2 <obj_del_core>
    if(act_scr_del) {
 800b864:	42a6      	cmp	r6, r4
 800b866:	d1f2      	bne.n	800b84e <lv_obj_del+0x42>
        disp->act_scr = NULL;
 800b868:	2300      	movs	r3, #0
 800b86a:	612b      	str	r3, [r5, #16]
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
 800b86c:	e7ef      	b.n	800b84e <lv_obj_del+0x42>

0800b86e <lv_obj_set_parent>:
    if(obj->parent == NULL) {
 800b86e:	6843      	ldr	r3, [r0, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d070      	beq.n	800b956 <lv_obj_set_parent+0xe8>
{
 800b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	4607      	mov	r7, r0
 800b87a:	4688      	mov	r8, r1
    if(parent == NULL) {
 800b87c:	2900      	cmp	r1, #0
 800b87e:	d061      	beq.n	800b944 <lv_obj_set_parent+0xd6>
    lv_obj_invalidate(obj);
 800b880:	f7fc fb7a 	bl	8007f78 <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 800b884:	4640      	mov	r0, r8
 800b886:	f7fb facb 	bl	8006e20 <lv_obj_allocate_spec_attr>
    lv_obj_t * old_parent = obj->parent;
 800b88a:	687e      	ldr	r6, [r7, #4]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 800b88c:	4638      	mov	r0, r7
 800b88e:	f7ff ff0c 	bl	800b6aa <lv_obj_get_index>
 800b892:	4604      	mov	r4, r0
 800b894:	1c45      	adds	r5, r0, #1
 800b896:	00ad      	lsls	r5, r5, #2
 800b898:	e006      	b.n	800b8a8 <lv_obj_set_parent+0x3a>
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 800b89a:	68b3      	ldr	r3, [r6, #8]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	595a      	ldr	r2, [r3, r5]
 800b8a0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 800b8a4:	3401      	adds	r4, #1
 800b8a6:	3504      	adds	r5, #4
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f7ff fef8 	bl	800b69e <lv_obj_get_child_cnt>
 800b8ae:	3801      	subs	r0, #1
 800b8b0:	42a0      	cmp	r0, r4
 800b8b2:	dcf2      	bgt.n	800b89a <lv_obj_set_parent+0x2c>
    old_parent->spec_attr->child_cnt--;
 800b8b4:	68b2      	ldr	r2, [r6, #8]
 800b8b6:	6853      	ldr	r3, [r2, #4]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	6053      	str	r3, [r2, #4]
    if(old_parent->spec_attr->child_cnt) {
 800b8bc:	68b4      	ldr	r4, [r6, #8]
 800b8be:	6861      	ldr	r1, [r4, #4]
 800b8c0:	2900      	cmp	r1, #0
 800b8c2:	d041      	beq.n	800b948 <lv_obj_set_parent+0xda>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 800b8c4:	0089      	lsls	r1, r1, #2
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	f016 f808 	bl	80218dc <lv_mem_realloc>
 800b8cc:	6020      	str	r0, [r4, #0]
    parent->spec_attr->child_cnt++;
 800b8ce:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b8d2:	6853      	ldr	r3, [r2, #4]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	6053      	str	r3, [r2, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800b8d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
                                                 parent->spec_attr->child_cnt * (sizeof(lv_obj_t *)));
 800b8dc:	6861      	ldr	r1, [r4, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800b8de:	0089      	lsls	r1, r1, #2
 800b8e0:	6820      	ldr	r0, [r4, #0]
 800b8e2:	f015 fffb 	bl	80218dc <lv_mem_realloc>
 800b8e6:	6020      	str	r0, [r4, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	f7ff fed8 	bl	800b69e <lv_obj_get_child_cnt>
 800b8ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8f2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800b8f6:	3801      	subs	r0, #1
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
    obj->parent = parent;
 800b8fe:	f8c7 8004 	str.w	r8, [r7, #4]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 800b902:	2100      	movs	r1, #0
 800b904:	4630      	mov	r0, r6
 800b906:	f7fe fdd8 	bl	800a4ba <lv_obj_readjust_scroll>
    lv_obj_scrollbar_invalidate(old_parent);
 800b90a:	4630      	mov	r0, r6
 800b90c:	f7fe fdb2 	bl	800a474 <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 800b910:	463a      	mov	r2, r7
 800b912:	2122      	movs	r1, #34	; 0x22
 800b914:	4630      	mov	r0, r6
 800b916:	f7f8 f9f3 	bl	8003d00 <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 800b91a:	2200      	movs	r2, #0
 800b91c:	2124      	movs	r1, #36	; 0x24
 800b91e:	4630      	mov	r0, r6
 800b920:	f7f8 f9ee 	bl	8003d00 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800b924:	463a      	mov	r2, r7
 800b926:	2122      	movs	r1, #34	; 0x22
 800b928:	4640      	mov	r0, r8
 800b92a:	f7f8 f9e9 	bl	8003d00 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 800b92e:	2200      	movs	r2, #0
 800b930:	2123      	movs	r1, #35	; 0x23
 800b932:	4640      	mov	r0, r8
 800b934:	f7f8 f9e4 	bl	8003d00 <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 800b938:	4638      	mov	r0, r7
 800b93a:	f7fc f829 	bl	8007990 <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 800b93e:	4638      	mov	r0, r7
 800b940:	f7fc fb1a 	bl	8007f78 <lv_obj_invalidate>
}
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_mem_free(old_parent->spec_attr->children);
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	f015 ffab 	bl	80218a4 <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 800b94e:	68b3      	ldr	r3, [r6, #8]
 800b950:	2200      	movs	r2, #0
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	e7bb      	b.n	800b8ce <lv_obj_set_parent+0x60>
 800b956:	4770      	bx	lr

0800b958 <lv_obj_move_to_index>:
{
 800b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95a:	4606      	mov	r6, r0
    if(index < 0) {
 800b95c:	1e0d      	subs	r5, r1, #0
 800b95e:	db1b      	blt.n	800b998 <lv_obj_move_to_index+0x40>
    const int32_t old_index = lv_obj_get_index(obj);
 800b960:	f7ff fea3 	bl	800b6aa <lv_obj_get_index>
 800b964:	4604      	mov	r4, r0
    if(obj == NULL) return NULL;
 800b966:	b30e      	cbz	r6, 800b9ac <lv_obj_move_to_index+0x54>
    return obj->parent;
 800b968:	6877      	ldr	r7, [r6, #4]
    if(index < 0) return;
 800b96a:	2d00      	cmp	r5, #0
 800b96c:	db39      	blt.n	800b9e2 <lv_obj_move_to_index+0x8a>
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 800b96e:	4638      	mov	r0, r7
 800b970:	f7ff fe95 	bl	800b69e <lv_obj_get_child_cnt>
 800b974:	42a8      	cmp	r0, r5
 800b976:	dd34      	ble.n	800b9e2 <lv_obj_move_to_index+0x8a>
    if(index == old_index) return;
 800b978:	42a5      	cmp	r5, r4
 800b97a:	d032      	beq.n	800b9e2 <lv_obj_move_to_index+0x8a>
    if(index < old_index) {
 800b97c:	db18      	blt.n	800b9b0 <lv_obj_move_to_index+0x58>
        while(i < index) {
 800b97e:	dd24      	ble.n	800b9ca <lv_obj_move_to_index+0x72>
 800b980:	1c63      	adds	r3, r4, #1
 800b982:	009b      	lsls	r3, r3, #2
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	6812      	ldr	r2, [r2, #0]
 800b988:	58d1      	ldr	r1, [r2, r3]
 800b98a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
            i++;
 800b98e:	3401      	adds	r4, #1
        while(i < index) {
 800b990:	3304      	adds	r3, #4
 800b992:	42ac      	cmp	r4, r5
 800b994:	d1f6      	bne.n	800b984 <lv_obj_move_to_index+0x2c>
 800b996:	e018      	b.n	800b9ca <lv_obj_move_to_index+0x72>
    if(obj == NULL) return NULL;
 800b998:	b320      	cbz	r0, 800b9e4 <lv_obj_move_to_index+0x8c>
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800b99a:	6840      	ldr	r0, [r0, #4]
 800b99c:	f7ff fe7f 	bl	800b69e <lv_obj_get_child_cnt>
 800b9a0:	4405      	add	r5, r0
    const int32_t old_index = lv_obj_get_index(obj);
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff fe81 	bl	800b6aa <lv_obj_get_index>
 800b9a8:	4604      	mov	r4, r0
    if(obj == NULL) return NULL;
 800b9aa:	e7dd      	b.n	800b968 <lv_obj_move_to_index+0x10>
 800b9ac:	4637      	mov	r7, r6
 800b9ae:	e7de      	b.n	800b96e <lv_obj_move_to_index+0x16>
 800b9b0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	009b      	lsls	r3, r3, #2
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 800b9b8:	68ba      	ldr	r2, [r7, #8]
 800b9ba:	6812      	ldr	r2, [r2, #0]
 800b9bc:	58d1      	ldr	r1, [r2, r3]
 800b9be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
            i--;
 800b9c2:	3c01      	subs	r4, #1
        while(i > index)  {
 800b9c4:	3b04      	subs	r3, #4
 800b9c6:	42ac      	cmp	r4, r5
 800b9c8:	d1f6      	bne.n	800b9b8 <lv_obj_move_to_index+0x60>
    parent->spec_attr->children[index] = obj;
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2122      	movs	r1, #34	; 0x22
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	f7f8 f992 	bl	8003d00 <lv_event_send>
    lv_obj_invalidate(parent);
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f7fc facb 	bl	8007f78 <lv_obj_invalidate>
}
 800b9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f7ff fe5a 	bl	800b69e <lv_obj_get_child_cnt>
 800b9ea:	4405      	add	r5, r0
    const int32_t old_index = lv_obj_get_index(obj);
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	f7ff fe5c 	bl	800b6aa <lv_obj_get_index>
 800b9f2:	4604      	mov	r4, r0
    if(obj == NULL) return NULL;
 800b9f4:	4637      	mov	r7, r6
 800b9f6:	e7b8      	b.n	800b96a <lv_obj_move_to_index+0x12>

0800b9f8 <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	b082      	sub	sp, #8
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800b9fc:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 800ba00:	880c      	ldrh	r4, [r1, #0]
 800ba02:	4474      	add	r4, lr
    lv_area_t offset_area = {
 800ba04:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 800ba08:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800ba0c:	884c      	ldrh	r4, [r1, #2]
 800ba0e:	4464      	add	r4, ip
    lv_area_t offset_area = {
 800ba10:	f8ad 4002 	strh.w	r4, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 800ba14:	888c      	ldrh	r4, [r1, #4]
 800ba16:	44a6      	add	lr, r4
    lv_area_t offset_area = {
 800ba18:	f8ad e004 	strh.w	lr, [sp, #4]
        .y2 = area->y2 + drv->offset_y
 800ba1c:	88c9      	ldrh	r1, [r1, #6]
 800ba1e:	448c      	add	ip, r1
    lv_area_t offset_area = {
 800ba20:	f8ad c006 	strh.w	ip, [sp, #6]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800ba24:	6943      	ldr	r3, [r0, #20]
 800ba26:	4669      	mov	r1, sp
 800ba28:	4798      	blx	r3
}
 800ba2a:	b002      	add	sp, #8
 800ba2c:	bd10      	pop	{r4, pc}

0800ba2e <lv_refr_get_top_obj>:
{
 800ba2e:	b570      	push	{r4, r5, r6, lr}
 800ba30:	b082      	sub	sp, #8
 800ba32:	4606      	mov	r6, r0
 800ba34:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800ba36:	2200      	movs	r2, #0
 800ba38:	3114      	adds	r1, #20
 800ba3a:	f015 f92a 	bl	8020c92 <_lv_area_is_in>
 800ba3e:	b370      	cbz	r0, 800ba9e <lv_refr_get_top_obj+0x70>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800ba40:	2101      	movs	r1, #1
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7fa ffc4 	bl	80069d0 <lv_obj_has_flag>
 800ba48:	bb68      	cbnz	r0, 800baa6 <lv_refr_get_top_obj+0x78>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f7fb fe82 	bl	8007754 <_lv_obj_get_layer_type>
 800ba50:	bb58      	cbnz	r0, 800baaa <lv_refr_get_top_obj+0x7c>
    info.res = LV_COVER_RES_COVER;
 800ba52:	2300      	movs	r3, #0
 800ba54:	f88d 3000 	strb.w	r3, [sp]
    info.area = area_p;
 800ba58:	9601      	str	r6, [sp, #4]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800ba5a:	466a      	mov	r2, sp
 800ba5c:	2112      	movs	r1, #18
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f7f8 f94e 	bl	8003d00 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800ba64:	f89d 3000 	ldrb.w	r3, [sp]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d020      	beq.n	800baae <lv_refr_get_top_obj+0x80>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7ff fe16 	bl	800b69e <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 800ba72:	1e45      	subs	r5, r0, #1
 800ba74:	d40c      	bmi.n	800ba90 <lv_refr_get_top_obj+0x62>
        lv_obj_t * child = obj->spec_attr->children[i];
 800ba76:	68a3      	ldr	r3, [r4, #8]
 800ba78:	681b      	ldr	r3, [r3, #0]
        found_p = lv_refr_get_top_obj(area_p, child);
 800ba7a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7ff ffd5 	bl	800ba2e <lv_refr_get_top_obj>
        if(found_p != NULL) {
 800ba84:	4603      	mov	r3, r0
 800ba86:	b958      	cbnz	r0, 800baa0 <lv_refr_get_top_obj+0x72>
    for(i = child_cnt - 1; i >= 0; i--) {
 800ba88:	3d01      	subs	r5, #1
 800ba8a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800ba8e:	d1f2      	bne.n	800ba76 <lv_refr_get_top_obj+0x48>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800ba90:	f89d 3000 	ldrb.w	r3, [sp]
        found_p = obj;
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	bf0c      	ite	eq
 800ba98:	4623      	moveq	r3, r4
 800ba9a:	2300      	movne	r3, #0
 800ba9c:	e000      	b.n	800baa0 <lv_refr_get_top_obj+0x72>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	b002      	add	sp, #8
 800baa4:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	e7fa      	b.n	800baa0 <lv_refr_get_top_obj+0x72>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	e7f8      	b.n	800baa0 <lv_refr_get_top_obj+0x72>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	e7f6      	b.n	800baa0 <lv_refr_get_top_obj+0x72>
	...

0800bab4 <_lv_refr_init>:

#if LV_USE_PERF_MONITOR
static void perf_monitor_init(perf_monitor_t * _perf_monitor)
{
    LV_ASSERT_NULL(_perf_monitor);
    _perf_monitor->elaps_sum = 0;
 800bab4:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <_lv_refr_init+0x14>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	605a      	str	r2, [r3, #4]
    _perf_monitor->fps_sum_all = 0;
 800baba:	611a      	str	r2, [r3, #16]
    _perf_monitor->fps_sum_cnt = 0;
 800babc:	60da      	str	r2, [r3, #12]
    _perf_monitor->frame_cnt = 0;
 800babe:	609a      	str	r2, [r3, #8]
    _perf_monitor->perf_last_time = 0;
 800bac0:	601a      	str	r2, [r3, #0]
    _perf_monitor->perf_label = NULL;
 800bac2:	615a      	str	r2, [r3, #20]
}
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	2000254c 	.word	0x2000254c

0800bacc <lv_obj_redraw>:
{
 800bacc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bad0:	b087      	sub	sp, #28
 800bad2:	4606      	mov	r6, r0
 800bad4:	460d      	mov	r5, r1
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800bad6:	f8d0 8008 	ldr.w	r8, [r0, #8]
    lv_obj_get_coords(obj, &obj_coords_ext);
 800bada:	a902      	add	r1, sp, #8
 800badc:	4628      	mov	r0, r5
 800bade:	f7fb ffa6 	bl	8007a2e <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800bae2:	4628      	mov	r0, r5
 800bae4:	f7fb fdfd 	bl	80076e2 <_lv_obj_get_ext_draw_size>
 800bae8:	4601      	mov	r1, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800baea:	4602      	mov	r2, r0
 800baec:	a802      	add	r0, sp, #8
 800baee:	f014 ff88 	bl	8020a02 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800baf2:	aa02      	add	r2, sp, #8
 800baf4:	4641      	mov	r1, r8
 800baf6:	a804      	add	r0, sp, #16
 800baf8:	f014 ffa1 	bl	8020a3e <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800bafc:	b198      	cbz	r0, 800bb26 <lv_obj_redraw+0x5a>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800bafe:	ab04      	add	r3, sp, #16
 800bb00:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800bb02:	4632      	mov	r2, r6
 800bb04:	2114      	movs	r1, #20
 800bb06:	4628      	mov	r0, r5
 800bb08:	f7f8 f8fa 	bl	8003d00 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	2115      	movs	r1, #21
 800bb10:	4628      	mov	r0, r5
 800bb12:	f7f8 f8f5 	bl	8003d00 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800bb16:	4632      	mov	r2, r6
 800bb18:	2116      	movs	r1, #22
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f7f8 f8f0 	bl	8003d00 <lv_event_send>
 800bb20:	f04f 0901 	mov.w	r9, #1
 800bb24:	e007      	b.n	800bb36 <lv_obj_redraw+0x6a>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800bb26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f7fa ff50 	bl	80069d0 <lv_obj_has_flag>
    if(should_draw) {
 800bb30:	4681      	mov	r9, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d1e3      	bne.n	800bafe <lv_obj_redraw+0x32>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800bb36:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	f7fa ff48 	bl	80069d0 <lv_obj_has_flag>
 800bb40:	b1f8      	cbz	r0, 800bb82 <lv_obj_redraw+0xb6>
        clip_coords_for_children  = *clip_area_ori;
 800bb42:	466b      	mov	r3, sp
 800bb44:	f8d8 0000 	ldr.w	r0, [r8]
 800bb48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb4c:	c303      	stmia	r3!, {r0, r1}
        draw_ctx->clip_area = &clip_coords_for_children;
 800bb4e:	f8c6 d008 	str.w	sp, [r6, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800bb52:	4628      	mov	r0, r5
 800bb54:	f7ff fda3 	bl	800b69e <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 800bb58:	4607      	mov	r7, r0
 800bb5a:	b150      	cbz	r0, 800bb72 <lv_obj_redraw+0xa6>
 800bb5c:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 800bb5e:	68ab      	ldr	r3, [r5, #8]
 800bb60:	681b      	ldr	r3, [r3, #0]
            refr_obj(draw_ctx, child);
 800bb62:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800bb66:	4630      	mov	r0, r6
 800bb68:	f000 f826 	bl	800bbb8 <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800bb6c:	3401      	adds	r4, #1
 800bb6e:	42a7      	cmp	r7, r4
 800bb70:	d1f5      	bne.n	800bb5e <lv_obj_redraw+0x92>
    if(should_draw) {
 800bb72:	f1b9 0f00 	cmp.w	r9, #0
 800bb76:	d10d      	bne.n	800bb94 <lv_obj_redraw+0xc8>
    draw_ctx->clip_area = clip_area_ori;
 800bb78:	f8c6 8008 	str.w	r8, [r6, #8]
}
 800bb7c:	b007      	add	sp, #28
 800bb7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800bb82:	f105 0214 	add.w	r2, r5, #20
 800bb86:	4641      	mov	r1, r8
 800bb88:	4668      	mov	r0, sp
 800bb8a:	f014 ff58 	bl	8020a3e <_lv_area_intersect>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d0ef      	beq.n	800bb72 <lv_obj_redraw+0xa6>
 800bb92:	e7dc      	b.n	800bb4e <lv_obj_redraw+0x82>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800bb94:	ab04      	add	r3, sp, #16
 800bb96:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800bb98:	4632      	mov	r2, r6
 800bb9a:	2117      	movs	r1, #23
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f7f8 f8af 	bl	8003d00 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800bba2:	4632      	mov	r2, r6
 800bba4:	2118      	movs	r1, #24
 800bba6:	4628      	mov	r0, r5
 800bba8:	f7f8 f8aa 	bl	8003d00 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800bbac:	4632      	mov	r2, r6
 800bbae:	2119      	movs	r1, #25
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f7f8 f8a5 	bl	8003d00 <lv_event_send>
 800bbb6:	e7df      	b.n	800bb78 <lv_obj_redraw+0xac>

0800bbb8 <refr_obj>:
{
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	b091      	sub	sp, #68	; 0x44
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	460c      	mov	r4, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7fa ff03 	bl	80069d0 <lv_obj_has_flag>
 800bbca:	9000      	str	r0, [sp, #0]
 800bbcc:	b110      	cbz	r0, 800bbd4 <refr_obj+0x1c>
}
 800bbce:	b011      	add	sp, #68	; 0x44
 800bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f7fb fdbd 	bl	8007754 <_lv_obj_get_layer_type>
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800bbda:	4606      	mov	r6, r0
 800bbdc:	b920      	cbnz	r0, 800bbe8 <refr_obj+0x30>
        lv_obj_redraw(draw_ctx, obj);
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f7ff ff73 	bl	800bacc <lv_obj_redraw>
 800bbe6:	e7f2      	b.n	800bbce <refr_obj+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800bbe8:	2260      	movs	r2, #96	; 0x60
 800bbea:	2100      	movs	r1, #0
 800bbec:	4620      	mov	r0, r4
 800bbee:	f7fe fdfb 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800bbf2:	b2c7      	uxtb	r7, r0
        if(opa < LV_OPA_MIN) return;
 800bbf4:	2f01      	cmp	r7, #1
 800bbf6:	d9ea      	bls.n	800bbce <refr_obj+0x16>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7fb fd72 	bl	80076e2 <_lv_obj_get_ext_draw_size>
 800bbfe:	4680      	mov	r8, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 800bc00:	a904      	add	r1, sp, #16
 800bc02:	4620      	mov	r0, r4
 800bc04:	f7fb ff13 	bl	8007a2e <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800bc08:	4642      	mov	r2, r8
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	a804      	add	r0, sp, #16
 800bc0e:	f014 fef8 	bl	8020a02 <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800bc12:	2e02      	cmp	r6, #2
 800bc14:	d01d      	beq.n	800bc52 <refr_obj+0x9a>
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800bc16:	2e01      	cmp	r6, #1
 800bc18:	d1d9      	bne.n	800bbce <refr_obj+0x16>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800bc1a:	aa04      	add	r2, sp, #16
 800bc1c:	68a9      	ldr	r1, [r5, #8]
 800bc1e:	a80a      	add	r0, sp, #40	; 0x28
 800bc20:	f014 ff0d 	bl	8020a3e <_lv_area_intersect>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d0d2      	beq.n	800bbce <refr_obj+0x16>
        *layer_area_out = clip_coords_for_obj;
 800bc28:	ab02      	add	r3, sp, #8
 800bc2a:	aa0a      	add	r2, sp, #40	; 0x28
 800bc2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc30:	e883 0003 	stmia.w	r3, {r0, r1}
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800bc34:	f104 0214 	add.w	r2, r4, #20
 800bc38:	4611      	mov	r1, r2
 800bc3a:	9201      	str	r2, [sp, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f015 f827 	bl	8020c92 <_lv_area_is_in>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d13d      	bne.n	800bcc4 <refr_obj+0x10c>
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800bc48:	f046 0a02 	orr.w	sl, r6, #2
 800bc4c:	fa5f fa8a 	uxtb.w	sl, sl
 800bc50:	e04b      	b.n	800bcea <refr_obj+0x132>
        lv_area_t tranf_coords = obj_coords_ext;
 800bc52:	f10d 0820 	add.w	r8, sp, #32
 800bc56:	ab04      	add	r3, sp, #16
 800bc58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc5c:	e888 0003 	stmia.w	r8, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800bc60:	2300      	movs	r3, #0
 800bc62:	461a      	mov	r2, r3
 800bc64:	4641      	mov	r1, r8
 800bc66:	4620      	mov	r0, r4
 800bc68:	f7fc f863 	bl	8007d32 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800bc6c:	4642      	mov	r2, r8
 800bc6e:	68a9      	ldr	r1, [r5, #8]
 800bc70:	a806      	add	r0, sp, #24
 800bc72:	f014 fee4 	bl	8020a3e <_lv_area_intersect>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d0a9      	beq.n	800bbce <refr_obj+0x16>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800bc7a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800bc7e:	ab06      	add	r3, sp, #24
 800bc80:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc84:	e888 0003 	stmia.w	r8, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800bc88:	2301      	movs	r3, #1
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	4641      	mov	r1, r8
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f7fc f84f 	bl	8007d32 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800bc94:	aa04      	add	r2, sp, #16
 800bc96:	4641      	mov	r1, r8
 800bc98:	4640      	mov	r0, r8
 800bc9a:	f014 fed0 	bl	8020a3e <_lv_area_intersect>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d095      	beq.n	800bbce <refr_obj+0x16>
        *layer_area_out = inverse_clip_coords_for_obj;
 800bca2:	ab02      	add	r3, sp, #8
 800bca4:	e9d8 0100 	ldrd	r0, r1, [r8]
 800bca8:	e883 0003 	stmia.w	r3, {r0, r1}
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800bcac:	f104 0214 	add.w	r2, r4, #20
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	9201      	str	r2, [sp, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f014 ffeb 	bl	8020c92 <_lv_area_is_in>
 800bcbc:	b910      	cbnz	r0, 800bcc4 <refr_obj+0x10c>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800bcbe:	f04f 0a01 	mov.w	sl, #1
 800bcc2:	e012      	b.n	800bcea <refr_obj+0x132>
            info.res = LV_COVER_RES_COVER;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            info.area = &layer_area_full;
 800bcca:	ab02      	add	r3, sp, #8
 800bccc:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800bcce:	aa0a      	add	r2, sp, #40	; 0x28
 800bcd0:	2112      	movs	r1, #18
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f7f8 f814 	bl	8003d00 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800bcd8:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800bcdc:	f1ba 0a00 	subs.w	sl, sl, #0
 800bce0:	bf18      	it	ne
 800bce2:	f04f 0a01 	movne.w	sl, #1
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800bce6:	2e01      	cmp	r6, #1
 800bce8:	d06f      	beq.n	800bdca <refr_obj+0x212>
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800bcea:	4652      	mov	r2, sl
 800bcec:	a902      	add	r1, sp, #8
 800bcee:	4628      	mov	r0, r5
 800bcf0:	f001 ff90 	bl	800dc14 <lv_draw_layer_create>
        if(layer_ctx == NULL) {
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	f43f af69 	beq.w	800bbce <refr_obj+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800bcfc:	226e      	movs	r2, #110	; 0x6e
 800bcfe:	2100      	movs	r1, #0
 800bd00:	4620      	mov	r0, r4
 800bd02:	f7fe fd71 	bl	800a7e8 <lv_obj_get_style_prop>
 800bd06:	4683      	mov	fp, r0
    return (lv_coord_t)v.num;
 800bd08:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800bd0c:	226f      	movs	r2, #111	; 0x6f
 800bd0e:	2100      	movs	r1, #0
 800bd10:	4620      	mov	r0, r4
 800bd12:	f7fe fd69 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800bd16:	fa0f f880 	sxth.w	r8, r0
        if(LV_COORD_IS_PCT(pivot.x)) {
 800bd1a:	f40b 4bc0 	and.w	fp, fp, #24576	; 0x6000
 800bd1e:	f5bb 5f00 	cmp.w	fp, #8192	; 0x2000
 800bd22:	d054      	beq.n	800bdce <refr_obj+0x216>
        if(LV_COORD_IS_PCT(pivot.y)) {
 800bd24:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 800bd28:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800bd2c:	d06b      	beq.n	800be06 <refr_obj+0x24e>
        lv_draw_img_dsc_init(&draw_dsc);
 800bd2e:	a80a      	add	r0, sp, #40	; 0x28
 800bd30:	f001 fa95 	bl	800d25e <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800bd34:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800bd38:	226d      	movs	r2, #109	; 0x6d
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f7fe fd53 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800bd42:	b203      	sxth	r3, r0
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800bd44:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800bd48:	dd79      	ble.n	800be3e <refr_obj+0x286>
 800bd4a:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
 800bd4e:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800bd52:	226c      	movs	r2, #108	; 0x6c
 800bd54:	2100      	movs	r1, #0
 800bd56:	4620      	mov	r0, r4
 800bd58:	f7fe fd46 	bl	800a7e8 <lv_obj_get_style_prop>
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800bd5c:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800bd60:	2267      	movs	r2, #103	; 0x67
 800bd62:	2100      	movs	r1, #0
 800bd64:	4620      	mov	r0, r4
 800bd66:	f7fe fd3f 	bl	800a7e8 <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800bd6a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800bd6e:	f360 0303 	bfi	r3, r0, #0, #4
 800bd72:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800bd76:	4b63      	ldr	r3, [pc, #396]	; (800bf04 <refr_obj+0x34c>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	7c1b      	ldrb	r3, [r3, #16]
 800bd7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bd82:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800bd86:	f363 0200 	bfi	r2, r3, #0, #1
 800bd8a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800bd8e:	f01a 0702 	ands.w	r7, sl, #2
 800bd92:	d010      	beq.n	800bdb6 <refr_obj+0x1fe>
            layer_ctx->area_act = layer_ctx->area_full;
 800bd94:	f106 0308 	add.w	r3, r6, #8
 800bd98:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bd9c:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800bda0:	8973      	ldrh	r3, [r6, #10]
 800bda2:	8a72      	ldrh	r2, [r6, #18]
 800bda4:	4413      	add	r3, r2
 800bda6:	3b01      	subs	r3, #1
 800bda8:	b21b      	sxth	r3, r3
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800bdaa:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	bfa8      	it	ge
 800bdb2:	4613      	movge	r3, r2
 800bdb4:	81f3      	strh	r3, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800bdb6:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800bdba:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	f300 809a 	bgt.w	800bef8 <refr_obj+0x340>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800bdc4:	f00a 0a01 	and.w	sl, sl, #1
 800bdc8:	e07f      	b.n	800beca <refr_obj+0x312>
 800bdca:	4656      	mov	r6, sl
 800bdcc:	e73c      	b.n	800bc48 <refr_obj+0x90>
        if(LV_COORD_IS_PCT(pivot.x)) {
 800bdce:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 800bdd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800bdd6:	dca5      	bgt.n	800bd24 <refr_obj+0x16c>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800bdd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bddc:	bfcc      	ite	gt
 800bdde:	f5c3 727a 	rsbgt	r2, r3, #1000	; 0x3e8
 800bde2:	461a      	movle	r2, r3
 800bde4:	8b23      	ldrh	r3, [r4, #24]
 800bde6:	3301      	adds	r3, #1
 800bde8:	8aa1      	ldrh	r1, [r4, #20]
 800bdea:	1a5b      	subs	r3, r3, r1
 800bdec:	b21b      	sxth	r3, r3
 800bdee:	fb02 f303 	mul.w	r3, r2, r3
 800bdf2:	4a45      	ldr	r2, [pc, #276]	; (800bf08 <refr_obj+0x350>)
 800bdf4:	fb82 1203 	smull	r1, r2, r2, r3
 800bdf8:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800bdfc:	ebc9 1962 	rsb	r9, r9, r2, asr #5
 800be00:	fa0f f989 	sxth.w	r9, r9
 800be04:	e78e      	b.n	800bd24 <refr_obj+0x16c>
        if(LV_COORD_IS_PCT(pivot.y)) {
 800be06:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 800be0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800be0e:	dc8e      	bgt.n	800bd2e <refr_obj+0x176>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800be10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be14:	bfcc      	ite	gt
 800be16:	f5c3 727a 	rsbgt	r2, r3, #1000	; 0x3e8
 800be1a:	461a      	movle	r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800be1c:	8b63      	ldrh	r3, [r4, #26]
 800be1e:	3301      	adds	r3, #1
 800be20:	8ae1      	ldrh	r1, [r4, #22]
 800be22:	1a5b      	subs	r3, r3, r1
 800be24:	b21b      	sxth	r3, r3
 800be26:	fb02 f303 	mul.w	r3, r2, r3
 800be2a:	4a37      	ldr	r2, [pc, #220]	; (800bf08 <refr_obj+0x350>)
 800be2c:	fb82 1203 	smull	r1, r2, r2, r3
 800be30:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800be34:	ebc8 1862 	rsb	r8, r8, r2, asr #5
 800be38:	fa0f f888 	sxth.w	r8, r8
 800be3c:	e777      	b.n	800bd2e <refr_obj+0x176>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800be3e:	2b00      	cmp	r3, #0
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800be40:	bfae      	itee	ge
 800be42:	f8ad 3028 	strhge.w	r3, [sp, #40]	; 0x28
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800be46:	f500 6061 	addlt.w	r0, r0, #3600	; 0xe10
 800be4a:	f8ad 0028 	strhlt.w	r0, [sp, #40]	; 0x28
 800be4e:	e780      	b.n	800bd52 <refr_obj+0x19a>
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800be50:	f106 0b08 	add.w	fp, r6, #8
 800be54:	2200      	movs	r2, #0
 800be56:	9901      	ldr	r1, [sp, #4]
 800be58:	4658      	mov	r0, fp
 800be5a:	f014 ff1a 	bl	8020c92 <_lv_area_is_in>
 800be5e:	2800      	cmp	r0, #0
 800be60:	d13a      	bne.n	800bed8 <refr_obj+0x320>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800be62:	8973      	ldrh	r3, [r6, #10]
 800be64:	8a32      	ldrh	r2, [r6, #16]
 800be66:	4413      	add	r3, r2
 800be68:	3b01      	subs	r3, #1
 800be6a:	81f3      	strh	r3, [r6, #14]
 800be6c:	2201      	movs	r2, #1
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800be6e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800be72:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
 800be76:	4299      	cmp	r1, r3
 800be78:	bfc8      	it	gt
 800be7a:	81f3      	strhgt	r3, [r6, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800be7c:	4631      	mov	r1, r6
 800be7e:	4628      	mov	r0, r5
 800be80:	f001 fef8 	bl	800dc74 <lv_draw_layer_adjust>
            lv_obj_redraw(draw_ctx, obj);
 800be84:	4621      	mov	r1, r4
 800be86:	4628      	mov	r0, r5
 800be88:	f7ff fe20 	bl	800bacc <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800be8c:	686a      	ldr	r2, [r5, #4]
 800be8e:	8aa3      	ldrh	r3, [r4, #20]
 800be90:	8811      	ldrh	r1, [r2, #0]
 800be92:	1a5b      	subs	r3, r3, r1
 800be94:	444b      	add	r3, r9
 800be96:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800be9a:	8ae3      	ldrh	r3, [r4, #22]
 800be9c:	8852      	ldrh	r2, [r2, #2]
 800be9e:	1a9b      	subs	r3, r3, r2
 800bea0:	4443      	add	r3, r8
 800bea2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800bea6:	aa0a      	add	r2, sp, #40	; 0x28
 800bea8:	4631      	mov	r1, r6
 800beaa:	4628      	mov	r0, r5
 800beac:	f001 fee7 	bl	800dc7e <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800beb0:	b317      	cbz	r7, 800bef8 <refr_obj+0x340>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800beb2:	89f3      	ldrh	r3, [r6, #14]
 800beb4:	3301      	adds	r3, #1
 800beb6:	b219      	sxth	r1, r3
 800beb8:	8171      	strh	r1, [r6, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800beba:	8a72      	ldrh	r2, [r6, #18]
 800bebc:	3a01      	subs	r2, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	81f3      	strh	r3, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800bec2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800bec6:	428b      	cmp	r3, r1
 800bec8:	db16      	blt.n	800bef8 <refr_obj+0x340>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800beca:	2f00      	cmp	r7, #0
 800becc:	d0da      	beq.n	800be84 <refr_obj+0x2cc>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800bece:	f1ba 0f00 	cmp.w	sl, #0
 800bed2:	d1bd      	bne.n	800be50 <refr_obj+0x298>
        has_alpha = false;
 800bed4:	9a00      	ldr	r2, [sp, #0]
 800bed6:	e7ca      	b.n	800be6e <refr_obj+0x2b6>
            info.res = LV_COVER_RES_COVER;
 800bed8:	2300      	movs	r3, #0
 800beda:	f88d 3020 	strb.w	r3, [sp, #32]
            info.area = &layer_ctx->area_act;
 800bede:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800bee2:	aa08      	add	r2, sp, #32
 800bee4:	2112      	movs	r1, #18
 800bee6:	4620      	mov	r0, r4
 800bee8:	f7f7 ff0a 	bl	8003d00 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800beec:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1b6      	bne.n	800be62 <refr_obj+0x2aa>
 800bef4:	9a00      	ldr	r2, [sp, #0]
 800bef6:	e7ba      	b.n	800be6e <refr_obj+0x2b6>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800bef8:	4631      	mov	r1, r6
 800befa:	4628      	mov	r0, r5
 800befc:	f001 fec4 	bl	800dc88 <lv_draw_layer_destroy>
 800bf00:	e665      	b.n	800bbce <refr_obj+0x16>
 800bf02:	bf00      	nop
 800bf04:	20002548 	.word	0x20002548
 800bf08:	51eb851f 	.word	0x51eb851f

0800bf0c <refr_obj_and_children>:
{
 800bf0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf10:	4681      	mov	r9, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800bf12:	4688      	mov	r8, r1
 800bf14:	b169      	cbz	r1, 800bf32 <refr_obj_and_children+0x26>
    refr_obj(draw_ctx, top_obj);
 800bf16:	4641      	mov	r1, r8
 800bf18:	4648      	mov	r0, r9
 800bf1a:	f7ff fe4d 	bl	800bbb8 <refr_obj>
    parent = lv_obj_get_parent(top_obj);
 800bf1e:	4640      	mov	r0, r8
 800bf20:	f7ff fba4 	bl	800b66c <lv_obj_get_parent>
    while(parent != NULL) {
 800bf24:	4605      	mov	r5, r0
 800bf26:	b158      	cbz	r0, 800bf40 <refr_obj_and_children+0x34>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800bf28:	f04f 0b17 	mov.w	fp, #23
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800bf2c:	f04f 0a18 	mov.w	sl, #24
 800bf30:	e02f      	b.n	800bf92 <refr_obj_and_children+0x86>
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800bf32:	4b1c      	ldr	r3, [pc, #112]	; (800bfa4 <refr_obj_and_children+0x98>)
 800bf34:	6818      	ldr	r0, [r3, #0]
 800bf36:	f7f7 fd91 	bl	8003a5c <lv_disp_get_scr_act>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d1ea      	bne.n	800bf16 <refr_obj_and_children+0xa>
}
 800bf40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(child == border_p) go = true;
 800bf44:	4541      	cmp	r1, r8
 800bf46:	bf14      	ite	ne
 800bf48:	2600      	movne	r6, #0
 800bf4a:	2601      	moveq	r6, #1
        for(i = 0; i < child_cnt; i++) {
 800bf4c:	3401      	adds	r4, #1
 800bf4e:	42a7      	cmp	r7, r4
 800bf50:	d009      	beq.n	800bf66 <refr_obj_and_children+0x5a>
            lv_obj_t * child = parent->spec_attr->children[i];
 800bf52:	68ab      	ldr	r3, [r5, #8]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            if(!go) {
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	d0f2      	beq.n	800bf44 <refr_obj_and_children+0x38>
                refr_obj(draw_ctx, child);
 800bf5e:	4648      	mov	r0, r9
 800bf60:	f7ff fe2a 	bl	800bbb8 <refr_obj>
 800bf64:	e7f2      	b.n	800bf4c <refr_obj_and_children+0x40>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800bf66:	464a      	mov	r2, r9
 800bf68:	4659      	mov	r1, fp
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f7f7 fec8 	bl	8003d00 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800bf70:	464a      	mov	r2, r9
 800bf72:	4651      	mov	r1, sl
 800bf74:	4628      	mov	r0, r5
 800bf76:	f7f7 fec3 	bl	8003d00 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800bf7a:	464a      	mov	r2, r9
 800bf7c:	2119      	movs	r1, #25
 800bf7e:	4628      	mov	r0, r5
 800bf80:	f7f7 febe 	bl	8003d00 <lv_event_send>
        parent = lv_obj_get_parent(parent);
 800bf84:	4628      	mov	r0, r5
 800bf86:	f7ff fb71 	bl	800b66c <lv_obj_get_parent>
    while(parent != NULL) {
 800bf8a:	46a8      	mov	r8, r5
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d0d6      	beq.n	800bf40 <refr_obj_and_children+0x34>
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800bf92:	4628      	mov	r0, r5
 800bf94:	f7ff fb83 	bl	800b69e <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 800bf98:	4607      	mov	r7, r0
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d0e3      	beq.n	800bf66 <refr_obj_and_children+0x5a>
 800bf9e:	2400      	movs	r4, #0
        bool go = false;
 800bfa0:	4626      	mov	r6, r4
 800bfa2:	e7d6      	b.n	800bf52 <refr_obj_and_children+0x46>
 800bfa4:	20002548 	.word	0x20002548

0800bfa8 <refr_area_part>:
{
 800bfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfac:	b0ad      	sub	sp, #180	; 0xb4
 800bfae:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800bfb0:	4b93      	ldr	r3, [pc, #588]	; (800c200 <refr_area_part+0x258>)
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	f014 fa4c 	bl	8020450 <lv_disp_get_draw_buf>
 800bfb8:	4604      	mov	r4, r0
    if(draw_ctx->init_buf)
 800bfba:	68eb      	ldr	r3, [r5, #12]
 800bfbc:	b10b      	cbz	r3, 800bfc2 <refr_area_part+0x1a>
        draw_ctx->init_buf(draw_ctx);
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	4798      	blx	r3
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	b173      	cbz	r3, 800bfe4 <refr_area_part+0x3c>
 800bfc6:	6863      	ldr	r3, [r4, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d072      	beq.n	800c0b2 <refr_area_part+0x10a>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800bfcc:	4b8c      	ldr	r3, [pc, #560]	; (800c200 <refr_area_part+0x258>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bfd6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800bfda:	fb02 f303 	mul.w	r3, r2, r3
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800bfde:	68e2      	ldr	r2, [r4, #12]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d066      	beq.n	800c0b2 <refr_area_part+0x10a>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800bfe4:	686e      	ldr	r6, [r5, #4]
 800bfe6:	4c86      	ldr	r4, [pc, #536]	; (800c200 <refr_area_part+0x258>)
 800bfe8:	6820      	ldr	r0, [r4, #0]
 800bfea:	f7f7 fd37 	bl	8003a5c <lv_disp_get_scr_act>
 800bfee:	4601      	mov	r1, r0
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff fd1c 	bl	800ba2e <lv_refr_get_top_obj>
 800bff6:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	695c      	ldr	r4, [r3, #20]
 800bffc:	2c00      	cmp	r4, #0
 800bffe:	f000 82da 	beq.w	800c5b6 <refr_area_part+0x60e>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800c002:	4621      	mov	r1, r4
 800c004:	6868      	ldr	r0, [r5, #4]
 800c006:	f7ff fd12 	bl	800ba2e <lv_refr_get_top_obj>
 800c00a:	4604      	mov	r4, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800c00c:	2e00      	cmp	r6, #0
 800c00e:	d05b      	beq.n	800c0c8 <refr_area_part+0x120>
    if(disp_refr->draw_prev_over_act) {
 800c010:	4b7b      	ldr	r3, [pc, #492]	; (800c200 <refr_area_part+0x258>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800c018:	f012 0f01 	tst.w	r2, #1
 800c01c:	f040 82d6 	bne.w	800c5cc <refr_area_part+0x624>
        if(disp_refr->prev_scr) {
 800c020:	6959      	ldr	r1, [r3, #20]
 800c022:	b129      	cbz	r1, 800c030 <refr_area_part+0x88>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800c024:	2c00      	cmp	r4, #0
 800c026:	bf18      	it	ne
 800c028:	4621      	movne	r1, r4
 800c02a:	4628      	mov	r0, r5
 800c02c:	f7ff ff6e 	bl	800bf0c <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800c030:	2e00      	cmp	r6, #0
 800c032:	f000 80a8 	beq.w	800c186 <refr_area_part+0x1de>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800c036:	4631      	mov	r1, r6
 800c038:	4628      	mov	r0, r5
 800c03a:	f7ff ff67 	bl	800bf0c <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800c03e:	4c70      	ldr	r4, [pc, #448]	; (800c200 <refr_area_part+0x258>)
 800c040:	6820      	ldr	r0, [r4, #0]
 800c042:	f7f7 fd21 	bl	8003a88 <lv_disp_get_layer_top>
 800c046:	4601      	mov	r1, r0
 800c048:	4628      	mov	r0, r5
 800c04a:	f7ff ff5f 	bl	800bf0c <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800c04e:	6820      	ldr	r0, [r4, #0]
 800c050:	f7f7 fd25 	bl	8003a9e <lv_disp_get_layer_sys>
 800c054:	4601      	mov	r1, r0
 800c056:	4628      	mov	r0, r5
 800c058:	f7ff ff58 	bl	800bf0c <refr_obj_and_children>
    draw_buf_flush(disp_refr);
 800c05c:	6824      	ldr	r4, [r4, #0]
 800c05e:	9405      	str	r4, [sp, #20]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800c060:	4620      	mov	r0, r4
 800c062:	f014 f9f5 	bl	8020450 <lv_disp_get_draw_buf>
 800c066:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800c06c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c06e:	b10b      	cbz	r3, 800c074 <refr_area_part+0xcc>
 800c070:	4620      	mov	r0, r4
 800c072:	4798      	blx	r3
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800c074:	682b      	ldr	r3, [r5, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 8089 	beq.w	800c18e <refr_area_part+0x1e6>
 800c07c:	686b      	ldr	r3, [r5, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 8085 	beq.w	800c18e <refr_area_part+0x1e6>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800c084:	4b5e      	ldr	r3, [pc, #376]	; (800c200 <refr_area_part+0x258>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c08e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c092:	fb02 f303 	mul.w	r3, r2, r3
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800c096:	68ea      	ldr	r2, [r5, #12]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d078      	beq.n	800c18e <refr_area_part+0x1e6>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c09c:	4e58      	ldr	r6, [pc, #352]	; (800c200 <refr_area_part+0x258>)
 800c09e:	6832      	ldr	r2, [r6, #0]
        while(draw_buf->flushing) {
 800c0a0:	692b      	ldr	r3, [r5, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d073      	beq.n	800c18e <refr_area_part+0x1e6>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c0a6:	6810      	ldr	r0, [r2, #0]
 800c0a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d0f8      	beq.n	800c0a0 <refr_area_part+0xf8>
 800c0ae:	4798      	blx	r3
 800c0b0:	e7f5      	b.n	800c09e <refr_area_part+0xf6>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c0b2:	4e53      	ldr	r6, [pc, #332]	; (800c200 <refr_area_part+0x258>)
 800c0b4:	6832      	ldr	r2, [r6, #0]
        while(draw_buf->flushing) {
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d093      	beq.n	800bfe4 <refr_area_part+0x3c>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c0bc:	6810      	ldr	r0, [r2, #0]
 800c0be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d0f8      	beq.n	800c0b6 <refr_area_part+0x10e>
 800c0c4:	4798      	blx	r3
 800c0c6:	e7f5      	b.n	800c0b4 <refr_area_part+0x10c>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800c0c8:	b140      	cbz	r0, 800c0dc <refr_area_part+0x134>
    if(disp_refr->draw_prev_over_act) {
 800c0ca:	4b4d      	ldr	r3, [pc, #308]	; (800c200 <refr_area_part+0x258>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800c0d2:	f012 0f01 	tst.w	r2, #1
 800c0d6:	d0a3      	beq.n	800c020 <refr_area_part+0x78>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800c0d8:	691e      	ldr	r6, [r3, #16]
 800c0da:	e277      	b.n	800c5cc <refr_area_part+0x624>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800c0dc:	4f48      	ldr	r7, [pc, #288]	; (800c200 <refr_area_part+0x258>)
 800c0de:	6838      	ldr	r0, [r7, #0]
 800c0e0:	f014 f96a 	bl	80203b8 <lv_disp_get_hor_res>
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	6838      	ldr	r0, [r7, #0]
 800c0e8:	f014 f97a 	bl	80203e0 <lv_disp_get_ver_res>
 800c0ec:	1e63      	subs	r3, r4, #1
 800c0ee:	1e42      	subs	r2, r0, #1
        lv_area_set(&a, 0, 0,
 800c0f0:	b212      	sxth	r2, r2
 800c0f2:	9200      	str	r2, [sp, #0]
 800c0f4:	b21b      	sxth	r3, r3
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	a81c      	add	r0, sp, #112	; 0x70
 800c0fc:	f014 fc62 	bl	80209c4 <lv_area_set>
        if(draw_ctx->draw_bg) {
 800c100:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c102:	b1ab      	cbz	r3, 800c130 <refr_area_part+0x188>
            lv_draw_rect_dsc_init(&dsc);
 800c104:	a81e      	add	r0, sp, #120	; 0x78
 800c106:	f003 f82f 	bl	800f168 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10e:	9222      	str	r2, [sp, #136]	; 0x88
            dsc.bg_img_opa = disp_refr->bg_opa;
 800c110:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800c114:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
            dsc.bg_color = disp_refr->bg_color;
 800c118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c11a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            dsc.bg_opa = disp_refr->bg_opa;
 800c11e:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800c122:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c124:	aa1c      	add	r2, sp, #112	; 0x70
 800c126:	a91e      	add	r1, sp, #120	; 0x78
 800c128:	4628      	mov	r0, r5
 800c12a:	4798      	blx	r3
 800c12c:	2400      	movs	r4, #0
 800c12e:	e7cc      	b.n	800c0ca <refr_area_part+0x122>
        else if(disp_refr->bg_img) {
 800c130:	4b33      	ldr	r3, [pc, #204]	; (800c200 <refr_area_part+0x258>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c136:	b1a0      	cbz	r0, 800c162 <refr_area_part+0x1ba>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800c138:	a91b      	add	r1, sp, #108	; 0x6c
 800c13a:	f003 fc85 	bl	800fa48 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 800c13e:	2801      	cmp	r0, #1
 800c140:	d1f4      	bne.n	800c12c <refr_area_part+0x184>
                lv_draw_img_dsc_init(&dsc);
 800c142:	a81e      	add	r0, sp, #120	; 0x78
 800c144:	f001 f88b 	bl	800d25e <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800c148:	4b2d      	ldr	r3, [pc, #180]	; (800c200 <refr_area_part+0x258>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800c150:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	aa1c      	add	r2, sp, #112	; 0x70
 800c158:	a91e      	add	r1, sp, #120	; 0x78
 800c15a:	4628      	mov	r0, r5
 800c15c:	f001 f8e6 	bl	800d32c <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 800c160:	e7e4      	b.n	800c12c <refr_area_part+0x184>
            lv_draw_rect_dsc_init(&dsc);
 800c162:	a81e      	add	r0, sp, #120	; 0x78
 800c164:	f003 f800 	bl	800f168 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800c168:	4b25      	ldr	r3, [pc, #148]	; (800c200 <refr_area_part+0x258>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c16e:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
            dsc.bg_opa = disp_refr->bg_opa;
 800c172:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c176:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800c17a:	686a      	ldr	r2, [r5, #4]
 800c17c:	a91e      	add	r1, sp, #120	; 0x78
 800c17e:	4628      	mov	r0, r5
 800c180:	f003 f84e 	bl	800f220 <lv_draw_rect>
 800c184:	e7d2      	b.n	800c12c <refr_area_part+0x184>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800c186:	4b1e      	ldr	r3, [pc, #120]	; (800c200 <refr_area_part+0x258>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	691e      	ldr	r6, [r3, #16]
 800c18c:	e753      	b.n	800c036 <refr_area_part+0x8e>
    draw_buf->flushing = 1;
 800c18e:	2301      	movs	r3, #1
 800c190:	612b      	str	r3, [r5, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800c192:	4b1b      	ldr	r3, [pc, #108]	; (800c200 <refr_area_part+0x258>)
 800c194:	6819      	ldr	r1, [r3, #0]
 800c196:	680b      	ldr	r3, [r1, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	699a      	ldr	r2, [r3, #24]
 800c19c:	f012 0f01 	tst.w	r2, #1
 800c1a0:	d006      	beq.n	800c1b0 <refr_area_part+0x208>
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	f013 0f02 	tst.w	r3, #2
 800c1a8:	d002      	beq.n	800c1b0 <refr_area_part+0x208>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	616b      	str	r3, [r5, #20]
 800c1ae:	e001      	b.n	800c1b4 <refr_area_part+0x20c>
    else draw_buf->flushing_last = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	616b      	str	r3, [r5, #20]
    bool flushing_last = draw_buf->flushing_last;
 800c1b4:	696b      	ldr	r3, [r5, #20]
 800c1b6:	9309      	str	r3, [sp, #36]	; 0x24
    if(disp->driver->flush_cb) {
 800c1b8:	9b05      	ldr	r3, [sp, #20]
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	6943      	ldr	r3, [r0, #20]
 800c1be:	b153      	cbz	r3, 800c1d6 <refr_area_part+0x22e>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800c1c0:	7c03      	ldrb	r3, [r0, #16]
 800c1c2:	f013 0f30 	tst.w	r3, #48	; 0x30
 800c1c6:	d002      	beq.n	800c1ce <refr_area_part+0x226>
 800c1c8:	f013 0f04 	tst.w	r3, #4
 800c1cc:	d11a      	bne.n	800c204 <refr_area_part+0x25c>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800c1ce:	6822      	ldr	r2, [r4, #0]
 800c1d0:	6861      	ldr	r1, [r4, #4]
 800c1d2:	f7ff fc11 	bl	800b9f8 <call_flush_cb>
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800c1d6:	682b      	ldr	r3, [r5, #0]
 800c1d8:	b173      	cbz	r3, 800c1f8 <refr_area_part+0x250>
 800c1da:	686a      	ldr	r2, [r5, #4]
 800c1dc:	b162      	cbz	r2, 800c1f8 <refr_area_part+0x250>
 800c1de:	9905      	ldr	r1, [sp, #20]
 800c1e0:	6809      	ldr	r1, [r1, #0]
 800c1e2:	7c09      	ldrb	r1, [r1, #16]
 800c1e4:	f011 0f01 	tst.w	r1, #1
 800c1e8:	d001      	beq.n	800c1ee <refr_area_part+0x246>
 800c1ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1ec:	b121      	cbz	r1, 800c1f8 <refr_area_part+0x250>
        if(draw_buf->buf_act == draw_buf->buf1)
 800c1ee:	68a9      	ldr	r1, [r5, #8]
            draw_buf->buf_act = draw_buf->buf2;
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	bf18      	it	ne
 800c1f4:	461a      	movne	r2, r3
 800c1f6:	60aa      	str	r2, [r5, #8]
}
 800c1f8:	b02d      	add	sp, #180	; 0xb4
 800c1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fe:	bf00      	nop
 800c200:	20002548 	.word	0x20002548
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800c204:	6863      	ldr	r3, [r4, #4]
 800c206:	930a      	str	r3, [sp, #40]	; 0x28
 800c208:	6824      	ldr	r4, [r4, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 800c20a:	f8d1 8000 	ldr.w	r8, [r1]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800c20e:	f898 3010 	ldrb.w	r3, [r8, #16]
 800c212:	f003 0206 	and.w	r2, r3, #6
 800c216:	2a06      	cmp	r2, #6
 800c218:	d0dd      	beq.n	800c1d6 <refr_area_part+0x22e>
    if(drv->rotated == LV_DISP_ROT_180) {
 800c21a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800c21e:	2a20      	cmp	r2, #32
 800c220:	d050      	beq.n	800c2c4 <refr_area_part+0x31c>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800c222:	f013 0f10 	tst.w	r3, #16
 800c226:	d0d6      	beq.n	800c1d6 <refr_area_part+0x22e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800c228:	4608      	mov	r0, r1
 800c22a:	f014 f911 	bl	8020450 <lv_disp_get_draw_buf>
 800c22e:	4607      	mov	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c230:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c232:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 800c236:	f9b6 1000 	ldrsh.w	r1, [r6]
 800c23a:	b288      	uxth	r0, r1
 800c23c:	9011      	str	r0, [sp, #68]	; 0x44
 800c23e:	1c53      	adds	r3, r2, #1
 800c240:	b29b      	uxth	r3, r3
 800c242:	9312      	str	r3, [sp, #72]	; 0x48
 800c244:	1a1b      	subs	r3, r3, r0
 800c246:	b298      	uxth	r0, r3
 800c248:	fa0f f983 	sxth.w	r9, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c24c:	4633      	mov	r3, r6
 800c24e:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
 800c252:	9616      	str	r6, [sp, #88]	; 0x58
 800c254:	b2b6      	uxth	r6, r6
 800c256:	960f      	str	r6, [sp, #60]	; 0x3c
 800c258:	88db      	ldrh	r3, [r3, #6]
 800c25a:	3301      	adds	r3, #1
 800c25c:	1b9b      	subs	r3, r3, r6
 800c25e:	b21e      	sxth	r6, r3
 800c260:	9608      	str	r6, [sp, #32]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800c262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c266:	fbb3 f3f9 	udiv	r3, r3, r9
 800c26a:	42b3      	cmp	r3, r6
 800c26c:	bfa8      	it	ge
 800c26e:	4633      	movge	r3, r6
 800c270:	930e      	str	r3, [sp, #56]	; 0x38
        if(drv->rotated == LV_DISP_ROT_90) {
 800c272:	f898 3010 	ldrb.w	r3, [r8, #16]
 800c276:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c27a:	2b10      	cmp	r3, #16
 800c27c:	d060      	beq.n	800c340 <refr_area_part+0x398>
            area->y1 = area->x1;
 800c27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c280:	8059      	strh	r1, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 800c282:	80da      	strh	r2, [r3, #6]
        while(row < area_h) {
 800c284:	9b08      	ldr	r3, [sp, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	dda5      	ble.n	800c1d6 <refr_area_part+0x22e>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800c28a:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
 800c28e:	105b      	asrs	r3, r3, #1
 800c290:	930c      	str	r3, [sp, #48]	; 0x30
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800c292:	f109 0301 	add.w	r3, r9, #1
 800c296:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800c29a:	105b      	asrs	r3, r3, #1
 800c29c:	9304      	str	r3, [sp, #16]
 800c29e:	1e43      	subs	r3, r0, #1
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	9310      	str	r3, [sp, #64]	; 0x40
 800c2aa:	f04f 0a00 	mov.w	sl, #0
 800c2ae:	f8cd a018 	str.w	sl, [sp, #24]
                    area->x2 = init_y_off + area_w - 1;
 800c2b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	18c3      	adds	r3, r0, r3
 800c2b8:	9318      	str	r3, [sp, #96]	; 0x60
 800c2ba:	9519      	str	r5, [sp, #100]	; 0x64
 800c2bc:	4655      	mov	r5, sl
 800c2be:	46c2      	mov	sl, r8
 800c2c0:	46b8      	mov	r8, r7
 800c2c2:	e102      	b.n	800c4ca <refr_area_part+0x522>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c2c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c2c6:	8883      	ldrh	r3, [r0, #4]
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	8803      	ldrh	r3, [r0, #0]
 800c2cc:	1ad3      	subs	r3, r2, r3
    uint32_t total = area_w * area_h;
 800c2ce:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c2d0:	88c3      	ldrh	r3, [r0, #6]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	8842      	ldrh	r2, [r0, #2]
 800c2d6:	1a9b      	subs	r3, r3, r2
 800c2d8:	b21b      	sxth	r3, r3
 800c2da:	fb03 f701 	mul.w	r7, r3, r1
    while(i > j) {
 800c2de:	1e7b      	subs	r3, r7, #1
 800c2e0:	d00d      	beq.n	800c2fe <refr_area_part+0x356>
 800c2e2:	eb04 0047 	add.w	r0, r4, r7, lsl #1
 800c2e6:	1ea1      	subs	r1, r4, #2
        tmp = color_p[i];
 800c2e8:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
        color_p[i] = color_p[j];
 800c2ec:	f831 6f02 	ldrh.w	r6, [r1, #2]!
 800c2f0:	8006      	strh	r6, [r0, #0]
        color_p[j] = tmp;
 800c2f2:	800a      	strh	r2, [r1, #0]
        i--;
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	3b01      	subs	r3, #1
    while(i > j) {
 800c2f8:	1aba      	subs	r2, r7, r2
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d8f4      	bhi.n	800c2e8 <refr_area_part+0x340>
    tmp_coord = area->y2;
 800c2fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c300:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    area->y2 = drv->ver_res - area->y1 - 1;
 800c304:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800c308:	3b01      	subs	r3, #1
 800c30a:	8841      	ldrh	r1, [r0, #2]
 800c30c:	1a5b      	subs	r3, r3, r1
 800c30e:	80c3      	strh	r3, [r0, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800c310:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800c314:	3b01      	subs	r3, #1
 800c316:	1a9b      	subs	r3, r3, r2
 800c318:	8043      	strh	r3, [r0, #2]
    tmp_coord = area->x2;
 800c31a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    area->x2 = drv->hor_res - area->x1 - 1;
 800c31e:	f8b8 3000 	ldrh.w	r3, [r8]
 800c322:	3b01      	subs	r3, #1
 800c324:	8801      	ldrh	r1, [r0, #0]
 800c326:	1a5b      	subs	r3, r3, r1
 800c328:	4601      	mov	r1, r0
 800c32a:	8083      	strh	r3, [r0, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800c32c:	f8b8 3000 	ldrh.w	r3, [r8]
 800c330:	3b01      	subs	r3, #1
 800c332:	1a9b      	subs	r3, r3, r2
 800c334:	8003      	strh	r3, [r0, #0]
        call_flush_cb(drv, area, color_p);
 800c336:	4622      	mov	r2, r4
 800c338:	4640      	mov	r0, r8
 800c33a:	f7ff fb5d 	bl	800b9f8 <call_flush_cb>
 800c33e:	e74a      	b.n	800c1d6 <refr_area_part+0x22e>
            area->y2 = drv->ver_res - area->x1 - 1;
 800c340:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800c344:	1e5a      	subs	r2, r3, #1
 800c346:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c348:	1a52      	subs	r2, r2, r1
 800c34a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c34c:	80ca      	strh	r2, [r1, #6]
            area->y1 = area->y2 - area_w + 1;
 800c34e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c350:	1a9b      	subs	r3, r3, r2
 800c352:	804b      	strh	r3, [r1, #2]
 800c354:	e796      	b.n	800c284 <refr_area_part+0x2dc>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800c356:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800c35a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c35e:	461a      	mov	r2, r3
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800c360:	f1b9 0f01 	cmp.w	r9, #1
 800c364:	dd63      	ble.n	800c42e <refr_area_part+0x486>
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	9307      	str	r3, [sp, #28]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800c36a:	930d      	str	r3, [sp, #52]	; 0x34
 800c36c:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800c370:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c374:	4692      	mov	sl, r2
 800c376:	9515      	str	r5, [sp, #84]	; 0x54
 800c378:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800c37a:	e044      	b.n	800c406 <refr_area_part+0x45e>
                    &color_p[i * w + j],
 800c37c:	eb0e 0501 	add.w	r5, lr, r1
                    &color_p[j * w + inv_i],
 800c380:	9803      	ldr	r0, [sp, #12]
 800c382:	fb01 0109 	mla	r1, r1, r9, r0
                    &color_p[inv_i * w + inv_j],
 800c386:	eb0c 0002 	add.w	r0, ip, r2
                    &color_p[inv_j * w + i]
 800c38a:	fb09 8202 	mla	r2, r9, r2, r8
    tmp = *a;
 800c38e:	f834 b015 	ldrh.w	fp, [r4, r5, lsl #1]
    *a = *b;
 800c392:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
 800c396:	f824 6015 	strh.w	r6, [r4, r5, lsl #1]
    *b = *c;
 800c39a:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
 800c39e:	f824 5011 	strh.w	r5, [r4, r1, lsl #1]
    *c = *d;
 800c3a2:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 800c3a6:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
    *d = tmp;
 800c3aa:	f824 b012 	strh.w	fp, [r4, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	b21b      	sxth	r3, r3
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	9a04      	ldr	r2, [sp, #16]
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	da1e      	bge.n	800c3f8 <refr_area_part+0x450>
            lv_coord_t inv_j = (w - 1) - j;
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	1afa      	subs	r2, r7, r3
 800c3be:	b212      	sxth	r2, r2
            if(is_270) {
 800c3c0:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800c3c4:	d1da      	bne.n	800c37c <refr_area_part+0x3d4>
                    &color_p[i * w + j],
 800c3c6:	eb0e 0501 	add.w	r5, lr, r1
                    &color_p[inv_j * w + i],
 800c3ca:	fb09 8002 	mla	r0, r9, r2, r8
                    &color_p[inv_i * w + inv_j],
 800c3ce:	4462      	add	r2, ip
                    &color_p[j * w + inv_i]
 800c3d0:	9e03      	ldr	r6, [sp, #12]
 800c3d2:	fb01 6109 	mla	r1, r1, r9, r6
    tmp = *a;
 800c3d6:	f834 b015 	ldrh.w	fp, [r4, r5, lsl #1]
    *a = *b;
 800c3da:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 800c3de:	f824 6015 	strh.w	r6, [r4, r5, lsl #1]
    *b = *c;
 800c3e2:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
 800c3e6:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
    *c = *d;
 800c3ea:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 800c3ee:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
    *d = tmp;
 800c3f2:	f824 b011 	strh.w	fp, [r4, r1, lsl #1]
}
 800c3f6:	e7da      	b.n	800c3ae <refr_area_part+0x406>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800c3f8:	9b07      	ldr	r3, [sp, #28]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	b21b      	sxth	r3, r3
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c402:	4293      	cmp	r3, r2
 800c404:	da0e      	bge.n	800c424 <refr_area_part+0x47c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800c406:	f1b9 0f00 	cmp.w	r9, #0
 800c40a:	ddf5      	ble.n	800c3f8 <refr_area_part+0x450>
            lv_coord_t inv_i = (w - 1) - i;
 800c40c:	9b07      	ldr	r3, [sp, #28]
 800c40e:	1afe      	subs	r6, r7, r3
 800c410:	b236      	sxth	r6, r6
                    &color_p[i * w + j],
 800c412:	4698      	mov	r8, r3
 800c414:	fb09 fe03 	mul.w	lr, r9, r3
                    &color_p[inv_i * w + inv_j],
 800c418:	fb09 fc06 	mul.w	ip, r9, r6
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800c41c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c41e:	2100      	movs	r1, #0
 800c420:	9603      	str	r6, [sp, #12]
 800c422:	e7ca      	b.n	800c3ba <refr_area_part+0x412>
 800c424:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c428:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c42c:	9d15      	ldr	r5, [sp, #84]	; 0x54
                if(drv->rotated == LV_DISP_ROT_90) {
 800c42e:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800c432:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c436:	2b10      	cmp	r3, #16
 800c438:	d00f      	beq.n	800c45a <refr_area_part+0x4b2>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800c43a:	f8ba 3000 	ldrh.w	r3, [sl]
 800c43e:	3b01      	subs	r3, #1
 800c440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	b29b      	uxth	r3, r3
 800c446:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c448:	808b      	strh	r3, [r1, #4]
                    area->x1 = area->x2 - area_w + 1;
 800c44a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c44c:	3201      	adds	r2, #1
 800c44e:	4413      	add	r3, r2
 800c450:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	800b      	strh	r3, [r1, #0]
                height = area_w;
 800c456:	464e      	mov	r6, r9
 800c458:	e08d      	b.n	800c576 <refr_area_part+0x5ce>
                    area->x1 = init_y_off;
 800c45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c45c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c45e:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800c460:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c462:	809a      	strh	r2, [r3, #4]
                height = area_w;
 800c464:	464e      	mov	r6, r9
 800c466:	e086      	b.n	800c576 <refr_area_part+0x5ce>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800c468:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c46c:	f015 fa4e 	bl	802190c <lv_mem_buf_get>
 800c470:	4605      	mov	r5, r0
 800c472:	e03d      	b.n	800c4f0 <refr_area_part+0x548>
                    area->x1 = init_y_off + row;
 800c474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c476:	9a06      	ldr	r2, [sp, #24]
 800c478:	4413      	add	r3, r2
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c47e:	8013      	strh	r3, [r2, #0]
                    area->x2 = init_y_off + row + height - 1;
 800c480:	3b01      	subs	r3, #1
 800c482:	9903      	ldr	r1, [sp, #12]
 800c484:	440b      	add	r3, r1
 800c486:	8093      	strh	r3, [r2, #4]
 800c488:	e075      	b.n	800c576 <refr_area_part+0x5ce>
                draw_buf->flushing_last = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	f8c8 3014 	str.w	r3, [r8, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800c490:	2d00      	cmp	r5, #0
 800c492:	bf14      	ite	ne
 800c494:	462a      	movne	r2, r5
 800c496:	4622      	moveq	r2, r4
 800c498:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c49a:	4650      	mov	r0, sl
 800c49c:	f7ff faac 	bl	800b9f8 <call_flush_cb>
            while(draw_buf->flushing) {
 800c4a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c4a4:	b133      	cbz	r3, 800c4b4 <refr_area_part+0x50c>
                if(drv->wait_cb) drv->wait_cb(drv);
 800c4a6:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0f8      	beq.n	800c4a0 <refr_area_part+0x4f8>
 800c4ae:	4650      	mov	r0, sl
 800c4b0:	4798      	blx	r3
 800c4b2:	e7f5      	b.n	800c4a0 <refr_area_part+0x4f8>
            color_p += area_w * height;
 800c4b4:	fb09 f707 	mul.w	r7, r9, r7
 800c4b8:	eb04 0447 	add.w	r4, r4, r7, lsl #1
            row += height;
 800c4bc:	9b06      	ldr	r3, [sp, #24]
 800c4be:	4433      	add	r3, r6
 800c4c0:	b21b      	sxth	r3, r3
 800c4c2:	9306      	str	r3, [sp, #24]
        while(row < area_h) {
 800c4c4:	9a08      	ldr	r2, [sp, #32]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	dd6b      	ble.n	800c5a2 <refr_area_part+0x5fa>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800c4ca:	9a06      	ldr	r2, [sp, #24]
 800c4cc:	920b      	str	r2, [sp, #44]	; 0x2c
 800c4ce:	9908      	ldr	r1, [sp, #32]
 800c4d0:	1a8b      	subs	r3, r1, r2
 800c4d2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c4d4:	4283      	cmp	r3, r0
 800c4d6:	bfa8      	it	ge
 800c4d8:	4603      	movge	r3, r0
 800c4da:	9303      	str	r3, [sp, #12]
 800c4dc:	b21e      	sxth	r6, r3
            draw_buf->flushing = 1;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	f8c8 3010 	str.w	r3, [r8, #16]
            if((row == 0) && (area_h >= area_w)) {
 800c4e4:	b912      	cbnz	r2, 800c4ec <refr_area_part+0x544>
 800c4e6:	4589      	cmp	r9, r1
 800c4e8:	f77f af35 	ble.w	800c356 <refr_area_part+0x3ae>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	d0bb      	beq.n	800c468 <refr_area_part+0x4c0>
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800c4f0:	f89a 7010 	ldrb.w	r7, [sl, #16]
 800c4f4:	f007 0730 	and.w	r7, r7, #48	; 0x30
    uint32_t invert = (area_w * area_h) - 1;
 800c4f8:	fb09 f206 	mul.w	r2, r9, r6
    uint32_t initial_i = ((area_w - 1) * area_h);
 800c4fc:	eba2 0c06 	sub.w	ip, r2, r6
    for(lv_coord_t y = 0; y < area_h; y++) {
 800c500:	2e00      	cmp	r6, #0
 800c502:	dd24      	ble.n	800c54e <refr_area_part+0x5a6>
 800c504:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 800c508:	44e6      	add	lr, ip
 800c50a:	4623      	mov	r3, r4
 800c50c:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
 800c510:	f8cd a01c 	str.w	sl, [sp, #28]
 800c514:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
        if(invert_i)
 800c518:	2f30      	cmp	r7, #48	; 0x30
            i = invert - i;
 800c51a:	bf0c      	ite	eq
 800c51c:	ebab 020c 	subeq.w	r2, fp, ip
        uint32_t i = initial_i + y;
 800c520:	4662      	movne	r2, ip
        for(lv_coord_t x = 0; x < area_w; x++) {
 800c522:	f1b9 0f00 	cmp.w	r9, #0
 800c526:	dd0c      	ble.n	800c542 <refr_area_part+0x59a>
 800c528:	eb03 000a 	add.w	r0, r3, sl
            rot_buf[i] = *(orig_color_p++);
 800c52c:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c530:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
            if(invert_i)
 800c534:	2f30      	cmp	r7, #48	; 0x30
                i += area_h;
 800c536:	bf0c      	ite	eq
 800c538:	1992      	addeq	r2, r2, r6
                i -= area_h;
 800c53a:	1b92      	subne	r2, r2, r6
        for(lv_coord_t x = 0; x < area_w; x++) {
 800c53c:	4283      	cmp	r3, r0
 800c53e:	d1f5      	bne.n	800c52c <refr_area_part+0x584>
            rot_buf[i] = *(orig_color_p++);
 800c540:	4603      	mov	r3, r0
    for(lv_coord_t y = 0; y < area_h; y++) {
 800c542:	f10c 0c01 	add.w	ip, ip, #1
 800c546:	45f4      	cmp	ip, lr
 800c548:	d1e6      	bne.n	800c518 <refr_area_part+0x570>
 800c54a:	f8dd a01c 	ldr.w	sl, [sp, #28]
                if(drv->rotated == LV_DISP_ROT_90) {
 800c54e:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800c552:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c556:	2b10      	cmp	r3, #16
 800c558:	d08c      	beq.n	800c474 <refr_area_part+0x4cc>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800c55a:	f8ba 3000 	ldrh.w	r3, [sl]
 800c55e:	3b01      	subs	r3, #1
 800c560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c562:	1a9b      	subs	r3, r3, r2
 800c564:	9a06      	ldr	r2, [sp, #24]
 800c566:	1a9b      	subs	r3, r3, r2
 800c568:	b29b      	uxth	r3, r3
 800c56a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c56c:	808b      	strh	r3, [r1, #4]
                    area->x1 = area->x2 - height + 1;
 800c56e:	3301      	adds	r3, #1
 800c570:	9a03      	ldr	r2, [sp, #12]
 800c572:	1a9b      	subs	r3, r3, r2
 800c574:	800b      	strh	r3, [r1, #0]
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800c576:	4637      	mov	r7, r6
 800c578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c57a:	4433      	add	r3, r6
 800c57c:	9a08      	ldr	r2, [sp, #32]
 800c57e:	429a      	cmp	r2, r3
 800c580:	dc83      	bgt.n	800c48a <refr_area_part+0x4e2>
 800c582:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c586:	f013 0f01 	tst.w	r3, #1
 800c58a:	f43f af7e 	beq.w	800c48a <refr_area_part+0x4e2>
 800c58e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c592:	f013 0f02 	tst.w	r3, #2
 800c596:	f43f af78 	beq.w	800c48a <refr_area_part+0x4e2>
                draw_buf->flushing_last = 1;
 800c59a:	2301      	movs	r3, #1
 800c59c:	f8c8 3014 	str.w	r3, [r8, #20]
 800c5a0:	e776      	b.n	800c490 <refr_area_part+0x4e8>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800c5a2:	46aa      	mov	sl, r5
 800c5a4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800c5a6:	f1ba 0f00 	cmp.w	sl, #0
 800c5aa:	f43f ae14 	beq.w	800c1d6 <refr_area_part+0x22e>
 800c5ae:	4650      	mov	r0, sl
 800c5b0:	f015 fa0e 	bl	80219d0 <lv_mem_buf_release>
 800c5b4:	e60f      	b.n	800c1d6 <refr_area_part+0x22e>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f43f ad90 	beq.w	800c0dc <refr_area_part+0x134>
    if(disp_refr->draw_prev_over_act) {
 800c5bc:	4b0c      	ldr	r3, [pc, #48]	; (800c5f0 <refr_area_part+0x648>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c4:	f013 0f01 	tst.w	r3, #1
 800c5c8:	f43f ad32 	beq.w	800c030 <refr_area_part+0x88>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800c5cc:	4631      	mov	r1, r6
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f7ff fc9c 	bl	800bf0c <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 800c5d4:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <refr_area_part+0x648>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6959      	ldr	r1, [r3, #20]
 800c5da:	2900      	cmp	r1, #0
 800c5dc:	f43f ad2f 	beq.w	800c03e <refr_area_part+0x96>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800c5e0:	2c00      	cmp	r4, #0
 800c5e2:	bf18      	it	ne
 800c5e4:	4621      	movne	r1, r4
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f7ff fc90 	bl	800bf0c <refr_obj_and_children>
 800c5ec:	e527      	b.n	800c03e <refr_area_part+0x96>
 800c5ee:	bf00      	nop
 800c5f0:	20002548 	.word	0x20002548

0800c5f4 <_lv_inv_area>:
{
 800c5f4:	b570      	push	{r4, r5, r6, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d053      	beq.n	800c6a8 <_lv_inv_area+0xb4>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800c600:	4620      	mov	r0, r4
 800c602:	f7f7 fa60 	bl	8003ac6 <lv_disp_is_invalidation_enabled>
 800c606:	2800      	cmp	r0, #0
 800c608:	d053      	beq.n	800c6b2 <_lv_inv_area+0xbe>
    if(disp->rendering_in_progress) {
 800c60a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c60e:	f013 0f04 	tst.w	r3, #4
 800c612:	d14e      	bne.n	800c6b2 <_lv_inv_area+0xbe>
    if(area_p == NULL) {
 800c614:	2d00      	cmp	r5, #0
 800c616:	d04e      	beq.n	800c6b6 <_lv_inv_area+0xc2>
    scr_area.x1 = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
 800c61e:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800c622:	4620      	mov	r0, r4
 800c624:	f013 fec8 	bl	80203b8 <lv_disp_get_hor_res>
 800c628:	3801      	subs	r0, #1
 800c62a:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800c62e:	4620      	mov	r0, r4
 800c630:	f013 fed6 	bl	80203e0 <lv_disp_get_ver_res>
 800c634:	3801      	subs	r0, #1
 800c636:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800c63a:	aa02      	add	r2, sp, #8
 800c63c:	4629      	mov	r1, r5
 800c63e:	4668      	mov	r0, sp
 800c640:	f014 f9fd 	bl	8020a3e <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 800c644:	2800      	cmp	r0, #0
 800c646:	d034      	beq.n	800c6b2 <_lv_inv_area+0xbe>
    if(disp->driver->full_refresh) {
 800c648:	6820      	ldr	r0, [r4, #0]
 800c64a:	7c03      	ldrb	r3, [r0, #16]
 800c64c:	f013 0f02 	tst.w	r3, #2
 800c650:	d135      	bne.n	800c6be <_lv_inv_area+0xca>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800c652:	6983      	ldr	r3, [r0, #24]
 800c654:	b10b      	cbz	r3, 800c65a <_lv_inv_area+0x66>
 800c656:	4669      	mov	r1, sp
 800c658:	4798      	blx	r3
    for(i = 0; i < disp->inv_p; i++) {
 800c65a:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d03d      	beq.n	800c6de <_lv_inv_area+0xea>
 800c662:	2500      	movs	r5, #0
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800c664:	462e      	mov	r6, r5
 800c666:	b2a9      	uxth	r1, r5
 800c668:	3106      	adds	r1, #6
 800c66a:	4632      	mov	r2, r6
 800c66c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800c670:	4668      	mov	r0, sp
 800c672:	f014 fb0e 	bl	8020c92 <_lv_area_is_in>
 800c676:	b9e0      	cbnz	r0, 800c6b2 <_lv_inv_area+0xbe>
    for(i = 0; i < disp->inv_p; i++) {
 800c678:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800c67c:	3501      	adds	r5, #1
 800c67e:	b2aa      	uxth	r2, r5
 800c680:	4293      	cmp	r3, r2
 800c682:	d8f0      	bhi.n	800c666 <_lv_inv_area+0x72>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800c684:	2b1f      	cmp	r3, #31
 800c686:	d92a      	bls.n	800c6de <_lv_inv_area+0xea>
        disp->inv_p = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 800c68e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c692:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 800c694:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c698:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 800c69a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c69e:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 800c6a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c6a4:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 800c6a6:	e028      	b.n	800c6fa <_lv_inv_area+0x106>
    if(!disp) disp = lv_disp_get_default();
 800c6a8:	f013 fe80 	bl	80203ac <lv_disp_get_default>
    if(!disp) return;
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d1a6      	bne.n	800c600 <_lv_inv_area+0xc>
}
 800c6b2:	b004      	add	sp, #16
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
        disp->inv_p = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
        return;
 800c6bc:	e7f9      	b.n	800c6b2 <_lv_inv_area+0xbe>
        disp->inv_areas[0] = scr_area;
 800c6be:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800c6c2:	aa04      	add	r2, sp, #16
 800c6c4:	e912 0003 	ldmdb	r2, {r0, r1}
 800c6c8:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800c6d2:	6860      	ldr	r0, [r4, #4]
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d0ec      	beq.n	800c6b2 <_lv_inv_area+0xbe>
 800c6d8:	f016 fd89 	bl	80231ee <lv_timer_resume>
 800c6dc:	e7e9      	b.n	800c6b2 <_lv_inv_area+0xbe>
    dest->x1 = src->x1;
 800c6de:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c6e2:	f8bd 2000 	ldrh.w	r2, [sp]
 800c6e6:	861a      	strh	r2, [r3, #48]	; 0x30
    dest->y1 = src->y1;
 800c6e8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c6ec:	865a      	strh	r2, [r3, #50]	; 0x32
    dest->x2 = src->x2;
 800c6ee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800c6f2:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y2 = src->y2;
 800c6f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c6f8:	86da      	strh	r2, [r3, #54]	; 0x36
    disp->inv_p++;
 800c6fa:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800c6fe:	3301      	adds	r3, #1
 800c700:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800c704:	6860      	ldr	r0, [r4, #4]
 800c706:	2800      	cmp	r0, #0
 800c708:	d0d3      	beq.n	800c6b2 <_lv_inv_area+0xbe>
 800c70a:	f016 fd70 	bl	80231ee <lv_timer_resume>
 800c70e:	e7d0      	b.n	800c6b2 <_lv_inv_area+0xbe>

0800c710 <_lv_refr_get_disp_refreshing>:
}
 800c710:	4b01      	ldr	r3, [pc, #4]	; (800c718 <_lv_refr_get_disp_refreshing+0x8>)
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20002548 	.word	0x20002548

0800c71c <_lv_disp_refr_timer>:
{
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	b08d      	sub	sp, #52	; 0x34
 800c722:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 800c724:	f013 ff01 	bl	802052a <lv_tick_get>
 800c728:	9007      	str	r0, [sp, #28]
    volatile uint32_t elaps = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	930b      	str	r3, [sp, #44]	; 0x2c
    if(tmr) {
 800c72e:	b314      	cbz	r4, 800c776 <_lv_disp_refr_timer+0x5a>
        disp_refr = tmr->user_data;
 800c730:	68e2      	ldr	r2, [r4, #12]
 800c732:	4ba3      	ldr	r3, [pc, #652]	; (800c9c0 <_lv_disp_refr_timer+0x2a4>)
 800c734:	601a      	str	r2, [r3, #0]
    lv_obj_update_layout(disp_refr->act_scr);
 800c736:	4ca2      	ldr	r4, [pc, #648]	; (800c9c0 <_lv_disp_refr_timer+0x2a4>)
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	6918      	ldr	r0, [r3, #16]
 800c73c:	f7fc fad0 	bl	8008ce0 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800c740:	6823      	ldr	r3, [r4, #0]
 800c742:	6958      	ldr	r0, [r3, #20]
 800c744:	b108      	cbz	r0, 800c74a <_lv_disp_refr_timer+0x2e>
 800c746:	f7fc facb 	bl	8008ce0 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 800c74a:	4c9d      	ldr	r4, [pc, #628]	; (800c9c0 <_lv_disp_refr_timer+0x2a4>)
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	69d8      	ldr	r0, [r3, #28]
 800c750:	f7fc fac6 	bl	8008ce0 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	6a18      	ldr	r0, [r3, #32]
 800c758:	f7fc fac2 	bl	8008ce0 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	691a      	ldr	r2, [r3, #16]
 800c760:	b172      	cbz	r2, 800c780 <_lv_disp_refr_timer+0x64>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800c762:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 800c766:	2a00      	cmp	r2, #0
 800c768:	f000 828f 	beq.w	800cc8a <_lv_disp_refr_timer+0x56e>
 800c76c:	f04f 0830 	mov.w	r8, #48	; 0x30
 800c770:	2700      	movs	r7, #0
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800c772:	4e93      	ldr	r6, [pc, #588]	; (800c9c0 <_lv_disp_refr_timer+0x2a4>)
 800c774:	e050      	b.n	800c818 <_lv_disp_refr_timer+0xfc>
        disp_refr = lv_disp_get_default();
 800c776:	f013 fe19 	bl	80203ac <lv_disp_get_default>
 800c77a:	4b91      	ldr	r3, [pc, #580]	; (800c9c0 <_lv_disp_refr_timer+0x2a4>)
 800c77c:	6018      	str	r0, [r3, #0]
 800c77e:	e7da      	b.n	800c736 <_lv_disp_refr_timer+0x1a>
        disp_refr->inv_p = 0;
 800c780:	2200      	movs	r2, #0
 800c782:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 800c786:	b00d      	add	sp, #52	; 0x34
 800c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800c78c:	3401      	adds	r4, #1
 800c78e:	6830      	ldr	r0, [r6, #0]
 800c790:	3508      	adds	r5, #8
 800c792:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 800c796:	429c      	cmp	r4, r3
 800c798:	d236      	bcs.n	800c808 <_lv_disp_refr_timer+0xec>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800c79a:	1903      	adds	r3, r0, r4
 800c79c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d1f3      	bne.n	800c78c <_lv_disp_refr_timer+0x70>
 800c7a4:	42a7      	cmp	r7, r4
 800c7a6:	d0f1      	beq.n	800c78c <_lv_disp_refr_timer+0x70>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800c7a8:	1941      	adds	r1, r0, r5
 800c7aa:	4440      	add	r0, r8
 800c7ac:	f014 fa50 	bl	8020c50 <_lv_area_is_on>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d0eb      	beq.n	800c78c <_lv_disp_refr_timer+0x70>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800c7b4:	6831      	ldr	r1, [r6, #0]
 800c7b6:	194a      	adds	r2, r1, r5
 800c7b8:	4441      	add	r1, r8
 800c7ba:	a809      	add	r0, sp, #36	; 0x24
 800c7bc:	f014 f96b 	bl	8020a96 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800c7c0:	a809      	add	r0, sp, #36	; 0x24
 800c7c2:	f014 f910 	bl	80209e6 <lv_area_get_size>
 800c7c6:	4683      	mov	fp, r0
 800c7c8:	6830      	ldr	r0, [r6, #0]
 800c7ca:	4440      	add	r0, r8
 800c7cc:	f014 f90b 	bl	80209e6 <lv_area_get_size>
 800c7d0:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800c7d2:	6830      	ldr	r0, [r6, #0]
 800c7d4:	4428      	add	r0, r5
 800c7d6:	f014 f906 	bl	80209e6 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800c7da:	4482      	add	sl, r0
 800c7dc:	45d3      	cmp	fp, sl
 800c7de:	d2d5      	bcs.n	800c78c <_lv_disp_refr_timer+0x70>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800c7e0:	6833      	ldr	r3, [r6, #0]
    dest->x1 = src->x1;
 800c7e2:	eb03 0209 	add.w	r2, r3, r9
 800c7e6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800c7ea:	8611      	strh	r1, [r2, #48]	; 0x30
    dest->y1 = src->y1;
 800c7ec:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800c7f0:	8651      	strh	r1, [r2, #50]	; 0x32
    dest->x2 = src->x2;
 800c7f2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800c7f6:	8691      	strh	r1, [r2, #52]	; 0x34
    dest->y2 = src->y2;
 800c7f8:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800c7fc:	86d1      	strh	r1, [r2, #54]	; 0x36
                disp_refr->inv_area_joined[join_from] = 1;
 800c7fe:	4423      	add	r3, r4
 800c800:	2201      	movs	r2, #1
 800c802:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800c806:	e7c1      	b.n	800c78c <_lv_disp_refr_timer+0x70>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800c808:	3701      	adds	r7, #1
 800c80a:	6833      	ldr	r3, [r6, #0]
 800c80c:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 800c810:	f108 0808 	add.w	r8, r8, #8
 800c814:	4297      	cmp	r7, r2
 800c816:	d20f      	bcs.n	800c838 <_lv_disp_refr_timer+0x11c>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800c818:	443b      	add	r3, r7
 800c81a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1f2      	bne.n	800c808 <_lv_disp_refr_timer+0xec>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800c822:	6830      	ldr	r0, [r6, #0]
 800c824:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 8232 	beq.w	800cc92 <_lv_disp_refr_timer+0x576>
 800c82e:	2530      	movs	r5, #48	; 0x30
 800c830:	2400      	movs	r4, #0
 800c832:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800c836:	e7b0      	b.n	800c79a <_lv_disp_refr_timer+0x7e>
    px_num = 0;
 800c838:	4962      	ldr	r1, [pc, #392]	; (800c9c4 <_lv_disp_refr_timer+0x2a8>)
 800c83a:	2000      	movs	r0, #0
 800c83c:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 800c83e:	2a00      	cmp	r2, #0
 800c840:	f000 8169 	beq.w	800cb16 <_lv_disp_refr_timer+0x3fa>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800c844:	1e51      	subs	r1, r2, #1
 800c846:	f502 7298 	add.w	r2, r2, #304	; 0x130
 800c84a:	441a      	add	r2, r3
        if(disp_refr->inv_area_joined[i] == 0) {
 800c84c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 800c850:	b130      	cbz	r0, 800c860 <_lv_disp_refr_timer+0x144>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800c852:	3901      	subs	r1, #1
 800c854:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c858:	d1f8      	bne.n	800c84c <_lv_disp_refr_timer+0x130>
    int32_t last_i = 0;
 800c85a:	2200      	movs	r2, #0
 800c85c:	9206      	str	r2, [sp, #24]
 800c85e:	e000      	b.n	800c862 <_lv_disp_refr_timer+0x146>
 800c860:	9106      	str	r1, [sp, #24]
    if(disp_refr->driver->render_start_cb) {
 800c862:	6818      	ldr	r0, [r3, #0]
 800c864:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c866:	b103      	cbz	r3, 800c86a <_lv_disp_refr_timer+0x14e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800c868:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 800c86a:	4b55      	ldr	r3, [pc, #340]	; (800c9c0 <_lv_disp_refr_timer+0x2a4>)
 800c86c:	681c      	ldr	r4, [r3, #0]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	68da      	ldr	r2, [r3, #12]
 800c872:	7e13      	ldrb	r3, [r2, #24]
 800c874:	f36f 0300 	bfc	r3, #0, #1
 800c878:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	7e13      	ldrb	r3, [r2, #24]
 800c880:	f36f 0341 	bfc	r3, #1, #1
 800c884:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 800c886:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c88a:	f043 0304 	orr.w	r3, r3, #4
 800c88e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 800c892:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800c896:	2b00      	cmp	r3, #0
 800c898:	f000 8137 	beq.w	800cb0a <_lv_disp_refr_timer+0x3ee>
 800c89c:	2300      	movs	r3, #0
 800c89e:	9302      	str	r3, [sp, #8]
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800c8a0:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800c9c0 <_lv_disp_refr_timer+0x2a4>
        draw_ctx->buf_area = &sub_area;
 800c8a4:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800c8a8:	e0a9      	b.n	800c9fe <_lv_disp_refr_timer+0x2e2>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	7e13      	ldrb	r3, [r2, #24]
 800c8b0:	f043 0301 	orr.w	r3, r3, #1
 800c8b4:	7613      	strb	r3, [r2, #24]
 800c8b6:	e0ac      	b.n	800ca12 <_lv_disp_refr_timer+0x2f6>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f013 fd7d 	bl	80203b8 <lv_disp_get_hor_res>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	f8da 0000 	ldr.w	r0, [sl]
 800c8c4:	f013 fd8c 	bl	80203e0 <lv_disp_get_ver_res>
 800c8c8:	1e73      	subs	r3, r6, #1
 800c8ca:	1e42      	subs	r2, r0, #1
 800c8cc:	b212      	sxth	r2, r2
 800c8ce:	9200      	str	r2, [sp, #0]
 800c8d0:	b21b      	sxth	r3, r3
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f014 f874 	bl	80209c4 <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 800c8dc:	f8c5 b004 	str.w	fp, [r5, #4]
        if(disp_refr->driver->full_refresh) {
 800c8e0:	f8da 3000 	ldr.w	r3, [sl]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	7c1a      	ldrb	r2, [r3, #16]
 800c8e8:	f012 0f02 	tst.w	r2, #2
 800c8ec:	d00a      	beq.n	800c904 <_lv_disp_refr_timer+0x1e8>
            disp_refr->driver->draw_buf->last_part = 1;
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	7e13      	ldrb	r3, [r2, #24]
 800c8f2:	f043 0302 	orr.w	r3, r3, #2
 800c8f6:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800c8f8:	f8c5 b008 	str.w	fp, [r5, #8]
            refr_area_part(draw_ctx);
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f7ff fb53 	bl	800bfa8 <refr_area_part>
 800c902:	e065      	b.n	800c9d0 <_lv_disp_refr_timer+0x2b4>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	6991      	ldr	r1, [r2, #24]
 800c908:	7e13      	ldrb	r3, [r2, #24]
 800c90a:	f361 0341 	bfi	r3, r1, #1, #1
 800c90e:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800c910:	9b02      	ldr	r3, [sp, #8]
 800c912:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c916:	3330      	adds	r3, #48	; 0x30
            draw_ctx->clip_area = area_p;
 800c918:	60ab      	str	r3, [r5, #8]
            refr_area_part(draw_ctx);
 800c91a:	4628      	mov	r0, r5
 800c91c:	f7ff fb44 	bl	800bfa8 <refr_area_part>
        return;
 800c920:	e056      	b.n	800c9d0 <_lv_disp_refr_timer+0x2b4>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800c922:	f8da 0000 	ldr.w	r0, [sl]
 800c926:	f013 fd5b 	bl	80203e0 <lv_disp_get_ver_res>
 800c92a:	1e44      	subs	r4, r0, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800c92c:	b224      	sxth	r4, r4
 800c92e:	e09a      	b.n	800ca66 <_lv_disp_refr_timer+0x34a>
        if(h_tmp <= 0) {
 800c930:	2f00      	cmp	r7, #0
            max_row = tmp.y2 + 1;
 800c932:	bfc8      	it	gt
 800c934:	f102 0801 	addgt.w	r8, r2, #1
        if(h_tmp <= 0) {
 800c938:	f340 80c6 	ble.w	800cac8 <_lv_disp_refr_timer+0x3ac>
    int32_t max_row = get_max_row(disp_refr, w, h);
 800c93c:	f8cd 8010 	str.w	r8, [sp, #16]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800c940:	f9b6 7032 	ldrsh.w	r7, [r6, #50]	; 0x32
 800c944:	9403      	str	r4, [sp, #12]
 800c946:	eb07 0308 	add.w	r3, r7, r8
 800c94a:	3b01      	subs	r3, #1
 800c94c:	42a3      	cmp	r3, r4
 800c94e:	dc3b      	bgt.n	800c9c8 <_lv_disp_refr_timer+0x2ac>
        sub_area.y2 = row + max_row - 1;
 800c950:	fa1f f988 	uxth.w	r9, r8
 800c954:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	e00c      	b.n	800c976 <_lv_disp_refr_timer+0x25a>
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800c95c:	45a0      	cmp	r8, r4
 800c95e:	d028      	beq.n	800c9b2 <_lv_disp_refr_timer+0x296>
        refr_area_part(draw_ctx);
 800c960:	4628      	mov	r0, r5
 800c962:	f7ff fb21 	bl	800bfa8 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800c966:	444f      	add	r7, r9
 800c968:	b23f      	sxth	r7, r7
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	18fb      	adds	r3, r7, r3
 800c96e:	3b01      	subs	r3, #1
 800c970:	9a03      	ldr	r2, [sp, #12]
 800c972:	429a      	cmp	r2, r3
 800c974:	db2a      	blt.n	800c9cc <_lv_disp_refr_timer+0x2b0>
        sub_area.x1 = area_p->x1;
 800c976:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800c978:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        sub_area.x2 = area_p->x2;
 800c97c:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 800c97e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sub_area.y1 = row;
 800c982:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
        sub_area.y2 = row + max_row - 1;
 800c986:	b2bf      	uxth	r7, r7
 800c988:	9b05      	ldr	r3, [sp, #20]
 800c98a:	18fb      	adds	r3, r7, r3
 800c98c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        draw_ctx->buf_area = &sub_area;
 800c990:	f8c5 b004 	str.w	fp, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 800c994:	f8c5 b008 	str.w	fp, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800c998:	f8da 3000 	ldr.w	r3, [sl]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	68d2      	ldr	r2, [r2, #12]
 800c9a0:	6892      	ldr	r2, [r2, #8]
 800c9a2:	602a      	str	r2, [r5, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800c9a4:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 800c9a8:	45a0      	cmp	r8, r4
 800c9aa:	ddd7      	ble.n	800c95c <_lv_disp_refr_timer+0x240>
 800c9ac:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
        row_last = sub_area.y2;
 800c9b0:	46a0      	mov	r8, r4
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68da      	ldr	r2, [r3, #12]
 800c9b6:	7e13      	ldrb	r3, [r2, #24]
 800c9b8:	f043 0302 	orr.w	r3, r3, #2
 800c9bc:	7613      	strb	r3, [r2, #24]
 800c9be:	e7cf      	b.n	800c960 <_lv_disp_refr_timer+0x244>
 800c9c0:	20002548 	.word	0x20002548
 800c9c4:	20002564 	.word	0x20002564
    lv_coord_t row_last = 0;
 800c9c8:	f04f 0800 	mov.w	r8, #0
    if(y2 != row_last) {
 800c9cc:	4544      	cmp	r4, r8
 800c9ce:	d17e      	bne.n	800cace <_lv_disp_refr_timer+0x3b2>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800c9d0:	9b02      	ldr	r3, [sp, #8]
 800c9d2:	00db      	lsls	r3, r3, #3
 800c9d4:	3330      	adds	r3, #48	; 0x30
 800c9d6:	f8da 0000 	ldr.w	r0, [sl]
 800c9da:	4418      	add	r0, r3
 800c9dc:	f014 f803 	bl	80209e6 <lv_area_get_size>
 800c9e0:	4aae      	ldr	r2, [pc, #696]	; (800cc9c <_lv_disp_refr_timer+0x580>)
 800c9e2:	6813      	ldr	r3, [r2, #0]
 800c9e4:	4403      	add	r3, r0
 800c9e6:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	9302      	str	r3, [sp, #8]
 800c9f0:	f8da 4000 	ldr.w	r4, [sl]
 800c9f4:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	f280 8086 	bge.w	800cb0a <_lv_disp_refr_timer+0x3ee>
        if(disp_refr->inv_area_joined[i] == 0) {
 800c9fe:	9a02      	ldr	r2, [sp, #8]
 800ca00:	18a3      	adds	r3, r4, r2
 800ca02:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1ee      	bne.n	800c9e8 <_lv_disp_refr_timer+0x2cc>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800ca0a:	9b06      	ldr	r3, [sp, #24]
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	f43f af4c 	beq.w	800c8aa <_lv_disp_refr_timer+0x18e>
            disp_refr->driver->draw_buf->last_part = 0;
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	68da      	ldr	r2, [r3, #12]
 800ca16:	7e13      	ldrb	r3, [r2, #24]
 800ca18:	f36f 0341 	bfc	r3, #1, #1
 800ca1c:	7613      	strb	r3, [r2, #24]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	602b      	str	r3, [r5, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	7c1b      	ldrb	r3, [r3, #16]
 800ca2c:	f013 0f03 	tst.w	r3, #3
 800ca30:	f47f af42 	bne.w	800c8b8 <_lv_disp_refr_timer+0x19c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ca34:	9b02      	ldr	r3, [sp, #8]
 800ca36:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 800ca3a:	8eb7      	ldrh	r7, [r6, #52]	; 0x34
 800ca3c:	3701      	adds	r7, #1
 800ca3e:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800ca40:	1aff      	subs	r7, r7, r3
 800ca42:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ca44:	f9b6 9036 	ldrsh.w	r9, [r6, #54]	; 0x36
 800ca48:	f109 0801 	add.w	r8, r9, #1
 800ca4c:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800ca4e:	eba8 0803 	sub.w	r8, r8, r3
 800ca52:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800ca56:	4620      	mov	r0, r4
 800ca58:	f013 fcc2 	bl	80203e0 <lv_disp_get_ver_res>
 800ca5c:	4581      	cmp	r9, r0
 800ca5e:	f6bf af60 	bge.w	800c922 <_lv_disp_refr_timer+0x206>
 800ca62:	f9b6 4036 	ldrsh.w	r4, [r6, #54]	; 0x36
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800ca66:	f8da 3000 	ldr.w	r3, [sl]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	68d3      	ldr	r3, [r2, #12]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	fbb3 f7f7 	udiv	r7, r3, r7
    if(max_row > area_h) max_row = area_h;
 800ca74:	45b8      	cmp	r8, r7
 800ca76:	bfa8      	it	ge
 800ca78:	46b8      	movge	r8, r7
    if(disp_refr->driver->rounder_cb) {
 800ca7a:	6993      	ldr	r3, [r2, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f43f af5d 	beq.w	800c93c <_lv_disp_refr_timer+0x220>
        tmp.x1 = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        tmp.x2 = 0;
 800ca88:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        tmp.y1 = 0;
 800ca8c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_coord_t h_tmp = max_row;
 800ca90:	fa0f f988 	sxth.w	r9, r8
            tmp.y2 = h_tmp - 1;
 800ca94:	464f      	mov	r7, r9
 800ca96:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ca9a:	fa0f f989 	sxth.w	r9, r9
 800ca9e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800caa2:	f8da 3000 	ldr.w	r3, [sl]
 800caa6:	6818      	ldr	r0, [r3, #0]
 800caa8:	6983      	ldr	r3, [r0, #24]
 800caaa:	4659      	mov	r1, fp
 800caac:	4798      	blx	r3
 800caae:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800cab2:	1c53      	adds	r3, r2, #1
 800cab4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800cab8:	1a5b      	subs	r3, r3, r1
            if(lv_area_get_height(&tmp) <= max_row) break;
 800caba:	b21b      	sxth	r3, r3
 800cabc:	4598      	cmp	r8, r3
 800cabe:	f6bf af37 	bge.w	800c930 <_lv_disp_refr_timer+0x214>
        } while(h_tmp > 0);
 800cac2:	f1b9 0f00 	cmp.w	r9, #0
 800cac6:	dce5      	bgt.n	800ca94 <_lv_disp_refr_timer+0x378>
            return 0;
 800cac8:	f04f 0800 	mov.w	r8, #0
 800cacc:	e736      	b.n	800c93c <_lv_disp_refr_timer+0x220>
        sub_area.x1 = area_p->x1;
 800cace:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800cad0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        sub_area.x2 = area_p->x2;
 800cad4:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 800cad6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sub_area.y1 = row;
 800cada:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
        sub_area.y2 = y2;
 800cade:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
        draw_ctx->buf_area = &sub_area;
 800cae2:	f8c5 b004 	str.w	fp, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 800cae6:	f8c5 b008 	str.w	fp, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800caea:	f8da 3000 	ldr.w	r3, [sl]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	68d2      	ldr	r2, [r2, #12]
 800caf2:	6892      	ldr	r2, [r2, #8]
 800caf4:	602a      	str	r2, [r5, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	7e13      	ldrb	r3, [r2, #24]
 800cafc:	f043 0302 	orr.w	r3, r3, #2
 800cb00:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800cb02:	4628      	mov	r0, r5
 800cb04:	f7ff fa50 	bl	800bfa8 <refr_area_part>
 800cb08:	e762      	b.n	800c9d0 <_lv_disp_refr_timer+0x2b4>
    disp_refr->rendering_in_progress = false;
 800cb0a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cb0e:	f36f 0382 	bfc	r3, #2, #1
 800cb12:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(disp_refr->inv_p != 0) {
 800cb16:	4b62      	ldr	r3, [pc, #392]	; (800cca0 <_lv_disp_refr_timer+0x584>)
 800cb18:	6818      	ldr	r0, [r3, #0]
 800cb1a:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 800cb1e:	bb03      	cbnz	r3, 800cb62 <_lv_disp_refr_timer+0x446>
    lv_mem_buf_free_all();
 800cb20:	f014 ff6e 	bl	8021a00 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800cb24:	f013 fb62 	bl	80201ec <_lv_font_clean_up_fmt_txt>
    _lv_draw_mask_cleanup();
 800cb28:	f001 ff5a 	bl	800e9e0 <_lv_draw_mask_cleanup>
    lv_obj_t * perf_label = perf_monitor.perf_label;
 800cb2c:	4b5d      	ldr	r3, [pc, #372]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cb2e:	695c      	ldr	r4, [r3, #20]
    if(perf_label == NULL) {
 800cb30:	2c00      	cmp	r4, #0
 800cb32:	d034      	beq.n	800cb9e <_lv_disp_refr_timer+0x482>
    if(lv_tick_elaps(perf_monitor.perf_last_time) < 300) {
 800cb34:	4b5b      	ldr	r3, [pc, #364]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cb36:	6818      	ldr	r0, [r3, #0]
 800cb38:	f013 fcfb 	bl	8020532 <lv_tick_elaps>
 800cb3c:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 800cb40:	d26a      	bcs.n	800cc18 <_lv_disp_refr_timer+0x4fc>
        if(px_num > 5000) {
 800cb42:	4b56      	ldr	r3, [pc, #344]	; (800cc9c <_lv_disp_refr_timer+0x580>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	f67f ae1b 	bls.w	800c786 <_lv_disp_refr_timer+0x6a>
            perf_monitor.elaps_sum += elaps;
 800cb50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb52:	4b54      	ldr	r3, [pc, #336]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	440a      	add	r2, r1
 800cb58:	605a      	str	r2, [r3, #4]
            perf_monitor.frame_cnt ++;
 800cb5a:	689a      	ldr	r2, [r3, #8]
 800cb5c:	3201      	adds	r2, #1
 800cb5e:	609a      	str	r2, [r3, #8]
 800cb60:	e611      	b.n	800c786 <_lv_disp_refr_timer+0x6a>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800cb62:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb66:	3030      	adds	r0, #48	; 0x30
 800cb68:	f015 f8fe 	bl	8021d68 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800cb6c:	4c4c      	ldr	r4, [pc, #304]	; (800cca0 <_lv_disp_refr_timer+0x584>)
 800cb6e:	6820      	ldr	r0, [r4, #0]
 800cb70:	2120      	movs	r1, #32
 800cb72:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800cb76:	f015 f8f7 	bl	8021d68 <lv_memset_00>
        disp_refr->inv_p = 0;
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 800cb82:	9807      	ldr	r0, [sp, #28]
 800cb84:	f013 fcd5 	bl	8020532 <lv_tick_elaps>
 800cb88:	900b      	str	r0, [sp, #44]	; 0x2c
        if(disp_refr->driver->monitor_cb) {
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0c5      	beq.n	800cb20 <_lv_disp_refr_timer+0x404>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800cb94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb96:	4a41      	ldr	r2, [pc, #260]	; (800cc9c <_lv_disp_refr_timer+0x580>)
 800cb98:	6812      	ldr	r2, [r2, #0]
 800cb9a:	4798      	blx	r3
 800cb9c:	e7c0      	b.n	800cb20 <_lv_disp_refr_timer+0x404>
 * Get the active screen of the default display
 * @return  pointer to the sys layer
 */
static inline lv_obj_t * lv_layer_sys(void)
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
 800cb9e:	f013 fc05 	bl	80203ac <lv_disp_get_default>
 800cba2:	f7f6 ff7c 	bl	8003a9e <lv_disp_get_layer_sys>
        perf_label = lv_label_create(lv_layer_sys());
 800cba6:	f01b f9c1 	bl	8027f2c <lv_label_create>
 800cbaa:	4604      	mov	r4, r0
        lv_obj_set_style_bg_opa(perf_label, LV_OPA_50, 0);
 800cbac:	2200      	movs	r2, #0
 800cbae:	217f      	movs	r1, #127	; 0x7f
 800cbb0:	f7fe fd03 	bl	800b5ba <lv_obj_set_style_bg_opa>
        lv_obj_set_style_bg_color(perf_label, lv_color_black(), 0);
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f04f 0100 	mov.w	r1, #0
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7fe fceb 	bl	800b596 <lv_obj_set_style_bg_color>
        lv_obj_set_style_text_color(perf_label, lv_color_white(), 0);
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7fe fcfe 	bl	800b5c8 <lv_obj_set_style_text_color>
        lv_obj_set_style_pad_top(perf_label, 3, 0);
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2103      	movs	r1, #3
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f7fe fcc4 	bl	800b55e <lv_obj_set_style_pad_top>
        lv_obj_set_style_pad_bottom(perf_label, 3, 0);
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2103      	movs	r1, #3
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f7fe fcc6 	bl	800b56c <lv_obj_set_style_pad_bottom>
        lv_obj_set_style_pad_left(perf_label, 3, 0);
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2103      	movs	r1, #3
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f7fe fcc8 	bl	800b57a <lv_obj_set_style_pad_left>
        lv_obj_set_style_pad_right(perf_label, 3, 0);
 800cbea:	2200      	movs	r2, #0
 800cbec:	2103      	movs	r1, #3
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7fe fcca 	bl	800b588 <lv_obj_set_style_pad_right>
        lv_obj_set_style_text_align(perf_label, LV_TEXT_ALIGN_RIGHT, 0);
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	2103      	movs	r1, #3
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f7fe fcf7 	bl	800b5ec <lv_obj_set_style_text_align>
        lv_label_set_text(perf_label, "?");
 800cbfe:	492a      	ldr	r1, [pc, #168]	; (800cca8 <_lv_disp_refr_timer+0x58c>)
 800cc00:	4620      	mov	r0, r4
 800cc02:	f01b fe6f 	bl	80288e4 <lv_label_set_text>
        lv_obj_align(perf_label, LV_USE_PERF_MONITOR_POS, 0, 0);
 800cc06:	2300      	movs	r3, #0
 800cc08:	461a      	mov	r2, r3
 800cc0a:	2106      	movs	r1, #6
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f7fa ff01 	bl	8007a14 <lv_obj_align>
        perf_monitor.perf_label = perf_label;
 800cc12:	4b24      	ldr	r3, [pc, #144]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cc14:	615c      	str	r4, [r3, #20]
 800cc16:	e78d      	b.n	800cb34 <_lv_disp_refr_timer+0x418>
        perf_monitor.perf_last_time = lv_tick_get();
 800cc18:	f013 fc87 	bl	802052a <lv_tick_get>
 800cc1c:	4b21      	ldr	r3, [pc, #132]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cc1e:	6018      	str	r0, [r3, #0]
        if(disp_refr->refr_timer) {
 800cc20:	4b1f      	ldr	r3, [pc, #124]	; (800cca0 <_lv_disp_refr_timer+0x584>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	b363      	cbz	r3, 800cc82 <_lv_disp_refr_timer+0x566>
            fps_limit = 1000 / disp_refr->refr_timer->period;
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800cc2e:	fbb5 f5f3 	udiv	r5, r5, r3
        if(perf_monitor.elaps_sum == 0) {
 800cc32:	4b1c      	ldr	r3, [pc, #112]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	b913      	cbnz	r3, 800cc3e <_lv_disp_refr_timer+0x522>
            perf_monitor.elaps_sum = 1;
 800cc38:	4b1a      	ldr	r3, [pc, #104]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	605a      	str	r2, [r3, #4]
        if(perf_monitor.frame_cnt == 0) {
 800cc3e:	4b19      	ldr	r3, [pc, #100]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	b303      	cbz	r3, 800cc86 <_lv_disp_refr_timer+0x56a>
            fps = (1000 * perf_monitor.frame_cnt) / perf_monitor.elaps_sum;
 800cc44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc48:	fb02 f303 	mul.w	r3, r2, r3
 800cc4c:	4a15      	ldr	r2, [pc, #84]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cc4e:	6852      	ldr	r2, [r2, #4]
 800cc50:	fbb3 f2f2 	udiv	r2, r3, r2
        perf_monitor.elaps_sum = 0;
 800cc54:	4b13      	ldr	r3, [pc, #76]	; (800cca4 <_lv_disp_refr_timer+0x588>)
 800cc56:	2100      	movs	r1, #0
 800cc58:	6059      	str	r1, [r3, #4]
        perf_monitor.frame_cnt = 0;
 800cc5a:	6099      	str	r1, [r3, #8]
        if(fps > fps_limit) {
 800cc5c:	4295      	cmp	r5, r2
 800cc5e:	bf28      	it	cs
 800cc60:	4615      	movcs	r5, r2
        perf_monitor.fps_sum_all += fps;
 800cc62:	691a      	ldr	r2, [r3, #16]
 800cc64:	442a      	add	r2, r5
 800cc66:	611a      	str	r2, [r3, #16]
        perf_monitor.fps_sum_cnt ++;
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	3201      	adds	r2, #1
 800cc6c:	60da      	str	r2, [r3, #12]
        uint32_t cpu = 100 - lv_timer_get_idle();
 800cc6e:	f016 facd 	bl	802320c <lv_timer_get_idle>
        lv_label_set_text_fmt(perf_label, "%"LV_PRIu32" FPS\n%"LV_PRIu32"%% CPU", fps, cpu);
 800cc72:	f1c0 0364 	rsb	r3, r0, #100	; 0x64
 800cc76:	462a      	mov	r2, r5
 800cc78:	490c      	ldr	r1, [pc, #48]	; (800ccac <_lv_disp_refr_timer+0x590>)
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f01b fe6d 	bl	802895a <lv_label_set_text_fmt>
    REFR_TRACE("finished");
 800cc80:	e581      	b.n	800c786 <_lv_disp_refr_timer+0x6a>
            fps_limit = 1000 / LV_DISP_DEF_REFR_PERIOD;
 800cc82:	2519      	movs	r5, #25
 800cc84:	e7d5      	b.n	800cc32 <_lv_disp_refr_timer+0x516>
            fps = fps_limit;
 800cc86:	462a      	mov	r2, r5
 800cc88:	e7e4      	b.n	800cc54 <_lv_disp_refr_timer+0x538>
    px_num = 0;
 800cc8a:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <_lv_disp_refr_timer+0x580>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p != 0) {
 800cc90:	e746      	b.n	800cb20 <_lv_disp_refr_timer+0x404>
    px_num = 0;
 800cc92:	4b02      	ldr	r3, [pc, #8]	; (800cc9c <_lv_disp_refr_timer+0x580>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
 800cc98:	e73d      	b.n	800cb16 <_lv_disp_refr_timer+0x3fa>
 800cc9a:	bf00      	nop
 800cc9c:	20002564 	.word	0x20002564
 800cca0:	20002548 	.word	0x20002548
 800cca4:	2000254c 	.word	0x2000254c
 800cca8:	0802cf90 	.word	0x0802cf90
 800ccac:	0802cf94 	.word	0x0802cf94

0800ccb0 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 800ccb6:	6840      	ldr	r0, [r0, #4]
 800ccb8:	b108      	cbz	r0, 800ccbe <apply_theme+0xe>
 800ccba:	f7ff fff9 	bl	800ccb0 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	b113      	cbz	r3, 800ccc8 <apply_theme+0x18>
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	4798      	blx	r3
}
 800ccc8:	bd38      	pop	{r3, r4, r5, pc}

0800ccca <lv_theme_get_from_obj>:
{
 800ccca:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800cccc:	b120      	cbz	r0, 800ccd8 <lv_theme_get_from_obj+0xe>
 800ccce:	f7fe fca9 	bl	800b624 <lv_obj_get_disp>
    return lv_disp_get_theme(disp);
 800ccd2:	f7f6 feef 	bl	8003ab4 <lv_disp_get_theme>
}
 800ccd6:	bd08      	pop	{r3, pc}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800ccd8:	f013 fb68 	bl	80203ac <lv_disp_get_default>
 800ccdc:	e7f9      	b.n	800ccd2 <lv_theme_get_from_obj+0x8>
	...

0800cce0 <lv_theme_apply>:
{
 800cce0:	b538      	push	{r3, r4, r5, lr}
 800cce2:	4604      	mov	r4, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800cce4:	f7ff fff1 	bl	800ccca <lv_theme_get_from_obj>
    if(th == NULL) return;
 800cce8:	b148      	cbz	r0, 800ccfe <lv_theme_apply+0x1e>
 800ccea:	4605      	mov	r5, r0
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800ccec:	4a04      	ldr	r2, [pc, #16]	; (800cd00 <lv_theme_apply+0x20>)
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f7fe f86f 	bl	800add4 <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f7ff ffd9 	bl	800ccb0 <apply_theme>
}
 800ccfe:	bd38      	pop	{r3, r4, r5, pc}
 800cd00:	000fffff 	.word	0x000fffff

0800cd04 <lv_theme_get_color_primary>:
{
 800cd04:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800cd06:	f7ff ffe0 	bl	800ccca <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 800cd0a:	b108      	cbz	r0, 800cd10 <lv_theme_get_color_primary+0xc>
 800cd0c:	8a00      	ldrh	r0, [r0, #16]
}
 800cd0e:	bd08      	pop	{r3, pc}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 800cd10:	2011      	movs	r0, #17
 800cd12:	f014 f9ed 	bl	80210f0 <lv_palette_main>
 800cd16:	e7fa      	b.n	800cd0e <lv_theme_get_color_primary+0xa>

0800cd18 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 800cd18:	4770      	bx	lr

0800cd1a <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 800cd1a:	b508      	push	{r3, lr}
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800cd1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd1e:	b103      	cbz	r3, 800cd22 <lv_draw_wait_for_finish+0x8>
 800cd20:	4798      	blx	r3
}
 800cd22:	bd08      	pop	{r3, pc}

0800cd24 <lv_draw_arc_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_arc_dsc_init(lv_draw_arc_dsc_t * dsc)
{
 800cd24:	b510      	push	{r4, lr}
 800cd26:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 800cd28:	2110      	movs	r1, #16
 800cd2a:	f015 f81d 	bl	8021d68 <lv_memset_00>
    dsc->width = 1;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 800cd32:	23ff      	movs	r3, #255	; 0xff
 800cd34:	7323      	strb	r3, [r4, #12]
    dsc->color = lv_color_black();
 800cd36:	7823      	ldrb	r3, [r4, #0]
 800cd38:	f36f 0304 	bfc	r3, #0, #5
 800cd3c:	7023      	strb	r3, [r4, #0]
 800cd3e:	8823      	ldrh	r3, [r4, #0]
 800cd40:	f36f 134a 	bfc	r3, #5, #6
 800cd44:	8023      	strh	r3, [r4, #0]
 800cd46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800cd4a:	f36f 03c7 	bfc	r3, #3, #5
 800cd4e:	7063      	strb	r3, [r4, #1]
}
 800cd50:	bd10      	pop	{r4, pc}

0800cd52 <lv_draw_arc>:

void lv_draw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                 uint16_t start_angle, uint16_t end_angle)
{
 800cd52:	b570      	push	{r4, r5, r6, lr}
 800cd54:	b082      	sub	sp, #8
 800cd56:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800cd5a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    if(dsc->opa <= LV_OPA_MIN) return;
 800cd5e:	f891 c00c 	ldrb.w	ip, [r1, #12]
 800cd62:	f1bc 0f02 	cmp.w	ip, #2
 800cd66:	d908      	bls.n	800cd7a <lv_draw_arc+0x28>
    if(dsc->width == 0) return;
 800cd68:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800cd6c:	b12e      	cbz	r6, 800cd7a <lv_draw_arc+0x28>
    if(start_angle == end_angle) return;
 800cd6e:	42ac      	cmp	r4, r5
 800cd70:	d003      	beq.n	800cd7a <lv_draw_arc+0x28>

    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 800cd72:	9501      	str	r5, [sp, #4]
 800cd74:	9400      	str	r4, [sp, #0]
 800cd76:	6944      	ldr	r4, [r0, #20]
 800cd78:	47a0      	blx	r4

    //    const lv_draw_backend_t * backend = lv_draw_backend_get();
    //    backend->draw_arc(center_x, center_y, radius, start_angle, end_angle, clip_area, dsc);
}
 800cd7a:	b002      	add	sp, #8
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd80 <lv_draw_arc_get_area>:

void lv_draw_arc_get_area(lv_coord_t x, lv_coord_t y, uint16_t radius,  uint16_t start_angle, uint16_t end_angle,
                          lv_coord_t w, bool rounded, lv_area_t * area)
{
 800cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	b085      	sub	sp, #20
 800cd86:	4683      	mov	fp, r0
 800cd88:	9100      	str	r1, [sp, #0]
 800cd8a:	4616      	mov	r6, r2
 800cd8c:	461c      	mov	r4, r3
 800cd8e:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 800cd92:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 800cd96:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800cd9a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    lv_coord_t rout = radius;

    /*Special case: full arc invalidation */
    if(end_angle == start_angle + 360) {
 800cd9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cda0:	459a      	cmp	sl, r3
 800cda2:	d044      	beq.n	800ce2e <lv_draw_arc_get_area+0xae>
 800cda4:	fa0f f986 	sxth.w	r9, r6
        area->x2 = x + rout;
        area->y2 = y + rout;
        return;
    }

    if(start_angle > 360) start_angle -= 360;
 800cda8:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800cdac:	bf84      	itt	hi
 800cdae:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 800cdb2:	b2a4      	uxthhi	r4, r4
    if(end_angle > 360) end_angle -= 360;
 800cdb4:	f5ba 7fb4 	cmp.w	sl, #360	; 0x168
 800cdb8:	bf84      	itt	hi
 800cdba:	f5aa 7ab4 	subhi.w	sl, sl, #360	; 0x168
 800cdbe:	fa1f fa8a 	uxthhi.w	sl, sl

    lv_coord_t rin = radius - w;
 800cdc2:	eba6 0805 	sub.w	r8, r6, r5
 800cdc6:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	d03e      	beq.n	800ce4c <lv_draw_arc_get_area+0xcc>
 800cdce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdd2:	106d      	asrs	r5, r5, #1
 800cdd4:	3501      	adds	r5, #1
 800cdd6:	b22d      	sxth	r5, r5
    uint8_t start_quarter = start_angle / 90;
 800cdd8:	0862      	lsrs	r2, r4, #1
 800cdda:	49c6      	ldr	r1, [pc, #792]	; (800d0f4 <lv_draw_arc_get_area+0x374>)
 800cddc:	fba1 3202 	umull	r3, r2, r1, r2
 800cde0:	f3c2 1247 	ubfx	r2, r2, #5, #8
    uint8_t end_quarter = end_angle / 90;
 800cde4:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800cde8:	fba1 1303 	umull	r1, r3, r1, r3
 800cdec:	f3c3 1347 	ubfx	r3, r3, #5, #8

    /*360 deg still counts as quarter 3 (360 / 90 would be 4)*/
    if(start_quarter == 4) start_quarter = 3;
 800cdf0:	2a04      	cmp	r2, #4
 800cdf2:	f000 81c1 	beq.w	800d178 <lv_draw_arc_get_area+0x3f8>
    if(end_quarter == 4) end_quarter = 3;
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	bf08      	it	eq
 800cdfa:	2303      	moveq	r3, #3

    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d028      	beq.n	800ce52 <lv_draw_arc_get_area+0xd2>

            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
        }
    }
    else if(start_quarter == 0 && end_quarter == 1) {
 800ce00:	2a00      	cmp	r2, #0
 800ce02:	f040 8133 	bne.w	800d06c <lv_draw_arc_get_area+0x2ec>
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	f000 80f4 	beq.w	800cff4 <lv_draw_arc_get_area+0x274>
        area->x2 = x + rout + extra_area;
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;

    }
    else {
        area->x1 = x - rout;
 800ce0c:	fa1f fb8b 	uxth.w	fp, fp
 800ce10:	ebab 0306 	sub.w	r3, fp, r6
 800ce14:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 800ce16:	f8bd 1000 	ldrh.w	r1, [sp]
 800ce1a:	1b8b      	subs	r3, r1, r6
 800ce1c:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout;
 800ce1e:	44b3      	add	fp, r6
 800ce20:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + rout;
 800ce24:	440e      	add	r6, r1
 800ce26:	80fe      	strh	r6, [r7, #6]
    }
}
 800ce28:	b005      	add	sp, #20
 800ce2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        area->x1 = x - rout;
 800ce2e:	fa1f fb80 	uxth.w	fp, r0
 800ce32:	ebab 0306 	sub.w	r3, fp, r6
 800ce36:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 800ce38:	f8bd 1000 	ldrh.w	r1, [sp]
 800ce3c:	1b8b      	subs	r3, r1, r6
 800ce3e:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout;
 800ce40:	44b3      	add	fp, r6
 800ce42:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + rout;
 800ce46:	440e      	add	r6, r1
 800ce48:	80fe      	strh	r6, [r7, #6]
        return;
 800ce4a:	e7ed      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 800ce4c:	2500      	movs	r5, #0
 800ce4e:	e7c3      	b.n	800cdd8 <lv_draw_arc_get_area+0x58>
    if(start_quarter == 4) start_quarter = 3;
 800ce50:	461a      	mov	r2, r3
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800ce52:	4554      	cmp	r4, sl
 800ce54:	f200 80cc 	bhi.w	800cff0 <lv_draw_arc_get_area+0x270>
        if(start_quarter == 0) {
 800ce58:	b3ba      	cbz	r2, 800ceca <lv_draw_arc_get_area+0x14a>
        else if(start_quarter == 1) {
 800ce5a:	2a01      	cmp	r2, #1
 800ce5c:	d066      	beq.n	800cf2c <lv_draw_arc_get_area+0x1ac>
        else if(start_quarter == 2) {
 800ce5e:	2a02      	cmp	r2, #2
 800ce60:	f000 8095 	beq.w	800cf8e <lv_draw_arc_get_area+0x20e>
        else if(start_quarter == 3) {
 800ce64:	2a03      	cmp	r2, #3
 800ce66:	d1df      	bne.n	800ce28 <lv_draw_arc_get_area+0xa8>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800ce68:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800ce6c:	b200      	sxth	r0, r0
 800ce6e:	f014 fbef 	bl	8021650 <lv_trigo_sin>
 800ce72:	fa1f fb8b 	uxth.w	fp, fp
 800ce76:	b2ad      	uxth	r5, r5
 800ce78:	fb08 f200 	mul.w	r2, r8, r0
 800ce7c:	ebab 0305 	sub.w	r3, fp, r5
 800ce80:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800ce84:	803b      	strh	r3, [r7, #0]
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800ce86:	b220      	sxth	r0, r4
 800ce88:	f014 fbe2 	bl	8021650 <lv_trigo_sin>
 800ce8c:	f8bd 6000 	ldrh.w	r6, [sp]
 800ce90:	fb09 f200 	mul.w	r2, r9, r0
 800ce94:	1b73      	subs	r3, r6, r5
 800ce96:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800ce9a:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800ce9c:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800cea0:	b200      	sxth	r0, r0
 800cea2:	f014 fbd5 	bl	8021650 <lv_trigo_sin>
 800cea6:	fb09 f900 	mul.w	r9, r9, r0
 800ceaa:	eb0b 0305 	add.w	r3, fp, r5
 800ceae:	eb03 33e9 	add.w	r3, r3, r9, asr #15
 800ceb2:	80bb      	strh	r3, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800ceb4:	fa0f f08a 	sxth.w	r0, sl
 800ceb8:	f014 fbca 	bl	8021650 <lv_trigo_sin>
 800cebc:	fb08 f300 	mul.w	r3, r8, r0
 800cec0:	4435      	add	r5, r6
 800cec2:	eb05 33e3 	add.w	r3, r5, r3, asr #15
 800cec6:	80fb      	strh	r3, [r7, #6]
 800cec8:	e7ae      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800ceca:	b220      	sxth	r0, r4
 800cecc:	f014 fbc0 	bl	8021650 <lv_trigo_sin>
 800ced0:	f8bd 6000 	ldrh.w	r6, [sp]
 800ced4:	b2ad      	uxth	r5, r5
 800ced6:	fb08 f000 	mul.w	r0, r8, r0
 800ceda:	1b73      	subs	r3, r6, r5
 800cedc:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800cee0:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800cee2:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800cee6:	b200      	sxth	r0, r0
 800cee8:	f014 fbb2 	bl	8021650 <lv_trigo_sin>
 800ceec:	fa1f fb8b 	uxth.w	fp, fp
 800cef0:	fb09 f000 	mul.w	r0, r9, r0
 800cef4:	eb05 030b 	add.w	r3, r5, fp
 800cef8:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800cefc:	80bb      	strh	r3, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800cefe:	fa0f f08a 	sxth.w	r0, sl
 800cf02:	f014 fba5 	bl	8021650 <lv_trigo_sin>
 800cf06:	fb09 f900 	mul.w	r9, r9, r0
 800cf0a:	442e      	add	r6, r5
 800cf0c:	eb06 36e9 	add.w	r6, r6, r9, asr #15
 800cf10:	80fe      	strh	r6, [r7, #6]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800cf12:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800cf16:	b200      	sxth	r0, r0
 800cf18:	f014 fb9a 	bl	8021650 <lv_trigo_sin>
 800cf1c:	fb08 f800 	mul.w	r8, r8, r0
 800cf20:	ebab 0505 	sub.w	r5, fp, r5
 800cf24:	eb05 35e8 	add.w	r5, r5, r8, asr #15
 800cf28:	803d      	strh	r5, [r7, #0]
 800cf2a:	e77d      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800cf2c:	b220      	sxth	r0, r4
 800cf2e:	f014 fb8f 	bl	8021650 <lv_trigo_sin>
 800cf32:	f8bd 6000 	ldrh.w	r6, [sp]
 800cf36:	b2ad      	uxth	r5, r5
 800cf38:	fb09 f000 	mul.w	r0, r9, r0
 800cf3c:	1973      	adds	r3, r6, r5
 800cf3e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800cf42:	80fb      	strh	r3, [r7, #6]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800cf44:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800cf48:	b200      	sxth	r0, r0
 800cf4a:	f014 fb81 	bl	8021650 <lv_trigo_sin>
 800cf4e:	fa1f fb8b 	uxth.w	fp, fp
 800cf52:	fb08 f000 	mul.w	r0, r8, r0
 800cf56:	eb05 030b 	add.w	r3, r5, fp
 800cf5a:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800cf5e:	80bb      	strh	r3, [r7, #4]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800cf60:	fa0f f08a 	sxth.w	r0, sl
 800cf64:	f014 fb74 	bl	8021650 <lv_trigo_sin>
 800cf68:	fb08 f800 	mul.w	r8, r8, r0
 800cf6c:	1b76      	subs	r6, r6, r5
 800cf6e:	eb06 36e8 	add.w	r6, r6, r8, asr #15
 800cf72:	807e      	strh	r6, [r7, #2]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800cf74:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800cf78:	b200      	sxth	r0, r0
 800cf7a:	f014 fb69 	bl	8021650 <lv_trigo_sin>
 800cf7e:	fb09 f900 	mul.w	r9, r9, r0
 800cf82:	ebab 0505 	sub.w	r5, fp, r5
 800cf86:	eb05 35e9 	add.w	r5, r5, r9, asr #15
 800cf8a:	803d      	strh	r5, [r7, #0]
 800cf8c:	e74c      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800cf8e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800cf92:	b200      	sxth	r0, r0
 800cf94:	f014 fb5c 	bl	8021650 <lv_trigo_sin>
 800cf98:	fa1f fb8b 	uxth.w	fp, fp
 800cf9c:	b2ad      	uxth	r5, r5
 800cf9e:	fb09 f200 	mul.w	r2, r9, r0
 800cfa2:	ebab 0305 	sub.w	r3, fp, r5
 800cfa6:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800cfaa:	803b      	strh	r3, [r7, #0]
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800cfac:	b220      	sxth	r0, r4
 800cfae:	f014 fb4f 	bl	8021650 <lv_trigo_sin>
 800cfb2:	f8bd 6000 	ldrh.w	r6, [sp]
 800cfb6:	fb08 f200 	mul.w	r2, r8, r0
 800cfba:	19ab      	adds	r3, r5, r6
 800cfbc:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800cfc0:	80fb      	strh	r3, [r7, #6]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800cfc2:	fa0f f08a 	sxth.w	r0, sl
 800cfc6:	f014 fb43 	bl	8021650 <lv_trigo_sin>
 800cfca:	fb09 f900 	mul.w	r9, r9, r0
 800cfce:	1b73      	subs	r3, r6, r5
 800cfd0:	eb03 33e9 	add.w	r3, r3, r9, asr #15
 800cfd4:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800cfd6:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800cfda:	b200      	sxth	r0, r0
 800cfdc:	f014 fb38 	bl	8021650 <lv_trigo_sin>
 800cfe0:	fb08 f800 	mul.w	r8, r8, r0
 800cfe4:	eb0b 0305 	add.w	r3, fp, r5
 800cfe8:	eb03 33e8 	add.w	r3, r3, r8, asr #15
 800cfec:	80bb      	strh	r3, [r7, #4]
 800cfee:	e71b      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
 800cff0:	4613      	mov	r3, r2
 800cff2:	e705      	b.n	800ce00 <lv_draw_arc_get_area+0x80>
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800cff4:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800cff8:	b200      	sxth	r0, r0
 800cffa:	f014 fb29 	bl	8021650 <lv_trigo_sin>
 800cffe:	fa1f fb8b 	uxth.w	fp, fp
 800d002:	b2ad      	uxth	r5, r5
 800d004:	fb09 f300 	mul.w	r3, r9, r0
 800d008:	ebab 0005 	sub.w	r0, fp, r5
 800d00c:	eb00 30e3 	add.w	r0, r0, r3, asr #15
 800d010:	8038      	strh	r0, [r7, #0]
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800d012:	fa0f fa8a 	sxth.w	sl, sl
 800d016:	4650      	mov	r0, sl
 800d018:	f014 fb1a 	bl	8021650 <lv_trigo_sin>
 800d01c:	9001      	str	r0, [sp, #4]
 800d01e:	b223      	sxth	r3, r4
 800d020:	9302      	str	r3, [sp, #8]
 800d022:	4618      	mov	r0, r3
 800d024:	f014 fb14 	bl	8021650 <lv_trigo_sin>
 800d028:	9b01      	ldr	r3, [sp, #4]
 800d02a:	4283      	cmp	r3, r0
 800d02c:	bfb4      	ite	lt
 800d02e:	4650      	movlt	r0, sl
 800d030:	9802      	ldrge	r0, [sp, #8]
 800d032:	f014 fb0d 	bl	8021650 <lv_trigo_sin>
 800d036:	f8bd a000 	ldrh.w	sl, [sp]
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d03a:	fb00 f808 	mul.w	r8, r0, r8
 800d03e:	ebaa 0305 	sub.w	r3, sl, r5
 800d042:	eb03 38e8 	add.w	r8, r3, r8, asr #15
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800d046:	f8a7 8002 	strh.w	r8, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d04a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d04e:	b200      	sxth	r0, r0
 800d050:	f014 fafe 	bl	8021650 <lv_trigo_sin>
 800d054:	fb09 f000 	mul.w	r0, r9, r0
 800d058:	eb0b 0905 	add.w	r9, fp, r5
 800d05c:	eb09 39e0 	add.w	r9, r9, r0, asr #15
 800d060:	f8a7 9004 	strh.w	r9, [r7, #4]
        area->y2 = y + rout + extra_area;
 800d064:	4456      	add	r6, sl
 800d066:	4435      	add	r5, r6
 800d068:	80fd      	strh	r5, [r7, #6]
 800d06a:	e6dd      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
    else if(start_quarter == 1 && end_quarter == 2) {
 800d06c:	2a01      	cmp	r2, #1
 800d06e:	d043      	beq.n	800d0f8 <lv_draw_arc_get_area+0x378>
    else if(start_quarter == 2 && end_quarter == 3) {
 800d070:	2a02      	cmp	r2, #2
 800d072:	d17e      	bne.n	800d172 <lv_draw_arc_get_area+0x3f2>
 800d074:	2b03      	cmp	r3, #3
 800d076:	f47f aec9 	bne.w	800ce0c <lv_draw_arc_get_area+0x8c>
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d07a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d07e:	b200      	sxth	r0, r0
 800d080:	f014 fae6 	bl	8021650 <lv_trigo_sin>
 800d084:	fa1f fb8b 	uxth.w	fp, fp
 800d088:	b2ad      	uxth	r5, r5
 800d08a:	fb09 f000 	mul.w	r0, r9, r0
 800d08e:	ebab 0305 	sub.w	r3, fp, r5
 800d092:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d096:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout - extra_area;
 800d098:	f8bd 3000 	ldrh.w	r3, [sp]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	1b9e      	subs	r6, r3, r6
 800d0a0:	1b76      	subs	r6, r6, r5
 800d0a2:	807e      	strh	r6, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d0a4:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800d0a8:	b200      	sxth	r0, r0
 800d0aa:	f014 fad1 	bl	8021650 <lv_trigo_sin>
 800d0ae:	fb09 f900 	mul.w	r9, r9, r0
 800d0b2:	44ab      	add	fp, r5
 800d0b4:	eb0b 39e9 	add.w	r9, fp, r9, asr #15
 800d0b8:	f8a7 9004 	strh.w	r9, [r7, #4]
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 800d0bc:	fa0f fa8a 	sxth.w	sl, sl
 800d0c0:	4650      	mov	r0, sl
 800d0c2:	f014 fac5 	bl	8021650 <lv_trigo_sin>
 800d0c6:	fb08 f600 	mul.w	r6, r8, r0
 800d0ca:	b224      	sxth	r4, r4
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f014 fabf 	bl	8021650 <lv_trigo_sin>
 800d0d2:	fb08 f000 	mul.w	r0, r8, r0
 800d0d6:	4286      	cmp	r6, r0
 800d0d8:	bfcc      	ite	gt
 800d0da:	4650      	movgt	r0, sl
 800d0dc:	4620      	movle	r0, r4
 800d0de:	f014 fab7 	bl	8021650 <lv_trigo_sin>
 800d0e2:	fb08 f800 	mul.w	r8, r8, r0
 800d0e6:	f3c8 38cf 	ubfx	r8, r8, #15, #16
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d0ea:	9b00      	ldr	r3, [sp, #0]
 800d0ec:	441d      	add	r5, r3
 800d0ee:	4445      	add	r5, r8
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 800d0f0:	80fd      	strh	r5, [r7, #6]
 800d0f2:	e699      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
 800d0f4:	b60b60b7 	.word	0xb60b60b7
    else if(start_quarter == 1 && end_quarter == 2) {
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	f47f ae87 	bne.w	800ce0c <lv_draw_arc_get_area+0x8c>
        area->x1 = x - rout - extra_area;
 800d0fe:	fa1f fb8b 	uxth.w	fp, fp
 800d102:	b2ad      	uxth	r5, r5
 800d104:	ebab 0606 	sub.w	r6, fp, r6
 800d108:	1b76      	subs	r6, r6, r5
 800d10a:	803e      	strh	r6, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d10c:	fa0f f08a 	sxth.w	r0, sl
 800d110:	f014 fa9e 	bl	8021650 <lv_trigo_sin>
 800d114:	f8bd 6000 	ldrh.w	r6, [sp]
 800d118:	fb09 f000 	mul.w	r0, r9, r0
 800d11c:	1b73      	subs	r3, r6, r5
 800d11e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d122:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 800d124:	f104 035a 	add.w	r3, r4, #90	; 0x5a
 800d128:	b21b      	sxth	r3, r3
 800d12a:	9301      	str	r3, [sp, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f014 fa8f 	bl	8021650 <lv_trigo_sin>
 800d132:	9000      	str	r0, [sp, #0]
 800d134:	f10a 0a5a 	add.w	sl, sl, #90	; 0x5a
 800d138:	fa0f fa8a 	sxth.w	sl, sl
 800d13c:	4650      	mov	r0, sl
 800d13e:	f014 fa87 	bl	8021650 <lv_trigo_sin>
 800d142:	9a00      	ldr	r2, [sp, #0]
 800d144:	4282      	cmp	r2, r0
 800d146:	bfcc      	ite	gt
 800d148:	9801      	ldrgt	r0, [sp, #4]
 800d14a:	4650      	movle	r0, sl
 800d14c:	f014 fa80 	bl	8021650 <lv_trigo_sin>
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d150:	fb00 f808 	mul.w	r8, r0, r8
 800d154:	44ab      	add	fp, r5
 800d156:	eb0b 38e8 	add.w	r8, fp, r8, asr #15
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 800d15a:	f8a7 8004 	strh.w	r8, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d15e:	b220      	sxth	r0, r4
 800d160:	f014 fa76 	bl	8021650 <lv_trigo_sin>
 800d164:	fb09 f900 	mul.w	r9, r9, r0
 800d168:	4435      	add	r5, r6
 800d16a:	eb05 35e9 	add.w	r5, r5, r9, asr #15
 800d16e:	80fd      	strh	r5, [r7, #6]
 800d170:	e65a      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
    else if(start_quarter == 3 && end_quarter == 0) {
 800d172:	2a03      	cmp	r2, #3
 800d174:	d005      	beq.n	800d182 <lv_draw_arc_get_area+0x402>
 800d176:	e649      	b.n	800ce0c <lv_draw_arc_get_area+0x8c>
    if(end_quarter == 4) end_quarter = 3;
 800d178:	2b04      	cmp	r3, #4
 800d17a:	d040      	beq.n	800d1fe <lv_draw_arc_get_area+0x47e>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800d17c:	2b03      	cmp	r3, #3
 800d17e:	f43f ae67 	beq.w	800ce50 <lv_draw_arc_get_area+0xd0>
    else if(start_quarter == 3 && end_quarter == 0) {
 800d182:	2b00      	cmp	r3, #0
 800d184:	f47f ae42 	bne.w	800ce0c <lv_draw_arc_get_area+0x8c>
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 800d188:	f10a 035a 	add.w	r3, sl, #90	; 0x5a
 800d18c:	b21b      	sxth	r3, r3
 800d18e:	9302      	str	r3, [sp, #8]
 800d190:	4618      	mov	r0, r3
 800d192:	f014 fa5d 	bl	8021650 <lv_trigo_sin>
 800d196:	9001      	str	r0, [sp, #4]
 800d198:	f104 035a 	add.w	r3, r4, #90	; 0x5a
 800d19c:	b21b      	sxth	r3, r3
 800d19e:	9303      	str	r3, [sp, #12]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f014 fa55 	bl	8021650 <lv_trigo_sin>
 800d1a6:	9a01      	ldr	r2, [sp, #4]
 800d1a8:	4282      	cmp	r2, r0
 800d1aa:	bfb4      	ite	lt
 800d1ac:	9802      	ldrlt	r0, [sp, #8]
 800d1ae:	9803      	ldrge	r0, [sp, #12]
 800d1b0:	f014 fa4e 	bl	8021650 <lv_trigo_sin>
 800d1b4:	fa1f fb8b 	uxth.w	fp, fp
                                lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d1b8:	b2ad      	uxth	r5, r5
 800d1ba:	fb00 f808 	mul.w	r8, r0, r8
 800d1be:	ebab 0305 	sub.w	r3, fp, r5
 800d1c2:	eb03 38e8 	add.w	r8, r3, r8, asr #15
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 800d1c6:	f8a7 8000 	strh.w	r8, [r7]
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d1ca:	b220      	sxth	r0, r4
 800d1cc:	f014 fa40 	bl	8021650 <lv_trigo_sin>
 800d1d0:	f8bd 4000 	ldrh.w	r4, [sp]
 800d1d4:	fb09 f000 	mul.w	r0, r9, r0
 800d1d8:	1b63      	subs	r3, r4, r5
 800d1da:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d1de:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout + extra_area;
 800d1e0:	44b3      	add	fp, r6
 800d1e2:	44ab      	add	fp, r5
 800d1e4:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d1e8:	fa0f f08a 	sxth.w	r0, sl
 800d1ec:	f014 fa30 	bl	8021650 <lv_trigo_sin>
 800d1f0:	fb09 f900 	mul.w	r9, r9, r0
 800d1f4:	4425      	add	r5, r4
 800d1f6:	eb05 35e9 	add.w	r5, r5, r9, asr #15
 800d1fa:	80fd      	strh	r5, [r7, #6]
 800d1fc:	e614      	b.n	800ce28 <lv_draw_arc_get_area+0xa8>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800d1fe:	4554      	cmp	r4, sl
 800d200:	f67f ae32 	bls.w	800ce68 <lv_draw_arc_get_area+0xe8>
    if(start_quarter == 4) start_quarter = 3;
 800d204:	2303      	movs	r3, #3
 800d206:	461a      	mov	r2, r3
 800d208:	e5fa      	b.n	800ce00 <lv_draw_arc_get_area+0x80>
 800d20a:	bf00      	nop

0800d20c <show_error>:
    return LV_RES_OK;
}


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 800d20c:	b570      	push	{r4, r5, r6, lr}
 800d20e:	b098      	sub	sp, #96	; 0x60
 800d210:	4604      	mov	r4, r0
 800d212:	460d      	mov	r5, r1
 800d214:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800d216:	a80a      	add	r0, sp, #40	; 0x28
 800d218:	f001 ffa6 	bl	800f168 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800d21c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800d220:	f043 031f 	orr.w	r3, r3, #31
 800d224:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d228:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d22c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d230:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800d234:	23ff      	movs	r3, #255	; 0xff
 800d236:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800d23a:	462a      	mov	r2, r5
 800d23c:	a90a      	add	r1, sp, #40	; 0x28
 800d23e:	4620      	mov	r0, r4
 800d240:	f001 ffee 	bl	800f220 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800d244:	a802      	add	r0, sp, #8
 800d246:	f000 f9d3 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800d24a:	2300      	movs	r3, #0
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	4633      	mov	r3, r6
 800d250:	462a      	mov	r2, r5
 800d252:	a902      	add	r1, sp, #8
 800d254:	4620      	mov	r0, r4
 800d256:	f000 f9ff 	bl	800d658 <lv_draw_label>
}
 800d25a:	b018      	add	sp, #96	; 0x60
 800d25c:	bd70      	pop	{r4, r5, r6, pc}

0800d25e <lv_draw_img_dsc_init>:
{
 800d25e:	b510      	push	{r4, lr}
 800d260:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800d262:	2118      	movs	r1, #24
 800d264:	f014 fd80 	bl	8021d68 <lv_memset_00>
    dsc->recolor = lv_color_black();
 800d268:	7a23      	ldrb	r3, [r4, #8]
 800d26a:	f36f 0304 	bfc	r3, #0, #5
 800d26e:	7223      	strb	r3, [r4, #8]
 800d270:	8923      	ldrh	r3, [r4, #8]
 800d272:	f36f 134a 	bfc	r3, #5, #6
 800d276:	8123      	strh	r3, [r4, #8]
 800d278:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d27c:	f36f 03c7 	bfc	r3, #3, #5
 800d280:	7263      	strb	r3, [r4, #9]
    dsc->opa = LV_OPA_COVER;
 800d282:	23ff      	movs	r3, #255	; 0xff
 800d284:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800d286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d28a:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800d28c:	7d23      	ldrb	r3, [r4, #20]
 800d28e:	f043 0301 	orr.w	r3, r3, #1
 800d292:	7523      	strb	r3, [r4, #20]
}
 800d294:	bd10      	pop	{r4, pc}

0800d296 <lv_img_cf_get_px_size>:
    switch(cf) {
 800d296:	3804      	subs	r0, #4
 800d298:	280a      	cmp	r0, #10
 800d29a:	d813      	bhi.n	800d2c4 <lv_img_cf_get_px_size+0x2e>
 800d29c:	e8df f000 	tbb	[pc, r0]
 800d2a0:	0a060806 	.word	0x0a060806
 800d2a4:	0a100e0c 	.word	0x0a100e0c
 800d2a8:	0e0c      	.short	0x0e0c
 800d2aa:	10          	.byte	0x10
 800d2ab:	00          	.byte	0x00
 800d2ac:	2010      	movs	r0, #16
 800d2ae:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 800d2b0:	2018      	movs	r0, #24
            break;
 800d2b2:	4770      	bx	lr
            px_size = 1;
 800d2b4:	2001      	movs	r0, #1
            break;
 800d2b6:	4770      	bx	lr
            px_size = 2;
 800d2b8:	2002      	movs	r0, #2
            break;
 800d2ba:	4770      	bx	lr
            px_size = 4;
 800d2bc:	2004      	movs	r0, #4
            break;
 800d2be:	4770      	bx	lr
            px_size = 8;
 800d2c0:	2008      	movs	r0, #8
            break;
 800d2c2:	4770      	bx	lr
            px_size = 0;
 800d2c4:	2000      	movs	r0, #0
}
 800d2c6:	4770      	bx	lr

0800d2c8 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 800d2c8:	2803      	cmp	r0, #3
 800d2ca:	d004      	beq.n	800d2d6 <lv_img_cf_is_chroma_keyed+0xe>
 800d2cc:	2806      	cmp	r0, #6
 800d2ce:	bf14      	ite	ne
 800d2d0:	2000      	movne	r0, #0
 800d2d2:	2001      	moveq	r0, #1
 800d2d4:	4770      	bx	lr
            is_chroma_keyed = true;
 800d2d6:	2001      	movs	r0, #1
}
 800d2d8:	4770      	bx	lr

0800d2da <lv_img_cf_has_alpha>:
    switch(cf) {
 800d2da:	280e      	cmp	r0, #14
 800d2dc:	d809      	bhi.n	800d2f2 <lv_img_cf_has_alpha+0x18>
 800d2de:	2301      	movs	r3, #1
 800d2e0:	fa03 f000 	lsl.w	r0, r3, r0
 800d2e4:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 800d2e8:	4218      	tst	r0, r3
 800d2ea:	bf14      	ite	ne
 800d2ec:	2001      	movne	r0, #1
 800d2ee:	2000      	moveq	r0, #0
 800d2f0:	4770      	bx	lr
{
 800d2f2:	2000      	movs	r0, #0
}
 800d2f4:	4770      	bx	lr

0800d2f6 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800d2f6:	b158      	cbz	r0, 800d310 <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d2f8:	7802      	ldrb	r2, [r0, #0]
 800d2fa:	f1a2 0320 	sub.w	r3, r2, #32
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b5f      	cmp	r3, #95	; 0x5f
 800d302:	d907      	bls.n	800d314 <lv_img_src_get_type+0x1e>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800d304:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d308:	bf14      	ite	ne
 800d30a:	2002      	movne	r0, #2
 800d30c:	2000      	moveq	r0, #0
 800d30e:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800d310:	2003      	movs	r0, #3
 800d312:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800d314:	2001      	movs	r0, #1
}
 800d316:	4770      	bx	lr

0800d318 <lv_draw_img_decoded>:
{
 800d318:	b530      	push	{r4, r5, lr}
 800d31a:	b083      	sub	sp, #12
    if(draw_ctx->draw_img_decoded == NULL) return;
 800d31c:	6984      	ldr	r4, [r0, #24]
 800d31e:	b11c      	cbz	r4, 800d328 <lv_draw_img_decoded+0x10>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800d320:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800d324:	9500      	str	r5, [sp, #0]
 800d326:	47a0      	blx	r4
}
 800d328:	b003      	add	sp, #12
 800d32a:	bd30      	pop	{r4, r5, pc}

0800d32c <lv_draw_img>:
{
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	b08d      	sub	sp, #52	; 0x34
 800d332:	4605      	mov	r5, r0
 800d334:	4616      	mov	r6, r2
    if(src == NULL) {
 800d336:	2b00      	cmp	r3, #0
 800d338:	d036      	beq.n	800d3a8 <lv_draw_img+0x7c>
 800d33a:	460c      	mov	r4, r1
 800d33c:	461f      	mov	r7, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800d33e:	7acb      	ldrb	r3, [r1, #11]
 800d340:	2b02      	cmp	r3, #2
 800d342:	f240 812a 	bls.w	800d59a <lv_draw_img+0x26e>
    if(draw_ctx->draw_img) {
 800d346:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d34a:	f1b8 0f00 	cmp.w	r8, #0
 800d34e:	d008      	beq.n	800d362 <lv_draw_img+0x36>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 800d350:	463b      	mov	r3, r7
 800d352:	47c0      	blx	r8
    if(res != LV_RES_OK) {
 800d354:	2801      	cmp	r0, #1
 800d356:	f000 8120 	beq.w	800d59a <lv_draw_img+0x26e>
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800d35a:	7ae3      	ldrb	r3, [r4, #11]
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	f240 811c 	bls.w	800d59a <lv_draw_img+0x26e>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800d362:	6922      	ldr	r2, [r4, #16]
 800d364:	8921      	ldrh	r1, [r4, #8]
 800d366:	4638      	mov	r0, r7
 800d368:	f002 f806 	bl	800f378 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 800d36c:	4607      	mov	r7, r0
 800d36e:	2800      	cmp	r0, #0
 800d370:	f000 810e 	beq.w	800d590 <lv_draw_img+0x264>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800d374:	f890 9014 	ldrb.w	r9, [r0, #20]
 800d378:	f009 091f 	and.w	r9, r9, #31
 800d37c:	4648      	mov	r0, r9
 800d37e:	f7ff ffa3 	bl	800d2c8 <lv_img_cf_is_chroma_keyed>
 800d382:	2800      	cmp	r0, #0
 800d384:	d163      	bne.n	800d44e <lv_draw_img+0x122>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 800d386:	46c8      	mov	r8, r9
 800d388:	f1b9 0f0e 	cmp.w	r9, #14
 800d38c:	d011      	beq.n	800d3b2 <lv_draw_img+0x86>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800d38e:	f1b9 0f14 	cmp.w	r9, #20
 800d392:	d05e      	beq.n	800d452 <lv_draw_img+0x126>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800d394:	4648      	mov	r0, r9
 800d396:	f7ff ffa0 	bl	800d2da <lv_img_cf_has_alpha>
    else cf = LV_IMG_CF_TRUE_COLOR;
 800d39a:	2800      	cmp	r0, #0
 800d39c:	bf14      	ite	ne
 800d39e:	f04f 0805 	movne.w	r8, #5
 800d3a2:	f04f 0804 	moveq.w	r8, #4
 800d3a6:	e054      	b.n	800d452 <lv_draw_img+0x126>
        show_error(draw_ctx, coords, "No\ndata");
 800d3a8:	4a80      	ldr	r2, [pc, #512]	; (800d5ac <lv_draw_img+0x280>)
 800d3aa:	4631      	mov	r1, r6
 800d3ac:	f7ff ff2e 	bl	800d20c <show_error>
        return;
 800d3b0:	e0f3      	b.n	800d59a <lv_draw_img+0x26e>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d3b8:	d04b      	beq.n	800d452 <lv_draw_img+0x126>
            cdsc->dec_dsc.img_data = NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	61bb      	str	r3, [r7, #24]
    if(cdsc->dec_dsc.error_msg != NULL) {
 800d3be:	6a3a      	ldr	r2, [r7, #32]
 800d3c0:	2a00      	cmp	r2, #0
 800d3c2:	d148      	bne.n	800d456 <lv_draw_img+0x12a>
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800d3c4:	f04f 0805 	mov.w	r8, #5
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	68a9      	ldr	r1, [r5, #8]
 800d3cc:	a806      	add	r0, sp, #24
 800d3ce:	f013 fb36 	bl	8020a3e <_lv_area_intersect>
        if(union_ok == false) {
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	f000 80a0 	beq.w	800d518 <lv_draw_img+0x1ec>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d3d8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800d3e2:	1a9b      	subs	r3, r3, r2
 800d3e4:	b21b      	sxth	r3, r3
 800d3e6:	9302      	str	r3, [sp, #8]
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800d3e8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d3ec:	f014 fa8e 	bl	802190c <lv_mem_buf_get>
 800d3f0:	9004      	str	r0, [sp, #16]
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800d3f2:	f8d5 b008 	ldr.w	fp, [r5, #8]
    dest->x1 = src->x1;
 800d3f6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800d3fa:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 800d3fe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800d402:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 800d406:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d40a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 800d40e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d412:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_area_set_height(&line, 1);
 800d416:	2101      	movs	r1, #1
 800d418:	a808      	add	r0, sp, #32
 800d41a:	f013 fadf 	bl	80209dc <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800d41e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800d422:	f9b6 1000 	ldrsh.w	r1, [r6]
        int32_t y = mask_com.y1 - coords->y1;
 800d426:	f9bd 901a 	ldrsh.w	r9, [sp, #26]
 800d42a:	f9b6 a002 	ldrsh.w	sl, [r6, #2]
 800d42e:	eba9 0a0a 	sub.w	sl, r9, sl
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d432:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800d436:	454a      	cmp	r2, r9
 800d438:	f2c0 80b2 	blt.w	800d5a0 <lv_draw_img+0x274>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800d43c:	1a5b      	subs	r3, r3, r1
 800d43e:	b21b      	sxth	r3, r3
 800d440:	9303      	str	r3, [sp, #12]
 800d442:	4623      	mov	r3, r4
 800d444:	4644      	mov	r4, r8
 800d446:	9605      	str	r6, [sp, #20]
 800d448:	9e04      	ldr	r6, [sp, #16]
 800d44a:	4698      	mov	r8, r3
 800d44c:	e083      	b.n	800d556 <lv_draw_img+0x22a>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800d44e:	f04f 0806 	mov.w	r8, #6
    if(cdsc->dec_dsc.error_msg != NULL) {
 800d452:	6a3a      	ldr	r2, [r7, #32]
 800d454:	b13a      	cbz	r2, 800d466 <lv_draw_img+0x13a>
        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 800d456:	4631      	mov	r1, r6
 800d458:	4628      	mov	r0, r5
 800d45a:	f7ff fed7 	bl	800d20c <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800d45e:	4638      	mov	r0, r7
 800d460:	f002 fba5 	bl	800fbae <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 800d464:	e099      	b.n	800d59a <lv_draw_img+0x26e>
    else if(cdsc->dec_dsc.img_data) {
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d0ad      	beq.n	800d3c8 <lv_draw_img+0x9c>
    dest->x1 = src->x1;
 800d46c:	f9b6 0000 	ldrsh.w	r0, [r6]
 800d470:	f8ad 0020 	strh.w	r0, [sp, #32]
    dest->y1 = src->y1;
 800d474:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
 800d478:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 800d47c:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800d480:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 800d484:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800d488:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d492:	d115      	bne.n	800d4c0 <lv_draw_img+0x194>
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 800d494:	aa08      	add	r2, sp, #32
 800d496:	68a9      	ldr	r1, [r5, #8]
 800d498:	a80a      	add	r0, sp, #40	; 0x28
 800d49a:	f013 fad0 	bl	8020a3e <_lv_area_intersect>
        if(union_ok == false) {
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d036      	beq.n	800d510 <lv_draw_img+0x1e4>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800d4a2:	f8d5 9008 	ldr.w	r9, [r5, #8]
        draw_ctx->clip_area = &clip_com;
 800d4a6:	ab0a      	add	r3, sp, #40	; 0x28
 800d4a8:	60ab      	str	r3, [r5, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	f8cd 8000 	str.w	r8, [sp]
 800d4b0:	4632      	mov	r2, r6
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f7ff ff2f 	bl	800d318 <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 800d4ba:	f8c5 9008 	str.w	r9, [r5, #8]
 800d4be:	e7ce      	b.n	800d45e <lv_draw_img+0x132>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800d4c0:	46a4      	mov	ip, r4
 800d4c2:	f93c 3b04 	ldrsh.w	r3, [ip], #4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d4c6:	3201      	adds	r2, #1
 800d4c8:	eba2 020e 	sub.w	r2, r2, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d4cc:	3101      	adds	r1, #1
 800d4ce:	1a09      	subs	r1, r1, r0
 800d4d0:	f8cd c004 	str.w	ip, [sp, #4]
 800d4d4:	8860      	ldrh	r0, [r4, #2]
 800d4d6:	9000      	str	r0, [sp, #0]
 800d4d8:	b212      	sxth	r2, r2
 800d4da:	b209      	sxth	r1, r1
 800d4dc:	a808      	add	r0, sp, #32
 800d4de:	f001 fecf 	bl	800f280 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 800d4e2:	8832      	ldrh	r2, [r6, #0]
 800d4e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800d4ee:	8873      	ldrh	r3, [r6, #2]
 800d4f0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d4f4:	4419      	add	r1, r3
 800d4f6:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 800d4fa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800d4fe:	440a      	add	r2, r1
 800d500:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 800d504:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800d508:	4413      	add	r3, r2
 800d50a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800d50e:	e7c1      	b.n	800d494 <lv_draw_img+0x168>
    lv_img_decoder_close(&cache->dec_dsc);
 800d510:	4638      	mov	r0, r7
 800d512:	f002 fb4c 	bl	800fbae <lv_img_decoder_close>
            return LV_RES_OK;
 800d516:	e040      	b.n	800d59a <lv_draw_img+0x26e>
    lv_img_decoder_close(&cache->dec_dsc);
 800d518:	4638      	mov	r0, r7
 800d51a:	f002 fb48 	bl	800fbae <lv_img_decoder_close>
    if(res != LV_RES_OK) {
 800d51e:	e03c      	b.n	800d59a <lv_draw_img+0x26e>
            draw_ctx->clip_area = &mask_line;
 800d520:	ab0a      	add	r3, sp, #40	; 0x28
 800d522:	60ab      	str	r3, [r5, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 800d524:	9400      	str	r4, [sp, #0]
 800d526:	4633      	mov	r3, r6
 800d528:	aa08      	add	r2, sp, #32
 800d52a:	4641      	mov	r1, r8
 800d52c:	4628      	mov	r0, r5
 800d52e:	f7ff fef3 	bl	800d318 <lv_draw_img_decoded>
            line.y1++;
 800d532:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800d536:	3301      	adds	r3, #1
 800d538:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 800d53c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800d540:	3301      	adds	r3, #1
 800d542:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 800d546:	f10a 0a01 	add.w	sl, sl, #1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800d54a:	f109 0901 	add.w	r9, r9, #1
 800d54e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800d552:	4599      	cmp	r9, r3
 800d554:	dc24      	bgt.n	800d5a0 <lv_draw_img+0x274>
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 800d556:	aa08      	add	r2, sp, #32
 800d558:	4659      	mov	r1, fp
 800d55a:	a80a      	add	r0, sp, #40	; 0x28
 800d55c:	f013 fa6f 	bl	8020a3e <_lv_area_intersect>
            if(union_ok == false) continue;
 800d560:	2800      	cmp	r0, #0
 800d562:	d0f2      	beq.n	800d54a <lv_draw_img+0x21e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800d564:	9600      	str	r6, [sp, #0]
 800d566:	9b02      	ldr	r3, [sp, #8]
 800d568:	fa0f f28a 	sxth.w	r2, sl
 800d56c:	9903      	ldr	r1, [sp, #12]
 800d56e:	4638      	mov	r0, r7
 800d570:	f002 fb0a 	bl	800fb88 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800d574:	2801      	cmp	r0, #1
 800d576:	d0d3      	beq.n	800d520 <lv_draw_img+0x1f4>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800d578:	9e05      	ldr	r6, [sp, #20]
 800d57a:	4638      	mov	r0, r7
 800d57c:	f002 fb17 	bl	800fbae <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800d580:	9804      	ldr	r0, [sp, #16]
 800d582:	f014 fa25 	bl	80219d0 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 800d586:	4638      	mov	r0, r7
 800d588:	f002 fb11 	bl	800fbae <lv_img_decoder_close>
                draw_ctx->clip_area = clip_area_ori;
 800d58c:	f8c5 b008 	str.w	fp, [r5, #8]
        show_error(draw_ctx, coords, "No\ndata");
 800d590:	4a06      	ldr	r2, [pc, #24]	; (800d5ac <lv_draw_img+0x280>)
 800d592:	4631      	mov	r1, r6
 800d594:	4628      	mov	r0, r5
 800d596:	f7ff fe39 	bl	800d20c <show_error>
}
 800d59a:	b00d      	add	sp, #52	; 0x34
 800d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        draw_ctx->clip_area = clip_area_ori;
 800d5a0:	f8c5 b008 	str.w	fp, [r5, #8]
        lv_mem_buf_release(buf);
 800d5a4:	9804      	ldr	r0, [sp, #16]
 800d5a6:	f014 fa13 	bl	80219d0 <lv_mem_buf_release>
 800d5aa:	e758      	b.n	800d45e <lv_draw_img+0x132>
 800d5ac:	0802cfa8 	.word	0x0802cfa8

0800d5b0 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800d5b0:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800d5b2:	3830      	subs	r0, #48	; 0x30
 800d5b4:	b2c0      	uxtb	r0, r0
 800d5b6:	2809      	cmp	r0, #9
 800d5b8:	d918      	bls.n	800d5ec <hex_char_to_num+0x3c>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800d5ba:	2b60      	cmp	r3, #96	; 0x60
 800d5bc:	bf84      	itt	hi
 800d5be:	3b20      	subhi	r3, #32
 800d5c0:	b2db      	uxtbhi	r3, r3

        switch(hex) {
 800d5c2:	3b41      	subs	r3, #65	; 0x41
 800d5c4:	2b05      	cmp	r3, #5
 800d5c6:	d80e      	bhi.n	800d5e6 <hex_char_to_num+0x36>
 800d5c8:	e8df f003 	tbb	[pc, r3]
 800d5cc:	0705030f 	.word	0x0705030f
 800d5d0:	0b09      	.short	0x0b09
 800d5d2:	200b      	movs	r0, #11
 800d5d4:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
 800d5d6:	200c      	movs	r0, #12
                break;
 800d5d8:	4770      	bx	lr
            case 'D':
                result = 13;
 800d5da:	200d      	movs	r0, #13
                break;
 800d5dc:	4770      	bx	lr
            case 'E':
                result = 14;
 800d5de:	200e      	movs	r0, #14
                break;
 800d5e0:	4770      	bx	lr
            case 'F':
                result = 15;
 800d5e2:	200f      	movs	r0, #15
                break;
 800d5e4:	4770      	bx	lr
            default:
                result = 0;
 800d5e6:	2000      	movs	r0, #0
                break;
 800d5e8:	4770      	bx	lr
                result = 10;
 800d5ea:	200a      	movs	r0, #10
        }
    }

    return result;
}
 800d5ec:	4770      	bx	lr
	...

0800d5f0 <lv_draw_label_dsc_init>:
{
 800d5f0:	b510      	push	{r4, lr}
 800d5f2:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800d5f4:	2120      	movs	r1, #32
 800d5f6:	f014 fbb7 	bl	8021d68 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800d5fa:	23ff      	movs	r3, #255	; 0xff
 800d5fc:	76a3      	strb	r3, [r4, #26]
    dsc->color = lv_color_black();
 800d5fe:	7b23      	ldrb	r3, [r4, #12]
 800d600:	f36f 0304 	bfc	r3, #0, #5
 800d604:	7323      	strb	r3, [r4, #12]
 800d606:	89a3      	ldrh	r3, [r4, #12]
 800d608:	f36f 134a 	bfc	r3, #5, #6
 800d60c:	81a3      	strh	r3, [r4, #12]
 800d60e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d612:	f36f 03c7 	bfc	r3, #3, #5
 800d616:	7363      	strb	r3, [r4, #13]
    dsc->font = LV_FONT_DEFAULT;
 800d618:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <lv_draw_label_dsc_init+0x5c>)
 800d61a:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800d61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d620:	6063      	str	r3, [r4, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800d622:	60a3      	str	r3, [r4, #8]
    dsc->sel_color = lv_color_black();
 800d624:	7ba3      	ldrb	r3, [r4, #14]
 800d626:	f36f 0304 	bfc	r3, #0, #5
 800d62a:	73a3      	strb	r3, [r4, #14]
 800d62c:	89e3      	ldrh	r3, [r4, #14]
 800d62e:	f36f 134a 	bfc	r3, #5, #6
 800d632:	81e3      	strh	r3, [r4, #14]
 800d634:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d638:	f36f 03c7 	bfc	r3, #3, #5
 800d63c:	73e3      	strb	r3, [r4, #15]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800d63e:	2005      	movs	r0, #5
 800d640:	f013 fd56 	bl	80210f0 <lv_palette_main>
 800d644:	8220      	strh	r0, [r4, #16]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800d646:	2300      	movs	r3, #0
 800d648:	76e3      	strb	r3, [r4, #27]
}
 800d64a:	bd10      	pop	{r4, pc}
 800d64c:	08030d78 	.word	0x08030d78

0800d650 <lv_draw_letter>:
{
 800d650:	b510      	push	{r4, lr}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800d652:	6a04      	ldr	r4, [r0, #32]
 800d654:	47a0      	blx	r4
}
 800d656:	bd10      	pop	{r4, pc}

0800d658 <lv_draw_label>:
{
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	b0b7      	sub	sp, #220	; 0xdc
 800d65e:	920c      	str	r2, [sp, #48]	; 0x30
 800d660:	469c      	mov	ip, r3
 800d662:	9306      	str	r3, [sp, #24]
 800d664:	9e40      	ldr	r6, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
 800d666:	7e8b      	ldrb	r3, [r1, #26]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d914      	bls.n	800d696 <lv_draw_label+0x3e>
 800d66c:	4682      	mov	sl, r0
 800d66e:	460c      	mov	r4, r1
 800d670:	4696      	mov	lr, r2
    if(dsc->font == NULL) {
 800d672:	6809      	ldr	r1, [r1, #0]
 800d674:	9104      	str	r1, [sp, #16]
 800d676:	b171      	cbz	r1, 800d696 <lv_draw_label+0x3e>
    if(draw_ctx->draw_letter == NULL) {
 800d678:	6a03      	ldr	r3, [r0, #32]
 800d67a:	b163      	cbz	r3, 800d696 <lv_draw_label+0x3e>
    lv_draw_label_dsc_t dsc_mod = *dsc;
 800d67c:	ad2e      	add	r5, sp, #184	; 0xb8
 800d67e:	4627      	mov	r7, r4
 800d680:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d684:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d688:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if(txt == NULL || txt[0] == '\0')
 800d68c:	4663      	mov	r3, ip
 800d68e:	b113      	cbz	r3, 800d696 <lv_draw_label+0x3e>
 800d690:	f89c 3000 	ldrb.w	r3, [ip]
 800d694:	b913      	cbnz	r3, 800d69c <lv_draw_label+0x44>
}
 800d696:	b037      	add	sp, #220	; 0xdc
 800d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 800d69c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800d6a0:	4675      	mov	r5, lr
 800d6a2:	4671      	mov	r1, lr
 800d6a4:	a82c      	add	r0, sp, #176	; 0xb0
 800d6a6:	f013 f9ca 	bl	8020a3e <_lv_area_intersect>
    if(!clip_ok) return;
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d0f3      	beq.n	800d696 <lv_draw_label+0x3e>
    lv_text_align_t align = dsc->align;
 800d6ae:	7f23      	ldrb	r3, [r4, #28]
 800d6b0:	930f      	str	r3, [sp, #60]	; 0x3c
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800d6b2:	7f63      	ldrb	r3, [r4, #29]
 800d6b4:	f013 0f02 	tst.w	r3, #2
 800d6b8:	d123      	bne.n	800d702 <lv_draw_label+0xaa>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d6ba:	88ab      	ldrh	r3, [r5, #4]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	882a      	ldrh	r2, [r5, #0]
 800d6c0:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 800d6c2:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 800d6c4:	9a04      	ldr	r2, [sp, #16]
 800d6c6:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
 800d6ca:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800d6ce:	19d5      	adds	r5, r2, r7
 800d6d0:	950d      	str	r5, [sp, #52]	; 0x34
    pos.x = coords->x1;
 800d6d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d6d4:	880a      	ldrh	r2, [r1, #0]
 800d6d6:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
    pos.y = coords->y1;
 800d6da:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    x_ofs = dsc->ofs_x;
 800d6de:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800d6e2:	9210      	str	r2, [sp, #64]	; 0x40
    y_ofs = dsc->ofs_y;
 800d6e4:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    pos.y += y_ofs;
 800d6e8:	1842      	adds	r2, r0, r1
 800d6ea:	b292      	uxth	r2, r2
 800d6ec:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800d6f0:	2e00      	cmp	r6, #0
 800d6f2:	d045      	beq.n	800d780 <lv_draw_label+0x128>
 800d6f4:	2900      	cmp	r1, #0
 800d6f6:	d146      	bne.n	800d786 <lv_draw_label+0x12e>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	db13      	blt.n	800d724 <lv_draw_label+0xcc>
    uint32_t line_start     = 0;
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	9209      	str	r2, [sp, #36]	; 0x24
 800d700:	e028      	b.n	800d754 <lv_draw_label+0xfc>
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800d702:	9302      	str	r3, [sp, #8]
 800d704:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800d708:	9301      	str	r3, [sp, #4]
 800d70a:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	9906      	ldr	r1, [sp, #24]
 800d718:	a817      	add	r0, sp, #92	; 0x5c
 800d71a:	f016 fbe0 	bl	8023ede <lv_txt_get_size>
        w = p.x;
 800d71e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 800d722:	e7cf      	b.n	800d6c4 <lv_draw_label+0x6c>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800d724:	68b1      	ldr	r1, [r6, #8]
 800d726:	1a09      	subs	r1, r1, r0
 800d728:	2900      	cmp	r1, #0
 800d72a:	bfb8      	it	lt
 800d72c:	4249      	neglt	r1, r1
 800d72e:	f5c5 7000 	rsb	r0, r5, #512	; 0x200
 800d732:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 800d736:	dd05      	ble.n	800d744 <lv_draw_label+0xec>
            hint->line_start = -1;
 800d738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d73c:	6032      	str	r2, [r6, #0]
    uint32_t line_start     = 0;
 800d73e:	2200      	movs	r2, #0
 800d740:	9209      	str	r2, [sp, #36]	; 0x24
 800d742:	e007      	b.n	800d754 <lv_draw_label+0xfc>
        last_line_start = hint->line_start;
 800d744:	6831      	ldr	r1, [r6, #0]
    if(hint && last_line_start >= 0) {
 800d746:	2900      	cmp	r1, #0
 800d748:	db20      	blt.n	800d78c <lv_draw_label+0x134>
        line_start = last_line_start;
 800d74a:	9109      	str	r1, [sp, #36]	; 0x24
        pos.y += hint->y;
 800d74c:	6871      	ldr	r1, [r6, #4]
 800d74e:	440a      	add	r2, r1
 800d750:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800d754:	b21a      	sxth	r2, r3
 800d756:	920e      	str	r2, [sp, #56]	; 0x38
 800d758:	7f63      	ldrb	r3, [r4, #29]
 800d75a:	9301      	str	r3, [sp, #4]
 800d75c:	2300      	movs	r3, #0
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	4613      	mov	r3, r2
 800d762:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800d766:	9904      	ldr	r1, [sp, #16]
 800d768:	9806      	ldr	r0, [sp, #24]
 800d76a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d76c:	4428      	add	r0, r5
 800d76e:	f016 f991 	bl	8023a94 <_lv_txt_get_next_line>
 800d772:	1943      	adds	r3, r0, r5
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800d774:	f04f 0800 	mov.w	r8, #0
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800d778:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800d9b8 <lv_draw_label+0x360>
 800d77c:	461d      	mov	r5, r3
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800d77e:	e00f      	b.n	800d7a0 <lv_draw_label+0x148>
    uint32_t line_start     = 0;
 800d780:	2200      	movs	r2, #0
 800d782:	9209      	str	r2, [sp, #36]	; 0x24
 800d784:	e7e6      	b.n	800d754 <lv_draw_label+0xfc>
 800d786:	2200      	movs	r2, #0
 800d788:	9209      	str	r2, [sp, #36]	; 0x24
 800d78a:	e7e3      	b.n	800d754 <lv_draw_label+0xfc>
 800d78c:	2200      	movs	r2, #0
 800d78e:	9209      	str	r2, [sp, #36]	; 0x24
 800d790:	e7e0      	b.n	800d754 <lv_draw_label+0xfc>
        if(txt[line_start] == '\0') return;
 800d792:	9509      	str	r5, [sp, #36]	; 0x24
 800d794:	f89b 3000 	ldrb.w	r3, [fp]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f43f af7c 	beq.w	800d696 <lv_draw_label+0x3e>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800d79e:	4605      	mov	r5, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800d7a0:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 800d7a4:	443b      	add	r3, r7
 800d7a6:	f8da 2008 	ldr.w	r2, [sl, #8]
 800d7aa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	da26      	bge.n	800d800 <lv_draw_label+0x1a8>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800d7b2:	9b06      	ldr	r3, [sp, #24]
 800d7b4:	eb03 0b05 	add.w	fp, r3, r5
 800d7b8:	7f63      	ldrb	r3, [r4, #29]
 800d7ba:	9301      	str	r3, [sp, #4]
 800d7bc:	f8cd 8000 	str.w	r8, [sp]
 800d7c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7c2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800d7c6:	9904      	ldr	r1, [sp, #16]
 800d7c8:	4658      	mov	r0, fp
 800d7ca:	f016 f963 	bl	8023a94 <_lv_txt_get_next_line>
 800d7ce:	4428      	add	r0, r5
        pos.y += line_height;
 800d7d0:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800d7d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7d6:	4413      	add	r3, r2
 800d7d8:	b21b      	sxth	r3, r3
 800d7da:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800d7de:	2e00      	cmp	r6, #0
 800d7e0:	d0d7      	beq.n	800d792 <lv_draw_label+0x13a>
 800d7e2:	454b      	cmp	r3, r9
 800d7e4:	dbd5      	blt.n	800d792 <lv_draw_label+0x13a>
 800d7e6:	6832      	ldr	r2, [r6, #0]
 800d7e8:	2a00      	cmp	r2, #0
 800d7ea:	dad2      	bge.n	800d792 <lv_draw_label+0x13a>
            hint->line_start = line_start;
 800d7ec:	6035      	str	r5, [r6, #0]
            hint->y          = pos.y - coords->y1;
 800d7ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d7f0:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800d7f4:	1a9b      	subs	r3, r3, r2
 800d7f6:	6073      	str	r3, [r6, #4]
            hint->coord_y    = coords->y1;
 800d7f8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d7fc:	60b3      	str	r3, [r6, #8]
 800d7fe:	e7c8      	b.n	800d792 <lv_draw_label+0x13a>
    if(align == LV_TEXT_ALIGN_CENTER) {
 800d800:	950b      	str	r5, [sp, #44]	; 0x2c
 800d802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d804:	2b02      	cmp	r3, #2
 800d806:	d01f      	beq.n	800d848 <lv_draw_label+0x1f0>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800d808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d037      	beq.n	800d87e <lv_draw_label+0x226>
    uint32_t sel_start = dsc->sel_start;
 800d80e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    uint32_t sel_end = dsc->sel_end;
 800d812:	f8d4 b008 	ldr.w	fp, [r4, #8]
    if(sel_start > sel_end) {
 800d816:	45d8      	cmp	r8, fp
 800d818:	d902      	bls.n	800d820 <lv_draw_label+0x1c8>
 800d81a:	4643      	mov	r3, r8
        sel_start = sel_end;
 800d81c:	46d8      	mov	r8, fp
        sel_end = tmp;
 800d81e:	469b      	mov	fp, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800d820:	7fa3      	ldrb	r3, [r4, #30]
 800d822:	f013 0f03 	tst.w	r3, #3
 800d826:	d143      	bne.n	800d8b0 <lv_draw_label+0x258>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800d828:	a819      	add	r0, sp, #100	; 0x64
 800d82a:	f001 fc9d 	bl	800f168 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800d82e:	8a23      	ldrh	r3, [r4, #16]
 800d830:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    int32_t pos_x_start = pos.x;
 800d834:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800d838:	9312      	str	r3, [sp, #72]	; 0x48
    while(txt[line_start] != '\0') {
 800d83a:	2600      	movs	r6, #0
 800d83c:	960a      	str	r6, [sp, #40]	; 0x28
    uint32_t par_start = 0;
 800d83e:	9611      	str	r6, [sp, #68]	; 0x44
 800d840:	46d9      	mov	r9, fp
 800d842:	f8cd a020 	str.w	sl, [sp, #32]
    while(txt[line_start] != '\0') {
 800d846:	e150      	b.n	800daea <lv_draw_label+0x492>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800d848:	7f63      	ldrb	r3, [r4, #29]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800d850:	9a04      	ldr	r2, [sp, #16]
 800d852:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d854:	1a29      	subs	r1, r5, r0
 800d856:	9d06      	ldr	r5, [sp, #24]
 800d858:	1828      	adds	r0, r5, r0
 800d85a:	f016 faef 	bl	8023e3c <lv_txt_get_width>
 800d85e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d860:	8893      	ldrh	r3, [r2, #4]
 800d862:	3301      	adds	r3, #1
 800d864:	8812      	ldrh	r2, [r2, #0]
 800d866:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800d868:	b21b      	sxth	r3, r3
 800d86a:	1a1b      	subs	r3, r3, r0
 800d86c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d870:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800d874:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800d878:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800d87c:	e7c7      	b.n	800d80e <lv_draw_label+0x1b6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800d87e:	7f63      	ldrb	r3, [r4, #29]
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800d886:	9a04      	ldr	r2, [sp, #16]
 800d888:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d88a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d88c:	1a09      	subs	r1, r1, r0
 800d88e:	9d06      	ldr	r5, [sp, #24]
 800d890:	1828      	adds	r0, r5, r0
 800d892:	f016 fad3 	bl	8023e3c <lv_txt_get_width>
 800d896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d898:	8893      	ldrh	r3, [r2, #4]
 800d89a:	3301      	adds	r3, #1
 800d89c:	8812      	ldrh	r2, [r2, #0]
 800d89e:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800d8a0:	b21b      	sxth	r3, r3
 800d8a2:	1a1b      	subs	r3, r3, r0
 800d8a4:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800d8a8:	4413      	add	r3, r2
 800d8aa:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800d8ae:	e7ae      	b.n	800d80e <lv_draw_label+0x1b6>
        lv_draw_line_dsc_init(&line_dsc);
 800d8b0:	a828      	add	r0, sp, #160	; 0xa0
 800d8b2:	f000 fa06 	bl	800dcc2 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800d8bc:	9b04      	ldr	r3, [sp, #16]
 800d8be:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	bf08      	it	eq
 800d8c6:	2301      	moveq	r3, #1
 800d8c8:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
        line_dsc.opa = dsc->opa;
 800d8cc:	7ea3      	ldrb	r3, [r4, #26]
 800d8ce:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
        line_dsc.blend_mode = dsc->blend_mode;
 800d8d2:	7fa3      	ldrb	r3, [r4, #30]
 800d8d4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800d8d8:	f89d 20a9 	ldrb.w	r2, [sp, #169]	; 0xa9
 800d8dc:	f363 0201 	bfi	r2, r3, #0, #2
 800d8e0:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800d8e4:	e7a0      	b.n	800d828 <lv_draw_label+0x1d0>
            uint32_t logical_char_pos = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9305      	str	r3, [sp, #20]
 800d8ea:	e087      	b.n	800d9fc <lv_draw_label+0x3a4>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9305      	str	r3, [sp, #20]
 800d8f0:	e084      	b.n	800d9fc <lv_draw_label+0x3a4>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800d8f2:	f1ba 0f00 	cmp.w	sl, #0
 800d8f6:	d009      	beq.n	800d90c <lv_draw_label+0x2b4>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800d8f8:	f1ba 0f01 	cmp.w	sl, #1
 800d8fc:	f000 8183 	beq.w	800dc06 <lv_draw_label+0x5ae>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800d900:	f1ba 0f02 	cmp.w	sl, #2
 800d904:	f000 80bb 	beq.w	800da7e <lv_draw_label+0x426>
            color = dsc->color;
 800d908:	89a6      	ldrh	r6, [r4, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800d90a:	e08f      	b.n	800da2c <lv_draw_label+0x3d4>
                        par_start = i;
 800d90c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d90e:	9211      	str	r2, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
 800d910:	469a      	mov	sl, r3
                        continue;
 800d912:	e063      	b.n	800d9dc <lv_draw_label+0x384>
                    if(letter == ' ') {
 800d914:	2a20      	cmp	r2, #32
 800d916:	d161      	bne.n	800d9dc <lv_draw_label+0x384>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800d918:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d91a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d91c:	1a9b      	subs	r3, r3, r2
 800d91e:	2b07      	cmp	r3, #7
 800d920:	d004      	beq.n	800d92c <lv_draw_label+0x2d4>
                            recolor.full = dsc->color.full;
 800d922:	89a3      	ldrh	r3, [r4, #12]
 800d924:	930a      	str	r3, [sp, #40]	; 0x28
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800d926:	f04f 0a02 	mov.w	sl, #2
 800d92a:	e057      	b.n	800d9dc <lv_draw_label+0x384>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800d92c:	9b07      	ldr	r3, [sp, #28]
 800d92e:	1898      	adds	r0, r3, r2
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800d930:	1e43      	subs	r3, r0, #1
 800d932:	3005      	adds	r0, #5
    uint8_t * d8 = (uint8_t *)dst;
 800d934:	aa17      	add	r2, sp, #92	; 0x5c
        *d8 = *s8;
 800d936:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d93a:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
 800d93e:	4298      	cmp	r0, r3
 800d940:	d1f9      	bne.n	800d936 <lv_draw_label+0x2de>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800d942:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800d946:	f7ff fe33 	bl	800d5b0 <hex_char_to_num>
 800d94a:	4605      	mov	r5, r0
 800d94c:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
 800d950:	f7ff fe2e 	bl	800d5b0 <hex_char_to_num>
 800d954:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 800d958:	9305      	str	r3, [sp, #20]
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800d95a:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
 800d95e:	f7ff fe27 	bl	800d5b0 <hex_char_to_num>
 800d962:	4682      	mov	sl, r0
 800d964:	f89d 005f 	ldrb.w	r0, [sp, #95]	; 0x5f
 800d968:	f7ff fe22 	bl	800d5b0 <hex_char_to_num>
 800d96c:	eb00 1a0a 	add.w	sl, r0, sl, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800d970:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800d974:	f7ff fe1c 	bl	800d5b0 <hex_char_to_num>
 800d978:	4605      	mov	r5, r0
 800d97a:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 800d97e:	f7ff fe17 	bl	800d5b0 <hex_char_to_num>
 800d982:	eb00 1305 	add.w	r3, r0, r5, lsl #4
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800d986:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800d98a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d98c:	f363 0204 	bfi	r2, r3, #0, #5
 800d990:	f3ca 0585 	ubfx	r5, sl, #2, #6
 800d994:	4613      	mov	r3, r2
 800d996:	f365 134a 	bfi	r3, r5, #5, #6
 800d99a:	461a      	mov	r2, r3
 800d99c:	9b05      	ldr	r3, [sp, #20]
 800d99e:	f3c3 05c4 	ubfx	r5, r3, #3, #5
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	f365 23cf 	bfi	r3, r5, #11, #5
 800d9a8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	930a      	str	r3, [sp, #40]	; 0x28
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800d9b0:	f04f 0a02 	mov.w	sl, #2
 800d9b4:	e012      	b.n	800d9dc <lv_draw_label+0x384>
 800d9b6:	bf00      	nop
 800d9b8:	fffffc00 	.word	0xfffffc00
            dsc_mod.color = color;
 800d9bc:	f8ad 60c4 	strh.w	r6, [sp, #196]	; 0xc4
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 800d9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9c2:	aa2b      	add	r2, sp, #172	; 0xac
 800d9c4:	a92e      	add	r1, sp, #184	; 0xb8
 800d9c6:	9808      	ldr	r0, [sp, #32]
 800d9c8:	f7ff fe42 	bl	800d650 <lv_draw_letter>
            if(letter_w > 0) {
 800d9cc:	b135      	cbz	r5, 800d9dc <lv_draw_label+0x384>
                pos.x += letter_w + dsc->letter_space;
 800d9ce:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	; 0xac
 800d9d2:	8aa3      	ldrh	r3, [r4, #20]
 800d9d4:	4418      	add	r0, r3
 800d9d6:	4405      	add	r5, r0
 800d9d8:	f8ad 50ac 	strh.w	r5, [sp, #172]	; 0xac
        while(i < line_end - line_start) {
 800d9dc:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d9de:	4559      	cmp	r1, fp
 800d9e0:	d250      	bcs.n	800da84 <lv_draw_label+0x42c>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800d9e2:	45b8      	cmp	r8, r7
 800d9e4:	f43f af7f 	beq.w	800d8e6 <lv_draw_label+0x28e>
 800d9e8:	45b9      	cmp	r9, r7
 800d9ea:	f43f af7f 	beq.w	800d8ec <lv_draw_label+0x294>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800d9ee:	4b88      	ldr	r3, [pc, #544]	; (800dc10 <lv_draw_label+0x5b8>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9f4:	4411      	add	r1, r2
 800d9f6:	9806      	ldr	r0, [sp, #24]
 800d9f8:	4798      	blx	r3
 800d9fa:	9005      	str	r0, [sp, #20]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800d9fc:	ab27      	add	r3, sp, #156	; 0x9c
 800d9fe:	aa16      	add	r2, sp, #88	; 0x58
 800da00:	a915      	add	r1, sp, #84	; 0x54
 800da02:	9807      	ldr	r0, [sp, #28]
 800da04:	f016 fa04 	bl	8023e10 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800da08:	7f63      	ldrb	r3, [r4, #29]
 800da0a:	f013 0301 	ands.w	r3, r3, #1
 800da0e:	d007      	beq.n	800da20 <lv_draw_label+0x3c8>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800da10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da12:	2a23      	cmp	r2, #35	; 0x23
 800da14:	f43f af6d 	beq.w	800d8f2 <lv_draw_label+0x29a>
                if(cmd_state == CMD_STATE_PAR) {
 800da18:	f1ba 0f01 	cmp.w	sl, #1
 800da1c:	f43f af7a 	beq.w	800d914 <lv_draw_label+0x2bc>
            color = dsc->color;
 800da20:	89a6      	ldrh	r6, [r4, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800da22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da24:	f1ba 0f02 	cmp.w	sl, #2
 800da28:	bf08      	it	eq
 800da2a:	461e      	moveq	r6, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800da2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800da2e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800da30:	9804      	ldr	r0, [sp, #16]
 800da32:	f012 fa72 	bl	801ff1a <lv_font_get_glyph_width>
 800da36:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800da38:	45b8      	cmp	r8, r7
 800da3a:	d0bf      	beq.n	800d9bc <lv_draw_label+0x364>
 800da3c:	45b9      	cmp	r9, r7
 800da3e:	d0bd      	beq.n	800d9bc <lv_draw_label+0x364>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800da40:	9b05      	ldr	r3, [sp, #20]
 800da42:	4598      	cmp	r8, r3
 800da44:	d8ba      	bhi.n	800d9bc <lv_draw_label+0x364>
 800da46:	4599      	cmp	r9, r3
 800da48:	d9b8      	bls.n	800d9bc <lv_draw_label+0x364>
                    sel_coords.x1 = pos.x;
 800da4a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800da4e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    sel_coords.y1 = pos.y;
 800da52:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
 800da56:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800da5a:	3b01      	subs	r3, #1
 800da5c:	8aa1      	ldrh	r1, [r4, #20]
 800da5e:	440b      	add	r3, r1
 800da60:	4403      	add	r3, r0
 800da62:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y2 = pos.y + line_height - 1;
 800da66:	3a01      	subs	r2, #1
 800da68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da6a:	441a      	add	r2, r3
 800da6c:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800da70:	aa17      	add	r2, sp, #92	; 0x5c
 800da72:	a919      	add	r1, sp, #100	; 0x64
 800da74:	9808      	ldr	r0, [sp, #32]
 800da76:	f001 fbd3 	bl	800f220 <lv_draw_rect>
                    color = dsc->sel_color;
 800da7a:	89e6      	ldrh	r6, [r4, #14]
 800da7c:	e79e      	b.n	800d9bc <lv_draw_label+0x364>
                        cmd_state = CMD_STATE_WAIT;
 800da7e:	f04f 0a00 	mov.w	sl, #0
 800da82:	e7ab      	b.n	800d9dc <lv_draw_label+0x384>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800da84:	7fa3      	ldrb	r3, [r4, #30]
 800da86:	f013 0f02 	tst.w	r3, #2
 800da8a:	d149      	bne.n	800db20 <lv_draw_label+0x4c8>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800da8c:	7fa3      	ldrb	r3, [r4, #30]
 800da8e:	f013 0f01 	tst.w	r3, #1
 800da92:	d169      	bne.n	800db68 <lv_draw_label+0x510>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800da94:	9b06      	ldr	r3, [sp, #24]
 800da96:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800da98:	19dd      	adds	r5, r3, r7
 800da9a:	7f63      	ldrb	r3, [r4, #29]
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	2300      	movs	r3, #0
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daa4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800daa8:	9904      	ldr	r1, [sp, #16]
 800daaa:	4628      	mov	r0, r5
 800daac:	f015 fff2 	bl	8023a94 <_lv_txt_get_next_line>
 800dab0:	4407      	add	r7, r0
        pos.x = coords->x1;
 800dab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        if(align == LV_TEXT_ALIGN_CENTER) {
 800daba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dabc:	2b02      	cmp	r3, #2
 800dabe:	d073      	beq.n	800dba8 <lv_draw_label+0x550>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800dac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	f000 8089 	beq.w	800dbda <lv_draw_label+0x582>
        pos.y += line_height;
 800dac8:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800dacc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dace:	4413      	add	r3, r2
 800dad0:	b21b      	sxth	r3, r3
 800dad2:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        line_start = line_end;
 800dad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dad8:	9209      	str	r2, [sp, #36]	; 0x24
        if(pos.y > draw_ctx->clip_area->y2) return;
 800dada:	9a08      	ldr	r2, [sp, #32]
 800dadc:	6892      	ldr	r2, [r2, #8]
 800dade:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	f6ff add7 	blt.w	800d696 <lv_draw_label+0x3e>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800dae8:	970b      	str	r7, [sp, #44]	; 0x2c
    while(txt[line_start] != '\0') {
 800daea:	9b06      	ldr	r3, [sp, #24]
 800daec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daee:	1899      	adds	r1, r3, r2
 800daf0:	9107      	str	r1, [sp, #28]
 800daf2:	5c9b      	ldrb	r3, [r3, r2]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f43f adce 	beq.w	800d696 <lv_draw_label+0x3e>
        pos.x += x_ofs;
 800dafa:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800dafe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db00:	4413      	add	r3, r2
 800db02:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        i         = 0;
 800db06:	2300      	movs	r3, #0
 800db08:	9327      	str	r3, [sp, #156]	; 0x9c
        while(i < line_end - line_start) {
 800db0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db0e:	ebb3 0b02 	subs.w	fp, r3, r2
 800db12:	d0b7      	beq.n	800da84 <lv_draw_label+0x42c>
        cmd_state = CMD_STATE_WAIT;
 800db14:	f04f 0a00 	mov.w	sl, #0
        while(i < line_end - line_start) {
 800db18:	4651      	mov	r1, sl
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800db1a:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800db1e:	e760      	b.n	800d9e2 <lv_draw_label+0x38a>
            p1.x = pos_x_start;
 800db20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db22:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800db26:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800db2a:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 800db2e:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800db32:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800db36:	6822      	ldr	r2, [r4, #0]
 800db38:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800db3c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800db40:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800db44:	b21b      	sxth	r3, r3
 800db46:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.x = pos.x;
 800db4a:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800db4e:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            p2.y = p1.y;
 800db52:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            line_dsc.color = color;
 800db56:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800db5a:	ab17      	add	r3, sp, #92	; 0x5c
 800db5c:	aa16      	add	r2, sp, #88	; 0x58
 800db5e:	a928      	add	r1, sp, #160	; 0xa0
 800db60:	9808      	ldr	r0, [sp, #32]
 800db62:	f000 f8c5 	bl	800dcf0 <lv_draw_line>
 800db66:	e791      	b.n	800da8c <lv_draw_label+0x434>
            p1.x = pos_x_start;
 800db68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db6a:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800db6e:	6822      	ldr	r2, [r4, #0]
 800db70:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800db74:	8911      	ldrh	r1, [r2, #8]
 800db76:	440b      	add	r3, r1
 800db78:	8952      	ldrh	r2, [r2, #10]
 800db7a:	1a9b      	subs	r3, r3, r2
 800db7c:	9a04      	ldr	r2, [sp, #16]
 800db7e:	f992 200d 	ldrsb.w	r2, [r2, #13]
 800db82:	1a9b      	subs	r3, r3, r2
 800db84:	b21b      	sxth	r3, r3
 800db86:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.x = pos.x;
 800db8a:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800db8e:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            p2.y = p1.y;
 800db92:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            line_dsc.color = color;
 800db96:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800db9a:	ab17      	add	r3, sp, #92	; 0x5c
 800db9c:	aa16      	add	r2, sp, #88	; 0x58
 800db9e:	a928      	add	r1, sp, #160	; 0xa0
 800dba0:	9808      	ldr	r0, [sp, #32]
 800dba2:	f000 f8a5 	bl	800dcf0 <lv_draw_line>
 800dba6:	e775      	b.n	800da94 <lv_draw_label+0x43c>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800dba8:	7f63      	ldrb	r3, [r4, #29]
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800dbb0:	9a04      	ldr	r2, [sp, #16]
 800dbb2:	4601      	mov	r1, r0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	f016 f941 	bl	8023e3c <lv_txt_get_width>
 800dbba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbbc:	8893      	ldrh	r3, [r2, #4]
 800dbbe:	3301      	adds	r3, #1
 800dbc0:	8812      	ldrh	r2, [r2, #0]
 800dbc2:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800dbc4:	b21b      	sxth	r3, r3
 800dbc6:	1a18      	subs	r0, r3, r0
 800dbc8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800dbcc:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800dbd0:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800dbd4:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800dbd8:	e776      	b.n	800dac8 <lv_draw_label+0x470>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800dbda:	7f63      	ldrb	r3, [r4, #29]
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	4601      	mov	r1, r0
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f016 f928 	bl	8023e3c <lv_txt_get_width>
 800dbec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbee:	8893      	ldrh	r3, [r2, #4]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	8812      	ldrh	r2, [r2, #0]
 800dbf4:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800dbf6:	b21b      	sxth	r3, r3
 800dbf8:	1a1b      	subs	r3, r3, r0
 800dbfa:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800dbfe:	4413      	add	r3, r2
 800dc00:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800dc04:	e760      	b.n	800dac8 <lv_draw_label+0x470>
            color = dsc->color;
 800dc06:	89a6      	ldrh	r6, [r4, #12]
                        cmd_state = CMD_STATE_WAIT;
 800dc08:	f04f 0a00 	mov.w	sl, #0
 800dc0c:	e70e      	b.n	800da2c <lv_draw_label+0x3d4>
 800dc0e:	bf00      	nop
 800dc10:	20000758 	.word	0x20000758

0800dc14 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(draw_ctx->layer_init == NULL) return NULL;
 800dc16:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800dc18:	b353      	cbz	r3, 800dc70 <lv_draw_layer_create+0x5c>
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	460f      	mov	r7, r1
 800dc1e:	4616      	mov	r6, r2

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 800dc20:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800dc22:	f013 fe21 	bl	8021868 <lv_mem_alloc>
    LV_ASSERT_MALLOC(layer_ctx);
 800dc26:	4605      	mov	r5, r0
 800dc28:	b1e8      	cbz	r0, 800dc66 <lv_draw_layer_create+0x52>
    if(layer_ctx == NULL) {
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800dc2a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dc2c:	f014 f89c 	bl	8021d68 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800dc30:	f7fe fd6e 	bl	800c710 <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	622b      	str	r3, [r5, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	61eb      	str	r3, [r5, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800dc3c:	68a3      	ldr	r3, [r4, #8]
 800dc3e:	61ab      	str	r3, [r5, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800dc40:	6803      	ldr	r3, [r0, #0]
 800dc42:	7c1b      	ldrb	r3, [r3, #16]
 800dc44:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800dc48:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 800dc4c:	462b      	mov	r3, r5
 800dc4e:	6838      	ldr	r0, [r7, #0]
 800dc50:	6879      	ldr	r1, [r7, #4]
 800dc52:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 800dc54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc56:	4632      	mov	r2, r6
 800dc58:	4629      	mov	r1, r5
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	4798      	blx	r3
    if(NULL == init_layer_ctx) {
 800dc5e:	4604      	mov	r4, r0
 800dc60:	b110      	cbz	r0, 800dc68 <lv_draw_layer_create+0x54>
        lv_mem_free(layer_ctx);
    }
    return init_layer_ctx;
}
 800dc62:	4620      	mov	r0, r4
 800dc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(layer_ctx);
 800dc66:	e7fe      	b.n	800dc66 <lv_draw_layer_create+0x52>
        lv_mem_free(layer_ctx);
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f013 fe1b 	bl	80218a4 <lv_mem_free>
 800dc6e:	e7f8      	b.n	800dc62 <lv_draw_layer_create+0x4e>
    if(draw_ctx->layer_init == NULL) return NULL;
 800dc70:	2400      	movs	r4, #0
 800dc72:	e7f6      	b.n	800dc62 <lv_draw_layer_create+0x4e>

0800dc74 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 800dc74:	b508      	push	{r3, lr}
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800dc76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dc78:	b103      	cbz	r3, 800dc7c <lv_draw_layer_adjust+0x8>
 800dc7a:	4798      	blx	r3
}
 800dc7c:	bd08      	pop	{r3, pc}

0800dc7e <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 800dc7e:	b508      	push	{r3, lr}
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800dc80:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800dc82:	b103      	cbz	r3, 800dc86 <lv_draw_layer_blend+0x8>
 800dc84:	4798      	blx	r3
}
 800dc86:	bd08      	pop	{r3, pc}

0800dc88 <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4605      	mov	r5, r0
 800dc8c:	460c      	mov	r4, r1

    lv_draw_wait_for_finish(draw_ctx);
 800dc8e:	f7ff f844 	bl	800cd1a <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 800dc92:	6a23      	ldr	r3, [r4, #32]
 800dc94:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 800dc96:	69e3      	ldr	r3, [r4, #28]
 800dc98:	606b      	str	r3, [r5, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 800dc9a:	69a3      	ldr	r3, [r4, #24]
 800dc9c:	60ab      	str	r3, [r5, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800dc9e:	f7fe fd37 	bl	800c710 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800dca2:	6803      	ldr	r3, [r0, #0]
 800dca4:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800dca8:	7c1a      	ldrb	r2, [r3, #16]
 800dcaa:	f361 1286 	bfi	r2, r1, #6, #1
 800dcae:	741a      	strb	r2, [r3, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 800dcb0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800dcb2:	b113      	cbz	r3, 800dcba <lv_draw_layer_destroy+0x32>
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 800dcba:	4620      	mov	r0, r4
 800dcbc:	f013 fdf2 	bl	80218a4 <lv_mem_free>
}
 800dcc0:	bd38      	pop	{r3, r4, r5, pc}

0800dcc2 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800dcc2:	b510      	push	{r4, lr}
 800dcc4:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800dcc6:	210a      	movs	r1, #10
 800dcc8:	f014 f84e 	bl	8021d68 <lv_memset_00>
    dsc->width = 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 800dcd0:	23ff      	movs	r3, #255	; 0xff
 800dcd2:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800dcd4:	7823      	ldrb	r3, [r4, #0]
 800dcd6:	f36f 0304 	bfc	r3, #0, #5
 800dcda:	7023      	strb	r3, [r4, #0]
 800dcdc:	8823      	ldrh	r3, [r4, #0]
 800dcde:	f36f 134a 	bfc	r3, #5, #6
 800dce2:	8023      	strh	r3, [r4, #0]
 800dce4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800dce8:	f36f 03c7 	bfc	r3, #3, #5
 800dcec:	7063      	strb	r3, [r4, #1]
}
 800dcee:	bd10      	pop	{r4, pc}

0800dcf0 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 800dcf0:	b510      	push	{r4, lr}
    if(dsc->width == 0) return;
 800dcf2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800dcf6:	b124      	cbz	r4, 800dd02 <lv_draw_line+0x12>
    if(dsc->opa <= LV_OPA_MIN) return;
 800dcf8:	7a0c      	ldrb	r4, [r1, #8]
 800dcfa:	2c02      	cmp	r4, #2
 800dcfc:	d901      	bls.n	800dd02 <lv_draw_line+0x12>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 800dcfe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dd00:	47a0      	blx	r4
}
 800dd02:	bd10      	pop	{r4, pc}

0800dd04 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 800dd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd08:	4686      	mov	lr, r0
 800dd0a:	9c08      	ldr	r4, [sp, #32]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 800dd0c:	8aa0      	ldrh	r0, [r4, #20]
 800dd0e:	1a12      	subs	r2, r2, r0
 800dd10:	fa0f fc82 	sxth.w	ip, r2
    abs_x -= p->origo.x;
 800dd14:	8a62      	ldrh	r2, [r4, #18]
 800dd16:	1a89      	subs	r1, r1, r2
 800dd18:	b20a      	sxth	r2, r1

    /*Handle special cases*/
    if(p->steep == 0) {
 800dd1a:	6a21      	ldr	r1, [r4, #32]
 800dd1c:	2900      	cmp	r1, #0
 800dd1e:	d159      	bne.n	800ddd4 <lv_draw_mask_line+0xd0>
        /*Horizontal*/
        if(p->flat) {
 800dd20:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800dd24:	f010 0001 	ands.w	r0, r0, #1
 800dd28:	d017      	beq.n	800dd5a <lv_draw_mask_line+0x56>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800dd2a:	7c23      	ldrb	r3, [r4, #16]
 800dd2c:	f013 0f02 	tst.w	r3, #2
 800dd30:	f000 8101 	beq.w	800df36 <lv_draw_mask_line+0x232>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800dd34:	f003 0303 	and.w	r3, r3, #3
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d008      	beq.n	800dd4e <lv_draw_mask_line+0x4a>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800dd3c:	2b03      	cmp	r3, #3
 800dd3e:	f040 81ec 	bne.w	800e11a <lv_draw_mask_line+0x416>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 800dd42:	f1bc 0f00 	cmp.w	ip, #0
 800dd46:	bfd4      	ite	le
 800dd48:	2000      	movle	r0, #0
 800dd4a:	2001      	movgt	r0, #1
 800dd4c:	e0f3      	b.n	800df36 <lv_draw_mask_line+0x232>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800dd4e:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 800dd52:	bfac      	ite	ge
 800dd54:	2000      	movge	r0, #0
 800dd56:	2001      	movlt	r0, #1
 800dd58:	e0ed      	b.n	800df36 <lv_draw_mask_line+0x232>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800dd5a:	7c20      	ldrb	r0, [r4, #16]
 800dd5c:	f010 0402 	ands.w	r4, r0, #2
 800dd60:	f040 81dd 	bne.w	800e11e <lv_draw_mask_line+0x41a>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800dd64:	f000 0003 	and.w	r0, r0, #3
 800dd68:	2801      	cmp	r0, #1
 800dd6a:	d00b      	beq.n	800dd84 <lv_draw_mask_line+0x80>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 800dd6c:	b9e8      	cbnz	r0, 800ddaa <lv_draw_mask_line+0xa6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800dd6e:	18d1      	adds	r1, r2, r3
 800dd70:	f100 81d7 	bmi.w	800e122 <lv_draw_mask_line+0x41e>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800dd74:	2a00      	cmp	r2, #0
 800dd76:	f300 80de 	bgt.w	800df36 <lv_draw_mask_line+0x232>
                    int32_t k = - abs_x;
 800dd7a:	4252      	negs	r2, r2
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	dc0e      	bgt.n	800dd9e <lv_draw_mask_line+0x9a>
                    return  LV_DRAW_MASK_RES_CHANGED;
 800dd80:	2002      	movs	r0, #2
 800dd82:	e0d8      	b.n	800df36 <lv_draw_mask_line+0x232>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800dd84:	2a00      	cmp	r2, #0
 800dd86:	f300 80d6 	bgt.w	800df36 <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800dd8a:	4610      	mov	r0, r2
 800dd8c:	461d      	mov	r5, r3
 800dd8e:	42da      	cmn	r2, r3
 800dd90:	f100 81d5 	bmi.w	800e13e <lv_draw_mask_line+0x43a>
                    int32_t k = - abs_x;
 800dd94:	4241      	negs	r1, r0
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800dd96:	42a9      	cmp	r1, r5
 800dd98:	db12      	blt.n	800ddc0 <lv_draw_mask_line+0xbc>
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	e0cb      	b.n	800df36 <lv_draw_mask_line+0x232>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800dd9e:	eb0e 0002 	add.w	r0, lr, r2
 800dda2:	f013 ffe1 	bl	8021d68 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 800dda6:	2002      	movs	r0, #2
 800dda8:	e0c5      	b.n	800df36 <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800ddaa:	4610      	mov	r0, r2
 800ddac:	461d      	mov	r5, r3
 800ddae:	42da      	cmn	r2, r3
 800ddb0:	f100 81b9 	bmi.w	800e126 <lv_draw_mask_line+0x422>
                    if(k < 0) k = 0;
 800ddb4:	2a00      	cmp	r2, #0
 800ddb6:	dded      	ble.n	800dd94 <lv_draw_mask_line+0x90>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	dc06      	bgt.n	800ddca <lv_draw_mask_line+0xc6>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	e0ba      	b.n	800df36 <lv_draw_mask_line+0x232>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 800ddc0:	2800      	cmp	r0, #0
                    return  LV_DRAW_MASK_RES_CHANGED;
 800ddc2:	bfc8      	it	gt
 800ddc4:	2002      	movgt	r0, #2
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 800ddc6:	f300 80b6 	bgt.w	800df36 <lv_draw_mask_line+0x232>
 800ddca:	4670      	mov	r0, lr
 800ddcc:	f013 ffcc 	bl	8021d68 <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 800ddd0:	2002      	movs	r0, #2
 800ddd2:	e0b0      	b.n	800df36 <lv_draw_mask_line+0x232>
    if(p->flat) {
 800ddd4:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 800ddd8:	f016 0001 	ands.w	r0, r6, #1
 800dddc:	f000 809e 	beq.w	800df1c <lv_draw_mask_line+0x218>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800dde0:	69e0      	ldr	r0, [r4, #28]
 800dde2:	fb02 f100 	mul.w	r1, r2, r0
 800dde6:	1289      	asrs	r1, r1, #10
    if(p->yx_steep > 0) {
 800dde8:	2800      	cmp	r0, #0
 800ddea:	dd05      	ble.n	800ddf8 <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
 800ddec:	4561      	cmp	r1, ip
 800ddee:	f340 81ad 	ble.w	800e14c <lv_draw_mask_line+0x448>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800ddf2:	f3c6 0040 	ubfx	r0, r6, #1, #1
 800ddf6:	e09e      	b.n	800df36 <lv_draw_mask_line+0x232>
        if(y_at_x < abs_y) {
 800ddf8:	4561      	cmp	r1, ip
 800ddfa:	f280 81e5 	bge.w	800e1c8 <lv_draw_mask_line+0x4c4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800ddfe:	f3c6 0040 	ubfx	r0, r6, #1, #1
 800de02:	e098      	b.n	800df36 <lv_draw_mask_line+0x232>
            if(p->inv) {
 800de04:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800de08:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800de0c:	e093      	b.n	800df36 <lv_draw_mask_line+0x232>
            if(p->inv) {
 800de0e:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800de12:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800de16:	e08e      	b.n	800df36 <lv_draw_mask_line+0x232>


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
 800de18:	2200      	movs	r2, #0
 800de1a:	e1cf      	b.n	800e1bc <lv_draw_mask_line+0x4b8>
 800de1c:	463e      	mov	r6, r7
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800de1e:	f888 6000 	strb.w	r6, [r8]
        px_h -= p->spx;
 800de22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de24:	ebac 0c03 	sub.w	ip, ip, r3
        k++;
 800de28:	3201      	adds	r2, #1
        if(k >= len) break;
 800de2a:	3001      	adds	r0, #1
 800de2c:	42aa      	cmp	r2, r5
 800de2e:	da57      	bge.n	800dee0 <lv_draw_mask_line+0x1dc>
    while(px_h > p->spx) {
 800de30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de32:	459c      	cmp	ip, r3
 800de34:	dd1c      	ble.n	800de70 <lv_draw_mask_line+0x16c>
        if(k >= 0 && k < len) {
 800de36:	2a00      	cmp	r2, #0
 800de38:	dbf3      	blt.n	800de22 <lv_draw_mask_line+0x11e>
 800de3a:	42aa      	cmp	r2, r5
 800de3c:	daf1      	bge.n	800de22 <lv_draw_mask_line+0x11e>
            m = px_h - (p->spx >> 1);
 800de3e:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 800de42:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
 800de44:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 800de48:	f016 0f02 	tst.w	r6, #2
 800de4c:	bf1c      	itt	ne
 800de4e:	43db      	mvnne	r3, r3
 800de50:	b2db      	uxtbne	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800de52:	4680      	mov	r8, r0
 800de54:	7806      	ldrb	r6, [r0, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800de56:	2bfc      	cmp	r3, #252	; 0xfc
 800de58:	d8e1      	bhi.n	800de1e <lv_draw_mask_line+0x11a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d9de      	bls.n	800de1c <lv_draw_mask_line+0x118>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800de5e:	fb06 f303 	mul.w	r3, r6, r3
 800de62:	eb03 2603 	add.w	r6, r3, r3, lsl #8
 800de66:	eb03 16c6 	add.w	r6, r3, r6, lsl #7
 800de6a:	f3c6 56c7 	ubfx	r6, r6, #23, #8
 800de6e:	e7d6      	b.n	800de1e <lv_draw_mask_line+0x11a>
    if(k < len && k >= 0) {
 800de70:	42aa      	cmp	r2, r5
 800de72:	da35      	bge.n	800dee0 <lv_draw_mask_line+0x1dc>
 800de74:	2a00      	cmp	r2, #0
 800de76:	db33      	blt.n	800dee0 <lv_draw_mask_line+0x1dc>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800de78:	69a3      	ldr	r3, [r4, #24]
 800de7a:	fb03 f30c 	mul.w	r3, r3, ip
 800de7e:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
 800de80:	fb0c fc03 	mul.w	ip, ip, r3
 800de84:	f3cc 2c47 	ubfx	ip, ip, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800de88:	69e3      	ldr	r3, [r4, #28]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	bfbc      	itt	lt
 800de8e:	ea6f 0c0c 	mvnlt.w	ip, ip
 800de92:	fa5f fc8c 	uxtblt.w	ip, ip
        if(p->inv) m = 255 - m;
 800de96:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800de9a:	f013 0f02 	tst.w	r3, #2
 800de9e:	bf1c      	itt	ne
 800dea0:	ea6f 0c0c 	mvnne.w	ip, ip
 800dea4:	fa5f fc8c 	uxtbne.w	ip, ip
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800dea8:	eb0e 0002 	add.w	r0, lr, r2
 800deac:	f81e 3002 	ldrb.w	r3, [lr, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800deb0:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
 800deb4:	d80a      	bhi.n	800decc <lv_draw_mask_line+0x1c8>
    if(mask_new <= LV_OPA_MIN) return 0;
 800deb6:	f1bc 0f02 	cmp.w	ip, #2
 800deba:	d90f      	bls.n	800dedc <lv_draw_mask_line+0x1d8>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800debc:	fb0c f303 	mul.w	r3, ip, r3
 800dec0:	eb03 2603 	add.w	r6, r3, r3, lsl #8
 800dec4:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
 800dec8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800decc:	7003      	strb	r3, [r0, #0]
    if(p->inv) {
 800dece:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ded2:	f013 0f02 	tst.w	r3, #2
 800ded6:	d108      	bne.n	800deea <lv_draw_mask_line+0x1e6>
        k++;
 800ded8:	3201      	adds	r2, #1
        if(k < 0) {
 800deda:	e014      	b.n	800df06 <lv_draw_mask_line+0x202>
    if(mask_new <= LV_OPA_MIN) return 0;
 800dedc:	2300      	movs	r3, #0
 800dede:	e7f5      	b.n	800decc <lv_draw_mask_line+0x1c8>
    if(p->inv) {
 800dee0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800dee4:	f010 0002 	ands.w	r0, r0, #2
 800dee8:	d00b      	beq.n	800df02 <lv_draw_mask_line+0x1fe>
        if(k > len) {
 800deea:	428d      	cmp	r5, r1
 800deec:	f2c0 811d 	blt.w	800e12a <lv_draw_mask_line+0x426>
        if(k >= 0) {
 800def0:	2900      	cmp	r1, #0
 800def2:	da01      	bge.n	800def8 <lv_draw_mask_line+0x1f4>
    return LV_DRAW_MASK_RES_CHANGED;
 800def4:	2002      	movs	r0, #2
 800def6:	e01e      	b.n	800df36 <lv_draw_mask_line+0x232>
            lv_memset_00(&mask_buf[0], k);
 800def8:	4670      	mov	r0, lr
 800defa:	f013 ff35 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800defe:	2002      	movs	r0, #2
 800df00:	e019      	b.n	800df36 <lv_draw_mask_line+0x232>
        if(k < 0) {
 800df02:	3201      	adds	r2, #1
 800df04:	d417      	bmi.n	800df36 <lv_draw_mask_line+0x232>
        if(k <= len) {
 800df06:	4295      	cmp	r5, r2
 800df08:	da01      	bge.n	800df0e <lv_draw_mask_line+0x20a>
    return LV_DRAW_MASK_RES_CHANGED;
 800df0a:	2002      	movs	r0, #2
 800df0c:	e013      	b.n	800df36 <lv_draw_mask_line+0x232>
            lv_memset_00(&mask_buf[k], len - k);
 800df0e:	1aa9      	subs	r1, r5, r2
 800df10:	eb0e 0002 	add.w	r0, lr, r2
 800df14:	f013 ff28 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800df18:	2002      	movs	r0, #2
 800df1a:	e00c      	b.n	800df36 <lv_draw_mask_line+0x232>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800df1c:	69a5      	ldr	r5, [r4, #24]
 800df1e:	fb05 fc0c 	mul.w	ip, r5, ip
 800df22:	ea4f 21ac 	mov.w	r1, ip, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800df26:	2d00      	cmp	r5, #0
 800df28:	bfcc      	ite	gt
 800df2a:	1c4f      	addgt	r7, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800df2c:	460f      	movle	r7, r1
    if(x_at_y < abs_x) {
 800df2e:	42ba      	cmp	r2, r7
 800df30:	dd03      	ble.n	800df3a <lv_draw_mask_line+0x236>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800df32:	f3c6 0040 	ubfx	r0, r6, #1, #1
}
 800df36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(x_at_y > abs_x + len) {
 800df3a:	18d7      	adds	r7, r2, r3
 800df3c:	42b9      	cmp	r1, r7
 800df3e:	dd04      	ble.n	800df4a <lv_draw_mask_line+0x246>
        if(p->inv) {
 800df40:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800df44:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800df48:	e7f5      	b.n	800df36 <lv_draw_mask_line+0x232>
    int32_t xsi = xs >> 8;
 800df4a:	f34c 288d 	sbfx	r8, ip, #10, #14
    int32_t xsf = xs & 0xFF;
 800df4e:	f3cc 0787 	ubfx	r7, ip, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800df52:	44ac      	add	ip, r5
 800df54:	ea4f 290c 	mov.w	r9, ip, lsl #8
    int32_t xei = xe >> 8;
 800df58:	f34c 2c8d 	sbfx	ip, ip, #10, #14
    k = xsi - abs_x;
 800df5c:	eba8 0102 	sub.w	r1, r8, r2
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800df60:	45e0      	cmp	r8, ip
 800df62:	d053      	beq.n	800e00c <lv_draw_mask_line+0x308>
 800df64:	2d00      	cmp	r5, #0
 800df66:	db4c      	blt.n	800e002 <lv_draw_mask_line+0x2fe>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800df68:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800df6c:	69e2      	ldr	r2, [r4, #28]
 800df6e:	fb07 f202 	mul.w	r2, r7, r2
 800df72:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
 800df74:	2900      	cmp	r1, #0
 800df76:	f2c0 80a6 	blt.w	800e0c6 <lv_draw_mask_line+0x3c2>
 800df7a:	428b      	cmp	r3, r1
 800df7c:	dd1a      	ble.n	800dfb4 <lv_draw_mask_line+0x2b0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800df7e:	fb02 f707 	mul.w	r7, r2, r7
 800df82:	f3c7 2547 	ubfx	r5, r7, #9, #8
                if(p->inv) m = 255 - m;
 800df86:	f016 0f02 	tst.w	r6, #2
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800df8a:	bf04      	itt	eq
 800df8c:	43ed      	mvneq	r5, r5
 800df8e:	b2ed      	uxtbeq	r5, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800df90:	eb0e 0701 	add.w	r7, lr, r1
 800df94:	f81e 6001 	ldrb.w	r6, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800df98:	2dfc      	cmp	r5, #252	; 0xfc
 800df9a:	d80a      	bhi.n	800dfb2 <lv_draw_mask_line+0x2ae>
    if(mask_new <= LV_OPA_MIN) return 0;
 800df9c:	2d02      	cmp	r5, #2
 800df9e:	f240 8090 	bls.w	800e0c2 <lv_draw_mask_line+0x3be>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800dfa2:	fb06 f505 	mul.w	r5, r6, r5
 800dfa6:	eb05 2605 	add.w	r6, r5, r5, lsl #8
 800dfaa:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 800dfae:	f3c5 56c7 	ubfx	r6, r5, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800dfb2:	703e      	strb	r6, [r7, #0]
            k++;
 800dfb4:	1c4e      	adds	r6, r1, #1
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800dfb6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800dfba:	69a5      	ldr	r5, [r4, #24]
 800dfbc:	fb02 f505 	mul.w	r5, r2, r5
 800dfc0:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
 800dfc2:	42b3      	cmp	r3, r6
 800dfc4:	f340 8081 	ble.w	800e0ca <lv_draw_mask_line+0x3c6>
                m = ((255 - y_inters) * x_inters) >> 9;
 800dfc8:	fb05 f202 	mul.w	r2, r5, r2
 800dfcc:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
 800dfd0:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
 800dfd4:	f015 0f02 	tst.w	r5, #2
 800dfd8:	bf1c      	itt	ne
 800dfda:	43d2      	mvnne	r2, r2
 800dfdc:	b2d2      	uxtbne	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800dfde:	eb0e 0706 	add.w	r7, lr, r6
 800dfe2:	f81e 5006 	ldrb.w	r5, [lr, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800dfe6:	2afc      	cmp	r2, #252	; 0xfc
 800dfe8:	d809      	bhi.n	800dffe <lv_draw_mask_line+0x2fa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800dfea:	2a02      	cmp	r2, #2
 800dfec:	d97f      	bls.n	800e0ee <lv_draw_mask_line+0x3ea>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800dfee:	fb05 f202 	mul.w	r2, r5, r2
 800dff2:	eb02 2502 	add.w	r5, r2, r2, lsl #8
 800dff6:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
 800dffa:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800dffe:	703d      	strb	r5, [r7, #0]
 800e000:	e063      	b.n	800e0ca <lv_draw_mask_line+0x3c6>
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800e002:	2f00      	cmp	r7, #0
 800e004:	f040 80f8 	bne.w	800e1f8 <lv_draw_mask_line+0x4f4>
        k--;
 800e008:	3901      	subs	r1, #1
        xsf = 0xFF;
 800e00a:	27ff      	movs	r7, #255	; 0xff
        if(k >= 0 && k < len) {
 800e00c:	2900      	cmp	r1, #0
 800e00e:	db2d      	blt.n	800e06c <lv_draw_mask_line+0x368>
 800e010:	428b      	cmp	r3, r1
 800e012:	dd2b      	ble.n	800e06c <lv_draw_mask_line+0x368>
    int32_t xef = xe & 0xFF;
 800e014:	f3c9 2587 	ubfx	r5, r9, #10, #8
            m = (xsf + xef) >> 1;
 800e018:	443d      	add	r5, r7
 800e01a:	f3c5 0547 	ubfx	r5, r5, #1, #8
            if(p->inv) m = 255 - m;
 800e01e:	f016 0f02 	tst.w	r6, #2
 800e022:	bf1c      	itt	ne
 800e024:	43ed      	mvnne	r5, r5
 800e026:	b2ed      	uxtbne	r5, r5
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e028:	eb0e 0701 	add.w	r7, lr, r1
 800e02c:	f81e 6001 	ldrb.w	r6, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e030:	2dfc      	cmp	r5, #252	; 0xfc
 800e032:	d809      	bhi.n	800e048 <lv_draw_mask_line+0x344>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e034:	2d02      	cmp	r5, #2
 800e036:	d917      	bls.n	800e068 <lv_draw_mask_line+0x364>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e038:	fb06 f505 	mul.w	r5, r6, r5
 800e03c:	eb05 2605 	add.w	r6, r5, r5, lsl #8
 800e040:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 800e044:	f3c5 56c7 	ubfx	r6, r5, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e048:	703e      	strb	r6, [r7, #0]
        if(p->inv) {
 800e04a:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 800e04e:	f014 0f02 	tst.w	r4, #2
 800e052:	f000 80c7 	beq.w	800e1e4 <lv_draw_mask_line+0x4e0>
            k = xsi - abs_x;
 800e056:	ebac 0102 	sub.w	r1, ip, r2
            if(k >= len) {
 800e05a:	428b      	cmp	r3, r1
 800e05c:	f77f af6b 	ble.w	800df36 <lv_draw_mask_line+0x232>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800e060:	2900      	cmp	r1, #0
 800e062:	da12      	bge.n	800e08a <lv_draw_mask_line+0x386>
    return LV_DRAW_MASK_RES_CHANGED;
 800e064:	2002      	movs	r0, #2
 800e066:	e766      	b.n	800df36 <lv_draw_mask_line+0x232>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e068:	4606      	mov	r6, r0
 800e06a:	e7ed      	b.n	800e048 <lv_draw_mask_line+0x344>
        if(p->inv) {
 800e06c:	f016 0602 	ands.w	r6, r6, #2
 800e070:	d1f1      	bne.n	800e056 <lv_draw_mask_line+0x352>
        k++;
 800e072:	1c48      	adds	r0, r1, #1
 800e074:	4298      	cmp	r0, r3
 800e076:	bfa8      	it	ge
 800e078:	4618      	movge	r0, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d057      	beq.n	800e12e <lv_draw_mask_line+0x42a>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e07e:	2800      	cmp	r0, #0
    return LV_DRAW_MASK_RES_CHANGED;
 800e080:	bfd8      	it	le
 800e082:	2002      	movle	r0, #2
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e084:	f77f af57 	ble.w	800df36 <lv_draw_mask_line+0x232>
 800e088:	e0b0      	b.n	800e1ec <lv_draw_mask_line+0x4e8>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800e08a:	4670      	mov	r0, lr
 800e08c:	f013 fe6c 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e090:	2002      	movs	r0, #2
 800e092:	e750      	b.n	800df36 <lv_draw_mask_line+0x232>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e094:	4606      	mov	r6, r0
 800e096:	e0d2      	b.n	800e23e <lv_draw_mask_line+0x53a>
 800e098:	4605      	mov	r5, r0
 800e09a:	e0f6      	b.n	800e28a <lv_draw_mask_line+0x586>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800e09c:	4631      	mov	r1, r6
 800e09e:	4670      	mov	r0, lr
 800e0a0:	f013 fe62 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e0a4:	2002      	movs	r0, #2
 800e0a6:	e746      	b.n	800df36 <lv_draw_mask_line+0x232>
            k += 2;
 800e0a8:	1c48      	adds	r0, r1, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800e0aa:	4283      	cmp	r3, r0
 800e0ac:	db43      	blt.n	800e136 <lv_draw_mask_line+0x432>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	da01      	bge.n	800e0b6 <lv_draw_mask_line+0x3b2>
    return LV_DRAW_MASK_RES_CHANGED;
 800e0b2:	2002      	movs	r0, #2
 800e0b4:	e73f      	b.n	800df36 <lv_draw_mask_line+0x232>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800e0b6:	1a19      	subs	r1, r3, r0
 800e0b8:	4470      	add	r0, lr
 800e0ba:	f013 fe55 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e0be:	2002      	movs	r0, #2
 800e0c0:	e739      	b.n	800df36 <lv_draw_mask_line+0x232>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	e775      	b.n	800dfb2 <lv_draw_mask_line+0x2ae>
            if(k >= 0 && k < len) {
 800e0c6:	1c4e      	adds	r6, r1, #1
 800e0c8:	d50b      	bpl.n	800e0e2 <lv_draw_mask_line+0x3de>
            if(p->inv) {
 800e0ca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e0ce:	f012 0202 	ands.w	r2, r2, #2
 800e0d2:	d013      	beq.n	800e0fc <lv_draw_mask_line+0x3f8>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800e0d4:	428b      	cmp	r3, r1
 800e0d6:	f6ff af2e 	blt.w	800df36 <lv_draw_mask_line+0x232>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800e0da:	2900      	cmp	r1, #0
 800e0dc:	da09      	bge.n	800e0f2 <lv_draw_mask_line+0x3ee>
    return LV_DRAW_MASK_RES_CHANGED;
 800e0de:	2002      	movs	r0, #2
 800e0e0:	e729      	b.n	800df36 <lv_draw_mask_line+0x232>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800e0e2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800e0e6:	fb02 f505 	mul.w	r5, r2, r5
 800e0ea:	12ad      	asrs	r5, r5, #10
 800e0ec:	e769      	b.n	800dfc2 <lv_draw_mask_line+0x2be>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	e785      	b.n	800dffe <lv_draw_mask_line+0x2fa>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800e0f2:	4670      	mov	r0, lr
 800e0f4:	f013 fe38 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e0f8:	2002      	movs	r0, #2
 800e0fa:	e71c      	b.n	800df36 <lv_draw_mask_line+0x232>
            k++;
 800e0fc:	1c88      	adds	r0, r1, #2
 800e0fe:	4298      	cmp	r0, r3
 800e100:	bfa8      	it	ge
 800e102:	4618      	movge	r0, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e104:	b1c8      	cbz	r0, 800e13a <lv_draw_mask_line+0x436>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e106:	2800      	cmp	r0, #0
 800e108:	dc01      	bgt.n	800e10e <lv_draw_mask_line+0x40a>
    return LV_DRAW_MASK_RES_CHANGED;
 800e10a:	2002      	movs	r0, #2
 800e10c:	e713      	b.n	800df36 <lv_draw_mask_line+0x232>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e10e:	1a19      	subs	r1, r3, r0
 800e110:	4470      	add	r0, lr
 800e112:	f013 fe29 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e116:	2002      	movs	r0, #2
 800e118:	e70d      	b.n	800df36 <lv_draw_mask_line+0x232>
                return LV_DRAW_MASK_RES_TRANSP;
 800e11a:	2000      	movs	r0, #0
 800e11c:	e70b      	b.n	800df36 <lv_draw_mask_line+0x232>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 800e11e:	2001      	movs	r0, #1
 800e120:	e709      	b.n	800df36 <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e122:	2001      	movs	r0, #1
 800e124:	e707      	b.n	800df36 <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e126:	4620      	mov	r0, r4
 800e128:	e705      	b.n	800df36 <lv_draw_mask_line+0x232>
            return LV_DRAW_MASK_RES_TRANSP;
 800e12a:	2000      	movs	r0, #0
 800e12c:	e703      	b.n	800df36 <lv_draw_mask_line+0x232>
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e12e:	4630      	mov	r0, r6
 800e130:	e701      	b.n	800df36 <lv_draw_mask_line+0x232>
    return LV_DRAW_MASK_RES_CHANGED;
 800e132:	2002      	movs	r0, #2
 800e134:	e6ff      	b.n	800df36 <lv_draw_mask_line+0x232>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800e136:	2001      	movs	r0, #1
 800e138:	e6fd      	b.n	800df36 <lv_draw_mask_line+0x232>
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e13a:	4610      	mov	r0, r2
 800e13c:	e6fb      	b.n	800df36 <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e13e:	4620      	mov	r0, r4
 800e140:	e6f9      	b.n	800df36 <lv_draw_mask_line+0x232>
    int32_t k = xei - abs_x;
 800e142:	1a8a      	subs	r2, r1, r2
 800e144:	4611      	mov	r1, r2
    if(xef == 0) px_h = 255;
 800e146:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e14a:	e039      	b.n	800e1c0 <lv_draw_mask_line+0x4bc>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800e14c:	461d      	mov	r5, r3
 800e14e:	4413      	add	r3, r2
 800e150:	fb03 f000 	mul.w	r0, r3, r0
        if(y_at_x < abs_y) {
 800e154:	ebbc 2fa0 	cmp.w	ip, r0, asr #10
 800e158:	f73f ae54 	bgt.w	800de04 <lv_draw_mask_line+0x100>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 800e15c:	69a3      	ldr	r3, [r4, #24]
 800e15e:	fb03 fc0c 	mul.w	ip, r3, ip
 800e162:	f34c 0c95 	sbfx	ip, ip, #2, #22
    int32_t xei = xe >> 8;
 800e166:	ea4f 212c 	mov.w	r1, ip, asr #8
    if(xef == 0) px_h = 255;
 800e16a:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800e16e:	d0e8      	beq.n	800e142 <lv_draw_mask_line+0x43e>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800e170:	f1cc 03ff 	rsb	r3, ip, #255	; 0xff
 800e174:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800e176:	fb03 f707 	mul.w	r7, r3, r7
 800e17a:	123f      	asrs	r7, r7, #8
 800e17c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
        if(k >= 0 && k < len) {
 800e180:	1a89      	subs	r1, r1, r2
 800e182:	d41c      	bmi.n	800e1be <lv_draw_mask_line+0x4ba>
 800e184:	42a9      	cmp	r1, r5
 800e186:	da1a      	bge.n	800e1be <lv_draw_mask_line+0x4ba>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800e188:	fb07 f303 	mul.w	r3, r7, r3
 800e18c:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
 800e190:	f016 0f02 	tst.w	r6, #2
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800e194:	bf04      	itt	eq
 800e196:	43db      	mvneq	r3, r3
 800e198:	b2db      	uxtbeq	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e19a:	eb0e 0001 	add.w	r0, lr, r1
 800e19e:	f81e 2001 	ldrb.w	r2, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e1a2:	2bfc      	cmp	r3, #252	; 0xfc
 800e1a4:	d80a      	bhi.n	800e1bc <lv_draw_mask_line+0x4b8>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	f67f ae36 	bls.w	800de18 <lv_draw_mask_line+0x114>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e1ac:	fb02 f303 	mul.w	r3, r2, r3
 800e1b0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 800e1b4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800e1b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e1bc:	7002      	strb	r2, [r0, #0]
        k++;
 800e1be:	1c4a      	adds	r2, r1, #1
 800e1c0:	eb0e 0002 	add.w	r0, lr, r2
    if(mask_new <= LV_OPA_MIN) return 0;
 800e1c4:	2700      	movs	r7, #0
 800e1c6:	e633      	b.n	800de30 <lv_draw_mask_line+0x12c>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800e1c8:	461d      	mov	r5, r3
 800e1ca:	4413      	add	r3, r2
 800e1cc:	fb03 f000 	mul.w	r0, r3, r0
        if(y_at_x > abs_y) {
 800e1d0:	ebbc 2fa0 	cmp.w	ip, r0, asr #10
 800e1d4:	f6ff ae1b 	blt.w	800de0e <lv_draw_mask_line+0x10a>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800e1d8:	69a3      	ldr	r3, [r4, #24]
 800e1da:	fb0c 3c03 	mla	ip, ip, r3, r3
 800e1de:	f34c 0c95 	sbfx	ip, ip, #2, #22
 800e1e2:	e7c0      	b.n	800e166 <lv_draw_mask_line+0x462>
        k++;
 800e1e4:	1c48      	adds	r0, r1, #1
 800e1e6:	4298      	cmp	r0, r3
 800e1e8:	bfa8      	it	ge
 800e1ea:	4618      	movge	r0, r3
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e1ec:	1a19      	subs	r1, r3, r0
 800e1ee:	4470      	add	r0, lr
 800e1f0:	f013 fdba 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e1f4:	2002      	movs	r0, #2
 800e1f6:	e69e      	b.n	800df36 <lv_draw_mask_line+0x232>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800e1f8:	69e2      	ldr	r2, [r4, #28]
 800e1fa:	4252      	negs	r2, r2
 800e1fc:	fb07 f202 	mul.w	r2, r7, r2
 800e200:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
 800e202:	2900      	cmp	r1, #0
 800e204:	db1c      	blt.n	800e240 <lv_draw_mask_line+0x53c>
 800e206:	428b      	cmp	r3, r1
 800e208:	dd1a      	ble.n	800e240 <lv_draw_mask_line+0x53c>
                m = (y_inters * xsf) >> 9;
 800e20a:	fb02 f507 	mul.w	r5, r2, r7
 800e20e:	f3c5 2547 	ubfx	r5, r5, #9, #8
                if(p->inv) m = 255 - m;
 800e212:	f016 0f02 	tst.w	r6, #2
 800e216:	bf1c      	itt	ne
 800e218:	43ed      	mvnne	r5, r5
 800e21a:	b2ed      	uxtbne	r5, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e21c:	eb0e 0701 	add.w	r7, lr, r1
 800e220:	f81e 6001 	ldrb.w	r6, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e224:	2dfc      	cmp	r5, #252	; 0xfc
 800e226:	d80a      	bhi.n	800e23e <lv_draw_mask_line+0x53a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e228:	2d02      	cmp	r5, #2
 800e22a:	f67f af33 	bls.w	800e094 <lv_draw_mask_line+0x390>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e22e:	fb06 f505 	mul.w	r5, r6, r5
 800e232:	eb05 2605 	add.w	r6, r5, r5, lsl #8
 800e236:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 800e23a:	f3c5 56c7 	ubfx	r6, r5, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e23e:	703e      	strb	r6, [r7, #0]
            if(k >= 0 && k < len) {
 800e240:	1e4e      	subs	r6, r1, #1
 800e242:	d424      	bmi.n	800e28e <lv_draw_mask_line+0x58a>
 800e244:	42b3      	cmp	r3, r6
 800e246:	dd22      	ble.n	800e28e <lv_draw_mask_line+0x58a>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800e248:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 800e24c:	69a5      	ldr	r5, [r4, #24]
 800e24e:	426d      	negs	r5, r5
 800e250:	fb07 f205 	mul.w	r2, r7, r5
 800e254:	1292      	asrs	r2, r2, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800e256:	fb07 f202 	mul.w	r2, r7, r2
 800e25a:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
 800e25e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
 800e262:	f015 0f02 	tst.w	r5, #2
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800e266:	bf04      	itt	eq
 800e268:	43d2      	mvneq	r2, r2
 800e26a:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e26c:	f81e 5006 	ldrb.w	r5, [lr, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e270:	2afc      	cmp	r2, #252	; 0xfc
 800e272:	d80a      	bhi.n	800e28a <lv_draw_mask_line+0x586>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e274:	2a02      	cmp	r2, #2
 800e276:	f67f af0f 	bls.w	800e098 <lv_draw_mask_line+0x394>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e27a:	fb05 f202 	mul.w	r2, r5, r2
 800e27e:	eb02 2502 	add.w	r5, r2, r2, lsl #8
 800e282:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
 800e286:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e28a:	f80e 5006 	strb.w	r5, [lr, r6]
            if(p->inv) {
 800e28e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e292:	f012 0f02 	tst.w	r2, #2
 800e296:	f43f af07 	beq.w	800e0a8 <lv_draw_mask_line+0x3a4>
                if(k > len) k = len;
 800e29a:	42b3      	cmp	r3, r6
 800e29c:	f6ff af49 	blt.w	800e132 <lv_draw_mask_line+0x42e>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800e2a0:	2e00      	cmp	r6, #0
 800e2a2:	f73f aefb 	bgt.w	800e09c <lv_draw_mask_line+0x398>
    return LV_DRAW_MASK_RES_CHANGED;
 800e2a6:	2002      	movs	r0, #2
 800e2a8:	e645      	b.n	800df36 <lv_draw_mask_line+0x232>

0800e2aa <lv_draw_mask_angle>:
{
 800e2aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	4680      	mov	r8, r0
 800e2b2:	460f      	mov	r7, r1
 800e2b4:	4615      	mov	r5, r2
 800e2b6:	4699      	mov	r9, r3
 800e2b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800e2ba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e2be:	1ad6      	subs	r6, r2, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800e2c0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800e2c4:	1a89      	subs	r1, r1, r2
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800e2c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2ca:	2ab3      	cmp	r2, #179	; 0xb3
 800e2cc:	dc71      	bgt.n	800e3b2 <lv_draw_mask_angle+0x108>
 800e2ce:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800e2d2:	28b3      	cmp	r0, #179	; 0xb3
 800e2d4:	f300 814b 	bgt.w	800e56e <lv_draw_mask_angle+0x2c4>
 800e2d8:	2a00      	cmp	r2, #0
 800e2da:	f000 814a 	beq.w	800e572 <lv_draw_mask_angle+0x2c8>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	f000 80f6 	beq.w	800e4d0 <lv_draw_mask_angle+0x226>
 800e2e4:	4282      	cmp	r2, r0
 800e2e6:	f340 80f3 	ble.w	800e4d0 <lv_draw_mask_angle+0x226>
        if(abs_y < p->cfg.vertex_p.y) {
 800e2ea:	42ab      	cmp	r3, r5
 800e2ec:	f300 812a 	bgt.w	800e544 <lv_draw_mask_angle+0x29a>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800e2f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e2f2:	fb06 f303 	mul.w	r3, r6, r3
 800e2f6:	ea4f 2ca3 	mov.w	ip, r3, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800e2fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e2fc:	fb06 3603 	mla	r6, r6, r3, r3
 800e300:	12b6      	asrs	r6, r6, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e302:	b292      	uxth	r2, r2
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800e304:	1e53      	subs	r3, r2, #1
 800e306:	b29b      	uxth	r3, r3
 800e308:	2b59      	cmp	r3, #89	; 0x59
 800e30a:	d82d      	bhi.n	800e368 <lv_draw_mask_angle+0xbe>
 800e30c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e310:	b280      	uxth	r0, r0
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800e312:	1e43      	subs	r3, r0, #1
 800e314:	b29b      	uxth	r3, r3
 800e316:	2b59      	cmp	r3, #89	; 0x59
 800e318:	d82d      	bhi.n	800e376 <lv_draw_mask_angle+0xcc>
 800e31a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800e31e:	ebac 0c06 	sub.w	ip, ip, r6
        int32_t tmp = start_angle_last + dist - rel_x;
 800e322:	eb06 066c 	add.w	r6, r6, ip, asr #1
 800e326:	1a76      	subs	r6, r6, r1
        if(tmp > len) tmp = len;
 800e328:	454e      	cmp	r6, r9
 800e32a:	bfa8      	it	ge
 800e32c:	464e      	movge	r6, r9
        if(tmp > 0) {
 800e32e:	2e00      	cmp	r6, #0
 800e330:	dc28      	bgt.n	800e384 <lv_draw_mask_angle+0xda>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800e332:	f04f 0a01 	mov.w	sl, #1
        if(tmp > len) tmp = len;
 800e336:	454e      	cmp	r6, r9
 800e338:	bfa8      	it	ge
 800e33a:	464e      	movge	r6, r9
        if(tmp < 0) tmp = 0;
 800e33c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800e340:	44d8      	add	r8, fp
 800e342:	fa1f f18b 	uxth.w	r1, fp
 800e346:	eba9 0301 	sub.w	r3, r9, r1
 800e34a:	4439      	add	r1, r7
 800e34c:	343c      	adds	r4, #60	; 0x3c
 800e34e:	9400      	str	r4, [sp, #0]
 800e350:	b21b      	sxth	r3, r3
 800e352:	462a      	mov	r2, r5
 800e354:	b209      	sxth	r1, r1
 800e356:	4640      	mov	r0, r8
 800e358:	f7ff fcd4 	bl	800dd04 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800e35c:	4606      	mov	r6, r0
 800e35e:	b310      	cbz	r0, 800e3a6 <lv_draw_mask_angle+0xfc>
        else return LV_DRAW_MASK_RES_CHANGED;
 800e360:	45b2      	cmp	sl, r6
 800e362:	bf18      	it	ne
 800e364:	2602      	movne	r6, #2
 800e366:	e0af      	b.n	800e4c8 <lv_draw_mask_angle+0x21e>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800e368:	3a5b      	subs	r2, #91	; 0x5b
 800e36a:	b293      	uxth	r3, r2
 800e36c:	2bb2      	cmp	r3, #178	; 0xb2
 800e36e:	bf98      	it	ls
 800e370:	ea06 76e6 	andls.w	r6, r6, r6, asr #31
 800e374:	e7cc      	b.n	800e310 <lv_draw_mask_angle+0x66>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800e376:	385b      	subs	r0, #91	; 0x5b
 800e378:	b283      	uxth	r3, r0
 800e37a:	2bb2      	cmp	r3, #178	; 0xb2
 800e37c:	bf98      	it	ls
 800e37e:	ea06 76e6 	andls.w	r6, r6, r6, asr #31
 800e382:	e7cc      	b.n	800e31e <lv_draw_mask_angle+0x74>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 800e384:	f104 0310 	add.w	r3, r4, #16
 800e388:	9300      	str	r3, [sp, #0]
 800e38a:	b233      	sxth	r3, r6
 800e38c:	462a      	mov	r2, r5
 800e38e:	4639      	mov	r1, r7
 800e390:	4640      	mov	r0, r8
 800e392:	f7ff fcb7 	bl	800dd04 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800e396:	4682      	mov	sl, r0
 800e398:	2800      	cmp	r0, #0
 800e39a:	d1cc      	bne.n	800e336 <lv_draw_mask_angle+0x8c>
                lv_memset_00(&mask_buf[0], tmp);
 800e39c:	4631      	mov	r1, r6
 800e39e:	4640      	mov	r0, r8
 800e3a0:	f013 fce2 	bl	8021d68 <lv_memset_00>
 800e3a4:	e7c7      	b.n	800e336 <lv_draw_mask_angle+0x8c>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800e3a6:	eba9 010b 	sub.w	r1, r9, fp
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f013 fcdc 	bl	8021d68 <lv_memset_00>
 800e3b0:	e7d6      	b.n	800e360 <lv_draw_mask_angle+0xb6>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 800e3b2:	2ab4      	cmp	r2, #180	; 0xb4
 800e3b4:	dd71      	ble.n	800e49a <lv_draw_mask_angle+0x1f0>
 800e3b6:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800e3ba:	28b4      	cmp	r0, #180	; 0xb4
 800e3bc:	f340 808c 	ble.w	800e4d8 <lv_draw_mask_angle+0x22e>
 800e3c0:	4282      	cmp	r2, r0
 800e3c2:	f340 8089 	ble.w	800e4d8 <lv_draw_mask_angle+0x22e>
        if(abs_y > p->cfg.vertex_p.y) {
 800e3c6:	42ab      	cmp	r3, r5
 800e3c8:	f2c0 80be 	blt.w	800e548 <lv_draw_mask_angle+0x29e>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800e3cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e3ce:	fb06 f303 	mul.w	r3, r6, r3
 800e3d2:	129b      	asrs	r3, r3, #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800e3d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e3d8:	fb06 cc0c 	mla	ip, r6, ip, ip
 800e3dc:	ea4f 2cac 	mov.w	ip, ip, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e3e0:	b292      	uxth	r2, r2
 800e3e2:	f2a2 160f 	subw	r6, r2, #271	; 0x10f
 800e3e6:	b2b6      	uxth	r6, r6
 800e3e8:	2e58      	cmp	r6, #88	; 0x58
 800e3ea:	d830      	bhi.n	800e44e <lv_draw_mask_angle+0x1a4>
 800e3ec:	f1bc 0f00 	cmp.w	ip, #0
 800e3f0:	da33      	bge.n	800e45a <lv_draw_mask_angle+0x1b0>
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e3f2:	b280      	uxth	r0, r0
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e3f4:	f04f 0c00 	mov.w	ip, #0
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800e3f8:	385b      	subs	r0, #91	; 0x5b
 800e3fa:	b280      	uxth	r0, r0
 800e3fc:	28b2      	cmp	r0, #178	; 0xb2
 800e3fe:	bf98      	it	ls
 800e400:	ea0c 7cec 	andls.w	ip, ip, ip, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800e404:	eba3 060c 	sub.w	r6, r3, ip
        int32_t tmp = start_angle_last + dist - rel_x;
 800e408:	eb0c 0666 	add.w	r6, ip, r6, asr #1
 800e40c:	1a76      	subs	r6, r6, r1
        if(tmp > len) tmp = len;
 800e40e:	454e      	cmp	r6, r9
 800e410:	bfa8      	it	ge
 800e412:	464e      	movge	r6, r9
        if(tmp > 0) {
 800e414:	2e00      	cmp	r6, #0
 800e416:	dc29      	bgt.n	800e46c <lv_draw_mask_angle+0x1c2>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800e418:	f04f 0a01 	mov.w	sl, #1
        if(tmp > len) tmp = len;
 800e41c:	454e      	cmp	r6, r9
 800e41e:	bfa8      	it	ge
 800e420:	464e      	movge	r6, r9
        if(tmp < 0) tmp = 0;
 800e422:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800e426:	44d8      	add	r8, fp
 800e428:	fa1f f18b 	uxth.w	r1, fp
 800e42c:	eba9 0301 	sub.w	r3, r9, r1
 800e430:	4439      	add	r1, r7
 800e432:	3410      	adds	r4, #16
 800e434:	9400      	str	r4, [sp, #0]
 800e436:	b21b      	sxth	r3, r3
 800e438:	462a      	mov	r2, r5
 800e43a:	b209      	sxth	r1, r1
 800e43c:	4640      	mov	r0, r8
 800e43e:	f7ff fc61 	bl	800dd04 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800e442:	4606      	mov	r6, r0
 800e444:	b318      	cbz	r0, 800e48e <lv_draw_mask_angle+0x1e4>
        else return LV_DRAW_MASK_RES_CHANGED;
 800e446:	45b2      	cmp	sl, r6
 800e448:	bf18      	it	ne
 800e44a:	2602      	movne	r6, #2
 800e44c:	e03c      	b.n	800e4c8 <lv_draw_mask_angle+0x21e>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800e44e:	3a5b      	subs	r2, #91	; 0x5b
 800e450:	b292      	uxth	r2, r2
 800e452:	2ab2      	cmp	r2, #178	; 0xb2
 800e454:	bf98      	it	ls
 800e456:	ea0c 7cec 	andls.w	ip, ip, ip, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e45a:	b280      	uxth	r0, r0
 800e45c:	f2a0 120f 	subw	r2, r0, #271	; 0x10f
 800e460:	b292      	uxth	r2, r2
 800e462:	2a58      	cmp	r2, #88	; 0x58
 800e464:	d8c8      	bhi.n	800e3f8 <lv_draw_mask_angle+0x14e>
 800e466:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
 800e46a:	e7cb      	b.n	800e404 <lv_draw_mask_angle+0x15a>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 800e46c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	b233      	sxth	r3, r6
 800e474:	462a      	mov	r2, r5
 800e476:	4639      	mov	r1, r7
 800e478:	4640      	mov	r0, r8
 800e47a:	f7ff fc43 	bl	800dd04 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800e47e:	4682      	mov	sl, r0
 800e480:	2800      	cmp	r0, #0
 800e482:	d1cb      	bne.n	800e41c <lv_draw_mask_angle+0x172>
                lv_memset_00(&mask_buf[0], tmp);
 800e484:	4631      	mov	r1, r6
 800e486:	4640      	mov	r0, r8
 800e488:	f013 fc6e 	bl	8021d68 <lv_memset_00>
 800e48c:	e7c6      	b.n	800e41c <lv_draw_mask_angle+0x172>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800e48e:	eba9 010b 	sub.w	r1, r9, fp
 800e492:	4640      	mov	r0, r8
 800e494:	f013 fc68 	bl	8021d68 <lv_memset_00>
 800e498:	e7d5      	b.n	800e446 <lv_draw_mask_angle+0x19c>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800e49a:	42ab      	cmp	r3, r5
 800e49c:	dc5c      	bgt.n	800e558 <lv_draw_mask_angle+0x2ae>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800e49e:	2603      	movs	r6, #3
        if(p->cfg.end_angle == 180) {
 800e4a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800e4a4:	2bb4      	cmp	r3, #180	; 0xb4
 800e4a6:	d055      	beq.n	800e554 <lv_draw_mask_angle+0x2aa>
        else if(p->cfg.end_angle == 0) {
 800e4a8:	bb6b      	cbnz	r3, 800e506 <lv_draw_mask_angle+0x25c>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800e4aa:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800e4ae:	42a8      	cmp	r0, r5
 800e4b0:	bfcc      	ite	gt
 800e4b2:	2001      	movgt	r0, #1
 800e4b4:	2003      	movle	r0, #3
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800e4b6:	b13e      	cbz	r6, 800e4c8 <lv_draw_mask_angle+0x21e>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 800e4b8:	2e03      	cmp	r6, #3
 800e4ba:	d03e      	beq.n	800e53a <lv_draw_mask_angle+0x290>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 800e4bc:	2e01      	cmp	r6, #1
 800e4be:	d145      	bne.n	800e54c <lv_draw_mask_angle+0x2a2>
 800e4c0:	2801      	cmp	r0, #1
 800e4c2:	bf0c      	ite	eq
 800e4c4:	4606      	moveq	r6, r0
 800e4c6:	2602      	movne	r6, #2
}
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	b003      	add	sp, #12
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800e4d0:	42ab      	cmp	r3, r5
 800e4d2:	dd03      	ble.n	800e4dc <lv_draw_mask_angle+0x232>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800e4d4:	2603      	movs	r6, #3
 800e4d6:	e040      	b.n	800e55a <lv_draw_mask_angle+0x2b0>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800e4d8:	42ab      	cmp	r3, r5
 800e4da:	dd46      	ble.n	800e56a <lv_draw_mask_angle+0x2c0>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 800e4dc:	f104 0310 	add.w	r3, r4, #16
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	464b      	mov	r3, r9
 800e4e4:	462a      	mov	r2, r5
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	4640      	mov	r0, r8
 800e4ea:	f7ff fc0b 	bl	800dd04 <lv_draw_mask_line>
 800e4ee:	4606      	mov	r6, r0
        if(p->cfg.end_angle == 180) {
 800e4f0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800e4f4:	2bb4      	cmp	r3, #180	; 0xb4
 800e4f6:	d1d7      	bne.n	800e4a8 <lv_draw_mask_angle+0x1fe>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800e4f8:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800e4fc:	42a8      	cmp	r0, r5
 800e4fe:	bfcc      	ite	gt
 800e500:	2003      	movgt	r0, #3
 800e502:	2001      	movle	r0, #1
 800e504:	e7d7      	b.n	800e4b6 <lv_draw_mask_angle+0x20c>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800e506:	2bb3      	cmp	r3, #179	; 0xb3
 800e508:	dc05      	bgt.n	800e516 <lv_draw_mask_angle+0x26c>
 800e50a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e50e:	42ab      	cmp	r3, r5
 800e510:	dd05      	ble.n	800e51e <lv_draw_mask_angle+0x274>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800e512:	2003      	movs	r0, #3
 800e514:	e7cf      	b.n	800e4b6 <lv_draw_mask_angle+0x20c>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800e516:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e51a:	42ab      	cmp	r3, r5
 800e51c:	dd18      	ble.n	800e550 <lv_draw_mask_angle+0x2a6>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 800e51e:	343c      	adds	r4, #60	; 0x3c
 800e520:	9400      	str	r4, [sp, #0]
 800e522:	464b      	mov	r3, r9
 800e524:	462a      	mov	r2, r5
 800e526:	4639      	mov	r1, r7
 800e528:	4640      	mov	r0, r8
 800e52a:	f7ff fbeb 	bl	800dd04 <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800e52e:	2e00      	cmp	r6, #0
 800e530:	d0ca      	beq.n	800e4c8 <lv_draw_mask_angle+0x21e>
 800e532:	2800      	cmp	r0, #0
 800e534:	d1c0      	bne.n	800e4b8 <lv_draw_mask_angle+0x20e>
 800e536:	4606      	mov	r6, r0
 800e538:	e7c6      	b.n	800e4c8 <lv_draw_mask_angle+0x21e>
        else return LV_DRAW_MASK_RES_CHANGED;
 800e53a:	2803      	cmp	r0, #3
 800e53c:	bf0c      	ite	eq
 800e53e:	2600      	moveq	r6, #0
 800e540:	2602      	movne	r6, #2
 800e542:	e7c1      	b.n	800e4c8 <lv_draw_mask_angle+0x21e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800e544:	2601      	movs	r6, #1
 800e546:	e7bf      	b.n	800e4c8 <lv_draw_mask_angle+0x21e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800e548:	2601      	movs	r6, #1
 800e54a:	e7bd      	b.n	800e4c8 <lv_draw_mask_angle+0x21e>
        else return LV_DRAW_MASK_RES_CHANGED;
 800e54c:	2602      	movs	r6, #2
 800e54e:	e7bb      	b.n	800e4c8 <lv_draw_mask_angle+0x21e>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800e550:	2003      	movs	r0, #3
 800e552:	e7b0      	b.n	800e4b6 <lv_draw_mask_angle+0x20c>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800e554:	2001      	movs	r0, #1
 800e556:	e7ae      	b.n	800e4b6 <lv_draw_mask_angle+0x20c>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800e558:	2601      	movs	r6, #1
        if(p->cfg.end_angle == 180) {
 800e55a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800e55e:	2bb4      	cmp	r3, #180	; 0xb4
 800e560:	d1a2      	bne.n	800e4a8 <lv_draw_mask_angle+0x1fe>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800e562:	2003      	movs	r0, #3
 800e564:	e7a7      	b.n	800e4b6 <lv_draw_mask_angle+0x20c>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800e566:	2603      	movs	r6, #3
 800e568:	e7f7      	b.n	800e55a <lv_draw_mask_angle+0x2b0>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800e56a:	2603      	movs	r6, #3
 800e56c:	e798      	b.n	800e4a0 <lv_draw_mask_angle+0x1f6>
        else if(p->cfg.start_angle == 0) {
 800e56e:	2a00      	cmp	r2, #0
 800e570:	d1ae      	bne.n	800e4d0 <lv_draw_mask_angle+0x226>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800e572:	42ab      	cmp	r3, r5
 800e574:	dcf7      	bgt.n	800e566 <lv_draw_mask_angle+0x2bc>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800e576:	2601      	movs	r6, #1
 800e578:	e792      	b.n	800e4a0 <lv_draw_mask_angle+0x1f6>

0800e57a <lv_draw_mask_radius>:
{
 800e57a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57e:	b083      	sub	sp, #12
 800e580:	4605      	mov	r5, r0
 800e582:	460e      	mov	r6, r1
 800e584:	461c      	mov	r4, r3
 800e586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bool outer = p->cfg.outer;
 800e588:	7c98      	ldrb	r0, [r3, #18]
    dest->y1 = src->y1;
 800e58a:	f9b3 c00a 	ldrsh.w	ip, [r3, #10]
    dest->y2 = src->y2;
 800e58e:	f9b3 800e 	ldrsh.w	r8, [r3, #14]
    if(outer == false) {
 800e592:	f010 0001 	ands.w	r0, r0, #1
 800e596:	d133      	bne.n	800e600 <lv_draw_mask_radius+0x86>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 800e598:	4562      	cmp	r2, ip
 800e59a:	f2c0 8180 	blt.w	800e89e <lv_draw_mask_radius+0x324>
 800e59e:	4542      	cmp	r2, r8
 800e5a0:	f300 8181 	bgt.w	800e8a6 <lv_draw_mask_radius+0x32c>
    int32_t radius = p->cfg.radius;
 800e5a4:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
    dest->x1 = src->x1;
 800e5a8:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
    dest->x2 = src->x2;
 800e5ac:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800e5b0:	eb09 010e 	add.w	r1, r9, lr
 800e5b4:	428e      	cmp	r6, r1
 800e5b6:	db04      	blt.n	800e5c2 <lv_draw_mask_radius+0x48>
 800e5b8:	19a1      	adds	r1, r4, r6
 800e5ba:	eba7 0a0e 	sub.w	sl, r7, lr
 800e5be:	4551      	cmp	r1, sl
 800e5c0:	dd07      	ble.n	800e5d2 <lv_draw_mask_radius+0x58>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800e5c2:	eb0c 010e 	add.w	r1, ip, lr
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800e5c6:	428a      	cmp	r2, r1
 800e5c8:	db48      	blt.n	800e65c <lv_draw_mask_radius+0xe2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800e5ca:	eba8 010e 	sub.w	r1, r8, lr
 800e5ce:	428a      	cmp	r2, r1
 800e5d0:	dc44      	bgt.n	800e65c <lv_draw_mask_radius+0xe2>
        if(outer == false) {
 800e5d2:	bb60      	cbnz	r0, 800e62e <lv_draw_mask_radius+0xb4>
            int32_t last = rect.x1 - abs_x;
 800e5d4:	eba9 0906 	sub.w	r9, r9, r6
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800e5d8:	454c      	cmp	r4, r9
 800e5da:	f2c0 8168 	blt.w	800e8ae <lv_draw_mask_radius+0x334>
            if(last >= 0) {
 800e5de:	f1b9 0f00 	cmp.w	r9, #0
 800e5e2:	da14      	bge.n	800e60e <lv_draw_mask_radius+0x94>
            int32_t first = rect.x2 - abs_x + 1;
 800e5e4:	1bbe      	subs	r6, r7, r6
 800e5e6:	3601      	adds	r6, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800e5e8:	2e00      	cmp	r6, #0
 800e5ea:	f340 8162 	ble.w	800e8b2 <lv_draw_mask_radius+0x338>
            else if(first < len) {
 800e5ee:	42b4      	cmp	r4, r6
 800e5f0:	dc12      	bgt.n	800e618 <lv_draw_mask_radius+0x9e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800e5f2:	f1b9 0f00 	cmp.w	r9, #0
 800e5f6:	d118      	bne.n	800e62a <lv_draw_mask_radius+0xb0>
 800e5f8:	42b4      	cmp	r4, r6
 800e5fa:	d116      	bne.n	800e62a <lv_draw_mask_radius+0xb0>
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	e14f      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800e600:	4562      	cmp	r2, ip
 800e602:	f2c0 8152 	blt.w	800e8aa <lv_draw_mask_radius+0x330>
 800e606:	4542      	cmp	r2, r8
 800e608:	ddcc      	ble.n	800e5a4 <lv_draw_mask_radius+0x2a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800e60a:	2001      	movs	r0, #1
 800e60c:	e148      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
                lv_memset_00(&mask_buf[0], last);
 800e60e:	4649      	mov	r1, r9
 800e610:	4628      	mov	r0, r5
 800e612:	f013 fba9 	bl	8021d68 <lv_memset_00>
 800e616:	e7e5      	b.n	800e5e4 <lv_draw_mask_radius+0x6a>
                lv_memset_00(&mask_buf[first], len - first);
 800e618:	1ba1      	subs	r1, r4, r6
 800e61a:	19a8      	adds	r0, r5, r6
 800e61c:	f013 fba4 	bl	8021d68 <lv_memset_00>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800e620:	f1b9 0f00 	cmp.w	r9, #0
 800e624:	d101      	bne.n	800e62a <lv_draw_mask_radius+0xb0>
            else return LV_DRAW_MASK_RES_CHANGED;
 800e626:	2002      	movs	r0, #2
 800e628:	e13a      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
 800e62a:	2002      	movs	r0, #2
 800e62c:	e138      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
            int32_t first = rect.x1 - abs_x;
 800e62e:	eba9 0006 	sub.w	r0, r9, r6
            if(first < 0) first = 0;
 800e632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
 800e636:	42a0      	cmp	r0, r4
 800e638:	f300 813d 	bgt.w	800e8b6 <lv_draw_mask_radius+0x33c>
                int32_t last = rect.x2 - abs_x - first + 1;
 800e63c:	1bb9      	subs	r1, r7, r6
 800e63e:	1a09      	subs	r1, r1, r0
 800e640:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800e642:	1843      	adds	r3, r0, r1
 800e644:	429c      	cmp	r4, r3
 800e646:	bfb8      	it	lt
 800e648:	1a21      	sublt	r1, r4, r0
                if(last >= 0) {
 800e64a:	2900      	cmp	r1, #0
 800e64c:	da01      	bge.n	800e652 <lv_draw_mask_radius+0xd8>
        return LV_DRAW_MASK_RES_CHANGED;
 800e64e:	2002      	movs	r0, #2
 800e650:	e126      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
                    lv_memset_00(&mask_buf[first], last);
 800e652:	4428      	add	r0, r5
 800e654:	f013 fb88 	bl	8021d68 <lv_memset_00>
        return LV_DRAW_MASK_RES_CHANGED;
 800e658:	2002      	movs	r0, #2
 800e65a:	e121      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 800e65c:	eba9 0106 	sub.w	r1, r9, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e660:	3701      	adds	r7, #1
 800e662:	eba7 0709 	sub.w	r7, r7, r9
 800e666:	b2bf      	uxth	r7, r7
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e668:	fa1f fc8c 	uxth.w	ip, ip
    abs_y -= rect.y1;
 800e66c:	b292      	uxth	r2, r2
 800e66e:	eba2 060c 	sub.w	r6, r2, ip
 800e672:	fa1f f986 	uxth.w	r9, r6
    if(abs_y < radius) {
 800e676:	b236      	sxth	r6, r6
 800e678:	45b6      	cmp	lr, r6
 800e67a:	dd3a      	ble.n	800e6f2 <lv_draw_mask_radius+0x178>
        cir_y = radius - abs_y - 1;
 800e67c:	44f4      	add	ip, lr
 800e67e:	43d2      	mvns	r2, r2
 800e680:	4494      	add	ip, r2
 800e682:	fa0f fc8c 	sxth.w	ip, ip
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 800e686:	695a      	ldr	r2, [r3, #20]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 800e688:	68d3      	ldr	r3, [r2, #12]
 800e68a:	f10c 0601 	add.w	r6, ip, #1
 800e68e:	f833 901c 	ldrh.w	r9, [r3, ip, lsl #1]
 800e692:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 800e696:	eba6 0609 	sub.w	r6, r6, r9
 800e69a:	fa1f f886 	uxth.w	r8, r6
 800e69e:	b236      	sxth	r6, r6
    *x_start = c->x_start_on_y[y];
 800e6a0:	6893      	ldr	r3, [r2, #8]
 800e6a2:	f833 c01c 	ldrh.w	ip, [r3, ip, lsl #1]
    return &c->cir_opa[c->opa_start_on_y[y]];
 800e6a6:	6852      	ldr	r2, [r2, #4]
 800e6a8:	444a      	add	r2, r9
    lv_coord_t cir_x_right = k + w - radius + x_start;
 800e6aa:	b289      	uxth	r1, r1
 800e6ac:	fa1f fe8e 	uxth.w	lr, lr
 800e6b0:	eba7 030e 	sub.w	r3, r7, lr
 800e6b4:	440b      	add	r3, r1
 800e6b6:	4463      	add	r3, ip
 800e6b8:	b29f      	uxth	r7, r3
 800e6ba:	9701      	str	r7, [sp, #4]
 800e6bc:	b21b      	sxth	r3, r3
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 800e6be:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800e6c2:	4471      	add	r1, lr
 800e6c4:	eba1 0c0c 	sub.w	ip, r1, ip
 800e6c8:	fa0f fb8c 	sxth.w	fp, ip
    if(outer == false) {
 800e6cc:	b1d0      	cbz	r0, 800e704 <lv_draw_mask_radius+0x18a>
        for(i = 0; i < aa_len; i++) {
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	f340 80c4 	ble.w	800e85c <lv_draw_mask_radius+0x2e2>
 800e6d4:	3e01      	subs	r6, #1
 800e6d6:	4432      	add	r2, r6
 800e6d8:	4618      	mov	r0, r3
 800e6da:	465f      	mov	r7, fp
 800e6dc:	eb05 0c0b 	add.w	ip, r5, fp
 800e6e0:	18ee      	adds	r6, r5, r3
 800e6e2:	f103 0e01 	add.w	lr, r3, #1
 800e6e6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800e6ea:	b289      	uxth	r1, r1
 800e6ec:	46f0      	mov	r8, lr
 800e6ee:	4488      	add	r8, r1
 800e6f0:	e083      	b.n	800e7fa <lv_draw_mask_radius+0x280>
        cir_y = abs_y - (h - radius);
 800e6f2:	44f4      	add	ip, lr
 800e6f4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e6f8:	44cc      	add	ip, r9
 800e6fa:	ebac 0c08 	sub.w	ip, ip, r8
 800e6fe:	fa0f fc8c 	sxth.w	ip, ip
 800e702:	e7c0      	b.n	800e686 <lv_draw_mask_radius+0x10c>
        for(i = 0; i < aa_len; i++) {
 800e704:	2e00      	cmp	r6, #0
 800e706:	dd67      	ble.n	800e7d8 <lv_draw_mask_radius+0x25e>
 800e708:	4432      	add	r2, r6
 800e70a:	4618      	mov	r0, r3
 800e70c:	4659      	mov	r1, fp
 800e70e:	eb05 0e0b 	add.w	lr, r5, fp
 800e712:	eb05 0c03 	add.w	ip, r5, r3
 800e716:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 800e71a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e71e:	fa1f f888 	uxth.w	r8, r8
 800e722:	eba9 0908 	sub.w	r9, r9, r8
    if(mask_new <= LV_OPA_MIN) return 0;
 800e726:	469a      	mov	sl, r3
 800e728:	9501      	str	r5, [sp, #4]
 800e72a:	e00e      	b.n	800e74a <lv_draw_mask_radius+0x1d0>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e72c:	463b      	mov	r3, r7
 800e72e:	e021      	b.n	800e774 <lv_draw_mask_radius+0x1fa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e730:	2300      	movs	r3, #0
 800e732:	e01f      	b.n	800e774 <lv_draw_mask_radius+0x1fa>
 800e734:	2700      	movs	r7, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800e736:	f888 7000 	strb.w	r7, [r8]
        for(i = 0; i < aa_len; i++) {
 800e73a:	3001      	adds	r0, #1
 800e73c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800e740:	3901      	subs	r1, #1
 800e742:	f10c 0c01 	add.w	ip, ip, #1
 800e746:	4549      	cmp	r1, r9
 800e748:	d02a      	beq.n	800e7a0 <lv_draw_mask_radius+0x226>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 800e74a:	f812 7d01 	ldrb.w	r7, [r2, #-1]!
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800e74e:	2800      	cmp	r0, #0
 800e750:	db12      	blt.n	800e778 <lv_draw_mask_radius+0x1fe>
 800e752:	4284      	cmp	r4, r0
 800e754:	dd10      	ble.n	800e778 <lv_draw_mask_radius+0x1fe>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800e756:	46e0      	mov	r8, ip
 800e758:	f89c 3000 	ldrb.w	r3, [ip]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e75c:	2bfc      	cmp	r3, #252	; 0xfc
 800e75e:	d8e5      	bhi.n	800e72c <lv_draw_mask_radius+0x1b2>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e760:	2b02      	cmp	r3, #2
 800e762:	d9e5      	bls.n	800e730 <lv_draw_mask_radius+0x1b6>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e764:	fb07 f303 	mul.w	r3, r7, r3
 800e768:	eb03 2503 	add.w	r5, r3, r3, lsl #8
 800e76c:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 800e770:	f3c3 53c7 	ubfx	r3, r3, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800e774:	f888 3000 	strb.w	r3, [r8]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 800e778:	2900      	cmp	r1, #0
 800e77a:	dbde      	blt.n	800e73a <lv_draw_mask_radius+0x1c0>
 800e77c:	428c      	cmp	r4, r1
 800e77e:	dddc      	ble.n	800e73a <lv_draw_mask_radius+0x1c0>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800e780:	46f0      	mov	r8, lr
 800e782:	f89e 3000 	ldrb.w	r3, [lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e786:	2bfc      	cmp	r3, #252	; 0xfc
 800e788:	d8d5      	bhi.n	800e736 <lv_draw_mask_radius+0x1bc>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	d9d2      	bls.n	800e734 <lv_draw_mask_radius+0x1ba>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e78e:	fb03 f707 	mul.w	r7, r3, r7
 800e792:	eb07 2307 	add.w	r3, r7, r7, lsl #8
 800e796:	eb07 17c3 	add.w	r7, r7, r3, lsl #7
 800e79a:	f3c7 57c7 	ubfx	r7, r7, #23, #8
 800e79e:	e7ca      	b.n	800e736 <lv_draw_mask_radius+0x1bc>
        for(i = 0; i < aa_len; i++) {
 800e7a0:	4653      	mov	r3, sl
 800e7a2:	9d01      	ldr	r5, [sp, #4]
 800e7a4:	4630      	mov	r0, r6
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 800e7a6:	4403      	add	r3, r0
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	bfa8      	it	ge
 800e7ac:	4623      	movge	r3, r4
 800e7ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e7b2:	b21b      	sxth	r3, r3
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 800e7b4:	1ae1      	subs	r1, r4, r3
 800e7b6:	18e8      	adds	r0, r5, r3
 800e7b8:	f013 fad6 	bl	8021d68 <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 800e7bc:	ebab 0106 	sub.w	r1, fp, r6
 800e7c0:	3101      	adds	r1, #1
 800e7c2:	42a1      	cmp	r1, r4
 800e7c4:	bfa8      	it	ge
 800e7c6:	4621      	movge	r1, r4
 800e7c8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        lv_memset_00(&mask_buf[0], cir_x_left);
 800e7cc:	b209      	sxth	r1, r1
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	f013 faca 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e7d4:	2002      	movs	r0, #2
 800e7d6:	e063      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
        for(i = 0; i < aa_len; i++) {
 800e7d8:	2000      	movs	r0, #0
 800e7da:	e7e4      	b.n	800e7a6 <lv_draw_mask_radius+0x22c>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e7dc:	468e      	mov	lr, r1
 800e7de:	e025      	b.n	800e82c <lv_draw_mask_radius+0x2b2>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e7e0:	f04f 0e00 	mov.w	lr, #0
 800e7e4:	e022      	b.n	800e82c <lv_draw_mask_radius+0x2b2>
 800e7e6:	2100      	movs	r1, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800e7e8:	f889 1000 	strb.w	r1, [r9]
        for(i = 0; i < aa_len; i++) {
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e7f2:	3f01      	subs	r7, #1
 800e7f4:	3601      	adds	r6, #1
 800e7f6:	4540      	cmp	r0, r8
 800e7f8:	d030      	beq.n	800e85c <lv_draw_mask_radius+0x2e2>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 800e7fa:	f812 1901 	ldrb.w	r1, [r2], #-1
 800e7fe:	43c9      	mvns	r1, r1
 800e800:	b2c9      	uxtb	r1, r1
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800e802:	2800      	cmp	r0, #0
 800e804:	db14      	blt.n	800e830 <lv_draw_mask_radius+0x2b6>
 800e806:	4284      	cmp	r4, r0
 800e808:	dd12      	ble.n	800e830 <lv_draw_mask_radius+0x2b6>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800e80a:	46b1      	mov	r9, r6
 800e80c:	f896 e000 	ldrb.w	lr, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e810:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
 800e814:	d8e2      	bhi.n	800e7dc <lv_draw_mask_radius+0x262>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e816:	f1be 0f02 	cmp.w	lr, #2
 800e81a:	d9e1      	bls.n	800e7e0 <lv_draw_mask_radius+0x266>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e81c:	fb0e fe01 	mul.w	lr, lr, r1
 800e820:	eb0e 2a0e 	add.w	sl, lr, lr, lsl #8
 800e824:	eb0e 1eca 	add.w	lr, lr, sl, lsl #7
 800e828:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800e82c:	f889 e000 	strb.w	lr, [r9]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 800e830:	2f00      	cmp	r7, #0
 800e832:	dbdb      	blt.n	800e7ec <lv_draw_mask_radius+0x272>
 800e834:	42bc      	cmp	r4, r7
 800e836:	ddd9      	ble.n	800e7ec <lv_draw_mask_radius+0x272>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800e838:	46e1      	mov	r9, ip
 800e83a:	f89c e000 	ldrb.w	lr, [ip]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e83e:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
 800e842:	d8d1      	bhi.n	800e7e8 <lv_draw_mask_radius+0x26e>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e844:	f1be 0f02 	cmp.w	lr, #2
 800e848:	d9cd      	bls.n	800e7e6 <lv_draw_mask_radius+0x26c>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e84a:	fb0e f101 	mul.w	r1, lr, r1
 800e84e:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
 800e852:	eb01 11ce 	add.w	r1, r1, lr, lsl #7
 800e856:	f3c1 51c7 	ubfx	r1, r1, #23, #8
 800e85a:	e7c5      	b.n	800e7e8 <lv_draw_mask_radius+0x26e>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 800e85c:	f10b 0101 	add.w	r1, fp, #1
 800e860:	42a1      	cmp	r1, r4
 800e862:	bfa8      	it	ge
 800e864:	4621      	movge	r1, r4
 800e866:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800e86a:	b208      	sxth	r0, r1
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800e86c:	429c      	cmp	r4, r3
 800e86e:	dd0a      	ble.n	800e886 <lv_draw_mask_radius+0x30c>
 800e870:	1a1b      	subs	r3, r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	db0f      	blt.n	800e896 <lv_draw_mask_radius+0x31c>
 800e876:	9b01      	ldr	r3, [sp, #4]
 800e878:	1a59      	subs	r1, r3, r1
 800e87a:	b209      	sxth	r1, r1
        lv_memset_00(&mask_buf[clr_start], clr_len);
 800e87c:	4428      	add	r0, r5
 800e87e:	f013 fa73 	bl	8021d68 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e882:	2002      	movs	r0, #2
 800e884:	e00c      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800e886:	1a22      	subs	r2, r4, r0
 800e888:	2a00      	cmp	r2, #0
 800e88a:	db06      	blt.n	800e89a <lv_draw_mask_radius+0x320>
 800e88c:	429c      	cmp	r4, r3
 800e88e:	dcf2      	bgt.n	800e876 <lv_draw_mask_radius+0x2fc>
 800e890:	1a61      	subs	r1, r4, r1
 800e892:	b209      	sxth	r1, r1
 800e894:	e7f2      	b.n	800e87c <lv_draw_mask_radius+0x302>
 800e896:	2100      	movs	r1, #0
 800e898:	e7f0      	b.n	800e87c <lv_draw_mask_radius+0x302>
 800e89a:	2100      	movs	r1, #0
 800e89c:	e7ee      	b.n	800e87c <lv_draw_mask_radius+0x302>
            return LV_DRAW_MASK_RES_TRANSP;
 800e89e:	2000      	movs	r0, #0
}
 800e8a0:	b003      	add	sp, #12
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	e7fa      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800e8aa:	2001      	movs	r0, #1
 800e8ac:	e7f8      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	e7f6      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	e7f4      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
        return LV_DRAW_MASK_RES_CHANGED;
 800e8b6:	2002      	movs	r0, #2
 800e8b8:	e7f2      	b.n	800e8a0 <lv_draw_mask_radius+0x326>
	...

0800e8bc <lv_draw_mask_add>:
{
 800e8bc:	b410      	push	{r4}
 800e8be:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800e8c0:	4c0e      	ldr	r4, [pc, #56]	; (800e8fc <lv_draw_mask_add+0x40>)
 800e8c2:	fa5f fc83 	uxtb.w	ip, r3
 800e8c6:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800e8ca:	b12a      	cbz	r2, 800e8d8 <lv_draw_mask_add+0x1c>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	2b10      	cmp	r3, #16
 800e8d0:	d1f7      	bne.n	800e8c2 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800e8d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8d6:	e00b      	b.n	800e8f0 <lv_draw_mask_add+0x34>
    if(i >= _LV_MASK_MAX_NUM) {
 800e8d8:	f1bc 0f0f 	cmp.w	ip, #15
 800e8dc:	d80a      	bhi.n	800e8f4 <lv_draw_mask_add+0x38>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	4a06      	ldr	r2, [pc, #24]	; (800e8fc <lv_draw_mask_add+0x40>)
 800e8e2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800e8e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e8ea:	6059      	str	r1, [r3, #4]
    return i;
 800e8ec:	fa0f f08c 	sxth.w	r0, ip
}
 800e8f0:	bc10      	pop	{r4}
 800e8f2:	4770      	bx	lr
        return LV_MASK_ID_INV;
 800e8f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8f8:	e7fa      	b.n	800e8f0 <lv_draw_mask_add+0x34>
 800e8fa:	bf00      	nop
 800e8fc:	200027e8 	.word	0x200027e8

0800e900 <lv_draw_mask_apply>:
{
 800e900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e904:	b082      	sub	sp, #8
 800e906:	469a      	mov	sl, r3
    while(m->param) {
 800e908:	4b10      	ldr	r3, [pc, #64]	; (800e94c <lv_draw_mask_apply+0x4c>)
 800e90a:	681c      	ldr	r4, [r3, #0]
 800e90c:	b1e4      	cbz	r4, 800e948 <lv_draw_mask_apply+0x48>
 800e90e:	4607      	mov	r7, r0
 800e910:	4688      	mov	r8, r1
 800e912:	4691      	mov	r9, r2
 800e914:	461e      	mov	r6, r3
    bool changed = false;
 800e916:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800e918:	9400      	str	r4, [sp, #0]
 800e91a:	6824      	ldr	r4, [r4, #0]
 800e91c:	4653      	mov	r3, sl
 800e91e:	464a      	mov	r2, r9
 800e920:	4641      	mov	r1, r8
 800e922:	4638      	mov	r0, r7
 800e924:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800e926:	4603      	mov	r3, r0
 800e928:	b150      	cbz	r0, 800e940 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800e92a:	2802      	cmp	r0, #2
 800e92c:	bf08      	it	eq
 800e92e:	2501      	moveq	r5, #1
    while(m->param) {
 800e930:	f856 4f08 	ldr.w	r4, [r6, #8]!
 800e934:	2c00      	cmp	r4, #0
 800e936:	d1ef      	bne.n	800e918 <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800e938:	2d00      	cmp	r5, #0
 800e93a:	bf14      	ite	ne
 800e93c:	2302      	movne	r3, #2
 800e93e:	2301      	moveq	r3, #1
}
 800e940:	4618      	mov	r0, r3
 800e942:	b002      	add	sp, #8
 800e944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800e948:	2301      	movs	r3, #1
 800e94a:	e7f9      	b.n	800e940 <lv_draw_mask_apply+0x40>
 800e94c:	200027e8 	.word	0x200027e8

0800e950 <lv_draw_mask_remove_id>:
{
 800e950:	4603      	mov	r3, r0
    if(id != LV_MASK_ID_INV) {
 800e952:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e956:	d009      	beq.n	800e96c <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800e958:	4a05      	ldr	r2, [pc, #20]	; (800e970 <lv_draw_mask_remove_id+0x20>)
 800e95a:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800e95e:	2100      	movs	r1, #0
 800e960:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800e964:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e968:	6059      	str	r1, [r3, #4]
 800e96a:	4770      	bx	lr
    _lv_draw_mask_common_dsc_t * p = NULL;
 800e96c:	2000      	movs	r0, #0
}
 800e96e:	4770      	bx	lr
 800e970:	200027e8 	.word	0x200027e8

0800e974 <lv_draw_mask_remove_custom>:
{
 800e974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e976:	4606      	mov	r6, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e978:	4d09      	ldr	r5, [pc, #36]	; (800e9a0 <lv_draw_mask_remove_custom+0x2c>)
{
 800e97a:	2400      	movs	r4, #0
    _lv_draw_mask_common_dsc_t * p = NULL;
 800e97c:	4627      	mov	r7, r4
 800e97e:	e003      	b.n	800e988 <lv_draw_mask_remove_custom+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800e980:	3401      	adds	r4, #1
 800e982:	3508      	adds	r5, #8
 800e984:	2c10      	cmp	r4, #16
 800e986:	d008      	beq.n	800e99a <lv_draw_mask_remove_custom+0x26>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800e988:	682b      	ldr	r3, [r5, #0]
 800e98a:	42b3      	cmp	r3, r6
 800e98c:	d1f8      	bne.n	800e980 <lv_draw_mask_remove_custom+0xc>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800e98e:	f855 7c04 	ldr.w	r7, [r5, #-4]
            lv_draw_mask_remove_id(i);
 800e992:	b220      	sxth	r0, r4
 800e994:	f7ff ffdc 	bl	800e950 <lv_draw_mask_remove_id>
 800e998:	e7f2      	b.n	800e980 <lv_draw_mask_remove_custom+0xc>
}
 800e99a:	4638      	mov	r0, r7
 800e99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	200027ec 	.word	0x200027ec

0800e9a4 <lv_draw_mask_free_param>:
{
 800e9a4:	b510      	push	{r4, lr}
 800e9a6:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800e9a8:	7903      	ldrb	r3, [r0, #4]
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	d002      	beq.n	800e9b4 <lv_draw_mask_free_param+0x10>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 800e9ae:	2b05      	cmp	r3, #5
 800e9b0:	d011      	beq.n	800e9d6 <lv_draw_mask_free_param+0x32>
}
 800e9b2:	bd10      	pop	{r4, pc}
        if(radius_p->circle) {
 800e9b4:	6943      	ldr	r3, [r0, #20]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0fb      	beq.n	800e9b2 <lv_draw_mask_free_param+0xe>
            if(radius_p->circle->life < 0) {
 800e9ba:	691a      	ldr	r2, [r3, #16]
 800e9bc:	2a00      	cmp	r2, #0
 800e9be:	db03      	blt.n	800e9c8 <lv_draw_mask_free_param+0x24>
                radius_p->circle->used_cnt--;
 800e9c0:	695a      	ldr	r2, [r3, #20]
 800e9c2:	3a01      	subs	r2, #1
 800e9c4:	615a      	str	r2, [r3, #20]
 800e9c6:	e7f4      	b.n	800e9b2 <lv_draw_mask_free_param+0xe>
                lv_mem_free(radius_p->circle->cir_opa);
 800e9c8:	6858      	ldr	r0, [r3, #4]
 800e9ca:	f012 ff6b 	bl	80218a4 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 800e9ce:	6960      	ldr	r0, [r4, #20]
 800e9d0:	f012 ff68 	bl	80218a4 <lv_mem_free>
 800e9d4:	e7ed      	b.n	800e9b2 <lv_draw_mask_free_param+0xe>
        lv_mem_free(poly_p->cfg.points);
 800e9d6:	6880      	ldr	r0, [r0, #8]
 800e9d8:	f012 ff64 	bl	80218a4 <lv_mem_free>
}
 800e9dc:	e7e9      	b.n	800e9b2 <lv_draw_mask_free_param+0xe>
	...

0800e9e0 <_lv_draw_mask_cleanup>:
{
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800e9e2:	4c0a      	ldr	r4, [pc, #40]	; (800ea0c <_lv_draw_mask_cleanup+0x2c>)
 800e9e4:	f104 0770 	add.w	r7, r4, #112	; 0x70
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 800e9e8:	261c      	movs	r6, #28
 800e9ea:	e006      	b.n	800e9fa <_lv_draw_mask_cleanup+0x1a>
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	f013 f9ba 	bl	8021d68 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800e9f4:	341c      	adds	r4, #28
 800e9f6:	42bc      	cmp	r4, r7
 800e9f8:	d006      	beq.n	800ea08 <_lv_draw_mask_cleanup+0x28>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 800e9fa:	4625      	mov	r5, r4
 800e9fc:	6820      	ldr	r0, [r4, #0]
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	d0f4      	beq.n	800e9ec <_lv_draw_mask_cleanup+0xc>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 800ea02:	f012 ff4f 	bl	80218a4 <lv_mem_free>
 800ea06:	e7f1      	b.n	800e9ec <_lv_draw_mask_cleanup+0xc>
}
 800ea08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	2000276c 	.word	0x2000276c

0800ea10 <lv_draw_mask_is_any>:
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800ea10:	b120      	cbz	r0, 800ea1c <lv_draw_mask_is_any+0xc>
{
 800ea12:	b570      	push	{r4, r5, r6, lr}
 800ea14:	4606      	mov	r6, r0
 800ea16:	2400      	movs	r4, #0
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800ea18:	4d16      	ldr	r5, [pc, #88]	; (800ea74 <lv_draw_mask_is_any+0x64>)
 800ea1a:	e00f      	b.n	800ea3c <lv_draw_mask_is_any+0x2c>
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800ea1c:	4b15      	ldr	r3, [pc, #84]	; (800ea74 <lv_draw_mask_is_any+0x64>)
 800ea1e:	6818      	ldr	r0, [r3, #0]
 800ea20:	3800      	subs	r0, #0
 800ea22:	bf18      	it	ne
 800ea24:	2001      	movne	r0, #1
}
 800ea26:	4770      	bx	lr
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800ea28:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 800ea2c:	3108      	adds	r1, #8
 800ea2e:	4630      	mov	r0, r6
 800ea30:	f012 f92f 	bl	8020c92 <_lv_area_is_in>
 800ea34:	b1d8      	cbz	r0, 800ea6e <lv_draw_mask_is_any+0x5e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800ea36:	3401      	adds	r4, #1
 800ea38:	2c10      	cmp	r4, #16
 800ea3a:	d014      	beq.n	800ea66 <lv_draw_mask_is_any+0x56>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800ea3c:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
        if(comm_param == NULL) continue;
 800ea40:	2900      	cmp	r1, #0
 800ea42:	d0f8      	beq.n	800ea36 <lv_draw_mask_is_any+0x26>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800ea44:	790b      	ldrb	r3, [r1, #4]
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	d10f      	bne.n	800ea6a <lv_draw_mask_is_any+0x5a>
            if(radius_param->cfg.outer) {
 800ea4a:	7c8b      	ldrb	r3, [r1, #18]
 800ea4c:	f013 0f01 	tst.w	r3, #1
 800ea50:	d0ea      	beq.n	800ea28 <lv_draw_mask_is_any+0x18>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800ea52:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 800ea56:	3108      	adds	r1, #8
 800ea58:	4630      	mov	r0, r6
 800ea5a:	f012 f968 	bl	8020d2e <_lv_area_is_out>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d1e9      	bne.n	800ea36 <lv_draw_mask_is_any+0x26>
 800ea62:	2001      	movs	r0, #1
 800ea64:	e000      	b.n	800ea68 <lv_draw_mask_is_any+0x58>
    return false;
 800ea66:	2000      	movs	r0, #0
}
 800ea68:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 800ea6a:	2001      	movs	r0, #1
 800ea6c:	e7fc      	b.n	800ea68 <lv_draw_mask_is_any+0x58>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800ea6e:	2001      	movs	r0, #1
 800ea70:	e7fa      	b.n	800ea68 <lv_draw_mask_is_any+0x58>
 800ea72:	bf00      	nop
 800ea74:	200027e8 	.word	0x200027e8

0800ea78 <lv_draw_mask_line_points_init>:
{
 800ea78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	460e      	mov	r6, r1
 800ea80:	4615      	mov	r5, r2
 800ea82:	4698      	mov	r8, r3
 800ea84:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 800ea88:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800ea8c:	212c      	movs	r1, #44	; 0x2c
 800ea8e:	f013 f96b 	bl	8021d68 <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800ea92:	42bd      	cmp	r5, r7
 800ea94:	d056      	beq.n	800eb44 <lv_draw_mask_line_points_init+0xcc>
    if(p1y > p2y) {
 800ea96:	42bd      	cmp	r5, r7
 800ea98:	dd05      	ble.n	800eaa6 <lv_draw_mask_line_points_init+0x2e>
 800ea9a:	462b      	mov	r3, r5
 800ea9c:	463d      	mov	r5, r7
 800ea9e:	461f      	mov	r7, r3
 800eaa0:	4633      	mov	r3, r6
        p1x = t;
 800eaa2:	4646      	mov	r6, r8
        p2x = p1x;
 800eaa4:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
 800eaa6:	8126      	strh	r6, [r4, #8]
    param->cfg.p1.y = p1y;
 800eaa8:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
 800eaaa:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 800eaae:	81e7      	strh	r7, [r4, #14]
    param->cfg.side = side;
 800eab0:	7c23      	ldrb	r3, [r4, #16]
 800eab2:	f369 0301 	bfi	r3, r9, #0, #2
 800eab6:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
 800eab8:	8266      	strh	r6, [r4, #18]
    param->origo.y = p1y;
 800eaba:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800eabc:	eba8 0606 	sub.w	r6, r8, r6
 800eac0:	1b7d      	subs	r5, r7, r5
 800eac2:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
 800eac6:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 800eaca:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 800eace:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 800ead2:	429a      	cmp	r2, r3
 800ead4:	bfd4      	ite	le
 800ead6:	2200      	movle	r2, #0
 800ead8:	2201      	movgt	r2, #1
 800eada:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eade:	f362 0300 	bfi	r3, r2, #0, #1
 800eae2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
 800eae6:	2200      	movs	r2, #0
 800eae8:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
 800eaea:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800eaec:	493c      	ldr	r1, [pc, #240]	; (800ebe0 <lv_draw_mask_line_points_init+0x168>)
 800eaee:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800eaf0:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
 800eaf2:	f013 0f01 	tst.w	r3, #1
 800eaf6:	d02d      	beq.n	800eb54 <lv_draw_mask_line_points_init+0xdc>
        if(dx) {
 800eaf8:	b13e      	cbz	r6, 800eb0a <lv_draw_mask_line_points_init+0x92>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800eafa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eafe:	fb93 f3f6 	sdiv	r3, r3, r6
            param->yx_steep = (m * dy) >> 10;
 800eb02:	fb05 f303 	mul.w	r3, r5, r3
 800eb06:	129b      	asrs	r3, r3, #10
 800eb08:	61e3      	str	r3, [r4, #28]
        if(dy) {
 800eb0a:	b13d      	cbz	r5, 800eb1c <lv_draw_mask_line_points_init+0xa4>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800eb0c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 800eb10:	fb97 f5f5 	sdiv	r5, r7, r5
            param->xy_steep = (m * dx) >> 10;
 800eb14:	fb05 f606 	mul.w	r6, r5, r6
 800eb18:	12b6      	asrs	r6, r6, #10
 800eb1a:	61a6      	str	r6, [r4, #24]
        param->steep = param->yx_steep;
 800eb1c:	69e3      	ldr	r3, [r4, #28]
 800eb1e:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800eb20:	7c23      	ldrb	r3, [r4, #16]
 800eb22:	f013 0303 	ands.w	r3, r3, #3
 800eb26:	d12a      	bne.n	800eb7e <lv_draw_mask_line_points_init+0x106>
 800eb28:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eb2c:	f36f 0341 	bfc	r3, #1, #1
 800eb30:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800eb34:	6a23      	ldr	r3, [r4, #32]
 800eb36:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	bfb8      	it	lt
 800eb3c:	4252      	neglt	r2, r2
 800eb3e:	6262      	str	r2, [r4, #36]	; 0x24
}
 800eb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800eb44:	f1b9 0f03 	cmp.w	r9, #3
 800eb48:	d1ad      	bne.n	800eaa6 <lv_draw_mask_line_points_init+0x2e>
        p1y--;
 800eb4a:	3d01      	subs	r5, #1
 800eb4c:	b22d      	sxth	r5, r5
        p2y--;
 800eb4e:	3f01      	subs	r7, #1
 800eb50:	b23f      	sxth	r7, r7
 800eb52:	e7a0      	b.n	800ea96 <lv_draw_mask_line_points_init+0x1e>
        if(dy) {
 800eb54:	b13d      	cbz	r5, 800eb66 <lv_draw_mask_line_points_init+0xee>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800eb56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eb5a:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
 800eb5e:	fb06 f303 	mul.w	r3, r6, r3
 800eb62:	129b      	asrs	r3, r3, #10
 800eb64:	61a3      	str	r3, [r4, #24]
        if(dx) {
 800eb66:	b13e      	cbz	r6, 800eb78 <lv_draw_mask_line_points_init+0x100>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800eb68:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 800eb6c:	fb98 f6f6 	sdiv	r6, r8, r6
            param->yx_steep = (m * dy) >> 10;
 800eb70:	fb06 f505 	mul.w	r5, r6, r5
 800eb74:	12ad      	asrs	r5, r5, #10
 800eb76:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 800eb78:	69a3      	ldr	r3, [r4, #24]
 800eb7a:	6223      	str	r3, [r4, #32]
 800eb7c:	e7d0      	b.n	800eb20 <lv_draw_mask_line_points_init+0xa8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d00b      	beq.n	800eb9a <lv_draw_mask_line_points_init+0x122>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800eb82:	2b02      	cmp	r3, #2
 800eb84:	d010      	beq.n	800eba8 <lv_draw_mask_line_points_init+0x130>
        if(param->steep > 0) param->inv = 0;
 800eb86:	6a23      	ldr	r3, [r4, #32]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	dd21      	ble.n	800ebd0 <lv_draw_mask_line_points_init+0x158>
 800eb8c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eb90:	f36f 0341 	bfc	r3, #1, #1
 800eb94:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800eb98:	e00f      	b.n	800ebba <lv_draw_mask_line_points_init+0x142>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800eb9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800eb9e:	f043 0302 	orr.w	r3, r3, #2
 800eba2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800eba6:	e7c5      	b.n	800eb34 <lv_draw_mask_line_points_init+0xbc>
        if(param->steep > 0) param->inv = 1;
 800eba8:	6a23      	ldr	r3, [r4, #32]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	dd09      	ble.n	800ebc2 <lv_draw_mask_line_points_init+0x14a>
 800ebae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ebb2:	f043 0302 	orr.w	r3, r3, #2
 800ebb6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800ebba:	6a23      	ldr	r3, [r4, #32]
 800ebbc:	109b      	asrs	r3, r3, #2
 800ebbe:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 800ebc0:	e7be      	b.n	800eb40 <lv_draw_mask_line_points_init+0xc8>
        else param->inv = 0;
 800ebc2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ebc6:	f36f 0341 	bfc	r3, #1, #1
 800ebca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800ebce:	e7b1      	b.n	800eb34 <lv_draw_mask_line_points_init+0xbc>
        else param->inv = 1;
 800ebd0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ebd4:	f043 0302 	orr.w	r3, r3, #2
 800ebd8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800ebdc:	e7aa      	b.n	800eb34 <lv_draw_mask_line_points_init+0xbc>
 800ebde:	bf00      	nop
 800ebe0:	0800dd05 	.word	0x0800dd05

0800ebe4 <lv_draw_mask_line_angle_init>:
{
 800ebe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	4680      	mov	r8, r0
 800ebec:	460e      	mov	r6, r1
 800ebee:	4617      	mov	r7, r2
 800ebf0:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800ebf2:	2bb4      	cmp	r3, #180	; 0xb4
 800ebf4:	bfc4      	itt	gt
 800ebf6:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
 800ebfa:	b224      	sxthgt	r4, r4
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 800ebfc:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800ec00:	b200      	sxth	r0, r0
 800ec02:	f012 fd25 	bl	8021650 <lv_trigo_sin>
 800ec06:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f012 fd21 	bl	8021650 <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 800ec0e:	eb06 1365 	add.w	r3, r6, r5, asr #5
 800ec12:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800ec16:	9201      	str	r2, [sp, #4]
 800ec18:	eb07 1060 	add.w	r0, r7, r0, asr #5
 800ec1c:	b200      	sxth	r0, r0
 800ec1e:	9000      	str	r0, [sp, #0]
 800ec20:	b21b      	sxth	r3, r3
 800ec22:	463a      	mov	r2, r7
 800ec24:	4631      	mov	r1, r6
 800ec26:	4640      	mov	r0, r8
 800ec28:	f7ff ff26 	bl	800ea78 <lv_draw_mask_line_points_init>
}
 800ec2c:	b002      	add	sp, #8
 800ec2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ec34 <lv_draw_mask_angle_init>:
{
 800ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec36:	b083      	sub	sp, #12
 800ec38:	4604      	mov	r4, r0
 800ec3a:	460e      	mov	r6, r1
 800ec3c:	4617      	mov	r7, r2
    if(start_angle < 0)
 800ec3e:	f240 1267 	movw	r2, #359	; 0x167
 800ec42:	4293      	cmp	r3, r2
 800ec44:	bfa8      	it	ge
 800ec46:	4613      	movge	r3, r2
 800ec48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if(end_angle < 0)
 800ec4c:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800ec50:	4295      	cmp	r5, r2
 800ec52:	bfa8      	it	ge
 800ec54:	4615      	movge	r5, r2
 800ec56:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(end_angle < start_angle) {
 800ec5a:	429d      	cmp	r5, r3
 800ec5c:	da28      	bge.n	800ecb0 <lv_draw_mask_angle_init+0x7c>
        param->delta_deg = 360 - start_angle + end_angle;
 800ec5e:	f505 72b4 	add.w	r2, r5, #360	; 0x168
 800ec62:	1ad2      	subs	r2, r2, r3
 800ec64:	b292      	uxth	r2, r2
 800ec66:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    param->cfg.start_angle = start_angle;
 800ec6a:	81a3      	strh	r3, [r4, #12]
    param->cfg.end_angle = end_angle;
 800ec6c:	81e5      	strh	r5, [r4, #14]
    param->cfg.vertex_p.x = vertex_x;
 800ec6e:	8126      	strh	r6, [r4, #8]
    param->cfg.vertex_p.y = vertex_y;
 800ec70:	8167      	strh	r7, [r4, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800ec72:	4a12      	ldr	r2, [pc, #72]	; (800ecbc <lv_draw_mask_angle_init+0x88>)
 800ec74:	6022      	str	r2, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800ec76:	2201      	movs	r2, #1
 800ec78:	7122      	strb	r2, [r4, #4]
    if(start_angle >= 0 && start_angle < 180) {
 800ec7a:	b29a      	uxth	r2, r3
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800ec7c:	2ab3      	cmp	r2, #179	; 0xb3
 800ec7e:	bf94      	ite	ls
 800ec80:	2200      	movls	r2, #0
 800ec82:	2201      	movhi	r2, #1
 800ec84:	9200      	str	r2, [sp, #0]
 800ec86:	463a      	mov	r2, r7
 800ec88:	4631      	mov	r1, r6
 800ec8a:	f104 0010 	add.w	r0, r4, #16
 800ec8e:	f7ff ffa9 	bl	800ebe4 <lv_draw_mask_line_angle_init>
    if(end_angle >= 0 && end_angle < 180) {
 800ec92:	b2ab      	uxth	r3, r5
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800ec94:	2bb3      	cmp	r3, #179	; 0xb3
 800ec96:	bf8c      	ite	hi
 800ec98:	2300      	movhi	r3, #0
 800ec9a:	2301      	movls	r3, #1
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	462b      	mov	r3, r5
 800eca0:	463a      	mov	r2, r7
 800eca2:	4631      	mov	r1, r6
 800eca4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800eca8:	f7ff ff9c 	bl	800ebe4 <lv_draw_mask_line_angle_init>
}
 800ecac:	b003      	add	sp, #12
 800ecae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800ecb0:	1aea      	subs	r2, r5, r3
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	bfb8      	it	lt
 800ecb6:	4252      	neglt	r2, r2
 800ecb8:	b292      	uxth	r2, r2
 800ecba:	e7d4      	b.n	800ec66 <lv_draw_mask_angle_init+0x32>
 800ecbc:	0800e2ab 	.word	0x0800e2ab

0800ecc0 <lv_draw_mask_radius_init>:
{
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc4:	b08b      	sub	sp, #44	; 0x2c
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	4617      	mov	r7, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ecca:	f9b1 4000 	ldrsh.w	r4, [r1]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ecce:	88c8      	ldrh	r0, [r1, #6]
 800ecd0:	3001      	adds	r0, #1
 800ecd2:	884a      	ldrh	r2, [r1, #2]
 800ecd4:	1a80      	subs	r0, r0, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ecd6:	888a      	ldrh	r2, [r1, #4]
 800ecd8:	3201      	adds	r2, #1
 800ecda:	1b12      	subs	r2, r2, r4
    int32_t short_side = LV_MIN(w, h);
 800ecdc:	b200      	sxth	r0, r0
 800ecde:	b212      	sxth	r2, r2
 800ece0:	4290      	cmp	r0, r2
 800ece2:	bfa8      	it	ge
 800ece4:	4610      	movge	r0, r2
    if(radius > short_side >> 1) radius = short_side >> 1;
 800ece6:	ebb7 0f60 	cmp.w	r7, r0, asr #1
 800ecea:	bfc4      	itt	gt
 800ecec:	1042      	asrgt	r2, r0, #1
 800ecee:	b217      	sxthgt	r7, r2
    if(radius < 0) radius = 0;
 800ecf0:	ea27 75e7 	bic.w	r5, r7, r7, asr #31
    dest->x1 = src->x1;
 800ecf4:	8134      	strh	r4, [r6, #8]
    dest->y1 = src->y1;
 800ecf6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800ecfa:	8172      	strh	r2, [r6, #10]
    dest->x2 = src->x2;
 800ecfc:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 800ed00:	81b2      	strh	r2, [r6, #12]
    dest->y2 = src->y2;
 800ed02:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800ed06:	81f2      	strh	r2, [r6, #14]
    param->cfg.radius = radius;
 800ed08:	8235      	strh	r5, [r6, #16]
    param->cfg.outer = inv ? 1 : 0;
 800ed0a:	7cb2      	ldrb	r2, [r6, #18]
 800ed0c:	f363 0200 	bfi	r2, r3, #0, #1
 800ed10:	74b2      	strb	r2, [r6, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800ed12:	4bb5      	ldr	r3, [pc, #724]	; (800efe8 <lv_draw_mask_radius_init+0x328>)
 800ed14:	6033      	str	r3, [r6, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800ed16:	2302      	movs	r3, #2
 800ed18:	7133      	strb	r3, [r6, #4]
    if(radius == 0) {
 800ed1a:	2f00      	cmp	r7, #0
 800ed1c:	dd0e      	ble.n	800ed3c <lv_draw_mask_radius_init+0x7c>
 800ed1e:	4bb3      	ldr	r3, [pc, #716]	; (800efec <lv_draw_mask_radius_init+0x32c>)
 800ed20:	4619      	mov	r1, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ed22:	2200      	movs	r2, #0
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 800ed24:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
 800ed28:	42a8      	cmp	r0, r5
 800ed2a:	d00c      	beq.n	800ed46 <lv_draw_mask_radius_init+0x86>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ed2c:	3201      	adds	r2, #1
 800ed2e:	311c      	adds	r1, #28
 800ed30:	2a04      	cmp	r2, #4
 800ed32:	d1f7      	bne.n	800ed24 <lv_draw_mask_radius_init+0x64>
 800ed34:	f103 0c70 	add.w	ip, r3, #112	; 0x70
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 800ed38:	2400      	movs	r4, #0
 800ed3a:	e024      	b.n	800ed86 <lv_draw_mask_radius_init+0xc6>
        param->circle = NULL;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	6173      	str	r3, [r6, #20]
}
 800ed40:	b00b      	add	sp, #44	; 0x2c
 800ed42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 800ed46:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800ed4a:	49a8      	ldr	r1, [pc, #672]	; (800efec <lv_draw_mask_radius_init+0x32c>)
 800ed4c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ed50:	6959      	ldr	r1, [r3, #20]
 800ed52:	3101      	adds	r1, #1
 800ed54:	6159      	str	r1, [r3, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	2f0f      	cmp	r7, #15
 800ed5a:	bfcc      	ite	gt
 800ed5c:	f345 150f 	sbfxgt	r5, r5, #4, #16
 800ed60:	2501      	movle	r5, #1
 800ed62:	49a2      	ldr	r1, [pc, #648]	; (800efec <lv_draw_mask_radius_init+0x32c>)
 800ed64:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 800ed68:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800ed6c:	442b      	add	r3, r5
 800ed6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed72:	bfa8      	it	ge
 800ed74:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800ed78:	6103      	str	r3, [r0, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 800ed7a:	6170      	str	r0, [r6, #20]
            return;
 800ed7c:	e7e0      	b.n	800ed40 <lv_draw_mask_radius_init+0x80>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800ed7e:	461c      	mov	r4, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800ed80:	331c      	adds	r3, #28
 800ed82:	4563      	cmp	r3, ip
 800ed84:	d00a      	beq.n	800ed9c <lv_draw_mask_radius_init+0xdc>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 800ed86:	695a      	ldr	r2, [r3, #20]
 800ed88:	2a00      	cmp	r2, #0
 800ed8a:	d1f9      	bne.n	800ed80 <lv_draw_mask_radius_init+0xc0>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800ed8c:	2c00      	cmp	r4, #0
 800ed8e:	d0f6      	beq.n	800ed7e <lv_draw_mask_radius_init+0xbe>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800ed90:	6918      	ldr	r0, [r3, #16]
 800ed92:	6922      	ldr	r2, [r4, #16]
 800ed94:	4290      	cmp	r0, r2
 800ed96:	bfb8      	it	lt
 800ed98:	461c      	movlt	r4, r3
 800ed9a:	e7f1      	b.n	800ed80 <lv_draw_mask_radius_init+0xc0>
    if(!entry) {
 800ed9c:	2c00      	cmp	r4, #0
 800ed9e:	d041      	beq.n	800ee24 <lv_draw_mask_radius_init+0x164>
        entry->used_cnt++;
 800eda0:	6963      	ldr	r3, [r4, #20]
 800eda2:	3301      	adds	r3, #1
 800eda4:	6163      	str	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800eda6:	2f0f      	cmp	r7, #15
 800eda8:	bfcc      	ite	gt
 800edaa:	f345 130f 	sbfxgt	r3, r5, #4, #16
 800edae:	2301      	movle	r3, #1
 800edb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800edb4:	bfa8      	it	ge
 800edb6:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800edba:	6123      	str	r3, [r4, #16]
    param->circle = entry;
 800edbc:	6174      	str	r4, [r6, #20]
    c->radius = radius;
 800edbe:	8325      	strh	r5, [r4, #24]
    if(c->buf) lv_mem_free(c->buf);
 800edc0:	6820      	ldr	r0, [r4, #0]
 800edc2:	b108      	cbz	r0, 800edc8 <lv_draw_mask_radius_init+0x108>
 800edc4:	f012 fd6e 	bl	80218a4 <lv_mem_free>
    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 800edc8:	1c6e      	adds	r6, r5, #1
 800edca:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800edce:	0040      	lsls	r0, r0, #1
 800edd0:	f012 fd4a 	bl	8021868 <lv_mem_alloc>
 800edd4:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MALLOC(c->buf);
 800edd6:	b390      	cbz	r0, 800ee3e <lv_draw_mask_radius_init+0x17e>
    c->cir_opa = c->buf;
 800edd8:	6060      	str	r0, [r4, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800edda:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 800edde:	3302      	adds	r3, #2
 800ede0:	60e3      	str	r3, [r4, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800ede2:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800ede6:	f10c 0804 	add.w	r8, ip, #4
 800edea:	eb00 0308 	add.w	r3, r0, r8
 800edee:	60a3      	str	r3, [r4, #8]
    if(radius == 1) {
 800edf0:	2f01      	cmp	r7, #1
 800edf2:	d025      	beq.n	800ee40 <lv_draw_mask_radius_init+0x180>
    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 800edf4:	00f0      	lsls	r0, r6, #3
 800edf6:	f012 fd89 	bl	802190c <lv_mem_buf_get>
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 800edfa:	eb00 0c08 	add.w	ip, r0, r8
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 800edfe:	00aa      	lsls	r2, r5, #2
 800ee00:	b211      	sxth	r1, r2
    *tmp = 1 - radius;
 800ee02:	f1c2 0301 	rsb	r3, r2, #1
 800ee06:	b21b      	sxth	r3, r3
    x_int[0] = cp.x >> 2;
 800ee08:	f342 028d 	sbfx	r2, r2, #2, #14
 800ee0c:	9202      	str	r2, [sp, #8]
    x_fract[0] = 0;
 800ee0e:	2200      	movs	r2, #0
 800ee10:	9206      	str	r2, [sp, #24]
    while(circ_cont(&cp)) {
 800ee12:	4291      	cmp	r1, r2
    lv_coord_t cir_size = 0;
 800ee14:	bfb8      	it	lt
 800ee16:	4696      	movlt	lr, r2
    while(circ_cont(&cp)) {
 800ee18:	f2c0 8121 	blt.w	800f05e <lv_draw_mask_radius_init+0x39e>
    c->y = 0;
 800ee1c:	2200      	movs	r2, #0
    uint32_t y_8th_cnt = 0;
 800ee1e:	4693      	mov	fp, r2
    lv_coord_t cir_size = 0;
 800ee20:	4696      	mov	lr, r2
 800ee22:	e081      	b.n	800ef28 <lv_draw_mask_radius_init+0x268>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800ee24:	201c      	movs	r0, #28
 800ee26:	f012 fd1f 	bl	8021868 <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	b130      	cbz	r0, 800ee3c <lv_draw_mask_radius_init+0x17c>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800ee2e:	211c      	movs	r1, #28
 800ee30:	f012 ff9a 	bl	8021d68 <lv_memset_00>
        entry->life = -1;
 800ee34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee38:	6123      	str	r3, [r4, #16]
 800ee3a:	e7bf      	b.n	800edbc <lv_draw_mask_radius_init+0xfc>
        LV_ASSERT_MALLOC(entry);
 800ee3c:	e7fe      	b.n	800ee3c <lv_draw_mask_radius_init+0x17c>
    LV_ASSERT_MALLOC(c->buf);
 800ee3e:	e7fe      	b.n	800ee3e <lv_draw_mask_radius_init+0x17e>
        c->cir_opa[0] = 180;
 800ee40:	23b4      	movs	r3, #180	; 0xb4
 800ee42:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] = 0;
 800ee44:	68e2      	ldr	r2, [r4, #12]
 800ee46:	2300      	movs	r3, #0
 800ee48:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] = 1;
 800ee4a:	68e2      	ldr	r2, [r4, #12]
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	8051      	strh	r1, [r2, #2]
        c->x_start_on_y[0] = 0;
 800ee50:	68a2      	ldr	r2, [r4, #8]
 800ee52:	8013      	strh	r3, [r2, #0]
        return;
 800ee54:	e774      	b.n	800ed40 <lv_draw_mask_radius_init+0x80>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 800ee56:	3303      	adds	r3, #3
 800ee58:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ee5c:	b21b      	sxth	r3, r3
    c->y++;
 800ee5e:	3201      	adds	r2, #1
 800ee60:	b212      	sxth	r2, r2
            if(circ_cont(&cp) == false) break;
 800ee62:	4291      	cmp	r1, r2
 800ee64:	db15      	blt.n	800ee92 <lv_draw_mask_radius_init+0x1d2>
            x_int[i] = cp.x >> 2;
 800ee66:	ea4f 0aa1 	mov.w	sl, r1, asr #2
 800ee6a:	f849 ab04 	str.w	sl, [r9], #4
            x_fract[i] = cp.x & 0x3;
 800ee6e:	f001 0a03 	and.w	sl, r1, #3
 800ee72:	f848 ab04 	str.w	sl, [r8], #4
        for(i = 0; i < 4; i++) {
 800ee76:	3601      	adds	r6, #1
 800ee78:	2e04      	cmp	r6, #4
 800ee7a:	d00d      	beq.n	800ee98 <lv_draw_mask_radius_init+0x1d8>
    if(*tmp <= 0) {
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	ddea      	ble.n	800ee56 <lv_draw_mask_radius_init+0x196>
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 800ee80:	eba2 0a01 	sub.w	sl, r2, r1
 800ee84:	3305      	adds	r3, #5
 800ee86:	eb03 034a 	add.w	r3, r3, sl, lsl #1
 800ee8a:	b21b      	sxth	r3, r3
        c->x--;
 800ee8c:	3901      	subs	r1, #1
 800ee8e:	b209      	sxth	r1, r1
 800ee90:	e7e5      	b.n	800ee5e <lv_draw_mask_radius_init+0x19e>
        if(i != 4) break;
 800ee92:	2e04      	cmp	r6, #4
 800ee94:	f040 80e3 	bne.w	800f05e <lv_draw_mask_radius_init+0x39e>
        if(x_int[0] == x_int[3]) {
 800ee98:	9e02      	ldr	r6, [sp, #8]
 800ee9a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ee9e:	4546      	cmp	r6, r8
 800eea0:	d048      	beq.n	800ef34 <lv_draw_mask_radius_init+0x274>
        else if(x_int[0] != x_int[1]) {
 800eea2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eea6:	4546      	cmp	r6, r8
 800eea8:	d062      	beq.n	800ef70 <lv_draw_mask_radius_init+0x2b0>
            cir_x[cir_size] = x_int[0];
 800eeaa:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800eeae:	fa0f f98b 	sxth.w	r9, fp
 800eeb2:	f82c 901e 	strh.w	r9, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0];
 800eeb6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800eeba:	f88d 8007 	strb.w	r8, [sp, #7]
 800eebe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800eec2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800eec6:	f808 700e 	strb.w	r7, [r8, lr]
            c->cir_opa[cir_size] *= 16;
 800eeca:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800eece:	f81a 800e 	ldrb.w	r8, [sl, lr]
 800eed2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800eed6:	f80a 800e 	strb.w	r8, [sl, lr]
            cir_size++;
 800eeda:	fa1f fe8e 	uxth.w	lr, lr
 800eede:	f10e 0801 	add.w	r8, lr, #1
            cir_x[cir_size] = x_int[0] - 1;
 800eee2:	fa0f f888 	sxth.w	r8, r8
 800eee6:	3e01      	subs	r6, #1
 800eee8:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800eeec:	f82c 9018 	strh.w	r9, [ip, r8, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800eef0:	9e08      	ldr	r6, [sp, #32]
 800eef2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800eef6:	444e      	add	r6, r9
 800eef8:	f106 0904 	add.w	r9, r6, #4
 800eefc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800eefe:	444e      	add	r6, r9
 800ef00:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ef04:	f809 6008 	strb.w	r6, [r9, r8]
            c->cir_opa[cir_size] *= 16;
 800ef08:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ef0c:	f819 6008 	ldrb.w	r6, [r9, r8]
 800ef10:	0136      	lsls	r6, r6, #4
 800ef12:	f809 6008 	strb.w	r6, [r9, r8]
            cir_size++;
 800ef16:	f10e 0e02 	add.w	lr, lr, #2
 800ef1a:	fa0f fe8e 	sxth.w	lr, lr
        y_8th_cnt++;
 800ef1e:	f10b 0b01 	add.w	fp, fp, #1
    while(circ_cont(&cp)) {
 800ef22:	4291      	cmp	r1, r2
 800ef24:	f2c0 809b 	blt.w	800f05e <lv_draw_mask_radius_init+0x39e>
        for(i = 0; i < 4; i++) {
 800ef28:	f10d 0908 	add.w	r9, sp, #8
 800ef2c:	f10d 0818 	add.w	r8, sp, #24
 800ef30:	2600      	movs	r6, #0
 800ef32:	e7a3      	b.n	800ee7c <lv_draw_mask_radius_init+0x1bc>
            cir_x[cir_size] = x_int[0];
 800ef34:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800ef38:	f82c b01e 	strh.w	fp, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800ef3c:	6866      	ldr	r6, [r4, #4]
 800ef3e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ef42:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800ef46:	44c8      	add	r8, r9
 800ef48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef4c:	44c8      	add	r8, r9
 800ef4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ef52:	44c8      	add	r8, r9
 800ef54:	f806 800e 	strb.w	r8, [r6, lr]
            c->cir_opa[cir_size] *= 16;
 800ef58:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ef5c:	f818 600e 	ldrb.w	r6, [r8, lr]
 800ef60:	0136      	lsls	r6, r6, #4
 800ef62:	f808 600e 	strb.w	r6, [r8, lr]
            cir_size++;
 800ef66:	f10e 0e01 	add.w	lr, lr, #1
 800ef6a:	fa0f fe8e 	sxth.w	lr, lr
 800ef6e:	e7d6      	b.n	800ef1e <lv_draw_mask_radius_init+0x25e>
        else if(x_int[0] != x_int[2]) {
 800ef70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ef74:	4546      	cmp	r6, r8
 800ef76:	d03b      	beq.n	800eff0 <lv_draw_mask_radius_init+0x330>
            cir_x[cir_size] = x_int[0];
 800ef78:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800ef7c:	fa0f f88b 	sxth.w	r8, fp
 800ef80:	f82c 801e 	strh.w	r8, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 800ef84:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800ef88:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ef8c:	44d1      	add	r9, sl
 800ef8e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800ef92:	f80a 900e 	strb.w	r9, [sl, lr]
            c->cir_opa[cir_size] *= 16;
 800ef96:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800ef9a:	f81a 900e 	ldrb.w	r9, [sl, lr]
 800ef9e:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800efa2:	f80a 900e 	strb.w	r9, [sl, lr]
            cir_size++;
 800efa6:	fa1f f98e 	uxth.w	r9, lr
 800efaa:	f109 0e01 	add.w	lr, r9, #1
            cir_x[cir_size] = x_int[0] - 1;
 800efae:	fa0f fe8e 	sxth.w	lr, lr
 800efb2:	3e01      	subs	r6, #1
 800efb4:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800efb8:	f82c 801e 	strh.w	r8, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800efbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800efbe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efc2:	4446      	add	r6, r8
 800efc4:	3608      	adds	r6, #8
 800efc6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800efca:	f808 600e 	strb.w	r6, [r8, lr]
            c->cir_opa[cir_size] *= 16;
 800efce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800efd2:	f818 600e 	ldrb.w	r6, [r8, lr]
 800efd6:	0136      	lsls	r6, r6, #4
 800efd8:	f808 600e 	strb.w	r6, [r8, lr]
            cir_size++;
 800efdc:	f109 0e02 	add.w	lr, r9, #2
 800efe0:	fa0f fe8e 	sxth.w	lr, lr
 800efe4:	e79b      	b.n	800ef1e <lv_draw_mask_radius_init+0x25e>
 800efe6:	bf00      	nop
 800efe8:	0800e57b 	.word	0x0800e57b
 800efec:	2000276c 	.word	0x2000276c
            cir_x[cir_size] = x_int[0];
 800eff0:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800eff4:	fa0f f88b 	sxth.w	r8, fp
 800eff8:	f82c 801e 	strh.w	r8, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 800effc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800f000:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f004:	44d1      	add	r9, sl
 800f006:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f00a:	44d1      	add	r9, sl
 800f00c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f010:	f80a 900e 	strb.w	r9, [sl, lr]
            c->cir_opa[cir_size] *= 16;
 800f014:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f018:	f81a 900e 	ldrb.w	r9, [sl, lr]
 800f01c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800f020:	f80a 900e 	strb.w	r9, [sl, lr]
            cir_size++;
 800f024:	fa1f fe8e 	uxth.w	lr, lr
 800f028:	f10e 0901 	add.w	r9, lr, #1
            cir_x[cir_size] = x_int[0] - 1;
 800f02c:	fa0f f989 	sxth.w	r9, r9
 800f030:	3e01      	subs	r6, #1
 800f032:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f036:	f82c 8019 	strh.w	r8, [ip, r9, lsl #1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 800f03a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f03c:	360c      	adds	r6, #12
 800f03e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f042:	f808 6009 	strb.w	r6, [r8, r9]
            c->cir_opa[cir_size] *= 16;
 800f046:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f04a:	f818 6009 	ldrb.w	r6, [r8, r9]
 800f04e:	0136      	lsls	r6, r6, #4
 800f050:	f808 6009 	strb.w	r6, [r8, r9]
            cir_size++;
 800f054:	f10e 0e02 	add.w	lr, lr, #2
 800f058:	fa0f fe8e 	sxth.w	lr, lr
 800f05c:	e75f      	b.n	800ef1e <lv_draw_mask_radius_init+0x25e>
    int32_t mid = radius * 723;
 800f05e:	f240 23d3 	movw	r3, #723	; 0x2d3
 800f062:	fb03 f505 	mul.w	r5, r3, r5
    int32_t mid_int = mid >> 10;
 800f066:	12aa      	asrs	r2, r5, #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800f068:	4676      	mov	r6, lr
 800f06a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 800f06e:	3b01      	subs	r3, #1
 800f070:	0059      	lsls	r1, r3, #1
 800f072:	f930 7013 	ldrsh.w	r7, [r0, r3, lsl #1]
 800f076:	ebb7 2fa5 	cmp.w	r7, r5, asr #10
 800f07a:	d03c      	beq.n	800f0f6 <lv_draw_mask_radius_init+0x436>
        int32_t tmp_val = mid - (mid_int << 10);
 800f07c:	f3c5 0509 	ubfx	r5, r5, #0, #10
        if(tmp_val <= 512) {
 800f080:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f084:	dc3c      	bgt.n	800f100 <lv_draw_mask_radius_init+0x440>
            tmp_val = tmp_val * tmp_val * 2;
 800f086:	fb05 f505 	mul.w	r5, r5, r5
            tmp_val = tmp_val >> (10 + 6);
 800f08a:	13eb      	asrs	r3, r5, #15
        cir_x[cir_size] = mid_int;
 800f08c:	3102      	adds	r1, #2
 800f08e:	b212      	sxth	r2, r2
 800f090:	5242      	strh	r2, [r0, r1]
        cir_y[cir_size] = mid_int;
 800f092:	f82c 2001 	strh.w	r2, [ip, r1]
        c->cir_opa[cir_size] = tmp_val;
 800f096:	6862      	ldr	r2, [r4, #4]
 800f098:	5593      	strb	r3, [r2, r6]
        c->cir_opa[cir_size] *= 16;
 800f09a:	6862      	ldr	r2, [r4, #4]
 800f09c:	5d93      	ldrb	r3, [r2, r6]
 800f09e:	011b      	lsls	r3, r3, #4
 800f0a0:	5593      	strb	r3, [r2, r6]
        cir_size++;
 800f0a2:	f10e 0e01 	add.w	lr, lr, #1
 800f0a6:	fa0f fe8e 	sxth.w	lr, lr
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800f0aa:	f1be 0602 	subs.w	r6, lr, #2
 800f0ae:	d41a      	bmi.n	800f0e6 <lv_draw_mask_radius_init+0x426>
 800f0b0:	4633      	mov	r3, r6
 800f0b2:	fa1f fe8e 	uxth.w	lr, lr
        cir_x[cir_size] = cir_y[i];
 800f0b6:	4476      	add	r6, lr
 800f0b8:	1af2      	subs	r2, r6, r3
 800f0ba:	b212      	sxth	r2, r2
 800f0bc:	f93c 1013 	ldrsh.w	r1, [ip, r3, lsl #1]
 800f0c0:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
        cir_y[cir_size] = cir_x[i];
 800f0c4:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 800f0c8:	f82c 1012 	strh.w	r1, [ip, r2, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 800f0cc:	6861      	ldr	r1, [r4, #4]
 800f0ce:	5ccd      	ldrb	r5, [r1, r3]
 800f0d0:	548d      	strb	r5, [r1, r2]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0d8:	d1ee      	bne.n	800f0b8 <lv_draw_mask_radius_init+0x3f8>
 800f0da:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f0de:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800f0e2:	fa0f fe8e 	sxth.w	lr, lr
    c->opa_start_on_y[0] = 0;
 800f0e6:	68e3      	ldr	r3, [r4, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 800f0ec:	46f0      	mov	r8, lr
 800f0ee:	4596      	cmp	lr, r2
 800f0f0:	dd37      	ble.n	800f162 <lv_draw_mask_radius_init+0x4a2>
 800f0f2:	4691      	mov	r9, r2
 800f0f4:	e010      	b.n	800f118 <lv_draw_mask_radius_init+0x458>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800f0f6:	f93c 3013 	ldrsh.w	r3, [ip, r3, lsl #1]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d1be      	bne.n	800f07c <lv_draw_mask_radius_init+0x3bc>
 800f0fe:	e7d4      	b.n	800f0aa <lv_draw_mask_radius_init+0x3ea>
            tmp_val = 1024 - tmp_val;
 800f100:	f5c5 6580 	rsb	r5, r5, #1024	; 0x400
            tmp_val = tmp_val * tmp_val * 2;
 800f104:	fb05 f505 	mul.w	r5, r5, r5
            tmp_val = tmp_val >> (10 + 6);
 800f108:	13eb      	asrs	r3, r5, #15
            tmp_val = 15 - tmp_val;
 800f10a:	f1c3 030f 	rsb	r3, r3, #15
 800f10e:	e7bd      	b.n	800f08c <lv_draw_mask_radius_init+0x3cc>
    while(i < cir_size) {
 800f110:	f109 0901 	add.w	r9, r9, #1
 800f114:	4590      	cmp	r8, r2
 800f116:	dd24      	ble.n	800f162 <lv_draw_mask_radius_init+0x4a2>
        c->opa_start_on_y[y] = i;
 800f118:	fa0f f189 	sxth.w	r1, r9
 800f11c:	004f      	lsls	r7, r1, #1
 800f11e:	68e3      	ldr	r3, [r4, #12]
 800f120:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 800f124:	0055      	lsls	r5, r2, #1
 800f126:	68a3      	ldr	r3, [r4, #8]
 800f128:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
 800f12c:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800f130:	f93c e012 	ldrsh.w	lr, [ip, r2, lsl #1]
 800f134:	4571      	cmp	r1, lr
 800f136:	d1eb      	bne.n	800f110 <lv_draw_mask_radius_init+0x450>
 800f138:	4590      	cmp	r8, r2
 800f13a:	dd12      	ble.n	800f162 <lv_draw_mask_radius_init+0x4a2>
 800f13c:	1eae      	subs	r6, r5, #2
 800f13e:	4406      	add	r6, r0
 800f140:	4465      	add	r5, ip
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 800f142:	68a1      	ldr	r1, [r4, #8]
 800f144:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800f148:	f831 a007 	ldrh.w	sl, [r1, r7]
 800f14c:	4553      	cmp	r3, sl
 800f14e:	bfa8      	it	ge
 800f150:	4653      	movge	r3, sl
 800f152:	53cb      	strh	r3, [r1, r7]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800f154:	3201      	adds	r2, #1
 800f156:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800f15a:	4573      	cmp	r3, lr
 800f15c:	d1d8      	bne.n	800f110 <lv_draw_mask_radius_init+0x450>
 800f15e:	4542      	cmp	r2, r8
 800f160:	d1ef      	bne.n	800f142 <lv_draw_mask_radius_init+0x482>
    lv_mem_buf_release(cir_x);
 800f162:	f012 fc35 	bl	80219d0 <lv_mem_buf_release>
 800f166:	e5eb      	b.n	800ed40 <lv_draw_mask_radius_init+0x80>

0800f168 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 800f168:	b510      	push	{r4, lr}
 800f16a:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800f16c:	2138      	movs	r1, #56	; 0x38
 800f16e:	f012 fdfb 	bl	8021d68 <lv_memset_00>
    dsc->bg_color = lv_color_white();
 800f172:	7923      	ldrb	r3, [r4, #4]
 800f174:	f043 031f 	orr.w	r3, r3, #31
 800f178:	7123      	strb	r3, [r4, #4]
 800f17a:	88a3      	ldrh	r3, [r4, #4]
 800f17c:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800f180:	80a3      	strh	r3, [r4, #4]
 800f182:	23ff      	movs	r3, #255	; 0xff
 800f184:	7163      	strb	r3, [r4, #5]
    dsc->bg_grad.stops[0].color = lv_color_white();
 800f186:	79a3      	ldrb	r3, [r4, #6]
 800f188:	f043 031f 	orr.w	r3, r3, #31
 800f18c:	71a3      	strb	r3, [r4, #6]
 800f18e:	88e3      	ldrh	r3, [r4, #6]
 800f190:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800f194:	80e3      	strh	r3, [r4, #6]
 800f196:	23ff      	movs	r3, #255	; 0xff
 800f198:	71e3      	strb	r3, [r4, #7]
    dsc->bg_grad.stops[1].color = lv_color_black();
 800f19a:	7aa3      	ldrb	r3, [r4, #10]
 800f19c:	f36f 0304 	bfc	r3, #0, #5
 800f1a0:	72a3      	strb	r3, [r4, #10]
 800f1a2:	8963      	ldrh	r3, [r4, #10]
 800f1a4:	f36f 134a 	bfc	r3, #5, #6
 800f1a8:	8163      	strh	r3, [r4, #10]
 800f1aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f1ae:	f36f 03c7 	bfc	r3, #3, #5
 800f1b2:	72e3      	strb	r3, [r4, #11]
    dsc->bg_grad.stops[1].frac = 0xFF;
 800f1b4:	23ff      	movs	r3, #255	; 0xff
 800f1b6:	7323      	strb	r3, [r4, #12]
    dsc->bg_grad.stops_count = 2;
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	73a2      	strb	r2, [r4, #14]
    dsc->border_color = lv_color_black();
 800f1bc:	7fa2      	ldrb	r2, [r4, #30]
 800f1be:	f36f 0204 	bfc	r2, #0, #5
 800f1c2:	77a2      	strb	r2, [r4, #30]
 800f1c4:	8be2      	ldrh	r2, [r4, #30]
 800f1c6:	f36f 124a 	bfc	r2, #5, #6
 800f1ca:	83e2      	strh	r2, [r4, #30]
 800f1cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f1d0:	f36f 02c7 	bfc	r2, #3, #5
 800f1d4:	77e2      	strb	r2, [r4, #31]
    dsc->shadow_color = lv_color_black();
 800f1d6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800f1da:	f36f 0204 	bfc	r2, #0, #5
 800f1de:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
 800f1e2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f1e4:	f36f 124a 	bfc	r2, #5, #6
 800f1e8:	85a2      	strh	r2, [r4, #44]	; 0x2c
 800f1ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f1ee:	f36f 02c7 	bfc	r2, #3, #5
 800f1f2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800f1f6:	4a09      	ldr	r2, [pc, #36]	; (800f21c <lv_draw_rect_dsc_init+0xb4>)
 800f1f8:	6162      	str	r2, [r4, #20]
    dsc->bg_opa = LV_OPA_COVER;
 800f1fa:	70e3      	strb	r3, [r4, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 800f1fc:	76a3      	strb	r3, [r4, #26]
    dsc->outline_opa = LV_OPA_COVER;
 800f1fe:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_opa = LV_OPA_COVER;
 800f202:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    dsc->shadow_opa = LV_OPA_COVER;
 800f206:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800f20a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f20e:	220f      	movs	r2, #15
 800f210:	f362 0345 	bfi	r3, r2, #1, #5
 800f214:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 800f218:	bd10      	pop	{r4, pc}
 800f21a:	bf00      	nop
 800f21c:	08030d78 	.word	0x08030d78

0800f220 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 800f220:	b508      	push	{r3, lr}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f222:	88d3      	ldrh	r3, [r2, #6]
 800f224:	3301      	adds	r3, #1
 800f226:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800f22a:	eba3 030c 	sub.w	r3, r3, ip
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f22e:	b21b      	sxth	r3, r3
 800f230:	2b00      	cmp	r3, #0
 800f232:	dd0a      	ble.n	800f24a <lv_draw_rect+0x2a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f234:	8893      	ldrh	r3, [r2, #4]
 800f236:	3301      	adds	r3, #1
 800f238:	f8b2 c000 	ldrh.w	ip, [r2]
 800f23c:	eba3 030c 	sub.w	r3, r3, ip
 800f240:	b21b      	sxth	r3, r3
 800f242:	2b00      	cmp	r3, #0
 800f244:	dd01      	ble.n	800f24a <lv_draw_rect+0x2a>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 800f246:	6903      	ldr	r3, [r0, #16]
 800f248:	4798      	blx	r3

    LV_ASSERT_MEM_INTEGRITY();
}
 800f24a:	bd08      	pop	{r3, pc}

0800f24c <lv_draw_transform>:
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
    LV_ASSERT_NULL(draw_ctx);
 800f24c:	b1b8      	cbz	r0, 800f27e <lv_draw_transform+0x32>
{
 800f24e:	b510      	push	{r4, lr}
 800f250:	b086      	sub	sp, #24
 800f252:	4684      	mov	ip, r0
    if(draw_ctx->draw_transform == NULL) {
 800f254:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800f256:	b184      	cbz	r4, 800f27a <lv_draw_transform+0x2e>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 800f258:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f25a:	9005      	str	r0, [sp, #20]
 800f25c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f25e:	9004      	str	r0, [sp, #16]
 800f260:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 800f264:	9003      	str	r0, [sp, #12]
 800f266:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f268:	9002      	str	r0, [sp, #8]
 800f26a:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800f26e:	9001      	str	r0, [sp, #4]
 800f270:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800f274:	9000      	str	r0, [sp, #0]
 800f276:	4660      	mov	r0, ip
 800f278:	47a0      	blx	r4

}
 800f27a:	b006      	add	sp, #24
 800f27c:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(draw_ctx);
 800f27e:	e7fe      	b.n	800f27e <lv_draw_transform+0x32>

0800f280 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 800f280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f282:	b085      	sub	sp, #20
 800f284:	4604      	mov	r4, r0
 800f286:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800f28a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800f28c:	461e      	mov	r6, r3
 800f28e:	b913      	cbnz	r3, 800f296 <_lv_img_buf_get_transformed_area+0x16>
 800f290:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f294:	d068      	beq.n	800f368 <_lv_img_buf_get_transformed_area+0xe8>
        res->x2 = w - 1;
        res->y2 = h - 1;
        return;
    }

    lv_point_t p[4] = {
 800f296:	2300      	movs	r3, #0
 800f298:	f8ad 3000 	strh.w	r3, [sp]
 800f29c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f2a0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f2a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f2a8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f2ac:	f8ad 200a 	strh.w	r2, [sp, #10]
 800f2b0:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f2b4:	f8ad 200e 	strh.w	r2, [sp, #14]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 800f2b8:	463b      	mov	r3, r7
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4668      	mov	r0, sp
 800f2c0:	f011 fd8e 	bl	8020de0 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 800f2c4:	463b      	mov	r3, r7
 800f2c6:	462a      	mov	r2, r5
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	a801      	add	r0, sp, #4
 800f2cc:	f011 fd88 	bl	8020de0 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 800f2d0:	463b      	mov	r3, r7
 800f2d2:	462a      	mov	r2, r5
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	a802      	add	r0, sp, #8
 800f2d8:	f011 fd82 	bl	8020de0 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 800f2dc:	463b      	mov	r3, r7
 800f2de:	462a      	mov	r2, r5
 800f2e0:	4631      	mov	r1, r6
 800f2e2:	a803      	add	r0, sp, #12
 800f2e4:	f011 fd7c 	bl	8020de0 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 800f2e8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f2ec:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 800f2f0:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800f2f4:	f9bd 1000 	ldrsh.w	r1, [sp]
 800f2f8:	461a      	mov	r2, r3
 800f2fa:	42ab      	cmp	r3, r5
 800f2fc:	bfa8      	it	ge
 800f2fe:	462a      	movge	r2, r5
 800f300:	4282      	cmp	r2, r0
 800f302:	bfa8      	it	ge
 800f304:	4602      	movge	r2, r0
 800f306:	428a      	cmp	r2, r1
 800f308:	bfa8      	it	ge
 800f30a:	460a      	movge	r2, r1
 800f30c:	3a02      	subs	r2, #2
 800f30e:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 800f310:	42ab      	cmp	r3, r5
 800f312:	bfb8      	it	lt
 800f314:	462b      	movlt	r3, r5
 800f316:	4283      	cmp	r3, r0
 800f318:	bfb8      	it	lt
 800f31a:	4603      	movlt	r3, r0
 800f31c:	428b      	cmp	r3, r1
 800f31e:	bfb8      	it	lt
 800f320:	460b      	movlt	r3, r1
 800f322:	3302      	adds	r3, #2
 800f324:	80a3      	strh	r3, [r4, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800f326:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f32a:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 800f32e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800f332:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800f336:	461a      	mov	r2, r3
 800f338:	42ab      	cmp	r3, r5
 800f33a:	bfa8      	it	ge
 800f33c:	462a      	movge	r2, r5
 800f33e:	4282      	cmp	r2, r0
 800f340:	bfa8      	it	ge
 800f342:	4602      	movge	r2, r0
 800f344:	428a      	cmp	r2, r1
 800f346:	bfa8      	it	ge
 800f348:	460a      	movge	r2, r1
 800f34a:	3a02      	subs	r2, #2
 800f34c:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 800f34e:	42ab      	cmp	r3, r5
 800f350:	bfb8      	it	lt
 800f352:	462b      	movlt	r3, r5
 800f354:	4283      	cmp	r3, r0
 800f356:	bfb8      	it	lt
 800f358:	4603      	movlt	r3, r0
 800f35a:	428b      	cmp	r3, r1
 800f35c:	bfb8      	it	lt
 800f35e:	460b      	movlt	r3, r1
 800f360:	3302      	adds	r3, #2
 800f362:	80e3      	strh	r3, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 800f364:	b005      	add	sp, #20
 800f366:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res->x1 = 0;
 800f368:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 800f36a:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 800f36c:	3901      	subs	r1, #1
 800f36e:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
 800f370:	3a01      	subs	r2, #1
 800f372:	80c2      	strh	r2, [r0, #6]
        return;
 800f374:	e7f6      	b.n	800f364 <_lv_img_buf_get_transformed_area+0xe4>
	...

0800f378 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800f378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f37a:	4604      	mov	r4, r0
 800f37c:	460d      	mov	r5, r1
 800f37e:	4616      	mov	r6, r2
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 800f380:	f011 f8d3 	bl	802052a <lv_tick_get>
 800f384:	4607      	mov	r7, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800f386:	4633      	mov	r3, r6
 800f388:	462a      	mov	r2, r5
 800f38a:	4621      	mov	r1, r4
 800f38c:	4810      	ldr	r0, [pc, #64]	; (800f3d0 <_lv_img_cache_open+0x58>)
 800f38e:	f000 fb8d 	bl	800faac <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800f392:	b130      	cbz	r0, 800f3a2 <_lv_img_cache_open+0x2a>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
        return NULL;
    }

    cached_src->life = 0;
 800f394:	4b0e      	ldr	r3, [pc, #56]	; (800f3d0 <_lv_img_cache_open+0x58>)
 800f396:	2200      	movs	r2, #0
 800f398:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 800f39a:	69db      	ldr	r3, [r3, #28]
 800f39c:	b15b      	cbz	r3, 800f3b6 <_lv_img_cache_open+0x3e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
 800f39e:	480c      	ldr	r0, [pc, #48]	; (800f3d0 <_lv_img_cache_open+0x58>)
}
 800f3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800f3a2:	4c0b      	ldr	r4, [pc, #44]	; (800f3d0 <_lv_img_cache_open+0x58>)
 800f3a4:	212c      	movs	r1, #44	; 0x2c
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f012 fcde 	bl	8021d68 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800f3ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f3b0:	62a3      	str	r3, [r4, #40]	; 0x28
        return NULL;
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	e7f4      	b.n	800f3a0 <_lv_img_cache_open+0x28>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800f3b6:	4638      	mov	r0, r7
 800f3b8:	f011 f8bb 	bl	8020532 <lv_tick_elaps>
 800f3bc:	4b04      	ldr	r3, [pc, #16]	; (800f3d0 <_lv_img_cache_open+0x58>)
 800f3be:	61d8      	str	r0, [r3, #28]
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800f3c0:	b918      	cbnz	r0, 800f3ca <_lv_img_cache_open+0x52>
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	61c3      	str	r3, [r0, #28]
 800f3c8:	e7ea      	b.n	800f3a0 <_lv_img_cache_open+0x28>
    return cached_src;
 800f3ca:	4801      	ldr	r0, [pc, #4]	; (800f3d0 <_lv_img_cache_open+0x58>)
 800f3cc:	e7e8      	b.n	800f3a0 <_lv_img_cache_open+0x28>
 800f3ce:	bf00      	nop
 800f3d0:	20002884 	.word	0x20002884

0800f3d4 <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 800f3d4:	4770      	bx	lr
	...

0800f3d8 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	460d      	mov	r5, r1
 800f3de:	4614      	mov	r4, r2
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 800f3e0:	4608      	mov	r0, r1
 800f3e2:	f7fd ff88 	bl	800d2f6 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	b9e8      	cbnz	r0, 800f426 <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800f3ea:	782b      	ldrb	r3, [r5, #0]
 800f3ec:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800f3f0:	3b04      	subs	r3, #4
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b10      	cmp	r3, #16
 800f3f6:	d813      	bhi.n	800f420 <lv_img_decoder_built_in_info+0x48>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800f3f8:	682b      	ldr	r3, [r5, #0]
 800f3fa:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800f3fe:	6822      	ldr	r2, [r4, #0]
 800f400:	f363 2294 	bfi	r2, r3, #10, #11
 800f404:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800f406:	886b      	ldrh	r3, [r5, #2]
 800f408:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800f40c:	8862      	ldrh	r2, [r4, #2]
 800f40e:	f363 124f 	bfi	r2, r3, #5, #11
 800f412:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800f414:	782a      	ldrb	r2, [r5, #0]
 800f416:	7823      	ldrb	r3, [r4, #0]
 800f418:	f362 0304 	bfi	r3, r2, #0, #5
 800f41c:	7023      	strb	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 800f41e:	2601      	movs	r6, #1
}
 800f420:	4630      	mov	r0, r6
 800f422:	b004      	add	sp, #16
 800f424:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800f426:	2801      	cmp	r0, #1
 800f428:	d010      	beq.n	800f44c <lv_img_decoder_built_in_info+0x74>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800f42a:	2802      	cmp	r0, #2
 800f42c:	d135      	bne.n	800f49a <lv_img_decoder_built_in_info+0xc2>
        header->w = 1;
 800f42e:	6823      	ldr	r3, [r4, #0]
 800f430:	2601      	movs	r6, #1
 800f432:	f366 2394 	bfi	r3, r6, #10, #11
 800f436:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800f438:	f3c3 420f 	ubfx	r2, r3, #16, #16
 800f43c:	f366 124f 	bfi	r2, r6, #5, #11
 800f440:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800f442:	220b      	movs	r2, #11
 800f444:	f362 0304 	bfi	r3, r2, #0, #5
 800f448:	7023      	strb	r3, [r4, #0]
 800f44a:	e7e9      	b.n	800f420 <lv_img_decoder_built_in_info+0x48>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800f44c:	4628      	mov	r0, r5
 800f44e:	f012 f821 	bl	8021494 <lv_fs_get_ext>
 800f452:	4913      	ldr	r1, [pc, #76]	; (800f4a0 <lv_img_decoder_built_in_info+0xc8>)
 800f454:	f7f0 fee6 	bl	8000224 <strcmp>
 800f458:	b108      	cbz	r0, 800f45e <lv_img_decoder_built_in_info+0x86>
 800f45a:	2600      	movs	r6, #0
 800f45c:	e7e0      	b.n	800f420 <lv_img_decoder_built_in_info+0x48>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 800f45e:	2202      	movs	r2, #2
 800f460:	4629      	mov	r1, r5
 800f462:	a801      	add	r0, sp, #4
 800f464:	f011 ffd6 	bl	8021414 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800f468:	b130      	cbz	r0, 800f478 <lv_img_decoder_built_in_info+0xa0>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800f46a:	7823      	ldrb	r3, [r4, #0]
 800f46c:	331c      	adds	r3, #28
 800f46e:	f003 031f 	and.w	r3, r3, #31
 800f472:	2b10      	cmp	r3, #16
 800f474:	d9d4      	bls.n	800f420 <lv_img_decoder_built_in_info+0x48>
 800f476:	e7f0      	b.n	800f45a <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 800f478:	466b      	mov	r3, sp
 800f47a:	2204      	movs	r2, #4
 800f47c:	4621      	mov	r1, r4
 800f47e:	eb0d 0002 	add.w	r0, sp, r2
 800f482:	f011 fe8e 	bl	80211a2 <lv_fs_read>
 800f486:	4605      	mov	r5, r0
            lv_fs_close(&f);
 800f488:	a801      	add	r0, sp, #4
 800f48a:	f011 fe6b 	bl	8021164 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800f48e:	2d00      	cmp	r5, #0
 800f490:	d1e3      	bne.n	800f45a <lv_img_decoder_built_in_info+0x82>
 800f492:	9b00      	ldr	r3, [sp, #0]
 800f494:	2b04      	cmp	r3, #4
 800f496:	d1e0      	bne.n	800f45a <lv_img_decoder_built_in_info+0x82>
 800f498:	e7e7      	b.n	800f46a <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
 800f49a:	2600      	movs	r6, #0
 800f49c:	e7c0      	b.n	800f420 <lv_img_decoder_built_in_info+0x48>
 800f49e:	bf00      	nop
 800f4a0:	0802cfb0 	.word	0x0802cfb0

0800f4a4 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800f4a4:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f4a6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    if(user_data) {
 800f4a8:	b185      	cbz	r5, 800f4cc <lv_img_decoder_built_in_close+0x28>
 800f4aa:	460c      	mov	r4, r1
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f4ac:	7c0b      	ldrb	r3, [r1, #16]
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d00d      	beq.n	800f4ce <lv_img_decoder_built_in_close+0x2a>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800f4b2:	68e8      	ldr	r0, [r5, #12]
 800f4b4:	b108      	cbz	r0, 800f4ba <lv_img_decoder_built_in_close+0x16>
 800f4b6:	f012 f9f5 	bl	80218a4 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800f4ba:	6928      	ldr	r0, [r5, #16]
 800f4bc:	b108      	cbz	r0, 800f4c2 <lv_img_decoder_built_in_close+0x1e>
 800f4be:	f012 f9f1 	bl	80218a4 <lv_mem_free>

        lv_mem_free(user_data);
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	f012 f9ee 	bl	80218a4 <lv_mem_free>
        dsc->user_data = NULL;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800f4cc:	bd38      	pop	{r3, r4, r5, pc}
            lv_fs_close(&user_data->f);
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f011 fe48 	bl	8021164 <lv_fs_close>
 800f4d4:	e7ed      	b.n	800f4b2 <lv_img_decoder_built_in_close+0xe>
	...

0800f4d8 <lv_img_decoder_built_in_open>:
{
 800f4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4dc:	b085      	sub	sp, #20
 800f4de:	4606      	mov	r6, r0
 800f4e0:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f4e2:	7c0d      	ldrb	r5, [r1, #16]
 800f4e4:	2d01      	cmp	r5, #1
 800f4e6:	d011      	beq.n	800f50c <lv_img_decoder_built_in_open+0x34>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f4e8:	2d00      	cmp	r5, #0
 800f4ea:	f040 80e9 	bne.w	800f6c0 <lv_img_decoder_built_in_open+0x1e8>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800f4ee:	684b      	ldr	r3, [r1, #4]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d038      	beq.n	800f568 <lv_img_decoder_built_in_open+0x90>
    lv_img_cf_t cf = dsc->header.cf;
 800f4f6:	7d0b      	ldrb	r3, [r1, #20]
 800f4f8:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800f4fc:	1f02      	subs	r2, r0, #4
 800f4fe:	b2d2      	uxtb	r2, r2
 800f500:	2a02      	cmp	r2, #2
 800f502:	d92d      	bls.n	800f560 <lv_img_decoder_built_in_open+0x88>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800f504:	2814      	cmp	r0, #20
 800f506:	f040 80e4 	bne.w	800f6d2 <lv_img_decoder_built_in_open+0x1fa>
 800f50a:	e029      	b.n	800f560 <lv_img_decoder_built_in_open+0x88>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800f50c:	6848      	ldr	r0, [r1, #4]
 800f50e:	f011 ffc1 	bl	8021494 <lv_fs_get_ext>
 800f512:	4977      	ldr	r1, [pc, #476]	; (800f6f0 <lv_img_decoder_built_in_open+0x218>)
 800f514:	f7f0 fe86 	bl	8000224 <strcmp>
 800f518:	b108      	cbz	r0, 800f51e <lv_img_decoder_built_in_open+0x46>
 800f51a:	2500      	movs	r5, #0
 800f51c:	e024      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800f51e:	2202      	movs	r2, #2
 800f520:	6861      	ldr	r1, [r4, #4]
 800f522:	a801      	add	r0, sp, #4
 800f524:	f011 ff76 	bl	8021414 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800f528:	2800      	cmp	r0, #0
 800f52a:	d1f6      	bne.n	800f51a <lv_img_decoder_built_in_open+0x42>
        if(dsc->user_data == NULL) {
 800f52c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f52e:	b1fb      	cbz	r3, 800f570 <lv_img_decoder_built_in_open+0x98>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f532:	aa01      	add	r2, sp, #4
 800f534:	f103 000c 	add.w	r0, r3, #12
        *d8 = *s8;
 800f538:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f53c:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
 800f540:	4283      	cmp	r3, r0
 800f542:	d1f9      	bne.n	800f538 <lv_img_decoder_built_in_open+0x60>
    lv_img_cf_t cf = dsc->header.cf;
 800f544:	7d23      	ldrb	r3, [r4, #20]
 800f546:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800f54a:	1f02      	subs	r2, r0, #4
 800f54c:	b2d2      	uxtb	r2, r2
 800f54e:	2a02      	cmp	r2, #2
 800f550:	d902      	bls.n	800f558 <lv_img_decoder_built_in_open+0x80>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800f552:	2814      	cmp	r0, #20
 800f554:	f040 80bd 	bne.w	800f6d2 <lv_img_decoder_built_in_open+0x1fa>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f558:	7c23      	ldrb	r3, [r4, #16]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f040 80a8 	bne.w	800f6b0 <lv_img_decoder_built_in_open+0x1d8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800f560:	6863      	ldr	r3, [r4, #4]
 800f562:	689b      	ldr	r3, [r3, #8]
 800f564:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 800f566:	2501      	movs	r5, #1
}
 800f568:	4628      	mov	r0, r5
 800f56a:	b005      	add	sp, #20
 800f56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800f570:	2014      	movs	r0, #20
 800f572:	f012 f979 	bl	8021868 <lv_mem_alloc>
 800f576:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800f578:	b118      	cbz	r0, 800f582 <lv_img_decoder_built_in_open+0xaa>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800f57a:	2114      	movs	r1, #20
 800f57c:	f012 fbf4 	bl	8021d68 <lv_memset_00>
 800f580:	e7d6      	b.n	800f530 <lv_img_decoder_built_in_open+0x58>
            LV_ASSERT_MALLOC(dsc->user_data);
 800f582:	e7fe      	b.n	800f582 <lv_img_decoder_built_in_open+0xaa>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800f584:	f7fd fe87 	bl	800d296 <lv_img_cf_get_px_size>
 800f588:	4680      	mov	r8, r0
        if(dsc->user_data == NULL) {
 800f58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d040      	beq.n	800f612 <lv_img_decoder_built_in_open+0x13a>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f590:	6a67      	ldr	r7, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800f592:	2002      	movs	r0, #2
 800f594:	fa00 f008 	lsl.w	r0, r0, r8
 800f598:	f012 f966 	bl	8021868 <lv_mem_alloc>
 800f59c:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d041      	beq.n	800f626 <lv_img_decoder_built_in_open+0x14e>
        uint32_t palette_size = 1 << px_size;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	fa03 f808 	lsl.w	r8, r3, r8
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800f5a8:	4640      	mov	r0, r8
 800f5aa:	f012 f95d 	bl	8021868 <lv_mem_alloc>
 800f5ae:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d039      	beq.n	800f628 <lv_img_decoder_built_in_open+0x150>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d037      	beq.n	800f62a <lv_img_decoder_built_in_open+0x152>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f5ba:	7c25      	ldrb	r5, [r4, #16]
 800f5bc:	2d01      	cmp	r5, #1
 800f5be:	d03a      	beq.n	800f636 <lv_img_decoder_built_in_open+0x15e>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800f5c0:	6863      	ldr	r3, [r4, #4]
 800f5c2:	6899      	ldr	r1, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 800f5c4:	f1b8 0f00 	cmp.w	r8, #0
 800f5c8:	d074      	beq.n	800f6b4 <lv_img_decoder_built_in_open+0x1dc>
 800f5ca:	2300      	movs	r3, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	eb00 0643 	add.w	r6, r0, r3, lsl #1
 800f5d2:	784d      	ldrb	r5, [r1, #1]
 800f5d4:	08ad      	lsrs	r5, r5, #2
 800f5d6:	788c      	ldrb	r4, [r1, #2]
 800f5d8:	08e4      	lsrs	r4, r4, #3
 800f5da:	780a      	ldrb	r2, [r1, #0]
 800f5dc:	08d2      	lsrs	r2, r2, #3
 800f5de:	f810 c013 	ldrb.w	ip, [r0, r3, lsl #1]
 800f5e2:	f362 0c04 	bfi	ip, r2, #0, #5
 800f5e6:	f800 c013 	strb.w	ip, [r0, r3, lsl #1]
 800f5ea:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800f5ee:	f365 124a 	bfi	r2, r5, #5, #6
 800f5f2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800f5f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f5fa:	f364 02c7 	bfi	r2, r4, #3, #5
 800f5fe:	7072      	strb	r2, [r6, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800f600:	78c8      	ldrb	r0, [r1, #3]
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	54d0      	strb	r0, [r2, r3]
            for(i = 0; i < palette_size; i++) {
 800f606:	3301      	adds	r3, #1
 800f608:	3104      	adds	r1, #4
 800f60a:	4598      	cmp	r8, r3
 800f60c:	d1de      	bne.n	800f5cc <lv_img_decoder_built_in_open+0xf4>
        return LV_RES_OK;
 800f60e:	2501      	movs	r5, #1
 800f610:	e7aa      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800f612:	2014      	movs	r0, #20
 800f614:	f012 f928 	bl	8021868 <lv_mem_alloc>
 800f618:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800f61a:	b118      	cbz	r0, 800f624 <lv_img_decoder_built_in_open+0x14c>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800f61c:	2114      	movs	r1, #20
 800f61e:	f012 fba3 	bl	8021d68 <lv_memset_00>
 800f622:	e7b5      	b.n	800f590 <lv_img_decoder_built_in_open+0xb8>
            LV_ASSERT_MALLOC(dsc->user_data);
 800f624:	e7fe      	b.n	800f624 <lv_img_decoder_built_in_open+0x14c>
        LV_ASSERT_MALLOC(user_data->palette);
 800f626:	e7fe      	b.n	800f626 <lv_img_decoder_built_in_open+0x14e>
        LV_ASSERT_MALLOC(user_data->opa);
 800f628:	e7fe      	b.n	800f628 <lv_img_decoder_built_in_open+0x150>
            lv_img_decoder_built_in_close(decoder, dsc);
 800f62a:	4621      	mov	r1, r4
 800f62c:	4630      	mov	r0, r6
 800f62e:	f7ff ff39 	bl	800f4a4 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 800f632:	2500      	movs	r5, #0
 800f634:	e798      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 800f636:	2200      	movs	r2, #0
 800f638:	2104      	movs	r1, #4
 800f63a:	4638      	mov	r0, r7
 800f63c:	f011 fe81 	bl	8021342 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800f640:	f1b8 0f00 	cmp.w	r8, #0
 800f644:	d090      	beq.n	800f568 <lv_img_decoder_built_in_open+0x90>
 800f646:	2400      	movs	r4, #0
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800f648:	46a1      	mov	r9, r4
 800f64a:	2604      	movs	r6, #4
 800f64c:	464b      	mov	r3, r9
 800f64e:	4632      	mov	r2, r6
 800f650:	a901      	add	r1, sp, #4
 800f652:	4638      	mov	r0, r7
 800f654:	f011 fda5 	bl	80211a2 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	eb02 0c44 	add.w	ip, r2, r4, lsl #1
 800f65e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800f662:	0880      	lsrs	r0, r0, #2
 800f664:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800f668:	08c9      	lsrs	r1, r1, #3
 800f66a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f66e:	08db      	lsrs	r3, r3, #3
 800f670:	f812 e014 	ldrb.w	lr, [r2, r4, lsl #1]
 800f674:	f363 0e04 	bfi	lr, r3, #0, #5
 800f678:	f802 e014 	strb.w	lr, [r2, r4, lsl #1]
 800f67c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800f680:	f360 134a 	bfi	r3, r0, #5, #6
 800f684:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 800f688:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f68c:	f361 03c7 	bfi	r3, r1, #3, #5
 800f690:	f88c 3001 	strb.w	r3, [ip, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 800f694:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 800f69c:	3401      	adds	r4, #1
 800f69e:	45a0      	cmp	r8, r4
 800f6a0:	d1d4      	bne.n	800f64c <lv_img_decoder_built_in_open+0x174>
 800f6a2:	e761      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
        lv_img_decoder_built_in_close(decoder, dsc);
 800f6a4:	4621      	mov	r1, r4
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	f7ff fefc 	bl	800f4a4 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800f6ac:	2500      	movs	r5, #0
 800f6ae:	e75b      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
            return LV_RES_OK;
 800f6b0:	2501      	movs	r5, #1
 800f6b2:	e759      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
        return LV_RES_OK;
 800f6b4:	2501      	movs	r5, #1
 800f6b6:	e757      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
            return LV_RES_OK;
 800f6b8:	2501      	movs	r5, #1
 800f6ba:	e755      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
 800f6bc:	2501      	movs	r5, #1
 800f6be:	e753      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
    lv_img_cf_t cf = dsc->header.cf;
 800f6c0:	7d0b      	ldrb	r3, [r1, #20]
 800f6c2:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800f6c6:	1f02      	subs	r2, r0, #4
 800f6c8:	b2d2      	uxtb	r2, r2
 800f6ca:	2a02      	cmp	r2, #2
 800f6cc:	d9f4      	bls.n	800f6b8 <lv_img_decoder_built_in_open+0x1e0>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800f6ce:	2814      	cmp	r0, #20
 800f6d0:	d0f4      	beq.n	800f6bc <lv_img_decoder_built_in_open+0x1e4>
 800f6d2:	280e      	cmp	r0, #14
 800f6d4:	f43f af40 	beq.w	800f558 <lv_img_decoder_built_in_open+0x80>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800f6d8:	1fc2      	subs	r2, r0, #7
 800f6da:	b2d2      	uxtb	r2, r2
 800f6dc:	2a03      	cmp	r2, #3
 800f6de:	f67f af51 	bls.w	800f584 <lv_img_decoder_built_in_open+0xac>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 800f6e2:	f1a0 030b 	sub.w	r3, r0, #11
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d8db      	bhi.n	800f6a4 <lv_img_decoder_built_in_open+0x1cc>
        return LV_RES_OK; /*Nothing to process*/
 800f6ec:	2501      	movs	r5, #1
 800f6ee:	e73b      	b.n	800f568 <lv_img_decoder_built_in_open+0x90>
 800f6f0:	0802cfb0 	.word	0x0802cfb0

0800f6f4 <lv_img_decoder_built_in_read_line>:
{
 800f6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f8:	b089      	sub	sp, #36	; 0x24
 800f6fa:	460d      	mov	r5, r1
 800f6fc:	4614      	mov	r4, r2
 800f6fe:	461f      	mov	r7, r3
 800f700:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800f704:	7d09      	ldrb	r1, [r1, #20]
 800f706:	f001 031e 	and.w	r3, r1, #30
 800f70a:	2b04      	cmp	r3, #4
 800f70c:	d00f      	beq.n	800f72e <lv_img_decoder_built_in_read_line+0x3a>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800f70e:	f001 011f 	and.w	r1, r1, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800f712:	2906      	cmp	r1, #6
 800f714:	d00b      	beq.n	800f72e <lv_img_decoder_built_in_read_line+0x3a>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800f716:	f1a1 030b 	sub.w	r3, r1, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b03      	cmp	r3, #3
 800f71e:	d93b      	bls.n	800f798 <lv_img_decoder_built_in_read_line+0xa4>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800f720:	3907      	subs	r1, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800f722:	b2c9      	uxtb	r1, r1
 800f724:	2903      	cmp	r1, #3
 800f726:	f240 80f0 	bls.w	800f90a <lv_img_decoder_built_in_read_line+0x216>
        return LV_RES_INV;
 800f72a:	2400      	movs	r4, #0
 800f72c:	e003      	b.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800f72e:	7c2b      	ldrb	r3, [r5, #16]
 800f730:	2b01      	cmp	r3, #1
 800f732:	d004      	beq.n	800f73e <lv_img_decoder_built_in_read_line+0x4a>
    lv_res_t res = LV_RES_INV;
 800f734:	2400      	movs	r4, #0
}
 800f736:	4620      	mov	r0, r4
 800f738:	b009      	add	sp, #36	; 0x24
 800f73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f73e:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800f742:	7d28      	ldrb	r0, [r5, #20]
 800f744:	f000 001f 	and.w	r0, r0, #31
 800f748:	f7fd fda5 	bl	800d296 <lv_img_cf_get_px_size>
 800f74c:	4680      	mov	r8, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800f74e:	6969      	ldr	r1, [r5, #20]
 800f750:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800f754:	fb07 4101 	mla	r1, r7, r1, r4
 800f758:	fb00 f101 	mul.w	r1, r0, r1
 800f75c:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800f75e:	2200      	movs	r2, #0
 800f760:	3104      	adds	r1, #4
 800f762:	4648      	mov	r0, r9
 800f764:	f011 fded 	bl	8021342 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800f768:	4604      	mov	r4, r0
 800f76a:	b108      	cbz	r0, 800f770 <lv_img_decoder_built_in_read_line+0x7c>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 800f76c:	2400      	movs	r4, #0
 800f76e:	e7e2      	b.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
    }
    uint32_t btr = len * (px_size >> 3);
 800f770:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 800f774:	fb06 f608 	mul.w	r6, r6, r8
    uint32_t br  = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	9304      	str	r3, [sp, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800f77c:	ab04      	add	r3, sp, #16
 800f77e:	4632      	mov	r2, r6
 800f780:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f782:	4648      	mov	r0, r9
 800f784:	f011 fd0d 	bl	80211a2 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800f788:	2800      	cmp	r0, #0
 800f78a:	d1d4      	bne.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 800f78c:	9c04      	ldr	r4, [sp, #16]
 800f78e:	42b4      	cmp	r4, r6
 800f790:	bf14      	ite	ne
 800f792:	2400      	movne	r4, #0
 800f794:	2401      	moveq	r4, #1
 800f796:	e7ce      	b.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800f798:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800f79c:	f8ad 3008 	strh.w	r3, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800f7a0:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 800f7a4:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800f7a8:	9303      	str	r3, [sp, #12]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800f7aa:	4ba6      	ldr	r3, [pc, #664]	; (800fa44 <lv_img_decoder_built_in_read_line+0x350>)
 800f7ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f7ae:	f10d 0c20 	add.w	ip, sp, #32
 800f7b2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800f7b6:	892a      	ldrh	r2, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800f7b8:	2e00      	cmp	r6, #0
 800f7ba:	dd0d      	ble.n	800f7d8 <lv_img_decoder_built_in_read_line+0xe4>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800f7bc:	0a10      	lsrs	r0, r2, #8
 800f7be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f7c0:	1e73      	subs	r3, r6, #1
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f7c8:	f101 0c03 	add.w	ip, r1, #3
 800f7cc:	4463      	add	r3, ip
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800f7ce:	700a      	strb	r2, [r1, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800f7d0:	7048      	strb	r0, [r1, #1]
    for(i = 0; i < len; i++) {
 800f7d2:	3103      	adds	r1, #3
 800f7d4:	4299      	cmp	r1, r3
 800f7d6:	d1fa      	bne.n	800f7ce <lv_img_decoder_built_in_read_line+0xda>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800f7d8:	7d28      	ldrb	r0, [r5, #20]
 800f7da:	f000 001f 	and.w	r0, r0, #31
 800f7de:	f7fd fd5a 	bl	800d296 <lv_img_cf_get_px_size>
 800f7e2:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800f7e4:	7d2b      	ldrb	r3, [r5, #20]
 800f7e6:	f003 031f 	and.w	r3, r3, #31
 800f7ea:	3b0b      	subs	r3, #11
 800f7ec:	2b03      	cmp	r3, #3
 800f7ee:	d874      	bhi.n	800f8da <lv_img_decoder_built_in_read_line+0x1e6>
 800f7f0:	e8df f003 	tbb	[pc, r3]
 800f7f4:	6a5b4c02 	.word	0x6a5b4c02
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800f7f8:	696b      	ldr	r3, [r5, #20]
 800f7fa:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800f7fe:	3007      	adds	r0, #7
 800f800:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800f802:	10e3      	asrs	r3, r4, #3
 800f804:	fb07 3700 	mla	r7, r7, r0, r3
            pos = 7 - (x & 0x7);
 800f808:	43e4      	mvns	r4, r4
 800f80a:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 800f80e:	f10d 0908 	add.w	r9, sp, #8
            ofs += w * y + x;  /*First pixel*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f812:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800f816:	9001      	str	r0, [sp, #4]
 800f818:	f012 f878 	bl	802190c <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 800f81c:	4682      	mov	sl, r0
 800f81e:	2800      	cmp	r0, #0
 800f820:	d071      	beq.n	800f906 <lv_img_decoder_built_in_read_line+0x212>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f822:	7c2b      	ldrb	r3, [r5, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d161      	bne.n	800f8ec <lv_img_decoder_built_in_read_line+0x1f8>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800f828:	686b      	ldr	r3, [r5, #4]
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	441f      	add	r7, r3
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    for(i = 0; i < len; i++) {
 800f82e:	2e00      	cmp	r6, #0
 800f830:	dd27      	ble.n	800f882 <lv_img_decoder_built_in_read_line+0x18e>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800f832:	2001      	movs	r0, #1
 800f834:	fa00 f008 	lsl.w	r0, r0, r8
 800f838:	3801      	subs	r0, #1
 800f83a:	b280      	uxth	r0, r0
 800f83c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f83e:	1e71      	subs	r1, r6, #1
 800f840:	b289      	uxth	r1, r1
 800f842:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f846:	4613      	mov	r3, r2
 800f848:	3303      	adds	r3, #3
 800f84a:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800f84c:	f1c8 0608 	rsb	r6, r8, #8
 800f850:	b276      	sxtb	r6, r6
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800f852:	783b      	ldrb	r3, [r7, #0]
 800f854:	4123      	asrs	r3, r4
 800f856:	4003      	ands	r3, r0
 800f858:	b2db      	uxtb	r3, r3
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800f85a:	f895 c014 	ldrb.w	ip, [r5, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800f85e:	f00c 0c1f 	and.w	ip, ip, #31
 800f862:	f1bc 0f0e 	cmp.w	ip, #14
 800f866:	bf18      	it	ne
 800f868:	f819 3003 	ldrbne.w	r3, [r9, r3]
 800f86c:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
 800f86e:	eba4 0408 	sub.w	r4, r4, r8
 800f872:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800f874:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800f876:	bfbc      	itt	lt
 800f878:	4634      	movlt	r4, r6
            data_tmp++;
 800f87a:	3701      	addlt	r7, #1
    for(i = 0; i < len; i++) {
 800f87c:	3203      	adds	r2, #3
 800f87e:	4291      	cmp	r1, r2
 800f880:	d1e7      	bne.n	800f852 <lv_img_decoder_built_in_read_line+0x15e>
        }
    }
    lv_mem_buf_release(fs_buf);
 800f882:	4650      	mov	r0, sl
 800f884:	f012 f8a4 	bl	80219d0 <lv_mem_buf_release>
    return LV_RES_OK;
 800f888:	2401      	movs	r4, #1
 800f88a:	e754      	b.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800f88c:	696b      	ldr	r3, [r5, #20]
 800f88e:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800f892:	3003      	adds	r0, #3
 800f894:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800f896:	10a3      	asrs	r3, r4, #2
 800f898:	fb07 3700 	mla	r7, r7, r0, r3
            pos = 6 - (x & 0x3) * 2;
 800f89c:	43e4      	mvns	r4, r4
 800f89e:	f004 0403 	and.w	r4, r4, #3
 800f8a2:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800f8a4:	f10d 090c 	add.w	r9, sp, #12
            break;
 800f8a8:	e7b3      	b.n	800f812 <lv_img_decoder_built_in_read_line+0x11e>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800f8aa:	696b      	ldr	r3, [r5, #20]
 800f8ac:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800f8b4:	1063      	asrs	r3, r4, #1
 800f8b6:	fb07 3700 	mla	r7, r7, r0, r3
            pos = 4 - (x & 0x1) * 4;
 800f8ba:	f014 0f01 	tst.w	r4, #1
 800f8be:	d011      	beq.n	800f8e4 <lv_img_decoder_built_in_read_line+0x1f0>
 800f8c0:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
 800f8c2:	f10d 0910 	add.w	r9, sp, #16
 800f8c6:	e7a4      	b.n	800f812 <lv_img_decoder_built_in_read_line+0x11e>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800f8c8:	6968      	ldr	r0, [r5, #20]
 800f8ca:	f3c0 238a 	ubfx	r3, r0, #10, #11
 800f8ce:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 800f8d0:	fb07 4703 	mla	r7, r7, r3, r4
            pos = 0;
 800f8d4:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800f8d6:	46a1      	mov	r9, r4
            break;
 800f8d8:	e79b      	b.n	800f812 <lv_img_decoder_built_in_read_line+0x11e>
    switch(dsc->header.cf) {
 800f8da:	2400      	movs	r4, #0
 800f8dc:	4627      	mov	r7, r4
 800f8de:	4620      	mov	r0, r4
 800f8e0:	46a1      	mov	r9, r4
 800f8e2:	e796      	b.n	800f812 <lv_img_decoder_built_in_read_line+0x11e>
            pos = 4 - (x & 0x1) * 4;
 800f8e4:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
 800f8e6:	f10d 0910 	add.w	r9, sp, #16
 800f8ea:	e792      	b.n	800f812 <lv_img_decoder_built_in_read_line+0x11e>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	1d39      	adds	r1, r7, #4
 800f8f0:	4658      	mov	r0, fp
 800f8f2:	f011 fd26 	bl	8021342 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	9a01      	ldr	r2, [sp, #4]
 800f8fa:	4651      	mov	r1, sl
 800f8fc:	4658      	mov	r0, fp
 800f8fe:	f011 fc50 	bl	80211a2 <lv_fs_read>
        data_tmp = fs_buf;
 800f902:	4657      	mov	r7, sl
 800f904:	e793      	b.n	800f82e <lv_img_decoder_built_in_read_line+0x13a>
    if(fs_buf == NULL) return LV_RES_INV;
 800f906:	2400      	movs	r4, #0
 800f908:	e715      	b.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
}

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800f90a:	7d28      	ldrb	r0, [r5, #20]
 800f90c:	f000 001f 	and.w	r0, r0, #31
 800f910:	f7fd fcc1 	bl	800d296 <lv_img_cf_get_px_size>
 800f914:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800f916:	7d2b      	ldrb	r3, [r5, #20]
 800f918:	f003 031f 	and.w	r3, r3, #31
 800f91c:	3b07      	subs	r3, #7
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d87b      	bhi.n	800fa1a <lv_img_decoder_built_in_read_line+0x326>
 800f922:	e8df f003 	tbb	[pc, r3]
 800f926:	4f02      	.short	0x4f02
 800f928:	705f      	.short	0x705f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800f92a:	696b      	ldr	r3, [r5, #20]
 800f92c:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800f930:	3007      	adds	r0, #7
 800f932:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800f934:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 800f938:	fb07 a700 	mla	r7, r7, r0, sl
            ofs += 8;                /*Skip the palette*/
 800f93c:	f107 0a08 	add.w	sl, r7, #8
            pos = 7 - (x & 0x7);
 800f940:	43e4      	mvns	r4, r4
 800f942:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800f946:	6a6f      	ldr	r7, [r5, #36]	; 0x24

    uint8_t * fs_buf = lv_mem_buf_get(w);
 800f948:	4683      	mov	fp, r0
 800f94a:	f011 ffdf 	bl	802190c <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 800f94e:	4681      	mov	r9, r0
 800f950:	2800      	cmp	r0, #0
 800f952:	d075      	beq.n	800fa40 <lv_img_decoder_built_in_read_line+0x34c>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800f954:	7c2b      	ldrb	r3, [r5, #16]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d164      	bne.n	800fa24 <lv_img_decoder_built_in_read_line+0x330>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 800f95a:	686b      	ldr	r3, [r5, #4]
 800f95c:	689d      	ldr	r5, [r3, #8]
 800f95e:	4455      	add	r5, sl
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800f960:	2e00      	cmp	r6, #0
 800f962:	dd2a      	ble.n	800f9ba <lv_img_decoder_built_in_read_line+0x2c6>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800f964:	f04f 0c01 	mov.w	ip, #1
 800f968:	fa0c fc08 	lsl.w	ip, ip, r8
 800f96c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f970:	fa1f fc8c 	uxth.w	ip, ip
 800f974:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f976:	1e71      	subs	r1, r6, #1
 800f978:	b289      	uxth	r1, r1
 800f97a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f97e:	4613      	mov	r3, r2
 800f980:	3303      	adds	r3, #3
 800f982:	4419      	add	r1, r3
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800f984:	f1c8 0608 	rsb	r6, r8, #8
 800f988:	b276      	sxtb	r6, r6
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800f98a:	782b      	ldrb	r3, [r5, #0]
 800f98c:	4123      	asrs	r3, r4
 800f98e:	ea03 030c 	and.w	r3, r3, ip
        lv_color_t color = user_data->palette[val_act];
 800f992:	b2db      	uxtb	r3, r3
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 800f99a:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 800f99c:	0a00      	lsrs	r0, r0, #8
 800f99e:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 800f9a0:	6938      	ldr	r0, [r7, #16]
 800f9a2:	5cc3      	ldrb	r3, [r0, r3]
 800f9a4:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
 800f9a6:	eba4 0408 	sub.w	r4, r4, r8
 800f9aa:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800f9ac:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800f9ae:	bfbc      	itt	lt
 800f9b0:	4634      	movlt	r4, r6
            data_tmp++;
 800f9b2:	3501      	addlt	r5, #1
    for(i = 0; i < len; i++) {
 800f9b4:	3203      	adds	r2, #3
 800f9b6:	428a      	cmp	r2, r1
 800f9b8:	d1e7      	bne.n	800f98a <lv_img_decoder_built_in_read_line+0x296>
        }
    }
    lv_mem_buf_release(fs_buf);
 800f9ba:	4648      	mov	r0, r9
 800f9bc:	f012 f808 	bl	80219d0 <lv_mem_buf_release>
    return LV_RES_OK;
 800f9c0:	2401      	movs	r4, #1
 800f9c2:	e6b8      	b.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800f9c4:	696b      	ldr	r3, [r5, #20]
 800f9c6:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800f9ca:	3003      	adds	r0, #3
 800f9cc:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800f9ce:	ea4f 0aa4 	mov.w	sl, r4, asr #2
 800f9d2:	fb07 a700 	mla	r7, r7, r0, sl
            ofs += 16;               /*Skip the palette*/
 800f9d6:	f107 0a10 	add.w	sl, r7, #16
            pos = 6 - (x & 0x3) * 2;
 800f9da:	43e4      	mvns	r4, r4
 800f9dc:	f004 0403 	and.w	r4, r4, #3
 800f9e0:	0064      	lsls	r4, r4, #1
            break;
 800f9e2:	e7b0      	b.n	800f946 <lv_img_decoder_built_in_read_line+0x252>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800f9e4:	696b      	ldr	r3, [r5, #20]
 800f9e6:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800f9ea:	3001      	adds	r0, #1
 800f9ec:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800f9ee:	ea4f 0a64 	mov.w	sl, r4, asr #1
 800f9f2:	fb07 a700 	mla	r7, r7, r0, sl
            ofs += 64;               /*Skip the palette*/
 800f9f6:	f107 0a40 	add.w	sl, r7, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 800f9fa:	f014 0f01 	tst.w	r4, #1
 800f9fe:	bf0c      	ite	eq
 800fa00:	2404      	moveq	r4, #4
 800fa02:	2400      	movne	r4, #0
 800fa04:	e79f      	b.n	800f946 <lv_img_decoder_built_in_read_line+0x252>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800fa06:	6968      	ldr	r0, [r5, #20]
 800fa08:	f3c0 238a 	ubfx	r3, r0, #10, #11
 800fa0c:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 800fa0e:	fb07 4703 	mla	r7, r7, r3, r4
            ofs += 1024;       /*Skip the palette*/
 800fa12:	f507 6a80 	add.w	sl, r7, #1024	; 0x400
            pos = 0;
 800fa16:	2400      	movs	r4, #0
            break;
 800fa18:	e795      	b.n	800f946 <lv_img_decoder_built_in_read_line+0x252>
    switch(dsc->header.cf) {
 800fa1a:	f04f 0a00 	mov.w	sl, #0
 800fa1e:	4654      	mov	r4, sl
 800fa20:	4650      	mov	r0, sl
 800fa22:	e790      	b.n	800f946 <lv_img_decoder_built_in_read_line+0x252>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800fa24:	2200      	movs	r2, #0
 800fa26:	f10a 0104 	add.w	r1, sl, #4
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	f011 fc89 	bl	8021342 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800fa30:	2300      	movs	r3, #0
 800fa32:	465a      	mov	r2, fp
 800fa34:	4649      	mov	r1, r9
 800fa36:	4638      	mov	r0, r7
 800fa38:	f011 fbb3 	bl	80211a2 <lv_fs_read>
        data_tmp = fs_buf;
 800fa3c:	464d      	mov	r5, r9
 800fa3e:	e78f      	b.n	800f960 <lv_img_decoder_built_in_read_line+0x26c>
    if(fs_buf == NULL) return LV_RES_INV;
 800fa40:	2400      	movs	r4, #0
 800fa42:	e678      	b.n	800f736 <lv_img_decoder_built_in_read_line+0x42>
 800fa44:	0802cdd8 	.word	0x0802cdd8

0800fa48 <lv_img_decoder_get_info>:
{
 800fa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	460f      	mov	r7, r1
    lv_memset_00(header, sizeof(lv_img_header_t));
 800fa50:	2104      	movs	r1, #4
 800fa52:	4638      	mov	r0, r7
 800fa54:	f012 f988 	bl	8021d68 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 800fa58:	b306      	cbz	r6, 800fa9c <lv_img_decoder_get_info+0x54>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f7fd fc4b 	bl	800d2f6 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800fa60:	4605      	mov	r5, r0
 800fa62:	b908      	cbnz	r0, 800fa68 <lv_img_decoder_get_info+0x20>
        if(img_dsc->data == NULL) return LV_RES_INV;
 800fa64:	68b3      	ldr	r3, [r6, #8]
 800fa66:	b1d3      	cbz	r3, 800fa9e <lv_img_decoder_get_info+0x56>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800fa68:	480f      	ldr	r0, [pc, #60]	; (800faa8 <lv_img_decoder_get_info+0x60>)
 800fa6a:	f011 fdc7 	bl	80215fc <_lv_ll_get_head>
 800fa6e:	4604      	mov	r4, r0
 800fa70:	b1c0      	cbz	r0, 800faa4 <lv_img_decoder_get_info+0x5c>
    lv_res_t res = LV_RES_INV;
 800fa72:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 800fa74:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800faa8 <lv_img_decoder_get_info+0x60>
 800fa78:	e005      	b.n	800fa86 <lv_img_decoder_get_info+0x3e>
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	4640      	mov	r0, r8
 800fa7e:	f011 fdc5 	bl	802160c <_lv_ll_get_next>
 800fa82:	4604      	mov	r4, r0
 800fa84:	b158      	cbz	r0, 800fa9e <lv_img_decoder_get_info+0x56>
        if(d->info_cb) {
 800fa86:	6823      	ldr	r3, [r4, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d0f6      	beq.n	800fa7a <lv_img_decoder_get_info+0x32>
            res = d->info_cb(d, src, header);
 800fa8c:	463a      	mov	r2, r7
 800fa8e:	4631      	mov	r1, r6
 800fa90:	4620      	mov	r0, r4
 800fa92:	4798      	blx	r3
 800fa94:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 800fa96:	2801      	cmp	r0, #1
 800fa98:	d1ef      	bne.n	800fa7a <lv_img_decoder_get_info+0x32>
 800fa9a:	e000      	b.n	800fa9e <lv_img_decoder_get_info+0x56>
    if(src == NULL) return LV_RES_INV;
 800fa9c:	2500      	movs	r5, #0
}
 800fa9e:	4628      	mov	r0, r5
 800faa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_res_t res = LV_RES_INV;
 800faa4:	2500      	movs	r5, #0
 800faa6:	e7fa      	b.n	800fa9e <lv_img_decoder_get_info+0x56>
 800faa8:	200028b0 	.word	0x200028b0

0800faac <lv_img_decoder_open>:
{
 800faac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fab0:	4606      	mov	r6, r0
 800fab2:	460f      	mov	r7, r1
 800fab4:	4690      	mov	r8, r2
 800fab6:	461c      	mov	r4, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 800fab8:	2128      	movs	r1, #40	; 0x28
 800faba:	f012 f955 	bl	8021d68 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 800fabe:	2f00      	cmp	r7, #0
 800fac0:	d05e      	beq.n	800fb80 <lv_img_decoder_open+0xd4>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 800fac2:	4638      	mov	r0, r7
 800fac4:	f7fd fc17 	bl	800d2f6 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800fac8:	4605      	mov	r5, r0
 800faca:	b9b0      	cbnz	r0, 800fafa <lv_img_decoder_open+0x4e>
        if(img_dsc->data == NULL) return LV_RES_INV;
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d04f      	beq.n	800fb72 <lv_img_decoder_open+0xc6>
    dsc->color    = color;
 800fad2:	f8a6 8008 	strh.w	r8, [r6, #8]
    dsc->src_type = src_type;
 800fad6:	2300      	movs	r3, #0
 800fad8:	7433      	strb	r3, [r6, #16]
    dsc->frame_id = frame_id;
 800fada:	60f4      	str	r4, [r6, #12]
        dsc->src = src;
 800fadc:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800fade:	4829      	ldr	r0, [pc, #164]	; (800fb84 <lv_img_decoder_open+0xd8>)
 800fae0:	f011 fd8c 	bl	80215fc <_lv_ll_get_head>
 800fae4:	4604      	mov	r4, r0
 800fae6:	2800      	cmp	r0, #0
 800fae8:	d03f      	beq.n	800fb6a <lv_img_decoder_open+0xbe>
    lv_res_t res = LV_RES_INV;
 800faea:	2500      	movs	r5, #0
        res = decoder->info_cb(decoder, src, &dsc->header);
 800faec:	f106 0814 	add.w	r8, r6, #20
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800faf0:	f04f 0a04 	mov.w	sl, #4
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800faf4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800fb84 <lv_img_decoder_open+0xd8>
 800faf8:	e018      	b.n	800fb2c <lv_img_decoder_open+0x80>
    dsc->color    = color;
 800fafa:	f8a6 8008 	strh.w	r8, [r6, #8]
    dsc->src_type = src_type;
 800fafe:	7430      	strb	r0, [r6, #16]
    dsc->frame_id = frame_id;
 800fb00:	60f4      	str	r4, [r6, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800fb02:	2801      	cmp	r0, #1
 800fb04:	d1ea      	bne.n	800fadc <lv_img_decoder_open+0x30>
        size_t fnlen = strlen(src);
 800fb06:	4638      	mov	r0, r7
 800fb08:	f7f0 fb96 	bl	8000238 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 800fb0c:	3001      	adds	r0, #1
 800fb0e:	f011 feab 	bl	8021868 <lv_mem_alloc>
 800fb12:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MALLOC(dsc->src);
 800fb14:	b118      	cbz	r0, 800fb1e <lv_img_decoder_open+0x72>
        strcpy((char *)dsc->src, src);
 800fb16:	4639      	mov	r1, r7
 800fb18:	f01c fe9a 	bl	802c850 <strcpy>
 800fb1c:	e7df      	b.n	800fade <lv_img_decoder_open+0x32>
        LV_ASSERT_MALLOC(dsc->src);
 800fb1e:	e7fe      	b.n	800fb1e <lv_img_decoder_open+0x72>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 800fb20:	4621      	mov	r1, r4
 800fb22:	4648      	mov	r0, r9
 800fb24:	f011 fd72 	bl	802160c <_lv_ll_get_next>
 800fb28:	4604      	mov	r4, r0
 800fb2a:	b1f8      	cbz	r0, 800fb6c <lv_img_decoder_open+0xc0>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 800fb2c:	6823      	ldr	r3, [r4, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d0f6      	beq.n	800fb20 <lv_img_decoder_open+0x74>
 800fb32:	6862      	ldr	r2, [r4, #4]
 800fb34:	2a00      	cmp	r2, #0
 800fb36:	d0f3      	beq.n	800fb20 <lv_img_decoder_open+0x74>
        res = decoder->info_cb(decoder, src, &dsc->header);
 800fb38:	4642      	mov	r2, r8
 800fb3a:	4639      	mov	r1, r7
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4798      	blx	r3
 800fb40:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
 800fb42:	2801      	cmp	r0, #1
 800fb44:	d1ec      	bne.n	800fb20 <lv_img_decoder_open+0x74>
        dsc->decoder = decoder;
 800fb46:	6034      	str	r4, [r6, #0]
        res = decoder->open_cb(decoder, dsc);
 800fb48:	6863      	ldr	r3, [r4, #4]
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	4798      	blx	r3
 800fb50:	4605      	mov	r5, r0
        if(res == LV_RES_OK) return res;
 800fb52:	2801      	cmp	r0, #1
 800fb54:	d00d      	beq.n	800fb72 <lv_img_decoder_open+0xc6>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 800fb56:	4651      	mov	r1, sl
 800fb58:	4640      	mov	r0, r8
 800fb5a:	f012 f905 	bl	8021d68 <lv_memset_00>
        dsc->error_msg = NULL;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	6233      	str	r3, [r6, #32]
        dsc->img_data  = NULL;
 800fb62:	61b3      	str	r3, [r6, #24]
        dsc->user_data = NULL;
 800fb64:	6273      	str	r3, [r6, #36]	; 0x24
        dsc->time_to_open = 0;
 800fb66:	61f3      	str	r3, [r6, #28]
 800fb68:	e7da      	b.n	800fb20 <lv_img_decoder_open+0x74>
    lv_res_t res = LV_RES_INV;
 800fb6a:	2500      	movs	r5, #0
    if(dsc->src_type == LV_IMG_SRC_FILE)
 800fb6c:	7c33      	ldrb	r3, [r6, #16]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d002      	beq.n	800fb78 <lv_img_decoder_open+0xcc>
}
 800fb72:	4628      	mov	r0, r5
 800fb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_mem_free((void *)dsc->src);
 800fb78:	6870      	ldr	r0, [r6, #4]
 800fb7a:	f011 fe93 	bl	80218a4 <lv_mem_free>
 800fb7e:	e7f8      	b.n	800fb72 <lv_img_decoder_open+0xc6>
    if(src == NULL) return LV_RES_INV;
 800fb80:	2500      	movs	r5, #0
 800fb82:	e7f6      	b.n	800fb72 <lv_img_decoder_open+0xc6>
 800fb84:	200028b0 	.word	0x200028b0

0800fb88 <lv_img_decoder_read_line>:
{
 800fb88:	b510      	push	{r4, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	4684      	mov	ip, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 800fb8e:	6800      	ldr	r0, [r0, #0]
 800fb90:	6884      	ldr	r4, [r0, #8]
 800fb92:	b154      	cbz	r4, 800fbaa <lv_img_decoder_read_line+0x22>
 800fb94:	f8dd e010 	ldr.w	lr, [sp, #16]
 800fb98:	f8cd e004 	str.w	lr, [sp, #4]
 800fb9c:	9300      	str	r3, [sp, #0]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	460a      	mov	r2, r1
 800fba2:	4661      	mov	r1, ip
 800fba4:	47a0      	blx	r4
}
 800fba6:	b002      	add	sp, #8
 800fba8:	bd10      	pop	{r4, pc}
    lv_res_t res = LV_RES_INV;
 800fbaa:	2000      	movs	r0, #0
 800fbac:	e7fb      	b.n	800fba6 <lv_img_decoder_read_line+0x1e>

0800fbae <lv_img_decoder_close>:
{
 800fbae:	b510      	push	{r4, lr}
 800fbb0:	4604      	mov	r4, r0
    if(dsc->decoder) {
 800fbb2:	6800      	ldr	r0, [r0, #0]
 800fbb4:	b130      	cbz	r0, 800fbc4 <lv_img_decoder_close+0x16>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800fbb6:	68c3      	ldr	r3, [r0, #12]
 800fbb8:	b10b      	cbz	r3, 800fbbe <lv_img_decoder_close+0x10>
 800fbba:	4621      	mov	r1, r4
 800fbbc:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800fbbe:	7c23      	ldrb	r3, [r4, #16]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d000      	beq.n	800fbc6 <lv_img_decoder_close+0x18>
}
 800fbc4:	bd10      	pop	{r4, pc}
            lv_mem_free((void *)dsc->src);
 800fbc6:	6860      	ldr	r0, [r4, #4]
 800fbc8:	f011 fe6c 	bl	80218a4 <lv_mem_free>
            dsc->src = NULL;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	6063      	str	r3, [r4, #4]
}
 800fbd0:	e7f8      	b.n	800fbc4 <lv_img_decoder_close+0x16>
	...

0800fbd4 <lv_img_decoder_create>:
{
 800fbd4:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 800fbd6:	4805      	ldr	r0, [pc, #20]	; (800fbec <lv_img_decoder_create+0x18>)
 800fbd8:	f011 fc8f 	bl	80214fa <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 800fbdc:	b128      	cbz	r0, 800fbea <lv_img_decoder_create+0x16>
 800fbde:	4604      	mov	r4, r0
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 800fbe0:	2114      	movs	r1, #20
 800fbe2:	f012 f8c1 	bl	8021d68 <lv_memset_00>
}
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 800fbea:	e7fe      	b.n	800fbea <lv_img_decoder_create+0x16>
 800fbec:	200028b0 	.word	0x200028b0

0800fbf0 <_lv_img_decoder_init>:
{
 800fbf0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 800fbf2:	2114      	movs	r1, #20
 800fbf4:	4807      	ldr	r0, [pc, #28]	; (800fc14 <_lv_img_decoder_init+0x24>)
 800fbf6:	f011 fc78 	bl	80214ea <_lv_ll_init>
    decoder = lv_img_decoder_create();
 800fbfa:	f7ff ffeb 	bl	800fbd4 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 800fbfe:	b140      	cbz	r0, 800fc12 <_lv_img_decoder_init+0x22>
    decoder->info_cb = info_cb;
 800fc00:	4a05      	ldr	r2, [pc, #20]	; (800fc18 <_lv_img_decoder_init+0x28>)
 800fc02:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
 800fc04:	4a05      	ldr	r2, [pc, #20]	; (800fc1c <_lv_img_decoder_init+0x2c>)
 800fc06:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 800fc08:	4a05      	ldr	r2, [pc, #20]	; (800fc20 <_lv_img_decoder_init+0x30>)
 800fc0a:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
 800fc0c:	4a05      	ldr	r2, [pc, #20]	; (800fc24 <_lv_img_decoder_init+0x34>)
 800fc0e:	60c2      	str	r2, [r0, #12]
}
 800fc10:	bd08      	pop	{r3, pc}
    LV_ASSERT_MALLOC(decoder);
 800fc12:	e7fe      	b.n	800fc12 <_lv_img_decoder_init+0x22>
 800fc14:	200028b0 	.word	0x200028b0
 800fc18:	0800f3d9 	.word	0x0800f3d9
 800fc1c:	0800f4d9 	.word	0x0800f4d9
 800fc20:	0800f6f5 	.word	0x0800f6f5
 800fc24:	0800f4a5 	.word	0x0800f4a5

0800fc28 <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 800fc28:	4770      	bx	lr

0800fc2a <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 800fc2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc2e:	4698      	mov	r8, r3
 800fc30:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 800fc34:	9f0a      	ldr	r7, [sp, #40]	; 0x28

    lv_color_t * dest_bufc =  dest_buf;
    lv_color_t * src_bufc =  src_buf;

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 800fc36:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
    dest_bufc += dest_area->x1;
 800fc3a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800fc3e:	fb04 0502 	mla	r5, r4, r2, r0
 800fc42:	eb01 0545 	add.w	r5, r1, r5, lsl #1

    src_bufc += src_stride * src_area->y1;
 800fc46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    src_bufc += src_area->x1;
 800fc4a:	f9b7 6000 	ldrsh.w	r6, [r7]
 800fc4e:	fb0a 6303 	mla	r3, sl, r3, r6
 800fc52:	9e08      	ldr	r6, [sp, #32]
 800fc54:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fc58:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 800fc5c:	3701      	adds	r7, #1
 800fc5e:	1a3f      	subs	r7, r7, r0

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800fc60:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 800fc64:	42a3      	cmp	r3, r4
 800fc66:	db12      	blt.n	800fc8e <lv_draw_sw_buffer_copy+0x64>
 800fc68:	b23f      	sxth	r7, r7
 800fc6a:	007f      	lsls	r7, r7, #1
        lv_memcpy(dest_bufc, src_bufc, line_length);
        dest_bufc += dest_stride;
 800fc6c:	ea4f 0942 	mov.w	r9, r2, lsl #1
        src_bufc += src_stride;
 800fc70:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        lv_memcpy(dest_bufc, src_bufc, line_length);
 800fc74:	463a      	mov	r2, r7
 800fc76:	4631      	mov	r1, r6
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f011 fedf 	bl	8021a3c <lv_memcpy>
        dest_bufc += dest_stride;
 800fc7e:	444d      	add	r5, r9
        src_bufc += src_stride;
 800fc80:	4456      	add	r6, sl
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800fc82:	3401      	adds	r4, #1
 800fc84:	b224      	sxth	r4, r4
 800fc86:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
 800fc8a:	42a2      	cmp	r2, r4
 800fc8c:	daf2      	bge.n	800fc74 <lv_draw_sw_buffer_copy+0x4a>
    }
}
 800fc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800fc94 <lv_draw_sw_init_ctx>:
{
 800fc94:	b510      	push	{r4, lr}
 800fc96:	460c      	mov	r4, r1
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 800fc98:	2158      	movs	r1, #88	; 0x58
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f012 f864 	bl	8021d68 <lv_memset_00>
    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 800fca0:	4b10      	ldr	r3, [pc, #64]	; (800fce4 <lv_draw_sw_init_ctx+0x50>)
 800fca2:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 800fca4:	4b10      	ldr	r3, [pc, #64]	; (800fce8 <lv_draw_sw_init_ctx+0x54>)
 800fca6:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 800fca8:	4b10      	ldr	r3, [pc, #64]	; (800fcec <lv_draw_sw_init_ctx+0x58>)
 800fcaa:	6323      	str	r3, [r4, #48]	; 0x30
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 800fcac:	4b10      	ldr	r3, [pc, #64]	; (800fcf0 <lv_draw_sw_init_ctx+0x5c>)
 800fcae:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 800fcb0:	4b10      	ldr	r3, [pc, #64]	; (800fcf4 <lv_draw_sw_init_ctx+0x60>)
 800fcb2:	61a3      	str	r3, [r4, #24]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 800fcb4:	4b10      	ldr	r3, [pc, #64]	; (800fcf8 <lv_draw_sw_init_ctx+0x64>)
 800fcb6:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 800fcb8:	4b10      	ldr	r3, [pc, #64]	; (800fcfc <lv_draw_sw_init_ctx+0x68>)
 800fcba:	62a3      	str	r3, [r4, #40]	; 0x28
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 800fcbc:	4b10      	ldr	r3, [pc, #64]	; (800fd00 <lv_draw_sw_init_ctx+0x6c>)
 800fcbe:	62e3      	str	r3, [r4, #44]	; 0x2c
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 800fcc0:	4b10      	ldr	r3, [pc, #64]	; (800fd04 <lv_draw_sw_init_ctx+0x70>)
 800fcc2:	6363      	str	r3, [r4, #52]	; 0x34
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 800fcc4:	4b10      	ldr	r3, [pc, #64]	; (800fd08 <lv_draw_sw_init_ctx+0x74>)
 800fcc6:	63a3      	str	r3, [r4, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 800fcc8:	4b10      	ldr	r3, [pc, #64]	; (800fd0c <lv_draw_sw_init_ctx+0x78>)
 800fcca:	63e3      	str	r3, [r4, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 800fccc:	4b10      	ldr	r3, [pc, #64]	; (800fd10 <lv_draw_sw_init_ctx+0x7c>)
 800fcce:	6423      	str	r3, [r4, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 800fcd0:	4b10      	ldr	r3, [pc, #64]	; (800fd14 <lv_draw_sw_init_ctx+0x80>)
 800fcd2:	6463      	str	r3, [r4, #68]	; 0x44
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 800fcd4:	4b10      	ldr	r3, [pc, #64]	; (800fd18 <lv_draw_sw_init_ctx+0x84>)
 800fcd6:	64a3      	str	r3, [r4, #72]	; 0x48
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 800fcd8:	4b10      	ldr	r3, [pc, #64]	; (800fd1c <lv_draw_sw_init_ctx+0x88>)
 800fcda:	6563      	str	r3, [r4, #84]	; 0x54
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 800fcdc:	232c      	movs	r3, #44	; 0x2c
 800fcde:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800fce0:	bd10      	pop	{r4, pc}
 800fce2:	bf00      	nop
 800fce4:	0800fda9 	.word	0x0800fda9
 800fce8:	08014557 	.word	0x08014557
 800fcec:	08013eb1 	.word	0x08013eb1
 800fcf0:	0801273d 	.word	0x0801273d
 800fcf4:	08011fbf 	.word	0x08011fbf
 800fcf8:	08012b79 	.word	0x08012b79
 800fcfc:	08013401 	.word	0x08013401
 800fd00:	08015669 	.word	0x08015669
 800fd04:	0800fc29 	.word	0x0800fc29
 800fd08:	0800fc2b 	.word	0x0800fc2b
 800fd0c:	08012541 	.word	0x08012541
 800fd10:	08012645 	.word	0x08012645
 800fd14:	0801269f 	.word	0x0801269f
 800fd18:	08012733 	.word	0x08012733
 800fd1c:	08010c39 	.word	0x08010c39

0800fd20 <get_rounded_area>:

    q->draw_ctx->clip_area = clip_area_ori;
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 800fd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd24:	4681      	mov	r9, r0
 800fd26:	461d      	mov	r5, r3
    const uint8_t ps = 8;
    const uint8_t pa = 127;

    int32_t thick_half = thickness / 2;
 800fd28:	0856      	lsrs	r6, r2, #1
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 800fd2a:	f082 0401 	eor.w	r4, r2, #1
 800fd2e:	f004 0401 	and.w	r4, r4, #1

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 800fd32:	eba1 0852 	sub.w	r8, r1, r2, lsr #1
 800fd36:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 800fd3a:	b200      	sxth	r0, r0
 800fd3c:	f011 fc88 	bl	8021650 <lv_trigo_sin>
 800fd40:	fb08 f200 	mul.w	r2, r8, r0
 800fd44:	11d7      	asrs	r7, r2, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 800fd46:	4648      	mov	r0, r9
 800fd48:	f011 fc82 	bl	8021650 <lv_trigo_sin>
 800fd4c:	fb08 f000 	mul.w	r0, r8, r0
 800fd50:	11c0      	asrs	r0, r0, #7

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 800fd52:	2f00      	cmp	r7, #0
 800fd54:	dd14      	ble.n	800fd80 <get_rounded_area+0x60>
        cir_x = (cir_x - pa) >> ps;
 800fd56:	f1a7 027f 	sub.w	r2, r7, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 800fd5a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800fd5e:	1ba3      	subs	r3, r4, r6
 800fd60:	4413      	add	r3, r2
 800fd62:	802b      	strh	r3, [r5, #0]
        res_area->x2 = cir_x + thick_half;
 800fd64:	4432      	add	r2, r6
 800fd66:	80aa      	strh	r2, [r5, #4]
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 800fd68:	2800      	cmp	r0, #0
 800fd6a:	dd13      	ble.n	800fd94 <get_rounded_area+0x74>
        cir_y = (cir_y - pa) >> ps;
 800fd6c:	387f      	subs	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 800fd6e:	f3c0 230f 	ubfx	r3, r0, #8, #16
 800fd72:	1ba4      	subs	r4, r4, r6
 800fd74:	441c      	add	r4, r3
 800fd76:	806c      	strh	r4, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 800fd78:	4433      	add	r3, r6
 800fd7a:	80eb      	strh	r3, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 800fd7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 800fd80:	f107 027f 	add.w	r2, r7, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
 800fd84:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800fd88:	1b93      	subs	r3, r2, r6
 800fd8a:	802b      	strh	r3, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 800fd8c:	1b33      	subs	r3, r6, r4
 800fd8e:	441a      	add	r2, r3
 800fd90:	80aa      	strh	r2, [r5, #4]
 800fd92:	e7e9      	b.n	800fd68 <get_rounded_area+0x48>
        cir_y = (cir_y + pa) >> ps;
 800fd94:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 800fd96:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800fd9a:	1b83      	subs	r3, r0, r6
 800fd9c:	806b      	strh	r3, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 800fd9e:	1b34      	subs	r4, r6, r4
 800fda0:	4420      	add	r0, r4
 800fda2:	80e8      	strh	r0, [r5, #6]
}
 800fda4:	e7ea      	b.n	800fd7c <get_rounded_area+0x5c>
	...

0800fda8 <lv_draw_sw_arc>:
{
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	b0d3      	sub	sp, #332	; 0x14c
 800fdae:	461f      	mov	r7, r3
 800fdb0:	f8bd 4170 	ldrh.w	r4, [sp, #368]	; 0x170
 800fdb4:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
    if(dsc->opa <= LV_OPA_MIN) return;
 800fdb8:	7b0b      	ldrb	r3, [r1, #12]
 800fdba:	2b02      	cmp	r3, #2
 800fdbc:	f240 80c2 	bls.w	800ff44 <lv_draw_sw_arc+0x19c>
 800fdc0:	4681      	mov	r9, r0
 800fdc2:	460e      	mov	r6, r1
 800fdc4:	4690      	mov	r8, r2
    if(dsc->width == 0) return;
 800fdc6:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 800fdca:	f1ba 0f00 	cmp.w	sl, #0
 800fdce:	f000 80b9 	beq.w	800ff44 <lv_draw_sw_arc+0x19c>
    if(start_angle == end_angle) return;
 800fdd2:	42ac      	cmp	r4, r5
 800fdd4:	f000 80b6 	beq.w	800ff44 <lv_draw_sw_arc+0x19c>
    if(width > radius) width = radius;
 800fdd8:	45ba      	cmp	sl, r7
 800fdda:	bfc8      	it	gt
 800fddc:	fa0f fa87 	sxthgt.w	sl, r7
    lv_draw_rect_dsc_init(&cir_dsc);
 800fde0:	a844      	add	r0, sp, #272	; 0x110
 800fde2:	f7ff f9c1 	bl	800f168 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 800fde6:	7b73      	ldrb	r3, [r6, #13]
 800fde8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800fdec:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
    if(dsc->img_src) {
 800fdf0:	68b3      	ldr	r3, [r6, #8]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f000 80a9 	beq.w	800ff4a <lv_draw_sw_arc+0x1a2>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f88d 2113 	strb.w	r2, [sp, #275]	; 0x113
        cir_dsc.bg_img_src = dsc->img_src;
 800fdfe:	9348      	str	r3, [sp, #288]	; 0x120
        cir_dsc.bg_img_opa = dsc->opa;
 800fe00:	7b33      	ldrb	r3, [r6, #12]
 800fe02:	f88d 312a 	strb.w	r3, [sp, #298]	; 0x12a
    area_out.x1 = center->x - radius;
 800fe06:	f8b8 3000 	ldrh.w	r3, [r8]
 800fe0a:	1bd8      	subs	r0, r3, r7
 800fe0c:	b280      	uxth	r0, r0
 800fe0e:	f8ad 0108 	strh.w	r0, [sp, #264]	; 0x108
    area_out.y1 = center->y - radius;
 800fe12:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800fe16:	1bca      	subs	r2, r1, r7
 800fe18:	b292      	uxth	r2, r2
 800fe1a:	f8ad 210a 	strh.w	r2, [sp, #266]	; 0x10a
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800fe1e:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800fe22:	fa1f fc8c 	uxth.w	ip, ip
 800fe26:	4463      	add	r3, ip
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
    area_out.y2 = center->y + radius - 1;
 800fe2e:	4461      	add	r1, ip
 800fe30:	b289      	uxth	r1, r1
 800fe32:	f8ad 110e 	strh.w	r1, [sp, #270]	; 0x10e
    area_in.x1 += dsc->width;
 800fe36:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 800fe3a:	4460      	add	r0, ip
 800fe3c:	b280      	uxth	r0, r0
 800fe3e:	f8ad 0100 	strh.w	r0, [sp, #256]	; 0x100
    area_in.y1 += dsc->width;
 800fe42:	4462      	add	r2, ip
 800fe44:	b292      	uxth	r2, r2
 800fe46:	f8ad 2102 	strh.w	r2, [sp, #258]	; 0x102
    area_in.x2 -= dsc->width;
 800fe4a:	eba3 030c 	sub.w	r3, r3, ip
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	f8ad 3104 	strh.w	r3, [sp, #260]	; 0x104
    area_in.y2 -= dsc->width;
 800fe54:	eba1 010c 	sub.w	r1, r1, ip
 800fe58:	b289      	uxth	r1, r1
 800fe5a:	f8ad 1106 	strh.w	r1, [sp, #262]	; 0x106
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fe5e:	3301      	adds	r3, #1
 800fe60:	1a1b      	subs	r3, r3, r0
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 800fe62:	b21b      	sxth	r3, r3
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dd04      	ble.n	800fe72 <lv_draw_sw_arc+0xca>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800fe68:	3101      	adds	r1, #1
 800fe6a:	1a8a      	subs	r2, r1, r2
 800fe6c:	b212      	sxth	r2, r2
 800fe6e:	2a00      	cmp	r2, #0
 800fe70:	dc72      	bgt.n	800ff58 <lv_draw_sw_arc+0x1b0>
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 800fe72:	2300      	movs	r3, #0
 800fe74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fe78:	a942      	add	r1, sp, #264	; 0x108
 800fe7a:	a834      	add	r0, sp, #208	; 0xd0
 800fe7c:	f7fe ff20 	bl	800ecc0 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 800fe80:	2100      	movs	r1, #0
 800fe82:	a834      	add	r0, sp, #208	; 0xd0
 800fe84:	f7fe fd1a 	bl	800e8bc <lv_draw_mask_add>
 800fe88:	9002      	str	r0, [sp, #8]
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 800fe8a:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 800fe8e:	42ab      	cmp	r3, r5
 800fe90:	f000 8591 	beq.w	80109b6 <lv_draw_sw_arc+0xc0e>
 800fe94:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 800fe98:	42a3      	cmp	r3, r4
 800fe9a:	f000 85b3 	beq.w	8010a04 <lv_draw_sw_arc+0xc5c>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9305      	str	r3, [sp, #20]
 800fea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fea6:	9303      	str	r3, [sp, #12]
    while(start_angle >= 360) start_angle -= 360;
 800fea8:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800feac:	d305      	bcc.n	800feba <lv_draw_sw_arc+0x112>
 800feae:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 800feb2:	b2a4      	uxth	r4, r4
 800feb4:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800feb8:	d2f9      	bcs.n	800feae <lv_draw_sw_arc+0x106>
    while(end_angle >= 360) end_angle -= 360;
 800feba:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 800febe:	d305      	bcc.n	800fecc <lv_draw_sw_arc+0x124>
 800fec0:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 800fec4:	b2ad      	uxth	r5, r5
 800fec6:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 800feca:	d2f9      	bcs.n	800fec0 <lv_draw_sw_arc+0x118>
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 800fecc:	b223      	sxth	r3, r4
 800fece:	9308      	str	r3, [sp, #32]
 800fed0:	b22a      	sxth	r2, r5
 800fed2:	9209      	str	r2, [sp, #36]	; 0x24
 800fed4:	9200      	str	r2, [sp, #0]
 800fed6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800feda:	f9b8 1000 	ldrsh.w	r1, [r8]
 800fede:	a819      	add	r0, sp, #100	; 0x64
 800fee0:	f7fe fea8 	bl	800ec34 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 800fee4:	2100      	movs	r1, #0
 800fee6:	a819      	add	r0, sp, #100	; 0x64
 800fee8:	f7fe fce8 	bl	800e8bc <lv_draw_mask_add>
 800feec:	9004      	str	r0, [sp, #16]
    if(end_angle > start_angle) {
 800feee:	42ac      	cmp	r4, r5
        angle_gap = 360 - (end_angle - start_angle);
 800fef0:	bf3a      	itte	cc
 800fef2:	1b2b      	subcc	r3, r5, r4
 800fef4:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
        angle_gap = start_angle - end_angle;
 800fef8:	1b63      	subcs	r3, r4, r5
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800fefa:	f8d9 b008 	ldr.w	fp, [r9, #8]
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 800fefe:	2b3c      	cmp	r3, #60	; 0x3c
 800ff00:	dd01      	ble.n	800ff06 <lv_draw_sw_arc+0x15e>
 800ff02:	2f0a      	cmp	r7, #10
 800ff04:	d86b      	bhi.n	800ffde <lv_draw_sw_arc+0x236>
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800ff06:	aa42      	add	r2, sp, #264	; 0x108
 800ff08:	a944      	add	r1, sp, #272	; 0x110
 800ff0a:	4648      	mov	r0, r9
 800ff0c:	f7ff f988 	bl	800f220 <lv_draw_rect>
    lv_draw_mask_free_param(&mask_angle_param);
 800ff10:	a819      	add	r0, sp, #100	; 0x64
 800ff12:	f7fe fd47 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 800ff16:	a834      	add	r0, sp, #208	; 0xd0
 800ff18:	f7fe fd44 	bl	800e9a4 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 800ff1c:	9b05      	ldr	r3, [sp, #20]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f040 84ba 	bne.w	8010898 <lv_draw_sw_arc+0xaf0>
    lv_draw_mask_remove_id(mask_angle_id);
 800ff24:	9804      	ldr	r0, [sp, #16]
 800ff26:	f7fe fd13 	bl	800e950 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 800ff2a:	9802      	ldr	r0, [sp, #8]
 800ff2c:	f7fe fd10 	bl	800e950 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800ff30:	9b03      	ldr	r3, [sp, #12]
 800ff32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff36:	f040 84b4 	bne.w	80108a2 <lv_draw_sw_arc+0xafa>
    if(dsc->rounded) {
 800ff3a:	7b73      	ldrb	r3, [r6, #13]
 800ff3c:	f013 0f04 	tst.w	r3, #4
 800ff40:	f040 84b4 	bne.w	80108ac <lv_draw_sw_arc+0xb04>
}
 800ff44:	b053      	add	sp, #332	; 0x14c
 800ff46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 800ff4a:	7b33      	ldrb	r3, [r6, #12]
 800ff4c:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
        cir_dsc.bg_color = dsc->color;
 800ff50:	8833      	ldrh	r3, [r6, #0]
 800ff52:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
 800ff56:	e756      	b.n	800fe06 <lv_draw_sw_arc+0x5e>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 800ff58:	2301      	movs	r3, #1
 800ff5a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ff5e:	a940      	add	r1, sp, #256	; 0x100
 800ff60:	a83a      	add	r0, sp, #232	; 0xe8
 800ff62:	f7fe fead 	bl	800ecc0 <lv_draw_mask_radius_init>
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 800ff66:	2100      	movs	r1, #0
 800ff68:	a83a      	add	r0, sp, #232	; 0xe8
 800ff6a:	f7fe fca7 	bl	800e8bc <lv_draw_mask_add>
 800ff6e:	9003      	str	r0, [sp, #12]
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 800ff70:	2300      	movs	r3, #0
 800ff72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ff76:	a942      	add	r1, sp, #264	; 0x108
 800ff78:	a834      	add	r0, sp, #208	; 0xd0
 800ff7a:	f7fe fea1 	bl	800ecc0 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 800ff7e:	2100      	movs	r1, #0
 800ff80:	a834      	add	r0, sp, #208	; 0xd0
 800ff82:	f7fe fc9b 	bl	800e8bc <lv_draw_mask_add>
 800ff86:	9002      	str	r0, [sp, #8]
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 800ff88:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 800ff8c:	42ab      	cmp	r3, r5
 800ff8e:	f000 8523 	beq.w	80109d8 <lv_draw_sw_arc+0xc30>
 800ff92:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 800ff96:	429c      	cmp	r4, r3
 800ff98:	d11c      	bne.n	800ffd4 <lv_draw_sw_arc+0x22c>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800ff9a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ff9e:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800ffa2:	aa42      	add	r2, sp, #264	; 0x108
 800ffa4:	a944      	add	r1, sp, #272	; 0x110
 800ffa6:	4648      	mov	r0, r9
 800ffa8:	f7ff f93a 	bl	800f220 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 800ffac:	9802      	ldr	r0, [sp, #8]
 800ffae:	f7fe fccf 	bl	800e950 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800ffb2:	9b03      	ldr	r3, [sp, #12]
 800ffb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffb8:	d00f      	beq.n	800ffda <lv_draw_sw_arc+0x232>
 800ffba:	9803      	ldr	r0, [sp, #12]
 800ffbc:	f7fe fcc8 	bl	800e950 <lv_draw_mask_remove_id>
 800ffc0:	2401      	movs	r4, #1
        lv_draw_mask_free_param(&mask_out_param);
 800ffc2:	a834      	add	r0, sp, #208	; 0xd0
 800ffc4:	f7fe fcee 	bl	800e9a4 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 800ffc8:	2c00      	cmp	r4, #0
 800ffca:	d0bb      	beq.n	800ff44 <lv_draw_sw_arc+0x19c>
            lv_draw_mask_free_param(&mask_in_param);
 800ffcc:	a83a      	add	r0, sp, #232	; 0xe8
 800ffce:	f7fe fce9 	bl	800e9a4 <lv_draw_mask_free_param>
 800ffd2:	e7b7      	b.n	800ff44 <lv_draw_sw_arc+0x19c>
        mask_in_param_valid = true;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	9305      	str	r3, [sp, #20]
 800ffd8:	e766      	b.n	800fea8 <lv_draw_sw_arc+0x100>
 800ffda:	2401      	movs	r4, #1
 800ffdc:	e7f1      	b.n	800ffc2 <lv_draw_sw_arc+0x21a>
        q_dsc.radius = radius;
 800ffde:	b23b      	sxth	r3, r7
 800ffe0:	930a      	str	r3, [sp, #40]	; 0x28
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 800ffe2:	0863      	lsrs	r3, r4, #1
 800ffe4:	49ac      	ldr	r1, [pc, #688]	; (8010298 <lv_draw_sw_arc+0x4f0>)
 800ffe6:	fba1 2303 	umull	r2, r3, r1, r3
 800ffea:	f3c3 1241 	ubfx	r2, r3, #5, #2
 800ffee:	9206      	str	r2, [sp, #24]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 800fff0:	086a      	lsrs	r2, r5, #1
 800fff2:	fba1 1202 	umull	r1, r2, r1, r2
 800fff6:	f3c2 114f 	ubfx	r1, r2, #5, #16
 800fffa:	910b      	str	r1, [sp, #44]	; 0x2c
 800fffc:	f3c2 1241 	ubfx	r2, r2, #5, #2
 8010000:	9207      	str	r2, [sp, #28]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8010002:	ea41 1353 	orr.w	r3, r1, r3, lsr #5
 8010006:	f013 0f03 	tst.w	r3, #3
 801000a:	d03d      	beq.n	8010088 <lv_draw_sw_arc+0x2e0>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 801000c:	9b06      	ldr	r3, [sp, #24]
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 808b 	beq.w	801012a <lv_draw_sw_arc+0x382>
 8010014:	9b07      	ldr	r3, [sp, #28]
 8010016:	2b00      	cmp	r3, #0
 8010018:	f000 80db 	beq.w	80101d2 <lv_draw_sw_arc+0x42a>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 801001c:	9b06      	ldr	r3, [sp, #24]
 801001e:	9a07      	ldr	r2, [sp, #28]
 8010020:	4293      	cmp	r3, r2
 8010022:	f000 8112 	beq.w	801024a <lv_draw_sw_arc+0x4a2>
 8010026:	9b06      	ldr	r3, [sp, #24]
 8010028:	2b02      	cmp	r3, #2
 801002a:	f000 812f 	beq.w	801028c <lv_draw_sw_arc+0x4e4>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801002e:	9b06      	ldr	r3, [sp, #24]
 8010030:	2b03      	cmp	r3, #3
 8010032:	f040 80a9 	bne.w	8010188 <lv_draw_sw_arc+0x3e0>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8010036:	9b07      	ldr	r3, [sp, #28]
 8010038:	3b01      	subs	r3, #1
 801003a:	b29b      	uxth	r3, r3
 801003c:	2b01      	cmp	r3, #1
 801003e:	f240 8107 	bls.w	8010250 <lv_draw_sw_arc+0x4a8>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8010042:	42ac      	cmp	r4, r5
 8010044:	f240 80af 	bls.w	80101a6 <lv_draw_sw_arc+0x3fe>
        quarter_area.x1 = q->center->x - q->radius;
 8010048:	f8b8 2000 	ldrh.w	r2, [r8]
 801004c:	1bd3      	subs	r3, r2, r7
 801004e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y;
 8010052:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8010056:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x - 1;
 801005a:	3a01      	subs	r2, #1
 801005c:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + q->radius;
 8010060:	443b      	add	r3, r7
 8010062:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010066:	465a      	mov	r2, fp
 8010068:	a913      	add	r1, sp, #76	; 0x4c
 801006a:	4608      	mov	r0, r1
 801006c:	f010 fce7 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 8010070:	2800      	cmp	r0, #0
 8010072:	f000 8147 	beq.w	8010304 <lv_draw_sw_arc+0x55c>
            q->draw_ctx->clip_area = &quarter_area;
 8010076:	ab13      	add	r3, sp, #76	; 0x4c
 8010078:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801007c:	aa42      	add	r2, sp, #264	; 0x108
 801007e:	a944      	add	r1, sp, #272	; 0x110
 8010080:	4648      	mov	r0, r9
 8010082:	f7ff f8cd 	bl	800f220 <lv_draw_rect>
 8010086:	e13d      	b.n	8010304 <lv_draw_sw_arc+0x55c>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8010088:	42ac      	cmp	r4, r5
 801008a:	d2bf      	bcs.n	801000c <lv_draw_sw_arc+0x264>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801008c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010090:	930c      	str	r3, [sp, #48]	; 0x30
 8010092:	9808      	ldr	r0, [sp, #32]
 8010094:	f011 fadc 	bl	8021650 <lv_trigo_sin>
 8010098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801009a:	eba3 020a 	sub.w	r2, r3, sl
 801009e:	920d      	str	r2, [sp, #52]	; 0x34
 80100a0:	fb02 f300 	mul.w	r3, r2, r0
 80100a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80100a6:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 80100aa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80100ae:	f8b8 1000 	ldrh.w	r1, [r8]
 80100b2:	910c      	str	r1, [sp, #48]	; 0x30
 80100b4:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80100b8:	b200      	sxth	r0, r0
 80100ba:	f011 fac9 	bl	8021650 <lv_trigo_sin>
 80100be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100c0:	fb03 f300 	mul.w	r3, r3, r0
 80100c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80100c6:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 80100ca:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80100ce:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80100d2:	910c      	str	r1, [sp, #48]	; 0x30
 80100d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100d6:	f011 fabb 	bl	8021650 <lv_trigo_sin>
 80100da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100dc:	fb03 f300 	mul.w	r3, r3, r0
 80100e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80100e2:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 80100e6:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80100ea:	f8b8 3000 	ldrh.w	r3, [r8]
 80100ee:	930c      	str	r3, [sp, #48]	; 0x30
 80100f0:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80100f4:	b200      	sxth	r0, r0
 80100f6:	f011 faab 	bl	8021650 <lv_trigo_sin>
 80100fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100fc:	fb02 f300 	mul.w	r3, r2, r0
 8010100:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010102:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010106:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801010a:	465a      	mov	r2, fp
 801010c:	a913      	add	r1, sp, #76	; 0x4c
 801010e:	4608      	mov	r0, r1
 8010110:	f010 fc95 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 8010114:	2800      	cmp	r0, #0
 8010116:	d037      	beq.n	8010188 <lv_draw_sw_arc+0x3e0>
            q->draw_ctx->clip_area = &quarter_area;
 8010118:	ab13      	add	r3, sp, #76	; 0x4c
 801011a:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801011e:	aa42      	add	r2, sp, #264	; 0x108
 8010120:	a944      	add	r1, sp, #272	; 0x110
 8010122:	4648      	mov	r0, r9
 8010124:	f7ff f87c 	bl	800f220 <lv_draw_rect>
 8010128:	e02e      	b.n	8010188 <lv_draw_sw_arc+0x3e0>
            quarter_area.x1 = q->center->x;
 801012a:	f8b8 3000 	ldrh.w	r3, [r8]
 801012e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y2 = q->center->y + q->radius;
 8010132:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010136:	930c      	str	r3, [sp, #48]	; 0x30
 8010138:	18fb      	adds	r3, r7, r3
 801013a:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801013e:	9808      	ldr	r0, [sp, #32]
 8010140:	f011 fa86 	bl	8021650 <lv_trigo_sin>
 8010144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010146:	eba2 030a 	sub.w	r3, r2, sl
 801014a:	fb00 f303 	mul.w	r3, r0, r3
 801014e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010150:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010154:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010158:	f8b8 3000 	ldrh.w	r3, [r8]
 801015c:	930c      	str	r3, [sp, #48]	; 0x30
 801015e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010162:	b200      	sxth	r0, r0
 8010164:	f011 fa74 	bl	8021650 <lv_trigo_sin>
 8010168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801016a:	fb02 f300 	mul.w	r3, r2, r0
 801016e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010170:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010174:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010178:	465a      	mov	r2, fp
 801017a:	a913      	add	r1, sp, #76	; 0x4c
 801017c:	4608      	mov	r0, r1
 801017e:	f010 fc5e 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 8010182:	b9e8      	cbnz	r0, 80101c0 <lv_draw_sw_arc+0x418>
        if(q->end_quarter == 0) {
 8010184:	9b07      	ldr	r3, [sp, #28]
 8010186:	b323      	cbz	r3, 80101d2 <lv_draw_sw_arc+0x42a>
    q->draw_ctx->clip_area = clip_area_ori;
 8010188:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801018c:	9b06      	ldr	r3, [sp, #24]
 801018e:	2b01      	cmp	r3, #1
 8010190:	f000 8084 	beq.w	801029c <lv_draw_sw_arc+0x4f4>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8010194:	9b07      	ldr	r3, [sp, #28]
 8010196:	2b01      	cmp	r3, #1
 8010198:	f000 812a 	beq.w	80103f0 <lv_draw_sw_arc+0x648>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 801019c:	9b06      	ldr	r3, [sp, #24]
 801019e:	9a07      	ldr	r2, [sp, #28]
 80101a0:	4293      	cmp	r3, r2
 80101a2:	f43f af4e 	beq.w	8010042 <lv_draw_sw_arc+0x29a>
 80101a6:	9b06      	ldr	r3, [sp, #24]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	f040 815f 	bne.w	801046c <lv_draw_sw_arc+0x6c4>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 80101ae:	9b07      	ldr	r3, [sp, #28]
 80101b0:	3b02      	subs	r3, #2
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	f67f af47 	bls.w	8010048 <lv_draw_sw_arc+0x2a0>
    q->draw_ctx->clip_area = clip_area_ori;
 80101ba:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80101be:	e0a7      	b.n	8010310 <lv_draw_sw_arc+0x568>
                q->draw_ctx->clip_area = &quarter_area;
 80101c0:	ab13      	add	r3, sp, #76	; 0x4c
 80101c2:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80101c6:	aa42      	add	r2, sp, #264	; 0x108
 80101c8:	a944      	add	r1, sp, #272	; 0x110
 80101ca:	4648      	mov	r0, r9
 80101cc:	f7ff f828 	bl	800f220 <lv_draw_rect>
 80101d0:	e7d8      	b.n	8010184 <lv_draw_sw_arc+0x3dc>
            quarter_area.x2 = q->center->x + q->radius;
 80101d2:	f8b8 3000 	ldrh.w	r3, [r8]
 80101d6:	443b      	add	r3, r7
 80101d8:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y1 = q->center->y;
 80101dc:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80101e0:	930c      	str	r3, [sp, #48]	; 0x30
 80101e2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80101e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101e8:	f011 fa32 	bl	8021650 <lv_trigo_sin>
 80101ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80101ee:	fb01 f300 	mul.w	r3, r1, r0
 80101f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101f4:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80101f8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80101fc:	f8b8 3000 	ldrh.w	r3, [r8]
 8010200:	930c      	str	r3, [sp, #48]	; 0x30
 8010202:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010206:	b200      	sxth	r0, r0
 8010208:	f011 fa22 	bl	8021650 <lv_trigo_sin>
 801020c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801020e:	eba1 030a 	sub.w	r3, r1, sl
 8010212:	fb00 f303 	mul.w	r3, r0, r3
 8010216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010218:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 801021c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010220:	465a      	mov	r2, fp
 8010222:	a913      	add	r1, sp, #76	; 0x4c
 8010224:	4608      	mov	r0, r1
 8010226:	f010 fc0a 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 801022a:	b928      	cbnz	r0, 8010238 <lv_draw_sw_arc+0x490>
    q->draw_ctx->clip_area = clip_area_ori;
 801022c:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8010230:	9b06      	ldr	r3, [sp, #24]
 8010232:	2b01      	cmp	r3, #1
 8010234:	d1ae      	bne.n	8010194 <lv_draw_sw_arc+0x3ec>
 8010236:	e034      	b.n	80102a2 <lv_draw_sw_arc+0x4fa>
                q->draw_ctx->clip_area = &quarter_area;
 8010238:	ab13      	add	r3, sp, #76	; 0x4c
 801023a:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801023e:	aa42      	add	r2, sp, #264	; 0x108
 8010240:	a944      	add	r1, sp, #272	; 0x110
 8010242:	4648      	mov	r0, r9
 8010244:	f7fe ffec 	bl	800f220 <lv_draw_rect>
 8010248:	e7f0      	b.n	801022c <lv_draw_sw_arc+0x484>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 801024a:	42ac      	cmp	r4, r5
 801024c:	f67f aeeb 	bls.w	8010026 <lv_draw_sw_arc+0x27e>
        quarter_area.x1 = q->center->x;
 8010250:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010254:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y;
 8010258:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801025c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + q->radius;
 8010260:	443a      	add	r2, r7
 8010262:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + q->radius;
 8010266:	443b      	add	r3, r7
 8010268:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801026c:	465a      	mov	r2, fp
 801026e:	a913      	add	r1, sp, #76	; 0x4c
 8010270:	4608      	mov	r0, r1
 8010272:	f010 fbe4 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 8010276:	2800      	cmp	r0, #0
 8010278:	d086      	beq.n	8010188 <lv_draw_sw_arc+0x3e0>
            q->draw_ctx->clip_area = &quarter_area;
 801027a:	ab13      	add	r3, sp, #76	; 0x4c
 801027c:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010280:	aa42      	add	r2, sp, #264	; 0x108
 8010282:	a944      	add	r1, sp, #272	; 0x110
 8010284:	4648      	mov	r0, r9
 8010286:	f7fe ffcb 	bl	800f220 <lv_draw_rect>
 801028a:	e77d      	b.n	8010188 <lv_draw_sw_arc+0x3e0>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 801028c:	9b07      	ldr	r3, [sp, #28]
 801028e:	2b01      	cmp	r3, #1
 8010290:	d0de      	beq.n	8010250 <lv_draw_sw_arc+0x4a8>
    q->draw_ctx->clip_area = clip_area_ori;
 8010292:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8010296:	e781      	b.n	801019c <lv_draw_sw_arc+0x3f4>
 8010298:	b60b60b7 	.word	0xb60b60b7
 801029c:	9b07      	ldr	r3, [sp, #28]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d04a      	beq.n	8010338 <lv_draw_sw_arc+0x590>
            quarter_area.x1 = q->center->x - q->radius;
 80102a2:	f8b8 3000 	ldrh.w	r3, [r8]
 80102a6:	1bdb      	subs	r3, r3, r7
 80102a8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y1 = q->center->y;
 80102ac:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80102b0:	930c      	str	r3, [sp, #48]	; 0x30
 80102b2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80102b6:	9808      	ldr	r0, [sp, #32]
 80102b8:	f011 f9ca 	bl	8021650 <lv_trigo_sin>
 80102bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80102be:	fb01 f300 	mul.w	r3, r1, r0
 80102c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102c4:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80102c8:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80102cc:	f8b8 3000 	ldrh.w	r3, [r8]
 80102d0:	930c      	str	r3, [sp, #48]	; 0x30
 80102d2:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80102d6:	b200      	sxth	r0, r0
 80102d8:	f011 f9ba 	bl	8021650 <lv_trigo_sin>
 80102dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80102de:	eba1 030a 	sub.w	r3, r1, sl
 80102e2:	fb00 f303 	mul.w	r3, r0, r3
 80102e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102e8:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80102ec:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80102f0:	465a      	mov	r2, fp
 80102f2:	a913      	add	r1, sp, #76	; 0x4c
 80102f4:	4608      	mov	r0, r1
 80102f6:	f010 fba2 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 80102fa:	2800      	cmp	r0, #0
 80102fc:	d16f      	bne.n	80103de <lv_draw_sw_arc+0x636>
        if(q->end_quarter == 1) {
 80102fe:	9b07      	ldr	r3, [sp, #28]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d075      	beq.n	80103f0 <lv_draw_sw_arc+0x648>
    q->draw_ctx->clip_area = clip_area_ori;
 8010304:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8010308:	9b06      	ldr	r3, [sp, #24]
 801030a:	2b02      	cmp	r3, #2
 801030c:	f000 80df 	beq.w	80104ce <lv_draw_sw_arc+0x726>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 8010310:	9b07      	ldr	r3, [sp, #28]
 8010312:	2b02      	cmp	r3, #2
 8010314:	f000 81aa 	beq.w	801066c <lv_draw_sw_arc+0x8c4>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8010318:	9b06      	ldr	r3, [sp, #24]
 801031a:	9a07      	ldr	r2, [sp, #28]
 801031c:	4293      	cmp	r3, r2
 801031e:	f000 80b3 	beq.w	8010488 <lv_draw_sw_arc+0x6e0>
 8010322:	9b06      	ldr	r3, [sp, #24]
 8010324:	2b00      	cmp	r3, #0
 8010326:	f040 821c 	bne.w	8010762 <lv_draw_sw_arc+0x9ba>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801032a:	9b07      	ldr	r3, [sp, #28]
 801032c:	2b03      	cmp	r3, #3
 801032e:	f000 80ae 	beq.w	801048e <lv_draw_sw_arc+0x6e6>
    q->draw_ctx->clip_area = clip_area_ori;
 8010332:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8010336:	e107      	b.n	8010548 <lv_draw_sw_arc+0x7a0>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8010338:	42ac      	cmp	r4, r5
 801033a:	d2b2      	bcs.n	80102a2 <lv_draw_sw_arc+0x4fa>
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801033c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010340:	930c      	str	r3, [sp, #48]	; 0x30
 8010342:	9808      	ldr	r0, [sp, #32]
 8010344:	f011 f984 	bl	8021650 <lv_trigo_sin>
 8010348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801034a:	fb03 f300 	mul.w	r3, r3, r0
 801034e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010350:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010354:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010358:	f8b8 2000 	ldrh.w	r2, [r8]
 801035c:	920c      	str	r2, [sp, #48]	; 0x30
 801035e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010362:	b200      	sxth	r0, r0
 8010364:	f011 f974 	bl	8021650 <lv_trigo_sin>
 8010368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801036a:	eba3 020a 	sub.w	r2, r3, sl
 801036e:	920d      	str	r2, [sp, #52]	; 0x34
 8010370:	fb02 f300 	mul.w	r3, r2, r0
 8010374:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010376:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 801037a:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 801037e:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8010382:	910c      	str	r1, [sp, #48]	; 0x30
 8010384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010386:	f011 f963 	bl	8021650 <lv_trigo_sin>
 801038a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801038c:	fb02 f300 	mul.w	r3, r2, r0
 8010390:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010392:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010396:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801039a:	f8b8 2000 	ldrh.w	r2, [r8]
 801039e:	920c      	str	r2, [sp, #48]	; 0x30
 80103a0:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80103a4:	b200      	sxth	r0, r0
 80103a6:	f011 f953 	bl	8021650 <lv_trigo_sin>
 80103aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103ac:	fb03 f300 	mul.w	r3, r3, r0
 80103b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80103b2:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80103b6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80103ba:	465a      	mov	r2, fp
 80103bc:	a913      	add	r1, sp, #76	; 0x4c
 80103be:	4608      	mov	r0, r1
 80103c0:	f010 fb3d 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 80103c4:	b910      	cbnz	r0, 80103cc <lv_draw_sw_arc+0x624>
    q->draw_ctx->clip_area = clip_area_ori;
 80103c6:	f8c9 b008 	str.w	fp, [r9, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80103ca:	e05d      	b.n	8010488 <lv_draw_sw_arc+0x6e0>
            q->draw_ctx->clip_area = &quarter_area;
 80103cc:	ab13      	add	r3, sp, #76	; 0x4c
 80103ce:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80103d2:	aa42      	add	r2, sp, #264	; 0x108
 80103d4:	a944      	add	r1, sp, #272	; 0x110
 80103d6:	4648      	mov	r0, r9
 80103d8:	f7fe ff22 	bl	800f220 <lv_draw_rect>
 80103dc:	e7f3      	b.n	80103c6 <lv_draw_sw_arc+0x61e>
                q->draw_ctx->clip_area = &quarter_area;
 80103de:	ab13      	add	r3, sp, #76	; 0x4c
 80103e0:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80103e4:	aa42      	add	r2, sp, #264	; 0x108
 80103e6:	a944      	add	r1, sp, #272	; 0x110
 80103e8:	4648      	mov	r0, r9
 80103ea:	f7fe ff19 	bl	800f220 <lv_draw_rect>
 80103ee:	e786      	b.n	80102fe <lv_draw_sw_arc+0x556>
            quarter_area.x2 = q->center->x - 1;
 80103f0:	f8b8 3000 	ldrh.w	r3, [r8]
 80103f4:	3b01      	subs	r3, #1
 80103f6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y2 = q->center->y + q->radius;
 80103fa:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80103fe:	930c      	str	r3, [sp, #48]	; 0x30
 8010400:	18fb      	adds	r3, r7, r3
 8010402:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010406:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010408:	f011 f922 	bl	8021650 <lv_trigo_sin>
 801040c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801040e:	eba2 030a 	sub.w	r3, r2, sl
 8010412:	fb00 f303 	mul.w	r3, r0, r3
 8010416:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010418:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 801041c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010420:	f8b8 3000 	ldrh.w	r3, [r8]
 8010424:	930c      	str	r3, [sp, #48]	; 0x30
 8010426:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801042a:	b200      	sxth	r0, r0
 801042c:	f011 f910 	bl	8021650 <lv_trigo_sin>
 8010430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010432:	fb02 f300 	mul.w	r3, r2, r0
 8010436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010438:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 801043c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010440:	465a      	mov	r2, fp
 8010442:	a913      	add	r1, sp, #76	; 0x4c
 8010444:	4608      	mov	r0, r1
 8010446:	f010 fafa 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 801044a:	b930      	cbnz	r0, 801045a <lv_draw_sw_arc+0x6b2>
    q->draw_ctx->clip_area = clip_area_ori;
 801044c:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8010450:	9b06      	ldr	r3, [sp, #24]
 8010452:	2b02      	cmp	r3, #2
 8010454:	f47f af5c 	bne.w	8010310 <lv_draw_sw_arc+0x568>
 8010458:	e03c      	b.n	80104d4 <lv_draw_sw_arc+0x72c>
                q->draw_ctx->clip_area = &quarter_area;
 801045a:	ab13      	add	r3, sp, #76	; 0x4c
 801045c:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010460:	aa42      	add	r2, sp, #264	; 0x108
 8010462:	a944      	add	r1, sp, #272	; 0x110
 8010464:	4648      	mov	r0, r9
 8010466:	f7fe fedb 	bl	800f220 <lv_draw_rect>
 801046a:	e7ef      	b.n	801044c <lv_draw_sw_arc+0x6a4>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 801046c:	9b06      	ldr	r3, [sp, #24]
 801046e:	2b03      	cmp	r3, #3
 8010470:	f47f af48 	bne.w	8010304 <lv_draw_sw_arc+0x55c>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8010474:	9b07      	ldr	r3, [sp, #28]
 8010476:	2b02      	cmp	r3, #2
 8010478:	f43f ade6 	beq.w	8010048 <lv_draw_sw_arc+0x2a0>
    q->draw_ctx->clip_area = clip_area_ori;
 801047c:	f8c9 b008 	str.w	fp, [r9, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8010480:	9b06      	ldr	r3, [sp, #24]
 8010482:	9a07      	ldr	r2, [sp, #28]
 8010484:	4293      	cmp	r3, r2
 8010486:	d159      	bne.n	801053c <lv_draw_sw_arc+0x794>
 8010488:	42ac      	cmp	r4, r5
 801048a:	f67f af4a 	bls.w	8010322 <lv_draw_sw_arc+0x57a>
        quarter_area.x1 = q->center->x - q->radius;
 801048e:	f8b8 2000 	ldrh.w	r2, [r8]
 8010492:	1bd3      	subs	r3, r2, r7
 8010494:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y - q->radius;
 8010498:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 801049c:	1bd9      	subs	r1, r3, r7
 801049e:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x - 1;
 80104a2:	3a01      	subs	r2, #1
 80104a4:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y - 1;
 80104a8:	3b01      	subs	r3, #1
 80104aa:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80104ae:	465a      	mov	r2, fp
 80104b0:	a913      	add	r1, sp, #76	; 0x4c
 80104b2:	4608      	mov	r0, r1
 80104b4:	f010 fac3 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d03f      	beq.n	801053c <lv_draw_sw_arc+0x794>
            q->draw_ctx->clip_area = &quarter_area;
 80104bc:	ab13      	add	r3, sp, #76	; 0x4c
 80104be:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80104c2:	aa42      	add	r2, sp, #264	; 0x108
 80104c4:	a944      	add	r1, sp, #272	; 0x110
 80104c6:	4648      	mov	r0, r9
 80104c8:	f7fe feaa 	bl	800f220 <lv_draw_rect>
 80104cc:	e036      	b.n	801053c <lv_draw_sw_arc+0x794>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80104ce:	9b07      	ldr	r3, [sp, #28]
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	d04e      	beq.n	8010572 <lv_draw_sw_arc+0x7ca>
            quarter_area.x2 = q->center->x - 1;
 80104d4:	f8b8 3000 	ldrh.w	r3, [r8]
 80104d8:	930c      	str	r3, [sp, #48]	; 0x30
 80104da:	3b01      	subs	r3, #1
 80104dc:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y1 = q->center->y - q->radius;
 80104e0:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80104e4:	1bdb      	subs	r3, r3, r7
 80104e6:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80104ea:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80104ee:	b200      	sxth	r0, r0
 80104f0:	f011 f8ae 	bl	8021650 <lv_trigo_sin>
 80104f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80104f6:	fb01 f300 	mul.w	r3, r1, r0
 80104fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104fc:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010500:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010504:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010508:	930c      	str	r3, [sp, #48]	; 0x30
 801050a:	9808      	ldr	r0, [sp, #32]
 801050c:	f011 f8a0 	bl	8021650 <lv_trigo_sin>
 8010510:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010512:	eba1 030a 	sub.w	r3, r1, sl
 8010516:	fb00 f303 	mul.w	r3, r0, r3
 801051a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801051c:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010520:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010524:	465a      	mov	r2, fp
 8010526:	a913      	add	r1, sp, #76	; 0x4c
 8010528:	4608      	mov	r0, r1
 801052a:	f010 fa88 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 801052e:	2800      	cmp	r0, #0
 8010530:	f040 8093 	bne.w	801065a <lv_draw_sw_arc+0x8b2>
        if(q->end_quarter == 2) {
 8010534:	9b07      	ldr	r3, [sp, #28]
 8010536:	2b02      	cmp	r3, #2
 8010538:	f000 8098 	beq.w	801066c <lv_draw_sw_arc+0x8c4>
    q->draw_ctx->clip_area = clip_area_ori;
 801053c:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8010540:	9b06      	ldr	r3, [sp, #24]
 8010542:	2b03      	cmp	r3, #3
 8010544:	f000 80c7 	beq.w	80106d6 <lv_draw_sw_arc+0x92e>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8010548:	9b07      	ldr	r3, [sp, #28]
 801054a:	2b03      	cmp	r3, #3
 801054c:	f000 816b 	beq.w	8010826 <lv_draw_sw_arc+0xa7e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8010550:	9b06      	ldr	r3, [sp, #24]
 8010552:	9a07      	ldr	r2, [sp, #28]
 8010554:	4293      	cmp	r3, r2
 8010556:	d055      	beq.n	8010604 <lv_draw_sw_arc+0x85c>
 8010558:	9b06      	ldr	r3, [sp, #24]
 801055a:	2b02      	cmp	r3, #2
 801055c:	f000 8196 	beq.w	801088c <lv_draw_sw_arc+0xae4>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8010560:	9b06      	ldr	r3, [sp, #24]
 8010562:	2b01      	cmp	r3, #1
 8010564:	f040 80ea 	bne.w	801073c <lv_draw_sw_arc+0x994>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8010568:	9b07      	ldr	r3, [sp, #28]
 801056a:	2b00      	cmp	r3, #0
 801056c:	f040 80e6 	bne.w	801073c <lv_draw_sw_arc+0x994>
 8010570:	e04a      	b.n	8010608 <lv_draw_sw_arc+0x860>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8010572:	42ac      	cmp	r4, r5
 8010574:	d2ae      	bcs.n	80104d4 <lv_draw_sw_arc+0x72c>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010576:	f8b8 3000 	ldrh.w	r3, [r8]
 801057a:	930c      	str	r3, [sp, #48]	; 0x30
 801057c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010580:	b200      	sxth	r0, r0
 8010582:	f011 f865 	bl	8021650 <lv_trigo_sin>
 8010586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010588:	fb03 f300 	mul.w	r3, r3, r0
 801058c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801058e:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010592:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010596:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801059a:	920c      	str	r2, [sp, #48]	; 0x30
 801059c:	9808      	ldr	r0, [sp, #32]
 801059e:	f011 f857 	bl	8021650 <lv_trigo_sin>
 80105a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105a4:	eba3 020a 	sub.w	r2, r3, sl
 80105a8:	920d      	str	r2, [sp, #52]	; 0x34
 80105aa:	fb02 f300 	mul.w	r3, r2, r0
 80105ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80105b0:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 80105b4:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80105b8:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80105bc:	910c      	str	r1, [sp, #48]	; 0x30
 80105be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105c0:	f011 f846 	bl	8021650 <lv_trigo_sin>
 80105c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105c6:	fb03 f300 	mul.w	r3, r3, r0
 80105ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80105cc:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 80105d0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80105d4:	f8b8 3000 	ldrh.w	r3, [r8]
 80105d8:	930a      	str	r3, [sp, #40]	; 0x28
 80105da:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80105de:	b200      	sxth	r0, r0
 80105e0:	f011 f836 	bl	8021650 <lv_trigo_sin>
 80105e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105e6:	fb02 f300 	mul.w	r3, r2, r0
 80105ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105ec:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80105f0:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80105f4:	465a      	mov	r2, fp
 80105f6:	a913      	add	r1, sp, #76	; 0x4c
 80105f8:	4608      	mov	r0, r1
 80105fa:	f010 fa20 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 80105fe:	bb18      	cbnz	r0, 8010648 <lv_draw_sw_arc+0x8a0>
    q->draw_ctx->clip_area = clip_area_ori;
 8010600:	f8c9 b008 	str.w	fp, [r9, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8010604:	42ac      	cmp	r4, r5
 8010606:	d9a7      	bls.n	8010558 <lv_draw_sw_arc+0x7b0>
        quarter_area.x1 = q->center->x;
 8010608:	f9b8 2000 	ldrsh.w	r2, [r8]
 801060c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y - q->radius;
 8010610:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010614:	1bd9      	subs	r1, r3, r7
 8010616:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + q->radius;
 801061a:	443a      	add	r2, r7
 801061c:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y - 1;
 8010620:	3b01      	subs	r3, #1
 8010622:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010626:	465a      	mov	r2, fp
 8010628:	a913      	add	r1, sp, #76	; 0x4c
 801062a:	4608      	mov	r0, r1
 801062c:	f010 fa07 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 8010630:	2800      	cmp	r0, #0
 8010632:	f000 8083 	beq.w	801073c <lv_draw_sw_arc+0x994>
            q->draw_ctx->clip_area = &quarter_area;
 8010636:	ab13      	add	r3, sp, #76	; 0x4c
 8010638:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801063c:	aa42      	add	r2, sp, #264	; 0x108
 801063e:	a944      	add	r1, sp, #272	; 0x110
 8010640:	4648      	mov	r0, r9
 8010642:	f7fe fded 	bl	800f220 <lv_draw_rect>
 8010646:	e079      	b.n	801073c <lv_draw_sw_arc+0x994>
            q->draw_ctx->clip_area = &quarter_area;
 8010648:	ab13      	add	r3, sp, #76	; 0x4c
 801064a:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801064e:	aa42      	add	r2, sp, #264	; 0x108
 8010650:	a944      	add	r1, sp, #272	; 0x110
 8010652:	4648      	mov	r0, r9
 8010654:	f7fe fde4 	bl	800f220 <lv_draw_rect>
 8010658:	e7d2      	b.n	8010600 <lv_draw_sw_arc+0x858>
                q->draw_ctx->clip_area = &quarter_area;
 801065a:	ab13      	add	r3, sp, #76	; 0x4c
 801065c:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010660:	aa42      	add	r2, sp, #264	; 0x108
 8010662:	a944      	add	r1, sp, #272	; 0x110
 8010664:	4648      	mov	r0, r9
 8010666:	f7fe fddb 	bl	800f220 <lv_draw_rect>
 801066a:	e763      	b.n	8010534 <lv_draw_sw_arc+0x78c>
            quarter_area.x1 = q->center->x - q->radius;
 801066c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010670:	930c      	str	r3, [sp, #48]	; 0x30
 8010672:	1bdb      	subs	r3, r3, r7
 8010674:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y2 = q->center->y - 1;
 8010678:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 801067c:	3b01      	subs	r3, #1
 801067e:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010682:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010686:	b200      	sxth	r0, r0
 8010688:	f010 ffe2 	bl	8021650 <lv_trigo_sin>
 801068c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801068e:	eba2 030a 	sub.w	r3, r2, sl
 8010692:	fb00 f303 	mul.w	r3, r0, r3
 8010696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010698:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 801069c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80106a0:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80106a4:	930c      	str	r3, [sp, #48]	; 0x30
 80106a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106a8:	f010 ffd2 	bl	8021650 <lv_trigo_sin>
 80106ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106ae:	fb02 f300 	mul.w	r3, r2, r0
 80106b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80106b4:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80106b8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80106bc:	465a      	mov	r2, fp
 80106be:	a913      	add	r1, sp, #76	; 0x4c
 80106c0:	4608      	mov	r0, r1
 80106c2:	f010 f9bc 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d13c      	bne.n	8010744 <lv_draw_sw_arc+0x99c>
    q->draw_ctx->clip_area = clip_area_ori;
 80106ca:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80106ce:	9b06      	ldr	r3, [sp, #24]
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	f47f af3d 	bne.w	8010550 <lv_draw_sw_arc+0x7a8>
 80106d6:	9b07      	ldr	r3, [sp, #28]
 80106d8:	2b03      	cmp	r3, #3
 80106da:	d050      	beq.n	801077e <lv_draw_sw_arc+0x9d6>
            quarter_area.x2 = q->center->x + q->radius;
 80106dc:	f8b8 3000 	ldrh.w	r3, [r8]
 80106e0:	9306      	str	r3, [sp, #24]
 80106e2:	18fb      	adds	r3, r7, r3
 80106e4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y2 = q->center->y - 1;
 80106e8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80106ec:	3b01      	subs	r3, #1
 80106ee:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80106f2:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80106f6:	b200      	sxth	r0, r0
 80106f8:	f010 ffaa 	bl	8021650 <lv_trigo_sin>
 80106fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106fe:	eba2 030a 	sub.w	r3, r2, sl
 8010702:	fb00 f303 	mul.w	r3, r0, r3
 8010706:	9906      	ldr	r1, [sp, #24]
 8010708:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 801070c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010710:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010714:	9808      	ldr	r0, [sp, #32]
 8010716:	f010 ff9b 	bl	8021650 <lv_trigo_sin>
 801071a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801071c:	fb02 f300 	mul.w	r3, r2, r0
 8010720:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010724:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010728:	465a      	mov	r2, fp
 801072a:	a913      	add	r1, sp, #76	; 0x4c
 801072c:	4608      	mov	r0, r1
 801072e:	f010 f986 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 8010732:	2800      	cmp	r0, #0
 8010734:	d16e      	bne.n	8010814 <lv_draw_sw_arc+0xa6c>
        if(q->end_quarter == 3) {
 8010736:	9b07      	ldr	r3, [sp, #28]
 8010738:	2b03      	cmp	r3, #3
 801073a:	d074      	beq.n	8010826 <lv_draw_sw_arc+0xa7e>
    q->draw_ctx->clip_area = clip_area_ori;
 801073c:	f8c9 b008 	str.w	fp, [r9, #8]
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8010740:	f7ff bbe6 	b.w	800ff10 <lv_draw_sw_arc+0x168>
                q->draw_ctx->clip_area = &quarter_area;
 8010744:	ab13      	add	r3, sp, #76	; 0x4c
 8010746:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801074a:	aa42      	add	r2, sp, #264	; 0x108
 801074c:	a944      	add	r1, sp, #272	; 0x110
 801074e:	4648      	mov	r0, r9
 8010750:	f7fe fd66 	bl	800f220 <lv_draw_rect>
    q->draw_ctx->clip_area = clip_area_ori;
 8010754:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8010758:	9b06      	ldr	r3, [sp, #24]
 801075a:	2b03      	cmp	r3, #3
 801075c:	f47f aef4 	bne.w	8010548 <lv_draw_sw_arc+0x7a0>
 8010760:	e7bc      	b.n	80106dc <lv_draw_sw_arc+0x934>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8010762:	9b06      	ldr	r3, [sp, #24]
 8010764:	2b01      	cmp	r3, #1
 8010766:	f47f aee9 	bne.w	801053c <lv_draw_sw_arc+0x794>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 801076a:	9b07      	ldr	r3, [sp, #28]
 801076c:	2b03      	cmp	r3, #3
 801076e:	f43f ae8e 	beq.w	801048e <lv_draw_sw_arc+0x6e6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8010772:	2b00      	cmp	r3, #0
 8010774:	f43f ae8b 	beq.w	801048e <lv_draw_sw_arc+0x6e6>
    q->draw_ctx->clip_area = clip_area_ori;
 8010778:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 801077c:	e6e8      	b.n	8010550 <lv_draw_sw_arc+0x7a8>
 801077e:	42ac      	cmp	r4, r5
 8010780:	d2ac      	bcs.n	80106dc <lv_draw_sw_arc+0x934>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010782:	f8b8 3000 	ldrh.w	r3, [r8]
 8010786:	9306      	str	r3, [sp, #24]
 8010788:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 801078c:	b200      	sxth	r0, r0
 801078e:	f010 ff5f 	bl	8021650 <lv_trigo_sin>
 8010792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010794:	eba3 020a 	sub.w	r2, r3, sl
 8010798:	9207      	str	r2, [sp, #28]
 801079a:	fb02 f300 	mul.w	r3, r2, r0
 801079e:	9906      	ldr	r1, [sp, #24]
 80107a0:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 80107a4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 80107a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80107ac:	9808      	ldr	r0, [sp, #32]
 80107ae:	f010 ff4f 	bl	8021650 <lv_trigo_sin>
 80107b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107b4:	fb03 f300 	mul.w	r3, r3, r0
 80107b8:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 80107bc:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 80107c0:	f8b8 4000 	ldrh.w	r4, [r8]
 80107c4:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80107c8:	b200      	sxth	r0, r0
 80107ca:	f010 ff41 	bl	8021650 <lv_trigo_sin>
 80107ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107d0:	fb03 f300 	mul.w	r3, r3, r0
 80107d4:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 80107d8:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80107dc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80107e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107e2:	f010 ff35 	bl	8021650 <lv_trigo_sin>
 80107e6:	9a07      	ldr	r2, [sp, #28]
 80107e8:	fb02 f300 	mul.w	r3, r2, r0
 80107ec:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 80107f0:	f8ad 4052 	strh.w	r4, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80107f4:	465a      	mov	r2, fp
 80107f6:	a913      	add	r1, sp, #76	; 0x4c
 80107f8:	4608      	mov	r0, r1
 80107fa:	f010 f920 	bl	8020a3e <_lv_area_intersect>
        if(ok) {
 80107fe:	2800      	cmp	r0, #0
 8010800:	d09c      	beq.n	801073c <lv_draw_sw_arc+0x994>
            q->draw_ctx->clip_area = &quarter_area;
 8010802:	ab13      	add	r3, sp, #76	; 0x4c
 8010804:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010808:	aa42      	add	r2, sp, #264	; 0x108
 801080a:	a944      	add	r1, sp, #272	; 0x110
 801080c:	4648      	mov	r0, r9
 801080e:	f7fe fd07 	bl	800f220 <lv_draw_rect>
 8010812:	e793      	b.n	801073c <lv_draw_sw_arc+0x994>
                q->draw_ctx->clip_area = &quarter_area;
 8010814:	ab13      	add	r3, sp, #76	; 0x4c
 8010816:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801081a:	aa42      	add	r2, sp, #264	; 0x108
 801081c:	a944      	add	r1, sp, #272	; 0x110
 801081e:	4648      	mov	r0, r9
 8010820:	f7fe fcfe 	bl	800f220 <lv_draw_rect>
 8010824:	e787      	b.n	8010736 <lv_draw_sw_arc+0x98e>
            quarter_area.x1 = q->center->x;
 8010826:	f9b8 4000 	ldrsh.w	r4, [r8]
 801082a:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
            quarter_area.y1 = q->center->y - q->radius;
 801082e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010832:	1bdb      	subs	r3, r3, r7
 8010834:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010838:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801083c:	b200      	sxth	r0, r0
 801083e:	f010 ff07 	bl	8021650 <lv_trigo_sin>
 8010842:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010844:	fb05 f300 	mul.w	r3, r5, r0
 8010848:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 801084c:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010850:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010856:	f010 fefb 	bl	8021650 <lv_trigo_sin>
 801085a:	eba5 030a 	sub.w	r3, r5, sl
 801085e:	fb00 f303 	mul.w	r3, r0, r3
 8010862:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010866:	f8ad 4052 	strh.w	r4, [sp, #82]	; 0x52
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801086a:	465a      	mov	r2, fp
 801086c:	a913      	add	r1, sp, #76	; 0x4c
 801086e:	4608      	mov	r0, r1
 8010870:	f010 f8e5 	bl	8020a3e <_lv_area_intersect>
            if(ok) {
 8010874:	2800      	cmp	r0, #0
 8010876:	f43f af61 	beq.w	801073c <lv_draw_sw_arc+0x994>
                q->draw_ctx->clip_area = &quarter_area;
 801087a:	ab13      	add	r3, sp, #76	; 0x4c
 801087c:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010880:	aa42      	add	r2, sp, #264	; 0x108
 8010882:	a944      	add	r1, sp, #272	; 0x110
 8010884:	4648      	mov	r0, r9
 8010886:	f7fe fccb 	bl	800f220 <lv_draw_rect>
 801088a:	e757      	b.n	801073c <lv_draw_sw_arc+0x994>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 801088c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801088e:	f013 0f02 	tst.w	r3, #2
 8010892:	f43f aeb9 	beq.w	8010608 <lv_draw_sw_arc+0x860>
 8010896:	e751      	b.n	801073c <lv_draw_sw_arc+0x994>
        lv_draw_mask_free_param(&mask_in_param);
 8010898:	a83a      	add	r0, sp, #232	; 0xe8
 801089a:	f7fe f883 	bl	800e9a4 <lv_draw_mask_free_param>
 801089e:	f7ff bb41 	b.w	800ff24 <lv_draw_sw_arc+0x17c>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fe f854 	bl	800e950 <lv_draw_mask_remove_id>
 80108a8:	f7ff bb47 	b.w	800ff3a <lv_draw_sw_arc+0x192>
        get_rounded_area(start_angle, radius, width, &round_area);
 80108ac:	b23f      	sxth	r7, r7
 80108ae:	fa5f fa8a 	uxtb.w	sl, sl
 80108b2:	ab0f      	add	r3, sp, #60	; 0x3c
 80108b4:	4652      	mov	r2, sl
 80108b6:	4639      	mov	r1, r7
 80108b8:	9808      	ldr	r0, [sp, #32]
 80108ba:	f7ff fa31 	bl	800fd20 <get_rounded_area>
        round_area.x1 += center->x;
 80108be:	f8b8 3000 	ldrh.w	r3, [r8]
 80108c2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80108c6:	441a      	add	r2, r3
 80108c8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        round_area.x2 += center->x;
 80108cc:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80108d0:	4413      	add	r3, r2
 80108d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        round_area.y1 += center->y;
 80108d6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80108da:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80108de:	441a      	add	r2, r3
 80108e0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
        round_area.y2 += center->y;
 80108e4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80108e8:	4413      	add	r3, r2
 80108ea:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 80108ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80108f0:	4659      	mov	r1, fp
 80108f2:	a811      	add	r0, sp, #68	; 0x44
 80108f4:	f010 f8a3 	bl	8020a3e <_lv_area_intersect>
 80108f8:	bb38      	cbnz	r0, 801094a <lv_draw_sw_arc+0xba2>
        get_rounded_area(end_angle, radius, width, &round_area);
 80108fa:	ab0f      	add	r3, sp, #60	; 0x3c
 80108fc:	4652      	mov	r2, sl
 80108fe:	4639      	mov	r1, r7
 8010900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010902:	f7ff fa0d 	bl	800fd20 <get_rounded_area>
        round_area.x1 += center->x;
 8010906:	f8b8 3000 	ldrh.w	r3, [r8]
 801090a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801090e:	441a      	add	r2, r3
 8010910:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        round_area.x2 += center->x;
 8010914:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010918:	4413      	add	r3, r2
 801091a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        round_area.y1 += center->y;
 801091e:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010922:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8010926:	441a      	add	r2, r3
 8010928:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
        round_area.y2 += center->y;
 801092c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8010930:	4413      	add	r3, r2
 8010932:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8010936:	aa0f      	add	r2, sp, #60	; 0x3c
 8010938:	4659      	mov	r1, fp
 801093a:	a811      	add	r0, sp, #68	; 0x44
 801093c:	f010 f87f 	bl	8020a3e <_lv_area_intersect>
 8010940:	b9f0      	cbnz	r0, 8010980 <lv_draw_sw_arc+0xbd8>
        draw_ctx->clip_area = clip_area_ori;
 8010942:	f8c9 b008 	str.w	fp, [r9, #8]
 8010946:	f7ff bafd 	b.w	800ff44 <lv_draw_sw_arc+0x19c>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 801094a:	2300      	movs	r3, #0
 801094c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010950:	a90f      	add	r1, sp, #60	; 0x3c
 8010952:	a813      	add	r0, sp, #76	; 0x4c
 8010954:	f7fe f9b4 	bl	800ecc0 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8010958:	2100      	movs	r1, #0
 801095a:	a813      	add	r0, sp, #76	; 0x4c
 801095c:	f7fd ffae 	bl	800e8bc <lv_draw_mask_add>
 8010960:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 8010962:	ab11      	add	r3, sp, #68	; 0x44
 8010964:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8010968:	aa42      	add	r2, sp, #264	; 0x108
 801096a:	a944      	add	r1, sp, #272	; 0x110
 801096c:	4648      	mov	r0, r9
 801096e:	f7fe fc57 	bl	800f220 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8010972:	4620      	mov	r0, r4
 8010974:	f7fd ffec 	bl	800e950 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8010978:	a813      	add	r0, sp, #76	; 0x4c
 801097a:	f7fe f813 	bl	800e9a4 <lv_draw_mask_free_param>
 801097e:	e7bc      	b.n	80108fa <lv_draw_sw_arc+0xb52>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8010980:	2300      	movs	r3, #0
 8010982:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010986:	a90f      	add	r1, sp, #60	; 0x3c
 8010988:	a813      	add	r0, sp, #76	; 0x4c
 801098a:	f7fe f999 	bl	800ecc0 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 801098e:	2100      	movs	r1, #0
 8010990:	a813      	add	r0, sp, #76	; 0x4c
 8010992:	f7fd ff93 	bl	800e8bc <lv_draw_mask_add>
 8010996:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 8010998:	ab11      	add	r3, sp, #68	; 0x44
 801099a:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801099e:	aa42      	add	r2, sp, #264	; 0x108
 80109a0:	a944      	add	r1, sp, #272	; 0x110
 80109a2:	4648      	mov	r0, r9
 80109a4:	f7fe fc3c 	bl	800f220 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 80109a8:	4620      	mov	r0, r4
 80109aa:	f7fd ffd1 	bl	800e950 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 80109ae:	a813      	add	r0, sp, #76	; 0x4c
 80109b0:	f7fd fff8 	bl	800e9a4 <lv_draw_mask_free_param>
 80109b4:	e7c5      	b.n	8010942 <lv_draw_sw_arc+0xb9a>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 80109b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80109ba:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80109be:	aa42      	add	r2, sp, #264	; 0x108
 80109c0:	a944      	add	r1, sp, #272	; 0x110
 80109c2:	4648      	mov	r0, r9
 80109c4:	f7fe fc2c 	bl	800f220 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 80109c8:	9802      	ldr	r0, [sp, #8]
 80109ca:	f7fd ffc1 	bl	800e950 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_out_param);
 80109ce:	a834      	add	r0, sp, #208	; 0xd0
 80109d0:	f7fd ffe8 	bl	800e9a4 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 80109d4:	f7ff bab6 	b.w	800ff44 <lv_draw_sw_arc+0x19c>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 80109d8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80109dc:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80109e0:	aa42      	add	r2, sp, #264	; 0x108
 80109e2:	a944      	add	r1, sp, #272	; 0x110
 80109e4:	4648      	mov	r0, r9
 80109e6:	f7fe fc1b 	bl	800f220 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 80109ea:	9802      	ldr	r0, [sp, #8]
 80109ec:	f7fd ffb0 	bl	800e950 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 80109f0:	9b03      	ldr	r3, [sp, #12]
 80109f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109f6:	f47f aae0 	bne.w	800ffba <lv_draw_sw_arc+0x212>
        lv_draw_mask_free_param(&mask_out_param);
 80109fa:	a834      	add	r0, sp, #208	; 0xd0
 80109fc:	f7fd ffd2 	bl	800e9a4 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 8010a00:	f7ff bae4 	b.w	800ffcc <lv_draw_sw_arc+0x224>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8010a04:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010a08:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8010a0c:	aa42      	add	r2, sp, #264	; 0x108
 8010a0e:	a944      	add	r1, sp, #272	; 0x110
 8010a10:	4648      	mov	r0, r9
 8010a12:	f7fe fc05 	bl	800f220 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 8010a16:	9802      	ldr	r0, [sp, #8]
 8010a18:	f7fd ff9a 	bl	800e950 <lv_draw_mask_remove_id>
 8010a1c:	2400      	movs	r4, #0
 8010a1e:	f7ff bad0 	b.w	800ffc2 <lv_draw_sw_arc+0x21a>
 8010a22:	bf00      	nop

08010a24 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8010a24:	b510      	push	{r4, lr}
 8010a26:	f001 041f 	and.w	r4, r1, #31
 8010a2a:	f3c1 1e45 	ubfx	lr, r1, #5, #6
 8010a2e:	f3c1 2cc4 	ubfx	ip, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
 8010a32:	2a02      	cmp	r2, #2
 8010a34:	d937      	bls.n	8010aa6 <color_blend_true_color_additive+0x82>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
 8010a36:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8010a3a:	4463      	add	r3, ip
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MIN(tmp, 31);
 8010a3c:	2b1f      	cmp	r3, #31
 8010a3e:	bf28      	it	cs
 8010a40:	231f      	movcs	r3, #31
 8010a42:	f003 031f 	and.w	r3, r3, #31
#if LV_COLOR_DEPTH == 8
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
 8010a46:	f3c0 1c45 	ubfx	ip, r0, #5, #6
 8010a4a:	44f4      	add	ip, lr
    fg.ch.green = LV_MIN(tmp, 63);
 8010a4c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8010a50:	bf28      	it	cs
 8010a52:	f04f 0c3f 	movcs.w	ip, #63	; 0x3f
 8010a56:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
#elif LV_COLOR_DEPTH == 32
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
 8010a5a:	f000 0e1f 	and.w	lr, r0, #31
 8010a5e:	44a6      	add	lr, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MIN(tmp, 31);
 8010a60:	f1be 0f1f 	cmp.w	lr, #31
 8010a64:	bf28      	it	cs
 8010a66:	f04f 0e1f 	movcs.w	lr, #31
 8010a6a:	f00e 0e1f 	and.w	lr, lr, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 8010a6e:	2aff      	cmp	r2, #255	; 0xff
 8010a70:	d022      	beq.n	8010ab8 <color_blend_true_color_additive+0x94>

    return lv_color_mix(fg, bg, opa);
 8010a72:	f36e 0004 	bfi	r0, lr, #0, #5
 8010a76:	f36c 104a 	bfi	r0, ip, #5, #6
 8010a7a:	f363 20cf 	bfi	r0, r3, #11, #5
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010a7e:	b28b      	uxth	r3, r1
 8010a80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010a84:	4c11      	ldr	r4, [pc, #68]	; (8010acc <color_blend_true_color_additive+0xa8>)
 8010a86:	4021      	ands	r1, r4
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8010a88:	b283      	uxth	r3, r0
 8010a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010a8e:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010a90:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010a92:	3204      	adds	r2, #4
 8010a94:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010a96:	fb02 f000 	mul.w	r0, r2, r0
 8010a9a:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8010a9e:	4020      	ands	r0, r4
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8010aa0:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 8010aa4:	bd10      	pop	{r4, pc}
    if(opa <= LV_OPA_MIN) return bg;
 8010aa6:	f04f 0000 	mov.w	r0, #0
 8010aaa:	f364 0004 	bfi	r0, r4, #0, #5
 8010aae:	f36e 104a 	bfi	r0, lr, #5, #6
 8010ab2:	f36c 20cf 	bfi	r0, ip, #11, #5
 8010ab6:	e7f5      	b.n	8010aa4 <color_blend_true_color_additive+0x80>
    if(opa == LV_OPA_COVER) return fg;
 8010ab8:	f04f 0000 	mov.w	r0, #0
 8010abc:	f36e 0004 	bfi	r0, lr, #0, #5
 8010ac0:	f36c 104a 	bfi	r0, ip, #5, #6
 8010ac4:	f363 20cf 	bfi	r0, r3, #11, #5
 8010ac8:	e7ec      	b.n	8010aa4 <color_blend_true_color_additive+0x80>
 8010aca:	bf00      	nop
 8010acc:	07e0f81f 	.word	0x07e0f81f

08010ad0 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8010ad0:	b510      	push	{r4, lr}
 8010ad2:	f001 0e1f 	and.w	lr, r1, #31
 8010ad6:	f3c1 1c45 	ubfx	ip, r1, #5, #6
 8010ada:	f3c1 23c4 	ubfx	r3, r1, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8010ade:	2a02      	cmp	r2, #2
 8010ae0:	d932      	bls.n	8010b48 <color_blend_true_color_subtractive+0x78>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 8010ae2:	f3c0 24c4 	ubfx	r4, r0, #11, #5
 8010ae6:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MAX(tmp, 0);
 8010ae8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010aec:	f003 031f 	and.w	r3, r3, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 8010af0:	f3c0 1445 	ubfx	r4, r0, #5, #6
 8010af4:	ebac 0c04 	sub.w	ip, ip, r4
    fg.ch.green = LV_MAX(tmp, 0);
 8010af8:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
 8010afc:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 8010b00:	f000 041f 	and.w	r4, r0, #31
 8010b04:	ebae 0e04 	sub.w	lr, lr, r4
    fg.ch.blue = LV_MAX(tmp, 0);
 8010b08:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
 8010b0c:	f00e 0e1f 	and.w	lr, lr, #31

    if(opa == LV_OPA_COVER) return fg;
 8010b10:	2aff      	cmp	r2, #255	; 0xff
 8010b12:	d022      	beq.n	8010b5a <color_blend_true_color_subtractive+0x8a>

    return lv_color_mix(fg, bg, opa);
 8010b14:	f36e 0004 	bfi	r0, lr, #0, #5
 8010b18:	f36c 104a 	bfi	r0, ip, #5, #6
 8010b1c:	f363 20cf 	bfi	r0, r3, #11, #5
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010b20:	b28b      	uxth	r3, r1
 8010b22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010b26:	4c11      	ldr	r4, [pc, #68]	; (8010b6c <color_blend_true_color_subtractive+0x9c>)
 8010b28:	4021      	ands	r1, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8010b2a:	b283      	uxth	r3, r0
 8010b2c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010b30:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010b32:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010b34:	3204      	adds	r2, #4
 8010b36:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010b38:	fb02 f000 	mul.w	r0, r2, r0
 8010b3c:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8010b40:	4020      	ands	r0, r4
    return ret;
 8010b42:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 8010b46:	bd10      	pop	{r4, pc}
    if(opa <= LV_OPA_MIN) return bg;
 8010b48:	f04f 0000 	mov.w	r0, #0
 8010b4c:	f36e 0004 	bfi	r0, lr, #0, #5
 8010b50:	f36c 104a 	bfi	r0, ip, #5, #6
 8010b54:	f363 20cf 	bfi	r0, r3, #11, #5
 8010b58:	e7f5      	b.n	8010b46 <color_blend_true_color_subtractive+0x76>
    if(opa == LV_OPA_COVER) return fg;
 8010b5a:	f04f 0000 	mov.w	r0, #0
 8010b5e:	f36e 0004 	bfi	r0, lr, #0, #5
 8010b62:	f36c 104a 	bfi	r0, ip, #5, #6
 8010b66:	f363 20cf 	bfi	r0, r3, #11, #5
 8010b6a:	e7ec      	b.n	8010b46 <color_blend_true_color_subtractive+0x76>
 8010b6c:	07e0f81f 	.word	0x07e0f81f

08010b70 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8010b70:	b510      	push	{r4, lr}
 8010b72:	f001 0c1f 	and.w	ip, r1, #31
 8010b76:	f3c1 1445 	ubfx	r4, r1, #5, #6
 8010b7a:	f3c1 2ec4 	ubfx	lr, r1, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8010b7e:	2a02      	cmp	r2, #2
 8010b80:	d92d      	bls.n	8010bde <color_blend_true_color_multiply+0x6e>
#if LV_COLOR_DEPTH == 32
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 8;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 8;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 8;
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 8010b82:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8010b86:	fb0e f303 	mul.w	r3, lr, r3
 8010b8a:	f3c3 1344 	ubfx	r3, r3, #5, #5
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 8010b8e:	f000 0e1f 	and.w	lr, r0, #31
 8010b92:	fb0c fe0e 	mul.w	lr, ip, lr
 8010b96:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 8010b9a:	f3c0 1c45 	ubfx	ip, r0, #5, #6
 8010b9e:	fb04 fc0c 	mul.w	ip, r4, ip
 8010ba2:	f3cc 1c85 	ubfx	ip, ip, #6, #6
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 8010ba6:	2aff      	cmp	r2, #255	; 0xff
 8010ba8:	d022      	beq.n	8010bf0 <color_blend_true_color_multiply+0x80>

    return lv_color_mix(fg, bg, opa);
 8010baa:	f36e 0004 	bfi	r0, lr, #0, #5
 8010bae:	f36c 104a 	bfi	r0, ip, #5, #6
 8010bb2:	f363 20cf 	bfi	r0, r3, #11, #5
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8010bb6:	b28b      	uxth	r3, r1
 8010bb8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010bbc:	4c11      	ldr	r4, [pc, #68]	; (8010c04 <color_blend_true_color_multiply+0x94>)
 8010bbe:	4021      	ands	r1, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8010bc0:	b283      	uxth	r3, r0
 8010bc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8010bc6:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010bc8:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8010bca:	3204      	adds	r2, #4
 8010bcc:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8010bce:	fb02 f000 	mul.w	r0, r2, r0
 8010bd2:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8010bd6:	4020      	ands	r0, r4
    return ret;
 8010bd8:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 8010bdc:	bd10      	pop	{r4, pc}
    if(opa <= LV_OPA_MIN) return bg;
 8010bde:	f04f 0000 	mov.w	r0, #0
 8010be2:	f36c 0004 	bfi	r0, ip, #0, #5
 8010be6:	f364 104a 	bfi	r0, r4, #5, #6
 8010bea:	f36e 20cf 	bfi	r0, lr, #11, #5
 8010bee:	e7f5      	b.n	8010bdc <color_blend_true_color_multiply+0x6c>
    if(opa == LV_OPA_COVER) return fg;
 8010bf0:	f04f 0000 	mov.w	r0, #0
 8010bf4:	f36e 0004 	bfi	r0, lr, #0, #5
 8010bf8:	f36c 104a 	bfi	r0, ip, #5, #6
 8010bfc:	f363 20cf 	bfi	r0, r3, #11, #5
 8010c00:	e7ec      	b.n	8010bdc <color_blend_true_color_multiply+0x6c>
 8010c02:	bf00      	nop
 8010c04:	07e0f81f 	.word	0x07e0f81f

08010c08 <lv_draw_sw_blend>:
    if(dsc->opa <= LV_OPA_MIN) return;
 8010c08:	7e0b      	ldrb	r3, [r1, #24]
 8010c0a:	2b02      	cmp	r3, #2
 8010c0c:	d800      	bhi.n	8010c10 <lv_draw_sw_blend+0x8>
 8010c0e:	4770      	bx	lr
{
 8010c10:	b530      	push	{r4, r5, lr}
 8010c12:	b083      	sub	sp, #12
 8010c14:	4605      	mov	r5, r0
 8010c16:	460c      	mov	r4, r1
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8010c18:	6882      	ldr	r2, [r0, #8]
 8010c1a:	6809      	ldr	r1, [r1, #0]
 8010c1c:	4668      	mov	r0, sp
 8010c1e:	f00f ff0e 	bl	8020a3e <_lv_area_intersect>
 8010c22:	b138      	cbz	r0, 8010c34 <lv_draw_sw_blend+0x2c>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 8010c24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010c26:	b10b      	cbz	r3, 8010c2c <lv_draw_sw_blend+0x24>
 8010c28:	4628      	mov	r0, r5
 8010c2a:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 8010c2c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8010c2e:	4621      	mov	r1, r4
 8010c30:	4628      	mov	r0, r5
 8010c32:	4798      	blx	r3
}
 8010c34:	b003      	add	sp, #12
 8010c36:	bd30      	pop	{r4, r5, pc}

08010c38 <lv_draw_sw_blend_basic>:
{
 8010c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c3c:	b091      	sub	sp, #68	; 0x44
 8010c3e:	4605      	mov	r5, r0
 8010c40:	460c      	mov	r4, r1
    if(dsc->mask_buf == NULL) mask = NULL;
 8010c42:	68cb      	ldr	r3, [r1, #12]
 8010c44:	9305      	str	r3, [sp, #20]
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 8010c46:	b10b      	cbz	r3, 8010c4c <lv_draw_sw_blend_basic+0x14>
 8010c48:	7c0b      	ldrb	r3, [r1, #16]
 8010c4a:	b183      	cbz	r3, 8010c6e <lv_draw_sw_blend_basic+0x36>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 8010c4c:	7c23      	ldrb	r3, [r4, #16]
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	9b05      	ldr	r3, [sp, #20]
 8010c52:	bf08      	it	eq
 8010c54:	2300      	moveq	r3, #0
 8010c56:	9305      	str	r3, [sp, #20]
    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 8010c58:	686b      	ldr	r3, [r5, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010c5a:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8010c5e:	f9b3 7000 	ldrsh.w	r7, [r3]
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8010c62:	68aa      	ldr	r2, [r5, #8]
 8010c64:	6821      	ldr	r1, [r4, #0]
 8010c66:	a80e      	add	r0, sp, #56	; 0x38
 8010c68:	f00f fee9 	bl	8020a3e <_lv_area_intersect>
 8010c6c:	b910      	cbnz	r0, 8010c74 <lv_draw_sw_blend_basic+0x3c>
}
 8010c6e:	b011      	add	sp, #68	; 0x44
 8010c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c74:	3601      	adds	r6, #1
 8010c76:	1bf6      	subs	r6, r6, r7
 8010c78:	b233      	sxth	r3, r6
 8010c7a:	9304      	str	r3, [sp, #16]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010c7c:	f7fb fd48 	bl	800c710 <_lv_refr_get_disp_refreshing>
 8010c80:	4606      	mov	r6, r0
    lv_color_t * dest_buf = draw_ctx->buf;
 8010c82:	682b      	ldr	r3, [r5, #0]
 8010c84:	9306      	str	r3, [sp, #24]
    if(disp->driver->set_px_cb == NULL) {
 8010c86:	6802      	ldr	r2, [r0, #0]
 8010c88:	69d3      	ldr	r3, [r2, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d06d      	beq.n	8010d6a <lv_draw_sw_blend_basic+0x132>
    const lv_color_t * src_buf = dsc->src_buf;
 8010c8e:	6863      	ldr	r3, [r4, #4]
    if(src_buf) {
 8010c90:	9307      	str	r3, [sp, #28]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	f000 8097 	beq.w	8010dc6 <lv_draw_sw_blend_basic+0x18e>
        src_stride = lv_area_get_width(dsc->blend_area);
 8010c98:	6827      	ldr	r7, [r4, #0]
 8010c9a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8010c9e:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8010ca2:	f10b 0b01 	add.w	fp, fp, #1
 8010ca6:	ebab 0b01 	sub.w	fp, fp, r1
 8010caa:	fa0f fb8b 	sxth.w	fp, fp
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8010cae:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010cb2:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8010cb6:	1a18      	subs	r0, r3, r0
 8010cb8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8010cbc:	1a5b      	subs	r3, r3, r1
 8010cbe:	fb0b 3300 	mla	r3, fp, r0, r3
 8010cc2:	9907      	ldr	r1, [sp, #28]
 8010cc4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010cc8:	9307      	str	r3, [sp, #28]
    if(mask) {
 8010cca:	9b05      	ldr	r3, [sp, #20]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f000 8090 	beq.w	8010df2 <lv_draw_sw_blend_basic+0x1ba>
        if(disp->driver->antialiasing == 0) {
 8010cd2:	7c13      	ldrb	r3, [r2, #16]
 8010cd4:	f013 0f08 	tst.w	r3, #8
 8010cd8:	d078      	beq.n	8010dcc <lv_draw_sw_blend_basic+0x194>
        mask_stride = lv_area_get_width(dsc->mask_area);
 8010cda:	6960      	ldr	r0, [r4, #20]
 8010cdc:	f9b0 1000 	ldrsh.w	r1, [r0]
 8010ce0:	8882      	ldrh	r2, [r0, #4]
 8010ce2:	3201      	adds	r2, #1
 8010ce4:	1a52      	subs	r2, r2, r1
 8010ce6:	b217      	sxth	r7, r2
 8010ce8:	9708      	str	r7, [sp, #32]
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 8010cea:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010cee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010cf2:	1a9a      	subs	r2, r3, r2
 8010cf4:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8010cf8:	1a5b      	subs	r3, r3, r1
 8010cfa:	fb07 3302 	mla	r3, r7, r2, r3
 8010cfe:	9a05      	ldr	r2, [sp, #20]
 8010d00:	441a      	add	r2, r3
 8010d02:	9205      	str	r2, [sp, #20]
    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 8010d04:	686b      	ldr	r3, [r5, #4]
 8010d06:	885a      	ldrh	r2, [r3, #2]
 8010d08:	4252      	negs	r2, r2
 8010d0a:	8819      	ldrh	r1, [r3, #0]
 8010d0c:	4249      	negs	r1, r1
 8010d0e:	b212      	sxth	r2, r2
 8010d10:	b209      	sxth	r1, r1
 8010d12:	a80e      	add	r0, sp, #56	; 0x38
 8010d14:	f00f fe84 	bl	8020a20 <lv_area_move>
    if(disp->driver->set_px_cb) {
 8010d18:	6833      	ldr	r3, [r6, #0]
 8010d1a:	69db      	ldr	r3, [r3, #28]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	f000 8154 	beq.w	8010fca <lv_draw_sw_blend_basic+0x392>
        if(dsc->src_buf == NULL) {
 8010d22:	6863      	ldr	r3, [r4, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d067      	beq.n	8010df8 <lv_draw_sw_blend_basic+0x1c0>
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8010d28:	f894 a018 	ldrb.w	sl, [r4, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010d2c:	f7fb fcf0 	bl	800c710 <_lv_refr_get_disp_refreshing>
 8010d30:	4681      	mov	r9, r0
 8010d32:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
 8010d36:	3701      	adds	r7, #1
 8010d38:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010d3c:	1aff      	subs	r7, r7, r3
    int32_t w = lv_area_get_width(dest_area);
 8010d3e:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010d40:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010d44:	3301      	adds	r3, #1
 8010d46:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8010d4a:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 8010d4c:	b21b      	sxth	r3, r3
 8010d4e:	461a      	mov	r2, r3
 8010d50:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask == NULL) {
 8010d52:	9b05      	ldr	r3, [sp, #20]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f000 80ca 	beq.w	8010eee <lv_draw_sw_blend_basic+0x2b6>
        for(y = 0; y < h; y++) {
 8010d5a:	2a00      	cmp	r2, #0
 8010d5c:	dd87      	ble.n	8010c6e <lv_draw_sw_blend_basic+0x36>
            src_buf += src_stride;
 8010d5e:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8010d62:	930a      	str	r3, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 8010d64:	f04f 0b00 	mov.w	fp, #0
 8010d68:	e128      	b.n	8010fbc <lv_draw_sw_blend_basic+0x384>
        if(disp->driver->screen_transp == 0) {
 8010d6a:	7c13      	ldrb	r3, [r2, #16]
 8010d6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010d70:	d112      	bne.n	8010d98 <lv_draw_sw_blend_basic+0x160>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8010d72:	6868      	ldr	r0, [r5, #4]
 8010d74:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010d78:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010d7c:	1a59      	subs	r1, r3, r1
 8010d7e:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8010d82:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010d86:	1a1b      	subs	r3, r3, r0
 8010d88:	9804      	ldr	r0, [sp, #16]
 8010d8a:	fb00 3301 	mla	r3, r0, r1, r3
 8010d8e:	9906      	ldr	r1, [sp, #24]
 8010d90:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010d94:	9306      	str	r3, [sp, #24]
 8010d96:	e77a      	b.n	8010c8e <lv_draw_sw_blend_basic+0x56>
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8010d98:	6868      	ldr	r0, [r5, #4]
 8010d9a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8010d9e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010da2:	1a5b      	subs	r3, r3, r1
 8010da4:	9904      	ldr	r1, [sp, #16]
 8010da6:	fb01 f303 	mul.w	r3, r1, r3
 8010daa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8010dae:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8010db2:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010db6:	1a09      	subs	r1, r1, r0
 8010db8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010dbc:	440b      	add	r3, r1
 8010dbe:	9906      	ldr	r1, [sp, #24]
 8010dc0:	4419      	add	r1, r3
 8010dc2:	9106      	str	r1, [sp, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 8010dc4:	e763      	b.n	8010c8e <lv_draw_sw_blend_basic+0x56>
        src_stride = 0;
 8010dc6:	f04f 0b00 	mov.w	fp, #0
 8010dca:	e77e      	b.n	8010cca <lv_draw_sw_blend_basic+0x92>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8010dcc:	6960      	ldr	r0, [r4, #20]
 8010dce:	f00f fe0a 	bl	80209e6 <lv_area_get_size>
            for(i = 0; i < mask_size; i++) {
 8010dd2:	1e01      	subs	r1, r0, #0
 8010dd4:	dd81      	ble.n	8010cda <lv_draw_sw_blend_basic+0xa2>
 8010dd6:	9b05      	ldr	r3, [sp, #20]
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	4419      	add	r1, r3
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 8010ddc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8010de0:	2a80      	cmp	r2, #128	; 0x80
 8010de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010de6:	bf98      	it	ls
 8010de8:	2200      	movls	r2, #0
 8010dea:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 8010dec:	428b      	cmp	r3, r1
 8010dee:	d1f5      	bne.n	8010ddc <lv_draw_sw_blend_basic+0x1a4>
 8010df0:	e773      	b.n	8010cda <lv_draw_sw_blend_basic+0xa2>
        mask_stride = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	9308      	str	r3, [sp, #32]
 8010df6:	e785      	b.n	8010d04 <lv_draw_sw_blend_basic+0xcc>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8010df8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010dfc:	f8b4 a008 	ldrh.w	sl, [r4, #8]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8010e00:	f7fb fc86 	bl	800c710 <_lv_refr_get_disp_refreshing>
 8010e04:	4680      	mov	r8, r0
    if(mask == NULL) {
 8010e06:	9b05      	ldr	r3, [sp, #20]
 8010e08:	b1a3      	cbz	r3, 8010e34 <lv_draw_sw_blend_basic+0x1fc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010e0a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8010e0e:	3601      	adds	r6, #1
 8010e10:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010e14:	1af6      	subs	r6, r6, r3
        int32_t w = lv_area_get_width(blend_area);
 8010e16:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010e18:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8010e22:	1a9b      	subs	r3, r3, r2
        int32_t h = lv_area_get_height(blend_area);
 8010e24:	b21b      	sxth	r3, r3
 8010e26:	9307      	str	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	bfc8      	it	gt
 8010e2c:	f04f 0b00 	movgt.w	fp, #0
 8010e30:	dc57      	bgt.n	8010ee2 <lv_draw_sw_blend_basic+0x2aa>
 8010e32:	e71c      	b.n	8010c6e <lv_draw_sw_blend_basic+0x36>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 8010e34:	f9bd 703a 	ldrsh.w	r7, [sp, #58]	; 0x3a
 8010e38:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8010e3c:	429f      	cmp	r7, r3
 8010e3e:	f73f af16 	bgt.w	8010c6e <lv_draw_sw_blend_basic+0x36>
 8010e42:	9705      	str	r7, [sp, #20]
 8010e44:	464f      	mov	r7, r9
 8010e46:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8010e4a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8010e4e:	e008      	b.n	8010e62 <lv_draw_sw_blend_basic+0x22a>
 8010e50:	9b05      	ldr	r3, [sp, #20]
 8010e52:	3301      	adds	r3, #1
 8010e54:	461a      	mov	r2, r3
 8010e56:	9305      	str	r3, [sp, #20]
 8010e58:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	f73f af06 	bgt.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8010e62:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 8010e66:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8010e6a:	429c      	cmp	r4, r3
 8010e6c:	dcf0      	bgt.n	8010e50 <lv_draw_sw_blend_basic+0x218>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 8010e6e:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8010e72:	f8d8 0000 	ldr.w	r0, [r8]
 8010e76:	9702      	str	r7, [sp, #8]
 8010e78:	f8ad a004 	strh.w	sl, [sp, #4]
 8010e7c:	9600      	str	r6, [sp, #0]
 8010e7e:	69c5      	ldr	r5, [r0, #28]
 8010e80:	b223      	sxth	r3, r4
 8010e82:	464a      	mov	r2, r9
 8010e84:	4659      	mov	r1, fp
 8010e86:	47a8      	blx	r5
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8010e88:	3401      	adds	r4, #1
 8010e8a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8010e8e:	429c      	cmp	r4, r3
 8010e90:	ddef      	ble.n	8010e72 <lv_draw_sw_blend_basic+0x23a>
 8010e92:	e7dd      	b.n	8010e50 <lv_draw_sw_blend_basic+0x218>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8010e94:	f8d8 0000 	ldr.w	r0, [r8]
 8010e98:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010e9c:	4423      	add	r3, r4
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8010e9e:	fb02 f209 	mul.w	r2, r2, r9
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8010ea2:	0a12      	lsrs	r2, r2, #8
 8010ea4:	9202      	str	r2, [sp, #8]
 8010ea6:	f8ad a004 	strh.w	sl, [sp, #4]
 8010eaa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8010eae:	445a      	add	r2, fp
 8010eb0:	b212      	sxth	r2, r2
 8010eb2:	9200      	str	r2, [sp, #0]
 8010eb4:	69c7      	ldr	r7, [r0, #28]
 8010eb6:	b21b      	sxth	r3, r3
 8010eb8:	9a04      	ldr	r2, [sp, #16]
 8010eba:	9906      	ldr	r1, [sp, #24]
 8010ebc:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 8010ebe:	3401      	adds	r4, #1
 8010ec0:	42a6      	cmp	r6, r4
 8010ec2:	d004      	beq.n	8010ece <lv_draw_sw_blend_basic+0x296>
                if(mask[x]) {
 8010ec4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8010ec8:	2a00      	cmp	r2, #0
 8010eca:	d0f8      	beq.n	8010ebe <lv_draw_sw_blend_basic+0x286>
 8010ecc:	e7e2      	b.n	8010e94 <lv_draw_sw_blend_basic+0x25c>
            mask += mask_stide;
 8010ece:	9b05      	ldr	r3, [sp, #20]
 8010ed0:	9a08      	ldr	r2, [sp, #32]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	9305      	str	r3, [sp, #20]
        for(y = 0; y < h; y++) {
 8010ed6:	f10b 0b01 	add.w	fp, fp, #1
 8010eda:	9b07      	ldr	r3, [sp, #28]
 8010edc:	455b      	cmp	r3, fp
 8010ede:	f43f aec6 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8010ee2:	2e00      	cmp	r6, #0
 8010ee4:	ddf3      	ble.n	8010ece <lv_draw_sw_blend_basic+0x296>
 8010ee6:	9b05      	ldr	r3, [sp, #20]
 8010ee8:	1e5d      	subs	r5, r3, #1
 8010eea:	2400      	movs	r4, #0
 8010eec:	e7ea      	b.n	8010ec4 <lv_draw_sw_blend_basic+0x28c>
        for(y = 0; y < h; y++) {
 8010eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f77f aebc 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            src_buf += src_stride;
 8010ef6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
        for(y = 0; y < h; y++) {
 8010efa:	f04f 0800 	mov.w	r8, #0
 8010efe:	f8cd b014 	str.w	fp, [sp, #20]
 8010f02:	f8dd b018 	ldr.w	fp, [sp, #24]
 8010f06:	e028      	b.n	8010f5a <lv_draw_sw_blend_basic+0x322>
 8010f08:	9d07      	ldr	r5, [sp, #28]
            for(x = 0; x < w; x++) {
 8010f0a:	2400      	movs	r4, #0
 8010f0c:	463b      	mov	r3, r7
 8010f0e:	4657      	mov	r7, sl
 8010f10:	469a      	mov	sl, r3
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010f12:	f8d9 0000 	ldr.w	r0, [r9]
 8010f16:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010f1a:	4423      	add	r3, r4
 8010f1c:	9702      	str	r7, [sp, #8]
 8010f1e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8010f22:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010f26:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8010f2a:	4442      	add	r2, r8
 8010f2c:	b212      	sxth	r2, r2
 8010f2e:	9200      	str	r2, [sp, #0]
 8010f30:	69c6      	ldr	r6, [r0, #28]
 8010f32:	b21b      	sxth	r3, r3
 8010f34:	9a04      	ldr	r2, [sp, #16]
 8010f36:	4659      	mov	r1, fp
 8010f38:	47b0      	blx	r6
            for(x = 0; x < w; x++) {
 8010f3a:	3401      	adds	r4, #1
 8010f3c:	45a2      	cmp	sl, r4
 8010f3e:	d1e8      	bne.n	8010f12 <lv_draw_sw_blend_basic+0x2da>
 8010f40:	4653      	mov	r3, sl
 8010f42:	46ba      	mov	sl, r7
 8010f44:	461f      	mov	r7, r3
            src_buf += src_stride;
 8010f46:	9b07      	ldr	r3, [sp, #28]
 8010f48:	9a05      	ldr	r2, [sp, #20]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	9307      	str	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 8010f4e:	f108 0801 	add.w	r8, r8, #1
 8010f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f54:	4543      	cmp	r3, r8
 8010f56:	f43f ae8a 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8010f5a:	2f00      	cmp	r7, #0
 8010f5c:	dcd4      	bgt.n	8010f08 <lv_draw_sw_blend_basic+0x2d0>
 8010f5e:	e7f2      	b.n	8010f46 <lv_draw_sw_blend_basic+0x30e>
            for(x = 0; x < w; x++) {
 8010f60:	3401      	adds	r4, #1
 8010f62:	3502      	adds	r5, #2
 8010f64:	42a7      	cmp	r7, r4
 8010f66:	d01b      	beq.n	8010fa0 <lv_draw_sw_blend_basic+0x368>
                if(mask[x]) {
 8010f68:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	d0f7      	beq.n	8010f60 <lv_draw_sw_blend_basic+0x328>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010f70:	f8d9 0000 	ldr.w	r0, [r9]
 8010f74:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010f78:	4423      	add	r3, r4
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8010f7a:	fb02 f20a 	mul.w	r2, r2, sl
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8010f7e:	0a12      	lsrs	r2, r2, #8
 8010f80:	9202      	str	r2, [sp, #8]
 8010f82:	882a      	ldrh	r2, [r5, #0]
 8010f84:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010f88:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8010f8c:	445a      	add	r2, fp
 8010f8e:	b212      	sxth	r2, r2
 8010f90:	9200      	str	r2, [sp, #0]
 8010f92:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8010f96:	b21b      	sxth	r3, r3
 8010f98:	9a04      	ldr	r2, [sp, #16]
 8010f9a:	9906      	ldr	r1, [sp, #24]
 8010f9c:	47c0      	blx	r8
 8010f9e:	e7df      	b.n	8010f60 <lv_draw_sw_blend_basic+0x328>
            mask += mask_stride;
 8010fa0:	9b05      	ldr	r3, [sp, #20]
 8010fa2:	9a08      	ldr	r2, [sp, #32]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	9305      	str	r3, [sp, #20]
            src_buf += src_stride;
 8010fa8:	9b07      	ldr	r3, [sp, #28]
 8010faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fac:	4413      	add	r3, r2
 8010fae:	9307      	str	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 8010fb0:	f10b 0b01 	add.w	fp, fp, #1
 8010fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fb6:	455b      	cmp	r3, fp
 8010fb8:	f43f ae59 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8010fbc:	2f00      	cmp	r7, #0
 8010fbe:	ddef      	ble.n	8010fa0 <lv_draw_sw_blend_basic+0x368>
 8010fc0:	9b05      	ldr	r3, [sp, #20]
 8010fc2:	1e5e      	subs	r6, r3, #1
 8010fc4:	9d07      	ldr	r5, [sp, #28]
 8010fc6:	2400      	movs	r4, #0
 8010fc8:	e7ce      	b.n	8010f68 <lv_draw_sw_blend_basic+0x330>
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 8010fca:	7e66      	ldrb	r6, [r4, #25]
 8010fcc:	2e00      	cmp	r6, #0
 8010fce:	f040 83de 	bne.w	801178e <lv_draw_sw_blend_basic+0xb56>
        if(dsc->src_buf == NULL) {
 8010fd2:	6863      	ldr	r3, [r4, #4]
 8010fd4:	b39b      	cbz	r3, 801103e <lv_draw_sw_blend_basic+0x406>
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 8010fd6:	f894 c018 	ldrb.w	ip, [r4, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010fda:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010fde:	3501      	adds	r5, #1
 8010fe0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010fe4:	1aed      	subs	r5, r5, r3
 8010fe6:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010fe8:	f8bd a03e 	ldrh.w	sl, [sp, #62]	; 0x3e
 8010fec:	f10a 0a01 	add.w	sl, sl, #1
 8010ff0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8010ff4:	ebaa 0a03 	sub.w	sl, sl, r3
    int32_t h = lv_area_get_height(dest_area);
 8010ff8:	fa0f fa8a 	sxth.w	sl, sl
    if(mask == NULL) {
 8010ffc:	9b05      	ldr	r3, [sp, #20]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 820b 	beq.w	801141a <lv_draw_sw_blend_basic+0x7e2>
        if(opa > LV_OPA_MAX) {
 8011004:	f1bc 0ffd 	cmp.w	ip, #253	; 0xfd
 8011008:	f200 825c 	bhi.w	80114c4 <lv_draw_sw_blend_basic+0x88c>
            for(y = 0; y < h; y++) {
 801100c:	f1ba 0f00 	cmp.w	sl, #0
 8011010:	f77f ae2d 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 8011014:	9b04      	ldr	r3, [sp, #16]
 8011016:	ea4f 0943 	mov.w	r9, r3, lsl #1
                src_buf += src_stride;
 801101a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801101e:	9b06      	ldr	r3, [sp, #24]
 8011020:	eb03 0e45 	add.w	lr, r3, r5, lsl #1
            for(y = 0; y < h; y++) {
 8011024:	f04f 0800 	mov.w	r8, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011028:	4fc2      	ldr	r7, [pc, #776]	; (8011334 <lv_draw_sw_blend_basic+0x6fc>)
 801102a:	9e05      	ldr	r6, [sp, #20]
 801102c:	9504      	str	r5, [sp, #16]
 801102e:	f8cd a014 	str.w	sl, [sp, #20]
 8011032:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011036:	f8cd b018 	str.w	fp, [sp, #24]
 801103a:	469b      	mov	fp, r3
 801103c:	e3a0      	b.n	8011780 <lv_draw_sw_blend_basic+0xb48>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 801103e:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011042:	8924      	ldrh	r4, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011044:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8011048:	3501      	adds	r5, #1
 801104a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801104e:	1aed      	subs	r5, r5, r3
 8011050:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011052:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011056:	3301      	adds	r3, #1
 8011058:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801105c:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 801105e:	b21b      	sxth	r3, r3
 8011060:	9307      	str	r3, [sp, #28]
    if(mask == NULL) {
 8011062:	9b05      	ldr	r3, [sp, #20]
 8011064:	b1f3      	cbz	r3, 80110a4 <lv_draw_sw_blend_basic+0x46c>
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 8011066:	0422      	lsls	r2, r4, #16
        if(opa >= LV_OPA_MAX) {
 8011068:	f1bb 0ffc 	cmp.w	fp, #252	; 0xfc
 801106c:	f240 819b 	bls.w	80113a6 <lv_draw_sw_blend_basic+0x76e>
            int32_t x_end4 = w - 4;
 8011070:	1f28      	subs	r0, r5, #4
            for(y = 0; y < h; y++) {
 8011072:	9b07      	ldr	r3, [sp, #28]
 8011074:	2b00      	cmp	r3, #0
 8011076:	f77f adfa 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 801107a:	18a6      	adds	r6, r4, r2
                dest_buf += (dest_stride - w);
 801107c:	9b04      	ldr	r3, [sp, #16]
 801107e:	eba3 0b05 	sub.w	fp, r3, r5
 8011082:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            for(y = 0; y < h; y++) {
 8011086:	f04f 0a00 	mov.w	sl, #0
 801108a:	4faa      	ldr	r7, [pc, #680]	; (8011334 <lv_draw_sw_blend_basic+0x6fc>)
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801108c:	4322      	orrs	r2, r4
 801108e:	ea02 0c07 	and.w	ip, r2, r7
                mask += (mask_stride - w);
 8011092:	9b08      	ldr	r3, [sp, #32]
 8011094:	1b5b      	subs	r3, r3, r5
 8011096:	9304      	str	r3, [sp, #16]
 8011098:	f8dd e014 	ldr.w	lr, [sp, #20]
 801109c:	9a06      	ldr	r2, [sp, #24]
 801109e:	f8cd b014 	str.w	fp, [sp, #20]
 80110a2:	e172      	b.n	801138a <lv_draw_sw_blend_basic+0x752>
        if(opa >= LV_OPA_MAX) {
 80110a4:	f1bb 0ffc 	cmp.w	fp, #252	; 0xfc
 80110a8:	d912      	bls.n	80110d0 <lv_draw_sw_blend_basic+0x498>
            for(y = 0; y < h; y++) {
 80110aa:	9b07      	ldr	r3, [sp, #28]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f77f adde 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 80110b2:	9a04      	ldr	r2, [sp, #16]
 80110b4:	0057      	lsls	r7, r2, #1
            for(y = 0; y < h; y++) {
 80110b6:	4699      	mov	r9, r3
 80110b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
                lv_color_fill(dest_buf, color, w);
 80110bc:	462a      	mov	r2, r5
 80110be:	4621      	mov	r1, r4
 80110c0:	4640      	mov	r0, r8
 80110c2:	f00f ff4b 	bl	8020f5c <lv_color_fill>
                dest_buf += dest_stride;
 80110c6:	44b8      	add	r8, r7
            for(y = 0; y < h; y++) {
 80110c8:	3601      	adds	r6, #1
 80110ca:	45b1      	cmp	r9, r6
 80110cc:	d1f6      	bne.n	80110bc <lv_draw_sw_blend_basic+0x484>
 80110ce:	e5ce      	b.n	8010c6e <lv_draw_sw_blend_basic+0x36>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80110d0:	f10b 0904 	add.w	r9, fp, #4
 80110d4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80110d8:	ea44 4304 	orr.w	r3, r4, r4, lsl #16
 80110dc:	4995      	ldr	r1, [pc, #596]	; (8011334 <lv_draw_sw_blend_basic+0x6fc>)
 80110de:	400b      	ands	r3, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80110e0:	fb09 f303 	mul.w	r3, r9, r3
 80110e4:	ea01 1153 	and.w	r1, r1, r3, lsr #5
    return ret;
 80110e8:	f001 061f 	and.w	r6, r1, #31
 80110ec:	0d48      	lsrs	r0, r1, #21
 80110ee:	f3c1 21c4 	ubfx	r1, r1, #11, #5
            opa = opa << 3;
 80110f2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80110f6:	fa5f fc89 	uxtb.w	ip, r9
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 80110fa:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80110fe:	ea4f 2ed4 	mov.w	lr, r4, lsr #11
 8011102:	fb0e fe09 	mul.w	lr, lr, r9
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8011106:	f3c4 1845 	ubfx	r8, r4, #5, #6
 801110a:	fb08 f809 	mul.w	r8, r8, r9
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 801110e:	f004 041f 	and.w	r4, r4, #31
 8011112:	fb04 f909 	mul.w	r9, r4, r9
            lv_opa_t opa_inv = 255 - opa;
 8011116:	f08c 0cff 	eor.w	ip, ip, #255	; 0xff
            for(y = 0; y < h; y++) {
 801111a:	9b07      	ldr	r3, [sp, #28]
 801111c:	2b00      	cmp	r3, #0
 801111e:	f77f ada6 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 8011122:	9b04      	ldr	r3, [sp, #16]
 8011124:	005b      	lsls	r3, r3, #1
 8011126:	9304      	str	r3, [sp, #16]
 8011128:	9b06      	ldr	r3, [sp, #24]
 801112a:	eb03 0a45 	add.w	sl, r3, r5, lsl #1
 801112e:	2700      	movs	r7, #0
            for(y = 0; y < h; y++) {
 8011130:	46bb      	mov	fp, r7
 8011132:	e040      	b.n	80111b6 <lv_draw_sw_blend_basic+0x57e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011134:	785a      	ldrb	r2, [r3, #1]
 8011136:	08d2      	lsrs	r2, r2, #3
 8011138:	fb0c e202 	mla	r2, ip, r2, lr
 801113c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
 8011140:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8011144:	f3c2 51c4 	ubfx	r1, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011148:	881a      	ldrh	r2, [r3, #0]
 801114a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801114e:	fb0c 8202 	mla	r2, ip, r2, r8
 8011152:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 8011156:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 801115a:	f3c2 50c5 	ubfx	r0, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 801115e:	781a      	ldrb	r2, [r3, #0]
 8011160:	f002 021f 	and.w	r2, r2, #31
 8011164:	fb0c 9202 	mla	r2, ip, r2, r9
 8011168:	eb02 2602 	add.w	r6, r2, r2, lsl #8
 801116c:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
 8011170:	f3c2 56c4 	ubfx	r6, r2, #23, #5
                    dest_buf[x] = last_res_color;
 8011174:	781a      	ldrb	r2, [r3, #0]
 8011176:	f366 0204 	bfi	r2, r6, #0, #5
 801117a:	701a      	strb	r2, [r3, #0]
 801117c:	881a      	ldrh	r2, [r3, #0]
 801117e:	f360 124a 	bfi	r2, r0, #5, #6
 8011182:	801a      	strh	r2, [r3, #0]
 8011184:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011188:	f361 02c7 	bfi	r2, r1, #3, #5
 801118c:	705a      	strb	r2, [r3, #1]
                for(x = 0; x < w; x++) {
 801118e:	45a2      	cmp	sl, r4
 8011190:	d006      	beq.n	80111a0 <lv_draw_sw_blend_basic+0x568>
                    if(last_dest_color.full != dest_buf[x].full) {
 8011192:	4623      	mov	r3, r4
 8011194:	463a      	mov	r2, r7
 8011196:	f834 7b02 	ldrh.w	r7, [r4], #2
 801119a:	4297      	cmp	r7, r2
 801119c:	d0ea      	beq.n	8011174 <lv_draw_sw_blend_basic+0x53c>
 801119e:	e7c9      	b.n	8011134 <lv_draw_sw_blend_basic+0x4fc>
                dest_buf += dest_stride;
 80111a0:	9b06      	ldr	r3, [sp, #24]
 80111a2:	9a04      	ldr	r2, [sp, #16]
 80111a4:	4413      	add	r3, r2
 80111a6:	9306      	str	r3, [sp, #24]
            for(y = 0; y < h; y++) {
 80111a8:	f10b 0b01 	add.w	fp, fp, #1
 80111ac:	4492      	add	sl, r2
 80111ae:	9b07      	ldr	r3, [sp, #28]
 80111b0:	455b      	cmp	r3, fp
 80111b2:	f43f ad5c 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 80111b6:	2d00      	cmp	r5, #0
 80111b8:	ddf2      	ble.n	80111a0 <lv_draw_sw_blend_basic+0x568>
 80111ba:	9c06      	ldr	r4, [sp, #24]
 80111bc:	e7e9      	b.n	8011192 <lv_draw_sw_blend_basic+0x55a>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80111be:	8813      	ldrh	r3, [r2, #0]
 80111c0:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80111c4:	403b      	ands	r3, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80111c6:	ebac 0903 	sub.w	r9, ip, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80111ca:	f10e 0e04 	add.w	lr, lr, #4
 80111ce:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80111d2:	fb0e fe09 	mul.w	lr, lr, r9
 80111d6:	eb03 135e 	add.w	r3, r3, lr, lsr #5
 80111da:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 80111dc:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
                    FILL_NORMAL_MASK_PX(color)
 80111e0:	8013      	strh	r3, [r2, #0]
 80111e2:	46c6      	mov	lr, r8
 80111e4:	3202      	adds	r2, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80111e6:	3101      	adds	r1, #1
 80111e8:	45c3      	cmp	fp, r8
 80111ea:	f000 8454 	beq.w	8011a96 <lv_draw_sw_blend_basic+0xe5e>
 80111ee:	f018 0f03 	tst.w	r8, #3
 80111f2:	f000 844c 	beq.w	8011a8e <lv_draw_sw_blend_basic+0xe56>
                    FILL_NORMAL_MASK_PX(color)
 80111f6:	f818 eb01 	ldrb.w	lr, [r8], #1
 80111fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80111fe:	d1de      	bne.n	80111be <lv_draw_sw_blend_basic+0x586>
 8011200:	8014      	strh	r4, [r2, #0]
 8011202:	e7ee      	b.n	80111e2 <lv_draw_sw_blend_basic+0x5aa>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 8011204:	f013 0f03 	tst.w	r3, #3
 8011208:	d07a      	beq.n	8011300 <lv_draw_sw_blend_basic+0x6c8>
                            *(dest_buf + 0) = color;
 801120a:	f823 4c08 	strh.w	r4, [r3, #-8]
                            *d = c32;
 801120e:	f843 6c06 	str.w	r6, [r3, #-6]
                            *(dest_buf + 3) = color;
 8011212:	f823 4c02 	strh.w	r4, [r3, #-2]
                        dest_buf += 4;
 8011216:	461a      	mov	r2, r3
                        mask += 4;
 8011218:	46c6      	mov	lr, r8
                for(; x <= x_end4; x += 4) {
 801121a:	3104      	adds	r1, #4
 801121c:	3308      	adds	r3, #8
 801121e:	4288      	cmp	r0, r1
 8011220:	f2c0 8082 	blt.w	8011328 <lv_draw_sw_blend_basic+0x6f0>
                    uint32_t mask32 = *((uint32_t *)mask);
 8011224:	f858 2b04 	ldr.w	r2, [r8], #4
                    if(mask32 == 0xFFFFFFFF) {
 8011228:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801122c:	d0ea      	beq.n	8011204 <lv_draw_sw_blend_basic+0x5cc>
                    else if(mask32) {
 801122e:	2a00      	cmp	r2, #0
 8011230:	d077      	beq.n	8011322 <lv_draw_sw_blend_basic+0x6ea>
                        FILL_NORMAL_MASK_PX(color)
 8011232:	46c6      	mov	lr, r8
 8011234:	f818 9c04 	ldrb.w	r9, [r8, #-4]
 8011238:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801123c:	d065      	beq.n	801130a <lv_draw_sw_blend_basic+0x6d2>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801123e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8011242:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8011246:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011248:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801124c:	f109 0904 	add.w	r9, r9, #4
 8011250:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011254:	fb09 f90b 	mul.w	r9, r9, fp
 8011258:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 801125c:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 801125e:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 8011262:	f823 2c08 	strh.w	r2, [r3, #-8]
                        FILL_NORMAL_MASK_PX(color)
 8011266:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 801126a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801126e:	d04f      	beq.n	8011310 <lv_draw_sw_blend_basic+0x6d8>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011270:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 8011274:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8011278:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801127a:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801127e:	f109 0904 	add.w	r9, r9, #4
 8011282:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011286:	fb09 f90b 	mul.w	r9, r9, fp
 801128a:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 801128e:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011290:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 8011294:	f823 2c06 	strh.w	r2, [r3, #-6]
                        FILL_NORMAL_MASK_PX(color)
 8011298:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801129c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80112a0:	d039      	beq.n	8011316 <lv_draw_sw_blend_basic+0x6de>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80112a2:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80112a6:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80112aa:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80112ac:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80112b0:	f109 0904 	add.w	r9, r9, #4
 80112b4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80112b8:	fb09 f90b 	mul.w	r9, r9, fp
 80112bc:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 80112c0:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 80112c2:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 80112c6:	f823 2c04 	strh.w	r2, [r3, #-4]
                        FILL_NORMAL_MASK_PX(color)
 80112ca:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80112ce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80112d2:	d023      	beq.n	801131c <lv_draw_sw_blend_basic+0x6e4>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80112d4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80112d8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80112dc:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80112de:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80112e2:	f109 0904 	add.w	r9, r9, #4
 80112e6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80112ea:	fb09 f90b 	mul.w	r9, r9, fp
 80112ee:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 80112f2:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 80112f4:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 80112f8:	f823 2c02 	strh.w	r2, [r3, #-2]
 80112fc:	461a      	mov	r2, r3
 80112fe:	e78c      	b.n	801121a <lv_draw_sw_blend_basic+0x5e2>
                            *d = c32;
 8011300:	f843 6c08 	str.w	r6, [r3, #-8]
                            *(d + 1) = c32;
 8011304:	f843 6c04 	str.w	r6, [r3, #-4]
 8011308:	e785      	b.n	8011216 <lv_draw_sw_blend_basic+0x5de>
                        FILL_NORMAL_MASK_PX(color)
 801130a:	f823 4c08 	strh.w	r4, [r3, #-8]
 801130e:	e7aa      	b.n	8011266 <lv_draw_sw_blend_basic+0x62e>
                        FILL_NORMAL_MASK_PX(color)
 8011310:	f823 4c06 	strh.w	r4, [r3, #-6]
 8011314:	e7c0      	b.n	8011298 <lv_draw_sw_blend_basic+0x660>
                        FILL_NORMAL_MASK_PX(color)
 8011316:	f823 4c04 	strh.w	r4, [r3, #-4]
 801131a:	e7d6      	b.n	80112ca <lv_draw_sw_blend_basic+0x692>
                        FILL_NORMAL_MASK_PX(color)
 801131c:	f823 4c02 	strh.w	r4, [r3, #-2]
 8011320:	e7ec      	b.n	80112fc <lv_draw_sw_blend_basic+0x6c4>
                        mask += 4;
 8011322:	46c6      	mov	lr, r8
                        dest_buf += 4;
 8011324:	461a      	mov	r2, r3
 8011326:	e778      	b.n	801121a <lv_draw_sw_blend_basic+0x5e2>
                for(; x < w ; x++) {
 8011328:	428d      	cmp	r5, r1
 801132a:	dd24      	ble.n	8011376 <lv_draw_sw_blend_basic+0x73e>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 801132c:	46f0      	mov	r8, lr
 801132e:	eba1 010e 	sub.w	r1, r1, lr
 8011332:	e019      	b.n	8011368 <lv_draw_sw_blend_basic+0x730>
 8011334:	07e0f81f 	.word	0x07e0f81f
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011338:	8813      	ldrh	r3, [r2, #0]
 801133a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801133e:	403b      	ands	r3, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011340:	ebac 0903 	sub.w	r9, ip, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011344:	f10e 0e04 	add.w	lr, lr, #4
 8011348:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801134c:	fb0e fe09 	mul.w	lr, lr, r9
 8011350:	eb03 135e 	add.w	r3, r3, lr, lsr #5
 8011354:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011356:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
                    FILL_NORMAL_MASK_PX(color)
 801135a:	8013      	strh	r3, [r2, #0]
 801135c:	46c6      	mov	lr, r8
 801135e:	3202      	adds	r2, #2
                for(; x < w ; x++) {
 8011360:	eb01 0308 	add.w	r3, r1, r8
 8011364:	429d      	cmp	r5, r3
 8011366:	dd06      	ble.n	8011376 <lv_draw_sw_blend_basic+0x73e>
                    FILL_NORMAL_MASK_PX(color)
 8011368:	f818 eb01 	ldrb.w	lr, [r8], #1
 801136c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8011370:	d1e2      	bne.n	8011338 <lv_draw_sw_blend_basic+0x700>
 8011372:	8014      	strh	r4, [r2, #0]
 8011374:	e7f2      	b.n	801135c <lv_draw_sw_blend_basic+0x724>
                dest_buf += (dest_stride - w);
 8011376:	9b05      	ldr	r3, [sp, #20]
 8011378:	441a      	add	r2, r3
                mask += (mask_stride - w);
 801137a:	9b04      	ldr	r3, [sp, #16]
 801137c:	449e      	add	lr, r3
            for(y = 0; y < h; y++) {
 801137e:	f10a 0a01 	add.w	sl, sl, #1
 8011382:	9b07      	ldr	r3, [sp, #28]
 8011384:	4553      	cmp	r3, sl
 8011386:	f43f ac72 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 801138a:	2d00      	cmp	r5, #0
 801138c:	f340 8382 	ble.w	8011a94 <lv_draw_sw_blend_basic+0xe5c>
 8011390:	46f0      	mov	r8, lr
 8011392:	f01e 0f03 	tst.w	lr, #3
 8011396:	bf08      	it	eq
 8011398:	2100      	moveq	r1, #0
 801139a:	f000 8378 	beq.w	8011a8e <lv_draw_sw_blend_basic+0xe56>
 801139e:	eb0e 0b05 	add.w	fp, lr, r5
 80113a2:	2100      	movs	r1, #0
 80113a4:	e727      	b.n	80111f6 <lv_draw_sw_blend_basic+0x5be>
            last_dest_color.full = dest_buf[0].full;
 80113a6:	9906      	ldr	r1, [sp, #24]
 80113a8:	f8b1 e000 	ldrh.w	lr, [r1]
            for(y = 0; y < h; y++) {
 80113ac:	9b07      	ldr	r3, [sp, #28]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	f77f ac5d 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 80113b4:	9b04      	ldr	r3, [sp, #16]
 80113b6:	005b      	lsls	r3, r3, #1
 80113b8:	930a      	str	r3, [sp, #40]	; 0x28
 80113ba:	eb01 0745 	add.w	r7, r1, r5, lsl #1
            last_res_color.full = dest_buf[0].full;
 80113be:	4673      	mov	r3, lr
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 80113c0:	46b4      	mov	ip, r6
            for(y = 0; y < h; y++) {
 80113c2:	f04f 0a00 	mov.w	sl, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80113c6:	f8df 9318 	ldr.w	r9, [pc, #792]	; 80116e0 <lv_draw_sw_blend_basic+0xaa8>
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80113ca:	4322      	orrs	r2, r4
 80113cc:	ea02 0209 	and.w	r2, r2, r9
 80113d0:	9204      	str	r2, [sp, #16]
 80113d2:	9409      	str	r4, [sp, #36]	; 0x24
 80113d4:	9c05      	ldr	r4, [sp, #20]
 80113d6:	e01b      	b.n	8011410 <lv_draw_sw_blend_basic+0x7d8>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 80113d8:	f8b2 8000 	ldrh.w	r8, [r2]
 80113dc:	45f0      	cmp	r8, lr
 80113de:	f000 837c 	beq.w	8011ada <lv_draw_sw_blend_basic+0xea2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 80113e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80113e6:	f040 8361 	bne.w	8011aac <lv_draw_sw_blend_basic+0xe74>
 80113ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ec:	e372      	b.n	8011ad4 <lv_draw_sw_blend_basic+0xe9c>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80113ee:	46dc      	mov	ip, fp
 80113f0:	e35c      	b.n	8011aac <lv_draw_sw_blend_basic+0xe74>
                    mask++;
 80113f2:	442c      	add	r4, r5
                dest_buf += dest_stride;
 80113f4:	9a06      	ldr	r2, [sp, #24]
 80113f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80113f8:	440a      	add	r2, r1
 80113fa:	9206      	str	r2, [sp, #24]
                mask += (mask_stride - w);
 80113fc:	9a08      	ldr	r2, [sp, #32]
 80113fe:	1b52      	subs	r2, r2, r5
 8011400:	4414      	add	r4, r2
            for(y = 0; y < h; y++) {
 8011402:	f10a 0a01 	add.w	sl, sl, #1
 8011406:	440f      	add	r7, r1
 8011408:	9a07      	ldr	r2, [sp, #28]
 801140a:	4552      	cmp	r2, sl
 801140c:	f43f ac2f 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 8011410:	2d00      	cmp	r5, #0
 8011412:	ddef      	ble.n	80113f4 <lv_draw_sw_blend_basic+0x7bc>
 8011414:	1e60      	subs	r0, r4, #1
 8011416:	9a06      	ldr	r2, [sp, #24]
 8011418:	e364      	b.n	8011ae4 <lv_draw_sw_blend_basic+0xeac>
        if(opa >= LV_OPA_MAX) {
 801141a:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
 801141e:	d815      	bhi.n	801144c <lv_draw_sw_blend_basic+0x814>
            for(y = 0; y < h; y++) {
 8011420:	f1ba 0f00 	cmp.w	sl, #0
 8011424:	f77f ac23 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011428:	f10c 0704 	add.w	r7, ip, #4
 801142c:	08ff      	lsrs	r7, r7, #3
                dest_buf += dest_stride;
 801142e:	9b04      	ldr	r3, [sp, #16]
 8011430:	ea4f 0e43 	mov.w	lr, r3, lsl #1
                src_buf += src_stride;
 8011434:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011438:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801143c:	eb08 0645 	add.w	r6, r8, r5, lsl #1
            for(y = 0; y < h; y++) {
 8011440:	f04f 0c00 	mov.w	ip, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011444:	4ca6      	ldr	r4, [pc, #664]	; (80116e0 <lv_draw_sw_blend_basic+0xaa8>)
 8011446:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801144a:	e020      	b.n	801148e <lv_draw_sw_blend_basic+0x856>
            for(y = 0; y < h; y++) {
 801144c:	f1ba 0f00 	cmp.w	sl, #0
 8011450:	f77f ac0d 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8011454:	006d      	lsls	r5, r5, #1
                dest_buf += dest_stride;
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	005e      	lsls	r6, r3, #1
                src_buf += src_stride;
 801145a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            for(y = 0; y < h; y++) {
 801145e:	2400      	movs	r4, #0
 8011460:	9f07      	ldr	r7, [sp, #28]
 8011462:	f8dd 8018 	ldr.w	r8, [sp, #24]
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8011466:	462a      	mov	r2, r5
 8011468:	4639      	mov	r1, r7
 801146a:	4640      	mov	r0, r8
 801146c:	f010 fae6 	bl	8021a3c <lv_memcpy>
                dest_buf += dest_stride;
 8011470:	44b0      	add	r8, r6
                src_buf += src_stride;
 8011472:	445f      	add	r7, fp
            for(y = 0; y < h; y++) {
 8011474:	3401      	adds	r4, #1
 8011476:	45a2      	cmp	sl, r4
 8011478:	d1f5      	bne.n	8011466 <lv_draw_sw_blend_basic+0x82e>
 801147a:	f7ff bbf8 	b.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 801147e:	44f1      	add	r9, lr
                src_buf += src_stride;
 8011480:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
 8011482:	f10c 0c01 	add.w	ip, ip, #1
 8011486:	445e      	add	r6, fp
 8011488:	45e2      	cmp	sl, ip
 801148a:	f43f abf0 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 801148e:	2d00      	cmp	r5, #0
 8011490:	ddf5      	ble.n	801147e <lv_draw_sw_blend_basic+0x846>
 8011492:	4640      	mov	r0, r8
 8011494:	f1a9 0102 	sub.w	r1, r9, #2
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8011498:	f830 2b02 	ldrh.w	r2, [r0], #2
 801149c:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80114a0:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80114a4:	4023      	ands	r3, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80114a6:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80114aa:	4022      	ands	r2, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80114ac:	1ad2      	subs	r2, r2, r3
 80114ae:	fb07 f202 	mul.w	r2, r7, r2
 80114b2:	eb03 1352 	add.w	r3, r3, r2, lsr #5
 80114b6:	4023      	ands	r3, r4
    ret.full = (uint16_t)((result >> 16) | result);
 80114b8:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
 80114bc:	800b      	strh	r3, [r1, #0]
                for(x = 0; x < w; x++) {
 80114be:	42b0      	cmp	r0, r6
 80114c0:	d1ea      	bne.n	8011498 <lv_draw_sw_blend_basic+0x860>
 80114c2:	e7dc      	b.n	801147e <lv_draw_sw_blend_basic+0x846>
            int32_t x_end4 = w - 4;
 80114c4:	f1a5 0804 	sub.w	r8, r5, #4
            for(y = 0; y < h; y++) {
 80114c8:	f1ba 0f00 	cmp.w	sl, #0
 80114cc:	f77f abcf 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 80114d0:	9b04      	ldr	r3, [sp, #16]
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	9304      	str	r3, [sp, #16]
                src_buf += src_stride;
 80114d6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            for(y = 0; y < h; y++) {
 80114da:	f04f 0900 	mov.w	r9, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80114de:	4c80      	ldr	r4, [pc, #512]	; (80116e0 <lv_draw_sw_blend_basic+0xaa8>)
 80114e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80114e4:	f8dd e018 	ldr.w	lr, [sp, #24]
 80114e8:	f8cd a018 	str.w	sl, [sp, #24]
 80114ec:	f8cd b01c 	str.w	fp, [sp, #28]
 80114f0:	e106      	b.n	8011700 <lv_draw_sw_blend_basic+0xac8>
 80114f2:	883a      	ldrh	r2, [r7, #0]
 80114f4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80114f8:	4022      	ands	r2, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80114fa:	f8ba 6000 	ldrh.w	r6, [sl]
 80114fe:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8011502:	4026      	ands	r6, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011504:	1ab6      	subs	r6, r6, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011506:	3104      	adds	r1, #4
 8011508:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801150a:	fb06 f101 	mul.w	r1, r6, r1
 801150e:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8011512:	4022      	ands	r2, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011514:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
                    MAP_NORMAL_MASK_PX(x)
 8011518:	803a      	strh	r2, [r7, #0]
 801151a:	4606      	mov	r6, r0
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 801151c:	3301      	adds	r3, #1
 801151e:	429d      	cmp	r5, r3
 8011520:	f000 82f0 	beq.w	8011b04 <lv_draw_sw_blend_basic+0xecc>
 8011524:	f10a 0a02 	add.w	sl, sl, #2
 8011528:	3702      	adds	r7, #2
 801152a:	f010 0f03 	tst.w	r0, #3
 801152e:	f000 80f5 	beq.w	801171c <lv_draw_sw_blend_basic+0xae4>
                    MAP_NORMAL_MASK_PX(x)
 8011532:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011536:	2900      	cmp	r1, #0
 8011538:	d0ef      	beq.n	801151a <lv_draw_sw_blend_basic+0x8e2>
 801153a:	29ff      	cmp	r1, #255	; 0xff
 801153c:	d1d9      	bne.n	80114f2 <lv_draw_sw_blend_basic+0x8ba>
 801153e:	f8ba 2000 	ldrh.w	r2, [sl]
 8011542:	803a      	strh	r2, [r7, #0]
 8011544:	e7e9      	b.n	801151a <lv_draw_sw_blend_basic+0x8e2>
                            dest_buf[x] = src_buf[x];
 8011546:	8806      	ldrh	r6, [r0, #0]
 8011548:	8016      	strh	r6, [r2, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 801154a:	8846      	ldrh	r6, [r0, #2]
 801154c:	8056      	strh	r6, [r2, #2]
                            dest_buf[x + 2] = src_buf[x + 2];
 801154e:	8886      	ldrh	r6, [r0, #4]
 8011550:	8096      	strh	r6, [r2, #4]
                            dest_buf[x + 3] = src_buf[x + 3];
 8011552:	88c6      	ldrh	r6, [r0, #6]
 8011554:	80d6      	strh	r6, [r2, #6]
                    mask32++;
 8011556:	460e      	mov	r6, r1
                for(; x < x_end4; x += 4) {
 8011558:	3304      	adds	r3, #4
 801155a:	3008      	adds	r0, #8
 801155c:	3208      	adds	r2, #8
 801155e:	4598      	cmp	r8, r3
 8011560:	f340 8091 	ble.w	8011686 <lv_draw_sw_blend_basic+0xa4e>
                    if(*mask32) {
 8011564:	f851 6b04 	ldr.w	r6, [r1], #4
 8011568:	2e00      	cmp	r6, #0
 801156a:	d0f4      	beq.n	8011556 <lv_draw_sw_blend_basic+0x91e>
                        if((*mask32) == 0xFFFFFFFF) {
 801156c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8011570:	d0e9      	beq.n	8011546 <lv_draw_sw_blend_basic+0x90e>
                            MAP_NORMAL_MASK_PX(x)
 8011572:	460f      	mov	r7, r1
 8011574:	f811 ac04 	ldrb.w	sl, [r1, #-4]
 8011578:	f1ba 0f00 	cmp.w	sl, #0
 801157c:	d01a      	beq.n	80115b4 <lv_draw_sw_blend_basic+0x97c>
 801157e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8011582:	d074      	beq.n	801166e <lv_draw_sw_blend_basic+0xa36>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011584:	8816      	ldrh	r6, [r2, #0]
 8011586:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 801158a:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801158c:	f8b0 b000 	ldrh.w	fp, [r0]
 8011590:	ea4b 4b0b 	orr.w	fp, fp, fp, lsl #16
 8011594:	ea0b 0b04 	and.w	fp, fp, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011598:	ebab 0b06 	sub.w	fp, fp, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801159c:	f10a 0a04 	add.w	sl, sl, #4
 80115a0:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80115a4:	fb0a fa0b 	mul.w	sl, sl, fp
 80115a8:	eb06 165a 	add.w	r6, r6, sl, lsr #5
 80115ac:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 80115ae:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 80115b2:	8016      	strh	r6, [r2, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 80115b4:	f817 ac03 	ldrb.w	sl, [r7, #-3]
 80115b8:	f1ba 0f00 	cmp.w	sl, #0
 80115bc:	d01a      	beq.n	80115f4 <lv_draw_sw_blend_basic+0x9bc>
 80115be:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80115c2:	d057      	beq.n	8011674 <lv_draw_sw_blend_basic+0xa3c>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80115c4:	8856      	ldrh	r6, [r2, #2]
 80115c6:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80115ca:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80115cc:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 80115d0:	ea4b 4b0b 	orr.w	fp, fp, fp, lsl #16
 80115d4:	ea0b 0b04 	and.w	fp, fp, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80115d8:	ebab 0b06 	sub.w	fp, fp, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80115dc:	f10a 0a04 	add.w	sl, sl, #4
 80115e0:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80115e4:	fb0a fa0b 	mul.w	sl, sl, fp
 80115e8:	eb06 165a 	add.w	r6, r6, sl, lsr #5
 80115ec:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 80115ee:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 80115f2:	8056      	strh	r6, [r2, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 80115f4:	f817 ac02 	ldrb.w	sl, [r7, #-2]
 80115f8:	f1ba 0f00 	cmp.w	sl, #0
 80115fc:	d01a      	beq.n	8011634 <lv_draw_sw_blend_basic+0x9fc>
 80115fe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8011602:	d03a      	beq.n	801167a <lv_draw_sw_blend_basic+0xa42>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011604:	8896      	ldrh	r6, [r2, #4]
 8011606:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 801160a:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801160c:	f8b0 b004 	ldrh.w	fp, [r0, #4]
 8011610:	ea4b 4b0b 	orr.w	fp, fp, fp, lsl #16
 8011614:	ea0b 0b04 	and.w	fp, fp, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011618:	ebab 0b06 	sub.w	fp, fp, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801161c:	f10a 0a04 	add.w	sl, sl, #4
 8011620:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011624:	fb0a fa0b 	mul.w	sl, sl, fp
 8011628:	eb06 165a 	add.w	r6, r6, sl, lsr #5
 801162c:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 801162e:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 8011632:	8096      	strh	r6, [r2, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8011634:	f817 7c01 	ldrb.w	r7, [r7, #-1]
 8011638:	2f00      	cmp	r7, #0
 801163a:	d08c      	beq.n	8011556 <lv_draw_sw_blend_basic+0x91e>
 801163c:	2fff      	cmp	r7, #255	; 0xff
 801163e:	d01f      	beq.n	8011680 <lv_draw_sw_blend_basic+0xa48>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011640:	88d6      	ldrh	r6, [r2, #6]
 8011642:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8011646:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011648:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 801164c:	ea4a 4a0a 	orr.w	sl, sl, sl, lsl #16
 8011650:	ea0a 0a04 	and.w	sl, sl, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011654:	ebaa 0a06 	sub.w	sl, sl, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011658:	3704      	adds	r7, #4
 801165a:	08ff      	lsrs	r7, r7, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801165c:	fb07 f70a 	mul.w	r7, r7, sl
 8011660:	eb06 1657 	add.w	r6, r6, r7, lsr #5
 8011664:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011666:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 801166a:	80d6      	strh	r6, [r2, #6]
 801166c:	e773      	b.n	8011556 <lv_draw_sw_blend_basic+0x91e>
                            MAP_NORMAL_MASK_PX(x)
 801166e:	8806      	ldrh	r6, [r0, #0]
 8011670:	8016      	strh	r6, [r2, #0]
 8011672:	e79f      	b.n	80115b4 <lv_draw_sw_blend_basic+0x97c>
                            MAP_NORMAL_MASK_PX(x + 1)
 8011674:	8846      	ldrh	r6, [r0, #2]
 8011676:	8056      	strh	r6, [r2, #2]
 8011678:	e7bc      	b.n	80115f4 <lv_draw_sw_blend_basic+0x9bc>
                            MAP_NORMAL_MASK_PX(x + 2)
 801167a:	8886      	ldrh	r6, [r0, #4]
 801167c:	8096      	strh	r6, [r2, #4]
 801167e:	e7d9      	b.n	8011634 <lv_draw_sw_blend_basic+0x9fc>
                            MAP_NORMAL_MASK_PX(x + 3)
 8011680:	88c6      	ldrh	r6, [r0, #6]
 8011682:	80d6      	strh	r6, [r2, #6]
 8011684:	e767      	b.n	8011556 <lv_draw_sw_blend_basic+0x91e>
                for(; x < w ; x++) {
 8011686:	429d      	cmp	r5, r3
 8011688:	dd2c      	ble.n	80116e4 <lv_draw_sw_blend_basic+0xaac>
 801168a:	3e01      	subs	r6, #1
 801168c:	eb0c 0a43 	add.w	sl, ip, r3, lsl #1
 8011690:	eb0e 0743 	add.w	r7, lr, r3, lsl #1
 8011694:	e019      	b.n	80116ca <lv_draw_sw_blend_basic+0xa92>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011696:	883a      	ldrh	r2, [r7, #0]
 8011698:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801169c:	4022      	ands	r2, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801169e:	f8ba 0000 	ldrh.w	r0, [sl]
 80116a2:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 80116a6:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80116a8:	1a80      	subs	r0, r0, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80116aa:	3104      	adds	r1, #4
 80116ac:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80116ae:	fb00 f101 	mul.w	r1, r0, r1
 80116b2:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 80116b6:	4022      	ands	r2, r4
    ret.full = (uint16_t)((result >> 16) | result);
 80116b8:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
                    MAP_NORMAL_MASK_PX(x)
 80116bc:	803a      	strh	r2, [r7, #0]
                for(; x < w ; x++) {
 80116be:	3301      	adds	r3, #1
 80116c0:	f10a 0a02 	add.w	sl, sl, #2
 80116c4:	3702      	adds	r7, #2
 80116c6:	429d      	cmp	r5, r3
 80116c8:	dd0c      	ble.n	80116e4 <lv_draw_sw_blend_basic+0xaac>
                    MAP_NORMAL_MASK_PX(x)
 80116ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80116ce:	2900      	cmp	r1, #0
 80116d0:	d0f5      	beq.n	80116be <lv_draw_sw_blend_basic+0xa86>
 80116d2:	29ff      	cmp	r1, #255	; 0xff
 80116d4:	d1df      	bne.n	8011696 <lv_draw_sw_blend_basic+0xa5e>
 80116d6:	f8ba 2000 	ldrh.w	r2, [sl]
 80116da:	803a      	strh	r2, [r7, #0]
 80116dc:	e7ef      	b.n	80116be <lv_draw_sw_blend_basic+0xa86>
 80116de:	bf00      	nop
 80116e0:	07e0f81f 	.word	0x07e0f81f
                dest_buf += dest_stride;
 80116e4:	9b04      	ldr	r3, [sp, #16]
 80116e6:	449e      	add	lr, r3
                src_buf += src_stride;
 80116e8:	9b07      	ldr	r3, [sp, #28]
 80116ea:	449c      	add	ip, r3
                mask += mask_stride;
 80116ec:	9b05      	ldr	r3, [sp, #20]
 80116ee:	9a08      	ldr	r2, [sp, #32]
 80116f0:	4413      	add	r3, r2
 80116f2:	9305      	str	r3, [sp, #20]
            for(y = 0; y < h; y++) {
 80116f4:	f109 0901 	add.w	r9, r9, #1
 80116f8:	9b06      	ldr	r3, [sp, #24]
 80116fa:	454b      	cmp	r3, r9
 80116fc:	f43f aab7 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8011700:	2d00      	cmp	r5, #0
 8011702:	f340 81fd 	ble.w	8011b00 <lv_draw_sw_blend_basic+0xec8>
 8011706:	9b05      	ldr	r3, [sp, #20]
 8011708:	4618      	mov	r0, r3
 801170a:	f013 0f03 	tst.w	r3, #3
 801170e:	d003      	beq.n	8011718 <lv_draw_sw_blend_basic+0xae0>
 8011710:	46e2      	mov	sl, ip
 8011712:	4677      	mov	r7, lr
 8011714:	2300      	movs	r3, #0
 8011716:	e70c      	b.n	8011532 <lv_draw_sw_blend_basic+0x8fa>
 8011718:	461e      	mov	r6, r3
 801171a:	2300      	movs	r3, #0
                for(; x < x_end4; x += 4) {
 801171c:	4598      	cmp	r8, r3
 801171e:	f300 81f4 	bgt.w	8011b0a <lv_draw_sw_blend_basic+0xed2>
 8011722:	e7b2      	b.n	801168a <lv_draw_sw_blend_basic+0xa52>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8011724:	2afc      	cmp	r2, #252	; 0xfc
 8011726:	bf9a      	itte	ls
 8011728:	fb02 f20c 	mulls.w	r2, r2, ip
 801172c:	0a12      	lsrls	r2, r2, #8
 801172e:	4662      	movhi	r2, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011730:	8803      	ldrh	r3, [r0, #0]
 8011732:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011736:	403b      	ands	r3, r7
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011738:	8821      	ldrh	r1, [r4, #0]
 801173a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801173e:	4039      	ands	r1, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011740:	1ac9      	subs	r1, r1, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011742:	3204      	adds	r2, #4
 8011744:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011746:	fb01 f202 	mul.w	r2, r1, r2
 801174a:	eb03 1352 	add.w	r3, r3, r2, lsr #5
 801174e:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011750:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 8011754:	8003      	strh	r3, [r0, #0]
                for(x = 0; x < w; x++) {
 8011756:	3402      	adds	r4, #2
 8011758:	3002      	adds	r0, #2
 801175a:	4570      	cmp	r0, lr
 801175c:	d004      	beq.n	8011768 <lv_draw_sw_blend_basic+0xb30>
                    if(mask[x]) {
 801175e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8011762:	2a00      	cmp	r2, #0
 8011764:	d0f7      	beq.n	8011756 <lv_draw_sw_blend_basic+0xb1e>
 8011766:	e7dd      	b.n	8011724 <lv_draw_sw_blend_basic+0xaec>
                dest_buf += dest_stride;
 8011768:	44cb      	add	fp, r9
                src_buf += src_stride;
 801176a:	9b06      	ldr	r3, [sp, #24]
 801176c:	449a      	add	sl, r3
                mask += mask_stride;
 801176e:	9b08      	ldr	r3, [sp, #32]
 8011770:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 8011772:	f108 0801 	add.w	r8, r8, #1
 8011776:	44ce      	add	lr, r9
 8011778:	9b05      	ldr	r3, [sp, #20]
 801177a:	4543      	cmp	r3, r8
 801177c:	f43f aa77 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 8011780:	9b04      	ldr	r3, [sp, #16]
 8011782:	2b00      	cmp	r3, #0
 8011784:	ddf0      	ble.n	8011768 <lv_draw_sw_blend_basic+0xb30>
 8011786:	1e75      	subs	r5, r6, #1
 8011788:	4654      	mov	r4, sl
 801178a:	4658      	mov	r0, fp
 801178c:	e7e7      	b.n	801175e <lv_draw_sw_blend_basic+0xb26>
        if(dsc->src_buf == NULL) {
 801178e:	6863      	ldr	r3, [r4, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d04a      	beq.n	801182a <lv_draw_sw_blend_basic+0xbf2>
    switch(blend_mode) {
 8011794:	2e02      	cmp	r6, #2
 8011796:	f000 80e9 	beq.w	801196c <lv_draw_sw_blend_basic+0xd34>
 801179a:	2e03      	cmp	r6, #3
 801179c:	f000 80e9 	beq.w	8011972 <lv_draw_sw_blend_basic+0xd3a>
 80117a0:	2e01      	cmp	r6, #1
 80117a2:	f47f aa64 	bne.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            blend_fp = color_blend_true_color_additive;
 80117a6:	4b98      	ldr	r3, [pc, #608]	; (8011a08 <lv_draw_sw_blend_basic+0xdd0>)
 80117a8:	469c      	mov	ip, r3
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 80117aa:	7e23      	ldrb	r3, [r4, #24]
 80117ac:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80117ae:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80117b2:	3301      	adds	r3, #1
 80117b4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80117b8:	1a9b      	subs	r3, r3, r2
 80117ba:	b21b      	sxth	r3, r3
 80117bc:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80117be:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80117c2:	3301      	adds	r3, #1
 80117c4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80117c8:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 80117ca:	b21b      	sxth	r3, r3
 80117cc:	930a      	str	r3, [sp, #40]	; 0x28
    if(mask == NULL) {
 80117ce:	9b05      	ldr	r3, [sp, #20]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	f000 80d1 	beq.w	8011978 <lv_draw_sw_blend_basic+0xd40>
        last_dest_color = dest_buf[0];
 80117d6:	9b06      	ldr	r3, [sp, #24]
 80117d8:	f8b3 a000 	ldrh.w	sl, [r3]
        last_src_color = src_buf[0];
 80117dc:	9b07      	ldr	r3, [sp, #28]
 80117de:	881b      	ldrh	r3, [r3, #0]
 80117e0:	4618      	mov	r0, r3
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 80117e2:	9b05      	ldr	r3, [sp, #20]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	2bfc      	cmp	r3, #252	; 0xfc
 80117e8:	bf9d      	ittte	ls
 80117ea:	9a09      	ldrls	r2, [sp, #36]	; 0x24
 80117ec:	4353      	mulls	r3, r2
 80117ee:	0a1b      	lsrls	r3, r3, #8
 80117f0:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 80117f2:	461e      	mov	r6, r3
 80117f4:	461a      	mov	r2, r3
 80117f6:	4651      	mov	r1, sl
 80117f8:	4605      	mov	r5, r0
 80117fa:	4664      	mov	r4, ip
 80117fc:	47a0      	blx	r4
        for(y = 0; y < h; y++) {
 80117fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011800:	2900      	cmp	r1, #0
 8011802:	f77f aa34 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 8011806:	9904      	ldr	r1, [sp, #16]
 8011808:	0049      	lsls	r1, r1, #1
 801180a:	910c      	str	r1, [sp, #48]	; 0x30
            src_buf += src_stride;
 801180c:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8011810:	930d      	str	r3, [sp, #52]	; 0x34
 8011812:	9b06      	ldr	r3, [sp, #24]
 8011814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011816:	eb03 0942 	add.w	r9, r3, r2, lsl #1
        for(y = 0; y < h; y++) {
 801181a:	f04f 0b00 	mov.w	fp, #0
 801181e:	f8cd b010 	str.w	fp, [sp, #16]
 8011822:	46a3      	mov	fp, r4
 8011824:	4632      	mov	r2, r6
 8011826:	462b      	mov	r3, r5
 8011828:	e128      	b.n	8011a7c <lv_draw_sw_blend_basic+0xe44>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 801182a:	f894 b018 	ldrb.w	fp, [r4, #24]
 801182e:	f8b4 a008 	ldrh.w	sl, [r4, #8]
    switch(blend_mode) {
 8011832:	2e02      	cmp	r6, #2
 8011834:	d034      	beq.n	80118a0 <lv_draw_sw_blend_basic+0xc68>
 8011836:	2e03      	cmp	r6, #3
 8011838:	d034      	beq.n	80118a4 <lv_draw_sw_blend_basic+0xc6c>
 801183a:	2e01      	cmp	r6, #1
 801183c:	f47f aa17 	bne.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            blend_fp = color_blend_true_color_additive;
 8011840:	4f71      	ldr	r7, [pc, #452]	; (8011a08 <lv_draw_sw_blend_basic+0xdd0>)
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011842:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011846:	3301      	adds	r3, #1
 8011848:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801184c:	1a9b      	subs	r3, r3, r2
 801184e:	b21b      	sxth	r3, r3
 8011850:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011852:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011856:	3301      	adds	r3, #1
 8011858:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801185c:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 801185e:	b21b      	sxth	r3, r3
 8011860:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask == NULL) {
 8011862:	9b05      	ldr	r3, [sp, #20]
 8011864:	b303      	cbz	r3, 80118a8 <lv_draw_sw_blend_basic+0xc70>
        last_dest_color = dest_buf[0];
 8011866:	9b06      	ldr	r3, [sp, #24]
 8011868:	f8b3 8000 	ldrh.w	r8, [r3]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 801186c:	9b05      	ldr	r3, [sp, #20]
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	2bfc      	cmp	r3, #252	; 0xfc
 8011872:	bf9a      	itte	ls
 8011874:	fb0b f303 	mulls.w	r3, fp, r3
 8011878:	0a1a      	lsrls	r2, r3, #8
 801187a:	465a      	movhi	r2, fp
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 801187c:	4641      	mov	r1, r8
 801187e:	4650      	mov	r0, sl
 8011880:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 8011882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011884:	2b00      	cmp	r3, #0
 8011886:	f77f a9f2 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 801188a:	9b04      	ldr	r3, [sp, #16]
 801188c:	005b      	lsls	r3, r3, #1
 801188e:	9304      	str	r3, [sp, #16]
 8011890:	9b06      	ldr	r3, [sp, #24]
 8011892:	9a07      	ldr	r2, [sp, #28]
 8011894:	eb03 0942 	add.w	r9, r3, r2, lsl #1
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8011898:	2200      	movs	r2, #0
 801189a:	4641      	mov	r1, r8
 801189c:	4690      	mov	r8, r2
 801189e:	e05e      	b.n	801195e <lv_draw_sw_blend_basic+0xd26>
    switch(blend_mode) {
 80118a0:	4f5a      	ldr	r7, [pc, #360]	; (8011a0c <lv_draw_sw_blend_basic+0xdd4>)
 80118a2:	e7ce      	b.n	8011842 <lv_draw_sw_blend_basic+0xc0a>
            blend_fp = color_blend_true_color_multiply;
 80118a4:	4f5a      	ldr	r7, [pc, #360]	; (8011a10 <lv_draw_sw_blend_basic+0xdd8>)
 80118a6:	e7cc      	b.n	8011842 <lv_draw_sw_blend_basic+0xc0a>
        lv_color_t last_dest_color = dest_buf[0];
 80118a8:	9c06      	ldr	r4, [sp, #24]
 80118aa:	8825      	ldrh	r5, [r4, #0]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 80118ac:	465a      	mov	r2, fp
 80118ae:	8821      	ldrh	r1, [r4, #0]
 80118b0:	4650      	mov	r0, sl
 80118b2:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 80118b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	f77f a9d9 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 80118bc:	9b04      	ldr	r3, [sp, #16]
 80118be:	ea4f 0943 	mov.w	r9, r3, lsl #1
 80118c2:	9b07      	ldr	r3, [sp, #28]
 80118c4:	eb04 0643 	add.w	r6, r4, r3, lsl #1
        for(y = 0; y < h; y++) {
 80118c8:	f04f 0800 	mov.w	r8, #0
 80118cc:	e018      	b.n	8011900 <lv_draw_sw_blend_basic+0xcc8>
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 80118ce:	465a      	mov	r2, fp
 80118d0:	8809      	ldrh	r1, [r1, #0]
 80118d2:	4650      	mov	r0, sl
 80118d4:	47b8      	blx	r7
                dest_buf[x] = last_res_color;
 80118d6:	f824 0c02 	strh.w	r0, [r4, #-2]
            for(x = 0; x < w; x++) {
 80118da:	42b4      	cmp	r4, r6
 80118dc:	d006      	beq.n	80118ec <lv_draw_sw_blend_basic+0xcb4>
                if(last_dest_color.full != dest_buf[x].full) {
 80118de:	4621      	mov	r1, r4
 80118e0:	462b      	mov	r3, r5
 80118e2:	f834 5b02 	ldrh.w	r5, [r4], #2
 80118e6:	429d      	cmp	r5, r3
 80118e8:	d1f1      	bne.n	80118ce <lv_draw_sw_blend_basic+0xc96>
 80118ea:	e7f4      	b.n	80118d6 <lv_draw_sw_blend_basic+0xc9e>
            dest_buf += dest_stride;
 80118ec:	9b06      	ldr	r3, [sp, #24]
 80118ee:	444b      	add	r3, r9
 80118f0:	9306      	str	r3, [sp, #24]
        for(y = 0; y < h; y++) {
 80118f2:	f108 0801 	add.w	r8, r8, #1
 80118f6:	444e      	add	r6, r9
 80118f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118fa:	4543      	cmp	r3, r8
 80118fc:	f43f a9b7 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8011900:	9b07      	ldr	r3, [sp, #28]
 8011902:	2b00      	cmp	r3, #0
 8011904:	ddf2      	ble.n	80118ec <lv_draw_sw_blend_basic+0xcb4>
 8011906:	9c06      	ldr	r4, [sp, #24]
 8011908:	e7e9      	b.n	80118de <lv_draw_sw_blend_basic+0xca6>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 801190a:	2bfc      	cmp	r3, #252	; 0xfc
 801190c:	bf9a      	itte	ls
 801190e:	fb0b f303 	mulls.w	r3, fp, r3
 8011912:	0a1a      	lsrls	r2, r3, #8
 8011914:	465a      	movhi	r2, fp
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8011916:	8821      	ldrh	r1, [r4, #0]
 8011918:	4650      	mov	r0, sl
 801191a:	47b8      	blx	r7
                    last_mask = mask[x];
 801191c:	7832      	ldrb	r2, [r6, #0]
                    last_dest_color.full = dest_buf[x].full;
 801191e:	8821      	ldrh	r1, [r4, #0]
                dest_buf[x] = last_res_color;
 8011920:	8020      	strh	r0, [r4, #0]
            for(x = 0; x < w; x++) {
 8011922:	3402      	adds	r4, #2
 8011924:	454c      	cmp	r4, r9
 8011926:	d00b      	beq.n	8011940 <lv_draw_sw_blend_basic+0xd08>
                if(mask[x] == 0) continue;
 8011928:	3501      	adds	r5, #1
 801192a:	462e      	mov	r6, r5
 801192c:	782b      	ldrb	r3, [r5, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d0f7      	beq.n	8011922 <lv_draw_sw_blend_basic+0xcea>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8011932:	4293      	cmp	r3, r2
 8011934:	d1e9      	bne.n	801190a <lv_draw_sw_blend_basic+0xcd2>
 8011936:	f8b4 c000 	ldrh.w	ip, [r4]
 801193a:	458c      	cmp	ip, r1
 801193c:	d1e5      	bne.n	801190a <lv_draw_sw_blend_basic+0xcd2>
 801193e:	e7ef      	b.n	8011920 <lv_draw_sw_blend_basic+0xce8>
            dest_buf += dest_stride;
 8011940:	9b06      	ldr	r3, [sp, #24]
 8011942:	9c04      	ldr	r4, [sp, #16]
 8011944:	4423      	add	r3, r4
 8011946:	9306      	str	r3, [sp, #24]
            mask += mask_stride;
 8011948:	9b05      	ldr	r3, [sp, #20]
 801194a:	9d08      	ldr	r5, [sp, #32]
 801194c:	442b      	add	r3, r5
 801194e:	9305      	str	r3, [sp, #20]
        for(y = 0; y < h; y++) {
 8011950:	f108 0801 	add.w	r8, r8, #1
 8011954:	44a1      	add	r9, r4
 8011956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011958:	4543      	cmp	r3, r8
 801195a:	f43f a988 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 801195e:	9b07      	ldr	r3, [sp, #28]
 8011960:	2b00      	cmp	r3, #0
 8011962:	dded      	ble.n	8011940 <lv_draw_sw_blend_basic+0xd08>
 8011964:	9b05      	ldr	r3, [sp, #20]
 8011966:	1e5d      	subs	r5, r3, #1
 8011968:	9c06      	ldr	r4, [sp, #24]
 801196a:	e7dd      	b.n	8011928 <lv_draw_sw_blend_basic+0xcf0>
    switch(blend_mode) {
 801196c:	4b27      	ldr	r3, [pc, #156]	; (8011a0c <lv_draw_sw_blend_basic+0xdd4>)
 801196e:	469c      	mov	ip, r3
 8011970:	e71b      	b.n	80117aa <lv_draw_sw_blend_basic+0xb72>
            blend_fp = color_blend_true_color_multiply;
 8011972:	4b27      	ldr	r3, [pc, #156]	; (8011a10 <lv_draw_sw_blend_basic+0xdd8>)
 8011974:	469c      	mov	ip, r3
 8011976:	e718      	b.n	80117aa <lv_draw_sw_blend_basic+0xb72>
        last_dest_color = dest_buf[0];
 8011978:	9b06      	ldr	r3, [sp, #24]
 801197a:	881e      	ldrh	r6, [r3, #0]
        last_src_color = src_buf[0];
 801197c:	9c07      	ldr	r4, [sp, #28]
 801197e:	8827      	ldrh	r7, [r4, #0]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8011980:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8011984:	4642      	mov	r2, r8
 8011986:	4631      	mov	r1, r6
 8011988:	4638      	mov	r0, r7
 801198a:	4665      	mov	r5, ip
 801198c:	47a8      	blx	r5
        for(y = 0; y < h; y++) {
 801198e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011990:	2b00      	cmp	r3, #0
 8011992:	f77f a96c 	ble.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 8011996:	9b04      	ldr	r3, [sp, #16]
 8011998:	005b      	lsls	r3, r3, #1
 801199a:	9304      	str	r3, [sp, #16]
            src_buf += src_stride;
 801199c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80119a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119a2:	eb04 0943 	add.w	r9, r4, r3, lsl #1
        for(y = 0; y < h; y++) {
 80119a6:	f04f 0a00 	mov.w	sl, #0
 80119aa:	f8cd b014 	str.w	fp, [sp, #20]
 80119ae:	46c3      	mov	fp, r8
 80119b0:	463b      	mov	r3, r7
 80119b2:	462f      	mov	r7, r5
 80119b4:	e020      	b.n	80119f8 <lv_draw_sw_blend_basic+0xdc0>
                    last_dest_color = dest_buf[x];
 80119b6:	886e      	ldrh	r6, [r5, #2]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 80119b8:	465a      	mov	r2, fp
 80119ba:	4631      	mov	r1, r6
 80119bc:	4620      	mov	r0, r4
 80119be:	47b8      	blx	r7
                    last_src_color = src_buf[x];
 80119c0:	4623      	mov	r3, r4
                dest_buf[x] = last_res_color;
 80119c2:	f825 0f02 	strh.w	r0, [r5, #2]!
            for(x = 0; x < w; x++) {
 80119c6:	45c8      	cmp	r8, r9
 80119c8:	d007      	beq.n	80119da <lv_draw_sw_blend_basic+0xda2>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 80119ca:	f838 4b02 	ldrh.w	r4, [r8], #2
 80119ce:	429c      	cmp	r4, r3
 80119d0:	d1f1      	bne.n	80119b6 <lv_draw_sw_blend_basic+0xd7e>
 80119d2:	886a      	ldrh	r2, [r5, #2]
 80119d4:	42b2      	cmp	r2, r6
 80119d6:	d1ee      	bne.n	80119b6 <lv_draw_sw_blend_basic+0xd7e>
 80119d8:	e7f3      	b.n	80119c2 <lv_draw_sw_blend_basic+0xd8a>
            dest_buf += dest_stride;
 80119da:	9a06      	ldr	r2, [sp, #24]
 80119dc:	9904      	ldr	r1, [sp, #16]
 80119de:	440a      	add	r2, r1
 80119e0:	9206      	str	r2, [sp, #24]
            src_buf += src_stride;
 80119e2:	9a07      	ldr	r2, [sp, #28]
 80119e4:	9905      	ldr	r1, [sp, #20]
 80119e6:	440a      	add	r2, r1
 80119e8:	9207      	str	r2, [sp, #28]
        for(y = 0; y < h; y++) {
 80119ea:	f10a 0a01 	add.w	sl, sl, #1
 80119ee:	4489      	add	r9, r1
 80119f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119f2:	4552      	cmp	r2, sl
 80119f4:	f43f a93b 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 80119f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80119fa:	2a00      	cmp	r2, #0
 80119fc:	dded      	ble.n	80119da <lv_draw_sw_blend_basic+0xda2>
 80119fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8011a02:	9a06      	ldr	r2, [sp, #24]
 8011a04:	1e95      	subs	r5, r2, #2
 8011a06:	e7e0      	b.n	80119ca <lv_draw_sw_blend_basic+0xd92>
 8011a08:	08010a25 	.word	0x08010a25
 8011a0c:	08010ad1 	.word	0x08010ad1
 8011a10:	08010b71 	.word	0x08010b71
                    last_dest_color = dest_buf[x];
 8011a14:	f8b5 a000 	ldrh.w	sl, [r5]
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8011a18:	4622      	mov	r2, r4
 8011a1a:	4651      	mov	r1, sl
 8011a1c:	4638      	mov	r0, r7
 8011a1e:	47d8      	blx	fp
                    last_src_color = src_buf[x];
 8011a20:	463b      	mov	r3, r7
                dest_buf[x] = last_res_color;
 8011a22:	8028      	strh	r0, [r5, #0]
 8011a24:	4622      	mov	r2, r4
            for(x = 0; x < w; x++) {
 8011a26:	3502      	adds	r5, #2
 8011a28:	3602      	adds	r6, #2
 8011a2a:	454d      	cmp	r5, r9
 8011a2c:	d012      	beq.n	8011a54 <lv_draw_sw_blend_basic+0xe1c>
                if(mask[x] == 0) continue;
 8011a2e:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 8011a32:	2c00      	cmp	r4, #0
 8011a34:	d0f7      	beq.n	8011a26 <lv_draw_sw_blend_basic+0xdee>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8011a36:	2cfc      	cmp	r4, #252	; 0xfc
 8011a38:	bf9d      	ittte	ls
 8011a3a:	9909      	ldrls	r1, [sp, #36]	; 0x24
 8011a3c:	434c      	mulls	r4, r1
 8011a3e:	0a24      	lsrls	r4, r4, #8
 8011a40:	9c09      	ldrhi	r4, [sp, #36]	; 0x24
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8011a42:	8837      	ldrh	r7, [r6, #0]
 8011a44:	429f      	cmp	r7, r3
 8011a46:	d1e5      	bne.n	8011a14 <lv_draw_sw_blend_basic+0xddc>
 8011a48:	8829      	ldrh	r1, [r5, #0]
 8011a4a:	4551      	cmp	r1, sl
 8011a4c:	d1e2      	bne.n	8011a14 <lv_draw_sw_blend_basic+0xddc>
 8011a4e:	4294      	cmp	r4, r2
 8011a50:	d1e0      	bne.n	8011a14 <lv_draw_sw_blend_basic+0xddc>
 8011a52:	e7e6      	b.n	8011a22 <lv_draw_sw_blend_basic+0xdea>
            dest_buf += dest_stride;
 8011a54:	9906      	ldr	r1, [sp, #24]
 8011a56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011a58:	4421      	add	r1, r4
 8011a5a:	9106      	str	r1, [sp, #24]
            src_buf += src_stride;
 8011a5c:	9907      	ldr	r1, [sp, #28]
 8011a5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011a60:	4429      	add	r1, r5
 8011a62:	9107      	str	r1, [sp, #28]
            mask += mask_stride;
 8011a64:	9905      	ldr	r1, [sp, #20]
 8011a66:	9d08      	ldr	r5, [sp, #32]
 8011a68:	4429      	add	r1, r5
 8011a6a:	9105      	str	r1, [sp, #20]
        for(y = 0; y < h; y++) {
 8011a6c:	9904      	ldr	r1, [sp, #16]
 8011a6e:	3101      	adds	r1, #1
 8011a70:	9104      	str	r1, [sp, #16]
 8011a72:	44a1      	add	r9, r4
 8011a74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011a76:	428c      	cmp	r4, r1
 8011a78:	f43f a8f9 	beq.w	8010c6e <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8011a7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a7e:	2900      	cmp	r1, #0
 8011a80:	dde8      	ble.n	8011a54 <lv_draw_sw_blend_basic+0xe1c>
 8011a82:	9905      	ldr	r1, [sp, #20]
 8011a84:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8011a88:	9d06      	ldr	r5, [sp, #24]
 8011a8a:	9e07      	ldr	r6, [sp, #28]
 8011a8c:	e7cf      	b.n	8011a2e <lv_draw_sw_blend_basic+0xdf6>
                for(; x <= x_end4; x += 4) {
 8011a8e:	4288      	cmp	r0, r1
 8011a90:	da04      	bge.n	8011a9c <lv_draw_sw_blend_basic+0xe64>
 8011a92:	e44b      	b.n	801132c <lv_draw_sw_blend_basic+0x6f4>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8011a94:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
 8011a96:	4288      	cmp	r0, r1
 8011a98:	f6ff ac6d 	blt.w	8011376 <lv_draw_sw_blend_basic+0x73e>
 8011a9c:	46f0      	mov	r8, lr
 8011a9e:	f102 0308 	add.w	r3, r2, #8
 8011aa2:	f7ff bbbf 	b.w	8011224 <lv_draw_sw_blend_basic+0x5ec>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8011aa6:	2eff      	cmp	r6, #255	; 0xff
 8011aa8:	d035      	beq.n	8011b16 <lv_draw_sw_blend_basic+0xede>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8011aaa:	46dc      	mov	ip, fp
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011aac:	8813      	ldrh	r3, [r2, #0]
 8011aae:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011ab2:	ea03 0309 	and.w	r3, r3, r9
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011ab6:	9e04      	ldr	r6, [sp, #16]
 8011ab8:	1af6      	subs	r6, r6, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011aba:	f10c 0e04 	add.w	lr, ip, #4
 8011abe:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011ac2:	fb0e f606 	mul.w	r6, lr, r6
 8011ac6:	eb03 1356 	add.w	r3, r3, r6, lsr #5
 8011aca:	ea03 0309 	and.w	r3, r3, r9
    ret.full = (uint16_t)((result >> 16) | result);
 8011ace:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
 8011ad2:	b29b      	uxth	r3, r3
                            last_dest_color.full = dest_buf[x].full;
 8011ad4:	f8b2 e000 	ldrh.w	lr, [r2]
                            last_mask = *mask;
 8011ad8:	460e      	mov	r6, r1
                        dest_buf[x] = last_res_color;
 8011ada:	8013      	strh	r3, [r2, #0]
                for(x = 0; x < w; x++) {
 8011adc:	3202      	adds	r2, #2
 8011ade:	4297      	cmp	r7, r2
 8011ae0:	f43f ac87 	beq.w	80113f2 <lv_draw_sw_blend_basic+0x7ba>
                    if(*mask) {
 8011ae4:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8011ae8:	2900      	cmp	r1, #0
 8011aea:	d0f7      	beq.n	8011adc <lv_draw_sw_blend_basic+0xea4>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8011aec:	42b1      	cmp	r1, r6
 8011aee:	f43f ac73 	beq.w	80113d8 <lv_draw_sw_blend_basic+0x7a0>
 8011af2:	29ff      	cmp	r1, #255	; 0xff
 8011af4:	d0d7      	beq.n	8011aa6 <lv_draw_sw_blend_basic+0xe6e>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 8011af6:	fb0b fc01 	mul.w	ip, fp, r1
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8011afa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 8011afe:	e7d5      	b.n	8011aac <lv_draw_sw_blend_basic+0xe74>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8011b00:	9e05      	ldr	r6, [sp, #20]
 8011b02:	2300      	movs	r3, #0
                for(; x < x_end4; x += 4) {
 8011b04:	4598      	cmp	r8, r3
 8011b06:	f77f aded 	ble.w	80116e4 <lv_draw_sw_blend_basic+0xaac>
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	eb0c 0043 	add.w	r0, ip, r3, lsl #1
 8011b10:	eb0e 0243 	add.w	r2, lr, r3, lsl #1
 8011b14:	e526      	b.n	8011564 <lv_draw_sw_blend_basic+0x92c>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8011b16:	f8b2 c000 	ldrh.w	ip, [r2]
 8011b1a:	45f4      	cmp	ip, lr
 8011b1c:	f47f ac67 	bne.w	80113ee <lv_draw_sw_blend_basic+0x7b6>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8011b20:	46dc      	mov	ip, fp
 8011b22:	e7da      	b.n	8011ada <lv_draw_sw_blend_basic+0xea2>

08011b24 <find_oldest_item_life>:
}

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
    uint32_t * min_life = (uint32_t *)ctx;
    if(c->life < *min_life) *min_life = c->life;
 8011b24:	6843      	ldr	r3, [r0, #4]
 8011b26:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8011b2a:	680a      	ldr	r2, [r1, #0]
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	bf38      	it	cc
 8011b30:	600b      	strcc	r3, [r1, #0]
    return LV_RES_INV;
}
 8011b32:	2000      	movs	r0, #0
 8011b34:	4770      	bx	lr

08011b36 <find_item>:
}

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
    uint32_t * k = (uint32_t *)ctx;
    if(c->key == *k) return LV_RES_OK;
 8011b36:	6800      	ldr	r0, [r0, #0]
 8011b38:	680b      	ldr	r3, [r1, #0]
    return LV_RES_INV;
}
 8011b3a:	4298      	cmp	r0, r3
 8011b3c:	bf14      	ite	ne
 8011b3e:	2000      	movne	r0, #0
 8011b40:	2001      	moveq	r0, #1
 8011b42:	4770      	bx	lr

08011b44 <iterate_cache>:
{
 8011b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(grad_cache_size == 0) return NULL;
 8011b48:	4b19      	ldr	r3, [pc, #100]	; (8011bb0 <iterate_cache+0x6c>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	b363      	cbz	r3, 8011ba8 <iterate_cache+0x64>
 8011b4e:	4605      	mov	r5, r0
 8011b50:	460e      	mov	r6, r1
 8011b52:	4691      	mov	r9, r2
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 8011b54:	4b17      	ldr	r3, [pc, #92]	; (8011bb4 <iterate_cache+0x70>)
 8011b56:	681c      	ldr	r4, [r3, #0]
    while(first != NULL && first->life) {
 8011b58:	b1e4      	cbz	r4, 8011b94 <iterate_cache+0x50>
    if(grad_cache_size == 0) return NULL;
 8011b5a:	4f15      	ldr	r7, [pc, #84]	; (8011bb0 <iterate_cache+0x6c>)
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8011b5c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011bb8 <iterate_cache+0x74>
    while(first != NULL && first->life) {
 8011b60:	6863      	ldr	r3, [r4, #4]
 8011b62:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8011b66:	d01d      	beq.n	8011ba4 <iterate_cache+0x60>
        if((*func)(first, ctx) == LV_RES_OK) {
 8011b68:	4631      	mov	r1, r6
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	47a8      	blx	r5
 8011b6e:	2801      	cmp	r0, #1
 8011b70:	d012      	beq.n	8011b98 <iterate_cache+0x54>
    if(grad_cache_size == 0) return NULL;
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	b1d3      	cbz	r3, 8011bac <iterate_cache+0x68>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8011b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	3303      	adds	r3, #3
 8011b7e:	f023 0303 	bic.w	r3, r3, #3
 8011b82:	3310      	adds	r3, #16
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8011b84:	441c      	add	r4, r3
 8011b86:	f8d8 3000 	ldr.w	r3, [r8]
 8011b8a:	429c      	cmp	r4, r3
 8011b8c:	d3e8      	bcc.n	8011b60 <iterate_cache+0x1c>
    return LV_RES_INV;
 8011b8e:	2000      	movs	r0, #0
}
 8011b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_RES_INV;
 8011b94:	2000      	movs	r0, #0
 8011b96:	e7fb      	b.n	8011b90 <iterate_cache+0x4c>
            if(out != NULL) *out = first;
 8011b98:	f1b9 0f00 	cmp.w	r9, #0
 8011b9c:	d0f8      	beq.n	8011b90 <iterate_cache+0x4c>
 8011b9e:	f8c9 4000 	str.w	r4, [r9]
 8011ba2:	e7f5      	b.n	8011b90 <iterate_cache+0x4c>
    return LV_RES_INV;
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	e7f3      	b.n	8011b90 <iterate_cache+0x4c>
 8011ba8:	2000      	movs	r0, #0
 8011baa:	e7f1      	b.n	8011b90 <iterate_cache+0x4c>
 8011bac:	2000      	movs	r0, #0
 8011bae:	e7ef      	b.n	8011b90 <iterate_cache+0x4c>
 8011bb0:	2000256c 	.word	0x2000256c
 8011bb4:	20002874 	.word	0x20002874
 8011bb8:	20002568 	.word	0x20002568

08011bbc <kill_oldest_item>:
{
 8011bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(c->life == *min_life) {
 8011bbe:	6843      	ldr	r3, [r0, #4]
 8011bc0:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8011bc4:	680a      	ldr	r2, [r1, #0]
 8011bc6:	4293      	cmp	r3, r2
    return LV_RES_INV;
 8011bc8:	bf18      	it	ne
 8011bca:	2000      	movne	r0, #0
    if(c->life == *min_life) {
 8011bcc:	d000      	beq.n	8011bd0 <kill_oldest_item+0x14>
}
 8011bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bd0:	4604      	mov	r4, r0
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8011bd2:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 8011bd6:	006d      	lsls	r5, r5, #1
 8011bd8:	3503      	adds	r5, #3
 8011bda:	f025 0503 	bic.w	r5, r5, #3
 8011bde:	f105 0710 	add.w	r7, r5, #16
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 8011be2:	4a15      	ldr	r2, [pc, #84]	; (8011c38 <kill_oldest_item+0x7c>)
 8011be4:	6813      	ldr	r3, [r2, #0]
 8011be6:	1a1e      	subs	r6, r3, r0
    grad_cache_end -= size;
 8011be8:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 8011bec:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8011bf0:	35f0      	adds	r5, #240	; 0xf0
 8011bf2:	442b      	add	r3, r5
 8011bf4:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 8011bf6:	1bf6      	subs	r6, r6, r7
 8011bf8:	d101      	bne.n	8011bfe <kill_oldest_item+0x42>
        return LV_RES_OK;
 8011bfa:	2001      	movs	r0, #1
 8011bfc:	e7e7      	b.n	8011bce <kill_oldest_item+0x12>
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 8011bfe:	4632      	mov	r2, r6
 8011c00:	19c1      	adds	r1, r0, r7
 8011c02:	f00f ff1b 	bl	8021a3c <lv_memcpy>
        while((uint8_t *)c != grad_cache_end) {
 8011c06:	4b0c      	ldr	r3, [pc, #48]	; (8011c38 <kill_oldest_item+0x7c>)
 8011c08:	6819      	ldr	r1, [r3, #0]
 8011c0a:	428c      	cmp	r4, r1
 8011c0c:	d00d      	beq.n	8011c2a <kill_oldest_item+0x6e>
 8011c0e:	4622      	mov	r2, r4
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 8011c10:	6893      	ldr	r3, [r2, #8]
 8011c12:	442b      	add	r3, r5
 8011c14:	6093      	str	r3, [r2, #8]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8011c16:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8011c1a:	005b      	lsls	r3, r3, #1
 8011c1c:	3303      	adds	r3, #3
 8011c1e:	f023 0303 	bic.w	r3, r3, #3
 8011c22:	3310      	adds	r3, #16
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 8011c24:	441a      	add	r2, r3
        while((uint8_t *)c != grad_cache_end) {
 8011c26:	4291      	cmp	r1, r2
 8011c28:	d1f2      	bne.n	8011c10 <kill_oldest_item+0x54>
        lv_memset_00(old + next_items_size, size);
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	19a0      	adds	r0, r4, r6
 8011c2e:	f010 f89b 	bl	8021d68 <lv_memset_00>
        return LV_RES_OK;
 8011c32:	2001      	movs	r0, #1
 8011c34:	e7cb      	b.n	8011bce <kill_oldest_item+0x12>
 8011c36:	bf00      	nop
 8011c38:	20002568 	.word	0x20002568

08011c3c <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4604      	mov	r4, r0
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8011c40:	4d08      	ldr	r5, [pc, #32]	; (8011c64 <lv_gradient_set_cache_size+0x28>)
 8011c42:	6828      	ldr	r0, [r5, #0]
 8011c44:	f00f fe2e 	bl	80218a4 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f00f fe0d 	bl	8021868 <lv_mem_alloc>
 8011c4e:	6028      	str	r0, [r5, #0]
 8011c50:	4b05      	ldr	r3, [pc, #20]	; (8011c68 <lv_gradient_set_cache_size+0x2c>)
 8011c52:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8011c54:	b128      	cbz	r0, 8011c62 <lv_gradient_set_cache_size+0x26>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 8011c56:	4621      	mov	r1, r4
 8011c58:	f010 f886 	bl	8021d68 <lv_memset_00>
    grad_cache_size = max_bytes;
 8011c5c:	4b03      	ldr	r3, [pc, #12]	; (8011c6c <lv_gradient_set_cache_size+0x30>)
 8011c5e:	601c      	str	r4, [r3, #0]
}
 8011c60:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8011c62:	e7fe      	b.n	8011c62 <lv_gradient_set_cache_size+0x26>
 8011c64:	20002874 	.word	0x20002874
 8011c68:	20002568 	.word	0x20002568
 8011c6c:	2000256c 	.word	0x2000256c

08011c70 <lv_gradient_calculate>:
                                                            lv_coord_t frac)
{
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 8011c70:	7883      	ldrb	r3, [r0, #2]
 8011c72:	fb01 f303 	mul.w	r3, r1, r3
    if(frac <= min) {
 8011c76:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 8011c7a:	dd1b      	ble.n	8011cb4 <lv_gradient_calculate+0x44>
{
 8011c7c:	b570      	push	{r4, r5, r6, lr}
 8011c7e:	121d      	asrs	r5, r3, #8
        GRAD_CONV(tmp, dsc->stops[0].color);
        return tmp;
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 8011c80:	7a06      	ldrb	r6, [r0, #8]
 8011c82:	1e74      	subs	r4, r6, #1
 8011c84:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8011c88:	789b      	ldrb	r3, [r3, #2]
 8011c8a:	fb01 f303 	mul.w	r3, r1, r3
    if(frac >= max) {
 8011c8e:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 8011c92:	da20      	bge.n	8011cd6 <lv_gradient_calculate+0x66>
        return tmp;
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8011c94:	2e01      	cmp	r6, #1
    int32_t d = 0;
 8011c96:	bf98      	it	ls
 8011c98:	2100      	movls	r1, #0
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8011c9a:	d908      	bls.n	8011cae <lv_gradient_calculate+0x3e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 8011c9c:	7983      	ldrb	r3, [r0, #6]
 8011c9e:	fb01 f303 	mul.w	r3, r1, r3
 8011ca2:	121c      	asrs	r4, r3, #8
        if(frac <= cur) {
 8011ca4:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t d = 0;
 8011ca8:	bfc8      	it	gt
 8011caa:	2100      	movgt	r1, #0
        if(frac <= cur) {
 8011cac:	dd28      	ble.n	8011d00 <lv_gradient_calculate+0x90>
            d = max - min;
            break;
        }
    }

    LV_ASSERT(d != 0);
 8011cae:	2900      	cmp	r1, #0
 8011cb0:	d179      	bne.n	8011da6 <lv_gradient_calculate+0x136>
 8011cb2:	e7fe      	b.n	8011cb2 <lv_gradient_calculate+0x42>
        GRAD_CONV(tmp, dsc->stops[0].color);
 8011cb4:	8802      	ldrh	r2, [r0, #0]
 8011cb6:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8011cba:	7843      	ldrb	r3, [r0, #1]
 8011cbc:	08db      	lsrs	r3, r3, #3
 8011cbe:	7801      	ldrb	r1, [r0, #0]
 8011cc0:	f3c1 0104 	ubfx	r1, r1, #0, #5
        return tmp;
 8011cc4:	f04f 0000 	mov.w	r0, #0
 8011cc8:	f361 0004 	bfi	r0, r1, #0, #5
 8011ccc:	f362 104a 	bfi	r0, r2, #5, #6
 8011cd0:	f363 20cf 	bfi	r0, r3, #11, #5

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
}
 8011cd4:	4770      	bx	lr
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 8011cd6:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8011cda:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8011cde:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8011ce2:	785b      	ldrb	r3, [r3, #1]
 8011ce4:	08db      	lsrs	r3, r3, #3
 8011ce6:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
 8011cea:	f3c1 0104 	ubfx	r1, r1, #0, #5
        return tmp;
 8011cee:	f04f 0000 	mov.w	r0, #0
 8011cf2:	f361 0004 	bfi	r0, r1, #0, #5
 8011cf6:	f362 104a 	bfi	r0, r2, #5, #6
 8011cfa:	f363 20cf 	bfi	r0, r3, #11, #5
}
 8011cfe:	bd70      	pop	{r4, r5, r6, pc}
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 8011d00:	7803      	ldrb	r3, [r0, #0]
 8011d02:	f003 031f 	and.w	r3, r3, #31
 8011d06:	8805      	ldrh	r5, [r0, #0]
 8011d08:	f3c5 1545 	ubfx	r5, r5, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8011d0c:	f890 c001 	ldrb.w	ip, [r0, #1]
 8011d10:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8011d14:	eb0c 1e4c 	add.w	lr, ip, ip, lsl #5
 8011d18:	ebcc 0ece 	rsb	lr, ip, lr, lsl #3
 8011d1c:	f10e 0e07 	add.w	lr, lr, #7
 8011d20:	ea4f 1e6e 	mov.w	lr, lr, asr #5
 8011d24:	f04f 0c00 	mov.w	ip, #0
 8011d28:	f36e 4c17 	bfi	ip, lr, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8011d2c:	eb05 16c5 	add.w	r6, r5, r5, lsl #7
 8011d30:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 8011d34:	3503      	adds	r5, #3
 8011d36:	11ad      	asrs	r5, r5, #6
 8011d38:	f365 2c0f 	bfi	ip, r5, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8011d3c:	eb03 1543 	add.w	r5, r3, r3, lsl #5
 8011d40:	ebc3 03c5 	rsb	r3, r3, r5, lsl #3
 8011d44:	3307      	adds	r3, #7
 8011d46:	115b      	asrs	r3, r3, #5
 8011d48:	f363 0c07 	bfi	ip, r3, #0, #8
 8011d4c:	f04c 4c7f 	orr.w	ip, ip, #4278190080	; 0xff000000
            two.full = lv_color_to32(dsc->stops[i].color);
 8011d50:	7903      	ldrb	r3, [r0, #4]
 8011d52:	f003 031f 	and.w	r3, r3, #31
 8011d56:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 8011d5a:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8011d5e:	7945      	ldrb	r5, [r0, #5]
 8011d60:	08ed      	lsrs	r5, r5, #3
 8011d62:	eb05 1645 	add.w	r6, r5, r5, lsl #5
 8011d66:	ebc5 05c6 	rsb	r5, r5, r6, lsl #3
 8011d6a:	3507      	adds	r5, #7
 8011d6c:	116d      	asrs	r5, r5, #5
 8011d6e:	2600      	movs	r6, #0
 8011d70:	f365 4617 	bfi	r6, r5, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8011d74:	eb0e 15ce 	add.w	r5, lr, lr, lsl #7
 8011d78:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
 8011d7c:	3503      	adds	r5, #3
 8011d7e:	11ad      	asrs	r5, r5, #6
 8011d80:	f365 260f 	bfi	r6, r5, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8011d84:	eb03 1543 	add.w	r5, r3, r3, lsl #5
 8011d88:	ebc3 03c5 	rsb	r3, r3, r5, lsl #3
 8011d8c:	3307      	adds	r3, #7
 8011d8e:	115b      	asrs	r3, r3, #5
 8011d90:	f363 0607 	bfi	r6, r3, #0, #8
 8011d94:	f046 4e7f 	orr.w	lr, r6, #4278190080	; 0xff000000
            min = (dsc->stops[i - 1].frac * range) >> 8;
 8011d98:	7883      	ldrb	r3, [r0, #2]
 8011d9a:	fb03 f101 	mul.w	r1, r3, r1
 8011d9e:	120d      	asrs	r5, r1, #8
            d = max - min;
 8011da0:	eba4 2121 	sub.w	r1, r4, r1, asr #8
            break;
 8011da4:	e783      	b.n	8011cae <lv_gradient_calculate+0x3e>
    frac -= min;
 8011da6:	1b53      	subs	r3, r2, r5
    lv_opa_t mix = (frac * 255) / d;
 8011da8:	b21b      	sxth	r3, r3
 8011daa:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8011dae:	fb93 f3f1 	sdiv	r3, r3, r1
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8011db2:	b2d8      	uxtb	r0, r3
    lv_opa_t imix = 255 - mix;
 8011db4:	43db      	mvns	r3, r3
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	f3ce 2107 	ubfx	r1, lr, #8, #8
 8011dbc:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8011dc0:	fb03 f202 	mul.w	r2, r3, r2
 8011dc4:	fb00 2201 	mla	r2, r0, r1, r2
 8011dc8:	eb02 2102 	add.w	r1, r2, r2, lsl #8
 8011dcc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8011dd0:	f3c2 6145 	ubfx	r1, r2, #25, #6
 8011dd4:	f3ce 4407 	ubfx	r4, lr, #16, #8
 8011dd8:	f3cc 4207 	ubfx	r2, ip, #16, #8
 8011ddc:	fb03 f202 	mul.w	r2, r3, r2
 8011de0:	fb00 2204 	mla	r2, r0, r4, r2
 8011de4:	eb02 2402 	add.w	r4, r2, r2, lsl #8
 8011de8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8011dec:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8011df0:	fa5f fe8e 	uxtb.w	lr, lr
 8011df4:	fa5f fc8c 	uxtb.w	ip, ip
 8011df8:	fb03 f30c 	mul.w	r3, r3, ip
 8011dfc:	fb00 330e 	mla	r3, r0, lr, r3
 8011e00:	eb03 2003 	add.w	r0, r3, r3, lsl #8
 8011e04:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
 8011e08:	0e9b      	lsrs	r3, r3, #26
    return r;
 8011e0a:	f04f 0000 	mov.w	r0, #0
 8011e0e:	f363 0004 	bfi	r0, r3, #0, #5
 8011e12:	f361 104a 	bfi	r0, r1, #5, #6
 8011e16:	f362 20cf 	bfi	r0, r2, #11, #5
 8011e1a:	e770      	b.n	8011cfe <lv_gradient_calculate+0x8e>

08011e1c <lv_gradient_get>:
{
 8011e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e20:	b085      	sub	sp, #20
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8011e22:	7a43      	ldrb	r3, [r0, #9]
 8011e24:	f013 0f07 	tst.w	r3, #7
 8011e28:	f000 80b0 	beq.w	8011f8c <lv_gradient_get+0x170>
 8011e2c:	4680      	mov	r8, r0
 8011e2e:	460c      	mov	r4, r1
 8011e30:	4615      	mov	r5, r2
    if(!inited) {
 8011e32:	4b57      	ldr	r3, [pc, #348]	; (8011f90 <lv_gradient_get+0x174>)
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d064      	beq.n	8011f04 <lv_gradient_get+0xe8>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8011e3a:	f898 2009 	ldrb.w	r2, [r8, #9]
 8011e3e:	f002 0207 	and.w	r2, r2, #7
 8011e42:	2a02      	cmp	r2, #2
 8011e44:	bf0c      	ite	eq
 8011e46:	4623      	moveq	r3, r4
 8011e48:	462b      	movne	r3, r5
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8011e4a:	ea88 0964 	eor.w	r9, r8, r4, asr #1
 8011e4e:	ea83 0309 	eor.w	r3, r3, r9
    uint32_t key = compute_key(g, size, w);
 8011e52:	9303      	str	r3, [sp, #12]
    lv_grad_t * item = NULL;
 8011e54:	2300      	movs	r3, #0
 8011e56:	9302      	str	r3, [sp, #8]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 8011e58:	aa02      	add	r2, sp, #8
 8011e5a:	a903      	add	r1, sp, #12
 8011e5c:	484d      	ldr	r0, [pc, #308]	; (8011f94 <lv_gradient_get+0x178>)
 8011e5e:	f7ff fe71 	bl	8011b44 <iterate_cache>
 8011e62:	2801      	cmp	r0, #1
 8011e64:	d055      	beq.n	8011f12 <lv_gradient_get+0xf6>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 8011e66:	f898 3009 	ldrb.w	r3, [r8, #9]
 8011e6a:	f003 0307 	and.w	r3, r3, #7
 8011e6e:	2b02      	cmp	r3, #2
 8011e70:	bf0c      	ite	eq
 8011e72:	4626      	moveq	r6, r4
 8011e74:	462e      	movne	r6, r5
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 8011e76:	42a5      	cmp	r5, r4
 8011e78:	bfb8      	it	lt
 8011e7a:	4625      	movlt	r5, r4
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8011e7c:	006f      	lsls	r7, r5, #1
 8011e7e:	3703      	adds	r7, #3
 8011e80:	f027 0703 	bic.w	r7, r7, #3
 8011e84:	3710      	adds	r7, #16
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8011e86:	4b44      	ldr	r3, [pc, #272]	; (8011f98 <lv_gradient_get+0x17c>)
 8011e88:	681c      	ldr	r4, [r3, #0]
 8011e8a:	4b44      	ldr	r3, [pc, #272]	; (8011f9c <lv_gradient_get+0x180>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	1ae3      	subs	r3, r4, r3
    if(req_size + act_size < grad_cache_size) {
 8011e90:	443b      	add	r3, r7
 8011e92:	4a43      	ldr	r2, [pc, #268]	; (8011fa0 <lv_gradient_get+0x184>)
 8011e94:	6812      	ldr	r2, [r2, #0]
 8011e96:	4293      	cmp	r3, r2
 8011e98:	d242      	bcs.n	8011f20 <lv_gradient_get+0x104>
        item->not_cached = 0;
 8011e9a:	79e3      	ldrb	r3, [r4, #7]
 8011e9c:	f36f 13c7 	bfc	r3, #7, #1
 8011ea0:	71e3      	strb	r3, [r4, #7]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8011ea2:	ea86 0309 	eor.w	r3, r6, r9
    item->key = compute_key(g, size, w);
 8011ea6:	6023      	str	r3, [r4, #0]
    item->life = 1;
 8011ea8:	6863      	ldr	r3, [r4, #4]
 8011eaa:	2201      	movs	r2, #1
 8011eac:	f362 031d 	bfi	r3, r2, #0, #30
 8011eb0:	6063      	str	r3, [r4, #4]
    item->filled = 0;
 8011eb2:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8011eb6:	f36f 1386 	bfc	r3, #6, #1
 8011eba:	71e3      	strb	r3, [r4, #7]
    item->alloc_size = map_size;
 8011ebc:	81a5      	strh	r5, [r4, #12]
    item->size = size;
 8011ebe:	81e6      	strh	r6, [r4, #14]
    if(item->not_cached) {
 8011ec0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011ec4:	d15e      	bne.n	8011f84 <lv_gradient_get+0x168>
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 8011ec6:	4a34      	ldr	r2, [pc, #208]	; (8011f98 <lv_gradient_get+0x17c>)
 8011ec8:	6813      	ldr	r3, [r2, #0]
 8011eca:	f103 0110 	add.w	r1, r3, #16
 8011ece:	60a1      	str	r1, [r4, #8]
        grad_cache_end += req_size;
 8011ed0:	443b      	add	r3, r7
 8011ed2:	6013      	str	r3, [r2, #0]
    item = allocate_item(g, w, h);
 8011ed4:	9402      	str	r4, [sp, #8]
    for(lv_coord_t i = 0; i < item->size; i++) {
 8011ed6:	2e00      	cmp	r6, #0
 8011ed8:	dd10      	ble.n	8011efc <lv_gradient_get+0xe0>
 8011eda:	2500      	movs	r5, #0
 8011edc:	b22f      	sxth	r7, r5
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 8011ede:	463a      	mov	r2, r7
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	4640      	mov	r0, r8
 8011ee4:	f7ff fec4 	bl	8011c70 <lv_gradient_calculate>
 8011ee8:	68a3      	ldr	r3, [r4, #8]
 8011eea:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
    for(lv_coord_t i = 0; i < item->size; i++) {
 8011eee:	9c02      	ldr	r4, [sp, #8]
 8011ef0:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 8011ef4:	3501      	adds	r5, #1
 8011ef6:	b22b      	sxth	r3, r5
 8011ef8:	429e      	cmp	r6, r3
 8011efa:	dcef      	bgt.n	8011edc <lv_gradient_get+0xc0>
}
 8011efc:	4620      	mov	r0, r4
 8011efe:	b005      	add	sp, #20
 8011f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 8011f04:	2000      	movs	r0, #0
 8011f06:	f7ff fe99 	bl	8011c3c <lv_gradient_set_cache_size>
        inited = true;
 8011f0a:	4b21      	ldr	r3, [pc, #132]	; (8011f90 <lv_gradient_get+0x174>)
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	701a      	strb	r2, [r3, #0]
 8011f10:	e793      	b.n	8011e3a <lv_gradient_get+0x1e>
        item->life++; /* Don't forget to bump the counter */
 8011f12:	9c02      	ldr	r4, [sp, #8]
 8011f14:	6863      	ldr	r3, [r4, #4]
 8011f16:	1c5a      	adds	r2, r3, #1
 8011f18:	f362 031d 	bfi	r3, r2, #0, #30
 8011f1c:	6063      	str	r3, [r4, #4]
        return item;
 8011f1e:	e7ed      	b.n	8011efc <lv_gradient_get+0xe0>
        if(req_size <= grad_cache_size) {
 8011f20:	4297      	cmp	r7, r2
 8011f22:	d824      	bhi.n	8011f6e <lv_gradient_get+0x152>
            while(act_size + req_size > grad_cache_size) {
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d91b      	bls.n	8011f60 <lv_gradient_get+0x144>
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8011f28:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011fa4 <lv_gradient_get+0x188>
 8011f2c:	2400      	movs	r4, #0
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8011f2e:	f8df a078 	ldr.w	sl, [pc, #120]	; 8011fa8 <lv_gradient_get+0x18c>
                uint32_t oldest_life = UINT32_MAX;
 8011f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f36:	9301      	str	r3, [sp, #4]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 8011f38:	4622      	mov	r2, r4
 8011f3a:	a901      	add	r1, sp, #4
 8011f3c:	4658      	mov	r0, fp
 8011f3e:	f7ff fe01 	bl	8011b44 <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8011f42:	4622      	mov	r2, r4
 8011f44:	a901      	add	r1, sp, #4
 8011f46:	4650      	mov	r0, sl
 8011f48:	f7ff fdfc 	bl	8011b44 <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8011f4c:	4b12      	ldr	r3, [pc, #72]	; (8011f98 <lv_gradient_get+0x17c>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a12      	ldr	r2, [pc, #72]	; (8011f9c <lv_gradient_get+0x180>)
 8011f52:	6812      	ldr	r2, [r2, #0]
 8011f54:	1a9b      	subs	r3, r3, r2
            while(act_size + req_size > grad_cache_size) {
 8011f56:	443b      	add	r3, r7
 8011f58:	4a11      	ldr	r2, [pc, #68]	; (8011fa0 <lv_gradient_get+0x184>)
 8011f5a:	6812      	ldr	r2, [r2, #0]
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d8e8      	bhi.n	8011f32 <lv_gradient_get+0x116>
            item = (lv_grad_t *)grad_cache_end;
 8011f60:	4b0d      	ldr	r3, [pc, #52]	; (8011f98 <lv_gradient_get+0x17c>)
 8011f62:	681c      	ldr	r4, [r3, #0]
            item->not_cached = 0;
 8011f64:	79e3      	ldrb	r3, [r4, #7]
 8011f66:	f36f 13c7 	bfc	r3, #7, #1
 8011f6a:	71e3      	strb	r3, [r4, #7]
 8011f6c:	e799      	b.n	8011ea2 <lv_gradient_get+0x86>
            item = lv_mem_alloc(req_size);
 8011f6e:	4638      	mov	r0, r7
 8011f70:	f00f fc7a 	bl	8021868 <lv_mem_alloc>
            LV_ASSERT_MALLOC(item);
 8011f74:	4604      	mov	r4, r0
 8011f76:	b120      	cbz	r0, 8011f82 <lv_gradient_get+0x166>
            item->not_cached = 1;
 8011f78:	79c3      	ldrb	r3, [r0, #7]
 8011f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f7e:	71c3      	strb	r3, [r0, #7]
 8011f80:	e78f      	b.n	8011ea2 <lv_gradient_get+0x86>
            LV_ASSERT_MALLOC(item);
 8011f82:	e7fe      	b.n	8011f82 <lv_gradient_get+0x166>
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8011f84:	f104 0310 	add.w	r3, r4, #16
 8011f88:	60a3      	str	r3, [r4, #8]
 8011f8a:	e7a3      	b.n	8011ed4 <lv_gradient_get+0xb8>
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8011f8c:	2400      	movs	r4, #0
 8011f8e:	e7b5      	b.n	8011efc <lv_gradient_get+0xe0>
 8011f90:	20002570 	.word	0x20002570
 8011f94:	08011b37 	.word	0x08011b37
 8011f98:	20002568 	.word	0x20002568
 8011f9c:	20002874 	.word	0x20002874
 8011fa0:	2000256c 	.word	0x2000256c
 8011fa4:	08011b25 	.word	0x08011b25
 8011fa8:	08011bbd 	.word	0x08011bbd

08011fac <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 8011fac:	b508      	push	{r3, lr}
    if(grad->not_cached) {
 8011fae:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	db00      	blt.n	8011fb8 <lv_gradient_cleanup+0xc>
        lv_mem_free(grad);
    }
}
 8011fb6:	bd08      	pop	{r3, pc}
        lv_mem_free(grad);
 8011fb8:	f00f fc74 	bl	80218a4 <lv_mem_free>
}
 8011fbc:	e7fb      	b.n	8011fb6 <lv_gradient_cleanup+0xa>

08011fbe <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 8011fbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc2:	b0ab      	sub	sp, #172	; 0xac
 8011fc4:	9007      	str	r0, [sp, #28]
 8011fc6:	4689      	mov	r9, r1
 8011fc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8011fca:	9311      	str	r3, [sp, #68]	; 0x44
 8011fcc:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
 8011fd0:	9308      	str	r3, [sp, #32]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 8011fd2:	6883      	ldr	r3, [r0, #8]
    dest->x1 = src->x1;
 8011fd4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011fd8:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
    dest->y1 = src->y1;
 8011fdc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011fe0:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
    dest->x2 = src->x2;
 8011fe4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011fe8:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    dest->y2 = src->y2;
 8011fec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8011ff0:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 8011ff4:	a828      	add	r0, sp, #160	; 0xa0
 8011ff6:	f7fc fd0b 	bl	800ea10 <lv_draw_mask_is_any>
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	900f      	str	r0, [sp, #60]	; 0x3c
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 8011ffe:	f8d9 5000 	ldr.w	r5, [r9]
 8012002:	950e      	str	r5, [sp, #56]	; 0x38

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8012004:	211c      	movs	r1, #28
 8012006:	a81f      	add	r0, sp, #124	; 0x7c
 8012008:	f00f feae 	bl	8021d68 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 801200c:	f899 300b 	ldrb.w	r3, [r9, #11]
 8012010:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 8012014:	f899 300c 	ldrb.w	r3, [r9, #12]
 8012018:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801201c:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
    blend_dsc.blend_area = &blend_area;
 8012020:	ab26      	add	r3, sp, #152	; 0x98
 8012022:	931f      	str	r3, [sp, #124]	; 0x7c

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8012024:	b914      	cbnz	r4, 801202c <lv_draw_sw_img_decoded+0x6e>
 8012026:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 801202a:	d06b      	beq.n	8012104 <lv_draw_sw_img_decoded+0x146>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 801202c:	9b07      	ldr	r3, [sp, #28]
 801202e:	689a      	ldr	r2, [r3, #8]
 8012030:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012034:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
        blend_area.x2 = draw_ctx->clip_area->x2;
 8012038:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801203c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        blend_area.y1 = draw_ctx->clip_area->y1;
 8012040:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012044:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
        blend_area.y2 = draw_ctx->clip_area->y2;
 8012048:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 801204c:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012050:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012052:	88aa      	ldrh	r2, [r5, #4]
 8012054:	8828      	ldrh	r0, [r5, #0]
 8012056:	1a12      	subs	r2, r2, r0
 8012058:	b292      	uxth	r2, r2
 801205a:	9217      	str	r2, [sp, #92]	; 0x5c
 801205c:	3201      	adds	r2, #1
 801205e:	b212      	sxth	r2, r2
 8012060:	920d      	str	r2, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012062:	88ea      	ldrh	r2, [r5, #6]
 8012064:	3201      	adds	r2, #1
 8012066:	8868      	ldrh	r0, [r5, #2]
 8012068:	1a12      	subs	r2, r2, r0
 801206a:	b212      	sxth	r2, r2
 801206c:	9212      	str	r2, [sp, #72]	; 0x48
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801206e:	3301      	adds	r3, #1
 8012070:	1a5b      	subs	r3, r3, r1
 8012072:	fa0f fa83 	sxth.w	sl, r3
        lv_coord_t src_w = lv_area_get_width(coords);
        lv_coord_t src_h = lv_area_get_height(coords);
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
        lv_coord_t blend_w = lv_area_get_width(&blend_area);

        uint32_t max_buf_size = MAX_BUF_SIZE;
 8012076:	f7fa fb4b 	bl	800c710 <_lv_refr_get_disp_refreshing>
 801207a:	f00e f99d 	bl	80203b8 <lv_disp_get_hor_res>
 801207e:	4605      	mov	r5, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 8012080:	a826      	add	r0, sp, #152	; 0x98
 8012082:	f00e fcb0 	bl	80209e6 <lv_area_get_size>
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
        if(blend_size <= max_buf_size) {
 8012086:	4285      	cmp	r5, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012088:	bf23      	ittte	cs
 801208a:	1c65      	addcs	r5, r4, #1
 801208c:	1bad      	subcs	r5, r5, r6
            buf_h = blend_h;
 801208e:	b22d      	sxthcs	r5, r5
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 8012090:	fbb5 f5fa 	udivcc	r5, r5, sl
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 8012094:	fb0a f405 	mul.w	r4, sl, r5
 8012098:	9415      	str	r4, [sp, #84]	; 0x54

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 801209a:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 801209e:	4658      	mov	r0, fp
 80120a0:	f00f fc34 	bl	802190c <lv_mem_buf_get>
 80120a4:	4606      	mov	r6, r0
 80120a6:	9009      	str	r0, [sp, #36]	; 0x24
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 80120a8:	4620      	mov	r0, r4
 80120aa:	f00f fc2f 	bl	802190c <lv_mem_buf_get>
 80120ae:	900a      	str	r0, [sp, #40]	; 0x28
        blend_dsc.mask_buf = mask_buf;
 80120b0:	9022      	str	r0, [sp, #136]	; 0x88
        blend_dsc.mask_area = &blend_area;
 80120b2:	ab26      	add	r3, sp, #152	; 0x98
 80120b4:	9324      	str	r3, [sp, #144]	; 0x90
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        blend_dsc.src_buf = rgb_buf;
 80120b6:	9620      	str	r6, [sp, #128]	; 0x80
        lv_coord_t y_last = blend_area.y2;
 80120b8:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 80120bc:	930c      	str	r3, [sp, #48]	; 0x30
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 80120be:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
 80120c2:	b2ab      	uxth	r3, r5
 80120c4:	4619      	mov	r1, r3
 80120c6:	9310      	str	r3, [sp, #64]	; 0x40
 80120c8:	1e53      	subs	r3, r2, #1
 80120ca:	440b      	add	r3, r1
 80120cc:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80120d0:	9b08      	ldr	r3, [sp, #32]
 80120d2:	2b04      	cmp	r3, #4
 80120d4:	d069      	beq.n	80121aa <lv_draw_sw_img_decoded+0x1ec>
 80120d6:	2302      	movs	r3, #2
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 80120d8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c

        while(blend_area.y1 <= y_last) {
 80120dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120de:	429a      	cmp	r2, r3
 80120e0:	f300 8225 	bgt.w	801252e <lv_draw_sw_img_decoded+0x570>
        }
    }
    else if(cf == LV_IMG_CF_RGB565A8) {
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80120e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80120e6:	004b      	lsls	r3, r1, #1
 80120e8:	b21b      	sxth	r3, r3
 80120ea:	9316      	str	r3, [sp, #88]	; 0x58
            cbuf += dest_w;
            src_tmp8 += src_stride_byte;
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 80120ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120ee:	fb01 f303 	mul.w	r3, r1, r3
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	9318      	str	r3, [sp, #96]	; 0x60
 80120f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f8:	449b      	add	fp, r3
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80120fa:	9b08      	ldr	r3, [sp, #32]
 80120fc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8012100:	9314      	str	r3, [sp, #80]	; 0x50
 8012102:	e103      	b.n	801230c <lv_draw_sw_img_decoded+0x34e>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8012104:	9b08      	ldr	r3, [sp, #32]
 8012106:	2b04      	cmp	r3, #4
 8012108:	d025      	beq.n	8012156 <lv_draw_sw_img_decoded+0x198>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 801210a:	9b08      	ldr	r3, [sp, #32]
 801210c:	2b0e      	cmp	r3, #14
 801210e:	d030      	beq.n	8012172 <lv_draw_sw_img_decoded+0x1b4>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8012110:	9b08      	ldr	r3, [sp, #32]
 8012112:	2b14      	cmp	r3, #20
 8012114:	d18a      	bne.n	801202c <lv_draw_sw_img_decoded+0x6e>
 8012116:	f899 300a 	ldrb.w	r3, [r9, #10]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d186      	bne.n	801202c <lv_draw_sw_img_decoded+0x6e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801211e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012120:	8883      	ldrh	r3, [r0, #4]
 8012122:	3301      	adds	r3, #1
 8012124:	8802      	ldrh	r2, [r0, #0]
 8012126:	1a9b      	subs	r3, r3, r2
 8012128:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801212a:	88c2      	ldrh	r2, [r0, #6]
 801212c:	3201      	adds	r2, #1
 801212e:	8841      	ldrh	r1, [r0, #2]
 8012130:	1a52      	subs	r2, r2, r1
 8012132:	b212      	sxth	r2, r2
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8012134:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012136:	9120      	str	r1, [sp, #128]	; 0x80
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 8012138:	fb02 f303 	mul.w	r3, r2, r3
 801213c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8012140:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.blend_area = coords;
 8012142:	901f      	str	r0, [sp, #124]	; 0x7c
        blend_dsc.mask_area = coords;
 8012144:	9024      	str	r0, [sp, #144]	; 0x90
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012146:	2302      	movs	r3, #2
 8012148:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801214c:	a91f      	add	r1, sp, #124	; 0x7c
 801214e:	9807      	ldr	r0, [sp, #28]
 8012150:	f7fe fd5a 	bl	8010c08 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8012154:	e1f1      	b.n	801253a <lv_draw_sw_img_decoded+0x57c>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8012156:	f899 300a 	ldrb.w	r3, [r9, #10]
 801215a:	2b00      	cmp	r3, #0
 801215c:	f47f af66 	bne.w	801202c <lv_draw_sw_img_decoded+0x6e>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8012160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012162:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.blend_area = coords;
 8012164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012166:	931f      	str	r3, [sp, #124]	; 0x7c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012168:	a91f      	add	r1, sp, #124	; 0x7c
 801216a:	9807      	ldr	r0, [sp, #28]
 801216c:	f7fe fd4c 	bl	8010c08 <lv_draw_sw_blend>
 8012170:	e1e3      	b.n	801253a <lv_draw_sw_img_decoded+0x57c>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8012172:	9d07      	ldr	r5, [sp, #28]
 8012174:	68aa      	ldr	r2, [r5, #8]
 8012176:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012178:	4621      	mov	r1, r4
 801217a:	a81d      	add	r0, sp, #116	; 0x74
 801217c:	f00e fc5f 	bl	8020a3e <_lv_area_intersect>
 8012180:	2800      	cmp	r0, #0
 8012182:	f000 81da 	beq.w	801253a <lv_draw_sw_img_decoded+0x57c>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 8012186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012188:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.mask_area = coords;
 801218a:	9424      	str	r4, [sp, #144]	; 0x90
        blend_dsc.src_buf = NULL;
 801218c:	2300      	movs	r3, #0
 801218e:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.color = draw_dsc->recolor;
 8012190:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8012194:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012198:	2302      	movs	r3, #2
 801219a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
        blend_dsc.blend_area = coords;
 801219e:	941f      	str	r4, [sp, #124]	; 0x7c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80121a0:	a91f      	add	r1, sp, #124	; 0x7c
 80121a2:	4628      	mov	r0, r5
 80121a4:	f7fe fd30 	bl	8010c08 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 80121a8:	e1c7      	b.n	801253a <lv_draw_sw_img_decoded+0x57c>
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 80121aa:	f8d9 3000 	ldr.w	r3, [r9]
 80121ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80121b2:	bf14      	ite	ne
 80121b4:	2302      	movne	r3, #2
 80121b6:	2301      	moveq	r3, #1
 80121b8:	e78e      	b.n	80120d8 <lv_draw_sw_img_decoded+0x11a>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80121ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80121bc:	2b04      	cmp	r3, #4
 80121be:	d053      	beq.n	8012268 <lv_draw_sw_img_decoded+0x2aa>
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 80121c0:	9b08      	ldr	r3, [sp, #32]
 80121c2:	2b05      	cmp	r3, #5
 80121c4:	f000 80e4 	beq.w	8012390 <lv_draw_sw_img_decoded+0x3d2>
    else if(cf == LV_IMG_CF_RGB565A8) {
 80121c8:	9b08      	ldr	r3, [sp, #32]
 80121ca:	2b14      	cmp	r3, #20
 80121cc:	d17f      	bne.n	80122ce <lv_draw_sw_img_decoded+0x310>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 80121ce:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 80121d2:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 80121d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80121d8:	fb01 3402 	mla	r4, r1, r2, r3
 80121dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80121de:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80121e2:	f8bd 707a 	ldrh.w	r7, [sp, #122]	; 0x7a
 80121e6:	3701      	adds	r7, #1
 80121e8:	1abf      	subs	r7, r7, r2
 80121ea:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80121ec:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 80121f0:	f108 0801 	add.w	r8, r8, #1
 80121f4:	eba8 0803 	sub.w	r8, r8, r3
 80121f8:	fa0f f888 	sxth.w	r8, r8
        for(y = 0; y < dest_h; y++) {
 80121fc:	2f00      	cmp	r7, #0
 80121fe:	dd66      	ble.n	80122ce <lv_draw_sw_img_decoded+0x310>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 8012200:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8012204:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012206:	2500      	movs	r5, #0
 8012208:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 801220c:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8012210:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8012214:	469a      	mov	sl, r3
 8012216:	4652      	mov	r2, sl
 8012218:	4621      	mov	r1, r4
 801221a:	4630      	mov	r0, r6
 801221c:	f00f fc0e 	bl	8021a3c <lv_memcpy>
            cbuf += dest_w;
 8012220:	4456      	add	r6, sl
            src_tmp8 += src_stride_byte;
 8012222:	445c      	add	r4, fp
        for(y = 0; y < dest_h; y++) {
 8012224:	3501      	adds	r5, #1
 8012226:	b22b      	sxth	r3, r5
 8012228:	429f      	cmp	r7, r3
 801222a:	dcf4      	bgt.n	8012216 <lv_draw_sw_img_decoded+0x258>
 801222c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 8012230:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 8012234:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 8012238:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801223a:	fb02 4403 	mla	r4, r2, r3, r4
 801223e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012240:	441c      	add	r4, r3
 8012242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012244:	441c      	add	r4, r3
 8012246:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012248:	2500      	movs	r5, #0
 801224a:	4693      	mov	fp, r2
        for(y = 0; y < dest_h; y++) {
            lv_memcpy(abuf, src_tmp8, dest_w);
 801224c:	4642      	mov	r2, r8
 801224e:	4621      	mov	r1, r4
 8012250:	4630      	mov	r0, r6
 8012252:	f00f fbf3 	bl	8021a3c <lv_memcpy>
            abuf += dest_w;
 8012256:	4446      	add	r6, r8
            src_tmp8 += src_stride;
 8012258:	445c      	add	r4, fp
        for(y = 0; y < dest_h; y++) {
 801225a:	3501      	adds	r5, #1
 801225c:	b22b      	sxth	r3, r5
 801225e:	429f      	cmp	r7, r3
 8012260:	dcf4      	bgt.n	801224c <lv_draw_sw_img_decoded+0x28e>
 8012262:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8012266:	e032      	b.n	80122ce <lv_draw_sw_img_decoded+0x310>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 8012268:	a81d      	add	r0, sp, #116	; 0x74
 801226a:	f00e fbbc 	bl	80209e6 <lv_area_get_size>
 801226e:	4680      	mov	r8, r0
        lv_memset_ff(abuf, px_cnt);
 8012270:	4601      	mov	r1, r0
 8012272:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012274:	f00f fdde 	bl	8021e34 <lv_memset_ff>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8012278:	f9bd 4076 	ldrsh.w	r4, [sp, #118]	; 0x76
 801227c:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8012280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012282:	fb04 3502 	mla	r5, r4, r2, r3
 8012286:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012288:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801228c:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8012290:	3601      	adds	r6, #1
 8012292:	1af6      	subs	r6, r6, r3
        uint32_t dest_w = lv_area_get_width(dest_area);
 8012294:	b236      	sxth	r6, r6
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 8012296:	0076      	lsls	r6, r6, #1
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8012298:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 801229c:	42a3      	cmp	r3, r4
 801229e:	db13      	blt.n	80122c8 <lv_draw_sw_img_decoded+0x30a>
        lv_color_t * cbuf_tmp = cbuf;
 80122a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80122a2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80122a6:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 80122aa:	4632      	mov	r2, r6
 80122ac:	4629      	mov	r1, r5
 80122ae:	4638      	mov	r0, r7
 80122b0:	f00f fbc4 	bl	8021a3c <lv_memcpy>
            src_tmp8 += src_stride_byte;
 80122b4:	445d      	add	r5, fp
            cbuf_tmp += dest_w;
 80122b6:	4437      	add	r7, r6
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 80122b8:	3401      	adds	r4, #1
 80122ba:	b224      	sxth	r4, r4
 80122bc:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 80122c0:	42a3      	cmp	r3, r4
 80122c2:	daf2      	bge.n	80122aa <lv_draw_sw_img_decoded+0x2ec>
 80122c4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80122c8:	9b08      	ldr	r3, [sp, #32]
 80122ca:	2b06      	cmp	r3, #6
 80122cc:	d04d      	beq.n	801236a <lv_draw_sw_img_decoded+0x3ac>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 80122ce:	f899 500a 	ldrb.w	r5, [r9, #10]
 80122d2:	2d02      	cmp	r5, #2
 80122d4:	f200 80be 	bhi.w	8012454 <lv_draw_sw_img_decoded+0x496>
            if(mask_any) {
 80122d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f040 8101 	bne.w	80124e2 <lv_draw_sw_img_decoded+0x524>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80122e0:	a91f      	add	r1, sp, #124	; 0x7c
 80122e2:	9807      	ldr	r0, [sp, #28]
 80122e4:	f7fe fc90 	bl	8010c08 <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 80122e8:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 80122ec:	1c5a      	adds	r2, r3, #1
 80122ee:	b212      	sxth	r2, r2
 80122f0:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 80122f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80122f6:	440b      	add	r3, r1
 80122f8:	b21b      	sxth	r3, r3
 80122fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80122fc:	428b      	cmp	r3, r1
 80122fe:	bfa8      	it	ge
 8012300:	460b      	movge	r3, r1
 8012302:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        while(blend_area.y1 <= y_last) {
 8012306:	428a      	cmp	r2, r1
 8012308:	f300 8111 	bgt.w	801252e <lv_draw_sw_img_decoded+0x570>
    dest->x1 = src->x1;
 801230c:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8012310:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    dest->y1 = src->y1;
 8012314:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    dest->x2 = src->x2;
 8012318:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 801231c:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    dest->y2 = src->y2;
 8012320:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 8012324:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 8012328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801232a:	885a      	ldrh	r2, [r3, #2]
 801232c:	4252      	negs	r2, r2
 801232e:	8819      	ldrh	r1, [r3, #0]
 8012330:	4249      	negs	r1, r1
 8012332:	b212      	sxth	r2, r2
 8012334:	b209      	sxth	r1, r1
 8012336:	a81d      	add	r0, sp, #116	; 0x74
 8012338:	f00e fb72 	bl	8020a20 <lv_area_move>
            if(transform) {
 801233c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801233e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012342:	f43f af3a 	beq.w	80121ba <lv_draw_sw_img_decoded+0x1fc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8012346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012348:	9305      	str	r3, [sp, #20]
 801234a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801234c:	9304      	str	r3, [sp, #16]
 801234e:	9b08      	ldr	r3, [sp, #32]
 8012350:	9303      	str	r3, [sp, #12]
 8012352:	f8cd 9008 	str.w	r9, [sp, #8]
 8012356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012358:	9301      	str	r3, [sp, #4]
 801235a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801235c:	9200      	str	r2, [sp, #0]
 801235e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012360:	a91d      	add	r1, sp, #116	; 0x74
 8012362:	9807      	ldr	r0, [sp, #28]
 8012364:	f7fc ff72 	bl	800f24c <lv_draw_transform>
 8012368:	e7b1      	b.n	80122ce <lv_draw_sw_img_decoded+0x310>
            for(i = 0; i < px_cnt; i++) {
 801236a:	f1b8 0f00 	cmp.w	r8, #0
 801236e:	d0ae      	beq.n	80122ce <lv_draw_sw_img_decoded+0x310>
 8012370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012372:	1e8b      	subs	r3, r1, #2
 8012374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012376:	eb03 0848 	add.w	r8, r3, r8, lsl #1
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 801237a:	2000      	movs	r0, #0
 801237c:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8012380:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
 8012384:	bf08      	it	eq
 8012386:	7010      	strbeq	r0, [r2, #0]
            for(i = 0; i < px_cnt; i++) {
 8012388:	3201      	adds	r2, #1
 801238a:	4598      	cmp	r8, r3
 801238c:	d1f6      	bne.n	801237c <lv_draw_sw_img_decoded+0x3be>
 801238e:	e79e      	b.n	80122ce <lv_draw_sw_img_decoded+0x310>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8012390:	f9bd 1076 	ldrsh.w	r1, [sp, #118]	; 0x76
 8012394:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 8012398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801239a:	fb01 2603 	mla	r6, r1, r3, r2
 801239e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80123a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123a4:	441e      	add	r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80123a6:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 80123aa:	b292      	uxth	r2, r2
 80123ac:	1c47      	adds	r7, r0, #1
 80123ae:	1abf      	subs	r7, r7, r2
 80123b0:	b2bb      	uxth	r3, r7
 80123b2:	b23f      	sxth	r7, r7
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 80123b4:	1a12      	subs	r2, r2, r0
 80123b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80123b8:	4402      	add	r2, r0
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80123ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80123be:	b214      	sxth	r4, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80123c0:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 80123c4:	3201      	adds	r2, #1
 80123c6:	1a51      	subs	r1, r2, r1
 80123c8:	b20a      	sxth	r2, r1
        for(y = 0; y < dest_h; y++) {
 80123ca:	2a00      	cmp	r2, #0
 80123cc:	f77f af7f 	ble.w	80122ce <lv_draw_sw_img_decoded+0x310>
            cbuf += dest_w;
 80123d0:	0078      	lsls	r0, r7, #1
 80123d2:	3b01      	subs	r3, #1
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80123d8:	18cd      	adds	r5, r1, r3
 80123da:	3301      	adds	r3, #1
 80123dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80123e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80123e2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80123e6:	468e      	mov	lr, r1
 80123e8:	f04f 0c00 	mov.w	ip, #0
 80123ec:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
 80123f0:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 80123f4:	4692      	mov	sl, r2
 80123f6:	4683      	mov	fp, r0
 80123f8:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 80123fc:	46a1      	mov	r9, r4
 80123fe:	e01f      	b.n	8012440 <lv_draw_sw_img_decoded+0x482>
 8012400:	1cf3      	adds	r3, r6, #3
 8012402:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8012406:	f1a8 0002 	sub.w	r0, r8, #2
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801240a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 801240e:	f801 2f01 	strb.w	r2, [r1, #1]!
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 8012412:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8012416:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801241a:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 801241e:	f820 2f02 	strh.w	r2, [r0, #2]!
            for(x = 0; x < dest_w; x++) {
 8012422:	3303      	adds	r3, #3
 8012424:	42a9      	cmp	r1, r5
 8012426:	d1f0      	bne.n	801240a <lv_draw_sw_img_decoded+0x44c>
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 8012428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801242a:	441e      	add	r6, r3
            cbuf += dest_w;
 801242c:	44d8      	add	r8, fp
            abuf += dest_w;
 801242e:	44be      	add	lr, r7
            src_tmp8 += src_new_line_step_byte;
 8012430:	444e      	add	r6, r9
        for(y = 0; y < dest_h; y++) {
 8012432:	f10c 0c01 	add.w	ip, ip, #1
 8012436:	443d      	add	r5, r7
 8012438:	fa0f f38c 	sxth.w	r3, ip
 801243c:	459a      	cmp	sl, r3
 801243e:	dd02      	ble.n	8012446 <lv_draw_sw_img_decoded+0x488>
            for(x = 0; x < dest_w; x++) {
 8012440:	2f00      	cmp	r7, #0
 8012442:	dcdd      	bgt.n	8012400 <lv_draw_sw_img_decoded+0x442>
 8012444:	e7f2      	b.n	801242c <lv_draw_sw_img_decoded+0x46e>
 8012446:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 801244a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801244e:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8012452:	e73c      	b.n	80122ce <lv_draw_sw_img_decoded+0x310>
                lv_color_t recolor = draw_dsc->recolor;
 8012454:	f899 7009 	ldrb.w	r7, [r9, #9]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 8012458:	08ff      	lsrs	r7, r7, #3
 801245a:	fb05 f707 	mul.w	r7, r5, r7
 801245e:	f8b9 c008 	ldrh.w	ip, [r9, #8]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8012462:	f3cc 1c45 	ubfx	ip, ip, #5, #6
 8012466:	fb05 fc0c 	mul.w	ip, r5, ip
 801246a:	f899 e008 	ldrb.w	lr, [r9, #8]
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 801246e:	f00e 0e1f 	and.w	lr, lr, #31
 8012472:	fb05 fe0e 	mul.w	lr, r5, lr
                recolor_opa = 255 - recolor_opa;
 8012476:	43ed      	mvns	r5, r5
 8012478:	b2ed      	uxtb	r5, r5
                for(i = 0; i < buf_size; i++) {
 801247a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801247c:	2b00      	cmp	r3, #0
 801247e:	f43f af2b 	beq.w	80122d8 <lv_draw_sw_img_decoded+0x31a>
 8012482:	9909      	ldr	r1, [sp, #36]	; 0x24
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8012484:	784b      	ldrb	r3, [r1, #1]
 8012486:	08db      	lsrs	r3, r3, #3
 8012488:	fb05 7303 	mla	r3, r5, r3, r7
 801248c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 8012490:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8012494:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8012498:	880a      	ldrh	r2, [r1, #0]
 801249a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801249e:	fb05 c202 	mla	r2, r5, r2, ip
 80124a2:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 80124a6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80124aa:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80124ae:	780c      	ldrb	r4, [r1, #0]
 80124b0:	f004 001f 	and.w	r0, r4, #31
 80124b4:	fb05 e000 	mla	r0, r5, r0, lr
 80124b8:	eb00 2600 	add.w	r6, r0, r0, lsl #8
 80124bc:	eb00 10c6 	add.w	r0, r0, r6, lsl #7
 80124c0:	0dc0      	lsrs	r0, r0, #23
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 80124c2:	f360 0404 	bfi	r4, r0, #0, #5
 80124c6:	700c      	strb	r4, [r1, #0]
 80124c8:	8808      	ldrh	r0, [r1, #0]
 80124ca:	f362 104a 	bfi	r0, r2, #5, #6
 80124ce:	8008      	strh	r0, [r1, #0]
 80124d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80124d4:	f363 00c7 	bfi	r0, r3, #3, #5
 80124d8:	7048      	strb	r0, [r1, #1]
                for(i = 0; i < buf_size; i++) {
 80124da:	3102      	adds	r1, #2
 80124dc:	4559      	cmp	r1, fp
 80124de:	d1d1      	bne.n	8012484 <lv_draw_sw_img_decoded+0x4c6>
 80124e0:	e6fa      	b.n	80122d8 <lv_draw_sw_img_decoded+0x31a>
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 80124e2:	f9bd 409a 	ldrsh.w	r4, [sp, #154]	; 0x9a
 80124e6:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 80124ea:	42a3      	cmp	r3, r4
 80124ec:	f6ff aef8 	blt.w	80122e0 <lv_draw_sw_img_decoded+0x322>
                lv_opa_t * mask_buf_tmp = mask_buf;
 80124f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80124f2:	2602      	movs	r6, #2
 80124f4:	e00b      	b.n	801250e <lv_draw_sw_img_decoded+0x550>
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 80124f6:	2802      	cmp	r0, #2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80124f8:	bf08      	it	eq
 80124fa:	f88d 608c 	strbeq.w	r6, [sp, #140]	; 0x8c
                    mask_buf_tmp += blend_w;
 80124fe:	4455      	add	r5, sl
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8012500:	3401      	adds	r4, #1
 8012502:	b224      	sxth	r4, r4
 8012504:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 8012508:	42a3      	cmp	r3, r4
 801250a:	f6ff aee9 	blt.w	80122e0 <lv_draw_sw_img_decoded+0x322>
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 801250e:	4653      	mov	r3, sl
 8012510:	4622      	mov	r2, r4
 8012512:	f9bd 1098 	ldrsh.w	r1, [sp, #152]	; 0x98
 8012516:	4628      	mov	r0, r5
 8012518:	f7fc f9f2 	bl	800e900 <lv_draw_mask_apply>
                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 801251c:	2800      	cmp	r0, #0
 801251e:	d1ea      	bne.n	80124f6 <lv_draw_sw_img_decoded+0x538>
                        lv_memset_00(mask_buf_tmp, blend_w);
 8012520:	4651      	mov	r1, sl
 8012522:	4628      	mov	r0, r5
 8012524:	f00f fc20 	bl	8021d68 <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012528:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
 801252c:	e7e7      	b.n	80124fe <lv_draw_sw_img_decoded+0x540>
        lv_mem_buf_release(mask_buf);
 801252e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012530:	f00f fa4e 	bl	80219d0 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 8012534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012536:	f00f fa4b 	bl	80219d0 <lv_mem_buf_release>
}
 801253a:	b02b      	add	sp, #172	; 0xac
 801253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012540 <lv_draw_sw_layer_create>:


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8012540:	f012 0f01 	tst.w	r2, #1
 8012544:	d17a      	bne.n	801263c <lv_draw_sw_layer_create+0xfc>
{
 8012546:	b570      	push	{r4, r5, r6, lr}
 8012548:	4606      	mov	r6, r0
 801254a:	460c      	mov	r4, r1
 801254c:	4615      	mov	r5, r2
        return NULL;
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 801254e:	f012 0f02 	tst.w	r2, #2
 8012552:	d042      	beq.n	80125da <lv_draw_sw_layer_create+0x9a>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8012554:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8012556:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 801255a:	f362 031e 	bfi	r3, r2, #0, #31
 801255e:	628b      	str	r3, [r1, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8012560:	4608      	mov	r0, r1
 8012562:	f00e fa40 	bl	80209e6 <lv_area_get_size>
 8012566:	0042      	lsls	r2, r0, #1
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8012568:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801256a:	f3c3 031e 	ubfx	r3, r3, #0, #31
 801256e:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 8012572:	d903      	bls.n	801257c <lv_draw_sw_layer_create+0x3c>
 8012574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012576:	f362 031e 	bfi	r3, r2, #0, #31
 801257a:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 801257c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801257e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012582:	f00f f971 	bl	8021868 <lv_mem_alloc>
 8012586:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8012588:	b1d8      	cbz	r0, 80125c2 <lv_draw_sw_layer_create+0x82>
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
            if(layer_sw_ctx->base_draw.buf == NULL) {
                return NULL;
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 801258a:	f104 0308 	add.w	r3, r4, #8
 801258e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012592:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 8012596:	8863      	ldrh	r3, [r4, #2]
 8012598:	81e3      	strh	r3, [r4, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 801259a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801259c:	f3c3 031e 	ubfx	r3, r3, #0, #31
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80125a0:	89a2      	ldrh	r2, [r4, #12]
 80125a2:	3201      	adds	r2, #1
 80125a4:	8921      	ldrh	r1, [r4, #8]
 80125a6:	1a52      	subs	r2, r2, r1
 80125a8:	b212      	sxth	r2, r2
 80125aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80125ae:	4a24      	ldr	r2, [pc, #144]	; (8012640 <lv_draw_sw_layer_create+0x100>)
 80125b0:	fb82 1203 	smull	r1, r2, r2, r3
 80125b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80125b8:	8222      	strh	r2, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 80125ba:	085b      	lsrs	r3, r3, #1
 80125bc:	8263      	strh	r3, [r4, #18]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
    }

    return layer_ctx;
 80125be:	4620      	mov	r0, r4
}
 80125c0:	bd70      	pop	{r4, r5, r6, pc}
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 80125c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80125c4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80125c8:	f360 031e 	bfi	r3, r0, #0, #31
 80125cc:	62a3      	str	r3, [r4, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 80125ce:	f00f f94b 	bl	8021868 <lv_mem_alloc>
 80125d2:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d1d8      	bne.n	801258a <lv_draw_sw_layer_create+0x4a>
 80125d8:	e7f2      	b.n	80125c0 <lv_draw_sw_layer_create+0x80>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 80125da:	f101 0308 	add.w	r3, r1, #8
 80125de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125e2:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 80125e6:	4620      	mov	r0, r4
 80125e8:	f00e f9fd 	bl	80209e6 <lv_area_get_size>
 80125ec:	0040      	lsls	r0, r0, #1
 80125ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80125f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80125f4:	f360 031e 	bfi	r3, r0, #0, #31
 80125f8:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 80125fa:	f00f f935 	bl	8021868 <lv_mem_alloc>
 80125fe:	6160      	str	r0, [r4, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8012600:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012602:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012606:	f00f fbaf 	bl	8021d68 <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 801260a:	f005 0501 	and.w	r5, r5, #1
 801260e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8012612:	f365 13c7 	bfi	r3, r5, #7, #1
 8012616:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 801261a:	6960      	ldr	r0, [r4, #20]
 801261c:	2800      	cmp	r0, #0
 801261e:	d0cf      	beq.n	80125c0 <lv_draw_sw_layer_create+0x80>
        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 8012620:	6030      	str	r0, [r6, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 8012622:	f104 0308 	add.w	r3, r4, #8
 8012626:	6073      	str	r3, [r6, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 8012628:	60b3      	str	r3, [r6, #8]
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801262a:	f7fa f871 	bl	800c710 <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 801262e:	6803      	ldr	r3, [r0, #0]
 8012630:	7c1a      	ldrb	r2, [r3, #16]
 8012632:	f365 1286 	bfi	r2, r5, #6, #1
 8012636:	741a      	strb	r2, [r3, #16]
    return layer_ctx;
 8012638:	4620      	mov	r0, r4
 801263a:	e7c1      	b.n	80125c0 <lv_draw_sw_layer_create+0x80>
        return NULL;
 801263c:	2000      	movs	r0, #0
}
 801263e:	4770      	bx	lr
 8012640:	55555556 	.word	0x55555556

08012644 <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 8012644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012646:	4605      	mov	r5, r0
 8012648:	460c      	mov	r4, r1
 801264a:	4617      	mov	r7, r2

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 801264c:	f7fa f860 	bl	800c710 <_lv_refr_get_disp_refreshing>
 8012650:	4606      	mov	r6, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8012652:	f017 0f01 	tst.w	r7, #1
 8012656:	d110      	bne.n	801267a <lv_draw_sw_layer_adjust+0x36>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
        layer_sw_ctx->has_alpha = 1;
        disp_refr->driver->screen_transp = 1;
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 8012658:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801265c:	f36f 13c7 	bfc	r3, #7, #1
 8012660:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 8012664:	6803      	ldr	r3, [r0, #0]
 8012666:	7c1a      	ldrb	r2, [r3, #16]
 8012668:	f36f 1286 	bfc	r2, #6, #1
 801266c:	741a      	strb	r2, [r3, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 801266e:	6963      	ldr	r3, [r4, #20]
 8012670:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8012672:	3408      	adds	r4, #8
 8012674:	606c      	str	r4, [r5, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8012676:	60ac      	str	r4, [r5, #8]
}
 8012678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 801267a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801267c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012680:	6960      	ldr	r0, [r4, #20]
 8012682:	f00f fb71 	bl	8021d68 <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 8012686:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801268a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801268e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 8012692:	6832      	ldr	r2, [r6, #0]
 8012694:	7c13      	ldrb	r3, [r2, #16]
 8012696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801269a:	7413      	strb	r3, [r2, #16]
 801269c:	e7e7      	b.n	801266e <lv_draw_sw_layer_adjust+0x2a>

0801269e <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 801269e:	b570      	push	{r4, r5, r6, lr}
 80126a0:	b084      	sub	sp, #16
 80126a2:	4604      	mov	r4, r0
 80126a4:	460d      	mov	r5, r1
 80126a6:	4616      	mov	r6, r2
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 80126a8:	6803      	ldr	r3, [r0, #0]
 80126aa:	9303      	str	r3, [sp, #12]
    img.header.always_zero = 0;
 80126ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80126b0:	f36f 1347 	bfc	r3, #5, #3
 80126b4:	f88d 3004 	strb.w	r3, [sp, #4]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 80126b8:	6842      	ldr	r2, [r0, #4]
 80126ba:	8893      	ldrh	r3, [r2, #4]
 80126bc:	3301      	adds	r3, #1
 80126be:	8811      	ldrh	r1, [r2, #0]
 80126c0:	1a5b      	subs	r3, r3, r1
 80126c2:	9901      	ldr	r1, [sp, #4]
 80126c4:	f363 2194 	bfi	r1, r3, #10, #11
 80126c8:	9101      	str	r1, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80126ca:	88d3      	ldrh	r3, [r2, #6]
 80126cc:	3301      	adds	r3, #1
 80126ce:	8852      	ldrh	r2, [r2, #2]
 80126d0:	1a9b      	subs	r3, r3, r2
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 80126d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80126d6:	f363 124f 	bfi	r2, r3, #5, #11
 80126da:	f8ad 2006 	strh.w	r2, [sp, #6]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 80126de:	f995 302b 	ldrsb.w	r3, [r5, #43]	; 0x2b
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	bfb4      	ite	lt
 80126e6:	2205      	movlt	r2, #5
 80126e8:	2204      	movge	r2, #4
 80126ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80126ee:	f362 0304 	bfi	r3, r2, #0, #5
 80126f2:	f88d 3004 	strb.w	r3, [sp, #4]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 80126f6:	6a2b      	ldr	r3, [r5, #32]
 80126f8:	6003      	str	r3, [r0, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 80126fa:	69eb      	ldr	r3, [r5, #28]
 80126fc:	6043      	str	r3, [r0, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 80126fe:	69ab      	ldr	r3, [r5, #24]
 8012700:	6083      	str	r3, [r0, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8012702:	f7fa f805 	bl	800c710 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8012706:	6803      	ldr	r3, [r0, #0]
 8012708:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 801270c:	7c1a      	ldrb	r2, [r3, #16]
 801270e:	f361 1286 	bfi	r2, r1, #6, #1
 8012712:	741a      	strb	r2, [r3, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8012714:	ab01      	add	r3, sp, #4
 8012716:	f105 0208 	add.w	r2, r5, #8
 801271a:	4631      	mov	r1, r6
 801271c:	4620      	mov	r0, r4
 801271e:	f7fa fe05 	bl	800d32c <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8012722:	4620      	mov	r0, r4
 8012724:	f7fa faf9 	bl	800cd1a <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8012728:	a801      	add	r0, sp, #4
 801272a:	f7fc fe53 	bl	800f3d4 <lv_img_cache_invalidate_src>
}
 801272e:	b004      	add	sp, #16
 8012730:	bd70      	pop	{r4, r5, r6, pc}

08012732 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8012732:	b508      	push	{r3, lr}
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8012734:	6948      	ldr	r0, [r1, #20]
 8012736:	f00f f8b5 	bl	80218a4 <lv_mem_free>
}
 801273a:	bd08      	pop	{r3, pc}

0801273c <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 801273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012740:	b0a7      	sub	sp, #156	; 0x9c
 8012742:	4604      	mov	r4, r0
 8012744:	460f      	mov	r7, r1
 8012746:	4615      	mov	r5, r2
 8012748:	461e      	mov	r6, r3
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 801274a:	2300      	movs	r3, #0
 801274c:	4632      	mov	r2, r6
 801274e:	a922      	add	r1, sp, #136	; 0x88
 8012750:	6838      	ldr	r0, [r7, #0]
 8012752:	f00d fb8d 	bl	801fe70 <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 8012756:	2800      	cmp	r0, #0
 8012758:	d04f      	beq.n	80127fa <lv_draw_sw_letter+0xbe>
        }
        return;
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 801275a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801275e:	2b00      	cmp	r3, #0
 8012760:	d055      	beq.n	801280e <lv_draw_sw_letter+0xd2>
 8012762:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
 8012766:	2a00      	cmp	r2, #0
 8012768:	d051      	beq.n	801280e <lv_draw_sw_letter+0xd2>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 801276a:	f8b5 b000 	ldrh.w	fp, [r5]
 801276e:	f8bd 1092 	ldrh.w	r1, [sp, #146]	; 0x92
 8012772:	448b      	add	fp, r1
 8012774:	fa1f f98b 	uxth.w	r9, fp
 8012778:	fa0f fb8b 	sxth.w	fp, fp
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 801277c:	68a1      	ldr	r1, [r4, #8]
 801277e:	445a      	add	r2, fp
 8012780:	f9b1 0000 	ldrsh.w	r0, [r1]
 8012784:	4282      	cmp	r2, r0
 8012786:	db42      	blt.n	801280e <lv_draw_sw_letter+0xd2>
 8012788:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801278c:	455a      	cmp	r2, fp
 801278e:	db3e      	blt.n	801280e <lv_draw_sw_letter+0xd2>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8012790:	6838      	ldr	r0, [r7, #0]
 8012792:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 8012796:	441a      	add	r2, r3
 8012798:	886d      	ldrh	r5, [r5, #2]
 801279a:	1aad      	subs	r5, r5, r2
 801279c:	8902      	ldrh	r2, [r0, #8]
 801279e:	4415      	add	r5, r2
 80127a0:	8942      	ldrh	r2, [r0, #10]
 80127a2:	1aad      	subs	r5, r5, r2
 80127a4:	fa1f fa85 	uxth.w	sl, r5
 80127a8:	b22d      	sxth	r5, r5
       gpos.x > draw_ctx->clip_area->x2 ||
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 80127aa:	442b      	add	r3, r5
 80127ac:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 80127b0:	4293      	cmp	r3, r2
 80127b2:	db2c      	blt.n	801280e <lv_draw_sw_letter+0xd2>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 80127b4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80127b8:	42ab      	cmp	r3, r5
 80127ba:	db28      	blt.n	801280e <lv_draw_sw_letter+0xd2>
       gpos.y > draw_ctx->clip_area->y2)  {
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 80127bc:	4631      	mov	r1, r6
 80127be:	9822      	ldr	r0, [sp, #136]	; 0x88
 80127c0:	f00d fb50 	bl	801fe64 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 80127c4:	4606      	mov	r6, r0
 80127c6:	b310      	cbz	r0, 801280e <lv_draw_sw_letter+0xd2>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 80127c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80127ca:	7b1b      	ldrb	r3, [r3, #12]
 80127cc:	f013 0f03 	tst.w	r3, #3
 80127d0:	d11d      	bne.n	801280e <lv_draw_sw_letter+0xd2>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 80127d2:	f89d 3096 	ldrb.w	r3, [sp, #150]	; 0x96
 80127d6:	f003 030f 	and.w	r3, r3, #15
    lv_opa_t opa = dsc->opa;
 80127da:	7eb8      	ldrb	r0, [r7, #26]
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 80127dc:	2b03      	cmp	r3, #3
 80127de:	d061      	beq.n	80128a4 <lv_draw_sw_letter+0x168>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 80127e0:	3b01      	subs	r3, #1
 80127e2:	2b07      	cmp	r3, #7
 80127e4:	d813      	bhi.n	801280e <lv_draw_sw_letter+0xd2>
 80127e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80127ea:	0129      	.short	0x0129
 80127ec:	00120044 	.word	0x00120044
 80127f0:	0012004c 	.word	0x0012004c
 80127f4:	00120012 	.word	0x00120012
 80127f8:	0054      	.short	0x0054
        if(letter >= 0x20 &&
 80127fa:	2e1f      	cmp	r6, #31
 80127fc:	d907      	bls.n	801280e <lv_draw_sw_letter+0xd2>
 80127fe:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012802:	429e      	cmp	r6, r3
 8012804:	d003      	beq.n	801280e <lv_draw_sw_letter+0xd2>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8012806:	f242 030c 	movw	r3, #8204	; 0x200c
 801280a:	429e      	cmp	r6, r3
 801280c:	d102      	bne.n	8012814 <lv_draw_sw_letter+0xd8>
}
 801280e:	b027      	add	sp, #156	; 0x9c
 8012810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8012814:	8829      	ldrh	r1, [r5, #0]
 8012816:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
 801281a:	4419      	add	r1, r3
 801281c:	b289      	uxth	r1, r1
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 801281e:	886a      	ldrh	r2, [r5, #2]
 8012820:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8012824:	441a      	add	r2, r3
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8012826:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 801282a:	440b      	add	r3, r1
 801282c:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8012830:	4410      	add	r0, r2
 8012832:	b200      	sxth	r0, r0
 8012834:	9000      	str	r0, [sp, #0]
 8012836:	b21b      	sxth	r3, r3
 8012838:	b212      	sxth	r2, r2
 801283a:	b209      	sxth	r1, r1
 801283c:	a812      	add	r0, sp, #72	; 0x48
 801283e:	f00e f8c1 	bl	80209c4 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 8012842:	a814      	add	r0, sp, #80	; 0x50
 8012844:	f7fc fc90 	bl	800f168 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8012848:	2302      	movs	r3, #2
 801284a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
            glyph_dsc.outline_opa = LV_OPA_MIN;
 801284e:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 8012852:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8012856:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            glyph_dsc.border_color = dsc->color;
 801285a:	89bb      	ldrh	r3, [r7, #12]
 801285c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            glyph_dsc.border_width = 1;
 8012860:	2301      	movs	r3, #1
 8012862:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8012866:	6923      	ldr	r3, [r4, #16]
 8012868:	aa12      	add	r2, sp, #72	; 0x48
 801286a:	a914      	add	r1, sp, #80	; 0x50
 801286c:	4620      	mov	r0, r4
 801286e:	4798      	blx	r3
 8012870:	e7cd      	b.n	801280e <lv_draw_sw_letter+0xd2>
    switch(bpp) {
 8012872:	f04f 0802 	mov.w	r8, #2
 8012876:	2304      	movs	r3, #4
 8012878:	22c0      	movs	r2, #192	; 0xc0
 801287a:	9202      	str	r2, [sp, #8]
 801287c:	4ab1      	ldr	r2, [pc, #708]	; (8012b44 <lv_draw_sw_letter+0x408>)
 801287e:	920f      	str	r2, [sp, #60]	; 0x3c
 8012880:	e017      	b.n	80128b2 <lv_draw_sw_letter+0x176>
    uint32_t bpp = g->bpp;
 8012882:	f04f 0804 	mov.w	r8, #4
            shades = 4;
            break;
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
            bitmask_init  = 0xF0;
            shades = 16;
 8012886:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 8012888:	22f0      	movs	r2, #240	; 0xf0
 801288a:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 801288c:	4aae      	ldr	r2, [pc, #696]	; (8012b48 <lv_draw_sw_letter+0x40c>)
 801288e:	920f      	str	r2, [sp, #60]	; 0x3c
 8012890:	e00f      	b.n	80128b2 <lv_draw_sw_letter+0x176>
    uint32_t bpp = g->bpp;
 8012892:	f04f 0808 	mov.w	r8, #8
            break;
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
            bitmask_init  = 0xFF;
            shades = 256;
 8012896:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 801289a:	22ff      	movs	r2, #255	; 0xff
 801289c:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 801289e:	4aab      	ldr	r2, [pc, #684]	; (8012b4c <lv_draw_sw_letter+0x410>)
 80128a0:	920f      	str	r2, [sp, #60]	; 0x3c
            break;       /*No opa table, pixel value will be used directly*/
 80128a2:	e006      	b.n	80128b2 <lv_draw_sw_letter+0x176>
    if(bpp == 3) bpp = 4;
 80128a4:	f04f 0804 	mov.w	r8, #4
            shades = 16;
 80128a8:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 80128aa:	22f0      	movs	r2, #240	; 0xf0
 80128ac:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 80128ae:	4aa6      	ldr	r2, [pc, #664]	; (8012b48 <lv_draw_sw_letter+0x40c>)
 80128b0:	920f      	str	r2, [sp, #60]	; 0x3c
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 80128b2:	28fc      	cmp	r0, #252	; 0xfc
 80128b4:	d81d      	bhi.n	80128f2 <lv_draw_sw_letter+0x1b6>
        if(prev_opa != opa || prev_bpp != bpp) {
 80128b6:	4aa6      	ldr	r2, [pc, #664]	; (8012b50 <lv_draw_sw_letter+0x414>)
 80128b8:	7812      	ldrb	r2, [r2, #0]
 80128ba:	4282      	cmp	r2, r0
 80128bc:	f000 80c6 	beq.w	8012a4c <lv_draw_sw_letter+0x310>
 80128c0:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80128c4:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80128c8:	49a2      	ldr	r1, [pc, #648]	; (8012b54 <lv_draw_sw_letter+0x418>)
 80128ca:	3b01      	subs	r3, #1
 80128cc:	449c      	add	ip, r3
            uint32_t i;
            for(i = 0; i < shades; i++) {
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 80128ce:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80128d2:	2bff      	cmp	r3, #255	; 0xff
 80128d4:	bf1a      	itte	ne
 80128d6:	4343      	mulne	r3, r0
 80128d8:	0a1b      	lsrne	r3, r3, #8
 80128da:	4603      	moveq	r3, r0
 80128dc:	f801 3b01 	strb.w	r3, [r1], #1
            for(i = 0; i < shades; i++) {
 80128e0:	4562      	cmp	r2, ip
 80128e2:	d1f4      	bne.n	80128ce <lv_draw_sw_letter+0x192>
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
 80128e4:	4b9a      	ldr	r3, [pc, #616]	; (8012b50 <lv_draw_sw_letter+0x414>)
 80128e6:	7018      	strb	r0, [r3, #0]
        prev_bpp = bpp;
 80128e8:	4b9b      	ldr	r3, [pc, #620]	; (8012b58 <lv_draw_sw_letter+0x41c>)
 80128ea:	f8c3 8000 	str.w	r8, [r3]
        bpp_opa_table_p = opa_table;
 80128ee:	4b99      	ldr	r3, [pc, #612]	; (8012b54 <lv_draw_sw_letter+0x418>)
 80128f0:	930f      	str	r3, [sp, #60]	; 0x3c
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 80128f2:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 80128f6:	9305      	str	r3, [sp, #20]
    int32_t box_h = g->box_h;
 80128f8:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 80128fc:	9206      	str	r2, [sp, #24]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 80128fe:	fb08 f203 	mul.w	r2, r8, r3

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8012902:	68a3      	ldr	r3, [r4, #8]
 8012904:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012908:	458b      	cmp	fp, r1
 801290a:	bfb4      	ite	lt
 801290c:	eba1 010b 	sublt.w	r1, r1, fp
 8012910:	2100      	movge	r1, #0
 8012912:	9103      	str	r1, [sp, #12]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8012914:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8012918:	9805      	ldr	r0, [sp, #20]
 801291a:	4458      	add	r0, fp
 801291c:	4288      	cmp	r0, r1
 801291e:	bfc6      	itte	gt
 8012920:	eba1 010b 	subgt.w	r1, r1, fp
 8012924:	3101      	addgt	r1, #1
 8012926:	9905      	ldrle	r1, [sp, #20]
 8012928:	9104      	str	r1, [sp, #16]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 801292a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 801292e:	428d      	cmp	r5, r1
 8012930:	bfb4      	ite	lt
 8012932:	eba1 0b05 	sublt.w	fp, r1, r5
 8012936:	f04f 0b00 	movge.w	fp, #0
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 801293a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801293e:	9906      	ldr	r1, [sp, #24]
 8012940:	1869      	adds	r1, r5, r1
 8012942:	4299      	cmp	r1, r3
 8012944:	bfc6      	itte	gt
 8012946:	1b5b      	subgt	r3, r3, r5
 8012948:	3301      	addgt	r3, #1
 801294a:	9b06      	ldrle	r3, [sp, #24]
 801294c:	9307      	str	r3, [sp, #28]

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 801294e:	9b03      	ldr	r3, [sp, #12]
 8012950:	930b      	str	r3, [sp, #44]	; 0x2c
 8012952:	fb03 f508 	mul.w	r5, r3, r8
 8012956:	fb0b 5502 	mla	r5, fp, r2, r5
    map_p += bit_ofs >> 3;
 801295a:	eb06 06d5 	add.w	r6, r6, r5, lsr #3

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 801295e:	f005 0507 	and.w	r5, r5, #7

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8012962:	211c      	movs	r1, #28
 8012964:	a814      	add	r0, sp, #80	; 0x50
 8012966:	f00f f9ff 	bl	8021d68 <lv_memset_00>
    blend_dsc.color = dsc->color;
 801296a:	89bb      	ldrh	r3, [r7, #12]
 801296c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    blend_dsc.opa = dsc->opa;
 8012970:	7ebb      	ldrb	r3, [r7, #26]
 8012972:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    blend_dsc.blend_mode = dsc->blend_mode;
 8012976:	7fbb      	ldrb	r3, [r7, #30]
 8012978:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801297c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8012980:	f7f9 fec6 	bl	800c710 <_lv_refr_get_disp_refreshing>
 8012984:	f00d fd18 	bl	80203b8 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 8012988:	9b06      	ldr	r3, [sp, #24]
 801298a:	9a05      	ldr	r2, [sp, #20]
 801298c:	fb02 f303 	mul.w	r3, r2, r3
 8012990:	461f      	mov	r7, r3
 8012992:	4283      	cmp	r3, r0
 8012994:	bfa8      	it	ge
 8012996:	4607      	movge	r7, r0
 8012998:	9708      	str	r7, [sp, #32]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801299a:	4638      	mov	r0, r7
 801299c:	f00e ffb6 	bl	802190c <lv_mem_buf_get>
    blend_dsc.mask_buf = mask_buf;
 80129a0:	9006      	str	r0, [sp, #24]
 80129a2:	9017      	str	r0, [sp, #92]	; 0x5c
    int32_t mask_p = 0;

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 80129a4:	9803      	ldr	r0, [sp, #12]
 80129a6:	eb09 0200 	add.w	r2, r9, r0
 80129aa:	b290      	uxth	r0, r2
 80129ac:	b212      	sxth	r2, r2
 80129ae:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos->x - 1;
 80129b2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80129b6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80129ba:	444b      	add	r3, r9
 80129bc:	b21f      	sxth	r7, r3
 80129be:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos->y;
 80129c2:	44da      	add	sl, fp
 80129c4:	fa0f f18a 	sxth.w	r1, sl
 80129c8:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
 80129cc:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80129d0:	f1c0 0001 	rsb	r0, r0, #1
 80129d4:	4403      	add	r3, r0
 80129d6:	fa0f fc83 	sxth.w	ip, r3
 80129da:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    dest->x1 = src->x1;
 80129de:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    dest->y1 = src->y1;
 80129e2:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    dest->x2 = src->x2;
 80129e6:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
    mask_area.y2 = mask_area.y1 + row_end;
 80129ea:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80129ee:	44e2      	add	sl, ip
 80129f0:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 80129f4:	a812      	add	r0, sp, #72	; 0x48
 80129f6:	f7fc f80b 	bl	800ea10 <lv_draw_mask_is_any>
 80129fa:	9009      	str	r0, [sp, #36]	; 0x24
#endif
    blend_dsc.blend_area = &fill_area;
 80129fc:	ab10      	add	r3, sp, #64	; 0x40
 80129fe:	9314      	str	r3, [sp, #80]	; 0x50
    blend_dsc.mask_area = &fill_area;
 8012a00:	9319      	str	r3, [sp, #100]	; 0x64

    uint32_t col_bit_max = 8 - bpp;
 8012a02:	f1c8 0708 	rsb	r7, r8, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 8012a06:	9b05      	ldr	r3, [sp, #20]
 8012a08:	9903      	ldr	r1, [sp, #12]
 8012a0a:	440b      	add	r3, r1
 8012a0c:	464a      	mov	r2, r9
 8012a0e:	1a9b      	subs	r3, r3, r2
 8012a10:	fb08 f003 	mul.w	r0, r8, r3
 8012a14:	900a      	str	r0, [sp, #40]	; 0x28

    for(row = row_start ; row < row_end; row++) {
 8012a16:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8012a1a:	45e3      	cmp	fp, ip
 8012a1c:	f280 8087 	bge.w	8012b2e <lv_draw_sw_letter+0x3f2>
    int32_t mask_p = 0;
 8012a20:	f04f 0900 	mov.w	r9, #0
 8012a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a26:	1a53      	subs	r3, r2, r1
 8012a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a2a:	9a06      	ldr	r2, [sp, #24]
 8012a2c:	18d3      	adds	r3, r2, r3
 8012a2e:	930c      	str	r3, [sp, #48]	; 0x30
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
            if(letter_px) {
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
            }
            else {
                mask_buf[mask_p] = 0;
 8012a30:	46ca      	mov	sl, r9
 8012a32:	940e      	str	r4, [sp, #56]	; 0x38
 8012a34:	464c      	mov	r4, r9
 8012a36:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8012a3a:	e043      	b.n	8012ac4 <lv_draw_sw_letter+0x388>
    uint32_t bpp = g->bpp;
 8012a3c:	f04f 0801 	mov.w	r8, #1
            shades = 2;
 8012a40:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
 8012a42:	2280      	movs	r2, #128	; 0x80
 8012a44:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp1_opa_table;
 8012a46:	4a45      	ldr	r2, [pc, #276]	; (8012b5c <lv_draw_sw_letter+0x420>)
 8012a48:	920f      	str	r2, [sp, #60]	; 0x3c
 8012a4a:	e732      	b.n	80128b2 <lv_draw_sw_letter+0x176>
        if(prev_opa != opa || prev_bpp != bpp) {
 8012a4c:	4a42      	ldr	r2, [pc, #264]	; (8012b58 <lv_draw_sw_letter+0x41c>)
 8012a4e:	6812      	ldr	r2, [r2, #0]
 8012a50:	4542      	cmp	r2, r8
 8012a52:	f47f af35 	bne.w	80128c0 <lv_draw_sw_letter+0x184>
 8012a56:	e745      	b.n	80128e4 <lv_draw_sw_letter+0x1a8>
                bitmask = bitmask >> bpp;
            }
            else {
                col_bit = 0;
                bitmask = bitmask_init;
                map_p++;
 8012a58:	3601      	adds	r6, #1
                bitmask = bitmask_init;
 8012a5a:	9902      	ldr	r1, [sp, #8]
                col_bit = 0;
 8012a5c:	2500      	movs	r5, #0
        for(col = col_start; col < col_end; col++) {
 8012a5e:	3201      	adds	r2, #1
 8012a60:	4594      	cmp	ip, r2
 8012a62:	d012      	beq.n	8012a8a <lv_draw_sw_letter+0x34e>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8012a64:	7833      	ldrb	r3, [r6, #0]
 8012a66:	400b      	ands	r3, r1
 8012a68:	1b78      	subs	r0, r7, r5
 8012a6a:	40c3      	lsrs	r3, r0
            if(letter_px) {
 8012a6c:	f013 0fff 	tst.w	r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8012a70:	bf1d      	ittte	ne
 8012a72:	b2db      	uxtbne	r3, r3
 8012a74:	f819 3003 	ldrbne.w	r3, [r9, r3]
 8012a78:	7013      	strbne	r3, [r2, #0]
                mask_buf[mask_p] = 0;
 8012a7a:	f882 a000 	strbeq.w	sl, [r2]
            if(col_bit < col_bit_max) {
 8012a7e:	42af      	cmp	r7, r5
 8012a80:	d9ea      	bls.n	8012a58 <lv_draw_sw_letter+0x31c>
                col_bit += bpp;
 8012a82:	4445      	add	r5, r8
                bitmask = bitmask >> bpp;
 8012a84:	fa21 f108 	lsr.w	r1, r1, r8
 8012a88:	e7e9      	b.n	8012a5e <lv_draw_sw_letter+0x322>
            }

            /*Next mask byte*/
            mask_p++;
 8012a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a8c:	4473      	add	r3, lr
 8012a8e:	9305      	str	r3, [sp, #20]
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 8012a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a92:	bb3b      	cbnz	r3, 8012ae4 <lv_draw_sw_letter+0x3a8>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8012a94:	9b04      	ldr	r3, [sp, #16]
 8012a96:	9a03      	ldr	r2, [sp, #12]
 8012a98:	1a9b      	subs	r3, r3, r2
 8012a9a:	9c05      	ldr	r4, [sp, #20]
 8012a9c:	4423      	add	r3, r4
 8012a9e:	9a08      	ldr	r2, [sp, #32]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d932      	bls.n	8012b0a <lv_draw_sw_letter+0x3ce>
            fill_area.y2 ++;
 8012aa4:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area.y1 = fill_area.y2 + 1;
            fill_area.y2 = fill_area.y1;
            mask_p = 0;
        }

        col_bit += col_bit_row_ofs;
 8012aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ab0:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
 8012ab2:	eb06 06d5 	add.w	r6, r6, r5, lsr #3
        col_bit = col_bit & 0x7;
 8012ab6:	f005 0507 	and.w	r5, r5, #7
    for(row = row_start ; row < row_end; row++) {
 8012aba:	f10b 0b01 	add.w	fp, fp, #1
 8012abe:	9b07      	ldr	r3, [sp, #28]
 8012ac0:	455b      	cmp	r3, fp
 8012ac2:	d033      	beq.n	8012b2c <lv_draw_sw_letter+0x3f0>
        bitmask = bitmask_init >> col_bit;
 8012ac4:	9b02      	ldr	r3, [sp, #8]
 8012ac6:	fa23 f105 	lsr.w	r1, r3, r5
        for(col = col_start; col < col_end; col++) {
 8012aca:	9b03      	ldr	r3, [sp, #12]
 8012acc:	9a04      	ldr	r2, [sp, #16]
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	da06      	bge.n	8012ae0 <lv_draw_sw_letter+0x3a4>
 8012ad2:	46a6      	mov	lr, r4
 8012ad4:	9b06      	ldr	r3, [sp, #24]
 8012ad6:	191a      	adds	r2, r3, r4
 8012ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ada:	eb03 0c04 	add.w	ip, r3, r4
 8012ade:	e7c1      	b.n	8012a64 <lv_draw_sw_letter+0x328>
 8012ae0:	9405      	str	r4, [sp, #20]
 8012ae2:	e7d5      	b.n	8012a90 <lv_draw_sw_letter+0x354>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 8012ae4:	9b06      	ldr	r3, [sp, #24]
 8012ae6:	441c      	add	r4, r3
 8012ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aea:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012aee:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8012af2:	4620      	mov	r0, r4
 8012af4:	f7fb ff04 	bl	800e900 <lv_draw_mask_apply>
 8012af8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d1c9      	bne.n	8012a94 <lv_draw_sw_letter+0x358>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 8012b00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012b02:	4620      	mov	r0, r4
 8012b04:	f00f f930 	bl	8021d68 <lv_memset_00>
 8012b08:	e7c4      	b.n	8012a94 <lv_draw_sw_letter+0x358>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012b0a:	2302      	movs	r3, #2
 8012b0c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012b10:	a914      	add	r1, sp, #80	; 0x50
 8012b12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012b14:	f7fe f878 	bl	8010c08 <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 8012b18:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	b21b      	sxth	r3, r3
 8012b20:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
 8012b24:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
 8012b28:	4654      	mov	r4, sl
 8012b2a:	e7c0      	b.n	8012aae <lv_draw_sw_letter+0x372>
 8012b2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 8012b2e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8012b32:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d112      	bne.n	8012b60 <lv_draw_sw_letter+0x424>
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 8012b3a:	9806      	ldr	r0, [sp, #24]
 8012b3c:	f00e ff48 	bl	80219d0 <lv_mem_buf_release>
 8012b40:	e665      	b.n	801280e <lv_draw_sw_letter+0xd2>
 8012b42:	bf00      	nop
 8012b44:	0802cfb8 	.word	0x0802cfb8
 8012b48:	0802cfbc 	.word	0x0802cfbc
 8012b4c:	0802cfcc 	.word	0x0802cfcc
 8012b50:	20002678 	.word	0x20002678
 8012b54:	20002574 	.word	0x20002574
 8012b58:	20002674 	.word	0x20002674
 8012b5c:	0802cfb4 	.word	0x0802cfb4
        fill_area.y2--;
 8012b60:	3b01      	subs	r3, #1
 8012b62:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012b66:	2302      	movs	r3, #2
 8012b68:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012b6c:	a914      	add	r1, sp, #80	; 0x50
 8012b6e:	4620      	mov	r0, r4
 8012b70:	f7fe f84a 	bl	8010c08 <lv_draw_sw_blend>
        mask_p = 0;
 8012b74:	e7e1      	b.n	8012b3a <lv_draw_sw_letter+0x3fe>
 8012b76:	bf00      	nop

08012b78 <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 8012b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7c:	b0c7      	sub	sp, #284	; 0x11c
 8012b7e:	9003      	str	r0, [sp, #12]
 8012b80:	9204      	str	r2, [sp, #16]
 8012b82:	461e      	mov	r6, r3
 8012b84:	9305      	str	r3, [sp, #20]
    if(dsc->width == 0) return;
 8012b86:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f000 8345 	beq.w	801321a <lv_draw_sw_line+0x6a2>
 8012b90:	460c      	mov	r4, r1
 8012b92:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
 8012b94:	7a0a      	ldrb	r2, [r1, #8]
 8012b96:	2a02      	cmp	r2, #2
 8012b98:	f240 833f 	bls.w	801321a <lv_draw_sw_line+0x6a2>

    if(point1->x == point2->x && point1->y == point2->y) return;
 8012b9c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8012ba0:	f9b6 2000 	ldrsh.w	r2, [r6]
 8012ba4:	4291      	cmp	r1, r2
 8012ba6:	d106      	bne.n	8012bb6 <lv_draw_sw_line+0x3e>
 8012ba8:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8012bac:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8012bb0:	4285      	cmp	r5, r0
 8012bb2:	f000 8332 	beq.w	801321a <lv_draw_sw_line+0x6a2>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 8012bb6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012bba:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8012bbe:	4291      	cmp	r1, r2
 8012bc0:	bfd4      	ite	le
 8012bc2:	ebc3 0001 	rsble	r0, r3, r1
 8012bc6:	ebc3 0002 	rsbgt	r0, r3, r2
 8012bca:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 8012bce:	4291      	cmp	r1, r2
 8012bd0:	bfac      	ite	ge
 8012bd2:	1858      	addge	r0, r3, r1
 8012bd4:	1898      	addlt	r0, r3, r2
 8012bd6:	f8ad 0114 	strh.w	r0, [sp, #276]	; 0x114
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 8012bda:	9e05      	ldr	r6, [sp, #20]
 8012bdc:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8012be0:	9f04      	ldr	r7, [sp, #16]
 8012be2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012be6:	4291      	cmp	r1, r2
 8012be8:	bfd4      	ite	le
 8012bea:	ebc3 0001 	rsble	r0, r3, r1
 8012bee:	ebc3 0002 	rsbgt	r0, r3, r2
 8012bf2:	f8ad 0112 	strh.w	r0, [sp, #274]	; 0x112
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 8012bf6:	4291      	cmp	r1, r2
 8012bf8:	bfac      	ite	ge
 8012bfa:	185b      	addge	r3, r3, r1
 8012bfc:	189b      	addlt	r3, r3, r2
 8012bfe:	f8ad 3116 	strh.w	r3, [sp, #278]	; 0x116

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 8012c02:	9d03      	ldr	r5, [sp, #12]
 8012c04:	68aa      	ldr	r2, [r5, #8]
 8012c06:	a944      	add	r1, sp, #272	; 0x110
 8012c08:	4608      	mov	r0, r1
 8012c0a:	f00d ff18 	bl	8020a3e <_lv_area_intersect>
    if(!is_common) return;
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	f000 8303 	beq.w	801321a <lv_draw_sw_line+0x6a2>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8012c14:	68ab      	ldr	r3, [r5, #8]
 8012c16:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_line;
 8012c18:	ab44      	add	r3, sp, #272	; 0x110
 8012c1a:	60ab      	str	r3, [r5, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 8012c1c:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 8012c20:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
 8012c24:	42b5      	cmp	r5, r6
 8012c26:	f000 80d7 	beq.w	8012dd8 <lv_draw_sw_line+0x260>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 8012c2a:	9b04      	ldr	r3, [sp, #16]
 8012c2c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8012c30:	9b05      	ldr	r3, [sp, #20]
 8012c32:	f9b3 8000 	ldrsh.w	r8, [r3]
 8012c36:	4547      	cmp	r7, r8
 8012c38:	f000 8186 	beq.w	8012f48 <lv_draw_sw_line+0x3d0>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 8012c3c:	42b5      	cmp	r5, r6
 8012c3e:	db05      	blt.n	8012c4c <lv_draw_sw_line+0xd4>
 8012c40:	462b      	mov	r3, r5
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
 8012c42:	4635      	mov	r5, r6
        p2.y = point1->y;
 8012c44:	461e      	mov	r6, r3
    if(point1->y < point2->y) {
 8012c46:	463b      	mov	r3, r7
        p1.x = point2->x;
 8012c48:	4647      	mov	r7, r8
        p2.x = point1->x;
 8012c4a:	4698      	mov	r8, r3
    }

    int32_t xdiff = p2.x - p1.x;
 8012c4c:	eba8 0207 	sub.w	r2, r8, r7
 8012c50:	9208      	str	r2, [sp, #32]
    int32_t ydiff = p2.y - p1.y;
 8012c52:	1b73      	subs	r3, r6, r5
 8012c54:	930b      	str	r3, [sp, #44]	; 0x2c
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 8012c56:	ea82 7be2 	eor.w	fp, r2, r2, asr #31
 8012c5a:	ebab 7be2 	sub.w	fp, fp, r2, asr #31
 8012c5e:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 8012c62:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 8012c66:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 8012c6a:	45d3      	cmp	fp, sl
 8012c6c:	bfc7      	ittee	gt
 8012c6e:	ea4f 134a 	movgt.w	r3, sl, lsl #5
 8012c72:	fb93 f3fb 	sdivgt	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 8012c76:	ea4f 134b 	movle.w	r3, fp, lsl #5
 8012c7a:	fb93 f3fa 	sdivle	r3, r3, sl

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8012c7e:	49b1      	ldr	r1, [pc, #708]	; (8012f44 <lv_draw_sw_line+0x3cc>)
 8012c80:	f811 9003 	ldrb.w	r9, [r1, r3]
 8012c84:	fb02 f909 	mul.w	r9, r2, r9
 8012c88:	f109 093f 	add.w	r9, r9, #63	; 0x3f
 8012c8c:	ea4f 13e9 	mov.w	r3, r9, asr #7
 8012c90:	9307      	str	r3, [sp, #28]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 8012c92:	f3c9 13cf 	ubfx	r3, r9, #7, #16
 8012c96:	45b8      	cmp	r8, r7
 8012c98:	bfd4      	ite	le
 8012c9a:	ebc3 0208 	rsble	r2, r3, r8
 8012c9e:	ebc3 0207 	rsbgt	r2, r3, r7
 8012ca2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 8012ca6:	45b8      	cmp	r8, r7
 8012ca8:	bfac      	ite	ge
 8012caa:	eb03 0208 	addge.w	r2, r3, r8
 8012cae:	19da      	addlt	r2, r3, r7
 8012cb0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 8012cb4:	42ae      	cmp	r6, r5
 8012cb6:	bfd4      	ite	le
 8012cb8:	ebc3 0206 	rsble	r2, r3, r6
 8012cbc:	ebc3 0205 	rsbgt	r2, r3, r5
 8012cc0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 8012cc4:	42ae      	cmp	r6, r5
 8012cc6:	bfac      	ite	ge
 8012cc8:	199b      	addge	r3, r3, r6
 8012cca:	195b      	addlt	r3, r3, r5
 8012ccc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8012cd0:	aa44      	add	r2, sp, #272	; 0x110
 8012cd2:	a90c      	add	r1, sp, #48	; 0x30
 8012cd4:	4608      	mov	r0, r1
 8012cd6:	f00d feb2 	bl	8020a3e <_lv_area_intersect>
    if(is_common == false) return;
 8012cda:	2800      	cmp	r0, #0
 8012cdc:	f000 8296 	beq.w	801320c <lv_draw_sw_line+0x694>
    int32_t w_half0 = w >> 1;
 8012ce0:	ea4f 2229 	mov.w	r2, r9, asr #8
 8012ce4:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8012ce6:	9b07      	ldr	r3, [sp, #28]
 8012ce8:	f003 0301 	and.w	r3, r3, #1
 8012cec:	eb03 2329 	add.w	r3, r3, r9, asr #8
 8012cf0:	9307      	str	r3, [sp, #28]
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 8012cf2:	45d3      	cmp	fp, sl
 8012cf4:	f340 81e0 	ble.w	80130b8 <lv_draw_sw_line+0x540>
        if(xdiff > 0) {
 8012cf8:	9b08      	ldr	r3, [sp, #32]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	f340 81b6 	ble.w	801306c <lv_draw_sw_line+0x4f4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8012d00:	fa1f fa85 	uxth.w	sl, r5
 8012d04:	b293      	uxth	r3, r2
 8012d06:	fa1f f986 	uxth.w	r9, r6
 8012d0a:	ebaa 0203 	sub.w	r2, sl, r3
 8012d0e:	2100      	movs	r1, #0
 8012d10:	9101      	str	r1, [sp, #4]
 8012d12:	eba9 0303 	sub.w	r3, r9, r3
 8012d16:	b21b      	sxth	r3, r3
 8012d18:	9300      	str	r3, [sp, #0]
 8012d1a:	4643      	mov	r3, r8
 8012d1c:	b212      	sxth	r2, r2
 8012d1e:	4639      	mov	r1, r7
 8012d20:	a815      	add	r0, sp, #84	; 0x54
 8012d22:	f7fb fea9 	bl	800ea78 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8012d26:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012d2a:	eb0a 0203 	add.w	r2, sl, r3
 8012d2e:	2101      	movs	r1, #1
 8012d30:	9101      	str	r1, [sp, #4]
 8012d32:	4499      	add	r9, r3
 8012d34:	fa0f f389 	sxth.w	r3, r9
 8012d38:	9300      	str	r3, [sp, #0]
 8012d3a:	4643      	mov	r3, r8
 8012d3c:	b212      	sxth	r2, r2
 8012d3e:	4639      	mov	r1, r7
 8012d40:	a820      	add	r0, sp, #128	; 0x80
 8012d42:	f7fb fe99 	bl	800ea78 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 8012d46:	2100      	movs	r1, #0
 8012d48:	a815      	add	r0, sp, #84	; 0x54
 8012d4a:	f7fb fdb7 	bl	800e8bc <lv_draw_mask_add>
 8012d4e:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8012d50:	2100      	movs	r1, #0
 8012d52:	a820      	add	r0, sp, #128	; 0x80
 8012d54:	f7fb fdb2 	bl	800e8bc <lv_draw_mask_add>
 8012d58:	900a      	str	r0, [sp, #40]	; 0x28
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 8012d5a:	7a63      	ldrb	r3, [r4, #9]
 8012d5c:	f013 0f10 	tst.w	r3, #16
 8012d60:	f000 81cd 	beq.w	80130fe <lv_draw_sw_line+0x586>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 8012d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d68:	9308      	str	r3, [sp, #32]
    int16_t mask_top_id = LV_MASK_ID_INV;
 8012d6a:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012d6c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8012d70:	3701      	adds	r7, #1
 8012d72:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8012d76:	1aff      	subs	r7, r7, r3
 8012d78:	b23f      	sxth	r7, r7
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8012d7a:	f7f9 fcc9 	bl	800c710 <_lv_refr_get_disp_refreshing>
 8012d7e:	f00d fb1b 	bl	80203b8 <lv_disp_get_hor_res>
 8012d82:	4605      	mov	r5, r0
 8012d84:	4682      	mov	sl, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 8012d86:	a80c      	add	r0, sp, #48	; 0x30
 8012d88:	f00d fe2d 	bl	80209e6 <lv_area_get_size>
 8012d8c:	4285      	cmp	r5, r0
 8012d8e:	f200 81e1 	bhi.w	8013154 <lv_draw_sw_line+0x5dc>
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8012d92:	4650      	mov	r0, sl
 8012d94:	f00e fdba 	bl	802190c <lv_mem_buf_get>
 8012d98:	4681      	mov	r9, r0

    lv_coord_t y2 = blend_area.y2;
 8012d9a:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
    blend_area.y2 = blend_area.y1;
 8012d9e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012da2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    uint32_t mask_p = 0;
    lv_memset_ff(mask_buf, mask_buf_size);
 8012da6:	4651      	mov	r1, sl
 8012da8:	f00f f844 	bl	8021e34 <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8012dac:	211c      	movs	r1, #28
 8012dae:	a80e      	add	r0, sp, #56	; 0x38
 8012db0:	f00e ffda 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8012db4:	ab0c      	add	r3, sp, #48	; 0x30
 8012db6:	930e      	str	r3, [sp, #56]	; 0x38
    blend_dsc.color = dsc->color;
 8012db8:	8822      	ldrh	r2, [r4, #0]
 8012dba:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    blend_dsc.opa = dsc->opa;
 8012dbe:	7a22      	ldrb	r2, [r4, #8]
 8012dc0:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 8012dc4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    blend_dsc.mask_area = &blend_area;
 8012dc8:	9313      	str	r3, [sp, #76]	; 0x4c

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 8012dca:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8012dce:	45b3      	cmp	fp, r6
 8012dd0:	f2c0 81f9 	blt.w	80131c6 <lv_draw_sw_line+0x64e>
    uint32_t mask_p = 0;
 8012dd4:	2500      	movs	r5, #0
 8012dd6:	e1df      	b.n	8013198 <lv_draw_sw_line+0x620>
    int32_t w = dsc->width - 1;
 8012dd8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012ddc:	3a01      	subs	r2, #1
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 8012dde:	9b05      	ldr	r3, [sp, #20]
 8012de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012de4:	9904      	ldr	r1, [sp, #16]
 8012de6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8012dea:	4618      	mov	r0, r3
 8012dec:	428b      	cmp	r3, r1
 8012dee:	bfa8      	it	ge
 8012df0:	4608      	movge	r0, r1
 8012df2:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 8012df6:	428b      	cmp	r3, r1
 8012df8:	bfb8      	it	lt
 8012dfa:	460b      	movlt	r3, r1
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    blend_area.y1 = point1->y - w_half1;
 8012e02:	b2ad      	uxth	r5, r5
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8012e04:	f002 0301 	and.w	r3, r2, #1
 8012e08:	eb03 0362 	add.w	r3, r3, r2, asr #1
    blend_area.y1 = point1->y - w_half1;
 8012e0c:	1aeb      	subs	r3, r5, r3
 8012e0e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = point1->y + w_half0;
 8012e12:	eb05 0562 	add.w	r5, r5, r2, asr #1
 8012e16:	f8ad 50b2 	strh.w	r5, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8012e1a:	aa44      	add	r2, sp, #272	; 0x110
 8012e1c:	a92b      	add	r1, sp, #172	; 0xac
 8012e1e:	4608      	mov	r0, r1
 8012e20:	f00d fe0d 	bl	8020a3e <_lv_area_intersect>
    if(!is_common) return;
 8012e24:	4681      	mov	r9, r0
 8012e26:	2800      	cmp	r0, #0
 8012e28:	f000 81f0 	beq.w	801320c <lv_draw_sw_line+0x694>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8012e2c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f000 82a7 	beq.w	8013384 <lv_draw_sw_line+0x80c>
 8012e36:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f000 82a2 	beq.w	8013384 <lv_draw_sw_line+0x80c>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8012e40:	a82b      	add	r0, sp, #172	; 0xac
 8012e42:	f7fb fde5 	bl	800ea10 <lv_draw_mask_is_any>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	f040 8249 	bne.w	80132de <lv_draw_sw_line+0x766>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8012e4c:	211c      	movs	r1, #28
 8012e4e:	a836      	add	r0, sp, #216	; 0xd8
 8012e50:	f00e ff8a 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8012e54:	ab2b      	add	r3, sp, #172	; 0xac
 8012e56:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 8012e58:	8823      	ldrh	r3, [r4, #0]
 8012e5a:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8012e5e:	7a23      	ldrb	r3, [r4, #8]
 8012e60:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8012e64:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8012e68:	f8bd 60b0 	ldrh.w	r6, [sp, #176]	; 0xb0
 8012e6c:	3601      	adds	r6, #1
 8012e6e:	1af6      	subs	r6, r6, r3
 8012e70:	b236      	sxth	r6, r6
        lv_coord_t y2 = blend_area.y2;
 8012e72:	f9bd 80b2 	ldrsh.w	r8, [sp, #178]	; 0xb2
        blend_area.y2 = blend_area.y1;
 8012e76:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
 8012e7a:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8012e7e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012e82:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012e86:	440a      	add	r2, r1
 8012e88:	fb93 f1f2 	sdiv	r1, r3, r2
 8012e8c:	fb02 3311 	mls	r3, r2, r1, r3
 8012e90:	b21b      	sxth	r3, r3
 8012e92:	9307      	str	r3, [sp, #28]
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 8012e94:	46b3      	mov	fp, r6
 8012e96:	4630      	mov	r0, r6
 8012e98:	f00e fd38 	bl	802190c <lv_mem_buf_get>
 8012e9c:	4607      	mov	r7, r0
        blend_dsc.mask_buf = mask_buf;
 8012e9e:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 8012ea0:	ab2b      	add	r3, sp, #172	; 0xac
 8012ea2:	933b      	str	r3, [sp, #236]	; 0xec
        for(h = blend_area.y1; h <= y2; h++) {
 8012ea4:	f9bd 50ae 	ldrsh.w	r5, [sp, #174]	; 0xae
 8012ea8:	46c2      	mov	sl, r8
 8012eaa:	4545      	cmp	r5, r8
 8012eac:	dc45      	bgt.n	8012f3a <lv_draw_sw_line+0x3c2>
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8012eae:	f04f 0800 	mov.w	r8, #0
 8012eb2:	e02b      	b.n	8012f0c <lv_draw_sw_line+0x394>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8012eb4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8012eb8:	4403      	add	r3, r0
 8012eba:	429a      	cmp	r2, r3
                            mask_buf[i] = 0x00;
 8012ebc:	bfba      	itte	lt
 8012ebe:	f807 8001 	strblt.w	r8, [r7, r1]
 8012ec2:	4613      	movlt	r3, r2
                            dash_cnt = 0;
 8012ec4:	4643      	movge	r3, r8
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8012ec6:	3101      	adds	r1, #1
 8012ec8:	b209      	sxth	r1, r1
 8012eca:	3301      	adds	r3, #1
 8012ecc:	b21a      	sxth	r2, r3
 8012ece:	42b1      	cmp	r1, r6
 8012ed0:	da07      	bge.n	8012ee2 <lv_draw_sw_line+0x36a>
                        if(dash_cnt <= dsc->dash_width) {
 8012ed2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	dcec      	bgt.n	8012eb4 <lv_draw_sw_line+0x33c>
                            i += diff;
 8012eda:	4419      	add	r1, r3
 8012edc:	1a89      	subs	r1, r1, r2
 8012ede:	b209      	sxth	r1, r1
                            dash_cnt += diff;
 8012ee0:	e7f1      	b.n	8012ec6 <lv_draw_sw_line+0x34e>
                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012ee2:	f04f 0302 	mov.w	r3, #2
 8012ee6:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012eea:	a936      	add	r1, sp, #216	; 0xd8
 8012eec:	9803      	ldr	r0, [sp, #12]
 8012eee:	f7fd fe8b 	bl	8010c08 <lv_draw_sw_blend>
            blend_area.y1++;
 8012ef2:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 8012efc:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8012f00:	3301      	adds	r3, #1
 8012f02:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 8012f06:	3501      	adds	r5, #1
 8012f08:	4555      	cmp	r5, sl
 8012f0a:	dc16      	bgt.n	8012f3a <lv_draw_sw_line+0x3c2>
            lv_memset_ff(mask_buf, blend_area_w);
 8012f0c:	4659      	mov	r1, fp
 8012f0e:	4638      	mov	r0, r7
 8012f10:	f00e ff90 	bl	8021e34 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 8012f14:	4633      	mov	r3, r6
 8012f16:	b22a      	sxth	r2, r5
 8012f18:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 8012f1c:	4638      	mov	r0, r7
 8012f1e:	f7fb fcef 	bl	800e900 <lv_draw_mask_apply>
 8012f22:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 8012f26:	f1b9 0f00 	cmp.w	r9, #0
 8012f2a:	d0de      	beq.n	8012eea <lv_draw_sw_line+0x372>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d0dc      	beq.n	8012eea <lv_draw_sw_line+0x372>
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8012f30:	2e00      	cmp	r6, #0
 8012f32:	ddd6      	ble.n	8012ee2 <lv_draw_sw_line+0x36a>
                    lv_coord_t dash_cnt = dash_start;
 8012f34:	9a07      	ldr	r2, [sp, #28]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8012f36:	4641      	mov	r1, r8
 8012f38:	e7cb      	b.n	8012ed2 <lv_draw_sw_line+0x35a>
        lv_mem_buf_release(mask_buf);
 8012f3a:	4638      	mov	r0, r7
 8012f3c:	f00e fd48 	bl	80219d0 <lv_mem_buf_release>
 8012f40:	e164      	b.n	801320c <lv_draw_sw_line+0x694>
 8012f42:	bf00      	nop
 8012f44:	0802d0cc 	.word	0x0802d0cc
    int32_t w = dsc->width - 1;
 8012f48:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012f4c:	3b01      	subs	r3, #1
    blend_area.x1 = point1->x - w_half1;
 8012f4e:	b2bf      	uxth	r7, r7
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8012f50:	f003 0201 	and.w	r2, r3, #1
 8012f54:	eb02 0263 	add.w	r2, r2, r3, asr #1
    blend_area.x1 = point1->x - w_half1;
 8012f58:	1aba      	subs	r2, r7, r2
 8012f5a:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
    blend_area.x2 = point1->x + w_half0;
 8012f5e:	eb07 0763 	add.w	r7, r7, r3, asr #1
 8012f62:	f8ad 70b0 	strh.w	r7, [sp, #176]	; 0xb0
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 8012f66:	462b      	mov	r3, r5
 8012f68:	42b5      	cmp	r5, r6
 8012f6a:	bfa8      	it	ge
 8012f6c:	4633      	movge	r3, r6
 8012f6e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 8012f72:	42ae      	cmp	r6, r5
 8012f74:	bfb8      	it	lt
 8012f76:	462e      	movlt	r6, r5
 8012f78:	3e01      	subs	r6, #1
 8012f7a:	f8ad 60b2 	strh.w	r6, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8012f7e:	aa44      	add	r2, sp, #272	; 0x110
 8012f80:	a92b      	add	r1, sp, #172	; 0xac
 8012f82:	4608      	mov	r0, r1
 8012f84:	f00d fd5b 	bl	8020a3e <_lv_area_intersect>
    if(!is_common) return;
 8012f88:	4606      	mov	r6, r0
 8012f8a:	2800      	cmp	r0, #0
 8012f8c:	f000 813e 	beq.w	801320c <lv_draw_sw_line+0x694>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8012f90:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	f000 821c 	beq.w	80133d2 <lv_draw_sw_line+0x85a>
 8012f9a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	f000 8217 	beq.w	80133d2 <lv_draw_sw_line+0x85a>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8012fa4:	a82b      	add	r0, sp, #172	; 0xac
 8012fa6:	f7fb fd33 	bl	800ea10 <lv_draw_mask_is_any>
 8012faa:	4682      	mov	sl, r0
 8012fac:	2800      	cmp	r0, #0
 8012fae:	f040 819a 	bne.w	80132e6 <lv_draw_sw_line+0x76e>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8012fb2:	211c      	movs	r1, #28
 8012fb4:	a836      	add	r0, sp, #216	; 0xd8
 8012fb6:	f00e fed7 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8012fba:	ad2b      	add	r5, sp, #172	; 0xac
 8012fbc:	9536      	str	r5, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 8012fbe:	8823      	ldrh	r3, [r4, #0]
 8012fc0:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8012fc4:	7a23      	ldrb	r3, [r4, #8]
 8012fc6:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8012fca:	f8bd 80b0 	ldrh.w	r8, [sp, #176]	; 0xb0
 8012fce:	f108 0801 	add.w	r8, r8, #1
 8012fd2:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 8012fd6:	eba8 0803 	sub.w	r8, r8, r3
 8012fda:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t y2 = blend_area.y2;
 8012fde:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 8012fe2:	469b      	mov	fp, r3
        blend_area.y2 = blend_area.y1;
 8012fe4:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 8012fe8:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 8012fec:	46c1      	mov	r9, r8
 8012fee:	4640      	mov	r0, r8
 8012ff0:	f00e fc8c 	bl	802190c <lv_mem_buf_get>
 8012ff4:	4607      	mov	r7, r0
        blend_dsc.mask_buf = mask_buf;
 8012ff6:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 8012ff8:	953b      	str	r5, [sp, #236]	; 0xec
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8012ffa:	46b2      	mov	sl, r6
 8012ffc:	e19a      	b.n	8013334 <lv_draw_sw_line+0x7bc>
                dash_cnt ++;
 8012ffe:	3601      	adds	r6, #1
 8013000:	b236      	sxth	r6, r6
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013002:	a936      	add	r1, sp, #216	; 0xd8
 8013004:	9803      	ldr	r0, [sp, #12]
 8013006:	f7fd fdff 	bl	8010c08 <lv_draw_sw_blend>
            blend_area.y1++;
 801300a:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 801300e:	3301      	adds	r3, #1
 8013010:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 8013014:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 8013018:	3301      	adds	r3, #1
 801301a:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 801301e:	3501      	adds	r5, #1
 8013020:	45ab      	cmp	fp, r5
 8013022:	db1e      	blt.n	8013062 <lv_draw_sw_line+0x4ea>
            lv_memset_ff(mask_buf, draw_area_w);
 8013024:	4649      	mov	r1, r9
 8013026:	4638      	mov	r0, r7
 8013028:	f00e ff04 	bl	8021e34 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 801302c:	4643      	mov	r3, r8
 801302e:	b22a      	sxth	r2, r5
 8013030:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 8013034:	4638      	mov	r0, r7
 8013036:	f7fb fc63 	bl	800e900 <lv_draw_mask_apply>
 801303a:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 801303e:	2c00      	cmp	r4, #0
 8013040:	d0df      	beq.n	8013002 <lv_draw_sw_line+0x48a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8013042:	2800      	cmp	r0, #0
 8013044:	d0db      	beq.n	8012ffe <lv_draw_sw_line+0x486>
                    if(dash_cnt > dsc->dash_width) {
 8013046:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801304a:	42b2      	cmp	r2, r6
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 801304c:	bfbc      	itt	lt
 801304e:	2300      	movlt	r3, #0
 8013050:	f88d 30e8 	strblt.w	r3, [sp, #232]	; 0xe8
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8013054:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8013058:	4413      	add	r3, r2
                        dash_cnt = 0;
 801305a:	429e      	cmp	r6, r3
 801305c:	bfa8      	it	ge
 801305e:	2600      	movge	r6, #0
 8013060:	e7cd      	b.n	8012ffe <lv_draw_sw_line+0x486>
 8013062:	4654      	mov	r4, sl
        lv_mem_buf_release(mask_buf);
 8013064:	4638      	mov	r0, r7
 8013066:	f00e fcb3 	bl	80219d0 <lv_mem_buf_release>
 801306a:	e0cf      	b.n	801320c <lv_draw_sw_line+0x694>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 801306c:	fa1f fb85 	uxth.w	fp, r5
 8013070:	f8bd 901c 	ldrh.w	r9, [sp, #28]
 8013074:	fa1f fa86 	uxth.w	sl, r6
 8013078:	eb0b 0209 	add.w	r2, fp, r9
 801307c:	2300      	movs	r3, #0
 801307e:	9301      	str	r3, [sp, #4]
 8013080:	44d1      	add	r9, sl
 8013082:	fa0f f389 	sxth.w	r3, r9
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	4643      	mov	r3, r8
 801308a:	b212      	sxth	r2, r2
 801308c:	4639      	mov	r1, r7
 801308e:	a815      	add	r0, sp, #84	; 0x54
 8013090:	f7fb fcf2 	bl	800ea78 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8013094:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013098:	ebab 0203 	sub.w	r2, fp, r3
 801309c:	2101      	movs	r1, #1
 801309e:	9101      	str	r1, [sp, #4]
 80130a0:	ebaa 0a03 	sub.w	sl, sl, r3
 80130a4:	fa0f f38a 	sxth.w	r3, sl
 80130a8:	9300      	str	r3, [sp, #0]
 80130aa:	4643      	mov	r3, r8
 80130ac:	b212      	sxth	r2, r2
 80130ae:	4639      	mov	r1, r7
 80130b0:	a820      	add	r0, sp, #128	; 0x80
 80130b2:	f7fb fce1 	bl	800ea78 <lv_draw_mask_line_points_init>
 80130b6:	e646      	b.n	8012d46 <lv_draw_sw_line+0x1ce>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 80130b8:	fa1f fb87 	uxth.w	fp, r7
 80130bc:	f8bd 901c 	ldrh.w	r9, [sp, #28]
 80130c0:	fa1f fa88 	uxth.w	sl, r8
 80130c4:	eb09 030a 	add.w	r3, r9, sl
 80130c8:	44d9      	add	r9, fp
 80130ca:	2200      	movs	r2, #0
 80130cc:	9201      	str	r2, [sp, #4]
 80130ce:	9600      	str	r6, [sp, #0]
 80130d0:	b21b      	sxth	r3, r3
 80130d2:	462a      	mov	r2, r5
 80130d4:	fa0f f189 	sxth.w	r1, r9
 80130d8:	a815      	add	r0, sp, #84	; 0x54
 80130da:	f7fb fccd 	bl	800ea78 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 80130de:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80130e2:	ebaa 0301 	sub.w	r3, sl, r1
 80130e6:	ebab 0101 	sub.w	r1, fp, r1
 80130ea:	2201      	movs	r2, #1
 80130ec:	9201      	str	r2, [sp, #4]
 80130ee:	9600      	str	r6, [sp, #0]
 80130f0:	b21b      	sxth	r3, r3
 80130f2:	462a      	mov	r2, r5
 80130f4:	b209      	sxth	r1, r1
 80130f6:	a820      	add	r0, sp, #128	; 0x80
 80130f8:	f7fb fcbe 	bl	800ea78 <lv_draw_mask_line_points_init>
 80130fc:	e623      	b.n	8012d46 <lv_draw_sw_line+0x1ce>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 80130fe:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8013102:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8013106:	eba7 030a 	sub.w	r3, r7, sl
 801310a:	2203      	movs	r2, #3
 801310c:	9201      	str	r2, [sp, #4]
 801310e:	eb09 0205 	add.w	r2, r9, r5
 8013112:	b212      	sxth	r2, r2
 8013114:	9200      	str	r2, [sp, #0]
 8013116:	b21b      	sxth	r3, r3
 8013118:	462a      	mov	r2, r5
 801311a:	4639      	mov	r1, r7
 801311c:	a82b      	add	r0, sp, #172	; 0xac
 801311e:	f7fb fcab 	bl	800ea78 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 8013122:	eba8 030a 	sub.w	r3, r8, sl
 8013126:	2202      	movs	r2, #2
 8013128:	9201      	str	r2, [sp, #4]
 801312a:	44b1      	add	r9, r6
 801312c:	fa0f f289 	sxth.w	r2, r9
 8013130:	9200      	str	r2, [sp, #0]
 8013132:	b21b      	sxth	r3, r3
 8013134:	4632      	mov	r2, r6
 8013136:	4641      	mov	r1, r8
 8013138:	a836      	add	r0, sp, #216	; 0xd8
 801313a:	f7fb fc9d 	bl	800ea78 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 801313e:	2100      	movs	r1, #0
 8013140:	a82b      	add	r0, sp, #172	; 0xac
 8013142:	f7fb fbbb 	bl	800e8bc <lv_draw_mask_add>
 8013146:	9007      	str	r0, [sp, #28]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 8013148:	2100      	movs	r1, #0
 801314a:	a836      	add	r0, sp, #216	; 0xd8
 801314c:	f7fb fbb6 	bl	800e8bc <lv_draw_mask_add>
 8013150:	9008      	str	r0, [sp, #32]
 8013152:	e60b      	b.n	8012d6c <lv_draw_sw_line+0x1f4>
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 8013154:	a80c      	add	r0, sp, #48	; 0x30
 8013156:	f00d fc46 	bl	80209e6 <lv_area_get_size>
 801315a:	4682      	mov	sl, r0
 801315c:	e619      	b.n	8012d92 <lv_draw_sw_line+0x21a>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 801315e:	4639      	mov	r1, r7
 8013160:	4640      	mov	r0, r8
 8013162:	f00e fe01 	bl	8021d68 <lv_memset_00>
 8013166:	e024      	b.n	80131b2 <lv_draw_sw_line+0x63a>
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            blend_area.y2 ++;
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8013168:	f04f 0302 	mov.w	r3, #2
 801316c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013170:	a90e      	add	r1, sp, #56	; 0x38
 8013172:	9803      	ldr	r0, [sp, #12]
 8013174:	f7fd fd48 	bl	8010c08 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 8013178:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801317c:	3301      	adds	r3, #1
 801317e:	b21b      	sxth	r3, r3
 8013180:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            blend_area.y2 = blend_area.y1;
 8013184:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            lv_memset_ff(mask_buf, mask_buf_size);
 8013188:	4651      	mov	r1, sl
 801318a:	4648      	mov	r0, r9
 801318c:	f00e fe52 	bl	8021e34 <lv_memset_ff>
            mask_p = 0;
 8013190:	2500      	movs	r5, #0
    for(h = blend_area.y1; h <= y2; h++) {
 8013192:	3601      	adds	r6, #1
 8013194:	45b3      	cmp	fp, r6
 8013196:	db16      	blt.n	80131c6 <lv_draw_sw_line+0x64e>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 8013198:	eb09 0805 	add.w	r8, r9, r5
 801319c:	463b      	mov	r3, r7
 801319e:	b232      	sxth	r2, r6
 80131a0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80131a4:	4640      	mov	r0, r8
 80131a6:	f7fb fbab 	bl	800e900 <lv_draw_mask_apply>
 80131aa:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80131ae:	2800      	cmp	r0, #0
 80131b0:	d0d5      	beq.n	801315e <lv_draw_sw_line+0x5e6>
        mask_p += draw_area_w;
 80131b2:	443d      	add	r5, r7
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 80131b4:	197b      	adds	r3, r7, r5
 80131b6:	459a      	cmp	sl, r3
 80131b8:	d9d6      	bls.n	8013168 <lv_draw_sw_line+0x5f0>
            blend_area.y2 ++;
 80131ba:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80131be:	3301      	adds	r3, #1
 80131c0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80131c4:	e7e5      	b.n	8013192 <lv_draw_sw_line+0x61a>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 80131c6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80131ca:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d126      	bne.n	8013220 <lv_draw_sw_line+0x6a8>
        blend_area.y2--;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    lv_mem_buf_release(mask_buf);
 80131d2:	4648      	mov	r0, r9
 80131d4:	f00e fbfc 	bl	80219d0 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 80131d8:	a815      	add	r0, sp, #84	; 0x54
 80131da:	f7fb fbe3 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 80131de:	a820      	add	r0, sp, #128	; 0x80
 80131e0:	f7fb fbe0 	bl	800e9a4 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 80131e4:	9b07      	ldr	r3, [sp, #28]
 80131e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131ea:	d124      	bne.n	8013236 <lv_draw_sw_line+0x6be>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 80131ec:	9b08      	ldr	r3, [sp, #32]
 80131ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131f2:	d124      	bne.n	801323e <lv_draw_sw_line+0x6c6>
    lv_draw_mask_remove_id(mask_left_id);
 80131f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131f6:	f7fb fbab 	bl	800e950 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 80131fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80131fc:	f7fb fba8 	bl	800e950 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 8013200:	9807      	ldr	r0, [sp, #28]
 8013202:	f7fb fba5 	bl	800e950 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 8013206:	9808      	ldr	r0, [sp, #32]
 8013208:	f7fb fba2 	bl	800e950 <lv_draw_mask_remove_id>
    if(dsc->round_end || dsc->round_start) {
 801320c:	7a63      	ldrb	r3, [r4, #9]
 801320e:	f013 0f0c 	tst.w	r3, #12
 8013212:	d118      	bne.n	8013246 <lv_draw_sw_line+0x6ce>
    draw_ctx->clip_area = clip_area_ori;
 8013214:	9b03      	ldr	r3, [sp, #12]
 8013216:	9a06      	ldr	r2, [sp, #24]
 8013218:	609a      	str	r2, [r3, #8]
}
 801321a:	b047      	add	sp, #284	; 0x11c
 801321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blend_area.y2--;
 8013220:	3b01      	subs	r3, #1
 8013222:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8013226:	2302      	movs	r3, #2
 8013228:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801322c:	a90e      	add	r1, sp, #56	; 0x38
 801322e:	9803      	ldr	r0, [sp, #12]
 8013230:	f7fd fcea 	bl	8010c08 <lv_draw_sw_blend>
 8013234:	e7cd      	b.n	80131d2 <lv_draw_sw_line+0x65a>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 8013236:	a82b      	add	r0, sp, #172	; 0xac
 8013238:	f7fb fbb4 	bl	800e9a4 <lv_draw_mask_free_param>
 801323c:	e7d6      	b.n	80131ec <lv_draw_sw_line+0x674>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 801323e:	a836      	add	r0, sp, #216	; 0xd8
 8013240:	f7fb fbb0 	bl	800e9a4 <lv_draw_mask_free_param>
 8013244:	e7d6      	b.n	80131f4 <lv_draw_sw_line+0x67c>
        lv_draw_rect_dsc_init(&cir_dsc);
 8013246:	a836      	add	r0, sp, #216	; 0xd8
 8013248:	f7fb ff8e 	bl	800f168 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 801324c:	8823      	ldrh	r3, [r4, #0]
 801324e:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8013252:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013256:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
        cir_dsc.bg_opa = dsc->opa;
 801325a:	7a23      	ldrb	r3, [r4, #8]
 801325c:	f88d 30db 	strb.w	r3, [sp, #219]	; 0xdb
        int32_t r = (dsc->width >> 1);
 8013260:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013264:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 8013266:	f083 0301 	eor.w	r3, r3, #1
 801326a:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
 801326e:	7a63      	ldrb	r3, [r4, #9]
 8013270:	f013 0f04 	tst.w	r3, #4
 8013274:	d11b      	bne.n	80132ae <lv_draw_sw_line+0x736>
        if(dsc->round_end) {
 8013276:	7a63      	ldrb	r3, [r4, #9]
 8013278:	f013 0f08 	tst.w	r3, #8
 801327c:	d0ca      	beq.n	8013214 <lv_draw_sw_line+0x69c>
            cir_area.x1 = point2->x - r;
 801327e:	9905      	ldr	r1, [sp, #20]
 8013280:	880b      	ldrh	r3, [r1, #0]
 8013282:	b2b6      	uxth	r6, r6
 8013284:	1b9a      	subs	r2, r3, r6
 8013286:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
            cir_area.y1 = point2->y - r;
 801328a:	884a      	ldrh	r2, [r1, #2]
 801328c:	1b91      	subs	r1, r2, r6
 801328e:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
            cir_area.x2 = point2->x + r - r_corr;
 8013292:	4433      	add	r3, r6
 8013294:	1b5b      	subs	r3, r3, r5
 8013296:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
            cir_area.y2 = point2->y + r - r_corr ;
 801329a:	4416      	add	r6, r2
 801329c:	1b75      	subs	r5, r6, r5
 801329e:	f8ad 50b2 	strh.w	r5, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 80132a2:	aa2b      	add	r2, sp, #172	; 0xac
 80132a4:	a936      	add	r1, sp, #216	; 0xd8
 80132a6:	9803      	ldr	r0, [sp, #12]
 80132a8:	f7fb ffba 	bl	800f220 <lv_draw_rect>
 80132ac:	e7b2      	b.n	8013214 <lv_draw_sw_line+0x69c>
            cir_area.x1 = point1->x - r;
 80132ae:	9804      	ldr	r0, [sp, #16]
 80132b0:	8802      	ldrh	r2, [r0, #0]
 80132b2:	b2b3      	uxth	r3, r6
 80132b4:	1ad1      	subs	r1, r2, r3
 80132b6:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
            cir_area.y1 = point1->y - r;
 80132ba:	8841      	ldrh	r1, [r0, #2]
 80132bc:	1ac8      	subs	r0, r1, r3
 80132be:	f8ad 00ae 	strh.w	r0, [sp, #174]	; 0xae
            cir_area.x2 = point1->x + r - r_corr;
 80132c2:	441a      	add	r2, r3
 80132c4:	1b52      	subs	r2, r2, r5
 80132c6:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
            cir_area.y2 = point1->y + r - r_corr ;
 80132ca:	440b      	add	r3, r1
 80132cc:	1b5b      	subs	r3, r3, r5
 80132ce:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 80132d2:	aa2b      	add	r2, sp, #172	; 0xac
 80132d4:	a936      	add	r1, sp, #216	; 0xd8
 80132d6:	9803      	ldr	r0, [sp, #12]
 80132d8:	f7fb ffa2 	bl	800f220 <lv_draw_rect>
 80132dc:	e7cb      	b.n	8013276 <lv_draw_sw_line+0x6fe>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80132de:	4681      	mov	r9, r0
 80132e0:	e057      	b.n	8013392 <lv_draw_sw_line+0x81a>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80132e2:	f04f 0a00 	mov.w	sl, #0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 80132e6:	211c      	movs	r1, #28
 80132e8:	a836      	add	r0, sp, #216	; 0xd8
 80132ea:	f00e fd3d 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 80132ee:	ad2b      	add	r5, sp, #172	; 0xac
 80132f0:	9536      	str	r5, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 80132f2:	8823      	ldrh	r3, [r4, #0]
 80132f4:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 80132f8:	7a23      	ldrb	r3, [r4, #8]
 80132fa:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 80132fe:	f8bd 80b0 	ldrh.w	r8, [sp, #176]	; 0xb0
 8013302:	f108 0801 	add.w	r8, r8, #1
 8013306:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 801330a:	eba8 0803 	sub.w	r8, r8, r3
 801330e:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t y2 = blend_area.y2;
 8013312:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 8013316:	469b      	mov	fp, r3
        blend_area.y2 = blend_area.y1;
 8013318:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 801331c:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 8013320:	46c1      	mov	r9, r8
 8013322:	4640      	mov	r0, r8
 8013324:	f00e faf2 	bl	802190c <lv_mem_buf_get>
 8013328:	4607      	mov	r7, r0
        blend_dsc.mask_buf = mask_buf;
 801332a:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 801332c:	953b      	str	r5, [sp, #236]	; 0xec
        if(dashed) {
 801332e:	f1ba 0f00 	cmp.w	sl, #0
 8013332:	d014      	beq.n	801335e <lv_draw_sw_line+0x7e6>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 8013334:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 8013338:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 801333c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013340:	4416      	add	r6, r2
 8013342:	fb93 f2f6 	sdiv	r2, r3, r6
 8013346:	fb06 3312 	mls	r3, r6, r2, r3
 801334a:	b21e      	sxth	r6, r3
        for(h = blend_area.y1; h <= y2; h++) {
 801334c:	f9bd 50ae 	ldrsh.w	r5, [sp, #174]	; 0xae
 8013350:	45ab      	cmp	fp, r5
 8013352:	f6ff ae87 	blt.w	8013064 <lv_draw_sw_line+0x4ec>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013356:	4623      	mov	r3, r4
 8013358:	4654      	mov	r4, sl
 801335a:	469a      	mov	sl, r3
 801335c:	e662      	b.n	8013024 <lv_draw_sw_line+0x4ac>
        lv_coord_t dash_start = 0;
 801335e:	2600      	movs	r6, #0
 8013360:	e7f4      	b.n	801334c <lv_draw_sw_line+0x7d4>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013362:	211c      	movs	r1, #28
 8013364:	a836      	add	r0, sp, #216	; 0xd8
 8013366:	f00e fcff 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801336a:	ab2b      	add	r3, sp, #172	; 0xac
 801336c:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 801336e:	8823      	ldrh	r3, [r4, #0]
 8013370:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8013374:	7a23      	ldrb	r3, [r4, #8]
 8013376:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801337a:	a936      	add	r1, sp, #216	; 0xd8
 801337c:	9803      	ldr	r0, [sp, #12]
 801337e:	f7fd fc43 	bl	8010c08 <lv_draw_sw_blend>
 8013382:	e743      	b.n	801320c <lv_draw_sw_line+0x694>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8013384:	a82b      	add	r0, sp, #172	; 0xac
 8013386:	f7fb fb43 	bl	800ea10 <lv_draw_mask_is_any>
 801338a:	2800      	cmp	r0, #0
 801338c:	d0e9      	beq.n	8013362 <lv_draw_sw_line+0x7ea>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 801338e:	f04f 0900 	mov.w	r9, #0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013392:	211c      	movs	r1, #28
 8013394:	a836      	add	r0, sp, #216	; 0xd8
 8013396:	f00e fce7 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801339a:	ab2b      	add	r3, sp, #172	; 0xac
 801339c:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 801339e:	8823      	ldrh	r3, [r4, #0]
 80133a0:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 80133a4:	7a23      	ldrb	r3, [r4, #8]
 80133a6:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 80133aa:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80133ae:	f8bd 60b0 	ldrh.w	r6, [sp, #176]	; 0xb0
 80133b2:	3601      	adds	r6, #1
 80133b4:	1af6      	subs	r6, r6, r3
 80133b6:	b236      	sxth	r6, r6
        lv_coord_t y2 = blend_area.y2;
 80133b8:	f9bd 80b2 	ldrsh.w	r8, [sp, #178]	; 0xb2
        blend_area.y2 = blend_area.y1;
 80133bc:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
 80133c0:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
        if(dashed) {
 80133c4:	f1b9 0f00 	cmp.w	r9, #0
 80133c8:	f47f ad59 	bne.w	8012e7e <lv_draw_sw_line+0x306>
        lv_coord_t dash_start = 0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	9307      	str	r3, [sp, #28]
 80133d0:	e560      	b.n	8012e94 <lv_draw_sw_line+0x31c>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 80133d2:	a82b      	add	r0, sp, #172	; 0xac
 80133d4:	f7fb fb1c 	bl	800ea10 <lv_draw_mask_is_any>
 80133d8:	2800      	cmp	r0, #0
 80133da:	d182      	bne.n	80132e2 <lv_draw_sw_line+0x76a>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 80133dc:	211c      	movs	r1, #28
 80133de:	a836      	add	r0, sp, #216	; 0xd8
 80133e0:	f00e fcc2 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 80133e4:	ab2b      	add	r3, sp, #172	; 0xac
 80133e6:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 80133e8:	8823      	ldrh	r3, [r4, #0]
 80133ea:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 80133ee:	7a23      	ldrb	r3, [r4, #8]
 80133f0:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80133f4:	a936      	add	r1, sp, #216	; 0xd8
 80133f6:	9803      	ldr	r0, [sp, #12]
 80133f8:	f7fd fc06 	bl	8010c08 <lv_draw_sw_blend>
 80133fc:	e706      	b.n	801320c <lv_draw_sw_line+0x694>
 80133fe:	bf00      	nop

08013400 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 8013400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013404:	b08d      	sub	sp, #52	; 0x34
 8013406:	9004      	str	r0, [sp, #16]
 8013408:	9106      	str	r1, [sp, #24]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 801340a:	2b02      	cmp	r3, #2
 801340c:	f240 8148 	bls.w	80136a0 <lv_draw_sw_polygon+0x2a0>
 8013410:	4616      	mov	r6, r2
 8013412:	461d      	mov	r5, r3
    if(points == NULL) return;
 8013414:	2a00      	cmp	r2, #0
 8013416:	f000 8143 	beq.w	80136a0 <lv_draw_sw_polygon+0x2a0>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 801341a:	009f      	lsls	r7, r3, #2
 801341c:	4638      	mov	r0, r7
 801341e:	f00e fa75 	bl	802190c <lv_mem_buf_get>
    if(p == NULL) return;
 8013422:	4604      	mov	r4, r0
 8013424:	2800      	cmp	r0, #0
 8013426:	f000 813b 	beq.w	80136a0 <lv_draw_sw_polygon+0x2a0>
    uint16_t i;
    uint16_t pcnt = 0;
    p[0] = points[0];
 801342a:	6833      	ldr	r3, [r6, #0]
 801342c:	6003      	str	r3, [r0, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 801342e:	1e68      	subs	r0, r5, #1
    uint16_t pcnt = 0;
 8013430:	2500      	movs	r5, #0
    for(i = 0; i < point_cnt - 1; i++) {
 8013432:	462b      	mov	r3, r5
 8013434:	e008      	b.n	8013448 <lv_draw_sw_polygon+0x48>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
            p[pcnt] = points[i];
 8013436:	5872      	ldr	r2, [r6, r1]
 8013438:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
            pcnt++;
 801343c:	3501      	adds	r5, #1
 801343e:	b2ad      	uxth	r5, r5
    for(i = 0; i < point_cnt - 1; i++) {
 8013440:	3301      	adds	r3, #1
 8013442:	b29b      	uxth	r3, r3
 8013444:	4283      	cmp	r3, r0
 8013446:	da11      	bge.n	801346c <lv_draw_sw_polygon+0x6c>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 8013448:	0099      	lsls	r1, r3, #2
 801344a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 801344e:	1d0a      	adds	r2, r1, #4
 8013450:	eb06 0e02 	add.w	lr, r6, r2
 8013454:	f936 c023 	ldrsh.w	ip, [r6, r3, lsl #2]
 8013458:	5eb2      	ldrsh	r2, [r6, r2]
 801345a:	4594      	cmp	ip, r2
 801345c:	d1eb      	bne.n	8013436 <lv_draw_sw_polygon+0x36>
 801345e:	f9b8 c002 	ldrsh.w	ip, [r8, #2]
 8013462:	f9be 2002 	ldrsh.w	r2, [lr, #2]
 8013466:	4594      	cmp	ip, r2
 8013468:	d1e5      	bne.n	8013436 <lv_draw_sw_polygon+0x36>
 801346a:	e7e9      	b.n	8013440 <lv_draw_sw_polygon+0x40>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 801346c:	3f04      	subs	r7, #4
 801346e:	19f1      	adds	r1, r6, r7
 8013470:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013474:	5ff3      	ldrsh	r3, [r6, r7]
 8013476:	429a      	cmp	r2, r3
 8013478:	f000 808e 	beq.w	8013598 <lv_draw_sw_polygon+0x198>
        p[pcnt] = points[point_cnt - 1];
 801347c:	59f3      	ldr	r3, [r6, r7]
 801347e:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        pcnt++;
 8013482:	3501      	adds	r5, #1
 8013484:	b2ad      	uxth	r5, r5
    }

    point_cnt = pcnt;
    if(point_cnt < 3) {
 8013486:	2d02      	cmp	r5, #2
 8013488:	f240 808e 	bls.w	80135a8 <lv_draw_sw_polygon+0x1a8>
        lv_mem_buf_release(p);
        return;
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 801348c:	4b86      	ldr	r3, [pc, #536]	; (80136a8 <lv_draw_sw_polygon+0x2a8>)
 801348e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013492:	ab0c      	add	r3, sp, #48	; 0x30
 8013494:	e903 0003 	stmdb	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 8013498:	4623      	mov	r3, r4
 801349a:	1ca7      	adds	r7, r4, #2
 801349c:	463a      	mov	r2, r7
 801349e:	1e68      	subs	r0, r5, #1
 80134a0:	b281      	uxth	r1, r0
 80134a2:	1d20      	adds	r0, r4, #4
 80134a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 80134a8:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 80134ac:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80134b0:	42b1      	cmp	r1, r6
 80134b2:	bfa8      	it	ge
 80134b4:	4631      	movge	r1, r6
 80134b6:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 80134ba:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80134be:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 80134c2:	42b1      	cmp	r1, r6
 80134c4:	bfa8      	it	ge
 80134c6:	4631      	movge	r1, r6
 80134c8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 80134cc:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 80134d0:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80134d4:	42b1      	cmp	r1, r6
 80134d6:	bfb8      	it	lt
 80134d8:	4631      	movlt	r1, r6
 80134da:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 80134de:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80134e2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80134e6:	42b1      	cmp	r1, r6
 80134e8:	bfb8      	it	lt
 80134ea:	4631      	movlt	r1, r6
 80134ec:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    for(i = 0; i < point_cnt; i++) {
 80134f0:	3304      	adds	r3, #4
 80134f2:	3204      	adds	r2, #4
 80134f4:	4283      	cmp	r3, r0
 80134f6:	d1d7      	bne.n	80134a8 <lv_draw_sw_polygon+0xa8>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 80134f8:	9b04      	ldr	r3, [sp, #16]
 80134fa:	689a      	ldr	r2, [r3, #8]
 80134fc:	a90a      	add	r1, sp, #40	; 0x28
 80134fe:	a808      	add	r0, sp, #32
 8013500:	f00d fa9d 	bl	8020a3e <_lv_area_intersect>
    if(!is_common) {
 8013504:	2800      	cmp	r0, #0
 8013506:	d053      	beq.n	80135b0 <lv_draw_sw_polygon+0x1b0>
        lv_mem_buf_release(p);
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8013508:	9a04      	ldr	r2, [sp, #16]
 801350a:	6893      	ldr	r3, [r2, #8]
 801350c:	9307      	str	r3, [sp, #28]
    draw_ctx->clip_area = &clip_area;
 801350e:	ab08      	add	r3, sp, #32
 8013510:	6093      	str	r3, [r2, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 8013512:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013516:	2301      	movs	r3, #1
    int16_t y_min_i = 0;
 8013518:	2600      	movs	r6, #0

    for(i = 1; i < point_cnt; i++) {
        if(p[i].y < y_min) {
 801351a:	f937 2023 	ldrsh.w	r2, [r7, r3, lsl #2]
 801351e:	428a      	cmp	r2, r1
            y_min = p[i].y;
            y_min_i = i;
 8013520:	bfbc      	itt	lt
 8013522:	b21e      	sxthlt	r6, r3
            y_min = p[i].y;
 8013524:	4611      	movlt	r1, r2
    for(i = 1; i < point_cnt; i++) {
 8013526:	3301      	adds	r3, #1
 8013528:	b29a      	uxth	r2, r3
 801352a:	4295      	cmp	r5, r2
 801352c:	d8f5      	bhi.n	801351a <lv_draw_sw_polygon+0x11a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 801352e:	46aa      	mov	sl, r5
 8013530:	202c      	movs	r0, #44	; 0x2c
 8013532:	fb05 f000 	mul.w	r0, r5, r0
 8013536:	f00e f9e9 	bl	802190c <lv_mem_buf_get>
 801353a:	9005      	str	r0, [sp, #20]
    lv_draw_mask_line_param_t * mp_next = mp;

    int32_t i_prev_left = y_min_i;
 801353c:	4637      	mov	r7, r6
    int32_t i_next_right;
    uint32_t mask_cnt = 0;

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 801353e:	1e72      	subs	r2, r6, #1
 8013540:	bf48      	it	mi
 8013542:	1952      	addmi	r2, r2, r5

    i_next_right = y_min_i + 1;
 8013544:	f106 0c01 	add.w	ip, r6, #1
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 8013548:	46ab      	mov	fp, r5
 801354a:	4565      	cmp	r5, ip
 801354c:	bfd8      	it	le
 801354e:	f04f 0c00 	movle.w	ip, #0
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 8013552:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8013556:	eb04 0586 	add.w	r5, r4, r6, lsl #2
 801355a:	f834 0026 	ldrh.w	r0, [r4, r6, lsl #2]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 801355e:	eb04 038c 	add.w	r3, r4, ip, lsl #2
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 8013562:	886e      	ldrh	r6, [r5, #2]
 8013564:	8849      	ldrh	r1, [r1, #2]
 8013566:	1b89      	subs	r1, r1, r6
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;

    bool inv = false;
    if(dyl * dxr < dyr * dxl) inv = true;
 8013568:	b209      	sxth	r1, r1
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 801356a:	f834 502c 	ldrh.w	r5, [r4, ip, lsl #2]
 801356e:	1a2d      	subs	r5, r5, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 8013570:	b22d      	sxth	r5, r5
 8013572:	fb05 f101 	mul.w	r1, r5, r1
 8013576:	9102      	str	r1, [sp, #8]
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 8013578:	885b      	ldrh	r3, [r3, #2]
 801357a:	1b9b      	subs	r3, r3, r6
    if(dyl * dxr < dyr * dxl) inv = true;
 801357c:	b21b      	sxth	r3, r3
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 801357e:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8013582:	1a12      	subs	r2, r2, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 8013584:	b212      	sxth	r2, r2
 8013586:	fb02 f303 	mul.w	r3, r2, r3
 801358a:	9303      	str	r3, [sp, #12]
 801358c:	46b9      	mov	r9, r7
 801358e:	9b05      	ldr	r3, [sp, #20]
 8013590:	469e      	mov	lr, r3
 8013592:	f04f 0800 	mov.w	r8, #0
 8013596:	e02c      	b.n	80135f2 <lv_draw_sw_polygon+0x1f2>
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 8013598:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 801359c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	f47f af6b 	bne.w	801347c <lv_draw_sw_polygon+0x7c>
 80135a6:	e76e      	b.n	8013486 <lv_draw_sw_polygon+0x86>
        lv_mem_buf_release(p);
 80135a8:	4620      	mov	r0, r4
 80135aa:	f00e fa11 	bl	80219d0 <lv_mem_buf_release>
        return;
 80135ae:	e077      	b.n	80136a0 <lv_draw_sw_polygon+0x2a0>
        lv_mem_buf_release(p);
 80135b0:	4620      	mov	r0, r4
 80135b2:	f00e fa0d 	bl	80219d0 <lv_mem_buf_release>
        return;
 80135b6:	e073      	b.n	80136a0 <lv_draw_sw_polygon+0x2a0>

            i_next_right = i_prev_right + 1;
            if(i_next_right > point_cnt - 1) i_next_right = 0;
        }
        else {
            i_next_left = i_prev_left + 1;
 80135b8:	1c7d      	adds	r5, r7, #1
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 80135ba:	45ab      	cmp	fp, r5
 80135bc:	bfd8      	it	le
 80135be:	2500      	movle	r5, #0

            i_next_right = i_prev_right - 1;
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 80135c0:	f1b9 0601 	subs.w	r6, r9, #1
 80135c4:	bf48      	it	mi
 80135c6:	445e      	addmi	r6, fp
 80135c8:	e01f      	b.n	801360a <lv_draw_sw_polygon+0x20a>
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
            if(p[i_next_left].y != p[i_prev_left].y &&
               p[i_next_left].x != p[i_prev_left].x) {
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 80135ca:	2701      	movs	r7, #1
 80135cc:	9701      	str	r7, [sp, #4]
 80135ce:	9000      	str	r0, [sp, #0]
 80135d0:	4677      	mov	r7, lr
 80135d2:	4670      	mov	r0, lr
 80135d4:	f7fb fa50 	bl	800ea78 <lv_draw_mask_line_points_init>
                                              p[i_next_left].x, p[i_next_left].y,
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 80135d8:	9905      	ldr	r1, [sp, #20]
 80135da:	4638      	mov	r0, r7
 80135dc:	f7fb f96e 	bl	800e8bc <lv_draw_mask_add>
                mp_next++;
 80135e0:	463b      	mov	r3, r7
 80135e2:	332c      	adds	r3, #44	; 0x2c
 80135e4:	469e      	mov	lr, r3
 80135e6:	e023      	b.n	8013630 <lv_draw_sw_polygon+0x230>
                                              p[i_next_right].x, p[i_next_right].y,
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
                mp_next++;
            }
            mask_cnt++;
 80135e8:	f108 0801 	add.w	r8, r8, #1
            i_prev_right = i_next_right;
 80135ec:	46b1      	mov	r9, r6
        }

    } while(mask_cnt < point_cnt);
 80135ee:	45c2      	cmp	sl, r8
 80135f0:	d944      	bls.n	801367c <lv_draw_sw_polygon+0x27c>
        if(!inv) {
 80135f2:	9b02      	ldr	r3, [sp, #8]
 80135f4:	9a03      	ldr	r2, [sp, #12]
 80135f6:	4293      	cmp	r3, r2
 80135f8:	dbde      	blt.n	80135b8 <lv_draw_sw_polygon+0x1b8>
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 80135fa:	1e7d      	subs	r5, r7, #1
 80135fc:	bf48      	it	mi
 80135fe:	445d      	addmi	r5, fp
            i_next_right = i_prev_right + 1;
 8013600:	f109 0601 	add.w	r6, r9, #1
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 8013604:	45b3      	cmp	fp, r6
 8013606:	bfd8      	it	le
 8013608:	2600      	movle	r6, #0
        if(p[i_next_left].y >= p[i_prev_left].y) {
 801360a:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 801360e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013612:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013616:	00b9      	lsls	r1, r7, #2
 8013618:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801361c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013620:	4290      	cmp	r0, r2
 8013622:	db08      	blt.n	8013636 <lv_draw_sw_polygon+0x236>
            if(p[i_next_left].y != p[i_prev_left].y &&
 8013624:	d004      	beq.n	8013630 <lv_draw_sw_polygon+0x230>
               p[i_next_left].x != p[i_prev_left].x) {
 8013626:	f934 300c 	ldrsh.w	r3, [r4, ip]
 801362a:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_left].y != p[i_prev_left].y &&
 801362c:	428b      	cmp	r3, r1
 801362e:	d1cc      	bne.n	80135ca <lv_draw_sw_polygon+0x1ca>
            mask_cnt++;
 8013630:	f108 0801 	add.w	r8, r8, #1
            i_prev_left = i_next_left;
 8013634:	462f      	mov	r7, r5
        if(mask_cnt == point_cnt) break;
 8013636:	45c2      	cmp	sl, r8
 8013638:	d020      	beq.n	801367c <lv_draw_sw_polygon+0x27c>
        if(p[i_next_right].y >= p[i_prev_right].y) {
 801363a:	00b5      	lsls	r5, r6, #2
 801363c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013640:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013644:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8013648:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 801364c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013650:	4290      	cmp	r0, r2
 8013652:	dbcc      	blt.n	80135ee <lv_draw_sw_polygon+0x1ee>
            if(p[i_next_right].y != p[i_prev_right].y &&
 8013654:	d0c8      	beq.n	80135e8 <lv_draw_sw_polygon+0x1e8>
               p[i_next_right].x != p[i_prev_right].x) {
 8013656:	5f63      	ldrsh	r3, [r4, r5]
 8013658:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_right].y != p[i_prev_right].y &&
 801365a:	428b      	cmp	r3, r1
 801365c:	d0c4      	beq.n	80135e8 <lv_draw_sw_polygon+0x1e8>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 801365e:	2500      	movs	r5, #0
 8013660:	9501      	str	r5, [sp, #4]
 8013662:	9000      	str	r0, [sp, #0]
 8013664:	4675      	mov	r5, lr
 8013666:	4670      	mov	r0, lr
 8013668:	f7fb fa06 	bl	800ea78 <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 801366c:	9905      	ldr	r1, [sp, #20]
 801366e:	4628      	mov	r0, r5
 8013670:	f7fb f924 	bl	800e8bc <lv_draw_mask_add>
                mp_next++;
 8013674:	462b      	mov	r3, r5
 8013676:	332c      	adds	r3, #44	; 0x2c
 8013678:	469e      	mov	lr, r3
 801367a:	e7b5      	b.n	80135e8 <lv_draw_sw_polygon+0x1e8>

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 801367c:	aa0a      	add	r2, sp, #40	; 0x28
 801367e:	9906      	ldr	r1, [sp, #24]
 8013680:	9d04      	ldr	r5, [sp, #16]
 8013682:	4628      	mov	r0, r5
 8013684:	f7fb fdcc 	bl	800f220 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 8013688:	9e05      	ldr	r6, [sp, #20]
 801368a:	4630      	mov	r0, r6
 801368c:	f7fb f972 	bl	800e974 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 8013690:	4630      	mov	r0, r6
 8013692:	f00e f99d 	bl	80219d0 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 8013696:	4620      	mov	r0, r4
 8013698:	f00e f99a 	bl	80219d0 <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 801369c:	9a07      	ldr	r2, [sp, #28]
 801369e:	60aa      	str	r2, [r5, #8]
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 80136a0:	b00d      	add	sp, #52	; 0x34
 80136a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a6:	bf00      	nop
 80136a8:	0802cde8 	.word	0x0802cde8

080136ac <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 80136ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b0:	b087      	sub	sp, #28
 80136b2:	4604      	mov	r4, r0
 80136b4:	460b      	mov	r3, r1
 80136b6:	9100      	str	r1, [sp, #0]
 80136b8:	9204      	str	r2, [sp, #16]
    int32_t s_left = sw >> 1;
 80136ba:	104e      	asrs	r6, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
 80136bc:	f011 0f01 	tst.w	r1, #1
 80136c0:	bf03      	ittte	eq
 80136c2:	f106 39ff 	addeq.w	r9, r6, #4294967295	; 0xffffffff
 80136c6:	fa0f f389 	sxtheq.w	r3, r9
 80136ca:	9305      	streq	r3, [sp, #20]
    int32_t s_left = sw >> 1;
 80136cc:	9605      	strne	r6, [sp, #20]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 80136ce:	0045      	lsls	r5, r0, #1
 80136d0:	4628      	mov	r0, r5
 80136d2:	f00e f91b 	bl	802190c <lv_mem_buf_get>
 80136d6:	9001      	str	r0, [sp, #4]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
 80136d8:	2c00      	cmp	r4, #0
 80136da:	f340 80a9 	ble.w	8013830 <shadow_blur_corner+0x184>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 80136de:	f1a5 0b02 	sub.w	fp, r5, #2
 80136e2:	f106 0901 	add.w	r9, r6, #1
 80136e6:	9a05      	ldr	r2, [sp, #20]
 80136e8:	4491      	add	r9, r2
 80136ea:	ebc9 79c9 	rsb	r9, r9, r9, lsl #31
 80136ee:	9f04      	ldr	r7, [sp, #16]
 80136f0:	eb07 0949 	add.w	r9, r7, r9, lsl #1
 80136f4:	1e63      	subs	r3, r4, #1
 80136f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80136fa:	9302      	str	r3, [sp, #8]
 80136fc:	eb06 0802 	add.w	r8, r6, r2
    for(y = 0; y < size; y++) {
 8013700:	f04f 0a00 	mov.w	sl, #0
        for(x = size - 1; x >= 0; x--) {
 8013704:	1e63      	subs	r3, r4, #1
 8013706:	4433      	add	r3, r6
 8013708:	9303      	str	r3, [sp, #12]
 801370a:	e01e      	b.n	801374a <shadow_blur_corner+0x9e>
 801370c:	4611      	mov	r1, r2
            sh_ups_blur_buf[x] = v;
 801370e:	f820 3902 	strh.w	r3, [r0], #-2

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8013712:	428c      	cmp	r4, r1
 8013714:	bfcc      	ite	gt
 8013716:	f837 2011 	ldrhgt.w	r2, [r7, r1, lsl #1]
            uint32_t right_val = 0;
 801371a:	2200      	movle	r2, #0
            v -= right_val;
 801371c:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 801371e:	eba1 0208 	sub.w	r2, r1, r8
 8013722:	2a00      	cmp	r2, #0
 8013724:	bfd4      	ite	le
 8013726:	883a      	ldrhle	r2, [r7, #0]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 8013728:	f839 2011 	ldrhgt.w	r2, [r9, r1, lsl #1]
            v += left_val;
 801372c:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
 801372e:	1e4a      	subs	r2, r1, #1
 8013730:	42b1      	cmp	r1, r6
 8013732:	d1eb      	bne.n	801370c <shadow_blur_corner+0x60>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 8013734:	462a      	mov	r2, r5
 8013736:	9901      	ldr	r1, [sp, #4]
 8013738:	4638      	mov	r0, r7
 801373a:	f00e f97f 	bl	8021a3c <lv_memcpy>
        sh_ups_tmp_buf += size;
 801373e:	442f      	add	r7, r5
    for(y = 0; y < size; y++) {
 8013740:	f10a 0a01 	add.w	sl, sl, #1
 8013744:	44a9      	add	r9, r5
 8013746:	45a2      	cmp	sl, r4
 8013748:	d07b      	beq.n	8013842 <shadow_blur_corner+0x196>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 801374a:	f837 300b 	ldrh.w	r3, [r7, fp]
 801374e:	9a00      	ldr	r2, [sp, #0]
 8013750:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
 8013754:	9903      	ldr	r1, [sp, #12]
 8013756:	9802      	ldr	r0, [sp, #8]
 8013758:	e7d9      	b.n	801370e <shadow_blur_corner+0x62>

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
    uint32_t max_v_div = max_v / sw;
    for(i = 0; i < (uint32_t)size * size; i++) {
 801375a:	3101      	adds	r1, #1
 801375c:	428f      	cmp	r7, r1
 801375e:	d90c      	bls.n	801377a <shadow_blur_corner+0xce>
        if(sh_ups_buf[i] == 0) continue;
 8013760:	3302      	adds	r3, #2
 8013762:	881a      	ldrh	r2, [r3, #0]
 8013764:	2a00      	cmp	r2, #0
 8013766:	d0f8      	beq.n	801375a <shadow_blur_corner+0xae>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 8013768:	f5b2 5f7f 	cmp.w	r2, #16320	; 0x3fc0
 801376c:	bf0e      	itee	eq
 801376e:	f8a3 c000 	strheq.w	ip, [r3]
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8013772:	fb92 f2fe 	sdivne	r2, r2, lr
 8013776:	801a      	strhne	r2, [r3, #0]
 8013778:	e7ef      	b.n	801375a <shadow_blur_corner+0xae>
    }

    for(x = 0; x < size; x++) {
 801377a:	2c00      	cmp	r4, #0
 801377c:	dd52      	ble.n	8013824 <shadow_blur_corner+0x178>
 801377e:	9b04      	ldr	r3, [sp, #16]
 8013780:	9303      	str	r3, [sp, #12]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8013782:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8013786:	fb05 3a0a 	mla	sl, r5, sl, r3
 801378a:	9905      	ldr	r1, [sp, #20]
 801378c:	fb01 5205 	mla	r2, r1, r5, r5
 8013790:	43f3      	mvns	r3, r6
 8013792:	1a5b      	subs	r3, r3, r1
 8013794:	fb04 f803 	mul.w	r8, r4, r3
 8013798:	2300      	movs	r3, #0
 801379a:	9302      	str	r3, [sp, #8]
 801379c:	1e93      	subs	r3, r2, #2
 801379e:	9304      	str	r3, [sp, #16]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 80137a0:	f101 0901 	add.w	r9, r1, #1
 80137a4:	9605      	str	r6, [sp, #20]
        sh_ups_tmp_buf = &sh_ups_buf[x];
 80137a6:	9a03      	ldr	r2, [sp, #12]
 80137a8:	4611      	mov	r1, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 80137aa:	3202      	adds	r2, #2
 80137ac:	9203      	str	r2, [sp, #12]
 80137ae:	880b      	ldrh	r3, [r1, #0]
 80137b0:	9800      	ldr	r0, [sp, #0]
 80137b2:	fb00 f303 	mul.w	r3, r0, r3
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 80137b6:	9804      	ldr	r0, [sp, #16]
 80137b8:	4410      	add	r0, r2
 80137ba:	9a01      	ldr	r2, [sp, #4]
 80137bc:	f1a2 0c02 	sub.w	ip, r2, #2
 80137c0:	9a05      	ldr	r2, [sp, #20]
 80137c2:	4256      	negs	r6, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 80137c4:	46e6      	mov	lr, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
 80137c6:	460f      	mov	r7, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 80137c8:	2200      	movs	r2, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	bfac      	ite	ge
 80137ce:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 80137d2:	f04f 0b00 	movlt.w	fp, #0
 80137d6:	f82e bf02 	strh.w	fp, [lr, #2]!
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 80137da:	2e00      	cmp	r6, #0
 80137dc:	bfd4      	ite	le
 80137de:	f8b7 b000 	ldrhle.w	fp, [r7]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 80137e2:	f830 b018 	ldrhgt.w	fp, [r0, r8, lsl #1]
            v -= top_val;
 80137e6:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 80137ea:	eb09 0302 	add.w	r3, r9, r2
 80137ee:	429c      	cmp	r4, r3
 80137f0:	bfcc      	ite	gt
 80137f2:	8803      	ldrhgt	r3, [r0, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 80137f4:	f8ba 3000 	ldrhle.w	r3, [sl]
            v += bottom_val;
 80137f8:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 80137fa:	3201      	adds	r2, #1
 80137fc:	442f      	add	r7, r5
 80137fe:	4428      	add	r0, r5
 8013800:	3601      	adds	r6, #1
 8013802:	42a2      	cmp	r2, r4
 8013804:	dbe1      	blt.n	80137ca <shadow_blur_corner+0x11e>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8013806:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8013808:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 801380c:	800a      	strh	r2, [r1, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 801380e:	3301      	adds	r3, #1
 8013810:	4429      	add	r1, r5
 8013812:	42a3      	cmp	r3, r4
 8013814:	dbf8      	blt.n	8013808 <shadow_blur_corner+0x15c>
    for(x = 0; x < size; x++) {
 8013816:	9b02      	ldr	r3, [sp, #8]
 8013818:	3301      	adds	r3, #1
 801381a:	9302      	str	r3, [sp, #8]
 801381c:	f10a 0a02 	add.w	sl, sl, #2
 8013820:	42a3      	cmp	r3, r4
 8013822:	dbc0      	blt.n	80137a6 <shadow_blur_corner+0xfa>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 8013824:	9801      	ldr	r0, [sp, #4]
 8013826:	f00e f8d3 	bl	80219d0 <lv_mem_buf_release>
}
 801382a:	b007      	add	sp, #28
 801382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t max_v_div = max_v / sw;
 8013830:	f44f 5c7f 	mov.w	ip, #16320	; 0x3fc0
 8013834:	9b00      	ldr	r3, [sp, #0]
 8013836:	fbbc fcf3 	udiv	ip, ip, r3
    for(i = 0; i < (uint32_t)size * size; i++) {
 801383a:	fb04 f704 	mul.w	r7, r4, r4
 801383e:	b94f      	cbnz	r7, 8013854 <shadow_blur_corner+0x1a8>
 8013840:	e7f0      	b.n	8013824 <shadow_blur_corner+0x178>
    uint32_t max_v_div = max_v / sw;
 8013842:	f44f 5c7f 	mov.w	ip, #16320	; 0x3fc0
 8013846:	9b00      	ldr	r3, [sp, #0]
 8013848:	fbbc fcf3 	udiv	ip, ip, r3
    for(i = 0; i < (uint32_t)size * size; i++) {
 801384c:	fb04 f704 	mul.w	r7, r4, r4
 8013850:	2f00      	cmp	r7, #0
 8013852:	d094      	beq.n	801377e <shadow_blur_corner+0xd2>
 8013854:	9b04      	ldr	r3, [sp, #16]
 8013856:	3b02      	subs	r3, #2
 8013858:	2100      	movs	r1, #0
 801385a:	f8dd e000 	ldr.w	lr, [sp]
 801385e:	e77f      	b.n	8013760 <shadow_blur_corner+0xb4>

08013860 <draw_bg>:
{
 8013860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013864:	b09b      	sub	sp, #108	; 0x6c
 8013866:	9000      	str	r0, [sp, #0]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8013868:	78cb      	ldrb	r3, [r1, #3]
 801386a:	2b02      	cmp	r3, #2
 801386c:	f240 8187 	bls.w	8013b7e <draw_bg+0x31e>
 8013870:	460c      	mov	r4, r1
    dest->x1 = src->x1;
 8013872:	f9b2 5000 	ldrsh.w	r5, [r2]
 8013876:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    dest->y1 = src->y1;
 801387a:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 801387e:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
    dest->x2 = src->x2;
 8013882:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8013886:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    dest->y2 = src->y2;
 801388a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801388e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8013892:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 8013896:	2a01      	cmp	r2, #1
 8013898:	dd1c      	ble.n	80138d4 <draw_bg+0x74>
 801389a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801389e:	2afc      	cmp	r2, #252	; 0xfc
 80138a0:	d918      	bls.n	80138d4 <draw_bg+0x74>
 80138a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80138a6:	b1aa      	cbz	r2, 80138d4 <draw_bg+0x74>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 80138a8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80138ac:	f3c2 06c0 	ubfx	r6, r2, #3, #1
 80138b0:	4435      	add	r5, r6
 80138b2:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 80138b6:	f3c2 0580 	ubfx	r5, r2, #2, #1
 80138ba:	4428      	add	r0, r5
 80138bc:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 80138c0:	f3c2 1000 	ubfx	r0, r2, #4, #1
 80138c4:	1a09      	subs	r1, r1, r0
 80138c6:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 80138ca:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80138ce:	1a9b      	subs	r3, r3, r2
 80138d0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 80138d4:	9b00      	ldr	r3, [sp, #0]
 80138d6:	689a      	ldr	r2, [r3, #8]
 80138d8:	a918      	add	r1, sp, #96	; 0x60
 80138da:	a816      	add	r0, sp, #88	; 0x58
 80138dc:	f00d f8af 	bl	8020a3e <_lv_area_intersect>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	f000 814c 	beq.w	8013b7e <draw_bg+0x31e>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 80138e6:	f894 a00f 	ldrb.w	sl, [r4, #15]
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 80138ea:	f01a 0a07 	ands.w	sl, sl, #7
 80138ee:	bf0c      	ite	eq
 80138f0:	88a5      	ldrheq	r5, [r4, #4]
 80138f2:	88e5      	ldrhne	r5, [r4, #6]
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 80138f4:	8963      	ldrh	r3, [r4, #10]
 80138f6:	42ab      	cmp	r3, r5
 80138f8:	bf08      	it	eq
 80138fa:	f04f 0a00 	moveq.w	sl, #0
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 80138fe:	a818      	add	r0, sp, #96	; 0x60
 8013900:	f7fb f886 	bl	800ea10 <lv_draw_mask_is_any>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 8013904:	2300      	movs	r3, #0
 8013906:	930f      	str	r3, [sp, #60]	; 0x3c
 8013908:	9310      	str	r3, [sp, #64]	; 0x40
 801390a:	9311      	str	r3, [sp, #68]	; 0x44
 801390c:	9312      	str	r3, [sp, #72]	; 0x48
 801390e:	9313      	str	r3, [sp, #76]	; 0x4c
 8013910:	9314      	str	r3, [sp, #80]	; 0x50
 8013912:	9315      	str	r3, [sp, #84]	; 0x54
    blend_dsc.blend_mode = dsc->blend_mode;
 8013914:	78a3      	ldrb	r3, [r4, #2]
 8013916:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    blend_dsc.color = bg_color;
 801391a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 801391e:	9002      	str	r0, [sp, #8]
 8013920:	b928      	cbnz	r0, 801392e <draw_bg+0xce>
 8013922:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013926:	b913      	cbnz	r3, 801392e <draw_bg+0xce>
 8013928:	f1ba 0f00 	cmp.w	sl, #0
 801392c:	d05e      	beq.n	80139ec <draw_bg+0x18c>
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 801392e:	f894 9003 	ldrb.w	r9, [r4, #3]
 8013932:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
 8013936:	bf28      	it	cs
 8013938:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801393c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8013940:	3501      	adds	r5, #1
 8013942:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013946:	1aed      	subs	r5, r5, r3
 8013948:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801394a:	f8bd 7066 	ldrh.w	r7, [sp, #102]	; 0x66
 801394e:	3701      	adds	r7, #1
 8013950:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8013954:	1aff      	subs	r7, r7, r3
 8013956:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 8013958:	46bb      	mov	fp, r7
 801395a:	42af      	cmp	r7, r5
 801395c:	bfa8      	it	ge
 801395e:	46ab      	movge	fp, r5
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 8013960:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 8013964:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013968:	459b      	cmp	fp, r3
 801396a:	bfa8      	it	ge
 801396c:	469b      	movge	fp, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801396e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8013972:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
 8013976:	1c5e      	adds	r6, r3, #1
 8013978:	1ab6      	subs	r6, r6, r2
 801397a:	b236      	sxth	r6, r6
    if(rout > 0 || mask_any) {
 801397c:	f1bb 0f00 	cmp.w	fp, #0
 8013980:	dc03      	bgt.n	801398a <draw_bg+0x12a>
 8013982:	9902      	ldr	r1, [sp, #8]
 8013984:	2900      	cmp	r1, #0
 8013986:	f000 8132 	beq.w	8013bee <draw_bg+0x38e>
        mask_buf = lv_mem_buf_get(clipped_w);
 801398a:	4630      	mov	r0, r6
 801398c:	f00d ffbe 	bl	802190c <lv_mem_buf_get>
 8013990:	4680      	mov	r8, r0
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 8013992:	2300      	movs	r3, #0
 8013994:	465a      	mov	r2, fp
 8013996:	a918      	add	r1, sp, #96	; 0x60
 8013998:	a809      	add	r0, sp, #36	; 0x24
 801399a:	f7fb f991 	bl	800ecc0 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 801399e:	2100      	movs	r1, #0
 80139a0:	a809      	add	r0, sp, #36	; 0x24
 80139a2:	f7fa ff8b 	bl	800e8bc <lv_draw_mask_add>
 80139a6:	9003      	str	r0, [sp, #12]
    blend_area.x1 = clipped_coords.x1;
 80139a8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 80139ac:	f8ad 301c 	strh.w	r3, [sp, #28]
    blend_area.x2 = clipped_coords.x2;
 80139b0:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 80139b4:	f8ad 3020 	strh.w	r3, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 80139b8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    blend_dsc.blend_area = &blend_area;
 80139bc:	ab07      	add	r3, sp, #28
 80139be:	930f      	str	r3, [sp, #60]	; 0x3c
    blend_dsc.mask_area = &blend_area;
 80139c0:	9314      	str	r3, [sp, #80]	; 0x50
    blend_dsc.opa = LV_OPA_COVER;
 80139c2:	23ff      	movs	r3, #255	; 0xff
 80139c4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 80139c8:	463a      	mov	r2, r7
 80139ca:	4629      	mov	r1, r5
 80139cc:	1da0      	adds	r0, r4, #6
 80139ce:	f7fe fa25 	bl	8011e1c <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 80139d2:	9001      	str	r0, [sp, #4]
 80139d4:	b110      	cbz	r0, 80139dc <draw_bg+0x17c>
 80139d6:	f1ba 0f02 	cmp.w	sl, #2
 80139da:	d011      	beq.n	8013a00 <draw_bg+0x1a0>
    if(mask_any) {
 80139dc:	9b02      	ldr	r3, [sp, #8]
 80139de:	b9d3      	cbnz	r3, 8013a16 <draw_bg+0x1b6>
    for(h = 0; h < rout; h++) {
 80139e0:	f1bb 0f00 	cmp.w	fp, #0
 80139e4:	bfc8      	it	gt
 80139e6:	2700      	movgt	r7, #0
 80139e8:	dc60      	bgt.n	8013aac <draw_bg+0x24c>
 80139ea:	e11d      	b.n	8013c28 <draw_bg+0x3c8>
        blend_dsc.blend_area = &bg_coords;
 80139ec:	ab18      	add	r3, sp, #96	; 0x60
 80139ee:	930f      	str	r3, [sp, #60]	; 0x3c
        blend_dsc.opa = dsc->bg_opa;
 80139f0:	78e3      	ldrb	r3, [r4, #3]
 80139f2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80139f6:	a90f      	add	r1, sp, #60	; 0x3c
 80139f8:	9800      	ldr	r0, [sp, #0]
 80139fa:	f7fd f905 	bl	8010c08 <lv_draw_sw_blend>
        return;
 80139fe:	e0be      	b.n	8013b7e <draw_bg+0x31e>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 8013a00:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8013a04:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 8013a08:	1a9a      	subs	r2, r3, r2
 8013a0a:	9b01      	ldr	r3, [sp, #4]
 8013a0c:	689b      	ldr	r3, [r3, #8]
 8013a0e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013a12:	9310      	str	r3, [sp, #64]	; 0x40
 8013a14:	e7e2      	b.n	80139dc <draw_bg+0x17c>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 8013a16:	f9bd 405a 	ldrsh.w	r4, [sp, #90]	; 0x5a
 8013a1a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8013a1e:	429c      	cmp	r4, r3
 8013a20:	f300 809e 	bgt.w	8013b60 <draw_bg+0x300>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8013a24:	2702      	movs	r7, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013a26:	f8dd b000 	ldr.w	fp, [sp]
 8013a2a:	e009      	b.n	8013a40 <draw_bg+0x1e0>
 8013a2c:	a90f      	add	r1, sp, #60	; 0x3c
 8013a2e:	4658      	mov	r0, fp
 8013a30:	f7fd f8ea 	bl	8010c08 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 8013a34:	3401      	adds	r4, #1
 8013a36:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8013a3a:	42a3      	cmp	r3, r4
 8013a3c:	f2c0 8090 	blt.w	8013b60 <draw_bg+0x300>
            blend_area.y1 = h;
 8013a40:	b225      	sxth	r5, r4
 8013a42:	f8ad 501e 	strh.w	r5, [sp, #30]
            blend_area.y2 = h;
 8013a46:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
            lv_memset(mask_buf, opa, clipped_w);
 8013a4a:	4632      	mov	r2, r6
 8013a4c:	4649      	mov	r1, r9
 8013a4e:	4640      	mov	r0, r8
 8013a50:	f00e f925 	bl	8021c9e <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8013a54:	4633      	mov	r3, r6
 8013a56:	462a      	mov	r2, r5
 8013a58:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
 8013a5c:	4640      	mov	r0, r8
 8013a5e:	f7fa ff4f 	bl	800e900 <lv_draw_mask_apply>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8013a62:	2801      	cmp	r0, #1
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8013a64:	bf14      	ite	ne
 8013a66:	f88d 004c 	strbne.w	r0, [sp, #76]	; 0x4c
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8013a6a:	f88d 704c 	strbeq.w	r7, [sp, #76]	; 0x4c
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8013a6e:	f1ba 0f01 	cmp.w	sl, #1
 8013a72:	d1db      	bne.n	8013a2c <draw_bg+0x1cc>
 8013a74:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8013a78:	1ae3      	subs	r3, r4, r3
 8013a7a:	9a01      	ldr	r2, [sp, #4]
 8013a7c:	6892      	ldr	r2, [r2, #8]
 8013a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a82:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8013a86:	e7d1      	b.n	8013a2c <draw_bg+0x1cc>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 8013a88:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8013a8c:	1ae4      	subs	r4, r4, r3
 8013a8e:	9b01      	ldr	r3, [sp, #4]
 8013a90:	689b      	ldr	r3, [r3, #8]
 8013a92:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8013a96:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8013a9a:	e036      	b.n	8013b0a <draw_bg+0x2aa>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013a9c:	a90f      	add	r1, sp, #60	; 0x3c
 8013a9e:	9800      	ldr	r0, [sp, #0]
 8013aa0:	f7fd f8b2 	bl	8010c08 <lv_draw_sw_blend>
    for(h = 0; h < rout; h++) {
 8013aa4:	3701      	adds	r7, #1
 8013aa6:	45bb      	cmp	fp, r7
 8013aa8:	f000 80be 	beq.w	8013c28 <draw_bg+0x3c8>
        lv_coord_t top_y = bg_coords.y1 + h;
 8013aac:	b2bd      	uxth	r5, r7
 8013aae:	f8bd 4062 	ldrh.w	r4, [sp, #98]	; 0x62
 8013ab2:	442c      	add	r4, r5
 8013ab4:	b224      	sxth	r4, r4
        lv_coord_t bottom_y = bg_coords.y2 - h;
 8013ab6:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8013aba:	1b5d      	subs	r5, r3, r5
 8013abc:	b22d      	sxth	r5, r5
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 8013abe:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013ac2:	42a3      	cmp	r3, r4
 8013ac4:	dd03      	ble.n	8013ace <draw_bg+0x26e>
 8013ac6:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8013aca:	42ab      	cmp	r3, r5
 8013acc:	dbea      	blt.n	8013aa4 <draw_bg+0x244>
        lv_memset(mask_buf, opa, clipped_w);
 8013ace:	4632      	mov	r2, r6
 8013ad0:	4649      	mov	r1, r9
 8013ad2:	4640      	mov	r0, r8
 8013ad4:	f00e f8e3 	bl	8021c9e <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 8013ad8:	4633      	mov	r3, r6
 8013ada:	4622      	mov	r2, r4
 8013adc:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8013ae0:	4640      	mov	r0, r8
 8013ae2:	f7fa ff0d 	bl	800e900 <lv_draw_mask_apply>
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8013ae6:	2801      	cmp	r0, #1
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 8013ae8:	bf12      	itee	ne
 8013aea:	f88d 004c 	strbne.w	r0, [sp, #76]	; 0x4c
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8013aee:	2302      	moveq	r3, #2
 8013af0:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
        if(top_y >= clipped_coords.y1) {
 8013af4:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8013af8:	42a3      	cmp	r3, r4
 8013afa:	dc0a      	bgt.n	8013b12 <draw_bg+0x2b2>
            blend_area.y1 = top_y;
 8013afc:	f8ad 401e 	strh.w	r4, [sp, #30]
            blend_area.y2 = top_y;
 8013b00:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 8013b04:	f1ba 0f01 	cmp.w	sl, #1
 8013b08:	d0be      	beq.n	8013a88 <draw_bg+0x228>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013b0a:	a90f      	add	r1, sp, #60	; 0x3c
 8013b0c:	9800      	ldr	r0, [sp, #0]
 8013b0e:	f7fd f87b 	bl	8010c08 <lv_draw_sw_blend>
        if(bottom_y <= clipped_coords.y2) {
 8013b12:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8013b16:	42ab      	cmp	r3, r5
 8013b18:	dbc4      	blt.n	8013aa4 <draw_bg+0x244>
            blend_area.y1 = bottom_y;
 8013b1a:	f8ad 501e 	strh.w	r5, [sp, #30]
            blend_area.y2 = bottom_y;
 8013b1e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 8013b22:	f1ba 0f01 	cmp.w	sl, #1
 8013b26:	d1b9      	bne.n	8013a9c <draw_bg+0x23c>
 8013b28:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8013b2c:	1aed      	subs	r5, r5, r3
 8013b2e:	9b01      	ldr	r3, [sp, #4]
 8013b30:	689b      	ldr	r3, [r3, #8]
 8013b32:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8013b36:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8013b3a:	e7af      	b.n	8013a9c <draw_bg+0x23c>
        blend_area.y1 = bg_coords.y1 + rout;
 8013b3c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8013b40:	4423      	add	r3, r4
 8013b42:	f8ad 301e 	strh.w	r3, [sp, #30]
        blend_area.y2 = bg_coords.y2 - rout;
 8013b46:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8013b4a:	1b1c      	subs	r4, r3, r4
 8013b4c:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
        blend_dsc.opa = opa;
 8013b50:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
        blend_dsc.mask_buf = NULL;
 8013b54:	2300      	movs	r3, #0
 8013b56:	9312      	str	r3, [sp, #72]	; 0x48
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013b58:	a90f      	add	r1, sp, #60	; 0x3c
 8013b5a:	9800      	ldr	r0, [sp, #0]
 8013b5c:	f7fd f854 	bl	8010c08 <lv_draw_sw_blend>
    if(mask_buf) lv_mem_buf_release(mask_buf);
 8013b60:	f1b8 0f00 	cmp.w	r8, #0
 8013b64:	d002      	beq.n	8013b6c <draw_bg+0x30c>
 8013b66:	4640      	mov	r0, r8
 8013b68:	f00d ff32 	bl	80219d0 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 8013b6c:	9b03      	ldr	r3, [sp, #12]
 8013b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b72:	d135      	bne.n	8013be0 <draw_bg+0x380>
    if(grad) {
 8013b74:	9b01      	ldr	r3, [sp, #4]
 8013b76:	b113      	cbz	r3, 8013b7e <draw_bg+0x31e>
        lv_gradient_cleanup(grad);
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7fe fa17 	bl	8011fac <lv_gradient_cleanup>
}
 8013b7e:	b01b      	add	sp, #108	; 0x6c
 8013b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_memset(mask_buf, opa, clipped_w);
 8013b84:	4632      	mov	r2, r6
 8013b86:	9902      	ldr	r1, [sp, #8]
 8013b88:	4640      	mov	r0, r8
 8013b8a:	f00e f888 	bl	8021c9e <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8013b8e:	4633      	mov	r3, r6
 8013b90:	fa0f f28b 	sxth.w	r2, fp
 8013b94:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
 8013b98:	4640      	mov	r0, r8
 8013b9a:	f7fa feb1 	bl	800e900 <lv_draw_mask_apply>
 8013b9e:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
 8013ba2:	e009      	b.n	8013bb8 <draw_bg+0x358>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013ba4:	a90f      	add	r1, sp, #60	; 0x3c
 8013ba6:	4638      	mov	r0, r7
 8013ba8:	f7fd f82e 	bl	8010c08 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8013bac:	f10b 0b01 	add.w	fp, fp, #1
 8013bb0:	455c      	cmp	r4, fp
 8013bb2:	dbd5      	blt.n	8013b60 <draw_bg+0x300>
            if(mask_any_center) {
 8013bb4:	2d00      	cmp	r5, #0
 8013bb6:	d1e5      	bne.n	8013b84 <draw_bg+0x324>
            blend_area.y1 = h;
 8013bb8:	fa0f f38b 	sxth.w	r3, fp
 8013bbc:	f8ad 301e 	strh.w	r3, [sp, #30]
            blend_area.y2 = h;
 8013bc0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8013bc4:	f1ba 0f01 	cmp.w	sl, #1
 8013bc8:	d1ec      	bne.n	8013ba4 <draw_bg+0x344>
 8013bca:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8013bce:	ebab 0303 	sub.w	r3, fp, r3
 8013bd2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8013bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013bda:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8013bde:	e7e1      	b.n	8013ba4 <draw_bg+0x344>
        lv_draw_mask_remove_id(mask_rout_id);
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7fa feb5 	bl	800e950 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 8013be6:	a809      	add	r0, sp, #36	; 0x24
 8013be8:	f7fa fedc 	bl	800e9a4 <lv_draw_mask_free_param>
 8013bec:	e7c2      	b.n	8013b74 <draw_bg+0x314>
    blend_area.x1 = clipped_coords.x1;
 8013bee:	f8ad 201c 	strh.w	r2, [sp, #28]
    blend_area.x2 = clipped_coords.x2;
 8013bf2:	f8ad 3020 	strh.w	r3, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	9312      	str	r3, [sp, #72]	; 0x48
    blend_dsc.blend_area = &blend_area;
 8013bfa:	ab07      	add	r3, sp, #28
 8013bfc:	930f      	str	r3, [sp, #60]	; 0x3c
    blend_dsc.mask_area = &blend_area;
 8013bfe:	9314      	str	r3, [sp, #80]	; 0x50
    blend_dsc.opa = LV_OPA_COVER;
 8013c00:	23ff      	movs	r3, #255	; 0xff
 8013c02:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 8013c06:	463a      	mov	r2, r7
 8013c08:	4629      	mov	r1, r5
 8013c0a:	1da0      	adds	r0, r4, #6
 8013c0c:	f7fe f906 	bl	8011e1c <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 8013c10:	9001      	str	r0, [sp, #4]
 8013c12:	b128      	cbz	r0, 8013c20 <draw_bg+0x3c0>
    lv_opa_t * mask_buf = NULL;
 8013c14:	f04f 0800 	mov.w	r8, #0
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8013c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c1c:	9303      	str	r3, [sp, #12]
 8013c1e:	e6da      	b.n	80139d6 <draw_bg+0x176>
    lv_opa_t * mask_buf = NULL;
 8013c20:	4680      	mov	r8, r0
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8013c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c26:	9303      	str	r3, [sp, #12]
    center_coords.x1 = bg_coords.x1;
 8013c28:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
    center_coords.x2 = bg_coords.x2;
 8013c30:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8013c34:	f8ad 3018 	strh.w	r3, [sp, #24]
    center_coords.y1 = bg_coords.y1 + rout;
 8013c38:	fa1f f48b 	uxth.w	r4, fp
 8013c3c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8013c40:	4423      	add	r3, r4
 8013c42:	f8ad 3016 	strh.w	r3, [sp, #22]
    center_coords.y2 = bg_coords.y2 - rout;
 8013c46:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 8013c4a:	1b1b      	subs	r3, r3, r4
 8013c4c:	f8ad 301a 	strh.w	r3, [sp, #26]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 8013c50:	a805      	add	r0, sp, #20
 8013c52:	f7fa fedd 	bl	800ea10 <lv_draw_mask_is_any>
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 8013c56:	4605      	mov	r5, r0
 8013c58:	b918      	cbnz	r0, 8013c62 <draw_bg+0x402>
 8013c5a:	f1ba 0f00 	cmp.w	sl, #0
 8013c5e:	f43f af6d 	beq.w	8013b3c <draw_bg+0x2dc>
        blend_dsc.opa = opa;
 8013c62:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8013c66:	2301      	movs	r3, #1
 8013c68:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
        int32_t h_end = bg_coords.y2 - rout;
 8013c6c:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 8013c70:	eba4 040b 	sub.w	r4, r4, fp
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8013c74:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8013c78:	449b      	add	fp, r3
 8013c7a:	455c      	cmp	r4, fp
 8013c7c:	f6ff af70 	blt.w	8013b60 <draw_bg+0x300>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013c80:	f8cd 9008 	str.w	r9, [sp, #8]
 8013c84:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013c88:	9f00      	ldr	r7, [sp, #0]
 8013c8a:	e793      	b.n	8013bb4 <draw_bg+0x354>

08013c8c <draw_bg_img>:
    if(dsc->bg_img_src == NULL) return;
 8013c8c:	690b      	ldr	r3, [r1, #16]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	f000 810d 	beq.w	8013eae <draw_bg_img+0x222>
{
 8013c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c98:	b092      	sub	sp, #72	; 0x48
 8013c9a:	4606      	mov	r6, r0
 8013c9c:	460c      	mov	r4, r1
 8013c9e:	4615      	mov	r5, r2
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 8013ca0:	7e8b      	ldrb	r3, [r1, #26]
 8013ca2:	2b02      	cmp	r3, #2
 8013ca4:	d802      	bhi.n	8013cac <draw_bg_img+0x20>
}
 8013ca6:	b012      	add	sp, #72	; 0x48
 8013ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 8013cac:	6882      	ldr	r2, [r0, #8]
 8013cae:	4629      	mov	r1, r5
 8013cb0:	a810      	add	r0, sp, #64	; 0x40
 8013cb2:	f00c fec4 	bl	8020a3e <_lv_area_intersect>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d0f5      	beq.n	8013ca6 <draw_bg_img+0x1a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8013cba:	68b7      	ldr	r7, [r6, #8]
    draw_ctx->clip_area = &clip_area;
 8013cbc:	ab10      	add	r3, sp, #64	; 0x40
 8013cbe:	60b3      	str	r3, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 8013cc0:	6920      	ldr	r0, [r4, #16]
 8013cc2:	f7f9 fb18 	bl	800d2f6 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8013cc6:	2802      	cmp	r0, #2
 8013cc8:	d007      	beq.n	8013cda <draw_bg_img+0x4e>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 8013cca:	a905      	add	r1, sp, #20
 8013ccc:	6920      	ldr	r0, [r4, #16]
 8013cce:	f7fb febb 	bl	800fa48 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 8013cd2:	2801      	cmp	r0, #1
 8013cd4:	d052      	beq.n	8013d7c <draw_bg_img+0xf0>
    draw_ctx->clip_area = clip_area_ori;
 8013cd6:	60b7      	str	r7, [r6, #8]
 8013cd8:	e7e5      	b.n	8013ca6 <draw_bg_img+0x1a>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8013cda:	f04f 0800 	mov.w	r8, #0
 8013cde:	f8cd 8008 	str.w	r8, [sp, #8]
 8013ce2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8013ce6:	9301      	str	r3, [sp, #4]
 8013ce8:	f8cd 8000 	str.w	r8, [sp]
 8013cec:	4643      	mov	r3, r8
 8013cee:	6962      	ldr	r2, [r4, #20]
 8013cf0:	6921      	ldr	r1, [r4, #16]
 8013cf2:	a805      	add	r0, sp, #20
 8013cf4:	f010 f8f3 	bl	8023ede <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 8013cf8:	882b      	ldrh	r3, [r5, #0]
 8013cfa:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 8013cfe:	88aa      	ldrh	r2, [r5, #4]
 8013d00:	3201      	adds	r2, #1
 8013d02:	1ad2      	subs	r2, r2, r3
 8013d04:	b210      	sxth	r0, r2
 8013d06:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8013d0a:	4402      	add	r2, r0
 8013d0c:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 8013d10:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 8013d14:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	f8ad 3018 	strh.w	r3, [sp, #24]
        a.x2 = a.x1 + size.x - 1;
 8013d1e:	3901      	subs	r1, #1
 8013d20:	440b      	add	r3, r1
 8013d22:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 8013d26:	886b      	ldrh	r3, [r5, #2]
 8013d28:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013d2c:	88ea      	ldrh	r2, [r5, #6]
 8013d2e:	3201      	adds	r2, #1
 8013d30:	1ad2      	subs	r2, r2, r3
 8013d32:	b210      	sxth	r0, r2
 8013d34:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8013d38:	4402      	add	r2, r0
 8013d3a:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 8013d3e:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 8013d42:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8013d46:	b29b      	uxth	r3, r3
 8013d48:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.y2 = a.y1 + size.y - 1;
 8013d4c:	3901      	subs	r1, #1
 8013d4e:	440b      	add	r3, r1
 8013d50:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_draw_label_dsc_init(&label_draw_dsc);
 8013d54:	a808      	add	r0, sp, #32
 8013d56:	f7f9 fc4b 	bl	800d5f0 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 8013d5a:	6963      	ldr	r3, [r4, #20]
 8013d5c:	9308      	str	r3, [sp, #32]
        label_draw_dsc.color = dsc->bg_img_recolor;
 8013d5e:	8b23      	ldrh	r3, [r4, #24]
 8013d60:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        label_draw_dsc.opa = dsc->bg_img_opa;
 8013d64:	7ea3      	ldrb	r3, [r4, #26]
 8013d66:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 8013d6a:	f8cd 8000 	str.w	r8, [sp]
 8013d6e:	6923      	ldr	r3, [r4, #16]
 8013d70:	aa06      	add	r2, sp, #24
 8013d72:	a908      	add	r1, sp, #32
 8013d74:	4630      	mov	r0, r6
 8013d76:	f7f9 fc6f 	bl	800d658 <lv_draw_label>
 8013d7a:	e7ac      	b.n	8013cd6 <draw_bg_img+0x4a>
            lv_draw_img_dsc_init(&img_dsc);
 8013d7c:	a808      	add	r0, sp, #32
 8013d7e:	f7f9 fa6e 	bl	800d25e <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 8013d82:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8013d86:	78a2      	ldrb	r2, [r4, #2]
 8013d88:	f362 0303 	bfi	r3, r2, #0, #4
 8013d8c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            img_dsc.recolor = dsc->bg_img_recolor;
 8013d90:	8b23      	ldrh	r3, [r4, #24]
 8013d92:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 8013d96:	7ee3      	ldrb	r3, [r4, #27]
 8013d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            img_dsc.opa = dsc->bg_img_opa;
 8013d9c:	7ea3      	ldrb	r3, [r4, #26]
 8013d9e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
            if(dsc->bg_img_tiled == false) {
 8013da2:	7f23      	ldrb	r3, [r4, #28]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d04a      	beq.n	8013e3e <draw_bg_img+0x1b2>
                area.y1 = coords->y1;
 8013da8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013dac:	f8ad 201a 	strh.w	r2, [sp, #26]
                area.y2 = area.y1 + header.h - 1;
 8013db0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013db4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8013db8:	3b01      	subs	r3, #1
 8013dba:	4413      	add	r3, r2
 8013dbc:	f8ad 301e 	strh.w	r3, [sp, #30]
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8013dc0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	db86      	blt.n	8013cd6 <draw_bg_img+0x4a>
                    area.x1 = coords->x1;
 8013dc8:	f9b5 2000 	ldrsh.w	r2, [r5]
 8013dcc:	f8ad 2018 	strh.w	r2, [sp, #24]
                    area.x2 = area.x1 + header.w - 1;
 8013dd0:	9b05      	ldr	r3, [sp, #20]
 8013dd2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013dd6:	3b01      	subs	r3, #1
 8013dd8:	4413      	add	r3, r2
 8013dda:	f8ad 301c 	strh.w	r3, [sp, #28]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8013dde:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8013de2:	4293      	cmp	r3, r2
 8013de4:	db17      	blt.n	8013e16 <draw_bg_img+0x18a>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8013de6:	6923      	ldr	r3, [r4, #16]
 8013de8:	aa06      	add	r2, sp, #24
 8013dea:	a908      	add	r1, sp, #32
 8013dec:	4630      	mov	r0, r6
 8013dee:	f7f9 fa9d 	bl	800d32c <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 8013df2:	9b05      	ldr	r3, [sp, #20]
 8013df4:	f3c3 2c8a 	ubfx	ip, r3, #10, #11
 8013df8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013dfc:	4463      	add	r3, ip
 8013dfe:	b21b      	sxth	r3, r3
 8013e00:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013e04:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8013e08:	4494      	add	ip, r2
 8013e0a:	f8ad c01c 	strh.w	ip, [sp, #28]
 8013e0e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	dae7      	bge.n	8013de6 <draw_bg_img+0x15a>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8013e16:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013e1a:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8013e1e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8013e22:	4413      	add	r3, r2
 8013e24:	b21b      	sxth	r3, r3
 8013e26:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013e2a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8013e2e:	440a      	add	r2, r1
 8013e30:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013e34:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	dac5      	bge.n	8013dc8 <draw_bg_img+0x13c>
 8013e3c:	e74b      	b.n	8013cd6 <draw_bg_img+0x4a>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8013e3e:	882a      	ldrh	r2, [r5, #0]
 8013e40:	9905      	ldr	r1, [sp, #20]
 8013e42:	f3c1 2c8a 	ubfx	ip, r1, #10, #11
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013e46:	88ab      	ldrh	r3, [r5, #4]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	1a9b      	subs	r3, r3, r2
 8013e4c:	b218      	sxth	r0, r3
 8013e4e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8013e52:	4403      	add	r3, r0
 8013e54:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 8013e58:	1a52      	subs	r2, r2, r1
 8013e5a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	f8ad 2018 	strh.w	r2, [sp, #24]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8013e64:	886b      	ldrh	r3, [r5, #2]
 8013e66:	f8bd e016 	ldrh.w	lr, [sp, #22]
 8013e6a:	f3ce 104a 	ubfx	r0, lr, #5, #11
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013e6e:	88e9      	ldrh	r1, [r5, #6]
 8013e70:	3101      	adds	r1, #1
 8013e72:	1ac9      	subs	r1, r1, r3
 8013e74:	b20d      	sxth	r5, r1
 8013e76:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8013e7a:	4429      	add	r1, r5
 8013e7c:	f3ce 1e89 	ubfx	lr, lr, #6, #10
 8013e80:	eba3 030e 	sub.w	r3, r3, lr
 8013e84:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	f8ad 301a 	strh.w	r3, [sp, #26]
                area.x2 = area.x1 + header.w - 1;
 8013e8e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8013e92:	4462      	add	r2, ip
 8013e94:	f8ad 201c 	strh.w	r2, [sp, #28]
                area.y2 = area.y1 + header.h - 1;
 8013e98:	3801      	subs	r0, #1
 8013e9a:	4403      	add	r3, r0
 8013e9c:	f8ad 301e 	strh.w	r3, [sp, #30]
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8013ea0:	6923      	ldr	r3, [r4, #16]
 8013ea2:	aa06      	add	r2, sp, #24
 8013ea4:	a908      	add	r1, sp, #32
 8013ea6:	4630      	mov	r0, r6
 8013ea8:	f7f9 fa40 	bl	800d32c <lv_draw_img>
 8013eac:	e713      	b.n	8013cd6 <draw_bg_img+0x4a>
 8013eae:	4770      	bx	lr

08013eb0 <lv_draw_sw_bg>:
{
 8013eb0:	b570      	push	{r4, r5, r6, lr}
 8013eb2:	4604      	mov	r4, r0
 8013eb4:	460d      	mov	r5, r1
 8013eb6:	4616      	mov	r6, r2
    draw_bg(draw_ctx, dsc, coords);
 8013eb8:	f7ff fcd2 	bl	8013860 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 8013ebc:	4632      	mov	r2, r6
 8013ebe:	4629      	mov	r1, r5
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f7ff fee3 	bl	8013c8c <draw_bg_img>
}
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}

08013ec8 <draw_border_generic>:
                        dsc->blend_mode);
}

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 8013ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ecc:	b0b1      	sub	sp, #196	; 0xc4
 8013ece:	4683      	mov	fp, r0
 8013ed0:	4689      	mov	r9, r1
 8013ed2:	4692      	mov	sl, r2
 8013ed4:	461d      	mov	r5, r3
 8013ed6:	f9bd 60e8 	ldrsh.w	r6, [sp, #232]	; 0xe8
 8013eda:	f89d 70f0 	ldrb.w	r7, [sp, #240]	; 0xf0
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 8013ede:	4608      	mov	r0, r1
 8013ee0:	f7fa fd96 	bl	800ea10 <lv_draw_mask_is_any>

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 8013ee4:	9003      	str	r0, [sp, #12]
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	d175      	bne.n	8013fd6 <draw_border_generic+0x10e>
 8013eea:	ea55 0306 	orrs.w	r3, r5, r6
 8013eee:	d172      	bne.n	8013fd6 <draw_border_generic+0x10e>
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 8013ef0:	211c      	movs	r1, #28
 8013ef2:	a812      	add	r0, sp, #72	; 0x48
 8013ef4:	f00d ff38 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &a;
 8013ef8:	ab10      	add	r3, sp, #64	; 0x40
 8013efa:	9312      	str	r3, [sp, #72]	; 0x48
    blend_dsc.color = color;
 8013efc:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 8013f00:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    blend_dsc.opa = opa;
 8013f04:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 8013f08:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 8013f0c:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 8013f10:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8013f14:	9301      	str	r3, [sp, #4]
 8013f16:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 8013f1a:	f9b9 7000 	ldrsh.w	r7, [r9]
 8013f1e:	f9ba 3000 	ldrsh.w	r3, [sl]
 8013f22:	9302      	str	r3, [sp, #8]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 8013f24:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 8013f28:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 8013f2c:	9303      	str	r3, [sp, #12]


    /*Top*/
    a.x1 = outer_area->x1;
 8013f2e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
    a.x2 = outer_area->x2;
 8013f32:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
    a.y1 = outer_area->y1;
 8013f36:	f8ad 5042 	strh.w	r5, [sp, #66]	; 0x42
    a.y2 = inner_area->y1 - 1;
 8013f3a:	1e63      	subs	r3, r4, #1
 8013f3c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(top_side) {
 8013f40:	42a5      	cmp	r5, r4
 8013f42:	dd39      	ble.n	8013fb8 <draw_border_generic+0xf0>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 8013f44:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8013f48:	3301      	adds	r3, #1
 8013f4a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    a.y2 = outer_area->y2;
 8013f4e:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8013f52:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(bottom_side) {
 8013f56:	9b01      	ldr	r3, [sp, #4]
 8013f58:	4543      	cmp	r3, r8
 8013f5a:	da32      	bge.n	8013fc2 <draw_border_generic+0xfa>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Left*/
    a.x1 = outer_area->x1;
 8013f5c:	f8b9 3000 	ldrh.w	r3, [r9]
 8013f60:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    a.x2 = inner_area->x1 - 1;
 8013f64:	f8ba 3000 	ldrh.w	r3, [sl]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 8013f6e:	42a5      	cmp	r5, r4
 8013f70:	bfd4      	ite	le
 8013f72:	f9ba 3002 	ldrshle.w	r3, [sl, #2]
 8013f76:	f9b9 3002 	ldrshgt.w	r3, [r9, #2]
 8013f7a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 8013f7e:	9b01      	ldr	r3, [sp, #4]
 8013f80:	4543      	cmp	r3, r8
 8013f82:	bfac      	ite	ge
 8013f84:	f9ba 3006 	ldrshge.w	r3, [sl, #6]
 8013f88:	f9b9 3006 	ldrshlt.w	r3, [r9, #6]
 8013f8c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(left_side) {
 8013f90:	9b02      	ldr	r3, [sp, #8]
 8013f92:	429f      	cmp	r7, r3
 8013f94:	dd1a      	ble.n	8013fcc <draw_border_generic+0x104>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 8013f96:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    a.x2 = outer_area->x2;
 8013fa0:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8013fa4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    if(right_side) {
 8013fa8:	9b03      	ldr	r3, [sp, #12]
 8013faa:	429e      	cmp	r6, r3
 8013fac:	db1b      	blt.n	8013fe6 <draw_border_generic+0x11e>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013fae:	a912      	add	r1, sp, #72	; 0x48
 8013fb0:	4658      	mov	r0, fp
 8013fb2:	f7fc fe29 	bl	8010c08 <lv_draw_sw_blend>
        return;
 8013fb6:	e016      	b.n	8013fe6 <draw_border_generic+0x11e>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013fb8:	a912      	add	r1, sp, #72	; 0x48
 8013fba:	4658      	mov	r0, fp
 8013fbc:	f7fc fe24 	bl	8010c08 <lv_draw_sw_blend>
 8013fc0:	e7c0      	b.n	8013f44 <draw_border_generic+0x7c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013fc2:	a912      	add	r1, sp, #72	; 0x48
 8013fc4:	4658      	mov	r0, fp
 8013fc6:	f7fc fe1f 	bl	8010c08 <lv_draw_sw_blend>
 8013fca:	e7c7      	b.n	8013f5c <draw_border_generic+0x94>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013fcc:	a912      	add	r1, sp, #72	; 0x48
 8013fce:	4658      	mov	r0, fp
 8013fd0:	f7fc fe1a 	bl	8010c08 <lv_draw_sw_blend>
 8013fd4:	e7df      	b.n	8013f96 <draw_border_generic+0xce>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 8013fd6:	f8db 2008 	ldr.w	r2, [fp, #8]
 8013fda:	4649      	mov	r1, r9
 8013fdc:	a82e      	add	r0, sp, #184	; 0xb8
 8013fde:	f00c fd2e 	bl	8020a3e <_lv_area_intersect>
 8013fe2:	9004      	str	r0, [sp, #16]
 8013fe4:	b910      	cbnz	r0, 8013fec <draw_border_generic+0x124>
}
 8013fe6:	b031      	add	sp, #196	; 0xc4
 8013fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013fec:	f8bd 40bc 	ldrh.w	r4, [sp, #188]	; 0xbc
 8013ff0:	3401      	adds	r4, #1
 8013ff2:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 8013ff6:	1ae4      	subs	r4, r4, r3
 8013ff8:	b224      	sxth	r4, r4
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013ffa:	211c      	movs	r1, #28
 8013ffc:	a827      	add	r0, sp, #156	; 0x9c
 8013ffe:	f00d feb3 	bl	8021d68 <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 8014002:	4620      	mov	r0, r4
 8014004:	f00d fc82 	bl	802190c <lv_mem_buf_get>
 8014008:	902a      	str	r0, [sp, #168]	; 0xa8
    if(rout > 0) {
 801400a:	2d00      	cmp	r5, #0
 801400c:	dc7e      	bgt.n	801410c <draw_border_generic+0x244>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 801400e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014012:	9306      	str	r3, [sp, #24]
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 8014014:	2301      	movs	r3, #1
 8014016:	4632      	mov	r2, r6
 8014018:	4651      	mov	r1, sl
 801401a:	a81b      	add	r0, sp, #108	; 0x6c
 801401c:	f7fa fe50 	bl	800ecc0 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 8014020:	2100      	movs	r1, #0
 8014022:	a81b      	add	r0, sp, #108	; 0x6c
 8014024:	f7fa fc4a 	bl	800e8bc <lv_draw_mask_add>
 8014028:	9005      	str	r0, [sp, #20]
    blend_dsc.blend_area = &blend_area;
 801402a:	ab19      	add	r3, sp, #100	; 0x64
 801402c:	9327      	str	r3, [sp, #156]	; 0x9c
    blend_dsc.mask_area = &blend_area;
 801402e:	932c      	str	r3, [sp, #176]	; 0xb0
    blend_dsc.color = color;
 8014030:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 8014034:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    blend_dsc.opa = opa;
 8014038:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
    blend_dsc.blend_mode = blend_mode;
 801403c:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8014040:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 8014044:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
 8014048:	f9b9 7002 	ldrsh.w	r7, [r9, #2]
 801404c:	197b      	adds	r3, r7, r5
 801404e:	42b3      	cmp	r3, r6
 8014050:	bfb8      	it	lt
 8014052:	4633      	movlt	r3, r6
 8014054:	b21b      	sxth	r3, r3
 8014056:	9302      	str	r3, [sp, #8]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 8014058:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 801405c:	9207      	str	r2, [sp, #28]
 801405e:	f9b9 8006 	ldrsh.w	r8, [r9, #6]
 8014062:	eba8 0305 	sub.w	r3, r8, r5
 8014066:	4293      	cmp	r3, r2
 8014068:	bfa8      	it	ge
 801406a:	4613      	movge	r3, r2
 801406c:	930d      	str	r3, [sp, #52]	; 0x34
 801406e:	b21b      	sxth	r3, r3
 8014070:	9301      	str	r3, [sp, #4]
    if(mask_any) {
 8014072:	9b03      	ldr	r3, [sp, #12]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d155      	bne.n	8014124 <draw_border_generic+0x25c>
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 8014078:	f9ba c000 	ldrsh.w	ip, [sl]
 801407c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8014080:	f9b9 1000 	ldrsh.w	r1, [r9]
 8014084:	910c      	str	r1, [sp, #48]	; 0x30
 8014086:	194b      	adds	r3, r1, r5
 8014088:	4662      	mov	r2, ip
 801408a:	459c      	cmp	ip, r3
 801408c:	bfb8      	it	lt
 801408e:	461a      	movlt	r2, r3
 8014090:	920a      	str	r2, [sp, #40]	; 0x28
 8014092:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8014096:	930e      	str	r3, [sp, #56]	; 0x38
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 8014098:	f9ba e004 	ldrsh.w	lr, [sl, #4]
 801409c:	f8cd e020 	str.w	lr, [sp, #32]
 80140a0:	f9b9 0004 	ldrsh.w	r0, [r9, #4]
 80140a4:	9009      	str	r0, [sp, #36]	; 0x24
 80140a6:	1b43      	subs	r3, r0, r5
 80140a8:	4573      	cmp	r3, lr
 80140aa:	bfa8      	it	ge
 80140ac:	4673      	movge	r3, lr
 80140ae:	b21a      	sxth	r2, r3
 80140b0:	920f      	str	r2, [sp, #60]	; 0x3c
    if(left_side && right_side && top_side && bottom_side &&
 80140b2:	458c      	cmp	ip, r1
 80140b4:	f2c0 813e 	blt.w	8014334 <draw_border_generic+0x46c>
 80140b8:	4586      	cmp	lr, r0
 80140ba:	f300 813b 	bgt.w	8014334 <draw_border_generic+0x46c>
 80140be:	42be      	cmp	r6, r7
 80140c0:	f2c0 8108 	blt.w	80142d4 <draw_border_generic+0x40c>
 80140c4:	9a07      	ldr	r2, [sp, #28]
 80140c6:	4542      	cmp	r2, r8
 80140c8:	f300 8121 	bgt.w	801430e <draw_border_generic+0x446>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80140cc:	2101      	movs	r1, #1
 80140ce:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80140d2:	440b      	add	r3, r1
 80140d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140d6:	1a9b      	subs	r3, r3, r2
    if(top_side && split_hor) {
 80140d8:	b21b      	sxth	r3, r3
 80140da:	2b31      	cmp	r3, #49	; 0x31
 80140dc:	f300 822b 	bgt.w	8014536 <draw_border_generic+0x66e>
        blend_area.x1 = outer_area->x1;
 80140e0:	f8b9 3000 	ldrh.w	r3, [r9]
 80140e4:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = inner_area->x1 - 1;
 80140e8:	f8ba 3000 	ldrh.w	r3, [sl]
 80140ec:	3b01      	subs	r3, #1
 80140ee:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = core_area.y1;
 80140f2:	9b02      	ldr	r3, [sp, #8]
 80140f4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        blend_area.y2 = core_area.y2;
 80140f8:	9b01      	ldr	r3, [sp, #4]
 80140fa:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80140fe:	a927      	add	r1, sp, #156	; 0x9c
 8014100:	4658      	mov	r0, fp
 8014102:	f7fc fd81 	bl	8010c08 <lv_draw_sw_blend>
 8014106:	9b03      	ldr	r3, [sp, #12]
 8014108:	9304      	str	r3, [sp, #16]
 801410a:	e121      	b.n	8014350 <draw_border_generic+0x488>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 801410c:	2300      	movs	r3, #0
 801410e:	462a      	mov	r2, r5
 8014110:	4649      	mov	r1, r9
 8014112:	a821      	add	r0, sp, #132	; 0x84
 8014114:	f7fa fdd4 	bl	800ecc0 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8014118:	2100      	movs	r1, #0
 801411a:	a821      	add	r0, sp, #132	; 0x84
 801411c:	f7fa fbce 	bl	800e8bc <lv_draw_mask_add>
 8014120:	9006      	str	r0, [sp, #24]
 8014122:	e777      	b.n	8014014 <draw_border_generic+0x14c>
        blend_area.x1 = draw_area.x1;
 8014124:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 8014128:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = draw_area.x2;
 801412c:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	; 0xbc
 8014130:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8014134:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 8014138:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 801413c:	429d      	cmp	r5, r3
 801413e:	dc28      	bgt.n	8014192 <draw_border_generic+0x2ca>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014140:	4692      	mov	sl, r2
 8014142:	e020      	b.n	8014186 <draw_border_generic+0x2be>
            if(!bottom_side && h > core_area.y2) break;
 8014144:	45c2      	cmp	sl, r8
 8014146:	dd02      	ble.n	801414e <draw_border_generic+0x286>
 8014148:	9b01      	ldr	r3, [sp, #4]
 801414a:	42ab      	cmp	r3, r5
 801414c:	db21      	blt.n	8014192 <draw_border_generic+0x2ca>
            blend_area.y1 = h;
 801414e:	fa0f f985 	sxth.w	r9, r5
 8014152:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
            blend_area.y2 = h;
 8014156:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801415a:	4621      	mov	r1, r4
 801415c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801415e:	f00d fe69 	bl	8021e34 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 8014162:	4623      	mov	r3, r4
 8014164:	464a      	mov	r2, r9
 8014166:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	; 0xb8
 801416a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801416c:	f7fa fbc8 	bl	800e900 <lv_draw_mask_apply>
 8014170:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014174:	a927      	add	r1, sp, #156	; 0x9c
 8014176:	4658      	mov	r0, fp
 8014178:	f7fc fd46 	bl	8010c08 <lv_draw_sw_blend>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 801417c:	3501      	adds	r5, #1
 801417e:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014182:	42ab      	cmp	r3, r5
 8014184:	db05      	blt.n	8014192 <draw_border_generic+0x2ca>
            if(!top_side && h < core_area.y1) continue;
 8014186:	42be      	cmp	r6, r7
 8014188:	dadc      	bge.n	8014144 <draw_border_generic+0x27c>
 801418a:	9b02      	ldr	r3, [sp, #8]
 801418c:	42ab      	cmp	r3, r5
 801418e:	ddd9      	ble.n	8014144 <draw_border_generic+0x27c>
 8014190:	e7f4      	b.n	801417c <draw_border_generic+0x2b4>
        lv_draw_mask_free_param(&mask_rin_param);
 8014192:	a81b      	add	r0, sp, #108	; 0x6c
 8014194:	f7fa fc06 	bl	800e9a4 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 8014198:	9805      	ldr	r0, [sp, #20]
 801419a:	f7fa fbd9 	bl	800e950 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 801419e:	9c06      	ldr	r4, [sp, #24]
 80141a0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80141a4:	d103      	bne.n	80141ae <draw_border_generic+0x2e6>
        lv_mem_buf_release(blend_dsc.mask_buf);
 80141a6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80141a8:	f00d fc12 	bl	80219d0 <lv_mem_buf_release>
        return;
 80141ac:	e71b      	b.n	8013fe6 <draw_border_generic+0x11e>
            lv_draw_mask_free_param(&mask_rout_param);
 80141ae:	a821      	add	r0, sp, #132	; 0x84
 80141b0:	f7fa fbf8 	bl	800e9a4 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 80141b4:	4620      	mov	r0, r4
 80141b6:	f7fa fbcb 	bl	800e950 <lv_draw_mask_remove_id>
 80141ba:	e7f4      	b.n	80141a6 <draw_border_generic+0x2de>
        blend_area.x1 = core_area.x1;
 80141bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141be:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 80141c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141c4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = outer_area->y1;
 80141c8:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
        blend_area.y2 = inner_area->y1 - 1;
 80141cc:	1e73      	subs	r3, r6, #1
 80141ce:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80141d2:	a927      	add	r1, sp, #156	; 0x9c
 80141d4:	4658      	mov	r0, fp
 80141d6:	f7fc fd17 	bl	8010c08 <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 80141da:	9b07      	ldr	r3, [sp, #28]
 80141dc:	4543      	cmp	r3, r8
 80141de:	dd7f      	ble.n	80142e0 <draw_border_generic+0x418>
 80141e0:	e0b1      	b.n	8014346 <draw_border_generic+0x47e>
 80141e2:	9b04      	ldr	r3, [sp, #16]
 80141e4:	9303      	str	r3, [sp, #12]
 80141e6:	e77b      	b.n	80140e0 <draw_border_generic+0x218>
        blend_area.x1 = inner_area->x2 + 1;
 80141e8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80141ec:	3301      	adds	r3, #1
 80141ee:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = outer_area->x2;
 80141f2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80141f6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = core_area.y1;
 80141fa:	9b02      	ldr	r3, [sp, #8]
 80141fc:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        blend_area.y2 = core_area.y2;
 8014200:	9b01      	ldr	r3, [sp, #4]
 8014202:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014206:	a927      	add	r1, sp, #156	; 0x9c
 8014208:	4658      	mov	r0, fp
 801420a:	f7fc fcfd 	bl	8010c08 <lv_draw_sw_blend>
 801420e:	e0a4      	b.n	801435a <draw_border_generic+0x492>
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 8014210:	4621      	mov	r1, r4
 8014212:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014214:	f00d fe0e 	bl	8021e34 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 8014218:	4623      	mov	r3, r4
 801421a:	4632      	mov	r2, r6
 801421c:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8014220:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014222:	f7fa fb6d 	bl	800e900 <lv_draw_mask_apply>
 8014226:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
            if(top_y >= draw_area.y1) {
 801422a:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 801422e:	42b3      	cmp	r3, r6
 8014230:	dd1b      	ble.n	801426a <draw_border_generic+0x3a2>
            if(bottom_y <= draw_area.y2) {
 8014232:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014236:	42bb      	cmp	r3, r7
 8014238:	da20      	bge.n	801427c <draw_border_generic+0x3b4>
        for(h = 0; h < max_h; h++) {
 801423a:	f108 0801 	add.w	r8, r8, #1
 801423e:	45a8      	cmp	r8, r5
 8014240:	f000 80f5 	beq.w	801442e <draw_border_generic+0x566>
            lv_coord_t top_y = outer_area->y1 + h;
 8014244:	fa1f f788 	uxth.w	r7, r8
 8014248:	f8b9 6002 	ldrh.w	r6, [r9, #2]
 801424c:	443e      	add	r6, r7
 801424e:	b236      	sxth	r6, r6
            lv_coord_t bottom_y = outer_area->y2 - h;
 8014250:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8014254:	1bdf      	subs	r7, r3, r7
 8014256:	b23f      	sxth	r7, r7
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 8014258:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 801425c:	42b3      	cmp	r3, r6
 801425e:	ddd7      	ble.n	8014210 <draw_border_generic+0x348>
 8014260:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014264:	42bb      	cmp	r3, r7
 8014266:	dad3      	bge.n	8014210 <draw_border_generic+0x348>
 8014268:	e7e7      	b.n	801423a <draw_border_generic+0x372>
                blend_area.y1 = top_y;
 801426a:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
                blend_area.y2 = top_y;
 801426e:	f8ad 606a 	strh.w	r6, [sp, #106]	; 0x6a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014272:	a927      	add	r1, sp, #156	; 0x9c
 8014274:	4658      	mov	r0, fp
 8014276:	f7fc fcc7 	bl	8010c08 <lv_draw_sw_blend>
 801427a:	e7da      	b.n	8014232 <draw_border_generic+0x36a>
                blend_area.y1 = bottom_y;
 801427c:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
                blend_area.y2 = bottom_y;
 8014280:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014284:	a927      	add	r1, sp, #156	; 0x9c
 8014286:	4658      	mov	r0, fp
 8014288:	f7fc fcbe 	bl	8010c08 <lv_draw_sw_blend>
 801428c:	e7d5      	b.n	801423a <draw_border_generic+0x372>
        blend_area.x1 = draw_area.x1;
 801428e:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8014292:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 8014296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014298:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 801429c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 80142a0:	45a2      	cmp	sl, r4
 80142a2:	bfa8      	it	ge
 80142a4:	46a2      	movge	sl, r4
 80142a6:	f8ad a068 	strh.w	sl, [sp, #104]	; 0x68
 80142aa:	f1c3 0401 	rsb	r4, r3, #1
 80142ae:	44a2      	add	sl, r4
 80142b0:	fa0f f48a 	sxth.w	r4, sl
        if(blend_w > 0) {
 80142b4:	2c00      	cmp	r4, #0
 80142b6:	f340 8119 	ble.w	80144ec <draw_border_generic+0x624>
            if(left_side || top_side) {
 80142ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80142bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142be:	4293      	cmp	r3, r2
 80142c0:	f280 80c5 	bge.w	801444e <draw_border_generic+0x586>
 80142c4:	42be      	cmp	r6, r7
 80142c6:	f280 812f 	bge.w	8014528 <draw_border_generic+0x660>
            if(left_side || bottom_side) {
 80142ca:	9b07      	ldr	r3, [sp, #28]
 80142cc:	4543      	cmp	r3, r8
 80142ce:	f300 810d 	bgt.w	80144ec <draw_border_generic+0x624>
 80142d2:	e0e1      	b.n	8014498 <draw_border_generic+0x5d0>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80142d4:	2301      	movs	r3, #1
 80142d6:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    if(bottom_side && split_hor) {
 80142da:	9b07      	ldr	r3, [sp, #28]
 80142dc:	4543      	cmp	r3, r8
 80142de:	dc13      	bgt.n	8014308 <draw_border_generic+0x440>
        blend_area.x1 = core_area.x1;
 80142e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142e2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 80142e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142e8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = inner_area->y2 + 1;
 80142ec:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80142f0:	3301      	adds	r3, #1
 80142f2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        blend_area.y2 = outer_area->y2;
 80142f6:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80142fa:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80142fe:	a927      	add	r1, sp, #156	; 0x9c
 8014300:	4658      	mov	r0, fp
 8014302:	f7fc fc81 	bl	8010c08 <lv_draw_sw_blend>
 8014306:	e01e      	b.n	8014346 <draw_border_generic+0x47e>
    if(bottom_side && split_hor) {
 8014308:	9b04      	ldr	r3, [sp, #16]
 801430a:	9303      	str	r3, [sp, #12]
 801430c:	e6e8      	b.n	80140e0 <draw_border_generic+0x218>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801430e:	2301      	movs	r3, #1
 8014310:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
        blend_area.x1 = core_area.x1;
 8014314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014316:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 801431a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801431c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = outer_area->y1;
 8014320:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
        blend_area.y2 = inner_area->y1 - 1;
 8014324:	1e73      	subs	r3, r6, #1
 8014326:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801432a:	a927      	add	r1, sp, #156	; 0x9c
 801432c:	4658      	mov	r0, fp
 801432e:	f7fc fc6b 	bl	8010c08 <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 8014332:	e008      	b.n	8014346 <draw_border_generic+0x47e>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8014334:	2301      	movs	r3, #1
 8014336:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    if(top_side && split_hor) {
 801433a:	42be      	cmp	r6, r7
 801433c:	f6bf af3e 	bge.w	80141bc <draw_border_generic+0x2f4>
    if(bottom_side && split_hor) {
 8014340:	9b07      	ldr	r3, [sp, #28]
 8014342:	4543      	cmp	r3, r8
 8014344:	ddcc      	ble.n	80142e0 <draw_border_generic+0x418>
    if(left_side) {
 8014346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801434a:	4293      	cmp	r3, r2
 801434c:	f6bf af49 	bge.w	80141e2 <draw_border_generic+0x31a>
    if(right_side) {
 8014350:	9b08      	ldr	r3, [sp, #32]
 8014352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014354:	4293      	cmp	r3, r2
 8014356:	f77f af47 	ble.w	80141e8 <draw_border_generic+0x320>
    if(!split_hor) {
 801435a:	9b04      	ldr	r3, [sp, #16]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d196      	bne.n	801428e <draw_border_generic+0x3c6>
        blend_area.x1 = draw_area.x1;
 8014360:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 8014364:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = draw_area.x2;
 8014368:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	; 0xbc
 801436c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 8014370:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8014374:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 8014378:	1a9b      	subs	r3, r3, r2
 801437a:	429d      	cmp	r5, r3
 801437c:	bfb8      	it	lt
 801437e:	461d      	movlt	r5, r3
        for(h = 0; h < max_h; h++) {
 8014380:	b22d      	sxth	r5, r5
 8014382:	2d00      	cmp	r5, #0
 8014384:	dd53      	ble.n	801442e <draw_border_generic+0x566>
 8014386:	f04f 0800 	mov.w	r8, #0
 801438a:	e75b      	b.n	8014244 <draw_border_generic+0x37c>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801438c:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 8014390:	9b02      	ldr	r3, [sp, #8]
 8014392:	461e      	mov	r6, r3
 8014394:	429d      	cmp	r5, r3
 8014396:	db06      	blt.n	80143a6 <draw_border_generic+0x4de>
 8014398:	e0c2      	b.n	8014520 <draw_border_generic+0x658>
 801439a:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 801439e:	9b02      	ldr	r3, [sp, #8]
 80143a0:	461e      	mov	r6, r3
 80143a2:	429d      	cmp	r5, r3
 80143a4:	da1d      	bge.n	80143e2 <draw_border_generic+0x51a>
                    blend_area.y1 = h;
 80143a6:	b22f      	sxth	r7, r5
 80143a8:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 80143ac:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80143b0:	4621      	mov	r1, r4
 80143b2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80143b4:	f00d fd3e 	bl	8021e34 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80143b8:	4623      	mov	r3, r4
 80143ba:	463a      	mov	r2, r7
 80143bc:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 80143c0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80143c2:	f7fa fa9d 	bl	800e900 <lv_draw_mask_apply>
 80143c6:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80143ca:	a927      	add	r1, sp, #156	; 0x9c
 80143cc:	4658      	mov	r0, fp
 80143ce:	f7fc fc1b 	bl	8010c08 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 80143d2:	3501      	adds	r5, #1
 80143d4:	42b5      	cmp	r5, r6
 80143d6:	d1e6      	bne.n	80143a6 <draw_border_generic+0x4de>
            if(right_side || bottom_side) {
 80143d8:	9b08      	ldr	r3, [sp, #32]
 80143da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143dc:	4293      	cmp	r3, r2
 80143de:	f300 809f 	bgt.w	8014520 <draw_border_generic+0x658>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 80143e2:	9b01      	ldr	r3, [sp, #4]
 80143e4:	3301      	adds	r3, #1
 80143e6:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 80143ea:	4293      	cmp	r3, r2
 80143ec:	dc1f      	bgt.n	801442e <draw_border_generic+0x566>
 80143ee:	461e      	mov	r6, r3
 80143f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80143f2:	3701      	adds	r7, #1
 80143f4:	1aff      	subs	r7, r7, r3
                    blend_area.y1 = h;
 80143f6:	19bd      	adds	r5, r7, r6
 80143f8:	b22d      	sxth	r5, r5
 80143fa:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 80143fe:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8014402:	4621      	mov	r1, r4
 8014404:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014406:	f00d fd15 	bl	8021e34 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801440a:	4623      	mov	r3, r4
 801440c:	462a      	mov	r2, r5
 801440e:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8014412:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014414:	f7fa fa74 	bl	800e900 <lv_draw_mask_apply>
 8014418:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801441c:	a927      	add	r1, sp, #156	; 0x9c
 801441e:	4658      	mov	r0, fp
 8014420:	f7fc fbf2 	bl	8010c08 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8014424:	3601      	adds	r6, #1
 8014426:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 801442a:	42b3      	cmp	r3, r6
 801442c:	dae3      	bge.n	80143f6 <draw_border_generic+0x52e>
    lv_draw_mask_free_param(&mask_rin_param);
 801442e:	a81b      	add	r0, sp, #108	; 0x6c
 8014430:	f7fa fab8 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 8014434:	9805      	ldr	r0, [sp, #20]
 8014436:	f7fa fa8b 	bl	800e950 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 801443a:	a821      	add	r0, sp, #132	; 0x84
 801443c:	f7fa fab2 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 8014440:	9806      	ldr	r0, [sp, #24]
 8014442:	f7fa fa85 	bl	800e950 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 8014446:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014448:	f00d fac2 	bl	80219d0 <lv_mem_buf_release>
 801444c:	e5cb      	b.n	8013fe6 <draw_border_generic+0x11e>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 801444e:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 8014452:	9b02      	ldr	r3, [sp, #8]
 8014454:	469a      	mov	sl, r3
 8014456:	429d      	cmp	r5, r3
 8014458:	da1e      	bge.n	8014498 <draw_border_generic+0x5d0>
                    blend_area.y1 = h;
 801445a:	fa0f f985 	sxth.w	r9, r5
 801445e:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 8014462:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8014466:	4621      	mov	r1, r4
 8014468:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801446a:	f00d fce3 	bl	8021e34 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 801446e:	4623      	mov	r3, r4
 8014470:	464a      	mov	r2, r9
 8014472:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8014476:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014478:	f7fa fa42 	bl	800e900 <lv_draw_mask_apply>
 801447c:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014480:	a927      	add	r1, sp, #156	; 0x9c
 8014482:	4658      	mov	r0, fp
 8014484:	f7fc fbc0 	bl	8010c08 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8014488:	3501      	adds	r5, #1
 801448a:	4555      	cmp	r5, sl
 801448c:	d1e5      	bne.n	801445a <draw_border_generic+0x592>
            if(left_side || bottom_side) {
 801448e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014492:	4293      	cmp	r3, r2
 8014494:	f6ff af19 	blt.w	80142ca <draw_border_generic+0x402>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8014498:	9b01      	ldr	r3, [sp, #4]
 801449a:	3301      	adds	r3, #1
 801449c:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 80144a0:	4293      	cmp	r3, r2
 80144a2:	dc23      	bgt.n	80144ec <draw_border_generic+0x624>
 80144a4:	4699      	mov	r9, r3
 80144a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80144a8:	f102 0a01 	add.w	sl, r2, #1
 80144ac:	ebaa 0a03 	sub.w	sl, sl, r3
                    blend_area.y1 = h;
 80144b0:	eb0a 0509 	add.w	r5, sl, r9
 80144b4:	b22d      	sxth	r5, r5
 80144b6:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 80144ba:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 80144be:	4621      	mov	r1, r4
 80144c0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80144c2:	f00d fcb7 	bl	8021e34 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 80144c6:	4623      	mov	r3, r4
 80144c8:	462a      	mov	r2, r5
 80144ca:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 80144ce:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80144d0:	f7fa fa16 	bl	800e900 <lv_draw_mask_apply>
 80144d4:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80144d8:	a927      	add	r1, sp, #156	; 0x9c
 80144da:	4658      	mov	r0, fp
 80144dc:	f7fc fb94 	bl	8010c08 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 80144e0:	f109 0901 	add.w	r9, r9, #1
 80144e4:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 80144e8:	454b      	cmp	r3, r9
 80144ea:	dae1      	bge.n	80144b0 <draw_border_generic+0x5e8>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 80144ec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80144ee:	3401      	adds	r4, #1
 80144f0:	f9bd 20b8 	ldrsh.w	r2, [sp, #184]	; 0xb8
 80144f4:	42a2      	cmp	r2, r4
 80144f6:	bfb8      	it	lt
 80144f8:	4622      	movlt	r2, r4
 80144fa:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        blend_area.x2 = draw_area.x2;
 80144fe:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8014502:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 8014506:	1c5c      	adds	r4, r3, #1
 8014508:	1aa4      	subs	r4, r4, r2
 801450a:	b224      	sxth	r4, r4
        if(blend_w > 0) {
 801450c:	2c00      	cmp	r4, #0
 801450e:	dd8e      	ble.n	801442e <draw_border_generic+0x566>
            if(right_side || top_side) {
 8014510:	9b08      	ldr	r3, [sp, #32]
 8014512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014514:	4293      	cmp	r3, r2
 8014516:	f77f af40 	ble.w	801439a <draw_border_generic+0x4d2>
 801451a:	42be      	cmp	r6, r7
 801451c:	f6bf af36 	bge.w	801438c <draw_border_generic+0x4c4>
            if(right_side || bottom_side) {
 8014520:	9b07      	ldr	r3, [sp, #28]
 8014522:	4543      	cmp	r3, r8
 8014524:	dc83      	bgt.n	801442e <draw_border_generic+0x566>
 8014526:	e75c      	b.n	80143e2 <draw_border_generic+0x51a>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8014528:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 801452c:	9b02      	ldr	r3, [sp, #8]
 801452e:	469a      	mov	sl, r3
 8014530:	429d      	cmp	r5, r3
 8014532:	db92      	blt.n	801445a <draw_border_generic+0x592>
 8014534:	e6c9      	b.n	80142ca <draw_border_generic+0x402>
        blend_area.x1 = core_area.x1;
 8014536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014538:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 801453c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801453e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = outer_area->y1;
 8014542:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
        blend_area.y2 = inner_area->y1 - 1;
 8014546:	1e73      	subs	r3, r6, #1
 8014548:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801454c:	a927      	add	r1, sp, #156	; 0x9c
 801454e:	4658      	mov	r0, fp
 8014550:	f7fc fb5a 	bl	8010c08 <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 8014554:	e6c4      	b.n	80142e0 <draw_border_generic+0x418>

08014556 <lv_draw_sw_rect>:
{
 8014556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801455a:	b0ab      	sub	sp, #172	; 0xac
 801455c:	9004      	str	r0, [sp, #16]
 801455e:	468a      	mov	sl, r1
 8014560:	9205      	str	r2, [sp, #20]
    if(dsc->shadow_width == 0) return;
 8014562:	f9b1 302e 	ldrsh.w	r3, [r1, #46]	; 0x2e
 8014566:	2b00      	cmp	r3, #0
 8014568:	d047      	beq.n	80145fa <lv_draw_sw_rect+0xa4>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 801456a:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 801456e:	9206      	str	r2, [sp, #24]
 8014570:	2a02      	cmp	r2, #2
 8014572:	d942      	bls.n	80145fa <lv_draw_sw_rect+0xa4>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 8014574:	2b01      	cmp	r3, #1
 8014576:	f000 80be 	beq.w	80146f6 <lv_draw_sw_rect+0x1a0>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 801457a:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 801457e:	9f05      	ldr	r7, [sp, #20]
 8014580:	883d      	ldrh	r5, [r7, #0]
 8014582:	4415      	add	r5, r2
 8014584:	b2ad      	uxth	r5, r5
 8014586:	f8ba 9034 	ldrh.w	r9, [sl, #52]	; 0x34
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 801458a:	eb02 0409 	add.w	r4, r2, r9
 801458e:	88ba      	ldrh	r2, [r7, #4]
 8014590:	4414      	add	r4, r2
 8014592:	b2a4      	uxth	r4, r4
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8014594:	f8ba 2032 	ldrh.w	r2, [sl, #50]	; 0x32
 8014598:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 801459c:	4490      	add	r8, r2
 801459e:	fa1f f888 	uxth.w	r8, r8
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 80145a2:	eb09 0602 	add.w	r6, r9, r2
 80145a6:	88fa      	ldrh	r2, [r7, #6]
 80145a8:	4416      	add	r6, r2
 80145aa:	b2b6      	uxth	r6, r6
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 80145ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80145b0:	f3c3 034f 	ubfx	r3, r3, #1, #16
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 80145b4:	eba5 0209 	sub.w	r2, r5, r9
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 80145b8:	3a01      	subs	r2, #1
 80145ba:	1ad2      	subs	r2, r2, r3
 80145bc:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 80145c0:	1c5a      	adds	r2, r3, #1
 80145c2:	b292      	uxth	r2, r2
 80145c4:	18a1      	adds	r1, r4, r2
 80145c6:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 80145ca:	eba8 0109 	sub.w	r1, r8, r9
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 80145ce:	3901      	subs	r1, #1
 80145d0:	1acb      	subs	r3, r1, r3
 80145d2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 80145d6:	4432      	add	r2, r6
 80145d8:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 80145dc:	9b06      	ldr	r3, [sp, #24]
 80145de:	2bfe      	cmp	r3, #254	; 0xfe
 80145e0:	bf28      	it	cs
 80145e2:	23ff      	movcs	r3, #255	; 0xff
 80145e4:	9306      	str	r3, [sp, #24]
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 80145e6:	9b04      	ldr	r3, [sp, #16]
 80145e8:	689a      	ldr	r2, [r3, #8]
 80145ea:	a913      	add	r1, sp, #76	; 0x4c
 80145ec:	a815      	add	r0, sp, #84	; 0x54
 80145ee:	f00c fa26 	bl	8020a3e <_lv_area_intersect>
 80145f2:	9009      	str	r0, [sp, #36]	; 0x24
 80145f4:	2800      	cmp	r0, #0
 80145f6:	f040 8088 	bne.w	801470a <lv_draw_sw_rect+0x1b4>
    draw_bg(draw_ctx, dsc, coords);
 80145fa:	9c05      	ldr	r4, [sp, #20]
 80145fc:	4622      	mov	r2, r4
 80145fe:	4651      	mov	r1, sl
 8014600:	9d04      	ldr	r5, [sp, #16]
 8014602:	4628      	mov	r0, r5
 8014604:	f7ff f92c 	bl	8013860 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 8014608:	4622      	mov	r2, r4
 801460a:	4651      	mov	r1, sl
 801460c:	4628      	mov	r0, r5
 801460e:	f7ff fb3d 	bl	8013c8c <draw_bg_img>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8014612:	f89a 0022 	ldrb.w	r0, [sl, #34]	; 0x22
 8014616:	2802      	cmp	r0, #2
 8014618:	d961      	bls.n	80146de <lv_draw_sw_rect+0x188>
    if(dsc->border_width == 0) return;
 801461a:	f9ba 2020 	ldrsh.w	r2, [sl, #32]
 801461e:	2a00      	cmp	r2, #0
 8014620:	d05d      	beq.n	80146de <lv_draw_sw_rect+0x188>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8014622:	f89a 3023 	ldrb.w	r3, [sl, #35]	; 0x23
 8014626:	f013 0f3e 	tst.w	r3, #62	; 0x3e
 801462a:	d058      	beq.n	80146de <lv_draw_sw_rect+0x188>
    if(dsc->border_post) return;
 801462c:	f013 0f01 	tst.w	r3, #1
 8014630:	d155      	bne.n	80146de <lv_draw_sw_rect+0x188>
 8014632:	4623      	mov	r3, r4
 8014634:	88a6      	ldrh	r6, [r4, #4]
 8014636:	8827      	ldrh	r7, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014638:	88e4      	ldrh	r4, [r4, #6]
 801463a:	885d      	ldrh	r5, [r3, #2]
    int32_t rout = dsc->radius;
 801463c:	f9ba c000 	ldrsh.w	ip, [sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014640:	1c73      	adds	r3, r6, #1
 8014642:	1bd9      	subs	r1, r3, r7
    int32_t coords_w = lv_area_get_width(coords);
 8014644:	b20b      	sxth	r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014646:	1c61      	adds	r1, r4, #1
 8014648:	1b49      	subs	r1, r1, r5
    int32_t coords_h = lv_area_get_height(coords);
 801464a:	b209      	sxth	r1, r1
    int32_t short_side = LV_MIN(coords_w, coords_h);
 801464c:	4299      	cmp	r1, r3
 801464e:	bfa8      	it	ge
 8014650:	4619      	movge	r1, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
 8014652:	104b      	asrs	r3, r1, #1
 8014654:	4563      	cmp	r3, ip
 8014656:	bfa8      	it	ge
 8014658:	4663      	movge	r3, ip
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 801465a:	f89a c023 	ldrb.w	ip, [sl, #35]	; 0x23
 801465e:	f3cc 0144 	ubfx	r1, ip, #1, #5
 8014662:	f01c 0f08 	tst.w	ip, #8
 8014666:	bf11      	iteee	ne
 8014668:	fa1f fc82 	uxthne.w	ip, r2
 801466c:	eb02 0c03 	addeq.w	ip, r2, r3
 8014670:	f1cc 0c00 	rsbeq	ip, ip, #0
 8014674:	fa1f fc8c 	uxtheq.w	ip, ip
 8014678:	4467      	add	r7, ip
 801467a:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 801467e:	f011 0f08 	tst.w	r1, #8
 8014682:	bf11      	iteee	ne
 8014684:	b297      	uxthne	r7, r2
 8014686:	18d7      	addeq	r7, r2, r3
 8014688:	427f      	negeq	r7, r7
 801468a:	b2bf      	uxtheq	r7, r7
 801468c:	1bf6      	subs	r6, r6, r7
 801468e:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8014692:	f011 0f02 	tst.w	r1, #2
 8014696:	bf11      	iteee	ne
 8014698:	b296      	uxthne	r6, r2
 801469a:	18d6      	addeq	r6, r2, r3
 801469c:	4276      	negeq	r6, r6
 801469e:	b2b6      	uxtheq	r6, r6
 80146a0:	4435      	add	r5, r6
 80146a2:	f8ad 508e 	strh.w	r5, [sp, #142]	; 0x8e
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 80146a6:	f011 0f01 	tst.w	r1, #1
 80146aa:	bf11      	iteee	ne
 80146ac:	b291      	uxthne	r1, r2
 80146ae:	18d1      	addeq	r1, r2, r3
 80146b0:	4249      	negeq	r1, r1
 80146b2:	b289      	uxtheq	r1, r1
 80146b4:	1a64      	subs	r4, r4, r1
 80146b6:	f8ad 4092 	strh.w	r4, [sp, #146]	; 0x92
    lv_coord_t rin = rout - dsc->border_width;
 80146ba:	1a9a      	subs	r2, r3, r2
 80146bc:	b212      	sxth	r2, r2
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 80146be:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80146c2:	9103      	str	r1, [sp, #12]
 80146c4:	9002      	str	r0, [sp, #8]
 80146c6:	f8ba 101e 	ldrh.w	r1, [sl, #30]
 80146ca:	f8ad 1004 	strh.w	r1, [sp, #4]
 80146ce:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80146d2:	9200      	str	r2, [sp, #0]
 80146d4:	aa23      	add	r2, sp, #140	; 0x8c
 80146d6:	9905      	ldr	r1, [sp, #20]
 80146d8:	9804      	ldr	r0, [sp, #16]
 80146da:	f7ff fbf5 	bl	8013ec8 <draw_border_generic>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 80146de:	f89a 502a 	ldrb.w	r5, [sl, #42]	; 0x2a
 80146e2:	2d02      	cmp	r5, #2
 80146e4:	d904      	bls.n	80146f0 <lv_draw_sw_rect+0x19a>
    if(dsc->outline_width == 0) return;
 80146e6:	f9ba 0026 	ldrsh.w	r0, [sl, #38]	; 0x26
 80146ea:	2800      	cmp	r0, #0
 80146ec:	f040 86b3 	bne.w	8015456 <lv_draw_sw_rect+0xf00>
}
 80146f0:	b02b      	add	sp, #172	; 0xac
 80146f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 80146f6:	f9b1 2034 	ldrsh.w	r2, [r1, #52]	; 0x34
 80146fa:	2a00      	cmp	r2, #0
 80146fc:	f73f af3d 	bgt.w	801457a <lv_draw_sw_rect+0x24>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 8014700:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8014702:	2a00      	cmp	r2, #0
 8014704:	f47f af39 	bne.w	801457a <lv_draw_sw_rect+0x24>
 8014708:	e777      	b.n	80145fa <lv_draw_sw_rect+0xa4>
    dest->x1 = src->x1;
 801470a:	883b      	ldrh	r3, [r7, #0]
 801470c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y1 = src->y1;
 8014710:	887b      	ldrh	r3, [r7, #2]
 8014712:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    dest->x2 = src->x2;
 8014716:	88bb      	ldrh	r3, [r7, #4]
 8014718:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    dest->y2 = src->y2;
 801471c:	88fb      	ldrh	r3, [r7, #6]
 801471e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    lv_area_increase(&bg_area, -1, -1);
 8014722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014726:	4611      	mov	r1, r2
 8014728:	a817      	add	r0, sp, #92	; 0x5c
 801472a:	f00c f96a 	bl	8020a02 <lv_area_increase>
    int32_t r_bg = dsc->radius;
 801472e:	f9ba 2000 	ldrsh.w	r2, [sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014732:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8014736:	3301      	adds	r3, #1
 8014738:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 801473c:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801473e:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 8014742:	3101      	adds	r1, #1
 8014744:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
 8014748:	1a09      	subs	r1, r1, r0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 801474a:	b21b      	sxth	r3, r3
 801474c:	b209      	sxth	r1, r1
 801474e:	428b      	cmp	r3, r1
 8014750:	bfa8      	it	ge
 8014752:	460b      	movge	r3, r1
 8014754:	105b      	asrs	r3, r3, #1
 8014756:	4293      	cmp	r3, r2
 8014758:	bfa8      	it	ge
 801475a:	4613      	movge	r3, r2
 801475c:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801475e:	f109 0301 	add.w	r3, r9, #1
 8014762:	b29b      	uxth	r3, r3
 8014764:	441c      	add	r4, r3
 8014766:	b2a4      	uxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014768:	4433      	add	r3, r6
 801476a:	eba3 0808 	sub.w	r8, r3, r8
 801476e:	fa1f f988 	uxth.w	r9, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014772:	1b67      	subs	r7, r4, r5
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8014774:	b23f      	sxth	r7, r7
 8014776:	fa0f f888 	sxth.w	r8, r8
 801477a:	45b8      	cmp	r8, r7
 801477c:	bfa8      	it	ge
 801477e:	46b8      	movge	r8, r7
 8014780:	ea4f 0768 	mov.w	r7, r8, asr #1
 8014784:	4297      	cmp	r7, r2
 8014786:	bfa8      	it	ge
 8014788:	4617      	movge	r7, r2
    int32_t corner_size = dsc->shadow_width  + r_sh;
 801478a:	f9ba 302e 	ldrsh.w	r3, [sl, #46]	; 0x2e
 801478e:	eb03 0b07 	add.w	fp, r3, r7
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8014792:	fb0b f00b 	mul.w	r0, fp, fp
 8014796:	0040      	lsls	r0, r0, #1
 8014798:	f00d f8b8 	bl	802190c <lv_mem_buf_get>
 801479c:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 801479e:	f9ba 802e 	ldrsh.w	r8, [sl, #46]	; 0x2e
    int32_t size = sw_ori  + r;
 80147a2:	eb07 0608 	add.w	r6, r7, r8
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 80147a6:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
 80147aa:	f3c2 024f 	ubfx	r2, r2, #1, #16
 80147ae:	1e53      	subs	r3, r2, #1
 80147b0:	f018 0101 	ands.w	r1, r8, #1
 80147b4:	910e      	str	r1, [sp, #56]	; 0x38
 80147b6:	bf0c      	ite	eq
 80147b8:	2101      	moveq	r1, #1
 80147ba:	2100      	movne	r1, #0
 80147bc:	1a5b      	subs	r3, r3, r1
 80147be:	443b      	add	r3, r7
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    sh_area.y1 = sw / 2 + 1;
 80147c6:	3201      	adds	r2, #1
 80147c8:	b292      	uxth	r2, r2
 80147ca:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 80147ce:	1b2c      	subs	r4, r5, r4
 80147d0:	4423      	add	r3, r4
 80147d2:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 80147d6:	444a      	add	r2, r9
 80147d8:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 80147dc:	2300      	movs	r3, #0
 80147de:	463a      	mov	r2, r7
 80147e0:	a91d      	add	r1, sp, #116	; 0x74
 80147e2:	a823      	add	r0, sp, #140	; 0x8c
 80147e4:	f7fa fa6c 	bl	800ecc0 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 80147e8:	f1b8 0f01 	cmp.w	r8, #1
 80147ec:	f000 86cf 	beq.w	801558e <lv_draw_sw_rect+0x1038>
    else sw = sw_ori >> 1;
 80147f0:	ea4f 0368 	mov.w	r3, r8, asr #1
 80147f4:	9308      	str	r3, [sp, #32]
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 80147f6:	960b      	str	r6, [sp, #44]	; 0x2c
 80147f8:	4630      	mov	r0, r6
 80147fa:	f00d f887 	bl	802190c <lv_mem_buf_get>
 80147fe:	4680      	mov	r8, r0
    for(y = 0; y < size; y++) {
 8014800:	2e00      	cmp	r6, #0
 8014802:	dd42      	ble.n	801488a <lv_draw_sw_rect+0x334>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8014804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014806:	ea4f 0943 	mov.w	r9, r3, lsl #1
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 801480a:	9f07      	ldr	r7, [sp, #28]
    for(y = 0; y < size; y++) {
 801480c:	2400      	movs	r4, #0
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801480e:	b232      	sxth	r2, r6
 8014810:	1e75      	subs	r5, r6, #1
 8014812:	4445      	add	r5, r8
 8014814:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8014818:	469b      	mov	fp, r3
 801481a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801481e:	4692      	mov	sl, r2
 8014820:	e008      	b.n	8014834 <lv_draw_sw_rect+0x2de>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8014822:	4649      	mov	r1, r9
 8014824:	4638      	mov	r0, r7
 8014826:	f00d fa9f 	bl	8021d68 <lv_memset_00>
        sh_ups_tmp_buf += size;
 801482a:	444f      	add	r7, r9
    for(y = 0; y < size; y++) {
 801482c:	3401      	adds	r4, #1
 801482e:	42a6      	cmp	r6, r4
 8014830:	f340 8675 	ble.w	801551e <lv_draw_sw_rect+0xfc8>
        lv_memset_ff(mask_line, size);
 8014834:	4659      	mov	r1, fp
 8014836:	4640      	mov	r0, r8
 8014838:	f00d fafc 	bl	8021e34 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 801483c:	ab23      	add	r3, sp, #140	; 0x8c
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	4653      	mov	r3, sl
 8014842:	b222      	sxth	r2, r4
 8014844:	2100      	movs	r1, #0
 8014846:	4640      	mov	r0, r8
 8014848:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 801484c:	47e0      	blx	ip
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 801484e:	2800      	cmp	r0, #0
 8014850:	d0e7      	beq.n	8014822 <lv_draw_sw_rect+0x2cc>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8014852:	9a08      	ldr	r2, [sp, #32]
 8014854:	4610      	mov	r0, r2
 8014856:	f898 3000 	ldrb.w	r3, [r8]
 801485a:	019b      	lsls	r3, r3, #6
 801485c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014860:	803b      	strh	r3, [r7, #0]
            for(i = 1; i < size; i++) {
 8014862:	2e01      	cmp	r6, #1
 8014864:	dde1      	ble.n	801482a <lv_draw_sw_rect+0x2d4>
 8014866:	4642      	mov	r2, r8
 8014868:	4639      	mov	r1, r7
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 801486a:	4694      	mov	ip, r2
 801486c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014870:	f89c c000 	ldrb.w	ip, [ip]
 8014874:	459c      	cmp	ip, r3
 8014876:	bf0e      	itee	eq
 8014878:	880b      	ldrheq	r3, [r1, #0]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 801487a:	019b      	lslne	r3, r3, #6
 801487c:	fb93 f3f0 	sdivne	r3, r3, r0
 8014880:	804b      	strh	r3, [r1, #2]
            for(i = 1; i < size; i++) {
 8014882:	3102      	adds	r1, #2
 8014884:	42aa      	cmp	r2, r5
 8014886:	d1f0      	bne.n	801486a <lv_draw_sw_rect+0x314>
 8014888:	e7cf      	b.n	801482a <lv_draw_sw_rect+0x2d4>
    lv_mem_buf_release(mask_line);
 801488a:	f00d f8a1 	bl	80219d0 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 801488e:	a823      	add	r0, sp, #140	; 0x8c
 8014890:	f7fa f888 	bl	800e9a4 <lv_draw_mask_free_param>
    if(sw == 1) {
 8014894:	9b08      	ldr	r3, [sp, #32]
 8014896:	2b01      	cmp	r3, #1
 8014898:	f040 864e 	bne.w	8015538 <lv_draw_sw_rect+0xfe2>
 801489c:	f000 be71 	b.w	8015582 <lv_draw_sw_rect+0x102c>
        for(i = 0; i < (uint32_t)size * size; i++) {
 80148a0:	42ab      	cmp	r3, r5
 80148a2:	d00b      	beq.n	80148bc <lv_draw_sw_rect+0x366>
            if(sh_buf[i] == 0) continue;
 80148a4:	3302      	adds	r3, #2
 80148a6:	881a      	ldrh	r2, [r3, #0]
 80148a8:	2a00      	cmp	r2, #0
 80148aa:	d0f9      	beq.n	80148a0 <lv_draw_sw_rect+0x34a>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 80148ac:	2aff      	cmp	r2, #255	; 0xff
 80148ae:	bf0f      	iteee	eq
 80148b0:	801f      	strheq	r7, [r3, #0]
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 80148b2:	0192      	lslne	r2, r2, #6
 80148b4:	fb92 f2f1 	sdivne	r2, r2, r1
 80148b8:	801a      	strhne	r2, [r3, #0]
 80148ba:	e7f1      	b.n	80148a0 <lv_draw_sw_rect+0x34a>
        shadow_blur_corner(size, sw, sh_buf);
 80148bc:	9a07      	ldr	r2, [sp, #28]
 80148be:	4620      	mov	r0, r4
 80148c0:	f7fe fef4 	bl	80136ac <shadow_blur_corner>
    for(x = 0; x < size * size; x++) {
 80148c4:	fb06 f606 	mul.w	r6, r6, r6
 80148c8:	2e00      	cmp	r6, #0
 80148ca:	dd0a      	ble.n	80148e2 <lv_draw_sw_rect+0x38c>
 80148cc:	9a07      	ldr	r2, [sp, #28]
 80148ce:	1e93      	subs	r3, r2, #2
 80148d0:	3a01      	subs	r2, #1
 80148d2:	eb03 0046 	add.w	r0, r3, r6, lsl #1
        res_buf[x] = sh_buf[x];
 80148d6:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 80148da:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
 80148de:	4283      	cmp	r3, r0
 80148e0:	d1f9      	bne.n	80148d6 <lv_draw_sw_rect+0x380>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 80148e2:	a813      	add	r0, sp, #76	; 0x4c
 80148e4:	f7fa f894 	bl	800ea10 <lv_draw_mask_is_any>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 80148e8:	b928      	cbnz	r0, 80148f6 <lv_draw_sw_rect+0x3a0>
 80148ea:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80148ee:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80148f2:	f000 810f 	beq.w	8014b14 <lv_draw_sw_rect+0x5be>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 80148f6:	2301      	movs	r3, #1
 80148f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148fa:	a917      	add	r1, sp, #92	; 0x5c
 80148fc:	a81d      	add	r0, sp, #116	; 0x74
 80148fe:	f7fa f9df 	bl	800ecc0 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8014902:	2100      	movs	r1, #0
 8014904:	a81d      	add	r0, sp, #116	; 0x74
 8014906:	f7f9 ffd9 	bl	800e8bc <lv_draw_mask_add>
 801490a:	900d      	str	r0, [sp, #52]	; 0x34
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 801490c:	2300      	movs	r3, #0
 801490e:	9309      	str	r3, [sp, #36]	; 0x24
 8014910:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 8014914:	3001      	adds	r0, #1
 8014916:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801491a:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 801491c:	b200      	sxth	r0, r0
 801491e:	f00c fff5 	bl	802190c <lv_mem_buf_get>
 8014922:	4680      	mov	r8, r0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8014924:	211c      	movs	r1, #28
 8014926:	a823      	add	r0, sp, #140	; 0x8c
 8014928:	f00d fa1e 	bl	8021d68 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801492c:	a919      	add	r1, sp, #100	; 0x64
 801492e:	9123      	str	r1, [sp, #140]	; 0x8c
    blend_dsc.mask_area = &blend_area;
 8014930:	9128      	str	r1, [sp, #160]	; 0xa0
    blend_dsc.mask_buf = mask_buf;
 8014932:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
    blend_dsc.color = dsc->shadow_color;
 8014936:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 801493a:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    blend_dsc.opa = dsc->shadow_opa;
 801493e:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
 8014942:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_dsc.blend_mode = dsc->blend_mode;
 8014946:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801494a:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 801494e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8014952:	f9bd 4050 	ldrsh.w	r4, [sp, #80]	; 0x50
 8014956:	1c60      	adds	r0, r4, #1
 8014958:	b280      	uxth	r0, r0
 801495a:	1a83      	subs	r3, r0, r2
 801495c:	b21d      	sxth	r5, r3
 801495e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8014962:	442b      	add	r3, r5
 8014964:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8014968:	b21f      	sxth	r7, r3
 801496a:	9708      	str	r7, [sp, #32]
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 801496c:	f9bd 504e 	ldrsh.w	r5, [sp, #78]	; 0x4e
 8014970:	b2aa      	uxth	r2, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014972:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8014976:	3301      	adds	r3, #1
 8014978:	1a9b      	subs	r3, r3, r2
 801497a:	b21e      	sxth	r6, r3
 801497c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8014980:	4433      	add	r3, r6
 8014982:	eb02 0963 	add.w	r9, r2, r3, asr #1
 8014986:	fa1f f389 	uxth.w	r3, r9
 801498a:	930c      	str	r3, [sp, #48]	; 0x30
 801498c:	fa0f f989 	sxth.w	r9, r9
    blend_area.x2 = shadow_area.x2;
 8014990:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8014994:	fa1f f48b 	uxth.w	r4, fp
    blend_area.y1 = shadow_area.y1;
 8014998:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801499c:	1b03      	subs	r3, r0, r4
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801499e:	b21b      	sxth	r3, r3
 80149a0:	42bb      	cmp	r3, r7
 80149a2:	bfb8      	it	lt
 80149a4:	463b      	movlt	r3, r7
 80149a6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 80149aa:	1e53      	subs	r3, r2, #1
 80149ac:	4423      	add	r3, r4
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 80149ae:	b21b      	sxth	r3, r3
 80149b0:	454b      	cmp	r3, r9
 80149b2:	bfa8      	it	ge
 80149b4:	464b      	movge	r3, r9
 80149b6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80149ba:	9b04      	ldr	r3, [sp, #16]
 80149bc:	689a      	ldr	r2, [r3, #8]
 80149be:	a81b      	add	r0, sp, #108	; 0x6c
 80149c0:	f00c f83d 	bl	8020a3e <_lv_area_intersect>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	f040 80a9 	bne.w	8014b1c <lv_draw_sw_rect+0x5c6>
    blend_area.x2 = shadow_area.x2;
 80149ca:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 80149ce:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 80149d2:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 80149d6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 80149da:	3201      	adds	r2, #1
 80149dc:	1b12      	subs	r2, r2, r4
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 80149de:	b212      	sxth	r2, r2
 80149e0:	9908      	ldr	r1, [sp, #32]
 80149e2:	428a      	cmp	r2, r1
 80149e4:	bfb8      	it	lt
 80149e6:	460a      	movlt	r2, r1
 80149e8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 80149ec:	f109 0201 	add.w	r2, r9, #1
 80149f0:	920b      	str	r2, [sp, #44]	; 0x2c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 80149f2:	3301      	adds	r3, #1
 80149f4:	1b1b      	subs	r3, r3, r4
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 80149f6:	b21b      	sxth	r3, r3
 80149f8:	4293      	cmp	r3, r2
 80149fa:	bfb8      	it	lt
 80149fc:	4613      	movlt	r3, r2
 80149fe:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014a02:	9b04      	ldr	r3, [sp, #16]
 8014a04:	689a      	ldr	r2, [r3, #8]
 8014a06:	a919      	add	r1, sp, #100	; 0x64
 8014a08:	a81b      	add	r0, sp, #108	; 0x6c
 8014a0a:	f00c f818 	bl	8020a3e <_lv_area_intersect>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	f040 80fb 	bne.w	8014c0a <lv_draw_sw_rect+0x6b4>
    blend_area.x1 = shadow_area.x1 + corner_size;
 8014a14:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014a18:	4423      	add	r3, r4
 8014a1a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 8014a1e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014a22:	1b1b      	subs	r3, r3, r4
 8014a24:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1;
 8014a28:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8014a2c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8014a30:	3b01      	subs	r3, #1
 8014a32:	4423      	add	r3, r4
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8014a34:	b21b      	sxth	r3, r3
 8014a36:	454b      	cmp	r3, r9
 8014a38:	bfa8      	it	ge
 8014a3a:	464b      	movge	r3, r9
 8014a3c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014a40:	9b04      	ldr	r3, [sp, #16]
 8014a42:	689a      	ldr	r2, [r3, #8]
 8014a44:	a919      	add	r1, sp, #100	; 0x64
 8014a46:	a81b      	add	r0, sp, #108	; 0x6c
 8014a48:	f00b fff9 	bl	8020a3e <_lv_area_intersect>
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	f040 8153 	bne.w	8014cf8 <lv_draw_sw_rect+0x7a2>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8014a52:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
 8014a56:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x1 + corner_size;
 8014a5a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014a5e:	4423      	add	r3, r4
 8014a60:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 8014a64:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8014a68:	1b1b      	subs	r3, r3, r4
 8014a6a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8014a6e:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 8014a72:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8014a76:	3301      	adds	r3, #1
 8014a78:	1b1b      	subs	r3, r3, r4
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8014a7a:	b21b      	sxth	r3, r3
 8014a7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	bfb8      	it	lt
 8014a82:	4613      	movlt	r3, r2
 8014a84:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014a88:	9b04      	ldr	r3, [sp, #16]
 8014a8a:	689a      	ldr	r2, [r3, #8]
 8014a8c:	a919      	add	r1, sp, #100	; 0x64
 8014a8e:	a81b      	add	r0, sp, #108	; 0x6c
 8014a90:	f00b ffd5 	bl	8020a3e <_lv_area_intersect>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	f040 81ac 	bne.w	8014df2 <lv_draw_sw_rect+0x89c>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8014a9a:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
 8014a9e:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8014aa2:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8014aa6:	1c5a      	adds	r2, r3, #1
 8014aa8:	1b12      	subs	r2, r2, r4
 8014aaa:	b212      	sxth	r2, r2
    blend_area.x2 = shadow_area.x2;
 8014aac:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 8014ab0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8014ab4:	4423      	add	r3, r4
 8014ab6:	b21b      	sxth	r3, r3
    blend_area.y2 = shadow_area.y2 - corner_size;
 8014ab8:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 8014abc:	1b09      	subs	r1, r1, r4
 8014abe:	b209      	sxth	r1, r1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8014ac0:	4599      	cmp	r9, r3
 8014ac2:	da02      	bge.n	8014aca <lv_draw_sw_rect+0x574>
 8014ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ac6:	3301      	adds	r3, #1
 8014ac8:	b21b      	sxth	r3, r3
 8014aca:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8014ace:	460b      	mov	r3, r1
 8014ad0:	4549      	cmp	r1, r9
 8014ad2:	bfb8      	it	lt
 8014ad4:	464b      	movlt	r3, r9
 8014ad6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8014ada:	9b08      	ldr	r3, [sp, #32]
 8014adc:	429a      	cmp	r2, r3
 8014ade:	bfb8      	it	lt
 8014ae0:	461a      	movlt	r2, r3
 8014ae2:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014ae6:	9b04      	ldr	r3, [sp, #16]
 8014ae8:	689a      	ldr	r2, [r3, #8]
 8014aea:	a919      	add	r1, sp, #100	; 0x64
 8014aec:	a81b      	add	r0, sp, #108	; 0x6c
 8014aee:	f00b ffa6 	bl	8020a3e <_lv_area_intersect>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	f040 81fe 	bne.w	8014ef4 <lv_draw_sw_rect+0x99e>
    for(y = 0; y < corner_size; y++) {
 8014af8:	f1bb 0f00 	cmp.w	fp, #0
 8014afc:	f340 827c 	ble.w	8014ff8 <lv_draw_sw_rect+0xaa2>
        for(x = 0; x < corner_size / 2; x++) {
 8014b00:	eb0b 76db 	add.w	r6, fp, fp, lsr #31
 8014b04:	1076      	asrs	r6, r6, #1
 8014b06:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
 8014b0a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8014b0e:	4465      	add	r5, ip
 8014b10:	2700      	movs	r7, #0
 8014b12:	e26a      	b.n	8014fea <lv_draw_sw_rect+0xa94>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 8014b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b18:	930d      	str	r3, [sp, #52]	; 0x34
 8014b1a:	e6f9      	b.n	8014910 <lv_draw_sw_rect+0x3ba>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8014b1c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8014b20:	462a      	mov	r2, r5
 8014b22:	a917      	add	r1, sp, #92	; 0x5c
 8014b24:	a81b      	add	r0, sp, #108	; 0x6c
 8014b26:	f00c f8b4 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014b2a:	2800      	cmp	r0, #0
 8014b2c:	f47f af4d 	bne.w	80149ca <lv_draw_sw_rect+0x474>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014b30:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 8014b34:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014b38:	3301      	adds	r3, #1
 8014b3a:	1b9b      	subs	r3, r3, r6
 8014b3c:	b21b      	sxth	r3, r3
 8014b3e:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 8014b40:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014b44:	930e      	str	r3, [sp, #56]	; 0x38
 8014b46:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8014b4a:	930f      	str	r3, [sp, #60]	; 0x3c
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014b4c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8014b50:	9310      	str	r3, [sp, #64]	; 0x40
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b54:	bb4b      	cbnz	r3, 8014baa <lv_draw_sw_rect+0x654>
 8014b56:	9f09      	ldr	r7, [sp, #36]	; 0x24
        if(w > 0) {
 8014b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	f77f af35 	ble.w	80149ca <lv_draw_sw_rect+0x474>
            blend_dsc.mask_buf = mask_buf;
 8014b60:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 8014b64:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8014b68:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8014b6c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014b70:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8014b74:	2302      	movs	r3, #2
 8014b76:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8014b7a:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 8014b7e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014b82:	42ab      	cmp	r3, r5
 8014b84:	f6ff af21 	blt.w	80149ca <lv_draw_sw_rect+0x474>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b8a:	eba3 030b 	sub.w	r3, r3, fp
 8014b8e:	3301      	adds	r3, #1
 8014b90:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 8014b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b96:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014b98:	fb0b 6603 	mla	r6, fp, r3, r6
 8014b9c:	9b07      	ldr	r3, [sp, #28]
 8014b9e:	441e      	add	r6, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014ba0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014ba4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014ba8:	e012      	b.n	8014bd0 <lv_draw_sw_rect+0x67a>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014baa:	462a      	mov	r2, r5
 8014bac:	a917      	add	r1, sp, #92	; 0x5c
 8014bae:	a81b      	add	r0, sp, #108	; 0x6c
 8014bb0:	f00c f8bd 	bl	8020d2e <_lv_area_is_out>
 8014bb4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014bb6:	e7cf      	b.n	8014b58 <lv_draw_sw_rect+0x602>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8014bb8:	9626      	str	r6, [sp, #152]	; 0x98
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014bba:	a923      	add	r1, sp, #140	; 0x8c
 8014bbc:	4648      	mov	r0, r9
 8014bbe:	f7fc f823 	bl	8010c08 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8014bc2:	445e      	add	r6, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8014bc4:	3501      	adds	r5, #1
 8014bc6:	b22d      	sxth	r5, r5
 8014bc8:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014bcc:	42ab      	cmp	r3, r5
 8014bce:	db19      	blt.n	8014c04 <lv_draw_sw_rect+0x6ae>
                blend_area.y1 = y;
 8014bd0:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8014bd4:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8014bd8:	2f00      	cmp	r7, #0
 8014bda:	d1ed      	bne.n	8014bb8 <lv_draw_sw_rect+0x662>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 8014bdc:	465a      	mov	r2, fp
 8014bde:	4631      	mov	r1, r6
 8014be0:	4640      	mov	r0, r8
 8014be2:	f00c ff2b 	bl	8021a3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014be8:	462a      	mov	r2, r5
 8014bea:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8014bee:	4640      	mov	r0, r8
 8014bf0:	f7f9 fe86 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014bf4:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014bf6:	bf12      	itee	ne
 8014bf8:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014bfc:	2302      	moveq	r3, #2
 8014bfe:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 8014c02:	e7da      	b.n	8014bba <lv_draw_sw_rect+0x664>
 8014c04:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8014c08:	e6df      	b.n	80149ca <lv_draw_sw_rect+0x474>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8014c0a:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8014c0e:	462a      	mov	r2, r5
 8014c10:	a917      	add	r1, sp, #92	; 0x5c
 8014c12:	a81b      	add	r0, sp, #108	; 0x6c
 8014c14:	f00c f83d 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	f47f aefb 	bne.w	8014a14 <lv_draw_sw_rect+0x4be>
 8014c1e:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 8014c22:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014c26:	3301      	adds	r3, #1
 8014c28:	1b9b      	subs	r3, r3, r6
 8014c2a:	b21b      	sxth	r3, r3
 8014c2c:	930e      	str	r3, [sp, #56]	; 0x38
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8014c2e:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8014c32:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c34:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014c38:	9310      	str	r3, [sp, #64]	; 0x40
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014c3a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8014c3e:	9311      	str	r3, [sp, #68]	; 0x44
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c42:	bb4b      	cbnz	r3, 8014c98 <lv_draw_sw_rect+0x742>
 8014c44:	9f09      	ldr	r7, [sp, #36]	; 0x24
        if(w > 0) {
 8014c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f77f aee3 	ble.w	8014a14 <lv_draw_sw_rect+0x4be>
            blend_dsc.mask_buf = mask_buf;
 8014c4e:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 8014c52:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8014c56:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8014c5a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014c5e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8014c62:	2302      	movs	r3, #2
 8014c64:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8014c68:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
 8014c6c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014c70:	42ab      	cmp	r3, r5
 8014c72:	f73f aecf 	bgt.w	8014a14 <lv_draw_sw_rect+0x4be>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c78:	eba3 030b 	sub.w	r3, r3, fp
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8014c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c84:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014c86:	fb0b 6603 	mla	r6, fp, r3, r6
 8014c8a:	9b07      	ldr	r3, [sp, #28]
 8014c8c:	441e      	add	r6, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014c8e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8014c92:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014c96:	e012      	b.n	8014cbe <lv_draw_sw_rect+0x768>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014c98:	462a      	mov	r2, r5
 8014c9a:	a917      	add	r1, sp, #92	; 0x5c
 8014c9c:	a81b      	add	r0, sp, #108	; 0x6c
 8014c9e:	f00c f846 	bl	8020d2e <_lv_area_is_out>
 8014ca2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014ca4:	e7cf      	b.n	8014c46 <lv_draw_sw_rect+0x6f0>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8014ca6:	9626      	str	r6, [sp, #152]	; 0x98
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014ca8:	a923      	add	r1, sp, #140	; 0x8c
 8014caa:	4648      	mov	r0, r9
 8014cac:	f7fb ffac 	bl	8010c08 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8014cb0:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8014cb2:	3d01      	subs	r5, #1
 8014cb4:	b22d      	sxth	r5, r5
 8014cb6:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014cba:	42ab      	cmp	r3, r5
 8014cbc:	dc19      	bgt.n	8014cf2 <lv_draw_sw_rect+0x79c>
                blend_area.y1 = y;
 8014cbe:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8014cc2:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8014cc6:	2f00      	cmp	r7, #0
 8014cc8:	d1ed      	bne.n	8014ca6 <lv_draw_sw_rect+0x750>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 8014cca:	465a      	mov	r2, fp
 8014ccc:	4631      	mov	r1, r6
 8014cce:	4640      	mov	r0, r8
 8014cd0:	f00c feb4 	bl	8021a3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cd6:	462a      	mov	r2, r5
 8014cd8:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8014cdc:	4640      	mov	r0, r8
 8014cde:	f7f9 fe0f 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014ce2:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014ce4:	bf12      	itee	ne
 8014ce6:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014cea:	2302      	moveq	r3, #2
 8014cec:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 8014cf0:	e7da      	b.n	8014ca8 <lv_draw_sw_rect+0x752>
 8014cf2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8014cf6:	e68d      	b.n	8014a14 <lv_draw_sw_rect+0x4be>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8014cf8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8014cfc:	462a      	mov	r2, r5
 8014cfe:	a917      	add	r1, sp, #92	; 0x5c
 8014d00:	a81b      	add	r0, sp, #108	; 0x6c
 8014d02:	f00b ffc6 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014d06:	2800      	cmp	r0, #0
 8014d08:	f47f aea3 	bne.w	8014a52 <lv_draw_sw_rect+0x4fc>
 8014d0c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014d10:	3301      	adds	r3, #1
 8014d12:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8014d16:	1a9b      	subs	r3, r3, r2
 8014d18:	b21b      	sxth	r3, r3
 8014d1a:	930e      	str	r3, [sp, #56]	; 0x38
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8014d1c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d22:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d28:	b933      	cbnz	r3, 8014d38 <lv_draw_sw_rect+0x7e2>
        if(w > 0) {
 8014d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	f77f ae90 	ble.w	8014a52 <lv_draw_sw_rect+0x4fc>
 8014d32:	9f09      	ldr	r7, [sp, #36]	; 0x24
                blend_dsc.mask_buf = mask_buf;
 8014d34:	4643      	mov	r3, r8
 8014d36:	e00a      	b.n	8014d4e <lv_draw_sw_rect+0x7f8>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014d38:	462a      	mov	r2, r5
 8014d3a:	a917      	add	r1, sp, #92	; 0x5c
 8014d3c:	a81b      	add	r0, sp, #108	; 0x6c
 8014d3e:	f00b fff6 	bl	8020d2e <_lv_area_is_out>
        if(w > 0) {
 8014d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	f77f ae84 	ble.w	8014a52 <lv_draw_sw_rect+0x4fc>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014d4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
                blend_dsc.mask_buf = NULL;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	9326      	str	r3, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 8014d50:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8014d54:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8014d58:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014d5c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8014d60:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 8014d64:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014d68:	42ab      	cmp	r3, r5
 8014d6a:	f6ff ae72 	blt.w	8014a52 <lv_draw_sw_rect+0x4fc>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8014d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d70:	1b9e      	subs	r6, r3, r6
 8014d72:	9b07      	ldr	r3, [sp, #28]
 8014d74:	fb0b 3606 	mla	r6, fp, r6, r3
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014d78:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8014d7c:	9410      	str	r4, [sp, #64]	; 0x40
 8014d7e:	9c06      	ldr	r4, [sp, #24]
 8014d80:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014d84:	e013      	b.n	8014dae <lv_draw_sw_rect+0x858>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 8014d86:	2cff      	cmp	r4, #255	; 0xff
 8014d88:	7833      	ldrb	r3, [r6, #0]
 8014d8a:	bf1e      	ittt	ne
 8014d8c:	f89a 2036 	ldrbne.w	r2, [sl, #54]	; 0x36
 8014d90:	4353      	mulne	r3, r2
 8014d92:	0a1b      	lsrne	r3, r3, #8
 8014d94:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014d98:	a923      	add	r1, sp, #140	; 0x8c
 8014d9a:	4648      	mov	r0, r9
 8014d9c:	f7fb ff34 	bl	8010c08 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8014da0:	445e      	add	r6, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8014da2:	3501      	adds	r5, #1
 8014da4:	b22d      	sxth	r5, r5
 8014da6:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014daa:	42ab      	cmp	r3, r5
 8014dac:	db1d      	blt.n	8014dea <lv_draw_sw_rect+0x894>
                blend_area.y1 = y;
 8014dae:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8014db2:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8014db6:	2f00      	cmp	r7, #0
 8014db8:	d1e5      	bne.n	8014d86 <lv_draw_sw_rect+0x830>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 8014dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014dbc:	7831      	ldrb	r1, [r6, #0]
 8014dbe:	4640      	mov	r0, r8
 8014dc0:	f00c ff6d 	bl	8021c9e <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dc6:	462a      	mov	r2, r5
 8014dc8:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8014dcc:	4640      	mov	r0, r8
 8014dce:	f7f9 fd97 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014dd2:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014dd4:	bf12      	itee	ne
 8014dd6:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014dda:	2302      	moveq	r3, #2
 8014ddc:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014de0:	a923      	add	r1, sp, #140	; 0x8c
 8014de2:	4648      	mov	r0, r9
 8014de4:	f7fb ff10 	bl	8010c08 <lv_draw_sw_blend>
 8014de8:	e7da      	b.n	8014da0 <lv_draw_sw_rect+0x84a>
 8014dea:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8014dee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014df0:	e62f      	b.n	8014a52 <lv_draw_sw_rect+0x4fc>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8014df2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8014df6:	463a      	mov	r2, r7
 8014df8:	a917      	add	r1, sp, #92	; 0x5c
 8014dfa:	a81b      	add	r0, sp, #108	; 0x6c
 8014dfc:	f00b ff49 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014e00:	2800      	cmp	r0, #0
 8014e02:	f47f ae4a 	bne.w	8014a9a <lv_draw_sw_rect+0x544>
 8014e06:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8014e10:	1a9b      	subs	r3, r3, r2
 8014e12:	b21b      	sxth	r3, r3
 8014e14:	930e      	str	r3, [sp, #56]	; 0x38
        if(w > 0) {
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	f77f ae3f 	ble.w	8014a9a <lv_draw_sw_rect+0x544>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8014e1c:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
 8014e20:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014e24:	930f      	str	r3, [sp, #60]	; 0x3c
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e28:	b9e3      	cbnz	r3, 8014e64 <lv_draw_sw_rect+0x90e>
                blend_dsc.mask_buf = mask_buf;
 8014e2a:	4643      	mov	r3, r8
 8014e2c:	9326      	str	r3, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 8014e2e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8014e32:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8014e36:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014e3a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8014e3e:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
 8014e42:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014e46:	42ab      	cmp	r3, r5
 8014e48:	f73f ae27 	bgt.w	8014a9a <lv_draw_sw_rect+0x544>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8014e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e4e:	1af6      	subs	r6, r6, r3
 8014e50:	9b07      	ldr	r3, [sp, #28]
 8014e52:	fb0b 3606 	mla	r6, fp, r6, r3
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014e56:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8014e5a:	9410      	str	r4, [sp, #64]	; 0x40
 8014e5c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014e5e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8014e62:	e021      	b.n	8014ea8 <lv_draw_sw_rect+0x952>
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014e64:	463a      	mov	r2, r7
 8014e66:	a917      	add	r1, sp, #92	; 0x5c
 8014e68:	a81b      	add	r0, sp, #108	; 0x6c
 8014e6a:	f00b ff60 	bl	8020d2e <_lv_area_is_out>
                blend_dsc.mask_buf = NULL;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	e7dc      	b.n	8014e2c <lv_draw_sw_rect+0x8d6>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014e72:	463a      	mov	r2, r7
 8014e74:	a917      	add	r1, sp, #92	; 0x5c
 8014e76:	a81b      	add	r0, sp, #108	; 0x6c
 8014e78:	f00b ff59 	bl	8020d2e <_lv_area_is_out>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 8014e7c:	9b06      	ldr	r3, [sp, #24]
 8014e7e:	2bff      	cmp	r3, #255	; 0xff
 8014e80:	d032      	beq.n	8014ee8 <lv_draw_sw_rect+0x992>
 8014e82:	7833      	ldrb	r3, [r6, #0]
 8014e84:	f89a 2036 	ldrb.w	r2, [sl, #54]	; 0x36
 8014e88:	fb02 f303 	mul.w	r3, r2, r3
 8014e8c:	0a1b      	lsrs	r3, r3, #8
 8014e8e:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014e92:	a923      	add	r1, sp, #140	; 0x8c
 8014e94:	4648      	mov	r0, r9
 8014e96:	f7fb feb7 	bl	8010c08 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8014e9a:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8014e9c:	3d01      	subs	r5, #1
 8014e9e:	b22d      	sxth	r5, r5
 8014ea0:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8014ea4:	42ab      	cmp	r3, r5
 8014ea6:	dc21      	bgt.n	8014eec <lv_draw_sw_rect+0x996>
                blend_area.y1 = y;
 8014ea8:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8014eac:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014eb0:	2c00      	cmp	r4, #0
 8014eb2:	d1de      	bne.n	8014e72 <lv_draw_sw_rect+0x91c>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 8014eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014eb6:	7831      	ldrb	r1, [r6, #0]
 8014eb8:	4640      	mov	r0, r8
 8014eba:	f00c fef0 	bl	8021c9e <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ec0:	462a      	mov	r2, r5
 8014ec2:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	f7f9 fd1a 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014ecc:	2801      	cmp	r0, #1
 8014ece:	d006      	beq.n	8014ede <lv_draw_sw_rect+0x988>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014ed0:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014ed4:	a923      	add	r1, sp, #140	; 0x8c
 8014ed6:	4648      	mov	r0, r9
 8014ed8:	f7fb fe96 	bl	8010c08 <lv_draw_sw_blend>
 8014edc:	e7dd      	b.n	8014e9a <lv_draw_sw_rect+0x944>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014ede:	f04f 0302 	mov.w	r3, #2
 8014ee2:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 8014ee6:	e7f5      	b.n	8014ed4 <lv_draw_sw_rect+0x97e>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 8014ee8:	7833      	ldrb	r3, [r6, #0]
 8014eea:	e7d0      	b.n	8014e8e <lv_draw_sw_rect+0x938>
 8014eec:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8014ef0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8014ef2:	e5d2      	b.n	8014a9a <lv_draw_sw_rect+0x544>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8014ef4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8014ef8:	462a      	mov	r2, r5
 8014efa:	a917      	add	r1, sp, #92	; 0x5c
 8014efc:	a81b      	add	r0, sp, #108	; 0x6c
 8014efe:	f00b fec8 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8014f02:	2800      	cmp	r0, #0
 8014f04:	f47f adf8 	bne.w	8014af8 <lv_draw_sw_rect+0x5a2>
 8014f08:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8014f0c:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 8014f10:	3701      	adds	r7, #1
 8014f12:	1aff      	subs	r7, r7, r3
 8014f14:	b23f      	sxth	r7, r7
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014f16:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 8014f1a:	eba2 020b 	sub.w	r2, r2, fp
 8014f1e:	3201      	adds	r2, #1
 8014f20:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += (corner_size - 1) * corner_size;
 8014f22:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8014f26:	fb0b 3302 	mla	r3, fp, r2, r3
 8014f2a:	9a07      	ldr	r2, [sp, #28]
 8014f2c:	18d3      	adds	r3, r2, r3
 8014f2e:	9306      	str	r3, [sp, #24]
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f32:	b9e3      	cbnz	r3, 8014f6e <lv_draw_sw_rect+0xa18>
 8014f34:	9e09      	ldr	r6, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8014f36:	4643      	mov	r3, r8
 8014f38:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 8014f3a:	2f00      	cmp	r7, #0
 8014f3c:	f77f addc 	ble.w	8014af8 <lv_draw_sw_rect+0x5a2>
            blend_area.x1 = clip_area_sub.x1;
 8014f40:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8014f44:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8014f48:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8014f4c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8014f50:	2302      	movs	r3, #2
 8014f52:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8014f56:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 8014f5a:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014f5e:	42ab      	cmp	r3, r5
 8014f60:	f6ff adca 	blt.w	8014af8 <lv_draw_sw_rect+0x5a2>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014f64:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8014f68:	f8dd b010 	ldr.w	fp, [sp, #16]
 8014f6c:	e011      	b.n	8014f92 <lv_draw_sw_rect+0xa3c>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8014f6e:	462a      	mov	r2, r5
 8014f70:	a917      	add	r1, sp, #92	; 0x5c
 8014f72:	a81b      	add	r0, sp, #108	; 0x6c
 8014f74:	f00b fedb 	bl	8020d2e <_lv_area_is_out>
 8014f78:	9e09      	ldr	r6, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8014f7a:	9b06      	ldr	r3, [sp, #24]
 8014f7c:	e7dc      	b.n	8014f38 <lv_draw_sw_rect+0x9e2>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014f7e:	a923      	add	r1, sp, #140	; 0x8c
 8014f80:	4658      	mov	r0, fp
 8014f82:	f7fb fe41 	bl	8010c08 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8014f86:	3501      	adds	r5, #1
 8014f88:	b22d      	sxth	r5, r5
 8014f8a:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8014f8e:	42ab      	cmp	r3, r5
 8014f90:	db19      	blt.n	8014fc6 <lv_draw_sw_rect+0xa70>
                blend_area.y1 = y;
 8014f92:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8014f96:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8014f9a:	2e00      	cmp	r6, #0
 8014f9c:	d1ef      	bne.n	8014f7e <lv_draw_sw_rect+0xa28>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 8014f9e:	463a      	mov	r2, r7
 8014fa0:	9906      	ldr	r1, [sp, #24]
 8014fa2:	4640      	mov	r0, r8
 8014fa4:	f00c fd4a 	bl	8021a3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014fa8:	463b      	mov	r3, r7
 8014faa:	462a      	mov	r2, r5
 8014fac:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	f7f9 fca5 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014fb6:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8014fb8:	bf12      	itee	ne
 8014fba:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014fbe:	2302      	moveq	r3, #2
 8014fc0:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 8014fc4:	e7db      	b.n	8014f7e <lv_draw_sw_rect+0xa28>
 8014fc6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8014fca:	e595      	b.n	8014af8 <lv_draw_sw_rect+0x5a2>
            lv_opa_t tmp = *start;
 8014fcc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
            *start = *end;
 8014fd0:	7818      	ldrb	r0, [r3, #0]
 8014fd2:	7010      	strb	r0, [r2, #0]
            *end = tmp;
 8014fd4:	f803 1901 	strb.w	r1, [r3], #-1
        for(x = 0; x < corner_size / 2; x++) {
 8014fd8:	1ae9      	subs	r1, r5, r3
 8014fda:	428e      	cmp	r6, r1
 8014fdc:	dcf6      	bgt.n	8014fcc <lv_draw_sw_rect+0xa76>
        sh_buf_tmp += corner_size;
 8014fde:	44dc      	add	ip, fp
    for(y = 0; y < corner_size; y++) {
 8014fe0:	3701      	adds	r7, #1
 8014fe2:	b23f      	sxth	r7, r7
 8014fe4:	445d      	add	r5, fp
 8014fe6:	45bb      	cmp	fp, r7
 8014fe8:	dd06      	ble.n	8014ff8 <lv_draw_sw_rect+0xaa2>
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 8014fea:	462b      	mov	r3, r5
        for(x = 0; x < corner_size / 2; x++) {
 8014fec:	f1bb 0f01 	cmp.w	fp, #1
 8014ff0:	ddf5      	ble.n	8014fde <lv_draw_sw_rect+0xa88>
 8014ff2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8014ff6:	e7e9      	b.n	8014fcc <lv_draw_sw_rect+0xa76>
    blend_area.x1 = shadow_area.x1;
 8014ff8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8014ffc:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8015000:	1e5a      	subs	r2, r3, #1
 8015002:	4422      	add	r2, r4
 8015004:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y1 + corner_size;
 8015006:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801500a:	4423      	add	r3, r4
 801500c:	b21b      	sxth	r3, r3
    blend_area.y2 = shadow_area.y2 - corner_size;
 801500e:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 8015012:	1b09      	subs	r1, r1, r4
 8015014:	b209      	sxth	r1, r1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8015016:	4599      	cmp	r9, r3
 8015018:	da02      	bge.n	8015020 <lv_draw_sw_rect+0xaca>
 801501a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801501c:	3301      	adds	r3, #1
 801501e:	b21b      	sxth	r3, r3
 8015020:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8015024:	460b      	mov	r3, r1
 8015026:	4549      	cmp	r1, r9
 8015028:	bfb8      	it	lt
 801502a:	464b      	movlt	r3, r9
 801502c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8015030:	9b08      	ldr	r3, [sp, #32]
 8015032:	1e5e      	subs	r6, r3, #1
 8015034:	42b2      	cmp	r2, r6
 8015036:	bfa8      	it	ge
 8015038:	4632      	movge	r2, r6
 801503a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801503e:	9b04      	ldr	r3, [sp, #16]
 8015040:	689a      	ldr	r2, [r3, #8]
 8015042:	a919      	add	r1, sp, #100	; 0x64
 8015044:	a81b      	add	r0, sp, #108	; 0x6c
 8015046:	f00b fcfa 	bl	8020a3e <_lv_area_intersect>
 801504a:	2800      	cmp	r0, #0
 801504c:	d16d      	bne.n	801512a <lv_draw_sw_rect+0xbd4>
    blend_area.x1 = shadow_area.x1;
 801504e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8015052:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.y1 = shadow_area.y1;
 8015056:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801505a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 801505e:	3a01      	subs	r2, #1
 8015060:	4422      	add	r2, r4
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8015062:	b212      	sxth	r2, r2
 8015064:	42b2      	cmp	r2, r6
 8015066:	bfa8      	it	ge
 8015068:	4632      	movge	r2, r6
 801506a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801506e:	3b01      	subs	r3, #1
 8015070:	4423      	add	r3, r4
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8015072:	b21b      	sxth	r3, r3
 8015074:	4599      	cmp	r9, r3
 8015076:	bfa8      	it	ge
 8015078:	4699      	movge	r9, r3
 801507a:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801507e:	9b04      	ldr	r3, [sp, #16]
 8015080:	689a      	ldr	r2, [r3, #8]
 8015082:	a919      	add	r1, sp, #100	; 0x64
 8015084:	a81b      	add	r0, sp, #108	; 0x6c
 8015086:	f00b fcda 	bl	8020a3e <_lv_area_intersect>
 801508a:	2800      	cmp	r0, #0
 801508c:	f040 80ba 	bne.w	8015204 <lv_draw_sw_rect+0xcae>
    blend_area.x1 = shadow_area.x1 ;
 8015090:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8015094:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8015098:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 801509c:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 80150a0:	3201      	adds	r2, #1
 80150a2:	1b12      	subs	r2, r2, r4
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 80150a4:	b212      	sxth	r2, r2
 80150a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150a8:	428a      	cmp	r2, r1
 80150aa:	bfb8      	it	lt
 80150ac:	460a      	movlt	r2, r1
 80150ae:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 80150b2:	3b01      	subs	r3, #1
 80150b4:	4423      	add	r3, r4
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 80150b6:	b21b      	sxth	r3, r3
 80150b8:	429e      	cmp	r6, r3
 80150ba:	bfa8      	it	ge
 80150bc:	461e      	movge	r6, r3
 80150be:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80150c2:	9b04      	ldr	r3, [sp, #16]
 80150c4:	689a      	ldr	r2, [r3, #8]
 80150c6:	a919      	add	r1, sp, #100	; 0x64
 80150c8:	a81b      	add	r0, sp, #108	; 0x6c
 80150ca:	f00b fcb8 	bl	8020a3e <_lv_area_intersect>
 80150ce:	2800      	cmp	r0, #0
 80150d0:	f040 810d 	bne.w	80152ee <lv_draw_sw_rect+0xd98>
    blend_area.x1 = shadow_area.x1 + corner_size ;
 80150d4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80150d8:	4423      	add	r3, r4
 80150da:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 80150de:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80150e2:	1b1b      	subs	r3, r3, r4
 80150e4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 80150e8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80150ec:	4423      	add	r3, r4
 80150ee:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y2 - corner_size;
 80150f2:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80150f6:	1b1c      	subs	r4, r3, r4
 80150f8:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
    blend_dsc.mask_buf = mask_buf;
 80150fc:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015100:	9b04      	ldr	r3, [sp, #16]
 8015102:	689a      	ldr	r2, [r3, #8]
 8015104:	a919      	add	r1, sp, #100	; 0x64
 8015106:	a81b      	add	r0, sp, #108	; 0x6c
 8015108:	f00b fc99 	bl	8020a3e <_lv_area_intersect>
 801510c:	2800      	cmp	r0, #0
 801510e:	f040 8161 	bne.w	80153d4 <lv_draw_sw_rect+0xe7e>
    if(!simple) {
 8015112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015114:	2b00      	cmp	r3, #0
 8015116:	f000 8197 	beq.w	8015448 <lv_draw_sw_rect+0xef2>
    lv_mem_buf_release(sh_buf);
 801511a:	9807      	ldr	r0, [sp, #28]
 801511c:	f00c fc58 	bl	80219d0 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 8015120:	4640      	mov	r0, r8
 8015122:	f00c fc55 	bl	80219d0 <lv_mem_buf_release>
 8015126:	f7ff ba68 	b.w	80145fa <lv_draw_sw_rect+0xa4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 801512a:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801512e:	462a      	mov	r2, r5
 8015130:	a917      	add	r1, sp, #92	; 0x5c
 8015132:	a81b      	add	r0, sp, #108	; 0x6c
 8015134:	f00b fdad 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015138:	2800      	cmp	r0, #0
 801513a:	d188      	bne.n	801504e <lv_draw_sw_rect+0xaf8>
 801513c:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8015140:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8015144:	3201      	adds	r2, #1
 8015146:	1ad2      	subs	r2, r2, r3
 8015148:	b212      	sxth	r2, r2
 801514a:	9208      	str	r2, [sp, #32]
        sh_buf_tmp += (corner_size - 1) * corner_size;
 801514c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8015150:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8015154:	1a5b      	subs	r3, r3, r1
 8015156:	fb0b 3302 	mla	r3, fp, r2, r3
 801515a:	9a07      	ldr	r2, [sp, #28]
 801515c:	18d3      	adds	r3, r2, r3
 801515e:	9306      	str	r3, [sp, #24]
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015162:	b9fb      	cbnz	r3, 80151a4 <lv_draw_sw_rect+0xc4e>
 8015164:	9f09      	ldr	r7, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8015166:	4643      	mov	r3, r8
 8015168:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 801516a:	9a08      	ldr	r2, [sp, #32]
 801516c:	2a00      	cmp	r2, #0
 801516e:	f77f af6e 	ble.w	801504e <lv_draw_sw_rect+0xaf8>
            blend_area.x1 = clip_area_sub.x1;
 8015172:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8015176:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 801517a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801517e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8015182:	2302      	movs	r3, #2
 8015184:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015188:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 801518c:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015190:	42ab      	cmp	r3, r5
 8015192:	f6ff af5c 	blt.w	801504e <lv_draw_sw_rect+0xaf8>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015196:	f8cd b020 	str.w	fp, [sp, #32]
 801519a:	940c      	str	r4, [sp, #48]	; 0x30
 801519c:	4614      	mov	r4, r2
 801519e:	f8dd b010 	ldr.w	fp, [sp, #16]
 80151a2:	e011      	b.n	80151c8 <lv_draw_sw_rect+0xc72>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80151a4:	462a      	mov	r2, r5
 80151a6:	a917      	add	r1, sp, #92	; 0x5c
 80151a8:	a81b      	add	r0, sp, #108	; 0x6c
 80151aa:	f00b fdc0 	bl	8020d2e <_lv_area_is_out>
 80151ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80151b0:	9b06      	ldr	r3, [sp, #24]
 80151b2:	e7d9      	b.n	8015168 <lv_draw_sw_rect+0xc12>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80151b4:	a923      	add	r1, sp, #140	; 0x8c
 80151b6:	4658      	mov	r0, fp
 80151b8:	f7fb fd26 	bl	8010c08 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80151bc:	3501      	adds	r5, #1
 80151be:	b22d      	sxth	r5, r5
 80151c0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80151c4:	42ab      	cmp	r3, r5
 80151c6:	db19      	blt.n	80151fc <lv_draw_sw_rect+0xca6>
                blend_area.y1 = y;
 80151c8:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80151cc:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80151d0:	2f00      	cmp	r7, #0
 80151d2:	d1ef      	bne.n	80151b4 <lv_draw_sw_rect+0xc5e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 80151d4:	4622      	mov	r2, r4
 80151d6:	9906      	ldr	r1, [sp, #24]
 80151d8:	4640      	mov	r0, r8
 80151da:	f00c fc2f 	bl	8021a3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80151de:	4623      	mov	r3, r4
 80151e0:	462a      	mov	r2, r5
 80151e2:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80151e6:	4640      	mov	r0, r8
 80151e8:	f7f9 fb8a 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80151ec:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80151ee:	bf12      	itee	ne
 80151f0:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80151f4:	2302      	moveq	r3, #2
 80151f6:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 80151fa:	e7db      	b.n	80151b4 <lv_draw_sw_rect+0xc5e>
 80151fc:	f8dd b020 	ldr.w	fp, [sp, #32]
 8015200:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015202:	e724      	b.n	801504e <lv_draw_sw_rect+0xaf8>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8015204:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8015208:	462a      	mov	r2, r5
 801520a:	a917      	add	r1, sp, #92	; 0x5c
 801520c:	a81b      	add	r0, sp, #108	; 0x6c
 801520e:	f00b fd40 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015212:	2800      	cmp	r0, #0
 8015214:	f47f af3c 	bne.w	8015090 <lv_draw_sw_rect+0xb3a>
 8015218:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 801521c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015220:	3301      	adds	r3, #1
 8015222:	1bdb      	subs	r3, r3, r7
 8015224:	b21b      	sxth	r3, r3
 8015226:	9306      	str	r3, [sp, #24]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8015228:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 801522c:	9308      	str	r3, [sp, #32]
 801522e:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8015232:	930c      	str	r3, [sp, #48]	; 0x30
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8015234:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8015238:	930e      	str	r3, [sp, #56]	; 0x38
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801523a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801523c:	bb3b      	cbnz	r3, 801528e <lv_draw_sw_rect+0xd38>
 801523e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
        blend_dsc.mask_buf = mask_buf;
 8015242:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
        if(w > 0) {
 8015246:	9b06      	ldr	r3, [sp, #24]
 8015248:	2b00      	cmp	r3, #0
 801524a:	f77f af21 	ble.w	8015090 <lv_draw_sw_rect+0xb3a>
            blend_area.x1 = clip_area_sub.x1;
 801524e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8015252:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8015256:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801525a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801525e:	2302      	movs	r3, #2
 8015260:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015264:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 8015268:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 801526c:	42ab      	cmp	r3, r5
 801526e:	f6ff af0f 	blt.w	8015090 <lv_draw_sw_rect+0xb3a>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8015272:	9b08      	ldr	r3, [sp, #32]
 8015274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015276:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8015278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801527a:	1abf      	subs	r7, r7, r2
 801527c:	fb0b 7703 	mla	r7, fp, r3, r7
 8015280:	9b07      	ldr	r3, [sp, #28]
 8015282:	441f      	add	r7, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015284:	9408      	str	r4, [sp, #32]
 8015286:	464c      	mov	r4, r9
 8015288:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801528c:	e013      	b.n	80152b6 <lv_draw_sw_rect+0xd60>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801528e:	462a      	mov	r2, r5
 8015290:	a917      	add	r1, sp, #92	; 0x5c
 8015292:	a81b      	add	r0, sp, #108	; 0x6c
 8015294:	f00b fd4b 	bl	8020d2e <_lv_area_is_out>
 8015298:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801529c:	e7d1      	b.n	8015242 <lv_draw_sw_rect+0xcec>
                    blend_dsc.mask_buf = sh_buf_tmp;
 801529e:	9726      	str	r7, [sp, #152]	; 0x98
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80152a0:	a923      	add	r1, sp, #140	; 0x8c
 80152a2:	4648      	mov	r0, r9
 80152a4:	f7fb fcb0 	bl	8010c08 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 80152a8:	445f      	add	r7, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 80152aa:	3501      	adds	r5, #1
 80152ac:	b22d      	sxth	r5, r5
 80152ae:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80152b2:	42ab      	cmp	r3, r5
 80152b4:	db19      	blt.n	80152ea <lv_draw_sw_rect+0xd94>
                blend_area.y1 = y;
 80152b6:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80152ba:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80152be:	2c00      	cmp	r4, #0
 80152c0:	d1ed      	bne.n	801529e <lv_draw_sw_rect+0xd48>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 80152c2:	465a      	mov	r2, fp
 80152c4:	4639      	mov	r1, r7
 80152c6:	4640      	mov	r0, r8
 80152c8:	f00c fbb8 	bl	8021a3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80152cc:	9b06      	ldr	r3, [sp, #24]
 80152ce:	462a      	mov	r2, r5
 80152d0:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80152d4:	4640      	mov	r0, r8
 80152d6:	f7f9 fb13 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80152da:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80152dc:	bf12      	itee	ne
 80152de:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80152e2:	2302      	moveq	r3, #2
 80152e4:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 80152e8:	e7da      	b.n	80152a0 <lv_draw_sw_rect+0xd4a>
 80152ea:	9c08      	ldr	r4, [sp, #32]
 80152ec:	e6d0      	b.n	8015090 <lv_draw_sw_rect+0xb3a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80152ee:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80152f2:	462a      	mov	r2, r5
 80152f4:	a917      	add	r1, sp, #92	; 0x5c
 80152f6:	a81b      	add	r0, sp, #108	; 0x6c
 80152f8:	f00b fccb 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80152fc:	2800      	cmp	r0, #0
 80152fe:	f47f aee9 	bne.w	80150d4 <lv_draw_sw_rect+0xb7e>
 8015302:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 8015306:	f8bd 9070 	ldrh.w	r9, [sp, #112]	; 0x70
 801530a:	f109 0901 	add.w	r9, r9, #1
 801530e:	eba9 0906 	sub.w	r9, r9, r6
 8015312:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8015316:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 801531a:	9306      	str	r3, [sp, #24]
 801531c:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015320:	9308      	str	r3, [sp, #32]
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8015322:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8015326:	930b      	str	r3, [sp, #44]	; 0x2c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801532a:	bb23      	cbnz	r3, 8015376 <lv_draw_sw_rect+0xe20>
 801532c:	9f09      	ldr	r7, [sp, #36]	; 0x24
        blend_dsc.mask_buf = mask_buf;
 801532e:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
        if(w > 0) {
 8015332:	f1b9 0f00 	cmp.w	r9, #0
 8015336:	f77f aecd 	ble.w	80150d4 <lv_draw_sw_rect+0xb7e>
            blend_area.x1 = clip_area_sub.x1;
 801533a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801533e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8015342:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015346:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 801534a:	2302      	movs	r3, #2
 801534c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8015350:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
 8015354:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8015358:	42ab      	cmp	r3, r5
 801535a:	f73f aebb 	bgt.w	80150d4 <lv_draw_sw_rect+0xb7e>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 801535e:	9b06      	ldr	r3, [sp, #24]
 8015360:	9a08      	ldr	r2, [sp, #32]
 8015362:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8015364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015366:	1ab6      	subs	r6, r6, r2
 8015368:	fb0b 6603 	mla	r6, fp, r3, r6
 801536c:	9b07      	ldr	r3, [sp, #28]
 801536e:	441e      	add	r6, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015370:	9406      	str	r4, [sp, #24]
 8015372:	9c04      	ldr	r4, [sp, #16]
 8015374:	e024      	b.n	80153c0 <lv_draw_sw_rect+0xe6a>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015376:	462a      	mov	r2, r5
 8015378:	a917      	add	r1, sp, #92	; 0x5c
 801537a:	a81b      	add	r0, sp, #108	; 0x6c
 801537c:	f00b fcd7 	bl	8020d2e <_lv_area_is_out>
 8015380:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015382:	e7d4      	b.n	801532e <lv_draw_sw_rect+0xdd8>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 8015384:	465a      	mov	r2, fp
 8015386:	4631      	mov	r1, r6
 8015388:	4640      	mov	r0, r8
 801538a:	f00c fb57 	bl	8021a3c <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801538e:	464b      	mov	r3, r9
 8015390:	462a      	mov	r2, r5
 8015392:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8015396:	4640      	mov	r0, r8
 8015398:	f7f9 fab2 	bl	800e900 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801539c:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801539e:	bf12      	itee	ne
 80153a0:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80153a4:	2302      	moveq	r3, #2
 80153a6:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80153aa:	a923      	add	r1, sp, #140	; 0x8c
 80153ac:	4620      	mov	r0, r4
 80153ae:	f7fb fc2b 	bl	8010c08 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 80153b2:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 80153b4:	3d01      	subs	r5, #1
 80153b6:	b22d      	sxth	r5, r5
 80153b8:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 80153bc:	42ab      	cmp	r3, r5
 80153be:	dc07      	bgt.n	80153d0 <lv_draw_sw_rect+0xe7a>
                blend_area.y1 = y;
 80153c0:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 80153c4:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 80153c8:	2f00      	cmp	r7, #0
 80153ca:	d0db      	beq.n	8015384 <lv_draw_sw_rect+0xe2e>
                    blend_dsc.mask_buf = sh_buf_tmp;
 80153cc:	9626      	str	r6, [sp, #152]	; 0x98
 80153ce:	e7ec      	b.n	80153aa <lv_draw_sw_rect+0xe54>
 80153d0:	9c06      	ldr	r4, [sp, #24]
 80153d2:	e67f      	b.n	80150d4 <lv_draw_sw_rect+0xb7e>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80153d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153d6:	a917      	add	r1, sp, #92	; 0x5c
 80153d8:	a81b      	add	r0, sp, #108	; 0x6c
 80153da:	f00b fc5a 	bl	8020c92 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80153de:	2800      	cmp	r0, #0
 80153e0:	f47f ae97 	bne.w	8015112 <lv_draw_sw_rect+0xbbc>
 80153e4:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 80153e8:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 80153ec:	1c5d      	adds	r5, r3, #1
 80153ee:	1aad      	subs	r5, r5, r2
 80153f0:	b22d      	sxth	r5, r5
        if(w > 0) {
 80153f2:	2d00      	cmp	r5, #0
 80153f4:	f77f ae8d 	ble.w	8015112 <lv_draw_sw_rect+0xbbc>
            blend_area.x1 = clip_area_sub.x1;
 80153f8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80153fc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015400:	f9bd 406e 	ldrsh.w	r4, [sp, #110]	; 0x6e
 8015404:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015408:	42a3      	cmp	r3, r4
 801540a:	f6ff ae82 	blt.w	8015112 <lv_draw_sw_rect+0xbbc>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801540e:	9e04      	ldr	r6, [sp, #16]
                blend_area.y1 = y;
 8015410:	f8ad 4066 	strh.w	r4, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015414:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
                lv_memset_ff(mask_buf, w);
 8015418:	4629      	mov	r1, r5
 801541a:	4640      	mov	r0, r8
 801541c:	f00c fd0a 	bl	8021e34 <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015420:	462b      	mov	r3, r5
 8015422:	4622      	mov	r2, r4
 8015424:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8015428:	4640      	mov	r0, r8
 801542a:	f7f9 fa69 	bl	800e900 <lv_draw_mask_apply>
 801542e:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015432:	a923      	add	r1, sp, #140	; 0x8c
 8015434:	4630      	mov	r0, r6
 8015436:	f7fb fbe7 	bl	8010c08 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801543a:	3401      	adds	r4, #1
 801543c:	b224      	sxth	r4, r4
 801543e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015442:	42a3      	cmp	r3, r4
 8015444:	dae4      	bge.n	8015410 <lv_draw_sw_rect+0xeba>
 8015446:	e664      	b.n	8015112 <lv_draw_sw_rect+0xbbc>
        lv_draw_mask_free_param(&mask_rout_param);
 8015448:	a81d      	add	r0, sp, #116	; 0x74
 801544a:	f7f9 faab 	bl	800e9a4 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 801544e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015450:	f7f9 fa7e 	bl	800e950 <lv_draw_mask_remove_id>
 8015454:	e661      	b.n	801511a <lv_draw_sw_rect+0xbc4>
    dest->y1 = src->y1;
 8015456:	9a05      	ldr	r2, [sp, #20]
 8015458:	f9b2 7002 	ldrsh.w	r7, [r2, #2]
    dest->x2 = src->x2;
 801545c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    dest->y2 = src->y2;
 8015460:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
    lv_coord_t pad = dsc->outline_pad - 1;
 8015464:	f8ba 1028 	ldrh.w	r1, [sl, #40]	; 0x28
 8015468:	3901      	subs	r1, #1
 801546a:	b289      	uxth	r1, r1
    area_inner.x1 -= pad;
 801546c:	8812      	ldrh	r2, [r2, #0]
 801546e:	eba2 0c01 	sub.w	ip, r2, r1
 8015472:	fa1f fc8c 	uxth.w	ip, ip
 8015476:	f8ad c074 	strh.w	ip, [sp, #116]	; 0x74
    area_inner.y1 -= pad;
 801547a:	b2bf      	uxth	r7, r7
 801547c:	1a7e      	subs	r6, r7, r1
 801547e:	b2b6      	uxth	r6, r6
 8015480:	f8ad 6076 	strh.w	r6, [sp, #118]	; 0x76
    area_inner.x2 += pad;
 8015484:	440b      	add	r3, r1
 8015486:	b29b      	uxth	r3, r3
 8015488:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_inner.y2 += pad;
 801548c:	440c      	add	r4, r1
 801548e:	b2a4      	uxth	r4, r4
 8015490:	f8ad 407a 	strh.w	r4, [sp, #122]	; 0x7a
    area_outer.x1 -= dsc->outline_width;
 8015494:	b280      	uxth	r0, r0
 8015496:	ebac 0c00 	sub.w	ip, ip, r0
 801549a:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
    area_outer.x2 += dsc->outline_width;
 801549e:	eb03 0c00 	add.w	ip, r3, r0
 80154a2:	f8ad c090 	strh.w	ip, [sp, #144]	; 0x90
    area_outer.y1 -= dsc->outline_width;
 80154a6:	1a36      	subs	r6, r6, r0
 80154a8:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    area_outer.y2 += dsc->outline_width;
 80154ac:	1826      	adds	r6, r4, r0
 80154ae:	f8ad 6092 	strh.w	r6, [sp, #146]	; 0x92
    int32_t rin = dsc->radius;
 80154b2:	f9ba 6000 	ldrsh.w	r6, [sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80154b6:	f1c2 0201 	rsb	r2, r2, #1
 80154ba:	440a      	add	r2, r1
 80154bc:	4413      	add	r3, r2
    int32_t inner_w = lv_area_get_width(&area_inner);
 80154be:	b21a      	sxth	r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80154c0:	f1c7 0701 	rsb	r7, r7, #1
 80154c4:	4439      	add	r1, r7
 80154c6:	4421      	add	r1, r4
    int32_t inner_h = lv_area_get_height(&area_inner);
 80154c8:	b20b      	sxth	r3, r1
    int32_t short_side = LV_MIN(inner_w, inner_h);
 80154ca:	4293      	cmp	r3, r2
 80154cc:	bfa8      	it	ge
 80154ce:	4613      	movge	r3, r2
    if(rin > short_side >> 1) rin = short_side >> 1;
 80154d0:	105a      	asrs	r2, r3, #1
 80154d2:	42b2      	cmp	r2, r6
 80154d4:	bfa8      	it	ge
 80154d6:	4632      	movge	r2, r6
    lv_coord_t rout = rin + dsc->outline_width;
 80154d8:	1883      	adds	r3, r0, r2
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 80154da:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80154de:	9103      	str	r1, [sp, #12]
 80154e0:	9502      	str	r5, [sp, #8]
 80154e2:	f8ba 1024 	ldrh.w	r1, [sl, #36]	; 0x24
 80154e6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80154ea:	9200      	str	r2, [sp, #0]
 80154ec:	b21b      	sxth	r3, r3
 80154ee:	aa1d      	add	r2, sp, #116	; 0x74
 80154f0:	a923      	add	r1, sp, #140	; 0x8c
 80154f2:	9804      	ldr	r0, [sp, #16]
 80154f4:	f7fe fce8 	bl	8013ec8 <draw_border_generic>
 80154f8:	f7ff b8fa 	b.w	80146f0 <lv_draw_sw_rect+0x19a>
        for(i = 0; i < size * size; i++) {
 80154fc:	fb06 f606 	mul.w	r6, r6, r6
 8015500:	9c07      	ldr	r4, [sp, #28]
 8015502:	1ea1      	subs	r1, r4, #2
 8015504:	1e62      	subs	r2, r4, #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 8015506:	4613      	mov	r3, r2
 8015508:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 801550c:	0980      	lsrs	r0, r0, #6
 801550e:	f802 0f01 	strb.w	r0, [r2, #1]!
        for(i = 0; i < size * size; i++) {
 8015512:	3302      	adds	r3, #2
 8015514:	1b1b      	subs	r3, r3, r4
 8015516:	429e      	cmp	r6, r3
 8015518:	dcf5      	bgt.n	8015506 <lv_draw_sw_rect+0xfb0>
 801551a:	f7ff b9e2 	b.w	80148e2 <lv_draw_sw_rect+0x38c>
 801551e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8015522:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    lv_mem_buf_release(mask_line);
 8015526:	4640      	mov	r0, r8
 8015528:	f00c fa52 	bl	80219d0 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 801552c:	a823      	add	r0, sp, #140	; 0x8c
 801552e:	f7f9 fa39 	bl	800e9a4 <lv_draw_mask_free_param>
    if(sw == 1) {
 8015532:	9b08      	ldr	r3, [sp, #32]
 8015534:	2b01      	cmp	r3, #1
 8015536:	d0e1      	beq.n	80154fc <lv_draw_sw_rect+0xfa6>
    shadow_blur_corner(size, sw, sh_buf);
 8015538:	b234      	sxth	r4, r6
 801553a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801553e:	4642      	mov	r2, r8
 8015540:	9d08      	ldr	r5, [sp, #32]
 8015542:	4629      	mov	r1, r5
 8015544:	4620      	mov	r0, r4
 8015546:	f7fe f8b1 	bl	80136ac <shadow_blur_corner>
    sw += sw_ori & 1;
 801554a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801554c:	442b      	add	r3, r5
 801554e:	4619      	mov	r1, r3
    if(sw > 1) {
 8015550:	2b01      	cmp	r3, #1
 8015552:	f77f a9b7 	ble.w	80148c4 <lv_draw_sw_rect+0x36e>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 8015556:	f44f 577f 	mov.w	r7, #16320	; 0x3fc0
 801555a:	fb97 f7f3 	sdiv	r7, r7, r3
        for(i = 0; i < (uint32_t)size * size; i++) {
 801555e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015560:	fb05 f505 	mul.w	r5, r5, r5
 8015564:	2d00      	cmp	r5, #0
 8015566:	f43f a9a9 	beq.w	80148bc <lv_draw_sw_rect+0x366>
 801556a:	f1a8 0302 	sub.w	r3, r8, #2
 801556e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8015572:	f7ff b997 	b.w	80148a4 <lv_draw_sw_rect+0x34e>
    lv_mem_buf_release(mask_line);
 8015576:	4640      	mov	r0, r8
 8015578:	f00c fa2a 	bl	80219d0 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 801557c:	a823      	add	r0, sp, #140	; 0x8c
 801557e:	f7f9 fa11 	bl	800e9a4 <lv_draw_mask_free_param>
        for(i = 0; i < size * size; i++) {
 8015582:	fb06 f606 	mul.w	r6, r6, r6
 8015586:	2e00      	cmp	r6, #0
 8015588:	f77f a9ab 	ble.w	80148e2 <lv_draw_sw_rect+0x38c>
 801558c:	e7b8      	b.n	8015500 <lv_draw_sw_rect+0xfaa>
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 801558e:	960b      	str	r6, [sp, #44]	; 0x2c
 8015590:	4630      	mov	r0, r6
 8015592:	f00c f9bb 	bl	802190c <lv_mem_buf_get>
 8015596:	4680      	mov	r8, r0
    for(y = 0; y < size; y++) {
 8015598:	2e00      	cmp	r6, #0
 801559a:	ddec      	ble.n	8015576 <lv_draw_sw_rect+0x1020>
    if(sw_ori == 1) sw = 1;
 801559c:	2301      	movs	r3, #1
 801559e:	9308      	str	r3, [sp, #32]
 80155a0:	f7ff b930 	b.w	8014804 <lv_draw_sw_rect+0x2ae>

080155a4 <transform_point_upscaled>:
    }
}

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 80155a4:	b510      	push	{r4, lr}
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 80155a6:	69c4      	ldr	r4, [r0, #28]
 80155a8:	2c00      	cmp	r4, #0
 80155aa:	d135      	bne.n	8015618 <transform_point_upscaled+0x74>
 80155ac:	6984      	ldr	r4, [r0, #24]
 80155ae:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80155b2:	d013      	beq.n	80155dc <transform_point_upscaled+0x38>
        *yout = yin * 256;
        return;
    }

    xin -= t->pivot.x;
    yin -= t->pivot.y;
 80155b4:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 80155b8:	eba2 020c 	sub.w	r2, r2, ip
    xin -= t->pivot.x;
 80155bc:	f9b0 c028 	ldrsh.w	ip, [r0, #40]	; 0x28
 80155c0:	eba1 010c 	sub.w	r1, r1, ip

    if(t->angle == 0) {
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 80155c4:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80155c8:	fb04 c101 	mla	r1, r4, r1, ip
 80155cc:	6019      	str	r1, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 80155ce:	6981      	ldr	r1, [r0, #24]
 80155d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80155d2:	fb01 3202 	mla	r2, r1, r2, r3
 80155d6:	9b02      	ldr	r3, [sp, #8]
 80155d8:	601a      	str	r2, [r3, #0]
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
    }
}
 80155da:	bd10      	pop	{r4, pc}
        *xout = xin * 256;
 80155dc:	0209      	lsls	r1, r1, #8
 80155de:	6019      	str	r1, [r3, #0]
        *yout = yin * 256;
 80155e0:	0212      	lsls	r2, r2, #8
 80155e2:	9b02      	ldr	r3, [sp, #8]
 80155e4:	601a      	str	r2, [r3, #0]
        return;
 80155e6:	e7f8      	b.n	80155da <transform_point_upscaled+0x36>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 80155e8:	6944      	ldr	r4, [r0, #20]
 80155ea:	fb01 f404 	mul.w	r4, r1, r4
 80155ee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80155f2:	fb0c 4412 	mls	r4, ip, r2, r4
 80155f6:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80155fa:	eb0c 04a4 	add.w	r4, ip, r4, asr #2
 80155fe:	601c      	str	r4, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 8015600:	6904      	ldr	r4, [r0, #16]
 8015602:	6943      	ldr	r3, [r0, #20]
 8015604:	fb03 f202 	mul.w	r2, r3, r2
 8015608:	fb04 2101 	mla	r1, r4, r1, r2
 801560c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801560e:	eb03 01a1 	add.w	r1, r3, r1, asr #2
 8015612:	9b02      	ldr	r3, [sp, #8]
 8015614:	6019      	str	r1, [r3, #0]
 8015616:	e7e0      	b.n	80155da <transform_point_upscaled+0x36>
    xin -= t->pivot.x;
 8015618:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	; 0x28
 801561c:	1b09      	subs	r1, r1, r4
    yin -= t->pivot.y;
 801561e:	f9b0 402a 	ldrsh.w	r4, [r0, #42]	; 0x2a
 8015622:	1b12      	subs	r2, r2, r4
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 8015624:	6984      	ldr	r4, [r0, #24]
 8015626:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801562a:	d0dd      	beq.n	80155e8 <transform_point_upscaled+0x44>
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 801562c:	f8d0 c014 	ldr.w	ip, [r0, #20]
 8015630:	fb0c fc01 	mul.w	ip, ip, r1
 8015634:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015638:	fb0e cc12 	mls	ip, lr, r2, ip
 801563c:	fb04 fc0c 	mul.w	ip, r4, ip
 8015640:	6a04      	ldr	r4, [r0, #32]
 8015642:	eb04 24ac 	add.w	r4, r4, ip, asr #10
 8015646:	601c      	str	r4, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 8015648:	6904      	ldr	r4, [r0, #16]
 801564a:	6943      	ldr	r3, [r0, #20]
 801564c:	fb03 f202 	mul.w	r2, r3, r2
 8015650:	fb04 2101 	mla	r1, r4, r1, r2
 8015654:	6982      	ldr	r2, [r0, #24]
 8015656:	fb02 f101 	mul.w	r1, r2, r1
 801565a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801565c:	eb03 21a1 	add.w	r1, r3, r1, asr #10
 8015660:	9b02      	ldr	r3, [sp, #8]
 8015662:	6019      	str	r1, [r3, #0]
 8015664:	e7b9      	b.n	80155da <transform_point_upscaled+0x36>
	...

08015668 <lv_draw_sw_transform>:
{
 8015668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801566c:	b0af      	sub	sp, #188	; 0xbc
 801566e:	468a      	mov	sl, r1
 8015670:	910d      	str	r1, [sp, #52]	; 0x34
 8015672:	9208      	str	r2, [sp, #32]
 8015674:	9304      	str	r3, [sp, #16]
 8015676:	f9bd b0e0 	ldrsh.w	fp, [sp, #224]	; 0xe0
 801567a:	f8cd b018 	str.w	fp, [sp, #24]
 801567e:	f9bd 00e4 	ldrsh.w	r0, [sp, #228]	; 0xe4
 8015682:	900b      	str	r0, [sp, #44]	; 0x2c
 8015684:	f89d 10ec 	ldrb.w	r1, [sp, #236]	; 0xec
 8015688:	9107      	str	r1, [sp, #28]
    tr_dsc.angle = -draw_dsc->angle;
 801568a:	993a      	ldr	r1, [sp, #232]	; 0xe8
 801568c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015690:	424b      	negs	r3, r1
 8015692:	932a      	str	r3, [sp, #168]	; 0xa8
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8015694:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8015696:	8860      	ldrh	r0, [r4, #2]
 8015698:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801569c:	fb92 f2f0 	sdiv	r2, r2, r0
 80156a0:	9229      	str	r2, [sp, #164]	; 0xa4
    tr_dsc.pivot = draw_dsc->pivot;
 80156a2:	6862      	ldr	r2, [r4, #4]
 80156a4:	922d      	str	r2, [sp, #180]	; 0xb4
    int32_t angle_low = tr_dsc.angle / 10;
 80156a6:	4fb8      	ldr	r7, [pc, #736]	; (8015988 <lv_draw_sw_transform+0x320>)
 80156a8:	fb87 4503 	smull	r4, r5, r7, r3
 80156ac:	17db      	asrs	r3, r3, #31
 80156ae:	ebc3 05a5 	rsb	r5, r3, r5, asr #2
    int32_t angle_high = angle_low + 1;
 80156b2:	f105 0801 	add.w	r8, r5, #1
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 80156b6:	f06f 0609 	mvn.w	r6, #9
 80156ba:	fb05 f606 	mul.w	r6, r5, r6
 80156be:	1a76      	subs	r6, r6, r1
    int32_t s1 = lv_trigo_sin(angle_low);
 80156c0:	b228      	sxth	r0, r5
 80156c2:	f00b ffc5 	bl	8021650 <lv_trigo_sin>
 80156c6:	4681      	mov	r9, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 80156c8:	fa0f f088 	sxth.w	r0, r8
 80156cc:	f00b ffc0 	bl	8021650 <lv_trigo_sin>
 80156d0:	4604      	mov	r4, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 80156d2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80156d6:	b200      	sxth	r0, r0
 80156d8:	f00b ffba 	bl	8021650 <lv_trigo_sin>
 80156dc:	4605      	mov	r5, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 80156de:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 80156e2:	b200      	sxth	r0, r0
 80156e4:	f00b ffb4 	bl	8021650 <lv_trigo_sin>
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 80156e8:	f1c6 020a 	rsb	r2, r6, #10
 80156ec:	fb06 f404 	mul.w	r4, r6, r4
 80156f0:	fb02 4909 	mla	r9, r2, r9, r4
 80156f4:	fb87 1309 	smull	r1, r3, r7, r9
 80156f8:	ea4f 79e9 	mov.w	r9, r9, asr #31
 80156fc:	ebc9 03a3 	rsb	r3, r9, r3, asr #2
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 8015700:	115b      	asrs	r3, r3, #5
 8015702:	9327      	str	r3, [sp, #156]	; 0x9c
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8015704:	fb00 f606 	mul.w	r6, r0, r6
 8015708:	fb02 6505 	mla	r5, r2, r5, r6
 801570c:	fb87 1305 	smull	r1, r3, r7, r5
 8015710:	17ed      	asrs	r5, r5, #31
 8015712:	ebc5 03a3 	rsb	r3, r5, r3, asr #2
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 8015716:	115b      	asrs	r3, r3, #5
 8015718:	9328      	str	r3, [sp, #160]	; 0xa0
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 801571a:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 801571e:	021b      	lsls	r3, r3, #8
 8015720:	932b      	str	r3, [sp, #172]	; 0xac
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 8015722:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
 8015726:	021b      	lsls	r3, r3, #8
 8015728:	932c      	str	r3, [sp, #176]	; 0xb0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801572a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801572e:	3301      	adds	r3, #1
 8015730:	f8ba 2000 	ldrh.w	r2, [sl]
 8015734:	1a9b      	subs	r3, r3, r2
 8015736:	b29a      	uxth	r2, r3
 8015738:	b21c      	sxth	r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801573a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 801573e:	3301      	adds	r3, #1
 8015740:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8015744:	1a5b      	subs	r3, r3, r1
 8015746:	b218      	sxth	r0, r3
 8015748:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < dest_h; y++) {
 801574a:	2800      	cmp	r0, #0
 801574c:	f340 8324 	ble.w	8015d98 <lv_draw_sw_transform+0x730>
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
 8015750:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015752:	fb0b f300 	mul.w	r3, fp, r0
 8015756:	0058      	lsls	r0, r3, #1
 8015758:	9017      	str	r0, [sp, #92]	; 0x5c
                    const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 801575a:	9808      	ldr	r0, [sp, #32]
 801575c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8015760:	911b      	str	r1, [sp, #108]	; 0x6c
        cbuf += dest_w;
 8015762:	0060      	lsls	r0, r4, #1
 8015764:	900e      	str	r0, [sp, #56]	; 0x38
 8015766:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8015768:	1c43      	adds	r3, r0, #1
 801576a:	3a01      	subs	r2, #1
 801576c:	b292      	uxth	r2, r2
 801576e:	eb03 0b02 	add.w	fp, r3, r2
 8015772:	2200      	movs	r2, #0
 8015774:	9203      	str	r2, [sp, #12]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8015776:	46a2      	mov	sl, r4
 8015778:	46d9      	mov	r9, fp
 801577a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801577e:	e2ab      	b.n	8015cd8 <lv_draw_sw_transform+0x670>
        int32_t ys_step_256 = 0;
 8015780:	2400      	movs	r4, #0
        int32_t xs_step_256 = 0;
 8015782:	4626      	mov	r6, r4
 8015784:	e2d3      	b.n	8015d2e <lv_draw_sw_transform+0x6c6>
    for(x = 0; x < x_end; x++) {
 8015786:	f1ba 0f00 	cmp.w	sl, #0
 801578a:	f340 8296 	ble.w	8015cba <lv_draw_sw_transform+0x652>
 801578e:	4633      	mov	r3, r6
 8015790:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015792:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 8015794:	2500      	movs	r5, #0
 8015796:	4628      	mov	r0, r5
            abuf[x] = 0;
 8015798:	46ac      	mov	ip, r5
 801579a:	f8dd e010 	ldr.w	lr, [sp, #16]
 801579e:	f8cd a010 	str.w	sl, [sp, #16]
 80157a2:	e089      	b.n	80158b8 <lv_draw_sw_transform+0x250>
    for(x = 0; x < x_end; x++) {
 80157a4:	f1ba 0f00 	cmp.w	sl, #0
 80157a8:	f340 8287 	ble.w	8015cba <lv_draw_sw_transform+0x652>
 80157ac:	4633      	mov	r3, r6
 80157ae:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80157b0:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 80157b2:	2500      	movs	r5, #0
 80157b4:	4628      	mov	r0, r5
            abuf[x] = 0;
 80157b6:	462f      	mov	r7, r5
 80157b8:	f8cd a014 	str.w	sl, [sp, #20]
 80157bc:	e006      	b.n	80157cc <lv_draw_sw_transform+0x164>
 80157be:	700f      	strb	r7, [r1, #0]
    for(x = 0; x < x_end; x++) {
 80157c0:	4418      	add	r0, r3
 80157c2:	3101      	adds	r1, #1
 80157c4:	3602      	adds	r6, #2
 80157c6:	4425      	add	r5, r4
 80157c8:	4549      	cmp	r1, r9
 80157ca:	d025      	beq.n	8015818 <lv_draw_sw_transform+0x1b0>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 80157cc:	eb0b 2220 	add.w	r2, fp, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80157d0:	1212      	asrs	r2, r2, #8
 80157d2:	d4f4      	bmi.n	80157be <lv_draw_sw_transform+0x156>
 80157d4:	4542      	cmp	r2, r8
 80157d6:	daf2      	bge.n	80157be <lv_draw_sw_transform+0x156>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 80157d8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80157dc:	eb0c 2c25 	add.w	ip, ip, r5, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80157e0:	ea5f 2c2c 	movs.w	ip, ip, asr #8
 80157e4:	d4eb      	bmi.n	80157be <lv_draw_sw_transform+0x156>
 80157e6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80157ea:	45d4      	cmp	ip, sl
 80157ec:	dae7      	bge.n	80157be <lv_draw_sw_transform+0x156>
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 80157ee:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80157f2:	fb0a 220c 	mla	r2, sl, ip, r2
 80157f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80157fa:	f8dd a020 	ldr.w	sl, [sp, #32]
 80157fe:	eb0a 0c02 	add.w	ip, sl, r2
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8015802:	f89c e001 	ldrb.w	lr, [ip, #1]
 8015806:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801580a:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 801580e:	8032      	strh	r2, [r6, #0]
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8015810:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8015814:	700a      	strb	r2, [r1, #0]
 8015816:	e7d3      	b.n	80157c0 <lv_draw_sw_transform+0x158>
 8015818:	f8dd a014 	ldr.w	sl, [sp, #20]
 801581c:	e24d      	b.n	8015cba <lv_draw_sw_transform+0x652>
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 801581e:	f7f6 ff77 	bl	800c710 <_lv_refr_get_disp_refreshing>
    lv_color_t ck = d->driver->color_chroma_key;
 8015822:	6803      	ldr	r3, [r0, #0]
 8015824:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
    lv_memset_ff(abuf, x_end);
 8015826:	4651      	mov	r1, sl
 8015828:	983d      	ldr	r0, [sp, #244]	; 0xf4
 801582a:	f00c fb03 	bl	8021e34 <lv_memset_ff>
    for(x = 0; x < x_end; x++) {
 801582e:	f1ba 0f00 	cmp.w	sl, #0
 8015832:	f340 8242 	ble.w	8015cba <lv_draw_sw_transform+0x652>
 8015836:	4633      	mov	r3, r6
 8015838:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801583a:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 801583c:	2700      	movs	r7, #0
 801583e:	4638      	mov	r0, r7
            abuf[x] = 0x00;
 8015840:	46be      	mov	lr, r7
 8015842:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015846:	9505      	str	r5, [sp, #20]
 8015848:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801584c:	e00a      	b.n	8015864 <lv_draw_sw_transform+0x1fc>
 801584e:	f881 e000 	strb.w	lr, [r1]
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 8015852:	f1ba 0f06 	cmp.w	sl, #6
 8015856:	d01d      	beq.n	8015894 <lv_draw_sw_transform+0x22c>
    for(x = 0; x < x_end; x++) {
 8015858:	4418      	add	r0, r3
 801585a:	3101      	adds	r1, #1
 801585c:	3602      	adds	r6, #2
 801585e:	4427      	add	r7, r4
 8015860:	4549      	cmp	r1, r9
 8015862:	d01e      	beq.n	80158a2 <lv_draw_sw_transform+0x23a>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8015864:	eb0b 2220 	add.w	r2, fp, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015868:	1212      	asrs	r2, r2, #8
 801586a:	d4f0      	bmi.n	801584e <lv_draw_sw_transform+0x1e6>
 801586c:	4542      	cmp	r2, r8
 801586e:	daee      	bge.n	801584e <lv_draw_sw_transform+0x1e6>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8015870:	f8dd c010 	ldr.w	ip, [sp, #16]
 8015874:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015878:	ea5f 2c2c 	movs.w	ip, ip, asr #8
 801587c:	d4e7      	bmi.n	801584e <lv_draw_sw_transform+0x1e6>
 801587e:	9d06      	ldr	r5, [sp, #24]
 8015880:	45ac      	cmp	ip, r5
 8015882:	dae4      	bge.n	801584e <lv_draw_sw_transform+0x1e6>
            src_tmp += ys_int * src_stride + xs_int;
 8015884:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015886:	fb05 2c0c 	mla	ip, r5, ip, r2
            cbuf[x] = *src_tmp;
 801588a:	9a08      	ldr	r2, [sp, #32]
 801588c:	f832 201c 	ldrh.w	r2, [r2, ip, lsl #1]
 8015890:	8032      	strh	r2, [r6, #0]
 8015892:	e7de      	b.n	8015852 <lv_draw_sw_transform+0x1ea>
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 8015894:	8832      	ldrh	r2, [r6, #0]
 8015896:	9d05      	ldr	r5, [sp, #20]
 8015898:	42aa      	cmp	r2, r5
            abuf[x] = 0x00;
 801589a:	bf08      	it	eq
 801589c:	f881 e000 	strbeq.w	lr, [r1]
 80158a0:	e7da      	b.n	8015858 <lv_draw_sw_transform+0x1f0>
 80158a2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80158a6:	e208      	b.n	8015cba <lv_draw_sw_transform+0x652>
            abuf[x] = 0;
 80158a8:	f881 c000 	strb.w	ip, [r1]
    for(x = 0; x < x_end; x++) {
 80158ac:	4418      	add	r0, r3
 80158ae:	3101      	adds	r1, #1
 80158b0:	3602      	adds	r6, #2
 80158b2:	4425      	add	r5, r4
 80158b4:	4549      	cmp	r1, r9
 80158b6:	d01b      	beq.n	80158f0 <lv_draw_sw_transform+0x288>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 80158b8:	eb0b 2220 	add.w	r2, fp, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80158bc:	1212      	asrs	r2, r2, #8
 80158be:	d4f3      	bmi.n	80158a8 <lv_draw_sw_transform+0x240>
 80158c0:	4542      	cmp	r2, r8
 80158c2:	daf1      	bge.n	80158a8 <lv_draw_sw_transform+0x240>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 80158c4:	eb0e 2725 	add.w	r7, lr, r5, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80158c8:	123f      	asrs	r7, r7, #8
 80158ca:	d4ed      	bmi.n	80158a8 <lv_draw_sw_transform+0x240>
 80158cc:	f8dd a018 	ldr.w	sl, [sp, #24]
 80158d0:	4557      	cmp	r7, sl
 80158d2:	dae9      	bge.n	80158a8 <lv_draw_sw_transform+0x240>
            src_tmp += ys_int * src_stride + xs_int;
 80158d4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80158d8:	fb0a 2707 	mla	r7, sl, r7, r2
            cbuf[x] = *src_tmp;
 80158dc:	f8dd a020 	ldr.w	sl, [sp, #32]
 80158e0:	f83a 2017 	ldrh.w	r2, [sl, r7, lsl #1]
 80158e4:	8032      	strh	r2, [r6, #0]
            abuf[x] = *a_tmp;
 80158e6:	4457      	add	r7, sl
 80158e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80158ea:	5cba      	ldrb	r2, [r7, r2]
 80158ec:	700a      	strb	r2, [r1, #0]
 80158ee:	e7dd      	b.n	80158ac <lv_draw_sw_transform+0x244>
 80158f0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80158f4:	e1e1      	b.n	8015cba <lv_draw_sw_transform+0x652>
    switch(cf) {
 80158f6:	9b07      	ldr	r3, [sp, #28]
 80158f8:	3b04      	subs	r3, #4
 80158fa:	2b10      	cmp	r3, #16
 80158fc:	f200 81dd 	bhi.w	8015cba <lv_draw_sw_transform+0x652>
 8015900:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015904:	0011003c 	.word	0x0011003c
 8015908:	01db0018 	.word	0x01db0018
 801590c:	01db01db 	.word	0x01db01db
 8015910:	01db01db 	.word	0x01db01db
 8015914:	01db01db 	.word	0x01db01db
 8015918:	01db01db 	.word	0x01db01db
 801591c:	01db01db 	.word	0x01db01db
 8015920:	01db01db 	.word	0x01db01db
 8015924:	0035      	.short	0x0035
 8015926:	2300      	movs	r3, #0
 8015928:	9318      	str	r3, [sp, #96]	; 0x60
 801592a:	2303      	movs	r3, #3
 801592c:	9310      	str	r3, [sp, #64]	; 0x40
 801592e:	2301      	movs	r3, #1
 8015930:	9319      	str	r3, [sp, #100]	; 0x64
 8015932:	e008      	b.n	8015946 <lv_draw_sw_transform+0x2de>
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8015934:	f7f6 feec 	bl	800c710 <_lv_refr_get_disp_refreshing>
                ck = d->driver->color_chroma_key;
 8015938:	6803      	ldr	r3, [r0, #0]
 801593a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 801593c:	9318      	str	r3, [sp, #96]	; 0x60
                px_size = sizeof(lv_color_t);
 801593e:	2302      	movs	r3, #2
 8015940:	9310      	str	r3, [sp, #64]	; 0x40
                has_alpha = true;
 8015942:	2301      	movs	r3, #1
 8015944:	9319      	str	r3, [sp, #100]	; 0x64
    for(x = 0; x < x_end; x++) {
 8015946:	f1ba 0f00 	cmp.w	sl, #0
 801594a:	f340 81b6 	ble.w	8015cba <lv_draw_sw_transform+0x652>
 801594e:	4631      	mov	r1, r6
 8015950:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8015952:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 8015954:	9405      	str	r4, [sp, #20]
 8015956:	2700      	movs	r7, #0
 8015958:	46be      	mov	lr, r7
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801595a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 801595e:	9214      	str	r2, [sp, #80]	; 0x50
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8015960:	9a06      	ldr	r2, [sp, #24]
 8015962:	3a01      	subs	r2, #1
 8015964:	9215      	str	r2, [sp, #84]	; 0x54
            y_next = -1;
 8015966:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 801596a:	468a      	mov	sl, r1
 801596c:	e019      	b.n	80159a2 <lv_draw_sw_transform+0x33a>
    lv_color_t ck = {0};
 801596e:	2300      	movs	r3, #0
 8015970:	9318      	str	r3, [sp, #96]	; 0x60
            px_size = sizeof(lv_color_t);
 8015972:	2302      	movs	r3, #2
 8015974:	9310      	str	r3, [sp, #64]	; 0x40
            has_alpha = true;
 8015976:	2301      	movs	r3, #1
 8015978:	9319      	str	r3, [sp, #100]	; 0x64
            break;
 801597a:	e7e4      	b.n	8015946 <lv_draw_sw_transform+0x2de>
    lv_color_t ck = {0};
 801597c:	2300      	movs	r3, #0
 801597e:	9318      	str	r3, [sp, #96]	; 0x60
            px_size = sizeof(lv_color_t);
 8015980:	2202      	movs	r2, #2
 8015982:	9210      	str	r2, [sp, #64]	; 0x40
            has_alpha = false;
 8015984:	9319      	str	r3, [sp, #100]	; 0x64
 8015986:	e7de      	b.n	8015946 <lv_draw_sw_transform+0x2de>
 8015988:	66666667 	.word	0x66666667
            abuf[x] = 0x00;
 801598c:	f04f 0200 	mov.w	r2, #0
 8015990:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 8015992:	44d6      	add	lr, sl
 8015994:	3301      	adds	r3, #1
 8015996:	3602      	adds	r6, #2
 8015998:	9a05      	ldr	r2, [sp, #20]
 801599a:	4417      	add	r7, r2
 801599c:	454b      	cmp	r3, r9
 801599e:	f000 818a 	beq.w	8015cb6 <lv_draw_sw_transform+0x64e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 80159a2:	eb0b 212e 	add.w	r1, fp, lr, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80159a6:	120a      	asrs	r2, r1, #8
 80159a8:	d4f0      	bmi.n	801598c <lv_draw_sw_transform+0x324>
 80159aa:	4542      	cmp	r2, r8
 80159ac:	daee      	bge.n	801598c <lv_draw_sw_transform+0x324>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 80159ae:	9804      	ldr	r0, [sp, #16]
 80159b0:	eb00 2427 	add.w	r4, r0, r7, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 80159b4:	1220      	asrs	r0, r4, #8
 80159b6:	d4e9      	bmi.n	801598c <lv_draw_sw_transform+0x324>
 80159b8:	9d06      	ldr	r5, [sp, #24]
 80159ba:	42a8      	cmp	r0, r5
 80159bc:	dae6      	bge.n	801598c <lv_draw_sw_transform+0x324>
        int32_t xs_fract = xs_ups & 0xFF;
 80159be:	fa5f fc81 	uxtb.w	ip, r1
        int32_t ys_fract = ys_ups & 0xFF;
 80159c2:	b2e5      	uxtb	r5, r4
        if(xs_fract < 0x80) {
 80159c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80159c8:	d152      	bne.n	8015a70 <lv_draw_sw_transform+0x408>
            xs_fract = (0x7F - xs_fract) * 2;
 80159ca:	f1cc 0c7f 	rsb	ip, ip, #127	; 0x7f
 80159ce:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80159d2:	9111      	str	r1, [sp, #68]	; 0x44
            x_next = -1;
 80159d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80159d8:	910a      	str	r1, [sp, #40]	; 0x28
        if(ys_fract < 0x80) {
 80159da:	f014 0f80 	tst.w	r4, #128	; 0x80
 80159de:	d14f      	bne.n	8015a80 <lv_draw_sw_transform+0x418>
            ys_fract = (0x7F - ys_fract) * 2;
 80159e0:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
 80159e4:	0069      	lsls	r1, r5, #1
 80159e6:	9112      	str	r1, [sp, #72]	; 0x48
            y_next = -1;
 80159e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80159ec:	910f      	str	r1, [sp, #60]	; 0x3c
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 80159ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80159f0:	fb05 f100 	mul.w	r1, r5, r0
 80159f4:	9113      	str	r1, [sp, #76]	; 0x4c
 80159f6:	1851      	adds	r1, r2, r1
 80159f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80159fa:	fb05 f101 	mul.w	r1, r5, r1
 80159fe:	9c08      	ldr	r4, [sp, #32]
 8015a00:	440c      	add	r4, r1
 8015a02:	9409      	str	r4, [sp, #36]	; 0x24
        if(xs_int + x_next >= 0 &&
 8015a04:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8015a08:	eb12 0c0c 	adds.w	ip, r2, ip
 8015a0c:	f100 810a 	bmi.w	8015c24 <lv_draw_sw_transform+0x5bc>
 8015a10:	45e0      	cmp	r8, ip
 8015a12:	f340 8107 	ble.w	8015c24 <lv_draw_sw_transform+0x5bc>
           xs_int + x_next <= src_w - 1 &&
 8015a16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015a18:	1945      	adds	r5, r0, r5
 8015a1a:	951a      	str	r5, [sp, #104]	; 0x68
 8015a1c:	f100 8102 	bmi.w	8015c24 <lv_draw_sw_transform+0x5bc>
           ys_int + y_next >= 0 &&
 8015a20:	9c06      	ldr	r4, [sp, #24]
 8015a22:	42ac      	cmp	r4, r5
 8015a24:	f340 80fe 	ble.w	8015c24 <lv_draw_sw_transform+0x5bc>
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 8015a28:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015a2a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8015a2e:	fb0c f404 	mul.w	r4, ip, r4
 8015a32:	941c      	str	r4, [sp, #112]	; 0x70
 8015a34:	4620      	mov	r0, r4
 8015a36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015a38:	4420      	add	r0, r4
 8015a3a:	901d      	str	r0, [sp, #116]	; 0x74
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8015a3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8015a3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015a40:	fb05 f000 	mul.w	r0, r5, r0
 8015a44:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8015a46:	fb04 fc00 	mul.w	ip, r4, r0
 8015a4a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015a4c:	eb04 000c 	add.w	r0, r4, ip
 8015a50:	900f      	str	r0, [sp, #60]	; 0x3c
            if(has_alpha) {
 8015a52:	9819      	ldr	r0, [sp, #100]	; 0x64
 8015a54:	2800      	cmp	r0, #0
 8015a56:	d07f      	beq.n	8015b58 <lv_draw_sw_transform+0x4f0>
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8015a58:	9807      	ldr	r0, [sp, #28]
 8015a5a:	2805      	cmp	r0, #5
 8015a5c:	d016      	beq.n	8015a8c <lv_draw_sw_transform+0x424>
                else if(cf == LV_IMG_CF_RGB565A8) {
 8015a5e:	9807      	ldr	r0, [sp, #28]
 8015a60:	2814      	cmp	r0, #20
 8015a62:	d055      	beq.n	8015b10 <lv_draw_sw_transform+0x4a8>
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8015a64:	9a07      	ldr	r2, [sp, #28]
 8015a66:	2a06      	cmp	r2, #6
 8015a68:	d061      	beq.n	8015b2e <lv_draw_sw_transform+0x4c6>
 8015a6a:	25ff      	movs	r5, #255	; 0xff
 8015a6c:	950a      	str	r5, [sp, #40]	; 0x28
 8015a6e:	e031      	b.n	8015ad4 <lv_draw_sw_transform+0x46c>
            xs_fract = (xs_fract - 0x80) * 2;
 8015a70:	f1ac 0c80 	sub.w	ip, ip, #128	; 0x80
 8015a74:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8015a78:	9111      	str	r1, [sp, #68]	; 0x44
            x_next = 1;
 8015a7a:	2101      	movs	r1, #1
 8015a7c:	910a      	str	r1, [sp, #40]	; 0x28
 8015a7e:	e7ac      	b.n	80159da <lv_draw_sw_transform+0x372>
            ys_fract = (ys_fract - 0x80) * 2;
 8015a80:	3d80      	subs	r5, #128	; 0x80
 8015a82:	0069      	lsls	r1, r5, #1
 8015a84:	9112      	str	r1, [sp, #72]	; 0x48
            y_next = 1;
 8015a86:	2101      	movs	r1, #1
 8015a88:	910f      	str	r1, [sp, #60]	; 0x3c
 8015a8a:	e7b0      	b.n	80159ee <lv_draw_sw_transform+0x386>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8015a8c:	78a2      	ldrb	r2, [r4, #2]
 8015a8e:	9213      	str	r2, [sp, #76]	; 0x4c
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8015a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a92:	7895      	ldrb	r5, [r2, #2]
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8015a94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015a96:	7892      	ldrb	r2, [r2, #2]
 8015a98:	920a      	str	r2, [sp, #40]	; 0x28
                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 8015a9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015a9c:	42ac      	cmp	r4, r5
 8015a9e:	d008      	beq.n	8015ab2 <lv_draw_sw_transform+0x44a>
 8015aa0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015aa2:	fb00 f205 	mul.w	r2, r0, r5
 8015aa6:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8015aaa:	fb04 2205 	mla	r2, r4, r5, r2
 8015aae:	f3c2 2507 	ubfx	r5, r2, #8, #8
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 8015ab2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015ab4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ab6:	4284      	cmp	r4, r0
 8015ab8:	d00c      	beq.n	8015ad4 <lv_draw_sw_transform+0x46c>
 8015aba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015abc:	920a      	str	r2, [sp, #40]	; 0x28
 8015abe:	fb02 f000 	mul.w	r0, r2, r0
 8015ac2:	4602      	mov	r2, r0
 8015ac4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ac6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8015aca:	fb04 2200 	mla	r2, r4, r0, r2
 8015ace:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015ad2:	920a      	str	r2, [sp, #40]	; 0x28
                abuf[x] = (a_ver + a_hor) >> 1;
 8015ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ad6:	442a      	add	r2, r5
 8015ad8:	f3c2 0247 	ubfx	r2, r2, #1, #8
 8015adc:	701a      	strb	r2, [r3, #0]
                if(abuf[x] == 0x00) continue;
 8015ade:	2a00      	cmp	r2, #0
 8015ae0:	f43f af57 	beq.w	8015992 <lv_draw_sw_transform+0x32a>
                c_base.full = px_base[0] + (px_base[1] << 8);
 8015ae4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015ae6:	786a      	ldrb	r2, [r5, #1]
 8015ae8:	9808      	ldr	r0, [sp, #32]
 8015aea:	5c41      	ldrb	r1, [r0, r1]
 8015aec:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 8015af0:	b289      	uxth	r1, r1
                c_ver.full = px_ver[0] + (px_ver[1] << 8);
 8015af2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015af4:	7850      	ldrb	r0, [r2, #1]
 8015af6:	f815 200c 	ldrb.w	r2, [r5, ip]
 8015afa:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8015afe:	b292      	uxth	r2, r2
                c_hor.full = px_hor[0] + (px_hor[1] << 8);
 8015b00:	981d      	ldr	r0, [sp, #116]	; 0x74
 8015b02:	7840      	ldrb	r0, [r0, #1]
 8015b04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015b06:	5d2c      	ldrb	r4, [r5, r4]
 8015b08:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 8015b0c:	b280      	uxth	r0, r0
 8015b0e:	e02d      	b.n	8015b6c <lv_draw_sw_transform+0x504>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
 8015b10:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015b12:	4415      	add	r5, r2
 8015b14:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8015b16:	5d60      	ldrb	r0, [r4, r5]
 8015b18:	9013      	str	r0, [sp, #76]	; 0x4c
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
 8015b1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b1c:	4420      	add	r0, r4
 8015b1e:	5d40      	ldrb	r0, [r0, r5]
 8015b20:	900a      	str	r0, [sp, #40]	; 0x28
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
 8015b22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015b24:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015b26:	fb00 4505 	mla	r5, r0, r5, r4
 8015b2a:	5cad      	ldrb	r5, [r5, r2]
 8015b2c:	e7b5      	b.n	8015a9a <lv_draw_sw_transform+0x432>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 8015b2e:	9a08      	ldr	r2, [sp, #32]
 8015b30:	5a52      	ldrh	r2, [r2, r1]
 8015b32:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015b34:	4282      	cmp	r2, r0
 8015b36:	d00b      	beq.n	8015b50 <lv_draw_sw_transform+0x4e8>
 8015b38:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015b3a:	f834 200c 	ldrh.w	r2, [r4, ip]
 8015b3e:	4282      	cmp	r2, r0
 8015b40:	d006      	beq.n	8015b50 <lv_draw_sw_transform+0x4e8>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 8015b42:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015b44:	5aa2      	ldrh	r2, [r4, r2]
 8015b46:	4282      	cmp	r2, r0
 8015b48:	d002      	beq.n	8015b50 <lv_draw_sw_transform+0x4e8>
 8015b4a:	25ff      	movs	r5, #255	; 0xff
 8015b4c:	950a      	str	r5, [sp, #40]	; 0x28
 8015b4e:	e7c1      	b.n	8015ad4 <lv_draw_sw_transform+0x46c>
                        abuf[x] = 0x00;
 8015b50:	f04f 0200 	mov.w	r2, #0
 8015b54:	701a      	strb	r2, [r3, #0]
                        continue;
 8015b56:	e71c      	b.n	8015992 <lv_draw_sw_transform+0x32a>
                c_base = *((const lv_color_t *) px_base);
 8015b58:	9a08      	ldr	r2, [sp, #32]
 8015b5a:	5a51      	ldrh	r1, [r2, r1]
                c_hor = *((const lv_color_t *) px_hor);
 8015b5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015b5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015b60:	5aa0      	ldrh	r0, [r4, r2]
                c_ver = *((const lv_color_t *) px_ver);
 8015b62:	f834 200c 	ldrh.w	r2, [r4, ip]
                abuf[x] = 0xff;
 8015b66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015b6a:	701c      	strb	r4, [r3, #0]
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 8015b6c:	428a      	cmp	r2, r1
 8015b6e:	d055      	beq.n	8015c1c <lv_draw_sw_transform+0x5b4>
 8015b70:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8015b74:	f021 4178 	bic.w	r1, r1, #4160749568	; 0xf8000000
 8015b78:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8015b7c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8015b80:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8015b84:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8015b88:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8015b8c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8015b90:	1a52      	subs	r2, r2, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8015b92:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015b96:	3404      	adds	r4, #4
 8015b98:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8015b9a:	fb04 f202 	mul.w	r2, r4, r2
 8015b9e:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8015ba2:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8015ba6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8015baa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8015bae:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 8015bb2:	f020 4078 	bic.w	r0, r0, #4160749568	; 0xf8000000
 8015bb6:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8015bba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8015bbe:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8015bc0:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8015bc4:	3404      	adds	r4, #4
 8015bc6:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8015bc8:	fb04 f000 	mul.w	r0, r4, r0
 8015bcc:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 8015bd0:	f021 4178 	bic.w	r1, r1, #4160749568	; 0xf8000000
 8015bd4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8015bd8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
    ret.full = (uint16_t)((result >> 16) | result);
 8015bdc:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8015be0:	b290      	uxth	r0, r2
 8015be2:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8015be6:	486e      	ldr	r0, [pc, #440]	; (8015da0 <lv_draw_sw_transform+0x738>)
 8015be8:	4010      	ands	r0, r2
    ret.full = (uint16_t)((result >> 16) | result);
 8015bea:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8015bee:	b28a      	uxth	r2, r1
 8015bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015bf4:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8015bf8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8015bfc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8015c00:	1a12      	subs	r2, r2, r0
 8015c02:	f3c2 025a 	ubfx	r2, r2, #1, #27
 8015c06:	4402      	add	r2, r0
 8015c08:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8015c0c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8015c10:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    ret.full = (uint16_t)((result >> 16) | result);
 8015c14:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 8015c18:	8032      	strh	r2, [r6, #0]
 8015c1a:	e6ba      	b.n	8015992 <lv_draw_sw_transform+0x32a>
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 8015c1c:	4281      	cmp	r1, r0
 8015c1e:	d1a7      	bne.n	8015b70 <lv_draw_sw_transform+0x508>
                cbuf[x] = c_base;
 8015c20:	8031      	strh	r1, [r6, #0]
 8015c22:	e6b6      	b.n	8015992 <lv_draw_sw_transform+0x32a>
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8015c24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015c26:	7865      	ldrb	r5, [r4, #1]
 8015c28:	9c08      	ldr	r4, [sp, #32]
 8015c2a:	5c61      	ldrb	r1, [r4, r1]
 8015c2c:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 8015c30:	b289      	uxth	r1, r1
 8015c32:	8031      	strh	r1, [r6, #0]
            switch(cf) {
 8015c34:	9d07      	ldr	r5, [sp, #28]
 8015c36:	2d06      	cmp	r5, #6
 8015c38:	d019      	beq.n	8015c6e <lv_draw_sw_transform+0x606>
 8015c3a:	2d14      	cmp	r5, #20
 8015c3c:	d01e      	beq.n	8015c7c <lv_draw_sw_transform+0x614>
 8015c3e:	2d05      	cmp	r5, #5
 8015c40:	d012      	beq.n	8015c68 <lv_draw_sw_transform+0x600>
 8015c42:	21ff      	movs	r1, #255	; 0xff
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8015c44:	b912      	cbnz	r2, 8015c4c <lv_draw_sw_transform+0x5e4>
 8015c46:	f1bc 0f00 	cmp.w	ip, #0
 8015c4a:	db21      	blt.n	8015c90 <lv_draw_sw_transform+0x628>
 8015c4c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015c4e:	42a2      	cmp	r2, r4
 8015c50:	d01b      	beq.n	8015c8a <lv_draw_sw_transform+0x622>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8015c52:	b910      	cbnz	r0, 8015c5a <lv_draw_sw_transform+0x5f2>
 8015c54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c56:	2a00      	cmp	r2, #0
 8015c58:	db25      	blt.n	8015ca6 <lv_draw_sw_transform+0x63e>
 8015c5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015c5c:	4290      	cmp	r0, r2
 8015c5e:	d01f      	beq.n	8015ca0 <lv_draw_sw_transform+0x638>
                abuf[x] = 0x00;
 8015c60:	f04f 0200 	mov.w	r2, #0
 8015c64:	701a      	strb	r2, [r3, #0]
 8015c66:	e694      	b.n	8015992 <lv_draw_sw_transform+0x32a>
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8015c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c6a:	7889      	ldrb	r1, [r1, #2]
                    break;
 8015c6c:	e7ea      	b.n	8015c44 <lv_draw_sw_transform+0x5dc>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 8015c6e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8015c70:	1a61      	subs	r1, r4, r1
 8015c72:	bf18      	it	ne
 8015c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8015c78:	b2c9      	uxtb	r1, r1
 8015c7a:	e7e3      	b.n	8015c44 <lv_draw_sw_transform+0x5dc>
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
 8015c7c:	9908      	ldr	r1, [sp, #32]
 8015c7e:	4411      	add	r1, r2
 8015c80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015c82:	4421      	add	r1, r4
 8015c84:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8015c86:	5d09      	ldrb	r1, [r1, r4]
                    break;
 8015c88:	e7dc      	b.n	8015c44 <lv_draw_sw_transform+0x5dc>
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8015c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c8c:	2a00      	cmp	r2, #0
 8015c8e:	dde0      	ble.n	8015c52 <lv_draw_sw_transform+0x5ea>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 8015c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c92:	f1c2 0cff 	rsb	ip, r2, #255	; 0xff
 8015c96:	fb01 f10c 	mul.w	r1, r1, ip
 8015c9a:	1209      	asrs	r1, r1, #8
 8015c9c:	7019      	strb	r1, [r3, #0]
 8015c9e:	e678      	b.n	8015992 <lv_draw_sw_transform+0x32a>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8015ca0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ca2:	2a00      	cmp	r2, #0
 8015ca4:	dddc      	ble.n	8015c60 <lv_draw_sw_transform+0x5f8>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 8015ca6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ca8:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
 8015cac:	fb05 f101 	mul.w	r1, r5, r1
 8015cb0:	1209      	asrs	r1, r1, #8
 8015cb2:	7019      	strb	r1, [r3, #0]
 8015cb4:	e66d      	b.n	8015992 <lv_draw_sw_transform+0x32a>
 8015cb6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
        cbuf += dest_w;
 8015cba:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8015cbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015cbe:	4413      	add	r3, r2
 8015cc0:	933c      	str	r3, [sp, #240]	; 0xf0
        abuf += dest_w;
 8015cc2:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8015cc4:	4453      	add	r3, sl
 8015cc6:	933d      	str	r3, [sp, #244]	; 0xf4
    for(y = 0; y < dest_h; y++) {
 8015cc8:	9b03      	ldr	r3, [sp, #12]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	9303      	str	r3, [sp, #12]
 8015cce:	44d1      	add	r9, sl
 8015cd0:	b21b      	sxth	r3, r3
 8015cd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	dd5f      	ble.n	8015d98 <lv_draw_sw_transform+0x730>
        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 8015cd8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015cda:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015cde:	ab20      	add	r3, sp, #128	; 0x80
 8015ce0:	9300      	str	r3, [sp, #0]
 8015ce2:	ab1f      	add	r3, sp, #124	; 0x7c
 8015ce4:	9d03      	ldr	r5, [sp, #12]
 8015ce6:	442a      	add	r2, r5
 8015ce8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015cec:	a823      	add	r0, sp, #140	; 0x8c
 8015cee:	f7ff fc59 	bl	80155a4 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 8015cf2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015cf6:	ab22      	add	r3, sp, #136	; 0x88
 8015cf8:	9300      	str	r3, [sp, #0]
 8015cfa:	ab21      	add	r3, sp, #132	; 0x84
 8015cfc:	442a      	add	r2, r5
 8015cfe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015d02:	a823      	add	r0, sp, #140	; 0x8c
 8015d04:	f7ff fc4e 	bl	80155a4 <transform_point_upscaled>
        int32_t xs_diff = xs2_ups - xs1_ups;
 8015d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
        int32_t ys_diff = ys2_ups - ys1_ups;
 8015d0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015d0e:	9920      	ldr	r1, [sp, #128]	; 0x80
        if(dest_w > 1) {
 8015d10:	f1ba 0f01 	cmp.w	sl, #1
 8015d14:	f77f ad34 	ble.w	8015780 <lv_draw_sw_transform+0x118>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8015d18:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
        int32_t xs_diff = xs2_ups - xs1_ups;
 8015d1c:	1a1b      	subs	r3, r3, r0
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 8015d1e:	021b      	lsls	r3, r3, #8
 8015d20:	4625      	mov	r5, r4
 8015d22:	fb93 f6f4 	sdiv	r6, r3, r4
        int32_t ys_diff = ys2_ups - ys1_ups;
 8015d26:	1a54      	subs	r4, r2, r1
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 8015d28:	0224      	lsls	r4, r4, #8
 8015d2a:	fb94 f4f5 	sdiv	r4, r4, r5
        int32_t xs_ups = xs1_ups + 0x80;
 8015d2e:	f100 0b80 	add.w	fp, r0, #128	; 0x80
        int32_t ys_ups = ys1_ups + 0x80;
 8015d32:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8015d36:	9304      	str	r3, [sp, #16]
        if(draw_dsc->antialias == 0) {
 8015d38:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8015d3a:	7d1b      	ldrb	r3, [r3, #20]
 8015d3c:	f013 0f01 	tst.w	r3, #1
 8015d40:	f47f add9 	bne.w	80158f6 <lv_draw_sw_transform+0x28e>
            switch(cf) {
 8015d44:	9b07      	ldr	r3, [sp, #28]
 8015d46:	3b04      	subs	r3, #4
 8015d48:	2b10      	cmp	r3, #16
 8015d4a:	d8b6      	bhi.n	8015cba <lv_draw_sw_transform+0x652>
 8015d4c:	a201      	add	r2, pc, #4	; (adr r2, 8015d54 <lv_draw_sw_transform+0x6ec>)
 8015d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d52:	bf00      	nop
 8015d54:	0801581f 	.word	0x0801581f
 8015d58:	080157a5 	.word	0x080157a5
 8015d5c:	0801581f 	.word	0x0801581f
 8015d60:	08015cbb 	.word	0x08015cbb
 8015d64:	08015cbb 	.word	0x08015cbb
 8015d68:	08015cbb 	.word	0x08015cbb
 8015d6c:	08015cbb 	.word	0x08015cbb
 8015d70:	08015cbb 	.word	0x08015cbb
 8015d74:	08015cbb 	.word	0x08015cbb
 8015d78:	08015cbb 	.word	0x08015cbb
 8015d7c:	08015cbb 	.word	0x08015cbb
 8015d80:	08015cbb 	.word	0x08015cbb
 8015d84:	08015cbb 	.word	0x08015cbb
 8015d88:	08015cbb 	.word	0x08015cbb
 8015d8c:	08015cbb 	.word	0x08015cbb
 8015d90:	08015cbb 	.word	0x08015cbb
 8015d94:	08015787 	.word	0x08015787
}
 8015d98:	b02f      	add	sp, #188	; 0xbc
 8015d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d9e:	bf00      	nop
 8015da0:	07e0f81f 	.word	0x07e0f81f

08015da4 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015da4:	8883      	ldrh	r3, [r0, #4]
 8015da6:	3301      	adds	r3, #1
 8015da8:	8800      	ldrh	r0, [r0, #0]
 8015daa:	1a18      	subs	r0, r3, r0
}
 8015dac:	b200      	sxth	r0, r0
 8015dae:	4770      	bx	lr

08015db0 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015db0:	88c3      	ldrh	r3, [r0, #6]
 8015db2:	3301      	adds	r3, #1
 8015db4:	8840      	ldrh	r0, [r0, #2]
 8015db6:	1a18      	subs	r0, r3, r0
}
 8015db8:	b200      	sxth	r0, r0
 8015dba:	4770      	bx	lr

08015dbc <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
 8015dbc:	b410      	push	{r4}
 8015dbe:	9c01      	ldr	r4, [sp, #4]
    if(item_cnt <= 1) {
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	dd07      	ble.n	8015dd4 <place_content+0x18>
            default:
                break;
        }
    }

    switch(place) {
 8015dc4:	3801      	subs	r0, #1
 8015dc6:	2804      	cmp	r0, #4
 8015dc8:	d843      	bhi.n	8015e52 <place_content+0x96>
 8015dca:	e8df f000 	tbb	[pc, r0]
 8015dce:	0814      	.short	0x0814
 8015dd0:	2536      	.short	0x2536
 8015dd2:	1c          	.byte	0x1c
 8015dd3:	00          	.byte	0x00
        switch(place) {
 8015dd4:	f1a0 0c03 	sub.w	ip, r0, #3
 8015dd8:	f1bc 0f02 	cmp.w	ip, #2
 8015ddc:	d8f2      	bhi.n	8015dc4 <place_content+0x8>
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 8015dde:	2300      	movs	r3, #0
 8015de0:	9802      	ldr	r0, [sp, #8]
 8015de2:	8003      	strh	r3, [r0, #0]
            *start_pos += (max_size - content_size) / 2;
 8015de4:	1a89      	subs	r1, r1, r2
 8015de6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8015dea:	8823      	ldrh	r3, [r4, #0]
 8015dec:	eb03 0161 	add.w	r1, r3, r1, asr #1
 8015df0:	8021      	strh	r1, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 8015df2:	bc10      	pop	{r4}
 8015df4:	4770      	bx	lr
            *gap = 0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	9802      	ldr	r0, [sp, #8]
 8015dfa:	8003      	strh	r3, [r0, #0]
            *start_pos += max_size - content_size;
 8015dfc:	1a89      	subs	r1, r1, r2
 8015dfe:	8823      	ldrh	r3, [r4, #0]
 8015e00:	4419      	add	r1, r3
 8015e02:	8021      	strh	r1, [r4, #0]
            break;
 8015e04:	e7f5      	b.n	8015df2 <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 8015e06:	1a89      	subs	r1, r1, r2
 8015e08:	b209      	sxth	r1, r1
 8015e0a:	3b01      	subs	r3, #1
 8015e0c:	b21b      	sxth	r3, r3
 8015e0e:	fb91 f1f3 	sdiv	r1, r1, r3
 8015e12:	9b02      	ldr	r3, [sp, #8]
 8015e14:	8019      	strh	r1, [r3, #0]
            break;
 8015e16:	e7ec      	b.n	8015df2 <place_content+0x36>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 8015e18:	1a89      	subs	r1, r1, r2
 8015e1a:	b209      	sxth	r1, r1
 8015e1c:	fb91 f3f3 	sdiv	r3, r1, r3
 8015e20:	9a02      	ldr	r2, [sp, #8]
 8015e22:	8812      	ldrh	r2, [r2, #0]
 8015e24:	4413      	add	r3, r2
 8015e26:	b21b      	sxth	r3, r3
 8015e28:	9a02      	ldr	r2, [sp, #8]
 8015e2a:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap / 2;
 8015e2c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8015e30:	8822      	ldrh	r2, [r4, #0]
 8015e32:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8015e36:	8023      	strh	r3, [r4, #0]
            break;
 8015e38:	e7db      	b.n	8015df2 <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 8015e3a:	1a89      	subs	r1, r1, r2
 8015e3c:	b209      	sxth	r1, r1
 8015e3e:	3301      	adds	r3, #1
 8015e40:	b21b      	sxth	r3, r3
 8015e42:	fb91 f1f3 	sdiv	r1, r1, r3
 8015e46:	9b02      	ldr	r3, [sp, #8]
 8015e48:	8019      	strh	r1, [r3, #0]
            *start_pos += *gap;
 8015e4a:	8823      	ldrh	r3, [r4, #0]
 8015e4c:	4419      	add	r1, r3
 8015e4e:	8021      	strh	r1, [r4, #0]
            break;
 8015e50:	e7cf      	b.n	8015df2 <place_content+0x36>
            *gap = 0;
 8015e52:	2300      	movs	r3, #0
 8015e54:	9a02      	ldr	r2, [sp, #8]
 8015e56:	8013      	strh	r3, [r2, #0]
}
 8015e58:	e7cb      	b.n	8015df2 <place_content+0x36>

08015e5a <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 8015e5a:	b149      	cbz	r1, 8015e70 <get_next_item+0x16>
        (*item_id)--;
 8015e5c:	6813      	ldr	r3, [r2, #0]
 8015e5e:	3b01      	subs	r3, #1
 8015e60:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	db0f      	blt.n	8015e86 <get_next_item+0x2c>
 8015e66:	6882      	ldr	r2, [r0, #8]
 8015e68:	6812      	ldr	r2, [r2, #0]
 8015e6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015e6e:	4770      	bx	lr
        else return NULL;
    }
    else {
        (*item_id)++;
 8015e70:	6813      	ldr	r3, [r2, #0]
 8015e72:	3301      	adds	r3, #1
 8015e74:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8015e76:	6882      	ldr	r2, [r0, #8]
 8015e78:	6851      	ldr	r1, [r2, #4]
 8015e7a:	428b      	cmp	r3, r1
 8015e7c:	da05      	bge.n	8015e8a <get_next_item+0x30>
 8015e7e:	6812      	ldr	r2, [r2, #0]
 8015e80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015e84:	4770      	bx	lr
        else return NULL;
 8015e86:	2000      	movs	r0, #0
 8015e88:	4770      	bx	lr
        else return NULL;
 8015e8a:	2000      	movs	r0, #0
    }
}
 8015e8c:	4770      	bx	lr
	...

08015e90 <find_track_end>:
{
 8015e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e94:	b089      	sub	sp, #36	; 0x24
 8015e96:	4681      	mov	r9, r0
 8015e98:	460e      	mov	r6, r1
 8015e9a:	4690      	mov	r8, r2
 8015e9c:	9304      	str	r3, [sp, #16]
 8015e9e:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8015ea2:	9301      	str	r3, [sp, #4]
 8015ea4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	2100      	movs	r1, #0
 8015eaa:	f7f4 fc9d 	bl	800a7e8 <lv_obj_get_style_prop>
 8015eae:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8015eb0:	2204      	movs	r2, #4
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	4648      	mov	r0, r9
 8015eb6:	f7f4 fc97 	bl	800a7e8 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 8015eba:	78f3      	ldrb	r3, [r6, #3]
 8015ebc:	f013 0f02 	tst.w	r3, #2
 8015ec0:	d015      	beq.n	8015eee <find_track_end+0x5e>
 8015ec2:	f013 0f01 	tst.w	r3, #1
 8015ec6:	d009      	beq.n	8015edc <find_track_end+0x4c>
 8015ec8:	b224      	sxth	r4, r4
 8015eca:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015ece:	429c      	cmp	r4, r3
 8015ed0:	d009      	beq.n	8015ee6 <find_track_end+0x56>
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8015ed2:	4b85      	ldr	r3, [pc, #532]	; (80160e8 <find_track_end+0x258>)
 8015ed4:	9305      	str	r3, [sp, #20]
 8015ed6:	4b85      	ldr	r3, [pc, #532]	; (80160ec <find_track_end+0x25c>)
 8015ed8:	9302      	str	r3, [sp, #8]
 8015eda:	e010      	b.n	8015efe <find_track_end+0x6e>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 8015edc:	b200      	sxth	r0, r0
 8015ede:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8015ee2:	4298      	cmp	r0, r3
 8015ee4:	d107      	bne.n	8015ef6 <find_track_end+0x66>
        f->wrap = false;
 8015ee6:	78f3      	ldrb	r3, [r6, #3]
 8015ee8:	f36f 0341 	bfc	r3, #1, #1
 8015eec:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 8015eee:	78f3      	ldrb	r3, [r6, #3]
 8015ef0:	f013 0f01 	tst.w	r3, #1
 8015ef4:	d1ed      	bne.n	8015ed2 <find_track_end+0x42>
{
 8015ef6:	4b7d      	ldr	r3, [pc, #500]	; (80160ec <find_track_end+0x25c>)
 8015ef8:	9305      	str	r3, [sp, #20]
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8015efa:	4b7b      	ldr	r3, [pc, #492]	; (80160e8 <find_track_end+0x258>)
 8015efc:	9302      	str	r3, [sp, #8]
    t->track_main_size = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	806b      	strh	r3, [r5, #2]
    t->track_fix_main_size = 0;
 8015f02:	80ab      	strh	r3, [r5, #4]
    t->grow_item_cnt = 0;
 8015f04:	612b      	str	r3, [r5, #16]
    t->track_cross_size = 0;
 8015f06:	802b      	strh	r3, [r5, #0]
    t->item_cnt = 0;
 8015f08:	60ab      	str	r3, [r5, #8]
    t->grow_dsc = NULL;
 8015f0a:	60eb      	str	r3, [r5, #12]
    int32_t item_id = item_start_id;
 8015f0c:	f8cd 801c 	str.w	r8, [sp, #28]
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 8015f10:	4641      	mov	r1, r8
 8015f12:	4648      	mov	r0, r9
 8015f14:	f7f5 fbae 	bl	800b674 <lv_obj_get_child>
    while(item) {
 8015f18:	4604      	mov	r4, r0
 8015f1a:	b320      	cbz	r0, 8015f66 <find_track_end+0xd6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 8015f1c:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8015f20:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80160f0 <find_track_end+0x260>
 8015f24:	e016      	b.n	8015f54 <find_track_end+0xc4>
 8015f26:	4651      	mov	r1, sl
 8015f28:	4620      	mov	r0, r4
 8015f2a:	f7f0 fd58 	bl	80069de <lv_obj_has_flag_any>
 8015f2e:	2800      	cmp	r0, #0
 8015f30:	d030      	beq.n	8015f94 <find_track_end+0x104>
        item_id += f->rev ? -1 : +1;
 8015f32:	78f3      	ldrb	r3, [r6, #3]
 8015f34:	f013 0f04 	tst.w	r3, #4
 8015f38:	bf14      	ite	ne
 8015f3a:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8015f3e:	2101      	moveq	r1, #1
 8015f40:	9b07      	ldr	r3, [sp, #28]
 8015f42:	4419      	add	r1, r3
 8015f44:	9107      	str	r1, [sp, #28]
        if(item_id < 0) break;
 8015f46:	2900      	cmp	r1, #0
 8015f48:	db0d      	blt.n	8015f66 <find_track_end+0xd6>
        item = lv_obj_get_child(cont, item_id);
 8015f4a:	4648      	mov	r0, r9
 8015f4c:	f7f5 fb92 	bl	800b674 <lv_obj_get_child>
    while(item) {
 8015f50:	4604      	mov	r4, r0
 8015f52:	b140      	cbz	r0, 8015f66 <find_track_end+0xd6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 8015f54:	9b07      	ldr	r3, [sp, #28]
 8015f56:	4543      	cmp	r3, r8
 8015f58:	d0e5      	beq.n	8015f26 <find_track_end+0x96>
 8015f5a:	4659      	mov	r1, fp
 8015f5c:	4620      	mov	r0, r4
 8015f5e:	f7f0 fd37 	bl	80069d0 <lv_obj_has_flag>
 8015f62:	2800      	cmp	r0, #0
 8015f64:	d0df      	beq.n	8015f26 <find_track_end+0x96>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 8015f66:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	dd02      	ble.n	8015f74 <find_track_end+0xe4>
 8015f6e:	9a01      	ldr	r2, [sp, #4]
 8015f70:	1a9b      	subs	r3, r3, r2
 8015f72:	80ab      	strh	r3, [r5, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 8015f74:	692b      	ldr	r3, [r5, #16]
 8015f76:	b913      	cbnz	r3, 8015f7e <find_track_end+0xee>
 8015f78:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015f7c:	9304      	str	r3, [sp, #16]
 8015f7e:	9b04      	ldr	r3, [sp, #16]
 8015f80:	806b      	strh	r3, [r5, #2]
    if(item && item_id == item_start_id) {
 8015f82:	b11c      	cbz	r4, 8015f8c <find_track_end+0xfc>
 8015f84:	9b07      	ldr	r3, [sp, #28]
 8015f86:	4543      	cmp	r3, r8
 8015f88:	f000 8094 	beq.w	80160b4 <find_track_end+0x224>
    return item_id;
 8015f8c:	9807      	ldr	r0, [sp, #28]
}
 8015f8e:	b009      	add	sp, #36	; 0x24
 8015f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8015f94:	4b57      	ldr	r3, [pc, #348]	; (80160f4 <find_track_end+0x264>)
 8015f96:	881a      	ldrh	r2, [r3, #0]
 8015f98:	2100      	movs	r1, #0
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	f7f4 fc24 	bl	800a7e8 <lv_obj_get_style_prop>
 8015fa0:	4607      	mov	r7, r0
            if(grow_value) {
 8015fa2:	f010 0fff 	tst.w	r0, #255	; 0xff
 8015fa6:	d063      	beq.n	8016070 <find_track_end+0x1e0>
                t->grow_item_cnt++;
 8015fa8:	6928      	ldr	r0, [r5, #16]
 8015faa:	3001      	adds	r0, #1
 8015fac:	6128      	str	r0, [r5, #16]
                t->track_fix_main_size += item_gap;
 8015fae:	88ab      	ldrh	r3, [r5, #4]
 8015fb0:	9a01      	ldr	r2, [sp, #4]
 8015fb2:	4413      	add	r3, r2
 8015fb4:	80ab      	strh	r3, [r5, #4]
                if(t->grow_dsc_calc) {
 8015fb6:	7d2b      	ldrb	r3, [r5, #20]
 8015fb8:	f013 0f01 	tst.w	r3, #1
 8015fbc:	d06b      	beq.n	8016096 <find_track_end+0x206>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 8015fbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015fc2:	0080      	lsls	r0, r0, #2
 8015fc4:	f00b fca2 	bl	802190c <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 8015fc8:	9003      	str	r0, [sp, #12]
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	d04f      	beq.n	801606e <find_track_end+0x1de>
                    if(t->grow_dsc) {
 8015fce:	68e9      	ldr	r1, [r5, #12]
 8015fd0:	b151      	cbz	r1, 8015fe8 <find_track_end+0x158>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 8015fd2:	692b      	ldr	r3, [r5, #16]
 8015fd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015fd8:	009a      	lsls	r2, r3, #2
 8015fda:	3a14      	subs	r2, #20
 8015fdc:	9803      	ldr	r0, [sp, #12]
 8015fde:	f00b fd2d 	bl	8021a3c <lv_memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 8015fe2:	68e8      	ldr	r0, [r5, #12]
 8015fe4:	f00b fcf4 	bl	80219d0 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 8015fe8:	692b      	ldr	r3, [r5, #16]
 8015fea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015fee:	9a03      	ldr	r2, [sp, #12]
 8015ff0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015ff4:	f843 4c14 	str.w	r4, [r3, #-20]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 8015ff8:	78f3      	ldrb	r3, [r6, #3]
 8015ffa:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8015ffe:	bf14      	ite	ne
 8016000:	2202      	movne	r2, #2
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8016002:	2205      	moveq	r2, #5
 8016004:	2100      	movs	r1, #0
 8016006:	4620      	mov	r0, r4
 8016008:	f7f4 fbee 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801600c:	b200      	sxth	r0, r0
 801600e:	692b      	ldr	r3, [r5, #16]
 8016010:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016014:	9a03      	ldr	r2, [sp, #12]
 8016016:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801601a:	f823 0c10 	strh.w	r0, [r3, #-16]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 801601e:	78f3      	ldrb	r3, [r6, #3]
 8016020:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8016024:	bf14      	ite	ne
 8016026:	2203      	movne	r2, #3
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8016028:	2206      	moveq	r2, #6
 801602a:	2100      	movs	r1, #0
 801602c:	4620      	mov	r0, r4
 801602e:	f7f4 fbdb 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016032:	b200      	sxth	r0, r0
 8016034:	692b      	ldr	r3, [r5, #16]
 8016036:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801603a:	9903      	ldr	r1, [sp, #12]
 801603c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016040:	f823 0c0e 	strh.w	r0, [r3, #-14]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 8016044:	692b      	ldr	r3, [r5, #16]
 8016046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801604a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801604e:	b2ff      	uxtb	r7, r7
 8016050:	f843 7c08 	str.w	r7, [r3, #-8]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8016054:	692b      	ldr	r3, [r5, #16]
 8016056:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801605a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801605e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8016062:	f36f 0200 	bfc	r2, #0, #1
 8016066:	f803 2c04 	strb.w	r2, [r3, #-4]
                    t->grow_dsc = new_dsc;
 801606a:	60e9      	str	r1, [r5, #12]
 801606c:	e013      	b.n	8016096 <find_track_end+0x206>
                    LV_ASSERT_MALLOC(new_dsc);
 801606e:	e7fe      	b.n	801606e <find_track_end+0x1de>
                lv_coord_t item_size = get_main_size(item);
 8016070:	4620      	mov	r0, r4
 8016072:	9b05      	ldr	r3, [sp, #20]
 8016074:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 8016076:	78f3      	ldrb	r3, [r6, #3]
 8016078:	f013 0f02 	tst.w	r3, #2
 801607c:	d006      	beq.n	801608c <find_track_end+0x1fc>
 801607e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016082:	4403      	add	r3, r0
 8016084:	9a04      	ldr	r2, [sp, #16]
 8016086:	4293      	cmp	r3, r2
 8016088:	f73f af6d 	bgt.w	8015f66 <find_track_end+0xd6>
                t->track_fix_main_size += item_size + item_gap;
 801608c:	88ab      	ldrh	r3, [r5, #4]
 801608e:	9a01      	ldr	r2, [sp, #4]
 8016090:	4413      	add	r3, r2
 8016092:	4418      	add	r0, r3
 8016094:	80a8      	strh	r0, [r5, #4]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 8016096:	4620      	mov	r0, r4
 8016098:	9f02      	ldr	r7, [sp, #8]
 801609a:	47b8      	blx	r7
 801609c:	f9b5 3000 	ldrsh.w	r3, [r5]
 80160a0:	4298      	cmp	r0, r3
 80160a2:	dd02      	ble.n	80160aa <find_track_end+0x21a>
 80160a4:	4620      	mov	r0, r4
 80160a6:	47b8      	blx	r7
 80160a8:	4603      	mov	r3, r0
 80160aa:	802b      	strh	r3, [r5, #0]
            t->item_cnt++;
 80160ac:	68ab      	ldr	r3, [r5, #8]
 80160ae:	3301      	adds	r3, #1
 80160b0:	60ab      	str	r3, [r5, #8]
 80160b2:	e73e      	b.n	8015f32 <find_track_end+0xa2>
        item = cont->spec_attr->children[item_id];
 80160b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 80160be:	78f1      	ldrb	r1, [r6, #3]
 80160c0:	aa07      	add	r2, sp, #28
 80160c2:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80160c6:	4648      	mov	r0, r9
 80160c8:	f7ff fec7 	bl	8015e5a <get_next_item>
        if(item) {
 80160cc:	2c00      	cmp	r4, #0
 80160ce:	f43f af5d 	beq.w	8015f8c <find_track_end+0xfc>
            t->track_cross_size = get_cross_size(item);
 80160d2:	4620      	mov	r0, r4
 80160d4:	9b02      	ldr	r3, [sp, #8]
 80160d6:	4798      	blx	r3
 80160d8:	8028      	strh	r0, [r5, #0]
            t->track_main_size = get_main_size(item);
 80160da:	4620      	mov	r0, r4
 80160dc:	9b05      	ldr	r3, [sp, #20]
 80160de:	4798      	blx	r3
 80160e0:	8068      	strh	r0, [r5, #2]
            t->item_cnt = 1;
 80160e2:	2301      	movs	r3, #1
 80160e4:	60ab      	str	r3, [r5, #8]
 80160e6:	e751      	b.n	8015f8c <find_track_end+0xfc>
 80160e8:	08007aeb 	.word	0x08007aeb
 80160ec:	08007af7 	.word	0x08007af7
 80160f0:	00060001 	.word	0x00060001
 80160f4:	20002680 	.word	0x20002680

080160f8 <flex_update>:
{
 80160f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160fc:	b0a1      	sub	sp, #132	; 0x84
 80160fe:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 8016100:	4bb5      	ldr	r3, [pc, #724]	; (80163d8 <flex_update+0x2e0>)
 8016102:	881a      	ldrh	r2, [r3, #0]
 8016104:	2100      	movs	r1, #0
 8016106:	f7f4 fb6f 	bl	800a7e8 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 801610a:	f080 0201 	eor.w	r2, r0, #1
 801610e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016112:	f362 0300 	bfi	r3, r2, #0, #1
    f.wrap = flow & _LV_FLEX_WRAP ? 1 : 0;
 8016116:	f3c0 0285 	ubfx	r2, r0, #2, #6
 801611a:	f362 0341 	bfi	r3, r2, #1, #1
    f.rev = flow & _LV_FLEX_REVERSE ? 1 : 0;
 801611e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8016122:	f360 0382 	bfi	r3, r0, #2, #1
 8016126:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 801612a:	4bac      	ldr	r3, [pc, #688]	; (80163dc <flex_update+0x2e4>)
 801612c:	881a      	ldrh	r2, [r3, #0]
 801612e:	2100      	movs	r1, #0
 8016130:	4630      	mov	r0, r6
 8016132:	f7f4 fb59 	bl	800a7e8 <lv_obj_get_style_prop>
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 8016136:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 801613a:	4ba9      	ldr	r3, [pc, #676]	; (80163e0 <flex_update+0x2e8>)
 801613c:	881a      	ldrh	r2, [r3, #0]
 801613e:	2100      	movs	r1, #0
 8016140:	4630      	mov	r0, r6
 8016142:	f7f4 fb51 	bl	800a7e8 <lv_obj_get_style_prop>
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 8016146:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 801614a:	4ba6      	ldr	r3, [pc, #664]	; (80163e4 <flex_update+0x2ec>)
 801614c:	881a      	ldrh	r2, [r3, #0]
 801614e:	2100      	movs	r1, #0
 8016150:	4630      	mov	r0, r6
 8016152:	f7f4 fb49 	bl	800a7e8 <lv_obj_get_style_prop>
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 8016156:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801615a:	2216      	movs	r2, #22
 801615c:	2100      	movs	r1, #0
 801615e:	4630      	mov	r0, r6
 8016160:	f7f4 fb42 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8016164:	b2c3      	uxtb	r3, r0
 8016166:	9303      	str	r3, [sp, #12]
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8016168:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801616c:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8016170:	bf0c      	ite	eq
 8016172:	2215      	moveq	r2, #21
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016174:	2214      	movne	r2, #20
 8016176:	2100      	movs	r1, #0
 8016178:	4630      	mov	r0, r6
 801617a:	f7f4 fb35 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801617e:	b203      	sxth	r3, r0
 8016180:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8016182:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016186:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801618a:	bf14      	ite	ne
 801618c:	2215      	movne	r2, #21
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801618e:	2214      	moveq	r2, #20
 8016190:	2100      	movs	r1, #0
 8016192:	4630      	mov	r0, r6
 8016194:	f7f4 fb28 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016198:	b203      	sxth	r3, r0
 801619a:	9304      	str	r3, [sp, #16]
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 801619c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80161a0:	f013 0f01 	tst.w	r3, #1
 80161a4:	d05f      	beq.n	8016266 <flex_update+0x16e>
 80161a6:	4630      	mov	r0, r6
 80161a8:	f7f1 fcab 	bl	8007b02 <lv_obj_get_content_width>
 80161ac:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80161ae:	2232      	movs	r2, #50	; 0x32
 80161b0:	2100      	movs	r1, #0
 80161b2:	4630      	mov	r0, r6
 80161b4:	f7f4 fb18 	bl	800a7e8 <lv_obj_get_style_prop>
 80161b8:	4604      	mov	r4, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 80161ba:	8af5      	ldrh	r5, [r6, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80161bc:	2210      	movs	r2, #16
 80161be:	2100      	movs	r1, #0
 80161c0:	4630      	mov	r0, r6
 80161c2:	f7f4 fb11 	bl	800a7e8 <lv_obj_get_style_prop>
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 80161c6:	b2a4      	uxth	r4, r4
 80161c8:	1823      	adds	r3, r4, r0
 80161ca:	441d      	add	r5, r3
 80161cc:	b2ad      	uxth	r5, r5
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7f3 f874 	bl	80092bc <lv_obj_get_scroll_y>
 80161d4:	1a2d      	subs	r5, r5, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 80161d6:	f8ad 507a 	strh.w	r5, [sp, #122]	; 0x7a
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 80161da:	8ab5      	ldrh	r5, [r6, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80161dc:	2212      	movs	r2, #18
 80161de:	2100      	movs	r1, #0
 80161e0:	4630      	mov	r0, r6
 80161e2:	f7f4 fb01 	bl	800a7e8 <lv_obj_get_style_prop>
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 80161e6:	4404      	add	r4, r0
 80161e8:	442c      	add	r4, r5
 80161ea:	b2a4      	uxth	r4, r4
 80161ec:	4630      	mov	r0, r6
 80161ee:	f7f3 f85d 	bl	80092ac <lv_obj_get_scroll_x>
 80161f2:	1a24      	subs	r4, r4, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 80161f4:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    lv_flex_align_t track_cross_place = f.track_place;
 80161f8:	f89d 707e 	ldrb.w	r7, [sp, #126]	; 0x7e
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 80161fc:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016200:	f013 0f01 	tst.w	r3, #1
 8016204:	bf0c      	ite	eq
 8016206:	ab1e      	addeq	r3, sp, #120	; 0x78
 8016208:	f10d 037a 	addne.w	r3, sp, #122	; 0x7a
 801620c:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801620e:	2201      	movs	r2, #1
 8016210:	2100      	movs	r1, #0
 8016212:	4630      	mov	r0, r6
 8016214:	f7f4 fae8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016218:	b203      	sxth	r3, r0
 801621a:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801621c:	2204      	movs	r2, #4
 801621e:	2100      	movs	r1, #0
 8016220:	4630      	mov	r0, r6
 8016222:	f7f4 fae1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016226:	b203      	sxth	r3, r0
 8016228:	4618      	mov	r0, r3
 801622a:	930d      	str	r3, [sp, #52]	; 0x34
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 801622c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016230:	f013 0201 	ands.w	r2, r3, #1
 8016234:	d02e      	beq.n	8016294 <flex_update+0x19c>
 8016236:	f242 71d1 	movw	r1, #10193	; 0x27d1
 801623a:	4288      	cmp	r0, r1
 801623c:	d018      	beq.n	8016270 <flex_update+0x178>
    lv_coord_t gap = 0;
 801623e:	2200      	movs	r2, #0
 8016240:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 8016244:	2f00      	cmp	r7, #0
 8016246:	d05e      	beq.n	8016306 <flex_update+0x20e>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8016248:	f013 0f04 	tst.w	r3, #4
 801624c:	f000 82ba 	beq.w	80167c4 <flex_update+0x6cc>
 8016250:	68b3      	ldr	r3, [r6, #8]
 8016252:	685b      	ldr	r3, [r3, #4]
 8016254:	1e5a      	subs	r2, r3, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016256:	429a      	cmp	r2, r3
 8016258:	da4d      	bge.n	80162f6 <flex_update+0x1fe>
 801625a:	2a00      	cmp	r2, #0
 801625c:	f280 82b9 	bge.w	80167d2 <flex_update+0x6da>
 8016260:	2500      	movs	r5, #0
 8016262:	462c      	mov	r4, r5
 8016264:	e2df      	b.n	8016826 <flex_update+0x72e>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 8016266:	4630      	mov	r0, r6
 8016268:	f7f1 fc68 	bl	8007b3c <lv_obj_get_content_height>
 801626c:	9005      	str	r0, [sp, #20]
 801626e:	e79e      	b.n	80161ae <flex_update+0xb6>
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 8016270:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 8016274:	f011 0f02 	tst.w	r1, #2
 8016278:	d1e1      	bne.n	801623e <flex_update+0x146>
    if(rtl && !f.row) {
 801627a:	9903      	ldr	r1, [sp, #12]
 801627c:	2901      	cmp	r1, #1
 801627e:	d01d      	beq.n	80162bc <flex_update+0x1c4>
    lv_coord_t gap = 0;
 8016280:	2300      	movs	r3, #0
 8016282:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8016286:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801628a:	f013 0f04 	tst.w	r3, #4
 801628e:	d13e      	bne.n	801630e <flex_update+0x216>
 8016290:	2700      	movs	r7, #0
 8016292:	e2e9      	b.n	8016868 <flex_update+0x770>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 8016294:	f242 71d1 	movw	r1, #10193	; 0x27d1
 8016298:	980a      	ldr	r0, [sp, #40]	; 0x28
 801629a:	4288      	cmp	r0, r1
 801629c:	d008      	beq.n	80162b0 <flex_update+0x1b8>
    if(rtl && !f.row) {
 801629e:	9a03      	ldr	r2, [sp, #12]
 80162a0:	2a01      	cmp	r2, #1
 80162a2:	d1cc      	bne.n	801623e <flex_update+0x146>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 80162a4:	b987      	cbnz	r7, 80162c8 <flex_update+0x1d0>
    lv_coord_t gap = 0;
 80162a6:	2200      	movs	r2, #0
 80162a8:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 80162ac:	2701      	movs	r7, #1
 80162ae:	e7cb      	b.n	8016248 <flex_update+0x150>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 80162b0:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 80162b4:	f011 0f04 	tst.w	r1, #4
 80162b8:	d0df      	beq.n	801627a <flex_update+0x182>
 80162ba:	e7f0      	b.n	801629e <flex_update+0x1a6>
    if(rtl && !f.row) {
 80162bc:	2a00      	cmp	r2, #0
 80162be:	d0f2      	beq.n	80162a6 <flex_update+0x1ae>
    lv_coord_t gap = 0;
 80162c0:	2400      	movs	r4, #0
 80162c2:	f8ad 4076 	strh.w	r4, [sp, #118]	; 0x76
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 80162c6:	e2c2      	b.n	801684e <flex_update+0x756>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 80162c8:	2f01      	cmp	r7, #1
 80162ca:	d003      	beq.n	80162d4 <flex_update+0x1dc>
    lv_coord_t gap = 0;
 80162cc:	2200      	movs	r2, #0
 80162ce:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 80162d2:	e7b9      	b.n	8016248 <flex_update+0x150>
    lv_coord_t gap = 0;
 80162d4:	2200      	movs	r2, #0
 80162d6:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80162da:	f013 0f04 	tst.w	r3, #4
 80162de:	d114      	bne.n	801630a <flex_update+0x212>
 80162e0:	4617      	mov	r7, r2
    lv_coord_t total_track_cross_size = 0;
 80162e2:	4614      	mov	r4, r2
    if(rtl && !f.row) {
 80162e4:	f013 0f01 	tst.w	r3, #1
 80162e8:	f040 82be 	bne.w	8016868 <flex_update+0x770>
        *cross_pos += total_track_cross_size;
 80162ec:	9a06      	ldr	r2, [sp, #24]
 80162ee:	8813      	ldrh	r3, [r2, #0]
 80162f0:	441c      	add	r4, r3
 80162f2:	8014      	strh	r4, [r2, #0]
 80162f4:	e2b8      	b.n	8016868 <flex_update+0x770>
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 80162f6:	2500      	movs	r5, #0
 80162f8:	462c      	mov	r4, r5
 80162fa:	e294      	b.n	8016826 <flex_update+0x72e>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 80162fc:	4630      	mov	r0, r6
 80162fe:	f7f1 fc00 	bl	8007b02 <lv_obj_get_content_width>
 8016302:	4601      	mov	r1, r0
 8016304:	e299      	b.n	801683a <flex_update+0x742>
    lv_coord_t total_track_cross_size = 0;
 8016306:	2400      	movs	r4, #0
 8016308:	e2a1      	b.n	801684e <flex_update+0x756>
 801630a:	2400      	movs	r4, #0
 801630c:	e2a5      	b.n	801685a <flex_update+0x762>
 801630e:	2400      	movs	r4, #0
 8016310:	e2a3      	b.n	801685a <flex_update+0x762>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8016312:	2700      	movs	r7, #0
 8016314:	e2a4      	b.n	8016860 <flex_update+0x768>
        if(rtl && !f.row) {
 8016316:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801631a:	f013 0f01 	tst.w	r3, #1
 801631e:	f040 8244 	bne.w	80167aa <flex_update+0x6b2>
            *cross_pos -= t.track_cross_size;
 8016322:	9906      	ldr	r1, [sp, #24]
 8016324:	880b      	ldrh	r3, [r1, #0]
 8016326:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801632a:	1a9b      	subs	r3, r3, r2
 801632c:	800b      	strh	r3, [r1, #0]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 801632e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8016332:	9307      	str	r3, [sp, #28]
 8016334:	f9bd 907a 	ldrsh.w	r9, [sp, #122]	; 0x7a
 8016338:	9714      	str	r7, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 801633a:	e2bb      	b.n	80168b4 <flex_update+0x7bc>
                grow_max_size -= t->grow_dsc[i].final_size;
 801633c:	8918      	ldrh	r0, [r3, #8]
 801633e:	1a09      	subs	r1, r1, r0
 8016340:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 8016342:	3314      	adds	r3, #20
 8016344:	42a3      	cmp	r3, r4
 8016346:	d007      	beq.n	8016358 <flex_update+0x260>
            if(t->grow_dsc[i].clamped == 0) {
 8016348:	7c18      	ldrb	r0, [r3, #16]
 801634a:	f010 0f01 	tst.w	r0, #1
 801634e:	d1f5      	bne.n	801633c <flex_update+0x244>
                grow_value_sum += t->grow_dsc[i].grow_value;
 8016350:	68d8      	ldr	r0, [r3, #12]
 8016352:	4402      	add	r2, r0
 8016354:	b212      	sxth	r2, r2
 8016356:	e7f4      	b.n	8016342 <flex_update+0x24a>
 8016358:	2000      	movs	r0, #0
 801635a:	4607      	mov	r7, r0
 801635c:	4605      	mov	r5, r0
 801635e:	e014      	b.n	801638a <flex_update+0x292>
                LV_ASSERT(grow_value_sum != 0);
 8016360:	e7fe      	b.n	8016360 <flex_update+0x268>
                    t->grow_dsc[i].clamped = 1;
 8016362:	7c1c      	ldrb	r4, [r3, #16]
 8016364:	f044 0401 	orr.w	r4, r4, #1
 8016368:	741c      	strb	r4, [r3, #16]
                    grow_reiterate = true;
 801636a:	2701      	movs	r7, #1
                t->grow_dsc[i].final_size = size_clamp;
 801636c:	f8a3 e008 	strh.w	lr, [r3, #8]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 8016370:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016372:	4403      	add	r3, r0
 8016374:	68dc      	ldr	r4, [r3, #12]
 8016376:	1b12      	subs	r2, r2, r4
 8016378:	b212      	sxth	r2, r2
                grow_max_size  -= t->grow_dsc[i].final_size;
 801637a:	891b      	ldrh	r3, [r3, #8]
 801637c:	1ac9      	subs	r1, r1, r3
 801637e:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 8016380:	3501      	adds	r5, #1
 8016382:	3014      	adds	r0, #20
 8016384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016386:	429d      	cmp	r5, r3
 8016388:	d21a      	bcs.n	80163c0 <flex_update+0x2c8>
            if(t->grow_dsc[i].clamped == 0) {
 801638a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801638c:	4403      	add	r3, r0
 801638e:	7c1c      	ldrb	r4, [r3, #16]
 8016390:	f014 0f01 	tst.w	r4, #1
 8016394:	d1f4      	bne.n	8016380 <flex_update+0x288>
                LV_ASSERT(grow_value_sum != 0);
 8016396:	2a00      	cmp	r2, #0
 8016398:	d0e2      	beq.n	8016360 <flex_update+0x268>
                grow_unit = grow_max_size / grow_value_sum;
 801639a:	fb91 fef2 	sdiv	lr, r1, r2
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 801639e:	68dc      	ldr	r4, [r3, #12]
 80163a0:	fb0e f404 	mul.w	r4, lr, r4
 80163a4:	b224      	sxth	r4, r4
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 80163a6:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 80163aa:	45a6      	cmp	lr, r4
 80163ac:	bfa8      	it	ge
 80163ae:	46a6      	movge	lr, r4
 80163b0:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 80163b4:	45c6      	cmp	lr, r8
 80163b6:	bfb8      	it	lt
 80163b8:	46c6      	movlt	lr, r8
                if(size_clamp != size) {
 80163ba:	4574      	cmp	r4, lr
 80163bc:	d1d1      	bne.n	8016362 <flex_update+0x26a>
 80163be:	e7d5      	b.n	801636c <flex_update+0x274>
    while(grow_reiterate) {
 80163c0:	b197      	cbz	r7, 80163e8 <flex_update+0x2f0>
        for(i = 0; i < t->grow_item_cnt; i++) {
 80163c2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80163c4:	b184      	cbz	r4, 80163e8 <flex_update+0x2f0>
 80163c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80163c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80163cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 80163d0:	4661      	mov	r1, ip
        lv_coord_t grow_value_sum = 0;
 80163d2:	4652      	mov	r2, sl
 80163d4:	e7b8      	b.n	8016348 <flex_update+0x250>
 80163d6:	bf00      	nop
 80163d8:	2000267e 	.word	0x2000267e
 80163dc:	20002682 	.word	0x20002682
 80163e0:	2000267c 	.word	0x2000267c
 80163e4:	20002684 	.word	0x20002684
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80163e8:	2216      	movs	r2, #22
 80163ea:	2100      	movs	r1, #0
 80163ec:	4630      	mov	r0, r6
 80163ee:	f7f4 f9fb 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80163f2:	b2c3      	uxtb	r3, r0
 80163f4:	461c      	mov	r4, r3
 80163f6:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t main_pos = 0;
 80163f8:	2300      	movs	r3, #0
 80163fa:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    lv_coord_t place_gap = 0;
 80163fe:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 8016402:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 8016406:	9301      	str	r3, [sp, #4]
 8016408:	ab13      	add	r3, sp, #76	; 0x4c
 801640a:	9300      	str	r3, [sp, #0]
 801640c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8016410:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 8016414:	9905      	ldr	r1, [sp, #20]
 8016416:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
 801641a:	f7ff fccf 	bl	8015dbc <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 801641e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016422:	f013 0f01 	tst.w	r3, #1
 8016426:	d001      	beq.n	801642c <flex_update+0x334>
 8016428:	2c01      	cmp	r4, #1
 801642a:	d00c      	beq.n	8016446 <flex_update+0x34e>
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 801642c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801642e:	4630      	mov	r0, r6
 8016430:	f7f5 f920 	bl	800b674 <lv_obj_get_child>
    while(item && item_first_id != item_last_id) {
 8016434:	4604      	mov	r4, r0
 8016436:	2800      	cmp	r0, #0
 8016438:	f000 8179 	beq.w	801672e <flex_update+0x636>
 801643c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8016440:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8016444:	e0f5      	b.n	8016632 <flex_update+0x53a>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 8016446:	4630      	mov	r0, r6
 8016448:	f7f1 fb5b 	bl	8007b02 <lv_obj_get_content_width>
 801644c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016450:	4403      	add	r3, r0
 8016452:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8016456:	e7e9      	b.n	801642c <flex_update+0x334>
            item = get_next_item(cont, f->rev, &item_first_id);
 8016458:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
 801645c:	aa14      	add	r2, sp, #80	; 0x50
 801645e:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8016462:	4630      	mov	r0, r6
 8016464:	f7ff fcf9 	bl	8015e5a <get_next_item>
 8016468:	4604      	mov	r4, r0
            continue;
 801646a:	e0e0      	b.n	801662e <flex_update+0x536>
            for(i = 0; i < t->grow_item_cnt; i++) {
 801646c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801646e:	2800      	cmp	r0, #0
 8016470:	d04c      	beq.n	801650c <flex_update+0x414>
                if(t->grow_dsc[i].item == item) {
 8016472:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016474:	462a      	mov	r2, r5
 8016476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801647a:	2300      	movs	r3, #0
 801647c:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8016480:	42a1      	cmp	r1, r4
 8016482:	d005      	beq.n	8016490 <flex_update+0x398>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8016484:	3214      	adds	r2, #20
 8016486:	3305      	adds	r3, #5
 8016488:	4298      	cmp	r0, r3
 801648a:	d1f7      	bne.n	801647c <flex_update+0x384>
            lv_coord_t s = 0;
 801648c:	2700      	movs	r7, #0
 801648e:	e001      	b.n	8016494 <flex_update+0x39c>
                    s = t->grow_dsc[i].final_size;
 8016490:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
            if(f->row) {
 8016494:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016498:	f013 0f01 	tst.w	r3, #1
                item->w_layout = 1;
 801649c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
                item->h_layout = 0;
 80164a0:	bf19      	ittee	ne
 80164a2:	f043 0304 	orrne.w	r3, r3, #4
 80164a6:	f36f 0341 	bfcne	r3, #1, #1
                item->w_layout = 0;
 80164aa:	f043 0302 	orreq.w	r3, r3, #2
 80164ae:	f36f 0382 	bfceq	r3, #2, #1
 80164b2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 80164b6:	f104 0514 	add.w	r5, r4, #20
 80164ba:	4628      	mov	r0, r5
 80164bc:	9b08      	ldr	r3, [sp, #32]
 80164be:	4798      	blx	r3
 80164c0:	42b8      	cmp	r0, r7
 80164c2:	f000 80d2 	beq.w	801666a <flex_update+0x572>
                lv_obj_invalidate(item);
 80164c6:	4620      	mov	r0, r4
 80164c8:	f7f1 fd56 	bl	8007f78 <lv_obj_invalidate>
    dest->x1 = src->x1;
 80164cc:	8aa3      	ldrh	r3, [r4, #20]
 80164ce:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    dest->y1 = src->y1;
 80164d2:	8ae3      	ldrh	r3, [r4, #22]
 80164d4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    dest->x2 = src->x2;
 80164d8:	8b23      	ldrh	r3, [r4, #24]
 80164da:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    dest->y2 = src->y2;
 80164de:	8b63      	ldrh	r3, [r4, #26]
 80164e0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
                area_set_main_size(&item->coords, s);
 80164e4:	4639      	mov	r1, r7
 80164e6:	4628      	mov	r0, r5
 80164e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164ea:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 80164ec:	aa15      	add	r2, sp, #84	; 0x54
 80164ee:	2129      	movs	r1, #41	; 0x29
 80164f0:	4620      	mov	r0, r4
 80164f2:	f7ed fc05 	bl	8003d00 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 80164f6:	4620      	mov	r0, r4
 80164f8:	f7f5 f8b8 	bl	800b66c <lv_obj_get_parent>
 80164fc:	4622      	mov	r2, r4
 80164fe:	2122      	movs	r1, #34	; 0x22
 8016500:	f7ed fbfe 	bl	8003d00 <lv_event_send>
                lv_obj_invalidate(item);
 8016504:	4620      	mov	r0, r4
 8016506:	f7f1 fd37 	bl	8007f78 <lv_obj_invalidate>
 801650a:	e0ae      	b.n	801666a <flex_update+0x572>
            lv_coord_t s = 0;
 801650c:	2700      	movs	r7, #0
 801650e:	e7c1      	b.n	8016494 <flex_update+0x39c>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 8016510:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8016514:	f104 0014 	add.w	r0, r4, #20
 8016518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801651a:	4798      	blx	r3
 801651c:	1a2d      	subs	r5, r5, r0
 801651e:	b22d      	sxth	r5, r5
                break;
 8016520:	e000      	b.n	8016524 <flex_update+0x42c>
        switch(f->cross_place) {
 8016522:	2500      	movs	r5, #0
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8016524:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016528:	f013 0f01 	tst.w	r3, #1
 801652c:	d003      	beq.n	8016536 <flex_update+0x43e>
 801652e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016530:	2b01      	cmp	r3, #1
 8016532:	f000 80b1 	beq.w	8016698 <flex_update+0x5a0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8016536:	226a      	movs	r2, #106	; 0x6a
 8016538:	2100      	movs	r1, #0
 801653a:	4620      	mov	r0, r4
 801653c:	f7f4 f954 	bl	800a7e8 <lv_obj_get_style_prop>
 8016540:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8016542:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8016546:	226b      	movs	r2, #107	; 0x6b
 8016548:	2100      	movs	r1, #0
 801654a:	4620      	mov	r0, r4
 801654c:	f7f4 f94c 	bl	800a7e8 <lv_obj_get_style_prop>
 8016550:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 8016552:	fa0f fa80 	sxth.w	sl, r0
        lv_coord_t w = lv_obj_get_width(item);
 8016556:	4620      	mov	r0, r4
 8016558:	f7f1 fac7 	bl	8007aea <lv_obj_get_width>
 801655c:	900f      	str	r0, [sp, #60]	; 0x3c
        lv_coord_t h = lv_obj_get_height(item);
 801655e:	4620      	mov	r0, r4
 8016560:	f7f1 fac9 	bl	8007af6 <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8016564:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 8016568:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 801656c:	f000 809e 	beq.w	80166ac <flex_update+0x5b4>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8016570:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 8016574:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8016578:	f000 80b1 	beq.w	80166de <flex_update+0x5e6>
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 801657c:	8aa3      	ldrh	r3, [r4, #20]
 801657e:	9a07      	ldr	r2, [sp, #28]
 8016580:	1ad3      	subs	r3, r2, r3
 8016582:	449b      	add	fp, r3
 8016584:	fa1f fb8b 	uxth.w	fp, fp
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 8016588:	8ae3      	ldrh	r3, [r4, #22]
 801658a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801658c:	1ad3      	subs	r3, r2, r3
 801658e:	449a      	add	sl, r3
 8016590:	fa1f fa8a 	uxth.w	sl, sl
        diff_x += f->row ? main_pos : cross_pos;
 8016594:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016598:	f013 0f01 	tst.w	r3, #1
 801659c:	f000 80b5 	beq.w	801670a <flex_update+0x612>
 80165a0:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 80165a4:	44bb      	add	fp, r7
 80165a6:	fa1f f88b 	uxth.w	r8, fp
 80165aa:	fa0f fb8b 	sxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 80165ae:	b2ad      	uxth	r5, r5
 80165b0:	4455      	add	r5, sl
 80165b2:	b2ad      	uxth	r5, r5
        if(diff_x || diff_y) {
 80165b4:	fa1f f38b 	uxth.w	r3, fp
 80165b8:	432b      	orrs	r3, r5
 80165ba:	d018      	beq.n	80165ee <flex_update+0x4f6>
            lv_obj_invalidate(item);
 80165bc:	4620      	mov	r0, r4
 80165be:	f7f1 fcdb 	bl	8007f78 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 80165c2:	8aa3      	ldrh	r3, [r4, #20]
 80165c4:	4443      	add	r3, r8
 80165c6:	82a3      	strh	r3, [r4, #20]
            item->coords.x2 += diff_x;
 80165c8:	8b23      	ldrh	r3, [r4, #24]
 80165ca:	4498      	add	r8, r3
 80165cc:	f8a4 8018 	strh.w	r8, [r4, #24]
            item->coords.y1 += diff_y;
 80165d0:	8ae3      	ldrh	r3, [r4, #22]
 80165d2:	442b      	add	r3, r5
 80165d4:	82e3      	strh	r3, [r4, #22]
            item->coords.y2 += diff_y;
 80165d6:	8b63      	ldrh	r3, [r4, #26]
 80165d8:	442b      	add	r3, r5
 80165da:	8363      	strh	r3, [r4, #26]
            lv_obj_invalidate(item);
 80165dc:	4620      	mov	r0, r4
 80165de:	f7f1 fccb 	bl	8007f78 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 80165e2:	2300      	movs	r3, #0
 80165e4:	b22a      	sxth	r2, r5
 80165e6:	4659      	mov	r1, fp
 80165e8:	4620      	mov	r0, r4
 80165ea:	f7f1 fb35 	bl	8007c58 <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 80165ee:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80165f2:	f013 0f01 	tst.w	r3, #1
 80165f6:	d003      	beq.n	8016600 <flex_update+0x508>
 80165f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165fa:	2b01      	cmp	r3, #1
 80165fc:	f000 808d 	beq.w	801671a <flex_update+0x622>
 8016600:	f104 0014 	add.w	r0, r4, #20
 8016604:	9b08      	ldr	r3, [sp, #32]
 8016606:	4798      	blx	r3
 8016608:	9b04      	ldr	r3, [sp, #16]
 801660a:	18c3      	adds	r3, r0, r3
 801660c:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8016610:	4413      	add	r3, r2
 8016612:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8016616:	4413      	add	r3, r2
 8016618:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        item = get_next_item(cont, f->rev, &item_first_id);
 801661c:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
 8016620:	aa14      	add	r2, sp, #80	; 0x50
 8016622:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8016626:	4630      	mov	r0, r6
 8016628:	f7ff fc17 	bl	8015e5a <get_next_item>
 801662c:	4604      	mov	r4, r0
    while(item && item_first_id != item_last_id) {
 801662e:	2c00      	cmp	r4, #0
 8016630:	d07d      	beq.n	801672e <flex_update+0x636>
 8016632:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016634:	4599      	cmp	r9, r3
 8016636:	d07a      	beq.n	801672e <flex_update+0x636>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8016638:	49a8      	ldr	r1, [pc, #672]	; (80168dc <flex_update+0x7e4>)
 801663a:	4620      	mov	r0, r4
 801663c:	f7f0 f9cf 	bl	80069de <lv_obj_has_flag_any>
 8016640:	2800      	cmp	r0, #0
 8016642:	f47f af09 	bne.w	8016458 <flex_update+0x360>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8016646:	4ba6      	ldr	r3, [pc, #664]	; (80168e0 <flex_update+0x7e8>)
 8016648:	881a      	ldrh	r2, [r3, #0]
 801664a:	2100      	movs	r1, #0
 801664c:	4620      	mov	r0, r4
 801664e:	f7f4 f8cb 	bl	800a7e8 <lv_obj_get_style_prop>
        if(grow_size) {
 8016652:	f010 0fff 	tst.w	r0, #255	; 0xff
 8016656:	f47f af09 	bne.w	801646c <flex_update+0x374>
            item->w_layout = 0;
 801665a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            item->h_layout = 0;
 801665e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8016662:	f36f 0341 	bfc	r3, #1, #1
 8016666:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
        switch(f->cross_place) {
 801666a:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 801666e:	2b01      	cmp	r3, #1
 8016670:	f43f af4e 	beq.w	8016510 <flex_update+0x418>
 8016674:	2b02      	cmp	r3, #2
 8016676:	f47f af54 	bne.w	8016522 <flex_update+0x42a>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 801667a:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
 801667e:	3501      	adds	r5, #1
 8016680:	f025 0501 	bic.w	r5, r5, #1
 8016684:	f104 0014 	add.w	r0, r4, #20
 8016688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801668a:	4798      	blx	r3
 801668c:	1a2d      	subs	r5, r5, r0
 801668e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016692:	f345 054f 	sbfx	r5, r5, #1, #16
                break;
 8016696:	e745      	b.n	8016524 <flex_update+0x42c>
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8016698:	f104 0014 	add.w	r0, r4, #20
 801669c:	9b08      	ldr	r3, [sp, #32]
 801669e:	4798      	blx	r3
 80166a0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80166a4:	1a1b      	subs	r3, r3, r0
 80166a6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80166aa:	e744      	b.n	8016536 <flex_update+0x43e>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80166ac:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 80166b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80166b4:	f73f af5c 	bgt.w	8016570 <flex_update+0x478>
 80166b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80166bc:	bfc8      	it	gt
 80166be:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80166c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166c4:	fb03 f202 	mul.w	r2, r3, r2
 80166c8:	4613      	mov	r3, r2
 80166ca:	4a86      	ldr	r2, [pc, #536]	; (80168e4 <flex_update+0x7ec>)
 80166cc:	fb82 1203 	smull	r1, r2, r2, r3
 80166d0:	ea4f 7be3 	mov.w	fp, r3, asr #31
 80166d4:	ebcb 1b62 	rsb	fp, fp, r2, asr #5
 80166d8:	fa0f fb8b 	sxth.w	fp, fp
 80166dc:	e748      	b.n	8016570 <flex_update+0x478>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80166de:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 80166e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80166e6:	f73f af49 	bgt.w	801657c <flex_update+0x484>
 80166ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80166ee:	bfc8      	it	gt
 80166f0:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80166f4:	fb03 f000 	mul.w	r0, r3, r0
 80166f8:	4b7a      	ldr	r3, [pc, #488]	; (80168e4 <flex_update+0x7ec>)
 80166fa:	fb83 3a00 	smull	r3, sl, r3, r0
 80166fe:	17c0      	asrs	r0, r0, #31
 8016700:	ebc0 1a6a 	rsb	sl, r0, sl, asr #5
 8016704:	fa0f fa8a 	sxth.w	sl, sl
 8016708:	e738      	b.n	801657c <flex_update+0x484>
        diff_x += f->row ? main_pos : cross_pos;
 801670a:	44ab      	add	fp, r5
 801670c:	fa1f f88b 	uxth.w	r8, fp
 8016710:	fa0f fb8b 	sxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 8016714:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016718:	e74a      	b.n	80165b0 <flex_update+0x4b8>
        else main_pos -= item_gap + place_gap;
 801671a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801671e:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8016722:	1a9b      	subs	r3, r3, r2
 8016724:	9a04      	ldr	r2, [sp, #16]
 8016726:	1a9b      	subs	r3, r3, r2
 8016728:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 801672c:	e776      	b.n	801661c <flex_update+0x524>
        lv_mem_buf_release(t.grow_dsc);
 801672e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016730:	f00b f94e 	bl	80219d0 <lv_mem_buf_release>
        if(rtl && !f.row) {
 8016734:	9b03      	ldr	r3, [sp, #12]
 8016736:	2b01      	cmp	r3, #1
 8016738:	d015      	beq.n	8016766 <flex_update+0x66e>
            *cross_pos += t.track_cross_size + gap + track_gap;
 801673a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801673e:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 8016742:	4413      	add	r3, r2
 8016744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016746:	4413      	add	r3, r2
 8016748:	9a06      	ldr	r2, [sp, #24]
 801674a:	8812      	ldrh	r2, [r2, #0]
 801674c:	4413      	add	r3, r2
 801674e:	b21b      	sxth	r3, r3
 8016750:	9a06      	ldr	r2, [sp, #24]
 8016752:	8013      	strh	r3, [r2, #0]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016754:	68b3      	ldr	r3, [r6, #8]
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801675a:	4293      	cmp	r3, r2
 801675c:	dd11      	ble.n	8016782 <flex_update+0x68a>
 801675e:	2a00      	cmp	r2, #0
 8016760:	db0f      	blt.n	8016782 <flex_update+0x68a>
        track_first_item = next_track_first_item;
 8016762:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016764:	e086      	b.n	8016874 <flex_update+0x77c>
        if(rtl && !f.row) {
 8016766:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801676a:	f013 0f01 	tst.w	r3, #1
 801676e:	d1e4      	bne.n	801673a <flex_update+0x642>
            *cross_pos -= gap + track_gap;
 8016770:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 8016774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016776:	441a      	add	r2, r3
 8016778:	9b06      	ldr	r3, [sp, #24]
 801677a:	881b      	ldrh	r3, [r3, #0]
 801677c:	1a9b      	subs	r3, r3, r2
 801677e:	b21b      	sxth	r3, r3
 8016780:	e7e6      	b.n	8016750 <flex_update+0x658>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8016782:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8016786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016788:	429a      	cmp	r2, r3
 801678a:	d00a      	beq.n	80167a2 <flex_update+0x6aa>
 801678c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801678e:	429a      	cmp	r2, r3
 8016790:	d007      	beq.n	80167a2 <flex_update+0x6aa>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8016792:	2200      	movs	r2, #0
 8016794:	212b      	movs	r1, #43	; 0x2b
 8016796:	4630      	mov	r0, r6
 8016798:	f7ed fab2 	bl	8003d00 <lv_event_send>
}
 801679c:	b021      	add	sp, #132	; 0x84
 801679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
 80167a2:	4630      	mov	r0, r6
 80167a4:	f7f1 fefe 	bl	80085a4 <lv_obj_refr_size>
 80167a8:	e7f3      	b.n	8016792 <flex_update+0x69a>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 80167aa:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 80167ae:	9307      	str	r3, [sp, #28]
 80167b0:	f9bd 907a 	ldrsh.w	r9, [sp, #122]	; 0x7a
 80167b4:	9714      	str	r7, [sp, #80]	; 0x50
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 80167b6:	4b4c      	ldr	r3, [pc, #304]	; (80168e8 <flex_update+0x7f0>)
 80167b8:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 80167ba:	4b4c      	ldr	r3, [pc, #304]	; (80168ec <flex_update+0x7f4>)
 80167bc:	9308      	str	r3, [sp, #32]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 80167be:	4b4c      	ldr	r3, [pc, #304]	; (80168f0 <flex_update+0x7f8>)
 80167c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80167c2:	e07d      	b.n	80168c0 <flex_update+0x7c8>
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 80167c4:	68b3      	ldr	r3, [r6, #8]
 80167c6:	685b      	ldr	r3, [r3, #4]
 80167c8:	2b00      	cmp	r3, #0
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80167ca:	bfc8      	it	gt
 80167cc:	2200      	movgt	r2, #0
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 80167ce:	f340 8082 	ble.w	80168d6 <flex_update+0x7de>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80167d2:	2500      	movs	r5, #0
 80167d4:	462c      	mov	r4, r5
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 80167d6:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 80167da:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80167de:	f8dd a014 	ldr.w	sl, [sp, #20]
 80167e2:	46bb      	mov	fp, r7
 80167e4:	9f04      	ldr	r7, [sp, #16]
            t.grow_dsc_calc = 0;
 80167e6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 80167ea:	f36f 0300 	bfc	r3, #0, #1
 80167ee:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 80167f2:	f8cd 8004 	str.w	r8, [sp, #4]
 80167f6:	9700      	str	r7, [sp, #0]
 80167f8:	4653      	mov	r3, sl
 80167fa:	a91f      	add	r1, sp, #124	; 0x7c
 80167fc:	4630      	mov	r0, r6
 80167fe:	f7ff fb47 	bl	8015e90 <find_track_end>
 8016802:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 8016804:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8016808:	4423      	add	r3, r4
 801680a:	b29b      	uxth	r3, r3
 801680c:	eb03 0409 	add.w	r4, r3, r9
 8016810:	b224      	sxth	r4, r4
            track_cnt++;
 8016812:	3501      	adds	r5, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016814:	68b1      	ldr	r1, [r6, #8]
 8016816:	6849      	ldr	r1, [r1, #4]
 8016818:	4281      	cmp	r1, r0
 801681a:	dd01      	ble.n	8016820 <flex_update+0x728>
 801681c:	2800      	cmp	r0, #0
 801681e:	dae2      	bge.n	80167e6 <flex_update+0x6ee>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 8016820:	465f      	mov	r7, fp
 8016822:	b105      	cbz	r5, 8016826 <flex_update+0x72e>
 8016824:	b21c      	sxth	r4, r3
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 8016826:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801682a:	f013 0f01 	tst.w	r3, #1
 801682e:	f43f ad65 	beq.w	80162fc <flex_update+0x204>
 8016832:	4630      	mov	r0, r6
 8016834:	f7f1 f982 	bl	8007b3c <lv_obj_get_content_height>
 8016838:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 801683a:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 801683e:	9301      	str	r3, [sp, #4]
 8016840:	9b06      	ldr	r3, [sp, #24]
 8016842:	9300      	str	r3, [sp, #0]
 8016844:	b22b      	sxth	r3, r5
 8016846:	4622      	mov	r2, r4
 8016848:	4638      	mov	r0, r7
 801684a:	f7ff fab7 	bl	8015dbc <place_content>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 801684e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016852:	f013 0f04 	tst.w	r3, #4
 8016856:	f43f ad5c 	beq.w	8016312 <flex_update+0x21a>
 801685a:	68b2      	ldr	r2, [r6, #8]
 801685c:	6857      	ldr	r7, [r2, #4]
 801685e:	3f01      	subs	r7, #1
    if(rtl && !f.row) {
 8016860:	9a03      	ldr	r2, [sp, #12]
 8016862:	2a01      	cmp	r2, #1
 8016864:	f43f ad3e 	beq.w	80162e4 <flex_update+0x1ec>
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016868:	68b3      	ldr	r3, [r6, #8]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	42bb      	cmp	r3, r7
 801686e:	dd88      	ble.n	8016782 <flex_update+0x68a>
 8016870:	2f00      	cmp	r7, #0
 8016872:	db86      	blt.n	8016782 <flex_update+0x68a>
        t.grow_dsc_calc = 1;
 8016874:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8016878:	f043 0301 	orr.w	r3, r3, #1
 801687c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8016880:	ab17      	add	r3, sp, #92	; 0x5c
 8016882:	9301      	str	r3, [sp, #4]
 8016884:	9b04      	ldr	r3, [sp, #16]
 8016886:	9300      	str	r3, [sp, #0]
 8016888:	9b05      	ldr	r3, [sp, #20]
 801688a:	463a      	mov	r2, r7
 801688c:	a91f      	add	r1, sp, #124	; 0x7c
 801688e:	4630      	mov	r0, r6
 8016890:	f7ff fafe 	bl	8015e90 <find_track_end>
 8016894:	900c      	str	r0, [sp, #48]	; 0x30
        if(rtl && !f.row) {
 8016896:	9b03      	ldr	r3, [sp, #12]
 8016898:	2b01      	cmp	r3, #1
 801689a:	f43f ad3c 	beq.w	8016316 <flex_update+0x21e>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 801689e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 80168a2:	9307      	str	r3, [sp, #28]
 80168a4:	f9bd 907a 	ldrsh.w	r9, [sp, #122]	; 0x7a
 80168a8:	9714      	str	r7, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 80168aa:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80168ae:	f013 0f01 	tst.w	r3, #1
 80168b2:	d180      	bne.n	80167b6 <flex_update+0x6be>
        track_first_item = next_track_first_item;
 80168b4:	4b0f      	ldr	r3, [pc, #60]	; (80168f4 <flex_update+0x7fc>)
 80168b6:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 80168b8:	4b0d      	ldr	r3, [pc, #52]	; (80168f0 <flex_update+0x7f8>)
 80168ba:	9308      	str	r3, [sp, #32]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 80168bc:	4b0b      	ldr	r3, [pc, #44]	; (80168ec <flex_update+0x7f4>)
 80168be:	930b      	str	r3, [sp, #44]	; 0x2c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 80168c0:	f8bd c05e 	ldrh.w	ip, [sp, #94]	; 0x5e
 80168c4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80168c8:	ebac 0c03 	sub.w	ip, ip, r3
 80168cc:	fa0f fc8c 	sxth.w	ip, ip
        lv_coord_t grow_value_sum = 0;
 80168d0:	f04f 0a00 	mov.w	sl, #0
 80168d4:	e575      	b.n	80163c2 <flex_update+0x2ca>
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 80168d6:	2500      	movs	r5, #0
 80168d8:	462c      	mov	r4, r5
 80168da:	e7a4      	b.n	8016826 <flex_update+0x72e>
 80168dc:	00060001 	.word	0x00060001
 80168e0:	20002680 	.word	0x20002680
 80168e4:	51eb851f 	.word	0x51eb851f
 80168e8:	080209d3 	.word	0x080209d3
 80168ec:	08015da5 	.word	0x08015da5
 80168f0:	08015db1 	.word	0x08015db1
 80168f4:	080209dd 	.word	0x080209dd

080168f8 <lv_flex_init>:
{
 80168f8:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 80168fa:	2100      	movs	r1, #0
 80168fc:	480c      	ldr	r0, [pc, #48]	; (8016930 <lv_flex_init+0x38>)
 80168fe:	f7f1 f867 	bl	80079d0 <lv_layout_register>
 8016902:	4b0c      	ldr	r3, [pc, #48]	; (8016934 <lv_flex_init+0x3c>)
 8016904:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop(LV_STYLE_PROP_FLAG_NONE);
 8016906:	2000      	movs	r0, #0
 8016908:	f00b ffbe 	bl	8022888 <lv_style_register_prop>
 801690c:	4b0a      	ldr	r3, [pc, #40]	; (8016938 <lv_flex_init+0x40>)
 801690e:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8016910:	2004      	movs	r0, #4
 8016912:	f00b ffb9 	bl	8022888 <lv_style_register_prop>
 8016916:	4b09      	ldr	r3, [pc, #36]	; (801693c <lv_flex_init+0x44>)
 8016918:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 801691a:	2004      	movs	r0, #4
 801691c:	f00b ffb4 	bl	8022888 <lv_style_register_prop>
 8016920:	4b07      	ldr	r3, [pc, #28]	; (8016940 <lv_flex_init+0x48>)
 8016922:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8016924:	2004      	movs	r0, #4
 8016926:	f00b ffaf 	bl	8022888 <lv_style_register_prop>
 801692a:	4b06      	ldr	r3, [pc, #24]	; (8016944 <lv_flex_init+0x4c>)
 801692c:	8018      	strh	r0, [r3, #0]
}
 801692e:	bd08      	pop	{r3, pc}
 8016930:	080160f9 	.word	0x080160f9
 8016934:	2000267a 	.word	0x2000267a
 8016938:	2000267e 	.word	0x2000267e
 801693c:	20002682 	.word	0x20002682
 8016940:	2000267c 	.word	0x2000267c
 8016944:	20002684 	.word	0x20002684

08016948 <lv_obj_set_style_flex_flow>:
{
 8016948:	b508      	push	{r3, lr}
 801694a:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 801694c:	460a      	mov	r2, r1
 801694e:	4902      	ldr	r1, [pc, #8]	; (8016958 <lv_obj_set_style_flex_flow+0x10>)
 8016950:	8809      	ldrh	r1, [r1, #0]
 8016952:	f7f4 fb50 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 8016956:	bd08      	pop	{r3, pc}
 8016958:	2000267e 	.word	0x2000267e

0801695c <lv_obj_set_flex_flow>:
{
 801695c:	b510      	push	{r4, lr}
 801695e:	4604      	mov	r4, r0
    lv_obj_set_style_flex_flow(obj, flow, 0);
 8016960:	2200      	movs	r2, #0
 8016962:	f7ff fff1 	bl	8016948 <lv_obj_set_style_flex_flow>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 8016966:	2200      	movs	r2, #0
 8016968:	4b02      	ldr	r3, [pc, #8]	; (8016974 <lv_obj_set_flex_flow+0x18>)
 801696a:	8819      	ldrh	r1, [r3, #0]
 801696c:	4620      	mov	r0, r4
 801696e:	f7f4 fe44 	bl	800b5fa <lv_obj_set_style_layout>
}
 8016972:	bd10      	pop	{r4, pc}
 8016974:	2000267a 	.word	0x2000267a

08016978 <lv_obj_set_style_flex_main_place>:
{
 8016978:	b508      	push	{r3, lr}
 801697a:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 801697c:	460a      	mov	r2, r1
 801697e:	4902      	ldr	r1, [pc, #8]	; (8016988 <lv_obj_set_style_flex_main_place+0x10>)
 8016980:	8809      	ldrh	r1, [r1, #0]
 8016982:	f7f4 fb38 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 8016986:	bd08      	pop	{r3, pc}
 8016988:	20002682 	.word	0x20002682

0801698c <lv_obj_set_style_flex_cross_place>:
{
 801698c:	b508      	push	{r3, lr}
 801698e:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 8016990:	460a      	mov	r2, r1
 8016992:	4902      	ldr	r1, [pc, #8]	; (801699c <lv_obj_set_style_flex_cross_place+0x10>)
 8016994:	8809      	ldrh	r1, [r1, #0]
 8016996:	f7f4 fb2e 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 801699a:	bd08      	pop	{r3, pc}
 801699c:	2000267c 	.word	0x2000267c

080169a0 <lv_obj_set_style_flex_track_place>:
{
 80169a0:	b508      	push	{r3, lr}
 80169a2:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 80169a4:	460a      	mov	r2, r1
 80169a6:	4902      	ldr	r1, [pc, #8]	; (80169b0 <lv_obj_set_style_flex_track_place+0x10>)
 80169a8:	8809      	ldrh	r1, [r1, #0]
 80169aa:	f7f4 fb24 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 80169ae:	bd08      	pop	{r3, pc}
 80169b0:	20002684 	.word	0x20002684

080169b4 <lv_obj_set_flex_align>:
{
 80169b4:	b570      	push	{r4, r5, r6, lr}
 80169b6:	4604      	mov	r4, r0
 80169b8:	4616      	mov	r6, r2
 80169ba:	461d      	mov	r5, r3
    lv_obj_set_style_flex_main_place(obj, main_place, 0);
 80169bc:	2200      	movs	r2, #0
 80169be:	f7ff ffdb 	bl	8016978 <lv_obj_set_style_flex_main_place>
    lv_obj_set_style_flex_cross_place(obj, cross_place, 0);
 80169c2:	2200      	movs	r2, #0
 80169c4:	4631      	mov	r1, r6
 80169c6:	4620      	mov	r0, r4
 80169c8:	f7ff ffe0 	bl	801698c <lv_obj_set_style_flex_cross_place>
    lv_obj_set_style_flex_track_place(obj, track_place, 0);
 80169cc:	2200      	movs	r2, #0
 80169ce:	4629      	mov	r1, r5
 80169d0:	4620      	mov	r0, r4
 80169d2:	f7ff ffe5 	bl	80169a0 <lv_obj_set_style_flex_track_place>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 80169d6:	2200      	movs	r2, #0
 80169d8:	4b02      	ldr	r3, [pc, #8]	; (80169e4 <lv_obj_set_flex_align+0x30>)
 80169da:	8819      	ldrh	r1, [r3, #0]
 80169dc:	4620      	mov	r0, r4
 80169de:	f7f4 fe0c 	bl	800b5fa <lv_obj_set_style_layout>
}
 80169e2:	bd70      	pop	{r4, r5, r6, pc}
 80169e4:	2000267a 	.word	0x2000267a

080169e8 <lv_obj_set_style_flex_grow>:
{
 80169e8:	b508      	push	{r3, lr}
 80169ea:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 80169ec:	460a      	mov	r2, r1
 80169ee:	4902      	ldr	r1, [pc, #8]	; (80169f8 <lv_obj_set_style_flex_grow+0x10>)
 80169f0:	8809      	ldrh	r1, [r1, #0]
 80169f2:	f7f4 fb00 	bl	800aff6 <lv_obj_set_local_style_prop>
}
 80169f6:	bd08      	pop	{r3, pc}
 80169f8:	20002680 	.word	0x20002680

080169fc <lv_obj_set_flex_grow>:
{
 80169fc:	b510      	push	{r4, lr}
 80169fe:	4604      	mov	r4, r0
    lv_obj_set_style_flex_grow(obj, grow, 0);
 8016a00:	2200      	movs	r2, #0
 8016a02:	f7ff fff1 	bl	80169e8 <lv_obj_set_style_flex_grow>
    lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8016a06:	4620      	mov	r0, r4
 8016a08:	f7f4 fe30 	bl	800b66c <lv_obj_get_parent>
 8016a0c:	f7f0 ffc0 	bl	8007990 <lv_obj_mark_layout_as_dirty>
}
 8016a10:	bd10      	pop	{r4, pc}
	...

08016a14 <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 8016a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a18:	4686      	mov	lr, r0
 8016a1a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016a1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016a1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8016a20:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 8016a24:	b391      	cbz	r1, 8016a8c <grid_align+0x78>
        pos_array[0] = 0;
 8016a26:	2200      	movs	r2, #0
 8016a28:	8022      	strh	r2, [r4, #0]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 8016a2a:	f1b6 0901 	subs.w	r9, r6, #1
 8016a2e:	f000 80a4 	beq.w	8016b7a <grid_align+0x166>
 8016a32:	46a4      	mov	ip, r4
 8016a34:	1eb8      	subs	r0, r7, #2
 8016a36:	2100      	movs	r1, #0
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 8016a38:	f9bc 5000 	ldrsh.w	r5, [ip]
 8016a3c:	3101      	adds	r1, #1
 8016a3e:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8016a42:	441a      	add	r2, r3
 8016a44:	442a      	add	r2, r5
 8016a46:	f82c 2f02 	strh.w	r2, [ip, #2]!
    for(i = 0; i < track_num - 1; i++) {
 8016a4a:	4549      	cmp	r1, r9
 8016a4c:	d3f4      	bcc.n	8016a38 <grid_align+0x24>
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 8016a4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016a52:	3b01      	subs	r3, #1
 8016a54:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8016a58:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016a5c:	4418      	add	r0, r3
 8016a5e:	8823      	ldrh	r3, [r4, #0]
 8016a60:	1ac0      	subs	r0, r0, r3
 8016a62:	b200      	sxth	r0, r0

    if(reverse) {
 8016a64:	f1b8 0f00 	cmp.w	r8, #0
 8016a68:	d00e      	beq.n	8016a88 <grid_align+0x74>
        for(i = 0; i < track_num; i++) {
 8016a6a:	b16e      	cbz	r6, 8016a88 <grid_align+0x74>
 8016a6c:	3c02      	subs	r4, #2
 8016a6e:	3f02      	subs	r7, #2
    for(i = 0; i < track_num - 1; i++) {
 8016a70:	2200      	movs	r2, #0
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 8016a72:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 8016a76:	f837 1f02 	ldrh.w	r1, [r7, #2]!
 8016a7a:	440b      	add	r3, r1
 8016a7c:	ebae 0303 	sub.w	r3, lr, r3
 8016a80:	8023      	strh	r3, [r4, #0]
        for(i = 0; i < track_num; i++) {
 8016a82:	3201      	adds	r2, #1
 8016a84:	4296      	cmp	r6, r2
 8016a86:	d8f4      	bhi.n	8016a72 <grid_align+0x5e>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 8016a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 8016a8c:	1f11      	subs	r1, r2, #4
 8016a8e:	b2c9      	uxtb	r1, r1
 8016a90:	2902      	cmp	r1, #2
 8016a92:	d802      	bhi.n	8016a9a <grid_align+0x86>
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 8016a94:	2e01      	cmp	r6, #1
 8016a96:	d029      	beq.n	8016aec <grid_align+0xd8>
            gap = 0;
 8016a98:	2300      	movs	r3, #0
        for(i = 0; i < track_num; i++) {
 8016a9a:	2e00      	cmp	r6, #0
 8016a9c:	d074      	beq.n	8016b88 <grid_align+0x174>
 8016a9e:	f1a7 0c02 	sub.w	ip, r7, #2
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 8016aa2:	2000      	movs	r0, #0
 8016aa4:	4682      	mov	sl, r0
            grid_size += size_array[i] + gap;
 8016aa6:	b29d      	uxth	r5, r3
 8016aa8:	46a9      	mov	r9, r5
 8016aaa:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
 8016aae:	4451      	add	r1, sl
 8016ab0:	b289      	uxth	r1, r1
 8016ab2:	eb05 0a01 	add.w	sl, r5, r1
 8016ab6:	fa1f fb8a 	uxth.w	fp, sl
 8016aba:	fa0f fa8a 	sxth.w	sl, sl
        for(i = 0; i < track_num; i++) {
 8016abe:	3001      	adds	r0, #1
 8016ac0:	4286      	cmp	r6, r0
 8016ac2:	d8f1      	bhi.n	8016aa8 <grid_align+0x94>
        switch(align) {
 8016ac4:	2a06      	cmp	r2, #6
 8016ac6:	d8b0      	bhi.n	8016a2a <grid_align+0x16>
 8016ac8:	a001      	add	r0, pc, #4	; (adr r0, 8016ad0 <grid_align+0xbc>)
 8016aca:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8016ace:	bf00      	nop
 8016ad0:	08016af3 	.word	0x08016af3
 8016ad4:	08016af9 	.word	0x08016af9
 8016ad8:	08016b0d 	.word	0x08016b0d
 8016adc:	08016a2b 	.word	0x08016a2b
 8016ae0:	08016b5d 	.word	0x08016b5d
 8016ae4:	08016b3b 	.word	0x08016b3b
 8016ae8:	08016b1d 	.word	0x08016b1d
            gap = 0;
 8016aec:	2300      	movs	r3, #0
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 8016aee:	2201      	movs	r2, #1
 8016af0:	e7d5      	b.n	8016a9e <grid_align+0x8a>
                pos_array[0] = 0;
 8016af2:	2200      	movs	r2, #0
 8016af4:	8022      	strh	r2, [r4, #0]
                break;
 8016af6:	e798      	b.n	8016a2a <grid_align+0x16>
        grid_size -= gap;
 8016af8:	b20a      	sxth	r2, r1
                pos_array[0] = (cont_size - grid_size) / 2;
 8016afa:	ebae 0202 	sub.w	r2, lr, r2
 8016afe:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016b02:	1052      	asrs	r2, r2, #1
 8016b04:	8022      	strh	r2, [r4, #0]
                break;
 8016b06:	e790      	b.n	8016a2a <grid_align+0x16>
        switch(align) {
 8016b08:	f04f 0b00 	mov.w	fp, #0
                pos_array[0] = cont_size - grid_size;
 8016b0c:	44f1      	add	r9, lr
 8016b0e:	eba9 0b0b 	sub.w	fp, r9, fp
 8016b12:	f8a4 b000 	strh.w	fp, [r4]
                break;
 8016b16:	e788      	b.n	8016a2a <grid_align+0x16>
        switch(align) {
 8016b18:	f04f 0b00 	mov.w	fp, #0
                pos_array[0] = 0;
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	8023      	strh	r3, [r4, #0]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 8016b20:	eb09 030e 	add.w	r3, r9, lr
 8016b24:	eba3 030b 	sub.w	r3, r3, fp
 8016b28:	b21b      	sxth	r3, r3
 8016b2a:	1e72      	subs	r2, r6, #1
 8016b2c:	b212      	sxth	r2, r2
 8016b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b32:	b21b      	sxth	r3, r3
                break;
 8016b34:	e779      	b.n	8016a2a <grid_align+0x16>
        switch(align) {
 8016b36:	f04f 0b00 	mov.w	fp, #0
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 8016b3a:	eb09 020e 	add.w	r2, r9, lr
 8016b3e:	eba2 020b 	sub.w	r2, r2, fp
 8016b42:	b212      	sxth	r2, r2
 8016b44:	b233      	sxth	r3, r6
 8016b46:	fb92 f2f3 	sdiv	r2, r2, r3
 8016b4a:	b213      	sxth	r3, r2
                pos_array[0] = gap / 2;
 8016b4c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8016b50:	441a      	add	r2, r3
 8016b52:	1052      	asrs	r2, r2, #1
 8016b54:	8022      	strh	r2, [r4, #0]
                break;
 8016b56:	e768      	b.n	8016a2a <grid_align+0x16>
        switch(align) {
 8016b58:	f04f 0b00 	mov.w	fp, #0
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 8016b5c:	eb09 030e 	add.w	r3, r9, lr
 8016b60:	eba3 030b 	sub.w	r3, r3, fp
 8016b64:	b21b      	sxth	r3, r3
 8016b66:	1c72      	adds	r2, r6, #1
 8016b68:	b212      	sxth	r2, r2
 8016b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b6e:	b21b      	sxth	r3, r3
                pos_array[0] = gap;
 8016b70:	8023      	strh	r3, [r4, #0]
                break;
 8016b72:	e75a      	b.n	8016a2a <grid_align+0x16>
    for(i = 0; i < track_num - 1; i++) {
 8016b74:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8016b78:	e75b      	b.n	8016a32 <grid_align+0x1e>
    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 8016b7a:	f9b7 0000 	ldrsh.w	r0, [r7]
    if(reverse) {
 8016b7e:	f1b8 0f00 	cmp.w	r8, #0
 8016b82:	f47f af73 	bne.w	8016a6c <grid_align+0x58>
 8016b86:	e77f      	b.n	8016a88 <grid_align+0x74>
        grid_size -= gap;
 8016b88:	fa1f f983 	uxth.w	r9, r3
        switch(align) {
 8016b8c:	2a06      	cmp	r2, #6
 8016b8e:	d8f1      	bhi.n	8016b74 <grid_align+0x160>
 8016b90:	a101      	add	r1, pc, #4	; (adr r1, 8016b98 <grid_align+0x184>)
 8016b92:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016b96:	bf00      	nop
 8016b98:	08016af3 	.word	0x08016af3
 8016b9c:	08016bb5 	.word	0x08016bb5
 8016ba0:	08016b09 	.word	0x08016b09
 8016ba4:	08016b75 	.word	0x08016b75
 8016ba8:	08016b59 	.word	0x08016b59
 8016bac:	08016b37 	.word	0x08016b37
 8016bb0:	08016b19 	.word	0x08016b19
        grid_size -= gap;
 8016bb4:	f1c9 0200 	rsb	r2, r9, #0
 8016bb8:	b212      	sxth	r2, r2
 8016bba:	e79e      	b.n	8016afa <grid_align+0xe6>

08016bbc <grid_update>:
{
 8016bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc0:	b097      	sub	sp, #92	; 0x5c
 8016bc2:	4682      	mov	sl, r0
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8016bc4:	4bb4      	ldr	r3, [pc, #720]	; (8016e98 <grid_update+0x2dc>)
 8016bc6:	881a      	ldrh	r2, [r3, #0]
 8016bc8:	2100      	movs	r1, #0
 8016bca:	f7f3 fe0d 	bl	800a7e8 <lv_obj_get_style_prop>
 8016bce:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 8016bd0:	4bb2      	ldr	r3, [pc, #712]	; (8016e9c <grid_update+0x2e0>)
 8016bd2:	881a      	ldrh	r2, [r3, #0]
 8016bd4:	2100      	movs	r1, #0
 8016bd6:	4650      	mov	r0, sl
 8016bd8:	f7f3 fe06 	bl	800a7e8 <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 8016bdc:	2c00      	cmp	r4, #0
 8016bde:	f000 8442 	beq.w	8017466 <grid_update+0x8aa>
 8016be2:	2800      	cmp	r0, #0
 8016be4:	f000 843f 	beq.w	8017466 <grid_update+0x8aa>
    if(lv_obj_get_child(cont, 0) == NULL) {
 8016be8:	2100      	movs	r1, #0
 8016bea:	4650      	mov	r0, sl
 8016bec:	f7f4 fd42 	bl	800b674 <lv_obj_get_child>
 8016bf0:	b350      	cbz	r0, 8016c48 <grid_update+0x8c>
 8016bf2:	4baa      	ldr	r3, [pc, #680]	; (8016e9c <grid_update+0x2e0>)
 8016bf4:	881a      	ldrh	r2, [r3, #0]
 8016bf6:	2100      	movs	r1, #0
 8016bf8:	4650      	mov	r0, sl
 8016bfa:	f7f3 fdf5 	bl	800a7e8 <lv_obj_get_style_prop>
 8016bfe:	9005      	str	r0, [sp, #20]

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8016c00:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016c04:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8016c08:	429a      	cmp	r2, r3
 8016c0a:	d022      	beq.n	8016c52 <grid_update+0x96>
 8016c0c:	4602      	mov	r2, r0
 8016c0e:	2300      	movs	r3, #0
 8016c10:	f641 74ff 	movw	r4, #8191	; 0x1fff
 8016c14:	3301      	adds	r3, #1
 8016c16:	0058      	lsls	r0, r3, #1
 8016c18:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
 8016c1c:	42a1      	cmp	r1, r4
 8016c1e:	d1f9      	bne.n	8016c14 <grid_update+0x58>
    c->row_num = count_tracks(row_templ);
 8016c20:	9314      	str	r3, [sp, #80]	; 0x50
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8016c22:	f00a fe73 	bl	802190c <lv_mem_buf_get>
 8016c26:	9010      	str	r0, [sp, #64]	; 0x40
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8016c28:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016c2a:	0040      	lsls	r0, r0, #1
 8016c2c:	f00a fe6e 	bl	802190c <lv_mem_buf_get>
 8016c30:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 8016c32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016c34:	2c00      	cmp	r4, #0
 8016c36:	d071      	beq.n	8016d1c <grid_update+0x160>
 8016c38:	9b05      	ldr	r3, [sp, #20]
 8016c3a:	1e9f      	subs	r7, r3, #2
 8016c3c:	46b8      	mov	r8, r7
 8016c3e:	2600      	movs	r6, #0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8016c40:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8016ea0 <grid_update+0x2e4>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_pos(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8016c44:	9706      	str	r7, [sp, #24]
 8016c46:	e03f      	b.n	8016cc8 <grid_update+0x10c>
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 8016c48:	211c      	movs	r1, #28
 8016c4a:	a80f      	add	r0, sp, #60	; 0x3c
 8016c4c:	f00b f88c 	bl	8021d68 <lv_memset_00>
        return;
 8016c50:	e1f3      	b.n	801703a <grid_update+0x47e>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8016c52:	2000      	movs	r0, #0
 8016c54:	4603      	mov	r3, r0
 8016c56:	e7e3      	b.n	8016c20 <grid_update+0x64>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8016c58:	3401      	adds	r4, #1
 8016c5a:	4650      	mov	r0, sl
 8016c5c:	f7f4 fd1f 	bl	800b69e <lv_obj_get_child_cnt>
 8016c60:	4284      	cmp	r4, r0
 8016c62:	d225      	bcs.n	8016cb0 <grid_update+0xf4>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 8016c64:	4621      	mov	r1, r4
 8016c66:	4650      	mov	r0, sl
 8016c68:	f7f4 fd04 	bl	800b674 <lv_obj_get_child>
 8016c6c:	4605      	mov	r5, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8016c6e:	4659      	mov	r1, fp
 8016c70:	f7ef feb5 	bl	80069de <lv_obj_has_flag_any>
 8016c74:	2800      	cmp	r0, #0
 8016c76:	d1ef      	bne.n	8016c58 <grid_update+0x9c>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 8016c78:	4b8a      	ldr	r3, [pc, #552]	; (8016ea4 <grid_update+0x2e8>)
 8016c7a:	881a      	ldrh	r2, [r3, #0]
 8016c7c:	2100      	movs	r1, #0
 8016c7e:	4628      	mov	r0, r5
 8016c80:	f7f3 fdb2 	bl	800a7e8 <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 8016c84:	b2c0      	uxtb	r0, r0
 8016c86:	2801      	cmp	r0, #1
 8016c88:	d1e6      	bne.n	8016c58 <grid_update+0x9c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8016c8a:	4b87      	ldr	r3, [pc, #540]	; (8016ea8 <grid_update+0x2ec>)
 8016c8c:	881a      	ldrh	r2, [r3, #0]
 8016c8e:	2100      	movs	r1, #0
 8016c90:	4628      	mov	r0, r5
 8016c92:	f7f3 fda9 	bl	800a7e8 <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 8016c96:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 8016c98:	42b0      	cmp	r0, r6
 8016c9a:	d1dd      	bne.n	8016c58 <grid_update+0x9c>
                size = LV_MAX(size, lv_obj_get_height(item));
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	f7f0 ff2a 	bl	8007af6 <lv_obj_get_height>
 8016ca2:	42b8      	cmp	r0, r7
 8016ca4:	dbd8      	blt.n	8016c58 <grid_update+0x9c>
 8016ca6:	4628      	mov	r0, r5
 8016ca8:	f7f0 ff25 	bl	8007af6 <lv_obj_get_height>
 8016cac:	4607      	mov	r7, r0
 8016cae:	e7d3      	b.n	8016c58 <grid_update+0x9c>
            if(size >= 0) c->h[i] = size;
 8016cb0:	2f00      	cmp	r7, #0
 8016cb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016cb4:	bfae      	itee	ge
 8016cb6:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->h[i] = 0;
 8016cba:	2200      	movlt	r2, #0
 8016cbc:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->row_num; i++) {
 8016cc0:	3601      	adds	r6, #1
 8016cc2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016cc4:	42a6      	cmp	r6, r4
 8016cc6:	d20a      	bcs.n	8016cde <grid_update+0x122>
        if(IS_CONTENT(row_templ[i])) {
 8016cc8:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8016ccc:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
 8016cd0:	f641 739a 	movw	r3, #8090	; 0x1f9a
 8016cd4:	429a      	cmp	r2, r3
 8016cd6:	d1f3      	bne.n	8016cc0 <grid_update+0x104>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8016cd8:	2400      	movs	r4, #0
        lv_coord_t size = LV_COORD_MIN;
 8016cda:	4f74      	ldr	r7, [pc, #464]	; (8016eac <grid_update+0x2f0>)
 8016cdc:	e7bd      	b.n	8016c5a <grid_update+0x9e>
    for(i = 0; i < c->row_num; i++) {
 8016cde:	9f06      	ldr	r7, [sp, #24]
 8016ce0:	2c00      	cmp	r4, #0
 8016ce2:	d037      	beq.n	8016d54 <grid_update+0x198>
    lv_coord_t grid_h = 0;
 8016ce4:	2500      	movs	r5, #0
    uint32_t row_fr_cnt = 0;
 8016ce6:	462c      	mov	r4, r5
    for(i = 0; i < c->row_num; i++) {
 8016ce8:	462a      	mov	r2, r5
        if(IS_FR(x)) {
 8016cea:	f641 769a 	movw	r6, #8090	; 0x1f9a
 8016cee:	e00b      	b.n	8016d08 <grid_update+0x14c>
        else if(IS_CONTENT(x)) {
 8016cf0:	42b3      	cmp	r3, r6
            grid_h += c->h[i];
 8016cf2:	bf07      	ittee	eq
 8016cf4:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 8016cf6:	5a5b      	ldrheq	r3, [r3, r1]
            c->h[i] = x;
 8016cf8:	9812      	ldrne	r0, [sp, #72]	; 0x48
 8016cfa:	5243      	strhne	r3, [r0, r1]
            grid_h += x;
 8016cfc:	441d      	add	r5, r3
 8016cfe:	b22d      	sxth	r5, r5
    for(i = 0; i < c->row_num; i++) {
 8016d00:	3201      	adds	r2, #1
 8016d02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d20a      	bcs.n	8016d1e <grid_update+0x162>
        lv_coord_t x = row_templ[i];
 8016d08:	0051      	lsls	r1, r2, #1
 8016d0a:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
        if(IS_FR(x)) {
 8016d0e:	42b3      	cmp	r3, r6
 8016d10:	ddee      	ble.n	8016cf0 <grid_update+0x134>
            row_fr_cnt += GET_FR(x);
 8016d12:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 8016d16:	3b1b      	subs	r3, #27
 8016d18:	441c      	add	r4, r3
 8016d1a:	e7f1      	b.n	8016d00 <grid_update+0x144>
    lv_coord_t grid_h = 0;
 8016d1c:	2500      	movs	r5, #0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_row(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016d1e:	2214      	movs	r2, #20
 8016d20:	2100      	movs	r1, #0
 8016d22:	4650      	mov	r0, sl
 8016d24:	f7f3 fd60 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016d28:	b206      	sxth	r6, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	f7f0 ff06 	bl	8007b3c <lv_obj_get_content_height>
 8016d30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d32:	1e5a      	subs	r2, r3, #1
 8016d34:	fb02 0016 	mls	r0, r2, r6, r0
    lv_coord_t free_h = cont_h - grid_h;
 8016d38:	1b45      	subs	r5, r0, r5
 8016d3a:	b22d      	sxth	r5, r5
    if(free_h < 0) free_h = 0;
 8016d3c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    for(i = 0; i < c->row_num; i++) {
 8016d40:	b353      	cbz	r3, 8016d98 <grid_update+0x1dc>
 8016d42:	9b05      	ldr	r3, [sp, #20]
 8016d44:	1e98      	subs	r0, r3, #2
    int32_t last_fr_x = 0;
 8016d46:	2200      	movs	r2, #0
    int32_t last_fr_i = -1;
 8016d48:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for(i = 0; i < c->row_num; i++) {
 8016d4c:	4611      	mov	r1, r2
        if(IS_FR(x)) {
 8016d4e:	f641 779a 	movw	r7, #8090	; 0x1f9a
 8016d52:	e005      	b.n	8016d60 <grid_update+0x1a4>
    lv_coord_t grid_h = 0;
 8016d54:	2500      	movs	r5, #0
 8016d56:	e7e2      	b.n	8016d1e <grid_update+0x162>
    for(i = 0; i < c->row_num; i++) {
 8016d58:	3101      	adds	r1, #1
 8016d5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d5c:	4299      	cmp	r1, r3
 8016d5e:	d210      	bcs.n	8016d82 <grid_update+0x1c6>
        lv_coord_t x = row_templ[i];
 8016d60:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
        if(IS_FR(x)) {
 8016d64:	42bb      	cmp	r3, r7
 8016d66:	ddf7      	ble.n	8016d58 <grid_update+0x19c>
            lv_coord_t f = GET_FR(x);
 8016d68:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 8016d6c:	3b1b      	subs	r3, #27
            c->h[i] = (free_h * f) / row_fr_cnt;
 8016d6e:	b21a      	sxth	r2, r3
 8016d70:	fb02 f605 	mul.w	r6, r2, r5
 8016d74:	fbb6 f6f4 	udiv	r6, r6, r4
 8016d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d7a:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
            last_fr_i = i;
 8016d7e:	460e      	mov	r6, r1
            last_fr_x = f;
 8016d80:	e7ea      	b.n	8016d58 <grid_update+0x19c>
    if(last_fr_i >= 0) {
 8016d82:	2e00      	cmp	r6, #0
 8016d84:	db08      	blt.n	8016d98 <grid_update+0x1dc>
        c->h[last_fr_i] = free_h - ((free_h * (row_fr_cnt - last_fr_x)) / row_fr_cnt);
 8016d86:	1aa3      	subs	r3, r4, r2
 8016d88:	fb05 f303 	mul.w	r3, r5, r3
 8016d8c:	fbb3 f4f4 	udiv	r4, r3, r4
 8016d90:	1b2c      	subs	r4, r5, r4
 8016d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016d94:	f823 4016 	strh.w	r4, [r3, r6, lsl #1]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8016d98:	4b3f      	ldr	r3, [pc, #252]	; (8016e98 <grid_update+0x2dc>)
 8016d9a:	881a      	ldrh	r2, [r3, #0]
 8016d9c:	2100      	movs	r1, #0
 8016d9e:	4650      	mov	r0, sl
 8016da0:	f7f3 fd22 	bl	800a7e8 <lv_obj_get_style_prop>
 8016da4:	4604      	mov	r4, r0
 8016da6:	9005      	str	r0, [sp, #20]
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8016da8:	4650      	mov	r0, sl
 8016daa:	f7f0 feaa 	bl	8007b02 <lv_obj_get_content_width>
 8016dae:	9006      	str	r0, [sp, #24]
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8016db0:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016db4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8016db8:	429a      	cmp	r2, r3
 8016dba:	d01d      	beq.n	8016df8 <grid_update+0x23c>
 8016dbc:	4622      	mov	r2, r4
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	f641 74ff 	movw	r4, #8191	; 0x1fff
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	0058      	lsls	r0, r3, #1
 8016dc8:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
 8016dcc:	42a1      	cmp	r1, r4
 8016dce:	d1f9      	bne.n	8016dc4 <grid_update+0x208>
    c->col_num = count_tracks(col_templ);
 8016dd0:	9313      	str	r3, [sp, #76]	; 0x4c
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 8016dd2:	f00a fd9b 	bl	802190c <lv_mem_buf_get>
 8016dd6:	900f      	str	r0, [sp, #60]	; 0x3c
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 8016dd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016dda:	0040      	lsls	r0, r0, #1
 8016ddc:	f00a fd96 	bl	802190c <lv_mem_buf_get>
 8016de0:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 8016de2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016de4:	2c00      	cmp	r4, #0
 8016de6:	d07d      	beq.n	8016ee4 <grid_update+0x328>
 8016de8:	9b05      	ldr	r3, [sp, #20]
 8016dea:	1e9f      	subs	r7, r3, #2
 8016dec:	46b8      	mov	r8, r7
 8016dee:	2600      	movs	r6, #0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8016df0:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8016ea0 <grid_update+0x2e4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8016df4:	9707      	str	r7, [sp, #28]
 8016df6:	e03a      	b.n	8016e6e <grid_update+0x2b2>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8016df8:	2000      	movs	r0, #0
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	e7e8      	b.n	8016dd0 <grid_update+0x214>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8016dfe:	3401      	adds	r4, #1
 8016e00:	4650      	mov	r0, sl
 8016e02:	f7f4 fc4c 	bl	800b69e <lv_obj_get_child_cnt>
 8016e06:	4284      	cmp	r4, r0
 8016e08:	d225      	bcs.n	8016e56 <grid_update+0x29a>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 8016e0a:	4621      	mov	r1, r4
 8016e0c:	4650      	mov	r0, sl
 8016e0e:	f7f4 fc31 	bl	800b674 <lv_obj_get_child>
 8016e12:	4605      	mov	r5, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8016e14:	4659      	mov	r1, fp
 8016e16:	f7ef fde2 	bl	80069de <lv_obj_has_flag_any>
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	d1ef      	bne.n	8016dfe <grid_update+0x242>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 8016e1e:	4b24      	ldr	r3, [pc, #144]	; (8016eb0 <grid_update+0x2f4>)
 8016e20:	881a      	ldrh	r2, [r3, #0]
 8016e22:	2100      	movs	r1, #0
 8016e24:	4628      	mov	r0, r5
 8016e26:	f7f3 fcdf 	bl	800a7e8 <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 8016e2a:	b2c0      	uxtb	r0, r0
 8016e2c:	2801      	cmp	r0, #1
 8016e2e:	d1e6      	bne.n	8016dfe <grid_update+0x242>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8016e30:	4b20      	ldr	r3, [pc, #128]	; (8016eb4 <grid_update+0x2f8>)
 8016e32:	881a      	ldrh	r2, [r3, #0]
 8016e34:	2100      	movs	r1, #0
 8016e36:	4628      	mov	r0, r5
 8016e38:	f7f3 fcd6 	bl	800a7e8 <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 8016e3c:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 8016e3e:	4286      	cmp	r6, r0
 8016e40:	d1dd      	bne.n	8016dfe <grid_update+0x242>
                size = LV_MAX(size, lv_obj_get_width(item));
 8016e42:	4628      	mov	r0, r5
 8016e44:	f7f0 fe51 	bl	8007aea <lv_obj_get_width>
 8016e48:	42b8      	cmp	r0, r7
 8016e4a:	dbd8      	blt.n	8016dfe <grid_update+0x242>
 8016e4c:	4628      	mov	r0, r5
 8016e4e:	f7f0 fe4c 	bl	8007aea <lv_obj_get_width>
 8016e52:	4607      	mov	r7, r0
 8016e54:	e7d3      	b.n	8016dfe <grid_update+0x242>
            if(size >= 0) c->w[i] = size;
 8016e56:	2f00      	cmp	r7, #0
 8016e58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e5a:	bfae      	itee	ge
 8016e5c:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->w[i] = 0;
 8016e60:	2200      	movlt	r2, #0
 8016e62:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->col_num; i++) {
 8016e66:	3601      	adds	r6, #1
 8016e68:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016e6a:	42a6      	cmp	r6, r4
 8016e6c:	d20a      	bcs.n	8016e84 <grid_update+0x2c8>
        if(IS_CONTENT(col_templ[i])) {
 8016e6e:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8016e72:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
 8016e76:	f641 739a 	movw	r3, #8090	; 0x1f9a
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d1f3      	bne.n	8016e66 <grid_update+0x2aa>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8016e7e:	2400      	movs	r4, #0
        lv_coord_t size = LV_COORD_MIN;
 8016e80:	4f0a      	ldr	r7, [pc, #40]	; (8016eac <grid_update+0x2f0>)
 8016e82:	e7bd      	b.n	8016e00 <grid_update+0x244>
    for(i = 0; i < c->col_num; i++) {
 8016e84:	9f07      	ldr	r7, [sp, #28]
 8016e86:	2c00      	cmp	r4, #0
 8016e88:	d046      	beq.n	8016f18 <grid_update+0x35c>
    lv_coord_t grid_w = 0;
 8016e8a:	2500      	movs	r5, #0
    uint32_t col_fr_cnt = 0;
 8016e8c:	462c      	mov	r4, r5
    for(i = 0; i < c->col_num; i++) {
 8016e8e:	462a      	mov	r2, r5
        if(IS_FR(x)) {
 8016e90:	f641 769a 	movw	r6, #8090	; 0x1f9a
 8016e94:	e01c      	b.n	8016ed0 <grid_update+0x314>
 8016e96:	bf00      	nop
 8016e98:	20002696 	.word	0x20002696
 8016e9c:	2000269a 	.word	0x2000269a
 8016ea0:	00060001 	.word	0x00060001
 8016ea4:	2000268e 	.word	0x2000268e
 8016ea8:	2000268c 	.word	0x2000268c
 8016eac:	ffffe001 	.word	0xffffe001
 8016eb0:	2000268a 	.word	0x2000268a
 8016eb4:	20002688 	.word	0x20002688
        else if(IS_CONTENT(x)) {
 8016eb8:	42b3      	cmp	r3, r6
            grid_w += c->w[i];
 8016eba:	bf07      	ittee	eq
 8016ebc:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8016ebe:	5a5b      	ldrheq	r3, [r3, r1]
            c->w[i] = x;
 8016ec0:	9811      	ldrne	r0, [sp, #68]	; 0x44
 8016ec2:	5243      	strhne	r3, [r0, r1]
            grid_w += x;
 8016ec4:	441d      	add	r5, r3
 8016ec6:	b22d      	sxth	r5, r5
    for(i = 0; i < c->col_num; i++) {
 8016ec8:	3201      	adds	r2, #1
 8016eca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d20a      	bcs.n	8016ee6 <grid_update+0x32a>
        lv_coord_t x = col_templ[i];
 8016ed0:	0051      	lsls	r1, r2, #1
 8016ed2:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
        if(IS_FR(x)) {
 8016ed6:	42b3      	cmp	r3, r6
 8016ed8:	ddee      	ble.n	8016eb8 <grid_update+0x2fc>
            col_fr_cnt += GET_FR(x);
 8016eda:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 8016ede:	3b1b      	subs	r3, #27
 8016ee0:	441c      	add	r4, r3
 8016ee2:	e7f1      	b.n	8016ec8 <grid_update+0x30c>
    lv_coord_t grid_w = 0;
 8016ee4:	2500      	movs	r5, #0
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8016ee6:	2215      	movs	r2, #21
 8016ee8:	2100      	movs	r1, #0
 8016eea:	4650      	mov	r0, sl
 8016eec:	f7f3 fc7c 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016ef0:	b200      	sxth	r0, r0
    cont_w -= col_gap * (c->col_num - 1);
 8016ef2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ef4:	1e5a      	subs	r2, r3, #1
 8016ef6:	9906      	ldr	r1, [sp, #24]
 8016ef8:	fb02 1010 	mls	r0, r2, r0, r1
    lv_coord_t free_w = cont_w - grid_w;
 8016efc:	1b45      	subs	r5, r0, r5
 8016efe:	b22d      	sxth	r5, r5
    if(free_w < 0) free_w = 0;
 8016f00:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    for(i = 0; i < c->col_num; i++) {
 8016f04:	b353      	cbz	r3, 8016f5c <grid_update+0x3a0>
 8016f06:	9b05      	ldr	r3, [sp, #20]
 8016f08:	1e98      	subs	r0, r3, #2
    int32_t last_fr_x = 0;
 8016f0a:	2200      	movs	r2, #0
    int32_t last_fr_i = -1;
 8016f0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for(i = 0; i < c->col_num; i++) {
 8016f10:	4611      	mov	r1, r2
        if(IS_FR(x)) {
 8016f12:	f641 779a 	movw	r7, #8090	; 0x1f9a
 8016f16:	e005      	b.n	8016f24 <grid_update+0x368>
    lv_coord_t grid_w = 0;
 8016f18:	2500      	movs	r5, #0
 8016f1a:	e7e4      	b.n	8016ee6 <grid_update+0x32a>
    for(i = 0; i < c->col_num; i++) {
 8016f1c:	3101      	adds	r1, #1
 8016f1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f20:	4299      	cmp	r1, r3
 8016f22:	d210      	bcs.n	8016f46 <grid_update+0x38a>
        lv_coord_t x = col_templ[i];
 8016f24:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
        if(IS_FR(x)) {
 8016f28:	42bb      	cmp	r3, r7
 8016f2a:	ddf7      	ble.n	8016f1c <grid_update+0x360>
            lv_coord_t f = GET_FR(x);
 8016f2c:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 8016f30:	3b1b      	subs	r3, #27
            c->w[i] = (free_w * f) / col_fr_cnt;
 8016f32:	b21a      	sxth	r2, r3
 8016f34:	fb02 f605 	mul.w	r6, r2, r5
 8016f38:	fbb6 f6f4 	udiv	r6, r6, r4
 8016f3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f3e:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
            last_fr_i = i;
 8016f42:	460e      	mov	r6, r1
            last_fr_x = f;
 8016f44:	e7ea      	b.n	8016f1c <grid_update+0x360>
    if(last_fr_i >= 0) {
 8016f46:	2e00      	cmp	r6, #0
 8016f48:	db08      	blt.n	8016f5c <grid_update+0x3a0>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 8016f4a:	1aa3      	subs	r3, r4, r2
 8016f4c:	fb05 f303 	mul.w	r3, r5, r3
 8016f50:	fbb3 f4f4 	udiv	r4, r3, r4
 8016f54:	1b2c      	subs	r4, r5, r4
 8016f56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f58:	f823 4016 	strh.w	r4, [r3, r6, lsl #1]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8016f5c:	2215      	movs	r2, #21
 8016f5e:	2100      	movs	r1, #0
 8016f60:	4650      	mov	r0, sl
 8016f62:	f7f3 fc41 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016f66:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016f68:	2214      	movs	r2, #20
 8016f6a:	2100      	movs	r1, #0
 8016f6c:	4650      	mov	r0, sl
 8016f6e:	f7f3 fc3b 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016f72:	b206      	sxth	r6, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016f74:	2216      	movs	r2, #22
 8016f76:	2100      	movs	r1, #0
 8016f78:	4650      	mov	r0, sl
 8016f7a:	f7f3 fc35 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8016f7e:	b2c2      	uxtb	r2, r0
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 8016f80:	2a01      	cmp	r2, #1
 8016f82:	bf14      	ite	ne
 8016f84:	f04f 0800 	movne.w	r8, #0
 8016f88:	f04f 0801 	moveq.w	r8, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8016f8c:	2201      	movs	r2, #1
 8016f8e:	2100      	movs	r1, #0
 8016f90:	4650      	mov	r0, sl
 8016f92:	f7f3 fc29 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016f96:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8016f98:	2204      	movs	r2, #4
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	4650      	mov	r0, sl
 8016f9e:	f7f3 fc23 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016fa2:	b204      	sxth	r4, r0
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 8016fa4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8016fa8:	429d      	cmp	r5, r3
 8016faa:	bf03      	ittte	eq
 8016fac:	f89a 9023 	ldrbeq.w	r9, [sl, #35]	; 0x23
 8016fb0:	f089 0904 	eoreq.w	r9, r9, #4
 8016fb4:	f3c9 0980 	ubfxeq	r9, r9, #2, #1
 8016fb8:	f04f 0900 	movne.w	r9, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8016fbc:	4650      	mov	r0, sl
 8016fbe:	f7f0 fda0 	bl	8007b02 <lv_obj_get_content_width>
 8016fc2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 8016fc4:	4b51      	ldr	r3, [pc, #324]	; (801710c <grid_update+0x550>)
 8016fc6:	881a      	ldrh	r2, [r3, #0]
 8016fc8:	2100      	movs	r1, #0
 8016fca:	4650      	mov	r0, sl
 8016fcc:	f7f3 fc0c 	bl	800a7e8 <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 8016fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8016fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fd6:	9302      	str	r3, [sp, #8]
 8016fd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fda:	9301      	str	r3, [sp, #4]
 8016fdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fde:	9300      	str	r3, [sp, #0]
 8016fe0:	463b      	mov	r3, r7
 8016fe2:	b2c2      	uxtb	r2, r0
 8016fe4:	4649      	mov	r1, r9
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	f7ff fd14 	bl	8016a14 <grid_align>
 8016fec:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 8016ff0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8016ff4:	429c      	cmp	r4, r3
 8016ff6:	bf03      	ittte	eq
 8016ff8:	f89a 5023 	ldrbeq.w	r5, [sl, #35]	; 0x23
 8016ffc:	f085 0502 	eoreq.w	r5, r5, #2
 8017000:	f3c5 0540 	ubfxeq	r5, r5, #1, #1
 8017004:	2500      	movne	r5, #0
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 8017006:	4650      	mov	r0, sl
 8017008:	f7f0 fd98 	bl	8007b3c <lv_obj_get_content_height>
 801700c:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 801700e:	4b40      	ldr	r3, [pc, #256]	; (8017110 <grid_update+0x554>)
 8017010:	881a      	ldrh	r2, [r3, #0]
 8017012:	2100      	movs	r1, #0
 8017014:	4650      	mov	r0, sl
 8017016:	f7f3 fbe7 	bl	800a7e8 <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 801701a:	2300      	movs	r3, #0
 801701c:	9303      	str	r3, [sp, #12]
 801701e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017020:	9302      	str	r3, [sp, #8]
 8017022:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017024:	9301      	str	r3, [sp, #4]
 8017026:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017028:	9300      	str	r3, [sp, #0]
 801702a:	4633      	mov	r3, r6
 801702c:	b2c2      	uxtb	r2, r0
 801702e:	4629      	mov	r1, r5
 8017030:	4620      	mov	r0, r4
 8017032:	f7ff fcef 	bl	8016a14 <grid_align>
 8017036:	f8ad 0056 	strh.w	r0, [sp, #86]	; 0x56
    lv_memset_00(&hint, sizeof(hint));
 801703a:	210c      	movs	r1, #12
 801703c:	a80c      	add	r0, sp, #48	; 0x30
 801703e:	f00a fe93 	bl	8021d68 <lv_memset_00>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017042:	2232      	movs	r2, #50	; 0x32
 8017044:	2100      	movs	r1, #0
 8017046:	4650      	mov	r0, sl
 8017048:	f7f3 fbce 	bl	800a7e8 <lv_obj_get_style_prop>
 801704c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801704e:	2212      	movs	r2, #18
 8017050:	2100      	movs	r1, #0
 8017052:	4650      	mov	r0, sl
 8017054:	f7f3 fbc8 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 8017058:	b2ad      	uxth	r5, r5
 801705a:	182c      	adds	r4, r5, r0
 801705c:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801705e:	2210      	movs	r2, #16
 8017060:	2100      	movs	r1, #0
 8017062:	4650      	mov	r0, sl
 8017064:	f7f3 fbc0 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 8017068:	4405      	add	r5, r0
 801706a:	b2ad      	uxth	r5, r5
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 801706c:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 8017070:	441c      	add	r4, r3
 8017072:	b2a4      	uxth	r4, r4
 8017074:	4650      	mov	r0, sl
 8017076:	f7f2 f919 	bl	80092ac <lv_obj_get_scroll_x>
 801707a:	1a24      	subs	r4, r4, r0
 801707c:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 8017080:	f8ba 3016 	ldrh.w	r3, [sl, #22]
 8017084:	441d      	add	r5, r3
 8017086:	b2ad      	uxth	r5, r5
 8017088:	4650      	mov	r0, sl
 801708a:	f7f2 f917 	bl	80092bc <lv_obj_get_scroll_y>
 801708e:	1a2d      	subs	r5, r5, r0
 8017090:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8017094:	f8da 3008 	ldr.w	r3, [sl, #8]
 8017098:	685a      	ldr	r2, [r3, #4]
 801709a:	2a00      	cmp	r2, #0
 801709c:	f000 81c0 	beq.w	8017420 <grid_update+0x864>
 80170a0:	f04f 0b00 	mov.w	fp, #0
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80170a4:	f8cd a014 	str.w	sl, [sp, #20]
 80170a8:	e0c5      	b.n	8017236 <grid_update+0x67a>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 80170aa:	f1b8 0f00 	cmp.w	r8, #0
 80170ae:	f000 81e1 	beq.w	8017474 <grid_update+0x8b8>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 80170b2:	f1b8 0f02 	cmp.w	r8, #2
 80170b6:	f040 8124 	bne.w	8017302 <grid_update+0x746>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80170ba:	8b25      	ldrh	r5, [r4, #24]
 80170bc:	3501      	adds	r5, #1
 80170be:	8aa3      	ldrh	r3, [r4, #20]
 80170c0:	1aed      	subs	r5, r5, r3
 80170c2:	b22d      	sxth	r5, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80170c4:	8b66      	ldrh	r6, [r4, #26]
 80170c6:	3601      	adds	r6, #1
 80170c8:	8ae3      	ldrh	r3, [r4, #22]
 80170ca:	1af6      	subs	r6, r6, r3
 80170cc:	b236      	sxth	r6, r6
    switch(col_align) {
 80170ce:	e12e      	b.n	801732e <grid_update+0x772>
            x = c->x[col_pos];
 80170d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170d2:	f933 8017 	ldrsh.w	r8, [r3, r7, lsl #1]
            item->w_layout = 1;
 80170d6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80170da:	f043 0304 	orr.w	r3, r3, #4
 80170de:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_w = col_w;
 80170e2:	9d06      	ldr	r5, [sp, #24]
            break;
 80170e4:	e12c      	b.n	8017340 <grid_update+0x784>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 80170e6:	9b06      	ldr	r3, [sp, #24]
 80170e8:	eba3 0805 	sub.w	r8, r3, r5
 80170ec:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80170f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170f2:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80170f6:	eb03 0868 	add.w	r8, r3, r8, asr #1
 80170fa:	fa0f f888 	sxth.w	r8, r8
            item->w_layout = 0;
 80170fe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017102:	f36f 0382 	bfc	r3, #2, #1
 8017106:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 801710a:	e119      	b.n	8017340 <grid_update+0x784>
 801710c:	20002694 	.word	0x20002694
 8017110:	20002698 	.word	0x20002698
            y = c->y[row_pos];
 8017114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017116:	f933 701a 	ldrsh.w	r7, [r3, sl, lsl #1]
            item->h_layout = 1;
 801711a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801711e:	f043 0302 	orr.w	r3, r3, #2
 8017122:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_h = row_h;
 8017126:	9e07      	ldr	r6, [sp, #28]
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8017128:	4620      	mov	r0, r4
 801712a:	f7f0 fcde 	bl	8007aea <lv_obj_get_width>
 801712e:	42a8      	cmp	r0, r5
 8017130:	f000 813d 	beq.w	80173ae <grid_update+0x7f2>
    dest->x1 = src->x1;
 8017134:	8aa3      	ldrh	r3, [r4, #20]
 8017136:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 801713a:	8ae3      	ldrh	r3, [r4, #22]
 801713c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 8017140:	8b23      	ldrh	r3, [r4, #24]
 8017142:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 8017146:	8b63      	ldrh	r3, [r4, #26]
 8017148:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_obj_invalidate(item);
 801714c:	4620      	mov	r0, r4
 801714e:	f7f0 ff13 	bl	8007f78 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 8017152:	f104 0314 	add.w	r3, r4, #20
 8017156:	4629      	mov	r1, r5
 8017158:	461d      	mov	r5, r3
 801715a:	4618      	mov	r0, r3
 801715c:	f009 fc39 	bl	80209d2 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 8017160:	4631      	mov	r1, r6
 8017162:	4628      	mov	r0, r5
 8017164:	f009 fc3a 	bl	80209dc <lv_area_set_height>
        lv_obj_invalidate(item);
 8017168:	4620      	mov	r0, r4
 801716a:	f7f0 ff05 	bl	8007f78 <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 801716e:	aa0a      	add	r2, sp, #40	; 0x28
 8017170:	2129      	movs	r1, #41	; 0x29
 8017172:	4620      	mov	r0, r4
 8017174:	f7ec fdc4 	bl	8003d00 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 8017178:	4620      	mov	r0, r4
 801717a:	f7f4 fa77 	bl	800b66c <lv_obj_get_parent>
 801717e:	4622      	mov	r2, r4
 8017180:	2122      	movs	r1, #34	; 0x22
 8017182:	f7ec fdbd 	bl	8003d00 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8017186:	226a      	movs	r2, #106	; 0x6a
 8017188:	2100      	movs	r1, #0
 801718a:	4620      	mov	r0, r4
 801718c:	f7f3 fb2c 	bl	800a7e8 <lv_obj_get_style_prop>
 8017190:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8017192:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8017196:	226b      	movs	r2, #107	; 0x6b
 8017198:	2100      	movs	r1, #0
 801719a:	4620      	mov	r0, r4
 801719c:	f7f3 fb24 	bl	800a7e8 <lv_obj_get_style_prop>
 80171a0:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
 80171a2:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t w = lv_obj_get_width(item);
 80171a6:	4620      	mov	r0, r4
 80171a8:	f7f0 fc9f 	bl	8007aea <lv_obj_get_width>
 80171ac:	9006      	str	r0, [sp, #24]
    lv_coord_t h = lv_obj_get_height(item);
 80171ae:	4620      	mov	r0, r4
 80171b0:	f7f0 fca1 	bl	8007af6 <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80171b4:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 80171b8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80171bc:	f000 80fe 	beq.w	80173bc <grid_update+0x800>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80171c0:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
 80171c4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80171c8:	f000 8111 	beq.w	80173ee <grid_update+0x832>
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 80171cc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80171d0:	8aa2      	ldrh	r2, [r4, #20]
 80171d2:	1a9b      	subs	r3, r3, r2
 80171d4:	4498      	add	r8, r3
 80171d6:	44c2      	add	sl, r8
 80171d8:	fa1f fa8a 	uxth.w	sl, sl
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80171dc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80171e0:	8ae2      	ldrh	r2, [r4, #22]
 80171e2:	1a9b      	subs	r3, r3, r2
 80171e4:	441f      	add	r7, r3
 80171e6:	44b9      	add	r9, r7
 80171e8:	fa1f f989 	uxth.w	r9, r9
    if(diff_x || diff_y) {
 80171ec:	ea5a 0309 	orrs.w	r3, sl, r9
 80171f0:	d019      	beq.n	8017226 <grid_update+0x66a>
        lv_obj_invalidate(item);
 80171f2:	4620      	mov	r0, r4
 80171f4:	f7f0 fec0 	bl	8007f78 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 80171f8:	8aa3      	ldrh	r3, [r4, #20]
 80171fa:	4453      	add	r3, sl
 80171fc:	82a3      	strh	r3, [r4, #20]
        item->coords.x2 += diff_x;
 80171fe:	8b23      	ldrh	r3, [r4, #24]
 8017200:	4453      	add	r3, sl
 8017202:	8323      	strh	r3, [r4, #24]
        item->coords.y1 += diff_y;
 8017204:	8ae3      	ldrh	r3, [r4, #22]
 8017206:	444b      	add	r3, r9
 8017208:	82e3      	strh	r3, [r4, #22]
        item->coords.y2 += diff_y;
 801720a:	8b63      	ldrh	r3, [r4, #26]
 801720c:	444b      	add	r3, r9
 801720e:	8363      	strh	r3, [r4, #26]
        lv_obj_invalidate(item);
 8017210:	4620      	mov	r0, r4
 8017212:	f7f0 feb1 	bl	8007f78 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, false);
 8017216:	2300      	movs	r3, #0
 8017218:	fa0f f289 	sxth.w	r2, r9
 801721c:	fa0f f18a 	sxth.w	r1, sl
 8017220:	4620      	mov	r0, r4
 8017222:	f7f0 fd19 	bl	8007c58 <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8017226:	f10b 0b01 	add.w	fp, fp, #1
 801722a:	9b05      	ldr	r3, [sp, #20]
 801722c:	689b      	ldr	r3, [r3, #8]
 801722e:	685a      	ldr	r2, [r3, #4]
 8017230:	455a      	cmp	r2, fp
 8017232:	f240 80f3 	bls.w	801741c <grid_update+0x860>
        lv_obj_t * item = cont->spec_attr->children[i];
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 801723c:	499d      	ldr	r1, [pc, #628]	; (80174b4 <grid_update+0x8f8>)
 801723e:	4620      	mov	r0, r4
 8017240:	f7ef fbcd 	bl	80069de <lv_obj_has_flag_any>
 8017244:	2800      	cmp	r0, #0
 8017246:	d1ee      	bne.n	8017226 <grid_update+0x66a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 8017248:	4b9b      	ldr	r3, [pc, #620]	; (80174b8 <grid_update+0x8fc>)
 801724a:	881a      	ldrh	r2, [r3, #0]
 801724c:	2100      	movs	r1, #0
 801724e:	4620      	mov	r0, r4
 8017250:	f7f3 faca 	bl	800a7e8 <lv_obj_get_style_prop>
 8017254:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 8017256:	4b99      	ldr	r3, [pc, #612]	; (80174bc <grid_update+0x900>)
 8017258:	881a      	ldrh	r2, [r3, #0]
 801725a:	2100      	movs	r1, #0
 801725c:	4620      	mov	r0, r4
 801725e:	f7f3 fac3 	bl	800a7e8 <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 8017262:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8017266:	d0de      	beq.n	8017226 <grid_update+0x66a>
 8017268:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 801726c:	d0db      	beq.n	8017226 <grid_update+0x66a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 801726e:	4b94      	ldr	r3, [pc, #592]	; (80174c0 <grid_update+0x904>)
 8017270:	881a      	ldrh	r2, [r3, #0]
 8017272:	2100      	movs	r1, #0
 8017274:	4620      	mov	r0, r4
 8017276:	f7f3 fab7 	bl	800a7e8 <lv_obj_get_style_prop>
    uint32_t col_pos = get_col_pos(item);
 801727a:	b2c7      	uxtb	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 801727c:	4b91      	ldr	r3, [pc, #580]	; (80174c4 <grid_update+0x908>)
 801727e:	881a      	ldrh	r2, [r3, #0]
 8017280:	2100      	movs	r1, #0
 8017282:	4620      	mov	r0, r4
 8017284:	f7f3 fab0 	bl	800a7e8 <lv_obj_get_style_prop>
    uint32_t row_pos = get_row_pos(item);
 8017288:	fa5f fa80 	uxtb.w	sl, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 801728c:	4b8e      	ldr	r3, [pc, #568]	; (80174c8 <grid_update+0x90c>)
 801728e:	881a      	ldrh	r2, [r3, #0]
 8017290:	2100      	movs	r1, #0
 8017292:	4620      	mov	r0, r4
 8017294:	f7f3 faa8 	bl	800a7e8 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
 8017298:	fa5f f880 	uxtb.w	r8, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 801729c:	4b8b      	ldr	r3, [pc, #556]	; (80174cc <grid_update+0x910>)
 801729e:	881a      	ldrh	r2, [r3, #0]
 80172a0:	2100      	movs	r1, #0
 80172a2:	4620      	mov	r0, r4
 80172a4:	f7f3 faa0 	bl	800a7e8 <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 80172a8:	fa5f f980 	uxtb.w	r9, r0
    lv_coord_t col_x1 = c->x[col_pos];
 80172ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 80172ae:	443d      	add	r5, r7
 80172b0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80172b4:	4415      	add	r5, r2
 80172b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172b8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80172bc:	f831 0015 	ldrh.w	r0, [r1, r5, lsl #1]
 80172c0:	4403      	add	r3, r0
    lv_coord_t col_w = col_x2 - col_x1;
 80172c2:	f831 1017 	ldrh.w	r1, [r1, r7, lsl #1]
 80172c6:	1a5b      	subs	r3, r3, r1
 80172c8:	b299      	uxth	r1, r3
 80172ca:	9108      	str	r1, [sp, #32]
 80172cc:	b21b      	sxth	r3, r3
 80172ce:	9306      	str	r3, [sp, #24]
    lv_coord_t row_y1 = c->y[row_pos];
 80172d0:	9910      	ldr	r1, [sp, #64]	; 0x40
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80172d2:	4456      	add	r6, sl
 80172d4:	4416      	add	r6, r2
 80172d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80172d8:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80172dc:	f831 2016 	ldrh.w	r2, [r1, r6, lsl #1]
 80172e0:	4413      	add	r3, r2
    lv_coord_t row_h = row_y2 - row_y1;
 80172e2:	f831 201a 	ldrh.w	r2, [r1, sl, lsl #1]
 80172e6:	1a9b      	subs	r3, r3, r2
 80172e8:	b29a      	uxth	r2, r3
 80172ea:	9209      	str	r2, [sp, #36]	; 0x24
 80172ec:	b21b      	sxth	r3, r3
 80172ee:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80172f0:	2216      	movs	r2, #22
 80172f2:	2100      	movs	r1, #0
 80172f4:	4620      	mov	r0, r4
 80172f6:	f7f3 fa77 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80172fa:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80172fc:	2801      	cmp	r0, #1
 80172fe:	f43f aed4 	beq.w	80170aa <grid_update+0x4ee>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017302:	8b25      	ldrh	r5, [r4, #24]
 8017304:	3501      	adds	r5, #1
 8017306:	8aa3      	ldrh	r3, [r4, #20]
 8017308:	1aed      	subs	r5, r5, r3
 801730a:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801730c:	8b66      	ldrh	r6, [r4, #26]
 801730e:	3601      	adds	r6, #1
 8017310:	8ae3      	ldrh	r3, [r4, #22]
 8017312:	1af6      	subs	r6, r6, r3
 8017314:	b236      	sxth	r6, r6
    switch(col_align) {
 8017316:	f1b8 0f02 	cmp.w	r8, #2
 801731a:	f000 80b5 	beq.w	8017488 <grid_update+0x8cc>
 801731e:	f1b8 0f03 	cmp.w	r8, #3
 8017322:	f43f aed5 	beq.w	80170d0 <grid_update+0x514>
 8017326:	f1b8 0f01 	cmp.w	r8, #1
 801732a:	f43f aedc 	beq.w	80170e6 <grid_update+0x52a>
            x = c->x[col_pos];
 801732e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017330:	f933 8017 	ldrsh.w	r8, [r3, r7, lsl #1]
            item->w_layout = 0;
 8017334:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017338:	f36f 0382 	bfc	r3, #2, #1
 801733c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    switch(row_align) {
 8017340:	f1b9 0f02 	cmp.w	r9, #2
 8017344:	d021      	beq.n	801738a <grid_update+0x7ce>
 8017346:	f1b9 0f03 	cmp.w	r9, #3
 801734a:	f43f aee3 	beq.w	8017114 <grid_update+0x558>
 801734e:	f1b9 0f01 	cmp.w	r9, #1
 8017352:	d009      	beq.n	8017368 <grid_update+0x7ac>
            y = c->y[row_pos];
 8017354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017356:	f933 701a 	ldrsh.w	r7, [r3, sl, lsl #1]
            item->h_layout = 0;
 801735a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801735e:	f36f 0341 	bfc	r3, #1, #1
 8017362:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8017366:	e6df      	b.n	8017128 <grid_update+0x56c>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 8017368:	9b07      	ldr	r3, [sp, #28]
 801736a:	1b9f      	subs	r7, r3, r6
 801736c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8017370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017372:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8017376:	eb03 0767 	add.w	r7, r3, r7, asr #1
 801737a:	b23f      	sxth	r7, r7
            item->h_layout = 0;
 801737c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017380:	f36f 0341 	bfc	r3, #1, #1
 8017384:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8017388:	e6ce      	b.n	8017128 <grid_update+0x56c>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 801738a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801738c:	f833 701a 	ldrh.w	r7, [r3, sl, lsl #1]
 8017390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017392:	443b      	add	r3, r7
 8017394:	b29f      	uxth	r7, r3
 8017396:	4620      	mov	r0, r4
 8017398:	f7f0 fbad 	bl	8007af6 <lv_obj_get_height>
 801739c:	1a3f      	subs	r7, r7, r0
 801739e:	b23f      	sxth	r7, r7
            item->h_layout = 0;
 80173a0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80173a4:	f36f 0341 	bfc	r3, #1, #1
 80173a8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 80173ac:	e6bc      	b.n	8017128 <grid_update+0x56c>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 80173ae:	4620      	mov	r0, r4
 80173b0:	f7f0 fba1 	bl	8007af6 <lv_obj_get_height>
 80173b4:	42b0      	cmp	r0, r6
 80173b6:	f47f aebd 	bne.w	8017134 <grid_update+0x578>
 80173ba:	e6e4      	b.n	8017186 <grid_update+0x5ca>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80173bc:	f42a 42c0 	bic.w	r2, sl, #24576	; 0x6000
 80173c0:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80173c4:	f73f aefc 	bgt.w	80171c0 <grid_update+0x604>
 80173c8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80173cc:	bfc8      	it	gt
 80173ce:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 80173d2:	9b06      	ldr	r3, [sp, #24]
 80173d4:	fb02 f303 	mul.w	r3, r2, r3
 80173d8:	461a      	mov	r2, r3
 80173da:	4b3d      	ldr	r3, [pc, #244]	; (80174d0 <grid_update+0x914>)
 80173dc:	fb83 1302 	smull	r1, r3, r3, r2
 80173e0:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 80173e4:	ebca 1a63 	rsb	sl, sl, r3, asr #5
 80173e8:	fa0f fa8a 	sxth.w	sl, sl
 80173ec:	e6e8      	b.n	80171c0 <grid_update+0x604>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80173ee:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 80173f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80173f6:	f73f aee9 	bgt.w	80171cc <grid_update+0x610>
 80173fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80173fe:	bfc8      	it	gt
 8017400:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8017404:	fb00 f303 	mul.w	r3, r0, r3
 8017408:	4a31      	ldr	r2, [pc, #196]	; (80174d0 <grid_update+0x914>)
 801740a:	fb82 1203 	smull	r1, r2, r2, r3
 801740e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8017412:	ebc9 1962 	rsb	r9, r9, r2, asr #5
 8017416:	fa0f f989 	sxth.w	r9, r9
 801741a:	e6d7      	b.n	80171cc <grid_update+0x610>
 801741c:	f8dd a014 	ldr.w	sl, [sp, #20]
    lv_mem_buf_release(calc->x);
 8017420:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017422:	f00a fad5 	bl	80219d0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 8017426:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017428:	f00a fad2 	bl	80219d0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 801742c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801742e:	f00a facf 	bl	80219d0 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 8017432:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017434:	f00a facc 	bl	80219d0 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8017438:	2201      	movs	r2, #1
 801743a:	2100      	movs	r1, #0
 801743c:	4650      	mov	r0, sl
 801743e:	f7f3 f9d3 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017442:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8017444:	2204      	movs	r2, #4
 8017446:	2100      	movs	r1, #0
 8017448:	4650      	mov	r0, sl
 801744a:	f7f3 f9cd 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801744e:	b200      	sxth	r0, r0
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8017450:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8017454:	429c      	cmp	r4, r3
 8017456:	d009      	beq.n	801746c <grid_update+0x8b0>
 8017458:	4298      	cmp	r0, r3
 801745a:	d007      	beq.n	801746c <grid_update+0x8b0>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 801745c:	2200      	movs	r2, #0
 801745e:	212b      	movs	r1, #43	; 0x2b
 8017460:	4650      	mov	r0, sl
 8017462:	f7ec fc4d 	bl	8003d00 <lv_event_send>
}
 8017466:	b017      	add	sp, #92	; 0x5c
 8017468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
 801746c:	4650      	mov	r0, sl
 801746e:	f7f1 f899 	bl	80085a4 <lv_obj_refr_size>
 8017472:	e7f3      	b.n	801745c <grid_update+0x8a0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017474:	8b25      	ldrh	r5, [r4, #24]
 8017476:	3501      	adds	r5, #1
 8017478:	8aa3      	ldrh	r3, [r4, #20]
 801747a:	1aed      	subs	r5, r5, r3
 801747c:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801747e:	8b66      	ldrh	r6, [r4, #26]
 8017480:	3601      	adds	r6, #1
 8017482:	8ae3      	ldrh	r3, [r4, #22]
 8017484:	1af6      	subs	r6, r6, r3
 8017486:	b236      	sxth	r6, r6
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 8017488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801748a:	f833 8017 	ldrh.w	r8, [r3, r7, lsl #1]
 801748e:	9b08      	ldr	r3, [sp, #32]
 8017490:	4443      	add	r3, r8
 8017492:	fa1f f883 	uxth.w	r8, r3
 8017496:	4620      	mov	r0, r4
 8017498:	f7f0 fb27 	bl	8007aea <lv_obj_get_width>
 801749c:	eba8 0800 	sub.w	r8, r8, r0
 80174a0:	fa0f f888 	sxth.w	r8, r8
            item->w_layout = 0;
 80174a4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80174a8:	f36f 0382 	bfc	r3, #2, #1
 80174ac:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 80174b0:	e746      	b.n	8017340 <grid_update+0x784>
 80174b2:	bf00      	nop
 80174b4:	00060001 	.word	0x00060001
 80174b8:	2000268a 	.word	0x2000268a
 80174bc:	2000268e 	.word	0x2000268e
 80174c0:	20002688 	.word	0x20002688
 80174c4:	2000268c 	.word	0x2000268c
 80174c8:	20002690 	.word	0x20002690
 80174cc:	20002692 	.word	0x20002692
 80174d0:	51eb851f 	.word	0x51eb851f

080174d4 <lv_grid_init>:
{
 80174d4:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 80174d6:	2100      	movs	r1, #0
 80174d8:	481b      	ldr	r0, [pc, #108]	; (8017548 <lv_grid_init+0x74>)
 80174da:	f7f0 fa79 	bl	80079d0 <lv_layout_register>
 80174de:	4b1b      	ldr	r3, [pc, #108]	; (801754c <lv_grid_init+0x78>)
 80174e0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 80174e2:	2004      	movs	r0, #4
 80174e4:	f00b f9d0 	bl	8022888 <lv_style_register_prop>
 80174e8:	4b19      	ldr	r3, [pc, #100]	; (8017550 <lv_grid_init+0x7c>)
 80174ea:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 80174ec:	2004      	movs	r0, #4
 80174ee:	f00b f9cb 	bl	8022888 <lv_style_register_prop>
 80174f2:	4b18      	ldr	r3, [pc, #96]	; (8017554 <lv_grid_init+0x80>)
 80174f4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 80174f6:	2004      	movs	r0, #4
 80174f8:	f00b f9c6 	bl	8022888 <lv_style_register_prop>
 80174fc:	4b16      	ldr	r3, [pc, #88]	; (8017558 <lv_grid_init+0x84>)
 80174fe:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017500:	2004      	movs	r0, #4
 8017502:	f00b f9c1 	bl	8022888 <lv_style_register_prop>
 8017506:	4b15      	ldr	r3, [pc, #84]	; (801755c <lv_grid_init+0x88>)
 8017508:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 801750a:	2004      	movs	r0, #4
 801750c:	f00b f9bc 	bl	8022888 <lv_style_register_prop>
 8017510:	4b13      	ldr	r3, [pc, #76]	; (8017560 <lv_grid_init+0x8c>)
 8017512:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017514:	2004      	movs	r0, #4
 8017516:	f00b f9b7 	bl	8022888 <lv_style_register_prop>
 801751a:	4b12      	ldr	r3, [pc, #72]	; (8017564 <lv_grid_init+0x90>)
 801751c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 801751e:	2004      	movs	r0, #4
 8017520:	f00b f9b2 	bl	8022888 <lv_style_register_prop>
 8017524:	4b10      	ldr	r3, [pc, #64]	; (8017568 <lv_grid_init+0x94>)
 8017526:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017528:	2004      	movs	r0, #4
 801752a:	f00b f9ad 	bl	8022888 <lv_style_register_prop>
 801752e:	4b0f      	ldr	r3, [pc, #60]	; (801756c <lv_grid_init+0x98>)
 8017530:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017532:	2004      	movs	r0, #4
 8017534:	f00b f9a8 	bl	8022888 <lv_style_register_prop>
 8017538:	4b0d      	ldr	r3, [pc, #52]	; (8017570 <lv_grid_init+0x9c>)
 801753a:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 801753c:	2004      	movs	r0, #4
 801753e:	f00b f9a3 	bl	8022888 <lv_style_register_prop>
 8017542:	4b0c      	ldr	r3, [pc, #48]	; (8017574 <lv_grid_init+0xa0>)
 8017544:	8018      	strh	r0, [r3, #0]
}
 8017546:	bd08      	pop	{r3, pc}
 8017548:	08016bbd 	.word	0x08016bbd
 801754c:	20002686 	.word	0x20002686
 8017550:	20002696 	.word	0x20002696
 8017554:	2000269a 	.word	0x2000269a
 8017558:	20002694 	.word	0x20002694
 801755c:	20002698 	.word	0x20002698
 8017560:	2000268e 	.word	0x2000268e
 8017564:	2000268c 	.word	0x2000268c
 8017568:	2000268a 	.word	0x2000268a
 801756c:	20002688 	.word	0x20002688
 8017570:	20002690 	.word	0x20002690
 8017574:	20002692 	.word	0x20002692

08017578 <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 8017578:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 801757a:	f7ff f9bd 	bl	80168f8 <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
 801757e:	f7ff ffa9 	bl	80174d4 <lv_grid_init>
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8017582:	bd08      	pop	{r3, pc}

08017584 <theme_apply>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 8017584:	b570      	push	{r4, r5, r6, lr}
 8017586:	460c      	mov	r4, r1
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 8017588:	4608      	mov	r0, r1
 801758a:	f7f4 f86f 	bl	800b66c <lv_obj_get_parent>
 801758e:	b178      	cbz	r0, 80175b0 <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
        return;
    }

    if(lv_obj_check_type(obj, &lv_obj_class)) {
 8017590:	49c2      	ldr	r1, [pc, #776]	; (801789c <theme_apply+0x318>)
 8017592:	4620      	mov	r0, r4
 8017594:	f7ef fc64 	bl	8006e60 <lv_obj_check_type>
 8017598:	2800      	cmp	r0, #0
 801759a:	f000 808e 	beq.w	80176ba <theme_apply+0x136>
#if LV_USE_TABVIEW
        lv_obj_t * parent = lv_obj_get_parent(obj);
 801759e:	4620      	mov	r0, r4
 80175a0:	f7f4 f864 	bl	800b66c <lv_obj_get_parent>
 80175a4:	4605      	mov	r5, r0
        /*Tabview content area*/
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 80175a6:	49be      	ldr	r1, [pc, #760]	; (80178a0 <theme_apply+0x31c>)
 80175a8:	f7ef fc5a 	bl	8006e60 <lv_obj_check_type>
 80175ac:	b1a0      	cbz	r0, 80175d8 <theme_apply+0x54>
#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->led, 0);
    }
#endif
}
 80175ae:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_add_style(obj, &styles->scr, 0);
 80175b0:	4dbc      	ldr	r5, [pc, #752]	; (80178a4 <theme_apply+0x320>)
 80175b2:	2200      	movs	r2, #0
 80175b4:	6829      	ldr	r1, [r5, #0]
 80175b6:	4620      	mov	r0, r4
 80175b8:	f7f3 fa9c 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80175bc:	6829      	ldr	r1, [r5, #0]
 80175be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80175c2:	3108      	adds	r1, #8
 80175c4:	4620      	mov	r0, r4
 80175c6:	f7f3 fa95 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80175ca:	6829      	ldr	r1, [r5, #0]
 80175cc:	4ab6      	ldr	r2, [pc, #728]	; (80178a8 <theme_apply+0x324>)
 80175ce:	3110      	adds	r1, #16
 80175d0:	4620      	mov	r0, r4
 80175d2:	f7f3 fa8f 	bl	800aaf4 <lv_obj_add_style>
        return;
 80175d6:	e7ea      	b.n	80175ae <theme_apply+0x2a>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 80175d8:	4628      	mov	r0, r5
 80175da:	f7f4 f847 	bl	800b66c <lv_obj_get_parent>
 80175de:	49b0      	ldr	r1, [pc, #704]	; (80178a0 <theme_apply+0x31c>)
 80175e0:	f7ef fc3e 	bl	8006e60 <lv_obj_check_type>
 80175e4:	bb20      	cbnz	r0, 8017630 <theme_apply+0xac>
        if(lv_obj_get_index(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 80175e6:	4620      	mov	r0, r4
 80175e8:	f7f4 f85f 	bl	800b6aa <lv_obj_get_index>
 80175ec:	b930      	cbnz	r0, 80175fc <theme_apply+0x78>
 80175ee:	4620      	mov	r0, r4
 80175f0:	f7f4 f83c 	bl	800b66c <lv_obj_get_parent>
 80175f4:	49ad      	ldr	r1, [pc, #692]	; (80178ac <theme_apply+0x328>)
 80175f6:	f7ef fc33 	bl	8006e60 <lv_obj_check_type>
 80175fa:	bb70      	cbnz	r0, 801765a <theme_apply+0xd6>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 80175fc:	4620      	mov	r0, r4
 80175fe:	f7f4 f854 	bl	800b6aa <lv_obj_get_index>
 8017602:	2801      	cmp	r0, #1
 8017604:	d037      	beq.n	8017676 <theme_apply+0xf2>
        lv_obj_add_style(obj, &styles->card, 0);
 8017606:	4da7      	ldr	r5, [pc, #668]	; (80178a4 <theme_apply+0x320>)
 8017608:	6829      	ldr	r1, [r5, #0]
 801760a:	2200      	movs	r2, #0
 801760c:	3118      	adds	r1, #24
 801760e:	4620      	mov	r0, r4
 8017610:	f7f3 fa70 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017614:	6829      	ldr	r1, [r5, #0]
 8017616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801761a:	3108      	adds	r1, #8
 801761c:	4620      	mov	r0, r4
 801761e:	f7f3 fa69 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017622:	6829      	ldr	r1, [r5, #0]
 8017624:	4aa0      	ldr	r2, [pc, #640]	; (80178a8 <theme_apply+0x324>)
 8017626:	3110      	adds	r1, #16
 8017628:	4620      	mov	r0, r4
 801762a:	f7f3 fa63 	bl	800aaf4 <lv_obj_add_style>
 801762e:	e7be      	b.n	80175ae <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8017630:	4d9c      	ldr	r5, [pc, #624]	; (80178a4 <theme_apply+0x320>)
 8017632:	6829      	ldr	r1, [r5, #0]
 8017634:	2200      	movs	r2, #0
 8017636:	3180      	adds	r1, #128	; 0x80
 8017638:	4620      	mov	r0, r4
 801763a:	f7f3 fa5b 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801763e:	6829      	ldr	r1, [r5, #0]
 8017640:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017644:	3108      	adds	r1, #8
 8017646:	4620      	mov	r0, r4
 8017648:	f7f3 fa54 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801764c:	6829      	ldr	r1, [r5, #0]
 801764e:	4a96      	ldr	r2, [pc, #600]	; (80178a8 <theme_apply+0x324>)
 8017650:	3110      	adds	r1, #16
 8017652:	4620      	mov	r0, r4
 8017654:	f7f3 fa4e 	bl	800aaf4 <lv_obj_add_style>
            return;
 8017658:	e7a9      	b.n	80175ae <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 801765a:	4d92      	ldr	r5, [pc, #584]	; (80178a4 <theme_apply+0x320>)
 801765c:	6829      	ldr	r1, [r5, #0]
 801765e:	2200      	movs	r2, #0
 8017660:	3148      	adds	r1, #72	; 0x48
 8017662:	4620      	mov	r0, r4
 8017664:	f7f3 fa46 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 8017668:	6829      	ldr	r1, [r5, #0]
 801766a:	2200      	movs	r2, #0
 801766c:	3170      	adds	r1, #112	; 0x70
 801766e:	4620      	mov	r0, r4
 8017670:	f7f3 fa40 	bl	800aaf4 <lv_obj_add_style>
            return;
 8017674:	e79b      	b.n	80175ae <theme_apply+0x2a>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8017676:	4620      	mov	r0, r4
 8017678:	f7f3 fff8 	bl	800b66c <lv_obj_get_parent>
 801767c:	498b      	ldr	r1, [pc, #556]	; (80178ac <theme_apply+0x328>)
 801767e:	f7ef fbef 	bl	8006e60 <lv_obj_check_type>
 8017682:	2800      	cmp	r0, #0
 8017684:	d0bf      	beq.n	8017606 <theme_apply+0x82>
            lv_obj_add_style(obj, &styles->scr, 0);
 8017686:	4d87      	ldr	r5, [pc, #540]	; (80178a4 <theme_apply+0x320>)
 8017688:	2200      	movs	r2, #0
 801768a:	6829      	ldr	r1, [r5, #0]
 801768c:	4620      	mov	r0, r4
 801768e:	f7f3 fa31 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8017692:	6829      	ldr	r1, [r5, #0]
 8017694:	2200      	movs	r2, #0
 8017696:	3180      	adds	r1, #128	; 0x80
 8017698:	4620      	mov	r0, r4
 801769a:	f7f3 fa2b 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801769e:	6829      	ldr	r1, [r5, #0]
 80176a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80176a4:	3108      	adds	r1, #8
 80176a6:	4620      	mov	r0, r4
 80176a8:	f7f3 fa24 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80176ac:	6829      	ldr	r1, [r5, #0]
 80176ae:	4a7e      	ldr	r2, [pc, #504]	; (80178a8 <theme_apply+0x324>)
 80176b0:	3110      	adds	r1, #16
 80176b2:	4620      	mov	r0, r4
 80176b4:	f7f3 fa1e 	bl	800aaf4 <lv_obj_add_style>
            return;
 80176b8:	e779      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 80176ba:	497d      	ldr	r1, [pc, #500]	; (80178b0 <theme_apply+0x32c>)
 80176bc:	4620      	mov	r0, r4
 80176be:	f7ef fbcf 	bl	8006e60 <lv_obj_check_type>
 80176c2:	2800      	cmp	r0, #0
 80176c4:	d056      	beq.n	8017774 <theme_apply+0x1f0>
        lv_obj_add_style(obj, &styles->btn, 0);
 80176c6:	4d77      	ldr	r5, [pc, #476]	; (80178a4 <theme_apply+0x320>)
 80176c8:	6829      	ldr	r1, [r5, #0]
 80176ca:	2200      	movs	r2, #0
 80176cc:	3120      	adds	r1, #32
 80176ce:	4620      	mov	r0, r4
 80176d0:	f7f3 fa10 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 80176d4:	6829      	ldr	r1, [r5, #0]
 80176d6:	2200      	movs	r2, #0
 80176d8:	3128      	adds	r1, #40	; 0x28
 80176da:	4620      	mov	r0, r4
 80176dc:	f7f3 fa0a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 80176e0:	6829      	ldr	r1, [r5, #0]
 80176e2:	2200      	movs	r2, #0
 80176e4:	31d0      	adds	r1, #208	; 0xd0
 80176e6:	4620      	mov	r0, r4
 80176e8:	f7f3 fa04 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 80176ec:	6829      	ldr	r1, [r5, #0]
 80176ee:	2220      	movs	r2, #32
 80176f0:	3158      	adds	r1, #88	; 0x58
 80176f2:	4620      	mov	r0, r4
 80176f4:	f7f3 f9fe 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 80176f8:	6829      	ldr	r1, [r5, #0]
 80176fa:	2220      	movs	r2, #32
 80176fc:	31d8      	adds	r1, #216	; 0xd8
 80176fe:	4620      	mov	r0, r4
 8017700:	f7f3 f9f8 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017704:	6829      	ldr	r1, [r5, #0]
 8017706:	2204      	movs	r2, #4
 8017708:	31a0      	adds	r1, #160	; 0xa0
 801770a:	4620      	mov	r0, r4
 801770c:	f7f3 f9f2 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 8017710:	6829      	ldr	r1, [r5, #0]
 8017712:	2220      	movs	r2, #32
 8017714:	31c8      	adds	r1, #200	; 0xc8
 8017716:	4620      	mov	r0, r4
 8017718:	f7f3 f9ec 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 801771c:	6829      	ldr	r1, [r5, #0]
 801771e:	2201      	movs	r2, #1
 8017720:	3138      	adds	r1, #56	; 0x38
 8017722:	4620      	mov	r0, r4
 8017724:	f7f3 f9e6 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8017728:	6829      	ldr	r1, [r5, #0]
 801772a:	2280      	movs	r2, #128	; 0x80
 801772c:	3160      	adds	r1, #96	; 0x60
 801772e:	4620      	mov	r0, r4
 8017730:	f7f3 f9e0 	bl	800aaf4 <lv_obj_add_style>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 8017734:	4620      	mov	r0, r4
 8017736:	f7f3 ff99 	bl	800b66c <lv_obj_get_parent>
 801773a:	495e      	ldr	r1, [pc, #376]	; (80178b4 <theme_apply+0x330>)
 801773c:	f7ef fb90 	bl	8006e60 <lv_obj_check_type>
 8017740:	b940      	cbnz	r0, 8017754 <theme_apply+0x1d0>
           lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_main_header_cont_class)) {
 8017742:	4620      	mov	r0, r4
 8017744:	f7f3 ff92 	bl	800b66c <lv_obj_get_parent>
 8017748:	495b      	ldr	r1, [pc, #364]	; (80178b8 <theme_apply+0x334>)
 801774a:	f7ef fb89 	bl	8006e60 <lv_obj_check_type>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 801774e:	2800      	cmp	r0, #0
 8017750:	f43f af2d 	beq.w	80175ae <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->menu_header_btn, 0);
 8017754:	4d53      	ldr	r5, [pc, #332]	; (80178a4 <theme_apply+0x320>)
 8017756:	6829      	ldr	r1, [r5, #0]
 8017758:	2200      	movs	r2, #0
 801775a:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 801775e:	4620      	mov	r0, r4
 8017760:	f7f3 f9c8 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 8017764:	6829      	ldr	r1, [r5, #0]
 8017766:	2220      	movs	r2, #32
 8017768:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 801776c:	4620      	mov	r0, r4
 801776e:	f7f3 f9c1 	bl	800aaf4 <lv_obj_add_style>
 8017772:	e71c      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 8017774:	4951      	ldr	r1, [pc, #324]	; (80178bc <theme_apply+0x338>)
 8017776:	4620      	mov	r0, r4
 8017778:	f7ef fb72 	bl	8006e60 <lv_obj_check_type>
 801777c:	b140      	cbz	r0, 8017790 <theme_apply+0x20c>
        lv_obj_add_style(obj, &styles->line, 0);
 801777e:	4b49      	ldr	r3, [pc, #292]	; (80178a4 <theme_apply+0x320>)
 8017780:	6819      	ldr	r1, [r3, #0]
 8017782:	2200      	movs	r2, #0
 8017784:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8017788:	4620      	mov	r0, r4
 801778a:	f7f3 f9b3 	bl	800aaf4 <lv_obj_add_style>
 801778e:	e70e      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 8017790:	494b      	ldr	r1, [pc, #300]	; (80178c0 <theme_apply+0x33c>)
 8017792:	4620      	mov	r0, r4
 8017794:	f7ef fb64 	bl	8006e60 <lv_obj_check_type>
 8017798:	2800      	cmp	r0, #0
 801779a:	f000 80dc 	beq.w	8017956 <theme_apply+0x3d2>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 801779e:	4620      	mov	r0, r4
 80177a0:	f7f3 ff64 	bl	800b66c <lv_obj_get_parent>
 80177a4:	4947      	ldr	r1, [pc, #284]	; (80178c4 <theme_apply+0x340>)
 80177a6:	f7ef fb5b 	bl	8006e60 <lv_obj_check_type>
 80177aa:	2800      	cmp	r0, #0
 80177ac:	d141      	bne.n	8017832 <theme_apply+0x2ae>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 80177ae:	4620      	mov	r0, r4
 80177b0:	f7f3 ff5c 	bl	800b66c <lv_obj_get_parent>
 80177b4:	493a      	ldr	r1, [pc, #232]	; (80178a0 <theme_apply+0x31c>)
 80177b6:	f7ef fb53 	bl	8006e60 <lv_obj_check_type>
 80177ba:	2800      	cmp	r0, #0
 80177bc:	f040 808e 	bne.w	80178dc <theme_apply+0x358>
        lv_obj_add_style(obj, &styles->card, 0);
 80177c0:	4d38      	ldr	r5, [pc, #224]	; (80178a4 <theme_apply+0x320>)
 80177c2:	6829      	ldr	r1, [r5, #0]
 80177c4:	2200      	movs	r2, #0
 80177c6:	3118      	adds	r1, #24
 80177c8:	4620      	mov	r0, r4
 80177ca:	f7f3 f993 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80177ce:	6829      	ldr	r1, [r5, #0]
 80177d0:	2204      	movs	r2, #4
 80177d2:	31a0      	adds	r1, #160	; 0xa0
 80177d4:	4620      	mov	r0, r4
 80177d6:	f7f3 f98d 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80177da:	6829      	ldr	r1, [r5, #0]
 80177dc:	2208      	movs	r2, #8
 80177de:	31a8      	adds	r1, #168	; 0xa8
 80177e0:	4620      	mov	r0, r4
 80177e2:	f7f3 f987 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 80177e6:	6829      	ldr	r1, [r5, #0]
 80177e8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80177ec:	3120      	adds	r1, #32
 80177ee:	4620      	mov	r0, r4
 80177f0:	f7f3 f980 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 80177f4:	6829      	ldr	r1, [r5, #0]
 80177f6:	4a34      	ldr	r2, [pc, #208]	; (80178c8 <theme_apply+0x344>)
 80177f8:	3160      	adds	r1, #96	; 0x60
 80177fa:	4620      	mov	r0, r4
 80177fc:	f7f3 f97a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8017800:	6829      	ldr	r1, [r5, #0]
 8017802:	4a32      	ldr	r2, [pc, #200]	; (80178cc <theme_apply+0x348>)
 8017804:	3158      	adds	r1, #88	; 0x58
 8017806:	4620      	mov	r0, r4
 8017808:	f7f3 f974 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 801780c:	6829      	ldr	r1, [r5, #0]
 801780e:	4a30      	ldr	r2, [pc, #192]	; (80178d0 <theme_apply+0x34c>)
 8017810:	3128      	adds	r1, #40	; 0x28
 8017812:	4620      	mov	r0, r4
 8017814:	f7f3 f96e 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8017818:	6829      	ldr	r1, [r5, #0]
 801781a:	4a2e      	ldr	r2, [pc, #184]	; (80178d4 <theme_apply+0x350>)
 801781c:	31a0      	adds	r1, #160	; 0xa0
 801781e:	4620      	mov	r0, r4
 8017820:	f7f3 f968 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8017824:	6829      	ldr	r1, [r5, #0]
 8017826:	4a2c      	ldr	r2, [pc, #176]	; (80178d8 <theme_apply+0x354>)
 8017828:	31a8      	adds	r1, #168	; 0xa8
 801782a:	4620      	mov	r0, r4
 801782c:	f7f3 f962 	bl	800aaf4 <lv_obj_add_style>
 8017830:	e6bd      	b.n	80175ae <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 8017832:	4d1c      	ldr	r5, [pc, #112]	; (80178a4 <theme_apply+0x320>)
 8017834:	6829      	ldr	r1, [r5, #0]
 8017836:	2200      	movs	r2, #0
 8017838:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
 801783c:	4620      	mov	r0, r4
 801783e:	f7f3 f959 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 8017842:	6829      	ldr	r1, [r5, #0]
 8017844:	2200      	movs	r2, #0
 8017846:	3188      	adds	r1, #136	; 0x88
 8017848:	4620      	mov	r0, r4
 801784a:	f7f3 f953 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 801784e:	6829      	ldr	r1, [r5, #0]
 8017850:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8017854:	3120      	adds	r1, #32
 8017856:	4620      	mov	r0, r4
 8017858:	f7f3 f94c 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 801785c:	6829      	ldr	r1, [r5, #0]
 801785e:	4a1b      	ldr	r2, [pc, #108]	; (80178cc <theme_apply+0x348>)
 8017860:	3158      	adds	r1, #88	; 0x58
 8017862:	4620      	mov	r0, r4
 8017864:	f7f3 f946 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8017868:	6829      	ldr	r1, [r5, #0]
 801786a:	4a17      	ldr	r2, [pc, #92]	; (80178c8 <theme_apply+0x344>)
 801786c:	3160      	adds	r1, #96	; 0x60
 801786e:	4620      	mov	r0, r4
 8017870:	f7f3 f940 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8017874:	6829      	ldr	r1, [r5, #0]
 8017876:	4a16      	ldr	r2, [pc, #88]	; (80178d0 <theme_apply+0x34c>)
 8017878:	3128      	adds	r1, #40	; 0x28
 801787a:	4620      	mov	r0, r4
 801787c:	f7f3 f93a 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8017880:	6829      	ldr	r1, [r5, #0]
 8017882:	4a14      	ldr	r2, [pc, #80]	; (80178d4 <theme_apply+0x350>)
 8017884:	3130      	adds	r1, #48	; 0x30
 8017886:	4620      	mov	r0, r4
 8017888:	f7f3 f934 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 801788c:	6829      	ldr	r1, [r5, #0]
 801788e:	4a12      	ldr	r2, [pc, #72]	; (80178d8 <theme_apply+0x354>)
 8017890:	3140      	adds	r1, #64	; 0x40
 8017892:	4620      	mov	r0, r4
 8017894:	f7f3 f92e 	bl	800aaf4 <lv_obj_add_style>
            return;
 8017898:	e689      	b.n	80175ae <theme_apply+0x2a>
 801789a:	bf00      	nop
 801789c:	0802cf74 	.word	0x0802cf74
 80178a0:	0802d858 	.word	0x0802d858
 80178a4:	200026c4 	.word	0x200026c4
 80178a8:	00010040 	.word	0x00010040
 80178ac:	0802d8ac 	.word	0x0802d8ac
 80178b0:	08032f18 	.word	0x08032f18
 80178b4:	0802d7b0 	.word	0x0802d7b0
 80178b8:	0802d724 	.word	0x0802d724
 80178bc:	08033030 	.word	0x08033030
 80178c0:	08032f5c 	.word	0x08032f5c
 80178c4:	0802d804 	.word	0x0802d804
 80178c8:	00050080 	.word	0x00050080
 80178cc:	00050020 	.word	0x00050020
 80178d0:	00050001 	.word	0x00050001
 80178d4:	00050004 	.word	0x00050004
 80178d8:	00050008 	.word	0x00050008
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 80178dc:	4dab      	ldr	r5, [pc, #684]	; (8017b8c <theme_apply+0x608>)
 80178de:	6829      	ldr	r1, [r5, #0]
 80178e0:	2200      	movs	r2, #0
 80178e2:	3150      	adds	r1, #80	; 0x50
 80178e4:	4620      	mov	r0, r4
 80178e6:	f7f3 f905 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80178ea:	6829      	ldr	r1, [r5, #0]
 80178ec:	2204      	movs	r2, #4
 80178ee:	31a0      	adds	r1, #160	; 0xa0
 80178f0:	4620      	mov	r0, r4
 80178f2:	f7f3 f8ff 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 80178f6:	6829      	ldr	r1, [r5, #0]
 80178f8:	2204      	movs	r2, #4
 80178fa:	f501 7106 	add.w	r1, r1, #536	; 0x218
 80178fe:	4620      	mov	r0, r4
 8017900:	f7f3 f8f8 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8017904:	6829      	ldr	r1, [r5, #0]
 8017906:	4aa2      	ldr	r2, [pc, #648]	; (8017b90 <theme_apply+0x60c>)
 8017908:	3158      	adds	r1, #88	; 0x58
 801790a:	4620      	mov	r0, r4
 801790c:	f7f3 f8f2 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 8017910:	4ea0      	ldr	r6, [pc, #640]	; (8017b94 <theme_apply+0x610>)
 8017912:	6829      	ldr	r1, [r5, #0]
 8017914:	4632      	mov	r2, r6
 8017916:	3130      	adds	r1, #48	; 0x30
 8017918:	4620      	mov	r0, r4
 801791a:	f7f3 f8eb 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 801791e:	6829      	ldr	r1, [r5, #0]
 8017920:	4632      	mov	r2, r6
 8017922:	f501 7108 	add.w	r1, r1, #544	; 0x220
 8017926:	4620      	mov	r0, r4
 8017928:	f7f3 f8e4 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 801792c:	3603      	adds	r6, #3
 801792e:	6829      	ldr	r1, [r5, #0]
 8017930:	4632      	mov	r2, r6
 8017932:	31a0      	adds	r1, #160	; 0xa0
 8017934:	4620      	mov	r0, r4
 8017936:	f7f3 f8dd 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 801793a:	6829      	ldr	r1, [r5, #0]
 801793c:	4a96      	ldr	r2, [pc, #600]	; (8017b98 <theme_apply+0x614>)
 801793e:	31a8      	adds	r1, #168	; 0xa8
 8017940:	4620      	mov	r0, r4
 8017942:	f7f3 f8d7 	bl	800aaf4 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8017946:	6829      	ldr	r1, [r5, #0]
 8017948:	4632      	mov	r2, r6
 801794a:	f501 7106 	add.w	r1, r1, #536	; 0x218
 801794e:	4620      	mov	r0, r4
 8017950:	f7f3 f8d0 	bl	800aaf4 <lv_obj_add_style>
            return;
 8017954:	e62b      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 8017956:	4991      	ldr	r1, [pc, #580]	; (8017b9c <theme_apply+0x618>)
 8017958:	4620      	mov	r0, r4
 801795a:	f7ef fa81 	bl	8006e60 <lv_obj_check_type>
 801795e:	b338      	cbz	r0, 80179b0 <theme_apply+0x42c>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8017960:	4d8a      	ldr	r5, [pc, #552]	; (8017b8c <theme_apply+0x608>)
 8017962:	6829      	ldr	r1, [r5, #0]
 8017964:	2200      	movs	r2, #0
 8017966:	3130      	adds	r1, #48	; 0x30
 8017968:	4620      	mov	r0, r4
 801796a:	f7f3 f8c3 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 801796e:	6829      	ldr	r1, [r5, #0]
 8017970:	2200      	movs	r2, #0
 8017972:	31b0      	adds	r1, #176	; 0xb0
 8017974:	4620      	mov	r0, r4
 8017976:	f7f3 f8bd 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801797a:	6829      	ldr	r1, [r5, #0]
 801797c:	2204      	movs	r2, #4
 801797e:	31a0      	adds	r1, #160	; 0xa0
 8017980:	4620      	mov	r0, r4
 8017982:	f7f3 f8b7 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8017986:	6829      	ldr	r1, [r5, #0]
 8017988:	2208      	movs	r2, #8
 801798a:	31a8      	adds	r1, #168	; 0xa8
 801798c:	4620      	mov	r0, r4
 801798e:	f7f3 f8b1 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8017992:	6829      	ldr	r1, [r5, #0]
 8017994:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017998:	3128      	adds	r1, #40	; 0x28
 801799a:	4620      	mov	r0, r4
 801799c:	f7f3 f8aa 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 80179a0:	6829      	ldr	r1, [r5, #0]
 80179a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80179a6:	31b0      	adds	r1, #176	; 0xb0
 80179a8:	4620      	mov	r0, r4
 80179aa:	f7f3 f8a3 	bl	800aaf4 <lv_obj_add_style>
 80179ae:	e5fe      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 80179b0:	497b      	ldr	r1, [pc, #492]	; (8017ba0 <theme_apply+0x61c>)
 80179b2:	4620      	mov	r0, r4
 80179b4:	f7ef fa54 	bl	8006e60 <lv_obj_check_type>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	d042      	beq.n	8017a42 <theme_apply+0x4be>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 80179bc:	4d73      	ldr	r5, [pc, #460]	; (8017b8c <theme_apply+0x608>)
 80179be:	6829      	ldr	r1, [r5, #0]
 80179c0:	2200      	movs	r2, #0
 80179c2:	3130      	adds	r1, #48	; 0x30
 80179c4:	4620      	mov	r0, r4
 80179c6:	f7f3 f895 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 80179ca:	6829      	ldr	r1, [r5, #0]
 80179cc:	2200      	movs	r2, #0
 80179ce:	31b0      	adds	r1, #176	; 0xb0
 80179d0:	4620      	mov	r0, r4
 80179d2:	f7f3 f88f 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80179d6:	6829      	ldr	r1, [r5, #0]
 80179d8:	2204      	movs	r2, #4
 80179da:	31a0      	adds	r1, #160	; 0xa0
 80179dc:	4620      	mov	r0, r4
 80179de:	f7f3 f889 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80179e2:	6829      	ldr	r1, [r5, #0]
 80179e4:	2208      	movs	r2, #8
 80179e6:	31a8      	adds	r1, #168	; 0xa8
 80179e8:	4620      	mov	r0, r4
 80179ea:	f7f3 f883 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 80179ee:	6829      	ldr	r1, [r5, #0]
 80179f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80179f4:	3128      	adds	r1, #40	; 0x28
 80179f6:	4620      	mov	r0, r4
 80179f8:	f7f3 f87c 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 80179fc:	6829      	ldr	r1, [r5, #0]
 80179fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017a02:	31b0      	adds	r1, #176	; 0xb0
 8017a04:	4620      	mov	r0, r4
 8017a06:	f7f3 f875 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8017a0a:	6829      	ldr	r1, [r5, #0]
 8017a0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8017a10:	31f0      	adds	r1, #240	; 0xf0
 8017a12:	4620      	mov	r0, r4
 8017a14:	f7f3 f86e 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 8017a18:	4e62      	ldr	r6, [pc, #392]	; (8017ba4 <theme_apply+0x620>)
 8017a1a:	6829      	ldr	r1, [r5, #0]
 8017a1c:	4632      	mov	r2, r6
 8017a1e:	31c8      	adds	r1, #200	; 0xc8
 8017a20:	4620      	mov	r0, r4
 8017a22:	f7f3 f867 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 8017a26:	6829      	ldr	r1, [r5, #0]
 8017a28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8017a2c:	31d0      	adds	r1, #208	; 0xd0
 8017a2e:	4620      	mov	r0, r4
 8017a30:	f7f3 f860 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 8017a34:	6829      	ldr	r1, [r5, #0]
 8017a36:	4632      	mov	r2, r6
 8017a38:	31d8      	adds	r1, #216	; 0xd8
 8017a3a:	4620      	mov	r0, r4
 8017a3c:	f7f3 f85a 	bl	800aaf4 <lv_obj_add_style>
 8017a40:	e5b5      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 8017a42:	4959      	ldr	r1, [pc, #356]	; (8017ba8 <theme_apply+0x624>)
 8017a44:	4620      	mov	r0, r4
 8017a46:	f7ef fa0b 	bl	8006e60 <lv_obj_check_type>
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	d054      	beq.n	8017af8 <theme_apply+0x574>
        lv_obj_add_style(obj, &styles->card, 0);
 8017a4e:	4d4f      	ldr	r5, [pc, #316]	; (8017b8c <theme_apply+0x608>)
 8017a50:	6829      	ldr	r1, [r5, #0]
 8017a52:	2200      	movs	r2, #0
 8017a54:	3118      	adds	r1, #24
 8017a56:	4620      	mov	r0, r4
 8017a58:	f7f3 f84c 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8017a5c:	6829      	ldr	r1, [r5, #0]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	3168      	adds	r1, #104	; 0x68
 8017a62:	4620      	mov	r0, r4
 8017a64:	f7f3 f846 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 8017a68:	6829      	ldr	r1, [r5, #0]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	31b8      	adds	r1, #184	; 0xb8
 8017a6e:	4620      	mov	r0, r4
 8017a70:	f7f3 f840 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017a74:	6829      	ldr	r1, [r5, #0]
 8017a76:	2204      	movs	r2, #4
 8017a78:	31a0      	adds	r1, #160	; 0xa0
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	f7f3 f83a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8017a80:	6829      	ldr	r1, [r5, #0]
 8017a82:	2208      	movs	r2, #8
 8017a84:	31a8      	adds	r1, #168	; 0xa8
 8017a86:	4620      	mov	r0, r4
 8017a88:	f7f3 f834 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017a8c:	6829      	ldr	r1, [r5, #0]
 8017a8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017a92:	3108      	adds	r1, #8
 8017a94:	4620      	mov	r0, r4
 8017a96:	f7f3 f82d 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017a9a:	6829      	ldr	r1, [r5, #0]
 8017a9c:	4a43      	ldr	r2, [pc, #268]	; (8017bac <theme_apply+0x628>)
 8017a9e:	3110      	adds	r1, #16
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	f7f3 f827 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 8017aa6:	6829      	ldr	r1, [r5, #0]
 8017aa8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8017aac:	3150      	adds	r1, #80	; 0x50
 8017aae:	4620      	mov	r0, r4
 8017ab0:	f7f3 f820 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 8017ab4:	6829      	ldr	r1, [r5, #0]
 8017ab6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8017aba:	f501 71ac 	add.w	r1, r1, #344	; 0x158
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f7f3 f818 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 8017ac4:	6829      	ldr	r1, [r5, #0]
 8017ac6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8017aca:	3180      	adds	r1, #128	; 0x80
 8017acc:	4620      	mov	r0, r4
 8017ace:	f7f3 f811 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8017ad2:	6829      	ldr	r1, [r5, #0]
 8017ad4:	4a2e      	ldr	r2, [pc, #184]	; (8017b90 <theme_apply+0x60c>)
 8017ad6:	3158      	adds	r1, #88	; 0x58
 8017ad8:	4620      	mov	r0, r4
 8017ada:	f7f3 f80b 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8017ade:	6829      	ldr	r1, [r5, #0]
 8017ae0:	4a33      	ldr	r2, [pc, #204]	; (8017bb0 <theme_apply+0x62c>)
 8017ae2:	3128      	adds	r1, #40	; 0x28
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	f7f3 f805 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8017aea:	6829      	ldr	r1, [r5, #0]
 8017aec:	4a2a      	ldr	r2, [pc, #168]	; (8017b98 <theme_apply+0x614>)
 8017aee:	3138      	adds	r1, #56	; 0x38
 8017af0:	4620      	mov	r0, r4
 8017af2:	f7f2 ffff 	bl	800aaf4 <lv_obj_add_style>
 8017af6:	e55a      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 8017af8:	492e      	ldr	r1, [pc, #184]	; (8017bb4 <theme_apply+0x630>)
 8017afa:	4620      	mov	r0, r4
 8017afc:	f7ef f9b0 	bl	8006e60 <lv_obj_check_type>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d05d      	beq.n	8017bc0 <theme_apply+0x63c>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 8017b04:	4d21      	ldr	r5, [pc, #132]	; (8017b8c <theme_apply+0x608>)
 8017b06:	6829      	ldr	r1, [r5, #0]
 8017b08:	2200      	movs	r2, #0
 8017b0a:	3188      	adds	r1, #136	; 0x88
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	f7f2 fff1 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017b12:	6829      	ldr	r1, [r5, #0]
 8017b14:	2204      	movs	r2, #4
 8017b16:	31a0      	adds	r1, #160	; 0xa0
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f7f2 ffeb 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8017b1e:	6829      	ldr	r1, [r5, #0]
 8017b20:	4a25      	ldr	r2, [pc, #148]	; (8017bb8 <theme_apply+0x634>)
 8017b22:	3160      	adds	r1, #96	; 0x60
 8017b24:	4620      	mov	r0, r4
 8017b26:	f7f2 ffe5 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 8017b2a:	6829      	ldr	r1, [r5, #0]
 8017b2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017b30:	f501 719c 	add.w	r1, r1, #312	; 0x138
 8017b34:	4620      	mov	r0, r4
 8017b36:	f7f2 ffdd 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8017b3a:	4e20      	ldr	r6, [pc, #128]	; (8017bbc <theme_apply+0x638>)
 8017b3c:	6829      	ldr	r1, [r5, #0]
 8017b3e:	4632      	mov	r2, r6
 8017b40:	3128      	adds	r1, #40	; 0x28
 8017b42:	4620      	mov	r0, r4
 8017b44:	f7f2 ffd6 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8017b48:	6829      	ldr	r1, [r5, #0]
 8017b4a:	4632      	mov	r2, r6
 8017b4c:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 8017b50:	4620      	mov	r0, r4
 8017b52:	f7f2 ffcf 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8017b56:	361f      	adds	r6, #31
 8017b58:	6829      	ldr	r1, [r5, #0]
 8017b5a:	4632      	mov	r2, r6
 8017b5c:	3158      	adds	r1, #88	; 0x58
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f7f2 ffc8 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8017b64:	6829      	ldr	r1, [r5, #0]
 8017b66:	4632      	mov	r2, r6
 8017b68:	31c8      	adds	r1, #200	; 0xc8
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f7f2 ffc2 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8017b70:	6829      	ldr	r1, [r5, #0]
 8017b72:	4632      	mov	r2, r6
 8017b74:	31d8      	adds	r1, #216	; 0xd8
 8017b76:	4620      	mov	r0, r4
 8017b78:	f7f2 ffbc 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 8017b7c:	6829      	ldr	r1, [r5, #0]
 8017b7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017b82:	31d0      	adds	r1, #208	; 0xd0
 8017b84:	4620      	mov	r0, r4
 8017b86:	f7f2 ffb5 	bl	800aaf4 <lv_obj_add_style>
 8017b8a:	e510      	b.n	80175ae <theme_apply+0x2a>
 8017b8c:	200026c4 	.word	0x200026c4
 8017b90:	00050020 	.word	0x00050020
 8017b94:	00050001 	.word	0x00050001
 8017b98:	00050008 	.word	0x00050008
 8017b9c:	08032efc 	.word	0x08032efc
 8017ba0:	080330b4 	.word	0x080330b4
 8017ba4:	00030020 	.word	0x00030020
 8017ba8:	080330ec 	.word	0x080330ec
 8017bac:	00010040 	.word	0x00010040
 8017bb0:	00050004 	.word	0x00050004
 8017bb4:	08032f84 	.word	0x08032f84
 8017bb8:	00020080 	.word	0x00020080
 8017bbc:	00020001 	.word	0x00020001
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 8017bc0:	49bf      	ldr	r1, [pc, #764]	; (8017ec0 <theme_apply+0x93c>)
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	f7ef f94c 	bl	8006e60 <lv_obj_check_type>
 8017bc8:	2800      	cmp	r0, #0
 8017bca:	d05c      	beq.n	8017c86 <theme_apply+0x702>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8017bcc:	4dbd      	ldr	r5, [pc, #756]	; (8017ec4 <theme_apply+0x940>)
 8017bce:	6829      	ldr	r1, [r5, #0]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	3148      	adds	r1, #72	; 0x48
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f7f2 ff8d 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8017bda:	6829      	ldr	r1, [r5, #0]
 8017bdc:	2200      	movs	r2, #0
 8017bde:	31b0      	adds	r1, #176	; 0xb0
 8017be0:	4620      	mov	r0, r4
 8017be2:	f7f2 ff87 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim_fast, 0);
 8017be6:	6829      	ldr	r1, [r5, #0]
 8017be8:	2200      	movs	r2, #0
 8017bea:	31e8      	adds	r1, #232	; 0xe8
 8017bec:	4620      	mov	r0, r4
 8017bee:	f7f2 ff81 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8017bf2:	6829      	ldr	r1, [r5, #0]
 8017bf4:	2280      	movs	r2, #128	; 0x80
 8017bf6:	3160      	adds	r1, #96	; 0x60
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	f7f2 ff7b 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017bfe:	6829      	ldr	r1, [r5, #0]
 8017c00:	2204      	movs	r2, #4
 8017c02:	31a0      	adds	r1, #160	; 0xa0
 8017c04:	4620      	mov	r0, r4
 8017c06:	f7f2 ff75 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8017c0a:	4eaf      	ldr	r6, [pc, #700]	; (8017ec8 <theme_apply+0x944>)
 8017c0c:	6829      	ldr	r1, [r5, #0]
 8017c0e:	4632      	mov	r2, r6
 8017c10:	3128      	adds	r1, #40	; 0x28
 8017c12:	4620      	mov	r0, r4
 8017c14:	f7f2 ff6e 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8017c18:	6829      	ldr	r1, [r5, #0]
 8017c1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017c1e:	31b0      	adds	r1, #176	; 0xb0
 8017c20:	4620      	mov	r0, r4
 8017c22:	f7f2 ff67 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 8017c26:	6829      	ldr	r1, [r5, #0]
 8017c28:	4aa8      	ldr	r2, [pc, #672]	; (8017ecc <theme_apply+0x948>)
 8017c2a:	3160      	adds	r1, #96	; 0x60
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	f7f2 ff61 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8017c32:	6829      	ldr	r1, [r5, #0]
 8017c34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8017c38:	31f0      	adds	r1, #240	; 0xf0
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f7f2 ff5a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8017c40:	6829      	ldr	r1, [r5, #0]
 8017c42:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8017c46:	3150      	adds	r1, #80	; 0x50
 8017c48:	4620      	mov	r0, r4
 8017c4a:	f7f2 ff53 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 8017c4e:	6829      	ldr	r1, [r5, #0]
 8017c50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8017c54:	f501 71a4 	add.w	r1, r1, #328	; 0x148
 8017c58:	4620      	mov	r0, r4
 8017c5a:	f7f2 ff4b 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 8017c5e:	6829      	ldr	r1, [r5, #0]
 8017c60:	4a9b      	ldr	r2, [pc, #620]	; (8017ed0 <theme_apply+0x94c>)
 8017c62:	3160      	adds	r1, #96	; 0x60
 8017c64:	4620      	mov	r0, r4
 8017c66:	f7f2 ff45 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8017c6a:	6829      	ldr	r1, [r5, #0]
 8017c6c:	4632      	mov	r2, r6
 8017c6e:	31d8      	adds	r1, #216	; 0xd8
 8017c70:	4620      	mov	r0, r4
 8017c72:	f7f2 ff3f 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8017c76:	6829      	ldr	r1, [r5, #0]
 8017c78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017c7c:	31d8      	adds	r1, #216	; 0xd8
 8017c7e:	4620      	mov	r0, r4
 8017c80:	f7f2 ff38 	bl	800aaf4 <lv_obj_add_style>
 8017c84:	e493      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 8017c86:	4993      	ldr	r1, [pc, #588]	; (8017ed4 <theme_apply+0x950>)
 8017c88:	4620      	mov	r0, r4
 8017c8a:	f7ef f8e9 	bl	8006e60 <lv_obj_check_type>
 8017c8e:	2800      	cmp	r0, #0
 8017c90:	d041      	beq.n	8017d16 <theme_apply+0x792>
        lv_obj_add_style(obj, &styles->card, 0);
 8017c92:	4d8c      	ldr	r5, [pc, #560]	; (8017ec4 <theme_apply+0x940>)
 8017c94:	6829      	ldr	r1, [r5, #0]
 8017c96:	2200      	movs	r2, #0
 8017c98:	3118      	adds	r1, #24
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f7f2 ff2a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8017ca0:	6829      	ldr	r1, [r5, #0]
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	3178      	adds	r1, #120	; 0x78
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f7f2 ff24 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 8017cac:	6829      	ldr	r1, [r5, #0]
 8017cae:	2200      	movs	r2, #0
 8017cb0:	f501 7194 	add.w	r1, r1, #296	; 0x128
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	f7f2 ff1d 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017cba:	6829      	ldr	r1, [r5, #0]
 8017cbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017cc0:	3108      	adds	r1, #8
 8017cc2:	4620      	mov	r0, r4
 8017cc4:	f7f2 ff16 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017cc8:	6829      	ldr	r1, [r5, #0]
 8017cca:	4a83      	ldr	r2, [pc, #524]	; (8017ed8 <theme_apply+0x954>)
 8017ccc:	3110      	adds	r1, #16
 8017cce:	4620      	mov	r0, r4
 8017cd0:	f7f2 ff10 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 8017cd4:	6829      	ldr	r1, [r5, #0]
 8017cd6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8017cda:	f501 7188 	add.w	r1, r1, #272	; 0x110
 8017cde:	4620      	mov	r0, r4
 8017ce0:	f7f2 ff08 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 8017ce4:	6829      	ldr	r1, [r5, #0]
 8017ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017cea:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8017cee:	4620      	mov	r0, r4
 8017cf0:	f7f2 ff00 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 8017cf4:	6829      	ldr	r1, [r5, #0]
 8017cf6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8017cfa:	f501 7190 	add.w	r1, r1, #288	; 0x120
 8017cfe:	4620      	mov	r0, r4
 8017d00:	f7f2 fef8 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 8017d04:	6829      	ldr	r1, [r5, #0]
 8017d06:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8017d0a:	f501 7188 	add.w	r1, r1, #272	; 0x110
 8017d0e:	4620      	mov	r0, r4
 8017d10:	f7f2 fef0 	bl	800aaf4 <lv_obj_add_style>
 8017d14:	e44b      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 8017d16:	4971      	ldr	r1, [pc, #452]	; (8017edc <theme_apply+0x958>)
 8017d18:	4620      	mov	r0, r4
 8017d1a:	f7ef f8a1 	bl	8006e60 <lv_obj_check_type>
 8017d1e:	b360      	cbz	r0, 8017d7a <theme_apply+0x7f6>
        lv_obj_add_style(obj, &styles->card, 0);
 8017d20:	4d68      	ldr	r5, [pc, #416]	; (8017ec4 <theme_apply+0x940>)
 8017d22:	6829      	ldr	r1, [r5, #0]
 8017d24:	2200      	movs	r2, #0
 8017d26:	3118      	adds	r1, #24
 8017d28:	4620      	mov	r0, r4
 8017d2a:	f7f2 fee3 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 8017d2e:	6829      	ldr	r1, [r5, #0]
 8017d30:	2200      	movs	r2, #0
 8017d32:	31e0      	adds	r1, #224	; 0xe0
 8017d34:	4620      	mov	r0, r4
 8017d36:	f7f2 fedd 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8017d3a:	6829      	ldr	r1, [r5, #0]
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	3190      	adds	r1, #144	; 0x90
 8017d40:	4620      	mov	r0, r4
 8017d42:	f7f2 fed7 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 8017d46:	6829      	ldr	r1, [r5, #0]
 8017d48:	2200      	movs	r2, #0
 8017d4a:	3198      	adds	r1, #152	; 0x98
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	f7f2 fed1 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017d52:	6829      	ldr	r1, [r5, #0]
 8017d54:	2204      	movs	r2, #4
 8017d56:	31a0      	adds	r1, #160	; 0xa0
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f7f2 fecb 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8017d5e:	6829      	ldr	r1, [r5, #0]
 8017d60:	2208      	movs	r2, #8
 8017d62:	31a8      	adds	r1, #168	; 0xa8
 8017d64:	4620      	mov	r0, r4
 8017d66:	f7f2 fec5 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 8017d6a:	6829      	ldr	r1, [r5, #0]
 8017d6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017d70:	3128      	adds	r1, #40	; 0x28
 8017d72:	4620      	mov	r0, r4
 8017d74:	f7f2 febe 	bl	800aaf4 <lv_obj_add_style>
 8017d78:	e419      	b.n	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 8017d7a:	4959      	ldr	r1, [pc, #356]	; (8017ee0 <theme_apply+0x95c>)
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	f7ef f86f 	bl	8006e60 <lv_obj_check_type>
 8017d82:	b398      	cbz	r0, 8017dec <theme_apply+0x868>
        lv_obj_add_style(obj, &styles->card, 0);
 8017d84:	4d4f      	ldr	r5, [pc, #316]	; (8017ec4 <theme_apply+0x940>)
 8017d86:	6829      	ldr	r1, [r5, #0]
 8017d88:	2200      	movs	r2, #0
 8017d8a:	3118      	adds	r1, #24
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	f7f2 feb1 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8017d92:	6829      	ldr	r1, [r5, #0]
 8017d94:	2200      	movs	r2, #0
 8017d96:	3178      	adds	r1, #120	; 0x78
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f7f2 feab 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8017d9e:	6829      	ldr	r1, [r5, #0]
 8017da0:	2200      	movs	r2, #0
 8017da2:	31d0      	adds	r1, #208	; 0xd0
 8017da4:	4620      	mov	r0, r4
 8017da6:	f7f2 fea5 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 8017daa:	6829      	ldr	r1, [r5, #0]
 8017dac:	2220      	movs	r2, #32
 8017dae:	31d8      	adds	r1, #216	; 0xd8
 8017db0:	4620      	mov	r0, r4
 8017db2:	f7f2 fe9f 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8017db6:	6829      	ldr	r1, [r5, #0]
 8017db8:	2220      	movs	r2, #32
 8017dba:	3158      	adds	r1, #88	; 0x58
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	f7f2 fe99 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017dc2:	6829      	ldr	r1, [r5, #0]
 8017dc4:	2204      	movs	r2, #4
 8017dc6:	31a0      	adds	r1, #160	; 0xa0
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f7f2 fe93 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8017dce:	6829      	ldr	r1, [r5, #0]
 8017dd0:	2208      	movs	r2, #8
 8017dd2:	31a8      	adds	r1, #168	; 0xa8
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f7f2 fe8d 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 8017dda:	6829      	ldr	r1, [r5, #0]
 8017ddc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017de0:	31d8      	adds	r1, #216	; 0xd8
 8017de2:	4620      	mov	r0, r4
 8017de4:	f7f2 fe86 	bl	800aaf4 <lv_obj_add_style>
 8017de8:	f7ff bbe1 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 8017dec:	493d      	ldr	r1, [pc, #244]	; (8017ee4 <theme_apply+0x960>)
 8017dee:	4620      	mov	r0, r4
 8017df0:	f7ef f836 	bl	8006e60 <lv_obj_check_type>
 8017df4:	2800      	cmp	r0, #0
 8017df6:	d03b      	beq.n	8017e70 <theme_apply+0x8ec>
        lv_obj_add_style(obj, &styles->card, 0);
 8017df8:	4d32      	ldr	r5, [pc, #200]	; (8017ec4 <theme_apply+0x940>)
 8017dfa:	6829      	ldr	r1, [r5, #0]
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	3118      	adds	r1, #24
 8017e00:	4620      	mov	r0, r4
 8017e02:	f7f2 fe77 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 8017e06:	6829      	ldr	r1, [r5, #0]
 8017e08:	2200      	movs	r2, #0
 8017e0a:	31c0      	adds	r1, #192	; 0xc0
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	f7f2 fe71 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8017e12:	6829      	ldr	r1, [r5, #0]
 8017e14:	2200      	movs	r2, #0
 8017e16:	3190      	adds	r1, #144	; 0x90
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f7f2 fe6b 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 8017e1e:	6829      	ldr	r1, [r5, #0]
 8017e20:	2200      	movs	r2, #0
 8017e22:	f501 7198 	add.w	r1, r1, #304	; 0x130
 8017e26:	4620      	mov	r0, r4
 8017e28:	f7f2 fe64 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017e2c:	6829      	ldr	r1, [r5, #0]
 8017e2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017e32:	3108      	adds	r1, #8
 8017e34:	4620      	mov	r0, r4
 8017e36:	f7f2 fe5d 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017e3a:	6829      	ldr	r1, [r5, #0]
 8017e3c:	4a26      	ldr	r2, [pc, #152]	; (8017ed8 <theme_apply+0x954>)
 8017e3e:	3110      	adds	r1, #16
 8017e40:	4620      	mov	r0, r4
 8017e42:	f7f2 fe57 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 8017e46:	6829      	ldr	r1, [r5, #0]
 8017e48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8017e4c:	3150      	adds	r1, #80	; 0x50
 8017e4e:	4620      	mov	r0, r4
 8017e50:	f7f2 fe50 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 8017e54:	6829      	ldr	r1, [r5, #0]
 8017e56:	4a24      	ldr	r2, [pc, #144]	; (8017ee8 <theme_apply+0x964>)
 8017e58:	3128      	adds	r1, #40	; 0x28
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f7f2 fe4a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 8017e60:	6829      	ldr	r1, [r5, #0]
 8017e62:	4a22      	ldr	r2, [pc, #136]	; (8017eec <theme_apply+0x968>)
 8017e64:	3158      	adds	r1, #88	; 0x58
 8017e66:	4620      	mov	r0, r4
 8017e68:	f7f2 fe44 	bl	800aaf4 <lv_obj_add_style>
 8017e6c:	f7ff bb9f 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 8017e70:	491f      	ldr	r1, [pc, #124]	; (8017ef0 <theme_apply+0x96c>)
 8017e72:	4620      	mov	r0, r4
 8017e74:	f7ee fff4 	bl	8006e60 <lv_obj_check_type>
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d03b      	beq.n	8017ef4 <theme_apply+0x970>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 8017e7c:	4d11      	ldr	r5, [pc, #68]	; (8017ec4 <theme_apply+0x940>)
 8017e7e:	6829      	ldr	r1, [r5, #0]
 8017e80:	2200      	movs	r2, #0
 8017e82:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8017e86:	4620      	mov	r0, r4
 8017e88:	f7f2 fe34 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 8017e8c:	6829      	ldr	r1, [r5, #0]
 8017e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017e92:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8017e96:	4620      	mov	r0, r4
 8017e98:	f7f2 fe2c 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 8017e9c:	6829      	ldr	r1, [r5, #0]
 8017e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017ea2:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	f7f2 fe24 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8017eac:	6829      	ldr	r1, [r5, #0]
 8017eae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8017eb2:	31f0      	adds	r1, #240	; 0xf0
 8017eb4:	4620      	mov	r0, r4
 8017eb6:	f7f2 fe1d 	bl	800aaf4 <lv_obj_add_style>
 8017eba:	f7ff bb78 	b.w	80175ae <theme_apply+0x2a>
 8017ebe:	bf00      	nop
 8017ec0:	080330d0 	.word	0x080330d0
 8017ec4:	200026c4 	.word	0x200026c4
 8017ec8:	00020001 	.word	0x00020001
 8017ecc:	00020080 	.word	0x00020080
 8017ed0:	00030080 	.word	0x00030080
 8017ed4:	0802d110 	.word	0x0802d110
 8017ed8:	00010040 	.word	0x00010040
 8017edc:	0803307c 	.word	0x0803307c
 8017ee0:	08032fc0 	.word	0x08032fc0
 8017ee4:	08032fdc 	.word	0x08032fdc
 8017ee8:	00040001 	.word	0x00040001
 8017eec:	00040020 	.word	0x00040020
 8017ef0:	08032ee0 	.word	0x08032ee0
    else if(lv_obj_check_type(obj, &lv_spinner_class)) {
 8017ef4:	49c6      	ldr	r1, [pc, #792]	; (8018210 <theme_apply+0xc8c>)
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	f7ee ffb2 	bl	8006e60 <lv_obj_check_type>
 8017efc:	b1c8      	cbz	r0, 8017f32 <theme_apply+0x9ae>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 8017efe:	4dc5      	ldr	r5, [pc, #788]	; (8018214 <theme_apply+0xc90>)
 8017f00:	6829      	ldr	r1, [r5, #0]
 8017f02:	2200      	movs	r2, #0
 8017f04:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8017f08:	4620      	mov	r0, r4
 8017f0a:	f7f2 fdf3 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 8017f0e:	6829      	ldr	r1, [r5, #0]
 8017f10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017f14:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f7f2 fdeb 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 8017f1e:	6829      	ldr	r1, [r5, #0]
 8017f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017f24:	f501 7184 	add.w	r1, r1, #264	; 0x108
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f7f2 fde3 	bl	800aaf4 <lv_obj_add_style>
 8017f2e:	f7ff bb3e 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 8017f32:	49b9      	ldr	r1, [pc, #740]	; (8018218 <theme_apply+0xc94>)
 8017f34:	4620      	mov	r0, r4
 8017f36:	f7ee ff93 	bl	8006e60 <lv_obj_check_type>
 8017f3a:	b1b0      	cbz	r0, 8017f6a <theme_apply+0x9e6>
        lv_obj_add_style(obj, &styles->card, 0);
 8017f3c:	4db5      	ldr	r5, [pc, #724]	; (8018214 <theme_apply+0xc90>)
 8017f3e:	6829      	ldr	r1, [r5, #0]
 8017f40:	2200      	movs	r2, #0
 8017f42:	3118      	adds	r1, #24
 8017f44:	4620      	mov	r0, r4
 8017f46:	f7f2 fdd5 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8017f4a:	6829      	ldr	r1, [r5, #0]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	31b0      	adds	r1, #176	; 0xb0
 8017f50:	4620      	mov	r0, r4
 8017f52:	f7f2 fdcf 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 8017f56:	6829      	ldr	r1, [r5, #0]
 8017f58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8017f5c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8017f60:	4620      	mov	r0, r4
 8017f62:	f7f2 fdc7 	bl	800aaf4 <lv_obj_add_style>
 8017f66:	f7ff bb22 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 8017f6a:	49ac      	ldr	r1, [pc, #688]	; (801821c <theme_apply+0xc98>)
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	f7ee ff77 	bl	8006e60 <lv_obj_check_type>
 8017f72:	2800      	cmp	r0, #0
 8017f74:	d03c      	beq.n	8017ff0 <theme_apply+0xa6c>
        lv_obj_add_style(obj, &styles->card, 0);
 8017f76:	4da7      	ldr	r5, [pc, #668]	; (8018214 <theme_apply+0xc90>)
 8017f78:	6829      	ldr	r1, [r5, #0]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	3118      	adds	r1, #24
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f7f2 fdb8 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8017f84:	6829      	ldr	r1, [r5, #0]
 8017f86:	2200      	movs	r2, #0
 8017f88:	3178      	adds	r1, #120	; 0x78
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f7f2 fdb2 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8017f90:	6829      	ldr	r1, [r5, #0]
 8017f92:	2280      	movs	r2, #128	; 0x80
 8017f94:	3160      	adds	r1, #96	; 0x60
 8017f96:	4620      	mov	r0, r4
 8017f98:	f7f2 fdac 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017f9c:	6829      	ldr	r1, [r5, #0]
 8017f9e:	2204      	movs	r2, #4
 8017fa0:	31a0      	adds	r1, #160	; 0xa0
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	f7f2 fda6 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8017fa8:	6829      	ldr	r1, [r5, #0]
 8017faa:	2208      	movs	r2, #8
 8017fac:	31a8      	adds	r1, #168	; 0xa8
 8017fae:	4620      	mov	r0, r4
 8017fb0:	f7f2 fda0 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017fb4:	6829      	ldr	r1, [r5, #0]
 8017fb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017fba:	3108      	adds	r1, #8
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	f7f2 fd99 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017fc2:	6829      	ldr	r1, [r5, #0]
 8017fc4:	4a96      	ldr	r2, [pc, #600]	; (8018220 <theme_apply+0xc9c>)
 8017fc6:	3110      	adds	r1, #16
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f7f2 fd93 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 8017fce:	6829      	ldr	r1, [r5, #0]
 8017fd0:	4a94      	ldr	r2, [pc, #592]	; (8018224 <theme_apply+0xca0>)
 8017fd2:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 8017fd6:	4620      	mov	r0, r4
 8017fd8:	f7f2 fd8c 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 8017fdc:	6829      	ldr	r1, [r5, #0]
 8017fde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017fe2:	f501 71bc 	add.w	r1, r1, #376	; 0x178
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	f7f2 fd84 	bl	800aaf4 <lv_obj_add_style>
 8017fec:	f7ff badf 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 8017ff0:	498d      	ldr	r1, [pc, #564]	; (8018228 <theme_apply+0xca4>)
 8017ff2:	4620      	mov	r0, r4
 8017ff4:	f7ee ff34 	bl	8006e60 <lv_obj_check_type>
 8017ff8:	2800      	cmp	r0, #0
 8017ffa:	d054      	beq.n	80180a6 <theme_apply+0xb22>
        lv_obj_add_style(obj, &styles->scr, 0);
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	4b85      	ldr	r3, [pc, #532]	; (8018214 <theme_apply+0xc90>)
 8018000:	6819      	ldr	r1, [r3, #0]
 8018002:	4620      	mov	r0, r4
 8018004:	f7f2 fd76 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 8018008:	4b88      	ldr	r3, [pc, #544]	; (801822c <theme_apply+0xca8>)
 801800a:	781b      	ldrb	r3, [r3, #0]
 801800c:	2b01      	cmp	r3, #1
 801800e:	4b81      	ldr	r3, [pc, #516]	; (8018214 <theme_apply+0xc90>)
 8018010:	6819      	ldr	r1, [r3, #0]
 8018012:	bf0c      	ite	eq
 8018014:	3178      	addeq	r1, #120	; 0x78
 8018016:	3170      	addne	r1, #112	; 0x70
 8018018:	2200      	movs	r2, #0
 801801a:	4620      	mov	r0, r4
 801801c:	f7f2 fd6a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8018020:	4d7c      	ldr	r5, [pc, #496]	; (8018214 <theme_apply+0xc90>)
 8018022:	6829      	ldr	r1, [r5, #0]
 8018024:	2204      	movs	r2, #4
 8018026:	31a0      	adds	r1, #160	; 0xa0
 8018028:	4620      	mov	r0, r4
 801802a:	f7f2 fd63 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 801802e:	6829      	ldr	r1, [r5, #0]
 8018030:	2208      	movs	r2, #8
 8018032:	31a8      	adds	r1, #168	; 0xa8
 8018034:	4620      	mov	r0, r4
 8018036:	f7f2 fd5d 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 801803a:	6829      	ldr	r1, [r5, #0]
 801803c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8018040:	3120      	adds	r1, #32
 8018042:	4620      	mov	r0, r4
 8018044:	f7f2 fd56 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8018048:	6829      	ldr	r1, [r5, #0]
 801804a:	4a79      	ldr	r2, [pc, #484]	; (8018230 <theme_apply+0xcac>)
 801804c:	3160      	adds	r1, #96	; 0x60
 801804e:	4620      	mov	r0, r4
 8018050:	f7f2 fd50 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 8018054:	6829      	ldr	r1, [r5, #0]
 8018056:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801805a:	3150      	adds	r1, #80	; 0x50
 801805c:	4620      	mov	r0, r4
 801805e:	f7f2 fd49 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 8018062:	6829      	ldr	r1, [r5, #0]
 8018064:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8018068:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 801806c:	4620      	mov	r0, r4
 801806e:	f7f2 fd41 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8018072:	6829      	ldr	r1, [r5, #0]
 8018074:	4a6f      	ldr	r2, [pc, #444]	; (8018234 <theme_apply+0xcb0>)
 8018076:	3158      	adds	r1, #88	; 0x58
 8018078:	4620      	mov	r0, r4
 801807a:	f7f2 fd3b 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 801807e:	6829      	ldr	r1, [r5, #0]
 8018080:	4a6d      	ldr	r2, [pc, #436]	; (8018238 <theme_apply+0xcb4>)
 8018082:	3148      	adds	r1, #72	; 0x48
 8018084:	4620      	mov	r0, r4
 8018086:	f7f2 fd35 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 801808a:	6829      	ldr	r1, [r5, #0]
 801808c:	4a6b      	ldr	r2, [pc, #428]	; (801823c <theme_apply+0xcb8>)
 801808e:	3130      	adds	r1, #48	; 0x30
 8018090:	4620      	mov	r0, r4
 8018092:	f7f2 fd2f 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 8018096:	6829      	ldr	r1, [r5, #0]
 8018098:	4a69      	ldr	r2, [pc, #420]	; (8018240 <theme_apply+0xcbc>)
 801809a:	3140      	adds	r1, #64	; 0x40
 801809c:	4620      	mov	r0, r4
 801809e:	f7f2 fd29 	bl	800aaf4 <lv_obj_add_style>
 80180a2:	f7ff ba84 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 80180a6:	4967      	ldr	r1, [pc, #412]	; (8018244 <theme_apply+0xcc0>)
 80180a8:	4620      	mov	r0, r4
 80180aa:	f7ee fed9 	bl	8006e60 <lv_obj_check_type>
 80180ae:	b9a0      	cbnz	r0, 80180da <theme_apply+0xb56>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 80180b0:	4965      	ldr	r1, [pc, #404]	; (8018248 <theme_apply+0xcc4>)
 80180b2:	4620      	mov	r0, r4
 80180b4:	f7ee fed4 	bl	8006e60 <lv_obj_check_type>
 80180b8:	b360      	cbz	r0, 8018114 <theme_apply+0xb90>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 80180ba:	4d56      	ldr	r5, [pc, #344]	; (8018214 <theme_apply+0xc90>)
 80180bc:	6829      	ldr	r1, [r5, #0]
 80180be:	2200      	movs	r2, #0
 80180c0:	3148      	adds	r1, #72	; 0x48
 80180c2:	4620      	mov	r0, r4
 80180c4:	f7f2 fd16 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 80180c8:	6829      	ldr	r1, [r5, #0]
 80180ca:	2200      	movs	r2, #0
 80180cc:	f501 7102 	add.w	r1, r1, #520	; 0x208
 80180d0:	4620      	mov	r0, r4
 80180d2:	f7f2 fd0f 	bl	800aaf4 <lv_obj_add_style>
 80180d6:	f7ff ba6a 	b.w	80175ae <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->card, 0);
 80180da:	4d4e      	ldr	r5, [pc, #312]	; (8018214 <theme_apply+0xc90>)
 80180dc:	6829      	ldr	r1, [r5, #0]
 80180de:	2200      	movs	r2, #0
 80180e0:	3118      	adds	r1, #24
 80180e2:	4620      	mov	r0, r4
 80180e4:	f7f2 fd06 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 80180e8:	6829      	ldr	r1, [r5, #0]
 80180ea:	2200      	movs	r2, #0
 80180ec:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80180f0:	4620      	mov	r0, r4
 80180f2:	f7f2 fcff 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80180f6:	6829      	ldr	r1, [r5, #0]
 80180f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80180fc:	3108      	adds	r1, #8
 80180fe:	4620      	mov	r0, r4
 8018100:	f7f2 fcf8 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8018104:	6829      	ldr	r1, [r5, #0]
 8018106:	4a46      	ldr	r2, [pc, #280]	; (8018220 <theme_apply+0xc9c>)
 8018108:	3110      	adds	r1, #16
 801810a:	4620      	mov	r0, r4
 801810c:	f7f2 fcf2 	bl	800aaf4 <lv_obj_add_style>
        return;
 8018110:	f7ff ba4d 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 8018114:	494d      	ldr	r1, [pc, #308]	; (801824c <theme_apply+0xcc8>)
 8018116:	4620      	mov	r0, r4
 8018118:	f7ee fea2 	bl	8006e60 <lv_obj_check_type>
 801811c:	b348      	cbz	r0, 8018172 <theme_apply+0xbee>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 801811e:	4d3d      	ldr	r5, [pc, #244]	; (8018214 <theme_apply+0xc90>)
 8018120:	6829      	ldr	r1, [r5, #0]
 8018122:	2200      	movs	r2, #0
 8018124:	3150      	adds	r1, #80	; 0x50
 8018126:	4620      	mov	r0, r4
 8018128:	f7f2 fce4 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 801812c:	6829      	ldr	r1, [r5, #0]
 801812e:	2200      	movs	r2, #0
 8018130:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8018134:	4620      	mov	r0, r4
 8018136:	f7f2 fcdd 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 801813a:	6829      	ldr	r1, [r5, #0]
 801813c:	2204      	movs	r2, #4
 801813e:	3128      	adds	r1, #40	; 0x28
 8018140:	4620      	mov	r0, r4
 8018142:	f7f2 fcd7 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 8018146:	6829      	ldr	r1, [r5, #0]
 8018148:	2204      	movs	r2, #4
 801814a:	f501 7102 	add.w	r1, r1, #520	; 0x208
 801814e:	4620      	mov	r0, r4
 8018150:	f7f2 fcd0 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 8018154:	6829      	ldr	r1, [r5, #0]
 8018156:	2220      	movs	r2, #32
 8018158:	f501 7102 	add.w	r1, r1, #520	; 0x208
 801815c:	4620      	mov	r0, r4
 801815e:	f7f2 fcc9 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8018162:	6829      	ldr	r1, [r5, #0]
 8018164:	2220      	movs	r2, #32
 8018166:	3158      	adds	r1, #88	; 0x58
 8018168:	4620      	mov	r0, r4
 801816a:	f7f2 fcc3 	bl	800aaf4 <lv_obj_add_style>
 801816e:	f7ff ba1e 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_class)) {
 8018172:	4937      	ldr	r1, [pc, #220]	; (8018250 <theme_apply+0xccc>)
 8018174:	4620      	mov	r0, r4
 8018176:	f7ee fe73 	bl	8006e60 <lv_obj_check_type>
 801817a:	b178      	cbz	r0, 801819c <theme_apply+0xc18>
        lv_obj_add_style(obj, &styles->card, 0);
 801817c:	4d25      	ldr	r5, [pc, #148]	; (8018214 <theme_apply+0xc90>)
 801817e:	6829      	ldr	r1, [r5, #0]
 8018180:	2200      	movs	r2, #0
 8018182:	3118      	adds	r1, #24
 8018184:	4620      	mov	r0, r4
 8018186:	f7f2 fcb5 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_bg, 0);
 801818a:	6829      	ldr	r1, [r5, #0]
 801818c:	2200      	movs	r2, #0
 801818e:	f501 71c4 	add.w	r1, r1, #392	; 0x188
 8018192:	4620      	mov	r0, r4
 8018194:	f7f2 fcae 	bl	800aaf4 <lv_obj_add_style>
 8018198:	f7ff ba09 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_cont_class)) {
 801819c:	492d      	ldr	r1, [pc, #180]	; (8018254 <theme_apply+0xcd0>)
 801819e:	4620      	mov	r0, r4
 80181a0:	f7ee fe5e 	bl	8006e60 <lv_obj_check_type>
 80181a4:	b1b0      	cbz	r0, 80181d4 <theme_apply+0xc50>
        lv_obj_add_style(obj, &styles->menu_sidebar_cont, 0);
 80181a6:	4d1b      	ldr	r5, [pc, #108]	; (8018214 <theme_apply+0xc90>)
 80181a8:	6829      	ldr	r1, [r5, #0]
 80181aa:	2200      	movs	r2, #0
 80181ac:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 80181b0:	4620      	mov	r0, r4
 80181b2:	f7f2 fc9f 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80181b6:	6829      	ldr	r1, [r5, #0]
 80181b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80181bc:	3108      	adds	r1, #8
 80181be:	4620      	mov	r0, r4
 80181c0:	f7f2 fc98 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80181c4:	6829      	ldr	r1, [r5, #0]
 80181c6:	4a16      	ldr	r2, [pc, #88]	; (8018220 <theme_apply+0xc9c>)
 80181c8:	3110      	adds	r1, #16
 80181ca:	4620      	mov	r0, r4
 80181cc:	f7f2 fc92 	bl	800aaf4 <lv_obj_add_style>
 80181d0:	f7ff b9ed 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_main_cont_class)) {
 80181d4:	4920      	ldr	r1, [pc, #128]	; (8018258 <theme_apply+0xcd4>)
 80181d6:	4620      	mov	r0, r4
 80181d8:	f7ee fe42 	bl	8006e60 <lv_obj_check_type>
 80181dc:	2800      	cmp	r0, #0
 80181de:	d03d      	beq.n	801825c <theme_apply+0xcd8>
        lv_obj_add_style(obj, &styles->menu_main_cont, 0);
 80181e0:	4d0c      	ldr	r5, [pc, #48]	; (8018214 <theme_apply+0xc90>)
 80181e2:	6829      	ldr	r1, [r5, #0]
 80181e4:	2200      	movs	r2, #0
 80181e6:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 80181ea:	4620      	mov	r0, r4
 80181ec:	f7f2 fc82 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80181f0:	6829      	ldr	r1, [r5, #0]
 80181f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80181f6:	3108      	adds	r1, #8
 80181f8:	4620      	mov	r0, r4
 80181fa:	f7f2 fc7b 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80181fe:	6829      	ldr	r1, [r5, #0]
 8018200:	4a07      	ldr	r2, [pc, #28]	; (8018220 <theme_apply+0xc9c>)
 8018202:	3110      	adds	r1, #16
 8018204:	4620      	mov	r0, r4
 8018206:	f7f2 fc75 	bl	800aaf4 <lv_obj_add_style>
 801820a:	f7ff b9d0 	b.w	80175ae <theme_apply+0x2a>
 801820e:	bf00      	nop
 8018210:	0802d83c 	.word	0x0802d83c
 8018214:	200026c4 	.word	0x200026c4
 8018218:	0802d7cc 	.word	0x0802d7cc
 801821c:	0803310c 	.word	0x0803310c
 8018220:	00010040 	.word	0x00010040
 8018224:	00070002 	.word	0x00070002
 8018228:	0802d644 	.word	0x0802d644
 801822c:	200026b4 	.word	0x200026b4
 8018230:	00050080 	.word	0x00050080
 8018234:	00050020 	.word	0x00050020
 8018238:	00050001 	.word	0x00050001
 801823c:	00050004 	.word	0x00050004
 8018240:	00050008 	.word	0x00050008
 8018244:	0802d698 	.word	0x0802d698
 8018248:	0802d6b4 	.word	0x0802d6b4
 801824c:	0802d67c 	.word	0x0802d67c
 8018250:	0802d6d0 	.word	0x0802d6d0
 8018254:	0802d794 	.word	0x0802d794
 8018258:	0802d708 	.word	0x0802d708
    else if(lv_obj_check_type(obj, &lv_menu_cont_class)) {
 801825c:	49a2      	ldr	r1, [pc, #648]	; (80184e8 <theme_apply+0xf64>)
 801825e:	4620      	mov	r0, r4
 8018260:	f7ee fdfe 	bl	8006e60 <lv_obj_check_type>
 8018264:	b310      	cbz	r0, 80182ac <theme_apply+0xd28>
        lv_obj_add_style(obj, &styles->menu_cont, 0);
 8018266:	4da1      	ldr	r5, [pc, #644]	; (80184ec <theme_apply+0xf68>)
 8018268:	6829      	ldr	r1, [r5, #0]
 801826a:	2200      	movs	r2, #0
 801826c:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8018270:	4620      	mov	r0, r4
 8018272:	f7f2 fc3f 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 8018276:	6829      	ldr	r1, [r5, #0]
 8018278:	2220      	movs	r2, #32
 801827a:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 801827e:	4620      	mov	r0, r4
 8018280:	f7f2 fc38 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_PRESSED | LV_STATE_CHECKED);
 8018284:	6829      	ldr	r1, [r5, #0]
 8018286:	2221      	movs	r2, #33	; 0x21
 8018288:	3130      	adds	r1, #48	; 0x30
 801828a:	4620      	mov	r0, r4
 801828c:	f7f2 fc32 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_CHECKED);
 8018290:	6829      	ldr	r1, [r5, #0]
 8018292:	2201      	movs	r2, #1
 8018294:	3130      	adds	r1, #48	; 0x30
 8018296:	4620      	mov	r0, r4
 8018298:	f7f2 fc2c 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 801829c:	6829      	ldr	r1, [r5, #0]
 801829e:	2204      	movs	r2, #4
 80182a0:	3128      	adds	r1, #40	; 0x28
 80182a2:	4620      	mov	r0, r4
 80182a4:	f7f2 fc26 	bl	800aaf4 <lv_obj_add_style>
 80182a8:	f7ff b981 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 80182ac:	4990      	ldr	r1, [pc, #576]	; (80184f0 <theme_apply+0xf6c>)
 80182ae:	4620      	mov	r0, r4
 80182b0:	f7ee fdd6 	bl	8006e60 <lv_obj_check_type>
 80182b4:	b920      	cbnz	r0, 80182c0 <theme_apply+0xd3c>
            lv_obj_check_type(obj, &lv_menu_main_header_cont_class)) {
 80182b6:	498f      	ldr	r1, [pc, #572]	; (80184f4 <theme_apply+0xf70>)
 80182b8:	4620      	mov	r0, r4
 80182ba:	f7ee fdd1 	bl	8006e60 <lv_obj_check_type>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 80182be:	b148      	cbz	r0, 80182d4 <theme_apply+0xd50>
        lv_obj_add_style(obj, &styles->menu_header_cont, 0);
 80182c0:	4b8a      	ldr	r3, [pc, #552]	; (80184ec <theme_apply+0xf68>)
 80182c2:	6819      	ldr	r1, [r3, #0]
 80182c4:	2200      	movs	r2, #0
 80182c6:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 80182ca:	4620      	mov	r0, r4
 80182cc:	f7f2 fc12 	bl	800aaf4 <lv_obj_add_style>
 80182d0:	f7ff b96d 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_page_class)) {
 80182d4:	4988      	ldr	r1, [pc, #544]	; (80184f8 <theme_apply+0xf74>)
 80182d6:	4620      	mov	r0, r4
 80182d8:	f7ee fdc2 	bl	8006e60 <lv_obj_check_type>
 80182dc:	b1b0      	cbz	r0, 801830c <theme_apply+0xd88>
        lv_obj_add_style(obj, &styles->menu_page, 0);
 80182de:	4d83      	ldr	r5, [pc, #524]	; (80184ec <theme_apply+0xf68>)
 80182e0:	6829      	ldr	r1, [r5, #0]
 80182e2:	2200      	movs	r2, #0
 80182e4:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 80182e8:	4620      	mov	r0, r4
 80182ea:	f7f2 fc03 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80182ee:	6829      	ldr	r1, [r5, #0]
 80182f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80182f4:	3108      	adds	r1, #8
 80182f6:	4620      	mov	r0, r4
 80182f8:	f7f2 fbfc 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80182fc:	6829      	ldr	r1, [r5, #0]
 80182fe:	4a7f      	ldr	r2, [pc, #508]	; (80184fc <theme_apply+0xf78>)
 8018300:	3110      	adds	r1, #16
 8018302:	4620      	mov	r0, r4
 8018304:	f7f2 fbf6 	bl	800aaf4 <lv_obj_add_style>
 8018308:	f7ff b951 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_section_class)) {
 801830c:	497c      	ldr	r1, [pc, #496]	; (8018500 <theme_apply+0xf7c>)
 801830e:	4620      	mov	r0, r4
 8018310:	f7ee fda6 	bl	8006e60 <lv_obj_check_type>
 8018314:	b148      	cbz	r0, 801832a <theme_apply+0xda6>
        lv_obj_add_style(obj, &styles->menu_section, 0);
 8018316:	4b75      	ldr	r3, [pc, #468]	; (80184ec <theme_apply+0xf68>)
 8018318:	6819      	ldr	r1, [r3, #0]
 801831a:	2200      	movs	r2, #0
 801831c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 8018320:	4620      	mov	r0, r4
 8018322:	f7f2 fbe7 	bl	800aaf4 <lv_obj_add_style>
 8018326:	f7ff b942 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_separator_class)) {
 801832a:	4976      	ldr	r1, [pc, #472]	; (8018504 <theme_apply+0xf80>)
 801832c:	4620      	mov	r0, r4
 801832e:	f7ee fd97 	bl	8006e60 <lv_obj_check_type>
 8018332:	b148      	cbz	r0, 8018348 <theme_apply+0xdc4>
        lv_obj_add_style(obj, &styles->menu_separator, 0);
 8018334:	4b6d      	ldr	r3, [pc, #436]	; (80184ec <theme_apply+0xf68>)
 8018336:	6819      	ldr	r1, [r3, #0]
 8018338:	2200      	movs	r2, #0
 801833a:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
 801833e:	4620      	mov	r0, r4
 8018340:	f7f2 fbd8 	bl	800aaf4 <lv_obj_add_style>
 8018344:	f7ff b933 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 8018348:	496f      	ldr	r1, [pc, #444]	; (8018508 <theme_apply+0xf84>)
 801834a:	4620      	mov	r0, r4
 801834c:	f7ee fd88 	bl	8006e60 <lv_obj_check_type>
 8018350:	b970      	cbnz	r0, 8018370 <theme_apply+0xdec>
    else if(lv_obj_check_type(obj, &lv_msgbox_backdrop_class)) {
 8018352:	496e      	ldr	r1, [pc, #440]	; (801850c <theme_apply+0xf88>)
 8018354:	4620      	mov	r0, r4
 8018356:	f7ee fd83 	bl	8006e60 <lv_obj_check_type>
 801835a:	b1c8      	cbz	r0, 8018390 <theme_apply+0xe0c>
        lv_obj_add_style(obj, &styles->msgbox_backdrop_bg, 0);
 801835c:	4b63      	ldr	r3, [pc, #396]	; (80184ec <theme_apply+0xf68>)
 801835e:	6819      	ldr	r1, [r3, #0]
 8018360:	2200      	movs	r2, #0
 8018362:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
 8018366:	4620      	mov	r0, r4
 8018368:	f7f2 fbc4 	bl	800aaf4 <lv_obj_add_style>
 801836c:	f7ff b91f 	b.w	80175ae <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->card, 0);
 8018370:	4d5e      	ldr	r5, [pc, #376]	; (80184ec <theme_apply+0xf68>)
 8018372:	6829      	ldr	r1, [r5, #0]
 8018374:	2200      	movs	r2, #0
 8018376:	3118      	adds	r1, #24
 8018378:	4620      	mov	r0, r4
 801837a:	f7f2 fbbb 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 801837e:	6829      	ldr	r1, [r5, #0]
 8018380:	2200      	movs	r2, #0
 8018382:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
 8018386:	4620      	mov	r0, r4
 8018388:	f7f2 fbb4 	bl	800aaf4 <lv_obj_add_style>
        return;
 801838c:	f7ff b90f 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 8018390:	495f      	ldr	r1, [pc, #380]	; (8018510 <theme_apply+0xf8c>)
 8018392:	4620      	mov	r0, r4
 8018394:	f7ee fd64 	bl	8006e60 <lv_obj_check_type>
 8018398:	b308      	cbz	r0, 80183de <theme_apply+0xe5a>
        lv_obj_add_style(obj, &styles->card, 0);
 801839a:	4d54      	ldr	r5, [pc, #336]	; (80184ec <theme_apply+0xf68>)
 801839c:	6829      	ldr	r1, [r5, #0]
 801839e:	2200      	movs	r2, #0
 80183a0:	3118      	adds	r1, #24
 80183a2:	4620      	mov	r0, r4
 80183a4:	f7f2 fba6 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 80183a8:	6829      	ldr	r1, [r5, #0]
 80183aa:	2200      	movs	r2, #0
 80183ac:	3178      	adds	r1, #120	; 0x78
 80183ae:	4620      	mov	r0, r4
 80183b0:	f7f2 fba0 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80183b4:	6829      	ldr	r1, [r5, #0]
 80183b6:	2204      	movs	r2, #4
 80183b8:	31a0      	adds	r1, #160	; 0xa0
 80183ba:	4620      	mov	r0, r4
 80183bc:	f7f2 fb9a 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80183c0:	6829      	ldr	r1, [r5, #0]
 80183c2:	2208      	movs	r2, #8
 80183c4:	31a8      	adds	r1, #168	; 0xa8
 80183c6:	4620      	mov	r0, r4
 80183c8:	f7f2 fb94 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 80183cc:	6829      	ldr	r1, [r5, #0]
 80183ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80183d2:	3128      	adds	r1, #40	; 0x28
 80183d4:	4620      	mov	r0, r4
 80183d6:	f7f2 fb8d 	bl	800aaf4 <lv_obj_add_style>
 80183da:	f7ff b8e8 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 80183de:	494d      	ldr	r1, [pc, #308]	; (8018514 <theme_apply+0xf90>)
 80183e0:	4620      	mov	r0, r4
 80183e2:	f7ee fd3d 	bl	8006e60 <lv_obj_check_type>
 80183e6:	b1a0      	cbz	r0, 8018412 <theme_apply+0xe8e>
        lv_obj_add_style(obj, &styles->scr, 0);
 80183e8:	4d40      	ldr	r5, [pc, #256]	; (80184ec <theme_apply+0xf68>)
 80183ea:	2200      	movs	r2, #0
 80183ec:	6829      	ldr	r1, [r5, #0]
 80183ee:	4620      	mov	r0, r4
 80183f0:	f7f2 fb80 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80183f4:	6829      	ldr	r1, [r5, #0]
 80183f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80183fa:	3108      	adds	r1, #8
 80183fc:	4620      	mov	r0, r4
 80183fe:	f7f2 fb79 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8018402:	6829      	ldr	r1, [r5, #0]
 8018404:	4a3d      	ldr	r2, [pc, #244]	; (80184fc <theme_apply+0xf78>)
 8018406:	3110      	adds	r1, #16
 8018408:	4620      	mov	r0, r4
 801840a:	f7f2 fb73 	bl	800aaf4 <lv_obj_add_style>
 801840e:	f7ff b8ce 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 8018412:	4941      	ldr	r1, [pc, #260]	; (8018518 <theme_apply+0xf94>)
 8018414:	4620      	mov	r0, r4
 8018416:	f7ee fd23 	bl	8006e60 <lv_obj_check_type>
 801841a:	b178      	cbz	r0, 801843c <theme_apply+0xeb8>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801841c:	4d33      	ldr	r5, [pc, #204]	; (80184ec <theme_apply+0xf68>)
 801841e:	6829      	ldr	r1, [r5, #0]
 8018420:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8018424:	3108      	adds	r1, #8
 8018426:	4620      	mov	r0, r4
 8018428:	f7f2 fb64 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801842c:	6829      	ldr	r1, [r5, #0]
 801842e:	4a33      	ldr	r2, [pc, #204]	; (80184fc <theme_apply+0xf78>)
 8018430:	3110      	adds	r1, #16
 8018432:	4620      	mov	r0, r4
 8018434:	f7f2 fb5e 	bl	800aaf4 <lv_obj_add_style>
 8018438:	f7ff b8b9 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tabview_class)) {
 801843c:	4937      	ldr	r1, [pc, #220]	; (801851c <theme_apply+0xf98>)
 801843e:	4620      	mov	r0, r4
 8018440:	f7ee fd0e 	bl	8006e60 <lv_obj_check_type>
 8018444:	b168      	cbz	r0, 8018462 <theme_apply+0xede>
        lv_obj_add_style(obj, &styles->scr, 0);
 8018446:	4d29      	ldr	r5, [pc, #164]	; (80184ec <theme_apply+0xf68>)
 8018448:	2200      	movs	r2, #0
 801844a:	6829      	ldr	r1, [r5, #0]
 801844c:	4620      	mov	r0, r4
 801844e:	f7f2 fb51 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8018452:	6829      	ldr	r1, [r5, #0]
 8018454:	2200      	movs	r2, #0
 8018456:	3168      	adds	r1, #104	; 0x68
 8018458:	4620      	mov	r0, r4
 801845a:	f7f2 fb4b 	bl	800aaf4 <lv_obj_add_style>
 801845e:	f7ff b8a6 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_win_class)) {
 8018462:	492f      	ldr	r1, [pc, #188]	; (8018520 <theme_apply+0xf9c>)
 8018464:	4620      	mov	r0, r4
 8018466:	f7ee fcfb 	bl	8006e60 <lv_obj_check_type>
 801846a:	b140      	cbz	r0, 801847e <theme_apply+0xefa>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 801846c:	4b1f      	ldr	r3, [pc, #124]	; (80184ec <theme_apply+0xf68>)
 801846e:	6819      	ldr	r1, [r3, #0]
 8018470:	2200      	movs	r2, #0
 8018472:	31c0      	adds	r1, #192	; 0xc0
 8018474:	4620      	mov	r0, r4
 8018476:	f7f2 fb3d 	bl	800aaf4 <lv_obj_add_style>
 801847a:	f7ff b898 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 801847e:	4929      	ldr	r1, [pc, #164]	; (8018524 <theme_apply+0xfa0>)
 8018480:	4620      	mov	r0, r4
 8018482:	f7ee fced 	bl	8006e60 <lv_obj_check_type>
 8018486:	b1e8      	cbz	r0, 80184c4 <theme_apply+0xf40>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 8018488:	4d18      	ldr	r5, [pc, #96]	; (80184ec <theme_apply+0xf68>)
 801848a:	6829      	ldr	r1, [r5, #0]
 801848c:	2200      	movs	r2, #0
 801848e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8018492:	4620      	mov	r0, r4
 8018494:	f7f2 fb2e 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 8018498:	6829      	ldr	r1, [r5, #0]
 801849a:	2200      	movs	r2, #0
 801849c:	3180      	adds	r1, #128	; 0x80
 801849e:	4620      	mov	r0, r4
 80184a0:	f7f2 fb28 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 80184a4:	6829      	ldr	r1, [r5, #0]
 80184a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80184aa:	3150      	adds	r1, #80	; 0x50
 80184ac:	4620      	mov	r0, r4
 80184ae:	f7f2 fb21 	bl	800aaf4 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 80184b2:	6829      	ldr	r1, [r5, #0]
 80184b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80184b8:	3180      	adds	r1, #128	; 0x80
 80184ba:	4620      	mov	r0, r4
 80184bc:	f7f2 fb1a 	bl	800aaf4 <lv_obj_add_style>
 80184c0:	f7ff b875 	b.w	80175ae <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 80184c4:	4918      	ldr	r1, [pc, #96]	; (8018528 <theme_apply+0xfa4>)
 80184c6:	4620      	mov	r0, r4
 80184c8:	f7ee fcca 	bl	8006e60 <lv_obj_check_type>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	f43f a86e 	beq.w	80175ae <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->led, 0);
 80184d2:	4b06      	ldr	r3, [pc, #24]	; (80184ec <theme_apply+0xf68>)
 80184d4:	6819      	ldr	r1, [r3, #0]
 80184d6:	2200      	movs	r2, #0
 80184d8:	f501 710a 	add.w	r1, r1, #552	; 0x228
 80184dc:	4620      	mov	r0, r4
 80184de:	f7f2 fb09 	bl	800aaf4 <lv_obj_add_style>
 80184e2:	f7ff b864 	b.w	80175ae <theme_apply+0x2a>
 80184e6:	bf00      	nop
 80184e8:	0802d6ec 	.word	0x0802d6ec
 80184ec:	200026c4 	.word	0x200026c4
 80184f0:	0802d7b0 	.word	0x0802d7b0
 80184f4:	0802d724 	.word	0x0802d724
 80184f8:	0802d740 	.word	0x0802d740
 80184fc:	00010040 	.word	0x00010040
 8018500:	0802d75c 	.word	0x0802d75c
 8018504:	0802d778 	.word	0x0802d778
 8018508:	0802d804 	.word	0x0802d804
 801850c:	0802d7e8 	.word	0x0802d7e8
 8018510:	0802d820 	.word	0x0802d820
 8018514:	0802d874 	.word	0x0802d874
 8018518:	0802d890 	.word	0x0802d890
 801851c:	0802d858 	.word	0x0802d858
 8018520:	0802d8ac 	.word	0x0802d8ac
 8018524:	0802d12c 	.word	0x0802d12c
 8018528:	0802d660 	.word	0x0802d660

0801852c <dark_color_filter_cb>:
{
 801852c:	b508      	push	{r3, lr}
 801852e:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 8018530:	4611      	mov	r1, r2
 8018532:	f008 fd4d 	bl	8020fd0 <lv_color_darken>
}
 8018536:	bd08      	pop	{r3, pc}

08018538 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
 8018538:	b508      	push	{r3, lr}
    if(inited) {
 801853a:	4b04      	ldr	r3, [pc, #16]	; (801854c <style_init_reset+0x14>)
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	b113      	cbz	r3, 8018546 <style_init_reset+0xe>
        lv_style_reset(style);
 8018540:	f00a f98e 	bl	8022860 <lv_style_reset>
    }
    else {
        lv_style_init(style);
    }
}
 8018544:	bd08      	pop	{r3, pc}
        lv_style_init(style);
 8018546:	f00a f986 	bl	8022856 <lv_style_init>
}
 801854a:	e7fb      	b.n	8018544 <style_init_reset+0xc>
 801854c:	200026c0 	.word	0x200026c0

08018550 <grey_filter_cb>:
{
 8018550:	b538      	push	{r3, r4, r5, lr}
 8018552:	460d      	mov	r5, r1
 8018554:	4614      	mov	r4, r2
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 8018556:	4b1a      	ldr	r3, [pc, #104]	; (80185c0 <grey_filter_cb+0x70>)
 8018558:	6a1b      	ldr	r3, [r3, #32]
 801855a:	f013 0f01 	tst.w	r3, #1
 801855e:	d017      	beq.n	8018590 <grey_filter_cb+0x40>
 8018560:	2102      	movs	r1, #2
 8018562:	2012      	movs	r0, #18
 8018564:	f008 fde4 	bl	8021130 <lv_palette_darken>
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8018568:	b2ab      	uxth	r3, r5
 801856a:	ea43 4105 	orr.w	r1, r3, r5, lsl #16
 801856e:	4d15      	ldr	r5, [pc, #84]	; (80185c4 <grey_filter_cb+0x74>)
 8018570:	4029      	ands	r1, r5
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8018572:	b283      	uxth	r3, r0
 8018574:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8018578:	4028      	ands	r0, r5
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801857a:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801857c:	3404      	adds	r4, #4
 801857e:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8018580:	fb04 f000 	mul.w	r0, r4, r0
 8018584:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8018588:	4028      	ands	r0, r5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801858a:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 801858e:	bd38      	pop	{r3, r4, r5, pc}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 8018590:	2102      	movs	r1, #2
 8018592:	2012      	movs	r0, #18
 8018594:	f008 fdb6 	bl	8021104 <lv_palette_lighten>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8018598:	b2ab      	uxth	r3, r5
 801859a:	ea43 4105 	orr.w	r1, r3, r5, lsl #16
 801859e:	4a09      	ldr	r2, [pc, #36]	; (80185c4 <grey_filter_cb+0x74>)
 80185a0:	4011      	ands	r1, r2
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80185a2:	b283      	uxth	r3, r0
 80185a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80185a8:	4010      	ands	r0, r2
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80185aa:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80185ac:	3404      	adds	r4, #4
 80185ae:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80185b0:	fb04 f000 	mul.w	r0, r4, r0
 80185b4:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 80185b8:	4010      	ands	r0, r2
    return ret;
 80185ba:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
 80185be:	e7e6      	b.n	801858e <grey_filter_cb+0x3e>
 80185c0:	200026c8 	.word	0x200026c8
 80185c4:	07e0f81f 	.word	0x07e0f81f

080185c8 <lv_theme_default_init>:
{
 80185c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185cc:	b082      	sub	sp, #8
 80185ce:	4605      	mov	r5, r0
 80185d0:	4688      	mov	r8, r1
 80185d2:	4617      	mov	r7, r2
 80185d4:	461c      	mov	r4, r3
 80185d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 80185d8:	4bbf      	ldr	r3, [pc, #764]	; (80188d8 <lv_theme_default_init+0x310>)
    if(!lv_theme_default_is_inited()) {
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	f001 8496 	beq.w	8019f0e <lv_theme_default_init+0x1946>
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 80185e2:	f007 fee3 	bl	80203ac <lv_disp_get_default>
 80185e6:	f007 fee7 	bl	80203b8 <lv_disp_get_hor_res>
 80185ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 80185ee:	f301 849b 	bgt.w	8019f28 <lv_theme_default_init+0x1960>
 80185f2:	4bba      	ldr	r3, [pc, #744]	; (80188dc <lv_theme_default_init+0x314>)
 80185f4:	2203      	movs	r2, #3
 80185f6:	701a      	strb	r2, [r3, #0]
    theme.disp = disp;
 80185f8:	48b9      	ldr	r0, [pc, #740]	; (80188e0 <lv_theme_default_init+0x318>)
 80185fa:	60c5      	str	r5, [r0, #12]
    theme.color_primary = color_primary;
 80185fc:	f8a0 8010 	strh.w	r8, [r0, #16]
    theme.color_secondary = color_secondary;
 8018600:	8247      	strh	r7, [r0, #18]
    theme.font_small = font;
 8018602:	6146      	str	r6, [r0, #20]
    theme.font_normal = font;
 8018604:	6186      	str	r6, [r0, #24]
    theme.font_large = font;
 8018606:	61c6      	str	r6, [r0, #28]
    theme.apply_cb = theme_apply;
 8018608:	4bb6      	ldr	r3, [pc, #728]	; (80188e4 <lv_theme_default_init+0x31c>)
 801860a:	6003      	str	r3, [r0, #0]
    theme.flags = dark ? MODE_DARK : 0;
 801860c:	6204      	str	r4, [r0, #32]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 801860e:	2c00      	cmp	r4, #0
 8018610:	f001 8497 	beq.w	8019f42 <lv_theme_default_init+0x197a>
 8018614:	4bb4      	ldr	r3, [pc, #720]	; (80188e8 <lv_theme_default_init+0x320>)
 8018616:	f241 02a3 	movw	r2, #4259	; 0x10a3
 801861a:	801a      	strh	r2, [r3, #0]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 801861c:	2105      	movs	r1, #5
 801861e:	2012      	movs	r0, #18
 8018620:	f008 fd70 	bl	8021104 <lv_palette_lighten>
 8018624:	4bb1      	ldr	r3, [pc, #708]	; (80188ec <lv_theme_default_init+0x324>)
 8018626:	8018      	strh	r0, [r3, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8018628:	4bad      	ldr	r3, [pc, #692]	; (80188e0 <lv_theme_default_init+0x318>)
 801862a:	6a1b      	ldr	r3, [r3, #32]
 801862c:	f013 0f01 	tst.w	r3, #1
 8018630:	f001 849b 	beq.w	8019f6a <lv_theme_default_init+0x19a2>
 8018634:	4bae      	ldr	r3, [pc, #696]	; (80188f0 <lv_theme_default_init+0x328>)
 8018636:	f642 1246 	movw	r2, #10566	; 0x2946
 801863a:	801a      	strh	r2, [r3, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 801863c:	4bad      	ldr	r3, [pc, #692]	; (80188f4 <lv_theme_default_init+0x32c>)
 801863e:	f642 1286 	movw	r2, #10630	; 0x2986
 8018642:	801a      	strh	r2, [r3, #0]
    style_init_reset(&styles->transition_delayed);
 8018644:	4cac      	ldr	r4, [pc, #688]	; (80188f8 <lv_theme_default_init+0x330>)
 8018646:	6820      	ldr	r0, [r4, #0]
 8018648:	30d0      	adds	r0, #208	; 0xd0
 801864a:	f7ff ff75 	bl	8018538 <style_init_reset>
    style_init_reset(&styles->transition_normal);
 801864e:	6820      	ldr	r0, [r4, #0]
 8018650:	30d8      	adds	r0, #216	; 0xd8
 8018652:	f7ff ff71 	bl	8018538 <style_init_reset>
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 8018656:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 80188fc <lv_theme_default_init+0x334>
 801865a:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8018900 <lv_theme_default_init+0x338>
 801865e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8018904 <lv_theme_default_init+0x33c>
 8018662:	2600      	movs	r6, #0
 8018664:	9601      	str	r6, [sp, #4]
 8018666:	2346      	movs	r3, #70	; 0x46
 8018668:	9300      	str	r3, [sp, #0]
 801866a:	2350      	movs	r3, #80	; 0x50
 801866c:	4652      	mov	r2, sl
 801866e:	4649      	mov	r1, r9
 8018670:	4640      	mov	r0, r8
 8018672:	f00a f9af 	bl	80229d4 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 8018676:	4fa4      	ldr	r7, [pc, #656]	; (8018908 <lv_theme_default_init+0x340>)
 8018678:	9601      	str	r6, [sp, #4]
 801867a:	9600      	str	r6, [sp, #0]
 801867c:	2350      	movs	r3, #80	; 0x50
 801867e:	4652      	mov	r2, sl
 8018680:	4649      	mov	r1, r9
 8018682:	4638      	mov	r0, r7
 8018684:	f00a f9a6 	bl	80229d4 <lv_style_transition_dsc_init>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 8018688:	6820      	ldr	r0, [r4, #0]
 801868a:	4641      	mov	r1, r8
 801868c:	30d0      	adds	r0, #208	; 0xd0
 801868e:	f00a fc7f 	bl	8022f90 <lv_style_set_transition>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 8018692:	6820      	ldr	r0, [r4, #0]
 8018694:	4639      	mov	r1, r7
 8018696:	30d8      	adds	r0, #216	; 0xd8
 8018698:	f00a fc7a 	bl	8022f90 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar);
 801869c:	6820      	ldr	r0, [r4, #0]
 801869e:	3008      	adds	r0, #8
 80186a0:	f7ff ff4a 	bl	8018538 <style_init_reset>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 80186a4:	4b8e      	ldr	r3, [pc, #568]	; (80188e0 <lv_theme_default_init+0x318>)
 80186a6:	6a1b      	ldr	r3, [r3, #32]
 80186a8:	f013 0f01 	tst.w	r3, #1
 80186ac:	f001 8470 	beq.w	8019f90 <lv_theme_default_init+0x19c8>
 80186b0:	2102      	movs	r1, #2
 80186b2:	2012      	movs	r0, #18
 80186b4:	f008 fd3c 	bl	8021130 <lv_palette_darken>
 80186b8:	4601      	mov	r1, r0
    lv_style_set_bg_color(&styles->scrollbar, sb_color);
 80186ba:	4c8f      	ldr	r4, [pc, #572]	; (80188f8 <lv_theme_default_init+0x330>)
 80186bc:	6820      	ldr	r0, [r4, #0]
 80186be:	3008      	adds	r0, #8
 80186c0:	f00a fb76 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 80186c4:	6820      	ldr	r0, [r4, #0]
 80186c6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80186ca:	3008      	adds	r0, #8
 80186cc:	f00a fc42 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_pad_all(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 80186d0:	6826      	ldr	r6, [r4, #0]
 80186d2:	3608      	adds	r6, #8
 80186d4:	4b82      	ldr	r3, [pc, #520]	; (80188e0 <lv_theme_default_init+0x318>)
 80186d6:	68dc      	ldr	r4, [r3, #12]
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
{
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 80186d8:	4620      	mov	r0, r4
 80186da:	f007 fe95 	bl	8020408 <lv_disp_get_dpi>
 80186de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80186e2:	28ef      	cmp	r0, #239	; 0xef
 80186e4:	f301 845a 	bgt.w	8019f9c <lv_theme_default_init+0x19d4>
 80186e8:	2401      	movs	r4, #1
    lv_style_set_height(style, value);
}

static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_left(style, value);
 80186ea:	4621      	mov	r1, r4
 80186ec:	4630      	mov	r0, r6
 80186ee:	f00a fb47 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 80186f2:	4621      	mov	r1, r4
 80186f4:	4630      	mov	r0, r6
 80186f6:	f00a fb49 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 80186fa:	4621      	mov	r1, r4
 80186fc:	4630      	mov	r0, r6
 80186fe:	f00a fb33 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018702:	4621      	mov	r1, r4
 8018704:	4630      	mov	r0, r6
 8018706:	f00a fb35 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_width(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 801870a:	4b7b      	ldr	r3, [pc, #492]	; (80188f8 <lv_theme_default_init+0x330>)
 801870c:	681c      	ldr	r4, [r3, #0]
 801870e:	3408      	adds	r4, #8
 8018710:	4b73      	ldr	r3, [pc, #460]	; (80188e0 <lv_theme_default_init+0x318>)
 8018712:	68de      	ldr	r6, [r3, #12]
 8018714:	4630      	mov	r0, r6
 8018716:	f007 fe77 	bl	8020408 <lv_disp_get_dpi>
 801871a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801871e:	28ef      	cmp	r0, #239	; 0xef
 8018720:	f301 8460 	bgt.w	8019fe4 <lv_theme_default_init+0x1a1c>
 8018724:	2101      	movs	r1, #1
 8018726:	4620      	mov	r0, r4
 8018728:	f00a fafa 	bl	8022d20 <lv_style_set_width>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 801872c:	4c72      	ldr	r4, [pc, #456]	; (80188f8 <lv_theme_default_init+0x330>)
 801872e:	6820      	ldr	r0, [r4, #0]
 8018730:	2166      	movs	r1, #102	; 0x66
 8018732:	3008      	adds	r0, #8
 8018734:	f00a fb48 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 8018738:	6820      	ldr	r0, [r4, #0]
 801873a:	4973      	ldr	r1, [pc, #460]	; (8018908 <lv_theme_default_init+0x340>)
 801873c:	3008      	adds	r0, #8
 801873e:	f00a fc27 	bl	8022f90 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar_scrolled);
 8018742:	6820      	ldr	r0, [r4, #0]
 8018744:	3010      	adds	r0, #16
 8018746:	f7ff fef7 	bl	8018538 <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 801874a:	6820      	ldr	r0, [r4, #0]
 801874c:	21ff      	movs	r1, #255	; 0xff
 801874e:	3010      	adds	r0, #16
 8018750:	f00a fb3a 	bl	8022dc8 <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 8018754:	6820      	ldr	r0, [r4, #0]
 8018756:	f7ff feef 	bl	8018538 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 801875a:	21ff      	movs	r1, #255	; 0xff
 801875c:	6820      	ldr	r0, [r4, #0]
 801875e:	f00a fb33 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 8018762:	4b61      	ldr	r3, [pc, #388]	; (80188e8 <lv_theme_default_init+0x320>)
 8018764:	8819      	ldrh	r1, [r3, #0]
 8018766:	6820      	ldr	r0, [r4, #0]
 8018768:	f00a fb22 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 801876c:	4b5f      	ldr	r3, [pc, #380]	; (80188ec <lv_theme_default_init+0x324>)
 801876e:	8819      	ldrh	r1, [r3, #0]
 8018770:	6820      	ldr	r0, [r4, #0]
 8018772:	f00a fbd1 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 8018776:	6824      	ldr	r4, [r4, #0]
 8018778:	4b58      	ldr	r3, [pc, #352]	; (80188dc <lv_theme_default_init+0x314>)
 801877a:	781b      	ldrb	r3, [r3, #0]
 801877c:	2b01      	cmp	r3, #1
 801877e:	f001 8441 	beq.w	801a004 <lv_theme_default_init+0x1a3c>
 8018782:	2b02      	cmp	r3, #2
 8018784:	f001 845b 	beq.w	801a03e <lv_theme_default_init+0x1a76>
 8018788:	4b55      	ldr	r3, [pc, #340]	; (80188e0 <lv_theme_default_init+0x318>)
 801878a:	68de      	ldr	r6, [r3, #12]
 801878c:	4630      	mov	r0, r6
 801878e:	f007 fe3b 	bl	8020408 <lv_disp_get_dpi>
 8018792:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018796:	0040      	lsls	r0, r0, #1
 8018798:	28ef      	cmp	r0, #239	; 0xef
 801879a:	f301 846d 	bgt.w	801a078 <lv_theme_default_init+0x1ab0>
 801879e:	2101      	movs	r1, #1
 80187a0:	4620      	mov	r0, r4
 80187a2:	f00a faf9 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 80187a6:	4b54      	ldr	r3, [pc, #336]	; (80188f8 <lv_theme_default_init+0x330>)
 80187a8:	681c      	ldr	r4, [r3, #0]
 80187aa:	4b4c      	ldr	r3, [pc, #304]	; (80188dc <lv_theme_default_init+0x314>)
 80187ac:	781b      	ldrb	r3, [r3, #0]
 80187ae:	2b01      	cmp	r3, #1
 80187b0:	f001 8472 	beq.w	801a098 <lv_theme_default_init+0x1ad0>
 80187b4:	2b02      	cmp	r3, #2
 80187b6:	f001 848c 	beq.w	801a0d2 <lv_theme_default_init+0x1b0a>
 80187ba:	4b49      	ldr	r3, [pc, #292]	; (80188e0 <lv_theme_default_init+0x318>)
 80187bc:	68de      	ldr	r6, [r3, #12]
 80187be:	4630      	mov	r0, r6
 80187c0:	f007 fe22 	bl	8020408 <lv_disp_get_dpi>
 80187c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80187c8:	0040      	lsls	r0, r0, #1
 80187ca:	28ef      	cmp	r0, #239	; 0xef
 80187cc:	f301 849e 	bgt.w	801a10c <lv_theme_default_init+0x1b44>
 80187d0:	2101      	movs	r1, #1
 80187d2:	4620      	mov	r0, r4
 80187d4:	f00a fae6 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 80187d8:	4c47      	ldr	r4, [pc, #284]	; (80188f8 <lv_theme_default_init+0x330>)
 80187da:	6820      	ldr	r0, [r4, #0]
 80187dc:	3018      	adds	r0, #24
 80187de:	f7ff feab 	bl	8018538 <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 80187e2:	6824      	ldr	r4, [r4, #0]
 80187e4:	3418      	adds	r4, #24
 80187e6:	4b3d      	ldr	r3, [pc, #244]	; (80188dc <lv_theme_default_init+0x314>)
 80187e8:	781b      	ldrb	r3, [r3, #0]
 80187ea:	2b01      	cmp	r3, #1
 80187ec:	f001 849e 	beq.w	801a12c <lv_theme_default_init+0x1b64>
 80187f0:	4b3b      	ldr	r3, [pc, #236]	; (80188e0 <lv_theme_default_init+0x318>)
 80187f2:	68de      	ldr	r6, [r3, #12]
 80187f4:	4630      	mov	r0, r6
 80187f6:	f007 fe07 	bl	8020408 <lv_disp_get_dpi>
 80187fa:	00c0      	lsls	r0, r0, #3
 80187fc:	28ef      	cmp	r0, #239	; 0xef
 80187fe:	f301 84b2 	bgt.w	801a166 <lv_theme_default_init+0x1b9e>
 8018802:	2101      	movs	r1, #1
 8018804:	4620      	mov	r0, r4
 8018806:	f00a fba5 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 801880a:	4c3b      	ldr	r4, [pc, #236]	; (80188f8 <lv_theme_default_init+0x330>)
 801880c:	6820      	ldr	r0, [r4, #0]
 801880e:	21ff      	movs	r1, #255	; 0xff
 8018810:	3018      	adds	r0, #24
 8018812:	f00a fad9 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 8018816:	6820      	ldr	r0, [r4, #0]
 8018818:	4b35      	ldr	r3, [pc, #212]	; (80188f0 <lv_theme_default_init+0x328>)
 801881a:	8819      	ldrh	r1, [r3, #0]
 801881c:	3018      	adds	r0, #24
 801881e:	f00a fac7 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 8018822:	6820      	ldr	r0, [r4, #0]
 8018824:	4b33      	ldr	r3, [pc, #204]	; (80188f4 <lv_theme_default_init+0x32c>)
 8018826:	8819      	ldrh	r1, [r3, #0]
 8018828:	3018      	adds	r0, #24
 801882a:	f00a fae5 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 801882e:	6824      	ldr	r4, [r4, #0]
 8018830:	3418      	adds	r4, #24
 8018832:	4b2b      	ldr	r3, [pc, #172]	; (80188e0 <lv_theme_default_init+0x318>)
 8018834:	68de      	ldr	r6, [r3, #12]
 8018836:	4630      	mov	r0, r6
 8018838:	f007 fde6 	bl	8020408 <lv_disp_get_dpi>
 801883c:	0040      	lsls	r0, r0, #1
 801883e:	28ef      	cmp	r0, #239	; 0xef
 8018840:	f301 849f 	bgt.w	801a182 <lv_theme_default_init+0x1bba>
 8018844:	2101      	movs	r1, #1
 8018846:	4620      	mov	r0, r4
 8018848:	f00a fae8 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 801884c:	4c2a      	ldr	r4, [pc, #168]	; (80188f8 <lv_theme_default_init+0x330>)
 801884e:	6820      	ldr	r0, [r4, #0]
 8018850:	2101      	movs	r1, #1
 8018852:	3018      	adds	r0, #24
 8018854:	f00a faee 	bl	8022e34 <lv_style_set_border_post>
    lv_style_set_text_color(&styles->card, color_text);
 8018858:	6820      	ldr	r0, [r4, #0]
 801885a:	4b24      	ldr	r3, [pc, #144]	; (80188ec <lv_theme_default_init+0x324>)
 801885c:	8819      	ldrh	r1, [r3, #0]
 801885e:	3018      	adds	r0, #24
 8018860:	f00a fb5a 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 8018864:	6826      	ldr	r6, [r4, #0]
 8018866:	3618      	adds	r6, #24
 8018868:	4b1c      	ldr	r3, [pc, #112]	; (80188dc <lv_theme_default_init+0x314>)
 801886a:	781b      	ldrb	r3, [r3, #0]
 801886c:	2b01      	cmp	r3, #1
 801886e:	f001 8496 	beq.w	801a19e <lv_theme_default_init+0x1bd6>
 8018872:	2b02      	cmp	r3, #2
 8018874:	f001 84b0 	beq.w	801a1d8 <lv_theme_default_init+0x1c10>
 8018878:	4b19      	ldr	r3, [pc, #100]	; (80188e0 <lv_theme_default_init+0x318>)
 801887a:	68dc      	ldr	r4, [r3, #12]
 801887c:	4620      	mov	r0, r4
 801887e:	f007 fdc3 	bl	8020408 <lv_disp_get_dpi>
 8018882:	0100      	lsls	r0, r0, #4
 8018884:	28ef      	cmp	r0, #239	; 0xef
 8018886:	f301 84c4 	bgt.w	801a212 <lv_theme_default_init+0x1c4a>
 801888a:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801888c:	4621      	mov	r1, r4
 801888e:	4630      	mov	r0, r6
 8018890:	f00a fa76 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018894:	4621      	mov	r1, r4
 8018896:	4630      	mov	r0, r6
 8018898:	f00a fa78 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801889c:	4621      	mov	r1, r4
 801889e:	4630      	mov	r0, r6
 80188a0:	f00a fa62 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80188a4:	4621      	mov	r1, r4
 80188a6:	4630      	mov	r0, r6
 80188a8:	f00a fa64 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 80188ac:	4b12      	ldr	r3, [pc, #72]	; (80188f8 <lv_theme_default_init+0x330>)
 80188ae:	681c      	ldr	r4, [r3, #0]
 80188b0:	3418      	adds	r4, #24
 80188b2:	4b0a      	ldr	r3, [pc, #40]	; (80188dc <lv_theme_default_init+0x314>)
 80188b4:	781b      	ldrb	r3, [r3, #0]
 80188b6:	2b01      	cmp	r3, #1
 80188b8:	f001 84b9 	beq.w	801a22e <lv_theme_default_init+0x1c66>
 80188bc:	2b02      	cmp	r3, #2
 80188be:	f001 84d3 	beq.w	801a268 <lv_theme_default_init+0x1ca0>
 80188c2:	4b07      	ldr	r3, [pc, #28]	; (80188e0 <lv_theme_default_init+0x318>)
 80188c4:	68de      	ldr	r6, [r3, #12]
 80188c6:	4630      	mov	r0, r6
 80188c8:	f007 fd9e 	bl	8020408 <lv_disp_get_dpi>
 80188cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80188d0:	0040      	lsls	r0, r0, #1
 80188d2:	28ef      	cmp	r0, #239	; 0xef
 80188d4:	e01a      	b.n	801890c <lv_theme_default_init+0x344>
 80188d6:	bf00      	nop
 80188d8:	200028dc 	.word	0x200028dc
 80188dc:	200026b4 	.word	0x200026b4
 80188e0:	200026c8 	.word	0x200026c8
 80188e4:	08017585 	.word	0x08017585
 80188e8:	200026a4 	.word	0x200026a4
 80188ec:	200026a8 	.word	0x200026a8
 80188f0:	2000269c 	.word	0x2000269c
 80188f4:	200026a0 	.word	0x200026a0
 80188f8:	200026c4 	.word	0x200026c4
 80188fc:	08020719 	.word	0x08020719
 8018900:	0802d0f4 	.word	0x0802d0f4
 8018904:	200026ec 	.word	0x200026ec
 8018908:	20002700 	.word	0x20002700
 801890c:	f301 84c9 	bgt.w	801a2a2 <lv_theme_default_init+0x1cda>
 8018910:	2101      	movs	r1, #1
 8018912:	4620      	mov	r0, r4
 8018914:	f00a fa40 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 8018918:	4bc0      	ldr	r3, [pc, #768]	; (8018c1c <lv_theme_default_init+0x654>)
 801891a:	681c      	ldr	r4, [r3, #0]
 801891c:	3418      	adds	r4, #24
 801891e:	4bc0      	ldr	r3, [pc, #768]	; (8018c20 <lv_theme_default_init+0x658>)
 8018920:	781b      	ldrb	r3, [r3, #0]
 8018922:	2b01      	cmp	r3, #1
 8018924:	f001 84cd 	beq.w	801a2c2 <lv_theme_default_init+0x1cfa>
 8018928:	2b02      	cmp	r3, #2
 801892a:	f001 84e7 	beq.w	801a2fc <lv_theme_default_init+0x1d34>
 801892e:	4bbd      	ldr	r3, [pc, #756]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018930:	68de      	ldr	r6, [r3, #12]
 8018932:	4630      	mov	r0, r6
 8018934:	f007 fd68 	bl	8020408 <lv_disp_get_dpi>
 8018938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801893c:	0040      	lsls	r0, r0, #1
 801893e:	28ef      	cmp	r0, #239	; 0xef
 8018940:	f301 84fe 	bgt.w	801a340 <lv_theme_default_init+0x1d78>
 8018944:	2101      	movs	r1, #1
 8018946:	4620      	mov	r0, r4
 8018948:	f00a fa2c 	bl	8022da4 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 801894c:	4eb3      	ldr	r6, [pc, #716]	; (8018c1c <lv_theme_default_init+0x654>)
 801894e:	6834      	ldr	r4, [r6, #0]
 8018950:	3418      	adds	r4, #24
 8018952:	2012      	movs	r0, #18
 8018954:	f008 fbcc 	bl	80210f0 <lv_palette_main>
 8018958:	4601      	mov	r1, r0
 801895a:	4620      	mov	r0, r4
 801895c:	f00a fab8 	bl	8022ed0 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 8018960:	6834      	ldr	r4, [r6, #0]
 8018962:	3418      	adds	r4, #24
 8018964:	4baf      	ldr	r3, [pc, #700]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018966:	68de      	ldr	r6, [r3, #12]
 8018968:	4630      	mov	r0, r6
 801896a:	f007 fd4d 	bl	8020408 <lv_disp_get_dpi>
 801896e:	28ef      	cmp	r0, #239	; 0xef
 8018970:	f301 84f6 	bgt.w	801a360 <lv_theme_default_init+0x1d98>
 8018974:	2101      	movs	r1, #1
 8018976:	4620      	mov	r0, r4
 8018978:	f00a faa4 	bl	8022ec4 <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 801897c:	4ca7      	ldr	r4, [pc, #668]	; (8018c1c <lv_theme_default_init+0x654>)
 801897e:	6820      	ldr	r0, [r4, #0]
 8018980:	30a0      	adds	r0, #160	; 0xa0
 8018982:	f7ff fdd9 	bl	8018538 <style_init_reset>
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 8018986:	4ea7      	ldr	r6, [pc, #668]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018988:	6820      	ldr	r0, [r4, #0]
 801898a:	8a31      	ldrh	r1, [r6, #16]
 801898c:	30a0      	adds	r0, #160	; 0xa0
 801898e:	f00a fa5d 	bl	8022e4c <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 8018992:	6824      	ldr	r4, [r4, #0]
 8018994:	34a0      	adds	r4, #160	; 0xa0
 8018996:	68f6      	ldr	r6, [r6, #12]
 8018998:	4630      	mov	r0, r6
 801899a:	f007 fd35 	bl	8020408 <lv_disp_get_dpi>
 801899e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80189a2:	28ef      	cmp	r0, #239	; 0xef
 80189a4:	f301 84e9 	bgt.w	801a37a <lv_theme_default_init+0x1db2>
 80189a8:	2101      	movs	r1, #1
 80189aa:	4620      	mov	r0, r4
 80189ac:	f00a fa48 	bl	8022e40 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 80189b0:	4b9a      	ldr	r3, [pc, #616]	; (8018c1c <lv_theme_default_init+0x654>)
 80189b2:	681c      	ldr	r4, [r3, #0]
 80189b4:	34a0      	adds	r4, #160	; 0xa0
 80189b6:	4b9b      	ldr	r3, [pc, #620]	; (8018c24 <lv_theme_default_init+0x65c>)
 80189b8:	68de      	ldr	r6, [r3, #12]
 80189ba:	4630      	mov	r0, r6
 80189bc:	f007 fd24 	bl	8020408 <lv_disp_get_dpi>
 80189c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80189c4:	28ef      	cmp	r0, #239	; 0xef
 80189c6:	f301 84e8 	bgt.w	801a39a <lv_theme_default_init+0x1dd2>
 80189ca:	2101      	movs	r1, #1
 80189cc:	4620      	mov	r0, r4
 80189ce:	f00a fa4f 	bl	8022e70 <lv_style_set_outline_pad>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 80189d2:	4c92      	ldr	r4, [pc, #584]	; (8018c1c <lv_theme_default_init+0x654>)
 80189d4:	6820      	ldr	r0, [r4, #0]
 80189d6:	217f      	movs	r1, #127	; 0x7f
 80189d8:	30a0      	adds	r0, #160	; 0xa0
 80189da:	f00a fa43 	bl	8022e64 <lv_style_set_outline_opa>
    style_init_reset(&styles->outline_secondary);
 80189de:	6820      	ldr	r0, [r4, #0]
 80189e0:	30a8      	adds	r0, #168	; 0xa8
 80189e2:	f7ff fda9 	bl	8018538 <style_init_reset>
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 80189e6:	4e8f      	ldr	r6, [pc, #572]	; (8018c24 <lv_theme_default_init+0x65c>)
 80189e8:	6820      	ldr	r0, [r4, #0]
 80189ea:	8a71      	ldrh	r1, [r6, #18]
 80189ec:	30a8      	adds	r0, #168	; 0xa8
 80189ee:	f00a fa2d 	bl	8022e4c <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 80189f2:	6824      	ldr	r4, [r4, #0]
 80189f4:	34a8      	adds	r4, #168	; 0xa8
 80189f6:	68f6      	ldr	r6, [r6, #12]
 80189f8:	4630      	mov	r0, r6
 80189fa:	f007 fd05 	bl	8020408 <lv_disp_get_dpi>
 80189fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018a02:	28ef      	cmp	r0, #239	; 0xef
 8018a04:	f301 84d9 	bgt.w	801a3ba <lv_theme_default_init+0x1df2>
 8018a08:	2101      	movs	r1, #1
 8018a0a:	4620      	mov	r0, r4
 8018a0c:	f00a fa18 	bl	8022e40 <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 8018a10:	4c82      	ldr	r4, [pc, #520]	; (8018c1c <lv_theme_default_init+0x654>)
 8018a12:	6820      	ldr	r0, [r4, #0]
 8018a14:	217f      	movs	r1, #127	; 0x7f
 8018a16:	30a8      	adds	r0, #168	; 0xa8
 8018a18:	f00a fa24 	bl	8022e64 <lv_style_set_outline_opa>
    style_init_reset(&styles->btn);
 8018a1c:	6820      	ldr	r0, [r4, #0]
 8018a1e:	3020      	adds	r0, #32
 8018a20:	f7ff fd8a 	bl	8018538 <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 8018a24:	6824      	ldr	r4, [r4, #0]
 8018a26:	3420      	adds	r4, #32
 8018a28:	4b7d      	ldr	r3, [pc, #500]	; (8018c20 <lv_theme_default_init+0x658>)
 8018a2a:	781b      	ldrb	r3, [r3, #0]
 8018a2c:	2b01      	cmp	r3, #1
 8018a2e:	f001 84d4 	beq.w	801a3da <lv_theme_default_init+0x1e12>
 8018a32:	2b02      	cmp	r3, #2
 8018a34:	f001 84ea 	beq.w	801a40c <lv_theme_default_init+0x1e44>
                                                                             16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 8018a38:	4b7a      	ldr	r3, [pc, #488]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018a3a:	68de      	ldr	r6, [r3, #12]
 8018a3c:	4630      	mov	r0, r6
 8018a3e:	f007 fce3 	bl	8020408 <lv_disp_get_dpi>
 8018a42:	00c0      	lsls	r0, r0, #3
 8018a44:	28ef      	cmp	r0, #239	; 0xef
 8018a46:	f301 84fe 	bgt.w	801a446 <lv_theme_default_init+0x1e7e>
 8018a4a:	2101      	movs	r1, #1
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 8018a4c:	4620      	mov	r0, r4
 8018a4e:	f00a fa81 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 8018a52:	4c72      	ldr	r4, [pc, #456]	; (8018c1c <lv_theme_default_init+0x654>)
 8018a54:	6820      	ldr	r0, [r4, #0]
 8018a56:	21ff      	movs	r1, #255	; 0xff
 8018a58:	3020      	adds	r0, #32
 8018a5a:	f00a f9b5 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 8018a5e:	6820      	ldr	r0, [r4, #0]
 8018a60:	4b71      	ldr	r3, [pc, #452]	; (8018c28 <lv_theme_default_init+0x660>)
 8018a62:	8819      	ldrh	r1, [r3, #0]
 8018a64:	3020      	adds	r0, #32
 8018a66:	f00a f9a3 	bl	8022db0 <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 8018a6a:	4b6e      	ldr	r3, [pc, #440]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018a6c:	6a1b      	ldr	r3, [r3, #32]
 8018a6e:	f013 0f01 	tst.w	r3, #1
 8018a72:	f001 84f6 	beq.w	801a462 <lv_theme_default_init+0x1e9a>
    lv_style_set_text_color(&styles->btn, color_text);
 8018a76:	4c69      	ldr	r4, [pc, #420]	; (8018c1c <lv_theme_default_init+0x654>)
 8018a78:	6820      	ldr	r0, [r4, #0]
 8018a7a:	4b6c      	ldr	r3, [pc, #432]	; (8018c2c <lv_theme_default_init+0x664>)
 8018a7c:	8819      	ldrh	r1, [r3, #0]
 8018a7e:	3020      	adds	r0, #32
 8018a80:	f00a fa4a 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8018a84:	6826      	ldr	r6, [r4, #0]
 8018a86:	3620      	adds	r6, #32
 8018a88:	4b65      	ldr	r3, [pc, #404]	; (8018c20 <lv_theme_default_init+0x658>)
 8018a8a:	781b      	ldrb	r3, [r3, #0]
 8018a8c:	2b01      	cmp	r3, #1
 8018a8e:	f001 8548 	beq.w	801a522 <lv_theme_default_init+0x1f5a>
 8018a92:	2b02      	cmp	r3, #2
 8018a94:	f001 8562 	beq.w	801a55c <lv_theme_default_init+0x1f94>
 8018a98:	4b62      	ldr	r3, [pc, #392]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018a9a:	68dc      	ldr	r4, [r3, #12]
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	f007 fcb3 	bl	8020408 <lv_disp_get_dpi>
 8018aa2:	0100      	lsls	r0, r0, #4
 8018aa4:	28ef      	cmp	r0, #239	; 0xef
 8018aa6:	f301 8576 	bgt.w	801a596 <lv_theme_default_init+0x1fce>
 8018aaa:	2401      	movs	r4, #1
}

static inline void lv_style_set_pad_hor(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_left(style, value);
 8018aac:	4621      	mov	r1, r4
 8018aae:	4630      	mov	r0, r6
 8018ab0:	f00a f966 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018ab4:	4621      	mov	r1, r4
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	f00a f968 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 8018abc:	4b57      	ldr	r3, [pc, #348]	; (8018c1c <lv_theme_default_init+0x654>)
 8018abe:	681e      	ldr	r6, [r3, #0]
 8018ac0:	3620      	adds	r6, #32
 8018ac2:	4b57      	ldr	r3, [pc, #348]	; (8018c20 <lv_theme_default_init+0x658>)
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	2b01      	cmp	r3, #1
 8018ac8:	f001 8573 	beq.w	801a5b2 <lv_theme_default_init+0x1fea>
 8018acc:	2b02      	cmp	r3, #2
 8018ace:	f001 858d 	beq.w	801a5ec <lv_theme_default_init+0x2024>
 8018ad2:	4b54      	ldr	r3, [pc, #336]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018ad4:	68dc      	ldr	r4, [r3, #12]
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	f007 fc96 	bl	8020408 <lv_disp_get_dpi>
 8018adc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018ae0:	0040      	lsls	r0, r0, #1
 8018ae2:	28ef      	cmp	r0, #239	; 0xef
 8018ae4:	f301 859f 	bgt.w	801a626 <lv_theme_default_init+0x205e>
 8018ae8:	2401      	movs	r4, #1
}

static inline void lv_style_set_pad_ver(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_top(style, value);
 8018aea:	4621      	mov	r1, r4
 8018aec:	4630      	mov	r0, r6
 8018aee:	f00a f93b 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018af2:	4621      	mov	r1, r4
 8018af4:	4630      	mov	r0, r6
 8018af6:	f00a f93d 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8018afa:	4b48      	ldr	r3, [pc, #288]	; (8018c1c <lv_theme_default_init+0x654>)
 8018afc:	681c      	ldr	r4, [r3, #0]
 8018afe:	3420      	adds	r4, #32
 8018b00:	4b48      	ldr	r3, [pc, #288]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018b02:	68de      	ldr	r6, [r3, #12]
 8018b04:	4630      	mov	r0, r6
 8018b06:	f007 fc7f 	bl	8020408 <lv_disp_get_dpi>
 8018b0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018b0e:	28ef      	cmp	r0, #239	; 0xef
 8018b10:	f301 8599 	bgt.w	801a646 <lv_theme_default_init+0x207e>
 8018b14:	2101      	movs	r1, #1
 8018b16:	4620      	mov	r0, r4
 8018b18:	f00a f944 	bl	8022da4 <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8018b1c:	4b3f      	ldr	r3, [pc, #252]	; (8018c1c <lv_theme_default_init+0x654>)
 8018b1e:	681c      	ldr	r4, [r3, #0]
 8018b20:	3420      	adds	r4, #32
 8018b22:	4b40      	ldr	r3, [pc, #256]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018b24:	68de      	ldr	r6, [r3, #12]
 8018b26:	4630      	mov	r0, r6
 8018b28:	f007 fc6e 	bl	8020408 <lv_disp_get_dpi>
 8018b2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018b30:	28ef      	cmp	r0, #239	; 0xef
 8018b32:	f301 8598 	bgt.w	801a666 <lv_theme_default_init+0x209e>
 8018b36:	2101      	movs	r1, #1
 8018b38:	4620      	mov	r0, r4
 8018b3a:	f00a f92d 	bl	8022d98 <lv_style_set_pad_row>
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
}

static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
{
    dsc->filter_cb = cb;
 8018b3e:	4f3c      	ldr	r7, [pc, #240]	; (8018c30 <lv_theme_default_init+0x668>)
 8018b40:	4b3c      	ldr	r3, [pc, #240]	; (8018c34 <lv_theme_default_init+0x66c>)
 8018b42:	603b      	str	r3, [r7, #0]
 8018b44:	4e3c      	ldr	r6, [pc, #240]	; (8018c38 <lv_theme_default_init+0x670>)
 8018b46:	4b3d      	ldr	r3, [pc, #244]	; (8018c3c <lv_theme_default_init+0x674>)
 8018b48:	6033      	str	r3, [r6, #0]
    style_init_reset(&styles->pressed);
 8018b4a:	4c34      	ldr	r4, [pc, #208]	; (8018c1c <lv_theme_default_init+0x654>)
 8018b4c:	6820      	ldr	r0, [r4, #0]
 8018b4e:	3058      	adds	r0, #88	; 0x58
 8018b50:	f7ff fcf2 	bl	8018538 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 8018b54:	6820      	ldr	r0, [r4, #0]
 8018b56:	4639      	mov	r1, r7
 8018b58:	3058      	adds	r0, #88	; 0x58
 8018b5a:	f00a fa07 	bl	8022f6c <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 8018b5e:	6820      	ldr	r0, [r4, #0]
 8018b60:	2123      	movs	r1, #35	; 0x23
 8018b62:	3058      	adds	r0, #88	; 0x58
 8018b64:	f00a fa08 	bl	8022f78 <lv_style_set_color_filter_opa>
    style_init_reset(&styles->disabled);
 8018b68:	6820      	ldr	r0, [r4, #0]
 8018b6a:	3060      	adds	r0, #96	; 0x60
 8018b6c:	f7ff fce4 	bl	8018538 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 8018b70:	6820      	ldr	r0, [r4, #0]
 8018b72:	4631      	mov	r1, r6
 8018b74:	3060      	adds	r0, #96	; 0x60
 8018b76:	f00a f9f9 	bl	8022f6c <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 8018b7a:	6820      	ldr	r0, [r4, #0]
 8018b7c:	217f      	movs	r1, #127	; 0x7f
 8018b7e:	3060      	adds	r0, #96	; 0x60
 8018b80:	f00a f9fa 	bl	8022f78 <lv_style_set_color_filter_opa>
    style_init_reset(&styles->clip_corner);
 8018b84:	6820      	ldr	r0, [r4, #0]
 8018b86:	30c0      	adds	r0, #192	; 0xc0
 8018b88:	f7ff fcd6 	bl	8018538 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 8018b8c:	6820      	ldr	r0, [r4, #0]
 8018b8e:	2101      	movs	r1, #1
 8018b90:	30c0      	adds	r0, #192	; 0xc0
 8018b92:	f00a f9e5 	bl	8022f60 <lv_style_set_clip_corner>
    lv_style_set_border_post(&styles->clip_corner, true);
 8018b96:	6820      	ldr	r0, [r4, #0]
 8018b98:	2101      	movs	r1, #1
 8018b9a:	30c0      	adds	r0, #192	; 0xc0
 8018b9c:	f00a f94a 	bl	8022e34 <lv_style_set_border_post>
    style_init_reset(&styles->pad_normal);
 8018ba0:	6820      	ldr	r0, [r4, #0]
 8018ba2:	3080      	adds	r0, #128	; 0x80
 8018ba4:	f7ff fcc8 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 8018ba8:	6826      	ldr	r6, [r4, #0]
 8018baa:	3680      	adds	r6, #128	; 0x80
 8018bac:	4b1c      	ldr	r3, [pc, #112]	; (8018c20 <lv_theme_default_init+0x658>)
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	2b01      	cmp	r3, #1
 8018bb2:	f001 856f 	beq.w	801a694 <lv_theme_default_init+0x20cc>
 8018bb6:	2b02      	cmp	r3, #2
 8018bb8:	f001 8589 	beq.w	801a6ce <lv_theme_default_init+0x2106>
 8018bbc:	4b19      	ldr	r3, [pc, #100]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018bbe:	68dc      	ldr	r4, [r3, #12]
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f007 fc21 	bl	8020408 <lv_disp_get_dpi>
 8018bc6:	0100      	lsls	r0, r0, #4
 8018bc8:	28ef      	cmp	r0, #239	; 0xef
 8018bca:	f301 859d 	bgt.w	801a708 <lv_theme_default_init+0x2140>
 8018bce:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8018bd0:	4621      	mov	r1, r4
 8018bd2:	4630      	mov	r0, r6
 8018bd4:	f00a f8d4 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018bd8:	4621      	mov	r1, r4
 8018bda:	4630      	mov	r0, r6
 8018bdc:	f00a f8d6 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8018be0:	4621      	mov	r1, r4
 8018be2:	4630      	mov	r0, r6
 8018be4:	f00a f8c0 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018be8:	4621      	mov	r1, r4
 8018bea:	4630      	mov	r0, r6
 8018bec:	f00a f8c2 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 8018bf0:	4b0a      	ldr	r3, [pc, #40]	; (8018c1c <lv_theme_default_init+0x654>)
 8018bf2:	681c      	ldr	r4, [r3, #0]
 8018bf4:	3480      	adds	r4, #128	; 0x80
 8018bf6:	4b0a      	ldr	r3, [pc, #40]	; (8018c20 <lv_theme_default_init+0x658>)
 8018bf8:	781b      	ldrb	r3, [r3, #0]
 8018bfa:	2b01      	cmp	r3, #1
 8018bfc:	f001 8592 	beq.w	801a724 <lv_theme_default_init+0x215c>
 8018c00:	2b02      	cmp	r3, #2
 8018c02:	f001 85ac 	beq.w	801a75e <lv_theme_default_init+0x2196>
 8018c06:	4b07      	ldr	r3, [pc, #28]	; (8018c24 <lv_theme_default_init+0x65c>)
 8018c08:	68de      	ldr	r6, [r3, #12]
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	f007 fbfc 	bl	8020408 <lv_disp_get_dpi>
 8018c10:	0100      	lsls	r0, r0, #4
 8018c12:	28ef      	cmp	r0, #239	; 0xef
 8018c14:	f301 85c0 	bgt.w	801a798 <lv_theme_default_init+0x21d0>
 8018c18:	2101      	movs	r1, #1
 8018c1a:	e011      	b.n	8018c40 <lv_theme_default_init+0x678>
 8018c1c:	200026c4 	.word	0x200026c4
 8018c20:	200026b4 	.word	0x200026b4
 8018c24:	200026c8 	.word	0x200026c8
 8018c28:	200026a0 	.word	0x200026a0
 8018c2c:	200026a8 	.word	0x200026a8
 8018c30:	200026ac 	.word	0x200026ac
 8018c34:	0801852d 	.word	0x0801852d
 8018c38:	200026b8 	.word	0x200026b8
 8018c3c:	08018551 	.word	0x08018551
 8018c40:	4620      	mov	r0, r4
 8018c42:	f00a f8a9 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 8018c46:	4bc6      	ldr	r3, [pc, #792]	; (8018f60 <lv_theme_default_init+0x998>)
 8018c48:	681c      	ldr	r4, [r3, #0]
 8018c4a:	3480      	adds	r4, #128	; 0x80
 8018c4c:	4bc5      	ldr	r3, [pc, #788]	; (8018f64 <lv_theme_default_init+0x99c>)
 8018c4e:	781b      	ldrb	r3, [r3, #0]
 8018c50:	2b01      	cmp	r3, #1
 8018c52:	f001 85af 	beq.w	801a7b4 <lv_theme_default_init+0x21ec>
 8018c56:	2b02      	cmp	r3, #2
 8018c58:	f001 85c9 	beq.w	801a7ee <lv_theme_default_init+0x2226>
 8018c5c:	4bc2      	ldr	r3, [pc, #776]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018c5e:	68de      	ldr	r6, [r3, #12]
 8018c60:	4630      	mov	r0, r6
 8018c62:	f007 fbd1 	bl	8020408 <lv_disp_get_dpi>
 8018c66:	0100      	lsls	r0, r0, #4
 8018c68:	28ef      	cmp	r0, #239	; 0xef
 8018c6a:	f301 85dd 	bgt.w	801a828 <lv_theme_default_init+0x2260>
 8018c6e:	2101      	movs	r1, #1
 8018c70:	4620      	mov	r0, r4
 8018c72:	f00a f897 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 8018c76:	4cba      	ldr	r4, [pc, #744]	; (8018f60 <lv_theme_default_init+0x998>)
 8018c78:	6820      	ldr	r0, [r4, #0]
 8018c7a:	3078      	adds	r0, #120	; 0x78
 8018c7c:	f7ff fc5c 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 8018c80:	6826      	ldr	r6, [r4, #0]
 8018c82:	3678      	adds	r6, #120	; 0x78
 8018c84:	4bb7      	ldr	r3, [pc, #732]	; (8018f64 <lv_theme_default_init+0x99c>)
 8018c86:	781b      	ldrb	r3, [r3, #0]
 8018c88:	2b01      	cmp	r3, #1
 8018c8a:	f001 85db 	beq.w	801a844 <lv_theme_default_init+0x227c>
 8018c8e:	2b02      	cmp	r3, #2
 8018c90:	f001 85f5 	beq.w	801a87e <lv_theme_default_init+0x22b6>
 8018c94:	4bb4      	ldr	r3, [pc, #720]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018c96:	68dc      	ldr	r4, [r3, #12]
 8018c98:	4620      	mov	r0, r4
 8018c9a:	f007 fbb5 	bl	8020408 <lv_disp_get_dpi>
 8018c9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018ca2:	0040      	lsls	r0, r0, #1
 8018ca4:	28ef      	cmp	r0, #239	; 0xef
 8018ca6:	f301 8607 	bgt.w	801a8b8 <lv_theme_default_init+0x22f0>
 8018caa:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8018cac:	4621      	mov	r1, r4
 8018cae:	4630      	mov	r0, r6
 8018cb0:	f00a f866 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018cb4:	4621      	mov	r1, r4
 8018cb6:	4630      	mov	r0, r6
 8018cb8:	f00a f868 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8018cbc:	4621      	mov	r1, r4
 8018cbe:	4630      	mov	r0, r6
 8018cc0:	f00a f852 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018cc4:	4621      	mov	r1, r4
 8018cc6:	4630      	mov	r0, r6
 8018cc8:	f00a f854 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8018ccc:	4ba4      	ldr	r3, [pc, #656]	; (8018f60 <lv_theme_default_init+0x998>)
 8018cce:	681e      	ldr	r6, [r3, #0]
 8018cd0:	3678      	adds	r6, #120	; 0x78
 8018cd2:	4ba4      	ldr	r3, [pc, #656]	; (8018f64 <lv_theme_default_init+0x99c>)
 8018cd4:	781b      	ldrb	r3, [r3, #0]
 8018cd6:	2b01      	cmp	r3, #1
 8018cd8:	f001 85fe 	beq.w	801a8d8 <lv_theme_default_init+0x2310>
 8018cdc:	2b02      	cmp	r3, #2
 8018cde:	f001 8618 	beq.w	801a912 <lv_theme_default_init+0x234a>
 8018ce2:	4ba1      	ldr	r3, [pc, #644]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018ce4:	68dc      	ldr	r4, [r3, #12]
 8018ce6:	4620      	mov	r0, r4
 8018ce8:	f007 fb8e 	bl	8020408 <lv_disp_get_dpi>
 8018cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018cf0:	0040      	lsls	r0, r0, #1
 8018cf2:	28ef      	cmp	r0, #239	; 0xef
 8018cf4:	f301 862a 	bgt.w	801a94c <lv_theme_default_init+0x2384>
 8018cf8:	2401      	movs	r4, #1
}

static inline void lv_style_set_pad_gap(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_row(style, value);
 8018cfa:	4621      	mov	r1, r4
 8018cfc:	4630      	mov	r0, r6
 8018cfe:	f00a f84b 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8018d02:	4621      	mov	r1, r4
 8018d04:	4630      	mov	r0, r6
 8018d06:	f00a f84d 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_gap);
 8018d0a:	4c95      	ldr	r4, [pc, #596]	; (8018f60 <lv_theme_default_init+0x998>)
 8018d0c:	6820      	ldr	r0, [r4, #0]
 8018d0e:	3088      	adds	r0, #136	; 0x88
 8018d10:	f7ff fc12 	bl	8018538 <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8018d14:	6824      	ldr	r4, [r4, #0]
 8018d16:	3488      	adds	r4, #136	; 0x88
 8018d18:	4b93      	ldr	r3, [pc, #588]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018d1a:	68de      	ldr	r6, [r3, #12]
 8018d1c:	4630      	mov	r0, r6
 8018d1e:	f007 fb73 	bl	8020408 <lv_disp_get_dpi>
 8018d22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018d26:	0040      	lsls	r0, r0, #1
 8018d28:	28ef      	cmp	r0, #239	; 0xef
 8018d2a:	f301 861f 	bgt.w	801a96c <lv_theme_default_init+0x23a4>
 8018d2e:	2101      	movs	r1, #1
 8018d30:	4620      	mov	r0, r4
 8018d32:	f00a f831 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8018d36:	4b8a      	ldr	r3, [pc, #552]	; (8018f60 <lv_theme_default_init+0x998>)
 8018d38:	681c      	ldr	r4, [r3, #0]
 8018d3a:	3488      	adds	r4, #136	; 0x88
 8018d3c:	4b8a      	ldr	r3, [pc, #552]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018d3e:	68de      	ldr	r6, [r3, #12]
 8018d40:	4630      	mov	r0, r6
 8018d42:	f007 fb61 	bl	8020408 <lv_disp_get_dpi>
 8018d46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018d4a:	0040      	lsls	r0, r0, #1
 8018d4c:	28ef      	cmp	r0, #239	; 0xef
 8018d4e:	f301 861d 	bgt.w	801a98c <lv_theme_default_init+0x23c4>
 8018d52:	2101      	movs	r1, #1
 8018d54:	4620      	mov	r0, r4
 8018d56:	f00a f825 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 8018d5a:	4c81      	ldr	r4, [pc, #516]	; (8018f60 <lv_theme_default_init+0x998>)
 8018d5c:	6820      	ldr	r0, [r4, #0]
 8018d5e:	3090      	adds	r0, #144	; 0x90
 8018d60:	f7ff fbea 	bl	8018538 <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 8018d64:	6824      	ldr	r4, [r4, #0]
 8018d66:	3490      	adds	r4, #144	; 0x90
 8018d68:	4b7f      	ldr	r3, [pc, #508]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018d6a:	68de      	ldr	r6, [r3, #12]
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	f007 fb4b 	bl	8020408 <lv_disp_get_dpi>
 8018d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018d76:	0080      	lsls	r0, r0, #2
 8018d78:	28ef      	cmp	r0, #239	; 0xef
 8018d7a:	f301 8617 	bgt.w	801a9ac <lv_theme_default_init+0x23e4>
 8018d7e:	2101      	movs	r1, #1
 8018d80:	4620      	mov	r0, r4
 8018d82:	f00a f8db 	bl	8022f3c <lv_style_set_text_line_space>
    style_init_reset(&styles->text_align_center);
 8018d86:	4c76      	ldr	r4, [pc, #472]	; (8018f60 <lv_theme_default_init+0x998>)
 8018d88:	6820      	ldr	r0, [r4, #0]
 8018d8a:	3098      	adds	r0, #152	; 0x98
 8018d8c:	f7ff fbd4 	bl	8018538 <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 8018d90:	6820      	ldr	r0, [r4, #0]
 8018d92:	2102      	movs	r1, #2
 8018d94:	3098      	adds	r0, #152	; 0x98
 8018d96:	f00a f8d7 	bl	8022f48 <lv_style_set_text_align>
    style_init_reset(&styles->pad_zero);
 8018d9a:	6820      	ldr	r0, [r4, #0]
 8018d9c:	3068      	adds	r0, #104	; 0x68
 8018d9e:	f7ff fbcb 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 8018da2:	6826      	ldr	r6, [r4, #0]
 8018da4:	3668      	adds	r6, #104	; 0x68
    lv_style_set_pad_left(style, value);
 8018da6:	2100      	movs	r1, #0
 8018da8:	4630      	mov	r0, r6
 8018daa:	f009 ffe9 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018dae:	2100      	movs	r1, #0
 8018db0:	4630      	mov	r0, r6
 8018db2:	f009 ffeb 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8018db6:	2100      	movs	r1, #0
 8018db8:	4630      	mov	r0, r6
 8018dba:	f009 ffd5 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018dbe:	2100      	movs	r1, #0
 8018dc0:	4630      	mov	r0, r6
 8018dc2:	f009 ffd7 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 8018dc6:	6820      	ldr	r0, [r4, #0]
 8018dc8:	2100      	movs	r1, #0
 8018dca:	3068      	adds	r0, #104	; 0x68
 8018dcc:	f009 ffe4 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 8018dd0:	6820      	ldr	r0, [r4, #0]
 8018dd2:	2100      	movs	r1, #0
 8018dd4:	3068      	adds	r0, #104	; 0x68
 8018dd6:	f009 ffe5 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 8018dda:	6820      	ldr	r0, [r4, #0]
 8018ddc:	3070      	adds	r0, #112	; 0x70
 8018dde:	f7ff fbab 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 8018de2:	6826      	ldr	r6, [r4, #0]
 8018de4:	3670      	adds	r6, #112	; 0x70
 8018de6:	4b5f      	ldr	r3, [pc, #380]	; (8018f64 <lv_theme_default_init+0x99c>)
 8018de8:	781b      	ldrb	r3, [r3, #0]
 8018dea:	2b01      	cmp	r3, #1
 8018dec:	f001 85ee 	beq.w	801a9cc <lv_theme_default_init+0x2404>
 8018df0:	2b02      	cmp	r3, #2
 8018df2:	f001 8609 	beq.w	801aa08 <lv_theme_default_init+0x2440>
 8018df6:	4b5c      	ldr	r3, [pc, #368]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018df8:	68dc      	ldr	r4, [r3, #12]
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	f007 fb04 	bl	8020408 <lv_disp_get_dpi>
 8018e00:	0040      	lsls	r0, r0, #1
 8018e02:	28ef      	cmp	r0, #239	; 0xef
 8018e04:	f301 861d 	bgt.w	801aa42 <lv_theme_default_init+0x247a>
 8018e08:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8018e0a:	4621      	mov	r1, r4
 8018e0c:	4630      	mov	r0, r6
 8018e0e:	f009 ffb7 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018e12:	4621      	mov	r1, r4
 8018e14:	4630      	mov	r0, r6
 8018e16:	f009 ffb9 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8018e1a:	4621      	mov	r1, r4
 8018e1c:	4630      	mov	r0, r6
 8018e1e:	f009 ffa3 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018e22:	4621      	mov	r1, r4
 8018e24:	4630      	mov	r0, r6
 8018e26:	f009 ffa5 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 8018e2a:	4b4d      	ldr	r3, [pc, #308]	; (8018f60 <lv_theme_default_init+0x998>)
 8018e2c:	681c      	ldr	r4, [r3, #0]
 8018e2e:	3470      	adds	r4, #112	; 0x70
 8018e30:	4b4c      	ldr	r3, [pc, #304]	; (8018f64 <lv_theme_default_init+0x99c>)
 8018e32:	781b      	ldrb	r3, [r3, #0]
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	f001 8612 	beq.w	801aa5e <lv_theme_default_init+0x2496>
 8018e3a:	2b02      	cmp	r3, #2
 8018e3c:	f001 8628 	beq.w	801aa90 <lv_theme_default_init+0x24c8>
 8018e40:	4b49      	ldr	r3, [pc, #292]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018e42:	68de      	ldr	r6, [r3, #12]
 8018e44:	4630      	mov	r0, r6
 8018e46:	f007 fadf 	bl	8020408 <lv_disp_get_dpi>
 8018e4a:	0040      	lsls	r0, r0, #1
 8018e4c:	28ef      	cmp	r0, #239	; 0xef
 8018e4e:	f301 863c 	bgt.w	801aaca <lv_theme_default_init+0x2502>
 8018e52:	2101      	movs	r1, #1
 8018e54:	4620      	mov	r0, r4
 8018e56:	f009 ff9f 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8018e5a:	4b41      	ldr	r3, [pc, #260]	; (8018f60 <lv_theme_default_init+0x998>)
 8018e5c:	681c      	ldr	r4, [r3, #0]
 8018e5e:	3470      	adds	r4, #112	; 0x70
 8018e60:	4b40      	ldr	r3, [pc, #256]	; (8018f64 <lv_theme_default_init+0x99c>)
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	2b01      	cmp	r3, #1
 8018e66:	f001 863e 	beq.w	801aae6 <lv_theme_default_init+0x251e>
 8018e6a:	2b02      	cmp	r3, #2
 8018e6c:	f001 8654 	beq.w	801ab18 <lv_theme_default_init+0x2550>
 8018e70:	4b3d      	ldr	r3, [pc, #244]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018e72:	68de      	ldr	r6, [r3, #12]
 8018e74:	4630      	mov	r0, r6
 8018e76:	f007 fac7 	bl	8020408 <lv_disp_get_dpi>
 8018e7a:	0040      	lsls	r0, r0, #1
 8018e7c:	28ef      	cmp	r0, #239	; 0xef
 8018e7e:	f301 8668 	bgt.w	801ab52 <lv_theme_default_init+0x258a>
 8018e82:	2101      	movs	r1, #1
 8018e84:	4620      	mov	r0, r4
 8018e86:	f009 ff8d 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 8018e8a:	4c35      	ldr	r4, [pc, #212]	; (8018f60 <lv_theme_default_init+0x998>)
 8018e8c:	6820      	ldr	r0, [r4, #0]
 8018e8e:	3028      	adds	r0, #40	; 0x28
 8018e90:	f7ff fb52 	bl	8018538 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 8018e94:	4e34      	ldr	r6, [pc, #208]	; (8018f68 <lv_theme_default_init+0x9a0>)
 8018e96:	6820      	ldr	r0, [r4, #0]
 8018e98:	8a31      	ldrh	r1, [r6, #16]
 8018e9a:	3028      	adds	r0, #40	; 0x28
 8018e9c:	f009 ff88 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 8018ea0:	6820      	ldr	r0, [r4, #0]
 8018ea2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018ea6:	3028      	adds	r0, #40	; 0x28
 8018ea8:	f00a f836 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 8018eac:	6820      	ldr	r0, [r4, #0]
 8018eae:	21ff      	movs	r1, #255	; 0xff
 8018eb0:	3028      	adds	r0, #40	; 0x28
 8018eb2:	f009 ff89 	bl	8022dc8 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 8018eb6:	6820      	ldr	r0, [r4, #0]
 8018eb8:	3030      	adds	r0, #48	; 0x30
 8018eba:	f7ff fb3d 	bl	8018538 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 8018ebe:	6820      	ldr	r0, [r4, #0]
 8018ec0:	8a31      	ldrh	r1, [r6, #16]
 8018ec2:	3030      	adds	r0, #48	; 0x30
 8018ec4:	f009 ff74 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 8018ec8:	6820      	ldr	r0, [r4, #0]
 8018eca:	8a31      	ldrh	r1, [r6, #16]
 8018ecc:	3030      	adds	r0, #48	; 0x30
 8018ece:	f00a f823 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 8018ed2:	6820      	ldr	r0, [r4, #0]
 8018ed4:	2133      	movs	r1, #51	; 0x33
 8018ed6:	3030      	adds	r0, #48	; 0x30
 8018ed8:	f009 ff76 	bl	8022dc8 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 8018edc:	6820      	ldr	r0, [r4, #0]
 8018ede:	3038      	adds	r0, #56	; 0x38
 8018ee0:	f7ff fb2a 	bl	8018538 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 8018ee4:	6820      	ldr	r0, [r4, #0]
 8018ee6:	8a71      	ldrh	r1, [r6, #18]
 8018ee8:	3038      	adds	r0, #56	; 0x38
 8018eea:	f009 ff61 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 8018eee:	6820      	ldr	r0, [r4, #0]
 8018ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018ef4:	3038      	adds	r0, #56	; 0x38
 8018ef6:	f00a f80f 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 8018efa:	6820      	ldr	r0, [r4, #0]
 8018efc:	21ff      	movs	r1, #255	; 0xff
 8018efe:	3038      	adds	r0, #56	; 0x38
 8018f00:	f009 ff62 	bl	8022dc8 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 8018f04:	6820      	ldr	r0, [r4, #0]
 8018f06:	3040      	adds	r0, #64	; 0x40
 8018f08:	f7ff fb16 	bl	8018538 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 8018f0c:	6820      	ldr	r0, [r4, #0]
 8018f0e:	8a71      	ldrh	r1, [r6, #18]
 8018f10:	3040      	adds	r0, #64	; 0x40
 8018f12:	f009 ff4d 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 8018f16:	6820      	ldr	r0, [r4, #0]
 8018f18:	8a71      	ldrh	r1, [r6, #18]
 8018f1a:	3040      	adds	r0, #64	; 0x40
 8018f1c:	f009 fffc 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 8018f20:	6820      	ldr	r0, [r4, #0]
 8018f22:	2133      	movs	r1, #51	; 0x33
 8018f24:	3040      	adds	r0, #64	; 0x40
 8018f26:	f009 ff4f 	bl	8022dc8 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 8018f2a:	6820      	ldr	r0, [r4, #0]
 8018f2c:	3048      	adds	r0, #72	; 0x48
 8018f2e:	f7ff fb03 	bl	8018538 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 8018f32:	6820      	ldr	r0, [r4, #0]
 8018f34:	4b0d      	ldr	r3, [pc, #52]	; (8018f6c <lv_theme_default_init+0x9a4>)
 8018f36:	8819      	ldrh	r1, [r3, #0]
 8018f38:	3048      	adds	r0, #72	; 0x48
 8018f3a:	f009 ff39 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 8018f3e:	6820      	ldr	r0, [r4, #0]
 8018f40:	21ff      	movs	r1, #255	; 0xff
 8018f42:	3048      	adds	r0, #72	; 0x48
 8018f44:	f009 ff40 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 8018f48:	4f09      	ldr	r7, [pc, #36]	; (8018f70 <lv_theme_default_init+0x9a8>)
 8018f4a:	6820      	ldr	r0, [r4, #0]
 8018f4c:	8839      	ldrh	r1, [r7, #0]
 8018f4e:	3048      	adds	r0, #72	; 0x48
 8018f50:	f009 ffe2 	bl	8022f18 <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 8018f54:	6820      	ldr	r0, [r4, #0]
 8018f56:	3050      	adds	r0, #80	; 0x50
 8018f58:	f7ff faee 	bl	8018538 <style_init_reset>
 8018f5c:	e00a      	b.n	8018f74 <lv_theme_default_init+0x9ac>
 8018f5e:	bf00      	nop
 8018f60:	200026c4 	.word	0x200026c4
 8018f64:	200026b4 	.word	0x200026b4
 8018f68:	200026c8 	.word	0x200026c8
 8018f6c:	200026a0 	.word	0x200026a0
 8018f70:	200026a8 	.word	0x200026a8
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 8018f74:	6820      	ldr	r0, [r4, #0]
 8018f76:	4bcd      	ldr	r3, [pc, #820]	; (80192ac <lv_theme_default_init+0xce4>)
 8018f78:	8819      	ldrh	r1, [r3, #0]
 8018f7a:	3050      	adds	r0, #80	; 0x50
 8018f7c:	f009 ff18 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 8018f80:	6820      	ldr	r0, [r4, #0]
 8018f82:	21ff      	movs	r1, #255	; 0xff
 8018f84:	3050      	adds	r0, #80	; 0x50
 8018f86:	f009 ff1f 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 8018f8a:	6820      	ldr	r0, [r4, #0]
 8018f8c:	8839      	ldrh	r1, [r7, #0]
 8018f8e:	3050      	adds	r0, #80	; 0x50
 8018f90:	f009 ffc2 	bl	8022f18 <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 8018f94:	6820      	ldr	r0, [r4, #0]
 8018f96:	30b0      	adds	r0, #176	; 0xb0
 8018f98:	f7ff face 	bl	8018538 <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 8018f9c:	6820      	ldr	r0, [r4, #0]
 8018f9e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018fa2:	30b0      	adds	r0, #176	; 0xb0
 8018fa4:	f009 ffd6 	bl	8022f54 <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 8018fa8:	6820      	ldr	r0, [r4, #0]
 8018faa:	30b8      	adds	r0, #184	; 0xb8
 8018fac:	f7ff fac4 	bl	8018538 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 8018fb0:	6820      	ldr	r0, [r4, #0]
 8018fb2:	2100      	movs	r1, #0
 8018fb4:	30b8      	adds	r0, #184	; 0xb8
 8018fb6:	f009 ffcd 	bl	8022f54 <lv_style_set_radius>
    style_init_reset(&styles->grow);
 8018fba:	6820      	ldr	r0, [r4, #0]
 8018fbc:	30c8      	adds	r0, #200	; 0xc8
 8018fbe:	f7ff fabb 	bl	8018538 <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8018fc2:	6824      	ldr	r4, [r4, #0]
 8018fc4:	34c8      	adds	r4, #200	; 0xc8
 8018fc6:	68f6      	ldr	r6, [r6, #12]
 8018fc8:	4630      	mov	r0, r6
 8018fca:	f007 fa1d 	bl	8020408 <lv_disp_get_dpi>
 8018fce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018fd2:	28ef      	cmp	r0, #239	; 0xef
 8018fd4:	f301 85cb 	bgt.w	801ab6e <lv_theme_default_init+0x25a6>
 8018fd8:	2101      	movs	r1, #1
 8018fda:	4620      	mov	r0, r4
 8018fdc:	f009 feb8 	bl	8022d50 <lv_style_set_transform_width>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8018fe0:	4bb3      	ldr	r3, [pc, #716]	; (80192b0 <lv_theme_default_init+0xce8>)
 8018fe2:	681c      	ldr	r4, [r3, #0]
 8018fe4:	34c8      	adds	r4, #200	; 0xc8
 8018fe6:	4bb3      	ldr	r3, [pc, #716]	; (80192b4 <lv_theme_default_init+0xcec>)
 8018fe8:	68de      	ldr	r6, [r3, #12]
 8018fea:	4630      	mov	r0, r6
 8018fec:	f007 fa0c 	bl	8020408 <lv_disp_get_dpi>
 8018ff0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018ff4:	28ef      	cmp	r0, #239	; 0xef
 8018ff6:	f301 85ca 	bgt.w	801ab8e <lv_theme_default_init+0x25c6>
 8018ffa:	2101      	movs	r1, #1
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f009 fead 	bl	8022d5c <lv_style_set_transform_height>
    style_init_reset(&styles->knob);
 8019002:	4cab      	ldr	r4, [pc, #684]	; (80192b0 <lv_theme_default_init+0xce8>)
 8019004:	6820      	ldr	r0, [r4, #0]
 8019006:	30f0      	adds	r0, #240	; 0xf0
 8019008:	f7ff fa96 	bl	8018538 <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 801900c:	4fa9      	ldr	r7, [pc, #676]	; (80192b4 <lv_theme_default_init+0xcec>)
 801900e:	6820      	ldr	r0, [r4, #0]
 8019010:	8a39      	ldrh	r1, [r7, #16]
 8019012:	30f0      	adds	r0, #240	; 0xf0
 8019014:	f009 fecc 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 8019018:	6820      	ldr	r0, [r4, #0]
 801901a:	21ff      	movs	r1, #255	; 0xff
 801901c:	30f0      	adds	r0, #240	; 0xf0
 801901e:	f009 fed3 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 8019022:	6826      	ldr	r6, [r4, #0]
 8019024:	36f0      	adds	r6, #240	; 0xf0
 8019026:	68fc      	ldr	r4, [r7, #12]
 8019028:	4620      	mov	r0, r4
 801902a:	f007 f9ed 	bl	8020408 <lv_disp_get_dpi>
 801902e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019032:	0040      	lsls	r0, r0, #1
 8019034:	28ef      	cmp	r0, #239	; 0xef
 8019036:	f301 85ba 	bgt.w	801abae <lv_theme_default_init+0x25e6>
 801903a:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801903c:	4621      	mov	r1, r4
 801903e:	4630      	mov	r0, r6
 8019040:	f009 fe9e 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019044:	4621      	mov	r1, r4
 8019046:	4630      	mov	r0, r6
 8019048:	f009 fea0 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801904c:	4621      	mov	r1, r4
 801904e:	4630      	mov	r0, r6
 8019050:	f009 fe8a 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019054:	4621      	mov	r1, r4
 8019056:	4630      	mov	r0, r6
 8019058:	f009 fe8c 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 801905c:	4c94      	ldr	r4, [pc, #592]	; (80192b0 <lv_theme_default_init+0xce8>)
 801905e:	6820      	ldr	r0, [r4, #0]
 8019060:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019064:	30f0      	adds	r0, #240	; 0xf0
 8019066:	f009 ff75 	bl	8022f54 <lv_style_set_radius>
    style_init_reset(&styles->anim);
 801906a:	6820      	ldr	r0, [r4, #0]
 801906c:	30e0      	adds	r0, #224	; 0xe0
 801906e:	f7ff fa63 	bl	8018538 <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 8019072:	6820      	ldr	r0, [r4, #0]
 8019074:	21c8      	movs	r1, #200	; 0xc8
 8019076:	30e0      	adds	r0, #224	; 0xe0
 8019078:	f009 ff84 	bl	8022f84 <lv_style_set_anim_time>
    style_init_reset(&styles->anim_fast);
 801907c:	6820      	ldr	r0, [r4, #0]
 801907e:	30e8      	adds	r0, #232	; 0xe8
 8019080:	f7ff fa5a 	bl	8018538 <style_init_reset>
    lv_style_set_anim_time(&styles->anim_fast, 120);
 8019084:	6820      	ldr	r0, [r4, #0]
 8019086:	2178      	movs	r1, #120	; 0x78
 8019088:	30e8      	adds	r0, #232	; 0xe8
 801908a:	f009 ff7b 	bl	8022f84 <lv_style_set_anim_time>
    style_init_reset(&styles->arc_indic);
 801908e:	6820      	ldr	r0, [r4, #0]
 8019090:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8019094:	f7ff fa50 	bl	8018538 <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 8019098:	6820      	ldr	r0, [r4, #0]
 801909a:	4b87      	ldr	r3, [pc, #540]	; (80192b8 <lv_theme_default_init+0xcf0>)
 801909c:	8819      	ldrh	r1, [r3, #0]
 801909e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80190a2:	f009 ff2d 	bl	8022f00 <lv_style_set_arc_color>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 80190a6:	6824      	ldr	r4, [r4, #0]
 80190a8:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80190ac:	4b81      	ldr	r3, [pc, #516]	; (80192b4 <lv_theme_default_init+0xcec>)
 80190ae:	68de      	ldr	r6, [r3, #12]
 80190b0:	4630      	mov	r0, r6
 80190b2:	f007 f9a9 	bl	8020408 <lv_disp_get_dpi>
 80190b6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80190ba:	28ef      	cmp	r0, #239	; 0xef
 80190bc:	f301 8587 	bgt.w	801abce <lv_theme_default_init+0x2606>
 80190c0:	2101      	movs	r1, #1
 80190c2:	4620      	mov	r0, r4
 80190c4:	f009 ff10 	bl	8022ee8 <lv_style_set_arc_width>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 80190c8:	4c79      	ldr	r4, [pc, #484]	; (80192b0 <lv_theme_default_init+0xce8>)
 80190ca:	6820      	ldr	r0, [r4, #0]
 80190cc:	2101      	movs	r1, #1
 80190ce:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80190d2:	f009 ff0f 	bl	8022ef4 <lv_style_set_arc_rounded>
    style_init_reset(&styles->arc_indic_primary);
 80190d6:	6820      	ldr	r0, [r4, #0]
 80190d8:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80190dc:	f7ff fa2c 	bl	8018538 <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 80190e0:	4f74      	ldr	r7, [pc, #464]	; (80192b4 <lv_theme_default_init+0xcec>)
 80190e2:	6820      	ldr	r0, [r4, #0]
 80190e4:	8a39      	ldrh	r1, [r7, #16]
 80190e6:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80190ea:	f009 ff09 	bl	8022f00 <lv_style_set_arc_color>
    style_init_reset(&styles->dropdown_list);
 80190ee:	6820      	ldr	r0, [r4, #0]
 80190f0:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80190f4:	f7ff fa20 	bl	8018538 <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 80190f8:	6820      	ldr	r0, [r4, #0]
 80190fa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80190fe:	f500 7098 	add.w	r0, r0, #304	; 0x130
 8019102:	f009 fe1f 	bl	8022d44 <lv_style_set_max_height>
    style_init_reset(&styles->cb_marker);
 8019106:	6820      	ldr	r0, [r4, #0]
 8019108:	f500 709c 	add.w	r0, r0, #312	; 0x138
 801910c:	f7ff fa14 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 8019110:	6826      	ldr	r6, [r4, #0]
 8019112:	f506 769c 	add.w	r6, r6, #312	; 0x138
 8019116:	68fc      	ldr	r4, [r7, #12]
 8019118:	4620      	mov	r0, r4
 801911a:	f007 f975 	bl	8020408 <lv_disp_get_dpi>
 801911e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019122:	28ef      	cmp	r0, #239	; 0xef
 8019124:	f301 8563 	bgt.w	801abee <lv_theme_default_init+0x2626>
 8019128:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801912a:	4621      	mov	r1, r4
 801912c:	4630      	mov	r0, r6
 801912e:	f009 fe27 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019132:	4621      	mov	r1, r4
 8019134:	4630      	mov	r0, r6
 8019136:	f009 fe29 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801913a:	4621      	mov	r1, r4
 801913c:	4630      	mov	r0, r6
 801913e:	f009 fe13 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019142:	4621      	mov	r1, r4
 8019144:	4630      	mov	r0, r6
 8019146:	f009 fe15 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 801914a:	4b59      	ldr	r3, [pc, #356]	; (80192b0 <lv_theme_default_init+0xce8>)
 801914c:	681c      	ldr	r4, [r3, #0]
 801914e:	f504 749c 	add.w	r4, r4, #312	; 0x138
 8019152:	4b58      	ldr	r3, [pc, #352]	; (80192b4 <lv_theme_default_init+0xcec>)
 8019154:	68de      	ldr	r6, [r3, #12]
 8019156:	4630      	mov	r0, r6
 8019158:	f007 f956 	bl	8020408 <lv_disp_get_dpi>
 801915c:	0040      	lsls	r0, r0, #1
 801915e:	28ef      	cmp	r0, #239	; 0xef
 8019160:	f301 8555 	bgt.w	801ac0e <lv_theme_default_init+0x2646>
 8019164:	2101      	movs	r1, #1
 8019166:	4620      	mov	r0, r4
 8019168:	f009 fe58 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 801916c:	4c50      	ldr	r4, [pc, #320]	; (80192b0 <lv_theme_default_init+0xce8>)
 801916e:	6820      	ldr	r0, [r4, #0]
 8019170:	4b50      	ldr	r3, [pc, #320]	; (80192b4 <lv_theme_default_init+0xcec>)
 8019172:	8a19      	ldrh	r1, [r3, #16]
 8019174:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8019178:	f009 fe3e 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 801917c:	6820      	ldr	r0, [r4, #0]
 801917e:	4b4b      	ldr	r3, [pc, #300]	; (80192ac <lv_theme_default_init+0xce4>)
 8019180:	8819      	ldrh	r1, [r3, #0]
 8019182:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8019186:	f009 fe13 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 801918a:	6820      	ldr	r0, [r4, #0]
 801918c:	21ff      	movs	r1, #255	; 0xff
 801918e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8019192:	f009 fe19 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 8019196:	6824      	ldr	r4, [r4, #0]
 8019198:	f504 749c 	add.w	r4, r4, #312	; 0x138
 801919c:	4b47      	ldr	r3, [pc, #284]	; (80192bc <lv_theme_default_init+0xcf4>)
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	2b01      	cmp	r3, #1
 80191a2:	f001 8542 	beq.w	801ac2a <lv_theme_default_init+0x2662>
 80191a6:	4b43      	ldr	r3, [pc, #268]	; (80192b4 <lv_theme_default_init+0xcec>)
 80191a8:	68de      	ldr	r6, [r3, #12]
 80191aa:	4630      	mov	r0, r6
 80191ac:	f007 f92c 	bl	8020408 <lv_disp_get_dpi>
 80191b0:	00c0      	lsls	r0, r0, #3
 80191b2:	28ef      	cmp	r0, #239	; 0xef
 80191b4:	f301 8558 	bgt.w	801ac68 <lv_theme_default_init+0x26a0>
 80191b8:	2101      	movs	r1, #1
 80191ba:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80191be:	1049      	asrs	r1, r1, #1
 80191c0:	4620      	mov	r0, r4
 80191c2:	f009 fec7 	bl	8022f54 <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 80191c6:	4c3a      	ldr	r4, [pc, #232]	; (80192b0 <lv_theme_default_init+0xce8>)
 80191c8:	6820      	ldr	r0, [r4, #0]
 80191ca:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 80191ce:	f7ff f9b3 	bl	8018538 <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 80191d2:	6820      	ldr	r0, [r4, #0]
 80191d4:	493a      	ldr	r1, [pc, #232]	; (80192c0 <lv_theme_default_init+0xcf8>)
 80191d6:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 80191da:	f009 fe07 	bl	8022dec <lv_style_set_bg_img_src>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 80191de:	6820      	ldr	r0, [r4, #0]
 80191e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80191e4:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 80191e8:	f009 fe96 	bl	8022f18 <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 80191ec:	4f31      	ldr	r7, [pc, #196]	; (80192b4 <lv_theme_default_init+0xcec>)
 80191ee:	6820      	ldr	r0, [r4, #0]
 80191f0:	6979      	ldr	r1, [r7, #20]
 80191f2:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 80191f6:	f009 fe9b 	bl	8022f30 <lv_style_set_text_font>
    style_init_reset(&styles->switch_knob);
 80191fa:	6820      	ldr	r0, [r4, #0]
 80191fc:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8019200:	f7ff f99a 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 8019204:	6826      	ldr	r6, [r4, #0]
 8019206:	f506 76a4 	add.w	r6, r6, #328	; 0x148
 801920a:	68fc      	ldr	r4, [r7, #12]
 801920c:	4620      	mov	r0, r4
 801920e:	f007 f8fb 	bl	8020408 <lv_disp_get_dpi>
 8019212:	0080      	lsls	r0, r0, #2
 8019214:	28ef      	cmp	r0, #239	; 0xef
 8019216:	f301 8535 	bgt.w	801ac84 <lv_theme_default_init+0x26bc>
 801921a:	2401      	movs	r4, #1
 801921c:	4264      	negs	r4, r4
 801921e:	b224      	sxth	r4, r4
    lv_style_set_pad_left(style, value);
 8019220:	4621      	mov	r1, r4
 8019222:	4630      	mov	r0, r6
 8019224:	f009 fdac 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019228:	4621      	mov	r1, r4
 801922a:	4630      	mov	r0, r6
 801922c:	f009 fdae 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019230:	4621      	mov	r1, r4
 8019232:	4630      	mov	r0, r6
 8019234:	f009 fd98 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019238:	4621      	mov	r1, r4
 801923a:	4630      	mov	r0, r6
 801923c:	f009 fd9a 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 8019240:	4c1b      	ldr	r4, [pc, #108]	; (80192b0 <lv_theme_default_init+0xce8>)
 8019242:	6820      	ldr	r0, [r4, #0]
 8019244:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019248:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 801924c:	f009 fdb0 	bl	8022db0 <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 8019250:	6820      	ldr	r0, [r4, #0]
 8019252:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8019256:	f7ff f96f 	bl	8018538 <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 801925a:	6820      	ldr	r0, [r4, #0]
 801925c:	2101      	movs	r1, #1
 801925e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8019262:	f009 fe2f 	bl	8022ec4 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 8019266:	6820      	ldr	r0, [r4, #0]
 8019268:	4b16      	ldr	r3, [pc, #88]	; (80192c4 <lv_theme_default_init+0xcfc>)
 801926a:	8819      	ldrh	r1, [r3, #0]
 801926c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8019270:	f009 fe2e 	bl	8022ed0 <lv_style_set_line_color>
    style_init_reset(&styles->chart_bg);
 8019274:	6820      	ldr	r0, [r4, #0]
 8019276:	f500 7094 	add.w	r0, r0, #296	; 0x128
 801927a:	f7ff f95d 	bl	8018538 <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 801927e:	6820      	ldr	r0, [r4, #0]
 8019280:	2100      	movs	r1, #0
 8019282:	f500 7094 	add.w	r0, r0, #296	; 0x128
 8019286:	f009 fdd5 	bl	8022e34 <lv_style_set_border_post>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 801928a:	6824      	ldr	r4, [r4, #0]
 801928c:	f504 7494 	add.w	r4, r4, #296	; 0x128
 8019290:	4b08      	ldr	r3, [pc, #32]	; (80192b4 <lv_theme_default_init+0xcec>)
 8019292:	68de      	ldr	r6, [r3, #12]
 8019294:	4630      	mov	r0, r6
 8019296:	f007 f8b7 	bl	8020408 <lv_disp_get_dpi>
 801929a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801929e:	0040      	lsls	r0, r0, #1
 80192a0:	28ef      	cmp	r0, #239	; 0xef
 80192a2:	f301 84fd 	bgt.w	801aca0 <lv_theme_default_init+0x26d8>
 80192a6:	2101      	movs	r1, #1
 80192a8:	e00e      	b.n	80192c8 <lv_theme_default_init+0xd00>
 80192aa:	bf00      	nop
 80192ac:	2000269c 	.word	0x2000269c
 80192b0:	200026c4 	.word	0x200026c4
 80192b4:	200026c8 	.word	0x200026c8
 80192b8:	200026a0 	.word	0x200026a0
 80192bc:	200026b4 	.word	0x200026b4
 80192c0:	0802d0f0 	.word	0x0802d0f0
 80192c4:	200026a8 	.word	0x200026a8
 80192c8:	4620      	mov	r0, r4
 80192ca:	f009 fd6b 	bl	8022da4 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 80192ce:	4cc8      	ldr	r4, [pc, #800]	; (80195f0 <lv_theme_default_init+0x1028>)
 80192d0:	6820      	ldr	r0, [r4, #0]
 80192d2:	4bc8      	ldr	r3, [pc, #800]	; (80195f4 <lv_theme_default_init+0x102c>)
 80192d4:	8819      	ldrh	r1, [r3, #0]
 80192d6:	f500 7094 	add.w	r0, r0, #296	; 0x128
 80192da:	f009 fdf9 	bl	8022ed0 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 80192de:	6820      	ldr	r0, [r4, #0]
 80192e0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80192e4:	f7ff f928 	bl	8018538 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 80192e8:	6824      	ldr	r4, [r4, #0]
 80192ea:	f504 7488 	add.w	r4, r4, #272	; 0x110
 80192ee:	4bc2      	ldr	r3, [pc, #776]	; (80195f8 <lv_theme_default_init+0x1030>)
 80192f0:	68de      	ldr	r6, [r3, #12]
 80192f2:	4630      	mov	r0, r6
 80192f4:	f007 f888 	bl	8020408 <lv_disp_get_dpi>
 80192f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80192fc:	28ef      	cmp	r0, #239	; 0xef
 80192fe:	f301 84df 	bgt.w	801acc0 <lv_theme_default_init+0x26f8>
 8019302:	2101      	movs	r1, #1
 8019304:	4620      	mov	r0, r4
 8019306:	f009 fddd 	bl	8022ec4 <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 801930a:	4bb9      	ldr	r3, [pc, #740]	; (80195f0 <lv_theme_default_init+0x1028>)
 801930c:	681c      	ldr	r4, [r3, #0]
 801930e:	f504 7488 	add.w	r4, r4, #272	; 0x110
 8019312:	4bb9      	ldr	r3, [pc, #740]	; (80195f8 <lv_theme_default_init+0x1030>)
 8019314:	68de      	ldr	r6, [r3, #12]
 8019316:	4630      	mov	r0, r6
 8019318:	f007 f876 	bl	8020408 <lv_disp_get_dpi>
 801931c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019320:	28ef      	cmp	r0, #239	; 0xef
 8019322:	f301 84dd 	bgt.w	801ace0 <lv_theme_default_init+0x2718>
 8019326:	2101      	movs	r1, #1
 8019328:	4620      	mov	r0, r4
 801932a:	f009 fe13 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 801932e:	4bb0      	ldr	r3, [pc, #704]	; (80195f0 <lv_theme_default_init+0x1028>)
 8019330:	681e      	ldr	r6, [r3, #0]
 8019332:	f506 7688 	add.w	r6, r6, #272	; 0x110
 8019336:	4bb0      	ldr	r3, [pc, #704]	; (80195f8 <lv_theme_default_init+0x1030>)
 8019338:	68dc      	ldr	r4, [r3, #12]
 801933a:	4620      	mov	r0, r4
 801933c:	f007 f864 	bl	8020408 <lv_disp_get_dpi>
 8019340:	00c0      	lsls	r0, r0, #3
 8019342:	28ef      	cmp	r0, #239	; 0xef
 8019344:	f301 84dc 	bgt.w	801ad00 <lv_theme_default_init+0x2738>
 8019348:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 801934a:	4621      	mov	r1, r4
 801934c:	4630      	mov	r0, r6
 801934e:	f009 fce7 	bl	8022d20 <lv_style_set_width>
    lv_style_set_height(style, value);
 8019352:	4621      	mov	r1, r4
 8019354:	4630      	mov	r0, r6
 8019356:	f009 fcef 	bl	8022d38 <lv_style_set_height>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 801935a:	4ba5      	ldr	r3, [pc, #660]	; (80195f0 <lv_theme_default_init+0x1028>)
 801935c:	681c      	ldr	r4, [r3, #0]
 801935e:	f504 7488 	add.w	r4, r4, #272	; 0x110
 8019362:	4ba5      	ldr	r3, [pc, #660]	; (80195f8 <lv_theme_default_init+0x1030>)
 8019364:	68de      	ldr	r6, [r3, #12]
 8019366:	4630      	mov	r0, r6
 8019368:	f007 f84e 	bl	8020408 <lv_disp_get_dpi>
 801936c:	0040      	lsls	r0, r0, #1
 801936e:	28ef      	cmp	r0, #239	; 0xef
 8019370:	f301 84d4 	bgt.w	801ad1c <lv_theme_default_init+0x2754>
 8019374:	2101      	movs	r1, #1
 8019376:	4620      	mov	r0, r4
 8019378:	f009 fd14 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 801937c:	4c9c      	ldr	r4, [pc, #624]	; (80195f0 <lv_theme_default_init+0x1028>)
 801937e:	6820      	ldr	r0, [r4, #0]
 8019380:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8019384:	f7ff f8d8 	bl	8018538 <style_init_reset>
    lv_style_set_radius(&styles->chart_indic, LV_RADIUS_CIRCLE);
 8019388:	6820      	ldr	r0, [r4, #0]
 801938a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801938e:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8019392:	f009 fddf 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 8019396:	6826      	ldr	r6, [r4, #0]
 8019398:	f506 768c 	add.w	r6, r6, #280	; 0x118
 801939c:	4b96      	ldr	r3, [pc, #600]	; (80195f8 <lv_theme_default_init+0x1030>)
 801939e:	68dc      	ldr	r4, [r3, #12]
 80193a0:	4620      	mov	r0, r4
 80193a2:	f007 f831 	bl	8020408 <lv_disp_get_dpi>
 80193a6:	00c0      	lsls	r0, r0, #3
 80193a8:	28ef      	cmp	r0, #239	; 0xef
 80193aa:	f301 84c5 	bgt.w	801ad38 <lv_theme_default_init+0x2770>
 80193ae:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 80193b0:	4621      	mov	r1, r4
 80193b2:	4630      	mov	r0, r6
 80193b4:	f009 fcb4 	bl	8022d20 <lv_style_set_width>
    lv_style_set_height(style, value);
 80193b8:	4621      	mov	r1, r4
 80193ba:	4630      	mov	r0, r6
 80193bc:	f009 fcbc 	bl	8022d38 <lv_style_set_height>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 80193c0:	4e8d      	ldr	r6, [pc, #564]	; (80195f8 <lv_theme_default_init+0x1030>)
 80193c2:	4c8b      	ldr	r4, [pc, #556]	; (80195f0 <lv_theme_default_init+0x1028>)
 80193c4:	6820      	ldr	r0, [r4, #0]
 80193c6:	8a31      	ldrh	r1, [r6, #16]
 80193c8:	f500 708c 	add.w	r0, r0, #280	; 0x118
 80193cc:	f009 fcf0 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 80193d0:	6820      	ldr	r0, [r4, #0]
 80193d2:	21ff      	movs	r1, #255	; 0xff
 80193d4:	f500 708c 	add.w	r0, r0, #280	; 0x118
 80193d8:	f009 fcf6 	bl	8022dc8 <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 80193dc:	6820      	ldr	r0, [r4, #0]
 80193de:	f500 7090 	add.w	r0, r0, #288	; 0x120
 80193e2:	f7ff f8a9 	bl	8018538 <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 80193e6:	6824      	ldr	r4, [r4, #0]
 80193e8:	f504 7490 	add.w	r4, r4, #288	; 0x120
 80193ec:	68f6      	ldr	r6, [r6, #12]
 80193ee:	4630      	mov	r0, r6
 80193f0:	f007 f80a 	bl	8020408 <lv_disp_get_dpi>
 80193f4:	28ef      	cmp	r0, #239	; 0xef
 80193f6:	f301 84b1 	bgt.w	801ad5c <lv_theme_default_init+0x2794>
 80193fa:	2101      	movs	r1, #1
 80193fc:	4620      	mov	r0, r4
 80193fe:	f009 fd61 	bl	8022ec4 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 8019402:	4c7b      	ldr	r4, [pc, #492]	; (80195f0 <lv_theme_default_init+0x1028>)
 8019404:	6820      	ldr	r0, [r4, #0]
 8019406:	4b7d      	ldr	r3, [pc, #500]	; (80195fc <lv_theme_default_init+0x1034>)
 8019408:	8819      	ldrh	r1, [r3, #0]
 801940a:	f500 7090 	add.w	r0, r0, #288	; 0x120
 801940e:	f009 fd5f 	bl	8022ed0 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 8019412:	6826      	ldr	r6, [r4, #0]
 8019414:	f506 7690 	add.w	r6, r6, #288	; 0x120
 8019418:	4b77      	ldr	r3, [pc, #476]	; (80195f8 <lv_theme_default_init+0x1030>)
 801941a:	68dc      	ldr	r4, [r3, #12]
 801941c:	4620      	mov	r0, r4
 801941e:	f006 fff3 	bl	8020408 <lv_disp_get_dpi>
 8019422:	0040      	lsls	r0, r0, #1
 8019424:	28ef      	cmp	r0, #239	; 0xef
 8019426:	f301 84a6 	bgt.w	801ad76 <lv_theme_default_init+0x27ae>
 801942a:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801942c:	4621      	mov	r1, r4
 801942e:	4630      	mov	r0, r6
 8019430:	f009 fca6 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019434:	4621      	mov	r1, r4
 8019436:	4630      	mov	r0, r6
 8019438:	f009 fca8 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801943c:	4621      	mov	r1, r4
 801943e:	4630      	mov	r0, r6
 8019440:	f009 fc92 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019444:	4621      	mov	r1, r4
 8019446:	4630      	mov	r0, r6
 8019448:	f009 fc94 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 801944c:	4c68      	ldr	r4, [pc, #416]	; (80195f0 <lv_theme_default_init+0x1028>)
 801944e:	6826      	ldr	r6, [r4, #0]
 8019450:	f506 7690 	add.w	r6, r6, #288	; 0x120
 8019454:	2012      	movs	r0, #18
 8019456:	f007 fe4b 	bl	80210f0 <lv_palette_main>
 801945a:	4601      	mov	r1, r0
 801945c:	4630      	mov	r0, r6
 801945e:	f009 fd5b 	bl	8022f18 <lv_style_set_text_color>
    style_init_reset(&styles->menu_bg);
 8019462:	6820      	ldr	r0, [r4, #0]
 8019464:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8019468:	f7ff f866 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_bg, 0);
 801946c:	6826      	ldr	r6, [r4, #0]
 801946e:	f506 76c4 	add.w	r6, r6, #392	; 0x188
    lv_style_set_pad_left(style, value);
 8019472:	2100      	movs	r1, #0
 8019474:	4630      	mov	r0, r6
 8019476:	f009 fc83 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 801947a:	2100      	movs	r1, #0
 801947c:	4630      	mov	r0, r6
 801947e:	f009 fc85 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019482:	2100      	movs	r1, #0
 8019484:	4630      	mov	r0, r6
 8019486:	f009 fc6f 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 801948a:	2100      	movs	r1, #0
 801948c:	4630      	mov	r0, r6
 801948e:	f009 fc71 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_bg, 0);
 8019492:	6826      	ldr	r6, [r4, #0]
 8019494:	f506 76c4 	add.w	r6, r6, #392	; 0x188
    lv_style_set_pad_row(style, value);
 8019498:	2100      	movs	r1, #0
 801949a:	4630      	mov	r0, r6
 801949c:	f009 fc7c 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80194a0:	2100      	movs	r1, #0
 80194a2:	4630      	mov	r0, r6
 80194a4:	f009 fc7e 	bl	8022da4 <lv_style_set_pad_column>
    lv_style_set_radius(&styles->menu_bg, 0);
 80194a8:	6820      	ldr	r0, [r4, #0]
 80194aa:	2100      	movs	r1, #0
 80194ac:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 80194b0:	f009 fd50 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_bg, true);
 80194b4:	6820      	ldr	r0, [r4, #0]
 80194b6:	2101      	movs	r1, #1
 80194b8:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 80194bc:	f009 fd50 	bl	8022f60 <lv_style_set_clip_corner>
    lv_style_set_border_side(&styles->menu_bg, LV_BORDER_SIDE_NONE);
 80194c0:	6820      	ldr	r0, [r4, #0]
 80194c2:	2100      	movs	r1, #0
 80194c4:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 80194c8:	f009 fcae 	bl	8022e28 <lv_style_set_border_side>
    style_init_reset(&styles->menu_section);
 80194cc:	6820      	ldr	r0, [r4, #0]
 80194ce:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 80194d2:	f7ff f831 	bl	8018538 <style_init_reset>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 80194d6:	6824      	ldr	r4, [r4, #0]
 80194d8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
 80194dc:	4b48      	ldr	r3, [pc, #288]	; (8019600 <lv_theme_default_init+0x1038>)
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	f001 8456 	beq.w	801ad92 <lv_theme_default_init+0x27ca>
 80194e6:	4b44      	ldr	r3, [pc, #272]	; (80195f8 <lv_theme_default_init+0x1030>)
 80194e8:	68de      	ldr	r6, [r3, #12]
 80194ea:	4630      	mov	r0, r6
 80194ec:	f006 ff8c 	bl	8020408 <lv_disp_get_dpi>
 80194f0:	00c0      	lsls	r0, r0, #3
 80194f2:	28ef      	cmp	r0, #239	; 0xef
 80194f4:	f301 846a 	bgt.w	801adcc <lv_theme_default_init+0x2804>
 80194f8:	2101      	movs	r1, #1
 80194fa:	4620      	mov	r0, r4
 80194fc:	f009 fd2a 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_section, true);
 8019500:	4c3b      	ldr	r4, [pc, #236]	; (80195f0 <lv_theme_default_init+0x1028>)
 8019502:	6820      	ldr	r0, [r4, #0]
 8019504:	2101      	movs	r1, #1
 8019506:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 801950a:	f009 fd29 	bl	8022f60 <lv_style_set_clip_corner>
    lv_style_set_bg_opa(&styles->menu_section, LV_OPA_COVER);
 801950e:	6820      	ldr	r0, [r4, #0]
 8019510:	21ff      	movs	r1, #255	; 0xff
 8019512:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019516:	f009 fc57 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_section, color_card);
 801951a:	6820      	ldr	r0, [r4, #0]
 801951c:	4b39      	ldr	r3, [pc, #228]	; (8019604 <lv_theme_default_init+0x103c>)
 801951e:	8819      	ldrh	r1, [r3, #0]
 8019520:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019524:	f009 fc44 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->menu_section, color_text);
 8019528:	6820      	ldr	r0, [r4, #0]
 801952a:	4b34      	ldr	r3, [pc, #208]	; (80195fc <lv_theme_default_init+0x1034>)
 801952c:	8819      	ldrh	r1, [r3, #0]
 801952e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019532:	f009 fcf1 	bl	8022f18 <lv_style_set_text_color>
    style_init_reset(&styles->menu_cont);
 8019536:	6820      	ldr	r0, [r4, #0]
 8019538:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 801953c:	f7fe fffc 	bl	8018538 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 8019540:	6826      	ldr	r6, [r4, #0]
 8019542:	f506 76c8 	add.w	r6, r6, #400	; 0x190
 8019546:	4b2e      	ldr	r3, [pc, #184]	; (8019600 <lv_theme_default_init+0x1038>)
 8019548:	781b      	ldrb	r3, [r3, #0]
 801954a:	2b01      	cmp	r3, #1
 801954c:	f001 844c 	beq.w	801ade8 <lv_theme_default_init+0x2820>
 8019550:	2b02      	cmp	r3, #2
 8019552:	f001 8466 	beq.w	801ae22 <lv_theme_default_init+0x285a>
 8019556:	4b28      	ldr	r3, [pc, #160]	; (80195f8 <lv_theme_default_init+0x1030>)
 8019558:	68dc      	ldr	r4, [r3, #12]
 801955a:	4620      	mov	r0, r4
 801955c:	f006 ff54 	bl	8020408 <lv_disp_get_dpi>
 8019560:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019564:	0040      	lsls	r0, r0, #1
 8019566:	28ef      	cmp	r0, #239	; 0xef
 8019568:	f301 8478 	bgt.w	801ae5c <lv_theme_default_init+0x2894>
 801956c:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801956e:	4621      	mov	r1, r4
 8019570:	4630      	mov	r0, r6
 8019572:	f009 fc05 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019576:	4621      	mov	r1, r4
 8019578:	4630      	mov	r0, r6
 801957a:	f009 fc07 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 801957e:	4b1c      	ldr	r3, [pc, #112]	; (80195f0 <lv_theme_default_init+0x1028>)
 8019580:	681e      	ldr	r6, [r3, #0]
 8019582:	f506 76c8 	add.w	r6, r6, #400	; 0x190
 8019586:	4b1e      	ldr	r3, [pc, #120]	; (8019600 <lv_theme_default_init+0x1038>)
 8019588:	781b      	ldrb	r3, [r3, #0]
 801958a:	2b01      	cmp	r3, #1
 801958c:	f001 8476 	beq.w	801ae7c <lv_theme_default_init+0x28b4>
 8019590:	2b02      	cmp	r3, #2
 8019592:	f001 8490 	beq.w	801aeb6 <lv_theme_default_init+0x28ee>
 8019596:	4b18      	ldr	r3, [pc, #96]	; (80195f8 <lv_theme_default_init+0x1030>)
 8019598:	68dc      	ldr	r4, [r3, #12]
 801959a:	4620      	mov	r0, r4
 801959c:	f006 ff34 	bl	8020408 <lv_disp_get_dpi>
 80195a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80195a4:	0040      	lsls	r0, r0, #1
 80195a6:	28ef      	cmp	r0, #239	; 0xef
 80195a8:	f301 84a2 	bgt.w	801aef0 <lv_theme_default_init+0x2928>
 80195ac:	2401      	movs	r4, #1
    lv_style_set_pad_top(style, value);
 80195ae:	4621      	mov	r1, r4
 80195b0:	4630      	mov	r0, r6
 80195b2:	f009 fbd9 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80195b6:	4621      	mov	r1, r4
 80195b8:	4630      	mov	r0, r6
 80195ba:	f009 fbdb 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 80195be:	4b0c      	ldr	r3, [pc, #48]	; (80195f0 <lv_theme_default_init+0x1028>)
 80195c0:	681e      	ldr	r6, [r3, #0]
 80195c2:	f506 76c8 	add.w	r6, r6, #400	; 0x190
 80195c6:	4b0e      	ldr	r3, [pc, #56]	; (8019600 <lv_theme_default_init+0x1038>)
 80195c8:	781b      	ldrb	r3, [r3, #0]
 80195ca:	2b01      	cmp	r3, #1
 80195cc:	f001 84a0 	beq.w	801af10 <lv_theme_default_init+0x2948>
 80195d0:	2b02      	cmp	r3, #2
 80195d2:	f001 84ba 	beq.w	801af4a <lv_theme_default_init+0x2982>
 80195d6:	4b08      	ldr	r3, [pc, #32]	; (80195f8 <lv_theme_default_init+0x1030>)
 80195d8:	68dc      	ldr	r4, [r3, #12]
 80195da:	4620      	mov	r0, r4
 80195dc:	f006 ff14 	bl	8020408 <lv_disp_get_dpi>
 80195e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80195e4:	0040      	lsls	r0, r0, #1
 80195e6:	28ef      	cmp	r0, #239	; 0xef
 80195e8:	f301 84cc 	bgt.w	801af84 <lv_theme_default_init+0x29bc>
 80195ec:	2401      	movs	r4, #1
 80195ee:	e00b      	b.n	8019608 <lv_theme_default_init+0x1040>
 80195f0:	200026c4 	.word	0x200026c4
 80195f4:	200026a0 	.word	0x200026a0
 80195f8:	200026c8 	.word	0x200026c8
 80195fc:	200026a8 	.word	0x200026a8
 8019600:	200026b4 	.word	0x200026b4
 8019604:	2000269c 	.word	0x2000269c
    lv_style_set_pad_row(style, value);
 8019608:	4621      	mov	r1, r4
 801960a:	4630      	mov	r0, r6
 801960c:	f009 fbc4 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019610:	4621      	mov	r1, r4
 8019612:	4630      	mov	r0, r6
 8019614:	f009 fbc6 	bl	8022da4 <lv_style_set_pad_column>
    lv_style_set_border_width(&styles->menu_cont, lv_disp_dpx(theme.disp, 1));
 8019618:	4bca      	ldr	r3, [pc, #808]	; (8019944 <lv_theme_default_init+0x137c>)
 801961a:	681c      	ldr	r4, [r3, #0]
 801961c:	f504 74c8 	add.w	r4, r4, #400	; 0x190
 8019620:	4bc9      	ldr	r3, [pc, #804]	; (8019948 <lv_theme_default_init+0x1380>)
 8019622:	68de      	ldr	r6, [r3, #12]
 8019624:	4630      	mov	r0, r6
 8019626:	f006 feef 	bl	8020408 <lv_disp_get_dpi>
 801962a:	28ef      	cmp	r0, #239	; 0xef
 801962c:	f301 84ba 	bgt.w	801afa4 <lv_theme_default_init+0x29dc>
 8019630:	2101      	movs	r1, #1
 8019632:	4620      	mov	r0, r4
 8019634:	f009 fbf2 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_cont, LV_OPA_10);
 8019638:	4cc2      	ldr	r4, [pc, #776]	; (8019944 <lv_theme_default_init+0x137c>)
 801963a:	6820      	ldr	r0, [r4, #0]
 801963c:	2119      	movs	r1, #25
 801963e:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8019642:	f009 fbe5 	bl	8022e10 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_cont, color_text);
 8019646:	6820      	ldr	r0, [r4, #0]
 8019648:	4bc0      	ldr	r3, [pc, #768]	; (801994c <lv_theme_default_init+0x1384>)
 801964a:	8819      	ldrh	r1, [r3, #0]
 801964c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8019650:	f009 fbd2 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_cont, LV_BORDER_SIDE_NONE);
 8019654:	6820      	ldr	r0, [r4, #0]
 8019656:	2100      	movs	r1, #0
 8019658:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 801965c:	f009 fbe4 	bl	8022e28 <lv_style_set_border_side>
    style_init_reset(&styles->menu_sidebar_cont);
 8019660:	6820      	ldr	r0, [r4, #0]
 8019662:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8019666:	f7fe ff67 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_sidebar_cont, 0);
 801966a:	6826      	ldr	r6, [r4, #0]
 801966c:	f506 76cc 	add.w	r6, r6, #408	; 0x198
    lv_style_set_pad_left(style, value);
 8019670:	2100      	movs	r1, #0
 8019672:	4630      	mov	r0, r6
 8019674:	f009 fb84 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019678:	2100      	movs	r1, #0
 801967a:	4630      	mov	r0, r6
 801967c:	f009 fb86 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019680:	2100      	movs	r1, #0
 8019682:	4630      	mov	r0, r6
 8019684:	f009 fb70 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019688:	2100      	movs	r1, #0
 801968a:	4630      	mov	r0, r6
 801968c:	f009 fb72 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_sidebar_cont, 0);
 8019690:	6826      	ldr	r6, [r4, #0]
 8019692:	f506 76cc 	add.w	r6, r6, #408	; 0x198
    lv_style_set_pad_row(style, value);
 8019696:	2100      	movs	r1, #0
 8019698:	4630      	mov	r0, r6
 801969a:	f009 fb7d 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 801969e:	2100      	movs	r1, #0
 80196a0:	4630      	mov	r0, r6
 80196a2:	f009 fb7f 	bl	8022da4 <lv_style_set_pad_column>
    lv_style_set_border_width(&styles->menu_sidebar_cont, lv_disp_dpx(theme.disp, 1));
 80196a6:	6824      	ldr	r4, [r4, #0]
 80196a8:	f504 74cc 	add.w	r4, r4, #408	; 0x198
 80196ac:	4ba6      	ldr	r3, [pc, #664]	; (8019948 <lv_theme_default_init+0x1380>)
 80196ae:	68de      	ldr	r6, [r3, #12]
 80196b0:	4630      	mov	r0, r6
 80196b2:	f006 fea9 	bl	8020408 <lv_disp_get_dpi>
 80196b6:	28ef      	cmp	r0, #239	; 0xef
 80196b8:	f301 8481 	bgt.w	801afbe <lv_theme_default_init+0x29f6>
 80196bc:	2101      	movs	r1, #1
 80196be:	4620      	mov	r0, r4
 80196c0:	f009 fbac 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_sidebar_cont, LV_OPA_10);
 80196c4:	4c9f      	ldr	r4, [pc, #636]	; (8019944 <lv_theme_default_init+0x137c>)
 80196c6:	6820      	ldr	r0, [r4, #0]
 80196c8:	2119      	movs	r1, #25
 80196ca:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 80196ce:	f009 fb9f 	bl	8022e10 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_sidebar_cont, color_text);
 80196d2:	6820      	ldr	r0, [r4, #0]
 80196d4:	4b9d      	ldr	r3, [pc, #628]	; (801994c <lv_theme_default_init+0x1384>)
 80196d6:	8819      	ldrh	r1, [r3, #0]
 80196d8:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 80196dc:	f009 fb8c 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_sidebar_cont, LV_BORDER_SIDE_RIGHT);
 80196e0:	6820      	ldr	r0, [r4, #0]
 80196e2:	2108      	movs	r1, #8
 80196e4:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 80196e8:	f009 fb9e 	bl	8022e28 <lv_style_set_border_side>
    style_init_reset(&styles->menu_main_cont);
 80196ec:	6820      	ldr	r0, [r4, #0]
 80196ee:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 80196f2:	f7fe ff21 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_main_cont, 0);
 80196f6:	6826      	ldr	r6, [r4, #0]
 80196f8:	f506 76d0 	add.w	r6, r6, #416	; 0x1a0
    lv_style_set_pad_left(style, value);
 80196fc:	2100      	movs	r1, #0
 80196fe:	4630      	mov	r0, r6
 8019700:	f009 fb3e 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019704:	2100      	movs	r1, #0
 8019706:	4630      	mov	r0, r6
 8019708:	f009 fb40 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801970c:	2100      	movs	r1, #0
 801970e:	4630      	mov	r0, r6
 8019710:	f009 fb2a 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019714:	2100      	movs	r1, #0
 8019716:	4630      	mov	r0, r6
 8019718:	f009 fb2c 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_main_cont, 0);
 801971c:	6826      	ldr	r6, [r4, #0]
 801971e:	f506 76d0 	add.w	r6, r6, #416	; 0x1a0
    lv_style_set_pad_row(style, value);
 8019722:	2100      	movs	r1, #0
 8019724:	4630      	mov	r0, r6
 8019726:	f009 fb37 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 801972a:	2100      	movs	r1, #0
 801972c:	4630      	mov	r0, r6
 801972e:	f009 fb39 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->menu_header_cont);
 8019732:	6820      	ldr	r0, [r4, #0]
 8019734:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8019738:	f7fe fefe 	bl	8018538 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 801973c:	6826      	ldr	r6, [r4, #0]
 801973e:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
 8019742:	4b83      	ldr	r3, [pc, #524]	; (8019950 <lv_theme_default_init+0x1388>)
 8019744:	781b      	ldrb	r3, [r3, #0]
 8019746:	2b01      	cmp	r3, #1
 8019748:	f001 8446 	beq.w	801afd8 <lv_theme_default_init+0x2a10>
 801974c:	2b02      	cmp	r3, #2
 801974e:	f001 8460 	beq.w	801b012 <lv_theme_default_init+0x2a4a>
 8019752:	4b7d      	ldr	r3, [pc, #500]	; (8019948 <lv_theme_default_init+0x1380>)
 8019754:	68dc      	ldr	r4, [r3, #12]
 8019756:	4620      	mov	r0, r4
 8019758:	f006 fe56 	bl	8020408 <lv_disp_get_dpi>
 801975c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019760:	0040      	lsls	r0, r0, #1
 8019762:	28ef      	cmp	r0, #239	; 0xef
 8019764:	f301 8472 	bgt.w	801b04c <lv_theme_default_init+0x2a84>
 8019768:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801976a:	4621      	mov	r1, r4
 801976c:	4630      	mov	r0, r6
 801976e:	f009 fb07 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019772:	4621      	mov	r1, r4
 8019774:	4630      	mov	r0, r6
 8019776:	f009 fb09 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 801977a:	4b72      	ldr	r3, [pc, #456]	; (8019944 <lv_theme_default_init+0x137c>)
 801977c:	681e      	ldr	r6, [r3, #0]
 801977e:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
 8019782:	4b73      	ldr	r3, [pc, #460]	; (8019950 <lv_theme_default_init+0x1388>)
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	2b01      	cmp	r3, #1
 8019788:	f001 8470 	beq.w	801b06c <lv_theme_default_init+0x2aa4>
 801978c:	2b02      	cmp	r3, #2
 801978e:	f001 8486 	beq.w	801b09e <lv_theme_default_init+0x2ad6>
 8019792:	4b6d      	ldr	r3, [pc, #436]	; (8019948 <lv_theme_default_init+0x1380>)
 8019794:	68dc      	ldr	r4, [r3, #12]
 8019796:	4620      	mov	r0, r4
 8019798:	f006 fe36 	bl	8020408 <lv_disp_get_dpi>
 801979c:	0040      	lsls	r0, r0, #1
 801979e:	28ef      	cmp	r0, #239	; 0xef
 80197a0:	f301 849e 	bgt.w	801b0e0 <lv_theme_default_init+0x2b18>
 80197a4:	2401      	movs	r4, #1
    lv_style_set_pad_top(style, value);
 80197a6:	4621      	mov	r1, r4
 80197a8:	4630      	mov	r0, r6
 80197aa:	f009 fadd 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80197ae:	4621      	mov	r1, r4
 80197b0:	4630      	mov	r0, r6
 80197b2:	f009 fadf 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 80197b6:	4b63      	ldr	r3, [pc, #396]	; (8019944 <lv_theme_default_init+0x137c>)
 80197b8:	681e      	ldr	r6, [r3, #0]
 80197ba:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
 80197be:	4b64      	ldr	r3, [pc, #400]	; (8019950 <lv_theme_default_init+0x1388>)
 80197c0:	781b      	ldrb	r3, [r3, #0]
 80197c2:	2b01      	cmp	r3, #1
 80197c4:	f001 849a 	beq.w	801b0fc <lv_theme_default_init+0x2b34>
 80197c8:	2b02      	cmp	r3, #2
 80197ca:	f001 84b4 	beq.w	801b136 <lv_theme_default_init+0x2b6e>
 80197ce:	4b5e      	ldr	r3, [pc, #376]	; (8019948 <lv_theme_default_init+0x1380>)
 80197d0:	68dc      	ldr	r4, [r3, #12]
 80197d2:	4620      	mov	r0, r4
 80197d4:	f006 fe18 	bl	8020408 <lv_disp_get_dpi>
 80197d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80197dc:	0040      	lsls	r0, r0, #1
 80197de:	28ef      	cmp	r0, #239	; 0xef
 80197e0:	f301 84c6 	bgt.w	801b170 <lv_theme_default_init+0x2ba8>
 80197e4:	2401      	movs	r4, #1
    lv_style_set_pad_row(style, value);
 80197e6:	4621      	mov	r1, r4
 80197e8:	4630      	mov	r0, r6
 80197ea:	f009 fad5 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80197ee:	4621      	mov	r1, r4
 80197f0:	4630      	mov	r0, r6
 80197f2:	f009 fad7 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->menu_header_btn);
 80197f6:	4c53      	ldr	r4, [pc, #332]	; (8019944 <lv_theme_default_init+0x137c>)
 80197f8:	6820      	ldr	r0, [r4, #0]
 80197fa:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 80197fe:	f7fe fe9b 	bl	8018538 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 8019802:	6826      	ldr	r6, [r4, #0]
 8019804:	f506 76dc 	add.w	r6, r6, #440	; 0x1b8
 8019808:	4b51      	ldr	r3, [pc, #324]	; (8019950 <lv_theme_default_init+0x1388>)
 801980a:	781b      	ldrb	r3, [r3, #0]
 801980c:	2b01      	cmp	r3, #1
 801980e:	f001 84bf 	beq.w	801b190 <lv_theme_default_init+0x2bc8>
 8019812:	2b02      	cmp	r3, #2
 8019814:	f001 84d5 	beq.w	801b1c2 <lv_theme_default_init+0x2bfa>
 8019818:	4b4b      	ldr	r3, [pc, #300]	; (8019948 <lv_theme_default_init+0x1380>)
 801981a:	68dc      	ldr	r4, [r3, #12]
 801981c:	4620      	mov	r0, r4
 801981e:	f006 fdf3 	bl	8020408 <lv_disp_get_dpi>
 8019822:	0040      	lsls	r0, r0, #1
 8019824:	28ef      	cmp	r0, #239	; 0xef
 8019826:	f301 84e9 	bgt.w	801b1fc <lv_theme_default_init+0x2c34>
 801982a:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801982c:	4621      	mov	r1, r4
 801982e:	4630      	mov	r0, r6
 8019830:	f009 faa6 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019834:	4621      	mov	r1, r4
 8019836:	4630      	mov	r0, r6
 8019838:	f009 faa8 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 801983c:	4b41      	ldr	r3, [pc, #260]	; (8019944 <lv_theme_default_init+0x137c>)
 801983e:	681e      	ldr	r6, [r3, #0]
 8019840:	f506 76dc 	add.w	r6, r6, #440	; 0x1b8
 8019844:	4b42      	ldr	r3, [pc, #264]	; (8019950 <lv_theme_default_init+0x1388>)
 8019846:	781b      	ldrb	r3, [r3, #0]
 8019848:	2b01      	cmp	r3, #1
 801984a:	f001 84e5 	beq.w	801b218 <lv_theme_default_init+0x2c50>
 801984e:	2b02      	cmp	r3, #2
 8019850:	f001 84fb 	beq.w	801b24a <lv_theme_default_init+0x2c82>
 8019854:	4b3c      	ldr	r3, [pc, #240]	; (8019948 <lv_theme_default_init+0x1380>)
 8019856:	68dc      	ldr	r4, [r3, #12]
 8019858:	4620      	mov	r0, r4
 801985a:	f006 fdd5 	bl	8020408 <lv_disp_get_dpi>
 801985e:	0040      	lsls	r0, r0, #1
 8019860:	28ef      	cmp	r0, #239	; 0xef
 8019862:	f301 850f 	bgt.w	801b284 <lv_theme_default_init+0x2cbc>
 8019866:	2401      	movs	r4, #1
    lv_style_set_pad_top(style, value);
 8019868:	4621      	mov	r1, r4
 801986a:	4630      	mov	r0, r6
 801986c:	f009 fa7c 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019870:	4621      	mov	r1, r4
 8019872:	4630      	mov	r0, r6
 8019874:	f009 fa7e 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_shadow_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 8019878:	4c32      	ldr	r4, [pc, #200]	; (8019944 <lv_theme_default_init+0x137c>)
 801987a:	6820      	ldr	r0, [r4, #0]
 801987c:	2100      	movs	r1, #0
 801987e:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 8019882:	f009 fb19 	bl	8022eb8 <lv_style_set_shadow_opa>
    lv_style_set_bg_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 8019886:	6820      	ldr	r0, [r4, #0]
 8019888:	2100      	movs	r1, #0
 801988a:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 801988e:	f009 fa9b 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->menu_header_btn, color_text);
 8019892:	6820      	ldr	r0, [r4, #0]
 8019894:	4b2d      	ldr	r3, [pc, #180]	; (801994c <lv_theme_default_init+0x1384>)
 8019896:	8819      	ldrh	r1, [r3, #0]
 8019898:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 801989c:	f009 fb3c 	bl	8022f18 <lv_style_set_text_color>
    style_init_reset(&styles->menu_page);
 80198a0:	6820      	ldr	r0, [r4, #0]
 80198a2:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 80198a6:	f7fe fe47 	bl	8018538 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_page, 0);
 80198aa:	6826      	ldr	r6, [r4, #0]
 80198ac:	f506 76d4 	add.w	r6, r6, #424	; 0x1a8
    lv_style_set_pad_left(style, value);
 80198b0:	2100      	movs	r1, #0
 80198b2:	4630      	mov	r0, r6
 80198b4:	f009 fa64 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 80198b8:	2100      	movs	r1, #0
 80198ba:	4630      	mov	r0, r6
 80198bc:	f009 fa66 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_gap(&styles->menu_page, 0);
 80198c0:	6826      	ldr	r6, [r4, #0]
 80198c2:	f506 76d4 	add.w	r6, r6, #424	; 0x1a8
    lv_style_set_pad_row(style, value);
 80198c6:	2100      	movs	r1, #0
 80198c8:	4630      	mov	r0, r6
 80198ca:	f009 fa65 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80198ce:	2100      	movs	r1, #0
 80198d0:	4630      	mov	r0, r6
 80198d2:	f009 fa67 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->menu_pressed);
 80198d6:	6820      	ldr	r0, [r4, #0]
 80198d8:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 80198dc:	f7fe fe2c 	bl	8018538 <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_pressed, LV_OPA_20);
 80198e0:	6820      	ldr	r0, [r4, #0]
 80198e2:	2133      	movs	r1, #51	; 0x33
 80198e4:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 80198e8:	f009 fa6e 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_pressed, lv_palette_main(LV_PALETTE_GREY));
 80198ec:	6826      	ldr	r6, [r4, #0]
 80198ee:	f506 76e4 	add.w	r6, r6, #456	; 0x1c8
 80198f2:	2012      	movs	r0, #18
 80198f4:	f007 fbfc 	bl	80210f0 <lv_palette_main>
 80198f8:	4601      	mov	r1, r0
 80198fa:	4630      	mov	r0, r6
 80198fc:	f009 fa58 	bl	8022db0 <lv_style_set_bg_color>
    style_init_reset(&styles->menu_separator);
 8019900:	6820      	ldr	r0, [r4, #0]
 8019902:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8019906:	f7fe fe17 	bl	8018538 <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_separator, LV_OPA_TRANSP);
 801990a:	6820      	ldr	r0, [r4, #0]
 801990c:	2100      	movs	r1, #0
 801990e:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8019912:	f009 fa59 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 8019916:	6826      	ldr	r6, [r4, #0]
 8019918:	f506 76e8 	add.w	r6, r6, #464	; 0x1d0
 801991c:	4b0c      	ldr	r3, [pc, #48]	; (8019950 <lv_theme_default_init+0x1388>)
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	2b01      	cmp	r3, #1
 8019922:	f001 84bd 	beq.w	801b2a0 <lv_theme_default_init+0x2cd8>
 8019926:	2b02      	cmp	r3, #2
 8019928:	f001 84d3 	beq.w	801b2d2 <lv_theme_default_init+0x2d0a>
 801992c:	4b06      	ldr	r3, [pc, #24]	; (8019948 <lv_theme_default_init+0x1380>)
 801992e:	68dc      	ldr	r4, [r3, #12]
 8019930:	4620      	mov	r0, r4
 8019932:	f006 fd69 	bl	8020408 <lv_disp_get_dpi>
 8019936:	0040      	lsls	r0, r0, #1
 8019938:	28ef      	cmp	r0, #239	; 0xef
 801993a:	f301 84e7 	bgt.w	801b30c <lv_theme_default_init+0x2d44>
 801993e:	2401      	movs	r4, #1
 8019940:	e008      	b.n	8019954 <lv_theme_default_init+0x138c>
 8019942:	bf00      	nop
 8019944:	200026c4 	.word	0x200026c4
 8019948:	200026c8 	.word	0x200026c8
 801994c:	200026a8 	.word	0x200026a8
 8019950:	200026b4 	.word	0x200026b4
    lv_style_set_pad_top(style, value);
 8019954:	4621      	mov	r1, r4
 8019956:	4630      	mov	r0, r6
 8019958:	f009 fa06 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 801995c:	4621      	mov	r1, r4
 801995e:	4630      	mov	r0, r6
 8019960:	f009 fa08 	bl	8022d74 <lv_style_set_pad_bottom>
    style_init_reset(&styles->meter_marker);
 8019964:	4cca      	ldr	r4, [pc, #808]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019966:	6820      	ldr	r0, [r4, #0]
 8019968:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 801996c:	f7fe fde4 	bl	8018538 <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 8019970:	6824      	ldr	r4, [r4, #0]
 8019972:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 8019976:	4bc7      	ldr	r3, [pc, #796]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019978:	68de      	ldr	r6, [r3, #12]
 801997a:	4630      	mov	r0, r6
 801997c:	f006 fd44 	bl	8020408 <lv_disp_get_dpi>
 8019980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019984:	28ef      	cmp	r0, #239	; 0xef
 8019986:	f301 84cf 	bgt.w	801b328 <lv_theme_default_init+0x2d60>
 801998a:	2101      	movs	r1, #1
 801998c:	4620      	mov	r0, r4
 801998e:	f009 fa99 	bl	8022ec4 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 8019992:	4cbf      	ldr	r4, [pc, #764]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019994:	6820      	ldr	r0, [r4, #0]
 8019996:	4bc0      	ldr	r3, [pc, #768]	; (8019c98 <lv_theme_default_init+0x16d0>)
 8019998:	8819      	ldrh	r1, [r3, #0]
 801999a:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 801999e:	f009 fa97 	bl	8022ed0 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 80199a2:	6826      	ldr	r6, [r4, #0]
 80199a4:	f506 76b0 	add.w	r6, r6, #352	; 0x160
 80199a8:	4bba      	ldr	r3, [pc, #744]	; (8019c94 <lv_theme_default_init+0x16cc>)
 80199aa:	68dc      	ldr	r4, [r3, #12]
 80199ac:	4620      	mov	r0, r4
 80199ae:	f006 fd2b 	bl	8020408 <lv_disp_get_dpi>
 80199b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80199b6:	0080      	lsls	r0, r0, #2
 80199b8:	28ef      	cmp	r0, #239	; 0xef
 80199ba:	f301 84c5 	bgt.w	801b348 <lv_theme_default_init+0x2d80>
 80199be:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 80199c0:	4621      	mov	r1, r4
 80199c2:	4630      	mov	r0, r6
 80199c4:	f009 f9ac 	bl	8022d20 <lv_style_set_width>
    lv_style_set_height(style, value);
 80199c8:	4621      	mov	r1, r4
 80199ca:	4630      	mov	r0, r6
 80199cc:	f009 f9b4 	bl	8022d38 <lv_style_set_height>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 80199d0:	4baf      	ldr	r3, [pc, #700]	; (8019c90 <lv_theme_default_init+0x16c8>)
 80199d2:	681c      	ldr	r4, [r3, #0]
 80199d4:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 80199d8:	4bae      	ldr	r3, [pc, #696]	; (8019c94 <lv_theme_default_init+0x16cc>)
 80199da:	68de      	ldr	r6, [r3, #12]
 80199dc:	4630      	mov	r0, r6
 80199de:	f006 fd13 	bl	8020408 <lv_disp_get_dpi>
 80199e2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80199e6:	28ef      	cmp	r0, #239	; 0xef
 80199e8:	f301 84be 	bgt.w	801b368 <lv_theme_default_init+0x2da0>
 80199ec:	2101      	movs	r1, #1
 80199ee:	4620      	mov	r0, r4
 80199f0:	f009 f9c6 	bl	8022d80 <lv_style_set_pad_left>
    style_init_reset(&styles->meter_indic);
 80199f4:	4ca6      	ldr	r4, [pc, #664]	; (8019c90 <lv_theme_default_init+0x16c8>)
 80199f6:	6820      	ldr	r0, [r4, #0]
 80199f8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 80199fc:	f7fe fd9c 	bl	8018538 <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 8019a00:	6820      	ldr	r0, [r4, #0]
 8019a02:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019a06:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8019a0a:	f009 faa3 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 8019a0e:	6820      	ldr	r0, [r4, #0]
 8019a10:	4ba1      	ldr	r3, [pc, #644]	; (8019c98 <lv_theme_default_init+0x16d0>)
 8019a12:	8819      	ldrh	r1, [r3, #0]
 8019a14:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8019a18:	f009 f9ca 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 8019a1c:	6820      	ldr	r0, [r4, #0]
 8019a1e:	21ff      	movs	r1, #255	; 0xff
 8019a20:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8019a24:	f009 f9d0 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 8019a28:	6826      	ldr	r6, [r4, #0]
 8019a2a:	f506 76b4 	add.w	r6, r6, #360	; 0x168
 8019a2e:	4b99      	ldr	r3, [pc, #612]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019a30:	68dc      	ldr	r4, [r3, #12]
 8019a32:	4620      	mov	r0, r4
 8019a34:	f006 fce8 	bl	8020408 <lv_disp_get_dpi>
 8019a38:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019a3c:	28ef      	cmp	r0, #239	; 0xef
 8019a3e:	f301 84a3 	bgt.w	801b388 <lv_theme_default_init+0x2dc0>
 8019a42:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 8019a44:	4621      	mov	r1, r4
 8019a46:	4630      	mov	r0, r6
 8019a48:	f009 f96a 	bl	8022d20 <lv_style_set_width>
    lv_style_set_height(style, value);
 8019a4c:	4621      	mov	r1, r4
 8019a4e:	4630      	mov	r0, r6
 8019a50:	f009 f972 	bl	8022d38 <lv_style_set_height>
    style_init_reset(&styles->table_cell);
 8019a54:	4c8e      	ldr	r4, [pc, #568]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019a56:	6820      	ldr	r0, [r4, #0]
 8019a58:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8019a5c:	f7fe fd6c 	bl	8018538 <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 8019a60:	6824      	ldr	r4, [r4, #0]
 8019a62:	f504 74ac 	add.w	r4, r4, #344	; 0x158
 8019a66:	4b8b      	ldr	r3, [pc, #556]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019a68:	68de      	ldr	r6, [r3, #12]
 8019a6a:	4630      	mov	r0, r6
 8019a6c:	f006 fccc 	bl	8020408 <lv_disp_get_dpi>
 8019a70:	28ef      	cmp	r0, #239	; 0xef
 8019a72:	f301 8499 	bgt.w	801b3a8 <lv_theme_default_init+0x2de0>
 8019a76:	2101      	movs	r1, #1
 8019a78:	4620      	mov	r0, r4
 8019a7a:	f009 f9cf 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 8019a7e:	4c84      	ldr	r4, [pc, #528]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019a80:	6820      	ldr	r0, [r4, #0]
 8019a82:	4b86      	ldr	r3, [pc, #536]	; (8019c9c <lv_theme_default_init+0x16d4>)
 8019a84:	8819      	ldrh	r1, [r3, #0]
 8019a86:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8019a8a:	f009 f9b5 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 8019a8e:	6820      	ldr	r0, [r4, #0]
 8019a90:	2103      	movs	r1, #3
 8019a92:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8019a96:	f009 f9c7 	bl	8022e28 <lv_style_set_border_side>
    style_init_reset(&styles->ta_cursor);
 8019a9a:	6820      	ldr	r0, [r4, #0]
 8019a9c:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 8019aa0:	f7fe fd4a 	bl	8018538 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 8019aa4:	6820      	ldr	r0, [r4, #0]
 8019aa6:	4b7c      	ldr	r3, [pc, #496]	; (8019c98 <lv_theme_default_init+0x16d0>)
 8019aa8:	8819      	ldrh	r1, [r3, #0]
 8019aaa:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 8019aae:	f009 f9a3 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 8019ab2:	6824      	ldr	r4, [r4, #0]
 8019ab4:	f504 74b8 	add.w	r4, r4, #368	; 0x170
 8019ab8:	4b76      	ldr	r3, [pc, #472]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019aba:	68de      	ldr	r6, [r3, #12]
 8019abc:	4630      	mov	r0, r6
 8019abe:	f006 fca3 	bl	8020408 <lv_disp_get_dpi>
 8019ac2:	0040      	lsls	r0, r0, #1
 8019ac4:	28ef      	cmp	r0, #239	; 0xef
 8019ac6:	f301 847c 	bgt.w	801b3c2 <lv_theme_default_init+0x2dfa>
 8019aca:	2101      	movs	r1, #1
 8019acc:	4620      	mov	r0, r4
 8019ace:	f009 f9a5 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, - lv_disp_dpx(theme.disp, 1));
 8019ad2:	4b6f      	ldr	r3, [pc, #444]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019ad4:	681c      	ldr	r4, [r3, #0]
 8019ad6:	f504 74b8 	add.w	r4, r4, #368	; 0x170
 8019ada:	4b6e      	ldr	r3, [pc, #440]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019adc:	68de      	ldr	r6, [r3, #12]
 8019ade:	4630      	mov	r0, r6
 8019ae0:	f006 fc92 	bl	8020408 <lv_disp_get_dpi>
 8019ae4:	28ef      	cmp	r0, #239	; 0xef
 8019ae6:	f301 847a 	bgt.w	801b3de <lv_theme_default_init+0x2e16>
 8019aea:	2101      	movs	r1, #1
 8019aec:	4249      	negs	r1, r1
 8019aee:	b209      	sxth	r1, r1
 8019af0:	4620      	mov	r0, r4
 8019af2:	f009 f945 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 8019af6:	4c66      	ldr	r4, [pc, #408]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019af8:	6820      	ldr	r0, [r4, #0]
 8019afa:	2104      	movs	r1, #4
 8019afc:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 8019b00:	f009 f992 	bl	8022e28 <lv_style_set_border_side>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 8019b04:	6820      	ldr	r0, [r4, #0]
 8019b06:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8019b0a:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 8019b0e:	f009 fa39 	bl	8022f84 <lv_style_set_anim_time>
    style_init_reset(&styles->ta_placeholder);
 8019b12:	6820      	ldr	r0, [r4, #0]
 8019b14:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 8019b18:	f7fe fd0e 	bl	8018538 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 8019b1c:	6824      	ldr	r4, [r4, #0]
 8019b1e:	f504 74bc 	add.w	r4, r4, #376	; 0x178
 8019b22:	4b5c      	ldr	r3, [pc, #368]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019b24:	6a1b      	ldr	r3, [r3, #32]
 8019b26:	f013 0f01 	tst.w	r3, #1
 8019b2a:	f001 8465 	beq.w	801b3f8 <lv_theme_default_init+0x2e30>
 8019b2e:	2102      	movs	r1, #2
 8019b30:	2012      	movs	r0, #18
 8019b32:	f007 fafd 	bl	8021130 <lv_palette_darken>
 8019b36:	4601      	mov	r1, r0
 8019b38:	4620      	mov	r0, r4
 8019b3a:	f009 f9ed 	bl	8022f18 <lv_style_set_text_color>
    style_init_reset(&styles->colorwheel_main);
 8019b3e:	4c54      	ldr	r4, [pc, #336]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019b40:	6820      	ldr	r0, [r4, #0]
 8019b42:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8019b46:	f7fe fcf7 	bl	8018538 <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 8019b4a:	6824      	ldr	r4, [r4, #0]
 8019b4c:	f504 74c0 	add.w	r4, r4, #384	; 0x180
 8019b50:	4b50      	ldr	r3, [pc, #320]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019b52:	68de      	ldr	r6, [r3, #12]
 8019b54:	4630      	mov	r0, r6
 8019b56:	f006 fc57 	bl	8020408 <lv_disp_get_dpi>
 8019b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019b5e:	0040      	lsls	r0, r0, #1
 8019b60:	28ef      	cmp	r0, #239	; 0xef
 8019b62:	f301 8450 	bgt.w	801b406 <lv_theme_default_init+0x2e3e>
 8019b66:	2101      	movs	r1, #1
 8019b68:	4620      	mov	r0, r4
 8019b6a:	f009 f9bd 	bl	8022ee8 <lv_style_set_arc_width>
    style_init_reset(&styles->msgbox_btn_bg);
 8019b6e:	4c48      	ldr	r4, [pc, #288]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019b70:	6820      	ldr	r0, [r4, #0]
 8019b72:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
 8019b76:	f7fe fcdf 	bl	8018538 <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 8019b7a:	6826      	ldr	r6, [r4, #0]
 8019b7c:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
 8019b80:	4b44      	ldr	r3, [pc, #272]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019b82:	68dc      	ldr	r4, [r3, #12]
 8019b84:	4620      	mov	r0, r4
 8019b86:	f006 fc3f 	bl	8020408 <lv_disp_get_dpi>
 8019b8a:	0080      	lsls	r0, r0, #2
 8019b8c:	28ef      	cmp	r0, #239	; 0xef
 8019b8e:	f301 844f 	bgt.w	801b430 <lv_theme_default_init+0x2e68>
 8019b92:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019b94:	4621      	mov	r1, r4
 8019b96:	4630      	mov	r0, r6
 8019b98:	f009 f8f2 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019b9c:	4621      	mov	r1, r4
 8019b9e:	4630      	mov	r0, r6
 8019ba0:	f009 f8f4 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019ba4:	4621      	mov	r1, r4
 8019ba6:	4630      	mov	r0, r6
 8019ba8:	f009 f8de 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019bac:	4621      	mov	r1, r4
 8019bae:	4630      	mov	r0, r6
 8019bb0:	f009 f8e0 	bl	8022d74 <lv_style_set_pad_bottom>
    style_init_reset(&styles->msgbox_bg);
 8019bb4:	4c36      	ldr	r4, [pc, #216]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019bb6:	6820      	ldr	r0, [r4, #0]
 8019bb8:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8019bbc:	f7fe fcbc 	bl	8018538 <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 8019bc0:	6820      	ldr	r0, [r4, #0]
 8019bc2:	f242 0164 	movw	r1, #8292	; 0x2064
 8019bc6:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8019bca:	f009 f8af 	bl	8022d2c <lv_style_set_max_width>
    style_init_reset(&styles->msgbox_backdrop_bg);
 8019bce:	6820      	ldr	r0, [r4, #0]
 8019bd0:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 8019bd4:	f7fe fcb0 	bl	8018538 <style_init_reset>
    lv_style_set_bg_color(&styles->msgbox_backdrop_bg, lv_palette_main(LV_PALETTE_GREY));
 8019bd8:	6826      	ldr	r6, [r4, #0]
 8019bda:	f506 76f4 	add.w	r6, r6, #488	; 0x1e8
 8019bde:	2012      	movs	r0, #18
 8019be0:	f007 fa86 	bl	80210f0 <lv_palette_main>
 8019be4:	4601      	mov	r1, r0
 8019be6:	4630      	mov	r0, r6
 8019be8:	f009 f8e2 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->msgbox_backdrop_bg, LV_OPA_50);
 8019bec:	6820      	ldr	r0, [r4, #0]
 8019bee:	217f      	movs	r1, #127	; 0x7f
 8019bf0:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 8019bf4:	f009 f8e8 	bl	8022dc8 <lv_style_set_bg_opa>
    style_init_reset(&styles->keyboard_btn_bg);
 8019bf8:	6820      	ldr	r0, [r4, #0]
 8019bfa:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 8019bfe:	f7fe fc9b 	bl	8018538 <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 8019c02:	6820      	ldr	r0, [r4, #0]
 8019c04:	2100      	movs	r1, #0
 8019c06:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 8019c0a:	f009 f937 	bl	8022e7c <lv_style_set_shadow_width>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 8019c0e:	6824      	ldr	r4, [r4, #0]
 8019c10:	f504 74f8 	add.w	r4, r4, #496	; 0x1f0
 8019c14:	4b22      	ldr	r3, [pc, #136]	; (8019ca0 <lv_theme_default_init+0x16d8>)
 8019c16:	781b      	ldrb	r3, [r3, #0]
 8019c18:	2b03      	cmp	r3, #3
 8019c1a:	f001 8417 	beq.w	801b44c <lv_theme_default_init+0x2e84>
 8019c1e:	2b01      	cmp	r3, #1
 8019c20:	f001 842f 	beq.w	801b482 <lv_theme_default_init+0x2eba>
 8019c24:	4b1b      	ldr	r3, [pc, #108]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019c26:	68de      	ldr	r6, [r3, #12]
 8019c28:	4630      	mov	r0, r6
 8019c2a:	f006 fbed 	bl	8020408 <lv_disp_get_dpi>
 8019c2e:	00c0      	lsls	r0, r0, #3
 8019c30:	28ef      	cmp	r0, #239	; 0xef
 8019c32:	f301 8443 	bgt.w	801b4bc <lv_theme_default_init+0x2ef4>
 8019c36:	2101      	movs	r1, #1
 8019c38:	4620      	mov	r0, r4
 8019c3a:	f009 f98b 	bl	8022f54 <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 8019c3e:	4c14      	ldr	r4, [pc, #80]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019c40:	6820      	ldr	r0, [r4, #0]
 8019c42:	f500 7008 	add.w	r0, r0, #544	; 0x220
 8019c46:	f7fe fc77 	bl	8018538 <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 8019c4a:	4e12      	ldr	r6, [pc, #72]	; (8019c94 <lv_theme_default_init+0x16cc>)
 8019c4c:	6820      	ldr	r0, [r4, #0]
 8019c4e:	8a31      	ldrh	r1, [r6, #16]
 8019c50:	f500 7008 	add.w	r0, r0, #544	; 0x220
 8019c54:	f009 f8d0 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 8019c58:	6824      	ldr	r4, [r4, #0]
 8019c5a:	f504 7408 	add.w	r4, r4, #544	; 0x220
 8019c5e:	68f6      	ldr	r6, [r6, #12]
 8019c60:	4630      	mov	r0, r6
 8019c62:	f006 fbd1 	bl	8020408 <lv_disp_get_dpi>
 8019c66:	0040      	lsls	r0, r0, #1
 8019c68:	28ef      	cmp	r0, #239	; 0xef
 8019c6a:	f301 8435 	bgt.w	801b4d8 <lv_theme_default_init+0x2f10>
 8019c6e:	2101      	movs	r1, #1
 8019c70:	0049      	lsls	r1, r1, #1
 8019c72:	b209      	sxth	r1, r1
 8019c74:	4620      	mov	r0, r4
 8019c76:	f009 f8d1 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 8019c7a:	4c05      	ldr	r4, [pc, #20]	; (8019c90 <lv_theme_default_init+0x16c8>)
 8019c7c:	6820      	ldr	r0, [r4, #0]
 8019c7e:	2101      	movs	r1, #1
 8019c80:	f500 7008 	add.w	r0, r0, #544	; 0x220
 8019c84:	f009 f8d0 	bl	8022e28 <lv_style_set_border_side>
    style_init_reset(&styles->tab_bg_focus);
 8019c88:	6820      	ldr	r0, [r4, #0]
 8019c8a:	f500 7006 	add.w	r0, r0, #536	; 0x218
 8019c8e:	e009      	b.n	8019ca4 <lv_theme_default_init+0x16dc>
 8019c90:	200026c4 	.word	0x200026c4
 8019c94:	200026c8 	.word	0x200026c8
 8019c98:	200026a8 	.word	0x200026a8
 8019c9c:	200026a0 	.word	0x200026a0
 8019ca0:	200026b4 	.word	0x200026b4
 8019ca4:	f7fe fc48 	bl	8018538 <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 8019ca8:	6824      	ldr	r4, [r4, #0]
 8019caa:	f504 7406 	add.w	r4, r4, #536	; 0x218
 8019cae:	4bc3      	ldr	r3, [pc, #780]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019cb0:	68de      	ldr	r6, [r3, #12]
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	f006 fba8 	bl	8020408 <lv_disp_get_dpi>
 8019cb8:	0040      	lsls	r0, r0, #1
 8019cba:	28ef      	cmp	r0, #239	; 0xef
 8019cbc:	f301 841a 	bgt.w	801b4f4 <lv_theme_default_init+0x2f2c>
 8019cc0:	2101      	movs	r1, #1
 8019cc2:	4249      	negs	r1, r1
 8019cc4:	b209      	sxth	r1, r1
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	f009 f8d2 	bl	8022e70 <lv_style_set_outline_pad>
    style_init_reset(&styles->list_bg);
 8019ccc:	4cbc      	ldr	r4, [pc, #752]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019cce:	6820      	ldr	r0, [r4, #0]
 8019cd0:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 8019cd4:	f7fe fc30 	bl	8018538 <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 8019cd8:	6826      	ldr	r6, [r4, #0]
 8019cda:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8019cde:	4bb9      	ldr	r3, [pc, #740]	; (8019fc4 <lv_theme_default_init+0x19fc>)
 8019ce0:	781b      	ldrb	r3, [r3, #0]
 8019ce2:	2b01      	cmp	r3, #1
 8019ce4:	f001 8414 	beq.w	801b510 <lv_theme_default_init+0x2f48>
 8019ce8:	2b02      	cmp	r3, #2
 8019cea:	f001 842e 	beq.w	801b54a <lv_theme_default_init+0x2f82>
 8019cee:	4bb3      	ldr	r3, [pc, #716]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019cf0:	68dc      	ldr	r4, [r3, #12]
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	f006 fb88 	bl	8020408 <lv_disp_get_dpi>
 8019cf8:	0100      	lsls	r0, r0, #4
 8019cfa:	28ef      	cmp	r0, #239	; 0xef
 8019cfc:	f301 8442 	bgt.w	801b584 <lv_theme_default_init+0x2fbc>
 8019d00:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019d02:	4621      	mov	r1, r4
 8019d04:	4630      	mov	r0, r6
 8019d06:	f009 f83b 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019d0a:	4621      	mov	r1, r4
 8019d0c:	4630      	mov	r0, r6
 8019d0e:	f009 f83d 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 8019d12:	4cab      	ldr	r4, [pc, #684]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019d14:	6826      	ldr	r6, [r4, #0]
 8019d16:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
    lv_style_set_pad_top(style, value);
 8019d1a:	2100      	movs	r1, #0
 8019d1c:	4630      	mov	r0, r6
 8019d1e:	f009 f823 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019d22:	2100      	movs	r1, #0
 8019d24:	4630      	mov	r0, r6
 8019d26:	f009 f825 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 8019d2a:	6826      	ldr	r6, [r4, #0]
 8019d2c:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
    lv_style_set_pad_row(style, value);
 8019d30:	2100      	movs	r1, #0
 8019d32:	4630      	mov	r0, r6
 8019d34:	f009 f830 	bl	8022d98 <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019d38:	2100      	movs	r1, #0
 8019d3a:	4630      	mov	r0, r6
 8019d3c:	f009 f832 	bl	8022da4 <lv_style_set_pad_column>
    lv_style_set_clip_corner(&styles->list_bg, true);
 8019d40:	6820      	ldr	r0, [r4, #0]
 8019d42:	2101      	movs	r1, #1
 8019d44:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 8019d48:	f009 f90a 	bl	8022f60 <lv_style_set_clip_corner>
    style_init_reset(&styles->list_btn);
 8019d4c:	6820      	ldr	r0, [r4, #0]
 8019d4e:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8019d52:	f7fe fbf1 	bl	8018538 <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 8019d56:	6824      	ldr	r4, [r4, #0]
 8019d58:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8019d5c:	4b97      	ldr	r3, [pc, #604]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019d5e:	68de      	ldr	r6, [r3, #12]
 8019d60:	4630      	mov	r0, r6
 8019d62:	f006 fb51 	bl	8020408 <lv_disp_get_dpi>
 8019d66:	28ef      	cmp	r0, #239	; 0xef
 8019d68:	f301 841a 	bgt.w	801b5a0 <lv_theme_default_init+0x2fd8>
 8019d6c:	2101      	movs	r1, #1
 8019d6e:	4620      	mov	r0, r4
 8019d70:	f009 f854 	bl	8022e1c <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 8019d74:	4c92      	ldr	r4, [pc, #584]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019d76:	6820      	ldr	r0, [r4, #0]
 8019d78:	4b93      	ldr	r3, [pc, #588]	; (8019fc8 <lv_theme_default_init+0x1a00>)
 8019d7a:	8819      	ldrh	r1, [r3, #0]
 8019d7c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8019d80:	f009 f83a 	bl	8022df8 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 8019d84:	6820      	ldr	r0, [r4, #0]
 8019d86:	2101      	movs	r1, #1
 8019d88:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8019d8c:	f009 f84c 	bl	8022e28 <lv_style_set_border_side>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 8019d90:	6826      	ldr	r6, [r4, #0]
 8019d92:	f506 7600 	add.w	r6, r6, #512	; 0x200
 8019d96:	4b8b      	ldr	r3, [pc, #556]	; (8019fc4 <lv_theme_default_init+0x19fc>)
 8019d98:	781b      	ldrb	r3, [r3, #0]
 8019d9a:	2b01      	cmp	r3, #1
 8019d9c:	f001 840d 	beq.w	801b5ba <lv_theme_default_init+0x2ff2>
 8019da0:	2b02      	cmp	r3, #2
 8019da2:	f001 8427 	beq.w	801b5f4 <lv_theme_default_init+0x302c>
 8019da6:	4b85      	ldr	r3, [pc, #532]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019da8:	68dc      	ldr	r4, [r3, #12]
 8019daa:	4620      	mov	r0, r4
 8019dac:	f006 fb2c 	bl	8020408 <lv_disp_get_dpi>
 8019db0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019db4:	0040      	lsls	r0, r0, #1
 8019db6:	28ef      	cmp	r0, #239	; 0xef
 8019db8:	f301 8439 	bgt.w	801b62e <lv_theme_default_init+0x3066>
 8019dbc:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019dbe:	4621      	mov	r1, r4
 8019dc0:	4630      	mov	r0, r6
 8019dc2:	f008 ffdd 	bl	8022d80 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019dc6:	4621      	mov	r1, r4
 8019dc8:	4630      	mov	r0, r6
 8019dca:	f008 ffdf 	bl	8022d8c <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019dce:	4621      	mov	r1, r4
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	f008 ffc9 	bl	8022d68 <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019dd6:	4621      	mov	r1, r4
 8019dd8:	4630      	mov	r0, r6
 8019dda:	f008 ffcb 	bl	8022d74 <lv_style_set_pad_bottom>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 8019dde:	4b78      	ldr	r3, [pc, #480]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019de0:	681c      	ldr	r4, [r3, #0]
 8019de2:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8019de6:	4b77      	ldr	r3, [pc, #476]	; (8019fc4 <lv_theme_default_init+0x19fc>)
 8019de8:	781b      	ldrb	r3, [r3, #0]
 8019dea:	2b01      	cmp	r3, #1
 8019dec:	f001 842f 	beq.w	801b64e <lv_theme_default_init+0x3086>
 8019df0:	2b02      	cmp	r3, #2
 8019df2:	f001 8449 	beq.w	801b688 <lv_theme_default_init+0x30c0>
 8019df6:	4b71      	ldr	r3, [pc, #452]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019df8:	68de      	ldr	r6, [r3, #12]
 8019dfa:	4630      	mov	r0, r6
 8019dfc:	f006 fb04 	bl	8020408 <lv_disp_get_dpi>
 8019e00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019e04:	0040      	lsls	r0, r0, #1
 8019e06:	28ef      	cmp	r0, #239	; 0xef
 8019e08:	f301 845b 	bgt.w	801b6c2 <lv_theme_default_init+0x30fa>
 8019e0c:	2101      	movs	r1, #1
 8019e0e:	4620      	mov	r0, r4
 8019e10:	f008 ffc8 	bl	8022da4 <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 8019e14:	4c6a      	ldr	r4, [pc, #424]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019e16:	6820      	ldr	r0, [r4, #0]
 8019e18:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8019e1c:	f7fe fb8c 	bl	8018538 <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 8019e20:	6824      	ldr	r4, [r4, #0]
 8019e22:	f504 7402 	add.w	r4, r4, #520	; 0x208
 8019e26:	4b67      	ldr	r3, [pc, #412]	; (8019fc4 <lv_theme_default_init+0x19fc>)
 8019e28:	781b      	ldrb	r3, [r3, #0]
 8019e2a:	2b01      	cmp	r3, #1
 8019e2c:	f001 8459 	beq.w	801b6e2 <lv_theme_default_init+0x311a>
 8019e30:	2b02      	cmp	r3, #2
 8019e32:	f001 8473 	beq.w	801b71c <lv_theme_default_init+0x3154>
 8019e36:	4b61      	ldr	r3, [pc, #388]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019e38:	68de      	ldr	r6, [r3, #12]
 8019e3a:	4630      	mov	r0, r6
 8019e3c:	f006 fae4 	bl	8020408 <lv_disp_get_dpi>
 8019e40:	0100      	lsls	r0, r0, #4
 8019e42:	28ef      	cmp	r0, #239	; 0xef
 8019e44:	f301 8487 	bgt.w	801b756 <lv_theme_default_init+0x318e>
 8019e48:	2101      	movs	r1, #1
 8019e4a:	4620      	mov	r0, r4
 8019e4c:	f008 ff80 	bl	8022d50 <lv_style_set_transform_width>
    style_init_reset(&styles->led);
 8019e50:	4c5b      	ldr	r4, [pc, #364]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019e52:	6820      	ldr	r0, [r4, #0]
 8019e54:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8019e58:	f7fe fb6e 	bl	8018538 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 8019e5c:	6820      	ldr	r0, [r4, #0]
 8019e5e:	21ff      	movs	r1, #255	; 0xff
 8019e60:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8019e64:	f008 ffb0 	bl	8022dc8 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 8019e68:	6820      	ldr	r0, [r4, #0]
 8019e6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019e6e:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8019e72:	f008 ff9d 	bl	8022db0 <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 8019e76:	6826      	ldr	r6, [r4, #0]
 8019e78:	f506 760a 	add.w	r6, r6, #552	; 0x228
 8019e7c:	2012      	movs	r0, #18
 8019e7e:	f007 f937 	bl	80210f0 <lv_palette_main>
 8019e82:	4601      	mov	r1, r0
 8019e84:	4630      	mov	r0, r6
 8019e86:	f008 ffa5 	bl	8022dd4 <lv_style_set_bg_grad_color>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 8019e8a:	6820      	ldr	r0, [r4, #0]
 8019e8c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019e90:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8019e94:	f009 f85e 	bl	8022f54 <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 8019e98:	6824      	ldr	r4, [r4, #0]
 8019e9a:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8019e9e:	4b47      	ldr	r3, [pc, #284]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019ea0:	68de      	ldr	r6, [r3, #12]
 8019ea2:	4630      	mov	r0, r6
 8019ea4:	f006 fab0 	bl	8020408 <lv_disp_get_dpi>
 8019ea8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8019eac:	28ef      	cmp	r0, #239	; 0xef
 8019eae:	f301 8465 	bgt.w	801b77c <lv_theme_default_init+0x31b4>
 8019eb2:	2101      	movs	r1, #1
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	f008 ffe1 	bl	8022e7c <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 8019eba:	4c41      	ldr	r4, [pc, #260]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019ebc:	6820      	ldr	r0, [r4, #0]
 8019ebe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019ec2:	f500 700a 	add.w	r0, r0, #552	; 0x228
 8019ec6:	f008 ffeb 	bl	8022ea0 <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 8019eca:	6824      	ldr	r4, [r4, #0]
 8019ecc:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8019ed0:	4b3a      	ldr	r3, [pc, #232]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019ed2:	68de      	ldr	r6, [r3, #12]
 8019ed4:	4630      	mov	r0, r6
 8019ed6:	f006 fa97 	bl	8020408 <lv_disp_get_dpi>
 8019eda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019ede:	28ef      	cmp	r0, #239	; 0xef
 8019ee0:	f301 845c 	bgt.w	801b79c <lv_theme_default_init+0x31d4>
 8019ee4:	2101      	movs	r1, #1
 8019ee6:	4620      	mov	r0, r4
 8019ee8:	f008 ffd4 	bl	8022e94 <lv_style_set_shadow_spread>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 8019eec:	b12d      	cbz	r5, 8019efa <lv_theme_default_init+0x1932>
 8019eee:	4628      	mov	r0, r5
 8019ef0:	f7e9 fde0 	bl	8003ab4 <lv_disp_get_theme>
 8019ef4:	4b31      	ldr	r3, [pc, #196]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019ef6:	4283      	cmp	r3, r0
 8019ef8:	d102      	bne.n	8019f00 <lv_theme_default_init+0x1938>
 8019efa:	2000      	movs	r0, #0
 8019efc:	f7f0 fe7e 	bl	800abfc <lv_obj_report_style_change>
    inited = true;
 8019f00:	4b32      	ldr	r3, [pc, #200]	; (8019fcc <lv_theme_default_init+0x1a04>)
 8019f02:	2201      	movs	r2, #1
 8019f04:	701a      	strb	r2, [r3, #0]
}
 8019f06:	482d      	ldr	r0, [pc, #180]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019f08:	b002      	add	sp, #8
 8019f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        inited = false;
 8019f0e:	4b2f      	ldr	r3, [pc, #188]	; (8019fcc <lv_theme_default_init+0x1a04>)
 8019f10:	2200      	movs	r2, #0
 8019f12:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8019f14:	f44f 700c 	mov.w	r0, #560	; 0x230
 8019f18:	f007 fca6 	bl	8021868 <lv_mem_alloc>
 8019f1c:	4b2c      	ldr	r3, [pc, #176]	; (8019fd0 <lv_theme_default_init+0x1a08>)
 8019f1e:	6018      	str	r0, [r3, #0]
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 8019f20:	4b27      	ldr	r3, [pc, #156]	; (8019fc0 <lv_theme_default_init+0x19f8>)
 8019f22:	6018      	str	r0, [r3, #0]
 8019f24:	f7fe bb5d 	b.w	80185e2 <lv_theme_default_init+0x1a>
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 8019f28:	f006 fa40 	bl	80203ac <lv_disp_get_default>
 8019f2c:	f006 fa44 	bl	80203b8 <lv_disp_get_hor_res>
 8019f30:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 8019f34:	4b23      	ldr	r3, [pc, #140]	; (8019fc4 <lv_theme_default_init+0x19fc>)
 8019f36:	bfb4      	ite	lt
 8019f38:	2202      	movlt	r2, #2
    else disp_size = DISP_LARGE;
 8019f3a:	2201      	movge	r2, #1
 8019f3c:	701a      	strb	r2, [r3, #0]
 8019f3e:	f7fe bb5b 	b.w	80185f8 <lv_theme_default_init+0x30>
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8019f42:	2104      	movs	r1, #4
 8019f44:	2012      	movs	r0, #18
 8019f46:	f007 f8dd 	bl	8021104 <lv_palette_lighten>
 8019f4a:	4b22      	ldr	r3, [pc, #136]	; (8019fd4 <lv_theme_default_init+0x1a0c>)
 8019f4c:	8018      	strh	r0, [r3, #0]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8019f4e:	4b1b      	ldr	r3, [pc, #108]	; (8019fbc <lv_theme_default_init+0x19f4>)
 8019f50:	6a1b      	ldr	r3, [r3, #32]
 8019f52:	f013 0f01 	tst.w	r3, #1
 8019f56:	f47e ab61 	bne.w	801861c <lv_theme_default_init+0x54>
 8019f5a:	2104      	movs	r1, #4
 8019f5c:	2012      	movs	r0, #18
 8019f5e:	f007 f8e7 	bl	8021130 <lv_palette_darken>
 8019f62:	4b1d      	ldr	r3, [pc, #116]	; (8019fd8 <lv_theme_default_init+0x1a10>)
 8019f64:	8018      	strh	r0, [r3, #0]
 8019f66:	f7fe bb5f 	b.w	8018628 <lv_theme_default_init+0x60>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8019f6a:	4b1c      	ldr	r3, [pc, #112]	; (8019fdc <lv_theme_default_init+0x1a14>)
 8019f6c:	781a      	ldrb	r2, [r3, #0]
 8019f6e:	f042 021f 	orr.w	r2, r2, #31
 8019f72:	701a      	strb	r2, [r3, #0]
 8019f74:	881a      	ldrh	r2, [r3, #0]
 8019f76:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
 8019f7a:	801a      	strh	r2, [r3, #0]
 8019f7c:	22ff      	movs	r2, #255	; 0xff
 8019f7e:	705a      	strb	r2, [r3, #1]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 8019f80:	2102      	movs	r1, #2
 8019f82:	2012      	movs	r0, #18
 8019f84:	f007 f8be 	bl	8021104 <lv_palette_lighten>
 8019f88:	4b0f      	ldr	r3, [pc, #60]	; (8019fc8 <lv_theme_default_init+0x1a00>)
 8019f8a:	8018      	strh	r0, [r3, #0]
 8019f8c:	f7fe bb5a 	b.w	8018644 <lv_theme_default_init+0x7c>
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 8019f90:	2012      	movs	r0, #18
 8019f92:	f007 f8ad 	bl	80210f0 <lv_palette_main>
 8019f96:	4601      	mov	r1, r0
 8019f98:	f7fe bb8f 	b.w	80186ba <lv_theme_default_init+0xf2>
 8019f9c:	4620      	mov	r0, r4
 8019f9e:	f006 fa33 	bl	8020408 <lv_disp_get_dpi>
 8019fa2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8019fa6:	f100 0350 	add.w	r3, r0, #80	; 0x50
 8019faa:	4a0d      	ldr	r2, [pc, #52]	; (8019fe0 <lv_theme_default_init+0x1a18>)
 8019fac:	fb82 1203 	smull	r1, r2, r2, r3
 8019fb0:	17dc      	asrs	r4, r3, #31
 8019fb2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 8019fb6:	b224      	sxth	r4, r4
 8019fb8:	f7fe bb97 	b.w	80186ea <lv_theme_default_init+0x122>
 8019fbc:	200026c8 	.word	0x200026c8
 8019fc0:	200026c4 	.word	0x200026c4
 8019fc4:	200026b4 	.word	0x200026b4
 8019fc8:	200026a0 	.word	0x200026a0
 8019fcc:	200026c0 	.word	0x200026c0
 8019fd0:	200028dc 	.word	0x200028dc
 8019fd4:	200026a4 	.word	0x200026a4
 8019fd8:	200026a8 	.word	0x200026a8
 8019fdc:	2000269c 	.word	0x2000269c
 8019fe0:	66666667 	.word	0x66666667
 8019fe4:	4630      	mov	r0, r6
 8019fe6:	f006 fa0f 	bl	8020408 <lv_disp_get_dpi>
 8019fea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019fee:	f100 0350 	add.w	r3, r0, #80	; 0x50
 8019ff2:	4ad1      	ldr	r2, [pc, #836]	; (801a338 <lv_theme_default_init+0x1d70>)
 8019ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8019ff8:	17d9      	asrs	r1, r3, #31
 8019ffa:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 8019ffe:	b209      	sxth	r1, r1
 801a000:	f7fe bb91 	b.w	8018726 <lv_theme_default_init+0x15e>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 801a004:	4bcd      	ldr	r3, [pc, #820]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a006:	68de      	ldr	r6, [r3, #12]
 801a008:	4630      	mov	r0, r6
 801a00a:	f006 f9fd 	bl	8020408 <lv_disp_get_dpi>
 801a00e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a012:	0040      	lsls	r0, r0, #1
 801a014:	28ef      	cmp	r0, #239	; 0xef
 801a016:	dc02      	bgt.n	801a01e <lv_theme_default_init+0x1a56>
 801a018:	2101      	movs	r1, #1
 801a01a:	f7fe bbc1 	b.w	80187a0 <lv_theme_default_init+0x1d8>
 801a01e:	4630      	mov	r0, r6
 801a020:	f006 f9f2 	bl	8020408 <lv_disp_get_dpi>
 801a024:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a028:	0043      	lsls	r3, r0, #1
 801a02a:	3350      	adds	r3, #80	; 0x50
 801a02c:	4ac2      	ldr	r2, [pc, #776]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a02e:	fb82 1203 	smull	r1, r2, r2, r3
 801a032:	17d9      	asrs	r1, r3, #31
 801a034:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a038:	b209      	sxth	r1, r1
 801a03a:	f7fe bbb1 	b.w	80187a0 <lv_theme_default_init+0x1d8>
 801a03e:	4bbf      	ldr	r3, [pc, #764]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a040:	68de      	ldr	r6, [r3, #12]
 801a042:	4630      	mov	r0, r6
 801a044:	f006 f9e0 	bl	8020408 <lv_disp_get_dpi>
 801a048:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a04c:	0080      	lsls	r0, r0, #2
 801a04e:	28ef      	cmp	r0, #239	; 0xef
 801a050:	dc02      	bgt.n	801a058 <lv_theme_default_init+0x1a90>
 801a052:	2101      	movs	r1, #1
 801a054:	f7fe bba4 	b.w	80187a0 <lv_theme_default_init+0x1d8>
 801a058:	4630      	mov	r0, r6
 801a05a:	f006 f9d5 	bl	8020408 <lv_disp_get_dpi>
 801a05e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a062:	0083      	lsls	r3, r0, #2
 801a064:	3350      	adds	r3, #80	; 0x50
 801a066:	4ab4      	ldr	r2, [pc, #720]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a068:	fb82 1203 	smull	r1, r2, r2, r3
 801a06c:	17d9      	asrs	r1, r3, #31
 801a06e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a072:	b209      	sxth	r1, r1
 801a074:	f7fe bb94 	b.w	80187a0 <lv_theme_default_init+0x1d8>
 801a078:	4630      	mov	r0, r6
 801a07a:	f006 f9c5 	bl	8020408 <lv_disp_get_dpi>
 801a07e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a082:	0043      	lsls	r3, r0, #1
 801a084:	3350      	adds	r3, #80	; 0x50
 801a086:	4aac      	ldr	r2, [pc, #688]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a088:	fb82 1203 	smull	r1, r2, r2, r3
 801a08c:	17d9      	asrs	r1, r3, #31
 801a08e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a092:	b209      	sxth	r1, r1
 801a094:	f7fe bb84 	b.w	80187a0 <lv_theme_default_init+0x1d8>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 801a098:	4ba8      	ldr	r3, [pc, #672]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a09a:	68de      	ldr	r6, [r3, #12]
 801a09c:	4630      	mov	r0, r6
 801a09e:	f006 f9b3 	bl	8020408 <lv_disp_get_dpi>
 801a0a2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a0a6:	0040      	lsls	r0, r0, #1
 801a0a8:	28ef      	cmp	r0, #239	; 0xef
 801a0aa:	dc02      	bgt.n	801a0b2 <lv_theme_default_init+0x1aea>
 801a0ac:	2101      	movs	r1, #1
 801a0ae:	f7fe bb90 	b.w	80187d2 <lv_theme_default_init+0x20a>
 801a0b2:	4630      	mov	r0, r6
 801a0b4:	f006 f9a8 	bl	8020408 <lv_disp_get_dpi>
 801a0b8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a0bc:	0043      	lsls	r3, r0, #1
 801a0be:	3350      	adds	r3, #80	; 0x50
 801a0c0:	4a9d      	ldr	r2, [pc, #628]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a0c2:	fb82 1203 	smull	r1, r2, r2, r3
 801a0c6:	17d9      	asrs	r1, r3, #31
 801a0c8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a0cc:	b209      	sxth	r1, r1
 801a0ce:	f7fe bb80 	b.w	80187d2 <lv_theme_default_init+0x20a>
 801a0d2:	4b9a      	ldr	r3, [pc, #616]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a0d4:	68de      	ldr	r6, [r3, #12]
 801a0d6:	4630      	mov	r0, r6
 801a0d8:	f006 f996 	bl	8020408 <lv_disp_get_dpi>
 801a0dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a0e0:	0080      	lsls	r0, r0, #2
 801a0e2:	28ef      	cmp	r0, #239	; 0xef
 801a0e4:	dc02      	bgt.n	801a0ec <lv_theme_default_init+0x1b24>
 801a0e6:	2101      	movs	r1, #1
 801a0e8:	f7fe bb73 	b.w	80187d2 <lv_theme_default_init+0x20a>
 801a0ec:	4630      	mov	r0, r6
 801a0ee:	f006 f98b 	bl	8020408 <lv_disp_get_dpi>
 801a0f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a0f6:	0083      	lsls	r3, r0, #2
 801a0f8:	3350      	adds	r3, #80	; 0x50
 801a0fa:	4a8f      	ldr	r2, [pc, #572]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a0fc:	fb82 1203 	smull	r1, r2, r2, r3
 801a100:	17d9      	asrs	r1, r3, #31
 801a102:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a106:	b209      	sxth	r1, r1
 801a108:	f7fe bb63 	b.w	80187d2 <lv_theme_default_init+0x20a>
 801a10c:	4630      	mov	r0, r6
 801a10e:	f006 f97b 	bl	8020408 <lv_disp_get_dpi>
 801a112:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a116:	0043      	lsls	r3, r0, #1
 801a118:	3350      	adds	r3, #80	; 0x50
 801a11a:	4a87      	ldr	r2, [pc, #540]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a11c:	fb82 1203 	smull	r1, r2, r2, r3
 801a120:	17d9      	asrs	r1, r3, #31
 801a122:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a126:	b209      	sxth	r1, r1
 801a128:	f7fe bb53 	b.w	80187d2 <lv_theme_default_init+0x20a>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 801a12c:	4b83      	ldr	r3, [pc, #524]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a12e:	68de      	ldr	r6, [r3, #12]
 801a130:	4630      	mov	r0, r6
 801a132:	f006 f969 	bl	8020408 <lv_disp_get_dpi>
 801a136:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a13a:	0080      	lsls	r0, r0, #2
 801a13c:	28ef      	cmp	r0, #239	; 0xef
 801a13e:	dc02      	bgt.n	801a146 <lv_theme_default_init+0x1b7e>
 801a140:	2101      	movs	r1, #1
 801a142:	f7fe bb5f 	b.w	8018804 <lv_theme_default_init+0x23c>
 801a146:	4630      	mov	r0, r6
 801a148:	f006 f95e 	bl	8020408 <lv_disp_get_dpi>
 801a14c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a150:	0083      	lsls	r3, r0, #2
 801a152:	3350      	adds	r3, #80	; 0x50
 801a154:	4a78      	ldr	r2, [pc, #480]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a156:	fb82 1203 	smull	r1, r2, r2, r3
 801a15a:	17d9      	asrs	r1, r3, #31
 801a15c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a160:	b209      	sxth	r1, r1
 801a162:	f7fe bb4f 	b.w	8018804 <lv_theme_default_init+0x23c>
 801a166:	4630      	mov	r0, r6
 801a168:	f006 f94e 	bl	8020408 <lv_disp_get_dpi>
 801a16c:	00c3      	lsls	r3, r0, #3
 801a16e:	3350      	adds	r3, #80	; 0x50
 801a170:	4a71      	ldr	r2, [pc, #452]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a172:	fb82 1203 	smull	r1, r2, r2, r3
 801a176:	17d9      	asrs	r1, r3, #31
 801a178:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a17c:	b209      	sxth	r1, r1
 801a17e:	f7fe bb41 	b.w	8018804 <lv_theme_default_init+0x23c>
 801a182:	4630      	mov	r0, r6
 801a184:	f006 f940 	bl	8020408 <lv_disp_get_dpi>
 801a188:	0043      	lsls	r3, r0, #1
 801a18a:	3350      	adds	r3, #80	; 0x50
 801a18c:	4a6a      	ldr	r2, [pc, #424]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a18e:	fb82 1203 	smull	r1, r2, r2, r3
 801a192:	17d9      	asrs	r1, r3, #31
 801a194:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a198:	b209      	sxth	r1, r1
 801a19a:	f7fe bb54 	b.w	8018846 <lv_theme_default_init+0x27e>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 801a19e:	4b67      	ldr	r3, [pc, #412]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a1a0:	68dc      	ldr	r4, [r3, #12]
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	f006 f930 	bl	8020408 <lv_disp_get_dpi>
 801a1a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a1ac:	00c0      	lsls	r0, r0, #3
 801a1ae:	28ef      	cmp	r0, #239	; 0xef
 801a1b0:	dc02      	bgt.n	801a1b8 <lv_theme_default_init+0x1bf0>
 801a1b2:	2401      	movs	r4, #1
 801a1b4:	f7fe bb6a 	b.w	801888c <lv_theme_default_init+0x2c4>
 801a1b8:	4620      	mov	r0, r4
 801a1ba:	f006 f925 	bl	8020408 <lv_disp_get_dpi>
 801a1be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a1c2:	00c3      	lsls	r3, r0, #3
 801a1c4:	3350      	adds	r3, #80	; 0x50
 801a1c6:	4a5c      	ldr	r2, [pc, #368]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a1c8:	fb82 1203 	smull	r1, r2, r2, r3
 801a1cc:	17dc      	asrs	r4, r3, #31
 801a1ce:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a1d2:	b224      	sxth	r4, r4
 801a1d4:	f7fe bb5a 	b.w	801888c <lv_theme_default_init+0x2c4>
 801a1d8:	4b58      	ldr	r3, [pc, #352]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a1da:	68dc      	ldr	r4, [r3, #12]
 801a1dc:	4620      	mov	r0, r4
 801a1de:	f006 f913 	bl	8020408 <lv_disp_get_dpi>
 801a1e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a1e6:	0080      	lsls	r0, r0, #2
 801a1e8:	28ef      	cmp	r0, #239	; 0xef
 801a1ea:	dc02      	bgt.n	801a1f2 <lv_theme_default_init+0x1c2a>
 801a1ec:	2401      	movs	r4, #1
 801a1ee:	f7fe bb4d 	b.w	801888c <lv_theme_default_init+0x2c4>
 801a1f2:	4620      	mov	r0, r4
 801a1f4:	f006 f908 	bl	8020408 <lv_disp_get_dpi>
 801a1f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a1fc:	0083      	lsls	r3, r0, #2
 801a1fe:	3350      	adds	r3, #80	; 0x50
 801a200:	4a4d      	ldr	r2, [pc, #308]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a202:	fb82 1203 	smull	r1, r2, r2, r3
 801a206:	17dc      	asrs	r4, r3, #31
 801a208:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a20c:	b224      	sxth	r4, r4
 801a20e:	f7fe bb3d 	b.w	801888c <lv_theme_default_init+0x2c4>
 801a212:	4620      	mov	r0, r4
 801a214:	f006 f8f8 	bl	8020408 <lv_disp_get_dpi>
 801a218:	0103      	lsls	r3, r0, #4
 801a21a:	3350      	adds	r3, #80	; 0x50
 801a21c:	4a46      	ldr	r2, [pc, #280]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a21e:	fb82 1203 	smull	r1, r2, r2, r3
 801a222:	17dc      	asrs	r4, r3, #31
 801a224:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a228:	b224      	sxth	r4, r4
 801a22a:	f7fe bb2f 	b.w	801888c <lv_theme_default_init+0x2c4>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 801a22e:	4b43      	ldr	r3, [pc, #268]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a230:	68de      	ldr	r6, [r3, #12]
 801a232:	4630      	mov	r0, r6
 801a234:	f006 f8e8 	bl	8020408 <lv_disp_get_dpi>
 801a238:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a23c:	0040      	lsls	r0, r0, #1
 801a23e:	28ef      	cmp	r0, #239	; 0xef
 801a240:	dc02      	bgt.n	801a248 <lv_theme_default_init+0x1c80>
 801a242:	2101      	movs	r1, #1
 801a244:	f7fe bb65 	b.w	8018912 <lv_theme_default_init+0x34a>
 801a248:	4630      	mov	r0, r6
 801a24a:	f006 f8dd 	bl	8020408 <lv_disp_get_dpi>
 801a24e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a252:	0043      	lsls	r3, r0, #1
 801a254:	3350      	adds	r3, #80	; 0x50
 801a256:	4a38      	ldr	r2, [pc, #224]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a258:	fb82 1203 	smull	r1, r2, r2, r3
 801a25c:	17d9      	asrs	r1, r3, #31
 801a25e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a262:	b209      	sxth	r1, r1
 801a264:	f7fe bb55 	b.w	8018912 <lv_theme_default_init+0x34a>
 801a268:	4b34      	ldr	r3, [pc, #208]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a26a:	68de      	ldr	r6, [r3, #12]
 801a26c:	4630      	mov	r0, r6
 801a26e:	f006 f8cb 	bl	8020408 <lv_disp_get_dpi>
 801a272:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a276:	0080      	lsls	r0, r0, #2
 801a278:	28ef      	cmp	r0, #239	; 0xef
 801a27a:	dc02      	bgt.n	801a282 <lv_theme_default_init+0x1cba>
 801a27c:	2101      	movs	r1, #1
 801a27e:	f7fe bb48 	b.w	8018912 <lv_theme_default_init+0x34a>
 801a282:	4630      	mov	r0, r6
 801a284:	f006 f8c0 	bl	8020408 <lv_disp_get_dpi>
 801a288:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a28c:	0083      	lsls	r3, r0, #2
 801a28e:	3350      	adds	r3, #80	; 0x50
 801a290:	4a29      	ldr	r2, [pc, #164]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a292:	fb82 1203 	smull	r1, r2, r2, r3
 801a296:	17d9      	asrs	r1, r3, #31
 801a298:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a29c:	b209      	sxth	r1, r1
 801a29e:	f7fe bb38 	b.w	8018912 <lv_theme_default_init+0x34a>
 801a2a2:	4630      	mov	r0, r6
 801a2a4:	f006 f8b0 	bl	8020408 <lv_disp_get_dpi>
 801a2a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a2ac:	0043      	lsls	r3, r0, #1
 801a2ae:	3350      	adds	r3, #80	; 0x50
 801a2b0:	4a21      	ldr	r2, [pc, #132]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a2b2:	fb82 1203 	smull	r1, r2, r2, r3
 801a2b6:	17d9      	asrs	r1, r3, #31
 801a2b8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a2bc:	b209      	sxth	r1, r1
 801a2be:	f7fe bb28 	b.w	8018912 <lv_theme_default_init+0x34a>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 801a2c2:	4b1e      	ldr	r3, [pc, #120]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a2c4:	68de      	ldr	r6, [r3, #12]
 801a2c6:	4630      	mov	r0, r6
 801a2c8:	f006 f89e 	bl	8020408 <lv_disp_get_dpi>
 801a2cc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a2d0:	0040      	lsls	r0, r0, #1
 801a2d2:	28ef      	cmp	r0, #239	; 0xef
 801a2d4:	dc02      	bgt.n	801a2dc <lv_theme_default_init+0x1d14>
 801a2d6:	2101      	movs	r1, #1
 801a2d8:	f7fe bb35 	b.w	8018946 <lv_theme_default_init+0x37e>
 801a2dc:	4630      	mov	r0, r6
 801a2de:	f006 f893 	bl	8020408 <lv_disp_get_dpi>
 801a2e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a2e6:	0043      	lsls	r3, r0, #1
 801a2e8:	3350      	adds	r3, #80	; 0x50
 801a2ea:	4a13      	ldr	r2, [pc, #76]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a2ec:	fb82 1203 	smull	r1, r2, r2, r3
 801a2f0:	17d9      	asrs	r1, r3, #31
 801a2f2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a2f6:	b209      	sxth	r1, r1
 801a2f8:	f7fe bb25 	b.w	8018946 <lv_theme_default_init+0x37e>
 801a2fc:	4b0f      	ldr	r3, [pc, #60]	; (801a33c <lv_theme_default_init+0x1d74>)
 801a2fe:	68de      	ldr	r6, [r3, #12]
 801a300:	4630      	mov	r0, r6
 801a302:	f006 f881 	bl	8020408 <lv_disp_get_dpi>
 801a306:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a30a:	0080      	lsls	r0, r0, #2
 801a30c:	28ef      	cmp	r0, #239	; 0xef
 801a30e:	dc02      	bgt.n	801a316 <lv_theme_default_init+0x1d4e>
 801a310:	2101      	movs	r1, #1
 801a312:	f7fe bb18 	b.w	8018946 <lv_theme_default_init+0x37e>
 801a316:	4630      	mov	r0, r6
 801a318:	f006 f876 	bl	8020408 <lv_disp_get_dpi>
 801a31c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a320:	0083      	lsls	r3, r0, #2
 801a322:	3350      	adds	r3, #80	; 0x50
 801a324:	4a04      	ldr	r2, [pc, #16]	; (801a338 <lv_theme_default_init+0x1d70>)
 801a326:	fb82 1203 	smull	r1, r2, r2, r3
 801a32a:	17d9      	asrs	r1, r3, #31
 801a32c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a330:	b209      	sxth	r1, r1
 801a332:	f7fe bb08 	b.w	8018946 <lv_theme_default_init+0x37e>
 801a336:	bf00      	nop
 801a338:	66666667 	.word	0x66666667
 801a33c:	200026c8 	.word	0x200026c8
 801a340:	4630      	mov	r0, r6
 801a342:	f006 f861 	bl	8020408 <lv_disp_get_dpi>
 801a346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a34a:	0043      	lsls	r3, r0, #1
 801a34c:	3350      	adds	r3, #80	; 0x50
 801a34e:	4ace      	ldr	r2, [pc, #824]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a350:	fb82 1203 	smull	r1, r2, r2, r3
 801a354:	17d9      	asrs	r1, r3, #31
 801a356:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a35a:	b209      	sxth	r1, r1
 801a35c:	f7fe baf3 	b.w	8018946 <lv_theme_default_init+0x37e>
 801a360:	4630      	mov	r0, r6
 801a362:	f006 f851 	bl	8020408 <lv_disp_get_dpi>
 801a366:	3050      	adds	r0, #80	; 0x50
 801a368:	4bc7      	ldr	r3, [pc, #796]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a36a:	fb83 2300 	smull	r2, r3, r3, r0
 801a36e:	17c1      	asrs	r1, r0, #31
 801a370:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801a374:	b209      	sxth	r1, r1
 801a376:	f7fe bafe 	b.w	8018976 <lv_theme_default_init+0x3ae>
 801a37a:	4630      	mov	r0, r6
 801a37c:	f006 f844 	bl	8020408 <lv_disp_get_dpi>
 801a380:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a384:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a388:	4abf      	ldr	r2, [pc, #764]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a38a:	fb82 1203 	smull	r1, r2, r2, r3
 801a38e:	17d9      	asrs	r1, r3, #31
 801a390:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a394:	b209      	sxth	r1, r1
 801a396:	f7fe bb08 	b.w	80189aa <lv_theme_default_init+0x3e2>
 801a39a:	4630      	mov	r0, r6
 801a39c:	f006 f834 	bl	8020408 <lv_disp_get_dpi>
 801a3a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a3a4:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a3a8:	4ab7      	ldr	r2, [pc, #732]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a3aa:	fb82 1203 	smull	r1, r2, r2, r3
 801a3ae:	17d9      	asrs	r1, r3, #31
 801a3b0:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a3b4:	b209      	sxth	r1, r1
 801a3b6:	f7fe bb09 	b.w	80189cc <lv_theme_default_init+0x404>
 801a3ba:	4630      	mov	r0, r6
 801a3bc:	f006 f824 	bl	8020408 <lv_disp_get_dpi>
 801a3c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a3c4:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a3c8:	4aaf      	ldr	r2, [pc, #700]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a3ca:	fb82 1203 	smull	r1, r2, r2, r3
 801a3ce:	17d9      	asrs	r1, r3, #31
 801a3d0:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a3d4:	b209      	sxth	r1, r1
 801a3d6:	f7fe bb18 	b.w	8018a0a <lv_theme_default_init+0x442>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 801a3da:	4bac      	ldr	r3, [pc, #688]	; (801a68c <lv_theme_default_init+0x20c4>)
 801a3dc:	68de      	ldr	r6, [r3, #12]
 801a3de:	4630      	mov	r0, r6
 801a3e0:	f006 f812 	bl	8020408 <lv_disp_get_dpi>
 801a3e4:	0100      	lsls	r0, r0, #4
 801a3e6:	28ef      	cmp	r0, #239	; 0xef
 801a3e8:	dc02      	bgt.n	801a3f0 <lv_theme_default_init+0x1e28>
 801a3ea:	2101      	movs	r1, #1
 801a3ec:	f7fe bb2e 	b.w	8018a4c <lv_theme_default_init+0x484>
 801a3f0:	4630      	mov	r0, r6
 801a3f2:	f006 f809 	bl	8020408 <lv_disp_get_dpi>
 801a3f6:	0100      	lsls	r0, r0, #4
 801a3f8:	3050      	adds	r0, #80	; 0x50
 801a3fa:	4ba3      	ldr	r3, [pc, #652]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a3fc:	fb83 2300 	smull	r2, r3, r3, r0
 801a400:	17c1      	asrs	r1, r0, #31
 801a402:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801a406:	b209      	sxth	r1, r1
 801a408:	f7fe bb20 	b.w	8018a4c <lv_theme_default_init+0x484>
                                                                             16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 801a40c:	4b9f      	ldr	r3, [pc, #636]	; (801a68c <lv_theme_default_init+0x20c4>)
 801a40e:	68de      	ldr	r6, [r3, #12]
 801a410:	4630      	mov	r0, r6
 801a412:	f005 fff9 	bl	8020408 <lv_disp_get_dpi>
 801a416:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a41a:	0080      	lsls	r0, r0, #2
 801a41c:	28ef      	cmp	r0, #239	; 0xef
 801a41e:	dc02      	bgt.n	801a426 <lv_theme_default_init+0x1e5e>
 801a420:	2101      	movs	r1, #1
 801a422:	f7fe bb13 	b.w	8018a4c <lv_theme_default_init+0x484>
 801a426:	4630      	mov	r0, r6
 801a428:	f005 ffee 	bl	8020408 <lv_disp_get_dpi>
 801a42c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a430:	0083      	lsls	r3, r0, #2
 801a432:	3350      	adds	r3, #80	; 0x50
 801a434:	4a94      	ldr	r2, [pc, #592]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a436:	fb82 1203 	smull	r1, r2, r2, r3
 801a43a:	17d9      	asrs	r1, r3, #31
 801a43c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a440:	b209      	sxth	r1, r1
 801a442:	f7fe bb03 	b.w	8018a4c <lv_theme_default_init+0x484>
 801a446:	4630      	mov	r0, r6
 801a448:	f005 ffde 	bl	8020408 <lv_disp_get_dpi>
 801a44c:	00c3      	lsls	r3, r0, #3
 801a44e:	3350      	adds	r3, #80	; 0x50
 801a450:	4a8d      	ldr	r2, [pc, #564]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a452:	fb82 1203 	smull	r1, r2, r2, r3
 801a456:	17d9      	asrs	r1, r3, #31
 801a458:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a45c:	b209      	sxth	r1, r1
 801a45e:	f7fe baf5 	b.w	8018a4c <lv_theme_default_init+0x484>
        lv_style_set_shadow_color(&styles->btn, lv_palette_main(LV_PALETTE_GREY));
 801a462:	4626      	mov	r6, r4
 801a464:	6824      	ldr	r4, [r4, #0]
 801a466:	3420      	adds	r4, #32
 801a468:	2012      	movs	r0, #18
 801a46a:	f006 fe41 	bl	80210f0 <lv_palette_main>
 801a46e:	4601      	mov	r1, r0
 801a470:	4620      	mov	r0, r4
 801a472:	f008 fd15 	bl	8022ea0 <lv_style_set_shadow_color>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 801a476:	6834      	ldr	r4, [r6, #0]
 801a478:	3420      	adds	r4, #32
 801a47a:	2000      	movs	r0, #0
 801a47c:	f005 ffc4 	bl	8020408 <lv_disp_get_dpi>
 801a480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a484:	28ef      	cmp	r0, #239	; 0xef
 801a486:	dc1c      	bgt.n	801a4c2 <lv_theme_default_init+0x1efa>
 801a488:	2101      	movs	r1, #1
 801a48a:	4620      	mov	r0, r4
 801a48c:	f008 fcf6 	bl	8022e7c <lv_style_set_shadow_width>
        lv_style_set_shadow_opa(&styles->btn, LV_OPA_50);
 801a490:	4c7f      	ldr	r4, [pc, #508]	; (801a690 <lv_theme_default_init+0x20c8>)
 801a492:	6820      	ldr	r0, [r4, #0]
 801a494:	217f      	movs	r1, #127	; 0x7f
 801a496:	3020      	adds	r0, #32
 801a498:	f008 fd0e 	bl	8022eb8 <lv_style_set_shadow_opa>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 801a49c:	6826      	ldr	r6, [r4, #0]
 801a49e:	3620      	adds	r6, #32
 801a4a0:	4b7a      	ldr	r3, [pc, #488]	; (801a68c <lv_theme_default_init+0x20c4>)
 801a4a2:	68df      	ldr	r7, [r3, #12]
 801a4a4:	2000      	movs	r0, #0
 801a4a6:	f005 ffaf 	bl	8020408 <lv_disp_get_dpi>
 801a4aa:	283b      	cmp	r0, #59	; 0x3b
 801a4ac:	dc18      	bgt.n	801a4e0 <lv_theme_default_init+0x1f18>
 801a4ae:	2401      	movs	r4, #1
 801a4b0:	4638      	mov	r0, r7
 801a4b2:	f005 ffa9 	bl	8020408 <lv_disp_get_dpi>
 801a4b6:	fb04 f000 	mul.w	r0, r4, r0
 801a4ba:	28ef      	cmp	r0, #239	; 0xef
 801a4bc:	dc23      	bgt.n	801a506 <lv_theme_default_init+0x1f3e>
 801a4be:	2401      	movs	r4, #1
 801a4c0:	e01b      	b.n	801a4fa <lv_theme_default_init+0x1f32>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 801a4c2:	2000      	movs	r0, #0
 801a4c4:	f005 ffa0 	bl	8020408 <lv_disp_get_dpi>
 801a4c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a4cc:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a4d0:	4a6d      	ldr	r2, [pc, #436]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a4d2:	fb82 1203 	smull	r1, r2, r2, r3
 801a4d6:	17d9      	asrs	r1, r3, #31
 801a4d8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a4dc:	b209      	sxth	r1, r1
 801a4de:	e7d4      	b.n	801a48a <lv_theme_default_init+0x1ec2>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 801a4e0:	2000      	movs	r0, #0
 801a4e2:	f005 ff91 	bl	8020408 <lv_disp_get_dpi>
 801a4e6:	3014      	adds	r0, #20
 801a4e8:	4b67      	ldr	r3, [pc, #412]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a4ea:	fb83 2300 	smull	r2, r3, r3, r0
 801a4ee:	17c4      	asrs	r4, r0, #31
 801a4f0:	ebc4 1423 	rsb	r4, r4, r3, asr #4
 801a4f4:	b224      	sxth	r4, r4
 801a4f6:	2c00      	cmp	r4, #0
 801a4f8:	d1da      	bne.n	801a4b0 <lv_theme_default_init+0x1ee8>
 801a4fa:	4621      	mov	r1, r4
 801a4fc:	4630      	mov	r0, r6
 801a4fe:	f008 fcc3 	bl	8022e88 <lv_style_set_shadow_ofs_y>
 801a502:	f7fe bab8 	b.w	8018a76 <lv_theme_default_init+0x4ae>
 801a506:	4638      	mov	r0, r7
 801a508:	f005 ff7e 	bl	8020408 <lv_disp_get_dpi>
 801a50c:	fb00 f404 	mul.w	r4, r0, r4
 801a510:	3450      	adds	r4, #80	; 0x50
 801a512:	4b5d      	ldr	r3, [pc, #372]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a514:	fb83 2304 	smull	r2, r3, r3, r4
 801a518:	17e4      	asrs	r4, r4, #31
 801a51a:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801a51e:	b224      	sxth	r4, r4
 801a520:	e7eb      	b.n	801a4fa <lv_theme_default_init+0x1f32>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 801a522:	4b5a      	ldr	r3, [pc, #360]	; (801a68c <lv_theme_default_init+0x20c4>)
 801a524:	68dc      	ldr	r4, [r3, #12]
 801a526:	4620      	mov	r0, r4
 801a528:	f005 ff6e 	bl	8020408 <lv_disp_get_dpi>
 801a52c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a530:	00c0      	lsls	r0, r0, #3
 801a532:	28ef      	cmp	r0, #239	; 0xef
 801a534:	dc02      	bgt.n	801a53c <lv_theme_default_init+0x1f74>
 801a536:	2401      	movs	r4, #1
 801a538:	f7fe bab8 	b.w	8018aac <lv_theme_default_init+0x4e4>
 801a53c:	4620      	mov	r0, r4
 801a53e:	f005 ff63 	bl	8020408 <lv_disp_get_dpi>
 801a542:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a546:	00c3      	lsls	r3, r0, #3
 801a548:	3350      	adds	r3, #80	; 0x50
 801a54a:	4a4f      	ldr	r2, [pc, #316]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a54c:	fb82 1203 	smull	r1, r2, r2, r3
 801a550:	17dc      	asrs	r4, r3, #31
 801a552:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a556:	b224      	sxth	r4, r4
 801a558:	f7fe baa8 	b.w	8018aac <lv_theme_default_init+0x4e4>
 801a55c:	4b4b      	ldr	r3, [pc, #300]	; (801a68c <lv_theme_default_init+0x20c4>)
 801a55e:	68dc      	ldr	r4, [r3, #12]
 801a560:	4620      	mov	r0, r4
 801a562:	f005 ff51 	bl	8020408 <lv_disp_get_dpi>
 801a566:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a56a:	0080      	lsls	r0, r0, #2
 801a56c:	28ef      	cmp	r0, #239	; 0xef
 801a56e:	dc02      	bgt.n	801a576 <lv_theme_default_init+0x1fae>
 801a570:	2401      	movs	r4, #1
 801a572:	f7fe ba9b 	b.w	8018aac <lv_theme_default_init+0x4e4>
 801a576:	4620      	mov	r0, r4
 801a578:	f005 ff46 	bl	8020408 <lv_disp_get_dpi>
 801a57c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a580:	0083      	lsls	r3, r0, #2
 801a582:	3350      	adds	r3, #80	; 0x50
 801a584:	4a40      	ldr	r2, [pc, #256]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a586:	fb82 1203 	smull	r1, r2, r2, r3
 801a58a:	17dc      	asrs	r4, r3, #31
 801a58c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a590:	b224      	sxth	r4, r4
 801a592:	f7fe ba8b 	b.w	8018aac <lv_theme_default_init+0x4e4>
 801a596:	4620      	mov	r0, r4
 801a598:	f005 ff36 	bl	8020408 <lv_disp_get_dpi>
 801a59c:	0103      	lsls	r3, r0, #4
 801a59e:	3350      	adds	r3, #80	; 0x50
 801a5a0:	4a39      	ldr	r2, [pc, #228]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a5a2:	fb82 1203 	smull	r1, r2, r2, r3
 801a5a6:	17dc      	asrs	r4, r3, #31
 801a5a8:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a5ac:	b224      	sxth	r4, r4
 801a5ae:	f7fe ba7d 	b.w	8018aac <lv_theme_default_init+0x4e4>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 801a5b2:	4b36      	ldr	r3, [pc, #216]	; (801a68c <lv_theme_default_init+0x20c4>)
 801a5b4:	68dc      	ldr	r4, [r3, #12]
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	f005 ff26 	bl	8020408 <lv_disp_get_dpi>
 801a5bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a5c0:	0040      	lsls	r0, r0, #1
 801a5c2:	28ef      	cmp	r0, #239	; 0xef
 801a5c4:	dc02      	bgt.n	801a5cc <lv_theme_default_init+0x2004>
 801a5c6:	2401      	movs	r4, #1
 801a5c8:	f7fe ba8f 	b.w	8018aea <lv_theme_default_init+0x522>
 801a5cc:	4620      	mov	r0, r4
 801a5ce:	f005 ff1b 	bl	8020408 <lv_disp_get_dpi>
 801a5d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a5d6:	0043      	lsls	r3, r0, #1
 801a5d8:	3350      	adds	r3, #80	; 0x50
 801a5da:	4a2b      	ldr	r2, [pc, #172]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a5dc:	fb82 1203 	smull	r1, r2, r2, r3
 801a5e0:	17dc      	asrs	r4, r3, #31
 801a5e2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a5e6:	b224      	sxth	r4, r4
 801a5e8:	f7fe ba7f 	b.w	8018aea <lv_theme_default_init+0x522>
 801a5ec:	4b27      	ldr	r3, [pc, #156]	; (801a68c <lv_theme_default_init+0x20c4>)
 801a5ee:	68dc      	ldr	r4, [r3, #12]
 801a5f0:	4620      	mov	r0, r4
 801a5f2:	f005 ff09 	bl	8020408 <lv_disp_get_dpi>
 801a5f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a5fa:	0080      	lsls	r0, r0, #2
 801a5fc:	28ef      	cmp	r0, #239	; 0xef
 801a5fe:	dc02      	bgt.n	801a606 <lv_theme_default_init+0x203e>
 801a600:	2401      	movs	r4, #1
 801a602:	f7fe ba72 	b.w	8018aea <lv_theme_default_init+0x522>
 801a606:	4620      	mov	r0, r4
 801a608:	f005 fefe 	bl	8020408 <lv_disp_get_dpi>
 801a60c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a610:	0083      	lsls	r3, r0, #2
 801a612:	3350      	adds	r3, #80	; 0x50
 801a614:	4a1c      	ldr	r2, [pc, #112]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a616:	fb82 1203 	smull	r1, r2, r2, r3
 801a61a:	17dc      	asrs	r4, r3, #31
 801a61c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a620:	b224      	sxth	r4, r4
 801a622:	f7fe ba62 	b.w	8018aea <lv_theme_default_init+0x522>
 801a626:	4620      	mov	r0, r4
 801a628:	f005 feee 	bl	8020408 <lv_disp_get_dpi>
 801a62c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a630:	0043      	lsls	r3, r0, #1
 801a632:	3350      	adds	r3, #80	; 0x50
 801a634:	4a14      	ldr	r2, [pc, #80]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a636:	fb82 1203 	smull	r1, r2, r2, r3
 801a63a:	17dc      	asrs	r4, r3, #31
 801a63c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a640:	b224      	sxth	r4, r4
 801a642:	f7fe ba52 	b.w	8018aea <lv_theme_default_init+0x522>
 801a646:	4630      	mov	r0, r6
 801a648:	f005 fede 	bl	8020408 <lv_disp_get_dpi>
 801a64c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a650:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a654:	4a0c      	ldr	r2, [pc, #48]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a656:	fb82 1203 	smull	r1, r2, r2, r3
 801a65a:	17d9      	asrs	r1, r3, #31
 801a65c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a660:	b209      	sxth	r1, r1
 801a662:	f7fe ba58 	b.w	8018b16 <lv_theme_default_init+0x54e>
 801a666:	4630      	mov	r0, r6
 801a668:	f005 fece 	bl	8020408 <lv_disp_get_dpi>
 801a66c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a670:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a674:	4a04      	ldr	r2, [pc, #16]	; (801a688 <lv_theme_default_init+0x20c0>)
 801a676:	fb82 1203 	smull	r1, r2, r2, r3
 801a67a:	17d9      	asrs	r1, r3, #31
 801a67c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a680:	b209      	sxth	r1, r1
 801a682:	f7fe ba59 	b.w	8018b38 <lv_theme_default_init+0x570>
 801a686:	bf00      	nop
 801a688:	66666667 	.word	0x66666667
 801a68c:	200026c8 	.word	0x200026c8
 801a690:	200026c4 	.word	0x200026c4
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 801a694:	4bd3      	ldr	r3, [pc, #844]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a696:	68dc      	ldr	r4, [r3, #12]
 801a698:	4620      	mov	r0, r4
 801a69a:	f005 feb5 	bl	8020408 <lv_disp_get_dpi>
 801a69e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a6a2:	00c0      	lsls	r0, r0, #3
 801a6a4:	28ef      	cmp	r0, #239	; 0xef
 801a6a6:	dc02      	bgt.n	801a6ae <lv_theme_default_init+0x20e6>
 801a6a8:	2401      	movs	r4, #1
 801a6aa:	f7fe ba91 	b.w	8018bd0 <lv_theme_default_init+0x608>
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	f005 feaa 	bl	8020408 <lv_disp_get_dpi>
 801a6b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a6b8:	00c3      	lsls	r3, r0, #3
 801a6ba:	3350      	adds	r3, #80	; 0x50
 801a6bc:	4aca      	ldr	r2, [pc, #808]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a6be:	fb82 1203 	smull	r1, r2, r2, r3
 801a6c2:	17dc      	asrs	r4, r3, #31
 801a6c4:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a6c8:	b224      	sxth	r4, r4
 801a6ca:	f7fe ba81 	b.w	8018bd0 <lv_theme_default_init+0x608>
 801a6ce:	4bc5      	ldr	r3, [pc, #788]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a6d0:	68dc      	ldr	r4, [r3, #12]
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	f005 fe98 	bl	8020408 <lv_disp_get_dpi>
 801a6d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a6dc:	0080      	lsls	r0, r0, #2
 801a6de:	28ef      	cmp	r0, #239	; 0xef
 801a6e0:	dc02      	bgt.n	801a6e8 <lv_theme_default_init+0x2120>
 801a6e2:	2401      	movs	r4, #1
 801a6e4:	f7fe ba74 	b.w	8018bd0 <lv_theme_default_init+0x608>
 801a6e8:	4620      	mov	r0, r4
 801a6ea:	f005 fe8d 	bl	8020408 <lv_disp_get_dpi>
 801a6ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a6f2:	0083      	lsls	r3, r0, #2
 801a6f4:	3350      	adds	r3, #80	; 0x50
 801a6f6:	4abc      	ldr	r2, [pc, #752]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a6f8:	fb82 1203 	smull	r1, r2, r2, r3
 801a6fc:	17dc      	asrs	r4, r3, #31
 801a6fe:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a702:	b224      	sxth	r4, r4
 801a704:	f7fe ba64 	b.w	8018bd0 <lv_theme_default_init+0x608>
 801a708:	4620      	mov	r0, r4
 801a70a:	f005 fe7d 	bl	8020408 <lv_disp_get_dpi>
 801a70e:	0103      	lsls	r3, r0, #4
 801a710:	3350      	adds	r3, #80	; 0x50
 801a712:	4ab5      	ldr	r2, [pc, #724]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a714:	fb82 1203 	smull	r1, r2, r2, r3
 801a718:	17dc      	asrs	r4, r3, #31
 801a71a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a71e:	b224      	sxth	r4, r4
 801a720:	f7fe ba56 	b.w	8018bd0 <lv_theme_default_init+0x608>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 801a724:	4baf      	ldr	r3, [pc, #700]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a726:	68de      	ldr	r6, [r3, #12]
 801a728:	4630      	mov	r0, r6
 801a72a:	f005 fe6d 	bl	8020408 <lv_disp_get_dpi>
 801a72e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a732:	00c0      	lsls	r0, r0, #3
 801a734:	28ef      	cmp	r0, #239	; 0xef
 801a736:	dc02      	bgt.n	801a73e <lv_theme_default_init+0x2176>
 801a738:	2101      	movs	r1, #1
 801a73a:	f7fe ba81 	b.w	8018c40 <lv_theme_default_init+0x678>
 801a73e:	4630      	mov	r0, r6
 801a740:	f005 fe62 	bl	8020408 <lv_disp_get_dpi>
 801a744:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a748:	00c3      	lsls	r3, r0, #3
 801a74a:	3350      	adds	r3, #80	; 0x50
 801a74c:	4aa6      	ldr	r2, [pc, #664]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a74e:	fb82 1203 	smull	r1, r2, r2, r3
 801a752:	17d9      	asrs	r1, r3, #31
 801a754:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a758:	b209      	sxth	r1, r1
 801a75a:	f7fe ba71 	b.w	8018c40 <lv_theme_default_init+0x678>
 801a75e:	4ba1      	ldr	r3, [pc, #644]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a760:	68de      	ldr	r6, [r3, #12]
 801a762:	4630      	mov	r0, r6
 801a764:	f005 fe50 	bl	8020408 <lv_disp_get_dpi>
 801a768:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a76c:	0080      	lsls	r0, r0, #2
 801a76e:	28ef      	cmp	r0, #239	; 0xef
 801a770:	dc02      	bgt.n	801a778 <lv_theme_default_init+0x21b0>
 801a772:	2101      	movs	r1, #1
 801a774:	f7fe ba64 	b.w	8018c40 <lv_theme_default_init+0x678>
 801a778:	4630      	mov	r0, r6
 801a77a:	f005 fe45 	bl	8020408 <lv_disp_get_dpi>
 801a77e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a782:	0083      	lsls	r3, r0, #2
 801a784:	3350      	adds	r3, #80	; 0x50
 801a786:	4a98      	ldr	r2, [pc, #608]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a788:	fb82 1203 	smull	r1, r2, r2, r3
 801a78c:	17d9      	asrs	r1, r3, #31
 801a78e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a792:	b209      	sxth	r1, r1
 801a794:	f7fe ba54 	b.w	8018c40 <lv_theme_default_init+0x678>
 801a798:	4630      	mov	r0, r6
 801a79a:	f005 fe35 	bl	8020408 <lv_disp_get_dpi>
 801a79e:	0103      	lsls	r3, r0, #4
 801a7a0:	3350      	adds	r3, #80	; 0x50
 801a7a2:	4a91      	ldr	r2, [pc, #580]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a7a4:	fb82 1203 	smull	r1, r2, r2, r3
 801a7a8:	17d9      	asrs	r1, r3, #31
 801a7aa:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a7ae:	b209      	sxth	r1, r1
 801a7b0:	f7fe ba46 	b.w	8018c40 <lv_theme_default_init+0x678>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 801a7b4:	4b8b      	ldr	r3, [pc, #556]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a7b6:	68de      	ldr	r6, [r3, #12]
 801a7b8:	4630      	mov	r0, r6
 801a7ba:	f005 fe25 	bl	8020408 <lv_disp_get_dpi>
 801a7be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a7c2:	00c0      	lsls	r0, r0, #3
 801a7c4:	28ef      	cmp	r0, #239	; 0xef
 801a7c6:	dc02      	bgt.n	801a7ce <lv_theme_default_init+0x2206>
 801a7c8:	2101      	movs	r1, #1
 801a7ca:	f7fe ba51 	b.w	8018c70 <lv_theme_default_init+0x6a8>
 801a7ce:	4630      	mov	r0, r6
 801a7d0:	f005 fe1a 	bl	8020408 <lv_disp_get_dpi>
 801a7d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a7d8:	00c3      	lsls	r3, r0, #3
 801a7da:	3350      	adds	r3, #80	; 0x50
 801a7dc:	4a82      	ldr	r2, [pc, #520]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a7de:	fb82 1203 	smull	r1, r2, r2, r3
 801a7e2:	17d9      	asrs	r1, r3, #31
 801a7e4:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a7e8:	b209      	sxth	r1, r1
 801a7ea:	f7fe ba41 	b.w	8018c70 <lv_theme_default_init+0x6a8>
 801a7ee:	4b7d      	ldr	r3, [pc, #500]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a7f0:	68de      	ldr	r6, [r3, #12]
 801a7f2:	4630      	mov	r0, r6
 801a7f4:	f005 fe08 	bl	8020408 <lv_disp_get_dpi>
 801a7f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a7fc:	0080      	lsls	r0, r0, #2
 801a7fe:	28ef      	cmp	r0, #239	; 0xef
 801a800:	dc02      	bgt.n	801a808 <lv_theme_default_init+0x2240>
 801a802:	2101      	movs	r1, #1
 801a804:	f7fe ba34 	b.w	8018c70 <lv_theme_default_init+0x6a8>
 801a808:	4630      	mov	r0, r6
 801a80a:	f005 fdfd 	bl	8020408 <lv_disp_get_dpi>
 801a80e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a812:	0083      	lsls	r3, r0, #2
 801a814:	3350      	adds	r3, #80	; 0x50
 801a816:	4a74      	ldr	r2, [pc, #464]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a818:	fb82 1203 	smull	r1, r2, r2, r3
 801a81c:	17d9      	asrs	r1, r3, #31
 801a81e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a822:	b209      	sxth	r1, r1
 801a824:	f7fe ba24 	b.w	8018c70 <lv_theme_default_init+0x6a8>
 801a828:	4630      	mov	r0, r6
 801a82a:	f005 fded 	bl	8020408 <lv_disp_get_dpi>
 801a82e:	0103      	lsls	r3, r0, #4
 801a830:	3350      	adds	r3, #80	; 0x50
 801a832:	4a6d      	ldr	r2, [pc, #436]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a834:	fb82 1203 	smull	r1, r2, r2, r3
 801a838:	17d9      	asrs	r1, r3, #31
 801a83a:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a83e:	b209      	sxth	r1, r1
 801a840:	f7fe ba16 	b.w	8018c70 <lv_theme_default_init+0x6a8>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 801a844:	4b67      	ldr	r3, [pc, #412]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a846:	68dc      	ldr	r4, [r3, #12]
 801a848:	4620      	mov	r0, r4
 801a84a:	f005 fddd 	bl	8020408 <lv_disp_get_dpi>
 801a84e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a852:	0040      	lsls	r0, r0, #1
 801a854:	28ef      	cmp	r0, #239	; 0xef
 801a856:	dc02      	bgt.n	801a85e <lv_theme_default_init+0x2296>
 801a858:	2401      	movs	r4, #1
 801a85a:	f7fe ba27 	b.w	8018cac <lv_theme_default_init+0x6e4>
 801a85e:	4620      	mov	r0, r4
 801a860:	f005 fdd2 	bl	8020408 <lv_disp_get_dpi>
 801a864:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a868:	0043      	lsls	r3, r0, #1
 801a86a:	3350      	adds	r3, #80	; 0x50
 801a86c:	4a5e      	ldr	r2, [pc, #376]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a86e:	fb82 1203 	smull	r1, r2, r2, r3
 801a872:	17dc      	asrs	r4, r3, #31
 801a874:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a878:	b224      	sxth	r4, r4
 801a87a:	f7fe ba17 	b.w	8018cac <lv_theme_default_init+0x6e4>
 801a87e:	4b59      	ldr	r3, [pc, #356]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a880:	68dc      	ldr	r4, [r3, #12]
 801a882:	4620      	mov	r0, r4
 801a884:	f005 fdc0 	bl	8020408 <lv_disp_get_dpi>
 801a888:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a88c:	0080      	lsls	r0, r0, #2
 801a88e:	28ef      	cmp	r0, #239	; 0xef
 801a890:	dc02      	bgt.n	801a898 <lv_theme_default_init+0x22d0>
 801a892:	2401      	movs	r4, #1
 801a894:	f7fe ba0a 	b.w	8018cac <lv_theme_default_init+0x6e4>
 801a898:	4620      	mov	r0, r4
 801a89a:	f005 fdb5 	bl	8020408 <lv_disp_get_dpi>
 801a89e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a8a2:	0083      	lsls	r3, r0, #2
 801a8a4:	3350      	adds	r3, #80	; 0x50
 801a8a6:	4a50      	ldr	r2, [pc, #320]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a8a8:	fb82 1203 	smull	r1, r2, r2, r3
 801a8ac:	17dc      	asrs	r4, r3, #31
 801a8ae:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a8b2:	b224      	sxth	r4, r4
 801a8b4:	f7fe b9fa 	b.w	8018cac <lv_theme_default_init+0x6e4>
 801a8b8:	4620      	mov	r0, r4
 801a8ba:	f005 fda5 	bl	8020408 <lv_disp_get_dpi>
 801a8be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a8c2:	0043      	lsls	r3, r0, #1
 801a8c4:	3350      	adds	r3, #80	; 0x50
 801a8c6:	4a48      	ldr	r2, [pc, #288]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a8c8:	fb82 1203 	smull	r1, r2, r2, r3
 801a8cc:	17dc      	asrs	r4, r3, #31
 801a8ce:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a8d2:	b224      	sxth	r4, r4
 801a8d4:	f7fe b9ea 	b.w	8018cac <lv_theme_default_init+0x6e4>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 801a8d8:	4b42      	ldr	r3, [pc, #264]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a8da:	68dc      	ldr	r4, [r3, #12]
 801a8dc:	4620      	mov	r0, r4
 801a8de:	f005 fd93 	bl	8020408 <lv_disp_get_dpi>
 801a8e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a8e6:	0040      	lsls	r0, r0, #1
 801a8e8:	28ef      	cmp	r0, #239	; 0xef
 801a8ea:	dc02      	bgt.n	801a8f2 <lv_theme_default_init+0x232a>
 801a8ec:	2401      	movs	r4, #1
 801a8ee:	f7fe ba04 	b.w	8018cfa <lv_theme_default_init+0x732>
 801a8f2:	4620      	mov	r0, r4
 801a8f4:	f005 fd88 	bl	8020408 <lv_disp_get_dpi>
 801a8f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a8fc:	0043      	lsls	r3, r0, #1
 801a8fe:	3350      	adds	r3, #80	; 0x50
 801a900:	4a39      	ldr	r2, [pc, #228]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a902:	fb82 1203 	smull	r1, r2, r2, r3
 801a906:	17dc      	asrs	r4, r3, #31
 801a908:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a90c:	b224      	sxth	r4, r4
 801a90e:	f7fe b9f4 	b.w	8018cfa <lv_theme_default_init+0x732>
 801a912:	4b34      	ldr	r3, [pc, #208]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a914:	68dc      	ldr	r4, [r3, #12]
 801a916:	4620      	mov	r0, r4
 801a918:	f005 fd76 	bl	8020408 <lv_disp_get_dpi>
 801a91c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a920:	0080      	lsls	r0, r0, #2
 801a922:	28ef      	cmp	r0, #239	; 0xef
 801a924:	dc02      	bgt.n	801a92c <lv_theme_default_init+0x2364>
 801a926:	2401      	movs	r4, #1
 801a928:	f7fe b9e7 	b.w	8018cfa <lv_theme_default_init+0x732>
 801a92c:	4620      	mov	r0, r4
 801a92e:	f005 fd6b 	bl	8020408 <lv_disp_get_dpi>
 801a932:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a936:	0083      	lsls	r3, r0, #2
 801a938:	3350      	adds	r3, #80	; 0x50
 801a93a:	4a2b      	ldr	r2, [pc, #172]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a93c:	fb82 1203 	smull	r1, r2, r2, r3
 801a940:	17dc      	asrs	r4, r3, #31
 801a942:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a946:	b224      	sxth	r4, r4
 801a948:	f7fe b9d7 	b.w	8018cfa <lv_theme_default_init+0x732>
 801a94c:	4620      	mov	r0, r4
 801a94e:	f005 fd5b 	bl	8020408 <lv_disp_get_dpi>
 801a952:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a956:	0043      	lsls	r3, r0, #1
 801a958:	3350      	adds	r3, #80	; 0x50
 801a95a:	4a23      	ldr	r2, [pc, #140]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a95c:	fb82 1203 	smull	r1, r2, r2, r3
 801a960:	17dc      	asrs	r4, r3, #31
 801a962:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a966:	b224      	sxth	r4, r4
 801a968:	f7fe b9c7 	b.w	8018cfa <lv_theme_default_init+0x732>
 801a96c:	4630      	mov	r0, r6
 801a96e:	f005 fd4b 	bl	8020408 <lv_disp_get_dpi>
 801a972:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a976:	0043      	lsls	r3, r0, #1
 801a978:	3350      	adds	r3, #80	; 0x50
 801a97a:	4a1b      	ldr	r2, [pc, #108]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a97c:	fb82 1203 	smull	r1, r2, r2, r3
 801a980:	17d9      	asrs	r1, r3, #31
 801a982:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a986:	b209      	sxth	r1, r1
 801a988:	f7fe b9d2 	b.w	8018d30 <lv_theme_default_init+0x768>
 801a98c:	4630      	mov	r0, r6
 801a98e:	f005 fd3b 	bl	8020408 <lv_disp_get_dpi>
 801a992:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a996:	0043      	lsls	r3, r0, #1
 801a998:	3350      	adds	r3, #80	; 0x50
 801a99a:	4a13      	ldr	r2, [pc, #76]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a99c:	fb82 1203 	smull	r1, r2, r2, r3
 801a9a0:	17d9      	asrs	r1, r3, #31
 801a9a2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a9a6:	b209      	sxth	r1, r1
 801a9a8:	f7fe b9d4 	b.w	8018d54 <lv_theme_default_init+0x78c>
 801a9ac:	4630      	mov	r0, r6
 801a9ae:	f005 fd2b 	bl	8020408 <lv_disp_get_dpi>
 801a9b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a9b6:	0083      	lsls	r3, r0, #2
 801a9b8:	3350      	adds	r3, #80	; 0x50
 801a9ba:	4a0b      	ldr	r2, [pc, #44]	; (801a9e8 <lv_theme_default_init+0x2420>)
 801a9bc:	fb82 1203 	smull	r1, r2, r2, r3
 801a9c0:	17d9      	asrs	r1, r3, #31
 801a9c2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a9c6:	b209      	sxth	r1, r1
 801a9c8:	f7fe b9da 	b.w	8018d80 <lv_theme_default_init+0x7b8>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 801a9cc:	4b05      	ldr	r3, [pc, #20]	; (801a9e4 <lv_theme_default_init+0x241c>)
 801a9ce:	68dc      	ldr	r4, [r3, #12]
 801a9d0:	4620      	mov	r0, r4
 801a9d2:	f005 fd19 	bl	8020408 <lv_disp_get_dpi>
 801a9d6:	00c0      	lsls	r0, r0, #3
 801a9d8:	28ef      	cmp	r0, #239	; 0xef
 801a9da:	dc07      	bgt.n	801a9ec <lv_theme_default_init+0x2424>
 801a9dc:	2401      	movs	r4, #1
 801a9de:	f7fe ba14 	b.w	8018e0a <lv_theme_default_init+0x842>
 801a9e2:	bf00      	nop
 801a9e4:	200026c8 	.word	0x200026c8
 801a9e8:	66666667 	.word	0x66666667
 801a9ec:	4620      	mov	r0, r4
 801a9ee:	f005 fd0b 	bl	8020408 <lv_disp_get_dpi>
 801a9f2:	00c0      	lsls	r0, r0, #3
 801a9f4:	3050      	adds	r0, #80	; 0x50
 801a9f6:	4bd7      	ldr	r3, [pc, #860]	; (801ad54 <lv_theme_default_init+0x278c>)
 801a9f8:	fb83 2300 	smull	r2, r3, r3, r0
 801a9fc:	17c4      	asrs	r4, r0, #31
 801a9fe:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801aa02:	b224      	sxth	r4, r4
 801aa04:	f7fe ba01 	b.w	8018e0a <lv_theme_default_init+0x842>
 801aa08:	4bd3      	ldr	r3, [pc, #844]	; (801ad58 <lv_theme_default_init+0x2790>)
 801aa0a:	68dc      	ldr	r4, [r3, #12]
 801aa0c:	4620      	mov	r0, r4
 801aa0e:	f005 fcfb 	bl	8020408 <lv_disp_get_dpi>
 801aa12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa16:	0040      	lsls	r0, r0, #1
 801aa18:	28ef      	cmp	r0, #239	; 0xef
 801aa1a:	dc02      	bgt.n	801aa22 <lv_theme_default_init+0x245a>
 801aa1c:	2401      	movs	r4, #1
 801aa1e:	f7fe b9f4 	b.w	8018e0a <lv_theme_default_init+0x842>
 801aa22:	4620      	mov	r0, r4
 801aa24:	f005 fcf0 	bl	8020408 <lv_disp_get_dpi>
 801aa28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa2c:	0043      	lsls	r3, r0, #1
 801aa2e:	3350      	adds	r3, #80	; 0x50
 801aa30:	4ac8      	ldr	r2, [pc, #800]	; (801ad54 <lv_theme_default_init+0x278c>)
 801aa32:	fb82 1203 	smull	r1, r2, r2, r3
 801aa36:	17dc      	asrs	r4, r3, #31
 801aa38:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801aa3c:	b224      	sxth	r4, r4
 801aa3e:	f7fe b9e4 	b.w	8018e0a <lv_theme_default_init+0x842>
 801aa42:	4620      	mov	r0, r4
 801aa44:	f005 fce0 	bl	8020408 <lv_disp_get_dpi>
 801aa48:	0043      	lsls	r3, r0, #1
 801aa4a:	3350      	adds	r3, #80	; 0x50
 801aa4c:	4ac1      	ldr	r2, [pc, #772]	; (801ad54 <lv_theme_default_init+0x278c>)
 801aa4e:	fb82 1203 	smull	r1, r2, r2, r3
 801aa52:	17dc      	asrs	r4, r3, #31
 801aa54:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801aa58:	b224      	sxth	r4, r4
 801aa5a:	f7fe b9d6 	b.w	8018e0a <lv_theme_default_init+0x842>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 801aa5e:	4bbe      	ldr	r3, [pc, #760]	; (801ad58 <lv_theme_default_init+0x2790>)
 801aa60:	68de      	ldr	r6, [r3, #12]
 801aa62:	4630      	mov	r0, r6
 801aa64:	f005 fcd0 	bl	8020408 <lv_disp_get_dpi>
 801aa68:	00c0      	lsls	r0, r0, #3
 801aa6a:	28ef      	cmp	r0, #239	; 0xef
 801aa6c:	dc02      	bgt.n	801aa74 <lv_theme_default_init+0x24ac>
 801aa6e:	2101      	movs	r1, #1
 801aa70:	f7fe b9f0 	b.w	8018e54 <lv_theme_default_init+0x88c>
 801aa74:	4630      	mov	r0, r6
 801aa76:	f005 fcc7 	bl	8020408 <lv_disp_get_dpi>
 801aa7a:	00c0      	lsls	r0, r0, #3
 801aa7c:	3050      	adds	r0, #80	; 0x50
 801aa7e:	4bb5      	ldr	r3, [pc, #724]	; (801ad54 <lv_theme_default_init+0x278c>)
 801aa80:	fb83 2300 	smull	r2, r3, r3, r0
 801aa84:	17c1      	asrs	r1, r0, #31
 801aa86:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801aa8a:	b209      	sxth	r1, r1
 801aa8c:	f7fe b9e2 	b.w	8018e54 <lv_theme_default_init+0x88c>
 801aa90:	4bb1      	ldr	r3, [pc, #708]	; (801ad58 <lv_theme_default_init+0x2790>)
 801aa92:	68de      	ldr	r6, [r3, #12]
 801aa94:	4630      	mov	r0, r6
 801aa96:	f005 fcb7 	bl	8020408 <lv_disp_get_dpi>
 801aa9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa9e:	0040      	lsls	r0, r0, #1
 801aaa0:	28ef      	cmp	r0, #239	; 0xef
 801aaa2:	dc02      	bgt.n	801aaaa <lv_theme_default_init+0x24e2>
 801aaa4:	2101      	movs	r1, #1
 801aaa6:	f7fe b9d5 	b.w	8018e54 <lv_theme_default_init+0x88c>
 801aaaa:	4630      	mov	r0, r6
 801aaac:	f005 fcac 	bl	8020408 <lv_disp_get_dpi>
 801aab0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aab4:	0043      	lsls	r3, r0, #1
 801aab6:	3350      	adds	r3, #80	; 0x50
 801aab8:	4aa6      	ldr	r2, [pc, #664]	; (801ad54 <lv_theme_default_init+0x278c>)
 801aaba:	fb82 1203 	smull	r1, r2, r2, r3
 801aabe:	17d9      	asrs	r1, r3, #31
 801aac0:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aac4:	b209      	sxth	r1, r1
 801aac6:	f7fe b9c5 	b.w	8018e54 <lv_theme_default_init+0x88c>
 801aaca:	4630      	mov	r0, r6
 801aacc:	f005 fc9c 	bl	8020408 <lv_disp_get_dpi>
 801aad0:	0043      	lsls	r3, r0, #1
 801aad2:	3350      	adds	r3, #80	; 0x50
 801aad4:	4a9f      	ldr	r2, [pc, #636]	; (801ad54 <lv_theme_default_init+0x278c>)
 801aad6:	fb82 1203 	smull	r1, r2, r2, r3
 801aada:	17d9      	asrs	r1, r3, #31
 801aadc:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aae0:	b209      	sxth	r1, r1
 801aae2:	f7fe b9b7 	b.w	8018e54 <lv_theme_default_init+0x88c>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 801aae6:	4b9c      	ldr	r3, [pc, #624]	; (801ad58 <lv_theme_default_init+0x2790>)
 801aae8:	68de      	ldr	r6, [r3, #12]
 801aaea:	4630      	mov	r0, r6
 801aaec:	f005 fc8c 	bl	8020408 <lv_disp_get_dpi>
 801aaf0:	00c0      	lsls	r0, r0, #3
 801aaf2:	28ef      	cmp	r0, #239	; 0xef
 801aaf4:	dc02      	bgt.n	801aafc <lv_theme_default_init+0x2534>
 801aaf6:	2101      	movs	r1, #1
 801aaf8:	f7fe b9c4 	b.w	8018e84 <lv_theme_default_init+0x8bc>
 801aafc:	4630      	mov	r0, r6
 801aafe:	f005 fc83 	bl	8020408 <lv_disp_get_dpi>
 801ab02:	00c0      	lsls	r0, r0, #3
 801ab04:	3050      	adds	r0, #80	; 0x50
 801ab06:	4b93      	ldr	r3, [pc, #588]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ab08:	fb83 2300 	smull	r2, r3, r3, r0
 801ab0c:	17c1      	asrs	r1, r0, #31
 801ab0e:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801ab12:	b209      	sxth	r1, r1
 801ab14:	f7fe b9b6 	b.w	8018e84 <lv_theme_default_init+0x8bc>
 801ab18:	4b8f      	ldr	r3, [pc, #572]	; (801ad58 <lv_theme_default_init+0x2790>)
 801ab1a:	68de      	ldr	r6, [r3, #12]
 801ab1c:	4630      	mov	r0, r6
 801ab1e:	f005 fc73 	bl	8020408 <lv_disp_get_dpi>
 801ab22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab26:	0040      	lsls	r0, r0, #1
 801ab28:	28ef      	cmp	r0, #239	; 0xef
 801ab2a:	dc02      	bgt.n	801ab32 <lv_theme_default_init+0x256a>
 801ab2c:	2101      	movs	r1, #1
 801ab2e:	f7fe b9a9 	b.w	8018e84 <lv_theme_default_init+0x8bc>
 801ab32:	4630      	mov	r0, r6
 801ab34:	f005 fc68 	bl	8020408 <lv_disp_get_dpi>
 801ab38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab3c:	0043      	lsls	r3, r0, #1
 801ab3e:	3350      	adds	r3, #80	; 0x50
 801ab40:	4a84      	ldr	r2, [pc, #528]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ab42:	fb82 1203 	smull	r1, r2, r2, r3
 801ab46:	17d9      	asrs	r1, r3, #31
 801ab48:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ab4c:	b209      	sxth	r1, r1
 801ab4e:	f7fe b999 	b.w	8018e84 <lv_theme_default_init+0x8bc>
 801ab52:	4630      	mov	r0, r6
 801ab54:	f005 fc58 	bl	8020408 <lv_disp_get_dpi>
 801ab58:	0043      	lsls	r3, r0, #1
 801ab5a:	3350      	adds	r3, #80	; 0x50
 801ab5c:	4a7d      	ldr	r2, [pc, #500]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ab5e:	fb82 1203 	smull	r1, r2, r2, r3
 801ab62:	17d9      	asrs	r1, r3, #31
 801ab64:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ab68:	b209      	sxth	r1, r1
 801ab6a:	f7fe b98b 	b.w	8018e84 <lv_theme_default_init+0x8bc>
 801ab6e:	4630      	mov	r0, r6
 801ab70:	f005 fc4a 	bl	8020408 <lv_disp_get_dpi>
 801ab74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab78:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801ab7c:	4a75      	ldr	r2, [pc, #468]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ab7e:	fb82 1203 	smull	r1, r2, r2, r3
 801ab82:	17d9      	asrs	r1, r3, #31
 801ab84:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ab88:	b209      	sxth	r1, r1
 801ab8a:	f7fe ba26 	b.w	8018fda <lv_theme_default_init+0xa12>
 801ab8e:	4630      	mov	r0, r6
 801ab90:	f005 fc3a 	bl	8020408 <lv_disp_get_dpi>
 801ab94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab98:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801ab9c:	4a6d      	ldr	r2, [pc, #436]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ab9e:	fb82 1203 	smull	r1, r2, r2, r3
 801aba2:	17d9      	asrs	r1, r3, #31
 801aba4:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aba8:	b209      	sxth	r1, r1
 801abaa:	f7fe ba27 	b.w	8018ffc <lv_theme_default_init+0xa34>
 801abae:	4620      	mov	r0, r4
 801abb0:	f005 fc2a 	bl	8020408 <lv_disp_get_dpi>
 801abb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801abb8:	0043      	lsls	r3, r0, #1
 801abba:	3350      	adds	r3, #80	; 0x50
 801abbc:	4a65      	ldr	r2, [pc, #404]	; (801ad54 <lv_theme_default_init+0x278c>)
 801abbe:	fb82 1203 	smull	r1, r2, r2, r3
 801abc2:	17dc      	asrs	r4, r3, #31
 801abc4:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801abc8:	b224      	sxth	r4, r4
 801abca:	f7fe ba37 	b.w	801903c <lv_theme_default_init+0xa74>
 801abce:	4630      	mov	r0, r6
 801abd0:	f005 fc1a 	bl	8020408 <lv_disp_get_dpi>
 801abd4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801abd8:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801abdc:	4a5d      	ldr	r2, [pc, #372]	; (801ad54 <lv_theme_default_init+0x278c>)
 801abde:	fb82 1203 	smull	r1, r2, r2, r3
 801abe2:	17d9      	asrs	r1, r3, #31
 801abe4:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801abe8:	b209      	sxth	r1, r1
 801abea:	f7fe ba6a 	b.w	80190c2 <lv_theme_default_init+0xafa>
 801abee:	4620      	mov	r0, r4
 801abf0:	f005 fc0a 	bl	8020408 <lv_disp_get_dpi>
 801abf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801abf8:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801abfc:	4a55      	ldr	r2, [pc, #340]	; (801ad54 <lv_theme_default_init+0x278c>)
 801abfe:	fb82 1203 	smull	r1, r2, r2, r3
 801ac02:	17dc      	asrs	r4, r3, #31
 801ac04:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ac08:	b224      	sxth	r4, r4
 801ac0a:	f7fe ba8e 	b.w	801912a <lv_theme_default_init+0xb62>
 801ac0e:	4630      	mov	r0, r6
 801ac10:	f005 fbfa 	bl	8020408 <lv_disp_get_dpi>
 801ac14:	0043      	lsls	r3, r0, #1
 801ac16:	3350      	adds	r3, #80	; 0x50
 801ac18:	4a4e      	ldr	r2, [pc, #312]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ac1a:	fb82 1203 	smull	r1, r2, r2, r3
 801ac1e:	17d9      	asrs	r1, r3, #31
 801ac20:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ac24:	b209      	sxth	r1, r1
 801ac26:	f7fe ba9e 	b.w	8019166 <lv_theme_default_init+0xb9e>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 801ac2a:	4b4b      	ldr	r3, [pc, #300]	; (801ad58 <lv_theme_default_init+0x2790>)
 801ac2c:	68de      	ldr	r6, [r3, #12]
 801ac2e:	4630      	mov	r0, r6
 801ac30:	f005 fbea 	bl	8020408 <lv_disp_get_dpi>
 801ac34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ac38:	0080      	lsls	r0, r0, #2
 801ac3a:	28ef      	cmp	r0, #239	; 0xef
 801ac3c:	dc05      	bgt.n	801ac4a <lv_theme_default_init+0x2682>
 801ac3e:	2101      	movs	r1, #1
 801ac40:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801ac44:	1049      	asrs	r1, r1, #1
 801ac46:	f7fe babb 	b.w	80191c0 <lv_theme_default_init+0xbf8>
 801ac4a:	4630      	mov	r0, r6
 801ac4c:	f005 fbdc 	bl	8020408 <lv_disp_get_dpi>
 801ac50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ac54:	0083      	lsls	r3, r0, #2
 801ac56:	3350      	adds	r3, #80	; 0x50
 801ac58:	4a3e      	ldr	r2, [pc, #248]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ac5a:	fb82 1203 	smull	r1, r2, r2, r3
 801ac5e:	17d9      	asrs	r1, r3, #31
 801ac60:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ac64:	b209      	sxth	r1, r1
 801ac66:	e7eb      	b.n	801ac40 <lv_theme_default_init+0x2678>
 801ac68:	4630      	mov	r0, r6
 801ac6a:	f005 fbcd 	bl	8020408 <lv_disp_get_dpi>
 801ac6e:	00c3      	lsls	r3, r0, #3
 801ac70:	3350      	adds	r3, #80	; 0x50
 801ac72:	4a38      	ldr	r2, [pc, #224]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ac74:	fb82 1203 	smull	r1, r2, r2, r3
 801ac78:	17d9      	asrs	r1, r3, #31
 801ac7a:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ac7e:	b209      	sxth	r1, r1
 801ac80:	f7fe ba9b 	b.w	80191ba <lv_theme_default_init+0xbf2>
 801ac84:	4620      	mov	r0, r4
 801ac86:	f005 fbbf 	bl	8020408 <lv_disp_get_dpi>
 801ac8a:	0083      	lsls	r3, r0, #2
 801ac8c:	3350      	adds	r3, #80	; 0x50
 801ac8e:	4a31      	ldr	r2, [pc, #196]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ac90:	fb82 1203 	smull	r1, r2, r2, r3
 801ac94:	17dc      	asrs	r4, r3, #31
 801ac96:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ac9a:	b224      	sxth	r4, r4
 801ac9c:	f7fe babe 	b.w	801921c <lv_theme_default_init+0xc54>
 801aca0:	4630      	mov	r0, r6
 801aca2:	f005 fbb1 	bl	8020408 <lv_disp_get_dpi>
 801aca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801acaa:	0043      	lsls	r3, r0, #1
 801acac:	3350      	adds	r3, #80	; 0x50
 801acae:	4a29      	ldr	r2, [pc, #164]	; (801ad54 <lv_theme_default_init+0x278c>)
 801acb0:	fb82 1203 	smull	r1, r2, r2, r3
 801acb4:	17d9      	asrs	r1, r3, #31
 801acb6:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801acba:	b209      	sxth	r1, r1
 801acbc:	f7fe bb04 	b.w	80192c8 <lv_theme_default_init+0xd00>
 801acc0:	4630      	mov	r0, r6
 801acc2:	f005 fba1 	bl	8020408 <lv_disp_get_dpi>
 801acc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801acca:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801acce:	4a21      	ldr	r2, [pc, #132]	; (801ad54 <lv_theme_default_init+0x278c>)
 801acd0:	fb82 1203 	smull	r1, r2, r2, r3
 801acd4:	17d9      	asrs	r1, r3, #31
 801acd6:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801acda:	b209      	sxth	r1, r1
 801acdc:	f7fe bb12 	b.w	8019304 <lv_theme_default_init+0xd3c>
 801ace0:	4630      	mov	r0, r6
 801ace2:	f005 fb91 	bl	8020408 <lv_disp_get_dpi>
 801ace6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801acea:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801acee:	4a19      	ldr	r2, [pc, #100]	; (801ad54 <lv_theme_default_init+0x278c>)
 801acf0:	fb82 1203 	smull	r1, r2, r2, r3
 801acf4:	17d9      	asrs	r1, r3, #31
 801acf6:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801acfa:	b209      	sxth	r1, r1
 801acfc:	f7fe bb14 	b.w	8019328 <lv_theme_default_init+0xd60>
 801ad00:	4620      	mov	r0, r4
 801ad02:	f005 fb81 	bl	8020408 <lv_disp_get_dpi>
 801ad06:	00c3      	lsls	r3, r0, #3
 801ad08:	3350      	adds	r3, #80	; 0x50
 801ad0a:	4a12      	ldr	r2, [pc, #72]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ad0c:	fb82 1203 	smull	r1, r2, r2, r3
 801ad10:	17dc      	asrs	r4, r3, #31
 801ad12:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ad16:	b224      	sxth	r4, r4
 801ad18:	f7fe bb17 	b.w	801934a <lv_theme_default_init+0xd82>
 801ad1c:	4630      	mov	r0, r6
 801ad1e:	f005 fb73 	bl	8020408 <lv_disp_get_dpi>
 801ad22:	0043      	lsls	r3, r0, #1
 801ad24:	3350      	adds	r3, #80	; 0x50
 801ad26:	4a0b      	ldr	r2, [pc, #44]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ad28:	fb82 1203 	smull	r1, r2, r2, r3
 801ad2c:	17d9      	asrs	r1, r3, #31
 801ad2e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ad32:	b209      	sxth	r1, r1
 801ad34:	f7fe bb1f 	b.w	8019376 <lv_theme_default_init+0xdae>
 801ad38:	4620      	mov	r0, r4
 801ad3a:	f005 fb65 	bl	8020408 <lv_disp_get_dpi>
 801ad3e:	00c3      	lsls	r3, r0, #3
 801ad40:	3350      	adds	r3, #80	; 0x50
 801ad42:	4a04      	ldr	r2, [pc, #16]	; (801ad54 <lv_theme_default_init+0x278c>)
 801ad44:	fb82 1203 	smull	r1, r2, r2, r3
 801ad48:	17dc      	asrs	r4, r3, #31
 801ad4a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ad4e:	b224      	sxth	r4, r4
 801ad50:	f7fe bb2e 	b.w	80193b0 <lv_theme_default_init+0xde8>
 801ad54:	66666667 	.word	0x66666667
 801ad58:	200026c8 	.word	0x200026c8
 801ad5c:	4630      	mov	r0, r6
 801ad5e:	f005 fb53 	bl	8020408 <lv_disp_get_dpi>
 801ad62:	3050      	adds	r0, #80	; 0x50
 801ad64:	4bd4      	ldr	r3, [pc, #848]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801ad66:	fb83 2300 	smull	r2, r3, r3, r0
 801ad6a:	17c1      	asrs	r1, r0, #31
 801ad6c:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801ad70:	b209      	sxth	r1, r1
 801ad72:	f7fe bb43 	b.w	80193fc <lv_theme_default_init+0xe34>
 801ad76:	4620      	mov	r0, r4
 801ad78:	f005 fb46 	bl	8020408 <lv_disp_get_dpi>
 801ad7c:	0043      	lsls	r3, r0, #1
 801ad7e:	3350      	adds	r3, #80	; 0x50
 801ad80:	4acd      	ldr	r2, [pc, #820]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801ad82:	fb82 1203 	smull	r1, r2, r2, r3
 801ad86:	17dc      	asrs	r4, r3, #31
 801ad88:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ad8c:	b224      	sxth	r4, r4
 801ad8e:	f7fe bb4d 	b.w	801942c <lv_theme_default_init+0xe64>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 801ad92:	4bca      	ldr	r3, [pc, #808]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801ad94:	68de      	ldr	r6, [r3, #12]
 801ad96:	4630      	mov	r0, r6
 801ad98:	f005 fb36 	bl	8020408 <lv_disp_get_dpi>
 801ad9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ada0:	0080      	lsls	r0, r0, #2
 801ada2:	28ef      	cmp	r0, #239	; 0xef
 801ada4:	dc02      	bgt.n	801adac <lv_theme_default_init+0x27e4>
 801ada6:	2101      	movs	r1, #1
 801ada8:	f7fe bba7 	b.w	80194fa <lv_theme_default_init+0xf32>
 801adac:	4630      	mov	r0, r6
 801adae:	f005 fb2b 	bl	8020408 <lv_disp_get_dpi>
 801adb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801adb6:	0083      	lsls	r3, r0, #2
 801adb8:	3350      	adds	r3, #80	; 0x50
 801adba:	4abf      	ldr	r2, [pc, #764]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801adbc:	fb82 1203 	smull	r1, r2, r2, r3
 801adc0:	17d9      	asrs	r1, r3, #31
 801adc2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801adc6:	b209      	sxth	r1, r1
 801adc8:	f7fe bb97 	b.w	80194fa <lv_theme_default_init+0xf32>
 801adcc:	4630      	mov	r0, r6
 801adce:	f005 fb1b 	bl	8020408 <lv_disp_get_dpi>
 801add2:	00c3      	lsls	r3, r0, #3
 801add4:	3350      	adds	r3, #80	; 0x50
 801add6:	4ab8      	ldr	r2, [pc, #736]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801add8:	fb82 1203 	smull	r1, r2, r2, r3
 801addc:	17d9      	asrs	r1, r3, #31
 801adde:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ade2:	b209      	sxth	r1, r1
 801ade4:	f7fe bb89 	b.w	80194fa <lv_theme_default_init+0xf32>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 801ade8:	4bb4      	ldr	r3, [pc, #720]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801adea:	68dc      	ldr	r4, [r3, #12]
 801adec:	4620      	mov	r0, r4
 801adee:	f005 fb0b 	bl	8020408 <lv_disp_get_dpi>
 801adf2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801adf6:	0040      	lsls	r0, r0, #1
 801adf8:	28ef      	cmp	r0, #239	; 0xef
 801adfa:	dc02      	bgt.n	801ae02 <lv_theme_default_init+0x283a>
 801adfc:	2401      	movs	r4, #1
 801adfe:	f7fe bbb6 	b.w	801956e <lv_theme_default_init+0xfa6>
 801ae02:	4620      	mov	r0, r4
 801ae04:	f005 fb00 	bl	8020408 <lv_disp_get_dpi>
 801ae08:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801ae0c:	0043      	lsls	r3, r0, #1
 801ae0e:	3350      	adds	r3, #80	; 0x50
 801ae10:	4aa9      	ldr	r2, [pc, #676]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801ae12:	fb82 1203 	smull	r1, r2, r2, r3
 801ae16:	17dc      	asrs	r4, r3, #31
 801ae18:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ae1c:	b224      	sxth	r4, r4
 801ae1e:	f7fe bba6 	b.w	801956e <lv_theme_default_init+0xfa6>
 801ae22:	4ba6      	ldr	r3, [pc, #664]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801ae24:	68dc      	ldr	r4, [r3, #12]
 801ae26:	4620      	mov	r0, r4
 801ae28:	f005 faee 	bl	8020408 <lv_disp_get_dpi>
 801ae2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae30:	0080      	lsls	r0, r0, #2
 801ae32:	28ef      	cmp	r0, #239	; 0xef
 801ae34:	dc02      	bgt.n	801ae3c <lv_theme_default_init+0x2874>
 801ae36:	2401      	movs	r4, #1
 801ae38:	f7fe bb99 	b.w	801956e <lv_theme_default_init+0xfa6>
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	f005 fae3 	bl	8020408 <lv_disp_get_dpi>
 801ae42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae46:	0083      	lsls	r3, r0, #2
 801ae48:	3350      	adds	r3, #80	; 0x50
 801ae4a:	4a9b      	ldr	r2, [pc, #620]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801ae4c:	fb82 1203 	smull	r1, r2, r2, r3
 801ae50:	17dc      	asrs	r4, r3, #31
 801ae52:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ae56:	b224      	sxth	r4, r4
 801ae58:	f7fe bb89 	b.w	801956e <lv_theme_default_init+0xfa6>
 801ae5c:	4620      	mov	r0, r4
 801ae5e:	f005 fad3 	bl	8020408 <lv_disp_get_dpi>
 801ae62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ae66:	0043      	lsls	r3, r0, #1
 801ae68:	3350      	adds	r3, #80	; 0x50
 801ae6a:	4a93      	ldr	r2, [pc, #588]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801ae6c:	fb82 1203 	smull	r1, r2, r2, r3
 801ae70:	17dc      	asrs	r4, r3, #31
 801ae72:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ae76:	b224      	sxth	r4, r4
 801ae78:	f7fe bb79 	b.w	801956e <lv_theme_default_init+0xfa6>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 801ae7c:	4b8f      	ldr	r3, [pc, #572]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801ae7e:	68dc      	ldr	r4, [r3, #12]
 801ae80:	4620      	mov	r0, r4
 801ae82:	f005 fac1 	bl	8020408 <lv_disp_get_dpi>
 801ae86:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801ae8a:	0040      	lsls	r0, r0, #1
 801ae8c:	28ef      	cmp	r0, #239	; 0xef
 801ae8e:	dc02      	bgt.n	801ae96 <lv_theme_default_init+0x28ce>
 801ae90:	2401      	movs	r4, #1
 801ae92:	f7fe bb8c 	b.w	80195ae <lv_theme_default_init+0xfe6>
 801ae96:	4620      	mov	r0, r4
 801ae98:	f005 fab6 	bl	8020408 <lv_disp_get_dpi>
 801ae9c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801aea0:	0043      	lsls	r3, r0, #1
 801aea2:	3350      	adds	r3, #80	; 0x50
 801aea4:	4a84      	ldr	r2, [pc, #528]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801aea6:	fb82 1203 	smull	r1, r2, r2, r3
 801aeaa:	17dc      	asrs	r4, r3, #31
 801aeac:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801aeb0:	b224      	sxth	r4, r4
 801aeb2:	f7fe bb7c 	b.w	80195ae <lv_theme_default_init+0xfe6>
 801aeb6:	4b81      	ldr	r3, [pc, #516]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801aeb8:	68dc      	ldr	r4, [r3, #12]
 801aeba:	4620      	mov	r0, r4
 801aebc:	f005 faa4 	bl	8020408 <lv_disp_get_dpi>
 801aec0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aec4:	0080      	lsls	r0, r0, #2
 801aec6:	28ef      	cmp	r0, #239	; 0xef
 801aec8:	dc02      	bgt.n	801aed0 <lv_theme_default_init+0x2908>
 801aeca:	2401      	movs	r4, #1
 801aecc:	f7fe bb6f 	b.w	80195ae <lv_theme_default_init+0xfe6>
 801aed0:	4620      	mov	r0, r4
 801aed2:	f005 fa99 	bl	8020408 <lv_disp_get_dpi>
 801aed6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aeda:	0083      	lsls	r3, r0, #2
 801aedc:	3350      	adds	r3, #80	; 0x50
 801aede:	4a76      	ldr	r2, [pc, #472]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801aee0:	fb82 1203 	smull	r1, r2, r2, r3
 801aee4:	17dc      	asrs	r4, r3, #31
 801aee6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801aeea:	b224      	sxth	r4, r4
 801aeec:	f7fe bb5f 	b.w	80195ae <lv_theme_default_init+0xfe6>
 801aef0:	4620      	mov	r0, r4
 801aef2:	f005 fa89 	bl	8020408 <lv_disp_get_dpi>
 801aef6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801aefa:	0043      	lsls	r3, r0, #1
 801aefc:	3350      	adds	r3, #80	; 0x50
 801aefe:	4a6e      	ldr	r2, [pc, #440]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801af00:	fb82 1203 	smull	r1, r2, r2, r3
 801af04:	17dc      	asrs	r4, r3, #31
 801af06:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801af0a:	b224      	sxth	r4, r4
 801af0c:	f7fe bb4f 	b.w	80195ae <lv_theme_default_init+0xfe6>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 801af10:	4b6a      	ldr	r3, [pc, #424]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801af12:	68dc      	ldr	r4, [r3, #12]
 801af14:	4620      	mov	r0, r4
 801af16:	f005 fa77 	bl	8020408 <lv_disp_get_dpi>
 801af1a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801af1e:	0040      	lsls	r0, r0, #1
 801af20:	28ef      	cmp	r0, #239	; 0xef
 801af22:	dc02      	bgt.n	801af2a <lv_theme_default_init+0x2962>
 801af24:	2401      	movs	r4, #1
 801af26:	f7fe bb6f 	b.w	8019608 <lv_theme_default_init+0x1040>
 801af2a:	4620      	mov	r0, r4
 801af2c:	f005 fa6c 	bl	8020408 <lv_disp_get_dpi>
 801af30:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801af34:	0043      	lsls	r3, r0, #1
 801af36:	3350      	adds	r3, #80	; 0x50
 801af38:	4a5f      	ldr	r2, [pc, #380]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801af3a:	fb82 1203 	smull	r1, r2, r2, r3
 801af3e:	17dc      	asrs	r4, r3, #31
 801af40:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801af44:	b224      	sxth	r4, r4
 801af46:	f7fe bb5f 	b.w	8019608 <lv_theme_default_init+0x1040>
 801af4a:	4b5c      	ldr	r3, [pc, #368]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801af4c:	68dc      	ldr	r4, [r3, #12]
 801af4e:	4620      	mov	r0, r4
 801af50:	f005 fa5a 	bl	8020408 <lv_disp_get_dpi>
 801af54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af58:	0080      	lsls	r0, r0, #2
 801af5a:	28ef      	cmp	r0, #239	; 0xef
 801af5c:	dc02      	bgt.n	801af64 <lv_theme_default_init+0x299c>
 801af5e:	2401      	movs	r4, #1
 801af60:	f7fe bb52 	b.w	8019608 <lv_theme_default_init+0x1040>
 801af64:	4620      	mov	r0, r4
 801af66:	f005 fa4f 	bl	8020408 <lv_disp_get_dpi>
 801af6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af6e:	0083      	lsls	r3, r0, #2
 801af70:	3350      	adds	r3, #80	; 0x50
 801af72:	4a51      	ldr	r2, [pc, #324]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801af74:	fb82 1203 	smull	r1, r2, r2, r3
 801af78:	17dc      	asrs	r4, r3, #31
 801af7a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801af7e:	b224      	sxth	r4, r4
 801af80:	f7fe bb42 	b.w	8019608 <lv_theme_default_init+0x1040>
 801af84:	4620      	mov	r0, r4
 801af86:	f005 fa3f 	bl	8020408 <lv_disp_get_dpi>
 801af8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801af8e:	0043      	lsls	r3, r0, #1
 801af90:	3350      	adds	r3, #80	; 0x50
 801af92:	4a49      	ldr	r2, [pc, #292]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801af94:	fb82 1203 	smull	r1, r2, r2, r3
 801af98:	17dc      	asrs	r4, r3, #31
 801af9a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801af9e:	b224      	sxth	r4, r4
 801afa0:	f7fe bb32 	b.w	8019608 <lv_theme_default_init+0x1040>
 801afa4:	4630      	mov	r0, r6
 801afa6:	f005 fa2f 	bl	8020408 <lv_disp_get_dpi>
 801afaa:	3050      	adds	r0, #80	; 0x50
 801afac:	4b42      	ldr	r3, [pc, #264]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801afae:	fb83 2300 	smull	r2, r3, r3, r0
 801afb2:	17c1      	asrs	r1, r0, #31
 801afb4:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801afb8:	b209      	sxth	r1, r1
 801afba:	f7fe bb3a 	b.w	8019632 <lv_theme_default_init+0x106a>
 801afbe:	4630      	mov	r0, r6
 801afc0:	f005 fa22 	bl	8020408 <lv_disp_get_dpi>
 801afc4:	3050      	adds	r0, #80	; 0x50
 801afc6:	4b3c      	ldr	r3, [pc, #240]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801afc8:	fb83 2300 	smull	r2, r3, r3, r0
 801afcc:	17c1      	asrs	r1, r0, #31
 801afce:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801afd2:	b209      	sxth	r1, r1
 801afd4:	f7fe bb73 	b.w	80196be <lv_theme_default_init+0x10f6>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 801afd8:	4b38      	ldr	r3, [pc, #224]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801afda:	68dc      	ldr	r4, [r3, #12]
 801afdc:	4620      	mov	r0, r4
 801afde:	f005 fa13 	bl	8020408 <lv_disp_get_dpi>
 801afe2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801afe6:	0040      	lsls	r0, r0, #1
 801afe8:	28ef      	cmp	r0, #239	; 0xef
 801afea:	dc02      	bgt.n	801aff2 <lv_theme_default_init+0x2a2a>
 801afec:	2401      	movs	r4, #1
 801afee:	f7fe bbbc 	b.w	801976a <lv_theme_default_init+0x11a2>
 801aff2:	4620      	mov	r0, r4
 801aff4:	f005 fa08 	bl	8020408 <lv_disp_get_dpi>
 801aff8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801affc:	0043      	lsls	r3, r0, #1
 801affe:	3350      	adds	r3, #80	; 0x50
 801b000:	4a2d      	ldr	r2, [pc, #180]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801b002:	fb82 1203 	smull	r1, r2, r2, r3
 801b006:	17dc      	asrs	r4, r3, #31
 801b008:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b00c:	b224      	sxth	r4, r4
 801b00e:	f7fe bbac 	b.w	801976a <lv_theme_default_init+0x11a2>
 801b012:	4b2a      	ldr	r3, [pc, #168]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801b014:	68dc      	ldr	r4, [r3, #12]
 801b016:	4620      	mov	r0, r4
 801b018:	f005 f9f6 	bl	8020408 <lv_disp_get_dpi>
 801b01c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b020:	0080      	lsls	r0, r0, #2
 801b022:	28ef      	cmp	r0, #239	; 0xef
 801b024:	dc02      	bgt.n	801b02c <lv_theme_default_init+0x2a64>
 801b026:	2401      	movs	r4, #1
 801b028:	f7fe bb9f 	b.w	801976a <lv_theme_default_init+0x11a2>
 801b02c:	4620      	mov	r0, r4
 801b02e:	f005 f9eb 	bl	8020408 <lv_disp_get_dpi>
 801b032:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b036:	0083      	lsls	r3, r0, #2
 801b038:	3350      	adds	r3, #80	; 0x50
 801b03a:	4a1f      	ldr	r2, [pc, #124]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801b03c:	fb82 1203 	smull	r1, r2, r2, r3
 801b040:	17dc      	asrs	r4, r3, #31
 801b042:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b046:	b224      	sxth	r4, r4
 801b048:	f7fe bb8f 	b.w	801976a <lv_theme_default_init+0x11a2>
 801b04c:	4620      	mov	r0, r4
 801b04e:	f005 f9db 	bl	8020408 <lv_disp_get_dpi>
 801b052:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b056:	0043      	lsls	r3, r0, #1
 801b058:	3350      	adds	r3, #80	; 0x50
 801b05a:	4a17      	ldr	r2, [pc, #92]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801b05c:	fb82 1203 	smull	r1, r2, r2, r3
 801b060:	17dc      	asrs	r4, r3, #31
 801b062:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b066:	b224      	sxth	r4, r4
 801b068:	f7fe bb7f 	b.w	801976a <lv_theme_default_init+0x11a2>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 801b06c:	4b13      	ldr	r3, [pc, #76]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801b06e:	68dc      	ldr	r4, [r3, #12]
 801b070:	4620      	mov	r0, r4
 801b072:	f005 f9c9 	bl	8020408 <lv_disp_get_dpi>
 801b076:	00c0      	lsls	r0, r0, #3
 801b078:	28ef      	cmp	r0, #239	; 0xef
 801b07a:	dc02      	bgt.n	801b082 <lv_theme_default_init+0x2aba>
 801b07c:	2401      	movs	r4, #1
 801b07e:	f7fe bb92 	b.w	80197a6 <lv_theme_default_init+0x11de>
 801b082:	4620      	mov	r0, r4
 801b084:	f005 f9c0 	bl	8020408 <lv_disp_get_dpi>
 801b088:	00c0      	lsls	r0, r0, #3
 801b08a:	3050      	adds	r0, #80	; 0x50
 801b08c:	4b0a      	ldr	r3, [pc, #40]	; (801b0b8 <lv_theme_default_init+0x2af0>)
 801b08e:	fb83 2300 	smull	r2, r3, r3, r0
 801b092:	17c4      	asrs	r4, r0, #31
 801b094:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b098:	b224      	sxth	r4, r4
 801b09a:	f7fe bb84 	b.w	80197a6 <lv_theme_default_init+0x11de>
 801b09e:	4b07      	ldr	r3, [pc, #28]	; (801b0bc <lv_theme_default_init+0x2af4>)
 801b0a0:	68dc      	ldr	r4, [r3, #12]
 801b0a2:	4620      	mov	r0, r4
 801b0a4:	f005 f9b0 	bl	8020408 <lv_disp_get_dpi>
 801b0a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b0ac:	0040      	lsls	r0, r0, #1
 801b0ae:	28ef      	cmp	r0, #239	; 0xef
 801b0b0:	dc06      	bgt.n	801b0c0 <lv_theme_default_init+0x2af8>
 801b0b2:	2401      	movs	r4, #1
 801b0b4:	f7fe bb77 	b.w	80197a6 <lv_theme_default_init+0x11de>
 801b0b8:	66666667 	.word	0x66666667
 801b0bc:	200026c8 	.word	0x200026c8
 801b0c0:	4620      	mov	r0, r4
 801b0c2:	f005 f9a1 	bl	8020408 <lv_disp_get_dpi>
 801b0c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b0ca:	0043      	lsls	r3, r0, #1
 801b0cc:	3350      	adds	r3, #80	; 0x50
 801b0ce:	4ad6      	ldr	r2, [pc, #856]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b0d0:	fb82 1203 	smull	r1, r2, r2, r3
 801b0d4:	17dc      	asrs	r4, r3, #31
 801b0d6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b0da:	b224      	sxth	r4, r4
 801b0dc:	f7fe bb63 	b.w	80197a6 <lv_theme_default_init+0x11de>
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	f005 f991 	bl	8020408 <lv_disp_get_dpi>
 801b0e6:	0043      	lsls	r3, r0, #1
 801b0e8:	3350      	adds	r3, #80	; 0x50
 801b0ea:	4acf      	ldr	r2, [pc, #828]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b0ec:	fb82 1203 	smull	r1, r2, r2, r3
 801b0f0:	17dc      	asrs	r4, r3, #31
 801b0f2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b0f6:	b224      	sxth	r4, r4
 801b0f8:	f7fe bb55 	b.w	80197a6 <lv_theme_default_init+0x11de>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 801b0fc:	4bcb      	ldr	r3, [pc, #812]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b0fe:	68dc      	ldr	r4, [r3, #12]
 801b100:	4620      	mov	r0, r4
 801b102:	f005 f981 	bl	8020408 <lv_disp_get_dpi>
 801b106:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b10a:	0040      	lsls	r0, r0, #1
 801b10c:	28ef      	cmp	r0, #239	; 0xef
 801b10e:	dc02      	bgt.n	801b116 <lv_theme_default_init+0x2b4e>
 801b110:	2401      	movs	r4, #1
 801b112:	f7fe bb68 	b.w	80197e6 <lv_theme_default_init+0x121e>
 801b116:	4620      	mov	r0, r4
 801b118:	f005 f976 	bl	8020408 <lv_disp_get_dpi>
 801b11c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b120:	0043      	lsls	r3, r0, #1
 801b122:	3350      	adds	r3, #80	; 0x50
 801b124:	4ac0      	ldr	r2, [pc, #768]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b126:	fb82 1203 	smull	r1, r2, r2, r3
 801b12a:	17dc      	asrs	r4, r3, #31
 801b12c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b130:	b224      	sxth	r4, r4
 801b132:	f7fe bb58 	b.w	80197e6 <lv_theme_default_init+0x121e>
 801b136:	4bbd      	ldr	r3, [pc, #756]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b138:	68dc      	ldr	r4, [r3, #12]
 801b13a:	4620      	mov	r0, r4
 801b13c:	f005 f964 	bl	8020408 <lv_disp_get_dpi>
 801b140:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b144:	0080      	lsls	r0, r0, #2
 801b146:	28ef      	cmp	r0, #239	; 0xef
 801b148:	dc02      	bgt.n	801b150 <lv_theme_default_init+0x2b88>
 801b14a:	2401      	movs	r4, #1
 801b14c:	f7fe bb4b 	b.w	80197e6 <lv_theme_default_init+0x121e>
 801b150:	4620      	mov	r0, r4
 801b152:	f005 f959 	bl	8020408 <lv_disp_get_dpi>
 801b156:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b15a:	0083      	lsls	r3, r0, #2
 801b15c:	3350      	adds	r3, #80	; 0x50
 801b15e:	4ab2      	ldr	r2, [pc, #712]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b160:	fb82 1203 	smull	r1, r2, r2, r3
 801b164:	17dc      	asrs	r4, r3, #31
 801b166:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b16a:	b224      	sxth	r4, r4
 801b16c:	f7fe bb3b 	b.w	80197e6 <lv_theme_default_init+0x121e>
 801b170:	4620      	mov	r0, r4
 801b172:	f005 f949 	bl	8020408 <lv_disp_get_dpi>
 801b176:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b17a:	0043      	lsls	r3, r0, #1
 801b17c:	3350      	adds	r3, #80	; 0x50
 801b17e:	4aaa      	ldr	r2, [pc, #680]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b180:	fb82 1203 	smull	r1, r2, r2, r3
 801b184:	17dc      	asrs	r4, r3, #31
 801b186:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b18a:	b224      	sxth	r4, r4
 801b18c:	f7fe bb2b 	b.w	80197e6 <lv_theme_default_init+0x121e>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 801b190:	4ba6      	ldr	r3, [pc, #664]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b192:	68dc      	ldr	r4, [r3, #12]
 801b194:	4620      	mov	r0, r4
 801b196:	f005 f937 	bl	8020408 <lv_disp_get_dpi>
 801b19a:	00c0      	lsls	r0, r0, #3
 801b19c:	28ef      	cmp	r0, #239	; 0xef
 801b19e:	dc02      	bgt.n	801b1a6 <lv_theme_default_init+0x2bde>
 801b1a0:	2401      	movs	r4, #1
 801b1a2:	f7fe bb43 	b.w	801982c <lv_theme_default_init+0x1264>
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	f005 f92e 	bl	8020408 <lv_disp_get_dpi>
 801b1ac:	00c0      	lsls	r0, r0, #3
 801b1ae:	3050      	adds	r0, #80	; 0x50
 801b1b0:	4b9d      	ldr	r3, [pc, #628]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b1b2:	fb83 2300 	smull	r2, r3, r3, r0
 801b1b6:	17c4      	asrs	r4, r0, #31
 801b1b8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b1bc:	b224      	sxth	r4, r4
 801b1be:	f7fe bb35 	b.w	801982c <lv_theme_default_init+0x1264>
 801b1c2:	4b9a      	ldr	r3, [pc, #616]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b1c4:	68dc      	ldr	r4, [r3, #12]
 801b1c6:	4620      	mov	r0, r4
 801b1c8:	f005 f91e 	bl	8020408 <lv_disp_get_dpi>
 801b1cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b1d0:	0040      	lsls	r0, r0, #1
 801b1d2:	28ef      	cmp	r0, #239	; 0xef
 801b1d4:	dc02      	bgt.n	801b1dc <lv_theme_default_init+0x2c14>
 801b1d6:	2401      	movs	r4, #1
 801b1d8:	f7fe bb28 	b.w	801982c <lv_theme_default_init+0x1264>
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f005 f913 	bl	8020408 <lv_disp_get_dpi>
 801b1e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b1e6:	0043      	lsls	r3, r0, #1
 801b1e8:	3350      	adds	r3, #80	; 0x50
 801b1ea:	4a8f      	ldr	r2, [pc, #572]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b1ec:	fb82 1203 	smull	r1, r2, r2, r3
 801b1f0:	17dc      	asrs	r4, r3, #31
 801b1f2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b1f6:	b224      	sxth	r4, r4
 801b1f8:	f7fe bb18 	b.w	801982c <lv_theme_default_init+0x1264>
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	f005 f903 	bl	8020408 <lv_disp_get_dpi>
 801b202:	0043      	lsls	r3, r0, #1
 801b204:	3350      	adds	r3, #80	; 0x50
 801b206:	4a88      	ldr	r2, [pc, #544]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b208:	fb82 1203 	smull	r1, r2, r2, r3
 801b20c:	17dc      	asrs	r4, r3, #31
 801b20e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b212:	b224      	sxth	r4, r4
 801b214:	f7fe bb0a 	b.w	801982c <lv_theme_default_init+0x1264>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 801b218:	4b84      	ldr	r3, [pc, #528]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b21a:	68dc      	ldr	r4, [r3, #12]
 801b21c:	4620      	mov	r0, r4
 801b21e:	f005 f8f3 	bl	8020408 <lv_disp_get_dpi>
 801b222:	00c0      	lsls	r0, r0, #3
 801b224:	28ef      	cmp	r0, #239	; 0xef
 801b226:	dc02      	bgt.n	801b22e <lv_theme_default_init+0x2c66>
 801b228:	2401      	movs	r4, #1
 801b22a:	f7fe bb1d 	b.w	8019868 <lv_theme_default_init+0x12a0>
 801b22e:	4620      	mov	r0, r4
 801b230:	f005 f8ea 	bl	8020408 <lv_disp_get_dpi>
 801b234:	00c0      	lsls	r0, r0, #3
 801b236:	3050      	adds	r0, #80	; 0x50
 801b238:	4b7b      	ldr	r3, [pc, #492]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b23a:	fb83 2300 	smull	r2, r3, r3, r0
 801b23e:	17c4      	asrs	r4, r0, #31
 801b240:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b244:	b224      	sxth	r4, r4
 801b246:	f7fe bb0f 	b.w	8019868 <lv_theme_default_init+0x12a0>
 801b24a:	4b78      	ldr	r3, [pc, #480]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b24c:	68dc      	ldr	r4, [r3, #12]
 801b24e:	4620      	mov	r0, r4
 801b250:	f005 f8da 	bl	8020408 <lv_disp_get_dpi>
 801b254:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b258:	0040      	lsls	r0, r0, #1
 801b25a:	28ef      	cmp	r0, #239	; 0xef
 801b25c:	dc02      	bgt.n	801b264 <lv_theme_default_init+0x2c9c>
 801b25e:	2401      	movs	r4, #1
 801b260:	f7fe bb02 	b.w	8019868 <lv_theme_default_init+0x12a0>
 801b264:	4620      	mov	r0, r4
 801b266:	f005 f8cf 	bl	8020408 <lv_disp_get_dpi>
 801b26a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b26e:	0043      	lsls	r3, r0, #1
 801b270:	3350      	adds	r3, #80	; 0x50
 801b272:	4a6d      	ldr	r2, [pc, #436]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b274:	fb82 1203 	smull	r1, r2, r2, r3
 801b278:	17dc      	asrs	r4, r3, #31
 801b27a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b27e:	b224      	sxth	r4, r4
 801b280:	f7fe baf2 	b.w	8019868 <lv_theme_default_init+0x12a0>
 801b284:	4620      	mov	r0, r4
 801b286:	f005 f8bf 	bl	8020408 <lv_disp_get_dpi>
 801b28a:	0043      	lsls	r3, r0, #1
 801b28c:	3350      	adds	r3, #80	; 0x50
 801b28e:	4a66      	ldr	r2, [pc, #408]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b290:	fb82 1203 	smull	r1, r2, r2, r3
 801b294:	17dc      	asrs	r4, r3, #31
 801b296:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b29a:	b224      	sxth	r4, r4
 801b29c:	f7fe bae4 	b.w	8019868 <lv_theme_default_init+0x12a0>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 801b2a0:	4b62      	ldr	r3, [pc, #392]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b2a2:	68dc      	ldr	r4, [r3, #12]
 801b2a4:	4620      	mov	r0, r4
 801b2a6:	f005 f8af 	bl	8020408 <lv_disp_get_dpi>
 801b2aa:	00c0      	lsls	r0, r0, #3
 801b2ac:	28ef      	cmp	r0, #239	; 0xef
 801b2ae:	dc02      	bgt.n	801b2b6 <lv_theme_default_init+0x2cee>
 801b2b0:	2401      	movs	r4, #1
 801b2b2:	f7fe bb4f 	b.w	8019954 <lv_theme_default_init+0x138c>
 801b2b6:	4620      	mov	r0, r4
 801b2b8:	f005 f8a6 	bl	8020408 <lv_disp_get_dpi>
 801b2bc:	00c0      	lsls	r0, r0, #3
 801b2be:	3050      	adds	r0, #80	; 0x50
 801b2c0:	4b59      	ldr	r3, [pc, #356]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b2c2:	fb83 2300 	smull	r2, r3, r3, r0
 801b2c6:	17c4      	asrs	r4, r0, #31
 801b2c8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b2cc:	b224      	sxth	r4, r4
 801b2ce:	f7fe bb41 	b.w	8019954 <lv_theme_default_init+0x138c>
 801b2d2:	4b56      	ldr	r3, [pc, #344]	; (801b42c <lv_theme_default_init+0x2e64>)
 801b2d4:	68dc      	ldr	r4, [r3, #12]
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	f005 f896 	bl	8020408 <lv_disp_get_dpi>
 801b2dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b2e0:	0040      	lsls	r0, r0, #1
 801b2e2:	28ef      	cmp	r0, #239	; 0xef
 801b2e4:	dc02      	bgt.n	801b2ec <lv_theme_default_init+0x2d24>
 801b2e6:	2401      	movs	r4, #1
 801b2e8:	f7fe bb34 	b.w	8019954 <lv_theme_default_init+0x138c>
 801b2ec:	4620      	mov	r0, r4
 801b2ee:	f005 f88b 	bl	8020408 <lv_disp_get_dpi>
 801b2f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b2f6:	0043      	lsls	r3, r0, #1
 801b2f8:	3350      	adds	r3, #80	; 0x50
 801b2fa:	4a4b      	ldr	r2, [pc, #300]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b2fc:	fb82 1203 	smull	r1, r2, r2, r3
 801b300:	17dc      	asrs	r4, r3, #31
 801b302:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b306:	b224      	sxth	r4, r4
 801b308:	f7fe bb24 	b.w	8019954 <lv_theme_default_init+0x138c>
 801b30c:	4620      	mov	r0, r4
 801b30e:	f005 f87b 	bl	8020408 <lv_disp_get_dpi>
 801b312:	0043      	lsls	r3, r0, #1
 801b314:	3350      	adds	r3, #80	; 0x50
 801b316:	4a44      	ldr	r2, [pc, #272]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b318:	fb82 1203 	smull	r1, r2, r2, r3
 801b31c:	17dc      	asrs	r4, r3, #31
 801b31e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b322:	b224      	sxth	r4, r4
 801b324:	f7fe bb16 	b.w	8019954 <lv_theme_default_init+0x138c>
 801b328:	4630      	mov	r0, r6
 801b32a:	f005 f86d 	bl	8020408 <lv_disp_get_dpi>
 801b32e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b332:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b336:	4a3c      	ldr	r2, [pc, #240]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b338:	fb82 1203 	smull	r1, r2, r2, r3
 801b33c:	17d9      	asrs	r1, r3, #31
 801b33e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b342:	b209      	sxth	r1, r1
 801b344:	f7fe bb22 	b.w	801998c <lv_theme_default_init+0x13c4>
 801b348:	4620      	mov	r0, r4
 801b34a:	f005 f85d 	bl	8020408 <lv_disp_get_dpi>
 801b34e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b352:	0083      	lsls	r3, r0, #2
 801b354:	3350      	adds	r3, #80	; 0x50
 801b356:	4a34      	ldr	r2, [pc, #208]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b358:	fb82 1203 	smull	r1, r2, r2, r3
 801b35c:	17dc      	asrs	r4, r3, #31
 801b35e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b362:	b224      	sxth	r4, r4
 801b364:	f7fe bb2c 	b.w	80199c0 <lv_theme_default_init+0x13f8>
 801b368:	4630      	mov	r0, r6
 801b36a:	f005 f84d 	bl	8020408 <lv_disp_get_dpi>
 801b36e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801b372:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b376:	4a2c      	ldr	r2, [pc, #176]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b378:	fb82 1203 	smull	r1, r2, r2, r3
 801b37c:	17d9      	asrs	r1, r3, #31
 801b37e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b382:	b209      	sxth	r1, r1
 801b384:	f7fe bb33 	b.w	80199ee <lv_theme_default_init+0x1426>
 801b388:	4620      	mov	r0, r4
 801b38a:	f005 f83d 	bl	8020408 <lv_disp_get_dpi>
 801b38e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801b392:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b396:	4a24      	ldr	r2, [pc, #144]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b398:	fb82 1203 	smull	r1, r2, r2, r3
 801b39c:	17dc      	asrs	r4, r3, #31
 801b39e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b3a2:	b224      	sxth	r4, r4
 801b3a4:	f7fe bb4e 	b.w	8019a44 <lv_theme_default_init+0x147c>
 801b3a8:	4630      	mov	r0, r6
 801b3aa:	f005 f82d 	bl	8020408 <lv_disp_get_dpi>
 801b3ae:	3050      	adds	r0, #80	; 0x50
 801b3b0:	4b1d      	ldr	r3, [pc, #116]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b3b2:	fb83 2300 	smull	r2, r3, r3, r0
 801b3b6:	17c1      	asrs	r1, r0, #31
 801b3b8:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b3bc:	b209      	sxth	r1, r1
 801b3be:	f7fe bb5b 	b.w	8019a78 <lv_theme_default_init+0x14b0>
 801b3c2:	4630      	mov	r0, r6
 801b3c4:	f005 f820 	bl	8020408 <lv_disp_get_dpi>
 801b3c8:	0043      	lsls	r3, r0, #1
 801b3ca:	3350      	adds	r3, #80	; 0x50
 801b3cc:	4a16      	ldr	r2, [pc, #88]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b3ce:	fb82 1203 	smull	r1, r2, r2, r3
 801b3d2:	17d9      	asrs	r1, r3, #31
 801b3d4:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b3d8:	b209      	sxth	r1, r1
 801b3da:	f7fe bb77 	b.w	8019acc <lv_theme_default_init+0x1504>
 801b3de:	4630      	mov	r0, r6
 801b3e0:	f005 f812 	bl	8020408 <lv_disp_get_dpi>
 801b3e4:	3050      	adds	r0, #80	; 0x50
 801b3e6:	4b10      	ldr	r3, [pc, #64]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b3e8:	fb83 2300 	smull	r2, r3, r3, r0
 801b3ec:	17c1      	asrs	r1, r0, #31
 801b3ee:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b3f2:	b209      	sxth	r1, r1
 801b3f4:	f7fe bb7a 	b.w	8019aec <lv_theme_default_init+0x1524>
                                                                                                   2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 801b3f8:	2101      	movs	r1, #1
 801b3fa:	2012      	movs	r0, #18
 801b3fc:	f005 fe82 	bl	8021104 <lv_palette_lighten>
 801b400:	4601      	mov	r1, r0
 801b402:	f7fe bb99 	b.w	8019b38 <lv_theme_default_init+0x1570>
 801b406:	4630      	mov	r0, r6
 801b408:	f004 fffe 	bl	8020408 <lv_disp_get_dpi>
 801b40c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b410:	0043      	lsls	r3, r0, #1
 801b412:	3350      	adds	r3, #80	; 0x50
 801b414:	4a04      	ldr	r2, [pc, #16]	; (801b428 <lv_theme_default_init+0x2e60>)
 801b416:	fb82 1203 	smull	r1, r2, r2, r3
 801b41a:	17d9      	asrs	r1, r3, #31
 801b41c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b420:	b209      	sxth	r1, r1
 801b422:	f7fe bba1 	b.w	8019b68 <lv_theme_default_init+0x15a0>
 801b426:	bf00      	nop
 801b428:	66666667 	.word	0x66666667
 801b42c:	200026c8 	.word	0x200026c8
 801b430:	4620      	mov	r0, r4
 801b432:	f004 ffe9 	bl	8020408 <lv_disp_get_dpi>
 801b436:	0083      	lsls	r3, r0, #2
 801b438:	3350      	adds	r3, #80	; 0x50
 801b43a:	4ace      	ldr	r2, [pc, #824]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b43c:	fb82 1203 	smull	r1, r2, r2, r3
 801b440:	17dc      	asrs	r4, r3, #31
 801b442:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b446:	b224      	sxth	r4, r4
 801b448:	f7fe bba4 	b.w	8019b94 <lv_theme_default_init+0x15cc>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 801b44c:	4bca      	ldr	r3, [pc, #808]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b44e:	68de      	ldr	r6, [r3, #12]
 801b450:	4630      	mov	r0, r6
 801b452:	f004 ffd9 	bl	8020408 <lv_disp_get_dpi>
 801b456:	00c0      	lsls	r0, r0, #3
 801b458:	28ef      	cmp	r0, #239	; 0xef
 801b45a:	dc05      	bgt.n	801b468 <lv_theme_default_init+0x2ea0>
 801b45c:	2101      	movs	r1, #1
 801b45e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801b462:	1049      	asrs	r1, r1, #1
 801b464:	f7fe bbe8 	b.w	8019c38 <lv_theme_default_init+0x1670>
 801b468:	4630      	mov	r0, r6
 801b46a:	f004 ffcd 	bl	8020408 <lv_disp_get_dpi>
 801b46e:	00c0      	lsls	r0, r0, #3
 801b470:	3050      	adds	r0, #80	; 0x50
 801b472:	4bc0      	ldr	r3, [pc, #768]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b474:	fb83 2300 	smull	r2, r3, r3, r0
 801b478:	17c1      	asrs	r1, r0, #31
 801b47a:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b47e:	b209      	sxth	r1, r1
 801b480:	e7ed      	b.n	801b45e <lv_theme_default_init+0x2e96>
 801b482:	4bbd      	ldr	r3, [pc, #756]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b484:	68de      	ldr	r6, [r3, #12]
 801b486:	4630      	mov	r0, r6
 801b488:	f004 ffbe 	bl	8020408 <lv_disp_get_dpi>
 801b48c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b490:	0080      	lsls	r0, r0, #2
 801b492:	28ef      	cmp	r0, #239	; 0xef
 801b494:	dc02      	bgt.n	801b49c <lv_theme_default_init+0x2ed4>
 801b496:	2101      	movs	r1, #1
 801b498:	f7fe bbce 	b.w	8019c38 <lv_theme_default_init+0x1670>
 801b49c:	4630      	mov	r0, r6
 801b49e:	f004 ffb3 	bl	8020408 <lv_disp_get_dpi>
 801b4a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b4a6:	0083      	lsls	r3, r0, #2
 801b4a8:	3350      	adds	r3, #80	; 0x50
 801b4aa:	4ab2      	ldr	r2, [pc, #712]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b4ac:	fb82 1203 	smull	r1, r2, r2, r3
 801b4b0:	17d9      	asrs	r1, r3, #31
 801b4b2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b4b6:	b209      	sxth	r1, r1
 801b4b8:	f7fe bbbe 	b.w	8019c38 <lv_theme_default_init+0x1670>
 801b4bc:	4630      	mov	r0, r6
 801b4be:	f004 ffa3 	bl	8020408 <lv_disp_get_dpi>
 801b4c2:	00c3      	lsls	r3, r0, #3
 801b4c4:	3350      	adds	r3, #80	; 0x50
 801b4c6:	4aab      	ldr	r2, [pc, #684]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b4c8:	fb82 1203 	smull	r1, r2, r2, r3
 801b4cc:	17d9      	asrs	r1, r3, #31
 801b4ce:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b4d2:	b209      	sxth	r1, r1
 801b4d4:	f7fe bbb0 	b.w	8019c38 <lv_theme_default_init+0x1670>
 801b4d8:	4630      	mov	r0, r6
 801b4da:	f004 ff95 	bl	8020408 <lv_disp_get_dpi>
 801b4de:	0043      	lsls	r3, r0, #1
 801b4e0:	3350      	adds	r3, #80	; 0x50
 801b4e2:	4aa4      	ldr	r2, [pc, #656]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b4e4:	fb82 1203 	smull	r1, r2, r2, r3
 801b4e8:	17d9      	asrs	r1, r3, #31
 801b4ea:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b4ee:	b209      	sxth	r1, r1
 801b4f0:	f7fe bbbe 	b.w	8019c70 <lv_theme_default_init+0x16a8>
 801b4f4:	4630      	mov	r0, r6
 801b4f6:	f004 ff87 	bl	8020408 <lv_disp_get_dpi>
 801b4fa:	0043      	lsls	r3, r0, #1
 801b4fc:	3350      	adds	r3, #80	; 0x50
 801b4fe:	4a9d      	ldr	r2, [pc, #628]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b500:	fb82 1203 	smull	r1, r2, r2, r3
 801b504:	17d9      	asrs	r1, r3, #31
 801b506:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b50a:	b209      	sxth	r1, r1
 801b50c:	f7fe bbd9 	b.w	8019cc2 <lv_theme_default_init+0x16fa>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 801b510:	4b99      	ldr	r3, [pc, #612]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b512:	68dc      	ldr	r4, [r3, #12]
 801b514:	4620      	mov	r0, r4
 801b516:	f004 ff77 	bl	8020408 <lv_disp_get_dpi>
 801b51a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b51e:	00c0      	lsls	r0, r0, #3
 801b520:	28ef      	cmp	r0, #239	; 0xef
 801b522:	dc02      	bgt.n	801b52a <lv_theme_default_init+0x2f62>
 801b524:	2401      	movs	r4, #1
 801b526:	f7fe bbec 	b.w	8019d02 <lv_theme_default_init+0x173a>
 801b52a:	4620      	mov	r0, r4
 801b52c:	f004 ff6c 	bl	8020408 <lv_disp_get_dpi>
 801b530:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b534:	00c3      	lsls	r3, r0, #3
 801b536:	3350      	adds	r3, #80	; 0x50
 801b538:	4a8e      	ldr	r2, [pc, #568]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b53a:	fb82 1203 	smull	r1, r2, r2, r3
 801b53e:	17dc      	asrs	r4, r3, #31
 801b540:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b544:	b224      	sxth	r4, r4
 801b546:	f7fe bbdc 	b.w	8019d02 <lv_theme_default_init+0x173a>
 801b54a:	4b8b      	ldr	r3, [pc, #556]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b54c:	68dc      	ldr	r4, [r3, #12]
 801b54e:	4620      	mov	r0, r4
 801b550:	f004 ff5a 	bl	8020408 <lv_disp_get_dpi>
 801b554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b558:	0080      	lsls	r0, r0, #2
 801b55a:	28ef      	cmp	r0, #239	; 0xef
 801b55c:	dc02      	bgt.n	801b564 <lv_theme_default_init+0x2f9c>
 801b55e:	2401      	movs	r4, #1
 801b560:	f7fe bbcf 	b.w	8019d02 <lv_theme_default_init+0x173a>
 801b564:	4620      	mov	r0, r4
 801b566:	f004 ff4f 	bl	8020408 <lv_disp_get_dpi>
 801b56a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b56e:	0083      	lsls	r3, r0, #2
 801b570:	3350      	adds	r3, #80	; 0x50
 801b572:	4a80      	ldr	r2, [pc, #512]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b574:	fb82 1203 	smull	r1, r2, r2, r3
 801b578:	17dc      	asrs	r4, r3, #31
 801b57a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b57e:	b224      	sxth	r4, r4
 801b580:	f7fe bbbf 	b.w	8019d02 <lv_theme_default_init+0x173a>
 801b584:	4620      	mov	r0, r4
 801b586:	f004 ff3f 	bl	8020408 <lv_disp_get_dpi>
 801b58a:	0103      	lsls	r3, r0, #4
 801b58c:	3350      	adds	r3, #80	; 0x50
 801b58e:	4a79      	ldr	r2, [pc, #484]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b590:	fb82 1203 	smull	r1, r2, r2, r3
 801b594:	17dc      	asrs	r4, r3, #31
 801b596:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b59a:	b224      	sxth	r4, r4
 801b59c:	f7fe bbb1 	b.w	8019d02 <lv_theme_default_init+0x173a>
 801b5a0:	4630      	mov	r0, r6
 801b5a2:	f004 ff31 	bl	8020408 <lv_disp_get_dpi>
 801b5a6:	3050      	adds	r0, #80	; 0x50
 801b5a8:	4b72      	ldr	r3, [pc, #456]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b5aa:	fb83 2300 	smull	r2, r3, r3, r0
 801b5ae:	17c1      	asrs	r1, r0, #31
 801b5b0:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b5b4:	b209      	sxth	r1, r1
 801b5b6:	f7fe bbda 	b.w	8019d6e <lv_theme_default_init+0x17a6>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 801b5ba:	4b6f      	ldr	r3, [pc, #444]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b5bc:	68dc      	ldr	r4, [r3, #12]
 801b5be:	4620      	mov	r0, r4
 801b5c0:	f004 ff22 	bl	8020408 <lv_disp_get_dpi>
 801b5c4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b5c8:	0040      	lsls	r0, r0, #1
 801b5ca:	28ef      	cmp	r0, #239	; 0xef
 801b5cc:	dc02      	bgt.n	801b5d4 <lv_theme_default_init+0x300c>
 801b5ce:	2401      	movs	r4, #1
 801b5d0:	f7fe bbf5 	b.w	8019dbe <lv_theme_default_init+0x17f6>
 801b5d4:	4620      	mov	r0, r4
 801b5d6:	f004 ff17 	bl	8020408 <lv_disp_get_dpi>
 801b5da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b5de:	0043      	lsls	r3, r0, #1
 801b5e0:	3350      	adds	r3, #80	; 0x50
 801b5e2:	4a64      	ldr	r2, [pc, #400]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b5e4:	fb82 1203 	smull	r1, r2, r2, r3
 801b5e8:	17dc      	asrs	r4, r3, #31
 801b5ea:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b5ee:	b224      	sxth	r4, r4
 801b5f0:	f7fe bbe5 	b.w	8019dbe <lv_theme_default_init+0x17f6>
 801b5f4:	4b60      	ldr	r3, [pc, #384]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b5f6:	68dc      	ldr	r4, [r3, #12]
 801b5f8:	4620      	mov	r0, r4
 801b5fa:	f004 ff05 	bl	8020408 <lv_disp_get_dpi>
 801b5fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b602:	0080      	lsls	r0, r0, #2
 801b604:	28ef      	cmp	r0, #239	; 0xef
 801b606:	dc02      	bgt.n	801b60e <lv_theme_default_init+0x3046>
 801b608:	2401      	movs	r4, #1
 801b60a:	f7fe bbd8 	b.w	8019dbe <lv_theme_default_init+0x17f6>
 801b60e:	4620      	mov	r0, r4
 801b610:	f004 fefa 	bl	8020408 <lv_disp_get_dpi>
 801b614:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b618:	0083      	lsls	r3, r0, #2
 801b61a:	3350      	adds	r3, #80	; 0x50
 801b61c:	4a55      	ldr	r2, [pc, #340]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b61e:	fb82 1203 	smull	r1, r2, r2, r3
 801b622:	17dc      	asrs	r4, r3, #31
 801b624:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b628:	b224      	sxth	r4, r4
 801b62a:	f7fe bbc8 	b.w	8019dbe <lv_theme_default_init+0x17f6>
 801b62e:	4620      	mov	r0, r4
 801b630:	f004 feea 	bl	8020408 <lv_disp_get_dpi>
 801b634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b638:	0043      	lsls	r3, r0, #1
 801b63a:	3350      	adds	r3, #80	; 0x50
 801b63c:	4a4d      	ldr	r2, [pc, #308]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b63e:	fb82 1203 	smull	r1, r2, r2, r3
 801b642:	17dc      	asrs	r4, r3, #31
 801b644:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b648:	b224      	sxth	r4, r4
 801b64a:	f7fe bbb8 	b.w	8019dbe <lv_theme_default_init+0x17f6>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 801b64e:	4b4a      	ldr	r3, [pc, #296]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b650:	68de      	ldr	r6, [r3, #12]
 801b652:	4630      	mov	r0, r6
 801b654:	f004 fed8 	bl	8020408 <lv_disp_get_dpi>
 801b658:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b65c:	0040      	lsls	r0, r0, #1
 801b65e:	28ef      	cmp	r0, #239	; 0xef
 801b660:	dc02      	bgt.n	801b668 <lv_theme_default_init+0x30a0>
 801b662:	2101      	movs	r1, #1
 801b664:	f7fe bbd3 	b.w	8019e0e <lv_theme_default_init+0x1846>
 801b668:	4630      	mov	r0, r6
 801b66a:	f004 fecd 	bl	8020408 <lv_disp_get_dpi>
 801b66e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b672:	0043      	lsls	r3, r0, #1
 801b674:	3350      	adds	r3, #80	; 0x50
 801b676:	4a3f      	ldr	r2, [pc, #252]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b678:	fb82 1203 	smull	r1, r2, r2, r3
 801b67c:	17d9      	asrs	r1, r3, #31
 801b67e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b682:	b209      	sxth	r1, r1
 801b684:	f7fe bbc3 	b.w	8019e0e <lv_theme_default_init+0x1846>
 801b688:	4b3b      	ldr	r3, [pc, #236]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b68a:	68de      	ldr	r6, [r3, #12]
 801b68c:	4630      	mov	r0, r6
 801b68e:	f004 febb 	bl	8020408 <lv_disp_get_dpi>
 801b692:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b696:	0080      	lsls	r0, r0, #2
 801b698:	28ef      	cmp	r0, #239	; 0xef
 801b69a:	dc02      	bgt.n	801b6a2 <lv_theme_default_init+0x30da>
 801b69c:	2101      	movs	r1, #1
 801b69e:	f7fe bbb6 	b.w	8019e0e <lv_theme_default_init+0x1846>
 801b6a2:	4630      	mov	r0, r6
 801b6a4:	f004 feb0 	bl	8020408 <lv_disp_get_dpi>
 801b6a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b6ac:	0083      	lsls	r3, r0, #2
 801b6ae:	3350      	adds	r3, #80	; 0x50
 801b6b0:	4a30      	ldr	r2, [pc, #192]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b6b2:	fb82 1203 	smull	r1, r2, r2, r3
 801b6b6:	17d9      	asrs	r1, r3, #31
 801b6b8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b6bc:	b209      	sxth	r1, r1
 801b6be:	f7fe bba6 	b.w	8019e0e <lv_theme_default_init+0x1846>
 801b6c2:	4630      	mov	r0, r6
 801b6c4:	f004 fea0 	bl	8020408 <lv_disp_get_dpi>
 801b6c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b6cc:	0043      	lsls	r3, r0, #1
 801b6ce:	3350      	adds	r3, #80	; 0x50
 801b6d0:	4a28      	ldr	r2, [pc, #160]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b6d2:	fb82 1203 	smull	r1, r2, r2, r3
 801b6d6:	17d9      	asrs	r1, r3, #31
 801b6d8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b6dc:	b209      	sxth	r1, r1
 801b6de:	f7fe bb96 	b.w	8019e0e <lv_theme_default_init+0x1846>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 801b6e2:	4b25      	ldr	r3, [pc, #148]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b6e4:	68de      	ldr	r6, [r3, #12]
 801b6e6:	4630      	mov	r0, r6
 801b6e8:	f004 fe8e 	bl	8020408 <lv_disp_get_dpi>
 801b6ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b6f0:	00c0      	lsls	r0, r0, #3
 801b6f2:	28ef      	cmp	r0, #239	; 0xef
 801b6f4:	dc02      	bgt.n	801b6fc <lv_theme_default_init+0x3134>
 801b6f6:	2101      	movs	r1, #1
 801b6f8:	f7fe bba7 	b.w	8019e4a <lv_theme_default_init+0x1882>
 801b6fc:	4630      	mov	r0, r6
 801b6fe:	f004 fe83 	bl	8020408 <lv_disp_get_dpi>
 801b702:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b706:	00c3      	lsls	r3, r0, #3
 801b708:	3350      	adds	r3, #80	; 0x50
 801b70a:	4a1a      	ldr	r2, [pc, #104]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b70c:	fb82 1203 	smull	r1, r2, r2, r3
 801b710:	17d9      	asrs	r1, r3, #31
 801b712:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b716:	b209      	sxth	r1, r1
 801b718:	f7fe bb97 	b.w	8019e4a <lv_theme_default_init+0x1882>
 801b71c:	4b16      	ldr	r3, [pc, #88]	; (801b778 <lv_theme_default_init+0x31b0>)
 801b71e:	68de      	ldr	r6, [r3, #12]
 801b720:	4630      	mov	r0, r6
 801b722:	f004 fe71 	bl	8020408 <lv_disp_get_dpi>
 801b726:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b72a:	0080      	lsls	r0, r0, #2
 801b72c:	28ef      	cmp	r0, #239	; 0xef
 801b72e:	dc02      	bgt.n	801b736 <lv_theme_default_init+0x316e>
 801b730:	2101      	movs	r1, #1
 801b732:	f7fe bb8a 	b.w	8019e4a <lv_theme_default_init+0x1882>
 801b736:	4630      	mov	r0, r6
 801b738:	f004 fe66 	bl	8020408 <lv_disp_get_dpi>
 801b73c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b740:	0083      	lsls	r3, r0, #2
 801b742:	3350      	adds	r3, #80	; 0x50
 801b744:	4a0b      	ldr	r2, [pc, #44]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b746:	fb82 1203 	smull	r1, r2, r2, r3
 801b74a:	17d9      	asrs	r1, r3, #31
 801b74c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b750:	b209      	sxth	r1, r1
 801b752:	f7fe bb7a 	b.w	8019e4a <lv_theme_default_init+0x1882>
 801b756:	4630      	mov	r0, r6
 801b758:	f004 fe56 	bl	8020408 <lv_disp_get_dpi>
 801b75c:	0103      	lsls	r3, r0, #4
 801b75e:	3350      	adds	r3, #80	; 0x50
 801b760:	4a04      	ldr	r2, [pc, #16]	; (801b774 <lv_theme_default_init+0x31ac>)
 801b762:	fb82 1203 	smull	r1, r2, r2, r3
 801b766:	17d9      	asrs	r1, r3, #31
 801b768:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b76c:	b209      	sxth	r1, r1
 801b76e:	f7fe bb6c 	b.w	8019e4a <lv_theme_default_init+0x1882>
 801b772:	bf00      	nop
 801b774:	66666667 	.word	0x66666667
 801b778:	200026c8 	.word	0x200026c8
 801b77c:	4630      	mov	r0, r6
 801b77e:	f004 fe43 	bl	8020408 <lv_disp_get_dpi>
 801b782:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801b786:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b78a:	4a0c      	ldr	r2, [pc, #48]	; (801b7bc <lv_theme_default_init+0x31f4>)
 801b78c:	fb82 1203 	smull	r1, r2, r2, r3
 801b790:	17d9      	asrs	r1, r3, #31
 801b792:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b796:	b209      	sxth	r1, r1
 801b798:	f7fe bb8c 	b.w	8019eb4 <lv_theme_default_init+0x18ec>
 801b79c:	4630      	mov	r0, r6
 801b79e:	f004 fe33 	bl	8020408 <lv_disp_get_dpi>
 801b7a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b7a6:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b7aa:	4a04      	ldr	r2, [pc, #16]	; (801b7bc <lv_theme_default_init+0x31f4>)
 801b7ac:	fb82 1203 	smull	r1, r2, r2, r3
 801b7b0:	17d9      	asrs	r1, r3, #31
 801b7b2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b7b6:	b209      	sxth	r1, r1
 801b7b8:	f7fe bb95 	b.w	8019ee6 <lv_theme_default_init+0x191e>
 801b7bc:	66666667 	.word	0x66666667

0801b7c0 <lv_theme_default_get>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 801b7c0:	4b03      	ldr	r3, [pc, #12]	; (801b7d0 <lv_theme_default_get+0x10>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
    return (lv_theme_t *)&theme;
 801b7c4:	2b00      	cmp	r3, #0
}
 801b7c6:	4803      	ldr	r0, [pc, #12]	; (801b7d4 <lv_theme_default_get+0x14>)
 801b7c8:	bf08      	it	eq
 801b7ca:	4618      	moveq	r0, r3
 801b7cc:	4770      	bx	lr
 801b7ce:	bf00      	nop
 801b7d0:	200028dc 	.word	0x200028dc
 801b7d4:	200026c8 	.word	0x200026c8

0801b7d8 <lv_theme_default_is_inited>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 801b7d8:	4b02      	ldr	r3, [pc, #8]	; (801b7e4 <lv_theme_default_is_inited+0xc>)
 801b7da:	6818      	ldr	r0, [r3, #0]
}
 801b7dc:	3800      	subs	r0, #0
 801b7de:	bf18      	it	ne
 801b7e0:	2001      	movne	r0, #1
 801b7e2:	4770      	bx	lr
 801b7e4:	200028dc 	.word	0x200028dc

0801b7e8 <invalidate_point>:
}

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 801b7e8:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 801b7ec:	428b      	cmp	r3, r1
 801b7ee:	d800      	bhi.n	801b7f2 <invalidate_point+0xa>
 801b7f0:	4770      	bx	lr
{
 801b7f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b7f6:	b082      	sub	sp, #8
 801b7f8:	4604      	mov	r4, r0
 801b7fa:	460d      	mov	r5, r1

    lv_coord_t w  = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801b7fc:	f7ec f981 	bl	8007b02 <lv_obj_get_content_width>
 801b800:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801b804:	fb00 f303 	mul.w	r3, r0, r3
 801b808:	f343 260f 	sbfx	r6, r3, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 801b80c:	4620      	mov	r0, r4
 801b80e:	f7ed fdcf 	bl	80093b0 <lv_obj_get_scroll_left>
 801b812:	4607      	mov	r7, r0

    /*In shift mode the whole chart changes so the whole object*/
    if(chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 801b814:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801b818:	f013 0f08 	tst.w	r3, #8
 801b81c:	d00b      	beq.n	801b836 <invalidate_point+0x4e>
        lv_obj_invalidate(obj);
        return;
    }

    if(chart->type == LV_CHART_TYPE_LINE) {
 801b81e:	f003 0307 	and.w	r3, r3, #7
 801b822:	2b01      	cmp	r3, #1
 801b824:	d00b      	beq.n	801b83e <invalidate_point+0x56>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
            lv_obj_invalidate_area(obj, &coords);
        }
    }
    else if(chart->type == LV_CHART_TYPE_BAR) {
 801b826:	2b02      	cmp	r3, #2
 801b828:	d06a      	beq.n	801b900 <invalidate_point+0x118>
        col_a.x1 -= block_gap;

        lv_obj_invalidate_area(obj, &col_a);
    }
    else {
        lv_obj_invalidate(obj);
 801b82a:	4620      	mov	r0, r4
 801b82c:	f7ec fba4 	bl	8007f78 <lv_obj_invalidate>
    }
}
 801b830:	b002      	add	sp, #8
 801b832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_obj_invalidate(obj);
 801b836:	4620      	mov	r0, r4
 801b838:	f7ec fb9e 	bl	8007f78 <lv_obj_invalidate>
        return;
 801b83c:	e7f8      	b.n	801b830 <invalidate_point+0x48>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801b83e:	2232      	movs	r2, #50	; 0x32
 801b840:	2100      	movs	r1, #0
 801b842:	4620      	mov	r0, r4
 801b844:	f7ee ffd0 	bl	800a7e8 <lv_obj_get_style_prop>
 801b848:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b84a:	2212      	movs	r2, #18
 801b84c:	2100      	movs	r1, #0
 801b84e:	4620      	mov	r0, r4
 801b850:	f7ee ffca 	bl	800a7e8 <lv_obj_get_style_prop>
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 801b854:	4440      	add	r0, r8
 801b856:	8aa3      	ldrh	r3, [r4, #20]
 801b858:	4418      	add	r0, r3
 801b85a:	1bc7      	subs	r7, r0, r7
 801b85c:	b2bf      	uxth	r7, r7
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801b85e:	2249      	movs	r2, #73	; 0x49
 801b860:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b864:	4620      	mov	r0, r4
 801b866:	f7ee ffbf 	bl	800a7e8 <lv_obj_get_style_prop>
 801b86a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801b86c:	2201      	movs	r2, #1
 801b86e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b872:	4620      	mov	r0, r4
 801b874:	f7ee ffb8 	bl	800a7e8 <lv_obj_get_style_prop>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 801b878:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
    dest->y2 = src->y2;
 801b87c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        coords.y1 -= line_width + point_w;
 801b880:	4480      	add	r8, r0
 801b882:	fa1f f888 	uxth.w	r8, r8
 801b886:	eba2 0208 	sub.w	r2, r2, r8
 801b88a:	f8ad 2002 	strh.w	r2, [sp, #2]
        coords.y2 += line_width + point_w;
 801b88e:	4443      	add	r3, r8
 801b890:	f8ad 3006 	strh.w	r3, [sp, #6]
        if(i < chart->point_cnt - 1) {
 801b894:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801b898:	3b01      	subs	r3, #1
 801b89a:	429d      	cmp	r5, r3
 801b89c:	db1a      	blt.n	801b8d4 <invalidate_point+0xec>
        if(i > 0) {
 801b89e:	2d00      	cmp	r5, #0
 801b8a0:	d0c6      	beq.n	801b830 <invalidate_point+0x48>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801b8a2:	3d01      	subs	r5, #1
 801b8a4:	fb06 f505 	mul.w	r5, r6, r5
 801b8a8:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801b8ac:	3b01      	subs	r3, #1
 801b8ae:	fb95 f2f3 	sdiv	r2, r5, r3
 801b8b2:	eba7 0108 	sub.w	r1, r7, r8
 801b8b6:	440a      	add	r2, r1
 801b8b8:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801b8bc:	442e      	add	r6, r5
 801b8be:	fb96 f6f3 	sdiv	r6, r6, r3
 801b8c2:	4447      	add	r7, r8
 801b8c4:	4437      	add	r7, r6
 801b8c6:	f8ad 7004 	strh.w	r7, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 801b8ca:	4669      	mov	r1, sp
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	f7ec fb2f 	bl	8007f30 <lv_obj_invalidate_area>
 801b8d2:	e7ad      	b.n	801b830 <invalidate_point+0x48>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801b8d4:	fb06 f205 	mul.w	r2, r6, r5
 801b8d8:	fb92 f1f3 	sdiv	r1, r2, r3
 801b8dc:	eba7 0008 	sub.w	r0, r7, r8
 801b8e0:	4401      	add	r1, r0
 801b8e2:	f8ad 1000 	strh.w	r1, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801b8e6:	4432      	add	r2, r6
 801b8e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8ec:	eb07 0208 	add.w	r2, r7, r8
 801b8f0:	4413      	add	r3, r2
 801b8f2:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 801b8f6:	4669      	mov	r1, sp
 801b8f8:	4620      	mov	r0, r4
 801b8fa:	f7ec fb19 	bl	8007f30 <lv_obj_invalidate_area>
 801b8fe:	e7ce      	b.n	801b89e <invalidate_point+0xb6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801b900:	2215      	movs	r2, #21
 801b902:	2100      	movs	r1, #0
 801b904:	4620      	mov	r0, r4
 801b906:	f7ee ff6f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801b90a:	b200      	sxth	r0, r0
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801b90c:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801b910:	fb00 f303 	mul.w	r3, r0, r3
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801b914:	ea4f 2823 	mov.w	r8, r3, asr #8
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 801b918:	eb06 2623 	add.w	r6, r6, r3, asr #8
 801b91c:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801b920:	fb96 f6f3 	sdiv	r6, r6, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801b924:	2232      	movs	r2, #50	; 0x32
 801b926:	2100      	movs	r1, #0
 801b928:	4620      	mov	r0, r4
 801b92a:	f7ee ff5d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801b92e:	fa0f fa80 	sxth.w	sl, r0
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 801b932:	b2b6      	uxth	r6, r6
 801b934:	fb06 f505 	mul.w	r5, r6, r5
 801b938:	b2ad      	uxth	r5, r5
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801b93a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801b93e:	44ca      	add	sl, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b940:	2212      	movs	r2, #18
 801b942:	2100      	movs	r1, #0
 801b944:	4620      	mov	r0, r4
 801b946:	f7ee ff4f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801b94a:	fa0f f980 	sxth.w	r9, r0
        lv_obj_get_coords(obj, &col_a);
 801b94e:	4669      	mov	r1, sp
 801b950:	4620      	mov	r0, r4
 801b952:	f7ec f86c 	bl	8007a2e <lv_obj_get_coords>
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801b956:	44d1      	add	r9, sl
        col_a.x1 = x_act - scroll_left;
 801b958:	eba9 0707 	sub.w	r7, r9, r7
 801b95c:	443d      	add	r5, r7
 801b95e:	b2ad      	uxth	r5, r5
        col_a.x2 = col_a.x1 + block_w;
 801b960:	442e      	add	r6, r5
 801b962:	f8ad 6004 	strh.w	r6, [sp, #4]
        col_a.x1 -= block_gap;
 801b966:	eba5 0508 	sub.w	r5, r5, r8
 801b96a:	f8ad 5000 	strh.w	r5, [sp]
        lv_obj_invalidate_area(obj, &col_a);
 801b96e:	4669      	mov	r1, sp
 801b970:	4620      	mov	r0, r4
 801b972:	f7ec fadd 	bl	8007f30 <lv_obj_invalidate_area>
 801b976:	e75b      	b.n	801b830 <invalidate_point+0x48>

0801b978 <lv_chart_destructor>:
{
 801b978:	b570      	push	{r4, r5, r6, lr}
 801b97a:	460d      	mov	r5, r1
    while(chart->series_ll.head) {
 801b97c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801b97e:	b1bb      	cbz	r3, 801b9b0 <lv_chart_destructor+0x38>
        ser = _lv_ll_get_head(&chart->series_ll);
 801b980:	f101 0624 	add.w	r6, r1, #36	; 0x24
 801b984:	e008      	b.n	801b998 <lv_chart_destructor+0x20>
        _lv_ll_remove(&chart->series_ll, ser);
 801b986:	4621      	mov	r1, r4
 801b988:	4630      	mov	r0, r6
 801b98a:	f005 fdf4 	bl	8021576 <_lv_ll_remove>
        lv_mem_free(ser);
 801b98e:	4620      	mov	r0, r4
 801b990:	f005 ff88 	bl	80218a4 <lv_mem_free>
    while(chart->series_ll.head) {
 801b994:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801b996:	b15b      	cbz	r3, 801b9b0 <lv_chart_destructor+0x38>
        ser = _lv_ll_get_head(&chart->series_ll);
 801b998:	4630      	mov	r0, r6
 801b99a:	f005 fe2f 	bl	80215fc <_lv_ll_get_head>
 801b99e:	4604      	mov	r4, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 801b9a0:	7b03      	ldrb	r3, [r0, #12]
 801b9a2:	f013 0f04 	tst.w	r3, #4
 801b9a6:	d1ee      	bne.n	801b986 <lv_chart_destructor+0xe>
 801b9a8:	6840      	ldr	r0, [r0, #4]
 801b9aa:	f005 ff7b 	bl	80218a4 <lv_mem_free>
 801b9ae:	e7ea      	b.n	801b986 <lv_chart_destructor+0xe>
    _lv_ll_clear(&chart->series_ll);
 801b9b0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801b9b4:	f005 fe0e 	bl	80215d4 <_lv_ll_clear>
    while(chart->cursor_ll.head) {
 801b9b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b9ba:	b17b      	cbz	r3, 801b9dc <lv_chart_destructor+0x64>
        cur = _lv_ll_get_head(&chart->cursor_ll);
 801b9bc:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801b9c0:	4630      	mov	r0, r6
 801b9c2:	f005 fe1b 	bl	80215fc <_lv_ll_get_head>
 801b9c6:	4604      	mov	r4, r0
        _lv_ll_remove(&chart->cursor_ll, cur);
 801b9c8:	4601      	mov	r1, r0
 801b9ca:	4630      	mov	r0, r6
 801b9cc:	f005 fdd3 	bl	8021576 <_lv_ll_remove>
        lv_mem_free(cur);
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f005 ff67 	bl	80218a4 <lv_mem_free>
    while(chart->cursor_ll.head) {
 801b9d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d1f1      	bne.n	801b9c0 <lv_chart_destructor+0x48>
    _lv_ll_clear(&chart->cursor_ll);
 801b9dc:	f105 0030 	add.w	r0, r5, #48	; 0x30
 801b9e0:	f005 fdf8 	bl	80215d4 <_lv_ll_clear>
}
 801b9e4:	bd70      	pop	{r4, r5, r6, pc}

0801b9e6 <lv_chart_constructor>:
{
 801b9e6:	b510      	push	{r4, lr}
 801b9e8:	460c      	mov	r4, r1
    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 801b9ea:	2110      	movs	r1, #16
 801b9ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801b9f0:	f005 fd7b 	bl	80214ea <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 801b9f4:	2110      	movs	r1, #16
 801b9f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801b9fa:	f005 fd76 	bl	80214ea <_lv_ll_init>
    chart->ymin[0] = 0;
 801b9fe:	2200      	movs	r2, #0
 801ba00:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
    chart->xmin[0] = 0;
 801ba04:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
    chart->ymin[1] = 0;
 801ba08:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e
    chart->xmin[1] = 0;
 801ba0c:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
    chart->ymax[0] = 100;
 801ba10:	2364      	movs	r3, #100	; 0x64
 801ba12:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    chart->xmax[0] = 100;
 801ba16:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    chart->ymax[1] = 100;
 801ba1a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
    chart->xmax[1] = 100;
 801ba1e:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    chart->hdiv_cnt    = LV_CHART_HDIV_DEF;
 801ba22:	2303      	movs	r3, #3
 801ba24:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 801ba28:	2305      	movs	r3, #5
 801ba2a:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    chart->point_cnt   = LV_CHART_POINT_CNT_DEF;
 801ba2e:	230a      	movs	r3, #10
 801ba30:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    chart->pressed_point_id  = LV_CHART_POINT_NONE;
 801ba34:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ba38:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    chart->type        = LV_CHART_TYPE_LINE;
 801ba3c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801ba40:	2101      	movs	r1, #1
 801ba42:	f361 0302 	bfi	r3, r1, #0, #3
    chart->update_mode = LV_CHART_UPDATE_MODE_SHIFT;
 801ba46:	f362 03c3 	bfi	r3, r2, #3, #1
 801ba4a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 801ba4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ba52:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    chart->zoom_y      = LV_IMG_ZOOM_NONE;
 801ba56:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
}
 801ba5a:	bd10      	pop	{r4, pc}

0801ba5c <lv_chart_get_point_pos_by_id>:
    LV_ASSERT_NULL(obj);
 801ba5c:	b188      	cbz	r0, 801ba82 <lv_chart_get_point_pos_by_id+0x26>
{
 801ba5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba62:	b087      	sub	sp, #28
 801ba64:	460d      	mov	r5, r1
 801ba66:	4617      	mov	r7, r2
 801ba68:	461c      	mov	r4, r3
 801ba6a:	4606      	mov	r6, r0
    LV_ASSERT_NULL(ser);
 801ba6c:	b151      	cbz	r1, 801ba84 <lv_chart_get_point_pos_by_id+0x28>
    if(id >= chart->point_cnt) {
 801ba6e:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 801ba72:	4293      	cmp	r3, r2
 801ba74:	d807      	bhi.n	801ba86 <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 801ba76:	2300      	movs	r3, #0
 801ba78:	8023      	strh	r3, [r4, #0]
        p_out->y = 0;
 801ba7a:	8063      	strh	r3, [r4, #2]
}
 801ba7c:	b007      	add	sp, #28
 801ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LV_ASSERT_NULL(obj);
 801ba82:	e7fe      	b.n	801ba82 <lv_chart_get_point_pos_by_id+0x26>
    LV_ASSERT_NULL(ser);
 801ba84:	e7fe      	b.n	801ba84 <lv_chart_get_point_pos_by_id+0x28>
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801ba86:	f7ec f83c 	bl	8007b02 <lv_obj_get_content_width>
 801ba8a:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 801ba8e:	fb00 f303 	mul.w	r3, r0, r3
 801ba92:	f343 280f 	sbfx	r8, r3, #8, #16
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801ba96:	4630      	mov	r0, r6
 801ba98:	f7ec f850 	bl	8007b3c <lv_obj_get_content_height>
 801ba9c:	f8b6 9086 	ldrh.w	r9, [r6, #134]	; 0x86
 801baa0:	fb00 f909 	mul.w	r9, r0, r9
 801baa4:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801baa8:	f349 290f 	sbfx	r9, r9, #8, #16
    if(chart->type == LV_CHART_TYPE_LINE) {
 801baac:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
 801bab0:	f003 0307 	and.w	r3, r3, #7
 801bab4:	2b01      	cmp	r3, #1
 801bab6:	d040      	beq.n	801bb3a <lv_chart_get_point_pos_by_id+0xde>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 801bab8:	2b03      	cmp	r3, #3
 801baba:	d047      	beq.n	801bb4c <lv_chart_get_point_pos_by_id+0xf0>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 801babc:	2b02      	cmp	r3, #2
 801babe:	d058      	beq.n	801bb72 <lv_chart_get_point_pos_by_id+0x116>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bac0:	2232      	movs	r2, #50	; 0x32
 801bac2:	2100      	movs	r1, #0
 801bac4:	4630      	mov	r0, r6
 801bac6:	f7ee fe8f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801baca:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bace:	2212      	movs	r2, #18
 801bad0:	2100      	movs	r1, #0
 801bad2:	4630      	mov	r0, r6
 801bad4:	f7ee fe88 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bad8:	b203      	sxth	r3, r0
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801bada:	4443      	add	r3, r8
 801badc:	8822      	ldrh	r2, [r4, #0]
 801bade:	4413      	add	r3, r2
 801bae0:	8023      	strh	r3, [r4, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 801bae2:	4630      	mov	r0, r6
 801bae4:	f7ed fc64 	bl	80093b0 <lv_obj_get_scroll_left>
 801bae8:	8823      	ldrh	r3, [r4, #0]
 801baea:	1a1b      	subs	r3, r3, r0
 801baec:	8023      	strh	r3, [r4, #0]
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 801baee:	7b2a      	ldrb	r2, [r5, #12]
 801baf0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801baf4:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 801baf8:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 801bafc:	686b      	ldr	r3, [r5, #4]
 801bafe:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 801bb02:	1a5b      	subs	r3, r3, r1
 801bb04:	fb09 f303 	mul.w	r3, r9, r3
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801bb08:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
 801bb0c:	1a52      	subs	r2, r2, r1
 801bb0e:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - temp_y;
 801bb12:	ebaa 0303 	sub.w	r3, sl, r3
 801bb16:	8063      	strh	r3, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bb18:	2210      	movs	r2, #16
 801bb1a:	2100      	movs	r1, #0
 801bb1c:	4630      	mov	r0, r6
 801bb1e:	f7ee fe63 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bb22:	b203      	sxth	r3, r0
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801bb24:	4443      	add	r3, r8
 801bb26:	8862      	ldrh	r2, [r4, #2]
 801bb28:	4413      	add	r3, r2
 801bb2a:	8063      	strh	r3, [r4, #2]
    p_out->y -= lv_obj_get_scroll_top(obj);
 801bb2c:	4630      	mov	r0, r6
 801bb2e:	f7ed fbcd 	bl	80092cc <lv_obj_get_scroll_top>
 801bb32:	8863      	ldrh	r3, [r4, #2]
 801bb34:	1a1b      	subs	r3, r3, r0
 801bb36:	8063      	strh	r3, [r4, #2]
 801bb38:	e7a0      	b.n	801ba7c <lv_chart_get_point_pos_by_id+0x20>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 801bb3a:	fb07 f308 	mul.w	r3, r7, r8
 801bb3e:	f8b6 2082 	ldrh.w	r2, [r6, #130]	; 0x82
 801bb42:	3a01      	subs	r2, #1
 801bb44:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb48:	8023      	strh	r3, [r4, #0]
 801bb4a:	e7b9      	b.n	801bac0 <lv_chart_get_point_pos_by_id+0x64>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801bb4c:	7b29      	ldrb	r1, [r5, #12]
 801bb4e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 801bb52:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 801bb56:	682b      	ldr	r3, [r5, #0]
 801bb58:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 801bb5c:	f8cd 8000 	str.w	r8, [sp]
 801bb60:	2300      	movs	r3, #0
 801bb62:	f9b1 2078 	ldrsh.w	r2, [r1, #120]	; 0x78
 801bb66:	f9b1 1074 	ldrsh.w	r1, [r1, #116]	; 0x74
 801bb6a:	f005 fe4d 	bl	8021808 <lv_map>
 801bb6e:	8020      	strh	r0, [r4, #0]
 801bb70:	e7a6      	b.n	801bac0 <lv_chart_get_point_pos_by_id+0x64>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 801bb72:	f106 0324 	add.w	r3, r6, #36	; 0x24
 801bb76:	9303      	str	r3, [sp, #12]
 801bb78:	4618      	mov	r0, r3
 801bb7a:	f005 fd4e 	bl	802161a <_lv_ll_get_len>
 801bb7e:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bb80:	2215      	movs	r2, #21
 801bb82:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801bb86:	4630      	mov	r0, r6
 801bb88:	f7ee fe2e 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bb8c:	b202      	sxth	r2, r0
                                                                LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 801bb8e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 801bb92:	fb02 f303 	mul.w	r3, r2, r3
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801bb96:	121b      	asrs	r3, r3, #8
 801bb98:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bb9a:	2215      	movs	r2, #21
 801bb9c:	2100      	movs	r1, #0
 801bb9e:	4630      	mov	r0, r6
 801bba0:	f7ee fe22 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bba4:	b201      	sxth	r1, r0
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801bba6:	f8b6 2082 	ldrh.w	r2, [r6, #130]	; 0x82
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801bbaa:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 801bbae:	fb01 f303 	mul.w	r3, r1, r3
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801bbb2:	121b      	asrs	r3, r3, #8
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801bbb4:	1e51      	subs	r1, r2, #1
 801bbb6:	fb01 8313 	mls	r3, r1, r3, r8
 801bbba:	fb93 f3f2 	sdiv	r3, r3, r2
        lv_coord_t col_w = block_w / ser_cnt;
 801bbbe:	b21b      	sxth	r3, r3
 801bbc0:	fbb3 fbfb 	udiv	fp, r3, fp
 801bbc4:	fa0f f18b 	sxth.w	r1, fp
 801bbc8:	9105      	str	r1, [sp, #20]
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 801bbca:	fb08 f307 	mul.w	r3, r8, r7
 801bbce:	fb93 f3f2 	sdiv	r3, r3, r2
 801bbd2:	8023      	strh	r3, [r4, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 801bbd4:	9803      	ldr	r0, [sp, #12]
 801bbd6:	f005 fd15 	bl	8021604 <_lv_ll_get_tail>
 801bbda:	4601      	mov	r1, r0
 801bbdc:	b168      	cbz	r0, 801bbfa <lv_chart_get_point_pos_by_id+0x19e>
            if(ser_i == ser) break;
 801bbde:	4285      	cmp	r5, r0
 801bbe0:	d00b      	beq.n	801bbfa <lv_chart_get_point_pos_by_id+0x19e>
 801bbe2:	f8dd 800c 	ldr.w	r8, [sp, #12]
            p_out->x += col_w;
 801bbe6:	8823      	ldrh	r3, [r4, #0]
 801bbe8:	445b      	add	r3, fp
 801bbea:	8023      	strh	r3, [r4, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 801bbec:	4640      	mov	r0, r8
 801bbee:	f005 fd11 	bl	8021614 <_lv_ll_get_prev>
 801bbf2:	4601      	mov	r1, r0
 801bbf4:	b108      	cbz	r0, 801bbfa <lv_chart_get_point_pos_by_id+0x19e>
            if(ser_i == ser) break;
 801bbf6:	428d      	cmp	r5, r1
 801bbf8:	d1f5      	bne.n	801bbe6 <lv_chart_get_point_pos_by_id+0x18a>
        p_out->x += (col_w - ser_gap) / 2;
 801bbfa:	9b05      	ldr	r3, [sp, #20]
 801bbfc:	9a04      	ldr	r2, [sp, #16]
 801bbfe:	1a9b      	subs	r3, r3, r2
 801bc00:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801bc04:	8822      	ldrh	r2, [r4, #0]
 801bc06:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801bc0a:	8023      	strh	r3, [r4, #0]
 801bc0c:	e758      	b.n	801bac0 <lv_chart_get_point_pos_by_id+0x64>

0801bc0e <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t *) obj;
    switch(axis) {
 801bc0e:	2904      	cmp	r1, #4
 801bc10:	d80c      	bhi.n	801bc2c <get_tick_gsc+0x1e>
 801bc12:	e8df f001 	tbb	[pc, r1]
 801bc16:	0703      	.short	0x0703
 801bc18:	0b05      	.short	0x0b05
 801bc1a:	09          	.byte	0x09
 801bc1b:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y:
            return &chart->tick[0];
 801bc1c:	303c      	adds	r0, #60	; 0x3c
 801bc1e:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X:
            return &chart->tick[1];
 801bc20:	3048      	adds	r0, #72	; 0x48
 801bc22:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y:
            return &chart->tick[2];
 801bc24:	3054      	adds	r0, #84	; 0x54
 801bc26:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X:
            return &chart->tick[3];
 801bc28:	3060      	adds	r0, #96	; 0x60
 801bc2a:	4770      	bx	lr
    switch(axis) {
 801bc2c:	2000      	movs	r0, #0
        default:
            return NULL;
    }
}
 801bc2e:	4770      	bx	lr

0801bc30 <draw_y_ticks>:
{
 801bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc34:	b0b1      	sub	sp, #196	; 0xc4
 801bc36:	4604      	mov	r4, r0
 801bc38:	9107      	str	r1, [sp, #28]
 801bc3a:	9205      	str	r2, [sp, #20]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 801bc3c:	4611      	mov	r1, r2
 801bc3e:	f7ff ffe6 	bl	801bc0e <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 801bc42:	8903      	ldrh	r3, [r0, #8]
 801bc44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801bc48:	2b01      	cmp	r3, #1
 801bc4a:	f240 8177 	bls.w	801bf3c <draw_y_ticks+0x30c>
 801bc4e:	4605      	mov	r5, r0
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 801bc50:	f990 3009 	ldrsb.w	r3, [r0, #9]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	db03      	blt.n	801bc60 <draw_y_ticks+0x30>
 801bc58:	6803      	ldr	r3, [r0, #0]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	f000 816e 	beq.w	801bf3c <draw_y_ticks+0x30c>
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_Y ? 0 : 1;
 801bc60:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801bc64:	f1b9 0600 	subs.w	r6, r9, #0
 801bc68:	bf18      	it	ne
 801bc6a:	2601      	movne	r6, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bc6c:	2232      	movs	r2, #50	; 0x32
 801bc6e:	2100      	movs	r1, #0
 801bc70:	4620      	mov	r0, r4
 801bc72:	f7ee fdb9 	bl	800a7e8 <lv_obj_get_style_prop>
 801bc76:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801bc78:	2210      	movs	r2, #16
 801bc7a:	2100      	movs	r1, #0
 801bc7c:	4620      	mov	r0, r4
 801bc7e:	f7ee fdb3 	bl	800a7e8 <lv_obj_get_style_prop>
 801bc82:	4607      	mov	r7, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801bc84:	4620      	mov	r0, r4
 801bc86:	f7eb ff59 	bl	8007b3c <lv_obj_get_content_height>
 801bc8a:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 801bc8e:	fb00 f303 	mul.w	r3, r0, r3
 801bc92:	f343 230f 	sbfx	r3, r3, #8, #16
 801bc96:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 801bc98:	4447      	add	r7, r8
 801bc9a:	8ae3      	ldrh	r3, [r4, #22]
 801bc9c:	441f      	add	r7, r3
 801bc9e:	b2bf      	uxth	r7, r7
 801bca0:	4620      	mov	r0, r4
 801bca2:	f7ed fb13 	bl	80092cc <lv_obj_get_scroll_top>
 801bca6:	1a3f      	subs	r7, r7, r0
 801bca8:	fa1f fa87 	uxth.w	sl, r7
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 801bcac:	464b      	mov	r3, r9
 801bcae:	2b00      	cmp	r3, #0
 801bcb0:	d157      	bne.n	801bd62 <draw_y_ticks+0x132>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bcb2:	2212      	movs	r2, #18
 801bcb4:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801bcb8:	4620      	mov	r0, r4
 801bcba:	f7ee fd95 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bcbe:	b203      	sxth	r3, r0
 801bcc0:	9308      	str	r3, [sp, #32]
        x_ofs = obj->coords.x1;
 801bcc2:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
    lv_coord_t major_len = t->major_len;
 801bcc6:	f9b5 b000 	ldrsh.w	fp, [r5]
    lv_coord_t minor_len = t->minor_len;
 801bcca:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
    lv_draw_line_dsc_init(&line_dsc);
 801bcce:	a82b      	add	r0, sp, #172	; 0xac
 801bcd0:	f7f1 fff7 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801bcd4:	aa2b      	add	r2, sp, #172	; 0xac
 801bcd6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801bcda:	4620      	mov	r0, r4
 801bcdc:	f7eb fbe2 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 801bce0:	f10d 098c 	add.w	r9, sp, #140	; 0x8c
 801bce4:	4648      	mov	r0, r9
 801bce6:	f7f1 fc83 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801bcea:	464a      	mov	r2, r9
 801bcec:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f7eb fb28 	bl	8007346 <lv_obj_init_draw_label_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801bcf6:	9907      	ldr	r1, [sp, #28]
 801bcf8:	a811      	add	r0, sp, #68	; 0x44
 801bcfa:	f7eb fcea 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801bcfe:	4b91      	ldr	r3, [pc, #580]	; (801bf44 <draw_y_ticks+0x314>)
 801bd00:	9312      	str	r3, [sp, #72]	; 0x48
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 801bd02:	2306      	movs	r3, #6
 801bd04:	9313      	str	r3, [sp, #76]	; 0x4c
    part_draw_dsc.id = axis;
 801bd06:	9a05      	ldr	r2, [sp, #20]
 801bd08:	921f      	str	r2, [sp, #124]	; 0x7c
    part_draw_dsc.part = LV_PART_TICKS;
 801bd0a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 801bd0e:	931e      	str	r3, [sp, #120]	; 0x78
    part_draw_dsc.line_dsc = &line_dsc;
 801bd10:	ab2b      	add	r3, sp, #172	; 0xac
 801bd12:	9317      	str	r3, [sp, #92]	; 0x5c
    part_draw_dsc.label_dsc = &label_dsc;
 801bd14:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 801bd18:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801bd1c:	f3c9 090e 	ubfx	r9, r9, #0, #15
 801bd20:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801bd24:	88eb      	ldrh	r3, [r5, #6]
 801bd26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801bd2a:	fb03 f909 	mul.w	r9, r3, r9
        else p1.x++;
 801bd2e:	b2bf      	uxth	r7, r7
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 801bd30:	1e7b      	subs	r3, r7, #1
        else p1.x++;
 801bd32:	3701      	adds	r7, #1
 801bd34:	2a00      	cmp	r2, #0
 801bd36:	bf18      	it	ne
 801bd38:	463b      	movne	r3, r7
 801bd3a:	b21f      	sxth	r7, r3
        else p2.x = p1.x - minor_len; /*minor tick*/
 801bd3c:	b29b      	uxth	r3, r3
 801bd3e:	eba3 0808 	sub.w	r8, r3, r8
 801bd42:	fa0f f288 	sxth.w	r2, r8
 801bd46:	9206      	str	r2, [sp, #24]
        if(major) p2.x = p1.x - major_len; /*major tick*/
 801bd48:	eba3 0b0b 	sub.w	fp, r3, fp
 801bd4c:	fa0f fb8b 	sxth.w	fp, fp
    for(i = 0; i <= total_tick_num; i++) {
 801bd50:	f04f 0800 	mov.w	r8, #0
 801bd54:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 801bd58:	f8cd b010 	str.w	fp, [sp, #16]
 801bd5c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801bd60:	e09b      	b.n	801be9a <draw_y_ticks+0x26a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801bd62:	2213      	movs	r2, #19
 801bd64:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801bd68:	4620      	mov	r0, r4
 801bd6a:	f7ee fd3d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bd6e:	b203      	sxth	r3, r0
 801bd70:	9308      	str	r3, [sp, #32]
        x_ofs = obj->coords.x2;
 801bd72:	f9b4 7018 	ldrsh.w	r7, [r4, #24]
    lv_coord_t major_len = t->major_len;
 801bd76:	f9b5 b000 	ldrsh.w	fp, [r5]
    lv_coord_t minor_len = t->minor_len;
 801bd7a:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
    if(axis == LV_CHART_AXIS_SECONDARY_Y) {
 801bd7e:	9b05      	ldr	r3, [sp, #20]
 801bd80:	2b01      	cmp	r3, #1
 801bd82:	d1a4      	bne.n	801bcce <draw_y_ticks+0x9e>
        major_len *= -1;
 801bd84:	f1cb 0b00 	rsb	fp, fp, #0
 801bd88:	fa0f fb8b 	sxth.w	fp, fp
        minor_len *= -1;
 801bd8c:	f1c8 0800 	rsb	r8, r8, #0
 801bd90:	fa0f f888 	sxth.w	r8, r8
 801bd94:	e79b      	b.n	801bcce <draw_y_ticks+0x9e>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 801bd96:	9b04      	ldr	r3, [sp, #16]
 801bd98:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        part_draw_dsc.p1 = &p1;
 801bd9c:	ab2f      	add	r3, sp, #188	; 0xbc
 801bd9e:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p2 = &p2;
 801bda0:	ab2e      	add	r3, sp, #184	; 0xb8
 801bda2:	931b      	str	r3, [sp, #108]	; 0x6c
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 801bda4:	f9b6 3070 	ldrsh.w	r3, [r6, #112]	; 0x70
 801bda8:	9300      	str	r3, [sp, #0]
 801bdaa:	f9b6 306c 	ldrsh.w	r3, [r6, #108]	; 0x6c
 801bdae:	464a      	mov	r2, r9
 801bdb0:	2100      	movs	r1, #0
 801bdb2:	eba9 0008 	sub.w	r0, r9, r8
 801bdb6:	f005 fd27 	bl	8021808 <lv_map>
        part_draw_dsc.value = tick_value;
 801bdba:	9021      	str	r0, [sp, #132]	; 0x84
        if(major && t->label_en)  {
 801bdbc:	f995 2009 	ldrsb.w	r2, [r5, #9]
 801bdc0:	2a00      	cmp	r2, #0
 801bdc2:	f280 8097 	bge.w	801bef4 <draw_y_ticks+0x2c4>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 801bdc6:	4603      	mov	r3, r0
 801bdc8:	4a5f      	ldr	r2, [pc, #380]	; (801bf48 <draw_y_ticks+0x318>)
 801bdca:	2110      	movs	r1, #16
 801bdcc:	a80d      	add	r0, sp, #52	; 0x34
 801bdce:	f006 fd1d 	bl	802280c <lv_snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 801bdd2:	ab23      	add	r3, sp, #140	; 0x8c
 801bdd4:	9316      	str	r3, [sp, #88]	; 0x58
            part_draw_dsc.text = buf;
 801bdd6:	ab0d      	add	r3, sp, #52	; 0x34
 801bdd8:	931c      	str	r3, [sp, #112]	; 0x70
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 801bdda:	2310      	movs	r3, #16
 801bddc:	931d      	str	r3, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801bdde:	aa11      	add	r2, sp, #68	; 0x44
 801bde0:	211a      	movs	r1, #26
 801bde2:	4620      	mov	r0, r4
 801bde4:	f7e7 ff8c 	bl	8003d00 <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 801bde8:	2300      	movs	r3, #0
 801bdea:	9302      	str	r3, [sp, #8]
 801bdec:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801bdf0:	9301      	str	r3, [sp, #4]
 801bdf2:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 801bdf6:	9300      	str	r3, [sp, #0]
 801bdf8:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801bdfc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801bdfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 801be00:	a80a      	add	r0, sp, #40	; 0x28
 801be02:	f008 f86c 	bl	8023ede <lv_txt_get_size>
            a.y1 = p2.y - size.y / 2;
 801be06:	f8bd 20ba 	ldrh.w	r2, [sp, #186]	; 0xba
 801be0a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801be0e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801be12:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801be16:	1ad1      	subs	r1, r2, r3
 801be18:	b209      	sxth	r1, r1
 801be1a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            a.y2 = p2.y + size.y / 2;
 801be1e:	4413      	add	r3, r2
 801be20:	b21b      	sxth	r3, r3
 801be22:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            if(!sec_axis) {
 801be26:	9a05      	ldr	r2, [sp, #20]
 801be28:	b9fa      	cbnz	r2, 801be6a <draw_y_ticks+0x23a>
                a.x1 = p2.x - size.x - label_gap;
 801be2a:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
 801be2e:	f8bd c020 	ldrh.w	ip, [sp, #32]
 801be32:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801be36:	1a82      	subs	r2, r0, r2
 801be38:	eba2 020c 	sub.w	r2, r2, ip
 801be3c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
                a.x2 = p2.x - label_gap;
 801be40:	eba0 000c 	sub.w	r0, r0, ip
 801be44:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            if(a.y2 >= obj->coords.y1 &&
 801be48:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801be4c:	429a      	cmp	r2, r3
 801be4e:	dc5a      	bgt.n	801bf06 <draw_y_ticks+0x2d6>
 801be50:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801be54:	428b      	cmp	r3, r1
 801be56:	db56      	blt.n	801bf06 <draw_y_ticks+0x2d6>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 801be58:	2300      	movs	r3, #0
 801be5a:	9300      	str	r3, [sp, #0]
 801be5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801be5e:	aa0b      	add	r2, sp, #44	; 0x2c
 801be60:	a923      	add	r1, sp, #140	; 0x8c
 801be62:	9807      	ldr	r0, [sp, #28]
 801be64:	f7f1 fbf8 	bl	800d658 <lv_draw_label>
        if(major && t->label_en)  {
 801be68:	e04d      	b.n	801bf06 <draw_y_ticks+0x2d6>
                a.x1 = p2.x + label_gap;
 801be6a:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
 801be6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801be72:	eb00 0c02 	add.w	ip, r0, r2
 801be76:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
                a.x2 = p2.x + size.x + label_gap;
 801be7a:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 801be7e:	4460      	add	r0, ip
 801be80:	4402      	add	r2, r0
 801be82:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801be86:	e7df      	b.n	801be48 <draw_y_ticks+0x218>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801be88:	aa11      	add	r2, sp, #68	; 0x44
 801be8a:	211b      	movs	r1, #27
 801be8c:	4620      	mov	r0, r4
 801be8e:	f7e7 ff37 	bl	8003d00 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 801be92:	f108 0801 	add.w	r8, r8, #1
 801be96:	45c1      	cmp	r9, r8
 801be98:	d350      	bcc.n	801bf3c <draw_y_ticks+0x30c>
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 801be9a:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 801be9e:	ebab 0303 	sub.w	r3, fp, r3
 801bea2:	fb08 f303 	mul.w	r3, r8, r3
 801bea6:	fbb3 f3f9 	udiv	r3, r3, r9
 801beaa:	4453      	add	r3, sl
 801beac:	b21b      	sxth	r3, r3
 801beae:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 801beb2:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 801beb6:	f8ad 70bc 	strh.w	r7, [sp, #188]	; 0xbc
        if(i % t->minor_cnt == 0) major = true;
 801beba:	88eb      	ldrh	r3, [r5, #6]
 801bebc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801bec0:	fbb8 f2f3 	udiv	r2, r8, r3
 801bec4:	fb03 8312 	mls	r3, r3, r2, r8
 801bec8:	2b00      	cmp	r3, #0
 801beca:	f43f af64 	beq.w	801bd96 <draw_y_ticks+0x166>
        else p2.x = p1.x - minor_len; /*minor tick*/
 801bece:	9b06      	ldr	r3, [sp, #24]
 801bed0:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        part_draw_dsc.p1 = &p1;
 801bed4:	ab2f      	add	r3, sp, #188	; 0xbc
 801bed6:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p2 = &p2;
 801bed8:	ab2e      	add	r3, sp, #184	; 0xb8
 801beda:	931b      	str	r3, [sp, #108]	; 0x6c
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 801bedc:	f9b6 3070 	ldrsh.w	r3, [r6, #112]	; 0x70
 801bee0:	9300      	str	r3, [sp, #0]
 801bee2:	f9b6 306c 	ldrsh.w	r3, [r6, #108]	; 0x6c
 801bee6:	464a      	mov	r2, r9
 801bee8:	2100      	movs	r1, #0
 801beea:	eba9 0008 	sub.w	r0, r9, r8
 801beee:	f005 fc8b 	bl	8021808 <lv_map>
        part_draw_dsc.value = tick_value;
 801bef2:	9021      	str	r0, [sp, #132]	; 0x84
            part_draw_dsc.label_dsc = NULL;
 801bef4:	2300      	movs	r3, #0
 801bef6:	9316      	str	r3, [sp, #88]	; 0x58
            part_draw_dsc.text = NULL;
 801bef8:	931c      	str	r3, [sp, #112]	; 0x70
            part_draw_dsc.text_length = 0;
 801befa:	931d      	str	r3, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801befc:	aa11      	add	r2, sp, #68	; 0x44
 801befe:	211a      	movs	r1, #26
 801bf00:	4620      	mov	r0, r4
 801bf02:	f7e7 fefd 	bl	8003d00 <lv_event_send>
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 801bf06:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 801bf0a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801bf0e:	1059      	asrs	r1, r3, #1
 801bf10:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 801bf14:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801bf18:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801bf1c:	4293      	cmp	r3, r2
 801bf1e:	dbb3      	blt.n	801be88 <draw_y_ticks+0x258>
           p2.y - line_dsc.width / 2  <= obj->coords.y2) {
 801bf20:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 801bf24:	1a5b      	subs	r3, r3, r1
 801bf26:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 801bf2a:	4293      	cmp	r3, r2
 801bf2c:	dcac      	bgt.n	801be88 <draw_y_ticks+0x258>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801bf2e:	ab2e      	add	r3, sp, #184	; 0xb8
 801bf30:	aa2f      	add	r2, sp, #188	; 0xbc
 801bf32:	a92b      	add	r1, sp, #172	; 0xac
 801bf34:	9807      	ldr	r0, [sp, #28]
 801bf36:	f7f1 fedb 	bl	800dcf0 <lv_draw_line>
 801bf3a:	e7a5      	b.n	801be88 <draw_y_ticks+0x258>
}
 801bf3c:	b031      	add	sp, #196	; 0xc4
 801bf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf42:	bf00      	nop
 801bf44:	0802d110 	.word	0x0802d110
 801bf48:	0802d10c 	.word	0x0802d10c

0801bf4c <draw_x_ticks>:
{
 801bf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf50:	b0af      	sub	sp, #188	; 0xbc
 801bf52:	4604      	mov	r4, r0
 801bf54:	9104      	str	r1, [sp, #16]
 801bf56:	4692      	mov	sl, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 801bf58:	4611      	mov	r1, r2
 801bf5a:	f7ff fe58 	bl	801bc0e <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 801bf5e:	8903      	ldrh	r3, [r0, #8]
 801bf60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801bf64:	2b01      	cmp	r3, #1
 801bf66:	f240 809d 	bls.w	801c0a4 <draw_x_ticks+0x158>
 801bf6a:	4607      	mov	r7, r0
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 801bf6c:	f990 3009 	ldrsb.w	r3, [r0, #9]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	db03      	blt.n	801bf7c <draw_x_ticks+0x30>
 801bf74:	6803      	ldr	r3, [r0, #0]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	f000 8094 	beq.w	801c0a4 <draw_x_ticks+0x158>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bf7c:	2212      	movs	r2, #18
 801bf7e:	2100      	movs	r1, #0
 801bf80:	4620      	mov	r0, r4
 801bf82:	f7ee fc31 	bl	800a7e8 <lv_obj_get_style_prop>
 801bf86:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bf88:	2232      	movs	r2, #50	; 0x32
 801bf8a:	2100      	movs	r1, #0
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	f7ee fc2b 	bl	800a7e8 <lv_obj_get_style_prop>
 801bf92:	9007      	str	r0, [sp, #28]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801bf94:	4620      	mov	r0, r4
 801bf96:	f7eb fdb4 	bl	8007b02 <lv_obj_get_content_width>
 801bf9a:	4683      	mov	fp, r0
 801bf9c:	f8b4 8084 	ldrh.w	r8, [r4, #132]	; 0x84
    lv_draw_label_dsc_init(&label_dsc);
 801bfa0:	a824      	add	r0, sp, #144	; 0x90
 801bfa2:	f7f1 fb25 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801bfa6:	aa24      	add	r2, sp, #144	; 0x90
 801bfa8:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801bfac:	4620      	mov	r0, r4
 801bfae:	f7eb f9ca 	bl	8007346 <lv_obj_init_draw_label_dsc>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801bfb2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	f7ed f9fa 	bl	80093b0 <lv_obj_get_scroll_left>
 801bfbc:	9006      	str	r0, [sp, #24]
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 801bfbe:	f1ba 0f02 	cmp.w	sl, #2
 801bfc2:	d053      	beq.n	801c06c <draw_x_ticks+0x120>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 801bfc4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	db77      	blt.n	801c0bc <draw_x_ticks+0x170>
 801bfcc:	2300      	movs	r3, #0
 801bfce:	9305      	str	r3, [sp, #20]
        y_ofs = obj->coords.y1 - 1;
 801bfd0:	8ae5      	ldrh	r5, [r4, #22]
 801bfd2:	3d01      	subs	r5, #1
 801bfd4:	b22d      	sxth	r5, r5
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801bfd6:	fb08 fb0b 	mul.w	fp, r8, fp
 801bfda:	ea4f 282b 	mov.w	r8, fp, asr #8
 801bfde:	f34b 2b0f 	sbfx	fp, fp, #8, #16
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801bfe2:	9b07      	ldr	r3, [sp, #28]
 801bfe4:	441e      	add	r6, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801bfe6:	44b1      	add	r9, r6
 801bfe8:	9b06      	ldr	r3, [sp, #24]
 801bfea:	eba9 0903 	sub.w	r9, r9, r3
 801bfee:	fa1f f989 	uxth.w	r9, r9
    lv_draw_line_dsc_init(&line_dsc);
 801bff2:	ae21      	add	r6, sp, #132	; 0x84
 801bff4:	4630      	mov	r0, r6
 801bff6:	f7f1 fe64 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801bffa:	4632      	mov	r2, r6
 801bffc:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c000:	4620      	mov	r0, r4
 801c002:	f7eb fa4f 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    line_dsc.dash_gap = 0;
 801c006:	2300      	movs	r3, #0
 801c008:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    line_dsc.dash_width = 0;
 801c00c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801c010:	9904      	ldr	r1, [sp, #16]
 801c012:	a80f      	add	r0, sp, #60	; 0x3c
 801c014:	f7eb fb5d 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801c018:	4ba8      	ldr	r3, [pc, #672]	; (801c2bc <draw_x_ticks+0x370>)
 801c01a:	9310      	str	r3, [sp, #64]	; 0x40
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 801c01c:	2306      	movs	r3, #6
 801c01e:	9311      	str	r3, [sp, #68]	; 0x44
    part_draw_dsc.id = LV_CHART_AXIS_PRIMARY_X;
 801c020:	2302      	movs	r3, #2
 801c022:	931d      	str	r3, [sp, #116]	; 0x74
    part_draw_dsc.part = LV_PART_TICKS;
 801c024:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 801c028:	931c      	str	r3, [sp, #112]	; 0x70
    part_draw_dsc.label_dsc = &label_dsc;
 801c02a:	ab24      	add	r3, sp, #144	; 0x90
 801c02c:	9314      	str	r3, [sp, #80]	; 0x50
    part_draw_dsc.line_dsc = &line_dsc;
 801c02e:	9615      	str	r6, [sp, #84]	; 0x54
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 801c030:	f1ba 0602 	subs.w	r6, sl, #2
 801c034:	bf18      	it	ne
 801c036:	2601      	movne	r6, #1
    if(chart->type == LV_CHART_TYPE_BAR) {
 801c038:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801c03c:	f003 0307 	and.w	r3, r3, #7
 801c040:	2b02      	cmp	r3, #2
 801c042:	d044      	beq.n	801c0ce <draw_x_ticks+0x182>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801c044:	fa0f f989 	sxth.w	r9, r9
    p1.y = y_ofs;
 801c048:	f8ad 50b6 	strh.w	r5, [sp, #182]	; 0xb6
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 801c04c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 801c050:	f3c8 080e 	ubfx	r8, r8, #0, #15
 801c054:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801c058:	88fb      	ldrh	r3, [r7, #6]
 801c05a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c05e:	fb03 f808 	mul.w	r8, r3, r8
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 801c062:	2500      	movs	r5, #0
 801c064:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 801c068:	9306      	str	r3, [sp, #24]
 801c06a:	e08c      	b.n	801c186 <draw_x_ticks+0x23a>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 801c06c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801c070:	2b00      	cmp	r3, #0
 801c072:	db1a      	blt.n	801c0aa <draw_x_ticks+0x15e>
 801c074:	2300      	movs	r3, #0
 801c076:	9305      	str	r3, [sp, #20]
        y_ofs = obj->coords.y2 + 1;
 801c078:	8b65      	ldrh	r5, [r4, #26]
 801c07a:	3501      	adds	r5, #1
 801c07c:	b22d      	sxth	r5, r5
        if(y_ofs > draw_ctx->clip_area->y2) return;
 801c07e:	9b04      	ldr	r3, [sp, #16]
 801c080:	689a      	ldr	r2, [r3, #8]
 801c082:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801c086:	42ab      	cmp	r3, r5
 801c088:	db0c      	blt.n	801c0a4 <draw_x_ticks+0x158>
        if(y_ofs + label_gap + label_dsc.font->line_height + t->major_len < draw_ctx->clip_area->y1) return;
 801c08a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c08c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c090:	9905      	ldr	r1, [sp, #20]
 801c092:	1869      	adds	r1, r5, r1
 801c094:	440b      	add	r3, r1
 801c096:	f9b7 1000 	ldrsh.w	r1, [r7]
 801c09a:	440b      	add	r3, r1
 801c09c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801c0a0:	4293      	cmp	r3, r2
 801c0a2:	da98      	bge.n	801bfd6 <draw_x_ticks+0x8a>
}
 801c0a4:	b02f      	add	sp, #188	; 0xbc
 801c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c0aa:	2211      	movs	r2, #17
 801c0ac:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f7ee fb99 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c0b6:	b203      	sxth	r3, r0
 801c0b8:	9305      	str	r3, [sp, #20]
 801c0ba:	e7dd      	b.n	801c078 <draw_x_ticks+0x12c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c0bc:	2210      	movs	r2, #16
 801c0be:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c0c2:	4620      	mov	r0, r4
 801c0c4:	f7ee fb90 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c0c8:	b203      	sxth	r3, r0
 801c0ca:	9305      	str	r3, [sp, #20]
 801c0cc:	e780      	b.n	801bfd0 <draw_x_ticks+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801c0ce:	2215      	movs	r2, #21
 801c0d0:	2100      	movs	r1, #0
 801c0d2:	4620      	mov	r0, r4
 801c0d4:	f7ee fb88 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c0d8:	b200      	sxth	r0, r0
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 801c0da:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801c0de:	fb00 f101 	mul.w	r1, r0, r1
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 801c0e2:	eb0b 2b21 	add.w	fp, fp, r1, asr #8
 801c0e6:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801c0ea:	fb9b f2f3 	sdiv	r2, fp, r3
        x_ofs += (block_w - block_gap) / 2;
 801c0ee:	b213      	sxth	r3, r2
 801c0f0:	eba3 2321 	sub.w	r3, r3, r1, asr #8
 801c0f4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c0f8:	eb09 0963 	add.w	r9, r9, r3, asr #1
 801c0fc:	fa0f f989 	sxth.w	r9, r9
        w -= block_w - block_gap;
 801c100:	eb08 2b21 	add.w	fp, r8, r1, asr #8
 801c104:	ebab 0b02 	sub.w	fp, fp, r2
 801c108:	fa0f fb8b 	sxth.w	fp, fp
 801c10c:	e79c      	b.n	801c048 <draw_x_ticks+0xfc>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 801c10e:	8879      	ldrh	r1, [r7, #2]
 801c110:	1a52      	subs	r2, r2, r1
 801c112:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
        part_draw_dsc.p1 = &p1;
 801c116:	aa2d      	add	r2, sp, #180	; 0xb4
 801c118:	9218      	str	r2, [sp, #96]	; 0x60
        part_draw_dsc.p2 = &p2;
 801c11a:	aa2c      	add	r2, sp, #176	; 0xb0
 801c11c:	9219      	str	r2, [sp, #100]	; 0x64
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 801c11e:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 801c122:	f002 0207 	and.w	r2, r2, #7
 801c126:	2a03      	cmp	r2, #3
 801c128:	d055      	beq.n	801c1d6 <draw_x_ticks+0x28a>
            tick_value = i / t->minor_cnt;
 801c12a:	fbb5 f3f3 	udiv	r3, r5, r3
        part_draw_dsc.value = tick_value;
 801c12e:	931f      	str	r3, [sp, #124]	; 0x7c
        if(major && t->label_en) {
 801c130:	b91e      	cbnz	r6, 801c13a <draw_x_ticks+0x1ee>
 801c132:	f997 2009 	ldrsb.w	r2, [r7, #9]
 801c136:	2a00      	cmp	r2, #0
 801c138:	db5a      	blt.n	801c1f0 <draw_x_ticks+0x2a4>
            part_draw_dsc.label_dsc = NULL;
 801c13a:	2300      	movs	r3, #0
 801c13c:	9314      	str	r3, [sp, #80]	; 0x50
            part_draw_dsc.text = NULL;
 801c13e:	931a      	str	r3, [sp, #104]	; 0x68
            part_draw_dsc.text_length = 0;
 801c140:	931b      	str	r3, [sp, #108]	; 0x6c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c142:	aa0f      	add	r2, sp, #60	; 0x3c
 801c144:	211a      	movs	r1, #26
 801c146:	4620      	mov	r0, r4
 801c148:	f7e7 fdda 	bl	8003d00 <lv_event_send>
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 801c14c:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
 801c150:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c154:	1059      	asrs	r1, r3, #1
 801c156:	f9bd 20b4 	ldrsh.w	r2, [sp, #180]	; 0xb4
 801c15a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801c15e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801c162:	4293      	cmp	r3, r2
 801c164:	db07      	blt.n	801c176 <draw_x_ticks+0x22a>
           p2.x - line_dsc.width / 2  <= obj->coords.x2) {
 801c166:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 801c16a:	1a5b      	subs	r3, r3, r1
 801c16c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 801c170:	4293      	cmp	r3, r2
 801c172:	f340 809b 	ble.w	801c2ac <draw_x_ticks+0x360>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801c176:	aa0f      	add	r2, sp, #60	; 0x3c
 801c178:	211b      	movs	r1, #27
 801c17a:	4620      	mov	r0, r4
 801c17c:	f7e7 fdc0 	bl	8003d00 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 801c180:	3501      	adds	r5, #1
 801c182:	45a8      	cmp	r8, r5
 801c184:	d38e      	bcc.n	801c0a4 <draw_x_ticks+0x158>
        if(i % t->minor_cnt == 0) major = true;
 801c186:	88fb      	ldrh	r3, [r7, #6]
 801c188:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c18c:	fbb5 f6f3 	udiv	r6, r5, r3
 801c190:	fb03 5616 	mls	r6, r3, r6, r5
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 801c194:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 801c198:	ebab 0202 	sub.w	r2, fp, r2
 801c19c:	fb05 f202 	mul.w	r2, r5, r2
 801c1a0:	fbb2 f2f8 	udiv	r2, r2, r8
 801c1a4:	444a      	add	r2, r9
 801c1a6:	b212      	sxth	r2, r2
 801c1a8:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
 801c1ac:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 801c1b0:	f1ba 0f02 	cmp.w	sl, #2
 801c1b4:	d005      	beq.n	801c1c2 <draw_x_ticks+0x276>
 801c1b6:	f8bd 20b6 	ldrh.w	r2, [sp, #182]	; 0xb6
 801c1ba:	2e00      	cmp	r6, #0
 801c1bc:	d1a7      	bne.n	801c10e <draw_x_ticks+0x1c2>
 801c1be:	8839      	ldrh	r1, [r7, #0]
 801c1c0:	e7a6      	b.n	801c110 <draw_x_ticks+0x1c4>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 801c1c2:	f8bd 20b6 	ldrh.w	r2, [sp, #182]	; 0xb6
 801c1c6:	b926      	cbnz	r6, 801c1d2 <draw_x_ticks+0x286>
 801c1c8:	8839      	ldrh	r1, [r7, #0]
 801c1ca:	440a      	add	r2, r1
 801c1cc:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 801c1d0:	e7a1      	b.n	801c116 <draw_x_ticks+0x1ca>
 801c1d2:	8879      	ldrh	r1, [r7, #2]
 801c1d4:	e7f9      	b.n	801c1ca <draw_x_ticks+0x27e>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 801c1d6:	9a06      	ldr	r2, [sp, #24]
 801c1d8:	f9b2 3078 	ldrsh.w	r3, [r2, #120]	; 0x78
 801c1dc:	9300      	str	r3, [sp, #0]
 801c1de:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 801c1e2:	4642      	mov	r2, r8
 801c1e4:	2100      	movs	r1, #0
 801c1e6:	4628      	mov	r0, r5
 801c1e8:	f005 fb0e 	bl	8021808 <lv_map>
 801c1ec:	4603      	mov	r3, r0
 801c1ee:	e79e      	b.n	801c12e <draw_x_ticks+0x1e2>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 801c1f0:	ae0b      	add	r6, sp, #44	; 0x2c
 801c1f2:	4a33      	ldr	r2, [pc, #204]	; (801c2c0 <draw_x_ticks+0x374>)
 801c1f4:	2110      	movs	r1, #16
 801c1f6:	4630      	mov	r0, r6
 801c1f8:	f006 fb08 	bl	802280c <lv_snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 801c1fc:	ab24      	add	r3, sp, #144	; 0x90
 801c1fe:	9314      	str	r3, [sp, #80]	; 0x50
            part_draw_dsc.text = buf;
 801c200:	961a      	str	r6, [sp, #104]	; 0x68
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 801c202:	2310      	movs	r3, #16
 801c204:	931b      	str	r3, [sp, #108]	; 0x6c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c206:	aa0f      	add	r2, sp, #60	; 0x3c
 801c208:	211a      	movs	r1, #26
 801c20a:	4620      	mov	r0, r4
 801c20c:	f7e7 fd78 	bl	8003d00 <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 801c210:	2300      	movs	r3, #0
 801c212:	9302      	str	r3, [sp, #8]
 801c214:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801c218:	9301      	str	r3, [sp, #4]
 801c21a:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801c21e:	9300      	str	r3, [sp, #0]
 801c220:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801c224:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c226:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c228:	a808      	add	r0, sp, #32
 801c22a:	f007 fe58 	bl	8023ede <lv_txt_get_size>
            a.x1 = (p2.x - size.x / 2);
 801c22e:	f8bd 20b0 	ldrh.w	r2, [sp, #176]	; 0xb0
 801c232:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c236:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c23a:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801c23e:	1ad1      	subs	r1, r2, r3
 801c240:	b209      	sxth	r1, r1
 801c242:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
            a.x2 = (p2.x + size.x / 2);
 801c246:	4413      	add	r3, r2
 801c248:	b21b      	sxth	r3, r3
 801c24a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            if(sec_axis) {
 801c24e:	f1ba 0f02 	cmp.w	sl, #2
 801c252:	d01e      	beq.n	801c292 <draw_x_ticks+0x346>
                a.y2 = p2.y - label_gap;
 801c254:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 801c258:	9805      	ldr	r0, [sp, #20]
 801c25a:	1a12      	subs	r2, r2, r0
 801c25c:	b292      	uxth	r2, r2
 801c25e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
                a.y1 = a.y2 - size.y;
 801c262:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 801c266:	1a12      	subs	r2, r2, r0
 801c268:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            if(a.x2 >= obj->coords.x1 &&
 801c26c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801c270:	429a      	cmp	r2, r3
 801c272:	f73f af6b 	bgt.w	801c14c <draw_x_ticks+0x200>
 801c276:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801c27a:	428b      	cmp	r3, r1
 801c27c:	f6ff af66 	blt.w	801c14c <draw_x_ticks+0x200>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 801c280:	2300      	movs	r3, #0
 801c282:	9300      	str	r3, [sp, #0]
 801c284:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c286:	aa09      	add	r2, sp, #36	; 0x24
 801c288:	a924      	add	r1, sp, #144	; 0x90
 801c28a:	9804      	ldr	r0, [sp, #16]
 801c28c:	f7f1 f9e4 	bl	800d658 <lv_draw_label>
        if(major && t->label_en) {
 801c290:	e75c      	b.n	801c14c <draw_x_ticks+0x200>
                a.y1 = p2.y + label_gap;
 801c292:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 801c296:	9805      	ldr	r0, [sp, #20]
 801c298:	4402      	add	r2, r0
 801c29a:	b292      	uxth	r2, r2
 801c29c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
                a.y2 = a.y1 + size.y;
 801c2a0:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 801c2a4:	4402      	add	r2, r0
 801c2a6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c2aa:	e7df      	b.n	801c26c <draw_x_ticks+0x320>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801c2ac:	ab2c      	add	r3, sp, #176	; 0xb0
 801c2ae:	aa2d      	add	r2, sp, #180	; 0xb4
 801c2b0:	a921      	add	r1, sp, #132	; 0x84
 801c2b2:	9804      	ldr	r0, [sp, #16]
 801c2b4:	f7f1 fd1c 	bl	800dcf0 <lv_draw_line>
 801c2b8:	e75d      	b.n	801c176 <draw_x_ticks+0x22a>
 801c2ba:	bf00      	nop
 801c2bc:	0802d110 	.word	0x0802d110
 801c2c0:	0802d10c 	.word	0x0802d10c

0801c2c4 <lv_chart_event>:
{
 801c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2c8:	b0d1      	sub	sp, #324	; 0x144
 801c2ca:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801c2cc:	48a4      	ldr	r0, [pc, #656]	; (801c560 <lv_chart_event+0x29c>)
 801c2ce:	f7e7 fc1a 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801c2d2:	2801      	cmp	r0, #1
 801c2d4:	d002      	beq.n	801c2dc <lv_chart_event+0x18>
}
 801c2d6:	b051      	add	sp, #324	; 0x144
 801c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801c2dc:	4628      	mov	r0, r5
 801c2de:	f7e7 fd35 	bl	8003d4c <lv_event_get_code>
 801c2e2:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801c2e4:	4628      	mov	r0, r5
 801c2e6:	f7e7 fd2d 	bl	8003d44 <lv_event_get_target>
 801c2ea:	4683      	mov	fp, r0
    if(code == LV_EVENT_PRESSED) {
 801c2ec:	2c01      	cmp	r4, #1
 801c2ee:	f000 809f 	beq.w	801c430 <lv_chart_event+0x16c>
    else if(code == LV_EVENT_RELEASED) {
 801c2f2:	2c08      	cmp	r4, #8
 801c2f4:	f000 80fb 	beq.w	801c4ee <lv_chart_event+0x22a>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801c2f8:	2c29      	cmp	r4, #41	; 0x29
 801c2fa:	f000 8101 	beq.w	801c500 <lv_chart_event+0x23c>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801c2fe:	2c13      	cmp	r4, #19
 801c300:	f000 8101 	beq.w	801c506 <lv_chart_event+0x242>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801c304:	2c2c      	cmp	r4, #44	; 0x2c
 801c306:	f000 8113 	beq.w	801c530 <lv_chart_event+0x26c>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801c30a:	2c15      	cmp	r4, #21
 801c30c:	d1e3      	bne.n	801c2d6 <lv_chart_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801c30e:	4628      	mov	r0, r5
 801c310:	f7e7 fd8c 	bl	8003e2c <lv_event_get_draw_ctx>
 801c314:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 801c316:	f10b 0314 	add.w	r3, fp, #20
 801c31a:	9307      	str	r3, [sp, #28]
 801c31c:	6882      	ldr	r2, [r0, #8]
 801c31e:	4619      	mov	r1, r3
 801c320:	a822      	add	r0, sp, #136	; 0x88
 801c322:	f004 fb8c 	bl	8020a3e <_lv_area_intersect>
    if(mask_ret == false) return;
 801c326:	2800      	cmp	r0, #0
 801c328:	f040 811c 	bne.w	801c564 <lv_chart_event+0x2a0>
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_Y);
 801c32c:	2200      	movs	r2, #0
 801c32e:	4651      	mov	r1, sl
 801c330:	4658      	mov	r0, fp
 801c332:	f7ff fc7d 	bl	801bc30 <draw_y_ticks>
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_Y);
 801c336:	2201      	movs	r2, #1
 801c338:	4651      	mov	r1, sl
 801c33a:	4658      	mov	r0, fp
 801c33c:	f7ff fc78 	bl	801bc30 <draw_y_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_X);
 801c340:	2202      	movs	r2, #2
 801c342:	4651      	mov	r1, sl
 801c344:	4658      	mov	r0, fp
 801c346:	f7ff fe01 	bl	801bf4c <draw_x_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_X);
 801c34a:	2204      	movs	r2, #4
 801c34c:	4651      	mov	r1, sl
 801c34e:	4658      	mov	r0, fp
 801c350:	f7ff fdfc 	bl	801bf4c <draw_x_ticks>
        if(_lv_ll_is_empty(&chart->series_ll) == false) {
 801c354:	f10b 0824 	add.w	r8, fp, #36	; 0x24
 801c358:	4640      	mov	r0, r8
 801c35a:	f005 f96d 	bl	8021638 <_lv_ll_is_empty>
 801c35e:	b960      	cbnz	r0, 801c37a <lv_chart_event+0xb6>
            if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, draw_ctx);
 801c360:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801c364:	f003 0307 	and.w	r3, r3, #7
 801c368:	2b01      	cmp	r3, #1
 801c36a:	f000 824b 	beq.w	801c804 <lv_chart_event+0x540>
            else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, draw_ctx);
 801c36e:	2b02      	cmp	r3, #2
 801c370:	f000 8462 	beq.w	801cc38 <lv_chart_event+0x974>
            else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, draw_ctx);
 801c374:	2b03      	cmp	r3, #3
 801c376:	f000 85af 	beq.w	801ced8 <lv_chart_event+0xc14>
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 801c37a:	f10b 0830 	add.w	r8, fp, #48	; 0x30
 801c37e:	4640      	mov	r0, r8
 801c380:	f005 f95a 	bl	8021638 <_lv_ll_is_empty>
 801c384:	9004      	str	r0, [sp, #16]
 801c386:	2800      	cmp	r0, #0
 801c388:	d1a5      	bne.n	801c2d6 <lv_chart_event+0x12>
    if(!_lv_area_intersect(&clip_area, draw_ctx->clip_area, &obj->coords)) return;
 801c38a:	9a07      	ldr	r2, [sp, #28]
 801c38c:	f8da 1008 	ldr.w	r1, [sl, #8]
 801c390:	a818      	add	r0, sp, #96	; 0x60
 801c392:	f004 fb54 	bl	8020a3e <_lv_area_intersect>
 801c396:	9005      	str	r0, [sp, #20]
 801c398:	2800      	cmp	r0, #0
 801c39a:	d09c      	beq.n	801c2d6 <lv_chart_event+0x12>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801c39c:	f8da 3008 	ldr.w	r3, [sl, #8]
 801c3a0:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_area;
 801c3a2:	ab18      	add	r3, sp, #96	; 0x60
 801c3a4:	f8ca 3008 	str.w	r3, [sl, #8]
    lv_draw_line_dsc_init(&line_dsc_ori);
 801c3a8:	a81c      	add	r0, sp, #112	; 0x70
 801c3aa:	f7f1 fc8a 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 801c3ae:	aa1c      	add	r2, sp, #112	; 0x70
 801c3b0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c3b4:	4658      	mov	r0, fp
 801c3b6:	f7eb f875 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 801c3ba:	a822      	add	r0, sp, #136	; 0x88
 801c3bc:	f7f2 fed4 	bl	800f168 <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 801c3c0:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 801c3c4:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 801c3c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c3cc:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c3d0:	2201      	movs	r2, #1
 801c3d2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c3d6:	4658      	mov	r0, fp
 801c3d8:	f7ee fa06 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c3dc:	b203      	sxth	r3, r0
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 801c3de:	f3c0 37c0 	ubfx	r7, r0, #15, #1
 801c3e2:	441f      	add	r7, r3
 801c3e4:	107f      	asrs	r7, r7, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c3e6:	2201      	movs	r2, #1
 801c3e8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801c3ec:	4658      	mov	r0, fp
 801c3ee:	f7ee f9fb 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c3f2:	b203      	sxth	r3, r0
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 801c3f4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
 801c3f8:	4413      	add	r3, r2
 801c3fa:	105b      	asrs	r3, r3, #1
 801c3fc:	9303      	str	r3, [sp, #12]
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801c3fe:	4651      	mov	r1, sl
 801c400:	a83e      	add	r0, sp, #248	; 0xf8
 801c402:	f7eb f966 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.line_dsc = &line_dsc_tmp;
 801c406:	ab1f      	add	r3, sp, #124	; 0x7c
 801c408:	9344      	str	r3, [sp, #272]	; 0x110
    part_draw_dsc.rect_dsc = &point_dsc_tmp;
 801c40a:	ab30      	add	r3, sp, #192	; 0xc0
 801c40c:	9342      	str	r3, [sp, #264]	; 0x108
    part_draw_dsc.part = LV_PART_CURSOR;
 801c40e:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 801c412:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 801c414:	4b52      	ldr	r3, [pc, #328]	; (801c560 <lv_chart_event+0x29c>)
 801c416:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_CURSOR;
 801c418:	2305      	movs	r3, #5
 801c41a:	9340      	str	r3, [sp, #256]	; 0x100
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 801c41c:	4640      	mov	r0, r8
 801c41e:	f005 f8f1 	bl	8021604 <_lv_ll_get_tail>
 801c422:	4604      	mov	r4, r0
 801c424:	2800      	cmp	r0, #0
 801c426:	f000 876a 	beq.w	801d2fe <lv_chart_event+0x103a>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 801c42a:	46b9      	mov	r9, r7
 801c42c:	f000 bfd7 	b.w	801d3de <lv_chart_event+0x111a>
        lv_indev_t * indev = lv_indev_get_act();
 801c430:	f7e8 f80c 	bl	800444c <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 801c434:	a93e      	add	r1, sp, #248	; 0xf8
 801c436:	f7e8 f886 	bl	8004546 <lv_indev_get_point>
        p.x -= obj->coords.x1;
 801c43a:	f8bd 40f8 	ldrh.w	r4, [sp, #248]	; 0xf8
 801c43e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801c442:	1ae4      	subs	r4, r4, r3
 801c444:	b2a4      	uxth	r4, r4
 801c446:	f8ad 40f8 	strh.w	r4, [sp, #248]	; 0xf8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 801c44a:	4658      	mov	r0, fp
 801c44c:	f7ec ffb0 	bl	80093b0 <lv_obj_get_scroll_left>
 801c450:	4606      	mov	r6, r0
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c452:	4658      	mov	r0, fp
 801c454:	f7eb fb55 	bl	8007b02 <lv_obj_get_content_width>
 801c458:	4605      	mov	r5, r0
 801c45a:	f8bb 7084 	ldrh.w	r7, [fp, #132]	; 0x84
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c45e:	2212      	movs	r2, #18
 801c460:	2100      	movs	r1, #0
 801c462:	4658      	mov	r0, fp
 801c464:	f7ee f9c0 	bl	800a7e8 <lv_obj_get_style_prop>
    x -= pad_left;
 801c468:	1a24      	subs	r4, r4, r0
 801c46a:	4434      	add	r4, r6
 801c46c:	b224      	sxth	r4, r4
    if(x < 0) return 0;
 801c46e:	2c00      	cmp	r4, #0
 801c470:	db3b      	blt.n	801c4ea <lv_chart_event+0x226>
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c472:	fb07 f305 	mul.w	r3, r7, r5
 801c476:	f343 230f 	sbfx	r3, r3, #8, #16
    if(x > w) return chart->point_cnt - 1;
 801c47a:	42a3      	cmp	r3, r4
 801c47c:	db1e      	blt.n	801c4bc <lv_chart_event+0x1f8>
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 801c47e:	f89b 2088 	ldrb.w	r2, [fp, #136]	; 0x88
 801c482:	f002 0207 	and.w	r2, r2, #7
 801c486:	2a01      	cmp	r2, #1
 801c488:	d01c      	beq.n	801c4c4 <lv_chart_event+0x200>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 801c48a:	2a02      	cmp	r2, #2
 801c48c:	d026      	beq.n	801c4dc <lv_chart_event+0x218>
    return 0;
 801c48e:	2400      	movs	r4, #0
        if(id != (uint32_t)chart->pressed_point_id) {
 801c490:	f9bb 307c 	ldrsh.w	r3, [fp, #124]	; 0x7c
 801c494:	42a3      	cmp	r3, r4
 801c496:	f43f af1e 	beq.w	801c2d6 <lv_chart_event+0x12>
            invalidate_point(obj, id);
 801c49a:	b2a1      	uxth	r1, r4
 801c49c:	4658      	mov	r0, fp
 801c49e:	f7ff f9a3 	bl	801b7e8 <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 801c4a2:	f8bb 107c 	ldrh.w	r1, [fp, #124]	; 0x7c
 801c4a6:	4658      	mov	r0, fp
 801c4a8:	f7ff f99e 	bl	801b7e8 <invalidate_point>
            chart->pressed_point_id = id;
 801c4ac:	f8ab 407c 	strh.w	r4, [fp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801c4b0:	2200      	movs	r2, #0
 801c4b2:	211c      	movs	r1, #28
 801c4b4:	4658      	mov	r0, fp
 801c4b6:	f7e7 fc23 	bl	8003d00 <lv_event_send>
 801c4ba:	e70c      	b.n	801c2d6 <lv_chart_event+0x12>
    if(x > w) return chart->point_cnt - 1;
 801c4bc:	f8bb 4082 	ldrh.w	r4, [fp, #130]	; 0x82
 801c4c0:	3c01      	subs	r4, #1
 801c4c2:	e7e5      	b.n	801c490 <lv_chart_event+0x1cc>
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 801c4c4:	f8bb 1082 	ldrh.w	r1, [fp, #130]	; 0x82
 801c4c8:	3901      	subs	r1, #1
 801c4ca:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801c4ce:	f342 024f 	sbfx	r2, r2, #1, #16
 801c4d2:	fb04 2401 	mla	r4, r4, r1, r2
 801c4d6:	fb94 f4f3 	sdiv	r4, r4, r3
 801c4da:	e7d9      	b.n	801c490 <lv_chart_event+0x1cc>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 801c4dc:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801c4e0:	fb02 f404 	mul.w	r4, r2, r4
 801c4e4:	fb94 f4f3 	sdiv	r4, r4, r3
 801c4e8:	e7d2      	b.n	801c490 <lv_chart_event+0x1cc>
    if(x < 0) return 0;
 801c4ea:	2400      	movs	r4, #0
 801c4ec:	e7d0      	b.n	801c490 <lv_chart_event+0x1cc>
        invalidate_point(obj, chart->pressed_point_id);
 801c4ee:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 801c4f2:	f7ff f979 	bl	801b7e8 <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 801c4f6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c4fa:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
 801c4fe:	e6ea      	b.n	801c2d6 <lv_chart_event+0x12>
        lv_obj_refresh_self_size(obj);
 801c500:	f7eb fb90 	bl	8007c24 <lv_obj_refresh_self_size>
 801c504:	e6e7      	b.n	801c2d6 <lv_chart_event+0x12>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size,
 801c506:	f9b0 3064 	ldrsh.w	r3, [r0, #100]	; 0x64
 801c50a:	f9b0 1058 	ldrsh.w	r1, [r0, #88]	; 0x58
 801c50e:	428b      	cmp	r3, r1
 801c510:	bfb8      	it	lt
 801c512:	460b      	movlt	r3, r1
 801c514:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	; 0x4c
 801c518:	428b      	cmp	r3, r1
 801c51a:	bfb8      	it	lt
 801c51c:	460b      	movlt	r3, r1
 801c51e:	f9b0 1040 	ldrsh.w	r1, [r0, #64]	; 0x40
 801c522:	4299      	cmp	r1, r3
 801c524:	bfb8      	it	lt
 801c526:	4619      	movlt	r1, r3
 801c528:	4628      	mov	r0, r5
 801c52a:	f7e7 fc87 	bl	8003e3c <lv_event_set_ext_draw_size>
 801c52e:	e6d2      	b.n	801c2d6 <lv_chart_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 801c530:	4628      	mov	r0, r5
 801c532:	f7e7 fc0f 	bl	8003d54 <lv_event_get_param>
 801c536:	4604      	mov	r4, r0
        p->x = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c538:	4658      	mov	r0, fp
 801c53a:	f7eb fae2 	bl	8007b02 <lv_obj_get_content_width>
 801c53e:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801c542:	fb00 f303 	mul.w	r3, r0, r3
 801c546:	121b      	asrs	r3, r3, #8
 801c548:	8023      	strh	r3, [r4, #0]
        p->y = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801c54a:	4658      	mov	r0, fp
 801c54c:	f7eb faf6 	bl	8007b3c <lv_obj_get_content_height>
 801c550:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 801c554:	fb00 f303 	mul.w	r3, r0, r3
 801c558:	121b      	asrs	r3, r3, #8
 801c55a:	8063      	strh	r3, [r4, #2]
 801c55c:	e6bb      	b.n	801c2d6 <lv_chart_event+0x12>
 801c55e:	bf00      	nop
 801c560:	0802d110 	.word	0x0802d110
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801c564:	f8da 3008 	ldr.w	r3, [sl, #8]
 801c568:	9303      	str	r3, [sp, #12]
    draw_ctx->clip_area = &series_clip_area;
 801c56a:	ab22      	add	r3, sp, #136	; 0x88
 801c56c:	f8ca 3008 	str.w	r3, [sl, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c570:	2232      	movs	r2, #50	; 0x32
 801c572:	2100      	movs	r1, #0
 801c574:	4658      	mov	r0, fp
 801c576:	f7ee f937 	bl	800a7e8 <lv_obj_get_style_prop>
 801c57a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c57c:	2212      	movs	r2, #18
 801c57e:	2100      	movs	r1, #0
 801c580:	4658      	mov	r0, fp
 801c582:	f7ee f931 	bl	800a7e8 <lv_obj_get_style_prop>
 801c586:	9004      	str	r0, [sp, #16]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c588:	fa1f f884 	uxth.w	r8, r4
 801c58c:	f8cd 8014 	str.w	r8, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c590:	2210      	movs	r2, #16
 801c592:	2100      	movs	r1, #0
 801c594:	4658      	mov	r0, fp
 801c596:	f7ee f927 	bl	800a7e8 <lv_obj_get_style_prop>
 801c59a:	4604      	mov	r4, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c59c:	4658      	mov	r0, fp
 801c59e:	f7eb fab0 	bl	8007b02 <lv_obj_get_content_width>
 801c5a2:	9009      	str	r0, [sp, #36]	; 0x24
 801c5a4:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801c5a8:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801c5aa:	4658      	mov	r0, fp
 801c5ac:	f7eb fac6 	bl	8007b3c <lv_obj_get_content_height>
 801c5b0:	900b      	str	r0, [sp, #44]	; 0x2c
 801c5b2:	f8bb 7086 	ldrh.w	r7, [fp, #134]	; 0x86
    lv_draw_line_dsc_init(&line_dsc);
 801c5b6:	ae30      	add	r6, sp, #192	; 0xc0
 801c5b8:	4630      	mov	r0, r6
 801c5ba:	f7f1 fb82 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801c5be:	4632      	mov	r2, r6
 801c5c0:	2100      	movs	r1, #0
 801c5c2:	4658      	mov	r0, fp
 801c5c4:	f7ea ff6e 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801c5c8:	4651      	mov	r1, sl
 801c5ca:	a83e      	add	r0, sp, #248	; 0xf8
 801c5cc:	f7eb f881 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_MAIN;
 801c5d0:	2500      	movs	r5, #0
 801c5d2:	954b      	str	r5, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 801c5d4:	4b8a      	ldr	r3, [pc, #552]	; (801c800 <lv_chart_event+0x53c>)
 801c5d6:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_INIT;
 801c5d8:	9540      	str	r5, [sp, #256]	; 0x100
    part_draw_dsc.line_dsc = &line_dsc;
 801c5da:	9644      	str	r6, [sp, #272]	; 0x110
    part_draw_dsc.id = 0xFFFFFFFF;
 801c5dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c5e0:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.p1 = NULL;
 801c5e2:	9547      	str	r5, [sp, #284]	; 0x11c
    part_draw_dsc.p2 = NULL;
 801c5e4:	9548      	str	r5, [sp, #288]	; 0x120
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c5e6:	aa3e      	add	r2, sp, #248	; 0xf8
 801c5e8:	211a      	movs	r1, #26
 801c5ea:	4658      	mov	r0, fp
 801c5ec:	f7e7 fb88 	bl	8003d00 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 801c5f0:	2231      	movs	r2, #49	; 0x31
 801c5f2:	4629      	mov	r1, r5
 801c5f4:	4658      	mov	r0, fp
 801c5f6:	f7ee f8f7 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c5fa:	b2c6      	uxtb	r6, r0
 801c5fc:	9606      	str	r6, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c5fe:	2232      	movs	r2, #50	; 0x32
 801c600:	4629      	mov	r1, r5
 801c602:	4658      	mov	r0, fp
 801c604:	f7ee f8f0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c608:	b203      	sxth	r3, r0
 801c60a:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 801c60c:	2233      	movs	r2, #51	; 0x33
 801c60e:	4629      	mov	r1, r5
 801c610:	4658      	mov	r0, fp
 801c612:	f7ee f8e9 	bl	800a7e8 <lv_obj_get_style_prop>
 801c616:	900d      	str	r0, [sp, #52]	; 0x34
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 801c618:	4658      	mov	r0, fp
 801c61a:	f7ec fec9 	bl	80093b0 <lv_obj_get_scroll_left>
 801c61e:	9008      	str	r0, [sp, #32]
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 801c620:	4658      	mov	r0, fp
 801c622:	f7ec fe53 	bl	80092cc <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 801c626:	f8bb 507e 	ldrh.w	r5, [fp, #126]	; 0x7e
 801c62a:	2d00      	cmp	r5, #0
 801c62c:	d067      	beq.n	801c6fe <lv_chart_event+0x43a>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801c62e:	4643      	mov	r3, r8
 801c630:	191a      	adds	r2, r3, r4
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 801c632:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 801c636:	4413      	add	r3, r2
 801c638:	1a1b      	subs	r3, r3, r0
 801c63a:	fa1f f983 	uxth.w	r9, r3
        p1.x = obj->coords.x1;
 801c63e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801c642:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        p2.x = obj->coords.x2;
 801c646:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801c64a:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        i_end = chart->hdiv_cnt;
 801c64e:	fa0f f885 	sxth.w	r8, r5
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 801c652:	2e02      	cmp	r6, #2
 801c654:	d921      	bls.n	801c69a <lv_chart_event+0x3d6>
 801c656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c658:	2b00      	cmp	r3, #0
 801c65a:	f340 8081 	ble.w	801c760 <lv_chart_event+0x49c>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 801c65e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c660:	f013 0f02 	tst.w	r3, #2
 801c664:	d10f      	bne.n	801c686 <lv_chart_event+0x3c2>
        i_start = 0;
 801c666:	2400      	movs	r4, #0
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 801c668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c66a:	f013 0f01 	tst.w	r3, #1
 801c66e:	d015      	beq.n	801c69c <lv_chart_event+0x3d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c670:	2211      	movs	r2, #17
 801c672:	2100      	movs	r1, #0
 801c674:	4658      	mov	r0, fp
 801c676:	f7ee f8b7 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c67a:	b200      	sxth	r0, r0
 801c67c:	b970      	cbnz	r0, 801c69c <lv_chart_event+0x3d8>
 801c67e:	3d01      	subs	r5, #1
 801c680:	fa0f f885 	sxth.w	r8, r5
 801c684:	e00a      	b.n	801c69c <lv_chart_event+0x3d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c686:	2210      	movs	r2, #16
 801c688:	2100      	movs	r1, #0
 801c68a:	4658      	mov	r0, fp
 801c68c:	f7ee f8ac 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c690:	b204      	sxth	r4, r0
        i_start = 0;
 801c692:	fab4 f484 	clz	r4, r4
 801c696:	0964      	lsrs	r4, r4, #5
 801c698:	e7e6      	b.n	801c668 <lv_chart_event+0x3a4>
 801c69a:	2400      	movs	r4, #0
        for(i = i_start; i < i_end; i++) {
 801c69c:	45a0      	cmp	r8, r4
 801c69e:	dd2e      	ble.n	801c6fe <lv_chart_event+0x43a>
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801c6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6a2:	fb07 f303 	mul.w	r3, r7, r3
 801c6a6:	f343 270f 	sbfx	r7, r3, #8, #16
            part_draw_dsc.p1 = &p1;
 801c6aa:	ae1c      	add	r6, sp, #112	; 0x70
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 801c6ac:	fb04 f307 	mul.w	r3, r4, r7
 801c6b0:	f8bb 207e 	ldrh.w	r2, [fp, #126]	; 0x7e
 801c6b4:	3a01      	subs	r2, #1
 801c6b6:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 801c6ba:	444b      	add	r3, r9
 801c6bc:	b21b      	sxth	r3, r3
 801c6be:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            p2.y = p1.y;
 801c6c2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            part_draw_dsc.class_p = MY_CLASS;
 801c6c6:	4b4e      	ldr	r3, [pc, #312]	; (801c800 <lv_chart_event+0x53c>)
 801c6c8:	933f      	str	r3, [sp, #252]	; 0xfc
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_HOR;
 801c6ca:	2301      	movs	r3, #1
 801c6cc:	9340      	str	r3, [sp, #256]	; 0x100
            part_draw_dsc.p1 = &p1;
 801c6ce:	9647      	str	r6, [sp, #284]	; 0x11c
            part_draw_dsc.p2 = &p2;
 801c6d0:	ad1f      	add	r5, sp, #124	; 0x7c
 801c6d2:	9548      	str	r5, [sp, #288]	; 0x120
            part_draw_dsc.id = i;
 801c6d4:	944c      	str	r4, [sp, #304]	; 0x130
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c6d6:	aa3e      	add	r2, sp, #248	; 0xf8
 801c6d8:	211a      	movs	r1, #26
 801c6da:	4658      	mov	r0, fp
 801c6dc:	f7e7 fb10 	bl	8003d00 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801c6e0:	462b      	mov	r3, r5
 801c6e2:	4632      	mov	r2, r6
 801c6e4:	a930      	add	r1, sp, #192	; 0xc0
 801c6e6:	4650      	mov	r0, sl
 801c6e8:	f7f1 fb02 	bl	800dcf0 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801c6ec:	aa3e      	add	r2, sp, #248	; 0xf8
 801c6ee:	211b      	movs	r1, #27
 801c6f0:	4658      	mov	r0, fp
 801c6f2:	f7e7 fb05 	bl	8003d00 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 801c6f6:	3401      	adds	r4, #1
 801c6f8:	b224      	sxth	r4, r4
 801c6fa:	4544      	cmp	r4, r8
 801c6fc:	dbd6      	blt.n	801c6ac <lv_chart_event+0x3e8>
    if(chart->vdiv_cnt != 0) {
 801c6fe:	f8bb 5080 	ldrh.w	r5, [fp, #128]	; 0x80
 801c702:	2d00      	cmp	r5, #0
 801c704:	d06b      	beq.n	801c7de <lv_chart_event+0x51a>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c706:	9e05      	ldr	r6, [sp, #20]
 801c708:	9b04      	ldr	r3, [sp, #16]
 801c70a:	441e      	add	r6, r3
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 801c70c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801c710:	441e      	add	r6, r3
 801c712:	9b08      	ldr	r3, [sp, #32]
 801c714:	1af6      	subs	r6, r6, r3
 801c716:	b2b6      	uxth	r6, r6
        p1.y = obj->coords.y1;
 801c718:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 801c71c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        p2.y = obj->coords.y2;
 801c720:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 801c724:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        i_end = chart->vdiv_cnt;
 801c728:	fa0f f985 	sxth.w	r9, r5
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 801c72c:	9b06      	ldr	r3, [sp, #24]
 801c72e:	2b02      	cmp	r3, #2
 801c730:	d922      	bls.n	801c778 <lv_chart_event+0x4b4>
 801c732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c734:	2b00      	cmp	r3, #0
 801c736:	dd61      	ble.n	801c7fc <lv_chart_event+0x538>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 801c738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c73a:	f013 0f04 	tst.w	r3, #4
 801c73e:	d111      	bne.n	801c764 <lv_chart_event+0x4a0>
        i_start = 0;
 801c740:	2400      	movs	r4, #0
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 801c742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c744:	f013 0f08 	tst.w	r3, #8
 801c748:	d017      	beq.n	801c77a <lv_chart_event+0x4b6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c74a:	2213      	movs	r2, #19
 801c74c:	2100      	movs	r1, #0
 801c74e:	4658      	mov	r0, fp
 801c750:	f7ee f84a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c754:	b200      	sxth	r0, r0
 801c756:	b980      	cbnz	r0, 801c77a <lv_chart_event+0x4b6>
 801c758:	3d01      	subs	r5, #1
 801c75a:	fa0f f985 	sxth.w	r9, r5
 801c75e:	e00c      	b.n	801c77a <lv_chart_event+0x4b6>
        i_start = 0;
 801c760:	2400      	movs	r4, #0
 801c762:	e79b      	b.n	801c69c <lv_chart_event+0x3d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c764:	2212      	movs	r2, #18
 801c766:	2100      	movs	r1, #0
 801c768:	4658      	mov	r0, fp
 801c76a:	f7ee f83d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c76e:	b204      	sxth	r4, r0
        i_start = 0;
 801c770:	fab4 f484 	clz	r4, r4
 801c774:	0964      	lsrs	r4, r4, #5
 801c776:	e7e4      	b.n	801c742 <lv_chart_event+0x47e>
 801c778:	2400      	movs	r4, #0
        for(i = i_start; i < i_end; i++) {
 801c77a:	45a1      	cmp	r9, r4
 801c77c:	dd2f      	ble.n	801c7de <lv_chart_event+0x51a>
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c782:	fb02 f803 	mul.w	r8, r2, r3
 801c786:	f348 280f 	sbfx	r8, r8, #8, #16
            part_draw_dsc.p1 = &p1;
 801c78a:	af1c      	add	r7, sp, #112	; 0x70
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 801c78c:	fb04 f308 	mul.w	r3, r4, r8
 801c790:	f8bb 2080 	ldrh.w	r2, [fp, #128]	; 0x80
 801c794:	3a01      	subs	r2, #1
 801c796:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 801c79a:	4433      	add	r3, r6
 801c79c:	b21b      	sxth	r3, r3
 801c79e:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            p2.x = p1.x;
 801c7a2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            part_draw_dsc.class_p = MY_CLASS;
 801c7a6:	4b16      	ldr	r3, [pc, #88]	; (801c800 <lv_chart_event+0x53c>)
 801c7a8:	933f      	str	r3, [sp, #252]	; 0xfc
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_VER;
 801c7aa:	2302      	movs	r3, #2
 801c7ac:	9340      	str	r3, [sp, #256]	; 0x100
            part_draw_dsc.p1 = &p1;
 801c7ae:	9747      	str	r7, [sp, #284]	; 0x11c
            part_draw_dsc.p2 = &p2;
 801c7b0:	ad1f      	add	r5, sp, #124	; 0x7c
 801c7b2:	9548      	str	r5, [sp, #288]	; 0x120
            part_draw_dsc.id = i;
 801c7b4:	944c      	str	r4, [sp, #304]	; 0x130
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c7b6:	aa3e      	add	r2, sp, #248	; 0xf8
 801c7b8:	211a      	movs	r1, #26
 801c7ba:	4658      	mov	r0, fp
 801c7bc:	f7e7 faa0 	bl	8003d00 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801c7c0:	462b      	mov	r3, r5
 801c7c2:	463a      	mov	r2, r7
 801c7c4:	a930      	add	r1, sp, #192	; 0xc0
 801c7c6:	4650      	mov	r0, sl
 801c7c8:	f7f1 fa92 	bl	800dcf0 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801c7cc:	aa3e      	add	r2, sp, #248	; 0xf8
 801c7ce:	211b      	movs	r1, #27
 801c7d0:	4658      	mov	r0, fp
 801c7d2:	f7e7 fa95 	bl	8003d00 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 801c7d6:	3401      	adds	r4, #1
 801c7d8:	b224      	sxth	r4, r4
 801c7da:	454c      	cmp	r4, r9
 801c7dc:	dbd6      	blt.n	801c78c <lv_chart_event+0x4c8>
    part_draw_dsc.id = 0xFFFFFFFF;
 801c7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c7e2:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.p1 = NULL;
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	9347      	str	r3, [sp, #284]	; 0x11c
    part_draw_dsc.p2 = NULL;
 801c7e8:	9348      	str	r3, [sp, #288]	; 0x120
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801c7ea:	aa3e      	add	r2, sp, #248	; 0xf8
 801c7ec:	211b      	movs	r1, #27
 801c7ee:	4658      	mov	r0, fp
 801c7f0:	f7e7 fa86 	bl	8003d00 <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 801c7f4:	9b03      	ldr	r3, [sp, #12]
 801c7f6:	f8ca 3008 	str.w	r3, [sl, #8]
 801c7fa:	e597      	b.n	801c32c <lv_chart_event+0x68>
        i_start = 0;
 801c7fc:	2400      	movs	r4, #0
 801c7fe:	e7bc      	b.n	801c77a <lv_chart_event+0x4b6>
 801c800:	0802d110 	.word	0x0802d110
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 801c804:	f8da 2008 	ldr.w	r2, [sl, #8]
 801c808:	9f07      	ldr	r7, [sp, #28]
 801c80a:	4639      	mov	r1, r7
 801c80c:	a81a      	add	r0, sp, #104	; 0x68
 801c80e:	f004 f916 	bl	8020a3e <_lv_area_intersect>
 801c812:	2800      	cmp	r0, #0
 801c814:	f43f adb1 	beq.w	801c37a <lv_chart_event+0xb6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801c818:	f8da 3008 	ldr.w	r3, [sl, #8]
 801c81c:	9312      	str	r3, [sp, #72]	; 0x48
    draw_ctx->clip_area = &clip_area;
 801c81e:	ab1a      	add	r3, sp, #104	; 0x68
 801c820:	f8ca 3008 	str.w	r3, [sl, #8]
    if(chart->point_cnt < 2) return;
 801c824:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801c828:	2b01      	cmp	r3, #1
 801c82a:	f67f ada6 	bls.w	801c37a <lv_chart_event+0xb6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c82e:	2232      	movs	r2, #50	; 0x32
 801c830:	2100      	movs	r1, #0
 801c832:	4658      	mov	r0, fp
 801c834:	f7ed ffd8 	bl	800a7e8 <lv_obj_get_style_prop>
 801c838:	9003      	str	r0, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c83a:	2212      	movs	r2, #18
 801c83c:	2100      	movs	r1, #0
 801c83e:	4658      	mov	r0, fp
 801c840:	f7ed ffd2 	bl	800a7e8 <lv_obj_get_style_prop>
 801c844:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c846:	2210      	movs	r2, #16
 801c848:	2100      	movs	r1, #0
 801c84a:	4658      	mov	r0, fp
 801c84c:	f7ed ffcc 	bl	800a7e8 <lv_obj_get_style_prop>
 801c850:	9005      	str	r0, [sp, #20]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c852:	4658      	mov	r0, fp
 801c854:	f7eb f955 	bl	8007b02 <lv_obj_get_content_width>
 801c858:	4681      	mov	r9, r0
 801c85a:	f8bb 4084 	ldrh.w	r4, [fp, #132]	; 0x84
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801c85e:	4658      	mov	r0, fp
 801c860:	f7eb f96c 	bl	8007b3c <lv_obj_get_content_height>
 801c864:	9006      	str	r0, [sp, #24]
 801c866:	f8bb 5086 	ldrh.w	r5, [fp, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801c86a:	f9bb 6014 	ldrsh.w	r6, [fp, #20]
 801c86e:	4658      	mov	r0, fp
 801c870:	f7ec fd9e 	bl	80093b0 <lv_obj_get_scroll_left>
 801c874:	9008      	str	r0, [sp, #32]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 801c876:	f9bb 3016 	ldrsh.w	r3, [fp, #22]
 801c87a:	9309      	str	r3, [sp, #36]	; 0x24
 801c87c:	4658      	mov	r0, fp
 801c87e:	f7ec fd25 	bl	80092cc <lv_obj_get_scroll_top>
 801c882:	900b      	str	r0, [sp, #44]	; 0x2c
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 801c884:	f8da 2008 	ldr.w	r2, [sl, #8]
 801c888:	4639      	mov	r1, r7
 801c88a:	a81c      	add	r0, sp, #112	; 0x70
 801c88c:	f004 f8d7 	bl	8020a3e <_lv_area_intersect>
    if(mask_ret == false) return;
 801c890:	2800      	cmp	r0, #0
 801c892:	f43f ad72 	beq.w	801c37a <lv_chart_event+0xb6>
    lv_draw_line_dsc_init(&line_dsc_default);
 801c896:	a822      	add	r0, sp, #136	; 0x88
 801c898:	f7f1 fa13 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 801c89c:	aa22      	add	r2, sp, #136	; 0x88
 801c89e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801c8a2:	4658      	mov	r0, fp
 801c8a4:	f7ea fdfe 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 801c8a8:	a830      	add	r0, sp, #192	; 0xc0
 801c8aa:	f7f2 fc5d 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 801c8ae:	aa30      	add	r2, sp, #192	; 0xc0
 801c8b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c8b4:	4658      	mov	r0, fp
 801c8b6:	f7ea fbd1 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801c8ba:	2201      	movs	r2, #1
 801c8bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c8c0:	4658      	mov	r0, fp
 801c8c2:	f7ed ff91 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c8c6:	b202      	sxth	r2, r0
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801c8c8:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801c8cc:	4413      	add	r3, r2
 801c8ce:	105f      	asrs	r7, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801c8d0:	2204      	movs	r2, #4
 801c8d2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801c8d6:	4658      	mov	r0, fp
 801c8d8:	f7ed ff86 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c8dc:	b202      	sxth	r2, r0
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801c8de:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801c8e2:	4413      	add	r3, r2
 801c8e4:	105b      	asrs	r3, r3, #1
 801c8e6:	461a      	mov	r2, r3
 801c8e8:	930f      	str	r3, [sp, #60]	; 0x3c
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 801c8ea:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 801c8ee:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 801c8f2:	42ba      	cmp	r2, r7
 801c8f4:	bfa8      	it	ge
 801c8f6:	463a      	movge	r2, r7
 801c8f8:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 801c8fc:	dd05      	ble.n	801c90a <lv_chart_event+0x646>
 801c8fe:	f89d 2091 	ldrb.w	r2, [sp, #145]	; 0x91
 801c902:	f042 0210 	orr.w	r2, r2, #16
 801c906:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801c90a:	2b01      	cmp	r3, #1
 801c90c:	d032      	beq.n	801c974 <lv_chart_event+0x6b0>
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 801c90e:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801c912:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c914:	fb04 f409 	mul.w	r4, r4, r9
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 801c918:	f344 240f 	sbfx	r4, r4, #8, #16
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801c91c:	4640      	mov	r0, r8
 801c91e:	f004 fe71 	bl	8021604 <_lv_ll_get_tail>
 801c922:	4681      	mov	r9, r0
 801c924:	2800      	cmp	r0, #0
 801c926:	f000 8182 	beq.w	801cc2e <lv_chart_event+0x96a>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c92a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801c92e:	9a06      	ldr	r2, [sp, #24]
 801c930:	fb05 f202 	mul.w	r2, r5, r2
 801c934:	4615      	mov	r5, r2
 801c936:	f342 220f 	sbfx	r2, r2, #8, #16
 801c93a:	9206      	str	r2, [sp, #24]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c93c:	9a04      	ldr	r2, [sp, #16]
 801c93e:	441a      	add	r2, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801c940:	4416      	add	r6, r2
 801c942:	9a08      	ldr	r2, [sp, #32]
 801c944:	1ab2      	subs	r2, r6, r2
 801c946:	b291      	uxth	r1, r2
 801c948:	910a      	str	r1, [sp, #40]	; 0x28
 801c94a:	b212      	sxth	r2, r2
 801c94c:	9215      	str	r2, [sp, #84]	; 0x54
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801c94e:	9a05      	ldr	r2, [sp, #20]
 801c950:	4413      	add	r3, r2
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 801c952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c954:	4413      	add	r3, r2
 801c956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c958:	1a9b      	subs	r3, r3, r2
 801c95a:	b29b      	uxth	r3, r3
 801c95c:	eb03 2325 	add.w	r3, r3, r5, asr #8
 801c960:	b29b      	uxth	r3, r3
 801c962:	9309      	str	r3, [sp, #36]	; 0x24
        part_draw_dsc.class_p = MY_CLASS;
 801c964:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 801c968:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801c96c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 801c970:	46a2      	mov	sl, r4
 801c972:	e102      	b.n	801cb7a <lv_chart_event+0x8b6>
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801c974:	f89d 3091 	ldrb.w	r3, [sp, #145]	; 0x91
 801c978:	f043 0310 	orr.w	r3, r3, #16
 801c97c:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 801c980:	e7c5      	b.n	801c90e <lv_chart_event+0x64a>
                    point_area.x1 = p1.x - point_w;
 801c982:	b280      	uxth	r0, r0
 801c984:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c986:	1a83      	subs	r3, r0, r2
 801c988:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                    point_area.x2 = p1.x + point_w;
 801c98c:	4410      	add	r0, r2
 801c98e:	f8ad 0080 	strh.w	r0, [sp, #128]	; 0x80
                    point_area.y1 = p1.y - point_h;
 801c992:	fa1f fc8c 	uxth.w	ip, ip
 801c996:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c998:	ebac 0302 	sub.w	r3, ip, r2
 801c99c:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                    point_area.y2 = p1.y + point_h;
 801c9a0:	4494      	add	ip, r2
 801c9a2:	f8ad c082 	strh.w	ip, [sp, #130]	; 0x82
                    part_draw_dsc.id = i - 1;
 801c9a6:	9b08      	ldr	r3, [sp, #32]
 801c9a8:	3b01      	subs	r3, #1
 801c9aa:	934c      	str	r3, [sp, #304]	; 0x130
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801c9ac:	9a04      	ldr	r2, [sp, #16]
 801c9ae:	0054      	lsls	r4, r2, #1
 801c9b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c9b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801c9b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c9bc:	4293      	cmp	r3, r2
 801c9be:	bf0c      	ite	eq
 801c9c0:	2300      	moveq	r3, #0
 801c9c2:	ab17      	addne	r3, sp, #92	; 0x5c
 801c9c4:	9347      	str	r3, [sp, #284]	; 0x11c
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801c9c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c9ca:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
 801c9ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c9d2:	4293      	cmp	r3, r2
 801c9d4:	bf0c      	ite	eq
 801c9d6:	2300      	moveq	r3, #0
 801c9d8:	ab18      	addne	r3, sp, #96	; 0x60
 801c9da:	9348      	str	r3, [sp, #288]	; 0x120
                    part_draw_dsc.draw_area = &point_area;
 801c9dc:	ab1f      	add	r3, sp, #124	; 0x7c
 801c9de:	9341      	str	r3, [sp, #260]	; 0x104
                    part_draw_dsc.value = ser->y_points[p_prev];
 801c9e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c9e4:	5f1b      	ldrsh	r3, [r3, r4]
 801c9e6:	934e      	str	r3, [sp, #312]	; 0x138
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c9e8:	aa3e      	add	r2, sp, #248	; 0xf8
 801c9ea:	211a      	movs	r1, #26
 801c9ec:	4658      	mov	r0, fp
 801c9ee:	f7e7 f987 	bl	8003d00 <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801c9f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c9f6:	5f1a      	ldrsh	r2, [r3, r4]
 801c9f8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801c9fc:	428a      	cmp	r2, r1
 801c9fe:	d004      	beq.n	801ca0a <lv_chart_event+0x746>
 801ca00:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
 801ca04:	428b      	cmp	r3, r1
 801ca06:	f040 809a 	bne.w	801cb3e <lv_chart_event+0x87a>
                    if(point_w && point_h && ser->y_points[p_prev] != LV_CHART_POINT_NONE) {
 801ca0a:	9b03      	ldr	r3, [sp, #12]
 801ca0c:	b14b      	cbz	r3, 801ca22 <lv_chart_event+0x75e>
 801ca0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca10:	b13b      	cbz	r3, 801ca22 <lv_chart_event+0x75e>
 801ca12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ca16:	5f1b      	ldrsh	r3, [r3, r4]
 801ca18:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ca1c:	4293      	cmp	r3, r2
 801ca1e:	f040 8095 	bne.w	801cb4c <lv_chart_event+0x888>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801ca22:	aa3e      	add	r2, sp, #248	; 0xf8
 801ca24:	211b      	movs	r1, #27
 801ca26:	4658      	mov	r0, fp
 801ca28:	f7e7 f96a 	bl	8003d00 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 801ca2c:	3501      	adds	r5, #1
 801ca2e:	b2ad      	uxth	r5, r5
 801ca30:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801ca34:	42aa      	cmp	r2, r5
 801ca36:	f240 808f 	bls.w	801cb58 <lv_chart_event+0x894>
            p_act = (start_point + i) % chart->point_cnt;
 801ca3a:	9604      	str	r6, [sp, #16]
            p1.x = p2.x;
 801ca3c:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 801ca40:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
            p1.y = p2.y;
 801ca44:	f9bd c062 	ldrsh.w	ip, [sp, #98]	; 0x62
 801ca48:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
            if(p1.x > clip_area_ori->x2 + point_w + 1) break;
 801ca4c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801ca50:	9903      	ldr	r1, [sp, #12]
 801ca52:	440b      	add	r3, r1
 801ca54:	3301      	adds	r3, #1
 801ca56:	4298      	cmp	r0, r3
 801ca58:	f300 8081 	bgt.w	801cb5e <lv_chart_event+0x89a>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 801ca5c:	9508      	str	r5, [sp, #32]
 801ca5e:	fb05 f30a 	mul.w	r3, r5, sl
 801ca62:	1e51      	subs	r1, r2, #1
 801ca64:	fb93 f3f1 	sdiv	r3, r3, r1
 801ca68:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ca6a:	440b      	add	r3, r1
 801ca6c:	b299      	uxth	r1, r3
 801ca6e:	910b      	str	r1, [sp, #44]	; 0x2c
 801ca70:	b21b      	sxth	r3, r3
 801ca72:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            p_act = (start_point + i) % chart->point_cnt;
 801ca76:	9905      	ldr	r1, [sp, #20]
 801ca78:	4429      	add	r1, r5
 801ca7a:	fb91 f4f2 	sdiv	r4, r1, r2
 801ca7e:	fb02 1214 	mls	r2, r2, r4, r1
 801ca82:	b216      	sxth	r6, r2
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 801ca84:	f8d9 e004 	ldr.w	lr, [r9, #4]
 801ca88:	f899 100c 	ldrb.w	r1, [r9, #12]
 801ca8c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 801ca90:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 801ca94:	f9b1 406c 	ldrsh.w	r4, [r1, #108]	; 0x6c
 801ca98:	f93e 2016 	ldrsh.w	r2, [lr, r6, lsl #1]
 801ca9c:	1b12      	subs	r2, r2, r4
 801ca9e:	9f06      	ldr	r7, [sp, #24]
 801caa0:	fb07 f202 	mul.w	r2, r7, r2
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801caa4:	f9b1 1070 	ldrsh.w	r1, [r1, #112]	; 0x70
 801caa8:	1b09      	subs	r1, r1, r4
 801caaa:	fb92 f4f1 	sdiv	r4, r2, r1
            p2.y  = h - y_tmp + y_ofs;
 801caae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cab0:	1b14      	subs	r4, r2, r4
 801cab2:	b224      	sxth	r4, r4
 801cab4:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
            if(p2.x < clip_area_ori->x1 - point_w - 1) {
 801cab8:	f9b8 2000 	ldrsh.w	r2, [r8]
 801cabc:	9903      	ldr	r1, [sp, #12]
 801cabe:	1a52      	subs	r2, r2, r1
 801cac0:	3a01      	subs	r2, #1
 801cac2:	4293      	cmp	r3, r2
 801cac4:	dbb2      	blt.n	801ca2c <lv_chart_event+0x768>
            if(i != 0) {
 801cac6:	2d00      	cmp	r5, #0
 801cac8:	d0b0      	beq.n	801ca2c <lv_chart_event+0x768>
                if(crowded_mode) {
 801caca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cacc:	4552      	cmp	r2, sl
 801cace:	f6ff af58 	blt.w	801c982 <lv_chart_event+0x6be>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801cad2:	9a04      	ldr	r2, [sp, #16]
 801cad4:	f93e 2012 	ldrsh.w	r2, [lr, r2, lsl #1]
 801cad8:	f647 77ff 	movw	r7, #32767	; 0x7fff
 801cadc:	42ba      	cmp	r2, r7
 801cade:	d0a5      	beq.n	801ca2c <lv_chart_event+0x768>
 801cae0:	f93e 2016 	ldrsh.w	r2, [lr, r6, lsl #1]
 801cae4:	42ba      	cmp	r2, r7
 801cae6:	d0a1      	beq.n	801ca2c <lv_chart_event+0x768>
                        y_max = LV_MAX(y_max, p2.y);
 801cae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801caea:	42a2      	cmp	r2, r4
 801caec:	bfb8      	it	lt
 801caee:	4622      	movlt	r2, r4
 801caf0:	920e      	str	r2, [sp, #56]	; 0x38
                        y_min = LV_MIN(y_min, p2.y);
 801caf2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801caf4:	42a7      	cmp	r7, r4
 801caf6:	bfa8      	it	ge
 801caf8:	4627      	movge	r7, r4
 801cafa:	9710      	str	r7, [sp, #64]	; 0x40
                        if(p1.x != p2.x) {
 801cafc:	4298      	cmp	r0, r3
 801cafe:	d095      	beq.n	801ca2c <lv_chart_event+0x768>
                            p2.x--;         /*It's already on the next x value*/
 801cb00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cb02:	1e4b      	subs	r3, r1, #1
 801cb04:	b21b      	sxth	r3, r3
 801cb06:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                            p1.x = p2.x;
 801cb0a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                            p1.y = y_min;
 801cb0e:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 801cb12:	42ba      	cmp	r2, r7
                            p2.y = y_max;
 801cb14:	bf11      	iteee	ne
 801cb16:	f8ad 2062 	strhne.w	r2, [sp, #98]	; 0x62
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 801cb1a:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 801cb1c:	3301      	addeq	r3, #1
 801cb1e:	f8ad 3062 	strheq.w	r3, [sp, #98]	; 0x62
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 801cb22:	ab18      	add	r3, sp, #96	; 0x60
 801cb24:	aa17      	add	r2, sp, #92	; 0x5c
 801cb26:	a922      	add	r1, sp, #136	; 0x88
 801cb28:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cb2a:	f7f1 f8e1 	bl	800dcf0 <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 801cb2e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801cb32:	3301      	adds	r3, #1
 801cb34:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                            y_max = y_cur;
 801cb38:	940e      	str	r4, [sp, #56]	; 0x38
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 801cb3a:	9410      	str	r4, [sp, #64]	; 0x40
 801cb3c:	e776      	b.n	801ca2c <lv_chart_event+0x768>
                        lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 801cb3e:	ab18      	add	r3, sp, #96	; 0x60
 801cb40:	aa17      	add	r2, sp, #92	; 0x5c
 801cb42:	a922      	add	r1, sp, #136	; 0x88
 801cb44:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cb46:	f7f1 f8d3 	bl	800dcf0 <lv_draw_line>
 801cb4a:	e75e      	b.n	801ca0a <lv_chart_event+0x746>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801cb4c:	aa1f      	add	r2, sp, #124	; 0x7c
 801cb4e:	a930      	add	r1, sp, #192	; 0xc0
 801cb50:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cb52:	f7f2 fb65 	bl	800f220 <lv_draw_rect>
 801cb56:	e764      	b.n	801ca22 <lv_chart_event+0x75e>
            p_act = (start_point + i) % chart->point_cnt;
 801cb58:	9f03      	ldr	r7, [sp, #12]
 801cb5a:	9604      	str	r6, [sp, #16]
 801cb5c:	e000      	b.n	801cb60 <lv_chart_event+0x89c>
 801cb5e:	9f03      	ldr	r7, [sp, #12]
        if(!crowded_mode && i == chart->point_cnt) {
 801cb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb62:	4553      	cmp	r3, sl
 801cb64:	da02      	bge.n	801cb6c <lv_chart_event+0x8a8>
 801cb66:	4295      	cmp	r5, r2
 801cb68:	f000 8471 	beq.w	801d44e <lv_chart_event+0x118a>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801cb6c:	4649      	mov	r1, r9
 801cb6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cb70:	f004 fd50 	bl	8021614 <_lv_ll_get_prev>
 801cb74:	4681      	mov	r9, r0
 801cb76:	2800      	cmp	r0, #0
 801cb78:	d057      	beq.n	801cc2a <lv_chart_event+0x966>
        if(ser->hidden) continue;
 801cb7a:	f899 300c 	ldrb.w	r3, [r9, #12]
 801cb7e:	f013 0f01 	tst.w	r3, #1
 801cb82:	d1f3      	bne.n	801cb6c <lv_chart_event+0x8a8>
        line_dsc_default.color = ser->color;
 801cb84:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801cb88:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 801cb8c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801cb90:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801cb94:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801cb98:	f013 0f08 	tst.w	r3, #8
 801cb9c:	bf0c      	ite	eq
 801cb9e:	f9b9 300a 	ldrsheq.w	r3, [r9, #10]
 801cba2:	2300      	movne	r3, #0
 801cba4:	9305      	str	r3, [sp, #20]
        p1.x = x_ofs;
 801cba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cba8:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        p2.x = x_ofs;
 801cbac:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 801cbb0:	f899 200c 	ldrb.w	r2, [r9, #12]
 801cbb4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801cbb8:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801cbbc:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 801cbc0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801cbc4:	9c05      	ldr	r4, [sp, #20]
 801cbc6:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 801cbca:	1a5b      	subs	r3, r3, r1
 801cbcc:	9806      	ldr	r0, [sp, #24]
 801cbce:	fb00 f303 	mul.w	r3, r0, r3
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801cbd2:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
 801cbd6:	1a52      	subs	r2, r2, r1
 801cbd8:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
 801cbdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cbde:	1ad3      	subs	r3, r2, r3
 801cbe0:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801cbe4:	990d      	ldr	r1, [sp, #52]	; 0x34
 801cbe6:	a83e      	add	r0, sp, #248	; 0xf8
 801cbe8:	f7ea fd73 	bl	80076d2 <lv_obj_draw_dsc_init>
        part_draw_dsc.class_p = MY_CLASS;
 801cbec:	4bb9      	ldr	r3, [pc, #740]	; (801ced4 <lv_chart_event+0xc10>)
 801cbee:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 801cbf0:	2303      	movs	r3, #3
 801cbf2:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.part = LV_PART_ITEMS;
 801cbf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801cbf8:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.line_dsc = &line_dsc_default;
 801cbfa:	ab22      	add	r3, sp, #136	; 0x88
 801cbfc:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 801cbfe:	ab30      	add	r3, sp, #192	; 0xc0
 801cc00:	9342      	str	r3, [sp, #264]	; 0x108
        part_draw_dsc.sub_part_ptr = ser;
 801cc02:	f8cd 913c 	str.w	r9, [sp, #316]	; 0x13c
        lv_coord_t y_min = p2.y;
 801cc06:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801cc0a:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < chart->point_cnt; i++) {
 801cc0c:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801cc10:	2a00      	cmp	r2, #0
 801cc12:	f000 8416 	beq.w	801d442 <lv_chart_event+0x117e>
        lv_coord_t y_min = p2.y;
 801cc16:	9310      	str	r3, [sp, #64]	; 0x40
        lv_coord_t p_act = start_point;
 801cc18:	9404      	str	r4, [sp, #16]
        for(i = 0; i < chart->point_cnt; i++) {
 801cc1a:	2500      	movs	r5, #0
                    point_area.x1 = p1.x - point_w;
 801cc1c:	b2bb      	uxth	r3, r7
 801cc1e:	9313      	str	r3, [sp, #76]	; 0x4c
                    point_area.y1 = p1.y - point_h;
 801cc20:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801cc24:	9314      	str	r3, [sp, #80]	; 0x50
 801cc26:	9703      	str	r7, [sp, #12]
 801cc28:	e708      	b.n	801ca3c <lv_chart_event+0x778>
 801cc2a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    draw_ctx->clip_area = clip_area_ori;
 801cc2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cc30:	f8ca 3008 	str.w	r3, [sl, #8]
 801cc34:	f7ff bba1 	b.w	801c37a <lv_chart_event+0xb6>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 801cc38:	f8da 2008 	ldr.w	r2, [sl, #8]
 801cc3c:	9907      	ldr	r1, [sp, #28]
 801cc3e:	a81f      	add	r0, sp, #124	; 0x7c
 801cc40:	f003 fefd 	bl	8020a3e <_lv_area_intersect>
 801cc44:	2800      	cmp	r0, #0
 801cc46:	f43f ab98 	beq.w	801c37a <lv_chart_event+0xb6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801cc4a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801cc4e:	930f      	str	r3, [sp, #60]	; 0x3c
    draw_ctx->clip_area = &clip_area;
 801cc50:	ab1f      	add	r3, sp, #124	; 0x7c
 801cc52:	f8ca 3008 	str.w	r3, [sl, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801cc56:	2212      	movs	r2, #18
 801cc58:	2100      	movs	r1, #0
 801cc5a:	4658      	mov	r0, fp
 801cc5c:	f7ed fdc4 	bl	800a7e8 <lv_obj_get_style_prop>
 801cc60:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801cc62:	2210      	movs	r2, #16
 801cc64:	2100      	movs	r1, #0
 801cc66:	4658      	mov	r0, fp
 801cc68:	f7ed fdbe 	bl	800a7e8 <lv_obj_get_style_prop>
 801cc6c:	4606      	mov	r6, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cc6e:	4658      	mov	r0, fp
 801cc70:	f7ea ff47 	bl	8007b02 <lv_obj_get_content_width>
 801cc74:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801cc78:	fb00 f303 	mul.w	r3, r0, r3
 801cc7c:	f343 270f 	sbfx	r7, r3, #8, #16
 801cc80:	970a      	str	r7, [sp, #40]	; 0x28
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801cc82:	4658      	mov	r0, fp
 801cc84:	f7ea ff5a 	bl	8007b3c <lv_obj_get_content_height>
 801cc88:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 801cc8c:	fb00 f303 	mul.w	r3, r0, r3
 801cc90:	121a      	asrs	r2, r3, #8
 801cc92:	9204      	str	r2, [sp, #16]
 801cc94:	f343 230f 	sbfx	r3, r3, #8, #16
 801cc98:	9305      	str	r3, [sp, #20]
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 801cc9a:	4640      	mov	r0, r8
 801cc9c:	f004 fcbd 	bl	802161a <_lv_ll_get_len>
 801cca0:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801cca2:	2215      	movs	r2, #21
 801cca4:	2100      	movs	r1, #0
 801cca6:	4658      	mov	r0, fp
 801cca8:	f7ed fd9e 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ccac:	b202      	sxth	r2, r0
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801ccae:	f8bb 1082 	ldrh.w	r1, [fp, #130]	; 0x82
                                                              LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801ccb2:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801ccb6:	fb02 f303 	mul.w	r3, r2, r3
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801ccba:	121b      	asrs	r3, r3, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801ccbc:	1e4a      	subs	r2, r1, #1
 801ccbe:	fb02 7313 	mls	r3, r2, r3, r7
 801ccc2:	fb93 f3f1 	sdiv	r3, r3, r1
 801ccc6:	fa0f f983 	sxth.w	r9, r3
 801ccca:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801ccce:	2215      	movs	r2, #21
 801ccd0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ccd4:	4658      	mov	r0, fp
 801ccd6:	f7ed fd87 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ccda:	b202      	sxth	r2, r0
                                                            LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the columns on the ~same X*/
 801ccdc:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801cce0:	fb02 f303 	mul.w	r3, r2, r3
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801cce4:	121b      	asrs	r3, r3, #8
 801cce6:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t col_w = (block_w - (ser_cnt - 1) * ser_gap) / ser_cnt;
 801cce8:	1e67      	subs	r7, r4, #1
 801ccea:	fb03 9717 	mls	r7, r3, r7, r9
 801ccee:	fbb7 f7f4 	udiv	r7, r7, r4
 801ccf2:	b23f      	sxth	r7, r7
    if(col_w < 1) col_w  = 1;
 801ccf4:	2f01      	cmp	r7, #1
 801ccf6:	bfb8      	it	lt
 801ccf8:	2701      	movlt	r7, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801ccfa:	2232      	movs	r2, #50	; 0x32
 801ccfc:	2100      	movs	r1, #0
 801ccfe:	4658      	mov	r0, fp
 801cd00:	f7ed fd72 	bl	800a7e8 <lv_obj_get_style_prop>
 801cd04:	4604      	mov	r4, r0
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 801cd06:	4658      	mov	r0, fp
 801cd08:	f7ec fb52 	bl	80093b0 <lv_obj_get_scroll_left>
 801cd0c:	b2a4      	uxth	r4, r4
 801cd0e:	4425      	add	r5, r4
 801cd10:	1a2d      	subs	r5, r5, r0
 801cd12:	b2ab      	uxth	r3, r5
 801cd14:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 801cd16:	4658      	mov	r0, fp
 801cd18:	f7ec fad8 	bl	80092cc <lv_obj_get_scroll_top>
 801cd1c:	4434      	add	r4, r6
 801cd1e:	1a24      	subs	r4, r4, r0
 801cd20:	b2a3      	uxth	r3, r4
 801cd22:	9306      	str	r3, [sp, #24]
    lv_draw_rect_dsc_init(&col_dsc);
 801cd24:	a830      	add	r0, sp, #192	; 0xc0
 801cd26:	f7f2 fa1f 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 801cd2a:	aa30      	add	r2, sp, #192	; 0xc0
 801cd2c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801cd30:	4658      	mov	r0, fp
 801cd32:	f7ea f993 	bl	800705c <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 801cd36:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
 801cd3a:	f36f 0302 	bfc	r3, #0, #3
 801cd3e:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
    col_dsc.bg_opa = LV_OPA_COVER;
 801cd42:	23ff      	movs	r3, #255	; 0xff
 801cd44:	f88d 30c3 	strb.w	r3, [sp, #195]	; 0xc3
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 801cd48:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 801cd4c:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 801cd50:	4413      	add	r3, r2
 801cd52:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801cd56:	4651      	mov	r1, sl
 801cd58:	a83e      	add	r0, sp, #248	; 0xf8
 801cd5a:	f7ea fcba 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 801cd5e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801cd62:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 801cd64:	4b5b      	ldr	r3, [pc, #364]	; (801ced4 <lv_chart_event+0xc10>)
 801cd66:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_BAR;
 801cd68:	2304      	movs	r3, #4
 801cd6a:	9340      	str	r3, [sp, #256]	; 0x100
    for(i = 0; i < chart->point_cnt; i++) {
 801cd6c:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	f000 80aa 	beq.w	801ceca <lv_chart_event+0xc06>
 801cd76:	2200      	movs	r2, #0
 801cd78:	9208      	str	r2, [sp, #32]
            col_a.x2 = col_a.x1 + col_w - 1;
 801cd7a:	b2ba      	uxth	r2, r7
 801cd7c:	920e      	str	r2, [sp, #56]	; 0x38
 801cd7e:	1e57      	subs	r7, r2, #1
 801cd80:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801cd84:	e07f      	b.n	801ce86 <lv_chart_event+0xbc2>
                part_draw_dsc.draw_area = &col_a;
 801cd86:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 801cd8a:	f8cd a104 	str.w	sl, [sp, #260]	; 0x104
                part_draw_dsc.rect_dsc = &col_dsc;
 801cd8e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 801cd92:	f8cd 9108 	str.w	r9, [sp, #264]	; 0x108
                part_draw_dsc.sub_part_ptr = ser;
 801cd96:	944f      	str	r4, [sp, #316]	; 0x13c
                part_draw_dsc.value = ser->y_points[p_act];
 801cd98:	6862      	ldr	r2, [r4, #4]
 801cd9a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801cd9e:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801cda0:	aa3e      	add	r2, sp, #248	; 0xf8
 801cda2:	211a      	movs	r1, #26
 801cda4:	4658      	mov	r0, fp
 801cda6:	f7e6 ffab 	bl	8003d00 <lv_event_send>
                lv_draw_rect(draw_ctx, &col_dsc, &col_a);
 801cdaa:	4652      	mov	r2, sl
 801cdac:	4649      	mov	r1, r9
 801cdae:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cdb0:	f7f2 fa36 	bl	800f220 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801cdb4:	aa3e      	add	r2, sp, #248	; 0xf8
 801cdb6:	211b      	movs	r1, #27
 801cdb8:	4658      	mov	r0, fp
 801cdba:	f7e6 ffa1 	bl	8003d00 <lv_event_send>
            x_act += col_w + ser_gap;
 801cdbe:	46a9      	mov	r9, r5
 801cdc0:	e000      	b.n	801cdc4 <lv_chart_event+0xb00>
 801cdc2:	46a9      	mov	r9, r5
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801cdc4:	4621      	mov	r1, r4
 801cdc6:	4640      	mov	r0, r8
 801cdc8:	f004 fc24 	bl	8021614 <_lv_ll_get_prev>
 801cdcc:	4604      	mov	r4, r0
 801cdce:	2800      	cmp	r0, #0
 801cdd0:	d051      	beq.n	801ce76 <lv_chart_event+0xbb2>
            if(ser->hidden) continue;
 801cdd2:	7b23      	ldrb	r3, [r4, #12]
 801cdd4:	f013 0f01 	tst.w	r3, #1
 801cdd8:	d1f4      	bne.n	801cdc4 <lv_chart_event+0xb00>
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801cdda:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801cdde:	f013 0f08 	tst.w	r3, #8
 801cde2:	bf0c      	ite	eq
 801cde4:	f9b4 200a 	ldrsheq.w	r2, [r4, #10]
 801cde8:	2200      	movne	r2, #0
            col_a.x1 = x_act;
 801cdea:	f8ad 9088 	strh.w	r9, [sp, #136]	; 0x88
            col_a.x2 = col_a.x1 + col_w - 1;
 801cdee:	fa1f f589 	uxth.w	r5, r9
 801cdf2:	19eb      	adds	r3, r5, r7
 801cdf4:	b21b      	sxth	r3, r3
 801cdf6:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            x_act += col_w + ser_gap;
 801cdfa:	4435      	add	r5, r6
 801cdfc:	b22d      	sxth	r5, r5
            if(col_a.x2 < clip_area.x1) continue;
 801cdfe:	f9bd 107c 	ldrsh.w	r1, [sp, #124]	; 0x7c
 801ce02:	4299      	cmp	r1, r3
 801ce04:	dcdd      	bgt.n	801cdc2 <lv_chart_event+0xafe>
            if(col_a.x1 > clip_area.x2) break;
 801ce06:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
 801ce0a:	454b      	cmp	r3, r9
 801ce0c:	db33      	blt.n	801ce76 <lv_chart_event+0xbb2>
            col_dsc.bg_color = ser->color;
 801ce0e:	8923      	ldrh	r3, [r4, #8]
 801ce10:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 801ce14:	9b03      	ldr	r3, [sp, #12]
 801ce16:	18d3      	adds	r3, r2, r3
 801ce18:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801ce1c:	fb93 f1f2 	sdiv	r1, r3, r2
 801ce20:	fb02 3311 	mls	r3, r2, r1, r3
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 801ce24:	b21b      	sxth	r3, r3
 801ce26:	6860      	ldr	r0, [r4, #4]
 801ce28:	7b22      	ldrb	r2, [r4, #12]
 801ce2a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801ce2e:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801ce32:	f9b2 e06c 	ldrsh.w	lr, [r2, #108]	; 0x6c
 801ce36:	f930 c013 	ldrsh.w	ip, [r0, r3, lsl #1]
 801ce3a:	ebac 0c0e 	sub.w	ip, ip, lr
 801ce3e:	9905      	ldr	r1, [sp, #20]
 801ce40:	fb01 fc0c 	mul.w	ip, r1, ip
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 801ce44:	f8bb 1016 	ldrh.w	r1, [fp, #22]
 801ce48:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801ce4c:	4449      	add	r1, r9
 801ce4e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801ce52:	4449      	add	r1, r9
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801ce54:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
 801ce58:	eba2 020e 	sub.w	r2, r2, lr
 801ce5c:	fb9c f2f2 	sdiv	r2, ip, r2
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 801ce60:	1a8a      	subs	r2, r1, r2
 801ce62:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801ce66:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 801ce6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ce6e:	4291      	cmp	r1, r2
 801ce70:	d189      	bne.n	801cd86 <lv_chart_event+0xac2>
            x_act += col_w + ser_gap;
 801ce72:	46a9      	mov	r9, r5
 801ce74:	e7a6      	b.n	801cdc4 <lv_chart_event+0xb00>
    for(i = 0; i < chart->point_cnt; i++) {
 801ce76:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801ce7a:	9a08      	ldr	r2, [sp, #32]
 801ce7c:	3201      	adds	r2, #1
 801ce7e:	9208      	str	r2, [sp, #32]
 801ce80:	b292      	uxth	r2, r2
 801ce82:	4293      	cmp	r3, r2
 801ce84:	d91f      	bls.n	801cec6 <lv_chart_event+0xc02>
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 801ce86:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801ce8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ce8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ce8e:	eba2 0901 	sub.w	r9, r2, r1
 801ce92:	fb0a f909 	mul.w	r9, sl, r9
 801ce96:	3b01      	subs	r3, #1
 801ce98:	fb99 f9f3 	sdiv	r9, r9, r3
 801ce9c:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801cea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cea2:	4413      	add	r3, r2
 801cea4:	4499      	add	r9, r3
 801cea6:	fa0f f989 	sxth.w	r9, r9
        part_draw_dsc.id = i;
 801ceaa:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801ceae:	4640      	mov	r0, r8
 801ceb0:	f004 fba8 	bl	8021604 <_lv_ll_get_tail>
 801ceb4:	4604      	mov	r4, r0
 801ceb6:	2800      	cmp	r0, #0
 801ceb8:	d0dd      	beq.n	801ce76 <lv_chart_event+0xbb2>
            x_act += col_w + ser_gap;
 801ceba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cebe:	189e      	adds	r6, r3, r2
 801cec0:	f8cd a00c 	str.w	sl, [sp, #12]
 801cec4:	e785      	b.n	801cdd2 <lv_chart_event+0xb0e>
 801cec6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    draw_ctx->clip_area = clip_area_ori;
 801ceca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cecc:	f8ca 3008 	str.w	r3, [sl, #8]
 801ced0:	f7ff ba53 	b.w	801c37a <lv_chart_event+0xb6>
 801ced4:	0802d110 	.word	0x0802d110
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 801ced8:	f8da 2008 	ldr.w	r2, [sl, #8]
 801cedc:	9907      	ldr	r1, [sp, #28]
 801cede:	a81c      	add	r0, sp, #112	; 0x70
 801cee0:	f003 fdad 	bl	8020a3e <_lv_area_intersect>
 801cee4:	2800      	cmp	r0, #0
 801cee6:	f43f aa48 	beq.w	801c37a <lv_chart_event+0xb6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801ceea:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ceee:	930f      	str	r3, [sp, #60]	; 0x3c
    draw_ctx->clip_area = &clip_area;
 801cef0:	ab1c      	add	r3, sp, #112	; 0x70
 801cef2:	f8ca 3008 	str.w	r3, [sl, #8]
 801cef6:	2232      	movs	r2, #50	; 0x32
 801cef8:	2100      	movs	r1, #0
 801cefa:	4658      	mov	r0, fp
 801cefc:	f7ed fc74 	bl	800a7e8 <lv_obj_get_style_prop>
 801cf00:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801cf02:	2212      	movs	r2, #18
 801cf04:	2100      	movs	r1, #0
 801cf06:	4658      	mov	r0, fp
 801cf08:	f7ed fc6e 	bl	800a7e8 <lv_obj_get_style_prop>
 801cf0c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801cf0e:	2210      	movs	r2, #16
 801cf10:	2100      	movs	r1, #0
 801cf12:	4658      	mov	r0, fp
 801cf14:	f7ed fc68 	bl	800a7e8 <lv_obj_get_style_prop>
 801cf18:	4605      	mov	r5, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cf1a:	4658      	mov	r0, fp
 801cf1c:	f7ea fdf1 	bl	8007b02 <lv_obj_get_content_width>
 801cf20:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801cf24:	fb00 f303 	mul.w	r3, r0, r3
 801cf28:	f343 230f 	sbfx	r3, r3, #8, #16
 801cf2c:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801cf2e:	4658      	mov	r0, fp
 801cf30:	f7ea fe04 	bl	8007b3c <lv_obj_get_content_height>
 801cf34:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 801cf38:	fb00 f303 	mul.w	r3, r0, r3
 801cf3c:	ea4f 2923 	mov.w	r9, r3, asr #8
 801cf40:	f343 230f 	sbfx	r3, r3, #8, #16
 801cf44:	9306      	str	r3, [sp, #24]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 801cf46:	b2a4      	uxth	r4, r4
 801cf48:	4426      	add	r6, r4
 801cf4a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801cf4e:	441e      	add	r6, r3
 801cf50:	b2b6      	uxth	r6, r6
 801cf52:	4658      	mov	r0, fp
 801cf54:	f7ec fa2c 	bl	80093b0 <lv_obj_get_scroll_left>
 801cf58:	1a36      	subs	r6, r6, r0
 801cf5a:	b2b3      	uxth	r3, r6
 801cf5c:	9308      	str	r3, [sp, #32]
 801cf5e:	b233      	sxth	r3, r6
 801cf60:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 801cf62:	442c      	add	r4, r5
 801cf64:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 801cf68:	441c      	add	r4, r3
 801cf6a:	b2a4      	uxth	r4, r4
 801cf6c:	4658      	mov	r0, fp
 801cf6e:	f7ec f9ad 	bl	80092cc <lv_obj_get_scroll_top>
 801cf72:	1a24      	subs	r4, r4, r0
 801cf74:	b2a4      	uxth	r4, r4
    lv_draw_line_dsc_init(&line_dsc_default);
 801cf76:	a822      	add	r0, sp, #136	; 0x88
 801cf78:	f7f0 fea3 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 801cf7c:	aa22      	add	r2, sp, #136	; 0x88
 801cf7e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801cf82:	4658      	mov	r0, fp
 801cf84:	f7ea fa8e 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 801cf88:	a830      	add	r0, sp, #192	; 0xc0
 801cf8a:	f7f2 f8ed 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 801cf8e:	aa30      	add	r2, sp, #192	; 0xc0
 801cf90:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801cf94:	4658      	mov	r0, fp
 801cf96:	f7ea f861 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801cf9a:	2201      	movs	r2, #1
 801cf9c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801cfa0:	4658      	mov	r0, fp
 801cfa2:	f7ed fc21 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cfa6:	b202      	sxth	r2, r0
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801cfa8:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801cfac:	4413      	add	r3, r2
 801cfae:	105d      	asrs	r5, r3, #1
 801cfb0:	950a      	str	r5, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801cfb2:	2204      	movs	r2, #4
 801cfb4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801cfb8:	4658      	mov	r0, fp
 801cfba:	f7ed fc15 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cfbe:	b202      	sxth	r2, r0
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801cfc0:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801cfc4:	4413      	add	r3, r2
 801cfc6:	1058      	asrs	r0, r3, #1
 801cfc8:	900b      	str	r0, [sp, #44]	; 0x2c
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 801cfca:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 801cfce:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 801cfd2:	462a      	mov	r2, r5
 801cfd4:	4285      	cmp	r5, r0
 801cfd6:	bfa8      	it	ge
 801cfd8:	4602      	movge	r2, r0
 801cfda:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 801cfde:	dd05      	ble.n	801cfec <lv_chart_event+0xd28>
 801cfe0:	f89d 2091 	ldrb.w	r2, [sp, #145]	; 0x91
 801cfe4:	f042 0210 	orr.w	r2, r2, #16
 801cfe8:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801cfec:	2b01      	cmp	r3, #1
 801cfee:	d00e      	beq.n	801d00e <lv_chart_event+0xd4a>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801cff0:	4640      	mov	r0, r8
 801cff2:	f004 fb07 	bl	8021604 <_lv_ll_get_tail>
 801cff6:	4607      	mov	r7, r0
 801cff8:	2800      	cmp	r0, #0
 801cffa:	f000 815e 	beq.w	801d2ba <lv_chart_event+0xff6>
                p2.y += y_ofs;
 801cffe:	eb04 0309 	add.w	r3, r4, r9
 801d002:	9309      	str	r3, [sp, #36]	; 0x24
 801d004:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801d008:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801d00c:	e0de      	b.n	801d1cc <lv_chart_event+0xf08>
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801d00e:	f89d 3091 	ldrb.w	r3, [sp, #145]	; 0x91
 801d012:	f043 0310 	orr.w	r3, r3, #16
 801d016:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 801d01a:	e7e9      	b.n	801cff0 <lv_chart_event+0xd2c>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801d01c:	7b3b      	ldrb	r3, [r7, #12]
 801d01e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d022:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d026:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 801d02a:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	f933 0019 	ldrsh.w	r0, [r3, r9, lsl #1]
 801d034:	9b05      	ldr	r3, [sp, #20]
 801d036:	9300      	str	r3, [sp, #0]
 801d038:	2300      	movs	r3, #0
 801d03a:	f004 fbe5 	bl	8021808 <lv_map>
            p2.x += x_ofs;
 801d03e:	9b08      	ldr	r3, [sp, #32]
 801d040:	4403      	add	r3, r0
 801d042:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 801d046:	7b3b      	ldrb	r3, [r7, #12]
 801d048:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801d04c:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d050:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 801d054:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	f933 0019 	ldrsh.w	r0, [r3, r9, lsl #1]
 801d05e:	9b06      	ldr	r3, [sp, #24]
 801d060:	9300      	str	r3, [sp, #0]
 801d062:	2300      	movs	r3, #0
 801d064:	f004 fbd0 	bl	8021808 <lv_map>
            p2.y += y_ofs;
 801d068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d06a:	1a1b      	subs	r3, r3, r0
 801d06c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 801d070:	e0d0      	b.n	801d214 <lv_chart_event+0xf50>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d072:	aa3e      	add	r2, sp, #248	; 0xf8
 801d074:	211b      	movs	r1, #27
 801d076:	4658      	mov	r0, fp
 801d078:	f7e6 fe42 	bl	8003d00 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 801d07c:	3401      	adds	r4, #1
 801d07e:	b2a4      	uxth	r4, r4
 801d080:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801d084:	42a3      	cmp	r3, r4
 801d086:	f240 8099 	bls.w	801d1bc <lv_chart_event+0xef8>
            p1.x = p2.x;
 801d08a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 801d08e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p1.y = p2.y;
 801d092:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 801d096:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            p_act = (start_point + i) % chart->point_cnt;
 801d09a:	9404      	str	r4, [sp, #16]
 801d09c:	9503      	str	r5, [sp, #12]
 801d09e:	eb09 0504 	add.w	r5, r9, r4
 801d0a2:	fb95 f2f3 	sdiv	r2, r5, r3
 801d0a6:	fb03 5512 	mls	r5, r3, r2, r5
 801d0aa:	b22d      	sxth	r5, r5
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d0ac:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 801d0b6:	42b0      	cmp	r0, r6
 801d0b8:	d0e0      	beq.n	801d07c <lv_chart_event+0xdb8>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 801d0ba:	7b3b      	ldrb	r3, [r7, #12]
 801d0bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801d0c0:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d0c4:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 801d0c8:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 801d0cc:	f8dd c018 	ldr.w	ip, [sp, #24]
 801d0d0:	f8cd c000 	str.w	ip, [sp]
 801d0d4:	4643      	mov	r3, r8
 801d0d6:	f004 fb97 	bl	8021808 <lv_map>
                p2.y += y_ofs;
 801d0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0dc:	1a1b      	subs	r3, r3, r0
 801d0de:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801d0e2:	7b3b      	ldrb	r3, [r7, #12]
 801d0e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d0e8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d0ec:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 801d0f0:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 801d0f4:	683b      	ldr	r3, [r7, #0]
 801d0f6:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 801d0fa:	f8dd c014 	ldr.w	ip, [sp, #20]
 801d0fe:	f8cd c000 	str.w	ip, [sp]
 801d102:	4643      	mov	r3, r8
 801d104:	f004 fb80 	bl	8021808 <lv_map>
                p2.x += x_ofs;
 801d108:	9b08      	ldr	r3, [sp, #32]
 801d10a:	4403      	add	r3, r0
 801d10c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            if(i != 0) {
 801d110:	2c00      	cmp	r4, #0
 801d112:	d0b3      	beq.n	801d07c <lv_chart_event+0xdb8>
                point_area.x1 = p1.x - point_w;
 801d114:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801d118:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d11c:	1a99      	subs	r1, r3, r2
 801d11e:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.x2 = p1.x + point_w;
 801d122:	4413      	add	r3, r2
 801d124:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p1.y - point_h;
 801d128:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801d12c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d130:	1a99      	subs	r1, r3, r2
 801d132:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                point_area.y2 = p1.y + point_h;
 801d136:	4413      	add	r3, r2
 801d138:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 801d13c:	9b04      	ldr	r3, [sp, #16]
 801d13e:	3b01      	subs	r3, #1
 801d140:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	9a03      	ldr	r2, [sp, #12]
 801d146:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801d14a:	42b3      	cmp	r3, r6
 801d14c:	bf0c      	ite	eq
 801d14e:	4643      	moveq	r3, r8
 801d150:	ab18      	addne	r3, sp, #96	; 0x60
 801d152:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	f933 300a 	ldrsh.w	r3, [r3, sl]
 801d15a:	42b3      	cmp	r3, r6
 801d15c:	bf0c      	ite	eq
 801d15e:	4643      	moveq	r3, r8
 801d160:	ab1a      	addne	r3, sp, #104	; 0x68
 801d162:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.draw_area = &point_area;
 801d164:	ab1f      	add	r3, sp, #124	; 0x7c
 801d166:	9341      	str	r3, [sp, #260]	; 0x104
                part_draw_dsc.value = ser->y_points[p_prev];
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	9a03      	ldr	r2, [sp, #12]
 801d16c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801d170:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d172:	aa3e      	add	r2, sp, #248	; 0xf8
 801d174:	211a      	movs	r1, #26
 801d176:	4658      	mov	r0, fp
 801d178:	f7e6 fdc2 	bl	8003d00 <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	9a03      	ldr	r2, [sp, #12]
 801d180:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 801d184:	42b2      	cmp	r2, r6
 801d186:	f43f af74 	beq.w	801d072 <lv_chart_event+0xdae>
 801d18a:	f933 300a 	ldrsh.w	r3, [r3, sl]
 801d18e:	42b3      	cmp	r3, r6
 801d190:	f43f af6f 	beq.w	801d072 <lv_chart_event+0xdae>
                    lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 801d194:	ab1a      	add	r3, sp, #104	; 0x68
 801d196:	aa18      	add	r2, sp, #96	; 0x60
 801d198:	a922      	add	r1, sp, #136	; 0x88
 801d19a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d19c:	f7f0 fda8 	bl	800dcf0 <lv_draw_line>
                    if(point_w && point_h) {
 801d1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	f43f af65 	beq.w	801d072 <lv_chart_event+0xdae>
 801d1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	f43f af61 	beq.w	801d072 <lv_chart_event+0xdae>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801d1b0:	aa1f      	add	r2, sp, #124	; 0x7c
 801d1b2:	a930      	add	r1, sp, #192	; 0xc0
 801d1b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d1b6:	f7f2 f833 	bl	800f220 <lv_draw_rect>
 801d1ba:	e75a      	b.n	801d072 <lv_chart_event+0xdae>
        if(i == chart->point_cnt) {
 801d1bc:	d043      	beq.n	801d246 <lv_chart_event+0xf82>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801d1be:	4639      	mov	r1, r7
 801d1c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d1c2:	f004 fa27 	bl	8021614 <_lv_ll_get_prev>
 801d1c6:	4607      	mov	r7, r0
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d074      	beq.n	801d2b6 <lv_chart_event+0xff2>
        if(ser->hidden) continue;
 801d1cc:	7b3b      	ldrb	r3, [r7, #12]
 801d1ce:	f013 0f01 	tst.w	r3, #1
 801d1d2:	d1f4      	bne.n	801d1be <lv_chart_event+0xefa>
        line_dsc_default.color = ser->color;
 801d1d4:	893b      	ldrh	r3, [r7, #8]
 801d1d6:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 801d1da:	893b      	ldrh	r3, [r7, #8]
 801d1dc:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801d1e0:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801d1e4:	f013 0f08 	tst.w	r3, #8
 801d1e8:	bf0c      	ite	eq
 801d1ea:	f9b7 900a 	ldrsheq.w	r9, [r7, #10]
 801d1ee:	f04f 0900 	movne.w	r9, #0
        p1.x = x_ofs;
 801d1f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d1f4:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        p2.x = x_ofs;
 801d1f8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
 801d202:	2b0a      	cmp	r3, #10
 801d204:	f47f af0a 	bne.w	801d01c <lv_chart_event+0xd58>
            p2.x = LV_COORD_MIN;
 801d208:	f24e 0301 	movw	r3, #57345	; 0xe001
 801d20c:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = LV_COORD_MIN;
 801d210:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801d214:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d216:	a83e      	add	r0, sp, #248	; 0xf8
 801d218:	f7ea fa5b 	bl	80076d2 <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_ITEMS;
 801d21c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801d220:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.class_p = MY_CLASS;
 801d222:	4ba8      	ldr	r3, [pc, #672]	; (801d4c4 <lv_chart_event+0x1200>)
 801d224:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 801d226:	2303      	movs	r3, #3
 801d228:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.line_dsc = &line_dsc_default;
 801d22a:	ab22      	add	r3, sp, #136	; 0x88
 801d22c:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 801d22e:	ab30      	add	r3, sp, #192	; 0xc0
 801d230:	9342      	str	r3, [sp, #264]	; 0x108
        part_draw_dsc.sub_part_ptr = ser;
 801d232:	974f      	str	r7, [sp, #316]	; 0x13c
        for(i = 0; i < chart->point_cnt; i++) {
 801d234:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801d238:	b13b      	cbz	r3, 801d24a <lv_chart_event+0xf86>
        lv_coord_t p_act = start_point;
 801d23a:	464d      	mov	r5, r9
        for(i = 0; i < chart->point_cnt; i++) {
 801d23c:	2400      	movs	r4, #0
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d23e:	f647 76ff 	movw	r6, #32767	; 0x7fff
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 801d242:	46a0      	mov	r8, r4
 801d244:	e721      	b.n	801d08a <lv_chart_event+0xdc6>
            p_act = (start_point + i) % chart->point_cnt;
 801d246:	46a9      	mov	r9, r5
        for(i = 0; i < chart->point_cnt; i++) {
 801d248:	4623      	mov	r3, r4
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d24a:	687a      	ldr	r2, [r7, #4]
 801d24c:	f932 1019 	ldrsh.w	r1, [r2, r9, lsl #1]
 801d250:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d254:	4291      	cmp	r1, r2
 801d256:	d0b2      	beq.n	801d1be <lv_chart_event+0xefa>
                point_area.x1 = p2.x - point_w;
 801d258:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 801d25c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d260:	1a50      	subs	r0, r2, r1
 801d262:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
                point_area.x2 = p2.x + point_w;
 801d266:	440a      	add	r2, r1
 801d268:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 801d26c:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 801d270:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d274:	1a50      	subs	r0, r2, r1
 801d276:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
                point_area.y2 = p2.y + point_h;
 801d27a:	440a      	add	r2, r1
 801d27c:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 801d280:	3b01      	subs	r3, #1
 801d282:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = NULL;
 801d284:	2300      	movs	r3, #0
 801d286:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = NULL;
 801d288:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.draw_area = &point_area;
 801d28a:	ac1f      	add	r4, sp, #124	; 0x7c
 801d28c:	9441      	str	r4, [sp, #260]	; 0x104
                part_draw_dsc.value = ser->y_points[p_act];
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
 801d294:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d296:	aa3e      	add	r2, sp, #248	; 0xf8
 801d298:	211a      	movs	r1, #26
 801d29a:	4658      	mov	r0, fp
 801d29c:	f7e6 fd30 	bl	8003d00 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801d2a0:	4622      	mov	r2, r4
 801d2a2:	a930      	add	r1, sp, #192	; 0xc0
 801d2a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d2a6:	f7f1 ffbb 	bl	800f220 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d2aa:	aa3e      	add	r2, sp, #248	; 0xf8
 801d2ac:	211b      	movs	r1, #27
 801d2ae:	4658      	mov	r0, fp
 801d2b0:	f7e6 fd26 	bl	8003d00 <lv_event_send>
 801d2b4:	e783      	b.n	801d1be <lv_chart_event+0xefa>
 801d2b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    draw_ctx->clip_area = clip_area_ori;
 801d2ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d2bc:	f8ca 3008 	str.w	r3, [sl, #8]
 801d2c0:	f7ff b85b 	b.w	801c37a <lv_chart_event+0xb6>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 801d2c4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d2c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d2cc:	429a      	cmp	r2, r3
 801d2ce:	d07f      	beq.n	801d3d0 <lv_chart_event+0x110c>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 801d2d0:	ab1a      	add	r3, sp, #104	; 0x68
 801d2d2:	b292      	uxth	r2, r2
 801d2d4:	68a1      	ldr	r1, [r4, #8]
 801d2d6:	4658      	mov	r0, fp
 801d2d8:	f7fe fbc0 	bl	801ba5c <lv_chart_get_point_pos_by_id>
            cx = p.x;
 801d2dc:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
            cy = p.y;
 801d2e0:	f9bd 506a 	ldrsh.w	r5, [sp, #106]	; 0x6a
 801d2e4:	e098      	b.n	801d418 <lv_chart_event+0x1154>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 801d2e6:	aa1a      	add	r2, sp, #104	; 0x68
 801d2e8:	a930      	add	r1, sp, #192	; 0xc0
 801d2ea:	4650      	mov	r0, sl
 801d2ec:	f7f1 ff98 	bl	800f220 <lv_draw_rect>
 801d2f0:	e040      	b.n	801d374 <lv_chart_event+0x10b0>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 801d2f2:	aa1a      	add	r2, sp, #104	; 0x68
 801d2f4:	a930      	add	r1, sp, #192	; 0xc0
 801d2f6:	4650      	mov	r0, sl
 801d2f8:	f7f1 ff92 	bl	800f220 <lv_draw_rect>
 801d2fc:	e063      	b.n	801d3c6 <lv_chart_event+0x1102>
    draw_ctx->clip_area = clip_area_ori;
 801d2fe:	9b06      	ldr	r3, [sp, #24]
 801d300:	f8ca 3008 	str.w	r3, [sl, #8]
 801d304:	f7fe bfe7 	b.w	801c2d6 <lv_chart_event+0x12>
            point_area.x1 = cx - point_w;
 801d308:	fa1f f089 	uxth.w	r0, r9
 801d30c:	1a0f      	subs	r7, r1, r0
 801d30e:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
            point_area.x2 = cx + point_w;
 801d312:	4401      	add	r1, r0
 801d314:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
            point_area.y1 = cy - point_h;
 801d318:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d31c:	1a50      	subs	r0, r2, r1
 801d31e:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
            point_area.y2 = cy + point_h;
 801d322:	440a      	add	r2, r1
 801d324:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            part_draw_dsc.draw_area = &point_area;
 801d328:	aa1a      	add	r2, sp, #104	; 0x68
 801d32a:	9241      	str	r2, [sp, #260]	; 0x104
        bool draw_point = point_w && point_h;
 801d32c:	9f05      	ldr	r7, [sp, #20]
        if(cursor->dir & LV_DIR_HOR) {
 801d32e:	7b22      	ldrb	r2, [r4, #12]
 801d330:	f012 0f03 	tst.w	r2, #3
 801d334:	d023      	beq.n	801d37e <lv_chart_event+0x10ba>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 801d336:	f012 0f01 	tst.w	r2, #1
 801d33a:	bf08      	it	eq
 801d33c:	4633      	moveq	r3, r6
 801d33e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = cy;
 801d342:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 801d346:	f012 0f02 	tst.w	r2, #2
 801d34a:	bf14      	ite	ne
 801d34c:	f9bb 3018 	ldrshne.w	r3, [fp, #24]
 801d350:	4633      	moveq	r3, r6
 801d352:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p2.y = p1.y;
 801d356:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d35a:	aa3e      	add	r2, sp, #248	; 0xf8
 801d35c:	211a      	movs	r1, #26
 801d35e:	4658      	mov	r0, fp
 801d360:	f7e6 fcce 	bl	8003d00 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 801d364:	ab17      	add	r3, sp, #92	; 0x5c
 801d366:	aa16      	add	r2, sp, #88	; 0x58
 801d368:	a91f      	add	r1, sp, #124	; 0x7c
 801d36a:	4650      	mov	r0, sl
 801d36c:	f7f0 fcc0 	bl	800dcf0 <lv_draw_line>
            if(draw_point) {
 801d370:	2f00      	cmp	r7, #0
 801d372:	d1b8      	bne.n	801d2e6 <lv_chart_event+0x1022>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d374:	aa3e      	add	r2, sp, #248	; 0xf8
 801d376:	211b      	movs	r1, #27
 801d378:	4658      	mov	r0, fp
 801d37a:	f7e6 fcc1 	bl	8003d00 <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 801d37e:	7b23      	ldrb	r3, [r4, #12]
 801d380:	f013 0f0c 	tst.w	r3, #12
 801d384:	d024      	beq.n	801d3d0 <lv_chart_event+0x110c>
            p1.x = cx;
 801d386:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 801d38a:	f013 0f04 	tst.w	r3, #4
 801d38e:	bf14      	ite	ne
 801d390:	f9bb 2016 	ldrshne.w	r2, [fp, #22]
 801d394:	462a      	moveq	r2, r5
 801d396:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
            p2.x = p1.x;
 801d39a:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 801d39e:	f013 0f08 	tst.w	r3, #8
 801d3a2:	bf18      	it	ne
 801d3a4:	f9bb 501a 	ldrshne.w	r5, [fp, #26]
 801d3a8:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d3ac:	aa3e      	add	r2, sp, #248	; 0xf8
 801d3ae:	211a      	movs	r1, #26
 801d3b0:	4658      	mov	r0, fp
 801d3b2:	f7e6 fca5 	bl	8003d00 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 801d3b6:	ab17      	add	r3, sp, #92	; 0x5c
 801d3b8:	aa16      	add	r2, sp, #88	; 0x58
 801d3ba:	a91f      	add	r1, sp, #124	; 0x7c
 801d3bc:	4650      	mov	r0, sl
 801d3be:	f7f0 fc97 	bl	800dcf0 <lv_draw_line>
            if(draw_point) {
 801d3c2:	2f00      	cmp	r7, #0
 801d3c4:	d195      	bne.n	801d2f2 <lv_chart_event+0x102e>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d3c6:	aa3e      	add	r2, sp, #248	; 0xf8
 801d3c8:	211b      	movs	r1, #27
 801d3ca:	4658      	mov	r0, fp
 801d3cc:	f7e6 fc98 	bl	8003d00 <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 801d3d0:	4621      	mov	r1, r4
 801d3d2:	4640      	mov	r0, r8
 801d3d4:	f004 f91e 	bl	8021614 <_lv_ll_get_prev>
 801d3d8:	4604      	mov	r4, r0
 801d3da:	2800      	cmp	r0, #0
 801d3dc:	d08f      	beq.n	801d2fe <lv_chart_event+0x103a>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 801d3de:	220a      	movs	r2, #10
 801d3e0:	a91c      	add	r1, sp, #112	; 0x70
 801d3e2:	a81f      	add	r0, sp, #124	; 0x7c
 801d3e4:	f004 fb2a 	bl	8021a3c <lv_memcpy>
        lv_memcpy(&point_dsc_tmp, &point_dsc_ori, sizeof(lv_draw_rect_dsc_t));
 801d3e8:	2238      	movs	r2, #56	; 0x38
 801d3ea:	a922      	add	r1, sp, #136	; 0x88
 801d3ec:	a830      	add	r0, sp, #192	; 0xc0
 801d3ee:	f004 fb25 	bl	8021a3c <lv_memcpy>
        line_dsc_tmp.color = cursor->color;
 801d3f2:	88e3      	ldrh	r3, [r4, #6]
 801d3f4:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        point_dsc_tmp.bg_color = cursor->color;
 801d3f8:	88e3      	ldrh	r3, [r4, #6]
 801d3fa:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        part_draw_dsc.p1 = &p1;
 801d3fe:	ab16      	add	r3, sp, #88	; 0x58
 801d400:	9347      	str	r3, [sp, #284]	; 0x11c
        part_draw_dsc.p2 = &p2;
 801d402:	ab17      	add	r3, sp, #92	; 0x5c
 801d404:	9348      	str	r3, [sp, #288]	; 0x120
        if(cursor->pos_set) {
 801d406:	7b63      	ldrb	r3, [r4, #13]
 801d408:	f013 0f01 	tst.w	r3, #1
 801d40c:	f43f af5a 	beq.w	801d2c4 <lv_chart_event+0x1000>
            cx = cursor->pos.x;
 801d410:	f9b4 6000 	ldrsh.w	r6, [r4]
            cy = cursor->pos.y;
 801d414:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
        cx += obj->coords.x1;
 801d418:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 801d41c:	441e      	add	r6, r3
 801d41e:	b2b1      	uxth	r1, r6
 801d420:	b236      	sxth	r6, r6
        cy += obj->coords.y1;
 801d422:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 801d426:	4415      	add	r5, r2
 801d428:	b2aa      	uxth	r2, r5
 801d42a:	b22d      	sxth	r5, r5
        bool draw_point = point_w && point_h;
 801d42c:	f1b9 0f00 	cmp.w	r9, #0
 801d430:	d003      	beq.n	801d43a <lv_chart_event+0x1176>
 801d432:	9803      	ldr	r0, [sp, #12]
 801d434:	2800      	cmp	r0, #0
 801d436:	f47f af67 	bne.w	801d308 <lv_chart_event+0x1044>
            part_draw_dsc.draw_area = NULL;
 801d43a:	2200      	movs	r2, #0
 801d43c:	9241      	str	r2, [sp, #260]	; 0x104
        bool draw_point = point_w && point_h;
 801d43e:	9f04      	ldr	r7, [sp, #16]
 801d440:	e775      	b.n	801d32e <lv_chart_event+0x106a>
        if(!crowded_mode && i == chart->point_cnt) {
 801d442:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d444:	4553      	cmp	r3, sl
 801d446:	f6bf ab91 	bge.w	801cb6c <lv_chart_event+0x8a8>
        lv_coord_t p_act = start_point;
 801d44a:	9b05      	ldr	r3, [sp, #20]
 801d44c:	9304      	str	r3, [sp, #16]
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d44e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d452:	9d04      	ldr	r5, [sp, #16]
 801d454:	f933 1015 	ldrsh.w	r1, [r3, r5, lsl #1]
 801d458:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d45c:	4299      	cmp	r1, r3
 801d45e:	f43f ab85 	beq.w	801cb6c <lv_chart_event+0x8a8>
                point_area.x1 = p2.x - point_w;
 801d462:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801d466:	b2b9      	uxth	r1, r7
 801d468:	1a58      	subs	r0, r3, r1
 801d46a:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
                point_area.x2 = p2.x + point_w;
 801d46e:	440b      	add	r3, r1
 801d470:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 801d474:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801d478:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d47c:	1a58      	subs	r0, r3, r1
 801d47e:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
                point_area.y2 = p2.y + point_h;
 801d482:	440b      	add	r3, r1
 801d484:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 801d488:	3a01      	subs	r2, #1
 801d48a:	924c      	str	r2, [sp, #304]	; 0x130
                part_draw_dsc.p1 = NULL;
 801d48c:	2300      	movs	r3, #0
 801d48e:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = NULL;
 801d490:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.draw_area = &point_area;
 801d492:	ac1f      	add	r4, sp, #124	; 0x7c
 801d494:	9441      	str	r4, [sp, #260]	; 0x104
                part_draw_dsc.value = ser->y_points[p_act];
 801d496:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d49a:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
 801d49e:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d4a0:	aa3e      	add	r2, sp, #248	; 0xf8
 801d4a2:	211a      	movs	r1, #26
 801d4a4:	4658      	mov	r0, fp
 801d4a6:	f7e6 fc2b 	bl	8003d00 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801d4aa:	4622      	mov	r2, r4
 801d4ac:	a930      	add	r1, sp, #192	; 0xc0
 801d4ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d4b0:	f7f1 feb6 	bl	800f220 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d4b4:	aa3e      	add	r2, sp, #248	; 0xf8
 801d4b6:	211b      	movs	r1, #27
 801d4b8:	4658      	mov	r0, fp
 801d4ba:	f7e6 fc21 	bl	8003d00 <lv_event_send>
 801d4be:	f7ff bb55 	b.w	801cb6c <lv_chart_event+0x8a8>
 801d4c2:	bf00      	nop
 801d4c4:	0802d110 	.word	0x0802d110

0801d4c8 <fast_hsv2rgb>:
 * We fold all symmetry by swapping the R, G, B pointers so that the code is the same for all sextants.
 * We replace division by 255 by a division by 256, a.k.a a shift right by 8 bits.
 * This is wrong, but since this is only used to compute the pixels on the screen and not the final color, it's ok.
 */
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t * r, uint8_t * g, uint8_t * b)
{
 801d4c8:	b530      	push	{r4, r5, lr}
 801d4ca:	9c03      	ldr	r4, [sp, #12]
 801d4cc:	9d04      	ldr	r5, [sp, #16]
    if(!s) {
 801d4ce:	b369      	cbz	r1, 801d52c <fast_hsv2rgb+0x64>
 801d4d0:	468c      	mov	ip, r1
        *r = *g = *b = v;
        return;
    }

    uint8_t sextant = h >> 8;
 801d4d2:	0a01      	lsrs	r1, r0, #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 801d4d4:	f410 7f00 	tst.w	r0, #512	; 0x200
 801d4d8:	d002      	beq.n	801d4e0 <fast_hsv2rgb+0x18>
 801d4da:	469e      	mov	lr, r3
 801d4dc:	462b      	mov	r3, r5
 801d4de:	4675      	mov	r5, lr
 801d4e0:	f011 0f04 	tst.w	r1, #4
 801d4e4:	d002      	beq.n	801d4ec <fast_hsv2rgb+0x24>
 801d4e6:	46a6      	mov	lr, r4
 801d4e8:	462c      	mov	r4, r5
 801d4ea:	4675      	mov	r5, lr
 801d4ec:	f011 0f06 	tst.w	r1, #6
 801d4f0:	d120      	bne.n	801d534 <fast_hsv2rgb+0x6c>
 801d4f2:	f011 0f01 	tst.w	r1, #1
 801d4f6:	d023      	beq.n	801d540 <fast_hsv2rgb+0x78>
 801d4f8:	4621      	mov	r1, r4
 801d4fa:	461c      	mov	r4, r3
 801d4fc:	460b      	mov	r3, r1

    *g = v;
 801d4fe:	701a      	strb	r2, [r3, #0]

    uint8_t bb = ~s;
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801d500:	b291      	uxth	r1, r2
    uint8_t bb = ~s;
 801d502:	ea6f 030c 	mvn.w	r3, ip
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801d506:	b2db      	uxtb	r3, r3
    *b = ww >> 8;
 801d508:	fb03 f202 	mul.w	r2, r3, r2
 801d50c:	0a12      	lsrs	r2, r2, #8
 801d50e:	702a      	strb	r2, [r5, #0]
        /*Up slope*/
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
    }
    else {
        /*Down slope*/
        ww = s * h_frac;
 801d510:	b2c0      	uxtb	r0, r0
 801d512:	fb00 fc0c 	mul.w	ip, r0, ip
    }
    bb = ww >> 8;
    bb = ~bb;
 801d516:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
    ww = v * bb;
 801d51a:	fa5f fc8c 	uxtb.w	ip, ip
    *r = ww >> 8;
 801d51e:	fb0c fc01 	mul.w	ip, ip, r1
 801d522:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d526:	f884 c000 	strb.w	ip, [r4]
}
 801d52a:	bd30      	pop	{r4, r5, pc}
        *r = *g = *b = v;
 801d52c:	702a      	strb	r2, [r5, #0]
 801d52e:	7022      	strb	r2, [r4, #0]
 801d530:	701a      	strb	r2, [r3, #0]
        return;
 801d532:	e7fa      	b.n	801d52a <fast_hsv2rgb+0x62>
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 801d534:	f011 0f01 	tst.w	r1, #1
 801d538:	d1e1      	bne.n	801d4fe <fast_hsv2rgb+0x36>
 801d53a:	4621      	mov	r1, r4
 801d53c:	461c      	mov	r4, r3
 801d53e:	460b      	mov	r3, r1
    *g = v;
 801d540:	701a      	strb	r2, [r3, #0]
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801d542:	b291      	uxth	r1, r2
    uint8_t bb = ~s;
 801d544:	ea6f 030c 	mvn.w	r3, ip
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801d548:	b2db      	uxtb	r3, r3
    *b = ww >> 8;
 801d54a:	fb03 f202 	mul.w	r2, r3, r2
 801d54e:	0a12      	lsrs	r2, r2, #8
 801d550:	702a      	strb	r2, [r5, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 801d552:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 801d556:	d004      	beq.n	801d562 <fast_hsv2rgb+0x9a>
 801d558:	4240      	negs	r0, r0
 801d55a:	b2c0      	uxtb	r0, r0
 801d55c:	fb00 fc0c 	mul.w	ip, r0, ip
 801d560:	e7d9      	b.n	801d516 <fast_hsv2rgb+0x4e>
 801d562:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 801d566:	e7d6      	b.n	801d516 <fast_hsv2rgb+0x4e>

0801d568 <get_knob_area>:
{
 801d568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d56c:	4606      	mov	r6, r0
 801d56e:	460f      	mov	r7, r1
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801d570:	2250      	movs	r2, #80	; 0x50
 801d572:	2100      	movs	r1, #0
 801d574:	4638      	mov	r0, r7
 801d576:	f7ed f937 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d57a:	b203      	sxth	r3, r0
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 801d57c:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 801d580:	441c      	add	r4, r3
 801d582:	f3c4 044f 	ubfx	r4, r4, #1, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d586:	2212      	movs	r2, #18
 801d588:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d58c:	4638      	mov	r0, r7
 801d58e:	f7ed f92b 	bl	800a7e8 <lv_obj_get_style_prop>
 801d592:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d594:	2213      	movs	r2, #19
 801d596:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d59a:	4638      	mov	r0, r7
 801d59c:	f7ed f924 	bl	800a7e8 <lv_obj_get_style_prop>
 801d5a0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d5a2:	2210      	movs	r2, #16
 801d5a4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d5a8:	4638      	mov	r0, r7
 801d5aa:	f7ed f91d 	bl	800a7e8 <lv_obj_get_style_prop>
 801d5ae:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d5b0:	2211      	movs	r2, #17
 801d5b2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d5b6:	4638      	mov	r0, r7
 801d5b8:	f7ed f916 	bl	800a7e8 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 801d5bc:	8aba      	ldrh	r2, [r7, #20]
 801d5be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801d5c0:	441a      	add	r2, r3
 801d5c2:	b292      	uxth	r2, r2
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801d5c4:	8afb      	ldrh	r3, [r7, #22]
 801d5c6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 801d5c8:	440b      	add	r3, r1
 801d5ca:	b29b      	uxth	r3, r3
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 801d5cc:	eb04 0109 	add.w	r1, r4, r9
 801d5d0:	1a51      	subs	r1, r2, r1
    return knob_area;
 801d5d2:	8031      	strh	r1, [r6, #0]
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801d5d4:	4425      	add	r5, r4
 801d5d6:	1b5d      	subs	r5, r3, r5
    return knob_area;
 801d5d8:	8075      	strh	r5, [r6, #2]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 801d5da:	44a0      	add	r8, r4
 801d5dc:	4442      	add	r2, r8
    return knob_area;
 801d5de:	80b2      	strh	r2, [r6, #4]
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 801d5e0:	4404      	add	r4, r0
 801d5e2:	441c      	add	r4, r3
    return knob_area;
 801d5e4:	80f4      	strh	r4, [r6, #6]
}
 801d5e6:	4630      	mov	r0, r6
 801d5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801d5ec <refr_knob_pos>:
{
 801d5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5ee:	b083      	sub	sp, #12
 801d5f0:	4604      	mov	r4, r0
    lv_area_t knob_area = get_knob_area(obj);
 801d5f2:	4601      	mov	r1, r0
 801d5f4:	4668      	mov	r0, sp
 801d5f6:	f7ff ffb7 	bl	801d568 <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 801d5fa:	4669      	mov	r1, sp
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f7ea fc97 	bl	8007f30 <lv_obj_invalidate_area>
    lv_coord_t w = lv_obj_get_width(obj);
 801d602:	4620      	mov	r0, r4
 801d604:	f7ea fa71 	bl	8007aea <lv_obj_get_width>
 801d608:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801d60a:	2250      	movs	r2, #80	; 0x50
 801d60c:	2100      	movs	r1, #0
 801d60e:	4620      	mov	r0, r4
 801d610:	f7ed f8ea 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d614:	b206      	sxth	r6, r0
    lv_coord_t r = (w - scale_w) / 2;
 801d616:	1bae      	subs	r6, r5, r6
 801d618:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801d61c:	f346 064f 	sbfx	r6, r6, #1, #16

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 801d620:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801d624:	f003 0303 	and.w	r3, r3, #3
 801d628:	2b01      	cmp	r3, #1
 801d62a:	d024      	beq.n	801d676 <refr_knob_pos+0x8a>
 801d62c:	2b02      	cmp	r3, #2
 801d62e:	d02d      	beq.n	801d68c <refr_knob_pos+0xa0>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 801d630:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 801d632:	b238      	sxth	r0, r7
 801d634:	f004 f80c 	bl	8021650 <lv_trigo_sin>
 801d638:	fb06 f000 	mul.w	r0, r6, r0
 801d63c:	13c0      	asrs	r0, r0, #15
 801d63e:	8520      	strh	r0, [r4, #40]	; 0x28
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 801d640:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801d644:	b200      	sxth	r0, r0
 801d646:	f004 f803 	bl	8021650 <lv_trigo_sin>
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 801d64a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d64e:	f3c5 054f 	ubfx	r5, r5, #1, #16
 801d652:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d654:	442b      	add	r3, r5
 801d656:	8523      	strh	r3, [r4, #40]	; 0x28
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 801d658:	fb00 f606 	mul.w	r6, r0, r6
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 801d65c:	eb05 35e6 	add.w	r5, r5, r6, asr #15
 801d660:	8565      	strh	r5, [r4, #42]	; 0x2a
    lv_area_t knob_area = get_knob_area(obj);
 801d662:	4621      	mov	r1, r4
 801d664:	4668      	mov	r0, sp
 801d666:	f7ff ff7f 	bl	801d568 <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 801d66a:	4669      	mov	r1, sp
 801d66c:	4620      	mov	r0, r4
 801d66e:	f7ea fc5f 	bl	8007f30 <lv_obj_invalidate_area>
}
 801d672:	b003      	add	sp, #12
 801d674:	bdf0      	pop	{r4, r5, r6, r7, pc}
            break;
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 801d676:	f894 7026 	ldrb.w	r7, [r4, #38]	; 0x26
 801d67a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 801d67e:	fb00 f707 	mul.w	r7, r0, r7
 801d682:	4808      	ldr	r0, [pc, #32]	; (801d6a4 <refr_knob_pos+0xb8>)
 801d684:	fb80 3707 	smull	r3, r7, r0, r7
 801d688:	097f      	lsrs	r7, r7, #5
            break;
 801d68a:	e7d2      	b.n	801d632 <refr_knob_pos+0x46>
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 801d68c:	f894 7027 	ldrb.w	r7, [r4, #39]	; 0x27
 801d690:	f44f 70b4 	mov.w	r0, #360	; 0x168
 801d694:	fb00 f707 	mul.w	r7, r0, r7
 801d698:	4802      	ldr	r0, [pc, #8]	; (801d6a4 <refr_knob_pos+0xb8>)
 801d69a:	fb80 3707 	smull	r3, r7, r0, r7
 801d69e:	097f      	lsrs	r7, r7, #5
            break;
 801d6a0:	e7c7      	b.n	801d632 <refr_knob_pos+0x46>
 801d6a2:	bf00      	nop
 801d6a4:	51eb851f 	.word	0x51eb851f

0801d6a8 <lv_colorwheel_constructor>:
{
 801d6a8:	b510      	push	{r4, lr}
 801d6aa:	460c      	mov	r4, r1
    colorwheel->hsv.h = 0;
 801d6ac:	2300      	movs	r3, #0
 801d6ae:	848b      	strh	r3, [r1, #36]	; 0x24
    colorwheel->hsv.s = 100;
 801d6b0:	2264      	movs	r2, #100	; 0x64
 801d6b2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
    colorwheel->hsv.v = 100;
 801d6b6:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 801d6ba:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
    colorwheel->mode_fixed = 0;
 801d6be:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d6c2:	f363 0282 	bfi	r2, r3, #2, #1
 801d6c6:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
    colorwheel->last_click_time = 0;
 801d6ca:	630b      	str	r3, [r1, #48]	; 0x30
    colorwheel->last_change_time = 0;
 801d6cc:	634b      	str	r3, [r1, #52]	; 0x34
    colorwheel->knob.recolor = create_knob_recolor;
 801d6ce:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801d6d2:	4a0a      	ldr	r2, [pc, #40]	; (801d6fc <lv_colorwheel_constructor+0x54>)
 801d6d4:	7812      	ldrb	r2, [r2, #0]
 801d6d6:	f362 0300 	bfi	r3, r2, #0, #1
 801d6da:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 801d6de:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801d6e2:	4620      	mov	r0, r4
 801d6e4:	f7e9 f8e4 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801d6e8:	f44f 7140 	mov.w	r1, #768	; 0x300
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	f7e9 f919 	bl	8006924 <lv_obj_clear_flag>
    refr_knob_pos(obj);
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	f7ff ff7a 	bl	801d5ec <refr_knob_pos>
}
 801d6f8:	bd10      	pop	{r4, pc}
 801d6fa:	bf00      	nop
 801d6fc:	20002714 	.word	0x20002714

0801d700 <lv_colorwheel_set_hsv>:
{
 801d700:	b530      	push	{r4, r5, lr}
 801d702:	b083      	sub	sp, #12
 801d704:	4604      	mov	r4, r0
 801d706:	9101      	str	r1, [sp, #4]
 801d708:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801d70c:	0e0a      	lsrs	r2, r1, #24
 801d70e:	b289      	uxth	r1, r1
    if(hsv.h > 360) hsv.h %= 360;
 801d710:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 801d714:	d909      	bls.n	801d72a <lv_colorwheel_set_hsv+0x2a>
 801d716:	08cb      	lsrs	r3, r1, #3
 801d718:	4d15      	ldr	r5, [pc, #84]	; (801d770 <lv_colorwheel_set_hsv+0x70>)
 801d71a:	fba5 5303 	umull	r5, r3, r5, r3
 801d71e:	089b      	lsrs	r3, r3, #2
 801d720:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 801d724:	fb0c 1113 	mls	r1, ip, r3, r1
 801d728:	b289      	uxth	r1, r1
    if(hsv.s > 100) hsv.s = 100;
 801d72a:	2864      	cmp	r0, #100	; 0x64
 801d72c:	bf28      	it	cs
 801d72e:	2064      	movcs	r0, #100	; 0x64
    if(hsv.v > 100) hsv.v = 100;
 801d730:	4613      	mov	r3, r2
 801d732:	2a64      	cmp	r2, #100	; 0x64
 801d734:	bf28      	it	cs
 801d736:	2364      	movcs	r3, #100	; 0x64
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 801d738:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801d73a:	428a      	cmp	r2, r1
 801d73c:	d108      	bne.n	801d750 <lv_colorwheel_set_hsv+0x50>
 801d73e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 801d740:	f88d 0006 	strb.w	r0, [sp, #6]
 801d744:	f88d 3007 	strb.w	r3, [sp, #7]
 801d748:	f8bd c006 	ldrh.w	ip, [sp, #6]
 801d74c:	4594      	cmp	ip, r2
 801d74e:	d00d      	beq.n	801d76c <lv_colorwheel_set_hsv+0x6c>
    colorwheel->hsv = hsv;
 801d750:	84a1      	strh	r1, [r4, #36]	; 0x24
 801d752:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
 801d756:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    refr_knob_pos(obj);
 801d75a:	4620      	mov	r0, r4
 801d75c:	f7ff ff46 	bl	801d5ec <refr_knob_pos>
    lv_obj_invalidate(obj);
 801d760:	4620      	mov	r0, r4
 801d762:	f7ea fc09 	bl	8007f78 <lv_obj_invalidate>
    return true;
 801d766:	2001      	movs	r0, #1
}
 801d768:	b003      	add	sp, #12
 801d76a:	bd30      	pop	{r4, r5, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 801d76c:	2000      	movs	r0, #0
 801d76e:	e7fb      	b.n	801d768 <lv_colorwheel_set_hsv+0x68>
 801d770:	16c16c17 	.word	0x16c16c17

0801d774 <lv_colorwheel_get_rgb>:
{
 801d774:	b508      	push	{r3, lr}
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 801d776:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 801d77a:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 801d77e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 801d780:	f003 fc38 	bl	8020ff4 <lv_color_hsv_to_rgb>
}
 801d784:	bd08      	pop	{r3, pc}
	...

0801d788 <lv_colorwheel_event>:
{
 801d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d78c:	b0a7      	sub	sp, #156	; 0x9c
 801d78e:	9105      	str	r1, [sp, #20]
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801d790:	48a1      	ldr	r0, [pc, #644]	; (801da18 <lv_colorwheel_event+0x290>)
 801d792:	f7e6 f9b8 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801d796:	2801      	cmp	r0, #1
 801d798:	d002      	beq.n	801d7a0 <lv_colorwheel_event+0x18>
}
 801d79a:	b027      	add	sp, #156	; 0x9c
 801d79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801d7a0:	9d05      	ldr	r5, [sp, #20]
 801d7a2:	4628      	mov	r0, r5
 801d7a4:	f7e6 fad2 	bl	8003d4c <lv_event_get_code>
 801d7a8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801d7aa:	4628      	mov	r0, r5
 801d7ac:	f7e6 faca 	bl	8003d44 <lv_event_get_target>
 801d7b0:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801d7b2:	2c13      	cmp	r4, #19
 801d7b4:	d01c      	beq.n	801d7f0 <lv_colorwheel_event+0x68>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801d7b6:	2c29      	cmp	r4, #41	; 0x29
 801d7b8:	d04b      	beq.n	801d852 <lv_colorwheel_event+0xca>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801d7ba:	2c2a      	cmp	r4, #42	; 0x2a
 801d7bc:	d066      	beq.n	801d88c <lv_colorwheel_event+0x104>
    else if(code == LV_EVENT_KEY) {
 801d7be:	2c0d      	cmp	r4, #13
 801d7c0:	d067      	beq.n	801d892 <lv_colorwheel_event+0x10a>
    else if(code == LV_EVENT_PRESSED) {
 801d7c2:	2c01      	cmp	r4, #1
 801d7c4:	f000 80e9 	beq.w	801d99a <lv_colorwheel_event+0x212>
    else if(code == LV_EVENT_PRESSING) {
 801d7c8:	2c02      	cmp	r4, #2
 801d7ca:	f000 812b 	beq.w	801da24 <lv_colorwheel_event+0x29c>
    else if(code == LV_EVENT_HIT_TEST) {
 801d7ce:	2c11      	cmp	r4, #17
 801d7d0:	f000 8215 	beq.w	801dbfe <lv_colorwheel_event+0x476>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801d7d4:	2c15      	cmp	r4, #21
 801d7d6:	f000 821f 	beq.w	801dc18 <lv_colorwheel_event+0x490>
    else if(code == LV_EVENT_COVER_CHECK) {
 801d7da:	2c12      	cmp	r4, #18
 801d7dc:	d1dd      	bne.n	801d79a <lv_colorwheel_event+0x12>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 801d7de:	9805      	ldr	r0, [sp, #20]
 801d7e0:	f7e6 fab8 	bl	8003d54 <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 801d7e4:	7803      	ldrb	r3, [r0, #0]
 801d7e6:	2b02      	cmp	r3, #2
 801d7e8:	bf1c      	itt	ne
 801d7ea:	2301      	movne	r3, #1
 801d7ec:	7003      	strbne	r3, [r0, #0]
 801d7ee:	e7d4      	b.n	801d79a <lv_colorwheel_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d7f0:	2212      	movs	r2, #18
 801d7f2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d7f6:	f7ec fff7 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d7fa:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801d7fc:	2213      	movs	r2, #19
 801d7fe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d802:	4628      	mov	r0, r5
 801d804:	f7ec fff0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d808:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d80a:	2210      	movs	r2, #16
 801d80c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d810:	4628      	mov	r0, r5
 801d812:	f7ec ffe9 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d816:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801d818:	2211      	movs	r2, #17
 801d81a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801d81e:	4628      	mov	r0, r5
 801d820:	f7ec ffe2 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d824:	b205      	sxth	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 801d826:	9805      	ldr	r0, [sp, #20]
 801d828:	f7e6 fa94 	bl	8003d54 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 801d82c:	4623      	mov	r3, r4
 801d82e:	42bc      	cmp	r4, r7
 801d830:	bfb8      	it	lt
 801d832:	463b      	movlt	r3, r7
 801d834:	42b3      	cmp	r3, r6
 801d836:	bfb8      	it	lt
 801d838:	4633      	movlt	r3, r6
 801d83a:	42ab      	cmp	r3, r5
 801d83c:	bfb8      	it	lt
 801d83e:	462b      	movlt	r3, r5
 801d840:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad);
 801d842:	b21b      	sxth	r3, r3
 801d844:	f9b0 2000 	ldrsh.w	r2, [r0]
 801d848:	4293      	cmp	r3, r2
 801d84a:	bfb8      	it	lt
 801d84c:	4613      	movlt	r3, r2
 801d84e:	8003      	strh	r3, [r0, #0]
 801d850:	e7a3      	b.n	801d79a <lv_colorwheel_event+0x12>
        void * param = lv_event_get_param(e);
 801d852:	9805      	ldr	r0, [sp, #20]
 801d854:	f7e6 fa7e 	bl	8003d54 <lv_event_get_param>
 801d858:	4604      	mov	r4, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 801d85a:	4628      	mov	r0, r5
 801d85c:	f7ea f945 	bl	8007aea <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801d860:	88a3      	ldrh	r3, [r4, #4]
 801d862:	3301      	adds	r3, #1
 801d864:	8822      	ldrh	r2, [r4, #0]
 801d866:	1a9b      	subs	r3, r3, r2
 801d868:	b21b      	sxth	r3, r3
 801d86a:	4298      	cmp	r0, r3
 801d86c:	d003      	beq.n	801d876 <lv_colorwheel_event+0xee>
            refr_knob_pos(obj);
 801d86e:	4628      	mov	r0, r5
 801d870:	f7ff febc 	bl	801d5ec <refr_knob_pos>
 801d874:	e791      	b.n	801d79a <lv_colorwheel_event+0x12>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 801d876:	4628      	mov	r0, r5
 801d878:	f7ea f93d 	bl	8007af6 <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801d87c:	88e3      	ldrh	r3, [r4, #6]
 801d87e:	3301      	adds	r3, #1
 801d880:	8862      	ldrh	r2, [r4, #2]
 801d882:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 801d884:	b21b      	sxth	r3, r3
 801d886:	4298      	cmp	r0, r3
 801d888:	d1f1      	bne.n	801d86e <lv_colorwheel_event+0xe6>
 801d88a:	e786      	b.n	801d79a <lv_colorwheel_event+0x12>
        refr_knob_pos(obj);
 801d88c:	f7ff feae 	bl	801d5ec <refr_knob_pos>
 801d890:	e783      	b.n	801d79a <lv_colorwheel_event+0x12>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 801d892:	9805      	ldr	r0, [sp, #20]
 801d894:	f7e6 fa5e 	bl	8003d54 <lv_event_get_param>
 801d898:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801d89a:	f023 0202 	bic.w	r2, r3, #2
 801d89e:	2a11      	cmp	r2, #17
 801d8a0:	d01d      	beq.n	801d8de <lv_colorwheel_event+0x156>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801d8a2:	2b14      	cmp	r3, #20
 801d8a4:	d002      	beq.n	801d8ac <lv_colorwheel_event+0x124>
 801d8a6:	2b12      	cmp	r3, #18
 801d8a8:	f47f af77 	bne.w	801d79a <lv_colorwheel_event+0x12>
            hsv_cur = colorwheel->hsv;
 801d8ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d8ae:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 801d8b0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801d8b4:	f003 0303 	and.w	r3, r3, #3
 801d8b8:	2b01      	cmp	r3, #1
 801d8ba:	d05a      	beq.n	801d972 <lv_colorwheel_event+0x1ea>
 801d8bc:	2b02      	cmp	r3, #2
 801d8be:	d062      	beq.n	801d986 <lv_colorwheel_event+0x1fe>
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d04c      	beq.n	801d95e <lv_colorwheel_event+0x1d6>
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801d8c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d8c6:	4628      	mov	r0, r5
 801d8c8:	f7ff ff1a 	bl	801d700 <lv_colorwheel_set_hsv>
 801d8cc:	2800      	cmp	r0, #0
 801d8ce:	f43f af64 	beq.w	801d79a <lv_colorwheel_event+0x12>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	211c      	movs	r1, #28
 801d8d6:	4628      	mov	r0, r5
 801d8d8:	f7e6 fa12 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 801d8dc:	e75d      	b.n	801d79a <lv_colorwheel_event+0x12>
            hsv_cur = colorwheel->hsv;
 801d8de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d8e0:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 801d8e2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801d8e6:	f003 0303 	and.w	r3, r3, #3
 801d8ea:	2b01      	cmp	r3, #1
 801d8ec:	d01d      	beq.n	801d92a <lv_colorwheel_event+0x1a2>
 801d8ee:	2b02      	cmp	r3, #2
 801d8f0:	d028      	beq.n	801d944 <lv_colorwheel_event+0x1bc>
 801d8f2:	b163      	cbz	r3, 801d90e <lv_colorwheel_event+0x186>
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801d8f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d8f6:	4628      	mov	r0, r5
 801d8f8:	f7ff ff02 	bl	801d700 <lv_colorwheel_set_hsv>
 801d8fc:	2800      	cmp	r0, #0
 801d8fe:	f43f af4c 	beq.w	801d79a <lv_colorwheel_event+0x12>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801d902:	2200      	movs	r2, #0
 801d904:	211c      	movs	r1, #28
 801d906:	4628      	mov	r0, r5
 801d908:	f7e6 f9fa 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 801d90c:	e745      	b.n	801d79a <lv_colorwheel_event+0x12>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 801d90e:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 801d910:	3301      	adds	r3, #1
 801d912:	4a42      	ldr	r2, [pc, #264]	; (801da1c <lv_colorwheel_event+0x294>)
 801d914:	fb82 1203 	smull	r1, r2, r2, r3
 801d918:	441a      	add	r2, r3
 801d91a:	1212      	asrs	r2, r2, #8
 801d91c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801d920:	fb01 3312 	mls	r3, r1, r2, r3
 801d924:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    break;
 801d928:	e7e4      	b.n	801d8f4 <lv_colorwheel_event+0x16c>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 801d92a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 801d92e:	3301      	adds	r3, #1
 801d930:	4a3b      	ldr	r2, [pc, #236]	; (801da20 <lv_colorwheel_event+0x298>)
 801d932:	fb82 1203 	smull	r1, r2, r2, r3
 801d936:	1152      	asrs	r2, r2, #5
 801d938:	2164      	movs	r1, #100	; 0x64
 801d93a:	fb01 3312 	mls	r3, r1, r2, r3
 801d93e:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    break;
 801d942:	e7d7      	b.n	801d8f4 <lv_colorwheel_event+0x16c>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 801d944:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 801d948:	3301      	adds	r3, #1
 801d94a:	4a35      	ldr	r2, [pc, #212]	; (801da20 <lv_colorwheel_event+0x298>)
 801d94c:	fb82 1203 	smull	r1, r2, r2, r3
 801d950:	1152      	asrs	r2, r2, #5
 801d952:	2164      	movs	r1, #100	; 0x64
 801d954:	fb01 3312 	mls	r3, r1, r2, r3
 801d958:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                    break;
 801d95c:	e7ca      	b.n	801d8f4 <lv_colorwheel_event+0x16c>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801d95e:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 801d960:	b123      	cbz	r3, 801d96c <lv_colorwheel_event+0x1e4>
 801d962:	3b01      	subs	r3, #1
 801d964:	b29b      	uxth	r3, r3
 801d966:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    break;
 801d96a:	e7ab      	b.n	801d8c4 <lv_colorwheel_event+0x13c>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801d96c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801d970:	e7f9      	b.n	801d966 <lv_colorwheel_event+0x1de>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 801d972:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 801d976:	b123      	cbz	r3, 801d982 <lv_colorwheel_event+0x1fa>
 801d978:	3b01      	subs	r3, #1
 801d97a:	b2db      	uxtb	r3, r3
 801d97c:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    break;
 801d980:	e7a0      	b.n	801d8c4 <lv_colorwheel_event+0x13c>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 801d982:	2364      	movs	r3, #100	; 0x64
 801d984:	e7fa      	b.n	801d97c <lv_colorwheel_event+0x1f4>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 801d986:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 801d98a:	b123      	cbz	r3, 801d996 <lv_colorwheel_event+0x20e>
 801d98c:	3b01      	subs	r3, #1
 801d98e:	b2db      	uxtb	r3, r3
 801d990:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                    break;
 801d994:	e796      	b.n	801d8c4 <lv_colorwheel_event+0x13c>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 801d996:	2364      	movs	r3, #100	; 0x64
 801d998:	e7fa      	b.n	801d990 <lv_colorwheel_event+0x208>
        colorwheel->last_change_time = lv_tick_get();
 801d99a:	f002 fdc6 	bl	802052a <lv_tick_get>
 801d99e:	6368      	str	r0, [r5, #52]	; 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 801d9a0:	f7e6 fd54 	bl	800444c <lv_indev_get_act>
 801d9a4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801d9a8:	f7e6 fdcd 	bl	8004546 <lv_indev_get_point>
    lv_indev_t * indev = lv_indev_get_act();
 801d9ac:	f7e6 fd4e 	bl	800444c <lv_indev_get_act>
 801d9b0:	4604      	mov	r4, r0
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 801d9b2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d9b4:	f002 fdbd 	bl	8020532 <lv_tick_elaps>
 801d9b8:	6823      	ldr	r3, [r4, #0]
 801d9ba:	8b9b      	ldrh	r3, [r3, #28]
 801d9bc:	4298      	cmp	r0, r3
 801d9be:	d212      	bcs.n	801d9e6 <lv_colorwheel_event+0x25e>
        hsv_cur = colorwheel->hsv;
 801d9c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d9c2:	9318      	str	r3, [sp, #96]	; 0x60
        switch(colorwheel->mode) {
 801d9c4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801d9c8:	f003 0303 	and.w	r3, r3, #3
 801d9cc:	2b01      	cmp	r3, #1
 801d9ce:	d011      	beq.n	801d9f4 <lv_colorwheel_event+0x26c>
 801d9d0:	2b02      	cmp	r3, #2
 801d9d2:	d013      	beq.n	801d9fc <lv_colorwheel_event+0x274>
 801d9d4:	b15b      	cbz	r3, 801d9ee <lv_colorwheel_event+0x266>
        lv_indev_wait_release(indev);
 801d9d6:	4620      	mov	r0, r4
 801d9d8:	f7e6 fdfa 	bl	80045d0 <lv_indev_wait_release>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801d9dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d9de:	4628      	mov	r0, r5
 801d9e0:	f7ff fe8e 	bl	801d700 <lv_colorwheel_set_hsv>
 801d9e4:	b970      	cbnz	r0, 801da04 <lv_colorwheel_event+0x27c>
    colorwheel->last_click_time = lv_tick_get();
 801d9e6:	f002 fda0 	bl	802052a <lv_tick_get>
 801d9ea:	6328      	str	r0, [r5, #48]	; 0x30
    return LV_RES_OK;
 801d9ec:	e6d5      	b.n	801d79a <lv_colorwheel_event+0x12>
                hsv_cur.h = 0;
 801d9ee:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                break;
 801d9f2:	e7f0      	b.n	801d9d6 <lv_colorwheel_event+0x24e>
                hsv_cur.s = 100;
 801d9f4:	2364      	movs	r3, #100	; 0x64
 801d9f6:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                break;
 801d9fa:	e7ec      	b.n	801d9d6 <lv_colorwheel_event+0x24e>
                hsv_cur.v = 100;
 801d9fc:	2364      	movs	r3, #100	; 0x64
 801d9fe:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                break;
 801da02:	e7e8      	b.n	801d9d6 <lv_colorwheel_event+0x24e>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801da04:	2200      	movs	r2, #0
 801da06:	211c      	movs	r1, #28
 801da08:	4628      	mov	r0, r5
 801da0a:	f7e6 f979 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return res;
 801da0e:	2801      	cmp	r0, #1
 801da10:	f47f aec3 	bne.w	801d79a <lv_colorwheel_event+0x12>
 801da14:	e7e7      	b.n	801d9e6 <lv_colorwheel_event+0x25e>
 801da16:	bf00      	nop
 801da18:	0802d12c 	.word	0x0802d12c
 801da1c:	b60b60b7 	.word	0xb60b60b7
 801da20:	51eb851f 	.word	0x51eb851f
        lv_indev_t * indev = lv_indev_get_act();
 801da24:	f7e6 fd12 	bl	800444c <lv_indev_get_act>
        if(indev == NULL) return;
 801da28:	4606      	mov	r6, r0
 801da2a:	2800      	cmp	r0, #0
 801da2c:	f43f aeb5 	beq.w	801d79a <lv_colorwheel_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801da30:	f7e6 fd12 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801da34:	2804      	cmp	r0, #4
 801da36:	d002      	beq.n	801da3e <lv_colorwheel_event+0x2b6>
 801da38:	2802      	cmp	r0, #2
 801da3a:	f040 8095 	bne.w	801db68 <lv_colorwheel_event+0x3e0>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 801da3e:	8aac      	ldrh	r4, [r5, #20]
 801da40:	4628      	mov	r0, r5
 801da42:	f7ea f852 	bl	8007aea <lv_obj_get_width>
 801da46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801da4a:	eb04 0060 	add.w	r0, r4, r0, asr #1
 801da4e:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 801da52:	8aec      	ldrh	r4, [r5, #22]
 801da54:	4628      	mov	r0, r5
 801da56:	f7ea f84e 	bl	8007af6 <lv_obj_get_height>
 801da5a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801da5e:	eb04 0060 	add.w	r0, r4, r0, asr #1
 801da62:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 801da66:	6833      	ldr	r3, [r6, #0]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 801da68:	7e1a      	ldrb	r2, [r3, #24]
 801da6a:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801da6e:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 801da72:	1a5b      	subs	r3, r3, r1
 801da74:	2b00      	cmp	r3, #0
 801da76:	bfb8      	it	lt
 801da78:	425b      	neglt	r3, r3
 801da7a:	4293      	cmp	r3, r2
 801da7c:	dc09      	bgt.n	801da92 <lv_colorwheel_event+0x30a>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 801da7e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 801da82:	f9b5 103a 	ldrsh.w	r1, [r5, #58]	; 0x3a
 801da86:	1a5b      	subs	r3, r3, r1
 801da88:	2b00      	cmp	r3, #0
 801da8a:	bfb8      	it	lt
 801da8c:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 801da8e:	429a      	cmp	r2, r3
 801da90:	da08      	bge.n	801daa4 <lv_colorwheel_event+0x31c>
            colorwheel->last_change_time = lv_tick_get();
 801da92:	f002 fd4a 	bl	802052a <lv_tick_get>
 801da96:	6368      	str	r0, [r5, #52]	; 0x34
            colorwheel->last_press_point.x = p.x;
 801da98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801da9c:	872b      	strh	r3, [r5, #56]	; 0x38
            colorwheel->last_press_point.y = p.y;
 801da9e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 801daa2:	876b      	strh	r3, [r5, #58]	; 0x3a
        p.x -= obj->coords.x1;
 801daa4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801daa8:	8aaa      	ldrh	r2, [r5, #20]
 801daaa:	1a9b      	subs	r3, r3, r2
 801daac:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        p.y -= obj->coords.y1;
 801dab0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 801dab4:	8aea      	ldrh	r2, [r5, #22]
 801dab6:	1a9b      	subs	r3, r3, r2
 801dab8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        uint16_t w = lv_obj_get_width(obj);
 801dabc:	4628      	mov	r0, r5
 801dabe:	f7ea f814 	bl	8007aea <lv_obj_get_width>
 801dac2:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801dac4:	2250      	movs	r2, #80	; 0x50
 801dac6:	2100      	movs	r1, #0
 801dac8:	4628      	mov	r0, r5
 801daca:	f7ec fe8d 	bl	800a7e8 <lv_obj_get_style_prop>
        lv_coord_t r_in = w / 2;
 801dace:	f3c4 034e 	ubfx	r3, r4, #1, #15
        p.x -= r_in;
 801dad2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801dad6:	1ad2      	subs	r2, r2, r3
 801dad8:	b212      	sxth	r2, r2
 801dada:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 801dade:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 801dae2:	1ac9      	subs	r1, r1, r3
 801dae4:	b209      	sxth	r1, r1
 801dae6:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        r_in -= cir_w;
 801daea:	1a1b      	subs	r3, r3, r0
 801daec:	b29c      	uxth	r4, r3
 801daee:	b21b      	sxth	r3, r3
        if(r_in > LV_DPI_DEF / 2) {
 801daf0:	2b41      	cmp	r3, #65	; 0x41
 801daf2:	dd09      	ble.n	801db08 <lv_colorwheel_event+0x380>
            lv_coord_t inner = cir_w / 2;
 801daf4:	b207      	sxth	r7, r0
 801daf6:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801dafa:	443b      	add	r3, r7
            r_in -= inner;
 801dafc:	eba4 0363 	sub.w	r3, r4, r3, asr #1
 801db00:	b21b      	sxth	r3, r3
 801db02:	2b41      	cmp	r3, #65	; 0x41
 801db04:	bfb8      	it	lt
 801db06:	2341      	movlt	r3, #65	; 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 801db08:	fb01 f101 	mul.w	r1, r1, r1
 801db0c:	fb02 1702 	mla	r7, r2, r2, r1
 801db10:	fb03 f403 	mul.w	r4, r3, r3
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 801db14:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801db16:	f002 fd0c 	bl	8020532 <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 801db1a:	42a7      	cmp	r7, r4
 801db1c:	da29      	bge.n	801db72 <lv_colorwheel_event+0x3ea>
 801db1e:	6833      	ldr	r3, [r6, #0]
 801db20:	8b9b      	ldrh	r3, [r3, #28]
 801db22:	4283      	cmp	r3, r0
 801db24:	f4bf ae39 	bcs.w	801d79a <lv_colorwheel_event+0x12>
 801db28:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801db2c:	f013 0f04 	tst.w	r3, #4
 801db30:	f47f ae33 	bne.w	801d79a <lv_colorwheel_event+0x12>
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 801db34:	4619      	mov	r1, r3
 801db36:	f003 0303 	and.w	r3, r3, #3
 801db3a:	3301      	adds	r3, #1
 801db3c:	2203      	movs	r2, #3
 801db3e:	fb93 f2f2 	sdiv	r2, r3, r2
 801db42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db46:	1a9b      	subs	r3, r3, r2
 801db48:	460a      	mov	r2, r1
 801db4a:	f363 0201 	bfi	r2, r3, #0, #2
 801db4e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    refr_knob_pos(obj);
 801db52:	4628      	mov	r0, r5
 801db54:	f7ff fd4a 	bl	801d5ec <refr_knob_pos>
    lv_obj_invalidate(obj);
 801db58:	4628      	mov	r0, r5
 801db5a:	f7ea fa0d 	bl	8007f78 <lv_obj_invalidate>
            lv_indev_wait_release(lv_indev_get_act());
 801db5e:	f7e6 fc75 	bl	800444c <lv_indev_get_act>
 801db62:	f7e6 fd35 	bl	80045d0 <lv_indev_wait_release>
            return;
 801db66:	e618      	b.n	801d79a <lv_colorwheel_event+0x12>
            lv_indev_get_point(indev, &p);
 801db68:	a912      	add	r1, sp, #72	; 0x48
 801db6a:	4630      	mov	r0, r6
 801db6c:	f7e6 fceb 	bl	8004546 <lv_indev_get_point>
 801db70:	e779      	b.n	801da66 <lv_colorwheel_event+0x2de>
        angle = lv_atan2(p.x, p.y) % 360;
 801db72:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 801db76:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
 801db7a:	f003 fdcf 	bl	802171c <lv_atan2>
 801db7e:	08c3      	lsrs	r3, r0, #3
 801db80:	4acb      	ldr	r2, [pc, #812]	; (801deb0 <lv_colorwheel_event+0x728>)
 801db82:	fba2 2303 	umull	r2, r3, r2, r3
 801db86:	089b      	lsrs	r3, r3, #2
 801db88:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801db8c:	fb02 0313 	mls	r3, r2, r3, r0
 801db90:	b299      	uxth	r1, r3
 801db92:	b21b      	sxth	r3, r3
        hsv_cur = colorwheel->hsv;
 801db94:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801db96:	9218      	str	r2, [sp, #96]	; 0x60
        switch(colorwheel->mode) {
 801db98:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 801db9c:	f002 0203 	and.w	r2, r2, #3
 801dba0:	2a01      	cmp	r2, #1
 801dba2:	d012      	beq.n	801dbca <lv_colorwheel_event+0x442>
 801dba4:	2a02      	cmp	r2, #2
 801dba6:	d01d      	beq.n	801dbe4 <lv_colorwheel_event+0x45c>
 801dba8:	b162      	cbz	r2, 801dbc4 <lv_colorwheel_event+0x43c>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801dbaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 801dbac:	4628      	mov	r0, r5
 801dbae:	f7ff fda7 	bl	801d700 <lv_colorwheel_set_hsv>
 801dbb2:	2800      	cmp	r0, #0
 801dbb4:	f43f adf1 	beq.w	801d79a <lv_colorwheel_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801dbb8:	2200      	movs	r2, #0
 801dbba:	211c      	movs	r1, #28
 801dbbc:	4628      	mov	r0, r5
 801dbbe:	f7e6 f89f 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 801dbc2:	e5ea      	b.n	801d79a <lv_colorwheel_event+0x12>
                hsv_cur.h = angle;
 801dbc4:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
                break;
 801dbc8:	e7ef      	b.n	801dbaa <lv_colorwheel_event+0x422>
                hsv_cur.s = (angle * 100) / 360;
 801dbca:	2264      	movs	r2, #100	; 0x64
 801dbcc:	fb02 f303 	mul.w	r3, r2, r3
 801dbd0:	4ab8      	ldr	r2, [pc, #736]	; (801deb4 <lv_colorwheel_event+0x72c>)
 801dbd2:	fb82 1203 	smull	r1, r2, r2, r3
 801dbd6:	441a      	add	r2, r3
 801dbd8:	17db      	asrs	r3, r3, #31
 801dbda:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 801dbde:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                break;
 801dbe2:	e7e2      	b.n	801dbaa <lv_colorwheel_event+0x422>
                hsv_cur.v = (angle * 100) / 360;
 801dbe4:	2264      	movs	r2, #100	; 0x64
 801dbe6:	fb02 f303 	mul.w	r3, r2, r3
 801dbea:	4ab2      	ldr	r2, [pc, #712]	; (801deb4 <lv_colorwheel_event+0x72c>)
 801dbec:	fb82 1203 	smull	r1, r2, r2, r3
 801dbf0:	441a      	add	r2, r3
 801dbf2:	17db      	asrs	r3, r3, #31
 801dbf4:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 801dbf8:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                break;
 801dbfc:	e7d5      	b.n	801dbaa <lv_colorwheel_event+0x422>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 801dbfe:	9805      	ldr	r0, [sp, #20]
 801dc00:	f7e6 f8a8 	bl	8003d54 <lv_event_get_param>
 801dc04:	4604      	mov	r4, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 801dc06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801dc0a:	6801      	ldr	r1, [r0, #0]
 801dc0c:	f105 0014 	add.w	r0, r5, #20
 801dc10:	f002 ff62 	bl	8020ad8 <_lv_area_is_point_on>
 801dc14:	7120      	strb	r0, [r4, #4]
 801dc16:	e5c0      	b.n	801d79a <lv_colorwheel_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 801dc18:	9c05      	ldr	r4, [sp, #20]
 801dc1a:	4620      	mov	r0, r4
 801dc1c:	f7e6 f892 	bl	8003d44 <lv_event_get_target>
 801dc20:	4680      	mov	r8, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801dc22:	4620      	mov	r0, r4
 801dc24:	f7e6 f902 	bl	8003e2c <lv_event_get_draw_ctx>
 801dc28:	9006      	str	r0, [sp, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 801dc2a:	4640      	mov	r0, r8
 801dc2c:	f7e9 ff5d 	bl	8007aea <lv_obj_get_width>
 801dc30:	4682      	mov	sl, r0
    lv_coord_t h = lv_obj_get_height(obj);
 801dc32:	4640      	mov	r0, r8
 801dc34:	f7e9 ff5f 	bl	8007af6 <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 801dc38:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 801dc3c:	f34a 0a4f 	sbfx	sl, sl, #1, #16
 801dc40:	f8b8 b014 	ldrh.w	fp, [r8, #20]
 801dc44:	44d3      	add	fp, sl
 801dc46:	fa1f fb8b 	uxth.w	fp, fp
    lv_coord_t cy = obj->coords.y1 + h / 2;
 801dc4a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801dc4e:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 801dc52:	eb03 0060 	add.w	r0, r3, r0, asr #1
 801dc56:	b283      	uxth	r3, r0
 801dc58:	9303      	str	r3, [sp, #12]
    lv_draw_line_dsc_init(&line_dsc);
 801dc5a:	a80f      	add	r0, sp, #60	; 0x3c
 801dc5c:	f7f0 f831 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801dc60:	aa0f      	add	r2, sp, #60	; 0x3c
 801dc62:	2100      	movs	r1, #0
 801dc64:	4640      	mov	r0, r8
 801dc66:	f7e9 fc1d 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 801dc6a:	f44f 731d 	mov.w	r3, #628	; 0x274
 801dc6e:	fb03 f30a 	mul.w	r3, r3, sl
 801dc72:	4a91      	ldr	r2, [pc, #580]	; (801deb8 <lv_colorwheel_event+0x730>)
 801dc74:	fb82 1203 	smull	r1, r2, r2, r3
 801dc78:	17db      	asrs	r3, r3, #31
 801dc7a:	ebc3 3322 	rsb	r3, r3, r2, asr #12
    line_dsc.width += 2;
 801dc7e:	3302      	adds	r3, #2
 801dc80:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801dc84:	2250      	movs	r2, #80	; 0x50
 801dc86:	2100      	movs	r1, #0
 801dc88:	4640      	mov	r0, r8
 801dc8a:	f7ec fdad 	bl	800a7e8 <lv_obj_get_style_prop>
 801dc8e:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
 801dc90:	b203      	sxth	r3, r0
 801dc92:	9307      	str	r3, [sp, #28]
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 801dc94:	2300      	movs	r3, #0
 801dc96:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801dc9a:	f108 0114 	add.w	r1, r8, #20
 801dc9e:	a812      	add	r0, sp, #72	; 0x48
 801dca0:	f7f1 f80e 	bl	800ecc0 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 801dca4:	2100      	movs	r1, #0
 801dca6:	a812      	add	r0, sp, #72	; 0x48
 801dca8:	f7f0 fe08 	bl	800e8bc <lv_draw_mask_add>
 801dcac:	9008      	str	r0, [sp, #32]
    dest->y1 = src->y1;
 801dcae:	f9b8 2016 	ldrsh.w	r2, [r8, #22]
    dest->x2 = src->x2;
 801dcb2:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
    dest->y2 = src->y2;
 801dcb6:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
    mask_area.x1 += cir_w;
 801dcba:	b2a4      	uxth	r4, r4
 801dcbc:	f8b8 0014 	ldrh.w	r0, [r8, #20]
 801dcc0:	4420      	add	r0, r4
 801dcc2:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    mask_area.x2 -= cir_w;
 801dcc6:	1b09      	subs	r1, r1, r4
 801dcc8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
    mask_area.y1 += cir_w;
 801dccc:	4422      	add	r2, r4
 801dcce:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    mask_area.y2 -= cir_w;
 801dcd2:	1b1c      	subs	r4, r3, r4
 801dcd4:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 801dcd8:	2301      	movs	r3, #1
 801dcda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801dcde:	a90b      	add	r1, sp, #44	; 0x2c
 801dce0:	a818      	add	r0, sp, #96	; 0x60
 801dce2:	f7f0 ffed 	bl	800ecc0 <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 801dce6:	2100      	movs	r1, #0
 801dce8:	a818      	add	r0, sp, #96	; 0x60
 801dcea:	f7f0 fde7 	bl	800e8bc <lv_draw_mask_add>
 801dcee:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t cir_w_extra = line_dsc.width;
 801dcf0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801dcf4:	9304      	str	r3, [sp, #16]
 801dcf6:	2600      	movs	r6, #0
    if(angle_saved != angle) m = 255;
 801dcf8:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 801debc <lv_colorwheel_event+0x734>
 801dcfc:	e068      	b.n	801ddd0 <lv_colorwheel_event+0x648>
            fast_hsv2rgb(angle * 6, s, v, &r, &g,
 801dcfe:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 801dd02:	0040      	lsls	r0, r0, #1
 801dd04:	b280      	uxth	r0, r0
 801dd06:	ab0d      	add	r3, sp, #52	; 0x34
 801dd08:	9301      	str	r3, [sp, #4]
 801dd0a:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801dd0e:	9300      	str	r3, [sp, #0]
 801dd10:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801dd14:	4a6a      	ldr	r2, [pc, #424]	; (801dec0 <lv_colorwheel_event+0x738>)
 801dd16:	7812      	ldrb	r2, [r2, #0]
 801dd18:	496a      	ldr	r1, [pc, #424]	; (801dec4 <lv_colorwheel_event+0x73c>)
 801dd1a:	7809      	ldrb	r1, [r1, #0]
 801dd1c:	f7ff fbd4 	bl	801d4c8 <fast_hsv2rgb>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801dd20:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801dd24:	08db      	lsrs	r3, r3, #3
 801dd26:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 801dd2a:	0889      	lsrs	r1, r1, #2
 801dd2c:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 801dd30:	08d2      	lsrs	r2, r2, #3
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 801dd32:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801dd36:	f363 0004 	bfi	r0, r3, #0, #5
 801dd3a:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 801dd3e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801dd42:	f361 134a 	bfi	r3, r1, #5, #6
 801dd46:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 801dd4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dd4e:	f362 03c7 	bfi	r3, r2, #3, #5
 801dd52:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 801dd56:	0a25      	lsrs	r5, r4, #8
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801dd58:	9b04      	ldr	r3, [sp, #16]
 801dd5a:	eb0a 0703 	add.w	r7, sl, r3
 801dd5e:	f344 240f 	sbfx	r4, r4, #8, #16
 801dd62:	4620      	mov	r0, r4
 801dd64:	f003 fc74 	bl	8021650 <lv_trigo_sin>
 801dd68:	fb07 f000 	mul.w	r0, r7, r0
 801dd6c:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 801dd70:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 801dd74:	355a      	adds	r5, #90	; 0x5a
 801dd76:	b22d      	sxth	r5, r5
 801dd78:	4628      	mov	r0, r5
 801dd7a:	f003 fc69 	bl	8021650 <lv_trigo_sin>
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 801dd7e:	fb00 f707 	mul.w	r7, r0, r7
 801dd82:	9a03      	ldr	r2, [sp, #12]
 801dd84:	eb02 37e7 	add.w	r7, r2, r7, asr #15
 801dd88:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801dd8c:	9907      	ldr	r1, [sp, #28]
 801dd8e:	ebaa 0701 	sub.w	r7, sl, r1
 801dd92:	9b04      	ldr	r3, [sp, #16]
 801dd94:	1aff      	subs	r7, r7, r3
 801dd96:	4620      	mov	r0, r4
 801dd98:	f003 fc5a 	bl	8021650 <lv_trigo_sin>
 801dd9c:	fb07 f000 	mul.w	r0, r7, r0
 801dda0:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 801dda4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801dda8:	4628      	mov	r0, r5
 801ddaa:	f003 fc51 	bl	8021650 <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 801ddae:	fb00 f707 	mul.w	r7, r0, r7
 801ddb2:	9a03      	ldr	r2, [sp, #12]
 801ddb4:	eb02 37e7 	add.w	r7, r2, r7, asr #15
 801ddb8:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 801ddbc:	ab0e      	add	r3, sp, #56	; 0x38
 801ddbe:	aa0d      	add	r2, sp, #52	; 0x34
 801ddc0:	a90f      	add	r1, sp, #60	; 0x3c
 801ddc2:	9806      	ldr	r0, [sp, #24]
 801ddc4:	f7ef ff94 	bl	800dcf0 <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 801ddc8:	3601      	adds	r6, #1
 801ddca:	2e56      	cmp	r6, #86	; 0x56
 801ddcc:	f000 80b1 	beq.w	801df32 <lv_colorwheel_event+0x7aa>
 801ddd0:	b2b0      	uxth	r0, r6
 801ddd2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801ddd6:	b29b      	uxth	r3, r3
 801ddd8:	f44f 6487 	mov.w	r4, #1080	; 0x438
 801dddc:	fb06 f404 	mul.w	r4, r6, r4
    uint8_t r = 0, g = 0, b = 0;
 801dde0:	2200      	movs	r2, #0
 801dde2:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 801dde6:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 801ddea:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    if(angle_saved != angle) m = 255;
 801ddee:	4a36      	ldr	r2, [pc, #216]	; (801dec8 <lv_colorwheel_event+0x740>)
 801ddf0:	8812      	ldrh	r2, [r2, #0]
 801ddf2:	429a      	cmp	r2, r3
 801ddf4:	bf1c      	itt	ne
 801ddf6:	22ff      	movne	r2, #255	; 0xff
 801ddf8:	f889 2000 	strbne.w	r2, [r9]
    angle_saved = angle;
 801ddfc:	4a32      	ldr	r2, [pc, #200]	; (801dec8 <lv_colorwheel_event+0x740>)
 801ddfe:	8013      	strh	r3, [r2, #0]
    switch(ext->mode) {
 801de00:	f898 303c 	ldrb.w	r3, [r8, #60]	; 0x3c
 801de04:	f3c3 0201 	ubfx	r2, r3, #0, #2
 801de08:	f003 0303 	and.w	r3, r3, #3
 801de0c:	2b01      	cmp	r3, #1
 801de0e:	d020      	beq.n	801de52 <lv_colorwheel_event+0x6ca>
 801de10:	2b02      	cmp	r3, #2
 801de12:	d05f      	beq.n	801ded4 <lv_colorwheel_event+0x74c>
            if(m != ext->mode) {
 801de14:	f899 1000 	ldrb.w	r1, [r9]
 801de18:	4299      	cmp	r1, r3
 801de1a:	f43f af70 	beq.w	801dcfe <lv_colorwheel_event+0x576>
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 801de1e:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 801de22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de26:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801de2a:	4928      	ldr	r1, [pc, #160]	; (801decc <lv_colorwheel_event+0x744>)
 801de2c:	fb81 5303 	smull	r5, r3, r1, r3
 801de30:	10db      	asrs	r3, r3, #3
 801de32:	4d24      	ldr	r5, [pc, #144]	; (801dec4 <lv_colorwheel_event+0x73c>)
 801de34:	702b      	strb	r3, [r5, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 801de36:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
 801de3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de3e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801de42:	fb81 1303 	smull	r1, r3, r1, r3
 801de46:	10db      	asrs	r3, r3, #3
 801de48:	491d      	ldr	r1, [pc, #116]	; (801dec0 <lv_colorwheel_event+0x738>)
 801de4a:	700b      	strb	r3, [r1, #0]
                m = ext->mode;
 801de4c:	f889 2000 	strb.w	r2, [r9]
 801de50:	e755      	b.n	801dcfe <lv_colorwheel_event+0x576>
            if(m != ext->mode) {
 801de52:	f899 3000 	ldrb.w	r3, [r9]
 801de56:	2b01      	cmp	r3, #1
 801de58:	d019      	beq.n	801de8e <lv_colorwheel_event+0x706>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 801de5a:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 801de5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de62:	019b      	lsls	r3, r3, #6
 801de64:	4a12      	ldr	r2, [pc, #72]	; (801deb0 <lv_colorwheel_event+0x728>)
 801de66:	fba2 2303 	umull	r2, r3, r2, r3
 801de6a:	089b      	lsrs	r3, r3, #2
 801de6c:	4a18      	ldr	r2, [pc, #96]	; (801ded0 <lv_colorwheel_event+0x748>)
 801de6e:	8013      	strh	r3, [r2, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 801de70:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
 801de74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801de7c:	4a13      	ldr	r2, [pc, #76]	; (801decc <lv_colorwheel_event+0x744>)
 801de7e:	fb82 2303 	smull	r2, r3, r2, r3
 801de82:	10db      	asrs	r3, r3, #3
 801de84:	4a0e      	ldr	r2, [pc, #56]	; (801dec0 <lv_colorwheel_event+0x738>)
 801de86:	7013      	strb	r3, [r2, #0]
                m = ext->mode;
 801de88:	2301      	movs	r3, #1
 801de8a:	f889 3000 	strb.w	r3, [r9]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 801de8e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801de92:	ab0d      	add	r3, sp, #52	; 0x34
 801de94:	9301      	str	r3, [sp, #4]
 801de96:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801de9a:	9300      	str	r3, [sp, #0]
 801de9c:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801dea0:	4a07      	ldr	r2, [pc, #28]	; (801dec0 <lv_colorwheel_event+0x738>)
 801dea2:	7812      	ldrb	r2, [r2, #0]
 801dea4:	b2c9      	uxtb	r1, r1
 801dea6:	480a      	ldr	r0, [pc, #40]	; (801ded0 <lv_colorwheel_event+0x748>)
 801dea8:	8800      	ldrh	r0, [r0, #0]
 801deaa:	f7ff fb0d 	bl	801d4c8 <fast_hsv2rgb>
            break;
 801deae:	e737      	b.n	801dd20 <lv_colorwheel_event+0x598>
 801deb0:	16c16c17 	.word	0x16c16c17
 801deb4:	b60b60b7 	.word	0xb60b60b7
 801deb8:	7b5ca453 	.word	0x7b5ca453
 801debc:	200006fc 	.word	0x200006fc
 801dec0:	20002719 	.word	0x20002719
 801dec4:	20002718 	.word	0x20002718
 801dec8:	200006fa 	.word	0x200006fa
 801decc:	66666667 	.word	0x66666667
 801ded0:	20002716 	.word	0x20002716
            if(m != ext->mode) {
 801ded4:	f899 3000 	ldrb.w	r3, [r9]
 801ded8:	2b02      	cmp	r3, #2
 801deda:	d019      	beq.n	801df10 <lv_colorwheel_event+0x788>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 801dedc:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 801dee0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dee4:	019b      	lsls	r3, r3, #6
 801dee6:	4a2e      	ldr	r2, [pc, #184]	; (801dfa0 <lv_colorwheel_event+0x818>)
 801dee8:	fba2 2303 	umull	r2, r3, r2, r3
 801deec:	089b      	lsrs	r3, r3, #2
 801deee:	4a2d      	ldr	r2, [pc, #180]	; (801dfa4 <lv_colorwheel_event+0x81c>)
 801def0:	8013      	strh	r3, [r2, #0]
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 801def2:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 801def6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801defa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801defe:	4a2a      	ldr	r2, [pc, #168]	; (801dfa8 <lv_colorwheel_event+0x820>)
 801df00:	fb82 2303 	smull	r2, r3, r2, r3
 801df04:	10db      	asrs	r3, r3, #3
 801df06:	4a29      	ldr	r2, [pc, #164]	; (801dfac <lv_colorwheel_event+0x824>)
 801df08:	7013      	strb	r3, [r2, #0]
                m = ext->mode;
 801df0a:	2302      	movs	r3, #2
 801df0c:	f889 3000 	strb.w	r3, [r9]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 801df10:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 801df14:	ab0d      	add	r3, sp, #52	; 0x34
 801df16:	9301      	str	r3, [sp, #4]
 801df18:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801df1c:	9300      	str	r3, [sp, #0]
 801df1e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801df22:	b2d2      	uxtb	r2, r2
 801df24:	4921      	ldr	r1, [pc, #132]	; (801dfac <lv_colorwheel_event+0x824>)
 801df26:	7809      	ldrb	r1, [r1, #0]
 801df28:	481e      	ldr	r0, [pc, #120]	; (801dfa4 <lv_colorwheel_event+0x81c>)
 801df2a:	8800      	ldrh	r0, [r0, #0]
 801df2c:	f7ff facc 	bl	801d4c8 <fast_hsv2rgb>
            break;
 801df30:	e6f6      	b.n	801dd20 <lv_colorwheel_event+0x598>
    lv_draw_mask_free_param(&mask_out_param);
 801df32:	a812      	add	r0, sp, #72	; 0x48
 801df34:	f7f0 fd36 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_in_param);
 801df38:	a818      	add	r0, sp, #96	; 0x60
 801df3a:	f7f0 fd33 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_out_id);
 801df3e:	9808      	ldr	r0, [sp, #32]
 801df40:	f7f0 fd06 	bl	800e950 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 801df44:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df46:	f7f0 fd03 	bl	800e950 <lv_draw_mask_remove_id>
    lv_obj_t * obj = lv_event_get_target(e);
 801df4a:	9d05      	ldr	r5, [sp, #20]
 801df4c:	4628      	mov	r0, r5
 801df4e:	f7e5 fef9 	bl	8003d44 <lv_event_get_target>
 801df52:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801df54:	4628      	mov	r0, r5
 801df56:	f7e5 ff69 	bl	8003e2c <lv_event_get_draw_ctx>
 801df5a:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 801df5c:	a818      	add	r0, sp, #96	; 0x60
 801df5e:	f7f1 f903 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 801df62:	aa18      	add	r2, sp, #96	; 0x60
 801df64:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801df68:	4620      	mov	r0, r4
 801df6a:	f7e9 f877 	bl	800705c <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 801df6e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801df72:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    if(colorwheel->knob.recolor) {
 801df76:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801df7a:	f013 0f01 	tst.w	r3, #1
 801df7e:	d109      	bne.n	801df94 <lv_colorwheel_event+0x80c>
    lv_area_t knob_area = get_knob_area(obj);
 801df80:	4621      	mov	r1, r4
 801df82:	a812      	add	r0, sp, #72	; 0x48
 801df84:	f7ff faf0 	bl	801d568 <get_knob_area>
    lv_draw_rect(draw_ctx, &cir_dsc, &knob_area);
 801df88:	aa12      	add	r2, sp, #72	; 0x48
 801df8a:	a918      	add	r1, sp, #96	; 0x60
 801df8c:	4628      	mov	r0, r5
 801df8e:	f7f1 f947 	bl	800f220 <lv_draw_rect>
}
 801df92:	e402      	b.n	801d79a <lv_colorwheel_event+0x12>
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 801df94:	4620      	mov	r0, r4
 801df96:	f7ff fbed 	bl	801d774 <lv_colorwheel_get_rgb>
 801df9a:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
 801df9e:	e7ef      	b.n	801df80 <lv_colorwheel_event+0x7f8>
 801dfa0:	16c16c17 	.word	0x16c16c17
 801dfa4:	20002716 	.word	0x20002716
 801dfa8:	66666667 	.word	0x66666667
 801dfac:	20002718 	.word	0x20002718

0801dfb0 <lv_keyboard_update_ctrl_map>:
/**
 * Update the control map for the current mode
 * @param obj pointer to a keyboard object
 */
static void lv_keyboard_update_ctrl_map(lv_obj_t * obj)
{
 801dfb0:	b538      	push	{r3, r4, r5, lr}
 801dfb2:	4604      	mov	r4, r0
    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;

    if(keyboard->popovers) {
 801dfb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801dfb8:	f013 0f01 	tst.w	r3, #1
 801dfbc:	d007      	beq.n	801dfce <lv_keyboard_update_ctrl_map+0x1e>
        /*Apply the current control map (already includes LV_BTNMATRIX_CTRL_POPOVER flags)*/
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 801dfbe:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 801dfc2:	4b15      	ldr	r3, [pc, #84]	; (801e018 <lv_keyboard_update_ctrl_map+0x68>)
 801dfc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dfc8:	f007 ff30 	bl	8025e2c <lv_btnmatrix_set_ctrl_map>

        /*Apply new control map and clean up*/
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
        lv_mem_free(ctrl_map);
    }
}
 801dfcc:	bd38      	pop	{r3, r4, r5, pc}
        lv_btnmatrix_ctrl_t * ctrl_map = lv_mem_alloc(btnm->btn_cnt * sizeof(lv_btnmatrix_ctrl_t));
 801dfce:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 801dfd0:	0040      	lsls	r0, r0, #1
 801dfd2:	f003 fc49 	bl	8021868 <lv_mem_alloc>
 801dfd6:	4605      	mov	r5, r0
        lv_memcpy(ctrl_map, kb_ctrl[keyboard->mode], sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801dfd8:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 801dfda:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801dfde:	0052      	lsls	r2, r2, #1
 801dfe0:	4b0d      	ldr	r3, [pc, #52]	; (801e018 <lv_keyboard_update_ctrl_map+0x68>)
 801dfe2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801dfe6:	f003 fd29 	bl	8021a3c <lv_memcpy>
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 801dfea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801dfec:	b163      	cbz	r3, 801e008 <lv_keyboard_update_ctrl_map+0x58>
 801dfee:	2300      	movs	r3, #0
            ctrl_map[i] &= (~LV_BTNMATRIX_CTRL_POPOVER);
 801dff0:	b299      	uxth	r1, r3
 801dff2:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 801dff6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801dffa:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 801dffe:	3301      	adds	r3, #1
 801e000:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 801e002:	b29a      	uxth	r2, r3
 801e004:	4291      	cmp	r1, r2
 801e006:	d8f3      	bhi.n	801dff0 <lv_keyboard_update_ctrl_map+0x40>
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
 801e008:	4629      	mov	r1, r5
 801e00a:	4620      	mov	r0, r4
 801e00c:	f007 ff0e 	bl	8025e2c <lv_btnmatrix_set_ctrl_map>
        lv_mem_free(ctrl_map);
 801e010:	4628      	mov	r0, r5
 801e012:	f003 fc47 	bl	80218a4 <lv_mem_free>
}
 801e016:	e7d9      	b.n	801dfcc <lv_keyboard_update_ctrl_map+0x1c>
 801e018:	20000700 	.word	0x20000700

0801e01c <lv_keyboard_update_map>:
{
 801e01c:	b510      	push	{r4, lr}
 801e01e:	4604      	mov	r4, r0
    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 801e020:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 801e024:	4b04      	ldr	r3, [pc, #16]	; (801e038 <lv_keyboard_update_map+0x1c>)
 801e026:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e02a:	f007 fd9d 	bl	8025b68 <lv_btnmatrix_set_map>
    lv_keyboard_update_ctrl_map(obj);
 801e02e:	4620      	mov	r0, r4
 801e030:	f7ff ffbe 	bl	801dfb0 <lv_keyboard_update_ctrl_map>
}
 801e034:	bd10      	pop	{r4, pc}
 801e036:	bf00      	nop
 801e038:	20000724 	.word	0x20000724

0801e03c <lv_keyboard_constructor>:
{
 801e03c:	b538      	push	{r3, r4, r5, lr}
 801e03e:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801e040:	2104      	movs	r1, #4
 801e042:	4620      	mov	r0, r4
 801e044:	f7e8 fc6e 	bl	8006924 <lv_obj_clear_flag>
    keyboard->ta         = NULL;
 801e048:	2500      	movs	r5, #0
 801e04a:	63a5      	str	r5, [r4, #56]	; 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 801e04c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    keyboard->popovers   = 0;
 801e050:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801e054:	f365 0300 	bfi	r3, r5, #0, #1
 801e058:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 801e05c:	462b      	mov	r3, r5
 801e05e:	462a      	mov	r2, r5
 801e060:	2105      	movs	r1, #5
 801e062:	4620      	mov	r0, r4
 801e064:	f7e9 fcd6 	bl	8007a14 <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 801e068:	462b      	mov	r3, r5
 801e06a:	221c      	movs	r2, #28
 801e06c:	4906      	ldr	r1, [pc, #24]	; (801e088 <lv_keyboard_constructor+0x4c>)
 801e06e:	4620      	mov	r0, r4
 801e070:	f7e5 fe88 	bl	8003d84 <lv_obj_add_event_cb>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);
 801e074:	462a      	mov	r2, r5
 801e076:	4629      	mov	r1, r5
 801e078:	4620      	mov	r0, r4
 801e07a:	f7ed fac5 	bl	800b608 <lv_obj_set_style_base_dir>
    lv_keyboard_update_map(obj);
 801e07e:	4620      	mov	r0, r4
 801e080:	f7ff ffcc 	bl	801e01c <lv_keyboard_update_map>
}
 801e084:	bd38      	pop	{r3, r4, r5, pc}
 801e086:	bf00      	nop
 801e088:	0801e08d 	.word	0x0801e08d

0801e08c <lv_keyboard_def_event_cb>:
{
 801e08c:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 801e08e:	f7e5 fe59 	bl	8003d44 <lv_event_get_target>
 801e092:	4604      	mov	r4, r0
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 801e094:	f007 ff25 	bl	8025ee2 <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 801e098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e09c:	4298      	cmp	r0, r3
 801e09e:	d039      	beq.n	801e114 <lv_keyboard_def_event_cb+0x88>
    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 801e0a0:	4620      	mov	r0, r4
 801e0a2:	f007 ff1e 	bl	8025ee2 <lv_btnmatrix_get_selected_btn>
 801e0a6:	4601      	mov	r1, r0
 801e0a8:	4620      	mov	r0, r4
 801e0aa:	f007 ff1d 	bl	8025ee8 <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 801e0ae:	4605      	mov	r5, r0
 801e0b0:	b380      	cbz	r0, 801e114 <lv_keyboard_def_event_cb+0x88>
    if(strcmp(txt, "abc") == 0) {
 801e0b2:	496d      	ldr	r1, [pc, #436]	; (801e268 <lv_keyboard_def_event_cb+0x1dc>)
 801e0b4:	f7e2 f8b6 	bl	8000224 <strcmp>
 801e0b8:	b308      	cbz	r0, 801e0fe <lv_keyboard_def_event_cb+0x72>
    else if(strcmp(txt, "ABC") == 0) {
 801e0ba:	496c      	ldr	r1, [pc, #432]	; (801e26c <lv_keyboard_def_event_cb+0x1e0>)
 801e0bc:	4628      	mov	r0, r5
 801e0be:	f7e2 f8b1 	bl	8000224 <strcmp>
 801e0c2:	b340      	cbz	r0, 801e116 <lv_keyboard_def_event_cb+0x8a>
    else if(strcmp(txt, "1#") == 0) {
 801e0c4:	496a      	ldr	r1, [pc, #424]	; (801e270 <lv_keyboard_def_event_cb+0x1e4>)
 801e0c6:	4628      	mov	r0, r5
 801e0c8:	f7e2 f8ac 	bl	8000224 <strcmp>
 801e0cc:	b378      	cbz	r0, 801e12e <lv_keyboard_def_event_cb+0xa2>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 801e0ce:	4969      	ldr	r1, [pc, #420]	; (801e274 <lv_keyboard_def_event_cb+0x1e8>)
 801e0d0:	4628      	mov	r0, r5
 801e0d2:	f7e2 f8a7 	bl	8000224 <strcmp>
 801e0d6:	b120      	cbz	r0, 801e0e2 <lv_keyboard_def_event_cb+0x56>
 801e0d8:	4967      	ldr	r1, [pc, #412]	; (801e278 <lv_keyboard_def_event_cb+0x1ec>)
 801e0da:	4628      	mov	r0, r5
 801e0dc:	f7e2 f8a2 	bl	8000224 <strcmp>
 801e0e0:	bb88      	cbnz	r0, 801e146 <lv_keyboard_def_event_cb+0xba>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 801e0e2:	2200      	movs	r2, #0
 801e0e4:	2120      	movs	r1, #32
 801e0e6:	4620      	mov	r0, r4
 801e0e8:	f7e5 fe0a 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return;
 801e0ec:	2801      	cmp	r0, #1
 801e0ee:	d111      	bne.n	801e114 <lv_keyboard_def_event_cb+0x88>
        if(keyboard->ta) {
 801e0f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e0f2:	b178      	cbz	r0, 801e114 <lv_keyboard_def_event_cb+0x88>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 801e0f4:	2200      	movs	r2, #0
 801e0f6:	2120      	movs	r1, #32
 801e0f8:	f7e5 fe02 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 801e0fc:	e00a      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 801e0fe:	2300      	movs	r3, #0
 801e100:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 801e104:	4b5d      	ldr	r3, [pc, #372]	; (801e27c <lv_keyboard_def_event_cb+0x1f0>)
 801e106:	6819      	ldr	r1, [r3, #0]
 801e108:	4620      	mov	r0, r4
 801e10a:	f007 fd2d 	bl	8025b68 <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 801e10e:	4620      	mov	r0, r4
 801e110:	f7ff ff4e 	bl	801dfb0 <lv_keyboard_update_ctrl_map>
}
 801e114:	bd70      	pop	{r4, r5, r6, pc}
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 801e116:	2301      	movs	r3, #1
 801e118:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 801e11c:	4b57      	ldr	r3, [pc, #348]	; (801e27c <lv_keyboard_def_event_cb+0x1f0>)
 801e11e:	6859      	ldr	r1, [r3, #4]
 801e120:	4620      	mov	r0, r4
 801e122:	f007 fd21 	bl	8025b68 <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 801e126:	4620      	mov	r0, r4
 801e128:	f7ff ff42 	bl	801dfb0 <lv_keyboard_update_ctrl_map>
        return;
 801e12c:	e7f2      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 801e12e:	2302      	movs	r3, #2
 801e130:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 801e134:	4b51      	ldr	r3, [pc, #324]	; (801e27c <lv_keyboard_def_event_cb+0x1f0>)
 801e136:	6899      	ldr	r1, [r3, #8]
 801e138:	4620      	mov	r0, r4
 801e13a:	f007 fd15 	bl	8025b68 <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 801e13e:	4620      	mov	r0, r4
 801e140:	f7ff ff36 	bl	801dfb0 <lv_keyboard_update_ctrl_map>
        return;
 801e144:	e7e6      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 801e146:	494e      	ldr	r1, [pc, #312]	; (801e280 <lv_keyboard_def_event_cb+0x1f4>)
 801e148:	4628      	mov	r0, r5
 801e14a:	f7e2 f86b 	bl	8000224 <strcmp>
 801e14e:	b1d8      	cbz	r0, 801e188 <lv_keyboard_def_event_cb+0xfc>
    if(keyboard->ta == NULL) return;
 801e150:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801e152:	2e00      	cmp	r6, #0
 801e154:	d0de      	beq.n	801e114 <lv_keyboard_def_event_cb+0x88>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 801e156:	494b      	ldr	r1, [pc, #300]	; (801e284 <lv_keyboard_def_event_cb+0x1f8>)
 801e158:	4628      	mov	r0, r5
 801e15a:	f7e2 f863 	bl	8000224 <strcmp>
 801e15e:	b120      	cbz	r0, 801e16a <lv_keyboard_def_event_cb+0xde>
 801e160:	4949      	ldr	r1, [pc, #292]	; (801e288 <lv_keyboard_def_event_cb+0x1fc>)
 801e162:	4628      	mov	r0, r5
 801e164:	f7e2 f85e 	bl	8000224 <strcmp>
 801e168:	b9e8      	cbnz	r0, 801e1a6 <lv_keyboard_def_event_cb+0x11a>
        lv_textarea_add_char(keyboard->ta, '\n');
 801e16a:	210a      	movs	r1, #10
 801e16c:	4630      	mov	r0, r6
 801e16e:	f00d fd75 	bl	802bc5c <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 801e172:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e174:	f00d fcbd 	bl	802baf2 <lv_textarea_get_one_line>
 801e178:	2800      	cmp	r0, #0
 801e17a:	d0cb      	beq.n	801e114 <lv_keyboard_def_event_cb+0x88>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 801e17c:	2200      	movs	r2, #0
 801e17e:	211f      	movs	r1, #31
 801e180:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e182:	f7e5 fdbd 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 801e186:	e7c5      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 801e188:	2200      	movs	r2, #0
 801e18a:	211f      	movs	r1, #31
 801e18c:	4620      	mov	r0, r4
 801e18e:	f7e5 fdb7 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return;
 801e192:	2801      	cmp	r0, #1
 801e194:	d1be      	bne.n	801e114 <lv_keyboard_def_event_cb+0x88>
        if(keyboard->ta) {
 801e196:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e198:	2800      	cmp	r0, #0
 801e19a:	d0bb      	beq.n	801e114 <lv_keyboard_def_event_cb+0x88>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 801e19c:	2200      	movs	r2, #0
 801e19e:	211f      	movs	r1, #31
 801e1a0:	f7e5 fdae 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 801e1a4:	e7b6      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
    else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 801e1a6:	4939      	ldr	r1, [pc, #228]	; (801e28c <lv_keyboard_def_event_cb+0x200>)
 801e1a8:	4628      	mov	r0, r5
 801e1aa:	f7e2 f83b 	bl	8000224 <strcmp>
 801e1ae:	b348      	cbz	r0, 801e204 <lv_keyboard_def_event_cb+0x178>
    else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 801e1b0:	4937      	ldr	r1, [pc, #220]	; (801e290 <lv_keyboard_def_event_cb+0x204>)
 801e1b2:	4628      	mov	r0, r5
 801e1b4:	f7e2 f836 	bl	8000224 <strcmp>
 801e1b8:	b340      	cbz	r0, 801e20c <lv_keyboard_def_event_cb+0x180>
    else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 801e1ba:	4936      	ldr	r1, [pc, #216]	; (801e294 <lv_keyboard_def_event_cb+0x208>)
 801e1bc:	4628      	mov	r0, r5
 801e1be:	f7e2 f831 	bl	8000224 <strcmp>
 801e1c2:	b338      	cbz	r0, 801e214 <lv_keyboard_def_event_cb+0x188>
    else if(strcmp(txt, "+/-") == 0) {
 801e1c4:	4934      	ldr	r1, [pc, #208]	; (801e298 <lv_keyboard_def_event_cb+0x20c>)
 801e1c6:	4628      	mov	r0, r5
 801e1c8:	f7e2 f82c 	bl	8000224 <strcmp>
 801e1cc:	2800      	cmp	r0, #0
 801e1ce:	d145      	bne.n	801e25c <lv_keyboard_def_event_cb+0x1d0>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 801e1d0:	4630      	mov	r0, r6
 801e1d2:	f00d fc09 	bl	802b9e8 <lv_textarea_get_cursor_pos>
 801e1d6:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 801e1d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e1da:	f00d fbf9 	bl	802b9d0 <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 801e1de:	7803      	ldrb	r3, [r0, #0]
 801e1e0:	2b2d      	cmp	r3, #45	; 0x2d
 801e1e2:	d01b      	beq.n	801e21c <lv_keyboard_def_event_cb+0x190>
        else if(ta_txt[0] == '+') {
 801e1e4:	2b2b      	cmp	r3, #43	; 0x2b
 801e1e6:	d029      	beq.n	801e23c <lv_keyboard_def_event_cb+0x1b0>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 801e1e8:	2100      	movs	r1, #0
 801e1ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e1ec:	f00d faee 	bl	802b7cc <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 801e1f0:	212d      	movs	r1, #45	; 0x2d
 801e1f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e1f4:	f00d fd32 	bl	802bc5c <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 801e1f8:	b2a9      	uxth	r1, r5
 801e1fa:	3101      	adds	r1, #1
 801e1fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e1fe:	f00d fae5 	bl	802b7cc <lv_textarea_set_cursor_pos>
 801e202:	e787      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_cursor_left(keyboard->ta);
 801e204:	4630      	mov	r0, r6
 801e206:	f00d fe79 	bl	802befc <lv_textarea_cursor_left>
 801e20a:	e783      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_cursor_right(keyboard->ta);
 801e20c:	4630      	mov	r0, r6
 801e20e:	f00d fe6f 	bl	802bef0 <lv_textarea_cursor_right>
 801e212:	e77f      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_del_char(keyboard->ta);
 801e214:	4630      	mov	r0, r6
 801e216:	f00d fda5 	bl	802bd64 <lv_textarea_del_char>
 801e21a:	e77b      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 801e21c:	2101      	movs	r1, #1
 801e21e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e220:	f00d fad4 	bl	802b7cc <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 801e224:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e226:	f00d fd9d 	bl	802bd64 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 801e22a:	212b      	movs	r1, #43	; 0x2b
 801e22c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e22e:	f00d fd15 	bl	802bc5c <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 801e232:	b2a9      	uxth	r1, r5
 801e234:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e236:	f00d fac9 	bl	802b7cc <lv_textarea_set_cursor_pos>
 801e23a:	e76b      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 801e23c:	2101      	movs	r1, #1
 801e23e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e240:	f00d fac4 	bl	802b7cc <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 801e244:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e246:	f00d fd8d 	bl	802bd64 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 801e24a:	212d      	movs	r1, #45	; 0x2d
 801e24c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e24e:	f00d fd05 	bl	802bc5c <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 801e252:	b2a9      	uxth	r1, r5
 801e254:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e256:	f00d fab9 	bl	802b7cc <lv_textarea_set_cursor_pos>
 801e25a:	e75b      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_add_text(keyboard->ta, txt);
 801e25c:	4629      	mov	r1, r5
 801e25e:	4630      	mov	r0, r6
 801e260:	f00d fc68 	bl	802bb34 <lv_textarea_add_text>
 801e264:	e756      	b.n	801e114 <lv_keyboard_def_event_cb+0x88>
 801e266:	bf00      	nop
 801e268:	0802d148 	.word	0x0802d148
 801e26c:	0802d14c 	.word	0x0802d14c
 801e270:	0802d150 	.word	0x0802d150
 801e274:	0802d154 	.word	0x0802d154
 801e278:	0802d158 	.word	0x0802d158
 801e27c:	20000724 	.word	0x20000724
 801e280:	0802d0f0 	.word	0x0802d0f0
 801e284:	0802d15c 	.word	0x0802d15c
 801e288:	0802d164 	.word	0x0802d164
 801e28c:	0802d168 	.word	0x0802d168
 801e290:	0802d16c 	.word	0x0802d16c
 801e294:	0802d170 	.word	0x0802d170
 801e298:	0802d174 	.word	0x0802d174

0801e29c <lv_led_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_led_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801e29c:	b510      	push	{r4, lr}
 801e29e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_led_t * led = (lv_led_t *)obj;
    led->color = lv_theme_get_color_primary(obj);
 801e2a0:	4608      	mov	r0, r1
 801e2a2:	f7ee fd2f 	bl	800cd04 <lv_theme_get_color_primary>
 801e2a6:	84a0      	strh	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 801e2a8:	23ff      	movs	r3, #255	; 0xff
 801e2aa:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 801e2ae:	bd10      	pop	{r4, pc}

0801e2b0 <lv_led_event>:

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801e2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2b4:	b0a0      	sub	sp, #128	; 0x80
 801e2b6:	460d      	mov	r5, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    lv_event_code_t code = lv_event_get_code(e);
 801e2b8:	4608      	mov	r0, r1
 801e2ba:	f7e5 fd47 	bl	8003d4c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 801e2be:	f1a0 0315 	sub.w	r3, r0, #21
 801e2c2:	b2db      	uxtb	r3, r3
 801e2c4:	2b01      	cmp	r3, #1
 801e2c6:	d90d      	bls.n	801e2e4 <lv_led_event+0x34>
        res = lv_obj_event_base(MY_CLASS, e);
 801e2c8:	4629      	mov	r1, r5
 801e2ca:	4805      	ldr	r0, [pc, #20]	; (801e2e0 <lv_led_event+0x30>)
 801e2cc:	f7e5 fc1b 	bl	8003b06 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801e2d0:	2801      	cmp	r0, #1
 801e2d2:	d102      	bne.n	801e2da <lv_led_event+0x2a>
    }

    lv_obj_t * obj = lv_event_get_target(e);
 801e2d4:	4628      	mov	r0, r5
 801e2d6:	f7e5 fd35 	bl	8003d44 <lv_event_get_target>

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}
 801e2da:	b020      	add	sp, #128	; 0x80
 801e2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2e0:	0802d660 	.word	0x0802d660
 801e2e4:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e2e6:	4628      	mov	r0, r5
 801e2e8:	f7e5 fd2c 	bl	8003d44 <lv_event_get_target>
 801e2ec:	4606      	mov	r6, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 801e2ee:	2c15      	cmp	r4, #21
 801e2f0:	d1f3      	bne.n	801e2da <lv_led_event+0x2a>
        lv_draw_rect_dsc_init(&rect_dsc);
 801e2f2:	4668      	mov	r0, sp
 801e2f4:	f7f0 ff38 	bl	800f168 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 801e2f8:	466a      	mov	r2, sp
 801e2fa:	2100      	movs	r1, #0
 801e2fc:	4630      	mov	r0, r6
 801e2fe:	f7e8 fead 	bl	800705c <lv_obj_init_draw_rect_dsc>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e302:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801e306:	f003 031f 	and.w	r3, r3, #31
 801e30a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e30e:	f3c2 1245 	ubfx	r2, r2, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801e312:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801e316:	08c9      	lsrs	r1, r1, #3
 801e318:	eb01 1041 	add.w	r0, r1, r1, lsl #5
 801e31c:	ebc1 00c0 	rsb	r0, r1, r0, lsl #3
 801e320:	3007      	adds	r0, #7
 801e322:	1140      	asrs	r0, r0, #5
 801e324:	2100      	movs	r1, #0
 801e326:	f360 4117 	bfi	r1, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801e32a:	eb02 10c2 	add.w	r0, r2, r2, lsl #7
 801e32e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e332:	3203      	adds	r2, #3
 801e334:	1192      	asrs	r2, r2, #6
 801e336:	f362 210f 	bfi	r1, r2, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801e33a:	eb03 1243 	add.w	r2, r3, r3, lsl #5
 801e33e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801e342:	3307      	adds	r3, #7
 801e344:	115b      	asrs	r3, r3, #5
 801e346:	f363 0107 	bfi	r1, r3, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801e34a:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e34e:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 801e350:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801e354:	4bf6      	ldr	r3, [pc, #984]	; (801e730 <lv_led_event+0x480>)
 801e356:	ea02 0703 	and.w	r7, r2, r3
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801e35a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 801e35e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e362:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801e366:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e36a:	b2cc      	uxtb	r4, r1
 801e36c:	4414      	add	r4, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e36e:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801e372:	3404      	adds	r4, #4
 801e374:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e376:	fb07 f404 	mul.w	r4, r7, r4
 801e37a:	ea03 1454 	and.w	r4, r3, r4, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e37e:	f89d c006 	ldrb.w	ip, [sp, #6]
 801e382:	f00c 0c1f 	and.w	ip, ip, #31
 801e386:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801e38a:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801e38e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801e392:	08d2      	lsrs	r2, r2, #3
 801e394:	eb02 1042 	add.w	r0, r2, r2, lsl #5
 801e398:	ebc2 00c0 	rsb	r0, r2, r0, lsl #3
 801e39c:	3007      	adds	r0, #7
 801e39e:	1140      	asrs	r0, r0, #5
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	f360 4217 	bfi	r2, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801e3a6:	eb01 10c1 	add.w	r0, r1, r1, lsl #7
 801e3aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801e3ae:	3103      	adds	r1, #3
 801e3b0:	1189      	asrs	r1, r1, #6
 801e3b2:	f361 220f 	bfi	r2, r1, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801e3b6:	eb0c 114c 	add.w	r1, ip, ip, lsl #5
 801e3ba:	ebcc 0cc1 	rsb	ip, ip, r1, lsl #3
 801e3be:	f10c 0c07 	add.w	ip, ip, #7
 801e3c2:	ea4f 1c6c 	mov.w	ip, ip, asr #5
 801e3c6:	f36c 0207 	bfi	r2, ip, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801e3ca:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801e3ce:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801e3d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e3d6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801e3da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e3de:	b2d0      	uxtb	r0, r2
 801e3e0:	4408      	add	r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e3e2:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 801e3e6:	3004      	adds	r0, #4
 801e3e8:	08c0      	lsrs	r0, r0, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e3ea:	fb07 f000 	mul.w	r0, r7, r0
 801e3ee:	ea03 1050 	and.w	r0, r3, r0, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e3f2:	f89d 200a 	ldrb.w	r2, [sp, #10]
 801e3f6:	f002 021f 	and.w	r2, r2, #31
 801e3fa:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801e3fe:	f3cc 1c45 	ubfx	ip, ip, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801e402:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801e406:	08c9      	lsrs	r1, r1, #3
 801e408:	eb01 1e41 	add.w	lr, r1, r1, lsl #5
 801e40c:	ebc1 0ece 	rsb	lr, r1, lr, lsl #3
 801e410:	f10e 0e07 	add.w	lr, lr, #7
 801e414:	ea4f 1e6e 	mov.w	lr, lr, asr #5
 801e418:	2100      	movs	r1, #0
 801e41a:	f36e 4117 	bfi	r1, lr, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801e41e:	eb0c 1ecc 	add.w	lr, ip, ip, lsl #7
 801e422:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
 801e426:	f10c 0c03 	add.w	ip, ip, #3
 801e42a:	ea4f 1cac 	mov.w	ip, ip, asr #6
 801e42e:	f36c 210f 	bfi	r1, ip, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801e432:	eb02 1c42 	add.w	ip, r2, r2, lsl #5
 801e436:	ebc2 02cc 	rsb	r2, r2, ip, lsl #3
 801e43a:	3207      	adds	r2, #7
 801e43c:	1152      	asrs	r2, r2, #5
 801e43e:	f362 0107 	bfi	r1, r2, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801e442:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801e446:	f3c1 4207 	ubfx	r2, r1, #16, #8
 801e44a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e44e:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801e452:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 801e456:	b2c9      	uxtb	r1, r1
 801e458:	4411      	add	r1, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e45a:	f3c1 01c7 	ubfx	r1, r1, #3, #8
 801e45e:	3104      	adds	r1, #4
 801e460:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e462:	fb07 f101 	mul.w	r1, r7, r1
 801e466:	ea03 1151 	and.w	r1, r3, r1, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e46a:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
 801e46e:	f00c 0c1f 	and.w	ip, ip, #31
 801e472:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
 801e476:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801e47a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801e47e:	08d2      	lsrs	r2, r2, #3
 801e480:	eb02 1842 	add.w	r8, r2, r2, lsl #5
 801e484:	ebc2 08c8 	rsb	r8, r2, r8, lsl #3
 801e488:	f108 0807 	add.w	r8, r8, #7
 801e48c:	ea4f 1868 	mov.w	r8, r8, asr #5
 801e490:	2200      	movs	r2, #0
 801e492:	f368 4217 	bfi	r2, r8, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801e496:	eb0e 18ce 	add.w	r8, lr, lr, lsl #7
 801e49a:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 801e49e:	f10e 0e03 	add.w	lr, lr, #3
 801e4a2:	ea4f 1eae 	mov.w	lr, lr, asr #6
 801e4a6:	f36e 220f 	bfi	r2, lr, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801e4aa:	eb0c 1e4c 	add.w	lr, ip, ip, lsl #5
 801e4ae:	ebcc 0cce 	rsb	ip, ip, lr, lsl #3
 801e4b2:	f10c 0c07 	add.w	ip, ip, #7
 801e4b6:	ea4f 1c6c 	mov.w	ip, ip, asr #5
 801e4ba:	f36c 0207 	bfi	r2, ip, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801e4be:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801e4c2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801e4c6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e4ca:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 801e4ce:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 801e4d2:	b2d2      	uxtb	r2, r2
 801e4d4:	4462      	add	r2, ip
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e4d6:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 801e4da:	3204      	adds	r2, #4
 801e4dc:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e4de:	fb07 f202 	mul.w	r2, r7, r2
 801e4e2:	ea03 1252 	and.w	r2, r3, r2, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801e4e6:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 801e4ea:	b292      	uxth	r2, r2
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 801e4ec:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e4f0:	f89d 701e 	ldrb.w	r7, [sp, #30]
 801e4f4:	f007 071f 	and.w	r7, r7, #31
 801e4f8:	f8bd c01e 	ldrh.w	ip, [sp, #30]
 801e4fc:	f3cc 1c45 	ubfx	ip, ip, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801e500:	f89d e01f 	ldrb.w	lr, [sp, #31]
 801e504:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 801e508:	eb0e 184e 	add.w	r8, lr, lr, lsl #5
 801e50c:	ebce 08c8 	rsb	r8, lr, r8, lsl #3
 801e510:	f108 0807 	add.w	r8, r8, #7
 801e514:	ea4f 1868 	mov.w	r8, r8, asr #5
 801e518:	f04f 0e00 	mov.w	lr, #0
 801e51c:	f368 4e17 	bfi	lr, r8, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801e520:	eb0c 18cc 	add.w	r8, ip, ip, lsl #7
 801e524:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 801e528:	f10c 0c03 	add.w	ip, ip, #3
 801e52c:	ea4f 1cac 	mov.w	ip, ip, asr #6
 801e530:	f36c 2e0f 	bfi	lr, ip, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801e534:	eb07 1c47 	add.w	ip, r7, r7, lsl #5
 801e538:	ebc7 07cc 	rsb	r7, r7, ip, lsl #3
 801e53c:	3707      	adds	r7, #7
 801e53e:	117f      	asrs	r7, r7, #5
 801e540:	f367 0e07 	bfi	lr, r7, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801e544:	f04e 4e7f 	orr.w	lr, lr, #4278190080	; 0xff000000
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e548:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
 801e54c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 801e550:	ea0c 0703 	and.w	r7, ip, r3
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801e554:	f3ce 4c07 	ubfx	ip, lr, #16, #8
 801e558:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e55c:	f3ce 2807 	ubfx	r8, lr, #8, #8
 801e560:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 801e564:	fa5f fe8e 	uxtb.w	lr, lr
 801e568:	44e6      	add	lr, ip
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e56a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801e56e:	f10e 0e04 	add.w	lr, lr, #4
 801e572:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e576:	fb07 fe0e 	mul.w	lr, r7, lr
 801e57a:	ea03 1e5e 	and.w	lr, r3, lr, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e57e:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 801e582:	f008 081f 	and.w	r8, r8, #31
 801e586:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
 801e58a:	f3c9 1945 	ubfx	r9, r9, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801e58e:	f89d c025 	ldrb.w	ip, [sp, #37]	; 0x25
 801e592:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 801e596:	eb0c 1a4c 	add.w	sl, ip, ip, lsl #5
 801e59a:	ebcc 0aca 	rsb	sl, ip, sl, lsl #3
 801e59e:	f10a 0a07 	add.w	sl, sl, #7
 801e5a2:	ea4f 1a6a 	mov.w	sl, sl, asr #5
 801e5a6:	f04f 0c00 	mov.w	ip, #0
 801e5aa:	f36a 4c17 	bfi	ip, sl, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801e5ae:	eb09 1ac9 	add.w	sl, r9, r9, lsl #7
 801e5b2:	eb09 094a 	add.w	r9, r9, sl, lsl #1
 801e5b6:	f109 0903 	add.w	r9, r9, #3
 801e5ba:	ea4f 19a9 	mov.w	r9, r9, asr #6
 801e5be:	f369 2c0f 	bfi	ip, r9, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801e5c2:	eb08 1948 	add.w	r9, r8, r8, lsl #5
 801e5c6:	ebc8 08c9 	rsb	r8, r8, r9, lsl #3
 801e5ca:	f108 0807 	add.w	r8, r8, #7
 801e5ce:	ea4f 1868 	mov.w	r8, r8, asr #5
 801e5d2:	f368 0c07 	bfi	ip, r8, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801e5d6:	f04c 4c7f 	orr.w	ip, ip, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801e5da:	f3cc 4807 	ubfx	r8, ip, #16, #8
 801e5de:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e5e2:	f3cc 2907 	ubfx	r9, ip, #8, #8
 801e5e6:	eb08 0889 	add.w	r8, r8, r9, lsl #2
 801e5ea:	fa5f fc8c 	uxtb.w	ip, ip
 801e5ee:	44c4      	add	ip, r8
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e5f0:	f3cc 0cc7 	ubfx	ip, ip, #3, #8
 801e5f4:	f10c 0c04 	add.w	ip, ip, #4
 801e5f8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e5fc:	fb07 fc0c 	mul.w	ip, r7, ip
 801e600:	ea03 1c5c 	and.w	ip, r3, ip, lsr #5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e604:	f896 7026 	ldrb.w	r7, [r6, #38]	; 0x26
 801e608:	3704      	adds	r7, #4
 801e60a:	08ff      	lsrs	r7, r7, #3
    ret.full = (uint16_t)((result >> 16) | result);
 801e60c:	ea44 4814 	orr.w	r8, r4, r4, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e610:	fa1f f488 	uxth.w	r4, r8
 801e614:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 801e618:	401c      	ands	r4, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e61a:	fb07 f404 	mul.w	r4, r7, r4
 801e61e:	ea03 1454 	and.w	r4, r3, r4, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801e622:	ea44 4414 	orr.w	r4, r4, r4, lsr #16
        rect_dsc.bg_color = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 801e626:	f8ad 4004 	strh.w	r4, [sp, #4]
 801e62a:	ea40 4410 	orr.w	r4, r0, r0, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e62e:	b2a0      	uxth	r0, r4
 801e630:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 801e634:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e636:	fb07 f000 	mul.w	r0, r7, r0
 801e63a:	ea03 1050 	and.w	r0, r3, r0, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801e63e:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
        rect_dsc.bg_grad.stops[0].color   = lv_color_mix(rect_dsc.bg_grad.stops[0].color, lv_color_black(), led->bright);
 801e642:	f8ad 0006 	strh.w	r0, [sp, #6]
 801e646:	ea41 4011 	orr.w	r0, r1, r1, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e64a:	b281      	uxth	r1, r0
 801e64c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e650:	4019      	ands	r1, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e652:	fb07 f101 	mul.w	r1, r7, r1
 801e656:	ea03 1151 	and.w	r1, r3, r1, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801e65a:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
        rect_dsc.bg_grad.stops[1].color   = lv_color_mix(rect_dsc.bg_grad.stops[1].color, lv_color_black(), led->bright);
 801e65e:	f8ad 100a 	strh.w	r1, [sp, #10]
 801e662:	ea4e 4e1e 	orr.w	lr, lr, lr, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e666:	fa1f f18e 	uxth.w	r1, lr
 801e66a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 801e66e:	4019      	ands	r1, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e670:	fb07 f101 	mul.w	r1, r7, r1
 801e674:	ea03 1151 	and.w	r1, r3, r1, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801e678:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 801e67c:	f8ad 101e 	strh.w	r1, [sp, #30]
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e680:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801e684:	401a      	ands	r2, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e686:	fb07 f202 	mul.w	r2, r7, r2
 801e68a:	ea03 1252 	and.w	r2, r3, r2, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801e68e:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 801e692:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 801e696:	f896 2026 	ldrb.w	r2, [r6, #38]	; 0x26
 801e69a:	ea4c 4c1c 	orr.w	ip, ip, ip, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801e69e:	fa1f f18c 	uxth.w	r1, ip
 801e6a2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 801e6a6:	4019      	ands	r1, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801e6a8:	1d10      	adds	r0, r2, #4
 801e6aa:	08c0      	lsrs	r0, r0, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801e6ac:	fb00 f101 	mul.w	r1, r0, r1
 801e6b0:	ea03 1351 	and.w	r3, r3, r1, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801e6b4:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
 801e6b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 801e6bc:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
 801e6c0:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801e6c4:	fb02 f303 	mul.w	r3, r2, r3
 801e6c8:	4a1a      	ldr	r2, [pc, #104]	; (801e734 <lv_led_event+0x484>)
 801e6ca:	fb82 0103 	smull	r0, r1, r2, r3
 801e6ce:	17db      	asrs	r3, r3, #31
 801e6d0:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 801e6d4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 801e6d8:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 801e6dc:	3b50      	subs	r3, #80	; 0x50
 801e6de:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801e6e2:	fb01 f303 	mul.w	r3, r1, r3
 801e6e6:	fb82 1203 	smull	r1, r2, r2, r3
 801e6ea:	17db      	asrs	r3, r3, #31
 801e6ec:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801e6f0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801e6f4:	4628      	mov	r0, r5
 801e6f6:	f7e5 fb99 	bl	8003e2c <lv_event_get_draw_ctx>
 801e6fa:	4604      	mov	r4, r0
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801e6fc:	4601      	mov	r1, r0
 801e6fe:	a80e      	add	r0, sp, #56	; 0x38
 801e700:	f7e8 ffe7 	bl	80076d2 <lv_obj_draw_dsc_init>
        part_draw_dsc.draw_area = &obj->coords;
 801e704:	f106 0514 	add.w	r5, r6, #20
 801e708:	9511      	str	r5, [sp, #68]	; 0x44
        part_draw_dsc.class_p = MY_CLASS;
 801e70a:	4b0b      	ldr	r3, [pc, #44]	; (801e738 <lv_led_event+0x488>)
 801e70c:	930f      	str	r3, [sp, #60]	; 0x3c
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 801e70e:	2300      	movs	r3, #0
 801e710:	9310      	str	r3, [sp, #64]	; 0x40
        part_draw_dsc.rect_dsc = &rect_dsc;
 801e712:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
        part_draw_dsc.part = LV_PART_MAIN;
 801e716:	931b      	str	r3, [sp, #108]	; 0x6c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801e718:	aa0e      	add	r2, sp, #56	; 0x38
 801e71a:	211a      	movs	r1, #26
 801e71c:	4630      	mov	r0, r6
 801e71e:	f7e5 faef 	bl	8003d00 <lv_event_send>
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
 801e722:	462a      	mov	r2, r5
 801e724:	4669      	mov	r1, sp
 801e726:	4620      	mov	r0, r4
 801e728:	f7f0 fd7a 	bl	800f220 <lv_draw_rect>
 801e72c:	e006      	b.n	801e73c <lv_led_event+0x48c>
 801e72e:	bf00      	nop
 801e730:	07e0f81f 	.word	0x07e0f81f
 801e734:	5d9f7391 	.word	0x5d9f7391
 801e738:	0802d660 	.word	0x0802d660
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801e73c:	aa0e      	add	r2, sp, #56	; 0x38
 801e73e:	211b      	movs	r1, #27
 801e740:	4630      	mov	r0, r6
 801e742:	f7e5 fadd 	bl	8003d00 <lv_event_send>
 801e746:	e5c8      	b.n	801e2da <lv_led_event+0x2a>

0801e748 <lv_menu_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_menu_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801e748:	b508      	push	{r3, lr}
    LV_TRACE_OBJ_CREATE("begin");

    lv_menu_t * menu = (lv_menu_t *)obj;
    lv_ll_t * history_ll = &(menu->history_ll);

    _lv_ll_clear(history_ll);
 801e74a:	f101 0054 	add.w	r0, r1, #84	; 0x54
 801e74e:	f002 ff41 	bl	80215d4 <_lv_ll_clear>

    LV_TRACE_OBJ_CREATE("finished");
}
 801e752:	bd08      	pop	{r3, pc}

0801e754 <lv_menu_section_constructor>:
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
}

static void lv_menu_section_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801e754:	b510      	push	{r4, lr}
 801e756:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801e758:	2101      	movs	r1, #1
 801e75a:	4620      	mov	r0, r4
 801e75c:	f7f8 f8fe 	bl	801695c <lv_obj_set_flex_flow>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801e760:	2102      	movs	r1, #2
 801e762:	4620      	mov	r0, r4
 801e764:	f7e8 f8de 	bl	8006924 <lv_obj_clear_flag>
}
 801e768:	bd10      	pop	{r4, pc}

0801e76a <lv_menu_cont_constructor>:
{
 801e76a:	b510      	push	{r4, lr}
 801e76c:	460c      	mov	r4, r1
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 801e76e:	2100      	movs	r1, #0
 801e770:	4620      	mov	r0, r4
 801e772:	f7f8 f8f3 	bl	801695c <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 801e776:	2302      	movs	r3, #2
 801e778:	461a      	mov	r2, r3
 801e77a:	2100      	movs	r1, #0
 801e77c:	4620      	mov	r0, r4
 801e77e:	f7f8 f919 	bl	80169b4 <lv_obj_set_flex_align>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801e782:	2102      	movs	r1, #2
 801e784:	4620      	mov	r0, r4
 801e786:	f7e8 f8cd 	bl	8006924 <lv_obj_clear_flag>
}
 801e78a:	bd10      	pop	{r4, pc}

0801e78c <lv_menu_constructor>:
{
 801e78c:	b570      	push	{r4, r5, r6, lr}
 801e78e:	460c      	mov	r4, r1
    lv_obj_set_layout(obj, LV_LAYOUT_FLEX);
 801e790:	4b48      	ldr	r3, [pc, #288]	; (801e8b4 <lv_menu_constructor+0x128>)
 801e792:	8819      	ldrh	r1, [r3, #0]
 801e794:	4620      	mov	r0, r4
 801e796:	f7e9 f911 	bl	80079bc <lv_obj_set_layout>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 801e79a:	2100      	movs	r1, #0
 801e79c:	4620      	mov	r0, r4
 801e79e:	f7f8 f8dd 	bl	801695c <lv_obj_set_flex_flow>
    menu->mode_header = LV_MENU_HEADER_TOP_FIXED;
 801e7a2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    menu->cur_depth = 0;
 801e7a6:	2500      	movs	r5, #0
 801e7a8:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    menu->prev_depth = 0;
 801e7ac:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    menu->sidebar_generated = false;
 801e7b0:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 801e7b4:	f365 0300 	bfi	r3, r5, #0, #1
 801e7b8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    _lv_ll_init(&(menu->history_ll), sizeof(lv_menu_history_t));
 801e7bc:	2104      	movs	r1, #4
 801e7be:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801e7c2:	f002 fe92 	bl	80214ea <_lv_ll_init>
    menu->storage = lv_obj_create(obj);
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	f7e8 f866 	bl	8006898 <lv_obj_create>
 801e7cc:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_add_flag(menu->storage, LV_OBJ_FLAG_HIDDEN);
 801e7ce:	2101      	movs	r1, #1
 801e7d0:	f7e8 f86e 	bl	80068b0 <lv_obj_add_flag>
    menu->sidebar = NULL;
 801e7d4:	63e5      	str	r5, [r4, #60]	; 0x3c
    menu->sidebar_header = NULL;
 801e7d6:	6465      	str	r5, [r4, #68]	; 0x44
    menu->sidebar_header_back_btn = NULL;
 801e7d8:	64a5      	str	r5, [r4, #72]	; 0x48
    menu->sidebar_header_title = NULL;
 801e7da:	64e5      	str	r5, [r4, #76]	; 0x4c
    menu->sidebar_page = NULL;
 801e7dc:	6425      	str	r5, [r4, #64]	; 0x40
    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 801e7de:	4621      	mov	r1, r4
 801e7e0:	4835      	ldr	r0, [pc, #212]	; (801e8b8 <lv_menu_constructor+0x12c>)
 801e7e2:	f7e8 fb55 	bl	8006e90 <lv_obj_class_create_obj>
 801e7e6:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_cont);
 801e7e8:	f7e8 fbff 	bl	8006fea <lv_obj_class_init_obj>
    lv_obj_set_height(main_cont, LV_PCT(100));
 801e7ec:	f242 0164 	movw	r1, #8292	; 0x2064
 801e7f0:	4630      	mov	r0, r6
 801e7f2:	f7e9 f892 	bl	800791a <lv_obj_set_height>
    lv_obj_set_flex_grow(main_cont, 1);
 801e7f6:	2101      	movs	r1, #1
 801e7f8:	4630      	mov	r0, r6
 801e7fa:	f7f8 f8ff 	bl	80169fc <lv_obj_set_flex_grow>
    lv_obj_set_flex_flow(main_cont, LV_FLEX_FLOW_COLUMN);
 801e7fe:	2101      	movs	r1, #1
 801e800:	4630      	mov	r0, r6
 801e802:	f7f8 f8ab 	bl	801695c <lv_obj_set_flex_flow>
    lv_obj_add_flag(main_cont, LV_OBJ_FLAG_EVENT_BUBBLE);
 801e806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801e80a:	4630      	mov	r0, r6
 801e80c:	f7e8 f850 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_clear_flag(main_cont, LV_OBJ_FLAG_CLICKABLE);
 801e810:	2102      	movs	r1, #2
 801e812:	4630      	mov	r0, r6
 801e814:	f7e8 f886 	bl	8006924 <lv_obj_clear_flag>
    menu->main = main_cont;
 801e818:	62a6      	str	r6, [r4, #40]	; 0x28
    lv_obj_t * main_header = lv_obj_class_create_obj(&lv_menu_main_header_cont_class, main_cont);
 801e81a:	4631      	mov	r1, r6
 801e81c:	4827      	ldr	r0, [pc, #156]	; (801e8bc <lv_menu_constructor+0x130>)
 801e81e:	f7e8 fb37 	bl	8006e90 <lv_obj_class_create_obj>
 801e822:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_header);
 801e824:	f7e8 fbe1 	bl	8006fea <lv_obj_class_init_obj>
    lv_obj_set_size(main_header, LV_PCT(100), LV_SIZE_CONTENT);
 801e828:	f242 72d1 	movw	r2, #10193	; 0x27d1
 801e82c:	f242 0164 	movw	r1, #8292	; 0x2064
 801e830:	4630      	mov	r0, r6
 801e832:	f7e9 f889 	bl	8007948 <lv_obj_set_size>
    lv_obj_set_flex_flow(main_header, LV_FLEX_FLOW_ROW);
 801e836:	4629      	mov	r1, r5
 801e838:	4630      	mov	r0, r6
 801e83a:	f7f8 f88f 	bl	801695c <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(main_header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 801e83e:	2302      	movs	r3, #2
 801e840:	461a      	mov	r2, r3
 801e842:	4629      	mov	r1, r5
 801e844:	4630      	mov	r0, r6
 801e846:	f7f8 f8b5 	bl	80169b4 <lv_obj_set_flex_align>
    lv_obj_clear_flag(main_header, LV_OBJ_FLAG_CLICKABLE);
 801e84a:	2102      	movs	r1, #2
 801e84c:	4630      	mov	r0, r6
 801e84e:	f7e8 f869 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_add_flag(main_header, LV_OBJ_FLAG_EVENT_BUBBLE);
 801e852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801e856:	4630      	mov	r0, r6
 801e858:	f7e8 f82a 	bl	80068b0 <lv_obj_add_flag>
    menu->main_header = main_header;
 801e85c:	6326      	str	r6, [r4, #48]	; 0x30
    lv_obj_t * main_header_back_btn = lv_btn_create(menu->main_header);
 801e85e:	4630      	mov	r0, r6
 801e860:	f006 fe0c 	bl	802547c <lv_btn_create>
 801e864:	4606      	mov	r6, r0
    lv_obj_add_event_cb(main_header_back_btn, lv_menu_back_event_cb, LV_EVENT_CLICKED, menu);
 801e866:	4623      	mov	r3, r4
 801e868:	2207      	movs	r2, #7
 801e86a:	4915      	ldr	r1, [pc, #84]	; (801e8c0 <lv_menu_constructor+0x134>)
 801e86c:	f7e5 fa8a 	bl	8003d84 <lv_obj_add_event_cb>
    lv_obj_add_flag(main_header_back_btn, LV_OBJ_FLAG_EVENT_BUBBLE);
 801e870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801e874:	4630      	mov	r0, r6
 801e876:	f7e8 f81b 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_set_flex_flow(main_header_back_btn, LV_FLEX_FLOW_ROW);
 801e87a:	4629      	mov	r1, r5
 801e87c:	4630      	mov	r0, r6
 801e87e:	f7f8 f86d 	bl	801695c <lv_obj_set_flex_flow>
    menu->main_header_back_btn = main_header_back_btn;
 801e882:	6366      	str	r6, [r4, #52]	; 0x34
    lv_obj_t * main_header_back_icon = lv_img_create(menu->main_header_back_btn);
 801e884:	4630      	mov	r0, r6
 801e886:	f008 fecf 	bl	8027628 <lv_img_create>
    lv_img_set_src(main_header_back_icon, LV_SYMBOL_LEFT);
 801e88a:	490e      	ldr	r1, [pc, #56]	; (801e8c4 <lv_menu_constructor+0x138>)
 801e88c:	f008 fed8 	bl	8027640 <lv_img_set_src>
    lv_obj_t * main_header_title = lv_label_create(menu->main_header);
 801e890:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e892:	f009 fb4b 	bl	8027f2c <lv_label_create>
 801e896:	4606      	mov	r6, r0
    lv_obj_add_flag(main_header_title, LV_OBJ_FLAG_HIDDEN);
 801e898:	2101      	movs	r1, #1
 801e89a:	f7e8 f809 	bl	80068b0 <lv_obj_add_flag>
    menu->main_header_title = main_header_title;
 801e89e:	63a6      	str	r6, [r4, #56]	; 0x38
    menu->main_page = NULL;
 801e8a0:	62e5      	str	r5, [r4, #44]	; 0x2c
    menu->selected_tab = NULL;
 801e8a2:	6525      	str	r5, [r4, #80]	; 0x50
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 801e8a4:	4623      	mov	r3, r4
 801e8a6:	221c      	movs	r2, #28
 801e8a8:	4907      	ldr	r1, [pc, #28]	; (801e8c8 <lv_menu_constructor+0x13c>)
 801e8aa:	4620      	mov	r0, r4
 801e8ac:	f7e5 fa6a 	bl	8003d84 <lv_obj_add_event_cb>
}
 801e8b0:	bd70      	pop	{r4, r5, r6, pc}
 801e8b2:	bf00      	nop
 801e8b4:	2000267a 	.word	0x2000267a
 801e8b8:	0802d708 	.word	0x0802d708
 801e8bc:	0802d724 	.word	0x0802d724
 801e8c0:	0801eb0d 	.word	0x0801eb0d
 801e8c4:	0802d168 	.word	0x0802d168
 801e8c8:	0801e98f 	.word	0x0801e98f

0801e8cc <lv_menu_page_destructor>:
    if(page->title != NULL) {
 801e8cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801e8ce:	b130      	cbz	r0, 801e8de <lv_menu_page_destructor+0x12>
{
 801e8d0:	b510      	push	{r4, lr}
 801e8d2:	460c      	mov	r4, r1
        lv_mem_free(page->title);
 801e8d4:	f002 ffe6 	bl	80218a4 <lv_mem_free>
        page->title = NULL;
 801e8d8:	2300      	movs	r3, #0
 801e8da:	6263      	str	r3, [r4, #36]	; 0x24
}
 801e8dc:	bd10      	pop	{r4, pc}
 801e8de:	4770      	bx	lr

0801e8e0 <lv_menu_page_constructor>:
{
 801e8e0:	b510      	push	{r4, lr}
 801e8e2:	460c      	mov	r4, r1
    lv_menu_t * menu = (lv_menu_t *)lv_obj_get_parent(obj);
 801e8e4:	4608      	mov	r0, r1
 801e8e6:	f7ec fec1 	bl	800b66c <lv_obj_get_parent>
    lv_obj_set_parent(obj, ((lv_menu_t *)menu)->storage);
 801e8ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	f7ec ffbe 	bl	800b86e <lv_obj_set_parent>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801e8f2:	2101      	movs	r1, #1
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f7f8 f831 	bl	801695c <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 801e8fa:	2302      	movs	r3, #2
 801e8fc:	461a      	mov	r2, r3
 801e8fe:	2100      	movs	r1, #0
 801e900:	4620      	mov	r0, r4
 801e902:	f7f8 f857 	bl	80169b4 <lv_obj_set_flex_align>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE);
 801e906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801e90a:	4620      	mov	r0, r4
 801e90c:	f7e7 ffd0 	bl	80068b0 <lv_obj_add_flag>
}
 801e910:	bd10      	pop	{r4, pc}

0801e912 <lv_menu_refr_main_header_mode>:
        lv_obj_clear_flag(menu->sidebar_header, LV_OBJ_FLAG_HIDDEN);
    }
}

static void lv_menu_refr_main_header_mode(lv_obj_t * obj)
{
 801e912:	b510      	push	{r4, lr}
 801e914:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_menu_t * menu = (lv_menu_t *)obj;

    if(menu->main_header == NULL || menu->main_page == NULL) return;
 801e916:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e918:	b1d8      	cbz	r0, 801e952 <lv_menu_refr_main_header_mode+0x40>
 801e91a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801e91c:	b1cb      	cbz	r3, 801e952 <lv_menu_refr_main_header_mode+0x40>

    switch(menu->mode_header) {
 801e91e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 801e922:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801e926:	2b01      	cmp	r3, #1
 801e928:	d01c      	beq.n	801e964 <lv_menu_refr_main_header_mode+0x52>
 801e92a:	2b02      	cmp	r3, #2
 801e92c:	d022      	beq.n	801e974 <lv_menu_refr_main_header_mode+0x62>
 801e92e:	b18b      	cbz	r3, 801e954 <lv_menu_refr_main_header_mode+0x42>
            lv_obj_move_to_index(menu->main_header, 1);
            lv_obj_set_flex_grow(menu->main_page, 1);
            break;
    }

    lv_obj_refr_size(menu->main_header);
 801e930:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e932:	f7e9 fe37 	bl	80085a4 <lv_obj_refr_size>
    lv_obj_refr_size(menu->main_page);
 801e936:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801e938:	f7e9 fe34 	bl	80085a4 <lv_obj_refr_size>
    lv_obj_update_layout(menu->main_header);
 801e93c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e93e:	f7ea f9cf 	bl	8008ce0 <lv_obj_update_layout>

    if(lv_obj_get_content_height(menu->main_header) == 0) {
 801e942:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e944:	f7e9 f8fa 	bl	8007b3c <lv_obj_get_content_height>
 801e948:	b9e0      	cbnz	r0, 801e984 <lv_menu_refr_main_header_mode+0x72>
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 801e94a:	2101      	movs	r1, #1
 801e94c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e94e:	f7e7 ffaf 	bl	80068b0 <lv_obj_add_flag>
    }
    else {
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
    }
}
 801e952:	bd10      	pop	{r4, pc}
            lv_obj_move_to_index(menu->main_header, 0);
 801e954:	2100      	movs	r1, #0
 801e956:	f7ec ffff 	bl	800b958 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 801e95a:	2101      	movs	r1, #1
 801e95c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801e95e:	f7f8 f84d 	bl	80169fc <lv_obj_set_flex_grow>
            break;
 801e962:	e7e5      	b.n	801e930 <lv_menu_refr_main_header_mode+0x1e>
            lv_obj_move_to_index(menu->main_header, 0);
 801e964:	2100      	movs	r1, #0
 801e966:	f7ec fff7 	bl	800b958 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 0);
 801e96a:	2100      	movs	r1, #0
 801e96c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801e96e:	f7f8 f845 	bl	80169fc <lv_obj_set_flex_grow>
            break;
 801e972:	e7dd      	b.n	801e930 <lv_menu_refr_main_header_mode+0x1e>
            lv_obj_move_to_index(menu->main_header, 1);
 801e974:	2101      	movs	r1, #1
 801e976:	f7ec ffef 	bl	800b958 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 801e97a:	2101      	movs	r1, #1
 801e97c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801e97e:	f7f8 f83d 	bl	80169fc <lv_obj_set_flex_grow>
            break;
 801e982:	e7d5      	b.n	801e930 <lv_menu_refr_main_header_mode+0x1e>
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 801e984:	2101      	movs	r1, #1
 801e986:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e988:	f7e7 ffcc 	bl	8006924 <lv_obj_clear_flag>
 801e98c:	e7e1      	b.n	801e952 <lv_menu_refr_main_header_mode+0x40>

0801e98e <lv_menu_value_changed_event_cb>:
        }
    }
}

static void lv_menu_value_changed_event_cb(lv_event_t * e)
{
 801e98e:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_event_get_user_data(e);
 801e990:	f7e5 f9e2 	bl	8003d58 <lv_event_get_user_data>
 801e994:	4604      	mov	r4, r0
    return menu->main_page;
 801e996:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    lv_menu_t * menu = (lv_menu_t *)obj;

    lv_menu_page_t * main_page = (lv_menu_page_t *)lv_menu_get_cur_main_page(obj);
    if(main_page != NULL && menu->main_header_title != NULL) {
 801e998:	b14b      	cbz	r3, 801e9ae <lv_menu_value_changed_event_cb+0x20>
 801e99a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e99c:	b138      	cbz	r0, 801e9ae <lv_menu_value_changed_event_cb+0x20>
        if(main_page->title != NULL) {
 801e99e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801e9a0:	b191      	cbz	r1, 801e9c8 <lv_menu_value_changed_event_cb+0x3a>
            lv_label_set_text(menu->main_header_title, main_page->title);
 801e9a2:	f009 ff9f 	bl	80288e4 <lv_label_set_text>
            lv_obj_clear_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 801e9a6:	2101      	movs	r1, #1
 801e9a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e9aa:	f7e7 ffbb 	bl	8006924 <lv_obj_clear_flag>
    return menu->sidebar_page;
 801e9ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }

    lv_menu_page_t * sidebar_page = (lv_menu_page_t *)lv_menu_get_cur_sidebar_page(obj);
    if(sidebar_page != NULL && menu->sidebar_header_title != NULL) {
 801e9b0:	b14b      	cbz	r3, 801e9c6 <lv_menu_value_changed_event_cb+0x38>
 801e9b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801e9b4:	b138      	cbz	r0, 801e9c6 <lv_menu_value_changed_event_cb+0x38>
        if(sidebar_page->title != NULL) {
 801e9b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801e9b8:	b151      	cbz	r1, 801e9d0 <lv_menu_value_changed_event_cb+0x42>
            lv_label_set_text(menu->sidebar_header_title, sidebar_page->title);
 801e9ba:	f009 ff93 	bl	80288e4 <lv_label_set_text>
            lv_obj_clear_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 801e9be:	2101      	movs	r1, #1
 801e9c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801e9c2:	f7e7 ffaf 	bl	8006924 <lv_obj_clear_flag>
        }
        else {
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }
}
 801e9c6:	bd10      	pop	{r4, pc}
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 801e9c8:	2101      	movs	r1, #1
 801e9ca:	f7e7 ff71 	bl	80068b0 <lv_obj_add_flag>
 801e9ce:	e7ee      	b.n	801e9ae <lv_menu_value_changed_event_cb+0x20>
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 801e9d0:	2101      	movs	r1, #1
 801e9d2:	f7e7 ff6d 	bl	80068b0 <lv_obj_add_flag>
}
 801e9d6:	e7f6      	b.n	801e9c6 <lv_menu_value_changed_event_cb+0x38>

0801e9d8 <lv_menu_back_btn_is_root>:
    if(obj == ((lv_menu_t *)menu)->sidebar_header_back_btn) {
 801e9d8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801e9da:	428b      	cmp	r3, r1
 801e9dc:	d00b      	beq.n	801e9f6 <lv_menu_back_btn_is_root+0x1e>
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 801e9de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e9e0:	428b      	cmp	r3, r1
 801e9e2:	d001      	beq.n	801e9e8 <lv_menu_back_btn_is_root+0x10>
    return false;
 801e9e4:	2000      	movs	r0, #0
}
 801e9e6:	4770      	bx	lr
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 801e9e8:	f890 0061 	ldrb.w	r0, [r0, #97]	; 0x61
 801e9ec:	2801      	cmp	r0, #1
 801e9ee:	bf8c      	ite	hi
 801e9f0:	2000      	movhi	r0, #0
 801e9f2:	2001      	movls	r0, #1
 801e9f4:	4770      	bx	lr
        return true;
 801e9f6:	2001      	movs	r0, #1
 801e9f8:	4770      	bx	lr

0801e9fa <lv_menu_clear_history>:
{
 801e9fa:	b510      	push	{r4, lr}
 801e9fc:	4604      	mov	r4, r0
    _lv_ll_clear(history_ll);
 801e9fe:	3054      	adds	r0, #84	; 0x54
 801ea00:	f002 fde8 	bl	80215d4 <_lv_ll_clear>
    menu->cur_depth = 0;
 801ea04:	2300      	movs	r3, #0
 801ea06:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 801ea0a:	bd10      	pop	{r4, pc}

0801ea0c <lv_menu_set_page>:
{
 801ea0c:	b538      	push	{r3, r4, r5, lr}
 801ea0e:	4604      	mov	r4, r0
 801ea10:	460d      	mov	r5, r1
    if(menu->main_page != NULL) {
 801ea12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801ea14:	b110      	cbz	r0, 801ea1c <lv_menu_set_page+0x10>
        lv_obj_set_parent(menu->main_page, menu->storage);
 801ea16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ea18:	f7ec ff29 	bl	800b86e <lv_obj_set_parent>
    if(page != NULL) {
 801ea1c:	2d00      	cmp	r5, #0
 801ea1e:	d040      	beq.n	801eaa2 <lv_menu_set_page+0x96>
        lv_menu_history_t * new_node = _lv_ll_ins_head(history_ll);
 801ea20:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801ea24:	f002 fd69 	bl	80214fa <_lv_ll_ins_head>
        LV_ASSERT_MALLOC(new_node);
 801ea28:	2800      	cmp	r0, #0
 801ea2a:	d039      	beq.n	801eaa0 <lv_menu_set_page+0x94>
        new_node->page = page;
 801ea2c:	6005      	str	r5, [r0, #0]
        menu->cur_depth++;
 801ea2e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801ea32:	3301      	adds	r3, #1
 801ea34:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        lv_obj_set_parent(page, menu->main);
 801ea38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ea3a:	4628      	mov	r0, r5
 801ea3c:	f7ec ff17 	bl	800b86e <lv_obj_set_parent>
    menu->main_page = page;
 801ea40:	62e5      	str	r5, [r4, #44]	; 0x2c
    if(menu->selected_tab != NULL) {
 801ea42:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801ea44:	b120      	cbz	r0, 801ea50 <lv_menu_set_page+0x44>
        if(menu->sidebar_page != NULL) {
 801ea46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea48:	b37b      	cbz	r3, 801eaaa <lv_menu_set_page+0x9e>
            lv_obj_add_state(menu->selected_tab, LV_STATE_CHECKED);
 801ea4a:	2101      	movs	r1, #1
 801ea4c:	f7e7 ffa9 	bl	80069a2 <lv_obj_add_state>
    if(menu->sidebar_page != NULL) {
 801ea50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d03f      	beq.n	801ead6 <lv_menu_set_page+0xca>
        if(menu->sidebar_generated) {
 801ea56:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 801ea5a:	f013 0f01 	tst.w	r3, #1
 801ea5e:	d00a      	beq.n	801ea76 <lv_menu_set_page+0x6a>
            if(menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 801ea60:	f013 0f08 	tst.w	r3, #8
 801ea64:	d025      	beq.n	801eab2 <lv_menu_set_page+0xa6>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801ea66:	2101      	movs	r1, #1
 801ea68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ea6a:	f7e7 ff5b 	bl	8006924 <lv_obj_clear_flag>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801ea6e:	2102      	movs	r1, #2
 801ea70:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ea72:	f7e7 ff1d 	bl	80068b0 <lv_obj_add_flag>
        if(menu->cur_depth >= 2) {
 801ea76:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801ea7a:	2b01      	cmp	r3, #1
 801ea7c:	d922      	bls.n	801eac4 <lv_menu_set_page+0xb8>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801ea7e:	2101      	movs	r1, #1
 801ea80:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ea82:	f7e7 ff4f 	bl	8006924 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801ea86:	2102      	movs	r1, #2
 801ea88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ea8a:	f7e7 ff11 	bl	80068b0 <lv_obj_add_flag>
    lv_event_send((lv_obj_t *)menu, LV_EVENT_VALUE_CHANGED, NULL);
 801ea8e:	2200      	movs	r2, #0
 801ea90:	211c      	movs	r1, #28
 801ea92:	4620      	mov	r0, r4
 801ea94:	f7e5 f934 	bl	8003d00 <lv_event_send>
    lv_menu_refr_main_header_mode(obj);
 801ea98:	4620      	mov	r0, r4
 801ea9a:	f7ff ff3a 	bl	801e912 <lv_menu_refr_main_header_mode>
}
 801ea9e:	bd38      	pop	{r3, r4, r5, pc}
        LV_ASSERT_MALLOC(new_node);
 801eaa0:	e7fe      	b.n	801eaa0 <lv_menu_set_page+0x94>
        lv_menu_clear_history(obj);
 801eaa2:	4620      	mov	r0, r4
 801eaa4:	f7ff ffa9 	bl	801e9fa <lv_menu_clear_history>
 801eaa8:	e7ca      	b.n	801ea40 <lv_menu_set_page+0x34>
            lv_obj_clear_state(menu->selected_tab, LV_STATE_CHECKED);
 801eaaa:	2101      	movs	r1, #1
 801eaac:	f7e7 ff85 	bl	80069ba <lv_obj_clear_state>
 801eab0:	e7ce      	b.n	801ea50 <lv_menu_set_page+0x44>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801eab2:	2101      	movs	r1, #1
 801eab4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801eab6:	f7e7 fefb 	bl	80068b0 <lv_obj_add_flag>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801eaba:	2102      	movs	r1, #2
 801eabc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801eabe:	f7e7 ff31 	bl	8006924 <lv_obj_clear_flag>
 801eac2:	e7d8      	b.n	801ea76 <lv_menu_set_page+0x6a>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801eac4:	2101      	movs	r1, #1
 801eac6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801eac8:	f7e7 fef2 	bl	80068b0 <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801eacc:	2102      	movs	r1, #2
 801eace:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ead0:	f7e7 ff28 	bl	8006924 <lv_obj_clear_flag>
 801ead4:	e7db      	b.n	801ea8e <lv_menu_set_page+0x82>
        if(menu->cur_depth >= 2 || menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 801ead6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801eada:	2b01      	cmp	r3, #1
 801eadc:	d804      	bhi.n	801eae8 <lv_menu_set_page+0xdc>
 801eade:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 801eae2:	f013 0f08 	tst.w	r3, #8
 801eae6:	d008      	beq.n	801eafa <lv_menu_set_page+0xee>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801eae8:	2101      	movs	r1, #1
 801eaea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801eaec:	f7e7 ff1a 	bl	8006924 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801eaf0:	2102      	movs	r1, #2
 801eaf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801eaf4:	f7e7 fedc 	bl	80068b0 <lv_obj_add_flag>
 801eaf8:	e7c9      	b.n	801ea8e <lv_menu_set_page+0x82>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801eafa:	2101      	movs	r1, #1
 801eafc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801eafe:	f7e7 fed7 	bl	80068b0 <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801eb02:	2102      	movs	r1, #2
 801eb04:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801eb06:	f7e7 ff0d 	bl	8006924 <lv_obj_clear_flag>
 801eb0a:	e7c0      	b.n	801ea8e <lv_menu_set_page+0x82>

0801eb0c <lv_menu_back_event_cb>:
{
 801eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb0e:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 801eb10:	f7e5 f91c 	bl	8003d4c <lv_event_get_code>
    if(code == LV_EVENT_CLICKED) {
 801eb14:	2807      	cmp	r0, #7
 801eb16:	d000      	beq.n	801eb1a <lv_menu_back_event_cb+0xe>
}
 801eb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * obj = lv_event_get_target(e);
 801eb1a:	4620      	mov	r0, r4
 801eb1c:	f7e5 f912 	bl	8003d44 <lv_event_get_target>
 801eb20:	4605      	mov	r5, r0
        lv_menu_t * menu = (lv_menu_t *)lv_event_get_user_data(e);
 801eb22:	4620      	mov	r0, r4
 801eb24:	f7e5 f918 	bl	8003d58 <lv_event_get_user_data>
 801eb28:	4604      	mov	r4, r0
        if(!(obj == menu->main_header_back_btn || obj == menu->sidebar_header_back_btn)) return;
 801eb2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801eb2c:	42ab      	cmp	r3, r5
 801eb2e:	d002      	beq.n	801eb36 <lv_menu_back_event_cb+0x2a>
 801eb30:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801eb32:	42ab      	cmp	r3, r5
 801eb34:	d1f0      	bne.n	801eb18 <lv_menu_back_event_cb+0xc>
        menu->prev_depth = menu->cur_depth; /* Save the previous value for user event handler */
 801eb36:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801eb3a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        if(lv_menu_back_btn_is_root((lv_obj_t *)menu, obj)) return;
 801eb3e:	4629      	mov	r1, r5
 801eb40:	4620      	mov	r0, r4
 801eb42:	f7ff ff49 	bl	801e9d8 <lv_menu_back_btn_is_root>
 801eb46:	2800      	cmp	r0, #0
 801eb48:	d1e6      	bne.n	801eb18 <lv_menu_back_event_cb+0xc>
        lv_ll_t * history_ll = &(menu->history_ll);
 801eb4a:	f104 0654 	add.w	r6, r4, #84	; 0x54
        lv_menu_history_t * act_hist = _lv_ll_get_head(history_ll);
 801eb4e:	4630      	mov	r0, r6
 801eb50:	f002 fd54 	bl	80215fc <_lv_ll_get_head>
 801eb54:	4605      	mov	r5, r0
        lv_menu_history_t * prev_hist = _lv_ll_get_next(history_ll, act_hist);
 801eb56:	4601      	mov	r1, r0
 801eb58:	4630      	mov	r0, r6
 801eb5a:	f002 fd57 	bl	802160c <_lv_ll_get_next>
        if(prev_hist != NULL) {
 801eb5e:	4607      	mov	r7, r0
 801eb60:	2800      	cmp	r0, #0
 801eb62:	d0d9      	beq.n	801eb18 <lv_menu_back_event_cb+0xc>
            _lv_ll_remove(history_ll, act_hist);
 801eb64:	4629      	mov	r1, r5
 801eb66:	4630      	mov	r0, r6
 801eb68:	f002 fd05 	bl	8021576 <_lv_ll_remove>
            lv_mem_free(act_hist);
 801eb6c:	4628      	mov	r0, r5
 801eb6e:	f002 fe99 	bl	80218a4 <lv_mem_free>
            menu->cur_depth--;
 801eb72:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801eb76:	3b01      	subs	r3, #1
 801eb78:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            _lv_ll_remove(history_ll, prev_hist);
 801eb7c:	4639      	mov	r1, r7
 801eb7e:	4630      	mov	r0, r6
 801eb80:	f002 fcf9 	bl	8021576 <_lv_ll_remove>
            menu->cur_depth--;
 801eb84:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801eb88:	3b01      	subs	r3, #1
 801eb8a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            lv_menu_set_page(&(menu->obj), prev_hist->page);
 801eb8e:	6839      	ldr	r1, [r7, #0]
 801eb90:	4620      	mov	r0, r4
 801eb92:	f7ff ff3b 	bl	801ea0c <lv_menu_set_page>
            lv_mem_free(prev_hist);
 801eb96:	4638      	mov	r0, r7
 801eb98:	f002 fe84 	bl	80218a4 <lv_mem_free>
 801eb9c:	e7bc      	b.n	801eb18 <lv_menu_back_event_cb+0xc>
	...

0801eba0 <lv_meter_event>:
    _lv_ll_clear(&meter->scale_ll);

}

static void lv_meter_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eba4:	b0db      	sub	sp, #364	; 0x16c
 801eba6:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801eba8:	48ae      	ldr	r0, [pc, #696]	; (801ee64 <lv_meter_event+0x2c4>)
 801ebaa:	f7e4 ffac 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801ebae:	2801      	cmp	r0, #1
 801ebb0:	d002      	beq.n	801ebb8 <lv_meter_event+0x18>
        nm_cord.y1 = scale_center.y - h;
        nm_cord.x2 = scale_center.x + w;
        nm_cord.y2 = scale_center.y + h;
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
    }
}
 801ebb2:	b05b      	add	sp, #364	; 0x16c
 801ebb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801ebb8:	4620      	mov	r0, r4
 801ebba:	f7e5 f8c7 	bl	8003d4c <lv_event_get_code>
 801ebbe:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	f7e5 f8bf 	bl	8003d44 <lv_event_get_target>
 801ebc6:	9008      	str	r0, [sp, #32]
    if(code == LV_EVENT_DRAW_MAIN) {
 801ebc8:	2d15      	cmp	r5, #21
 801ebca:	d1f2      	bne.n	801ebb2 <lv_meter_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801ebcc:	4620      	mov	r0, r4
 801ebce:	f7e5 f92d 	bl	8003e2c <lv_event_get_draw_ctx>
 801ebd2:	4606      	mov	r6, r0
 801ebd4:	900a      	str	r0, [sp, #40]	; 0x28
        lv_obj_get_content_coords(obj, &scale_area);
 801ebd6:	a915      	add	r1, sp, #84	; 0x54
 801ebd8:	9f08      	ldr	r7, [sp, #32]
 801ebda:	4638      	mov	r0, r7
 801ebdc:	f7e8 ffcb 	bl	8007b76 <lv_obj_get_content_coords>
static void draw_arcs(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 801ebe0:	ac40      	add	r4, sp, #256	; 0x100
 801ebe2:	4620      	mov	r0, r4
 801ebe4:	f7ee f89e 	bl	800cd24 <lv_draw_arc_dsc_init>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 801ebe8:	2251      	movs	r2, #81	; 0x51
 801ebea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ebee:	4638      	mov	r0, r7
 801ebf0:	f7eb fdfa 	bl	800a7e8 <lv_obj_get_style_prop>
    return (bool)v.num;
 801ebf4:	1e03      	subs	r3, r0, #0
 801ebf6:	bf18      	it	ne
 801ebf8:	2301      	movne	r3, #1
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 801ebfa:	f89d 210d 	ldrb.w	r2, [sp, #269]	; 0x10d
 801ebfe:	f363 0282 	bfi	r2, r3, #2, #1
 801ec02:	f88d 210d 	strb.w	r2, [sp, #269]	; 0x10d
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ec06:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801ec0a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801ec0e:	3301      	adds	r3, #1
 801ec10:	1a9b      	subs	r3, r3, r2

    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 801ec12:	b219      	sxth	r1, r3
 801ec14:	f3c3 38c0 	ubfx	r8, r3, #15, #1
 801ec18:	4488      	add	r8, r1
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_out;
 801ec1a:	f3c8 084f 	ubfx	r8, r8, #1, #16
 801ec1e:	4442      	add	r2, r8
 801ec20:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    scale_center.y = scale_area->y1 + r_out;
 801ec24:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801ec28:	4443      	add	r3, r8
 801ec2a:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801ec2e:	2260      	movs	r2, #96	; 0x60
 801ec30:	2100      	movs	r1, #0
 801ec32:	4638      	mov	r0, r7
 801ec34:	f7eb fdd8 	bl	800a7e8 <lv_obj_get_style_prop>
 801ec38:	4682      	mov	sl, r0

    lv_opa_t opa_main = lv_obj_get_style_opa(obj, LV_PART_MAIN);
    lv_meter_indicator_t * indic;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801ec3a:	4631      	mov	r1, r6
 801ec3c:	a848      	add	r0, sp, #288	; 0x120
 801ec3e:	f7e8 fd48 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.arc_dsc = &arc_dsc;
 801ec42:	9450      	str	r4, [sp, #320]	; 0x140
    part_draw_dsc.part = LV_PART_INDICATOR;
 801ec44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801ec48:	9355      	str	r3, [sp, #340]	; 0x154
    part_draw_dsc.class_p = MY_CLASS;
 801ec4a:	4b86      	ldr	r3, [pc, #536]	; (801ee64 <lv_meter_event+0x2c4>)
 801ec4c:	9349      	str	r3, [sp, #292]	; 0x124
    part_draw_dsc.type = LV_METER_DRAW_PART_ARC;
 801ec4e:	2300      	movs	r3, #0
 801ec50:	934a      	str	r3, [sp, #296]	; 0x128

    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801ec52:	f107 0b30 	add.w	fp, r7, #48	; 0x30
 801ec56:	4658      	mov	r0, fp
 801ec58:	f002 fcd4 	bl	8021604 <_lv_ll_get_tail>
 801ec5c:	4604      	mov	r4, r0
 801ec5e:	2800      	cmp	r0, #0
 801ec60:	d055      	beq.n	801ed0e <lv_meter_event+0x16e>
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
                                   scale->rotation + scale->angle_range);

        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
        part_draw_dsc.sub_part_ptr = indic;
        part_draw_dsc.p1 = &scale_center;
 801ec62:	ad38      	add	r5, sp, #224	; 0xe0

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801ec64:	f04f 091a 	mov.w	r9, #26
 801ec68:	f8cd a018 	str.w	sl, [sp, #24]
 801ec6c:	46b2      	mov	sl, r6
 801ec6e:	e04a      	b.n	801ed06 <lv_meter_event+0x166>
        arc_dsc.color = indic->type_data.arc.color;
 801ec70:	8b23      	ldrh	r3, [r4, #24]
 801ec72:	f8ad 3100 	strh.w	r3, [sp, #256]	; 0x100
        arc_dsc.width = indic->type_data.arc.width;
 801ec76:	8a23      	ldrh	r3, [r4, #16]
 801ec78:	f8ad 3102 	strh.w	r3, [sp, #258]	; 0x102
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801ec7c:	7962      	ldrb	r2, [r4, #5]
 801ec7e:	2afd      	cmp	r2, #253	; 0xfd
 801ec80:	bf9d      	ittte	ls
 801ec82:	f89d 3018 	ldrbls.w	r3, [sp, #24]
 801ec86:	4353      	mulls	r3, r2
 801ec88:	121b      	asrls	r3, r3, #8
 801ec8a:	9b06      	ldrhi	r3, [sp, #24]
 801ec8c:	f88d 310c 	strb.w	r3, [sp, #268]	; 0x10c
        lv_meter_scale_t * scale = indic->scale;
 801ec90:	6826      	ldr	r6, [r4, #0]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 801ec92:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 801ec96:	69b2      	ldr	r2, [r6, #24]
 801ec98:	6971      	ldr	r1, [r6, #20]
 801ec9a:	68a0      	ldr	r0, [r4, #8]
                                     scale->rotation + scale->angle_range);
 801ec9c:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 801eca0:	449c      	add	ip, r3
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 801eca2:	f8cd c000 	str.w	ip, [sp]
 801eca6:	f002 fdaf 	bl	8021808 <lv_map>
 801ecaa:	9005      	str	r0, [sp, #20]
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 801ecac:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 801ecb0:	69b2      	ldr	r2, [r6, #24]
 801ecb2:	6971      	ldr	r1, [r6, #20]
 801ecb4:	68e0      	ldr	r0, [r4, #12]
                                   scale->rotation + scale->angle_range);
 801ecb6:	8bf6      	ldrh	r6, [r6, #30]
 801ecb8:	441e      	add	r6, r3
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 801ecba:	9600      	str	r6, [sp, #0]
 801ecbc:	f002 fda4 	bl	8021808 <lv_map>
 801ecc0:	4606      	mov	r6, r0
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 801ecc2:	8b63      	ldrh	r3, [r4, #26]
 801ecc4:	4443      	add	r3, r8
 801ecc6:	f8ad 315c 	strh.w	r3, [sp, #348]	; 0x15c
        part_draw_dsc.sub_part_ptr = indic;
 801ecca:	9459      	str	r4, [sp, #356]	; 0x164
        part_draw_dsc.p1 = &scale_center;
 801eccc:	9551      	str	r5, [sp, #324]	; 0x144
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801ecce:	aa48      	add	r2, sp, #288	; 0x120
 801ecd0:	4649      	mov	r1, r9
 801ecd2:	4638      	mov	r0, r7
 801ecd4:	f7e5 f814 	bl	8003d00 <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &scale_center, part_draw_dsc.radius, start_angle, end_angle);
 801ecd8:	b2b6      	uxth	r6, r6
 801ecda:	9601      	str	r6, [sp, #4]
 801ecdc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ece0:	9300      	str	r3, [sp, #0]
 801ece2:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 801ece6:	462a      	mov	r2, r5
 801ece8:	a940      	add	r1, sp, #256	; 0x100
 801ecea:	4650      	mov	r0, sl
 801ecec:	f7ee f831 	bl	800cd52 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801ecf0:	aa48      	add	r2, sp, #288	; 0x120
 801ecf2:	211b      	movs	r1, #27
 801ecf4:	4638      	mov	r0, r7
 801ecf6:	f7e5 f803 	bl	8003d00 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801ecfa:	4621      	mov	r1, r4
 801ecfc:	4658      	mov	r0, fp
 801ecfe:	f002 fc89 	bl	8021614 <_lv_ll_get_prev>
 801ed02:	4604      	mov	r4, r0
 801ed04:	b118      	cbz	r0, 801ed0e <lv_meter_event+0x16e>
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 801ed06:	7923      	ldrb	r3, [r4, #4]
 801ed08:	2b03      	cmp	r3, #3
 801ed0a:	d0b1      	beq.n	801ec70 <lv_meter_event+0xd0>
 801ed0c:	e7f5      	b.n	801ecfa <lv_meter_event+0x15a>
 801ed0e:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ed12:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ed16:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801ed1a:	3301      	adds	r3, #1
 801ed1c:	1a5b      	subs	r3, r3, r1
static void draw_ticks_and_labels(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter    = (lv_meter_t *)obj;

    lv_point_t p_center;
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 801ed1e:	b218      	sxth	r0, r3
 801ed20:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 801ed24:	4404      	add	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ed26:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 801ed2a:	3301      	adds	r3, #1
 801ed2c:	1a9b      	subs	r3, r3, r2
 801ed2e:	b218      	sxth	r0, r3
 801ed30:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801ed34:	4403      	add	r3, r0
 801ed36:	1064      	asrs	r4, r4, #1
 801ed38:	105b      	asrs	r3, r3, #1
 801ed3a:	429c      	cmp	r4, r3
 801ed3c:	bfa8      	it	ge
 801ed3e:	461c      	movge	r4, r3
    p_center.x = scale_area->x1 + r_edge;
 801ed40:	b2a3      	uxth	r3, r4
 801ed42:	930c      	str	r3, [sp, #48]	; 0x30
 801ed44:	4419      	add	r1, r3
 801ed46:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
    p_center.y = scale_area->y1 + r_edge;
 801ed4a:	441a      	add	r2, r3
 801ed4c:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 801ed50:	ad1f      	add	r5, sp, #124	; 0x7c
 801ed52:	4628      	mov	r0, r5
 801ed54:	f7ee ffb5 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801ed58:	462a      	mov	r2, r5
 801ed5a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801ed5e:	9e08      	ldr	r6, [sp, #32]
 801ed60:	4630      	mov	r0, r6
 801ed62:	f7e8 fb9f 	bl	80074a4 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 801ed66:	f89d 3085 	ldrb.w	r3, [sp, #133]	; 0x85
 801ed6a:	f043 0310 	orr.w	r3, r3, #16
 801ed6e:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 801ed72:	a838      	add	r0, sp, #224	; 0xe0
 801ed74:	f7ee fc3c 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801ed78:	aa38      	add	r2, sp, #224	; 0xe0
 801ed7a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801ed7e:	4630      	mov	r0, r6
 801ed80:	f7e8 fae1 	bl	8007346 <lv_obj_init_draw_label_dsc>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801ed84:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ed86:	a848      	add	r0, sp, #288	; 0x120
 801ed88:	f7e8 fca3 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801ed8c:	4b35      	ldr	r3, [pc, #212]	; (801ee64 <lv_meter_event+0x2c4>)
 801ed8e:	9349      	str	r3, [sp, #292]	; 0x124
    part_draw_dsc.part = LV_PART_TICKS;
 801ed90:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 801ed94:	9355      	str	r3, [sp, #340]	; 0x154
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
 801ed96:	2303      	movs	r3, #3
 801ed98:	934a      	str	r3, [sp, #296]	; 0x128
    part_draw_dsc.line_dsc = &line_dsc;
 801ed9a:	954e      	str	r5, [sp, #312]	; 0x138

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801ed9c:	f106 0324 	add.w	r3, r6, #36	; 0x24
 801eda0:	930f      	str	r3, [sp, #60]	; 0x3c
 801eda2:	4618      	mov	r0, r3
 801eda4:	f002 fc2e 	bl	8021604 <_lv_ll_get_tail>
 801eda8:	2800      	cmp	r0, #0
 801edaa:	f000 81bd 	beq.w	801f128 <lv_meter_event+0x588>
            line_dsc.width = line_width;

            /*Draw a little bit longer lines to be sure the mask will clip them correctly
             *and to get a better precision*/
            lv_point_t p_outer;
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 801edae:	2c82      	cmp	r4, #130	; 0x82
 801edb0:	bfb8      	it	lt
 801edb2:	2482      	movlt	r4, #130	; 0x82
 801edb4:	940d      	str	r4, [sp, #52]	; 0x34
 801edb6:	46d9      	mov	r9, fp
 801edb8:	4683      	mov	fp, r0
 801edba:	e14d      	b.n	801f058 <lv_meter_event+0x4b8>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 801edbc:	f64f 7aff 	movw	sl, #65535	; 0xffff
        for(i = 0; i < scale->tick_cnt; i++) {
 801edc0:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801edc4:	2a00      	cmp	r2, #0
 801edc6:	f000 8134 	beq.w	801f032 <lv_meter_event+0x492>
 801edca:	2300      	movs	r3, #0
 801edcc:	9305      	str	r3, [sp, #20]
 801edce:	e108      	b.n	801efe2 <lv_meter_event+0x442>
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801edd0:	4621      	mov	r1, r4
 801edd2:	4648      	mov	r0, r9
 801edd4:	f002 fc1e 	bl	8021614 <_lv_ll_get_prev>
 801edd8:	4604      	mov	r4, r0
 801edda:	2800      	cmp	r0, #0
 801eddc:	d046      	beq.n	801ee6c <lv_meter_event+0x2cc>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 801edde:	7923      	ldrb	r3, [r4, #4]
 801ede0:	2b02      	cmp	r3, #2
 801ede2:	d1f5      	bne.n	801edd0 <lv_meter_event+0x230>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 801ede4:	68a1      	ldr	r1, [r4, #8]
 801ede6:	42b1      	cmp	r1, r6
 801ede8:	dcf2      	bgt.n	801edd0 <lv_meter_event+0x230>
 801edea:	68e2      	ldr	r2, [r4, #12]
 801edec:	42b2      	cmp	r2, r6
 801edee:	dbef      	blt.n	801edd0 <lv_meter_event+0x230>
                    line_width += indic->type_data.scale_lines.width_mod;
 801edf0:	8a23      	ldrh	r3, [r4, #16]
 801edf2:	441f      	add	r7, r3
 801edf4:	b23f      	sxth	r7, r7
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 801edf6:	8aa5      	ldrh	r5, [r4, #20]
 801edf8:	8a63      	ldrh	r3, [r4, #18]
 801edfa:	42ab      	cmp	r3, r5
 801edfc:	d0e8      	beq.n	801edd0 <lv_meter_event+0x230>
                        if(indic->type_data.scale_lines.local_grad) {
 801edfe:	7da3      	ldrb	r3, [r4, #22]
 801ee00:	f013 0f01 	tst.w	r3, #1
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 801ee04:	bf04      	itt	eq
 801ee06:	f8db 2018 	ldreq.w	r2, [fp, #24]
 801ee0a:	f8db 1014 	ldreq.w	r1, [fp, #20]
 801ee0e:	23ff      	movs	r3, #255	; 0xff
 801ee10:	9300      	str	r3, [sp, #0]
 801ee12:	2300      	movs	r3, #0
 801ee14:	4630      	mov	r0, r6
 801ee16:	f002 fcf7 	bl	8021808 <lv_map>
 801ee1a:	b2c2      	uxtb	r2, r0
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801ee1c:	8a65      	ldrh	r5, [r4, #18]
 801ee1e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801ee22:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
 801ee26:	f425 15f8 	bic.w	r5, r5, #2031616	; 0x1f0000
 801ee2a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ee2e:	8aa3      	ldrh	r3, [r4, #20]
 801ee30:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801ee34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801ee38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801ee3c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ee40:	1b5b      	subs	r3, r3, r5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801ee42:	3204      	adds	r2, #4
 801ee44:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ee46:	fb02 f303 	mul.w	r3, r2, r3
 801ee4a:	eb05 1553 	add.w	r5, r5, r3, lsr #5
 801ee4e:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
 801ee52:	f425 15f8 	bic.w	r5, r5, #2031616	; 0x1f0000
 801ee56:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
    ret.full = (uint16_t)((result >> 16) | result);
 801ee5a:	ea45 4515 	orr.w	r5, r5, r5, lsr #16
 801ee5e:	b2ad      	uxth	r5, r5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801ee60:	e7b6      	b.n	801edd0 <lv_meter_event+0x230>
 801ee62:	bf00      	nop
 801ee64:	0802d7cc 	.word	0x0802d7cc
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801ee68:	9d06      	ldr	r5, [sp, #24]
            lv_coord_t line_width = line_width_ori;
 801ee6a:	9f07      	ldr	r7, [sp, #28]
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 801ee6c:	f8bb 301e 	ldrh.w	r3, [fp, #30]
 801ee70:	fb08 f803 	mul.w	r8, r8, r3
 801ee74:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 801ee78:	ea4f 0448 	mov.w	r4, r8, lsl #1
 801ee7c:	f8bb 8002 	ldrh.w	r8, [fp, #2]
 801ee80:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801ee84:	fb94 f4f8 	sdiv	r4, r4, r8
 801ee88:	f9bb 3020 	ldrsh.w	r3, [fp, #32]
 801ee8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ee90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
            line_dsc.color = line_color;
 801ee94:	f8ad 507c 	strh.w	r5, [sp, #124]	; 0x7c
            line_dsc.width = line_width;
 801ee98:	f8ad 707e 	strh.w	r7, [sp, #126]	; 0x7e
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 801ee9c:	ad12      	add	r5, sp, #72	; 0x48
 801ee9e:	af11      	add	r7, sp, #68	; 0x44
 801eea0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801eea4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eea6:	4413      	add	r3, r2
 801eea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eeaa:	4413      	add	r3, r2
 801eeac:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            p_outer.y = p_center.y;
 801eeb0:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801eeb4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 801eeb8:	463b      	mov	r3, r7
 801eeba:	f44f 7280 	mov.w	r2, #256	; 0x100
 801eebe:	4621      	mov	r1, r4
 801eec0:	4628      	mov	r0, r5
 801eec2:	f001 ff8d 	bl	8020de0 <lv_point_transform>

            part_draw_dsc.p1 = &p_center;
 801eec6:	9751      	str	r7, [sp, #324]	; 0x144
            part_draw_dsc.p2 = &p_outer;
 801eec8:	9552      	str	r5, [sp, #328]	; 0x148
            part_draw_dsc.id = i;
 801eeca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801eece:	9356      	str	r3, [sp, #344]	; 0x158
            part_draw_dsc.label_dsc = &label_dsc;
 801eed0:	ab38      	add	r3, sp, #224	; 0xe0
 801eed2:	934d      	str	r3, [sp, #308]	; 0x134

            /*Draw the text*/
            if(major) {
 801eed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	f000 80a1 	beq.w	801f01e <lv_meter_event+0x47e>
                lv_draw_mask_remove_id(outer_mask_id);
 801eedc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801eede:	f7ef fd37 	bl	800e950 <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 801eee2:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
 801eee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eee8:	1ad3      	subs	r3, r2, r3
                lv_point_t p;
                p.x = p_center.x + r_text;
 801eeea:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801eeee:	4413      	add	r3, r2
 801eef0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                p.y = p_center.y;
 801eef4:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801eef8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 801eefc:	463b      	mov	r3, r7
 801eefe:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ef02:	4621      	mov	r1, r4
 801ef04:	a813      	add	r0, sp, #76	; 0x4c
 801ef06:	f001 ff6b 	bl	8020de0 <lv_point_transform>

                lv_draw_label_dsc_t label_dsc_tmp;
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 801ef0a:	ac40      	add	r4, sp, #256	; 0x100
 801ef0c:	2220      	movs	r2, #32
 801ef0e:	a938      	add	r1, sp, #224	; 0xe0
 801ef10:	4620      	mov	r0, r4
 801ef12:	f002 fd93 	bl	8021a3c <lv_memcpy>

                part_draw_dsc.label_dsc = &label_dsc_tmp;
 801ef16:	944d      	str	r4, [sp, #308]	; 0x134
                char buf[16];

                lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, value_of_line);
 801ef18:	ac22      	add	r4, sp, #136	; 0x88
 801ef1a:	4633      	mov	r3, r6
 801ef1c:	4aa5      	ldr	r2, [pc, #660]	; (801f1b4 <lv_meter_event+0x614>)
 801ef1e:	2110      	movs	r1, #16
 801ef20:	4620      	mov	r0, r4
 801ef22:	f003 fc73 	bl	802280c <lv_snprintf>
                part_draw_dsc.text = buf;
 801ef26:	9453      	str	r4, [sp, #332]	; 0x14c

                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801ef28:	aa48      	add	r2, sp, #288	; 0x120
 801ef2a:	211a      	movs	r1, #26
 801ef2c:	9808      	ldr	r0, [sp, #32]
 801ef2e:	f7e4 fee7 	bl	8003d00 <lv_event_send>

                lv_point_t label_size;
                lv_txt_get_size(&label_size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801ef32:	2400      	movs	r4, #0
 801ef34:	9402      	str	r4, [sp, #8]
 801ef36:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801ef3a:	9301      	str	r3, [sp, #4]
 801ef3c:	f9bd 30f2 	ldrsh.w	r3, [sp, #242]	; 0xf2
 801ef40:	9300      	str	r3, [sp, #0]
 801ef42:	f9bd 30f4 	ldrsh.w	r3, [sp, #244]	; 0xf4
 801ef46:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 801ef48:	9953      	ldr	r1, [sp, #332]	; 0x14c
 801ef4a:	a814      	add	r0, sp, #80	; 0x50
 801ef4c:	f004 ffc7 	bl	8023ede <lv_txt_get_size>
                                LV_COORD_MAX, LV_TEXT_FLAG_NONE);

                lv_area_t label_cord;
                label_cord.x1 = p.x - label_size.x / 2;
 801ef50:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 801ef54:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 801ef58:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801ef5c:	eba2 0263 	sub.w	r2, r2, r3, asr #1
 801ef60:	b292      	uxth	r2, r2
 801ef62:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                label_cord.y1 = p.y - label_size.y / 2;
 801ef66:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
 801ef6a:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
 801ef6e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801ef72:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 801ef76:	b29b      	uxth	r3, r3
 801ef78:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                label_cord.x2 = label_cord.x1 + label_size.x;
 801ef7c:	4402      	add	r2, r0
 801ef7e:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
                label_cord.y2 = label_cord.y1 + label_size.y;
 801ef82:	440b      	add	r3, r1
 801ef84:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a

                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 801ef88:	9400      	str	r4, [sp, #0]
 801ef8a:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 801ef8c:	aa1d      	add	r2, sp, #116	; 0x74
 801ef8e:	994d      	ldr	r1, [sp, #308]	; 0x134
 801ef90:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ef92:	f7ee fb61 	bl	800d658 <lv_draw_label>

                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 801ef96:	4621      	mov	r1, r4
 801ef98:	a832      	add	r0, sp, #200	; 0xc8
 801ef9a:	f7ef fc8f 	bl	800e8bc <lv_draw_mask_add>
 801ef9e:	900b      	str	r0, [sp, #44]	; 0x2c
                part_draw_dsc.label_dsc = NULL;
                part_draw_dsc.text = NULL;
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
            }

            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801efa0:	a82c      	add	r0, sp, #176	; 0xb0
 801efa2:	2100      	movs	r1, #0
 801efa4:	f7ef fc8a 	bl	800e8bc <lv_draw_mask_add>
 801efa8:	4604      	mov	r4, r0
            lv_draw_line(draw_ctx, &line_dsc, &p_outer, &p_center);
 801efaa:	ab11      	add	r3, sp, #68	; 0x44
 801efac:	aa12      	add	r2, sp, #72	; 0x48
 801efae:	a91f      	add	r1, sp, #124	; 0x7c
 801efb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801efb2:	f7ee fe9d 	bl	800dcf0 <lv_draw_line>
            lv_draw_mask_remove_id(inner_act_mask_id);
 801efb6:	4620      	mov	r0, r4
 801efb8:	f7ef fcca 	bl	800e950 <lv_draw_mask_remove_id>
            lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &part_draw_dsc);
 801efbc:	aa48      	add	r2, sp, #288	; 0x120
 801efbe:	2116      	movs	r1, #22
 801efc0:	9808      	ldr	r0, [sp, #32]
 801efc2:	f7e4 fe9d 	bl	8003d00 <lv_event_send>

            line_dsc.color = line_color_ori;
 801efc6:	9b06      	ldr	r3, [sp, #24]
 801efc8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            line_dsc.width = line_width_ori;
 801efcc:	9b07      	ldr	r3, [sp, #28]
 801efce:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(i = 0; i < scale->tick_cnt; i++) {
 801efd2:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801efd6:	9b05      	ldr	r3, [sp, #20]
 801efd8:	3301      	adds	r3, #1
 801efda:	9305      	str	r3, [sp, #20]
 801efdc:	b29b      	uxth	r3, r3
 801efde:	429a      	cmp	r2, r3
 801efe0:	d927      	bls.n	801f032 <lv_meter_event+0x492>
            minor_cnt++;
 801efe2:	f10a 0a01 	add.w	sl, sl, #1
            if(minor_cnt == scale->tick_major_nth) {
 801efe6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801efea:	459a      	cmp	sl, r3
 801efec:	f000 81f3 	beq.w	801f3d6 <lv_meter_event+0x836>
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801eff0:	f8bd 8014 	ldrh.w	r8, [sp, #20]
 801eff4:	f8db 3014 	ldr.w	r3, [fp, #20]
 801eff8:	f8db 1018 	ldr.w	r1, [fp, #24]
 801effc:	9100      	str	r1, [sp, #0]
 801effe:	3a01      	subs	r2, #1
 801f000:	2100      	movs	r1, #0
 801f002:	4640      	mov	r0, r8
 801f004:	f002 fc00 	bl	8021808 <lv_map>
 801f008:	4606      	mov	r6, r0
            part_draw_dsc.value = value_of_line;
 801f00a:	9058      	str	r0, [sp, #352]	; 0x160
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 801f00c:	f8bb 3000 	ldrh.w	r3, [fp]
 801f010:	9306      	str	r3, [sp, #24]
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 801f012:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 801f016:	9307      	str	r3, [sp, #28]
            bool major = false;
 801f018:	2300      	movs	r3, #0
 801f01a:	9309      	str	r3, [sp, #36]	; 0x24
 801f01c:	e1f3      	b.n	801f406 <lv_meter_event+0x866>
                part_draw_dsc.label_dsc = NULL;
 801f01e:	2300      	movs	r3, #0
 801f020:	934d      	str	r3, [sp, #308]	; 0x134
                part_draw_dsc.text = NULL;
 801f022:	9353      	str	r3, [sp, #332]	; 0x14c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f024:	aa48      	add	r2, sp, #288	; 0x120
 801f026:	211a      	movs	r1, #26
 801f028:	9808      	ldr	r0, [sp, #32]
 801f02a:	f7e4 fe69 	bl	8003d00 <lv_event_send>
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801f02e:	a826      	add	r0, sp, #152	; 0x98
 801f030:	e7b7      	b.n	801efa2 <lv_meter_event+0x402>

        }
        lv_draw_mask_free_param(&inner_minor_mask);
 801f032:	a826      	add	r0, sp, #152	; 0x98
 801f034:	f7ef fcb6 	bl	800e9a4 <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&inner_major_mask);
 801f038:	a82c      	add	r0, sp, #176	; 0xb0
 801f03a:	f7ef fcb3 	bl	800e9a4 <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&outer_mask);
 801f03e:	a832      	add	r0, sp, #200	; 0xc8
 801f040:	f7ef fcb0 	bl	800e9a4 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(outer_mask_id);
 801f044:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f046:	f7ef fc83 	bl	800e950 <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801f04a:	4659      	mov	r1, fp
 801f04c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f04e:	f002 fae1 	bl	8021614 <_lv_ll_get_prev>
 801f052:	4683      	mov	fp, r0
 801f054:	2800      	cmp	r0, #0
 801f056:	d066      	beq.n	801f126 <lv_meter_event+0x586>
        part_draw_dsc.sub_part_ptr = scale;
 801f058:	f8cd b164 	str.w	fp, [sp, #356]	; 0x164
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 801f05c:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801f060:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f062:	1af2      	subs	r2, r6, r3
 801f064:	b292      	uxth	r2, r2
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801f066:	f8bb 400c 	ldrh.w	r4, [fp, #12]
 801f06a:	1b31      	subs	r1, r6, r4
 801f06c:	b28d      	uxth	r5, r1
 801f06e:	b209      	sxth	r1, r1
 801f070:	910e      	str	r1, [sp, #56]	; 0x38
        area_inner_minor.x1 = p_center.x - r_in_minor;
 801f072:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 801f076:	1b9b      	subs	r3, r3, r6
 801f078:	b29b      	uxth	r3, r3
 801f07a:	18c8      	adds	r0, r1, r3
 801f07c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
        area_inner_minor.y1 = p_center.y - r_in_minor;
 801f080:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 801f084:	4403      	add	r3, r0
 801f086:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801f08a:	4411      	add	r1, r2
 801f08c:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
        area_inner_minor.y2 = p_center.y + r_in_minor;
 801f090:	4402      	add	r2, r0
 801f092:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801f096:	2301      	movs	r3, #1
 801f098:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f09c:	a917      	add	r1, sp, #92	; 0x5c
 801f09e:	a826      	add	r0, sp, #152	; 0x98
 801f0a0:	f7ef fe0e 	bl	800ecc0 <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 801f0a4:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801f0a8:	1ba3      	subs	r3, r4, r6
 801f0aa:	b29b      	uxth	r3, r3
 801f0ac:	18d1      	adds	r1, r2, r3
 801f0ae:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
        area_inner_major.y1 = p_center.y - r_in_major;
 801f0b2:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 801f0b6:	440b      	add	r3, r1
 801f0b8:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 801f0bc:	1e53      	subs	r3, r2, #1
 801f0be:	442b      	add	r3, r5
 801f0c0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 801f0c4:	3901      	subs	r1, #1
 801f0c6:	440d      	add	r5, r1
 801f0c8:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 801f0cc:	2301      	movs	r3, #1
 801f0ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f0d2:	a919      	add	r1, sp, #100	; 0x64
 801f0d4:	a82c      	add	r0, sp, #176	; 0xb0
 801f0d6:	f7ef fdf3 	bl	800ecc0 <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 801f0da:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801f0de:	1b93      	subs	r3, r2, r6
 801f0e0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        area_outer.y1 = p_center.y - r_out;
 801f0e4:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801f0e8:	1b99      	subs	r1, r3, r6
 801f0ea:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
        area_outer.x2 = p_center.x + r_out - 1;
 801f0ee:	3a01      	subs	r2, #1
 801f0f0:	4432      	add	r2, r6
 801f0f2:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        area_outer.y2 = p_center.y + r_out - 1;
 801f0f6:	3b01      	subs	r3, #1
 801f0f8:	4433      	add	r3, r6
 801f0fa:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 801f0fe:	2300      	movs	r3, #0
 801f100:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f104:	a91b      	add	r1, sp, #108	; 0x6c
 801f106:	a832      	add	r0, sp, #200	; 0xc8
 801f108:	f7ef fdda 	bl	800ecc0 <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 801f10c:	2100      	movs	r1, #0
 801f10e:	a832      	add	r0, sp, #200	; 0xc8
 801f110:	f7ef fbd4 	bl	800e8bc <lv_draw_mask_add>
 801f114:	900b      	str	r0, [sp, #44]	; 0x2c
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 801f116:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	f43f ae4e 	beq.w	801edbc <lv_meter_event+0x21c>
 801f120:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 801f124:	e64c      	b.n	801edc0 <lv_meter_event+0x220>
 801f126:	46cb      	mov	fp, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f128:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801f12c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801f130:	3301      	adds	r3, #1
 801f132:	1a9b      	subs	r3, r3, r2

static void draw_needles(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 801f134:	b219      	sxth	r1, r3
 801f136:	f3c3 36c0 	ubfx	r6, r3, #15, #1
 801f13a:	440e      	add	r6, r1
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_edge;
 801f13c:	f3c6 064f 	ubfx	r6, r6, #1, #16
 801f140:	4432      	add	r2, r6
 801f142:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    scale_center.y = scale_area->y1 + r_edge;
 801f146:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801f14a:	4433      	add	r3, r6
 801f14c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 801f150:	a838      	add	r0, sp, #224	; 0xe0
 801f152:	f7ee fdb6 	bl	800dcc2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc);
 801f156:	aa38      	add	r2, sp, #224	; 0xe0
 801f158:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f15c:	9d08      	ldr	r5, [sp, #32]
 801f15e:	4628      	mov	r0, r5
 801f160:	f7e8 f9a0 	bl	80074a4 <lv_obj_init_draw_line_dsc>

    lv_draw_img_dsc_t img_dsc;
    lv_draw_img_dsc_init(&img_dsc);
 801f164:	a840      	add	r0, sp, #256	; 0x100
 801f166:	f7ee f87a 	bl	800d25e <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_ITEMS, &img_dsc);
 801f16a:	aa40      	add	r2, sp, #256	; 0x100
 801f16c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f170:	4628      	mov	r0, r5
 801f172:	f7e8 f93f 	bl	80073f4 <lv_obj_init_draw_img_dsc>
 801f176:	2260      	movs	r2, #96	; 0x60
 801f178:	2100      	movs	r1, #0
 801f17a:	4628      	mov	r0, r5
 801f17c:	f7eb fb34 	bl	800a7e8 <lv_obj_get_style_prop>
 801f180:	9005      	str	r0, [sp, #20]
    return (lv_opa_t)v.num;
 801f182:	fa5f fa80 	uxtb.w	sl, r0
    lv_opa_t opa_main = lv_obj_get_style_opa(obj, LV_PART_MAIN);

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801f186:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f188:	a848      	add	r0, sp, #288	; 0x120
 801f18a:	f7e8 faa2 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801f18e:	4b0a      	ldr	r3, [pc, #40]	; (801f1b8 <lv_meter_event+0x618>)
 801f190:	9349      	str	r3, [sp, #292]	; 0x124
    part_draw_dsc.p1 = &scale_center;
 801f192:	ab26      	add	r3, sp, #152	; 0x98
 801f194:	9351      	str	r3, [sp, #324]	; 0x144

    lv_meter_indicator_t * indic;
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f196:	4658      	mov	r0, fp
 801f198:	f002 fa34 	bl	8021604 <_lv_ll_get_tail>
 801f19c:	4604      	mov	r4, r0
 801f19e:	2800      	cmp	r0, #0
 801f1a0:	f000 80d3 	beq.w	801f34a <lv_meter_event+0x7aa>
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
            if(angle > 3600) angle -= 3600;
            img_dsc.angle = angle;

            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 801f1a4:	f04f 0902 	mov.w	r9, #2
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 801f1a8:	f8df 8010 	ldr.w	r8, [pc, #16]	; 801f1bc <lv_meter_event+0x61c>
 801f1ac:	f8cd a018 	str.w	sl, [sp, #24]
 801f1b0:	46aa      	mov	sl, r5
 801f1b2:	e064      	b.n	801f27e <lv_meter_event+0x6de>
 801f1b4:	0802d10c 	.word	0x0802d10c
 801f1b8:	0802d7cc 	.word	0x0802d7cc
 801f1bc:	80010003 	.word	0x80010003
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801f1c0:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 801f1c4:	69aa      	ldr	r2, [r5, #24]
 801f1c6:	6969      	ldr	r1, [r5, #20]
 801f1c8:	68e0      	ldr	r0, [r4, #12]
 801f1ca:	8bef      	ldrh	r7, [r5, #30]
 801f1cc:	441f      	add	r7, r3
 801f1ce:	9700      	str	r7, [sp, #0]
 801f1d0:	f002 fb1a 	bl	8021808 <lv_map>
 801f1d4:	4607      	mov	r7, r0
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 801f1d6:	8a63      	ldrh	r3, [r4, #18]
 801f1d8:	4433      	add	r3, r6
 801f1da:	8bad      	ldrh	r5, [r5, #28]
 801f1dc:	441d      	add	r5, r3
 801f1de:	b22d      	sxth	r5, r5
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 801f1e0:	b200      	sxth	r0, r0
 801f1e2:	f002 fa35 	bl	8021650 <lv_trigo_sin>
 801f1e6:	fb05 f300 	mul.w	r3, r5, r0
 801f1ea:	fb88 1203 	smull	r1, r2, r8, r3
 801f1ee:	441a      	add	r2, r3
 801f1f0:	17db      	asrs	r3, r3, #31
 801f1f2:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
 801f1f6:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801f1fa:	4413      	add	r3, r2
 801f1fc:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 801f200:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801f204:	b200      	sxth	r0, r0
 801f206:	f002 fa23 	bl	8021650 <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 801f20a:	fb00 f505 	mul.w	r5, r0, r5
 801f20e:	fb88 2305 	smull	r2, r3, r8, r5
 801f212:	195a      	adds	r2, r3, r5
 801f214:	17eb      	asrs	r3, r5, #31
 801f216:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
 801f21a:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801f21e:	4413      	add	r3, r2
 801f220:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
            line_dsc.color = indic->type_data.needle_line.color;
 801f224:	8aa3      	ldrh	r3, [r4, #20]
 801f226:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            line_dsc.width = indic->type_data.needle_line.width;
 801f22a:	8a23      	ldrh	r3, [r4, #16]
 801f22c:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801f230:	7962      	ldrb	r2, [r4, #5]
 801f232:	2afd      	cmp	r2, #253	; 0xfd
 801f234:	bf9d      	ittte	ls
 801f236:	f89d 3014 	ldrbls.w	r3, [sp, #20]
 801f23a:	4353      	mulls	r3, r2
 801f23c:	0a1b      	lsrls	r3, r3, #8
 801f23e:	9b06      	ldrhi	r3, [sp, #24]
 801f240:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_LINE;
 801f244:	2301      	movs	r3, #1
 801f246:	9356      	str	r3, [sp, #344]	; 0x158
            part_draw_dsc.line_dsc = &line_dsc;
 801f248:	ad38      	add	r5, sp, #224	; 0xe0
 801f24a:	954e      	str	r5, [sp, #312]	; 0x138
            part_draw_dsc.p2 = &p_end;
 801f24c:	af32      	add	r7, sp, #200	; 0xc8
 801f24e:	9752      	str	r7, [sp, #328]	; 0x148
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f250:	aa48      	add	r2, sp, #288	; 0x120
 801f252:	211a      	movs	r1, #26
 801f254:	4650      	mov	r0, sl
 801f256:	f7e4 fd53 	bl	8003d00 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &scale_center, &p_end);
 801f25a:	463b      	mov	r3, r7
 801f25c:	aa26      	add	r2, sp, #152	; 0x98
 801f25e:	4629      	mov	r1, r5
 801f260:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f262:	f7ee fd45 	bl	800dcf0 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801f266:	aa48      	add	r2, sp, #288	; 0x120
 801f268:	211b      	movs	r1, #27
 801f26a:	4650      	mov	r0, sl
 801f26c:	f7e4 fd48 	bl	8003d00 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f270:	4621      	mov	r1, r4
 801f272:	4658      	mov	r0, fp
 801f274:	f002 f9ce 	bl	8021614 <_lv_ll_get_prev>
 801f278:	4604      	mov	r4, r0
 801f27a:	2800      	cmp	r0, #0
 801f27c:	d065      	beq.n	801f34a <lv_meter_event+0x7aa>
        lv_meter_scale_t * scale = indic->scale;
 801f27e:	6825      	ldr	r5, [r4, #0]
        part_draw_dsc.sub_part_ptr = indic;
 801f280:	9459      	str	r4, [sp, #356]	; 0x164
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 801f282:	7923      	ldrb	r3, [r4, #4]
 801f284:	2b01      	cmp	r3, #1
 801f286:	d09b      	beq.n	801f1c0 <lv_meter_event+0x620>
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d1f1      	bne.n	801f270 <lv_meter_event+0x6d0>
            if(indic->type_data.needle_img.src == NULL) continue;
 801f28c:	6923      	ldr	r3, [r4, #16]
 801f28e:	2b00      	cmp	r3, #0
 801f290:	d0ee      	beq.n	801f270 <lv_meter_event+0x6d0>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801f292:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 801f296:	69aa      	ldr	r2, [r5, #24]
 801f298:	6969      	ldr	r1, [r5, #20]
 801f29a:	68e0      	ldr	r0, [r4, #12]
 801f29c:	8bed      	ldrh	r5, [r5, #30]
 801f29e:	441d      	add	r5, r3
 801f2a0:	9500      	str	r5, [sp, #0]
 801f2a2:	f002 fab1 	bl	8021808 <lv_map>
 801f2a6:	4605      	mov	r5, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 801f2a8:	a92c      	add	r1, sp, #176	; 0xb0
 801f2aa:	6920      	ldr	r0, [r4, #16]
 801f2ac:	f7f0 fbcc 	bl	800fa48 <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 801f2b0:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 801f2b4:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801f2b8:	1bd2      	subs	r2, r2, r7
 801f2ba:	b292      	uxth	r2, r2
 801f2bc:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 801f2c0:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801f2c4:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 801f2c8:	1a1b      	subs	r3, r3, r0
 801f2ca:	b29b      	uxth	r3, r3
 801f2cc:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            a.x2 = a.x1 + info.w - 1;
 801f2d0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f2d2:	f3c1 218a 	ubfx	r1, r1, #10, #11
 801f2d6:	3901      	subs	r1, #1
 801f2d8:	440a      	add	r2, r1
 801f2da:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
            a.y2 = a.y1 + info.h - 1;
 801f2de:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 801f2e2:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801f2e6:	3a01      	subs	r2, #1
 801f2e8:	4413      	add	r3, r2
 801f2ea:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801f2ee:	7962      	ldrb	r2, [r4, #5]
 801f2f0:	2afd      	cmp	r2, #253	; 0xfd
 801f2f2:	bf9d      	ittte	ls
 801f2f4:	f89d 3014 	ldrbls.w	r3, [sp, #20]
 801f2f8:	4353      	mulls	r3, r2
 801f2fa:	0a1b      	lsrls	r3, r3, #8
 801f2fc:	9b06      	ldrhi	r3, [sp, #24]
 801f2fe:	f88d 310b 	strb.w	r3, [sp, #267]	; 0x10b
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 801f302:	f8ad 7104 	strh.w	r7, [sp, #260]	; 0x104
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 801f306:	f8ad 0106 	strh.w	r0, [sp, #262]	; 0x106
            angle = angle * 10;
 801f30a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801f30e:	006b      	lsls	r3, r5, #1
 801f310:	461a      	mov	r2, r3
            if(angle > 3600) angle -= 3600;
 801f312:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801f316:	bfc8      	it	gt
 801f318:	f5a3 6261 	subgt.w	r2, r3, #3600	; 0xe10
            img_dsc.angle = angle;
 801f31c:	f8ad 2100 	strh.w	r2, [sp, #256]	; 0x100
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 801f320:	f8cd 9158 	str.w	r9, [sp, #344]	; 0x158
            part_draw_dsc.img_dsc = &img_dsc;
 801f324:	ad40      	add	r5, sp, #256	; 0x100
 801f326:	954f      	str	r5, [sp, #316]	; 0x13c

            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f328:	aa48      	add	r2, sp, #288	; 0x120
 801f32a:	211a      	movs	r1, #26
 801f32c:	4650      	mov	r0, sl
 801f32e:	f7e4 fce7 	bl	8003d00 <lv_event_send>
            lv_draw_img(draw_ctx, &img_dsc, &a, indic->type_data.needle_img.src);
 801f332:	6923      	ldr	r3, [r4, #16]
 801f334:	aa32      	add	r2, sp, #200	; 0xc8
 801f336:	4629      	mov	r1, r5
 801f338:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f33a:	f7ed fff7 	bl	800d32c <lv_draw_img>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801f33e:	aa48      	add	r2, sp, #288	; 0x120
 801f340:	211b      	movs	r1, #27
 801f342:	4650      	mov	r0, sl
 801f344:	f7e4 fcdc 	bl	8003d00 <lv_event_send>
 801f348:	e792      	b.n	801f270 <lv_meter_event+0x6d0>
 801f34a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801f34e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801f352:	3301      	adds	r3, #1
 801f354:	1a9b      	subs	r3, r3, r2
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 801f356:	b219      	sxth	r1, r3
 801f358:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801f35c:	440b      	add	r3, r1
        scale_center.x = scale_area.x1 + r_edge;
 801f35e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801f362:	441a      	add	r2, r3
 801f364:	b295      	uxth	r5, r2
        scale_center.y = scale_area.y1 + r_edge;
 801f366:	f8bd 4056 	ldrh.w	r4, [sp, #86]	; 0x56
 801f36a:	4423      	add	r3, r4
 801f36c:	b29c      	uxth	r4, r3
        lv_draw_rect_dsc_init(&mid_dsc);
 801f36e:	a848      	add	r0, sp, #288	; 0x120
 801f370:	f7ef fefa 	bl	800f168 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 801f374:	aa48      	add	r2, sp, #288	; 0x120
 801f376:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801f37a:	9f08      	ldr	r7, [sp, #32]
 801f37c:	4638      	mov	r0, r7
 801f37e:	f7e7 fe6d 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801f382:	2201      	movs	r2, #1
 801f384:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801f388:	4638      	mov	r0, r7
 801f38a:	f7eb fa2d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801f38e:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801f390:	2204      	movs	r2, #4
 801f392:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801f396:	4638      	mov	r0, r7
 801f398:	f7eb fa26 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801f39c:	b201      	sxth	r1, r0
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801f39e:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
        nm_cord.x1 = scale_center.x - w;
 801f3a2:	f3c6 024f 	ubfx	r2, r6, #1, #16
 801f3a6:	1aab      	subs	r3, r5, r2
 801f3a8:	f8ad 3100 	strh.w	r3, [sp, #256]	; 0x100
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801f3ac:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801f3b0:	440b      	add	r3, r1
        nm_cord.y1 = scale_center.y - h;
 801f3b2:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801f3b6:	1ae1      	subs	r1, r4, r3
 801f3b8:	f8ad 1102 	strh.w	r1, [sp, #258]	; 0x102
        nm_cord.x2 = scale_center.x + w;
 801f3bc:	442a      	add	r2, r5
 801f3be:	f8ad 2104 	strh.w	r2, [sp, #260]	; 0x104
        nm_cord.y2 = scale_center.y + h;
 801f3c2:	4423      	add	r3, r4
 801f3c4:	f8ad 3106 	strh.w	r3, [sp, #262]	; 0x106
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 801f3c8:	aa40      	add	r2, sp, #256	; 0x100
 801f3ca:	a948      	add	r1, sp, #288	; 0x120
 801f3cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f3ce:	f7ef ff27 	bl	800f220 <lv_draw_rect>
 801f3d2:	f7ff bbee 	b.w	801ebb2 <lv_meter_event+0x12>
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801f3d6:	f8bd 8014 	ldrh.w	r8, [sp, #20]
 801f3da:	f8db 3014 	ldr.w	r3, [fp, #20]
 801f3de:	f8db 1018 	ldr.w	r1, [fp, #24]
 801f3e2:	9100      	str	r1, [sp, #0]
 801f3e4:	3a01      	subs	r2, #1
 801f3e6:	2100      	movs	r1, #0
 801f3e8:	4640      	mov	r0, r8
 801f3ea:	f002 fa0d 	bl	8021808 <lv_map>
 801f3ee:	4606      	mov	r6, r0
            part_draw_dsc.value = value_of_line;
 801f3f0:	9058      	str	r0, [sp, #352]	; 0x160
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 801f3f2:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801f3f6:	9306      	str	r3, [sp, #24]
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 801f3f8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 801f3fc:	9307      	str	r3, [sp, #28]
                minor_cnt = 0;
 801f3fe:	f04f 0a00 	mov.w	sl, #0
                major = true;
 801f402:	2301      	movs	r3, #1
 801f404:	9309      	str	r3, [sp, #36]	; 0x24
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f406:	4648      	mov	r0, r9
 801f408:	f002 f8fc 	bl	8021604 <_lv_ll_get_tail>
 801f40c:	4604      	mov	r4, r0
 801f40e:	2800      	cmp	r0, #0
 801f410:	f43f ad2a 	beq.w	801ee68 <lv_meter_event+0x2c8>
 801f414:	9d06      	ldr	r5, [sp, #24]
            lv_coord_t line_width = line_width_ori;
 801f416:	9f07      	ldr	r7, [sp, #28]
 801f418:	e4e1      	b.n	801edde <lv_meter_event+0x23e>
 801f41a:	bf00      	nop

0801f41c <lv_meter_destructor>:
{
 801f41c:	b510      	push	{r4, lr}
 801f41e:	460c      	mov	r4, r1
    _lv_ll_clear(&meter->indicator_ll);
 801f420:	f101 0030 	add.w	r0, r1, #48	; 0x30
 801f424:	f002 f8d6 	bl	80215d4 <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 801f428:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801f42c:	f002 f8d2 	bl	80215d4 <_lv_ll_clear>
}
 801f430:	bd10      	pop	{r4, pc}

0801f432 <lv_meter_constructor>:
{
 801f432:	b510      	push	{r4, lr}
 801f434:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 801f436:	2124      	movs	r1, #36	; 0x24
 801f438:	1860      	adds	r0, r4, r1
 801f43a:	f002 f856 	bl	80214ea <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 801f43e:	211c      	movs	r1, #28
 801f440:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801f444:	f002 f851 	bl	80214ea <_lv_ll_init>
}
 801f448:	bd10      	pop	{r4, pc}
	...

0801f44c <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 801f44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f450:	b08a      	sub	sp, #40	; 0x28
 801f452:	4604      	mov	r4, r0
    lv_spinbox_t * spinbox = (lv_spinbox_t *)obj;

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
 801f454:	2112      	movs	r1, #18
 801f456:	a805      	add	r0, sp, #20
 801f458:	f002 fc86 	bl	8021d68 <lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 801f45c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801f45e:	2b00      	cmp	r3, #0
 801f460:	db5d      	blt.n	801f51e <lv_spinbox_updatevalue+0xd2>
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
        buf_p++;
    }
    else {
        /*Cursor need shift to left*/
        cur_shift_left++;
 801f462:	2501      	movs	r5, #1
    char * buf_p = buf;
 801f464:	af05      	add	r7, sp, #20
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%" LV_PRId32, LV_ABS(spinbox->value));
 801f466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f468:	2b00      	cmp	r3, #0
 801f46a:	bfb8      	it	lt
 801f46c:	425b      	neglt	r3, r3
 801f46e:	4a41      	ldr	r2, [pc, #260]	; (801f574 <lv_spinbox_updatevalue+0x128>)
 801f470:	210e      	movs	r1, #14
 801f472:	a801      	add	r0, sp, #4
 801f474:	f003 f9ca 	bl	802280c <lv_snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 801f478:	f894 8074 	ldrb.w	r8, [r4, #116]	; 0x74
 801f47c:	f008 080f 	and.w	r8, r8, #15
 801f480:	a801      	add	r0, sp, #4
 801f482:	f7e0 fed9 	bl	8000238 <strlen>
 801f486:	eba8 0600 	sub.w	r6, r8, r0
    if(lz_cnt > 0) {
 801f48a:	2e00      	cmp	r6, #0
 801f48c:	dd13      	ble.n	801f4b6 <lv_spinbox_updatevalue+0x6a>
 801f48e:	1c42      	adds	r2, r0, #1
 801f490:	ab01      	add	r3, sp, #4
 801f492:	441a      	add	r2, r3
 801f494:	eb03 0008 	add.w	r0, r3, r8
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
            digits[i + lz_cnt] = digits[i];
 801f498:	4611      	mov	r1, r2
 801f49a:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 801f49e:	f800 3901 	strb.w	r3, [r0], #-1
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 801f4a2:	ab01      	add	r3, sp, #4
 801f4a4:	1ac9      	subs	r1, r1, r3
 801f4a6:	2902      	cmp	r1, #2
 801f4a8:	d5f6      	bpl.n	801f498 <lv_spinbox_updatevalue+0x4c>
 801f4aa:	18f2      	adds	r2, r6, r3
        }
        for(i = 0; i < lz_cnt; i++) {
            digits[i] = '0';
 801f4ac:	2130      	movs	r1, #48	; 0x30
 801f4ae:	f803 1b01 	strb.w	r1, [r3], #1
        for(i = 0; i < lz_cnt; i++) {
 801f4b2:	4293      	cmp	r3, r2
 801f4b4:	d1fb      	bne.n	801f4ae <lv_spinbox_updatevalue+0x62>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801f4b6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801f4ba:	f013 00f0 	ands.w	r0, r3, #240	; 0xf0
 801f4be:	d053      	beq.n	801f568 <lv_spinbox_updatevalue+0x11c>

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801f4c0:	091e      	lsrs	r6, r3, #4
 801f4c2:	d037      	beq.n	801f534 <lv_spinbox_updatevalue+0xe8>
 801f4c4:	a901      	add	r1, sp, #4
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f4cc:	b122      	cbz	r2, 801f4d8 <lv_spinbox_updatevalue+0x8c>
        (*buf_p) = digits[i];
 801f4ce:	f807 2b01 	strb.w	r2, [r7], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801f4d2:	3301      	adds	r3, #1
 801f4d4:	42b3      	cmp	r3, r6
 801f4d6:	dbf7      	blt.n	801f4c8 <lv_spinbox_updatevalue+0x7c>
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 801f4d8:	bb68      	cbnz	r0, 801f536 <lv_spinbox_updatevalue+0xea>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 801f4da:	a905      	add	r1, sp, #20
 801f4dc:	4620      	mov	r0, r4
 801f4de:	f00c fc9b 	bl	802be18 <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
 801f4e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 801f4e4:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
 801f4e8:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 801f4ec:	2b09      	cmp	r3, #9
 801f4ee:	dd0a      	ble.n	801f506 <lv_spinbox_updatevalue+0xba>
        step /= 10;
 801f4f0:	4f21      	ldr	r7, [pc, #132]	; (801f578 <lv_spinbox_updatevalue+0x12c>)
 801f4f2:	461a      	mov	r2, r3
 801f4f4:	fb87 c003 	smull	ip, r0, r7, r3
 801f4f8:	17db      	asrs	r3, r3, #31
 801f4fa:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
        cur_pos--;
 801f4fe:	3901      	subs	r1, #1
 801f500:	b2c9      	uxtb	r1, r1
    while(step >= 10) {
 801f502:	2a63      	cmp	r2, #99	; 0x63
 801f504:	dcf5      	bgt.n	801f4f2 <lv_spinbox_updatevalue+0xa6>
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 801f506:	42b1      	cmp	r1, r6
 801f508:	bfc4      	itt	gt
 801f50a:	3101      	addgt	r1, #1
 801f50c:	b2c9      	uxtbgt	r1, r1

    cur_pos -= cur_shift_left;
 801f50e:	1b49      	subs	r1, r1, r5

    lv_textarea_set_cursor_pos(obj, cur_pos);
 801f510:	b2c9      	uxtb	r1, r1
 801f512:	4620      	mov	r0, r4
 801f514:	f00c f95a 	bl	802b7cc <lv_textarea_set_cursor_pos>
}
 801f518:	b00a      	add	sp, #40	; 0x28
 801f51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 801f51e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f520:	2b00      	cmp	r3, #0
 801f522:	bfac      	ite	ge
 801f524:	232b      	movge	r3, #43	; 0x2b
 801f526:	232d      	movlt	r3, #45	; 0x2d
 801f528:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t cur_shift_left = 0;
 801f52c:	2500      	movs	r5, #0
        buf_p++;
 801f52e:	f10d 0715 	add.w	r7, sp, #21
 801f532:	e798      	b.n	801f466 <lv_spinbox_updatevalue+0x1a>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801f534:	2300      	movs	r3, #0
        (*buf_p) = '.';
 801f536:	463a      	mov	r2, r7
 801f538:	212e      	movs	r1, #46	; 0x2e
 801f53a:	f802 1b01 	strb.w	r1, [r2], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 801f53e:	4598      	cmp	r8, r3
 801f540:	ddcb      	ble.n	801f4da <lv_spinbox_updatevalue+0x8e>
 801f542:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801f546:	eb0d 0001 	add.w	r0, sp, r1
 801f54a:	3825      	subs	r0, #37	; 0x25
 801f54c:	f108 0801 	add.w	r8, r8, #1
 801f550:	eba8 0303 	sub.w	r3, r8, r3
 801f554:	441f      	add	r7, r3
 801f556:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 801f55a:	2900      	cmp	r1, #0
 801f55c:	d0bd      	beq.n	801f4da <lv_spinbox_updatevalue+0x8e>
            (*buf_p) = digits[i];
 801f55e:	f802 1b01 	strb.w	r1, [r2], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 801f562:	4297      	cmp	r7, r2
 801f564:	d1f7      	bne.n	801f556 <lv_spinbox_updatevalue+0x10a>
 801f566:	e7b8      	b.n	801f4da <lv_spinbox_updatevalue+0x8e>
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801f568:	4646      	mov	r6, r8
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801f56a:	f1b8 0f00 	cmp.w	r8, #0
 801f56e:	d0b4      	beq.n	801f4da <lv_spinbox_updatevalue+0x8e>
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801f570:	4646      	mov	r6, r8
 801f572:	e7a7      	b.n	801f4c4 <lv_spinbox_updatevalue+0x78>
 801f574:	0802d10c 	.word	0x0802d10c
 801f578:	66666667 	.word	0x66666667

0801f57c <lv_spinbox_constructor>:
{
 801f57c:	b538      	push	{r3, r4, r5, lr}
 801f57e:	460c      	mov	r4, r1
    spinbox->value              = 0;
 801f580:	2300      	movs	r3, #0
 801f582:	664b      	str	r3, [r1, #100]	; 0x64
    spinbox->digit_count        = 5;
 801f584:	2305      	movs	r3, #5
 801f586:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    spinbox->step               = 1;
 801f58a:	2501      	movs	r5, #1
 801f58c:	670d      	str	r5, [r1, #112]	; 0x70
    spinbox->range_max          = 99999;
 801f58e:	4b0c      	ldr	r3, [pc, #48]	; (801f5c0 <lv_spinbox_constructor+0x44>)
 801f590:	668b      	str	r3, [r1, #104]	; 0x68
    spinbox->range_min          = -99999;
 801f592:	4b0c      	ldr	r3, [pc, #48]	; (801f5c4 <lv_spinbox_constructor+0x48>)
 801f594:	66cb      	str	r3, [r1, #108]	; 0x6c
    spinbox->rollover           = false;
 801f596:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    spinbox->digit_step_dir     = LV_DIR_RIGHT;
 801f59a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801f59e:	2202      	movs	r2, #2
 801f5a0:	f362 0342 	bfi	r3, r2, #1, #2
 801f5a4:	f881 3075 	strb.w	r3, [r1, #117]	; 0x75
    lv_textarea_set_one_line(obj, true);
 801f5a8:	4629      	mov	r1, r5
 801f5aa:	4620      	mov	r0, r4
 801f5ac:	f00c f9d9 	bl	802b962 <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 801f5b0:	4629      	mov	r1, r5
 801f5b2:	4620      	mov	r0, r4
 801f5b4:	f00c f9ce 	bl	802b954 <lv_textarea_set_cursor_click_pos>
    lv_spinbox_updatevalue(obj);
 801f5b8:	4620      	mov	r0, r4
 801f5ba:	f7ff ff47 	bl	801f44c <lv_spinbox_updatevalue>
}
 801f5be:	bd38      	pop	{r3, r4, r5, pc}
 801f5c0:	0001869f 	.word	0x0001869f
 801f5c4:	fffe7961 	.word	0xfffe7961

0801f5c8 <lv_spinbox_step_next>:
{
 801f5c8:	b508      	push	{r3, lr}
    int32_t new_step = spinbox->step / 10;
 801f5ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
    if((new_step) > 0)
 801f5cc:	2b09      	cmp	r3, #9
 801f5ce:	dd09      	ble.n	801f5e4 <lv_spinbox_step_next+0x1c>
    int32_t new_step = spinbox->step / 10;
 801f5d0:	4a05      	ldr	r2, [pc, #20]	; (801f5e8 <lv_spinbox_step_next+0x20>)
 801f5d2:	fb82 1203 	smull	r1, r2, r2, r3
 801f5d6:	17db      	asrs	r3, r3, #31
 801f5d8:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 801f5dc:	6703      	str	r3, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 801f5de:	f7ff ff35 	bl	801f44c <lv_spinbox_updatevalue>
}
 801f5e2:	bd08      	pop	{r3, pc}
        spinbox->step = 1;
 801f5e4:	2301      	movs	r3, #1
 801f5e6:	e7f9      	b.n	801f5dc <lv_spinbox_step_next+0x14>
 801f5e8:	66666667 	.word	0x66666667

0801f5ec <lv_spinbox_step_prev>:
{
 801f5ec:	b510      	push	{r4, lr}
    int32_t new_step = spinbox->step * 10;
 801f5ee:	6f02      	ldr	r2, [r0, #112]	; 0x70
 801f5f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 801f5f4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	bfb8      	it	lt
 801f5fa:	425b      	neglt	r3, r3
 801f5fc:	6e81      	ldr	r1, [r0, #104]	; 0x68
 801f5fe:	428b      	cmp	r3, r1
 801f600:	bfb8      	it	lt
 801f602:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 801f604:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801f608:	bfa4      	itt	ge
 801f60a:	0054      	lslge	r4, r2, #1
 801f60c:	6704      	strge	r4, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 801f60e:	f7ff ff1d 	bl	801f44c <lv_spinbox_updatevalue>
}
 801f612:	bd10      	pop	{r4, pc}

0801f614 <lv_spinbox_increment>:
{
 801f614:	b508      	push	{r3, lr}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 801f616:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801f618:	6f01      	ldr	r1, [r0, #112]	; 0x70
 801f61a:	eb03 0c01 	add.w	ip, r3, r1
 801f61e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 801f620:	4594      	cmp	ip, r2
 801f622:	dc0c      	bgt.n	801f63e <lv_spinbox_increment+0x2a>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 801f624:	f1bc 0f00 	cmp.w	ip, #0
 801f628:	dd03      	ble.n	801f632 <lv_spinbox_increment+0x1e>
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	bfbc      	itt	lt
 801f62e:	425b      	neglt	r3, r3
 801f630:	6643      	strlt	r3, [r0, #100]	; 0x64
        spinbox->value += spinbox->step;
 801f632:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801f634:	440b      	add	r3, r1
 801f636:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 801f638:	f7ff ff08 	bl	801f44c <lv_spinbox_updatevalue>
}
 801f63c:	bd08      	pop	{r3, pc}
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 801f63e:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 801f642:	f011 0f01 	tst.w	r1, #1
 801f646:	d001      	beq.n	801f64c <lv_spinbox_increment+0x38>
 801f648:	4293      	cmp	r3, r2
 801f64a:	d001      	beq.n	801f650 <lv_spinbox_increment+0x3c>
            spinbox->value = spinbox->range_max;
 801f64c:	6642      	str	r2, [r0, #100]	; 0x64
 801f64e:	e7f3      	b.n	801f638 <lv_spinbox_increment+0x24>
            spinbox->value = spinbox->range_min;
 801f650:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801f652:	6643      	str	r3, [r0, #100]	; 0x64
 801f654:	e7f0      	b.n	801f638 <lv_spinbox_increment+0x24>

0801f656 <lv_spinbox_decrement>:
{
 801f656:	b508      	push	{r3, lr}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 801f658:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801f65a:	6f01      	ldr	r1, [r0, #112]	; 0x70
 801f65c:	eba3 0c01 	sub.w	ip, r3, r1
 801f660:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801f662:	4594      	cmp	ip, r2
 801f664:	db0d      	blt.n	801f682 <lv_spinbox_decrement+0x2c>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 801f666:	f1bc 0f00 	cmp.w	ip, #0
 801f66a:	db05      	blt.n	801f678 <lv_spinbox_decrement+0x22>
        spinbox->value -= spinbox->step;
 801f66c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801f66e:	1a5b      	subs	r3, r3, r1
 801f670:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 801f672:	f7ff feeb 	bl	801f44c <lv_spinbox_updatevalue>
}
 801f676:	bd08      	pop	{r3, pc}
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 801f678:	2b00      	cmp	r3, #0
 801f67a:	bfc4      	itt	gt
 801f67c:	425b      	neggt	r3, r3
 801f67e:	6643      	strgt	r3, [r0, #100]	; 0x64
 801f680:	e7f4      	b.n	801f66c <lv_spinbox_decrement+0x16>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 801f682:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 801f686:	f011 0f01 	tst.w	r1, #1
 801f68a:	d001      	beq.n	801f690 <lv_spinbox_decrement+0x3a>
 801f68c:	4293      	cmp	r3, r2
 801f68e:	d001      	beq.n	801f694 <lv_spinbox_decrement+0x3e>
            spinbox->value = spinbox->range_min;
 801f690:	6642      	str	r2, [r0, #100]	; 0x64
 801f692:	e7ee      	b.n	801f672 <lv_spinbox_decrement+0x1c>
            spinbox->value = spinbox->range_max;
 801f694:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801f696:	6643      	str	r3, [r0, #100]	; 0x64
 801f698:	e7eb      	b.n	801f672 <lv_spinbox_decrement+0x1c>
	...

0801f69c <lv_spinbox_event>:
{
 801f69c:	b570      	push	{r4, r5, r6, lr}
 801f69e:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801f6a0:	4866      	ldr	r0, [pc, #408]	; (801f83c <lv_spinbox_event+0x1a0>)
 801f6a2:	f7e4 fa30 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801f6a6:	2801      	cmp	r0, #1
 801f6a8:	d000      	beq.n	801f6ac <lv_spinbox_event+0x10>
}
 801f6aa:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801f6ac:	4620      	mov	r0, r4
 801f6ae:	f7e4 fb4d 	bl	8003d4c <lv_event_get_code>
 801f6b2:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f7e4 fb45 	bl	8003d44 <lv_event_get_target>
 801f6ba:	4606      	mov	r6, r0
    if(code == LV_EVENT_RELEASED) {
 801f6bc:	2d08      	cmp	r5, #8
 801f6be:	d01a      	beq.n	801f6f6 <lv_spinbox_event+0x5a>
    else if(code == LV_EVENT_KEY) {
 801f6c0:	2d0d      	cmp	r5, #13
 801f6c2:	d1f2      	bne.n	801f6aa <lv_spinbox_event+0xe>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801f6c4:	f7e4 fec2 	bl	800444c <lv_indev_get_act>
 801f6c8:	f7e4 fec6 	bl	8004458 <lv_indev_get_type>
 801f6cc:	4605      	mov	r5, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 801f6ce:	4620      	mov	r0, r4
 801f6d0:	f7e4 fb40 	bl	8003d54 <lv_event_get_param>
 801f6d4:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 801f6d6:	2913      	cmp	r1, #19
 801f6d8:	f000 8093 	beq.w	801f802 <lv_spinbox_event+0x166>
        else if(c == LV_KEY_LEFT) {
 801f6dc:	2914      	cmp	r1, #20
 801f6de:	f000 809a 	beq.w	801f816 <lv_spinbox_event+0x17a>
        else if(c == LV_KEY_UP) {
 801f6e2:	2911      	cmp	r1, #17
 801f6e4:	f000 80a1 	beq.w	801f82a <lv_spinbox_event+0x18e>
        else if(c == LV_KEY_DOWN) {
 801f6e8:	2912      	cmp	r1, #18
 801f6ea:	f000 80a2 	beq.w	801f832 <lv_spinbox_event+0x196>
            lv_textarea_add_char(obj, c);
 801f6ee:	4630      	mov	r0, r6
 801f6f0:	f00c fab4 	bl	802bc5c <lv_textarea_add_char>
 801f6f4:	e7d9      	b.n	801f6aa <lv_spinbox_event+0xe>
        lv_indev_t * indev = lv_indev_get_act();
 801f6f6:	f7e4 fea9 	bl	800444c <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801f6fa:	f7e4 fead 	bl	8004458 <lv_indev_get_type>
 801f6fe:	2804      	cmp	r0, #4
 801f700:	d015      	beq.n	801f72e <lv_spinbox_event+0x92>
            const char * txt = lv_textarea_get_text(obj);
 801f702:	4630      	mov	r0, r6
 801f704:	f00c f964 	bl	802b9d0 <lv_textarea_get_text>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 801f708:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801f70a:	5d03      	ldrb	r3, [r0, r4]
 801f70c:	2b2e      	cmp	r3, #46	; 0x2e
 801f70e:	d047      	beq.n	801f7a0 <lv_spinbox_event+0x104>
            size_t txt_len = strlen(txt);
 801f710:	f7e0 fd92 	bl	8000238 <strlen>
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 801f714:	4284      	cmp	r4, r0
 801f716:	d06a      	beq.n	801f7ee <lv_spinbox_event+0x152>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 801f718:	2c00      	cmp	r4, #0
 801f71a:	d144      	bne.n	801f7a6 <lv_spinbox_event+0x10a>
 801f71c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801f71e:	2b00      	cmp	r3, #0
 801f720:	db6a      	blt.n	801f7f8 <lv_spinbox_event+0x15c>
            size_t len = spinbox->digit_count - 1;
 801f722:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
 801f726:	f001 010f 	and.w	r1, r1, #15
 801f72a:	3901      	subs	r1, #1
            if(spinbox->range_min < 0) pos++;
 801f72c:	e050      	b.n	801f7d0 <lv_spinbox_event+0x134>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 801f72e:	4630      	mov	r0, r6
 801f730:	f7e7 f963 	bl	80069fa <lv_obj_get_group>
 801f734:	f7e4 fda8 	bl	8004288 <lv_group_get_editing>
 801f738:	2800      	cmp	r0, #0
 801f73a:	d0b6      	beq.n	801f6aa <lv_spinbox_event+0xe>
                if(spinbox->digit_count > 1) {
 801f73c:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
 801f740:	f002 020f 	and.w	r2, r2, #15
 801f744:	2a01      	cmp	r2, #1
 801f746:	d9b0      	bls.n	801f6aa <lv_spinbox_event+0xe>
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 801f748:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
 801f74c:	f003 0306 	and.w	r3, r3, #6
 801f750:	2b04      	cmp	r3, #4
 801f752:	d110      	bne.n	801f776 <lv_spinbox_event+0xda>
                        if(spinbox->step > 1) {
 801f754:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801f756:	2b01      	cmp	r3, #1
 801f758:	dd03      	ble.n	801f762 <lv_spinbox_event+0xc6>
                            lv_spinbox_step_next(obj);
 801f75a:	4630      	mov	r0, r6
 801f75c:	f7ff ff34 	bl	801f5c8 <lv_spinbox_step_next>
 801f760:	e7a3      	b.n	801f6aa <lv_spinbox_event+0xe>
                            spinbox->step = lv_pow(10, spinbox->digit_count - 2);
 801f762:	3a02      	subs	r2, #2
 801f764:	200a      	movs	r0, #10
 801f766:	2100      	movs	r1, #0
 801f768:	f002 f82d 	bl	80217c6 <lv_pow>
 801f76c:	6730      	str	r0, [r6, #112]	; 0x70
                            lv_spinbox_step_prev(obj);
 801f76e:	4630      	mov	r0, r6
 801f770:	f7ff ff3c 	bl	801f5ec <lv_spinbox_step_prev>
 801f774:	e799      	b.n	801f6aa <lv_spinbox_event+0xe>
                        if(spinbox->step < lv_pow(10, spinbox->digit_count - 1)) {
 801f776:	6f34      	ldr	r4, [r6, #112]	; 0x70
 801f778:	17e5      	asrs	r5, r4, #31
 801f77a:	3a01      	subs	r2, #1
 801f77c:	200a      	movs	r0, #10
 801f77e:	2100      	movs	r1, #0
 801f780:	f002 f821 	bl	80217c6 <lv_pow>
 801f784:	4284      	cmp	r4, r0
 801f786:	eb75 0301 	sbcs.w	r3, r5, r1
 801f78a:	da03      	bge.n	801f794 <lv_spinbox_event+0xf8>
                            lv_spinbox_step_prev(obj);
 801f78c:	4630      	mov	r0, r6
 801f78e:	f7ff ff2d 	bl	801f5ec <lv_spinbox_step_prev>
 801f792:	e78a      	b.n	801f6aa <lv_spinbox_event+0xe>
                            spinbox->step = 10;
 801f794:	230a      	movs	r3, #10
 801f796:	6733      	str	r3, [r6, #112]	; 0x70
                            lv_spinbox_step_next(obj);
 801f798:	4630      	mov	r0, r6
 801f79a:	f7ff ff15 	bl	801f5c8 <lv_spinbox_step_next>
 801f79e:	e784      	b.n	801f6aa <lv_spinbox_event+0xe>
                lv_textarea_cursor_left(obj);
 801f7a0:	4630      	mov	r0, r6
 801f7a2:	f00c fbab 	bl	802befc <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 801f7a6:	f896 0074 	ldrb.w	r0, [r6, #116]	; 0x74
 801f7aa:	f000 010f 	and.w	r1, r0, #15
 801f7ae:	3901      	subs	r1, #1
            uint16_t cp = spinbox->ta.cursor.pos;
 801f7b0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801f7b2:	b293      	uxth	r3, r2
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 801f7b4:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
 801f7b8:	d905      	bls.n	801f7c6 <lv_spinbox_event+0x12a>
 801f7ba:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 801f7be:	bf1c      	itt	ne
 801f7c0:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 801f7c4:	b29b      	uxthne	r3, r3
            uint32_t pos = len - cp;
 801f7c6:	1ac9      	subs	r1, r1, r3
            if(spinbox->range_min < 0) pos++;
 801f7c8:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	bfb8      	it	lt
 801f7ce:	3101      	addlt	r1, #1
            spinbox->step = 1;
 801f7d0:	2301      	movs	r3, #1
 801f7d2:	6733      	str	r3, [r6, #112]	; 0x70
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 801f7d4:	2900      	cmp	r1, #0
 801f7d6:	f43f af68 	beq.w	801f6aa <lv_spinbox_event+0xe>
 801f7da:	2200      	movs	r2, #0
 801f7dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801f7e0:	005b      	lsls	r3, r3, #1
 801f7e2:	3201      	adds	r2, #1
 801f7e4:	b292      	uxth	r2, r2
 801f7e6:	428a      	cmp	r2, r1
 801f7e8:	d3f8      	bcc.n	801f7dc <lv_spinbox_event+0x140>
 801f7ea:	6733      	str	r3, [r6, #112]	; 0x70
 801f7ec:	e75d      	b.n	801f6aa <lv_spinbox_event+0xe>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 801f7ee:	1e41      	subs	r1, r0, #1
 801f7f0:	4630      	mov	r0, r6
 801f7f2:	f00b ffeb 	bl	802b7cc <lv_textarea_set_cursor_pos>
 801f7f6:	e7d6      	b.n	801f7a6 <lv_spinbox_event+0x10a>
                lv_textarea_set_cursor_pos(obj, 1);
 801f7f8:	2101      	movs	r1, #1
 801f7fa:	4630      	mov	r0, r6
 801f7fc:	f00b ffe6 	bl	802b7cc <lv_textarea_set_cursor_pos>
 801f800:	e7d1      	b.n	801f7a6 <lv_spinbox_event+0x10a>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 801f802:	2d04      	cmp	r5, #4
 801f804:	d003      	beq.n	801f80e <lv_spinbox_event+0x172>
                lv_spinbox_step_next(obj);
 801f806:	4630      	mov	r0, r6
 801f808:	f7ff fede 	bl	801f5c8 <lv_spinbox_step_next>
 801f80c:	e74d      	b.n	801f6aa <lv_spinbox_event+0xe>
                lv_spinbox_increment(obj);
 801f80e:	4630      	mov	r0, r6
 801f810:	f7ff ff00 	bl	801f614 <lv_spinbox_increment>
 801f814:	e749      	b.n	801f6aa <lv_spinbox_event+0xe>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 801f816:	2d04      	cmp	r5, #4
 801f818:	d003      	beq.n	801f822 <lv_spinbox_event+0x186>
                lv_spinbox_step_prev(obj);
 801f81a:	4630      	mov	r0, r6
 801f81c:	f7ff fee6 	bl	801f5ec <lv_spinbox_step_prev>
 801f820:	e743      	b.n	801f6aa <lv_spinbox_event+0xe>
                lv_spinbox_decrement(obj);
 801f822:	4630      	mov	r0, r6
 801f824:	f7ff ff17 	bl	801f656 <lv_spinbox_decrement>
 801f828:	e73f      	b.n	801f6aa <lv_spinbox_event+0xe>
            lv_spinbox_increment(obj);
 801f82a:	4630      	mov	r0, r6
 801f82c:	f7ff fef2 	bl	801f614 <lv_spinbox_increment>
 801f830:	e73b      	b.n	801f6aa <lv_spinbox_event+0xe>
            lv_spinbox_decrement(obj);
 801f832:	4630      	mov	r0, r6
 801f834:	f7ff ff0f 	bl	801f656 <lv_spinbox_decrement>
 801f838:	e737      	b.n	801f6aa <lv_spinbox_event+0xe>
 801f83a:	bf00      	nop
 801f83c:	0802d820 	.word	0x0802d820

0801f840 <lv_spinner_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_spinner_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801f840:	b570      	push	{r4, r5, r6, lr}
 801f842:	b092      	sub	sp, #72	; 0x48
 801f844:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801f846:	2102      	movs	r1, #2
 801f848:	4620      	mov	r0, r4
 801f84a:	f7e7 f86b 	bl	8006924 <lv_obj_clear_flag>

    lv_anim_t a;
    lv_anim_init(&a);
 801f84e:	a801      	add	r0, sp, #4
 801f850:	f000 ff92 	bl	8020778 <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 801f854:	9401      	str	r4, [sp, #4]
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 801f856:	4b16      	ldr	r3, [pc, #88]	; (801f8b0 <lv_spinner_constructor+0x70>)
 801f858:	9302      	str	r3, [sp, #8]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 801f85a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f85e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    lv_anim_set_var(&a, obj);
    lv_anim_set_exec_cb(&a, arc_anim_end_angle);
    lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
    lv_anim_set_time(&a, time_param);
 801f862:	4b14      	ldr	r3, [pc, #80]	; (801f8b4 <lv_spinner_constructor+0x74>)
    a->time = duration;
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	930c      	str	r3, [sp, #48]	; 0x30
    lv_anim_set_values(&a, arc_length_param, 360 + arc_length_param);
 801f868:	4b13      	ldr	r3, [pc, #76]	; (801f8b8 <lv_spinner_constructor+0x78>)
 801f86a:	681b      	ldr	r3, [r3, #0]
    a->start_value = start;
 801f86c:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 801f86e:	930a      	str	r3, [sp, #40]	; 0x28
 801f870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
    a->end_value = end;
 801f874:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_anim_start(&a);
 801f876:	a801      	add	r0, sp, #4
 801f878:	f000 ffd0 	bl	802081c <lv_anim_start>
    a->path_cb = path_cb;
 801f87c:	4b0f      	ldr	r3, [pc, #60]	; (801f8bc <lv_spinner_constructor+0x7c>)
 801f87e:	9308      	str	r3, [sp, #32]
    a->start_value = start;
 801f880:	2500      	movs	r5, #0
 801f882:	9509      	str	r5, [sp, #36]	; 0x24
    a->current_value = start;
 801f884:	950a      	str	r5, [sp, #40]	; 0x28
    a->end_value = end;
 801f886:	f44f 76b4 	mov.w	r6, #360	; 0x168
 801f88a:	960b      	str	r6, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 801f88c:	4b0c      	ldr	r3, [pc, #48]	; (801f8c0 <lv_spinner_constructor+0x80>)
 801f88e:	9302      	str	r3, [sp, #8]

    lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
    lv_anim_set_values(&a, 0, 360);
    lv_anim_set_exec_cb(&a, arc_anim_start_angle);
    lv_anim_start(&a);
 801f890:	a801      	add	r0, sp, #4
 801f892:	f000 ffc3 	bl	802081c <lv_anim_start>

    lv_arc_set_bg_angles(obj, 0, 360);
 801f896:	4632      	mov	r2, r6
 801f898:	4629      	mov	r1, r5
 801f89a:	4620      	mov	r0, r4
 801f89c:	f004 feb2 	bl	8024604 <lv_arc_set_bg_angles>
    lv_arc_set_rotation(obj, 270);
 801f8a0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801f8a4:	4620      	mov	r0, r4
 801f8a6:	f004 feb8 	bl	802461a <lv_arc_set_rotation>
}
 801f8aa:	b012      	add	sp, #72	; 0x48
 801f8ac:	bd70      	pop	{r4, r5, r6, pc}
 801f8ae:	bf00      	nop
 801f8b0:	0801f8cf 	.word	0x0801f8cf
 801f8b4:	20002720 	.word	0x20002720
 801f8b8:	2000271c 	.word	0x2000271c
 801f8bc:	08020935 	.word	0x08020935
 801f8c0:	0801f8c5 	.word	0x0801f8c5

0801f8c4 <arc_anim_start_angle>:


static void arc_anim_start_angle(void * obj, int32_t v)
{
 801f8c4:	b508      	push	{r3, lr}
    lv_arc_set_start_angle(obj, (uint16_t) v);
 801f8c6:	b289      	uxth	r1, r1
 801f8c8:	f004 fd32 	bl	8024330 <lv_arc_set_start_angle>
}
 801f8cc:	bd08      	pop	{r3, pc}

0801f8ce <arc_anim_end_angle>:


static void arc_anim_end_angle(void * obj, int32_t v)
{
 801f8ce:	b508      	push	{r3, lr}
    lv_arc_set_end_angle(obj, (uint16_t) v);
 801f8d0:	b289      	uxth	r1, r1
 801f8d2:	f004 fd6d 	bl	80243b0 <lv_arc_set_end_angle>
}
 801f8d6:	bd08      	pop	{r3, pc}

0801f8d8 <lv_tabview_destructor>:
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
}

static void lv_tabview_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801f8d8:	b570      	push	{r4, r5, r6, lr}
 801f8da:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    uint32_t i;
    if(tabview->tab_pos & LV_DIR_VER) {
 801f8dc:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801f8e0:	f013 0f0c 	tst.w	r3, #12
 801f8e4:	d00f      	beq.n	801f906 <lv_tabview_destructor+0x2e>
        for(i = 0; i < tabview->tab_cnt; i++) {
 801f8e6:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 801f8e8:	b313      	cbz	r3, 801f930 <lv_tabview_destructor+0x58>
 801f8ea:	2500      	movs	r5, #0
            lv_mem_free(tabview->map[i]);
            tabview->map[i] = NULL;
 801f8ec:	462e      	mov	r6, r5
            lv_mem_free(tabview->map[i]);
 801f8ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f8f0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f8f4:	f001 ffd6 	bl	80218a4 <lv_mem_free>
            tabview->map[i] = NULL;
 801f8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f8fa:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 801f8fe:	3501      	adds	r5, #1
 801f900:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801f902:	42ab      	cmp	r3, r5
 801f904:	d8f3      	bhi.n	801f8ee <lv_tabview_destructor+0x16>
        }
    }
    if(tabview->tab_pos & LV_DIR_HOR) {
 801f906:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801f90a:	f013 0f03 	tst.w	r3, #3
 801f90e:	d00f      	beq.n	801f930 <lv_tabview_destructor+0x58>
        for(i = 0; i < tabview->tab_cnt; i++) {
 801f910:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801f912:	b16b      	cbz	r3, 801f930 <lv_tabview_destructor+0x58>
 801f914:	2500      	movs	r5, #0
            lv_mem_free(tabview->map[i * 2]);
            tabview->map[i * 2] = NULL;
 801f916:	462e      	mov	r6, r5
            lv_mem_free(tabview->map[i * 2]);
 801f918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f91a:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 801f91e:	f001 ffc1 	bl	80218a4 <lv_mem_free>
            tabview->map[i * 2] = NULL;
 801f922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f924:	f843 6035 	str.w	r6, [r3, r5, lsl #3]
        for(i = 0; i < tabview->tab_cnt; i++) {
 801f928:	3501      	adds	r5, #1
 801f92a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801f92c:	42ab      	cmp	r3, r5
 801f92e:	d8f3      	bhi.n	801f918 <lv_tabview_destructor+0x40>
        }
    }


    lv_mem_free(tabview->map);
 801f930:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f932:	f001 ffb7 	bl	80218a4 <lv_mem_free>
    tabview->map = NULL;
 801f936:	2300      	movs	r3, #0
 801f938:	6263      	str	r3, [r4, #36]	; 0x24
}
 801f93a:	bd70      	pop	{r4, r5, r6, pc}

0801f93c <lv_tabview_constructor>:
{
 801f93c:	b570      	push	{r4, r5, r6, lr}
 801f93e:	460c      	mov	r4, r1
    tabview->tab_pos = tabpos_create;
 801f940:	4b52      	ldr	r3, [pc, #328]	; (801fa8c <lv_tabview_constructor+0x150>)
 801f942:	781b      	ldrb	r3, [r3, #0]
 801f944:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    switch(tabview->tab_pos) {
 801f948:	3b01      	subs	r3, #1
 801f94a:	2b07      	cmp	r3, #7
 801f94c:	d809      	bhi.n	801f962 <lv_tabview_constructor+0x26>
 801f94e:	e8df f003 	tbb	[pc, r3]
 801f952:	5e59      	.short	0x5e59
 801f954:	08080408 	.word	0x08080408
 801f958:	5408      	.short	0x5408
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801f95a:	2101      	movs	r1, #1
 801f95c:	4620      	mov	r0, r4
 801f95e:	f7f6 fffd 	bl	801695c <lv_obj_set_flex_flow>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 801f962:	f242 0264 	movw	r2, #8292	; 0x2064
 801f966:	4611      	mov	r1, r2
 801f968:	4620      	mov	r0, r4
 801f96a:	f7e7 ffed 	bl	8007948 <lv_obj_set_size>
    btnm = lv_btnmatrix_create(obj);
 801f96e:	4620      	mov	r0, r4
 801f970:	f006 f8ee 	bl	8025b50 <lv_btnmatrix_create>
 801f974:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 801f976:	4620      	mov	r0, r4
 801f978:	f7e6 ff8e 	bl	8006898 <lv_obj_create>
 801f97c:	4605      	mov	r5, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 801f97e:	2101      	movs	r1, #1
 801f980:	4630      	mov	r0, r6
 801f982:	f006 fde1 	bl	8026548 <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 801f986:	2004      	movs	r0, #4
 801f988:	f001 ff6e 	bl	8021868 <lv_mem_alloc>
 801f98c:	6260      	str	r0, [r4, #36]	; 0x24
    tabview->map[0] = "";
 801f98e:	4b40      	ldr	r3, [pc, #256]	; (801fa90 <lv_tabview_constructor+0x154>)
 801f990:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 801f992:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f994:	4630      	mov	r0, r6
 801f996:	f006 f8e7 	bl	8025b68 <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 801f99a:	2300      	movs	r3, #0
 801f99c:	221c      	movs	r2, #28
 801f99e:	493d      	ldr	r1, [pc, #244]	; (801fa94 <lv_tabview_constructor+0x158>)
 801f9a0:	4630      	mov	r0, r6
 801f9a2:	f7e4 f9ef 	bl	8003d84 <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 801f9a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801f9aa:	4630      	mov	r0, r6
 801f9ac:	f7e6 ff80 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 801f9b0:	2300      	movs	r3, #0
 801f9b2:	461a      	mov	r2, r3
 801f9b4:	4938      	ldr	r1, [pc, #224]	; (801fa98 <lv_tabview_constructor+0x15c>)
 801f9b6:	4628      	mov	r0, r5
 801f9b8:	f7e4 f9e4 	bl	8003d84 <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 801f9bc:	2100      	movs	r1, #0
 801f9be:	4628      	mov	r0, r5
 801f9c0:	f7e9 fc1b 	bl	80091fa <lv_obj_set_scrollbar_mode>
    switch(tabview->tab_pos) {
 801f9c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801f9c8:	2b04      	cmp	r3, #4
 801f9ca:	d027      	beq.n	801fa1c <lv_tabview_constructor+0xe0>
 801f9cc:	d824      	bhi.n	801fa18 <lv_tabview_constructor+0xdc>
 801f9ce:	3b01      	subs	r3, #1
 801f9d0:	b2db      	uxtb	r3, r3
 801f9d2:	2b01      	cmp	r3, #1
 801f9d4:	d833      	bhi.n	801fa3e <lv_tabview_constructor+0x102>
            lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 801f9d6:	f242 0264 	movw	r2, #8292	; 0x2064
 801f9da:	4b30      	ldr	r3, [pc, #192]	; (801fa9c <lv_tabview_constructor+0x160>)
 801f9dc:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f9e0:	4630      	mov	r0, r6
 801f9e2:	f7e7 ffb1 	bl	8007948 <lv_obj_set_size>
            lv_obj_set_height(cont, LV_PCT(100));
 801f9e6:	f242 0164 	movw	r1, #8292	; 0x2064
 801f9ea:	4628      	mov	r0, r5
 801f9ec:	f7e7 ff95 	bl	800791a <lv_obj_set_height>
            lv_obj_set_flex_grow(cont, 1);
 801f9f0:	2101      	movs	r1, #1
 801f9f2:	4628      	mov	r0, r5
 801f9f4:	f7f7 f802 	bl	80169fc <lv_obj_set_flex_grow>
            break;
 801f9f8:	e021      	b.n	801fa3e <lv_tabview_constructor+0x102>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 801f9fa:	2109      	movs	r1, #9
 801f9fc:	4620      	mov	r0, r4
 801f9fe:	f7f6 ffad 	bl	801695c <lv_obj_set_flex_flow>
            break;
 801fa02:	e7ae      	b.n	801f962 <lv_tabview_constructor+0x26>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 801fa04:	2100      	movs	r1, #0
 801fa06:	4620      	mov	r0, r4
 801fa08:	f7f6 ffa8 	bl	801695c <lv_obj_set_flex_flow>
            break;
 801fa0c:	e7a9      	b.n	801f962 <lv_tabview_constructor+0x26>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 801fa0e:	2108      	movs	r1, #8
 801fa10:	4620      	mov	r0, r4
 801fa12:	f7f6 ffa3 	bl	801695c <lv_obj_set_flex_flow>
            break;
 801fa16:	e7a4      	b.n	801f962 <lv_tabview_constructor+0x26>
    switch(tabview->tab_pos) {
 801fa18:	2b08      	cmp	r3, #8
 801fa1a:	d110      	bne.n	801fa3e <lv_tabview_constructor+0x102>
            lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 801fa1c:	4b1f      	ldr	r3, [pc, #124]	; (801fa9c <lv_tabview_constructor+0x160>)
 801fa1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fa22:	f242 0164 	movw	r1, #8292	; 0x2064
 801fa26:	4630      	mov	r0, r6
 801fa28:	f7e7 ff8e 	bl	8007948 <lv_obj_set_size>
            lv_obj_set_width(cont, LV_PCT(100));
 801fa2c:	f242 0164 	movw	r1, #8292	; 0x2064
 801fa30:	4628      	mov	r0, r5
 801fa32:	f7e7 ff5b 	bl	80078ec <lv_obj_set_width>
            lv_obj_set_flex_grow(cont, 1);
 801fa36:	2101      	movs	r1, #1
 801fa38:	4628      	mov	r0, r5
 801fa3a:	f7f6 ffdf 	bl	80169fc <lv_obj_set_flex_grow>
    lv_group_t * g = lv_group_get_default();
 801fa3e:	f7e4 facb 	bl	8003fd8 <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 801fa42:	b110      	cbz	r0, 801fa4a <lv_tabview_constructor+0x10e>
 801fa44:	4631      	mov	r1, r6
 801fa46:	f7e4 fb58 	bl	80040fa <lv_group_add_obj>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 801fa4a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801fa4e:	f013 0f0c 	tst.w	r3, #12
 801fa52:	d011      	beq.n	801fa78 <lv_tabview_constructor+0x13c>
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 801fa54:	2100      	movs	r1, #0
 801fa56:	4628      	mov	r0, r5
 801fa58:	f7f6 ff80 	bl	801695c <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 801fa5c:	2103      	movs	r1, #3
 801fa5e:	4628      	mov	r0, r5
 801fa60:	f7e9 fbee 	bl	8009240 <lv_obj_set_scroll_snap_x>
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 801fa64:	2180      	movs	r1, #128	; 0x80
 801fa66:	4628      	mov	r0, r5
 801fa68:	f7e6 ff22 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801fa6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801fa70:	4628      	mov	r0, r5
 801fa72:	f7e6 ff57 	bl	8006924 <lv_obj_clear_flag>
}
 801fa76:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_COLUMN);
 801fa78:	2101      	movs	r1, #1
 801fa7a:	4628      	mov	r0, r5
 801fa7c:	f7f6 ff6e 	bl	801695c <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_y(cont, LV_SCROLL_SNAP_CENTER);
 801fa80:	2103      	movs	r1, #3
 801fa82:	4628      	mov	r0, r5
 801fa84:	f7e9 fbe7 	bl	8009256 <lv_obj_set_scroll_snap_y>
 801fa88:	e7ec      	b.n	801fa64 <lv_tabview_constructor+0x128>
 801fa8a:	bf00      	nop
 801fa8c:	20002724 	.word	0x20002724
 801fa90:	0802ceb8 	.word	0x0802ceb8
 801fa94:	0801fc57 	.word	0x0801fc57
 801fa98:	0801fb89 	.word	0x0801fb89
 801fa9c:	20002726 	.word	0x20002726

0801faa0 <lv_tabview_get_content>:
{
 801faa0:	b508      	push	{r3, lr}
    return lv_obj_get_child(tv, 1);
 801faa2:	2101      	movs	r1, #1
 801faa4:	f7eb fde6 	bl	800b674 <lv_obj_get_child>
}
 801faa8:	bd08      	pop	{r3, pc}

0801faaa <lv_tabview_get_tab_btns>:
{
 801faaa:	b508      	push	{r3, lr}
    return lv_obj_get_child(tv, 0);
 801faac:	2100      	movs	r1, #0
 801faae:	f7eb fde1 	bl	800b674 <lv_obj_get_child>
}
 801fab2:	bd08      	pop	{r3, pc}

0801fab4 <lv_tabview_set_act>:
{
 801fab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fab8:	4604      	mov	r4, r0
 801faba:	460d      	mov	r5, r1
 801fabc:	4616      	mov	r6, r2
    if(id >= tabview->tab_cnt) {
 801fabe:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 801fac0:	428b      	cmp	r3, r1
        id = tabview->tab_cnt - 1;
 801fac2:	bf98      	it	ls
 801fac4:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
    lv_obj_update_layout(obj);
 801fac8:	f7e9 f90a 	bl	8008ce0 <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 801facc:	4620      	mov	r0, r4
 801face:	f7ff ffe7 	bl	801faa0 <lv_tabview_get_content>
    if(cont == NULL) return;
 801fad2:	4607      	mov	r7, r0
 801fad4:	b358      	cbz	r0, 801fb2e <lv_tabview_set_act+0x7a>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 801fad6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801fada:	f013 0f0c 	tst.w	r3, #12
 801fade:	d028      	beq.n	801fb32 <lv_tabview_set_act+0x7e>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801fae0:	2215      	movs	r2, #21
 801fae2:	2100      	movs	r1, #0
 801fae4:	f7ea fe80 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801fae8:	fa0f f980 	sxth.w	r9, r0
        lv_coord_t w = lv_obj_get_content_width(cont);
 801faec:	4638      	mov	r0, r7
 801faee:	f7e8 f808 	bl	8007b02 <lv_obj_get_content_width>
 801faf2:	4680      	mov	r8, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801faf4:	2216      	movs	r2, #22
 801faf6:	2100      	movs	r1, #0
 801faf8:	4620      	mov	r0, r4
 801fafa:	f7ea fe75 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801fafe:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801fb00:	2801      	cmp	r0, #1
            lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 801fb02:	eb09 0108 	add.w	r1, r9, r8
 801fb06:	bf12      	itee	ne
 801fb08:	4369      	mulne	r1, r5
            int32_t id_rtl = -(int32_t)id;
 801fb0a:	f1c5 0800 	rsbeq	r8, r5, #0
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 801fb0e:	fb01 f108 	muleq.w	r1, r1, r8
 801fb12:	4632      	mov	r2, r6
 801fb14:	b209      	sxth	r1, r1
 801fb16:	4638      	mov	r0, r7
 801fb18:	f7e9 fea6 	bl	8009868 <lv_obj_scroll_to_x>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f7ff ffc4 	bl	801faaa <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 801fb22:	b2ad      	uxth	r5, r5
 801fb24:	2280      	movs	r2, #128	; 0x80
 801fb26:	4629      	mov	r1, r5
 801fb28:	f006 f9b5 	bl	8025e96 <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 801fb2c:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801fb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801fb32:	2214      	movs	r2, #20
 801fb34:	2100      	movs	r1, #0
 801fb36:	f7ea fe57 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801fb3a:	fa0f f880 	sxth.w	r8, r0
        lv_coord_t h = lv_obj_get_content_height(cont);
 801fb3e:	4638      	mov	r0, r7
 801fb40:	f7e7 fffc 	bl	8007b3c <lv_obj_get_content_height>
        lv_obj_scroll_to_y(cont, id * (gap + h), anim_en);
 801fb44:	eb08 0100 	add.w	r1, r8, r0
 801fb48:	fb05 f101 	mul.w	r1, r5, r1
 801fb4c:	4632      	mov	r2, r6
 801fb4e:	b209      	sxth	r1, r1
 801fb50:	4638      	mov	r0, r7
 801fb52:	f7e9 fe9d 	bl	8009890 <lv_obj_scroll_to_y>
 801fb56:	e7e1      	b.n	801fb1c <lv_tabview_set_act+0x68>

0801fb58 <lv_tabview_event>:

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801fb58:	b538      	push	{r3, r4, r5, lr}
 801fb5a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 801fb5c:	4809      	ldr	r0, [pc, #36]	; (801fb84 <lv_tabview_event+0x2c>)
 801fb5e:	f7e3 ffd2 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801fb62:	2801      	cmp	r0, #1
 801fb64:	d000      	beq.n	801fb68 <lv_tabview_event+0x10>
    lv_obj_t * target = lv_event_get_target(e);

    if(code == LV_EVENT_SIZE_CHANGED) {
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
    }
}
 801fb66:	bd38      	pop	{r3, r4, r5, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801fb68:	4620      	mov	r0, r4
 801fb6a:	f7e4 f8ef 	bl	8003d4c <lv_event_get_code>
 801fb6e:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 801fb70:	4620      	mov	r0, r4
 801fb72:	f7e4 f8e7 	bl	8003d44 <lv_event_get_target>
    if(code == LV_EVENT_SIZE_CHANGED) {
 801fb76:	2d29      	cmp	r5, #41	; 0x29
 801fb78:	d1f5      	bne.n	801fb66 <lv_tabview_event+0xe>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 801fb7a:	2200      	movs	r2, #0
 801fb7c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 801fb7e:	f7ff ff99 	bl	801fab4 <lv_tabview_set_act>
 801fb82:	e7f0      	b.n	801fb66 <lv_tabview_event+0xe>
 801fb84:	0802d858 	.word	0x0802d858

0801fb88 <cont_scroll_end_event_cb>:
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 801fb88:	b570      	push	{r4, r5, r6, lr}
 801fb8a:	b082      	sub	sp, #8
 801fb8c:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 801fb8e:	f7e4 f8d9 	bl	8003d44 <lv_event_get_target>
 801fb92:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 801fb94:	4620      	mov	r0, r4
 801fb96:	f7e4 f8d9 	bl	8003d4c <lv_event_get_code>
 801fb9a:	4604      	mov	r4, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 801fb9c:	4628      	mov	r0, r5
 801fb9e:	f7eb fd65 	bl	800b66c <lv_obj_get_parent>
 801fba2:	4606      	mov	r6, r0
    lv_tabview_t * tv_obj = (lv_tabview_t *)tv;
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 801fba4:	2c2b      	cmp	r4, #43	; 0x2b
 801fba6:	d003      	beq.n	801fbb0 <cont_scroll_end_event_cb+0x28>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
    }
    else if(code == LV_EVENT_SCROLL_END) {
 801fba8:	2c0a      	cmp	r4, #10
 801fbaa:	d006      	beq.n	801fbba <cont_scroll_end_event_cb+0x32>
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);

        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 801fbac:	b002      	add	sp, #8
 801fbae:	bd70      	pop	{r4, r5, r6, pc}
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 801fbb0:	2200      	movs	r2, #0
 801fbb2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 801fbb4:	f7ff ff7e 	bl	801fab4 <lv_tabview_set_act>
 801fbb8:	e7f8      	b.n	801fbac <cont_scroll_end_event_cb+0x24>
        lv_indev_t * indev = lv_indev_get_act();
 801fbba:	f7e4 fc47 	bl	800444c <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 801fbbe:	b110      	cbz	r0, 801fbc6 <cont_scroll_end_event_cb+0x3e>
 801fbc0:	7903      	ldrb	r3, [r0, #4]
 801fbc2:	2b01      	cmp	r3, #1
 801fbc4:	d0f2      	beq.n	801fbac <cont_scroll_end_event_cb+0x24>
        lv_obj_get_scroll_end(cont, &p);
 801fbc6:	a901      	add	r1, sp, #4
 801fbc8:	4628      	mov	r0, r5
 801fbca:	f7e9 fcdf 	bl	800958c <lv_obj_get_scroll_end>
        if((tv_obj->tab_pos & LV_DIR_VER) != 0) {
 801fbce:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 801fbd2:	f013 0f0c 	tst.w	r3, #12
 801fbd6:	d021      	beq.n	801fc1c <cont_scroll_end_event_cb+0x94>
            lv_coord_t w = lv_obj_get_content_width(cont);
 801fbd8:	4628      	mov	r0, r5
 801fbda:	f7e7 ff92 	bl	8007b02 <lv_obj_get_content_width>
 801fbde:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801fbe0:	2216      	movs	r2, #22
 801fbe2:	2100      	movs	r1, #0
 801fbe4:	4630      	mov	r0, r6
 801fbe6:	f7ea fdff 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801fbea:	b2c0      	uxtb	r0, r0
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 801fbec:	2801      	cmp	r0, #1
 801fbee:	d00a      	beq.n	801fc06 <cont_scroll_end_event_cb+0x7e>
            else t = (p.x + w / 2) / w;
 801fbf0:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801fbf4:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801fbf8:	f343 034f 	sbfx	r3, r3, #1, #16
 801fbfc:	441c      	add	r4, r3
 801fbfe:	fb94 f4f5 	sdiv	r4, r4, r5
 801fc02:	b224      	sxth	r4, r4
 801fc04:	e017      	b.n	801fc36 <cont_scroll_end_event_cb+0xae>
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 801fc06:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 801fc0a:	f343 034f 	sbfx	r3, r3, #1, #16
 801fc0e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801fc12:	1b1b      	subs	r3, r3, r4
 801fc14:	fb93 f4f5 	sdiv	r4, r3, r5
 801fc18:	b224      	sxth	r4, r4
 801fc1a:	e00c      	b.n	801fc36 <cont_scroll_end_event_cb+0xae>
            lv_coord_t h = lv_obj_get_content_height(cont);
 801fc1c:	4628      	mov	r0, r5
 801fc1e:	f7e7 ff8d 	bl	8007b3c <lv_obj_get_content_height>
            t = (p.y + h / 2) / h;
 801fc22:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 801fc26:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 801fc2a:	f343 034f 	sbfx	r3, r3, #1, #16
 801fc2e:	441c      	add	r4, r3
 801fc30:	fb94 f4f0 	sdiv	r4, r4, r0
 801fc34:	b224      	sxth	r4, r4
        if(t < 0) t = 0;
 801fc36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
 801fc3a:	8d75      	ldrh	r5, [r6, #42]	; 0x2a
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 801fc3c:	2201      	movs	r2, #1
 801fc3e:	4621      	mov	r1, r4
 801fc40:	4630      	mov	r0, r6
 801fc42:	f7ff ff37 	bl	801fab4 <lv_tabview_set_act>
        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 801fc46:	42ac      	cmp	r4, r5
 801fc48:	d0b0      	beq.n	801fbac <cont_scroll_end_event_cb+0x24>
 801fc4a:	2200      	movs	r2, #0
 801fc4c:	211c      	movs	r1, #28
 801fc4e:	4630      	mov	r0, r6
 801fc50:	f7e4 f856 	bl	8003d00 <lv_event_send>
 801fc54:	e7aa      	b.n	801fbac <cont_scroll_end_event_cb+0x24>

0801fc56 <btns_value_changed_event_cb>:
{
 801fc56:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 801fc58:	f7e4 f874 	bl	8003d44 <lv_event_get_target>
 801fc5c:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 801fc5e:	f7eb fd05 	bl	800b66c <lv_obj_get_parent>
 801fc62:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 801fc64:	4628      	mov	r0, r5
 801fc66:	f006 f93c 	bl	8025ee2 <lv_btnmatrix_get_selected_btn>
 801fc6a:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 801fc6c:	2201      	movs	r2, #1
 801fc6e:	4620      	mov	r0, r4
 801fc70:	f7ff ff20 	bl	801fab4 <lv_tabview_set_act>
}
 801fc74:	bd38      	pop	{r3, r4, r5, pc}
	...

0801fc78 <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801fc78:	b510      	push	{r4, lr}
 801fc7a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 801fc7c:	f242 0264 	movw	r2, #8292	; 0x2064
 801fc80:	4611      	mov	r1, r2
 801fc82:	4620      	mov	r0, r4
 801fc84:	f7e7 fe60 	bl	8007948 <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 801fc88:	2300      	movs	r3, #0
 801fc8a:	461a      	mov	r2, r3
 801fc8c:	4908      	ldr	r1, [pc, #32]	; (801fcb0 <lv_tileview_constructor+0x38>)
 801fc8e:	4620      	mov	r0, r4
 801fc90:	f7e4 f878 	bl	8003d84 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 801fc94:	2180      	movs	r1, #128	; 0x80
 801fc96:	4620      	mov	r0, r4
 801fc98:	f7e6 fe0a 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 801fc9c:	2103      	movs	r1, #3
 801fc9e:	4620      	mov	r0, r4
 801fca0:	f7e9 face 	bl	8009240 <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 801fca4:	2103      	movs	r1, #3
 801fca6:	4620      	mov	r0, r4
 801fca8:	f7e9 fad5 	bl	8009256 <lv_obj_set_scroll_snap_y>

}
 801fcac:	bd10      	pop	{r4, pc}
 801fcae:	bf00      	nop
 801fcb0:	0801fcb5 	.word	0x0801fcb5

0801fcb4 <tileview_event_cb>:
        lv_obj_set_scroll_dir(parent, create_dir);
    }
}

static void tileview_event_cb(lv_event_t * e)
{
 801fcb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fcb8:	b083      	sub	sp, #12
 801fcba:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 801fcbc:	f7e4 f846 	bl	8003d4c <lv_event_get_code>
 801fcc0:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801fcc2:	4628      	mov	r0, r5
 801fcc4:	f7e4 f83e 	bl	8003d44 <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 801fcc8:	2c0a      	cmp	r4, #10
 801fcca:	d002      	beq.n	801fcd2 <tileview_event_cb+0x1e>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
    }
}
 801fccc:	b003      	add	sp, #12
 801fcce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fcd2:	4607      	mov	r7, r0
        lv_indev_t * indev = lv_indev_get_act();
 801fcd4:	f7e4 fbba 	bl	800444c <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 801fcd8:	b110      	cbz	r0, 801fce0 <tileview_event_cb+0x2c>
 801fcda:	7903      	ldrb	r3, [r0, #4]
 801fcdc:	2b01      	cmp	r3, #1
 801fcde:	d0f5      	beq.n	801fccc <tileview_event_cb+0x18>
        lv_coord_t w = lv_obj_get_content_width(obj);
 801fce0:	4638      	mov	r0, r7
 801fce2:	f7e7 ff0e 	bl	8007b02 <lv_obj_get_content_width>
 801fce6:	4680      	mov	r8, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 801fce8:	4638      	mov	r0, r7
 801fcea:	f7e7 ff27 	bl	8007b3c <lv_obj_get_content_height>
 801fcee:	4681      	mov	r9, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 801fcf0:	a901      	add	r1, sp, #4
 801fcf2:	4638      	mov	r0, r7
 801fcf4:	f7e9 fc4a 	bl	800958c <lv_obj_get_scroll_end>
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 801fcf8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801fcfc:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
 801fd00:	f343 034f 	sbfx	r3, r3, #1, #16
 801fd04:	4418      	add	r0, r3
 801fd06:	fb90 f0f8 	sdiv	r0, r0, r8
 801fd0a:	fb00 f808 	mul.w	r8, r0, r8
 801fd0e:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 801fd12:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 801fd16:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
 801fd1a:	f343 034f 	sbfx	r3, r3, #1, #16
 801fd1e:	4418      	add	r0, r3
 801fd20:	fb90 f0f9 	sdiv	r0, r0, r9
 801fd24:	fb00 f909 	mul.w	r9, r0, r9
 801fd28:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 801fd2c:	2400      	movs	r4, #0
 801fd2e:	e000      	b.n	801fd32 <tileview_event_cb+0x7e>
 801fd30:	3401      	adds	r4, #1
 801fd32:	4638      	mov	r0, r7
 801fd34:	f7eb fcb3 	bl	800b69e <lv_obj_get_child_cnt>
 801fd38:	42a0      	cmp	r0, r4
 801fd3a:	d917      	bls.n	801fd6c <tileview_event_cb+0xb8>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 801fd3c:	4621      	mov	r1, r4
 801fd3e:	4638      	mov	r0, r7
 801fd40:	f7eb fc98 	bl	800b674 <lv_obj_get_child>
 801fd44:	4605      	mov	r5, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 801fd46:	f7e7 fe7f 	bl	8007a48 <lv_obj_get_x>
 801fd4a:	4606      	mov	r6, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 801fd4c:	4628      	mov	r0, r5
 801fd4e:	f7e7 fe9e 	bl	8007a8e <lv_obj_get_y>
            if(x == tx && y == ty) {
 801fd52:	45b0      	cmp	r8, r6
 801fd54:	d1ec      	bne.n	801fd30 <tileview_event_cb+0x7c>
 801fd56:	4581      	cmp	r9, r0
 801fd58:	d1ea      	bne.n	801fd30 <tileview_event_cb+0x7c>
                tv->tile_act = (lv_obj_t *)tile;
 801fd5a:	627d      	str	r5, [r7, #36]	; 0x24
                dir = tile->dir;
 801fd5c:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801fd60:	2200      	movs	r2, #0
 801fd62:	211c      	movs	r1, #28
 801fd64:	4638      	mov	r0, r7
 801fd66:	f7e3 ffcb 	bl	8003d00 <lv_event_send>
                break;
 801fd6a:	e000      	b.n	801fd6e <tileview_event_cb+0xba>
        lv_dir_t dir = LV_DIR_ALL;
 801fd6c:	240f      	movs	r4, #15
        lv_obj_set_scroll_dir(obj, dir);
 801fd6e:	4621      	mov	r1, r4
 801fd70:	4638      	mov	r0, r7
 801fd72:	f7e9 fa55 	bl	8009220 <lv_obj_set_scroll_dir>
 801fd76:	e7a9      	b.n	801fccc <tileview_event_cb+0x18>

0801fd78 <lv_tileview_tile_constructor>:
{
 801fd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd7c:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801fd7e:	4608      	mov	r0, r1
 801fd80:	f7eb fc74 	bl	800b66c <lv_obj_get_parent>
 801fd84:	4606      	mov	r6, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 801fd86:	f242 0264 	movw	r2, #8292	; 0x2064
 801fd8a:	4611      	mov	r1, r2
 801fd8c:	4620      	mov	r0, r4
 801fd8e:	f7e7 fddb 	bl	8007948 <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 801fd92:	4620      	mov	r0, r4
 801fd94:	f7e8 ffa4 	bl	8008ce0 <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 801fd98:	4630      	mov	r0, r6
 801fd9a:	f7e7 feb2 	bl	8007b02 <lv_obj_get_content_width>
 801fd9e:	4f11      	ldr	r7, [pc, #68]	; (801fde4 <lv_tileview_tile_constructor+0x6c>)
 801fda0:	683d      	ldr	r5, [r7, #0]
 801fda2:	fb00 f505 	mul.w	r5, r0, r5
 801fda6:	b22d      	sxth	r5, r5
                   create_row_id * lv_obj_get_content_height(parent));
 801fda8:	4630      	mov	r0, r6
 801fdaa:	f7e7 fec7 	bl	8007b3c <lv_obj_get_content_height>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 801fdae:	f8df 8038 	ldr.w	r8, [pc, #56]	; 801fde8 <lv_tileview_tile_constructor+0x70>
 801fdb2:	f8d8 2000 	ldr.w	r2, [r8]
 801fdb6:	fb00 f202 	mul.w	r2, r0, r2
 801fdba:	b212      	sxth	r2, r2
 801fdbc:	4629      	mov	r1, r5
 801fdbe:	4620      	mov	r0, r4
 801fdc0:	f7e7 fd8a 	bl	80078d8 <lv_obj_set_pos>
    tile->dir = create_dir;
 801fdc4:	4b09      	ldr	r3, [pc, #36]	; (801fdec <lv_tileview_tile_constructor+0x74>)
 801fdc6:	7819      	ldrb	r1, [r3, #0]
 801fdc8:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 801fdcc:	683a      	ldr	r2, [r7, #0]
 801fdce:	f8d8 3000 	ldr.w	r3, [r8]
 801fdd2:	4313      	orrs	r3, r2
 801fdd4:	d001      	beq.n	801fdda <lv_tileview_tile_constructor+0x62>
}
 801fdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_set_scroll_dir(parent, create_dir);
 801fdda:	4630      	mov	r0, r6
 801fddc:	f7e9 fa20 	bl	8009220 <lv_obj_set_scroll_dir>
}
 801fde0:	e7f9      	b.n	801fdd6 <lv_tileview_tile_constructor+0x5e>
 801fde2:	bf00      	nop
 801fde4:	20002728 	.word	0x20002728
 801fde8:	20002730 	.word	0x20002730
 801fdec:	2000272c 	.word	0x2000272c

0801fdf0 <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801fdf0:	b570      	push	{r4, r5, r6, lr}
 801fdf2:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801fdf4:	4608      	mov	r0, r1
 801fdf6:	f7eb fc39 	bl	800b66c <lv_obj_get_parent>
 801fdfa:	4606      	mov	r6, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 801fdfc:	f7e7 fe75 	bl	8007aea <lv_obj_get_width>
 801fe00:	4605      	mov	r5, r0
 801fe02:	4630      	mov	r0, r6
 801fe04:	f7e7 fe77 	bl	8007af6 <lv_obj_get_height>
 801fe08:	4602      	mov	r2, r0
 801fe0a:	4629      	mov	r1, r5
 801fe0c:	4620      	mov	r0, r4
 801fe0e:	f7e7 fd9b 	bl	8007948 <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801fe12:	2101      	movs	r1, #1
 801fe14:	4620      	mov	r0, r4
 801fe16:	f7f6 fda1 	bl	801695c <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 801fe1a:	4620      	mov	r0, r4
 801fe1c:	f7e6 fd3c 	bl	8006898 <lv_obj_create>
 801fe20:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 801fe22:	4b0f      	ldr	r3, [pc, #60]	; (801fe60 <lv_win_constructor+0x70>)
 801fe24:	f9b3 2000 	ldrsh.w	r2, [r3]
 801fe28:	f242 0164 	movw	r1, #8292	; 0x2064
 801fe2c:	f7e7 fd8c 	bl	8007948 <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 801fe30:	2100      	movs	r1, #0
 801fe32:	4628      	mov	r0, r5
 801fe34:	f7f6 fd92 	bl	801695c <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 801fe38:	2302      	movs	r3, #2
 801fe3a:	461a      	mov	r2, r3
 801fe3c:	2100      	movs	r1, #0
 801fe3e:	4628      	mov	r0, r5
 801fe40:	f7f6 fdb8 	bl	80169b4 <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 801fe44:	4620      	mov	r0, r4
 801fe46:	f7e6 fd27 	bl	8006898 <lv_obj_create>
 801fe4a:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 801fe4c:	2101      	movs	r1, #1
 801fe4e:	f7f6 fdd5 	bl	80169fc <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 801fe52:	f242 0164 	movw	r1, #8292	; 0x2064
 801fe56:	4620      	mov	r0, r4
 801fe58:	f7e7 fd48 	bl	80078ec <lv_obj_set_width>
}
 801fe5c:	bd70      	pop	{r4, r5, r6, pc}
 801fe5e:	bf00      	nop
 801fe60:	20002734 	.word	0x20002734

0801fe64 <lv_font_get_glyph_bitmap>:
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    LV_ASSERT_NULL(font_p);
 801fe64:	b118      	cbz	r0, 801fe6e <lv_font_get_glyph_bitmap+0xa>
{
 801fe66:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 801fe68:	6842      	ldr	r2, [r0, #4]
 801fe6a:	4790      	blx	r2
}
 801fe6c:	bd08      	pop	{r3, pc}
    LV_ASSERT_NULL(font_p);
 801fe6e:	e7fe      	b.n	801fe6e <lv_font_get_glyph_bitmap+0xa>

0801fe70 <lv_font_get_glyph_dsc>:
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{

    LV_ASSERT_NULL(font_p);
 801fe70:	b150      	cbz	r0, 801fe88 <lv_font_get_glyph_dsc+0x18>
{
 801fe72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe76:	460d      	mov	r5, r1
 801fe78:	4617      	mov	r7, r2
 801fe7a:	4698      	mov	r8, r3
 801fe7c:	4681      	mov	r9, r0
    LV_ASSERT_NULL(dsc_out);
 801fe7e:	b121      	cbz	r1, 801fe8a <lv_font_get_glyph_dsc+0x1a>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 801fe80:	2600      	movs	r6, #0
 801fe82:	600e      	str	r6, [r1, #0]
    const lv_font_t * f = font_p;
 801fe84:	4604      	mov	r4, r0
 801fe86:	e006      	b.n	801fe96 <lv_font_get_glyph_dsc+0x26>
    LV_ASSERT_NULL(font_p);
 801fe88:	e7fe      	b.n	801fe88 <lv_font_get_glyph_dsc+0x18>
    LV_ASSERT_NULL(dsc_out);
 801fe8a:	e7fe      	b.n	801fe8a <lv_font_get_glyph_dsc+0x1a>
            if(!dsc_out->is_placeholder) {
                dsc_out->resolved_font = f;
                return true;
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 801fe8c:	2e00      	cmp	r6, #0
 801fe8e:	bf08      	it	eq
 801fe90:	4626      	moveq	r6, r4
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 801fe92:	6964      	ldr	r4, [r4, #20]
    while(f) {
 801fe94:	b17c      	cbz	r4, 801feb6 <lv_font_get_glyph_dsc+0x46>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 801fe96:	4643      	mov	r3, r8
 801fe98:	463a      	mov	r2, r7
 801fe9a:	4629      	mov	r1, r5
 801fe9c:	4620      	mov	r0, r4
 801fe9e:	f8d4 c000 	ldr.w	ip, [r4]
 801fea2:	47e0      	blx	ip
        if(found) {
 801fea4:	4603      	mov	r3, r0
 801fea6:	2800      	cmp	r0, #0
 801fea8:	d0f3      	beq.n	801fe92 <lv_font_get_glyph_dsc+0x22>
            if(!dsc_out->is_placeholder) {
 801feaa:	7baa      	ldrb	r2, [r5, #14]
 801feac:	f012 0f10 	tst.w	r2, #16
 801feb0:	d1ec      	bne.n	801fe8c <lv_font_get_glyph_dsc+0x1c>
                dsc_out->resolved_font = f;
 801feb2:	602c      	str	r4, [r5, #0]
                return true;
 801feb4:	e008      	b.n	801fec8 <lv_font_get_glyph_dsc+0x58>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 801feb6:	b156      	cbz	r6, 801fece <lv_font_get_glyph_dsc+0x5e>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 801feb8:	6834      	ldr	r4, [r6, #0]
 801feba:	4643      	mov	r3, r8
 801febc:	463a      	mov	r2, r7
 801febe:	4629      	mov	r1, r5
 801fec0:	4630      	mov	r0, r6
 801fec2:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 801fec4:	602e      	str	r6, [r5, #0]
        return true;
 801fec6:	2301      	movs	r3, #1
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
    dsc_out->is_placeholder = true;

    return false;
}
 801fec8:	4618      	mov	r0, r3
 801feca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(letter < 0x20 ||
 801fece:	2f1f      	cmp	r7, #31
 801fed0:	d911      	bls.n	801fef6 <lv_font_get_glyph_dsc+0x86>
 801fed2:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801fed6:	429f      	cmp	r7, r3
 801fed8:	d00d      	beq.n	801fef6 <lv_font_get_glyph_dsc+0x86>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 801feda:	f242 030c 	movw	r3, #8204	; 0x200c
 801fede:	429f      	cmp	r7, r3
 801fee0:	d009      	beq.n	801fef6 <lv_font_get_glyph_dsc+0x86>
        dsc_out->box_w = font_p->line_height / 2;
 801fee2:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
 801fee6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801feea:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801feee:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 801fef0:	3302      	adds	r3, #2
 801fef2:	80ab      	strh	r3, [r5, #4]
 801fef4:	e002      	b.n	801fefc <lv_font_get_glyph_dsc+0x8c>
        dsc_out->box_w = 0;
 801fef6:	2300      	movs	r3, #0
 801fef8:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = 0;
 801fefa:	80ab      	strh	r3, [r5, #4]
    dsc_out->resolved_font = NULL;
 801fefc:	2300      	movs	r3, #0
 801fefe:	602b      	str	r3, [r5, #0]
    dsc_out->box_h = font_p->line_height;
 801ff00:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 801ff04:	812a      	strh	r2, [r5, #8]
    dsc_out->ofs_x = 0;
 801ff06:	816b      	strh	r3, [r5, #10]
    dsc_out->ofs_y = 0;
 801ff08:	81ab      	strh	r3, [r5, #12]
    dsc_out->bpp   = 1;
 801ff0a:	7baa      	ldrb	r2, [r5, #14]
 801ff0c:	2101      	movs	r1, #1
 801ff0e:	f361 0203 	bfi	r2, r1, #0, #4
    dsc_out->is_placeholder = true;
 801ff12:	f042 0210 	orr.w	r2, r2, #16
 801ff16:	73aa      	strb	r2, [r5, #14]
    return false;
 801ff18:	e7d6      	b.n	801fec8 <lv_font_get_glyph_dsc+0x58>

0801ff1a <lv_font_get_glyph_width>:
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    LV_ASSERT_NULL(font);
 801ff1a:	b158      	cbz	r0, 801ff34 <lv_font_get_glyph_width+0x1a>
{
 801ff1c:	b500      	push	{lr}
 801ff1e:	b085      	sub	sp, #20
 801ff20:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 801ff22:	460a      	mov	r2, r1
 801ff24:	4669      	mov	r1, sp
 801ff26:	f7ff ffa3 	bl	801fe70 <lv_font_get_glyph_dsc>
    return g.adv_w;
}
 801ff2a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801ff2e:	b005      	add	sp, #20
 801ff30:	f85d fb04 	ldr.w	pc, [sp], #4
    LV_ASSERT_NULL(font);
 801ff34:	e7fe      	b.n	801ff34 <lv_font_get_glyph_width+0x1a>

0801ff36 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 801ff36:	7803      	ldrb	r3, [r0, #0]
 801ff38:	780a      	ldrb	r2, [r1, #0]
 801ff3a:	4293      	cmp	r3, r2
 801ff3c:	bf11      	iteee	ne
 801ff3e:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 801ff40:	7840      	ldrbeq	r0, [r0, #1]
 801ff42:	784b      	ldrbeq	r3, [r1, #1]
 801ff44:	1ac0      	subeq	r0, r0, r3

}
 801ff46:	4770      	bx	lr

0801ff48 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 801ff48:	8803      	ldrh	r3, [r0, #0]
 801ff4a:	880a      	ldrh	r2, [r1, #0]
 801ff4c:	4293      	cmp	r3, r2
 801ff4e:	bf11      	iteee	ne
 801ff50:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 801ff52:	8840      	ldrheq	r0, [r0, #2]
 801ff54:	884b      	ldrheq	r3, [r1, #2]
 801ff56:	1ac0      	subeq	r0, r0, r3
}
 801ff58:	4770      	bx	lr

0801ff5a <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 801ff5a:	8800      	ldrh	r0, [r0, #0]
 801ff5c:	880b      	ldrh	r3, [r1, #0]
}
 801ff5e:	1ac0      	subs	r0, r0, r3
 801ff60:	4770      	bx	lr
	...

0801ff64 <get_glyph_dsc_id>:
{
 801ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff68:	b084      	sub	sp, #16
    if(letter == '\0') return 0;
 801ff6a:	460d      	mov	r5, r1
 801ff6c:	2900      	cmp	r1, #0
 801ff6e:	d06f      	beq.n	8020050 <get_glyph_dsc_id+0xec>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 801ff70:	6904      	ldr	r4, [r0, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801ff72:	6967      	ldr	r7, [r4, #20]
 801ff74:	2f00      	cmp	r7, #0
 801ff76:	d06f      	beq.n	8020058 <get_glyph_dsc_id+0xf4>
 801ff78:	683b      	ldr	r3, [r7, #0]
 801ff7a:	428b      	cmp	r3, r1
 801ff7c:	d019      	beq.n	801ffb2 <get_glyph_dsc_id+0x4e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801ff7e:	8a62      	ldrh	r2, [r4, #18]
 801ff80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ff84:	b30a      	cbz	r2, 801ffca <get_glyph_dsc_id+0x66>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 801ff86:	f8d4 c008 	ldr.w	ip, [r4, #8]
 801ff8a:	4663      	mov	r3, ip
 801ff8c:	2600      	movs	r6, #0
 801ff8e:	46b0      	mov	r8, r6
 801ff90:	4619      	mov	r1, r3
 801ff92:	f85c 0006 	ldr.w	r0, [ip, r6]
 801ff96:	1a28      	subs	r0, r5, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 801ff98:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 801ff9c:	4586      	cmp	lr, r0
 801ff9e:	d30a      	bcc.n	801ffb6 <get_glyph_dsc_id+0x52>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 801ffa0:	7c9b      	ldrb	r3, [r3, #18]
 801ffa2:	2b02      	cmp	r3, #2
 801ffa4:	d016      	beq.n	801ffd4 <get_glyph_dsc_id+0x70>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 801ffa6:	b9fb      	cbnz	r3, 801ffe8 <get_glyph_dsc_id+0x84>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 801ffa8:	68cb      	ldr	r3, [r1, #12]
 801ffaa:	5c18      	ldrb	r0, [r3, r0]
 801ffac:	88cb      	ldrh	r3, [r1, #6]
 801ffae:	4418      	add	r0, r3
 801ffb0:	e012      	b.n	801ffd8 <get_glyph_dsc_id+0x74>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 801ffb2:	6878      	ldr	r0, [r7, #4]
 801ffb4:	e015      	b.n	801ffe2 <get_glyph_dsc_id+0x7e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 801ffb6:	f108 0801 	add.w	r8, r8, #1
 801ffba:	3614      	adds	r6, #20
 801ffbc:	3314      	adds	r3, #20
 801ffbe:	fa1f f188 	uxth.w	r1, r8
 801ffc2:	428a      	cmp	r2, r1
 801ffc4:	d8e4      	bhi.n	801ff90 <get_glyph_dsc_id+0x2c>
    if(fdsc->cache) {
 801ffc6:	2f00      	cmp	r7, #0
 801ffc8:	d044      	beq.n	8020054 <get_glyph_dsc_id+0xf0>
        fdsc->cache->last_letter = letter;
 801ffca:	603d      	str	r5, [r7, #0]
        fdsc->cache->last_glyph_id = 0;
 801ffcc:	6963      	ldr	r3, [r4, #20]
 801ffce:	2000      	movs	r0, #0
 801ffd0:	6058      	str	r0, [r3, #4]
 801ffd2:	e006      	b.n	801ffe2 <get_glyph_dsc_id+0x7e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 801ffd4:	88cb      	ldrh	r3, [r1, #6]
 801ffd6:	4418      	add	r0, r3
        if(fdsc->cache) {
 801ffd8:	6963      	ldr	r3, [r4, #20]
 801ffda:	b113      	cbz	r3, 801ffe2 <get_glyph_dsc_id+0x7e>
            fdsc->cache->last_letter = letter;
 801ffdc:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 801ffde:	6963      	ldr	r3, [r4, #20]
 801ffe0:	6058      	str	r0, [r3, #4]
}
 801ffe2:	b004      	add	sp, #16
 801ffe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 801ffe8:	2b03      	cmp	r3, #3
 801ffea:	d003      	beq.n	801fff4 <get_glyph_dsc_id+0x90>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 801ffec:	2b01      	cmp	r3, #1
 801ffee:	d018      	beq.n	8020022 <get_glyph_dsc_id+0xbe>
        uint32_t glyph_id = 0;
 801fff0:	2000      	movs	r0, #0
 801fff2:	e7f1      	b.n	801ffd8 <get_glyph_dsc_id+0x74>
            uint16_t key = rcp;
 801fff4:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 801fff8:	8a0a      	ldrh	r2, [r1, #16]
 801fffa:	6889      	ldr	r1, [r1, #8]
 801fffc:	4b1a      	ldr	r3, [pc, #104]	; (8020068 <get_glyph_dsc_id+0x104>)
 801fffe:	9300      	str	r3, [sp, #0]
 8020000:	2302      	movs	r3, #2
 8020002:	f10d 000e 	add.w	r0, sp, #14
 8020006:	f003 ffd2 	bl	8023fae <_lv_utils_bsearch>
            if(p) {
 802000a:	4602      	mov	r2, r0
 802000c:	b138      	cbz	r0, 802001e <get_glyph_dsc_id+0xba>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 802000e:	68a3      	ldr	r3, [r4, #8]
 8020010:	441e      	add	r6, r3
 8020012:	68b0      	ldr	r0, [r6, #8]
 8020014:	1a12      	subs	r2, r2, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8020016:	88f0      	ldrh	r0, [r6, #6]
 8020018:	eb00 0062 	add.w	r0, r0, r2, asr #1
 802001c:	e7dc      	b.n	801ffd8 <get_glyph_dsc_id+0x74>
        uint32_t glyph_id = 0;
 802001e:	2000      	movs	r0, #0
 8020020:	e7da      	b.n	801ffd8 <get_glyph_dsc_id+0x74>
            uint16_t key = rcp;
 8020022:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8020026:	8a0a      	ldrh	r2, [r1, #16]
 8020028:	6889      	ldr	r1, [r1, #8]
 802002a:	4b0f      	ldr	r3, [pc, #60]	; (8020068 <get_glyph_dsc_id+0x104>)
 802002c:	9300      	str	r3, [sp, #0]
 802002e:	2302      	movs	r3, #2
 8020030:	f10d 000e 	add.w	r0, sp, #14
 8020034:	f003 ffbb 	bl	8023fae <_lv_utils_bsearch>
            if(p) {
 8020038:	b140      	cbz	r0, 802004c <get_glyph_dsc_id+0xe8>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 802003a:	68a3      	ldr	r3, [r4, #8]
 802003c:	441e      	add	r6, r3
 802003e:	68b3      	ldr	r3, [r6, #8]
 8020040:	1ac2      	subs	r2, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8020042:	68f3      	ldr	r3, [r6, #12]
 8020044:	5a98      	ldrh	r0, [r3, r2]
 8020046:	88f3      	ldrh	r3, [r6, #6]
 8020048:	4418      	add	r0, r3
 802004a:	e7c5      	b.n	801ffd8 <get_glyph_dsc_id+0x74>
        uint32_t glyph_id = 0;
 802004c:	2000      	movs	r0, #0
 802004e:	e7c3      	b.n	801ffd8 <get_glyph_dsc_id+0x74>
    if(letter == '\0') return 0;
 8020050:	4608      	mov	r0, r1
 8020052:	e7c6      	b.n	801ffe2 <get_glyph_dsc_id+0x7e>
    return 0;
 8020054:	2000      	movs	r0, #0
 8020056:	e7c4      	b.n	801ffe2 <get_glyph_dsc_id+0x7e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8020058:	8a62      	ldrh	r2, [r4, #18]
 802005a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802005e:	2a00      	cmp	r2, #0
 8020060:	d191      	bne.n	801ff86 <get_glyph_dsc_id+0x22>
    return 0;
 8020062:	2000      	movs	r0, #0
 8020064:	e7bd      	b.n	801ffe2 <get_glyph_dsc_id+0x7e>
 8020066:	bf00      	nop
 8020068:	0801ff5b 	.word	0x0801ff5b

0802006c <lv_font_get_bitmap_fmt_txt>:
{
 802006c:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 802006e:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8020070:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8020072:	bf08      	it	eq
 8020074:	2120      	moveq	r1, #32
 8020076:	f7ff ff75 	bl	801ff64 <get_glyph_dsc_id>
    if(!gid) return NULL;
 802007a:	b158      	cbz	r0, 8020094 <lv_font_get_bitmap_fmt_txt+0x28>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 802007c:	7ce3      	ldrb	r3, [r4, #19]
 802007e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8020082:	d109      	bne.n	8020098 <lv_font_get_bitmap_fmt_txt+0x2c>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8020084:	6863      	ldr	r3, [r4, #4]
 8020086:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 802008a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802008e:	6820      	ldr	r0, [r4, #0]
 8020090:	4418      	add	r0, r3
}
 8020092:	bd10      	pop	{r4, pc}
    if(!gid) return NULL;
 8020094:	2000      	movs	r0, #0
 8020096:	e7fc      	b.n	8020092 <lv_font_get_bitmap_fmt_txt+0x26>
        return NULL;
 8020098:	2000      	movs	r0, #0
 802009a:	e7fa      	b.n	8020092 <lv_font_get_bitmap_fmt_txt+0x26>

0802009c <lv_font_get_glyph_dsc_fmt_txt>:
{
 802009c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80200a0:	b085      	sub	sp, #20
 80200a2:	4607      	mov	r7, r0
 80200a4:	460c      	mov	r4, r1
 80200a6:	4698      	mov	r8, r3
    if(unicode_letter == '\t') {
 80200a8:	2a09      	cmp	r2, #9
        is_tab = true;
 80200aa:	bf07      	ittee	eq
 80200ac:	2501      	moveq	r5, #1
        unicode_letter = ' ';
 80200ae:	2120      	moveq	r1, #32
 80200b0:	4611      	movne	r1, r2
    bool is_tab = false;
 80200b2:	2500      	movne	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80200b4:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 80200b6:	f7ff ff55 	bl	801ff64 <get_glyph_dsc_id>
    if(!gid) return false;
 80200ba:	4681      	mov	r9, r0
 80200bc:	2800      	cmp	r0, #0
 80200be:	f000 8089 	beq.w	80201d4 <lv_font_get_glyph_dsc_fmt_txt+0x138>
    if(fdsc->kern_dsc) {
 80200c2:	68f3      	ldr	r3, [r6, #12]
 80200c4:	2b00      	cmp	r3, #0
 80200c6:	d059      	beq.n	802017c <lv_font_get_glyph_dsc_fmt_txt+0xe0>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 80200c8:	4641      	mov	r1, r8
 80200ca:	4638      	mov	r0, r7
 80200cc:	f7ff ff4a 	bl	801ff64 <get_glyph_dsc_id>
        if(gid_next) {
 80200d0:	4603      	mov	r3, r0
 80200d2:	b908      	cbnz	r0, 80200d8 <lv_font_get_glyph_dsc_fmt_txt+0x3c>
    int8_t kvalue = 0;
 80200d4:	2100      	movs	r1, #0
 80200d6:	e052      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 80200d8:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
 80200da:	7cd1      	ldrb	r1, [r2, #19]
 80200dc:	f011 0f20 	tst.w	r1, #32
 80200e0:	d139      	bne.n	8020156 <lv_font_get_glyph_dsc_fmt_txt+0xba>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 80200e2:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
 80200e4:	7afa      	ldrb	r2, [r7, #11]
 80200e6:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
 80200ea:	d003      	beq.n	80200f4 <lv_font_get_glyph_dsc_fmt_txt+0x58>
        else if(kdsc->glyph_ids_size == 1) {
 80200ec:	2a40      	cmp	r2, #64	; 0x40
 80200ee:	d01a      	beq.n	8020126 <lv_font_get_glyph_dsc_fmt_txt+0x8a>
    int8_t value = 0;
 80200f0:	2100      	movs	r1, #0
 80200f2:	e044      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            const uint16_t * g_ids = kdsc->glyph_ids;
 80200f4:	f8d7 8000 	ldr.w	r8, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80200f8:	eb09 2300 	add.w	r3, r9, r0, lsl #8
 80200fc:	f8ad 300c 	strh.w	r3, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8020100:	68ba      	ldr	r2, [r7, #8]
 8020102:	4b38      	ldr	r3, [pc, #224]	; (80201e4 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
 8020104:	9300      	str	r3, [sp, #0]
 8020106:	2302      	movs	r3, #2
 8020108:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 802010c:	4641      	mov	r1, r8
 802010e:	a803      	add	r0, sp, #12
 8020110:	f003 ff4d 	bl	8023fae <_lv_utils_bsearch>
            if(kid_p) {
 8020114:	b128      	cbz	r0, 8020122 <lv_font_get_glyph_dsc_fmt_txt+0x86>
                lv_uintptr_t ofs = kid_p - g_ids;
 8020116:	eba0 0308 	sub.w	r3, r0, r8
 802011a:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 802011c:	687a      	ldr	r2, [r7, #4]
 802011e:	56d1      	ldrsb	r1, [r2, r3]
 8020120:	e02d      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    int8_t value = 0;
 8020122:	2100      	movs	r1, #0
 8020124:	e02b      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            const uint32_t * g_ids = kdsc->glyph_ids;
 8020126:	f8d7 8000 	ldr.w	r8, [r7]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 802012a:	eb09 4300 	add.w	r3, r9, r0, lsl #16
 802012e:	9303      	str	r3, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8020130:	68ba      	ldr	r2, [r7, #8]
 8020132:	4b2d      	ldr	r3, [pc, #180]	; (80201e8 <lv_font_get_glyph_dsc_fmt_txt+0x14c>)
 8020134:	9300      	str	r3, [sp, #0]
 8020136:	2304      	movs	r3, #4
 8020138:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 802013c:	4641      	mov	r1, r8
 802013e:	a803      	add	r0, sp, #12
 8020140:	f003 ff35 	bl	8023fae <_lv_utils_bsearch>
            if(kid_p) {
 8020144:	b128      	cbz	r0, 8020152 <lv_font_get_glyph_dsc_fmt_txt+0xb6>
                lv_uintptr_t ofs = kid_p - g_ids;
 8020146:	eba0 0308 	sub.w	r3, r0, r8
 802014a:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
 802014c:	687a      	ldr	r2, [r7, #4]
 802014e:	56d1      	ldrsb	r1, [r2, r3]
 8020150:	e015      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    int8_t value = 0;
 8020152:	2100      	movs	r1, #0
 8020154:	e013      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8020156:	68d2      	ldr	r2, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8020158:	6851      	ldr	r1, [r2, #4]
 802015a:	f811 1009 	ldrb.w	r1, [r1, r9]
        if(left_class > 0 && right_class > 0) {
 802015e:	2900      	cmp	r1, #0
 8020160:	d034      	beq.n	80201cc <lv_font_get_glyph_dsc_fmt_txt+0x130>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8020162:	6890      	ldr	r0, [r2, #8]
 8020164:	5cc0      	ldrb	r0, [r0, r3]
        if(left_class > 0 && right_class > 0) {
 8020166:	2800      	cmp	r0, #0
 8020168:	d032      	beq.n	80201d0 <lv_font_get_glyph_dsc_fmt_txt+0x134>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 802016a:	3901      	subs	r1, #1
 802016c:	7b57      	ldrb	r7, [r2, #13]
 802016e:	6813      	ldr	r3, [r2, #0]
 8020170:	4403      	add	r3, r0
 8020172:	fb07 3101 	mla	r1, r7, r1, r3
 8020176:	f911 1c01 	ldrsb.w	r1, [r1, #-1]
 802017a:	e000      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    int8_t kvalue = 0;
 802017c:	2100      	movs	r1, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 802017e:	6872      	ldr	r2, [r6, #4]
 8020180:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8020184:	8a33      	ldrh	r3, [r6, #16]
 8020186:	fb01 f303 	mul.w	r3, r1, r3
 802018a:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 802018c:	8851      	ldrh	r1, [r2, #2]
 802018e:	f3c1 110b 	ubfx	r1, r1, #4, #12
    if(is_tab) adv_w *= 2;
 8020192:	b105      	cbz	r5, 8020196 <lv_font_get_glyph_dsc_fmt_txt+0xfa>
 8020194:	0049      	lsls	r1, r1, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8020196:	3308      	adds	r3, #8
 8020198:	440b      	add	r3, r1
 802019a:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 802019c:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 802019e:	7953      	ldrb	r3, [r2, #5]
 80201a0:	8123      	strh	r3, [r4, #8]
    dsc_out->box_w = gdsc->box_w;
 80201a2:	7911      	ldrb	r1, [r2, #4]
 80201a4:	80e1      	strh	r1, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 80201a6:	f992 3006 	ldrsb.w	r3, [r2, #6]
 80201aa:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 80201ac:	f992 3007 	ldrsb.w	r3, [r2, #7]
 80201b0:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 80201b2:	7cf2      	ldrb	r2, [r6, #19]
 80201b4:	f3c2 0243 	ubfx	r2, r2, #1, #4
 80201b8:	7ba3      	ldrb	r3, [r4, #14]
 80201ba:	f362 0303 	bfi	r3, r2, #0, #4
    dsc_out->is_placeholder = false;
 80201be:	f36f 1304 	bfc	r3, #4, #1
 80201c2:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 80201c4:	b15d      	cbz	r5, 80201de <lv_font_get_glyph_dsc_fmt_txt+0x142>
 80201c6:	0049      	lsls	r1, r1, #1
 80201c8:	80e1      	strh	r1, [r4, #6]
 80201ca:	e004      	b.n	80201d6 <lv_font_get_glyph_dsc_fmt_txt+0x13a>
    int8_t value = 0;
 80201cc:	2100      	movs	r1, #0
 80201ce:	e7d6      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
 80201d0:	2100      	movs	r1, #0
 80201d2:	e7d4      	b.n	802017e <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    if(!gid) return false;
 80201d4:	2500      	movs	r5, #0
}
 80201d6:	4628      	mov	r0, r5
 80201d8:	b005      	add	sp, #20
 80201da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return true;
 80201de:	2501      	movs	r5, #1
 80201e0:	e7f9      	b.n	80201d6 <lv_font_get_glyph_dsc_fmt_txt+0x13a>
 80201e2:	bf00      	nop
 80201e4:	0801ff37 	.word	0x0801ff37
 80201e8:	0801ff49 	.word	0x0801ff49

080201ec <_lv_font_clean_up_fmt_txt>:
}
 80201ec:	4770      	bx	lr
	...

080201f0 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80201f0:	b510      	push	{r4, lr}
 80201f2:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80201f4:	2150      	movs	r1, #80	; 0x50
 80201f6:	f001 fdb7 	bl	8021d68 <lv_memset_00>

    driver->hor_res          = 320;
 80201fa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80201fe:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = 240;
 8020200:	23f0      	movs	r3, #240	; 0xf0
 8020202:	8063      	strh	r3, [r4, #2]
    driver->physical_hor_res = -1;
 8020204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020208:	80a3      	strh	r3, [r4, #4]
    driver->physical_ver_res = -1;
 802020a:	80e3      	strh	r3, [r4, #6]
    driver->offset_x         = 0;
 802020c:	2200      	movs	r2, #0
 802020e:	8122      	strh	r2, [r4, #8]
    driver->offset_y         = 0;
 8020210:	8162      	strh	r2, [r4, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8020212:	7c23      	ldrb	r3, [r4, #16]
    driver->screen_transp    = 0;
 8020214:	f043 0308 	orr.w	r3, r3, #8
 8020218:	f362 1386 	bfi	r3, r2, #6, #1
 802021c:	7423      	strb	r3, [r4, #16]
    driver->dpi              = LV_DPI_DEF;
 802021e:	6923      	ldr	r3, [r4, #16]
 8020220:	2282      	movs	r2, #130	; 0x82
 8020222:	f362 13d0 	bfi	r3, r2, #7, #10
 8020226:	6123      	str	r3, [r4, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 8020228:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 802022c:	8723      	strh	r3, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 802022e:	4b03      	ldr	r3, [pc, #12]	; (802023c <lv_disp_drv_init+0x4c>)
 8020230:	6423      	str	r3, [r4, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 8020232:	6463      	str	r3, [r4, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 8020234:	2358      	movs	r3, #88	; 0x58
 8020236:	64a3      	str	r3, [r4, #72]	; 0x48
#endif

}
 8020238:	bd10      	pop	{r4, pc}
 802023a:	bf00      	nop
 802023c:	0800fc95 	.word	0x0800fc95

08020240 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8020240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020242:	4604      	mov	r4, r0
 8020244:	460d      	mov	r5, r1
 8020246:	4617      	mov	r7, r2
 8020248:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 802024a:	211c      	movs	r1, #28
 802024c:	f001 fd8c 	bl	8021d68 <lv_memset_00>

    draw_buf->buf1    = buf1;
 8020250:	6025      	str	r5, [r4, #0]
    draw_buf->buf2    = buf2;
 8020252:	6067      	str	r7, [r4, #4]
    draw_buf->buf_act = draw_buf->buf1;
 8020254:	60a5      	str	r5, [r4, #8]
    draw_buf->size    = size_in_px_cnt;
 8020256:	60e6      	str	r6, [r4, #12]
}
 8020258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802025c <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 802025c:	b570      	push	{r4, r5, r6, lr}
 802025e:	b082      	sub	sp, #8
 8020260:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8020262:	484d      	ldr	r0, [pc, #308]	; (8020398 <lv_disp_drv_register+0x13c>)
 8020264:	f001 f949 	bl	80214fa <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(disp);
 8020268:	2800      	cmp	r0, #0
 802026a:	d07f      	beq.n	802036c <lv_disp_drv_register+0x110>
 802026c:	4604      	mov	r4, r0
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 802026e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020270:	2b00      	cmp	r3, #0
 8020272:	d07c      	beq.n	802036e <lv_disp_drv_register+0x112>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
        driver->draw_ctx = draw_ctx;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 8020274:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8020278:	4620      	mov	r0, r4
 802027a:	f001 fd75 	bl	8021d68 <lv_memset_00>

    disp->driver = driver;
 802027e:	6025      	str	r5, [r4, #0]

    disp->inv_en_cnt = 1;
 8020280:	2301      	movs	r3, #1
 8020282:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 8020286:	4b45      	ldr	r3, [pc, #276]	; (802039c <lv_disp_drv_register+0x140>)
 8020288:	681e      	ldr	r6, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 802028a:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 802028c:	4622      	mov	r2, r4
 802028e:	2128      	movs	r1, #40	; 0x28
 8020290:	4843      	ldr	r0, [pc, #268]	; (80203a0 <lv_disp_drv_register+0x144>)
 8020292:	f002 fe91 	bl	8022fb8 <lv_timer_create>
 8020296:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 8020298:	2800      	cmp	r0, #0
 802029a:	d074      	beq.n	8020386 <lv_disp_drv_register+0x12a>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 802029c:	7c2b      	ldrb	r3, [r5, #16]
 802029e:	f013 0f02 	tst.w	r3, #2
 80202a2:	d00d      	beq.n	80202c0 <lv_disp_drv_register+0x64>
 80202a4:	68ea      	ldr	r2, [r5, #12]
 80202a6:	f9b5 3000 	ldrsh.w	r3, [r5]
 80202aa:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80202ae:	fb01 f303 	mul.w	r3, r1, r3
 80202b2:	68d2      	ldr	r2, [r2, #12]
 80202b4:	429a      	cmp	r2, r3
 80202b6:	d203      	bcs.n	80202c0 <lv_disp_drv_register+0x64>
        driver->full_refresh = 0;
 80202b8:	7c2b      	ldrb	r3, [r5, #16]
 80202ba:	f36f 0341 	bfc	r3, #1, #1
 80202be:	742b      	strb	r3, [r5, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 80202c0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80202c4:	f043 031f 	orr.w	r3, r3, #31
 80202c8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 80202cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80202ce:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 80202d2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80202d4:	23ff      	movs	r3, #255	; 0xff
 80202d6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 80202da:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 80202de:	f7fb fa7b 	bl	801b7d8 <lv_theme_default_is_inited>
 80202e2:	2800      	cmp	r0, #0
 80202e4:	d150      	bne.n	8020388 <lv_disp_drv_register+0x12c>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED),
 80202e6:	2005      	movs	r0, #5
 80202e8:	f000 ff02 	bl	80210f0 <lv_palette_main>
 80202ec:	4605      	mov	r5, r0
 80202ee:	2000      	movs	r0, #0
 80202f0:	f000 fefe 	bl	80210f0 <lv_palette_main>
 80202f4:	4602      	mov	r2, r0
 80202f6:	4b2b      	ldr	r3, [pc, #172]	; (80203a4 <lv_disp_drv_register+0x148>)
 80202f8:	9300      	str	r3, [sp, #0]
 80202fa:	2300      	movs	r3, #0
 80202fc:	4629      	mov	r1, r5
 80202fe:	4620      	mov	r0, r4
 8020300:	f7f8 f962 	bl	80185c8 <lv_theme_default_init>
 8020304:	60a0      	str	r0, [r4, #8]
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 8020306:	2000      	movs	r0, #0
 8020308:	f7e6 fac6 	bl	8006898 <lv_obj_create>
 802030c:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 802030e:	2000      	movs	r0, #0
 8020310:	f7e6 fac2 	bl	8006898 <lv_obj_create>
 8020314:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 8020316:	2000      	movs	r0, #0
 8020318:	f7e6 fabe 	bl	8006898 <lv_obj_create>
 802031c:	6220      	str	r0, [r4, #32]
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 802031e:	4d22      	ldr	r5, [pc, #136]	; (80203a8 <lv_disp_drv_register+0x14c>)
 8020320:	462a      	mov	r2, r5
 8020322:	2100      	movs	r1, #0
 8020324:	69e0      	ldr	r0, [r4, #28]
 8020326:	f7ea fd55 	bl	800add4 <lv_obj_remove_style>
 802032a:	462a      	mov	r2, r5
 802032c:	2100      	movs	r1, #0
 802032e:	6a20      	ldr	r0, [r4, #32]
 8020330:	f7ea fd50 	bl	800add4 <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 8020334:	2102      	movs	r1, #2
 8020336:	69e0      	ldr	r0, [r4, #28]
 8020338:	f7e6 faf4 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 802033c:	2102      	movs	r1, #2
 802033e:	6a20      	ldr	r0, [r4, #32]
 8020340:	f7e6 faf0 	bl	8006924 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 8020344:	2100      	movs	r1, #0
 8020346:	69e0      	ldr	r0, [r4, #28]
 8020348:	f7e8 ff57 	bl	80091fa <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 802034c:	2100      	movs	r1, #0
 802034e:	6a20      	ldr	r0, [r4, #32]
 8020350:	f7e8 ff53 	bl	80091fa <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 8020354:	6920      	ldr	r0, [r4, #16]
 8020356:	f7e7 fe0f 	bl	8007f78 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 802035a:	b1ce      	cbz	r6, 8020390 <lv_disp_drv_register+0x134>
    disp_def = disp_def_tmp; /*Revert the default display*/
 802035c:	4b0f      	ldr	r3, [pc, #60]	; (802039c <lv_disp_drv_register+0x140>)
 802035e:	601e      	str	r6, [r3, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8020360:	6860      	ldr	r0, [r4, #4]
 8020362:	f002 ff49 	bl	80231f8 <lv_timer_ready>

    return disp;
}
 8020366:	4620      	mov	r0, r4
 8020368:	b002      	add	sp, #8
 802036a:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(disp);
 802036c:	e7fe      	b.n	802036c <lv_disp_drv_register+0x110>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 802036e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8020370:	f001 fa7a 	bl	8021868 <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 8020374:	4606      	mov	r6, r0
 8020376:	b128      	cbz	r0, 8020384 <lv_disp_drv_register+0x128>
        driver->draw_ctx_init(driver, draw_ctx);
 8020378:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 802037a:	4601      	mov	r1, r0
 802037c:	4628      	mov	r0, r5
 802037e:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8020380:	63ee      	str	r6, [r5, #60]	; 0x3c
 8020382:	e777      	b.n	8020274 <lv_disp_drv_register+0x18>
        LV_ASSERT_MALLOC(draw_ctx);
 8020384:	e7fe      	b.n	8020384 <lv_disp_drv_register+0x128>
    LV_ASSERT_MALLOC(disp->refr_timer);
 8020386:	e7fe      	b.n	8020386 <lv_disp_drv_register+0x12a>
        disp->theme = lv_theme_default_get();
 8020388:	f7fb fa1a 	bl	801b7c0 <lv_theme_default_get>
 802038c:	60a0      	str	r0, [r4, #8]
 802038e:	e7ba      	b.n	8020306 <lv_disp_drv_register+0xaa>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8020390:	4b02      	ldr	r3, [pc, #8]	; (802039c <lv_disp_drv_register+0x140>)
 8020392:	601c      	str	r4, [r3, #0]
 8020394:	e7e4      	b.n	8020360 <lv_disp_drv_register+0x104>
 8020396:	bf00      	nop
 8020398:	200027dc 	.word	0x200027dc
 802039c:	20002748 	.word	0x20002748
 80203a0:	0800c71d 	.word	0x0800c71d
 80203a4:	08030d78 	.word	0x08030d78
 80203a8:	000fffff 	.word	0x000fffff

080203ac <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 80203ac:	4b01      	ldr	r3, [pc, #4]	; (80203b4 <lv_disp_get_default+0x8>)
 80203ae:	6818      	ldr	r0, [r3, #0]
 80203b0:	4770      	bx	lr
 80203b2:	bf00      	nop
 80203b4:	20002748 	.word	0x20002748

080203b8 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80203b8:	4603      	mov	r3, r0
 80203ba:	b148      	cbz	r0, 80203d0 <lv_disp_get_hor_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 80203bc:	681b      	ldr	r3, [r3, #0]
 80203be:	7c1a      	ldrb	r2, [r3, #16]
 80203c0:	f012 0f10 	tst.w	r2, #16
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 80203c4:	bf14      	ite	ne
 80203c6:	f9b3 0002 	ldrshne.w	r0, [r3, #2]
            default:
                return disp->driver->hor_res;
 80203ca:	f9b3 0000 	ldrsheq.w	r0, [r3]
 80203ce:	4770      	bx	lr
    return disp_def;
 80203d0:	4b02      	ldr	r3, [pc, #8]	; (80203dc <lv_disp_get_hor_res+0x24>)
 80203d2:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	d1f1      	bne.n	80203bc <lv_disp_get_hor_res+0x4>
        return 0;
 80203d8:	2000      	movs	r0, #0
        }
    }
}
 80203da:	4770      	bx	lr
 80203dc:	20002748 	.word	0x20002748

080203e0 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 80203e0:	4603      	mov	r3, r0
 80203e2:	b148      	cbz	r0, 80203f8 <lv_disp_get_ver_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	7c1a      	ldrb	r2, [r3, #16]
 80203e8:	f012 0f10 	tst.w	r2, #16
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 80203ec:	bf14      	ite	ne
 80203ee:	f9b3 0000 	ldrshne.w	r0, [r3]
            default:
                return disp->driver->ver_res;
 80203f2:	f9b3 0002 	ldrsheq.w	r0, [r3, #2]
 80203f6:	4770      	bx	lr
    return disp_def;
 80203f8:	4b02      	ldr	r3, [pc, #8]	; (8020404 <lv_disp_get_ver_res+0x24>)
 80203fa:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 80203fc:	2b00      	cmp	r3, #0
 80203fe:	d1f1      	bne.n	80203e4 <lv_disp_get_ver_res+0x4>
        return 0;
 8020400:	2000      	movs	r0, #0
        }
    }
}
 8020402:	4770      	bx	lr
 8020404:	20002748 	.word	0x20002748

08020408 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8020408:	4603      	mov	r3, r0
 802040a:	b120      	cbz	r0, 8020416 <lv_disp_get_dpi+0xe>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
    return disp->driver->dpi;
 802040c:	681b      	ldr	r3, [r3, #0]
 802040e:	6918      	ldr	r0, [r3, #16]
 8020410:	f3c0 10c9 	ubfx	r0, r0, #7, #10
 8020414:	4770      	bx	lr
    return disp_def;
 8020416:	4b03      	ldr	r3, [pc, #12]	; (8020424 <lv_disp_get_dpi+0x1c>)
 8020418:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 802041a:	2b00      	cmp	r3, #0
 802041c:	d1f6      	bne.n	802040c <lv_disp_get_dpi+0x4>
 802041e:	2082      	movs	r0, #130	; 0x82
}
 8020420:	4770      	bx	lr
 8020422:	bf00      	nop
 8020424:	20002748 	.word	0x20002748

08020428 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->draw_buf->flushing = 0;
 8020428:	68c2      	ldr	r2, [r0, #12]
 802042a:	2300      	movs	r3, #0
 802042c:	6113      	str	r3, [r2, #16]
    disp_drv->draw_buf->flushing_last = 0;
 802042e:	68c2      	ldr	r2, [r0, #12]
 8020430:	6153      	str	r3, [r2, #20]
}
 8020432:	4770      	bx	lr

08020434 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 8020434:	b508      	push	{r3, lr}
    if(disp == NULL)
 8020436:	b120      	cbz	r0, 8020442 <lv_disp_get_next+0xe>
 8020438:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 802043a:	4804      	ldr	r0, [pc, #16]	; (802044c <lv_disp_get_next+0x18>)
 802043c:	f001 f8e6 	bl	802160c <_lv_ll_get_next>
}
 8020440:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8020442:	4802      	ldr	r0, [pc, #8]	; (802044c <lv_disp_get_next+0x18>)
 8020444:	f001 f8da 	bl	80215fc <_lv_ll_get_head>
 8020448:	e7fa      	b.n	8020440 <lv_disp_get_next+0xc>
 802044a:	bf00      	nop
 802044c:	200027dc 	.word	0x200027dc

08020450 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8020450:	6803      	ldr	r3, [r0, #0]
}
 8020452:	68d8      	ldr	r0, [r3, #12]
 8020454:	4770      	bx	lr

08020456 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8020456:	b510      	push	{r4, lr}
 8020458:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 802045a:	2120      	movs	r1, #32
 802045c:	f001 fc84 	bl	8021d68 <lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8020460:	2300      	movs	r3, #0
 8020462:	7023      	strb	r3, [r4, #0]
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
 8020464:	230a      	movs	r3, #10
 8020466:	7623      	strb	r3, [r4, #24]
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
 8020468:	7663      	strb	r3, [r4, #25]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 802046a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802046e:	83a3      	strh	r3, [r4, #28]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 8020470:	2364      	movs	r3, #100	; 0x64
 8020472:	83e3      	strh	r3, [r4, #30]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 8020474:	2332      	movs	r3, #50	; 0x32
 8020476:	76e3      	strb	r3, [r4, #27]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
 8020478:	2303      	movs	r3, #3
 802047a:	76a3      	strb	r3, [r4, #26]
}
 802047c:	bd10      	pop	{r4, pc}
	...

08020480 <lv_indev_drv_register>:
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable.
 * Only pointer is saved, so the driver should be static or dynamically allocated.
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 8020480:	b538      	push	{r3, r4, r5, lr}
 8020482:	4604      	mov	r4, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8020484:	6903      	ldr	r3, [r0, #16]
 8020486:	b1a3      	cbz	r3, 80204b2 <lv_indev_drv_register+0x32>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8020488:	480e      	ldr	r0, [pc, #56]	; (80204c4 <lv_indev_drv_register+0x44>)
 802048a:	f001 f836 	bl	80214fa <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(indev);
 802048e:	4605      	mov	r5, r0
 8020490:	b1b0      	cbz	r0, 80204c0 <lv_indev_drv_register+0x40>
    if(!indev) {
        return NULL;
    }

    lv_memset_00(indev, sizeof(lv_indev_t));
 8020492:	215c      	movs	r1, #92	; 0x5c
 8020494:	f001 fc68 	bl	8021d68 <lv_memset_00>
    indev->driver = driver;
 8020498:	602c      	str	r4, [r5, #0]

    indev->proc.reset_query  = 1;
 802049a:	796b      	ldrb	r3, [r5, #5]
 802049c:	f043 0302 	orr.w	r3, r3, #2
 80204a0:	716b      	strb	r3, [r5, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 80204a2:	462a      	mov	r2, r5
 80204a4:	211e      	movs	r1, #30
 80204a6:	4808      	ldr	r0, [pc, #32]	; (80204c8 <lv_indev_drv_register+0x48>)
 80204a8:	f002 fd86 	bl	8022fb8 <lv_timer_create>
 80204ac:	6160      	str	r0, [r4, #20]

    return indev;
}
 80204ae:	4628      	mov	r0, r5
 80204b0:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 80204b2:	f7ff ff7b 	bl	80203ac <lv_disp_get_default>
 80204b6:	4605      	mov	r5, r0
 80204b8:	6120      	str	r0, [r4, #16]
    if(driver->disp == NULL) {
 80204ba:	2800      	cmp	r0, #0
 80204bc:	d0f7      	beq.n	80204ae <lv_indev_drv_register+0x2e>
 80204be:	e7e3      	b.n	8020488 <lv_indev_drv_register+0x8>
    LV_ASSERT_MALLOC(indev);
 80204c0:	e7fe      	b.n	80204c0 <lv_indev_drv_register+0x40>
 80204c2:	bf00      	nop
 80204c4:	200028bc 	.word	0x200028bc
 80204c8:	08004ab9 	.word	0x08004ab9

080204cc <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 80204cc:	b508      	push	{r3, lr}
    if(indev == NULL)
 80204ce:	b120      	cbz	r0, 80204da <lv_indev_get_next+0xe>
 80204d0:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 80204d2:	4804      	ldr	r0, [pc, #16]	; (80204e4 <lv_indev_get_next+0x18>)
 80204d4:	f001 f89a 	bl	802160c <_lv_ll_get_next>
}
 80204d8:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 80204da:	4802      	ldr	r0, [pc, #8]	; (80204e4 <lv_indev_get_next+0x18>)
 80204dc:	f001 f88e 	bl	80215fc <_lv_ll_get_head>
 80204e0:	e7fa      	b.n	80204d8 <lv_indev_get_next+0xc>
 80204e2:	bf00      	nop
 80204e4:	200028bc 	.word	0x200028bc

080204e8 <_lv_indev_read>:
 * Read data from an input device.
 * @param indev pointer to an input device
 * @param data input device will write its data here
 */
void _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 80204e8:	b538      	push	{r3, r4, r5, lr}
 80204ea:	4604      	mov	r4, r0
 80204ec:	460d      	mov	r5, r1
    lv_memset_00(data, sizeof(lv_indev_data_t));
 80204ee:	2110      	movs	r1, #16
 80204f0:	4628      	mov	r0, r5
 80204f2:	f001 fc39 	bl	8021d68 <lv_memset_00>

    /* For touchpad sometimes users don't set the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver->type == LV_INDEV_TYPE_POINTER) {
 80204f6:	6823      	ldr	r3, [r4, #0]
 80204f8:	781b      	ldrb	r3, [r3, #0]
 80204fa:	2b01      	cmp	r3, #1
 80204fc:	d00b      	beq.n	8020516 <_lv_indev_read+0x2e>
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80204fe:	2b02      	cmp	r3, #2
 8020500:	d010      	beq.n	8020524 <_lv_indev_read+0x3c>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push)*/
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 8020502:	2b04      	cmp	r3, #4
        data->key = LV_KEY_ENTER;
 8020504:	bf04      	itt	eq
 8020506:	230a      	moveq	r3, #10
 8020508:	606b      	streq	r3, [r5, #4]
    }

    if(indev->driver->read_cb) {
 802050a:	6820      	ldr	r0, [r4, #0]
 802050c:	6843      	ldr	r3, [r0, #4]
 802050e:	b10b      	cbz	r3, 8020514 <_lv_indev_read+0x2c>
        INDEV_TRACE("calling indev_read_cb");
        indev->driver->read_cb(indev->driver, data);
 8020510:	4629      	mov	r1, r5
 8020512:	4798      	blx	r3
    }
    else {
        LV_LOG_WARN("indev_read_cb is not registered");
    }
}
 8020514:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
 8020516:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 802051a:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
 802051c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8020520:	806b      	strh	r3, [r5, #2]
 8020522:	e7f2      	b.n	802050a <_lv_indev_read+0x22>
        data->key = indev->proc.types.keypad.last_key;
 8020524:	68e3      	ldr	r3, [r4, #12]
 8020526:	606b      	str	r3, [r5, #4]
 8020528:	e7ef      	b.n	802050a <_lv_indev_read+0x22>

0802052a <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 802052a:	b508      	push	{r3, lr}
        result        = sys_time;
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
 802052c:	f7e0 fd96 	bl	800105c <HAL_GetTick>
#endif
}
 8020530:	bd08      	pop	{r3, pc}

08020532 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8020532:	b510      	push	{r4, lr}
 8020534:	4604      	mov	r4, r0
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
 8020536:	f7e0 fd91 	bl	800105c <HAL_GetTick>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 802053a:	1b00      	subs	r0, r0, r4
 802053c:	bd10      	pop	{r4, pc}
	...

08020540 <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 8020540:	b508      	push	{r3, lr}
    anim_list_changed = true;
 8020542:	4b08      	ldr	r3, [pc, #32]	; (8020564 <anim_mark_list_change+0x24>)
 8020544:	2201      	movs	r2, #1
 8020546:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8020548:	4807      	ldr	r0, [pc, #28]	; (8020568 <anim_mark_list_change+0x28>)
 802054a:	f001 f857 	bl	80215fc <_lv_ll_get_head>
 802054e:	b120      	cbz	r0, 802055a <anim_mark_list_change+0x1a>
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
 8020550:	4b06      	ldr	r3, [pc, #24]	; (802056c <anim_mark_list_change+0x2c>)
 8020552:	6818      	ldr	r0, [r3, #0]
 8020554:	f002 fe4b 	bl	80231ee <lv_timer_resume>
}
 8020558:	bd08      	pop	{r3, pc}
        lv_timer_pause(_lv_anim_tmr);
 802055a:	4b04      	ldr	r3, [pc, #16]	; (802056c <anim_mark_list_change+0x2c>)
 802055c:	6818      	ldr	r0, [r3, #0]
 802055e:	f002 fe41 	bl	80231e4 <lv_timer_pause>
 8020562:	e7f9      	b.n	8020558 <anim_mark_list_change+0x18>
 8020564:	20002750 	.word	0x20002750
 8020568:	20002760 	.word	0x20002760
 802056c:	2000274c 	.word	0x2000274c

08020570 <anim_timer>:
{
 8020570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8020574:	4b64      	ldr	r3, [pc, #400]	; (8020708 <anim_timer+0x198>)
 8020576:	6818      	ldr	r0, [r3, #0]
 8020578:	f7ff ffdb 	bl	8020532 <lv_tick_elaps>
 802057c:	4606      	mov	r6, r0
    anim_run_round = anim_run_round ? false : true;
 802057e:	4a63      	ldr	r2, [pc, #396]	; (802070c <anim_timer+0x19c>)
 8020580:	7813      	ldrb	r3, [r2, #0]
 8020582:	f083 0301 	eor.w	r3, r3, #1
 8020586:	7013      	strb	r3, [r2, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8020588:	4861      	ldr	r0, [pc, #388]	; (8020710 <anim_timer+0x1a0>)
 802058a:	f001 f837 	bl	80215fc <_lv_ll_get_head>
    while(a != NULL) {
 802058e:	2800      	cmp	r0, #0
 8020590:	f000 809e 	beq.w	80206d0 <anim_timer+0x160>
 8020594:	4604      	mov	r4, r0
        anim_list_changed = false;
 8020596:	4d5f      	ldr	r5, [pc, #380]	; (8020714 <anim_timer+0x1a4>)
 8020598:	f04f 0900 	mov.w	r9, #0
        if(a->run_round != anim_run_round) {
 802059c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 802070c <anim_timer+0x19c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80205a0:	4f5b      	ldr	r7, [pc, #364]	; (8020710 <anim_timer+0x1a0>)
 80205a2:	e027      	b.n	80205f4 <anim_timer+0x84>
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 80205a4:	199b      	adds	r3, r3, r6
 80205a6:	f100 8099 	bmi.w	80206dc <anim_timer+0x16c>
                if(a->early_apply == 0 && a->get_value_cb) {
 80205aa:	f012 0f01 	tst.w	r2, #1
 80205ae:	d109      	bne.n	80205c4 <anim_timer+0x54>
 80205b0:	6963      	ldr	r3, [r4, #20]
 80205b2:	b13b      	cbz	r3, 80205c4 <anim_timer+0x54>
                    int32_t v_ofs = a->get_value_cb(a);
 80205b4:	4620      	mov	r0, r4
 80205b6:	4798      	blx	r3
                    a->start_value += v_ofs;
 80205b8:	6a23      	ldr	r3, [r4, #32]
 80205ba:	4403      	add	r3, r0
 80205bc:	6223      	str	r3, [r4, #32]
                    a->end_value += v_ofs;
 80205be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80205c0:	4418      	add	r0, r3
 80205c2:	62a0      	str	r0, [r4, #40]	; 0x28
                if(a->start_cb) a->start_cb(a);
 80205c4:	68a3      	ldr	r3, [r4, #8]
 80205c6:	b10b      	cbz	r3, 80205cc <anim_timer+0x5c>
 80205c8:	4620      	mov	r0, r4
 80205ca:	4798      	blx	r3
                a->start_cb_called = 1;
 80205cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80205d0:	f043 0308 	orr.w	r3, r3, #8
 80205d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80205d8:	e023      	b.n	8020622 <anim_timer+0xb2>
                if(a->act_time >= a->time) {
 80205da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80205dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80205de:	429a      	cmp	r2, r3
 80205e0:	da36      	bge.n	8020650 <anim_timer+0xe0>
        if(anim_list_changed)
 80205e2:	782b      	ldrb	r3, [r5, #0]
 80205e4:	2b00      	cmp	r3, #0
 80205e6:	d07a      	beq.n	80206de <anim_timer+0x16e>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80205e8:	4638      	mov	r0, r7
 80205ea:	f001 f807 	bl	80215fc <_lv_ll_get_head>
 80205ee:	4604      	mov	r4, r0
    while(a != NULL) {
 80205f0:	2c00      	cmp	r4, #0
 80205f2:	d06d      	beq.n	80206d0 <anim_timer+0x160>
        anim_list_changed = false;
 80205f4:	f885 9000 	strb.w	r9, [r5]
        if(a->run_round != anim_run_round) {
 80205f8:	f898 2000 	ldrb.w	r2, [r8]
 80205fc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020600:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8020604:	4293      	cmp	r3, r2
 8020606:	d06a      	beq.n	80206de <anim_timer+0x16e>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8020608:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 802060c:	f362 0382 	bfi	r3, r2, #2, #1
 8020610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8020614:	b2da      	uxtb	r2, r3
 8020616:	f013 0f08 	tst.w	r3, #8
 802061a:	d102      	bne.n	8020622 <anim_timer+0xb2>
            int32_t new_act_time = a->act_time + elaps;
 802061c:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 802061e:	2b00      	cmp	r3, #0
 8020620:	ddc0      	ble.n	80205a4 <anim_timer+0x34>
            a->act_time += elaps;
 8020622:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020624:	4433      	add	r3, r6
 8020626:	6323      	str	r3, [r4, #48]	; 0x30
            if(a->act_time >= 0) {
 8020628:	2b00      	cmp	r3, #0
 802062a:	dbda      	blt.n	80205e2 <anim_timer+0x72>
                if(a->act_time > a->time) a->act_time = a->time;
 802062c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802062e:	4293      	cmp	r3, r2
 8020630:	bfc8      	it	gt
 8020632:	6322      	strgt	r2, [r4, #48]	; 0x30
                new_value = a->path_cb(a);
 8020634:	69e3      	ldr	r3, [r4, #28]
 8020636:	4620      	mov	r0, r4
 8020638:	4798      	blx	r3
                if(new_value != a->current_value) {
 802063a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802063c:	4283      	cmp	r3, r0
 802063e:	d0cc      	beq.n	80205da <anim_timer+0x6a>
                    a->current_value = new_value;
 8020640:	6260      	str	r0, [r4, #36]	; 0x24
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8020642:	6863      	ldr	r3, [r4, #4]
 8020644:	2b00      	cmp	r3, #0
 8020646:	d0c8      	beq.n	80205da <anim_timer+0x6a>
 8020648:	4601      	mov	r1, r0
 802064a:	6820      	ldr	r0, [r4, #0]
 802064c:	4798      	blx	r3
 802064e:	e7c4      	b.n	80205da <anim_timer+0x6a>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8020650:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8020654:	f012 0202 	ands.w	r2, r2, #2
 8020658:	d10a      	bne.n	8020670 <anim_timer+0x100>
 802065a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 802065e:	2900      	cmp	r1, #0
 8020660:	d043      	beq.n	80206ea <anim_timer+0x17a>
 8020662:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8020666:	4281      	cmp	r1, r0
 8020668:	d046      	beq.n	80206f8 <anim_timer+0x188>
        a->repeat_cnt--;
 802066a:	3901      	subs	r1, #1
 802066c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8020670:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8020674:	b1b9      	cbz	r1, 80206a6 <anim_timer+0x136>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8020676:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8020678:	4249      	negs	r1, r1
 802067a:	6321      	str	r1, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 802067c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802067e:	2900      	cmp	r1, #0
 8020680:	d0af      	beq.n	80205e2 <anim_timer+0x72>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8020682:	2a00      	cmp	r2, #0
 8020684:	d034      	beq.n	80206f0 <anim_timer+0x180>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8020686:	fab2 f282 	clz	r2, r2
 802068a:	0952      	lsrs	r2, r2, #5
 802068c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
 8020690:	f362 0041 	bfi	r0, r2, #1, #1
 8020694:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
            int32_t tmp    = a->start_value;
 8020698:	6a22      	ldr	r2, [r4, #32]
            a->start_value = a->end_value;
 802069a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802069c:	6220      	str	r0, [r4, #32]
            a->end_value   = tmp;
 802069e:	62a2      	str	r2, [r4, #40]	; 0x28
            a->time = a->playback_time;
 80206a0:	62e1      	str	r1, [r4, #44]	; 0x2c
            a->playback_time = tmp;
 80206a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80206a4:	e79d      	b.n	80205e2 <anim_timer+0x72>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80206a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80206a8:	b101      	cbz	r1, 80206ac <anim_timer+0x13c>
 80206aa:	b30a      	cbz	r2, 80206f0 <anim_timer+0x180>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80206ac:	4621      	mov	r1, r4
 80206ae:	4638      	mov	r0, r7
 80206b0:	f000 ff61 	bl	8021576 <_lv_ll_remove>
        anim_mark_list_change();
 80206b4:	f7ff ff44 	bl	8020540 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 80206b8:	68e3      	ldr	r3, [r4, #12]
 80206ba:	b10b      	cbz	r3, 80206c0 <anim_timer+0x150>
 80206bc:	4620      	mov	r0, r4
 80206be:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 80206c0:	6923      	ldr	r3, [r4, #16]
 80206c2:	b10b      	cbz	r3, 80206c8 <anim_timer+0x158>
 80206c4:	4620      	mov	r0, r4
 80206c6:	4798      	blx	r3
        lv_mem_free(a);
 80206c8:	4620      	mov	r0, r4
 80206ca:	f001 f8eb 	bl	80218a4 <lv_mem_free>
 80206ce:	e788      	b.n	80205e2 <anim_timer+0x72>
    last_timer_run = lv_tick_get();
 80206d0:	f7ff ff2b 	bl	802052a <lv_tick_get>
 80206d4:	4b0c      	ldr	r3, [pc, #48]	; (8020708 <anim_timer+0x198>)
 80206d6:	6018      	str	r0, [r3, #0]
}
 80206d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            a->act_time += elaps;
 80206dc:	6323      	str	r3, [r4, #48]	; 0x30
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80206de:	4621      	mov	r1, r4
 80206e0:	4638      	mov	r0, r7
 80206e2:	f000 ff93 	bl	802160c <_lv_ll_get_next>
 80206e6:	4604      	mov	r4, r0
 80206e8:	e782      	b.n	80205f0 <anim_timer+0x80>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 80206ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80206ec:	2900      	cmp	r1, #0
 80206ee:	d0dd      	beq.n	80206ac <anim_timer+0x13c>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 80206f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80206f2:	4240      	negs	r0, r0
 80206f4:	6320      	str	r0, [r4, #48]	; 0x30
 80206f6:	e7c6      	b.n	8020686 <anim_timer+0x116>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 80206f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80206fa:	4249      	negs	r1, r1
 80206fc:	6321      	str	r1, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 80206fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020700:	2900      	cmp	r1, #0
 8020702:	f43f af6e 	beq.w	80205e2 <anim_timer+0x72>
 8020706:	e7f3      	b.n	80206f0 <anim_timer+0x180>
 8020708:	20002754 	.word	0x20002754
 802070c:	20002751 	.word	0x20002751
 8020710:	20002760 	.word	0x20002760
 8020714:	20002750 	.word	0x20002750

08020718 <lv_anim_path_linear>:
{
 8020718:	b510      	push	{r4, lr}
 802071a:	b082      	sub	sp, #8
 802071c:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 802071e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020722:	9300      	str	r3, [sp, #0]
 8020724:	2300      	movs	r3, #0
 8020726:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8020728:	4619      	mov	r1, r3
 802072a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802072c:	f001 f86c 	bl	8021808 <lv_map>
    new_value = step * (a->end_value - a->start_value);
 8020730:	6a22      	ldr	r2, [r4, #32]
 8020732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020734:	1a9b      	subs	r3, r3, r2
 8020736:	fb03 f000 	mul.w	r0, r3, r0
}
 802073a:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 802073e:	b002      	add	sp, #8
 8020740:	bd10      	pop	{r4, pc}
	...

08020744 <_lv_anim_core_init>:
{
 8020744:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8020746:	2144      	movs	r1, #68	; 0x44
 8020748:	4807      	ldr	r0, [pc, #28]	; (8020768 <_lv_anim_core_init+0x24>)
 802074a:	f000 fece 	bl	80214ea <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 802074e:	2200      	movs	r2, #0
 8020750:	2128      	movs	r1, #40	; 0x28
 8020752:	4806      	ldr	r0, [pc, #24]	; (802076c <_lv_anim_core_init+0x28>)
 8020754:	f002 fc30 	bl	8022fb8 <lv_timer_create>
 8020758:	4b05      	ldr	r3, [pc, #20]	; (8020770 <_lv_anim_core_init+0x2c>)
 802075a:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 802075c:	f7ff fef0 	bl	8020540 <anim_mark_list_change>
    anim_list_changed = false;
 8020760:	4b04      	ldr	r3, [pc, #16]	; (8020774 <_lv_anim_core_init+0x30>)
 8020762:	2200      	movs	r2, #0
 8020764:	701a      	strb	r2, [r3, #0]
}
 8020766:	bd08      	pop	{r3, pc}
 8020768:	20002760 	.word	0x20002760
 802076c:	08020571 	.word	0x08020571
 8020770:	2000274c 	.word	0x2000274c
 8020774:	20002750 	.word	0x20002750

08020778 <lv_anim_init>:
{
 8020778:	b510      	push	{r4, lr}
 802077a:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 802077c:	2144      	movs	r1, #68	; 0x44
 802077e:	f001 faf3 	bl	8021d68 <lv_memset_00>
    a->time = 500;
 8020782:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8020786:	62e3      	str	r3, [r4, #44]	; 0x2c
    a->start_value = 0;
 8020788:	2300      	movs	r3, #0
 802078a:	6223      	str	r3, [r4, #32]
    a->end_value = 100;
 802078c:	2364      	movs	r3, #100	; 0x64
 802078e:	62a3      	str	r3, [r4, #40]	; 0x28
    a->repeat_cnt = 1;
 8020790:	2301      	movs	r3, #1
 8020792:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 8020796:	4b04      	ldr	r3, [pc, #16]	; (80207a8 <lv_anim_init+0x30>)
 8020798:	61e3      	str	r3, [r4, #28]
    a->early_apply = 1;
 802079a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 802079e:	f043 0301 	orr.w	r3, r3, #1
 80207a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80207a6:	bd10      	pop	{r4, pc}
 80207a8:	08020719 	.word	0x08020719

080207ac <lv_anim_del>:
{
 80207ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207b0:	4606      	mov	r6, r0
 80207b2:	4688      	mov	r8, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 80207b4:	4818      	ldr	r0, [pc, #96]	; (8020818 <lv_anim_del+0x6c>)
 80207b6:	f000 ff21 	bl	80215fc <_lv_ll_get_head>
    while(a != NULL) {
 80207ba:	b340      	cbz	r0, 802080e <lv_anim_del+0x62>
 80207bc:	4604      	mov	r4, r0
    bool del = false;
 80207be:	f04f 0900 	mov.w	r9, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80207c2:	4f15      	ldr	r7, [pc, #84]	; (8020818 <lv_anim_del+0x6c>)
            del = true;
 80207c4:	f04f 0a01 	mov.w	sl, #1
 80207c8:	e006      	b.n	80207d8 <lv_anim_del+0x2c>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80207ca:	686b      	ldr	r3, [r5, #4]
 80207cc:	4543      	cmp	r3, r8
 80207ce:	d00f      	beq.n	80207f0 <lv_anim_del+0x44>
 80207d0:	f1b8 0f00 	cmp.w	r8, #0
 80207d4:	d00c      	beq.n	80207f0 <lv_anim_del+0x44>
    while(a != NULL) {
 80207d6:	b1e4      	cbz	r4, 8020812 <lv_anim_del+0x66>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80207d8:	4625      	mov	r5, r4
 80207da:	4621      	mov	r1, r4
 80207dc:	4638      	mov	r0, r7
 80207de:	f000 ff15 	bl	802160c <_lv_ll_get_next>
 80207e2:	4604      	mov	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80207e4:	682b      	ldr	r3, [r5, #0]
 80207e6:	42b3      	cmp	r3, r6
 80207e8:	d0ef      	beq.n	80207ca <lv_anim_del+0x1e>
 80207ea:	2e00      	cmp	r6, #0
 80207ec:	d1f3      	bne.n	80207d6 <lv_anim_del+0x2a>
 80207ee:	e7ec      	b.n	80207ca <lv_anim_del+0x1e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80207f0:	4629      	mov	r1, r5
 80207f2:	4638      	mov	r0, r7
 80207f4:	f000 febf 	bl	8021576 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 80207f8:	692b      	ldr	r3, [r5, #16]
 80207fa:	b10b      	cbz	r3, 8020800 <lv_anim_del+0x54>
 80207fc:	4628      	mov	r0, r5
 80207fe:	4798      	blx	r3
            lv_mem_free(a);
 8020800:	4628      	mov	r0, r5
 8020802:	f001 f84f 	bl	80218a4 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 8020806:	f7ff fe9b 	bl	8020540 <anim_mark_list_change>
            del = true;
 802080a:	46d1      	mov	r9, sl
 802080c:	e7e3      	b.n	80207d6 <lv_anim_del+0x2a>
    bool del = false;
 802080e:	f04f 0900 	mov.w	r9, #0
}
 8020812:	4648      	mov	r0, r9
 8020814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020818:	20002760 	.word	0x20002760

0802081c <lv_anim_start>:
{
 802081c:	b538      	push	{r3, r4, r5, lr}
 802081e:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 8020820:	6841      	ldr	r1, [r0, #4]
 8020822:	b111      	cbz	r1, 802082a <lv_anim_start+0xe>
 8020824:	6800      	ldr	r0, [r0, #0]
 8020826:	f7ff ffc1 	bl	80207ac <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 802082a:	481b      	ldr	r0, [pc, #108]	; (8020898 <lv_anim_start+0x7c>)
 802082c:	f000 ff04 	bl	8021638 <_lv_ll_is_empty>
 8020830:	bb58      	cbnz	r0, 802088a <lv_anim_start+0x6e>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8020832:	4819      	ldr	r0, [pc, #100]	; (8020898 <lv_anim_start+0x7c>)
 8020834:	f000 fe61 	bl	80214fa <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 8020838:	4605      	mov	r5, r0
 802083a:	b358      	cbz	r0, 8020894 <lv_anim_start+0x78>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 802083c:	2244      	movs	r2, #68	; 0x44
 802083e:	4621      	mov	r1, r4
 8020840:	f001 f8fc 	bl	8021a3c <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8020844:	6823      	ldr	r3, [r4, #0]
 8020846:	42a3      	cmp	r3, r4
 8020848:	bf08      	it	eq
 802084a:	602d      	streq	r5, [r5, #0]
    new_anim->run_round = anim_run_round;
 802084c:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 8020850:	4a12      	ldr	r2, [pc, #72]	; (802089c <lv_anim_start+0x80>)
 8020852:	7812      	ldrb	r2, [r2, #0]
 8020854:	f362 0382 	bfi	r3, r2, #2, #1
 8020858:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    if(new_anim->early_apply) {
 802085c:	f013 0f01 	tst.w	r3, #1
 8020860:	d00f      	beq.n	8020882 <lv_anim_start+0x66>
        if(new_anim->get_value_cb) {
 8020862:	696b      	ldr	r3, [r5, #20]
 8020864:	b13b      	cbz	r3, 8020876 <lv_anim_start+0x5a>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 8020866:	4628      	mov	r0, r5
 8020868:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 802086a:	6a2b      	ldr	r3, [r5, #32]
 802086c:	4403      	add	r3, r0
 802086e:	622b      	str	r3, [r5, #32]
            new_anim->end_value += v_ofs;
 8020870:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8020872:	4403      	add	r3, r0
 8020874:	62ab      	str	r3, [r5, #40]	; 0x28
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8020876:	686b      	ldr	r3, [r5, #4]
 8020878:	b11b      	cbz	r3, 8020882 <lv_anim_start+0x66>
 802087a:	6828      	ldr	r0, [r5, #0]
 802087c:	b108      	cbz	r0, 8020882 <lv_anim_start+0x66>
 802087e:	6a29      	ldr	r1, [r5, #32]
 8020880:	4798      	blx	r3
    anim_mark_list_change();
 8020882:	f7ff fe5d 	bl	8020540 <anim_mark_list_change>
}
 8020886:	4628      	mov	r0, r5
 8020888:	bd38      	pop	{r3, r4, r5, pc}
        last_timer_run = lv_tick_get();
 802088a:	f7ff fe4e 	bl	802052a <lv_tick_get>
 802088e:	4b04      	ldr	r3, [pc, #16]	; (80208a0 <lv_anim_start+0x84>)
 8020890:	6018      	str	r0, [r3, #0]
 8020892:	e7ce      	b.n	8020832 <lv_anim_start+0x16>
    LV_ASSERT_MALLOC(new_anim);
 8020894:	e7fe      	b.n	8020894 <lv_anim_start+0x78>
 8020896:	bf00      	nop
 8020898:	20002760 	.word	0x20002760
 802089c:	20002751 	.word	0x20002751
 80208a0:	20002754 	.word	0x20002754

080208a4 <lv_anim_get>:
{
 80208a4:	b570      	push	{r4, r5, r6, lr}
 80208a6:	4604      	mov	r4, r0
 80208a8:	460d      	mov	r5, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 80208aa:	480b      	ldr	r0, [pc, #44]	; (80208d8 <lv_anim_get+0x34>)
 80208ac:	f000 fea6 	bl	80215fc <_lv_ll_get_head>
 80208b0:	4601      	mov	r1, r0
 80208b2:	b170      	cbz	r0, 80208d2 <lv_anim_get+0x2e>
 80208b4:	4e08      	ldr	r6, [pc, #32]	; (80208d8 <lv_anim_get+0x34>)
 80208b6:	e004      	b.n	80208c2 <lv_anim_get+0x1e>
 80208b8:	4630      	mov	r0, r6
 80208ba:	f000 fea7 	bl	802160c <_lv_ll_get_next>
 80208be:	4601      	mov	r1, r0
 80208c0:	b138      	cbz	r0, 80208d2 <lv_anim_get+0x2e>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80208c2:	680b      	ldr	r3, [r1, #0]
 80208c4:	42a3      	cmp	r3, r4
 80208c6:	d1f7      	bne.n	80208b8 <lv_anim_get+0x14>
 80208c8:	684b      	ldr	r3, [r1, #4]
 80208ca:	42ab      	cmp	r3, r5
 80208cc:	d001      	beq.n	80208d2 <lv_anim_get+0x2e>
 80208ce:	2d00      	cmp	r5, #0
 80208d0:	d1f2      	bne.n	80208b8 <lv_anim_get+0x14>
}
 80208d2:	4608      	mov	r0, r1
 80208d4:	bd70      	pop	{r4, r5, r6, pc}
 80208d6:	bf00      	nop
 80208d8:	20002760 	.word	0x20002760

080208dc <lv_anim_speed_to_time>:
{
 80208dc:	4603      	mov	r3, r0
    uint32_t d    = LV_ABS(start - end);
 80208de:	1a8a      	subs	r2, r1, r2
 80208e0:	2a00      	cmp	r2, #0
 80208e2:	bfb8      	it	lt
 80208e4:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 80208e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80208ea:	fb01 f202 	mul.w	r2, r1, r2
 80208ee:	fbb2 f0f0 	udiv	r0, r2, r0
    if(time == 0) {
 80208f2:	429a      	cmp	r2, r3
        time++;
 80208f4:	bf38      	it	cc
 80208f6:	3001      	addcc	r0, #1
}
 80208f8:	4770      	bx	lr

080208fa <lv_anim_path_ease_out>:
{
 80208fa:	b530      	push	{r4, r5, lr}
 80208fc:	b083      	sub	sp, #12
 80208fe:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8020900:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8020904:	9500      	str	r5, [sp, #0]
 8020906:	2300      	movs	r3, #0
 8020908:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 802090a:	4619      	mov	r1, r3
 802090c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802090e:	f000 ff7b 	bl	8021808 <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 8020912:	9500      	str	r5, [sp, #0]
 8020914:	f240 33b6 	movw	r3, #950	; 0x3b6
 8020918:	f44f 7261 	mov.w	r2, #900	; 0x384
 802091c:	2100      	movs	r1, #0
 802091e:	f000 fed3 	bl	80216c8 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 8020922:	6a22      	ldr	r2, [r4, #32]
 8020924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020926:	1a9b      	subs	r3, r3, r2
 8020928:	fb03 f000 	mul.w	r0, r3, r0
}
 802092c:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8020930:	b003      	add	sp, #12
 8020932:	bd30      	pop	{r4, r5, pc}

08020934 <lv_anim_path_ease_in_out>:
{
 8020934:	b530      	push	{r4, r5, lr}
 8020936:	b083      	sub	sp, #12
 8020938:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 802093a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 802093e:	9500      	str	r5, [sp, #0]
 8020940:	2300      	movs	r3, #0
 8020942:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8020944:	4619      	mov	r1, r3
 8020946:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020948:	f000 ff5e 	bl	8021808 <lv_map>
    int32_t step = lv_bezier3(t, 0, 50, 952, LV_BEZIER_VAL_MAX);
 802094c:	9500      	str	r5, [sp, #0]
 802094e:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 8020952:	2232      	movs	r2, #50	; 0x32
 8020954:	2100      	movs	r1, #0
 8020956:	f000 feb7 	bl	80216c8 <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 802095a:	6a22      	ldr	r2, [r4, #32]
 802095c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802095e:	1a9b      	subs	r3, r3, r2
 8020960:	fb03 f000 	mul.w	r0, r3, r0
}
 8020964:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8020968:	b003      	add	sp, #12
 802096a:	bd30      	pop	{r4, r5, pc}

0802096c <lv_anim_path_step>:
    if(a->act_time >= a->time)
 802096c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 802096e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8020970:	429a      	cmp	r2, r3
        return a->end_value;
 8020972:	bfac      	ite	ge
 8020974:	6a80      	ldrge	r0, [r0, #40]	; 0x28
        return a->start_value;
 8020976:	6a00      	ldrlt	r0, [r0, #32]
}
 8020978:	4770      	bx	lr

0802097a <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 802097a:	b500      	push	{lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 802097c:	f9b0 e000 	ldrsh.w	lr, [r0]
 8020980:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8020984:	eba3 030e 	sub.w	r3, r3, lr
 8020988:	eb03 73d3 	add.w	r3, r3, r3, lsr #31

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 802098c:	f3c3 0c4f 	ubfx	ip, r3, #1, #16

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;

    uint32_t r_sqrd = r * r;
 8020990:	f343 034f 	sbfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
 8020994:	880a      	ldrh	r2, [r1, #0]
 8020996:	eba2 020e 	sub.w	r2, r2, lr
 802099a:	eba2 020c 	sub.w	r2, r2, ip
    uint32_t dist = (px * px) + (py * py);
 802099e:	b212      	sxth	r2, r2
    lv_coord_t py = p->y - cy;
 80209a0:	8849      	ldrh	r1, [r1, #2]
 80209a2:	8840      	ldrh	r0, [r0, #2]
 80209a4:	1a08      	subs	r0, r1, r0
 80209a6:	eba0 000c 	sub.w	r0, r0, ip
    uint32_t dist = (px * px) + (py * py);
 80209aa:	b200      	sxth	r0, r0
    uint32_t r_sqrd = r * r;
 80209ac:	fb03 f303 	mul.w	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
 80209b0:	fb00 f000 	mul.w	r0, r0, r0
 80209b4:	fb02 0202 	mla	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 80209b8:	4293      	cmp	r3, r2
 80209ba:	bf34      	ite	cc
 80209bc:	2000      	movcc	r0, #0
 80209be:	2001      	movcs	r0, #1
 80209c0:	f85d fb04 	ldr.w	pc, [sp], #4

080209c4 <lv_area_set>:
    area_p->x1 = x1;
 80209c4:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 80209c6:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 80209c8:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 80209ca:	f9bd 3000 	ldrsh.w	r3, [sp]
 80209ce:	80c3      	strh	r3, [r0, #6]
}
 80209d0:	4770      	bx	lr

080209d2 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 80209d2:	3901      	subs	r1, #1
 80209d4:	8803      	ldrh	r3, [r0, #0]
 80209d6:	4419      	add	r1, r3
 80209d8:	8081      	strh	r1, [r0, #4]
}
 80209da:	4770      	bx	lr

080209dc <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 80209dc:	3901      	subs	r1, #1
 80209de:	8843      	ldrh	r3, [r0, #2]
 80209e0:	4419      	add	r1, r3
 80209e2:	80c1      	strh	r1, [r0, #6]
}
 80209e4:	4770      	bx	lr

080209e6 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80209e6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80209ea:	f9b0 3000 	ldrsh.w	r3, [r0]
 80209ee:	1ad2      	subs	r2, r2, r3
 80209f0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80209f4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80209f8:	1a18      	subs	r0, r3, r0
 80209fa:	3001      	adds	r0, #1
}
 80209fc:	fb02 0000 	mla	r0, r2, r0, r0
 8020a00:	4770      	bx	lr

08020a02 <lv_area_increase>:
    area->x1 -= w_extra;
 8020a02:	b289      	uxth	r1, r1
 8020a04:	8803      	ldrh	r3, [r0, #0]
 8020a06:	1a5b      	subs	r3, r3, r1
 8020a08:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 8020a0a:	8883      	ldrh	r3, [r0, #4]
 8020a0c:	4419      	add	r1, r3
 8020a0e:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 8020a10:	b292      	uxth	r2, r2
 8020a12:	8843      	ldrh	r3, [r0, #2]
 8020a14:	1a9b      	subs	r3, r3, r2
 8020a16:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 8020a18:	88c3      	ldrh	r3, [r0, #6]
 8020a1a:	441a      	add	r2, r3
 8020a1c:	80c2      	strh	r2, [r0, #6]
}
 8020a1e:	4770      	bx	lr

08020a20 <lv_area_move>:
    area->x1 += x_ofs;
 8020a20:	b289      	uxth	r1, r1
 8020a22:	8803      	ldrh	r3, [r0, #0]
 8020a24:	440b      	add	r3, r1
 8020a26:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 8020a28:	8883      	ldrh	r3, [r0, #4]
 8020a2a:	4419      	add	r1, r3
 8020a2c:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 8020a2e:	b292      	uxth	r2, r2
 8020a30:	8843      	ldrh	r3, [r0, #2]
 8020a32:	4413      	add	r3, r2
 8020a34:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 8020a36:	88c3      	ldrh	r3, [r0, #6]
 8020a38:	441a      	add	r2, r3
 8020a3a:	80c2      	strh	r2, [r0, #6]
}
 8020a3c:	4770      	bx	lr

08020a3e <_lv_area_intersect>:
{
 8020a3e:	b510      	push	{r4, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8020a40:	f9b2 e000 	ldrsh.w	lr, [r2]
 8020a44:	f9b1 3000 	ldrsh.w	r3, [r1]
 8020a48:	459e      	cmp	lr, r3
 8020a4a:	bfb8      	it	lt
 8020a4c:	469e      	movlt	lr, r3
 8020a4e:	f8a0 e000 	strh.w	lr, [r0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8020a52:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8020a56:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8020a5a:	42a3      	cmp	r3, r4
 8020a5c:	bfb8      	it	lt
 8020a5e:	4623      	movlt	r3, r4
 8020a60:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8020a62:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8020a66:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8020a6a:	45a4      	cmp	ip, r4
 8020a6c:	bfa8      	it	ge
 8020a6e:	46a4      	movge	ip, r4
 8020a70:	f8a0 c004 	strh.w	ip, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8020a74:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8020a78:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8020a7c:	428a      	cmp	r2, r1
 8020a7e:	bfa8      	it	ge
 8020a80:	460a      	movge	r2, r1
 8020a82:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8020a84:	45e6      	cmp	lr, ip
 8020a86:	dc04      	bgt.n	8020a92 <_lv_area_intersect+0x54>
 8020a88:	4293      	cmp	r3, r2
 8020a8a:	bfcc      	ite	gt
 8020a8c:	2000      	movgt	r0, #0
 8020a8e:	2001      	movle	r0, #1
}
 8020a90:	bd10      	pop	{r4, pc}
        union_ok = false;
 8020a92:	2000      	movs	r0, #0
 8020a94:	e7fc      	b.n	8020a90 <_lv_area_intersect+0x52>

08020a96 <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8020a96:	f9b2 3000 	ldrsh.w	r3, [r2]
 8020a9a:	f9b1 c000 	ldrsh.w	ip, [r1]
 8020a9e:	4563      	cmp	r3, ip
 8020aa0:	bfa8      	it	ge
 8020aa2:	4663      	movge	r3, ip
 8020aa4:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8020aa6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8020aaa:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8020aae:	4563      	cmp	r3, ip
 8020ab0:	bfa8      	it	ge
 8020ab2:	4663      	movge	r3, ip
 8020ab4:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8020ab6:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8020aba:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
 8020abe:	4563      	cmp	r3, ip
 8020ac0:	bfb8      	it	lt
 8020ac2:	4663      	movlt	r3, ip
 8020ac4:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8020ac6:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8020aca:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8020ace:	4293      	cmp	r3, r2
 8020ad0:	bfb8      	it	lt
 8020ad2:	4613      	movlt	r3, r2
 8020ad4:	80c3      	strh	r3, [r0, #6]
}
 8020ad6:	4770      	bx	lr

08020ad8 <_lv_area_is_point_on>:
{
 8020ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020adc:	b085      	sub	sp, #20
 8020ade:	460c      	mov	r4, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8020ae0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8020ae4:	f9b0 1000 	ldrsh.w	r1, [r0]
 8020ae8:	428b      	cmp	r3, r1
 8020aea:	f2c0 80a5 	blt.w	8020c38 <_lv_area_is_point_on+0x160>
 8020aee:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8020af2:	42b3      	cmp	r3, r6
 8020af4:	f300 80a4 	bgt.w	8020c40 <_lv_area_is_point_on+0x168>
 8020af8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8020afc:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 8020b00:	42bb      	cmp	r3, r7
 8020b02:	f2c0 809f 	blt.w	8020c44 <_lv_area_is_point_on+0x16c>
 8020b06:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8020b0a:	454b      	cmp	r3, r9
 8020b0c:	f300 809c 	bgt.w	8020c48 <_lv_area_is_point_on+0x170>
    if(radius <= 0) {
 8020b10:	2a00      	cmp	r2, #0
 8020b12:	f340 809b 	ble.w	8020c4c <_lv_area_is_point_on+0x174>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020b16:	fa1f fb86 	uxth.w	fp, r6
 8020b1a:	fa1f f881 	uxth.w	r8, r1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020b1e:	fa1f fa89 	uxth.w	sl, r9
 8020b22:	b2b8      	uxth	r0, r7
    corner_area.x1 = a_p->x1;
 8020b24:	f8ad 1008 	strh.w	r1, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8020b28:	f10b 0301 	add.w	r3, fp, #1
 8020b2c:	eba3 0308 	sub.w	r3, r3, r8
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8020b30:	b219      	sxth	r1, r3
 8020b32:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8020b36:	440d      	add	r5, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8020b38:	f10a 0301 	add.w	r3, sl, #1
 8020b3c:	4601      	mov	r1, r0
 8020b3e:	1a1b      	subs	r3, r3, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8020b40:	b218      	sxth	r0, r3
 8020b42:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8020b46:	4403      	add	r3, r0
    lv_coord_t max_radius = LV_MIN(w, h);
 8020b48:	106d      	asrs	r5, r5, #1
 8020b4a:	105b      	asrs	r3, r3, #1
    corner_area.x2 = a_p->x1 + radius;
 8020b4c:	429d      	cmp	r5, r3
 8020b4e:	bfa8      	it	ge
 8020b50:	461d      	movge	r5, r3
 8020b52:	42aa      	cmp	r2, r5
 8020b54:	bfa8      	it	ge
 8020b56:	462a      	movge	r2, r5
 8020b58:	b295      	uxth	r5, r2
 8020b5a:	44a8      	add	r8, r5
 8020b5c:	fa1f f888 	uxth.w	r8, r8
 8020b60:	f8ad 800c 	strh.w	r8, [sp, #12]
    corner_area.y1 = a_p->y1;
 8020b64:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 8020b68:	4429      	add	r1, r5
 8020b6a:	b28b      	uxth	r3, r1
 8020b6c:	9300      	str	r3, [sp, #0]
 8020b6e:	b20b      	sxth	r3, r1
 8020b70:	9301      	str	r3, [sp, #4]
 8020b72:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020b76:	2200      	movs	r2, #0
 8020b78:	4621      	mov	r1, r4
 8020b7a:	a802      	add	r0, sp, #8
 8020b7c:	f7ff ffac 	bl	8020ad8 <_lv_area_is_point_on>
 8020b80:	b158      	cbz	r0, 8020b9a <_lv_area_is_point_on+0xc2>
        corner_area.x2 += radius;
 8020b82:	44a8      	add	r8, r5
 8020b84:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y2 += radius;
 8020b88:	9b00      	ldr	r3, [sp, #0]
 8020b8a:	441d      	add	r5, r3
 8020b8c:	f8ad 500e 	strh.w	r5, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
 8020b90:	4621      	mov	r1, r4
 8020b92:	a802      	add	r0, sp, #8
 8020b94:	f7ff fef1 	bl	802097a <lv_point_within_circle>
 8020b98:	e04f      	b.n	8020c3a <_lv_area_is_point_on+0x162>
    corner_area.y1 = a_p->y2 - radius;
 8020b9a:	ebaa 0a05 	sub.w	sl, sl, r5
 8020b9e:	fa1f fa8a 	uxth.w	sl, sl
 8020ba2:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y2;
 8020ba6:	f8ad 900e 	strh.w	r9, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020baa:	2200      	movs	r2, #0
 8020bac:	4621      	mov	r1, r4
 8020bae:	a802      	add	r0, sp, #8
 8020bb0:	f7ff ff92 	bl	8020ad8 <_lv_area_is_point_on>
 8020bb4:	b158      	cbz	r0, 8020bce <_lv_area_is_point_on+0xf6>
        corner_area.x2 += radius;
 8020bb6:	44a8      	add	r8, r5
 8020bb8:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y1 -= radius;
 8020bbc:	ebaa 0a05 	sub.w	sl, sl, r5
 8020bc0:	f8ad a00a 	strh.w	sl, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 8020bc4:	4621      	mov	r1, r4
 8020bc6:	a802      	add	r0, sp, #8
 8020bc8:	f7ff fed7 	bl	802097a <lv_point_within_circle>
 8020bcc:	e035      	b.n	8020c3a <_lv_area_is_point_on+0x162>
    corner_area.x1 = a_p->x2 - radius;
 8020bce:	ebab 0b05 	sub.w	fp, fp, r5
 8020bd2:	fa1f fb8b 	uxth.w	fp, fp
 8020bd6:	f8ad b008 	strh.w	fp, [sp, #8]
    corner_area.x2 = a_p->x2;
 8020bda:	f8ad 600c 	strh.w	r6, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020bde:	2200      	movs	r2, #0
 8020be0:	4621      	mov	r1, r4
 8020be2:	a802      	add	r0, sp, #8
 8020be4:	f7ff ff78 	bl	8020ad8 <_lv_area_is_point_on>
 8020be8:	b160      	cbz	r0, 8020c04 <_lv_area_is_point_on+0x12c>
        corner_area.x1 -= radius;
 8020bea:	ebab 0b05 	sub.w	fp, fp, r5
 8020bee:	f8ad b008 	strh.w	fp, [sp, #8]
        corner_area.y1 -= radius;
 8020bf2:	ebaa 0505 	sub.w	r5, sl, r5
 8020bf6:	f8ad 500a 	strh.w	r5, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 8020bfa:	4621      	mov	r1, r4
 8020bfc:	a802      	add	r0, sp, #8
 8020bfe:	f7ff febc 	bl	802097a <lv_point_within_circle>
 8020c02:	e01a      	b.n	8020c3a <_lv_area_is_point_on+0x162>
    corner_area.y1 = a_p->y1;
 8020c04:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 8020c08:	9b01      	ldr	r3, [sp, #4]
 8020c0a:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8020c0e:	2200      	movs	r2, #0
 8020c10:	4621      	mov	r1, r4
 8020c12:	a802      	add	r0, sp, #8
 8020c14:	f7ff ff60 	bl	8020ad8 <_lv_area_is_point_on>
 8020c18:	b908      	cbnz	r0, 8020c1e <_lv_area_is_point_on+0x146>
    return true;
 8020c1a:	2001      	movs	r0, #1
 8020c1c:	e00d      	b.n	8020c3a <_lv_area_is_point_on+0x162>
        corner_area.x1 -= radius;
 8020c1e:	ebab 0b05 	sub.w	fp, fp, r5
 8020c22:	f8ad b008 	strh.w	fp, [sp, #8]
        corner_area.y2 += radius;
 8020c26:	9b00      	ldr	r3, [sp, #0]
 8020c28:	441d      	add	r5, r3
 8020c2a:	f8ad 500e 	strh.w	r5, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
 8020c2e:	4621      	mov	r1, r4
 8020c30:	a802      	add	r0, sp, #8
 8020c32:	f7ff fea2 	bl	802097a <lv_point_within_circle>
 8020c36:	e000      	b.n	8020c3a <_lv_area_is_point_on+0x162>
        return false;
 8020c38:	2000      	movs	r0, #0
}
 8020c3a:	b005      	add	sp, #20
 8020c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
 8020c40:	2000      	movs	r0, #0
 8020c42:	e7fa      	b.n	8020c3a <_lv_area_is_point_on+0x162>
 8020c44:	2000      	movs	r0, #0
 8020c46:	e7f8      	b.n	8020c3a <_lv_area_is_point_on+0x162>
 8020c48:	2000      	movs	r0, #0
 8020c4a:	e7f6      	b.n	8020c3a <_lv_area_is_point_on+0x162>
        return true;
 8020c4c:	2001      	movs	r0, #1
 8020c4e:	e7f4      	b.n	8020c3a <_lv_area_is_point_on+0x162>

08020c50 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8020c50:	f9b0 2000 	ldrsh.w	r2, [r0]
 8020c54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020c58:	429a      	cmp	r2, r3
 8020c5a:	dc14      	bgt.n	8020c86 <_lv_area_is_on+0x36>
 8020c5c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8020c60:	f9b1 3000 	ldrsh.w	r3, [r1]
 8020c64:	429a      	cmp	r2, r3
 8020c66:	db10      	blt.n	8020c8a <_lv_area_is_on+0x3a>
 8020c68:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8020c6c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020c70:	429a      	cmp	r2, r3
 8020c72:	dc0c      	bgt.n	8020c8e <_lv_area_is_on+0x3e>
 8020c74:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8020c78:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8020c7c:	4298      	cmp	r0, r3
 8020c7e:	bfb4      	ite	lt
 8020c80:	2000      	movlt	r0, #0
 8020c82:	2001      	movge	r0, #1
 8020c84:	4770      	bx	lr
        return false;
 8020c86:	2000      	movs	r0, #0
 8020c88:	4770      	bx	lr
 8020c8a:	2000      	movs	r0, #0
 8020c8c:	4770      	bx	lr
 8020c8e:	2000      	movs	r0, #0
}
 8020c90:	4770      	bx	lr

08020c92 <_lv_area_is_in>:
{
 8020c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c96:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020c98:	f9b0 6000 	ldrsh.w	r6, [r0]
 8020c9c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8020ca0:	42b3      	cmp	r3, r6
 8020ca2:	dc3a      	bgt.n	8020d1a <_lv_area_is_in+0x88>
 8020ca4:	460c      	mov	r4, r1
 8020ca6:	4615      	mov	r5, r2
 8020ca8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8020cac:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8020cb0:	429a      	cmp	r2, r3
 8020cb2:	dc36      	bgt.n	8020d22 <_lv_area_is_in+0x90>
 8020cb4:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8020cb8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8020cbc:	42ba      	cmp	r2, r7
 8020cbe:	db32      	blt.n	8020d26 <_lv_area_is_in+0x94>
       ain_p->y2 <= aholder_p->y2) {
 8020cc0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8020cc4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8020cc8:	4542      	cmp	r2, r8
 8020cca:	db2e      	blt.n	8020d2a <_lv_area_is_in+0x98>
    if(radius == 0) return true;
 8020ccc:	b90d      	cbnz	r5, 8020cd2 <_lv_area_is_in+0x40>
 8020cce:	2001      	movs	r0, #1
 8020cd0:	e024      	b.n	8020d1c <_lv_area_is_in+0x8a>
    p.x = ain_p->x1;
 8020cd2:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y1;
 8020cd6:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020cda:	462a      	mov	r2, r5
 8020cdc:	a901      	add	r1, sp, #4
 8020cde:	4620      	mov	r0, r4
 8020ce0:	f7ff fefa 	bl	8020ad8 <_lv_area_is_point_on>
 8020ce4:	b1d0      	cbz	r0, 8020d1c <_lv_area_is_in+0x8a>
    p.x = ain_p->x2;
 8020ce6:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020cea:	462a      	mov	r2, r5
 8020cec:	a901      	add	r1, sp, #4
 8020cee:	4620      	mov	r0, r4
 8020cf0:	f7ff fef2 	bl	8020ad8 <_lv_area_is_point_on>
 8020cf4:	b190      	cbz	r0, 8020d1c <_lv_area_is_in+0x8a>
    p.x = ain_p->x1;
 8020cf6:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y2;
 8020cfa:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020cfe:	462a      	mov	r2, r5
 8020d00:	a901      	add	r1, sp, #4
 8020d02:	4620      	mov	r0, r4
 8020d04:	f7ff fee8 	bl	8020ad8 <_lv_area_is_point_on>
 8020d08:	b140      	cbz	r0, 8020d1c <_lv_area_is_in+0x8a>
    p.x = ain_p->x2;
 8020d0a:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8020d0e:	462a      	mov	r2, r5
 8020d10:	a901      	add	r1, sp, #4
 8020d12:	4620      	mov	r0, r4
 8020d14:	f7ff fee0 	bl	8020ad8 <_lv_area_is_point_on>
 8020d18:	e000      	b.n	8020d1c <_lv_area_is_in+0x8a>
    if(!is_in) return false;
 8020d1a:	2000      	movs	r0, #0
}
 8020d1c:	b002      	add	sp, #8
 8020d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!is_in) return false;
 8020d22:	2000      	movs	r0, #0
 8020d24:	e7fa      	b.n	8020d1c <_lv_area_is_in+0x8a>
 8020d26:	2000      	movs	r0, #0
 8020d28:	e7f8      	b.n	8020d1c <_lv_area_is_in+0x8a>
 8020d2a:	2000      	movs	r0, #0
 8020d2c:	e7f6      	b.n	8020d1c <_lv_area_is_in+0x8a>

08020d2e <_lv_area_is_out>:
{
 8020d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d32:	b082      	sub	sp, #8
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020d34:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8020d38:	f9b1 3000 	ldrsh.w	r3, [r1]
 8020d3c:	42bb      	cmp	r3, r7
 8020d3e:	dc43      	bgt.n	8020dc8 <_lv_area_is_out+0x9a>
 8020d40:	460c      	mov	r4, r1
 8020d42:	4616      	mov	r6, r2
 8020d44:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8020d48:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8020d4c:	4543      	cmp	r3, r8
 8020d4e:	dc40      	bgt.n	8020dd2 <_lv_area_is_out+0xa4>
 8020d50:	f9b0 9000 	ldrsh.w	r9, [r0]
 8020d54:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020d58:	454b      	cmp	r3, r9
 8020d5a:	db3c      	blt.n	8020dd6 <_lv_area_is_out+0xa8>
       aout_p->y1 > aholder_p->y2) {
 8020d5c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8020d60:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8020d64:	429a      	cmp	r2, r3
 8020d66:	db38      	blt.n	8020dda <_lv_area_is_out+0xac>
    if(radius == 0) return false;
 8020d68:	b90e      	cbnz	r6, 8020d6e <_lv_area_is_out+0x40>
 8020d6a:	2500      	movs	r5, #0
 8020d6c:	e02d      	b.n	8020dca <_lv_area_is_out+0x9c>
    p.x = aout_p->x1;
 8020d6e:	f8ad 9004 	strh.w	r9, [sp, #4]
    p.y = aout_p->y1;
 8020d72:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020d76:	4632      	mov	r2, r6
 8020d78:	a901      	add	r1, sp, #4
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	f7ff feac 	bl	8020ad8 <_lv_area_is_point_on>
 8020d80:	4605      	mov	r5, r0
 8020d82:	b108      	cbz	r0, 8020d88 <_lv_area_is_out+0x5a>
 8020d84:	2500      	movs	r5, #0
 8020d86:	e020      	b.n	8020dca <_lv_area_is_out+0x9c>
    p.x = aout_p->x2;
 8020d88:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020d8c:	4632      	mov	r2, r6
 8020d8e:	a901      	add	r1, sp, #4
 8020d90:	4620      	mov	r0, r4
 8020d92:	f7ff fea1 	bl	8020ad8 <_lv_area_is_point_on>
 8020d96:	4682      	mov	sl, r0
 8020d98:	b9b8      	cbnz	r0, 8020dca <_lv_area_is_out+0x9c>
    p.x = aout_p->x1;
 8020d9a:	f8ad 9004 	strh.w	r9, [sp, #4]
    p.y = aout_p->y2;
 8020d9e:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020da2:	4632      	mov	r2, r6
 8020da4:	a901      	add	r1, sp, #4
 8020da6:	4620      	mov	r0, r4
 8020da8:	f7ff fe96 	bl	8020ad8 <_lv_area_is_point_on>
 8020dac:	b108      	cbz	r0, 8020db2 <_lv_area_is_out+0x84>
 8020dae:	4655      	mov	r5, sl
 8020db0:	e00b      	b.n	8020dca <_lv_area_is_out+0x9c>
    p.x = aout_p->x2;
 8020db2:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8020db6:	4632      	mov	r2, r6
 8020db8:	a901      	add	r1, sp, #4
 8020dba:	4620      	mov	r0, r4
 8020dbc:	f7ff fe8c 	bl	8020ad8 <_lv_area_is_point_on>
 8020dc0:	f080 0501 	eor.w	r5, r0, #1
 8020dc4:	b2ed      	uxtb	r5, r5
 8020dc6:	e000      	b.n	8020dca <_lv_area_is_out+0x9c>
        return true;
 8020dc8:	2501      	movs	r5, #1
}
 8020dca:	4628      	mov	r0, r5
 8020dcc:	b002      	add	sp, #8
 8020dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
 8020dd2:	2501      	movs	r5, #1
 8020dd4:	e7f9      	b.n	8020dca <_lv_area_is_out+0x9c>
 8020dd6:	2501      	movs	r5, #1
 8020dd8:	e7f7      	b.n	8020dca <_lv_area_is_out+0x9c>
 8020dda:	2501      	movs	r5, #1
 8020ddc:	e7f5      	b.n	8020dca <_lv_area_is_out+0x9c>
	...

08020de0 <lv_point_transform>:
{
 8020de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020de4:	b083      	sub	sp, #12
 8020de6:	4604      	mov	r4, r0
 8020de8:	4616      	mov	r6, r2
 8020dea:	461d      	mov	r5, r3
    if(angle == 0 && zoom == 256) {
 8020dec:	2900      	cmp	r1, #0
 8020dee:	d136      	bne.n	8020e5e <lv_point_transform+0x7e>
 8020df0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8020df4:	f000 80a6 	beq.w	8020f44 <lv_point_transform+0x164>
    p->x -= pivot->x;
 8020df8:	8803      	ldrh	r3, [r0, #0]
 8020dfa:	882a      	ldrh	r2, [r5, #0]
 8020dfc:	1a9b      	subs	r3, r3, r2
 8020dfe:	b21b      	sxth	r3, r3
 8020e00:	8003      	strh	r3, [r0, #0]
    p->y -= pivot->y;
 8020e02:	8842      	ldrh	r2, [r0, #2]
 8020e04:	8869      	ldrh	r1, [r5, #2]
 8020e06:	1a52      	subs	r2, r2, r1
 8020e08:	b212      	sxth	r2, r2
 8020e0a:	8042      	strh	r2, [r0, #2]
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8020e0c:	fb06 f303 	mul.w	r3, r6, r3
 8020e10:	8829      	ldrh	r1, [r5, #0]
 8020e12:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8020e16:	8003      	strh	r3, [r0, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8020e18:	fb06 f202 	mul.w	r2, r6, r2
 8020e1c:	886e      	ldrh	r6, [r5, #2]
 8020e1e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020e22:	8042      	strh	r2, [r0, #2]
        return;
 8020e24:	e08e      	b.n	8020f44 <lv_point_transform+0x164>
        if(angle_limited < 0) angle_limited += 3600;
 8020e26:	f1b9 0f00 	cmp.w	r9, #0
 8020e2a:	bfb4      	ite	lt
 8020e2c:	f509 6861 	addlt.w	r8, r9, #3600	; 0xe10
        int32_t angle_limited = angle;
 8020e30:	46c8      	movge	r8, r9
 8020e32:	e026      	b.n	8020e82 <lv_point_transform+0xa2>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8020e34:	4b45      	ldr	r3, [pc, #276]	; (8020f4c <lv_point_transform+0x16c>)
 8020e36:	681b      	ldr	r3, [r3, #0]
 8020e38:	4a45      	ldr	r2, [pc, #276]	; (8020f50 <lv_point_transform+0x170>)
 8020e3a:	6817      	ldr	r7, [r2, #0]
 8020e3c:	fb01 f203 	mul.w	r2, r1, r3
 8020e40:	fb00 2617 	mls	r6, r0, r7, r2
 8020e44:	882a      	ldrh	r2, [r5, #0]
 8020e46:	eb02 22a6 	add.w	r2, r2, r6, asr #10
 8020e4a:	8022      	strh	r2, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8020e4c:	fb00 f303 	mul.w	r3, r0, r3
 8020e50:	fb01 3307 	mla	r3, r1, r7, r3
 8020e54:	8869      	ldrh	r1, [r5, #2]
 8020e56:	eb01 23a3 	add.w	r3, r1, r3, asr #10
 8020e5a:	8063      	strh	r3, [r4, #2]
 8020e5c:	e072      	b.n	8020f44 <lv_point_transform+0x164>
 8020e5e:	4689      	mov	r9, r1
    p->x -= pivot->x;
 8020e60:	8803      	ldrh	r3, [r0, #0]
 8020e62:	882a      	ldrh	r2, [r5, #0]
 8020e64:	1a9b      	subs	r3, r3, r2
 8020e66:	8003      	strh	r3, [r0, #0]
    p->y -= pivot->y;
 8020e68:	8843      	ldrh	r3, [r0, #2]
 8020e6a:	886a      	ldrh	r2, [r5, #2]
 8020e6c:	1a9b      	subs	r3, r3, r2
 8020e6e:	8043      	strh	r3, [r0, #2]
    if(angle_prev != angle) {
 8020e70:	4b38      	ldr	r3, [pc, #224]	; (8020f54 <lv_point_transform+0x174>)
 8020e72:	681b      	ldr	r3, [r3, #0]
 8020e74:	428b      	cmp	r3, r1
 8020e76:	d045      	beq.n	8020f04 <lv_point_transform+0x124>
        if(angle_limited > 3600) angle_limited -= 3600;
 8020e78:	f5b9 6f61 	cmp.w	r9, #3600	; 0xe10
 8020e7c:	ddd3      	ble.n	8020e26 <lv_point_transform+0x46>
 8020e7e:	f5a9 6861 	sub.w	r8, r9, #3600	; 0xe10
        int32_t angle_low = angle_limited / 10;
 8020e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8020f58 <lv_point_transform+0x178>
 8020e86:	fb8a 3008 	smull	r3, r0, sl, r8
 8020e8a:	ea4f 77e8 	mov.w	r7, r8, asr #31
 8020e8e:	ebc7 07a0 	rsb	r7, r7, r0, asr #2
        int32_t angle_high = angle_low + 1;
 8020e92:	f107 0b01 	add.w	fp, r7, #1
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8020e96:	f06f 0309 	mvn.w	r3, #9
 8020e9a:	fb03 8807 	mla	r8, r3, r7, r8
        int32_t s1 = lv_trigo_sin(angle_low);
 8020e9e:	b238      	sxth	r0, r7
 8020ea0:	f000 fbd6 	bl	8021650 <lv_trigo_sin>
 8020ea4:	9000      	str	r0, [sp, #0]
        int32_t s2 = lv_trigo_sin(angle_high);
 8020ea6:	fa0f f08b 	sxth.w	r0, fp
 8020eaa:	f000 fbd1 	bl	8021650 <lv_trigo_sin>
 8020eae:	9001      	str	r0, [sp, #4]
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8020eb0:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8020eb4:	b200      	sxth	r0, r0
 8020eb6:	f000 fbcb 	bl	8021650 <lv_trigo_sin>
 8020eba:	4607      	mov	r7, r0
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8020ebc:	f10b 005a 	add.w	r0, fp, #90	; 0x5a
 8020ec0:	b200      	sxth	r0, r0
 8020ec2:	f000 fbc5 	bl	8021650 <lv_trigo_sin>
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8020ec6:	f1c8 020a 	rsb	r2, r8, #10
 8020eca:	9b01      	ldr	r3, [sp, #4]
 8020ecc:	fb08 f303 	mul.w	r3, r8, r3
 8020ed0:	9900      	ldr	r1, [sp, #0]
 8020ed2:	fb02 3301 	mla	r3, r2, r1, r3
 8020ed6:	fb8a c103 	smull	ip, r1, sl, r3
 8020eda:	17db      	asrs	r3, r3, #31
 8020edc:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8020ee0:	115b      	asrs	r3, r3, #5
 8020ee2:	491b      	ldr	r1, [pc, #108]	; (8020f50 <lv_point_transform+0x170>)
 8020ee4:	600b      	str	r3, [r1, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8020ee6:	fb08 f800 	mul.w	r8, r8, r0
 8020eea:	fb02 8707 	mla	r7, r2, r7, r8
 8020eee:	fb8a 3a07 	smull	r3, sl, sl, r7
 8020ef2:	17ff      	asrs	r7, r7, #31
 8020ef4:	ebc7 07aa 	rsb	r7, r7, sl, asr #2
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8020ef8:	117f      	asrs	r7, r7, #5
 8020efa:	4b14      	ldr	r3, [pc, #80]	; (8020f4c <lv_point_transform+0x16c>)
 8020efc:	601f      	str	r7, [r3, #0]
        angle_prev = angle;
 8020efe:	4b15      	ldr	r3, [pc, #84]	; (8020f54 <lv_point_transform+0x174>)
 8020f00:	f8c3 9000 	str.w	r9, [r3]
    int32_t x = p->x;
 8020f04:	f9b4 1000 	ldrsh.w	r1, [r4]
    int32_t y = p->y;
 8020f08:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    if(zoom == 256) {
 8020f0c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8020f10:	d090      	beq.n	8020e34 <lv_point_transform+0x54>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8020f12:	4b0e      	ldr	r3, [pc, #56]	; (8020f4c <lv_point_transform+0x16c>)
 8020f14:	681b      	ldr	r3, [r3, #0]
 8020f16:	4a0e      	ldr	r2, [pc, #56]	; (8020f50 <lv_point_transform+0x170>)
 8020f18:	f8d2 c000 	ldr.w	ip, [r2]
 8020f1c:	fb01 f203 	mul.w	r2, r1, r3
 8020f20:	fb00 221c 	mls	r2, r0, ip, r2
 8020f24:	fb06 f202 	mul.w	r2, r6, r2
 8020f28:	882f      	ldrh	r7, [r5, #0]
 8020f2a:	eb07 42a2 	add.w	r2, r7, r2, asr #18
 8020f2e:	8022      	strh	r2, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 8020f30:	fb00 f303 	mul.w	r3, r0, r3
 8020f34:	fb01 330c 	mla	r3, r1, ip, r3
 8020f38:	fb03 f606 	mul.w	r6, r3, r6
 8020f3c:	886a      	ldrh	r2, [r5, #2]
 8020f3e:	eb02 46a6 	add.w	r6, r2, r6, asr #18
 8020f42:	8066      	strh	r6, [r4, #2]
}
 8020f44:	b003      	add	sp, #12
 8020f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f4a:	bf00      	nop
 8020f4c:	20002758 	.word	0x20002758
 8020f50:	2000275c 	.word	0x2000275c
 8020f54:	20000748 	.word	0x20000748
 8020f58:	66666667 	.word	0x66666667

08020f5c <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 8020f5c:	b500      	push	{lr}
 8020f5e:	fa1f fe81 	uxth.w	lr, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t)buf;
    if(buf_int & 0x3) {
 8020f62:	f010 0f03 	tst.w	r0, #3
        *buf = color;
 8020f66:	bf1c      	itt	ne
 8020f68:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
 8020f6c:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
    }

    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 8020f70:	eb0e 410e 	add.w	r1, lr, lr, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 8020f74:	2a10      	cmp	r2, #16
 8020f76:	d923      	bls.n	8020fc0 <lv_color_fill+0x64>
 8020f78:	f100 0320 	add.w	r3, r0, #32
 8020f7c:	4694      	mov	ip, r2
        *buf32 = c32;
 8020f7e:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
 8020f82:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
 8020f86:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
 8020f8a:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
 8020f8e:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
 8020f92:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
 8020f96:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
 8020f9a:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
 8020f9e:	f1ac 0c10 	sub.w	ip, ip, #16
    while(px_num > 16) {
 8020fa2:	3320      	adds	r3, #32
 8020fa4:	f1bc 0f10 	cmp.w	ip, #16
 8020fa8:	d8e9      	bhi.n	8020f7e <lv_color_fill+0x22>
 8020faa:	f1a2 0311 	sub.w	r3, r2, #17
 8020fae:	091b      	lsrs	r3, r3, #4
        buf32++;
 8020fb0:	1c59      	adds	r1, r3, #1
 8020fb2:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8020fb6:	3a10      	subs	r2, #16
        px_num -= 16;
 8020fb8:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
 8020fbc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 8020fc0:	b11a      	cbz	r2, 8020fca <lv_color_fill+0x6e>
        *buf = color;
 8020fc2:	f820 eb02 	strh.w	lr, [r0], #2
    while(px_num) {
 8020fc6:	3a01      	subs	r2, #1
 8020fc8:	d1fb      	bne.n	8020fc2 <lv_color_fill+0x66>
        *buf = color;
        buf++;
        px_num--;
    }
#endif
}
 8020fca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08020fd0 <lv_color_darken>:
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8020fd0:	b283      	uxth	r3, r0
 8020fd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8020fd6:	4b06      	ldr	r3, [pc, #24]	; (8020ff0 <lv_color_darken+0x20>)
 8020fd8:	4018      	ands	r0, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8020fda:	3104      	adds	r1, #4
 8020fdc:	08c9      	lsrs	r1, r1, #3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8020fde:	fb00 f101 	mul.w	r1, r0, r1
 8020fe2:	4249      	negs	r1, r1
 8020fe4:	eb00 1051 	add.w	r0, r0, r1, lsr #5
 8020fe8:	4018      	ands	r0, r3
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
    return lv_color_mix(lv_color_black(), c, lvl);
}
 8020fea:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
 8020fee:	4770      	bx	lr
 8020ff0:	07e0f81f 	.word	0x07e0f81f

08020ff4 <lv_color_hsv_to_rgb>:
 * @param s saturation [0..100]
 * @param v value [0..100]
 * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 */
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
{
 8020ff4:	b410      	push	{r4}
    h = (uint32_t)((uint32_t)h * 255) / 360;
    s = (uint16_t)((uint16_t)s * 255) / 100;
 8020ff6:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8020ffa:	b28b      	uxth	r3, r1
 8020ffc:	4939      	ldr	r1, [pc, #228]	; (80210e4 <lv_color_hsv_to_rgb+0xf0>)
 8020ffe:	fba1 4303 	umull	r4, r3, r1, r3
 8021002:	f3c3 1447 	ubfx	r4, r3, #5, #8
    v = (uint16_t)((uint16_t)v * 255) / 100;
 8021006:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 802100a:	b292      	uxth	r2, r2
 802100c:	fba1 3202 	umull	r3, r2, r1, r2
 8021010:	f3c2 1247 	ubfx	r2, r2, #5, #8

    uint8_t r, g, b;

    uint8_t region, remainder, p, q, t;

    if(s == 0) {
 8021014:	2c00      	cmp	r4, #0
 8021016:	d038      	beq.n	802108a <lv_color_hsv_to_rgb+0x96>
    h = (uint32_t)((uint32_t)h * 255) / 360;
 8021018:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 802101c:	08c3      	lsrs	r3, r0, #3
 802101e:	4832      	ldr	r0, [pc, #200]	; (80210e8 <lv_color_hsv_to_rgb+0xf4>)
 8021020:	fba0 3c03 	umull	r3, ip, r0, r3
        return lv_color_make(v, v, v);
    }

    region    = h / 43;
 8021024:	f3cc 008f 	ubfx	r0, ip, #2, #16
 8021028:	4b30      	ldr	r3, [pc, #192]	; (80210ec <lv_color_hsv_to_rgb+0xf8>)
 802102a:	fba3 3000 	umull	r3, r0, r3, r0
 802102e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    remainder = (h - (region * 43)) * 6;

    p = (v * (255 - s)) >> 8;
 8021032:	f1c4 01ff 	rsb	r1, r4, #255	; 0xff
 8021036:	fb02 f101 	mul.w	r1, r2, r1
 802103a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    remainder = (h - (region * 43)) * 6;
 802103e:	f06f 032a 	mvn.w	r3, #42	; 0x2a
 8021042:	fb00 f303 	mul.w	r3, r0, r3
 8021046:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 802104a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802104e:	005b      	lsls	r3, r3, #1
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8021050:	b2db      	uxtb	r3, r3
 8021052:	fb03 fc04 	mul.w	ip, r3, r4
 8021056:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802105a:	f1cc 0cff 	rsb	ip, ip, #255	; 0xff
 802105e:	fb02 fc0c 	mul.w	ip, r2, ip
 8021062:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 8021066:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802106a:	fb04 f303 	mul.w	r3, r4, r3
 802106e:	121b      	asrs	r3, r3, #8
 8021070:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8021074:	fb02 f303 	mul.w	r3, r2, r3
 8021078:	f3c3 2307 	ubfx	r3, r3, #8, #8

    switch(region) {
 802107c:	2804      	cmp	r0, #4
 802107e:	d82d      	bhi.n	80210dc <lv_color_hsv_to_rgb+0xe8>
 8021080:	e8df f000 	tbb	[pc, r0]
 8021084:	221d0e10 	.word	0x221d0e10
 8021088:	27          	.byte	0x27
 8021089:	00          	.byte	0x00
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 802108a:	08d3      	lsrs	r3, r2, #3
 802108c:	f04f 0000 	mov.w	r0, #0
 8021090:	f363 0004 	bfi	r0, r3, #0, #5
 8021094:	0892      	lsrs	r2, r2, #2
 8021096:	f362 104a 	bfi	r0, r2, #5, #6
 802109a:	f363 20cf 	bfi	r0, r3, #11, #5
        return lv_color_make(v, v, v);
 802109e:	e00c      	b.n	80210ba <lv_color_hsv_to_rgb+0xc6>
    switch(region) {
 80210a0:	4613      	mov	r3, r2
 80210a2:	4662      	mov	r2, ip
 80210a4:	08c9      	lsrs	r1, r1, #3
            b = q;
            break;
    }

    lv_color_t result = lv_color_make(r, g, b);
    return result;
 80210a6:	f04f 0000 	mov.w	r0, #0
 80210aa:	f361 0004 	bfi	r0, r1, #0, #5
 80210ae:	089b      	lsrs	r3, r3, #2
 80210b0:	f363 104a 	bfi	r0, r3, #5, #6
 80210b4:	08d2      	lsrs	r2, r2, #3
 80210b6:	f362 20cf 	bfi	r0, r2, #11, #5
}
 80210ba:	bc10      	pop	{r4}
 80210bc:	4770      	bx	lr
            break;
 80210be:	4610      	mov	r0, r2
            r = p;
 80210c0:	460a      	mov	r2, r1
            b = t;
 80210c2:	4619      	mov	r1, r3
            g = v;
 80210c4:	4603      	mov	r3, r0
            break;
 80210c6:	e7ed      	b.n	80210a4 <lv_color_hsv_to_rgb+0xb0>
            g = q;
 80210c8:	4663      	mov	r3, ip
            break;
 80210ca:	4610      	mov	r0, r2
            r = p;
 80210cc:	460a      	mov	r2, r1
            b = v;
 80210ce:	4601      	mov	r1, r0
            break;
 80210d0:	e7e8      	b.n	80210a4 <lv_color_hsv_to_rgb+0xb0>
            break;
 80210d2:	4610      	mov	r0, r2
            r = t;
 80210d4:	461a      	mov	r2, r3
            g = p;
 80210d6:	460b      	mov	r3, r1
            b = v;
 80210d8:	4601      	mov	r1, r0
            break;
 80210da:	e7e3      	b.n	80210a4 <lv_color_hsv_to_rgb+0xb0>
            g = p;
 80210dc:	460b      	mov	r3, r1
            b = q;
 80210de:	4661      	mov	r1, ip
            break;
 80210e0:	e7e0      	b.n	80210a4 <lv_color_hsv_to_rgb+0xb0>
 80210e2:	bf00      	nop
 80210e4:	51eb851f 	.word	0x51eb851f
 80210e8:	16c16c17 	.word	0x16c16c17
 80210ec:	2fa0be83 	.word	0x2fa0be83

080210f0 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 80210f0:	2812      	cmp	r0, #18
 80210f2:	bf8e      	itee	hi
 80210f4:	2000      	movhi	r0, #0
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 80210f6:	4b02      	ldrls	r3, [pc, #8]	; (8021100 <lv_palette_main+0x10>)
 80210f8:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]

}
 80210fc:	4770      	bx	lr
 80210fe:	bf00      	nop
 8021100:	08032d88 	.word	0x08032d88

08021104 <lv_palette_lighten>:
        {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
        {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
        {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

    if(p >= _LV_PALETTE_LAST) {
 8021104:	2812      	cmp	r0, #18
 8021106:	d80a      	bhi.n	802111e <lv_palette_lighten+0x1a>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 5) {
 8021108:	3901      	subs	r1, #1
 802110a:	b2c9      	uxtb	r1, r1
 802110c:	2904      	cmp	r1, #4
 802110e:	d809      	bhi.n	8021124 <lv_palette_lighten+0x20>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 8021110:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021114:	4401      	add	r1, r0
 8021116:	4b05      	ldr	r3, [pc, #20]	; (802112c <lv_palette_lighten+0x28>)
 8021118:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 802111c:	4770      	bx	lr
 802111e:	f04f 0000 	mov.w	r0, #0
        return lv_color_black();
 8021122:	4770      	bx	lr
 8021124:	f04f 0000 	mov.w	r0, #0
        return lv_color_black();
 8021128:	4770      	bx	lr
 802112a:	bf00      	nop
 802112c:	08032cc8 	.word	0x08032cc8

08021130 <lv_palette_darken>:
        {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
        {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
        {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

    if(p >= _LV_PALETTE_LAST) {
 8021130:	2812      	cmp	r0, #18
 8021132:	d80a      	bhi.n	802114a <lv_palette_darken+0x1a>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 4) {
 8021134:	3901      	subs	r1, #1
 8021136:	b2c9      	uxtb	r1, r1
 8021138:	2903      	cmp	r1, #3
 802113a:	bf8f      	iteee	hi
 802113c:	2000      	movhi	r0, #0
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 802113e:	eb01 0180 	addls.w	r1, r1, r0, lsl #2
 8021142:	4b03      	ldrls	r3, [pc, #12]	; (8021150 <lv_palette_darken+0x20>)
 8021144:	f833 0011 	ldrhls.w	r0, [r3, r1, lsl #1]
}
 8021148:	4770      	bx	lr
 802114a:	f04f 0000 	mov.w	r0, #0
        return lv_color_black();
 802114e:	4770      	bx	lr
 8021150:	08032c30 	.word	0x08032c30

08021154 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 8021154:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8021156:	2104      	movs	r1, #4
 8021158:	4801      	ldr	r0, [pc, #4]	; (8021160 <_lv_fs_init+0xc>)
 802115a:	f000 f9c6 	bl	80214ea <_lv_ll_init>
}
 802115e:	bd08      	pop	{r3, pc}
 8021160:	20002868 	.word	0x20002868

08021164 <lv_fs_close>:

    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8021164:	b538      	push	{r3, r4, r5, lr}
 8021166:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8021168:	6840      	ldr	r0, [r0, #4]
 802116a:	b1b0      	cbz	r0, 802119a <lv_fs_close+0x36>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
 802116c:	68c3      	ldr	r3, [r0, #12]
 802116e:	b1b3      	cbz	r3, 802119e <lv_fs_close+0x3a>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8021170:	6821      	ldr	r1, [r4, #0]
 8021172:	4798      	blx	r3
 8021174:	4605      	mov	r5, r0

    if(file_p->drv->cache_size && file_p->cache) {
 8021176:	6863      	ldr	r3, [r4, #4]
 8021178:	885b      	ldrh	r3, [r3, #2]
 802117a:	b143      	cbz	r3, 802118e <lv_fs_close+0x2a>
 802117c:	68a3      	ldr	r3, [r4, #8]
 802117e:	b133      	cbz	r3, 802118e <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 8021180:	68d8      	ldr	r0, [r3, #12]
 8021182:	b108      	cbz	r0, 8021188 <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 8021184:	f000 fb8e 	bl	80218a4 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 8021188:	68a0      	ldr	r0, [r4, #8]
 802118a:	f000 fb8b 	bl	80218a4 <lv_mem_free>
    }

    file_p->file_d = NULL;
 802118e:	2300      	movs	r3, #0
 8021190:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 8021192:	6063      	str	r3, [r4, #4]
    file_p->cache  = NULL;
 8021194:	60a3      	str	r3, [r4, #8]

    return res;
}
 8021196:	4628      	mov	r0, r5
 8021198:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 802119a:	250b      	movs	r5, #11
 802119c:	e7fb      	b.n	8021196 <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 802119e:	2509      	movs	r5, #9
 80211a0:	e7f9      	b.n	8021196 <lv_fs_close+0x32>

080211a2 <lv_fs_read>:

    return res;
}

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 80211a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211a6:	b087      	sub	sp, #28
 80211a8:	4604      	mov	r4, r0
 80211aa:	460e      	mov	r6, r1
 80211ac:	4615      	mov	r5, r2
    if(br != NULL) *br = 0;
 80211ae:	461f      	mov	r7, r3
 80211b0:	b10b      	cbz	r3, 80211b6 <lv_fs_read+0x14>
 80211b2:	2300      	movs	r3, #0
 80211b4:	603b      	str	r3, [r7, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 80211b6:	6860      	ldr	r0, [r4, #4]
 80211b8:	2800      	cmp	r0, #0
 80211ba:	f000 80bc 	beq.w	8021336 <lv_fs_read+0x194>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 80211be:	f8d0 8010 	ldr.w	r8, [r0, #16]
 80211c2:	f1b8 0f00 	cmp.w	r8, #0
 80211c6:	f000 80b9 	beq.w	802133c <lv_fs_read+0x19a>

    uint32_t br_tmp = 0;
 80211ca:	2300      	movs	r3, #0
 80211cc:	9305      	str	r3, [sp, #20]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 80211ce:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80211d2:	f1b9 0f00 	cmp.w	r9, #0
 80211d6:	d10d      	bne.n	80211f4 <lv_fs_read+0x52>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 80211d8:	ab05      	add	r3, sp, #20
 80211da:	9300      	str	r3, [sp, #0]
 80211dc:	462b      	mov	r3, r5
 80211de:	4632      	mov	r2, r6
 80211e0:	6821      	ldr	r1, [r4, #0]
 80211e2:	47c0      	blx	r8
 80211e4:	4680      	mov	r8, r0
    }

    if(br != NULL) *br = br_tmp;
 80211e6:	b10f      	cbz	r7, 80211ec <lv_fs_read+0x4a>
 80211e8:	9b05      	ldr	r3, [sp, #20]
 80211ea:	603b      	str	r3, [r7, #0]

    return res;
}
 80211ec:	4640      	mov	r0, r8
 80211ee:	b007      	add	sp, #28
 80211f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t file_position = file_p->cache->file_position;
 80211f4:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80211f8:	f8da b008 	ldr.w	fp, [sl, #8]
    uint32_t start = file_p->cache->start;
 80211fc:	f8da 1000 	ldr.w	r1, [sl]
    char * buffer = file_p->cache->buffer;
 8021200:	f8da c00c 	ldr.w	ip, [sl, #12]
 8021204:	f8cd c00c 	str.w	ip, [sp, #12]
    if(start <= file_position && file_position < end) {
 8021208:	458b      	cmp	fp, r1
 802120a:	d354      	bcc.n	80212b6 <lv_fs_read+0x114>
    uint32_t end = file_p->cache->end;
 802120c:	f8da 3004 	ldr.w	r3, [sl, #4]
    if(start <= file_position && file_position < end) {
 8021210:	459b      	cmp	fp, r3
 8021212:	d250      	bcs.n	80212b6 <lv_fs_read+0x114>
        uint16_t buffer_offset = file_position - start;
 8021214:	ebab 0101 	sub.w	r1, fp, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8021218:	b289      	uxth	r1, r1
 802121a:	eba3 0b0b 	sub.w	fp, r3, fp
 802121e:	eba9 0301 	sub.w	r3, r9, r1
 8021222:	459b      	cmp	fp, r3
 8021224:	bf28      	it	cs
 8021226:	469b      	movcs	fp, r3
        if(btr <= buffer_remaining_length) {
 8021228:	455d      	cmp	r5, fp
 802122a:	d807      	bhi.n	802123c <lv_fs_read+0x9a>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 802122c:	462a      	mov	r2, r5
 802122e:	448c      	add	ip, r1
 8021230:	4661      	mov	r1, ip
 8021232:	4630      	mov	r0, r6
 8021234:	f000 fc02 	bl	8021a3c <lv_memcpy>
            *br = btr;
 8021238:	9505      	str	r5, [sp, #20]
    if(res == LV_FS_RES_OK) {
 802123a:	e048      	b.n	80212ce <lv_fs_read+0x12c>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 802123c:	465a      	mov	r2, fp
 802123e:	9b03      	ldr	r3, [sp, #12]
 8021240:	4419      	add	r1, r3
 8021242:	4630      	mov	r0, r6
 8021244:	f000 fbfa 	bl	8021a3c <lv_memcpy>
            uint32_t bytes_read_to_buffer = 0;
 8021248:	2300      	movs	r3, #0
 802124a:	9304      	str	r3, [sp, #16]
            if(btr > buffer_size) {
 802124c:	454d      	cmp	r5, r9
 802124e:	d912      	bls.n	8021276 <lv_fs_read+0xd4>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8021250:	6860      	ldr	r0, [r4, #4]
 8021252:	ab04      	add	r3, sp, #16
 8021254:	9300      	str	r3, [sp, #0]
 8021256:	f8d0 8010 	ldr.w	r8, [r0, #16]
 802125a:	eba5 030b 	sub.w	r3, r5, fp
 802125e:	eb06 020b 	add.w	r2, r6, fp
 8021262:	6821      	ldr	r1, [r4, #0]
 8021264:	47c0      	blx	r8
 8021266:	4680      	mov	r8, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8021268:	9b04      	ldr	r3, [sp, #16]
 802126a:	449b      	add	fp, r3
 802126c:	455d      	cmp	r5, fp
 802126e:	bf28      	it	cs
 8021270:	465d      	movcs	r5, fp
 8021272:	9505      	str	r5, [sp, #20]
 8021274:	e028      	b.n	80212c8 <lv_fs_read+0x126>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8021276:	6860      	ldr	r0, [r4, #4]
 8021278:	ab04      	add	r3, sp, #16
 802127a:	9300      	str	r3, [sp, #0]
 802127c:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8021280:	464b      	mov	r3, r9
 8021282:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8021286:	464a      	mov	r2, r9
 8021288:	6821      	ldr	r1, [r4, #0]
 802128a:	47c0      	blx	r8
 802128c:	4680      	mov	r8, r0
                file_p->cache->start = file_p->cache->end;
 802128e:	68a3      	ldr	r3, [r4, #8]
 8021290:	685a      	ldr	r2, [r3, #4]
 8021292:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8021294:	68a2      	ldr	r2, [r4, #8]
 8021296:	9904      	ldr	r1, [sp, #16]
 8021298:	6813      	ldr	r3, [r2, #0]
 802129a:	440b      	add	r3, r1
 802129c:	6053      	str	r3, [r2, #4]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 802129e:	eba5 020b 	sub.w	r2, r5, fp
 80212a2:	428a      	cmp	r2, r1
 80212a4:	bf28      	it	cs
 80212a6:	460a      	movcs	r2, r1
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 80212a8:	b292      	uxth	r2, r2
 80212aa:	4649      	mov	r1, r9
 80212ac:	eb06 000b 	add.w	r0, r6, fp
 80212b0:	f000 fbc4 	bl	8021a3c <lv_memcpy>
 80212b4:	e7d8      	b.n	8021268 <lv_fs_read+0xc6>
        if(btr > buffer_size) {
 80212b6:	454d      	cmp	r5, r9
 80212b8:	d911      	bls.n	80212de <lv_fs_read+0x13c>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 80212ba:	ab05      	add	r3, sp, #20
 80212bc:	9300      	str	r3, [sp, #0]
 80212be:	462b      	mov	r3, r5
 80212c0:	4632      	mov	r2, r6
 80212c2:	6821      	ldr	r1, [r4, #0]
 80212c4:	47c0      	blx	r8
 80212c6:	4680      	mov	r8, r0
    if(res == LV_FS_RES_OK) {
 80212c8:	f1b8 0f00 	cmp.w	r8, #0
 80212cc:	d18b      	bne.n	80211e6 <lv_fs_read+0x44>
        file_p->cache->file_position += *br;
 80212ce:	68a2      	ldr	r2, [r4, #8]
 80212d0:	6893      	ldr	r3, [r2, #8]
 80212d2:	9905      	ldr	r1, [sp, #20]
 80212d4:	440b      	add	r3, r1
 80212d6:	6093      	str	r3, [r2, #8]
 80212d8:	f04f 0800 	mov.w	r8, #0
 80212dc:	e783      	b.n	80211e6 <lv_fs_read+0x44>
            if(buffer == NULL) {
 80212de:	9b03      	ldr	r3, [sp, #12]
 80212e0:	b1f3      	cbz	r3, 8021320 <lv_fs_read+0x17e>
            uint32_t bytes_read_to_buffer = 0;
 80212e2:	2300      	movs	r3, #0
 80212e4:	9304      	str	r3, [sp, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80212e6:	6860      	ldr	r0, [r4, #4]
 80212e8:	ab04      	add	r3, sp, #16
 80212ea:	9300      	str	r3, [sp, #0]
 80212ec:	f8d0 8010 	ldr.w	r8, [r0, #16]
 80212f0:	464b      	mov	r3, r9
 80212f2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80212f6:	464a      	mov	r2, r9
 80212f8:	6821      	ldr	r1, [r4, #0]
 80212fa:	47c0      	blx	r8
 80212fc:	4680      	mov	r8, r0
            file_p->cache->start = file_position;
 80212fe:	68a3      	ldr	r3, [r4, #8]
 8021300:	f8c3 b000 	str.w	fp, [r3]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8021304:	68a1      	ldr	r1, [r4, #8]
 8021306:	9a04      	ldr	r2, [sp, #16]
 8021308:	680b      	ldr	r3, [r1, #0]
 802130a:	4413      	add	r3, r2
 802130c:	604b      	str	r3, [r1, #4]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 802130e:	42aa      	cmp	r2, r5
 8021310:	bf28      	it	cs
 8021312:	462a      	movcs	r2, r5
 8021314:	9205      	str	r2, [sp, #20]
            lv_memcpy(buf, buffer, *br);
 8021316:	4649      	mov	r1, r9
 8021318:	4630      	mov	r0, r6
 802131a:	f000 fb8f 	bl	8021a3c <lv_memcpy>
 802131e:	e7d3      	b.n	80212c8 <lv_fs_read+0x126>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8021320:	4648      	mov	r0, r9
 8021322:	f000 faa1 	bl	8021868 <lv_mem_alloc>
 8021326:	f8ca 000c 	str.w	r0, [sl, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 802132a:	68a3      	ldr	r3, [r4, #8]
 802132c:	68db      	ldr	r3, [r3, #12]
 802132e:	9303      	str	r3, [sp, #12]
 8021330:	2b00      	cmp	r3, #0
 8021332:	d1d6      	bne.n	80212e2 <lv_fs_read+0x140>
 8021334:	e7fe      	b.n	8021334 <lv_fs_read+0x192>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8021336:	f04f 080b 	mov.w	r8, #11
 802133a:	e757      	b.n	80211ec <lv_fs_read+0x4a>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 802133c:	f04f 0809 	mov.w	r8, #9
 8021340:	e754      	b.n	80211ec <lv_fs_read+0x4a>

08021342 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 8021342:	b530      	push	{r4, r5, lr}
 8021344:	b083      	sub	sp, #12
 8021346:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8021348:	6840      	ldr	r0, [r0, #4]
 802134a:	2800      	cmp	r0, #0
 802134c:	d043      	beq.n	80213d6 <lv_fs_seek+0x94>
 802134e:	4613      	mov	r3, r2
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
 8021350:	6985      	ldr	r5, [r0, #24]
 8021352:	2d00      	cmp	r5, #0
 8021354:	d041      	beq.n	80213da <lv_fs_seek+0x98>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = LV_FS_RES_OK;
    if(file_p->drv->cache_size) {
 8021356:	8842      	ldrh	r2, [r0, #2]
 8021358:	2a00      	cmp	r2, #0
 802135a:	d037      	beq.n	80213cc <lv_fs_seek+0x8a>
        switch(whence) {
 802135c:	2b01      	cmp	r3, #1
 802135e:	d014      	beq.n	802138a <lv_fs_seek+0x48>
 8021360:	2b02      	cmp	r3, #2
 8021362:	d024      	beq.n	80213ae <lv_fs_seek+0x6c>
 8021364:	b10b      	cbz	r3, 802136a <lv_fs_seek+0x28>
 8021366:	2000      	movs	r0, #0
 8021368:	e033      	b.n	80213d2 <lv_fs_seek+0x90>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 802136a:	68a2      	ldr	r2, [r4, #8]
 802136c:	6091      	str	r1, [r2, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 802136e:	68a1      	ldr	r1, [r4, #8]
 8021370:	688a      	ldr	r2, [r1, #8]
 8021372:	6808      	ldr	r0, [r1, #0]
 8021374:	4282      	cmp	r2, r0
 8021376:	d302      	bcc.n	802137e <lv_fs_seek+0x3c>
 8021378:	6849      	ldr	r1, [r1, #4]
 802137a:	428a      	cmp	r2, r1
 802137c:	d92f      	bls.n	80213de <lv_fs_seek+0x9c>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 802137e:	6860      	ldr	r0, [r4, #4]
 8021380:	6985      	ldr	r5, [r0, #24]
 8021382:	2300      	movs	r3, #0
 8021384:	6821      	ldr	r1, [r4, #0]
 8021386:	47a8      	blx	r5
 8021388:	e023      	b.n	80213d2 <lv_fs_seek+0x90>
                    }

                    break;
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 802138a:	68a2      	ldr	r2, [r4, #8]
 802138c:	6893      	ldr	r3, [r2, #8]
 802138e:	4419      	add	r1, r3
 8021390:	6091      	str	r1, [r2, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8021392:	68a3      	ldr	r3, [r4, #8]
 8021394:	689a      	ldr	r2, [r3, #8]
 8021396:	6819      	ldr	r1, [r3, #0]
 8021398:	428a      	cmp	r2, r1
 802139a:	d302      	bcc.n	80213a2 <lv_fs_seek+0x60>
 802139c:	685b      	ldr	r3, [r3, #4]
 802139e:	429a      	cmp	r2, r3
 80213a0:	d91f      	bls.n	80213e2 <lv_fs_seek+0xa0>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 80213a2:	6860      	ldr	r0, [r4, #4]
 80213a4:	6985      	ldr	r5, [r0, #24]
 80213a6:	2300      	movs	r3, #0
 80213a8:	6821      	ldr	r1, [r4, #0]
 80213aa:	47a8      	blx	r5
 80213ac:	e011      	b.n	80213d2 <lv_fs_seek+0x90>

                    break;
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80213ae:	2302      	movs	r3, #2
 80213b0:	460a      	mov	r2, r1
 80213b2:	6821      	ldr	r1, [r4, #0]
 80213b4:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 80213b6:	b960      	cbnz	r0, 80213d2 <lv_fs_seek+0x90>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 80213b8:	6860      	ldr	r0, [r4, #4]
 80213ba:	69c3      	ldr	r3, [r0, #28]
 80213bc:	aa01      	add	r2, sp, #4
 80213be:	6821      	ldr	r1, [r4, #0]
 80213c0:	4798      	blx	r3

                        if(res == LV_FS_RES_OK) {
 80213c2:	b930      	cbnz	r0, 80213d2 <lv_fs_seek+0x90>
                            file_p->cache->file_position = tmp_position;
 80213c4:	68a3      	ldr	r3, [r4, #8]
 80213c6:	9a01      	ldr	r2, [sp, #4]
 80213c8:	609a      	str	r2, [r3, #8]
 80213ca:	e002      	b.n	80213d2 <lv_fs_seek+0x90>
                    break;
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80213cc:	460a      	mov	r2, r1
 80213ce:	6821      	ldr	r1, [r4, #0]
 80213d0:	47a8      	blx	r5
    }

    return res;
}
 80213d2:	b003      	add	sp, #12
 80213d4:	bd30      	pop	{r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 80213d6:	200b      	movs	r0, #11
 80213d8:	e7fb      	b.n	80213d2 <lv_fs_seek+0x90>
        return LV_FS_RES_NOT_IMP;
 80213da:	2009      	movs	r0, #9
 80213dc:	e7f9      	b.n	80213d2 <lv_fs_seek+0x90>
    lv_fs_res_t res = LV_FS_RES_OK;
 80213de:	4618      	mov	r0, r3
 80213e0:	e7f7      	b.n	80213d2 <lv_fs_seek+0x90>
 80213e2:	2000      	movs	r0, #0
 80213e4:	e7f5      	b.n	80213d2 <lv_fs_seek+0x90>
	...

080213e8 <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 80213e8:	b538      	push	{r3, r4, r5, lr}
 80213ea:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 80213ec:	4808      	ldr	r0, [pc, #32]	; (8021410 <lv_fs_get_drv+0x28>)
 80213ee:	f000 f905 	bl	80215fc <_lv_ll_get_head>
 80213f2:	4601      	mov	r1, r0
 80213f4:	b150      	cbz	r0, 802140c <lv_fs_get_drv+0x24>
 80213f6:	4d06      	ldr	r5, [pc, #24]	; (8021410 <lv_fs_get_drv+0x28>)
        if((*drv)->letter == letter) {
 80213f8:	6808      	ldr	r0, [r1, #0]
 80213fa:	7803      	ldrb	r3, [r0, #0]
 80213fc:	42a3      	cmp	r3, r4
 80213fe:	d005      	beq.n	802140c <lv_fs_get_drv+0x24>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8021400:	4628      	mov	r0, r5
 8021402:	f000 f903 	bl	802160c <_lv_ll_get_next>
 8021406:	4601      	mov	r1, r0
 8021408:	2800      	cmp	r0, #0
 802140a:	d1f5      	bne.n	80213f8 <lv_fs_get_drv+0x10>
            return *drv;
        }
    }

    return NULL;
}
 802140c:	bd38      	pop	{r3, r4, r5, pc}
 802140e:	bf00      	nop
 8021410:	20002868 	.word	0x20002868

08021414 <lv_fs_open>:
    if(path == NULL) {
 8021414:	2900      	cmp	r1, #0
 8021416:	d033      	beq.n	8021480 <lv_fs_open+0x6c>
{
 8021418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802141a:	4604      	mov	r4, r0
 802141c:	4617      	mov	r7, r2
 802141e:	460e      	mov	r6, r1
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 8021420:	7808      	ldrb	r0, [r1, #0]
 8021422:	f7ff ffe1 	bl	80213e8 <lv_fs_get_drv>
    if(drv == NULL) {
 8021426:	4605      	mov	r5, r0
 8021428:	b360      	cbz	r0, 8021484 <lv_fs_open+0x70>
    if(drv->ready_cb) {
 802142a:	6843      	ldr	r3, [r0, #4]
 802142c:	b10b      	cbz	r3, 8021432 <lv_fs_open+0x1e>
        if(drv->ready_cb(drv) == false) {
 802142e:	4798      	blx	r3
 8021430:	b350      	cbz	r0, 8021488 <lv_fs_open+0x74>
    if(drv->open_cb == NULL) {
 8021432:	68ab      	ldr	r3, [r5, #8]
 8021434:	b353      	cbz	r3, 802148c <lv_fs_open+0x78>
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 8021436:	7872      	ldrb	r2, [r6, #1]
 8021438:	2a3a      	cmp	r2, #58	; 0x3a
    path++; /*Ignore the driver letter*/
 802143a:	bf14      	ite	ne
 802143c:	1c71      	addne	r1, r6, #1
    if(*path == ':') path++;
 802143e:	1cb1      	addeq	r1, r6, #2
    void * file_d = drv->open_cb(drv, real_path, mode);
 8021440:	463a      	mov	r2, r7
 8021442:	4628      	mov	r0, r5
 8021444:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 8021446:	1e43      	subs	r3, r0, #1
 8021448:	f113 0f03 	cmn.w	r3, #3
 802144c:	d820      	bhi.n	8021490 <lv_fs_open+0x7c>
    file_p->drv = drv;
 802144e:	6065      	str	r5, [r4, #4]
    file_p->file_d = file_d;
 8021450:	6020      	str	r0, [r4, #0]
    if(drv->cache_size) {
 8021452:	886b      	ldrh	r3, [r5, #2]
 8021454:	b90b      	cbnz	r3, 802145a <lv_fs_open+0x46>
    return LV_FS_RES_OK;
 8021456:	2000      	movs	r0, #0
}
 8021458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 802145a:	2010      	movs	r0, #16
 802145c:	f000 fa04 	bl	8021868 <lv_mem_alloc>
 8021460:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8021462:	b160      	cbz	r0, 802147e <lv_fs_open+0x6a>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8021464:	2110      	movs	r1, #16
 8021466:	f000 fc7f 	bl	8021d68 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 802146a:	68a3      	ldr	r3, [r4, #8]
 802146c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021470:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8021472:	68a3      	ldr	r3, [r4, #8]
 8021474:	f06f 0201 	mvn.w	r2, #1
 8021478:	605a      	str	r2, [r3, #4]
    return LV_FS_RES_OK;
 802147a:	2000      	movs	r0, #0
 802147c:	e7ec      	b.n	8021458 <lv_fs_open+0x44>
        LV_ASSERT_MALLOC(file_p->cache);
 802147e:	e7fe      	b.n	802147e <lv_fs_open+0x6a>
        return LV_FS_RES_INV_PARAM;
 8021480:	200b      	movs	r0, #11
}
 8021482:	4770      	bx	lr
        return LV_FS_RES_NOT_EX;
 8021484:	2003      	movs	r0, #3
 8021486:	e7e7      	b.n	8021458 <lv_fs_open+0x44>
            return LV_FS_RES_HW_ERR;
 8021488:	2001      	movs	r0, #1
 802148a:	e7e5      	b.n	8021458 <lv_fs_open+0x44>
        return LV_FS_RES_NOT_IMP;
 802148c:	2009      	movs	r0, #9
 802148e:	e7e3      	b.n	8021458 <lv_fs_open+0x44>
        return LV_FS_RES_UNKNOWN;
 8021490:	200c      	movs	r0, #12
 8021492:	e7e1      	b.n	8021458 <lv_fs_open+0x44>

08021494 <lv_fs_get_ext>:
{
 8021494:	b510      	push	{r4, lr}
 8021496:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8021498:	f7de fece 	bl	8000238 <strlen>
 802149c:	b188      	cbz	r0, 80214c2 <lv_fs_get_ext+0x2e>
 802149e:	4602      	mov	r2, r0
 80214a0:	1c41      	adds	r1, r0, #1
 80214a2:	4421      	add	r1, r4
        if(fn[i] == '.') {
 80214a4:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 80214a8:	2b2e      	cmp	r3, #46	; 0x2e
 80214aa:	d007      	beq.n	80214bc <lv_fs_get_ext+0x28>
        else if(fn[i] == '/' || fn[i] == '\\') {
 80214ac:	2b2f      	cmp	r3, #47	; 0x2f
 80214ae:	d00a      	beq.n	80214c6 <lv_fs_get_ext+0x32>
 80214b0:	2b5c      	cmp	r3, #92	; 0x5c
 80214b2:	d00a      	beq.n	80214ca <lv_fs_get_ext+0x36>
    for(i = strlen(fn); i > 0; i--) {
 80214b4:	3a01      	subs	r2, #1
 80214b6:	d1f5      	bne.n	80214a4 <lv_fs_get_ext+0x10>
    return ""; /*Empty string if no '.' in the file name.*/
 80214b8:	4805      	ldr	r0, [pc, #20]	; (80214d0 <lv_fs_get_ext+0x3c>)
 80214ba:	e001      	b.n	80214c0 <lv_fs_get_ext+0x2c>
            return &fn[i + 1];
 80214bc:	3201      	adds	r2, #1
 80214be:	18a0      	adds	r0, r4, r2
}
 80214c0:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name.*/
 80214c2:	4803      	ldr	r0, [pc, #12]	; (80214d0 <lv_fs_get_ext+0x3c>)
 80214c4:	e7fc      	b.n	80214c0 <lv_fs_get_ext+0x2c>
            return ""; /*No extension if a '\' or '/' found*/
 80214c6:	4802      	ldr	r0, [pc, #8]	; (80214d0 <lv_fs_get_ext+0x3c>)
 80214c8:	e7fa      	b.n	80214c0 <lv_fs_get_ext+0x2c>
 80214ca:	4801      	ldr	r0, [pc, #4]	; (80214d0 <lv_fs_get_ext+0x3c>)
 80214cc:	e7f8      	b.n	80214c0 <lv_fs_get_ext+0x2c>
 80214ce:	bf00      	nop
 80214d0:	0802ceb8 	.word	0x0802ceb8

080214d4 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 80214d4:	460b      	mov	r3, r1
 80214d6:	b109      	cbz	r1, 80214dc <node_set_prev+0x8>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 80214d8:	6801      	ldr	r1, [r0, #0]
 80214da:	505a      	str	r2, [r3, r1]
}
 80214dc:	4770      	bx	lr

080214de <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80214de:	460b      	mov	r3, r1
 80214e0:	b111      	cbz	r1, 80214e8 <node_set_next+0xa>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 80214e2:	6801      	ldr	r1, [r0, #0]
 80214e4:	440b      	add	r3, r1
 80214e6:	605a      	str	r2, [r3, #4]
}
 80214e8:	4770      	bx	lr

080214ea <_lv_ll_init>:
    ll_p->head = NULL;
 80214ea:	2300      	movs	r3, #0
 80214ec:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 80214ee:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
 80214f0:	3103      	adds	r1, #3
 80214f2:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
 80214f6:	6001      	str	r1, [r0, #0]
}
 80214f8:	4770      	bx	lr

080214fa <_lv_ll_ins_head>:
{
 80214fa:	b538      	push	{r3, r4, r5, lr}
 80214fc:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80214fe:	6800      	ldr	r0, [r0, #0]
 8021500:	3008      	adds	r0, #8
 8021502:	f000 f9b1 	bl	8021868 <lv_mem_alloc>
    if(n_new != NULL) {
 8021506:	4605      	mov	r5, r0
 8021508:	b190      	cbz	r0, 8021530 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 802150a:	2200      	movs	r2, #0
 802150c:	4601      	mov	r1, r0
 802150e:	4620      	mov	r0, r4
 8021510:	f7ff ffe0 	bl	80214d4 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8021514:	6862      	ldr	r2, [r4, #4]
 8021516:	4629      	mov	r1, r5
 8021518:	4620      	mov	r0, r4
 802151a:	f7ff ffe0 	bl	80214de <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 802151e:	6861      	ldr	r1, [r4, #4]
 8021520:	b119      	cbz	r1, 802152a <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 8021522:	462a      	mov	r2, r5
 8021524:	4620      	mov	r0, r4
 8021526:	f7ff ffd5 	bl	80214d4 <node_set_prev>
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 802152a:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 802152c:	68a3      	ldr	r3, [r4, #8]
 802152e:	b10b      	cbz	r3, 8021534 <_lv_ll_ins_head+0x3a>
}
 8021530:	4628      	mov	r0, r5
 8021532:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
 8021534:	60a5      	str	r5, [r4, #8]
    return n_new;
 8021536:	e7fb      	b.n	8021530 <_lv_ll_ins_head+0x36>

08021538 <_lv_ll_ins_tail>:
{
 8021538:	b538      	push	{r3, r4, r5, lr}
 802153a:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 802153c:	6800      	ldr	r0, [r0, #0]
 802153e:	3008      	adds	r0, #8
 8021540:	f000 f992 	bl	8021868 <lv_mem_alloc>
    if(n_new != NULL) {
 8021544:	4605      	mov	r5, r0
 8021546:	b190      	cbz	r0, 802156e <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8021548:	2200      	movs	r2, #0
 802154a:	4601      	mov	r1, r0
 802154c:	4620      	mov	r0, r4
 802154e:	f7ff ffc6 	bl	80214de <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8021552:	68a2      	ldr	r2, [r4, #8]
 8021554:	4629      	mov	r1, r5
 8021556:	4620      	mov	r0, r4
 8021558:	f7ff ffbc 	bl	80214d4 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 802155c:	68a1      	ldr	r1, [r4, #8]
 802155e:	b119      	cbz	r1, 8021568 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 8021560:	462a      	mov	r2, r5
 8021562:	4620      	mov	r0, r4
 8021564:	f7ff ffbb 	bl	80214de <node_set_next>
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8021568:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 802156a:	6863      	ldr	r3, [r4, #4]
 802156c:	b10b      	cbz	r3, 8021572 <_lv_ll_ins_tail+0x3a>
}
 802156e:	4628      	mov	r0, r5
 8021570:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
 8021572:	6065      	str	r5, [r4, #4]
    return n_new;
 8021574:	e7fb      	b.n	802156e <_lv_ll_ins_tail+0x36>

08021576 <_lv_ll_remove>:
    if(ll_p == NULL) return;
 8021576:	b360      	cbz	r0, 80215d2 <_lv_ll_remove+0x5c>
{
 8021578:	b570      	push	{r4, r5, r6, lr}
 802157a:	4604      	mov	r4, r0
    if(_lv_ll_get_head(ll_p) == node_p) {
 802157c:	6843      	ldr	r3, [r0, #4]
 802157e:	4299      	cmp	r1, r3
 8021580:	d010      	beq.n	80215a4 <_lv_ll_remove+0x2e>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8021582:	6883      	ldr	r3, [r0, #8]
 8021584:	4299      	cmp	r1, r3
 8021586:	d019      	beq.n	80215bc <_lv_ll_remove+0x46>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8021588:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 802158a:	58ce      	ldr	r6, [r1, r3]
    return *((lv_ll_node_t **)n_act_d);
 802158c:	4419      	add	r1, r3
 802158e:	684d      	ldr	r5, [r1, #4]
        node_set_next(ll_p, n_prev, n_next);
 8021590:	462a      	mov	r2, r5
 8021592:	4631      	mov	r1, r6
 8021594:	f7ff ffa3 	bl	80214de <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8021598:	4632      	mov	r2, r6
 802159a:	4629      	mov	r1, r5
 802159c:	4620      	mov	r0, r4
 802159e:	f7ff ff99 	bl	80214d4 <node_set_prev>
}
 80215a2:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
 80215a4:	6803      	ldr	r3, [r0, #0]
 80215a6:	4419      	add	r1, r3
 80215a8:	6849      	ldr	r1, [r1, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 80215aa:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 80215ac:	b119      	cbz	r1, 80215b6 <_lv_ll_remove+0x40>
            node_set_prev(ll_p, ll_p->head, NULL);
 80215ae:	2200      	movs	r2, #0
 80215b0:	f7ff ff90 	bl	80214d4 <node_set_prev>
 80215b4:	e7f5      	b.n	80215a2 <_lv_ll_remove+0x2c>
            ll_p->tail = NULL;
 80215b6:	2300      	movs	r3, #0
 80215b8:	6083      	str	r3, [r0, #8]
 80215ba:	e7f2      	b.n	80215a2 <_lv_ll_remove+0x2c>
    return *((lv_ll_node_t **)n_act_d);
 80215bc:	6803      	ldr	r3, [r0, #0]
 80215be:	58c9      	ldr	r1, [r1, r3]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 80215c0:	6081      	str	r1, [r0, #8]
        if(ll_p->tail == NULL) {
 80215c2:	b119      	cbz	r1, 80215cc <_lv_ll_remove+0x56>
            node_set_next(ll_p, ll_p->tail, NULL);
 80215c4:	2200      	movs	r2, #0
 80215c6:	f7ff ff8a 	bl	80214de <node_set_next>
 80215ca:	e7ea      	b.n	80215a2 <_lv_ll_remove+0x2c>
            ll_p->head = NULL;
 80215cc:	2300      	movs	r3, #0
 80215ce:	6043      	str	r3, [r0, #4]
 80215d0:	e7e7      	b.n	80215a2 <_lv_ll_remove+0x2c>
 80215d2:	4770      	bx	lr

080215d4 <_lv_ll_clear>:
    if(ll_p == NULL) return NULL;
 80215d4:	b188      	cbz	r0, 80215fa <_lv_ll_clear+0x26>
{
 80215d6:	b570      	push	{r4, r5, r6, lr}
 80215d8:	4606      	mov	r6, r0
    return ll_p->head;
 80215da:	6844      	ldr	r4, [r0, #4]
    while(i != NULL) {
 80215dc:	b164      	cbz	r4, 80215f8 <_lv_ll_clear+0x24>
    return *((lv_ll_node_t **)n_act_d);
 80215de:	4625      	mov	r5, r4
 80215e0:	6833      	ldr	r3, [r6, #0]
 80215e2:	441c      	add	r4, r3
 80215e4:	6864      	ldr	r4, [r4, #4]
        _lv_ll_remove(ll_p, i);
 80215e6:	4629      	mov	r1, r5
 80215e8:	4630      	mov	r0, r6
 80215ea:	f7ff ffc4 	bl	8021576 <_lv_ll_remove>
        lv_mem_free(i);
 80215ee:	4628      	mov	r0, r5
 80215f0:	f000 f958 	bl	80218a4 <lv_mem_free>
    while(i != NULL) {
 80215f4:	2c00      	cmp	r4, #0
 80215f6:	d1f2      	bne.n	80215de <_lv_ll_clear+0xa>
}
 80215f8:	bd70      	pop	{r4, r5, r6, pc}
 80215fa:	4770      	bx	lr

080215fc <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 80215fc:	b108      	cbz	r0, 8021602 <_lv_ll_get_head+0x6>
    return ll_p->head;
 80215fe:	6840      	ldr	r0, [r0, #4]
 8021600:	4770      	bx	lr
}
 8021602:	4770      	bx	lr

08021604 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8021604:	b108      	cbz	r0, 802160a <_lv_ll_get_tail+0x6>
    return ll_p->tail;
 8021606:	6880      	ldr	r0, [r0, #8]
 8021608:	4770      	bx	lr
}
 802160a:	4770      	bx	lr

0802160c <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 802160c:	6803      	ldr	r3, [r0, #0]
 802160e:	4419      	add	r1, r3
}
 8021610:	6848      	ldr	r0, [r1, #4]
 8021612:	4770      	bx	lr

08021614 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8021614:	6803      	ldr	r3, [r0, #0]
}
 8021616:	58c8      	ldr	r0, [r1, r3]
 8021618:	4770      	bx	lr

0802161a <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 802161a:	b148      	cbz	r0, 8021630 <_lv_ll_get_len+0x16>
    return ll_p->head;
 802161c:	6843      	ldr	r3, [r0, #4]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 802161e:	b14b      	cbz	r3, 8021634 <_lv_ll_get_len+0x1a>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8021620:	6802      	ldr	r2, [r0, #0]
 8021622:	3204      	adds	r2, #4
 8021624:	2000      	movs	r0, #0
        len++;
 8021626:	3001      	adds	r0, #1
    return *((lv_ll_node_t **)n_act_d);
 8021628:	589b      	ldr	r3, [r3, r2]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 802162a:	2b00      	cmp	r3, #0
 802162c:	d1fb      	bne.n	8021626 <_lv_ll_get_len+0xc>
 802162e:	4770      	bx	lr
 8021630:	2000      	movs	r0, #0
 8021632:	4770      	bx	lr
 8021634:	2000      	movs	r0, #0
}
 8021636:	4770      	bx	lr

08021638 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8021638:	b140      	cbz	r0, 802164c <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 802163a:	6842      	ldr	r2, [r0, #4]
 802163c:	b10a      	cbz	r2, 8021642 <_lv_ll_is_empty+0xa>
    return false;
 802163e:	2000      	movs	r0, #0
}
 8021640:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8021642:	6880      	ldr	r0, [r0, #8]
 8021644:	fab0 f080 	clz	r0, r0
 8021648:	0940      	lsrs	r0, r0, #5
 802164a:	4770      	bx	lr
    if(ll_p == NULL) return true;
 802164c:	2001      	movs	r0, #1
 802164e:	4770      	bx	lr

08021650 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 8021650:	4b1b      	ldr	r3, [pc, #108]	; (80216c0 <lv_trigo_sin+0x70>)
 8021652:	fb83 2300 	smull	r2, r3, r3, r0
 8021656:	4403      	add	r3, r0
 8021658:	17c2      	asrs	r2, r0, #31
 802165a:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 802165e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021662:	fb02 0013 	mls	r0, r2, r3, r0
 8021666:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 8021668:	2800      	cmp	r0, #0
 802166a:	bfbc      	itt	lt
 802166c:	1880      	addlt	r0, r0, r2
 802166e:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 8021670:	2859      	cmp	r0, #89	; 0x59
 8021672:	dc03      	bgt.n	802167c <lv_trigo_sin+0x2c>
        ret = sin0_90_table[angle];
 8021674:	4b13      	ldr	r3, [pc, #76]	; (80216c4 <lv_trigo_sin+0x74>)
 8021676:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 802167a:	4770      	bx	lr
    }
    else if(angle >= 90 && angle < 180) {
 802167c:	b280      	uxth	r0, r0
 802167e:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
 8021682:	b29b      	uxth	r3, r3
 8021684:	2b59      	cmp	r3, #89	; 0x59
 8021686:	d806      	bhi.n	8021696 <lv_trigo_sin+0x46>
        angle = 180 - angle;
 8021688:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 802168c:	b200      	sxth	r0, r0
 802168e:	4b0d      	ldr	r3, [pc, #52]	; (80216c4 <lv_trigo_sin+0x74>)
 8021690:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8021694:	4770      	bx	lr
    }
    else if(angle >= 180 && angle < 270) {
 8021696:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
 802169a:	b29b      	uxth	r3, r3
 802169c:	2b59      	cmp	r3, #89	; 0x59
 802169e:	d806      	bhi.n	80216ae <lv_trigo_sin+0x5e>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
 80216a0:	b21b      	sxth	r3, r3
 80216a2:	4a08      	ldr	r2, [pc, #32]	; (80216c4 <lv_trigo_sin+0x74>)
 80216a4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80216a8:	4240      	negs	r0, r0
 80216aa:	b200      	sxth	r0, r0
 80216ac:	4770      	bx	lr
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 80216ae:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 80216b2:	b200      	sxth	r0, r0
 80216b4:	4b03      	ldr	r3, [pc, #12]	; (80216c4 <lv_trigo_sin+0x74>)
 80216b6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80216ba:	4240      	negs	r0, r0
 80216bc:	b200      	sxth	r0, r0
    }

    return ret;
}
 80216be:	4770      	bx	lr
 80216c0:	b60b60b7 	.word	0xb60b60b7
 80216c4:	08032db0 	.word	0x08032db0

080216c8 <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 80216c8:	b530      	push	{r4, r5, lr}
    uint32_t t_rem  = 1024 - t;
 80216ca:	f5c0 6c80 	rsb	ip, r0, #1024	; 0x400
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 80216ce:	fb0c fe0c 	mul.w	lr, ip, ip
 80216d2:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 80216d6:	fb00 f400 	mul.w	r4, r0, r0
 80216da:	0aa4      	lsrs	r4, r4, #10
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 80216dc:	fb00 f202 	mul.w	r2, r0, r2
 80216e0:	fb0e f202 	mul.w	r2, lr, r2
 80216e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    uint32_t t3     = (t2 * t) >> 10;
 80216e8:	fb04 f000 	mul.w	r0, r4, r0
 80216ec:	0a80      	lsrs	r0, r0, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
    uint32_t v4 = (t3 * u3) >> 10;
 80216ee:	9d03      	ldr	r5, [sp, #12]
 80216f0:	fb05 f000 	mul.w	r0, r5, r0
 80216f4:	0a80      	lsrs	r0, r0, #10

    return v1 + v2 + v3 + v4;
 80216f6:	eb00 5012 	add.w	r0, r0, r2, lsr #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 80216fa:	fb03 f30c 	mul.w	r3, r3, ip
 80216fe:	fb04 f303 	mul.w	r3, r4, r3
 8021702:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    return v1 + v2 + v3 + v4;
 8021706:	eb00 5013 	add.w	r0, r0, r3, lsr #20
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 802170a:	fb0e fc0c 	mul.w	ip, lr, ip
 802170e:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8021712:	fb01 fc0c 	mul.w	ip, r1, ip
}
 8021716:	eb00 209c 	add.w	r0, r0, ip, lsr #10
 802171a:	bd30      	pop	{r4, r5, pc}

0802171c <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 802171c:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 802171e:	bfba      	itte	lt
 8021720:	4240      	neglt	r0, r0
        negflag += 0x01;    // x flag bit
 8021722:	2201      	movlt	r2, #1
    negflag = 0;
 8021724:	2200      	movge	r2, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 8021726:	2900      	cmp	r1, #0
 8021728:	db1c      	blt.n	8021764 <lv_atan2+0x48>
        y = (0 - y);        // is now +
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 802172a:	4288      	cmp	r0, r1
 802172c:	d91e      	bls.n	802176c <lv_atan2+0x50>
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 802172e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021732:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8021736:	fbb1 f0f0 	udiv	r0, r1, r0
        negflag += 0x10;    // octant flag bit
 802173a:	3210      	adds	r2, #16
 802173c:	b2d2      	uxtb	r2, r2
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 802173e:	b2c1      	uxtb	r1, r0
    if(tempdegree > 22) {    // if top half of range
 8021740:	2916      	cmp	r1, #22
 8021742:	d91a      	bls.n	802177a <lv_atan2+0x5e>
    comp = 0;
 8021744:	292c      	cmp	r1, #44	; 0x2c
 8021746:	bf8c      	ite	hi
 8021748:	2300      	movhi	r3, #0
 802174a:	2301      	movls	r3, #1
        if(tempdegree <= 44) comp++;
        if(tempdegree <= 41) comp++;
 802174c:	2929      	cmp	r1, #41	; 0x29
 802174e:	bf98      	it	ls
 8021750:	3301      	addls	r3, #1
        if(tempdegree <= 37) comp++;
 8021752:	2925      	cmp	r1, #37	; 0x25
 8021754:	bf9c      	itt	ls
 8021756:	3301      	addls	r3, #1
 8021758:	b2db      	uxtbls	r3, r3
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 802175a:	2920      	cmp	r1, #32
 802175c:	d81c      	bhi.n	8021798 <lv_atan2+0x7c>
 802175e:	3301      	adds	r3, #1
 8021760:	b2db      	uxtb	r3, r3
 8021762:	e019      	b.n	8021798 <lv_atan2+0x7c>
        negflag += 0x02;    // y flag bit
 8021764:	3202      	adds	r2, #2
 8021766:	b2d2      	uxtb	r2, r2
        y = (0 - y);        // is now +
 8021768:	4249      	negs	r1, r1
 802176a:	e7de      	b.n	802172a <lv_atan2+0xe>
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 802176c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021770:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8021774:	fbb0 f0f1 	udiv	r0, r0, r1
 8021778:	e7e1      	b.n	802173e <lv_atan2+0x22>
    comp = 0;
 802177a:	2901      	cmp	r1, #1
 802177c:	bf94      	ite	ls
 802177e:	2300      	movls	r3, #0
 8021780:	2301      	movhi	r3, #1
    }
    else {   // else is lower half of range
        if(tempdegree >= 2) comp++;
        if(tempdegree >= 6) comp++;
 8021782:	2905      	cmp	r1, #5
 8021784:	bf88      	it	hi
 8021786:	3301      	addhi	r3, #1
        if(tempdegree >= 10) comp++;
 8021788:	2909      	cmp	r1, #9
 802178a:	bf84      	itt	hi
 802178c:	3301      	addhi	r3, #1
 802178e:	b2db      	uxtbhi	r3, r3
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 8021790:	290e      	cmp	r1, #14
 8021792:	bf84      	itt	hi
 8021794:	3301      	addhi	r3, #1
 8021796:	b2db      	uxtbhi	r3, r3
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!
 8021798:	4418      	add	r0, r3

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 802179a:	f012 0f10 	tst.w	r2, #16
 802179e:	bf18      	it	ne
 80217a0:	f1c0 005a 	rsbne	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 80217a4:	f012 0f02 	tst.w	r2, #2
 80217a8:	d007      	beq.n	80217ba <lv_atan2+0x9e>
        if(negflag & 0x01)   // if -Y -X
 80217aa:	f012 0f01 	tst.w	r2, #1
            degree = (180 + degree);
 80217ae:	bf14      	ite	ne
 80217b0:	30b4      	addne	r0, #180	; 0xb4
        else        // else is -Y +X
            degree = (180 - degree);
 80217b2:	f1c0 00b4 	rsbeq	r0, r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 80217b6:	b280      	uxth	r0, r0
 80217b8:	4770      	bx	lr
        if(negflag & 0x01)   // if +Y -X
 80217ba:	f012 0f01 	tst.w	r2, #1
            degree = (360 - degree);
 80217be:	bf18      	it	ne
 80217c0:	f5c0 70b4 	rsbne	r0, r0, #360	; 0x168
 80217c4:	e7f7      	b.n	80217b6 <lv_atan2+0x9a>

080217c6 <lv_pow>:
 * @return base raised to the power exponent
 */
int64_t lv_pow(int64_t base, int8_t exp)
{
    int64_t result = 1;
    while(exp) {
 80217c6:	b1d2      	cbz	r2, 80217fe <lv_pow+0x38>
{
 80217c8:	b500      	push	{lr}
 80217ca:	4603      	mov	r3, r0
 80217cc:	468c      	mov	ip, r1
 80217ce:	4696      	mov	lr, r2
    int64_t result = 1;
 80217d0:	2001      	movs	r0, #1
 80217d2:	2100      	movs	r1, #0
 80217d4:	e008      	b.n	80217e8 <lv_pow+0x22>
        if(exp & 1)
            result *= base;
        exp >>= 1;
        base *= base;
 80217d6:	fb03 f20c 	mul.w	r2, r3, ip
 80217da:	fba3 3c03 	umull	r3, ip, r3, r3
 80217de:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    while(exp) {
 80217e2:	ea5f 0e6e 	movs.w	lr, lr, asr #1
 80217e6:	d00d      	beq.n	8021804 <lv_pow+0x3e>
        if(exp & 1)
 80217e8:	f01e 0f01 	tst.w	lr, #1
 80217ec:	d0f3      	beq.n	80217d6 <lv_pow+0x10>
            result *= base;
 80217ee:	fb00 f20c 	mul.w	r2, r0, ip
 80217f2:	fb03 2201 	mla	r2, r3, r1, r2
 80217f6:	fba0 0103 	umull	r0, r1, r0, r3
 80217fa:	4411      	add	r1, r2
 80217fc:	e7eb      	b.n	80217d6 <lv_pow+0x10>
    int64_t result = 1;
 80217fe:	2001      	movs	r0, #1
 8021800:	2100      	movs	r1, #0
    }

    return result;
}
 8021802:	4770      	bx	lr
 8021804:	f85d fb04 	ldr.w	pc, [sp], #4

08021808 <lv_map>:
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
    if(max_in >= min_in && x >= max_in) return max_out;
 8021808:	428a      	cmp	r2, r1
 802180a:	db10      	blt.n	802182e <lv_map+0x26>
 802180c:	4282      	cmp	r2, r0
 802180e:	dd14      	ble.n	802183a <lv_map+0x32>
    if(max_in >= min_in && x <= min_in) return min_out;
 8021810:	4281      	cmp	r1, r0
 8021812:	da14      	bge.n	802183e <lv_map+0x36>

    if(max_in <= min_in && x <= max_in) return max_out;
 8021814:	428a      	cmp	r2, r1
 8021816:	d014      	beq.n	8021842 <lv_map+0x3a>
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021818:	eba0 0c01 	sub.w	ip, r0, r1
    int32_t delta_out = max_out - min_out;
 802181c:	9800      	ldr	r0, [sp, #0]
 802181e:	1ac0      	subs	r0, r0, r3
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021820:	fb00 fc0c 	mul.w	ip, r0, ip
    int32_t delta_in = max_in - min_in;
 8021824:	1a52      	subs	r2, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021826:	fb9c f2f2 	sdiv	r2, ip, r2
 802182a:	18d0      	adds	r0, r2, r3
 802182c:	4770      	bx	lr
    if(max_in <= min_in && x <= max_in) return max_out;
 802182e:	4282      	cmp	r2, r0
 8021830:	da09      	bge.n	8021846 <lv_map+0x3e>
    if(max_in <= min_in && x >= min_in) return min_out;
 8021832:	4281      	cmp	r1, r0
 8021834:	dcf0      	bgt.n	8021818 <lv_map+0x10>
 8021836:	4618      	mov	r0, r3
}
 8021838:	4770      	bx	lr
    if(max_in >= min_in && x >= max_in) return max_out;
 802183a:	9800      	ldr	r0, [sp, #0]
 802183c:	4770      	bx	lr
    if(max_in >= min_in && x <= min_in) return min_out;
 802183e:	4618      	mov	r0, r3
 8021840:	4770      	bx	lr
    if(max_in <= min_in && x <= max_in) return max_out;
 8021842:	9800      	ldr	r0, [sp, #0]
 8021844:	4770      	bx	lr
 8021846:	9800      	ldr	r0, [sp, #0]
 8021848:	4770      	bx	lr
	...

0802184c <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 802184c:	b508      	push	{r3, lr}
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 802184e:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8021852:	4803      	ldr	r0, [pc, #12]	; (8021860 <lv_mem_init+0x14>)
 8021854:	f001 feaa 	bl	80235ac <lv_tlsf_create_with_pool>
 8021858:	4b02      	ldr	r3, [pc, #8]	; (8021864 <lv_mem_init+0x18>)
 802185a:	6018      	str	r0, [r3, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 802185c:	bd08      	pop	{r3, pc}
 802185e:	bf00      	nop
 8021860:	2000297c 	.word	0x2000297c
 8021864:	20002978 	.word	0x20002978

08021868 <lv_mem_alloc>:
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8021868:	b908      	cbnz	r0, 802186e <lv_mem_alloc+0x6>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 802186a:	480a      	ldr	r0, [pc, #40]	; (8021894 <lv_mem_alloc+0x2c>)
        max_used = LV_MAX(cur_used, max_used);
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 802186c:	4770      	bx	lr
{
 802186e:	b510      	push	{r4, lr}
 8021870:	4604      	mov	r4, r0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8021872:	4601      	mov	r1, r0
 8021874:	4b08      	ldr	r3, [pc, #32]	; (8021898 <lv_mem_alloc+0x30>)
 8021876:	6818      	ldr	r0, [r3, #0]
 8021878:	f001 fea6 	bl	80235c8 <lv_tlsf_malloc>
    if(alloc) {
 802187c:	b148      	cbz	r0, 8021892 <lv_mem_alloc+0x2a>
        cur_used += size;
 802187e:	4b07      	ldr	r3, [pc, #28]	; (802189c <lv_mem_alloc+0x34>)
 8021880:	681a      	ldr	r2, [r3, #0]
 8021882:	4414      	add	r4, r2
 8021884:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8021886:	4a06      	ldr	r2, [pc, #24]	; (80218a0 <lv_mem_alloc+0x38>)
 8021888:	6813      	ldr	r3, [r2, #0]
 802188a:	429c      	cmp	r4, r3
 802188c:	bf38      	it	cc
 802188e:	461c      	movcc	r4, r3
 8021890:	6014      	str	r4, [r2, #0]
}
 8021892:	bd10      	pop	{r4, pc}
 8021894:	2000074c 	.word	0x2000074c
 8021898:	20002978 	.word	0x20002978
 802189c:	20002970 	.word	0x20002970
 80218a0:	20002974 	.word	0x20002974

080218a4 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 80218a4:	b508      	push	{r3, lr}
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 80218a6:	4b0a      	ldr	r3, [pc, #40]	; (80218d0 <lv_mem_free+0x2c>)
 80218a8:	4298      	cmp	r0, r3
 80218aa:	d00c      	beq.n	80218c6 <lv_mem_free+0x22>
 80218ac:	4601      	mov	r1, r0
    if(data == NULL) return;
 80218ae:	b150      	cbz	r0, 80218c6 <lv_mem_free+0x22>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 80218b0:	4b08      	ldr	r3, [pc, #32]	; (80218d4 <lv_mem_free+0x30>)
 80218b2:	6818      	ldr	r0, [r3, #0]
 80218b4:	f001 fea2 	bl	80235fc <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 80218b8:	4b07      	ldr	r3, [pc, #28]	; (80218d8 <lv_mem_free+0x34>)
 80218ba:	681b      	ldr	r3, [r3, #0]
 80218bc:	4283      	cmp	r3, r0
 80218be:	d903      	bls.n	80218c8 <lv_mem_free+0x24>
 80218c0:	1a18      	subs	r0, r3, r0
 80218c2:	4b05      	ldr	r3, [pc, #20]	; (80218d8 <lv_mem_free+0x34>)
 80218c4:	6018      	str	r0, [r3, #0]
    else cur_used = 0;
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 80218c6:	bd08      	pop	{r3, pc}
    else cur_used = 0;
 80218c8:	4b03      	ldr	r3, [pc, #12]	; (80218d8 <lv_mem_free+0x34>)
 80218ca:	2200      	movs	r2, #0
 80218cc:	601a      	str	r2, [r3, #0]
 80218ce:	e7fa      	b.n	80218c6 <lv_mem_free+0x22>
 80218d0:	2000074c 	.word	0x2000074c
 80218d4:	20002978 	.word	0x20002978
 80218d8:	20002970 	.word	0x20002970

080218dc <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 80218dc:	b508      	push	{r3, lr}
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 80218de:	b149      	cbz	r1, 80218f4 <lv_mem_realloc+0x18>
 80218e0:	460a      	mov	r2, r1
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80218e2:	4b08      	ldr	r3, [pc, #32]	; (8021904 <lv_mem_realloc+0x28>)
 80218e4:	4298      	cmp	r0, r3
 80218e6:	d009      	beq.n	80218fc <lv_mem_realloc+0x20>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 80218e8:	4601      	mov	r1, r0
 80218ea:	4b07      	ldr	r3, [pc, #28]	; (8021908 <lv_mem_realloc+0x2c>)
 80218ec:	6818      	ldr	r0, [r3, #0]
 80218ee:	f001 fecb 	bl	8023688 <lv_tlsf_realloc>
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 80218f2:	bd08      	pop	{r3, pc}
        lv_mem_free(data_p);
 80218f4:	f7ff ffd6 	bl	80218a4 <lv_mem_free>
        return &zero_mem;
 80218f8:	4802      	ldr	r0, [pc, #8]	; (8021904 <lv_mem_realloc+0x28>)
 80218fa:	e7fa      	b.n	80218f2 <lv_mem_realloc+0x16>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80218fc:	4608      	mov	r0, r1
 80218fe:	f7ff ffb3 	bl	8021868 <lv_mem_alloc>
 8021902:	e7f6      	b.n	80218f2 <lv_mem_realloc+0x16>
 8021904:	2000074c 	.word	0x2000074c
 8021908:	20002978 	.word	0x20002978

0802190c <lv_mem_buf_get>:
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
    if(size == 0) return NULL;
 802190c:	2800      	cmp	r0, #0
 802190e:	d05a      	beq.n	80219c6 <lv_mem_buf_get+0xba>
{
 8021910:	b538      	push	{r3, r4, r5, lr}
 8021912:	4604      	mov	r4, r0
 8021914:	2300      	movs	r3, #0

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 8021916:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 802191a:	492c      	ldr	r1, [pc, #176]	; (80219cc <lv_mem_buf_get+0xc0>)
 802191c:	1d0d      	adds	r5, r1, #4
 802191e:	e00e      	b.n	802193e <lv_mem_buf_get+0x32>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8021920:	4a2a      	ldr	r2, [pc, #168]	; (80219cc <lv_mem_buf_get+0xc0>)
 8021922:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8021926:	798b      	ldrb	r3, [r1, #6]
 8021928:	f043 0301 	orr.w	r3, r3, #1
 802192c:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 802192e:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 8021932:	e034      	b.n	802199e <lv_mem_buf_get+0x92>
            }
            else if(i_guess < 0) {
                i_guess = i;
 8021934:	fa4f fc83 	sxtb.w	ip, r3
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021938:	3301      	adds	r3, #1
 802193a:	2b10      	cmp	r3, #16
 802193c:	d016      	beq.n	802196c <lv_mem_buf_get+0x60>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 802193e:	4618      	mov	r0, r3
 8021940:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8021944:	7992      	ldrb	r2, [r2, #6]
 8021946:	f012 0f01 	tst.w	r2, #1
 802194a:	d1f5      	bne.n	8021938 <lv_mem_buf_get+0x2c>
 802194c:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
 8021950:	42a2      	cmp	r2, r4
 8021952:	d3f1      	bcc.n	8021938 <lv_mem_buf_get+0x2c>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8021954:	d0e4      	beq.n	8021920 <lv_mem_buf_get+0x14>
            else if(i_guess < 0) {
 8021956:	f1bc 0f00 	cmp.w	ip, #0
 802195a:	dbeb      	blt.n	8021934 <lv_mem_buf_get+0x28>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 802195c:	eb01 00cc 	add.w	r0, r1, ip, lsl #3
 8021960:	8880      	ldrh	r0, [r0, #4]
 8021962:	4290      	cmp	r0, r2
                i_guess = i;
 8021964:	bf88      	it	hi
 8021966:	fa4f fc83 	sxtbhi.w	ip, r3
 802196a:	e7e5      	b.n	8021938 <lv_mem_buf_get+0x2c>
            }
        }
    }

    if(i_guess >= 0) {
 802196c:	f1bc 0f00 	cmp.w	ip, #0
 8021970:	da0c      	bge.n	802198c <lv_mem_buf_get+0x80>
 8021972:	2300      	movs	r3, #0
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8021974:	4915      	ldr	r1, [pc, #84]	; (80219cc <lv_mem_buf_get+0xc0>)
 8021976:	461d      	mov	r5, r3
 8021978:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 802197c:	7992      	ldrb	r2, [r2, #6]
 802197e:	f012 0f01 	tst.w	r2, #1
 8021982:	d00d      	beq.n	80219a0 <lv_mem_buf_get+0x94>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021984:	3301      	adds	r3, #1
 8021986:	2b10      	cmp	r3, #16
 8021988:	d1f5      	bne.n	8021976 <lv_mem_buf_get+0x6a>
            return LV_GC_ROOT(lv_mem_buf[i]).p;
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 802198a:	e7fe      	b.n	802198a <lv_mem_buf_get+0x7e>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 802198c:	4a0f      	ldr	r2, [pc, #60]	; (80219cc <lv_mem_buf_get+0xc0>)
 802198e:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
 8021992:	798b      	ldrb	r3, [r1, #6]
 8021994:	f043 0301 	orr.w	r3, r3, #1
 8021998:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 802199a:	f852 003c 	ldr.w	r0, [r2, ip, lsl #3]
    return NULL;
}
 802199e:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 80219a0:	4621      	mov	r1, r4
 80219a2:	4b0a      	ldr	r3, [pc, #40]	; (80219cc <lv_mem_buf_get+0xc0>)
 80219a4:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 80219a8:	f7ff ff98 	bl	80218dc <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 80219ac:	b150      	cbz	r0, 80219c4 <lv_mem_buf_get+0xb8>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80219ae:	4907      	ldr	r1, [pc, #28]	; (80219cc <lv_mem_buf_get+0xc0>)
 80219b0:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 80219b4:	799a      	ldrb	r2, [r3, #6]
 80219b6:	f042 0201 	orr.w	r2, r2, #1
 80219ba:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 80219bc:	809c      	strh	r4, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 80219be:	f841 0035 	str.w	r0, [r1, r5, lsl #3]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 80219c2:	e7ec      	b.n	802199e <lv_mem_buf_get+0x92>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 80219c4:	e7fe      	b.n	80219c4 <lv_mem_buf_get+0xb8>
    if(size == 0) return NULL;
 80219c6:	2000      	movs	r0, #0
}
 80219c8:	4770      	bx	lr
 80219ca:	bf00      	nop
 80219cc:	200028f0 	.word	0x200028f0

080219d0 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 80219d0:	2300      	movs	r3, #0
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 80219d2:	490a      	ldr	r1, [pc, #40]	; (80219fc <lv_mem_buf_release+0x2c>)
 80219d4:	469c      	mov	ip, r3
 80219d6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80219da:	4282      	cmp	r2, r0
 80219dc:	d003      	beq.n	80219e6 <lv_mem_buf_release+0x16>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80219de:	3301      	adds	r3, #1
 80219e0:	2b10      	cmp	r3, #16
 80219e2:	d1f7      	bne.n	80219d4 <lv_mem_buf_release+0x4>
            return;
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 80219e4:	4770      	bx	lr
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80219e6:	4b05      	ldr	r3, [pc, #20]	; (80219fc <lv_mem_buf_release+0x2c>)
 80219e8:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80219ec:	f89c 3006 	ldrb.w	r3, [ip, #6]
 80219f0:	f36f 0300 	bfc	r3, #0, #1
 80219f4:	f88c 3006 	strb.w	r3, [ip, #6]
            return;
 80219f8:	4770      	bx	lr
 80219fa:	bf00      	nop
 80219fc:	200028f0 	.word	0x200028f0

08021a00 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 8021a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a02:	2400      	movs	r4, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8021a04:	4d0c      	ldr	r5, [pc, #48]	; (8021a38 <lv_mem_buf_free_all+0x38>)
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8021a06:	4626      	mov	r6, r4
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8021a08:	1d2f      	adds	r7, r5, #4
 8021a0a:	e002      	b.n	8021a12 <lv_mem_buf_free_all+0x12>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021a0c:	3401      	adds	r4, #1
 8021a0e:	2c10      	cmp	r4, #16
 8021a10:	d010      	beq.n	8021a34 <lv_mem_buf_free_all+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8021a12:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 8021a16:	2800      	cmp	r0, #0
 8021a18:	d0f8      	beq.n	8021a0c <lv_mem_buf_free_all+0xc>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8021a1a:	f7ff ff43 	bl	80218a4 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8021a1e:	f845 6034 	str.w	r6, [r5, r4, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8021a22:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8021a26:	799a      	ldrb	r2, [r3, #6]
 8021a28:	f366 0200 	bfi	r2, r6, #0, #1
 8021a2c:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8021a2e:	f827 6034 	strh.w	r6, [r7, r4, lsl #3]
 8021a32:	e7eb      	b.n	8021a0c <lv_mem_buf_free_all+0xc>
        }
    }
}
 8021a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a36:	bf00      	nop
 8021a38:	200028f0 	.word	0x200028f0

08021a3c <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 8021a3c:	b570      	push	{r4, r5, r6, lr}
    uint8_t * d8 = dst;
    const uint8_t * s8 = src;

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8021a3e:	f000 0303 	and.w	r3, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8021a42:	f001 0503 	and.w	r5, r1, #3

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 8021a46:	42ab      	cmp	r3, r5
 8021a48:	f000 80ac 	beq.w	8021ba4 <lv_memcpy+0x168>
        while(len > 32) {
 8021a4c:	2a20      	cmp	r2, #32
 8021a4e:	f240 80a7 	bls.w	8021ba0 <lv_memcpy+0x164>
 8021a52:	f100 0320 	add.w	r3, r0, #32
 8021a56:	f101 0420 	add.w	r4, r1, #32
 8021a5a:	f1a2 0e21 	sub.w	lr, r2, #33	; 0x21
 8021a5e:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 8021a62:	f02e 0e1f 	bic.w	lr, lr, #31
 8021a66:	4486      	add	lr, r0
 8021a68:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            REPEAT8(COPY8);
 8021a6c:	f814 5c20 	ldrb.w	r5, [r4, #-32]
 8021a70:	f803 5c20 	strb.w	r5, [r3, #-32]
 8021a74:	f814 5c1f 	ldrb.w	r5, [r4, #-31]
 8021a78:	f803 5c1f 	strb.w	r5, [r3, #-31]
 8021a7c:	f814 5c1e 	ldrb.w	r5, [r4, #-30]
 8021a80:	f803 5c1e 	strb.w	r5, [r3, #-30]
 8021a84:	f814 5c1d 	ldrb.w	r5, [r4, #-29]
 8021a88:	f803 5c1d 	strb.w	r5, [r3, #-29]
 8021a8c:	f814 5c1c 	ldrb.w	r5, [r4, #-28]
 8021a90:	f803 5c1c 	strb.w	r5, [r3, #-28]
 8021a94:	f814 5c1b 	ldrb.w	r5, [r4, #-27]
 8021a98:	f803 5c1b 	strb.w	r5, [r3, #-27]
 8021a9c:	f814 5c1a 	ldrb.w	r5, [r4, #-26]
 8021aa0:	f803 5c1a 	strb.w	r5, [r3, #-26]
 8021aa4:	f814 5c19 	ldrb.w	r5, [r4, #-25]
 8021aa8:	f803 5c19 	strb.w	r5, [r3, #-25]
            REPEAT8(COPY8);
 8021aac:	f814 5c18 	ldrb.w	r5, [r4, #-24]
 8021ab0:	f803 5c18 	strb.w	r5, [r3, #-24]
 8021ab4:	f814 5c17 	ldrb.w	r5, [r4, #-23]
 8021ab8:	f803 5c17 	strb.w	r5, [r3, #-23]
 8021abc:	f814 5c16 	ldrb.w	r5, [r4, #-22]
 8021ac0:	f803 5c16 	strb.w	r5, [r3, #-22]
 8021ac4:	f814 5c15 	ldrb.w	r5, [r4, #-21]
 8021ac8:	f803 5c15 	strb.w	r5, [r3, #-21]
 8021acc:	f814 5c14 	ldrb.w	r5, [r4, #-20]
 8021ad0:	f803 5c14 	strb.w	r5, [r3, #-20]
 8021ad4:	f814 5c13 	ldrb.w	r5, [r4, #-19]
 8021ad8:	f803 5c13 	strb.w	r5, [r3, #-19]
 8021adc:	f814 5c12 	ldrb.w	r5, [r4, #-18]
 8021ae0:	f803 5c12 	strb.w	r5, [r3, #-18]
 8021ae4:	f814 5c11 	ldrb.w	r5, [r4, #-17]
 8021ae8:	f803 5c11 	strb.w	r5, [r3, #-17]
            REPEAT8(COPY8);
 8021aec:	f814 5c10 	ldrb.w	r5, [r4, #-16]
 8021af0:	f803 5c10 	strb.w	r5, [r3, #-16]
 8021af4:	f814 5c0f 	ldrb.w	r5, [r4, #-15]
 8021af8:	f803 5c0f 	strb.w	r5, [r3, #-15]
 8021afc:	f814 5c0e 	ldrb.w	r5, [r4, #-14]
 8021b00:	f803 5c0e 	strb.w	r5, [r3, #-14]
 8021b04:	f814 5c0d 	ldrb.w	r5, [r4, #-13]
 8021b08:	f803 5c0d 	strb.w	r5, [r3, #-13]
 8021b0c:	f814 5c0c 	ldrb.w	r5, [r4, #-12]
 8021b10:	f803 5c0c 	strb.w	r5, [r3, #-12]
 8021b14:	f814 5c0b 	ldrb.w	r5, [r4, #-11]
 8021b18:	f803 5c0b 	strb.w	r5, [r3, #-11]
 8021b1c:	f814 5c0a 	ldrb.w	r5, [r4, #-10]
 8021b20:	f803 5c0a 	strb.w	r5, [r3, #-10]
 8021b24:	f814 5c09 	ldrb.w	r5, [r4, #-9]
 8021b28:	f803 5c09 	strb.w	r5, [r3, #-9]
            REPEAT8(COPY8);
 8021b2c:	f814 5c08 	ldrb.w	r5, [r4, #-8]
 8021b30:	f803 5c08 	strb.w	r5, [r3, #-8]
 8021b34:	f814 5c07 	ldrb.w	r5, [r4, #-7]
 8021b38:	f803 5c07 	strb.w	r5, [r3, #-7]
 8021b3c:	f814 5c06 	ldrb.w	r5, [r4, #-6]
 8021b40:	f803 5c06 	strb.w	r5, [r3, #-6]
 8021b44:	f814 5c05 	ldrb.w	r5, [r4, #-5]
 8021b48:	f803 5c05 	strb.w	r5, [r3, #-5]
 8021b4c:	f814 5c04 	ldrb.w	r5, [r4, #-4]
 8021b50:	f803 5c04 	strb.w	r5, [r3, #-4]
 8021b54:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 8021b58:	f803 5c03 	strb.w	r5, [r3, #-3]
 8021b5c:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 8021b60:	f803 5c02 	strb.w	r5, [r3, #-2]
 8021b64:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8021b68:	f803 5c01 	strb.w	r5, [r3, #-1]
        while(len > 32) {
 8021b6c:	3320      	adds	r3, #32
 8021b6e:	3420      	adds	r4, #32
 8021b70:	4573      	cmp	r3, lr
 8021b72:	f47f af7b 	bne.w	8021a6c <lv_memcpy+0x30>
 8021b76:	f10c 0401 	add.w	r4, ip, #1
            REPEAT8(COPY8);
 8021b7a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8021b7e:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8021b82:	3a20      	subs	r2, #32
            len -= 32;
 8021b84:	ebcc 6ccc 	rsb	ip, ip, ip, lsl #27
 8021b88:	eb02 124c 	add.w	r2, r2, ip, lsl #5
        }
        while(len) {
 8021b8c:	b13a      	cbz	r2, 8021b9e <lv_memcpy+0x162>
 8021b8e:	3901      	subs	r1, #1
 8021b90:	441a      	add	r2, r3
            COPY8
 8021b92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021b96:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
 8021b9a:	4293      	cmp	r3, r2
 8021b9c:	d1f9      	bne.n	8021b92 <lv_memcpy+0x156>
        COPY8
        len--;
    }

    return dst;
}
 8021b9e:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t * d8 = dst;
 8021ba0:	4603      	mov	r3, r0
 8021ba2:	e7f3      	b.n	8021b8c <lv_memcpy+0x150>
 8021ba4:	460c      	mov	r4, r1
    if(d_align) {
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d166      	bne.n	8021c78 <lv_memcpy+0x23c>
    uint8_t * d8 = dst;
 8021baa:	4686      	mov	lr, r0
    while(len > 32) {
 8021bac:	2a20      	cmp	r2, #32
 8021bae:	bf98      	it	ls
 8021bb0:	4673      	movls	r3, lr
 8021bb2:	d93a      	bls.n	8021c2a <lv_memcpy+0x1ee>
 8021bb4:	f10e 0320 	add.w	r3, lr, #32
 8021bb8:	f101 0c20 	add.w	ip, r1, #32
 8021bbc:	f1a2 0621 	sub.w	r6, r2, #33	; 0x21
 8021bc0:	0975      	lsrs	r5, r6, #5
 8021bc2:	f10e 0440 	add.w	r4, lr, #64	; 0x40
 8021bc6:	f026 061f 	bic.w	r6, r6, #31
 8021bca:	4434      	add	r4, r6
        REPEAT8(COPY32)
 8021bcc:	f85c 6c20 	ldr.w	r6, [ip, #-32]
 8021bd0:	f843 6c20 	str.w	r6, [r3, #-32]
 8021bd4:	f85c 6c1c 	ldr.w	r6, [ip, #-28]
 8021bd8:	f843 6c1c 	str.w	r6, [r3, #-28]
 8021bdc:	f85c 6c18 	ldr.w	r6, [ip, #-24]
 8021be0:	f843 6c18 	str.w	r6, [r3, #-24]
 8021be4:	f85c 6c14 	ldr.w	r6, [ip, #-20]
 8021be8:	f843 6c14 	str.w	r6, [r3, #-20]
 8021bec:	f85c 6c10 	ldr.w	r6, [ip, #-16]
 8021bf0:	f843 6c10 	str.w	r6, [r3, #-16]
 8021bf4:	f85c 6c0c 	ldr.w	r6, [ip, #-12]
 8021bf8:	f843 6c0c 	str.w	r6, [r3, #-12]
 8021bfc:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8021c00:	f843 6c08 	str.w	r6, [r3, #-8]
 8021c04:	f85c 6c04 	ldr.w	r6, [ip, #-4]
 8021c08:	f843 6c04 	str.w	r6, [r3, #-4]
    while(len > 32) {
 8021c0c:	3320      	adds	r3, #32
 8021c0e:	f10c 0c20 	add.w	ip, ip, #32
 8021c12:	42a3      	cmp	r3, r4
 8021c14:	d1da      	bne.n	8021bcc <lv_memcpy+0x190>
 8021c16:	1c6c      	adds	r4, r5, #1
        REPEAT8(COPY32)
 8021c18:	eb0e 1344 	add.w	r3, lr, r4, lsl #5
 8021c1c:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8021c20:	3a20      	subs	r2, #32
        len -= 32;
 8021c22:	ebc5 65c5 	rsb	r5, r5, r5, lsl #27
 8021c26:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    while(len > 4) {
 8021c2a:	2a04      	cmp	r2, #4
 8021c2c:	d919      	bls.n	8021c62 <lv_memcpy+0x226>
 8021c2e:	1f0c      	subs	r4, r1, #4
 8021c30:	f1a2 0c05 	sub.w	ip, r2, #5
 8021c34:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
 8021c38:	f02c 0c03 	bic.w	ip, ip, #3
 8021c3c:	448c      	add	ip, r1
 8021c3e:	461d      	mov	r5, r3
        COPY32;
 8021c40:	f854 6f04 	ldr.w	r6, [r4, #4]!
 8021c44:	f845 6b04 	str.w	r6, [r5], #4
    while(len > 4) {
 8021c48:	4564      	cmp	r4, ip
 8021c4a:	d1f9      	bne.n	8021c40 <lv_memcpy+0x204>
 8021c4c:	f10e 0401 	add.w	r4, lr, #1
        COPY32;
 8021c50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021c54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021c58:	3a04      	subs	r2, #4
        len -= 4;
 8021c5a:	ebce 7e8e 	rsb	lr, lr, lr, lsl #30
 8021c5e:	eb02 028e 	add.w	r2, r2, lr, lsl #2
    while(len) {
 8021c62:	2a00      	cmp	r2, #0
 8021c64:	d09b      	beq.n	8021b9e <lv_memcpy+0x162>
 8021c66:	3901      	subs	r1, #1
 8021c68:	441a      	add	r2, r3
        COPY8
 8021c6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021c6e:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
 8021c72:	4293      	cmp	r3, r2
 8021c74:	d1f9      	bne.n	8021c6a <lv_memcpy+0x22e>
 8021c76:	e792      	b.n	8021b9e <lv_memcpy+0x162>
        d_align = ALIGN_MASK + 1 - d_align;
 8021c78:	f1c3 0e04 	rsb	lr, r3, #4
        while(d_align && len) {
 8021c7c:	b16a      	cbz	r2, 8021c9a <lv_memcpy+0x25e>
 8021c7e:	4486      	add	lr, r0
    uint8_t * d8 = dst;
 8021c80:	4603      	mov	r3, r0
            COPY8;
 8021c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c86:	f803 1b01 	strb.w	r1, [r3], #1
 8021c8a:	4621      	mov	r1, r4
            len--;
 8021c8c:	3a01      	subs	r2, #1
        while(d_align && len) {
 8021c8e:	4573      	cmp	r3, lr
 8021c90:	d08c      	beq.n	8021bac <lv_memcpy+0x170>
 8021c92:	2a00      	cmp	r2, #0
 8021c94:	d1f5      	bne.n	8021c82 <lv_memcpy+0x246>
    while(len > 4) {
 8021c96:	2200      	movs	r2, #0
 8021c98:	e7e3      	b.n	8021c62 <lv_memcpy+0x226>
    uint8_t * d8 = dst;
 8021c9a:	4603      	mov	r3, r0
 8021c9c:	e7fb      	b.n	8021c96 <lv_memcpy+0x25a>

08021c9e <lv_memset>:
    uint8_t * d8 = (uint8_t *)dst;

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 8021c9e:	f010 0303 	ands.w	r3, r0, #3
 8021ca2:	d013      	beq.n	8021ccc <lv_memset+0x2e>
        d_align = ALIGN_MASK + 1 - d_align;
 8021ca4:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8021ca8:	b13a      	cbz	r2, 8021cba <lv_memset+0x1c>
 8021caa:	4403      	add	r3, r0
            SET8(v);
 8021cac:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
 8021cb0:	3a01      	subs	r2, #1
        while(d_align && len) {
 8021cb2:	4298      	cmp	r0, r3
 8021cb4:	d009      	beq.n	8021cca <lv_memset+0x2c>
 8021cb6:	2a00      	cmp	r2, #0
 8021cb8:	d1f8      	bne.n	8021cac <lv_memset+0xe>

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);

    uint32_t * d32 = (uint32_t *)d8;

    while(len > 32) {
 8021cba:	2200      	movs	r2, #0
        SET32(v32);
        len -= 4;
    }

    d8 = (uint8_t *)d32;
    while(len) {
 8021cbc:	b122      	cbz	r2, 8021cc8 <lv_memset+0x2a>
 8021cbe:	4402      	add	r2, r0
        SET8(v);
 8021cc0:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
 8021cc4:	4290      	cmp	r0, r2
 8021cc6:	d1fb      	bne.n	8021cc0 <lv_memset+0x22>
 8021cc8:	4770      	bx	lr
            SET8(v);
 8021cca:	4618      	mov	r0, r3
{
 8021ccc:	b530      	push	{r4, r5, lr}
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 8021cce:	040c      	lsls	r4, r1, #16
 8021cd0:	eb04 2401 	add.w	r4, r4, r1, lsl #8
 8021cd4:	440c      	add	r4, r1
 8021cd6:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
 8021cda:	2a20      	cmp	r2, #32
 8021cdc:	d940      	bls.n	8021d60 <lv_memset+0xc2>
 8021cde:	f100 0320 	add.w	r3, r0, #32
 8021ce2:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
 8021ce6:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 8021cea:	f100 0c40 	add.w	ip, r0, #64	; 0x40
 8021cee:	f025 051f 	bic.w	r5, r5, #31
 8021cf2:	44ac      	add	ip, r5
        REPEAT8(SET32(v32));
 8021cf4:	f843 4c20 	str.w	r4, [r3, #-32]
 8021cf8:	f843 4c1c 	str.w	r4, [r3, #-28]
 8021cfc:	f843 4c18 	str.w	r4, [r3, #-24]
 8021d00:	f843 4c14 	str.w	r4, [r3, #-20]
 8021d04:	f843 4c10 	str.w	r4, [r3, #-16]
 8021d08:	f843 4c0c 	str.w	r4, [r3, #-12]
 8021d0c:	f843 4c08 	str.w	r4, [r3, #-8]
 8021d10:	f843 4c04 	str.w	r4, [r3, #-4]
    while(len > 32) {
 8021d14:	3320      	adds	r3, #32
 8021d16:	4563      	cmp	r3, ip
 8021d18:	d1ec      	bne.n	8021cf4 <lv_memset+0x56>
        REPEAT8(SET32(v32));
 8021d1a:	f10e 0301 	add.w	r3, lr, #1
 8021d1e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8021d22:	3a20      	subs	r2, #32
        len -= 32;
 8021d24:	ebce 6ece 	rsb	lr, lr, lr, lsl #27
 8021d28:	eb02 124e 	add.w	r2, r2, lr, lsl #5
    while(len > 4) {
 8021d2c:	2a04      	cmp	r2, #4
 8021d2e:	d919      	bls.n	8021d64 <lv_memset+0xc6>
 8021d30:	f1a2 0c05 	sub.w	ip, r2, #5
 8021d34:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8021d38:	f10c 0001 	add.w	r0, ip, #1
 8021d3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        SET32(v32);
 8021d40:	f843 4b04 	str.w	r4, [r3], #4
    while(len > 4) {
 8021d44:	4283      	cmp	r3, r0
 8021d46:	d1fb      	bne.n	8021d40 <lv_memset+0xa2>
 8021d48:	3a04      	subs	r2, #4
        len -= 4;
 8021d4a:	ebcc 7c8c 	rsb	ip, ip, ip, lsl #30
 8021d4e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    while(len) {
 8021d52:	b122      	cbz	r2, 8021d5e <lv_memset+0xc0>
 8021d54:	4402      	add	r2, r0
        SET8(v);
 8021d56:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
 8021d5a:	4290      	cmp	r0, r2
 8021d5c:	d1fb      	bne.n	8021d56 <lv_memset+0xb8>
        len--;
    }
}
 8021d5e:	bd30      	pop	{r4, r5, pc}
    while(len > 32) {
 8021d60:	4603      	mov	r3, r0
 8021d62:	e7e3      	b.n	8021d2c <lv_memset+0x8e>
    while(len > 4) {
 8021d64:	4618      	mov	r0, r3
 8021d66:	e7f4      	b.n	8021d52 <lv_memset+0xb4>

08021d68 <lv_memset_00>:
{
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 8021d68:	f010 0303 	ands.w	r3, r0, #3
 8021d6c:	d14b      	bne.n	8021e06 <lv_memset_00+0x9e>
{
 8021d6e:	b500      	push	{lr}
            d_align--;
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 8021d70:	2920      	cmp	r1, #32
 8021d72:	bf98      	it	ls
 8021d74:	4603      	movls	r3, r0
 8021d76:	d927      	bls.n	8021dc8 <lv_memset_00+0x60>
 8021d78:	f100 0320 	add.w	r3, r0, #32
 8021d7c:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
 8021d80:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8021d84:	f100 0c40 	add.w	ip, r0, #64	; 0x40
 8021d88:	f022 021f 	bic.w	r2, r2, #31
 8021d8c:	4494      	add	ip, r2
        REPEAT8(SET32(0));
 8021d8e:	2200      	movs	r2, #0
 8021d90:	f843 2c20 	str.w	r2, [r3, #-32]
 8021d94:	f843 2c1c 	str.w	r2, [r3, #-28]
 8021d98:	f843 2c18 	str.w	r2, [r3, #-24]
 8021d9c:	f843 2c14 	str.w	r2, [r3, #-20]
 8021da0:	f843 2c10 	str.w	r2, [r3, #-16]
 8021da4:	f843 2c0c 	str.w	r2, [r3, #-12]
 8021da8:	f843 2c08 	str.w	r2, [r3, #-8]
 8021dac:	f843 2c04 	str.w	r2, [r3, #-4]
    while(len > 32) {
 8021db0:	3320      	adds	r3, #32
 8021db2:	4563      	cmp	r3, ip
 8021db4:	d1ec      	bne.n	8021d90 <lv_memset_00+0x28>
        REPEAT8(SET32(0));
 8021db6:	f10e 0301 	add.w	r3, lr, #1
 8021dba:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8021dbe:	3920      	subs	r1, #32
        len -= 32;
 8021dc0:	ebce 6ece 	rsb	lr, lr, lr, lsl #27
 8021dc4:	eb01 114e 	add.w	r1, r1, lr, lsl #5
    }

    while(len > 4) {
 8021dc8:	2904      	cmp	r1, #4
 8021dca:	d931      	bls.n	8021e30 <lv_memset_00+0xc8>
 8021dcc:	f1a1 0c05 	sub.w	ip, r1, #5
 8021dd0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8021dd4:	f10c 0001 	add.w	r0, ip, #1
 8021dd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        SET32(0);
 8021ddc:	2200      	movs	r2, #0
 8021dde:	f843 2b04 	str.w	r2, [r3], #4
    while(len > 4) {
 8021de2:	4283      	cmp	r3, r0
 8021de4:	d1fb      	bne.n	8021dde <lv_memset_00+0x76>
 8021de6:	3904      	subs	r1, #4
        len -= 4;
 8021de8:	ebcc 7c8c 	rsb	ip, ip, ip, lsl #30
 8021dec:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    }

    d8 = (uint8_t *)d32;
    while(len) {
 8021df0:	b129      	cbz	r1, 8021dfe <lv_memset_00+0x96>
 8021df2:	4401      	add	r1, r0
        SET8(0);
 8021df4:	2300      	movs	r3, #0
 8021df6:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8021dfa:	4288      	cmp	r0, r1
 8021dfc:	d1fb      	bne.n	8021df6 <lv_memset_00+0x8e>
        len--;
    }
}
 8021dfe:	f85d fb04 	ldr.w	pc, [sp], #4
            SET8(0);
 8021e02:	4618      	mov	r0, r3
 8021e04:	e7b3      	b.n	8021d6e <lv_memset_00+0x6>
        d_align = ALIGN_MASK + 1 - d_align;
 8021e06:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8021e0a:	b141      	cbz	r1, 8021e1e <lv_memset_00+0xb6>
 8021e0c:	4403      	add	r3, r0
            SET8(0);
 8021e0e:	2200      	movs	r2, #0
 8021e10:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 8021e14:	3901      	subs	r1, #1
        while(d_align && len) {
 8021e16:	4298      	cmp	r0, r3
 8021e18:	d0f3      	beq.n	8021e02 <lv_memset_00+0x9a>
 8021e1a:	2900      	cmp	r1, #0
 8021e1c:	d1f8      	bne.n	8021e10 <lv_memset_00+0xa8>
    while(len > 32) {
 8021e1e:	2100      	movs	r1, #0
    while(len) {
 8021e20:	b129      	cbz	r1, 8021e2e <lv_memset_00+0xc6>
 8021e22:	4401      	add	r1, r0
        SET8(0);
 8021e24:	2300      	movs	r3, #0
 8021e26:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8021e2a:	4288      	cmp	r0, r1
 8021e2c:	d1fb      	bne.n	8021e26 <lv_memset_00+0xbe>
 8021e2e:	4770      	bx	lr
    while(len > 4) {
 8021e30:	4618      	mov	r0, r3
 8021e32:	e7dd      	b.n	8021df0 <lv_memset_00+0x88>

08021e34 <lv_memset_ff>:
{
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 8021e34:	f010 0303 	ands.w	r3, r0, #3
 8021e38:	d14d      	bne.n	8021ed6 <lv_memset_ff+0xa2>
{
 8021e3a:	b500      	push	{lr}
            d_align--;
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 8021e3c:	2920      	cmp	r1, #32
 8021e3e:	bf98      	it	ls
 8021e40:	4603      	movls	r3, r0
 8021e42:	d928      	bls.n	8021e96 <lv_memset_ff+0x62>
 8021e44:	f100 0320 	add.w	r3, r0, #32
 8021e48:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
 8021e4c:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8021e50:	f100 0c40 	add.w	ip, r0, #64	; 0x40
 8021e54:	f022 021f 	bic.w	r2, r2, #31
 8021e58:	4494      	add	ip, r2
        REPEAT8(SET32(0xFFFFFFFF));
 8021e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021e5e:	f843 2c20 	str.w	r2, [r3, #-32]
 8021e62:	f843 2c1c 	str.w	r2, [r3, #-28]
 8021e66:	f843 2c18 	str.w	r2, [r3, #-24]
 8021e6a:	f843 2c14 	str.w	r2, [r3, #-20]
 8021e6e:	f843 2c10 	str.w	r2, [r3, #-16]
 8021e72:	f843 2c0c 	str.w	r2, [r3, #-12]
 8021e76:	f843 2c08 	str.w	r2, [r3, #-8]
 8021e7a:	f843 2c04 	str.w	r2, [r3, #-4]
    while(len > 32) {
 8021e7e:	3320      	adds	r3, #32
 8021e80:	4563      	cmp	r3, ip
 8021e82:	d1ec      	bne.n	8021e5e <lv_memset_ff+0x2a>
        REPEAT8(SET32(0xFFFFFFFF));
 8021e84:	f10e 0301 	add.w	r3, lr, #1
 8021e88:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8021e8c:	3920      	subs	r1, #32
        len -= 32;
 8021e8e:	ebce 6ece 	rsb	lr, lr, lr, lsl #27
 8021e92:	eb01 114e 	add.w	r1, r1, lr, lsl #5
    }

    while(len > 4) {
 8021e96:	2904      	cmp	r1, #4
 8021e98:	d932      	bls.n	8021f00 <lv_memset_ff+0xcc>
 8021e9a:	f1a1 0c05 	sub.w	ip, r1, #5
 8021e9e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8021ea2:	f10c 0001 	add.w	r0, ip, #1
 8021ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        SET32(0xFFFFFFFF);
 8021eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021eae:	f843 2b04 	str.w	r2, [r3], #4
    while(len > 4) {
 8021eb2:	4283      	cmp	r3, r0
 8021eb4:	d1fb      	bne.n	8021eae <lv_memset_ff+0x7a>
 8021eb6:	3904      	subs	r1, #4
        len -= 4;
 8021eb8:	ebcc 7c8c 	rsb	ip, ip, ip, lsl #30
 8021ebc:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    }

    d8 = (uint8_t *)d32;
    while(len) {
 8021ec0:	b129      	cbz	r1, 8021ece <lv_memset_ff+0x9a>
 8021ec2:	4401      	add	r1, r0
        SET8(0xFF);
 8021ec4:	23ff      	movs	r3, #255	; 0xff
 8021ec6:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8021eca:	4288      	cmp	r0, r1
 8021ecc:	d1fb      	bne.n	8021ec6 <lv_memset_ff+0x92>
        len--;
    }
}
 8021ece:	f85d fb04 	ldr.w	pc, [sp], #4
            SET8(0xFF);
 8021ed2:	4618      	mov	r0, r3
 8021ed4:	e7b1      	b.n	8021e3a <lv_memset_ff+0x6>
        d_align = ALIGN_MASK + 1 - d_align;
 8021ed6:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8021eda:	b141      	cbz	r1, 8021eee <lv_memset_ff+0xba>
 8021edc:	4403      	add	r3, r0
            SET8(0xFF);
 8021ede:	22ff      	movs	r2, #255	; 0xff
 8021ee0:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 8021ee4:	3901      	subs	r1, #1
        while(d_align && len) {
 8021ee6:	4298      	cmp	r0, r3
 8021ee8:	d0f3      	beq.n	8021ed2 <lv_memset_ff+0x9e>
 8021eea:	2900      	cmp	r1, #0
 8021eec:	d1f8      	bne.n	8021ee0 <lv_memset_ff+0xac>
    while(len > 32) {
 8021eee:	2100      	movs	r1, #0
    while(len) {
 8021ef0:	b129      	cbz	r1, 8021efe <lv_memset_ff+0xca>
 8021ef2:	4401      	add	r1, r0
        SET8(0xFF);
 8021ef4:	23ff      	movs	r3, #255	; 0xff
 8021ef6:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 8021efa:	4288      	cmp	r0, r1
 8021efc:	d1fb      	bne.n	8021ef6 <lv_memset_ff+0xc2>
 8021efe:	4770      	bx	lr
    while(len > 4) {
 8021f00:	4618      	mov	r0, r3
 8021f02:	e7dd      	b.n	8021ec0 <lv_memset_ff+0x8c>

08021f04 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 8021f04:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 8021f06:	bf38      	it	cc
 8021f08:	5488      	strbcc	r0, [r1, r2]
    }
}
 8021f0a:	4770      	bx	lr

08021f0c <_out_null>:
{
    LV_UNUSED(character);
    LV_UNUSED(buffer);
    LV_UNUSED(idx);
    LV_UNUSED(maxlen);
}
 8021f0c:	4770      	bx	lr

08021f0e <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8021f0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f12:	b083      	sub	sp, #12
 8021f14:	4607      	mov	r7, r0
 8021f16:	4688      	mov	r8, r1
 8021f18:	9200      	str	r2, [sp, #0]
 8021f1a:	4699      	mov	r9, r3
 8021f1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8021f20:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021f22:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8021f26:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021f28:	9a12      	ldr	r2, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 8021f2a:	f012 0302 	ands.w	r3, r2, #2
 8021f2e:	9301      	str	r3, [sp, #4]
 8021f30:	d172      	bne.n	8022018 <_ntoa_format+0x10a>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8021f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f34:	b17b      	cbz	r3, 8021f56 <_ntoa_format+0x48>
 8021f36:	f012 0f01 	tst.w	r2, #1
 8021f3a:	f000 80c6 	beq.w	80220ca <_ntoa_format+0x1bc>
 8021f3e:	b910      	cbnz	r0, 8021f46 <_ntoa_format+0x38>
 8021f40:	f012 0f0c 	tst.w	r2, #12
 8021f44:	d002      	beq.n	8021f4c <_ntoa_format+0x3e>
            width--;
 8021f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f48:	3b01      	subs	r3, #1
 8021f4a:	9311      	str	r3, [sp, #68]	; 0x44
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8021f4c:	428c      	cmp	r4, r1
 8021f4e:	d213      	bcs.n	8021f78 <_ntoa_format+0x6a>
 8021f50:	2c1f      	cmp	r4, #31
 8021f52:	d904      	bls.n	8021f5e <_ntoa_format+0x50>
 8021f54:	e010      	b.n	8021f78 <_ntoa_format+0x6a>
 8021f56:	428c      	cmp	r4, r1
 8021f58:	d20b      	bcs.n	8021f72 <_ntoa_format+0x64>
 8021f5a:	2c1f      	cmp	r4, #31
 8021f5c:	d809      	bhi.n	8021f72 <_ntoa_format+0x64>
 8021f5e:	1e63      	subs	r3, r4, #1
 8021f60:	4453      	add	r3, sl
            buf[len++] = '0';
 8021f62:	2530      	movs	r5, #48	; 0x30
 8021f64:	3401      	adds	r4, #1
 8021f66:	f803 5f01 	strb.w	r5, [r3, #1]!
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8021f6a:	42a1      	cmp	r1, r4
 8021f6c:	d901      	bls.n	8021f72 <_ntoa_format+0x64>
 8021f6e:	2c20      	cmp	r4, #32
 8021f70:	d1f8      	bne.n	8021f64 <_ntoa_format+0x56>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8021f72:	f012 0f01 	tst.w	r2, #1
 8021f76:	d04f      	beq.n	8022018 <_ntoa_format+0x10a>
 8021f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021f7a:	42a3      	cmp	r3, r4
 8021f7c:	d94c      	bls.n	8022018 <_ntoa_format+0x10a>
 8021f7e:	2c1f      	cmp	r4, #31
 8021f80:	d80a      	bhi.n	8021f98 <_ntoa_format+0x8a>
 8021f82:	1e63      	subs	r3, r4, #1
 8021f84:	4453      	add	r3, sl
            buf[len++] = '0';
 8021f86:	2530      	movs	r5, #48	; 0x30
 8021f88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021f8a:	3401      	adds	r4, #1
 8021f8c:	f803 5f01 	strb.w	r5, [r3, #1]!
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8021f90:	42b4      	cmp	r4, r6
 8021f92:	d040      	beq.n	8022016 <_ntoa_format+0x108>
 8021f94:	2c20      	cmp	r4, #32
 8021f96:	d1f8      	bne.n	8021f8a <_ntoa_format+0x7c>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 8021f98:	f012 0f10 	tst.w	r2, #16
 8021f9c:	d13f      	bne.n	802201e <_ntoa_format+0x110>
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8021f9e:	f012 0f03 	tst.w	r2, #3
 8021fa2:	f040 808d 	bne.w	80220c0 <_ntoa_format+0x1b2>
        for(i = len; i < width; i++) {
 8021fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021fa8:	429c      	cmp	r4, r3
 8021faa:	f080 8086 	bcs.w	80220ba <_ntoa_format+0x1ac>
 8021fae:	9d00      	ldr	r5, [sp, #0]
 8021fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021fb2:	eb05 0b03 	add.w	fp, r5, r3
 8021fb6:	ebab 0b04 	sub.w	fp, fp, r4
            out(' ', buffer, idx++, maxlen);
 8021fba:	2620      	movs	r6, #32
 8021fbc:	462a      	mov	r2, r5
 8021fbe:	3501      	adds	r5, #1
 8021fc0:	464b      	mov	r3, r9
 8021fc2:	4641      	mov	r1, r8
 8021fc4:	4630      	mov	r0, r6
 8021fc6:	47b8      	blx	r7
        for(i = len; i < width; i++) {
 8021fc8:	455d      	cmp	r5, fp
 8021fca:	d1f7      	bne.n	8021fbc <_ntoa_format+0xae>
    while(len) {
 8021fcc:	2c00      	cmp	r4, #0
 8021fce:	d07a      	beq.n	80220c6 <_ntoa_format+0x1b8>
 8021fd0:	44a2      	add	sl, r4
        for(i = len; i < width; i++) {
 8021fd2:	4625      	mov	r5, r4
 8021fd4:	eb04 060b 	add.w	r6, r4, fp
 8021fd8:	1b72      	subs	r2, r6, r5
        out(buf[--len], buffer, idx++, maxlen);
 8021fda:	3d01      	subs	r5, #1
 8021fdc:	464b      	mov	r3, r9
 8021fde:	4641      	mov	r1, r8
 8021fe0:	f81a 0d01 	ldrb.w	r0, [sl, #-1]!
 8021fe4:	47b8      	blx	r7
    while(len) {
 8021fe6:	2d00      	cmp	r5, #0
 8021fe8:	d1f4      	bne.n	8021fd4 <_ntoa_format+0xc6>
    if(flags & FLAGS_LEFT) {
 8021fea:	9b01      	ldr	r3, [sp, #4]
 8021fec:	b17b      	cbz	r3, 802200e <_ntoa_format+0x100>
        while(idx - start_idx < width) {
 8021fee:	9b00      	ldr	r3, [sp, #0]
 8021ff0:	1af4      	subs	r4, r6, r3
 8021ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021ff4:	429c      	cmp	r4, r3
 8021ff6:	d20a      	bcs.n	802200e <_ntoa_format+0x100>
            out(' ', buffer, idx++, maxlen);
 8021ff8:	2520      	movs	r5, #32
 8021ffa:	469a      	mov	sl, r3
 8021ffc:	4632      	mov	r2, r6
 8021ffe:	464b      	mov	r3, r9
 8022000:	3601      	adds	r6, #1
 8022002:	4641      	mov	r1, r8
 8022004:	4628      	mov	r0, r5
 8022006:	47b8      	blx	r7
        while(idx - start_idx < width) {
 8022008:	3401      	adds	r4, #1
 802200a:	4554      	cmp	r4, sl
 802200c:	d3f6      	bcc.n	8021ffc <_ntoa_format+0xee>
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 802200e:	4630      	mov	r0, r6
 8022010:	b003      	add	sp, #12
 8022012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 8022016:	9c11      	ldr	r4, [sp, #68]	; 0x44
    if(flags & FLAGS_HASH) {
 8022018:	f012 0f10 	tst.w	r2, #16
 802201c:	d014      	beq.n	8022048 <_ntoa_format+0x13a>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 802201e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8022022:	d105      	bne.n	8022030 <_ntoa_format+0x122>
 8022024:	b124      	cbz	r4, 8022030 <_ntoa_format+0x122>
 8022026:	42a1      	cmp	r1, r4
 8022028:	d01b      	beq.n	8022062 <_ntoa_format+0x154>
 802202a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802202c:	429c      	cmp	r4, r3
 802202e:	d018      	beq.n	8022062 <_ntoa_format+0x154>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8022030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022032:	2b10      	cmp	r3, #16
 8022034:	d01d      	beq.n	8022072 <_ntoa_format+0x164>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8022036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022038:	2b02      	cmp	r3, #2
 802203a:	d026      	beq.n	802208a <_ntoa_format+0x17c>
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 802203c:	2c1f      	cmp	r4, #31
 802203e:	d8ae      	bhi.n	8021f9e <_ntoa_format+0x90>
            buf[len++] = '0';
 8022040:	2330      	movs	r3, #48	; 0x30
 8022042:	f80a 3004 	strb.w	r3, [sl, r4]
 8022046:	3401      	adds	r4, #1
    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8022048:	2c1f      	cmp	r4, #31
 802204a:	d8a8      	bhi.n	8021f9e <_ntoa_format+0x90>
        if(negative) {
 802204c:	b320      	cbz	r0, 8022098 <_ntoa_format+0x18a>
            buf[len++] = '-';
 802204e:	232d      	movs	r3, #45	; 0x2d
 8022050:	f80a 3004 	strb.w	r3, [sl, r4]
 8022054:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8022056:	f012 0f03 	tst.w	r2, #3
 802205a:	d03c      	beq.n	80220d6 <_ntoa_format+0x1c8>
 802205c:	f8dd b000 	ldr.w	fp, [sp]
 8022060:	e7b6      	b.n	8021fd0 <_ntoa_format+0xc2>
            if(len && (base == 16U)) {
 8022062:	1e63      	subs	r3, r4, #1
 8022064:	d00f      	beq.n	8022086 <_ntoa_format+0x178>
 8022066:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022068:	2910      	cmp	r1, #16
 802206a:	d001      	beq.n	8022070 <_ntoa_format+0x162>
            len--;
 802206c:	461c      	mov	r4, r3
 802206e:	e7e2      	b.n	8022036 <_ntoa_format+0x128>
                len--;
 8022070:	3c02      	subs	r4, #2
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8022072:	f012 0f20 	tst.w	r2, #32
 8022076:	d135      	bne.n	80220e4 <_ntoa_format+0x1d6>
 8022078:	2c1f      	cmp	r4, #31
 802207a:	d8df      	bhi.n	802203c <_ntoa_format+0x12e>
            buf[len++] = 'x';
 802207c:	2378      	movs	r3, #120	; 0x78
 802207e:	f80a 3004 	strb.w	r3, [sl, r4]
 8022082:	3401      	adds	r4, #1
 8022084:	e7da      	b.n	802203c <_ntoa_format+0x12e>
            len--;
 8022086:	461c      	mov	r4, r3
 8022088:	e7d2      	b.n	8022030 <_ntoa_format+0x122>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 802208a:	2c1f      	cmp	r4, #31
 802208c:	d887      	bhi.n	8021f9e <_ntoa_format+0x90>
            buf[len++] = 'b';
 802208e:	2362      	movs	r3, #98	; 0x62
 8022090:	f80a 3004 	strb.w	r3, [sl, r4]
 8022094:	3401      	adds	r4, #1
 8022096:	e7d1      	b.n	802203c <_ntoa_format+0x12e>
        else if(flags & FLAGS_PLUS) {
 8022098:	f012 0f04 	tst.w	r2, #4
 802209c:	d004      	beq.n	80220a8 <_ntoa_format+0x19a>
            buf[len++] = '+';  // ignore the space if the '+' exists
 802209e:	232b      	movs	r3, #43	; 0x2b
 80220a0:	f80a 3004 	strb.w	r3, [sl, r4]
 80220a4:	3401      	adds	r4, #1
 80220a6:	e7d6      	b.n	8022056 <_ntoa_format+0x148>
        else if(flags & FLAGS_SPACE) {
 80220a8:	f012 0f08 	tst.w	r2, #8
 80220ac:	f43f af77 	beq.w	8021f9e <_ntoa_format+0x90>
            buf[len++] = ' ';
 80220b0:	2320      	movs	r3, #32
 80220b2:	f80a 3004 	strb.w	r3, [sl, r4]
 80220b6:	3401      	adds	r4, #1
 80220b8:	e7cd      	b.n	8022056 <_ntoa_format+0x148>
        for(i = len; i < width; i++) {
 80220ba:	f8dd b000 	ldr.w	fp, [sp]
 80220be:	e785      	b.n	8021fcc <_ntoa_format+0xbe>
 80220c0:	f8dd b000 	ldr.w	fp, [sp]
 80220c4:	e782      	b.n	8021fcc <_ntoa_format+0xbe>
    while(len) {
 80220c6:	465e      	mov	r6, fp
 80220c8:	e78f      	b.n	8021fea <_ntoa_format+0xdc>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80220ca:	428c      	cmp	r4, r1
 80220cc:	d2a4      	bcs.n	8022018 <_ntoa_format+0x10a>
 80220ce:	2c1f      	cmp	r4, #31
 80220d0:	f67f af45 	bls.w	8021f5e <_ntoa_format+0x50>
 80220d4:	e7a0      	b.n	8022018 <_ntoa_format+0x10a>
        for(i = len; i < width; i++) {
 80220d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80220d8:	429c      	cmp	r4, r3
 80220da:	f4ff af68 	bcc.w	8021fae <_ntoa_format+0xa0>
 80220de:	f8dd b000 	ldr.w	fp, [sp]
 80220e2:	e775      	b.n	8021fd0 <_ntoa_format+0xc2>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80220e4:	2c1f      	cmp	r4, #31
 80220e6:	f63f af5a 	bhi.w	8021f9e <_ntoa_format+0x90>
            buf[len++] = 'X';
 80220ea:	2358      	movs	r3, #88	; 0x58
 80220ec:	f80a 3004 	strb.w	r3, [sl, r4]
 80220f0:	3401      	adds	r4, #1
 80220f2:	e7a3      	b.n	802203c <_ntoa_format+0x12e>

080220f4 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80220f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220f8:	b090      	sub	sp, #64	; 0x40
 80220fa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80220fc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80220fe:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 8022102:	b92c      	cbnz	r4, 8022110 <_ntoa_long+0x1c>
        flags &= ~FLAGS_HASH;
 8022104:	f028 0610 	bic.w	r6, r8, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8022108:	f418 6f80 	tst.w	r8, #1024	; 0x400
 802210c:	d134      	bne.n	8022178 <_ntoa_long+0x84>
        flags &= ~FLAGS_HASH;
 802210e:	46b0      	mov	r8, r6
 8022110:	f018 0f20 	tst.w	r8, #32
 8022114:	bf14      	ite	ne
 8022116:	2741      	movne	r7, #65	; 0x41
 8022118:	2761      	moveq	r7, #97	; 0x61
 802211a:	f10d 0e20 	add.w	lr, sp, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 802211e:	2600      	movs	r6, #0
 8022120:	3f0a      	subs	r7, #10
 8022122:	e000      	b.n	8022126 <_ntoa_long+0x32>
            value /= base;
 8022124:	4664      	mov	r4, ip
            const char digit = (char)(value % base);
 8022126:	fbb4 fcf5 	udiv	ip, r4, r5
 802212a:	fb05 4c1c 	mls	ip, r5, ip, r4
 802212e:	fa5f fc8c 	uxtb.w	ip, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8022132:	f1bc 0f09 	cmp.w	ip, #9
 8022136:	bf94      	ite	ls
 8022138:	f10c 0c30 	addls.w	ip, ip, #48	; 0x30
 802213c:	44bc      	addhi	ip, r7
 802213e:	fa5f fc8c 	uxtb.w	ip, ip
 8022142:	3601      	adds	r6, #1
 8022144:	f80e cb01 	strb.w	ip, [lr], #1
            value /= base;
 8022148:	fbb4 fcf5 	udiv	ip, r4, r5
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 802214c:	42ac      	cmp	r4, r5
 802214e:	d301      	bcc.n	8022154 <_ntoa_long+0x60>
 8022150:	2e20      	cmp	r6, #32
 8022152:	d1e7      	bne.n	8022124 <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8022154:	f8cd 8018 	str.w	r8, [sp, #24]
 8022158:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802215a:	9405      	str	r4, [sp, #20]
 802215c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 802215e:	9404      	str	r4, [sp, #16]
 8022160:	9503      	str	r5, [sp, #12]
 8022162:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8022166:	9402      	str	r4, [sp, #8]
 8022168:	9601      	str	r6, [sp, #4]
 802216a:	ac08      	add	r4, sp, #32
 802216c:	9400      	str	r4, [sp, #0]
 802216e:	f7ff fece 	bl	8021f0e <_ntoa_format>
}
 8022172:	b010      	add	sp, #64	; 0x40
 8022174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        flags &= ~FLAGS_HASH;
 8022178:	46b0      	mov	r8, r6
    size_t len = 0U;
 802217a:	4626      	mov	r6, r4
 802217c:	e7ea      	b.n	8022154 <_ntoa_long+0x60>

0802217e <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 802217e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022182:	b095      	sub	sp, #84	; 0x54
 8022184:	9008      	str	r0, [sp, #32]
 8022186:	9109      	str	r1, [sp, #36]	; 0x24
 8022188:	920a      	str	r2, [sp, #40]	; 0x28
 802218a:	930b      	str	r3, [sp, #44]	; 0x2c
 802218c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802218e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8022190:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8022192:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8022196:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 802219a:	ea54 0305 	orrs.w	r3, r4, r5
 802219e:	d105      	bne.n	80221ac <_ntoa_long_long+0x2e>
        flags &= ~FLAGS_HASH;
 80221a0:	f02b 0310 	bic.w	r3, fp, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 80221a4:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80221a8:	d140      	bne.n	802222c <_ntoa_long_long+0xae>
        flags &= ~FLAGS_HASH;
 80221aa:	469b      	mov	fp, r3
 80221ac:	f01b 0f20 	tst.w	fp, #32
 80221b0:	bf14      	ite	ne
 80221b2:	f04f 0a41 	movne.w	sl, #65	; 0x41
 80221b6:	f04f 0a61 	moveq.w	sl, #97	; 0x61
 80221ba:	f10d 0930 	add.w	r9, sp, #48	; 0x30
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80221be:	2700      	movs	r7, #0
 80221c0:	f1aa 0a0a 	sub.w	sl, sl, #10
 80221c4:	e001      	b.n	80221ca <_ntoa_long_long+0x4c>
            value /= base;
 80221c6:	4604      	mov	r4, r0
 80221c8:	460d      	mov	r5, r1
            const char digit = (char)(value % base);
 80221ca:	4632      	mov	r2, r6
 80221cc:	4643      	mov	r3, r8
 80221ce:	4620      	mov	r0, r4
 80221d0:	4629      	mov	r1, r5
 80221d2:	f7de fa21 	bl	8000618 <__aeabi_uldivmod>
 80221d6:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80221d8:	2a09      	cmp	r2, #9
 80221da:	bf94      	ite	ls
 80221dc:	3230      	addls	r2, #48	; 0x30
 80221de:	4452      	addhi	r2, sl
 80221e0:	b2d2      	uxtb	r2, r2
 80221e2:	3701      	adds	r7, #1
 80221e4:	f809 2b01 	strb.w	r2, [r9], #1
            value /= base;
 80221e8:	4632      	mov	r2, r6
 80221ea:	4643      	mov	r3, r8
 80221ec:	4620      	mov	r0, r4
 80221ee:	4629      	mov	r1, r5
 80221f0:	f7de fa12 	bl	8000618 <__aeabi_uldivmod>
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80221f4:	42b4      	cmp	r4, r6
 80221f6:	eb75 0308 	sbcs.w	r3, r5, r8
 80221fa:	d301      	bcc.n	8022200 <_ntoa_long_long+0x82>
 80221fc:	2f20      	cmp	r7, #32
 80221fe:	d1e2      	bne.n	80221c6 <_ntoa_long_long+0x48>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8022200:	f8cd b018 	str.w	fp, [sp, #24]
 8022204:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022206:	9305      	str	r3, [sp, #20]
 8022208:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802220a:	9304      	str	r3, [sp, #16]
 802220c:	9603      	str	r6, [sp, #12]
 802220e:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8022212:	9302      	str	r3, [sp, #8]
 8022214:	9701      	str	r7, [sp, #4]
 8022216:	ab0c      	add	r3, sp, #48	; 0x30
 8022218:	9300      	str	r3, [sp, #0]
 802221a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802221c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802221e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022220:	9808      	ldr	r0, [sp, #32]
 8022222:	f7ff fe74 	bl	8021f0e <_ntoa_format>
}
 8022226:	b015      	add	sp, #84	; 0x54
 8022228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        flags &= ~FLAGS_HASH;
 802222c:	469b      	mov	fp, r3
    size_t len = 0U;
 802222e:	2700      	movs	r7, #0
 8022230:	e7e6      	b.n	8022200 <_ntoa_long_long+0x82>
	...

08022234 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
 8022234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022238:	b093      	sub	sp, #76	; 0x4c
 802223a:	4690      	mov	r8, r2
 802223c:	461c      	mov	r4, r3
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
 802223e:	f1b1 0a00 	subs.w	sl, r1, #0
 8022242:	4b8a      	ldr	r3, [pc, #552]	; (802246c <_vsnprintf+0x238>)
 8022244:	bf14      	ite	ne
 8022246:	4681      	movne	r9, r0
 8022248:	4699      	moveq	r9, r3
    }

    while(*format) {
 802224a:	7820      	ldrb	r0, [r4, #0]
 802224c:	2800      	cmp	r0, #0
 802224e:	f000 8291 	beq.w	8022774 <_vsnprintf+0x540>
 8022252:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8022254:	f04f 0b00 	mov.w	fp, #0
 8022258:	e25b      	b.n	8022712 <_vsnprintf+0x4de>
            format++;
            continue;
        }
        else {
            // yes, evaluate it
            format++;
 802225a:	1c62      	adds	r2, r4, #1
        }

        // evaluate flags
        flags = 0U;
 802225c:	f04f 0c00 	mov.w	ip, #0
 8022260:	4614      	mov	r4, r2
        do {
            switch(*format) {
 8022262:	f812 3b01 	ldrb.w	r3, [r2], #1
 8022266:	f1a3 0120 	sub.w	r1, r3, #32
 802226a:	2910      	cmp	r1, #16
 802226c:	d80a      	bhi.n	8022284 <_vsnprintf+0x50>
 802226e:	e8df f001 	tbb	[pc, r1]
 8022272:	092e      	.short	0x092e
 8022274:	09093109 	.word	0x09093109
 8022278:	09090909 	.word	0x09090909
 802227c:	28092b09 	.word	0x28092b09
 8022280:	0909      	.short	0x0909
 8022282:	25          	.byte	0x25
 8022283:	00          	.byte	0x00
    return (ch >= '0') && (ch <= '9');
 8022284:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            }
        } while(n);

        // evaluate width field
        width = 0U;
        if(_is_digit(*format)) {
 8022288:	b2d2      	uxtb	r2, r2
 802228a:	2a09      	cmp	r2, #9
 802228c:	d925      	bls.n	80222da <_vsnprintf+0xa6>
            width = _atoi(&format);
        }
        else if(*format == '*') {
 802228e:	2b2a      	cmp	r3, #42	; 0x2a
 8022290:	d031      	beq.n	80222f6 <_vsnprintf+0xc2>
        width = 0U;
 8022292:	2500      	movs	r5, #0
            format++;
        }

        // evaluate precision field
        precision = 0U;
        if(*format == '.') {
 8022294:	7823      	ldrb	r3, [r4, #0]
 8022296:	2b2e      	cmp	r3, #46	; 0x2e
 8022298:	d036      	beq.n	8022308 <_vsnprintf+0xd4>
        precision = 0U;
 802229a:	2600      	movs	r6, #0
                format++;
            }
        }

        // evaluate length field
        switch(*format) {
 802229c:	7823      	ldrb	r3, [r4, #0]
 802229e:	3b68      	subs	r3, #104	; 0x68
 80222a0:	2b12      	cmp	r3, #18
 80222a2:	d85d      	bhi.n	8022360 <_vsnprintf+0x12c>
 80222a4:	e8df f003 	tbb	[pc, r3]
 80222a8:	5cc65cb8 	.word	0x5cc65cb8
 80222ac:	5c5c5c53 	.word	0x5c5c5c53
 80222b0:	5c5c5c5c 	.word	0x5c5c5c5c
 80222b4:	5c5c5cc2 	.word	0x5c5c5cc2
 80222b8:	5c5c      	.short	0x5c5c
 80222ba:	ca          	.byte	0xca
 80222bb:	00          	.byte	0x00
                    flags |= FLAGS_ZEROPAD;
 80222bc:	f04c 0c01 	orr.w	ip, ip, #1
        } while(n);
 80222c0:	e7ce      	b.n	8022260 <_vsnprintf+0x2c>
                    flags |= FLAGS_LEFT;
 80222c2:	f04c 0c02 	orr.w	ip, ip, #2
        } while(n);
 80222c6:	e7cb      	b.n	8022260 <_vsnprintf+0x2c>
                    flags |= FLAGS_PLUS;
 80222c8:	f04c 0c04 	orr.w	ip, ip, #4
        } while(n);
 80222cc:	e7c8      	b.n	8022260 <_vsnprintf+0x2c>
                    flags |= FLAGS_SPACE;
 80222ce:	f04c 0c08 	orr.w	ip, ip, #8
        } while(n);
 80222d2:	e7c5      	b.n	8022260 <_vsnprintf+0x2c>
                    flags |= FLAGS_HASH;
 80222d4:	f04c 0c10 	orr.w	ip, ip, #16
        } while(n);
 80222d8:	e7c2      	b.n	8022260 <_vsnprintf+0x2c>
    unsigned int i = 0U;
 80222da:	2500      	movs	r5, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80222dc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80222e0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80222e4:	3d30      	subs	r5, #48	; 0x30
    while(_is_digit(**str)) {
 80222e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    return (ch >= '0') && (ch <= '9');
 80222ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
 80222ee:	b2d2      	uxtb	r2, r2
 80222f0:	2a09      	cmp	r2, #9
 80222f2:	d9f3      	bls.n	80222dc <_vsnprintf+0xa8>
 80222f4:	e7ce      	b.n	8022294 <_vsnprintf+0x60>
            const int w = va_arg(va, int);
 80222f6:	f857 5b04 	ldr.w	r5, [r7], #4
            if(w < 0) {
 80222fa:	2d00      	cmp	r5, #0
                flags |= FLAGS_LEFT;    // reverse padding
 80222fc:	bfbc      	itt	lt
 80222fe:	f04c 0c02 	orrlt.w	ip, ip, #2
                width = (unsigned int) - w;
 8022302:	426d      	neglt	r5, r5
            format++;
 8022304:	3401      	adds	r4, #1
 8022306:	e7c5      	b.n	8022294 <_vsnprintf+0x60>
            flags |= FLAGS_PRECISION;
 8022308:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
            format++;
 802230c:	1c61      	adds	r1, r4, #1
            if(_is_digit(*format)) {
 802230e:	7863      	ldrb	r3, [r4, #1]
    return (ch >= '0') && (ch <= '9');
 8022310:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            if(_is_digit(*format)) {
 8022314:	b2d2      	uxtb	r2, r2
 8022316:	2a09      	cmp	r2, #9
 8022318:	d904      	bls.n	8022324 <_vsnprintf+0xf0>
            else if(*format == '*') {
 802231a:	2b2a      	cmp	r3, #42	; 0x2a
 802231c:	d011      	beq.n	8022342 <_vsnprintf+0x10e>
            format++;
 802231e:	460c      	mov	r4, r1
        precision = 0U;
 8022320:	2600      	movs	r6, #0
 8022322:	e7bb      	b.n	802229c <_vsnprintf+0x68>
    unsigned int i = 0U;
 8022324:	2600      	movs	r6, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8022326:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 802232a:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 802232e:	3e30      	subs	r6, #48	; 0x30
    while(_is_digit(**str)) {
 8022330:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    return (ch >= '0') && (ch <= '9');
 8022334:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
 8022338:	b2d2      	uxtb	r2, r2
 802233a:	2a09      	cmp	r2, #9
 802233c:	d9f3      	bls.n	8022326 <_vsnprintf+0xf2>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 802233e:	460c      	mov	r4, r1
 8022340:	e7ac      	b.n	802229c <_vsnprintf+0x68>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8022342:	f857 6b04 	ldr.w	r6, [r7], #4
 8022346:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
                format++;
 802234a:	3402      	adds	r4, #2
 802234c:	e7a6      	b.n	802229c <_vsnprintf+0x68>
            case 'l' :
                flags |= FLAGS_LONG;
                format++;
                if(*format == 'l') {
 802234e:	7863      	ldrb	r3, [r4, #1]
 8022350:	2b6c      	cmp	r3, #108	; 0x6c
                flags |= FLAGS_LONG;
 8022352:	bf19      	ittee	ne
 8022354:	f44c 7c80 	orrne.w	ip, ip, #256	; 0x100
                format++;
 8022358:	3401      	addne	r4, #1
                    flags |= FLAGS_LONG_LONG;
 802235a:	f44c 7c40 	orreq.w	ip, ip, #768	; 0x300
                    format++;
 802235e:	3402      	addeq	r4, #2
            default :
                break;
        }

        // evaluate specifier
        switch(*format) {
 8022360:	7820      	ldrb	r0, [r4, #0]
 8022362:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8022366:	2b53      	cmp	r3, #83	; 0x53
 8022368:	f200 81fb 	bhi.w	8022762 <_vsnprintf+0x52e>
 802236c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8022370:	01f901ef 	.word	0x01f901ef
 8022374:	01f901f9 	.word	0x01f901f9
 8022378:	01f901f9 	.word	0x01f901f9
 802237c:	01f901f9 	.word	0x01f901f9
 8022380:	01f901f9 	.word	0x01f901f9
 8022384:	01f901f9 	.word	0x01f901f9
 8022388:	01f901f9 	.word	0x01f901f9
 802238c:	01f901f9 	.word	0x01f901f9
 8022390:	01f901f9 	.word	0x01f901f9
 8022394:	01f901f9 	.word	0x01f901f9
 8022398:	01f901f9 	.word	0x01f901f9
 802239c:	01f901f9 	.word	0x01f901f9
 80223a0:	01f901f9 	.word	0x01f901f9
 80223a4:	01f901f9 	.word	0x01f901f9
 80223a8:	01f901f9 	.word	0x01f901f9
 80223ac:	01f901f9 	.word	0x01f901f9
 80223b0:	01f901f9 	.word	0x01f901f9
 80223b4:	01f901f9 	.word	0x01f901f9
 80223b8:	01f901f9 	.word	0x01f901f9
 80223bc:	01f901f9 	.word	0x01f901f9
 80223c0:	01f901f9 	.word	0x01f901f9
 80223c4:	006a01f9 	.word	0x006a01f9
 80223c8:	01f901f9 	.word	0x01f901f9
 80223cc:	01f901f9 	.word	0x01f901f9
 80223d0:	01f901f9 	.word	0x01f901f9
 80223d4:	006a01f9 	.word	0x006a01f9
 80223d8:	01f901f9 	.word	0x01f901f9
 80223dc:	01f901f9 	.word	0x01f901f9
 80223e0:	01f901f9 	.word	0x01f901f9
 80223e4:	01f901f9 	.word	0x01f901f9
 80223e8:	006a01f9 	.word	0x006a01f9
 80223ec:	006a0139 	.word	0x006a0139
 80223f0:	01f901f9 	.word	0x01f901f9
 80223f4:	01f901f9 	.word	0x01f901f9
 80223f8:	01f9006a 	.word	0x01f9006a
 80223fc:	01f901f9 	.word	0x01f901f9
 8022400:	01f901f9 	.word	0x01f901f9
 8022404:	006a006a 	.word	0x006a006a
 8022408:	01f901f9 	.word	0x01f901f9
 802240c:	01f90172 	.word	0x01f90172
 8022410:	01f9006a 	.word	0x01f9006a
 8022414:	006a01f9 	.word	0x006a01f9
                if(*format == 'h') {
 8022418:	7863      	ldrb	r3, [r4, #1]
 802241a:	2b68      	cmp	r3, #104	; 0x68
                flags |= FLAGS_SHORT;
 802241c:	bf19      	ittee	ne
 802241e:	f04c 0c80 	orrne.w	ip, ip, #128	; 0x80
                format++;
 8022422:	3401      	addne	r4, #1
                    flags |= FLAGS_CHAR;
 8022424:	f04c 0cc0 	orreq.w	ip, ip, #192	; 0xc0
                    format++;
 8022428:	3402      	addeq	r4, #2
 802242a:	e799      	b.n	8022360 <_vsnprintf+0x12c>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 802242c:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
                format++;
 8022430:	3401      	adds	r4, #1
                break;
 8022432:	e795      	b.n	8022360 <_vsnprintf+0x12c>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8022434:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
                format++;
 8022438:	3401      	adds	r4, #1
                break;
 802243a:	e791      	b.n	8022360 <_vsnprintf+0x12c>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 802243c:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
                format++;
 8022440:	3401      	adds	r4, #1
                break;
 8022442:	e78d      	b.n	8022360 <_vsnprintf+0x12c>
            case 'P' :
            case 'o' :
            case 'b' : {
                    // set the base
                    unsigned int base;
                    if(*format == 'x' || *format == 'X') {
 8022444:	2878      	cmp	r0, #120	; 0x78
 8022446:	f000 81a4 	beq.w	8022792 <_vsnprintf+0x55e>
 802244a:	2858      	cmp	r0, #88	; 0x58
 802244c:	d019      	beq.n	8022482 <_vsnprintf+0x24e>
                        base = 16U;
                    }
                    else if(*format == 'p' || *format == 'P') {
 802244e:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8022452:	2b50      	cmp	r3, #80	; 0x50
 8022454:	d00c      	beq.n	8022470 <_vsnprintf+0x23c>
                            flags |= FLAGS_LONG;

                        if(*(format + 1) == 'V')
                            format++;
                    }
                    else if(*format == 'o') {
 8022456:	286f      	cmp	r0, #111	; 0x6f
 8022458:	f000 81c5 	beq.w	80227e6 <_vsnprintf+0x5b2>
                        base =  8U;
                    }
                    else if(*format == 'b') {
 802245c:	2862      	cmp	r0, #98	; 0x62
 802245e:	f000 81c4 	beq.w	80227ea <_vsnprintf+0x5b6>
                        base =  2U;
                    }
                    else {
                        base = 10U;
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 8022462:	f02c 0c10 	bic.w	ip, ip, #16
                        base = 10U;
 8022466:	230a      	movs	r3, #10
 8022468:	e194      	b.n	8022794 <_vsnprintf+0x560>
 802246a:	bf00      	nop
 802246c:	08021f0d 	.word	0x08021f0d
                            flags |= FLAGS_LONG;
 8022470:	f44c 7c88 	orr.w	ip, ip, #272	; 0x110
                        if(*(format + 1) == 'V')
 8022474:	7863      	ldrb	r3, [r4, #1]
 8022476:	2b56      	cmp	r3, #86	; 0x56
 8022478:	d101      	bne.n	802247e <_vsnprintf+0x24a>
                            format++;
 802247a:	3401      	adds	r4, #1
                    }
                    // uppercase
                    if(*format == 'X' || *format == 'P') {
 802247c:	4618      	mov	r0, r3
 802247e:	2850      	cmp	r0, #80	; 0x50
 8022480:	d128      	bne.n	80224d4 <_vsnprintf+0x2a0>
                        flags |= FLAGS_UPPERCASE;
 8022482:	f04c 0c20 	orr.w	ip, ip, #32
 8022486:	2310      	movs	r3, #16
                    }

                    // no plus or space flag for u, x, X, o, b
                    if((*format != 'i') && (*format != 'd')) {
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8022488:	f02c 020c 	bic.w	r2, ip, #12
                    }

                    // ignore '0' flag when precision is given
                    if(flags & FLAGS_PRECISION) {
 802248c:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 8022490:	d001      	beq.n	8022496 <_vsnprintf+0x262>
                        flags &= ~FLAGS_ZEROPAD;
 8022492:	f02c 020d 	bic.w	r2, ip, #13
                                                                                                                                       int) : va_arg(va, int);
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
                                             width, flags);
                        }
                    }
                    else if(*format == 'V') {
 8022496:	2856      	cmp	r0, #86	; 0x56
 8022498:	d065      	beq.n	8022566 <_vsnprintf+0x332>
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
                        va_end(copy);
                    }
                    else {
                        // unsigned
                        if(flags & FLAGS_LONG_LONG) {
 802249a:	f412 7f00 	tst.w	r2, #512	; 0x200
 802249e:	d172      	bne.n	8022586 <_vsnprintf+0x352>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
#endif
                        }
                        else if(flags & FLAGS_LONG) {
 80224a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80224a4:	f040 8085 	bne.w	80225b2 <_vsnprintf+0x37e>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
                        }
                        else {
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80224a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80224ac:	f000 8092 	beq.w	80225d4 <_vsnprintf+0x3a0>
 80224b0:	f857 1b04 	ldr.w	r1, [r7], #4
 80224b4:	b2c9      	uxtb	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80224b6:	9205      	str	r2, [sp, #20]
 80224b8:	9504      	str	r5, [sp, #16]
 80224ba:	9603      	str	r6, [sp, #12]
 80224bc:	9302      	str	r3, [sp, #8]
 80224be:	2300      	movs	r3, #0
 80224c0:	9301      	str	r3, [sp, #4]
 80224c2:	9100      	str	r1, [sp, #0]
 80224c4:	4643      	mov	r3, r8
 80224c6:	465a      	mov	r2, fp
 80224c8:	4651      	mov	r1, sl
 80224ca:	4648      	mov	r0, r9
 80224cc:	f7ff fe12 	bl	80220f4 <_ntoa_long>
 80224d0:	4683      	mov	fp, r0
 80224d2:	e186      	b.n	80227e2 <_vsnprintf+0x5ae>
 80224d4:	2310      	movs	r3, #16
 80224d6:	e15d      	b.n	8022794 <_vsnprintf+0x560>
                    if((*format != 'i') && (*format != 'd')) {
 80224d8:	2864      	cmp	r0, #100	; 0x64
 80224da:	d1d5      	bne.n	8022488 <_vsnprintf+0x254>
                    if(flags & FLAGS_PRECISION) {
 80224dc:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 80224e0:	f000 815e 	beq.w	80227a0 <_vsnprintf+0x56c>
                        flags &= ~FLAGS_ZEROPAD;
 80224e4:	f02c 0c01 	bic.w	ip, ip, #1
                    if((*format == 'i') || (*format == 'd')) {
 80224e8:	e15a      	b.n	80227a0 <_vsnprintf+0x56c>
                            const long long value = va_arg(va, long long);
 80224ea:	1df9      	adds	r1, r7, #7
 80224ec:	f021 0107 	bic.w	r1, r1, #7
 80224f0:	460f      	mov	r7, r1
 80224f2:	f857 2b08 	ldr.w	r2, [r7], #8
 80224f6:	6849      	ldr	r1, [r1, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 80224f8:	f8cd c020 	str.w	ip, [sp, #32]
 80224fc:	9507      	str	r5, [sp, #28]
 80224fe:	9606      	str	r6, [sp, #24]
 8022500:	9304      	str	r3, [sp, #16]
 8022502:	2300      	movs	r3, #0
 8022504:	9305      	str	r3, [sp, #20]
 8022506:	0fcb      	lsrs	r3, r1, #31
 8022508:	9302      	str	r3, [sp, #8]
 802250a:	4613      	mov	r3, r2
 802250c:	460a      	mov	r2, r1
 802250e:	2900      	cmp	r1, #0
 8022510:	db09      	blt.n	8022526 <_vsnprintf+0x2f2>
 8022512:	9300      	str	r3, [sp, #0]
 8022514:	9201      	str	r2, [sp, #4]
 8022516:	4643      	mov	r3, r8
 8022518:	465a      	mov	r2, fp
 802251a:	4651      	mov	r1, sl
 802251c:	4648      	mov	r0, r9
 802251e:	f7ff fe2e 	bl	802217e <_ntoa_long_long>
 8022522:	4683      	mov	fp, r0
 8022524:	e15d      	b.n	80227e2 <_vsnprintf+0x5ae>
 8022526:	425b      	negs	r3, r3
 8022528:	eb61 0241 	sbc.w	r2, r1, r1, lsl #1
 802252c:	e7f1      	b.n	8022512 <_vsnprintf+0x2de>
                            const long value = va_arg(va, long);
 802252e:	f857 2b04 	ldr.w	r2, [r7], #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
 8022532:	f8cd c014 	str.w	ip, [sp, #20]
 8022536:	9504      	str	r5, [sp, #16]
 8022538:	9603      	str	r6, [sp, #12]
 802253a:	9302      	str	r3, [sp, #8]
 802253c:	0fd3      	lsrs	r3, r2, #31
 802253e:	9301      	str	r3, [sp, #4]
 8022540:	2a00      	cmp	r2, #0
 8022542:	bfb8      	it	lt
 8022544:	4252      	neglt	r2, r2
 8022546:	9200      	str	r2, [sp, #0]
 8022548:	4643      	mov	r3, r8
 802254a:	465a      	mov	r2, fp
 802254c:	4651      	mov	r1, sl
 802254e:	4648      	mov	r0, r9
 8022550:	f7ff fdd0 	bl	80220f4 <_ntoa_long>
 8022554:	4683      	mov	fp, r0
 8022556:	e144      	b.n	80227e2 <_vsnprintf+0x5ae>
                                                                                                                                       int) : va_arg(va, int);
 8022558:	f01c 0f80 	tst.w	ip, #128	; 0x80
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 802255c:	f857 2b04 	ldr.w	r2, [r7], #4
                                                                                                                                       int) : va_arg(va, int);
 8022560:	bf18      	it	ne
 8022562:	b212      	sxthne	r2, r2
 8022564:	e12b      	b.n	80227be <_vsnprintf+0x58a>
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 8022566:	f857 3b04 	ldr.w	r3, [r7], #4
                        va_copy(copy, *vaf->va);
 802256a:	685a      	ldr	r2, [r3, #4]
 802256c:	6812      	ldr	r2, [r2, #0]
 802256e:	9211      	str	r2, [sp, #68]	; 0x44
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8022570:	681b      	ldr	r3, [r3, #0]
 8022572:	9200      	str	r2, [sp, #0]
 8022574:	eba8 020b 	sub.w	r2, r8, fp
 8022578:	eb0a 010b 	add.w	r1, sl, fp
 802257c:	4648      	mov	r0, r9
 802257e:	f7ff fe59 	bl	8022234 <_vsnprintf>
 8022582:	4483      	add	fp, r0
                        va_end(copy);
 8022584:	e12d      	b.n	80227e2 <_vsnprintf+0x5ae>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8022586:	3707      	adds	r7, #7
 8022588:	f027 0707 	bic.w	r7, r7, #7
 802258c:	9208      	str	r2, [sp, #32]
 802258e:	9507      	str	r5, [sp, #28]
 8022590:	9606      	str	r6, [sp, #24]
 8022592:	2200      	movs	r2, #0
 8022594:	9304      	str	r3, [sp, #16]
 8022596:	9205      	str	r2, [sp, #20]
 8022598:	9202      	str	r2, [sp, #8]
 802259a:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 802259e:	e9cd 2300 	strd	r2, r3, [sp]
 80225a2:	4643      	mov	r3, r8
 80225a4:	465a      	mov	r2, fp
 80225a6:	4651      	mov	r1, sl
 80225a8:	4648      	mov	r0, r9
 80225aa:	f7ff fde8 	bl	802217e <_ntoa_long_long>
 80225ae:	4683      	mov	fp, r0
 80225b0:	e117      	b.n	80227e2 <_vsnprintf+0x5ae>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80225b2:	9205      	str	r2, [sp, #20]
 80225b4:	9504      	str	r5, [sp, #16]
 80225b6:	9603      	str	r6, [sp, #12]
 80225b8:	9302      	str	r3, [sp, #8]
 80225ba:	2300      	movs	r3, #0
 80225bc:	9301      	str	r3, [sp, #4]
 80225be:	f857 3b04 	ldr.w	r3, [r7], #4
 80225c2:	9300      	str	r3, [sp, #0]
 80225c4:	4643      	mov	r3, r8
 80225c6:	465a      	mov	r2, fp
 80225c8:	4651      	mov	r1, sl
 80225ca:	4648      	mov	r0, r9
 80225cc:	f7ff fd92 	bl	80220f4 <_ntoa_long>
 80225d0:	4683      	mov	fp, r0
 80225d2:	e106      	b.n	80227e2 <_vsnprintf+0x5ae>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80225d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80225d8:	f857 1b04 	ldr.w	r1, [r7], #4
 80225dc:	bf18      	it	ne
 80225de:	b289      	uxthne	r1, r1
 80225e0:	e769      	b.n	80224b6 <_vsnprintf+0x282>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
            case 'c' : {
                    unsigned int l = 1U;
                    // pre padding
                    if(!(flags & FLAGS_LEFT)) {
 80225e2:	f01c 0f02 	tst.w	ip, #2
 80225e6:	d01b      	beq.n	8022620 <_vsnprintf+0x3ec>
                        while(l++ < width) {
                            out(' ', buffer, idx++, maxlen);
                        }
                    }
                    // char output
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80225e8:	463b      	mov	r3, r7
 80225ea:	f10b 0601 	add.w	r6, fp, #1
 80225ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80225f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80225f4:	4643      	mov	r3, r8
 80225f6:	465a      	mov	r2, fp
 80225f8:	4651      	mov	r1, sl
 80225fa:	b2c0      	uxtb	r0, r0
 80225fc:	47c8      	blx	r9
                    // post padding
                    if(flags & FLAGS_LEFT) {
                        while(l++ < width) {
 80225fe:	2d01      	cmp	r5, #1
 8022600:	bf88      	it	hi
 8022602:	eb05 070b 	addhi.w	r7, r5, fp
 8022606:	f240 80f4 	bls.w	80227f2 <_vsnprintf+0x5be>
                            out(' ', buffer, idx++, maxlen);
 802260a:	4632      	mov	r2, r6
 802260c:	3601      	adds	r6, #1
 802260e:	4643      	mov	r3, r8
 8022610:	4651      	mov	r1, sl
 8022612:	2020      	movs	r0, #32
 8022614:	47c8      	blx	r9
                        while(l++ < width) {
 8022616:	42be      	cmp	r6, r7
 8022618:	d1f7      	bne.n	802260a <_vsnprintf+0x3d6>
                            out(' ', buffer, idx++, maxlen);
 802261a:	44ab      	add	fp, r5
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 802261c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802261e:	e017      	b.n	8022650 <_vsnprintf+0x41c>
                        while(l++ < width) {
 8022620:	2d01      	cmp	r5, #1
 8022622:	f240 80e4 	bls.w	80227ee <_vsnprintf+0x5ba>
 8022626:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 802262a:	441d      	add	r5, r3
                            out(' ', buffer, idx++, maxlen);
 802262c:	465a      	mov	r2, fp
 802262e:	f10b 0b01 	add.w	fp, fp, #1
 8022632:	4643      	mov	r3, r8
 8022634:	4651      	mov	r1, sl
 8022636:	2020      	movs	r0, #32
 8022638:	47c8      	blx	r9
                        while(l++ < width) {
 802263a:	45ab      	cmp	fp, r5
 802263c:	d1f6      	bne.n	802262c <_vsnprintf+0x3f8>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 802263e:	f105 0b01 	add.w	fp, r5, #1
 8022642:	f857 0b04 	ldr.w	r0, [r7], #4
 8022646:	4643      	mov	r3, r8
 8022648:	462a      	mov	r2, r5
 802264a:	4651      	mov	r1, sl
 802264c:	b2c0      	uxtb	r0, r0
 802264e:	47c8      	blx	r9
                        }
                    }
                    format++;
 8022650:	3401      	adds	r4, #1
                    break;
 8022652:	e05c      	b.n	802270e <_vsnprintf+0x4da>
                }

            case 's' : {
                    const char * p = va_arg(va, char *);
 8022654:	463b      	mov	r3, r7
 8022656:	f853 7b04 	ldr.w	r7, [r3], #4
 802265a:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 802265c:	2e00      	cmp	r6, #0
 802265e:	bf14      	ite	ne
 8022660:	4631      	movne	r1, r6
 8022662:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
    for(s = str; *s && maxsize--; ++s);
 8022666:	7838      	ldrb	r0, [r7, #0]
 8022668:	2800      	cmp	r0, #0
 802266a:	f000 80c9 	beq.w	8022800 <_vsnprintf+0x5cc>
 802266e:	463b      	mov	r3, r7
 8022670:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8022674:	b112      	cbz	r2, 802267c <_vsnprintf+0x448>
 8022676:	1afa      	subs	r2, r7, r3
 8022678:	42ca      	cmn	r2, r1
 802267a:	d1f9      	bne.n	8022670 <_vsnprintf+0x43c>
    return (unsigned int)(s - str);
 802267c:	1bdb      	subs	r3, r3, r7
 802267e:	930b      	str	r3, [sp, #44]	; 0x2c
                    // pre padding
                    if(flags & FLAGS_PRECISION) {
 8022680:	f41c 6280 	ands.w	r2, ip, #1024	; 0x400
 8022684:	920d      	str	r2, [sp, #52]	; 0x34
 8022686:	d003      	beq.n	8022690 <_vsnprintf+0x45c>
                        l = (l < precision ? l : precision);
 8022688:	42b3      	cmp	r3, r6
 802268a:	bf28      	it	cs
 802268c:	4633      	movcs	r3, r6
 802268e:	930b      	str	r3, [sp, #44]	; 0x2c
                    }
                    if(!(flags & FLAGS_LEFT)) {
 8022690:	f01c 0302 	ands.w	r3, ip, #2
 8022694:	930e      	str	r3, [sp, #56]	; 0x38
 8022696:	d006      	beq.n	80226a6 <_vsnprintf+0x472>
                        while(l++ < width) {
                            out(' ', buffer, idx++, maxlen);
                        }
                    }
                    // string output
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8022698:	2800      	cmp	r0, #0
 802269a:	f000 80ad 	beq.w	80227f8 <_vsnprintf+0x5c4>
 802269e:	465a      	mov	r2, fp
 80226a0:	950f      	str	r5, [sp, #60]	; 0x3c
 80226a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80226a4:	e026      	b.n	80226f4 <_vsnprintf+0x4c0>
                        while(l++ < width) {
 80226a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80226a8:	1c53      	adds	r3, r2, #1
 80226aa:	4295      	cmp	r5, r2
 80226ac:	f240 80a6 	bls.w	80227fc <_vsnprintf+0x5c8>
 80226b0:	eb05 030b 	add.w	r3, r5, fp
 80226b4:	1a9b      	subs	r3, r3, r2
 80226b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80226b8:	970b      	str	r7, [sp, #44]	; 0x2c
 80226ba:	461f      	mov	r7, r3
                            out(' ', buffer, idx++, maxlen);
 80226bc:	465a      	mov	r2, fp
 80226be:	f10b 0b01 	add.w	fp, fp, #1
 80226c2:	4643      	mov	r3, r8
 80226c4:	4651      	mov	r1, sl
 80226c6:	2020      	movs	r0, #32
 80226c8:	47c8      	blx	r9
                        while(l++ < width) {
 80226ca:	455f      	cmp	r7, fp
 80226cc:	d1f6      	bne.n	80226bc <_vsnprintf+0x488>
 80226ce:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80226d0:	1c6b      	adds	r3, r5, #1
 80226d2:	930b      	str	r3, [sp, #44]	; 0x2c
                            out(' ', buffer, idx++, maxlen);
 80226d4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80226d8:	7838      	ldrb	r0, [r7, #0]
 80226da:	2800      	cmp	r0, #0
 80226dc:	d1df      	bne.n	802269e <_vsnprintf+0x46a>
 80226de:	e014      	b.n	802270a <_vsnprintf+0x4d6>
 80226e0:	461e      	mov	r6, r3
                        out(*(p++), buffer, idx++, maxlen);
 80226e2:	f102 0b01 	add.w	fp, r2, #1
 80226e6:	4643      	mov	r3, r8
 80226e8:	4651      	mov	r1, sl
 80226ea:	47c8      	blx	r9
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80226ec:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 80226f0:	b140      	cbz	r0, 8022704 <_vsnprintf+0x4d0>
                        out(*(p++), buffer, idx++, maxlen);
 80226f2:	465a      	mov	r2, fp
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80226f4:	2d00      	cmp	r5, #0
 80226f6:	d0f4      	beq.n	80226e2 <_vsnprintf+0x4ae>
 80226f8:	1e73      	subs	r3, r6, #1
 80226fa:	2e00      	cmp	r6, #0
 80226fc:	d1f0      	bne.n	80226e0 <_vsnprintf+0x4ac>
 80226fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022700:	4693      	mov	fp, r2
 8022702:	e000      	b.n	8022706 <_vsnprintf+0x4d2>
 8022704:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
                    }
                    // post padding
                    if(flags & FLAGS_LEFT) {
 8022706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022708:	b97b      	cbnz	r3, 802272a <_vsnprintf+0x4f6>
                        while(l++ < width) {
                            out(' ', buffer, idx++, maxlen);
                        }
                    }
                    format++;
 802270a:	3401      	adds	r4, #1
                    const char * p = va_arg(va, char *);
 802270c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    while(*format) {
 802270e:	7820      	ldrb	r0, [r4, #0]
 8022710:	b390      	cbz	r0, 8022778 <_vsnprintf+0x544>
        if(*format != '%') {
 8022712:	2825      	cmp	r0, #37	; 0x25
 8022714:	f43f ada1 	beq.w	802225a <_vsnprintf+0x26>
            out(*format, buffer, idx++, maxlen);
 8022718:	f10b 0501 	add.w	r5, fp, #1
 802271c:	4643      	mov	r3, r8
 802271e:	465a      	mov	r2, fp
 8022720:	4651      	mov	r1, sl
 8022722:	47c8      	blx	r9
            format++;
 8022724:	3401      	adds	r4, #1
            out(*format, buffer, idx++, maxlen);
 8022726:	46ab      	mov	fp, r5
            continue;
 8022728:	e7f1      	b.n	802270e <_vsnprintf+0x4da>
 802272a:	465e      	mov	r6, fp
                        while(l++ < width) {
 802272c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802272e:	429d      	cmp	r5, r3
 8022730:	d90b      	bls.n	802274a <_vsnprintf+0x516>
 8022732:	4435      	add	r5, r6
 8022734:	eba5 0b03 	sub.w	fp, r5, r3
                            out(' ', buffer, idx++, maxlen);
 8022738:	4632      	mov	r2, r6
 802273a:	3601      	adds	r6, #1
 802273c:	4643      	mov	r3, r8
 802273e:	4651      	mov	r1, sl
 8022740:	2020      	movs	r0, #32
 8022742:	47c8      	blx	r9
                        while(l++ < width) {
 8022744:	455e      	cmp	r6, fp
 8022746:	d1f7      	bne.n	8022738 <_vsnprintf+0x504>
 8022748:	e7df      	b.n	802270a <_vsnprintf+0x4d6>
 802274a:	46b3      	mov	fp, r6
 802274c:	e7dd      	b.n	802270a <_vsnprintf+0x4d6>
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
 802274e:	f10b 0501 	add.w	r5, fp, #1
 8022752:	4643      	mov	r3, r8
 8022754:	465a      	mov	r2, fp
 8022756:	4651      	mov	r1, sl
 8022758:	2025      	movs	r0, #37	; 0x25
 802275a:	47c8      	blx	r9
                format++;
 802275c:	3401      	adds	r4, #1
                out('%', buffer, idx++, maxlen);
 802275e:	46ab      	mov	fp, r5
                break;
 8022760:	e7d5      	b.n	802270e <_vsnprintf+0x4da>

            default :
                out(*format, buffer, idx++, maxlen);
 8022762:	f10b 0501 	add.w	r5, fp, #1
 8022766:	4643      	mov	r3, r8
 8022768:	465a      	mov	r2, fp
 802276a:	4651      	mov	r1, sl
 802276c:	47c8      	blx	r9
                format++;
 802276e:	3401      	adds	r4, #1
                out(*format, buffer, idx++, maxlen);
 8022770:	46ab      	mov	fp, r5
                break;
 8022772:	e7cc      	b.n	802270e <_vsnprintf+0x4da>
    while(*format) {
 8022774:	f04f 0b00 	mov.w	fp, #0
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8022778:	45d8      	cmp	r8, fp
 802277a:	bf94      	ite	ls
 802277c:	f108 32ff 	addls.w	r2, r8, #4294967295	; 0xffffffff
 8022780:	465a      	movhi	r2, fp
 8022782:	4643      	mov	r3, r8
 8022784:	4651      	mov	r1, sl
 8022786:	2000      	movs	r0, #0
 8022788:	47c8      	blx	r9

    // return written chars without terminating \0
    return (int)idx;
}
 802278a:	4658      	mov	r0, fp
 802278c:	b013      	add	sp, #76	; 0x4c
 802278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        base = 16U;
 8022792:	2310      	movs	r3, #16
                    if((*format != 'i') && (*format != 'd')) {
 8022794:	2869      	cmp	r0, #105	; 0x69
 8022796:	f47f ae9f 	bne.w	80224d8 <_vsnprintf+0x2a4>
                    if(flags & FLAGS_PRECISION) {
 802279a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 802279e:	d131      	bne.n	8022804 <_vsnprintf+0x5d0>
                        if(flags & FLAGS_LONG_LONG) {
 80227a0:	f41c 7f00 	tst.w	ip, #512	; 0x200
 80227a4:	f47f aea1 	bne.w	80224ea <_vsnprintf+0x2b6>
                        else if(flags & FLAGS_LONG) {
 80227a8:	f41c 7f80 	tst.w	ip, #256	; 0x100
 80227ac:	f47f aebf 	bne.w	802252e <_vsnprintf+0x2fa>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 80227b0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80227b4:	f43f aed0 	beq.w	8022558 <_vsnprintf+0x324>
 80227b8:	f857 2b04 	ldr.w	r2, [r7], #4
 80227bc:	b2d2      	uxtb	r2, r2
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 80227be:	f8cd c014 	str.w	ip, [sp, #20]
 80227c2:	9504      	str	r5, [sp, #16]
 80227c4:	9603      	str	r6, [sp, #12]
 80227c6:	9302      	str	r3, [sp, #8]
 80227c8:	0fd3      	lsrs	r3, r2, #31
 80227ca:	9301      	str	r3, [sp, #4]
 80227cc:	2a00      	cmp	r2, #0
 80227ce:	bfb8      	it	lt
 80227d0:	4252      	neglt	r2, r2
 80227d2:	9200      	str	r2, [sp, #0]
 80227d4:	4643      	mov	r3, r8
 80227d6:	465a      	mov	r2, fp
 80227d8:	4651      	mov	r1, sl
 80227da:	4648      	mov	r0, r9
 80227dc:	f7ff fc8a 	bl	80220f4 <_ntoa_long>
 80227e0:	4683      	mov	fp, r0
                    format++;
 80227e2:	3401      	adds	r4, #1
                    break;
 80227e4:	e793      	b.n	802270e <_vsnprintf+0x4da>
                        base =  8U;
 80227e6:	2308      	movs	r3, #8
 80227e8:	e7d4      	b.n	8022794 <_vsnprintf+0x560>
                        base =  2U;
 80227ea:	2302      	movs	r3, #2
                    if(*format == 'X' || *format == 'P') {
 80227ec:	e7d2      	b.n	8022794 <_vsnprintf+0x560>
                        while(l++ < width) {
 80227ee:	465d      	mov	r5, fp
 80227f0:	e725      	b.n	802263e <_vsnprintf+0x40a>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 80227f2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80227f4:	46b3      	mov	fp, r6
 80227f6:	e72b      	b.n	8022650 <_vsnprintf+0x41c>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80227f8:	465e      	mov	r6, fp
 80227fa:	e797      	b.n	802272c <_vsnprintf+0x4f8>
                        while(l++ < width) {
 80227fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80227fe:	e76b      	b.n	80226d8 <_vsnprintf+0x4a4>
    for(s = str; *s && maxsize--; ++s);
 8022800:	463b      	mov	r3, r7
 8022802:	e73b      	b.n	802267c <_vsnprintf+0x448>
                        flags &= ~FLAGS_ZEROPAD;
 8022804:	f02c 0c01 	bic.w	ip, ip, #1
                    if((*format == 'i') || (*format == 'd')) {
 8022808:	e7ca      	b.n	80227a0 <_vsnprintf+0x56c>
 802280a:	bf00      	nop

0802280c <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 802280c:	b40c      	push	{r2, r3}
 802280e:	b510      	push	{r4, lr}
 8022810:	b084      	sub	sp, #16
 8022812:	460a      	mov	r2, r1
 8022814:	ac06      	add	r4, sp, #24
 8022816:	f854 3b04 	ldr.w	r3, [r4], #4
    va_list va;
    va_start(va, format);
 802281a:	9403      	str	r4, [sp, #12]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 802281c:	9400      	str	r4, [sp, #0]
 802281e:	4601      	mov	r1, r0
 8022820:	4803      	ldr	r0, [pc, #12]	; (8022830 <lv_snprintf+0x24>)
 8022822:	f7ff fd07 	bl	8022234 <_vsnprintf>
    va_end(va);
    return ret;
}
 8022826:	b004      	add	sp, #16
 8022828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802282c:	b002      	add	sp, #8
 802282e:	4770      	bx	lr
 8022830:	08021f05 	.word	0x08021f05

08022834 <lv_vsnprintf>:

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
 8022834:	b500      	push	{lr}
 8022836:	b083      	sub	sp, #12
    return _vsnprintf(_out_buffer, buffer, count, format, va);
 8022838:	9300      	str	r3, [sp, #0]
 802283a:	4613      	mov	r3, r2
 802283c:	460a      	mov	r2, r1
 802283e:	4601      	mov	r1, r0
 8022840:	4802      	ldr	r0, [pc, #8]	; (802284c <lv_vsnprintf+0x18>)
 8022842:	f7ff fcf7 	bl	8022234 <_vsnprintf>
}
 8022846:	b003      	add	sp, #12
 8022848:	f85d fb04 	ldr.w	pc, [sp], #4
 802284c:	08021f05 	.word	0x08021f05

08022850 <lv_style_set_prop_helper>:
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
    *prop_storage = prop;
 8022850:	8010      	strh	r0, [r2, #0]
    *value_storage = value;
 8022852:	6019      	str	r1, [r3, #0]
}
 8022854:	4770      	bx	lr

08022856 <lv_style_init>:
{
 8022856:	b508      	push	{r3, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8022858:	2108      	movs	r1, #8
 802285a:	f7ff fa85 	bl	8021d68 <lv_memset_00>
}
 802285e:	bd08      	pop	{r3, pc}

08022860 <lv_style_reset>:
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022860:	8882      	ldrh	r2, [r0, #4]
 8022862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022866:	429a      	cmp	r2, r3
 8022868:	d00d      	beq.n	8022886 <lv_style_reset+0x26>
{
 802286a:	b510      	push	{r4, lr}
 802286c:	4604      	mov	r4, r0
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 802286e:	79c3      	ldrb	r3, [r0, #7]
 8022870:	2b01      	cmp	r3, #1
 8022872:	d804      	bhi.n	802287e <lv_style_reset+0x1e>
    lv_memset_00(style, sizeof(lv_style_t));
 8022874:	2108      	movs	r1, #8
 8022876:	4620      	mov	r0, r4
 8022878:	f7ff fa76 	bl	8021d68 <lv_memset_00>
}
 802287c:	bd10      	pop	{r4, pc}
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 802287e:	6800      	ldr	r0, [r0, #0]
 8022880:	f7ff f810 	bl	80218a4 <lv_mem_free>
 8022884:	e7f6      	b.n	8022874 <lv_style_reset+0x14>
 8022886:	4770      	bx	lr

08022888 <lv_style_register_prop>:
{
 8022888:	b538      	push	{r3, r4, r5, lr}
 802288a:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 802288c:	4b19      	ldr	r3, [pc, #100]	; (80228f4 <lv_style_register_prop+0x6c>)
 802288e:	6818      	ldr	r0, [r3, #0]
 8022890:	b1b8      	cbz	r0, 80228c2 <lv_style_register_prop+0x3a>
    if(((last_custom_prop_id + 1) & LV_STYLE_PROP_META_MASK) != 0) {
 8022892:	4b19      	ldr	r3, [pc, #100]	; (80228f8 <lv_style_register_prop+0x70>)
 8022894:	881b      	ldrh	r3, [r3, #0]
 8022896:	1c5a      	adds	r2, r3, #1
 8022898:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 802289c:	d126      	bne.n	80228ec <lv_style_register_prop+0x64>
    size_t required_size = (last_custom_prop_id + 1 - _LV_STYLE_LAST_BUILT_IN_PROP);
 802289e:	f1a3 026e 	sub.w	r2, r3, #110	; 0x6e
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 80228a2:	4916      	ldr	r1, [pc, #88]	; (80228fc <lv_style_register_prop+0x74>)
 80228a4:	6809      	ldr	r1, [r1, #0]
 80228a6:	4291      	cmp	r1, r2
 80228a8:	d311      	bcc.n	80228ce <lv_style_register_prop+0x46>
    last_custom_prop_id++;
 80228aa:	4a13      	ldr	r2, [pc, #76]	; (80228f8 <lv_style_register_prop+0x70>)
 80228ac:	8813      	ldrh	r3, [r2, #0]
 80228ae:	3301      	adds	r3, #1
 80228b0:	b298      	uxth	r0, r3
 80228b2:	8010      	strh	r0, [r2, #0]
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 80228b4:	4b0f      	ldr	r3, [pc, #60]	; (80228f4 <lv_style_register_prop+0x6c>)
 80228b6:	681b      	ldr	r3, [r3, #0]
 80228b8:	b1bb      	cbz	r3, 80228ea <lv_style_register_prop+0x62>
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
 80228ba:	4403      	add	r3, r0
 80228bc:	f803 5c70 	strb.w	r5, [r3, #-112]
    return last_custom_prop_id;
 80228c0:	e015      	b.n	80228ee <lv_style_register_prop+0x66>
        _lv_style_custom_prop_flag_lookup_table_size = 0;
 80228c2:	4b0e      	ldr	r3, [pc, #56]	; (80228fc <lv_style_register_prop+0x74>)
 80228c4:	2200      	movs	r2, #0
 80228c6:	601a      	str	r2, [r3, #0]
        last_custom_prop_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 80228c8:	236f      	movs	r3, #111	; 0x6f
 80228ca:	4a0b      	ldr	r2, [pc, #44]	; (80228f8 <lv_style_register_prop+0x70>)
 80228cc:	8013      	strh	r3, [r2, #0]
        required_size = (required_size + 31) & ~31;
 80228ce:	3b4f      	subs	r3, #79	; 0x4f
        LV_ASSERT_MSG(required_size > 0, "required size has become 0?");
 80228d0:	f033 041f 	bics.w	r4, r3, #31
 80228d4:	d100      	bne.n	80228d8 <lv_style_register_prop+0x50>
 80228d6:	e7fe      	b.n	80228d6 <lv_style_register_prop+0x4e>
        uint8_t * new_p = lv_mem_realloc(old_p, required_size * sizeof(uint8_t));
 80228d8:	4621      	mov	r1, r4
 80228da:	f7fe ffff 	bl	80218dc <lv_mem_realloc>
        if(new_p == NULL) {
 80228de:	b138      	cbz	r0, 80228f0 <lv_style_register_prop+0x68>
        LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) = new_p;
 80228e0:	4b04      	ldr	r3, [pc, #16]	; (80228f4 <lv_style_register_prop+0x6c>)
 80228e2:	6018      	str	r0, [r3, #0]
        _lv_style_custom_prop_flag_lookup_table_size = required_size;
 80228e4:	4b05      	ldr	r3, [pc, #20]	; (80228fc <lv_style_register_prop+0x74>)
 80228e6:	601c      	str	r4, [r3, #0]
 80228e8:	e7df      	b.n	80228aa <lv_style_register_prop+0x22>
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 80228ea:	e7fe      	b.n	80228ea <lv_style_register_prop+0x62>
        return LV_STYLE_PROP_INV;
 80228ec:	2000      	movs	r0, #0
}
 80228ee:	bd38      	pop	{r3, r4, r5, pc}
            return LV_STYLE_PROP_INV;
 80228f0:	2000      	movs	r0, #0
 80228f2:	e7fc      	b.n	80228ee <lv_style_register_prop+0x66>
 80228f4:	200028d8 	.word	0x200028d8
 80228f8:	20000750 	.word	0x20000750
 80228fc:	2000c17c 	.word	0x2000c17c

08022900 <lv_style_remove_prop>:
{
 8022900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022902:	8883      	ldrh	r3, [r0, #4]
 8022904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022908:	4293      	cmp	r3, r2
 802290a:	d05c      	beq.n	80229c6 <lv_style_remove_prop+0xc6>
 802290c:	4605      	mov	r5, r0
 802290e:	460c      	mov	r4, r1
    if(style->prop_cnt == 0)  return false;
 8022910:	79c0      	ldrb	r0, [r0, #7]
 8022912:	2800      	cmp	r0, #0
 8022914:	d059      	beq.n	80229ca <lv_style_remove_prop+0xca>
    if(style->prop_cnt == 1) {
 8022916:	2801      	cmp	r0, #1
 8022918:	d011      	beq.n	802293e <lv_style_remove_prop+0x3e>
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802291a:	682f      	ldr	r7, [r5, #0]
 802291c:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
    for(i = 0; i < style->prop_cnt; i++) {
 8022920:	f1ac 0602 	sub.w	r6, ip, #2
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022924:	4631      	mov	r1, r6
    for(i = 0; i < style->prop_cnt; i++) {
 8022926:	2200      	movs	r2, #0
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8022928:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 802292c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022930:	42a3      	cmp	r3, r4
 8022932:	d00e      	beq.n	8022952 <lv_style_remove_prop+0x52>
    for(i = 0; i < style->prop_cnt; i++) {
 8022934:	3201      	adds	r2, #1
 8022936:	4290      	cmp	r0, r2
 8022938:	d1f6      	bne.n	8022928 <lv_style_remove_prop+0x28>
    return false;
 802293a:	2000      	movs	r0, #0
 802293c:	e046      	b.n	80229cc <lv_style_remove_prop+0xcc>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 802293e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022942:	428b      	cmp	r3, r1
 8022944:	d001      	beq.n	802294a <lv_style_remove_prop+0x4a>
        return false;
 8022946:	2000      	movs	r0, #0
 8022948:	e040      	b.n	80229cc <lv_style_remove_prop+0xcc>
            style->prop1 = LV_STYLE_PROP_INV;
 802294a:	2300      	movs	r3, #0
 802294c:	80ab      	strh	r3, [r5, #4]
            style->prop_cnt = 0;
 802294e:	71eb      	strb	r3, [r5, #7]
            return true;
 8022950:	e03c      	b.n	80229cc <lv_style_remove_prop+0xcc>
            if(style->prop_cnt == 2) {
 8022952:	2802      	cmp	r0, #2
 8022954:	d010      	beq.n	8022978 <lv_style_remove_prop+0x78>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8022956:	3801      	subs	r0, #1
 8022958:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 802295c:	0040      	lsls	r0, r0, #1
 802295e:	f7fe ff83 	bl	8021868 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 8022962:	4684      	mov	ip, r0
 8022964:	b398      	cbz	r0, 80229ce <lv_style_remove_prop+0xce>
                style->v_p.values_and_props = new_values_and_props;
 8022966:	6028      	str	r0, [r5, #0]
                style->prop_cnt--;
 8022968:	79e8      	ldrb	r0, [r5, #7]
 802296a:	3801      	subs	r0, #1
 802296c:	b2c0      	uxtb	r0, r0
 802296e:	71e8      	strb	r0, [r5, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022970:	0080      	lsls	r0, r0, #2
                for(i = j = 0; j <= style->prop_cnt;
 8022972:	2300      	movs	r3, #0
 8022974:	461a      	mov	r2, r3
 8022976:	e016      	b.n	80229a6 <lv_style_remove_prop+0xa6>
                style->prop_cnt = 1;
 8022978:	2301      	movs	r3, #1
 802297a:	71eb      	strb	r3, [r5, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 802297c:	b94a      	cbnz	r2, 8022992 <lv_style_remove_prop+0x92>
 802297e:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8022982:	80ab      	strh	r3, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	602b      	str	r3, [r5, #0]
            lv_mem_free(old_values);
 8022988:	4638      	mov	r0, r7
 802298a:	f7fe ff8b 	bl	80218a4 <lv_mem_free>
            return true;
 802298e:	2001      	movs	r0, #1
 8022990:	e01c      	b.n	80229cc <lv_style_remove_prop+0xcc>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8022992:	f837 3020 	ldrh.w	r3, [r7, r0, lsl #2]
 8022996:	80ab      	strh	r3, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8022998:	683b      	ldr	r3, [r7, #0]
 802299a:	602b      	str	r3, [r5, #0]
 802299c:	e7f4      	b.n	8022988 <lv_style_remove_prop+0x88>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 802299e:	3301      	adds	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 80229a0:	79e9      	ldrb	r1, [r5, #7]
 80229a2:	4299      	cmp	r1, r3
 80229a4:	d3f0      	bcc.n	8022988 <lv_style_remove_prop+0x88>
                    if(old_props[j] != prop) {
 80229a6:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 80229aa:	42a1      	cmp	r1, r4
 80229ac:	d0f7      	beq.n	802299e <lv_style_remove_prop+0x9e>
                        new_values[i] = old_values[j];
 80229ae:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80229b2:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
                        new_props[i++] = old_props[j];
 80229b6:	f8b6 e000 	ldrh.w	lr, [r6]
 80229ba:	eb0c 0142 	add.w	r1, ip, r2, lsl #1
 80229be:	f821 e000 	strh.w	lr, [r1, r0]
 80229c2:	3201      	adds	r2, #1
 80229c4:	e7eb      	b.n	802299e <lv_style_remove_prop+0x9e>
        return false;
 80229c6:	2000      	movs	r0, #0
 80229c8:	e000      	b.n	80229cc <lv_style_remove_prop+0xcc>
    if(style->prop_cnt == 0)  return false;
 80229ca:	2000      	movs	r0, #0
}
 80229cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(new_values_and_props == NULL) return false;
 80229ce:	2000      	movs	r0, #0
 80229d0:	e7fc      	b.n	80229cc <lv_style_remove_prop+0xcc>
	...

080229d4 <lv_style_transition_dsc_init>:
{
 80229d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229d6:	4604      	mov	r4, r0
 80229d8:	460f      	mov	r7, r1
 80229da:	4615      	mov	r5, r2
 80229dc:	461e      	mov	r6, r3
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 80229de:	2114      	movs	r1, #20
 80229e0:	f7ff f9c2 	bl	8021d68 <lv_memset_00>
    tr->props = props;
 80229e4:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80229e6:	4b05      	ldr	r3, [pc, #20]	; (80229fc <lv_style_transition_dsc_init+0x28>)
 80229e8:	2d00      	cmp	r5, #0
 80229ea:	bf08      	it	eq
 80229ec:	461d      	moveq	r5, r3
 80229ee:	60a5      	str	r5, [r4, #8]
    tr->time = time;
 80229f0:	60e6      	str	r6, [r4, #12]
    tr->delay = delay;
 80229f2:	9b06      	ldr	r3, [sp, #24]
 80229f4:	6123      	str	r3, [r4, #16]
    tr->user_data = user_data;
 80229f6:	9b07      	ldr	r3, [sp, #28]
 80229f8:	6063      	str	r3, [r4, #4]
}
 80229fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80229fc:	08020719 	.word	0x08020719

08022a00 <lv_style_prop_get_default>:
    switch(prop) {
 8022a00:	3803      	subs	r0, #3
 8022a02:	2869      	cmp	r0, #105	; 0x69
 8022a04:	d84f      	bhi.n	8022aa6 <lv_style_prop_get_default+0xa6>
 8022a06:	e8df f000 	tbb	[pc, r0]
 8022a0a:	4e4b      	.short	0x4e4b
 8022a0c:	4e4e4b4e 	.word	0x4e4e4b4e
 8022a10:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a14:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a18:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a1c:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a20:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a24:	384e4e4e 	.word	0x384e4e4e
 8022a28:	4e4e3b4e 	.word	0x4e4e3b4e
 8022a2c:	4e4e4e45 	.word	0x4e4e4e45
 8022a30:	4e4e4e43 	.word	0x4e4e4e43
 8022a34:	3b4e4e4e 	.word	0x3b4e4e4e
 8022a38:	4e474e43 	.word	0x4e474e43
 8022a3c:	4e433b4e 	.word	0x4e433b4e
 8022a40:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a44:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a48:	3b4e4e4e 	.word	0x3b4e4e4e
 8022a4c:	4e3b4343 	.word	0x4e3b4343
 8022a50:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a54:	4e4e433b 	.word	0x4e4e433b
 8022a58:	4e433b4e 	.word	0x4e433b4e
 8022a5c:	4e49433b 	.word	0x4e49433b
 8022a60:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a64:	434e4e4e 	.word	0x434e4e4e
 8022a68:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a6c:	4e4e4e4e 	.word	0x4e4e4e4e
 8022a70:	354e4e4e 	.word	0x354e4e4e
            value.num = LV_IMG_ZOOM_NONE;
 8022a74:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 8022a78:	4770      	bx	lr
 8022a7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 8022a7e:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8022a80:	2000      	movs	r0, #0
 8022a82:	f36f 0004 	bfc	r0, #0, #5
 8022a86:	f36f 104a 	bfc	r0, #5, #6
 8022a8a:	f36f 20cf 	bfc	r0, #11, #5
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 8022a8e:	4770      	bx	lr
            value.num = LV_OPA_COVER;
 8022a90:	20ff      	movs	r0, #255	; 0xff
            break;
 8022a92:	4770      	bx	lr
            value.num = 255;
 8022a94:	20ff      	movs	r0, #255	; 0xff
            break;
 8022a96:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 8022a98:	200f      	movs	r0, #15
            break;
 8022a9a:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 8022a9c:	4803      	ldr	r0, [pc, #12]	; (8022aac <lv_style_prop_get_default+0xac>)
            break;
 8022a9e:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 8022aa0:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 8022aa4:	4770      	bx	lr
            value.ptr = NULL;
 8022aa6:	2000      	movs	r0, #0
}
 8022aa8:	4770      	bx	lr
 8022aaa:	bf00      	nop
 8022aac:	08030d78 	.word	0x08030d78

08022ab0 <lv_style_get_prop>:
{
 8022ab0:	b570      	push	{r4, r5, r6, lr}
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	4614      	mov	r4, r2
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022ab6:	8882      	ldrh	r2, [r0, #4]
 8022ab8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8022abc:	4282      	cmp	r2, r0
 8022abe:	d016      	beq.n	8022aee <lv_style_get_prop+0x3e>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8022ac0:	79d8      	ldrb	r0, [r3, #7]
 8022ac2:	b338      	cbz	r0, 8022b14 <lv_style_get_prop+0x64>

    if(style->prop_cnt > 1) {
 8022ac4:	2801      	cmp	r0, #1
 8022ac6:	d946      	bls.n	8022b56 <lv_style_get_prop+0xa6>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022ac8:	681e      	ldr	r6, [r3, #0]
 8022aca:	4605      	mov	r5, r0
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8022acc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8022ad0:	1e83      	subs	r3, r0, #2
 8022ad2:	f04f 0c00 	mov.w	ip, #0
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8022ad6:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8022ada:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 8022ade:	4281      	cmp	r1, r0
 8022ae0:	d029      	beq.n	8022b36 <lv_style_get_prop+0x86>
        for(i = 0; i < style->prop_cnt; i++) {
 8022ae2:	f10c 0c01 	add.w	ip, ip, #1
 8022ae6:	4565      	cmp	r5, ip
 8022ae8:	d1f5      	bne.n	8022ad6 <lv_style_get_prop+0x26>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
    }
    return LV_STYLE_RES_NOT_FOUND;
 8022aea:	2000      	movs	r0, #0
 8022aec:	e012      	b.n	8022b14 <lv_style_get_prop+0x64>
        for(i = 0; i < style->prop_cnt; i++) {
 8022aee:	79de      	ldrb	r6, [r3, #7]
 8022af0:	2e00      	cmp	r6, #0
 8022af2:	d045      	beq.n	8022b80 <lv_style_get_prop+0xd0>
            const_prop = style->v_p.const_props + i;
 8022af4:	681d      	ldr	r5, [r3, #0]
 8022af6:	46ac      	mov	ip, r5
        for(i = 0; i < style->prop_cnt; i++) {
 8022af8:	2300      	movs	r3, #0
            const_prop = style->v_p.const_props + i;
 8022afa:	46e6      	mov	lr, ip
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8022afc:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
 8022b00:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 8022b04:	4281      	cmp	r1, r0
 8022b06:	d006      	beq.n	8022b16 <lv_style_get_prop+0x66>
        for(i = 0; i < style->prop_cnt; i++) {
 8022b08:	3301      	adds	r3, #1
 8022b0a:	f10c 0c08 	add.w	ip, ip, #8
 8022b0e:	42b3      	cmp	r3, r6
 8022b10:	d1f3      	bne.n	8022afa <lv_style_get_prop+0x4a>
        return LV_STYLE_RES_NOT_FOUND;
 8022b12:	2000      	movs	r0, #0
}
 8022b14:	bd70      	pop	{r4, r5, r6, pc}
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8022b16:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8022b1a:	d133      	bne.n	8022b84 <lv_style_get_prop+0xd4>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8022b1c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8022b20:	d104      	bne.n	8022b2c <lv_style_get_prop+0x7c>
 8022b22:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022b26:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8022b28:	2001      	movs	r0, #1
 8022b2a:	e7f3      	b.n	8022b14 <lv_style_get_prop+0x64>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8022b2c:	f7ff ff68 	bl	8022a00 <lv_style_prop_get_default>
 8022b30:	6020      	str	r0, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8022b32:	2001      	movs	r0, #1
 8022b34:	e7ee      	b.n	8022b14 <lv_style_get_prop+0x64>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8022b36:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8022b3a:	d125      	bne.n	8022b88 <lv_style_get_prop+0xd8>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8022b3c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8022b40:	d104      	bne.n	8022b4c <lv_style_get_prop+0x9c>
                    *value = values[i];
 8022b42:	f856 302c 	ldr.w	r3, [r6, ip, lsl #2]
 8022b46:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8022b48:	2001      	movs	r0, #1
 8022b4a:	e7e3      	b.n	8022b14 <lv_style_get_prop+0x64>
                    *value = lv_style_prop_get_default(prop_id);
 8022b4c:	f7ff ff58 	bl	8022a00 <lv_style_prop_get_default>
 8022b50:	6020      	str	r0, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8022b52:	2001      	movs	r0, #1
 8022b54:	e7de      	b.n	8022b14 <lv_style_get_prop+0x64>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8022b56:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8022b5a:	4281      	cmp	r1, r0
 8022b5c:	d001      	beq.n	8022b62 <lv_style_get_prop+0xb2>
    return LV_STYLE_RES_NOT_FOUND;
 8022b5e:	2000      	movs	r0, #0
 8022b60:	e7d8      	b.n	8022b14 <lv_style_get_prop+0x64>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8022b62:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8022b66:	d111      	bne.n	8022b8c <lv_style_get_prop+0xdc>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8022b68:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8022b6c:	d103      	bne.n	8022b76 <lv_style_get_prop+0xc6>
 8022b6e:	681b      	ldr	r3, [r3, #0]
 8022b70:	6023      	str	r3, [r4, #0]
        return LV_STYLE_RES_FOUND;
 8022b72:	2001      	movs	r0, #1
 8022b74:	e7ce      	b.n	8022b14 <lv_style_get_prop+0x64>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8022b76:	f7ff ff43 	bl	8022a00 <lv_style_prop_get_default>
 8022b7a:	6020      	str	r0, [r4, #0]
        return LV_STYLE_RES_FOUND;
 8022b7c:	2001      	movs	r0, #1
 8022b7e:	e7c9      	b.n	8022b14 <lv_style_get_prop+0x64>
        return LV_STYLE_RES_NOT_FOUND;
 8022b80:	2000      	movs	r0, #0
 8022b82:	e7c7      	b.n	8022b14 <lv_style_get_prop+0x64>
                    return LV_STYLE_RES_INHERIT;
 8022b84:	2002      	movs	r0, #2
 8022b86:	e7c5      	b.n	8022b14 <lv_style_get_prop+0x64>
                    return LV_STYLE_RES_INHERIT;
 8022b88:	2002      	movs	r0, #2
 8022b8a:	e7c3      	b.n	8022b14 <lv_style_get_prop+0x64>
            return LV_STYLE_RES_INHERIT;
 8022b8c:	2002      	movs	r0, #2
 8022b8e:	e7c1      	b.n	8022b14 <lv_style_get_prop+0x64>

08022b90 <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 8022b90:	79c0      	ldrb	r0, [r0, #7]
}
 8022b92:	fab0 f080 	clz	r0, r0
 8022b96:	0940      	lsrs	r0, r0, #5
 8022b98:	4770      	bx	lr

08022b9a <_lv_style_get_prop_group>:
    uint16_t group = (prop & 0x1FF) >> 4;
 8022b9a:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8022b9c:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8022ba0:	bf0c      	ite	eq
 8022ba2:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8022ba6:	2007      	movne	r0, #7
}
 8022ba8:	4770      	bx	lr

08022baa <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 8022baa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022bae:	4690      	mov	r8, r2
 8022bb0:	461f      	mov	r7, r3
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022bb2:	8882      	ldrh	r2, [r0, #4]
 8022bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022bb8:	429a      	cmp	r2, r3
 8022bba:	d05f      	beq.n	8022c7c <lv_style_set_prop_internal+0xd2>
 8022bbc:	4604      	mov	r4, r0
 8022bbe:	460e      	mov	r6, r1
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8022bc0:	f3c1 050d 	ubfx	r5, r1, #0, #14

    if(style->prop_cnt > 1) {
 8022bc4:	79c3      	ldrb	r3, [r0, #7]
 8022bc6:	2b01      	cmp	r3, #1
 8022bc8:	d947      	bls.n	8022c5a <lv_style_set_prop_internal+0xb0>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022bca:	6800      	ldr	r0, [r0, #0]
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022bcc:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8022bd0:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8022bd4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022bd8:	4401      	add	r1, r0
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 8022bda:	460a      	mov	r2, r1
 8022bdc:	3902      	subs	r1, #2
 8022bde:	f8b2 e000 	ldrh.w	lr, [r2]
 8022be2:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
 8022be6:	4575      	cmp	r5, lr
 8022be8:	d031      	beq.n	8022c4e <lv_style_set_prop_internal+0xa4>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022bea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8022bee:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 8022bf2:	d1f2      	bne.n	8022bda <lv_style_set_prop_internal+0x30>
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
                return;
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8022bf4:	3301      	adds	r3, #1
 8022bf6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 8022bfa:	0059      	lsls	r1, r3, #1
 8022bfc:	f7fe fe6e 	bl	80218dc <lv_mem_realloc>
        if(values_and_props == NULL) return;
 8022c00:	4602      	mov	r2, r0
 8022c02:	2800      	cmp	r0, #0
 8022c04:	d03a      	beq.n	8022c7c <lv_style_set_prop_internal+0xd2>
        style->v_p.values_and_props = values_and_props;
 8022c06:	6020      	str	r0, [r4, #0]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022c08:	79e3      	ldrb	r3, [r4, #7]
 8022c0a:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
        props = (uint16_t *)tmp;
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022c0e:	1e59      	subs	r1, r3, #1
 8022c10:	d40c      	bmi.n	8022c2c <lv_style_set_prop_internal+0x82>
 8022c12:	3302      	adds	r3, #2
 8022c14:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8022c18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8022c1c:	f10c 0c04 	add.w	ip, ip, #4
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 8022c20:	f831 0902 	ldrh.w	r0, [r1], #-2
 8022c24:	f823 0d02 	strh.w	r0, [r3, #-2]!
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8022c28:	4563      	cmp	r3, ip
 8022c2a:	d1f9      	bne.n	8022c20 <lv_style_set_prop_internal+0x76>
        }
        style->prop_cnt++;
 8022c2c:	79e1      	ldrb	r1, [r4, #7]
 8022c2e:	3101      	adds	r1, #1
 8022c30:	b2c9      	uxtb	r1, r1
 8022c32:	71e1      	strb	r1, [r4, #7]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022c34:	0088      	lsls	r0, r1, #2
        props = (uint16_t *)tmp;
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8022c36:	1f03      	subs	r3, r0, #4
 8022c38:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8022c3c:	3901      	subs	r1, #1
 8022c3e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8022c42:	4413      	add	r3, r2
 8022c44:	440a      	add	r2, r1
 8022c46:	4641      	mov	r1, r8
 8022c48:	4630      	mov	r0, r6
 8022c4a:	47b8      	blx	r7
 8022c4c:	e00e      	b.n	8022c6c <lv_style_set_prop_internal+0xc2>
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8022c4e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8022c52:	4641      	mov	r1, r8
 8022c54:	4630      	mov	r0, r6
 8022c56:	47b8      	blx	r7
                return;
 8022c58:	e010      	b.n	8022c7c <lv_style_set_prop_internal+0xd2>
    }
    else if(style->prop_cnt == 1) {
 8022c5a:	2b01      	cmp	r3, #1
 8022c5c:	d010      	beq.n	8022c80 <lv_style_set_prop_internal+0xd6>
        props[0] = style->prop1;
        values[0] = value_tmp;
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
    }
    else {
        style->prop_cnt = 1;
 8022c5e:	2301      	movs	r3, #1
 8022c60:	71c3      	strb	r3, [r0, #7]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8022c62:	4603      	mov	r3, r0
 8022c64:	1d02      	adds	r2, r0, #4
 8022c66:	4641      	mov	r1, r8
 8022c68:	4630      	mov	r0, r6
 8022c6a:	47b8      	blx	r7
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 8022c6c:	4628      	mov	r0, r5
 8022c6e:	f7ff ff94 	bl	8022b9a <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8022c72:	2301      	movs	r3, #1
 8022c74:	4083      	lsls	r3, r0
 8022c76:	79a0      	ldrb	r0, [r4, #6]
 8022c78:	4318      	orrs	r0, r3
 8022c7a:	71a0      	strb	r0, [r4, #6]
}
 8022c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8022c80:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8022c84:	42aa      	cmp	r2, r5
 8022c86:	d018      	beq.n	8022cba <lv_style_set_prop_internal+0x110>
        uint8_t * values_and_props = lv_mem_alloc(size);
 8022c88:	200c      	movs	r0, #12
 8022c8a:	f7fe fded 	bl	8021868 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8022c8e:	4603      	mov	r3, r0
 8022c90:	2800      	cmp	r0, #0
 8022c92:	d0f3      	beq.n	8022c7c <lv_style_set_prop_internal+0xd2>
        lv_style_value_t value_tmp = style->v_p.value1;
 8022c94:	6820      	ldr	r0, [r4, #0]
        style->v_p.values_and_props = values_and_props;
 8022c96:	6023      	str	r3, [r4, #0]
        style->prop_cnt++;
 8022c98:	79e1      	ldrb	r1, [r4, #7]
 8022c9a:	3101      	adds	r1, #1
 8022c9c:	b2c9      	uxtb	r1, r1
 8022c9e:	71e1      	strb	r1, [r4, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022ca0:	eb03 0281 	add.w	r2, r3, r1, lsl #2
        props[0] = style->prop1;
 8022ca4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8022ca8:	f823 c021 	strh.w	ip, [r3, r1, lsl #2]
        values[0] = value_tmp;
 8022cac:	f843 0b04 	str.w	r0, [r3], #4
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8022cb0:	3202      	adds	r2, #2
 8022cb2:	4641      	mov	r1, r8
 8022cb4:	4630      	mov	r0, r6
 8022cb6:	47b8      	blx	r7
 8022cb8:	e7d8      	b.n	8022c6c <lv_style_set_prop_internal+0xc2>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8022cba:	4603      	mov	r3, r0
 8022cbc:	1d02      	adds	r2, r0, #4
 8022cbe:	4641      	mov	r1, r8
 8022cc0:	4630      	mov	r0, r6
 8022cc2:	47b8      	blx	r7
            return;
 8022cc4:	e7da      	b.n	8022c7c <lv_style_set_prop_internal+0xd2>
	...

08022cc8 <lv_style_set_prop>:
{
 8022cc8:	b508      	push	{r3, lr}
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 8022cca:	4b02      	ldr	r3, [pc, #8]	; (8022cd4 <lv_style_set_prop+0xc>)
 8022ccc:	f7ff ff6d 	bl	8022baa <lv_style_set_prop_internal>
}
 8022cd0:	bd08      	pop	{r3, pc}
 8022cd2:	bf00      	nop
 8022cd4:	08022851 	.word	0x08022851

08022cd8 <_lv_style_prop_lookup_flags>:
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8022cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022cdc:	4298      	cmp	r0, r3
 8022cde:	d012      	beq.n	8022d06 <_lv_style_prop_lookup_flags+0x2e>
    if(prop == LV_STYLE_PROP_INV) return 0;
 8022ce0:	b198      	cbz	r0, 8022d0a <_lv_style_prop_lookup_flags+0x32>
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 8022ce2:	286f      	cmp	r0, #111	; 0x6f
 8022ce4:	d90a      	bls.n	8022cfc <_lv_style_prop_lookup_flags+0x24>
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8022ce6:	4b0b      	ldr	r3, [pc, #44]	; (8022d14 <_lv_style_prop_lookup_flags+0x3c>)
 8022ce8:	681b      	ldr	r3, [r3, #0]
 8022cea:	b183      	cbz	r3, 8022d0e <_lv_style_prop_lookup_flags+0x36>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 8022cec:	3870      	subs	r0, #112	; 0x70
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 8022cee:	b280      	uxth	r0, r0
 8022cf0:	4a09      	ldr	r2, [pc, #36]	; (8022d18 <_lv_style_prop_lookup_flags+0x40>)
 8022cf2:	6812      	ldr	r2, [r2, #0]
 8022cf4:	4290      	cmp	r0, r2
 8022cf6:	d304      	bcc.n	8022d02 <_lv_style_prop_lookup_flags+0x2a>
    return 0;
 8022cf8:	2000      	movs	r0, #0
}
 8022cfa:	4770      	bx	lr
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 8022cfc:	4b07      	ldr	r3, [pc, #28]	; (8022d1c <_lv_style_prop_lookup_flags+0x44>)
 8022cfe:	5c18      	ldrb	r0, [r3, r0]
 8022d00:	4770      	bx	lr
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 8022d02:	5c18      	ldrb	r0, [r3, r0]
 8022d04:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 8022d06:	201f      	movs	r0, #31
 8022d08:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 8022d0a:	2000      	movs	r0, #0
 8022d0c:	4770      	bx	lr
    return 0;
 8022d0e:	2000      	movs	r0, #0
 8022d10:	4770      	bx	lr
 8022d12:	bf00      	nop
 8022d14:	200028d8 	.word	0x200028d8
 8022d18:	2000c17c 	.word	0x2000c17c
 8022d1c:	08032e68 	.word	0x08032e68

08022d20 <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 8022d20:	b508      	push	{r3, lr}
 8022d22:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 8022d24:	2101      	movs	r1, #1
 8022d26:	f7ff ffcf 	bl	8022cc8 <lv_style_set_prop>
}
 8022d2a:	bd08      	pop	{r3, pc}

08022d2c <lv_style_set_max_width>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_WIDTH, v);
}

void lv_style_set_max_width(lv_style_t * style, lv_coord_t value)
{
 8022d2c:	b508      	push	{r3, lr}
 8022d2e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 8022d30:	2103      	movs	r1, #3
 8022d32:	f7ff ffc9 	bl	8022cc8 <lv_style_set_prop>
}
 8022d36:	bd08      	pop	{r3, pc}

08022d38 <lv_style_set_height>:

void lv_style_set_height(lv_style_t * style, lv_coord_t value)
{
 8022d38:	b508      	push	{r3, lr}
 8022d3a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 8022d3c:	2104      	movs	r1, #4
 8022d3e:	f7ff ffc3 	bl	8022cc8 <lv_style_set_prop>
}
 8022d42:	bd08      	pop	{r3, pc}

08022d44 <lv_style_set_max_height>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_HEIGHT, v);
}

void lv_style_set_max_height(lv_style_t * style, lv_coord_t value)
{
 8022d44:	b508      	push	{r3, lr}
 8022d46:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 8022d48:	2106      	movs	r1, #6
 8022d4a:	f7ff ffbd 	bl	8022cc8 <lv_style_set_prop>
}
 8022d4e:	bd08      	pop	{r3, pc}

08022d50 <lv_style_set_transform_width>:
    };
    lv_style_set_prop(style, LV_STYLE_ALIGN, v);
}

void lv_style_set_transform_width(lv_style_t * style, lv_coord_t value)
{
 8022d50:	b508      	push	{r3, lr}
 8022d52:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8022d54:	2168      	movs	r1, #104	; 0x68
 8022d56:	f7ff ffb7 	bl	8022cc8 <lv_style_set_prop>
}
 8022d5a:	bd08      	pop	{r3, pc}

08022d5c <lv_style_set_transform_height>:

void lv_style_set_transform_height(lv_style_t * style, lv_coord_t value)
{
 8022d5c:	b508      	push	{r3, lr}
 8022d5e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8022d60:	2169      	movs	r1, #105	; 0x69
 8022d62:	f7ff ffb1 	bl	8022cc8 <lv_style_set_prop>
}
 8022d66:	bd08      	pop	{r3, pc}

08022d68 <lv_style_set_pad_top>:
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_PIVOT_Y, v);
}

void lv_style_set_pad_top(lv_style_t * style, lv_coord_t value)
{
 8022d68:	b508      	push	{r3, lr}
 8022d6a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 8022d6c:	2110      	movs	r1, #16
 8022d6e:	f7ff ffab 	bl	8022cc8 <lv_style_set_prop>
}
 8022d72:	bd08      	pop	{r3, pc}

08022d74 <lv_style_set_pad_bottom>:

void lv_style_set_pad_bottom(lv_style_t * style, lv_coord_t value)
{
 8022d74:	b508      	push	{r3, lr}
 8022d76:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 8022d78:	2111      	movs	r1, #17
 8022d7a:	f7ff ffa5 	bl	8022cc8 <lv_style_set_prop>
}
 8022d7e:	bd08      	pop	{r3, pc}

08022d80 <lv_style_set_pad_left>:

void lv_style_set_pad_left(lv_style_t * style, lv_coord_t value)
{
 8022d80:	b508      	push	{r3, lr}
 8022d82:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8022d84:	2112      	movs	r1, #18
 8022d86:	f7ff ff9f 	bl	8022cc8 <lv_style_set_prop>
}
 8022d8a:	bd08      	pop	{r3, pc}

08022d8c <lv_style_set_pad_right>:

void lv_style_set_pad_right(lv_style_t * style, lv_coord_t value)
{
 8022d8c:	b508      	push	{r3, lr}
 8022d8e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8022d90:	2113      	movs	r1, #19
 8022d92:	f7ff ff99 	bl	8022cc8 <lv_style_set_prop>
}
 8022d96:	bd08      	pop	{r3, pc}

08022d98 <lv_style_set_pad_row>:

void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 8022d98:	b508      	push	{r3, lr}
 8022d9a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 8022d9c:	2114      	movs	r1, #20
 8022d9e:	f7ff ff93 	bl	8022cc8 <lv_style_set_prop>
}
 8022da2:	bd08      	pop	{r3, pc}

08022da4 <lv_style_set_pad_column>:

void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value)
{
 8022da4:	b508      	push	{r3, lr}
 8022da6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 8022da8:	2115      	movs	r1, #21
 8022daa:	f7ff ff8d 	bl	8022cc8 <lv_style_set_prop>
}
 8022dae:	bd08      	pop	{r3, pc}

08022db0 <lv_style_set_bg_color>:

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8022db0:	b500      	push	{lr}
 8022db2:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022db4:	2300      	movs	r3, #0
 8022db6:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8022dba:	b28a      	uxth	r2, r1
 8022dbc:	2120      	movs	r1, #32
 8022dbe:	f7ff ff83 	bl	8022cc8 <lv_style_set_prop>
}
 8022dc2:	b003      	add	sp, #12
 8022dc4:	f85d fb04 	ldr.w	pc, [sp], #4

08022dc8 <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 8022dc8:	b508      	push	{r3, lr}
 8022dca:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8022dcc:	2121      	movs	r1, #33	; 0x21
 8022dce:	f7ff ff7b 	bl	8022cc8 <lv_style_set_prop>
}
 8022dd2:	bd08      	pop	{r3, pc}

08022dd4 <lv_style_set_bg_grad_color>:

void lv_style_set_bg_grad_color(lv_style_t * style, lv_color_t value)
{
 8022dd4:	b500      	push	{lr}
 8022dd6:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022dd8:	2300      	movs	r3, #0
 8022dda:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 8022dde:	b28a      	uxth	r2, r1
 8022de0:	2122      	movs	r1, #34	; 0x22
 8022de2:	f7ff ff71 	bl	8022cc8 <lv_style_set_prop>
}
 8022de6:	b003      	add	sp, #12
 8022de8:	f85d fb04 	ldr.w	pc, [sp], #4

08022dec <lv_style_set_bg_img_src>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_DITHER_MODE, v);
}

void lv_style_set_bg_img_src(lv_style_t * style, const void * value)
{
 8022dec:	b508      	push	{r3, lr}
 8022dee:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 8022df0:	2128      	movs	r1, #40	; 0x28
 8022df2:	f7ff ff69 	bl	8022cc8 <lv_style_set_prop>
}
 8022df6:	bd08      	pop	{r3, pc}

08022df8 <lv_style_set_border_color>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_TILED, v);
}

void lv_style_set_border_color(lv_style_t * style, lv_color_t value)
{
 8022df8:	b500      	push	{lr}
 8022dfa:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022dfc:	2300      	movs	r3, #0
 8022dfe:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 8022e02:	b28a      	uxth	r2, r1
 8022e04:	2130      	movs	r1, #48	; 0x30
 8022e06:	f7ff ff5f 	bl	8022cc8 <lv_style_set_prop>
}
 8022e0a:	b003      	add	sp, #12
 8022e0c:	f85d fb04 	ldr.w	pc, [sp], #4

08022e10 <lv_style_set_border_opa>:

void lv_style_set_border_opa(lv_style_t * style, lv_opa_t value)
{
 8022e10:	b508      	push	{r3, lr}
 8022e12:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_OPA, v);
 8022e14:	2131      	movs	r1, #49	; 0x31
 8022e16:	f7ff ff57 	bl	8022cc8 <lv_style_set_prop>
}
 8022e1a:	bd08      	pop	{r3, pc}

08022e1c <lv_style_set_border_width>:

void lv_style_set_border_width(lv_style_t * style, lv_coord_t value)
{
 8022e1c:	b508      	push	{r3, lr}
 8022e1e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 8022e20:	2132      	movs	r1, #50	; 0x32
 8022e22:	f7ff ff51 	bl	8022cc8 <lv_style_set_prop>
}
 8022e26:	bd08      	pop	{r3, pc}

08022e28 <lv_style_set_border_side>:

void lv_style_set_border_side(lv_style_t * style, lv_border_side_t value)
{
 8022e28:	b508      	push	{r3, lr}
 8022e2a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 8022e2c:	2133      	movs	r1, #51	; 0x33
 8022e2e:	f7ff ff4b 	bl	8022cc8 <lv_style_set_prop>
}
 8022e32:	bd08      	pop	{r3, pc}

08022e34 <lv_style_set_border_post>:

void lv_style_set_border_post(lv_style_t * style, bool value)
{
 8022e34:	b508      	push	{r3, lr}
 8022e36:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 8022e38:	2134      	movs	r1, #52	; 0x34
 8022e3a:	f7ff ff45 	bl	8022cc8 <lv_style_set_prop>
}
 8022e3e:	bd08      	pop	{r3, pc}

08022e40 <lv_style_set_outline_width>:

void lv_style_set_outline_width(lv_style_t * style, lv_coord_t value)
{
 8022e40:	b508      	push	{r3, lr}
 8022e42:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8022e44:	2135      	movs	r1, #53	; 0x35
 8022e46:	f7ff ff3f 	bl	8022cc8 <lv_style_set_prop>
}
 8022e4a:	bd08      	pop	{r3, pc}

08022e4c <lv_style_set_outline_color>:

void lv_style_set_outline_color(lv_style_t * style, lv_color_t value)
{
 8022e4c:	b500      	push	{lr}
 8022e4e:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022e50:	2300      	movs	r3, #0
 8022e52:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 8022e56:	b28a      	uxth	r2, r1
 8022e58:	2136      	movs	r1, #54	; 0x36
 8022e5a:	f7ff ff35 	bl	8022cc8 <lv_style_set_prop>
}
 8022e5e:	b003      	add	sp, #12
 8022e60:	f85d fb04 	ldr.w	pc, [sp], #4

08022e64 <lv_style_set_outline_opa>:

void lv_style_set_outline_opa(lv_style_t * style, lv_opa_t value)
{
 8022e64:	b508      	push	{r3, lr}
 8022e66:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 8022e68:	2137      	movs	r1, #55	; 0x37
 8022e6a:	f7ff ff2d 	bl	8022cc8 <lv_style_set_prop>
}
 8022e6e:	bd08      	pop	{r3, pc}

08022e70 <lv_style_set_outline_pad>:

void lv_style_set_outline_pad(lv_style_t * style, lv_coord_t value)
{
 8022e70:	b508      	push	{r3, lr}
 8022e72:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8022e74:	2138      	movs	r1, #56	; 0x38
 8022e76:	f7ff ff27 	bl	8022cc8 <lv_style_set_prop>
}
 8022e7a:	bd08      	pop	{r3, pc}

08022e7c <lv_style_set_shadow_width>:

void lv_style_set_shadow_width(lv_style_t * style, lv_coord_t value)
{
 8022e7c:	b508      	push	{r3, lr}
 8022e7e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8022e80:	2140      	movs	r1, #64	; 0x40
 8022e82:	f7ff ff21 	bl	8022cc8 <lv_style_set_prop>
}
 8022e86:	bd08      	pop	{r3, pc}

08022e88 <lv_style_set_shadow_ofs_y>:
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_X, v);
}

void lv_style_set_shadow_ofs_y(lv_style_t * style, lv_coord_t value)
{
 8022e88:	b508      	push	{r3, lr}
 8022e8a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8022e8c:	2142      	movs	r1, #66	; 0x42
 8022e8e:	f7ff ff1b 	bl	8022cc8 <lv_style_set_prop>
}
 8022e92:	bd08      	pop	{r3, pc}

08022e94 <lv_style_set_shadow_spread>:

void lv_style_set_shadow_spread(lv_style_t * style, lv_coord_t value)
{
 8022e94:	b508      	push	{r3, lr}
 8022e96:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 8022e98:	2143      	movs	r1, #67	; 0x43
 8022e9a:	f7ff ff15 	bl	8022cc8 <lv_style_set_prop>
}
 8022e9e:	bd08      	pop	{r3, pc}

08022ea0 <lv_style_set_shadow_color>:

void lv_style_set_shadow_color(lv_style_t * style, lv_color_t value)
{
 8022ea0:	b500      	push	{lr}
 8022ea2:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022ea4:	2300      	movs	r3, #0
 8022ea6:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8022eaa:	b28a      	uxth	r2, r1
 8022eac:	2144      	movs	r1, #68	; 0x44
 8022eae:	f7ff ff0b 	bl	8022cc8 <lv_style_set_prop>
}
 8022eb2:	b003      	add	sp, #12
 8022eb4:	f85d fb04 	ldr.w	pc, [sp], #4

08022eb8 <lv_style_set_shadow_opa>:

void lv_style_set_shadow_opa(lv_style_t * style, lv_opa_t value)
{
 8022eb8:	b508      	push	{r3, lr}
 8022eba:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OPA, v);
 8022ebc:	2145      	movs	r1, #69	; 0x45
 8022ebe:	f7ff ff03 	bl	8022cc8 <lv_style_set_prop>
}
 8022ec2:	bd08      	pop	{r3, pc}

08022ec4 <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 8022ec4:	b508      	push	{r3, lr}
 8022ec6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 8022ec8:	2149      	movs	r1, #73	; 0x49
 8022eca:	f7ff fefd 	bl	8022cc8 <lv_style_set_prop>
}
 8022ece:	bd08      	pop	{r3, pc}

08022ed0 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8022ed0:	b500      	push	{lr}
 8022ed2:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 8022eda:	b28a      	uxth	r2, r1
 8022edc:	214d      	movs	r1, #77	; 0x4d
 8022ede:	f7ff fef3 	bl	8022cc8 <lv_style_set_prop>
}
 8022ee2:	b003      	add	sp, #12
 8022ee4:	f85d fb04 	ldr.w	pc, [sp], #4

08022ee8 <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 8022ee8:	b508      	push	{r3, lr}
 8022eea:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8022eec:	2150      	movs	r1, #80	; 0x50
 8022eee:	f7ff feeb 	bl	8022cc8 <lv_style_set_prop>
}
 8022ef2:	bd08      	pop	{r3, pc}

08022ef4 <lv_style_set_arc_rounded>:

void lv_style_set_arc_rounded(lv_style_t * style, bool value)
{
 8022ef4:	b508      	push	{r3, lr}
 8022ef6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 8022ef8:	2151      	movs	r1, #81	; 0x51
 8022efa:	f7ff fee5 	bl	8022cc8 <lv_style_set_prop>
}
 8022efe:	bd08      	pop	{r3, pc}

08022f00 <lv_style_set_arc_color>:

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 8022f00:	b500      	push	{lr}
 8022f02:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022f04:	2300      	movs	r3, #0
 8022f06:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 8022f0a:	b28a      	uxth	r2, r1
 8022f0c:	2152      	movs	r1, #82	; 0x52
 8022f0e:	f7ff fedb 	bl	8022cc8 <lv_style_set_prop>
}
 8022f12:	b003      	add	sp, #12
 8022f14:	f85d fb04 	ldr.w	pc, [sp], #4

08022f18 <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 8022f18:	b500      	push	{lr}
 8022f1a:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8022f1c:	2300      	movs	r3, #0
 8022f1e:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 8022f22:	b28a      	uxth	r2, r1
 8022f24:	2155      	movs	r1, #85	; 0x55
 8022f26:	f7ff fecf 	bl	8022cc8 <lv_style_set_prop>
}
 8022f2a:	b003      	add	sp, #12
 8022f2c:	f85d fb04 	ldr.w	pc, [sp], #4

08022f30 <lv_style_set_text_font>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 8022f30:	b508      	push	{r3, lr}
 8022f32:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 8022f34:	2157      	movs	r1, #87	; 0x57
 8022f36:	f7ff fec7 	bl	8022cc8 <lv_style_set_prop>
}
 8022f3a:	bd08      	pop	{r3, pc}

08022f3c <lv_style_set_text_line_space>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LETTER_SPACE, v);
}

void lv_style_set_text_line_space(lv_style_t * style, lv_coord_t value)
{
 8022f3c:	b508      	push	{r3, lr}
 8022f3e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 8022f40:	2159      	movs	r1, #89	; 0x59
 8022f42:	f7ff fec1 	bl	8022cc8 <lv_style_set_prop>
}
 8022f46:	bd08      	pop	{r3, pc}

08022f48 <lv_style_set_text_align>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_DECOR, v);
}

void lv_style_set_text_align(lv_style_t * style, lv_text_align_t value)
{
 8022f48:	b508      	push	{r3, lr}
 8022f4a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 8022f4c:	215b      	movs	r1, #91	; 0x5b
 8022f4e:	f7ff febb 	bl	8022cc8 <lv_style_set_prop>
}
 8022f52:	bd08      	pop	{r3, pc}

08022f54 <lv_style_set_radius>:

void lv_style_set_radius(lv_style_t * style, lv_coord_t value)
{
 8022f54:	b508      	push	{r3, lr}
 8022f56:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 8022f58:	210b      	movs	r1, #11
 8022f5a:	f7ff feb5 	bl	8022cc8 <lv_style_set_prop>
}
 8022f5e:	bd08      	pop	{r3, pc}

08022f60 <lv_style_set_clip_corner>:

void lv_style_set_clip_corner(lv_style_t * style, bool value)
{
 8022f60:	b508      	push	{r3, lr}
 8022f62:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 8022f64:	2117      	movs	r1, #23
 8022f66:	f7ff feaf 	bl	8022cc8 <lv_style_set_prop>
}
 8022f6a:	bd08      	pop	{r3, pc}

08022f6c <lv_style_set_color_filter_dsc>:
    };
    lv_style_set_prop(style, LV_STYLE_OPA, v);
}

void lv_style_set_color_filter_dsc(lv_style_t * style, const lv_color_filter_dsc_t * value)
{
 8022f6c:	b508      	push	{r3, lr}
 8022f6e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8022f70:	2161      	movs	r1, #97	; 0x61
 8022f72:	f7ff fea9 	bl	8022cc8 <lv_style_set_prop>
}
 8022f76:	bd08      	pop	{r3, pc}

08022f78 <lv_style_set_color_filter_opa>:

void lv_style_set_color_filter_opa(lv_style_t * style, lv_opa_t value)
{
 8022f78:	b508      	push	{r3, lr}
 8022f7a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8022f7c:	2162      	movs	r1, #98	; 0x62
 8022f7e:	f7ff fea3 	bl	8022cc8 <lv_style_set_prop>
}
 8022f82:	bd08      	pop	{r3, pc}

08022f84 <lv_style_set_anim_time>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM, v);
}

void lv_style_set_anim_time(lv_style_t * style, uint32_t value)
{
 8022f84:	b508      	push	{r3, lr}
 8022f86:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 8022f88:	2164      	movs	r1, #100	; 0x64
 8022f8a:	f7ff fe9d 	bl	8022cc8 <lv_style_set_prop>
}
 8022f8e:	bd08      	pop	{r3, pc}

08022f90 <lv_style_set_transition>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_SPEED, v);
}

void lv_style_set_transition(lv_style_t * style, const lv_style_transition_dsc_t * value)
{
 8022f90:	b508      	push	{r3, lr}
 8022f92:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 8022f94:	2166      	movs	r1, #102	; 0x66
 8022f96:	f7ff fe97 	bl	8022cc8 <lv_style_set_prop>
}
 8022f9a:	bd08      	pop	{r3, pc}

08022f9c <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8022f9c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8022f9e:	2118      	movs	r1, #24
 8022fa0:	4803      	ldr	r0, [pc, #12]	; (8022fb0 <_lv_timer_core_init+0x14>)
 8022fa2:	f7fe faa2 	bl	80214ea <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 8022fa6:	4b03      	ldr	r3, [pc, #12]	; (8022fb4 <_lv_timer_core_init+0x18>)
 8022fa8:	2201      	movs	r2, #1
 8022faa:	701a      	strb	r2, [r3, #0]
}
 8022fac:	bd08      	pop	{r3, pc}
 8022fae:	bf00      	nop
 8022fb0:	200028e4 	.word	0x200028e4
 8022fb4:	2000c190 	.word	0x2000c190

08022fb8 <lv_timer_create>:
{
 8022fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fba:	4606      	mov	r6, r0
 8022fbc:	460f      	mov	r7, r1
 8022fbe:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8022fc0:	480b      	ldr	r0, [pc, #44]	; (8022ff0 <lv_timer_create+0x38>)
 8022fc2:	f7fe fa9a 	bl	80214fa <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 8022fc6:	b190      	cbz	r0, 8022fee <lv_timer_create+0x36>
 8022fc8:	4604      	mov	r4, r0
    new_timer->period = period;
 8022fca:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 8022fcc:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 8022fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022fd2:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8022fd4:	7d03      	ldrb	r3, [r0, #20]
 8022fd6:	f36f 0300 	bfc	r3, #0, #1
 8022fda:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 8022fdc:	f7fd faa5 	bl	802052a <lv_tick_get>
 8022fe0:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8022fe2:	60e5      	str	r5, [r4, #12]
    timer_created = true;
 8022fe4:	4b03      	ldr	r3, [pc, #12]	; (8022ff4 <lv_timer_create+0x3c>)
 8022fe6:	2201      	movs	r2, #1
 8022fe8:	701a      	strb	r2, [r3, #0]
}
 8022fea:	4620      	mov	r0, r4
 8022fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
 8022fee:	e7fe      	b.n	8022fee <lv_timer_create+0x36>
 8022ff0:	200028e4 	.word	0x200028e4
 8022ff4:	2000c198 	.word	0x2000c198

08022ff8 <lv_timer_del>:
{
 8022ff8:	b510      	push	{r4, lr}
 8022ffa:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 8022ffc:	4601      	mov	r1, r0
 8022ffe:	4805      	ldr	r0, [pc, #20]	; (8023014 <lv_timer_del+0x1c>)
 8023000:	f7fe fab9 	bl	8021576 <_lv_ll_remove>
    timer_deleted = true;
 8023004:	4b04      	ldr	r3, [pc, #16]	; (8023018 <lv_timer_del+0x20>)
 8023006:	2201      	movs	r2, #1
 8023008:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 802300a:	4620      	mov	r0, r4
 802300c:	f7fe fc4a 	bl	80218a4 <lv_mem_free>
}
 8023010:	bd10      	pop	{r4, pc}
 8023012:	bf00      	nop
 8023014:	200028e4 	.word	0x200028e4
 8023018:	2000c199 	.word	0x2000c199

0802301c <lv_timer_handler>:
{
 802301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023020:	b083      	sub	sp, #12
    if(already_running) {
 8023022:	4b66      	ldr	r3, [pc, #408]	; (80231bc <lv_timer_handler+0x1a0>)
 8023024:	781b      	ldrb	r3, [r3, #0]
 8023026:	2b00      	cmp	r3, #0
 8023028:	d16d      	bne.n	8023106 <lv_timer_handler+0xea>
    already_running = true;
 802302a:	4b64      	ldr	r3, [pc, #400]	; (80231bc <lv_timer_handler+0x1a0>)
 802302c:	2201      	movs	r2, #1
 802302e:	701a      	strb	r2, [r3, #0]
    if(lv_timer_run == false) {
 8023030:	4b63      	ldr	r3, [pc, #396]	; (80231c0 <lv_timer_handler+0x1a4>)
 8023032:	781b      	ldrb	r3, [r3, #0]
 8023034:	9300      	str	r3, [sp, #0]
 8023036:	b923      	cbnz	r3, 8023042 <lv_timer_handler+0x26>
        already_running = false; /*Release mutex*/
 8023038:	4b60      	ldr	r3, [pc, #384]	; (80231bc <lv_timer_handler+0x1a0>)
 802303a:	2200      	movs	r2, #0
 802303c:	701a      	strb	r2, [r3, #0]
        return 1;
 802303e:	2501      	movs	r5, #1
 8023040:	e062      	b.n	8023108 <lv_timer_handler+0xec>
    uint32_t handler_start = lv_tick_get();
 8023042:	f7fd fa72 	bl	802052a <lv_tick_get>
    if(handler_start == 0) {
 8023046:	9001      	str	r0, [sp, #4]
 8023048:	b930      	cbnz	r0, 8023058 <lv_timer_handler+0x3c>
        run_cnt++;
 802304a:	4b5e      	ldr	r3, [pc, #376]	; (80231c4 <lv_timer_handler+0x1a8>)
 802304c:	681b      	ldr	r3, [r3, #0]
 802304e:	3301      	adds	r3, #1
        if(run_cnt > 100) {
 8023050:	2b64      	cmp	r3, #100	; 0x64
 8023052:	d80a      	bhi.n	802306a <lv_timer_handler+0x4e>
        run_cnt++;
 8023054:	4a5b      	ldr	r2, [pc, #364]	; (80231c4 <lv_timer_handler+0x1a8>)
 8023056:	6013      	str	r3, [r2, #0]
        timer_deleted             = false;
 8023058:	4f5b      	ldr	r7, [pc, #364]	; (80231c8 <lv_timer_handler+0x1ac>)
 802305a:	f04f 0b00 	mov.w	fp, #0
        timer_created             = false;
 802305e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80231cc <lv_timer_handler+0x1b0>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8023062:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80231d0 <lv_timer_handler+0x1b4>
 8023066:	4e5b      	ldr	r6, [pc, #364]	; (80231d4 <lv_timer_handler+0x1b8>)
 8023068:	e065      	b.n	8023136 <lv_timer_handler+0x11a>
            run_cnt = 0;
 802306a:	4b56      	ldr	r3, [pc, #344]	; (80231c4 <lv_timer_handler+0x1a8>)
 802306c:	2200      	movs	r2, #0
 802306e:	601a      	str	r2, [r3, #0]
 8023070:	e7f2      	b.n	8023058 <lv_timer_handler+0x3c>
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
        if(timer->repeat_count > 0) timer->repeat_count--;
        timer->last_run = lv_tick_get();
 8023072:	f7fd fa5a 	bl	802052a <lv_tick_get>
 8023076:	6068      	str	r0, [r5, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8023078:	68ab      	ldr	r3, [r5, #8]
 802307a:	2b00      	cmp	r3, #0
 802307c:	d057      	beq.n	802312e <lv_timer_handler+0x112>
 802307e:	f1b9 0f00 	cmp.w	r9, #0
 8023082:	d054      	beq.n	802312e <lv_timer_handler+0x112>
 8023084:	e051      	b.n	802312a <lv_timer_handler+0x10e>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8023086:	4621      	mov	r1, r4
 8023088:	4630      	mov	r0, r6
 802308a:	f7fe fabf 	bl	802160c <_lv_ll_get_next>
    while(next) {
 802308e:	4604      	mov	r4, r0
 8023090:	b188      	cbz	r0, 80230b6 <lv_timer_handler+0x9a>
        if(!next->paused) {
 8023092:	7d23      	ldrb	r3, [r4, #20]
 8023094:	f013 0f01 	tst.w	r3, #1
 8023098:	d1f5      	bne.n	8023086 <lv_timer_handler+0x6a>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 802309a:	6860      	ldr	r0, [r4, #4]
 802309c:	f7fd fa49 	bl	8020532 <lv_tick_elaps>
    if(elp >= timer->period)
 80230a0:	6823      	ldr	r3, [r4, #0]
 80230a2:	4298      	cmp	r0, r3
        return 0;
    return timer->period - elp;
 80230a4:	bf34      	ite	cc
 80230a6:	1a1b      	subcc	r3, r3, r0
        return 0;
 80230a8:	463b      	movcs	r3, r7
            if(delay < time_till_next)
 80230aa:	429d      	cmp	r5, r3
 80230ac:	bf28      	it	cs
 80230ae:	461d      	movcs	r5, r3
 80230b0:	e7e9      	b.n	8023086 <lv_timer_handler+0x6a>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 80230b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    busy_time += lv_tick_elaps(handler_start);
 80230b6:	9801      	ldr	r0, [sp, #4]
 80230b8:	f7fd fa3b 	bl	8020532 <lv_tick_elaps>
 80230bc:	4a46      	ldr	r2, [pc, #280]	; (80231d8 <lv_timer_handler+0x1bc>)
 80230be:	6813      	ldr	r3, [r2, #0]
 80230c0:	4403      	add	r3, r0
 80230c2:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 80230c4:	4b45      	ldr	r3, [pc, #276]	; (80231dc <lv_timer_handler+0x1c0>)
 80230c6:	6818      	ldr	r0, [r3, #0]
 80230c8:	f7fd fa33 	bl	8020532 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 80230cc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80230d0:	d315      	bcc.n	80230fe <lv_timer_handler+0xe2>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 80230d2:	4b41      	ldr	r3, [pc, #260]	; (80231d8 <lv_timer_handler+0x1bc>)
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	2264      	movs	r2, #100	; 0x64
 80230d8:	fb02 f303 	mul.w	r3, r2, r3
 80230dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80230e0:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 80230e2:	4293      	cmp	r3, r2
 80230e4:	bf9a      	itte	ls
 80230e6:	1ad3      	subls	r3, r2, r3
 80230e8:	b2db      	uxtbls	r3, r3
 80230ea:	2300      	movhi	r3, #0
 80230ec:	4a3c      	ldr	r2, [pc, #240]	; (80231e0 <lv_timer_handler+0x1c4>)
 80230ee:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 80230f0:	4b39      	ldr	r3, [pc, #228]	; (80231d8 <lv_timer_handler+0x1bc>)
 80230f2:	2200      	movs	r2, #0
 80230f4:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 80230f6:	f7fd fa18 	bl	802052a <lv_tick_get>
 80230fa:	4b38      	ldr	r3, [pc, #224]	; (80231dc <lv_timer_handler+0x1c0>)
 80230fc:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
 80230fe:	4b2f      	ldr	r3, [pc, #188]	; (80231bc <lv_timer_handler+0x1a0>)
 8023100:	2200      	movs	r2, #0
 8023102:	701a      	strb	r2, [r3, #0]
    return time_till_next;
 8023104:	e000      	b.n	8023108 <lv_timer_handler+0xec>
        return 1;
 8023106:	2501      	movs	r5, #1
}
 8023108:	4628      	mov	r0, r5
 802310a:	b003      	add	sp, #12
 802310c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int32_t original_repeat_count = timer->repeat_count;
 8023110:	f8d5 9010 	ldr.w	r9, [r5, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8023114:	f1b9 0f00 	cmp.w	r9, #0
 8023118:	ddab      	ble.n	8023072 <lv_timer_handler+0x56>
 802311a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 802311e:	612b      	str	r3, [r5, #16]
        timer->last_run = lv_tick_get();
 8023120:	f7fd fa03 	bl	802052a <lv_tick_get>
 8023124:	6068      	str	r0, [r5, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8023126:	68ab      	ldr	r3, [r5, #8]
 8023128:	b10b      	cbz	r3, 802312e <lv_timer_handler+0x112>
 802312a:	4628      	mov	r0, r5
 802312c:	4798      	blx	r3
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 802312e:	783b      	ldrb	r3, [r7, #0]
 8023130:	b1b3      	cbz	r3, 8023160 <lv_timer_handler+0x144>
    } while(LV_GC_ROOT(_lv_timer_act));
 8023132:	6833      	ldr	r3, [r6, #0]
 8023134:	b14b      	cbz	r3, 802314a <lv_timer_handler+0x12e>
        timer_deleted             = false;
 8023136:	f887 b000 	strb.w	fp, [r7]
        timer_created             = false;
 802313a:	f88a b000 	strb.w	fp, [sl]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 802313e:	4640      	mov	r0, r8
 8023140:	f7fe fa5c 	bl	80215fc <_lv_ll_get_head>
 8023144:	4604      	mov	r4, r0
 8023146:	6030      	str	r0, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8023148:	b9f0      	cbnz	r0, 8023188 <lv_timer_handler+0x16c>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 802314a:	4821      	ldr	r0, [pc, #132]	; (80231d0 <lv_timer_handler+0x1b4>)
 802314c:	f7fe fa56 	bl	80215fc <_lv_ll_get_head>
    while(next) {
 8023150:	4604      	mov	r4, r0
 8023152:	2800      	cmp	r0, #0
 8023154:	d0ad      	beq.n	80230b2 <lv_timer_handler+0x96>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8023156:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        return 0;
 802315a:	2700      	movs	r7, #0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 802315c:	4e1c      	ldr	r6, [pc, #112]	; (80231d0 <lv_timer_handler+0x1b4>)
 802315e:	e798      	b.n	8023092 <lv_timer_handler+0x76>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8023160:	692b      	ldr	r3, [r5, #16]
 8023162:	b93b      	cbnz	r3, 8023174 <lv_timer_handler+0x158>
 8023164:	f8dd 9000 	ldr.w	r9, [sp]
            lv_timer_del(timer);
 8023168:	4628      	mov	r0, r5
 802316a:	f7ff ff45 	bl	8022ff8 <lv_timer_del>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 802316e:	f1b9 0f00 	cmp.w	r9, #0
 8023172:	d006      	beq.n	8023182 <lv_timer_handler+0x166>
                if(timer_created || timer_deleted) {
 8023174:	f89a 3000 	ldrb.w	r3, [sl]
 8023178:	2b00      	cmp	r3, #0
 802317a:	d1da      	bne.n	8023132 <lv_timer_handler+0x116>
 802317c:	783b      	ldrb	r3, [r7, #0]
 802317e:	2b00      	cmp	r3, #0
 8023180:	d1d7      	bne.n	8023132 <lv_timer_handler+0x116>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 8023182:	6034      	str	r4, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8023184:	2c00      	cmp	r4, #0
 8023186:	d0e0      	beq.n	802314a <lv_timer_handler+0x12e>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8023188:	4621      	mov	r1, r4
 802318a:	4640      	mov	r0, r8
 802318c:	f7fe fa3e 	bl	802160c <_lv_ll_get_next>
 8023190:	4604      	mov	r4, r0
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8023192:	6835      	ldr	r5, [r6, #0]
    if(timer->paused) return false;
 8023194:	7d2b      	ldrb	r3, [r5, #20]
 8023196:	f013 0f01 	tst.w	r3, #1
 802319a:	d1f2      	bne.n	8023182 <lv_timer_handler+0x166>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 802319c:	6868      	ldr	r0, [r5, #4]
 802319e:	f7fd f9c8 	bl	8020532 <lv_tick_elaps>
    if(elp >= timer->period)
 80231a2:	682b      	ldr	r3, [r5, #0]
 80231a4:	4298      	cmp	r0, r3
 80231a6:	d2b3      	bcs.n	8023110 <lv_timer_handler+0xf4>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 80231a8:	f897 9000 	ldrb.w	r9, [r7]
 80231ac:	f1b9 0f00 	cmp.w	r9, #0
 80231b0:	d1e7      	bne.n	8023182 <lv_timer_handler+0x166>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 80231b2:	692b      	ldr	r3, [r5, #16]
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d0d7      	beq.n	8023168 <lv_timer_handler+0x14c>
 80231b8:	e7e3      	b.n	8023182 <lv_timer_handler+0x166>
 80231ba:	bf00      	nop
 80231bc:	2000c180 	.word	0x2000c180
 80231c0:	2000c190 	.word	0x2000c190
 80231c4:	2000c194 	.word	0x2000c194
 80231c8:	2000c199 	.word	0x2000c199
 80231cc:	2000c198 	.word	0x2000c198
 80231d0:	200028e4 	.word	0x200028e4
 80231d4:	200028e0 	.word	0x200028e0
 80231d8:	2000c184 	.word	0x2000c184
 80231dc:	2000c18c 	.word	0x2000c18c
 80231e0:	2000c188 	.word	0x2000c188

080231e4 <lv_timer_pause>:
    timer->paused = true;
 80231e4:	7d03      	ldrb	r3, [r0, #20]
 80231e6:	f043 0301 	orr.w	r3, r3, #1
 80231ea:	7503      	strb	r3, [r0, #20]
}
 80231ec:	4770      	bx	lr

080231ee <lv_timer_resume>:
    timer->paused = false;
 80231ee:	7d03      	ldrb	r3, [r0, #20]
 80231f0:	f36f 0300 	bfc	r3, #0, #1
 80231f4:	7503      	strb	r3, [r0, #20]
}
 80231f6:	4770      	bx	lr

080231f8 <lv_timer_ready>:
{
 80231f8:	b510      	push	{r4, lr}
 80231fa:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 80231fc:	f7fd f995 	bl	802052a <lv_tick_get>
 8023200:	6823      	ldr	r3, [r4, #0]
 8023202:	43db      	mvns	r3, r3
 8023204:	4403      	add	r3, r0
 8023206:	6063      	str	r3, [r4, #4]
}
 8023208:	bd10      	pop	{r4, pc}
	...

0802320c <lv_timer_get_idle>:
}
 802320c:	4b01      	ldr	r3, [pc, #4]	; (8023214 <lv_timer_get_idle+0x8>)
 802320e:	7818      	ldrb	r0, [r3, #0]
 8023210:	4770      	bx	lr
 8023212:	bf00      	nop
 8023214:	2000c188 	.word	0x2000c188

08023218 <adjust_request_size>:
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
    size_t adjust = 0;
    if(size) {
 8023218:	4603      	mov	r3, r0
 802321a:	b908      	cbnz	r0, 8023220 <adjust_request_size+0x8>
        if(aligned < block_size_max) {
            adjust = tlsf_max(aligned, block_size_min);
        }
    }
    return adjust;
}
 802321c:	4618      	mov	r0, r3
 802321e:	4770      	bx	lr
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8023220:	1e4a      	subs	r2, r1, #1
 8023222:	ea11 0002 	ands.w	r0, r1, r2
 8023226:	d000      	beq.n	802322a <adjust_request_size+0x12>
 8023228:	e7fe      	b.n	8023228 <adjust_request_size+0x10>
    return (x + (align - 1)) & ~(align - 1);
 802322a:	4413      	add	r3, r2
 802322c:	4249      	negs	r1, r1
 802322e:	400b      	ands	r3, r1
        if(aligned < block_size_max) {
 8023230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023234:	d203      	bcs.n	802323e <adjust_request_size+0x26>
            adjust = tlsf_max(aligned, block_size_min);
 8023236:	2b0c      	cmp	r3, #12
 8023238:	bf38      	it	cc
 802323a:	230c      	movcc	r3, #12
 802323c:	e7ee      	b.n	802321c <adjust_request_size+0x4>
    size_t adjust = 0;
 802323e:	4603      	mov	r3, r0
 8023240:	e7ec      	b.n	802321c <adjust_request_size+0x4>

08023242 <remove_free_block>:
    return control->blocks[fl][sl];
}

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8023242:	b510      	push	{r4, lr}
 8023244:	4696      	mov	lr, r2
    block_header_t * prev = block->prev_free;
 8023246:	68ca      	ldr	r2, [r1, #12]
    block_header_t * next = block->next_free;
    tlsf_assert(prev && "prev_free field can not be null");
 8023248:	b16a      	cbz	r2, 8023266 <remove_free_block+0x24>
 802324a:	4604      	mov	r4, r0
    block_header_t * next = block->next_free;
 802324c:	6888      	ldr	r0, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 802324e:	b158      	cbz	r0, 8023268 <remove_free_block+0x26>
    next->prev_free = prev;
 8023250:	60c2      	str	r2, [r0, #12]
    prev->next_free = next;
 8023252:	6090      	str	r0, [r2, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 8023254:	eb03 1c4e 	add.w	ip, r3, lr, lsl #5
 8023258:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 802325c:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 8023260:	428a      	cmp	r2, r1
 8023262:	d002      	beq.n	802326a <remove_free_block+0x28>
            if(!control->sl_bitmap[fl]) {
                control->fl_bitmap &= ~(1U << fl);
            }
        }
    }
}
 8023264:	bd10      	pop	{r4, pc}
    tlsf_assert(prev && "prev_free field can not be null");
 8023266:	e7fe      	b.n	8023266 <remove_free_block+0x24>
    tlsf_assert(next && "next_free field can not be null");
 8023268:	e7fe      	b.n	8023268 <remove_free_block+0x26>
        control->blocks[fl][sl] = next;
 802326a:	f8cc 003c 	str.w	r0, [ip, #60]	; 0x3c
        if(next == &control->block_null) {
 802326e:	4284      	cmp	r4, r0
 8023270:	d1f8      	bne.n	8023264 <remove_free_block+0x22>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8023272:	eb04 018e 	add.w	r1, r4, lr, lsl #2
 8023276:	2201      	movs	r2, #1
 8023278:	409a      	lsls	r2, r3
 802327a:	694b      	ldr	r3, [r1, #20]
 802327c:	ea23 0302 	bic.w	r3, r3, r2
 8023280:	614b      	str	r3, [r1, #20]
            if(!control->sl_bitmap[fl]) {
 8023282:	2b00      	cmp	r3, #0
 8023284:	d1ee      	bne.n	8023264 <remove_free_block+0x22>
                control->fl_bitmap &= ~(1U << fl);
 8023286:	2301      	movs	r3, #1
 8023288:	fa03 f20e 	lsl.w	r2, r3, lr
 802328c:	6923      	ldr	r3, [r4, #16]
 802328e:	ea23 0302 	bic.w	r3, r3, r2
 8023292:	6123      	str	r3, [r4, #16]
}
 8023294:	e7e6      	b.n	8023264 <remove_free_block+0x22>

08023296 <mapping_insert>:
    if(size < SMALL_BLOCK_SIZE) {
 8023296:	287f      	cmp	r0, #127	; 0x7f
 8023298:	d808      	bhi.n	80232ac <mapping_insert+0x16>
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 802329a:	4603      	mov	r3, r0
 802329c:	2800      	cmp	r0, #0
 802329e:	bfb8      	it	lt
 80232a0:	1cc3      	addlt	r3, r0, #3
 80232a2:	1098      	asrs	r0, r3, #2
        fl = 0;
 80232a4:	2300      	movs	r3, #0
    *fli = fl;
 80232a6:	600b      	str	r3, [r1, #0]
    *sli = sl;
 80232a8:	6010      	str	r0, [r2, #0]
}
 80232aa:	4770      	bx	lr
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 80232ac:	fab0 f380 	clz	r3, r0
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 80232b0:	f1c3 0c1a 	rsb	ip, r3, #26
 80232b4:	fa20 f00c 	lsr.w	r0, r0, ip
 80232b8:	f080 0020 	eor.w	r0, r0, #32
        fl -= (FL_INDEX_SHIFT - 1);
 80232bc:	f1c3 0319 	rsb	r3, r3, #25
 80232c0:	e7f1      	b.n	80232a6 <mapping_insert+0x10>

080232c2 <block_remove>:
    control->sl_bitmap[fl] |= (1U << sl);
}

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 80232c2:	b530      	push	{r4, r5, lr}
 80232c4:	b083      	sub	sp, #12
 80232c6:	4605      	mov	r5, r0
 80232c8:	460c      	mov	r4, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80232ca:	6848      	ldr	r0, [r1, #4]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 80232cc:	466a      	mov	r2, sp
 80232ce:	a901      	add	r1, sp, #4
 80232d0:	f020 0003 	bic.w	r0, r0, #3
 80232d4:	f7ff ffdf 	bl	8023296 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 80232d8:	9b00      	ldr	r3, [sp, #0]
 80232da:	9a01      	ldr	r2, [sp, #4]
 80232dc:	4621      	mov	r1, r4
 80232de:	4628      	mov	r0, r5
 80232e0:	f7ff ffaf 	bl	8023242 <remove_free_block>
}
 80232e4:	b003      	add	sp, #12
 80232e6:	bd30      	pop	{r4, r5, pc}

080232e8 <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 80232e8:	b530      	push	{r4, r5, lr}
 80232ea:	b083      	sub	sp, #12
 80232ec:	4605      	mov	r5, r0
 80232ee:	460c      	mov	r4, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80232f0:	6848      	ldr	r0, [r1, #4]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 80232f2:	466a      	mov	r2, sp
 80232f4:	a901      	add	r1, sp, #4
 80232f6:	f020 0003 	bic.w	r0, r0, #3
 80232fa:	f7ff ffcc 	bl	8023296 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 80232fe:	9901      	ldr	r1, [sp, #4]
 8023300:	9800      	ldr	r0, [sp, #0]
    block_header_t * current = control->blocks[fl][sl];
 8023302:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8023306:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802330a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    tlsf_assert(current && "free list cannot have a null entry");
 802330c:	b15a      	cbz	r2, 8023326 <block_insert+0x3e>
    block->next_free = current;
 802330e:	60a2      	str	r2, [r4, #8]
    block->prev_free = &control->block_null;
 8023310:	60e5      	str	r5, [r4, #12]
    current->prev_free = block;
 8023312:	60d4      	str	r4, [r2, #12]
    return tlsf_cast(void *,
 8023314:	f104 0c08 	add.w	ip, r4, #8
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8023318:	f104 020b 	add.w	r2, r4, #11
 802331c:	f022 0203 	bic.w	r2, r2, #3
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8023320:	4594      	cmp	ip, r2
 8023322:	d001      	beq.n	8023328 <block_insert+0x40>
 8023324:	e7fe      	b.n	8023324 <block_insert+0x3c>
    tlsf_assert(current && "free list cannot have a null entry");
 8023326:	e7fe      	b.n	8023326 <block_insert+0x3e>
    control->blocks[fl][sl] = block;
 8023328:	63dc      	str	r4, [r3, #60]	; 0x3c
    control->fl_bitmap |= (1U << fl);
 802332a:	2301      	movs	r3, #1
 802332c:	fa03 f401 	lsl.w	r4, r3, r1
 8023330:	692a      	ldr	r2, [r5, #16]
 8023332:	4322      	orrs	r2, r4
 8023334:	612a      	str	r2, [r5, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8023336:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 802333a:	4083      	lsls	r3, r0
 802333c:	696a      	ldr	r2, [r5, #20]
 802333e:	4313      	orrs	r3, r2
 8023340:	616b      	str	r3, [r5, #20]
}
 8023342:	b003      	add	sp, #12
 8023344:	bd30      	pop	{r4, r5, pc}

08023346 <block_next>:
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023346:	6843      	ldr	r3, [r0, #4]
    tlsf_assert(!block_is_last(block));
 8023348:	f033 0303 	bics.w	r3, r3, #3
 802334c:	d100      	bne.n	8023350 <block_next+0xa>
 802334e:	e7fe      	b.n	802334e <block_next+0x8>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023350:	4418      	add	r0, r3
}
 8023352:	3004      	adds	r0, #4
 8023354:	4770      	bx	lr

08023356 <block_link_next>:
{
 8023356:	b510      	push	{r4, lr}
 8023358:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 802335a:	f7ff fff4 	bl	8023346 <block_next>
    next->prev_phys_block = block;
 802335e:	6004      	str	r4, [r0, #0]
}
 8023360:	bd10      	pop	{r4, pc}

08023362 <block_split>:
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8023362:	b510      	push	{r4, lr}
    return tlsf_cast(void *,
 8023364:	1843      	adds	r3, r0, r1
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023366:	1d1c      	adds	r4, r3, #4
    return tlsf_cast(void *,
 8023368:	f103 020c 	add.w	r2, r3, #12
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 802336c:	330f      	adds	r3, #15
 802336e:	f023 0303 	bic.w	r3, r3, #3
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8023372:	429a      	cmp	r2, r3
 8023374:	d000      	beq.n	8023378 <block_split+0x16>
 8023376:	e7fe      	b.n	8023376 <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023378:	6843      	ldr	r3, [r0, #4]
 802337a:	f023 0303 	bic.w	r3, r3, #3
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 802337e:	1a5a      	subs	r2, r3, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8023380:	f1a2 0c04 	sub.w	ip, r2, #4
 8023384:	440a      	add	r2, r1
 8023386:	429a      	cmp	r2, r3
 8023388:	d000      	beq.n	802338c <block_split+0x2a>
 802338a:	e7fe      	b.n	802338a <block_split+0x28>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 802338c:	6863      	ldr	r3, [r4, #4]
 802338e:	f003 0303 	and.w	r3, r3, #3
 8023392:	ea43 030c 	orr.w	r3, r3, ip
 8023396:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023398:	f023 0303 	bic.w	r3, r3, #3
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 802339c:	2b0b      	cmp	r3, #11
 802339e:	d800      	bhi.n	80233a2 <block_split+0x40>
 80233a0:	e7fe      	b.n	80233a0 <block_split+0x3e>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 80233a2:	6843      	ldr	r3, [r0, #4]
 80233a4:	f003 0303 	and.w	r3, r3, #3
 80233a8:	4319      	orrs	r1, r3
 80233aa:	6041      	str	r1, [r0, #4]
    block_header_t * next = block_link_next(block);
 80233ac:	4620      	mov	r0, r4
 80233ae:	f7ff ffd2 	bl	8023356 <block_link_next>
    block->size |= block_header_prev_free_bit;
 80233b2:	6842      	ldr	r2, [r0, #4]
 80233b4:	f042 0202 	orr.w	r2, r2, #2
 80233b8:	6042      	str	r2, [r0, #4]
    block->size |= block_header_free_bit;
 80233ba:	6863      	ldr	r3, [r4, #4]
 80233bc:	f043 0301 	orr.w	r3, r3, #1
 80233c0:	6063      	str	r3, [r4, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 80233c2:	4620      	mov	r0, r4
 80233c4:	bd10      	pop	{r4, pc}

080233c6 <block_trim_free>:
    return tlsf_cast(int, block->size & block_header_free_bit);
 80233c6:	684b      	ldr	r3, [r1, #4]
}

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
    tlsf_assert(block_is_free(block) && "block must be free");
 80233c8:	f013 0f01 	tst.w	r3, #1
 80233cc:	d100      	bne.n	80233d0 <block_trim_free+0xa>
 80233ce:	e7fe      	b.n	80233ce <block_trim_free+0x8>
{
 80233d0:	b570      	push	{r4, r5, r6, lr}
 80233d2:	4605      	mov	r5, r0
 80233d4:	460c      	mov	r4, r1
    return block_size(block) >= sizeof(block_header_t) + size;
 80233d6:	f102 0110 	add.w	r1, r2, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80233da:	f023 0303 	bic.w	r3, r3, #3
    if(block_can_split(block, size)) {
 80233de:	4299      	cmp	r1, r3
 80233e0:	d900      	bls.n	80233e4 <block_trim_free+0x1e>
        block_header_t * remaining_block = block_split(block, size);
        block_link_next(block);
        block_set_prev_free(remaining_block);
        block_insert(control, remaining_block);
    }
}
 80233e2:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 80233e4:	4611      	mov	r1, r2
 80233e6:	4620      	mov	r0, r4
 80233e8:	f7ff ffbb 	bl	8023362 <block_split>
 80233ec:	4606      	mov	r6, r0
        block_link_next(block);
 80233ee:	4620      	mov	r0, r4
 80233f0:	f7ff ffb1 	bl	8023356 <block_link_next>
    block->size |= block_header_prev_free_bit;
 80233f4:	6873      	ldr	r3, [r6, #4]
 80233f6:	f043 0302 	orr.w	r3, r3, #2
 80233fa:	6073      	str	r3, [r6, #4]
        block_insert(control, remaining_block);
 80233fc:	4631      	mov	r1, r6
 80233fe:	4628      	mov	r0, r5
 8023400:	f7ff ff72 	bl	80232e8 <block_insert>
}
 8023404:	e7ed      	b.n	80233e2 <block_trim_free+0x1c>

08023406 <block_mark_as_used>:
{
 8023406:	b510      	push	{r4, lr}
 8023408:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 802340a:	f7ff ff9c 	bl	8023346 <block_next>
    block->size &= ~block_header_prev_free_bit;
 802340e:	6843      	ldr	r3, [r0, #4]
 8023410:	f023 0302 	bic.w	r3, r3, #2
 8023414:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 8023416:	6863      	ldr	r3, [r4, #4]
 8023418:	f023 0301 	bic.w	r3, r3, #1
 802341c:	6063      	str	r3, [r4, #4]
}
 802341e:	bd10      	pop	{r4, pc}

08023420 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 8023420:	b570      	push	{r4, r5, r6, lr}
 8023422:	b082      	sub	sp, #8
    int fl = 0, sl = 0;
 8023424:	2300      	movs	r3, #0
 8023426:	9301      	str	r3, [sp, #4]
 8023428:	9300      	str	r3, [sp, #0]
    block_header_t * block = 0;

    if(size) {
 802342a:	2900      	cmp	r1, #0
 802342c:	d050      	beq.n	80234d0 <block_locate_free+0xb0>
 802342e:	4604      	mov	r4, r0
 8023430:	460d      	mov	r5, r1
    if(size >= SMALL_BLOCK_SIZE) {
 8023432:	297f      	cmp	r1, #127	; 0x7f
 8023434:	d92e      	bls.n	8023494 <block_locate_free+0x74>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8023436:	fab1 f081 	clz	r0, r1
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 802343a:	f1c0 031a 	rsb	r3, r0, #26
 802343e:	2001      	movs	r0, #1
 8023440:	4098      	lsls	r0, r3
 8023442:	3801      	subs	r0, #1
        size += round;
 8023444:	4408      	add	r0, r1
    mapping_insert(size, fli, sli);
 8023446:	466a      	mov	r2, sp
 8023448:	a901      	add	r1, sp, #4
 802344a:	f7ff ff24 	bl	8023296 <mapping_insert>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 802344e:	9a01      	ldr	r2, [sp, #4]
 8023450:	2a09      	cmp	r2, #9
 8023452:	dc41      	bgt.n	80234d8 <block_locate_free+0xb8>
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8023454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023458:	9900      	ldr	r1, [sp, #0]
 802345a:	408b      	lsls	r3, r1
 802345c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8023460:	6949      	ldr	r1, [r1, #20]
    if(!sl_map) {
 8023462:	400b      	ands	r3, r1
 8023464:	d118      	bne.n	8023498 <block_locate_free+0x78>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8023466:	3201      	adds	r2, #1
 8023468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802346c:	fa03 f202 	lsl.w	r2, r3, r2
 8023470:	6923      	ldr	r3, [r4, #16]
        if(!fl_map) {
 8023472:	401a      	ands	r2, r3
 8023474:	d032      	beq.n	80234dc <block_locate_free+0xbc>
    return __builtin_ffs(word) - 1;
 8023476:	fa92 f3a2 	rbit	r3, r2
 802347a:	fab3 f383 	clz	r3, r3
 802347e:	2a00      	cmp	r2, #0
 8023480:	bf08      	it	eq
 8023482:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 8023486:	461a      	mov	r2, r3
        *fli = fl;
 8023488:	9301      	str	r3, [sp, #4]
        sl_map = control->sl_bitmap[fl];
 802348a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802348e:	695b      	ldr	r3, [r3, #20]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8023490:	b913      	cbnz	r3, 8023498 <block_locate_free+0x78>
 8023492:	e7fe      	b.n	8023492 <block_locate_free+0x72>
 8023494:	4608      	mov	r0, r1
 8023496:	e7d6      	b.n	8023446 <block_locate_free+0x26>
    return __builtin_ffs(word) - 1;
 8023498:	fa93 f1a3 	rbit	r1, r3
 802349c:	fab1 f181 	clz	r1, r1
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	bf08      	it	eq
 80234a4:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
 80234a8:	460b      	mov	r3, r1
    *sli = sl;
 80234aa:	9100      	str	r1, [sp, #0]
    return control->blocks[fl][sl];
 80234ac:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 80234b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80234b4:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
            block = search_suitable_block(control, &fl, &sl);
        }
    }

    if(block) {
 80234b6:	b166      	cbz	r6, 80234d2 <block_locate_free+0xb2>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80234b8:	6872      	ldr	r2, [r6, #4]
 80234ba:	f022 0203 	bic.w	r2, r2, #3
        tlsf_assert(block_size(block) >= size);
 80234be:	4295      	cmp	r5, r2
 80234c0:	d900      	bls.n	80234c4 <block_locate_free+0xa4>
 80234c2:	e7fe      	b.n	80234c2 <block_locate_free+0xa2>
        remove_free_block(control, block, fl, sl);
 80234c4:	9a01      	ldr	r2, [sp, #4]
 80234c6:	4631      	mov	r1, r6
 80234c8:	4620      	mov	r0, r4
 80234ca:	f7ff feba 	bl	8023242 <remove_free_block>
 80234ce:	e000      	b.n	80234d2 <block_locate_free+0xb2>
    block_header_t * block = 0;
 80234d0:	2600      	movs	r6, #0
    }

    return block;
}
 80234d2:	4630      	mov	r0, r6
 80234d4:	b002      	add	sp, #8
 80234d6:	bd70      	pop	{r4, r5, r6, pc}
    block_header_t * block = 0;
 80234d8:	2600      	movs	r6, #0
 80234da:	e7fa      	b.n	80234d2 <block_locate_free+0xb2>
            block = search_suitable_block(control, &fl, &sl);
 80234dc:	2600      	movs	r6, #0
    return block;
 80234de:	e7f8      	b.n	80234d2 <block_locate_free+0xb2>

080234e0 <block_merge_next>:
{
 80234e0:	b570      	push	{r4, r5, r6, lr}
 80234e2:	4605      	mov	r5, r0
 80234e4:	460c      	mov	r4, r1
    block_header_t * next = block_next(block);
 80234e6:	4608      	mov	r0, r1
 80234e8:	f7ff ff2d 	bl	8023346 <block_next>
    tlsf_assert(next && "next physical block can't be null");
 80234ec:	b148      	cbz	r0, 8023502 <block_merge_next+0x22>
 80234ee:	4606      	mov	r6, r0
    return tlsf_cast(int, block->size & block_header_free_bit);
 80234f0:	6843      	ldr	r3, [r0, #4]
    if(block_is_free(next)) {
 80234f2:	f013 0f01 	tst.w	r3, #1
 80234f6:	d017      	beq.n	8023528 <block_merge_next+0x48>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80234f8:	6863      	ldr	r3, [r4, #4]
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 80234fa:	f033 0303 	bics.w	r3, r3, #3
 80234fe:	d101      	bne.n	8023504 <block_merge_next+0x24>
 8023500:	e7fe      	b.n	8023500 <block_merge_next+0x20>
    tlsf_assert(next && "next physical block can't be null");
 8023502:	e7fe      	b.n	8023502 <block_merge_next+0x22>
        block_remove(control, next);
 8023504:	4601      	mov	r1, r0
 8023506:	4628      	mov	r0, r5
 8023508:	f7ff fedb 	bl	80232c2 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802350c:	6863      	ldr	r3, [r4, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 802350e:	f033 0203 	bics.w	r2, r3, #3
 8023512:	d100      	bne.n	8023516 <block_merge_next+0x36>
 8023514:	e7fe      	b.n	8023514 <block_merge_next+0x34>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023516:	6872      	ldr	r2, [r6, #4]
 8023518:	f022 0203 	bic.w	r2, r2, #3
    prev->size += block_size(block) + block_header_overhead;
 802351c:	3304      	adds	r3, #4
 802351e:	4413      	add	r3, r2
 8023520:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 8023522:	4620      	mov	r0, r4
 8023524:	f7ff ff17 	bl	8023356 <block_link_next>
}
 8023528:	4620      	mov	r0, r4
 802352a:	bd70      	pop	{r4, r5, r6, pc}

0802352c <lv_tlsf_add_pool>:
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 802352c:	f011 0f03 	tst.w	r1, #3
 8023530:	d11a      	bne.n	8023568 <lv_tlsf_add_pool+0x3c>
{
 8023532:	b538      	push	{r3, r4, r5, lr}
 8023534:	460c      	mov	r4, r1
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8023536:	3a08      	subs	r2, #8
    return x - (x & (align - 1));
 8023538:	f022 0303 	bic.w	r3, r2, #3
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 802353c:	f1a3 010c 	sub.w	r1, r3, #12
 8023540:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8023544:	4291      	cmp	r1, r2
 8023546:	d811      	bhi.n	802356c <lv_tlsf_add_pool+0x40>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023548:	4625      	mov	r5, r4
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 802354a:	f855 2904 	ldr.w	r2, [r5], #-4
    block->size &= ~block_header_prev_free_bit;
 802354e:	f043 0301 	orr.w	r3, r3, #1
 8023552:	606b      	str	r3, [r5, #4]
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
    block_set_size(block, pool_bytes);
    block_set_free(block);
    block_set_prev_used(block);
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8023554:	4629      	mov	r1, r5
 8023556:	f7ff fec7 	bl	80232e8 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 802355a:	4628      	mov	r0, r5
 802355c:	f7ff fefb 	bl	8023356 <block_link_next>
    block->size |= block_header_prev_free_bit;
 8023560:	2302      	movs	r3, #2
 8023562:	6043      	str	r3, [r0, #4]
    block_set_size(next, 0);
    block_set_used(next);
    block_set_prev_free(next);

    return mem;
 8023564:	4620      	mov	r0, r4
}
 8023566:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 8023568:	2000      	movs	r0, #0
}
 802356a:	4770      	bx	lr
        return 0;
 802356c:	2000      	movs	r0, #0
 802356e:	e7fa      	b.n	8023566 <lv_tlsf_add_pool+0x3a>

08023570 <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8023570:	f010 0f03 	tst.w	r0, #3
 8023574:	d118      	bne.n	80235a8 <lv_tlsf_create+0x38>
{
 8023576:	b510      	push	{r4, lr}
    control->block_null.next_free = &control->block_null;
 8023578:	4601      	mov	r1, r0
 802357a:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
 802357c:	60c0      	str	r0, [r0, #12]
    control->fl_bitmap = 0;
 802357e:	4684      	mov	ip, r0
 8023580:	2300      	movs	r3, #0
 8023582:	f84c 3f10 	str.w	r3, [ip, #16]!
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8023586:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
 802358a:	f100 0e38 	add.w	lr, r0, #56	; 0x38
        control->sl_bitmap[i] = 0;
 802358e:	461c      	mov	r4, r3
 8023590:	f84c 4f04 	str.w	r4, [ip, #4]!
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8023594:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
            control->blocks[i][j] = &control->block_null;
 8023598:	f843 1f04 	str.w	r1, [r3, #4]!
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 802359c:	4293      	cmp	r3, r2
 802359e:	d1fb      	bne.n	8023598 <lv_tlsf_create+0x28>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 80235a0:	3280      	adds	r2, #128	; 0x80
 80235a2:	45f4      	cmp	ip, lr
 80235a4:	d1f4      	bne.n	8023590 <lv_tlsf_create+0x20>
    }

    control_constructor(tlsf_cast(control_t *, mem));

    return tlsf_cast(lv_tlsf_t, mem);
}
 80235a6:	bd10      	pop	{r4, pc}
        return 0;
 80235a8:	2000      	movs	r0, #0
}
 80235aa:	4770      	bx	lr

080235ac <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 80235ac:	b570      	push	{r4, r5, r6, lr}
 80235ae:	4605      	mov	r5, r0
 80235b0:	460e      	mov	r6, r1
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 80235b2:	f7ff ffdd 	bl	8023570 <lv_tlsf_create>
 80235b6:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 80235b8:	f2a6 523c 	subw	r2, r6, #1340	; 0x53c
 80235bc:	f205 513c 	addw	r1, r5, #1340	; 0x53c
 80235c0:	f7ff ffb4 	bl	802352c <lv_tlsf_add_pool>
    return tlsf;
}
 80235c4:	4620      	mov	r0, r4
 80235c6:	bd70      	pop	{r4, r5, r6, pc}

080235c8 <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 80235c8:	b570      	push	{r4, r5, r6, lr}
 80235ca:	4605      	mov	r5, r0
 80235cc:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80235ce:	2104      	movs	r1, #4
 80235d0:	f7ff fe22 	bl	8023218 <adjust_request_size>
 80235d4:	4604      	mov	r4, r0
    block_header_t * block = block_locate_free(control, adjust);
 80235d6:	4601      	mov	r1, r0
 80235d8:	4628      	mov	r0, r5
 80235da:	f7ff ff21 	bl	8023420 <block_locate_free>
    if(block) {
 80235de:	4606      	mov	r6, r0
 80235e0:	b150      	cbz	r0, 80235f8 <lv_tlsf_malloc+0x30>
        tlsf_assert(size && "size must be non-zero");
 80235e2:	b904      	cbnz	r4, 80235e6 <lv_tlsf_malloc+0x1e>
 80235e4:	e7fe      	b.n	80235e4 <lv_tlsf_malloc+0x1c>
        block_trim_free(control, block, size);
 80235e6:	4622      	mov	r2, r4
 80235e8:	4601      	mov	r1, r0
 80235ea:	4628      	mov	r0, r5
 80235ec:	f7ff feeb 	bl	80233c6 <block_trim_free>
        block_mark_as_used(block);
 80235f0:	4630      	mov	r0, r6
 80235f2:	f7ff ff08 	bl	8023406 <block_mark_as_used>
    return tlsf_cast(void *,
 80235f6:	3608      	adds	r6, #8
    return block_prepare_used(control, block, adjust);
}
 80235f8:	4630      	mov	r0, r6
 80235fa:	bd70      	pop	{r4, r5, r6, pc}

080235fc <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 80235fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 80235fe:	2900      	cmp	r1, #0
 8023600:	d03f      	beq.n	8023682 <lv_tlsf_free+0x86>
 8023602:	4605      	mov	r5, r0
 8023604:	460e      	mov	r6, r1
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023606:	f851 4c04 	ldr.w	r4, [r1, #-4]
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 802360a:	f014 0f01 	tst.w	r4, #1
 802360e:	d000      	beq.n	8023612 <lv_tlsf_free+0x16>
 8023610:	e7fe      	b.n	8023610 <lv_tlsf_free+0x14>
    return tlsf_cast(block_header_t *,
 8023612:	f1a1 0708 	sub.w	r7, r1, #8
    block_header_t * next = block_link_next(block);
 8023616:	4638      	mov	r0, r7
 8023618:	f7ff fe9d 	bl	8023356 <block_link_next>
    block->size |= block_header_prev_free_bit;
 802361c:	6843      	ldr	r3, [r0, #4]
 802361e:	f043 0302 	orr.w	r3, r3, #2
 8023622:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 8023624:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023628:	f043 0301 	orr.w	r3, r3, #1
 802362c:	f846 3c04 	str.w	r3, [r6, #-4]
    if(block_is_prev_free(block)) {
 8023630:	f013 0f02 	tst.w	r3, #2
 8023634:	d108      	bne.n	8023648 <lv_tlsf_free+0x4c>
        size = block->size;
        block_mark_as_free(block);
        block = block_merge_prev(control, block);
        block = block_merge_next(control, block);
 8023636:	4639      	mov	r1, r7
 8023638:	4628      	mov	r0, r5
 802363a:	f7ff ff51 	bl	80234e0 <block_merge_next>
 802363e:	4601      	mov	r1, r0
        block_insert(control, block);
 8023640:	4628      	mov	r0, r5
 8023642:	f7ff fe51 	bl	80232e8 <block_insert>
 8023646:	e01d      	b.n	8023684 <lv_tlsf_free+0x88>
    return block->prev_phys_block;
 8023648:	f856 7c08 	ldr.w	r7, [r6, #-8]
        tlsf_assert(prev && "prev physical block can't be null");
 802364c:	b127      	cbz	r7, 8023658 <lv_tlsf_free+0x5c>
    return tlsf_cast(int, block->size & block_header_free_bit);
 802364e:	687b      	ldr	r3, [r7, #4]
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8023650:	f013 0f01 	tst.w	r3, #1
 8023654:	d101      	bne.n	802365a <lv_tlsf_free+0x5e>
 8023656:	e7fe      	b.n	8023656 <lv_tlsf_free+0x5a>
        tlsf_assert(prev && "prev physical block can't be null");
 8023658:	e7fe      	b.n	8023658 <lv_tlsf_free+0x5c>
        block_remove(control, prev);
 802365a:	4639      	mov	r1, r7
 802365c:	4628      	mov	r0, r5
 802365e:	f7ff fe30 	bl	80232c2 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023662:	687a      	ldr	r2, [r7, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8023664:	f032 0303 	bics.w	r3, r2, #3
 8023668:	d100      	bne.n	802366c <lv_tlsf_free+0x70>
 802366a:	e7fe      	b.n	802366a <lv_tlsf_free+0x6e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802366c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023670:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 8023674:	4413      	add	r3, r2
 8023676:	3304      	adds	r3, #4
 8023678:	607b      	str	r3, [r7, #4]
    block_link_next(prev);
 802367a:	4638      	mov	r0, r7
 802367c:	f7ff fe6b 	bl	8023356 <block_link_next>
    return prev;
 8023680:	e7d9      	b.n	8023636 <lv_tlsf_free+0x3a>
    size_t size = 0;
 8023682:	2400      	movs	r4, #0
    }

    return size;
}
 8023684:	4620      	mov	r0, r4
 8023686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023688 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8023688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802368c:	4680      	mov	r8, r0
 802368e:	4614      	mov	r4, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8023690:	b1e1      	cbz	r1, 80236cc <lv_tlsf_realloc+0x44>
 8023692:	460f      	mov	r7, r1
 8023694:	b1b2      	cbz	r2, 80236c4 <lv_tlsf_realloc+0x3c>
    return tlsf_cast(block_header_t *,
 8023696:	f1a1 0a08 	sub.w	sl, r1, #8
    else if(!ptr) {
        p = lv_tlsf_malloc(tlsf, size);
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
        block_header_t * next = block_next(block);
 802369a:	4650      	mov	r0, sl
 802369c:	f7ff fe53 	bl	8023346 <block_next>
 80236a0:	4681      	mov	r9, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80236a2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80236a6:	f026 0b03 	bic.w	fp, r6, #3

        const size_t cursize = block_size(block);
        const size_t combined = cursize + block_size(next) + block_header_overhead;
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80236aa:	2104      	movs	r1, #4
 80236ac:	4620      	mov	r0, r4
 80236ae:	f7ff fdb3 	bl	8023218 <adjust_request_size>
 80236b2:	4605      	mov	r5, r0
        if(size > cursize && adjust == 0) {
 80236b4:	455c      	cmp	r4, fp
 80236b6:	d901      	bls.n	80236bc <lv_tlsf_realloc+0x34>
 80236b8:	2800      	cmp	r0, #0
 80236ba:	d056      	beq.n	802376a <lv_tlsf_realloc+0xe2>
            /* The request is probably too large, fail */
            return NULL;
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80236bc:	f016 0f01 	tst.w	r6, #1
 80236c0:	d00b      	beq.n	80236da <lv_tlsf_realloc+0x52>
 80236c2:	e7fe      	b.n	80236c2 <lv_tlsf_realloc+0x3a>
        lv_tlsf_free(tlsf, ptr);
 80236c4:	f7ff ff9a 	bl	80235fc <lv_tlsf_free>
    void * p = 0;
 80236c8:	2500      	movs	r5, #0
        lv_tlsf_free(tlsf, ptr);
 80236ca:	e003      	b.n	80236d4 <lv_tlsf_realloc+0x4c>
        p = lv_tlsf_malloc(tlsf, size);
 80236cc:	4611      	mov	r1, r2
 80236ce:	f7ff ff7b 	bl	80235c8 <lv_tlsf_malloc>
 80236d2:	4605      	mov	r5, r0
            p = ptr;
        }
    }

    return p;
}
 80236d4:	4628      	mov	r0, r5
 80236d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80236da:	455d      	cmp	r5, fp
 80236dc:	d92b      	bls.n	8023736 <lv_tlsf_realloc+0xae>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80236de:	f8d9 3004 	ldr.w	r3, [r9, #4]
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80236e2:	f013 0f01 	tst.w	r3, #1
 80236e6:	d006      	beq.n	80236f6 <lv_tlsf_realloc+0x6e>
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 80236e8:	f10b 0204 	add.w	r2, fp, #4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80236ec:	f023 0303 	bic.w	r3, r3, #3
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 80236f0:	4413      	add	r3, r2
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 80236f2:	42ab      	cmp	r3, r5
 80236f4:	d212      	bcs.n	802371c <lv_tlsf_realloc+0x94>
            p = lv_tlsf_malloc(tlsf, size);
 80236f6:	4621      	mov	r1, r4
 80236f8:	4640      	mov	r0, r8
 80236fa:	f7ff ff65 	bl	80235c8 <lv_tlsf_malloc>
            if(p) {
 80236fe:	4605      	mov	r5, r0
 8023700:	2800      	cmp	r0, #0
 8023702:	d0e7      	beq.n	80236d4 <lv_tlsf_realloc+0x4c>
                lv_memcpy(p, ptr, minsize);
 8023704:	4622      	mov	r2, r4
 8023706:	455c      	cmp	r4, fp
 8023708:	bf28      	it	cs
 802370a:	465a      	movcs	r2, fp
 802370c:	4639      	mov	r1, r7
 802370e:	f7fe f995 	bl	8021a3c <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8023712:	4639      	mov	r1, r7
 8023714:	4640      	mov	r0, r8
 8023716:	f7ff ff71 	bl	80235fc <lv_tlsf_free>
 802371a:	e7db      	b.n	80236d4 <lv_tlsf_realloc+0x4c>
                block_merge_next(control, block);
 802371c:	4651      	mov	r1, sl
 802371e:	4640      	mov	r0, r8
 8023720:	f7ff fede 	bl	80234e0 <block_merge_next>
                block_mark_as_used(block);
 8023724:	4650      	mov	r0, sl
 8023726:	f7ff fe6e 	bl	8023406 <block_mark_as_used>
    return tlsf_cast(int, block->size & block_header_free_bit);
 802372a:	f857 6c04 	ldr.w	r6, [r7, #-4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 802372e:	f016 0f01 	tst.w	r6, #1
 8023732:	d000      	beq.n	8023736 <lv_tlsf_realloc+0xae>
 8023734:	e7fe      	b.n	8023734 <lv_tlsf_realloc+0xac>
    return block_size(block) >= sizeof(block_header_t) + size;
 8023736:	f105 0310 	add.w	r3, r5, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802373a:	f026 0603 	bic.w	r6, r6, #3
    if(block_can_split(block, size)) {
 802373e:	42b3      	cmp	r3, r6
 8023740:	d901      	bls.n	8023746 <lv_tlsf_realloc+0xbe>
            p = ptr;
 8023742:	463d      	mov	r5, r7
 8023744:	e7c6      	b.n	80236d4 <lv_tlsf_realloc+0x4c>
        block_header_t * remaining_block = block_split(block, size);
 8023746:	4629      	mov	r1, r5
 8023748:	4650      	mov	r0, sl
 802374a:	f7ff fe0a 	bl	8023362 <block_split>
 802374e:	4601      	mov	r1, r0
    block->size &= ~block_header_prev_free_bit;
 8023750:	6843      	ldr	r3, [r0, #4]
 8023752:	f023 0302 	bic.w	r3, r3, #2
 8023756:	6043      	str	r3, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 8023758:	4640      	mov	r0, r8
 802375a:	f7ff fec1 	bl	80234e0 <block_merge_next>
 802375e:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 8023760:	4640      	mov	r0, r8
 8023762:	f7ff fdc1 	bl	80232e8 <block_insert>
            p = ptr;
 8023766:	463d      	mov	r5, r7
 8023768:	e7b4      	b.n	80236d4 <lv_tlsf_realloc+0x4c>
            return NULL;
 802376a:	2500      	movs	r5, #0
 802376c:	e7b2      	b.n	80236d4 <lv_tlsf_realloc+0x4c>

0802376e <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 802376e:	7803      	ldrb	r3, [r0, #0]
 8023770:	f990 2000 	ldrsb.w	r2, [r0]
 8023774:	2a00      	cmp	r2, #0
 8023776:	da0e      	bge.n	8023796 <lv_txt_utf8_size+0x28>
        return 1;
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 8023778:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 802377c:	2ac0      	cmp	r2, #192	; 0xc0
 802377e:	d00c      	beq.n	802379a <lv_txt_utf8_size+0x2c>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 8023780:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8023784:	2ae0      	cmp	r2, #224	; 0xe0
 8023786:	d00a      	beq.n	802379e <lv_txt_utf8_size+0x30>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8023788:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
 802378c:	2bf0      	cmp	r3, #240	; 0xf0
 802378e:	bf14      	ite	ne
 8023790:	2000      	movne	r0, #0
 8023792:	2004      	moveq	r0, #4
 8023794:	4770      	bx	lr
        return 1;
 8023796:	2001      	movs	r0, #1
 8023798:	4770      	bx	lr
        return 2;
 802379a:	2002      	movs	r0, #2
 802379c:	4770      	bx	lr
        return 3;
 802379e:	2003      	movs	r0, #3
    return 0;
}
 80237a0:	4770      	bx	lr

080237a2 <lv_txt_unicode_to_utf8>:
 * @param letter_uni a Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
 80237a2:	287f      	cmp	r0, #127	; 0x7f
 80237a4:	d94b      	bls.n	802383e <lv_txt_unicode_to_utf8+0x9c>
{
 80237a6:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
 80237a8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80237ac:	d212      	bcs.n	80237d4 <lv_txt_unicode_to_utf8+0x32>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 80237ae:	0983      	lsrs	r3, r0, #6
 80237b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80237b4:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80237b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80237bc:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80237c0:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 80237c4:	2300      	movs	r3, #0
 80237c6:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
 80237ca:	f88d 3007 	strb.w	r3, [sp, #7]
    else {
        return 0;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
 80237ce:	9801      	ldr	r0, [sp, #4]
}
 80237d0:	b002      	add	sp, #8
 80237d2:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 80237d4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80237d8:	d214      	bcs.n	8023804 <lv_txt_unicode_to_utf8+0x62>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 80237da:	0b03      	lsrs	r3, r0, #12
 80237dc:	f063 031f 	orn	r3, r3, #31
 80237e0:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 80237e4:	f3c0 1385 	ubfx	r3, r0, #6, #6
 80237e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80237ec:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 80237f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80237f4:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80237f8:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 80237fc:	2300      	movs	r3, #0
 80237fe:	f88d 3007 	strb.w	r3, [sp, #7]
 8023802:	e7e4      	b.n	80237ce <lv_txt_unicode_to_utf8+0x2c>
    else if(letter_uni < 0x110000) {
 8023804:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8023808:	d217      	bcs.n	802383a <lv_txt_unicode_to_utf8+0x98>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 802380a:	0c83      	lsrs	r3, r0, #18
 802380c:	f063 030f 	orn	r3, r3, #15
 8023810:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8023814:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8023818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802381c:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8023820:	f3c0 1385 	ubfx	r3, r0, #6, #6
 8023824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023828:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 802382c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023830:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8023834:	f88d 0007 	strb.w	r0, [sp, #7]
 8023838:	e7c9      	b.n	80237ce <lv_txt_unicode_to_utf8+0x2c>
        return 0;
 802383a:	2000      	movs	r0, #0
 802383c:	e7c8      	b.n	80237d0 <lv_txt_unicode_to_utf8+0x2e>
}
 802383e:	4770      	bx	lr

08023840 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8023840:	b530      	push	{r4, r5, lr}
 8023842:	b083      	sub	sp, #12
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8023844:	2300      	movs	r3, #0
 8023846:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8023848:	468c      	mov	ip, r1
 802384a:	b159      	cbz	r1, 8023864 <lv_txt_utf8_next+0x24>

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 802384c:	f8dc 3000 	ldr.w	r3, [ip]
 8023850:	5cc2      	ldrb	r2, [r0, r3]
 8023852:	56c1      	ldrsb	r1, [r0, r3]
 8023854:	2900      	cmp	r1, #0
 8023856:	db08      	blt.n	802386a <lv_txt_utf8_next+0x2a>
        result = txt[*i];
 8023858:	4610      	mov	r0, r2
        (*i)++;
 802385a:	3301      	adds	r3, #1
 802385c:	f8cc 3000 	str.w	r3, [ip]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8023860:	b003      	add	sp, #12
 8023862:	bd30      	pop	{r4, r5, pc}
    if(i == NULL) i = &i_tmp;
 8023864:	f10d 0c04 	add.w	ip, sp, #4
 8023868:	e7f0      	b.n	802384c <lv_txt_utf8_next+0xc>
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 802386a:	f002 01e0 	and.w	r1, r2, #224	; 0xe0
 802386e:	29c0      	cmp	r1, #192	; 0xc0
 8023870:	d00c      	beq.n	802388c <lv_txt_utf8_next+0x4c>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 8023872:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 8023876:	29e0      	cmp	r1, #224	; 0xe0
 8023878:	d01a      	beq.n	80238b0 <lv_txt_utf8_next+0x70>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 802387a:	f002 01f8 	and.w	r1, r2, #248	; 0xf8
 802387e:	29f0      	cmp	r1, #240	; 0xf0
 8023880:	d034      	beq.n	80238ec <lv_txt_utf8_next+0xac>
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8023882:	3301      	adds	r3, #1
 8023884:	f8cc 3000 	str.w	r3, [ip]
    uint32_t result = 0;
 8023888:	2000      	movs	r0, #0
 802388a:	e7e9      	b.n	8023860 <lv_txt_utf8_next+0x20>
            (*i)++;
 802388c:	1c59      	adds	r1, r3, #1
 802388e:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023892:	5c40      	ldrb	r0, [r0, r1]
 8023894:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
 8023898:	2980      	cmp	r1, #128	; 0x80
 802389a:	d153      	bne.n	8023944 <lv_txt_utf8_next+0x104>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 802389c:	0192      	lsls	r2, r2, #6
 802389e:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 80238a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80238a6:	4410      	add	r0, r2
            (*i)++;
 80238a8:	3302      	adds	r3, #2
 80238aa:	f8cc 3000 	str.w	r3, [ip]
 80238ae:	e7d7      	b.n	8023860 <lv_txt_utf8_next+0x20>
            (*i)++;
 80238b0:	1c59      	adds	r1, r3, #1
 80238b2:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80238b6:	5c41      	ldrb	r1, [r0, r1]
 80238b8:	f001 0ec0 	and.w	lr, r1, #192	; 0xc0
 80238bc:	f1be 0f80 	cmp.w	lr, #128	; 0x80
 80238c0:	d142      	bne.n	8023948 <lv_txt_utf8_next+0x108>
            (*i)++;
 80238c2:	1c9c      	adds	r4, r3, #2
 80238c4:	f8cc 4000 	str.w	r4, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80238c8:	5d00      	ldrb	r0, [r0, r4]
 80238ca:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 80238ce:	2c80      	cmp	r4, #128	; 0x80
 80238d0:	d13c      	bne.n	802394c <lv_txt_utf8_next+0x10c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 80238d2:	0312      	lsls	r2, r2, #12
 80238d4:	b292      	uxth	r2, r2
            result += (txt[*i] & 0x3F);
 80238d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80238da:	4402      	add	r2, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80238dc:	0188      	lsls	r0, r1, #6
 80238de:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 80238e2:	4410      	add	r0, r2
            (*i)++;
 80238e4:	3303      	adds	r3, #3
 80238e6:	f8cc 3000 	str.w	r3, [ip]
 80238ea:	e7b9      	b.n	8023860 <lv_txt_utf8_next+0x20>
            (*i)++;
 80238ec:	1c59      	adds	r1, r3, #1
 80238ee:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80238f2:	5c41      	ldrb	r1, [r0, r1]
 80238f4:	f001 04c0 	and.w	r4, r1, #192	; 0xc0
 80238f8:	2c80      	cmp	r4, #128	; 0x80
 80238fa:	d129      	bne.n	8023950 <lv_txt_utf8_next+0x110>
            (*i)++;
 80238fc:	1c9c      	adds	r4, r3, #2
 80238fe:	f8cc 4000 	str.w	r4, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023902:	5d04      	ldrb	r4, [r0, r4]
 8023904:	f004 0ec0 	and.w	lr, r4, #192	; 0xc0
 8023908:	f1be 0f80 	cmp.w	lr, #128	; 0x80
 802390c:	d122      	bne.n	8023954 <lv_txt_utf8_next+0x114>
            (*i)++;
 802390e:	1cdd      	adds	r5, r3, #3
 8023910:	f8cc 5000 	str.w	r5, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023914:	f810 e005 	ldrb.w	lr, [r0, r5]
 8023918:	f00e 00c0 	and.w	r0, lr, #192	; 0xc0
 802391c:	2880      	cmp	r0, #128	; 0x80
 802391e:	d11b      	bne.n	8023958 <lv_txt_utf8_next+0x118>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8023920:	0492      	lsls	r2, r2, #18
 8023922:	f402 12e0 	and.w	r2, r2, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8023926:	0309      	lsls	r1, r1, #12
 8023928:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
 802392c:	4302      	orrs	r2, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 802392e:	01a0      	lsls	r0, r4, #6
 8023930:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8023934:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
 8023938:	4470      	add	r0, lr
 802393a:	4410      	add	r0, r2
            (*i)++;
 802393c:	3304      	adds	r3, #4
 802393e:	f8cc 3000 	str.w	r3, [ip]
 8023942:	e78d      	b.n	8023860 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023944:	2000      	movs	r0, #0
 8023946:	e78b      	b.n	8023860 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023948:	2000      	movs	r0, #0
 802394a:	e789      	b.n	8023860 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802394c:	2000      	movs	r0, #0
 802394e:	e787      	b.n	8023860 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023950:	2000      	movs	r0, #0
 8023952:	e785      	b.n	8023860 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023954:	2000      	movs	r0, #0
 8023956:	e783      	b.n	8023860 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023958:	2000      	movs	r0, #0
 802395a:	e781      	b.n	8023860 <lv_txt_utf8_next+0x20>

0802395c <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 802395c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802395e:	b083      	sub	sp, #12
 8023960:	4606      	mov	r6, r0
 8023962:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8023964:	680b      	ldr	r3, [r1, #0]
 8023966:	3b01      	subs	r3, #1
 8023968:	600b      	str	r3, [r1, #0]
 802396a:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
 802396c:	4f0d      	ldr	r7, [pc, #52]	; (80239a4 <lv_txt_utf8_prev+0x48>)
 802396e:	e005      	b.n	802397c <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
 8023970:	3801      	subs	r0, #1
 8023972:	6028      	str	r0, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8023974:	1e63      	subs	r3, r4, #1
 8023976:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 802397a:	d008      	beq.n	802398e <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
 802397c:	6828      	ldr	r0, [r5, #0]
 802397e:	683b      	ldr	r3, [r7, #0]
 8023980:	4430      	add	r0, r6
 8023982:	4798      	blx	r3
        if(c_size == 0) {
 8023984:	b930      	cbnz	r0, 8023994 <lv_txt_utf8_prev+0x38>
            if(*i != 0)
 8023986:	6828      	ldr	r0, [r5, #0]
 8023988:	2800      	cmp	r0, #0
 802398a:	d1f1      	bne.n	8023970 <lv_txt_utf8_prev+0x14>
 802398c:	e000      	b.n	8023990 <lv_txt_utf8_prev+0x34>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 802398e:	2000      	movs	r0, #0

    uint32_t i_tmp  = *i;
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/

    return letter;
}
 8023990:	b003      	add	sp, #12
 8023992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8023994:	682b      	ldr	r3, [r5, #0]
 8023996:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8023998:	4b03      	ldr	r3, [pc, #12]	; (80239a8 <lv_txt_utf8_prev+0x4c>)
 802399a:	681b      	ldr	r3, [r3, #0]
 802399c:	a901      	add	r1, sp, #4
 802399e:	4630      	mov	r0, r6
 80239a0:	4798      	blx	r3
    return letter;
 80239a2:	e7f5      	b.n	8023990 <lv_txt_utf8_prev+0x34>
 80239a4:	20000764 	.word	0x20000764
 80239a8:	2000075c 	.word	0x2000075c

080239ac <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80239ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80239b0:	460f      	mov	r7, r1
    uint32_t byte_cnt = 0;
 80239b2:	460c      	mov	r4, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80239b4:	b191      	cbz	r1, 80239dc <lv_txt_utf8_get_byte_id+0x30>
 80239b6:	4606      	mov	r6, r0
    uint32_t byte_cnt = 0;
 80239b8:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80239ba:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80239bc:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80239e4 <lv_txt_utf8_get_byte_id+0x38>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80239c0:	1930      	adds	r0, r6, r4
 80239c2:	5d33      	ldrb	r3, [r6, r4]
 80239c4:	b153      	cbz	r3, 80239dc <lv_txt_utf8_get_byte_id+0x30>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 80239c6:	f8d8 3000 	ldr.w	r3, [r8]
 80239ca:	4798      	blx	r3
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 80239cc:	2801      	cmp	r0, #1
 80239ce:	bf38      	it	cc
 80239d0:	2001      	movcc	r0, #1
 80239d2:	b2c3      	uxtb	r3, r0
 80239d4:	441c      	add	r4, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 80239d6:	3501      	adds	r5, #1
 80239d8:	42af      	cmp	r7, r5
 80239da:	d1f1      	bne.n	80239c0 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
}
 80239dc:	4620      	mov	r0, r4
 80239de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80239e2:	bf00      	nop
 80239e4:	20000764 	.word	0x20000764

080239e8 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80239e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239ea:	b083      	sub	sp, #12
    uint32_t i        = 0;
 80239ec:	2300      	movs	r3, #0
 80239ee:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 80239f0:	460e      	mov	r6, r1
 80239f2:	b169      	cbz	r1, 8023a10 <lv_txt_utf8_get_char_id+0x28>
 80239f4:	4605      	mov	r5, r0
    uint32_t char_cnt = 0;
 80239f6:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80239f8:	4f06      	ldr	r7, [pc, #24]	; (8023a14 <lv_txt_utf8_get_char_id+0x2c>)
 80239fa:	683b      	ldr	r3, [r7, #0]
 80239fc:	a901      	add	r1, sp, #4
 80239fe:	4628      	mov	r0, r5
 8023a00:	4798      	blx	r3
        char_cnt++;
 8023a02:	3401      	adds	r4, #1
    while(i < byte_id) {
 8023a04:	9b01      	ldr	r3, [sp, #4]
 8023a06:	42b3      	cmp	r3, r6
 8023a08:	d3f7      	bcc.n	80239fa <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
 8023a0a:	4620      	mov	r0, r4
 8023a0c:	b003      	add	sp, #12
 8023a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
 8023a10:	460c      	mov	r4, r1
    return char_cnt;
 8023a12:	e7fa      	b.n	8023a0a <lv_txt_utf8_get_char_id+0x22>
 8023a14:	2000075c 	.word	0x2000075c

08023a18 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8023a18:	b570      	push	{r4, r5, r6, lr}
 8023a1a:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
 8023a1c:	2300      	movs	r3, #0
 8023a1e:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
 8023a20:	7803      	ldrb	r3, [r0, #0]
 8023a22:	b173      	cbz	r3, 8023a42 <lv_txt_utf8_get_length+0x2a>
 8023a24:	4604      	mov	r4, r0
    uint32_t len = 0;
 8023a26:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
 8023a28:	4e07      	ldr	r6, [pc, #28]	; (8023a48 <lv_txt_utf8_get_length+0x30>)
 8023a2a:	6833      	ldr	r3, [r6, #0]
 8023a2c:	a901      	add	r1, sp, #4
 8023a2e:	4620      	mov	r0, r4
 8023a30:	4798      	blx	r3
        len++;
 8023a32:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
 8023a34:	9b01      	ldr	r3, [sp, #4]
 8023a36:	5ce3      	ldrb	r3, [r4, r3]
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	d1f6      	bne.n	8023a2a <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
 8023a3c:	4628      	mov	r0, r5
 8023a3e:	b002      	add	sp, #8
 8023a40:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
 8023a42:	2500      	movs	r5, #0
    return len;
 8023a44:	e7fa      	b.n	8023a3c <lv_txt_utf8_get_length+0x24>
 8023a46:	bf00      	nop
 8023a48:	2000075c 	.word	0x2000075c

08023a4c <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8023a4c:	2923      	cmp	r1, #35	; 0x23
 8023a4e:	d004      	beq.n	8023a5a <_lv_txt_is_cmd+0xe>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8023a50:	7803      	ldrb	r3, [r0, #0]
 8023a52:	2b01      	cmp	r3, #1
 8023a54:	d015      	beq.n	8023a82 <_lv_txt_is_cmd+0x36>
    bool ret = false;
 8023a56:	2000      	movs	r0, #0
 8023a58:	4770      	bx	lr
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 8023a5a:	7803      	ldrb	r3, [r0, #0]
 8023a5c:	b91b      	cbnz	r3, 8023a66 <_lv_txt_is_cmd+0x1a>
            *state = LV_TEXT_CMD_STATE_PAR;
 8023a5e:	2301      	movs	r3, #1
 8023a60:	7003      	strb	r3, [r0, #0]
        ret = true;
 8023a62:	4618      	mov	r0, r3
 8023a64:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 8023a66:	2b01      	cmp	r3, #1
 8023a68:	d003      	beq.n	8023a72 <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 8023a6a:	2b02      	cmp	r3, #2
 8023a6c:	d005      	beq.n	8023a7a <_lv_txt_is_cmd+0x2e>
    bool ret = false;
 8023a6e:	2000      	movs	r0, #0
}
 8023a70:	4770      	bx	lr
            *state = LV_TEXT_CMD_STATE_WAIT;
 8023a72:	2300      	movs	r3, #0
 8023a74:	7003      	strb	r3, [r0, #0]
    bool ret = false;
 8023a76:	4618      	mov	r0, r3
 8023a78:	4770      	bx	lr
            *state = LV_TEXT_CMD_STATE_WAIT;
 8023a7a:	2300      	movs	r3, #0
 8023a7c:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8023a7e:	2001      	movs	r0, #1
 8023a80:	4770      	bx	lr
        if(c == ' ') {
 8023a82:	2920      	cmp	r1, #32
 8023a84:	d103      	bne.n	8023a8e <_lv_txt_is_cmd+0x42>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8023a86:	2302      	movs	r3, #2
 8023a88:	7003      	strb	r3, [r0, #0]
        ret = true;
 8023a8a:	2001      	movs	r0, #1
 8023a8c:	4770      	bx	lr
 8023a8e:	2001      	movs	r0, #1
 8023a90:	4770      	bx	lr
	...

08023a94 <_lv_txt_get_next_line>:
{
 8023a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a98:	b093      	sub	sp, #76	; 0x4c
 8023a9a:	4606      	mov	r6, r0
 8023a9c:	9107      	str	r1, [sp, #28]
 8023a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8023aa0:	9302      	str	r3, [sp, #8]
 8023aa2:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8023aa6:	9304      	str	r3, [sp, #16]
    if(used_width) *used_width = 0;
 8023aa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023aaa:	b113      	cbz	r3, 8023ab2 <_lv_txt_get_next_line+0x1e>
 8023aac:	2300      	movs	r3, #0
 8023aae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8023ab0:	8013      	strh	r3, [r2, #0]
    if(txt == NULL) return 0;
 8023ab2:	2e00      	cmp	r6, #0
 8023ab4:	f000 811f 	beq.w	8023cf6 <_lv_txt_get_next_line+0x262>
    if(txt[0] == '\0') return 0;
 8023ab8:	7833      	ldrb	r3, [r6, #0]
 8023aba:	2b00      	cmp	r3, #0
 8023abc:	f000 811d 	beq.w	8023cfa <_lv_txt_get_next_line+0x266>
    if(font == NULL) return 0;
 8023ac0:	9a07      	ldr	r2, [sp, #28]
 8023ac2:	2a00      	cmp	r2, #0
 8023ac4:	f000 811b 	beq.w	8023cfe <_lv_txt_get_next_line+0x26a>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8023ac8:	9a04      	ldr	r2, [sp, #16]
 8023aca:	f012 0206 	ands.w	r2, r2, #6
 8023ace:	920b      	str	r2, [sp, #44]	; 0x2c
 8023ad0:	d113      	bne.n	8023afa <_lv_txt_get_next_line+0x66>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8023ad2:	9b04      	ldr	r3, [sp, #16]
 8023ad4:	f013 0302 	ands.w	r3, r3, #2
 8023ad8:	930d      	str	r3, [sp, #52]	; 0x34
 8023ada:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8023ade:	9a02      	ldr	r2, [sp, #8]
 8023ae0:	bf18      	it	ne
 8023ae2:	461a      	movne	r2, r3
 8023ae4:	9202      	str	r2, [sp, #8]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8023ae6:	2700      	movs	r7, #0
 8023ae8:	f88d 7047 	strb.w	r7, [sp, #71]	; 0x47
    uint32_t i = 0;                                        /*Iterating index into txt*/
 8023aec:	9710      	str	r7, [sp, #64]	; 0x40
    while(txt[i] != '\0' && max_width > 0) {
 8023aee:	46b3      	mov	fp, r6
    lv_coord_t line_w = 0;
 8023af0:	9705      	str	r7, [sp, #20]
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8023af2:	f8df a214 	ldr.w	sl, [pc, #532]	; 8023d08 <_lv_txt_get_next_line+0x274>
 8023af6:	9608      	str	r6, [sp, #32]
 8023af8:	e0c1      	b.n	8023c7e <_lv_txt_get_next_line+0x1ea>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8023afa:	2b0a      	cmp	r3, #10
 8023afc:	f000 8101 	beq.w	8023d02 <_lv_txt_get_next_line+0x26e>
 8023b00:	4632      	mov	r2, r6
 8023b02:	2000      	movs	r0, #0
 8023b04:	2b0d      	cmp	r3, #13
 8023b06:	d005      	beq.n	8023b14 <_lv_txt_get_next_line+0x80>
 8023b08:	b12b      	cbz	r3, 8023b16 <_lv_txt_get_next_line+0x82>
 8023b0a:	3001      	adds	r0, #1
 8023b0c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8023b10:	2b0a      	cmp	r3, #10
 8023b12:	d1f7      	bne.n	8023b04 <_lv_txt_get_next_line+0x70>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8023b14:	3001      	adds	r0, #1
        if(used_width) *used_width = -1;
 8023b16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	f000 80e9 	beq.w	8023cf0 <_lv_txt_get_next_line+0x25c>
 8023b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023b22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8023b24:	8013      	strh	r3, [r2, #0]
 8023b26:	e0e3      	b.n	8023cf0 <_lv_txt_get_next_line+0x25c>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8023b28:	9a01      	ldr	r2, [sp, #4]
 8023b2a:	4621      	mov	r1, r4
 8023b2c:	9807      	ldr	r0, [sp, #28]
 8023b2e:	f7fc f9f4 	bl	801ff1a <lv_font_get_glyph_width>
        cur_w += letter_w;
 8023b32:	4405      	add	r5, r0
 8023b34:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
 8023b36:	b200      	sxth	r0, r0
 8023b38:	2800      	cmp	r0, #0
 8023b3a:	dd02      	ble.n	8023b42 <_lv_txt_get_next_line+0xae>
            cur_w += letter_space;
 8023b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b3e:	441d      	add	r5, r3
 8023b40:	b2ad      	uxth	r5, r5
 8023b42:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8023b44:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8023b48:	d038      	beq.n	8023bbc <_lv_txt_get_next_line+0x128>
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 8023b4a:	2c0a      	cmp	r4, #10
 8023b4c:	d03d      	beq.n	8023bca <_lv_txt_get_next_line+0x136>
 8023b4e:	2c0d      	cmp	r4, #13
 8023b50:	d03e      	beq.n	8023bd0 <_lv_txt_get_next_line+0x13c>
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8023b52:	f5a4 429c 	sub.w	r2, r4, #19968	; 0x4e00
 8023b56:	f245 13a5 	movw	r3, #20901	; 0x51a5
 8023b5a:	429a      	cmp	r2, r3
 8023b5c:	d93b      	bls.n	8023bd6 <_lv_txt_get_next_line+0x142>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8023b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b60:	2220      	movs	r2, #32
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8023b62:	42a2      	cmp	r2, r4
 8023b64:	d047      	beq.n	8023bf6 <_lv_txt_get_next_line+0x162>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8023b66:	3301      	adds	r3, #1
 8023b68:	b2db      	uxtb	r3, r3
 8023b6a:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8023b6e:	2a00      	cmp	r2, #0
 8023b70:	d1f7      	bne.n	8023b62 <_lv_txt_get_next_line+0xce>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8023b72:	9b03      	ldr	r3, [sp, #12]
 8023b74:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8023b78:	bf08      	it	eq
 8023b7a:	462b      	moveq	r3, r5
 8023b7c:	9303      	str	r3, [sp, #12]
        i = i_next;
 8023b7e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
        i_next = i_next_next;
 8023b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023b82:	930e      	str	r3, [sp, #56]	; 0x38
    while(txt[i] != '\0') {
 8023b84:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8023b88:	2b00      	cmp	r3, #0
 8023b8a:	d037      	beq.n	8023bfc <_lv_txt_get_next_line+0x168>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8023b8c:	9c01      	ldr	r4, [sp, #4]
 8023b8e:	f8d9 3000 	ldr.w	r3, [r9]
 8023b92:	a90f      	add	r1, sp, #60	; 0x3c
 8023b94:	4658      	mov	r0, fp
 8023b96:	4798      	blx	r3
 8023b98:	9001      	str	r0, [sp, #4]
        word_len++;
 8023b9a:	9606      	str	r6, [sp, #24]
 8023b9c:	3601      	adds	r6, #1
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8023b9e:	9b04      	ldr	r3, [sp, #16]
 8023ba0:	f013 0f01 	tst.w	r3, #1
 8023ba4:	d0c0      	beq.n	8023b28 <_lv_txt_get_next_line+0x94>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 8023ba6:	4621      	mov	r1, r4
 8023ba8:	f10d 0047 	add.w	r0, sp, #71	; 0x47
 8023bac:	f7ff ff4e 	bl	8023a4c <_lv_txt_is_cmd>
 8023bb0:	2800      	cmp	r0, #0
 8023bb2:	d0b9      	beq.n	8023b28 <_lv_txt_get_next_line+0x94>
                i = i_next;
 8023bb4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
                i_next = i_next_next;
 8023bb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023bb8:	930e      	str	r3, [sp, #56]	; 0x38
                continue;   /*Skip the letter if it is part of a command*/
 8023bba:	e7e3      	b.n	8023b84 <_lv_txt_get_next_line+0xf0>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8023bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023bbe:	1aeb      	subs	r3, r5, r3
 8023bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023bc2:	4293      	cmp	r3, r2
 8023bc4:	bfc8      	it	gt
 8023bc6:	46b8      	movgt	r8, r7
 8023bc8:	e7bf      	b.n	8023b4a <_lv_txt_get_next_line+0xb6>
 8023bca:	463b      	mov	r3, r7
 8023bcc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023bce:	e004      	b.n	8023bda <_lv_txt_get_next_line+0x146>
 8023bd0:	463b      	mov	r3, r7
 8023bd2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023bd4:	e001      	b.n	8023bda <_lv_txt_get_next_line+0x146>
 8023bd6:	463b      	mov	r3, r7
 8023bd8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 8023bda:	b99b      	cbnz	r3, 8023c04 <_lv_txt_get_next_line+0x170>
 8023bdc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8023be0:	d113      	bne.n	8023c0a <_lv_txt_get_next_line+0x176>
 8023be2:	9503      	str	r5, [sp, #12]
 8023be4:	4698      	mov	r8, r3
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8023be6:	9b06      	ldr	r3, [sp, #24]
 8023be8:	b343      	cbz	r3, 8023c3c <_lv_txt_get_next_line+0x1a8>
 8023bea:	2c0d      	cmp	r4, #13
 8023bec:	d128      	bne.n	8023c40 <_lv_txt_get_next_line+0x1ac>
 8023bee:	9b01      	ldr	r3, [sp, #4]
 8023bf0:	2b0a      	cmp	r3, #10
 8023bf2:	d125      	bne.n	8023c40 <_lv_txt_get_next_line+0x1ac>
 8023bf4:	e022      	b.n	8023c3c <_lv_txt_get_next_line+0x1a8>
 8023bf6:	463b      	mov	r3, r7
 8023bf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023bfa:	e7ee      	b.n	8023bda <_lv_txt_get_next_line+0x146>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8023bfc:	463b      	mov	r3, r7
 8023bfe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023c00:	9c01      	ldr	r4, [sp, #4]
 8023c02:	9606      	str	r6, [sp, #24]
    if(break_index == NO_BREAK_FOUND) {
 8023c04:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8023c08:	d014      	beq.n	8023c34 <_lv_txt_get_next_line+0x1a0>
    if(force) return break_index;
 8023c0a:	b1cf      	cbz	r7, 8023c40 <_lv_txt_get_next_line+0x1ac>
 8023c0c:	9e08      	ldr	r6, [sp, #32]
    if(i == 0) {
 8023c0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c10:	2b00      	cmp	r3, #0
 8023c12:	d167      	bne.n	8023ce4 <_lv_txt_get_next_line+0x250>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8023c14:	4b3d      	ldr	r3, [pc, #244]	; (8023d0c <_lv_txt_get_next_line+0x278>)
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	a910      	add	r1, sp, #64	; 0x40
 8023c1a:	4630      	mov	r0, r6
 8023c1c:	4798      	blx	r3
        if(used_width != NULL) {
 8023c1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c20:	2b00      	cmp	r3, #0
 8023c22:	d064      	beq.n	8023cee <_lv_txt_get_next_line+0x25a>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 8023c24:	2200      	movs	r2, #0
 8023c26:	4601      	mov	r1, r0
 8023c28:	9807      	ldr	r0, [sp, #28]
 8023c2a:	f7fc f976 	bl	801ff1a <lv_font_get_glyph_width>
 8023c2e:	b203      	sxth	r3, r0
 8023c30:	9305      	str	r3, [sp, #20]
    if(used_width != NULL) {
 8023c32:	e059      	b.n	8023ce8 <_lv_txt_get_next_line+0x254>
 8023c34:	4698      	mov	r8, r3
 8023c36:	e7d6      	b.n	8023be6 <_lv_txt_get_next_line+0x152>
        uint32_t word_w = 0;
 8023c38:	2300      	movs	r3, #0
 8023c3a:	9303      	str	r3, [sp, #12]
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8023c3c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
        max_width -= word_w;
 8023c40:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8023c44:	9a02      	ldr	r2, [sp, #8]
 8023c46:	1ad2      	subs	r2, r2, r3
 8023c48:	b212      	sxth	r2, r2
 8023c4a:	9202      	str	r2, [sp, #8]
        line_w += word_w;
 8023c4c:	9a05      	ldr	r2, [sp, #20]
 8023c4e:	4413      	add	r3, r2
 8023c50:	b21b      	sxth	r3, r3
 8023c52:	9305      	str	r3, [sp, #20]
        if(advance == 0) {
 8023c54:	f1b8 0f00 	cmp.w	r8, #0
 8023c58:	d03c      	beq.n	8023cd4 <_lv_txt_get_next_line+0x240>
        i += advance;
 8023c5a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023c5c:	4447      	add	r7, r8
 8023c5e:	9710      	str	r7, [sp, #64]	; 0x40
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8023c60:	9a08      	ldr	r2, [sp, #32]
 8023c62:	7813      	ldrb	r3, [r2, #0]
 8023c64:	2b0a      	cmp	r3, #10
 8023c66:	d037      	beq.n	8023cd8 <_lv_txt_get_next_line+0x244>
 8023c68:	2b0d      	cmp	r3, #13
 8023c6a:	d037      	beq.n	8023cdc <_lv_txt_get_next_line+0x248>
        if(txt[i] == '\n' || txt[i] == '\r') {
 8023c6c:	eb02 0b07 	add.w	fp, r2, r7
 8023c70:	5dd3      	ldrb	r3, [r2, r7]
 8023c72:	2b0a      	cmp	r3, #10
 8023c74:	d028      	beq.n	8023cc8 <_lv_txt_get_next_line+0x234>
 8023c76:	2b0d      	cmp	r3, #13
 8023c78:	d026      	beq.n	8023cc8 <_lv_txt_get_next_line+0x234>
    while(txt[i] != '\0' && max_width > 0) {
 8023c7a:	2b00      	cmp	r3, #0
 8023c7c:	d030      	beq.n	8023ce0 <_lv_txt_get_next_line+0x24c>
 8023c7e:	9b02      	ldr	r3, [sp, #8]
 8023c80:	2b00      	cmp	r3, #0
 8023c82:	dd25      	ble.n	8023cd0 <_lv_txt_get_next_line+0x23c>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8023c84:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8023c88:	9a02      	ldr	r2, [sp, #8]
 8023c8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023c8c:	2900      	cmp	r1, #0
 8023c8e:	bf08      	it	eq
 8023c90:	4613      	moveq	r3, r2
 8023c92:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8023c94:	2300      	movs	r3, #0
 8023c96:	930e      	str	r3, [sp, #56]	; 0x38
 8023c98:	930f      	str	r3, [sp, #60]	; 0x3c
    letter = _lv_txt_encoded_next(txt, &i_next);
 8023c9a:	4b1c      	ldr	r3, [pc, #112]	; (8023d0c <_lv_txt_get_next_line+0x278>)
 8023c9c:	681b      	ldr	r3, [r3, #0]
 8023c9e:	a90e      	add	r1, sp, #56	; 0x38
 8023ca0:	4658      	mov	r0, fp
 8023ca2:	4798      	blx	r3
 8023ca4:	9001      	str	r0, [sp, #4]
    i_next_next = i_next;
 8023ca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ca8:	930f      	str	r3, [sp, #60]	; 0x3c
    while(txt[i] != '\0') {
 8023caa:	f89b 3000 	ldrb.w	r3, [fp]
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	d0c2      	beq.n	8023c38 <_lv_txt_get_next_line+0x1a4>
        uint32_t word_w = 0;
 8023cb2:	2200      	movs	r2, #0
 8023cb4:	4616      	mov	r6, r2
 8023cb6:	9203      	str	r2, [sp, #12]
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8023cb8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8023cbc:	4615      	mov	r5, r2
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8023cbe:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8023d0c <_lv_txt_get_next_line+0x278>
 8023cc2:	970a      	str	r7, [sp, #40]	; 0x28
 8023cc4:	4617      	mov	r7, r2
 8023cc6:	e761      	b.n	8023b8c <_lv_txt_get_next_line+0xf8>
            i++;  /*Include the following newline in the current line*/
 8023cc8:	9e08      	ldr	r6, [sp, #32]
 8023cca:	1c7b      	adds	r3, r7, #1
 8023ccc:	9310      	str	r3, [sp, #64]	; 0x40
            break;
 8023cce:	e79e      	b.n	8023c0e <_lv_txt_get_next_line+0x17a>
 8023cd0:	9e08      	ldr	r6, [sp, #32]
 8023cd2:	e79c      	b.n	8023c0e <_lv_txt_get_next_line+0x17a>
 8023cd4:	9e08      	ldr	r6, [sp, #32]
 8023cd6:	e79a      	b.n	8023c0e <_lv_txt_get_next_line+0x17a>
 8023cd8:	9e08      	ldr	r6, [sp, #32]
 8023cda:	e798      	b.n	8023c0e <_lv_txt_get_next_line+0x17a>
 8023cdc:	9e08      	ldr	r6, [sp, #32]
 8023cde:	e796      	b.n	8023c0e <_lv_txt_get_next_line+0x17a>
 8023ce0:	9e08      	ldr	r6, [sp, #32]
 8023ce2:	e794      	b.n	8023c0e <_lv_txt_get_next_line+0x17a>
    if(used_width != NULL) {
 8023ce4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023ce6:	b113      	cbz	r3, 8023cee <_lv_txt_get_next_line+0x25a>
        *used_width = line_w;
 8023ce8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023cea:	9a05      	ldr	r2, [sp, #20]
 8023cec:	801a      	strh	r2, [r3, #0]
    return i;
 8023cee:	9810      	ldr	r0, [sp, #64]	; 0x40
}
 8023cf0:	b013      	add	sp, #76	; 0x4c
 8023cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
 8023cf6:	2000      	movs	r0, #0
 8023cf8:	e7fa      	b.n	8023cf0 <_lv_txt_get_next_line+0x25c>
    if(txt[0] == '\0') return 0;
 8023cfa:	2000      	movs	r0, #0
 8023cfc:	e7f8      	b.n	8023cf0 <_lv_txt_get_next_line+0x25c>
    if(font == NULL) return 0;
 8023cfe:	2000      	movs	r0, #0
 8023d00:	e7f6      	b.n	8023cf0 <_lv_txt_get_next_line+0x25c>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8023d02:	2000      	movs	r0, #0
 8023d04:	e706      	b.n	8023b14 <_lv_txt_get_next_line+0x80>
 8023d06:	bf00      	nop
 8023d08:	08032ed8 	.word	0x08032ed8
 8023d0c:	2000075c 	.word	0x2000075c

08023d10 <_lv_txt_ins>:
    if(txt_buf == NULL || ins_txt == NULL) return;
 8023d10:	b390      	cbz	r0, 8023d78 <_lv_txt_ins+0x68>
{
 8023d12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d16:	4689      	mov	r9, r1
 8023d18:	4616      	mov	r6, r2
 8023d1a:	4604      	mov	r4, r0
    if(txt_buf == NULL || ins_txt == NULL) return;
 8023d1c:	b352      	cbz	r2, 8023d74 <_lv_txt_ins+0x64>
    size_t ins_len = strlen(ins_txt);
 8023d1e:	4610      	mov	r0, r2
 8023d20:	f7dc fa8a 	bl	8000238 <strlen>
    if(ins_len == 0) return;
 8023d24:	4607      	mov	r7, r0
 8023d26:	b328      	cbz	r0, 8023d74 <_lv_txt_ins+0x64>
    size_t old_len = strlen(txt_buf);
 8023d28:	4620      	mov	r0, r4
 8023d2a:	f7dc fa85 	bl	8000238 <strlen>
 8023d2e:	4605      	mov	r5, r0
    size_t new_len = ins_len + old_len;
 8023d30:	eb00 0807 	add.w	r8, r0, r7
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8023d34:	4b11      	ldr	r3, [pc, #68]	; (8023d7c <_lv_txt_ins+0x6c>)
 8023d36:	681b      	ldr	r3, [r3, #0]
 8023d38:	4649      	mov	r1, r9
 8023d3a:	4620      	mov	r0, r4
 8023d3c:	4798      	blx	r3
    for(i = new_len; i >= pos + ins_len; i--) {
 8023d3e:	eb07 0c00 	add.w	ip, r7, r0
 8023d42:	45e0      	cmp	r8, ip
 8023d44:	d30d      	bcc.n	8023d62 <_lv_txt_ins+0x52>
 8023d46:	1961      	adds	r1, r4, r5
 8023d48:	f108 0201 	add.w	r2, r8, #1
 8023d4c:	4422      	add	r2, r4
 8023d4e:	eba7 0e04 	sub.w	lr, r7, r4
        txt_buf[i] = txt_buf[i - ins_len];
 8023d52:	f811 5901 	ldrb.w	r5, [r1], #-1
 8023d56:	f802 5d01 	strb.w	r5, [r2, #-1]!
    for(i = new_len; i >= pos + ins_len; i--) {
 8023d5a:	eb0e 0501 	add.w	r5, lr, r1
 8023d5e:	45ac      	cmp	ip, r5
 8023d60:	d9f7      	bls.n	8023d52 <_lv_txt_ins+0x42>
    lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
 8023d62:	1823      	adds	r3, r4, r0
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 8023d64:	1e72      	subs	r2, r6, #1
 8023d66:	441f      	add	r7, r3
        *d8 = *s8;
 8023d68:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8023d6c:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
 8023d70:	42bb      	cmp	r3, r7
 8023d72:	d1f9      	bne.n	8023d68 <_lv_txt_ins+0x58>
}
 8023d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d78:	4770      	bx	lr
 8023d7a:	bf00      	nop
 8023d7c:	20000754 	.word	0x20000754

08023d80 <_lv_txt_cut>:
    if(txt == NULL) return;
 8023d80:	b318      	cbz	r0, 8023dca <_lv_txt_cut+0x4a>
{
 8023d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d86:	460c      	mov	r4, r1
 8023d88:	4690      	mov	r8, r2
 8023d8a:	4605      	mov	r5, r0
    size_t old_len = strlen(txt);
 8023d8c:	f7dc fa54 	bl	8000238 <strlen>
 8023d90:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8023d92:	4f0e      	ldr	r7, [pc, #56]	; (8023dcc <_lv_txt_cut+0x4c>)
 8023d94:	683b      	ldr	r3, [r7, #0]
 8023d96:	4621      	mov	r1, r4
 8023d98:	4628      	mov	r0, r5
 8023d9a:	4798      	blx	r3
 8023d9c:	4604      	mov	r4, r0
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 8023d9e:	683b      	ldr	r3, [r7, #0]
 8023da0:	4641      	mov	r1, r8
 8023da2:	1828      	adds	r0, r5, r0
 8023da4:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 8023da6:	eba6 0c00 	sub.w	ip, r6, r0
 8023daa:	4564      	cmp	r4, ip
 8023dac:	d80b      	bhi.n	8023dc6 <_lv_txt_cut+0x46>
 8023dae:	1823      	adds	r3, r4, r0
 8023db0:	442b      	add	r3, r5
 8023db2:	1e62      	subs	r2, r4, #1
 8023db4:	442a      	add	r2, r5
 8023db6:	4428      	add	r0, r5
        txt[i] = txt[i + len];
 8023db8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8023dbc:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(i = pos; i <= old_len - len; i++) {
 8023dc0:	1a19      	subs	r1, r3, r0
 8023dc2:	458c      	cmp	ip, r1
 8023dc4:	d2f8      	bcs.n	8023db8 <_lv_txt_cut+0x38>
}
 8023dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023dca:	4770      	bx	lr
 8023dcc:	20000754 	.word	0x20000754

08023dd0 <_lv_txt_set_text_vfmt>:
{
 8023dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023dd4:	b082      	sub	sp, #8
 8023dd6:	4605      	mov	r5, r0
 8023dd8:	460c      	mov	r4, r1
    va_copy(ap_copy, ap);
 8023dda:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 8023ddc:	460b      	mov	r3, r1
 8023dde:	4602      	mov	r2, r0
 8023de0:	2100      	movs	r1, #0
 8023de2:	4608      	mov	r0, r1
 8023de4:	f7fe fd26 	bl	8022834 <lv_vsnprintf>
 8023de8:	4606      	mov	r6, r0
    text = lv_mem_alloc(len + 1);
 8023dea:	f100 0801 	add.w	r8, r0, #1
 8023dee:	4640      	mov	r0, r8
 8023df0:	f7fd fd3a 	bl	8021868 <lv_mem_alloc>
    LV_ASSERT_MALLOC(text);
 8023df4:	b158      	cbz	r0, 8023e0e <_lv_txt_set_text_vfmt+0x3e>
 8023df6:	4607      	mov	r7, r0
    text[len] = 0; /*Ensure NULL termination*/
 8023df8:	2300      	movs	r3, #0
 8023dfa:	5583      	strb	r3, [r0, r6]
    lv_vsnprintf(text, len + 1, fmt, ap);
 8023dfc:	4623      	mov	r3, r4
 8023dfe:	462a      	mov	r2, r5
 8023e00:	4641      	mov	r1, r8
 8023e02:	f7fe fd17 	bl	8022834 <lv_vsnprintf>
}
 8023e06:	4638      	mov	r0, r7
 8023e08:	b002      	add	sp, #8
 8023e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(text);
 8023e0e:	e7fe      	b.n	8023e0e <_lv_txt_set_text_vfmt+0x3e>

08023e10 <_lv_txt_encoded_letter_next_2>:
{
 8023e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e12:	4607      	mov	r7, r0
 8023e14:	460e      	mov	r6, r1
 8023e16:	4615      	mov	r5, r2
 8023e18:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 8023e1a:	4b07      	ldr	r3, [pc, #28]	; (8023e38 <_lv_txt_encoded_letter_next_2+0x28>)
 8023e1c:	681b      	ldr	r3, [r3, #0]
 8023e1e:	4621      	mov	r1, r4
 8023e20:	4798      	blx	r3
 8023e22:	6030      	str	r0, [r6, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8023e24:	b128      	cbz	r0, 8023e32 <_lv_txt_encoded_letter_next_2+0x22>
 8023e26:	6820      	ldr	r0, [r4, #0]
 8023e28:	4b03      	ldr	r3, [pc, #12]	; (8023e38 <_lv_txt_encoded_letter_next_2+0x28>)
 8023e2a:	681b      	ldr	r3, [r3, #0]
 8023e2c:	2100      	movs	r1, #0
 8023e2e:	4438      	add	r0, r7
 8023e30:	4798      	blx	r3
 8023e32:	6028      	str	r0, [r5, #0]
}
 8023e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023e36:	bf00      	nop
 8023e38:	2000075c 	.word	0x2000075c

08023e3c <lv_txt_get_width>:
{
 8023e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023e40:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
 8023e42:	2800      	cmp	r0, #0
 8023e44:	d03c      	beq.n	8023ec0 <lv_txt_get_width+0x84>
 8023e46:	460d      	mov	r5, r1
 8023e48:	4614      	mov	r4, r2
 8023e4a:	461e      	mov	r6, r3
 8023e4c:	4607      	mov	r7, r0
    if(font == NULL) return 0;
 8023e4e:	2a00      	cmp	r2, #0
 8023e50:	d039      	beq.n	8023ec6 <lv_txt_get_width+0x8a>
    if(txt[0] == '\0') return 0;
 8023e52:	7803      	ldrb	r3, [r0, #0]
 8023e54:	2b00      	cmp	r3, #0
 8023e56:	d039      	beq.n	8023ecc <lv_txt_get_width+0x90>
    uint32_t i                   = 0;
 8023e58:	2300      	movs	r3, #0
 8023e5a:	9303      	str	r3, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8023e5c:	f88d 300b 	strb.w	r3, [sp, #11]
    if(length != 0) {
 8023e60:	2900      	cmp	r1, #0
 8023e62:	d039      	beq.n	8023ed8 <lv_txt_get_width+0x9c>
    lv_coord_t width             = 0;
 8023e64:	4699      	mov	r9, r3
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8023e66:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 8023e6a:	f008 0801 	and.w	r8, r8, #1
 8023e6e:	e00e      	b.n	8023e8e <lv_txt_get_width+0x52>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8023e70:	9a01      	ldr	r2, [sp, #4]
 8023e72:	9900      	ldr	r1, [sp, #0]
 8023e74:	4620      	mov	r0, r4
 8023e76:	f7fc f850 	bl	801ff1a <lv_font_get_glyph_width>
            if(char_width > 0) {
 8023e7a:	b203      	sxth	r3, r0
 8023e7c:	2b00      	cmp	r3, #0
 8023e7e:	dd03      	ble.n	8023e88 <lv_txt_get_width+0x4c>
                width += letter_space;
 8023e80:	44b1      	add	r9, r6
 8023e82:	4448      	add	r0, r9
 8023e84:	fa0f f980 	sxth.w	r9, r0
        while(i < length) {
 8023e88:	9b03      	ldr	r3, [sp, #12]
 8023e8a:	42ab      	cmp	r3, r5
 8023e8c:	d210      	bcs.n	8023eb0 <lv_txt_get_width+0x74>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8023e8e:	ab03      	add	r3, sp, #12
 8023e90:	aa01      	add	r2, sp, #4
 8023e92:	4669      	mov	r1, sp
 8023e94:	4638      	mov	r0, r7
 8023e96:	f7ff ffbb 	bl	8023e10 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8023e9a:	f1b8 0f00 	cmp.w	r8, #0
 8023e9e:	d0e7      	beq.n	8023e70 <lv_txt_get_width+0x34>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8023ea0:	9900      	ldr	r1, [sp, #0]
 8023ea2:	f10d 000b 	add.w	r0, sp, #11
 8023ea6:	f7ff fdd1 	bl	8023a4c <_lv_txt_is_cmd>
 8023eaa:	2800      	cmp	r0, #0
 8023eac:	d0e0      	beq.n	8023e70 <lv_txt_get_width+0x34>
 8023eae:	e7eb      	b.n	8023e88 <lv_txt_get_width+0x4c>
        if(width > 0) {
 8023eb0:	f1b9 0f00 	cmp.w	r9, #0
 8023eb4:	dd0c      	ble.n	8023ed0 <lv_txt_get_width+0x94>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8023eb6:	eba9 0006 	sub.w	r0, r9, r6
 8023eba:	fa0f f980 	sxth.w	r9, r0
 8023ebe:	e007      	b.n	8023ed0 <lv_txt_get_width+0x94>
    if(txt == NULL) return 0;
 8023ec0:	f04f 0900 	mov.w	r9, #0
 8023ec4:	e004      	b.n	8023ed0 <lv_txt_get_width+0x94>
    if(font == NULL) return 0;
 8023ec6:	f04f 0900 	mov.w	r9, #0
 8023eca:	e001      	b.n	8023ed0 <lv_txt_get_width+0x94>
    if(txt[0] == '\0') return 0;
 8023ecc:	f04f 0900 	mov.w	r9, #0
}
 8023ed0:	4648      	mov	r0, r9
 8023ed2:	b005      	add	sp, #20
 8023ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_coord_t width             = 0;
 8023ed8:	f04f 0900 	mov.w	r9, #0
 8023edc:	e7f8      	b.n	8023ed0 <lv_txt_get_width+0x94>

08023ede <lv_txt_get_size>:
{
 8023ede:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ee2:	b087      	sub	sp, #28
 8023ee4:	4604      	mov	r4, r0
 8023ee6:	4698      	mov	r8, r3
 8023ee8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8023eec:	9004      	str	r0, [sp, #16]
 8023eee:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8023ef2:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    size_res->x = 0;
 8023ef6:	2300      	movs	r3, #0
 8023ef8:	8023      	strh	r3, [r4, #0]
    size_res->y = 0;
 8023efa:	8063      	strh	r3, [r4, #2]
    if(text == NULL) return;
 8023efc:	2900      	cmp	r1, #0
 8023efe:	d053      	beq.n	8023fa8 <lv_txt_get_size+0xca>
 8023f00:	4617      	mov	r7, r2
 8023f02:	4689      	mov	r9, r1
    if(font == NULL) return;
 8023f04:	2a00      	cmp	r2, #0
 8023f06:	d04f      	beq.n	8023fa8 <lv_txt_get_size+0xca>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8023f08:	f01a 0f02 	tst.w	sl, #2
 8023f0c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8023f10:	bf18      	it	ne
 8023f12:	469b      	movne	fp, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8023f14:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8023f18:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
 8023f1a:	b29a      	uxth	r2, r3
    while(text[line_start] != '\0') {
 8023f1c:	780b      	ldrb	r3, [r1, #0]
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	d040      	beq.n	8023fa4 <lv_txt_get_size+0xc6>
 8023f22:	460e      	mov	r6, r1
    uint32_t line_start     = 0;
 8023f24:	2500      	movs	r5, #0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8023f26:	1813      	adds	r3, r2, r0
 8023f28:	9302      	str	r3, [sp, #8]
 8023f2a:	b29b      	uxth	r3, r3
 8023f2c:	9303      	str	r3, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8023f2e:	f8cd a004 	str.w	sl, [sp, #4]
 8023f32:	2300      	movs	r3, #0
 8023f34:	9300      	str	r3, [sp, #0]
 8023f36:	465b      	mov	r3, fp
 8023f38:	4642      	mov	r2, r8
 8023f3a:	4639      	mov	r1, r7
 8023f3c:	4630      	mov	r0, r6
 8023f3e:	f7ff fda9 	bl	8023a94 <_lv_txt_get_next_line>
 8023f42:	4601      	mov	r1, r0
 8023f44:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 8023f46:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8023f4a:	9a02      	ldr	r2, [sp, #8]
 8023f4c:	441a      	add	r2, r3
 8023f4e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8023f52:	d229      	bcs.n	8023fa8 <lv_txt_get_size+0xca>
            size_res->y += line_space;
 8023f54:	9a03      	ldr	r2, [sp, #12]
 8023f56:	4413      	add	r3, r2
 8023f58:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8023f5a:	f8cd a000 	str.w	sl, [sp]
 8023f5e:	4643      	mov	r3, r8
 8023f60:	463a      	mov	r2, r7
 8023f62:	4630      	mov	r0, r6
 8023f64:	f7ff ff6a 	bl	8023e3c <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8023f68:	f9b4 3000 	ldrsh.w	r3, [r4]
 8023f6c:	4283      	cmp	r3, r0
 8023f6e:	bfb8      	it	lt
 8023f70:	4603      	movlt	r3, r0
 8023f72:	8023      	strh	r3, [r4, #0]
    while(text[line_start] != '\0') {
 8023f74:	eb09 0605 	add.w	r6, r9, r5
 8023f78:	f819 3005 	ldrb.w	r3, [r9, r5]
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	d1d6      	bne.n	8023f2e <lv_txt_get_size+0x50>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8023f80:	b14d      	cbz	r5, 8023f96 <lv_txt_get_size+0xb8>
 8023f82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8023f86:	2b0a      	cmp	r3, #10
 8023f88:	d001      	beq.n	8023f8e <lv_txt_get_size+0xb0>
 8023f8a:	2b0d      	cmp	r3, #13
 8023f8c:	d103      	bne.n	8023f96 <lv_txt_get_size+0xb8>
        size_res->y += letter_height + line_space;
 8023f8e:	8863      	ldrh	r3, [r4, #2]
 8023f90:	9a03      	ldr	r2, [sp, #12]
 8023f92:	441a      	add	r2, r3
 8023f94:	8062      	strh	r2, [r4, #2]
    if(size_res->y == 0)
 8023f96:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8023f9a:	b11b      	cbz	r3, 8023fa4 <lv_txt_get_size+0xc6>
        size_res->y -= line_space;
 8023f9c:	9a04      	ldr	r2, [sp, #16]
 8023f9e:	1a9b      	subs	r3, r3, r2
 8023fa0:	8063      	strh	r3, [r4, #2]
 8023fa2:	e001      	b.n	8023fa8 <lv_txt_get_size+0xca>
        size_res->y = letter_height;
 8023fa4:	9b05      	ldr	r3, [sp, #20]
 8023fa6:	8063      	strh	r3, [r4, #2]
}
 8023fa8:	b007      	add	sp, #28
 8023faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023fae <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8023fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023fb2:	4681      	mov	r9, r0
 8023fb4:	4688      	mov	r8, r1
 8023fb6:	461f      	mov	r7, r3
 8023fb8:	f8dd a020 	ldr.w	sl, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8023fbc:	4614      	mov	r4, r2
 8023fbe:	b94a      	cbnz	r2, 8023fd4 <_lv_utils_bsearch+0x26>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8023fc0:	2600      	movs	r6, #0
 8023fc2:	e014      	b.n	8023fee <_lv_utils_bsearch+0x40>
            n    = (n / 2) - ((n & 1) == 0);
 8023fc4:	f084 0401 	eor.w	r4, r4, #1
 8023fc8:	f004 0401 	and.w	r4, r4, #1
 8023fcc:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
 8023fce:	eb06 0807 	add.w	r8, r6, r7
    for(middle = base; n != 0;) {
 8023fd2:	b15c      	cbz	r4, 8023fec <_lv_utils_bsearch+0x3e>
        middle += (n / 2) * size;
 8023fd4:	0865      	lsrs	r5, r4, #1
 8023fd6:	fb07 8605 	mla	r6, r7, r5, r8
        if((c = (*cmp)(key, middle)) > 0) {
 8023fda:	4631      	mov	r1, r6
 8023fdc:	4648      	mov	r0, r9
 8023fde:	47d0      	blx	sl
 8023fe0:	2800      	cmp	r0, #0
 8023fe2:	dcef      	bgt.n	8023fc4 <_lv_utils_bsearch+0x16>
        else if(c < 0) {
 8023fe4:	2800      	cmp	r0, #0
 8023fe6:	da02      	bge.n	8023fee <_lv_utils_bsearch+0x40>
            n /= 2;
 8023fe8:	462c      	mov	r4, r5
 8023fea:	e7f2      	b.n	8023fd2 <_lv_utils_bsearch+0x24>
    return NULL;
 8023fec:	2600      	movs	r6, #0
}
 8023fee:	4630      	mov	r0, r6
 8023ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08023ff4 <get_angle>:
}

static lv_coord_t get_angle(const lv_obj_t * obj)
{
    lv_arc_t * arc = (lv_arc_t *)obj;
    uint16_t angle = arc->rotation;
 8023ff4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 8023ff6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8023ffa:	f013 0306 	ands.w	r3, r3, #6
 8023ffe:	d104      	bne.n	802400a <get_angle+0x16>
        angle += arc->indic_angle_end;
 8024000:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8024002:	441a      	add	r2, r3
 8024004:	b292      	uxth	r2, r2
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
        else angle += angle_midpoint;
    }

    return angle;
}
 8024006:	b210      	sxth	r0, r2
 8024008:	4770      	bx	lr
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 802400a:	2b04      	cmp	r3, #4
 802400c:	d020      	beq.n	8024050 <get_angle+0x5c>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 802400e:	2b02      	cmp	r3, #2
 8024010:	d1f9      	bne.n	8024006 <get_angle+0x12>
{
 8024012:	b500      	push	{lr}
        int16_t bg_end = arc->bg_angle_end;
 8024014:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8024016:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8024018:	4299      	cmp	r1, r3
 802401a:	bf3c      	itt	cc
 802401c:	f501 71b4 	addcc.w	r1, r1, #360	; 0x168
 8024020:	b289      	uxthcc	r1, r1
 8024022:	b209      	sxth	r1, r1
        int16_t indic_end = arc->indic_angle_end;
 8024024:	f8b0 c028 	ldrh.w	ip, [r0, #40]	; 0x28
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 8024028:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 802402a:	4584      	cmp	ip, r0
 802402c:	bf3a      	itte	cc
 802402e:	f50c 7eb4 	addcc.w	lr, ip, #360	; 0x168
 8024032:	fa1f fe8e 	uxthcc.w	lr, lr
 8024036:	46e6      	movcs	lr, ip
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 8024038:	440b      	add	r3, r1
 802403a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802403e:	1059      	asrs	r1, r3, #1
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 8024040:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8024044:	da08      	bge.n	8024058 <get_angle+0x64>
 8024046:	4402      	add	r2, r0
 8024048:	b292      	uxth	r2, r2
}
 802404a:	b210      	sxth	r0, r2
 802404c:	f85d fb04 	ldr.w	pc, [sp], #4
        angle += arc->indic_angle_start;
 8024050:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8024052:	441a      	add	r2, r3
 8024054:	b292      	uxth	r2, r2
 8024056:	e7d6      	b.n	8024006 <get_angle+0x12>
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 8024058:	fa0f fe8e 	sxth.w	lr, lr
 802405c:	458e      	cmp	lr, r1
 802405e:	bfcc      	ite	gt
 8024060:	4462      	addgt	r2, ip
        else angle += angle_midpoint;
 8024062:	1852      	addle	r2, r2, r1
 8024064:	b292      	uxth	r2, r2
 8024066:	e7f0      	b.n	802404a <get_angle+0x56>

08024068 <get_center>:
{
 8024068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802406c:	b083      	sub	sp, #12
 802406e:	4604      	mov	r4, r0
 8024070:	460e      	mov	r6, r1
 8024072:	4617      	mov	r7, r2
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024074:	2212      	movs	r2, #18
 8024076:	2100      	movs	r1, #0
 8024078:	f7e6 fbb6 	bl	800a7e8 <lv_obj_get_style_prop>
 802407c:	4605      	mov	r5, r0
 802407e:	9001      	str	r0, [sp, #4]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8024080:	2213      	movs	r2, #19
 8024082:	2100      	movs	r1, #0
 8024084:	4620      	mov	r0, r4
 8024086:	f7e6 fbaf 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802408a:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802408e:	2210      	movs	r2, #16
 8024090:	2100      	movs	r1, #0
 8024092:	4620      	mov	r0, r4
 8024094:	f7e6 fba8 	bl	800a7e8 <lv_obj_get_style_prop>
 8024098:	4682      	mov	sl, r0
 802409a:	9000      	str	r0, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802409c:	2211      	movs	r2, #17
 802409e:	2100      	movs	r1, #0
 80240a0:	4620      	mov	r0, r4
 80240a2:	f7e6 fba1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80240a6:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80240aa:	4620      	mov	r0, r4
 80240ac:	f7e3 fd1d 	bl	8007aea <lv_obj_get_width>
 80240b0:	fa0f fb85 	sxth.w	fp, r5
 80240b4:	eba0 050b 	sub.w	r5, r0, fp
 80240b8:	eba5 0509 	sub.w	r5, r5, r9
 80240bc:	4620      	mov	r0, r4
 80240be:	f7e3 fd1a 	bl	8007af6 <lv_obj_get_height>
 80240c2:	fa0f fa8a 	sxth.w	sl, sl
 80240c6:	eba0 000a 	sub.w	r0, r0, sl
 80240ca:	eba0 0008 	sub.w	r0, r0, r8
 80240ce:	4285      	cmp	r5, r0
 80240d0:	da1d      	bge.n	802410e <get_center+0xa6>
 80240d2:	4620      	mov	r0, r4
 80240d4:	f7e3 fd09 	bl	8007aea <lv_obj_get_width>
 80240d8:	eba0 0b0b 	sub.w	fp, r0, fp
 80240dc:	ebab 0909 	sub.w	r9, fp, r9
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 80240e0:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80240e4:	f349 084f 	sbfx	r8, r9, #1, #16
    center->x = obj->coords.x1 + r + left_bg;
 80240e8:	fa1f f388 	uxth.w	r3, r8
 80240ec:	8aa0      	ldrh	r0, [r4, #20]
 80240ee:	9a01      	ldr	r2, [sp, #4]
 80240f0:	4402      	add	r2, r0
 80240f2:	4610      	mov	r0, r2
 80240f4:	4418      	add	r0, r3
 80240f6:	8030      	strh	r0, [r6, #0]
    center->y = obj->coords.y1 + r + top_bg;
 80240f8:	8ae0      	ldrh	r0, [r4, #22]
 80240fa:	9a00      	ldr	r2, [sp, #0]
 80240fc:	4402      	add	r2, r0
 80240fe:	4413      	add	r3, r2
 8024100:	8073      	strh	r3, [r6, #2]
    if(arc_r) *arc_r = r;
 8024102:	b10f      	cbz	r7, 8024108 <get_center+0xa0>
 8024104:	f8a7 8000 	strh.w	r8, [r7]
}
 8024108:	b003      	add	sp, #12
 802410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 802410e:	4620      	mov	r0, r4
 8024110:	f7e3 fcf1 	bl	8007af6 <lv_obj_get_height>
 8024114:	eba0 0a0a 	sub.w	sl, r0, sl
 8024118:	ebaa 0808 	sub.w	r8, sl, r8
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 802411c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8024120:	f348 084f 	sbfx	r8, r8, #1, #16
 8024124:	e7e0      	b.n	80240e8 <get_center+0x80>

08024126 <get_knob_area>:


static void get_knob_area(lv_obj_t * obj, const lv_point_t * center, lv_coord_t r, lv_area_t * knob_area)
{
 8024126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802412a:	b083      	sub	sp, #12
 802412c:	4680      	mov	r8, r0
 802412e:	468a      	mov	sl, r1
 8024130:	4615      	mov	r5, r2
 8024132:	4699      	mov	r9, r3
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8024134:	2250      	movs	r2, #80	; 0x50
 8024136:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802413a:	f7e6 fb55 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802413e:	b203      	sxth	r3, r0
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
    lv_coord_t indic_width_half = indic_width / 2;
 8024140:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8024144:	441c      	add	r4, r3
    r -= indic_width_half;
 8024146:	f3c4 044f 	ubfx	r4, r4, #1, #16
 802414a:	1b2d      	subs	r5, r5, r4
 802414c:	b2ad      	uxth	r5, r5

    lv_coord_t angle = get_angle(obj);
 802414e:	4640      	mov	r0, r8
 8024150:	f7ff ff50 	bl	8023ff4 <get_angle>
 8024154:	4607      	mov	r7, r0
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8024156:	b22d      	sxth	r5, r5
 8024158:	305a      	adds	r0, #90	; 0x5a
 802415a:	b200      	sxth	r0, r0
 802415c:	f7fd fa78 	bl	8021650 <lv_trigo_sin>
 8024160:	4606      	mov	r6, r0
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8024162:	4638      	mov	r0, r7
 8024164:	f7fd fa74 	bl	8021650 <lv_trigo_sin>
 8024168:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802416a:	2212      	movs	r2, #18
 802416c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024170:	4640      	mov	r0, r8
 8024172:	f7e6 fb39 	bl	800a7e8 <lv_obj_get_style_prop>
 8024176:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8024178:	2213      	movs	r2, #19
 802417a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802417e:	4640      	mov	r0, r8
 8024180:	f7e6 fb32 	bl	800a7e8 <lv_obj_get_style_prop>
 8024184:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024186:	2210      	movs	r2, #16
 8024188:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802418c:	4640      	mov	r0, r8
 802418e:	f7e6 fb2b 	bl	800a7e8 <lv_obj_get_style_prop>
 8024192:	9000      	str	r0, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024194:	2211      	movs	r2, #17
 8024196:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802419a:	4640      	mov	r0, r8
 802419c:	f7e6 fb24 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 80241a0:	fb05 f606 	mul.w	r6, r5, r6
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 80241a4:	f3c6 36cf 	ubfx	r6, r6, #15, #16
 80241a8:	eb04 030b 	add.w	r3, r4, fp
 80241ac:	f8ba b000 	ldrh.w	fp, [sl]
 80241b0:	ebab 0b03 	sub.w	fp, fp, r3
 80241b4:	44b3      	add	fp, r6
 80241b6:	f8a9 b000 	strh.w	fp, [r9]
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 80241ba:	4427      	add	r7, r4
 80241bc:	f8ba 3000 	ldrh.w	r3, [sl]
 80241c0:	441f      	add	r7, r3
 80241c2:	443e      	add	r6, r7
 80241c4:	f8a9 6004 	strh.w	r6, [r9, #4]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 80241c8:	9b01      	ldr	r3, [sp, #4]
 80241ca:	fb05 f303 	mul.w	r3, r5, r3
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 80241ce:	f3c3 35cf 	ubfx	r5, r3, #15, #16
 80241d2:	9a00      	ldr	r2, [sp, #0]
 80241d4:	4422      	add	r2, r4
 80241d6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 80241da:	1a9b      	subs	r3, r3, r2
 80241dc:	442b      	add	r3, r5
 80241de:	f8a9 3002 	strh.w	r3, [r9, #2]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 80241e2:	4404      	add	r4, r0
 80241e4:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80241e8:	4404      	add	r4, r0
 80241ea:	4425      	add	r5, r4
 80241ec:	f8a9 5006 	strh.w	r5, [r9, #6]
}
 80241f0:	b003      	add	sp, #12
 80241f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080241f6 <lv_arc_constructor>:
{
 80241f6:	b510      	push	{r4, lr}
 80241f8:	460c      	mov	r4, r1
    arc->rotation = 0;
 80241fa:	2200      	movs	r2, #0
 80241fc:	848a      	strh	r2, [r1, #36]	; 0x24
    arc->bg_angle_start = 135;
 80241fe:	2387      	movs	r3, #135	; 0x87
 8024200:	854b      	strh	r3, [r1, #42]	; 0x2a
    arc->bg_angle_end   = 45;
 8024202:	212d      	movs	r1, #45	; 0x2d
 8024204:	85a1      	strh	r1, [r4, #44]	; 0x2c
    arc->indic_angle_start = 135;
 8024206:	84e3      	strh	r3, [r4, #38]	; 0x26
    arc->indic_angle_end   = 270;
 8024208:	f44f 7387 	mov.w	r3, #270	; 0x10e
 802420c:	8523      	strh	r3, [r4, #40]	; 0x28
    arc->type = LV_ARC_MODE_NORMAL;
 802420e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    arc->value = VALUE_UNSET;
 8024212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8024216:	85e1      	strh	r1, [r4, #46]	; 0x2e
    arc->min_close = 1;
 8024218:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    arc->min_value = 0;
 802421c:	8622      	strh	r2, [r4, #48]	; 0x30
    arc->max_value = 100;
 802421e:	2164      	movs	r1, #100	; 0x64
 8024220:	8661      	strh	r1, [r4, #50]	; 0x32
    arc->dragging = false;
 8024222:	f043 0308 	orr.w	r3, r3, #8
 8024226:	f362 0300 	bfi	r3, r2, #0, #1
 802422a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    arc->chg_rate = 720;
 802422e:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 8024232:	86e3      	strh	r3, [r4, #54]	; 0x36
    arc->last_tick = lv_tick_get();
 8024234:	f7fc f979 	bl	802052a <lv_tick_get>
 8024238:	63a0      	str	r0, [r4, #56]	; 0x38
    arc->last_angle = arc->indic_angle_end;
 802423a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 802423c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 802423e:	2102      	movs	r1, #2
 8024240:	4620      	mov	r0, r4
 8024242:	f7e2 fb35 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN | LV_OBJ_FLAG_SCROLLABLE);
 8024246:	f44f 7144 	mov.w	r1, #784	; 0x310
 802424a:	4620      	mov	r0, r4
 802424c:	f7e2 fb6a 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8024250:	210d      	movs	r1, #13
 8024252:	4620      	mov	r0, r4
 8024254:	f7e4 f8cb 	bl	80083ee <lv_obj_set_ext_click_area>
}
 8024258:	bd10      	pop	{r4, pc}

0802425a <inv_arc_area>:
{
 802425a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802425e:	b088      	sub	sp, #32
 8024260:	4606      	mov	r6, r0
 8024262:	460c      	mov	r4, r1
 8024264:	4615      	mov	r5, r2
 8024266:	461f      	mov	r7, r3
    if(lv_obj_is_visible(obj) == false) return;
 8024268:	f7e4 f8a0 	bl	80083ac <lv_obj_is_visible>
 802426c:	2800      	cmp	r0, #0
 802426e:	d047      	beq.n	8024300 <inv_arc_area+0xa6>
    if(start_angle == end_angle) return;
 8024270:	42ac      	cmp	r4, r5
 8024272:	d045      	beq.n	8024300 <inv_arc_area+0xa6>
    if(start_angle > 360) start_angle -= 360;
 8024274:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8024278:	bf84      	itt	hi
 802427a:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 802427e:	b2a4      	uxthhi	r4, r4
    if(end_angle > 360) end_angle -= 360;
 8024280:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8024284:	bf84      	itt	hi
 8024286:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
 802428a:	b2ad      	uxthhi	r5, r5
    start_angle += arc->rotation;
 802428c:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 802428e:	4414      	add	r4, r2
 8024290:	b2a4      	uxth	r4, r4
    end_angle += arc->rotation;
 8024292:	442a      	add	r2, r5
 8024294:	fa1f f882 	uxth.w	r8, r2
    if(start_angle > 360) start_angle -= 360;
 8024298:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 802429c:	bf84      	itt	hi
 802429e:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 80242a2:	b2a4      	uxthhi	r4, r4
    if(end_angle > 360) end_angle -= 360;
 80242a4:	f5b8 7fb4 	cmp.w	r8, #360	; 0x168
 80242a8:	bf84      	itt	hi
 80242aa:	f5a8 72b4 	subhi.w	r2, r8, #360	; 0x168
 80242ae:	fa1f f882 	uxthhi.w	r8, r2
    get_center(obj, &c, &r);
 80242b2:	f10d 021e 	add.w	r2, sp, #30
 80242b6:	a906      	add	r1, sp, #24
 80242b8:	4630      	mov	r0, r6
 80242ba:	f7ff fed5 	bl	8024068 <get_center>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80242be:	2250      	movs	r2, #80	; 0x50
 80242c0:	4639      	mov	r1, r7
 80242c2:	4630      	mov	r0, r6
 80242c4:	f7e6 fa90 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80242c8:	b205      	sxth	r5, r0
}

static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 80242ca:	2251      	movs	r2, #81	; 0x51
 80242cc:	4639      	mov	r1, r7
 80242ce:	4630      	mov	r0, r6
 80242d0:	f7e6 fa8a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (bool)v.num;
 80242d4:	3800      	subs	r0, #0
 80242d6:	bf18      	it	ne
 80242d8:	2001      	movne	r0, #1
    lv_draw_arc_get_area(c.x, c.y, r, start_angle, end_angle, w, rounded, &inv_area);
 80242da:	af04      	add	r7, sp, #16
 80242dc:	9703      	str	r7, [sp, #12]
 80242de:	9002      	str	r0, [sp, #8]
 80242e0:	9501      	str	r5, [sp, #4]
 80242e2:	f8cd 8000 	str.w	r8, [sp]
 80242e6:	4623      	mov	r3, r4
 80242e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80242ec:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80242f0:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80242f4:	f7e8 fd44 	bl	800cd80 <lv_draw_arc_get_area>
    lv_obj_invalidate_area(obj, &inv_area);
 80242f8:	4639      	mov	r1, r7
 80242fa:	4630      	mov	r0, r6
 80242fc:	f7e3 fe18 	bl	8007f30 <lv_obj_invalidate_area>
}
 8024300:	b008      	add	sp, #32
 8024302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024306 <inv_knob_area>:
{
 8024306:	b510      	push	{r4, lr}
 8024308:	b084      	sub	sp, #16
 802430a:	4604      	mov	r4, r0
    get_center(obj, &c, &r);
 802430c:	f10d 020a 	add.w	r2, sp, #10
 8024310:	a903      	add	r1, sp, #12
 8024312:	f7ff fea9 	bl	8024068 <get_center>
    get_knob_area(obj, &c, r, &a);
 8024316:	466b      	mov	r3, sp
 8024318:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802431c:	a903      	add	r1, sp, #12
 802431e:	4620      	mov	r0, r4
 8024320:	f7ff ff01 	bl	8024126 <get_knob_area>
    lv_obj_invalidate_area(obj, &a);
 8024324:	4669      	mov	r1, sp
 8024326:	4620      	mov	r0, r4
 8024328:	f7e3 fe02 	bl	8007f30 <lv_obj_invalidate_area>
}
 802432c:	b004      	add	sp, #16
 802432e:	bd10      	pop	{r4, pc}

08024330 <lv_arc_set_start_angle>:
{
 8024330:	b538      	push	{r3, r4, r5, lr}
 8024332:	4604      	mov	r4, r0
 8024334:	460d      	mov	r5, r1
    if(start > 360) start -= 360;
 8024336:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 802433a:	bf84      	itt	hi
 802433c:	f5a1 75b4 	subhi.w	r5, r1, #360	; 0x168
 8024340:	b2ad      	uxthhi	r5, r5
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8024342:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8024344:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 8024346:	1a5a      	subs	r2, r3, r1
 8024348:	fa1f fc82 	uxth.w	ip, r2
 802434c:	b212      	sxth	r2, r2
    int16_t new_delta = arc->indic_angle_end - start;
 802434e:	1b5b      	subs	r3, r3, r5
 8024350:	b298      	uxth	r0, r3
 8024352:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8024354:	2a00      	cmp	r2, #0
 8024356:	bfbc      	itt	lt
 8024358:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 802435c:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 802435e:	2b00      	cmp	r3, #0
 8024360:	bfbc      	itt	lt
 8024362:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8024366:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024368:	1a98      	subs	r0, r3, r2
 802436a:	2800      	cmp	r0, #0
 802436c:	bfb8      	it	lt
 802436e:	4240      	neglt	r0, r0
 8024370:	28b4      	cmp	r0, #180	; 0xb4
 8024372:	dc0b      	bgt.n	802438c <lv_arc_set_start_angle+0x5c>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 8024374:	429a      	cmp	r2, r3
 8024376:	dc14      	bgt.n	80243a2 <lv_arc_set_start_angle+0x72>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->indic_angle_start, LV_PART_INDICATOR);
 8024378:	429a      	cmp	r2, r3
 802437a:	da0a      	bge.n	8024392 <lv_arc_set_start_angle+0x62>
 802437c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024380:	460a      	mov	r2, r1
 8024382:	4629      	mov	r1, r5
 8024384:	4620      	mov	r0, r4
 8024386:	f7ff ff68 	bl	802425a <inv_arc_area>
 802438a:	e002      	b.n	8024392 <lv_arc_set_start_angle+0x62>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 802438c:	4620      	mov	r0, r4
 802438e:	f7e3 fdf3 	bl	8007f78 <lv_obj_invalidate>
    inv_knob_area(obj);
 8024392:	4620      	mov	r0, r4
 8024394:	f7ff ffb7 	bl	8024306 <inv_knob_area>
    arc->indic_angle_start = start;
 8024398:	84e5      	strh	r5, [r4, #38]	; 0x26
    inv_knob_area(obj);
 802439a:	4620      	mov	r0, r4
 802439c:	f7ff ffb3 	bl	8024306 <inv_knob_area>
}
 80243a0:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 80243a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80243a6:	462a      	mov	r2, r5
 80243a8:	4620      	mov	r0, r4
 80243aa:	f7ff ff56 	bl	802425a <inv_arc_area>
 80243ae:	e7f0      	b.n	8024392 <lv_arc_set_start_angle+0x62>

080243b0 <lv_arc_set_end_angle>:
{
 80243b0:	b538      	push	{r3, r4, r5, lr}
 80243b2:	4604      	mov	r4, r0
 80243b4:	460d      	mov	r5, r1
    if(end > 360) end -= 360;
 80243b6:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 80243ba:	bf84      	itt	hi
 80243bc:	f5a1 75b4 	subhi.w	r5, r1, #360	; 0x168
 80243c0:	b2ad      	uxthhi	r5, r5
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 80243c2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80243c4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80243c6:	1aca      	subs	r2, r1, r3
 80243c8:	fa1f fc82 	uxth.w	ip, r2
 80243cc:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->indic_angle_start;
 80243ce:	1aeb      	subs	r3, r5, r3
 80243d0:	b298      	uxth	r0, r3
 80243d2:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 80243d4:	2a00      	cmp	r2, #0
 80243d6:	bfbc      	itt	lt
 80243d8:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 80243dc:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 80243de:	2b00      	cmp	r3, #0
 80243e0:	bfbc      	itt	lt
 80243e2:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 80243e6:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80243e8:	1a98      	subs	r0, r3, r2
 80243ea:	2800      	cmp	r0, #0
 80243ec:	bfb8      	it	lt
 80243ee:	4240      	neglt	r0, r0
 80243f0:	28b4      	cmp	r0, #180	; 0xb4
 80243f2:	dc0a      	bgt.n	802440a <lv_arc_set_end_angle+0x5a>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 80243f4:	429a      	cmp	r2, r3
 80243f6:	dc13      	bgt.n	8024420 <lv_arc_set_end_angle+0x70>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->indic_angle_end, end, LV_PART_INDICATOR);
 80243f8:	429a      	cmp	r2, r3
 80243fa:	da09      	bge.n	8024410 <lv_arc_set_end_angle+0x60>
 80243fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024400:	462a      	mov	r2, r5
 8024402:	4620      	mov	r0, r4
 8024404:	f7ff ff29 	bl	802425a <inv_arc_area>
 8024408:	e002      	b.n	8024410 <lv_arc_set_end_angle+0x60>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 802440a:	4620      	mov	r0, r4
 802440c:	f7e3 fdb4 	bl	8007f78 <lv_obj_invalidate>
    inv_knob_area(obj);
 8024410:	4620      	mov	r0, r4
 8024412:	f7ff ff78 	bl	8024306 <inv_knob_area>
    arc->indic_angle_end = end;
 8024416:	8525      	strh	r5, [r4, #40]	; 0x28
    inv_knob_area(obj);
 8024418:	4620      	mov	r0, r4
 802441a:	f7ff ff74 	bl	8024306 <inv_knob_area>
}
 802441e:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8024420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024424:	460a      	mov	r2, r1
 8024426:	4629      	mov	r1, r5
 8024428:	4620      	mov	r0, r4
 802442a:	f7ff ff16 	bl	802425a <inv_arc_area>
 802442e:	e7ef      	b.n	8024410 <lv_arc_set_end_angle+0x60>

08024430 <lv_arc_set_angles>:
{
 8024430:	b538      	push	{r3, r4, r5, lr}
 8024432:	4604      	mov	r4, r0
 8024434:	460d      	mov	r5, r1
    lv_arc_set_end_angle(obj, end);
 8024436:	4611      	mov	r1, r2
 8024438:	f7ff ffba 	bl	80243b0 <lv_arc_set_end_angle>
    lv_arc_set_start_angle(obj, start);
 802443c:	4629      	mov	r1, r5
 802443e:	4620      	mov	r0, r4
 8024440:	f7ff ff76 	bl	8024330 <lv_arc_set_start_angle>
}
 8024444:	bd38      	pop	{r3, r4, r5, pc}

08024446 <value_update>:
/**
 * Used internally to update arc angles after a value change
 * @param arc pointer to an arc object
 */
static void value_update(lv_obj_t * obj)
{
 8024446:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024448:	b083      	sub	sp, #12
 802444a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_arc_t * arc = (lv_arc_t *)obj;

    /*If the value is still not set to any value do not update*/
    if(arc->value == VALUE_UNSET) return;
 802444c:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 8024450:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8024454:	d05e      	beq.n	8024514 <value_update+0xce>

    int16_t bg_midpoint, range_midpoint, bg_end = arc->bg_angle_end;
 8024456:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8024458:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 802445a:	429a      	cmp	r2, r3
 802445c:	bf3c      	itt	cc
 802445e:	f502 72b4 	addcc.w	r2, r2, #360	; 0x168
 8024462:	b292      	uxthcc	r2, r2
 8024464:	b215      	sxth	r5, r2

    int16_t angle;
    switch(arc->type) {
 8024466:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 802446a:	f3c2 0241 	ubfx	r2, r2, #1, #2
 802446e:	2a01      	cmp	r2, #1
 8024470:	d011      	beq.n	8024496 <value_update+0x50>
 8024472:	2a02      	cmp	r2, #2
 8024474:	d03f      	beq.n	80244f6 <value_update+0xb0>
 8024476:	2a00      	cmp	r2, #0
 8024478:	d14c      	bne.n	8024514 <value_update+0xce>
        case LV_ARC_MODE_REVERSE:
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
            break;
        case LV_ARC_MODE_NORMAL:
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 802447a:	9500      	str	r5, [sp, #0]
 802447c:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8024480:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8024484:	f7fd f9c0 	bl	8021808 <lv_map>
 8024488:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 802448a:	b282      	uxth	r2, r0
 802448c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 802448e:	4620      	mov	r0, r4
 8024490:	f7ff ffce 	bl	8024430 <lv_arc_set_angles>

            break;
 8024494:	e03d      	b.n	8024512 <value_update+0xcc>
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8024496:	195a      	adds	r2, r3, r5
 8024498:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 802449c:	1056      	asrs	r6, r2, #1
 802449e:	f342 074f 	sbfx	r7, r2, #1, #16
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 80244a2:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 80244a6:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 80244aa:	eb01 0c02 	add.w	ip, r1, r2
 80244ae:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 80244b2:	f34c 0c4f 	sbfx	ip, ip, #1, #16
            if(arc->value < range_midpoint) {
 80244b6:	4560      	cmp	r0, ip
 80244b8:	da0d      	bge.n	80244d6 <value_update+0x90>
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 80244ba:	9700      	str	r7, [sp, #0]
 80244bc:	4662      	mov	r2, ip
 80244be:	f7fd f9a3 	bl	8021808 <lv_map>
 80244c2:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 80244c4:	b281      	uxth	r1, r0
 80244c6:	4620      	mov	r0, r4
 80244c8:	f7ff ff32 	bl	8024330 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 80244cc:	b2b1      	uxth	r1, r6
 80244ce:	4620      	mov	r0, r4
 80244d0:	f7ff ff6e 	bl	80243b0 <lv_arc_set_end_angle>
 80244d4:	e01d      	b.n	8024512 <value_update+0xcc>
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 80244d6:	9500      	str	r5, [sp, #0]
 80244d8:	463b      	mov	r3, r7
 80244da:	4661      	mov	r1, ip
 80244dc:	f7fd f994 	bl	8021808 <lv_map>
 80244e0:	4607      	mov	r7, r0
 80244e2:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 80244e4:	b2b1      	uxth	r1, r6
 80244e6:	4620      	mov	r0, r4
 80244e8:	f7ff ff22 	bl	8024330 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 80244ec:	b2b9      	uxth	r1, r7
 80244ee:	4620      	mov	r0, r4
 80244f0:	f7ff ff5e 	bl	80243b0 <lv_arc_set_end_angle>
 80244f4:	e00d      	b.n	8024512 <value_update+0xcc>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 80244f6:	9300      	str	r3, [sp, #0]
 80244f8:	462b      	mov	r3, r5
 80244fa:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 80244fe:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8024502:	f7fd f981 	bl	8021808 <lv_map>
 8024506:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8024508:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 802450a:	b281      	uxth	r1, r0
 802450c:	4620      	mov	r0, r4
 802450e:	f7ff ff8f 	bl	8024430 <lv_arc_set_angles>
        default:
            LV_LOG_WARN("Invalid mode: %d", arc->type);
            return;
    }
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8024512:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8024514:	b003      	add	sp, #12
 8024516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024518 <lv_arc_set_bg_start_angle>:
{
 8024518:	b538      	push	{r3, r4, r5, lr}
 802451a:	4605      	mov	r5, r0
 802451c:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 802451e:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8024522:	bf84      	itt	hi
 8024524:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
 8024528:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 802452a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 802452c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 802452e:	1a5a      	subs	r2, r3, r1
 8024530:	fa1f fc82 	uxth.w	ip, r2
 8024534:	b212      	sxth	r2, r2
    int16_t new_delta = arc->bg_angle_end - start;
 8024536:	1b1b      	subs	r3, r3, r4
 8024538:	b298      	uxth	r0, r3
 802453a:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 802453c:	2a00      	cmp	r2, #0
 802453e:	bfbc      	itt	lt
 8024540:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 8024544:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8024546:	2b00      	cmp	r3, #0
 8024548:	bfbc      	itt	lt
 802454a:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 802454e:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024550:	1a98      	subs	r0, r3, r2
 8024552:	2800      	cmp	r0, #0
 8024554:	bfb8      	it	lt
 8024556:	4240      	neglt	r0, r0
 8024558:	28b4      	cmp	r0, #180	; 0xb4
 802455a:	dc0a      	bgt.n	8024572 <lv_arc_set_bg_start_angle+0x5a>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 802455c:	429a      	cmp	r2, r3
 802455e:	dc10      	bgt.n	8024582 <lv_arc_set_bg_start_angle+0x6a>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->bg_angle_start, LV_PART_MAIN);
 8024560:	429a      	cmp	r2, r3
 8024562:	da09      	bge.n	8024578 <lv_arc_set_bg_start_angle+0x60>
 8024564:	2300      	movs	r3, #0
 8024566:	460a      	mov	r2, r1
 8024568:	4621      	mov	r1, r4
 802456a:	4628      	mov	r0, r5
 802456c:	f7ff fe75 	bl	802425a <inv_arc_area>
 8024570:	e002      	b.n	8024578 <lv_arc_set_bg_start_angle+0x60>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024572:	4628      	mov	r0, r5
 8024574:	f7e3 fd00 	bl	8007f78 <lv_obj_invalidate>
    arc->bg_angle_start = start;
 8024578:	856c      	strh	r4, [r5, #42]	; 0x2a
    value_update(obj);
 802457a:	4628      	mov	r0, r5
 802457c:	f7ff ff63 	bl	8024446 <value_update>
}
 8024580:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 8024582:	2300      	movs	r3, #0
 8024584:	4622      	mov	r2, r4
 8024586:	4628      	mov	r0, r5
 8024588:	f7ff fe67 	bl	802425a <inv_arc_area>
 802458c:	e7f4      	b.n	8024578 <lv_arc_set_bg_start_angle+0x60>

0802458e <lv_arc_set_bg_end_angle>:
{
 802458e:	b538      	push	{r3, r4, r5, lr}
 8024590:	4605      	mov	r5, r0
 8024592:	460c      	mov	r4, r1
    if(end > 360) end -= 360;
 8024594:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8024598:	bf84      	itt	hi
 802459a:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
 802459e:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 80245a0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80245a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80245a4:	1aca      	subs	r2, r1, r3
 80245a6:	fa1f fc82 	uxth.w	ip, r2
 80245aa:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->bg_angle_start;
 80245ac:	1ae3      	subs	r3, r4, r3
 80245ae:	b298      	uxth	r0, r3
 80245b0:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 80245b2:	2a00      	cmp	r2, #0
 80245b4:	bfbc      	itt	lt
 80245b6:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 80245ba:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 80245bc:	2b00      	cmp	r3, #0
 80245be:	bfbc      	itt	lt
 80245c0:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 80245c4:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80245c6:	1a98      	subs	r0, r3, r2
 80245c8:	2800      	cmp	r0, #0
 80245ca:	bfb8      	it	lt
 80245cc:	4240      	neglt	r0, r0
 80245ce:	28b4      	cmp	r0, #180	; 0xb4
 80245d0:	dc09      	bgt.n	80245e6 <lv_arc_set_bg_end_angle+0x58>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 80245d2:	429a      	cmp	r2, r3
 80245d4:	dc0f      	bgt.n	80245f6 <lv_arc_set_bg_end_angle+0x68>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->bg_angle_end, end, LV_PART_MAIN);
 80245d6:	429a      	cmp	r2, r3
 80245d8:	da08      	bge.n	80245ec <lv_arc_set_bg_end_angle+0x5e>
 80245da:	2300      	movs	r3, #0
 80245dc:	4622      	mov	r2, r4
 80245de:	4628      	mov	r0, r5
 80245e0:	f7ff fe3b 	bl	802425a <inv_arc_area>
 80245e4:	e002      	b.n	80245ec <lv_arc_set_bg_end_angle+0x5e>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80245e6:	4628      	mov	r0, r5
 80245e8:	f7e3 fcc6 	bl	8007f78 <lv_obj_invalidate>
    arc->bg_angle_end = end;
 80245ec:	85ac      	strh	r4, [r5, #44]	; 0x2c
    value_update(obj);
 80245ee:	4628      	mov	r0, r5
 80245f0:	f7ff ff29 	bl	8024446 <value_update>
}
 80245f4:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 80245f6:	2300      	movs	r3, #0
 80245f8:	460a      	mov	r2, r1
 80245fa:	4621      	mov	r1, r4
 80245fc:	4628      	mov	r0, r5
 80245fe:	f7ff fe2c 	bl	802425a <inv_arc_area>
 8024602:	e7f3      	b.n	80245ec <lv_arc_set_bg_end_angle+0x5e>

08024604 <lv_arc_set_bg_angles>:
{
 8024604:	b538      	push	{r3, r4, r5, lr}
 8024606:	4604      	mov	r4, r0
 8024608:	460d      	mov	r5, r1
    lv_arc_set_bg_end_angle(obj, end);
 802460a:	4611      	mov	r1, r2
 802460c:	f7ff ffbf 	bl	802458e <lv_arc_set_bg_end_angle>
    lv_arc_set_bg_start_angle(obj, start);
 8024610:	4629      	mov	r1, r5
 8024612:	4620      	mov	r0, r4
 8024614:	f7ff ff80 	bl	8024518 <lv_arc_set_bg_start_angle>
}
 8024618:	bd38      	pop	{r3, r4, r5, pc}

0802461a <lv_arc_set_rotation>:
{
 802461a:	b508      	push	{r3, lr}
    arc->rotation = rotation;
 802461c:	8481      	strh	r1, [r0, #36]	; 0x24
    lv_obj_invalidate(obj);
 802461e:	f7e3 fcab 	bl	8007f78 <lv_obj_invalidate>
}
 8024622:	bd08      	pop	{r3, pc}

08024624 <lv_arc_set_value>:
    if(arc->value == value) return;
 8024624:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8024628:	428a      	cmp	r2, r1
 802462a:	d010      	beq.n	802464e <lv_arc_set_value+0x2a>
{
 802462c:	b508      	push	{r3, lr}
    new_value = value > arc->max_value ? arc->max_value : value;
 802462e:	f9b0 3032 	ldrsh.w	r3, [r0, #50]	; 0x32
 8024632:	428b      	cmp	r3, r1
 8024634:	bfa8      	it	ge
 8024636:	460b      	movge	r3, r1
    new_value = new_value < arc->min_value ? arc->min_value : new_value;
 8024638:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 802463c:	4299      	cmp	r1, r3
 802463e:	bfb8      	it	lt
 8024640:	4619      	movlt	r1, r3
    if(arc->value == new_value) return;
 8024642:	428a      	cmp	r2, r1
 8024644:	d002      	beq.n	802464c <lv_arc_set_value+0x28>
    arc->value = new_value;
 8024646:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 8024648:	f7ff fefd 	bl	8024446 <value_update>
}
 802464c:	bd08      	pop	{r3, pc}
 802464e:	4770      	bx	lr

08024650 <lv_arc_event>:
{
 8024650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024654:	b0ab      	sub	sp, #172	; 0xac
 8024656:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8024658:	48c5      	ldr	r0, [pc, #788]	; (8024970 <lv_arc_event+0x320>)
 802465a:	f7df fa54 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802465e:	2801      	cmp	r0, #1
 8024660:	d002      	beq.n	8024668 <lv_arc_event+0x18>
}
 8024662:	b02b      	add	sp, #172	; 0xac
 8024664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8024668:	4620      	mov	r0, r4
 802466a:	f7df fb6f 	bl	8003d4c <lv_event_get_code>
 802466e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8024670:	4620      	mov	r0, r4
 8024672:	f7df fb67 	bl	8003d44 <lv_event_get_target>
 8024676:	4607      	mov	r7, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8024678:	4620      	mov	r0, r4
 802467a:	f7df fb63 	bl	8003d44 <lv_event_get_target>
 802467e:	4606      	mov	r6, r0
    if(code == LV_EVENT_PRESSING) {
 8024680:	2d02      	cmp	r5, #2
 8024682:	d07f      	beq.n	8024784 <lv_arc_event+0x134>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8024684:	2d08      	cmp	r5, #8
 8024686:	f000 8189 	beq.w	802499c <lv_arc_event+0x34c>
 802468a:	2d03      	cmp	r5, #3
 802468c:	f000 8186 	beq.w	802499c <lv_arc_event+0x34c>
    else if(code == LV_EVENT_KEY) {
 8024690:	2d0d      	cmp	r5, #13
 8024692:	f000 819f 	beq.w	80249d4 <lv_arc_event+0x384>
    else if(code == LV_EVENT_HIT_TEST) {
 8024696:	2d11      	cmp	r5, #17
 8024698:	f000 81c3 	beq.w	8024a22 <lv_arc_event+0x3d2>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802469c:	2d13      	cmp	r5, #19
 802469e:	f000 8208 	beq.w	8024ab2 <lv_arc_event+0x462>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80246a2:	2d15      	cmp	r5, #21
 80246a4:	d1dd      	bne.n	8024662 <lv_arc_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 80246a6:	4620      	mov	r0, r4
 80246a8:	f7df fb4c 	bl	8003d44 <lv_event_get_target>
 80246ac:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80246ae:	4620      	mov	r0, r4
 80246b0:	f7df fbbc 	bl	8003e2c <lv_event_get_draw_ctx>
 80246b4:	4606      	mov	r6, r0
    get_center(obj, &center, &arc_r);
 80246b6:	f10d 020a 	add.w	r2, sp, #10
 80246ba:	a903      	add	r1, sp, #12
 80246bc:	4628      	mov	r0, r5
 80246be:	f7ff fcd3 	bl	8024068 <get_center>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80246c2:	4631      	mov	r1, r6
 80246c4:	a818      	add	r0, sp, #96	; 0x60
 80246c6:	f7e3 f804 	bl	80076d2 <lv_obj_draw_dsc_init>
    if(arc_r > 0) {
 80246ca:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	f300 8248 	bgt.w	8024b64 <lv_arc_event+0x514>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80246d4:	2212      	movs	r2, #18
 80246d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80246da:	4628      	mov	r0, r5
 80246dc:	f7e6 f884 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80246e0:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80246e2:	2213      	movs	r2, #19
 80246e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80246e8:	4628      	mov	r0, r5
 80246ea:	f7e6 f87d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80246ee:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80246f2:	2210      	movs	r2, #16
 80246f4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80246f8:	4628      	mov	r0, r5
 80246fa:	f7e6 f875 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80246fe:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024700:	2211      	movs	r2, #17
 8024702:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8024706:	4628      	mov	r0, r5
 8024708:	f7e6 f86e 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802470c:	b202      	sxth	r2, r0
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 802470e:	4544      	cmp	r4, r8
 8024710:	bfb8      	it	lt
 8024712:	4644      	movlt	r4, r8
 8024714:	42bc      	cmp	r4, r7
 8024716:	bfb8      	it	lt
 8024718:	463c      	movlt	r4, r7
 802471a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802471e:	4294      	cmp	r4, r2
 8024720:	bfac      	ite	ge
 8024722:	1b1b      	subge	r3, r3, r4
 8024724:	1a9b      	sublt	r3, r3, r2
 8024726:	b21c      	sxth	r4, r3
    if(indic_r > 0) {
 8024728:	2c00      	cmp	r4, #0
 802472a:	f300 824b 	bgt.w	8024bc4 <lv_arc_event+0x574>
    get_knob_area(obj, &center, arc_r, &knob_area);
 802472e:	af04      	add	r7, sp, #16
 8024730:	463b      	mov	r3, r7
 8024732:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8024736:	a903      	add	r1, sp, #12
 8024738:	4628      	mov	r0, r5
 802473a:	f7ff fcf4 	bl	8024126 <get_knob_area>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 802473e:	ac0a      	add	r4, sp, #40	; 0x28
 8024740:	4620      	mov	r0, r4
 8024742:	f7ea fd11 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 8024746:	4622      	mov	r2, r4
 8024748:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802474c:	4628      	mov	r0, r5
 802474e:	f7e2 fc85 	bl	800705c <lv_obj_init_draw_rect_dsc>
    part_draw_dsc.part = LV_PART_KNOB;
 8024752:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8024756:	9325      	str	r3, [sp, #148]	; 0x94
    part_draw_dsc.class_p = MY_CLASS;
 8024758:	4b85      	ldr	r3, [pc, #532]	; (8024970 <lv_arc_event+0x320>)
 802475a:	9319      	str	r3, [sp, #100]	; 0x64
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
 802475c:	2302      	movs	r3, #2
 802475e:	931a      	str	r3, [sp, #104]	; 0x68
    part_draw_dsc.draw_area = &knob_area;
 8024760:	971b      	str	r7, [sp, #108]	; 0x6c
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8024762:	941c      	str	r4, [sp, #112]	; 0x70
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8024764:	aa18      	add	r2, sp, #96	; 0x60
 8024766:	211a      	movs	r1, #26
 8024768:	4628      	mov	r0, r5
 802476a:	f7df fac9 	bl	8003d00 <lv_event_send>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 802476e:	463a      	mov	r2, r7
 8024770:	4621      	mov	r1, r4
 8024772:	4630      	mov	r0, r6
 8024774:	f7ea fd54 	bl	800f220 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8024778:	aa18      	add	r2, sp, #96	; 0x60
 802477a:	211b      	movs	r1, #27
 802477c:	4628      	mov	r0, r5
 802477e:	f7df fabf 	bl	8003d00 <lv_event_send>
}
 8024782:	e76e      	b.n	8024662 <lv_arc_event+0x12>
        lv_indev_t * indev = lv_indev_get_act();
 8024784:	f7df fe62 	bl	800444c <lv_indev_get_act>
        if(indev == NULL) return;
 8024788:	4604      	mov	r4, r0
 802478a:	2800      	cmp	r0, #0
 802478c:	f43f af69 	beq.w	8024662 <lv_arc_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8024790:	f7df fe62 	bl	8004458 <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 8024794:	2801      	cmp	r0, #1
 8024796:	f47f af64 	bne.w	8024662 <lv_arc_event+0x12>
        lv_indev_get_point(indev, &p);
 802479a:	a90a      	add	r1, sp, #40	; 0x28
 802479c:	4620      	mov	r0, r4
 802479e:	f7df fed2 	bl	8004546 <lv_indev_get_point>
        get_center(obj, &center, &r);
 80247a2:	aa06      	add	r2, sp, #24
 80247a4:	a918      	add	r1, sp, #96	; 0x60
 80247a6:	4638      	mov	r0, r7
 80247a8:	f7ff fc5e 	bl	8024068 <get_center>
        p.x -= center.x;
 80247ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80247b0:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 80247b4:	1a9b      	subs	r3, r3, r2
 80247b6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        p.y -= center.y;
 80247ba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80247be:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 80247c2:	1a9b      	subs	r3, r3, r2
 80247c4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        if(arc->dragging == false) {
 80247c8:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80247cc:	f013 0f01 	tst.w	r3, #1
 80247d0:	d077      	beq.n	80248c2 <lv_arc_event+0x272>
        if(p.x == 0 && p.y == 0) return;
 80247d2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80247d6:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 80247da:	ea51 0300 	orrs.w	r3, r1, r0
 80247de:	f43f af40 	beq.w	8024662 <lv_arc_event+0x12>
        int16_t bg_end = arc->bg_angle_end;
 80247e2:	8db4      	ldrh	r4, [r6, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) {
 80247e4:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 80247e6:	42a3      	cmp	r3, r4
            bg_end = arc->bg_angle_end + 360;
 80247e8:	bf84      	itt	hi
 80247ea:	f504 72b4 	addhi.w	r2, r4, #360	; 0x168
 80247ee:	b294      	uxthhi	r4, r2
 80247f0:	fa0f f884 	sxth.w	r8, r4
        angle = lv_atan2(p.y, p.x);
 80247f4:	f7fc ff92 	bl	802171c <lv_atan2>
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 80247f8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 80247fa:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
 80247fc:	4419      	add	r1, r3
 80247fe:	1a41      	subs	r1, r0, r1
 8024800:	b28a      	uxth	r2, r1
 8024802:	b209      	sxth	r1, r1
        if(angle < 0) angle += 360;
 8024804:	2900      	cmp	r1, #0
 8024806:	bfbc      	itt	lt
 8024808:	f502 72b4 	addlt.w	r2, r2, #360	; 0x168
 802480c:	b211      	sxthlt	r1, r2
        int16_t deg_range = bg_end - arc->bg_angle_start;
 802480e:	1ae2      	subs	r2, r4, r3
 8024810:	b210      	sxth	r0, r2
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8024812:	8fb2      	ldrh	r2, [r6, #60]	; 0x3c
 8024814:	1ad5      	subs	r5, r2, r3
 8024816:	b2ad      	uxth	r5, r5
        int16_t delta_angle = angle - last_angle_rel;
 8024818:	1a9b      	subs	r3, r3, r2
 802481a:	b29b      	uxth	r3, r3
 802481c:	185a      	adds	r2, r3, r1
        if(LV_ABS(delta_angle) > 280) {
 802481e:	b212      	sxth	r2, r2
 8024820:	2a00      	cmp	r2, #0
 8024822:	bfb8      	it	lt
 8024824:	4252      	neglt	r2, r2
 8024826:	b292      	uxth	r2, r2
 8024828:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 802482c:	f240 8092 	bls.w	8024954 <lv_arc_event+0x304>
            if(arc->min_close) angle = 0;
 8024830:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
            else angle = deg_range;
 8024834:	f012 0f08 	tst.w	r2, #8
 8024838:	bf0c      	ite	eq
 802483a:	4601      	moveq	r1, r0
 802483c:	2100      	movne	r1, #0
        delta_angle = angle - last_angle_rel;
 802483e:	440b      	add	r3, r1
 8024840:	b21c      	sxth	r4, r3
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 8024842:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8024844:	f7fb fe75 	bl	8020532 <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 8024848:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 802484a:	fb00 f203 	mul.w	r2, r0, r3
 802484e:	4b49      	ldr	r3, [pc, #292]	; (8024974 <lv_arc_event+0x324>)
 8024850:	fba3 3202 	umull	r3, r2, r3, r2
 8024854:	0993      	lsrs	r3, r2, #6
 8024856:	f342 128f 	sbfx	r2, r2, #6, #16
        if(delta_angle > delta_angle_max) {
 802485a:	4294      	cmp	r4, r2
 802485c:	dc05      	bgt.n	802486a <lv_arc_event+0x21a>
        else if(delta_angle < -delta_angle_max) {
 802485e:	4252      	negs	r2, r2
 8024860:	4294      	cmp	r4, r2
            delta_angle = -delta_angle_max;
 8024862:	bfba      	itte	lt
 8024864:	425b      	neglt	r3, r3
 8024866:	b21a      	sxthlt	r2, r3
        delta_angle = angle - last_angle_rel;
 8024868:	4622      	movge	r2, r4
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 802486a:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 802486c:	f9b6 e032 	ldrsh.w	lr, [r6, #50]	; 0x32
 8024870:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 8024874:	eba8 0001 	sub.w	r0, r8, r1
 8024878:	00c0      	lsls	r0, r0, #3
 802487a:	ebae 0c03 	sub.w	ip, lr, r3
 802487e:	fb90 f0fc 	sdiv	r0, r0, ip
        round = (round + 4) >> 4;
 8024882:	f100 0c04 	add.w	ip, r0, #4
        int16_t old_value = arc->value;
 8024886:	f9b6 402e 	ldrsh.w	r4, [r6, #46]	; 0x2e
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 802488a:	1868      	adds	r0, r5, r1
 802488c:	eb00 102c 	add.w	r0, r0, ip, asr #4
 8024890:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 8024892:	f8cd e000 	str.w	lr, [sp]
 8024896:	4642      	mov	r2, r8
 8024898:	b200      	sxth	r0, r0
 802489a:	f7fc ffb5 	bl	8021808 <lv_map>
 802489e:	b205      	sxth	r5, r0
        if(new_value != lv_arc_get_value(obj)) {
 80248a0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80248a4:	42ab      	cmp	r3, r5
 80248a6:	d167      	bne.n	8024978 <lv_arc_event+0x328>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 80248a8:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 80248ac:	42ab      	cmp	r3, r5
 80248ae:	d004      	beq.n	80248ba <lv_arc_event+0x26a>
 80248b0:	f9b6 3032 	ldrsh.w	r3, [r6, #50]	; 0x32
 80248b4:	42ab      	cmp	r3, r5
 80248b6:	f47f aed4 	bne.w	8024662 <lv_arc_event+0x12>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 80248ba:	f7fb fe36 	bl	802052a <lv_tick_get>
 80248be:	63b0      	str	r0, [r6, #56]	; 0x38
 80248c0:	e6cf      	b.n	8024662 <lv_arc_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80248c2:	2250      	movs	r2, #80	; 0x50
 80248c4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80248c8:	4638      	mov	r0, r7
 80248ca:	f7e5 ff8d 	bl	800a7e8 <lv_obj_get_style_prop>
 80248ce:	4604      	mov	r4, r0
            r -= indic_width;
 80248d0:	b285      	uxth	r5, r0
 80248d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80248d6:	1b5b      	subs	r3, r3, r5
 80248d8:	f8ad 3018 	strh.w	r3, [sp, #24]
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 80248dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80248e0:	4638      	mov	r0, r7
 80248e2:	f7e2 f875 	bl	80069d0 <lv_obj_has_flag>
 80248e6:	b1e8      	cbz	r0, 8024924 <lv_arc_event+0x2d4>
                r -= indic_width;
 80248e8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80248ec:	1b5b      	subs	r3, r3, r5
 80248ee:	b21b      	sxth	r3, r3
            if(r < 1) r = 1;
 80248f0:	2b00      	cmp	r3, #0
 80248f2:	bfd8      	it	le
 80248f4:	2301      	movle	r3, #1
 80248f6:	f8ad 3018 	strh.w	r3, [sp, #24]
            if(p.x * p.x + p.y * p.y > r * r) {
 80248fa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80248fe:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8024902:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024906:	fb01 f101 	mul.w	r1, r1, r1
 802490a:	fb02 1202 	mla	r2, r2, r2, r1
 802490e:	fb03 f303 	mul.w	r3, r3, r3
 8024912:	429a      	cmp	r2, r3
 8024914:	dc14      	bgt.n	8024940 <lv_arc_event+0x2f0>
        if(arc->dragging == false) return;
 8024916:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 802491a:	f013 0f01 	tst.w	r3, #1
 802491e:	f43f aea0 	beq.w	8024662 <lv_arc_event+0x12>
 8024922:	e756      	b.n	80247d2 <lv_arc_event+0x182>
                r -= LV_MAX(r / 4, indic_width);
 8024924:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024928:	461a      	mov	r2, r3
 802492a:	2b00      	cmp	r3, #0
 802492c:	bfb8      	it	lt
 802492e:	1cda      	addlt	r2, r3, #3
 8024930:	1092      	asrs	r2, r2, #2
 8024932:	b224      	sxth	r4, r4
 8024934:	42a2      	cmp	r2, r4
 8024936:	bfac      	ite	ge
 8024938:	1a9b      	subge	r3, r3, r2
 802493a:	1b1b      	sublt	r3, r3, r4
 802493c:	b21b      	sxth	r3, r3
 802493e:	e7d7      	b.n	80248f0 <lv_arc_event+0x2a0>
                arc->dragging = true;
 8024940:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8024944:	f043 0301 	orr.w	r3, r3, #1
 8024948:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
                arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 802494c:	f7fb fded 	bl	802052a <lv_tick_get>
 8024950:	63b0      	str	r0, [r6, #56]	; 0x38
 8024952:	e7e0      	b.n	8024916 <lv_arc_event+0x2c6>
            if(angle < deg_range / 2)arc->min_close = 1;
 8024954:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8024958:	ebb1 0f62 	cmp.w	r1, r2, asr #1
 802495c:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
 8024960:	bfb4      	ite	lt
 8024962:	f042 0208 	orrlt.w	r2, r2, #8
            else arc->min_close = 0;
 8024966:	f36f 02c3 	bfcge	r2, #3, #1
 802496a:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
 802496e:	e766      	b.n	802483e <lv_arc_event+0x1ee>
 8024970:	08032ee0 	.word	0x08032ee0
 8024974:	10624dd3 	.word	0x10624dd3
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8024978:	f7fb fdd7 	bl	802052a <lv_tick_get>
 802497c:	63b0      	str	r0, [r6, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 802497e:	4629      	mov	r1, r5
 8024980:	4638      	mov	r0, r7
 8024982:	f7ff fe4f 	bl	8024624 <lv_arc_set_value>
            if(new_value != old_value) {
 8024986:	42ac      	cmp	r4, r5
 8024988:	d08e      	beq.n	80248a8 <lv_arc_event+0x258>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802498a:	2200      	movs	r2, #0
 802498c:	211c      	movs	r1, #28
 802498e:	4638      	mov	r0, r7
 8024990:	f7df f9b6 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 8024994:	2801      	cmp	r0, #1
 8024996:	f47f ae64 	bne.w	8024662 <lv_arc_event+0x12>
 802499a:	e785      	b.n	80248a8 <lv_arc_event+0x258>
        arc->dragging = false;
 802499c:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80249a0:	f36f 0300 	bfc	r3, #0, #1
 80249a4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 80249a8:	4638      	mov	r0, r7
 80249aa:	f7e2 f826 	bl	80069fa <lv_obj_get_group>
 80249ae:	4605      	mov	r5, r0
        bool editing               = lv_group_get_editing(g);
 80249b0:	f7df fc6a 	bl	8004288 <lv_group_get_editing>
 80249b4:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80249b6:	f7df fd49 	bl	800444c <lv_indev_get_act>
 80249ba:	f7df fd4d 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80249be:	2804      	cmp	r0, #4
 80249c0:	f47f ae4f 	bne.w	8024662 <lv_arc_event+0x12>
            if(editing) lv_group_set_editing(g, false);
 80249c4:	2c00      	cmp	r4, #0
 80249c6:	f43f ae4c 	beq.w	8024662 <lv_arc_event+0x12>
 80249ca:	2100      	movs	r1, #0
 80249cc:	4628      	mov	r0, r5
 80249ce:	f7df fbee 	bl	80041ae <lv_group_set_editing>
 80249d2:	e646      	b.n	8024662 <lv_arc_event+0x12>
        char c = *((char *)lv_event_get_param(e));
 80249d4:	4620      	mov	r0, r4
 80249d6:	f7df f9bd 	bl	8003d54 <lv_event_get_param>
 80249da:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value = arc->value;
 80249dc:	f9b6 402e 	ldrsh.w	r4, [r6, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80249e0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80249e4:	2a11      	cmp	r2, #17
 80249e6:	d00b      	beq.n	8024a00 <lv_arc_event+0x3b0>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80249e8:	2b14      	cmp	r3, #20
 80249ea:	d002      	beq.n	80249f2 <lv_arc_event+0x3a2>
 80249ec:	2b12      	cmp	r3, #18
 80249ee:	f47f ae38 	bne.w	8024662 <lv_arc_event+0x12>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 80249f2:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80249f4:	3901      	subs	r1, #1
 80249f6:	b209      	sxth	r1, r1
 80249f8:	4638      	mov	r0, r7
 80249fa:	f7ff fe13 	bl	8024624 <lv_arc_set_value>
 80249fe:	e005      	b.n	8024a0c <lv_arc_event+0x3bc>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 8024a00:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8024a02:	3101      	adds	r1, #1
 8024a04:	b209      	sxth	r1, r1
 8024a06:	4638      	mov	r0, r7
 8024a08:	f7ff fe0c 	bl	8024624 <lv_arc_set_value>
        if(old_value != arc->value) {
 8024a0c:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 8024a10:	42a3      	cmp	r3, r4
 8024a12:	f43f ae26 	beq.w	8024662 <lv_arc_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8024a16:	2200      	movs	r2, #0
 8024a18:	211c      	movs	r1, #28
 8024a1a:	4638      	mov	r0, r7
 8024a1c:	f7df f970 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 8024a20:	e61f      	b.n	8024662 <lv_arc_event+0x12>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 8024a22:	4620      	mov	r0, r4
 8024a24:	f7df f996 	bl	8003d54 <lv_event_get_param>
 8024a28:	4606      	mov	r6, r0
        get_center(obj, &p, &r);
 8024a2a:	aa06      	add	r2, sp, #24
 8024a2c:	a90a      	add	r1, sp, #40	; 0x28
 8024a2e:	4638      	mov	r0, r7
 8024a30:	f7ff fb1a 	bl	8024068 <get_center>
        if(obj->spec_attr) ext_click_area = obj->spec_attr->ext_click_pad;
 8024a34:	68bb      	ldr	r3, [r7, #8]
 8024a36:	b363      	cbz	r3, 8024a92 <lv_arc_event+0x442>
 8024a38:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8024a3c:	2250      	movs	r2, #80	; 0x50
 8024a3e:	2100      	movs	r1, #0
 8024a40:	4638      	mov	r0, r7
 8024a42:	f7e5 fed1 	bl	800a7e8 <lv_obj_get_style_prop>
        r -= w + ext_click_area;
 8024a46:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8024a4a:	b2a7      	uxth	r7, r4
 8024a4c:	183d      	adds	r5, r7, r0
 8024a4e:	b2ad      	uxth	r5, r5
 8024a50:	1b5c      	subs	r4, r3, r5
 8024a52:	b2a4      	uxth	r4, r4
 8024a54:	f8ad 4018 	strh.w	r4, [sp, #24]
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 8024a58:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8024a5c:	1aeb      	subs	r3, r5, r3
 8024a5e:	b299      	uxth	r1, r3
 8024a60:	f8bd c02a 	ldrh.w	ip, [sp, #42]	; 0x2a
 8024a64:	1823      	adds	r3, r4, r0
 8024a66:	eb0c 0201 	add.w	r2, ip, r1
 8024a6a:	4401      	add	r1, r0
 8024a6c:	4464      	add	r4, ip
 8024a6e:	b224      	sxth	r4, r4
 8024a70:	9400      	str	r4, [sp, #0]
 8024a72:	b21b      	sxth	r3, r3
 8024a74:	b212      	sxth	r2, r2
 8024a76:	b209      	sxth	r1, r1
 8024a78:	a818      	add	r0, sp, #96	; 0x60
 8024a7a:	f7fb ffa3 	bl	80209c4 <lv_area_set>
        if(_lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE)) {
 8024a7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8024a82:	6831      	ldr	r1, [r6, #0]
 8024a84:	a818      	add	r0, sp, #96	; 0x60
 8024a86:	f7fc f827 	bl	8020ad8 <_lv_area_is_point_on>
 8024a8a:	b120      	cbz	r0, 8024a96 <lv_arc_event+0x446>
            info->res = false;
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	7133      	strb	r3, [r6, #4]
            return;
 8024a90:	e5e7      	b.n	8024662 <lv_arc_event+0x12>
        lv_coord_t ext_click_area = 0;
 8024a92:	2400      	movs	r4, #0
 8024a94:	e7d2      	b.n	8024a3c <lv_arc_event+0x3ec>
        lv_area_increase(&a, w + ext_click_area * 2, w + ext_click_area * 2);
 8024a96:	1979      	adds	r1, r7, r5
 8024a98:	b209      	sxth	r1, r1
 8024a9a:	460a      	mov	r2, r1
 8024a9c:	a818      	add	r0, sp, #96	; 0x60
 8024a9e:	f7fb ffb0 	bl	8020a02 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE);
 8024aa2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8024aa6:	6831      	ldr	r1, [r6, #0]
 8024aa8:	a818      	add	r0, sp, #96	; 0x60
 8024aaa:	f7fc f815 	bl	8020ad8 <_lv_area_is_point_on>
 8024aae:	7130      	strb	r0, [r6, #4]
 8024ab0:	e5d7      	b.n	8024662 <lv_arc_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024ab2:	2212      	movs	r2, #18
 8024ab4:	2100      	movs	r1, #0
 8024ab6:	4638      	mov	r0, r7
 8024ab8:	f7e5 fe96 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024abc:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8024ac0:	2213      	movs	r2, #19
 8024ac2:	2100      	movs	r1, #0
 8024ac4:	4638      	mov	r0, r7
 8024ac6:	f7e5 fe8f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024aca:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024acc:	2210      	movs	r2, #16
 8024ace:	2100      	movs	r1, #0
 8024ad0:	4638      	mov	r0, r7
 8024ad2:	f7e5 fe89 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024ad6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024ada:	2211      	movs	r2, #17
 8024adc:	2100      	movs	r1, #0
 8024ade:	4638      	mov	r0, r7
 8024ae0:	f7e5 fe82 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024ae4:	b206      	sxth	r6, r0
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8024ae6:	462b      	mov	r3, r5
 8024ae8:	454d      	cmp	r5, r9
 8024aea:	bfb8      	it	lt
 8024aec:	464b      	movlt	r3, r9
 8024aee:	4543      	cmp	r3, r8
 8024af0:	bfb8      	it	lt
 8024af2:	4643      	movlt	r3, r8
 8024af4:	429e      	cmp	r6, r3
 8024af6:	bfb8      	it	lt
 8024af8:	461e      	movlt	r6, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024afa:	2212      	movs	r2, #18
 8024afc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024b00:	4638      	mov	r0, r7
 8024b02:	f7e5 fe71 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024b06:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8024b0a:	2213      	movs	r2, #19
 8024b0c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024b10:	4638      	mov	r0, r7
 8024b12:	f7e5 fe69 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024b16:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024b18:	2210      	movs	r2, #16
 8024b1a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024b1e:	4638      	mov	r0, r7
 8024b20:	f7e5 fe62 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024b24:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024b28:	2211      	movs	r2, #17
 8024b2a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024b2e:	4638      	mov	r0, r7
 8024b30:	f7e5 fe5a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024b34:	b207      	sxth	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 8024b36:	4620      	mov	r0, r4
 8024b38:	f7df f90c 	bl	8003d54 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 8024b3c:	462b      	mov	r3, r5
 8024b3e:	454d      	cmp	r5, r9
 8024b40:	bfb8      	it	lt
 8024b42:	464b      	movlt	r3, r9
 8024b44:	4543      	cmp	r3, r8
 8024b46:	bfb8      	it	lt
 8024b48:	4643      	movlt	r3, r8
 8024b4a:	42bb      	cmp	r3, r7
 8024b4c:	bfb8      	it	lt
 8024b4e:	463b      	movlt	r3, r7
 8024b50:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad - bg_pad);
 8024b52:	b21b      	sxth	r3, r3
 8024b54:	1b9b      	subs	r3, r3, r6
 8024b56:	f9b0 2000 	ldrsh.w	r2, [r0]
 8024b5a:	4293      	cmp	r3, r2
 8024b5c:	bfb8      	it	lt
 8024b5e:	4613      	movlt	r3, r2
 8024b60:	8003      	strh	r3, [r0, #0]
 8024b62:	e57e      	b.n	8024662 <lv_arc_event+0x12>
        lv_draw_arc_dsc_init(&arc_dsc);
 8024b64:	ac06      	add	r4, sp, #24
 8024b66:	4620      	mov	r0, r4
 8024b68:	f7e8 f8dc 	bl	800cd24 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 8024b6c:	4622      	mov	r2, r4
 8024b6e:	2100      	movs	r1, #0
 8024b70:	4628      	mov	r0, r5
 8024b72:	f7e2 fcf3 	bl	800755c <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_MAIN;
 8024b76:	2300      	movs	r3, #0
 8024b78:	9325      	str	r3, [sp, #148]	; 0x94
        part_draw_dsc.class_p = MY_CLASS;
 8024b7a:	4a2e      	ldr	r2, [pc, #184]	; (8024c34 <lv_arc_event+0x5e4>)
 8024b7c:	9219      	str	r2, [sp, #100]	; 0x64
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
 8024b7e:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p1 = &center;
 8024b80:	af03      	add	r7, sp, #12
 8024b82:	9721      	str	r7, [sp, #132]	; 0x84
        part_draw_dsc.radius = arc_r;
 8024b84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8024b88:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        part_draw_dsc.arc_dsc = &arc_dsc;
 8024b8c:	9420      	str	r4, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8024b8e:	aa18      	add	r2, sp, #96	; 0x60
 8024b90:	211a      	movs	r1, #26
 8024b92:	4628      	mov	r0, r5
 8024b94:	f7df f8b4 	bl	8003d00 <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->bg_angle_start + arc->rotation,
 8024b98:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8024b9a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8024b9c:	441a      	add	r2, r3
 8024b9e:	b292      	uxth	r2, r2
 8024ba0:	9201      	str	r2, [sp, #4]
 8024ba2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8024ba4:	4413      	add	r3, r2
 8024ba6:	b29b      	uxth	r3, r3
 8024ba8:	9300      	str	r3, [sp, #0]
 8024baa:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8024bae:	463a      	mov	r2, r7
 8024bb0:	4621      	mov	r1, r4
 8024bb2:	4630      	mov	r0, r6
 8024bb4:	f7e8 f8cd 	bl	800cd52 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8024bb8:	aa18      	add	r2, sp, #96	; 0x60
 8024bba:	211b      	movs	r1, #27
 8024bbc:	4628      	mov	r0, r5
 8024bbe:	f7df f89f 	bl	8003d00 <lv_event_send>
 8024bc2:	e587      	b.n	80246d4 <lv_arc_event+0x84>
        lv_draw_arc_dsc_init(&arc_dsc);
 8024bc4:	af06      	add	r7, sp, #24
 8024bc6:	4638      	mov	r0, r7
 8024bc8:	f7e8 f8ac 	bl	800cd24 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 8024bcc:	463a      	mov	r2, r7
 8024bce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8024bd2:	4628      	mov	r0, r5
 8024bd4:	f7e2 fcc2 	bl	800755c <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_INDICATOR;
 8024bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024bdc:	9325      	str	r3, [sp, #148]	; 0x94
        part_draw_dsc.class_p = MY_CLASS;
 8024bde:	4b15      	ldr	r3, [pc, #84]	; (8024c34 <lv_arc_event+0x5e4>)
 8024be0:	9319      	str	r3, [sp, #100]	; 0x64
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 8024be2:	2301      	movs	r3, #1
 8024be4:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p1 = &center;
 8024be6:	ab03      	add	r3, sp, #12
 8024be8:	9321      	str	r3, [sp, #132]	; 0x84
        part_draw_dsc.radius = indic_r;
 8024bea:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
        part_draw_dsc.arc_dsc = &arc_dsc;
 8024bee:	9720      	str	r7, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8024bf0:	aa18      	add	r2, sp, #96	; 0x60
 8024bf2:	211a      	movs	r1, #26
 8024bf4:	4628      	mov	r0, r5
 8024bf6:	f7df f883 	bl	8003d00 <lv_event_send>
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 8024bfa:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 8024bfe:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8024c02:	429a      	cmp	r2, r3
 8024c04:	bfc8      	it	gt
 8024c06:	f8ad 301a 	strhgt.w	r3, [sp, #26]
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8024c0a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8024c0c:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8024c0e:	4411      	add	r1, r2
 8024c10:	b289      	uxth	r1, r1
 8024c12:	9101      	str	r1, [sp, #4]
 8024c14:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 8024c16:	440a      	add	r2, r1
 8024c18:	b292      	uxth	r2, r2
 8024c1a:	9200      	str	r2, [sp, #0]
 8024c1c:	b29b      	uxth	r3, r3
 8024c1e:	aa03      	add	r2, sp, #12
 8024c20:	a906      	add	r1, sp, #24
 8024c22:	4630      	mov	r0, r6
 8024c24:	f7e8 f895 	bl	800cd52 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8024c28:	aa18      	add	r2, sp, #96	; 0x60
 8024c2a:	211b      	movs	r1, #27
 8024c2c:	4628      	mov	r0, r5
 8024c2e:	f7df f867 	bl	8003d00 <lv_event_send>
 8024c32:	e57c      	b.n	802472e <lv_arc_event+0xde>
 8024c34:	08032ee0 	.word	0x08032ee0

08024c38 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024c38:	8883      	ldrh	r3, [r0, #4]
 8024c3a:	3301      	adds	r3, #1
 8024c3c:	8800      	ldrh	r0, [r0, #0]
 8024c3e:	1a18      	subs	r0, r3, r0
}
 8024c40:	b200      	sxth	r0, r0
 8024c42:	4770      	bx	lr

08024c44 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024c44:	88c3      	ldrh	r3, [r0, #6]
 8024c46:	3301      	adds	r3, #1
 8024c48:	8840      	ldrh	r0, [r0, #2]
 8024c4a:	1a18      	subs	r0, r3, r0
}
 8024c4c:	b200      	sxth	r0, r0
 8024c4e:	4770      	bx	lr

08024c50 <draw_indic>:
    lv_anim_del(&bar->cur_value_anim, NULL);
    lv_anim_del(&bar->start_value_anim, NULL);
}

static void draw_indic(lv_event_t * e)
{
 8024c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c54:	b0d1      	sub	sp, #324	; 0x144
 8024c56:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8024c58:	f7df f874 	bl	8003d44 <lv_event_get_target>
 8024c5c:	4604      	mov	r4, r0
    lv_bar_t * bar = (lv_bar_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8024c5e:	4628      	mov	r0, r5
 8024c60:	f7df f8e4 	bl	8003e2c <lv_event_get_draw_ctx>
 8024c64:	9003      	str	r0, [sp, #12]

    lv_area_t bar_coords;
    lv_obj_get_coords(obj, &bar_coords);
 8024c66:	a94e      	add	r1, sp, #312	; 0x138
 8024c68:	4620      	mov	r0, r4
 8024c6a:	f7e2 fee0 	bl	8007a2e <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8024c6e:	2268      	movs	r2, #104	; 0x68
 8024c70:	2100      	movs	r1, #0
 8024c72:	4620      	mov	r0, r4
 8024c74:	f7e5 fdb8 	bl	800a7e8 <lv_obj_get_style_prop>
 8024c78:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8024c7a:	2269      	movs	r2, #105	; 0x69
 8024c7c:	2100      	movs	r1, #0
 8024c7e:	4620      	mov	r0, r4
 8024c80:	f7e5 fdb2 	bl	800a7e8 <lv_obj_get_style_prop>

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
    bar_coords.x1 -= transf_w;
 8024c84:	f8bd 7138 	ldrh.w	r7, [sp, #312]	; 0x138
 8024c88:	b2b6      	uxth	r6, r6
 8024c8a:	1bbb      	subs	r3, r7, r6
 8024c8c:	f8ad 3138 	strh.w	r3, [sp, #312]	; 0x138
    bar_coords.x2 += transf_w;
 8024c90:	f8bd 213c 	ldrh.w	r2, [sp, #316]	; 0x13c
 8024c94:	4432      	add	r2, r6
 8024c96:	b292      	uxth	r2, r2
 8024c98:	f8ad 213c 	strh.w	r2, [sp, #316]	; 0x13c
    bar_coords.y1 -= transf_h;
 8024c9c:	f8bd 113a 	ldrh.w	r1, [sp, #314]	; 0x13a
 8024ca0:	b285      	uxth	r5, r0
 8024ca2:	1b4b      	subs	r3, r1, r5
 8024ca4:	f8ad 313a 	strh.w	r3, [sp, #314]	; 0x13a
    bar_coords.y2 += transf_h;
 8024ca8:	f8bd 313e 	ldrh.w	r3, [sp, #318]	; 0x13e
 8024cac:	442b      	add	r3, r5
 8024cae:	b29b      	uxth	r3, r3
 8024cb0:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024cb4:	3601      	adds	r6, #1
 8024cb6:	4416      	add	r6, r2
 8024cb8:	1bf6      	subs	r6, r6, r7
 8024cba:	b232      	sxth	r2, r6
 8024cbc:	9201      	str	r2, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024cbe:	3501      	adds	r5, #1
 8024cc0:	441d      	add	r5, r3
 8024cc2:	1a6d      	subs	r5, r5, r1
 8024cc4:	b22d      	sxth	r5, r5
    lv_coord_t barw = lv_area_get_width(&bar_coords);
    lv_coord_t barh = lv_area_get_height(&bar_coords);
    int32_t range = bar->max_value - bar->min_value;
 8024cc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8024cc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8024cca:	eba1 0b02 	sub.w	fp, r1, r2
    bool hor = barw >= barh ? true : false;
    bool sym = false;
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8024cce:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8024cd2:	f003 0303 	and.w	r3, r3, #3
 8024cd6:	2b01      	cmp	r3, #1
 8024cd8:	f000 80cf 	beq.w	8024e7a <draw_indic+0x22a>
    bool sym = false;
 8024cdc:	2300      	movs	r3, #0
 8024cde:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024ce0:	2212      	movs	r2, #18
 8024ce2:	2100      	movs	r1, #0
 8024ce4:	4620      	mov	r0, r4
 8024ce6:	f7e5 fd7f 	bl	800a7e8 <lv_obj_get_style_prop>
 8024cea:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8024cec:	2213      	movs	r2, #19
 8024cee:	2100      	movs	r1, #0
 8024cf0:	4620      	mov	r0, r4
 8024cf2:	f7e5 fd79 	bl	800a7e8 <lv_obj_get_style_prop>
 8024cf6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024cf8:	2210      	movs	r2, #16
 8024cfa:	2100      	movs	r1, #0
 8024cfc:	4620      	mov	r0, r4
 8024cfe:	f7e5 fd73 	bl	800a7e8 <lv_obj_get_style_prop>
 8024d02:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024d04:	2211      	movs	r2, #17
 8024d06:	2100      	movs	r1, #0
 8024d08:	4620      	mov	r0, r4
 8024d0a:	f7e5 fd6d 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj,     LV_PART_MAIN);
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj,   LV_PART_MAIN);
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj,       LV_PART_MAIN);
    lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    /*Respect padding and minimum width/height too*/
    lv_area_copy(&bar->indic_area, &bar_coords);
 8024d0e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8024d12:	9302      	str	r3, [sp, #8]
    dest->y1 = src->y1;
 8024d14:	f9bd 113a 	ldrsh.w	r1, [sp, #314]	; 0x13a
    dest->x2 = src->x2;
 8024d18:	f9bd 213c 	ldrsh.w	r2, [sp, #316]	; 0x13c
    dest->y2 = src->y2;
 8024d1c:	f9bd 313e 	ldrsh.w	r3, [sp, #318]	; 0x13e
    bar->indic_area.x1 += bg_left;
 8024d20:	fa1f f689 	uxth.w	r6, r9
 8024d24:	9606      	str	r6, [sp, #24]
 8024d26:	f8bd c138 	ldrh.w	ip, [sp, #312]	; 0x138
 8024d2a:	44b4      	add	ip, r6
 8024d2c:	fa1f fc8c 	uxth.w	ip, ip
 8024d30:	f8a4 c034 	strh.w	ip, [r4, #52]	; 0x34
    bar->indic_area.x2 -= bg_right;
 8024d34:	fa1f f688 	uxth.w	r6, r8
 8024d38:	9607      	str	r6, [sp, #28]
 8024d3a:	1b92      	subs	r2, r2, r6
 8024d3c:	b292      	uxth	r2, r2
 8024d3e:	8722      	strh	r2, [r4, #56]	; 0x38
    bar->indic_area.y1 += bg_top;
 8024d40:	b2be      	uxth	r6, r7
 8024d42:	9608      	str	r6, [sp, #32]
 8024d44:	4431      	add	r1, r6
 8024d46:	b289      	uxth	r1, r1
 8024d48:	86e1      	strh	r1, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 8024d4a:	b280      	uxth	r0, r0
 8024d4c:	9004      	str	r0, [sp, #16]
 8024d4e:	1a1b      	subs	r3, r3, r0
 8024d50:	b29b      	uxth	r3, r3
 8024d52:	8763      	strh	r3, [r4, #58]	; 0x3a

    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8024d54:	9801      	ldr	r0, [sp, #4]
 8024d56:	4285      	cmp	r5, r0
 8024d58:	f300 80a0 	bgt.w	8024e9c <draw_indic+0x24c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024d5c:	3301      	adds	r3, #1
 8024d5e:	1a5b      	subs	r3, r3, r1
 8024d60:	b21b      	sxth	r3, r3
 8024d62:	2b03      	cmp	r3, #3
 8024d64:	dc09      	bgt.n	8024d7a <draw_indic+0x12a>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8024d66:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 8024d6a:	8ae2      	ldrh	r2, [r4, #22]
 8024d6c:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8024d70:	b29b      	uxth	r3, r3
 8024d72:	1e9a      	subs	r2, r3, #2
 8024d74:	86e2      	strh	r2, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 8024d76:	3302      	adds	r3, #2
 8024d78:	8763      	strh	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024d7a:	f8b4 9038 	ldrh.w	r9, [r4, #56]	; 0x38
 8024d7e:	f109 0901 	add.w	r9, r9, #1
 8024d82:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8024d84:	eba9 0903 	sub.w	r9, r9, r3
 8024d88:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024d8c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8024d8e:	3301      	adds	r3, #1
 8024d90:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8024d92:	1a9b      	subs	r3, r3, r2
 8024d94:	b21b      	sxth	r3, r3
 8024d96:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t * axis1, * axis2;
    lv_coord_t (*indic_length_calc)(const lv_area_t * area);

    if(hor) {
        axis1 = &bar->indic_area.x1;
        axis2 = &bar->indic_area.x2;
 8024d98:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8024d9c:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024d9e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        axis1 = &bar->indic_area.x1;
 8024da2:	f8dd a008 	ldr.w	sl, [sp, #8]
        indic_length_calc = lv_area_get_width;
 8024da6:	4b8c      	ldr	r3, [pc, #560]	; (8024fd8 <draw_indic+0x388>)
 8024da8:	930b      	str	r3, [sp, #44]	; 0x2c
        axis1 = &bar->indic_area.y1;
        axis2 = &bar->indic_area.y2;
        indic_length_calc = lv_area_get_height;
    }

    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 8024daa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8024dac:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8024db0:	f000 809e 	beq.w	8024ef0 <draw_indic+0x2a0>
        lv_coord_t anim_start_value_start_x =
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 8024db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024db6:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8024db8:	1aff      	subs	r7, r7, r3
 8024dba:	fb09 f707 	mul.w	r7, r9, r7
 8024dbe:	fb97 f7fb 	sdiv	r7, r7, fp
        lv_coord_t anim_start_value_end_x =
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 8024dc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8024dc4:	1ad3      	subs	r3, r2, r3
 8024dc6:	fb09 f303 	mul.w	r3, r9, r3
 8024dca:	fb93 f3fb 	sdiv	r3, r3, fp

        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 8024dce:	b21b      	sxth	r3, r3
 8024dd0:	b23a      	sxth	r2, r7
 8024dd2:	1a9b      	subs	r3, r3, r2
 8024dd4:	fb01 f303 	mul.w	r3, r1, r3
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	bfb8      	it	lt
 8024ddc:	33ff      	addlt	r3, #255	; 0xff
                              LV_BAR_ANIM_STATE_END);

        anim_start_value_x += anim_start_value_start_x;
 8024dde:	eb07 2723 	add.w	r7, r7, r3, asr #8
 8024de2:	b23f      	sxth	r7, r7
    }
    else {
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
    }

    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 8024de4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024de6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8024dea:	f000 808a 	beq.w	8024f02 <draw_indic+0x2b2>
        lv_coord_t anim_cur_value_start_x =
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 8024dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024df0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8024df2:	eba0 0803 	sub.w	r8, r0, r3
 8024df6:	fb09 f808 	mul.w	r8, r9, r8
 8024dfa:	fb98 f8fb 	sdiv	r8, r8, fp
        lv_coord_t anim_cur_value_end_x =
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 8024dfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8024e00:	1ad3      	subs	r3, r2, r3
 8024e02:	fb09 f303 	mul.w	r3, r9, r3
 8024e06:	fb93 f3fb 	sdiv	r3, r3, fp

        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8024e0a:	b21b      	sxth	r3, r3
 8024e0c:	fa0f f288 	sxth.w	r2, r8
 8024e10:	1a9b      	subs	r3, r3, r2
 8024e12:	fb01 f303 	mul.w	r3, r1, r3
                                                      bar->cur_value_anim.anim_state) /
 8024e16:	2b00      	cmp	r3, #0
 8024e18:	bfb8      	it	lt
 8024e1a:	33ff      	addlt	r3, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 8024e1c:	eb08 2823 	add.w	r8, r8, r3, asr #8
 8024e20:	fa0f f888 	sxth.w	r8, r8
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8024e24:	2216      	movs	r2, #22
 8024e26:	2100      	movs	r1, #0
 8024e28:	4620      	mov	r0, r4
 8024e2a:	f7e5 fcdd 	bl	800a7e8 <lv_obj_get_style_prop>
    else {
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
    }

    lv_base_dir_t base_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 8024e2e:	9b01      	ldr	r3, [sp, #4]
 8024e30:	429d      	cmp	r5, r3
 8024e32:	f300 80d7 	bgt.w	8024fe4 <draw_indic+0x394>
 8024e36:	b2c0      	uxtb	r0, r0
 8024e38:	2801      	cmp	r0, #1
 8024e3a:	d06d      	beq.n	8024f18 <draw_indic+0x2c8>
        anim_start_value_x = -anim_start_value_x;
    }

    /*Set the indicator length*/
    if(hor) {
        *axis2 = *axis1 + anim_cur_value_x;
 8024e3c:	f8ba 3000 	ldrh.w	r3, [sl]
 8024e40:	4498      	add	r8, r3
 8024e42:	f8a6 8000 	strh.w	r8, [r6]
        *axis1 += anim_start_value_x;
 8024e46:	f8ba 3000 	ldrh.w	r3, [sl]
 8024e4a:	441f      	add	r7, r3
 8024e4c:	b2bf      	uxth	r7, r7
 8024e4e:	f8aa 7000 	strh.w	r7, [sl]
    }
    else {
        *axis1 = *axis2 - anim_cur_value_x + 1;
        *axis2 -= anim_start_value_x;
    }
    if(sym) {
 8024e52:	9b05      	ldr	r3, [sp, #20]
 8024e54:	2b00      	cmp	r3, #0
 8024e56:	f000 80d2 	beq.w	8024ffe <draw_indic+0x3ae>
        lv_coord_t zero, shift;
        shift = (-bar->min_value * anim_length) / range;
 8024e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024e5c:	425b      	negs	r3, r3
 8024e5e:	fb09 f903 	mul.w	r9, r9, r3
 8024e62:	fb99 fbfb 	sdiv	fp, r9, fp
        if(hor) {
            zero = *axis1 + shift;
 8024e66:	445f      	add	r7, fp
 8024e68:	b23f      	sxth	r7, r7
            if(*axis2 > zero)
 8024e6a:	f9b6 3000 	ldrsh.w	r3, [r6]
 8024e6e:	42bb      	cmp	r3, r7
 8024e70:	dc5c      	bgt.n	8024f2c <draw_indic+0x2dc>
                *axis1 = zero;
            else {
                *axis1 = *axis2;
 8024e72:	f8aa 3000 	strh.w	r3, [sl]
                *axis2 = zero;
 8024e76:	8037      	strh	r7, [r6, #0]
 8024e78:	e0c6      	b.n	8025008 <draw_indic+0x3b8>
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8024e7a:	2a00      	cmp	r2, #0
 8024e7c:	db02      	blt.n	8024e84 <draw_indic+0x234>
    bool sym = false;
 8024e7e:	2300      	movs	r3, #0
 8024e80:	9305      	str	r3, [sp, #20]
 8024e82:	e72d      	b.n	8024ce0 <draw_indic+0x90>
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8024e84:	2900      	cmp	r1, #0
 8024e86:	dd06      	ble.n	8024e96 <draw_indic+0x246>
 8024e88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8024e8a:	4293      	cmp	r3, r2
 8024e8c:	bf14      	ite	ne
 8024e8e:	2300      	movne	r3, #0
 8024e90:	2301      	moveq	r3, #1
 8024e92:	9305      	str	r3, [sp, #20]
 8024e94:	e724      	b.n	8024ce0 <draw_indic+0x90>
    bool sym = false;
 8024e96:	2300      	movs	r3, #0
 8024e98:	9305      	str	r3, [sp, #20]
 8024e9a:	e721      	b.n	8024ce0 <draw_indic+0x90>
 8024e9c:	3201      	adds	r2, #1
 8024e9e:	eba2 020c 	sub.w	r2, r2, ip
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8024ea2:	b212      	sxth	r2, r2
 8024ea4:	2a03      	cmp	r2, #3
 8024ea6:	dc0a      	bgt.n	8024ebe <draw_indic+0x26e>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8024ea8:	9b01      	ldr	r3, [sp, #4]
 8024eaa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8024eae:	8aa2      	ldrh	r2, [r4, #20]
 8024eb0:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8024eb4:	b29b      	uxth	r3, r3
 8024eb6:	1e9a      	subs	r2, r3, #2
 8024eb8:	86a2      	strh	r2, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 8024eba:	3302      	adds	r3, #2
 8024ebc:	8723      	strh	r3, [r4, #56]	; 0x38
 8024ebe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8024ec0:	3301      	adds	r3, #1
 8024ec2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8024ec4:	1a9b      	subs	r3, r3, r2
 8024ec6:	b21b      	sxth	r3, r3
 8024ec8:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8024eca:	f8b4 903a 	ldrh.w	r9, [r4, #58]	; 0x3a
 8024ece:	f109 0901 	add.w	r9, r9, #1
 8024ed2:	46a2      	mov	sl, r4
 8024ed4:	f83a 3f36 	ldrh.w	r3, [sl, #54]!
 8024ed8:	eba9 0903 	sub.w	r9, r9, r3
 8024edc:	fa0f f989 	sxth.w	r9, r9
        axis2 = &bar->indic_area.y2;
 8024ee0:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 8024ee4:	461e      	mov	r6, r3
 8024ee6:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
        indic_length_calc = lv_area_get_height;
 8024eea:	4b3c      	ldr	r3, [pc, #240]	; (8024fdc <draw_indic+0x38c>)
 8024eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8024eee:	e75c      	b.n	8024daa <draw_indic+0x15a>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 8024ef0:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8024ef2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024ef4:	1aff      	subs	r7, r7, r3
 8024ef6:	fb09 f707 	mul.w	r7, r9, r7
 8024efa:	fb97 f7fb 	sdiv	r7, r7, fp
 8024efe:	b23f      	sxth	r7, r7
 8024f00:	e770      	b.n	8024de4 <draw_indic+0x194>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 8024f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024f04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8024f06:	eba3 0802 	sub.w	r8, r3, r2
 8024f0a:	fb09 f808 	mul.w	r8, r9, r8
 8024f0e:	fb98 f8fb 	sdiv	r8, r8, fp
 8024f12:	fa0f f888 	sxth.w	r8, r8
 8024f16:	e785      	b.n	8024e24 <draw_indic+0x1d4>
        anim_cur_value_x = -anim_cur_value_x;
 8024f18:	f1c8 0800 	rsb	r8, r8, #0
 8024f1c:	fa0f f888 	sxth.w	r8, r8
        anim_start_value_x = -anim_start_value_x;
 8024f20:	427f      	negs	r7, r7
 8024f22:	b23f      	sxth	r7, r7
 8024f24:	4653      	mov	r3, sl
        axis1 = axis2;
 8024f26:	46b2      	mov	sl, r6
        axis2 = tmp;
 8024f28:	461e      	mov	r6, r3
 8024f2a:	e787      	b.n	8024e3c <draw_indic+0x1ec>
                *axis1 = zero;
 8024f2c:	f8aa 7000 	strh.w	r7, [sl]
 8024f30:	e06a      	b.n	8025008 <draw_indic+0x3b8>
            }
        }
        else {
            zero = *axis2 - shift + 1;
            if(*axis1 > zero)
                *axis2 = zero;
 8024f32:	8037      	strh	r7, [r6, #0]
            else {
                *axis2 = *axis1;
                *axis1 = zero;
            }
            if(*axis2 < *axis1) {
 8024f34:	f9b6 2000 	ldrsh.w	r2, [r6]
 8024f38:	f9ba 3000 	ldrsh.w	r3, [sl]
 8024f3c:	429a      	cmp	r2, r3
 8024f3e:	da63      	bge.n	8025008 <draw_indic+0x3b8>
                /*swap*/
                zero = *axis1;
                *axis1 = *axis2;
 8024f40:	f8aa 2000 	strh.w	r2, [sl]
                *axis2 = zero;
 8024f44:	8033      	strh	r3, [r6, #0]
 8024f46:	e05f      	b.n	8025008 <draw_indic+0x3b8>

    /*Do not draw a zero length indicator but at least call the draw part events*/
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {

        lv_obj_draw_part_dsc_t part_draw_dsc;
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8024f48:	9903      	ldr	r1, [sp, #12]
 8024f4a:	a80c      	add	r0, sp, #48	; 0x30
 8024f4c:	f7e2 fbc1 	bl	80076d2 <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_INDICATOR;
 8024f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024f54:	9319      	str	r3, [sp, #100]	; 0x64
        part_draw_dsc.class_p = MY_CLASS;
 8024f56:	4b22      	ldr	r3, [pc, #136]	; (8024fe0 <draw_indic+0x390>)
 8024f58:	930d      	str	r3, [sp, #52]	; 0x34
        part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 8024f5a:	2300      	movs	r3, #0
 8024f5c:	930e      	str	r3, [sp, #56]	; 0x38
        part_draw_dsc.draw_area = &bar->indic_area;
 8024f5e:	9b02      	ldr	r3, [sp, #8]
 8024f60:	930f      	str	r3, [sp, #60]	; 0x3c

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8024f62:	aa0c      	add	r2, sp, #48	; 0x30
 8024f64:	211a      	movs	r1, #26
 8024f66:	4620      	mov	r0, r4
 8024f68:	f7de feca 	bl	8003d00 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8024f6c:	aa0c      	add	r2, sp, #48	; 0x30
 8024f6e:	211b      	movs	r1, #27
 8024f70:	4620      	mov	r0, r4
 8024f72:	f7de fec5 	bl	8003d00 <lv_event_send>
        return;
 8024f76:	e12c      	b.n	80251d2 <draw_indic+0x582>
 8024f78:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8024f7a:	3201      	adds	r2, #1
 8024f7c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8024f7e:	1a52      	subs	r2, r2, r1

    /*Draw only the shadow and outline only if the indicator is long enough.
     *The radius of the bg and the indicator can make a strange shape where
     *it'd be very difficult to draw shadow.*/
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
       (!hor && lv_area_get_height(&bar->indic_area) > indic_radius * 2)) {
 8024f80:	b212      	sxth	r2, r2
 8024f82:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8024f86:	f340 809b 	ble.w	80250c0 <draw_indic+0x470>
 8024f8a:	e081      	b.n	8025090 <draw_indic+0x440>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8024f8c:	3301      	adds	r3, #1
 8024f8e:	1a5b      	subs	r3, r3, r1
    mask_indic_max_area.y2 -= bg_bottom;
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
    }
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8024f90:	b21b      	sxth	r3, r3
 8024f92:	2b03      	cmp	r3, #3
 8024f94:	f300 80ea 	bgt.w	802516c <draw_indic+0x51c>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 8024f98:	9b01      	ldr	r3, [sp, #4]
 8024f9a:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 8024f9e:	8aa3      	ldrh	r3, [r4, #20]
 8024fa0:	eb03 0666 	add.w	r6, r3, r6, asr #1
 8024fa4:	b2b6      	uxth	r6, r6
 8024fa6:	1eb3      	subs	r3, r6, #2
 8024fa8:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8024fac:	3602      	adds	r6, #2
 8024fae:	f8ad 6094 	strh.w	r6, [sp, #148]	; 0x94
 8024fb2:	e0db      	b.n	802516c <draw_indic+0x51c>
            zero = *axis2 - shift + 1;
 8024fb4:	3701      	adds	r7, #1
        shift = (-bar->min_value * anim_length) / range;
 8024fb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024fb8:	425b      	negs	r3, r3
 8024fba:	fb09 f903 	mul.w	r9, r9, r3
 8024fbe:	fb99 fbfb 	sdiv	fp, r9, fp
            zero = *axis2 - shift + 1;
 8024fc2:	eba7 070b 	sub.w	r7, r7, fp
 8024fc6:	b23f      	sxth	r7, r7
            if(*axis1 > zero)
 8024fc8:	f9ba 3000 	ldrsh.w	r3, [sl]
 8024fcc:	42bb      	cmp	r3, r7
 8024fce:	dcb0      	bgt.n	8024f32 <draw_indic+0x2e2>
                *axis2 = *axis1;
 8024fd0:	8033      	strh	r3, [r6, #0]
                *axis1 = zero;
 8024fd2:	f8aa 7000 	strh.w	r7, [sl]
 8024fd6:	e7ad      	b.n	8024f34 <draw_indic+0x2e4>
 8024fd8:	08024c39 	.word	0x08024c39
 8024fdc:	08024c45 	.word	0x08024c45
 8024fe0:	08032efc 	.word	0x08032efc
        *axis1 = *axis2 - anim_cur_value_x + 1;
 8024fe4:	8833      	ldrh	r3, [r6, #0]
 8024fe6:	3301      	adds	r3, #1
 8024fe8:	eba3 0808 	sub.w	r8, r3, r8
 8024fec:	f8aa 8000 	strh.w	r8, [sl]
        *axis2 -= anim_start_value_x;
 8024ff0:	8833      	ldrh	r3, [r6, #0]
 8024ff2:	1bdf      	subs	r7, r3, r7
 8024ff4:	b2bf      	uxth	r7, r7
 8024ff6:	8037      	strh	r7, [r6, #0]
    if(sym) {
 8024ff8:	9b05      	ldr	r3, [sp, #20]
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	d1da      	bne.n	8024fb4 <draw_indic+0x364>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 8024ffe:	9802      	ldr	r0, [sp, #8]
 8025000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025002:	4798      	blx	r3
 8025004:	2801      	cmp	r0, #1
 8025006:	dd9f      	ble.n	8024f48 <draw_indic+0x2f8>
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 8025008:	af40      	add	r7, sp, #256	; 0x100
 802500a:	4638      	mov	r0, r7
 802500c:	f7ea f8ac 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 8025010:	463a      	mov	r2, r7
 8025012:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8025016:	4620      	mov	r0, r4
 8025018:	f7e2 f820 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 802501c:	9903      	ldr	r1, [sp, #12]
 802501e:	a82e      	add	r0, sp, #184	; 0xb8
 8025020:	f7e2 fb57 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 8025024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025028:	933b      	str	r3, [sp, #236]	; 0xec
    part_draw_dsc.class_p = MY_CLASS;
 802502a:	4b6b      	ldr	r3, [pc, #428]	; (80251d8 <draw_indic+0x588>)
 802502c:	932f      	str	r3, [sp, #188]	; 0xbc
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 802502e:	f04f 0800 	mov.w	r8, #0
 8025032:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
    part_draw_dsc.rect_dsc = &draw_rect_dsc;
 8025036:	9732      	str	r7, [sp, #200]	; 0xc8
    part_draw_dsc.draw_area = &bar->indic_area;
 8025038:	9b02      	ldr	r3, [sp, #8]
 802503a:	9331      	str	r3, [sp, #196]	; 0xc4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802503c:	aa2e      	add	r2, sp, #184	; 0xb8
 802503e:	211a      	movs	r1, #26
 8025040:	4620      	mov	r0, r4
 8025042:	f7de fe5d 	bl	8003d00 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8025046:	220b      	movs	r2, #11
 8025048:	4641      	mov	r1, r8
 802504a:	4620      	mov	r0, r4
 802504c:	f7e5 fbcc 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025050:	b200      	sxth	r0, r0
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 8025052:	462f      	mov	r7, r5
 8025054:	9e01      	ldr	r6, [sp, #4]
 8025056:	42b5      	cmp	r5, r6
 8025058:	bfa8      	it	ge
 802505a:	4637      	movge	r7, r6
 802505c:	107f      	asrs	r7, r7, #1
 802505e:	4287      	cmp	r7, r0
 8025060:	bfa8      	it	ge
 8025062:	4607      	movge	r7, r0
    lv_coord_t indic_radius = draw_rect_dsc.radius;
 8025064:	f9bd 1100 	ldrsh.w	r1, [sp, #256]	; 0x100
    if(indic_radius > short_side >> 1) indic_radius = short_side >> 1;
 8025068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802506a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802506c:	429a      	cmp	r2, r3
 802506e:	bfa8      	it	ge
 8025070:	461a      	movge	r2, r3
 8025072:	1053      	asrs	r3, r2, #1
 8025074:	428b      	cmp	r3, r1
 8025076:	bfa8      	it	ge
 8025078:	460b      	movge	r3, r1
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
 802507a:	42b5      	cmp	r5, r6
 802507c:	f73f af7c 	bgt.w	8024f78 <draw_indic+0x328>
 8025080:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8025082:	3201      	adds	r2, #1
 8025084:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8025086:	1a52      	subs	r2, r2, r1
 8025088:	b212      	sxth	r2, r2
 802508a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 802508e:	dd17      	ble.n	80250c0 <draw_indic+0x470>
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 8025090:	f89d a103 	ldrb.w	sl, [sp, #259]	; 0x103
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 8025094:	f89d 911a 	ldrb.w	r9, [sp, #282]	; 0x11a
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8025098:	f89d 8122 	ldrb.w	r8, [sp, #290]	; 0x122
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 802509c:	2300      	movs	r3, #0
 802509e:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 80250a2:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 80250a6:	f88d 3122 	strb.w	r3, [sp, #290]	; 0x122
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 80250aa:	9a02      	ldr	r2, [sp, #8]
 80250ac:	a940      	add	r1, sp, #256	; 0x100
 80250ae:	9803      	ldr	r0, [sp, #12]
 80250b0:	f7ea f8b6 	bl	800f220 <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 80250b4:	f88d a103 	strb.w	sl, [sp, #259]	; 0x103
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 80250b8:	f88d 911a 	strb.w	r9, [sp, #282]	; 0x11a
        draw_rect_dsc.border_opa = border_opa;
 80250bc:	f88d 8122 	strb.w	r8, [sp, #290]	; 0x122
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 80250c0:	8aa3      	ldrh	r3, [r4, #20]
 80250c2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80250c6:	444b      	add	r3, r9
 80250c8:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 80250cc:	8b23      	ldrh	r3, [r4, #24]
 80250ce:	9e07      	ldr	r6, [sp, #28]
 80250d0:	1b9b      	subs	r3, r3, r6
 80250d2:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 80250d6:	8ae3      	ldrh	r3, [r4, #22]
 80250d8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80250dc:	4453      	add	r3, sl
 80250de:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 80250e2:	8b63      	ldrh	r3, [r4, #26]
 80250e4:	9904      	ldr	r1, [sp, #16]
 80250e6:	1a5b      	subs	r3, r3, r1
 80250e8:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 80250ec:	2300      	movs	r3, #0
 80250ee:	463a      	mov	r2, r7
 80250f0:	a926      	add	r1, sp, #152	; 0x98
 80250f2:	a828      	add	r0, sp, #160	; 0xa0
 80250f4:	f7e9 fde4 	bl	800ecc0 <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 80250f8:	2100      	movs	r1, #0
 80250fa:	a828      	add	r0, sp, #160	; 0xa0
 80250fc:	f7e9 fbde 	bl	800e8bc <lv_draw_mask_add>
 8025100:	4607      	mov	r7, r0
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8025102:	f89d 8122 	ldrb.w	r8, [sp, #290]	; 0x122
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8025106:	2300      	movs	r3, #0
 8025108:	f88d 3122 	strb.w	r3, [sp, #290]	; 0x122
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 802510c:	f88d 3136 	strb.w	r3, [sp, #310]	; 0x136
    dest->y1 = src->y1;
 8025110:	f9bd 213a 	ldrsh.w	r2, [sp, #314]	; 0x13a
    dest->x2 = src->x2;
 8025114:	f9bd 313c 	ldrsh.w	r3, [sp, #316]	; 0x13c
    dest->y2 = src->y2;
 8025118:	f9bd 013e 	ldrsh.w	r0, [sp, #318]	; 0x13e
    mask_indic_max_area.x1 += bg_left;
 802511c:	f8bd 1138 	ldrh.w	r1, [sp, #312]	; 0x138
 8025120:	4449      	add	r1, r9
 8025122:	b289      	uxth	r1, r1
 8025124:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
    mask_indic_max_area.y1 += bg_top;
 8025128:	4452      	add	r2, sl
 802512a:	b292      	uxth	r2, r2
 802512c:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
    mask_indic_max_area.x2 -= bg_right;
 8025130:	1b9b      	subs	r3, r3, r6
 8025132:	b29b      	uxth	r3, r3
 8025134:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    mask_indic_max_area.y2 -= bg_bottom;
 8025138:	9e04      	ldr	r6, [sp, #16]
 802513a:	1b80      	subs	r0, r0, r6
 802513c:	b280      	uxth	r0, r0
 802513e:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8025142:	9e01      	ldr	r6, [sp, #4]
 8025144:	42b5      	cmp	r5, r6
 8025146:	f73f af21 	bgt.w	8024f8c <draw_indic+0x33c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802514a:	3001      	adds	r0, #1
 802514c:	1a80      	subs	r0, r0, r2
 802514e:	b200      	sxth	r0, r0
 8025150:	2803      	cmp	r0, #3
 8025152:	dc0b      	bgt.n	802516c <draw_indic+0x51c>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8025154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025158:	8ae3      	ldrh	r3, [r4, #22]
 802515a:	eb03 0565 	add.w	r5, r3, r5, asr #1
 802515e:	b2ad      	uxth	r5, r5
 8025160:	1eab      	subs	r3, r5, #2
 8025162:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 8025166:	3502      	adds	r5, #2
 8025168:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    }

#if LV_DRAW_COMPLEX
    /*Create a mask to the current indicator area to see only this part from the whole gradient.*/
    lv_draw_mask_radius_param_t mask_indic_param;
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 802516c:	2300      	movs	r3, #0
 802516e:	f9bd 2100 	ldrsh.w	r2, [sp, #256]	; 0x100
 8025172:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8025176:	4649      	mov	r1, r9
 8025178:	a81e      	add	r0, sp, #120	; 0x78
 802517a:	f7e9 fda1 	bl	800ecc0 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 802517e:	2100      	movs	r1, #0
 8025180:	a81e      	add	r0, sp, #120	; 0x78
 8025182:	f7e9 fb9b 	bl	800e8bc <lv_draw_mask_add>
 8025186:	4605      	mov	r5, r0
#endif

    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 8025188:	aa24      	add	r2, sp, #144	; 0x90
 802518a:	a940      	add	r1, sp, #256	; 0x100
 802518c:	9e03      	ldr	r6, [sp, #12]
 802518e:	4630      	mov	r0, r6
 8025190:	f7ea f846 	bl	800f220 <lv_draw_rect>
    draw_rect_dsc.border_opa = border_opa;
 8025194:	f88d 8122 	strb.w	r8, [sp, #290]	; 0x122
    draw_rect_dsc.shadow_opa = shadow_opa;

    /*Draw the border*/
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8025198:	2300      	movs	r3, #0
 802519a:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 802519e:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 80251a2:	f88d 3136 	strb.w	r3, [sp, #310]	; 0x136
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 80251a6:	464a      	mov	r2, r9
 80251a8:	a940      	add	r1, sp, #256	; 0x100
 80251aa:	4630      	mov	r0, r6
 80251ac:	f7ea f838 	bl	800f220 <lv_draw_rect>

#if LV_DRAW_COMPLEX
    lv_draw_mask_free_param(&mask_indic_param);
 80251b0:	a81e      	add	r0, sp, #120	; 0x78
 80251b2:	f7e9 fbf7 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_bg_param);
 80251b6:	a828      	add	r0, sp, #160	; 0xa0
 80251b8:	f7e9 fbf4 	bl	800e9a4 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_indic_id);
 80251bc:	4628      	mov	r0, r5
 80251be:	f7e9 fbc7 	bl	800e950 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 80251c2:	4638      	mov	r0, r7
 80251c4:	f7e9 fbc4 	bl	800e950 <lv_draw_mask_remove_id>
#endif

    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80251c8:	aa2e      	add	r2, sp, #184	; 0xb8
 80251ca:	211b      	movs	r1, #27
 80251cc:	4620      	mov	r0, r4
 80251ce:	f7de fd97 	bl	8003d00 <lv_event_send>
}
 80251d2:	b051      	add	sp, #324	; 0x144
 80251d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251d8:	08032efc 	.word	0x08032efc

080251dc <lv_bar_event>:

static void lv_bar_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80251dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80251e0:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 80251e2:	482e      	ldr	r0, [pc, #184]	; (802529c <lv_bar_event+0xc0>)
 80251e4:	f7de fc8f 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80251e8:	2801      	cmp	r0, #1
 80251ea:	d001      	beq.n	80251f0 <lv_bar_event+0x14>
        lv_obj_invalidate_area(obj, &bar->indic_area);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_indic(e);
    }
}
 80251ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80251f0:	4620      	mov	r0, r4
 80251f2:	f7de fdab 	bl	8003d4c <lv_event_get_code>
 80251f6:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80251f8:	4620      	mov	r0, r4
 80251fa:	f7de fda3 	bl	8003d44 <lv_event_get_target>
 80251fe:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8025200:	2d13      	cmp	r5, #19
 8025202:	d009      	beq.n	8025218 <lv_bar_event+0x3c>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 8025204:	2d01      	cmp	r5, #1
 8025206:	d043      	beq.n	8025290 <lv_bar_event+0xb4>
 8025208:	2d08      	cmp	r5, #8
 802520a:	d041      	beq.n	8025290 <lv_bar_event+0xb4>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802520c:	2d15      	cmp	r5, #21
 802520e:	d1ed      	bne.n	80251ec <lv_bar_event+0x10>
        draw_indic(e);
 8025210:	4620      	mov	r0, r4
 8025212:	f7ff fd1d 	bl	8024c50 <draw_indic>
 8025216:	e7e9      	b.n	80251ec <lv_bar_event+0x10>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8025218:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802521c:	f7e2 f9ef 	bl	80075fe <lv_obj_calculate_ext_draw_size>
 8025220:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 8025222:	4620      	mov	r0, r4
 8025224:	f7de fd96 	bl	8003d54 <lv_event_get_param>
 8025228:	4605      	mov	r5, r0
        *s = LV_MAX(*s, indic_size);
 802522a:	f9b0 0000 	ldrsh.w	r0, [r0]
 802522e:	42b8      	cmp	r0, r7
 8025230:	bfb8      	it	lt
 8025232:	4638      	movlt	r0, r7
 8025234:	8028      	strh	r0, [r5, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8025236:	2212      	movs	r2, #18
 8025238:	2100      	movs	r1, #0
 802523a:	4630      	mov	r0, r6
 802523c:	f7e5 fad4 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025240:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8025244:	2213      	movs	r2, #19
 8025246:	2100      	movs	r1, #0
 8025248:	4630      	mov	r0, r6
 802524a:	f7e5 facd 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802524e:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025250:	2210      	movs	r2, #16
 8025252:	2100      	movs	r1, #0
 8025254:	4630      	mov	r0, r6
 8025256:	f7e5 fac7 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802525a:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802525c:	2211      	movs	r2, #17
 802525e:	2100      	movs	r1, #0
 8025260:	4630      	mov	r0, r6
 8025262:	f7e5 fac1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025266:	b200      	sxth	r0, r0
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 8025268:	4623      	mov	r3, r4
 802526a:	4544      	cmp	r4, r8
 802526c:	bfa8      	it	ge
 802526e:	4643      	movge	r3, r8
 8025270:	42bb      	cmp	r3, r7
 8025272:	bfa8      	it	ge
 8025274:	463b      	movge	r3, r7
 8025276:	4283      	cmp	r3, r0
 8025278:	bfa8      	it	ge
 802527a:	4603      	movge	r3, r0
        if(pad < 0) {
 802527c:	2b00      	cmp	r3, #0
 802527e:	dab5      	bge.n	80251ec <lv_bar_event+0x10>
            *s = LV_MAX(*s, -pad);
 8025280:	425b      	negs	r3, r3
 8025282:	f9b5 2000 	ldrsh.w	r2, [r5]
 8025286:	4293      	cmp	r3, r2
 8025288:	bfb8      	it	lt
 802528a:	4613      	movlt	r3, r2
 802528c:	802b      	strh	r3, [r5, #0]
 802528e:	e7ad      	b.n	80251ec <lv_bar_event+0x10>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 8025290:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8025294:	4630      	mov	r0, r6
 8025296:	f7e2 fe4b 	bl	8007f30 <lv_obj_invalidate_area>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 802529a:	e7a7      	b.n	80251ec <lv_bar_event+0x10>
 802529c:	08032efc 	.word	0x08032efc

080252a0 <lv_bar_destructor>:
{
 80252a0:	b510      	push	{r4, lr}
 80252a2:	460c      	mov	r4, r1
    lv_anim_del(&bar->cur_value_anim, NULL);
 80252a4:	2100      	movs	r1, #0
 80252a6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80252aa:	f7fb fa7f 	bl	80207ac <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 80252ae:	2100      	movs	r1, #0
 80252b0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80252b4:	f7fb fa7a 	bl	80207ac <lv_anim_del>
}
 80252b8:	bd10      	pop	{r4, pc}

080252ba <lv_bar_anim_ready>:
    bar_anim->anim_state    = value;
    lv_obj_invalidate(bar_anim->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
 80252ba:	b508      	push	{r3, lr}
    _lv_bar_anim_t * var = a->var;
 80252bc:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 80252be:	681a      	ldr	r2, [r3, #0]
    lv_bar_t * bar = (lv_bar_t *)obj;

    var->anim_state = LV_BAR_ANIM_STATE_INV;
 80252c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80252c4:	60d9      	str	r1, [r3, #12]
    if(var == &bar->cur_value_anim)
 80252c6:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 80252ca:	428b      	cmp	r3, r1
 80252cc:	d009      	beq.n	80252e2 <lv_bar_anim_ready+0x28>
        bar->cur_value = var->anim_end;
    else if(var == &bar->start_value_anim)
 80252ce:	f102 014c 	add.w	r1, r2, #76	; 0x4c
 80252d2:	428b      	cmp	r3, r1
        bar->start_value = var->anim_end;
 80252d4:	bf04      	itt	eq
 80252d6:	6899      	ldreq	r1, [r3, #8]
 80252d8:	6311      	streq	r1, [r2, #48]	; 0x30
    lv_obj_invalidate(var->bar);
 80252da:	6818      	ldr	r0, [r3, #0]
 80252dc:	f7e2 fe4c 	bl	8007f78 <lv_obj_invalidate>
}
 80252e0:	bd08      	pop	{r3, pc}
        bar->cur_value = var->anim_end;
 80252e2:	6899      	ldr	r1, [r3, #8]
 80252e4:	6251      	str	r1, [r2, #36]	; 0x24
 80252e6:	e7f8      	b.n	80252da <lv_bar_anim_ready+0x20>

080252e8 <lv_bar_anim>:
{
 80252e8:	b508      	push	{r3, lr}
    bar_anim->anim_state    = value;
 80252ea:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 80252ec:	6800      	ldr	r0, [r0, #0]
 80252ee:	f7e2 fe43 	bl	8007f78 <lv_obj_invalidate>
}
 80252f2:	bd08      	pop	{r3, pc}

080252f4 <lv_bar_set_value_with_anim>:

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
                                       _lv_bar_anim_t * anim_info, lv_anim_enable_t en)
{
 80252f4:	b530      	push	{r4, r5, lr}
 80252f6:	b093      	sub	sp, #76	; 0x4c
 80252f8:	4605      	mov	r5, r0
 80252fa:	461c      	mov	r4, r3
 80252fc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    if(en == LV_ANIM_OFF) {
 8025300:	b323      	cbz	r3, 802534c <lv_bar_set_value_with_anim+0x58>
        *value_ptr = new_value;
        lv_obj_invalidate((lv_obj_t *)obj);
    }
    else {
        /*No animation in progress -> simply set the values*/
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8025302:	68e3      	ldr	r3, [r4, #12]
 8025304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
            anim_info->anim_start = *value_ptr;
 8025308:	bf0c      	ite	eq
 802530a:	6813      	ldreq	r3, [r2, #0]
            anim_info->anim_end   = new_value;
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_info->anim_start = anim_info->anim_end;
 802530c:	68a3      	ldrne	r3, [r4, #8]
 802530e:	6063      	str	r3, [r4, #4]
            anim_info->anim_end   = new_value;
 8025310:	60a1      	str	r1, [r4, #8]
        }
        *value_ptr = new_value;
 8025312:	6011      	str	r1, [r2, #0]
        /*Stop the previous animation if it exists*/
        lv_anim_del(anim_info, NULL);
 8025314:	2100      	movs	r1, #0
 8025316:	4620      	mov	r0, r4
 8025318:	f7fb fa48 	bl	80207ac <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 802531c:	a801      	add	r0, sp, #4
 802531e:	f7fb fa2b 	bl	8020778 <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 8025322:	9401      	str	r4, [sp, #4]
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 8025324:	4b0b      	ldr	r3, [pc, #44]	; (8025354 <lv_bar_set_value_with_anim+0x60>)
 8025326:	9302      	str	r3, [sp, #8]
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
    a->start_value = start;
 8025328:	2100      	movs	r1, #0
 802532a:	9109      	str	r1, [sp, #36]	; 0x24
    a->current_value = start;
 802532c:	910a      	str	r1, [sp, #40]	; 0x28
    a->end_value = end;
 802532e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8025332:	930b      	str	r3, [sp, #44]	; 0x2c
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8025334:	4b08      	ldr	r3, [pc, #32]	; (8025358 <lv_bar_set_value_with_anim+0x64>)
 8025336:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8025338:	2264      	movs	r2, #100	; 0x64
 802533a:	4628      	mov	r0, r5
 802533c:	f7e5 fa54 	bl	800a7e8 <lv_obj_get_style_prop>
    a->time = duration;
 8025340:	900c      	str	r0, [sp, #48]	; 0x30
        lv_anim_set_var(&a, anim_info);
        lv_anim_set_exec_cb(&a, lv_bar_anim);
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
 8025342:	a801      	add	r0, sp, #4
 8025344:	f7fb fa6a 	bl	802081c <lv_anim_start>
    }
}
 8025348:	b013      	add	sp, #76	; 0x4c
 802534a:	bd30      	pop	{r4, r5, pc}
        *value_ptr = new_value;
 802534c:	6011      	str	r1, [r2, #0]
        lv_obj_invalidate((lv_obj_t *)obj);
 802534e:	f7e2 fe13 	bl	8007f78 <lv_obj_invalidate>
 8025352:	e7f9      	b.n	8025348 <lv_bar_set_value_with_anim+0x54>
 8025354:	080252e9 	.word	0x080252e9
 8025358:	080252bb 	.word	0x080252bb

0802535c <lv_bar_set_value>:
{
 802535c:	b510      	push	{r4, lr}
 802535e:	b082      	sub	sp, #8
    if(bar->cur_value == value) return;
 8025360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8025362:	428c      	cmp	r4, r1
 8025364:	d015      	beq.n	8025392 <lv_bar_set_value+0x36>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8025366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8025368:	4299      	cmp	r1, r3
 802536a:	bfa8      	it	ge
 802536c:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 802536e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8025370:	f8d0 c030 	ldr.w	ip, [r0, #48]	; 0x30
 8025374:	4563      	cmp	r3, ip
 8025376:	bfb8      	it	lt
 8025378:	4663      	movlt	r3, ip
 802537a:	4299      	cmp	r1, r3
 802537c:	bfb8      	it	lt
 802537e:	4619      	movlt	r1, r3
    if(bar->cur_value == value) return;
 8025380:	428c      	cmp	r4, r1
 8025382:	d006      	beq.n	8025392 <lv_bar_set_value+0x36>
    lv_bar_set_value_with_anim(obj, value, &bar->cur_value, &bar->cur_value_anim, anim);
 8025384:	9200      	str	r2, [sp, #0]
 8025386:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 802538a:	f100 0224 	add.w	r2, r0, #36	; 0x24
 802538e:	f7ff ffb1 	bl	80252f4 <lv_bar_set_value_with_anim>
}
 8025392:	b002      	add	sp, #8
 8025394:	bd10      	pop	{r4, pc}

08025396 <lv_bar_constructor>:
{
 8025396:	b538      	push	{r3, r4, r5, lr}
 8025398:	460c      	mov	r4, r1
    bar->min_value = 0;
 802539a:	2500      	movs	r5, #0
 802539c:	628d      	str	r5, [r1, #40]	; 0x28
    bar->max_value = 100;
 802539e:	2364      	movs	r3, #100	; 0x64
 80253a0:	62cb      	str	r3, [r1, #44]	; 0x2c
    bar->start_value = 0;
 80253a2:	630d      	str	r5, [r1, #48]	; 0x30
    bar->cur_value = 0;
 80253a4:	624d      	str	r5, [r1, #36]	; 0x24
    bar->indic_area.x1 = 0;
 80253a6:	868d      	strh	r5, [r1, #52]	; 0x34
    bar->indic_area.x2 = 0;
 80253a8:	870d      	strh	r5, [r1, #56]	; 0x38
    bar->indic_area.y1 = 0;
 80253aa:	86cd      	strh	r5, [r1, #54]	; 0x36
    bar->indic_area.y2 = 0;
 80253ac:	874d      	strh	r5, [r1, #58]	; 0x3a
    bar->mode = LV_BAR_MODE_NORMAL;
 80253ae:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 80253b2:	f365 0301 	bfi	r3, r5, #0, #2
 80253b6:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
 80253ba:	63c9      	str	r1, [r1, #60]	; 0x3c
    bar_anim->anim_start = 0;
 80253bc:	640d      	str	r5, [r1, #64]	; 0x40
    bar_anim->anim_end = 0;
 80253be:	644d      	str	r5, [r1, #68]	; 0x44
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 80253c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80253c4:	648b      	str	r3, [r1, #72]	; 0x48
    bar_anim->bar = obj;
 80253c6:	64c9      	str	r1, [r1, #76]	; 0x4c
    bar_anim->anim_start = 0;
 80253c8:	650d      	str	r5, [r1, #80]	; 0x50
    bar_anim->anim_end = 0;
 80253ca:	654d      	str	r5, [r1, #84]	; 0x54
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 80253cc:	658b      	str	r3, [r1, #88]	; 0x58
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 80253ce:	2108      	movs	r1, #8
 80253d0:	4620      	mov	r0, r4
 80253d2:	f7e1 faa7 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 80253d6:	2110      	movs	r1, #16
 80253d8:	4620      	mov	r0, r4
 80253da:	f7e1 faa3 	bl	8006924 <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 80253de:	462a      	mov	r2, r5
 80253e0:	4629      	mov	r1, r5
 80253e2:	4620      	mov	r0, r4
 80253e4:	f7ff ffba 	bl	802535c <lv_bar_set_value>
}
 80253e8:	bd38      	pop	{r3, r4, r5, pc}

080253ea <lv_bar_set_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) {
 80253ea:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80253ee:	f003 0303 	and.w	r3, r3, #3
 80253f2:	2b02      	cmp	r3, #2
 80253f4:	d11a      	bne.n	802542c <lv_bar_set_start_value+0x42>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 80253f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80253f8:	4299      	cmp	r1, r3
 80253fa:	bfa8      	it	ge
 80253fc:	4619      	movge	r1, r3
 80253fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8025400:	4299      	cmp	r1, r3
 8025402:	bfb8      	it	lt
 8025404:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater than the right value*/
 8025406:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8025408:	4299      	cmp	r1, r3
 802540a:	bfa8      	it	ge
 802540c:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 802540e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8025410:	428b      	cmp	r3, r1
 8025412:	d00b      	beq.n	802542c <lv_bar_set_start_value+0x42>
{
 8025414:	b500      	push	{lr}
 8025416:	b083      	sub	sp, #12
    lv_bar_set_value_with_anim(obj, value, &bar->start_value, &bar->start_value_anim, anim);
 8025418:	9200      	str	r2, [sp, #0]
 802541a:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 802541e:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8025422:	f7ff ff67 	bl	80252f4 <lv_bar_set_value_with_anim>
}
 8025426:	b003      	add	sp, #12
 8025428:	f85d fb04 	ldr.w	pc, [sp], #4
 802542c:	4770      	bx	lr

0802542e <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 802542e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8025430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025434:	bf14      	ite	ne
 8025436:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 8025438:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 802543a:	4770      	bx	lr

0802543c <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 802543c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8025440:	f003 0303 	and.w	r3, r3, #3
 8025444:	2b02      	cmp	r3, #2
 8025446:	d001      	beq.n	802544c <lv_bar_get_start_value+0x10>
 8025448:	6a80      	ldr	r0, [r0, #40]	; 0x28
 802544a:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 802544c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 802544e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025452:	bf14      	ite	ne
 8025454:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 8025456:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 8025458:	4770      	bx	lr

0802545a <lv_bar_get_mode>:
    return bar->mode;
 802545a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 802545e:	f000 0003 	and.w	r0, r0, #3
 8025462:	4770      	bx	lr

08025464 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8025464:	b510      	push	{r4, lr}
 8025466:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8025468:	2110      	movs	r1, #16
 802546a:	4620      	mov	r0, r4
 802546c:	f7e1 fa5a 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8025470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025474:	4620      	mov	r0, r4
 8025476:	f7e1 fa1b 	bl	80068b0 <lv_obj_add_flag>

    LV_TRACE_OBJ_CREATE("finished");
}
 802547a:	bd10      	pop	{r4, pc}

0802547c <lv_btn_create>:
{
 802547c:	b510      	push	{r4, lr}
 802547e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8025480:	4803      	ldr	r0, [pc, #12]	; (8025490 <lv_btn_create+0x14>)
 8025482:	f7e1 fd05 	bl	8006e90 <lv_obj_class_create_obj>
 8025486:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8025488:	f7e1 fdaf 	bl	8006fea <lv_obj_class_init_obj>
}
 802548c:	4620      	mov	r0, r4
 802548e:	bd10      	pop	{r4, pc}
 8025490:	08032f18 	.word	0x08032f18

08025494 <get_button_from_point>:
 * @param obj pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNMATRIX_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * obj, lv_point_t * p)
{
 8025494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025498:	b08b      	sub	sp, #44	; 0x2c
 802549a:	4604      	mov	r4, r0
 802549c:	9100      	str	r1, [sp, #0]
    lv_area_t obj_cords;
    lv_area_t btn_area;
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    uint16_t i;
    lv_obj_get_coords(obj, &obj_cords);
 802549e:	a908      	add	r1, sp, #32
 80254a0:	f7e2 fac5 	bl	8007a2e <lv_obj_get_coords>

    lv_coord_t w = lv_obj_get_width(obj);
 80254a4:	4620      	mov	r0, r4
 80254a6:	f7e2 fb20 	bl	8007aea <lv_obj_get_width>
 80254aa:	4607      	mov	r7, r0
    lv_coord_t h = lv_obj_get_height(obj);
 80254ac:	4620      	mov	r0, r4
 80254ae:	f7e2 fb22 	bl	8007af6 <lv_obj_get_height>
 80254b2:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80254b4:	2212      	movs	r2, #18
 80254b6:	2100      	movs	r1, #0
 80254b8:	4620      	mov	r0, r4
 80254ba:	f7e5 f995 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80254be:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80254c2:	2213      	movs	r2, #19
 80254c4:	2100      	movs	r1, #0
 80254c6:	4620      	mov	r0, r4
 80254c8:	f7e5 f98e 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80254cc:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80254ce:	2210      	movs	r2, #16
 80254d0:	2100      	movs	r1, #0
 80254d2:	4620      	mov	r0, r4
 80254d4:	f7e5 f988 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80254d8:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80254dc:	2211      	movs	r2, #17
 80254de:	2100      	movs	r1, #0
 80254e0:	4620      	mov	r0, r4
 80254e2:	f7e5 f981 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80254e6:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80254ea:	2214      	movs	r2, #20
 80254ec:	2100      	movs	r1, #0
 80254ee:	4620      	mov	r0, r4
 80254f0:	f7e5 f97a 	bl	800a7e8 <lv_obj_get_style_prop>
 80254f4:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80254f6:	2215      	movs	r2, #21
 80254f8:	2100      	movs	r1, #0
 80254fa:	4620      	mov	r0, r4
 80254fc:	f7e5 f974 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t prow = lv_obj_get_style_pad_row(obj, LV_PART_MAIN);
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);

    /*Get the half gap. Button look larger with this value. (+1 for rounding error)*/
    prow = (prow / 2) + 1 + (prow & 1);
 8025500:	f005 0301 	and.w	r3, r5, #1
 8025504:	3301      	adds	r3, #1
 8025506:	b22a      	sxth	r2, r5
 8025508:	f3c5 35c0 	ubfx	r5, r5, #15, #1
 802550c:	4415      	add	r5, r2
 802550e:	eb03 0565 	add.w	r5, r3, r5, asr #1
 8025512:	b22b      	sxth	r3, r5
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8025514:	f000 0501 	and.w	r5, r0, #1
 8025518:	3501      	adds	r5, #1
 802551a:	b202      	sxth	r2, r0
 802551c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8025520:	4410      	add	r0, r2
 8025522:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8025526:	b22d      	sxth	r5, r5

    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8025528:	469b      	mov	fp, r3
 802552a:	2b0d      	cmp	r3, #13
 802552c:	bfa8      	it	ge
 802552e:	f04f 0b0d 	movge.w	fp, #13
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 8025532:	2d0d      	cmp	r5, #13
 8025534:	bfa8      	it	ge
 8025536:	250d      	movge	r5, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 8025538:	4633      	mov	r3, r6
 802553a:	2e0d      	cmp	r6, #13
 802553c:	bfa8      	it	ge
 802553e:	230d      	movge	r3, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8025540:	f1b8 0f0d 	cmp.w	r8, #13
 8025544:	bfa8      	it	ge
 8025546:	f04f 080d 	movge.w	r8, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 802554a:	4652      	mov	r2, sl
 802554c:	2a0d      	cmp	r2, #13
 802554e:	bfa8      	it	ge
 8025550:	220d      	movge	r2, #13
 8025552:	4610      	mov	r0, r2

    for(i = 0; i < btnm->btn_cnt; i++) {
 8025554:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8025556:	2a00      	cmp	r2, #0
 8025558:	d068      	beq.n	802562c <get_button_from_point+0x198>
 802555a:	f04f 0a00 	mov.w	sl, #0
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 802555e:	464a      	mov	r2, r9
 8025560:	2a0d      	cmp	r2, #13
 8025562:	bfa8      	it	ge
 8025564:	220d      	movge	r2, #13
 8025566:	9202      	str	r2, [sp, #8]
        else btn_area.x1 += obj_cords.x1 - pcol;

        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8025568:	4642      	mov	r2, r8
 802556a:	2a0d      	cmp	r2, #13
 802556c:	bfa8      	it	ge
 802556e:	220d      	movge	r2, #13
 8025570:	9203      	str	r2, [sp, #12]
        else btn_area.y1 += obj_cords.y1 - prow;

        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8025572:	1aff      	subs	r7, r7, r3
 8025574:	3f02      	subs	r7, #2
 8025576:	2b0d      	cmp	r3, #13
 8025578:	bfa8      	it	ge
 802557a:	230d      	movge	r3, #13
 802557c:	9304      	str	r3, [sp, #16]
                                                                                   BTN_EXTRA_CLICK_AREA_MAX);  /*-2 for rounding error*/
        else btn_area.x2 += obj_cords.x1 + pcol;

        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 802557e:	9b01      	ldr	r3, [sp, #4]
 8025580:	1a1e      	subs	r6, r3, r0
 8025582:	3e02      	subs	r6, #2
 8025584:	280d      	cmp	r0, #13
 8025586:	bfa8      	it	ge
 8025588:	200d      	movge	r0, #13
 802558a:	9005      	str	r0, [sp, #20]
 802558c:	9501      	str	r5, [sp, #4]
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 802558e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8025590:	eb03 02ca 	add.w	r2, r3, sl, lsl #3
    dest->x1 = src->x1;
 8025594:	f933 c03a 	ldrsh.w	ip, [r3, sl, lsl #3]
    dest->y1 = src->y1;
 8025598:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
    dest->x2 = src->x2;
 802559c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    dest->y2 = src->y2;
 80255a0:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 80255a4:	45e1      	cmp	r9, ip
 80255a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80255aa:	bfac      	ite	ge
 80255ac:	9d02      	ldrge	r5, [sp, #8]
        else btn_area.x1 += obj_cords.x1 - pcol;
 80255ae:	9d01      	ldrlt	r5, [sp, #4]
 80255b0:	1b52      	subs	r2, r2, r5
 80255b2:	4462      	add	r2, ip
 80255b4:	b212      	sxth	r2, r2
 80255b6:	f8ad 2018 	strh.w	r2, [sp, #24]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 80255ba:	4580      	cmp	r8, r0
 80255bc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80255c0:	bfa6      	itte	ge
 80255c2:	9d03      	ldrge	r5, [sp, #12]
 80255c4:	1b52      	subge	r2, r2, r5
        else btn_area.y1 += obj_cords.y1 - prow;
 80255c6:	eba2 020b 	sublt.w	r2, r2, fp
 80255ca:	4402      	add	r2, r0
 80255cc:	b212      	sxth	r2, r2
 80255ce:	f8ad 201a 	strh.w	r2, [sp, #26]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 80255d2:	42bb      	cmp	r3, r7
 80255d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80255d8:	bfac      	ite	ge
 80255da:	9804      	ldrge	r0, [sp, #16]
        else btn_area.x2 += obj_cords.x1 + pcol;
 80255dc:	9801      	ldrlt	r0, [sp, #4]
 80255de:	4402      	add	r2, r0
 80255e0:	441a      	add	r2, r3
 80255e2:	b212      	sxth	r2, r2
 80255e4:	f8ad 201c 	strh.w	r2, [sp, #28]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 80255e8:	42b1      	cmp	r1, r6
 80255ea:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80255ee:	bfa6      	itte	ge
 80255f0:	9a05      	ldrge	r2, [sp, #20]
 80255f2:	189b      	addge	r3, r3, r2
                                                                                    BTN_EXTRA_CLICK_AREA_MAX); /*-2 for rounding error*/
        else btn_area.y2 += obj_cords.y1 + prow;
 80255f4:	445b      	addlt	r3, fp
 80255f6:	440b      	add	r3, r1
 80255f8:	b21b      	sxth	r3, r3
 80255fa:	f8ad 301e 	strh.w	r3, [sp, #30]

        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 80255fe:	2200      	movs	r2, #0
 8025600:	9900      	ldr	r1, [sp, #0]
 8025602:	a806      	add	r0, sp, #24
 8025604:	f7fb fa68 	bl	8020ad8 <_lv_area_is_point_on>
 8025608:	b930      	cbnz	r0, 8025618 <get_button_from_point+0x184>
    for(i = 0; i < btnm->btn_cnt; i++) {
 802560a:	f10a 0a01 	add.w	sl, sl, #1
 802560e:	fa1f fa8a 	uxth.w	sl, sl
 8025612:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8025614:	4553      	cmp	r3, sl
 8025616:	d8ba      	bhi.n	802558e <get_button_from_point+0xfa>
            break;
        }
    }

    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 8025618:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 802561a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802561e:	4552      	cmp	r2, sl
 8025620:	bf08      	it	eq
 8025622:	469a      	moveq	sl, r3

    return i;
}
 8025624:	4650      	mov	r0, sl
 8025626:	b00b      	add	sp, #44	; 0x2c
 8025628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 802562c:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8025630:	e7f8      	b.n	8025624 <get_button_from_point+0x190>
	...

08025634 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * obj, uint16_t btn_idx)
{
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8025634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025638:	4299      	cmp	r1, r3
 802563a:	d073      	beq.n	8025724 <invalidate_button_area+0xf0>
{
 802563c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802563e:	b085      	sub	sp, #20
 8025640:	4604      	mov	r4, r0
 8025642:	460d      	mov	r5, r1

    lv_area_t btn_area;
    lv_area_t obj_area;

    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    if(btn_idx >= btnm->btn_cnt) return;
 8025644:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025646:	428b      	cmp	r3, r1
 8025648:	d801      	bhi.n	802564e <invalidate_button_area+0x1a>
        /*Push up the upper boundary of the btn area to also invalidate the popover*/
        btn_area.y1 -= lv_area_get_height(&btn_area);
    }

    lv_obj_invalidate_area(obj, &btn_area);
}
 802564a:	b005      	add	sp, #20
 802564c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 802564e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8025650:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 8025654:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 8025658:	f8ad 2008 	strh.w	r2, [sp, #8]
    dest->y1 = src->y1;
 802565c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8025660:	f8ad 200a 	strh.w	r2, [sp, #10]
    dest->x2 = src->x2;
 8025664:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8025668:	f8ad 200c 	strh.w	r2, [sp, #12]
    dest->y2 = src->y2;
 802566c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8025670:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_obj_get_coords(obj, &obj_area);
 8025674:	4669      	mov	r1, sp
 8025676:	f7e2 f9da 	bl	8007a2e <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 802567a:	2214      	movs	r2, #20
 802567c:	2100      	movs	r1, #0
 802567e:	4620      	mov	r0, r4
 8025680:	f7e5 f8b2 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025684:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8025686:	2215      	movs	r2, #21
 8025688:	2100      	movs	r1, #0
 802568a:	4620      	mov	r0, r4
 802568c:	f7e5 f8ac 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025690:	b207      	sxth	r7, r0
    lv_coord_t dpi = lv_disp_get_dpi(lv_obj_get_disp(obj));
 8025692:	4620      	mov	r0, r4
 8025694:	f7e5 ffc6 	bl	800b624 <lv_obj_get_disp>
 8025698:	f7fa feb6 	bl	8020408 <lv_disp_get_dpi>
 802569c:	4602      	mov	r2, r0
    row_gap = LV_MAX(row_gap, dpi / 10);
 802569e:	4822      	ldr	r0, [pc, #136]	; (8025728 <invalidate_button_area+0xf4>)
 80256a0:	fb80 3002 	smull	r3, r0, r0, r2
 80256a4:	17d3      	asrs	r3, r2, #31
 80256a6:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 80256aa:	b21b      	sxth	r3, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 80256ac:	f8bd c000 	ldrh.w	ip, [sp]
    row_gap = LV_MAX(row_gap, dpi / 10);
 80256b0:	429e      	cmp	r6, r3
 80256b2:	bfb8      	it	lt
 80256b4:	461e      	movlt	r6, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 80256b6:	b2b6      	uxth	r6, r6
 80256b8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80256bc:	4462      	add	r2, ip
 80256be:	1b92      	subs	r2, r2, r6
 80256c0:	f8ad 2008 	strh.w	r2, [sp, #8]
    btn_area.y1 += obj_area.y1 - col_gap;
 80256c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    col_gap = LV_MAX(col_gap, dpi / 10);
 80256c8:	42bb      	cmp	r3, r7
 80256ca:	bfb8      	it	lt
 80256cc:	463b      	movlt	r3, r7
    btn_area.y1 += obj_area.y1 - col_gap;
 80256ce:	b29b      	uxth	r3, r3
 80256d0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80256d4:	4411      	add	r1, r2
 80256d6:	b289      	uxth	r1, r1
 80256d8:	1ac8      	subs	r0, r1, r3
 80256da:	b280      	uxth	r0, r0
 80256dc:	f8ad 000a 	strh.w	r0, [sp, #10]
    btn_area.x2 += obj_area.x1 + row_gap;
 80256e0:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 80256e4:	44bc      	add	ip, r7
 80256e6:	4466      	add	r6, ip
 80256e8:	f8ad 600c 	strh.w	r6, [sp, #12]
    btn_area.y2 += obj_area.y1 + col_gap;
 80256ec:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 80256f0:	4432      	add	r2, r6
 80256f2:	441a      	add	r2, r3
 80256f4:	b292      	uxth	r2, r2
 80256f6:	f8ad 200e 	strh.w	r2, [sp, #14]
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80256fa:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 80256fc:	42ae      	cmp	r6, r5
 80256fe:	d004      	beq.n	802570a <invalidate_button_area+0xd6>
    lv_obj_invalidate_area(obj, &btn_area);
 8025700:	a902      	add	r1, sp, #8
 8025702:	4620      	mov	r0, r4
 8025704:	f7e2 fc14 	bl	8007f30 <lv_obj_invalidate_area>
 8025708:	e79f      	b.n	802564a <invalidate_button_area+0x16>
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 802570a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802570c:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 8025710:	f415 7f00 	tst.w	r5, #512	; 0x200
 8025714:	d0f4      	beq.n	8025700 <invalidate_button_area+0xcc>
        btn_area.y1 -= lv_area_get_height(&btn_area);
 8025716:	3901      	subs	r1, #1
 8025718:	4401      	add	r1, r0
 802571a:	1acb      	subs	r3, r1, r3
 802571c:	1a9a      	subs	r2, r3, r2
 802571e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025722:	e7ed      	b.n	8025700 <invalidate_button_area+0xcc>
 8025724:	4770      	bx	lr
 8025726:	bf00      	nop
 8025728:	66666667 	.word	0x66666667

0802572c <draw_main>:
{
 802572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025730:	b0d1      	sub	sp, #324	; 0x144
 8025732:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8025734:	f7de fb06 	bl	8003d44 <lv_event_get_target>
    if(btnm->btn_cnt == 0) return;
 8025738:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 802573a:	b913      	cbnz	r3, 8025742 <draw_main+0x16>
}
 802573c:	b051      	add	sp, #324	; 0x144
 802573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025742:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8025744:	4620      	mov	r0, r4
 8025746:	f7de fb71 	bl	8003e2c <lv_event_get_draw_ctx>
 802574a:	4607      	mov	r7, r0
 802574c:	9004      	str	r0, [sp, #16]
    obj->skip_trans = 1;
 802574e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8025752:	f043 0304 	orr.w	r3, r3, #4
 8025756:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 802575a:	a94e      	add	r1, sp, #312	; 0x138
 802575c:	4628      	mov	r0, r5
 802575e:	f7e2 f966 	bl	8007a2e <lv_obj_get_coords>
    lv_state_t state_ori = obj->state;
 8025762:	8c2e      	ldrh	r6, [r5, #32]
 8025764:	9605      	str	r6, [sp, #20]
    obj->state = LV_STATE_DEFAULT;
 8025766:	2400      	movs	r4, #0
 8025768:	842c      	strh	r4, [r5, #32]
    obj->skip_trans = 1;
 802576a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 802576e:	f043 0304 	orr.w	r3, r3, #4
 8025772:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8025776:	a828      	add	r0, sp, #160	; 0xa0
 8025778:	f7e9 fcf6 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 802577c:	a820      	add	r0, sp, #128	; 0x80
 802577e:	f7e7 ff37 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 8025782:	aa28      	add	r2, sp, #160	; 0xa0
 8025784:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8025788:	4628      	mov	r0, r5
 802578a:	f7e1 fc67 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 802578e:	aa20      	add	r2, sp, #128	; 0x80
 8025790:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8025794:	4628      	mov	r0, r5
 8025796:	f7e1 fdd6 	bl	8007346 <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 802579a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 802579e:	f364 0382 	bfi	r3, r4, #2, #1
 80257a2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    obj->state = state_ori;
 80257a6:	842e      	strh	r6, [r5, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80257a8:	2210      	movs	r2, #16
 80257aa:	4621      	mov	r1, r4
 80257ac:	4628      	mov	r0, r5
 80257ae:	f7e5 f81b 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80257b2:	b203      	sxth	r3, r0
 80257b4:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80257b6:	2211      	movs	r2, #17
 80257b8:	4621      	mov	r1, r4
 80257ba:	4628      	mov	r0, r5
 80257bc:	f7e5 f814 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80257c0:	b203      	sxth	r3, r0
 80257c2:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80257c4:	2212      	movs	r2, #18
 80257c6:	4621      	mov	r1, r4
 80257c8:	4628      	mov	r0, r5
 80257ca:	f7e5 f80d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80257ce:	b203      	sxth	r3, r0
 80257d0:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80257d2:	2213      	movs	r2, #19
 80257d4:	4621      	mov	r1, r4
 80257d6:	4628      	mov	r0, r5
 80257d8:	f7e5 f806 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80257dc:	b203      	sxth	r3, r0
 80257de:	930a      	str	r3, [sp, #40]	; 0x28
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80257e0:	4639      	mov	r1, r7
 80257e2:	a80e      	add	r0, sp, #56	; 0x38
 80257e4:	f7e1 ff75 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 80257e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80257ec:	931b      	str	r3, [sp, #108]	; 0x6c
    part_draw_dsc.class_p = MY_CLASS;
 80257ee:	4bcc      	ldr	r3, [pc, #816]	; (8025b20 <draw_main+0x3f4>)
 80257f0:	930f      	str	r3, [sp, #60]	; 0x3c
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 80257f2:	9410      	str	r4, [sp, #64]	; 0x40
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 80257f4:	ab3e      	add	r3, sp, #248	; 0xf8
 80257f6:	9312      	str	r3, [sp, #72]	; 0x48
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 80257f8:	ab36      	add	r3, sp, #216	; 0xd8
 80257fa:	9313      	str	r3, [sp, #76]	; 0x4c
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 80257fc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80257fe:	2b00      	cmp	r3, #0
 8025800:	f000 8192 	beq.w	8025b28 <draw_main+0x3fc>
 8025804:	f04f 0b00 	mov.w	fp, #0
    uint16_t txt_i = 0;
 8025808:	465c      	mov	r4, fp
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 802580a:	4fc6      	ldr	r7, [pc, #792]	; (8025b24 <draw_main+0x3f8>)
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 802580c:	9b05      	ldr	r3, [sp, #20]
 802580e:	f003 0320 	and.w	r3, r3, #32
 8025812:	930b      	str	r3, [sp, #44]	; 0x2c
 8025814:	e118      	b.n	8025a48 <draw_main+0x31c>
            txt_i++;
 8025816:	3401      	adds	r4, #1
 8025818:	b2a4      	uxth	r4, r4
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 802581a:	00a6      	lsls	r6, r4, #2
 802581c:	4639      	mov	r1, r7
 802581e:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8025822:	f7da fcff 	bl	8000224 <strcmp>
 8025826:	2800      	cmp	r0, #0
 8025828:	d0f5      	beq.n	8025816 <draw_main+0xea>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 802582a:	fa1f f98b 	uxth.w	r9, fp
 802582e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8025830:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8025834:	f013 0f08 	tst.w	r3, #8
 8025838:	f040 80fd 	bne.w	8025a36 <draw_main+0x30a>
        lv_state_t btn_state = LV_STATE_DEFAULT;
 802583c:	f3c3 18c0 	ubfx	r8, r3, #7, #1
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 8025840:	f013 0f20 	tst.w	r3, #32
 8025844:	f000 8105 	beq.w	8025a52 <draw_main+0x326>
 8025848:	f048 0880 	orr.w	r8, r8, #128	; 0x80
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 802584c:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
 8025850:	eb0e 03c9 	add.w	r3, lr, r9, lsl #3
    dest->y1 = src->y1;
 8025854:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
    dest->x2 = src->x2;
 8025858:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
    dest->y2 = src->y2;
 802585c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
        btn_area.x1 += area_obj.x1;
 8025860:	f8bd 2138 	ldrh.w	r2, [sp, #312]	; 0x138
 8025864:	f83e 3039 	ldrh.w	r3, [lr, r9, lsl #3]
 8025868:	4413      	add	r3, r2
 802586a:	f8ad 3130 	strh.w	r3, [sp, #304]	; 0x130
        btn_area.y1 += area_obj.y1;
 802586e:	f8bd 313a 	ldrh.w	r3, [sp, #314]	; 0x13a
 8025872:	4419      	add	r1, r3
 8025874:	f8ad 1132 	strh.w	r1, [sp, #306]	; 0x132
        btn_area.x2 += area_obj.x1;
 8025878:	4462      	add	r2, ip
 802587a:	f8ad 2134 	strh.w	r2, [sp, #308]	; 0x134
        btn_area.y2 += area_obj.y1;
 802587e:	4403      	add	r3, r0
 8025880:	f8ad 3136 	strh.w	r3, [sp, #310]	; 0x136
        if(btn_state == LV_STATE_DEFAULT) {
 8025884:	f1b8 0f00 	cmp.w	r8, #0
 8025888:	f040 80fe 	bne.w	8025a88 <draw_main+0x35c>
            lv_memcpy(&draw_rect_dsc_act, &draw_rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 802588c:	2238      	movs	r2, #56	; 0x38
 802588e:	a928      	add	r1, sp, #160	; 0xa0
 8025890:	a83e      	add	r0, sp, #248	; 0xf8
 8025892:	f7fc f8d3 	bl	8021a3c <lv_memcpy>
            lv_memcpy(&draw_label_dsc_act, &draw_label_dsc_def, sizeof(lv_draw_label_dsc_t));
 8025896:	2220      	movs	r2, #32
 8025898:	a920      	add	r1, sp, #128	; 0x80
 802589a:	a836      	add	r0, sp, #216	; 0xd8
 802589c:	f7fc f8ce 	bl	8021a3c <lv_memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 80258a0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 80258a2:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 80258a6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80258aa:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 80258ae:	bf14      	ite	ne
 80258b0:	f043 0301 	orrne.w	r3, r3, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 80258b4:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
 80258b8:	f88d 30f5 	strb.w	r3, [sp, #245]	; 0xf5
        part_draw_dsc.draw_area = &btn_area;
 80258bc:	ab4c      	add	r3, sp, #304	; 0x130
 80258be:	9311      	str	r3, [sp, #68]	; 0x44
        part_draw_dsc.id = btn_i;
 80258c0:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80258c4:	aa0e      	add	r2, sp, #56	; 0x38
 80258c6:	211a      	movs	r1, #26
 80258c8:	4628      	mov	r0, r5
 80258ca:	f7de fa19 	bl	8003d00 <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 80258ce:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 80258d2:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80258d6:	f013 0f10 	tst.w	r3, #16
 80258da:	d02a      	beq.n	8025932 <draw_main+0x206>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 80258dc:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 80258e0:	220f      	movs	r2, #15
 80258e2:	f362 0345 	bfi	r3, r2, #1, #5
 80258e6:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 80258ea:	f9bd 2130 	ldrsh.w	r2, [sp, #304]	; 0x130
 80258ee:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80258f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80258f4:	440b      	add	r3, r1
 80258f6:	429a      	cmp	r2, r3
 80258f8:	f000 80e9 	beq.w	8025ace <draw_main+0x3a2>
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 80258fc:	f9bd 2134 	ldrsh.w	r2, [sp, #308]	; 0x134
 8025900:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8025904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025906:	1a5b      	subs	r3, r3, r1
 8025908:	429a      	cmp	r2, r3
 802590a:	f000 80e8 	beq.w	8025ade <draw_main+0x3b2>
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 802590e:	f9bd 2132 	ldrsh.w	r2, [sp, #306]	; 0x132
 8025912:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8025916:	9907      	ldr	r1, [sp, #28]
 8025918:	440b      	add	r3, r1
 802591a:	429a      	cmp	r2, r3
 802591c:	f000 80ea 	beq.w	8025af4 <draw_main+0x3c8>
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 8025920:	f9bd 2136 	ldrsh.w	r2, [sp, #310]	; 0x136
 8025924:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8025928:	9908      	ldr	r1, [sp, #32]
 802592a:	1a5b      	subs	r3, r3, r1
 802592c:	429a      	cmp	r2, r3
 802592e:	f000 80ec 	beq.w	8025b0a <draw_main+0x3de>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8025932:	f8bd 2132 	ldrh.w	r2, [sp, #306]	; 0x132
 8025936:	9206      	str	r2, [sp, #24]
 8025938:	f8bd a136 	ldrh.w	sl, [sp, #310]	; 0x136
 802593c:	f10a 0a01 	add.w	sl, sl, #1
 8025940:	fa1f fa8a 	uxth.w	sl, sl
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8025944:	f018 0820 	ands.w	r8, r8, #32
 8025948:	d009      	beq.n	802595e <draw_main+0x232>
 802594a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802594c:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8025950:	f413 7f00 	tst.w	r3, #512	; 0x200
            btn_area.y1 -= btn_height;
 8025954:	bf1c      	itt	ne
 8025956:	ebca 0342 	rsbne	r3, sl, r2, lsl #1
 802595a:	f8ad 3132 	strhne.w	r3, [sp, #306]	; 0x132
        lv_draw_rect(draw_ctx, &draw_rect_dsc_act, &btn_area);
 802595e:	aa4c      	add	r2, sp, #304	; 0x130
 8025960:	a93e      	add	r1, sp, #248	; 0xf8
 8025962:	9804      	ldr	r0, [sp, #16]
 8025964:	f7e9 fc5c 	bl	800f220 <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 8025968:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802596a:	599e      	ldr	r6, [r3, r6]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 802596c:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 8025970:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8025972:	f8bd 313c 	ldrh.w	r3, [sp, #316]	; 0x13c
 8025976:	3301      	adds	r3, #1
 8025978:	f8bd 2138 	ldrh.w	r2, [sp, #312]	; 0x138
 802597c:	1a9b      	subs	r3, r3, r2
 802597e:	b21b      	sxth	r3, r3
 8025980:	9301      	str	r3, [sp, #4]
 8025982:	f9bd 30ea 	ldrsh.w	r3, [sp, #234]	; 0xea
 8025986:	9300      	str	r3, [sp, #0]
 8025988:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 802598c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802598e:	4631      	mov	r1, r6
 8025990:	a80d      	add	r0, sp, #52	; 0x34
 8025992:	f7fe faa4 	bl	8023ede <lv_txt_get_size>
 8025996:	f8bd 2130 	ldrh.w	r2, [sp, #304]	; 0x130
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 802599a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 802599e:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
 80259a2:	3301      	adds	r3, #1
 80259a4:	1a9b      	subs	r3, r3, r2
 80259a6:	b21b      	sxth	r3, r3
 80259a8:	eba3 030c 	sub.w	r3, r3, ip
 80259ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80259b0:	eb02 0263 	add.w	r2, r2, r3, asr #1
 80259b4:	b292      	uxth	r2, r2
 80259b6:	f8ad 2130 	strh.w	r2, [sp, #304]	; 0x130
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80259ba:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 80259be:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 80259c2:	f8bd 3136 	ldrh.w	r3, [sp, #310]	; 0x136
 80259c6:	3301      	adds	r3, #1
 80259c8:	1a5b      	subs	r3, r3, r1
 80259ca:	b21b      	sxth	r3, r3
 80259cc:	1a1b      	subs	r3, r3, r0
 80259ce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80259d2:	eb01 0363 	add.w	r3, r1, r3, asr #1
 80259d6:	b29b      	uxth	r3, r3
 80259d8:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
        btn_area.x2 = btn_area.x1 + txt_size.x;
 80259dc:	4462      	add	r2, ip
 80259de:	f8ad 2134 	strh.w	r2, [sp, #308]	; 0x134
        btn_area.y2 = btn_area.y1 + txt_size.y;
 80259e2:	4418      	add	r0, r3
 80259e4:	b280      	uxth	r0, r0
 80259e6:	f8ad 0136 	strh.w	r0, [sp, #310]	; 0x136
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80259ea:	f1b8 0f00 	cmp.w	r8, #0
 80259ee:	d015      	beq.n	8025a1c <draw_main+0x2f0>
 80259f0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80259f2:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 80259f6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80259fa:	d00f      	beq.n	8025a1c <draw_main+0x2f0>
 80259fc:	9a06      	ldr	r2, [sp, #24]
 80259fe:	ebaa 0a02 	sub.w	sl, sl, r2
            btn_area.y1 -= btn_height / 2;
 8025a02:	fa0f f28a 	sxth.w	r2, sl
 8025a06:	f3ca 3ac0 	ubfx	sl, sl, #15, #1
 8025a0a:	4452      	add	r2, sl
 8025a0c:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8025a10:	1a9b      	subs	r3, r3, r2
 8025a12:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
            btn_area.y2 -= btn_height / 2;
 8025a16:	1a80      	subs	r0, r0, r2
 8025a18:	f8ad 0136 	strh.w	r0, [sp, #310]	; 0x136
        lv_draw_label(draw_ctx, &draw_label_dsc_act, &btn_area, txt, NULL);
 8025a1c:	2300      	movs	r3, #0
 8025a1e:	9300      	str	r3, [sp, #0]
 8025a20:	4633      	mov	r3, r6
 8025a22:	aa4c      	add	r2, sp, #304	; 0x130
 8025a24:	a936      	add	r1, sp, #216	; 0xd8
 8025a26:	9804      	ldr	r0, [sp, #16]
 8025a28:	f7e7 fe16 	bl	800d658 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8025a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8025a2e:	211b      	movs	r1, #27
 8025a30:	4628      	mov	r0, r5
 8025a32:	f7de f965 	bl	8003d00 <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8025a36:	3401      	adds	r4, #1
 8025a38:	b2a4      	uxth	r4, r4
 8025a3a:	f10b 0b01 	add.w	fp, fp, #1
 8025a3e:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8025a40:	fa1f f38b 	uxth.w	r3, fp
 8025a44:	429a      	cmp	r2, r3
 8025a46:	d96f      	bls.n	8025b28 <draw_main+0x3fc>
 8025a48:	fa1f fa8b 	uxth.w	sl, fp
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8025a4c:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8025a50:	e6e3      	b.n	802581a <draw_main+0xee>
        else if(btn_i == btnm->btn_id_sel) {
 8025a52:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8025a54:	4553      	cmp	r3, sl
 8025a56:	f47f aef9 	bne.w	802584c <draw_main+0x120>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 8025a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025a5c:	b10b      	cbz	r3, 8025a62 <draw_main+0x336>
 8025a5e:	f048 0820 	orr.w	r8, r8, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 8025a62:	9b05      	ldr	r3, [sp, #20]
 8025a64:	f013 0f02 	tst.w	r3, #2
 8025a68:	bf18      	it	ne
 8025a6a:	f048 0802 	orrne.w	r8, r8, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 8025a6e:	9b05      	ldr	r3, [sp, #20]
 8025a70:	f013 0f04 	tst.w	r3, #4
 8025a74:	bf18      	it	ne
 8025a76:	f048 0804 	orrne.w	r8, r8, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 8025a7a:	9b05      	ldr	r3, [sp, #20]
 8025a7c:	f013 0f08 	tst.w	r3, #8
 8025a80:	bf18      	it	ne
 8025a82:	f048 0808 	orrne.w	r8, r8, #8
 8025a86:	e6e1      	b.n	802584c <draw_main+0x120>
            obj->state = btn_state;
 8025a88:	f8a5 8020 	strh.w	r8, [r5, #32]
            obj->skip_trans = 1;
 8025a8c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8025a90:	f043 0304 	orr.w	r3, r3, #4
 8025a94:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 8025a98:	a83e      	add	r0, sp, #248	; 0xf8
 8025a9a:	f7e9 fb65 	bl	800f168 <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 8025a9e:	a836      	add	r0, sp, #216	; 0xd8
 8025aa0:	f7e7 fda6 	bl	800d5f0 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 8025aa4:	aa3e      	add	r2, sp, #248	; 0xf8
 8025aa6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8025aaa:	4628      	mov	r0, r5
 8025aac:	f7e1 fad6 	bl	800705c <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 8025ab0:	aa36      	add	r2, sp, #216	; 0xd8
 8025ab2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8025ab6:	4628      	mov	r0, r5
 8025ab8:	f7e1 fc45 	bl	8007346 <lv_obj_init_draw_label_dsc>
            obj->state = state_ori;
 8025abc:	9b05      	ldr	r3, [sp, #20]
 8025abe:	842b      	strh	r3, [r5, #32]
            obj->skip_trans = 0;
 8025ac0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8025ac4:	f36f 0382 	bfc	r3, #2, #1
 8025ac8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8025acc:	e6e8      	b.n	80258a0 <draw_main+0x174>
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 8025ace:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 8025ad2:	220b      	movs	r2, #11
 8025ad4:	f362 0345 	bfi	r3, r2, #1, #5
 8025ad8:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8025adc:	e70e      	b.n	80258fc <draw_main+0x1d0>
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8025ade:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 8025ae2:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8025ae6:	f002 0217 	and.w	r2, r2, #23
 8025aea:	f362 0345 	bfi	r3, r2, #1, #5
 8025aee:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8025af2:	e70c      	b.n	802590e <draw_main+0x1e2>
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 8025af4:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 8025af8:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8025afc:	f002 021d 	and.w	r2, r2, #29
 8025b00:	f362 0345 	bfi	r3, r2, #1, #5
 8025b04:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8025b08:	e70a      	b.n	8025920 <draw_main+0x1f4>
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 8025b0a:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 8025b0e:	f3c3 0244 	ubfx	r2, r3, #1, #5
 8025b12:	f002 021e 	and.w	r2, r2, #30
 8025b16:	f362 0345 	bfi	r3, r2, #1, #5
 8025b1a:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8025b1e:	e708      	b.n	8025932 <draw_main+0x206>
 8025b20:	08032f5c 	.word	0x08032f5c
 8025b24:	0802ce6c 	.word	0x0802ce6c
    obj->skip_trans = 0;
 8025b28:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8025b2c:	f36f 0382 	bfc	r3, #2, #1
 8025b30:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8025b34:	e602      	b.n	802573c <draw_main+0x10>
 8025b36:	bf00      	nop

08025b38 <lv_btnmatrix_destructor>:
{
 8025b38:	b510      	push	{r4, lr}
 8025b3a:	460c      	mov	r4, r1
    lv_mem_free(btnm->button_areas);
 8025b3c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8025b3e:	f7fb feb1 	bl	80218a4 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 8025b42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8025b44:	f7fb feae 	bl	80218a4 <lv_mem_free>
    btnm->button_areas = NULL;
 8025b48:	2300      	movs	r3, #0
 8025b4a:	62a3      	str	r3, [r4, #40]	; 0x28
    btnm->ctrl_bits = NULL;
 8025b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8025b4e:	bd10      	pop	{r4, pc}

08025b50 <lv_btnmatrix_create>:
{
 8025b50:	b510      	push	{r4, lr}
 8025b52:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8025b54:	4803      	ldr	r0, [pc, #12]	; (8025b64 <lv_btnmatrix_create+0x14>)
 8025b56:	f7e1 f99b 	bl	8006e90 <lv_obj_class_create_obj>
 8025b5a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8025b5c:	f7e1 fa45 	bl	8006fea <lv_obj_class_init_obj>
}
 8025b60:	4620      	mov	r0, r4
 8025b62:	bd10      	pop	{r4, pc}
 8025b64:	08032f5c 	.word	0x08032f5c

08025b68 <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 8025b68:	2900      	cmp	r1, #0
 8025b6a:	f000 8144 	beq.w	8025df6 <lv_btnmatrix_set_map+0x28e>
{
 8025b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b72:	b093      	sub	sp, #76	; 0x4c
 8025b74:	4683      	mov	fp, r0
 8025b76:	4689      	mov	r9, r1
    btnm->row_cnt = 1;
 8025b78:	2301      	movs	r3, #1
 8025b7a:	8643      	strh	r3, [r0, #50]	; 0x32
    while(map[i] && map[i][0] != '\0') {
 8025b7c:	6808      	ldr	r0, [r1, #0]
    uint16_t btn_cnt = 0;
 8025b7e:	2500      	movs	r5, #0
    while(map[i] && map[i][0] != '\0') {
 8025b80:	b1b8      	cbz	r0, 8025bb2 <lv_btnmatrix_set_map+0x4a>
    uint16_t i       = 0;
 8025b82:	2400      	movs	r4, #0
    uint16_t btn_cnt = 0;
 8025b84:	4625      	mov	r5, r4
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8025b86:	4e9c      	ldr	r6, [pc, #624]	; (8025df8 <lv_btnmatrix_set_map+0x290>)
 8025b88:	e009      	b.n	8025b9e <lv_btnmatrix_set_map+0x36>
            btnm->row_cnt++;
 8025b8a:	f8bb 3032 	ldrh.w	r3, [fp, #50]	; 0x32
 8025b8e:	3301      	adds	r3, #1
 8025b90:	f8ab 3032 	strh.w	r3, [fp, #50]	; 0x32
        i++;
 8025b94:	3401      	adds	r4, #1
 8025b96:	b2a4      	uxth	r4, r4
    while(map[i] && map[i][0] != '\0') {
 8025b98:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 8025b9c:	b148      	cbz	r0, 8025bb2 <lv_btnmatrix_set_map+0x4a>
 8025b9e:	7803      	ldrb	r3, [r0, #0]
 8025ba0:	b13b      	cbz	r3, 8025bb2 <lv_btnmatrix_set_map+0x4a>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8025ba2:	4631      	mov	r1, r6
 8025ba4:	f7da fb3e 	bl	8000224 <strcmp>
 8025ba8:	2800      	cmp	r0, #0
 8025baa:	d0ee      	beq.n	8025b8a <lv_btnmatrix_set_map+0x22>
            btn_cnt++;
 8025bac:	3501      	adds	r5, #1
 8025bae:	b2ad      	uxth	r5, r5
 8025bb0:	e7f0      	b.n	8025b94 <lv_btnmatrix_set_map+0x2c>
    if(btn_cnt == btnm->btn_cnt) return;
 8025bb2:	f8bb 3030 	ldrh.w	r3, [fp, #48]	; 0x30
 8025bb6:	42ab      	cmp	r3, r5
 8025bb8:	d027      	beq.n	8025c0a <lv_btnmatrix_set_map+0xa2>
    if(btnm->button_areas != NULL) {
 8025bba:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
 8025bbe:	b120      	cbz	r0, 8025bca <lv_btnmatrix_set_map+0x62>
        lv_mem_free(btnm->button_areas);
 8025bc0:	f7fb fe70 	bl	80218a4 <lv_mem_free>
        btnm->button_areas = NULL;
 8025bc4:	2300      	movs	r3, #0
 8025bc6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
    if(btnm->ctrl_bits != NULL) {
 8025bca:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8025bce:	b120      	cbz	r0, 8025bda <lv_btnmatrix_set_map+0x72>
        lv_mem_free(btnm->ctrl_bits);
 8025bd0:	f7fb fe68 	bl	80218a4 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 8025bd4:	2300      	movs	r3, #0
 8025bd6:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8025bda:	00e8      	lsls	r0, r5, #3
 8025bdc:	f7fb fe44 	bl	8021868 <lv_mem_alloc>
 8025be0:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 8025be4:	2800      	cmp	r0, #0
 8025be6:	d051      	beq.n	8025c8c <lv_btnmatrix_set_map+0x124>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 8025be8:	0068      	lsls	r0, r5, #1
 8025bea:	f7fb fe3d 	bl	8021868 <lv_mem_alloc>
 8025bee:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 8025bf2:	2800      	cmp	r0, #0
 8025bf4:	d04b      	beq.n	8025c8e <lv_btnmatrix_set_map+0x126>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 8025bf6:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8025bfa:	2b00      	cmp	r3, #0
 8025bfc:	bf08      	it	eq
 8025bfe:	2500      	moveq	r5, #0
    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 8025c00:	0069      	lsls	r1, r5, #1
 8025c02:	f7fc f8b1 	bl	8021d68 <lv_memset_00>
    btnm->btn_cnt = btn_cnt;
 8025c06:	f8ab 5030 	strh.w	r5, [fp, #48]	; 0x30
    btnm->map_p = map;
 8025c0a:	f8cb 9024 	str.w	r9, [fp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8025c0e:	2216      	movs	r2, #22
 8025c10:	2100      	movs	r1, #0
 8025c12:	4658      	mov	r0, fp
 8025c14:	f7e4 fde8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8025c18:	b2c3      	uxtb	r3, r0
 8025c1a:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8025c1c:	2212      	movs	r2, #18
 8025c1e:	2100      	movs	r1, #0
 8025c20:	4658      	mov	r0, fp
 8025c22:	f7e4 fde1 	bl	800a7e8 <lv_obj_get_style_prop>
 8025c26:	9011      	str	r0, [sp, #68]	; 0x44
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025c28:	2210      	movs	r2, #16
 8025c2a:	2100      	movs	r1, #0
 8025c2c:	4658      	mov	r0, fp
 8025c2e:	f7e4 fddb 	bl	800a7e8 <lv_obj_get_style_prop>
 8025c32:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8025c34:	2214      	movs	r2, #20
 8025c36:	2100      	movs	r1, #0
 8025c38:	4658      	mov	r0, fp
 8025c3a:	f7e4 fdd5 	bl	800a7e8 <lv_obj_get_style_prop>
 8025c3e:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8025c40:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8025c42:	2215      	movs	r2, #21
 8025c44:	2100      	movs	r1, #0
 8025c46:	4658      	mov	r0, fp
 8025c48:	f7e4 fdce 	bl	800a7e8 <lv_obj_get_style_prop>
 8025c4c:	900f      	str	r0, [sp, #60]	; 0x3c
    return (lv_coord_t)v.num;
 8025c4e:	b203      	sxth	r3, r0
 8025c50:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 8025c52:	4658      	mov	r0, fp
 8025c54:	f7e1 ff55 	bl	8007b02 <lv_obj_get_content_width>
 8025c58:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 8025c5a:	4658      	mov	r0, fp
 8025c5c:	f7e1 ff6e 	bl	8007b3c <lv_obj_get_content_height>
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8025c60:	f8bb 3032 	ldrh.w	r3, [fp, #50]	; 0x32
 8025c64:	1e5a      	subs	r2, r3, #1
 8025c66:	fb02 0616 	mls	r6, r2, r6, r0
 8025c6a:	b232      	sxth	r2, r6
 8025c6c:	920a      	str	r2, [sp, #40]	; 0x28
    for(row = 0; row < btnm->row_cnt; row++) {
 8025c6e:	4698      	mov	r8, r3
 8025c70:	2b00      	cmp	r3, #0
 8025c72:	f000 80b7 	beq.w	8025de4 <lv_btnmatrix_set_map+0x27c>
 8025c76:	b2ab      	uxth	r3, r5
 8025c78:	930b      	str	r3, [sp, #44]	; 0x2c
 8025c7a:	b2a3      	uxth	r3, r4
 8025c7c:	9307      	str	r3, [sp, #28]
 8025c7e:	f04f 0a00 	mov.w	sl, #0
 8025c82:	f8cd a018 	str.w	sl, [sp, #24]
 8025c86:	f8cd a020 	str.w	sl, [sp, #32]
 8025c8a:	e017      	b.n	8025cbc <lv_btnmatrix_set_map+0x154>
    LV_ASSERT_MALLOC(btnm->button_areas);
 8025c8c:	e7fe      	b.n	8025c8c <lv_btnmatrix_set_map+0x124>
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 8025c8e:	e7fe      	b.n	8025c8e <lv_btnmatrix_set_map+0x126>
        if(btn_cnt == 0) {
 8025c90:	2c00      	cmp	r4, #0
 8025c92:	d138      	bne.n	8025d06 <lv_btnmatrix_set_map+0x19e>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 8025c94:	3601      	adds	r6, #1
 8025c96:	eb09 0986 	add.w	r9, r9, r6, lsl #2
    for(row = 0; row < btnm->row_cnt; row++) {
 8025c9a:	9a08      	ldr	r2, [sp, #32]
 8025c9c:	3201      	adds	r2, #1
 8025c9e:	9208      	str	r2, [sp, #32]
 8025ca0:	f8bb 8032 	ldrh.w	r8, [fp, #50]	; 0x32
 8025ca4:	9b06      	ldr	r3, [sp, #24]
 8025ca6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025ca8:	440b      	add	r3, r1
 8025caa:	9306      	str	r3, [sp, #24]
 8025cac:	9b07      	ldr	r3, [sp, #28]
 8025cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025cb0:	440b      	add	r3, r1
 8025cb2:	b29b      	uxth	r3, r3
 8025cb4:	9307      	str	r3, [sp, #28]
 8025cb6:	4590      	cmp	r8, r2
 8025cb8:	f240 8094 	bls.w	8025de4 <lv_btnmatrix_set_map+0x27c>
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8025cbc:	f8d9 7000 	ldr.w	r7, [r9]
 8025cc0:	2600      	movs	r6, #0
 8025cc2:	2f00      	cmp	r7, #0
 8025cc4:	d0e6      	beq.n	8025c94 <lv_btnmatrix_set_map+0x12c>
        uint16_t btn_cnt = 0;            /*Number of buttons in a row*/
 8025cc6:	2400      	movs	r4, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 8025cc8:	4625      	mov	r5, r4
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8025cca:	4626      	mov	r6, r4
 8025ccc:	494a      	ldr	r1, [pc, #296]	; (8025df8 <lv_btnmatrix_set_map+0x290>)
 8025cce:	4638      	mov	r0, r7
 8025cd0:	f7da faa8 	bl	8000224 <strcmp>
 8025cd4:	2800      	cmp	r0, #0
 8025cd6:	d0db      	beq.n	8025c90 <lv_btnmatrix_set_map+0x128>
 8025cd8:	783b      	ldrb	r3, [r7, #0]
 8025cda:	2b00      	cmp	r3, #0
 8025cdc:	d0d8      	beq.n	8025c90 <lv_btnmatrix_set_map+0x128>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 8025cde:	4456      	add	r6, sl
 8025ce0:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8025ce4:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 8025ce8:	f003 0307 	and.w	r3, r3, #7
 8025cec:	2b01      	cmp	r3, #1
 8025cee:	bf2c      	ite	cs
 8025cf0:	18ed      	addcs	r5, r5, r3
 8025cf2:	3501      	addcc	r5, #1
 8025cf4:	b2ad      	uxth	r5, r5
            btn_cnt++;
 8025cf6:	3401      	adds	r4, #1
 8025cf8:	b2a4      	uxth	r4, r4
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8025cfa:	4626      	mov	r6, r4
 8025cfc:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 8025d00:	2f00      	cmp	r7, #0
 8025d02:	d1e3      	bne.n	8025ccc <lv_btnmatrix_set_map+0x164>
 8025d04:	e7c4      	b.n	8025c90 <lv_btnmatrix_set_map+0x128>
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8025d06:	9a06      	ldr	r2, [sp, #24]
 8025d08:	fbb2 f3f8 	udiv	r3, r2, r8
 8025d0c:	9907      	ldr	r1, [sp, #28]
 8025d0e:	440b      	add	r3, r1
 8025d10:	b21b      	sxth	r3, r3
 8025d12:	9303      	str	r3, [sp, #12]
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8025d14:	4613      	mov	r3, r2
 8025d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025d18:	4413      	add	r3, r2
 8025d1a:	fbb3 f8f8 	udiv	r8, r3, r8
 8025d1e:	1e4b      	subs	r3, r1, #1
 8025d20:	4498      	add	r8, r3
 8025d22:	fa0f f388 	sxth.w	r3, r8
 8025d26:	9304      	str	r3, [sp, #16]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 8025d28:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8025d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8025d2e:	3c01      	subs	r4, #1
 8025d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025d32:	fb04 3412 	mls	r4, r4, r2, r3
 8025d36:	b224      	sxth	r4, r4
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 8025d38:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8025d3c:	2e00      	cmp	r6, #0
 8025d3e:	d04e      	beq.n	8025dde <lv_btnmatrix_set_map+0x276>
 8025d40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8025d44:	eb06 020a 	add.w	r2, r6, sl
 8025d48:	9202      	str	r2, [sp, #8]
 8025d4a:	2700      	movs	r7, #0
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 8025d4c:	46b8      	mov	r8, r7
            btn_x1 += pleft;
 8025d4e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8025d52:	960c      	str	r6, [sp, #48]	; 0x30
 8025d54:	4616      	mov	r6, r2
 8025d56:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8025d5a:	4699      	mov	r9, r3
 8025d5c:	e018      	b.n	8025d90 <lv_btnmatrix_set_map+0x228>
                btn_x1 = max_w - btn_x1;
 8025d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025d60:	1ac3      	subs	r3, r0, r3
 8025d62:	b219      	sxth	r1, r3
                btn_x2 = max_w - btn_x2;
 8025d64:	1a83      	subs	r3, r0, r2
 8025d66:	b21b      	sxth	r3, r3
            btn_x1 += pleft;
 8025d68:	4431      	add	r1, r6
            btn_x2 += pleft;
 8025d6a:	4433      	add	r3, r6
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8025d6c:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
 8025d70:	9a04      	ldr	r2, [sp, #16]
 8025d72:	9200      	str	r2, [sp, #0]
 8025d74:	b21b      	sxth	r3, r3
 8025d76:	9a03      	ldr	r2, [sp, #12]
 8025d78:	b209      	sxth	r1, r1
 8025d7a:	eb00 00ca 	add.w	r0, r0, sl, lsl #3
 8025d7e:	f7fa fe21 	bl	80209c4 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8025d82:	f10a 0a01 	add.w	sl, sl, #1
 8025d86:	444f      	add	r7, r9
 8025d88:	b2bf      	uxth	r7, r7
 8025d8a:	9b02      	ldr	r3, [sp, #8]
 8025d8c:	459a      	cmp	sl, r3
 8025d8e:	d01d      	beq.n	8025dcc <lv_btnmatrix_set_map+0x264>
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8025d90:	fb08 f304 	mul.w	r3, r8, r4
 8025d94:	fbb3 f3f5 	udiv	r3, r3, r5
 8025d98:	443b      	add	r3, r7
 8025d9a:	b29a      	uxth	r2, r3
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8025d9c:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8025da0:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8025da4:	f003 0307 	and.w	r3, r3, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8025da8:	2b01      	cmp	r3, #1
 8025daa:	bf2c      	ite	cs
 8025dac:	4498      	addcs	r8, r3
 8025dae:	f108 0801 	addcc.w	r8, r8, #1
 8025db2:	fb08 f304 	mul.w	r3, r8, r4
 8025db6:	fbb3 f3f5 	udiv	r3, r3, r5
 8025dba:	1e79      	subs	r1, r7, #1
 8025dbc:	440b      	add	r3, r1
 8025dbe:	b29b      	uxth	r3, r3
            if(base_dir == LV_BASE_DIR_RTL) {
 8025dc0:	9905      	ldr	r1, [sp, #20]
 8025dc2:	2901      	cmp	r1, #1
 8025dc4:	d0cb      	beq.n	8025d5e <lv_btnmatrix_set_map+0x1f6>
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8025dc6:	b211      	sxth	r1, r2
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8025dc8:	b21b      	sxth	r3, r3
 8025dca:	e7cd      	b.n	8025d68 <lv_btnmatrix_set_map+0x200>
 8025dcc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025dce:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8025dd2:	3601      	adds	r6, #1
 8025dd4:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8025dd8:	f8dd a008 	ldr.w	sl, [sp, #8]
 8025ddc:	e75d      	b.n	8025c9a <lv_btnmatrix_set_map+0x132>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8025dde:	f8cd a008 	str.w	sl, [sp, #8]
 8025de2:	e7f6      	b.n	8025dd2 <lv_btnmatrix_set_map+0x26a>
    lv_obj_refresh_ext_draw_size(obj);
 8025de4:	4658      	mov	r0, fp
 8025de6:	f7e1 fc83 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8025dea:	4658      	mov	r0, fp
 8025dec:	f7e2 f8c4 	bl	8007f78 <lv_obj_invalidate>
}
 8025df0:	b013      	add	sp, #76	; 0x4c
 8025df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025df6:	4770      	bx	lr
 8025df8:	0802ce6c 	.word	0x0802ce6c

08025dfc <lv_btnmatrix_constructor>:
{
 8025dfc:	b508      	push	{r3, lr}
 8025dfe:	4608      	mov	r0, r1
    btnm->btn_cnt        = 0;
 8025e00:	2300      	movs	r3, #0
 8025e02:	860b      	strh	r3, [r1, #48]	; 0x30
    btnm->row_cnt        = 0;
 8025e04:	864b      	strh	r3, [r1, #50]	; 0x32
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 8025e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025e0a:	868a      	strh	r2, [r1, #52]	; 0x34
    btnm->button_areas   = NULL;
 8025e0c:	628b      	str	r3, [r1, #40]	; 0x28
    btnm->ctrl_bits      = NULL;
 8025e0e:	62cb      	str	r3, [r1, #44]	; 0x2c
    btnm->map_p          = NULL;
 8025e10:	624b      	str	r3, [r1, #36]	; 0x24
    btnm->one_check      = 0;
 8025e12:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 8025e16:	f363 0200 	bfi	r2, r3, #0, #1
 8025e1a:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    lv_btnmatrix_set_map(obj, lv_btnmatrix_def_map);
 8025e1e:	4902      	ldr	r1, [pc, #8]	; (8025e28 <lv_btnmatrix_constructor+0x2c>)
 8025e20:	f7ff fea2 	bl	8025b68 <lv_btnmatrix_set_map>
}
 8025e24:	bd08      	pop	{r3, pc}
 8025e26:	bf00      	nop
 8025e28:	20000770 	.word	0x20000770

08025e2c <lv_btnmatrix_set_ctrl_map>:
{
 8025e2c:	b510      	push	{r4, lr}
 8025e2e:	4604      	mov	r4, r0
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 8025e30:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8025e32:	0052      	lsls	r2, r2, #1
 8025e34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8025e36:	f7fb fe01 	bl	8021a3c <lv_memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 8025e3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8025e3c:	4620      	mov	r0, r4
 8025e3e:	f7ff fe93 	bl	8025b68 <lv_btnmatrix_set_map>
}
 8025e42:	bd10      	pop	{r4, pc}

08025e44 <lv_btnmatrix_clear_btn_ctrl>:
{
 8025e44:	b538      	push	{r3, r4, r5, lr}
    if(btn_id >= btnm->btn_cnt) return;
 8025e46:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025e48:	428b      	cmp	r3, r1
 8025e4a:	d800      	bhi.n	8025e4e <lv_btnmatrix_clear_btn_ctrl+0xa>
}
 8025e4c:	bd38      	pop	{r3, r4, r5, pc}
 8025e4e:	4604      	mov	r4, r0
 8025e50:	4615      	mov	r5, r2
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 8025e52:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8025e54:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8025e58:	ea23 0305 	bic.w	r3, r3, r5
 8025e5c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    invalidate_button_area(obj, btn_id);
 8025e60:	f7ff fbe8 	bl	8025634 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 8025e64:	f415 7f00 	tst.w	r5, #512	; 0x200
 8025e68:	d0f0      	beq.n	8025e4c <lv_btnmatrix_clear_btn_ctrl+0x8>
        lv_obj_refresh_ext_draw_size(obj);
 8025e6a:	4620      	mov	r0, r4
 8025e6c:	f7e1 fc40 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
 8025e70:	e7ec      	b.n	8025e4c <lv_btnmatrix_clear_btn_ctrl+0x8>

08025e72 <lv_btnmatrix_clear_btn_ctrl_all>:
    for(i = 0; i < btnm->btn_cnt; i++) {
 8025e72:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025e74:	b173      	cbz	r3, 8025e94 <lv_btnmatrix_clear_btn_ctrl_all+0x22>
{
 8025e76:	b570      	push	{r4, r5, r6, lr}
 8025e78:	4605      	mov	r5, r0
 8025e7a:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 8025e7c:	2400      	movs	r4, #0
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 8025e7e:	4632      	mov	r2, r6
 8025e80:	b2a1      	uxth	r1, r4
 8025e82:	4628      	mov	r0, r5
 8025e84:	f7ff ffde 	bl	8025e44 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 8025e88:	3401      	adds	r4, #1
 8025e8a:	8e28      	ldrh	r0, [r5, #48]	; 0x30
 8025e8c:	b2a3      	uxth	r3, r4
 8025e8e:	4298      	cmp	r0, r3
 8025e90:	d8f5      	bhi.n	8025e7e <lv_btnmatrix_clear_btn_ctrl_all+0xc>
}
 8025e92:	bd70      	pop	{r4, r5, r6, pc}
 8025e94:	4770      	bx	lr

08025e96 <lv_btnmatrix_set_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 8025e96:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025e98:	428b      	cmp	r3, r1
 8025e9a:	d921      	bls.n	8025ee0 <lv_btnmatrix_set_btn_ctrl+0x4a>
{
 8025e9c:	b570      	push	{r4, r5, r6, lr}
 8025e9e:	4604      	mov	r4, r0
 8025ea0:	460d      	mov	r5, r1
 8025ea2:	4616      	mov	r6, r2
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 8025ea4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8025ea8:	f013 0f01 	tst.w	r3, #1
 8025eac:	d002      	beq.n	8025eb4 <lv_btnmatrix_set_btn_ctrl+0x1e>
 8025eae:	f012 0f80 	tst.w	r2, #128	; 0x80
 8025eb2:	d10d      	bne.n	8025ed0 <lv_btnmatrix_set_btn_ctrl+0x3a>
    btnm->ctrl_bits[btn_id] |= ctrl;
 8025eb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8025eb6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8025eba:	4333      	orrs	r3, r6
 8025ebc:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    invalidate_button_area(obj, btn_id);
 8025ec0:	4629      	mov	r1, r5
 8025ec2:	4620      	mov	r0, r4
 8025ec4:	f7ff fbb6 	bl	8025634 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 8025ec8:	f416 7f00 	tst.w	r6, #512	; 0x200
 8025ecc:	d104      	bne.n	8025ed8 <lv_btnmatrix_set_btn_ctrl+0x42>
}
 8025ece:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8025ed0:	2180      	movs	r1, #128	; 0x80
 8025ed2:	f7ff ffce 	bl	8025e72 <lv_btnmatrix_clear_btn_ctrl_all>
 8025ed6:	e7ed      	b.n	8025eb4 <lv_btnmatrix_set_btn_ctrl+0x1e>
        lv_obj_refresh_ext_draw_size(obj);
 8025ed8:	4620      	mov	r0, r4
 8025eda:	f7e1 fc09 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
 8025ede:	e7f6      	b.n	8025ece <lv_btnmatrix_set_btn_ctrl+0x38>
 8025ee0:	4770      	bx	lr

08025ee2 <lv_btnmatrix_get_selected_btn>:
}
 8025ee2:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8025ee4:	4770      	bx	lr
	...

08025ee8 <lv_btnmatrix_get_btn_text>:
{
 8025ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 8025eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025ef0:	4299      	cmp	r1, r3
 8025ef2:	d028      	beq.n	8025f46 <lv_btnmatrix_get_btn_text+0x5e>
 8025ef4:	4682      	mov	sl, r0
 8025ef6:	460f      	mov	r7, r1
    if(btn_id > btnm->btn_cnt) return NULL;
 8025ef8:	f8b0 b030 	ldrh.w	fp, [r0, #48]	; 0x30
 8025efc:	458b      	cmp	fp, r1
 8025efe:	d324      	bcc.n	8025f4a <lv_btnmatrix_get_btn_text+0x62>
    while(btn_i != btn_id) {
 8025f00:	b1b9      	cbz	r1, 8025f32 <lv_btnmatrix_get_btn_text+0x4a>
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 8025f02:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
    uint16_t btn_i = 0;
 8025f06:	2400      	movs	r4, #0
    uint16_t txt_i = 0;
 8025f08:	4626      	mov	r6, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 8025f0a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8025f54 <lv_btnmatrix_get_btn_text+0x6c>
 8025f0e:	e002      	b.n	8025f16 <lv_btnmatrix_get_btn_text+0x2e>
        txt_i++;
 8025f10:	462e      	mov	r6, r5
    while(btn_i != btn_id) {
 8025f12:	42a7      	cmp	r7, r4
 8025f14:	d00f      	beq.n	8025f36 <lv_btnmatrix_get_btn_text+0x4e>
        btn_i++;
 8025f16:	3401      	adds	r4, #1
 8025f18:	b2a4      	uxth	r4, r4
        txt_i++;
 8025f1a:	1c75      	adds	r5, r6, #1
 8025f1c:	b2ad      	uxth	r5, r5
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 8025f1e:	4641      	mov	r1, r8
 8025f20:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8025f24:	f7da f97e 	bl	8000224 <strcmp>
 8025f28:	2800      	cmp	r0, #0
 8025f2a:	d1f1      	bne.n	8025f10 <lv_btnmatrix_get_btn_text+0x28>
 8025f2c:	3602      	adds	r6, #2
 8025f2e:	b2b6      	uxth	r6, r6
 8025f30:	e7ef      	b.n	8025f12 <lv_btnmatrix_get_btn_text+0x2a>
    uint16_t btn_i = 0;
 8025f32:	460c      	mov	r4, r1
    uint16_t txt_i = 0;
 8025f34:	460e      	mov	r6, r1
    if(btn_i == btnm->btn_cnt) return NULL;
 8025f36:	45a3      	cmp	fp, r4
 8025f38:	d009      	beq.n	8025f4e <lv_btnmatrix_get_btn_text+0x66>
    return btnm->map_p[txt_i];
 8025f3a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8025f3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
 8025f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 8025f46:	2000      	movs	r0, #0
 8025f48:	e7fb      	b.n	8025f42 <lv_btnmatrix_get_btn_text+0x5a>
    if(btn_id > btnm->btn_cnt) return NULL;
 8025f4a:	2000      	movs	r0, #0
 8025f4c:	e7f9      	b.n	8025f42 <lv_btnmatrix_get_btn_text+0x5a>
    if(btn_i == btnm->btn_cnt) return NULL;
 8025f4e:	2000      	movs	r0, #0
 8025f50:	e7f7      	b.n	8025f42 <lv_btnmatrix_get_btn_text+0x5a>
 8025f52:	bf00      	nop
 8025f54:	0802ce6c 	.word	0x0802ce6c

08025f58 <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 8025f58:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025f5a:	428b      	cmp	r3, r1
 8025f5c:	d908      	bls.n	8025f70 <lv_btnmatrix_has_btn_ctrl+0x18>
    return ((btnm->ctrl_bits[btn_id] & ctrl) == ctrl) ? true : false;
 8025f5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8025f60:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8025f64:	ea32 0303 	bics.w	r3, r2, r3
 8025f68:	bf0c      	ite	eq
 8025f6a:	2001      	moveq	r0, #1
 8025f6c:	2000      	movne	r0, #0
 8025f6e:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 8025f70:	2000      	movs	r0, #0
}
 8025f72:	4770      	bx	lr

08025f74 <make_one_button_checked>:
 * It simply clears the toggle flag on other buttons.
 * @param obj Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_checked(lv_obj_t * obj, uint16_t btn_idx)
{
 8025f74:	b570      	push	{r4, r5, r6, lr}
 8025f76:	4604      	mov	r4, r0
 8025f78:	460e      	mov	r6, r1
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8025f7a:	2280      	movs	r2, #128	; 0x80
 8025f7c:	f7ff ffec 	bl	8025f58 <lv_btnmatrix_has_btn_ctrl>
 8025f80:	4605      	mov	r5, r0

    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8025f82:	2180      	movs	r1, #128	; 0x80
 8025f84:	4620      	mov	r0, r4
 8025f86:	f7ff ff74 	bl	8025e72 <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8025f8a:	b905      	cbnz	r5, 8025f8e <make_one_button_checked+0x1a>
}
 8025f8c:	bd70      	pop	{r4, r5, r6, pc}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8025f8e:	2280      	movs	r2, #128	; 0x80
 8025f90:	4631      	mov	r1, r6
 8025f92:	4620      	mov	r0, r4
 8025f94:	f7ff ff7f 	bl	8025e96 <lv_btnmatrix_set_btn_ctrl>
}
 8025f98:	e7f8      	b.n	8025f8c <make_one_button_checked+0x18>
	...

08025f9c <lv_btnmatrix_event>:
{
 8025f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025fa0:	b082      	sub	sp, #8
 8025fa2:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8025fa4:	48ba      	ldr	r0, [pc, #744]	; (8026290 <lv_btnmatrix_event+0x2f4>)
 8025fa6:	f7dd fdae 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8025faa:	2801      	cmp	r0, #1
 8025fac:	d002      	beq.n	8025fb4 <lv_btnmatrix_event+0x18>
}
 8025fae:	b002      	add	sp, #8
 8025fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8025fb4:	4630      	mov	r0, r6
 8025fb6:	f7dd fec9 	bl	8003d4c <lv_event_get_code>
 8025fba:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8025fbc:	4630      	mov	r0, r6
 8025fbe:	f7dd fec1 	bl	8003d44 <lv_event_get_target>
 8025fc2:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8025fc4:	2d13      	cmp	r5, #19
 8025fc6:	d024      	beq.n	8026012 <lv_btnmatrix_event+0x76>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8025fc8:	2d2a      	cmp	r5, #42	; 0x2a
 8025fca:	d047      	beq.n	802605c <lv_btnmatrix_event+0xc0>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8025fcc:	2d29      	cmp	r5, #41	; 0x29
 8025fce:	d049      	beq.n	8026064 <lv_btnmatrix_event+0xc8>
    else if(code == LV_EVENT_PRESSED) {
 8025fd0:	2d01      	cmp	r5, #1
 8025fd2:	d04b      	beq.n	802606c <lv_btnmatrix_event+0xd0>
    else if(code == LV_EVENT_PRESSING) {
 8025fd4:	2d02      	cmp	r5, #2
 8025fd6:	f000 808e 	beq.w	80260f6 <lv_btnmatrix_event+0x15a>
    else if(code == LV_EVENT_RELEASED) {
 8025fda:	2d08      	cmp	r5, #8
 8025fdc:	f000 80db 	beq.w	8026196 <lv_btnmatrix_event+0x1fa>
    else if(code == LV_EVENT_LONG_PRESSED_REPEAT) {
 8025fe0:	2d06      	cmp	r5, #6
 8025fe2:	f040 811f 	bne.w	8026224 <lv_btnmatrix_event+0x288>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8025fe6:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 8025fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025fec:	429a      	cmp	r2, r3
 8025fee:	d0de      	beq.n	8025fae <lv_btnmatrix_event+0x12>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8025ff0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 8025ff2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8025ff6:	110b      	asrs	r3, r1, #4
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8025ff8:	ea43 1361 	orr.w	r3, r3, r1, asr #5
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8025ffc:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8026000:	f013 0f01 	tst.w	r3, #1
 8026004:	d1d3      	bne.n	8025fae <lv_btnmatrix_event+0x12>
                uint32_t b = btnm->btn_id_sel;
 8026006:	9200      	str	r2, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8026008:	466a      	mov	r2, sp
 802600a:	211c      	movs	r1, #28
 802600c:	f7dd fe78 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 8026010:	e7cd      	b.n	8025fae <lv_btnmatrix_event+0x12>
 */
static bool has_popovers_in_top_row(lv_obj_t * obj)
{
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;

    if(btnm->row_cnt <= 0) {
 8026012:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8026014:	2b00      	cmp	r3, #0
 8026016:	d0ca      	beq.n	8025fae <lv_btnmatrix_event+0x12>
        return false;
    }

    const char ** map_row = btnm->map_p;
 8026018:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
    uint16_t btn_cnt = 0;

    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 802601c:	f8d9 7000 	ldr.w	r7, [r9]
 8026020:	2f00      	cmp	r7, #0
 8026022:	d0c4      	beq.n	8025fae <lv_btnmatrix_event+0x12>
    uint16_t btn_cnt = 0;
 8026024:	2500      	movs	r5, #0
    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8026026:	46a8      	mov	r8, r5
 8026028:	f8df a268 	ldr.w	sl, [pc, #616]	; 8026294 <lv_btnmatrix_event+0x2f8>
 802602c:	4651      	mov	r1, sl
 802602e:	4638      	mov	r0, r7
 8026030:	f7da f8f8 	bl	8000224 <strcmp>
 8026034:	2800      	cmp	r0, #0
 8026036:	d0ba      	beq.n	8025fae <lv_btnmatrix_event+0x12>
 8026038:	783b      	ldrb	r3, [r7, #0]
 802603a:	2b00      	cmp	r3, #0
 802603c:	d0b7      	beq.n	8025fae <lv_btnmatrix_event+0x12>
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 802603e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026040:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 8026044:	f413 7f00 	tst.w	r3, #512	; 0x200
 8026048:	f040 8272 	bne.w	8026530 <lv_btnmatrix_event+0x594>
            return true;
        }
        btn_cnt++;
 802604c:	3501      	adds	r5, #1
 802604e:	b2ad      	uxth	r5, r5
    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8026050:	46a8      	mov	r8, r5
 8026052:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8026056:	2f00      	cmp	r7, #0
 8026058:	d1e8      	bne.n	802602c <lv_btnmatrix_event+0x90>
 802605a:	e7a8      	b.n	8025fae <lv_btnmatrix_event+0x12>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 802605c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 802605e:	f7ff fd83 	bl	8025b68 <lv_btnmatrix_set_map>
 8026062:	e7a4      	b.n	8025fae <lv_btnmatrix_event+0x12>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 8026064:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8026066:	f7ff fd7f 	bl	8025b68 <lv_btnmatrix_set_map>
 802606a:	e7a0      	b.n	8025fae <lv_btnmatrix_event+0x12>
        void * param = lv_event_get_param(e);
 802606c:	4630      	mov	r0, r6
 802606e:	f7dd fe71 	bl	8003d54 <lv_event_get_param>
 8026072:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 8026074:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8026076:	4620      	mov	r0, r4
 8026078:	f7ff fadc 	bl	8025634 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802607c:	f7de f9e6 	bl	800444c <lv_indev_get_act>
 8026080:	f7de f9ea 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 8026084:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 8026088:	2b01      	cmp	r3, #1
 802608a:	d019      	beq.n	80260c0 <lv_btnmatrix_event+0x124>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 802608c:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 802608e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026092:	4299      	cmp	r1, r3
 8026094:	d08b      	beq.n	8025fae <lv_btnmatrix_event+0x12>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8026096:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 8026098:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 802609c:	1253      	asrs	r3, r2, #9
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 802609e:	ea43 2322 	orr.w	r3, r3, r2, asr #8
 80260a2:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 80260a6:	ea43 03e2 	orr.w	r3, r3, r2, asr #3
 80260aa:	f013 0f01 	tst.w	r3, #1
 80260ae:	f47f af7e 	bne.w	8025fae <lv_btnmatrix_event+0x12>
                uint32_t b = btnm->btn_id_sel;
 80260b2:	9100      	str	r1, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 80260b4:	466a      	mov	r2, sp
 80260b6:	211c      	movs	r1, #28
 80260b8:	4620      	mov	r0, r4
 80260ba:	f7dd fe21 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 80260be:	e776      	b.n	8025fae <lv_btnmatrix_event+0x12>
            lv_indev_get_point(param, &p);
 80260c0:	a901      	add	r1, sp, #4
 80260c2:	4628      	mov	r0, r5
 80260c4:	f7de fa3f 	bl	8004546 <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 80260c8:	a901      	add	r1, sp, #4
 80260ca:	4620      	mov	r0, r4
 80260cc:	f7ff f9e2 	bl	8025494 <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 80260d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80260d4:	4298      	cmp	r0, r3
 80260d6:	d0d9      	beq.n	802608c <lv_btnmatrix_event+0xf0>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80260d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 80260da:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 80260de:	1153      	asrs	r3, r2, #5
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80260e0:	ea43 03e2 	orr.w	r3, r3, r2, asr #3
 80260e4:	f013 0f01 	tst.w	r3, #1
 80260e8:	d1d0      	bne.n	802608c <lv_btnmatrix_event+0xf0>
                    btnm->btn_id_sel = btn_pr;
 80260ea:	86a0      	strh	r0, [r4, #52]	; 0x34
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 80260ec:	4601      	mov	r1, r0
 80260ee:	4620      	mov	r0, r4
 80260f0:	f7ff faa0 	bl	8025634 <invalidate_button_area>
 80260f4:	e7ca      	b.n	802608c <lv_btnmatrix_event+0xf0>
        void * param = lv_event_get_param(e);
 80260f6:	4630      	mov	r0, r6
 80260f8:	f7dd fe2c 	bl	8003d54 <lv_event_get_param>
 80260fc:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 80260fe:	f7de f9a5 	bl	800444c <lv_indev_get_act>
 8026102:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8026104:	f7de f9a8 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 8026108:	2804      	cmp	r0, #4
 802610a:	f43f af50 	beq.w	8025fae <lv_btnmatrix_event+0x12>
 802610e:	2802      	cmp	r0, #2
 8026110:	f43f af4d 	beq.w	8025fae <lv_btnmatrix_event+0x12>
        lv_indev_get_point(indev, &p);
 8026114:	a901      	add	r1, sp, #4
 8026116:	4628      	mov	r0, r5
 8026118:	f7de fa15 	bl	8004546 <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 802611c:	a901      	add	r1, sp, #4
 802611e:	4620      	mov	r0, r4
 8026120:	f7ff f9b8 	bl	8025494 <get_button_from_point>
 8026124:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 8026126:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8026128:	4281      	cmp	r1, r0
 802612a:	f43f af40 	beq.w	8025fae <lv_btnmatrix_event+0x12>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 802612e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026132:	4299      	cmp	r1, r3
 8026134:	d12b      	bne.n	802618e <lv_btnmatrix_event+0x1f2>
            btnm->btn_id_sel = btn_pr;
 8026136:	86a5      	strh	r5, [r4, #52]	; 0x34
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8026138:	4630      	mov	r0, r6
 802613a:	f7de f9f7 	bl	800452c <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 802613e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026142:	429d      	cmp	r5, r3
 8026144:	f43f af33 	beq.w	8025fae <lv_btnmatrix_event+0x12>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8026148:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 802614a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 802614e:	10d3      	asrs	r3, r2, #3
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8026150:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 8026154:	f013 0f01 	tst.w	r3, #1
 8026158:	f47f af29 	bne.w	8025fae <lv_btnmatrix_event+0x12>
                invalidate_button_area(obj, btn_pr);
 802615c:	4629      	mov	r1, r5
 802615e:	4620      	mov	r0, r4
 8026160:	f7ff fa68 	bl	8025634 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8026164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 8026166:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 802616a:	f412 7f80 	tst.w	r2, #256	; 0x100
 802616e:	f47f af1e 	bne.w	8025fae <lv_btnmatrix_event+0x12>
                   button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 8026172:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 8026174:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8026178:	f413 7f00 	tst.w	r3, #512	; 0x200
 802617c:	f47f af17 	bne.w	8025fae <lv_btnmatrix_event+0x12>
                    uint32_t b = btn_pr;
 8026180:	9500      	str	r5, [sp, #0]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8026182:	466a      	mov	r2, sp
 8026184:	211c      	movs	r1, #28
 8026186:	4620      	mov	r0, r4
 8026188:	f7dd fdba 	bl	8003d00 <lv_event_send>
                    if(res != LV_RES_OK) return;
 802618c:	e70f      	b.n	8025fae <lv_btnmatrix_event+0x12>
                invalidate_button_area(obj, btnm->btn_id_sel);
 802618e:	4620      	mov	r0, r4
 8026190:	f7ff fa50 	bl	8025634 <invalidate_button_area>
 8026194:	e7cf      	b.n	8026136 <lv_btnmatrix_event+0x19a>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8026196:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8026198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802619c:	4293      	cmp	r3, r2
 802619e:	d02d      	beq.n	80261fc <lv_btnmatrix_event+0x260>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 80261a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80261a2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80261a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80261aa:	d017      	beq.n	80261dc <lv_btnmatrix_event+0x240>
 80261ac:	f012 0f20 	tst.w	r2, #32
 80261b0:	d114      	bne.n	80261dc <lv_btnmatrix_event+0x240>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 80261b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80261b6:	d008      	beq.n	80261ca <lv_btnmatrix_event+0x22e>
 80261b8:	f890 0036 	ldrb.w	r0, [r0, #54]	; 0x36
 80261bc:	f010 0f01 	tst.w	r0, #1
 80261c0:	d103      	bne.n	80261ca <lv_btnmatrix_event+0x22e>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 80261c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80261c6:	b292      	uxth	r2, r2
 80261c8:	e001      	b.n	80261ce <lv_btnmatrix_event+0x232>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 80261ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80261ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 80261d2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80261d6:	f013 0f01 	tst.w	r3, #1
 80261da:	d114      	bne.n	8026206 <lv_btnmatrix_event+0x26a>
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 80261dc:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80261de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 80261e0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80261e4:	121a      	asrs	r2, r3, #8
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 80261e6:	ea42 2263 	orr.w	r2, r2, r3, asr #9
 80261ea:	f012 0f01 	tst.w	r2, #1
 80261ee:	d005      	beq.n	80261fc <lv_btnmatrix_event+0x260>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80261f0:	10da      	asrs	r2, r3, #3
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80261f2:	ea42 1363 	orr.w	r3, r2, r3, asr #5
 80261f6:	f013 0f01 	tst.w	r3, #1
 80261fa:	d009      	beq.n	8026210 <lv_btnmatrix_event+0x274>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80261fc:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80261fe:	4620      	mov	r0, r4
 8026200:	f7ff fa18 	bl	8025634 <invalidate_button_area>
 8026204:	e6d3      	b.n	8025fae <lv_btnmatrix_event+0x12>
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 8026206:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8026208:	4620      	mov	r0, r4
 802620a:	f7ff feb3 	bl	8025f74 <make_one_button_checked>
 802620e:	e7e5      	b.n	80261dc <lv_btnmatrix_event+0x240>
                uint32_t b = btnm->btn_id_sel;
 8026210:	9100      	str	r1, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8026212:	466a      	mov	r2, sp
 8026214:	211c      	movs	r1, #28
 8026216:	4620      	mov	r0, r4
 8026218:	f7dd fd72 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return;
 802621c:	2801      	cmp	r0, #1
 802621e:	f47f aec6 	bne.w	8025fae <lv_btnmatrix_event+0x12>
 8026222:	e7eb      	b.n	80261fc <lv_btnmatrix_event+0x260>
    else if(code == LV_EVENT_PRESS_LOST) {
 8026224:	2d03      	cmp	r5, #3
 8026226:	d106      	bne.n	8026236 <lv_btnmatrix_event+0x29a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8026228:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 802622a:	f7ff fa03 	bl	8025634 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 802622e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026232:	86a3      	strh	r3, [r4, #52]	; 0x34
 8026234:	e6bb      	b.n	8025fae <lv_btnmatrix_event+0x12>
    else if(code == LV_EVENT_FOCUSED) {
 8026236:	2d0e      	cmp	r5, #14
 8026238:	d150      	bne.n	80262dc <lv_btnmatrix_event+0x340>
        lv_indev_t * indev = lv_event_get_param(e);
 802623a:	4630      	mov	r0, r6
 802623c:	f7dd fd8a 	bl	8003d54 <lv_event_get_param>
 8026240:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8026242:	f7de f909 	bl	8004458 <lv_indev_get_type>
 8026246:	4606      	mov	r6, r0
        if(indev == NULL) {
 8026248:	b1dd      	cbz	r5, 8026282 <lv_btnmatrix_event+0x2e6>
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 802624a:	4620      	mov	r0, r4
 802624c:	f7e0 fbd5 	bl	80069fa <lv_obj_get_group>
 8026250:	f7de f81a 	bl	8004288 <lv_group_get_editing>
        if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8026254:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8026256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802625a:	429a      	cmp	r2, r3
 802625c:	f47f aea7 	bne.w	8025fae <lv_btnmatrix_event+0x12>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 8026260:	2e02      	cmp	r6, #2
 8026262:	d005      	beq.n	8026270 <lv_btnmatrix_event+0x2d4>
 8026264:	2e04      	cmp	r6, #4
 8026266:	f47f aea2 	bne.w	8025fae <lv_btnmatrix_event+0x12>
 802626a:	2800      	cmp	r0, #0
 802626c:	f43f ae9f 	beq.w	8025fae <lv_btnmatrix_event+0x12>
                if(btnm->one_check) {
 8026270:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8026274:	f013 0f01 	tst.w	r3, #1
 8026278:	d00e      	beq.n	8026298 <lv_btnmatrix_event+0x2fc>
 802627a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802627c:	3802      	subs	r0, #2
                uint32_t b = 0;
 802627e:	2100      	movs	r1, #0
 8026280:	e01f      	b.n	80262c2 <lv_btnmatrix_event+0x326>
            indev = lv_indev_get_next(NULL);
 8026282:	2000      	movs	r0, #0
 8026284:	f7fa f922 	bl	80204cc <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 8026288:	f7de f8e6 	bl	8004458 <lv_indev_get_type>
 802628c:	4606      	mov	r6, r0
 802628e:	e7dc      	b.n	802624a <lv_btnmatrix_event+0x2ae>
 8026290:	08032f5c 	.word	0x08032f5c
 8026294:	0802ce6c 	.word	0x0802ce6c
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 8026298:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 802629a:	8803      	ldrh	r3, [r0, #0]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 802629c:	1159      	asrs	r1, r3, #5
 802629e:	ea41 01e3 	orr.w	r1, r1, r3, asr #3
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 80262a2:	f011 0101 	ands.w	r1, r1, #1
                uint32_t b = 0;
 80262a6:	bf18      	it	ne
 80262a8:	2100      	movne	r1, #0
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 80262aa:	d015      	beq.n	80262d8 <lv_btnmatrix_event+0x33c>
 80262ac:	3101      	adds	r1, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80262ae:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 80262b2:	10d3      	asrs	r3, r2, #3
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 80262b4:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 80262b8:	f013 0f01 	tst.w	r3, #1
 80262bc:	d1f6      	bne.n	80262ac <lv_btnmatrix_event+0x310>
 80262be:	e00b      	b.n	80262d8 <lv_btnmatrix_event+0x33c>
                          button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 80262c0:	3101      	adds	r1, #1
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 80262c2:	f830 2f02 	ldrh.w	r2, [r0, #2]!
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80262c6:	10d3      	asrs	r3, r2, #3
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 80262c8:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 80262cc:	f013 0f01 	tst.w	r3, #1
 80262d0:	d1f6      	bne.n	80262c0 <lv_btnmatrix_event+0x324>
 80262d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80262d6:	d0f3      	beq.n	80262c0 <lv_btnmatrix_event+0x324>
                btnm->btn_id_sel = b;
 80262d8:	86a1      	strh	r1, [r4, #52]	; 0x34
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 80262da:	e668      	b.n	8025fae <lv_btnmatrix_event+0x12>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 80262dc:	f1a5 030f 	sub.w	r3, r5, #15
 80262e0:	b2db      	uxtb	r3, r3
 80262e2:	2b01      	cmp	r3, #1
 80262e4:	d80b      	bhi.n	80262fe <lv_btnmatrix_event+0x362>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 80262e6:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80262e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80262ec:	4299      	cmp	r1, r3
 80262ee:	d103      	bne.n	80262f8 <lv_btnmatrix_event+0x35c>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 80262f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80262f4:	86a3      	strh	r3, [r4, #52]	; 0x34
 80262f6:	e65a      	b.n	8025fae <lv_btnmatrix_event+0x12>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 80262f8:	f7ff f99c 	bl	8025634 <invalidate_button_area>
 80262fc:	e7f8      	b.n	80262f0 <lv_btnmatrix_event+0x354>
    else if(code == LV_EVENT_KEY) {
 80262fe:	2d0d      	cmp	r5, #13
 8026300:	f040 810f 	bne.w	8026522 <lv_btnmatrix_event+0x586>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8026304:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8026306:	f7ff f995 	bl	8025634 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 802630a:	4630      	mov	r0, r6
 802630c:	f7dd fd22 	bl	8003d54 <lv_event_get_param>
 8026310:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 8026312:	2b13      	cmp	r3, #19
 8026314:	d027      	beq.n	8026366 <lv_btnmatrix_event+0x3ca>
        else if(c == LV_KEY_LEFT) {
 8026316:	2b14      	cmp	r3, #20
 8026318:	d04a      	beq.n	80263b0 <lv_btnmatrix_event+0x414>
        else if(c == LV_KEY_DOWN) {
 802631a:	2b12      	cmp	r3, #18
 802631c:	d070      	beq.n	8026400 <lv_btnmatrix_event+0x464>
        else if(c == LV_KEY_UP) {
 802631e:	2b11      	cmp	r3, #17
 8026320:	d141      	bne.n	80263a6 <lv_btnmatrix_event+0x40a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8026322:	2215      	movs	r2, #21
 8026324:	2100      	movs	r1, #0
 8026326:	4620      	mov	r0, r4
 8026328:	f7e4 fa5e 	bl	800a7e8 <lv_obj_get_style_prop>
 802632c:	4605      	mov	r5, r0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 802632e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8026330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026334:	4293      	cmp	r3, r2
 8026336:	f000 80bd 	beq.w	80264b4 <lv_btnmatrix_event+0x518>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 802633a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802633c:	eb00 06c3 	add.w	r6, r0, r3, lsl #3
 8026340:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026344:	88b2      	ldrh	r2, [r6, #4]
 8026346:	3201      	adds	r2, #1
 8026348:	1a52      	subs	r2, r2, r1
 802634a:	f342 024e 	sbfx	r2, r2, #1, #15
 802634e:	440a      	add	r2, r1
                lv_coord_t pr_center =
 8026350:	b211      	sxth	r1, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8026352:	b21b      	sxth	r3, r3
 8026354:	2b00      	cmp	r3, #0
 8026356:	db26      	blt.n	80263a6 <lv_btnmatrix_event+0x40a>
    return (lv_coord_t)v.num;
 8026358:	b22d      	sxth	r5, r5
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 802635a:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
 802635e:	1c87      	adds	r7, r0, #2
                       pr_center <= btnm->button_areas[area_above].x2 &&
 8026360:	f100 0e04 	add.w	lr, r0, #4
 8026364:	e0c1      	b.n	80264ea <lv_btnmatrix_event+0x54e>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8026366:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8026368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802636c:	4293      	cmp	r3, r2
            else btnm->btn_id_sel++;
 802636e:	bf1a      	itte	ne
 8026370:	3301      	addne	r3, #1
 8026372:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8026374:	2300      	moveq	r3, #0
 8026376:	86a3      	strh	r3, [r4, #52]	; 0x34
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026378:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 802637a:	429d      	cmp	r5, r3
 802637c:	bf9c      	itt	ls
 802637e:	2300      	movls	r3, #0
 8026380:	86a3      	strhls	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026382:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026384:	2600      	movs	r6, #0
 8026386:	e005      	b.n	8026394 <lv_btnmatrix_event+0x3f8>
                btnm->btn_id_sel++;
 8026388:	3301      	adds	r3, #1
 802638a:	b29b      	uxth	r3, r3
 802638c:	86a3      	strh	r3, [r4, #52]	; 0x34
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 802638e:	429d      	cmp	r5, r3
 8026390:	bf98      	it	ls
 8026392:	86a6      	strhls	r6, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026394:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026396:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 802639a:	10ca      	asrs	r2, r1, #3
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 802639c:	ea42 1261 	orr.w	r2, r2, r1, asr #5
 80263a0:	f012 0f01 	tst.w	r2, #1
 80263a4:	d1f0      	bne.n	8026388 <lv_btnmatrix_event+0x3ec>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80263a6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80263a8:	4620      	mov	r0, r4
 80263aa:	f7ff f943 	bl	8025634 <invalidate_button_area>
 80263ae:	e5fe      	b.n	8025fae <lv_btnmatrix_event+0x12>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 80263b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80263b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80263b6:	4293      	cmp	r3, r2
 80263b8:	d003      	beq.n	80263c2 <lv_btnmatrix_event+0x426>
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 80263ba:	b113      	cbz	r3, 80263c2 <lv_btnmatrix_event+0x426>
            else if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 80263bc:	3b01      	subs	r3, #1
 80263be:	b29b      	uxth	r3, r3
 80263c0:	e002      	b.n	80263c8 <lv_btnmatrix_event+0x42c>
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 80263c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80263c4:	3b01      	subs	r3, #1
 80263c6:	b29b      	uxth	r3, r3
 80263c8:	86a3      	strh	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80263ca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80263cc:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 80263d0:	114a      	asrs	r2, r1, #5
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80263d2:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
 80263d6:	f012 0f01 	tst.w	r2, #1
 80263da:	d10c      	bne.n	80263f6 <lv_btnmatrix_event+0x45a>
 80263dc:	e7e3      	b.n	80263a6 <lv_btnmatrix_event+0x40a>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 80263de:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80263e0:	3b01      	subs	r3, #1
 80263e2:	b29b      	uxth	r3, r3
 80263e4:	86a3      	strh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80263e6:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 80263ea:	10ca      	asrs	r2, r1, #3
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80263ec:	ea42 1261 	orr.w	r2, r2, r1, asr #5
 80263f0:	f012 0f01 	tst.w	r2, #1
 80263f4:	d0d7      	beq.n	80263a6 <lv_btnmatrix_event+0x40a>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 80263f6:	2b00      	cmp	r3, #0
 80263f8:	d0f1      	beq.n	80263de <lv_btnmatrix_event+0x442>
 80263fa:	3b01      	subs	r3, #1
 80263fc:	b29b      	uxth	r3, r3
 80263fe:	e7f1      	b.n	80263e4 <lv_btnmatrix_event+0x448>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8026400:	2215      	movs	r2, #21
 8026402:	2100      	movs	r1, #0
 8026404:	4620      	mov	r0, r4
 8026406:	f7e4 f9ef 	bl	800a7e8 <lv_obj_get_style_prop>
 802640a:	4606      	mov	r6, r0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 802640c:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 802640e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026412:	4299      	cmp	r1, r3
 8026414:	d017      	beq.n	8026446 <lv_btnmatrix_event+0x4aa>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8026416:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8026418:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 802641c:	f837 2031 	ldrh.w	r2, [r7, r1, lsl #3]
 8026420:	8883      	ldrh	r3, [r0, #4]
 8026422:	3301      	adds	r3, #1
 8026424:	1a9b      	subs	r3, r3, r2
 8026426:	f343 034e 	sbfx	r3, r3, #1, #15
 802642a:	441a      	add	r2, r3
                lv_coord_t pr_center =
 802642c:	b212      	sxth	r2, r2
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 802642e:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8026430:	428d      	cmp	r5, r1
 8026432:	d9b8      	bls.n	80263a6 <lv_btnmatrix_event+0x40a>
    return (lv_coord_t)v.num;
 8026434:	b236      	sxth	r6, r6
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 8026436:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802643a:	004b      	lsls	r3, r1, #1
 802643c:	f107 0c02 	add.w	ip, r7, #2
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 8026440:	f107 0804 	add.w	r8, r7, #4
 8026444:	e01a      	b.n	802647c <lv_btnmatrix_event+0x4e0>
                btnm->btn_id_sel = 0;
 8026446:	2300      	movs	r3, #0
 8026448:	86a3      	strh	r3, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 802644a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 802644c:	461d      	mov	r5, r3
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 802644e:	e006      	b.n	802645e <lv_btnmatrix_event+0x4c2>
                    btnm->btn_id_sel++;
 8026450:	3301      	adds	r3, #1
 8026452:	b29b      	uxth	r3, r3
 8026454:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026456:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8026458:	429a      	cmp	r2, r3
 802645a:	bf98      	it	ls
 802645c:	86a5      	strhls	r5, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 802645e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026460:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026464:	114a      	asrs	r2, r1, #5
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026466:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
 802646a:	f012 0f01 	tst.w	r2, #1
 802646e:	d1ef      	bne.n	8026450 <lv_btnmatrix_event+0x4b4>
 8026470:	e799      	b.n	80263a6 <lv_btnmatrix_event+0x40a>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8026472:	3101      	adds	r1, #1
 8026474:	b289      	uxth	r1, r1
 8026476:	3302      	adds	r3, #2
 8026478:	428d      	cmp	r5, r1
 802647a:	d994      	bls.n	80263a6 <lv_btnmatrix_event+0x40a>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 802647c:	f93c 0023 	ldrsh.w	r0, [ip, r3, lsl #2]
 8026480:	4570      	cmp	r0, lr
 8026482:	ddf6      	ble.n	8026472 <lv_btnmatrix_event+0x4d6>
 8026484:	f937 0023 	ldrsh.w	r0, [r7, r3, lsl #2]
 8026488:	4290      	cmp	r0, r2
 802648a:	dcf2      	bgt.n	8026472 <lv_btnmatrix_event+0x4d6>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 802648c:	f938 0023 	ldrsh.w	r0, [r8, r3, lsl #2]
 8026490:	4430      	add	r0, r6
                       pr_center >= btnm->button_areas[area_below].x1 &&
 8026492:	4282      	cmp	r2, r0
 8026494:	dced      	bgt.n	8026472 <lv_btnmatrix_event+0x4d6>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 8026496:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026498:	f830 9003 	ldrh.w	r9, [r0, r3]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 802649c:	ea4f 00e9 	mov.w	r0, r9, asr #3
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 80264a0:	ea40 1069 	orr.w	r0, r0, r9, asr #5
 80264a4:	f010 0f01 	tst.w	r0, #1
 80264a8:	d1e3      	bne.n	8026472 <lv_btnmatrix_event+0x4d6>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 80264aa:	42a9      	cmp	r1, r5
 80264ac:	f4bf af7b 	bcs.w	80263a6 <lv_btnmatrix_event+0x40a>
 80264b0:	86a1      	strh	r1, [r4, #52]	; 0x34
 80264b2:	e778      	b.n	80263a6 <lv_btnmatrix_event+0x40a>
                btnm->btn_id_sel = 0;
 80264b4:	2300      	movs	r3, #0
 80264b6:	86a3      	strh	r3, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80264b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80264ba:	461d      	mov	r5, r3
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80264bc:	e006      	b.n	80264cc <lv_btnmatrix_event+0x530>
                    btnm->btn_id_sel++;
 80264be:	3301      	adds	r3, #1
 80264c0:	b29b      	uxth	r3, r3
 80264c2:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 80264c4:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 80264c6:	429a      	cmp	r2, r3
 80264c8:	bf98      	it	ls
 80264ca:	86a5      	strhls	r5, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80264cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80264ce:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 80264d2:	114a      	asrs	r2, r1, #5
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 80264d4:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
 80264d8:	f012 0f01 	tst.w	r2, #1
 80264dc:	d1ef      	bne.n	80264be <lv_btnmatrix_event+0x522>
 80264de:	e762      	b.n	80263a6 <lv_btnmatrix_event+0x40a>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 80264e0:	3b01      	subs	r3, #1
 80264e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80264e6:	f47f af5e 	bne.w	80263a6 <lv_btnmatrix_event+0x40a>
 80264ea:	b21e      	sxth	r6, r3
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 80264ec:	f937 2033 	ldrsh.w	r2, [r7, r3, lsl #3]
 80264f0:	4562      	cmp	r2, ip
 80264f2:	daf5      	bge.n	80264e0 <lv_btnmatrix_event+0x544>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 80264f4:	f930 2033 	ldrsh.w	r2, [r0, r3, lsl #3]
 80264f8:	1b52      	subs	r2, r2, r5
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 80264fa:	4291      	cmp	r1, r2
 80264fc:	dbf0      	blt.n	80264e0 <lv_btnmatrix_event+0x544>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 80264fe:	f93e 2033 	ldrsh.w	r2, [lr, r3, lsl #3]
 8026502:	428a      	cmp	r2, r1
 8026504:	dbec      	blt.n	80264e0 <lv_btnmatrix_event+0x544>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8026506:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026508:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 802650c:	ea4f 02e8 	mov.w	r2, r8, asr #3
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8026510:	ea42 1268 	orr.w	r2, r2, r8, asr #5
 8026514:	f012 0f01 	tst.w	r2, #1
 8026518:	d1e2      	bne.n	80264e0 <lv_btnmatrix_event+0x544>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 802651a:	2e00      	cmp	r6, #0
 802651c:	bfa8      	it	ge
 802651e:	86a3      	strhge	r3, [r4, #52]	; 0x34
 8026520:	e741      	b.n	80263a6 <lv_btnmatrix_event+0x40a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8026522:	2d15      	cmp	r5, #21
 8026524:	f47f ad43 	bne.w	8025fae <lv_btnmatrix_event+0x12>
        draw_main(e);
 8026528:	4630      	mov	r0, r6
 802652a:	f7ff f8ff 	bl	802572c <draw_main>
 802652e:	e53e      	b.n	8025fae <lv_btnmatrix_event+0x12>
            lv_coord_t s = btnm->row_cnt > 0 ? lv_obj_get_content_height(obj) / btnm->row_cnt : 0;
 8026530:	4620      	mov	r0, r4
 8026532:	f7e1 fb03 	bl	8007b3c <lv_obj_get_content_height>
 8026536:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8026538:	fb90 f1f1 	sdiv	r1, r0, r1
            lv_event_set_ext_draw_size(e, s);
 802653c:	b209      	sxth	r1, r1
 802653e:	4630      	mov	r0, r6
 8026540:	f7dd fc7c 	bl	8003e3c <lv_event_set_ext_draw_size>
 8026544:	e533      	b.n	8025fae <lv_btnmatrix_event+0x12>
 8026546:	bf00      	nop

08026548 <lv_btnmatrix_set_one_checked>:
{
 8026548:	b508      	push	{r3, lr}
    btnm->one_check     = en;
 802654a:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 802654e:	f361 0200 	bfi	r2, r1, #0, #1
 8026552:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
    make_one_button_checked(obj, 0);
 8026556:	2100      	movs	r1, #0
 8026558:	f7ff fd0c 	bl	8025f74 <make_one_button_checked>
}
 802655c:	bd08      	pop	{r3, pc}
	...

08026560 <lv_checkbox_event>:
    }
    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8026560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026564:	b0b9      	sub	sp, #228	; 0xe4
 8026566:	460d      	mov	r5, r1
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8026568:	48bb      	ldr	r0, [pc, #748]	; (8026858 <lv_checkbox_event+0x2f8>)
 802656a:	f7dd facc 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802656e:	2801      	cmp	r0, #1
 8026570:	d002      	beq.n	8026578 <lv_checkbox_event+0x18>
        *s = LV_MAX(*s, m);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 8026572:	b039      	add	sp, #228	; 0xe4
 8026574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8026578:	4628      	mov	r0, r5
 802657a:	f7dd fbe7 	bl	8003d4c <lv_event_get_code>
 802657e:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8026580:	4628      	mov	r0, r5
 8026582:	f7dd fbdf 	bl	8003d44 <lv_event_get_target>
 8026586:	4606      	mov	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8026588:	2c2c      	cmp	r4, #44	; 0x2c
 802658a:	f000 80fa 	beq.w	8026782 <lv_checkbox_event+0x222>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802658e:	2c13      	cmp	r4, #19
 8026590:	f000 8151 	beq.w	8026836 <lv_checkbox_event+0x2d6>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8026594:	2c15      	cmp	r4, #21
 8026596:	d1ec      	bne.n	8026572 <lv_checkbox_event+0x12>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 8026598:	4628      	mov	r0, r5
 802659a:	f7dd fbd3 	bl	8003d44 <lv_event_get_target>
 802659e:	4604      	mov	r4, r0
    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80265a0:	4628      	mov	r0, r5
 80265a2:	f7dd fc43 	bl	8003e2c <lv_event_get_draw_ctx>
 80265a6:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80265a8:	2257      	movs	r2, #87	; 0x57
 80265aa:	2100      	movs	r1, #0
 80265ac:	4620      	mov	r0, r4
 80265ae:	f7e4 f91b 	bl	800a7e8 <lv_obj_get_style_prop>
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 80265b2:	9005      	str	r0, [sp, #20]
 80265b4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80265b8:	9104      	str	r1, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80265ba:	2232      	movs	r2, #50	; 0x32
 80265bc:	2100      	movs	r1, #0
 80265be:	4620      	mov	r0, r4
 80265c0:	f7e4 f912 	bl	800a7e8 <lv_obj_get_style_prop>
 80265c4:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80265c6:	2210      	movs	r2, #16
 80265c8:	2100      	movs	r1, #0
 80265ca:	4620      	mov	r0, r4
 80265cc:	f7e4 f90c 	bl	800a7e8 <lv_obj_get_style_prop>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
    lv_coord_t font_h = lv_font_get_line_height(font);

    lv_coord_t bg_border = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 80265d0:	b2ad      	uxth	r5, r5
 80265d2:	182f      	adds	r7, r5, r0
 80265d4:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80265d6:	2212      	movs	r2, #18
 80265d8:	2100      	movs	r1, #0
 80265da:	4620      	mov	r0, r4
 80265dc:	f7e4 f904 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 80265e0:	4405      	add	r5, r0
 80265e2:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80265e4:	2215      	movs	r2, #21
 80265e6:	2100      	movs	r1, #0
 80265e8:	4620      	mov	r0, r4
 80265ea:	f7e4 f8fd 	bl	800a7e8 <lv_obj_get_style_prop>
 80265ee:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80265f0:	2212      	movs	r2, #18
 80265f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80265f6:	4620      	mov	r0, r4
 80265f8:	f7e4 f8f6 	bl	800a7e8 <lv_obj_get_style_prop>
 80265fc:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80265fe:	2213      	movs	r2, #19
 8026600:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026604:	4620      	mov	r0, r4
 8026606:	f7e4 f8ef 	bl	800a7e8 <lv_obj_get_style_prop>
 802660a:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802660c:	2210      	movs	r2, #16
 802660e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026612:	4620      	mov	r0, r4
 8026614:	f7e4 f8e8 	bl	800a7e8 <lv_obj_get_style_prop>
 8026618:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802661a:	2211      	movs	r2, #17
 802661c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026620:	4620      	mov	r0, r4
 8026622:	f7e4 f8e1 	bl	800a7e8 <lv_obj_get_style_prop>
 8026626:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8026628:	2268      	movs	r2, #104	; 0x68
 802662a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802662e:	4620      	mov	r0, r4
 8026630:	f7e4 f8da 	bl	800a7e8 <lv_obj_get_style_prop>
 8026634:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8026636:	2269      	movs	r2, #105	; 0x69
 8026638:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802663c:	4620      	mov	r0, r4
 802663e:	f7e4 f8d3 	bl	800a7e8 <lv_obj_get_style_prop>
 8026642:	9009      	str	r0, [sp, #36]	; 0x24

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 8026644:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8026648:	4650      	mov	r0, sl
 802664a:	f7e8 fd8d 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 802664e:	4652      	mov	r2, sl
 8026650:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026654:	4620      	mov	r0, r4
 8026656:	f7e0 fd01 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 802665a:	8aa3      	ldrh	r3, [r4, #20]
 802665c:	441d      	add	r5, r3
 802665e:	b2ab      	uxth	r3, r5
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8026660:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8026664:	eb08 050b 	add.w	r5, r8, fp
 8026668:	3d01      	subs	r5, #1
 802666a:	4415      	add	r5, r2
 802666c:	441d      	add	r5, r3
 802666e:	b2ad      	uxth	r5, r5
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8026670:	8ae1      	ldrh	r1, [r4, #22]
 8026672:	4439      	add	r1, r7
 8026674:	b289      	uxth	r1, r1
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;
 8026676:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802667a:	44b4      	add	ip, r6
 802667c:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8026680:	4416      	add	r6, r2
 8026682:	b2b6      	uxth	r6, r6

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 8026684:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8026688:	1a1b      	subs	r3, r3, r0
 802668a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    marker_area_transf.x2 += transf_w;
 802668e:	4428      	add	r0, r5
 8026690:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    marker_area_transf.y1 -= transf_h;
 8026694:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8026698:	1a0b      	subs	r3, r1, r0
 802669a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    marker_area_transf.y2 += transf_h;
 802669e:	4430      	add	r0, r6
 80266a0:	4408      	add	r0, r1
 80266a2:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80266a6:	4649      	mov	r1, r9
 80266a8:	a826      	add	r0, sp, #152	; 0x98
 80266aa:	f7e1 f812 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.rect_dsc = &indic_dsc;
 80266ae:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
    part_draw_dsc.class_p = MY_CLASS;
 80266b2:	4b69      	ldr	r3, [pc, #420]	; (8026858 <lv_checkbox_event+0x2f8>)
 80266b4:	9327      	str	r3, [sp, #156]	; 0x9c
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 80266b6:	f04f 0800 	mov.w	r8, #0
 80266ba:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
    part_draw_dsc.draw_area = &marker_area_transf;
 80266be:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80266c2:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
    part_draw_dsc.part = LV_PART_INDICATOR;
 80266c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80266ca:	9333      	str	r3, [sp, #204]	; 0xcc

    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80266cc:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
 80266d0:	4662      	mov	r2, ip
 80266d2:	211a      	movs	r1, #26
 80266d4:	4620      	mov	r0, r4
 80266d6:	f7dd fb13 	bl	8003d00 <lv_event_send>
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 80266da:	465a      	mov	r2, fp
 80266dc:	4651      	mov	r1, sl
 80266de:	4648      	mov	r0, r9
 80266e0:	f7e8 fd9e 	bl	800f220 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80266e4:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
 80266e8:	4662      	mov	r2, ip
 80266ea:	211b      	movs	r1, #27
 80266ec:	4620      	mov	r0, r4
 80266ee:	f7dd fb07 	bl	8003d00 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80266f2:	2259      	movs	r2, #89	; 0x59
 80266f4:	4641      	mov	r1, r8
 80266f6:	4620      	mov	r0, r4
 80266f8:	f7e4 f876 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80266fc:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026700:	2258      	movs	r2, #88	; 0x58
 8026702:	4641      	mov	r1, r8
 8026704:	4620      	mov	r0, r4
 8026706:	f7e4 f86f 	bl	800a7e8 <lv_obj_get_style_prop>

    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

    lv_point_t txt_size;
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 802670a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802670c:	f8cd 8008 	str.w	r8, [sp, #8]
 8026710:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8026714:	9301      	str	r3, [sp, #4]
 8026716:	f8cd a000 	str.w	sl, [sp]
 802671a:	b203      	sxth	r3, r0
 802671c:	9a05      	ldr	r2, [sp, #20]
 802671e:	a80b      	add	r0, sp, #44	; 0x2c
 8026720:	f7fd fbdd 	bl	8023ede <lv_txt_get_size>

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
 8026724:	ab10      	add	r3, sp, #64	; 0x40
 8026726:	4618      	mov	r0, r3
 8026728:	f7e6 ff62 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 802672c:	ab10      	add	r3, sp, #64	; 0x40
 802672e:	461a      	mov	r2, r3
 8026730:	4641      	mov	r1, r8
 8026732:	4620      	mov	r0, r4
 8026734:	f7e0 fe07 	bl	8007346 <lv_obj_init_draw_label_dsc>

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 8026738:	9b06      	ldr	r3, [sp, #24]
 802673a:	441d      	add	r5, r3
 802673c:	b2ad      	uxth	r5, r5
 802673e:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8026742:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8026746:	441d      	add	r5, r3
 8026748:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802674c:	1c73      	adds	r3, r6, #1
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 802674e:	b21b      	sxth	r3, r3
 8026750:	9a04      	ldr	r2, [sp, #16]
 8026752:	1a9b      	subs	r3, r3, r2
 8026754:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8026758:	eb07 0363 	add.w	r3, r7, r3, asr #1
 802675c:	8ae7      	ldrh	r7, [r4, #22]
 802675e:	443b      	add	r3, r7
 8026760:	b29b      	uxth	r3, r3
 8026762:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8026766:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 802676a:	4413      	add	r3, r2
 802676c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8026770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026772:	f8cd 8000 	str.w	r8, [sp]
 8026776:	aa0e      	add	r2, sp, #56	; 0x38
 8026778:	a910      	add	r1, sp, #64	; 0x40
 802677a:	4648      	mov	r0, r9
 802677c:	f7e6 ff6c 	bl	800d658 <lv_draw_label>
}
 8026780:	e6f7      	b.n	8026572 <lv_checkbox_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 8026782:	4628      	mov	r0, r5
 8026784:	f7dd fae6 	bl	8003d54 <lv_event_get_param>
 8026788:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802678a:	2257      	movs	r2, #87	; 0x57
 802678c:	2100      	movs	r1, #0
 802678e:	4630      	mov	r0, r6
 8026790:	f7e4 f82a 	bl	800a7e8 <lv_obj_get_style_prop>
 8026794:	4604      	mov	r4, r0
 8026796:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802679a:	2259      	movs	r2, #89	; 0x59
 802679c:	2100      	movs	r1, #0
 802679e:	4630      	mov	r0, r6
 80267a0:	f7e4 f822 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80267a4:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80267a6:	2258      	movs	r2, #88	; 0x58
 80267a8:	2100      	movs	r1, #0
 80267aa:	4630      	mov	r0, r6
 80267ac:	f7e4 f81c 	bl	800a7e8 <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80267b0:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80267b2:	f04f 0800 	mov.w	r8, #0
 80267b6:	f8cd 8008 	str.w	r8, [sp, #8]
 80267ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80267be:	9301      	str	r3, [sp, #4]
 80267c0:	9700      	str	r7, [sp, #0]
 80267c2:	b203      	sxth	r3, r0
 80267c4:	4622      	mov	r2, r4
 80267c6:	a826      	add	r0, sp, #152	; 0x98
 80267c8:	f7fd fb89 	bl	8023ede <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80267cc:	2215      	movs	r2, #21
 80267ce:	4641      	mov	r1, r8
 80267d0:	4630      	mov	r0, r6
 80267d2:	f7e4 f809 	bl	800a7e8 <lv_obj_get_style_prop>
 80267d6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80267d8:	2212      	movs	r2, #18
 80267da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80267de:	4630      	mov	r0, r6
 80267e0:	f7e4 f802 	bl	800a7e8 <lv_obj_get_style_prop>
 80267e4:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80267e6:	2213      	movs	r2, #19
 80267e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80267ec:	4630      	mov	r0, r6
 80267ee:	f7e3 fffb 	bl	800a7e8 <lv_obj_get_style_prop>
 80267f2:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80267f4:	2210      	movs	r2, #16
 80267f6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80267fa:	4630      	mov	r0, r6
 80267fc:	f7e3 fff4 	bl	800a7e8 <lv_obj_get_style_prop>
 8026800:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026802:	2211      	movs	r2, #17
 8026804:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026808:	4630      	mov	r0, r6
 802680a:	f7e3 ffed 	bl	800a7e8 <lv_obj_get_style_prop>
        marker_size.x = font_h + marker_leftp + marker_rightp;
 802680e:	fa1f f389 	uxth.w	r3, r9
        p->x = marker_size.x + txt_size.x + bg_colp;
 8026812:	eb04 020a 	add.w	r2, r4, sl
 8026816:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 802681a:	4422      	add	r2, r4
 802681c:	4442      	add	r2, r8
 802681e:	441a      	add	r2, r3
 8026820:	802a      	strh	r2, [r5, #0]
        marker_size.y = font_h + marker_topp + marker_bottomp;
 8026822:	4407      	add	r7, r0
 8026824:	443b      	add	r3, r7
        p->y = LV_MAX(marker_size.y, txt_size.y);
 8026826:	b21b      	sxth	r3, r3
 8026828:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
 802682c:	4293      	cmp	r3, r2
 802682e:	bfb8      	it	lt
 8026830:	4613      	movlt	r3, r2
 8026832:	806b      	strh	r3, [r5, #2]
 8026834:	e69d      	b.n	8026572 <lv_checkbox_event+0x12>
        lv_coord_t * s = lv_event_get_param(e);
 8026836:	4628      	mov	r0, r5
 8026838:	f7dd fa8c 	bl	8003d54 <lv_event_get_param>
 802683c:	4604      	mov	r4, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 802683e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026842:	4630      	mov	r0, r6
 8026844:	f7e0 fedb 	bl	80075fe <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 8026848:	f9b4 3000 	ldrsh.w	r3, [r4]
 802684c:	4283      	cmp	r3, r0
 802684e:	bfb8      	it	lt
 8026850:	4603      	movlt	r3, r0
 8026852:	8023      	strh	r3, [r4, #0]
 8026854:	e68d      	b.n	8026572 <lv_checkbox_event+0x12>
 8026856:	bf00      	nop
 8026858:	08032f84 	.word	0x08032f84

0802685c <lv_checkbox_destructor>:
    if(!cb->static_txt) {
 802685c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8026860:	f013 0f01 	tst.w	r3, #1
 8026864:	d000      	beq.n	8026868 <lv_checkbox_destructor+0xc>
 8026866:	4770      	bx	lr
{
 8026868:	b510      	push	{r4, lr}
 802686a:	460c      	mov	r4, r1
        lv_mem_free(cb->txt);
 802686c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802686e:	f7fb f819 	bl	80218a4 <lv_mem_free>
        cb->txt = NULL;
 8026872:	2300      	movs	r3, #0
 8026874:	6263      	str	r3, [r4, #36]	; 0x24
}
 8026876:	bd10      	pop	{r4, pc}

08026878 <lv_checkbox_constructor>:
{
 8026878:	b510      	push	{r4, lr}
 802687a:	460c      	mov	r4, r1
    cb->txt = "Check box";
 802687c:	4b0a      	ldr	r3, [pc, #40]	; (80268a8 <lv_checkbox_constructor+0x30>)
 802687e:	624b      	str	r3, [r1, #36]	; 0x24
    cb->static_txt = 1;
 8026880:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8026884:	f043 0301 	orr.w	r3, r3, #1
 8026888:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 802688c:	2102      	movs	r1, #2
 802688e:	4620      	mov	r0, r4
 8026890:	f7e0 f80e 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8026894:	2108      	movs	r1, #8
 8026896:	4620      	mov	r0, r4
 8026898:	f7e0 f80a 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 802689c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80268a0:	4620      	mov	r0, r4
 80268a2:	f7e0 f805 	bl	80068b0 <lv_obj_add_flag>
}
 80268a6:	bd10      	pop	{r4, pc}
 80268a8:	08032f78 	.word	0x08032f78

080268ac <lv_dropdownlist_destructor>:

static void lv_dropdownlist_destructor(const lv_obj_class_t * class_p, lv_obj_t * list_obj)
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
 80268ac:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 80268ae:	2200      	movs	r2, #0
 80268b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80268b2:	4770      	bx	lr

080268b4 <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 80268b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80268b6:	b120      	cbz	r0, 80268c2 <get_label+0xe>
{
 80268b8:	b508      	push	{r3, lr}

    return lv_obj_get_child(dropdown->list, 0);
 80268ba:	2100      	movs	r1, #0
 80268bc:	f7e4 feda 	bl	800b674 <lv_obj_get_child>
}
 80268c0:	bd08      	pop	{r3, pc}
 80268c2:	4770      	bx	lr

080268c4 <position_to_selected>:
{
 80268c4:	b570      	push	{r4, r5, r6, lr}
 80268c6:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 80268c8:	f7ff fff4 	bl	80268b4 <get_label>
    if(label == NULL) return;
 80268cc:	b140      	cbz	r0, 80268e0 <position_to_selected+0x1c>
 80268ce:	4606      	mov	r6, r0
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 80268d0:	f7e1 f911 	bl	8007af6 <lv_obj_get_height>
 80268d4:	4605      	mov	r5, r0
 80268d6:	4620      	mov	r0, r4
 80268d8:	f7e1 f930 	bl	8007b3c <lv_obj_get_content_height>
 80268dc:	4285      	cmp	r5, r0
 80268de:	dc00      	bgt.n	80268e2 <position_to_selected+0x1e>
}
 80268e0:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80268e2:	2257      	movs	r2, #87	; 0x57
 80268e4:	2100      	movs	r1, #0
 80268e6:	4630      	mov	r0, r6
 80268e8:	f7e3 ff7e 	bl	800a7e8 <lv_obj_get_style_prop>
 80268ec:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80268f0:	2259      	movs	r2, #89	; 0x59
 80268f2:	2100      	movs	r1, #0
 80268f4:	4630      	mov	r0, r6
 80268f6:	f7e3 ff77 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t unit_h = font_h + line_space;
 80268fa:	4405      	add	r5, r0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 80268fc:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80268fe:	fb05 f101 	mul.w	r1, r5, r1
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 8026902:	2200      	movs	r2, #0
 8026904:	b209      	sxth	r1, r1
 8026906:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026908:	f7e2 ffc2 	bl	8009890 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 802690c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802690e:	f7e1 fb33 	bl	8007f78 <lv_obj_invalidate>
 8026912:	e7e5      	b.n	80268e0 <position_to_selected+0x1c>

08026914 <get_id_on_point>:
{
 8026914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026918:	4606      	mov	r6, r0
 802691a:	460c      	mov	r4, r1
    lv_obj_t * label = get_label(dropdown_obj);
 802691c:	f7ff ffca 	bl	80268b4 <get_label>
    if(label == NULL) return 0;
 8026920:	b310      	cbz	r0, 8026968 <get_id_on_point+0x54>
 8026922:	4607      	mov	r7, r0
    y -= label->coords.y1;
 8026924:	f8b0 8016 	ldrh.w	r8, [r0, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026928:	2257      	movs	r2, #87	; 0x57
 802692a:	2100      	movs	r1, #0
 802692c:	f7e3 ff5c 	bl	800a7e8 <lv_obj_get_style_prop>
 8026930:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026934:	2259      	movs	r2, #89	; 0x59
 8026936:	2100      	movs	r1, #0
 8026938:	4638      	mov	r0, r7
 802693a:	f7e3 ff55 	bl	800a7e8 <lv_obj_get_style_prop>
    y += line_space / 2;
 802693e:	b203      	sxth	r3, r0
 8026940:	f3c0 31c0 	ubfx	r1, r0, #15, #1
 8026944:	4419      	add	r1, r3
 8026946:	eb04 0461 	add.w	r4, r4, r1, asr #1
 802694a:	eba4 0408 	sub.w	r4, r4, r8
    uint16_t opt = y / h;
 802694e:	b224      	sxth	r4, r4
    lv_coord_t h = font_h + line_space;
 8026950:	4428      	add	r0, r5
    uint16_t opt = y / h;
 8026952:	b200      	sxth	r0, r0
 8026954:	fb94 f4f0 	sdiv	r4, r4, r0
 8026958:	b2a0      	uxth	r0, r4
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 802695a:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 802695c:	4283      	cmp	r3, r0
 802695e:	d801      	bhi.n	8026964 <get_id_on_point+0x50>
 8026960:	1e58      	subs	r0, r3, #1
 8026962:	b280      	uxth	r0, r0
}
 8026964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(label == NULL) return 0;
 8026968:	2000      	movs	r0, #0
 802696a:	e7fb      	b.n	8026964 <get_id_on_point+0x50>

0802696c <lv_dropdown_destructor>:
{
 802696c:	b510      	push	{r4, lr}
 802696e:	460c      	mov	r4, r1
    if(dropdown->list) {
 8026970:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026972:	b118      	cbz	r0, 802697c <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 8026974:	f7e4 ff4a 	bl	800b80c <lv_obj_del>
        dropdown->list = NULL;
 8026978:	2300      	movs	r3, #0
 802697a:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 802697c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026980:	f013 0f10 	tst.w	r3, #16
 8026984:	d000      	beq.n	8026988 <lv_dropdown_destructor+0x1c>
}
 8026986:	bd10      	pop	{r4, pc}
        lv_mem_free(dropdown->options);
 8026988:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802698a:	f7fa ff8b 	bl	80218a4 <lv_mem_free>
        dropdown->options = NULL;
 802698e:	2300      	movs	r3, #0
 8026990:	6323      	str	r3, [r4, #48]	; 0x30
}
 8026992:	e7f8      	b.n	8026986 <lv_dropdown_destructor+0x1a>

08026994 <draw_box>:
{
 8026994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026998:	b091      	sub	sp, #68	; 0x44
 802699a:	4614      	mov	r4, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 802699c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80269a0:	4294      	cmp	r4, r2
 80269a2:	d051      	beq.n	8026a48 <draw_box+0xb4>
 80269a4:	4607      	mov	r7, r0
 80269a6:	4688      	mov	r8, r1
    lv_obj_t * list_obj = dropdown->list;
 80269a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_state_t state_ori = list_obj->state;
 80269aa:	f8b5 9020 	ldrh.w	r9, [r5, #32]
    if(state != list_obj->state) {
 80269ae:	4599      	cmp	r9, r3
 80269b0:	d006      	beq.n	80269c0 <draw_box+0x2c>
        list_obj->state = state;
 80269b2:	842b      	strh	r3, [r5, #32]
        list_obj->skip_trans = 1;
 80269b4:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80269b8:	f043 0304 	orr.w	r3, r3, #4
 80269bc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80269c0:	2257      	movs	r2, #87	; 0x57
 80269c2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80269c6:	4628      	mov	r0, r5
 80269c8:	f7e3 ff0e 	bl	800a7e8 <lv_obj_get_style_prop>
 80269cc:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80269ce:	2259      	movs	r2, #89	; 0x59
 80269d0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80269d4:	4628      	mov	r0, r5
 80269d6:	f7e3 ff07 	bl	800a7e8 <lv_obj_get_style_prop>
 80269da:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 80269dc:	fa0f fb80 	sxth.w	fp, r0
 80269e0:	f9ba a008 	ldrsh.w	sl, [sl, #8]
    lv_obj_t * label = get_label(dropdown_obj);
 80269e4:	4638      	mov	r0, r7
 80269e6:	f7ff ff65 	bl	80268b4 <get_label>
    rect_area.y1 += id * (font_h + line_space);
 80269ea:	eb0a 020b 	add.w	r2, sl, fp
 80269ee:	fb02 f404 	mul.w	r4, r2, r4
    rect_area.y1 -= line_space / 2;
 80269f2:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 80269f6:	eba4 046b 	sub.w	r4, r4, fp, asr #1
 80269fa:	8ac3      	ldrh	r3, [r0, #22]
 80269fc:	441c      	add	r4, r3
 80269fe:	b2a4      	uxth	r4, r4
 8026a00:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 8026a04:	3e01      	subs	r6, #1
 8026a06:	44b2      	add	sl, r6
 8026a08:	4454      	add	r4, sl
 8026a0a:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    rect_area.x1 = dropdown->list->coords.x1;
 8026a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a10:	8a9a      	ldrh	r2, [r3, #20]
 8026a12:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    rect_area.x2 = dropdown->list->coords.x2;
 8026a16:	8b1b      	ldrh	r3, [r3, #24]
 8026a18:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    lv_draw_rect_dsc_init(&sel_rect);
 8026a1c:	4668      	mov	r0, sp
 8026a1e:	f7e8 fba3 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 8026a22:	466a      	mov	r2, sp
 8026a24:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8026a28:	4628      	mov	r0, r5
 8026a2a:	f7e0 fb17 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 8026a2e:	aa0e      	add	r2, sp, #56	; 0x38
 8026a30:	4669      	mov	r1, sp
 8026a32:	4640      	mov	r0, r8
 8026a34:	f7e8 fbf4 	bl	800f220 <lv_draw_rect>
    list_obj->state = state_ori;
 8026a38:	f8a5 9020 	strh.w	r9, [r5, #32]
    list_obj->skip_trans = 0;
 8026a3c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8026a40:	f36f 0382 	bfc	r3, #2, #1
 8026a44:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 8026a48:	b011      	add	sp, #68	; 0x44
 8026a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026a4e <draw_box_label>:
{
 8026a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a52:	b08e      	sub	sp, #56	; 0x38
 8026a54:	4614      	mov	r4, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 8026a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026a5a:	4294      	cmp	r4, r2
 8026a5c:	d04b      	beq.n	8026af6 <draw_box_label+0xa8>
 8026a5e:	4680      	mov	r8, r0
 8026a60:	460e      	mov	r6, r1
    lv_obj_t * list_obj = dropdown->list;
 8026a62:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_state_t state_orig = list_obj->state;
 8026a64:	8c2f      	ldrh	r7, [r5, #32]
    if(state != list_obj->state) {
 8026a66:	429f      	cmp	r7, r3
 8026a68:	d006      	beq.n	8026a78 <draw_box_label+0x2a>
        list_obj->state = state;
 8026a6a:	842b      	strh	r3, [r5, #32]
        list_obj->skip_trans = 1;
 8026a6c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8026a70:	f043 0304 	orr.w	r3, r3, #4
 8026a74:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 8026a78:	a806      	add	r0, sp, #24
 8026a7a:	f7e6 fdb9 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 8026a7e:	aa06      	add	r2, sp, #24
 8026a80:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8026a84:	4628      	mov	r0, r5
 8026a86:	f7e0 fc5e 	bl	8007346 <lv_obj_init_draw_label_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026a8a:	2259      	movs	r2, #89	; 0x59
 8026a8c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8026a90:	4628      	mov	r0, r5
 8026a92:	f7e3 fea9 	bl	800a7e8 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 8026a96:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 8026a9a:	4640      	mov	r0, r8
 8026a9c:	f7ff ff0a 	bl	80268b4 <get_label>
    if(label == NULL) return;
 8026aa0:	4680      	mov	r8, r0
 8026aa2:	b340      	cbz	r0, 8026af6 <draw_box_label+0xa8>
 8026aa4:	9b06      	ldr	r3, [sp, #24]
 8026aa6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 8026aaa:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8026aae:	18ca      	adds	r2, r1, r3
 8026ab0:	fb02 f404 	mul.w	r4, r2, r4
    area_sel.y1 -= label_dsc.line_space / 2;
 8026ab4:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8026ab8:	eba4 0462 	sub.w	r4, r4, r2, asr #1
 8026abc:	8ac2      	ldrh	r2, [r0, #22]
 8026abe:	4414      	add	r4, r2
 8026ac0:	b2a4      	uxth	r4, r4
 8026ac2:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 8026ac6:	3b01      	subs	r3, #1
 8026ac8:	440b      	add	r3, r1
 8026aca:	441c      	add	r4, r3
 8026acc:	f8ad 4016 	strh.w	r4, [sp, #22]
    area_sel.x1 = list_obj->coords.x1;
 8026ad0:	8aab      	ldrh	r3, [r5, #20]
 8026ad2:	f8ad 3010 	strh.w	r3, [sp, #16]
    area_sel.x2 = list_obj->coords.x2;
 8026ad6:	8b2b      	ldrh	r3, [r5, #24]
 8026ad8:	f8ad 3014 	strh.w	r3, [sp, #20]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 8026adc:	aa04      	add	r2, sp, #16
 8026ade:	68b1      	ldr	r1, [r6, #8]
 8026ae0:	a802      	add	r0, sp, #8
 8026ae2:	f7f9 ffac 	bl	8020a3e <_lv_area_intersect>
    if(area_ok) {
 8026ae6:	b948      	cbnz	r0, 8026afc <draw_box_label+0xae>
    list_obj->state = state_orig;
 8026ae8:	842f      	strh	r7, [r5, #32]
    list_obj->skip_trans = 0;
 8026aea:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8026aee:	f36f 0382 	bfc	r3, #2, #1
 8026af2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 8026af6:	b00e      	add	sp, #56	; 0x38
 8026af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8026afc:	68b4      	ldr	r4, [r6, #8]
        draw_ctx->clip_area = &mask_sel;
 8026afe:	ab02      	add	r3, sp, #8
 8026b00:	60b3      	str	r3, [r6, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 8026b02:	4640      	mov	r0, r8
 8026b04:	f001 fa28 	bl	8027f58 <lv_label_get_text>
 8026b08:	4603      	mov	r3, r0
 8026b0a:	2200      	movs	r2, #0
 8026b0c:	9200      	str	r2, [sp, #0]
 8026b0e:	f108 0214 	add.w	r2, r8, #20
 8026b12:	a906      	add	r1, sp, #24
 8026b14:	4630      	mov	r0, r6
 8026b16:	f7e6 fd9f 	bl	800d658 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8026b1a:	60b4      	str	r4, [r6, #8]
 8026b1c:	e7e4      	b.n	8026ae8 <draw_box_label+0x9a>

08026b1e <lv_dropdownlist_constructor>:
{
 8026b1e:	b510      	push	{r4, lr}
 8026b20:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8026b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026b26:	4620      	mov	r0, r4
 8026b28:	f7df fefc 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8026b2c:	2104      	movs	r1, #4
 8026b2e:	4620      	mov	r0, r4
 8026b30:	f7df fef8 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 8026b34:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026b38:	4620      	mov	r0, r4
 8026b3a:	f7df feb9 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8026b3e:	2101      	movs	r1, #1
 8026b40:	4620      	mov	r0, r4
 8026b42:	f7df feb5 	bl	80068b0 <lv_obj_add_flag>
    lv_label_create(obj);
 8026b46:	4620      	mov	r0, r4
 8026b48:	f001 f9f0 	bl	8027f2c <lv_label_create>
}
 8026b4c:	bd10      	pop	{r4, pc}

08026b4e <lv_dropdown_set_options_static>:
    LV_ASSERT_NULL(options);
 8026b4e:	b141      	cbz	r1, 8026b62 <lv_dropdown_set_options_static+0x14>
{
 8026b50:	b538      	push	{r3, r4, r5, lr}
 8026b52:	4604      	mov	r4, r0
 8026b54:	460d      	mov	r5, r1
    dropdown->option_cnt = 0;
 8026b56:	2300      	movs	r3, #0
 8026b58:	8683      	strh	r3, [r0, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 8026b5a:	780b      	ldrb	r3, [r1, #0]
 8026b5c:	b15b      	cbz	r3, 8026b76 <lv_dropdown_set_options_static+0x28>
 8026b5e:	460a      	mov	r2, r1
 8026b60:	e003      	b.n	8026b6a <lv_dropdown_set_options_static+0x1c>
    LV_ASSERT_NULL(options);
 8026b62:	e7fe      	b.n	8026b62 <lv_dropdown_set_options_static+0x14>
    for(i = 0; options[i] != '\0'; i++) {
 8026b64:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8026b68:	b12b      	cbz	r3, 8026b76 <lv_dropdown_set_options_static+0x28>
        if(options[i] == '\n') dropdown->option_cnt++;
 8026b6a:	2b0a      	cmp	r3, #10
 8026b6c:	d1fa      	bne.n	8026b64 <lv_dropdown_set_options_static+0x16>
 8026b6e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8026b70:	3301      	adds	r3, #1
 8026b72:	86a3      	strh	r3, [r4, #52]	; 0x34
 8026b74:	e7f6      	b.n	8026b64 <lv_dropdown_set_options_static+0x16>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 8026b76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8026b78:	3301      	adds	r3, #1
 8026b7a:	86a3      	strh	r3, [r4, #52]	; 0x34
    dropdown->sel_opt_id      = 0;
 8026b7c:	2300      	movs	r3, #0
 8026b7e:	86e3      	strh	r3, [r4, #54]	; 0x36
    dropdown->sel_opt_id_orig = 0;
 8026b80:	8723      	strh	r3, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8026b82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026b86:	f013 0f10 	tst.w	r3, #16
 8026b8a:	d103      	bne.n	8026b94 <lv_dropdown_set_options_static+0x46>
 8026b8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026b8e:	b108      	cbz	r0, 8026b94 <lv_dropdown_set_options_static+0x46>
        lv_mem_free(dropdown->options);
 8026b90:	f7fa fe88 	bl	80218a4 <lv_mem_free>
    dropdown->static_txt = 1;
 8026b94:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026b98:	f043 0310 	orr.w	r3, r3, #16
 8026b9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    dropdown->options = (char *)options;
 8026ba0:	6325      	str	r5, [r4, #48]	; 0x30
    lv_obj_invalidate(obj);
 8026ba2:	4620      	mov	r0, r4
 8026ba4:	f7e1 f9e8 	bl	8007f78 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8026ba8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026baa:	b108      	cbz	r0, 8026bb0 <lv_dropdown_set_options_static+0x62>
 8026bac:	f7e1 f9e4 	bl	8007f78 <lv_obj_invalidate>
}
 8026bb0:	bd38      	pop	{r3, r4, r5, pc}
	...

08026bb4 <lv_dropdown_constructor>:
{
 8026bb4:	b538      	push	{r3, r4, r5, lr}
 8026bb6:	460c      	mov	r4, r1
    dropdown->list          = NULL;
 8026bb8:	2300      	movs	r3, #0
 8026bba:	624b      	str	r3, [r1, #36]	; 0x24
    dropdown->options     = NULL;
 8026bbc:	630b      	str	r3, [r1, #48]	; 0x30
    dropdown->symbol         = LV_SYMBOL_DOWN;
 8026bbe:	4a14      	ldr	r2, [pc, #80]	; (8026c10 <lv_dropdown_constructor+0x5c>)
 8026bc0:	62ca      	str	r2, [r1, #44]	; 0x2c
    dropdown->text         = NULL;
 8026bc2:	628b      	str	r3, [r1, #40]	; 0x28
    dropdown->static_txt = 1;
 8026bc4:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 8026bc8:	86cb      	strh	r3, [r1, #54]	; 0x36
    dropdown->sel_opt_id_orig = 0;
 8026bca:	870b      	strh	r3, [r1, #56]	; 0x38
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8026bcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026bd0:	8761      	strh	r1, [r4, #58]	; 0x3a
    dropdown->option_cnt      = 0;
 8026bd2:	86a3      	strh	r3, [r4, #52]	; 0x34
    dropdown->dir = LV_DIR_BOTTOM;
 8026bd4:	f042 0330 	orr.w	r3, r2, #48	; 0x30
 8026bd8:	2208      	movs	r2, #8
 8026bda:	f362 0303 	bfi	r3, r2, #0, #4
 8026bde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8026be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026be6:	4620      	mov	r0, r4
 8026be8:	f7df fe62 	bl	80068b0 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 8026bec:	4909      	ldr	r1, [pc, #36]	; (8026c14 <lv_dropdown_constructor+0x60>)
 8026bee:	4620      	mov	r0, r4
 8026bf0:	f7ff ffad 	bl	8026b4e <lv_dropdown_set_options_static>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8026bf4:	4620      	mov	r0, r4
 8026bf6:	f7e4 fd0e 	bl	800b616 <lv_obj_get_screen>
 8026bfa:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 8026bfc:	4806      	ldr	r0, [pc, #24]	; (8026c18 <lv_dropdown_constructor+0x64>)
 8026bfe:	f7e0 f947 	bl	8006e90 <lv_obj_class_create_obj>
 8026c02:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 8026c04:	f7e0 f9f1 	bl	8006fea <lv_obj_class_init_obj>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 8026c08:	6265      	str	r5, [r4, #36]	; 0x24
    list->dropdown = obj;
 8026c0a:	626c      	str	r4, [r5, #36]	; 0x24
}
 8026c0c:	bd38      	pop	{r3, r4, r5, pc}
 8026c0e:	bf00      	nop
 8026c10:	08032fa0 	.word	0x08032fa0
 8026c14:	08032fa4 	.word	0x08032fa4
 8026c18:	08032fdc 	.word	0x08032fdc

08026c1c <lv_dropdown_get_selected_str>:
{
 8026c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026c20:	460e      	mov	r6, r1
    if(dropdown->options)  {
 8026c22:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8026c24:	b1ff      	cbz	r7, 8026c66 <lv_dropdown_get_selected_str+0x4a>
 8026c26:	4604      	mov	r4, r0
 8026c28:	4615      	mov	r5, r2
        txt_len     = strlen(dropdown->options);
 8026c2a:	4638      	mov	r0, r7
 8026c2c:	f7d9 fb04 	bl	8000238 <strlen>
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8026c30:	4603      	mov	r3, r0
 8026c32:	b1a0      	cbz	r0, 8026c5e <lv_dropdown_get_selected_str+0x42>
 8026c34:	f8b4 e038 	ldrh.w	lr, [r4, #56]	; 0x38
 8026c38:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8026c3c:	eb0c 0800 	add.w	r8, ip, r0
    uint32_t line        = 0;
 8026c40:	2100      	movs	r1, #0
 8026c42:	f1c7 0001 	rsb	r0, r7, #1
 8026c46:	eb00 020c 	add.w	r2, r0, ip
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8026c4a:	458e      	cmp	lr, r1
 8026c4c:	d00e      	beq.n	8026c6c <lv_dropdown_get_selected_str+0x50>
        if(dropdown->options[i] == '\n') line++;
 8026c4e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8026c52:	2a0a      	cmp	r2, #10
 8026c54:	bf08      	it	eq
 8026c56:	3101      	addeq	r1, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8026c58:	45c4      	cmp	ip, r8
 8026c5a:	d1f4      	bne.n	8026c46 <lv_dropdown_get_selected_str+0x2a>
 8026c5c:	2300      	movs	r3, #0
    buf[c] = '\0';
 8026c5e:	2200      	movs	r2, #0
 8026c60:	54f2      	strb	r2, [r6, r3]
}
 8026c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        buf[0] = '\0';
 8026c66:	2300      	movs	r3, #0
 8026c68:	700b      	strb	r3, [r1, #0]
        return;
 8026c6a:	e7fa      	b.n	8026c62 <lv_dropdown_get_selected_str+0x46>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8026c6c:	4293      	cmp	r3, r2
 8026c6e:	d916      	bls.n	8026c9e <lv_dropdown_get_selected_str+0x82>
 8026c70:	1e71      	subs	r1, r6, #1
 8026c72:	1a98      	subs	r0, r3, r2
 8026c74:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 8026c76:	1e6f      	subs	r7, r5, #1
 8026c78:	e004      	b.n	8026c84 <lv_dropdown_get_selected_str+0x68>
        buf[c] = dropdown->options[i];
 8026c7a:	f801 cf01 	strb.w	ip, [r1, #1]!
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8026c7e:	3301      	adds	r3, #1
 8026c80:	4298      	cmp	r0, r3
 8026c82:	d00e      	beq.n	8026ca2 <lv_dropdown_get_selected_str+0x86>
 8026c84:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 8026c88:	449c      	add	ip, r3
 8026c8a:	f81c c002 	ldrb.w	ip, [ip, r2]
 8026c8e:	f1bc 0f0a 	cmp.w	ip, #10
 8026c92:	d0e4      	beq.n	8026c5e <lv_dropdown_get_selected_str+0x42>
        if(buf_size && c >= buf_size - 1) {
 8026c94:	2d00      	cmp	r5, #0
 8026c96:	d0f0      	beq.n	8026c7a <lv_dropdown_get_selected_str+0x5e>
 8026c98:	429f      	cmp	r7, r3
 8026c9a:	d8ee      	bhi.n	8026c7a <lv_dropdown_get_selected_str+0x5e>
 8026c9c:	e7df      	b.n	8026c5e <lv_dropdown_get_selected_str+0x42>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8026c9e:	2300      	movs	r3, #0
 8026ca0:	e7dd      	b.n	8026c5e <lv_dropdown_get_selected_str+0x42>
 8026ca2:	4603      	mov	r3, r0
 8026ca4:	e7db      	b.n	8026c5e <lv_dropdown_get_selected_str+0x42>

08026ca6 <lv_dropdown_open>:
{
 8026ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026caa:	b082      	sub	sp, #8
 8026cac:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8026cae:	2101      	movs	r1, #1
 8026cb0:	f7df fe77 	bl	80069a2 <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 8026cb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026cb6:	4620      	mov	r0, r4
 8026cb8:	f7e4 fcad 	bl	800b616 <lv_obj_get_screen>
 8026cbc:	4601      	mov	r1, r0
 8026cbe:	4628      	mov	r0, r5
 8026cc0:	f7e4 fdd5 	bl	800b86e <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 8026cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026cc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026cca:	f7e4 fe45 	bl	800b958 <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8026cce:	2101      	movs	r1, #1
 8026cd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026cd2:	f7df fe27 	bl	8006924 <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 8026cd6:	2200      	movs	r2, #0
 8026cd8:	211f      	movs	r1, #31
 8026cda:	4620      	mov	r0, r4
 8026cdc:	f7dd f810 	bl	8003d00 <lv_event_send>
    lv_obj_t * label = get_label(dropdown_obj);
 8026ce0:	4620      	mov	r0, r4
 8026ce2:	f7ff fde7 	bl	80268b4 <get_label>
 8026ce6:	4607      	mov	r7, r0
    lv_label_set_text_static(label, dropdown->options);
 8026ce8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8026cea:	f001 fe5f 	bl	80289ac <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 8026cee:	f242 71d1 	movw	r1, #10193	; 0x27d1
 8026cf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026cf4:	f7e0 fdfa 	bl	80078ec <lv_obj_set_width>
    lv_obj_update_layout(label);
 8026cf8:	4638      	mov	r0, r7
 8026cfa:	f7e1 fff1 	bl	8008ce0 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 8026cfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d00:	f7e0 fef3 	bl	8007aea <lv_obj_get_width>
 8026d04:	4605      	mov	r5, r0
 8026d06:	4620      	mov	r0, r4
 8026d08:	f7e0 feef 	bl	8007aea <lv_obj_get_width>
 8026d0c:	4285      	cmp	r5, r0
 8026d0e:	dc07      	bgt.n	8026d20 <lv_dropdown_open+0x7a>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 8026d10:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026d14:	f003 030f 	and.w	r3, r3, #15
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 8026d18:	2b04      	cmp	r3, #4
 8026d1a:	d059      	beq.n	8026dd0 <lv_dropdown_open+0x12a>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 8026d1c:	2b08      	cmp	r3, #8
 8026d1e:	d057      	beq.n	8026dd0 <lv_dropdown_open+0x12a>
    lv_coord_t label_h = lv_obj_get_height(label);
 8026d20:	4638      	mov	r0, r7
 8026d22:	f7e0 fee8 	bl	8007af6 <lv_obj_get_height>
 8026d26:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8026d28:	2232      	movs	r2, #50	; 0x32
 8026d2a:	2100      	movs	r1, #0
 8026d2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d2e:	f7e3 fd5b 	bl	800a7e8 <lv_obj_get_style_prop>
 8026d32:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8026d34:	2210      	movs	r2, #16
 8026d36:	2100      	movs	r1, #0
 8026d38:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d3a:	f7e3 fd55 	bl	800a7e8 <lv_obj_get_style_prop>
 8026d3e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026d40:	2211      	movs	r2, #17
 8026d42:	2100      	movs	r1, #0
 8026d44:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d46:	f7e3 fd4f 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t list_fit_h = label_h + top + bottom;
 8026d4a:	4406      	add	r6, r0
 8026d4c:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8026d50:	4445      	add	r5, r8
 8026d52:	b22d      	sxth	r5, r5
    lv_dir_t dir = dropdown->dir;
 8026d54:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026d58:	f003 060f 	and.w	r6, r3, #15
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8026d5c:	2e08      	cmp	r6, #8
 8026d5e:	d040      	beq.n	8026de2 <lv_dropdown_open+0x13c>
    else if(dropdown->dir == LV_DIR_TOP) {
 8026d60:	2e04      	cmp	r6, #4
 8026d62:	d071      	beq.n	8026e48 <lv_dropdown_open+0x1a2>
    lv_coord_t list_h = list_fit_h;
 8026d64:	4629      	mov	r1, r5
    lv_obj_set_height(dropdown->list, list_h);
 8026d66:	42a9      	cmp	r1, r5
 8026d68:	bfa8      	it	ge
 8026d6a:	4629      	movge	r1, r5
 8026d6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d6e:	f7e0 fdd4 	bl	800791a <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8026d72:	4620      	mov	r0, r4
 8026d74:	f7ff fda6 	bl	80268c4 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8026d78:	2e08      	cmp	r6, #8
 8026d7a:	f000 8089 	beq.w	8026e90 <lv_dropdown_open+0x1ea>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8026d7e:	2e04      	cmp	r6, #4
 8026d80:	d051      	beq.n	8026e26 <lv_dropdown_open+0x180>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8026d82:	2e01      	cmp	r6, #1
 8026d84:	f000 808c 	beq.w	8026ea0 <lv_dropdown_open+0x1fa>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026d88:	2e02      	cmp	r6, #2
 8026d8a:	f000 8091 	beq.w	8026eb0 <lv_dropdown_open+0x20a>
    lv_obj_update_layout(dropdown->list);
 8026d8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026d90:	f7e1 ffa6 	bl	8008ce0 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 8026d94:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8026d98:	f003 030f 	and.w	r3, r3, #15
 8026d9c:	3b01      	subs	r3, #1
 8026d9e:	b2db      	uxtb	r3, r3
 8026da0:	2b01      	cmp	r3, #1
 8026da2:	f240 808d 	bls.w	8026ec0 <lv_dropdown_open+0x21a>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 8026da6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8026da8:	2100      	movs	r1, #0
 8026daa:	4638      	mov	r0, r7
 8026dac:	f7e4 fb9c 	bl	800b4e8 <lv_obj_calculate_style_text_align>
    switch(align) {
 8026db0:	2802      	cmp	r0, #2
 8026db2:	f000 80a2 	beq.w	8026efa <lv_dropdown_open+0x254>
 8026db6:	2803      	cmp	r0, #3
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 8026db8:	f04f 0300 	mov.w	r3, #0
 8026dbc:	461a      	mov	r2, r3
 8026dbe:	bf14      	ite	ne
 8026dc0:	2101      	movne	r1, #1
            lv_obj_align(label, LV_ALIGN_TOP_RIGHT, 0, 0);
 8026dc2:	2103      	moveq	r1, #3
 8026dc4:	4638      	mov	r0, r7
 8026dc6:	f7e0 fe25 	bl	8007a14 <lv_obj_align>
}
 8026dca:	b002      	add	sp, #8
 8026dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 8026dd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026dd2:	4620      	mov	r0, r4
 8026dd4:	f7e0 fe89 	bl	8007aea <lv_obj_get_width>
 8026dd8:	4601      	mov	r1, r0
 8026dda:	4628      	mov	r0, r5
 8026ddc:	f7e0 fd86 	bl	80078ec <lv_obj_set_width>
 8026de0:	e79e      	b.n	8026d20 <lv_dropdown_open+0x7a>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 8026de2:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 8026de6:	44a8      	add	r8, r5
 8026de8:	f7f9 fae0 	bl	80203ac <lv_disp_get_default>
 8026dec:	f7f9 faf8 	bl	80203e0 <lv_disp_get_ver_res>
 8026df0:	4580      	cmp	r8, r0
 8026df2:	dc01      	bgt.n	8026df8 <lv_dropdown_open+0x152>
    lv_coord_t list_h = list_fit_h;
 8026df4:	4629      	mov	r1, r5
 8026df6:	e7b6      	b.n	8026d66 <lv_dropdown_open+0xc0>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 8026df8:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026dfc:	f7f9 fad6 	bl	80203ac <lv_disp_get_default>
 8026e00:	f7f9 faee 	bl	80203e0 <lv_disp_get_ver_res>
 8026e04:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026e08:	1ac0      	subs	r0, r0, r3
 8026e0a:	4580      	cmp	r8, r0
 8026e0c:	dd13      	ble.n	8026e36 <lv_dropdown_open+0x190>
                list_h = dropdown_obj->coords.y1 - 1;
 8026e0e:	8ae1      	ldrh	r1, [r4, #22]
 8026e10:	3901      	subs	r1, #1
 8026e12:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 8026e14:	42a9      	cmp	r1, r5
 8026e16:	bfa8      	it	ge
 8026e18:	4629      	movge	r1, r5
 8026e1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026e1c:	f7e0 fd7d 	bl	800791a <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8026e20:	4620      	mov	r0, r4
 8026e22:	f7ff fd4f 	bl	80268c4 <position_to_selected>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8026e26:	2300      	movs	r3, #0
 8026e28:	9300      	str	r3, [sp, #0]
 8026e2a:	220a      	movs	r2, #10
 8026e2c:	4621      	mov	r1, r4
 8026e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026e30:	f7e1 ff7a 	bl	8008d28 <lv_obj_align_to>
 8026e34:	e7ab      	b.n	8026d8e <lv_dropdown_open+0xe8>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 8026e36:	f7f9 fab9 	bl	80203ac <lv_disp_get_default>
 8026e3a:	f7f9 fad1 	bl	80203e0 <lv_disp_get_ver_res>
 8026e3e:	8b61      	ldrh	r1, [r4, #26]
 8026e40:	43c9      	mvns	r1, r1
 8026e42:	4401      	add	r1, r0
 8026e44:	b209      	sxth	r1, r1
 8026e46:	e78e      	b.n	8026d66 <lv_dropdown_open+0xc0>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 8026e48:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8026e4c:	eba8 0305 	sub.w	r3, r8, r5
 8026e50:	2b00      	cmp	r3, #0
 8026e52:	db01      	blt.n	8026e58 <lv_dropdown_open+0x1b2>
    lv_coord_t list_h = list_fit_h;
 8026e54:	4629      	mov	r1, r5
 8026e56:	e786      	b.n	8026d66 <lv_dropdown_open+0xc0>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 8026e58:	f7f9 faa8 	bl	80203ac <lv_disp_get_default>
 8026e5c:	f7f9 fac0 	bl	80203e0 <lv_disp_get_ver_res>
 8026e60:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8026e64:	1ac0      	subs	r0, r0, r3
 8026e66:	4580      	cmp	r8, r0
 8026e68:	db02      	blt.n	8026e70 <lv_dropdown_open+0x1ca>
                list_h = dropdown_obj->coords.y1;
 8026e6a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8026e6e:	e77a      	b.n	8026d66 <lv_dropdown_open+0xc0>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8026e70:	f7f9 fa9c 	bl	80203ac <lv_disp_get_default>
 8026e74:	f7f9 fab4 	bl	80203e0 <lv_disp_get_ver_res>
 8026e78:	8b61      	ldrh	r1, [r4, #26]
 8026e7a:	1a41      	subs	r1, r0, r1
 8026e7c:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 8026e7e:	42a9      	cmp	r1, r5
 8026e80:	bfa8      	it	ge
 8026e82:	4629      	movge	r1, r5
 8026e84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026e86:	f7e0 fd48 	bl	800791a <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8026e8a:	4620      	mov	r0, r4
 8026e8c:	f7ff fd1a 	bl	80268c4 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8026e90:	2300      	movs	r3, #0
 8026e92:	9300      	str	r3, [sp, #0]
 8026e94:	220d      	movs	r2, #13
 8026e96:	4621      	mov	r1, r4
 8026e98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026e9a:	f7e1 ff45 	bl	8008d28 <lv_obj_align_to>
 8026e9e:	e776      	b.n	8026d8e <lv_dropdown_open+0xe8>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8026ea0:	2300      	movs	r3, #0
 8026ea2:	9300      	str	r3, [sp, #0]
 8026ea4:	2210      	movs	r2, #16
 8026ea6:	4621      	mov	r1, r4
 8026ea8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026eaa:	f7e1 ff3d 	bl	8008d28 <lv_obj_align_to>
 8026eae:	e76e      	b.n	8026d8e <lv_dropdown_open+0xe8>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8026eb0:	2300      	movs	r3, #0
 8026eb2:	9300      	str	r3, [sp, #0]
 8026eb4:	2213      	movs	r2, #19
 8026eb6:	4621      	mov	r1, r4
 8026eb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026eba:	f7e1 ff35 	bl	8008d28 <lv_obj_align_to>
 8026ebe:	e766      	b.n	8026d8e <lv_dropdown_open+0xe8>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 8026ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026ec2:	f7e0 fde4 	bl	8007a8e <lv_obj_get_y>
 8026ec6:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 8026ec8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026eca:	f7e0 fe03 	bl	8007ad4 <lv_obj_get_y2>
 8026ece:	4606      	mov	r6, r0
        if(y2 >= LV_VER_RES) {
 8026ed0:	f7f9 fa6c 	bl	80203ac <lv_disp_get_default>
 8026ed4:	f7f9 fa84 	bl	80203e0 <lv_disp_get_ver_res>
 8026ed8:	42b0      	cmp	r0, r6
 8026eda:	f73f af64 	bgt.w	8026da6 <lv_dropdown_open+0x100>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 8026ede:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8026ee2:	f7f9 fa63 	bl	80203ac <lv_disp_get_default>
 8026ee6:	f7f9 fa7b 	bl	80203e0 <lv_disp_get_ver_res>
 8026eea:	3d01      	subs	r5, #1
 8026eec:	1ba9      	subs	r1, r5, r6
 8026eee:	4401      	add	r1, r0
 8026ef0:	b209      	sxth	r1, r1
 8026ef2:	4640      	mov	r0, r8
 8026ef4:	f7e0 fcd9 	bl	80078aa <lv_obj_set_y>
 8026ef8:	e755      	b.n	8026da6 <lv_dropdown_open+0x100>
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 8026efa:	2300      	movs	r3, #0
 8026efc:	461a      	mov	r2, r3
 8026efe:	2102      	movs	r1, #2
 8026f00:	4638      	mov	r0, r7
 8026f02:	f7e0 fd87 	bl	8007a14 <lv_obj_align>
}
 8026f06:	e760      	b.n	8026dca <lv_dropdown_open+0x124>

08026f08 <lv_dropdown_close>:
{
 8026f08:	b510      	push	{r4, lr}
 8026f0a:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8026f0c:	2101      	movs	r1, #1
 8026f0e:	f7df fd54 	bl	80069ba <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8026f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026f16:	8763      	strh	r3, [r4, #58]	; 0x3a
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8026f18:	2101      	movs	r1, #1
 8026f1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026f1c:	f7df fcc8 	bl	80068b0 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8026f20:	2200      	movs	r2, #0
 8026f22:	2120      	movs	r1, #32
 8026f24:	4620      	mov	r0, r4
 8026f26:	f7dc feeb 	bl	8003d00 <lv_event_send>
}
 8026f2a:	bd10      	pop	{r4, pc}

08026f2c <lv_dropdown_list_event>:
{
 8026f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026f2e:	b083      	sub	sp, #12
 8026f30:	460c      	mov	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8026f32:	4608      	mov	r0, r1
 8026f34:	f7dc ff0a 	bl	8003d4c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 8026f38:	2818      	cmp	r0, #24
 8026f3a:	f000 8092 	beq.w	8027062 <lv_dropdown_list_event+0x136>
 8026f3e:	4605      	mov	r5, r0
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8026f40:	4621      	mov	r1, r4
 8026f42:	4865      	ldr	r0, [pc, #404]	; (80270d8 <lv_dropdown_list_event+0x1ac>)
 8026f44:	f7dc fddf 	bl	8003b06 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8026f48:	2801      	cmp	r0, #1
 8026f4a:	d10a      	bne.n	8026f62 <lv_dropdown_list_event+0x36>
    lv_obj_t * list = lv_event_get_target(e);
 8026f4c:	4620      	mov	r0, r4
 8026f4e:	f7dc fef9 	bl	8003d44 <lv_event_get_target>
 8026f52:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 8026f54:	2d08      	cmp	r5, #8
 8026f56:	d006      	beq.n	8026f66 <lv_dropdown_list_event+0x3a>
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 8026f58:	6a46      	ldr	r6, [r0, #36]	; 0x24
    else if(code == LV_EVENT_PRESSED) {
 8026f5a:	2d01      	cmp	r5, #1
 8026f5c:	d046      	beq.n	8026fec <lv_dropdown_list_event+0xc0>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8026f5e:	2d09      	cmp	r5, #9
 8026f60:	d060      	beq.n	8027024 <lv_dropdown_list_event+0xf8>
}
 8026f62:	b003      	add	sp, #12
 8026f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 8026f66:	f7dd fa71 	bl	800444c <lv_indev_get_act>
 8026f6a:	f7dd fb13 	bl	8004594 <lv_indev_get_scroll_obj>
 8026f6e:	2800      	cmp	r0, #0
 8026f70:	d1f7      	bne.n	8026f62 <lv_dropdown_list_event+0x36>
    lv_obj_t * dropdown_obj = list->dropdown;
 8026f72:	6a64      	ldr	r4, [r4, #36]	; 0x24
    lv_indev_t * indev = lv_indev_get_act();
 8026f74:	f7dd fa6a 	bl	800444c <lv_indev_get_act>
 8026f78:	4605      	mov	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8026f7a:	f7dd fa6d 	bl	8004458 <lv_indev_get_type>
 8026f7e:	2804      	cmp	r0, #4
 8026f80:	d021      	beq.n	8026fc6 <lv_dropdown_list_event+0x9a>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8026f82:	4628      	mov	r0, r5
 8026f84:	f7dd fa68 	bl	8004458 <lv_indev_get_type>
 8026f88:	2801      	cmp	r0, #1
 8026f8a:	d004      	beq.n	8026f96 <lv_dropdown_list_event+0x6a>
 8026f8c:	4628      	mov	r0, r5
 8026f8e:	f7dd fa63 	bl	8004458 <lv_indev_get_type>
 8026f92:	2803      	cmp	r0, #3
 8026f94:	d10a      	bne.n	8026fac <lv_dropdown_list_event+0x80>
        lv_indev_get_point(indev, &p);
 8026f96:	4669      	mov	r1, sp
 8026f98:	4628      	mov	r0, r5
 8026f9a:	f7dd fad4 	bl	8004546 <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 8026f9e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8026fa2:	4620      	mov	r0, r4
 8026fa4:	f7ff fcb6 	bl	8026914 <get_id_on_point>
 8026fa8:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8026faa:	8720      	strh	r0, [r4, #56]	; 0x38
    lv_dropdown_close(dropdown_obj);
 8026fac:	4620      	mov	r0, r4
 8026fae:	f7ff ffab 	bl	8026f08 <lv_dropdown_close>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8026fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8026fb4:	b1b3      	cbz	r3, 8026fe4 <lv_dropdown_list_event+0xb8>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8026fb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8026fb8:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 8026fba:	466a      	mov	r2, sp
 8026fbc:	211c      	movs	r1, #28
 8026fbe:	4620      	mov	r0, r4
 8026fc0:	f7dc fe9e 	bl	8003d00 <lv_event_send>
    if(res != LV_RES_OK) return res;
 8026fc4:	e7cd      	b.n	8026f62 <lv_dropdown_list_event+0x36>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8026fc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8026fc8:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 8026fca:	4620      	mov	r0, r4
 8026fcc:	f7df fd15 	bl	80069fa <lv_obj_get_group>
 8026fd0:	4606      	mov	r6, r0
        if(lv_group_get_editing(g)) {
 8026fd2:	f7dd f959 	bl	8004288 <lv_group_get_editing>
 8026fd6:	2800      	cmp	r0, #0
 8026fd8:	d0d3      	beq.n	8026f82 <lv_dropdown_list_event+0x56>
            lv_group_set_editing(g, false);
 8026fda:	2100      	movs	r1, #0
 8026fdc:	4630      	mov	r0, r6
 8026fde:	f7dd f8e6 	bl	80041ae <lv_group_set_editing>
 8026fe2:	e7ce      	b.n	8026f82 <lv_dropdown_list_event+0x56>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8026fe4:	4620      	mov	r0, r4
 8026fe6:	f7e0 ffc7 	bl	8007f78 <lv_obj_invalidate>
 8026fea:	e7e4      	b.n	8026fb6 <lv_dropdown_list_event+0x8a>
    lv_indev_t * indev = lv_indev_get_act();
 8026fec:	f7dd fa2e 	bl	800444c <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 8026ff0:	4605      	mov	r5, r0
 8026ff2:	2800      	cmp	r0, #0
 8026ff4:	d0b5      	beq.n	8026f62 <lv_dropdown_list_event+0x36>
 8026ff6:	f7dd fa2f 	bl	8004458 <lv_indev_get_type>
 8026ffa:	2801      	cmp	r0, #1
 8026ffc:	d004      	beq.n	8027008 <lv_dropdown_list_event+0xdc>
 8026ffe:	4628      	mov	r0, r5
 8027000:	f7dd fa2a 	bl	8004458 <lv_indev_get_type>
 8027004:	2803      	cmp	r0, #3
 8027006:	d1ac      	bne.n	8026f62 <lv_dropdown_list_event+0x36>
        lv_indev_get_point(indev, &p);
 8027008:	4669      	mov	r1, sp
 802700a:	4628      	mov	r0, r5
 802700c:	f7dd fa9b 	bl	8004546 <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 8027010:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8027014:	4630      	mov	r0, r6
 8027016:	f7ff fc7d 	bl	8026914 <get_id_on_point>
 802701a:	8770      	strh	r0, [r6, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 802701c:	4620      	mov	r0, r4
 802701e:	f7e0 ffab 	bl	8007f78 <lv_obj_invalidate>
 8027022:	e79e      	b.n	8026f62 <lv_dropdown_list_event+0x36>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8027024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8027028:	8773      	strh	r3, [r6, #58]	; 0x3a
        lv_obj_invalidate(list);
 802702a:	f7e0 ffa5 	bl	8007f78 <lv_obj_invalidate>
 802702e:	e798      	b.n	8026f62 <lv_dropdown_list_event+0x36>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 8027030:	2321      	movs	r3, #33	; 0x21
 8027032:	4629      	mov	r1, r5
 8027034:	4630      	mov	r0, r6
 8027036:	f7ff fcad 	bl	8026994 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 802703a:	2321      	movs	r3, #33	; 0x21
 802703c:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 802703e:	4629      	mov	r1, r5
 8027040:	4630      	mov	r0, r6
 8027042:	f7ff fd04 	bl	8026a4e <draw_box_label>
 8027046:	e041      	b.n	80270cc <lv_dropdown_list_event+0x1a0>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8027048:	2320      	movs	r3, #32
 802704a:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 802704c:	4629      	mov	r1, r5
 802704e:	4630      	mov	r0, r6
 8027050:	f7ff fca0 	bl	8026994 <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8027054:	2320      	movs	r3, #32
 8027056:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 8027058:	4629      	mov	r1, r5
 802705a:	4630      	mov	r0, r6
 802705c:	f7ff fcf7 	bl	8026a4e <draw_box_label>
 8027060:	e034      	b.n	80270cc <lv_dropdown_list_event+0x1a0>
    lv_obj_t * list = lv_event_get_target(e);
 8027062:	4620      	mov	r0, r4
 8027064:	f7dc fe6e 	bl	8003d44 <lv_event_get_target>
    lv_obj_t * list_obj = lv_event_get_target(e);
 8027068:	4620      	mov	r0, r4
 802706a:	f7dc fe6b 	bl	8003d44 <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 802706e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8027070:	4620      	mov	r0, r4
 8027072:	f7dc fedb 	bl	8003e2c <lv_event_get_draw_ctx>
 8027076:	4605      	mov	r5, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 8027078:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802707a:	3214      	adds	r2, #20
 802707c:	6881      	ldr	r1, [r0, #8]
 802707e:	4668      	mov	r0, sp
 8027080:	f7f9 fcdd 	bl	8020a3e <_lv_area_intersect>
    if(has_common) {
 8027084:	b318      	cbz	r0, 80270ce <lv_dropdown_list_event+0x1a2>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8027086:	68af      	ldr	r7, [r5, #8]
        draw_ctx->clip_area = &clip_area_core;
 8027088:	f8c5 d008 	str.w	sp, [r5, #8]
        if(dropdown->selected_highlight) {
 802708c:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 8027090:	f013 0f20 	tst.w	r3, #32
 8027094:	d0d8      	beq.n	8027048 <lv_dropdown_list_event+0x11c>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 8027096:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 8027098:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 802709a:	4293      	cmp	r3, r2
 802709c:	d0c8      	beq.n	8027030 <lv_dropdown_list_event+0x104>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 802709e:	2320      	movs	r3, #32
 80270a0:	4629      	mov	r1, r5
 80270a2:	4630      	mov	r0, r6
 80270a4:	f7ff fc76 	bl	8026994 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 80270a8:	2320      	movs	r3, #32
 80270aa:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 80270ac:	4629      	mov	r1, r5
 80270ae:	4630      	mov	r0, r6
 80270b0:	f7ff fccd 	bl	8026a4e <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80270b4:	2301      	movs	r3, #1
 80270b6:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 80270b8:	4629      	mov	r1, r5
 80270ba:	4630      	mov	r0, r6
 80270bc:	f7ff fc6a 	bl	8026994 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 80270c0:	2301      	movs	r3, #1
 80270c2:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 80270c4:	4629      	mov	r1, r5
 80270c6:	4630      	mov	r0, r6
 80270c8:	f7ff fcc1 	bl	8026a4e <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 80270cc:	60af      	str	r7, [r5, #8]
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 80270ce:	4621      	mov	r1, r4
 80270d0:	4801      	ldr	r0, [pc, #4]	; (80270d8 <lv_dropdown_list_event+0x1ac>)
 80270d2:	f7dc fd18 	bl	8003b06 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80270d6:	e744      	b.n	8026f62 <lv_dropdown_list_event+0x36>
 80270d8:	08032fdc 	.word	0x08032fdc

080270dc <lv_dropdown_is_open>:
{
 80270dc:	b508      	push	{r3, lr}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 80270de:	2101      	movs	r1, #1
 80270e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80270e2:	f7df fc75 	bl	80069d0 <lv_obj_has_flag>
 80270e6:	f080 0001 	eor.w	r0, r0, #1
}
 80270ea:	b2c0      	uxtb	r0, r0
 80270ec:	bd08      	pop	{r3, pc}

080270ee <btn_release_handler>:
{
 80270ee:	b530      	push	{r4, r5, lr}
 80270f0:	b083      	sub	sp, #12
 80270f2:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 80270f4:	f7dd f9aa 	bl	800444c <lv_indev_get_act>
 80270f8:	4605      	mov	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 80270fa:	f7dd fa4b 	bl	8004594 <lv_indev_get_scroll_obj>
 80270fe:	b138      	cbz	r0, 8027110 <btn_release_handler+0x22>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8027100:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8027102:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_obj_invalidate(obj);
 8027104:	4620      	mov	r0, r4
 8027106:	f7e0 ff37 	bl	8007f78 <lv_obj_invalidate>
    return LV_RES_OK;
 802710a:	2001      	movs	r0, #1
}
 802710c:	b003      	add	sp, #12
 802710e:	bd30      	pop	{r4, r5, pc}
        if(lv_dropdown_is_open(obj)) {
 8027110:	4620      	mov	r0, r4
 8027112:	f7ff ffe3 	bl	80270dc <lv_dropdown_is_open>
 8027116:	b308      	cbz	r0, 802715c <btn_release_handler+0x6e>
            lv_dropdown_close(obj);
 8027118:	4620      	mov	r0, r4
 802711a:	f7ff fef5 	bl	8026f08 <lv_dropdown_close>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 802711e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8027120:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8027122:	429a      	cmp	r2, r3
 8027124:	d00b      	beq.n	802713e <btn_release_handler+0x50>
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 8027126:	8723      	strh	r3, [r4, #56]	; 0x38
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 8027128:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 802712a:	aa01      	add	r2, sp, #4
 802712c:	211c      	movs	r1, #28
 802712e:	4620      	mov	r0, r4
 8027130:	f7dc fde6 	bl	8003d00 <lv_event_send>
                if(res != LV_RES_OK) return res;
 8027134:	2801      	cmp	r0, #1
 8027136:	d1e9      	bne.n	802710c <btn_release_handler+0x1e>
                lv_obj_invalidate(obj);
 8027138:	4620      	mov	r0, r4
 802713a:	f7e0 ff1d 	bl	8007f78 <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 802713e:	4628      	mov	r0, r5
 8027140:	f7dd f98a 	bl	8004458 <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8027144:	2804      	cmp	r0, #4
 8027146:	d001      	beq.n	802714c <btn_release_handler+0x5e>
    return LV_RES_OK;
 8027148:	2001      	movs	r0, #1
 802714a:	e7df      	b.n	802710c <btn_release_handler+0x1e>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 802714c:	4620      	mov	r0, r4
 802714e:	f7df fc54 	bl	80069fa <lv_obj_get_group>
 8027152:	2100      	movs	r1, #0
 8027154:	f7dd f82b 	bl	80041ae <lv_group_set_editing>
    return LV_RES_OK;
 8027158:	2001      	movs	r0, #1
 802715a:	e7d7      	b.n	802710c <btn_release_handler+0x1e>
            lv_dropdown_open(obj);
 802715c:	4620      	mov	r0, r4
 802715e:	f7ff fda2 	bl	8026ca6 <lv_dropdown_open>
    return LV_RES_OK;
 8027162:	2001      	movs	r0, #1
 8027164:	e7d2      	b.n	802710c <btn_release_handler+0x1e>
	...

08027168 <lv_dropdown_event>:
{
 8027168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802716c:	b09b      	sub	sp, #108	; 0x6c
 802716e:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8027170:	48c2      	ldr	r0, [pc, #776]	; (802747c <lv_dropdown_event+0x314>)
 8027172:	f7dc fcc8 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8027176:	2801      	cmp	r0, #1
 8027178:	d002      	beq.n	8027180 <lv_dropdown_event+0x18>
}
 802717a:	b01b      	add	sp, #108	; 0x6c
 802717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8027180:	4628      	mov	r0, r5
 8027182:	f7dc fde3 	bl	8003d4c <lv_event_get_code>
 8027186:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8027188:	4628      	mov	r0, r5
 802718a:	f7dc fddb 	bl	8003d44 <lv_event_get_target>
 802718e:	4606      	mov	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 8027190:	2c0e      	cmp	r4, #14
 8027192:	f000 80fc 	beq.w	802738e <lv_dropdown_event+0x226>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 8027196:	f1a4 030f 	sub.w	r3, r4, #15
 802719a:	b2db      	uxtb	r3, r3
 802719c:	2b01      	cmp	r3, #1
 802719e:	f240 810d 	bls.w	80273bc <lv_dropdown_event+0x254>
    else if(code == LV_EVENT_RELEASED) {
 80271a2:	2c08      	cmp	r4, #8
 80271a4:	f000 810d 	beq.w	80273c2 <lv_dropdown_event+0x25a>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80271a8:	2c2a      	cmp	r4, #42	; 0x2a
 80271aa:	f000 810d 	beq.w	80273c8 <lv_dropdown_event+0x260>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 80271ae:	2c29      	cmp	r4, #41	; 0x29
 80271b0:	f000 810d 	beq.w	80273ce <lv_dropdown_event+0x266>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80271b4:	2c2c      	cmp	r4, #44	; 0x2c
 80271b6:	f000 810d 	beq.w	80273d4 <lv_dropdown_event+0x26c>
    else if(code == LV_EVENT_KEY) {
 80271ba:	2c0d      	cmp	r4, #13
 80271bc:	f000 8117 	beq.w	80273ee <lv_dropdown_event+0x286>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80271c0:	2c15      	cmp	r4, #21
 80271c2:	d1da      	bne.n	802717a <lv_dropdown_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 80271c4:	4628      	mov	r0, r5
 80271c6:	f7dc fdbd 	bl	8003d44 <lv_event_get_target>
 80271ca:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80271cc:	4628      	mov	r0, r5
 80271ce:	f7dc fe2d 	bl	8003e2c <lv_event_get_draw_ctx>
 80271d2:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80271d4:	2232      	movs	r2, #50	; 0x32
 80271d6:	2100      	movs	r1, #0
 80271d8:	4620      	mov	r0, r4
 80271da:	f7e3 fb05 	bl	800a7e8 <lv_obj_get_style_prop>
 80271de:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80271e0:	2212      	movs	r2, #18
 80271e2:	2100      	movs	r1, #0
 80271e4:	4620      	mov	r0, r4
 80271e6:	f7e3 faff 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80271ea:	b2ad      	uxth	r5, r5
 80271ec:	182e      	adds	r6, r5, r0
 80271ee:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80271f0:	2213      	movs	r2, #19
 80271f2:	2100      	movs	r1, #0
 80271f4:	4620      	mov	r0, r4
 80271f6:	f7e3 faf7 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80271fa:	182f      	adds	r7, r5, r0
 80271fc:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80271fe:	2210      	movs	r2, #16
 8027200:	2100      	movs	r1, #0
 8027202:	4620      	mov	r0, r4
 8027204:	f7e3 faf0 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8027208:	4405      	add	r5, r0
 802720a:	b2ad      	uxth	r5, r5
    lv_draw_label_dsc_init(&symbol_dsc);
 802720c:	a80a      	add	r0, sp, #40	; 0x28
 802720e:	f7e6 f9ef 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 8027212:	aa0a      	add	r2, sp, #40	; 0x28
 8027214:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8027218:	4620      	mov	r0, r4
 802721a:	f7e0 f894 	bl	8007346 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 802721e:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 8027222:	f1b9 0f00 	cmp.w	r9, #0
 8027226:	f000 812b 	beq.w	8027480 <lv_dropdown_event+0x318>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 802722a:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802722e:	2216      	movs	r2, #22
 8027230:	2100      	movs	r1, #0
 8027232:	4620      	mov	r0, r4
 8027234:	f7e3 fad8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8027238:	b2c3      	uxtb	r3, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 802723a:	2b01      	cmp	r3, #1
 802723c:	f000 812a 	beq.w	8027494 <lv_dropdown_event+0x32c>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8027240:	f008 080f 	and.w	r8, r8, #15
 8027244:	f1b8 0f01 	cmp.w	r8, #1
 8027248:	bf14      	ite	ne
 802724a:	f04f 0800 	movne.w	r8, #0
 802724e:	f04f 0801 	moveq.w	r8, #1
    if(dropdown->symbol) {
 8027252:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027254:	2800      	cmp	r0, #0
 8027256:	d056      	beq.n	8027306 <lv_dropdown_event+0x19e>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 8027258:	f7e6 f84d 	bl	800d2f6 <lv_img_src_get_type>
 802725c:	9005      	str	r0, [sp, #20]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 802725e:	2802      	cmp	r0, #2
 8027260:	f000 811b 	beq.w	802749a <lv_dropdown_event+0x332>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 8027264:	a912      	add	r1, sp, #72	; 0x48
 8027266:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027268:	f7e8 fbee 	bl	800fa48 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 802726c:	2801      	cmp	r0, #1
 802726e:	f000 8129 	beq.w	80274c4 <lv_dropdown_event+0x35c>
                symbol_h = -1;
 8027272:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
                symbol_w = -1;
 8027276:	46da      	mov	sl, fp
        if(symbol_to_left) {
 8027278:	f1b8 0f00 	cmp.w	r8, #0
 802727c:	f000 812a 	beq.w	80274d4 <lv_dropdown_event+0x36c>
            symbol_area.x1 = obj->coords.x1 + left;
 8027280:	8aa3      	ldrh	r3, [r4, #20]
 8027282:	4433      	add	r3, r6
 8027284:	b29b      	uxth	r3, r3
 8027286:	f8ad 3020 	strh.w	r3, [sp, #32]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 802728a:	3b01      	subs	r3, #1
 802728c:	4453      	add	r3, sl
 802728e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8027292:	9b05      	ldr	r3, [sp, #20]
 8027294:	2b02      	cmp	r3, #2
 8027296:	f000 8128 	beq.w	80274ea <lv_dropdown_event+0x382>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 802729a:	8ae3      	ldrh	r3, [r4, #22]
 802729c:	9305      	str	r3, [sp, #20]
 802729e:	4620      	mov	r0, r4
 80272a0:	f7e0 fc29 	bl	8007af6 <lv_obj_get_height>
 80272a4:	eba0 030b 	sub.w	r3, r0, fp
 80272a8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80272ac:	9a05      	ldr	r2, [sp, #20]
 80272ae:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80272b2:	b29b      	uxth	r3, r3
 80272b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80272b8:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80272bc:	4413      	add	r3, r2
 80272be:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            lv_draw_img_dsc_init(&img_dsc);
 80272c2:	a812      	add	r0, sp, #72	; 0x48
 80272c4:	f7e5 ffcb 	bl	800d25e <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 80272c8:	aa12      	add	r2, sp, #72	; 0x48
 80272ca:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80272ce:	4620      	mov	r0, r4
 80272d0:	f7e0 f890 	bl	80073f4 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 80272d4:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 80272d8:	105b      	asrs	r3, r3, #1
 80272da:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            img_dsc.pivot.y = symbol_h / 2;
 80272de:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 80272e2:	ea4f 036b 	mov.w	r3, fp, asr #1
 80272e6:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80272ea:	226d      	movs	r2, #109	; 0x6d
 80272ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80272f0:	4620      	mov	r0, r4
 80272f2:	f7e3 fa79 	bl	800a7e8 <lv_obj_get_style_prop>
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 80272f6:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 80272fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80272fc:	aa08      	add	r2, sp, #32
 80272fe:	a912      	add	r1, sp, #72	; 0x48
 8027300:	9804      	ldr	r0, [sp, #16]
 8027302:	f7e6 f813 	bl	800d32c <lv_draw_img>
    lv_draw_label_dsc_init(&label_dsc);
 8027306:	a812      	add	r0, sp, #72	; 0x48
 8027308:	f7e6 f972 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 802730c:	aa12      	add	r2, sp, #72	; 0x48
 802730e:	2100      	movs	r1, #0
 8027310:	4620      	mov	r0, r4
 8027312:	f7e0 f818 	bl	8007346 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8027316:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 802731a:	9302      	str	r3, [sp, #8]
 802731c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8027320:	9301      	str	r3, [sp, #4]
 8027322:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8027326:	9300      	str	r3, [sp, #0]
 8027328:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 802732c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802732e:	4649      	mov	r1, r9
 8027330:	a807      	add	r0, sp, #28
 8027332:	f7fc fdd4 	bl	8023ede <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 8027336:	8ae3      	ldrh	r3, [r4, #22]
 8027338:	442b      	add	r3, r5
 802733a:	b29b      	uxth	r3, r3
 802733c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    txt_area.y2 = txt_area.y1 + size.y;
 8027340:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027344:	4413      	add	r3, r2
 8027346:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if(dropdown->symbol == NULL) {
 802734a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802734c:	2b00      	cmp	r3, #0
 802734e:	f000 80de 	beq.w	802750e <lv_dropdown_event+0x3a6>
        if(symbol_to_left) {
 8027352:	f1b8 0f00 	cmp.w	r8, #0
 8027356:	f000 80ec 	beq.w	8027532 <lv_dropdown_event+0x3ca>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 802735a:	8b23      	ldrh	r3, [r4, #24]
 802735c:	1bdb      	subs	r3, r3, r7
 802735e:	b29b      	uxth	r3, r3
 8027360:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027364:	1a9a      	subs	r2, r3, r2
 8027366:	f8ad 2020 	strh.w	r2, [sp, #32]
            txt_area.x2 = txt_area.x1 + size.x;
 802736a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 802736e:	2300      	movs	r3, #0
 8027370:	9300      	str	r3, [sp, #0]
 8027372:	464b      	mov	r3, r9
 8027374:	aa08      	add	r2, sp, #32
 8027376:	a912      	add	r1, sp, #72	; 0x48
 8027378:	9804      	ldr	r0, [sp, #16]
 802737a:	f7e6 f96d 	bl	800d658 <lv_draw_label>
    if(dropdown->text == NULL) {
 802737e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027380:	2b00      	cmp	r3, #0
 8027382:	f47f aefa 	bne.w	802717a <lv_dropdown_event+0x12>
        lv_mem_buf_release((char *)opt_txt);
 8027386:	4648      	mov	r0, r9
 8027388:	f7fa fb22 	bl	80219d0 <lv_mem_buf_release>
}
 802738c:	e6f5      	b.n	802717a <lv_dropdown_event+0x12>
        lv_group_t * g             = lv_obj_get_group(obj);
 802738e:	f7df fb34 	bl	80069fa <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8027392:	f7dc ff79 	bl	8004288 <lv_group_get_editing>
 8027396:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8027398:	f7dd f858 	bl	800444c <lv_indev_get_act>
 802739c:	f7dd f85c 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80273a0:	2804      	cmp	r0, #4
 80273a2:	f47f aeea 	bne.w	802717a <lv_dropdown_event+0x12>
            if(editing) {
 80273a6:	b11c      	cbz	r4, 80273b0 <lv_dropdown_event+0x248>
                lv_dropdown_open(obj);
 80273a8:	4630      	mov	r0, r6
 80273aa:	f7ff fc7c 	bl	8026ca6 <lv_dropdown_open>
 80273ae:	e6e4      	b.n	802717a <lv_dropdown_event+0x12>
                dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80273b0:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 80273b2:	86f3      	strh	r3, [r6, #54]	; 0x36
                lv_dropdown_close(obj);
 80273b4:	4630      	mov	r0, r6
 80273b6:	f7ff fda7 	bl	8026f08 <lv_dropdown_close>
 80273ba:	e6de      	b.n	802717a <lv_dropdown_event+0x12>
        lv_dropdown_close(obj);
 80273bc:	f7ff fda4 	bl	8026f08 <lv_dropdown_close>
 80273c0:	e6db      	b.n	802717a <lv_dropdown_event+0x12>
        res = btn_release_handler(obj);
 80273c2:	f7ff fe94 	bl	80270ee <btn_release_handler>
        if(res != LV_RES_OK) return;
 80273c6:	e6d8      	b.n	802717a <lv_dropdown_event+0x12>
        lv_obj_refresh_self_size(obj);
 80273c8:	f7e0 fc2c 	bl	8007c24 <lv_obj_refresh_self_size>
 80273cc:	e6d5      	b.n	802717a <lv_dropdown_event+0x12>
        lv_obj_refresh_self_size(obj);
 80273ce:	f7e0 fc29 	bl	8007c24 <lv_obj_refresh_self_size>
 80273d2:	e6d2      	b.n	802717a <lv_dropdown_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 80273d4:	4628      	mov	r0, r5
 80273d6:	f7dc fcbd 	bl	8003d54 <lv_event_get_param>
 80273da:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80273dc:	2257      	movs	r2, #87	; 0x57
 80273de:	2100      	movs	r1, #0
 80273e0:	4630      	mov	r0, r6
 80273e2:	f7e3 fa01 	bl	800a7e8 <lv_obj_get_style_prop>
 80273e6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
        p->y = lv_font_get_line_height(font);
 80273ea:	8063      	strh	r3, [r4, #2]
 80273ec:	e6c5      	b.n	802717a <lv_dropdown_event+0x12>
        char c = *((char *)lv_event_get_param(e));
 80273ee:	4628      	mov	r0, r5
 80273f0:	f7dc fcb0 	bl	8003d54 <lv_event_get_param>
 80273f4:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 80273f6:	f1a3 0212 	sub.w	r2, r3, #18
 80273fa:	b2d2      	uxtb	r2, r2
 80273fc:	2a01      	cmp	r2, #1
 80273fe:	d911      	bls.n	8027424 <lv_dropdown_event+0x2bc>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8027400:	2b14      	cmp	r3, #20
 8027402:	d022      	beq.n	802744a <lv_dropdown_event+0x2e2>
 8027404:	2b11      	cmp	r3, #17
 8027406:	d020      	beq.n	802744a <lv_dropdown_event+0x2e2>
        else if(c == LV_KEY_ESC) {
 8027408:	2b1b      	cmp	r3, #27
 802740a:	d030      	beq.n	802746e <lv_dropdown_event+0x306>
        else if(c == LV_KEY_ENTER) {
 802740c:	2b0a      	cmp	r3, #10
 802740e:	f47f aeb4 	bne.w	802717a <lv_dropdown_event+0x12>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 8027412:	f7dd f8e3 	bl	80045dc <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 8027416:	4286      	cmp	r6, r0
 8027418:	f43f aeaf 	beq.w	802717a <lv_dropdown_event+0x12>
                res = btn_release_handler(obj);
 802741c:	4630      	mov	r0, r6
 802741e:	f7ff fe66 	bl	80270ee <btn_release_handler>
                if(res != LV_RES_OK) return;
 8027422:	e6aa      	b.n	802717a <lv_dropdown_event+0x12>
            if(!lv_dropdown_is_open(obj)) {
 8027424:	4630      	mov	r0, r6
 8027426:	f7ff fe59 	bl	80270dc <lv_dropdown_is_open>
 802742a:	b150      	cbz	r0, 8027442 <lv_dropdown_event+0x2da>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 802742c:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 802742e:	1c59      	adds	r1, r3, #1
 8027430:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 8027432:	4291      	cmp	r1, r2
 8027434:	f6bf aea1 	bge.w	802717a <lv_dropdown_event+0x12>
                dropdown->sel_opt_id++;
 8027438:	86f1      	strh	r1, [r6, #54]	; 0x36
                position_to_selected(obj);
 802743a:	4630      	mov	r0, r6
 802743c:	f7ff fa42 	bl	80268c4 <position_to_selected>
 8027440:	e69b      	b.n	802717a <lv_dropdown_event+0x12>
                lv_dropdown_open(obj);
 8027442:	4630      	mov	r0, r6
 8027444:	f7ff fc2f 	bl	8026ca6 <lv_dropdown_open>
 8027448:	e697      	b.n	802717a <lv_dropdown_event+0x12>
            if(!lv_dropdown_is_open(obj)) {
 802744a:	4630      	mov	r0, r6
 802744c:	f7ff fe46 	bl	80270dc <lv_dropdown_is_open>
 8027450:	b148      	cbz	r0, 8027466 <lv_dropdown_event+0x2fe>
            else if(dropdown->sel_opt_id > 0) {
 8027452:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 8027454:	2b00      	cmp	r3, #0
 8027456:	f43f ae90 	beq.w	802717a <lv_dropdown_event+0x12>
                dropdown->sel_opt_id--;
 802745a:	3b01      	subs	r3, #1
 802745c:	86f3      	strh	r3, [r6, #54]	; 0x36
                position_to_selected(obj);
 802745e:	4630      	mov	r0, r6
 8027460:	f7ff fa30 	bl	80268c4 <position_to_selected>
 8027464:	e689      	b.n	802717a <lv_dropdown_event+0x12>
                lv_dropdown_open(obj);
 8027466:	4630      	mov	r0, r6
 8027468:	f7ff fc1d 	bl	8026ca6 <lv_dropdown_open>
 802746c:	e685      	b.n	802717a <lv_dropdown_event+0x12>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 802746e:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8027470:	86f3      	strh	r3, [r6, #54]	; 0x36
            lv_dropdown_close(obj);
 8027472:	4630      	mov	r0, r6
 8027474:	f7ff fd48 	bl	8026f08 <lv_dropdown_close>
 8027478:	e67f      	b.n	802717a <lv_dropdown_event+0x12>
 802747a:	bf00      	nop
 802747c:	08032fc0 	.word	0x08032fc0
        char * buf = lv_mem_buf_get(128);
 8027480:	2080      	movs	r0, #128	; 0x80
 8027482:	f7fa fa43 	bl	802190c <lv_mem_buf_get>
 8027486:	4681      	mov	r9, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 8027488:	2280      	movs	r2, #128	; 0x80
 802748a:	4601      	mov	r1, r0
 802748c:	4620      	mov	r0, r4
 802748e:	f7ff fbc5 	bl	8026c1c <lv_dropdown_get_selected_str>
        opt_txt = buf;
 8027492:	e6ca      	b.n	802722a <lv_dropdown_event+0xc2>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8027494:	f04f 0801 	mov.w	r8, #1
 8027498:	e6db      	b.n	8027252 <lv_dropdown_event+0xea>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 802749a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802749c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80274a0:	9302      	str	r3, [sp, #8]
 80274a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80274a6:	9301      	str	r3, [sp, #4]
 80274a8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80274ac:	9300      	str	r3, [sp, #0]
 80274ae:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80274b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80274b4:	a812      	add	r0, sp, #72	; 0x48
 80274b6:	f7fc fd12 	bl	8023ede <lv_txt_get_size>
            symbol_w = size.x;
 80274ba:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
            symbol_h = size.y;
 80274be:	f9bd b04a 	ldrsh.w	fp, [sp, #74]	; 0x4a
 80274c2:	e6d9      	b.n	8027278 <lv_dropdown_event+0x110>
                symbol_w = header.w;
 80274c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80274c6:	f3c3 2a8a 	ubfx	sl, r3, #10, #11
                symbol_h = header.h;
 80274ca:	f8bd b04a 	ldrh.w	fp, [sp, #74]	; 0x4a
 80274ce:	f3cb 1b4a 	ubfx	fp, fp, #5, #11
 80274d2:	e6d1      	b.n	8027278 <lv_dropdown_event+0x110>
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 80274d4:	8b23      	ldrh	r3, [r4, #24]
 80274d6:	1bdb      	subs	r3, r3, r7
 80274d8:	b29b      	uxth	r3, r3
 80274da:	eba3 020a 	sub.w	r2, r3, sl
 80274de:	f8ad 2020 	strh.w	r2, [sp, #32]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 80274e2:	3b01      	subs	r3, #1
 80274e4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80274e8:	e6d3      	b.n	8027292 <lv_dropdown_event+0x12a>
            symbol_area.y1 = obj->coords.y1 + top;
 80274ea:	8ae3      	ldrh	r3, [r4, #22]
 80274ec:	442b      	add	r3, r5
 80274ee:	b29b      	uxth	r3, r3
 80274f0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 80274f4:	3b01      	subs	r3, #1
 80274f6:	449b      	add	fp, r3
 80274f8:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 80274fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80274fe:	2200      	movs	r2, #0
 8027500:	9200      	str	r2, [sp, #0]
 8027502:	aa08      	add	r2, sp, #32
 8027504:	a90a      	add	r1, sp, #40	; 0x28
 8027506:	9804      	ldr	r0, [sp, #16]
 8027508:	f7e6 f8a6 	bl	800d658 <lv_draw_label>
 802750c:	e6fb      	b.n	8027306 <lv_dropdown_event+0x19e>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 802750e:	8aa5      	ldrh	r5, [r4, #20]
 8027510:	4620      	mov	r0, r4
 8027512:	f7e0 faea 	bl	8007aea <lv_obj_get_width>
 8027516:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802751a:	1a83      	subs	r3, r0, r2
 802751c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027520:	eb05 0363 	add.w	r3, r5, r3, asr #1
 8027524:	b29b      	uxth	r3, r3
 8027526:	f8ad 3020 	strh.w	r3, [sp, #32]
        txt_area.x2 = txt_area.x1 + size.x;
 802752a:	4413      	add	r3, r2
 802752c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8027530:	e71d      	b.n	802736e <lv_dropdown_event+0x206>
            txt_area.x1 = obj->coords.x1 + left;
 8027532:	8aa3      	ldrh	r3, [r4, #20]
 8027534:	4433      	add	r3, r6
 8027536:	b29b      	uxth	r3, r3
 8027538:	f8ad 3020 	strh.w	r3, [sp, #32]
            txt_area.x2 = txt_area.x1 + size.x;
 802753c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027540:	4413      	add	r3, r2
 8027542:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8027546:	e712      	b.n	802736e <lv_dropdown_event+0x206>

08027548 <lv_img_get_transformed_size>:
        img->src_type = LV_IMG_SRC_UNKNOWN;
    }
}

static lv_point_t lv_img_get_transformed_size(lv_obj_t * obj)
{
 8027548:	b500      	push	{lr}
 802754a:	b087      	sub	sp, #28
    lv_img_t * img = (lv_img_t *)obj;


    lv_area_t area_transform;
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
                                     img->angle, img->zoom, &img->pivot);
 802754c:	f100 0332 	add.w	r3, r0, #50	; 0x32
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8027550:	9301      	str	r3, [sp, #4]
 8027552:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8027554:	9300      	str	r3, [sp, #0]
 8027556:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 802755a:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 802755e:	f9b0 102c 	ldrsh.w	r1, [r0, #44]	; 0x2c
 8027562:	a803      	add	r0, sp, #12
 8027564:	f7e7 fe8c 	bl	800f280 <_lv_img_buf_get_transformed_area>
 8027568:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802756c:	3301      	adds	r3, #1
 802756e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8027572:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8027576:	3201      	adds	r2, #1
 8027578:	f8bd 000c 	ldrh.w	r0, [sp, #12]

    return (lv_point_t) {
 802757c:	1a12      	subs	r2, r2, r0
 802757e:	1a5b      	subs	r3, r3, r1
 8027580:	2000      	movs	r0, #0
 8027582:	b292      	uxth	r2, r2
 8027584:	f362 000f 	bfi	r0, r2, #0, #16
 8027588:	b29b      	uxth	r3, r3
 802758a:	f363 401f 	bfi	r0, r3, #16, #16
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}
 802758e:	b007      	add	sp, #28
 8027590:	f85d fb04 	ldr.w	pc, [sp], #4

08027594 <lv_img_destructor>:
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8027594:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8027598:	f003 0303 	and.w	r3, r3, #3
 802759c:	3b01      	subs	r3, #1
 802759e:	b2db      	uxtb	r3, r3
 80275a0:	2b01      	cmp	r3, #1
 80275a2:	d900      	bls.n	80275a6 <lv_img_destructor+0x12>
 80275a4:	4770      	bx	lr
{
 80275a6:	b510      	push	{r4, lr}
 80275a8:	460c      	mov	r4, r1
        lv_mem_free((void *)img->src);
 80275aa:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80275ac:	f7fa f97a 	bl	80218a4 <lv_mem_free>
        img->src      = NULL;
 80275b0:	2300      	movs	r3, #0
 80275b2:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 80275b4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80275b8:	f043 0303 	orr.w	r3, r3, #3
 80275bc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80275c0:	bd10      	pop	{r4, pc}

080275c2 <lv_img_constructor>:
{
 80275c2:	b538      	push	{r3, r4, r5, lr}
 80275c4:	460c      	mov	r4, r1
    img->src       = NULL;
 80275c6:	2500      	movs	r5, #0
 80275c8:	624d      	str	r5, [r1, #36]	; 0x24
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 80275ca:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    img->cf        = LV_IMG_CF_UNKNOWN;
 80275ce:	f043 0303 	orr.w	r3, r3, #3
 80275d2:	f365 0386 	bfi	r3, r5, #2, #5
 80275d6:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    img->w         = lv_obj_get_width(obj);
 80275da:	4608      	mov	r0, r1
 80275dc:	f7e0 fa85 	bl	8007aea <lv_obj_get_width>
 80275e0:	85a0      	strh	r0, [r4, #44]	; 0x2c
    img->h         = lv_obj_get_height(obj);
 80275e2:	4620      	mov	r0, r4
 80275e4:	f7e0 fa87 	bl	8007af6 <lv_obj_get_height>
 80275e8:	85e0      	strh	r0, [r4, #46]	; 0x2e
    img->angle = 0;
 80275ea:	8625      	strh	r5, [r4, #48]	; 0x30
    img->zoom = LV_IMG_ZOOM_NONE;
 80275ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80275f0:	86e3      	strh	r3, [r4, #54]	; 0x36
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80275f2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80275f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80275fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    img->offset.x  = 0;
 80275fe:	8525      	strh	r5, [r4, #40]	; 0x28
    img->offset.y  = 0;
 8027600:	8565      	strh	r5, [r4, #42]	; 0x2a
    img->pivot.x = 0;
 8027602:	8665      	strh	r5, [r4, #50]	; 0x32
    img->pivot.y = 0;
 8027604:	86a5      	strh	r5, [r4, #52]	; 0x34
    img->obj_size_mode = LV_IMG_SIZE_MODE_VIRTUAL;
 8027606:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 802760a:	f365 0301 	bfi	r3, r5, #0, #2
 802760e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8027612:	2102      	movs	r1, #2
 8027614:	4620      	mov	r0, r4
 8027616:	f7df f985 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 802761a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 802761e:	4620      	mov	r0, r4
 8027620:	f7df f946 	bl	80068b0 <lv_obj_add_flag>
}
 8027624:	bd38      	pop	{r3, r4, r5, pc}
	...

08027628 <lv_img_create>:
{
 8027628:	b510      	push	{r4, lr}
 802762a:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 802762c:	4803      	ldr	r0, [pc, #12]	; (802763c <lv_img_create+0x14>)
 802762e:	f7df fc2f 	bl	8006e90 <lv_obj_class_create_obj>
 8027632:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8027634:	f7df fcd9 	bl	8006fea <lv_obj_class_init_obj>
}
 8027638:	4620      	mov	r0, r4
 802763a:	bd10      	pop	{r4, pc}
 802763c:	08032ff8 	.word	0x08032ff8

08027640 <lv_img_set_src>:
{
 8027640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027644:	b086      	sub	sp, #24
 8027646:	4604      	mov	r4, r0
 8027648:	460e      	mov	r6, r1
    lv_obj_invalidate(obj);
 802764a:	f7e0 fc95 	bl	8007f78 <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 802764e:	4630      	mov	r0, r6
 8027650:	f7e5 fe51 	bl	800d2f6 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8027654:	2803      	cmp	r0, #3
 8027656:	d03c      	beq.n	80276d2 <lv_img_set_src+0x92>
 8027658:	4605      	mov	r5, r0
    lv_img_decoder_get_info(src, &header);
 802765a:	a905      	add	r1, sp, #20
 802765c:	4630      	mov	r0, r6
 802765e:	f7e8 f9f3 	bl	800fa48 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8027662:	2d00      	cmp	r5, #0
 8027664:	d14e      	bne.n	8027704 <lv_img_set_src+0xc4>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8027666:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 802766a:	f003 0303 	and.w	r3, r3, #3
 802766e:	3b01      	subs	r3, #1
 8027670:	b2db      	uxtb	r3, r3
 8027672:	2b01      	cmp	r3, #1
 8027674:	d942      	bls.n	80276fc <lv_img_set_src+0xbc>
        img->src = src;
 8027676:	6266      	str	r6, [r4, #36]	; 0x24
    img->src_type = src_type;
 8027678:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 802767c:	f365 0301 	bfi	r3, r5, #0, #2
    img->w        = header.w;
 8027680:	9905      	ldr	r1, [sp, #20]
 8027682:	f3c1 228a 	ubfx	r2, r1, #10, #11
 8027686:	85a2      	strh	r2, [r4, #44]	; 0x2c
    img->h        = header.h;
 8027688:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 802768c:	f3c2 104a 	ubfx	r0, r2, #5, #11
 8027690:	85e0      	strh	r0, [r4, #46]	; 0x2e
    img->cf       = header.cf;
 8027692:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8027696:	f3c0 0004 	ubfx	r0, r0, #0, #5
 802769a:	f360 0386 	bfi	r3, r0, #2, #5
 802769e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    img->pivot.x = header.w / 2;
 80276a2:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 80276a6:	8661      	strh	r1, [r4, #50]	; 0x32
    img->pivot.y = header.h / 2;
 80276a8:	f3c2 1289 	ubfx	r2, r2, #6, #10
 80276ac:	86a2      	strh	r2, [r4, #52]	; 0x34
    lv_obj_refresh_self_size(obj);
 80276ae:	4620      	mov	r0, r4
 80276b0:	f7e0 fab8 	bl	8007c24 <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 80276b4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80276b6:	b91b      	cbnz	r3, 80276c0 <lv_img_set_src+0x80>
 80276b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80276ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80276be:	d002      	beq.n	80276c6 <lv_img_set_src+0x86>
 80276c0:	4620      	mov	r0, r4
 80276c2:	f7e0 f815 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 80276c6:	4620      	mov	r0, r4
 80276c8:	f7e0 fc56 	bl	8007f78 <lv_obj_invalidate>
}
 80276cc:	b006      	add	sp, #24
 80276ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 80276d2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80276d6:	f003 0303 	and.w	r3, r3, #3
 80276da:	3b01      	subs	r3, #1
 80276dc:	b2db      	uxtb	r3, r3
 80276de:	2b01      	cmp	r3, #1
 80276e0:	d908      	bls.n	80276f4 <lv_img_set_src+0xb4>
        img->src      = NULL;
 80276e2:	2300      	movs	r3, #0
 80276e4:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 80276e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80276ea:	f043 0303 	orr.w	r3, r3, #3
 80276ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return;
 80276f2:	e7eb      	b.n	80276cc <lv_img_set_src+0x8c>
            lv_mem_free((void *)img->src);
 80276f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80276f6:	f7fa f8d5 	bl	80218a4 <lv_mem_free>
 80276fa:	e7f2      	b.n	80276e2 <lv_img_set_src+0xa2>
            lv_mem_free((void *)img->src);
 80276fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80276fe:	f7fa f8d1 	bl	80218a4 <lv_mem_free>
 8027702:	e7b8      	b.n	8027676 <lv_img_set_src+0x36>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8027704:	1e6b      	subs	r3, r5, #1
 8027706:	b2db      	uxtb	r3, r3
 8027708:	2b01      	cmp	r3, #1
 802770a:	d92f      	bls.n	802776c <lv_img_set_src+0x12c>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 802770c:	2d02      	cmp	r5, #2
 802770e:	d1b3      	bne.n	8027678 <lv_img_set_src+0x38>
 8027710:	2257      	movs	r2, #87	; 0x57
 8027712:	2100      	movs	r1, #0
 8027714:	4620      	mov	r0, r4
 8027716:	f7e3 f867 	bl	800a7e8 <lv_obj_get_style_prop>
 802771a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802771c:	2258      	movs	r2, #88	; 0x58
 802771e:	2100      	movs	r1, #0
 8027720:	4620      	mov	r0, r4
 8027722:	f7e3 f861 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8027726:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802772a:	2259      	movs	r2, #89	; 0x59
 802772c:	2100      	movs	r1, #0
 802772e:	4620      	mov	r0, r4
 8027730:	f7e3 f85a 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8027734:	b200      	sxth	r0, r0
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8027736:	2300      	movs	r3, #0
 8027738:	9302      	str	r3, [sp, #8]
 802773a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 802773e:	9301      	str	r3, [sp, #4]
 8027740:	9000      	str	r0, [sp, #0]
 8027742:	4643      	mov	r3, r8
 8027744:	463a      	mov	r2, r7
 8027746:	4631      	mov	r1, r6
 8027748:	a804      	add	r0, sp, #16
 802774a:	f7fc fbc8 	bl	8023ede <lv_txt_get_size>
        header.w = size.x;
 802774e:	9b05      	ldr	r3, [sp, #20]
 8027750:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8027754:	f362 2394 	bfi	r3, r2, #10, #11
 8027758:	9305      	str	r3, [sp, #20]
        header.h = size.y;
 802775a:	f3c3 430f 	ubfx	r3, r3, #16, #16
 802775e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8027762:	f362 134f 	bfi	r3, r2, #5, #11
 8027766:	f8ad 3016 	strh.w	r3, [sp, #22]
 802776a:	e785      	b.n	8027678 <lv_img_set_src+0x38>
        if(img->src != src) {
 802776c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 802776e:	42b7      	cmp	r7, r6
 8027770:	d0cc      	beq.n	802770c <lv_img_set_src+0xcc>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8027772:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027776:	f003 0303 	and.w	r3, r3, #3
 802777a:	3b01      	subs	r3, #1
 802777c:	b2db      	uxtb	r3, r3
 802777e:	2b01      	cmp	r3, #1
 8027780:	d908      	bls.n	8027794 <lv_img_set_src+0x154>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8027782:	4630      	mov	r0, r6
 8027784:	f7d8 fd58 	bl	8000238 <strlen>
 8027788:	3001      	adds	r0, #1
 802778a:	f7fa f86d 	bl	8021868 <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 802778e:	4607      	mov	r7, r0
 8027790:	b9a0      	cbnz	r0, 80277bc <lv_img_set_src+0x17c>
 8027792:	e7fe      	b.n	8027792 <lv_img_set_src+0x152>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8027794:	4630      	mov	r0, r6
 8027796:	f7d8 fd4f 	bl	8000238 <strlen>
 802779a:	3001      	adds	r0, #1
 802779c:	f7fa f864 	bl	8021868 <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 80277a0:	4680      	mov	r8, r0
 80277a2:	2800      	cmp	r0, #0
 80277a4:	d0f5      	beq.n	8027792 <lv_img_set_src+0x152>
            strcpy(new_str, src);
 80277a6:	4631      	mov	r1, r6
 80277a8:	f005 f852 	bl	802c850 <strcpy>
            img->src = new_str;
 80277ac:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void *)old_src);
 80277b0:	2f00      	cmp	r7, #0
 80277b2:	d0ab      	beq.n	802770c <lv_img_set_src+0xcc>
 80277b4:	4638      	mov	r0, r7
 80277b6:	f7fa f875 	bl	80218a4 <lv_mem_free>
 80277ba:	e7a7      	b.n	802770c <lv_img_set_src+0xcc>
            strcpy(new_str, src);
 80277bc:	4631      	mov	r1, r6
 80277be:	4638      	mov	r0, r7
 80277c0:	f005 f846 	bl	802c850 <strcpy>
            img->src = new_str;
 80277c4:	6267      	str	r7, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void *)old_src);
 80277c6:	e7a1      	b.n	802770c <lv_img_set_src+0xcc>

080277c8 <lv_img_event>:

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80277c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277cc:	b099      	sub	sp, #100	; 0x64
 80277ce:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 80277d0:	4608      	mov	r0, r1
 80277d2:	f7dc fabb 	bl	8003d4c <lv_event_get_code>

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 80277d6:	2815      	cmp	r0, #21
 80277d8:	f000 8333 	beq.w	8027e42 <lv_img_event+0x67a>
 80277dc:	4605      	mov	r5, r0
 80277de:	2818      	cmp	r0, #24
 80277e0:	f040 80df 	bne.w	80279a2 <lv_img_event+0x1da>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 80277e4:	4620      	mov	r0, r4
 80277e6:	f7dc faad 	bl	8003d44 <lv_event_get_target>
    }
}

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 80277ea:	4620      	mov	r0, r4
 80277ec:	f7dc faae 	bl	8003d4c <lv_event_get_code>
 80277f0:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80277f2:	4620      	mov	r0, r4
 80277f4:	f7dc faa6 	bl	8003d44 <lv_event_get_target>
 80277f8:	4605      	mov	r5, r0
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 80277fa:	2e12      	cmp	r6, #18
 80277fc:	f000 81bf 	beq.w	8027b7e <lv_img_event+0x3b6>
                info->res = LV_COVER_RES_NOT_COVER;
                return;
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8027800:	2e15      	cmp	r6, #21
 8027802:	d002      	beq.n	802780a <lv_img_event+0x42>
 8027804:	2e18      	cmp	r6, #24
 8027806:	f040 80f2 	bne.w	80279ee <lv_img_event+0x226>

        lv_coord_t obj_w = lv_obj_get_width(obj);
 802780a:	4628      	mov	r0, r5
 802780c:	f7e0 f96d 	bl	8007aea <lv_obj_get_width>
 8027810:	4680      	mov	r8, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 8027812:	4628      	mov	r0, r5
 8027814:	f7e0 f96f 	bl	8007af6 <lv_obj_get_height>
 8027818:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802781a:	2232      	movs	r2, #50	; 0x32
 802781c:	2100      	movs	r1, #0
 802781e:	4628      	mov	r0, r5
 8027820:	f7e2 ffe2 	bl	800a7e8 <lv_obj_get_style_prop>
 8027824:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8027826:	2212      	movs	r2, #18
 8027828:	2100      	movs	r1, #0
 802782a:	4628      	mov	r0, r5
 802782c:	f7e2 ffdc 	bl	800a7e8 <lv_obj_get_style_prop>

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8027830:	b2bf      	uxth	r7, r7
 8027832:	4438      	add	r0, r7
 8027834:	fa1f fa80 	uxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8027838:	2213      	movs	r2, #19
 802783a:	2100      	movs	r1, #0
 802783c:	4628      	mov	r0, r5
 802783e:	f7e2 ffd3 	bl	800a7e8 <lv_obj_get_style_prop>
 8027842:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8027844:	2210      	movs	r2, #16
 8027846:	2100      	movs	r1, #0
 8027848:	4628      	mov	r0, r5
 802784a:	f7e2 ffcd 	bl	800a7e8 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 802784e:	4438      	add	r0, r7
 8027850:	fa1f fb80 	uxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8027854:	2211      	movs	r2, #17
 8027856:	2100      	movs	r1, #0
 8027858:	4628      	mov	r0, r5
 802785a:	f7e2 ffc5 	bl	800a7e8 <lv_obj_get_style_prop>
 802785e:	9005      	str	r0, [sp, #20]
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
 8027860:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8027862:	4453      	add	r3, sl
 8027864:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_pivot.y = img->pivot.y + ptop;
 8027868:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 802786a:	445b      	add	r3, fp
 802786c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_area_t bg_coords;

        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8027870:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8027874:	f003 0303 	and.w	r3, r3, #3
 8027878:	2b01      	cmp	r3, #1
 802787a:	f000 81f1 	beq.w	8027c60 <lv_img_event+0x498>
            /*Object size equals to transformed image size*/
            lv_obj_get_coords(obj, &bg_coords);
        }
        else {
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 802787e:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8027882:	aa08      	add	r2, sp, #32
 8027884:	9201      	str	r2, [sp, #4]
 8027886:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8027888:	9200      	str	r2, [sp, #0]
 802788a:	464a      	mov	r2, r9
 802788c:	4641      	mov	r1, r8
 802788e:	a80a      	add	r0, sp, #40	; 0x28
 8027890:	f7e7 fcf6 	bl	800f280 <_lv_img_buf_get_transformed_area>
                                             img->angle, img->zoom, &bg_pivot);

            /*Modify the coordinates to draw the background for the rotated and scaled coordinates*/
            bg_coords.x1 += obj->coords.x1;
 8027894:	8aaa      	ldrh	r2, [r5, #20]
 8027896:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802789a:	4413      	add	r3, r2
 802789c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg_coords.y1 += obj->coords.y1;
 80278a0:	8aeb      	ldrh	r3, [r5, #22]
 80278a2:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80278a6:	4419      	add	r1, r3
 80278a8:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            bg_coords.x2 += obj->coords.x1;
 80278ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80278b0:	440a      	add	r2, r1
 80278b2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            bg_coords.y2 += obj->coords.y1;
 80278b6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80278ba:	4413      	add	r3, r2
 80278bc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    dest->x1 = src->x1;
 80278c0:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80278c4:	9302      	str	r3, [sp, #8]
    dest->y1 = src->y1;
 80278c6:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 80278ca:	9203      	str	r2, [sp, #12]
    dest->x2 = src->x2;
 80278cc:	f9b5 9018 	ldrsh.w	r9, [r5, #24]
    dest->y2 = src->y2;
 80278d0:	f9b5 801a 	ldrsh.w	r8, [r5, #26]
    dest->x1 = src->x1;
 80278d4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80278d8:	82ab      	strh	r3, [r5, #20]
    dest->y1 = src->y1;
 80278da:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80278de:	82eb      	strh	r3, [r5, #22]
    dest->x2 = src->x2;
 80278e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80278e4:	832b      	strh	r3, [r5, #24]
    dest->y2 = src->y2;
 80278e6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80278ea:	836b      	strh	r3, [r5, #26]

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80278ec:	4621      	mov	r1, r4
 80278ee:	48b8      	ldr	r0, [pc, #736]	; (8027bd0 <lv_img_event+0x408>)
 80278f0:	f7dc f909 	bl	8003b06 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80278f4:	2801      	cmp	r0, #1
 80278f6:	d17a      	bne.n	80279ee <lv_img_event+0x226>
    dest->x1 = src->x1;
 80278f8:	9b02      	ldr	r3, [sp, #8]
 80278fa:	82ab      	strh	r3, [r5, #20]
    dest->y1 = src->y1;
 80278fc:	9a03      	ldr	r2, [sp, #12]
 80278fe:	82ea      	strh	r2, [r5, #22]
    dest->x2 = src->x2;
 8027900:	f8a5 9018 	strh.w	r9, [r5, #24]
    dest->y2 = src->y2;
 8027904:	f8a5 801a 	strh.w	r8, [r5, #26]

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 8027908:	2e15      	cmp	r6, #21
 802790a:	d170      	bne.n	80279ee <lv_img_event+0x226>
            if(img->h == 0 || img->w == 0) return;
 802790c:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
 8027910:	2b00      	cmp	r3, #0
 8027912:	d06c      	beq.n	80279ee <lv_img_event+0x226>
 8027914:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8027918:	2b00      	cmp	r3, #0
 802791a:	d068      	beq.n	80279ee <lv_img_event+0x226>
            if(img->zoom == 0) return;
 802791c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 802791e:	2b00      	cmp	r3, #0
 8027920:	d065      	beq.n	80279ee <lv_img_event+0x226>

            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8027922:	4620      	mov	r0, r4
 8027924:	f7dc fa82 	bl	8003e2c <lv_event_get_draw_ctx>
 8027928:	4680      	mov	r8, r0
    dest->x1 = src->x1;
 802792a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 802792e:	9303      	str	r3, [sp, #12]
    dest->y1 = src->y1;
 8027930:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
    dest->x2 = src->x2;
 8027934:	f9b5 6018 	ldrsh.w	r6, [r5, #24]
    dest->y2 = src->y2;
 8027938:	f9b5 401a 	ldrsh.w	r4, [r5, #26]

            lv_area_t img_max_area;
            lv_area_copy(&img_max_area, &obj->coords);

            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 802793c:	4628      	mov	r0, r5
 802793e:	f7ff fe03 	bl	8027548 <lv_img_get_transformed_size>
 8027942:	9009      	str	r0, [sp, #36]	; 0x24
 8027944:	b203      	sxth	r3, r0
 8027946:	9306      	str	r3, [sp, #24]
 8027948:	1403      	asrs	r3, r0, #16
 802794a:	9302      	str	r3, [sp, #8]

            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 802794c:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8027950:	f003 0303 	and.w	r3, r3, #3
 8027954:	2b01      	cmp	r3, #1
 8027956:	f000 8188 	beq.w	8027c6a <lv_img_event+0x4a2>
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
            }
            else {
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 802795a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802795e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8027962:	1ad3      	subs	r3, r2, r3
 8027964:	9a03      	ldr	r2, [sp, #12]
 8027966:	4413      	add	r3, r2
 8027968:	b21b      	sxth	r3, r3
 802796a:	9307      	str	r3, [sp, #28]
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 802796c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8027970:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8027974:	1ae4      	subs	r4, r4, r3
 8027976:	444c      	add	r4, r9
 8027978:	b224      	sxth	r4, r4
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 802797a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 802797e:	f013 0f02 	tst.w	r3, #2
 8027982:	f000 8193 	beq.w	8027cac <lv_img_event+0x4e4>
        lv_area_copy(&obj->coords, &bg_coords);
 8027986:	f105 0414 	add.w	r4, r5, #20
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
                    }
                }
                draw_ctx->clip_area = clip_area_ori;
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 802798a:	f003 0303 	and.w	r3, r3, #3
 802798e:	2b02      	cmp	r3, #2
 8027990:	f000 8246 	beq.w	8027e20 <lv_img_event+0x658>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 8027994:	2300      	movs	r3, #0
 8027996:	4622      	mov	r2, r4
 8027998:	4619      	mov	r1, r3
 802799a:	4640      	mov	r0, r8
 802799c:	f7e5 fcc6 	bl	800d32c <lv_draw_img>
 80279a0:	e025      	b.n	80279ee <lv_img_event+0x226>
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80279a2:	4621      	mov	r1, r4
 80279a4:	488a      	ldr	r0, [pc, #552]	; (8027bd0 <lv_img_event+0x408>)
 80279a6:	f7dc f8ae 	bl	8003b06 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 80279aa:	2801      	cmp	r0, #1
 80279ac:	d11f      	bne.n	80279ee <lv_img_event+0x226>
    lv_obj_t * obj = lv_event_get_target(e);
 80279ae:	4620      	mov	r0, r4
 80279b0:	f7dc f9c8 	bl	8003d44 <lv_event_get_target>
 80279b4:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 80279b6:	2d2a      	cmp	r5, #42	; 0x2a
 80279b8:	d011      	beq.n	80279de <lv_img_event+0x216>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80279ba:	2d13      	cmp	r5, #19
 80279bc:	d01e      	beq.n	80279fc <lv_img_event+0x234>
    else if(code == LV_EVENT_HIT_TEST) {
 80279be:	2d11      	cmp	r5, #17
 80279c0:	d05e      	beq.n	8027a80 <lv_img_event+0x2b8>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80279c2:	2d2c      	cmp	r5, #44	; 0x2c
 80279c4:	f000 80c2 	beq.w	8027b4c <lv_img_event+0x384>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 80279c8:	2d18      	cmp	r5, #24
 80279ca:	d810      	bhi.n	80279ee <lv_img_event+0x226>
 80279cc:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 80279d0:	fa20 f505 	lsr.w	r5, r0, r5
 80279d4:	f015 0f01 	tst.w	r5, #1
 80279d8:	f47f af07 	bne.w	80277ea <lv_img_event+0x22>
 80279dc:	e007      	b.n	80279ee <lv_img_event+0x226>
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 80279de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80279e2:	f003 0303 	and.w	r3, r3, #3
 80279e6:	2b02      	cmp	r3, #2
 80279e8:	d004      	beq.n	80279f4 <lv_img_event+0x22c>
            lv_obj_refresh_ext_draw_size(obj);
 80279ea:	f7df fe81 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
}
 80279ee:	b019      	add	sp, #100	; 0x64
 80279f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_img_set_src(obj, img->src);
 80279f4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80279f6:	f7ff fe23 	bl	8027640 <lv_img_set_src>
 80279fa:	e7f8      	b.n	80279ee <lv_img_event+0x226>
        lv_coord_t * s = lv_event_get_param(e);
 80279fc:	4620      	mov	r0, r4
 80279fe:	f7dc f9a9 	bl	8003d54 <lv_event_get_param>
 8027a02:	4607      	mov	r7, r0
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 8027a04:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8027a06:	b91b      	cbnz	r3, 8027a10 <lv_img_event+0x248>
 8027a08:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 8027a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8027a0e:	d0ee      	beq.n	80279ee <lv_img_event+0x226>
            lv_coord_t w = lv_obj_get_width(obj);
 8027a10:	4630      	mov	r0, r6
 8027a12:	f7e0 f86a 	bl	8007aea <lv_obj_get_width>
 8027a16:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8027a18:	4630      	mov	r0, r6
 8027a1a:	f7e0 f86c 	bl	8007af6 <lv_obj_get_height>
 8027a1e:	4680      	mov	r8, r0
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 8027a20:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 8027a24:	f106 0232 	add.w	r2, r6, #50	; 0x32
 8027a28:	9201      	str	r2, [sp, #4]
 8027a2a:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 8027a2c:	9200      	str	r2, [sp, #0]
 8027a2e:	4602      	mov	r2, r0
 8027a30:	4649      	mov	r1, r9
 8027a32:	a810      	add	r0, sp, #64	; 0x40
 8027a34:	f7e7 fc24 	bl	800f280 <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, -a.x1);
 8027a38:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 8027a3c:	426d      	negs	r5, r5
 8027a3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8027a42:	429d      	cmp	r5, r3
 8027a44:	bfb8      	it	lt
 8027a46:	461d      	movlt	r5, r3
 8027a48:	b22d      	sxth	r5, r5
 8027a4a:	803d      	strh	r5, [r7, #0]
            *s = LV_MAX(*s, -a.y1);
 8027a4c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8027a50:	4253      	negs	r3, r2
 8027a52:	42ab      	cmp	r3, r5
 8027a54:	bfb8      	it	lt
 8027a56:	462b      	movlt	r3, r5
 8027a58:	b21d      	sxth	r5, r3
 8027a5a:	803d      	strh	r5, [r7, #0]
            *s = LV_MAX(*s, a.x2 - w);
 8027a5c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8027a60:	eba4 0309 	sub.w	r3, r4, r9
 8027a64:	42ab      	cmp	r3, r5
 8027a66:	bfb8      	it	lt
 8027a68:	462b      	movlt	r3, r5
 8027a6a:	b21b      	sxth	r3, r3
 8027a6c:	803b      	strh	r3, [r7, #0]
            *s = LV_MAX(*s, a.y2 - h);
 8027a6e:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
 8027a72:	eba0 0808 	sub.w	r8, r0, r8
 8027a76:	4543      	cmp	r3, r8
 8027a78:	bfb8      	it	lt
 8027a7a:	4643      	movlt	r3, r8
 8027a7c:	803b      	strh	r3, [r7, #0]
 8027a7e:	e7b6      	b.n	80279ee <lv_img_event+0x226>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8027a80:	4620      	mov	r0, r4
 8027a82:	f7dc f967 	bl	8003d54 <lv_event_get_param>
 8027a86:	4604      	mov	r4, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8027a88:	f9b6 502c 	ldrsh.w	r5, [r6, #44]	; 0x2c
 8027a8c:	4630      	mov	r0, r6
 8027a8e:	f7e0 f82c 	bl	8007aea <lv_obj_get_width>
 8027a92:	4285      	cmp	r5, r0
 8027a94:	d00a      	beq.n	8027aac <lv_img_event+0x2e4>
            lv_obj_get_click_area(obj, &a);
 8027a96:	a910      	add	r1, sp, #64	; 0x40
 8027a98:	4630      	mov	r0, r6
 8027a9a:	f7e0 fcb0 	bl	80083fe <lv_obj_get_click_area>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8027a9e:	2200      	movs	r2, #0
 8027aa0:	6821      	ldr	r1, [r4, #0]
 8027aa2:	a810      	add	r0, sp, #64	; 0x40
 8027aa4:	f7f9 f818 	bl	8020ad8 <_lv_area_is_point_on>
 8027aa8:	7120      	strb	r0, [r4, #4]
 8027aaa:	e7a0      	b.n	80279ee <lv_img_event+0x226>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8027aac:	f9b6 502e 	ldrsh.w	r5, [r6, #46]	; 0x2e
 8027ab0:	4630      	mov	r0, r6
 8027ab2:	f7e0 f820 	bl	8007af6 <lv_obj_get_height>
 8027ab6:	4285      	cmp	r5, r0
 8027ab8:	d1ed      	bne.n	8027a96 <lv_img_event+0x2ce>
 8027aba:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 8027abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8027ac0:	d10a      	bne.n	8027ad8 <lv_img_event+0x310>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8027ac2:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8027ac4:	b943      	cbnz	r3, 8027ad8 <lv_img_event+0x310>
 8027ac6:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
 8027aca:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027ace:	f9b6 2032 	ldrsh.w	r2, [r6, #50]	; 0x32
 8027ad2:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 8027ad6:	d02f      	beq.n	8027b38 <lv_img_event+0x370>
            lv_coord_t w = lv_obj_get_width(obj);
 8027ad8:	4630      	mov	r0, r6
 8027ada:	f7e0 f806 	bl	8007aea <lv_obj_get_width>
 8027ade:	4605      	mov	r5, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8027ae0:	4630      	mov	r0, r6
 8027ae2:	f7e0 f808 	bl	8007af6 <lv_obj_get_height>
 8027ae6:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 8027ae8:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 8027aec:	f106 0132 	add.w	r1, r6, #50	; 0x32
 8027af0:	9101      	str	r1, [sp, #4]
 8027af2:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
 8027af4:	9100      	str	r1, [sp, #0]
 8027af6:	4629      	mov	r1, r5
 8027af8:	a810      	add	r0, sp, #64	; 0x40
 8027afa:	f7e7 fbc1 	bl	800f280 <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 8027afe:	8ab2      	ldrh	r2, [r6, #20]
 8027b00:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8027b04:	4413      	add	r3, r2
 8027b06:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            coords.y1 += obj->coords.y1;
 8027b0a:	8af3      	ldrh	r3, [r6, #22]
 8027b0c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8027b10:	4419      	add	r1, r3
 8027b12:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            coords.x2 += obj->coords.x1;
 8027b16:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8027b1a:	440a      	add	r2, r1
 8027b1c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            coords.y2 += obj->coords.y1;
 8027b20:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8027b24:	4413      	add	r3, r2
 8027b26:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 8027b2a:	2200      	movs	r2, #0
 8027b2c:	6821      	ldr	r1, [r4, #0]
 8027b2e:	a810      	add	r0, sp, #64	; 0x40
 8027b30:	f7f8 ffd2 	bl	8020ad8 <_lv_area_is_point_on>
 8027b34:	7120      	strb	r0, [r4, #4]
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8027b36:	e75a      	b.n	80279ee <lv_img_event+0x226>
 8027b38:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 8027b3c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027b40:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8027b44:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 8027b48:	d1c6      	bne.n	8027ad8 <lv_img_event+0x310>
 8027b4a:	e7a4      	b.n	8027a96 <lv_img_event+0x2ce>
        lv_point_t * p = lv_event_get_param(e);
 8027b4c:	4620      	mov	r0, r4
 8027b4e:	f7dc f901 	bl	8003d54 <lv_event_get_param>
 8027b52:	4604      	mov	r4, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8027b54:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
 8027b58:	f003 0303 	and.w	r3, r3, #3
 8027b5c:	2b01      	cmp	r3, #1
 8027b5e:	d006      	beq.n	8027b6e <lv_img_event+0x3a6>
            p->x = img->w;
 8027b60:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
 8027b64:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 8027b66:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 8027b6a:	8043      	strh	r3, [r0, #2]
 8027b6c:	e73f      	b.n	80279ee <lv_img_event+0x226>
            *p = lv_img_get_transformed_size(obj);
 8027b6e:	4630      	mov	r0, r6
 8027b70:	f7ff fcea 	bl	8027548 <lv_img_get_transformed_size>
 8027b74:	8020      	strh	r0, [r4, #0]
 8027b76:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8027b7a:	8060      	strh	r0, [r4, #2]
 8027b7c:	e737      	b.n	80279ee <lv_img_event+0x226>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8027b7e:	4620      	mov	r0, r4
 8027b80:	f7dc f8e8 	bl	8003d54 <lv_event_get_param>
 8027b84:	4606      	mov	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8027b86:	7803      	ldrb	r3, [r0, #0]
 8027b88:	2b02      	cmp	r3, #2
 8027b8a:	f43f af30 	beq.w	80279ee <lv_img_event+0x226>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 8027b8e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8027b92:	f013 0f02 	tst.w	r3, #2
 8027b96:	d108      	bne.n	8027baa <lv_img_event+0x3e2>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 8027b98:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8027b9c:	2b10      	cmp	r3, #16
 8027b9e:	d007      	beq.n	8027bb0 <lv_img_event+0x3e8>
 8027ba0:	2b04      	cmp	r3, #4
 8027ba2:	d005      	beq.n	8027bb0 <lv_img_event+0x3e8>
            info->res = LV_COVER_RES_NOT_COVER;
 8027ba4:	2301      	movs	r3, #1
 8027ba6:	7003      	strb	r3, [r0, #0]
            return;
 8027ba8:	e721      	b.n	80279ee <lv_img_event+0x226>
            info->res = LV_COVER_RES_NOT_COVER;
 8027baa:	2301      	movs	r3, #1
 8027bac:	7003      	strb	r3, [r0, #0]
            return;
 8027bae:	e71e      	b.n	80279ee <lv_img_event+0x226>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8027bb0:	2246      	movs	r2, #70	; 0x46
 8027bb2:	2100      	movs	r1, #0
 8027bb4:	4628      	mov	r0, r5
 8027bb6:	f7e2 fe17 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8027bba:	b2c3      	uxtb	r3, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 8027bbc:	2bff      	cmp	r3, #255	; 0xff
 8027bbe:	d002      	beq.n	8027bc6 <lv_img_event+0x3fe>
            info->res = LV_COVER_RES_NOT_COVER;
 8027bc0:	2301      	movs	r3, #1
 8027bc2:	7033      	strb	r3, [r6, #0]
            return;
 8027bc4:	e713      	b.n	80279ee <lv_img_event+0x226>
        if(img->angle != 0) {
 8027bc6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8027bc8:	b123      	cbz	r3, 8027bd4 <lv_img_event+0x40c>
            info->res = LV_COVER_RES_NOT_COVER;
 8027bca:	2301      	movs	r3, #1
 8027bcc:	7033      	strb	r3, [r6, #0]
            return;
 8027bce:	e70e      	b.n	80279ee <lv_img_event+0x226>
 8027bd0:	08032ff8 	.word	0x08032ff8
        const lv_area_t * clip_area = lv_event_get_param(e);
 8027bd4:	4620      	mov	r0, r4
 8027bd6:	f7dc f8bd 	bl	8003d54 <lv_event_get_param>
 8027bda:	4604      	mov	r4, r0
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 8027bdc:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8027bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8027be2:	d032      	beq.n	8027c4a <lv_img_event+0x482>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, img->zoom, &img->pivot);
 8027be4:	4628      	mov	r0, r5
 8027be6:	f7df ff80 	bl	8007aea <lv_obj_get_width>
 8027bea:	4607      	mov	r7, r0
 8027bec:	4628      	mov	r0, r5
 8027bee:	f7df ff82 	bl	8007af6 <lv_obj_get_height>
 8027bf2:	4602      	mov	r2, r0
 8027bf4:	f105 0332 	add.w	r3, r5, #50	; 0x32
 8027bf8:	9301      	str	r3, [sp, #4]
 8027bfa:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8027bfc:	9300      	str	r3, [sp, #0]
 8027bfe:	2300      	movs	r3, #0
 8027c00:	4639      	mov	r1, r7
 8027c02:	a810      	add	r0, sp, #64	; 0x40
 8027c04:	f7e7 fb3c 	bl	800f280 <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 8027c08:	8aaa      	ldrh	r2, [r5, #20]
 8027c0a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8027c0e:	4413      	add	r3, r2
 8027c10:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            a.y1 += obj->coords.y1;
 8027c14:	8aeb      	ldrh	r3, [r5, #22]
 8027c16:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8027c1a:	4419      	add	r1, r3
 8027c1c:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            a.x2 += obj->coords.x1;
 8027c20:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8027c24:	440a      	add	r2, r1
 8027c26:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            a.y2 += obj->coords.y1;
 8027c2a:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 8027c2e:	4413      	add	r3, r2
 8027c30:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 8027c34:	2200      	movs	r2, #0
 8027c36:	a910      	add	r1, sp, #64	; 0x40
 8027c38:	4620      	mov	r0, r4
 8027c3a:	f7f9 f82a 	bl	8020c92 <_lv_area_is_in>
 8027c3e:	2800      	cmp	r0, #0
 8027c40:	f47f aed5 	bne.w	80279ee <lv_img_event+0x226>
                info->res = LV_COVER_RES_NOT_COVER;
 8027c44:	2301      	movs	r3, #1
 8027c46:	7033      	strb	r3, [r6, #0]
                return;
 8027c48:	e6d1      	b.n	80279ee <lv_img_event+0x226>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 8027c4a:	2200      	movs	r2, #0
 8027c4c:	f105 0114 	add.w	r1, r5, #20
 8027c50:	f7f9 f81f 	bl	8020c92 <_lv_area_is_in>
 8027c54:	2800      	cmp	r0, #0
 8027c56:	f47f aeca 	bne.w	80279ee <lv_img_event+0x226>
                info->res = LV_COVER_RES_NOT_COVER;
 8027c5a:	2301      	movs	r3, #1
 8027c5c:	7033      	strb	r3, [r6, #0]
                return;
 8027c5e:	e6c6      	b.n	80279ee <lv_img_event+0x226>
            lv_obj_get_coords(obj, &bg_coords);
 8027c60:	a90a      	add	r1, sp, #40	; 0x28
 8027c62:	4628      	mov	r0, r5
 8027c64:	f7df fee3 	bl	8007a2e <lv_obj_get_coords>
 8027c68:	e62a      	b.n	80278c0 <lv_img_event+0xf8>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 8027c6a:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8027c6e:	9a06      	ldr	r2, [sp, #24]
 8027c70:	1a9b      	subs	r3, r3, r2
 8027c72:	3301      	adds	r3, #1
 8027c74:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027c78:	105b      	asrs	r3, r3, #1
 8027c7a:	425b      	negs	r3, r3
 8027c7c:	b29b      	uxth	r3, r3
 8027c7e:	9a03      	ldr	r2, [sp, #12]
 8027c80:	441a      	add	r2, r3
 8027c82:	b212      	sxth	r2, r2
 8027c84:	9203      	str	r2, [sp, #12]
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 8027c86:	4433      	add	r3, r6
 8027c88:	b21b      	sxth	r3, r3
 8027c8a:	9307      	str	r3, [sp, #28]
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 8027c8c:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
 8027c90:	9a02      	ldr	r2, [sp, #8]
 8027c92:	1a9b      	subs	r3, r3, r2
 8027c94:	3301      	adds	r3, #1
 8027c96:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027c9a:	105b      	asrs	r3, r3, #1
 8027c9c:	425b      	negs	r3, r3
 8027c9e:	b29b      	uxth	r3, r3
 8027ca0:	4499      	add	r9, r3
 8027ca2:	fa0f f989 	sxth.w	r9, r9
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 8027ca6:	4423      	add	r3, r4
 8027ca8:	b21c      	sxth	r4, r3
 8027caa:	e666      	b.n	802797a <lv_img_event+0x1b2>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8027cac:	9b04      	ldr	r3, [sp, #16]
 8027cae:	443b      	add	r3, r7
 8027cb0:	b29a      	uxth	r2, r3
 8027cb2:	9204      	str	r2, [sp, #16]
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8027cb4:	9e05      	ldr	r6, [sp, #20]
 8027cb6:	443e      	add	r6, r7
 8027cb8:	b2b6      	uxth	r6, r6
                lv_draw_img_dsc_init(&img_dsc);
 8027cba:	a810      	add	r0, sp, #64	; 0x40
 8027cbc:	f7e5 facf 	bl	800d25e <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 8027cc0:	ab10      	add	r3, sp, #64	; 0x40
 8027cc2:	461a      	mov	r2, r3
 8027cc4:	2100      	movs	r1, #0
 8027cc6:	4628      	mov	r0, r5
 8027cc8:	f7df fb94 	bl	80073f4 <lv_obj_init_draw_img_dsc>
                img_dsc.zoom = img->zoom;
 8027ccc:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8027cce:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                img_dsc.angle = img->angle;
 8027cd2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8027cd4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                img_dsc.pivot.x = img->pivot.x;
 8027cd8:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8027cda:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                img_dsc.pivot.y = img->pivot.y;
 8027cde:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8027ce0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                img_dsc.antialias = img->antialias;
 8027ce4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8027ce8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8027cec:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8027cf0:	f363 0200 	bfi	r2, r3, #0, #1
 8027cf4:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
                img_clip_area.x1 = bg_coords.x1 + pleft;
 8027cf8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8027cfc:	4453      	add	r3, sl
 8027cfe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                img_clip_area.y1 = bg_coords.y1 + ptop;
 8027d02:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8027d06:	445b      	add	r3, fp
 8027d08:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                img_clip_area.x2 = bg_coords.x2 - pright;
 8027d0c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8027d10:	9a04      	ldr	r2, [sp, #16]
 8027d12:	1a9b      	subs	r3, r3, r2
 8027d14:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 8027d18:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8027d1c:	1b9b      	subs	r3, r3, r6
 8027d1e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8027d22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027d26:	9305      	str	r3, [sp, #20]
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 8027d28:	aa0c      	add	r2, sp, #48	; 0x30
 8027d2a:	4619      	mov	r1, r3
 8027d2c:	4610      	mov	r0, r2
 8027d2e:	f7f8 fe86 	bl	8020a3e <_lv_area_intersect>
 8027d32:	2800      	cmp	r0, #0
 8027d34:	f43f ae5b 	beq.w	80279ee <lv_img_event+0x226>
            img_max_area.y1 += ptop;
 8027d38:	eb0b 0309 	add.w	r3, fp, r9
 8027d3c:	b29b      	uxth	r3, r3
                draw_ctx->clip_area = &img_clip_area;
 8027d3e:	aa0c      	add	r2, sp, #48	; 0x30
 8027d40:	f8c8 2008 	str.w	r2, [r8, #8]
                lv_coord_t offset_x = img->offset.x % img->w;
 8027d44:	f9b5 1028 	ldrsh.w	r1, [r5, #40]	; 0x28
 8027d48:	f9b5 202c 	ldrsh.w	r2, [r5, #44]	; 0x2c
 8027d4c:	fb91 f0f2 	sdiv	r0, r1, r2
 8027d50:	fb02 1110 	mls	r1, r2, r0, r1
                lv_coord_t offset_y = img->offset.y % img->h;
 8027d54:	f9b5 002e 	ldrsh.w	r0, [r5, #46]	; 0x2e
 8027d58:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
 8027d5c:	fb92 f7f0 	sdiv	r7, r2, r0
 8027d60:	fb00 2217 	mls	r2, r0, r7, r2
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8027d64:	441a      	add	r2, r3
 8027d66:	b297      	uxth	r7, r2
 8027d68:	b212      	sxth	r2, r2
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8027d6a:	b21b      	sxth	r3, r3
 8027d6c:	4293      	cmp	r3, r2
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8027d6e:	bfae      	itee	ge
 8027d70:	f8ad 203a 	strhge.w	r2, [sp, #58]	; 0x3a
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8027d74:	1a3f      	sublt	r7, r7, r0
 8027d76:	f8ad 703a 	strhlt.w	r7, [sp, #58]	; 0x3a
            img_max_area.y2 -= pbottom;
 8027d7a:	1ba4      	subs	r4, r4, r6
 8027d7c:	fa0f f984 	sxth.w	r9, r4
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 8027d80:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 8027d84:	1e53      	subs	r3, r2, #1
 8027d86:	4418      	add	r0, r3
 8027d88:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8027d8c:	4591      	cmp	r9, r2
 8027d8e:	dd43      	ble.n	8027e18 <lv_img_event+0x650>
            img_max_area.x1 += pleft;
 8027d90:	9c03      	ldr	r4, [sp, #12]
 8027d92:	4454      	add	r4, sl
 8027d94:	fa0f fa84 	sxth.w	sl, r4
            img_max_area.x2 -= pright;
 8027d98:	9b07      	ldr	r3, [sp, #28]
 8027d9a:	9a04      	ldr	r2, [sp, #16]
 8027d9c:	1a9f      	subs	r7, r3, r2
 8027d9e:	b23f      	sxth	r7, r7
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 8027da0:	440c      	add	r4, r1
 8027da2:	fa1f fb84 	uxth.w	fp, r4
 8027da6:	b224      	sxth	r4, r4
 8027da8:	e02c      	b.n	8027e04 <lv_img_event+0x63c>
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 8027daa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8027dae:	1e53      	subs	r3, r2, #1
 8027db0:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 8027db2:	440b      	add	r3, r1
 8027db4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8027db8:	4297      	cmp	r7, r2
 8027dba:	dd14      	ble.n	8027de6 <lv_img_event+0x61e>
 8027dbc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 8027dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027dc2:	aa0e      	add	r2, sp, #56	; 0x38
 8027dc4:	a910      	add	r1, sp, #64	; 0x40
 8027dc6:	4640      	mov	r0, r8
 8027dc8:	f7e5 fab0 	bl	800d32c <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8027dcc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8027dd0:	4433      	add	r3, r6
 8027dd2:	b21b      	sxth	r3, r3
 8027dd4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8027dd8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8027ddc:	4432      	add	r2, r6
 8027dde:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8027de2:	429f      	cmp	r7, r3
 8027de4:	dcec      	bgt.n	8027dc0 <lv_img_event+0x5f8>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8027de6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8027dea:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8027dee:	4413      	add	r3, r2
 8027df0:	b21b      	sxth	r3, r3
 8027df2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8027df6:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 8027dfa:	440a      	add	r2, r1
 8027dfc:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8027e00:	4599      	cmp	r9, r3
 8027e02:	dd09      	ble.n	8027e18 <lv_img_event+0x650>
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 8027e04:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8027e08:	45a2      	cmp	sl, r4
 8027e0a:	dace      	bge.n	8027daa <lv_img_event+0x5e2>
 8027e0c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8027e0e:	ebab 0303 	sub.w	r3, fp, r3
 8027e12:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8027e16:	e7c8      	b.n	8027daa <lv_img_event+0x5e2>
                draw_ctx->clip_area = clip_area_ori;
 8027e18:	9b05      	ldr	r3, [sp, #20]
 8027e1a:	f8c8 3008 	str.w	r3, [r8, #8]
 8027e1e:	e5e6      	b.n	80279ee <lv_img_event+0x226>
                lv_draw_label_dsc_init(&label_dsc);
 8027e20:	a810      	add	r0, sp, #64	; 0x40
 8027e22:	f7e5 fbe5 	bl	800d5f0 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 8027e26:	aa10      	add	r2, sp, #64	; 0x40
 8027e28:	2100      	movs	r1, #0
 8027e2a:	4628      	mov	r0, r5
 8027e2c:	f7df fa8b 	bl	8007346 <lv_obj_init_draw_label_dsc>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 8027e30:	2300      	movs	r3, #0
 8027e32:	9300      	str	r3, [sp, #0]
 8027e34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027e36:	4622      	mov	r2, r4
 8027e38:	a910      	add	r1, sp, #64	; 0x40
 8027e3a:	4640      	mov	r0, r8
 8027e3c:	f7e5 fc0c 	bl	800d658 <lv_draw_label>
 8027e40:	e5d5      	b.n	80279ee <lv_img_event+0x226>
    lv_obj_t * obj = lv_event_get_target(e);
 8027e42:	4620      	mov	r0, r4
 8027e44:	f7db ff7e 	bl	8003d44 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 8027e48:	e4cf      	b.n	80277ea <lv_img_event+0x22>
 8027e4a:	bf00      	nop

08027e4c <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 8027e4c:	b510      	push	{r4, lr}
 8027e4e:	4604      	mov	r4, r0
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8027e50:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8027e54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8027e58:	d003      	beq.n	8027e62 <lv_label_dot_tmp_free+0x16>
 8027e5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8027e5c:	b108      	cbz	r0, 8027e62 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(label->dot.tmp_ptr);
 8027e5e:	f7f9 fd21 	bl	80218a4 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 8027e62:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8027e66:	f36f 1386 	bfc	r3, #6, #1
 8027e6a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 8027e6e:	2300      	movs	r3, #0
 8027e70:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8027e72:	bd10      	pop	{r4, pc}

08027e74 <lv_label_revert_dots>:
{
 8027e74:	b538      	push	{r3, r4, r5, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8027e76:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8027e7a:	f003 0307 	and.w	r3, r3, #7
 8027e7e:	2b01      	cmp	r3, #1
 8027e80:	d130      	bne.n	8027ee4 <lv_label_revert_dots+0x70>
 8027e82:	4604      	mov	r4, r0
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8027e84:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8027e86:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8027e8a:	d02b      	beq.n	8027ee4 <lv_label_revert_dots+0x70>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8027e8c:	4b17      	ldr	r3, [pc, #92]	; (8027eec <lv_label_revert_dots+0x78>)
 8027e8e:	681b      	ldr	r3, [r3, #0]
 8027e90:	3903      	subs	r1, #3
 8027e92:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027e94:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 8027e96:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8027e9a:	f013 0f40 	tst.w	r3, #64	; 0x40
        return label->dot.tmp_ptr;
 8027e9e:	bf14      	ite	ne
 8027ea0:	6aa5      	ldrne	r5, [r4, #40]	; 0x28
        return label->dot.tmp;
 8027ea2:	f104 0528 	addeq.w	r5, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 8027ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027ea8:	eb03 0c00 	add.w	ip, r3, r0
 8027eac:	5c1b      	ldrb	r3, [r3, r0]
 8027eae:	b1d3      	cbz	r3, 8027ee6 <lv_label_revert_dots+0x72>
    uint8_t i      = 0;
 8027eb0:	2300      	movs	r3, #0
    while(label->text[byte_i + i] != '\0') {
 8027eb2:	469e      	mov	lr, r3
        label->text[byte_i + i] = dot_tmp[i];
 8027eb4:	f815 200e 	ldrb.w	r2, [r5, lr]
 8027eb8:	f88c 2000 	strb.w	r2, [ip]
        i++;
 8027ebc:	3301      	adds	r3, #1
 8027ebe:	b2db      	uxtb	r3, r3
    while(label->text[byte_i + i] != '\0') {
 8027ec0:	469e      	mov	lr, r3
 8027ec2:	181a      	adds	r2, r3, r0
 8027ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8027ec6:	eb01 0c02 	add.w	ip, r1, r2
 8027eca:	5c8a      	ldrb	r2, [r1, r2]
 8027ecc:	2a00      	cmp	r2, #0
 8027ece:	d1f1      	bne.n	8027eb4 <lv_label_revert_dots+0x40>
    label->text[byte_i + i] = dot_tmp[i];
 8027ed0:	f815 300e 	ldrb.w	r3, [r5, lr]
 8027ed4:	f88c 3000 	strb.w	r3, [ip]
    lv_label_dot_tmp_free(obj);
 8027ed8:	4620      	mov	r0, r4
 8027eda:	f7ff ffb7 	bl	8027e4c <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 8027ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8027ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8027ee4:	bd38      	pop	{r3, r4, r5, pc}
    while(label->text[byte_i + i] != '\0') {
 8027ee6:	f04f 0e00 	mov.w	lr, #0
 8027eea:	e7f1      	b.n	8027ed0 <lv_label_revert_dots+0x5c>
 8027eec:	20000754 	.word	0x20000754

08027ef0 <lv_label_destructor>:
{
 8027ef0:	b510      	push	{r4, lr}
 8027ef2:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 8027ef4:	4608      	mov	r0, r1
 8027ef6:	f7ff ffa9 	bl	8027e4c <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8027efa:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8027efe:	f013 0f08 	tst.w	r3, #8
 8027f02:	d002      	beq.n	8027f0a <lv_label_destructor+0x1a>
    label->text = NULL;
 8027f04:	2300      	movs	r3, #0
 8027f06:	6263      	str	r3, [r4, #36]	; 0x24
}
 8027f08:	bd10      	pop	{r4, pc}
    if(!label->static_txt) lv_mem_free(label->text);
 8027f0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027f0c:	f7f9 fcca 	bl	80218a4 <lv_mem_free>
 8027f10:	e7f8      	b.n	8027f04 <lv_label_destructor+0x14>

08027f12 <set_ofs_y_anim>:
    label->offset.x    = v;
    lv_obj_invalidate(obj);
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
 8027f12:	b508      	push	{r3, lr}
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 8027f14:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 8027f18:	f7e0 f82e 	bl	8007f78 <lv_obj_invalidate>
}
 8027f1c:	bd08      	pop	{r3, pc}

08027f1e <set_ofs_x_anim>:
{
 8027f1e:	b508      	push	{r3, lr}
    label->offset.x    = v;
 8027f20:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 8027f24:	f7e0 f828 	bl	8007f78 <lv_obj_invalidate>
}
 8027f28:	bd08      	pop	{r3, pc}
	...

08027f2c <lv_label_create>:
{
 8027f2c:	b510      	push	{r4, lr}
 8027f2e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8027f30:	4803      	ldr	r0, [pc, #12]	; (8027f40 <lv_label_create+0x14>)
 8027f32:	f7de ffad 	bl	8006e90 <lv_obj_class_create_obj>
 8027f36:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8027f38:	f7df f857 	bl	8006fea <lv_obj_class_init_obj>
}
 8027f3c:	4620      	mov	r0, r4
 8027f3e:	bd10      	pop	{r4, pc}
 8027f40:	08033014 	.word	0x08033014

08027f44 <lv_label_set_text_sel_start>:
{
 8027f44:	b508      	push	{r3, lr}
    label->sel_start   = index;
 8027f46:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 8027f48:	f7e0 f816 	bl	8007f78 <lv_obj_invalidate>
}
 8027f4c:	bd08      	pop	{r3, pc}

08027f4e <lv_label_set_text_sel_end>:
{
 8027f4e:	b508      	push	{r3, lr}
    label->sel_end     = index;
 8027f50:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 8027f52:	f7e0 f811 	bl	8007f78 <lv_obj_invalidate>
}
 8027f56:	bd08      	pop	{r3, pc}

08027f58 <lv_label_get_text>:
}
 8027f58:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027f5a:	4770      	bx	lr

08027f5c <lv_label_get_recolor>:
    return label->recolor == 0 ? false : true;
 8027f5c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
 8027f60:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8027f64:	4770      	bx	lr
	...

08027f68 <lv_label_get_letter_pos>:
{
 8027f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f6c:	b08d      	sub	sp, #52	; 0x34
 8027f6e:	9104      	str	r1, [sp, #16]
    LV_ASSERT_NULL(pos);
 8027f70:	9203      	str	r2, [sp, #12]
 8027f72:	b1a2      	cbz	r2, 8027f9e <lv_label_get_letter_pos+0x36>
 8027f74:	4604      	mov	r4, r0
    return label->text;
 8027f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 8027f78:	4632      	mov	r2, r6
 8027f7a:	2100      	movs	r1, #0
 8027f7c:	f7e3 fab4 	bl	800b4e8 <lv_obj_calculate_style_text_align>
 8027f80:	9005      	str	r0, [sp, #20]
    if(txt[0] == '\0') {
 8027f82:	7833      	ldrb	r3, [r6, #0]
 8027f84:	b9db      	cbnz	r3, 8027fbe <lv_label_get_letter_pos+0x56>
        pos->y = 0;
 8027f86:	9a03      	ldr	r2, [sp, #12]
 8027f88:	8053      	strh	r3, [r2, #2]
        switch(align) {
 8027f8a:	2802      	cmp	r0, #2
 8027f8c:	d00e      	beq.n	8027fac <lv_label_get_letter_pos+0x44>
 8027f8e:	2803      	cmp	r0, #3
 8027f90:	d006      	beq.n	8027fa0 <lv_label_get_letter_pos+0x38>
 8027f92:	2801      	cmp	r0, #1
 8027f94:	f040 80a3 	bne.w	80280de <lv_label_get_letter_pos+0x176>
                pos->x = 0;
 8027f98:	2300      	movs	r3, #0
 8027f9a:	8013      	strh	r3, [r2, #0]
                break;
 8027f9c:	e09f      	b.n	80280de <lv_label_get_letter_pos+0x176>
    LV_ASSERT_NULL(pos);
 8027f9e:	e7fe      	b.n	8027f9e <lv_label_get_letter_pos+0x36>
                pos->x = lv_obj_get_content_width(obj);
 8027fa0:	4620      	mov	r0, r4
 8027fa2:	f7df fdae 	bl	8007b02 <lv_obj_get_content_width>
 8027fa6:	9b03      	ldr	r3, [sp, #12]
 8027fa8:	8018      	strh	r0, [r3, #0]
                break;
 8027faa:	e098      	b.n	80280de <lv_label_get_letter_pos+0x176>
                pos->x = lv_obj_get_content_width(obj) / 2;
 8027fac:	4620      	mov	r0, r4
 8027fae:	f7df fda8 	bl	8007b02 <lv_obj_get_content_width>
 8027fb2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8027fb6:	1043      	asrs	r3, r0, #1
 8027fb8:	9a03      	ldr	r2, [sp, #12]
 8027fba:	8013      	strh	r3, [r2, #0]
                break;
 8027fbc:	e08f      	b.n	80280de <lv_label_get_letter_pos+0x176>
    lv_obj_get_content_coords(obj, &txt_coords);
 8027fbe:	a90a      	add	r1, sp, #40	; 0x28
 8027fc0:	4620      	mov	r0, r4
 8027fc2:	f7df fdd8 	bl	8007b76 <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8027fc6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8027fca:	3301      	adds	r3, #1
 8027fcc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8027fd0:	1a9b      	subs	r3, r3, r2
 8027fd2:	b21b      	sxth	r3, r3
 8027fd4:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027fd6:	2257      	movs	r2, #87	; 0x57
 8027fd8:	2100      	movs	r1, #0
 8027fda:	4620      	mov	r0, r4
 8027fdc:	f7e2 fc04 	bl	800a7e8 <lv_obj_get_style_prop>
 8027fe0:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8027fe2:	2259      	movs	r2, #89	; 0x59
 8027fe4:	2100      	movs	r1, #0
 8027fe6:	4620      	mov	r0, r4
 8027fe8:	f7e2 fbfe 	bl	800a7e8 <lv_obj_get_style_prop>
 8027fec:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8027fee:	2258      	movs	r2, #88	; 0x58
 8027ff0:	2100      	movs	r1, #0
 8027ff2:	4620      	mov	r0, r4
 8027ff4:	f7e2 fbf8 	bl	800a7e8 <lv_obj_get_style_prop>
 8027ff8:	9009      	str	r0, [sp, #36]	; 0x24
    return (lv_coord_t)v.num;
 8027ffa:	b203      	sxth	r3, r0
 8027ffc:	9302      	str	r3, [sp, #8]
 8027ffe:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 8028002:	9307      	str	r3, [sp, #28]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8028004:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 8028008:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 802800c:	f013 0f20 	tst.w	r3, #32
 8028010:	bf18      	it	ne
 8028012:	f049 0902 	orrne.w	r9, r9, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8028016:	2201      	movs	r2, #1
 8028018:	2100      	movs	r1, #0
 802801a:	4620      	mov	r0, r4
 802801c:	f7e2 fbe4 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028020:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028022:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8028026:	4293      	cmp	r3, r2
 8028028:	d024      	beq.n	8028074 <lv_label_get_letter_pos+0x10c>
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 802802a:	4b4d      	ldr	r3, [pc, #308]	; (8028160 <lv_label_get_letter_pos+0x1f8>)
 802802c:	681b      	ldr	r3, [r3, #0]
 802802e:	9904      	ldr	r1, [sp, #16]
 8028030:	4630      	mov	r0, r6
 8028032:	4798      	blx	r3
 8028034:	4680      	mov	r8, r0
    while(txt[new_line_start] != '\0') {
 8028036:	7833      	ldrb	r3, [r6, #0]
 8028038:	b323      	cbz	r3, 8028084 <lv_label_get_letter_pos+0x11c>
 802803a:	4630      	mov	r0, r6
    lv_coord_t y             = 0;
 802803c:	2500      	movs	r5, #0
    uint32_t line_start      = 0;
 802803e:	462f      	mov	r7, r5
        y += letter_height + line_space;
 8028040:	9b07      	ldr	r3, [sp, #28]
 8028042:	9a06      	ldr	r2, [sp, #24]
 8028044:	eb03 0b02 	add.w	fp, r3, r2
 8028048:	464c      	mov	r4, r9
 802804a:	f8dd 9020 	ldr.w	r9, [sp, #32]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 802804e:	9401      	str	r4, [sp, #4]
 8028050:	2300      	movs	r3, #0
 8028052:	9300      	str	r3, [sp, #0]
 8028054:	464b      	mov	r3, r9
 8028056:	9a02      	ldr	r2, [sp, #8]
 8028058:	4651      	mov	r1, sl
 802805a:	f7fb fd1b 	bl	8023a94 <_lv_txt_get_next_line>
 802805e:	19c3      	adds	r3, r0, r7
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 8028060:	4598      	cmp	r8, r3
 8028062:	d313      	bcc.n	802808c <lv_label_get_letter_pos+0x124>
 8028064:	18f0      	adds	r0, r6, r3
 8028066:	5cf2      	ldrb	r2, [r6, r3]
 8028068:	2a00      	cmp	r2, #0
 802806a:	d03b      	beq.n	80280e4 <lv_label_get_letter_pos+0x17c>
        y += letter_height + line_space;
 802806c:	445d      	add	r5, fp
 802806e:	b22d      	sxth	r5, r5
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028070:	461f      	mov	r7, r3
 8028072:	e7ec      	b.n	802804e <lv_label_get_letter_pos+0xe6>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028074:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8028078:	f013 0f04 	tst.w	r3, #4
 802807c:	bf08      	it	eq
 802807e:	f049 0904 	orreq.w	r9, r9, #4
 8028082:	e7d2      	b.n	802802a <lv_label_get_letter_pos+0xc2>
    lv_coord_t y             = 0;
 8028084:	2500      	movs	r5, #0
    uint32_t line_start      = 0;
 8028086:	462f      	mov	r7, r5
 8028088:	462c      	mov	r4, r5
 802808a:	e001      	b.n	8028090 <lv_label_get_letter_pos+0x128>
 802808c:	46a1      	mov	r9, r4
 802808e:	461c      	mov	r4, r3
    if(byte_id > 0) {
 8028090:	f1b8 0f00 	cmp.w	r8, #0
 8028094:	d007      	beq.n	80280a6 <lv_label_get_letter_pos+0x13e>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 8028096:	eb06 0308 	add.w	r3, r6, r8
 802809a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802809e:	2b0a      	cmp	r3, #10
 80280a0:	d023      	beq.n	80280ea <lv_label_get_letter_pos+0x182>
 80280a2:	2b0d      	cmp	r3, #13
 80280a4:	d021      	beq.n	80280ea <lv_label_get_letter_pos+0x182>
    bidi_txt = &txt[line_start];
 80280a6:	443e      	add	r6, r7
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 80280a8:	f8cd 9000 	str.w	r9, [sp]
 80280ac:	9b02      	ldr	r3, [sp, #8]
 80280ae:	4652      	mov	r2, sl
 80280b0:	eba8 0107 	sub.w	r1, r8, r7
 80280b4:	4630      	mov	r0, r6
 80280b6:	f7fb fec1 	bl	8023e3c <lv_txt_get_width>
 80280ba:	4680      	mov	r8, r0
    if(char_id != line_start) x += letter_space;
 80280bc:	9b04      	ldr	r3, [sp, #16]
 80280be:	429f      	cmp	r7, r3
 80280c0:	d003      	beq.n	80280ca <lv_label_get_letter_pos+0x162>
 80280c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280c4:	4498      	add	r8, r3
 80280c6:	fa0f f888 	sxth.w	r8, r8
    if(align == LV_TEXT_ALIGN_CENTER) {
 80280ca:	9b05      	ldr	r3, [sp, #20]
 80280cc:	2b02      	cmp	r3, #2
 80280ce:	d017      	beq.n	8028100 <lv_label_get_letter_pos+0x198>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80280d0:	9b05      	ldr	r3, [sp, #20]
 80280d2:	2b03      	cmp	r3, #3
 80280d4:	d030      	beq.n	8028138 <lv_label_get_letter_pos+0x1d0>
    pos->x = x;
 80280d6:	9b03      	ldr	r3, [sp, #12]
 80280d8:	f8a3 8000 	strh.w	r8, [r3]
    pos->y = y;
 80280dc:	805d      	strh	r5, [r3, #2]
}
 80280de:	b00d      	add	sp, #52	; 0x34
 80280e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80280e4:	46a1      	mov	r9, r4
 80280e6:	461c      	mov	r4, r3
 80280e8:	e7d2      	b.n	8028090 <lv_label_get_letter_pos+0x128>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 80280ea:	f816 3008 	ldrb.w	r3, [r6, r8]
 80280ee:	2b00      	cmp	r3, #0
 80280f0:	d1d9      	bne.n	80280a6 <lv_label_get_letter_pos+0x13e>
            y += letter_height + line_space;
 80280f2:	9b07      	ldr	r3, [sp, #28]
 80280f4:	9a06      	ldr	r2, [sp, #24]
 80280f6:	4413      	add	r3, r2
 80280f8:	441d      	add	r5, r3
 80280fa:	b22d      	sxth	r5, r5
            line_start = byte_id;
 80280fc:	4647      	mov	r7, r8
 80280fe:	e7d2      	b.n	80280a6 <lv_label_get_letter_pos+0x13e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8028100:	f8cd 9000 	str.w	r9, [sp]
 8028104:	9b02      	ldr	r3, [sp, #8]
 8028106:	4652      	mov	r2, sl
 8028108:	1be1      	subs	r1, r4, r7
 802810a:	4630      	mov	r0, r6
 802810c:	f7fb fe96 	bl	8023e3c <lv_txt_get_width>
 8028110:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8028114:	3301      	adds	r3, #1
 8028116:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802811a:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 802811c:	b21a      	sxth	r2, r3
 802811e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8028122:	441a      	add	r2, r3
 8028124:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8028128:	f340 034f 	sbfx	r3, r0, #1, #16
 802812c:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8028130:	4498      	add	r8, r3
 8028132:	fa0f f888 	sxth.w	r8, r8
 8028136:	e7ce      	b.n	80280d6 <lv_label_get_letter_pos+0x16e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8028138:	f8cd 9000 	str.w	r9, [sp]
 802813c:	9b02      	ldr	r3, [sp, #8]
 802813e:	4652      	mov	r2, sl
 8028140:	1be1      	subs	r1, r4, r7
 8028142:	4630      	mov	r0, r6
 8028144:	f7fb fe7a 	bl	8023e3c <lv_txt_get_width>
 8028148:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 802814c:	3301      	adds	r3, #1
 802814e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8028152:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 8028154:	b21b      	sxth	r3, r3
 8028156:	1a1b      	subs	r3, r3, r0
 8028158:	4498      	add	r8, r3
 802815a:	fa0f f888 	sxth.w	r8, r8
 802815e:	e7ba      	b.n	80280d6 <lv_label_get_letter_pos+0x16e>
 8028160:	20000754 	.word	0x20000754

08028164 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 8028164:	2900      	cmp	r1, #0
 8028166:	f000 8096 	beq.w	8028296 <lv_label_get_letter_on+0x132>
{
 802816a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802816e:	b091      	sub	sp, #68	; 0x44
 8028170:	4604      	mov	r4, r0
 8028172:	460d      	mov	r5, r1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8028174:	f9b1 3000 	ldrsh.w	r3, [r1]
 8028178:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802817a:	2212      	movs	r2, #18
 802817c:	2100      	movs	r1, #0
 802817e:	f7e2 fb33 	bl	800a7e8 <lv_obj_get_style_prop>
 8028182:	9009      	str	r0, [sp, #36]	; 0x24
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8028184:	886d      	ldrh	r5, [r5, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8028186:	2210      	movs	r2, #16
 8028188:	2100      	movs	r1, #0
 802818a:	4620      	mov	r0, r4
 802818c:	f7e2 fb2c 	bl	800a7e8 <lv_obj_get_style_prop>
 8028190:	1a2d      	subs	r5, r5, r0
 8028192:	fa0f f985 	sxth.w	r9, r5
    lv_obj_get_content_coords(obj, &txt_coords);
 8028196:	a90e      	add	r1, sp, #56	; 0x38
 8028198:	4620      	mov	r0, r4
 802819a:	f7df fcec 	bl	8007b76 <lv_obj_get_content_coords>
    return label->text;
 802819e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80281a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80281a4:	3301      	adds	r3, #1
 80281a6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80281aa:	1a9b      	subs	r3, r3, r2
 80281ac:	b21b      	sxth	r3, r3
 80281ae:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80281b0:	2257      	movs	r2, #87	; 0x57
 80281b2:	2100      	movs	r1, #0
 80281b4:	4620      	mov	r0, r4
 80281b6:	f7e2 fb17 	bl	800a7e8 <lv_obj_get_style_prop>
 80281ba:	4605      	mov	r5, r0
 80281bc:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80281be:	2259      	movs	r2, #89	; 0x59
 80281c0:	2100      	movs	r1, #0
 80281c2:	4620      	mov	r0, r4
 80281c4:	f7e2 fb10 	bl	800a7e8 <lv_obj_get_style_prop>
 80281c8:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80281ca:	2258      	movs	r2, #88	; 0x58
 80281cc:	2100      	movs	r1, #0
 80281ce:	4620      	mov	r0, r4
 80281d0:	f7e2 fb0a 	bl	800a7e8 <lv_obj_get_style_prop>
 80281d4:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)v.num;
 80281d6:	b203      	sxth	r3, r0
 80281d8:	9303      	str	r3, [sp, #12]
 80281da:	f9b5 b008 	ldrsh.w	fp, [r5, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80281de:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 80281e2:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80281e6:	9206      	str	r2, [sp, #24]
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80281e8:	f013 0f20 	tst.w	r3, #32
 80281ec:	bf1c      	itt	ne
 80281ee:	f042 0302 	orrne.w	r3, r2, #2
 80281f2:	9306      	strne	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80281f4:	2201      	movs	r2, #1
 80281f6:	2100      	movs	r1, #0
 80281f8:	4620      	mov	r0, r4
 80281fa:	f7e2 faf5 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80281fe:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028200:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8028204:	4293      	cmp	r3, r2
 8028206:	d047      	beq.n	8028298 <lv_label_get_letter_on+0x134>
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8028208:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802820a:	2100      	movs	r1, #0
 802820c:	4620      	mov	r0, r4
 802820e:	f7e3 f96b 	bl	800b4e8 <lv_obj_calculate_style_text_align>
 8028212:	9007      	str	r0, [sp, #28]
    while(txt[line_start] != '\0') {
 8028214:	7833      	ldrb	r3, [r6, #0]
 8028216:	2b00      	cmp	r3, #0
 8028218:	d056      	beq.n	80282c8 <lv_label_get_letter_on+0x164>
 802821a:	4635      	mov	r5, r6
    lv_coord_t y             = 0;
 802821c:	f04f 0800 	mov.w	r8, #0
    uint32_t line_start      = 0;
 8028220:	4644      	mov	r4, r8
        y += letter_height + line_space;
 8028222:	44da      	add	sl, fp
 8028224:	9f06      	ldr	r7, [sp, #24]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028226:	9701      	str	r7, [sp, #4]
 8028228:	2300      	movs	r3, #0
 802822a:	9300      	str	r3, [sp, #0]
 802822c:	9b04      	ldr	r3, [sp, #16]
 802822e:	9a03      	ldr	r2, [sp, #12]
 8028230:	9902      	ldr	r1, [sp, #8]
 8028232:	4628      	mov	r0, r5
 8028234:	f7fb fc2e 	bl	8023a94 <_lv_txt_get_next_line>
 8028238:	4622      	mov	r2, r4
 802823a:	4404      	add	r4, r0
        if(pos.y <= y + letter_height) {
 802823c:	eb08 030b 	add.w	r3, r8, fp
 8028240:	4599      	cmp	r9, r3
 8028242:	dd33      	ble.n	80282ac <lv_label_get_letter_on+0x148>
        y += letter_height + line_space;
 8028244:	44d0      	add	r8, sl
 8028246:	fa0f f888 	sxth.w	r8, r8
    while(txt[line_start] != '\0') {
 802824a:	1935      	adds	r5, r6, r4
 802824c:	5d33      	ldrb	r3, [r6, r4]
 802824e:	2b00      	cmp	r3, #0
 8028250:	d1e9      	bne.n	8028226 <lv_label_get_letter_on+0xc2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028252:	4627      	mov	r7, r4
    if(align == LV_TEXT_ALIGN_CENTER) {
 8028254:	9b07      	ldr	r3, [sp, #28]
 8028256:	2b02      	cmp	r3, #2
 8028258:	d03a      	beq.n	80282d0 <lv_label_get_letter_on+0x16c>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 802825a:	9b07      	ldr	r3, [sp, #28]
 802825c:	2b03      	cmp	r3, #3
 802825e:	d052      	beq.n	8028306 <lv_label_get_letter_on+0x1a2>
    lv_coord_t x = 0;
 8028260:	f04f 0800 	mov.w	r8, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8028264:	2300      	movs	r3, #0
 8028266:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    uint32_t i = 0;
 802826a:	930c      	str	r3, [sp, #48]	; 0x30
    if(new_line_start > 0) {
 802826c:	2c00      	cmp	r4, #0
 802826e:	f000 808c 	beq.w	802838a <lv_label_get_letter_on+0x226>
        while(i + line_start < new_line_start) {
 8028272:	42bc      	cmp	r4, r7
 8028274:	f240 8089 	bls.w	802838a <lv_label_get_letter_on+0x226>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8028278:	9b08      	ldr	r3, [sp, #32]
 802827a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802827c:	eba3 0b02 	sub.w	fp, r3, r2
 8028280:	fa0f fb8b 	sxth.w	fp, fp
    uint32_t i_act = i;
 8028284:	f04f 0a00 	mov.w	sl, #0
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8028288:	9b06      	ldr	r3, [sp, #24]
 802828a:	f003 0901 	and.w	r9, r3, #1
 802828e:	464b      	mov	r3, r9
 8028290:	46b1      	mov	r9, r6
 8028292:	461e      	mov	r6, r3
 8028294:	e065      	b.n	8028362 <lv_label_get_letter_on+0x1fe>
    LV_ASSERT_NULL(pos_in);
 8028296:	e7fe      	b.n	8028296 <lv_label_get_letter_on+0x132>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028298:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 802829c:	f013 0f04 	tst.w	r3, #4
 80282a0:	d1b2      	bne.n	8028208 <lv_label_get_letter_on+0xa4>
 80282a2:	9b06      	ldr	r3, [sp, #24]
 80282a4:	f043 0304 	orr.w	r3, r3, #4
 80282a8:	9306      	str	r3, [sp, #24]
 80282aa:	e7ad      	b.n	8028208 <lv_label_get_letter_on+0xa4>
            uint32_t tmp = new_line_start;
 80282ac:	4617      	mov	r7, r2
 80282ae:	940b      	str	r4, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80282b0:	4b3f      	ldr	r3, [pc, #252]	; (80283b0 <lv_label_get_letter_on+0x24c>)
 80282b2:	681b      	ldr	r3, [r3, #0]
 80282b4:	a90b      	add	r1, sp, #44	; 0x2c
 80282b6:	4630      	mov	r0, r6
 80282b8:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80282ba:	280a      	cmp	r0, #10
 80282bc:	d0ca      	beq.n	8028254 <lv_label_get_letter_on+0xf0>
 80282be:	5d33      	ldrb	r3, [r6, r4]
 80282c0:	2b00      	cmp	r3, #0
 80282c2:	d1c7      	bne.n	8028254 <lv_label_get_letter_on+0xf0>
 80282c4:	3401      	adds	r4, #1
            break;
 80282c6:	e7c5      	b.n	8028254 <lv_label_get_letter_on+0xf0>
    while(txt[line_start] != '\0') {
 80282c8:	4635      	mov	r5, r6
    uint32_t line_start      = 0;
 80282ca:	2700      	movs	r7, #0
 80282cc:	463c      	mov	r4, r7
 80282ce:	e7c1      	b.n	8028254 <lv_label_get_letter_on+0xf0>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80282d0:	9b06      	ldr	r3, [sp, #24]
 80282d2:	9300      	str	r3, [sp, #0]
 80282d4:	9b03      	ldr	r3, [sp, #12]
 80282d6:	9a02      	ldr	r2, [sp, #8]
 80282d8:	1be1      	subs	r1, r4, r7
 80282da:	4628      	mov	r0, r5
 80282dc:	f7fb fdae 	bl	8023e3c <lv_txt_get_width>
 80282e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80282e4:	3301      	adds	r3, #1
 80282e6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80282ea:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80282ec:	b21a      	sxth	r2, r3
 80282ee:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80282f2:	4413      	add	r3, r2
 80282f4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80282f8:	ea4f 0860 	mov.w	r8, r0, asr #1
 80282fc:	ebc8 0363 	rsb	r3, r8, r3, asr #1
 8028300:	fa0f f883 	sxth.w	r8, r3
 8028304:	e7ae      	b.n	8028264 <lv_label_get_letter_on+0x100>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8028306:	9b06      	ldr	r3, [sp, #24]
 8028308:	9300      	str	r3, [sp, #0]
 802830a:	9b03      	ldr	r3, [sp, #12]
 802830c:	9a02      	ldr	r2, [sp, #8]
 802830e:	1be1      	subs	r1, r4, r7
 8028310:	4628      	mov	r0, r5
 8028312:	f7fb fd93 	bl	8023e3c <lv_txt_get_width>
 8028316:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 802831a:	3301      	adds	r3, #1
 802831c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8028320:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 8028322:	1a1b      	subs	r3, r3, r0
 8028324:	fa0f f883 	sxth.w	r8, r3
 8028328:	e79c      	b.n	8028264 <lv_label_get_letter_on+0x100>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 802832a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802832c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802832e:	9802      	ldr	r0, [sp, #8]
 8028330:	f7f7 fdf3 	bl	801ff1a <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 8028334:	b203      	sxth	r3, r0
 8028336:	4443      	add	r3, r8
 8028338:	459b      	cmp	fp, r3
 802833a:	db23      	blt.n	8028384 <lv_label_get_letter_on+0x220>
 802833c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802833e:	19da      	adds	r2, r3, r7
 8028340:	42a2      	cmp	r2, r4
 8028342:	d01f      	beq.n	8028384 <lv_label_get_letter_on+0x220>
 8028344:	eb09 0207 	add.w	r2, r9, r7
 8028348:	f812 200a 	ldrb.w	r2, [r2, sl]
 802834c:	b1d2      	cbz	r2, 8028384 <lv_label_get_letter_on+0x220>
            x += letter_space;
 802834e:	9a05      	ldr	r2, [sp, #20]
 8028350:	4490      	add	r8, r2
 8028352:	4440      	add	r0, r8
 8028354:	fa0f f880 	sxth.w	r8, r0
            i_act = i;
 8028358:	469a      	mov	sl, r3
        while(i + line_start < new_line_start) {
 802835a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802835c:	443b      	add	r3, r7
 802835e:	42a3      	cmp	r3, r4
 8028360:	d224      	bcs.n	80283ac <lv_label_get_letter_on+0x248>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8028362:	ab0c      	add	r3, sp, #48	; 0x30
 8028364:	aa0b      	add	r2, sp, #44	; 0x2c
 8028366:	a90a      	add	r1, sp, #40	; 0x28
 8028368:	4628      	mov	r0, r5
 802836a:	f7fb fd51 	bl	8023e10 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802836e:	2e00      	cmp	r6, #0
 8028370:	d0db      	beq.n	802832a <lv_label_get_letter_on+0x1c6>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8028372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028374:	5ce9      	ldrb	r1, [r5, r3]
 8028376:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 802837a:	f7fb fb67 	bl	8023a4c <_lv_txt_is_cmd>
 802837e:	2800      	cmp	r0, #0
 8028380:	d0d3      	beq.n	802832a <lv_label_get_letter_on+0x1c6>
 8028382:	e7ea      	b.n	802835a <lv_label_get_letter_on+0x1f6>
                i = i_act;
 8028384:	464e      	mov	r6, r9
 8028386:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 802838a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80283b4 <lv_label_get_letter_on+0x250>
 802838e:	f8d8 3000 	ldr.w	r3, [r8]
 8028392:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028394:	4628      	mov	r0, r5
 8028396:	4798      	blx	r3
 8028398:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 802839a:	f8d8 3000 	ldr.w	r3, [r8]
 802839e:	4639      	mov	r1, r7
 80283a0:	4630      	mov	r0, r6
 80283a2:	4798      	blx	r3
}
 80283a4:	4420      	add	r0, r4
 80283a6:	b011      	add	sp, #68	; 0x44
 80283a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283ac:	464e      	mov	r6, r9
 80283ae:	e7ec      	b.n	802838a <lv_label_get_letter_on+0x226>
 80283b0:	20000760 	.word	0x20000760
 80283b4:	20000758 	.word	0x20000758

080283b8 <lv_label_refr_text>:
    if(label->text == NULL) return;
 80283b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	f000 8289 	beq.w	80288d2 <lv_label_refr_text+0x51a>
{
 80283c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283c4:	b09d      	sub	sp, #116	; 0x74
 80283c6:	4604      	mov	r4, r0
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 80283c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80283cc:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 80283ce:	a91a      	add	r1, sp, #104	; 0x68
 80283d0:	f7df fbd1 	bl	8007b76 <lv_obj_get_content_coords>
 80283d4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80283d8:	3501      	adds	r5, #1
 80283da:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80283de:	1aed      	subs	r5, r5, r3
 80283e0:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80283e2:	2257      	movs	r2, #87	; 0x57
 80283e4:	2100      	movs	r1, #0
 80283e6:	4620      	mov	r0, r4
 80283e8:	f7e2 f9fe 	bl	800a7e8 <lv_obj_get_style_prop>
 80283ec:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80283ee:	2259      	movs	r2, #89	; 0x59
 80283f0:	2100      	movs	r1, #0
 80283f2:	4620      	mov	r0, r4
 80283f4:	f7e2 f9f8 	bl	800a7e8 <lv_obj_get_style_prop>
 80283f8:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 80283fa:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80283fe:	2258      	movs	r2, #88	; 0x58
 8028400:	2100      	movs	r1, #0
 8028402:	4620      	mov	r0, r4
 8028404:	f7e2 f9f0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028408:	b207      	sxth	r7, r0
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 802840a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 802840e:	f3c3 1a00 	ubfx	sl, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8028412:	f013 0f20 	tst.w	r3, #32
 8028416:	bf18      	it	ne
 8028418:	f04a 0a02 	orrne.w	sl, sl, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 802841c:	2201      	movs	r2, #1
 802841e:	2100      	movs	r1, #0
 8028420:	4620      	mov	r0, r4
 8028422:	f7e2 f9e1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028426:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028428:	f242 73d1 	movw	r3, #10193	; 0x27d1
 802842c:	4298      	cmp	r0, r3
 802842e:	d01f      	beq.n	8028470 <lv_label_refr_text+0xb8>
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8028430:	f8cd a008 	str.w	sl, [sp, #8]
 8028434:	9501      	str	r5, [sp, #4]
 8028436:	f8cd 9000 	str.w	r9, [sp]
 802843a:	463b      	mov	r3, r7
 802843c:	4632      	mov	r2, r6
 802843e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8028440:	a819      	add	r0, sp, #100	; 0x64
 8028442:	f7fb fd4c 	bl	8023ede <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 8028446:	4620      	mov	r0, r4
 8028448:	f7df fbec 	bl	8007c24 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 802844c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8028450:	f001 0107 	and.w	r1, r1, #7
 8028454:	2902      	cmp	r1, #2
 8028456:	d013      	beq.n	8028480 <lv_label_refr_text+0xc8>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8028458:	2903      	cmp	r1, #3
 802845a:	f000 80be 	beq.w	80285da <lv_label_refr_text+0x222>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 802845e:	2901      	cmp	r1, #1
 8028460:	f000 815c 	beq.w	802871c <lv_label_refr_text+0x364>
    lv_obj_invalidate(obj);
 8028464:	4620      	mov	r0, r4
 8028466:	f7df fd87 	bl	8007f78 <lv_obj_invalidate>
}
 802846a:	b01d      	add	sp, #116	; 0x74
 802846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028470:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8028474:	f013 0f04 	tst.w	r3, #4
 8028478:	bf08      	it	eq
 802847a:	f04a 0a04 	orreq.w	sl, sl, #4
 802847e:	e7d7      	b.n	8028430 <lv_label_refr_text+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8028480:	2265      	movs	r2, #101	; 0x65
 8028482:	2100      	movs	r1, #0
 8028484:	4620      	mov	r0, r4
 8028486:	f7e2 f9af 	bl	800a7e8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 802848a:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 802848c:	2d00      	cmp	r5, #0
 802848e:	d04d      	beq.n	802852c <lv_label_refr_text+0x174>
        lv_anim_init(&a);
 8028490:	a808      	add	r0, sp, #32
 8028492:	f7f8 f971 	bl	8020778 <lv_anim_init>
    a->var = var;
 8028496:	9408      	str	r4, [sp, #32]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 8028498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802849c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    a->playback_delay = delay;
 80284a0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80284a4:	9315      	str	r3, [sp, #84]	; 0x54
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 80284a6:	9317      	str	r3, [sp, #92]	; 0x5c
        if(size.x > lv_area_get_width(&txt_coords)) {
 80284a8:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80284ac:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80284b0:	3301      	adds	r3, #1
 80284b2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 80284b6:	1a5b      	subs	r3, r3, r1
 80284b8:	b21b      	sxth	r3, r3
 80284ba:	429a      	cmp	r2, r3
 80284bc:	dd46      	ble.n	802854c <lv_label_refr_text+0x194>
    a->start_value = start;
 80284be:	2100      	movs	r1, #0
 80284c0:	9110      	str	r1, [sp, #64]	; 0x40
    a->current_value = start;
 80284c2:	9111      	str	r1, [sp, #68]	; 0x44
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 80284c4:	1a9b      	subs	r3, r3, r2
    a->end_value = end;
 80284c6:	9312      	str	r3, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 80284c8:	49a5      	ldr	r1, [pc, #660]	; (8028760 <lv_label_refr_text+0x3a8>)
 80284ca:	9109      	str	r1, [sp, #36]	; 0x24
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 80284cc:	4620      	mov	r0, r4
 80284ce:	f7f8 f9e9 	bl	80208a4 <lv_anim_get>
            if(anim_cur) {
 80284d2:	2800      	cmp	r0, #0
 80284d4:	d037      	beq.n	8028546 <lv_label_refr_text+0x18e>
                act_time = anim_cur->act_time;
 80284d6:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 80284d8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80284dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
 80284e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80284e2:	4291      	cmp	r1, r2
 80284e4:	dd10      	ble.n	8028508 <lv_label_refr_text+0x150>
                a.act_time = act_time;      /*To keep the old position*/
 80284e6:	9214      	str	r2, [sp, #80]	; 0x50
                a.early_apply = 0;
 80284e8:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 80284ec:	f36f 0200 	bfc	r2, #0, #1
 80284f0:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
                if(playback_now) {
 80284f4:	b143      	cbz	r3, 8028508 <lv_label_refr_text+0x150>
                    a.playback_now = 1;
 80284f6:	b2d3      	uxtb	r3, r2
 80284f8:	f043 0302 	orr.w	r3, r3, #2
 80284fc:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    tmp      = a.start_value;
 8028500:	9b10      	ldr	r3, [sp, #64]	; 0x40
                    a.start_value = a.end_value;
 8028502:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028504:	9210      	str	r2, [sp, #64]	; 0x40
                    a.end_value   = tmp;
 8028506:	9312      	str	r3, [sp, #72]	; 0x48
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8028508:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802850a:	9910      	ldr	r1, [sp, #64]	; 0x40
 802850c:	4628      	mov	r0, r5
 802850e:	f7f8 f9e5 	bl	80208dc <lv_anim_speed_to_time>
    a->time = duration;
 8028512:	9013      	str	r0, [sp, #76]	; 0x4c
    a->playback_time = time;
 8028514:	9016      	str	r0, [sp, #88]	; 0x58
            lv_anim_start(&a);
 8028516:	a808      	add	r0, sp, #32
 8028518:	f7f8 f980 	bl	802081c <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 802851c:	4991      	ldr	r1, [pc, #580]	; (8028764 <lv_label_refr_text+0x3ac>)
 802851e:	4620      	mov	r0, r4
 8028520:	f7f8 f944 	bl	80207ac <lv_anim_del>
            label->offset.y = 0;
 8028524:	2300      	movs	r3, #0
 8028526:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 802852a:	e79b      	b.n	8028464 <lv_label_refr_text+0xac>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 802852c:	4620      	mov	r0, r4
 802852e:	f7e3 f879 	bl	800b624 <lv_obj_get_disp>
 8028532:	f7f7 ff69 	bl	8020408 <lv_disp_get_dpi>
 8028536:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
 802853a:	fb85 3500 	smull	r3, r5, r5, r0
 802853e:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 8028542:	b2ad      	uxth	r5, r5
 8028544:	e7a4      	b.n	8028490 <lv_label_refr_text+0xd8>
            bool playback_now = false;
 8028546:	2300      	movs	r3, #0
            int32_t act_time = 0;
 8028548:	461a      	mov	r2, r3
 802854a:	e7c9      	b.n	80284e0 <lv_label_refr_text+0x128>
            lv_anim_del(obj, set_ofs_x_anim);
 802854c:	4984      	ldr	r1, [pc, #528]	; (8028760 <lv_label_refr_text+0x3a8>)
 802854e:	4620      	mov	r0, r4
 8028550:	f7f8 f92c 	bl	80207ac <lv_anim_del>
            label->offset.x = 0;
 8028554:	2300      	movs	r3, #0
 8028556:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 802855a:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802855e:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8028562:	3301      	adds	r3, #1
 8028564:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 8028568:	1a5b      	subs	r3, r3, r1
 802856a:	b21b      	sxth	r3, r3
 802856c:	429a      	cmp	r2, r3
 802856e:	ddd5      	ble.n	802851c <lv_label_refr_text+0x164>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8028570:	1a9b      	subs	r3, r3, r2
 8028572:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
 8028576:	1a9b      	subs	r3, r3, r2
    a->start_value = start;
 8028578:	2200      	movs	r2, #0
 802857a:	9210      	str	r2, [sp, #64]	; 0x40
    a->current_value = start;
 802857c:	9211      	str	r2, [sp, #68]	; 0x44
    a->end_value = end;
 802857e:	9312      	str	r3, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 8028580:	4978      	ldr	r1, [pc, #480]	; (8028764 <lv_label_refr_text+0x3ac>)
 8028582:	9109      	str	r1, [sp, #36]	; 0x24
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8028584:	4620      	mov	r0, r4
 8028586:	f7f8 f98d 	bl	80208a4 <lv_anim_get>
            if(anim_cur) {
 802858a:	b318      	cbz	r0, 80285d4 <lv_label_refr_text+0x21c>
                act_time = anim_cur->act_time;
 802858c:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 802858e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8028592:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
 8028596:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028598:	4291      	cmp	r1, r2
 802859a:	dd10      	ble.n	80285be <lv_label_refr_text+0x206>
                a.act_time = act_time;      /*To keep the old position*/
 802859c:	9214      	str	r2, [sp, #80]	; 0x50
                a.early_apply = 0;
 802859e:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 80285a2:	f36f 0200 	bfc	r2, #0, #1
 80285a6:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
                if(playback_now) {
 80285aa:	b143      	cbz	r3, 80285be <lv_label_refr_text+0x206>
                    a.playback_now = 1;
 80285ac:	b2d3      	uxtb	r3, r2
 80285ae:	f043 0302 	orr.w	r3, r3, #2
 80285b2:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    tmp      = a.start_value;
 80285b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
                    a.start_value = a.end_value;
 80285b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80285ba:	9210      	str	r2, [sp, #64]	; 0x40
                    a.end_value   = tmp;
 80285bc:	9312      	str	r3, [sp, #72]	; 0x48
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80285be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80285c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80285c2:	4628      	mov	r0, r5
 80285c4:	f7f8 f98a 	bl	80208dc <lv_anim_speed_to_time>
    a->time = duration;
 80285c8:	9013      	str	r0, [sp, #76]	; 0x4c
    a->playback_time = time;
 80285ca:	9016      	str	r0, [sp, #88]	; 0x58
            lv_anim_start(&a);
 80285cc:	a808      	add	r0, sp, #32
 80285ce:	f7f8 f925 	bl	802081c <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80285d2:	e747      	b.n	8028464 <lv_label_refr_text+0xac>
            bool playback_now = false;
 80285d4:	2300      	movs	r3, #0
            int32_t act_time = 0;
 80285d6:	461a      	mov	r2, r3
 80285d8:	e7dd      	b.n	8028596 <lv_label_refr_text+0x1de>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 80285da:	2263      	movs	r2, #99	; 0x63
 80285dc:	2100      	movs	r1, #0
 80285de:	4620      	mov	r0, r4
 80285e0:	f7e2 f902 	bl	800a7e8 <lv_obj_get_style_prop>
 80285e4:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80285e6:	2265      	movs	r2, #101	; 0x65
 80285e8:	2100      	movs	r1, #0
 80285ea:	4620      	mov	r0, r4
 80285ec:	f7e2 f8fc 	bl	800a7e8 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 80285f0:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80285f2:	2d00      	cmp	r5, #0
 80285f4:	d03c      	beq.n	8028670 <lv_label_refr_text+0x2b8>
        lv_anim_init(&a);
 80285f6:	a808      	add	r0, sp, #32
 80285f8:	f7f8 f8be 	bl	8020778 <lv_anim_init>
    a->var = var;
 80285fc:	9408      	str	r4, [sp, #32]
    a->repeat_cnt = cnt;
 80285fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028602:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8028606:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 802860a:	3301      	adds	r3, #1
 802860c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8028610:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8028612:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8028616:	b21b      	sxth	r3, r3
 8028618:	429a      	cmp	r2, r3
 802861a:	dd43      	ble.n	80286a4 <lv_label_refr_text+0x2ec>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 802861c:	2220      	movs	r2, #32
 802861e:	4611      	mov	r1, r2
 8028620:	4630      	mov	r0, r6
 8028622:	f7f7 fc7a 	bl	801ff1a <lv_font_get_glyph_width>
 8028626:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 802862a:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 802862e:	1a82      	subs	r2, r0, r2
    a->start_value = start;
 8028630:	2100      	movs	r1, #0
 8028632:	9110      	str	r1, [sp, #64]	; 0x40
    a->current_value = start;
 8028634:	9111      	str	r1, [sp, #68]	; 0x44
    a->end_value = end;
 8028636:	9212      	str	r2, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 8028638:	4e49      	ldr	r6, [pc, #292]	; (8028760 <lv_label_refr_text+0x3a8>)
 802863a:	9609      	str	r6, [sp, #36]	; 0x24
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 802863c:	4628      	mov	r0, r5
 802863e:	f7f8 f94d 	bl	80208dc <lv_anim_speed_to_time>
    a->time = duration;
 8028642:	9013      	str	r0, [sp, #76]	; 0x4c
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8028644:	4631      	mov	r1, r6
 8028646:	4620      	mov	r0, r4
 8028648:	f7f8 f92c 	bl	80208a4 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 802864c:	b1e8      	cbz	r0, 802868a <lv_label_refr_text+0x2d2>
 802864e:	6b03      	ldr	r3, [r0, #48]	; 0x30
            if(anim_template) {
 8028650:	b1ef      	cbz	r7, 802868e <lv_label_refr_text+0x2d6>
                a.act_time = anim_template->act_time;
 8028652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028654:	9314      	str	r3, [sp, #80]	; 0x50
                a.repeat_delay = anim_template->repeat_delay;
 8028656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028658:	9317      	str	r3, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 802865a:	a808      	add	r0, sp, #32
 802865c:	f7f8 f8de 	bl	802081c <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 8028660:	4940      	ldr	r1, [pc, #256]	; (8028764 <lv_label_refr_text+0x3ac>)
 8028662:	4620      	mov	r0, r4
 8028664:	f7f8 f8a2 	bl	80207ac <lv_anim_del>
            label->offset.y = 0;
 8028668:	2300      	movs	r3, #0
 802866a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 802866e:	e6f9      	b.n	8028464 <lv_label_refr_text+0xac>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8028670:	4620      	mov	r0, r4
 8028672:	f7e2 ffd7 	bl	800b624 <lv_obj_get_disp>
 8028676:	f7f7 fec7 	bl	8020408 <lv_disp_get_dpi>
 802867a:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
 802867e:	fb85 3500 	smull	r3, r5, r5, r0
 8028682:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 8028686:	b2ad      	uxth	r5, r5
 8028688:	e7b5      	b.n	80285f6 <lv_label_refr_text+0x23e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 802868a:	2300      	movs	r3, #0
 802868c:	e7e0      	b.n	8028650 <lv_label_refr_text+0x298>
            else if(act_time < a.time) {
 802868e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028690:	429a      	cmp	r2, r3
 8028692:	dde2      	ble.n	802865a <lv_label_refr_text+0x2a2>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8028694:	9314      	str	r3, [sp, #80]	; 0x50
                a.early_apply = 0;
 8028696:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 802869a:	f36f 0300 	bfc	r3, #0, #1
 802869e:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
 80286a2:	e7da      	b.n	802865a <lv_label_refr_text+0x2a2>
            lv_anim_del(obj, set_ofs_x_anim);
 80286a4:	492e      	ldr	r1, [pc, #184]	; (8028760 <lv_label_refr_text+0x3a8>)
 80286a6:	4620      	mov	r0, r4
 80286a8:	f7f8 f880 	bl	80207ac <lv_anim_del>
            label->offset.x = 0;
 80286ac:	2300      	movs	r3, #0
 80286ae:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80286b2:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80286b6:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 80286ba:	3301      	adds	r3, #1
 80286bc:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 80286c0:	1a5b      	subs	r3, r3, r1
 80286c2:	b21b      	sxth	r3, r3
 80286c4:	429a      	cmp	r2, r3
 80286c6:	ddcb      	ble.n	8028660 <lv_label_refr_text+0x2a8>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 80286c8:	4252      	negs	r2, r2
 80286ca:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 80286ce:	1ad2      	subs	r2, r2, r3
    a->start_value = start;
 80286d0:	2100      	movs	r1, #0
 80286d2:	9110      	str	r1, [sp, #64]	; 0x40
    a->current_value = start;
 80286d4:	9111      	str	r1, [sp, #68]	; 0x44
    a->end_value = end;
 80286d6:	9212      	str	r2, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 80286d8:	4e22      	ldr	r6, [pc, #136]	; (8028764 <lv_label_refr_text+0x3ac>)
 80286da:	9609      	str	r6, [sp, #36]	; 0x24
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 80286dc:	4628      	mov	r0, r5
 80286de:	f7f8 f8fd 	bl	80208dc <lv_anim_speed_to_time>
    a->time = duration;
 80286e2:	9013      	str	r0, [sp, #76]	; 0x4c
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 80286e4:	4631      	mov	r1, r6
 80286e6:	4620      	mov	r0, r4
 80286e8:	f7f8 f8dc 	bl	80208a4 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 80286ec:	b148      	cbz	r0, 8028702 <lv_label_refr_text+0x34a>
 80286ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
            if(anim_template) {
 80286f0:	b14f      	cbz	r7, 8028706 <lv_label_refr_text+0x34e>
                a.act_time = anim_template->act_time;
 80286f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80286f4:	9314      	str	r3, [sp, #80]	; 0x50
                a.repeat_delay = anim_template->repeat_delay;
 80286f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80286f8:	9317      	str	r3, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 80286fa:	a808      	add	r0, sp, #32
 80286fc:	f7f8 f88e 	bl	802081c <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8028700:	e6b0      	b.n	8028464 <lv_label_refr_text+0xac>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028702:	2300      	movs	r3, #0
 8028704:	e7f4      	b.n	80286f0 <lv_label_refr_text+0x338>
            else if(act_time < a.time) {
 8028706:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028708:	429a      	cmp	r2, r3
 802870a:	ddf6      	ble.n	80286fa <lv_label_refr_text+0x342>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 802870c:	9314      	str	r3, [sp, #80]	; 0x50
                a.early_apply = 0;
 802870e:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8028712:	f36f 0300 	bfc	r3, #0, #1
 8028716:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
 802871a:	e7ee      	b.n	80286fa <lv_label_refr_text+0x342>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 802871c:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8028720:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8028724:	3301      	adds	r3, #1
 8028726:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 802872a:	1a5b      	subs	r3, r3, r1
 802872c:	b21b      	sxth	r3, r3
 802872e:	429a      	cmp	r2, r3
 8028730:	dc03      	bgt.n	802873a <lv_label_refr_text+0x382>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8028732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028736:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028738:	e694      	b.n	8028464 <lv_label_refr_text+0xac>
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 802873a:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 802873e:	4293      	cmp	r3, r2
 8028740:	db03      	blt.n	802874a <lv_label_refr_text+0x392>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8028742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028746:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028748:	e68c      	b.n	8028464 <lv_label_refr_text+0xac>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 802874a:	4b07      	ldr	r3, [pc, #28]	; (8028768 <lv_label_refr_text+0x3b0>)
 802874c:	681b      	ldr	r3, [r3, #0]
 802874e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028750:	4798      	blx	r3
 8028752:	2803      	cmp	r0, #3
 8028754:	d80a      	bhi.n	802876c <lv_label_refr_text+0x3b4>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8028756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802875a:	62e3      	str	r3, [r4, #44]	; 0x2c
 802875c:	e682      	b.n	8028464 <lv_label_refr_text+0xac>
 802875e:	bf00      	nop
 8028760:	08027f1f 	.word	0x08027f1f
 8028764:	08027f13 	.word	0x08027f13
 8028768:	20000768 	.word	0x20000768
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802876c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8028770:	3501      	adds	r5, #1
 8028772:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8028776:	1aed      	subs	r5, r5, r3
 8028778:	b2ad      	uxth	r5, r5
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 802877a:	222e      	movs	r2, #46	; 0x2e
 802877c:	4611      	mov	r1, r2
 802877e:	4630      	mov	r0, r6
 8028780:	f7f7 fbcb 	bl	801ff1a <lv_font_get_glyph_width>
 8028784:	4407      	add	r7, r0
            p.x = lv_area_get_width(&txt_coords) -
 8028786:	ebc7 3387 	rsb	r3, r7, r7, lsl #14
 802878a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 802878e:	442f      	add	r7, r5
 8028790:	f8ad 701c 	strh.w	r7, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8028794:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8028798:	3301      	adds	r3, #1
 802879a:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 802879e:	1a9b      	subs	r3, r3, r2
 80287a0:	b29a      	uxth	r2, r3
 80287a2:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
            y_overed = p.y %
 80287a6:	b21b      	sxth	r3, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 80287a8:	4489      	add	r9, r1
            y_overed = p.y %
 80287aa:	fb93 f0f9 	sdiv	r0, r3, r9
 80287ae:	fb09 3910 	mls	r9, r9, r0, r3
            if(y_overed >= lv_font_get_line_height(font)) {
 80287b2:	fa0f f389 	sxth.w	r3, r9
 80287b6:	428b      	cmp	r3, r1
                p.y += lv_font_get_line_height(font);
 80287b8:	bfac      	ite	ge
 80287ba:	1853      	addge	r3, r2, r1
                p.y -= line_space;
 80287bc:	eba2 0308 	sublt.w	r3, r2, r8
 80287c0:	eba3 0909 	sub.w	r9, r3, r9
 80287c4:	fa0f f389 	sxth.w	r3, r9
 80287c8:	f8ad 301e 	strh.w	r3, [sp, #30]
            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 80287cc:	a907      	add	r1, sp, #28
 80287ce:	4620      	mov	r0, r4
 80287d0:	f7ff fcc8 	bl	8028164 <lv_label_get_letter_on>
 80287d4:	4606      	mov	r6, r0
            size_t txt_len = strlen(label->text);
 80287d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80287d8:	4628      	mov	r0, r5
 80287da:	f7d7 fd2d 	bl	8000238 <strlen>
 80287de:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 80287e0:	4b3c      	ldr	r3, [pc, #240]	; (80288d4 <lv_label_refr_text+0x51c>)
 80287e2:	681b      	ldr	r3, [r3, #0]
 80287e4:	4631      	mov	r1, r6
 80287e6:	4628      	mov	r0, r5
 80287e8:	4798      	blx	r3
 80287ea:	4605      	mov	r5, r0
 80287ec:	9008      	str	r0, [sp, #32]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 80287ee:	1cc7      	adds	r7, r0, #3
 80287f0:	45b8      	cmp	r8, r7
 80287f2:	d20b      	bcs.n	802880c <lv_label_refr_text+0x454>
                _lv_txt_encoded_prev(label->text, &byte_id);
 80287f4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80288d8 <lv_label_refr_text+0x520>
 80287f8:	f8d9 3000 	ldr.w	r3, [r9]
 80287fc:	a908      	add	r1, sp, #32
 80287fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028800:	4798      	blx	r3
                letter_id--;
 8028802:	3e01      	subs	r6, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8028804:	9d08      	ldr	r5, [sp, #32]
 8028806:	1cef      	adds	r7, r5, #3
 8028808:	4547      	cmp	r7, r8
 802880a:	d8f5      	bhi.n	80287f8 <lv_label_refr_text+0x440>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 802880c:	2304      	movs	r3, #4
 802880e:	9305      	str	r3, [sp, #20]
            uint8_t len = 0;
 8028810:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8028814:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80288dc <lv_label_refr_text+0x524>
                _lv_txt_encoded_next(label->text, &byte_id);
 8028818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80288e0 <lv_label_refr_text+0x528>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 802881c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802881e:	f8db 3000 	ldr.w	r3, [fp]
 8028822:	9a08      	ldr	r2, [sp, #32]
 8028824:	4410      	add	r0, r2
 8028826:	4798      	blx	r3
 8028828:	4481      	add	r9, r0
 802882a:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(label->text, &byte_id);
 802882e:	f8da 3000 	ldr.w	r3, [sl]
 8028832:	a908      	add	r1, sp, #32
 8028834:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028836:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8028838:	f1b9 0f03 	cmp.w	r9, #3
 802883c:	d828      	bhi.n	8028890 <lv_label_refr_text+0x4d8>
 802883e:	9b08      	ldr	r3, [sp, #32]
 8028840:	4543      	cmp	r3, r8
 8028842:	d803      	bhi.n	802884c <lv_label_refr_text+0x494>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8028844:	9b05      	ldr	r3, [sp, #20]
 8028846:	3b01      	subs	r3, #1
 8028848:	9305      	str	r3, [sp, #20]
 802884a:	d1e7      	bne.n	802881c <lv_label_refr_text+0x464>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 802884c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802884e:	eb03 0805 	add.w	r8, r3, r5
 8028852:	46ca      	mov	sl, r9
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8028854:	4620      	mov	r0, r4
 8028856:	f7ff faf9 	bl	8027e4c <lv_label_dot_tmp_free>
        label->dot_tmp_alloc = false;
 802885a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 802885e:	f36f 1386 	bfc	r3, #6, #1
 8028862:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 8028866:	4652      	mov	r2, sl
 8028868:	4641      	mov	r1, r8
 802886a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 802886e:	f7f9 f8e5 	bl	8021a3c <lv_memcpy>
                    label->text[byte_id_ori + i] = '.';
 8028872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028874:	222e      	movs	r2, #46	; 0x2e
 8028876:	555a      	strb	r2, [r3, r5]
 8028878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802887a:	442b      	add	r3, r5
 802887c:	705a      	strb	r2, [r3, #1]
 802887e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028880:	442b      	add	r3, r5
 8028882:	709a      	strb	r2, [r3, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8028884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028886:	2200      	movs	r2, #0
 8028888:	55da      	strb	r2, [r3, r7]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 802888a:	3603      	adds	r6, #3
 802888c:	62e6      	str	r6, [r4, #44]	; 0x2c
 802888e:	e5e9      	b.n	8028464 <lv_label_refr_text+0xac>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8028890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028892:	eb03 0805 	add.w	r8, r3, r5
 8028896:	46ca      	mov	sl, r9
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8028898:	4620      	mov	r0, r4
 802889a:	f7ff fad7 	bl	8027e4c <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 802889e:	f1b9 0f04 	cmp.w	r9, #4
 80288a2:	d9da      	bls.n	802885a <lv_label_refr_text+0x4a2>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 80288a4:	f109 0001 	add.w	r0, r9, #1
 80288a8:	f7f8 ffde 	bl	8021868 <lv_mem_alloc>
 80288ac:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 80288ae:	2800      	cmp	r0, #0
 80288b0:	f43f add8 	beq.w	8028464 <lv_label_refr_text+0xac>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 80288b4:	464a      	mov	r2, r9
 80288b6:	4641      	mov	r1, r8
 80288b8:	f7f9 f8c0 	bl	8021a3c <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 80288bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80288be:	2200      	movs	r2, #0
 80288c0:	f803 2009 	strb.w	r2, [r3, r9]
        label->dot_tmp_alloc    = true;
 80288c4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80288c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80288cc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80288d0:	e7cf      	b.n	8028872 <lv_label_refr_text+0x4ba>
 80288d2:	4770      	bx	lr
 80288d4:	20000754 	.word	0x20000754
 80288d8:	20000760 	.word	0x20000760
 80288dc:	20000764 	.word	0x20000764
 80288e0:	2000075c 	.word	0x2000075c

080288e4 <lv_label_set_text>:
{
 80288e4:	b538      	push	{r3, r4, r5, lr}
 80288e6:	4604      	mov	r4, r0
 80288e8:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 80288ea:	f7df fb45 	bl	8007f78 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 80288ee:	b1ed      	cbz	r5, 802892c <lv_label_set_text+0x48>
    if(label->text == text && label->static_txt == 0) {
 80288f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80288f2:	42a8      	cmp	r0, r5
 80288f4:	d01b      	beq.n	802892e <lv_label_set_text+0x4a>
        if(label->text != NULL && label->static_txt == 0) {
 80288f6:	b120      	cbz	r0, 8028902 <lv_label_set_text+0x1e>
 80288f8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80288fc:	f013 0f08 	tst.w	r3, #8
 8028900:	d025      	beq.n	802894e <lv_label_set_text+0x6a>
        size_t len = strlen(text) + 1;
 8028902:	4628      	mov	r0, r5
 8028904:	f7d7 fc98 	bl	8000238 <strlen>
        label->text = lv_mem_alloc(len);
 8028908:	3001      	adds	r0, #1
 802890a:	f7f8 ffad 	bl	8021868 <lv_mem_alloc>
 802890e:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 8028910:	b310      	cbz	r0, 8028958 <lv_label_set_text+0x74>
        strcpy(label->text, text);
 8028912:	4629      	mov	r1, r5
 8028914:	f003 ff9c 	bl	802c850 <strcpy>
        label->static_txt = 0;
 8028918:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 802891c:	f36f 03c3 	bfc	r3, #3, #1
 8028920:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8028924:	4620      	mov	r0, r4
 8028926:	f7ff fd47 	bl	80283b8 <lv_label_refr_text>
}
 802892a:	bd38      	pop	{r3, r4, r5, pc}
    if(text == NULL) text = label->text;
 802892c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(label->text == text && label->static_txt == 0) {
 802892e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028932:	f013 0f08 	tst.w	r3, #8
 8028936:	d1e4      	bne.n	8028902 <lv_label_set_text+0x1e>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8028938:	4628      	mov	r0, r5
 802893a:	f7d7 fc7d 	bl	8000238 <strlen>
 802893e:	1c41      	adds	r1, r0, #1
 8028940:	4628      	mov	r0, r5
 8028942:	f7f8 ffcb 	bl	80218dc <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 8028946:	b108      	cbz	r0, 802894c <lv_label_set_text+0x68>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8028948:	6260      	str	r0, [r4, #36]	; 0x24
 802894a:	e7eb      	b.n	8028924 <lv_label_set_text+0x40>
        LV_ASSERT_MALLOC(label->text);
 802894c:	e7fe      	b.n	802894c <lv_label_set_text+0x68>
            lv_mem_free(label->text);
 802894e:	f7f8 ffa9 	bl	80218a4 <lv_mem_free>
            label->text = NULL;
 8028952:	2300      	movs	r3, #0
 8028954:	6263      	str	r3, [r4, #36]	; 0x24
 8028956:	e7d4      	b.n	8028902 <lv_label_set_text+0x1e>
        LV_ASSERT_MALLOC(label->text);
 8028958:	e7fe      	b.n	8028958 <lv_label_set_text+0x74>

0802895a <lv_label_set_text_fmt>:
{
 802895a:	b40e      	push	{r1, r2, r3}
 802895c:	b530      	push	{r4, r5, lr}
 802895e:	b082      	sub	sp, #8
 8028960:	9d05      	ldr	r5, [sp, #20]
    LV_ASSERT_NULL(fmt);
 8028962:	b1ed      	cbz	r5, 80289a0 <lv_label_set_text_fmt+0x46>
 8028964:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 8028966:	f7df fb07 	bl	8007f78 <lv_obj_invalidate>
    if(label->text != NULL && label->static_txt == 0) {
 802896a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802896c:	b120      	cbz	r0, 8028978 <lv_label_set_text_fmt+0x1e>
 802896e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028972:	f013 0f08 	tst.w	r3, #8
 8028976:	d014      	beq.n	80289a2 <lv_label_set_text_fmt+0x48>
    va_start(args, fmt);
 8028978:	a906      	add	r1, sp, #24
 802897a:	9101      	str	r1, [sp, #4]
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 802897c:	4628      	mov	r0, r5
 802897e:	f7fb fa27 	bl	8023dd0 <_lv_txt_set_text_vfmt>
 8028982:	6260      	str	r0, [r4, #36]	; 0x24
    label->static_txt = 0; /*Now the text is dynamically allocated*/
 8028984:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028988:	f36f 03c3 	bfc	r3, #3, #1
 802898c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8028990:	4620      	mov	r0, r4
 8028992:	f7ff fd11 	bl	80283b8 <lv_label_refr_text>
}
 8028996:	b002      	add	sp, #8
 8028998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802899c:	b003      	add	sp, #12
 802899e:	4770      	bx	lr
    LV_ASSERT_NULL(fmt);
 80289a0:	e7fe      	b.n	80289a0 <lv_label_set_text_fmt+0x46>
        lv_mem_free(label->text);
 80289a2:	f7f8 ff7f 	bl	80218a4 <lv_mem_free>
        label->text = NULL;
 80289a6:	2300      	movs	r3, #0
 80289a8:	6263      	str	r3, [r4, #36]	; 0x24
 80289aa:	e7e5      	b.n	8028978 <lv_label_set_text_fmt+0x1e>

080289ac <lv_label_set_text_static>:
{
 80289ac:	b538      	push	{r3, r4, r5, lr}
 80289ae:	4604      	mov	r4, r0
 80289b0:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 80289b2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80289b6:	f013 0f08 	tst.w	r3, #8
 80289ba:	d105      	bne.n	80289c8 <lv_label_set_text_static+0x1c>
 80289bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80289be:	b118      	cbz	r0, 80289c8 <lv_label_set_text_static+0x1c>
        lv_mem_free(label->text);
 80289c0:	f7f8 ff70 	bl	80218a4 <lv_mem_free>
        label->text = NULL;
 80289c4:	2300      	movs	r3, #0
 80289c6:	6263      	str	r3, [r4, #36]	; 0x24
    if(text != NULL) {
 80289c8:	b135      	cbz	r5, 80289d8 <lv_label_set_text_static+0x2c>
        label->static_txt = 1;
 80289ca:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80289ce:	f043 0308 	orr.w	r3, r3, #8
 80289d2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 80289d6:	6265      	str	r5, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 80289d8:	4620      	mov	r0, r4
 80289da:	f7ff fced 	bl	80283b8 <lv_label_refr_text>
}
 80289de:	bd38      	pop	{r3, r4, r5, pc}

080289e0 <lv_label_set_long_mode>:
{
 80289e0:	b538      	push	{r3, r4, r5, lr}
 80289e2:	4604      	mov	r4, r0
 80289e4:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 80289e6:	4917      	ldr	r1, [pc, #92]	; (8028a44 <lv_label_set_long_mode+0x64>)
 80289e8:	f7f7 fee0 	bl	80207ac <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 80289ec:	4916      	ldr	r1, [pc, #88]	; (8028a48 <lv_label_set_long_mode+0x68>)
 80289ee:	4620      	mov	r0, r4
 80289f0:	f7f7 fedc 	bl	80207ac <lv_anim_del>
    label->offset.x = 0;
 80289f4:	2300      	movs	r3, #0
 80289f6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    label->offset.y = 0;
 80289fa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 80289fe:	1eaa      	subs	r2, r5, #2
 8028a00:	b2d2      	uxtb	r2, r2
 8028a02:	2a02      	cmp	r2, #2
 8028a04:	bf8c      	ite	hi
 8028a06:	2200      	movhi	r2, #0
 8028a08:	2201      	movls	r2, #1
 8028a0a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028a0e:	f362 1345 	bfi	r3, r2, #5, #1
 8028a12:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8028a16:	f003 0307 	and.w	r3, r3, #7
 8028a1a:	2b01      	cmp	r3, #1
 8028a1c:	d009      	beq.n	8028a32 <lv_label_set_long_mode+0x52>
    label->long_mode = long_mode;
 8028a1e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028a22:	f365 0302 	bfi	r3, r5, #0, #3
 8028a26:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8028a2a:	4620      	mov	r0, r4
 8028a2c:	f7ff fcc4 	bl	80283b8 <lv_label_refr_text>
}
 8028a30:	bd38      	pop	{r3, r4, r5, pc}
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8028a32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8028a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8028a38:	d0f1      	beq.n	8028a1e <lv_label_set_long_mode+0x3e>
        lv_label_revert_dots(obj);
 8028a3a:	4620      	mov	r0, r4
 8028a3c:	f7ff fa1a 	bl	8027e74 <lv_label_revert_dots>
 8028a40:	e7ed      	b.n	8028a1e <lv_label_set_long_mode+0x3e>
 8028a42:	bf00      	nop
 8028a44:	08027f1f 	.word	0x08027f1f
 8028a48:	08027f13 	.word	0x08027f13

08028a4c <lv_label_constructor>:
{
 8028a4c:	b538      	push	{r3, r4, r5, lr}
 8028a4e:	460c      	mov	r4, r1
    label->text       = NULL;
 8028a50:	2500      	movs	r5, #0
 8028a52:	624d      	str	r5, [r1, #36]	; 0x24
    label->static_txt = 0;
 8028a54:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 8028a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028a5c:	62ca      	str	r2, [r1, #44]	; 0x2c
    label->offset.x = 0;
 8028a5e:	f8a1 5044 	strh.w	r5, [r1, #68]	; 0x44
    label->offset.y = 0;
 8028a62:	f8a1 5046 	strh.w	r5, [r1, #70]	; 0x46
    label->hint.line_start = -1;
 8028a66:	630a      	str	r2, [r1, #48]	; 0x30
    label->hint.coord_y    = 0;
 8028a68:	638d      	str	r5, [r1, #56]	; 0x38
    label->hint.y          = 0;
 8028a6a:	634d      	str	r5, [r1, #52]	; 0x34
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8028a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8028a70:	63ca      	str	r2, [r1, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 8028a72:	640a      	str	r2, [r1, #64]	; 0x40
    label->dot.tmp_ptr   = NULL;
 8028a74:	628d      	str	r5, [r1, #40]	; 0x28
    label->dot_tmp_alloc = 0;
 8028a76:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8028a7a:	f365 1386 	bfi	r3, r5, #6, #1
 8028a7e:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8028a82:	2102      	movs	r1, #2
 8028a84:	4620      	mov	r0, r4
 8028a86:	f7dd ff4d 	bl	8006924 <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 8028a8a:	4629      	mov	r1, r5
 8028a8c:	4620      	mov	r0, r4
 8028a8e:	f7ff ffa7 	bl	80289e0 <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 8028a92:	4902      	ldr	r1, [pc, #8]	; (8028a9c <lv_label_constructor+0x50>)
 8028a94:	4620      	mov	r0, r4
 8028a96:	f7ff ff25 	bl	80288e4 <lv_label_set_text>
}
 8028a9a:	bd38      	pop	{r3, r4, r5, pc}
 8028a9c:	0802cdf0 	.word	0x0802cdf0

08028aa0 <lv_label_event>:
{
 8028aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028aa4:	b093      	sub	sp, #76	; 0x4c
 8028aa6:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8028aa8:	48b6      	ldr	r0, [pc, #728]	; (8028d84 <lv_label_event+0x2e4>)
 8028aaa:	f7db f82c 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8028aae:	2801      	cmp	r0, #1
 8028ab0:	d002      	beq.n	8028ab8 <lv_label_event+0x18>
}
 8028ab2:	b013      	add	sp, #76	; 0x4c
 8028ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8028ab8:	4628      	mov	r0, r5
 8028aba:	f7db f947 	bl	8003d4c <lv_event_get_code>
 8028abe:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8028ac0:	4628      	mov	r0, r5
 8028ac2:	f7db f93f 	bl	8003d44 <lv_event_get_target>
 8028ac6:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8028ac8:	2c2a      	cmp	r4, #42	; 0x2a
 8028aca:	d066      	beq.n	8028b9a <lv_label_event+0xfa>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8028acc:	2c13      	cmp	r4, #19
 8028ace:	d06a      	beq.n	8028ba6 <lv_label_event+0x106>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8028ad0:	2c29      	cmp	r4, #41	; 0x29
 8028ad2:	d076      	beq.n	8028bc2 <lv_label_event+0x122>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8028ad4:	2c2c      	cmp	r4, #44	; 0x2c
 8028ad6:	d07a      	beq.n	8028bce <lv_label_event+0x12e>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8028ad8:	2c15      	cmp	r4, #21
 8028ada:	d1ea      	bne.n	8028ab2 <lv_label_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 8028adc:	4628      	mov	r0, r5
 8028ade:	f7db f931 	bl	8003d44 <lv_event_get_target>
 8028ae2:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8028ae4:	4628      	mov	r0, r5
 8028ae6:	f7db f9a1 	bl	8003e2c <lv_event_get_draw_ctx>
 8028aea:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8028aec:	a906      	add	r1, sp, #24
 8028aee:	4620      	mov	r0, r4
 8028af0:	f7df f841 	bl	8007b76 <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8028af4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8028af8:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8028afc:	f013 0f20 	tst.w	r3, #32
 8028b00:	bf18      	it	ne
 8028b02:	f046 0602 	orrne.w	r6, r6, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8028b06:	2201      	movs	r2, #1
 8028b08:	2100      	movs	r1, #0
 8028b0a:	4620      	mov	r0, r4
 8028b0c:	f7e1 fe6c 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028b10:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028b12:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8028b16:	4298      	cmp	r0, r3
 8028b18:	f000 80ab 	beq.w	8028c72 <lv_label_event+0x1d2>
    lv_draw_label_dsc_init(&label_draw_dsc);
 8028b1c:	a80a      	add	r0, sp, #40	; 0x28
 8028b1e:	f7e4 fd67 	bl	800d5f0 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 8028b22:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8028b26:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    label_draw_dsc.ofs_y = label->offset.y;
 8028b2a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8028b2e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    label_draw_dsc.flag = flag;
 8028b32:	f88d 6045 	strb.w	r6, [sp, #69]	; 0x45
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8028b36:	aa0a      	add	r2, sp, #40	; 0x28
 8028b38:	2100      	movs	r1, #0
 8028b3a:	4620      	mov	r0, r4
 8028b3c:	f7de fc03 	bl	8007346 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8028b40:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8028b44:	b913      	cbnz	r3, 8028b4c <lv_label_event+0xac>
 8028b46:	2301      	movs	r3, #1
 8028b48:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    return label->sel_start;
 8028b4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8028b4e:	930b      	str	r3, [sp, #44]	; 0x2c
    return label->sel_end;
 8028b50:	6c22      	ldr	r2, [r4, #64]	; 0x40
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8028b52:	920c      	str	r2, [sp, #48]	; 0x30
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8028b54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8028b58:	428b      	cmp	r3, r1
 8028b5a:	d002      	beq.n	8028b62 <lv_label_event+0xc2>
 8028b5c:	428a      	cmp	r2, r1
 8028b5e:	f040 8090 	bne.w	8028c82 <lv_label_event+0x1e2>
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8028b62:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028b66:	f003 0306 	and.w	r3, r3, #6
 8028b6a:	2b02      	cmp	r3, #2
 8028b6c:	f000 80a0 	beq.w	8028cb0 <lv_label_event+0x210>
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8028b70:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028b74:	f003 0307 	and.w	r3, r3, #7
 8028b78:	2b03      	cmp	r3, #3
 8028b7a:	f000 80bd 	beq.w	8028cf8 <lv_label_event+0x258>
 8028b7e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8028b82:	3301      	adds	r3, #1
 8028b84:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8028b88:	1a9b      	subs	r3, r3, r2
 8028b8a:	b21b      	sxth	r3, r3
 8028b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028b90:	f2c0 80da 	blt.w	8028d48 <lv_label_event+0x2a8>
    lv_draw_label_hint_t * hint = &label->hint;
 8028b94:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8028b98:	e0af      	b.n	8028cfa <lv_label_event+0x25a>
        lv_label_revert_dots(obj);
 8028b9a:	f7ff f96b 	bl	8027e74 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8028b9e:	4630      	mov	r0, r6
 8028ba0:	f7ff fc0a 	bl	80283b8 <lv_label_refr_text>
 8028ba4:	e785      	b.n	8028ab2 <lv_label_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8028ba6:	2257      	movs	r2, #87	; 0x57
 8028ba8:	2100      	movs	r1, #0
 8028baa:	f7e1 fe1d 	bl	800a7e8 <lv_obj_get_style_prop>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8028bae:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8028bb2:	2900      	cmp	r1, #0
 8028bb4:	bfb8      	it	lt
 8028bb6:	3103      	addlt	r1, #3
 8028bb8:	1089      	asrs	r1, r1, #2
 8028bba:	4628      	mov	r0, r5
 8028bbc:	f7db f93e 	bl	8003e3c <lv_event_set_ext_draw_size>
 8028bc0:	e777      	b.n	8028ab2 <lv_label_event+0x12>
        lv_label_revert_dots(obj);
 8028bc2:	f7ff f957 	bl	8027e74 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8028bc6:	4630      	mov	r0, r6
 8028bc8:	f7ff fbf6 	bl	80283b8 <lv_label_refr_text>
 8028bcc:	e771      	b.n	8028ab2 <lv_label_event+0x12>
 8028bce:	2257      	movs	r2, #87	; 0x57
 8028bd0:	2100      	movs	r1, #0
 8028bd2:	f7e1 fe09 	bl	800a7e8 <lv_obj_get_style_prop>
 8028bd6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8028bd8:	2258      	movs	r2, #88	; 0x58
 8028bda:	2100      	movs	r1, #0
 8028bdc:	4630      	mov	r0, r6
 8028bde:	f7e1 fe03 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028be2:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8028be4:	2259      	movs	r2, #89	; 0x59
 8028be6:	2100      	movs	r1, #0
 8028be8:	4630      	mov	r0, r6
 8028bea:	f7e1 fdfd 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028bee:	fa0f f880 	sxth.w	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8028bf2:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8028bf6:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8028bfa:	f013 0f20 	tst.w	r3, #32
 8028bfe:	bf18      	it	ne
 8028c00:	f049 0902 	orrne.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 8028c04:	4630      	mov	r0, r6
 8028c06:	f7de ff7c 	bl	8007b02 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8028c0a:	2201      	movs	r2, #1
 8028c0c:	2100      	movs	r1, #0
 8028c0e:	4630      	mov	r0, r6
 8028c10:	f7e1 fdea 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028c14:	b200      	sxth	r0, r0
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8028c16:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8028c1a:	4298      	cmp	r0, r3
 8028c1c:	d104      	bne.n	8028c28 <lv_label_event+0x188>
 8028c1e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8028c22:	f013 0f04 	tst.w	r3, #4
 8028c26:	d021      	beq.n	8028c6c <lv_label_event+0x1cc>
        else w = lv_obj_get_content_width(obj);
 8028c28:	4630      	mov	r0, r6
 8028c2a:	f7de ff6a 	bl	8007b02 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8028c2e:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8028c30:	f8cd 9008 	str.w	r9, [sp, #8]
 8028c34:	9001      	str	r0, [sp, #4]
 8028c36:	f8cd 8000 	str.w	r8, [sp]
 8028c3a:	463b      	mov	r3, r7
 8028c3c:	4622      	mov	r2, r4
 8028c3e:	a80a      	add	r0, sp, #40	; 0x28
 8028c40:	f7fb f94d 	bl	8023ede <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8028c44:	4628      	mov	r0, r5
 8028c46:	f7db f885 	bl	8003d54 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 8028c4a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028c4e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8028c52:	4293      	cmp	r3, r2
 8028c54:	bfb8      	it	lt
 8028c56:	4613      	movlt	r3, r2
 8028c58:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8028c5a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8028c5e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8028c62:	4293      	cmp	r3, r2
 8028c64:	bfb8      	it	lt
 8028c66:	4613      	movlt	r3, r2
 8028c68:	8043      	strh	r3, [r0, #2]
 8028c6a:	e722      	b.n	8028ab2 <lv_label_event+0x12>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8028c6c:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8028c70:	e7dd      	b.n	8028c2e <lv_label_event+0x18e>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028c72:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8028c76:	f013 0f04 	tst.w	r3, #4
 8028c7a:	bf08      	it	eq
 8028c7c:	f046 0604 	orreq.w	r6, r6, #4
 8028c80:	e74c      	b.n	8028b1c <lv_label_event+0x7c>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8028c82:	2255      	movs	r2, #85	; 0x55
 8028c84:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8028c88:	4620      	mov	r0, r4
 8028c8a:	f7e1 fdad 	bl	800a7e8 <lv_obj_get_style_prop>
 8028c8e:	4602      	mov	r2, r0
 8028c90:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8028c94:	4620      	mov	r0, r4
 8028c96:	f7e2 facd 	bl	800b234 <_lv_obj_style_apply_color_filter>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 8028c9a:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8028c9e:	2220      	movs	r2, #32
 8028ca0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8028ca4:	4620      	mov	r0, r4
 8028ca6:	f7e1 fd9f 	bl	800a7e8 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 8028caa:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8028cae:	e758      	b.n	8028b62 <lv_label_event+0xc2>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8028cb0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8028cb4:	3b02      	subs	r3, #2
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8028cb6:	b2db      	uxtb	r3, r3
 8028cb8:	2b01      	cmp	r3, #1
 8028cba:	f63f af59 	bhi.w	8028b70 <lv_label_event+0xd0>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8028cbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8028cc0:	9602      	str	r6, [sp, #8]
 8028cc2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8028cc6:	9301      	str	r3, [sp, #4]
 8028cc8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8028ccc:	9300      	str	r3, [sp, #0]
 8028cce:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8028cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028cd4:	a808      	add	r0, sp, #32
 8028cd6:	f7fb f902 	bl	8023ede <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8028cda:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8028cde:	3301      	adds	r3, #1
 8028ce0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8028ce4:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8028ce6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8028cea:	b21b      	sxth	r3, r3
 8028cec:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8028cee:	bfc4      	itt	gt
 8028cf0:	2301      	movgt	r3, #1
 8028cf2:	f88d 3044 	strbgt.w	r3, [sp, #68]	; 0x44
 8028cf6:	e73b      	b.n	8028b70 <lv_label_event+0xd0>
        hint = NULL;
 8028cf8:	2700      	movs	r7, #0
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8028cfa:	68aa      	ldr	r2, [r5, #8]
 8028cfc:	a906      	add	r1, sp, #24
 8028cfe:	a808      	add	r0, sp, #32
 8028d00:	f7f7 fe9d 	bl	8020a3e <_lv_area_intersect>
    if(!is_common) return;
 8028d04:	2800      	cmp	r0, #0
 8028d06:	f43f aed4 	beq.w	8028ab2 <lv_label_event+0x12>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8028d0a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028d0e:	f013 0f07 	tst.w	r3, #7
 8028d12:	d01b      	beq.n	8028d4c <lv_label_event+0x2ac>
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8028d14:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028d18:	f003 0306 	and.w	r3, r3, #6
 8028d1c:	2b02      	cmp	r3, #2
 8028d1e:	d022      	beq.n	8028d66 <lv_label_event+0x2c6>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8028d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028d22:	9700      	str	r7, [sp, #0]
 8028d24:	aa06      	add	r2, sp, #24
 8028d26:	a90a      	add	r1, sp, #40	; 0x28
 8028d28:	4628      	mov	r0, r5
 8028d2a:	f7e4 fc95 	bl	800d658 <lv_draw_label>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8028d2e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 8028d32:	ab08      	add	r3, sp, #32
 8028d34:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8028d36:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028d3a:	f003 0307 	and.w	r3, r3, #7
 8028d3e:	2b03      	cmp	r3, #3
 8028d40:	d022      	beq.n	8028d88 <lv_label_event+0x2e8>
    draw_ctx->clip_area = clip_area_ori;
 8028d42:	f8c5 8008 	str.w	r8, [r5, #8]
 8028d46:	e6b4      	b.n	8028ab2 <lv_label_event+0x12>
        hint = NULL;
 8028d48:	2700      	movs	r7, #0
 8028d4a:	e7d6      	b.n	8028cfa <lv_label_event+0x25a>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8028d4c:	4620      	mov	r0, r4
 8028d4e:	f7e0 fabd 	bl	80092cc <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 8028d52:	4242      	negs	r2, r0
 8028d54:	b212      	sxth	r2, r2
 8028d56:	2100      	movs	r1, #0
 8028d58:	a806      	add	r0, sp, #24
 8028d5a:	f7f7 fe61 	bl	8020a20 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8028d5e:	8b63      	ldrh	r3, [r4, #26]
 8028d60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8028d64:	e7d6      	b.n	8028d14 <lv_label_event+0x274>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8028d66:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &txt_clip;
 8028d6a:	ab08      	add	r3, sp, #32
 8028d6c:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8028d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028d70:	9700      	str	r7, [sp, #0]
 8028d72:	aa06      	add	r2, sp, #24
 8028d74:	a90a      	add	r1, sp, #40	; 0x28
 8028d76:	4628      	mov	r0, r5
 8028d78:	f7e4 fc6e 	bl	800d658 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8028d7c:	f8c5 8008 	str.w	r8, [r5, #8]
 8028d80:	e7d5      	b.n	8028d2e <lv_label_event+0x28e>
 8028d82:	bf00      	nop
 8028d84:	08033014 	.word	0x08033014
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8028d88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8028d8a:	9602      	str	r6, [sp, #8]
 8028d8c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8028d90:	9301      	str	r3, [sp, #4]
 8028d92:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8028d96:	9300      	str	r3, [sp, #0]
 8028d98:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8028d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028d9e:	a805      	add	r0, sp, #20
 8028da0:	f7fb f89d 	bl	8023ede <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 8028da4:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8028da8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8028dac:	3301      	adds	r3, #1
 8028dae:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8028db2:	1a5b      	subs	r3, r3, r1
 8028db4:	b21b      	sxth	r3, r3
 8028db6:	429a      	cmp	r2, r3
 8028db8:	dc1e      	bgt.n	8028df8 <lv_label_event+0x358>
        if(size.y > lv_area_get_height(&txt_coords)) {
 8028dba:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8028dbe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8028dc2:	3301      	adds	r3, #1
 8028dc4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8028dc8:	1a5b      	subs	r3, r3, r1
 8028dca:	b21b      	sxth	r3, r3
 8028dcc:	429a      	cmp	r2, r3
 8028dce:	ddb8      	ble.n	8028d42 <lv_label_event+0x2a2>
            label_draw_dsc.ofs_x = label->offset.x;
 8028dd0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8028dd4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8028dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8028dda:	891b      	ldrh	r3, [r3, #8]
 8028ddc:	4413      	add	r3, r2
 8028dde:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8028de2:	4413      	add	r3, r2
 8028de4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8028de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028dea:	9700      	str	r7, [sp, #0]
 8028dec:	aa06      	add	r2, sp, #24
 8028dee:	a90a      	add	r1, sp, #40	; 0x28
 8028df0:	4628      	mov	r0, r5
 8028df2:	f7e4 fc31 	bl	800d658 <lv_draw_label>
 8028df6:	e7a4      	b.n	8028d42 <lv_label_event+0x2a2>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8028df8:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
 8028dfc:	4432      	add	r2, r6
 8028dfe:	b296      	uxth	r6, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8028e00:	2220      	movs	r2, #32
 8028e02:	4611      	mov	r1, r2
 8028e04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8028e06:	f7f7 f888 	bl	801ff1a <lv_font_get_glyph_width>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8028e0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028e0e:	4406      	add	r6, r0
 8028e10:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            label_draw_dsc.ofs_y = label->offset.y;
 8028e14:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8028e18:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8028e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028e1e:	9700      	str	r7, [sp, #0]
 8028e20:	aa06      	add	r2, sp, #24
 8028e22:	a90a      	add	r1, sp, #40	; 0x28
 8028e24:	4628      	mov	r0, r5
 8028e26:	f7e4 fc17 	bl	800d658 <lv_draw_label>
 8028e2a:	e7c6      	b.n	8028dba <lv_label_event+0x31a>

08028e2c <lv_label_is_char_under_pos>:
    LV_ASSERT_NULL(pos);
 8028e2c:	2900      	cmp	r1, #0
 8028e2e:	d062      	beq.n	8028ef6 <lv_label_is_char_under_pos+0xca>
{
 8028e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e34:	b08f      	sub	sp, #60	; 0x3c
 8028e36:	4604      	mov	r4, r0
 8028e38:	468a      	mov	sl, r1
    lv_obj_get_content_coords(obj, &txt_coords);
 8028e3a:	a90c      	add	r1, sp, #48	; 0x30
 8028e3c:	f7de fe9b 	bl	8007b76 <lv_obj_get_content_coords>
    return label->text;
 8028e40:	6a66      	ldr	r6, [r4, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8028e42:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8028e46:	3301      	adds	r3, #1
 8028e48:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8028e4c:	1a9b      	subs	r3, r3, r2
 8028e4e:	b21b      	sxth	r3, r3
 8028e50:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8028e52:	2257      	movs	r2, #87	; 0x57
 8028e54:	2100      	movs	r1, #0
 8028e56:	4620      	mov	r0, r4
 8028e58:	f7e1 fcc6 	bl	800a7e8 <lv_obj_get_style_prop>
 8028e5c:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8028e5e:	2259      	movs	r2, #89	; 0x59
 8028e60:	2100      	movs	r1, #0
 8028e62:	4620      	mov	r0, r4
 8028e64:	f7e1 fcc0 	bl	800a7e8 <lv_obj_get_style_prop>
 8028e68:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8028e6a:	2258      	movs	r2, #88	; 0x58
 8028e6c:	2100      	movs	r1, #0
 8028e6e:	4620      	mov	r0, r4
 8028e70:	f7e1 fcba 	bl	800a7e8 <lv_obj_get_style_prop>
 8028e74:	9007      	str	r0, [sp, #28]
    return (lv_coord_t)v.num;
 8028e76:	b203      	sxth	r3, r0
 8028e78:	9303      	str	r3, [sp, #12]
 8028e7a:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8028e7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8028e80:	2100      	movs	r1, #0
 8028e82:	4620      	mov	r0, r4
 8028e84:	f7e2 fb30 	bl	800b4e8 <lv_obj_calculate_style_text_align>
 8028e88:	9006      	str	r0, [sp, #24]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8028e8a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 8028e8e:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8028e92:	f013 0f20 	tst.w	r3, #32
 8028e96:	bf18      	it	ne
 8028e98:	f049 0902 	orrne.w	r9, r9, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8028e9c:	2201      	movs	r2, #1
 8028e9e:	2100      	movs	r1, #0
 8028ea0:	4620      	mov	r0, r4
 8028ea2:	f7e1 fca1 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028ea6:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028ea8:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8028eac:	4293      	cmp	r3, r2
 8028eae:	d023      	beq.n	8028ef8 <lv_label_is_char_under_pos+0xcc>
    while(txt[line_start] != '\0') {
 8028eb0:	7833      	ldrb	r3, [r6, #0]
 8028eb2:	b34b      	cbz	r3, 8028f08 <lv_label_is_char_under_pos+0xdc>
 8028eb4:	4637      	mov	r7, r6
 8028eb6:	2500      	movs	r5, #0
 8028eb8:	462c      	mov	r4, r5
        y += letter_height + line_space;
 8028eba:	9b05      	ldr	r3, [sp, #20]
 8028ebc:	445b      	add	r3, fp
 8028ebe:	9305      	str	r3, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028ec0:	f8cd 9004 	str.w	r9, [sp, #4]
 8028ec4:	2300      	movs	r3, #0
 8028ec6:	9300      	str	r3, [sp, #0]
 8028ec8:	9b04      	ldr	r3, [sp, #16]
 8028eca:	9a03      	ldr	r2, [sp, #12]
 8028ecc:	4641      	mov	r1, r8
 8028ece:	4638      	mov	r0, r7
 8028ed0:	f7fa fde0 	bl	8023a94 <_lv_txt_get_next_line>
 8028ed4:	4621      	mov	r1, r4
 8028ed6:	4404      	add	r4, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8028ed8:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 8028edc:	eb05 030b 	add.w	r3, r5, fp
 8028ee0:	429a      	cmp	r2, r3
 8028ee2:	dd15      	ble.n	8028f10 <lv_label_is_char_under_pos+0xe4>
        y += letter_height + line_space;
 8028ee4:	9b05      	ldr	r3, [sp, #20]
 8028ee6:	441d      	add	r5, r3
 8028ee8:	b22d      	sxth	r5, r5
    while(txt[line_start] != '\0') {
 8028eea:	1937      	adds	r7, r6, r4
 8028eec:	5d33      	ldrb	r3, [r6, r4]
 8028eee:	2b00      	cmp	r3, #0
 8028ef0:	d1e6      	bne.n	8028ec0 <lv_label_is_char_under_pos+0x94>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028ef2:	46a3      	mov	fp, r4
 8028ef4:	e00d      	b.n	8028f12 <lv_label_is_char_under_pos+0xe6>
    LV_ASSERT_NULL(pos);
 8028ef6:	e7fe      	b.n	8028ef6 <lv_label_is_char_under_pos+0xca>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028ef8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8028efc:	f013 0f04 	tst.w	r3, #4
 8028f00:	d1d6      	bne.n	8028eb0 <lv_label_is_char_under_pos+0x84>
 8028f02:	f049 0904 	orr.w	r9, r9, #4
 8028f06:	e7d3      	b.n	8028eb0 <lv_label_is_char_under_pos+0x84>
    while(txt[line_start] != '\0') {
 8028f08:	4637      	mov	r7, r6
 8028f0a:	469b      	mov	fp, r3
 8028f0c:	461c      	mov	r4, r3
 8028f0e:	e000      	b.n	8028f12 <lv_label_is_char_under_pos+0xe6>
 8028f10:	468b      	mov	fp, r1
    if(align == LV_TEXT_ALIGN_CENTER) {
 8028f12:	9b06      	ldr	r3, [sp, #24]
 8028f14:	2b02      	cmp	r3, #2
 8028f16:	d019      	beq.n	8028f4c <lv_label_is_char_under_pos+0x120>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8028f18:	9b06      	ldr	r3, [sp, #24]
 8028f1a:	2b03      	cmp	r3, #3
 8028f1c:	d030      	beq.n	8028f80 <lv_label_is_char_under_pos+0x154>
    lv_coord_t x      = 0;
 8028f1e:	2500      	movs	r5, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8028f20:	2300      	movs	r3, #0
 8028f22:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i           = line_start;
 8028f26:	465a      	mov	r2, fp
 8028f28:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    uint32_t letter      = '\0';
 8028f2c:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t letter_next = '\0';
 8028f2e:	9308      	str	r3, [sp, #32]
    if(new_line_start > 0) {
 8028f30:	2c00      	cmp	r4, #0
 8028f32:	d062      	beq.n	8028ffa <lv_label_is_char_under_pos+0x1ce>
        while(i <= new_line_start - 1) {
 8028f34:	3c01      	subs	r4, #1
 8028f36:	455c      	cmp	r4, fp
 8028f38:	d375      	bcc.n	8029026 <lv_label_is_char_under_pos+0x1fa>
    lv_coord_t last_x = 0;
 8028f3a:	2700      	movs	r7, #0
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8028f3c:	f009 0901 	and.w	r9, r9, #1
 8028f40:	9704      	str	r7, [sp, #16]
 8028f42:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028f46:	464f      	mov	r7, r9
 8028f48:	4691      	mov	r9, r2
 8028f4a:	e03f      	b.n	8028fcc <lv_label_is_char_under_pos+0x1a0>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8028f4c:	f8cd 9000 	str.w	r9, [sp]
 8028f50:	9b03      	ldr	r3, [sp, #12]
 8028f52:	4642      	mov	r2, r8
 8028f54:	4659      	mov	r1, fp
 8028f56:	1a61      	subs	r1, r4, r1
 8028f58:	4638      	mov	r0, r7
 8028f5a:	f7fa ff6f 	bl	8023e3c <lv_txt_get_width>
 8028f5e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8028f62:	3301      	adds	r3, #1
 8028f64:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8028f68:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8028f6a:	b21a      	sxth	r2, r3
 8028f6c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8028f70:	4413      	add	r3, r2
 8028f72:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8028f76:	1045      	asrs	r5, r0, #1
 8028f78:	ebc5 0363 	rsb	r3, r5, r3, asr #1
 8028f7c:	b21d      	sxth	r5, r3
 8028f7e:	e7cf      	b.n	8028f20 <lv_label_is_char_under_pos+0xf4>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8028f80:	f8cd 9000 	str.w	r9, [sp]
 8028f84:	9b03      	ldr	r3, [sp, #12]
 8028f86:	4642      	mov	r2, r8
 8028f88:	4659      	mov	r1, fp
 8028f8a:	1a61      	subs	r1, r4, r1
 8028f8c:	4638      	mov	r0, r7
 8028f8e:	f7fa ff55 	bl	8023e3c <lv_txt_get_width>
 8028f92:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8028f96:	3301      	adds	r3, #1
 8028f98:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8028f9c:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 8028f9e:	1a1b      	subs	r3, r3, r0
 8028fa0:	b21d      	sxth	r5, r3
 8028fa2:	e7bd      	b.n	8028f20 <lv_label_is_char_under_pos+0xf4>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8028fa4:	9a08      	ldr	r2, [sp, #32]
 8028fa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028fa8:	4640      	mov	r0, r8
 8028faa:	f7f6 ffb6 	bl	801ff1a <lv_font_get_glyph_width>
 8028fae:	4428      	add	r0, r5
 8028fb0:	b283      	uxth	r3, r0
            if(pos->x < x) {
 8028fb2:	f9ba 2000 	ldrsh.w	r2, [sl]
 8028fb6:	b200      	sxth	r0, r0
 8028fb8:	4282      	cmp	r2, r0
 8028fba:	db18      	blt.n	8028fee <lv_label_is_char_under_pos+0x1c2>
            x += letter_space;
 8028fbc:	445b      	add	r3, fp
            i_current = i;
 8028fbe:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8028fc2:	9504      	str	r5, [sp, #16]
            x += letter_space;
 8028fc4:	b21d      	sxth	r5, r3
        while(i <= new_line_start - 1) {
 8028fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028fc8:	42a3      	cmp	r3, r4
 8028fca:	d814      	bhi.n	8028ff6 <lv_label_is_char_under_pos+0x1ca>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8028fcc:	ab0a      	add	r3, sp, #40	; 0x28
 8028fce:	aa08      	add	r2, sp, #32
 8028fd0:	a909      	add	r1, sp, #36	; 0x24
 8028fd2:	4630      	mov	r0, r6
 8028fd4:	f7fa ff1c 	bl	8023e10 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8028fd8:	2f00      	cmp	r7, #0
 8028fda:	d0e3      	beq.n	8028fa4 <lv_label_is_char_under_pos+0x178>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8028fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028fde:	5cf1      	ldrb	r1, [r6, r3]
 8028fe0:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8028fe4:	f7fa fd32 	bl	8023a4c <_lv_txt_is_cmd>
 8028fe8:	2800      	cmp	r0, #0
 8028fea:	d0db      	beq.n	8028fa4 <lv_label_is_char_under_pos+0x178>
 8028fec:	e7eb      	b.n	8028fc6 <lv_label_is_char_under_pos+0x19a>
                i = i_current;
 8028fee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                break;
 8028ff2:	462f      	mov	r7, r5
 8028ff4:	e002      	b.n	8028ffc <lv_label_is_char_under_pos+0x1d0>
 8028ff6:	9f04      	ldr	r7, [sp, #16]
 8028ff8:	e000      	b.n	8028ffc <lv_label_is_char_under_pos+0x1d0>
    lv_coord_t last_x = 0;
 8028ffa:	2700      	movs	r7, #0
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 8028ffc:	9a08      	ldr	r2, [sp, #32]
 8028ffe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029000:	4640      	mov	r0, r8
 8029002:	f7f6 ff8a 	bl	801ff1a <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 8029006:	f9ba 2000 	ldrsh.w	r2, [sl]
 802900a:	9903      	ldr	r1, [sp, #12]
 802900c:	1a7b      	subs	r3, r7, r1
 802900e:	429a      	cmp	r2, r3
 8029010:	db0b      	blt.n	802902a <lv_label_is_char_under_pos+0x1fe>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 8029012:	4408      	add	r0, r1
 8029014:	1c43      	adds	r3, r0, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 8029016:	441f      	add	r7, r3
 8029018:	42ba      	cmp	r2, r7
 802901a:	bfcc      	ite	gt
 802901c:	2000      	movgt	r0, #0
 802901e:	2001      	movle	r0, #1
}
 8029020:	b00f      	add	sp, #60	; 0x3c
 8029022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t last_x = 0;
 8029026:	2700      	movs	r7, #0
 8029028:	e7e8      	b.n	8028ffc <lv_label_is_char_under_pos+0x1d0>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 802902a:	2000      	movs	r0, #0
 802902c:	e7f8      	b.n	8029020 <lv_label_is_char_under_pos+0x1f4>

0802902e <lv_label_get_text_selection_start>:
}
 802902e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8029030:	4770      	bx	lr

08029032 <lv_label_get_text_selection_end>:
}
 8029032:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8029034:	4770      	bx	lr
	...

08029038 <lv_label_ins_text>:
    LV_ASSERT_NULL(txt);
 8029038:	b15a      	cbz	r2, 8029052 <lv_label_ins_text+0x1a>
{
 802903a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802903e:	4604      	mov	r4, r0
 8029040:	460e      	mov	r6, r1
 8029042:	4617      	mov	r7, r2
    if(label->static_txt != 0) return;
 8029044:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8029048:	f013 0f08 	tst.w	r3, #8
 802904c:	d002      	beq.n	8029054 <lv_label_ins_text+0x1c>
}
 802904e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_NULL(txt);
 8029052:	e7fe      	b.n	8029052 <lv_label_ins_text+0x1a>
    lv_obj_invalidate(obj);
 8029054:	f7de ff90 	bl	8007f78 <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 8029058:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 802905c:	4640      	mov	r0, r8
 802905e:	f7d7 f8eb 	bl	8000238 <strlen>
 8029062:	4605      	mov	r5, r0
    size_t ins_len = strlen(txt);
 8029064:	4638      	mov	r0, r7
 8029066:	f7d7 f8e7 	bl	8000238 <strlen>
    size_t new_len = ins_len + old_len;
 802906a:	4405      	add	r5, r0
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 802906c:	1c69      	adds	r1, r5, #1
 802906e:	4640      	mov	r0, r8
 8029070:	f7f8 fc34 	bl	80218dc <lv_mem_realloc>
 8029074:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 8029076:	b168      	cbz	r0, 8029094 <lv_label_ins_text+0x5c>
    if(pos == LV_LABEL_POS_LAST) {
 8029078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802907c:	429e      	cmp	r6, r3
 802907e:	d00a      	beq.n	8029096 <lv_label_ins_text+0x5e>
    _lv_txt_ins(label->text, pos, txt);
 8029080:	463a      	mov	r2, r7
 8029082:	4631      	mov	r1, r6
 8029084:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8029086:	f7fa fe43 	bl	8023d10 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 802908a:	2100      	movs	r1, #0
 802908c:	4620      	mov	r0, r4
 802908e:	f7ff fc29 	bl	80288e4 <lv_label_set_text>
 8029092:	e7dc      	b.n	802904e <lv_label_ins_text+0x16>
    LV_ASSERT_MALLOC(label->text);
 8029094:	e7fe      	b.n	8029094 <lv_label_ins_text+0x5c>
        pos = _lv_txt_get_encoded_length(label->text);
 8029096:	4b02      	ldr	r3, [pc, #8]	; (80290a0 <lv_label_ins_text+0x68>)
 8029098:	681b      	ldr	r3, [r3, #0]
 802909a:	4798      	blx	r3
 802909c:	4606      	mov	r6, r0
 802909e:	e7ef      	b.n	8029080 <lv_label_ins_text+0x48>
 80290a0:	20000768 	.word	0x20000768

080290a4 <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80290a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80290a8:	b089      	sub	sp, #36	; 0x24
 80290aa:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 80290ac:	485f      	ldr	r0, [pc, #380]	; (802922c <lv_line_event+0x188>)
 80290ae:	f7da fd2a 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80290b2:	2801      	cmp	r0, #1
 80290b4:	d002      	beq.n	80290bc <lv_line_event+0x18>
            }
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 80290b6:	b009      	add	sp, #36	; 0x24
 80290b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80290bc:	4620      	mov	r0, r4
 80290be:	f7da fe45 	bl	8003d4c <lv_event_get_code>
 80290c2:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80290c4:	4620      	mov	r0, r4
 80290c6:	f7da fe3d 	bl	8003d44 <lv_event_get_target>
 80290ca:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80290cc:	2e13      	cmp	r6, #19
 80290ce:	d035      	beq.n	802913c <lv_line_event+0x98>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 80290d0:	2e2c      	cmp	r6, #44	; 0x2c
 80290d2:	d041      	beq.n	8029158 <lv_line_event+0xb4>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80290d4:	2e15      	cmp	r6, #21
 80290d6:	d1ee      	bne.n	80290b6 <lv_line_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80290d8:	4620      	mov	r0, r4
 80290da:	f7da fea7 	bl	8003e2c <lv_event_get_draw_ctx>
 80290de:	4607      	mov	r7, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 80290e0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80290e2:	2b00      	cmp	r3, #0
 80290e4:	d0e7      	beq.n	80290b6 <lv_line_event+0x12>
 80290e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80290e8:	2b00      	cmp	r3, #0
 80290ea:	d0e4      	beq.n	80290b6 <lv_line_event+0x12>
        lv_obj_get_coords(obj, &area);
 80290ec:	a903      	add	r1, sp, #12
 80290ee:	4628      	mov	r0, r5
 80290f0:	f7de fc9d 	bl	8007a2e <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 80290f4:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 80290f8:	4628      	mov	r0, r5
 80290fa:	f7e0 f8d7 	bl	80092ac <lv_obj_get_scroll_x>
 80290fe:	1a36      	subs	r6, r6, r0
 8029100:	b2b6      	uxth	r6, r6
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 8029102:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8029106:	4628      	mov	r0, r5
 8029108:	f7e0 f8d8 	bl	80092bc <lv_obj_get_scroll_y>
 802910c:	eba9 0900 	sub.w	r9, r9, r0
 8029110:	fa1f f989 	uxth.w	r9, r9
        lv_coord_t h = lv_obj_get_height(obj);
 8029114:	4628      	mov	r0, r5
 8029116:	f7de fcee 	bl	8007af6 <lv_obj_get_height>
 802911a:	4680      	mov	r8, r0
        lv_draw_line_dsc_init(&line_dsc);
 802911c:	a805      	add	r0, sp, #20
 802911e:	f7e4 fdd0 	bl	800dcc2 <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8029122:	aa05      	add	r2, sp, #20
 8029124:	2100      	movs	r1, #0
 8029126:	4628      	mov	r0, r5
 8029128:	f7de f9bc 	bl	80074a4 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 802912c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 802912e:	2b01      	cmp	r3, #1
 8029130:	d9c1      	bls.n	80290b6 <lv_line_event+0x12>
 8029132:	2400      	movs	r4, #0
 8029134:	44c8      	add	r8, r9
 8029136:	fa1f f888 	uxth.w	r8, r8
 802913a:	e059      	b.n	80291f0 <lv_line_event+0x14c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 802913c:	2249      	movs	r2, #73	; 0x49
 802913e:	2100      	movs	r1, #0
 8029140:	f7e1 fb52 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8029144:	b205      	sxth	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 8029146:	4620      	mov	r0, r4
 8029148:	f7da fe04 	bl	8003d54 <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 802914c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8029150:	42ab      	cmp	r3, r5
 8029152:	dab0      	bge.n	80290b6 <lv_line_event+0x12>
 8029154:	8005      	strh	r5, [r0, #0]
 8029156:	e7ae      	b.n	80290b6 <lv_line_event+0x12>
        if(line->point_num == 0 || line->point_array == NULL) return;
 8029158:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 802915a:	2b00      	cmp	r3, #0
 802915c:	d0ab      	beq.n	80290b6 <lv_line_event+0x12>
 802915e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8029160:	2b00      	cmp	r3, #0
 8029162:	d0a8      	beq.n	80290b6 <lv_line_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 8029164:	4620      	mov	r0, r4
 8029166:	f7da fdf5 	bl	8003d54 <lv_event_get_param>
 802916a:	4607      	mov	r7, r0
        for(i = 0; i < line->point_num; i++) {
 802916c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 802916e:	b1fa      	cbz	r2, 80291b0 <lv_line_event+0x10c>
 8029170:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029172:	3a01      	subs	r2, #1
 8029174:	b292      	uxth	r2, r2
 8029176:	1d19      	adds	r1, r3, #4
 8029178:	eb01 0182 	add.w	r1, r1, r2, lsl #2
        lv_coord_t h = 0;
 802917c:	2600      	movs	r6, #0
        lv_coord_t w = 0;
 802917e:	4634      	mov	r4, r6
            w = LV_MAX(line->point_array[i].x, w);
 8029180:	f9b3 2000 	ldrsh.w	r2, [r3]
 8029184:	4294      	cmp	r4, r2
 8029186:	bfb8      	it	lt
 8029188:	4614      	movlt	r4, r2
            h = LV_MAX(line->point_array[i].y, h);
 802918a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 802918e:	4296      	cmp	r6, r2
 8029190:	bfb8      	it	lt
 8029192:	4616      	movlt	r6, r2
        for(i = 0; i < line->point_num; i++) {
 8029194:	3304      	adds	r3, #4
 8029196:	428b      	cmp	r3, r1
 8029198:	d1f2      	bne.n	8029180 <lv_line_event+0xdc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 802919a:	2249      	movs	r2, #73	; 0x49
 802919c:	2100      	movs	r1, #0
 802919e:	4628      	mov	r0, r5
 80291a0:	f7e1 fb22 	bl	800a7e8 <lv_obj_get_style_prop>
        w += line_width;
 80291a4:	b280      	uxth	r0, r0
 80291a6:	4404      	add	r4, r0
        h += line_width;
 80291a8:	4430      	add	r0, r6
        p->x = w;
 80291aa:	803c      	strh	r4, [r7, #0]
        p->y = h;
 80291ac:	8078      	strh	r0, [r7, #2]
 80291ae:	e782      	b.n	80290b6 <lv_line_event+0x12>
        lv_coord_t h = 0;
 80291b0:	2600      	movs	r6, #0
        lv_coord_t w = 0;
 80291b2:	4634      	mov	r4, r6
 80291b4:	e7f1      	b.n	802919a <lv_line_event+0xf6>
                p1.y = h - line->point_array[i].y + y_ofs;
 80291b6:	8843      	ldrh	r3, [r0, #2]
 80291b8:	eba8 0303 	sub.w	r3, r8, r3
 80291bc:	f8ad 3006 	strh.w	r3, [sp, #6]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 80291c0:	884b      	ldrh	r3, [r1, #2]
 80291c2:	eba8 0303 	sub.w	r3, r8, r3
 80291c6:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80291ca:	ab02      	add	r3, sp, #8
 80291cc:	aa01      	add	r2, sp, #4
 80291ce:	a905      	add	r1, sp, #20
 80291d0:	4638      	mov	r0, r7
 80291d2:	f7e4 fd8d 	bl	800dcf0 <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 80291d6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80291da:	f36f 0382 	bfc	r3, #2, #1
 80291de:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 80291e2:	3401      	adds	r4, #1
 80291e4:	b2a4      	uxth	r4, r4
 80291e6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80291e8:	3b01      	subs	r3, #1
 80291ea:	429c      	cmp	r4, r3
 80291ec:	f6bf af63 	bge.w	80290b6 <lv_line_event+0x12>
            p1.x = line->point_array[i].x + x_ofs;
 80291f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80291f2:	00a3      	lsls	r3, r4, #2
 80291f4:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 80291f8:	f832 1024 	ldrh.w	r1, [r2, r4, lsl #2]
 80291fc:	4431      	add	r1, r6
 80291fe:	f8ad 1004 	strh.w	r1, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 8029202:	3304      	adds	r3, #4
 8029204:	18d1      	adds	r1, r2, r3
 8029206:	5ad3      	ldrh	r3, [r2, r3]
 8029208:	4433      	add	r3, r6
 802920a:	f8ad 3008 	strh.w	r3, [sp, #8]
            if(line->y_inv == 0) {
 802920e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 8029212:	f013 0f01 	tst.w	r3, #1
 8029216:	d1ce      	bne.n	80291b6 <lv_line_event+0x112>
                p1.y = line->point_array[i].y + y_ofs;
 8029218:	8843      	ldrh	r3, [r0, #2]
 802921a:	444b      	add	r3, r9
 802921c:	f8ad 3006 	strh.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 8029220:	884b      	ldrh	r3, [r1, #2]
 8029222:	444b      	add	r3, r9
 8029224:	f8ad 300a 	strh.w	r3, [sp, #10]
 8029228:	e7cf      	b.n	80291ca <lv_line_event+0x126>
 802922a:	bf00      	nop
 802922c:	08033030 	.word	0x08033030

08029230 <lv_line_constructor>:
{
 8029230:	b508      	push	{r3, lr}
 8029232:	4608      	mov	r0, r1
    line->point_num   = 0;
 8029234:	2300      	movs	r3, #0
 8029236:	850b      	strh	r3, [r1, #40]	; 0x28
    line->point_array = NULL;
 8029238:	624b      	str	r3, [r1, #36]	; 0x24
    line->y_inv       = 0;
 802923a:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 802923e:	f363 0200 	bfi	r2, r3, #0, #1
 8029242:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8029246:	2102      	movs	r1, #2
 8029248:	f7dd fb6c 	bl	8006924 <lv_obj_clear_flag>
}
 802924c:	bd08      	pop	{r3, pc}

0802924e <set_y_anim>:
    inf_normalize(obj);
}


static void set_y_anim(void * obj, int32_t v)
{
 802924e:	b508      	push	{r3, lr}
    lv_obj_set_y(obj, v);
 8029250:	b209      	sxth	r1, r1
 8029252:	f7de fb2a 	bl	80078aa <lv_obj_set_y>
}
 8029256:	bd08      	pop	{r3, pc}

08029258 <get_label>:
{
 8029258:	b508      	push	{r3, lr}
    return lv_obj_get_child(obj, 0);
 802925a:	2100      	movs	r1, #0
 802925c:	f7e2 fa0a 	bl	800b674 <lv_obj_get_child>
}
 8029260:	bd08      	pop	{r3, pc}

08029262 <get_selected_label_width>:
{
 8029262:	b570      	push	{r4, r5, r6, lr}
 8029264:	b086      	sub	sp, #24
 8029266:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(obj);
 8029268:	f7ff fff6 	bl	8029258 <get_label>
    if(label == NULL) return 0;
 802926c:	b308      	cbz	r0, 80292b2 <get_selected_label_width+0x50>
 802926e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029270:	2257      	movs	r2, #87	; 0x57
 8029272:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029276:	4620      	mov	r0, r4
 8029278:	f7e1 fab6 	bl	800a7e8 <lv_obj_get_style_prop>
 802927c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802927e:	2258      	movs	r2, #88	; 0x58
 8029280:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029284:	4620      	mov	r0, r4
 8029286:	f7e1 faaf 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802928a:	b204      	sxth	r4, r0
    const char * txt = lv_label_get_text(label);
 802928c:	4630      	mov	r0, r6
 802928e:	f7fe fe63 	bl	8027f58 <lv_label_get_text>
 8029292:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8029294:	2300      	movs	r3, #0
 8029296:	9302      	str	r3, [sp, #8]
 8029298:	f641 72ff 	movw	r2, #8191	; 0x1fff
 802929c:	9201      	str	r2, [sp, #4]
 802929e:	9300      	str	r3, [sp, #0]
 80292a0:	4623      	mov	r3, r4
 80292a2:	462a      	mov	r2, r5
 80292a4:	a805      	add	r0, sp, #20
 80292a6:	f7fa fe1a 	bl	8023ede <lv_txt_get_size>
    return size.x;
 80292aa:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
}
 80292ae:	b006      	add	sp, #24
 80292b0:	bd70      	pop	{r4, r5, r6, pc}
    if(label == NULL) return 0;
 80292b2:	2000      	movs	r0, #0
 80292b4:	e7fb      	b.n	80292ae <get_selected_label_width+0x4c>
	...

080292b8 <inf_normalize>:
{
 80292b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 80292ba:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 80292be:	f013 0f01 	tst.w	r3, #1
 80292c2:	d100      	bne.n	80292c6 <inf_normalize+0xe>
}
 80292c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80292c6:	4604      	mov	r4, r0
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80292c8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80292ca:	4b1e      	ldr	r3, [pc, #120]	; (8029344 <inf_normalize+0x8c>)
 80292cc:	fba3 1302 	umull	r1, r3, r3, r2
 80292d0:	1ad2      	subs	r2, r2, r3
 80292d2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80292d6:	f3c3 038f 	ubfx	r3, r3, #2, #16
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80292da:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80292de:	b289      	uxth	r1, r1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 80292e0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80292e2:	fbb2 f0f3 	udiv	r0, r2, r3
 80292e6:	fb03 2210 	mls	r2, r3, r0, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80292ea:	440a      	add	r2, r1
 80292ec:	b292      	uxth	r2, r2
 80292ee:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 80292f0:	fbb2 f0f3 	udiv	r0, r2, r3
 80292f4:	fb03 2310 	mls	r3, r3, r0, r2
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80292f8:	440b      	add	r3, r1
 80292fa:	8523      	strh	r3, [r4, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80292fc:	2257      	movs	r2, #87	; 0x57
 80292fe:	2100      	movs	r1, #0
 8029300:	4620      	mov	r0, r4
 8029302:	f7e1 fa71 	bl	800a7e8 <lv_obj_get_style_prop>
 8029306:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8029308:	2259      	movs	r2, #89	; 0x59
 802930a:	2100      	movs	r1, #0
 802930c:	4620      	mov	r0, r4
 802930e:	f7e1 fa6b 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8029312:	b207      	sxth	r7, r0
 8029314:	f9b5 5008 	ldrsh.w	r5, [r5, #8]
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 8029318:	4620      	mov	r0, r4
 802931a:	f7de fc0f 	bl	8007b3c <lv_obj_get_content_height>
 802931e:	4606      	mov	r6, r0
        lv_obj_t * label = get_label(obj);
 8029320:	4620      	mov	r0, r4
 8029322:	f7ff ff99 	bl	8029258 <get_label>
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8029326:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 802932a:	442f      	add	r7, r5
 802932c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 802932e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029332:	1069      	asrs	r1, r5, #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 8029334:	fb07 1103 	mla	r1, r7, r3, r1
 8029338:	ebc1 0166 	rsb	r1, r1, r6, asr #1
        lv_obj_set_y(label, new_y);
 802933c:	b209      	sxth	r1, r1
 802933e:	f7de fab4 	bl	80078aa <lv_obj_set_y>
}
 8029342:	e7bf      	b.n	80292c4 <inf_normalize+0xc>
 8029344:	24924925 	.word	0x24924925

08029348 <scroll_anim_ready_cb>:
{
 8029348:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 802934a:	6800      	ldr	r0, [r0, #0]
 802934c:	f7e2 f98e 	bl	800b66c <lv_obj_get_parent>
    inf_normalize(obj);
 8029350:	f7ff ffb2 	bl	80292b8 <inf_normalize>
}
 8029354:	bd08      	pop	{r3, pc}
	...

08029358 <refr_position>:
{
 8029358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802935c:	b093      	sub	sp, #76	; 0x4c
 802935e:	4681      	mov	r9, r0
 8029360:	460e      	mov	r6, r1
    lv_obj_t * label = get_label(obj);
 8029362:	f7ff ff79 	bl	8029258 <get_label>
    if(label == NULL) return;
 8029366:	2800      	cmp	r0, #0
 8029368:	d048      	beq.n	80293fc <refr_position+0xa4>
 802936a:	4605      	mov	r5, r0
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 802936c:	f7fe fdf4 	bl	8027f58 <lv_label_get_text>
 8029370:	4602      	mov	r2, r0
 8029372:	2100      	movs	r1, #0
 8029374:	4628      	mov	r0, r5
 8029376:	f7e2 f8b7 	bl	800b4e8 <lv_obj_calculate_style_text_align>
    switch(align) {
 802937a:	2802      	cmp	r0, #2
 802937c:	d041      	beq.n	8029402 <refr_position+0xaa>
 802937e:	2803      	cmp	r0, #3
 8029380:	d04f      	beq.n	8029422 <refr_position+0xca>
 8029382:	2801      	cmp	r0, #1
 8029384:	d05a      	beq.n	802943c <refr_position+0xe4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029386:	2257      	movs	r2, #87	; 0x57
 8029388:	2100      	movs	r1, #0
 802938a:	4648      	mov	r0, r9
 802938c:	f7e1 fa2c 	bl	800a7e8 <lv_obj_get_style_prop>
 8029390:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8029392:	2259      	movs	r2, #89	; 0x59
 8029394:	2100      	movs	r1, #0
 8029396:	4648      	mov	r0, r9
 8029398:	f7e1 fa26 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802939c:	fa0f fb80 	sxth.w	fp, r0
 80293a0:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 80293a4:	4648      	mov	r0, r9
 80293a6:	f7de fbc9 	bl	8007b3c <lv_obj_get_content_height>
 80293aa:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 80293ac:	2264      	movs	r2, #100	; 0x64
 80293ae:	2100      	movs	r1, #0
 80293b0:	4648      	mov	r0, r9
 80293b2:	f7e1 fa19 	bl	800a7e8 <lv_obj_get_style_prop>
 80293b6:	4607      	mov	r7, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 80293b8:	fa1f f880 	uxth.w	r8, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80293bc:	b116      	cbz	r6, 80293c4 <refr_position+0x6c>
 80293be:	f1b8 0f00 	cmp.w	r8, #0
 80293c2:	d140      	bne.n	8029446 <refr_position+0xee>
        inf_normalize(obj);
 80293c4:	4648      	mov	r0, r9
 80293c6:	f7ff ff77 	bl	80292b8 <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80293ca:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 80293ce:	44a3      	add	fp, r4
 80293d0:	f8b9 3026 	ldrh.w	r3, [r9, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80293d4:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80293d8:	1064      	asrs	r4, r4, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 80293da:	fb0b 4403 	mla	r4, fp, r3, r4
 80293de:	ebc4 046a 	rsb	r4, r4, sl, asr #1
 80293e2:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 80293e4:	b116      	cbz	r6, 80293ec <refr_position+0x94>
 80293e6:	f1b8 0f00 	cmp.w	r8, #0
 80293ea:	d139      	bne.n	8029460 <refr_position+0x108>
        lv_anim_del(label, set_y_anim);
 80293ec:	4927      	ldr	r1, [pc, #156]	; (802948c <refr_position+0x134>)
 80293ee:	4628      	mov	r0, r5
 80293f0:	f7f7 f9dc 	bl	80207ac <lv_anim_del>
        lv_obj_set_y(label, new_y);
 80293f4:	4621      	mov	r1, r4
 80293f6:	4628      	mov	r0, r5
 80293f8:	f7de fa57 	bl	80078aa <lv_obj_set_y>
}
 80293fc:	b013      	add	sp, #76	; 0x4c
 80293fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 8029402:	4648      	mov	r0, r9
 8029404:	f7de fb7d 	bl	8007b02 <lv_obj_get_content_width>
 8029408:	4604      	mov	r4, r0
 802940a:	4628      	mov	r0, r5
 802940c:	f7de fb6d 	bl	8007aea <lv_obj_get_width>
 8029410:	1a21      	subs	r1, r4, r0
 8029412:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8029416:	f341 014f 	sbfx	r1, r1, #1, #16
 802941a:	4628      	mov	r0, r5
 802941c:	f7de fa2e 	bl	800787c <lv_obj_set_x>
            break;
 8029420:	e7b1      	b.n	8029386 <refr_position+0x2e>
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 8029422:	4648      	mov	r0, r9
 8029424:	f7de fb6d 	bl	8007b02 <lv_obj_get_content_width>
 8029428:	4604      	mov	r4, r0
 802942a:	4628      	mov	r0, r5
 802942c:	f7de fb5d 	bl	8007aea <lv_obj_get_width>
 8029430:	1a21      	subs	r1, r4, r0
 8029432:	b209      	sxth	r1, r1
 8029434:	4628      	mov	r0, r5
 8029436:	f7de fa21 	bl	800787c <lv_obj_set_x>
            break;
 802943a:	e7a4      	b.n	8029386 <refr_position+0x2e>
            lv_obj_set_x(label, 0);
 802943c:	2100      	movs	r1, #0
 802943e:	4628      	mov	r0, r5
 8029440:	f7de fa1c 	bl	800787c <lv_obj_set_x>
            break;
 8029444:	e79f      	b.n	8029386 <refr_position+0x2e>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8029446:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 802944a:	44a3      	add	fp, r4
 802944c:	f8b9 3026 	ldrh.w	r3, [r9, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8029450:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8029454:	1064      	asrs	r4, r4, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 8029456:	fb0b 4403 	mla	r4, fp, r3, r4
 802945a:	ebc4 046a 	rsb	r4, r4, sl, asr #1
 802945e:	b224      	sxth	r4, r4
        lv_anim_init(&a);
 8029460:	a801      	add	r0, sp, #4
 8029462:	f7f7 f989 	bl	8020778 <lv_anim_init>
    a->var = var;
 8029466:	9501      	str	r5, [sp, #4]
    a->exec_cb = exec_cb;
 8029468:	4b08      	ldr	r3, [pc, #32]	; (802948c <refr_position+0x134>)
 802946a:	9302      	str	r3, [sp, #8]
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 802946c:	4628      	mov	r0, r5
 802946e:	f7de fb0e 	bl	8007a8e <lv_obj_get_y>
    a->start_value = start;
 8029472:	9009      	str	r0, [sp, #36]	; 0x24
    a->current_value = start;
 8029474:	900a      	str	r0, [sp, #40]	; 0x28
 8029476:	940b      	str	r4, [sp, #44]	; 0x2c
    a->time = duration;
 8029478:	b2bf      	uxth	r7, r7
 802947a:	970c      	str	r7, [sp, #48]	; 0x30
    a->ready_cb = ready_cb;
 802947c:	4b04      	ldr	r3, [pc, #16]	; (8029490 <refr_position+0x138>)
 802947e:	9304      	str	r3, [sp, #16]
    a->path_cb = path_cb;
 8029480:	4b04      	ldr	r3, [pc, #16]	; (8029494 <refr_position+0x13c>)
 8029482:	9308      	str	r3, [sp, #32]
        lv_anim_start(&a);
 8029484:	a801      	add	r0, sp, #4
 8029486:	f7f7 f9c9 	bl	802081c <lv_anim_start>
 802948a:	e7b7      	b.n	80293fc <refr_position+0xa4>
 802948c:	0802924f 	.word	0x0802924f
 8029490:	08029349 	.word	0x08029349
 8029494:	080208fb 	.word	0x080208fb

08029498 <get_sel_area>:
{
 8029498:	b5f0      	push	{r4, r5, r6, r7, lr}
 802949a:	b083      	sub	sp, #12
 802949c:	4606      	mov	r6, r0
 802949e:	460f      	mov	r7, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80294a0:	2257      	movs	r2, #87	; 0x57
 80294a2:	2100      	movs	r1, #0
 80294a4:	f7e1 f9a0 	bl	800a7e8 <lv_obj_get_style_prop>
 80294a8:	4604      	mov	r4, r0
 80294aa:	2257      	movs	r2, #87	; 0x57
 80294ac:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80294b0:	4630      	mov	r0, r6
 80294b2:	f7e1 f999 	bl	800a7e8 <lv_obj_get_style_prop>
 80294b6:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 80294ba:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80294be:	2259      	movs	r2, #89	; 0x59
 80294c0:	2100      	movs	r1, #0
 80294c2:	4630      	mov	r0, r6
 80294c4:	f7e1 f990 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 80294c8:	192b      	adds	r3, r5, r4
 80294ca:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80294ce:	eb00 0363 	add.w	r3, r0, r3, asr #1
 80294d2:	b29c      	uxth	r4, r3
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 80294d4:	8af5      	ldrh	r5, [r6, #22]
 80294d6:	4630      	mov	r0, r6
 80294d8:	f7de fb0d 	bl	8007af6 <lv_obj_get_height>
 80294dc:	b223      	sxth	r3, r4
 80294de:	eb03 33d4 	add.w	r3, r3, r4, lsr #15
 80294e2:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 80294e6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80294ea:	eb05 0560 	add.w	r5, r5, r0, asr #1
 80294ee:	b2ab      	uxth	r3, r5
 80294f0:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 80294f2:	4423      	add	r3, r4
 80294f4:	80fb      	strh	r3, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 80294f6:	4669      	mov	r1, sp
 80294f8:	4630      	mov	r0, r6
 80294fa:	f7de fa98 	bl	8007a2e <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 80294fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8029502:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 8029504:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8029508:	80bb      	strh	r3, [r7, #4]
}
 802950a:	b003      	add	sp, #12
 802950c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08029510 <lv_roller_label_event>:
{
 8029510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029512:	b091      	sub	sp, #68	; 0x44
 8029514:	460c      	mov	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8029516:	4608      	mov	r0, r1
 8029518:	f7da fc18 	bl	8003d4c <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 802951c:	2815      	cmp	r0, #21
 802951e:	d04b      	beq.n	80295b8 <lv_roller_label_event+0xa8>
 8029520:	4605      	mov	r5, r0
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 8029522:	4621      	mov	r1, r4
 8029524:	4851      	ldr	r0, [pc, #324]	; (802966c <lv_roller_label_event+0x15c>)
 8029526:	f7da faee 	bl	8003b06 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 802952a:	2801      	cmp	r0, #1
 802952c:	d107      	bne.n	802953e <lv_roller_label_event+0x2e>
    lv_obj_t * label = lv_event_get_target(e);
 802952e:	4620      	mov	r0, r4
 8029530:	f7da fc08 	bl	8003d44 <lv_event_get_target>
 8029534:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8029536:	2d13      	cmp	r5, #19
 8029538:	d003      	beq.n	8029542 <lv_roller_label_event+0x32>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 802953a:	2d29      	cmp	r5, #41	; 0x29
 802953c:	d016      	beq.n	802956c <lv_roller_label_event+0x5c>
}
 802953e:	b011      	add	sp, #68	; 0x44
 8029540:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_coord_t * s = lv_event_get_param(e);
 8029542:	4620      	mov	r0, r4
 8029544:	f7da fc06 	bl	8003d54 <lv_event_get_param>
 8029548:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 802954a:	4630      	mov	r0, r6
 802954c:	f7e2 f88e 	bl	800b66c <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 8029550:	f7ff fe87 	bl	8029262 <get_selected_label_width>
 8029554:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 8029556:	4630      	mov	r0, r6
 8029558:	f7de fac7 	bl	8007aea <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 802955c:	1a24      	subs	r4, r4, r0
 802955e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8029562:	4284      	cmp	r4, r0
 8029564:	bfb8      	it	lt
 8029566:	4604      	movlt	r4, r0
 8029568:	802c      	strh	r4, [r5, #0]
 802956a:	e7e8      	b.n	802953e <lv_roller_label_event+0x2e>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 802956c:	f7e2 f87e 	bl	800b66c <lv_obj_get_parent>
 8029570:	2100      	movs	r1, #0
 8029572:	f7ff fef1 	bl	8029358 <refr_position>
 8029576:	e7e2      	b.n	802953e <lv_roller_label_event+0x2e>
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 8029578:	68a6      	ldr	r6, [r4, #8]
        draw_ctx->clip_area = &clip2;
 802957a:	ab06      	add	r3, sp, #24
 802957c:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 802957e:	4628      	mov	r0, r5
 8029580:	f7fe fcea 	bl	8027f58 <lv_label_get_text>
 8029584:	4603      	mov	r3, r0
 8029586:	2200      	movs	r2, #0
 8029588:	9200      	str	r2, [sp, #0]
 802958a:	f105 0214 	add.w	r2, r5, #20
 802958e:	a908      	add	r1, sp, #32
 8029590:	4620      	mov	r0, r4
 8029592:	f7e4 f861 	bl	800d658 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 8029596:	60a6      	str	r6, [r4, #8]
 8029598:	e051      	b.n	802963e <lv_roller_label_event+0x12e>
        draw_ctx->clip_area = &clip2;
 802959a:	ab06      	add	r3, sp, #24
 802959c:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 802959e:	4628      	mov	r0, r5
 80295a0:	f7fe fcda 	bl	8027f58 <lv_label_get_text>
 80295a4:	4603      	mov	r3, r0
 80295a6:	2200      	movs	r2, #0
 80295a8:	9200      	str	r2, [sp, #0]
 80295aa:	f105 0214 	add.w	r2, r5, #20
 80295ae:	a908      	add	r1, sp, #32
 80295b0:	4620      	mov	r0, r4
 80295b2:	f7e4 f851 	bl	800d658 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 80295b6:	e056      	b.n	8029666 <lv_roller_label_event+0x156>
    lv_obj_t * label = lv_event_get_target(e);
 80295b8:	4620      	mov	r0, r4
 80295ba:	f7da fbc3 	bl	8003d44 <lv_event_get_target>
    lv_obj_t * label_obj = lv_event_get_target(e);
 80295be:	4620      	mov	r0, r4
 80295c0:	f7da fbc0 	bl	8003d44 <lv_event_get_target>
 80295c4:	4605      	mov	r5, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 80295c6:	f7e2 f851 	bl	800b66c <lv_obj_get_parent>
 80295ca:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 80295cc:	a808      	add	r0, sp, #32
 80295ce:	f7e4 f80f 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 80295d2:	aa08      	add	r2, sp, #32
 80295d4:	2100      	movs	r1, #0
 80295d6:	4630      	mov	r0, r6
 80295d8:	f7dd feb5 	bl	8007346 <lv_obj_init_draw_label_dsc>
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 80295dc:	4628      	mov	r0, r5
 80295de:	f7fe fcbd 	bl	8027f5c <lv_label_get_recolor>
 80295e2:	b128      	cbz	r0, 80295f0 <lv_roller_label_event+0xe0>
 80295e4:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 80295e8:	f043 0301 	orr.w	r3, r3, #1
 80295ec:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80295f0:	4620      	mov	r0, r4
 80295f2:	f7da fc1b 	bl	8003e2c <lv_event_get_draw_ctx>
 80295f6:	4604      	mov	r4, r0
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80295f8:	6887      	ldr	r7, [r0, #8]
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 80295fa:	f106 0214 	add.w	r2, r6, #20
 80295fe:	4639      	mov	r1, r7
 8029600:	a802      	add	r0, sp, #8
 8029602:	f7f7 fa1c 	bl	8020a3e <_lv_area_intersect>
 8029606:	2800      	cmp	r0, #0
 8029608:	d099      	beq.n	802953e <lv_roller_label_event+0x2e>
    draw_ctx->clip_area = &roller_clip_area;
 802960a:	ab02      	add	r3, sp, #8
 802960c:	60a3      	str	r3, [r4, #8]
    get_sel_area(roller, &sel_area);
 802960e:	a904      	add	r1, sp, #16
 8029610:	4630      	mov	r0, r6
 8029612:	f7ff ff41 	bl	8029498 <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 8029616:	8aab      	ldrh	r3, [r5, #20]
 8029618:	f8ad 3018 	strh.w	r3, [sp, #24]
    clip2.y1 = label_obj->coords.y1;
 802961c:	8aeb      	ldrh	r3, [r5, #22]
 802961e:	f8ad 301a 	strh.w	r3, [sp, #26]
    clip2.x2 = label_obj->coords.x2;
 8029622:	8b2b      	ldrh	r3, [r5, #24]
 8029624:	f8ad 301c 	strh.w	r3, [sp, #28]
    clip2.y2 = sel_area.y1;
 8029628:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802962c:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8029630:	aa06      	add	r2, sp, #24
 8029632:	68a1      	ldr	r1, [r4, #8]
 8029634:	4610      	mov	r0, r2
 8029636:	f7f7 fa02 	bl	8020a3e <_lv_area_intersect>
 802963a:	2800      	cmp	r0, #0
 802963c:	d19c      	bne.n	8029578 <lv_roller_label_event+0x68>
    clip2.x1 = label_obj->coords.x1;
 802963e:	8aab      	ldrh	r3, [r5, #20]
 8029640:	f8ad 3018 	strh.w	r3, [sp, #24]
    clip2.y1 = sel_area.y2;
 8029644:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8029648:	f8ad 301a 	strh.w	r3, [sp, #26]
    clip2.x2 = label_obj->coords.x2;
 802964c:	8b2b      	ldrh	r3, [r5, #24]
 802964e:	f8ad 301c 	strh.w	r3, [sp, #28]
    clip2.y2 = label_obj->coords.y2;
 8029652:	8b6b      	ldrh	r3, [r5, #26]
 8029654:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8029658:	aa06      	add	r2, sp, #24
 802965a:	68a1      	ldr	r1, [r4, #8]
 802965c:	4610      	mov	r0, r2
 802965e:	f7f7 f9ee 	bl	8020a3e <_lv_area_intersect>
 8029662:	2800      	cmp	r0, #0
 8029664:	d199      	bne.n	802959a <lv_roller_label_event+0x8a>
    draw_ctx->clip_area = clip_area_ori;
 8029666:	60a7      	str	r7, [r4, #8]
 8029668:	e769      	b.n	802953e <lv_roller_label_event+0x2e>
 802966a:	bf00      	nop
 802966c:	08033098 	.word	0x08033098

08029670 <lv_roller_set_options>:
    LV_ASSERT_NULL(options);
 8029670:	b189      	cbz	r1, 8029696 <lv_roller_set_options+0x26>
{
 8029672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029676:	b083      	sub	sp, #12
 8029678:	4604      	mov	r4, r0
 802967a:	4615      	mov	r5, r2
 802967c:	4688      	mov	r8, r1
    lv_obj_t * label = get_label(obj);
 802967e:	f7ff fdeb 	bl	8029258 <get_label>
 8029682:	4681      	mov	r9, r0
    roller->sel_opt_id     = 0;
 8029684:	2300      	movs	r3, #0
 8029686:	84e3      	strh	r3, [r4, #38]	; 0x26
    roller->sel_opt_id_ori = 0;
 8029688:	8523      	strh	r3, [r4, #40]	; 0x28
    roller->option_cnt = 0;
 802968a:	84a3      	strh	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 802968c:	f898 3000 	ldrb.w	r3, [r8]
 8029690:	b15b      	cbz	r3, 80296aa <lv_roller_set_options+0x3a>
 8029692:	4641      	mov	r1, r8
 8029694:	e003      	b.n	802969e <lv_roller_set_options+0x2e>
    LV_ASSERT_NULL(options);
 8029696:	e7fe      	b.n	8029696 <lv_roller_set_options+0x26>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8029698:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802969c:	b12b      	cbz	r3, 80296aa <lv_roller_set_options+0x3a>
        if(options[cnt] == '\n') roller->option_cnt++;
 802969e:	2b0a      	cmp	r3, #10
 80296a0:	d1fa      	bne.n	8029698 <lv_roller_set_options+0x28>
 80296a2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80296a4:	3301      	adds	r3, #1
 80296a6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80296a8:	e7f6      	b.n	8029698 <lv_roller_set_options+0x28>
    roller->option_cnt++; /*Last option has no `\n`*/
 80296aa:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80296ac:	3301      	adds	r3, #1
 80296ae:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 80296b0:	b98d      	cbnz	r5, 80296d6 <lv_roller_set_options+0x66>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 80296b2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80296b6:	f36f 0300 	bfc	r3, #0, #1
 80296ba:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 80296be:	4641      	mov	r1, r8
 80296c0:	4648      	mov	r0, r9
 80296c2:	f7ff f90f 	bl	80288e4 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80296c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80296c8:	8523      	strh	r3, [r4, #40]	; 0x28
    lv_obj_refresh_ext_draw_size(label);
 80296ca:	4648      	mov	r0, r9
 80296cc:	f7de f810 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
}
 80296d0:	b003      	add	sp, #12
 80296d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        roller->mode = LV_ROLLER_MODE_INFINITE;
 80296d6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80296da:	f043 0301 	orr.w	r3, r3, #1
 80296de:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 80296e2:	4640      	mov	r0, r8
 80296e4:	f7d6 fda8 	bl	8000238 <strlen>
 80296e8:	1c47      	adds	r7, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 80296ea:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
 80296ee:	9301      	str	r3, [sp, #4]
 80296f0:	4618      	mov	r0, r3
 80296f2:	f7f8 f90b 	bl	802190c <lv_mem_buf_get>
 80296f6:	4683      	mov	fp, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 80296f8:	19c6      	adds	r6, r0, r7
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 80296fa:	2507      	movs	r5, #7
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 80296fc:	f04f 0a0a 	mov.w	sl, #10
            strcpy(&opt_extra[opt_len * i], options);
 8029700:	4641      	mov	r1, r8
 8029702:	1bf0      	subs	r0, r6, r7
 8029704:	f003 f8a4 	bl	802c850 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8029708:	f806 ac01 	strb.w	sl, [r6, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 802970c:	3d01      	subs	r5, #1
 802970e:	443e      	add	r6, r7
 8029710:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8029714:	d1f4      	bne.n	8029700 <lv_roller_set_options+0x90>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8029716:	9b01      	ldr	r3, [sp, #4]
 8029718:	445b      	add	r3, fp
 802971a:	2200      	movs	r2, #0
 802971c:	f803 2c01 	strb.w	r2, [r3, #-1]
        lv_label_set_text(label, opt_extra);
 8029720:	4659      	mov	r1, fp
 8029722:	4648      	mov	r0, r9
 8029724:	f7ff f8de 	bl	80288e4 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 8029728:	4658      	mov	r0, fp
 802972a:	f7f8 f951 	bl	80219d0 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 802972e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8029730:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8029734:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 8029736:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802973a:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 802973c:	4620      	mov	r0, r4
 802973e:	f7ff fdbb 	bl	80292b8 <inf_normalize>
 8029742:	e7c0      	b.n	80296c6 <lv_roller_set_options+0x56>

08029744 <lv_roller_constructor>:
{
 8029744:	b538      	push	{r3, r4, r5, lr}
 8029746:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8029748:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 802974c:	f36f 0300 	bfc	r3, #0, #1
 8029750:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    roller->option_cnt = 0;
 8029754:	2500      	movs	r5, #0
 8029756:	848d      	strh	r5, [r1, #36]	; 0x24
    roller->sel_opt_id = 0;
 8029758:	84cd      	strh	r5, [r1, #38]	; 0x26
    roller->sel_opt_id_ori = 0;
 802975a:	850d      	strh	r5, [r1, #40]	; 0x28
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 802975c:	2110      	movs	r1, #16
 802975e:	4620      	mov	r0, r4
 8029760:	f7dd f8e0 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 8029764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8029768:	4620      	mov	r0, r4
 802976a:	f7dd f8db 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 802976e:	4621      	mov	r1, r4
 8029770:	4805      	ldr	r0, [pc, #20]	; (8029788 <lv_roller_constructor+0x44>)
 8029772:	f7dd fb8d 	bl	8006e90 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 8029776:	f7dd fc38 	bl	8006fea <lv_obj_class_init_obj>
    lv_roller_set_options(obj, "Option 1\nOption 2\nOption 3\nOption 4\nOption 5", LV_ROLLER_MODE_NORMAL);
 802977a:	462a      	mov	r2, r5
 802977c:	4903      	ldr	r1, [pc, #12]	; (802978c <lv_roller_constructor+0x48>)
 802977e:	4620      	mov	r0, r4
 8029780:	f7ff ff76 	bl	8029670 <lv_roller_set_options>
}
 8029784:	bd38      	pop	{r3, r4, r5, pc}
 8029786:	bf00      	nop
 8029788:	08033098 	.word	0x08033098
 802978c:	0803304c 	.word	0x0803304c

08029790 <lv_roller_set_selected>:
{
 8029790:	b538      	push	{r3, r4, r5, lr}
 8029792:	460b      	mov	r3, r1
 8029794:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8029796:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 802979a:	f012 0f01 	tst.w	r2, #1
 802979e:	d025      	beq.n	80297ec <lv_roller_set_selected+0x5c>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 80297a0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80297a2:	4c18      	ldr	r4, [pc, #96]	; (8029804 <lv_roller_set_selected+0x74>)
 80297a4:	fba4 4c02 	umull	r4, ip, r4, r2
 80297a8:	eba2 020c 	sub.w	r2, r2, ip
 80297ac:	eb0c 0c52 	add.w	ip, ip, r2, lsr #1
 80297b0:	f3cc 0c8f 	ubfx	ip, ip, #2, #16
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 80297b4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
        if(sel_opt < real_option_cnt) {
 80297b6:	459c      	cmp	ip, r3
 80297b8:	d918      	bls.n	80297ec <lv_roller_set_selected+0x5c>
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 80297ba:	fbb2 f4fc 	udiv	r4, r2, ip
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 80297be:	fb0c f404 	mul.w	r4, ip, r4
 80297c2:	b2a4      	uxth	r4, r4
 80297c4:	1b12      	subs	r2, r2, r4
 80297c6:	b295      	uxth	r5, r2
            int32_t sel_opt_signed = sel_opt;
 80297c8:	469e      	mov	lr, r3
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 80297ca:	b212      	sxth	r2, r2
 80297cc:	1ad2      	subs	r2, r2, r3
 80297ce:	2a00      	cmp	r2, #0
 80297d0:	bfb8      	it	lt
 80297d2:	4252      	neglt	r2, r2
 80297d4:	ebb2 0f5c 	cmp.w	r2, ip, lsr #1
 80297d8:	d905      	bls.n	80297e6 <lv_roller_set_selected+0x56>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 80297da:	42ab      	cmp	r3, r5
 80297dc:	bf34      	ite	cc
 80297de:	eb03 0e0c 	addcc.w	lr, r3, ip
                else sel_opt_signed -= real_option_cnt;
 80297e2:	eba3 0e0c 	subcs.w	lr, r3, ip
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 80297e6:	eb04 030e 	add.w	r3, r4, lr
 80297ea:	b29b      	uxth	r3, r3
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 80297ec:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80297ee:	429a      	cmp	r2, r3
 80297f0:	bf9c      	itt	ls
 80297f2:	f102 33ff 	addls.w	r3, r2, #4294967295	; 0xffffffff
 80297f6:	b29b      	uxthls	r3, r3
 80297f8:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 80297fa:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 80297fc:	f7ff fdac 	bl	8029358 <refr_position>
}
 8029800:	bd38      	pop	{r3, r4, r5, pc}
 8029802:	bf00      	nop
 8029804:	24924925 	.word	0x24924925

08029808 <lv_roller_event>:
{
 8029808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802980c:	b09a      	sub	sp, #104	; 0x68
 802980e:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8029810:	48c4      	ldr	r0, [pc, #784]	; (8029b24 <lv_roller_event+0x31c>)
 8029812:	f7da f978 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8029816:	2801      	cmp	r0, #1
 8029818:	d002      	beq.n	8029820 <lv_roller_event+0x18>
}
 802981a:	b01a      	add	sp, #104	; 0x68
 802981c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8029820:	4628      	mov	r0, r5
 8029822:	f7da fa93 	bl	8003d4c <lv_event_get_code>
 8029826:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8029828:	4628      	mov	r0, r5
 802982a:	f7da fa8b 	bl	8003d44 <lv_event_get_target>
 802982e:	4606      	mov	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8029830:	2c2c      	cmp	r4, #44	; 0x2c
 8029832:	f000 80d8 	beq.w	80299e6 <lv_roller_event+0x1de>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8029836:	2c2a      	cmp	r4, #42	; 0x2a
 8029838:	f000 80de 	beq.w	80299f8 <lv_roller_event+0x1f0>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 802983c:	2c29      	cmp	r4, #41	; 0x29
 802983e:	f000 80ea 	beq.w	8029a16 <lv_roller_event+0x20e>
    else if(code == LV_EVENT_PRESSED) {
 8029842:	2c01      	cmp	r4, #1
 8029844:	f000 80eb 	beq.w	8029a1e <lv_roller_event+0x216>
    else if(code == LV_EVENT_PRESSING) {
 8029848:	2c02      	cmp	r4, #2
 802984a:	f000 80f4 	beq.w	8029a36 <lv_roller_event+0x22e>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 802984e:	2c08      	cmp	r4, #8
 8029850:	f000 810f 	beq.w	8029a72 <lv_roller_event+0x26a>
 8029854:	2c03      	cmp	r4, #3
 8029856:	f000 810c 	beq.w	8029a72 <lv_roller_event+0x26a>
    else if(code == LV_EVENT_FOCUSED) {
 802985a:	2c0e      	cmp	r4, #14
 802985c:	f000 81a4 	beq.w	8029ba8 <lv_roller_event+0x3a0>
    else if(code == LV_EVENT_DEFOCUSED) {
 8029860:	2c0f      	cmp	r4, #15
 8029862:	f000 81be 	beq.w	8029be2 <lv_roller_event+0x3da>
    else if(code == LV_EVENT_KEY) {
 8029866:	2c0d      	cmp	r4, #13
 8029868:	f000 81c5 	beq.w	8029bf6 <lv_roller_event+0x3ee>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802986c:	2c13      	cmp	r4, #19
 802986e:	f000 81eb 	beq.w	8029c48 <lv_roller_event+0x440>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8029872:	2c15      	cmp	r4, #21
 8029874:	d001      	beq.n	802987a <lv_roller_event+0x72>
 8029876:	2c18      	cmp	r4, #24
 8029878:	d1cf      	bne.n	802981a <lv_roller_event+0x12>
    lv_event_code_t code = lv_event_get_code(e);
 802987a:	4628      	mov	r0, r5
 802987c:	f7da fa66 	bl	8003d4c <lv_event_get_code>
 8029880:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8029882:	4628      	mov	r0, r5
 8029884:	f7da fa5e 	bl	8003d44 <lv_event_get_target>
 8029888:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 802988a:	2e15      	cmp	r6, #21
 802988c:	f000 81e1 	beq.w	8029c52 <lv_roller_event+0x44a>
    else if(code == LV_EVENT_DRAW_POST) {
 8029890:	2e18      	cmp	r6, #24
 8029892:	d1c2      	bne.n	802981a <lv_roller_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8029894:	4628      	mov	r0, r5
 8029896:	f7da fac9 	bl	8003e2c <lv_event_get_draw_ctx>
 802989a:	4606      	mov	r6, r0
        lv_draw_label_dsc_init(&label_dsc);
 802989c:	a80c      	add	r0, sp, #48	; 0x30
 802989e:	f7e3 fea7 	bl	800d5f0 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 80298a2:	aa0c      	add	r2, sp, #48	; 0x30
 80298a4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80298a8:	4620      	mov	r0, r4
 80298aa:	f7dd fd4c 	bl	8007346 <lv_obj_init_draw_label_dsc>
        get_sel_area(obj, &sel_area);
 80298ae:	a906      	add	r1, sp, #24
 80298b0:	4620      	mov	r0, r4
 80298b2:	f7ff fdf1 	bl	8029498 <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 80298b6:	aa06      	add	r2, sp, #24
 80298b8:	68b1      	ldr	r1, [r6, #8]
 80298ba:	a808      	add	r0, sp, #32
 80298bc:	f7f7 f8bf 	bl	8020a3e <_lv_area_intersect>
        if(area_ok) {
 80298c0:	2800      	cmp	r0, #0
 80298c2:	d0aa      	beq.n	802981a <lv_roller_event+0x12>
            lv_obj_t * label = get_label(obj);
 80298c4:	4620      	mov	r0, r4
 80298c6:	f7ff fcc7 	bl	8029258 <get_label>
 80298ca:	4607      	mov	r7, r0
            if(lv_label_get_recolor(label)) label_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 80298cc:	f7fe fb46 	bl	8027f5c <lv_label_get_recolor>
 80298d0:	b128      	cbz	r0, 80298de <lv_roller_event+0xd6>
 80298d2:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 80298d6:	f043 0301 	orr.w	r3, r3, #1
 80298da:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 80298de:	4638      	mov	r0, r7
 80298e0:	f7fe fb3a 	bl	8027f58 <lv_label_get_text>
 80298e4:	4605      	mov	r5, r0
 80298e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80298ea:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 80298ee:	f9bd a042 	ldrsh.w	sl, [sp, #66]	; 0x42
 80298f2:	4620      	mov	r0, r4
 80298f4:	f7de f8f9 	bl	8007aea <lv_obj_get_width>
 80298f8:	2302      	movs	r3, #2
 80298fa:	9302      	str	r3, [sp, #8]
 80298fc:	9001      	str	r0, [sp, #4]
 80298fe:	f8cd a000 	str.w	sl, [sp]
 8029902:	464b      	mov	r3, r9
 8029904:	4642      	mov	r2, r8
 8029906:	4629      	mov	r1, r5
 8029908:	a805      	add	r0, sp, #20
 802990a:	f7fa fae8 	bl	8023ede <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 802990e:	4620      	mov	r0, r4
 8029910:	f7de f8f1 	bl	8007af6 <lv_obj_get_height>
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8029914:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8029918:	f340 084f 	sbfx	r8, r0, #1, #16
 802991c:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 8029920:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8029924:	4443      	add	r3, r8
 8029926:	1aed      	subs	r5, r5, r3
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8029928:	03ad      	lsls	r5, r5, #14
 802992a:	4638      	mov	r0, r7
 802992c:	f7de f8e3 	bl	8007af6 <lv_obj_get_height>
 8029930:	fb95 f5f0 	sdiv	r5, r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029934:	2257      	movs	r2, #87	; 0x57
 8029936:	2100      	movs	r1, #0
 8029938:	4620      	mov	r0, r4
 802993a:	f7e0 ff55 	bl	800a7e8 <lv_obj_get_style_prop>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 802993e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029940:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029944:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8029948:	1a9b      	subs	r3, r3, r2
 802994a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            res_p.y -= corr;
 802994e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8029952:	eba2 0263 	sub.w	r2, r2, r3, asr #1
 8029956:	b212      	sxth	r2, r2
 8029958:	f8ad 2016 	strh.w	r2, [sp, #22]
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 802995c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8029960:	4488      	add	r8, r1
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 8029962:	fb05 f202 	mul.w	r2, r5, r2
 8029966:	eb08 32a2 	add.w	r2, r8, r2, asr #14
            label_sel_y -= corr;
 802996a:	f343 034f 	sbfx	r3, r3, #1, #16
 802996e:	1ad5      	subs	r5, r2, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8029970:	2232      	movs	r2, #50	; 0x32
 8029972:	2100      	movs	r1, #0
 8029974:	4620      	mov	r0, r4
 8029976:	f7e0 ff37 	bl	800a7e8 <lv_obj_get_style_prop>
 802997a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802997c:	2212      	movs	r2, #18
 802997e:	2100      	movs	r1, #0
 8029980:	4620      	mov	r0, r4
 8029982:	f7e0 ff31 	bl	800a7e8 <lv_obj_get_style_prop>
 8029986:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8029988:	2213      	movs	r2, #19
 802998a:	2100      	movs	r1, #0
 802998c:	4620      	mov	r0, r4
 802998e:	f7e0 ff2b 	bl	800a7e8 <lv_obj_get_style_prop>
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 8029992:	fa1f f388 	uxth.w	r3, r8
 8029996:	eb03 0209 	add.w	r2, r3, r9
 802999a:	8aa1      	ldrh	r1, [r4, #20]
 802999c:	440a      	add	r2, r1
 802999e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            label_sel_area.y1 = label_sel_y;
 80299a2:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 80299a6:	4403      	add	r3, r0
 80299a8:	8b22      	ldrh	r2, [r4, #24]
 80299aa:	1ad3      	subs	r3, r2, r3
 80299ac:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 80299b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80299b4:	441d      	add	r5, r3
 80299b6:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 80299ba:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 80299be:	f043 0302 	orr.w	r3, r3, #2
 80299c2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80299c6:	68b4      	ldr	r4, [r6, #8]
            draw_ctx->clip_area = &mask_sel;
 80299c8:	ab08      	add	r3, sp, #32
 80299ca:	60b3      	str	r3, [r6, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 80299cc:	4638      	mov	r0, r7
 80299ce:	f7fe fac3 	bl	8027f58 <lv_label_get_text>
 80299d2:	4603      	mov	r3, r0
 80299d4:	2200      	movs	r2, #0
 80299d6:	9200      	str	r2, [sp, #0]
 80299d8:	aa0a      	add	r2, sp, #40	; 0x28
 80299da:	a90c      	add	r1, sp, #48	; 0x30
 80299dc:	4630      	mov	r0, r6
 80299de:	f7e3 fe3b 	bl	800d658 <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 80299e2:	60b4      	str	r4, [r6, #8]
 80299e4:	e719      	b.n	802981a <lv_roller_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 80299e6:	4628      	mov	r0, r5
 80299e8:	f7da f9b4 	bl	8003d54 <lv_event_get_param>
 80299ec:	4604      	mov	r4, r0
        p->x = get_selected_label_width(obj);
 80299ee:	4630      	mov	r0, r6
 80299f0:	f7ff fc37 	bl	8029262 <get_selected_label_width>
 80299f4:	8020      	strh	r0, [r4, #0]
 80299f6:	e710      	b.n	802981a <lv_roller_event+0x12>
        lv_obj_t * label = get_label(obj);
 80299f8:	f7ff fc2e 	bl	8029258 <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 80299fc:	b118      	cbz	r0, 8029a06 <lv_roller_event+0x1fe>
 80299fe:	2200      	movs	r2, #0
 8029a00:	212a      	movs	r1, #42	; 0x2a
 8029a02:	f7da f97d 	bl	8003d00 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 8029a06:	4630      	mov	r0, r6
 8029a08:	f7de f90c 	bl	8007c24 <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 8029a0c:	2100      	movs	r1, #0
 8029a0e:	4630      	mov	r0, r6
 8029a10:	f7ff fca2 	bl	8029358 <refr_position>
 8029a14:	e701      	b.n	802981a <lv_roller_event+0x12>
        refr_position(obj, LV_ANIM_OFF);
 8029a16:	2100      	movs	r1, #0
 8029a18:	f7ff fc9e 	bl	8029358 <refr_position>
 8029a1c:	e6fd      	b.n	802981a <lv_roller_event+0x12>
        roller->moved = 0;
 8029a1e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8029a22:	f36f 0341 	bfc	r3, #1, #1
 8029a26:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 8029a2a:	f7ff fc15 	bl	8029258 <get_label>
 8029a2e:	493e      	ldr	r1, [pc, #248]	; (8029b28 <lv_roller_event+0x320>)
 8029a30:	f7f6 febc 	bl	80207ac <lv_anim_del>
 8029a34:	e6f1      	b.n	802981a <lv_roller_event+0x12>
        lv_indev_t * indev = lv_indev_get_act();
 8029a36:	f7da fd09 	bl	800444c <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 8029a3a:	a90c      	add	r1, sp, #48	; 0x30
 8029a3c:	f7da fdb6 	bl	80045ac <lv_indev_get_vect>
        if(p.y) {
 8029a40:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8029a44:	2b00      	cmp	r3, #0
 8029a46:	f43f aee8 	beq.w	802981a <lv_roller_event+0x12>
            lv_obj_t * label = get_label(obj);
 8029a4a:	4630      	mov	r0, r6
 8029a4c:	f7ff fc04 	bl	8029258 <get_label>
 8029a50:	4604      	mov	r4, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 8029a52:	f7de f81c 	bl	8007a8e <lv_obj_get_y>
 8029a56:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8029a5a:	4401      	add	r1, r0
 8029a5c:	b209      	sxth	r1, r1
 8029a5e:	4620      	mov	r0, r4
 8029a60:	f7dd ff23 	bl	80078aa <lv_obj_set_y>
            roller->moved = 1;
 8029a64:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 8029a68:	f043 0302 	orr.w	r3, r3, #2
 8029a6c:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 8029a70:	e6d3      	b.n	802981a <lv_roller_event+0x12>
    lv_obj_t * label = get_label(obj);
 8029a72:	4630      	mov	r0, r6
 8029a74:	f7ff fbf0 	bl	8029258 <get_label>
    if(label == NULL) return LV_RES_OK;
 8029a78:	4680      	mov	r8, r0
 8029a7a:	2800      	cmp	r0, #0
 8029a7c:	f43f aecd 	beq.w	802981a <lv_roller_event+0x12>
    lv_indev_t * indev = lv_indev_get_act();
 8029a80:	f7da fce4 	bl	800444c <lv_indev_get_act>
 8029a84:	4604      	mov	r4, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8029a86:	f7da fce7 	bl	8004458 <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8029a8a:	2804      	cmp	r0, #4
 8029a8c:	f000 80f8 	beq.w	8029c80 <lv_roller_event+0x478>
 8029a90:	2802      	cmp	r0, #2
 8029a92:	f000 8105 	beq.w	8029ca0 <lv_roller_event+0x498>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8029a96:	4620      	mov	r0, r4
 8029a98:	f7da fcde 	bl	8004458 <lv_indev_get_type>
 8029a9c:	2801      	cmp	r0, #1
 8029a9e:	d128      	bne.n	8029af2 <lv_roller_event+0x2ea>
        if(roller->moved == 0) {
 8029aa0:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 8029aa4:	f013 0f02 	tst.w	r3, #2
 8029aa8:	d142      	bne.n	8029b30 <lv_roller_event+0x328>
            lv_indev_get_point(indev, &p);
 8029aaa:	a90a      	add	r1, sp, #40	; 0x28
 8029aac:	4620      	mov	r0, r4
 8029aae:	f7da fd4a 	bl	8004546 <lv_indev_get_point>
            p.y -= label->coords.y1;
 8029ab2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8029ab6:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 8029aba:	1a9b      	subs	r3, r3, r2
 8029abc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            p.x -= label->coords.x1;
 8029ac0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8029ac4:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8029ac8:	1a9b      	subs	r3, r3, r2
 8029aca:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            letter_i = lv_label_get_letter_on(label, &p);
 8029ace:	a90a      	add	r1, sp, #40	; 0x28
 8029ad0:	4640      	mov	r0, r8
 8029ad2:	f7fe fb47 	bl	8028164 <lv_label_get_letter_on>
 8029ad6:	4607      	mov	r7, r0
            const char * txt  = lv_label_get_text(label);
 8029ad8:	4640      	mov	r0, r8
 8029ada:	f7fe fa3d 	bl	8027f58 <lv_label_get_text>
 8029ade:	4681      	mov	r9, r0
            uint32_t i        = 0;
 8029ae0:	2300      	movs	r3, #0
 8029ae2:	930c      	str	r3, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8029ae4:	b1e7      	cbz	r7, 8029b20 <lv_roller_event+0x318>
 8029ae6:	461c      	mov	r4, r3
            new_opt = 0;
 8029ae8:	461d      	mov	r5, r3
            uint32_t i_prev   = 0;
 8029aea:	4698      	mov	r8, r3
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8029aec:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8029b2c <lv_roller_event+0x324>
 8029af0:	e00a      	b.n	8029b08 <lv_roller_event+0x300>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8029af2:	4620      	mov	r0, r4
 8029af4:	f7da fcb0 	bl	8004458 <lv_indev_get_type>
 8029af8:	2803      	cmp	r0, #3
 8029afa:	d147      	bne.n	8029b8c <lv_roller_event+0x384>
 8029afc:	e7d0      	b.n	8029aa0 <lv_roller_event+0x298>
                i_prev = i;
 8029afe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 8029b02:	3401      	adds	r4, #1
 8029b04:	42a7      	cmp	r7, r4
 8029b06:	d03f      	beq.n	8029b88 <lv_roller_event+0x380>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8029b08:	f8da 3000 	ldr.w	r3, [sl]
 8029b0c:	a90c      	add	r1, sp, #48	; 0x30
 8029b0e:	4648      	mov	r0, r9
 8029b10:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 8029b12:	280a      	cmp	r0, #10
 8029b14:	d1f3      	bne.n	8029afe <lv_roller_event+0x2f6>
 8029b16:	45b8      	cmp	r8, r7
 8029b18:	bf1c      	itt	ne
 8029b1a:	3501      	addne	r5, #1
 8029b1c:	b22d      	sxthne	r5, r5
 8029b1e:	e7ee      	b.n	8029afe <lv_roller_event+0x2f6>
            new_opt = 0;
 8029b20:	2500      	movs	r5, #0
 8029b22:	e031      	b.n	8029b88 <lv_roller_event+0x380>
 8029b24:	0803307c 	.word	0x0803307c
 8029b28:	0802924f 	.word	0x0802924f
 8029b2c:	2000075c 	.word	0x2000075c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029b30:	2257      	movs	r2, #87	; 0x57
 8029b32:	2100      	movs	r1, #0
 8029b34:	4630      	mov	r0, r6
 8029b36:	f7e0 fe57 	bl	800a7e8 <lv_obj_get_style_prop>
 8029b3a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8029b3c:	2259      	movs	r2, #89	; 0x59
 8029b3e:	2100      	movs	r1, #0
 8029b40:	4630      	mov	r0, r6
 8029b42:	f7e0 fe51 	bl	800a7e8 <lv_obj_get_style_prop>
            lv_coord_t label_unit = font_h + line_space;
 8029b46:	892d      	ldrh	r5, [r5, #8]
 8029b48:	4405      	add	r5, r0
 8029b4a:	b22f      	sxth	r7, r5
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 8029b4c:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8029b50:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8029b54:	1a9b      	subs	r3, r3, r2
 8029b56:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8029b5a:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8029b5e:	b21d      	sxth	r5, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 8029b60:	f8b8 8016 	ldrh.w	r8, [r8, #22]
 8029b64:	210c      	movs	r1, #12
 8029b66:	4620      	mov	r0, r4
 8029b68:	f7dc fa8a 	bl	8006080 <lv_indev_scroll_throw_predict>
 8029b6c:	eb08 0300 	add.w	r3, r8, r0
            int32_t id = (mid - label_y1) / label_unit;
 8029b70:	b21b      	sxth	r3, r3
 8029b72:	1aed      	subs	r5, r5, r3
 8029b74:	fb95 f5f7 	sdiv	r5, r5, r7
            if(id < 0) id = 0;
 8029b78:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 8029b7c:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 8029b7e:	429d      	cmp	r5, r3
 8029b80:	bfa8      	it	ge
 8029b82:	f103 35ff 	addge.w	r5, r3, #4294967295	; 0xffffffff
            new_opt = id;
 8029b86:	b22d      	sxth	r5, r5
        if(new_opt >= 0) {
 8029b88:	2d00      	cmp	r5, #0
 8029b8a:	da07      	bge.n	8029b9c <lv_roller_event+0x394>
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 8029b8c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8029b8e:	930c      	str	r3, [sp, #48]	; 0x30
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 8029b90:	aa0c      	add	r2, sp, #48	; 0x30
 8029b92:	211c      	movs	r1, #28
 8029b94:	4630      	mov	r0, r6
 8029b96:	f7da f8b3 	bl	8003d00 <lv_event_send>
    return res;
 8029b9a:	e63e      	b.n	802981a <lv_roller_event+0x12>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 8029b9c:	2201      	movs	r2, #1
 8029b9e:	b2a9      	uxth	r1, r5
 8029ba0:	4630      	mov	r0, r6
 8029ba2:	f7ff fdf5 	bl	8029790 <lv_roller_set_selected>
 8029ba6:	e7f1      	b.n	8029b8c <lv_roller_event+0x384>
        lv_group_t * g             = lv_obj_get_group(obj);
 8029ba8:	f7dc ff27 	bl	80069fa <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8029bac:	f7da fb6c 	bl	8004288 <lv_group_get_editing>
 8029bb0:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8029bb2:	f7da fc4b 	bl	800444c <lv_indev_get_act>
 8029bb6:	f7da fc4f 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8029bba:	2804      	cmp	r0, #4
 8029bbc:	d002      	beq.n	8029bc4 <lv_roller_event+0x3bc>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 8029bbe:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8029bc0:	8533      	strh	r3, [r6, #40]	; 0x28
 8029bc2:	e62a      	b.n	802981a <lv_roller_event+0x12>
            if(!editing) {
 8029bc4:	b954      	cbnz	r4, 8029bdc <lv_roller_event+0x3d4>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8029bc6:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 8029bc8:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
 8029bca:	429a      	cmp	r2, r3
 8029bcc:	f43f ae25 	beq.w	802981a <lv_roller_event+0x12>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 8029bd0:	84f3      	strh	r3, [r6, #38]	; 0x26
                    refr_position(obj, LV_ANIM_ON);
 8029bd2:	2101      	movs	r1, #1
 8029bd4:	4630      	mov	r0, r6
 8029bd6:	f7ff fbbf 	bl	8029358 <refr_position>
 8029bda:	e61e      	b.n	802981a <lv_roller_event+0x12>
                roller->sel_opt_id_ori = roller->sel_opt_id;
 8029bdc:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8029bde:	8533      	strh	r3, [r6, #40]	; 0x28
 8029be0:	e61b      	b.n	802981a <lv_roller_event+0x12>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 8029be2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8029be4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8029be6:	429a      	cmp	r2, r3
 8029be8:	f43f ae17 	beq.w	802981a <lv_roller_event+0x12>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 8029bec:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, LV_ANIM_ON);
 8029bee:	2101      	movs	r1, #1
 8029bf0:	f7ff fbb2 	bl	8029358 <refr_position>
 8029bf4:	e611      	b.n	802981a <lv_roller_event+0x12>
        char c = *((char *)lv_event_get_param(e));
 8029bf6:	4628      	mov	r0, r5
 8029bf8:	f7da f8ac 	bl	8003d54 <lv_event_get_param>
 8029bfc:	7802      	ldrb	r2, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8029bfe:	f1a2 0312 	sub.w	r3, r2, #18
 8029c02:	b2db      	uxtb	r3, r3
 8029c04:	2b01      	cmp	r3, #1
 8029c06:	d911      	bls.n	8029c2c <lv_roller_event+0x424>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8029c08:	2a14      	cmp	r2, #20
 8029c0a:	d002      	beq.n	8029c12 <lv_roller_event+0x40a>
 8029c0c:	2a11      	cmp	r2, #17
 8029c0e:	f47f ae04 	bne.w	802981a <lv_roller_event+0x12>
            if(roller->sel_opt_id > 0) {
 8029c12:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8029c14:	2b00      	cmp	r3, #0
 8029c16:	f43f ae00 	beq.w	802981a <lv_roller_event+0x12>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8029c1a:	8d34      	ldrh	r4, [r6, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 8029c1c:	3b01      	subs	r3, #1
 8029c1e:	2201      	movs	r2, #1
 8029c20:	b299      	uxth	r1, r3
 8029c22:	4630      	mov	r0, r6
 8029c24:	f7ff fdb4 	bl	8029790 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8029c28:	8534      	strh	r4, [r6, #40]	; 0x28
 8029c2a:	e5f6      	b.n	802981a <lv_roller_event+0x12>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 8029c2c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8029c2e:	1c59      	adds	r1, r3, #1
 8029c30:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 8029c32:	4291      	cmp	r1, r2
 8029c34:	f6bf adf1 	bge.w	802981a <lv_roller_event+0x12>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 8029c38:	8d34      	ldrh	r4, [r6, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id + 1, LV_ANIM_ON);
 8029c3a:	2201      	movs	r2, #1
 8029c3c:	b289      	uxth	r1, r1
 8029c3e:	4630      	mov	r0, r6
 8029c40:	f7ff fda6 	bl	8029790 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 8029c44:	8534      	strh	r4, [r6, #40]	; 0x28
 8029c46:	e5e8      	b.n	802981a <lv_roller_event+0x12>
        lv_obj_t * label = get_label(obj);
 8029c48:	f7ff fb06 	bl	8029258 <get_label>
        lv_obj_refresh_ext_draw_size(label);
 8029c4c:	f7dd fd50 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
 8029c50:	e5e3      	b.n	802981a <lv_roller_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8029c52:	4628      	mov	r0, r5
 8029c54:	f7da f8ea 	bl	8003e2c <lv_event_get_draw_ctx>
 8029c58:	4605      	mov	r5, r0
        get_sel_area(obj, &sel_area);
 8029c5a:	a90a      	add	r1, sp, #40	; 0x28
 8029c5c:	4620      	mov	r0, r4
 8029c5e:	f7ff fc1b 	bl	8029498 <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 8029c62:	a80c      	add	r0, sp, #48	; 0x30
 8029c64:	f7e5 fa80 	bl	800f168 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 8029c68:	aa0c      	add	r2, sp, #48	; 0x30
 8029c6a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029c6e:	4620      	mov	r0, r4
 8029c70:	f7dd f9f4 	bl	800705c <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 8029c74:	aa0a      	add	r2, sp, #40	; 0x28
 8029c76:	a90c      	add	r1, sp, #48	; 0x30
 8029c78:	4628      	mov	r0, r5
 8029c7a:	f7e5 fad1 	bl	800f220 <lv_draw_rect>
 8029c7e:	e5cc      	b.n	802981a <lv_roller_event+0x12>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8029c80:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8029c82:	8533      	strh	r3, [r6, #40]	; 0x28
            lv_group_t * g      = lv_obj_get_group(obj);
 8029c84:	4630      	mov	r0, r6
 8029c86:	f7dc feb8 	bl	80069fa <lv_obj_get_group>
 8029c8a:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 8029c8c:	f7da fafc 	bl	8004288 <lv_group_get_editing>
 8029c90:	2800      	cmp	r0, #0
 8029c92:	f43f af00 	beq.w	8029a96 <lv_roller_event+0x28e>
                lv_group_set_editing(g, false);
 8029c96:	2100      	movs	r1, #0
 8029c98:	4628      	mov	r0, r5
 8029c9a:	f7da fa88 	bl	80041ae <lv_group_set_editing>
 8029c9e:	e6fa      	b.n	8029a96 <lv_roller_event+0x28e>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 8029ca0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8029ca2:	8533      	strh	r3, [r6, #40]	; 0x28
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8029ca4:	e6f7      	b.n	8029a96 <lv_roller_event+0x28e>
 8029ca6:	bf00      	nop

08029ca8 <position_knob>:
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}

static void position_knob(lv_obj_t * obj, lv_area_t * knob_area, const lv_coord_t knob_size, const bool hor)
{
 8029ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029cac:	4682      	mov	sl, r0
 8029cae:	460c      	mov	r4, r1
    if(hor) {
 8029cb0:	2b00      	cmp	r3, #0
 8029cb2:	d04c      	beq.n	8029d4e <position_knob+0xa6>
        knob_area->x1 -= (knob_size >> 1);
 8029cb4:	880b      	ldrh	r3, [r1, #0]
 8029cb6:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8029cba:	b29b      	uxth	r3, r3
 8029cbc:	800b      	strh	r3, [r1, #0]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 8029cbe:	3a01      	subs	r2, #1
 8029cc0:	441a      	add	r2, r3
 8029cc2:	808a      	strh	r2, [r1, #4]
        knob_area->y1 = obj->coords.y1;
 8029cc4:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8029cc8:	804b      	strh	r3, [r1, #2]
        knob_area->y2 = obj->coords.y2;
 8029cca:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8029cce:	80cb      	strh	r3, [r1, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8029cd0:	2212      	movs	r2, #18
 8029cd2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8029cd6:	4650      	mov	r0, sl
 8029cd8:	f7e0 fd86 	bl	800a7e8 <lv_obj_get_style_prop>
 8029cdc:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8029cde:	2213      	movs	r2, #19
 8029ce0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8029ce4:	4650      	mov	r0, sl
 8029ce6:	f7e0 fd7f 	bl	800a7e8 <lv_obj_get_style_prop>
 8029cea:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8029cec:	2210      	movs	r2, #16
 8029cee:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8029cf2:	4650      	mov	r0, sl
 8029cf4:	f7e0 fd78 	bl	800a7e8 <lv_obj_get_style_prop>
 8029cf8:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8029cfa:	2211      	movs	r2, #17
 8029cfc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8029d00:	4650      	mov	r0, sl
 8029d02:	f7e0 fd71 	bl	800a7e8 <lv_obj_get_style_prop>
 8029d06:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8029d08:	2268      	movs	r2, #104	; 0x68
 8029d0a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8029d0e:	4650      	mov	r0, sl
 8029d10:	f7e0 fd6a 	bl	800a7e8 <lv_obj_get_style_prop>
 8029d14:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8029d16:	2269      	movs	r2, #105	; 0x69
 8029d18:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8029d1c:	4650      	mov	r0, sl
 8029d1e:	f7e0 fd63 	bl	800a7e8 <lv_obj_get_style_prop>

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_KNOB);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left + transf_w;
 8029d22:	b2ab      	uxth	r3, r5
 8029d24:	4498      	add	r8, r3
 8029d26:	8822      	ldrh	r2, [r4, #0]
 8029d28:	eba2 0808 	sub.w	r8, r2, r8
 8029d2c:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->x2 += knob_right + transf_w;
 8029d30:	444b      	add	r3, r9
 8029d32:	88a2      	ldrh	r2, [r4, #4]
 8029d34:	4413      	add	r3, r2
 8029d36:	80a3      	strh	r3, [r4, #4]
    knob_area->y1 -= knob_top + transf_h;
 8029d38:	b280      	uxth	r0, r0
 8029d3a:	4406      	add	r6, r0
 8029d3c:	8863      	ldrh	r3, [r4, #2]
 8029d3e:	1b9e      	subs	r6, r3, r6
 8029d40:	8066      	strh	r6, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 8029d42:	4438      	add	r0, r7
 8029d44:	88e7      	ldrh	r7, [r4, #6]
 8029d46:	4438      	add	r0, r7
 8029d48:	80e0      	strh	r0, [r4, #6]
}
 8029d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 8029d4e:	884b      	ldrh	r3, [r1, #2]
 8029d50:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8029d54:	b29b      	uxth	r3, r3
 8029d56:	804b      	strh	r3, [r1, #2]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 8029d58:	3a01      	subs	r2, #1
 8029d5a:	441a      	add	r2, r3
 8029d5c:	80ca      	strh	r2, [r1, #6]
        knob_area->x1 = obj->coords.x1;
 8029d5e:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 8029d62:	800b      	strh	r3, [r1, #0]
        knob_area->x2 = obj->coords.x2;
 8029d64:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8029d68:	808b      	strh	r3, [r1, #4]
 8029d6a:	e7b1      	b.n	8029cd0 <position_knob+0x28>

08029d6c <lv_slider_constructor>:
{
 8029d6c:	b538      	push	{r3, r4, r5, lr}
 8029d6e:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 8029d70:	2500      	movs	r5, #0
 8029d72:	670d      	str	r5, [r1, #112]	; 0x70
    slider->dragging = 0U;
 8029d74:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
    slider->left_knob_focus = 0U;
 8029d78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8029d7c:	f365 0341 	bfi	r3, r5, #1, #1
 8029d80:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8029d84:	f44f 7140 	mov.w	r1, #768	; 0x300
 8029d88:	4620      	mov	r0, r4
 8029d8a:	f7dc fdcb 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8029d8e:	2110      	movs	r1, #16
 8029d90:	4620      	mov	r0, r4
 8029d92:	f7dc fdc7 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 8029d96:	4628      	mov	r0, r5
 8029d98:	f7f6 fb36 	bl	8020408 <lv_disp_get_dpi>
 8029d9c:	281d      	cmp	r0, #29
 8029d9e:	dc04      	bgt.n	8029daa <lv_slider_constructor+0x3e>
 8029da0:	2101      	movs	r1, #1
 8029da2:	4620      	mov	r0, r4
 8029da4:	f7de fb23 	bl	80083ee <lv_obj_set_ext_click_area>
}
 8029da8:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 8029daa:	4628      	mov	r0, r5
 8029dac:	f7f6 fb2c 	bl	8020408 <lv_disp_get_dpi>
 8029db0:	300a      	adds	r0, #10
 8029db2:	4b04      	ldr	r3, [pc, #16]	; (8029dc4 <lv_slider_constructor+0x58>)
 8029db4:	fb83 2300 	smull	r2, r3, r3, r0
 8029db8:	17c1      	asrs	r1, r0, #31
 8029dba:	ebc1 01e3 	rsb	r1, r1, r3, asr #3
 8029dbe:	b209      	sxth	r1, r1
 8029dc0:	e7ef      	b.n	8029da2 <lv_slider_constructor+0x36>
 8029dc2:	bf00      	nop
 8029dc4:	66666667 	.word	0x66666667

08029dc8 <lv_slider_event>:
{
 8029dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029dcc:	b0b5      	sub	sp, #212	; 0xd4
 8029dce:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8029dd0:	48a4      	ldr	r0, [pc, #656]	; (802a064 <lv_slider_event+0x29c>)
 8029dd2:	f7d9 fe98 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8029dd6:	2801      	cmp	r0, #1
 8029dd8:	d002      	beq.n	8029de0 <lv_slider_event+0x18>
}
 8029dda:	b035      	add	sp, #212	; 0xd4
 8029ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8029de0:	4620      	mov	r0, r4
 8029de2:	f7d9 ffb3 	bl	8003d4c <lv_event_get_code>
 8029de6:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8029de8:	4620      	mov	r0, r4
 8029dea:	f7d9 ffab 	bl	8003d44 <lv_event_get_target>
 8029dee:	4605      	mov	r5, r0
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 8029df0:	f7fb fb33 	bl	802545a <lv_bar_get_mode>
 8029df4:	4607      	mov	r7, r0
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 8029df6:	2801      	cmp	r0, #1
 8029df8:	d003      	beq.n	8029e02 <lv_slider_event+0x3a>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
    else return LV_SLIDER_MODE_NORMAL;
 8029dfa:	2802      	cmp	r0, #2
 8029dfc:	bf0c      	ite	eq
 8029dfe:	4607      	moveq	r7, r0
 8029e00:	2700      	movne	r7, #0
    if(code == LV_EVENT_HIT_TEST) {
 8029e02:	2e11      	cmp	r6, #17
 8029e04:	d032      	beq.n	8029e6c <lv_slider_event+0xa4>
    else if(code == LV_EVENT_PRESSED) {
 8029e06:	2e01      	cmp	r6, #1
 8029e08:	d076      	beq.n	8029ef8 <lv_slider_event+0x130>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 8029e0a:	2e02      	cmp	r6, #2
 8029e0c:	f000 812c 	beq.w	802a068 <lv_slider_event+0x2a0>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8029e10:	2e08      	cmp	r6, #8
 8029e12:	f000 81ca 	beq.w	802a1aa <lv_slider_event+0x3e2>
 8029e16:	2e03      	cmp	r6, #3
 8029e18:	f000 81c7 	beq.w	802a1aa <lv_slider_event+0x3e2>
    else if(code == LV_EVENT_FOCUSED) {
 8029e1c:	2e0e      	cmp	r6, #14
 8029e1e:	f000 81fd 	beq.w	802a21c <lv_slider_event+0x454>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8029e22:	2e29      	cmp	r6, #41	; 0x29
 8029e24:	f000 820a 	beq.w	802a23c <lv_slider_event+0x474>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8029e28:	2e13      	cmp	r6, #19
 8029e2a:	f000 820b 	beq.w	802a244 <lv_slider_event+0x47c>
    else if(code == LV_EVENT_KEY) {
 8029e2e:	2e0d      	cmp	r6, #13
 8029e30:	f040 82a6 	bne.w	802a380 <lv_slider_event+0x5b8>
        char c = *((char *)lv_event_get_param(e));
 8029e34:	4620      	mov	r0, r4
 8029e36:	f7d9 ff8d 	bl	8003d54 <lv_event_get_param>
 8029e3a:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8029e3c:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8029e40:	2a11      	cmp	r2, #17
 8029e42:	f000 8278 	beq.w	802a336 <lv_slider_event+0x56e>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8029e46:	2b14      	cmp	r3, #20
 8029e48:	d001      	beq.n	8029e4e <lv_slider_event+0x86>
 8029e4a:	2b12      	cmp	r3, #18
 8029e4c:	d1c5      	bne.n	8029dda <lv_slider_event+0x12>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 8029e4e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8029e52:	f013 0f02 	tst.w	r3, #2
 8029e56:	f040 828a 	bne.w	802a36e <lv_slider_event+0x5a6>
    return lv_bar_get_value(obj);
 8029e5a:	4628      	mov	r0, r5
 8029e5c:	f7fb fae7 	bl	802542e <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 8029e60:	2201      	movs	r2, #1
 8029e62:	1e41      	subs	r1, r0, #1
 8029e64:	4628      	mov	r0, r5
 8029e66:	f7fb fa79 	bl	802535c <lv_bar_set_value>
}
 8029e6a:	e271      	b.n	802a350 <lv_slider_event+0x588>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8029e6c:	4620      	mov	r0, r4
 8029e6e:	f7d9 ff71 	bl	8003d54 <lv_event_get_param>
 8029e72:	4604      	mov	r4, r0
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 8029e74:	68ab      	ldr	r3, [r5, #8]
 8029e76:	2b00      	cmp	r3, #0
 8029e78:	d03c      	beq.n	8029ef4 <lv_slider_event+0x12c>
 8029e7a:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
    dest->x1 = src->x1;
 8029e7e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8029e82:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    dest->y1 = src->y1;
 8029e86:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 8029e8a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    dest->x2 = src->x2;
 8029e8e:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
 8029e92:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    dest->y2 = src->y2;
 8029e96:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
 8029e9a:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        lv_area_increase(&a, ext_click_area, ext_click_area);
 8029e9e:	4632      	mov	r2, r6
 8029ea0:	4631      	mov	r1, r6
 8029ea2:	a822      	add	r0, sp, #136	; 0x88
 8029ea4:	f7f6 fdad 	bl	8020a02 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, 0);
 8029ea8:	2200      	movs	r2, #0
 8029eaa:	6821      	ldr	r1, [r4, #0]
 8029eac:	a822      	add	r0, sp, #136	; 0x88
 8029eae:	f7f6 fe13 	bl	8020ad8 <_lv_area_is_point_on>
 8029eb2:	7120      	strb	r0, [r4, #4]
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 8029eb4:	2800      	cmp	r0, #0
 8029eb6:	d190      	bne.n	8029dda <lv_slider_event+0x12>
 8029eb8:	2f02      	cmp	r7, #2
 8029eba:	d18e      	bne.n	8029dda <lv_slider_event+0x12>
    dest->x1 = src->x1;
 8029ebc:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8029ec0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    dest->y1 = src->y1;
 8029ec4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8029ec8:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    dest->x2 = src->x2;
 8029ecc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8029ed0:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    dest->y2 = src->y2;
 8029ed4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8029ed8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_area_increase(&a, ext_click_area, ext_click_area);
 8029edc:	4632      	mov	r2, r6
 8029ede:	4631      	mov	r1, r6
 8029ee0:	a822      	add	r0, sp, #136	; 0x88
 8029ee2:	f7f6 fd8e 	bl	8020a02 <lv_area_increase>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8029ee6:	2200      	movs	r2, #0
 8029ee8:	6821      	ldr	r1, [r4, #0]
 8029eea:	a822      	add	r0, sp, #136	; 0x88
 8029eec:	f7f6 fdf4 	bl	8020ad8 <_lv_area_is_point_on>
 8029ef0:	7120      	strb	r0, [r4, #4]
 8029ef2:	e772      	b.n	8029dda <lv_slider_event+0x12>
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 8029ef4:	2600      	movs	r6, #0
 8029ef6:	e7c2      	b.n	8029e7e <lv_slider_event+0xb6>
        lv_obj_invalidate(obj);
 8029ef8:	4628      	mov	r0, r5
 8029efa:	f7de f83d 	bl	8007f78 <lv_obj_invalidate>
        slider->dragging = true;
 8029efe:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8029f02:	f043 0301 	orr.w	r3, r3, #1
 8029f06:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 8029f0a:	2f01      	cmp	r7, #1
 8029f0c:	d94a      	bls.n	8029fa4 <lv_slider_event+0x1dc>
            lv_indev_get_point(lv_indev_get_act(), &p);
 8029f0e:	f7da fa9d 	bl	800444c <lv_indev_get_act>
 8029f12:	a922      	add	r1, sp, #136	; 0x88
 8029f14:	f7da fb17 	bl	8004546 <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 8029f18:	4628      	mov	r0, r5
 8029f1a:	f7dd fde6 	bl	8007aea <lv_obj_get_width>
 8029f1e:	4606      	mov	r6, r0
 8029f20:	4628      	mov	r0, r5
 8029f22:	f7dd fde8 	bl	8007af6 <lv_obj_get_height>
 8029f26:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8029f28:	2216      	movs	r2, #22
 8029f2a:	2100      	movs	r1, #0
 8029f2c:	4628      	mov	r0, r5
 8029f2e:	f7e0 fc5b 	bl	800a7e8 <lv_obj_get_style_prop>
            if(hor) {
 8029f32:	42a6      	cmp	r6, r4
 8029f34:	db56      	blt.n	8029fe4 <lv_slider_event+0x21c>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 8029f36:	b2c0      	uxtb	r0, r0
 8029f38:	2801      	cmp	r0, #1
 8029f3a:	d037      	beq.n	8029fac <lv_slider_event+0x1e4>
 8029f3c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 8029f40:	f9b5 206c 	ldrsh.w	r2, [r5, #108]	; 0x6c
 8029f44:	429a      	cmp	r2, r3
 8029f46:	db37      	blt.n	8029fb8 <lv_slider_event+0x1f0>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 8029f48:	f9b5 2060 	ldrsh.w	r2, [r5, #96]	; 0x60
 8029f4c:	429a      	cmp	r2, r3
 8029f4e:	dc3b      	bgt.n	8029fc8 <lv_slider_event+0x200>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8029f50:	f9b5 2060 	ldrsh.w	r2, [r5, #96]	; 0x60
 8029f54:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8029f58:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 8029f5c:	f9b5 1064 	ldrsh.w	r1, [r5, #100]	; 0x64
 8029f60:	1a89      	subs	r1, r1, r2
 8029f62:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8029f66:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8029f6a:	1a12      	subs	r2, r2, r0
 8029f6c:	2a00      	cmp	r2, #0
 8029f6e:	bfb8      	it	lt
 8029f70:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 8029f72:	f9b5 106c 	ldrsh.w	r1, [r5, #108]	; 0x6c
 8029f76:	1ac9      	subs	r1, r1, r3
 8029f78:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8029f7c:	eb03 0361 	add.w	r3, r3, r1, asr #1
 8029f80:	1a1b      	subs	r3, r3, r0
 8029f82:	2b00      	cmp	r3, #0
 8029f84:	bfb8      	it	lt
 8029f86:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 8029f88:	b212      	sxth	r2, r2
 8029f8a:	b21b      	sxth	r3, r3
 8029f8c:	429a      	cmp	r2, r3
 8029f8e:	dd1f      	ble.n	8029fd0 <lv_slider_event+0x208>
                        slider->value_to_set = &slider->bar.cur_value;
 8029f90:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8029f94:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 0;
 8029f96:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8029f9a:	f36f 0341 	bfc	r3, #1, #1
 8029f9e:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 8029fa2:	e71a      	b.n	8029dda <lv_slider_event+0x12>
            slider->value_to_set = &slider->bar.cur_value;
 8029fa4:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8029fa8:	672b      	str	r3, [r5, #112]	; 0x70
 8029faa:	e716      	b.n	8029dda <lv_slider_event+0x12>
                                                                                         p.x < slider->right_knob_area.x1)) {
 8029fac:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 8029fb0:	f9b5 2068 	ldrsh.w	r2, [r5, #104]	; 0x68
 8029fb4:	429a      	cmp	r2, r3
 8029fb6:	dd03      	ble.n	8029fc0 <lv_slider_event+0x1f8>
                    slider->value_to_set = &slider->bar.cur_value;
 8029fb8:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8029fbc:	672b      	str	r3, [r5, #112]	; 0x70
 8029fbe:	e70c      	b.n	8029dda <lv_slider_event+0x12>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 8029fc0:	f9b5 2064 	ldrsh.w	r2, [r5, #100]	; 0x64
 8029fc4:	429a      	cmp	r2, r3
 8029fc6:	dac3      	bge.n	8029f50 <lv_slider_event+0x188>
                    slider->value_to_set = &slider->bar.start_value;
 8029fc8:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8029fcc:	672b      	str	r3, [r5, #112]	; 0x70
 8029fce:	e704      	b.n	8029dda <lv_slider_event+0x12>
                        slider->value_to_set = &slider->bar.start_value;
 8029fd0:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8029fd4:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 1;
 8029fd6:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8029fda:	f043 0302 	orr.w	r3, r3, #2
 8029fde:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 8029fe2:	e6fa      	b.n	8029dda <lv_slider_event+0x12>
                if(p.y < slider->right_knob_area.y1) {
 8029fe4:	f9bd 108a 	ldrsh.w	r1, [sp, #138]	; 0x8a
 8029fe8:	f9b5 306a 	ldrsh.w	r3, [r5, #106]	; 0x6a
 8029fec:	4299      	cmp	r1, r3
 8029fee:	da03      	bge.n	8029ff8 <lv_slider_event+0x230>
                    slider->value_to_set = &slider->bar.cur_value;
 8029ff0:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8029ff4:	672b      	str	r3, [r5, #112]	; 0x70
 8029ff6:	e6f0      	b.n	8029dda <lv_slider_event+0x12>
                else if(p.y > slider->left_knob_area.y2) {
 8029ff8:	f9b5 0066 	ldrsh.w	r0, [r5, #102]	; 0x66
 8029ffc:	4281      	cmp	r1, r0
 8029ffe:	dd03      	ble.n	802a008 <lv_slider_event+0x240>
                    slider->value_to_set = &slider->bar.start_value;
 802a000:	f105 0330 	add.w	r3, r5, #48	; 0x30
 802a004:	672b      	str	r3, [r5, #112]	; 0x70
 802a006:	e6e8      	b.n	8029dda <lv_slider_event+0x12>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 802a008:	f9b5 2062 	ldrsh.w	r2, [r5, #98]	; 0x62
 802a00c:	1a80      	subs	r0, r0, r2
 802a00e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802a012:	eb02 0260 	add.w	r2, r2, r0, asr #1
 802a016:	1a52      	subs	r2, r2, r1
 802a018:	2a00      	cmp	r2, #0
 802a01a:	bfb8      	it	lt
 802a01c:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 802a01e:	f9b5 006e 	ldrsh.w	r0, [r5, #110]	; 0x6e
 802a022:	1ac0      	subs	r0, r0, r3
 802a024:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802a028:	eb03 0360 	add.w	r3, r3, r0, asr #1
 802a02c:	1a5b      	subs	r3, r3, r1
 802a02e:	2b00      	cmp	r3, #0
 802a030:	bfb8      	it	lt
 802a032:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 802a034:	b212      	sxth	r2, r2
 802a036:	b21b      	sxth	r3, r3
 802a038:	429a      	cmp	r2, r3
 802a03a:	dd09      	ble.n	802a050 <lv_slider_event+0x288>
                        slider->value_to_set = &slider->bar.cur_value;
 802a03c:	f105 0324 	add.w	r3, r5, #36	; 0x24
 802a040:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 0;
 802a042:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a046:	f36f 0341 	bfc	r3, #1, #1
 802a04a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a04e:	e6c4      	b.n	8029dda <lv_slider_event+0x12>
                        slider->value_to_set = &slider->bar.start_value;
 802a050:	f105 0330 	add.w	r3, r5, #48	; 0x30
 802a054:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 1;
 802a056:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a05a:	f043 0302 	orr.w	r3, r3, #2
 802a05e:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a062:	e6ba      	b.n	8029dda <lv_slider_event+0x12>
 802a064:	080330b4 	.word	0x080330b4
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 802a068:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802a06a:	2b00      	cmp	r3, #0
 802a06c:	f43f aeb5 	beq.w	8029dda <lv_slider_event+0x12>
        lv_indev_t * indev = lv_indev_get_act();
 802a070:	f7da f9ec 	bl	800444c <lv_indev_get_act>
 802a074:	4604      	mov	r4, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 802a076:	f7da f9ef 	bl	8004458 <lv_indev_get_type>
 802a07a:	2801      	cmp	r0, #1
 802a07c:	f47f aead 	bne.w	8029dda <lv_slider_event+0x12>
        lv_indev_get_point(indev, &p);
 802a080:	a922      	add	r1, sp, #136	; 0x88
 802a082:	4620      	mov	r0, r4
 802a084:	f7da fa5f 	bl	8004546 <lv_indev_get_point>
        const int32_t range = slider->bar.max_value - slider->bar.min_value;
 802a088:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 802a08a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a08c:	1acc      	subs	r4, r1, r3

static bool is_slider_horizontal(lv_obj_t * obj)
{
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 802a08e:	4628      	mov	r0, r5
 802a090:	f7dd fd2b 	bl	8007aea <lv_obj_get_width>
 802a094:	4606      	mov	r6, r0
 802a096:	4628      	mov	r0, r5
 802a098:	f7dd fd2d 	bl	8007af6 <lv_obj_get_height>
        if(is_slider_horizontal(obj)) {
 802a09c:	4286      	cmp	r6, r0
 802a09e:	db4f      	blt.n	802a140 <lv_slider_event+0x378>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a0a0:	2212      	movs	r2, #18
 802a0a2:	2100      	movs	r1, #0
 802a0a4:	4628      	mov	r0, r5
 802a0a6:	f7e0 fb9f 	bl	800a7e8 <lv_obj_get_style_prop>
 802a0aa:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a0ac:	2213      	movs	r2, #19
 802a0ae:	2100      	movs	r1, #0
 802a0b0:	4628      	mov	r0, r5
 802a0b2:	f7e0 fb99 	bl	800a7e8 <lv_obj_get_style_prop>
 802a0b6:	4680      	mov	r8, r0
            const lv_coord_t w = lv_obj_get_width(obj);
 802a0b8:	4628      	mov	r0, r5
 802a0ba:	f7dd fd16 	bl	8007aea <lv_obj_get_width>
            const lv_coord_t indic_w = w - bg_left - bg_right;
 802a0be:	eb07 0108 	add.w	r1, r7, r8
 802a0c2:	1a41      	subs	r1, r0, r1
 802a0c4:	b20e      	sxth	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802a0c6:	2216      	movs	r2, #22
 802a0c8:	2100      	movs	r1, #0
 802a0ca:	4628      	mov	r0, r5
 802a0cc:	f7e0 fb8c 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802a0d0:	b2c3      	uxtb	r3, r0
            if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 802a0d2:	2b01      	cmp	r3, #1
 802a0d4:	d02a      	beq.n	802a12c <lv_slider_event+0x364>
                new_value = p.x - (obj->coords.x1 + bg_left);
 802a0d6:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 802a0da:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 802a0de:	b23f      	sxth	r7, r7
 802a0e0:	4417      	add	r7, r2
 802a0e2:	1bdb      	subs	r3, r3, r7
            new_value = (new_value * range + indic_w / 2) / indic_w;
 802a0e4:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
 802a0e8:	1049      	asrs	r1, r1, #1
 802a0ea:	fb04 1103 	mla	r1, r4, r3, r1
 802a0ee:	fb91 f1f6 	sdiv	r1, r1, r6
            new_value += slider->bar.min_value;
 802a0f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a0f4:	4419      	add	r1, r3
        if(slider->value_to_set == &slider->bar.start_value) {
 802a0f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802a0f8:	f105 0230 	add.w	r2, r5, #48	; 0x30
 802a0fc:	4293      	cmp	r3, r2
 802a0fe:	d043      	beq.n	802a188 <lv_slider_event+0x3c0>
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 802a100:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 802a102:	4291      	cmp	r1, r2
 802a104:	bfa8      	it	ge
 802a106:	4611      	movge	r1, r2
 802a108:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802a10a:	4291      	cmp	r1, r2
 802a10c:	bfb8      	it	lt
 802a10e:	4611      	movlt	r1, r2
        if(*slider->value_to_set != new_value) {
 802a110:	681b      	ldr	r3, [r3, #0]
 802a112:	4299      	cmp	r1, r3
 802a114:	f43f ae61 	beq.w	8029dda <lv_slider_event+0x12>
                lv_bar_set_value(obj, new_value, LV_ANIM_ON);
 802a118:	2201      	movs	r2, #1
 802a11a:	4628      	mov	r0, r5
 802a11c:	f7fb f91e 	bl	802535c <lv_bar_set_value>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802a120:	2200      	movs	r2, #0
 802a122:	211c      	movs	r1, #28
 802a124:	4628      	mov	r0, r5
 802a126:	f7d9 fdeb 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 802a12a:	e656      	b.n	8029dda <lv_slider_event+0x12>
                new_value = (obj->coords.x2 - bg_right) - p.x;
 802a12c:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 802a130:	fa0f f888 	sxth.w	r8, r8
 802a134:	eba3 0308 	sub.w	r3, r3, r8
 802a138:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
 802a13c:	1a5b      	subs	r3, r3, r1
 802a13e:	e7d1      	b.n	802a0e4 <lv_slider_event+0x31c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a140:	2210      	movs	r2, #16
 802a142:	2100      	movs	r1, #0
 802a144:	4628      	mov	r0, r5
 802a146:	f7e0 fb4f 	bl	800a7e8 <lv_obj_get_style_prop>
 802a14a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a14c:	2211      	movs	r2, #17
 802a14e:	2100      	movs	r1, #0
 802a150:	4628      	mov	r0, r5
 802a152:	f7e0 fb49 	bl	800a7e8 <lv_obj_get_style_prop>
 802a156:	4606      	mov	r6, r0
            const lv_coord_t h = lv_obj_get_height(obj);
 802a158:	4628      	mov	r0, r5
 802a15a:	f7dd fccc 	bl	8007af6 <lv_obj_get_height>
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 802a15e:	19f3      	adds	r3, r6, r7
 802a160:	1ac3      	subs	r3, r0, r3
 802a162:	b218      	sxth	r0, r3
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 802a164:	f9b5 201a 	ldrsh.w	r2, [r5, #26]
 802a168:	b236      	sxth	r6, r6
 802a16a:	4432      	add	r2, r6
 802a16c:	f9bd 108a 	ldrsh.w	r1, [sp, #138]	; 0x8a
            new_value = (-new_value * range + indic_h / 2) / indic_h;
 802a170:	1a52      	subs	r2, r2, r1
 802a172:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 802a176:	4401      	add	r1, r0
 802a178:	1049      	asrs	r1, r1, #1
 802a17a:	fb04 1102 	mla	r1, r4, r2, r1
 802a17e:	fb91 f1f0 	sdiv	r1, r1, r0
            new_value += slider->bar.min_value;
 802a182:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a184:	4419      	add	r1, r3
 802a186:	e7b6      	b.n	802a0f6 <lv_slider_event+0x32e>
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 802a188:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 802a18a:	4291      	cmp	r1, r2
 802a18c:	bfa8      	it	ge
 802a18e:	4611      	movge	r1, r2
 802a190:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802a192:	4291      	cmp	r1, r2
 802a194:	bfb8      	it	lt
 802a196:	4611      	movlt	r1, r2
        if(*slider->value_to_set != new_value) {
 802a198:	681b      	ldr	r3, [r3, #0]
 802a19a:	4299      	cmp	r1, r3
 802a19c:	f43f ae1d 	beq.w	8029dda <lv_slider_event+0x12>
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 802a1a0:	2201      	movs	r2, #1
 802a1a2:	4628      	mov	r0, r5
 802a1a4:	f7fb f921 	bl	80253ea <lv_bar_set_start_value>
 802a1a8:	e7ba      	b.n	802a120 <lv_slider_event+0x358>
        slider->dragging = false;
 802a1aa:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a1ae:	f36f 0300 	bfc	r3, #0, #1
 802a1b2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        slider->value_to_set = NULL;
 802a1b6:	2300      	movs	r3, #0
 802a1b8:	672b      	str	r3, [r5, #112]	; 0x70
        lv_obj_invalidate(obj);
 802a1ba:	4628      	mov	r0, r5
 802a1bc:	f7dd fedc 	bl	8007f78 <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 802a1c0:	4628      	mov	r0, r5
 802a1c2:	f7dc fc1a 	bl	80069fa <lv_obj_get_group>
 802a1c6:	4606      	mov	r6, r0
        bool editing     = lv_group_get_editing(g);
 802a1c8:	f7da f85e 	bl	8004288 <lv_group_get_editing>
 802a1cc:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802a1ce:	f7da f93d 	bl	800444c <lv_indev_get_act>
 802a1d2:	f7da f941 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 802a1d6:	2804      	cmp	r0, #4
 802a1d8:	f47f adff 	bne.w	8029dda <lv_slider_event+0x12>
            if(editing) {
 802a1dc:	2c00      	cmp	r4, #0
 802a1de:	f43f adfc 	beq.w	8029dda <lv_slider_event+0x12>
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 802a1e2:	4628      	mov	r0, r5
 802a1e4:	f7fb f939 	bl	802545a <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 802a1e8:	2802      	cmp	r0, #2
 802a1ea:	f040 8158 	bne.w	802a49e <lv_slider_event+0x6d6>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 802a1ee:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a1f2:	f013 0f02 	tst.w	r3, #2
 802a1f6:	d106      	bne.n	802a206 <lv_slider_event+0x43e>
 802a1f8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a1fc:	f043 0302 	orr.w	r3, r3, #2
 802a200:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a204:	e5e9      	b.n	8029dda <lv_slider_event+0x12>
                        slider->left_knob_focus = 0;
 802a206:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a20a:	f36f 0341 	bfc	r3, #1, #1
 802a20e:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
                        lv_group_set_editing(g, false);
 802a212:	2100      	movs	r1, #0
 802a214:	4630      	mov	r0, r6
 802a216:	f7d9 ffca 	bl	80041ae <lv_group_set_editing>
 802a21a:	e5de      	b.n	8029dda <lv_slider_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802a21c:	f7da f916 	bl	800444c <lv_indev_get_act>
 802a220:	f7da f91a 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 802a224:	2804      	cmp	r0, #4
 802a226:	d002      	beq.n	802a22e <lv_slider_event+0x466>
 802a228:	2802      	cmp	r0, #2
 802a22a:	f47f add6 	bne.w	8029dda <lv_slider_event+0x12>
            slider->left_knob_focus = 0;
 802a22e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a232:	f36f 0341 	bfc	r3, #1, #1
 802a236:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a23a:	e5ce      	b.n	8029dda <lv_slider_event+0x12>
        lv_obj_refresh_ext_draw_size(obj);
 802a23c:	4628      	mov	r0, r5
 802a23e:	f7dd fa57 	bl	80076f0 <lv_obj_refresh_ext_draw_size>
 802a242:	e5ca      	b.n	8029dda <lv_slider_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a244:	2212      	movs	r2, #18
 802a246:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a24a:	4628      	mov	r0, r5
 802a24c:	f7e0 facc 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a250:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a254:	2213      	movs	r2, #19
 802a256:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a25a:	4628      	mov	r0, r5
 802a25c:	f7e0 fac4 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a260:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a262:	2210      	movs	r2, #16
 802a264:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a268:	4628      	mov	r0, r5
 802a26a:	f7e0 fabd 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a26e:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a272:	2211      	movs	r2, #17
 802a274:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a278:	4628      	mov	r0, r5
 802a27a:	f7e0 fab5 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a27e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 802a282:	226c      	movs	r2, #108	; 0x6c
 802a284:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a288:	4628      	mov	r0, r5
 802a28a:	f7e0 faad 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a28e:	b203      	sxth	r3, r0
 802a290:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 802a292:	2268      	movs	r2, #104	; 0x68
 802a294:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a298:	4628      	mov	r0, r5
 802a29a:	f7e0 faa5 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a29e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 802a2a2:	2269      	movs	r2, #105	; 0x69
 802a2a4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a2a8:	4628      	mov	r0, r5
 802a2aa:	f7e0 fa9d 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a2ae:	b207      	sxth	r7, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 802a2b0:	4628      	mov	r0, r5
 802a2b2:	f7dd fc1a 	bl	8007aea <lv_obj_get_width>
 802a2b6:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802a2ba:	9302      	str	r3, [sp, #8]
 802a2bc:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 802a2c0:	4628      	mov	r0, r5
 802a2c2:	f7dd fc18 	bl	8007af6 <lv_obj_get_height>
 802a2c6:	007b      	lsls	r3, r7, #1
 802a2c8:	9303      	str	r3, [sp, #12]
 802a2ca:	eb00 0747 	add.w	r7, r0, r7, lsl #1
 802a2ce:	45b8      	cmp	r8, r7
 802a2d0:	da29      	bge.n	802a326 <lv_slider_event+0x55e>
 802a2d2:	4628      	mov	r0, r5
 802a2d4:	f7dd fc09 	bl	8007aea <lv_obj_get_width>
 802a2d8:	9f02      	ldr	r7, [sp, #8]
 802a2da:	4407      	add	r7, r0
 802a2dc:	f347 074f 	sbfx	r7, r7, #1, #16
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a2e0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a2e4:	4628      	mov	r0, r5
 802a2e6:	f7dd f98a 	bl	80075fe <lv_obj_calculate_ext_draw_size>
 802a2ea:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 802a2ec:	4620      	mov	r0, r4
 802a2ee:	f7d9 fd31 	bl	8003d54 <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 802a2f2:	4633      	mov	r3, r6
 802a2f4:	455e      	cmp	r6, fp
 802a2f6:	bfb8      	it	lt
 802a2f8:	465b      	movlt	r3, fp
 802a2fa:	4553      	cmp	r3, sl
 802a2fc:	bfb8      	it	lt
 802a2fe:	4653      	movlt	r3, sl
 802a300:	4599      	cmp	r9, r3
 802a302:	bfb8      	it	lt
 802a304:	4699      	movlt	r9, r3
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a306:	f109 0302 	add.w	r3, r9, #2
 802a30a:	442b      	add	r3, r5
        knob_size = (knob_size * zoom) >> 8;
 802a30c:	9a01      	ldr	r2, [sp, #4]
 802a30e:	fb02 f707 	mul.w	r7, r2, r7
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a312:	eb03 2327 	add.w	r3, r3, r7, asr #8
        *s  = LV_MAX(*s, knob_size);
 802a316:	b21b      	sxth	r3, r3
 802a318:	f9b0 2000 	ldrsh.w	r2, [r0]
 802a31c:	4293      	cmp	r3, r2
 802a31e:	bfb8      	it	lt
 802a320:	4613      	movlt	r3, r2
 802a322:	8003      	strh	r3, [r0, #0]
 802a324:	e559      	b.n	8029dda <lv_slider_event+0x12>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 802a326:	4628      	mov	r0, r5
 802a328:	f7dd fbe5 	bl	8007af6 <lv_obj_get_height>
 802a32c:	9f03      	ldr	r7, [sp, #12]
 802a32e:	4407      	add	r7, r0
 802a330:	f347 074f 	sbfx	r7, r7, #1, #16
 802a334:	e7d4      	b.n	802a2e0 <lv_slider_event+0x518>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 802a336:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a33a:	f013 0f02 	tst.w	r3, #2
 802a33e:	d10d      	bne.n	802a35c <lv_slider_event+0x594>
    return lv_bar_get_value(obj);
 802a340:	4628      	mov	r0, r5
 802a342:	f7fb f874 	bl	802542e <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 802a346:	2201      	movs	r2, #1
 802a348:	1881      	adds	r1, r0, r2
 802a34a:	4628      	mov	r0, r5
 802a34c:	f7fb f806 	bl	802535c <lv_bar_set_value>
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802a350:	2200      	movs	r2, #0
 802a352:	211c      	movs	r1, #28
 802a354:	4628      	mov	r0, r5
 802a356:	f7d9 fcd3 	bl	8003d00 <lv_event_send>
        if(res != LV_RES_OK) return;
 802a35a:	e53e      	b.n	8029dda <lv_slider_event+0x12>
    return lv_bar_get_start_value(obj);
 802a35c:	4628      	mov	r0, r5
 802a35e:	f7fb f86d 	bl	802543c <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 802a362:	2201      	movs	r2, #1
 802a364:	1881      	adds	r1, r0, r2
 802a366:	4628      	mov	r0, r5
 802a368:	f7fb f83f 	bl	80253ea <lv_bar_set_start_value>
}
 802a36c:	e7f0      	b.n	802a350 <lv_slider_event+0x588>
    return lv_bar_get_start_value(obj);
 802a36e:	4628      	mov	r0, r5
 802a370:	f7fb f864 	bl	802543c <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 802a374:	2201      	movs	r2, #1
 802a376:	1e41      	subs	r1, r0, #1
 802a378:	4628      	mov	r0, r5
 802a37a:	f7fb f836 	bl	80253ea <lv_bar_set_start_value>
}
 802a37e:	e7e7      	b.n	802a350 <lv_slider_event+0x588>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802a380:	2e15      	cmp	r6, #21
 802a382:	f47f ad2a 	bne.w	8029dda <lv_slider_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802a386:	4620      	mov	r0, r4
 802a388:	f7d9 fcdc 	bl	8003d44 <lv_event_get_target>
 802a38c:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802a38e:	4620      	mov	r0, r4
 802a390:	f7d9 fd4c 	bl	8003e2c <lv_event_get_draw_ctx>
 802a394:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802a396:	2216      	movs	r2, #22
 802a398:	2100      	movs	r1, #0
 802a39a:	4628      	mov	r0, r5
 802a39c:	f7e0 fa24 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802a3a0:	fa5f f980 	uxtb.w	r9, r0
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 802a3a4:	4628      	mov	r0, r5
 802a3a6:	f7dd fba0 	bl	8007aea <lv_obj_get_width>
 802a3aa:	4604      	mov	r4, r0
 802a3ac:	4628      	mov	r0, r5
 802a3ae:	f7dd fba2 	bl	8007af6 <lv_obj_get_height>
 802a3b2:	4606      	mov	r6, r0
 802a3b4:	4284      	cmp	r4, r0
 802a3b6:	bfb4      	ite	lt
 802a3b8:	f04f 0b00 	movlt.w	fp, #0
 802a3bc:	f04f 0b01 	movge.w	fp, #1
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 802a3c0:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 802a3c4:	f003 0303 	and.w	r3, r3, #3
 802a3c8:	2b01      	cmp	r3, #1
 802a3ca:	d009      	beq.n	802a3e0 <lv_slider_event+0x618>
    if(is_horizontal) {
 802a3cc:	42b4      	cmp	r4, r6
 802a3ce:	da7b      	bge.n	802a4c8 <lv_slider_event+0x700>
        knob_size = lv_obj_get_width(obj);
 802a3d0:	4628      	mov	r0, r5
 802a3d2:	f7dd fb8a 	bl	8007aea <lv_obj_get_width>
 802a3d6:	9001      	str	r0, [sp, #4]
        else knob_area.y1 = slider->bar.indic_area.y1;
 802a3d8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 802a3da:	f8ad 3012 	strh.w	r3, [sp, #18]
 802a3de:	e080      	b.n	802a4e2 <lv_slider_event+0x71a>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 802a3e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a3e2:	2b00      	cmp	r3, #0
 802a3e4:	daf2      	bge.n	802a3cc <lv_slider_event+0x604>
       slider->bar.max_value > 0) is_symmetrical = true;
 802a3e6:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    if(is_horizontal) {
 802a3ea:	4284      	cmp	r4, r0
 802a3ec:	db0d      	blt.n	802a40a <lv_slider_event+0x642>
        knob_size = lv_obj_get_height(obj);
 802a3ee:	4628      	mov	r0, r5
 802a3f0:	f7dd fb81 	bl	8007af6 <lv_obj_get_height>
 802a3f4:	9001      	str	r0, [sp, #4]
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 802a3f6:	f1b8 0f00 	cmp.w	r8, #0
 802a3fa:	dd69      	ble.n	802a4d0 <lv_slider_event+0x708>
 802a3fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802a3fe:	2b00      	cmp	r3, #0
 802a400:	da66      	bge.n	802a4d0 <lv_slider_event+0x708>
 802a402:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 802a404:	f8ad 3010 	strh.w	r3, [sp, #16]
 802a408:	e06b      	b.n	802a4e2 <lv_slider_event+0x71a>
        knob_size = lv_obj_get_width(obj);
 802a40a:	4628      	mov	r0, r5
 802a40c:	f7dd fb6d 	bl	8007aea <lv_obj_get_width>
 802a410:	9001      	str	r0, [sp, #4]
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 802a412:	f1b8 0f00 	cmp.w	r8, #0
 802a416:	dddf      	ble.n	802a3d8 <lv_slider_event+0x610>
 802a418:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802a41a:	2b00      	cmp	r3, #0
 802a41c:	dadc      	bge.n	802a3d8 <lv_slider_event+0x610>
 802a41e:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 802a420:	f8ad 3012 	strh.w	r3, [sp, #18]
 802a424:	e05d      	b.n	802a4e2 <lv_slider_event+0x71a>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(!is_rtl, slider->bar.indic_area);
 802a426:	f1b9 0f01 	cmp.w	r9, #1
 802a42a:	bf14      	ite	ne
 802a42c:	f9b5 3034 	ldrshne.w	r3, [r5, #52]	; 0x34
 802a430:	f9b5 3038 	ldrsheq.w	r3, [r5, #56]	; 0x38
 802a434:	f8ad 3010 	strh.w	r3, [sp, #16]
        position_knob(obj, &knob_area, knob_size, is_horizontal);
 802a438:	465b      	mov	r3, fp
 802a43a:	9a01      	ldr	r2, [sp, #4]
 802a43c:	a904      	add	r1, sp, #16
 802a43e:	4628      	mov	r0, r5
 802a440:	f7ff fc32 	bl	8029ca8 <position_knob>
        lv_area_copy(&slider->left_knob_area, &knob_area);
 802a444:	f105 0660 	add.w	r6, r5, #96	; 0x60
    dest->x1 = src->x1;
 802a448:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802a44c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    dest->y1 = src->y1;
 802a450:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802a454:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
    dest->x2 = src->x2;
 802a458:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 802a45c:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
    dest->y2 = src->y2;
 802a460:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802a464:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 802a468:	ac06      	add	r4, sp, #24
 802a46a:	2238      	movs	r2, #56	; 0x38
 802a46c:	a914      	add	r1, sp, #80	; 0x50
 802a46e:	4620      	mov	r0, r4
 802a470:	f7f7 fae4 	bl	8021a3c <lv_memcpy>
        part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB_LEFT;
 802a474:	2301      	movs	r3, #1
 802a476:	9324      	str	r3, [sp, #144]	; 0x90
        part_draw_dsc.draw_area = &slider->left_knob_area;
 802a478:	9625      	str	r6, [sp, #148]	; 0x94
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 802a47a:	9426      	str	r4, [sp, #152]	; 0x98
        part_draw_dsc.id = 1;
 802a47c:	9330      	str	r3, [sp, #192]	; 0xc0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802a47e:	aa22      	add	r2, sp, #136	; 0x88
 802a480:	211a      	movs	r1, #26
 802a482:	4628      	mov	r0, r5
 802a484:	f7d9 fc3c 	bl	8003d00 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 802a488:	4632      	mov	r2, r6
 802a48a:	4621      	mov	r1, r4
 802a48c:	4638      	mov	r0, r7
 802a48e:	f7e4 fec7 	bl	800f220 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802a492:	aa22      	add	r2, sp, #136	; 0x88
 802a494:	211b      	movs	r1, #27
 802a496:	4628      	mov	r0, r5
 802a498:	f7d9 fc32 	bl	8003d00 <lv_event_send>
}
 802a49c:	e49d      	b.n	8029dda <lv_slider_event+0x12>
                    lv_group_set_editing(g, false);
 802a49e:	2100      	movs	r1, #0
 802a4a0:	4630      	mov	r0, r6
 802a4a2:	f7d9 fe84 	bl	80041ae <lv_group_set_editing>
 802a4a6:	e498      	b.n	8029dda <lv_slider_event+0x12>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802a4a8:	aa22      	add	r2, sp, #136	; 0x88
 802a4aa:	211a      	movs	r1, #26
 802a4ac:	4628      	mov	r0, r5
 802a4ae:	f7d9 fc27 	bl	8003d00 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 802a4b2:	4652      	mov	r2, sl
 802a4b4:	a906      	add	r1, sp, #24
 802a4b6:	4638      	mov	r0, r7
 802a4b8:	f7e4 feb2 	bl	800f220 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802a4bc:	aa22      	add	r2, sp, #136	; 0x88
 802a4be:	211b      	movs	r1, #27
 802a4c0:	4628      	mov	r0, r5
 802a4c2:	f7d9 fc1d 	bl	8003d00 <lv_event_send>
 802a4c6:	e488      	b.n	8029dda <lv_slider_event+0x12>
        knob_size = lv_obj_get_height(obj);
 802a4c8:	4628      	mov	r0, r5
 802a4ca:	f7dd fb14 	bl	8007af6 <lv_obj_get_height>
 802a4ce:	9001      	str	r0, [sp, #4]
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 802a4d0:	f1b9 0f01 	cmp.w	r9, #1
 802a4d4:	bf0c      	ite	eq
 802a4d6:	f9b5 3034 	ldrsheq.w	r3, [r5, #52]	; 0x34
 802a4da:	f9b5 3038 	ldrshne.w	r3, [r5, #56]	; 0x38
 802a4de:	f8ad 3010 	strh.w	r3, [sp, #16]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 802a4e2:	f10d 0818 	add.w	r8, sp, #24
 802a4e6:	4640      	mov	r0, r8
 802a4e8:	f7e4 fe3e 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 802a4ec:	4642      	mov	r2, r8
 802a4ee:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a4f2:	4628      	mov	r0, r5
 802a4f4:	f7dc fdb2 	bl	800705c <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, is_horizontal);
 802a4f8:	465b      	mov	r3, fp
 802a4fa:	9a01      	ldr	r2, [sp, #4]
 802a4fc:	a904      	add	r1, sp, #16
 802a4fe:	4628      	mov	r0, r5
 802a500:	f7ff fbd2 	bl	8029ca8 <position_knob>
    lv_area_copy(&slider->right_knob_area, &knob_area);
 802a504:	f105 0a68 	add.w	sl, r5, #104	; 0x68
    dest->x1 = src->x1;
 802a508:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802a50c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    dest->y1 = src->y1;
 802a510:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802a514:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    dest->x2 = src->x2;
 802a518:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 802a51c:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
    dest->y2 = src->y2;
 802a520:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802a524:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 802a528:	4639      	mov	r1, r7
 802a52a:	a822      	add	r0, sp, #136	; 0x88
 802a52c:	f7dd f8d1 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_KNOB;
 802a530:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 802a534:	932f      	str	r3, [sp, #188]	; 0xbc
    part_draw_dsc.class_p = MY_CLASS;
 802a536:	4b14      	ldr	r3, [pc, #80]	; (802a588 <lv_slider_event+0x7c0>)
 802a538:	9323      	str	r3, [sp, #140]	; 0x8c
    part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB;
 802a53a:	2300      	movs	r3, #0
 802a53c:	9324      	str	r3, [sp, #144]	; 0x90
    part_draw_dsc.id = 0;
 802a53e:	9330      	str	r3, [sp, #192]	; 0xc0
    part_draw_dsc.draw_area = &slider->right_knob_area;
 802a540:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 802a544:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 802a548:	4628      	mov	r0, r5
 802a54a:	f7fa ff86 	bl	802545a <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 802a54e:	2802      	cmp	r0, #2
 802a550:	d1aa      	bne.n	802a4a8 <lv_slider_event+0x6e0>
        lv_memcpy(&knob_rect_dsc_tmp, &knob_rect_dsc, sizeof(lv_draw_rect_dsc_t));
 802a552:	2238      	movs	r2, #56	; 0x38
 802a554:	a906      	add	r1, sp, #24
 802a556:	a814      	add	r0, sp, #80	; 0x50
 802a558:	f7f7 fa70 	bl	8021a3c <lv_memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802a55c:	aa22      	add	r2, sp, #136	; 0x88
 802a55e:	211a      	movs	r1, #26
 802a560:	4628      	mov	r0, r5
 802a562:	f7d9 fbcd 	bl	8003d00 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 802a566:	4652      	mov	r2, sl
 802a568:	a906      	add	r1, sp, #24
 802a56a:	4638      	mov	r0, r7
 802a56c:	f7e4 fe58 	bl	800f220 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802a570:	aa22      	add	r2, sp, #136	; 0x88
 802a572:	211b      	movs	r1, #27
 802a574:	4628      	mov	r0, r5
 802a576:	f7d9 fbc3 	bl	8003d00 <lv_event_send>
        if(is_horizontal) {
 802a57a:	42b4      	cmp	r4, r6
 802a57c:	f6bf af53 	bge.w	802a426 <lv_slider_event+0x65e>
            knob_area.y1 = slider->bar.indic_area.y2;
 802a580:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 802a582:	f8ad 3012 	strh.w	r3, [sp, #18]
 802a586:	e757      	b.n	802a438 <lv_slider_event+0x670>
 802a588:	080330b4 	.word	0x080330b4

0802a58c <lv_switch_anim_ready>:

/**
 * Resets the switch's animation state to "no animation in progress".
 */
static void lv_switch_anim_ready(lv_anim_t * a)
{
 802a58c:	b508      	push	{r3, lr}
    lv_switch_t * sw = a->var;
 802a58e:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 802a590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a594:	6243      	str	r3, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 802a596:	f7dd fcef 	bl	8007f78 <lv_obj_invalidate>
}
 802a59a:	bd08      	pop	{r3, pc}

0802a59c <lv_switch_anim_exec_cb>:
{
 802a59c:	b508      	push	{r3, lr}
    sw->anim_state = value;
 802a59e:	6241      	str	r1, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 802a5a0:	f7dd fcea 	bl	8007f78 <lv_obj_invalidate>
}
 802a5a4:	bd08      	pop	{r3, pc}

0802a5a6 <lv_switch_destructor>:
{
 802a5a6:	b508      	push	{r3, lr}
 802a5a8:	4608      	mov	r0, r1
    lv_anim_del(sw, NULL);
 802a5aa:	2100      	movs	r1, #0
 802a5ac:	f7f6 f8fe 	bl	80207ac <lv_anim_del>
}
 802a5b0:	bd08      	pop	{r3, pc}
	...

0802a5b4 <lv_switch_event>:
{
 802a5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802a5b8:	b0a5      	sub	sp, #148	; 0x94
 802a5ba:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802a5bc:	48a8      	ldr	r0, [pc, #672]	; (802a860 <lv_switch_event+0x2ac>)
 802a5be:	f7d9 faa2 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802a5c2:	2801      	cmp	r0, #1
 802a5c4:	d002      	beq.n	802a5cc <lv_switch_event+0x18>
}
 802a5c6:	b025      	add	sp, #148	; 0x94
 802a5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802a5cc:	4620      	mov	r0, r4
 802a5ce:	f7d9 fbbd 	bl	8003d4c <lv_event_get_code>
 802a5d2:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802a5d4:	4620      	mov	r0, r4
 802a5d6:	f7d9 fbb5 	bl	8003d44 <lv_event_get_target>
 802a5da:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802a5dc:	2d13      	cmp	r5, #19
 802a5de:	f000 80b7 	beq.w	802a750 <lv_switch_event+0x19c>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 802a5e2:	2d1c      	cmp	r5, #28
 802a5e4:	f000 80fe 	beq.w	802a7e4 <lv_switch_event+0x230>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802a5e8:	2d15      	cmp	r5, #21
 802a5ea:	d1ec      	bne.n	802a5c6 <lv_switch_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802a5ec:	4620      	mov	r0, r4
 802a5ee:	f7d9 fba9 	bl	8003d44 <lv_event_get_target>
 802a5f2:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802a5f4:	4620      	mov	r0, r4
 802a5f6:	f7d9 fc19 	bl	8003e2c <lv_event_get_draw_ctx>
 802a5fa:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a5fc:	2212      	movs	r2, #18
 802a5fe:	2100      	movs	r1, #0
 802a600:	4628      	mov	r0, r5
 802a602:	f7e0 f8f1 	bl	800a7e8 <lv_obj_get_style_prop>
 802a606:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a608:	2213      	movs	r2, #19
 802a60a:	2100      	movs	r1, #0
 802a60c:	4628      	mov	r0, r5
 802a60e:	f7e0 f8eb 	bl	800a7e8 <lv_obj_get_style_prop>
 802a612:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a614:	2210      	movs	r2, #16
 802a616:	2100      	movs	r1, #0
 802a618:	4628      	mov	r0, r5
 802a61a:	f7e0 f8e5 	bl	800a7e8 <lv_obj_get_style_prop>
 802a61e:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a620:	2211      	movs	r2, #17
 802a622:	2100      	movs	r1, #0
 802a624:	4628      	mov	r0, r5
 802a626:	f7e0 f8df 	bl	800a7e8 <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 802a62a:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
    dest->x2 = src->x2;
 802a62e:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
    dest->y2 = src->y2;
 802a632:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
    indic_area.x1 += bg_left;
 802a636:	f8b5 c014 	ldrh.w	ip, [r5, #20]
 802a63a:	4464      	add	r4, ip
 802a63c:	f8ad 4004 	strh.w	r4, [sp, #4]
    indic_area.x2 -= bg_right;
 802a640:	eba1 0108 	sub.w	r1, r1, r8
 802a644:	f8ad 1008 	strh.w	r1, [sp, #8]
    indic_area.y1 += bg_top;
 802a648:	4432      	add	r2, r6
 802a64a:	f8ad 2006 	strh.w	r2, [sp, #6]
    indic_area.y2 -= bg_bottom;
 802a64e:	1a1b      	subs	r3, r3, r0
 802a650:	f8ad 300a 	strh.w	r3, [sp, #10]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 802a654:	a805      	add	r0, sp, #20
 802a656:	f7e4 fd87 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 802a65a:	aa05      	add	r2, sp, #20
 802a65c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802a660:	4628      	mov	r0, r5
 802a662:	f7dc fcfb 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 802a666:	aa01      	add	r2, sp, #4
 802a668:	a905      	add	r1, sp, #20
 802a66a:	4638      	mov	r0, r7
 802a66c:	f7e4 fdd8 	bl	800f220 <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 802a670:	4628      	mov	r0, r5
 802a672:	f7dd fa40 	bl	8007af6 <lv_obj_get_height>
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 802a676:	b286      	uxth	r6, r0
 802a678:	8b2c      	ldrh	r4, [r5, #24]
 802a67a:	1ba4      	subs	r4, r4, r6
 802a67c:	3401      	adds	r4, #1
 802a67e:	8aab      	ldrh	r3, [r5, #20]
 802a680:	1ae4      	subs	r4, r4, r3
 802a682:	fa1f f884 	uxth.w	r8, r4
 802a686:	b224      	sxth	r4, r4
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 802a688:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802a68a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802a68e:	f000 80df 	beq.w	802a850 <lv_switch_event+0x29c>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 802a692:	fb03 f404 	mul.w	r4, r3, r4
 802a696:	2c00      	cmp	r4, #0
 802a698:	bfb8      	it	lt
 802a69a:	34ff      	addlt	r4, #255	; 0xff
 802a69c:	f344 240f 	sbfx	r4, r4, #8, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802a6a0:	2216      	movs	r2, #22
 802a6a2:	2100      	movs	r1, #0
 802a6a4:	4628      	mov	r0, r5
 802a6a6:	f7e0 f89f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802a6aa:	b2c0      	uxtb	r0, r0
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 802a6ac:	2801      	cmp	r0, #1
        anim_value_x = anim_length - anim_value_x;
 802a6ae:	bf04      	itt	eq
 802a6b0:	eba8 0404 	subeq.w	r4, r8, r4
 802a6b4:	b224      	sxtheq	r4, r4
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 802a6b6:	8aab      	ldrh	r3, [r5, #20]
 802a6b8:	441c      	add	r4, r3
 802a6ba:	b2a4      	uxth	r4, r4
 802a6bc:	f8ad 400c 	strh.w	r4, [sp, #12]
    knob_area.x2 = knob_area.x1 + knob_size;
 802a6c0:	4434      	add	r4, r6
 802a6c2:	f8ad 4010 	strh.w	r4, [sp, #16]
    knob_area.y1 = obj->coords.y1;
 802a6c6:	8aeb      	ldrh	r3, [r5, #22]
 802a6c8:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 = obj->coords.y2;
 802a6cc:	8b6b      	ldrh	r3, [r5, #26]
 802a6ce:	f8ad 3012 	strh.w	r3, [sp, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a6d2:	2212      	movs	r2, #18
 802a6d4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a6d8:	4628      	mov	r0, r5
 802a6da:	f7e0 f885 	bl	800a7e8 <lv_obj_get_style_prop>
 802a6de:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a6e0:	2213      	movs	r2, #19
 802a6e2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a6e6:	4628      	mov	r0, r5
 802a6e8:	f7e0 f87e 	bl	800a7e8 <lv_obj_get_style_prop>
 802a6ec:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a6ee:	2210      	movs	r2, #16
 802a6f0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a6f4:	4628      	mov	r0, r5
 802a6f6:	f7e0 f877 	bl	800a7e8 <lv_obj_get_style_prop>
 802a6fa:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a6fc:	2211      	movs	r2, #17
 802a6fe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a702:	4628      	mov	r0, r5
 802a704:	f7e0 f870 	bl	800a7e8 <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 802a708:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802a70c:	eba3 0308 	sub.w	r3, r3, r8
 802a710:	f8ad 300c 	strh.w	r3, [sp, #12]
    knob_area.x2 += knob_right;
 802a714:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802a718:	441c      	add	r4, r3
 802a71a:	f8ad 4010 	strh.w	r4, [sp, #16]
    knob_area.y1 -= knob_top;
 802a71e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 802a722:	1b9b      	subs	r3, r3, r6
 802a724:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 += knob_bottom;
 802a728:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802a72c:	4418      	add	r0, r3
 802a72e:	f8ad 0012 	strh.w	r0, [sp, #18]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 802a732:	a813      	add	r0, sp, #76	; 0x4c
 802a734:	f7e4 fd18 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 802a738:	aa13      	add	r2, sp, #76	; 0x4c
 802a73a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a73e:	4628      	mov	r0, r5
 802a740:	f7dc fc8c 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 802a744:	aa03      	add	r2, sp, #12
 802a746:	a913      	add	r1, sp, #76	; 0x4c
 802a748:	4638      	mov	r0, r7
 802a74a:	f7e4 fd69 	bl	800f220 <lv_draw_rect>
}
 802a74e:	e73a      	b.n	802a5c6 <lv_switch_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a750:	2212      	movs	r2, #18
 802a752:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a756:	f7e0 f847 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a75a:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a75e:	2213      	movs	r2, #19
 802a760:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a764:	4630      	mov	r0, r6
 802a766:	f7e0 f83f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a76a:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a76c:	2210      	movs	r2, #16
 802a76e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a772:	4630      	mov	r0, r6
 802a774:	f7e0 f838 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a778:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a77c:	2211      	movs	r2, #17
 802a77e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a782:	4630      	mov	r0, r6
 802a784:	f7e0 f830 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a788:	b207      	sxth	r7, r0
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a78a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a78e:	4630      	mov	r0, r6
 802a790:	f7dc ff35 	bl	80075fe <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 802a794:	454d      	cmp	r5, r9
 802a796:	bfb8      	it	lt
 802a798:	464d      	movlt	r5, r9
 802a79a:	4545      	cmp	r5, r8
 802a79c:	bfb8      	it	lt
 802a79e:	4645      	movlt	r5, r8
 802a7a0:	42bd      	cmp	r5, r7
 802a7a2:	bfb8      	it	lt
 802a7a4:	463d      	movlt	r5, r7
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 802a7a6:	3502      	adds	r5, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a7a8:	4405      	add	r5, r0
 802a7aa:	b2ad      	uxth	r5, r5
        lv_coord_t * s = lv_event_get_param(e);
 802a7ac:	4620      	mov	r0, r4
 802a7ae:	f7d9 fad1 	bl	8003d54 <lv_event_get_param>
 802a7b2:	4604      	mov	r4, r0
        *s = LV_MAX(*s, knob_size);
 802a7b4:	f9b0 3000 	ldrsh.w	r3, [r0]
 802a7b8:	b22d      	sxth	r5, r5
 802a7ba:	429d      	cmp	r5, r3
 802a7bc:	bfb8      	it	lt
 802a7be:	461d      	movlt	r5, r3
 802a7c0:	8005      	strh	r5, [r0, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 802a7c2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802a7c6:	4630      	mov	r0, r6
 802a7c8:	f7dc ff19 	bl	80075fe <lv_obj_calculate_ext_draw_size>
 802a7cc:	4285      	cmp	r5, r0
 802a7ce:	dd03      	ble.n	802a7d8 <lv_switch_event+0x224>
 802a7d0:	f9b4 0000 	ldrsh.w	r0, [r4]
 802a7d4:	8020      	strh	r0, [r4, #0]
 802a7d6:	e6f6      	b.n	802a5c6 <lv_switch_event+0x12>
 802a7d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802a7dc:	4630      	mov	r0, r6
 802a7de:	f7dc ff0e 	bl	80075fe <lv_obj_calculate_ext_draw_size>
 802a7e2:	e7f7      	b.n	802a7d4 <lv_switch_event+0x220>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 802a7e4:	2264      	movs	r2, #100	; 0x64
 802a7e6:	2100      	movs	r1, #0
 802a7e8:	f7df fffe 	bl	800a7e8 <lv_obj_get_style_prop>
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 802a7ec:	4605      	mov	r5, r0
 802a7ee:	b918      	cbnz	r0, 802a7f8 <lv_switch_event+0x244>
        lv_obj_invalidate(obj);
 802a7f0:	4630      	mov	r0, r6
 802a7f2:	f7dd fbc1 	bl	8007f78 <lv_obj_invalidate>
 802a7f6:	e6e6      	b.n	802a5c6 <lv_switch_event+0x12>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 802a7f8:	4630      	mov	r0, r6
 802a7fa:	f7dc f8f6 	bl	80069ea <lv_obj_get_state>
 802a7fe:	f000 0001 	and.w	r0, r0, #1
        int32_t anim_start;
        int32_t anim_end;
        /*No animation in progress -> simply set the values*/
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 802a802:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802a804:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 802a808:	d01b      	beq.n	802a842 <lv_switch_event+0x28e>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_start = sw->anim_state;
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 802a80a:	0207      	lsls	r7, r0, #8
        }
        /*Calculate actual animation duration*/
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;

        /*Stop the previous animation if it exists*/
        lv_anim_del(sw, NULL);
 802a80c:	2100      	movs	r1, #0
 802a80e:	4630      	mov	r0, r6
 802a810:	f7f5 ffcc 	bl	80207ac <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 802a814:	a813      	add	r0, sp, #76	; 0x4c
 802a816:	f7f5 ffaf 	bl	8020778 <lv_anim_init>
    a->var = var;
 802a81a:	9613      	str	r6, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 802a81c:	4b11      	ldr	r3, [pc, #68]	; (802a864 <lv_switch_event+0x2b0>)
 802a81e:	9314      	str	r3, [sp, #80]	; 0x50
    a->start_value = start;
 802a820:	941b      	str	r4, [sp, #108]	; 0x6c
    a->current_value = start;
 802a822:	941c      	str	r4, [sp, #112]	; 0x70
    a->end_value = end;
 802a824:	971d      	str	r7, [sp, #116]	; 0x74
    a->ready_cb = ready_cb;
 802a826:	4b10      	ldr	r3, [pc, #64]	; (802a868 <lv_switch_event+0x2b4>)
 802a828:	9316      	str	r3, [sp, #88]	; 0x58
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 802a82a:	1be3      	subs	r3, r4, r7
 802a82c:	2b00      	cmp	r3, #0
 802a82e:	bfb8      	it	lt
 802a830:	425b      	neglt	r3, r3
 802a832:	fb05 f303 	mul.w	r3, r5, r3
 802a836:	0a1b      	lsrs	r3, r3, #8
    a->time = duration;
 802a838:	931e      	str	r3, [sp, #120]	; 0x78
        lv_anim_set_var(&a, sw);
        lv_anim_set_exec_cb(&a, lv_switch_anim_exec_cb);
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
 802a83a:	a813      	add	r0, sp, #76	; 0x4c
 802a83c:	f7f5 ffee 	bl	802081c <lv_anim_start>
 802a840:	e7d6      	b.n	802a7f0 <lv_switch_event+0x23c>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 802a842:	0207      	lsls	r7, r0, #8
 802a844:	2800      	cmp	r0, #0
 802a846:	bf14      	ite	ne
 802a848:	2400      	movne	r4, #0
 802a84a:	f44f 7480 	moveq.w	r4, #256	; 0x100
 802a84e:	e7dd      	b.n	802a80c <lv_switch_event+0x258>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 802a850:	4628      	mov	r0, r5
 802a852:	f7dc f8ca 	bl	80069ea <lv_obj_get_state>
        anim_value_x = chk ? anim_length : 0;
 802a856:	f010 0f01 	tst.w	r0, #1
 802a85a:	bf08      	it	eq
 802a85c:	2400      	moveq	r4, #0
 802a85e:	e71f      	b.n	802a6a0 <lv_switch_event+0xec>
 802a860:	080330d0 	.word	0x080330d0
 802a864:	0802a59d 	.word	0x0802a59d
 802a868:	0802a58d 	.word	0x0802a58d

0802a86c <lv_switch_constructor>:
{
 802a86c:	b510      	push	{r4, lr}
 802a86e:	460c      	mov	r4, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 802a870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a874:	624b      	str	r3, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 802a876:	2110      	movs	r1, #16
 802a878:	4620      	mov	r0, r4
 802a87a:	f7dc f853 	bl	8006924 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 802a87e:	2108      	movs	r1, #8
 802a880:	4620      	mov	r0, r4
 802a882:	f7dc f815 	bl	80068b0 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 802a886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802a88a:	4620      	mov	r0, r4
 802a88c:	f7dc f810 	bl	80068b0 <lv_obj_add_flag>
}
 802a890:	bd10      	pop	{r4, pc}

0802a892 <get_row_height>:
}

static lv_coord_t get_row_height(lv_obj_t * obj, uint16_t row_id, const lv_font_t * font,
                                 lv_coord_t letter_space, lv_coord_t line_space,
                                 lv_coord_t cell_left, lv_coord_t cell_right, lv_coord_t cell_top, lv_coord_t cell_bottom)
{
 802a892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a896:	b08f      	sub	sp, #60	; 0x3c
 802a898:	4680      	mov	r8, r0
 802a89a:	9205      	str	r2, [sp, #20]
 802a89c:	9309      	str	r3, [sp, #36]	; 0x24
 802a89e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 802a8a2:	930a      	str	r3, [sp, #40]	; 0x28
 802a8a4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 802a8a8:	9306      	str	r3, [sp, #24]
 802a8aa:	f9bd 0070 	ldrsh.w	r0, [sp, #112]	; 0x70
 802a8ae:	9007      	str	r0, [sp, #28]
 802a8b0:	4403      	add	r3, r0
 802a8b2:	b29b      	uxth	r3, r3
 802a8b4:	9308      	str	r3, [sp, #32]
    lv_table_t * table = (lv_table_t *)obj;

    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 802a8b6:	8917      	ldrh	r7, [r2, #8]
 802a8b8:	441f      	add	r7, r3
 802a8ba:	b23b      	sxth	r3, r7
 802a8bc:	9304      	str	r3, [sp, #16]
    /* Calculate the cell_data index where to start */
    uint16_t row_start = row_id * table->col_cnt;
 802a8be:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 802a8c2:	fb03 f101 	mul.w	r1, r3, r1

    /* Traverse the cells in the row_id row */
    uint16_t cell;
    uint16_t col;
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 802a8c6:	2b00      	cmp	r3, #0
 802a8c8:	d072      	beq.n	802a9b0 <get_row_height+0x11e>
 802a8ca:	b28e      	uxth	r6, r1
 802a8cc:	4637      	mov	r7, r6
 802a8ce:	4618      	mov	r0, r3
 802a8d0:	46b6      	mov	lr, r6
 802a8d2:	2500      	movs	r5, #0
                           h_max);
        }
        /*Else we have to calculate the height of the cell text*/
        else {
            lv_point_t txt_size;
            txt_w -= cell_left + cell_right;
 802a8d4:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 802a8d8:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 802a8dc:	18d3      	adds	r3, r2, r3
 802a8de:	930b      	str	r3, [sp, #44]	; 0x2c
 802a8e0:	e01d      	b.n	802a91e <get_row_height+0x8c>
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802a8e2:	2400      	movs	r4, #0
        if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 802a8e4:	f899 2000 	ldrb.w	r2, [r9]
 802a8e8:	f012 0f02 	tst.w	r2, #2
 802a8ec:	d040      	beq.n	802a970 <get_row_height+0xde>
 802a8ee:	9b05      	ldr	r3, [sp, #20]
 802a8f0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
            h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 802a8f4:	9b06      	ldr	r3, [sp, #24]
 802a8f6:	18d3      	adds	r3, r2, r3
 802a8f8:	9907      	ldr	r1, [sp, #28]
 802a8fa:	440b      	add	r3, r1
 802a8fc:	9904      	ldr	r1, [sp, #16]
 802a8fe:	428b      	cmp	r3, r1
 802a900:	dd03      	ble.n	802a90a <get_row_height+0x78>
 802a902:	9b08      	ldr	r3, [sp, #32]
 802a904:	441a      	add	r2, r3
 802a906:	b213      	sxth	r3, r2
 802a908:	9304      	str	r3, [sp, #16]
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 802a90a:	3601      	adds	r6, #1
 802a90c:	b2b6      	uxth	r6, r6
 802a90e:	3501      	adds	r5, #1
 802a910:	b2ad      	uxth	r5, r5
 802a912:	46b6      	mov	lr, r6
 802a914:	f8b8 0024 	ldrh.w	r0, [r8, #36]	; 0x24
 802a918:	19c3      	adds	r3, r0, r7
 802a91a:	429e      	cmp	r6, r3
 802a91c:	da48      	bge.n	802a9b0 <get_row_height+0x11e>
        char * cell_data = table->cell_data[cell];
 802a91e:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 802a922:	f851 9026 	ldr.w	r9, [r1, r6, lsl #2]
        if(is_cell_empty(cell_data)) {
 802a926:	f1b9 0f00 	cmp.w	r9, #0
 802a92a:	d0ee      	beq.n	802a90a <get_row_height+0x78>
        lv_coord_t txt_w = table->col_w[col];
 802a92c:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
 802a930:	f93a 3015 	ldrsh.w	r3, [sl, r5, lsl #1]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802a934:	46ab      	mov	fp, r5
 802a936:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 802a93a:	4565      	cmp	r5, ip
 802a93c:	dad1      	bge.n	802a8e2 <get_row_height+0x50>
 802a93e:	462a      	mov	r2, r5
 802a940:	2400      	movs	r4, #0
 802a942:	4620      	mov	r0, r4
            char * next_cell_data = table->cell_data[cell + col_merge];
 802a944:	4470      	add	r0, lr
 802a946:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
            if(is_cell_empty(next_cell_data)) break;
 802a94a:	2800      	cmp	r0, #0
 802a94c:	d0ca      	beq.n	802a8e4 <get_row_height+0x52>
            if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 802a94e:	7800      	ldrb	r0, [r0, #0]
 802a950:	f010 0f01 	tst.w	r0, #1
 802a954:	d0c6      	beq.n	802a8e4 <get_row_height+0x52>
                txt_w += table->col_w[col + col_merge + 1];
 802a956:	3201      	adds	r2, #1
 802a958:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 802a95c:	4413      	add	r3, r2
 802a95e:	b21b      	sxth	r3, r3
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802a960:	3401      	adds	r4, #1
 802a962:	b2a4      	uxth	r4, r4
 802a964:	4620      	mov	r0, r4
 802a966:	eb04 020b 	add.w	r2, r4, fp
 802a96a:	4562      	cmp	r2, ip
 802a96c:	dbea      	blt.n	802a944 <get_row_height+0xb2>
 802a96e:	e7b9      	b.n	802a8e4 <get_row_height+0x52>
            txt_w -= cell_left + cell_right;
 802a970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a972:	1a9b      	subs	r3, r3, r2

            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 802a974:	2200      	movs	r2, #0
 802a976:	9202      	str	r2, [sp, #8]
 802a978:	b21b      	sxth	r3, r3
 802a97a:	9301      	str	r3, [sp, #4]
 802a97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a97e:	9300      	str	r3, [sp, #0]
 802a980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a982:	9a05      	ldr	r2, [sp, #20]
 802a984:	f109 0101 	add.w	r1, r9, #1
 802a988:	a80d      	add	r0, sp, #52	; 0x34
 802a98a:	f7f9 faa8 	bl	8023ede <lv_txt_get_size>
                            letter_space, line_space, txt_w, LV_TEXT_FLAG_NONE);

            h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 802a98e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 802a992:	9a06      	ldr	r2, [sp, #24]
 802a994:	4413      	add	r3, r2
 802a996:	9a07      	ldr	r2, [sp, #28]
 802a998:	4413      	add	r3, r2
 802a99a:	9a04      	ldr	r2, [sp, #16]
 802a99c:	4293      	cmp	r3, r2
 802a99e:	bfb8      	it	lt
 802a9a0:	4613      	movlt	r3, r2
 802a9a2:	b21b      	sxth	r3, r3
 802a9a4:	9304      	str	r3, [sp, #16]
            /*Skip until one element after the last merged column*/
            cell += col_merge;
 802a9a6:	4426      	add	r6, r4
 802a9a8:	b2b6      	uxth	r6, r6
            col += col_merge;
 802a9aa:	4425      	add	r5, r4
 802a9ac:	b2ad      	uxth	r5, r5
 802a9ae:	e7ac      	b.n	802a90a <get_row_height+0x78>
        }
    }

    return h_max;
}
 802a9b0:	9804      	ldr	r0, [sp, #16]
 802a9b2:	b00f      	add	sp, #60	; 0x3c
 802a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a9b8 <refr_size_form_row>:
{
 802a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a9bc:	b08b      	sub	sp, #44	; 0x2c
 802a9be:	4605      	mov	r5, r0
 802a9c0:	460c      	mov	r4, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a9c2:	2212      	movs	r2, #18
 802a9c4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802a9c8:	f7df ff0e 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a9cc:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a9d0:	2213      	movs	r2, #19
 802a9d2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802a9d6:	4628      	mov	r0, r5
 802a9d8:	f7df ff06 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a9dc:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a9e0:	2210      	movs	r2, #16
 802a9e2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802a9e6:	4628      	mov	r0, r5
 802a9e8:	f7df fefe 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a9ec:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a9f0:	2211      	movs	r2, #17
 802a9f2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802a9f6:	4628      	mov	r0, r5
 802a9f8:	f7df fef6 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a9fc:	b203      	sxth	r3, r0
 802a9fe:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802aa00:	2258      	movs	r2, #88	; 0x58
 802aa02:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aa06:	4628      	mov	r0, r5
 802aa08:	f7df feee 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802aa0c:	b203      	sxth	r3, r0
 802aa0e:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802aa10:	2259      	movs	r2, #89	; 0x59
 802aa12:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aa16:	4628      	mov	r0, r5
 802aa18:	f7df fee6 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802aa1c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802aa1e:	2257      	movs	r2, #87	; 0x57
 802aa20:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aa24:	4628      	mov	r0, r5
 802aa26:	f7df fedf 	bl	800a7e8 <lv_obj_get_style_prop>
 802aa2a:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 802aa2c:	2205      	movs	r2, #5
 802aa2e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aa32:	4628      	mov	r0, r5
 802aa34:	f7df fed8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802aa38:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 802aa3c:	2206      	movs	r2, #6
 802aa3e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aa42:	4628      	mov	r0, r5
 802aa44:	f7df fed0 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802aa48:	b206      	sxth	r6, r0
    for(i = start_row; i < table->row_cnt; i++) {
 802aa4a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 802aa4c:	429c      	cmp	r4, r3
 802aa4e:	d21c      	bcs.n	802aa8a <refr_size_form_row+0xd2>
        lv_coord_t calculated_height = get_row_height(obj, i, font, letter_space, line_space,
 802aa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aa52:	9304      	str	r3, [sp, #16]
 802aa54:	f8cd 900c 	str.w	r9, [sp, #12]
 802aa58:	f8cd a008 	str.w	sl, [sp, #8]
 802aa5c:	f8cd b004 	str.w	fp, [sp, #4]
 802aa60:	9700      	str	r7, [sp, #0]
 802aa62:	9b08      	ldr	r3, [sp, #32]
 802aa64:	9a07      	ldr	r2, [sp, #28]
 802aa66:	b2a1      	uxth	r1, r4
 802aa68:	4628      	mov	r0, r5
 802aa6a:	f7ff ff12 	bl	802a892 <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, calculated_height, maxh);
 802aa6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802aa70:	42b0      	cmp	r0, r6
 802aa72:	bfa8      	it	ge
 802aa74:	4630      	movge	r0, r6
 802aa76:	b200      	sxth	r0, r0
 802aa78:	4540      	cmp	r0, r8
 802aa7a:	bfb8      	it	lt
 802aa7c:	4640      	movlt	r0, r8
 802aa7e:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for(i = start_row; i < table->row_cnt; i++) {
 802aa82:	3401      	adds	r4, #1
 802aa84:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 802aa86:	42a3      	cmp	r3, r4
 802aa88:	d8e2      	bhi.n	802aa50 <refr_size_form_row+0x98>
    lv_obj_refresh_self_size(obj);
 802aa8a:	4628      	mov	r0, r5
 802aa8c:	f7dd f8ca 	bl	8007c24 <lv_obj_refresh_self_size>
    lv_obj_invalidate(obj);
 802aa90:	4628      	mov	r0, r5
 802aa92:	f7dd fa71 	bl	8007f78 <lv_obj_invalidate>
}
 802aa96:	b00b      	add	sp, #44	; 0x2c
 802aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802aa9c <get_cell_area>:
    strcpy(&dst[1], txt);
#endif
}

static void get_cell_area(lv_obj_t * obj, uint16_t row, uint16_t col, lv_area_t * area)
{
 802aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802aaa0:	4605      	mov	r5, r0
 802aaa2:	460e      	mov	r6, r1
 802aaa4:	461c      	mov	r4, r3
    lv_table_t * table = (lv_table_t *)obj;

    uint32_t c;
    area->x1 = 0;
 802aaa6:	2300      	movs	r3, #0
 802aaa8:	8023      	strh	r3, [r4, #0]
    for(c = 0; c < col; c++) {
 802aaaa:	4617      	mov	r7, r2
 802aaac:	b142      	cbz	r2, 802aac0 <get_cell_area+0x24>
        area->x1 += table->col_w[c];
 802aaae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802aab0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802aab4:	8821      	ldrh	r1, [r4, #0]
 802aab6:	440a      	add	r2, r1
 802aab8:	8022      	strh	r2, [r4, #0]
    for(c = 0; c < col; c++) {
 802aaba:	3301      	adds	r3, #1
 802aabc:	42bb      	cmp	r3, r7
 802aabe:	d1f6      	bne.n	802aaae <get_cell_area+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802aac0:	2216      	movs	r2, #22
 802aac2:	2100      	movs	r1, #0
 802aac4:	4628      	mov	r0, r5
 802aac6:	f7df fe8f 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802aaca:	b2c0      	uxtb	r0, r0
    }

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL;
    if(rtl) {
 802aacc:	2801      	cmp	r0, #1
 802aace:	d037      	beq.n	802ab40 <get_cell_area+0xa4>
        lv_coord_t w = lv_obj_get_width(obj);
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
        area->x1 = area->x2 - table->col_w[col];
    }
    else {
        area->x1 -= lv_obj_get_scroll_x(obj);
 802aad0:	4628      	mov	r0, r5
 802aad2:	f7de fbeb 	bl	80092ac <lv_obj_get_scroll_x>
 802aad6:	8823      	ldrh	r3, [r4, #0]
 802aad8:	1a1b      	subs	r3, r3, r0
 802aada:	8023      	strh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802aadc:	2212      	movs	r2, #18
 802aade:	2100      	movs	r1, #0
 802aae0:	4628      	mov	r0, r5
 802aae2:	f7df fe81 	bl	800a7e8 <lv_obj_get_style_prop>
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 802aae6:	8823      	ldrh	r3, [r4, #0]
 802aae8:	4418      	add	r0, r3
 802aaea:	b280      	uxth	r0, r0
 802aaec:	8020      	strh	r0, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
 802aaee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802aaf0:	3801      	subs	r0, #1
 802aaf2:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 802aaf6:	4418      	add	r0, r3
 802aaf8:	80a0      	strh	r0, [r4, #4]
    }

    uint32_t r;
    area->y1 = 0;
 802aafa:	2300      	movs	r3, #0
 802aafc:	8063      	strh	r3, [r4, #2]
    for(r = 0; r < row; r++) {
 802aafe:	b146      	cbz	r6, 802ab12 <get_cell_area+0x76>
        area->y1 += table->row_h[r];
 802ab00:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 802ab02:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802ab06:	8861      	ldrh	r1, [r4, #2]
 802ab08:	440a      	add	r2, r1
 802ab0a:	8062      	strh	r2, [r4, #2]
    for(r = 0; r < row; r++) {
 802ab0c:	3301      	adds	r3, #1
 802ab0e:	42b3      	cmp	r3, r6
 802ab10:	d1f6      	bne.n	802ab00 <get_cell_area+0x64>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802ab12:	2210      	movs	r2, #16
 802ab14:	2100      	movs	r1, #0
 802ab16:	4628      	mov	r0, r5
 802ab18:	f7df fe66 	bl	800a7e8 <lv_obj_get_style_prop>
    }

    area->y1 += lv_obj_get_style_pad_top(obj, 0);
 802ab1c:	8863      	ldrh	r3, [r4, #2]
 802ab1e:	4418      	add	r0, r3
 802ab20:	8060      	strh	r0, [r4, #2]
    area->y1 -= lv_obj_get_scroll_y(obj);
 802ab22:	4628      	mov	r0, r5
 802ab24:	f7de fbca 	bl	80092bc <lv_obj_get_scroll_y>
 802ab28:	8863      	ldrh	r3, [r4, #2]
 802ab2a:	1a18      	subs	r0, r3, r0
 802ab2c:	b280      	uxth	r0, r0
 802ab2e:	8060      	strh	r0, [r4, #2]
    area->y2 = area->y1 + table->row_h[row] - 1;
 802ab30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802ab32:	3801      	subs	r0, #1
 802ab34:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 802ab38:	4418      	add	r0, r3
 802ab3a:	80e0      	strh	r0, [r4, #6]

}
 802ab3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        area->x1 += lv_obj_get_scroll_x(obj);
 802ab40:	4628      	mov	r0, r5
 802ab42:	f7de fbb3 	bl	80092ac <lv_obj_get_scroll_x>
 802ab46:	8823      	ldrh	r3, [r4, #0]
 802ab48:	4418      	add	r0, r3
 802ab4a:	8020      	strh	r0, [r4, #0]
        lv_coord_t w = lv_obj_get_width(obj);
 802ab4c:	4628      	mov	r0, r5
 802ab4e:	f7dc ffcc 	bl	8007aea <lv_obj_get_width>
 802ab52:	4680      	mov	r8, r0
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
 802ab54:	f8b4 9000 	ldrh.w	r9, [r4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802ab58:	2213      	movs	r2, #19
 802ab5a:	2100      	movs	r1, #0
 802ab5c:	4628      	mov	r0, r5
 802ab5e:	f7df fe43 	bl	800a7e8 <lv_obj_get_style_prop>
 802ab62:	eb09 0300 	add.w	r3, r9, r0
 802ab66:	eba8 0303 	sub.w	r3, r8, r3
 802ab6a:	b29b      	uxth	r3, r3
 802ab6c:	80a3      	strh	r3, [r4, #4]
        area->x1 = area->x2 - table->col_w[col];
 802ab6e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802ab70:	f832 2017 	ldrh.w	r2, [r2, r7, lsl #1]
 802ab74:	1a9b      	subs	r3, r3, r2
 802ab76:	8023      	strh	r3, [r4, #0]
 802ab78:	e7bf      	b.n	802aafa <get_cell_area+0x5e>

0802ab7a <scroll_to_selected_cell>:


static void scroll_to_selected_cell(lv_obj_t * obj)
{
 802ab7a:	b530      	push	{r4, r5, lr}
 802ab7c:	b083      	sub	sp, #12
 802ab7e:	4604      	mov	r4, r0
    lv_table_t * table = (lv_table_t *)obj;

    lv_area_t a;
    get_cell_area(obj, table->row_act, table->col_act, &a);
 802ab80:	466b      	mov	r3, sp
 802ab82:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 802ab84:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 802ab86:	f7ff ff89 	bl	802aa9c <get_cell_area>
    if(a.x1 < 0) {
 802ab8a:	f9bd 1000 	ldrsh.w	r1, [sp]
 802ab8e:	2900      	cmp	r1, #0
 802ab90:	db13      	blt.n	802abba <scroll_to_selected_cell+0x40>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
    }
    else if(a.x2 > lv_obj_get_width(obj)) {
 802ab92:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 802ab96:	4620      	mov	r0, r4
 802ab98:	f7dc ffa7 	bl	8007aea <lv_obj_get_width>
 802ab9c:	4285      	cmp	r5, r0
 802ab9e:	dd13      	ble.n	802abc8 <scroll_to_selected_cell+0x4e>
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 802aba0:	4620      	mov	r0, r4
 802aba2:	f7dc ffa2 	bl	8007aea <lv_obj_get_width>
 802aba6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802abaa:	1a41      	subs	r1, r0, r1
 802abac:	2301      	movs	r3, #1
 802abae:	2200      	movs	r2, #0
 802abb0:	b209      	sxth	r1, r1
 802abb2:	4620      	mov	r0, r4
 802abb4:	f7de fde6 	bl	8009784 <lv_obj_scroll_by_bounded>
 802abb8:	e006      	b.n	802abc8 <scroll_to_selected_cell+0x4e>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
 802abba:	4249      	negs	r1, r1
 802abbc:	2301      	movs	r3, #1
 802abbe:	2200      	movs	r2, #0
 802abc0:	b209      	sxth	r1, r1
 802abc2:	4620      	mov	r0, r4
 802abc4:	f7de fdde 	bl	8009784 <lv_obj_scroll_by_bounded>
    }

    if(a.y1 < 0) {
 802abc8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 802abcc:	2a00      	cmp	r2, #0
 802abce:	db13      	blt.n	802abf8 <scroll_to_selected_cell+0x7e>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
    }
    else if(a.y2 > lv_obj_get_height(obj)) {
 802abd0:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 802abd4:	4620      	mov	r0, r4
 802abd6:	f7dc ff8e 	bl	8007af6 <lv_obj_get_height>
 802abda:	4285      	cmp	r5, r0
 802abdc:	dd13      	ble.n	802ac06 <scroll_to_selected_cell+0x8c>
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 802abde:	4620      	mov	r0, r4
 802abe0:	f7dc ff89 	bl	8007af6 <lv_obj_get_height>
 802abe4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 802abe8:	1a82      	subs	r2, r0, r2
 802abea:	2301      	movs	r3, #1
 802abec:	b212      	sxth	r2, r2
 802abee:	2100      	movs	r1, #0
 802abf0:	4620      	mov	r0, r4
 802abf2:	f7de fdc7 	bl	8009784 <lv_obj_scroll_by_bounded>
    }

}
 802abf6:	e006      	b.n	802ac06 <scroll_to_selected_cell+0x8c>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
 802abf8:	4252      	negs	r2, r2
 802abfa:	2301      	movs	r3, #1
 802abfc:	b212      	sxth	r2, r2
 802abfe:	2100      	movs	r1, #0
 802ac00:	4620      	mov	r0, r4
 802ac02:	f7de fdbf 	bl	8009784 <lv_obj_scroll_by_bounded>
}
 802ac06:	b003      	add	sp, #12
 802ac08:	bd30      	pop	{r4, r5, pc}
	...

0802ac0c <draw_main>:
{
 802ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac10:	b0df      	sub	sp, #380	; 0x17c
 802ac12:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802ac14:	f7d9 f896 	bl	8003d44 <lv_event_get_target>
 802ac18:	4680      	mov	r8, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802ac1a:	4620      	mov	r0, r4
 802ac1c:	f7d9 f906 	bl	8003e2c <lv_event_get_draw_ctx>
 802ac20:	4683      	mov	fp, r0
 802ac22:	9007      	str	r0, [sp, #28]
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 802ac24:	6882      	ldr	r2, [r0, #8]
 802ac26:	f108 0114 	add.w	r1, r8, #20
 802ac2a:	a85c      	add	r0, sp, #368	; 0x170
 802ac2c:	f7f5 ff07 	bl	8020a3e <_lv_area_intersect>
 802ac30:	b910      	cbnz	r0, 802ac38 <draw_main+0x2c>
}
 802ac32:	b05f      	add	sp, #380	; 0x17c
 802ac34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 802ac38:	f8db 3008 	ldr.w	r3, [fp, #8]
 802ac3c:	9313      	str	r3, [sp, #76]	; 0x4c
    draw_ctx->clip_area = &clip_area;
 802ac3e:	ab5c      	add	r3, sp, #368	; 0x170
 802ac40:	f8cb 3008 	str.w	r3, [fp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802ac44:	2232      	movs	r2, #50	; 0x32
 802ac46:	2100      	movs	r1, #0
 802ac48:	4640      	mov	r0, r8
 802ac4a:	f7df fdcd 	bl	800a7e8 <lv_obj_get_style_prop>
 802ac4e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802ac50:	2210      	movs	r2, #16
 802ac52:	2100      	movs	r1, #0
 802ac54:	4640      	mov	r0, r8
 802ac56:	f7df fdc7 	bl	800a7e8 <lv_obj_get_style_prop>
 802ac5a:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 802ac5c:	b203      	sxth	r3, r0
 802ac5e:	930d      	str	r3, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802ac60:	2211      	movs	r2, #17
 802ac62:	2100      	movs	r1, #0
 802ac64:	4640      	mov	r0, r8
 802ac66:	f7df fdbf 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802ac6a:	b203      	sxth	r3, r0
 802ac6c:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802ac6e:	2212      	movs	r2, #18
 802ac70:	2100      	movs	r1, #0
 802ac72:	4640      	mov	r0, r8
 802ac74:	f7df fdb8 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802ac78:	9004      	str	r0, [sp, #16]
 802ac7a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802ac7e:	920b      	str	r2, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802ac80:	2213      	movs	r2, #19
 802ac82:	2100      	movs	r1, #0
 802ac84:	4640      	mov	r0, r8
 802ac86:	f7df fdaf 	bl	800a7e8 <lv_obj_get_style_prop>
 802ac8a:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 802ac8c:	b202      	sxth	r2, r0
 802ac8e:	920a      	str	r2, [sp, #40]	; 0x28
    lv_state_t state_ori = obj->state;
 802ac90:	f8b8 6020 	ldrh.w	r6, [r8, #32]
 802ac94:	9611      	str	r6, [sp, #68]	; 0x44
    obj->state = LV_STATE_DEFAULT;
 802ac96:	2500      	movs	r5, #0
 802ac98:	f8a8 5020 	strh.w	r5, [r8, #32]
    obj->skip_trans = 1;
 802ac9c:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802aca0:	f043 0304 	orr.w	r3, r3, #4
 802aca4:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
    lv_draw_rect_dsc_init(&rect_dsc_def);
 802aca8:	a84b      	add	r0, sp, #300	; 0x12c
 802acaa:	f7e4 fa5d 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 802acae:	aa4b      	add	r2, sp, #300	; 0x12c
 802acb0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802acb4:	4640      	mov	r0, r8
 802acb6:	f7dc f9d1 	bl	800705c <lv_obj_init_draw_rect_dsc>
    lv_draw_label_dsc_init(&label_dsc_def);
 802acba:	a835      	add	r0, sp, #212	; 0xd4
 802acbc:	f7e2 fc98 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 802acc0:	aa35      	add	r2, sp, #212	; 0xd4
 802acc2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802acc6:	4640      	mov	r0, r8
 802acc8:	f7dc fb3d 	bl	8007346 <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 802accc:	f8a8 6020 	strh.w	r6, [r8, #32]
    obj->skip_trans = 0;
 802acd0:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802acd4:	f365 0382 	bfi	r3, r5, #2, #1
 802acd8:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 802acdc:	f8b8 6016 	ldrh.w	r6, [r8, #22]
 802ace0:	4640      	mov	r0, r8
 802ace2:	f7de faeb 	bl	80092bc <lv_obj_get_scroll_y>
 802ace6:	b2a4      	uxth	r4, r4
 802ace8:	19e3      	adds	r3, r4, r7
 802acea:	3b01      	subs	r3, #1
 802acec:	4433      	add	r3, r6
 802acee:	1a1b      	subs	r3, r3, r0
 802acf0:	f8ad 316a 	strh.w	r3, [sp, #362]	; 0x16a
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 802acf4:	4640      	mov	r0, r8
 802acf6:	f7de fad9 	bl	80092ac <lv_obj_get_scroll_x>
 802acfa:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802acfc:	2216      	movs	r2, #22
 802acfe:	4629      	mov	r1, r5
 802ad00:	4640      	mov	r0, r8
 802ad02:	f7df fd71 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802ad06:	fa5f fa80 	uxtb.w	sl, r0
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 802ad0a:	4659      	mov	r1, fp
 802ad0c:	a81b      	add	r0, sp, #108	; 0x6c
 802ad0e:	f7dc fce0 	bl	80076d2 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 802ad12:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 802ad16:	9328      	str	r3, [sp, #160]	; 0xa0
    part_draw_dsc.class_p = MY_CLASS;
 802ad18:	4bc1      	ldr	r3, [pc, #772]	; (802b020 <draw_main+0x414>)
 802ad1a:	931c      	str	r3, [sp, #112]	; 0x70
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 802ad1c:	951d      	str	r5, [sp, #116]	; 0x74
    part_draw_dsc.rect_dsc = &rect_dsc_act;
 802ad1e:	ab3d      	add	r3, sp, #244	; 0xf4
 802ad20:	931f      	str	r3, [sp, #124]	; 0x7c
    part_draw_dsc.label_dsc = &label_dsc_act;
 802ad22:	ab2d      	add	r3, sp, #180	; 0xb4
 802ad24:	9320      	str	r3, [sp, #128]	; 0x80
    for(row = 0; row < table->row_cnt; row++) {
 802ad26:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 802ad2a:	2b00      	cmp	r3, #0
 802ad2c:	f000 8205 	beq.w	802b13a <draw_main+0x52e>
 802ad30:	9506      	str	r5, [sp, #24]
    uint16_t cell = 0;
 802ad32:	46ab      	mov	fp, r5
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 802ad34:	9b04      	ldr	r3, [sp, #16]
 802ad36:	4423      	add	r3, r4
 802ad38:	3b01      	subs	r3, #1
 802ad3a:	9310      	str	r3, [sp, #64]	; 0x40
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 802ad3c:	eb04 0309 	add.w	r3, r4, r9
 802ad40:	9312      	str	r3, [sp, #72]	; 0x48
 802ad42:	e1cc      	b.n	802b0de <draw_main+0x4d2>
 802ad44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802ad46:	43d2      	mvns	r2, r2
 802ad48:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 802ad4c:	440a      	add	r2, r1
 802ad4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802ad50:	1a52      	subs	r2, r2, r1
 802ad52:	f8ad 2164 	strh.w	r2, [sp, #356]	; 0x164
 802ad56:	e1e3      	b.n	802b120 <draw_main+0x514>
            lv_table_cell_ctrl_t ctrl = 0;
 802ad58:	2300      	movs	r3, #0
 802ad5a:	9305      	str	r3, [sp, #20]
 802ad5c:	e13c      	b.n	802afd8 <draw_main+0x3cc>
                cell_area.x2 = cell_area.x1 - 1;
 802ad5e:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 802ad62:	1e5a      	subs	r2, r3, #1
 802ad64:	f8ad 2168 	strh.w	r2, [sp, #360]	; 0x168
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 802ad68:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802ad6c:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 802ad70:	1a9b      	subs	r3, r3, r2
 802ad72:	f8ad 3164 	strh.w	r3, [sp, #356]	; 0x164
 802ad76:	e13f      	b.n	802aff8 <draw_main+0x3ec>
                    if(rtl) cell_area.x1 -= offset;
 802ad78:	f8bd 2164 	ldrh.w	r2, [sp, #356]	; 0x164
 802ad7c:	1ad3      	subs	r3, r2, r3
 802ad7e:	f8ad 3164 	strh.w	r3, [sp, #356]	; 0x164
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802ad82:	3401      	adds	r4, #1
 802ad84:	b2a4      	uxth	r4, r4
 802ad86:	4622      	mov	r2, r4
 802ad88:	1963      	adds	r3, r4, r5
 802ad8a:	428b      	cmp	r3, r1
 802ad8c:	da15      	bge.n	802adba <draw_main+0x1ae>
                char * next_cell_data = table->cell_data[cell + col_merge];
 802ad8e:	445a      	add	r2, fp
 802ad90:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                if(is_cell_empty(next_cell_data)) break;
 802ad94:	b18a      	cbz	r2, 802adba <draw_main+0x1ae>
                if(merge_ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 802ad96:	7812      	ldrb	r2, [r2, #0]
 802ad98:	f012 0f01 	tst.w	r2, #1
 802ad9c:	d00d      	beq.n	802adba <draw_main+0x1ae>
                    lv_coord_t offset = table->col_w[col + col_merge + 1];
 802ad9e:	3301      	adds	r3, #1
 802ada0:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802ada4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
                    if(rtl) cell_area.x1 -= offset;
 802ada8:	f1ba 0f01 	cmp.w	sl, #1
 802adac:	d0e4      	beq.n	802ad78 <draw_main+0x16c>
                    else cell_area.x2 += offset;
 802adae:	f8bd 2168 	ldrh.w	r2, [sp, #360]	; 0x168
 802adb2:	4413      	add	r3, r2
 802adb4:	f8ad 3168 	strh.w	r3, [sp, #360]	; 0x168
 802adb8:	e7e3      	b.n	802ad82 <draw_main+0x176>
            if(cell_area.y2 < clip_area.y1) {
 802adba:	f9bd 316a 	ldrsh.w	r3, [sp, #362]	; 0x16a
 802adbe:	f9bd 2172 	ldrsh.w	r2, [sp, #370]	; 0x172
 802adc2:	429a      	cmp	r2, r3
 802adc4:	f300 8123 	bgt.w	802b00e <draw_main+0x402>
    dest->x1 = src->x1;
 802adc8:	f9bd 0164 	ldrsh.w	r0, [sp, #356]	; 0x164
 802adcc:	8030      	strh	r0, [r6, #0]
    dest->y1 = src->y1;
 802adce:	f9bd 1166 	ldrsh.w	r1, [sp, #358]	; 0x166
 802add2:	8071      	strh	r1, [r6, #2]
    dest->x2 = src->x2;
 802add4:	f9bd 7168 	ldrsh.w	r7, [sp, #360]	; 0x168
 802add8:	80b7      	strh	r7, [r6, #4]
    dest->y2 = src->y2;
 802adda:	80f3      	strh	r3, [r6, #6]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 802addc:	f89d c14f 	ldrb.w	ip, [sp, #335]	; 0x14f
 802ade0:	f3cc 0244 	ubfx	r2, ip, #1, #5
 802ade4:	f01c 0f08 	tst.w	ip, #8
 802ade8:	d00d      	beq.n	802ae06 <draw_main+0x1fa>
 802adea:	f9b8 c014 	ldrsh.w	ip, [r8, #20]
 802adee:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 802adf2:	44f4      	add	ip, lr
 802adf4:	4560      	cmp	r0, ip
 802adf6:	dd06      	ble.n	802ae06 <draw_main+0x1fa>
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 802adf8:	f9bd c14c 	ldrsh.w	ip, [sp, #332]	; 0x14c
 802adfc:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 802ae00:	eba0 006c 	sub.w	r0, r0, ip, asr #1
 802ae04:	8030      	strh	r0, [r6, #0]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 802ae06:	f012 0f02 	tst.w	r2, #2
 802ae0a:	d00d      	beq.n	802ae28 <draw_main+0x21c>
 802ae0c:	f9b8 0016 	ldrsh.w	r0, [r8, #22]
 802ae10:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 802ae14:	4460      	add	r0, ip
 802ae16:	4281      	cmp	r1, r0
 802ae18:	dd06      	ble.n	802ae28 <draw_main+0x21c>
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 802ae1a:	f9bd 014c 	ldrsh.w	r0, [sp, #332]	; 0x14c
 802ae1e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802ae22:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 802ae26:	8071      	strh	r1, [r6, #2]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 802ae28:	f012 0f08 	tst.w	r2, #8
 802ae2c:	d010      	beq.n	802ae50 <draw_main+0x244>
 802ae2e:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
 802ae32:	980a      	ldr	r0, [sp, #40]	; 0x28
 802ae34:	1a09      	subs	r1, r1, r0
 802ae36:	3901      	subs	r1, #1
 802ae38:	428f      	cmp	r7, r1
 802ae3a:	da09      	bge.n	802ae50 <draw_main+0x244>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 802ae3c:	f9bd 114c 	ldrsh.w	r1, [sp, #332]	; 0x14c
 802ae40:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 802ae44:	f001 0101 	and.w	r1, r1, #1
 802ae48:	eb01 0160 	add.w	r1, r1, r0, asr #1
 802ae4c:	440f      	add	r7, r1
 802ae4e:	80b7      	strh	r7, [r6, #4]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 802ae50:	f012 0f01 	tst.w	r2, #1
 802ae54:	d010      	beq.n	802ae78 <draw_main+0x26c>
               cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 802ae56:	f9b8 201a 	ldrsh.w	r2, [r8, #26]
 802ae5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802ae5c:	1a52      	subs	r2, r2, r1
 802ae5e:	3a01      	subs	r2, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 802ae60:	4293      	cmp	r3, r2
 802ae62:	da09      	bge.n	802ae78 <draw_main+0x26c>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 802ae64:	f9bd 214c 	ldrsh.w	r2, [sp, #332]	; 0x14c
 802ae68:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 802ae6c:	f002 0201 	and.w	r2, r2, #1
 802ae70:	eb02 0261 	add.w	r2, r2, r1, asr #1
 802ae74:	4413      	add	r3, r2
 802ae76:	80f3      	strh	r3, [r6, #6]
            if(row == table->row_act && col == table->col_act) {
 802ae78:	f8b8 3036 	ldrh.w	r3, [r8, #54]	; 0x36
 802ae7c:	9a08      	ldr	r2, [sp, #32]
 802ae7e:	4293      	cmp	r3, r2
 802ae80:	d104      	bne.n	802ae8c <draw_main+0x280>
 802ae82:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
 802ae86:	454b      	cmp	r3, r9
 802ae88:	f000 80cc 	beq.w	802b024 <draw_main+0x418>
                lv_memcpy(&rect_dsc_act, &rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 802ae8c:	2238      	movs	r2, #56	; 0x38
 802ae8e:	a94b      	add	r1, sp, #300	; 0x12c
 802ae90:	a83d      	add	r0, sp, #244	; 0xf4
 802ae92:	f7f6 fdd3 	bl	8021a3c <lv_memcpy>
                lv_memcpy(&label_dsc_act, &label_dsc_def, sizeof(lv_draw_label_dsc_t));
 802ae96:	2220      	movs	r2, #32
 802ae98:	a935      	add	r1, sp, #212	; 0xd4
 802ae9a:	a82d      	add	r0, sp, #180	; 0xb4
 802ae9c:	f7f6 fdce 	bl	8021a3c <lv_memcpy>
            part_draw_dsc.draw_area = &cell_area_border;
 802aea0:	961e      	str	r6, [sp, #120]	; 0x78
            part_draw_dsc.id = row * table->col_cnt + col;
 802aea2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802aea6:	f8b8 2024 	ldrh.w	r2, [r8, #36]	; 0x24
 802aeaa:	fb02 5503 	mla	r5, r2, r3, r5
 802aeae:	9529      	str	r5, [sp, #164]	; 0xa4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802aeb0:	aa1b      	add	r2, sp, #108	; 0x6c
 802aeb2:	211a      	movs	r1, #26
 802aeb4:	4640      	mov	r0, r8
 802aeb6:	f7d8 ff23 	bl	8003d00 <lv_event_send>
            lv_draw_rect(draw_ctx, &rect_dsc_act, &cell_area_border);
 802aeba:	4632      	mov	r2, r6
 802aebc:	a93d      	add	r1, sp, #244	; 0xf4
 802aebe:	9807      	ldr	r0, [sp, #28]
 802aec0:	f7e4 f9ae 	bl	800f220 <lv_draw_rect>
            if(table->cell_data[cell]) {
 802aec4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802aec8:	9a04      	ldr	r2, [sp, #16]
 802aeca:	589b      	ldr	r3, [r3, r2]
 802aecc:	2b00      	cmp	r3, #0
 802aece:	d063      	beq.n	802af98 <draw_main+0x38c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802aed0:	2212      	movs	r2, #18
 802aed2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aed6:	4640      	mov	r0, r8
 802aed8:	f7df fc86 	bl	800a7e8 <lv_obj_get_style_prop>
 802aedc:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802aede:	2213      	movs	r2, #19
 802aee0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aee4:	4640      	mov	r0, r8
 802aee6:	f7df fc7f 	bl	800a7e8 <lv_obj_get_style_prop>
 802aeea:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802aeec:	2210      	movs	r2, #16
 802aeee:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802aef2:	4640      	mov	r0, r8
 802aef4:	f7df fc78 	bl	800a7e8 <lv_obj_get_style_prop>
 802aef8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802aefa:	2211      	movs	r2, #17
 802aefc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802af00:	4640      	mov	r0, r8
 802af02:	f7df fc71 	bl	800a7e8 <lv_obj_get_style_prop>
                txt_area.x1 = cell_area.x1 + cell_left;
 802af06:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 802af0a:	441d      	add	r5, r3
 802af0c:	b2ad      	uxth	r5, r5
 802af0e:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
                txt_area.x2 = cell_area.x2 - cell_right;
 802af12:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 802af16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802af18:	1a9b      	subs	r3, r3, r2
 802af1a:	b29a      	uxth	r2, r3
 802af1c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                txt_area.y1 = cell_area.y1 + cell_top;
 802af20:	f8bd 3166 	ldrh.w	r3, [sp, #358]	; 0x166
 802af24:	441f      	add	r7, r3
 802af26:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                txt_area.y2 = cell_area.y2 - cell_bottom;
 802af2a:	f8bd 316a 	ldrh.w	r3, [sp, #362]	; 0x16a
 802af2e:	1a1b      	subs	r3, r3, r0
 802af30:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                if(crop) txt_flags = LV_TEXT_FLAG_EXPAND;
 802af34:	9b05      	ldr	r3, [sp, #20]
 802af36:	f013 0f02 	tst.w	r3, #2
 802af3a:	f040 8102 	bne.w	802b142 <draw_main+0x536>
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 802af3e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802af42:	9904      	ldr	r1, [sp, #16]
 802af44:	5859      	ldr	r1, [r3, r1]
 802af46:	2300      	movs	r3, #0
 802af48:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802af4a:	1c53      	adds	r3, r2, #1
 802af4c:	1b5b      	subs	r3, r3, r5
 802af4e:	b21b      	sxth	r3, r3
 802af50:	9301      	str	r3, [sp, #4]
 802af52:	f9bd 30c6 	ldrsh.w	r3, [sp, #198]	; 0xc6
 802af56:	9300      	str	r3, [sp, #0]
 802af58:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802af5c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802af5e:	3101      	adds	r1, #1
 802af60:	a85b      	add	r0, sp, #364	; 0x16c
 802af62:	f7f8 ffbc 	bl	8023ede <lv_txt_get_size>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 802af66:	f8bd 3166 	ldrh.w	r3, [sp, #358]	; 0x166
 802af6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802af6c:	4413      	add	r3, r2
 802af6e:	b29b      	uxth	r3, r3
 802af70:	f9bd 216e 	ldrsh.w	r2, [sp, #366]	; 0x16e
 802af74:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 802af78:	f3c2 024f 	ubfx	r2, r2, #1, #16
 802af7c:	1a99      	subs	r1, r3, r2
 802af7e:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 802af82:	4413      	add	r3, r2
 802af84:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                label_mask_ok = _lv_area_intersect(&label_clip_area, &clip_area, &cell_area);
 802af88:	aa59      	add	r2, sp, #356	; 0x164
 802af8a:	a95c      	add	r1, sp, #368	; 0x170
 802af8c:	a819      	add	r0, sp, #100	; 0x64
 802af8e:	f7f5 fd56 	bl	8020a3e <_lv_area_intersect>
                if(label_mask_ok) {
 802af92:	2800      	cmp	r0, #0
 802af94:	f040 8089 	bne.w	802b0aa <draw_main+0x49e>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802af98:	aa1b      	add	r2, sp, #108	; 0x6c
 802af9a:	211b      	movs	r1, #27
 802af9c:	4640      	mov	r0, r8
 802af9e:	f7d8 feaf 	bl	8003d00 <lv_event_send>
            cell += col_merge + 1;
 802afa2:	f10b 0b01 	add.w	fp, fp, #1
 802afa6:	44a3      	add	fp, r4
 802afa8:	fa1f fb8b 	uxth.w	fp, fp
            col += col_merge;
 802afac:	444c      	add	r4, r9
 802afae:	b2a4      	uxth	r4, r4
        for(col = 0; col < table->col_cnt; col++) {
 802afb0:	3401      	adds	r4, #1
 802afb2:	fa1f f984 	uxth.w	r9, r4
 802afb6:	f8b8 1024 	ldrh.w	r1, [r8, #36]	; 0x24
 802afba:	4549      	cmp	r1, r9
 802afbc:	f240 8087 	bls.w	802b0ce <draw_main+0x4c2>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 802afc0:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 802afc4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 802afc8:	9304      	str	r3, [sp, #16]
 802afca:	f850 302b 	ldr.w	r3, [r0, fp, lsl #2]
 802afce:	2b00      	cmp	r3, #0
 802afd0:	f43f aec2 	beq.w	802ad58 <draw_main+0x14c>
 802afd4:	781b      	ldrb	r3, [r3, #0]
 802afd6:	9305      	str	r3, [sp, #20]
            if(rtl) {
 802afd8:	f1ba 0f01 	cmp.w	sl, #1
 802afdc:	f43f aebf 	beq.w	802ad5e <draw_main+0x152>
                cell_area.x1 = cell_area.x2 + 1;
 802afe0:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 802afe4:	1c5a      	adds	r2, r3, #1
 802afe6:	f8ad 2164 	strh.w	r2, [sp, #356]	; 0x164
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 802afea:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802afee:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 802aff2:	4413      	add	r3, r2
 802aff4:	f8ad 3168 	strh.w	r3, [sp, #360]	; 0x168
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802aff8:	464d      	mov	r5, r9
 802affa:	3901      	subs	r1, #1
 802affc:	4589      	cmp	r9, r1
 802affe:	bfa8      	it	ge
 802b000:	2400      	movge	r4, #0
 802b002:	f6bf aeda 	bge.w	802adba <draw_main+0x1ae>
 802b006:	464b      	mov	r3, r9
 802b008:	2400      	movs	r4, #0
 802b00a:	4622      	mov	r2, r4
 802b00c:	e6bf      	b.n	802ad8e <draw_main+0x182>
                cell += col_merge + 1;
 802b00e:	f10b 0b01 	add.w	fp, fp, #1
 802b012:	44a3      	add	fp, r4
 802b014:	fa1f fb8b 	uxth.w	fp, fp
                col += col_merge;
 802b018:	444c      	add	r4, r9
 802b01a:	b2a4      	uxth	r4, r4
                continue;
 802b01c:	e7c8      	b.n	802afb0 <draw_main+0x3a4>
 802b01e:	bf00      	nop
 802b020:	080330ec 	.word	0x080330ec
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 802b024:	f8b8 2020 	ldrh.w	r2, [r8, #32]
 802b028:	f002 0360 	and.w	r3, r2, #96	; 0x60
            lv_state_t cell_state = LV_STATE_DEFAULT;
 802b02c:	2b20      	cmp	r3, #32
 802b02e:	bf18      	it	ne
 802b030:	2300      	movne	r3, #0
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 802b032:	f012 0f02 	tst.w	r2, #2
 802b036:	bf18      	it	ne
 802b038:	f043 0302 	orrne.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 802b03c:	f012 0f04 	tst.w	r2, #4
 802b040:	d02c      	beq.n	802b09c <draw_main+0x490>
 802b042:	f043 0304 	orr.w	r3, r3, #4
 802b046:	b29b      	uxth	r3, r3
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 802b048:	f012 0f08 	tst.w	r2, #8
 802b04c:	d002      	beq.n	802b054 <draw_main+0x448>
 802b04e:	f043 0308 	orr.w	r3, r3, #8
 802b052:	b29b      	uxth	r3, r3
                obj->state = cell_state;
 802b054:	f8a8 3020 	strh.w	r3, [r8, #32]
                obj->skip_trans = 1;
 802b058:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802b05c:	f043 0304 	orr.w	r3, r3, #4
 802b060:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 802b064:	a83d      	add	r0, sp, #244	; 0xf4
 802b066:	f7e4 f87f 	bl	800f168 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 802b06a:	a82d      	add	r0, sp, #180	; 0xb4
 802b06c:	f7e2 fac0 	bl	800d5f0 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 802b070:	aa3d      	add	r2, sp, #244	; 0xf4
 802b072:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b076:	4640      	mov	r0, r8
 802b078:	f7db fff0 	bl	800705c <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 802b07c:	aa2d      	add	r2, sp, #180	; 0xb4
 802b07e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b082:	4640      	mov	r0, r8
 802b084:	f7dc f95f 	bl	8007346 <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 802b088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b08a:	f8a8 3020 	strh.w	r3, [r8, #32]
                obj->skip_trans = 0;
 802b08e:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802b092:	f36f 0382 	bfc	r3, #2, #1
 802b096:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
 802b09a:	e701      	b.n	802aea0 <draw_main+0x294>
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 802b09c:	f012 0f08 	tst.w	r2, #8
 802b0a0:	d1d5      	bne.n	802b04e <draw_main+0x442>
            if(cell_state == LV_STATE_DEFAULT) {
 802b0a2:	2b00      	cmp	r3, #0
 802b0a4:	f43f aef2 	beq.w	802ae8c <draw_main+0x280>
 802b0a8:	e7d4      	b.n	802b054 <draw_main+0x448>
                    draw_ctx->clip_area = &label_clip_area;
 802b0aa:	ab19      	add	r3, sp, #100	; 0x64
 802b0ac:	9d07      	ldr	r5, [sp, #28]
 802b0ae:	4628      	mov	r0, r5
 802b0b0:	60ab      	str	r3, [r5, #8]
                    lv_draw_label(draw_ctx, &label_dsc_act, &txt_area, table->cell_data[cell] + 1, NULL);
 802b0b2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802b0b6:	9a04      	ldr	r2, [sp, #16]
 802b0b8:	589b      	ldr	r3, [r3, r2]
 802b0ba:	2200      	movs	r2, #0
 802b0bc:	9200      	str	r2, [sp, #0]
 802b0be:	3301      	adds	r3, #1
 802b0c0:	aa17      	add	r2, sp, #92	; 0x5c
 802b0c2:	a92d      	add	r1, sp, #180	; 0xb4
 802b0c4:	f7e2 fac8 	bl	800d658 <lv_draw_label>
                    draw_ctx->clip_area = &clip_area;
 802b0c8:	ab5c      	add	r3, sp, #368	; 0x170
 802b0ca:	60ab      	str	r3, [r5, #8]
 802b0cc:	e764      	b.n	802af98 <draw_main+0x38c>
    for(row = 0; row < table->row_cnt; row++) {
 802b0ce:	9b06      	ldr	r3, [sp, #24]
 802b0d0:	3301      	adds	r3, #1
 802b0d2:	9306      	str	r3, [sp, #24]
 802b0d4:	f8b8 2026 	ldrh.w	r2, [r8, #38]	; 0x26
 802b0d8:	b29b      	uxth	r3, r3
 802b0da:	429a      	cmp	r2, r3
 802b0dc:	d92d      	bls.n	802b13a <draw_main+0x52e>
 802b0de:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802b0e2:	461a      	mov	r2, r3
 802b0e4:	9308      	str	r3, [sp, #32]
        lv_coord_t h_row = table->row_h[row];
 802b0e6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 802b0ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 802b0ee:	f8bd 116a 	ldrh.w	r1, [sp, #362]	; 0x16a
 802b0f2:	1c4a      	adds	r2, r1, #1
 802b0f4:	b212      	sxth	r2, r2
 802b0f6:	f8ad 2166 	strh.w	r2, [sp, #358]	; 0x166
        cell_area.y2 = cell_area.y1 + h_row - 1;
 802b0fa:	4419      	add	r1, r3
 802b0fc:	f8ad 116a 	strh.w	r1, [sp, #362]	; 0x16a
        if(cell_area.y1 > clip_area.y2) break;
 802b100:	f9bd 1176 	ldrsh.w	r1, [sp, #374]	; 0x176
 802b104:	4291      	cmp	r1, r2
 802b106:	db18      	blt.n	802b13a <draw_main+0x52e>
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 802b108:	f1ba 0f01 	cmp.w	sl, #1
 802b10c:	f43f ae1a 	beq.w	802ad44 <draw_main+0x138>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 802b110:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 802b114:	9910      	ldr	r1, [sp, #64]	; 0x40
 802b116:	440a      	add	r2, r1
 802b118:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b11a:	1a52      	subs	r2, r2, r1
 802b11c:	f8ad 2168 	strh.w	r2, [sp, #360]	; 0x168
        for(col = 0; col < table->col_cnt; col++) {
 802b120:	f8b8 1024 	ldrh.w	r1, [r8, #36]	; 0x24
 802b124:	2900      	cmp	r1, #0
 802b126:	d0d2      	beq.n	802b0ce <draw_main+0x4c2>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 802b128:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802b12c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 802b130:	930e      	str	r3, [sp, #56]	; 0x38
 802b132:	f04f 0900 	mov.w	r9, #0
    dest->x1 = src->x1;
 802b136:	ae15      	add	r6, sp, #84	; 0x54
 802b138:	e742      	b.n	802afc0 <draw_main+0x3b4>
    draw_ctx->clip_area = clip_area_ori;
 802b13a:	9b07      	ldr	r3, [sp, #28]
 802b13c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b13e:	609a      	str	r2, [r3, #8]
 802b140:	e577      	b.n	802ac32 <draw_main+0x26>
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 802b142:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802b146:	9904      	ldr	r1, [sp, #16]
 802b148:	5859      	ldr	r1, [r3, r1]
 802b14a:	2302      	movs	r3, #2
 802b14c:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802b14e:	1c53      	adds	r3, r2, #1
 802b150:	1b5b      	subs	r3, r3, r5
 802b152:	b21b      	sxth	r3, r3
 802b154:	9301      	str	r3, [sp, #4]
 802b156:	f9bd 30c6 	ldrsh.w	r3, [sp, #198]	; 0xc6
 802b15a:	9300      	str	r3, [sp, #0]
 802b15c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802b160:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802b162:	3101      	adds	r1, #1
 802b164:	a85b      	add	r0, sp, #364	; 0x16c
 802b166:	f7f8 feba 	bl	8023ede <lv_txt_get_size>
                if(!crop) {
 802b16a:	e70d      	b.n	802af88 <draw_main+0x37c>

0802b16c <lv_table_event>:
{
 802b16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b170:	b082      	sub	sp, #8
 802b172:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802b174:	48a5      	ldr	r0, [pc, #660]	; (802b40c <lv_table_event+0x2a0>)
 802b176:	f7d8 fcc6 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802b17a:	2801      	cmp	r0, #1
 802b17c:	d002      	beq.n	802b184 <lv_table_event+0x18>
}
 802b17e:	b002      	add	sp, #8
 802b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802b184:	4620      	mov	r0, r4
 802b186:	f7d8 fde1 	bl	8003d4c <lv_event_get_code>
 802b18a:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802b18c:	4620      	mov	r0, r4
 802b18e:	f7d8 fdd9 	bl	8003d44 <lv_event_get_target>
 802b192:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 802b194:	2d2a      	cmp	r5, #42	; 0x2a
 802b196:	d014      	beq.n	802b1c2 <lv_table_event+0x56>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 802b198:	2d2c      	cmp	r5, #44	; 0x2c
 802b19a:	d016      	beq.n	802b1ca <lv_table_event+0x5e>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING) {
 802b19c:	1e6b      	subs	r3, r5, #1
 802b19e:	b2db      	uxtb	r3, r3
 802b1a0:	2b01      	cmp	r3, #1
 802b1a2:	d936      	bls.n	802b212 <lv_table_event+0xa6>
    else if(code == LV_EVENT_RELEASED) {
 802b1a4:	2d08      	cmp	r5, #8
 802b1a6:	f000 80ab 	beq.w	802b300 <lv_table_event+0x194>
    else if(code == LV_EVENT_FOCUSED) {
 802b1aa:	2d0e      	cmp	r5, #14
 802b1ac:	f000 80ce 	beq.w	802b34c <lv_table_event+0x1e0>
    else if(code == LV_EVENT_KEY) {
 802b1b0:	2d0d      	cmp	r5, #13
 802b1b2:	f000 80ce 	beq.w	802b352 <lv_table_event+0x1e6>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802b1b6:	2d15      	cmp	r5, #21
 802b1b8:	d1e1      	bne.n	802b17e <lv_table_event+0x12>
        draw_main(e);
 802b1ba:	4620      	mov	r0, r4
 802b1bc:	f7ff fd26 	bl	802ac0c <draw_main>
 802b1c0:	e7dd      	b.n	802b17e <lv_table_event+0x12>
        refr_size_form_row(obj, 0);
 802b1c2:	2100      	movs	r1, #0
 802b1c4:	f7ff fbf8 	bl	802a9b8 <refr_size_form_row>
 802b1c8:	e7d9      	b.n	802b17e <lv_table_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 802b1ca:	4620      	mov	r0, r4
 802b1cc:	f7d8 fdc2 	bl	8003d54 <lv_event_get_param>
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 802b1d0:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
 802b1d2:	b1d4      	cbz	r4, 802b20a <lv_table_event+0x9e>
 802b1d4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 802b1d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
        lv_coord_t w = 0;
 802b1da:	2200      	movs	r2, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 802b1dc:	f933 1b02 	ldrsh.w	r1, [r3], #2
 802b1e0:	440a      	add	r2, r1
 802b1e2:	b212      	sxth	r2, r2
 802b1e4:	42a3      	cmp	r3, r4
 802b1e6:	d1f9      	bne.n	802b1dc <lv_table_event+0x70>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 802b1e8:	8cf5      	ldrh	r5, [r6, #38]	; 0x26
 802b1ea:	b185      	cbz	r5, 802b20e <lv_table_event+0xa2>
 802b1ec:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 802b1ee:	eb01 0545 	add.w	r5, r1, r5, lsl #1
        lv_coord_t h = 0;
 802b1f2:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 802b1f4:	f931 4b02 	ldrsh.w	r4, [r1], #2
 802b1f8:	4423      	add	r3, r4
 802b1fa:	b21b      	sxth	r3, r3
 802b1fc:	428d      	cmp	r5, r1
 802b1fe:	d1f9      	bne.n	802b1f4 <lv_table_event+0x88>
        p->x = w - 1;
 802b200:	3a01      	subs	r2, #1
 802b202:	8002      	strh	r2, [r0, #0]
        p->y = h - 1;
 802b204:	3b01      	subs	r3, #1
 802b206:	8043      	strh	r3, [r0, #2]
 802b208:	e7b9      	b.n	802b17e <lv_table_event+0x12>
        lv_coord_t w = 0;
 802b20a:	2200      	movs	r2, #0
 802b20c:	e7ec      	b.n	802b1e8 <lv_table_event+0x7c>
        lv_coord_t h = 0;
 802b20e:	2300      	movs	r3, #0
 802b210:	e7f6      	b.n	802b200 <lv_table_event+0x94>
    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 802b212:	f7d9 f91b 	bl	800444c <lv_indev_get_act>
 802b216:	f7d9 f91f 	bl	8004458 <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 802b21a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 802b21e:	2801      	cmp	r0, #1
 802b220:	d1ad      	bne.n	802b17e <lv_table_event+0x12>
    lv_indev_get_point(lv_indev_get_act(), &p);
 802b222:	f7d9 f913 	bl	800444c <lv_indev_get_act>
 802b226:	a901      	add	r1, sp, #4
 802b228:	f7d9 f98d 	bl	8004546 <lv_indev_get_point>
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 802b22c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802b230:	4630      	mov	r0, r6
 802b232:	f7de f83b 	bl	80092ac <lv_obj_get_scroll_x>
 802b236:	4404      	add	r4, r0
 802b238:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802b23a:	2216      	movs	r2, #22
 802b23c:	2100      	movs	r1, #0
 802b23e:	4630      	mov	r0, r6
 802b240:	f7df fad2 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802b244:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 802b246:	2801      	cmp	r0, #1
 802b248:	d04e      	beq.n	802b2e8 <lv_table_event+0x17c>
            x -= obj->coords.x1;
 802b24a:	8ab5      	ldrh	r5, [r6, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802b24c:	2212      	movs	r2, #18
 802b24e:	2100      	movs	r1, #0
 802b250:	4630      	mov	r0, r6
 802b252:	f7df fac9 	bl	800a7e8 <lv_obj_get_style_prop>
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802b256:	4405      	add	r5, r0
 802b258:	1b65      	subs	r5, r4, r5
 802b25a:	b22d      	sxth	r5, r5
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 802b25c:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
 802b25e:	b184      	cbz	r4, 802b282 <lv_table_event+0x116>
            tmp += table->col_w[*col];
 802b260:	6b31      	ldr	r1, [r6, #48]	; 0x30
 802b262:	f9b1 2000 	ldrsh.w	r2, [r1]
            if(x < tmp) break;
 802b266:	4295      	cmp	r5, r2
 802b268:	db48      	blt.n	802b2fc <lv_table_event+0x190>
        *col = 0;
 802b26a:	2300      	movs	r3, #0
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 802b26c:	3301      	adds	r3, #1
 802b26e:	b29b      	uxth	r3, r3
 802b270:	42a3      	cmp	r3, r4
 802b272:	d006      	beq.n	802b282 <lv_table_event+0x116>
            tmp += table->col_w[*col];
 802b274:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 802b278:	4402      	add	r2, r0
 802b27a:	b212      	sxth	r2, r2
            if(x < tmp) break;
 802b27c:	42aa      	cmp	r2, r5
 802b27e:	ddf5      	ble.n	802b26c <lv_table_event+0x100>
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 802b280:	461c      	mov	r4, r3
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 802b282:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 802b286:	4630      	mov	r0, r6
 802b288:	f7de f818 	bl	80092bc <lv_obj_get_scroll_y>
 802b28c:	4607      	mov	r7, r0
        y -= obj->coords.y1;
 802b28e:	f8b6 8016 	ldrh.w	r8, [r6, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802b292:	2210      	movs	r2, #16
 802b294:	2100      	movs	r1, #0
 802b296:	4630      	mov	r0, r6
 802b298:	f7df faa6 	bl	800a7e8 <lv_obj_get_style_prop>
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 802b29c:	1a2d      	subs	r5, r5, r0
 802b29e:	eba5 0508 	sub.w	r5, r5, r8
 802b2a2:	19e8      	adds	r0, r5, r7
 802b2a4:	b200      	sxth	r0, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 802b2a6:	8cf7      	ldrh	r7, [r6, #38]	; 0x26
 802b2a8:	b18f      	cbz	r7, 802b2ce <lv_table_event+0x162>
            tmp += table->row_h[*row];
 802b2aa:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 802b2ac:	f9b1 2000 	ldrsh.w	r2, [r1]
            if(y < tmp) break;
 802b2b0:	4282      	cmp	r2, r0
 802b2b2:	f300 80a9 	bgt.w	802b408 <lv_table_event+0x29c>
        *row = 0;
 802b2b6:	2300      	movs	r3, #0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 802b2b8:	3301      	adds	r3, #1
 802b2ba:	b29b      	uxth	r3, r3
 802b2bc:	42bb      	cmp	r3, r7
 802b2be:	d006      	beq.n	802b2ce <lv_table_event+0x162>
            tmp += table->row_h[*row];
 802b2c0:	f831 5f02 	ldrh.w	r5, [r1, #2]!
 802b2c4:	442a      	add	r2, r5
 802b2c6:	b212      	sxth	r2, r2
            if(y < tmp) break;
 802b2c8:	4290      	cmp	r0, r2
 802b2ca:	daf5      	bge.n	802b2b8 <lv_table_event+0x14c>
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 802b2cc:	461f      	mov	r7, r3
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 802b2ce:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 802b2d0:	42a3      	cmp	r3, r4
 802b2d2:	d103      	bne.n	802b2dc <lv_table_event+0x170>
 802b2d4:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 802b2d6:	42bb      	cmp	r3, r7
 802b2d8:	f43f af51 	beq.w	802b17e <lv_table_event+0x12>
            table->col_act = col;
 802b2dc:	86b4      	strh	r4, [r6, #52]	; 0x34
            table->row_act = row;
 802b2de:	86f7      	strh	r7, [r6, #54]	; 0x36
            lv_obj_invalidate(obj);
 802b2e0:	4630      	mov	r0, r6
 802b2e2:	f7dc fe49 	bl	8007f78 <lv_obj_invalidate>
 802b2e6:	e74a      	b.n	802b17e <lv_table_event+0x12>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 802b2e8:	8b35      	ldrh	r5, [r6, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802b2ea:	2213      	movs	r2, #19
 802b2ec:	2100      	movs	r1, #0
 802b2ee:	4630      	mov	r0, r6
 802b2f0:	f7df fa7a 	bl	800a7e8 <lv_obj_get_style_prop>
 802b2f4:	1a2d      	subs	r5, r5, r0
 802b2f6:	1b2c      	subs	r4, r5, r4
 802b2f8:	b225      	sxth	r5, r4
 802b2fa:	e7af      	b.n	802b25c <lv_table_event+0xf0>
        *col = 0;
 802b2fc:	2400      	movs	r4, #0
 802b2fe:	e7c0      	b.n	802b282 <lv_table_event+0x116>
        lv_obj_invalidate(obj);
 802b300:	f7dc fe3a 	bl	8007f78 <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 802b304:	f7d9 f8a2 	bl	800444c <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 802b308:	f7d9 f944 	bl	8004594 <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 802b30c:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 802b30e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b312:	429a      	cmp	r2, r3
 802b314:	d003      	beq.n	802b31e <lv_table_event+0x1b2>
 802b316:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 802b318:	429a      	cmp	r2, r3
 802b31a:	d000      	beq.n	802b31e <lv_table_event+0x1b2>
 802b31c:	b168      	cbz	r0, 802b33a <lv_table_event+0x1ce>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802b31e:	f7d9 f895 	bl	800444c <lv_indev_get_act>
 802b322:	f7d9 f899 	bl	8004458 <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 802b326:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 802b32a:	2801      	cmp	r0, #1
 802b32c:	f47f af27 	bne.w	802b17e <lv_table_event+0x12>
            table->col_act = LV_TABLE_CELL_NONE;
 802b330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b334:	86b3      	strh	r3, [r6, #52]	; 0x34
            table->row_act = LV_TABLE_CELL_NONE;
 802b336:	86f3      	strh	r3, [r6, #54]	; 0x36
 802b338:	e721      	b.n	802b17e <lv_table_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802b33a:	2200      	movs	r2, #0
 802b33c:	211c      	movs	r1, #28
 802b33e:	4630      	mov	r0, r6
 802b340:	f7d8 fcde 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 802b344:	2801      	cmp	r0, #1
 802b346:	f47f af1a 	bne.w	802b17e <lv_table_event+0x12>
 802b34a:	e7e8      	b.n	802b31e <lv_table_event+0x1b2>
        lv_obj_invalidate(obj);
 802b34c:	f7dc fe14 	bl	8007f78 <lv_obj_invalidate>
 802b350:	e715      	b.n	802b17e <lv_table_event+0x12>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 802b352:	4620      	mov	r0, r4
 802b354:	f7d8 fcfe 	bl	8003d54 <lv_event_get_param>
        int32_t col = table->col_act;
 802b358:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
        int32_t row = table->row_act;
 802b35a:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 802b35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b360:	429a      	cmp	r2, r3
 802b362:	d017      	beq.n	802b394 <lv_table_event+0x228>
 802b364:	4299      	cmp	r1, r3
 802b366:	d015      	beq.n	802b394 <lv_table_event+0x228>
        if(col >= table->col_cnt) col = 0;
 802b368:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
 802b36a:	42ba      	cmp	r2, r7
 802b36c:	bf34      	ite	cc
 802b36e:	4614      	movcc	r4, r2
 802b370:	2400      	movcs	r4, #0
        if(row >= table->row_cnt) row = 0;
 802b372:	8cf5      	ldrh	r5, [r6, #38]	; 0x26
 802b374:	42a9      	cmp	r1, r5
 802b376:	bf34      	ite	cc
 802b378:	460b      	movcc	r3, r1
 802b37a:	2300      	movcs	r3, #0
        int32_t c = *((int32_t *)lv_event_get_param(e));
 802b37c:	6800      	ldr	r0, [r0, #0]
        if(c == LV_KEY_LEFT) col--;
 802b37e:	2814      	cmp	r0, #20
 802b380:	d012      	beq.n	802b3a8 <lv_table_event+0x23c>
        else if(c == LV_KEY_RIGHT) col++;
 802b382:	2813      	cmp	r0, #19
 802b384:	d019      	beq.n	802b3ba <lv_table_event+0x24e>
        else if(c == LV_KEY_UP) row--;
 802b386:	2811      	cmp	r0, #17
 802b388:	d03a      	beq.n	802b400 <lv_table_event+0x294>
        else if(c == LV_KEY_DOWN) row++;
 802b38a:	2812      	cmp	r0, #18
 802b38c:	f47f aef7 	bne.w	802b17e <lv_table_event+0x12>
 802b390:	3301      	adds	r3, #1
 802b392:	e013      	b.n	802b3bc <lv_table_event+0x250>
            table->col_act = 0;
 802b394:	2300      	movs	r3, #0
 802b396:	86b3      	strh	r3, [r6, #52]	; 0x34
            table->row_act = 0;
 802b398:	86f3      	strh	r3, [r6, #54]	; 0x36
            scroll_to_selected_cell(obj);
 802b39a:	4630      	mov	r0, r6
 802b39c:	f7ff fbed 	bl	802ab7a <scroll_to_selected_cell>
            lv_obj_invalidate(obj);
 802b3a0:	4630      	mov	r0, r6
 802b3a2:	f7dc fde9 	bl	8007f78 <lv_obj_invalidate>
            return;
 802b3a6:	e6ea      	b.n	802b17e <lv_table_event+0x12>
        if(c == LV_KEY_LEFT) col--;
 802b3a8:	3c01      	subs	r4, #1
        if(col >= table->col_cnt) {
 802b3aa:	42a7      	cmp	r7, r4
 802b3ac:	dd08      	ble.n	802b3c0 <lv_table_event+0x254>
        else if(col < 0) {
 802b3ae:	2c00      	cmp	r4, #0
 802b3b0:	da0d      	bge.n	802b3ce <lv_table_event+0x262>
            if(row != 0) {
 802b3b2:	b33b      	cbz	r3, 802b404 <lv_table_event+0x298>
                col = table->col_cnt - 1;
 802b3b4:	1e7c      	subs	r4, r7, #1
                row--;
 802b3b6:	3b01      	subs	r3, #1
 802b3b8:	e009      	b.n	802b3ce <lv_table_event+0x262>
        else if(c == LV_KEY_RIGHT) col++;
 802b3ba:	3401      	adds	r4, #1
        if(col >= table->col_cnt) {
 802b3bc:	42a7      	cmp	r7, r4
 802b3be:	dc06      	bgt.n	802b3ce <lv_table_event+0x262>
            if(row < table->row_cnt - 1) {
 802b3c0:	1e68      	subs	r0, r5, #1
 802b3c2:	4298      	cmp	r0, r3
                row++;
 802b3c4:	bfc6      	itte	gt
 802b3c6:	3301      	addgt	r3, #1
                col = 0;
 802b3c8:	2400      	movgt	r4, #0
                col = table->col_cnt - 1;
 802b3ca:	f107 34ff 	addle.w	r4, r7, #4294967295	; 0xffffffff
        if(row >= table->row_cnt) {
 802b3ce:	429d      	cmp	r5, r3
            row = table->row_cnt - 1;
 802b3d0:	bfd4      	ite	le
 802b3d2:	f105 33ff 	addle.w	r3, r5, #4294967295	; 0xffffffff
        else if(row < 0) {
 802b3d6:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 802b3da:	4294      	cmp	r4, r2
 802b3dc:	d102      	bne.n	802b3e4 <lv_table_event+0x278>
 802b3de:	428b      	cmp	r3, r1
 802b3e0:	f43f aecd 	beq.w	802b17e <lv_table_event+0x12>
            table->col_act = col;
 802b3e4:	86b4      	strh	r4, [r6, #52]	; 0x34
            table->row_act = row;
 802b3e6:	86f3      	strh	r3, [r6, #54]	; 0x36
            lv_obj_invalidate(obj);
 802b3e8:	4630      	mov	r0, r6
 802b3ea:	f7dc fdc5 	bl	8007f78 <lv_obj_invalidate>
            scroll_to_selected_cell(obj);
 802b3ee:	4630      	mov	r0, r6
 802b3f0:	f7ff fbc3 	bl	802ab7a <scroll_to_selected_cell>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802b3f4:	2200      	movs	r2, #0
 802b3f6:	211c      	movs	r1, #28
 802b3f8:	4630      	mov	r0, r6
 802b3fa:	f7d8 fc81 	bl	8003d00 <lv_event_send>
            if(res != LV_RES_OK) return;
 802b3fe:	e6be      	b.n	802b17e <lv_table_event+0x12>
        else if(c == LV_KEY_UP) row--;
 802b400:	3b01      	subs	r3, #1
 802b402:	e7db      	b.n	802b3bc <lv_table_event+0x250>
                col = 0;
 802b404:	461c      	mov	r4, r3
 802b406:	e7e2      	b.n	802b3ce <lv_table_event+0x262>
        *row = 0;
 802b408:	2700      	movs	r7, #0
 802b40a:	e760      	b.n	802b2ce <lv_table_event+0x162>
 802b40c:	080330ec 	.word	0x080330ec

0802b410 <lv_table_destructor>:
{
 802b410:	b570      	push	{r4, r5, r6, lr}
 802b412:	460d      	mov	r5, r1
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 802b414:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 802b416:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 802b418:	fb02 f303 	mul.w	r3, r2, r3
 802b41c:	2b00      	cmp	r3, #0
 802b41e:	dd15      	ble.n	802b44c <lv_table_destructor+0x3c>
 802b420:	2400      	movs	r4, #0
            table->cell_data[i] = NULL;
 802b422:	4626      	mov	r6, r4
 802b424:	e007      	b.n	802b436 <lv_table_destructor+0x26>
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 802b426:	3401      	adds	r4, #1
 802b428:	b2a4      	uxth	r4, r4
 802b42a:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 802b42c:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 802b42e:	fb02 f303 	mul.w	r3, r2, r3
 802b432:	429c      	cmp	r4, r3
 802b434:	da0a      	bge.n	802b44c <lv_table_destructor+0x3c>
        if(table->cell_data[i]) {
 802b436:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802b438:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802b43c:	2800      	cmp	r0, #0
 802b43e:	d0f2      	beq.n	802b426 <lv_table_destructor+0x16>
            lv_mem_free(table->cell_data[i]);
 802b440:	f7f6 fa30 	bl	80218a4 <lv_mem_free>
            table->cell_data[i] = NULL;
 802b444:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802b446:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 802b44a:	e7ec      	b.n	802b426 <lv_table_destructor+0x16>
    if(table->cell_data) lv_mem_free(table->cell_data);
 802b44c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 802b44e:	b108      	cbz	r0, 802b454 <lv_table_destructor+0x44>
 802b450:	f7f6 fa28 	bl	80218a4 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 802b454:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 802b456:	b108      	cbz	r0, 802b45c <lv_table_destructor+0x4c>
 802b458:	f7f6 fa24 	bl	80218a4 <lv_mem_free>
    if(table->col_w) lv_mem_free(table->col_w);
 802b45c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 802b45e:	b108      	cbz	r0, 802b464 <lv_table_destructor+0x54>
 802b460:	f7f6 fa20 	bl	80218a4 <lv_mem_free>
}
 802b464:	bd70      	pop	{r4, r5, r6, pc}

0802b466 <lv_table_constructor>:
{
 802b466:	b510      	push	{r4, lr}
 802b468:	460c      	mov	r4, r1
    table->col_cnt = 1;
 802b46a:	2301      	movs	r3, #1
 802b46c:	848b      	strh	r3, [r1, #36]	; 0x24
    table->row_cnt = 1;
 802b46e:	84cb      	strh	r3, [r1, #38]	; 0x26
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 802b470:	2002      	movs	r0, #2
 802b472:	f7f6 f9f9 	bl	8021868 <lv_mem_alloc>
 802b476:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 802b478:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 802b47a:	0040      	lsls	r0, r0, #1
 802b47c:	f7f6 f9f4 	bl	8021868 <lv_mem_alloc>
 802b480:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 802b482:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802b484:	2382      	movs	r3, #130	; 0x82
 802b486:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 802b488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802b48a:	8013      	strh	r3, [r2, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 802b48c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 802b48e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 802b490:	fb03 f101 	mul.w	r1, r3, r1
 802b494:	0089      	lsls	r1, r1, #2
 802b496:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802b498:	f7f6 fa20 	bl	80218dc <lv_mem_realloc>
 802b49c:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 802b49e:	2300      	movs	r3, #0
 802b4a0:	6003      	str	r3, [r0, #0]
}
 802b4a2:	bd10      	pop	{r4, pc}

0802b4a4 <pwd_char_hider_anim>:
 */
static void pwd_char_hider_anim(void * obj, int32_t x)
{
    LV_UNUSED(obj);
    LV_UNUSED(x);
}
 802b4a4:	4770      	bx	lr

0802b4a6 <cursor_blink_anim_cb>:
    if(show != ta->cursor.show) {
 802b4a6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802b4aa:	f003 0301 	and.w	r3, r3, #1
 802b4ae:	428b      	cmp	r3, r1
 802b4b0:	d026      	beq.n	802b500 <cursor_blink_anim_cb+0x5a>
{
 802b4b2:	b530      	push	{r4, r5, lr}
 802b4b4:	b083      	sub	sp, #12
        ta->cursor.show = show ? 1U : 0U;
 802b4b6:	3900      	subs	r1, #0
 802b4b8:	bf18      	it	ne
 802b4ba:	2101      	movne	r1, #1
 802b4bc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802b4c0:	f361 0300 	bfi	r3, r1, #0, #1
 802b4c4:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    dest->y1 = src->y1;
 802b4c8:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	; 0x4a
    dest->x2 = src->x2;
 802b4cc:	f9b0 504c 	ldrsh.w	r5, [r0, #76]	; 0x4c
    dest->y2 = src->y2;
 802b4d0:	f9b0 e04e 	ldrsh.w	lr, [r0, #78]	; 0x4e
        area_tmp.x1 += ta->label->coords.x1;
 802b4d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802b4d6:	8aa2      	ldrh	r2, [r4, #20]
 802b4d8:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 802b4dc:	4494      	add	ip, r2
 802b4de:	f8ad c000 	strh.w	ip, [sp]
        area_tmp.y1 += ta->label->coords.y1;
 802b4e2:	8ae3      	ldrh	r3, [r4, #22]
 802b4e4:	4419      	add	r1, r3
 802b4e6:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_tmp.x2 += ta->label->coords.x1;
 802b4ea:	442a      	add	r2, r5
 802b4ec:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y2 += ta->label->coords.y1;
 802b4f0:	4473      	add	r3, lr
 802b4f2:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 802b4f6:	4669      	mov	r1, sp
 802b4f8:	f7dc fd1a 	bl	8007f30 <lv_obj_invalidate_area>
}
 802b4fc:	b003      	add	sp, #12
 802b4fe:	bd30      	pop	{r4, r5, pc}
 802b500:	4770      	bx	lr
	...

0802b504 <start_cursor_blink>:

    return false; /*The character wasn't in the list*/
}

static void start_cursor_blink(lv_obj_t * obj)
{
 802b504:	b530      	push	{r4, r5, lr}
 802b506:	b093      	sub	sp, #76	; 0x4c
 802b508:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 802b50a:	2264      	movs	r2, #100	; 0x64
 802b50c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802b510:	f7df f96a 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 802b514:	b958      	cbnz	r0, 802b52e <start_cursor_blink+0x2a>
        lv_anim_del(obj, cursor_blink_anim_cb);
 802b516:	4912      	ldr	r1, [pc, #72]	; (802b560 <start_cursor_blink+0x5c>)
 802b518:	4620      	mov	r0, r4
 802b51a:	f7f5 f947 	bl	80207ac <lv_anim_del>
        ta->cursor.show = 1;
 802b51e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 802b522:	f043 0301 	orr.w	r3, r3, #1
 802b526:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 802b52a:	b013      	add	sp, #76	; 0x4c
 802b52c:	bd30      	pop	{r4, r5, pc}
 802b52e:	4605      	mov	r5, r0
        lv_anim_init(&a);
 802b530:	a801      	add	r0, sp, #4
 802b532:	f7f5 f921 	bl	8020778 <lv_anim_init>
    a->var = var;
 802b536:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 802b538:	4b09      	ldr	r3, [pc, #36]	; (802b560 <start_cursor_blink+0x5c>)
 802b53a:	9302      	str	r3, [sp, #8]
    a->time = duration;
 802b53c:	950c      	str	r5, [sp, #48]	; 0x30
    a->playback_time = time;
 802b53e:	950f      	str	r5, [sp, #60]	; 0x3c
    a->start_value = start;
 802b540:	2301      	movs	r3, #1
 802b542:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 802b544:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 802b546:	2300      	movs	r3, #0
 802b548:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 802b54a:	4b06      	ldr	r3, [pc, #24]	; (802b564 <start_cursor_blink+0x60>)
 802b54c:	9308      	str	r3, [sp, #32]
    a->repeat_cnt = cnt;
 802b54e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b552:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        lv_anim_start(&a);
 802b556:	a801      	add	r0, sp, #4
 802b558:	f7f5 f960 	bl	802081c <lv_anim_start>
}
 802b55c:	e7e5      	b.n	802b52a <start_cursor_blink+0x26>
 802b55e:	bf00      	nop
 802b560:	0802b4a7 	.word	0x0802b4a7
 802b564:	0802096d 	.word	0x0802096d

0802b568 <lv_textarea_destructor>:
{
 802b568:	b510      	push	{r4, lr}
 802b56a:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 802b56c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 802b56e:	b118      	cbz	r0, 802b578 <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 802b570:	f7f6 f998 	bl	80218a4 <lv_mem_free>
        ta->pwd_tmp = NULL;
 802b574:	2300      	movs	r3, #0
 802b576:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->pwd_bullet != NULL) {
 802b578:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802b57a:	b118      	cbz	r0, 802b584 <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->pwd_bullet);
 802b57c:	f7f6 f992 	bl	80218a4 <lv_mem_free>
        ta->pwd_bullet = NULL;
 802b580:	2300      	movs	r3, #0
 802b582:	6323      	str	r3, [r4, #48]	; 0x30
    if(ta->placeholder_txt != NULL) {
 802b584:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802b586:	b118      	cbz	r0, 802b590 <lv_textarea_destructor+0x28>
        lv_mem_free(ta->placeholder_txt);
 802b588:	f7f6 f98c 	bl	80218a4 <lv_mem_free>
        ta->placeholder_txt = NULL;
 802b58c:	2300      	movs	r3, #0
 802b58e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 802b590:	bd10      	pop	{r4, pc}
	...

0802b594 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 802b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b598:	b087      	sub	sp, #28
 802b59a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802b59c:	2257      	movs	r2, #87	; 0x57
 802b59e:	2100      	movs	r1, #0
 802b5a0:	f7df f922 	bl	800a7e8 <lv_obj_get_style_prop>
 802b5a4:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802b5a6:	2259      	movs	r2, #89	; 0x59
 802b5a8:	2100      	movs	r1, #0
 802b5aa:	4620      	mov	r0, r4
 802b5ac:	f7df f91c 	bl	800a7e8 <lv_obj_get_style_prop>
 802b5b0:	9000      	str	r0, [sp, #0]
    return ta->cursor.pos;
 802b5b2:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);

    uint32_t cur_pos = lv_textarea_get_cursor_pos(obj);
    const char * txt = lv_label_get_text(ta->label);
 802b5b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b5b8:	f7fc fcce 	bl	8027f58 <lv_label_get_text>
 802b5bc:	4605      	mov	r5, r0
 802b5be:	9001      	str	r0, [sp, #4]

    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 802b5c0:	4b71      	ldr	r3, [pc, #452]	; (802b788 <refr_cursor_area+0x1f4>)
 802b5c2:	681b      	ldr	r3, [r3, #0]
 802b5c4:	4649      	mov	r1, r9
 802b5c6:	4798      	blx	r3
 802b5c8:	4607      	mov	r7, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 802b5ca:	eb05 0b00 	add.w	fp, r5, r0
 802b5ce:	4b6f      	ldr	r3, [pc, #444]	; (802b78c <refr_cursor_area+0x1f8>)
 802b5d0:	681b      	ldr	r3, [r3, #0]
 802b5d2:	2100      	movs	r1, #0
 802b5d4:	4658      	mov	r0, fp
 802b5d6:	4798      	blx	r3
 802b5d8:	4605      	mov	r5, r0
 802b5da:	f9b8 a008 	ldrsh.w	sl, [r8, #8]
    }
}

static inline bool is_valid_but_non_printable_char(const uint32_t letter)
{
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 802b5de:	280d      	cmp	r0, #13
 802b5e0:	d808      	bhi.n	802b5f4 <refr_cursor_area+0x60>
 802b5e2:	f242 4301 	movw	r3, #9217	; 0x2401
 802b5e6:	40c3      	lsrs	r3, r0
        letter_space = ' ';
 802b5e8:	f013 0f01 	tst.w	r3, #1
 802b5ec:	bf0c      	ite	eq
 802b5ee:	4601      	moveq	r1, r0
 802b5f0:	2120      	movne	r1, #32
 802b5f2:	e000      	b.n	802b5f6 <refr_cursor_area+0x62>
    uint32_t letter_space = letter;
 802b5f4:	4601      	mov	r1, r0
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 802b5f6:	2200      	movs	r2, #0
 802b5f8:	4640      	mov	r0, r8
 802b5fa:	f7f4 fc8e 	bl	801ff1a <lv_font_get_glyph_width>
 802b5fe:	b206      	sxth	r6, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 802b600:	aa05      	add	r2, sp, #20
 802b602:	4649      	mov	r1, r9
 802b604:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b606:	f7fc fcaf 	bl	8027f68 <lv_label_get_letter_pos>
    lv_text_align_t align = lv_obj_calculate_style_text_align(ta->label, LV_PART_MAIN, lv_label_get_text(ta->label));
 802b60a:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 802b60e:	4648      	mov	r0, r9
 802b610:	f7fc fca2 	bl	8027f58 <lv_label_get_text>
 802b614:	4602      	mov	r2, r0
 802b616:	2100      	movs	r1, #0
 802b618:	4648      	mov	r0, r9
 802b61a:	f7df ff65 	bl	800b4e8 <lv_obj_calculate_style_text_align>
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 802b61e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802b620:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802b624:	f9b2 1014 	ldrsh.w	r1, [r2, #20]
 802b628:	440b      	add	r3, r1
 802b62a:	4433      	add	r3, r6
 802b62c:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 802b630:	4293      	cmp	r3, r2
 802b632:	dd2f      	ble.n	802b694 <refr_cursor_area+0x100>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 802b634:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 802b638:	f013 0f08 	tst.w	r3, #8
 802b63c:	d12a      	bne.n	802b694 <refr_cursor_area+0x100>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 802b63e:	2803      	cmp	r0, #3
 802b640:	d028      	beq.n	802b694 <refr_cursor_area+0x100>
        letter_pos.x = 0;
 802b642:	2300      	movs	r3, #0
 802b644:	f8ad 3014 	strh.w	r3, [sp, #20]
        letter_pos.y += letter_h + line_space;
 802b648:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802b64c:	9b00      	ldr	r3, [sp, #0]
 802b64e:	4403      	add	r3, r0
 802b650:	4618      	mov	r0, r3
 802b652:	4450      	add	r0, sl
 802b654:	f8ad 0016 	strh.w	r0, [sp, #22]
        if(letter != '\0') {
 802b658:	b1b5      	cbz	r5, 802b688 <refr_cursor_area+0xf4>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 802b65a:	4b4d      	ldr	r3, [pc, #308]	; (802b790 <refr_cursor_area+0x1fc>)
 802b65c:	681b      	ldr	r3, [r3, #0]
 802b65e:	4658      	mov	r0, fp
 802b660:	4798      	blx	r3
 802b662:	4407      	add	r7, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 802b664:	4b49      	ldr	r3, [pc, #292]	; (802b78c <refr_cursor_area+0x1f8>)
 802b666:	681b      	ldr	r3, [r3, #0]
 802b668:	2100      	movs	r1, #0
 802b66a:	9801      	ldr	r0, [sp, #4]
 802b66c:	4438      	add	r0, r7
 802b66e:	4798      	blx	r3
 802b670:	4601      	mov	r1, r0
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 802b672:	280d      	cmp	r0, #13
 802b674:	d809      	bhi.n	802b68a <refr_cursor_area+0xf6>
 802b676:	f242 4301 	movw	r3, #9217	; 0x2401
 802b67a:	40c3      	lsrs	r3, r0
            tmp = ' ';
 802b67c:	f013 0f01 	tst.w	r3, #1
 802b680:	bf0c      	ite	eq
 802b682:	4601      	moveq	r1, r0
 802b684:	2120      	movne	r1, #32
 802b686:	e000      	b.n	802b68a <refr_cursor_area+0xf6>
 802b688:	2120      	movs	r1, #32
        letter_w = lv_font_get_glyph_width(font, tmp, IGNORE_KERNING);
 802b68a:	2200      	movs	r2, #0
 802b68c:	4640      	mov	r0, r8
 802b68e:	f7f4 fc44 	bl	801ff1a <lv_font_get_glyph_width>
 802b692:	b206      	sxth	r6, r0
    ta->cursor.txt_byte_pos = byte_pos;
 802b694:	6527      	str	r7, [r4, #80]	; 0x50
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802b696:	2232      	movs	r2, #50	; 0x32
 802b698:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802b69c:	4620      	mov	r0, r4
 802b69e:	f7df f8a3 	bl	800a7e8 <lv_obj_get_style_prop>
 802b6a2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802b6a4:	2210      	movs	r2, #16
 802b6a6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802b6aa:	4620      	mov	r0, r4
 802b6ac:	f7df f89c 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 802b6b0:	fa1f f888 	uxth.w	r8, r8
 802b6b4:	eb08 0500 	add.w	r5, r8, r0
 802b6b8:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802b6ba:	2211      	movs	r2, #17
 802b6bc:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802b6c0:	4620      	mov	r0, r4
 802b6c2:	f7df f891 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR) + border_width;
 802b6c6:	eb08 0900 	add.w	r9, r8, r0
 802b6ca:	fa1f f989 	uxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802b6ce:	2212      	movs	r2, #18
 802b6d0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802b6d4:	4620      	mov	r0, r4
 802b6d6:	f7df f887 	bl	800a7e8 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b6da:	eb08 0700 	add.w	r7, r8, r0
 802b6de:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802b6e0:	2213      	movs	r2, #19
 802b6e2:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802b6e6:	4620      	mov	r0, r4
 802b6e8:	f7df f87e 	bl	800a7e8 <lv_obj_get_style_prop>
    cur_area.x1 = letter_pos.x - left;
 802b6ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802b6f0:	1bd7      	subs	r7, r2, r7
 802b6f2:	b2bf      	uxth	r7, r7
    cur_area.y1 = letter_pos.y - top;
 802b6f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802b6f8:	1b5d      	subs	r5, r3, r5
 802b6fa:	b2ad      	uxth	r5, r5
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR) + border_width;
 802b6fc:	4480      	add	r8, r0
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 802b6fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802b702:	4490      	add	r8, r2
 802b704:	4446      	add	r6, r8
 802b706:	b2b6      	uxth	r6, r6
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 802b708:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802b70c:	444b      	add	r3, r9
 802b70e:	449a      	add	sl, r3
 802b710:	fa1f fa8a 	uxth.w	sl, sl
    dest->y1 = src->y1;
 802b714:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 802b718:	f9b4 e04c 	ldrsh.w	lr, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 802b71c:	f9b4 c04e 	ldrsh.w	ip, [r4, #78]	; 0x4e
    area_tmp.x1 += ta->label->coords.x1;
 802b720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b722:	8a9a      	ldrh	r2, [r3, #20]
 802b724:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 802b728:	4410      	add	r0, r2
 802b72a:	f8ad 000c 	strh.w	r0, [sp, #12]
    area_tmp.y1 += ta->label->coords.y1;
 802b72e:	8adb      	ldrh	r3, [r3, #22]
 802b730:	4419      	add	r1, r3
 802b732:	f8ad 100e 	strh.w	r1, [sp, #14]
    area_tmp.x2 += ta->label->coords.x1;
 802b736:	4472      	add	r2, lr
 802b738:	f8ad 2010 	strh.w	r2, [sp, #16]
    area_tmp.y2 += ta->label->coords.y1;
 802b73c:	4463      	add	r3, ip
 802b73e:	f8ad 3012 	strh.w	r3, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 802b742:	a903      	add	r1, sp, #12
 802b744:	4620      	mov	r0, r4
 802b746:	f7dc fbf3 	bl	8007f30 <lv_obj_invalidate_area>
    dest->x1 = src->x1;
 802b74a:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
    dest->y1 = src->y1;
 802b74e:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 802b752:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 802b756:	f8a4 a04e 	strh.w	sl, [r4, #78]	; 0x4e
    area_tmp.x1 += ta->label->coords.x1;
 802b75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b75c:	f8b3 8014 	ldrh.w	r8, [r3, #20]
 802b760:	4447      	add	r7, r8
 802b762:	f8ad 700c 	strh.w	r7, [sp, #12]
    area_tmp.y1 += ta->label->coords.y1;
 802b766:	8adb      	ldrh	r3, [r3, #22]
 802b768:	441d      	add	r5, r3
 802b76a:	f8ad 500e 	strh.w	r5, [sp, #14]
    area_tmp.x2 += ta->label->coords.x1;
 802b76e:	4446      	add	r6, r8
 802b770:	f8ad 6010 	strh.w	r6, [sp, #16]
    area_tmp.y2 += ta->label->coords.y1;
 802b774:	449a      	add	sl, r3
 802b776:	f8ad a012 	strh.w	sl, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 802b77a:	a903      	add	r1, sp, #12
 802b77c:	4620      	mov	r0, r4
 802b77e:	f7dc fbd7 	bl	8007f30 <lv_obj_invalidate_area>
}
 802b782:	b007      	add	sp, #28
 802b784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b788:	20000754 	.word	0x20000754
 802b78c:	2000075c 	.word	0x2000075c
 802b790:	20000764 	.word	0x20000764

0802b794 <label_event_cb>:
{
 802b794:	b570      	push	{r4, r5, r6, lr}
 802b796:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 802b798:	f7d8 fad8 	bl	8003d4c <lv_event_get_code>
 802b79c:	4604      	mov	r4, r0
    lv_obj_t * label = lv_event_get_target(e);
 802b79e:	4628      	mov	r0, r5
 802b7a0:	f7d8 fad0 	bl	8003d44 <lv_event_get_target>
 802b7a4:	4606      	mov	r6, r0
    lv_obj_t * ta = lv_obj_get_parent(label);
 802b7a6:	f7df ff61 	bl	800b66c <lv_obj_get_parent>
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 802b7aa:	3c29      	subs	r4, #41	; 0x29
 802b7ac:	b2e4      	uxtb	r4, r4
 802b7ae:	2c01      	cmp	r4, #1
 802b7b0:	d900      	bls.n	802b7b4 <label_event_cb+0x20>
}
 802b7b2:	bd70      	pop	{r4, r5, r6, pc}
 802b7b4:	4605      	mov	r5, r0
        lv_label_set_text(label, NULL);
 802b7b6:	2100      	movs	r1, #0
 802b7b8:	4630      	mov	r0, r6
 802b7ba:	f7fd f893 	bl	80288e4 <lv_label_set_text>
        refr_cursor_area(ta);
 802b7be:	4628      	mov	r0, r5
 802b7c0:	f7ff fee8 	bl	802b594 <refr_cursor_area>
        start_cursor_blink(ta);
 802b7c4:	4628      	mov	r0, r5
 802b7c6:	f7ff fe9d 	bl	802b504 <start_cursor_blink>
}
 802b7ca:	e7f2      	b.n	802b7b2 <label_event_cb+0x1e>

0802b7cc <lv_textarea_set_cursor_pos>:
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 802b7cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 802b7ce:	428b      	cmp	r3, r1
 802b7d0:	d07b      	beq.n	802b8ca <lv_textarea_set_cursor_pos+0xfe>
{
 802b7d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b7d4:	b083      	sub	sp, #12
 802b7d6:	4604      	mov	r4, r0
 802b7d8:	460d      	mov	r5, r1
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 802b7da:	4b3c      	ldr	r3, [pc, #240]	; (802b8cc <lv_textarea_set_cursor_pos+0x100>)
 802b7dc:	681e      	ldr	r6, [r3, #0]
 802b7de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802b7e0:	f7fc fbba 	bl	8027f58 <lv_label_get_text>
 802b7e4:	47b0      	blx	r6
    if(pos < 0) pos = len + pos;
 802b7e6:	2d00      	cmp	r5, #0
 802b7e8:	bfb8      	it	lt
 802b7ea:	182d      	addlt	r5, r5, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 802b7ec:	4606      	mov	r6, r0
 802b7ee:	42a8      	cmp	r0, r5
 802b7f0:	db04      	blt.n	802b7fc <lv_textarea_set_cursor_pos+0x30>
 802b7f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802b7f6:	429d      	cmp	r5, r3
 802b7f8:	bf18      	it	ne
 802b7fa:	462e      	movne	r6, r5
    ta->cursor.pos = pos;
 802b7fc:	6466      	str	r6, [r4, #68]	; 0x44
    lv_obj_update_layout(obj);
 802b7fe:	4620      	mov	r0, r4
 802b800:	f7dd fa6e 	bl	8008ce0 <lv_obj_update_layout>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802b804:	2257      	movs	r2, #87	; 0x57
 802b806:	2100      	movs	r1, #0
 802b808:	4620      	mov	r0, r4
 802b80a:	f7de ffed 	bl	800a7e8 <lv_obj_get_style_prop>
 802b80e:	4605      	mov	r5, r0
    lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 802b810:	aa01      	add	r2, sp, #4
 802b812:	4631      	mov	r1, r6
 802b814:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b816:	f7fc fba7 	bl	8027f68 <lv_label_get_letter_pos>
 802b81a:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
    if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 802b81e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 802b822:	4620      	mov	r0, r4
 802b824:	f7dd fd52 	bl	80092cc <lv_obj_get_scroll_top>
 802b828:	4285      	cmp	r5, r0
 802b82a:	db2c      	blt.n	802b886 <lv_textarea_set_cursor_pos+0xba>
    lv_coord_t h = lv_obj_get_content_height(obj);
 802b82c:	4620      	mov	r0, r4
 802b82e:	f7dc f985 	bl	8007b3c <lv_obj_get_content_height>
 802b832:	4607      	mov	r7, r0
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 802b834:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 802b838:	4435      	add	r5, r6
 802b83a:	4620      	mov	r0, r4
 802b83c:	f7dd fd46 	bl	80092cc <lv_obj_get_scroll_top>
 802b840:	1a2d      	subs	r5, r5, r0
 802b842:	42bd      	cmp	r5, r7
 802b844:	dc26      	bgt.n	802b894 <lv_textarea_set_cursor_pos+0xc8>
    if(cur_pos.x < lv_obj_get_scroll_left(obj)) {
 802b846:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 802b84a:	4620      	mov	r0, r4
 802b84c:	f7dd fdb0 	bl	80093b0 <lv_obj_get_scroll_left>
 802b850:	4285      	cmp	r5, r0
 802b852:	db29      	blt.n	802b8a8 <lv_textarea_set_cursor_pos+0xdc>
    lv_coord_t w = lv_obj_get_content_width(obj);
 802b854:	4620      	mov	r0, r4
 802b856:	f7dc f954 	bl	8007b02 <lv_obj_get_content_width>
 802b85a:	4607      	mov	r7, r0
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 802b85c:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 802b860:	4435      	add	r5, r6
 802b862:	4620      	mov	r0, r4
 802b864:	f7dd fda4 	bl	80093b0 <lv_obj_get_scroll_left>
 802b868:	1a2d      	subs	r5, r5, r0
 802b86a:	42bd      	cmp	r5, r7
 802b86c:	dc23      	bgt.n	802b8b6 <lv_textarea_set_cursor_pos+0xea>
    ta->cursor.valid_x = cur_pos.x;
 802b86e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 802b872:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    start_cursor_blink(obj);
 802b876:	4620      	mov	r0, r4
 802b878:	f7ff fe44 	bl	802b504 <start_cursor_blink>
    refr_cursor_area(obj);
 802b87c:	4620      	mov	r0, r4
 802b87e:	f7ff fe89 	bl	802b594 <refr_cursor_area>
}
 802b882:	b003      	add	sp, #12
 802b884:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 802b886:	2201      	movs	r2, #1
 802b888:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 802b88c:	4620      	mov	r0, r4
 802b88e:	f7dd ffff 	bl	8009890 <lv_obj_scroll_to_y>
 802b892:	e7cb      	b.n	802b82c <lv_textarea_set_cursor_pos+0x60>
        lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 802b894:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 802b898:	4431      	add	r1, r6
 802b89a:	1bc9      	subs	r1, r1, r7
 802b89c:	2201      	movs	r2, #1
 802b89e:	b209      	sxth	r1, r1
 802b8a0:	4620      	mov	r0, r4
 802b8a2:	f7dd fff5 	bl	8009890 <lv_obj_scroll_to_y>
 802b8a6:	e7ce      	b.n	802b846 <lv_textarea_set_cursor_pos+0x7a>
        lv_obj_scroll_to_x(obj, cur_pos.x, LV_ANIM_ON);
 802b8a8:	2201      	movs	r2, #1
 802b8aa:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 802b8ae:	4620      	mov	r0, r4
 802b8b0:	f7dd ffda 	bl	8009868 <lv_obj_scroll_to_x>
 802b8b4:	e7ce      	b.n	802b854 <lv_textarea_set_cursor_pos+0x88>
        lv_obj_scroll_to_x(obj, cur_pos.x - w + font_h, LV_ANIM_ON);
 802b8b6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802b8ba:	440e      	add	r6, r1
 802b8bc:	1bf1      	subs	r1, r6, r7
 802b8be:	2201      	movs	r2, #1
 802b8c0:	b209      	sxth	r1, r1
 802b8c2:	4620      	mov	r0, r4
 802b8c4:	f7dd ffd0 	bl	8009868 <lv_obj_scroll_to_x>
 802b8c8:	e7d1      	b.n	802b86e <lv_textarea_set_cursor_pos+0xa2>
 802b8ca:	4770      	bx	lr
 802b8cc:	20000768 	.word	0x20000768

0802b8d0 <lv_textarea_constructor>:
{
 802b8d0:	b538      	push	{r3, r4, r5, lr}
 802b8d2:	460c      	mov	r4, r1
    ta->pwd_mode          = 0;
 802b8d4:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    ta->pwd_tmp           = NULL;
 802b8d8:	2500      	movs	r5, #0
 802b8da:	62cd      	str	r5, [r1, #44]	; 0x2c
    ta->pwd_bullet        = NULL;
 802b8dc:	630d      	str	r5, [r1, #48]	; 0x30
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 802b8de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 802b8e2:	878a      	strh	r2, [r1, #60]	; 0x3c
    ta->accepted_chars    = NULL;
 802b8e4:	634d      	str	r5, [r1, #52]	; 0x34
    ta->max_length        = 0;
 802b8e6:	638d      	str	r5, [r1, #56]	; 0x38
    ta->cursor.show      = 1;
 802b8e8:	f891 2054 	ldrb.w	r2, [r1, #84]	; 0x54
    ta->cursor.pos        = 1;
 802b8ec:	2101      	movs	r1, #1
 802b8ee:	6461      	str	r1, [r4, #68]	; 0x44
    ta->cursor.click_pos  = 1;
 802b8f0:	f042 0203 	orr.w	r2, r2, #3
 802b8f4:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    ta->cursor.valid_x    = 0;
 802b8f8:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    ta->text_sel_en = 0;
 802b8fc:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 802b900:	f365 0341 	bfi	r3, r5, #1, #1
 802b904:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    ta->label       = NULL;
 802b908:	6265      	str	r5, [r4, #36]	; 0x24
    ta->placeholder_txt = NULL;
 802b90a:	62a5      	str	r5, [r4, #40]	; 0x28
    ta->label = lv_label_create(obj);
 802b90c:	4620      	mov	r0, r4
 802b90e:	f7fc fb0d 	bl	8027f2c <lv_label_create>
 802b912:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 802b914:	f242 0164 	movw	r1, #8292	; 0x2064
 802b918:	f7db ffe8 	bl	80078ec <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 802b91c:	490b      	ldr	r1, [pc, #44]	; (802b94c <lv_textarea_constructor+0x7c>)
 802b91e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b920:	f7fc ffe0 	bl	80288e4 <lv_label_set_text>
    lv_obj_add_event_cb(ta->label, label_event_cb, LV_EVENT_ALL, NULL);
 802b924:	462b      	mov	r3, r5
 802b926:	462a      	mov	r2, r5
 802b928:	4909      	ldr	r1, [pc, #36]	; (802b950 <lv_textarea_constructor+0x80>)
 802b92a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b92c:	f7d8 fa2a 	bl	8003d84 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 802b930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802b934:	4620      	mov	r0, r4
 802b936:	f7da ffbb 	bl	80068b0 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 802b93a:	4629      	mov	r1, r5
 802b93c:	4620      	mov	r0, r4
 802b93e:	f7ff ff45 	bl	802b7cc <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 802b942:	4620      	mov	r0, r4
 802b944:	f7ff fdde 	bl	802b504 <start_cursor_blink>
}
 802b948:	bd38      	pop	{r3, r4, r5, pc}
 802b94a:	bf00      	nop
 802b94c:	0802ceb8 	.word	0x0802ceb8
 802b950:	0802b795 	.word	0x0802b795

0802b954 <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1U : 0U;
 802b954:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802b958:	f361 0341 	bfi	r3, r1, #1, #1
 802b95c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
 802b960:	4770      	bx	lr

0802b962 <lv_textarea_set_one_line>:
    if(ta->one_line == en) return;
 802b962:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802b966:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802b96a:	428b      	cmp	r3, r1
 802b96c:	d02f      	beq.n	802b9ce <lv_textarea_set_one_line+0x6c>
{
 802b96e:	b510      	push	{r4, lr}
 802b970:	4604      	mov	r4, r0
    ta->one_line = en ? 1U : 0U;
 802b972:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802b976:	f361 03c3 	bfi	r3, r1, #3, #1
 802b97a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 802b97e:	b979      	cbnz	r1, 802b9a0 <lv_textarea_set_one_line+0x3e>
    lv_obj_set_width(ta->label, width);
 802b980:	f242 0164 	movw	r1, #8292	; 0x2064
 802b984:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802b986:	f7db ffb1 	bl	80078ec <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 802b98a:	2200      	movs	r2, #0
 802b98c:	4611      	mov	r1, r2
 802b98e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b990:	f7df fdc2 	bl	800b518 <lv_obj_set_style_min_width>
        lv_obj_remove_local_style_prop(obj, LV_STYLE_HEIGHT, LV_PART_MAIN);
 802b994:	2200      	movs	r2, #0
 802b996:	2104      	movs	r1, #4
 802b998:	4620      	mov	r0, r4
 802b99a:	f7df fb61 	bl	800b060 <lv_obj_remove_local_style_prop>
 802b99e:	e00f      	b.n	802b9c0 <lv_textarea_set_one_line+0x5e>
    lv_obj_set_width(ta->label, width);
 802b9a0:	f242 71d1 	movw	r1, #10193	; 0x27d1
 802b9a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802b9a6:	f7db ffa1 	bl	80078ec <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 802b9aa:	2200      	movs	r2, #0
 802b9ac:	f242 0164 	movw	r1, #8292	; 0x2064
 802b9b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802b9b2:	f7df fdb1 	bl	800b518 <lv_obj_set_style_min_width>
        lv_obj_set_height(obj, LV_SIZE_CONTENT);
 802b9b6:	f242 71d1 	movw	r1, #10193	; 0x27d1
 802b9ba:	4620      	mov	r0, r4
 802b9bc:	f7db ffad 	bl	800791a <lv_obj_set_height>
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 802b9c0:	2300      	movs	r3, #0
 802b9c2:	461a      	mov	r2, r3
 802b9c4:	4619      	mov	r1, r3
 802b9c6:	4620      	mov	r0, r4
 802b9c8:	f7dd ff76 	bl	80098b8 <lv_obj_scroll_to>
}
 802b9cc:	bd10      	pop	{r4, pc}
 802b9ce:	4770      	bx	lr

0802b9d0 <lv_textarea_get_text>:
{
 802b9d0:	b508      	push	{r3, lr}
    if(ta->pwd_mode == 0) {
 802b9d2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802b9d6:	f013 0f04 	tst.w	r3, #4
 802b9da:	d001      	beq.n	802b9e0 <lv_textarea_get_text+0x10>
        txt = ta->pwd_tmp;
 802b9dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 802b9de:	bd08      	pop	{r3, pc}
        txt = lv_label_get_text(ta->label);
 802b9e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802b9e2:	f7fc fab9 	bl	8027f58 <lv_label_get_text>
 802b9e6:	e7fa      	b.n	802b9de <lv_textarea_get_text+0xe>

0802b9e8 <lv_textarea_get_cursor_pos>:
}
 802b9e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802b9ea:	4770      	bx	lr

0802b9ec <lv_textarea_get_password_bullet>:
{
 802b9ec:	4603      	mov	r3, r0
    if(ta->pwd_bullet) return ta->pwd_bullet;
 802b9ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802b9f0:	b100      	cbz	r0, 802b9f4 <lv_textarea_get_password_bullet+0x8>
}
 802b9f2:	4770      	bx	lr
{
 802b9f4:	b500      	push	{lr}
 802b9f6:	b085      	sub	sp, #20
 802b9f8:	2257      	movs	r2, #87	; 0x57
 802b9fa:	2100      	movs	r1, #0
 802b9fc:	4618      	mov	r0, r3
 802b9fe:	f7de fef3 	bl	800a7e8 <lv_obj_get_style_prop>
    if(lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0))
 802ba02:	2300      	movs	r3, #0
 802ba04:	f242 0222 	movw	r2, #8226	; 0x2022
 802ba08:	4669      	mov	r1, sp
 802ba0a:	f7f4 fa31 	bl	801fe70 <lv_font_get_glyph_dsc>
 802ba0e:	4601      	mov	r1, r0
        return LV_SYMBOL_BULLET;
 802ba10:	4b03      	ldr	r3, [pc, #12]	; (802ba20 <lv_textarea_get_password_bullet+0x34>)
 802ba12:	4804      	ldr	r0, [pc, #16]	; (802ba24 <lv_textarea_get_password_bullet+0x38>)
 802ba14:	2900      	cmp	r1, #0
 802ba16:	bf08      	it	eq
 802ba18:	4618      	moveq	r0, r3
}
 802ba1a:	b005      	add	sp, #20
 802ba1c:	f85d fb04 	ldr.w	pc, [sp], #4
 802ba20:	0802d1b0 	.word	0x0802d1b0
 802ba24:	08033108 	.word	0x08033108

0802ba28 <pwd_char_hider>:
{
 802ba28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ta->pwd_mode == 0) {
 802ba2c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802ba30:	f013 0f04 	tst.w	r3, #4
 802ba34:	d101      	bne.n	802ba3a <pwd_char_hider+0x12>
}
 802ba36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ba3a:	4606      	mov	r6, r0
    char * txt = lv_label_get_text(ta->label);
 802ba3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802ba3e:	f7fc fa8b 	bl	8027f58 <lv_label_get_text>
    uint32_t enc_len = _lv_txt_get_encoded_length(txt);
 802ba42:	4b16      	ldr	r3, [pc, #88]	; (802ba9c <pwd_char_hider+0x74>)
 802ba44:	681b      	ldr	r3, [r3, #0]
 802ba46:	4798      	blx	r3
    if(enc_len == 0) return;
 802ba48:	4680      	mov	r8, r0
 802ba4a:	2800      	cmp	r0, #0
 802ba4c:	d0f3      	beq.n	802ba36 <pwd_char_hider+0xe>
    const char * bullet = lv_textarea_get_password_bullet(obj);
 802ba4e:	4630      	mov	r0, r6
 802ba50:	f7ff ffcc 	bl	802b9ec <lv_textarea_get_password_bullet>
 802ba54:	4681      	mov	r9, r0
    const size_t bullet_len = strlen(bullet);
 802ba56:	f7d4 fbef 	bl	8000238 <strlen>
 802ba5a:	4607      	mov	r7, r0
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 802ba5c:	fb00 fb08 	mul.w	fp, r0, r8
 802ba60:	f10b 0001 	add.w	r0, fp, #1
 802ba64:	f7f5 ff52 	bl	802190c <lv_mem_buf_get>
 802ba68:	4682      	mov	sl, r0
    for(i = 0; i < enc_len; i++) {
 802ba6a:	4605      	mov	r5, r0
 802ba6c:	2400      	movs	r4, #0
        lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 802ba6e:	463a      	mov	r2, r7
 802ba70:	4649      	mov	r1, r9
 802ba72:	4628      	mov	r0, r5
 802ba74:	f7f5 ffe2 	bl	8021a3c <lv_memcpy>
    for(i = 0; i < enc_len; i++) {
 802ba78:	3401      	adds	r4, #1
 802ba7a:	443d      	add	r5, r7
 802ba7c:	45a0      	cmp	r8, r4
 802ba7e:	d1f6      	bne.n	802ba6e <pwd_char_hider+0x46>
    txt_tmp[i * bullet_len] = '\0';
 802ba80:	2300      	movs	r3, #0
 802ba82:	f80a 300b 	strb.w	r3, [sl, fp]
    lv_label_set_text(ta->label, txt_tmp);
 802ba86:	4651      	mov	r1, sl
 802ba88:	6a70      	ldr	r0, [r6, #36]	; 0x24
 802ba8a:	f7fc ff2b 	bl	80288e4 <lv_label_set_text>
    lv_mem_buf_release(txt_tmp);
 802ba8e:	4650      	mov	r0, sl
 802ba90:	f7f5 ff9e 	bl	80219d0 <lv_mem_buf_release>
    refr_cursor_area(obj);
 802ba94:	4630      	mov	r0, r6
 802ba96:	f7ff fd7d 	bl	802b594 <refr_cursor_area>
 802ba9a:	e7cc      	b.n	802ba36 <pwd_char_hider+0xe>
 802ba9c:	20000768 	.word	0x20000768

0802baa0 <auto_hide_characters>:
{
 802baa0:	b510      	push	{r4, lr}
 802baa2:	b092      	sub	sp, #72	; 0x48
 802baa4:	4604      	mov	r4, r0
    if(ta->pwd_show_time == 0) {
 802baa6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 802baa8:	b91b      	cbnz	r3, 802bab2 <auto_hide_characters+0x12>
        pwd_char_hider(obj);
 802baaa:	f7ff ffbd 	bl	802ba28 <pwd_char_hider>
}
 802baae:	b012      	add	sp, #72	; 0x48
 802bab0:	bd10      	pop	{r4, pc}
        lv_anim_init(&a);
 802bab2:	a801      	add	r0, sp, #4
 802bab4:	f7f4 fe60 	bl	8020778 <lv_anim_init>
    a->var = var;
 802bab8:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 802baba:	4b08      	ldr	r3, [pc, #32]	; (802badc <auto_hide_characters+0x3c>)
 802babc:	9302      	str	r3, [sp, #8]
    a->time = duration;
 802babe:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 802bac0:	930c      	str	r3, [sp, #48]	; 0x30
    a->start_value = start;
 802bac2:	2300      	movs	r3, #0
 802bac4:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 802bac6:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 802bac8:	2301      	movs	r3, #1
 802baca:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 802bacc:	4b04      	ldr	r3, [pc, #16]	; (802bae0 <auto_hide_characters+0x40>)
 802bace:	9308      	str	r3, [sp, #32]
    a->ready_cb = ready_cb;
 802bad0:	4b04      	ldr	r3, [pc, #16]	; (802bae4 <auto_hide_characters+0x44>)
 802bad2:	9304      	str	r3, [sp, #16]
        lv_anim_start(&a);
 802bad4:	a801      	add	r0, sp, #4
 802bad6:	f7f4 fea1 	bl	802081c <lv_anim_start>
}
 802bada:	e7e8      	b.n	802baae <auto_hide_characters+0xe>
 802badc:	0802b4a5 	.word	0x0802b4a5
 802bae0:	0802096d 	.word	0x0802096d
 802bae4:	0802bae9 	.word	0x0802bae9

0802bae8 <pwd_char_hider_anim_ready>:
{
 802bae8:	b508      	push	{r3, lr}
    pwd_char_hider(obj);
 802baea:	6800      	ldr	r0, [r0, #0]
 802baec:	f7ff ff9c 	bl	802ba28 <pwd_char_hider>
}
 802baf0:	bd08      	pop	{r3, pc}

0802baf2 <lv_textarea_get_one_line>:
    return ta->one_line == 1U;
 802baf2:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
}
 802baf6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 802bafa:	4770      	bx	lr

0802bafc <lv_textarea_clear_selection>:
{
 802bafc:	b510      	push	{r4, lr}
 802bafe:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 802bb00:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802bb02:	f7fd fa94 	bl	802902e <lv_label_get_text_selection_start>
 802bb06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802bb0a:	4298      	cmp	r0, r3
 802bb0c:	d00a      	beq.n	802bb24 <lv_textarea_clear_selection+0x28>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 802bb0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802bb12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bb14:	f7fc fa16 	bl	8027f44 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 802bb18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802bb1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bb1e:	f7fc fa16 	bl	8027f4e <lv_label_set_text_sel_end>
}
 802bb22:	bd10      	pop	{r4, pc}
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 802bb24:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bb26:	f7fd fa84 	bl	8029032 <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 802bb2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802bb2e:	4298      	cmp	r0, r3
 802bb30:	d1ed      	bne.n	802bb0e <lv_textarea_clear_selection+0x12>
 802bb32:	e7f6      	b.n	802bb22 <lv_textarea_clear_selection+0x26>

0802bb34 <lv_textarea_add_text>:
    LV_ASSERT_NULL(txt);
 802bb34:	b301      	cbz	r1, 802bb78 <lv_textarea_add_text+0x44>
{
 802bb36:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bb38:	b083      	sub	sp, #12
 802bb3a:	4605      	mov	r5, r0
 802bb3c:	460c      	mov	r4, r1
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802bb3e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802bb42:	f013 0f04 	tst.w	r3, #4
 802bb46:	d118      	bne.n	802bb7a <lv_textarea_add_text+0x46>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802bb48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802bb4a:	b1cb      	cbz	r3, 802bb80 <lv_textarea_add_text+0x4c>
        uint32_t i = 0;
 802bb4c:	2300      	movs	r3, #0
 802bb4e:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 802bb50:	7823      	ldrb	r3, [r4, #0]
 802bb52:	b17b      	cbz	r3, 802bb74 <lv_textarea_add_text+0x40>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802bb54:	4f2e      	ldr	r7, [pc, #184]	; (802bc10 <lv_textarea_add_text+0xdc>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802bb56:	4e2f      	ldr	r6, [pc, #188]	; (802bc14 <lv_textarea_add_text+0xe0>)
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802bb58:	683b      	ldr	r3, [r7, #0]
 802bb5a:	a901      	add	r1, sp, #4
 802bb5c:	4620      	mov	r0, r4
 802bb5e:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802bb60:	6833      	ldr	r3, [r6, #0]
 802bb62:	4798      	blx	r3
 802bb64:	4601      	mov	r1, r0
 802bb66:	4628      	mov	r0, r5
 802bb68:	f000 f878 	bl	802bc5c <lv_textarea_add_char>
        while(txt[i] != '\0') {
 802bb6c:	9b01      	ldr	r3, [sp, #4]
 802bb6e:	5ce3      	ldrb	r3, [r4, r3]
 802bb70:	2b00      	cmp	r3, #0
 802bb72:	d1f1      	bne.n	802bb58 <lv_textarea_add_text+0x24>
}
 802bb74:	b003      	add	sp, #12
 802bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(txt);
 802bb78:	e7fe      	b.n	802bb78 <lv_textarea_add_text+0x44>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802bb7a:	f7ff ff55 	bl	802ba28 <pwd_char_hider>
 802bb7e:	e7e3      	b.n	802bb48 <lv_textarea_add_text+0x14>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802bb80:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802bb82:	2b00      	cmp	r3, #0
 802bb84:	d1e2      	bne.n	802bb4c <lv_textarea_add_text+0x18>
    lv_res_t res = insert_handler(obj, txt);
 802bb86:	4621      	mov	r1, r4
 802bb88:	4628      	mov	r0, r5
 802bb8a:	f000 f847 	bl	802bc1c <insert_handler>
    if(res != LV_RES_OK) return;
 802bb8e:	2801      	cmp	r0, #1
 802bb90:	d1f0      	bne.n	802bb74 <lv_textarea_add_text+0x40>
    if(ta->placeholder_txt) {
 802bb92:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802bb94:	b123      	cbz	r3, 802bba0 <lv_textarea_add_text+0x6c>
        const char * txt_act = lv_label_get_text(ta->label);
 802bb96:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802bb98:	f7fc f9de 	bl	8027f58 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802bb9c:	7803      	ldrb	r3, [r0, #0]
 802bb9e:	b1db      	cbz	r3, 802bbd8 <lv_textarea_add_text+0xa4>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 802bba0:	4622      	mov	r2, r4
 802bba2:	6c69      	ldr	r1, [r5, #68]	; 0x44
 802bba4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802bba6:	f7fd fa47 	bl	8029038 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 802bbaa:	4628      	mov	r0, r5
 802bbac:	f7ff ffa6 	bl	802bafc <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 802bbb0:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 802bbb4:	f013 0f04 	tst.w	r3, #4
 802bbb8:	d112      	bne.n	802bbe0 <lv_textarea_add_text+0xac>
    return ta->cursor.pos;
 802bbba:	6c6e      	ldr	r6, [r5, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 802bbbc:	4b16      	ldr	r3, [pc, #88]	; (802bc18 <lv_textarea_add_text+0xe4>)
 802bbbe:	681b      	ldr	r3, [r3, #0]
 802bbc0:	4620      	mov	r0, r4
 802bbc2:	4798      	blx	r3
 802bbc4:	1981      	adds	r1, r0, r6
 802bbc6:	4628      	mov	r0, r5
 802bbc8:	f7ff fe00 	bl	802b7cc <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802bbcc:	2200      	movs	r2, #0
 802bbce:	211c      	movs	r1, #28
 802bbd0:	4628      	mov	r0, r5
 802bbd2:	f7d8 f895 	bl	8003d00 <lv_event_send>
 802bbd6:	e7cd      	b.n	802bb74 <lv_textarea_add_text+0x40>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802bbd8:	4628      	mov	r0, r5
 802bbda:	f7dc f9cd 	bl	8007f78 <lv_obj_invalidate>
 802bbde:	e7df      	b.n	802bba0 <lv_textarea_add_text+0x6c>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(txt) + 1;
 802bbe0:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 802bbe2:	4638      	mov	r0, r7
 802bbe4:	f7d4 fb28 	bl	8000238 <strlen>
 802bbe8:	4606      	mov	r6, r0
 802bbea:	4620      	mov	r0, r4
 802bbec:	f7d4 fb24 	bl	8000238 <strlen>
 802bbf0:	1831      	adds	r1, r6, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 802bbf2:	3101      	adds	r1, #1
 802bbf4:	4638      	mov	r0, r7
 802bbf6:	f7f5 fe71 	bl	80218dc <lv_mem_realloc>
 802bbfa:	62e8      	str	r0, [r5, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bbfc:	b138      	cbz	r0, 802bc0e <lv_textarea_add_text+0xda>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 802bbfe:	4622      	mov	r2, r4
 802bc00:	6c69      	ldr	r1, [r5, #68]	; 0x44
 802bc02:	f7f8 f885 	bl	8023d10 <_lv_txt_ins>
        auto_hide_characters(obj);
 802bc06:	4628      	mov	r0, r5
 802bc08:	f7ff ff4a 	bl	802baa0 <auto_hide_characters>
 802bc0c:	e7d5      	b.n	802bbba <lv_textarea_add_text+0x86>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bc0e:	e7fe      	b.n	802bc0e <lv_textarea_add_text+0xda>
 802bc10:	2000075c 	.word	0x2000075c
 802bc14:	2000076c 	.word	0x2000076c
 802bc18:	20000768 	.word	0x20000768

0802bc1c <insert_handler>:
{
 802bc1c:	b570      	push	{r4, r5, r6, lr}
 802bc1e:	4606      	mov	r6, r0
 802bc20:	460c      	mov	r4, r1
    ta_insert_replace = NULL;
 802bc22:	4d0d      	ldr	r5, [pc, #52]	; (802bc58 <insert_handler+0x3c>)
 802bc24:	2300      	movs	r3, #0
 802bc26:	602b      	str	r3, [r5, #0]
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 802bc28:	460a      	mov	r2, r1
 802bc2a:	211d      	movs	r1, #29
 802bc2c:	f7d8 f868 	bl	8003d00 <lv_event_send>
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 802bc30:	682d      	ldr	r5, [r5, #0]
 802bc32:	b175      	cbz	r5, 802bc52 <insert_handler+0x36>
 802bc34:	7828      	ldrb	r0, [r5, #0]
 802bc36:	b128      	cbz	r0, 802bc44 <insert_handler+0x28>
        if(strcmp(ta_insert_replace, txt)) {
 802bc38:	4621      	mov	r1, r4
 802bc3a:	4628      	mov	r0, r5
 802bc3c:	f7d4 faf2 	bl	8000224 <strcmp>
 802bc40:	b908      	cbnz	r0, 802bc46 <insert_handler+0x2a>
    return LV_RES_OK;
 802bc42:	2001      	movs	r0, #1
}
 802bc44:	bd70      	pop	{r4, r5, r6, pc}
            lv_textarea_add_text(obj, ta_insert_replace);
 802bc46:	4629      	mov	r1, r5
 802bc48:	4630      	mov	r0, r6
 802bc4a:	f7ff ff73 	bl	802bb34 <lv_textarea_add_text>
            return LV_RES_INV;
 802bc4e:	2000      	movs	r0, #0
 802bc50:	e7f8      	b.n	802bc44 <insert_handler+0x28>
    return LV_RES_OK;
 802bc52:	2001      	movs	r0, #1
 802bc54:	e7f6      	b.n	802bc44 <insert_handler+0x28>
 802bc56:	bf00      	nop
 802bc58:	2000c19c 	.word	0x2000c19c

0802bc5c <lv_textarea_add_char>:
{
 802bc5c:	b570      	push	{r4, r5, r6, lr}
 802bc5e:	b086      	sub	sp, #24
 802bc60:	4604      	mov	r4, r0
 802bc62:	9101      	str	r1, [sp, #4]
    if(ta->one_line && (c == '\n' || c == '\r')) {
 802bc64:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802bc68:	f013 0f08 	tst.w	r3, #8
 802bc6c:	d003      	beq.n	802bc76 <lv_textarea_add_char+0x1a>
 802bc6e:	290a      	cmp	r1, #10
 802bc70:	d05f      	beq.n	802bd32 <lv_textarea_add_char+0xd6>
 802bc72:	290d      	cmp	r1, #13
 802bc74:	d05d      	beq.n	802bd32 <lv_textarea_add_char+0xd6>
    u32_buf[0] = c;
 802bc76:	9b01      	ldr	r3, [sp, #4]
 802bc78:	9304      	str	r3, [sp, #16]
    u32_buf[1] = 0;
 802bc7a:	2300      	movs	r3, #0
 802bc7c:	9305      	str	r3, [sp, #20]
    lv_res_t res = insert_handler(obj, letter_buf);
 802bc7e:	a904      	add	r1, sp, #16
 802bc80:	4620      	mov	r0, r4
 802bc82:	f7ff ffcb 	bl	802bc1c <insert_handler>
    if(res != LV_RES_OK) return;
 802bc86:	2801      	cmp	r0, #1
 802bc88:	d153      	bne.n	802bd32 <lv_textarea_add_char+0xd6>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 802bc8a:	4b34      	ldr	r3, [pc, #208]	; (802bd5c <lv_textarea_add_char+0x100>)
 802bc8c:	681b      	ldr	r3, [r3, #0]
 802bc8e:	2100      	movs	r1, #0
 802bc90:	a801      	add	r0, sp, #4
 802bc92:	4798      	blx	r3
 802bc94:	4605      	mov	r5, r0
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 802bc96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802bc98:	2b00      	cmp	r3, #0
 802bc9a:	d14c      	bne.n	802bd36 <lv_textarea_add_char+0xda>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 802bc9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bc9e:	b173      	cbz	r3, 802bcbe <lv_textarea_add_char+0x62>
 802bca0:	781b      	ldrb	r3, [r3, #0]
 802bca2:	b163      	cbz	r3, 802bcbe <lv_textarea_add_char+0x62>
    uint32_t i = 0;
 802bca4:	2300      	movs	r3, #0
 802bca6:	9303      	str	r3, [sp, #12]
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 802bca8:	4e2c      	ldr	r6, [pc, #176]	; (802bd5c <lv_textarea_add_char+0x100>)
    while(ta->accepted_chars[i] != '\0') {
 802bcaa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802bcac:	9b03      	ldr	r3, [sp, #12]
 802bcae:	5cc3      	ldrb	r3, [r0, r3]
 802bcb0:	2b00      	cmp	r3, #0
 802bcb2:	d03e      	beq.n	802bd32 <lv_textarea_add_char+0xd6>
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 802bcb4:	6833      	ldr	r3, [r6, #0]
 802bcb6:	a903      	add	r1, sp, #12
 802bcb8:	4798      	blx	r3
        if(a == c) return true; /*Accepted*/
 802bcba:	4285      	cmp	r5, r0
 802bcbc:	d1f5      	bne.n	802bcaa <lv_textarea_add_char+0x4e>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802bcbe:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802bcc2:	f013 0f04 	tst.w	r3, #4
 802bcc6:	d140      	bne.n	802bd4a <lv_textarea_add_char+0xee>
    if(ta->placeholder_txt) {
 802bcc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802bcca:	b12b      	cbz	r3, 802bcd8 <lv_textarea_add_char+0x7c>
        const char * txt = lv_label_get_text(ta->label);
 802bccc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bcce:	f7fc f943 	bl	8027f58 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802bcd2:	7803      	ldrb	r3, [r0, #0]
 802bcd4:	2b00      	cmp	r3, #0
 802bcd6:	d03c      	beq.n	802bd52 <lv_textarea_add_char+0xf6>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 802bcd8:	aa04      	add	r2, sp, #16
 802bcda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802bcdc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bcde:	f7fd f9ab 	bl	8029038 <lv_label_ins_text>
    lv_textarea_clear_selection(obj); /*Clear selection*/
 802bce2:	4620      	mov	r0, r4
 802bce4:	f7ff ff0a 	bl	802bafc <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 802bce8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802bcec:	f013 0f04 	tst.w	r3, #4
 802bcf0:	d015      	beq.n	802bd1e <lv_textarea_add_char+0xc2>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(letter_buf) + 1;
 802bcf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bcf4:	4630      	mov	r0, r6
 802bcf6:	f7d4 fa9f 	bl	8000238 <strlen>
 802bcfa:	4605      	mov	r5, r0
 802bcfc:	a804      	add	r0, sp, #16
 802bcfe:	f7d4 fa9b 	bl	8000238 <strlen>
 802bd02:	1829      	adds	r1, r5, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 802bd04:	3101      	adds	r1, #1
 802bd06:	4630      	mov	r0, r6
 802bd08:	f7f5 fde8 	bl	80218dc <lv_mem_realloc>
 802bd0c:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bd0e:	b320      	cbz	r0, 802bd5a <lv_textarea_add_char+0xfe>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 802bd10:	aa04      	add	r2, sp, #16
 802bd12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802bd14:	f7f7 fffc 	bl	8023d10 <_lv_txt_ins>
        auto_hide_characters(obj);
 802bd18:	4620      	mov	r0, r4
 802bd1a:	f7ff fec1 	bl	802baa0 <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 802bd1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802bd20:	3101      	adds	r1, #1
 802bd22:	4620      	mov	r0, r4
 802bd24:	f7ff fd52 	bl	802b7cc <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802bd28:	2200      	movs	r2, #0
 802bd2a:	211c      	movs	r1, #28
 802bd2c:	4620      	mov	r0, r4
 802bd2e:	f7d7 ffe7 	bl	8003d00 <lv_event_send>
}
 802bd32:	b006      	add	sp, #24
 802bd34:	bd70      	pop	{r4, r5, r6, pc}
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 802bd36:	4b0a      	ldr	r3, [pc, #40]	; (802bd60 <lv_textarea_add_char+0x104>)
 802bd38:	681e      	ldr	r6, [r3, #0]
 802bd3a:	4620      	mov	r0, r4
 802bd3c:	f7ff fe48 	bl	802b9d0 <lv_textarea_get_text>
 802bd40:	47b0      	blx	r6
 802bd42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802bd44:	4298      	cmp	r0, r3
 802bd46:	d3a9      	bcc.n	802bc9c <lv_textarea_add_char+0x40>
 802bd48:	e7f3      	b.n	802bd32 <lv_textarea_add_char+0xd6>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802bd4a:	4620      	mov	r0, r4
 802bd4c:	f7ff fe6c 	bl	802ba28 <pwd_char_hider>
 802bd50:	e7ba      	b.n	802bcc8 <lv_textarea_add_char+0x6c>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802bd52:	4620      	mov	r0, r4
 802bd54:	f7dc f910 	bl	8007f78 <lv_obj_invalidate>
 802bd58:	e7be      	b.n	802bcd8 <lv_textarea_add_char+0x7c>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bd5a:	e7fe      	b.n	802bd5a <lv_textarea_add_char+0xfe>
 802bd5c:	2000075c 	.word	0x2000075c
 802bd60:	20000768 	.word	0x20000768

0802bd64 <lv_textarea_del_char>:
    if(cur_pos == 0) return;
 802bd64:	6c43      	ldr	r3, [r0, #68]	; 0x44
 802bd66:	b903      	cbnz	r3, 802bd6a <lv_textarea_del_char+0x6>
 802bd68:	4770      	bx	lr
{
 802bd6a:	b530      	push	{r4, r5, lr}
 802bd6c:	b083      	sub	sp, #12
 802bd6e:	4604      	mov	r4, r0
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 802bd70:	237f      	movs	r3, #127	; 0x7f
 802bd72:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_res_t res = insert_handler(obj, del_buf);
 802bd76:	a901      	add	r1, sp, #4
 802bd78:	f7ff ff50 	bl	802bc1c <insert_handler>
    if(res != LV_RES_OK) return;
 802bd7c:	2801      	cmp	r0, #1
 802bd7e:	d001      	beq.n	802bd84 <lv_textarea_del_char+0x20>
}
 802bd80:	b003      	add	sp, #12
 802bd82:	bd30      	pop	{r4, r5, pc}
    char * label_txt = lv_label_get_text(ta->label);
 802bd84:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bd86:	f7fc f8e7 	bl	8027f58 <lv_label_get_text>
 802bd8a:	4605      	mov	r5, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 802bd8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802bd8e:	2201      	movs	r2, #1
 802bd90:	3901      	subs	r1, #1
 802bd92:	f7f7 fff5 	bl	8023d80 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 802bd96:	4629      	mov	r1, r5
 802bd98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bd9a:	f7fc fda3 	bl	80288e4 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 802bd9e:	4620      	mov	r0, r4
 802bda0:	f7ff feac 	bl	802bafc <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 802bda4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802bda6:	b123      	cbz	r3, 802bdb2 <lv_textarea_del_char+0x4e>
        const char * txt = lv_label_get_text(ta->label);
 802bda8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bdaa:	f7fc f8d5 	bl	8027f58 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802bdae:	7803      	ldrb	r3, [r0, #0]
 802bdb0:	b1fb      	cbz	r3, 802bdf2 <lv_textarea_del_char+0x8e>
    if(ta->pwd_mode) {
 802bdb2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802bdb6:	f013 0f04 	tst.w	r3, #4
 802bdba:	d00f      	beq.n	802bddc <lv_textarea_del_char+0x78>
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 802bdbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802bdbe:	2201      	movs	r2, #1
 802bdc0:	3901      	subs	r1, #1
 802bdc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802bdc4:	f7f7 ffdc 	bl	8023d80 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 802bdc8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 802bdca:	4628      	mov	r0, r5
 802bdcc:	f7d4 fa34 	bl	8000238 <strlen>
 802bdd0:	1c41      	adds	r1, r0, #1
 802bdd2:	4628      	mov	r0, r5
 802bdd4:	f7f5 fd82 	bl	80218dc <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bdd8:	b178      	cbz	r0, 802bdfa <lv_textarea_del_char+0x96>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 802bdda:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 802bddc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802bdde:	3901      	subs	r1, #1
 802bde0:	4620      	mov	r0, r4
 802bde2:	f7ff fcf3 	bl	802b7cc <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802bde6:	2200      	movs	r2, #0
 802bde8:	211c      	movs	r1, #28
 802bdea:	4620      	mov	r0, r4
 802bdec:	f7d7 ff88 	bl	8003d00 <lv_event_send>
 802bdf0:	e7c6      	b.n	802bd80 <lv_textarea_del_char+0x1c>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802bdf2:	4620      	mov	r0, r4
 802bdf4:	f7dc f8c0 	bl	8007f78 <lv_obj_invalidate>
 802bdf8:	e7db      	b.n	802bdb2 <lv_textarea_del_char+0x4e>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bdfa:	e7fe      	b.n	802bdfa <lv_textarea_del_char+0x96>

0802bdfc <lv_textarea_del_char_forward>:
{
 802bdfc:	b538      	push	{r3, r4, r5, lr}
 802bdfe:	4604      	mov	r4, r0
    return ta->cursor.pos;
 802be00:	6c45      	ldr	r5, [r0, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, cp + 1);
 802be02:	1c69      	adds	r1, r5, #1
 802be04:	f7ff fce2 	bl	802b7cc <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 802be08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802be0a:	42ab      	cmp	r3, r5
 802be0c:	d100      	bne.n	802be10 <lv_textarea_del_char_forward+0x14>
}
 802be0e:	bd38      	pop	{r3, r4, r5, pc}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 802be10:	4620      	mov	r0, r4
 802be12:	f7ff ffa7 	bl	802bd64 <lv_textarea_del_char>
}
 802be16:	e7fa      	b.n	802be0e <lv_textarea_del_char_forward+0x12>

0802be18 <lv_textarea_set_text>:
    LV_ASSERT_NULL(txt);
 802be18:	2900      	cmp	r1, #0
 802be1a:	d04f      	beq.n	802bebc <lv_textarea_set_text+0xa4>
{
 802be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802be1e:	b083      	sub	sp, #12
 802be20:	4604      	mov	r4, r0
 802be22:	460d      	mov	r5, r1
    lv_textarea_clear_selection(obj);
 802be24:	f7ff fe6a 	bl	802bafc <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802be28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802be2a:	2b00      	cmp	r3, #0
 802be2c:	d047      	beq.n	802bebe <lv_textarea_set_text+0xa6>
        lv_label_set_text(ta->label, "");
 802be2e:	492d      	ldr	r1, [pc, #180]	; (802bee4 <lv_textarea_set_text+0xcc>)
 802be30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802be32:	f7fc fd57 	bl	80288e4 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802be36:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802be3a:	4620      	mov	r0, r4
 802be3c:	f7ff fcc6 	bl	802b7cc <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode) {
 802be40:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802be44:	f013 0f04 	tst.w	r3, #4
 802be48:	d002      	beq.n	802be50 <lv_textarea_set_text+0x38>
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 802be4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802be4c:	2200      	movs	r2, #0
 802be4e:	701a      	strb	r2, [r3, #0]
        uint32_t i = 0;
 802be50:	2300      	movs	r3, #0
 802be52:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 802be54:	782b      	ldrb	r3, [r5, #0]
 802be56:	b17b      	cbz	r3, 802be78 <lv_textarea_set_text+0x60>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802be58:	4f23      	ldr	r7, [pc, #140]	; (802bee8 <lv_textarea_set_text+0xd0>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802be5a:	4e24      	ldr	r6, [pc, #144]	; (802beec <lv_textarea_set_text+0xd4>)
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802be5c:	683b      	ldr	r3, [r7, #0]
 802be5e:	a901      	add	r1, sp, #4
 802be60:	4628      	mov	r0, r5
 802be62:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802be64:	6833      	ldr	r3, [r6, #0]
 802be66:	4798      	blx	r3
 802be68:	4601      	mov	r1, r0
 802be6a:	4620      	mov	r0, r4
 802be6c:	f7ff fef6 	bl	802bc5c <lv_textarea_add_char>
        while(txt[i] != '\0') {
 802be70:	9b01      	ldr	r3, [sp, #4]
 802be72:	5ceb      	ldrb	r3, [r5, r3]
 802be74:	2b00      	cmp	r3, #0
 802be76:	d1f1      	bne.n	802be5c <lv_textarea_set_text+0x44>
    if(ta->placeholder_txt) {
 802be78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802be7a:	b123      	cbz	r3, 802be86 <lv_textarea_set_text+0x6e>
        const char * txt_act = lv_label_get_text(ta->label);
 802be7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802be7e:	f7fc f86b 	bl	8027f58 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802be82:	7803      	ldrb	r3, [r0, #0]
 802be84:	b343      	cbz	r3, 802bed8 <lv_textarea_set_text+0xc0>
    if(ta->pwd_mode) {
 802be86:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802be8a:	f013 0f04 	tst.w	r3, #4
 802be8e:	d00e      	beq.n	802beae <lv_textarea_set_text+0x96>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 802be90:	4628      	mov	r0, r5
 802be92:	f7d4 f9d1 	bl	8000238 <strlen>
 802be96:	1c41      	adds	r1, r0, #1
 802be98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802be9a:	f7f5 fd1f 	bl	80218dc <lv_mem_realloc>
 802be9e:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bea0:	b1f0      	cbz	r0, 802bee0 <lv_textarea_set_text+0xc8>
        strcpy(ta->pwd_tmp, txt);
 802bea2:	4629      	mov	r1, r5
 802bea4:	f000 fcd4 	bl	802c850 <strcpy>
        auto_hide_characters(obj);
 802bea8:	4620      	mov	r0, r4
 802beaa:	f7ff fdf9 	bl	802baa0 <auto_hide_characters>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802beae:	2200      	movs	r2, #0
 802beb0:	211c      	movs	r1, #28
 802beb2:	4620      	mov	r0, r4
 802beb4:	f7d7 ff24 	bl	8003d00 <lv_event_send>
}
 802beb8:	b003      	add	sp, #12
 802beba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(txt);
 802bebc:	e7fe      	b.n	802bebc <lv_textarea_set_text+0xa4>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802bebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802bec0:	2b00      	cmp	r3, #0
 802bec2:	d1b4      	bne.n	802be2e <lv_textarea_set_text+0x16>
        lv_label_set_text(ta->label, txt);
 802bec4:	4629      	mov	r1, r5
 802bec6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bec8:	f7fc fd0c 	bl	80288e4 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802becc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802bed0:	4620      	mov	r0, r4
 802bed2:	f7ff fc7b 	bl	802b7cc <lv_textarea_set_cursor_pos>
 802bed6:	e7cf      	b.n	802be78 <lv_textarea_set_text+0x60>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802bed8:	4620      	mov	r0, r4
 802beda:	f7dc f84d 	bl	8007f78 <lv_obj_invalidate>
 802bede:	e7d2      	b.n	802be86 <lv_textarea_set_text+0x6e>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802bee0:	e7fe      	b.n	802bee0 <lv_textarea_set_text+0xc8>
 802bee2:	bf00      	nop
 802bee4:	0802ceb8 	.word	0x0802ceb8
 802bee8:	2000075c 	.word	0x2000075c
 802beec:	2000076c 	.word	0x2000076c

0802bef0 <lv_textarea_cursor_right>:
{
 802bef0:	b508      	push	{r3, lr}
    cp++;
 802bef2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, cp);
 802bef4:	3101      	adds	r1, #1
 802bef6:	f7ff fc69 	bl	802b7cc <lv_textarea_set_cursor_pos>
}
 802befa:	bd08      	pop	{r3, pc}

0802befc <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 802befc:	6c41      	ldr	r1, [r0, #68]	; 0x44
    if(cp > 0) {
 802befe:	b901      	cbnz	r1, 802bf02 <lv_textarea_cursor_left+0x6>
 802bf00:	4770      	bx	lr
{
 802bf02:	b508      	push	{r3, lr}
        lv_textarea_set_cursor_pos(obj, cp);
 802bf04:	3901      	subs	r1, #1
 802bf06:	f7ff fc61 	bl	802b7cc <lv_textarea_set_cursor_pos>
}
 802bf0a:	bd08      	pop	{r3, pc}

0802bf0c <lv_textarea_cursor_down>:
{
 802bf0c:	b530      	push	{r4, r5, lr}
 802bf0e:	b083      	sub	sp, #12
 802bf10:	4605      	mov	r5, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 802bf12:	aa01      	add	r2, sp, #4
 802bf14:	6c41      	ldr	r1, [r0, #68]	; 0x44
 802bf16:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802bf18:	f7fc f826 	bl	8027f68 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802bf1c:	2259      	movs	r2, #89	; 0x59
 802bf1e:	2100      	movs	r1, #0
 802bf20:	4628      	mov	r0, r5
 802bf22:	f7de fc61 	bl	800a7e8 <lv_obj_get_style_prop>
 802bf26:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802bf28:	2257      	movs	r2, #87	; 0x57
 802bf2a:	2100      	movs	r1, #0
 802bf2c:	4628      	mov	r0, r5
 802bf2e:	f7de fc5b 	bl	800a7e8 <lv_obj_get_style_prop>
    pos.y += font_h + line_space + 1;
 802bf32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802bf36:	441c      	add	r4, r3
 802bf38:	3401      	adds	r4, #1
 802bf3a:	8903      	ldrh	r3, [r0, #8]
 802bf3c:	441c      	add	r4, r3
 802bf3e:	b224      	sxth	r4, r4
 802bf40:	f8ad 4006 	strh.w	r4, [sp, #6]
    pos.x = ta->cursor.valid_x;
 802bf44:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 802bf48:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(pos.y < lv_obj_get_height(ta->label)) {
 802bf4c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802bf4e:	f7db fdd2 	bl	8007af6 <lv_obj_get_height>
 802bf52:	4284      	cmp	r4, r0
 802bf54:	db01      	blt.n	802bf5a <lv_textarea_cursor_down+0x4e>
}
 802bf56:	b003      	add	sp, #12
 802bf58:	bd30      	pop	{r4, r5, pc}
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 802bf5a:	a901      	add	r1, sp, #4
 802bf5c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802bf5e:	f7fc f901 	bl	8028164 <lv_label_get_letter_on>
 802bf62:	4601      	mov	r1, r0
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 802bf64:	f9b5 4040 	ldrsh.w	r4, [r5, #64]	; 0x40
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 802bf68:	4628      	mov	r0, r5
 802bf6a:	f7ff fc2f 	bl	802b7cc <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 802bf6e:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
}
 802bf72:	e7f0      	b.n	802bf56 <lv_textarea_cursor_down+0x4a>

0802bf74 <lv_textarea_cursor_up>:
{
 802bf74:	b530      	push	{r4, r5, lr}
 802bf76:	b083      	sub	sp, #12
 802bf78:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 802bf7a:	aa01      	add	r2, sp, #4
 802bf7c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 802bf7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802bf80:	f7fb fff2 	bl	8027f68 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802bf84:	2259      	movs	r2, #89	; 0x59
 802bf86:	2100      	movs	r1, #0
 802bf88:	4620      	mov	r0, r4
 802bf8a:	f7de fc2d 	bl	800a7e8 <lv_obj_get_style_prop>
 802bf8e:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802bf90:	2257      	movs	r2, #87	; 0x57
 802bf92:	2100      	movs	r1, #0
 802bf94:	4620      	mov	r0, r4
 802bf96:	f7de fc27 	bl	800a7e8 <lv_obj_get_style_prop>
    pos.y -= font_h + line_space - 1;
 802bf9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802bf9e:	3301      	adds	r3, #1
 802bfa0:	1b5b      	subs	r3, r3, r5
 802bfa2:	8900      	ldrh	r0, [r0, #8]
 802bfa4:	1a1b      	subs	r3, r3, r0
 802bfa6:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 802bfaa:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 802bfae:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 802bfb2:	a901      	add	r1, sp, #4
 802bfb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bfb6:	f7fc f8d5 	bl	8028164 <lv_label_get_letter_on>
 802bfba:	4601      	mov	r1, r0
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 802bfbc:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 802bfc0:	4620      	mov	r0, r4
 802bfc2:	f7ff fc03 	bl	802b7cc <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 802bfc6:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 802bfca:	b003      	add	sp, #12
 802bfcc:	bd30      	pop	{r4, r5, pc}
	...

0802bfd0 <lv_textarea_event>:
{
 802bfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802bfd4:	b09d      	sub	sp, #116	; 0x74
 802bfd6:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802bfd8:	48b9      	ldr	r0, [pc, #740]	; (802c2c0 <lv_textarea_event+0x2f0>)
 802bfda:	f7d7 fd94 	bl	8003b06 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802bfde:	2801      	cmp	r0, #1
 802bfe0:	d002      	beq.n	802bfe8 <lv_textarea_event+0x18>
}
 802bfe2:	b01d      	add	sp, #116	; 0x74
 802bfe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802bfe8:	4628      	mov	r0, r5
 802bfea:	f7d7 feaf 	bl	8003d4c <lv_event_get_code>
 802bfee:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802bff0:	4628      	mov	r0, r5
 802bff2:	f7d7 fea7 	bl	8003d44 <lv_event_get_target>
 802bff6:	4606      	mov	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 802bff8:	2c0e      	cmp	r4, #14
 802bffa:	f000 809c 	beq.w	802c136 <lv_textarea_event+0x166>
    else if(code == LV_EVENT_KEY) {
 802bffe:	2c0d      	cmp	r4, #13
 802c000:	f000 809c 	beq.w	802c13c <lv_textarea_event+0x16c>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING || code == LV_EVENT_PRESS_LOST ||
 802c004:	1e63      	subs	r3, r4, #1
 802c006:	b2db      	uxtb	r3, r3
 802c008:	2b02      	cmp	r3, #2
 802c00a:	f240 80df 	bls.w	802c1cc <lv_textarea_event+0x1fc>
 802c00e:	2c08      	cmp	r4, #8
 802c010:	f000 80dc 	beq.w	802c1cc <lv_textarea_event+0x1fc>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802c014:	2c15      	cmp	r4, #21
 802c016:	f000 81b1 	beq.w	802c37c <lv_textarea_event+0x3ac>
    else if(code == LV_EVENT_DRAW_POST) {
 802c01a:	2c18      	cmp	r4, #24
 802c01c:	d1e1      	bne.n	802bfe2 <lv_textarea_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802c01e:	4628      	mov	r0, r5
 802c020:	f7d7 fe90 	bl	8003d44 <lv_event_get_target>
 802c024:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802c026:	4628      	mov	r0, r5
 802c028:	f7d7 ff00 	bl	8003e2c <lv_event_get_draw_ctx>
 802c02c:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 802c02e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c030:	f7fb ff92 	bl	8027f58 <lv_label_get_text>
 802c034:	4607      	mov	r7, r0
    if(ta->cursor.show == 0) return;
 802c036:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 802c03a:	f013 0f01 	tst.w	r3, #1
 802c03e:	d0d0      	beq.n	802bfe2 <lv_textarea_event+0x12>
    lv_draw_rect_dsc_init(&cur_dsc);
 802c040:	a80e      	add	r0, sp, #56	; 0x38
 802c042:	f7e3 f891 	bl	800f168 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 802c046:	aa0e      	add	r2, sp, #56	; 0x38
 802c048:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c04c:	4620      	mov	r0, r4
 802c04e:	f7db f805 	bl	800705c <lv_obj_init_draw_rect_dsc>
    dest->y1 = src->y1;
 802c052:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 802c056:	f9b4 c04c 	ldrsh.w	ip, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 802c05a:	f9b4 504e 	ldrsh.w	r5, [r4, #78]	; 0x4e
    cur_area.x1 += ta->label->coords.x1;
 802c05e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c060:	8a82      	ldrh	r2, [r0, #20]
 802c062:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 802c066:	4413      	add	r3, r2
 802c068:	f8ad 3008 	strh.w	r3, [sp, #8]
    cur_area.y1 += ta->label->coords.y1;
 802c06c:	8ac3      	ldrh	r3, [r0, #22]
 802c06e:	4419      	add	r1, r3
 802c070:	f8ad 100a 	strh.w	r1, [sp, #10]
    cur_area.x2 += ta->label->coords.x1;
 802c074:	4462      	add	r2, ip
 802c076:	f8ad 200c 	strh.w	r2, [sp, #12]
    cur_area.y2 += ta->label->coords.y1;
 802c07a:	442b      	add	r3, r5
 802c07c:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 802c080:	aa02      	add	r2, sp, #8
 802c082:	a90e      	add	r1, sp, #56	; 0x38
 802c084:	4630      	mov	r0, r6
 802c086:	f7e3 f8cb 	bl	800f220 <lv_draw_rect>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802c08a:	2232      	movs	r2, #50	; 0x32
 802c08c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c090:	4620      	mov	r0, r4
 802c092:	f7de fba9 	bl	800a7e8 <lv_obj_get_style_prop>
 802c096:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802c098:	2212      	movs	r2, #18
 802c09a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c09e:	4620      	mov	r0, r4
 802c0a0:	f7de fba2 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 802c0a4:	b2ad      	uxth	r5, r5
 802c0a6:	eb05 0800 	add.w	r8, r5, r0
 802c0aa:	fa1f f888 	uxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802c0ae:	2210      	movs	r2, #16
 802c0b0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c0b4:	4620      	mov	r0, r4
 802c0b6:	f7de fb97 	bl	800a7e8 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 802c0ba:	4405      	add	r5, r0
 802c0bc:	b2ad      	uxth	r5, r5
    char letter_buf[8] = {0};
 802c0be:	f04f 0900 	mov.w	r9, #0
 802c0c2:	f8cd 9010 	str.w	r9, [sp, #16]
 802c0c6:	f8cd 9014 	str.w	r9, [sp, #20]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 802c0ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802c0cc:	441f      	add	r7, r3
 802c0ce:	4b7d      	ldr	r3, [pc, #500]	; (802c2c4 <lv_textarea_event+0x2f4>)
 802c0d0:	681b      	ldr	r3, [r3, #0]
 802c0d2:	4638      	mov	r0, r7
 802c0d4:	4798      	blx	r3
 802c0d6:	4602      	mov	r2, r0
 802c0d8:	4639      	mov	r1, r7
 802c0da:	a804      	add	r0, sp, #16
 802c0dc:	f7f5 fcae 	bl	8021a3c <lv_memcpy>
    cur_area.x1 += left;
 802c0e0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 802c0e4:	4498      	add	r8, r3
 802c0e6:	f8ad 8008 	strh.w	r8, [sp, #8]
    cur_area.y1 += top;
 802c0ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802c0ee:	441d      	add	r5, r3
 802c0f0:	f8ad 500a 	strh.w	r5, [sp, #10]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 802c0f4:	2255      	movs	r2, #85	; 0x55
 802c0f6:	4649      	mov	r1, r9
 802c0f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c0fa:	f7de fb75 	bl	800a7e8 <lv_obj_get_style_prop>
    return v.color;
 802c0fe:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&cur_label_dsc);
 802c100:	a806      	add	r0, sp, #24
 802c102:	f7e1 fa75 	bl	800d5f0 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 802c106:	aa06      	add	r2, sp, #24
 802c108:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c10c:	4620      	mov	r0, r4
 802c10e:	f7db f91a 	bl	8007346 <lv_obj_init_draw_label_dsc>
    if(cur_dsc.bg_opa > LV_OPA_MIN || cur_label_dsc.color.full != label_color.full) {
 802c112:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 802c116:	2b02      	cmp	r3, #2
 802c118:	d804      	bhi.n	802c124 <lv_textarea_event+0x154>
 802c11a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 802c11e:	42ab      	cmp	r3, r5
 802c120:	f43f af5f 	beq.w	802bfe2 <lv_textarea_event+0x12>
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 802c124:	2300      	movs	r3, #0
 802c126:	9300      	str	r3, [sp, #0]
 802c128:	ab04      	add	r3, sp, #16
 802c12a:	aa02      	add	r2, sp, #8
 802c12c:	a906      	add	r1, sp, #24
 802c12e:	4630      	mov	r0, r6
 802c130:	f7e1 fa92 	bl	800d658 <lv_draw_label>
 802c134:	e755      	b.n	802bfe2 <lv_textarea_event+0x12>
        start_cursor_blink(obj);
 802c136:	f7ff f9e5 	bl	802b504 <start_cursor_blink>
 802c13a:	e752      	b.n	802bfe2 <lv_textarea_event+0x12>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 802c13c:	4628      	mov	r0, r5
 802c13e:	f7d7 fe09 	bl	8003d54 <lv_event_get_param>
 802c142:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 802c144:	2913      	cmp	r1, #19
 802c146:	d018      	beq.n	802c17a <lv_textarea_event+0x1aa>
        else if(c == LV_KEY_LEFT)
 802c148:	2914      	cmp	r1, #20
 802c14a:	d01a      	beq.n	802c182 <lv_textarea_event+0x1b2>
        else if(c == LV_KEY_UP)
 802c14c:	2911      	cmp	r1, #17
 802c14e:	d01c      	beq.n	802c18a <lv_textarea_event+0x1ba>
        else if(c == LV_KEY_DOWN)
 802c150:	2912      	cmp	r1, #18
 802c152:	d01e      	beq.n	802c192 <lv_textarea_event+0x1c2>
        else if(c == LV_KEY_BACKSPACE)
 802c154:	2908      	cmp	r1, #8
 802c156:	d020      	beq.n	802c19a <lv_textarea_event+0x1ca>
        else if(c == LV_KEY_DEL)
 802c158:	297f      	cmp	r1, #127	; 0x7f
 802c15a:	d022      	beq.n	802c1a2 <lv_textarea_event+0x1d2>
        else if(c == LV_KEY_HOME)
 802c15c:	2902      	cmp	r1, #2
 802c15e:	d024      	beq.n	802c1aa <lv_textarea_event+0x1da>
        else if(c == LV_KEY_END)
 802c160:	2903      	cmp	r1, #3
 802c162:	d027      	beq.n	802c1b4 <lv_textarea_event+0x1e4>
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 802c164:	290a      	cmp	r1, #10
 802c166:	d104      	bne.n	802c172 <lv_textarea_event+0x1a2>
    return ta->one_line == 1U;
 802c168:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 802c16c:	f013 0f08 	tst.w	r3, #8
 802c170:	d126      	bne.n	802c1c0 <lv_textarea_event+0x1f0>
            lv_textarea_add_char(obj, c);
 802c172:	4630      	mov	r0, r6
 802c174:	f7ff fd72 	bl	802bc5c <lv_textarea_add_char>
 802c178:	e733      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_cursor_right(obj);
 802c17a:	4630      	mov	r0, r6
 802c17c:	f7ff feb8 	bl	802bef0 <lv_textarea_cursor_right>
 802c180:	e72f      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_cursor_left(obj);
 802c182:	4630      	mov	r0, r6
 802c184:	f7ff feba 	bl	802befc <lv_textarea_cursor_left>
 802c188:	e72b      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_cursor_up(obj);
 802c18a:	4630      	mov	r0, r6
 802c18c:	f7ff fef2 	bl	802bf74 <lv_textarea_cursor_up>
 802c190:	e727      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_cursor_down(obj);
 802c192:	4630      	mov	r0, r6
 802c194:	f7ff feba 	bl	802bf0c <lv_textarea_cursor_down>
 802c198:	e723      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_del_char(obj);
 802c19a:	4630      	mov	r0, r6
 802c19c:	f7ff fde2 	bl	802bd64 <lv_textarea_del_char>
 802c1a0:	e71f      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_del_char_forward(obj);
 802c1a2:	4630      	mov	r0, r6
 802c1a4:	f7ff fe2a 	bl	802bdfc <lv_textarea_del_char_forward>
 802c1a8:	e71b      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_set_cursor_pos(obj, 0);
 802c1aa:	2100      	movs	r1, #0
 802c1ac:	4630      	mov	r0, r6
 802c1ae:	f7ff fb0d 	bl	802b7cc <lv_textarea_set_cursor_pos>
 802c1b2:	e716      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802c1b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802c1b8:	4630      	mov	r0, r6
 802c1ba:	f7ff fb07 	bl	802b7cc <lv_textarea_set_cursor_pos>
 802c1be:	e710      	b.n	802bfe2 <lv_textarea_event+0x12>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 802c1c0:	2200      	movs	r2, #0
 802c1c2:	211f      	movs	r1, #31
 802c1c4:	4630      	mov	r0, r6
 802c1c6:	f7d7 fd9b 	bl	8003d00 <lv_event_send>
 802c1ca:	e70a      	b.n	802bfe2 <lv_textarea_event+0x12>
    lv_indev_t * click_source = lv_indev_get_act();
 802c1cc:	f7d8 f93e 	bl	800444c <lv_indev_get_act>
    if(click_source == NULL) return;
 802c1d0:	4606      	mov	r6, r0
 802c1d2:	2800      	cmp	r0, #0
 802c1d4:	f43f af05 	beq.w	802bfe2 <lv_textarea_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802c1d8:	4628      	mov	r0, r5
 802c1da:	f7d7 fdb3 	bl	8003d44 <lv_event_get_target>
 802c1de:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 802c1e0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802c1e4:	f013 0f02 	tst.w	r3, #2
 802c1e8:	f43f aefb 	beq.w	802bfe2 <lv_textarea_event+0x12>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 802c1ec:	4630      	mov	r0, r6
 802c1ee:	f7d8 f933 	bl	8004458 <lv_indev_get_type>
 802c1f2:	2802      	cmp	r0, #2
 802c1f4:	f43f aef5 	beq.w	802bfe2 <lv_textarea_event+0x12>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 802c1f8:	4630      	mov	r0, r6
 802c1fa:	f7d8 f92d 	bl	8004458 <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 802c1fe:	2804      	cmp	r0, #4
 802c200:	f43f aeef 	beq.w	802bfe2 <lv_textarea_event+0x12>
    lv_obj_get_coords(ta->label, &label_coords);
 802c204:	a90e      	add	r1, sp, #56	; 0x38
 802c206:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c208:	f7db fc11 	bl	8007a2e <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 802c20c:	a902      	add	r1, sp, #8
 802c20e:	4630      	mov	r0, r6
 802c210:	f7d8 f999 	bl	8004546 <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 802c214:	a904      	add	r1, sp, #16
 802c216:	4630      	mov	r0, r6
 802c218:	f7d8 f9c8 	bl	80045ac <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 802c21c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802c220:	2b00      	cmp	r3, #0
 802c222:	f6ff aede 	blt.w	802bfe2 <lv_textarea_event+0x12>
 802c226:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802c22a:	2a00      	cmp	r2, #0
 802c22c:	f6ff aed9 	blt.w	802bfe2 <lv_textarea_event+0x12>
    rel_pos.x = point_act.x - label_coords.x1;
 802c230:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802c234:	1a5b      	subs	r3, r3, r1
 802c236:	f8ad 3018 	strh.w	r3, [sp, #24]
    rel_pos.y = point_act.y - label_coords.y1;
 802c23a:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 802c23e:	1ad2      	subs	r2, r2, r3
 802c240:	f8ad 201a 	strh.w	r2, [sp, #26]
    const lv_event_code_t code = lv_event_get_code(e);
 802c244:	4628      	mov	r0, r5
 802c246:	f7d7 fd81 	bl	8003d4c <lv_event_get_code>
 802c24a:	4605      	mov	r5, r0
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 802c24c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c24e:	f7db fc4c 	bl	8007aea <lv_obj_get_width>
    lv_label_t * label_data = (lv_label_t *)ta->label;
 802c252:	6a66      	ldr	r6, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 802c254:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802c258:	2b00      	cmp	r3, #0
 802c25a:	db12      	blt.n	802c282 <lv_textarea_event+0x2b2>
    else if(rel_pos.x >= label_width) {
 802c25c:	4298      	cmp	r0, r3
 802c25e:	dc03      	bgt.n	802c268 <lv_textarea_event+0x298>
        click_outside_label = true;
 802c260:	2201      	movs	r2, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 802c262:	f647 77ff 	movw	r7, #32767	; 0x7fff
 802c266:	e00e      	b.n	802c286 <lv_textarea_event+0x2b6>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 802c268:	a906      	add	r1, sp, #24
 802c26a:	4630      	mov	r0, r6
 802c26c:	f7fb ff7a 	bl	8028164 <lv_label_get_letter_on>
 802c270:	b287      	uxth	r7, r0
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 802c272:	a906      	add	r1, sp, #24
 802c274:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c276:	f7fc fdd9 	bl	8028e2c <lv_label_is_char_under_pos>
 802c27a:	f080 0201 	eor.w	r2, r0, #1
 802c27e:	b2d2      	uxtb	r2, r2
 802c280:	e001      	b.n	802c286 <lv_textarea_event+0x2b6>
        click_outside_label = true;
 802c282:	2201      	movs	r2, #1
        char_id_at_click = 0;
 802c284:	2700      	movs	r7, #0
    if(ta->text_sel_en) {
 802c286:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c28a:	f013 0f02 	tst.w	r3, #2
 802c28e:	d026      	beq.n	802c2de <lv_textarea_event+0x30e>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 802c290:	f013 0f01 	tst.w	r3, #1
 802c294:	d118      	bne.n	802c2c8 <lv_textarea_event+0x2f8>
 802c296:	bb3a      	cbnz	r2, 802c2e8 <lv_textarea_event+0x318>
 802c298:	2d01      	cmp	r5, #1
 802c29a:	f47f aea2 	bne.w	802bfe2 <lv_textarea_event+0x12>
            ta->sel_start    = char_id_at_click;
 802c29e:	65a7      	str	r7, [r4, #88]	; 0x58
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 802c2a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802c2a4:	65e3      	str	r3, [r4, #92]	; 0x5c
            ta->text_sel_in_prog = 1;
 802c2a6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c2aa:	f043 0301 	orr.w	r3, r3, #1
 802c2ae:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802c2b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 802c2b6:	4620      	mov	r0, r4
 802c2b8:	f7da fb34 	bl	8006924 <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 802c2bc:	e017      	b.n	802c2ee <lv_textarea_event+0x31e>
 802c2be:	bf00      	nop
 802c2c0:	0803310c 	.word	0x0803310c
 802c2c4:	20000764 	.word	0x20000764
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 802c2c8:	2d02      	cmp	r5, #2
 802c2ca:	d036      	beq.n	802c33a <lv_textarea_event+0x36a>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 802c2cc:	2d03      	cmp	r5, #3
 802c2ce:	d001      	beq.n	802c2d4 <lv_textarea_event+0x304>
 802c2d0:	2d08      	cmp	r5, #8
 802c2d2:	d10c      	bne.n	802c2ee <lv_textarea_event+0x31e>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802c2d4:	f44f 7140 	mov.w	r1, #768	; 0x300
 802c2d8:	4620      	mov	r0, r4
 802c2da:	f7da fae9 	bl	80068b0 <lv_obj_add_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 802c2de:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c2e2:	f013 0f01 	tst.w	r3, #1
 802c2e6:	d102      	bne.n	802c2ee <lv_textarea_event+0x31e>
 802c2e8:	2d01      	cmp	r5, #1
 802c2ea:	f47f ae7a 	bne.w	802bfe2 <lv_textarea_event+0x12>
 802c2ee:	4639      	mov	r1, r7
 802c2f0:	4620      	mov	r0, r4
 802c2f2:	f7ff fa6b 	bl	802b7cc <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 802c2f6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c2fa:	f013 0f01 	tst.w	r3, #1
 802c2fe:	f43f ae70 	beq.w	802bfe2 <lv_textarea_event+0x12>
        if(ta->sel_start > ta->sel_end) {
 802c302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c304:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c306:	4293      	cmp	r3, r2
 802c308:	d919      	bls.n	802c33e <lv_textarea_event+0x36e>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 802c30a:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 802c30c:	428a      	cmp	r2, r1
 802c30e:	d102      	bne.n	802c316 <lv_textarea_event+0x346>
 802c310:	6c31      	ldr	r1, [r6, #64]	; 0x40
 802c312:	428b      	cmp	r3, r1
 802c314:	d005      	beq.n	802c322 <lv_textarea_event+0x352>
                label_data->sel_start = ta->sel_end;
 802c316:	63f2      	str	r2, [r6, #60]	; 0x3c
                label_data->sel_end   = ta->sel_start;
 802c318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c31a:	6433      	str	r3, [r6, #64]	; 0x40
                lv_obj_invalidate(obj);
 802c31c:	4620      	mov	r0, r4
 802c31e:	f7db fe2b 	bl	8007f78 <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 802c322:	2d03      	cmp	r5, #3
 802c324:	d002      	beq.n	802c32c <lv_textarea_event+0x35c>
 802c326:	2d08      	cmp	r5, #8
 802c328:	f47f ae5b 	bne.w	802bfe2 <lv_textarea_event+0x12>
            ta->text_sel_in_prog = 0;
 802c32c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c330:	f36f 0300 	bfc	r3, #0, #1
 802c334:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 802c338:	e653      	b.n	802bfe2 <lv_textarea_event+0x12>
            ta->sel_end = char_id_at_click;
 802c33a:	65e7      	str	r7, [r4, #92]	; 0x5c
 802c33c:	e7d7      	b.n	802c2ee <lv_textarea_event+0x31e>
        else if(ta->sel_start < ta->sel_end) {
 802c33e:	4293      	cmp	r3, r2
 802c340:	d20c      	bcs.n	802c35c <lv_textarea_event+0x38c>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 802c342:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 802c344:	428b      	cmp	r3, r1
 802c346:	d102      	bne.n	802c34e <lv_textarea_event+0x37e>
 802c348:	6c31      	ldr	r1, [r6, #64]	; 0x40
 802c34a:	428a      	cmp	r2, r1
 802c34c:	d0e9      	beq.n	802c322 <lv_textarea_event+0x352>
                label_data->sel_start = ta->sel_start;
 802c34e:	63f3      	str	r3, [r6, #60]	; 0x3c
                label_data->sel_end   = ta->sel_end;
 802c350:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802c352:	6433      	str	r3, [r6, #64]	; 0x40
                lv_obj_invalidate(obj);
 802c354:	4620      	mov	r0, r4
 802c356:	f7db fe0f 	bl	8007f78 <lv_obj_invalidate>
 802c35a:	e7e2      	b.n	802c322 <lv_textarea_event+0x352>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 802c35c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 802c35e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802c362:	429a      	cmp	r2, r3
 802c364:	d102      	bne.n	802c36c <lv_textarea_event+0x39c>
 802c366:	6c32      	ldr	r2, [r6, #64]	; 0x40
 802c368:	429a      	cmp	r2, r3
 802c36a:	d0da      	beq.n	802c322 <lv_textarea_event+0x352>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 802c36c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802c370:	63f3      	str	r3, [r6, #60]	; 0x3c
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 802c372:	6433      	str	r3, [r6, #64]	; 0x40
                lv_obj_invalidate(obj);
 802c374:	4620      	mov	r0, r4
 802c376:	f7db fdff 	bl	8007f78 <lv_obj_invalidate>
 802c37a:	e7d2      	b.n	802c322 <lv_textarea_event+0x352>
    lv_obj_t * obj = lv_event_get_target(e);
 802c37c:	4628      	mov	r0, r5
 802c37e:	f7d7 fce1 	bl	8003d44 <lv_event_get_target>
 802c382:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802c384:	4628      	mov	r0, r5
 802c386:	f7d7 fd51 	bl	8003e2c <lv_event_get_draw_ctx>
 802c38a:	4605      	mov	r5, r0
    const char * txt = lv_label_get_text(ta->label);
 802c38c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c38e:	f7fb fde3 	bl	8027f58 <lv_label_get_text>
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 802c392:	7803      	ldrb	r3, [r0, #0]
 802c394:	2b00      	cmp	r3, #0
 802c396:	f47f ae24 	bne.w	802bfe2 <lv_textarea_event+0x12>
 802c39a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802c39c:	2b00      	cmp	r3, #0
 802c39e:	f43f ae20 	beq.w	802bfe2 <lv_textarea_event+0x12>
 802c3a2:	781b      	ldrb	r3, [r3, #0]
 802c3a4:	2b00      	cmp	r3, #0
 802c3a6:	f43f ae1c 	beq.w	802bfe2 <lv_textarea_event+0x12>
        lv_draw_label_dsc_init(&ph_dsc);
 802c3aa:	a80e      	add	r0, sp, #56	; 0x38
 802c3ac:	f7e1 f920 	bl	800d5f0 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 802c3b0:	aa0e      	add	r2, sp, #56	; 0x38
 802c3b2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802c3b6:	4620      	mov	r0, r4
 802c3b8:	f7da ffc5 	bl	8007346 <lv_obj_init_draw_label_dsc>
        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 802c3bc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c3c0:	f013 0f08 	tst.w	r3, #8
 802c3c4:	d005      	beq.n	802c3d2 <lv_textarea_event+0x402>
 802c3c6:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
 802c3ca:	f043 0302 	orr.w	r3, r3, #2
 802c3ce:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802c3d2:	2212      	movs	r2, #18
 802c3d4:	2100      	movs	r1, #0
 802c3d6:	4620      	mov	r0, r4
 802c3d8:	f7de fa06 	bl	800a7e8 <lv_obj_get_style_prop>
 802c3dc:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802c3de:	2210      	movs	r2, #16
 802c3e0:	2100      	movs	r1, #0
 802c3e2:	4620      	mov	r0, r4
 802c3e4:	f7de fa00 	bl	800a7e8 <lv_obj_get_style_prop>
 802c3e8:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802c3ea:	2232      	movs	r2, #50	; 0x32
 802c3ec:	2100      	movs	r1, #0
 802c3ee:	4620      	mov	r0, r4
 802c3f0:	f7de f9fa 	bl	800a7e8 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 802c3f4:	8aa3      	ldrh	r3, [r4, #20]
 802c3f6:	f8ad 3018 	strh.w	r3, [sp, #24]
    dest->y1 = src->y1;
 802c3fa:	8ae3      	ldrh	r3, [r4, #22]
 802c3fc:	f8ad 301a 	strh.w	r3, [sp, #26]
    dest->x2 = src->x2;
 802c400:	8b23      	ldrh	r3, [r4, #24]
 802c402:	f8ad 301c 	strh.w	r3, [sp, #28]
    dest->y2 = src->y2;
 802c406:	8b63      	ldrh	r3, [r4, #26]
 802c408:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 802c40c:	b283      	uxth	r3, r0
 802c40e:	199a      	adds	r2, r3, r6
 802c410:	443b      	add	r3, r7
 802c412:	b212      	sxth	r2, r2
 802c414:	b219      	sxth	r1, r3
 802c416:	a806      	add	r0, sp, #24
 802c418:	f7f4 fb02 	bl	8020a20 <lv_area_move>
        lv_draw_label(draw_ctx, &ph_dsc, &ph_coords, ta->placeholder_txt, NULL);
 802c41c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802c41e:	2200      	movs	r2, #0
 802c420:	9200      	str	r2, [sp, #0]
 802c422:	aa06      	add	r2, sp, #24
 802c424:	a90e      	add	r1, sp, #56	; 0x38
 802c426:	4628      	mov	r0, r5
 802c428:	f7e1 f916 	bl	800d658 <lv_draw_label>
 802c42c:	e5d9      	b.n	802bfe2 <lv_textarea_event+0x12>
 802c42e:	bf00      	nop

0802c430 <__errno>:
 802c430:	4b01      	ldr	r3, [pc, #4]	; (802c438 <__errno+0x8>)
 802c432:	6818      	ldr	r0, [r3, #0]
 802c434:	4770      	bx	lr
 802c436:	bf00      	nop
 802c438:	2000078c 	.word	0x2000078c

0802c43c <__libc_init_array>:
 802c43c:	b570      	push	{r4, r5, r6, lr}
 802c43e:	2600      	movs	r6, #0
 802c440:	4d0c      	ldr	r5, [pc, #48]	; (802c474 <__libc_init_array+0x38>)
 802c442:	4c0d      	ldr	r4, [pc, #52]	; (802c478 <__libc_init_array+0x3c>)
 802c444:	1b64      	subs	r4, r4, r5
 802c446:	10a4      	asrs	r4, r4, #2
 802c448:	42a6      	cmp	r6, r4
 802c44a:	d109      	bne.n	802c460 <__libc_init_array+0x24>
 802c44c:	f000 fcb8 	bl	802cdc0 <_init>
 802c450:	2600      	movs	r6, #0
 802c452:	4d0a      	ldr	r5, [pc, #40]	; (802c47c <__libc_init_array+0x40>)
 802c454:	4c0a      	ldr	r4, [pc, #40]	; (802c480 <__libc_init_array+0x44>)
 802c456:	1b64      	subs	r4, r4, r5
 802c458:	10a4      	asrs	r4, r4, #2
 802c45a:	42a6      	cmp	r6, r4
 802c45c:	d105      	bne.n	802c46a <__libc_init_array+0x2e>
 802c45e:	bd70      	pop	{r4, r5, r6, pc}
 802c460:	f855 3b04 	ldr.w	r3, [r5], #4
 802c464:	4798      	blx	r3
 802c466:	3601      	adds	r6, #1
 802c468:	e7ee      	b.n	802c448 <__libc_init_array+0xc>
 802c46a:	f855 3b04 	ldr.w	r3, [r5], #4
 802c46e:	4798      	blx	r3
 802c470:	3601      	adds	r6, #1
 802c472:	e7f2      	b.n	802c45a <__libc_init_array+0x1e>
 802c474:	080331c8 	.word	0x080331c8
 802c478:	080331c8 	.word	0x080331c8
 802c47c:	080331c8 	.word	0x080331c8
 802c480:	080331cc 	.word	0x080331cc

0802c484 <memcpy>:
 802c484:	440a      	add	r2, r1
 802c486:	4291      	cmp	r1, r2
 802c488:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802c48c:	d100      	bne.n	802c490 <memcpy+0xc>
 802c48e:	4770      	bx	lr
 802c490:	b510      	push	{r4, lr}
 802c492:	f811 4b01 	ldrb.w	r4, [r1], #1
 802c496:	4291      	cmp	r1, r2
 802c498:	f803 4f01 	strb.w	r4, [r3, #1]!
 802c49c:	d1f9      	bne.n	802c492 <memcpy+0xe>
 802c49e:	bd10      	pop	{r4, pc}

0802c4a0 <memmove>:
 802c4a0:	4288      	cmp	r0, r1
 802c4a2:	b510      	push	{r4, lr}
 802c4a4:	eb01 0402 	add.w	r4, r1, r2
 802c4a8:	d902      	bls.n	802c4b0 <memmove+0x10>
 802c4aa:	4284      	cmp	r4, r0
 802c4ac:	4623      	mov	r3, r4
 802c4ae:	d807      	bhi.n	802c4c0 <memmove+0x20>
 802c4b0:	1e43      	subs	r3, r0, #1
 802c4b2:	42a1      	cmp	r1, r4
 802c4b4:	d008      	beq.n	802c4c8 <memmove+0x28>
 802c4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c4be:	e7f8      	b.n	802c4b2 <memmove+0x12>
 802c4c0:	4601      	mov	r1, r0
 802c4c2:	4402      	add	r2, r0
 802c4c4:	428a      	cmp	r2, r1
 802c4c6:	d100      	bne.n	802c4ca <memmove+0x2a>
 802c4c8:	bd10      	pop	{r4, pc}
 802c4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802c4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802c4d2:	e7f7      	b.n	802c4c4 <memmove+0x24>

0802c4d4 <memset>:
 802c4d4:	4603      	mov	r3, r0
 802c4d6:	4402      	add	r2, r0
 802c4d8:	4293      	cmp	r3, r2
 802c4da:	d100      	bne.n	802c4de <memset+0xa>
 802c4dc:	4770      	bx	lr
 802c4de:	f803 1b01 	strb.w	r1, [r3], #1
 802c4e2:	e7f9      	b.n	802c4d8 <memset+0x4>

0802c4e4 <_printf_common>:
 802c4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c4e8:	4616      	mov	r6, r2
 802c4ea:	4699      	mov	r9, r3
 802c4ec:	688a      	ldr	r2, [r1, #8]
 802c4ee:	690b      	ldr	r3, [r1, #16]
 802c4f0:	4607      	mov	r7, r0
 802c4f2:	4293      	cmp	r3, r2
 802c4f4:	bfb8      	it	lt
 802c4f6:	4613      	movlt	r3, r2
 802c4f8:	6033      	str	r3, [r6, #0]
 802c4fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802c4fe:	460c      	mov	r4, r1
 802c500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802c504:	b10a      	cbz	r2, 802c50a <_printf_common+0x26>
 802c506:	3301      	adds	r3, #1
 802c508:	6033      	str	r3, [r6, #0]
 802c50a:	6823      	ldr	r3, [r4, #0]
 802c50c:	0699      	lsls	r1, r3, #26
 802c50e:	bf42      	ittt	mi
 802c510:	6833      	ldrmi	r3, [r6, #0]
 802c512:	3302      	addmi	r3, #2
 802c514:	6033      	strmi	r3, [r6, #0]
 802c516:	6825      	ldr	r5, [r4, #0]
 802c518:	f015 0506 	ands.w	r5, r5, #6
 802c51c:	d106      	bne.n	802c52c <_printf_common+0x48>
 802c51e:	f104 0a19 	add.w	sl, r4, #25
 802c522:	68e3      	ldr	r3, [r4, #12]
 802c524:	6832      	ldr	r2, [r6, #0]
 802c526:	1a9b      	subs	r3, r3, r2
 802c528:	42ab      	cmp	r3, r5
 802c52a:	dc28      	bgt.n	802c57e <_printf_common+0x9a>
 802c52c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802c530:	1e13      	subs	r3, r2, #0
 802c532:	6822      	ldr	r2, [r4, #0]
 802c534:	bf18      	it	ne
 802c536:	2301      	movne	r3, #1
 802c538:	0692      	lsls	r2, r2, #26
 802c53a:	d42d      	bmi.n	802c598 <_printf_common+0xb4>
 802c53c:	4649      	mov	r1, r9
 802c53e:	4638      	mov	r0, r7
 802c540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802c544:	47c0      	blx	r8
 802c546:	3001      	adds	r0, #1
 802c548:	d020      	beq.n	802c58c <_printf_common+0xa8>
 802c54a:	6823      	ldr	r3, [r4, #0]
 802c54c:	68e5      	ldr	r5, [r4, #12]
 802c54e:	f003 0306 	and.w	r3, r3, #6
 802c552:	2b04      	cmp	r3, #4
 802c554:	bf18      	it	ne
 802c556:	2500      	movne	r5, #0
 802c558:	6832      	ldr	r2, [r6, #0]
 802c55a:	f04f 0600 	mov.w	r6, #0
 802c55e:	68a3      	ldr	r3, [r4, #8]
 802c560:	bf08      	it	eq
 802c562:	1aad      	subeq	r5, r5, r2
 802c564:	6922      	ldr	r2, [r4, #16]
 802c566:	bf08      	it	eq
 802c568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802c56c:	4293      	cmp	r3, r2
 802c56e:	bfc4      	itt	gt
 802c570:	1a9b      	subgt	r3, r3, r2
 802c572:	18ed      	addgt	r5, r5, r3
 802c574:	341a      	adds	r4, #26
 802c576:	42b5      	cmp	r5, r6
 802c578:	d11a      	bne.n	802c5b0 <_printf_common+0xcc>
 802c57a:	2000      	movs	r0, #0
 802c57c:	e008      	b.n	802c590 <_printf_common+0xac>
 802c57e:	2301      	movs	r3, #1
 802c580:	4652      	mov	r2, sl
 802c582:	4649      	mov	r1, r9
 802c584:	4638      	mov	r0, r7
 802c586:	47c0      	blx	r8
 802c588:	3001      	adds	r0, #1
 802c58a:	d103      	bne.n	802c594 <_printf_common+0xb0>
 802c58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c594:	3501      	adds	r5, #1
 802c596:	e7c4      	b.n	802c522 <_printf_common+0x3e>
 802c598:	2030      	movs	r0, #48	; 0x30
 802c59a:	18e1      	adds	r1, r4, r3
 802c59c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802c5a0:	1c5a      	adds	r2, r3, #1
 802c5a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802c5a6:	4422      	add	r2, r4
 802c5a8:	3302      	adds	r3, #2
 802c5aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802c5ae:	e7c5      	b.n	802c53c <_printf_common+0x58>
 802c5b0:	2301      	movs	r3, #1
 802c5b2:	4622      	mov	r2, r4
 802c5b4:	4649      	mov	r1, r9
 802c5b6:	4638      	mov	r0, r7
 802c5b8:	47c0      	blx	r8
 802c5ba:	3001      	adds	r0, #1
 802c5bc:	d0e6      	beq.n	802c58c <_printf_common+0xa8>
 802c5be:	3601      	adds	r6, #1
 802c5c0:	e7d9      	b.n	802c576 <_printf_common+0x92>
	...

0802c5c4 <_printf_i>:
 802c5c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c5c8:	7e0f      	ldrb	r7, [r1, #24]
 802c5ca:	4691      	mov	r9, r2
 802c5cc:	2f78      	cmp	r7, #120	; 0x78
 802c5ce:	4680      	mov	r8, r0
 802c5d0:	460c      	mov	r4, r1
 802c5d2:	469a      	mov	sl, r3
 802c5d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802c5d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802c5da:	d807      	bhi.n	802c5ec <_printf_i+0x28>
 802c5dc:	2f62      	cmp	r7, #98	; 0x62
 802c5de:	d80a      	bhi.n	802c5f6 <_printf_i+0x32>
 802c5e0:	2f00      	cmp	r7, #0
 802c5e2:	f000 80d9 	beq.w	802c798 <_printf_i+0x1d4>
 802c5e6:	2f58      	cmp	r7, #88	; 0x58
 802c5e8:	f000 80a4 	beq.w	802c734 <_printf_i+0x170>
 802c5ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c5f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802c5f4:	e03a      	b.n	802c66c <_printf_i+0xa8>
 802c5f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802c5fa:	2b15      	cmp	r3, #21
 802c5fc:	d8f6      	bhi.n	802c5ec <_printf_i+0x28>
 802c5fe:	a101      	add	r1, pc, #4	; (adr r1, 802c604 <_printf_i+0x40>)
 802c600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802c604:	0802c65d 	.word	0x0802c65d
 802c608:	0802c671 	.word	0x0802c671
 802c60c:	0802c5ed 	.word	0x0802c5ed
 802c610:	0802c5ed 	.word	0x0802c5ed
 802c614:	0802c5ed 	.word	0x0802c5ed
 802c618:	0802c5ed 	.word	0x0802c5ed
 802c61c:	0802c671 	.word	0x0802c671
 802c620:	0802c5ed 	.word	0x0802c5ed
 802c624:	0802c5ed 	.word	0x0802c5ed
 802c628:	0802c5ed 	.word	0x0802c5ed
 802c62c:	0802c5ed 	.word	0x0802c5ed
 802c630:	0802c77f 	.word	0x0802c77f
 802c634:	0802c6a1 	.word	0x0802c6a1
 802c638:	0802c761 	.word	0x0802c761
 802c63c:	0802c5ed 	.word	0x0802c5ed
 802c640:	0802c5ed 	.word	0x0802c5ed
 802c644:	0802c7a1 	.word	0x0802c7a1
 802c648:	0802c5ed 	.word	0x0802c5ed
 802c64c:	0802c6a1 	.word	0x0802c6a1
 802c650:	0802c5ed 	.word	0x0802c5ed
 802c654:	0802c5ed 	.word	0x0802c5ed
 802c658:	0802c769 	.word	0x0802c769
 802c65c:	682b      	ldr	r3, [r5, #0]
 802c65e:	1d1a      	adds	r2, r3, #4
 802c660:	681b      	ldr	r3, [r3, #0]
 802c662:	602a      	str	r2, [r5, #0]
 802c664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802c668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802c66c:	2301      	movs	r3, #1
 802c66e:	e0a4      	b.n	802c7ba <_printf_i+0x1f6>
 802c670:	6820      	ldr	r0, [r4, #0]
 802c672:	6829      	ldr	r1, [r5, #0]
 802c674:	0606      	lsls	r6, r0, #24
 802c676:	f101 0304 	add.w	r3, r1, #4
 802c67a:	d50a      	bpl.n	802c692 <_printf_i+0xce>
 802c67c:	680e      	ldr	r6, [r1, #0]
 802c67e:	602b      	str	r3, [r5, #0]
 802c680:	2e00      	cmp	r6, #0
 802c682:	da03      	bge.n	802c68c <_printf_i+0xc8>
 802c684:	232d      	movs	r3, #45	; 0x2d
 802c686:	4276      	negs	r6, r6
 802c688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c68c:	230a      	movs	r3, #10
 802c68e:	485e      	ldr	r0, [pc, #376]	; (802c808 <_printf_i+0x244>)
 802c690:	e019      	b.n	802c6c6 <_printf_i+0x102>
 802c692:	680e      	ldr	r6, [r1, #0]
 802c694:	f010 0f40 	tst.w	r0, #64	; 0x40
 802c698:	602b      	str	r3, [r5, #0]
 802c69a:	bf18      	it	ne
 802c69c:	b236      	sxthne	r6, r6
 802c69e:	e7ef      	b.n	802c680 <_printf_i+0xbc>
 802c6a0:	682b      	ldr	r3, [r5, #0]
 802c6a2:	6820      	ldr	r0, [r4, #0]
 802c6a4:	1d19      	adds	r1, r3, #4
 802c6a6:	6029      	str	r1, [r5, #0]
 802c6a8:	0601      	lsls	r1, r0, #24
 802c6aa:	d501      	bpl.n	802c6b0 <_printf_i+0xec>
 802c6ac:	681e      	ldr	r6, [r3, #0]
 802c6ae:	e002      	b.n	802c6b6 <_printf_i+0xf2>
 802c6b0:	0646      	lsls	r6, r0, #25
 802c6b2:	d5fb      	bpl.n	802c6ac <_printf_i+0xe8>
 802c6b4:	881e      	ldrh	r6, [r3, #0]
 802c6b6:	2f6f      	cmp	r7, #111	; 0x6f
 802c6b8:	bf0c      	ite	eq
 802c6ba:	2308      	moveq	r3, #8
 802c6bc:	230a      	movne	r3, #10
 802c6be:	4852      	ldr	r0, [pc, #328]	; (802c808 <_printf_i+0x244>)
 802c6c0:	2100      	movs	r1, #0
 802c6c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802c6c6:	6865      	ldr	r5, [r4, #4]
 802c6c8:	2d00      	cmp	r5, #0
 802c6ca:	bfa8      	it	ge
 802c6cc:	6821      	ldrge	r1, [r4, #0]
 802c6ce:	60a5      	str	r5, [r4, #8]
 802c6d0:	bfa4      	itt	ge
 802c6d2:	f021 0104 	bicge.w	r1, r1, #4
 802c6d6:	6021      	strge	r1, [r4, #0]
 802c6d8:	b90e      	cbnz	r6, 802c6de <_printf_i+0x11a>
 802c6da:	2d00      	cmp	r5, #0
 802c6dc:	d04d      	beq.n	802c77a <_printf_i+0x1b6>
 802c6de:	4615      	mov	r5, r2
 802c6e0:	fbb6 f1f3 	udiv	r1, r6, r3
 802c6e4:	fb03 6711 	mls	r7, r3, r1, r6
 802c6e8:	5dc7      	ldrb	r7, [r0, r7]
 802c6ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802c6ee:	4637      	mov	r7, r6
 802c6f0:	42bb      	cmp	r3, r7
 802c6f2:	460e      	mov	r6, r1
 802c6f4:	d9f4      	bls.n	802c6e0 <_printf_i+0x11c>
 802c6f6:	2b08      	cmp	r3, #8
 802c6f8:	d10b      	bne.n	802c712 <_printf_i+0x14e>
 802c6fa:	6823      	ldr	r3, [r4, #0]
 802c6fc:	07de      	lsls	r6, r3, #31
 802c6fe:	d508      	bpl.n	802c712 <_printf_i+0x14e>
 802c700:	6923      	ldr	r3, [r4, #16]
 802c702:	6861      	ldr	r1, [r4, #4]
 802c704:	4299      	cmp	r1, r3
 802c706:	bfde      	ittt	le
 802c708:	2330      	movle	r3, #48	; 0x30
 802c70a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802c70e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802c712:	1b52      	subs	r2, r2, r5
 802c714:	6122      	str	r2, [r4, #16]
 802c716:	464b      	mov	r3, r9
 802c718:	4621      	mov	r1, r4
 802c71a:	4640      	mov	r0, r8
 802c71c:	f8cd a000 	str.w	sl, [sp]
 802c720:	aa03      	add	r2, sp, #12
 802c722:	f7ff fedf 	bl	802c4e4 <_printf_common>
 802c726:	3001      	adds	r0, #1
 802c728:	d14c      	bne.n	802c7c4 <_printf_i+0x200>
 802c72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802c72e:	b004      	add	sp, #16
 802c730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c734:	4834      	ldr	r0, [pc, #208]	; (802c808 <_printf_i+0x244>)
 802c736:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802c73a:	6829      	ldr	r1, [r5, #0]
 802c73c:	6823      	ldr	r3, [r4, #0]
 802c73e:	f851 6b04 	ldr.w	r6, [r1], #4
 802c742:	6029      	str	r1, [r5, #0]
 802c744:	061d      	lsls	r5, r3, #24
 802c746:	d514      	bpl.n	802c772 <_printf_i+0x1ae>
 802c748:	07df      	lsls	r7, r3, #31
 802c74a:	bf44      	itt	mi
 802c74c:	f043 0320 	orrmi.w	r3, r3, #32
 802c750:	6023      	strmi	r3, [r4, #0]
 802c752:	b91e      	cbnz	r6, 802c75c <_printf_i+0x198>
 802c754:	6823      	ldr	r3, [r4, #0]
 802c756:	f023 0320 	bic.w	r3, r3, #32
 802c75a:	6023      	str	r3, [r4, #0]
 802c75c:	2310      	movs	r3, #16
 802c75e:	e7af      	b.n	802c6c0 <_printf_i+0xfc>
 802c760:	6823      	ldr	r3, [r4, #0]
 802c762:	f043 0320 	orr.w	r3, r3, #32
 802c766:	6023      	str	r3, [r4, #0]
 802c768:	2378      	movs	r3, #120	; 0x78
 802c76a:	4828      	ldr	r0, [pc, #160]	; (802c80c <_printf_i+0x248>)
 802c76c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802c770:	e7e3      	b.n	802c73a <_printf_i+0x176>
 802c772:	0659      	lsls	r1, r3, #25
 802c774:	bf48      	it	mi
 802c776:	b2b6      	uxthmi	r6, r6
 802c778:	e7e6      	b.n	802c748 <_printf_i+0x184>
 802c77a:	4615      	mov	r5, r2
 802c77c:	e7bb      	b.n	802c6f6 <_printf_i+0x132>
 802c77e:	682b      	ldr	r3, [r5, #0]
 802c780:	6826      	ldr	r6, [r4, #0]
 802c782:	1d18      	adds	r0, r3, #4
 802c784:	6961      	ldr	r1, [r4, #20]
 802c786:	6028      	str	r0, [r5, #0]
 802c788:	0635      	lsls	r5, r6, #24
 802c78a:	681b      	ldr	r3, [r3, #0]
 802c78c:	d501      	bpl.n	802c792 <_printf_i+0x1ce>
 802c78e:	6019      	str	r1, [r3, #0]
 802c790:	e002      	b.n	802c798 <_printf_i+0x1d4>
 802c792:	0670      	lsls	r0, r6, #25
 802c794:	d5fb      	bpl.n	802c78e <_printf_i+0x1ca>
 802c796:	8019      	strh	r1, [r3, #0]
 802c798:	2300      	movs	r3, #0
 802c79a:	4615      	mov	r5, r2
 802c79c:	6123      	str	r3, [r4, #16]
 802c79e:	e7ba      	b.n	802c716 <_printf_i+0x152>
 802c7a0:	682b      	ldr	r3, [r5, #0]
 802c7a2:	2100      	movs	r1, #0
 802c7a4:	1d1a      	adds	r2, r3, #4
 802c7a6:	602a      	str	r2, [r5, #0]
 802c7a8:	681d      	ldr	r5, [r3, #0]
 802c7aa:	6862      	ldr	r2, [r4, #4]
 802c7ac:	4628      	mov	r0, r5
 802c7ae:	f000 f86f 	bl	802c890 <memchr>
 802c7b2:	b108      	cbz	r0, 802c7b8 <_printf_i+0x1f4>
 802c7b4:	1b40      	subs	r0, r0, r5
 802c7b6:	6060      	str	r0, [r4, #4]
 802c7b8:	6863      	ldr	r3, [r4, #4]
 802c7ba:	6123      	str	r3, [r4, #16]
 802c7bc:	2300      	movs	r3, #0
 802c7be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c7c2:	e7a8      	b.n	802c716 <_printf_i+0x152>
 802c7c4:	462a      	mov	r2, r5
 802c7c6:	4649      	mov	r1, r9
 802c7c8:	4640      	mov	r0, r8
 802c7ca:	6923      	ldr	r3, [r4, #16]
 802c7cc:	47d0      	blx	sl
 802c7ce:	3001      	adds	r0, #1
 802c7d0:	d0ab      	beq.n	802c72a <_printf_i+0x166>
 802c7d2:	6823      	ldr	r3, [r4, #0]
 802c7d4:	079b      	lsls	r3, r3, #30
 802c7d6:	d413      	bmi.n	802c800 <_printf_i+0x23c>
 802c7d8:	68e0      	ldr	r0, [r4, #12]
 802c7da:	9b03      	ldr	r3, [sp, #12]
 802c7dc:	4298      	cmp	r0, r3
 802c7de:	bfb8      	it	lt
 802c7e0:	4618      	movlt	r0, r3
 802c7e2:	e7a4      	b.n	802c72e <_printf_i+0x16a>
 802c7e4:	2301      	movs	r3, #1
 802c7e6:	4632      	mov	r2, r6
 802c7e8:	4649      	mov	r1, r9
 802c7ea:	4640      	mov	r0, r8
 802c7ec:	47d0      	blx	sl
 802c7ee:	3001      	adds	r0, #1
 802c7f0:	d09b      	beq.n	802c72a <_printf_i+0x166>
 802c7f2:	3501      	adds	r5, #1
 802c7f4:	68e3      	ldr	r3, [r4, #12]
 802c7f6:	9903      	ldr	r1, [sp, #12]
 802c7f8:	1a5b      	subs	r3, r3, r1
 802c7fa:	42ab      	cmp	r3, r5
 802c7fc:	dcf2      	bgt.n	802c7e4 <_printf_i+0x220>
 802c7fe:	e7eb      	b.n	802c7d8 <_printf_i+0x214>
 802c800:	2500      	movs	r5, #0
 802c802:	f104 0619 	add.w	r6, r4, #25
 802c806:	e7f5      	b.n	802c7f4 <_printf_i+0x230>
 802c808:	08033128 	.word	0x08033128
 802c80c:	08033139 	.word	0x08033139

0802c810 <siprintf>:
 802c810:	b40e      	push	{r1, r2, r3}
 802c812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802c816:	b500      	push	{lr}
 802c818:	b09c      	sub	sp, #112	; 0x70
 802c81a:	ab1d      	add	r3, sp, #116	; 0x74
 802c81c:	9002      	str	r0, [sp, #8]
 802c81e:	9006      	str	r0, [sp, #24]
 802c820:	9107      	str	r1, [sp, #28]
 802c822:	9104      	str	r1, [sp, #16]
 802c824:	4808      	ldr	r0, [pc, #32]	; (802c848 <siprintf+0x38>)
 802c826:	4909      	ldr	r1, [pc, #36]	; (802c84c <siprintf+0x3c>)
 802c828:	f853 2b04 	ldr.w	r2, [r3], #4
 802c82c:	9105      	str	r1, [sp, #20]
 802c82e:	6800      	ldr	r0, [r0, #0]
 802c830:	a902      	add	r1, sp, #8
 802c832:	9301      	str	r3, [sp, #4]
 802c834:	f000 f9a0 	bl	802cb78 <_svfiprintf_r>
 802c838:	2200      	movs	r2, #0
 802c83a:	9b02      	ldr	r3, [sp, #8]
 802c83c:	701a      	strb	r2, [r3, #0]
 802c83e:	b01c      	add	sp, #112	; 0x70
 802c840:	f85d eb04 	ldr.w	lr, [sp], #4
 802c844:	b003      	add	sp, #12
 802c846:	4770      	bx	lr
 802c848:	2000078c 	.word	0x2000078c
 802c84c:	ffff0208 	.word	0xffff0208

0802c850 <strcpy>:
 802c850:	4603      	mov	r3, r0
 802c852:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c856:	f803 2b01 	strb.w	r2, [r3], #1
 802c85a:	2a00      	cmp	r2, #0
 802c85c:	d1f9      	bne.n	802c852 <strcpy+0x2>
 802c85e:	4770      	bx	lr

0802c860 <strstr>:
 802c860:	780a      	ldrb	r2, [r1, #0]
 802c862:	b570      	push	{r4, r5, r6, lr}
 802c864:	b96a      	cbnz	r2, 802c882 <strstr+0x22>
 802c866:	bd70      	pop	{r4, r5, r6, pc}
 802c868:	429a      	cmp	r2, r3
 802c86a:	d109      	bne.n	802c880 <strstr+0x20>
 802c86c:	460c      	mov	r4, r1
 802c86e:	4605      	mov	r5, r0
 802c870:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802c874:	2b00      	cmp	r3, #0
 802c876:	d0f6      	beq.n	802c866 <strstr+0x6>
 802c878:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802c87c:	429e      	cmp	r6, r3
 802c87e:	d0f7      	beq.n	802c870 <strstr+0x10>
 802c880:	3001      	adds	r0, #1
 802c882:	7803      	ldrb	r3, [r0, #0]
 802c884:	2b00      	cmp	r3, #0
 802c886:	d1ef      	bne.n	802c868 <strstr+0x8>
 802c888:	4618      	mov	r0, r3
 802c88a:	e7ec      	b.n	802c866 <strstr+0x6>

0802c88c <__retarget_lock_acquire_recursive>:
 802c88c:	4770      	bx	lr

0802c88e <__retarget_lock_release_recursive>:
 802c88e:	4770      	bx	lr

0802c890 <memchr>:
 802c890:	4603      	mov	r3, r0
 802c892:	b510      	push	{r4, lr}
 802c894:	b2c9      	uxtb	r1, r1
 802c896:	4402      	add	r2, r0
 802c898:	4293      	cmp	r3, r2
 802c89a:	4618      	mov	r0, r3
 802c89c:	d101      	bne.n	802c8a2 <memchr+0x12>
 802c89e:	2000      	movs	r0, #0
 802c8a0:	e003      	b.n	802c8aa <memchr+0x1a>
 802c8a2:	7804      	ldrb	r4, [r0, #0]
 802c8a4:	3301      	adds	r3, #1
 802c8a6:	428c      	cmp	r4, r1
 802c8a8:	d1f6      	bne.n	802c898 <memchr+0x8>
 802c8aa:	bd10      	pop	{r4, pc}

0802c8ac <_free_r>:
 802c8ac:	b538      	push	{r3, r4, r5, lr}
 802c8ae:	4605      	mov	r5, r0
 802c8b0:	2900      	cmp	r1, #0
 802c8b2:	d040      	beq.n	802c936 <_free_r+0x8a>
 802c8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c8b8:	1f0c      	subs	r4, r1, #4
 802c8ba:	2b00      	cmp	r3, #0
 802c8bc:	bfb8      	it	lt
 802c8be:	18e4      	addlt	r4, r4, r3
 802c8c0:	f000 fa6a 	bl	802cd98 <__malloc_lock>
 802c8c4:	4a1c      	ldr	r2, [pc, #112]	; (802c938 <_free_r+0x8c>)
 802c8c6:	6813      	ldr	r3, [r2, #0]
 802c8c8:	b933      	cbnz	r3, 802c8d8 <_free_r+0x2c>
 802c8ca:	6063      	str	r3, [r4, #4]
 802c8cc:	6014      	str	r4, [r2, #0]
 802c8ce:	4628      	mov	r0, r5
 802c8d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c8d4:	f000 ba66 	b.w	802cda4 <__malloc_unlock>
 802c8d8:	42a3      	cmp	r3, r4
 802c8da:	d908      	bls.n	802c8ee <_free_r+0x42>
 802c8dc:	6820      	ldr	r0, [r4, #0]
 802c8de:	1821      	adds	r1, r4, r0
 802c8e0:	428b      	cmp	r3, r1
 802c8e2:	bf01      	itttt	eq
 802c8e4:	6819      	ldreq	r1, [r3, #0]
 802c8e6:	685b      	ldreq	r3, [r3, #4]
 802c8e8:	1809      	addeq	r1, r1, r0
 802c8ea:	6021      	streq	r1, [r4, #0]
 802c8ec:	e7ed      	b.n	802c8ca <_free_r+0x1e>
 802c8ee:	461a      	mov	r2, r3
 802c8f0:	685b      	ldr	r3, [r3, #4]
 802c8f2:	b10b      	cbz	r3, 802c8f8 <_free_r+0x4c>
 802c8f4:	42a3      	cmp	r3, r4
 802c8f6:	d9fa      	bls.n	802c8ee <_free_r+0x42>
 802c8f8:	6811      	ldr	r1, [r2, #0]
 802c8fa:	1850      	adds	r0, r2, r1
 802c8fc:	42a0      	cmp	r0, r4
 802c8fe:	d10b      	bne.n	802c918 <_free_r+0x6c>
 802c900:	6820      	ldr	r0, [r4, #0]
 802c902:	4401      	add	r1, r0
 802c904:	1850      	adds	r0, r2, r1
 802c906:	4283      	cmp	r3, r0
 802c908:	6011      	str	r1, [r2, #0]
 802c90a:	d1e0      	bne.n	802c8ce <_free_r+0x22>
 802c90c:	6818      	ldr	r0, [r3, #0]
 802c90e:	685b      	ldr	r3, [r3, #4]
 802c910:	4401      	add	r1, r0
 802c912:	6011      	str	r1, [r2, #0]
 802c914:	6053      	str	r3, [r2, #4]
 802c916:	e7da      	b.n	802c8ce <_free_r+0x22>
 802c918:	d902      	bls.n	802c920 <_free_r+0x74>
 802c91a:	230c      	movs	r3, #12
 802c91c:	602b      	str	r3, [r5, #0]
 802c91e:	e7d6      	b.n	802c8ce <_free_r+0x22>
 802c920:	6820      	ldr	r0, [r4, #0]
 802c922:	1821      	adds	r1, r4, r0
 802c924:	428b      	cmp	r3, r1
 802c926:	bf01      	itttt	eq
 802c928:	6819      	ldreq	r1, [r3, #0]
 802c92a:	685b      	ldreq	r3, [r3, #4]
 802c92c:	1809      	addeq	r1, r1, r0
 802c92e:	6021      	streq	r1, [r4, #0]
 802c930:	6063      	str	r3, [r4, #4]
 802c932:	6054      	str	r4, [r2, #4]
 802c934:	e7cb      	b.n	802c8ce <_free_r+0x22>
 802c936:	bd38      	pop	{r3, r4, r5, pc}
 802c938:	2000c1a4 	.word	0x2000c1a4

0802c93c <sbrk_aligned>:
 802c93c:	b570      	push	{r4, r5, r6, lr}
 802c93e:	4e0e      	ldr	r6, [pc, #56]	; (802c978 <sbrk_aligned+0x3c>)
 802c940:	460c      	mov	r4, r1
 802c942:	6831      	ldr	r1, [r6, #0]
 802c944:	4605      	mov	r5, r0
 802c946:	b911      	cbnz	r1, 802c94e <sbrk_aligned+0x12>
 802c948:	f000 fa16 	bl	802cd78 <_sbrk_r>
 802c94c:	6030      	str	r0, [r6, #0]
 802c94e:	4621      	mov	r1, r4
 802c950:	4628      	mov	r0, r5
 802c952:	f000 fa11 	bl	802cd78 <_sbrk_r>
 802c956:	1c43      	adds	r3, r0, #1
 802c958:	d00a      	beq.n	802c970 <sbrk_aligned+0x34>
 802c95a:	1cc4      	adds	r4, r0, #3
 802c95c:	f024 0403 	bic.w	r4, r4, #3
 802c960:	42a0      	cmp	r0, r4
 802c962:	d007      	beq.n	802c974 <sbrk_aligned+0x38>
 802c964:	1a21      	subs	r1, r4, r0
 802c966:	4628      	mov	r0, r5
 802c968:	f000 fa06 	bl	802cd78 <_sbrk_r>
 802c96c:	3001      	adds	r0, #1
 802c96e:	d101      	bne.n	802c974 <sbrk_aligned+0x38>
 802c970:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 802c974:	4620      	mov	r0, r4
 802c976:	bd70      	pop	{r4, r5, r6, pc}
 802c978:	2000c1a8 	.word	0x2000c1a8

0802c97c <_malloc_r>:
 802c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c980:	1ccd      	adds	r5, r1, #3
 802c982:	f025 0503 	bic.w	r5, r5, #3
 802c986:	3508      	adds	r5, #8
 802c988:	2d0c      	cmp	r5, #12
 802c98a:	bf38      	it	cc
 802c98c:	250c      	movcc	r5, #12
 802c98e:	2d00      	cmp	r5, #0
 802c990:	4607      	mov	r7, r0
 802c992:	db01      	blt.n	802c998 <_malloc_r+0x1c>
 802c994:	42a9      	cmp	r1, r5
 802c996:	d905      	bls.n	802c9a4 <_malloc_r+0x28>
 802c998:	230c      	movs	r3, #12
 802c99a:	2600      	movs	r6, #0
 802c99c:	603b      	str	r3, [r7, #0]
 802c99e:	4630      	mov	r0, r6
 802c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c9a4:	4e2e      	ldr	r6, [pc, #184]	; (802ca60 <_malloc_r+0xe4>)
 802c9a6:	f000 f9f7 	bl	802cd98 <__malloc_lock>
 802c9aa:	6833      	ldr	r3, [r6, #0]
 802c9ac:	461c      	mov	r4, r3
 802c9ae:	bb34      	cbnz	r4, 802c9fe <_malloc_r+0x82>
 802c9b0:	4629      	mov	r1, r5
 802c9b2:	4638      	mov	r0, r7
 802c9b4:	f7ff ffc2 	bl	802c93c <sbrk_aligned>
 802c9b8:	1c43      	adds	r3, r0, #1
 802c9ba:	4604      	mov	r4, r0
 802c9bc:	d14d      	bne.n	802ca5a <_malloc_r+0xde>
 802c9be:	6834      	ldr	r4, [r6, #0]
 802c9c0:	4626      	mov	r6, r4
 802c9c2:	2e00      	cmp	r6, #0
 802c9c4:	d140      	bne.n	802ca48 <_malloc_r+0xcc>
 802c9c6:	6823      	ldr	r3, [r4, #0]
 802c9c8:	4631      	mov	r1, r6
 802c9ca:	4638      	mov	r0, r7
 802c9cc:	eb04 0803 	add.w	r8, r4, r3
 802c9d0:	f000 f9d2 	bl	802cd78 <_sbrk_r>
 802c9d4:	4580      	cmp	r8, r0
 802c9d6:	d13a      	bne.n	802ca4e <_malloc_r+0xd2>
 802c9d8:	6821      	ldr	r1, [r4, #0]
 802c9da:	3503      	adds	r5, #3
 802c9dc:	1a6d      	subs	r5, r5, r1
 802c9de:	f025 0503 	bic.w	r5, r5, #3
 802c9e2:	3508      	adds	r5, #8
 802c9e4:	2d0c      	cmp	r5, #12
 802c9e6:	bf38      	it	cc
 802c9e8:	250c      	movcc	r5, #12
 802c9ea:	4638      	mov	r0, r7
 802c9ec:	4629      	mov	r1, r5
 802c9ee:	f7ff ffa5 	bl	802c93c <sbrk_aligned>
 802c9f2:	3001      	adds	r0, #1
 802c9f4:	d02b      	beq.n	802ca4e <_malloc_r+0xd2>
 802c9f6:	6823      	ldr	r3, [r4, #0]
 802c9f8:	442b      	add	r3, r5
 802c9fa:	6023      	str	r3, [r4, #0]
 802c9fc:	e00e      	b.n	802ca1c <_malloc_r+0xa0>
 802c9fe:	6822      	ldr	r2, [r4, #0]
 802ca00:	1b52      	subs	r2, r2, r5
 802ca02:	d41e      	bmi.n	802ca42 <_malloc_r+0xc6>
 802ca04:	2a0b      	cmp	r2, #11
 802ca06:	d916      	bls.n	802ca36 <_malloc_r+0xba>
 802ca08:	1961      	adds	r1, r4, r5
 802ca0a:	42a3      	cmp	r3, r4
 802ca0c:	6025      	str	r5, [r4, #0]
 802ca0e:	bf18      	it	ne
 802ca10:	6059      	strne	r1, [r3, #4]
 802ca12:	6863      	ldr	r3, [r4, #4]
 802ca14:	bf08      	it	eq
 802ca16:	6031      	streq	r1, [r6, #0]
 802ca18:	5162      	str	r2, [r4, r5]
 802ca1a:	604b      	str	r3, [r1, #4]
 802ca1c:	4638      	mov	r0, r7
 802ca1e:	f104 060b 	add.w	r6, r4, #11
 802ca22:	f000 f9bf 	bl	802cda4 <__malloc_unlock>
 802ca26:	f026 0607 	bic.w	r6, r6, #7
 802ca2a:	1d23      	adds	r3, r4, #4
 802ca2c:	1af2      	subs	r2, r6, r3
 802ca2e:	d0b6      	beq.n	802c99e <_malloc_r+0x22>
 802ca30:	1b9b      	subs	r3, r3, r6
 802ca32:	50a3      	str	r3, [r4, r2]
 802ca34:	e7b3      	b.n	802c99e <_malloc_r+0x22>
 802ca36:	6862      	ldr	r2, [r4, #4]
 802ca38:	42a3      	cmp	r3, r4
 802ca3a:	bf0c      	ite	eq
 802ca3c:	6032      	streq	r2, [r6, #0]
 802ca3e:	605a      	strne	r2, [r3, #4]
 802ca40:	e7ec      	b.n	802ca1c <_malloc_r+0xa0>
 802ca42:	4623      	mov	r3, r4
 802ca44:	6864      	ldr	r4, [r4, #4]
 802ca46:	e7b2      	b.n	802c9ae <_malloc_r+0x32>
 802ca48:	4634      	mov	r4, r6
 802ca4a:	6876      	ldr	r6, [r6, #4]
 802ca4c:	e7b9      	b.n	802c9c2 <_malloc_r+0x46>
 802ca4e:	230c      	movs	r3, #12
 802ca50:	4638      	mov	r0, r7
 802ca52:	603b      	str	r3, [r7, #0]
 802ca54:	f000 f9a6 	bl	802cda4 <__malloc_unlock>
 802ca58:	e7a1      	b.n	802c99e <_malloc_r+0x22>
 802ca5a:	6025      	str	r5, [r4, #0]
 802ca5c:	e7de      	b.n	802ca1c <_malloc_r+0xa0>
 802ca5e:	bf00      	nop
 802ca60:	2000c1a4 	.word	0x2000c1a4

0802ca64 <_realloc_r>:
 802ca64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca68:	4680      	mov	r8, r0
 802ca6a:	4614      	mov	r4, r2
 802ca6c:	460e      	mov	r6, r1
 802ca6e:	b921      	cbnz	r1, 802ca7a <_realloc_r+0x16>
 802ca70:	4611      	mov	r1, r2
 802ca72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ca76:	f7ff bf81 	b.w	802c97c <_malloc_r>
 802ca7a:	b92a      	cbnz	r2, 802ca88 <_realloc_r+0x24>
 802ca7c:	f7ff ff16 	bl	802c8ac <_free_r>
 802ca80:	4625      	mov	r5, r4
 802ca82:	4628      	mov	r0, r5
 802ca84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ca88:	f000 f992 	bl	802cdb0 <_malloc_usable_size_r>
 802ca8c:	4284      	cmp	r4, r0
 802ca8e:	4607      	mov	r7, r0
 802ca90:	d802      	bhi.n	802ca98 <_realloc_r+0x34>
 802ca92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802ca96:	d812      	bhi.n	802cabe <_realloc_r+0x5a>
 802ca98:	4621      	mov	r1, r4
 802ca9a:	4640      	mov	r0, r8
 802ca9c:	f7ff ff6e 	bl	802c97c <_malloc_r>
 802caa0:	4605      	mov	r5, r0
 802caa2:	2800      	cmp	r0, #0
 802caa4:	d0ed      	beq.n	802ca82 <_realloc_r+0x1e>
 802caa6:	42bc      	cmp	r4, r7
 802caa8:	4622      	mov	r2, r4
 802caaa:	4631      	mov	r1, r6
 802caac:	bf28      	it	cs
 802caae:	463a      	movcs	r2, r7
 802cab0:	f7ff fce8 	bl	802c484 <memcpy>
 802cab4:	4631      	mov	r1, r6
 802cab6:	4640      	mov	r0, r8
 802cab8:	f7ff fef8 	bl	802c8ac <_free_r>
 802cabc:	e7e1      	b.n	802ca82 <_realloc_r+0x1e>
 802cabe:	4635      	mov	r5, r6
 802cac0:	e7df      	b.n	802ca82 <_realloc_r+0x1e>

0802cac2 <__ssputs_r>:
 802cac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cac6:	688e      	ldr	r6, [r1, #8]
 802cac8:	4682      	mov	sl, r0
 802caca:	429e      	cmp	r6, r3
 802cacc:	460c      	mov	r4, r1
 802cace:	4690      	mov	r8, r2
 802cad0:	461f      	mov	r7, r3
 802cad2:	d838      	bhi.n	802cb46 <__ssputs_r+0x84>
 802cad4:	898a      	ldrh	r2, [r1, #12]
 802cad6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802cada:	d032      	beq.n	802cb42 <__ssputs_r+0x80>
 802cadc:	6825      	ldr	r5, [r4, #0]
 802cade:	6909      	ldr	r1, [r1, #16]
 802cae0:	3301      	adds	r3, #1
 802cae2:	eba5 0901 	sub.w	r9, r5, r1
 802cae6:	6965      	ldr	r5, [r4, #20]
 802cae8:	444b      	add	r3, r9
 802caea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802caee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802caf2:	106d      	asrs	r5, r5, #1
 802caf4:	429d      	cmp	r5, r3
 802caf6:	bf38      	it	cc
 802caf8:	461d      	movcc	r5, r3
 802cafa:	0553      	lsls	r3, r2, #21
 802cafc:	d531      	bpl.n	802cb62 <__ssputs_r+0xa0>
 802cafe:	4629      	mov	r1, r5
 802cb00:	f7ff ff3c 	bl	802c97c <_malloc_r>
 802cb04:	4606      	mov	r6, r0
 802cb06:	b950      	cbnz	r0, 802cb1e <__ssputs_r+0x5c>
 802cb08:	230c      	movs	r3, #12
 802cb0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802cb0e:	f8ca 3000 	str.w	r3, [sl]
 802cb12:	89a3      	ldrh	r3, [r4, #12]
 802cb14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802cb18:	81a3      	strh	r3, [r4, #12]
 802cb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cb1e:	464a      	mov	r2, r9
 802cb20:	6921      	ldr	r1, [r4, #16]
 802cb22:	f7ff fcaf 	bl	802c484 <memcpy>
 802cb26:	89a3      	ldrh	r3, [r4, #12]
 802cb28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802cb2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802cb30:	81a3      	strh	r3, [r4, #12]
 802cb32:	6126      	str	r6, [r4, #16]
 802cb34:	444e      	add	r6, r9
 802cb36:	6026      	str	r6, [r4, #0]
 802cb38:	463e      	mov	r6, r7
 802cb3a:	6165      	str	r5, [r4, #20]
 802cb3c:	eba5 0509 	sub.w	r5, r5, r9
 802cb40:	60a5      	str	r5, [r4, #8]
 802cb42:	42be      	cmp	r6, r7
 802cb44:	d900      	bls.n	802cb48 <__ssputs_r+0x86>
 802cb46:	463e      	mov	r6, r7
 802cb48:	4632      	mov	r2, r6
 802cb4a:	4641      	mov	r1, r8
 802cb4c:	6820      	ldr	r0, [r4, #0]
 802cb4e:	f7ff fca7 	bl	802c4a0 <memmove>
 802cb52:	68a3      	ldr	r3, [r4, #8]
 802cb54:	2000      	movs	r0, #0
 802cb56:	1b9b      	subs	r3, r3, r6
 802cb58:	60a3      	str	r3, [r4, #8]
 802cb5a:	6823      	ldr	r3, [r4, #0]
 802cb5c:	4433      	add	r3, r6
 802cb5e:	6023      	str	r3, [r4, #0]
 802cb60:	e7db      	b.n	802cb1a <__ssputs_r+0x58>
 802cb62:	462a      	mov	r2, r5
 802cb64:	f7ff ff7e 	bl	802ca64 <_realloc_r>
 802cb68:	4606      	mov	r6, r0
 802cb6a:	2800      	cmp	r0, #0
 802cb6c:	d1e1      	bne.n	802cb32 <__ssputs_r+0x70>
 802cb6e:	4650      	mov	r0, sl
 802cb70:	6921      	ldr	r1, [r4, #16]
 802cb72:	f7ff fe9b 	bl	802c8ac <_free_r>
 802cb76:	e7c7      	b.n	802cb08 <__ssputs_r+0x46>

0802cb78 <_svfiprintf_r>:
 802cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cb7c:	4698      	mov	r8, r3
 802cb7e:	898b      	ldrh	r3, [r1, #12]
 802cb80:	4607      	mov	r7, r0
 802cb82:	061b      	lsls	r3, r3, #24
 802cb84:	460d      	mov	r5, r1
 802cb86:	4614      	mov	r4, r2
 802cb88:	b09d      	sub	sp, #116	; 0x74
 802cb8a:	d50e      	bpl.n	802cbaa <_svfiprintf_r+0x32>
 802cb8c:	690b      	ldr	r3, [r1, #16]
 802cb8e:	b963      	cbnz	r3, 802cbaa <_svfiprintf_r+0x32>
 802cb90:	2140      	movs	r1, #64	; 0x40
 802cb92:	f7ff fef3 	bl	802c97c <_malloc_r>
 802cb96:	6028      	str	r0, [r5, #0]
 802cb98:	6128      	str	r0, [r5, #16]
 802cb9a:	b920      	cbnz	r0, 802cba6 <_svfiprintf_r+0x2e>
 802cb9c:	230c      	movs	r3, #12
 802cb9e:	603b      	str	r3, [r7, #0]
 802cba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802cba4:	e0d1      	b.n	802cd4a <_svfiprintf_r+0x1d2>
 802cba6:	2340      	movs	r3, #64	; 0x40
 802cba8:	616b      	str	r3, [r5, #20]
 802cbaa:	2300      	movs	r3, #0
 802cbac:	9309      	str	r3, [sp, #36]	; 0x24
 802cbae:	2320      	movs	r3, #32
 802cbb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802cbb4:	2330      	movs	r3, #48	; 0x30
 802cbb6:	f04f 0901 	mov.w	r9, #1
 802cbba:	f8cd 800c 	str.w	r8, [sp, #12]
 802cbbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802cd64 <_svfiprintf_r+0x1ec>
 802cbc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cbc6:	4623      	mov	r3, r4
 802cbc8:	469a      	mov	sl, r3
 802cbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cbce:	b10a      	cbz	r2, 802cbd4 <_svfiprintf_r+0x5c>
 802cbd0:	2a25      	cmp	r2, #37	; 0x25
 802cbd2:	d1f9      	bne.n	802cbc8 <_svfiprintf_r+0x50>
 802cbd4:	ebba 0b04 	subs.w	fp, sl, r4
 802cbd8:	d00b      	beq.n	802cbf2 <_svfiprintf_r+0x7a>
 802cbda:	465b      	mov	r3, fp
 802cbdc:	4622      	mov	r2, r4
 802cbde:	4629      	mov	r1, r5
 802cbe0:	4638      	mov	r0, r7
 802cbe2:	f7ff ff6e 	bl	802cac2 <__ssputs_r>
 802cbe6:	3001      	adds	r0, #1
 802cbe8:	f000 80aa 	beq.w	802cd40 <_svfiprintf_r+0x1c8>
 802cbec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cbee:	445a      	add	r2, fp
 802cbf0:	9209      	str	r2, [sp, #36]	; 0x24
 802cbf2:	f89a 3000 	ldrb.w	r3, [sl]
 802cbf6:	2b00      	cmp	r3, #0
 802cbf8:	f000 80a2 	beq.w	802cd40 <_svfiprintf_r+0x1c8>
 802cbfc:	2300      	movs	r3, #0
 802cbfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802cc02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cc06:	f10a 0a01 	add.w	sl, sl, #1
 802cc0a:	9304      	str	r3, [sp, #16]
 802cc0c:	9307      	str	r3, [sp, #28]
 802cc0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cc12:	931a      	str	r3, [sp, #104]	; 0x68
 802cc14:	4654      	mov	r4, sl
 802cc16:	2205      	movs	r2, #5
 802cc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cc1c:	4851      	ldr	r0, [pc, #324]	; (802cd64 <_svfiprintf_r+0x1ec>)
 802cc1e:	f7ff fe37 	bl	802c890 <memchr>
 802cc22:	9a04      	ldr	r2, [sp, #16]
 802cc24:	b9d8      	cbnz	r0, 802cc5e <_svfiprintf_r+0xe6>
 802cc26:	06d0      	lsls	r0, r2, #27
 802cc28:	bf44      	itt	mi
 802cc2a:	2320      	movmi	r3, #32
 802cc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cc30:	0711      	lsls	r1, r2, #28
 802cc32:	bf44      	itt	mi
 802cc34:	232b      	movmi	r3, #43	; 0x2b
 802cc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cc3a:	f89a 3000 	ldrb.w	r3, [sl]
 802cc3e:	2b2a      	cmp	r3, #42	; 0x2a
 802cc40:	d015      	beq.n	802cc6e <_svfiprintf_r+0xf6>
 802cc42:	4654      	mov	r4, sl
 802cc44:	2000      	movs	r0, #0
 802cc46:	f04f 0c0a 	mov.w	ip, #10
 802cc4a:	9a07      	ldr	r2, [sp, #28]
 802cc4c:	4621      	mov	r1, r4
 802cc4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cc52:	3b30      	subs	r3, #48	; 0x30
 802cc54:	2b09      	cmp	r3, #9
 802cc56:	d94e      	bls.n	802ccf6 <_svfiprintf_r+0x17e>
 802cc58:	b1b0      	cbz	r0, 802cc88 <_svfiprintf_r+0x110>
 802cc5a:	9207      	str	r2, [sp, #28]
 802cc5c:	e014      	b.n	802cc88 <_svfiprintf_r+0x110>
 802cc5e:	eba0 0308 	sub.w	r3, r0, r8
 802cc62:	fa09 f303 	lsl.w	r3, r9, r3
 802cc66:	4313      	orrs	r3, r2
 802cc68:	46a2      	mov	sl, r4
 802cc6a:	9304      	str	r3, [sp, #16]
 802cc6c:	e7d2      	b.n	802cc14 <_svfiprintf_r+0x9c>
 802cc6e:	9b03      	ldr	r3, [sp, #12]
 802cc70:	1d19      	adds	r1, r3, #4
 802cc72:	681b      	ldr	r3, [r3, #0]
 802cc74:	9103      	str	r1, [sp, #12]
 802cc76:	2b00      	cmp	r3, #0
 802cc78:	bfbb      	ittet	lt
 802cc7a:	425b      	neglt	r3, r3
 802cc7c:	f042 0202 	orrlt.w	r2, r2, #2
 802cc80:	9307      	strge	r3, [sp, #28]
 802cc82:	9307      	strlt	r3, [sp, #28]
 802cc84:	bfb8      	it	lt
 802cc86:	9204      	strlt	r2, [sp, #16]
 802cc88:	7823      	ldrb	r3, [r4, #0]
 802cc8a:	2b2e      	cmp	r3, #46	; 0x2e
 802cc8c:	d10c      	bne.n	802cca8 <_svfiprintf_r+0x130>
 802cc8e:	7863      	ldrb	r3, [r4, #1]
 802cc90:	2b2a      	cmp	r3, #42	; 0x2a
 802cc92:	d135      	bne.n	802cd00 <_svfiprintf_r+0x188>
 802cc94:	9b03      	ldr	r3, [sp, #12]
 802cc96:	3402      	adds	r4, #2
 802cc98:	1d1a      	adds	r2, r3, #4
 802cc9a:	681b      	ldr	r3, [r3, #0]
 802cc9c:	9203      	str	r2, [sp, #12]
 802cc9e:	2b00      	cmp	r3, #0
 802cca0:	bfb8      	it	lt
 802cca2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802cca6:	9305      	str	r3, [sp, #20]
 802cca8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 802cd68 <_svfiprintf_r+0x1f0>
 802ccac:	2203      	movs	r2, #3
 802ccae:	4650      	mov	r0, sl
 802ccb0:	7821      	ldrb	r1, [r4, #0]
 802ccb2:	f7ff fded 	bl	802c890 <memchr>
 802ccb6:	b140      	cbz	r0, 802ccca <_svfiprintf_r+0x152>
 802ccb8:	2340      	movs	r3, #64	; 0x40
 802ccba:	eba0 000a 	sub.w	r0, r0, sl
 802ccbe:	fa03 f000 	lsl.w	r0, r3, r0
 802ccc2:	9b04      	ldr	r3, [sp, #16]
 802ccc4:	3401      	adds	r4, #1
 802ccc6:	4303      	orrs	r3, r0
 802ccc8:	9304      	str	r3, [sp, #16]
 802ccca:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ccce:	2206      	movs	r2, #6
 802ccd0:	4826      	ldr	r0, [pc, #152]	; (802cd6c <_svfiprintf_r+0x1f4>)
 802ccd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ccd6:	f7ff fddb 	bl	802c890 <memchr>
 802ccda:	2800      	cmp	r0, #0
 802ccdc:	d038      	beq.n	802cd50 <_svfiprintf_r+0x1d8>
 802ccde:	4b24      	ldr	r3, [pc, #144]	; (802cd70 <_svfiprintf_r+0x1f8>)
 802cce0:	bb1b      	cbnz	r3, 802cd2a <_svfiprintf_r+0x1b2>
 802cce2:	9b03      	ldr	r3, [sp, #12]
 802cce4:	3307      	adds	r3, #7
 802cce6:	f023 0307 	bic.w	r3, r3, #7
 802ccea:	3308      	adds	r3, #8
 802ccec:	9303      	str	r3, [sp, #12]
 802ccee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ccf0:	4433      	add	r3, r6
 802ccf2:	9309      	str	r3, [sp, #36]	; 0x24
 802ccf4:	e767      	b.n	802cbc6 <_svfiprintf_r+0x4e>
 802ccf6:	460c      	mov	r4, r1
 802ccf8:	2001      	movs	r0, #1
 802ccfa:	fb0c 3202 	mla	r2, ip, r2, r3
 802ccfe:	e7a5      	b.n	802cc4c <_svfiprintf_r+0xd4>
 802cd00:	2300      	movs	r3, #0
 802cd02:	f04f 0c0a 	mov.w	ip, #10
 802cd06:	4619      	mov	r1, r3
 802cd08:	3401      	adds	r4, #1
 802cd0a:	9305      	str	r3, [sp, #20]
 802cd0c:	4620      	mov	r0, r4
 802cd0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802cd12:	3a30      	subs	r2, #48	; 0x30
 802cd14:	2a09      	cmp	r2, #9
 802cd16:	d903      	bls.n	802cd20 <_svfiprintf_r+0x1a8>
 802cd18:	2b00      	cmp	r3, #0
 802cd1a:	d0c5      	beq.n	802cca8 <_svfiprintf_r+0x130>
 802cd1c:	9105      	str	r1, [sp, #20]
 802cd1e:	e7c3      	b.n	802cca8 <_svfiprintf_r+0x130>
 802cd20:	4604      	mov	r4, r0
 802cd22:	2301      	movs	r3, #1
 802cd24:	fb0c 2101 	mla	r1, ip, r1, r2
 802cd28:	e7f0      	b.n	802cd0c <_svfiprintf_r+0x194>
 802cd2a:	ab03      	add	r3, sp, #12
 802cd2c:	9300      	str	r3, [sp, #0]
 802cd2e:	462a      	mov	r2, r5
 802cd30:	4638      	mov	r0, r7
 802cd32:	4b10      	ldr	r3, [pc, #64]	; (802cd74 <_svfiprintf_r+0x1fc>)
 802cd34:	a904      	add	r1, sp, #16
 802cd36:	f3af 8000 	nop.w
 802cd3a:	1c42      	adds	r2, r0, #1
 802cd3c:	4606      	mov	r6, r0
 802cd3e:	d1d6      	bne.n	802ccee <_svfiprintf_r+0x176>
 802cd40:	89ab      	ldrh	r3, [r5, #12]
 802cd42:	065b      	lsls	r3, r3, #25
 802cd44:	f53f af2c 	bmi.w	802cba0 <_svfiprintf_r+0x28>
 802cd48:	9809      	ldr	r0, [sp, #36]	; 0x24
 802cd4a:	b01d      	add	sp, #116	; 0x74
 802cd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cd50:	ab03      	add	r3, sp, #12
 802cd52:	9300      	str	r3, [sp, #0]
 802cd54:	462a      	mov	r2, r5
 802cd56:	4638      	mov	r0, r7
 802cd58:	4b06      	ldr	r3, [pc, #24]	; (802cd74 <_svfiprintf_r+0x1fc>)
 802cd5a:	a904      	add	r1, sp, #16
 802cd5c:	f7ff fc32 	bl	802c5c4 <_printf_i>
 802cd60:	e7eb      	b.n	802cd3a <_svfiprintf_r+0x1c2>
 802cd62:	bf00      	nop
 802cd64:	080331ac 	.word	0x080331ac
 802cd68:	080331b2 	.word	0x080331b2
 802cd6c:	080331b6 	.word	0x080331b6
 802cd70:	00000000 	.word	0x00000000
 802cd74:	0802cac3 	.word	0x0802cac3

0802cd78 <_sbrk_r>:
 802cd78:	b538      	push	{r3, r4, r5, lr}
 802cd7a:	2300      	movs	r3, #0
 802cd7c:	4d05      	ldr	r5, [pc, #20]	; (802cd94 <_sbrk_r+0x1c>)
 802cd7e:	4604      	mov	r4, r0
 802cd80:	4608      	mov	r0, r1
 802cd82:	602b      	str	r3, [r5, #0]
 802cd84:	f7d4 f8da 	bl	8000f3c <_sbrk>
 802cd88:	1c43      	adds	r3, r0, #1
 802cd8a:	d102      	bne.n	802cd92 <_sbrk_r+0x1a>
 802cd8c:	682b      	ldr	r3, [r5, #0]
 802cd8e:	b103      	cbz	r3, 802cd92 <_sbrk_r+0x1a>
 802cd90:	6023      	str	r3, [r4, #0]
 802cd92:	bd38      	pop	{r3, r4, r5, pc}
 802cd94:	2000c1ac 	.word	0x2000c1ac

0802cd98 <__malloc_lock>:
 802cd98:	4801      	ldr	r0, [pc, #4]	; (802cda0 <__malloc_lock+0x8>)
 802cd9a:	f7ff bd77 	b.w	802c88c <__retarget_lock_acquire_recursive>
 802cd9e:	bf00      	nop
 802cda0:	2000c1a0 	.word	0x2000c1a0

0802cda4 <__malloc_unlock>:
 802cda4:	4801      	ldr	r0, [pc, #4]	; (802cdac <__malloc_unlock+0x8>)
 802cda6:	f7ff bd72 	b.w	802c88e <__retarget_lock_release_recursive>
 802cdaa:	bf00      	nop
 802cdac:	2000c1a0 	.word	0x2000c1a0

0802cdb0 <_malloc_usable_size_r>:
 802cdb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cdb4:	1f18      	subs	r0, r3, #4
 802cdb6:	2b00      	cmp	r3, #0
 802cdb8:	bfbc      	itt	lt
 802cdba:	580b      	ldrlt	r3, [r1, r0]
 802cdbc:	18c0      	addlt	r0, r0, r3
 802cdbe:	4770      	bx	lr

0802cdc0 <_init>:
 802cdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cdc2:	bf00      	nop
 802cdc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cdc6:	bc08      	pop	{r3}
 802cdc8:	469e      	mov	lr, r3
 802cdca:	4770      	bx	lr

0802cdcc <_fini>:
 802cdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cdce:	bf00      	nop
 802cdd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cdd2:	bc08      	pop	{r3}
 802cdd4:	469e      	mov	lr, r3
 802cdd6:	4770      	bx	lr
