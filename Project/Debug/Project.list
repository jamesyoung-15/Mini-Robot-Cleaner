
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d2b8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000063ec  0802d49c  0802d49c  0003d49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033888  08033888  00050800  2**0
                  CONTENTS
  4 .ARM          00000008  08033888  08033888  00043888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033890  08033890  00050800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033890  08033890  00043890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033894  08033894  00043894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000800  20000000  08033898  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ba50  20000800  08034098  00050800  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  2000c250  08034098  0005c250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00050800  2**0
                  CONTENTS, READONLY
 12 .debug_info   00113012  00000000  00000000  00050829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00019e96  00000000  00000000  0016383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004128  00000000  00000000  0017d6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00009210  00000000  00000000  00181800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aa5b  00000000  00000000  0018aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000d558e  00000000  00000000  001c546b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9561  00000000  00000000  0029a9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00353f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c220  00000000  00000000  00353fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0007cd13  00000000  00000000  003601cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000800 	.word	0x20000800
 8000200:	00000000 	.word	0x00000000
 8000204:	0802d484 	.word	0x0802d484

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000804 	.word	0x20000804
 8000220:	0802d484 	.word	0x0802d484

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_fmul>:
 8000248:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800024c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000250:	bf1e      	ittt	ne
 8000252:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000256:	ea92 0f0c 	teqne	r2, ip
 800025a:	ea93 0f0c 	teqne	r3, ip
 800025e:	d06f      	beq.n	8000340 <__aeabi_fmul+0xf8>
 8000260:	441a      	add	r2, r3
 8000262:	ea80 0c01 	eor.w	ip, r0, r1
 8000266:	0240      	lsls	r0, r0, #9
 8000268:	bf18      	it	ne
 800026a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800026e:	d01e      	beq.n	80002ae <__aeabi_fmul+0x66>
 8000270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000274:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000278:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800027c:	fba0 3101 	umull	r3, r1, r0, r1
 8000280:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000284:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000288:	bf3e      	ittt	cc
 800028a:	0049      	lslcc	r1, r1, #1
 800028c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000290:	005b      	lslcc	r3, r3, #1
 8000292:	ea40 0001 	orr.w	r0, r0, r1
 8000296:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800029a:	2afd      	cmp	r2, #253	; 0xfd
 800029c:	d81d      	bhi.n	80002da <__aeabi_fmul+0x92>
 800029e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002a6:	bf08      	it	eq
 80002a8:	f020 0001 	biceq.w	r0, r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002b6:	bf08      	it	eq
 80002b8:	0249      	lsleq	r1, r1, #9
 80002ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002c2:	3a7f      	subs	r2, #127	; 0x7f
 80002c4:	bfc2      	ittt	gt
 80002c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002ce:	4770      	bxgt	lr
 80002d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d4:	f04f 0300 	mov.w	r3, #0
 80002d8:	3a01      	subs	r2, #1
 80002da:	dc5d      	bgt.n	8000398 <__aeabi_fmul+0x150>
 80002dc:	f112 0f19 	cmn.w	r2, #25
 80002e0:	bfdc      	itt	le
 80002e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002e6:	4770      	bxle	lr
 80002e8:	f1c2 0200 	rsb	r2, r2, #0
 80002ec:	0041      	lsls	r1, r0, #1
 80002ee:	fa21 f102 	lsr.w	r1, r1, r2
 80002f2:	f1c2 0220 	rsb	r2, r2, #32
 80002f6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002fa:	ea5f 0031 	movs.w	r0, r1, rrx
 80002fe:	f140 0000 	adc.w	r0, r0, #0
 8000302:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000306:	bf08      	it	eq
 8000308:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800030c:	4770      	bx	lr
 800030e:	f092 0f00 	teq	r2, #0
 8000312:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0040      	lsleq	r0, r0, #1
 800031a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800031e:	3a01      	subeq	r2, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xce>
 8000322:	ea40 000c 	orr.w	r0, r0, ip
 8000326:	f093 0f00 	teq	r3, #0
 800032a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800032e:	bf02      	ittt	eq
 8000330:	0049      	lsleq	r1, r1, #1
 8000332:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000336:	3b01      	subeq	r3, #1
 8000338:	d0f9      	beq.n	800032e <__aeabi_fmul+0xe6>
 800033a:	ea41 010c 	orr.w	r1, r1, ip
 800033e:	e78f      	b.n	8000260 <__aeabi_fmul+0x18>
 8000340:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000344:	ea92 0f0c 	teq	r2, ip
 8000348:	bf18      	it	ne
 800034a:	ea93 0f0c 	teqne	r3, ip
 800034e:	d00a      	beq.n	8000366 <__aeabi_fmul+0x11e>
 8000350:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000354:	bf18      	it	ne
 8000356:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800035a:	d1d8      	bne.n	800030e <__aeabi_fmul+0xc6>
 800035c:	ea80 0001 	eor.w	r0, r0, r1
 8000360:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f090 0f00 	teq	r0, #0
 800036a:	bf17      	itett	ne
 800036c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000370:	4608      	moveq	r0, r1
 8000372:	f091 0f00 	teqne	r1, #0
 8000376:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800037a:	d014      	beq.n	80003a6 <__aeabi_fmul+0x15e>
 800037c:	ea92 0f0c 	teq	r2, ip
 8000380:	d101      	bne.n	8000386 <__aeabi_fmul+0x13e>
 8000382:	0242      	lsls	r2, r0, #9
 8000384:	d10f      	bne.n	80003a6 <__aeabi_fmul+0x15e>
 8000386:	ea93 0f0c 	teq	r3, ip
 800038a:	d103      	bne.n	8000394 <__aeabi_fmul+0x14c>
 800038c:	024b      	lsls	r3, r1, #9
 800038e:	bf18      	it	ne
 8000390:	4608      	movne	r0, r1
 8000392:	d108      	bne.n	80003a6 <__aeabi_fmul+0x15e>
 8000394:	ea80 0001 	eor.w	r0, r0, r1
 8000398:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800039c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a4:	4770      	bx	lr
 80003a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_frsub>:
 80003b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__addsf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_fsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080003bc <__addsf3>:
 80003bc:	0042      	lsls	r2, r0, #1
 80003be:	bf1f      	itttt	ne
 80003c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003c4:	ea92 0f03 	teqne	r2, r3
 80003c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003d0:	d06a      	beq.n	80004a8 <__addsf3+0xec>
 80003d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003da:	bfc1      	itttt	gt
 80003dc:	18d2      	addgt	r2, r2, r3
 80003de:	4041      	eorgt	r1, r0
 80003e0:	4048      	eorgt	r0, r1
 80003e2:	4041      	eorgt	r1, r0
 80003e4:	bfb8      	it	lt
 80003e6:	425b      	neglt	r3, r3
 80003e8:	2b19      	cmp	r3, #25
 80003ea:	bf88      	it	hi
 80003ec:	4770      	bxhi	lr
 80003ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003fa:	bf18      	it	ne
 80003fc:	4240      	negne	r0, r0
 80003fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000402:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000406:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800040a:	bf18      	it	ne
 800040c:	4249      	negne	r1, r1
 800040e:	ea92 0f03 	teq	r2, r3
 8000412:	d03f      	beq.n	8000494 <__addsf3+0xd8>
 8000414:	f1a2 0201 	sub.w	r2, r2, #1
 8000418:	fa41 fc03 	asr.w	ip, r1, r3
 800041c:	eb10 000c 	adds.w	r0, r0, ip
 8000420:	f1c3 0320 	rsb	r3, r3, #32
 8000424:	fa01 f103 	lsl.w	r1, r1, r3
 8000428:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__addsf3+0x78>
 800042e:	4249      	negs	r1, r1
 8000430:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000434:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000438:	d313      	bcc.n	8000462 <__addsf3+0xa6>
 800043a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800043e:	d306      	bcc.n	800044e <__addsf3+0x92>
 8000440:	0840      	lsrs	r0, r0, #1
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	f102 0201 	add.w	r2, r2, #1
 800044a:	2afe      	cmp	r2, #254	; 0xfe
 800044c:	d251      	bcs.n	80004f2 <__addsf3+0x136>
 800044e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000452:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000456:	bf08      	it	eq
 8000458:	f020 0001 	biceq.w	r0, r0, #1
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	4770      	bx	lr
 8000462:	0049      	lsls	r1, r1, #1
 8000464:	eb40 0000 	adc.w	r0, r0, r0
 8000468:	3a01      	subs	r2, #1
 800046a:	bf28      	it	cs
 800046c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000470:	d2ed      	bcs.n	800044e <__addsf3+0x92>
 8000472:	fab0 fc80 	clz	ip, r0
 8000476:	f1ac 0c08 	sub.w	ip, ip, #8
 800047a:	ebb2 020c 	subs.w	r2, r2, ip
 800047e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000482:	bfaa      	itet	ge
 8000484:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000488:	4252      	neglt	r2, r2
 800048a:	4318      	orrge	r0, r3
 800048c:	bfbc      	itt	lt
 800048e:	40d0      	lsrlt	r0, r2
 8000490:	4318      	orrlt	r0, r3
 8000492:	4770      	bx	lr
 8000494:	f092 0f00 	teq	r2, #0
 8000498:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800049c:	bf06      	itte	eq
 800049e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80004a2:	3201      	addeq	r2, #1
 80004a4:	3b01      	subne	r3, #1
 80004a6:	e7b5      	b.n	8000414 <__addsf3+0x58>
 80004a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004b0:	bf18      	it	ne
 80004b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004b6:	d021      	beq.n	80004fc <__addsf3+0x140>
 80004b8:	ea92 0f03 	teq	r2, r3
 80004bc:	d004      	beq.n	80004c8 <__addsf3+0x10c>
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf08      	it	eq
 80004c4:	4608      	moveq	r0, r1
 80004c6:	4770      	bx	lr
 80004c8:	ea90 0f01 	teq	r0, r1
 80004cc:	bf1c      	itt	ne
 80004ce:	2000      	movne	r0, #0
 80004d0:	4770      	bxne	lr
 80004d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004d6:	d104      	bne.n	80004e2 <__addsf3+0x126>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	bf28      	it	cs
 80004dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	4770      	bx	lr
 80004e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004e6:	bf3c      	itt	cc
 80004e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004ec:	4770      	bxcc	lr
 80004ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fa:	4770      	bx	lr
 80004fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000500:	bf16      	itet	ne
 8000502:	4608      	movne	r0, r1
 8000504:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000508:	4601      	movne	r1, r0
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	bf06      	itte	eq
 800050e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000512:	ea90 0f01 	teqeq	r0, r1
 8000516:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800051a:	4770      	bx	lr

0800051c <__aeabi_ui2f>:
 800051c:	f04f 0300 	mov.w	r3, #0
 8000520:	e004      	b.n	800052c <__aeabi_i2f+0x8>
 8000522:	bf00      	nop

08000524 <__aeabi_i2f>:
 8000524:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000528:	bf48      	it	mi
 800052a:	4240      	negmi	r0, r0
 800052c:	ea5f 0c00 	movs.w	ip, r0
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000538:	4601      	mov	r1, r0
 800053a:	f04f 0000 	mov.w	r0, #0
 800053e:	e01c      	b.n	800057a <__aeabi_l2f+0x2a>

08000540 <__aeabi_ul2f>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	f04f 0300 	mov.w	r3, #0
 800054c:	e00a      	b.n	8000564 <__aeabi_l2f+0x14>
 800054e:	bf00      	nop

08000550 <__aeabi_l2f>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800055c:	d502      	bpl.n	8000564 <__aeabi_l2f+0x14>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	ea5f 0c01 	movs.w	ip, r1
 8000568:	bf02      	ittt	eq
 800056a:	4684      	moveq	ip, r0
 800056c:	4601      	moveq	r1, r0
 800056e:	2000      	moveq	r0, #0
 8000570:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000574:	bf08      	it	eq
 8000576:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800057a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800057e:	fabc f28c 	clz	r2, ip
 8000582:	3a08      	subs	r2, #8
 8000584:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000588:	db10      	blt.n	80005ac <__aeabi_l2f+0x5c>
 800058a:	fa01 fc02 	lsl.w	ip, r1, r2
 800058e:	4463      	add	r3, ip
 8000590:	fa00 fc02 	lsl.w	ip, r0, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800059c:	fa20 f202 	lsr.w	r2, r0, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f102 0220 	add.w	r2, r2, #32
 80005b0:	fa01 fc02 	lsl.w	ip, r1, r2
 80005b4:	f1c2 0220 	rsb	r2, r2, #32
 80005b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80005bc:	fa21 f202 	lsr.w	r2, r1, r2
 80005c0:	eb43 0002 	adc.w	r0, r3, r2
 80005c4:	bf08      	it	eq
 80005c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005ca:	4770      	bx	lr

080005cc <__aeabi_f2iz>:
 80005cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005d4:	d30f      	bcc.n	80005f6 <__aeabi_f2iz+0x2a>
 80005d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005de:	d90d      	bls.n	80005fc <__aeabi_f2iz+0x30>
 80005e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005ec:	fa23 f002 	lsr.w	r0, r3, r2
 80005f0:	bf18      	it	ne
 80005f2:	4240      	negne	r0, r0
 80005f4:	4770      	bx	lr
 80005f6:	f04f 0000 	mov.w	r0, #0
 80005fa:	4770      	bx	lr
 80005fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000600:	d101      	bne.n	8000606 <__aeabi_f2iz+0x3a>
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	d105      	bne.n	8000612 <__aeabi_f2iz+0x46>
 8000606:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800060a:	bf08      	it	eq
 800060c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000610:	4770      	bx	lr
 8000612:	f04f 0000 	mov.w	r0, #0
 8000616:	4770      	bx	lr

08000618 <__aeabi_uldivmod>:
 8000618:	b953      	cbnz	r3, 8000630 <__aeabi_uldivmod+0x18>
 800061a:	b94a      	cbnz	r2, 8000630 <__aeabi_uldivmod+0x18>
 800061c:	2900      	cmp	r1, #0
 800061e:	bf08      	it	eq
 8000620:	2800      	cmpeq	r0, #0
 8000622:	bf1c      	itt	ne
 8000624:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000628:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800062c:	f000 b976 	b.w	800091c <__aeabi_idiv0>
 8000630:	f1ad 0c08 	sub.w	ip, sp, #8
 8000634:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000638:	f000 f806 	bl	8000648 <__udivmoddi4>
 800063c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000644:	b004      	add	sp, #16
 8000646:	4770      	bx	lr

08000648 <__udivmoddi4>:
 8000648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800064c:	9e08      	ldr	r6, [sp, #32]
 800064e:	460d      	mov	r5, r1
 8000650:	4604      	mov	r4, r0
 8000652:	4688      	mov	r8, r1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d14d      	bne.n	80006f4 <__udivmoddi4+0xac>
 8000658:	428a      	cmp	r2, r1
 800065a:	4694      	mov	ip, r2
 800065c:	d968      	bls.n	8000730 <__udivmoddi4+0xe8>
 800065e:	fab2 f282 	clz	r2, r2
 8000662:	b152      	cbz	r2, 800067a <__udivmoddi4+0x32>
 8000664:	fa01 f302 	lsl.w	r3, r1, r2
 8000668:	f1c2 0120 	rsb	r1, r2, #32
 800066c:	fa20 f101 	lsr.w	r1, r0, r1
 8000670:	fa0c fc02 	lsl.w	ip, ip, r2
 8000674:	ea41 0803 	orr.w	r8, r1, r3
 8000678:	4094      	lsls	r4, r2
 800067a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800067e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000682:	fa1f fe8c 	uxth.w	lr, ip
 8000686:	fb01 8817 	mls	r8, r1, r7, r8
 800068a:	fb07 f00e 	mul.w	r0, r7, lr
 800068e:	0c23      	lsrs	r3, r4, #16
 8000690:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000694:	4298      	cmp	r0, r3
 8000696:	d90a      	bls.n	80006ae <__udivmoddi4+0x66>
 8000698:	eb1c 0303 	adds.w	r3, ip, r3
 800069c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80006a0:	f080 811e 	bcs.w	80008e0 <__udivmoddi4+0x298>
 80006a4:	4298      	cmp	r0, r3
 80006a6:	f240 811b 	bls.w	80008e0 <__udivmoddi4+0x298>
 80006aa:	3f02      	subs	r7, #2
 80006ac:	4463      	add	r3, ip
 80006ae:	1a1b      	subs	r3, r3, r0
 80006b0:	fbb3 f0f1 	udiv	r0, r3, r1
 80006b4:	fb01 3310 	mls	r3, r1, r0, r3
 80006b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006bc:	b2a4      	uxth	r4, r4
 80006be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c2:	45a6      	cmp	lr, r4
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x94>
 80006c6:	eb1c 0404 	adds.w	r4, ip, r4
 80006ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006ce:	f080 8109 	bcs.w	80008e4 <__udivmoddi4+0x29c>
 80006d2:	45a6      	cmp	lr, r4
 80006d4:	f240 8106 	bls.w	80008e4 <__udivmoddi4+0x29c>
 80006d8:	4464      	add	r4, ip
 80006da:	3802      	subs	r0, #2
 80006dc:	2100      	movs	r1, #0
 80006de:	eba4 040e 	sub.w	r4, r4, lr
 80006e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006e6:	b11e      	cbz	r6, 80006f0 <__udivmoddi4+0xa8>
 80006e8:	2300      	movs	r3, #0
 80006ea:	40d4      	lsrs	r4, r2
 80006ec:	e9c6 4300 	strd	r4, r3, [r6]
 80006f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f4:	428b      	cmp	r3, r1
 80006f6:	d908      	bls.n	800070a <__udivmoddi4+0xc2>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	f000 80ee 	beq.w	80008da <__udivmoddi4+0x292>
 80006fe:	2100      	movs	r1, #0
 8000700:	e9c6 0500 	strd	r0, r5, [r6]
 8000704:	4608      	mov	r0, r1
 8000706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070a:	fab3 f183 	clz	r1, r3
 800070e:	2900      	cmp	r1, #0
 8000710:	d14a      	bne.n	80007a8 <__udivmoddi4+0x160>
 8000712:	42ab      	cmp	r3, r5
 8000714:	d302      	bcc.n	800071c <__udivmoddi4+0xd4>
 8000716:	4282      	cmp	r2, r0
 8000718:	f200 80fc 	bhi.w	8000914 <__udivmoddi4+0x2cc>
 800071c:	1a84      	subs	r4, r0, r2
 800071e:	eb65 0303 	sbc.w	r3, r5, r3
 8000722:	2001      	movs	r0, #1
 8000724:	4698      	mov	r8, r3
 8000726:	2e00      	cmp	r6, #0
 8000728:	d0e2      	beq.n	80006f0 <__udivmoddi4+0xa8>
 800072a:	e9c6 4800 	strd	r4, r8, [r6]
 800072e:	e7df      	b.n	80006f0 <__udivmoddi4+0xa8>
 8000730:	b902      	cbnz	r2, 8000734 <__udivmoddi4+0xec>
 8000732:	deff      	udf	#255	; 0xff
 8000734:	fab2 f282 	clz	r2, r2
 8000738:	2a00      	cmp	r2, #0
 800073a:	f040 8091 	bne.w	8000860 <__udivmoddi4+0x218>
 800073e:	eba1 000c 	sub.w	r0, r1, ip
 8000742:	2101      	movs	r1, #1
 8000744:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000748:	fa1f fe8c 	uxth.w	lr, ip
 800074c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000750:	fb07 0013 	mls	r0, r7, r3, r0
 8000754:	0c25      	lsrs	r5, r4, #16
 8000756:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800075a:	fb0e f003 	mul.w	r0, lr, r3
 800075e:	42a8      	cmp	r0, r5
 8000760:	d908      	bls.n	8000774 <__udivmoddi4+0x12c>
 8000762:	eb1c 0505 	adds.w	r5, ip, r5
 8000766:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x12a>
 800076c:	42a8      	cmp	r0, r5
 800076e:	f200 80ce 	bhi.w	800090e <__udivmoddi4+0x2c6>
 8000772:	4643      	mov	r3, r8
 8000774:	1a2d      	subs	r5, r5, r0
 8000776:	fbb5 f0f7 	udiv	r0, r5, r7
 800077a:	fb07 5510 	mls	r5, r7, r0, r5
 800077e:	fb0e fe00 	mul.w	lr, lr, r0
 8000782:	b2a4      	uxth	r4, r4
 8000784:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000788:	45a6      	cmp	lr, r4
 800078a:	d908      	bls.n	800079e <__udivmoddi4+0x156>
 800078c:	eb1c 0404 	adds.w	r4, ip, r4
 8000790:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000794:	d202      	bcs.n	800079c <__udivmoddi4+0x154>
 8000796:	45a6      	cmp	lr, r4
 8000798:	f200 80b6 	bhi.w	8000908 <__udivmoddi4+0x2c0>
 800079c:	4628      	mov	r0, r5
 800079e:	eba4 040e 	sub.w	r4, r4, lr
 80007a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007a6:	e79e      	b.n	80006e6 <__udivmoddi4+0x9e>
 80007a8:	f1c1 0720 	rsb	r7, r1, #32
 80007ac:	408b      	lsls	r3, r1
 80007ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80007b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007b6:	fa25 fa07 	lsr.w	sl, r5, r7
 80007ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007be:	fbba f8f9 	udiv	r8, sl, r9
 80007c2:	fa20 f307 	lsr.w	r3, r0, r7
 80007c6:	fb09 aa18 	mls	sl, r9, r8, sl
 80007ca:	408d      	lsls	r5, r1
 80007cc:	fa1f fe8c 	uxth.w	lr, ip
 80007d0:	431d      	orrs	r5, r3
 80007d2:	fa00 f301 	lsl.w	r3, r0, r1
 80007d6:	fb08 f00e 	mul.w	r0, r8, lr
 80007da:	0c2c      	lsrs	r4, r5, #16
 80007dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80007e0:	42a0      	cmp	r0, r4
 80007e2:	fa02 f201 	lsl.w	r2, r2, r1
 80007e6:	d90b      	bls.n	8000800 <__udivmoddi4+0x1b8>
 80007e8:	eb1c 0404 	adds.w	r4, ip, r4
 80007ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007f0:	f080 8088 	bcs.w	8000904 <__udivmoddi4+0x2bc>
 80007f4:	42a0      	cmp	r0, r4
 80007f6:	f240 8085 	bls.w	8000904 <__udivmoddi4+0x2bc>
 80007fa:	f1a8 0802 	sub.w	r8, r8, #2
 80007fe:	4464      	add	r4, ip
 8000800:	1a24      	subs	r4, r4, r0
 8000802:	fbb4 f0f9 	udiv	r0, r4, r9
 8000806:	fb09 4410 	mls	r4, r9, r0, r4
 800080a:	fb00 fe0e 	mul.w	lr, r0, lr
 800080e:	b2ad      	uxth	r5, r5
 8000810:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000814:	45a6      	cmp	lr, r4
 8000816:	d908      	bls.n	800082a <__udivmoddi4+0x1e2>
 8000818:	eb1c 0404 	adds.w	r4, ip, r4
 800081c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000820:	d26c      	bcs.n	80008fc <__udivmoddi4+0x2b4>
 8000822:	45a6      	cmp	lr, r4
 8000824:	d96a      	bls.n	80008fc <__udivmoddi4+0x2b4>
 8000826:	3802      	subs	r0, #2
 8000828:	4464      	add	r4, ip
 800082a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800082e:	fba0 9502 	umull	r9, r5, r0, r2
 8000832:	eba4 040e 	sub.w	r4, r4, lr
 8000836:	42ac      	cmp	r4, r5
 8000838:	46c8      	mov	r8, r9
 800083a:	46ae      	mov	lr, r5
 800083c:	d356      	bcc.n	80008ec <__udivmoddi4+0x2a4>
 800083e:	d053      	beq.n	80008e8 <__udivmoddi4+0x2a0>
 8000840:	2e00      	cmp	r6, #0
 8000842:	d069      	beq.n	8000918 <__udivmoddi4+0x2d0>
 8000844:	ebb3 0208 	subs.w	r2, r3, r8
 8000848:	eb64 040e 	sbc.w	r4, r4, lr
 800084c:	fa22 f301 	lsr.w	r3, r2, r1
 8000850:	fa04 f707 	lsl.w	r7, r4, r7
 8000854:	431f      	orrs	r7, r3
 8000856:	40cc      	lsrs	r4, r1
 8000858:	e9c6 7400 	strd	r7, r4, [r6]
 800085c:	2100      	movs	r1, #0
 800085e:	e747      	b.n	80006f0 <__udivmoddi4+0xa8>
 8000860:	fa0c fc02 	lsl.w	ip, ip, r2
 8000864:	f1c2 0120 	rsb	r1, r2, #32
 8000868:	fa25 f301 	lsr.w	r3, r5, r1
 800086c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000870:	fa20 f101 	lsr.w	r1, r0, r1
 8000874:	4095      	lsls	r5, r2
 8000876:	430d      	orrs	r5, r1
 8000878:	fbb3 f1f7 	udiv	r1, r3, r7
 800087c:	fb07 3311 	mls	r3, r7, r1, r3
 8000880:	fa1f fe8c 	uxth.w	lr, ip
 8000884:	0c28      	lsrs	r0, r5, #16
 8000886:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800088a:	fb01 f30e 	mul.w	r3, r1, lr
 800088e:	4283      	cmp	r3, r0
 8000890:	fa04 f402 	lsl.w	r4, r4, r2
 8000894:	d908      	bls.n	80008a8 <__udivmoddi4+0x260>
 8000896:	eb1c 0000 	adds.w	r0, ip, r0
 800089a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800089e:	d22f      	bcs.n	8000900 <__udivmoddi4+0x2b8>
 80008a0:	4283      	cmp	r3, r0
 80008a2:	d92d      	bls.n	8000900 <__udivmoddi4+0x2b8>
 80008a4:	3902      	subs	r1, #2
 80008a6:	4460      	add	r0, ip
 80008a8:	1ac0      	subs	r0, r0, r3
 80008aa:	fbb0 f3f7 	udiv	r3, r0, r7
 80008ae:	fb07 0013 	mls	r0, r7, r3, r0
 80008b2:	b2ad      	uxth	r5, r5
 80008b4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80008b8:	fb03 f00e 	mul.w	r0, r3, lr
 80008bc:	42a8      	cmp	r0, r5
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x28a>
 80008c0:	eb1c 0505 	adds.w	r5, ip, r5
 80008c4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008c8:	d216      	bcs.n	80008f8 <__udivmoddi4+0x2b0>
 80008ca:	42a8      	cmp	r0, r5
 80008cc:	d914      	bls.n	80008f8 <__udivmoddi4+0x2b0>
 80008ce:	3b02      	subs	r3, #2
 80008d0:	4465      	add	r5, ip
 80008d2:	1a28      	subs	r0, r5, r0
 80008d4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008d8:	e738      	b.n	800074c <__udivmoddi4+0x104>
 80008da:	4631      	mov	r1, r6
 80008dc:	4630      	mov	r0, r6
 80008de:	e707      	b.n	80006f0 <__udivmoddi4+0xa8>
 80008e0:	462f      	mov	r7, r5
 80008e2:	e6e4      	b.n	80006ae <__udivmoddi4+0x66>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6f9      	b.n	80006dc <__udivmoddi4+0x94>
 80008e8:	454b      	cmp	r3, r9
 80008ea:	d2a9      	bcs.n	8000840 <__udivmoddi4+0x1f8>
 80008ec:	ebb9 0802 	subs.w	r8, r9, r2
 80008f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7a3      	b.n	8000840 <__udivmoddi4+0x1f8>
 80008f8:	4643      	mov	r3, r8
 80008fa:	e7ea      	b.n	80008d2 <__udivmoddi4+0x28a>
 80008fc:	4628      	mov	r0, r5
 80008fe:	e794      	b.n	800082a <__udivmoddi4+0x1e2>
 8000900:	4641      	mov	r1, r8
 8000902:	e7d1      	b.n	80008a8 <__udivmoddi4+0x260>
 8000904:	46d0      	mov	r8, sl
 8000906:	e77b      	b.n	8000800 <__udivmoddi4+0x1b8>
 8000908:	4464      	add	r4, ip
 800090a:	3802      	subs	r0, #2
 800090c:	e747      	b.n	800079e <__udivmoddi4+0x156>
 800090e:	3b02      	subs	r3, #2
 8000910:	4465      	add	r5, ip
 8000912:	e72f      	b.n	8000774 <__udivmoddi4+0x12c>
 8000914:	4608      	mov	r0, r1
 8000916:	e706      	b.n	8000726 <__udivmoddi4+0xde>
 8000918:	4631      	mov	r1, r6
 800091a:	e6e9      	b.n	80006f0 <__udivmoddi4+0xa8>

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b500      	push	{lr}
 8000922:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000924:	2300      	movs	r3, #0
 8000926:	9308      	str	r3, [sp, #32]
 8000928:	9309      	str	r3, [sp, #36]	; 0x24
 800092a:	930b      	str	r3, [sp, #44]	; 0x2c
 800092c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	9303      	str	r3, [sp, #12]
 8000934:	9304      	str	r3, [sp, #16]
 8000936:	9305      	str	r3, [sp, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000938:	2201      	movs	r2, #1
 800093a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000942:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2202      	movs	r2, #2
 8000946:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000948:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800094a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800094e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	a806      	add	r0, sp, #24
 8000952:	f001 fbd9 	bl	8002108 <HAL_RCC_OscConfig>
 8000956:	b980      	cbnz	r0, 800097a <SystemClock_Config+0x5a>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2102      	movs	r1, #2
 800095e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000968:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096c:	a801      	add	r0, sp, #4
 800096e:	f001 fe19 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000972:	b920      	cbnz	r0, 800097e <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }
}
 8000974:	b011      	add	sp, #68	; 0x44
 8000976:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <SystemClock_Config+0x5c>
 800097e:	b672      	cpsid	i
 8000980:	e7fe      	b.n	8000980 <SystemClock_Config+0x60>
	...

08000984 <main>:
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8000988:	f000 fc20 	bl	80011cc <HAL_Init>
  SystemClock_Config();
 800098c:	f7ff ffc8 	bl	8000920 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	2400      	movs	r4, #0
 8000992:	9409      	str	r4, [sp, #36]	; 0x24
 8000994:	940a      	str	r4, [sp, #40]	; 0x28
 8000996:	940b      	str	r4, [sp, #44]	; 0x2c
 8000998:	940c      	str	r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	4dab      	ldr	r5, [pc, #684]	; (8000c48 <main+0x2c4>)
 800099c:	69ab      	ldr	r3, [r5, #24]
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	61ab      	str	r3, [r5, #24]
 80009a4:	69ab      	ldr	r3, [r5, #24]
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	9302      	str	r3, [sp, #8]
 80009ac:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	69ab      	ldr	r3, [r5, #24]
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	61ab      	str	r3, [r5, #24]
 80009b6:	69ab      	ldr	r3, [r5, #24]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	9303      	str	r3, [sp, #12]
 80009be:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	69ab      	ldr	r3, [r5, #24]
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	61ab      	str	r3, [r5, #24]
 80009c8:	69ab      	ldr	r3, [r5, #24]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	9304      	str	r3, [sp, #16]
 80009d0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	69ab      	ldr	r3, [r5, #24]
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	61ab      	str	r3, [r5, #24]
 80009da:	69ab      	ldr	r3, [r5, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	9305      	str	r3, [sp, #20]
 80009e2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	69ab      	ldr	r3, [r5, #24]
 80009e6:	f043 0320 	orr.w	r3, r3, #32
 80009ea:	61ab      	str	r3, [r5, #24]
 80009ec:	69ab      	ldr	r3, [r5, #24]
 80009ee:	f003 0320 	and.w	r3, r3, #32
 80009f2:	9306      	str	r3, [sp, #24]
 80009f4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80009f6:	4f95      	ldr	r7, [pc, #596]	; (8000c4c <main+0x2c8>)
 80009f8:	4622      	mov	r2, r4
 80009fa:	2107      	movs	r1, #7
 80009fc:	4638      	mov	r0, r7
 80009fe:	f001 fb6d 	bl	80020dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8
 8000a02:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8000c50 <main+0x2cc>
 8000a06:	2201      	movs	r2, #1
 8000a08:	f240 3123 	movw	r1, #803	; 0x323
 8000a0c:	4650      	mov	r0, sl
 8000a0e:	f001 fb65 	bl	80020dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000a12:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8000c54 <main+0x2d0>
 8000a16:	4622      	mov	r2, r4
 8000a18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a1c:	4648      	mov	r0, r9
 8000a1e:	f001 fb5d 	bl	80020dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
 8000a22:	2307      	movs	r3, #7
 8000a24:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2601      	movs	r6, #1
 8000a28:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2c:	f04f 0803 	mov.w	r8, #3
 8000a30:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a34:	a909      	add	r1, sp, #36	; 0x24
 8000a36:	4638      	mov	r0, r7
 8000a38:	f001 fa00 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a44:	a909      	add	r1, sp, #36	; 0x24
 8000a46:	4638      	mov	r0, r7
 8000a48:	f001 f9f8 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	4b81      	ldr	r3, [pc, #516]	; (8000c58 <main+0x2d4>)
 8000a52:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a56:	a909      	add	r1, sp, #36	; 0x24
 8000a58:	4638      	mov	r0, r7
 8000a5a:	f001 f9ef 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	a909      	add	r1, sp, #36	; 0x24
 8000a6a:	487c      	ldr	r0, [pc, #496]	; (8000c5c <main+0x2d8>)
 8000a6c:	f001 f9e6 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a70:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	a909      	add	r1, sp, #36	; 0x24
 8000a78:	4879      	ldr	r0, [pc, #484]	; (8000c60 <main+0x2dc>)
 8000a7a:	f001 f9df 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_8
 8000a7e:	f240 3323 	movw	r3, #803	; 0x323
 8000a82:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	a909      	add	r1, sp, #36	; 0x24
 8000a8e:	4650      	mov	r0, sl
 8000a90:	f001 f9d4 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a98:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	a909      	add	r1, sp, #36	; 0x24
 8000aa4:	4648      	mov	r0, r9
 8000aa6:	f001 f9c9 	bl	8001e3c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000aaa:	4622      	mov	r2, r4
 8000aac:	4621      	mov	r1, r4
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f000 fbd6 	bl	8001260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ab4:	200a      	movs	r0, #10
 8000ab6:	f000 fc09 	bl	80012cc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	696b      	ldr	r3, [r5, #20]
 8000abc:	4333      	orrs	r3, r6
 8000abe:	616b      	str	r3, [r5, #20]
 8000ac0:	696b      	ldr	r3, [r5, #20]
 8000ac2:	4033      	ands	r3, r6
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000ac8:	4866      	ldr	r0, [pc, #408]	; (8000c64 <main+0x2e0>)
 8000aca:	4b67      	ldr	r3, [pc, #412]	; (8000c68 <main+0x2e4>)
 8000acc:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000ace:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad2:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ad4:	2340      	movs	r3, #64	; 0x40
 8000ad6:	6083      	str	r3, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae0:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000ae8:	6184      	str	r4, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000aea:	61c4      	str	r4, [r0, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000aec:	f000 fc20 	bl	8001330 <HAL_DMA_Init>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	f040 811c 	bne.w	8000d2e <main+0x3aa>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	4611      	mov	r1, r2
 8000afa:	200b      	movs	r0, #11
 8000afc:	f000 fbb0 	bl	8001260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b00:	200b      	movs	r0, #11
 8000b02:	f000 fbe3 	bl	80012cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	4611      	mov	r1, r2
 8000b0a:	200c      	movs	r0, #12
 8000b0c:	f000 fba8 	bl	8001260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b10:	200c      	movs	r0, #12
 8000b12:	f000 fbdb 	bl	80012cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	4611      	mov	r1, r2
 8000b1a:	200d      	movs	r0, #13
 8000b1c:	f000 fba0 	bl	8001260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b20:	200d      	movs	r0, #13
 8000b22:	f000 fbd3 	bl	80012cc <HAL_NVIC_EnableIRQ>
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b26:	2200      	movs	r2, #0
 8000b28:	920f      	str	r2, [sp, #60]	; 0x3c
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000b2a:	4850      	ldr	r0, [pc, #320]	; (8000c6c <main+0x2e8>)
 8000b2c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000b30:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b32:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000b36:	6043      	str	r3, [r0, #4]
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000b38:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b3a:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b3c:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b3e:	2110      	movs	r1, #16
 8000b40:	6141      	str	r1, [r0, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b42:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b44:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b46:	6202      	str	r2, [r0, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b48:	6242      	str	r2, [r0, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	6283      	str	r3, [r0, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b50:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b52:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b54:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b56:	6382      	str	r2, [r0, #56]	; 0x38
  Timing.AddressSetupTime = 15;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	9309      	str	r3, [sp, #36]	; 0x24
  Timing.AddressHoldTime = 15;
 8000b5c:	930a      	str	r3, [sp, #40]	; 0x28
  Timing.DataSetupTime = 255;
 8000b5e:	24ff      	movs	r4, #255	; 0xff
 8000b60:	940b      	str	r4, [sp, #44]	; 0x2c
  Timing.BusTurnAroundDuration = 15;
 8000b62:	930c      	str	r3, [sp, #48]	; 0x30
  Timing.CLKDivision = 16;
 8000b64:	910d      	str	r1, [sp, #52]	; 0x34
  Timing.DataLatency = 17;
 8000b66:	2311      	movs	r3, #17
 8000b68:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b6a:	a909      	add	r1, sp, #36	; 0x24
 8000b6c:	f001 fdf2 	bl	8002754 <HAL_SRAM_Init>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	f040 80de 	bne.w	8000d32 <main+0x3ae>
  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000b76:	4a3e      	ldr	r2, [pc, #248]	; (8000c70 <main+0x2ec>)
 8000b78:	69d3      	ldr	r3, [r2, #28]
 8000b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7e:	61d3      	str	r3, [r2, #28]
  huart3.Instance = USART3;
 8000b80:	483c      	ldr	r0, [pc, #240]	; (8000c74 <main+0x2f0>)
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <main+0x2f4>)
 8000b84:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000b86:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b8a:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b90:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b92:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	220c      	movs	r2, #12
 8000b96:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b98:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b9c:	f002 f8ea 	bl	8002d74 <HAL_UART_Init>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	f040 80c8 	bne.w	8000d36 <main+0x3b2>
  HAL_UART_MspInit(&huart3);
 8000ba6:	4c33      	ldr	r4, [pc, #204]	; (8000c74 <main+0x2f0>)
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f000 f97d 	bl	8000ea8 <HAL_UART_MspInit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&single_buffer, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4932      	ldr	r1, [pc, #200]	; (8000c7c <main+0x2f8>)
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f002 fb51 	bl	800325a <HAL_UART_Receive_IT>
  huart1.Instance = USART1;
 8000bb8:	4831      	ldr	r0, [pc, #196]	; (8000c80 <main+0x2fc>)
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <main+0x300>)
 8000bbc:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bc2:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	220c      	movs	r2, #12
 8000bce:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd0:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd2:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bd4:	f002 f8ce 	bl	8002d74 <HAL_UART_Init>
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	f040 80ae 	bne.w	8000d3a <main+0x3b6>
  hcrc.Instance = CRC;
 8000bde:	482a      	ldr	r0, [pc, #168]	; (8000c88 <main+0x304>)
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <main+0x308>)
 8000be2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000be4:	f000 fb94 	bl	8001310 <HAL_CRC_Init>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	f040 80a8 	bne.w	8000d3e <main+0x3ba>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bee:	2300      	movs	r3, #0
 8000bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8000bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8000bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bf6:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf8:	9307      	str	r3, [sp, #28]
 8000bfa:	9308      	str	r3, [sp, #32]
  htim2.Instance = TIM2;
 8000bfc:	4824      	ldr	r0, [pc, #144]	; (8000c90 <main+0x30c>)
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c02:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72-1;
 8000c04:	2247      	movs	r2, #71	; 0x47
 8000c06:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8000c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c14:	f001 fefe 	bl	8002a14 <HAL_TIM_Base_Init>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	f040 8092 	bne.w	8000d42 <main+0x3be>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c22:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c24:	a909      	add	r1, sp, #36	; 0x24
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <main+0x30c>)
 8000c28:	f001 ff2c 	bl	8002a84 <HAL_TIM_ConfigClockSource>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	f040 808a 	bne.w	8000d46 <main+0x3c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c32:	2300      	movs	r3, #0
 8000c34:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c36:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c38:	a907      	add	r1, sp, #28
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <main+0x30c>)
 8000c3c:	f001 ffc6 	bl	8002bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	f040 8082 	bne.w	8000d4a <main+0x3c6>
 8000c46:	e025      	b.n	8000c94 <main+0x310>
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40011800 	.word	0x40011800
 8000c50:	40010c00 	.word	0x40010c00
 8000c54:	40011400 	.word	0x40011400
 8000c58:	10210000 	.word	0x10210000
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	20000824 	.word	0x20000824
 8000c68:	40020008 	.word	0x40020008
 8000c6c:	200008f0 	.word	0x200008f0
 8000c70:	40010000 	.word	0x40010000
 8000c74:	20000a0c 	.word	0x20000a0c
 8000c78:	40004800 	.word	0x40004800
 8000c7c:	20001261 	.word	0x20001261
 8000c80:	200009c8 	.word	0x200009c8
 8000c84:	40013800 	.word	0x40013800
 8000c88:	2000081c 	.word	0x2000081c
 8000c8c:	40023000 	.word	0x40023000
 8000c90:	20000938 	.word	0x20000938
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c94:	2300      	movs	r3, #0
 8000c96:	9309      	str	r3, [sp, #36]	; 0x24
 8000c98:	930a      	str	r3, [sp, #40]	; 0x28
 8000c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c9c:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	9307      	str	r3, [sp, #28]
 8000ca0:	9308      	str	r3, [sp, #32]
  htim3.Instance = TIM3;
 8000ca2:	4840      	ldr	r0, [pc, #256]	; (8000da4 <main+0x420>)
 8000ca4:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <main+0x424>)
 8000ca6:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 8000ca8:	2247      	movs	r2, #71	; 0x47
 8000caa:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb8:	f001 feac 	bl	8002a14 <HAL_TIM_Base_Init>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d146      	bne.n	8000d4e <main+0x3ca>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc6:	a909      	add	r1, sp, #36	; 0x24
 8000cc8:	4836      	ldr	r0, [pc, #216]	; (8000da4 <main+0x420>)
 8000cca:	f001 fedb 	bl	8002a84 <HAL_TIM_ConfigClockSource>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d13f      	bne.n	8000d52 <main+0x3ce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd8:	a907      	add	r1, sp, #28
 8000cda:	4832      	ldr	r0, [pc, #200]	; (8000da4 <main+0x420>)
 8000cdc:	f001 ff76 	bl	8002bcc <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d138      	bne.n	8000d56 <main+0x3d2>
  lv_init(); //lvgl initialization
 8000ce4:	f006 f90e 	bl	8006f04 <lv_init>
  lv_port_disp_init(); // lvgl display initialization
 8000ce8:	f003 f9b4 	bl	8004054 <lv_port_disp_init>
  lv_port_indev_init(); // lvgl touch initialization
 8000cec:	f003 fa00 	bl	80040f0 <lv_port_indev_init>
  set_screen();
 8000cf0:	f002 fcf6 	bl	80036e0 <set_screen>
  debug_screen();
 8000cf4:	f002 fd00 	bl	80036f8 <debug_screen>
  HAL_Delay(4000);
 8000cf8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000cfc:	f000 fa8a 	bl	8001214 <HAL_Delay>
  resetEsp();
 8000d00:	f002 fb8e 	bl	8003420 <resetEsp>
  checkAT();
 8000d04:	f002 fb7e 	bl	8003404 <checkAT>
  print_debug("Text"); // reset screen
 8000d08:	4828      	ldr	r0, [pc, #160]	; (8000dac <main+0x428>)
 8000d0a:	f002 fd2b 	bl	8003764 <print_debug>
  HAL_Delay(4000);
 8000d0e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000d12:	f000 fa7f 	bl	8001214 <HAL_Delay>
  connectWifi("Pixel_7670","xq7tsx77"); // connect to wifi
 8000d16:	4926      	ldr	r1, [pc, #152]	; (8000db0 <main+0x42c>)
 8000d18:	4826      	ldr	r0, [pc, #152]	; (8000db4 <main+0x430>)
 8000d1a:	f002 fb8f 	bl	800343c <connectWifi>
  HAL_Delay(1000);
 8000d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d22:	f000 fa77 	bl	8001214 <HAL_Delay>
	  if(detect_server)
 8000d26:	4c24      	ldr	r4, [pc, #144]	; (8000db8 <main+0x434>)
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8000d28:	4e24      	ldr	r6, [pc, #144]	; (8000dbc <main+0x438>)
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000d2a:	4d25      	ldr	r5, [pc, #148]	; (8000dc0 <main+0x43c>)
 8000d2c:	e028      	b.n	8000d80 <main+0x3fc>
 8000d2e:	b672      	cpsid	i
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <main+0x3ac>
 8000d32:	b672      	cpsid	i
 8000d34:	e7fe      	b.n	8000d34 <main+0x3b0>
 8000d36:	b672      	cpsid	i
 8000d38:	e7fe      	b.n	8000d38 <main+0x3b4>
 8000d3a:	b672      	cpsid	i
 8000d3c:	e7fe      	b.n	8000d3c <main+0x3b8>
 8000d3e:	b672      	cpsid	i
 8000d40:	e7fe      	b.n	8000d40 <main+0x3bc>
 8000d42:	b672      	cpsid	i
 8000d44:	e7fe      	b.n	8000d44 <main+0x3c0>
 8000d46:	b672      	cpsid	i
 8000d48:	e7fe      	b.n	8000d48 <main+0x3c4>
 8000d4a:	b672      	cpsid	i
 8000d4c:	e7fe      	b.n	8000d4c <main+0x3c8>
 8000d4e:	b672      	cpsid	i
 8000d50:	e7fe      	b.n	8000d50 <main+0x3cc>
 8000d52:	b672      	cpsid	i
 8000d54:	e7fe      	b.n	8000d54 <main+0x3d0>
 8000d56:	b672      	cpsid	i
 8000d58:	e7fe      	b.n	8000d58 <main+0x3d4>
		  serverHandler();
 8000d5a:	f002 fbdb 	bl	8003514 <serverHandler>
		  detect_server = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	7023      	strb	r3, [r4, #0]
 8000d62:	e010      	b.n	8000d86 <main+0x402>
		  resetEsp();
 8000d64:	f002 fb5c 	bl	8003420 <resetEsp>
		  connectWifi("Pixel_7670","xq7tsx77");
 8000d68:	4911      	ldr	r1, [pc, #68]	; (8000db0 <main+0x42c>)
 8000d6a:	4812      	ldr	r0, [pc, #72]	; (8000db4 <main+0x430>)
 8000d6c:	f002 fb66 	bl	800343c <connectWifi>
		  HAL_Delay(200);
 8000d70:	20c8      	movs	r0, #200	; 0xc8
 8000d72:	f000 fa4f 	bl	8001214 <HAL_Delay>
 8000d76:	e00c      	b.n	8000d92 <main+0x40e>
		  checkIP();
 8000d78:	f002 fc2a 	bl	80035d0 <checkIP>
 * GLOBAL PROTOTYPES
 **********************/

static inline LV_ATTRIBUTE_TIMER_HANDLER uint32_t lv_task_handler(void)
{
    return lv_timer_handler();
 8000d7c:	f022 fcb0 	bl	80236e0 <lv_timer_handler>
	  if(detect_server)
 8000d80:	7823      	ldrb	r3, [r4, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1e9      	bne.n	8000d5a <main+0x3d6>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8000d86:	2101      	movs	r1, #1
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f001 f9a1 	bl	80020d0 <HAL_GPIO_ReadPin>
 8000d8e:	2801      	cmp	r0, #1
 8000d90:	d0e8      	beq.n	8000d64 <main+0x3e0>
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)==1)
 8000d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d96:	4628      	mov	r0, r5
 8000d98:	f001 f99a 	bl	80020d0 <HAL_GPIO_ReadPin>
 8000d9c:	2801      	cmp	r0, #1
 8000d9e:	d0eb      	beq.n	8000d78 <main+0x3f4>
 8000da0:	e7ec      	b.n	8000d7c <main+0x3f8>
 8000da2:	bf00      	nop
 8000da4:	20000980 	.word	0x20000980
 8000da8:	40000400 	.word	0x40000400
 8000dac:	0802d4b4 	.word	0x0802d4b4
 8000db0:	0802d4bc 	.word	0x0802d4bc
 8000db4:	0802d4c8 	.word	0x0802d4c8
 8000db8:	20001260 	.word	0x20001260
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40011000 	.word	0x40011000

08000dc4 <Error_Handler>:
 8000dc4:	b672      	cpsid	i
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <Error_Handler+0x2>

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_MspInit+0x3c>)
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	f042 0201 	orr.w	r2, r2, #1
 8000dd2:	619a      	str	r2, [r3, #24]
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	f002 0201 	and.w	r2, r2, #1
 8000dda:	9200      	str	r2, [sp, #0]
 8000ddc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000de4:	61da      	str	r2, [r3, #28]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000df0:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <HAL_MspInit+0x40>)
 8000df2:	6853      	ldr	r3, [r2, #4]
 8000df4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	b002      	add	sp, #8
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000

08000e0c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000e0c:	6802      	ldr	r2, [r0, #0]
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_CRC_MspInit+0x28>)
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d000      	beq.n	8000e16 <HAL_CRC_MspInit+0xa>
 8000e14:	4770      	bx	lr
{
 8000e16:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e18:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e2e:	b002      	add	sp, #8
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023000 	.word	0x40023000

08000e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b500      	push	{lr}
 8000e3a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8000e3c:	6803      	ldr	r3, [r0, #0]
 8000e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e42:	d005      	beq.n	8000e50 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000e44:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <HAL_TIM_Base_MspInit+0x68>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d016      	beq.n	8000e78 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e4a:	b003      	add	sp, #12
 8000e4c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e50:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e54:	69da      	ldr	r2, [r3, #28]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	61da      	str	r2, [r3, #28]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	4611      	mov	r1, r2
 8000e6a:	201c      	movs	r0, #28
 8000e6c:	f000 f9f8 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e70:	201c      	movs	r0, #28
 8000e72:	f000 fa2b 	bl	80012cc <HAL_NVIC_EnableIRQ>
 8000e76:	e7e8      	b.n	8000e4a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	f042 0202 	orr.w	r2, r2, #2
 8000e80:	61da      	str	r2, [r3, #28]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4611      	mov	r1, r2
 8000e90:	201d      	movs	r0, #29
 8000e92:	f000 f9e5 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e96:	201d      	movs	r0, #29
 8000e98:	f000 fa18 	bl	80012cc <HAL_NVIC_EnableIRQ>
}
 8000e9c:	e7d5      	b.n	8000e4a <HAL_TIM_Base_MspInit+0x12>
 8000e9e:	bf00      	nop
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	2300      	movs	r3, #0
 8000eae:	9304      	str	r3, [sp, #16]
 8000eb0:	9305      	str	r3, [sp, #20]
 8000eb2:	9306      	str	r3, [sp, #24]
 8000eb4:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8000eb6:	6803      	ldr	r3, [r0, #0]
 8000eb8:	4a47      	ldr	r2, [pc, #284]	; (8000fd8 <HAL_UART_MspInit+0x130>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d005      	beq.n	8000eca <HAL_UART_MspInit+0x22>
 8000ebe:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8000ec0:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <HAL_UART_MspInit+0x134>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d02b      	beq.n	8000f1e <HAL_UART_MspInit+0x76>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec6:	b008      	add	sp, #32
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eca:	4b45      	ldr	r3, [pc, #276]	; (8000fe0 <HAL_UART_MspInit+0x138>)
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	699a      	ldr	r2, [r3, #24]
 8000ed6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000eda:	9200      	str	r2, [sp, #0]
 8000edc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	699a      	ldr	r2, [r3, #24]
 8000ee0:	f042 0204 	orr.w	r2, r2, #4
 8000ee4:	619a      	str	r2, [r3, #24]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	4c39      	ldr	r4, [pc, #228]	; (8000fe4 <HAL_UART_MspInit+0x13c>)
 8000f00:	a904      	add	r1, sp, #16
 8000f02:	4620      	mov	r0, r4
 8000f04:	f000 ff9a 	bl	8001e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	a904      	add	r1, sp, #16
 8000f16:	4620      	mov	r0, r4
 8000f18:	f000 ff90 	bl	8001e3c <HAL_GPIO_Init>
 8000f1c:	e7d3      	b.n	8000ec6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_UART_MspInit+0x138>)
 8000f20:	69da      	ldr	r2, [r3, #28]
 8000f22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f26:	61da      	str	r2, [r3, #28]
 8000f28:	69da      	ldr	r2, [r3, #28]
 8000f2a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000f2e:	9202      	str	r2, [sp, #8]
 8000f30:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	f042 0208 	orr.w	r2, r2, #8
 8000f38:	619a      	str	r2, [r3, #24]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	9303      	str	r3, [sp, #12]
 8000f42:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f48:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	4e25      	ldr	r6, [pc, #148]	; (8000fe8 <HAL_UART_MspInit+0x140>)
 8000f54:	a904      	add	r1, sp, #16
 8000f56:	4630      	mov	r0, r6
 8000f58:	f000 ff70 	bl	8001e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2500      	movs	r5, #0
 8000f64:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	a904      	add	r1, sp, #16
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f000 ff66 	bl	8001e3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000f70:	481e      	ldr	r0, [pc, #120]	; (8000fec <HAL_UART_MspInit+0x144>)
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_UART_MspInit+0x148>)
 8000f74:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f76:	6045      	str	r5, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7e:	6105      	str	r5, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f80:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f82:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f84:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f86:	f000 f9d3 	bl	8001330 <HAL_DMA_Init>
 8000f8a:	b9f0      	cbnz	r0, 8000fca <HAL_UART_MspInit+0x122>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x144>)
 8000f8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000f90:	625c      	str	r4, [r3, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000f92:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x14c>)
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0x150>)
 8000f96:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	60c2      	str	r2, [r0, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa4:	6103      	str	r3, [r0, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa6:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000fa8:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000faa:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000fac:	f000 f9c0 	bl	8001330 <HAL_DMA_Init>
 8000fb0:	b970      	cbnz	r0, 8000fd0 <HAL_UART_MspInit+0x128>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_UART_MspInit+0x14c>)
 8000fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8000fb6:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4611      	mov	r1, r2
 8000fbc:	2027      	movs	r0, #39	; 0x27
 8000fbe:	f000 f94f 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fc2:	2027      	movs	r0, #39	; 0x27
 8000fc4:	f000 f982 	bl	80012cc <HAL_NVIC_EnableIRQ>
}
 8000fc8:	e77d      	b.n	8000ec6 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8000fca:	f7ff fefb 	bl	8000dc4 <Error_Handler>
 8000fce:	e7dd      	b.n	8000f8c <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8000fd0:	f7ff fef8 	bl	8000dc4 <Error_Handler>
 8000fd4:	e7ed      	b.n	8000fb2 <HAL_UART_MspInit+0x10a>
 8000fd6:	bf00      	nop
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40004800 	.word	0x40004800
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40010c00 	.word	0x40010c00
 8000fec:	20000868 	.word	0x20000868
 8000ff0:	40020030 	.word	0x40020030
 8000ff4:	200008ac 	.word	0x200008ac
 8000ff8:	4002001c 	.word	0x4002001c

08000ffc <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000ffc:	b530      	push	{r4, r5, lr}
 8000ffe:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001000:	2300      	movs	r3, #0
 8001002:	9304      	str	r3, [sp, #16]
  if (FSMC_Initialized) {
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_SRAM_MspInit+0x58>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b10b      	cbz	r3, 800100e <HAL_SRAM_MspInit+0x12>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800100a:	b007      	add	sp, #28
 800100c:	bd30      	pop	{r4, r5, pc}
  FSMC_Initialized = 1;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_SRAM_MspInit+0x58>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_SRAM_MspInit+0x5c>)
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101c:	615a      	str	r2, [r3, #20]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001028:	f64f 7380 	movw	r3, #65408	; 0xff80
 800102c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2502      	movs	r5, #2
 8001030:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001032:	2403      	movs	r4, #3
 8001034:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001036:	a902      	add	r1, sp, #8
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <HAL_SRAM_MspInit+0x60>)
 800103a:	f000 feff 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800103e:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8001042:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	a902      	add	r1, sp, #8
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_SRAM_MspInit+0x64>)
 800104c:	f000 fef6 	bl	8001e3c <HAL_GPIO_Init>
}
 8001050:	e7db      	b.n	800100a <HAL_SRAM_MspInit+0xe>
 8001052:	bf00      	nop
 8001054:	20000a50 	.word	0x20000a50
 8001058:	40021000 	.word	0x40021000
 800105c:	40011800 	.word	0x40011800
 8001060:	40011400 	.word	0x40011400

08001064 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler>

08001066 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler>

08001068 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler>

0800106a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler>

0800106c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler>

0800106e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001076:	f000 f8bb 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107a:	bd08      	pop	{r3, pc}

0800107c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800107c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800107e:	2010      	movs	r0, #16
 8001080:	f001 f834 	bl	80020ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001084:	bd08      	pop	{r3, pc}
	...

08001088 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 800108a:	4802      	ldr	r0, [pc, #8]	; (8001094 <DMA1_Channel1_IRQHandler+0xc>)
 800108c:	f000 fd64 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001090:	bd08      	pop	{r3, pc}
 8001092:	bf00      	nop
 8001094:	20000824 	.word	0x20000824

08001098 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800109a:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Channel2_IRQHandler+0xc>)
 800109c:	f000 fd5c 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80010a0:	bd08      	pop	{r3, pc}
 80010a2:	bf00      	nop
 80010a4:	200008ac 	.word	0x200008ac

080010a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Channel3_IRQHandler+0xc>)
 80010ac:	f000 fd54 	bl	8001b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010b0:	bd08      	pop	{r3, pc}
 80010b2:	bf00      	nop
 80010b4:	20000868 	.word	0x20000868

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM2_IRQHandler+0xc>)
 80010bc:	f001 fb81 	bl	80027c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c0:	bd08      	pop	{r3, pc}
 80010c2:	bf00      	nop
 80010c4:	20000938 	.word	0x20000938

080010c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM3_IRQHandler+0xc>)
 80010cc:	f001 fb79 	bl	80027c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010d0:	bd08      	pop	{r3, pc}
 80010d2:	bf00      	nop
 80010d4:	20000980 	.word	0x20000980

080010d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */


  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <USART3_IRQHandler+0xc>)
 80010dc:	f001 ff5e 	bl	8002f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010e0:	bd08      	pop	{r3, pc}
 80010e2:	bf00      	nop
 80010e4:	20000a0c 	.word	0x20000a0c

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b508      	push	{r3, lr}
 80010ea:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <_sbrk+0x38>)
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	b152      	cbz	r2, 8001108 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <_sbrk+0x38>)
 80010f4:	6810      	ldr	r0, [r2, #0]
 80010f6:	4403      	add	r3, r0
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <_sbrk+0x3c>)
 80010fa:	490b      	ldr	r1, [pc, #44]	; (8001128 <_sbrk+0x40>)
 80010fc:	1a52      	subs	r2, r2, r1
 80010fe:	4293      	cmp	r3, r2
 8001100:	d806      	bhi.n	8001110 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <_sbrk+0x38>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001106:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001108:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x38>)
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <_sbrk+0x44>)
 800110c:	6011      	str	r1, [r2, #0]
 800110e:	e7f0      	b.n	80010f2 <_sbrk+0xa>
    errno = ENOMEM;
 8001110:	f02b fcf0 	bl	802caf4 <__errno>
 8001114:	230c      	movs	r3, #12
 8001116:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800111c:	e7f3      	b.n	8001106 <_sbrk+0x1e>
 800111e:	bf00      	nop
 8001120:	20000a54 	.word	0x20000a54
 8001124:	20010000 	.word	0x20010000
 8001128:	00001000 	.word	0x00001000
 800112c:	2000c250 	.word	0x2000c250

08001130 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	4770      	bx	lr
	...

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115a:	f7ff ffe9 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f02b fccf 	bl	802cb00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff fc0f 	bl	8000984 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000800 	.word	0x20000800
  ldr r2, =_sidata
 8001170:	08033898 	.word	0x08033898
  ldr r2, =_sbss
 8001174:	20000800 	.word	0x20000800
  ldr r4, =_ebss
 8001178:	2000c250 	.word	0x2000c250

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b510      	push	{r4, lr}
 8001182:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_InitTick+0x40>)
 8001186:	7818      	ldrb	r0, [r3, #0]
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001190:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <HAL_InitTick+0x44>)
 8001192:	6810      	ldr	r0, [r2, #0]
 8001194:	fbb0 f0f3 	udiv	r0, r0, r3
 8001198:	f000 f8a6 	bl	80012e8 <HAL_SYSTICK_Config>
 800119c:	b968      	cbnz	r0, 80011ba <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	2c0f      	cmp	r4, #15
 80011a0:	d901      	bls.n	80011a6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011a2:	2001      	movs	r0, #1
 80011a4:	e00a      	b.n	80011bc <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a6:	2200      	movs	r2, #0
 80011a8:	4621      	mov	r1, r4
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ae:	f000 f857 	bl	8001260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_InitTick+0x48>)
 80011b4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2000      	movs	r0, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80011ba:	2001      	movs	r0, #1
}
 80011bc:	bd10      	pop	{r4, pc}
 80011be:	bf00      	nop
 80011c0:	20000004 	.word	0x20000004
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008

080011cc <HAL_Init>:
{
 80011cc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x20>)
 80011d0:	6813      	ldr	r3, [r2, #0]
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f82f 	bl	800123c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ffce 	bl	8001180 <HAL_InitTick>
  HAL_MspInit();
 80011e4:	f7ff fdf0 	bl	8000dc8 <HAL_MspInit>
}
 80011e8:	2000      	movs	r0, #0
 80011ea:	bd08      	pop	{r3, pc}
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011f0:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_IncTick+0x10>)
 80011f2:	6811      	ldr	r1, [r2, #0]
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_IncTick+0x14>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	440b      	add	r3, r1
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000a58 	.word	0x20000a58
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001208:	4b01      	ldr	r3, [pc, #4]	; (8001210 <HAL_GetTick+0x8>)
 800120a:	6818      	ldr	r0, [r3, #0]
}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000a58 	.word	0x20000a58

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff fff6 	bl	8001208 <HAL_GetTick>
 800121c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001222:	d002      	beq.n	800122a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_Delay+0x24>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800122a:	f7ff ffed 	bl	8001208 <HAL_GetTick>
 800122e:	1b40      	subs	r0, r0, r5
 8001230:	42a0      	cmp	r0, r4
 8001232:	d3fa      	bcc.n	800122a <HAL_Delay+0x16>
  {
  }
}
 8001234:	bd38      	pop	{r3, r4, r5, pc}
 8001236:	bf00      	nop
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4907      	ldr	r1, [pc, #28]	; (800125c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800123e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001240:	0203      	lsls	r3, r0, #8
 8001242:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800124a:	0412      	lsls	r2, r2, #16
 800124c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001258:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001260:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_NVIC_SetPriority+0x64>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126a:	f1c3 0c07 	rsb	ip, r3, #7
 800126e:	f1bc 0f04 	cmp.w	ip, #4
 8001272:	bf28      	it	cs
 8001274:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001278:	f103 0e04 	add.w	lr, r3, #4
 800127c:	f1be 0f06 	cmp.w	lr, #6
 8001280:	bf8c      	ite	hi
 8001282:	3b03      	subhi	r3, #3
 8001284:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001286:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800128a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800128e:	ea21 010c 	bic.w	r1, r1, ip
 8001292:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	fa0e f303 	lsl.w	r3, lr, r3
 8001298:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800129e:	2800      	cmp	r0, #0
 80012a0:	db09      	blt.n	80012b6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	0109      	lsls	r1, r1, #4
 80012a4:	b2c9      	uxtb	r1, r1
 80012a6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012aa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012ae:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	f000 000f 	and.w	r0, r0, #15
 80012ba:	0109      	lsls	r1, r1, #4
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	4b02      	ldr	r3, [pc, #8]	; (80012c8 <HAL_NVIC_SetPriority+0x68>)
 80012c0:	5419      	strb	r1, [r3, r0]
 80012c2:	e7f6      	b.n	80012b2 <HAL_NVIC_SetPriority+0x52>
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	e000ed14 	.word	0xe000ed14

080012cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012cc:	2800      	cmp	r0, #0
 80012ce:	db08      	blt.n	80012e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d0:	0942      	lsrs	r2, r0, #5
 80012d2:	f000 001f 	and.w	r0, r0, #31
 80012d6:	2301      	movs	r3, #1
 80012d8:	fa03 f000 	lsl.w	r0, r3, r0
 80012dc:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <HAL_NVIC_EnableIRQ+0x18>)
 80012de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	3801      	subs	r0, #1
 80012ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012ee:	d20b      	bcs.n	8001308 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80012f4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <HAL_SYSTICK_Config+0x24>)
 80012f8:	21f0      	movs	r1, #240	; 0xf0
 80012fa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fe:	2000      	movs	r0, #0
 8001300:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	2207      	movs	r2, #7
 8001304:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001306:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001308:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001310:	b158      	cbz	r0, 800132a <HAL_CRC_Init+0x1a>
{
 8001312:	b510      	push	{r4, lr}
 8001314:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001316:	7943      	ldrb	r3, [r0, #5]
 8001318:	b11b      	cbz	r3, 8001322 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800131a:	2301      	movs	r3, #1
 800131c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800131e:	2000      	movs	r0, #0
}
 8001320:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001322:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001324:	f7ff fd72 	bl	8000e0c <HAL_CRC_MspInit>
 8001328:	e7f7      	b.n	800131a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800132a:	2001      	movs	r0, #1
}
 800132c:	4770      	bx	lr
	...

08001330 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001330:	2800      	cmp	r0, #0
 8001332:	d03a      	beq.n	80013aa <HAL_DMA_Init+0x7a>
{
 8001334:	b410      	push	{r4}
 8001336:	4602      	mov	r2, r0
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001338:	6800      	ldr	r0, [r0, #0]
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_DMA_Init+0x80>)
 800133c:	4298      	cmp	r0, r3
 800133e:	d829      	bhi.n	8001394 <HAL_DMA_Init+0x64>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_DMA_Init+0x84>)
 8001342:	4403      	add	r3, r0
 8001344:	491c      	ldr	r1, [pc, #112]	; (80013b8 <HAL_DMA_Init+0x88>)
 8001346:	fba1 1303 	umull	r1, r3, r1, r3
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_DMA_Init+0x8c>)
 8001352:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001354:	2302      	movs	r3, #2
 8001356:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800135a:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800135c:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8001360:	f021 0130 	bic.w	r1, r1, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001364:	6853      	ldr	r3, [r2, #4]
 8001366:	6894      	ldr	r4, [r2, #8]
 8001368:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	68d4      	ldr	r4, [r2, #12]
 800136c:	4323      	orrs	r3, r4
 800136e:	6914      	ldr	r4, [r2, #16]
 8001370:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	6954      	ldr	r4, [r2, #20]
 8001374:	4323      	orrs	r3, r4
 8001376:	6994      	ldr	r4, [r2, #24]
 8001378:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	69d4      	ldr	r4, [r2, #28]
 800137c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800137e:	430b      	orrs	r3, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001380:	6003      	str	r3, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001382:	2000      	movs	r0, #0
 8001384:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001386:	2301      	movs	r3, #1
 8001388:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800138c:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8001390:	bc10      	pop	{r4}
 8001392:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_DMA_Init+0x90>)
 8001396:	4403      	add	r3, r0
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <HAL_DMA_Init+0x88>)
 800139a:	fba1 1303 	umull	r1, r3, r1, r3
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_DMA_Init+0x94>)
 80013a6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013a8:	e7d4      	b.n	8001354 <HAL_DMA_Init+0x24>
    return HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40020407 	.word	0x40020407
 80013b4:	bffdfff8 	.word	0xbffdfff8
 80013b8:	cccccccd 	.word	0xcccccccd
 80013bc:	40020000 	.word	0x40020000
 80013c0:	bffdfbf8 	.word	0xbffdfbf8
 80013c4:	40020400 	.word	0x40020400

080013c8 <HAL_DMA_Start>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013c8:	f890 c020 	ldrb.w	ip, [r0, #32]
 80013cc:	f1bc 0f01 	cmp.w	ip, #1
 80013d0:	d033      	beq.n	800143a <HAL_DMA_Start+0x72>
 80013d2:	f04f 0c01 	mov.w	ip, #1
 80013d6:	f880 c020 	strb.w	ip, [r0, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80013da:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
 80013de:	f1bc 0f01 	cmp.w	ip, #1
 80013e2:	d004      	beq.n	80013ee <HAL_DMA_Start+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80013e4:	2300      	movs	r3, #0
 80013e6:	f880 3020 	strb.w	r3, [r0, #32]
   status = HAL_BUSY;
 80013ea:	2002      	movs	r0, #2
 80013ec:	4770      	bx	lr
{
 80013ee:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f0:	2402      	movs	r4, #2
 80013f2:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	2400      	movs	r4, #0
 80013f8:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80013fa:	6805      	ldr	r5, [r0, #0]
 80013fc:	682c      	ldr	r4, [r5, #0]
 80013fe:	f024 0401 	bic.w	r4, r4, #1
 8001402:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001404:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001406:	2401      	movs	r4, #1
 8001408:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800140a:	40b4      	lsls	r4, r6
 800140c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800140e:	6804      	ldr	r4, [r0, #0]
 8001410:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001412:	6843      	ldr	r3, [r0, #4]
 8001414:	2b10      	cmp	r3, #16
 8001416:	d00b      	beq.n	8001430 <HAL_DMA_Start+0x68>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001418:	6803      	ldr	r3, [r0, #0]
 800141a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800141c:	6803      	ldr	r3, [r0, #0]
 800141e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_ENABLE(hdma);
 8001420:	6802      	ldr	r2, [r0, #0]
 8001422:	6813      	ldr	r3, [r2, #0]
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800142a:	2000      	movs	r0, #0
}
 800142c:	bc70      	pop	{r4, r5, r6}
 800142e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001430:	6803      	ldr	r3, [r0, #0]
 8001432:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001434:	6803      	ldr	r3, [r0, #0]
 8001436:	60d9      	str	r1, [r3, #12]
 8001438:	e7f2      	b.n	8001420 <HAL_DMA_Start+0x58>
  __HAL_LOCK(hdma);
 800143a:	2002      	movs	r0, #2
}
 800143c:	4770      	bx	lr

0800143e <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001442:	2b02      	cmp	r3, #2
 8001444:	d006      	beq.n	8001454 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001446:	2304      	movs	r3, #4
 8001448:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800144a:	2300      	movs	r3, #0
 800144c:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001450:	2001      	movs	r0, #1
 8001452:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	6802      	ldr	r2, [r0, #0]
 8001456:	6813      	ldr	r3, [r2, #0]
 8001458:	f023 030e 	bic.w	r3, r3, #14
 800145c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800145e:	6802      	ldr	r2, [r0, #0]
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001468:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800146a:	2201      	movs	r2, #1
 800146c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001474:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8001478:	2300      	movs	r3, #0
 800147a:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 800147e:	4618      	mov	r0, r3
}
 8001480:	4770      	bx	lr
	...

08001484 <HAL_DMA_Abort_IT>:
{  
 8001484:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001486:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800148a:	2b02      	cmp	r3, #2
 800148c:	d003      	beq.n	8001496 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148e:	2304      	movs	r3, #4
 8001490:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001492:	2001      	movs	r0, #1
}
 8001494:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001496:	6802      	ldr	r2, [r0, #0]
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f023 030e 	bic.w	r3, r3, #14
 800149e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80014a0:	6802      	ldr	r2, [r0, #0]
 80014a2:	6813      	ldr	r3, [r2, #0]
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014aa:	6803      	ldr	r3, [r0, #0]
 80014ac:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <HAL_DMA_Abort_IT+0x154>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d94d      	bls.n	800154e <HAL_DMA_Abort_IT+0xca>
 80014b2:	3a78      	subs	r2, #120	; 0x78
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d023      	beq.n	8001500 <HAL_DMA_Abort_IT+0x7c>
 80014b8:	3214      	adds	r2, #20
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d02f      	beq.n	800151e <HAL_DMA_Abort_IT+0x9a>
 80014be:	3214      	adds	r2, #20
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d02e      	beq.n	8001522 <HAL_DMA_Abort_IT+0x9e>
 80014c4:	3214      	adds	r2, #20
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d02e      	beq.n	8001528 <HAL_DMA_Abort_IT+0xa4>
 80014ca:	3214      	adds	r2, #20
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d02e      	beq.n	800152e <HAL_DMA_Abort_IT+0xaa>
 80014d0:	3214      	adds	r2, #20
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d02e      	beq.n	8001534 <HAL_DMA_Abort_IT+0xb0>
 80014d6:	3214      	adds	r2, #20
 80014d8:	4293      	cmp	r3, r2
 80014da:	d02e      	beq.n	800153a <HAL_DMA_Abort_IT+0xb6>
 80014dc:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d02d      	beq.n	8001540 <HAL_DMA_Abort_IT+0xbc>
 80014e4:	3214      	adds	r2, #20
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d02c      	beq.n	8001544 <HAL_DMA_Abort_IT+0xc0>
 80014ea:	3214      	adds	r2, #20
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d02b      	beq.n	8001548 <HAL_DMA_Abort_IT+0xc4>
 80014f0:	3214      	adds	r2, #20
 80014f2:	4293      	cmp	r3, r2
 80014f4:	bf0c      	ite	eq
 80014f6:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80014fa:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80014fe:	e000      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 8001500:	2301      	movs	r3, #1
 8001502:	4a36      	ldr	r2, [pc, #216]	; (80015dc <HAL_DMA_Abort_IT+0x158>)
 8001504:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001506:	2301      	movs	r3, #1
 8001508:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800150c:	2300      	movs	r3, #0
 800150e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001512:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05d      	beq.n	80015d4 <HAL_DMA_Abort_IT+0x150>
      hdma->XferAbortCallback(hdma);
 8001518:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800151a:	2000      	movs	r0, #0
 800151c:	e7ba      	b.n	8001494 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800151e:	2310      	movs	r3, #16
 8001520:	e7ef      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 8001522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001526:	e7ec      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	e7e9      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 800152e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001532:	e7e6      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 8001534:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001538:	e7e3      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 800153a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800153e:	e7e0      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 8001540:	2301      	movs	r3, #1
 8001542:	e7de      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 8001544:	2310      	movs	r3, #16
 8001546:	e7dc      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 8001548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154c:	e7d9      	b.n	8001502 <HAL_DMA_Abort_IT+0x7e>
 800154e:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_DMA_Abort_IT+0x15c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d023      	beq.n	800159c <HAL_DMA_Abort_IT+0x118>
 8001554:	3214      	adds	r2, #20
 8001556:	4293      	cmp	r3, r2
 8001558:	d024      	beq.n	80015a4 <HAL_DMA_Abort_IT+0x120>
 800155a:	3214      	adds	r2, #20
 800155c:	4293      	cmp	r3, r2
 800155e:	d023      	beq.n	80015a8 <HAL_DMA_Abort_IT+0x124>
 8001560:	3214      	adds	r2, #20
 8001562:	4293      	cmp	r3, r2
 8001564:	d023      	beq.n	80015ae <HAL_DMA_Abort_IT+0x12a>
 8001566:	3214      	adds	r2, #20
 8001568:	4293      	cmp	r3, r2
 800156a:	d023      	beq.n	80015b4 <HAL_DMA_Abort_IT+0x130>
 800156c:	3214      	adds	r2, #20
 800156e:	4293      	cmp	r3, r2
 8001570:	d023      	beq.n	80015ba <HAL_DMA_Abort_IT+0x136>
 8001572:	3214      	adds	r2, #20
 8001574:	4293      	cmp	r3, r2
 8001576:	d023      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x13c>
 8001578:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800157c:	4293      	cmp	r3, r2
 800157e:	d022      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x142>
 8001580:	3214      	adds	r2, #20
 8001582:	4293      	cmp	r3, r2
 8001584:	d021      	beq.n	80015ca <HAL_DMA_Abort_IT+0x146>
 8001586:	3214      	adds	r2, #20
 8001588:	4293      	cmp	r3, r2
 800158a:	d020      	beq.n	80015ce <HAL_DMA_Abort_IT+0x14a>
 800158c:	3214      	adds	r2, #20
 800158e:	4293      	cmp	r3, r2
 8001590:	bf0c      	ite	eq
 8001592:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001596:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 800159a:	e000      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 800159c:	2301      	movs	r3, #1
 800159e:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_DMA_Abort_IT+0x160>)
 80015a0:	6053      	str	r3, [r2, #4]
 80015a2:	e7b0      	b.n	8001506 <HAL_DMA_Abort_IT+0x82>
 80015a4:	2310      	movs	r3, #16
 80015a6:	e7fa      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ac:	e7f7      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	e7f4      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	e7f1      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015be:	e7ee      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c4:	e7eb      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e7e9      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015ca:	2310      	movs	r3, #16
 80015cc:	e7e7      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
 80015ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d2:	e7e4      	b.n	800159e <HAL_DMA_Abort_IT+0x11a>
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2000      	movs	r0, #0
 80015d6:	e75d      	b.n	8001494 <HAL_DMA_Abort_IT+0x10>
 80015d8:	40020080 	.word	0x40020080
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020008 	.word	0x40020008
 80015e4:	40020000 	.word	0x40020000

080015e8 <HAL_DMA_PollForTransfer>:
{
 80015e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ec:	b083      	sub	sp, #12
 80015ee:	4605      	mov	r5, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015f0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d008      	beq.n	800160a <HAL_DMA_PollForTransfer+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	2304      	movs	r3, #4
 80015fa:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80015fc:	2300      	movs	r3, #0
 80015fe:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
}
 8001604:	b003      	add	sp, #12
 8001606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800160a:	468b      	mov	fp, r1
 800160c:	4614      	mov	r4, r2
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 800160e:	6806      	ldr	r6, [r0, #0]
 8001610:	6833      	ldr	r3, [r6, #0]
 8001612:	f013 0f20 	tst.w	r3, #32
 8001616:	d127      	bne.n	8001668 <HAL_DMA_PollForTransfer+0x80>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001618:	bb59      	cbnz	r1, 8001672 <HAL_DMA_PollForTransfer+0x8a>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 800161a:	4baa      	ldr	r3, [pc, #680]	; (80018c4 <HAL_DMA_PollForTransfer+0x2dc>)
 800161c:	429e      	cmp	r6, r3
 800161e:	d04f      	beq.n	80016c0 <HAL_DMA_PollForTransfer+0xd8>
 8001620:	3314      	adds	r3, #20
 8001622:	429e      	cmp	r6, r3
 8001624:	d062      	beq.n	80016ec <HAL_DMA_PollForTransfer+0x104>
 8001626:	3314      	adds	r3, #20
 8001628:	429e      	cmp	r6, r3
 800162a:	d061      	beq.n	80016f0 <HAL_DMA_PollForTransfer+0x108>
 800162c:	3314      	adds	r3, #20
 800162e:	429e      	cmp	r6, r3
 8001630:	d061      	beq.n	80016f6 <HAL_DMA_PollForTransfer+0x10e>
 8001632:	3314      	adds	r3, #20
 8001634:	429e      	cmp	r6, r3
 8001636:	d061      	beq.n	80016fc <HAL_DMA_PollForTransfer+0x114>
 8001638:	3314      	adds	r3, #20
 800163a:	429e      	cmp	r6, r3
 800163c:	d061      	beq.n	8001702 <HAL_DMA_PollForTransfer+0x11a>
 800163e:	3314      	adds	r3, #20
 8001640:	429e      	cmp	r6, r3
 8001642:	d061      	beq.n	8001708 <HAL_DMA_PollForTransfer+0x120>
 8001644:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8001648:	429e      	cmp	r6, r3
 800164a:	d060      	beq.n	800170e <HAL_DMA_PollForTransfer+0x126>
 800164c:	3314      	adds	r3, #20
 800164e:	429e      	cmp	r6, r3
 8001650:	d05f      	beq.n	8001712 <HAL_DMA_PollForTransfer+0x12a>
 8001652:	3314      	adds	r3, #20
 8001654:	429e      	cmp	r6, r3
 8001656:	d05e      	beq.n	8001716 <HAL_DMA_PollForTransfer+0x12e>
 8001658:	3314      	adds	r3, #20
 800165a:	429e      	cmp	r6, r3
 800165c:	bf0c      	ite	eq
 800165e:	f44f 5600 	moveq.w	r6, #8192	; 0x2000
 8001662:	f44f 3600 	movne.w	r6, #131072	; 0x20000
 8001666:	e02c      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166c:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800166e:	2001      	movs	r0, #1
 8001670:	e7c8      	b.n	8001604 <HAL_DMA_PollForTransfer+0x1c>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 8001672:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <HAL_DMA_PollForTransfer+0x2dc>)
 8001674:	429e      	cmp	r6, r3
 8001676:	d051      	beq.n	800171c <HAL_DMA_PollForTransfer+0x134>
 8001678:	3314      	adds	r3, #20
 800167a:	429e      	cmp	r6, r3
 800167c:	d050      	beq.n	8001720 <HAL_DMA_PollForTransfer+0x138>
 800167e:	3314      	adds	r3, #20
 8001680:	429e      	cmp	r6, r3
 8001682:	d04f      	beq.n	8001724 <HAL_DMA_PollForTransfer+0x13c>
 8001684:	3314      	adds	r3, #20
 8001686:	429e      	cmp	r6, r3
 8001688:	d04f      	beq.n	800172a <HAL_DMA_PollForTransfer+0x142>
 800168a:	3314      	adds	r3, #20
 800168c:	429e      	cmp	r6, r3
 800168e:	d04f      	beq.n	8001730 <HAL_DMA_PollForTransfer+0x148>
 8001690:	3314      	adds	r3, #20
 8001692:	429e      	cmp	r6, r3
 8001694:	d04f      	beq.n	8001736 <HAL_DMA_PollForTransfer+0x14e>
 8001696:	3314      	adds	r3, #20
 8001698:	429e      	cmp	r6, r3
 800169a:	d04f      	beq.n	800173c <HAL_DMA_PollForTransfer+0x154>
 800169c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 80016a0:	429e      	cmp	r6, r3
 80016a2:	d04e      	beq.n	8001742 <HAL_DMA_PollForTransfer+0x15a>
 80016a4:	3314      	adds	r3, #20
 80016a6:	429e      	cmp	r6, r3
 80016a8:	d04d      	beq.n	8001746 <HAL_DMA_PollForTransfer+0x15e>
 80016aa:	3314      	adds	r3, #20
 80016ac:	429e      	cmp	r6, r3
 80016ae:	d04c      	beq.n	800174a <HAL_DMA_PollForTransfer+0x162>
 80016b0:	3314      	adds	r3, #20
 80016b2:	429e      	cmp	r6, r3
 80016b4:	bf0c      	ite	eq
 80016b6:	f44f 4680 	moveq.w	r6, #16384	; 0x4000
 80016ba:	f44f 2680 	movne.w	r6, #262144	; 0x40000
 80016be:	e000      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 80016c0:	2602      	movs	r6, #2
  tickstart = HAL_GetTick();
 80016c2:	f7ff fda1 	bl	8001208 <HAL_GetTick>
 80016c6:	9001      	str	r0, [sp, #4]
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80016c8:	4f7f      	ldr	r7, [pc, #508]	; (80018c8 <HAL_DMA_PollForTransfer+0x2e0>)
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80016ca:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 80018c4 <HAL_DMA_PollForTransfer+0x2dc>
 80016ce:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 80018cc <HAL_DMA_PollForTransfer+0x2e4>
 80016d2:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 80018d0 <HAL_DMA_PollForTransfer+0x2e8>
 80016d6:	f8cd b000 	str.w	fp, [sp]
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80016da:	682b      	ldr	r3, [r5, #0]
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80016dc:	487d      	ldr	r0, [pc, #500]	; (80018d4 <HAL_DMA_PollForTransfer+0x2ec>)
 80016de:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 80018d8 <HAL_DMA_PollForTransfer+0x2f0>
 80016e2:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 80018dc <HAL_DMA_PollForTransfer+0x2f4>
 80016e6:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 80018e0 <HAL_DMA_PollForTransfer+0x2f8>
 80016ea:	e037      	b.n	800175c <HAL_DMA_PollForTransfer+0x174>
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 80016ec:	2620      	movs	r6, #32
 80016ee:	e7e8      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 80016f0:	f44f 7600 	mov.w	r6, #512	; 0x200
 80016f4:	e7e5      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 80016f6:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80016fa:	e7e2      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 80016fc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001700:	e7df      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001702:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001706:	e7dc      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001708:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800170c:	e7d9      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 800170e:	2602      	movs	r6, #2
 8001710:	e7d7      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001712:	2620      	movs	r6, #32
 8001714:	e7d5      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001716:	f44f 7600 	mov.w	r6, #512	; 0x200
 800171a:	e7d2      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 800171c:	2604      	movs	r6, #4
 800171e:	e7d0      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001720:	2640      	movs	r6, #64	; 0x40
 8001722:	e7ce      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001724:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8001728:	e7cb      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 800172a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 800172e:	e7c8      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001730:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8001734:	e7c5      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001736:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 800173a:	e7c2      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 800173c:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8001740:	e7bf      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001742:	2604      	movs	r6, #4
 8001744:	e7bd      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 8001746:	2640      	movs	r6, #64	; 0x40
 8001748:	e7bb      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
 800174a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800174e:	e7b8      	b.n	80016c2 <HAL_DMA_PollForTransfer+0xda>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 8001750:	2208      	movs	r2, #8
 8001752:	4211      	tst	r1, r2
 8001754:	d144      	bne.n	80017e0 <HAL_DMA_PollForTransfer+0x1f8>
    if(Timeout != HAL_MAX_DELAY)
 8001756:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800175a:	d168      	bne.n	800182e <HAL_DMA_PollForTransfer+0x246>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800175c:	42bb      	cmp	r3, r7
 800175e:	f240 80c3 	bls.w	80018e8 <HAL_DMA_PollForTransfer+0x300>
 8001762:	4a60      	ldr	r2, [pc, #384]	; (80018e4 <HAL_DMA_PollForTransfer+0x2fc>)
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	4232      	tst	r2, r6
 8001768:	d174      	bne.n	8001854 <HAL_DMA_PollForTransfer+0x26c>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_DMA_PollForTransfer+0x2fc>)
 800176c:	6811      	ldr	r1, [r2, #0]
 800176e:	4543      	cmp	r3, r8
 8001770:	d0ee      	beq.n	8001750 <HAL_DMA_PollForTransfer+0x168>
 8001772:	454b      	cmp	r3, r9
 8001774:	d019      	beq.n	80017aa <HAL_DMA_PollForTransfer+0x1c2>
 8001776:	4553      	cmp	r3, sl
 8001778:	d019      	beq.n	80017ae <HAL_DMA_PollForTransfer+0x1c6>
 800177a:	4283      	cmp	r3, r0
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_PollForTransfer+0x1cc>
 800177e:	4563      	cmp	r3, ip
 8001780:	d01b      	beq.n	80017ba <HAL_DMA_PollForTransfer+0x1d2>
 8001782:	4573      	cmp	r3, lr
 8001784:	d01c      	beq.n	80017c0 <HAL_DMA_PollForTransfer+0x1d8>
 8001786:	42bb      	cmp	r3, r7
 8001788:	d01d      	beq.n	80017c6 <HAL_DMA_PollForTransfer+0x1de>
 800178a:	455b      	cmp	r3, fp
 800178c:	d01e      	beq.n	80017cc <HAL_DMA_PollForTransfer+0x1e4>
 800178e:	321c      	adds	r2, #28
 8001790:	4293      	cmp	r3, r2
 8001792:	d01d      	beq.n	80017d0 <HAL_DMA_PollForTransfer+0x1e8>
 8001794:	3214      	adds	r2, #20
 8001796:	4293      	cmp	r3, r2
 8001798:	d01c      	beq.n	80017d4 <HAL_DMA_PollForTransfer+0x1ec>
 800179a:	3214      	adds	r2, #20
 800179c:	4293      	cmp	r3, r2
 800179e:	bf0c      	ite	eq
 80017a0:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 80017a4:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 80017a8:	e7d3      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	e7d1      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b2:	e7ce      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017b8:	e7cb      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017be:	e7c8      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017c4:	e7c5      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ca:	e7c2      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017cc:	2208      	movs	r2, #8
 80017ce:	e7c0      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	e7be      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d8:	e7bb      	b.n	8001752 <HAL_DMA_PollForTransfer+0x16a>
 80017da:	2208      	movs	r2, #8
 80017dc:	4211      	tst	r1, r2
 80017de:	d0ba      	beq.n	8001756 <HAL_DMA_PollForTransfer+0x16e>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017e0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80017e2:	2001      	movs	r0, #1
 80017e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80017e6:	fa00 f303 	lsl.w	r3, r0, r3
 80017ea:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80017ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80017ee:	4303      	orrs	r3, r0
 80017f0:	63ab      	str	r3, [r5, #56]	; 0x38
      hdma->State= HAL_DMA_STATE_READY;
 80017f2:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
      __HAL_UNLOCK(hdma);
 80017f6:	2300      	movs	r3, #0
 80017f8:	f885 3020 	strb.w	r3, [r5, #32]
      return HAL_ERROR;
 80017fc:	e702      	b.n	8001604 <HAL_DMA_PollForTransfer+0x1c>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	e7ec      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 8001802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001806:	e7e9      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 8001808:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800180c:	e7e6      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 800180e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001812:	e7e3      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 8001814:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001818:	e7e0      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 800181a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181e:	e7dd      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 8001820:	2208      	movs	r2, #8
 8001822:	e7db      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	e7d9      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
 8001828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800182c:	e7d6      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800182e:	b134      	cbz	r4, 800183e <HAL_DMA_PollForTransfer+0x256>
 8001830:	f7ff fcea 	bl	8001208 <HAL_GetTick>
 8001834:	9b01      	ldr	r3, [sp, #4]
 8001836:	1ac0      	subs	r0, r0, r3
 8001838:	42a0      	cmp	r0, r4
 800183a:	f67f af4e 	bls.w	80016da <HAL_DMA_PollForTransfer+0xf2>
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 800183e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	63ab      	str	r3, [r5, #56]	; 0x38
        hdma->State = HAL_DMA_STATE_READY;
 8001846:	2001      	movs	r0, #1
 8001848:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        __HAL_UNLOCK(hdma);
 800184c:	2300      	movs	r3, #0
 800184e:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 8001852:	e6d7      	b.n	8001604 <HAL_DMA_PollForTransfer+0x1c>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001854:	f8dd b000 	ldr.w	fp, [sp]
 8001858:	f1bb 0f00 	cmp.w	fp, #0
 800185c:	f000 80ac 	beq.w	80019b8 <HAL_DMA_PollForTransfer+0x3d0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <HAL_DMA_PollForTransfer+0x2dc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	f000 8137 	beq.w	8001ad6 <HAL_DMA_PollForTransfer+0x4ee>
 8001868:	3214      	adds	r2, #20
 800186a:	4293      	cmp	r3, r2
 800186c:	f000 8137 	beq.w	8001ade <HAL_DMA_PollForTransfer+0x4f6>
 8001870:	3214      	adds	r2, #20
 8001872:	4293      	cmp	r3, r2
 8001874:	f000 8135 	beq.w	8001ae2 <HAL_DMA_PollForTransfer+0x4fa>
 8001878:	3214      	adds	r2, #20
 800187a:	4293      	cmp	r3, r2
 800187c:	f000 8134 	beq.w	8001ae8 <HAL_DMA_PollForTransfer+0x500>
 8001880:	3214      	adds	r2, #20
 8001882:	4293      	cmp	r3, r2
 8001884:	f000 8133 	beq.w	8001aee <HAL_DMA_PollForTransfer+0x506>
 8001888:	3214      	adds	r2, #20
 800188a:	4293      	cmp	r3, r2
 800188c:	f000 8132 	beq.w	8001af4 <HAL_DMA_PollForTransfer+0x50c>
 8001890:	3214      	adds	r2, #20
 8001892:	4293      	cmp	r3, r2
 8001894:	f000 8131 	beq.w	8001afa <HAL_DMA_PollForTransfer+0x512>
 8001898:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800189c:	4293      	cmp	r3, r2
 800189e:	f000 812f 	beq.w	8001b00 <HAL_DMA_PollForTransfer+0x518>
 80018a2:	3214      	adds	r2, #20
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f000 812d 	beq.w	8001b04 <HAL_DMA_PollForTransfer+0x51c>
 80018aa:	3214      	adds	r2, #20
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f000 812b 	beq.w	8001b08 <HAL_DMA_PollForTransfer+0x520>
 80018b2:	3214      	adds	r2, #20
 80018b4:	4293      	cmp	r3, r2
 80018b6:	bf0c      	ite	eq
 80018b8:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80018bc:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80018c0:	e10a      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 80018c2:	bf00      	nop
 80018c4:	40020008 	.word	0x40020008
 80018c8:	40020080 	.word	0x40020080
 80018cc:	4002001c 	.word	0x4002001c
 80018d0:	40020030 	.word	0x40020030
 80018d4:	40020044 	.word	0x40020044
 80018d8:	40020058 	.word	0x40020058
 80018dc:	4002006c 	.word	0x4002006c
 80018e0:	40020408 	.word	0x40020408
 80018e4:	40020400 	.word	0x40020400
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80018e8:	4a97      	ldr	r2, [pc, #604]	; (8001b48 <HAL_DMA_PollForTransfer+0x560>)
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4232      	tst	r2, r6
 80018ee:	d12a      	bne.n	8001946 <HAL_DMA_PollForTransfer+0x35e>
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 80018f0:	4a95      	ldr	r2, [pc, #596]	; (8001b48 <HAL_DMA_PollForTransfer+0x560>)
 80018f2:	6811      	ldr	r1, [r2, #0]
 80018f4:	4543      	cmp	r3, r8
 80018f6:	f43f af70 	beq.w	80017da <HAL_DMA_PollForTransfer+0x1f2>
 80018fa:	454b      	cmp	r3, r9
 80018fc:	f43f af7f 	beq.w	80017fe <HAL_DMA_PollForTransfer+0x216>
 8001900:	4553      	cmp	r3, sl
 8001902:	f43f af7e 	beq.w	8001802 <HAL_DMA_PollForTransfer+0x21a>
 8001906:	4283      	cmp	r3, r0
 8001908:	f43f af7e 	beq.w	8001808 <HAL_DMA_PollForTransfer+0x220>
 800190c:	4563      	cmp	r3, ip
 800190e:	f43f af7e 	beq.w	800180e <HAL_DMA_PollForTransfer+0x226>
 8001912:	4573      	cmp	r3, lr
 8001914:	f43f af7e 	beq.w	8001814 <HAL_DMA_PollForTransfer+0x22c>
 8001918:	42bb      	cmp	r3, r7
 800191a:	f43f af7e 	beq.w	800181a <HAL_DMA_PollForTransfer+0x232>
 800191e:	455b      	cmp	r3, fp
 8001920:	f43f af7e 	beq.w	8001820 <HAL_DMA_PollForTransfer+0x238>
 8001924:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 8001928:	4293      	cmp	r3, r2
 800192a:	f43f af7b 	beq.w	8001824 <HAL_DMA_PollForTransfer+0x23c>
 800192e:	3214      	adds	r2, #20
 8001930:	4293      	cmp	r3, r2
 8001932:	f43f af79 	beq.w	8001828 <HAL_DMA_PollForTransfer+0x240>
 8001936:	3214      	adds	r2, #20
 8001938:	4293      	cmp	r3, r2
 800193a:	bf0c      	ite	eq
 800193c:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 8001940:	f44f 2200 	movne.w	r2, #524288	; 0x80000
 8001944:	e74a      	b.n	80017dc <HAL_DMA_PollForTransfer+0x1f4>
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001946:	f8dd b000 	ldr.w	fp, [sp]
 800194a:	f1bb 0f00 	cmp.w	fp, #0
 800194e:	d07f      	beq.n	8001a50 <HAL_DMA_PollForTransfer+0x468>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001950:	4a7e      	ldr	r2, [pc, #504]	; (8001b4c <HAL_DMA_PollForTransfer+0x564>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d884      	bhi.n	8001860 <HAL_DMA_PollForTransfer+0x278>
 8001956:	4a7e      	ldr	r2, [pc, #504]	; (8001b50 <HAL_DMA_PollForTransfer+0x568>)
 8001958:	4293      	cmp	r3, r2
 800195a:	f000 80d8 	beq.w	8001b0e <HAL_DMA_PollForTransfer+0x526>
 800195e:	3214      	adds	r2, #20
 8001960:	4293      	cmp	r3, r2
 8001962:	f000 80d8 	beq.w	8001b16 <HAL_DMA_PollForTransfer+0x52e>
 8001966:	3214      	adds	r2, #20
 8001968:	4293      	cmp	r3, r2
 800196a:	f000 80d6 	beq.w	8001b1a <HAL_DMA_PollForTransfer+0x532>
 800196e:	3214      	adds	r2, #20
 8001970:	4293      	cmp	r3, r2
 8001972:	f000 80d5 	beq.w	8001b20 <HAL_DMA_PollForTransfer+0x538>
 8001976:	3214      	adds	r2, #20
 8001978:	4293      	cmp	r3, r2
 800197a:	f000 80d4 	beq.w	8001b26 <HAL_DMA_PollForTransfer+0x53e>
 800197e:	3214      	adds	r2, #20
 8001980:	4293      	cmp	r3, r2
 8001982:	f000 80d3 	beq.w	8001b2c <HAL_DMA_PollForTransfer+0x544>
 8001986:	3214      	adds	r2, #20
 8001988:	4293      	cmp	r3, r2
 800198a:	f000 80d2 	beq.w	8001b32 <HAL_DMA_PollForTransfer+0x54a>
 800198e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001992:	4293      	cmp	r3, r2
 8001994:	f000 80d0 	beq.w	8001b38 <HAL_DMA_PollForTransfer+0x550>
 8001998:	3214      	adds	r2, #20
 800199a:	4293      	cmp	r3, r2
 800199c:	f000 80ce 	beq.w	8001b3c <HAL_DMA_PollForTransfer+0x554>
 80019a0:	3214      	adds	r2, #20
 80019a2:	4293      	cmp	r3, r2
 80019a4:	f000 80cc 	beq.w	8001b40 <HAL_DMA_PollForTransfer+0x558>
 80019a8:	3214      	adds	r2, #20
 80019aa:	4293      	cmp	r3, r2
 80019ac:	bf0c      	ite	eq
 80019ae:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 80019b2:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80019b6:	e0ab      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019b8:	4a64      	ldr	r2, [pc, #400]	; (8001b4c <HAL_DMA_PollForTransfer+0x564>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d948      	bls.n	8001a50 <HAL_DMA_PollForTransfer+0x468>
 80019be:	3a78      	subs	r2, #120	; 0x78
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d023      	beq.n	8001a0c <HAL_DMA_PollForTransfer+0x424>
 80019c4:	3214      	adds	r2, #20
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d02a      	beq.n	8001a20 <HAL_DMA_PollForTransfer+0x438>
 80019ca:	3214      	adds	r2, #20
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d029      	beq.n	8001a24 <HAL_DMA_PollForTransfer+0x43c>
 80019d0:	3214      	adds	r2, #20
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d029      	beq.n	8001a2a <HAL_DMA_PollForTransfer+0x442>
 80019d6:	3214      	adds	r2, #20
 80019d8:	4293      	cmp	r3, r2
 80019da:	d029      	beq.n	8001a30 <HAL_DMA_PollForTransfer+0x448>
 80019dc:	3214      	adds	r2, #20
 80019de:	4293      	cmp	r3, r2
 80019e0:	d029      	beq.n	8001a36 <HAL_DMA_PollForTransfer+0x44e>
 80019e2:	3214      	adds	r2, #20
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d029      	beq.n	8001a3c <HAL_DMA_PollForTransfer+0x454>
 80019e8:	f502 7262 	add.w	r2, r2, #904	; 0x388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d028      	beq.n	8001a42 <HAL_DMA_PollForTransfer+0x45a>
 80019f0:	3214      	adds	r2, #20
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d027      	beq.n	8001a46 <HAL_DMA_PollForTransfer+0x45e>
 80019f6:	3214      	adds	r2, #20
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d026      	beq.n	8001a4a <HAL_DMA_PollForTransfer+0x462>
 80019fc:	3214      	adds	r2, #20
 80019fe:	4293      	cmp	r3, r2
 8001a00:	bf0c      	ite	eq
 8001a02:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001a06:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001a0a:	e000      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	4a51      	ldr	r2, [pc, #324]	; (8001b54 <HAL_DMA_PollForTransfer+0x56c>)
 8001a10:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001a12:	2301      	movs	r3, #1
 8001a14:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f885 0020 	strb.w	r0, [r5, #32]
  return HAL_OK;
 8001a1e:	e5f1      	b.n	8001604 <HAL_DMA_PollForTransfer+0x1c>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a20:	2320      	movs	r3, #32
 8001a22:	e7f4      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a28:	e7f1      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2e:	e7ee      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a34:	e7eb      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a3a:	e7e8      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a40:	e7e5      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e7e3      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a46:	2320      	movs	r3, #32
 8001a48:	e7e1      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4e:	e7de      	b.n	8001a0e <HAL_DMA_PollForTransfer+0x426>
 8001a50:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_DMA_PollForTransfer+0x568>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d023      	beq.n	8001a9e <HAL_DMA_PollForTransfer+0x4b6>
 8001a56:	3214      	adds	r2, #20
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d024      	beq.n	8001aa6 <HAL_DMA_PollForTransfer+0x4be>
 8001a5c:	3214      	adds	r2, #20
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d023      	beq.n	8001aaa <HAL_DMA_PollForTransfer+0x4c2>
 8001a62:	3214      	adds	r2, #20
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d023      	beq.n	8001ab0 <HAL_DMA_PollForTransfer+0x4c8>
 8001a68:	3214      	adds	r2, #20
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d023      	beq.n	8001ab6 <HAL_DMA_PollForTransfer+0x4ce>
 8001a6e:	3214      	adds	r2, #20
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d023      	beq.n	8001abc <HAL_DMA_PollForTransfer+0x4d4>
 8001a74:	3214      	adds	r2, #20
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d023      	beq.n	8001ac2 <HAL_DMA_PollForTransfer+0x4da>
 8001a7a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d022      	beq.n	8001ac8 <HAL_DMA_PollForTransfer+0x4e0>
 8001a82:	3214      	adds	r2, #20
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d021      	beq.n	8001acc <HAL_DMA_PollForTransfer+0x4e4>
 8001a88:	3214      	adds	r2, #20
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d020      	beq.n	8001ad0 <HAL_DMA_PollForTransfer+0x4e8>
 8001a8e:	3214      	adds	r2, #20
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bf0c      	ite	eq
 8001a94:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001a98:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001a9c:	e000      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <HAL_DMA_PollForTransfer+0x560>)
 8001aa2:	6053      	str	r3, [r2, #4]
 8001aa4:	e7b5      	b.n	8001a12 <HAL_DMA_PollForTransfer+0x42a>
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	e7fa      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aae:	e7f7      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	e7f4      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aba:	e7f1      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001abc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ac0:	e7ee      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac6:	e7eb      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e7e9      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001acc:	2320      	movs	r3, #32
 8001ace:	e7e7      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
 8001ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad4:	e7e4      	b.n	8001aa0 <HAL_DMA_PollForTransfer+0x4b8>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_DMA_PollForTransfer+0x56c>)
 8001ada:	6053      	str	r3, [r2, #4]
 8001adc:	e79c      	b.n	8001a18 <HAL_DMA_PollForTransfer+0x430>
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	e7fa      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	e7f7      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aec:	e7f4      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001aee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001af2:	e7f1      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001af4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001af8:	e7ee      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001afa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001afe:	e7eb      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e7e9      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001b04:	2340      	movs	r3, #64	; 0x40
 8001b06:	e7e7      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0c:	e7e4      	b.n	8001ad8 <HAL_DMA_PollForTransfer+0x4f0>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_DMA_PollForTransfer+0x560>)
 8001b12:	6053      	str	r3, [r2, #4]
 8001b14:	e780      	b.n	8001a18 <HAL_DMA_PollForTransfer+0x430>
 8001b16:	2340      	movs	r3, #64	; 0x40
 8001b18:	e7fa      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1e:	e7f7      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b24:	e7f4      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b2a:	e7f1      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b30:	e7ee      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b36:	e7eb      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b38:	2304      	movs	r3, #4
 8001b3a:	e7e9      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b3c:	2340      	movs	r3, #64	; 0x40
 8001b3e:	e7e7      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b44:	e7e4      	b.n	8001b10 <HAL_DMA_PollForTransfer+0x528>
 8001b46:	bf00      	nop
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40020080 	.word	0x40020080
 8001b50:	40020008 	.word	0x40020008
 8001b54:	40020400 	.word	0x40020400

08001b58 <HAL_DMA_IRQHandler>:
{
 8001b58:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b5a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001b5c:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b5e:	6804      	ldr	r4, [r0, #0]
 8001b60:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b62:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001b64:	2304      	movs	r3, #4
 8001b66:	408b      	lsls	r3, r1
 8001b68:	4213      	tst	r3, r2
 8001b6a:	f000 8099 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x148>
 8001b6e:	f015 0f04 	tst.w	r5, #4
 8001b72:	f000 8095 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x148>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	f013 0f20 	tst.w	r3, #32
 8001b7c:	d103      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b86:	6803      	ldr	r3, [r0, #0]
 8001b88:	4a98      	ldr	r2, [pc, #608]	; (8001dec <HAL_DMA_IRQHandler+0x294>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d945      	bls.n	8001c1a <HAL_DMA_IRQHandler+0xc2>
 8001b8e:	3a78      	subs	r2, #120	; 0x78
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d023      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x84>
 8001b94:	3214      	adds	r2, #20
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d027      	beq.n	8001bea <HAL_DMA_IRQHandler+0x92>
 8001b9a:	3214      	adds	r2, #20
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d026      	beq.n	8001bee <HAL_DMA_IRQHandler+0x96>
 8001ba0:	3214      	adds	r2, #20
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d026      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x9c>
 8001ba6:	3214      	adds	r2, #20
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d026      	beq.n	8001bfa <HAL_DMA_IRQHandler+0xa2>
 8001bac:	3214      	adds	r2, #20
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d026      	beq.n	8001c00 <HAL_DMA_IRQHandler+0xa8>
 8001bb2:	3214      	adds	r2, #20
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d026      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xae>
 8001bb8:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d025      	beq.n	8001c0c <HAL_DMA_IRQHandler+0xb4>
 8001bc0:	3214      	adds	r2, #20
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d024      	beq.n	8001c10 <HAL_DMA_IRQHandler+0xb8>
 8001bc6:	3214      	adds	r2, #20
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d023      	beq.n	8001c14 <HAL_DMA_IRQHandler+0xbc>
 8001bcc:	3214      	adds	r2, #20
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	bf0c      	ite	eq
 8001bd2:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001bd6:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001bda:	e000      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001bdc:	2304      	movs	r3, #4
 8001bde:	4a84      	ldr	r2, [pc, #528]	; (8001df0 <HAL_DMA_IRQHandler+0x298>)
 8001be0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001be2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001be4:	b103      	cbz	r3, 8001be8 <HAL_DMA_IRQHandler+0x90>
      hdma->XferHalfCpltCallback(hdma);
 8001be6:	4798      	blx	r3
}
 8001be8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bea:	2340      	movs	r3, #64	; 0x40
 8001bec:	e7f7      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	e7f4      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bf8:	e7f1      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001bfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bfe:	e7ee      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001c00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c04:	e7eb      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001c06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c0a:	e7e8      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e7e6      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001c10:	2340      	movs	r3, #64	; 0x40
 8001c12:	e7e4      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c18:	e7e1      	b.n	8001bde <HAL_DMA_IRQHandler+0x86>
 8001c1a:	4a76      	ldr	r2, [pc, #472]	; (8001df4 <HAL_DMA_IRQHandler+0x29c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d023      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x110>
 8001c20:	3214      	adds	r2, #20
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d024      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x118>
 8001c26:	3214      	adds	r2, #20
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d023      	beq.n	8001c74 <HAL_DMA_IRQHandler+0x11c>
 8001c2c:	3214      	adds	r2, #20
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d023      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x122>
 8001c32:	3214      	adds	r2, #20
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d023      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x128>
 8001c38:	3214      	adds	r2, #20
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d023      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x12e>
 8001c3e:	3214      	adds	r2, #20
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d023      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x134>
 8001c44:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d022      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x13a>
 8001c4c:	3214      	adds	r2, #20
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d021      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x13e>
 8001c52:	3214      	adds	r2, #20
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d020      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x142>
 8001c58:	3214      	adds	r2, #20
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	bf0c      	ite	eq
 8001c5e:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001c62:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	4a63      	ldr	r2, [pc, #396]	; (8001df8 <HAL_DMA_IRQHandler+0x2a0>)
 8001c6c:	6053      	str	r3, [r2, #4]
 8001c6e:	e7b8      	b.n	8001be2 <HAL_DMA_IRQHandler+0x8a>
 8001c70:	2340      	movs	r3, #64	; 0x40
 8001c72:	e7fa      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c78:	e7f7      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7e:	e7f4      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c84:	e7f1      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8a:	e7ee      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c90:	e7eb      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e7e9      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c96:	2340      	movs	r3, #64	; 0x40
 8001c98:	e7e7      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
 8001c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9e:	e7e4      	b.n	8001c6a <HAL_DMA_IRQHandler+0x112>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	408b      	lsls	r3, r1
 8001ca4:	4213      	tst	r3, r2
 8001ca6:	f000 80a9 	beq.w	8001dfc <HAL_DMA_IRQHandler+0x2a4>
 8001caa:	f015 0f02 	tst.w	r5, #2
 8001cae:	f000 80a5 	beq.w	8001dfc <HAL_DMA_IRQHandler+0x2a4>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	f013 0f20 	tst.w	r3, #32
 8001cb8:	d106      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0x170>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	f023 030a 	bic.w	r3, r3, #10
 8001cc0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cc8:	6803      	ldr	r3, [r0, #0]
 8001cca:	4a48      	ldr	r2, [pc, #288]	; (8001dec <HAL_DMA_IRQHandler+0x294>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d94a      	bls.n	8001d66 <HAL_DMA_IRQHandler+0x20e>
 8001cd0:	3a78      	subs	r2, #120	; 0x78
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d023      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x1c6>
 8001cd6:	3214      	adds	r2, #20
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d02c      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x1de>
 8001cdc:	3214      	adds	r2, #20
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d02b      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x1e2>
 8001ce2:	3214      	adds	r2, #20
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d02b      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x1e8>
 8001ce8:	3214      	adds	r2, #20
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02b      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x1ee>
 8001cee:	3214      	adds	r2, #20
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d02b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x1f4>
 8001cf4:	3214      	adds	r2, #20
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02b      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x1fa>
 8001cfa:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02a      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x200>
 8001d02:	3214      	adds	r2, #20
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d029      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x204>
 8001d08:	3214      	adds	r2, #20
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d028      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x208>
 8001d0e:	3214      	adds	r2, #20
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf0c      	ite	eq
 8001d14:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8001d18:	f44f 3200 	movne.w	r2, #131072	; 0x20000
 8001d1c:	e000      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_DMA_IRQHandler+0x298>)
 8001d22:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001d24:	2300      	movs	r3, #0
 8001d26:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001d2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f43f af5b 	beq.w	8001be8 <HAL_DMA_IRQHandler+0x90>
      hdma->XferCpltCallback(hdma);
 8001d32:	4798      	blx	r3
 8001d34:	e758      	b.n	8001be8 <HAL_DMA_IRQHandler+0x90>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001d36:	2220      	movs	r2, #32
 8001d38:	e7f2      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	e7ef      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d44:	e7ec      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4a:	e7e9      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d50:	e7e6      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d56:	e7e3      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d58:	2202      	movs	r2, #2
 8001d5a:	e7e1      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	e7df      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d64:	e7dc      	b.n	8001d20 <HAL_DMA_IRQHandler+0x1c8>
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_DMA_IRQHandler+0x29c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d023      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x25c>
 8001d6c:	3214      	adds	r2, #20
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d024      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x264>
 8001d72:	3214      	adds	r2, #20
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d023      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x268>
 8001d78:	3214      	adds	r2, #20
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d023      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x26e>
 8001d7e:	3214      	adds	r2, #20
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d023      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x274>
 8001d84:	3214      	adds	r2, #20
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d023      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x27a>
 8001d8a:	3214      	adds	r2, #20
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d023      	beq.n	8001dd8 <HAL_DMA_IRQHandler+0x280>
 8001d90:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d022      	beq.n	8001dde <HAL_DMA_IRQHandler+0x286>
 8001d98:	3214      	adds	r2, #20
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d021      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x28a>
 8001d9e:	3214      	adds	r2, #20
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d020      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x28e>
 8001da4:	3214      	adds	r2, #20
 8001da6:	4293      	cmp	r3, r2
 8001da8:	bf0c      	ite	eq
 8001daa:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001dae:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001db2:	e000      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001db4:	2302      	movs	r3, #2
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_DMA_IRQHandler+0x2a0>)
 8001db8:	6053      	str	r3, [r2, #4]
 8001dba:	e7b3      	b.n	8001d24 <HAL_DMA_IRQHandler+0x1cc>
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e7fa      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc4:	e7f7      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dca:	e7f4      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd0:	e7f1      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001dd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dd6:	e7ee      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001dd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ddc:	e7eb      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e7e9      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001de2:	2320      	movs	r3, #32
 8001de4:	e7e7      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dea:	e7e4      	b.n	8001db6 <HAL_DMA_IRQHandler+0x25e>
 8001dec:	40020080 	.word	0x40020080
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020008 	.word	0x40020008
 8001df8:	40020000 	.word	0x40020000
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	fa03 f101 	lsl.w	r1, r3, r1
 8001e02:	4211      	tst	r1, r2
 8001e04:	f43f aef0 	beq.w	8001be8 <HAL_DMA_IRQHandler+0x90>
 8001e08:	f015 0f08 	tst.w	r5, #8
 8001e0c:	f43f aeec 	beq.w	8001be8 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	f023 030e 	bic.w	r3, r3, #14
 8001e16:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e18:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001e1e:	fa03 f202 	lsl.w	r2, r3, r2
 8001e22:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e24:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001e26:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001e30:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f43f aed8 	beq.w	8001be8 <HAL_DMA_IRQHandler+0x90>
      hdma->XferErrorCallback(hdma);
 8001e38:	4798      	blx	r3
  return;
 8001e3a:	e6d5      	b.n	8001be8 <HAL_DMA_IRQHandler+0x90>

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e40:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	f8d1 9000 	ldr.w	r9, [r1]
 8001e46:	f1b9 0f00 	cmp.w	r9, #0
 8001e4a:	f000 812f 	beq.w	80020ac <HAL_GPIO_Init+0x270>
 8001e4e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001e50:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e52:	4e98      	ldr	r6, [pc, #608]	; (80020b4 <HAL_GPIO_Init+0x278>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e54:	f8df e260 	ldr.w	lr, [pc, #608]	; 80020b8 <HAL_GPIO_Init+0x27c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e58:	4c98      	ldr	r4, [pc, #608]	; (80020bc <HAL_GPIO_Init+0x280>)
      switch (GPIO_Init->Mode)
 8001e5a:	4d99      	ldr	r5, [pc, #612]	; (80020c0 <HAL_GPIO_Init+0x284>)
 8001e5c:	4694      	mov	ip, r2
 8001e5e:	e0db      	b.n	8002018 <HAL_GPIO_Init+0x1dc>
 8001e60:	f04f 0c00 	mov.w	ip, #0
 8001e64:	e026      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
 8001e66:	45a9      	cmp	r9, r5
 8001e68:	d011      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
 8001e6a:	d908      	bls.n	8001e7e <HAL_GPIO_Init+0x42>
 8001e6c:	f8df a254 	ldr.w	sl, [pc, #596]	; 80020c4 <HAL_GPIO_Init+0x288>
 8001e70:	45d1      	cmp	r9, sl
 8001e72:	d00c      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
 8001e74:	f50a 3a80 	add.w	sl, sl, #65536	; 0x10000
 8001e78:	45d1      	cmp	r9, sl
 8001e7a:	d008      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
 8001e7c:	e01a      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
 8001e7e:	f8df a248 	ldr.w	sl, [pc, #584]	; 80020c8 <HAL_GPIO_Init+0x28c>
 8001e82:	45d1      	cmp	r9, sl
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
 8001e86:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8001e8a:	45d1      	cmp	r9, sl
 8001e8c:	d10e      	bne.n	8001eac <HAL_GPIO_Init+0x70>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8001e92:	f1bc 0f00 	cmp.w	ip, #0
 8001e96:	d07a      	beq.n	8001f8e <HAL_GPIO_Init+0x152>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e98:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8001e9c:	bf0c      	ite	eq
 8001e9e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001ea2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea6:	f04f 0c08 	mov.w	ip, #8
 8001eaa:	e003      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
      switch (GPIO_Init->Mode)
 8001eac:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8001eb0:	45d1      	cmp	r9, sl
 8001eb2:	d0ec      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb4:	2fff      	cmp	r7, #255	; 0xff
 8001eb6:	bf99      	ittee	ls
 8001eb8:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eba:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ebc:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec0:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ec4:	f8d9 8000 	ldr.w	r8, [r9]
 8001ec8:	f04f 0b0f 	mov.w	fp, #15
 8001ecc:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001ed0:	ea28 080b 	bic.w	r8, r8, fp
 8001ed4:	fa0c fa0a 	lsl.w	sl, ip, sl
 8001ed8:	ea48 080a 	orr.w	r8, r8, sl
 8001edc:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ee0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001ee4:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8001ee8:	f000 808f 	beq.w	800200a <HAL_GPIO_Init+0x1ce>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eec:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8001ef0:	f048 0801 	orr.w	r8, r8, #1
 8001ef4:	f8c6 8018 	str.w	r8, [r6, #24]
 8001ef8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8001efc:	f008 0801 	and.w	r8, r8, #1
 8001f00:	f8cd 8004 	str.w	r8, [sp, #4]
 8001f04:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001f08:	f023 0803 	bic.w	r8, r3, #3
 8001f0c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001f10:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001f14:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f18:	f003 0903 	and.w	r9, r3, #3
 8001f1c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8001f20:	f04f 090f 	mov.w	r9, #15
 8001f24:	fa09 f90b 	lsl.w	r9, r9, fp
 8001f28:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f2c:	4570      	cmp	r0, lr
 8001f2e:	d031      	beq.n	8001f94 <HAL_GPIO_Init+0x158>
 8001f30:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80020cc <HAL_GPIO_Init+0x290>
 8001f34:	4548      	cmp	r0, r9
 8001f36:	f000 80ad 	beq.w	8002094 <HAL_GPIO_Init+0x258>
 8001f3a:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001f3e:	4548      	cmp	r0, r9
 8001f40:	f000 80ab 	beq.w	800209a <HAL_GPIO_Init+0x25e>
 8001f44:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001f48:	4548      	cmp	r0, r9
 8001f4a:	f000 80a9 	beq.w	80020a0 <HAL_GPIO_Init+0x264>
 8001f4e:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001f52:	4548      	cmp	r0, r9
 8001f54:	f000 80a7 	beq.w	80020a6 <HAL_GPIO_Init+0x26a>
 8001f58:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8001f5c:	4548      	cmp	r0, r9
 8001f5e:	bf0c      	ite	eq
 8001f60:	f04f 0905 	moveq.w	r9, #5
 8001f64:	f04f 0906 	movne.w	r9, #6
 8001f68:	e016      	b.n	8001f98 <HAL_GPIO_Init+0x15c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f6a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8001f6e:	e7a1      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f70:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001f74:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8001f78:	e79c      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001f7e:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8001f82:	e797      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f84:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8001f88:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8001f8c:	e792      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8e:	f04f 0c04 	mov.w	ip, #4
 8001f92:	e78f      	b.n	8001eb4 <HAL_GPIO_Init+0x78>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f94:	f04f 0900 	mov.w	r9, #0
 8001f98:	fa09 f90b 	lsl.w	r9, r9, fp
 8001f9c:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa0:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001fa8:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001fac:	f8d4 8000 	ldr.w	r8, [r4]
 8001fb0:	bf14      	ite	ne
 8001fb2:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fb6:	ea28 0807 	biceq.w	r8, r8, r7
 8001fba:	f8c4 8000 	str.w	r8, [r4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbe:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001fc2:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8001fca:	bf14      	ite	ne
 8001fcc:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fd0:	ea28 0807 	biceq.w	r8, r8, r7
 8001fd4:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fd8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001fdc:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe0:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8001fe4:	bf14      	ite	ne
 8001fe6:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fea:	ea28 0807 	biceq.w	r8, r8, r7
 8001fee:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001ff6:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ffa:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8001ffe:	bf14      	ite	ne
 8002000:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002004:	ea28 0707 	biceq.w	r7, r8, r7
 8002008:	60e7      	str	r7, [r4, #12]
        }
      }
    }

	position++;
 800200a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	f8d1 9000 	ldr.w	r9, [r1]
 8002010:	3204      	adds	r2, #4
 8002012:	fa39 f703 	lsrs.w	r7, r9, r3
 8002016:	d049      	beq.n	80020ac <HAL_GPIO_Init+0x270>
    ioposition = (0x01uL << position);
 8002018:	f04f 0801 	mov.w	r8, #1
 800201c:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002020:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002024:	ea38 0909 	bics.w	r9, r8, r9
 8002028:	d1ef      	bne.n	800200a <HAL_GPIO_Init+0x1ce>
      switch (GPIO_Init->Mode)
 800202a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800202e:	f1b9 0f12 	cmp.w	r9, #18
 8002032:	f63f af18 	bhi.w	8001e66 <HAL_GPIO_Init+0x2a>
 8002036:	f1b9 0f12 	cmp.w	r9, #18
 800203a:	f63f af3b 	bhi.w	8001eb4 <HAL_GPIO_Init+0x78>
 800203e:	f20f 0a08 	addw	sl, pc, #8
 8002042:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002046:	bf00      	nop
 8002048:	08001e8f 	.word	0x08001e8f
 800204c:	08001f6b 	.word	0x08001f6b
 8002050:	08001f7b 	.word	0x08001f7b
 8002054:	08001e61 	.word	0x08001e61
 8002058:	08001eb5 	.word	0x08001eb5
 800205c:	08001eb5 	.word	0x08001eb5
 8002060:	08001eb5 	.word	0x08001eb5
 8002064:	08001eb5 	.word	0x08001eb5
 8002068:	08001eb5 	.word	0x08001eb5
 800206c:	08001eb5 	.word	0x08001eb5
 8002070:	08001eb5 	.word	0x08001eb5
 8002074:	08001eb5 	.word	0x08001eb5
 8002078:	08001eb5 	.word	0x08001eb5
 800207c:	08001eb5 	.word	0x08001eb5
 8002080:	08001eb5 	.word	0x08001eb5
 8002084:	08001eb5 	.word	0x08001eb5
 8002088:	08001eb5 	.word	0x08001eb5
 800208c:	08001f71 	.word	0x08001f71
 8002090:	08001f85 	.word	0x08001f85
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002094:	f04f 0901 	mov.w	r9, #1
 8002098:	e77e      	b.n	8001f98 <HAL_GPIO_Init+0x15c>
 800209a:	f04f 0902 	mov.w	r9, #2
 800209e:	e77b      	b.n	8001f98 <HAL_GPIO_Init+0x15c>
 80020a0:	f04f 0903 	mov.w	r9, #3
 80020a4:	e778      	b.n	8001f98 <HAL_GPIO_Init+0x15c>
 80020a6:	f04f 0904 	mov.w	r9, #4
 80020aa:	e775      	b.n	8001f98 <HAL_GPIO_Init+0x15c>
  }
}
 80020ac:	b003      	add	sp, #12
 80020ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010800 	.word	0x40010800
 80020bc:	40010400 	.word	0x40010400
 80020c0:	10220000 	.word	0x10220000
 80020c4:	10310000 	.word	0x10310000
 80020c8:	10120000 	.word	0x10120000
 80020cc:	40010c00 	.word	0x40010c00

080020d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d0:	6883      	ldr	r3, [r0, #8]
 80020d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80020d4:	bf14      	ite	ne
 80020d6:	2001      	movne	r0, #1
 80020d8:	2000      	moveq	r0, #0
 80020da:	4770      	bx	lr

080020dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020dc:	b10a      	cbz	r2, 80020e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020de:	6101      	str	r1, [r0, #16]
 80020e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e2:	0409      	lsls	r1, r1, #16
 80020e4:	6101      	str	r1, [r0, #16]
  }
}
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_GPIO_EXTI_IRQHandler>:
{
 80020ec:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4203      	tst	r3, r0
 80020f4:	d100      	bne.n	80020f8 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80020f6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f8:	4b02      	ldr	r3, [pc, #8]	; (8002104 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80020fa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020fc:	f7ff fff4 	bl	80020e8 <HAL_GPIO_EXTI_Callback>
}
 8002100:	e7f9      	b.n	80020f6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002102:	bf00      	nop
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	2800      	cmp	r0, #0
 800210a:	f000 8201 	beq.w	8002510 <HAL_RCC_OscConfig+0x408>
{
 800210e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	6803      	ldr	r3, [r0, #0]
 8002118:	f013 0f01 	tst.w	r3, #1
 800211c:	d02c      	beq.n	8002178 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800211e:	4b9f      	ldr	r3, [pc, #636]	; (800239c <HAL_RCC_OscConfig+0x294>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d01d      	beq.n	8002166 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212a:	4b9c      	ldr	r3, [pc, #624]	; (800239c <HAL_RCC_OscConfig+0x294>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b08      	cmp	r3, #8
 8002134:	d012      	beq.n	800215c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002136:	6863      	ldr	r3, [r4, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d041      	beq.n	80021c2 <HAL_RCC_OscConfig+0xba>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d155      	bne.n	80021ee <HAL_RCC_OscConfig+0xe6>
 8002142:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002146:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e037      	b.n	80021cc <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800215c:	4b8f      	ldr	r3, [pc, #572]	; (800239c <HAL_RCC_OscConfig+0x294>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002164:	d0e7      	beq.n	8002136 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002166:	4b8d      	ldr	r3, [pc, #564]	; (800239c <HAL_RCC_OscConfig+0x294>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800216e:	d003      	beq.n	8002178 <HAL_RCC_OscConfig+0x70>
 8002170:	6863      	ldr	r3, [r4, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 81ce 	beq.w	8002514 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002178:	6823      	ldr	r3, [r4, #0]
 800217a:	f013 0f02 	tst.w	r3, #2
 800217e:	d075      	beq.n	800226c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002180:	4b86      	ldr	r3, [pc, #536]	; (800239c <HAL_RCC_OscConfig+0x294>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f013 0f0c 	tst.w	r3, #12
 8002188:	d05f      	beq.n	800224a <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800218a:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCC_OscConfig+0x294>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	d054      	beq.n	8002240 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002196:	6923      	ldr	r3, [r4, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 808a 	beq.w	80022b2 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219e:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x298>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff f830 	bl	8001208 <HAL_GetTick>
 80021a8:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4e7c      	ldr	r6, [pc, #496]	; (800239c <HAL_RCC_OscConfig+0x294>)
 80021ac:	6833      	ldr	r3, [r6, #0]
 80021ae:	f013 0f02 	tst.w	r3, #2
 80021b2:	d175      	bne.n	80022a0 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff f828 	bl	8001208 <HAL_GetTick>
 80021b8:	1b40      	subs	r0, r0, r5
 80021ba:	2802      	cmp	r0, #2
 80021bc:	d9f6      	bls.n	80021ac <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80021be:	2003      	movs	r0, #3
 80021c0:	e1ad      	b.n	800251e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c2:	4a76      	ldr	r2, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x294>)
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021cc:	6863      	ldr	r3, [r4, #4]
 80021ce:	b343      	cbz	r3, 8002222 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80021d0:	f7ff f81a 	bl	8001208 <HAL_GetTick>
 80021d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4e71      	ldr	r6, [pc, #452]	; (800239c <HAL_RCC_OscConfig+0x294>)
 80021d8:	6833      	ldr	r3, [r6, #0]
 80021da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021de:	d1cb      	bne.n	8002178 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff f812 	bl	8001208 <HAL_GetTick>
 80021e4:	1b40      	subs	r0, r0, r5
 80021e6:	2864      	cmp	r0, #100	; 0x64
 80021e8:	d9f6      	bls.n	80021d8 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80021ea:	2003      	movs	r0, #3
 80021ec:	e197      	b.n	800251e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f2:	d009      	beq.n	8002208 <HAL_RCC_OscConfig+0x100>
 80021f4:	4b69      	ldr	r3, [pc, #420]	; (800239c <HAL_RCC_OscConfig+0x294>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	e7e1      	b.n	80021cc <HAL_RCC_OscConfig+0xc4>
 8002208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800220c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e7d4      	b.n	80021cc <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8002222:	f7fe fff1 	bl	8001208 <HAL_GetTick>
 8002226:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002228:	4e5c      	ldr	r6, [pc, #368]	; (800239c <HAL_RCC_OscConfig+0x294>)
 800222a:	6833      	ldr	r3, [r6, #0]
 800222c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002230:	d0a2      	beq.n	8002178 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002232:	f7fe ffe9 	bl	8001208 <HAL_GetTick>
 8002236:	1b40      	subs	r0, r0, r5
 8002238:	2864      	cmp	r0, #100	; 0x64
 800223a:	d9f6      	bls.n	800222a <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 800223c:	2003      	movs	r0, #3
 800223e:	e16e      	b.n	800251e <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002240:	4b56      	ldr	r3, [pc, #344]	; (800239c <HAL_RCC_OscConfig+0x294>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002248:	d1a5      	bne.n	8002196 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b54      	ldr	r3, [pc, #336]	; (800239c <HAL_RCC_OscConfig+0x294>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f013 0f02 	tst.w	r3, #2
 8002252:	d003      	beq.n	800225c <HAL_RCC_OscConfig+0x154>
 8002254:	6923      	ldr	r3, [r4, #16]
 8002256:	2b01      	cmp	r3, #1
 8002258:	f040 815e 	bne.w	8002518 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225c:	4a4f      	ldr	r2, [pc, #316]	; (800239c <HAL_RCC_OscConfig+0x294>)
 800225e:	6813      	ldr	r3, [r2, #0]
 8002260:	6961      	ldr	r1, [r4, #20]
 8002262:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002266:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800226a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	f013 0f08 	tst.w	r3, #8
 8002272:	d03d      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002274:	69a3      	ldr	r3, [r4, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d066      	beq.n	8002348 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_RCC_OscConfig+0x298>)
 800227c:	2201      	movs	r2, #1
 800227e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7fe ffc1 	bl	8001208 <HAL_GetTick>
 8002286:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002288:	4e44      	ldr	r6, [pc, #272]	; (800239c <HAL_RCC_OscConfig+0x294>)
 800228a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800228c:	f013 0f02 	tst.w	r3, #2
 8002290:	d121      	bne.n	80022d6 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7fe ffb9 	bl	8001208 <HAL_GetTick>
 8002296:	1b40      	subs	r0, r0, r5
 8002298:	2802      	cmp	r0, #2
 800229a:	d9f6      	bls.n	800228a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 800229c:	2003      	movs	r0, #3
 800229e:	e13e      	b.n	800251e <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4a3e      	ldr	r2, [pc, #248]	; (800239c <HAL_RCC_OscConfig+0x294>)
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	6961      	ldr	r1, [r4, #20]
 80022a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e7dc      	b.n	800226c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_OscConfig+0x298>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022b8:	f7fe ffa6 	bl	8001208 <HAL_GetTick>
 80022bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	4e37      	ldr	r6, [pc, #220]	; (800239c <HAL_RCC_OscConfig+0x294>)
 80022c0:	6833      	ldr	r3, [r6, #0]
 80022c2:	f013 0f02 	tst.w	r3, #2
 80022c6:	d0d1      	beq.n	800226c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe ff9e 	bl	8001208 <HAL_GetTick>
 80022cc:	1b40      	subs	r0, r0, r5
 80022ce:	2802      	cmp	r0, #2
 80022d0:	d9f6      	bls.n	80022c0 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
 80022d4:	e123      	b.n	800251e <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0x29c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_RCC_OscConfig+0x2a0>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	0a5b      	lsrs	r3, r3, #9
 80022e2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80022e4:	bf00      	nop
  }
  while (Delay --);
 80022e6:	9b01      	ldr	r3, [sp, #4]
 80022e8:	1e5a      	subs	r2, r3, #1
 80022ea:	9201      	str	r2, [sp, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f9      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f013 0f04 	tst.w	r3, #4
 80022f6:	f000 809b 	beq.w	8002430 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_RCC_OscConfig+0x294>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002302:	d134      	bne.n	800236e <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_OscConfig+0x294>)
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800230c:	61da      	str	r2, [r3, #28]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002318:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x2a4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002322:	d026      	beq.n	8002372 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	68e3      	ldr	r3, [r4, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d042      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2a8>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d158      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2d8>
 800232e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002332:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	621a      	str	r2, [r3, #32]
 800233e:	6a1a      	ldr	r2, [r3, #32]
 8002340:	f022 0204 	bic.w	r2, r2, #4
 8002344:	621a      	str	r2, [r3, #32]
 8002346:	e038      	b.n	80023ba <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_RCC_OscConfig+0x298>)
 800234a:	2200      	movs	r2, #0
 800234c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002350:	f7fe ff5a 	bl	8001208 <HAL_GetTick>
 8002354:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	4e11      	ldr	r6, [pc, #68]	; (800239c <HAL_RCC_OscConfig+0x294>)
 8002358:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800235a:	f013 0f02 	tst.w	r3, #2
 800235e:	d0c7      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe ff52 	bl	8001208 <HAL_GetTick>
 8002364:	1b40      	subs	r0, r0, r5
 8002366:	2802      	cmp	r0, #2
 8002368:	d9f6      	bls.n	8002358 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 800236a:	2003      	movs	r0, #3
 800236c:	e0d7      	b.n	800251e <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2500      	movs	r5, #0
 8002370:	e7d3      	b.n	800231a <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_RCC_OscConfig+0x2a4>)
 8002374:	6813      	ldr	r3, [r2, #0]
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800237c:	f7fe ff44 	bl	8001208 <HAL_GetTick>
 8002380:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	4f0a      	ldr	r7, [pc, #40]	; (80023ac <HAL_RCC_OscConfig+0x2a4>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f413 7f80 	tst.w	r3, #256	; 0x100
 800238a:	d1cb      	bne.n	8002324 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe ff3c 	bl	8001208 <HAL_GetTick>
 8002390:	1b80      	subs	r0, r0, r6
 8002392:	2864      	cmp	r0, #100	; 0x64
 8002394:	d9f6      	bls.n	8002384 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8002396:	2003      	movs	r0, #3
 8002398:	e0c1      	b.n	800251e <HAL_RCC_OscConfig+0x416>
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	42420000 	.word	0x42420000
 80023a4:	20000000 	.word	0x20000000
 80023a8:	10624dd3 	.word	0x10624dd3
 80023ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	4a5e      	ldr	r2, [pc, #376]	; (800252c <HAL_RCC_OscConfig+0x424>)
 80023b2:	6a13      	ldr	r3, [r2, #32]
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	b333      	cbz	r3, 800240c <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 80023be:	f7fe ff23 	bl	8001208 <HAL_GetTick>
 80023c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	4f59      	ldr	r7, [pc, #356]	; (800252c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f013 0f02 	tst.w	r3, #2
 80023d0:	d12d      	bne.n	800242e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe ff19 	bl	8001208 <HAL_GetTick>
 80023d6:	1b80      	subs	r0, r0, r6
 80023d8:	4540      	cmp	r0, r8
 80023da:	d9f6      	bls.n	80023ca <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80023dc:	2003      	movs	r0, #3
 80023de:	e09e      	b.n	800251e <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
 80023e4:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_RCC_OscConfig+0x424>)
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	621a      	str	r2, [r3, #32]
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	f022 0204 	bic.w	r2, r2, #4
 80023f4:	621a      	str	r2, [r3, #32]
 80023f6:	e7e0      	b.n	80023ba <HAL_RCC_OscConfig+0x2b2>
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_OscConfig+0x424>)
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	f042 0204 	orr.w	r2, r2, #4
 8002400:	621a      	str	r2, [r3, #32]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	621a      	str	r2, [r3, #32]
 800240a:	e7d6      	b.n	80023ba <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 800240c:	f7fe fefc 	bl	8001208 <HAL_GetTick>
 8002410:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002412:	4f46      	ldr	r7, [pc, #280]	; (800252c <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f013 0f02 	tst.w	r3, #2
 800241e:	d006      	beq.n	800242e <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002420:	f7fe fef2 	bl	8001208 <HAL_GetTick>
 8002424:	1b80      	subs	r0, r0, r6
 8002426:	4540      	cmp	r0, r8
 8002428:	d9f6      	bls.n	8002418 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 800242a:	2003      	movs	r0, #3
 800242c:	e077      	b.n	800251e <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 800242e:	b9e5      	cbnz	r5, 800246a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002430:	69e3      	ldr	r3, [r4, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d072      	beq.n	800251c <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002436:	4a3d      	ldr	r2, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x424>)
 8002438:	6852      	ldr	r2, [r2, #4]
 800243a:	f002 020c 	and.w	r2, r2, #12
 800243e:	2a08      	cmp	r2, #8
 8002440:	d056      	beq.n	80024f0 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002442:	2b02      	cmp	r3, #2
 8002444:	d017      	beq.n	8002476 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_RCC_OscConfig+0x428>)
 8002448:	2200      	movs	r2, #0
 800244a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800244c:	f7fe fedc 	bl	8001208 <HAL_GetTick>
 8002450:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	4d36      	ldr	r5, [pc, #216]	; (800252c <HAL_RCC_OscConfig+0x424>)
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800245a:	d047      	beq.n	80024ec <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fed4 	bl	8001208 <HAL_GetTick>
 8002460:	1b00      	subs	r0, r0, r4
 8002462:	2802      	cmp	r0, #2
 8002464:	d9f6      	bls.n	8002454 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8002466:	2003      	movs	r0, #3
 8002468:	e059      	b.n	800251e <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_RCC_OscConfig+0x424>)
 800246c:	69d3      	ldr	r3, [r2, #28]
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002472:	61d3      	str	r3, [r2, #28]
 8002474:	e7dc      	b.n	8002430 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCC_OscConfig+0x428>)
 8002478:	2200      	movs	r2, #0
 800247a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800247c:	f7fe fec4 	bl	8001208 <HAL_GetTick>
 8002480:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002482:	4e2a      	ldr	r6, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x424>)
 8002484:	6833      	ldr	r3, [r6, #0]
 8002486:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800248a:	d006      	beq.n	800249a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe febc 	bl	8001208 <HAL_GetTick>
 8002490:	1b40      	subs	r0, r0, r5
 8002492:	2802      	cmp	r0, #2
 8002494:	d9f6      	bls.n	8002484 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8002496:	2003      	movs	r0, #3
 8002498:	e041      	b.n	800251e <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800249a:	6a23      	ldr	r3, [r4, #32]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d01a      	beq.n	80024d8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a2:	4922      	ldr	r1, [pc, #136]	; (800252c <HAL_RCC_OscConfig+0x424>)
 80024a4:	684a      	ldr	r2, [r1, #4]
 80024a6:	6a23      	ldr	r3, [r4, #32]
 80024a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024aa:	4303      	orrs	r3, r0
 80024ac:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_OscConfig+0x428>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80024ba:	f7fe fea5 	bl	8001208 <HAL_GetTick>
 80024be:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	4d1a      	ldr	r5, [pc, #104]	; (800252c <HAL_RCC_OscConfig+0x424>)
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024c8:	d10e      	bne.n	80024e8 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fe9d 	bl	8001208 <HAL_GetTick>
 80024ce:	1b00      	subs	r0, r0, r4
 80024d0:	2802      	cmp	r0, #2
 80024d2:	d9f6      	bls.n	80024c2 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80024d4:	2003      	movs	r0, #3
 80024d6:	e022      	b.n	800251e <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_RCC_OscConfig+0x424>)
 80024da:	6853      	ldr	r3, [r2, #4]
 80024dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024e0:	68a1      	ldr	r1, [r4, #8]
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6053      	str	r3, [r2, #4]
 80024e6:	e7dc      	b.n	80024a2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80024e8:	2000      	movs	r0, #0
 80024ea:	e018      	b.n	800251e <HAL_RCC_OscConfig+0x416>
 80024ec:	2000      	movs	r0, #0
 80024ee:	e016      	b.n	800251e <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d017      	beq.n	8002524 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x424>)
 80024f6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80024fc:	6a22      	ldr	r2, [r4, #32]
 80024fe:	4291      	cmp	r1, r2
 8002500:	d112      	bne.n	8002528 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002502:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	6a60      	ldr	r0, [r4, #36]	; 0x24
        return HAL_ERROR;
 8002508:	1a18      	subs	r0, r3, r0
 800250a:	bf18      	it	ne
 800250c:	2001      	movne	r0, #1
 800250e:	e006      	b.n	800251e <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
}
 8002512:	4770      	bx	lr
        return HAL_ERROR;
 8002514:	2001      	movs	r0, #1
 8002516:	e002      	b.n	800251e <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 800251c:	2000      	movs	r0, #0
}
 800251e:	b002      	add	sp, #8
 8002520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
 8002526:	e7fa      	b.n	800251e <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002528:	2001      	movs	r0, #1
 800252a:	e7f8      	b.n	800251e <HAL_RCC_OscConfig+0x416>
 800252c:	40021000 	.word	0x40021000
 8002530:	42420000 	.word	0x42420000

08002534 <HAL_RCC_GetSysClockFreq>:
{
 8002534:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_RCC_GetSysClockFreq+0x60>)
 8002538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800253a:	f10d 0c18 	add.w	ip, sp, #24
 800253e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002542:	f240 2301 	movw	r3, #513	; 0x201
 8002546:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCC_GetSysClockFreq+0x64>)
 800254c:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	2a08      	cmp	r2, #8
 8002554:	d002      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8002556:	4811      	ldr	r0, [pc, #68]	; (800259c <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002558:	b006      	add	sp, #24
 800255a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002560:	3218      	adds	r2, #24
 8002562:	446a      	add	r2, sp
 8002564:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002568:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800256c:	d00d      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_RCC_GetSysClockFreq+0x64>)
 8002570:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_RCC_GetSysClockFreq+0x68>)
 8002574:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002578:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800257c:	3318      	adds	r3, #24
 800257e:	446b      	add	r3, sp
 8002580:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002584:	fbb0 f0f3 	udiv	r0, r0, r3
 8002588:	e7e6      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x6c>)
 800258c:	fb03 f000 	mul.w	r0, r3, r0
 8002590:	e7e2      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x24>
 8002592:	bf00      	nop
 8002594:	0802d4ec 	.word	0x0802d4ec
 8002598:	40021000 	.word	0x40021000
 800259c:	007a1200 	.word	0x007a1200
 80025a0:	003d0900 	.word	0x003d0900

080025a4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80025a4:	2800      	cmp	r0, #0
 80025a6:	f000 80a2 	beq.w	80026ee <HAL_RCC_ClockConfig+0x14a>
{
 80025aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ae:	460d      	mov	r5, r1
 80025b0:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b2:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_RCC_ClockConfig+0x15c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	428b      	cmp	r3, r1
 80025bc:	d20b      	bcs.n	80025d6 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4a50      	ldr	r2, [pc, #320]	; (8002700 <HAL_RCC_ClockConfig+0x15c>)
 80025c0:	6813      	ldr	r3, [r2, #0]
 80025c2:	f023 0307 	bic.w	r3, r3, #7
 80025c6:	430b      	orrs	r3, r1
 80025c8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	6813      	ldr	r3, [r2, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	428b      	cmp	r3, r1
 80025d2:	f040 808e 	bne.w	80026f2 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	f013 0f02 	tst.w	r3, #2
 80025dc:	d017      	beq.n	800260e <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025de:	f013 0f04 	tst.w	r3, #4
 80025e2:	d004      	beq.n	80025ee <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e4:	4a47      	ldr	r2, [pc, #284]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 80025e6:	6853      	ldr	r3, [r2, #4]
 80025e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ec:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	f013 0f08 	tst.w	r3, #8
 80025f4:	d004      	beq.n	8002600 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f6:	4a43      	ldr	r2, [pc, #268]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 80025f8:	6853      	ldr	r3, [r2, #4]
 80025fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025fe:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4a40      	ldr	r2, [pc, #256]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 8002602:	6853      	ldr	r3, [r2, #4]
 8002604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002608:	68a1      	ldr	r1, [r4, #8]
 800260a:	430b      	orrs	r3, r1
 800260c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	f013 0f01 	tst.w	r3, #1
 8002614:	d031      	beq.n	800267a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	6862      	ldr	r2, [r4, #4]
 8002618:	2a01      	cmp	r2, #1
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261c:	2a02      	cmp	r2, #2
 800261e:	d025      	beq.n	800266c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f013 0f02 	tst.w	r3, #2
 8002628:	d065      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4936      	ldr	r1, [pc, #216]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 800262c:	684b      	ldr	r3, [r1, #4]
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002636:	f7fe fde7 	bl	8001208 <HAL_GetTick>
 800263a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263c:	4f31      	ldr	r7, [pc, #196]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	6862      	ldr	r2, [r4, #4]
 800264a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800264e:	d014      	beq.n	800267a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002650:	f7fe fdda 	bl	8001208 <HAL_GetTick>
 8002654:	1b80      	subs	r0, r0, r6
 8002656:	4540      	cmp	r0, r8
 8002658:	d9f3      	bls.n	8002642 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800265a:	2003      	movs	r0, #3
 800265c:	e045      	b.n	80026ea <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002666:	d1e0      	bne.n	800262a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e03e      	b.n	80026ea <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002674:	d1d9      	bne.n	800262a <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
 8002678:	e037      	b.n	80026ea <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_RCC_ClockConfig+0x15c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	42ab      	cmp	r3, r5
 8002684:	d90a      	bls.n	800269c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002686:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <HAL_RCC_ClockConfig+0x15c>)
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	f023 0307 	bic.w	r3, r3, #7
 800268e:	432b      	orrs	r3, r5
 8002690:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	42ab      	cmp	r3, r5
 800269a:	d12e      	bne.n	80026fa <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f013 0f04 	tst.w	r3, #4
 80026a2:	d006      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 80026a6:	6853      	ldr	r3, [r2, #4]
 80026a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026ac:	68e1      	ldr	r1, [r4, #12]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f013 0f08 	tst.w	r3, #8
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 80026bc:	6853      	ldr	r3, [r2, #4]
 80026be:	6921      	ldr	r1, [r4, #16]
 80026c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026c8:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ca:	f7ff ff33 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_ClockConfig+0x160>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026d6:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <HAL_RCC_ClockConfig+0x164>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	40d8      	lsrs	r0, r3
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x168>)
 80026de:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_ClockConfig+0x16c>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f7fe fd4c 	bl	8001180 <HAL_InitTick>
  return HAL_OK;
 80026e8:	2000      	movs	r0, #0
}
 80026ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80026ee:	2001      	movs	r0, #1
}
 80026f0:	4770      	bx	lr
    return HAL_ERROR;
 80026f2:	2001      	movs	r0, #1
 80026f4:	e7f9      	b.n	80026ea <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80026f6:	2001      	movs	r0, #1
 80026f8:	e7f7      	b.n	80026ea <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
 80026fc:	e7f5      	b.n	80026ea <HAL_RCC_ClockConfig+0x146>
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
 8002708:	0802d4d4 	.word	0x0802d4d4
 800270c:	20000000 	.word	0x20000000
 8002710:	20000008 	.word	0x20000008

08002714 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800271c:	4a03      	ldr	r2, [pc, #12]	; (800272c <HAL_RCC_GetPCLK1Freq+0x18>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	4a03      	ldr	r2, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002722:	6810      	ldr	r0, [r2, #0]
}
 8002724:	40d8      	lsrs	r0, r3
 8002726:	4770      	bx	lr
 8002728:	40021000 	.word	0x40021000
 800272c:	0802d4e4 	.word	0x0802d4e4
 8002730:	20000000 	.word	0x20000000

08002734 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800273c:	4a03      	ldr	r2, [pc, #12]	; (800274c <HAL_RCC_GetPCLK2Freq+0x18>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002742:	6810      	ldr	r0, [r2, #0]
}
 8002744:	40d8      	lsrs	r0, r3
 8002746:	4770      	bx	lr
 8002748:	40021000 	.word	0x40021000
 800274c:	0802d4e4 	.word	0x0802d4e4
 8002750:	20000000 	.word	0x20000000

08002754 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002754:	b360      	cbz	r0, 80027b0 <HAL_SRAM_Init+0x5c>
{
 8002756:	b570      	push	{r4, r5, r6, lr}
 8002758:	460e      	mov	r6, r1
 800275a:	4615      	mov	r5, r2
 800275c:	4604      	mov	r4, r0
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800275e:	6983      	ldr	r3, [r0, #24]
 8002760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002764:	d026      	beq.n	80027b4 <HAL_SRAM_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002766:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800276a:	b1e3      	cbz	r3, 80027a6 <HAL_SRAM_Init+0x52>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800276c:	4621      	mov	r1, r4
 800276e:	f851 0b08 	ldr.w	r0, [r1], #8
 8002772:	f000 fd8f 	bl	8003294 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002776:	68a2      	ldr	r2, [r4, #8]
 8002778:	4631      	mov	r1, r6
 800277a:	6820      	ldr	r0, [r4, #0]
 800277c:	f000 fdc0 	bl	8003300 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002780:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002782:	68a2      	ldr	r2, [r4, #8]
 8002784:	4629      	mov	r1, r5
 8002786:	6860      	ldr	r0, [r4, #4]
 8002788:	f000 fdda 	bl	8003340 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800278c:	6822      	ldr	r2, [r4, #0]
 800278e:	68a1      	ldr	r1, [r4, #8]
 8002790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800279c:	2301      	movs	r3, #1
 800279e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
 80027a2:	2000      	movs	r0, #0
}
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80027a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_SRAM_MspInit(hsram);
 80027aa:	f7fe fc27 	bl	8000ffc <HAL_SRAM_MspInit>
 80027ae:	e7dd      	b.n	800276c <HAL_SRAM_Init+0x18>
    return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
}
 80027b2:	4770      	bx	lr
    return HAL_ERROR;
 80027b4:	2001      	movs	r0, #1
 80027b6:	e7f5      	b.n	80027a4 <HAL_SRAM_Init+0x50>

080027b8 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027b8:	4770      	bx	lr

080027ba <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ba:	4770      	bx	lr

080027bc <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027bc:	4770      	bx	lr

080027be <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027be:	4770      	bx	lr

080027c0 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027c0:	4770      	bx	lr

080027c2 <HAL_TIM_IRQHandler>:
{
 80027c2:	b510      	push	{r4, lr}
 80027c4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027c6:	6803      	ldr	r3, [r0, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	f012 0f02 	tst.w	r2, #2
 80027ce:	d011      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	f012 0f02 	tst.w	r2, #2
 80027d6:	d00d      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027d8:	f06f 0202 	mvn.w	r2, #2
 80027dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027de:	2301      	movs	r3, #1
 80027e0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f013 0f03 	tst.w	r3, #3
 80027ea:	d070      	beq.n	80028ce <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80027ec:	f7ff ffe6 	bl	80027bc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f0:	2300      	movs	r3, #0
 80027f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	f012 0f04 	tst.w	r2, #4
 80027fc:	d012      	beq.n	8002824 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	f012 0f04 	tst.w	r2, #4
 8002804:	d00e      	beq.n	8002824 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002806:	f06f 0204 	mvn.w	r2, #4
 800280a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800280c:	2302      	movs	r3, #2
 800280e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002818:	d05f      	beq.n	80028da <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff ffce 	bl	80027bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002820:	2300      	movs	r3, #0
 8002822:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	f012 0f08 	tst.w	r2, #8
 800282c:	d012      	beq.n	8002854 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	f012 0f08 	tst.w	r2, #8
 8002834:	d00e      	beq.n	8002854 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002836:	f06f 0208 	mvn.w	r2, #8
 800283a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283c:	2304      	movs	r3, #4
 800283e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f013 0f03 	tst.w	r3, #3
 8002848:	d04e      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff ffb6 	bl	80027bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002850:	2300      	movs	r3, #0
 8002852:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	f012 0f10 	tst.w	r2, #16
 800285c:	d012      	beq.n	8002884 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	f012 0f10 	tst.w	r2, #16
 8002864:	d00e      	beq.n	8002884 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002866:	f06f 0210 	mvn.w	r2, #16
 800286a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800286c:	2308      	movs	r3, #8
 800286e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002878:	d03d      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff ff9e 	bl	80027bc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002880:	2300      	movs	r3, #0
 8002882:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002884:	6823      	ldr	r3, [r4, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	f012 0f01 	tst.w	r2, #1
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	f012 0f01 	tst.w	r2, #1
 8002894:	d136      	bne.n	8002904 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800289e:	d003      	beq.n	80028a8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028a6:	d134      	bne.n	8002912 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80028b8:	d132      	bne.n	8002920 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	f012 0f20 	tst.w	r2, #32
 80028c2:	d003      	beq.n	80028cc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	f012 0f20 	tst.w	r2, #32
 80028ca:	d130      	bne.n	800292e <HAL_TIM_IRQHandler+0x16c>
}
 80028cc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	f7ff ff74 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff ff73 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
 80028d8:	e78a      	b.n	80027f0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	4620      	mov	r0, r4
 80028dc:	f7ff ff6d 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff ff6c 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
 80028e6:	e79b      	b.n	8002820 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff ff66 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ee:	4620      	mov	r0, r4
 80028f0:	f7ff ff65 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
 80028f4:	e7ac      	b.n	8002850 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7ff ff5f 	bl	80027ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	4620      	mov	r0, r4
 80028fe:	f7ff ff5e 	bl	80027be <HAL_TIM_PWM_PulseFinishedCallback>
 8002902:	e7bd      	b.n	8002880 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002904:	f06f 0201 	mvn.w	r2, #1
 8002908:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800290a:	4620      	mov	r0, r4
 800290c:	f7ff ff54 	bl	80027b8 <HAL_TIM_PeriodElapsedCallback>
 8002910:	e7c1      	b.n	8002896 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002912:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002916:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002918:	4620      	mov	r0, r4
 800291a:	f000 f994 	bl	8002c46 <HAL_TIMEx_BreakCallback>
 800291e:	e7c3      	b.n	80028a8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002924:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002926:	4620      	mov	r0, r4
 8002928:	f7ff ff4a 	bl	80027c0 <HAL_TIM_TriggerCallback>
 800292c:	e7c5      	b.n	80028ba <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800292e:	f06f 0220 	mvn.w	r2, #32
 8002932:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002934:	4620      	mov	r0, r4
 8002936:	f000 f985 	bl	8002c44 <HAL_TIMEx_CommutCallback>
}
 800293a:	e7c7      	b.n	80028cc <HAL_TIM_IRQHandler+0x10a>

0800293c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <TIM_Base_SetConfig+0xd4>)
 8002940:	4290      	cmp	r0, r2
 8002942:	d04a      	beq.n	80029da <TIM_Base_SetConfig+0x9e>
 8002944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002948:	4290      	cmp	r0, r2
 800294a:	d018      	beq.n	800297e <TIM_Base_SetConfig+0x42>
 800294c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002950:	d027      	beq.n	80029a2 <TIM_Base_SetConfig+0x66>
 8002952:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002956:	4290      	cmp	r0, r2
 8002958:	d035      	beq.n	80029c6 <TIM_Base_SetConfig+0x8a>
 800295a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295e:	4290      	cmp	r0, r2
 8002960:	d051      	beq.n	8002a06 <TIM_Base_SetConfig+0xca>
 8002962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002966:	4290      	cmp	r0, r2
 8002968:	d032      	beq.n	80029d0 <TIM_Base_SetConfig+0x94>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296e:	694a      	ldr	r2, [r1, #20]
 8002970:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002972:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002974:	688b      	ldr	r3, [r1, #8]
 8002976:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002978:	680b      	ldr	r3, [r1, #0]
 800297a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297c:	e040      	b.n	8002a00 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002982:	684a      	ldr	r2, [r1, #4]
 8002984:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298a:	68ca      	ldr	r2, [r1, #12]
 800298c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002992:	694a      	ldr	r2, [r1, #20]
 8002994:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002996:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002998:	688b      	ldr	r3, [r1, #8]
 800299a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800299c:	680b      	ldr	r3, [r1, #0]
 800299e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a0:	e02c      	b.n	80029fc <TIM_Base_SetConfig+0xc0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029a6:	684a      	ldr	r2, [r1, #4]
 80029a8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	68ca      	ldr	r2, [r1, #12]
 80029b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b6:	694a      	ldr	r2, [r1, #20]
 80029b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029bc:	688b      	ldr	r3, [r1, #8]
 80029be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029c0:	680b      	ldr	r3, [r1, #0]
 80029c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	e01c      	b.n	8002a00 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029ca:	684a      	ldr	r2, [r1, #4]
 80029cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ce:	e7ec      	b.n	80029aa <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029d4:	684a      	ldr	r2, [r1, #4]
 80029d6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d8:	e7e7      	b.n	80029aa <TIM_Base_SetConfig+0x6e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029de:	684a      	ldr	r2, [r1, #4]
 80029e0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	68ca      	ldr	r2, [r1, #12]
 80029e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	694a      	ldr	r2, [r1, #20]
 80029f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029f4:	688b      	ldr	r3, [r1, #8]
 80029f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029f8:	680b      	ldr	r3, [r1, #0]
 80029fa:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fc:	690b      	ldr	r3, [r1, #16]
 80029fe:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a00:	2301      	movs	r3, #1
 8002a02:	6143      	str	r3, [r0, #20]
}
 8002a04:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a0a:	684a      	ldr	r2, [r1, #4]
 8002a0c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0e:	e7cc      	b.n	80029aa <TIM_Base_SetConfig+0x6e>
 8002a10:	40012c00 	.word	0x40012c00

08002a14 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002a14:	b340      	cbz	r0, 8002a68 <HAL_TIM_Base_Init+0x54>
{
 8002a16:	b510      	push	{r4, lr}
 8002a18:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a1e:	b1f3      	cbz	r3, 8002a5e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a26:	4621      	mov	r1, r4
 8002a28:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a2c:	f7ff ff86 	bl	800293c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a5a:	2000      	movs	r0, #0
}
 8002a5c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a62:	f7fe f9e9 	bl	8000e38 <HAL_TIM_Base_MspInit>
 8002a66:	e7db      	b.n	8002a20 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002a68:	2001      	movs	r0, #1
}
 8002a6a:	4770      	bx	lr

08002a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a6c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a6e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a70:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a74:	430a      	orrs	r2, r1
 8002a76:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002a7a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7e:	6082      	str	r2, [r0, #8]
}
 8002a80:	bc10      	pop	{r4}
 8002a82:	4770      	bx	lr

08002a84 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	f000 809c 	beq.w	8002bc6 <HAL_TIM_ConfigClockSource+0x142>
{
 8002a8e:	b570      	push	{r4, r5, r6, lr}
 8002a90:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002a92:	2301      	movs	r3, #1
 8002a94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002a9e:	6802      	ldr	r2, [r0, #0]
 8002aa0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002aaa:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	2b60      	cmp	r3, #96	; 0x60
 8002ab0:	d054      	beq.n	8002b5c <HAL_TIM_ConfigClockSource+0xd8>
 8002ab2:	d836      	bhi.n	8002b22 <HAL_TIM_ConfigClockSource+0x9e>
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d06c      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0x10e>
 8002ab8:	d91b      	bls.n	8002af2 <HAL_TIM_ConfigClockSource+0x6e>
 8002aba:	2b50      	cmp	r3, #80	; 0x50
 8002abc:	d12a      	bne.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	6848      	ldr	r0, [r1, #4]
 8002ac2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ac4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ace:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ad4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002adc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002ae4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002aee:	6093      	str	r3, [r2, #8]
}
 8002af0:	e010      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d002      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0x78>
 8002af6:	d90a      	bls.n	8002b0e <HAL_TIM_ConfigClockSource+0x8a>
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d10b      	bne.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002afc:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002afe:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002b0a:	608b      	str	r3, [r1, #8]
}
 8002b0c:	e002      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
  switch (sClockSourceConfig->ClockSource)
 8002b0e:	f033 0210 	bics.w	r2, r3, #16
 8002b12:	d0f3      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0x78>
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b22:	2b70      	cmp	r3, #112	; 0x70
 8002b24:	d00e      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0xc0>
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d1f3      	bne.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8002b2c:	68cb      	ldr	r3, [r1, #12]
 8002b2e:	684a      	ldr	r2, [r1, #4]
 8002b30:	6889      	ldr	r1, [r1, #8]
 8002b32:	6800      	ldr	r0, [r0, #0]
 8002b34:	f7ff ff9a 	bl	8002a6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	6893      	ldr	r3, [r2, #8]
 8002b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b40:	6093      	str	r3, [r2, #8]
      break;
 8002b42:	e7e7      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
      TIM_ETR_SetConfig(htim->Instance,
 8002b44:	68cb      	ldr	r3, [r1, #12]
 8002b46:	684a      	ldr	r2, [r1, #4]
 8002b48:	6889      	ldr	r1, [r1, #8]
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	f7ff ff8e 	bl	8002a6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b50:	6822      	ldr	r2, [r4, #0]
 8002b52:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002b58:	6093      	str	r3, [r2, #8]
      break;
 8002b5a:	e7db      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b5c:	6803      	ldr	r3, [r0, #0]
 8002b5e:	684d      	ldr	r5, [r1, #4]
 8002b60:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b62:	6a18      	ldr	r0, [r3, #32]
 8002b64:	f020 0010 	bic.w	r0, r0, #16
 8002b68:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002b6c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b6e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b72:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b7a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b80:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b82:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002b84:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b8a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002b8e:	6093      	str	r3, [r2, #8]
}
 8002b90:	e7c0      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b92:	6803      	ldr	r3, [r0, #0]
 8002b94:	6848      	ldr	r0, [r1, #4]
 8002b96:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b98:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b9a:	6a1a      	ldr	r2, [r3, #32]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ba8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bac:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002bb0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002bb8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bbe:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002bc2:	6093      	str	r3, [r2, #8]
}
 8002bc4:	e7a6      	b.n	8002b14 <HAL_TIM_ConfigClockSource+0x90>
  __HAL_LOCK(htim);
 8002bc6:	2002      	movs	r0, #2
}
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d033      	beq.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8002bd4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be2:	6804      	ldr	r4, [r0, #0]
 8002be4:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be6:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bec:	680d      	ldr	r5, [r1, #0]
 8002bee:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf0:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf2:	6803      	ldr	r3, [r0, #0]
 8002bf4:	4c12      	ldr	r4, [pc, #72]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	d012      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002bfa:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002bfe:	42a3      	cmp	r3, r4
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c06:	d00b      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002c08:	f5a4 3498 	sub.w	r4, r4, #77824	; 0x13000
 8002c0c:	42a3      	cmp	r3, r4
 8002c0e:	d007      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002c10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	d003      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8002c18:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c1c:	42a3      	cmp	r3, r4
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c24:	6849      	ldr	r1, [r1, #4]
 8002c26:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	2300      	movs	r3, #0
 8002c32:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002c36:	4618      	mov	r0, r3
}
 8002c38:	bc30      	pop	{r4, r5}
 8002c3a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002c3c:	2002      	movs	r0, #2
}
 8002c3e:	4770      	bx	lr
 8002c40:	40012c00 	.word	0x40012c00

08002c44 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c46:	4770      	bx	lr

08002c48 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c48:	6802      	ldr	r2, [r0, #0]
 8002c4a:	68d3      	ldr	r3, [r2, #12]
 8002c4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c50:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c52:	6802      	ldr	r2, [r0, #0]
 8002c54:	6953      	ldr	r3, [r2, #20]
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d005      	beq.n	8002c6e <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c62:	2320      	movs	r3, #32
 8002c64:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002c6c:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6e:	6802      	ldr	r2, [r0, #0]
 8002c70:	68d3      	ldr	r3, [r2, #12]
 8002c72:	f023 0310 	bic.w	r3, r3, #16
 8002c76:	60d3      	str	r3, [r2, #12]
 8002c78:	e7f3      	b.n	8002c62 <UART_EndRxTransfer+0x1a>
	...

08002c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c80:	6802      	ldr	r2, [r0, #0]
 8002c82:	6913      	ldr	r3, [r2, #16]
 8002c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c88:	68c1      	ldr	r1, [r0, #12]
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8002c8e:	6801      	ldr	r1, [r0, #0]
 8002c90:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c92:	6883      	ldr	r3, [r0, #8]
 8002c94:	6900      	ldr	r0, [r0, #16]
 8002c96:	4303      	orrs	r3, r0
 8002c98:	6960      	ldr	r0, [r4, #20]
 8002c9a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002c9c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002ca0:	f022 020c 	bic.w	r2, r2, #12
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca8:	6822      	ldr	r2, [r4, #0]
 8002caa:	6953      	ldr	r3, [r2, #20]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	69a1      	ldr	r1, [r4, #24]
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <UART_SetConfig+0x84>)
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d01b      	beq.n	8002cf6 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cbe:	f7ff fd29 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8002cc2:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002cc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ccc:	6862      	ldr	r2, [r4, #4]
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd4:	6820      	ldr	r0, [r4, #0]
 8002cd6:	490b      	ldr	r1, [pc, #44]	; (8002d04 <UART_SetConfig+0x88>)
 8002cd8:	fba1 4203 	umull	r4, r2, r1, r3
 8002cdc:	0952      	lsrs	r2, r2, #5
 8002cde:	2464      	movs	r4, #100	; 0x64
 8002ce0:	fb04 3312 	mls	r3, r4, r2, r3
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	3332      	adds	r3, #50	; 0x32
 8002ce8:	fba1 1303 	umull	r1, r3, r1, r3
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8002cf2:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cf4:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cf6:	f7ff fd1d 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	e7e2      	b.n	8002cc4 <UART_SetConfig+0x48>
 8002cfe:	bf00      	nop
 8002d00:	40013800 	.word	0x40013800
 8002d04:	51eb851f 	.word	0x51eb851f

08002d08 <UART_WaitOnFlagUntilTimeout>:
{
 8002d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d0c:	4680      	mov	r8, r0
 8002d0e:	460e      	mov	r6, r1
 8002d10:	4615      	mov	r5, r2
 8002d12:	4699      	mov	r9, r3
 8002d14:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d16:	f8d8 2000 	ldr.w	r2, [r8]
 8002d1a:	6814      	ldr	r4, [r2, #0]
 8002d1c:	ea36 0304 	bics.w	r3, r6, r4
 8002d20:	bf0c      	ite	eq
 8002d22:	f04f 0c01 	moveq.w	ip, #1
 8002d26:	f04f 0c00 	movne.w	ip, #0
 8002d2a:	45ac      	cmp	ip, r5
 8002d2c:	d11f      	bne.n	8002d6e <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8002d32:	d0f2      	beq.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d34:	b12f      	cbz	r7, 8002d42 <UART_WaitOnFlagUntilTimeout+0x3a>
 8002d36:	f7fe fa67 	bl	8001208 <HAL_GetTick>
 8002d3a:	eba0 0009 	sub.w	r0, r0, r9
 8002d3e:	42b8      	cmp	r0, r7
 8002d40:	d9e9      	bls.n	8002d16 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d42:	f8d8 2000 	ldr.w	r2, [r8]
 8002d46:	68d3      	ldr	r3, [r2, #12]
 8002d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d4c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	f8d8 2000 	ldr.w	r2, [r8]
 8002d52:	6953      	ldr	r3, [r2, #20]
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d60:	f888 303e 	strb.w	r3, [r8, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002d64:	2300      	movs	r3, #0
 8002d66:	f888 303c 	strb.w	r3, [r8, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	e000      	b.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8002d6e:	2000      	movs	r0, #0
}
 8002d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002d74 <HAL_UART_Init>:
  if (huart == NULL)
 8002d74:	b358      	cbz	r0, 8002dce <HAL_UART_Init+0x5a>
{
 8002d76:	b510      	push	{r4, lr}
 8002d78:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d7e:	b30b      	cbz	r3, 8002dc4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	2324      	movs	r3, #36	; 0x24
 8002d82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002d86:	6822      	ldr	r2, [r4, #0]
 8002d88:	68d3      	ldr	r3, [r2, #12]
 8002d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d8e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d90:	4620      	mov	r0, r4
 8002d92:	f7ff ff73 	bl	8002c7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d96:	6822      	ldr	r2, [r4, #0]
 8002d98:	6913      	ldr	r3, [r2, #16]
 8002d9a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d9e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da0:	6822      	ldr	r2, [r4, #0]
 8002da2:	6953      	ldr	r3, [r2, #20]
 8002da4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002da8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	68d3      	ldr	r3, [r2, #12]
 8002dae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002db2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db4:	2000      	movs	r0, #0
 8002db6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002db8:	2320      	movs	r3, #32
 8002dba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002dc2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002dc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002dc8:	f7fe f86e 	bl	8000ea8 <HAL_UART_MspInit>
 8002dcc:	e7d8      	b.n	8002d80 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002dce:	2001      	movs	r0, #1
}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_UART_Transmit>:
{
 8002dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002dda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d15a      	bne.n	8002e9a <HAL_UART_Transmit+0xc8>
 8002de4:	4604      	mov	r4, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002dea:	2900      	cmp	r1, #0
 8002dec:	d059      	beq.n	8002ea2 <HAL_UART_Transmit+0xd0>
 8002dee:	2a00      	cmp	r2, #0
 8002df0:	d059      	beq.n	8002ea6 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8002df2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d057      	beq.n	8002eaa <HAL_UART_Transmit+0xd8>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e04:	2321      	movs	r3, #33	; 0x21
 8002e06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002e0a:	f7fe f9fd 	bl	8001208 <HAL_GetTick>
 8002e0e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002e10:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e14:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	68a3      	ldr	r3, [r4, #8]
 8002e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1e:	d00c      	beq.n	8002e3a <HAL_UART_Transmit+0x68>
      pdata16bits = NULL;
 8002e20:	f04f 0a00 	mov.w	sl, #0
    __HAL_UNLOCK(huart);
 8002e24:	2300      	movs	r3, #0
 8002e26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002e2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b343      	cbz	r3, 8002e82 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e30:	f04f 0900 	mov.w	r9, #0
 8002e34:	f04f 0880 	mov.w	r8, #128	; 0x80
 8002e38:	e014      	b.n	8002e64 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3a:	6923      	ldr	r3, [r4, #16]
 8002e3c:	b913      	cbnz	r3, 8002e44 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 8002e3e:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002e40:	2500      	movs	r5, #0
 8002e42:	e7ef      	b.n	8002e24 <HAL_UART_Transmit+0x52>
      pdata16bits = NULL;
 8002e44:	f04f 0a00 	mov.w	sl, #0
 8002e48:	e7ec      	b.n	8002e24 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4a:	6822      	ldr	r2, [r4, #0]
 8002e4c:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e54:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002e56:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e5e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	b173      	cbz	r3, 8002e82 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e64:	9600      	str	r6, [sp, #0]
 8002e66:	463b      	mov	r3, r7
 8002e68:	464a      	mov	r2, r9
 8002e6a:	4641      	mov	r1, r8
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff ff4b 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 8002e72:	b9e0      	cbnz	r0, 8002eae <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8002e74:	2d00      	cmp	r5, #0
 8002e76:	d0e8      	beq.n	8002e4a <HAL_UART_Transmit+0x78>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e80:	e7e9      	b.n	8002e56 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	9600      	str	r6, [sp, #0]
 8002e84:	463b      	mov	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff ff3c 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 8002e90:	b978      	cbnz	r0, 8002eb2 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8002e92:	2320      	movs	r3, #32
 8002e94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002e98:	e000      	b.n	8002e9c <HAL_UART_Transmit+0xca>
    return HAL_BUSY;
 8002e9a:	2002      	movs	r0, #2
}
 8002e9c:	b002      	add	sp, #8
 8002e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	e7fa      	b.n	8002e9c <HAL_UART_Transmit+0xca>
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	e7f8      	b.n	8002e9c <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8002eaa:	2002      	movs	r0, #2
 8002eac:	e7f6      	b.n	8002e9c <HAL_UART_Transmit+0xca>
        return HAL_TIMEOUT;
 8002eae:	2003      	movs	r0, #3
 8002eb0:	e7f4      	b.n	8002e9c <HAL_UART_Transmit+0xca>
      return HAL_TIMEOUT;
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	e7f2      	b.n	8002e9c <HAL_UART_Transmit+0xca>

08002eb6 <HAL_UART_TxCpltCallback>:
}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_UART_ErrorCallback>:
}
 8002eb8:	4770      	bx	lr

08002eba <UART_DMAAbortOnError>:
{
 8002eba:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ebc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ec2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002ec4:	f7ff fff8 	bl	8002eb8 <HAL_UART_ErrorCallback>
}
 8002ec8:	bd08      	pop	{r3, pc}

08002eca <HAL_UARTEx_RxEventCallback>:
}
 8002eca:	4770      	bx	lr

08002ecc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ecc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b22      	cmp	r3, #34	; 0x22
 8002ed4:	d11e      	bne.n	8002f14 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed6:	6883      	ldr	r3, [r0, #8]
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002edc:	d006      	beq.n	8002eec <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ede:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ee0:	b183      	cbz	r3, 8002f04 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ee2:	6803      	ldr	r3, [r0, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eea:	e01b      	b.n	8002f24 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	6903      	ldr	r3, [r0, #16]
 8002eee:	b9ab      	cbnz	r3, 8002f1c <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ef0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ef2:	6803      	ldr	r3, [r0, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efa:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002efc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002efe:	3302      	adds	r3, #2
 8002f00:	6283      	str	r3, [r0, #40]	; 0x28
 8002f02:	e013      	b.n	8002f2c <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f04:	6903      	ldr	r3, [r0, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1eb      	bne.n	8002ee2 <UART_Receive_IT+0x16>
 8002f0a:	e008      	b.n	8002f1e <UART_Receive_IT+0x52>
       HAL_UART_RxCpltCallback(huart);
 8002f0c:	f000 fba0 	bl	8003650 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002f10:	2000      	movs	r0, #0
 8002f12:	e03f      	b.n	8002f94 <UART_Receive_IT+0xc8>
    return HAL_BUSY;
 8002f14:	2002      	movs	r0, #2
 8002f16:	4770      	bx	lr
    return HAL_OK;
 8002f18:	2000      	movs	r0, #0
}
 8002f1a:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f1c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f1e:	6803      	ldr	r3, [r0, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002f26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f28:	3301      	adds	r3, #1
 8002f2a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002f2c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ef      	bne.n	8002f18 <UART_Receive_IT+0x4c>
{
 8002f38:	b500      	push	{lr}
 8002f3a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f3c:	6802      	ldr	r2, [r0, #0]
 8002f3e:	68d3      	ldr	r3, [r2, #12]
 8002f40:	f023 0320 	bic.w	r3, r3, #32
 8002f44:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f46:	6802      	ldr	r2, [r0, #0]
 8002f48:	68d3      	ldr	r3, [r2, #12]
 8002f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f50:	6802      	ldr	r2, [r0, #0]
 8002f52:	6953      	ldr	r3, [r2, #20]
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d1d2      	bne.n	8002f0c <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f66:	2300      	movs	r3, #0
 8002f68:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	6802      	ldr	r2, [r0, #0]
 8002f6c:	68d3      	ldr	r3, [r2, #12]
 8002f6e:	f023 0310 	bic.w	r3, r3, #16
 8002f72:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f74:	6803      	ldr	r3, [r0, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f012 0f10 	tst.w	r2, #16
 8002f7c:	d006      	beq.n	8002f8c <UART_Receive_IT+0xc0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	9201      	str	r2, [sp, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	9201      	str	r2, [sp, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f8c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002f8e:	f7ff ff9c 	bl	8002eca <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8002f92:	2000      	movs	r0, #0
}
 8002f94:	b003      	add	sp, #12
 8002f96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002f9c <HAL_UART_IRQHandler>:
{
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fa2:	6802      	ldr	r2, [r0, #0]
 8002fa4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa6:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fa8:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 8002faa:	f013 0f0f 	tst.w	r3, #15
 8002fae:	d109      	bne.n	8002fc4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb0:	f013 0f20 	tst.w	r3, #32
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x36>
 8002fb6:	f011 0f20 	tst.w	r1, #32
 8002fba:	d00a      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff ff85 	bl	8002ecc <UART_Receive_IT>
      return;
 8002fc2:	e017      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fc4:	f000 0001 	and.w	r0, r0, #1
 8002fc8:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 8002fcc:	ea5c 0c00 	orrs.w	ip, ip, r0
 8002fd0:	d112      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002fd4:	2801      	cmp	r0, #1
 8002fd6:	d077      	beq.n	80030c8 <HAL_UART_IRQHandler+0x12c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fdc:	d003      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x4a>
 8002fde:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002fe2:	f040 80d9 	bne.w	8003198 <HAL_UART_IRQHandler+0x1fc>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fe6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002fea:	d003      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x58>
 8002fec:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ff0:	f040 80ff 	bne.w	80031f2 <HAL_UART_IRQHandler+0x256>
}
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ff8:	f013 0f01 	tst.w	r3, #1
 8002ffc:	d006      	beq.n	800300c <HAL_UART_IRQHandler+0x70>
 8002ffe:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003002:	d003      	beq.n	800300c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003004:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300c:	f013 0f04 	tst.w	r3, #4
 8003010:	d02f      	beq.n	8003072 <HAL_UART_IRQHandler+0xd6>
 8003012:	b158      	cbz	r0, 800302c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003014:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003016:	f042 0202 	orr.w	r2, r2, #2
 800301a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800301c:	f013 0f02 	tst.w	r3, #2
 8003020:	f000 80f2 	beq.w	8003208 <HAL_UART_IRQHandler+0x26c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003024:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003026:	f042 0204 	orr.w	r2, r2, #4
 800302a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800302c:	f013 0f08 	tst.w	r3, #8
 8003030:	d007      	beq.n	8003042 <HAL_UART_IRQHandler+0xa6>
 8003032:	f001 0220 	and.w	r2, r1, #32
 8003036:	4302      	orrs	r2, r0
 8003038:	d003      	beq.n	8003042 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800303a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003042:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003044:	2a00      	cmp	r2, #0
 8003046:	d0d5      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003048:	f013 0f20 	tst.w	r3, #32
 800304c:	d002      	beq.n	8003054 <HAL_UART_IRQHandler+0xb8>
 800304e:	f011 0f20 	tst.w	r1, #32
 8003052:	d114      	bne.n	800307e <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003058:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800305a:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	4313      	orrs	r3, r2
 8003064:	d10f      	bne.n	8003086 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff ff26 	bl	8002eb8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	2300      	movs	r3, #0
 800306e:	6423      	str	r3, [r4, #64]	; 0x40
 8003070:	e7c0      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003072:	f013 0f02 	tst.w	r3, #2
 8003076:	d0d9      	beq.n	800302c <HAL_UART_IRQHandler+0x90>
 8003078:	2800      	cmp	r0, #0
 800307a:	d0d7      	beq.n	800302c <HAL_UART_IRQHandler+0x90>
 800307c:	e7d2      	b.n	8003024 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 800307e:	4620      	mov	r0, r4
 8003080:	f7ff ff24 	bl	8002ecc <UART_Receive_IT>
 8003084:	e7e6      	b.n	8003054 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff fdde 	bl	8002c48 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003094:	d014      	beq.n	80030c0 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800309e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030a0:	b153      	cbz	r3, 80030b8 <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030a2:	4a5c      	ldr	r2, [pc, #368]	; (8003214 <HAL_UART_IRQHandler+0x278>)
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030a8:	f7fe f9ec 	bl	8001484 <HAL_DMA_Abort_IT>
 80030ac:	2800      	cmp	r0, #0
 80030ae:	d0a1      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80030b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030b4:	4798      	blx	r3
 80030b6:	e79d      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff fefd 	bl	8002eb8 <HAL_UART_ErrorCallback>
 80030be:	e799      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 80030c0:	4620      	mov	r0, r4
 80030c2:	f7ff fef9 	bl	8002eb8 <HAL_UART_ErrorCallback>
 80030c6:	e795      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80030c8:	f013 0f10 	tst.w	r3, #16
 80030cc:	d084      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80030ce:	f011 0f10 	tst.w	r1, #16
 80030d2:	d081      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d4:	2300      	movs	r3, #0
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	6853      	ldr	r3, [r2, #4]
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e2:	6953      	ldr	r3, [r2, #20]
 80030e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030e8:	d032      	beq.n	8003150 <HAL_UART_IRQHandler+0x1b4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80030ec:	680b      	ldr	r3, [r1, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f43f af7e 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x58>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80030f8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80030fa:	4298      	cmp	r0, r3
 80030fc:	f67f af7a 	bls.w	8002ff4 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8003100:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003102:	698b      	ldr	r3, [r1, #24]
 8003104:	2b20      	cmp	r3, #32
 8003106:	d107      	bne.n	8003118 <HAL_UART_IRQHandler+0x17c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003108:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800310a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800310c:	1ac9      	subs	r1, r1, r3
 800310e:	b289      	uxth	r1, r1
 8003110:	4620      	mov	r0, r4
 8003112:	f7ff feda 	bl	8002eca <HAL_UARTEx_RxEventCallback>
 8003116:	e76d      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003118:	68d3      	ldr	r3, [r2, #12]
 800311a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311e:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003120:	6822      	ldr	r2, [r4, #0]
 8003122:	6953      	ldr	r3, [r2, #20]
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	6953      	ldr	r3, [r2, #20]
 800312e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003132:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003134:	2320      	movs	r3, #32
 8003136:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313a:	2300      	movs	r3, #0
 800313c:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	68d3      	ldr	r3, [r2, #12]
 8003142:	f023 0310 	bic.w	r3, r3, #16
 8003146:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003148:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800314a:	f7fe f978 	bl	800143e <HAL_DMA_Abort>
 800314e:	e7db      	b.n	8003108 <HAL_UART_IRQHandler+0x16c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003150:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003152:	b299      	uxth	r1, r3
      if (  (huart->RxXferCount > 0U)
 8003154:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	f43f af4b 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800315e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8003160:	1a59      	subs	r1, r3, r1
 8003162:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8003164:	2900      	cmp	r1, #0
 8003166:	f43f af45 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316a:	68d3      	ldr	r3, [r2, #12]
 800316c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003170:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003172:	6822      	ldr	r2, [r4, #0]
 8003174:	6953      	ldr	r3, [r2, #20]
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800317c:	2320      	movs	r3, #32
 800317e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003182:	2300      	movs	r3, #0
 8003184:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	68d3      	ldr	r3, [r2, #12]
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff fe9a 	bl	8002eca <HAL_UARTEx_RxEventCallback>
 8003196:	e72d      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003198:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b21      	cmp	r3, #33	; 0x21
 80031a0:	f47f af28 	bne.w	8002ff4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a4:	68a3      	ldr	r3, [r4, #8]
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d016      	beq.n	80031da <HAL_UART_IRQHandler+0x23e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031ac:	6a23      	ldr	r3, [r4, #32]
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	6221      	str	r1, [r4, #32]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 80031b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	84e3      	strh	r3, [r4, #38]	; 0x26
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f47f af18 	bne.w	8002ff4 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	68d3      	ldr	r3, [r2, #12]
 80031c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031cc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	68d3      	ldr	r3, [r2, #12]
 80031d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d6:	60d3      	str	r3, [r2, #12]
 80031d8:	e70c      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <HAL_UART_IRQHandler+0x210>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031e0:	6a23      	ldr	r3, [r4, #32]
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e8:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80031ea:	6a23      	ldr	r3, [r4, #32]
 80031ec:	3302      	adds	r3, #2
 80031ee:	6223      	str	r3, [r4, #32]
 80031f0:	e7e1      	b.n	80031b6 <HAL_UART_IRQHandler+0x21a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031f2:	68d3      	ldr	r3, [r2, #12]
 80031f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f8:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80031fa:	2320      	movs	r3, #32
 80031fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003200:	4620      	mov	r0, r4
 8003202:	f7ff fe58 	bl	8002eb6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003206:	e6f5      	b.n	8002ff4 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003208:	f013 0f08 	tst.w	r3, #8
 800320c:	f47f af15 	bne.w	800303a <HAL_UART_IRQHandler+0x9e>
 8003210:	e717      	b.n	8003042 <HAL_UART_IRQHandler+0xa6>
 8003212:	bf00      	nop
 8003214:	08002ebb 	.word	0x08002ebb

08003218 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8003218:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 800321c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8003220:	4318      	orrs	r0, r3
 8003222:	4770      	bx	lr

08003224 <UART_Start_Receive_IT>:
{
 8003224:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8003226:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8003228:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800322a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	2000      	movs	r0, #0
 800322e:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003230:	2222      	movs	r2, #34	; 0x22
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8003236:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	68ca      	ldr	r2, [r1, #12]
 800323e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003242:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	694a      	ldr	r2, [r1, #20]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68d3      	ldr	r3, [r2, #12]
 8003252:	f043 0320 	orr.w	r3, r3, #32
 8003256:	60d3      	str	r3, [r2, #12]
}
 8003258:	4770      	bx	lr

0800325a <HAL_UART_Receive_IT>:
{
 800325a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800325c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	d10d      	bne.n	8003282 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8003266:	b171      	cbz	r1, 8003286 <HAL_UART_Receive_IT+0x2c>
 8003268:	b17a      	cbz	r2, 800328a <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 800326a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d00d      	beq.n	800328e <HAL_UART_Receive_IT+0x34>
 8003272:	2301      	movs	r3, #1
 8003274:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	2300      	movs	r3, #0
 800327a:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 800327c:	f7ff ffd2 	bl	8003224 <UART_Start_Receive_IT>
 8003280:	e000      	b.n	8003284 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8003282:	2002      	movs	r0, #2
}
 8003284:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8003286:	2001      	movs	r0, #1
 8003288:	e7fc      	b.n	8003284 <HAL_UART_Receive_IT+0x2a>
 800328a:	2001      	movs	r0, #1
 800328c:	e7fa      	b.n	8003284 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 800328e:	2002      	movs	r0, #2
 8003290:	e7f8      	b.n	8003284 <HAL_UART_Receive_IT+0x2a>
	...

08003294 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003294:	b430      	push	{r4, r5}
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003296:	680a      	ldr	r2, [r1, #0]
 8003298:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80032a4:	688b      	ldr	r3, [r1, #8]
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	bf0c      	ite	eq
 80032aa:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 80032ae:	f04f 0c00 	movne.w	ip, #0
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80032b2:	680a      	ldr	r2, [r1, #0]
 80032b4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80032b8:	684d      	ldr	r5, [r1, #4]
 80032ba:	432b      	orrs	r3, r5
 80032bc:	68cd      	ldr	r5, [r1, #12]
 80032be:	432b      	orrs	r3, r5
 80032c0:	690d      	ldr	r5, [r1, #16]
 80032c2:	432b      	orrs	r3, r5
 80032c4:	694d      	ldr	r5, [r1, #20]
 80032c6:	432b      	orrs	r3, r5
 80032c8:	69cd      	ldr	r5, [r1, #28]
 80032ca:	432b      	orrs	r3, r5
 80032cc:	6a0d      	ldr	r5, [r1, #32]
 80032ce:	432b      	orrs	r3, r5
 80032d0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80032d2:	432b      	orrs	r3, r5
 80032d4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80032d6:	432b      	orrs	r3, r5
 80032d8:	6acd      	ldr	r5, [r1, #44]	; 0x2c
 80032da:	432b      	orrs	r3, r5
 80032dc:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80032de:	432b      	orrs	r3, r5
 80032e0:	698d      	ldr	r5, [r1, #24]
 80032e2:	432b      	orrs	r3, r5
 80032e4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80032e6:	430b      	orrs	r3, r1
 80032e8:	4904      	ldr	r1, [pc, #16]	; (80032fc <FSMC_NORSRAM_Init+0x68>)
 80032ea:	4021      	ands	r1, r4
 80032ec:	430b      	orrs	r3, r1
 80032ee:	ea43 030c 	orr.w	r3, r3, ip
 80032f2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]


  return HAL_OK;
}
 80032f6:	2000      	movs	r0, #0
 80032f8:	bc30      	pop	{r4, r5}
 80032fa:	4770      	bx	lr
 80032fc:	fff00080 	.word	0xfff00080

08003300 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003300:	b410      	push	{r4}
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003302:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003306:	6850      	ldr	r0, [r2, #4]
 8003308:	680b      	ldr	r3, [r1, #0]
 800330a:	698c      	ldr	r4, [r1, #24]
 800330c:	4323      	orrs	r3, r4
 800330e:	684c      	ldr	r4, [r1, #4]
 8003310:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003314:	688c      	ldr	r4, [r1, #8]
 8003316:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800331a:	68cc      	ldr	r4, [r1, #12]
 800331c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003320:	690c      	ldr	r4, [r1, #16]
 8003322:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003326:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800332a:	6949      	ldr	r1, [r1, #20]
 800332c:	3902      	subs	r1, #2
 800332e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003332:	f000 4140 	and.w	r1, r0, #3221225472	; 0xc0000000
 8003336:	430b      	orrs	r3, r1
 8003338:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
}
 800333a:	2000      	movs	r0, #0
 800333c:	bc10      	pop	{r4}
 800333e:	4770      	bx	lr

08003340 <FSMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003344:	d005      	beq.n	8003352 <FSMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003346:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800334a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800334e:	2000      	movs	r0, #0
 8003350:	4770      	bx	lr
{
 8003352:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003354:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8003358:	680b      	ldr	r3, [r1, #0]
 800335a:	698d      	ldr	r5, [r1, #24]
 800335c:	432b      	orrs	r3, r5
 800335e:	684d      	ldr	r5, [r1, #4]
 8003360:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003364:	688d      	ldr	r5, [r1, #8]
 8003366:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800336a:	68c9      	ldr	r1, [r1, #12]
 800336c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003370:	4903      	ldr	r1, [pc, #12]	; (8003380 <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8003372:	4021      	ands	r1, r4
 8003374:	430b      	orrs	r3, r1
 8003376:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800337a:	2000      	movs	r0, #0
 800337c:	bc30      	pop	{r4, r5}
 800337e:	4770      	bx	lr
 8003380:	cff00000 	.word	0xcff00000

08003384 <clearReceivedBuffer>:
    clearReceivedBuffer();
}

// Reset the buffer
void clearReceivedBuffer()
{
 8003384:	b508      	push	{r3, lr}
    buffer_index = 0;
 8003386:	2100      	movs	r1, #0
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <clearReceivedBuffer+0x14>)
 800338a:	6019      	str	r1, [r3, #0]
    memset(buffer,0,sizeof(buffer));
 800338c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <clearReceivedBuffer+0x18>)
 8003392:	f029 fc01 	bl	802cb98 <memset>
}
 8003396:	bd08      	pop	{r3, pc}
 8003398:	2000125c 	.word	0x2000125c
 800339c:	20000a5c 	.word	0x20000a5c

080033a0 <sendData>:
{
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4604      	mov	r4, r0
	clearReceivedBuffer();
 80033a4:	f7ff ffee 	bl	8003384 <clearReceivedBuffer>
    HAL_UART_Transmit(&huart3, (uint8_t *)command,strlen(command),5000);
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7fc ff45 	bl	8000238 <strlen>
 80033ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80033b2:	b282      	uxth	r2, r0
 80033b4:	4621      	mov	r1, r4
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <sendData+0x2c>)
 80033b8:	f7ff fd0b 	bl	8002dd2 <HAL_UART_Transmit>
    while(HAL_UART_GetState(&huart3) == HAL_UART_STATE_BUSY_TX);
 80033bc:	4c03      	ldr	r4, [pc, #12]	; (80033cc <sendData+0x2c>)
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff ff2a 	bl	8003218 <HAL_UART_GetState>
 80033c4:	2821      	cmp	r0, #33	; 0x21
 80033c6:	d0fa      	beq.n	80033be <sendData+0x1e>
}
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	bf00      	nop
 80033cc:	20000a0c 	.word	0x20000a0c

080033d0 <showResponse>:
{
 80033d0:	b510      	push	{r4, lr}
 80033d2:	f6ad 0d68 	subw	sp, sp, #2152	; 0x868
	sprintf(temp,"Size: %d\n%s", strlen(buffer),buffer);
 80033d6:	4c09      	ldr	r4, [pc, #36]	; (80033fc <showResponse+0x2c>)
 80033d8:	4620      	mov	r0, r4
 80033da:	f7fc ff2d 	bl	8000238 <strlen>
 80033de:	4602      	mov	r2, r0
 80033e0:	4623      	mov	r3, r4
 80033e2:	4907      	ldr	r1, [pc, #28]	; (8003400 <showResponse+0x30>)
 80033e4:	a801      	add	r0, sp, #4
 80033e6:	f029 fd75 	bl	802ced4 <siprintf>
	print_debug(temp);
 80033ea:	a801      	add	r0, sp, #4
 80033ec:	f000 f9ba 	bl	8003764 <print_debug>
    clearReceivedBuffer();
 80033f0:	f7ff ffc8 	bl	8003384 <clearReceivedBuffer>
}
 80033f4:	f60d 0d68 	addw	sp, sp, #2152	; 0x868
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	bf00      	nop
 80033fc:	20000a5c 	.word	0x20000a5c
 8003400:	0802d500 	.word	0x0802d500

08003404 <checkAT>:


// Send "AT" to check if working, should respond with OK
void checkAT()
{
 8003404:	b508      	push	{r3, lr}
	sendData("AT\r\n");
 8003406:	4805      	ldr	r0, [pc, #20]	; (800341c <checkAT+0x18>)
 8003408:	f7ff ffca 	bl	80033a0 <sendData>
	HAL_Delay(1000);
 800340c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003410:	f7fd ff00 	bl	8001214 <HAL_Delay>
	showResponse();
 8003414:	f7ff ffdc 	bl	80033d0 <showResponse>
}
 8003418:	bd08      	pop	{r3, pc}
 800341a:	bf00      	nop
 800341c:	0802d50c 	.word	0x0802d50c

08003420 <resetEsp>:
	clearReceivedBuffer();
}

// Reset module
void resetEsp()
{
 8003420:	b508      	push	{r3, lr}
	sendData("AT+RST\r\n");
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <resetEsp+0x18>)
 8003424:	f7ff ffbc 	bl	80033a0 <sendData>
	HAL_Delay(5000);
 8003428:	f241 3088 	movw	r0, #5000	; 0x1388
 800342c:	f7fd fef2 	bl	8001214 <HAL_Delay>
	clearReceivedBuffer();
 8003430:	f7ff ffa8 	bl	8003384 <clearReceivedBuffer>
}
 8003434:	bd08      	pop	{r3, pc}
 8003436:	bf00      	nop
 8003438:	0802d514 	.word	0x0802d514

0800343c <connectWifi>:


// Connect to WIFI
void connectWifi(char* ssid, char* passwd)
{
 800343c:	b530      	push	{r4, r5, lr}
 800343e:	b09b      	sub	sp, #108	; 0x6c
 8003440:	4604      	mov	r4, r0
 8003442:	460d      	mov	r5, r1
	sendData("AT+CWMODE=1\r\n");
 8003444:	4817      	ldr	r0, [pc, #92]	; (80034a4 <connectWifi+0x68>)
 8003446:	f7ff ffab 	bl	80033a0 <sendData>
	HAL_Delay(200);
 800344a:	20c8      	movs	r0, #200	; 0xc8
 800344c:	f7fd fee2 	bl	8001214 <HAL_Delay>
	sendData("AT+CWDHCP=1,1\r\n");
 8003450:	4815      	ldr	r0, [pc, #84]	; (80034a8 <connectWifi+0x6c>)
 8003452:	f7ff ffa5 	bl	80033a0 <sendData>
	HAL_Delay(200);
 8003456:	20c8      	movs	r0, #200	; 0xc8
 8003458:	f7fd fedc 	bl	8001214 <HAL_Delay>
	sendData("AT+CIPMUX=1\r\n");
 800345c:	4813      	ldr	r0, [pc, #76]	; (80034ac <connectWifi+0x70>)
 800345e:	f7ff ff9f 	bl	80033a0 <sendData>
	HAL_Delay(200);
 8003462:	20c8      	movs	r0, #200	; 0xc8
 8003464:	f7fd fed6 	bl	8001214 <HAL_Delay>
	sendData("AT+CIPSERVER=1,80\r\n");
 8003468:	4811      	ldr	r0, [pc, #68]	; (80034b0 <connectWifi+0x74>)
 800346a:	f7ff ff99 	bl	80033a0 <sendData>
	HAL_Delay(200);
 800346e:	20c8      	movs	r0, #200	; 0xc8
 8003470:	f7fd fed0 	bl	8001214 <HAL_Delay>
	char wifi_info[100]={0};
 8003474:	2100      	movs	r1, #0
 8003476:	9101      	str	r1, [sp, #4]
 8003478:	2260      	movs	r2, #96	; 0x60
 800347a:	a802      	add	r0, sp, #8
 800347c:	f029 fb8c 	bl	802cb98 <memset>
	sprintf(wifi_info,"AT+CWJAP=\"%s\",\"%s\"\r\n",ssid,passwd);
 8003480:	462b      	mov	r3, r5
 8003482:	4622      	mov	r2, r4
 8003484:	490b      	ldr	r1, [pc, #44]	; (80034b4 <connectWifi+0x78>)
 8003486:	a801      	add	r0, sp, #4
 8003488:	f029 fd24 	bl	802ced4 <siprintf>
	sendData(wifi_info);
 800348c:	a801      	add	r0, sp, #4
 800348e:	f7ff ff87 	bl	80033a0 <sendData>
	HAL_Delay(5000);
 8003492:	f241 3088 	movw	r0, #5000	; 0x1388
 8003496:	f7fd febd 	bl	8001214 <HAL_Delay>
	clearReceivedBuffer();
 800349a:	f7ff ff73 	bl	8003384 <clearReceivedBuffer>
//	showResponse();
//	HAL_Delay(1000);
}
 800349e:	b01b      	add	sp, #108	; 0x6c
 80034a0:	bd30      	pop	{r4, r5, pc}
 80034a2:	bf00      	nop
 80034a4:	0802d520 	.word	0x0802d520
 80034a8:	0802d530 	.word	0x0802d530
 80034ac:	0802d540 	.word	0x0802d540
 80034b0:	0802d550 	.word	0x0802d550
 80034b4:	0802d564 	.word	0x0802d564

080034b8 <sendWebsite>:
	clearReceivedBuffer();
}

// sends html file to server
void sendWebsite()
{
 80034b8:	b510      	push	{r4, lr}
 80034ba:	b08e      	sub	sp, #56	; 0x38
	char at_command[50] = {0};
 80034bc:	2100      	movs	r1, #0
 80034be:	9101      	str	r1, [sp, #4]
 80034c0:	222e      	movs	r2, #46	; 0x2e
 80034c2:	a802      	add	r0, sp, #8
 80034c4:	f029 fb68 	bl	802cb98 <memset>
	sprintf(at_command,"AT+CIPSEND=0,%i\r\n",strlen(html_file));
 80034c8:	4c0f      	ldr	r4, [pc, #60]	; (8003508 <sendWebsite+0x50>)
 80034ca:	4620      	mov	r0, r4
 80034cc:	f7fc feb4 	bl	8000238 <strlen>
 80034d0:	4602      	mov	r2, r0
 80034d2:	490e      	ldr	r1, [pc, #56]	; (800350c <sendWebsite+0x54>)
 80034d4:	a801      	add	r0, sp, #4
 80034d6:	f029 fcfd 	bl	802ced4 <siprintf>
	sendData(at_command);
 80034da:	a801      	add	r0, sp, #4
 80034dc:	f7ff ff60 	bl	80033a0 <sendData>
	HAL_Delay(100);
 80034e0:	2064      	movs	r0, #100	; 0x64
 80034e2:	f7fd fe97 	bl	8001214 <HAL_Delay>
	sendData(html_file);
 80034e6:	4620      	mov	r0, r4
 80034e8:	f7ff ff5a 	bl	80033a0 <sendData>
	HAL_Delay(100);
 80034ec:	2064      	movs	r0, #100	; 0x64
 80034ee:	f7fd fe91 	bl	8001214 <HAL_Delay>
	sendData("AT+CIPCLOSE=0\r\n");
 80034f2:	4807      	ldr	r0, [pc, #28]	; (8003510 <sendWebsite+0x58>)
 80034f4:	f7ff ff54 	bl	80033a0 <sendData>
	HAL_Delay(100);
 80034f8:	2064      	movs	r0, #100	; 0x64
 80034fa:	f7fd fe8b 	bl	8001214 <HAL_Delay>
	clearReceivedBuffer();
 80034fe:	f7ff ff41 	bl	8003384 <clearReceivedBuffer>
}
 8003502:	b00e      	add	sp, #56	; 0x38
 8003504:	bd10      	pop	{r4, pc}
 8003506:	bf00      	nop
 8003508:	2000000c 	.word	0x2000000c
 800350c:	0802d5cc 	.word	0x0802d5cc
 8003510:	0802d5e0 	.word	0x0802d5e0

08003514 <serverHandler>:
//
//}

// handles incoming requests
void serverHandler()
{
 8003514:	b508      	push	{r3, lr}
	__HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE);
 8003516:	4b25      	ldr	r3, [pc, #148]	; (80035ac <serverHandler+0x98>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68d3      	ldr	r3, [r2, #12]
 800351c:	f023 0320 	bic.w	r3, r3, #32
 8003520:	60d3      	str	r3, [r2, #12]
	// If an HTTP GET request header is found and requests for html page, then we give it default static webpage by sending HTML file to server
	if(strstr(buffer,"GET")!=NULL && (strstr(buffer,"html"))!=NULL)
 8003522:	4923      	ldr	r1, [pc, #140]	; (80035b0 <serverHandler+0x9c>)
 8003524:	4823      	ldr	r0, [pc, #140]	; (80035b4 <serverHandler+0xa0>)
 8003526:	f029 fcfd 	bl	802cf24 <strstr>
 800352a:	b140      	cbz	r0, 800353e <serverHandler+0x2a>
 800352c:	4922      	ldr	r1, [pc, #136]	; (80035b8 <serverHandler+0xa4>)
 800352e:	4821      	ldr	r0, [pc, #132]	; (80035b4 <serverHandler+0xa0>)
 8003530:	f029 fcf8 	bl	802cf24 <strstr>
 8003534:	b150      	cbz	r0, 800354c <serverHandler+0x38>
	{
		sendWebsite();
 8003536:	f7ff ffbf 	bl	80034b8 <sendWebsite>
		clearReceivedBuffer();
 800353a:	f7ff ff23 	bl	8003384 <clearReceivedBuffer>
		{
			print_debug("Backward");
		}
		clearReceivedBuffer();
	}
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <serverHandler+0x98>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68d3      	ldr	r3, [r2, #12]
 8003544:	f043 0320 	orr.w	r3, r3, #32
 8003548:	60d3      	str	r3, [r2, #12]
}
 800354a:	bd08      	pop	{r3, pc}
	else if(strstr(buffer,"GET")!=NULL && strstr(buffer,"go")!=NULL)
 800354c:	491b      	ldr	r1, [pc, #108]	; (80035bc <serverHandler+0xa8>)
 800354e:	4819      	ldr	r0, [pc, #100]	; (80035b4 <serverHandler+0xa0>)
 8003550:	f029 fce8 	bl	802cf24 <strstr>
 8003554:	2800      	cmp	r0, #0
 8003556:	d0f2      	beq.n	800353e <serverHandler+0x2a>
		showResponse();
 8003558:	f7ff ff3a 	bl	80033d0 <showResponse>
		if(strstr(buffer,"Forward")!=NULL)
 800355c:	4918      	ldr	r1, [pc, #96]	; (80035c0 <serverHandler+0xac>)
 800355e:	4815      	ldr	r0, [pc, #84]	; (80035b4 <serverHandler+0xa0>)
 8003560:	f029 fce0 	bl	802cf24 <strstr>
 8003564:	b128      	cbz	r0, 8003572 <serverHandler+0x5e>
			print_debug("Forward");
 8003566:	4816      	ldr	r0, [pc, #88]	; (80035c0 <serverHandler+0xac>)
 8003568:	f000 f8fc 	bl	8003764 <print_debug>
		clearReceivedBuffer();
 800356c:	f7ff ff0a 	bl	8003384 <clearReceivedBuffer>
 8003570:	e7e5      	b.n	800353e <serverHandler+0x2a>
		else if(strstr(buffer,"Left")!=NULL)
 8003572:	4914      	ldr	r1, [pc, #80]	; (80035c4 <serverHandler+0xb0>)
 8003574:	480f      	ldr	r0, [pc, #60]	; (80035b4 <serverHandler+0xa0>)
 8003576:	f029 fcd5 	bl	802cf24 <strstr>
 800357a:	b118      	cbz	r0, 8003584 <serverHandler+0x70>
			print_debug("Left");
 800357c:	4811      	ldr	r0, [pc, #68]	; (80035c4 <serverHandler+0xb0>)
 800357e:	f000 f8f1 	bl	8003764 <print_debug>
 8003582:	e7f3      	b.n	800356c <serverHandler+0x58>
		else if(strstr(buffer,"Right")!=NULL)
 8003584:	4910      	ldr	r1, [pc, #64]	; (80035c8 <serverHandler+0xb4>)
 8003586:	480b      	ldr	r0, [pc, #44]	; (80035b4 <serverHandler+0xa0>)
 8003588:	f029 fccc 	bl	802cf24 <strstr>
 800358c:	b118      	cbz	r0, 8003596 <serverHandler+0x82>
			print_debug("Right");
 800358e:	480e      	ldr	r0, [pc, #56]	; (80035c8 <serverHandler+0xb4>)
 8003590:	f000 f8e8 	bl	8003764 <print_debug>
 8003594:	e7ea      	b.n	800356c <serverHandler+0x58>
		else if(strstr(buffer,"Backward")!=NULL)
 8003596:	490d      	ldr	r1, [pc, #52]	; (80035cc <serverHandler+0xb8>)
 8003598:	4806      	ldr	r0, [pc, #24]	; (80035b4 <serverHandler+0xa0>)
 800359a:	f029 fcc3 	bl	802cf24 <strstr>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d0e4      	beq.n	800356c <serverHandler+0x58>
			print_debug("Backward");
 80035a2:	480a      	ldr	r0, [pc, #40]	; (80035cc <serverHandler+0xb8>)
 80035a4:	f000 f8de 	bl	8003764 <print_debug>
 80035a8:	e7e0      	b.n	800356c <serverHandler+0x58>
 80035aa:	bf00      	nop
 80035ac:	20000a0c 	.word	0x20000a0c
 80035b0:	0802d5f0 	.word	0x0802d5f0
 80035b4:	20000a5c 	.word	0x20000a5c
 80035b8:	0802d5f4 	.word	0x0802d5f4
 80035bc:	0802d5fc 	.word	0x0802d5fc
 80035c0:	0802d600 	.word	0x0802d600
 80035c4:	0802d608 	.word	0x0802d608
 80035c8:	0802d610 	.word	0x0802d610
 80035cc:	0802d618 	.word	0x0802d618

080035d0 <checkIP>:
	showResponse();
}

// Get WIFI IP
void checkIP()
{
 80035d0:	b500      	push	{lr}
 80035d2:	b089      	sub	sp, #36	; 0x24
	sendData("AT+CIFSR\r\n");
 80035d4:	4819      	ldr	r0, [pc, #100]	; (800363c <checkIP+0x6c>)
 80035d6:	f7ff fee3 	bl	80033a0 <sendData>
	HAL_Delay(100);
 80035da:	2064      	movs	r0, #100	; 0x64
 80035dc:	f7fd fe1a 	bl	8001214 <HAL_Delay>
	char temp[30]={0};
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	9302      	str	r3, [sp, #8]
 80035e8:	9303      	str	r3, [sp, #12]
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	9305      	str	r3, [sp, #20]
 80035ee:	9306      	str	r3, [sp, #24]
 80035f0:	f8ad 301c 	strh.w	r3, [sp, #28]
	if(strstr(buffer,"STAIP")!=NULL)
 80035f4:	4912      	ldr	r1, [pc, #72]	; (8003640 <checkIP+0x70>)
 80035f6:	4813      	ldr	r0, [pc, #76]	; (8003644 <checkIP+0x74>)
 80035f8:	f029 fc94 	bl	802cf24 <strstr>
 80035fc:	b1b0      	cbz	r0, 800362c <checkIP+0x5c>
	{
		char *find = strstr(buffer,"STAIP");
		int pos = find - buffer;
 80035fe:	4a11      	ldr	r2, [pc, #68]	; (8003644 <checkIP+0x74>)
 8003600:	1a82      	subs	r2, r0, r2
		pos += 7;
		int i =0;
		while(buffer[pos]!='"')
 8003602:	79c3      	ldrb	r3, [r0, #7]
 8003604:	2b22      	cmp	r3, #34	; 0x22
 8003606:	d008      	beq.n	800361a <checkIP+0x4a>
 8003608:	4669      	mov	r1, sp
 800360a:	480f      	ldr	r0, [pc, #60]	; (8003648 <checkIP+0x78>)
 800360c:	4402      	add	r2, r0
		{
			temp[i] = buffer[pos];
 800360e:	f801 3b01 	strb.w	r3, [r1], #1
		while(buffer[pos]!='"')
 8003612:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003616:	2b22      	cmp	r3, #34	; 0x22
 8003618:	d1f9      	bne.n	800360e <checkIP+0x3e>
	}
	else
	{
		sprintf(temp,"Error");
	}
	sprintf(buffer,temp);
 800361a:	4669      	mov	r1, sp
 800361c:	4809      	ldr	r0, [pc, #36]	; (8003644 <checkIP+0x74>)
 800361e:	f029 fc59 	bl	802ced4 <siprintf>
	showResponse();
 8003622:	f7ff fed5 	bl	80033d0 <showResponse>
}
 8003626:	b009      	add	sp, #36	; 0x24
 8003628:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(temp,"Error");
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <checkIP+0x7c>)
 800362e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003632:	9000      	str	r0, [sp, #0]
 8003634:	f8ad 1004 	strh.w	r1, [sp, #4]
 8003638:	e7ef      	b.n	800361a <checkIP+0x4a>
 800363a:	bf00      	nop
 800363c:	0802d624 	.word	0x0802d624
 8003640:	0802d630 	.word	0x0802d630
 8003644:	20000a5c 	.word	0x20000a5c
 8003648:	20000a64 	.word	0x20000a64
 800364c:	0802d638 	.word	0x0802d638

08003650 <HAL_UART_RxCpltCallback>:
	HAL_Delay(100);
	showResponse();
}

// UART callback function, adds response to buffer
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003650:	b508      	push	{r3, lr}
    if(huart->Instance==USART3)
 8003652:	6802      	ldr	r2, [r0, #0]
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_UART_RxCpltCallback+0x78>)
 8003656:	429a      	cmp	r2, r3
 8003658:	d000      	beq.n	800365c <HAL_UART_RxCpltCallback+0xc>
        		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
        			detect_server = 1;
		}
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&single_buffer, 1);
    }
}
 800365a:	bd08      	pop	{r3, pc}
        if(buffer_index >= (RX_BUFFER_SIZE-1))
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <HAL_UART_RxCpltCallback+0x7c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003664:	4293      	cmp	r3, r2
 8003666:	d91f      	bls.n	80036a8 <HAL_UART_RxCpltCallback+0x58>
        	buffer_index=RX_BUFFER_SIZE-1;
 8003668:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_UART_RxCpltCallback+0x7c>)
 800366e:	6013      	str	r3, [r2, #0]
        		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8003670:	4a17      	ldr	r2, [pc, #92]	; (80036d0 <HAL_UART_RxCpltCallback+0x80>)
 8003672:	441a      	add	r2, r3
 8003674:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8003678:	2a0d      	cmp	r2, #13
 800367a:	d11e      	bne.n	80036ba <HAL_UART_RxCpltCallback+0x6a>
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <HAL_UART_RxCpltCallback+0x80>)
 800367e:	441a      	add	r2, r3
 8003680:	f812 2c03 	ldrb.w	r2, [r2, #-3]
 8003684:	2a0a      	cmp	r2, #10
 8003686:	d118      	bne.n	80036ba <HAL_UART_RxCpltCallback+0x6a>
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_UART_RxCpltCallback+0x80>)
 800368a:	441a      	add	r2, r3
 800368c:	f812 2c02 	ldrb.w	r2, [r2, #-2]
 8003690:	2a0d      	cmp	r2, #13
 8003692:	d112      	bne.n	80036ba <HAL_UART_RxCpltCallback+0x6a>
 8003694:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <HAL_UART_RxCpltCallback+0x80>)
 8003696:	4413      	add	r3, r2
 8003698:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800369c:	2b0a      	cmp	r3, #10
 800369e:	d10c      	bne.n	80036ba <HAL_UART_RxCpltCallback+0x6a>
        			detect_server = 1;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_UART_RxCpltCallback+0x84>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e008      	b.n	80036ba <HAL_UART_RxCpltCallback+0x6a>
            buffer[buffer_index] = single_buffer;
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <HAL_UART_RxCpltCallback+0x88>)
 80036aa:	7811      	ldrb	r1, [r2, #0]
 80036ac:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <HAL_UART_RxCpltCallback+0x80>)
 80036ae:	54d1      	strb	r1, [r2, r3]
            buffer_index++;
 80036b0:	3301      	adds	r3, #1
 80036b2:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_UART_RxCpltCallback+0x7c>)
 80036b4:	6013      	str	r3, [r2, #0]
        if(buffer_index > 5)
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d8da      	bhi.n	8003670 <HAL_UART_RxCpltCallback+0x20>
        HAL_UART_Receive_IT(&huart3, (uint8_t *)&single_buffer, 1);
 80036ba:	2201      	movs	r2, #1
 80036bc:	4906      	ldr	r1, [pc, #24]	; (80036d8 <HAL_UART_RxCpltCallback+0x88>)
 80036be:	4807      	ldr	r0, [pc, #28]	; (80036dc <HAL_UART_RxCpltCallback+0x8c>)
 80036c0:	f7ff fdcb 	bl	800325a <HAL_UART_Receive_IT>
}
 80036c4:	e7c9      	b.n	800365a <HAL_UART_RxCpltCallback+0xa>
 80036c6:	bf00      	nop
 80036c8:	40004800 	.word	0x40004800
 80036cc:	2000125c 	.word	0x2000125c
 80036d0:	20000a5c 	.word	0x20000a5c
 80036d4:	20001260 	.word	0x20001260
 80036d8:	20001261 	.word	0x20001261
 80036dc:	20000a0c 	.word	0x20000a0c

080036e0 <set_screen>:
	lv_obj_t * obj = lv_event_get_target(e);
	uint32_t id = lv_btnmatrix_get_selected_btn(obj);
}

void set_screen()
{
 80036e0:	b508      	push	{r3, lr}
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
 80036e2:	f01d f9c5 	bl	8020a70 <lv_disp_get_default>
 80036e6:	f000 fd1b 	bl	8004120 <lv_disp_get_scr_act>
	/*Change the active screen's background color*/
	lv_obj_set_style_bg_color(lv_scr_act(), lv_color_hex(0x282a36), LV_PART_MAIN);
 80036ea:	2200      	movs	r2, #0
 80036ec:	f642 1146 	movw	r1, #10566	; 0x2946
 80036f0:	f008 fab3 	bl	800bc5a <lv_obj_set_style_bg_color>
}
 80036f4:	bd08      	pop	{r3, pc}
	...

080036f8 <debug_screen>:

// Create debug text area
void debug_screen()
{
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	f01d f9b9 	bl	8020a70 <lv_disp_get_default>
 80036fe:	f000 fd0f 	bl	8004120 <lv_disp_get_scr_act>
	// printing string section for debugging
	lv_obj_t* text_area= lv_obj_create(lv_scr_act());
 8003702:	f003 fc2b 	bl	8006f5c <lv_obj_create>
 8003706:	4604      	mov	r4, r0
	lv_obj_set_size(text_area,240,240);
 8003708:	22f0      	movs	r2, #240	; 0xf0
 800370a:	4611      	mov	r1, r2
 800370c:	f004 fc7e 	bl	800800c <lv_obj_set_size>
//	lv_obj_align(text_area, LV_ALIGN_BOTTOM_LEFT, 10, -10);
	lv_obj_align(text_area, LV_ALIGN_CENTER, 0, 0);
 8003710:	2300      	movs	r3, #0
 8003712:	461a      	mov	r2, r3
 8003714:	2109      	movs	r1, #9
 8003716:	4620      	mov	r0, r4
 8003718:	f004 fcde 	bl	80080d8 <lv_obj_align>

	change_label = lv_label_create(text_area);
 800371c:	4620      	mov	r0, r4
 800371e:	f024 ff67 	bl	80285f0 <lv_label_create>
 8003722:	4c0c      	ldr	r4, [pc, #48]	; (8003754 <debug_screen+0x5c>)
 8003724:	6020      	str	r0, [r4, #0]
	lv_label_set_text(change_label,"Text");
 8003726:	490c      	ldr	r1, [pc, #48]	; (8003758 <debug_screen+0x60>)
 8003728:	f025 fc3e 	bl	8028fa8 <lv_label_set_text>
 * @param obj       pointer to an object to align
 * @note            if the parent size changes `obj` needs to be aligned manually again
 */
static inline void lv_obj_center(struct _lv_obj_t * obj)
{
    lv_obj_align(obj, LV_ALIGN_CENTER, 0, 0);
 800372c:	2300      	movs	r3, #0
 800372e:	461a      	mov	r2, r3
 8003730:	2109      	movs	r1, #9
 8003732:	6820      	ldr	r0, [r4, #0]
 8003734:	f004 fcd0 	bl	80080d8 <lv_obj_align>
	lv_obj_center(change_label);
	static lv_style_t style;
	lv_style_init(&style);
 8003738:	4d08      	ldr	r5, [pc, #32]	; (800375c <debug_screen+0x64>)
 800373a:	4628      	mov	r0, r5
 800373c:	f01f fbed 	bl	8022f1a <lv_style_init>
	lv_style_set_text_font(&style, &lv_font_montserrat_8); // <--- you have to enable other font sizes in menuconfig
 8003740:	4907      	ldr	r1, [pc, #28]	; (8003760 <debug_screen+0x68>)
 8003742:	4628      	mov	r0, r5
 8003744:	f01f ff56 	bl	80235f4 <lv_style_set_text_font>
	lv_obj_add_style(change_label, &style, 0);  // <--- obj is the label
 8003748:	2200      	movs	r2, #0
 800374a:	4629      	mov	r1, r5
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	f007 fd33 	bl	800b1b8 <lv_obj_add_style>
}
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20001264 	.word	0x20001264
 8003758:	0802d4b4 	.word	0x0802d4b4
 800375c:	20001268 	.word	0x20001268
 8003760:	08033260 	.word	0x08033260

08003764 <print_debug>:
	lv_obj_add_event_cb(button_modes, event_button, LV_EVENT_ALL, NULL);

}

void print_debug(char* msg)
{
 8003764:	b508      	push	{r3, lr}
 8003766:	4601      	mov	r1, r0
	lv_label_set_text(change_label,msg);
 8003768:	4b02      	ldr	r3, [pc, #8]	; (8003774 <print_debug+0x10>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	f025 fc1c 	bl	8028fa8 <lv_label_set_text>
}
 8003770:	bd08      	pop	{r3, pc}
 8003772:	bf00      	nop
 8003774:	20001264 	.word	0x20001264

08003778 <ILI9341_Delay>:
}



static void ILI9341_Delay ( __IO uint32_t nCount )
{
 8003778:	b082      	sub	sp, #8
 800377a:	9001      	str	r0, [sp, #4]
  for ( ; nCount != 0; nCount -- );
 800377c:	9b01      	ldr	r3, [sp, #4]
 800377e:	b12b      	cbz	r3, 800378c <ILI9341_Delay+0x14>
 8003780:	9b01      	ldr	r3, [sp, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	9b01      	ldr	r3, [sp, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f9      	bne.n	8003780 <ILI9341_Delay+0x8>
	
}
 800378c:	b002      	add	sp, #8
 800378e:	4770      	bx	lr

08003790 <ILI9341_ReadID>:
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003790:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003794:	2204      	movs	r2, #4
 8003796:	801a      	strh	r2, [r3, #0]
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 8003798:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800379c:	881a      	ldrh	r2, [r3, #0]
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	8818      	ldrh	r0, [r3, #0]
	
	ILI9341_Write_Cmd(0x04);
	ILI9341_Read_Data();
	ILI9341_Read_Data();
	id = ILI9341_Read_Data();
	id <<= 8;
 80037a2:	0200      	lsls	r0, r0, #8
 80037a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
	id |= ILI9341_Read_Data();
 80037ac:	4318      	orrs	r0, r3
	
  if(id == LCDID_ST7789V)
 80037ae:	f248 5352 	movw	r3, #34130	; 0x8552
 80037b2:	4298      	cmp	r0, r3
 80037b4:	d014      	beq.n	80037e0 <ILI9341_ReadID+0x50>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80037b6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80037ba:	22d3      	movs	r2, #211	; 0xd3
 80037bc:	801a      	strh	r2, [r3, #0]
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 80037be:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	8818      	ldrh	r0, [r3, #0]
  {
    ILI9341_Write_Cmd(0xD3);
    ILI9341_Read_Data();
    ILI9341_Read_Data();
    id = ILI9341_Read_Data();
    id <<= 8;
 80037c8:	0200      	lsls	r0, r0, #8
 80037ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) );
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
    id |= ILI9341_Read_Data();
 80037d2:	4318      	orrs	r0, r3
    if(id == LCDID_ILI9341)
 80037d4:	f249 3341 	movw	r3, #37697	; 0x9341
    {
      return id;
    }
  }
  
	return LCDID_UNKNOWN;
 80037d8:	4298      	cmp	r0, r3
 80037da:	bf0c      	ite	eq
 80037dc:	4618      	moveq	r0, r3
 80037de:	2000      	movne	r0, #0
}
 80037e0:	4770      	bx	lr
	...

080037e4 <ILI9341_Rst>:



void ILI9341_Rst( void )
{			
 80037e4:	b510      	push	{r4, lr}
	digitalL( GPIOE,GPIO_PIN_1);	 //�͵�ƽ��λ
 80037e6:	4c07      	ldr	r4, [pc, #28]	; (8003804 <ILI9341_Rst+0x20>)
 80037e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ec:	6123      	str	r3, [r4, #16]

	ILI9341_Delay ( 0xAFF ); 						   
 80037ee:	f640 20ff 	movw	r0, #2815	; 0xaff
 80037f2:	f7ff ffc1 	bl	8003778 <ILI9341_Delay>

	digitalH( GPIOE,GPIO_PIN_1);		 	 
 80037f6:	2302      	movs	r3, #2
 80037f8:	6123      	str	r3, [r4, #16]

	ILI9341_Delay ( 0xAFF ); 	 	
 80037fa:	f640 20ff 	movw	r0, #2815	; 0xaff
 80037fe:	f7ff ffbb 	bl	8003778 <ILI9341_Delay>
	
}
 8003802:	bd10      	pop	{r4, pc}
 8003804:	40011800 	.word	0x40011800

08003808 <ILI9341_GramScan>:


void ILI9341_GramScan ( uint8_t ucOption )
{	
	//������飬ֻ������0-7
	if(ucOption >7 )
 8003808:	2807      	cmp	r0, #7
 800380a:	d850      	bhi.n	80038ae <ILI9341_GramScan+0xa6>
{	
 800380c:	b410      	push	{r4}
		return;
	
	//����ģʽ����LCD_SCAN_MODE��ֵ����Ҫ���ڴ�����ѡ��������
	LCD_SCAN_MODE = ucOption;
 800380e:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <ILI9341_GramScan+0xa8>)
 8003810:	7018      	strb	r0, [r3, #0]
	
	//����ģʽ����XY��������ؿ��
	if(ucOption%2 == 0)	
 8003812:	f010 0f01 	tst.w	r0, #1
 8003816:	d138      	bne.n	800388a <ILI9341_GramScan+0x82>
	{
		//0 2 4 6ģʽ��X�������ؿ��Ϊ240��Y����Ϊ320
		LCD_X_LENGTH = ILI9341_LESS_PIXEL;
 8003818:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <ILI9341_GramScan+0xac>)
 800381a:	22f0      	movs	r2, #240	; 0xf0
 800381c:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_MORE_PIXEL;
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <ILI9341_GramScan+0xb0>)
 8003820:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003824:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003826:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800382a:	2236      	movs	r2, #54	; 0x36
 800382c:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_LESS_PIXEL; 
	}

	//0x36��������ĸ�3λ����������GRAMɨ�跽��	
	ILI9341_Write_Cmd ( 0x36 );
  if(lcdid == LCDID_ILI9341)
 800382e:	4b23      	ldr	r3, [pc, #140]	; (80038bc <ILI9341_GramScan+0xb4>)
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	f249 3241 	movw	r2, #37697	; 0x9341
 8003836:	4293      	cmp	r3, r2
 8003838:	d02f      	beq.n	800389a <ILI9341_GramScan+0x92>
  {
    ILI9341_Write_Data ( 0x08 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
  }
  else if(lcdid == LCDID_ST7789V)
 800383a:	f248 5252 	movw	r2, #34130	; 0x8552
 800383e:	4293      	cmp	r3, r2
 8003840:	d031      	beq.n	80038a6 <ILI9341_GramScan+0x9e>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003842:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8003846:	232a      	movs	r3, #42	; 0x2a
 8003848:	800b      	strh	r3, [r1, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <ILI9341_GramScan+0xb8>)
 800384c:	2000      	movs	r0, #0
 800384e:	8018      	strh	r0, [r3, #0]
 8003850:	8018      	strh	r0, [r3, #0]
    ILI9341_Write_Data ( 0x00 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
  }
	ILI9341_Write_Cmd ( CMD_SetCoordinateX ); 
	ILI9341_Write_Data ( 0x00 );		/* x ��ʼ�����8λ */
	ILI9341_Write_Data ( 0x00 );		/* x ��ʼ�����8λ */
	ILI9341_Write_Data ( ((LCD_X_LENGTH-1)>>8)&0xFF ); /* x ���������8λ */	
 8003852:	4c18      	ldr	r4, [pc, #96]	; (80038b4 <ILI9341_GramScan+0xac>)
 8003854:	8822      	ldrh	r2, [r4, #0]
 8003856:	3a01      	subs	r2, #1
 8003858:	f3c2 2207 	ubfx	r2, r2, #8, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800385c:	801a      	strh	r2, [r3, #0]
	ILI9341_Write_Data ( (LCD_X_LENGTH-1)&0xFF );				/* x ���������8λ */
 800385e:	8822      	ldrh	r2, [r4, #0]
 8003860:	3a01      	subs	r2, #1
 8003862:	b2d2      	uxtb	r2, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003864:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003866:	222b      	movs	r2, #43	; 0x2b
 8003868:	800a      	strh	r2, [r1, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800386a:	8018      	strh	r0, [r3, #0]
 800386c:	8018      	strh	r0, [r3, #0]

	ILI9341_Write_Cmd ( CMD_SetCoordinateY ); 
	ILI9341_Write_Data ( 0x00 );		/* y ��ʼ�����8λ */
	ILI9341_Write_Data ( 0x00 );		/* y ��ʼ�����8λ */
	ILI9341_Write_Data ( ((LCD_Y_LENGTH-1)>>8)&0xFF );	/* y ���������8λ */	 
 800386e:	4812      	ldr	r0, [pc, #72]	; (80038b8 <ILI9341_GramScan+0xb0>)
 8003870:	8802      	ldrh	r2, [r0, #0]
 8003872:	3a01      	subs	r2, #1
 8003874:	f3c2 2207 	ubfx	r2, r2, #8, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003878:	801a      	strh	r2, [r3, #0]
	ILI9341_Write_Data ( (LCD_Y_LENGTH-1)&0xFF );				/* y ���������8λ */
 800387a:	8802      	ldrh	r2, [r0, #0]
 800387c:	3a01      	subs	r2, #1
 800387e:	b2d2      	uxtb	r2, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003880:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003882:	232c      	movs	r3, #44	; 0x2c
 8003884:	800b      	strh	r3, [r1, #0]

	/* write gram start */
	ILI9341_Write_Cmd ( CMD_SetPixel );	
}
 8003886:	bc10      	pop	{r4}
 8003888:	4770      	bx	lr
		LCD_X_LENGTH = ILI9341_MORE_PIXEL;
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <ILI9341_GramScan+0xac>)
 800388c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003890:	801a      	strh	r2, [r3, #0]
		LCD_Y_LENGTH =	ILI9341_LESS_PIXEL; 
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <ILI9341_GramScan+0xb0>)
 8003894:	22f0      	movs	r2, #240	; 0xf0
 8003896:	801a      	strh	r2, [r3, #0]
 8003898:	e7c5      	b.n	8003826 <ILI9341_GramScan+0x1e>
    ILI9341_Write_Data ( 0x08 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
 800389a:	0140      	lsls	r0, r0, #5
 800389c:	f040 0008 	orr.w	r0, r0, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <ILI9341_GramScan+0xb8>)
 80038a2:	8018      	strh	r0, [r3, #0]
}
 80038a4:	e7cd      	b.n	8003842 <ILI9341_GramScan+0x3a>
    ILI9341_Write_Data ( 0x00 |(ucOption<<5));//����ucOption��ֵ����LCD��������0-7��ģʽ
 80038a6:	0140      	lsls	r0, r0, #5
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <ILI9341_GramScan+0xb8>)
 80038aa:	8018      	strh	r0, [r3, #0]
}
 80038ac:	e7c9      	b.n	8003842 <ILI9341_GramScan+0x3a>
 80038ae:	4770      	bx	lr
 80038b0:	20000634 	.word	0x20000634
 80038b4:	20000636 	.word	0x20000636
 80038b8:	20000638 	.word	0x20000638
 80038bc:	20001270 	.word	0x20001270
 80038c0:	60020000 	.word	0x60020000

080038c4 <ILI9341_OpenWindow>:



void ILI9341_OpenWindow ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight )
{	
 80038c4:	b510      	push	{r4, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80038c6:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
 80038ca:	242a      	movs	r4, #42	; 0x2a
 80038cc:	f8ae 4000 	strh.w	r4, [lr]
	ILI9341_Write_Cmd ( CMD_SetCoordinateX ); 				 /* ����X���� */
	ILI9341_Write_Data ( usX >> 8  );	 /* �ȸ�8λ��Ȼ���8λ */
 80038d0:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80038d4:	4c11      	ldr	r4, [pc, #68]	; (800391c <ILI9341_OpenWindow+0x58>)
 80038d6:	f8a4 c000 	strh.w	ip, [r4]
	ILI9341_Write_Data ( usX & 0xff  );	 /* ������ʼ��ͽ�����*/
 80038da:	fa5f fc80 	uxtb.w	ip, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80038de:	f8a4 c000 	strh.w	ip, [r4]
	ILI9341_Write_Data ( ( usX + usWidth - 1 ) >> 8  );
 80038e2:	eb00 0c02 	add.w	ip, r0, r2
 80038e6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80038ea:	f3cc 2c0f 	ubfx	ip, ip, #8, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80038ee:	f8a4 c000 	strh.w	ip, [r4]
	ILI9341_Write_Data ( ( usX + usWidth - 1 ) & 0xff  );
 80038f2:	3a01      	subs	r2, #1
 80038f4:	4410      	add	r0, r2
 80038f6:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80038f8:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80038fa:	222b      	movs	r2, #43	; 0x2b
 80038fc:	f8ae 2000 	strh.w	r2, [lr]

	ILI9341_Write_Cmd ( CMD_SetCoordinateY ); 			     /* ����Y����*/
	ILI9341_Write_Data ( usY >> 8  );
 8003900:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003902:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( usY & 0xff  );
 8003904:	b2ca      	uxtb	r2, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003906:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( ( usY + usHeight - 1 ) >> 8 );
 8003908:	18ca      	adds	r2, r1, r3
 800390a:	3a01      	subs	r2, #1
 800390c:	f3c2 220f 	ubfx	r2, r2, #8, #16
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003910:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( ( usY + usHeight - 1) & 0xff );
 8003912:	3b01      	subs	r3, #1
 8003914:	4419      	add	r1, r3
 8003916:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003918:	8021      	strh	r1, [r4, #0]
	
}
 800391a:	bd10      	pop	{r4, pc}
 800391c:	60020000 	.word	0x60020000

08003920 <ILI9341_OpenWindow2>:


void ILI9341_OpenWindow2 ( uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003920:	b510      	push	{r4, lr}
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003922:	f04f 4cc0 	mov.w	ip, #1610612736	; 0x60000000
 8003926:	242a      	movs	r4, #42	; 0x2a
 8003928:	f8ac 4000 	strh.w	r4, [ip]
	ILI9341_Write_Cmd ( CMD_SetCoordinateX );
	ILI9341_Write_Data ( x1 >> 8  );
 800392c:	ea4f 2e10 	mov.w	lr, r0, lsr #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003930:	4c0b      	ldr	r4, [pc, #44]	; (8003960 <ILI9341_OpenWindow2+0x40>)
 8003932:	f8a4 e000 	strh.w	lr, [r4]
	ILI9341_Write_Data ( x1 & 0xff  );
 8003936:	b2c0      	uxtb	r0, r0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003938:	8020      	strh	r0, [r4, #0]
	ILI9341_Write_Data ( x2 >> 8  );
 800393a:	0a10      	lsrs	r0, r2, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800393c:	8020      	strh	r0, [r4, #0]
	ILI9341_Write_Data ( x2 & 0xff  );
 800393e:	b2d2      	uxtb	r2, r2
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003940:	8022      	strh	r2, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003942:	222b      	movs	r2, #43	; 0x2b
 8003944:	f8ac 2000 	strh.w	r2, [ip]

	ILI9341_Write_Cmd ( CMD_SetCoordinateY );
	ILI9341_Write_Data ( y1 >> 8  );
 8003948:	0a0a      	lsrs	r2, r1, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800394a:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( y1 & 0xff  );
 800394c:	b2c9      	uxtb	r1, r1
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 800394e:	8021      	strh	r1, [r4, #0]
	ILI9341_Write_Data ( y2 >> 8 );
 8003950:	0a1a      	lsrs	r2, r3, #8
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003952:	8022      	strh	r2, [r4, #0]
	ILI9341_Write_Data ( y2 & 0xff );
 8003954:	b2db      	uxtb	r3, r3
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003956:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003958:	232c      	movs	r3, #44	; 0x2c
 800395a:	f8ac 3000 	strh.w	r3, [ip]
	ILI9341_Write_Cmd(CMD_SetPixel);
}
 800395e:	bd10      	pop	{r4, pc}
 8003960:	60020000 	.word	0x60020000

08003964 <ILI9341_Clear>:
	
}


void ILI9341_Clear ( uint16_t usX, uint16_t usY, uint16_t usWidth, uint16_t usHeight )
{
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	4614      	mov	r4, r2
 8003968:	461d      	mov	r5, r3
	ILI9341_OpenWindow ( usX, usY, usWidth, usHeight );
 800396a:	f7ff ffab 	bl	80038c4 <ILI9341_OpenWindow>

	ILI9341_FillColor ( usWidth * usHeight, CurrentBackColor);
 800396e:	fb05 f404 	mul.w	r4, r5, r4
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <ILI9341_Clear+0x2c>)
 8003974:	8819      	ldrh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003976:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800397a:	202c      	movs	r0, #44	; 0x2c
 800397c:	8018      	strh	r0, [r3, #0]
	for ( i = 0; i < ulAmout_Point; i ++ )
 800397e:	b12c      	cbz	r4, 800398c <ILI9341_Clear+0x28>
 8003980:	2300      	movs	r3, #0
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003982:	4804      	ldr	r0, [pc, #16]	; (8003994 <ILI9341_Clear+0x30>)
 8003984:	8001      	strh	r1, [r0, #0]
	for ( i = 0; i < ulAmout_Point; i ++ )
 8003986:	3301      	adds	r3, #1
 8003988:	429c      	cmp	r4, r3
 800398a:	d1fb      	bne.n	8003984 <ILI9341_Clear+0x20>
	
}
 800398c:	bd38      	pop	{r3, r4, r5, pc}
 800398e:	bf00      	nop
 8003990:	20000632 	.word	0x20000632
 8003994:	60020000 	.word	0x60020000

08003998 <ILI9341_Init>:
{
 8003998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    digitalL( GPIOD, GPIO_PIN_12);	
 800399c:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <ILI9341_Init+0x1cc>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a2:	611a      	str	r2, [r3, #16]
	ILI9341_Rst ();
 80039a4:	f7ff ff1e 	bl	80037e4 <ILI9341_Rst>
  lcdid = ILI9341_ReadID();
 80039a8:	f7ff fef2 	bl	8003790 <ILI9341_ReadID>
 80039ac:	4b6e      	ldr	r3, [pc, #440]	; (8003b68 <ILI9341_Init+0x1d0>)
 80039ae:	8018      	strh	r0, [r3, #0]
  if(lcdid == LCDID_ILI9341)
 80039b0:	f249 3341 	movw	r3, #37697	; 0x9341
 80039b4:	4298      	cmp	r0, r3
 80039b6:	d015      	beq.n	80039e4 <ILI9341_Init+0x4c>
  else if(lcdid == LCDID_ST7789V)
 80039b8:	f248 5352 	movw	r3, #34130	; 0x8552
 80039bc:	4298      	cmp	r0, r3
 80039be:	f000 80dd 	beq.w	8003b7c <ILI9341_Init+0x1e4>
	ILI9341_GramScan(LCD_SCAN_MODE);
 80039c2:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <ILI9341_Init+0x1d4>)
 80039c4:	7818      	ldrb	r0, [r3, #0]
 80039c6:	f7ff ff1f 	bl	8003808 <ILI9341_GramScan>
  CurrentBackColor = Color;
 80039ca:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <ILI9341_Init+0x1d8>)
 80039cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d0:	801a      	strh	r2, [r3, #0]
	ILI9341_Clear(0,0,240,320);
 80039d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80039d6:	22f0      	movs	r2, #240	; 0xf0
 80039d8:	2100      	movs	r1, #0
 80039da:	4608      	mov	r0, r1
 80039dc:	f7ff ffc2 	bl	8003964 <ILI9341_Clear>
}
 80039e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80039e4:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 80039e8:	23cf      	movs	r3, #207	; 0xcf
 80039ea:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80039ec:	4b61      	ldr	r3, [pc, #388]	; (8003b74 <ILI9341_Init+0x1dc>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	2181      	movs	r1, #129	; 0x81
 80039f4:	8019      	strh	r1, [r3, #0]
 80039f6:	2630      	movs	r6, #48	; 0x30
 80039f8:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 80039fa:	20ed      	movs	r0, #237	; 0xed
 80039fc:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 80039fe:	2064      	movs	r0, #100	; 0x64
 8003a00:	8018      	strh	r0, [r3, #0]
 8003a02:	2703      	movs	r7, #3
 8003a04:	801f      	strh	r7, [r3, #0]
 8003a06:	2012      	movs	r0, #18
 8003a08:	8018      	strh	r0, [r3, #0]
 8003a0a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a0c:	21e8      	movs	r1, #232	; 0xe8
 8003a0e:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a10:	2185      	movs	r1, #133	; 0x85
 8003a12:	8019      	strh	r1, [r3, #0]
 8003a14:	f04f 0910 	mov.w	r9, #16
 8003a18:	f8a3 9000 	strh.w	r9, [r3]
 8003a1c:	2178      	movs	r1, #120	; 0x78
 8003a1e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a20:	21cb      	movs	r1, #203	; 0xcb
 8003a22:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a24:	f04f 0839 	mov.w	r8, #57	; 0x39
 8003a28:	f8a3 8000 	strh.w	r8, [r3]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	8019      	strh	r1, [r3, #0]
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	2134      	movs	r1, #52	; 0x34
 8003a34:	8019      	strh	r1, [r3, #0]
 8003a36:	2006      	movs	r0, #6
 8003a38:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a3a:	21f7      	movs	r1, #247	; 0xf7
 8003a3c:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a3e:	2120      	movs	r1, #32
 8003a40:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a42:	21ea      	movs	r1, #234	; 0xea
 8003a44:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a46:	801a      	strh	r2, [r3, #0]
 8003a48:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a4a:	21b1      	movs	r1, #177	; 0xb1
 8003a4c:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	f04f 0a1b 	mov.w	sl, #27
 8003a54:	f8a3 a000 	strh.w	sl, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a58:	21b6      	movs	r1, #182	; 0xb6
 8003a5a:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a5c:	210a      	movs	r1, #10
 8003a5e:	8019      	strh	r1, [r3, #0]
 8003a60:	21a2      	movs	r1, #162	; 0xa2
 8003a62:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a64:	25c0      	movs	r5, #192	; 0xc0
 8003a66:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a68:	2535      	movs	r5, #53	; 0x35
 8003a6a:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a6c:	25c1      	movs	r5, #193	; 0xc1
 8003a6e:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a70:	f04f 0c11 	mov.w	ip, #17
 8003a74:	f8a3 c000 	strh.w	ip, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a78:	25c5      	movs	r5, #197	; 0xc5
 8003a7a:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a7c:	2545      	movs	r5, #69	; 0x45
 8003a7e:	801d      	strh	r5, [r3, #0]
 8003a80:	801d      	strh	r5, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a82:	25c7      	movs	r5, #199	; 0xc7
 8003a84:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a86:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a88:	21f2      	movs	r1, #242	; 0xf2
 8003a8a:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a8c:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a8e:	2526      	movs	r5, #38	; 0x26
 8003a90:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a92:	f04f 0e01 	mov.w	lr, #1
 8003a96:	f8a3 e000 	strh.w	lr, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003a9a:	21e0      	movs	r1, #224	; 0xe0
 8003a9c:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	8019      	strh	r1, [r3, #0]
 8003aa2:	801d      	strh	r5, [r3, #0]
 8003aa4:	2524      	movs	r5, #36	; 0x24
 8003aa6:	801d      	strh	r5, [r3, #0]
 8003aa8:	250b      	movs	r5, #11
 8003aaa:	801d      	strh	r5, [r3, #0]
 8003aac:	250e      	movs	r5, #14
 8003aae:	801d      	strh	r5, [r3, #0]
 8003ab0:	2509      	movs	r5, #9
 8003ab2:	801d      	strh	r5, [r3, #0]
 8003ab4:	f04f 0b54 	mov.w	fp, #84	; 0x54
 8003ab8:	f8a3 b000 	strh.w	fp, [r3]
 8003abc:	f04f 0ba8 	mov.w	fp, #168	; 0xa8
 8003ac0:	f8a3 b000 	strh.w	fp, [r3]
 8003ac4:	f04f 0b46 	mov.w	fp, #70	; 0x46
 8003ac8:	f8a3 b000 	strh.w	fp, [r3]
 8003acc:	f04f 0b0c 	mov.w	fp, #12
 8003ad0:	f8a3 b000 	strh.w	fp, [r3]
 8003ad4:	f04f 0b17 	mov.w	fp, #23
 8003ad8:	f8a3 b000 	strh.w	fp, [r3]
 8003adc:	801d      	strh	r5, [r3, #0]
 8003ade:	8019      	strh	r1, [r3, #0]
 8003ae0:	2507      	movs	r5, #7
 8003ae2:	801d      	strh	r5, [r3, #0]
 8003ae4:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003ae6:	f04f 0be1 	mov.w	fp, #225	; 0xe1
 8003aea:	f8a4 b000 	strh.w	fp, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003aee:	801a      	strh	r2, [r3, #0]
 8003af0:	f04f 0b19 	mov.w	fp, #25
 8003af4:	f8a3 b000 	strh.w	fp, [r3]
 8003af8:	f8a3 a000 	strh.w	sl, [r3]
 8003afc:	f04f 0a04 	mov.w	sl, #4
 8003b00:	f8a3 a000 	strh.w	sl, [r3]
 8003b04:	f8a3 9000 	strh.w	r9, [r3]
 8003b08:	801d      	strh	r5, [r3, #0]
 8003b0a:	252a      	movs	r5, #42	; 0x2a
 8003b0c:	801d      	strh	r5, [r3, #0]
 8003b0e:	f04f 0947 	mov.w	r9, #71	; 0x47
 8003b12:	f8a3 9000 	strh.w	r9, [r3]
 8003b16:	f8a3 8000 	strh.w	r8, [r3]
 8003b1a:	801f      	strh	r7, [r3, #0]
 8003b1c:	8018      	strh	r0, [r3, #0]
 8003b1e:	8018      	strh	r0, [r3, #0]
 8003b20:	801e      	strh	r6, [r3, #0]
 8003b22:	2038      	movs	r0, #56	; 0x38
 8003b24:	8018      	strh	r0, [r3, #0]
 8003b26:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b28:	2136      	movs	r1, #54	; 0x36
 8003b2a:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003b2c:	21c8      	movs	r1, #200	; 0xc8
 8003b2e:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b30:	8025      	strh	r5, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	21ef      	movs	r1, #239	; 0xef
 8003b3a:	8019      	strh	r1, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b3c:	212b      	movs	r1, #43	; 0x2b
 8003b3e:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	f8a3 e000 	strh.w	lr, [r3]
 8003b48:	223f      	movs	r2, #63	; 0x3f
 8003b4a:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b4c:	223a      	movs	r2, #58	; 0x3a
 8003b4e:	8022      	strh	r2, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003b50:	2255      	movs	r2, #85	; 0x55
 8003b52:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b54:	f8a4 c000 	strh.w	ip, [r4]
    ILI9341_Delay ( 0xAFFf<<2 );
 8003b58:	4807      	ldr	r0, [pc, #28]	; (8003b78 <ILI9341_Init+0x1e0>)
 8003b5a:	f7ff fe0d 	bl	8003778 <ILI9341_Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b5e:	2329      	movs	r3, #41	; 0x29
 8003b60:	8023      	strh	r3, [r4, #0]
}
 8003b62:	e72e      	b.n	80039c2 <ILI9341_Init+0x2a>
 8003b64:	40011400 	.word	0x40011400
 8003b68:	20001270 	.word	0x20001270
 8003b6c:	20000634 	.word	0x20000634
 8003b70:	20000632 	.word	0x20000632
 8003b74:	60020000 	.word	0x60020000
 8003b78:	0002bffc 	.word	0x0002bffc
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b7c:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8003b80:	23cf      	movs	r3, #207	; 0xcf
 8003b82:	8023      	strh	r3, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003b84:	4b4f      	ldr	r3, [pc, #316]	; (8003cc4 <ILI9341_Init+0x32c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	26c1      	movs	r6, #193	; 0xc1
 8003b8c:	801e      	strh	r6, [r3, #0]
 8003b8e:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003b92:	f8a3 e000 	strh.w	lr, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003b96:	21ed      	movs	r1, #237	; 0xed
 8003b98:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003b9a:	2164      	movs	r1, #100	; 0x64
 8003b9c:	8019      	strh	r1, [r3, #0]
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	8019      	strh	r1, [r3, #0]
 8003ba2:	2112      	movs	r1, #18
 8003ba4:	8019      	strh	r1, [r3, #0]
 8003ba6:	2081      	movs	r0, #129	; 0x81
 8003ba8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003baa:	20e8      	movs	r0, #232	; 0xe8
 8003bac:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003bae:	2085      	movs	r0, #133	; 0x85
 8003bb0:	8018      	strh	r0, [r3, #0]
 8003bb2:	2010      	movs	r0, #16
 8003bb4:	8018      	strh	r0, [r3, #0]
 8003bb6:	2078      	movs	r0, #120	; 0x78
 8003bb8:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003bba:	20cb      	movs	r0, #203	; 0xcb
 8003bbc:	8020      	strh	r0, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003bbe:	2039      	movs	r0, #57	; 0x39
 8003bc0:	8018      	strh	r0, [r3, #0]
 8003bc2:	252c      	movs	r5, #44	; 0x2c
 8003bc4:	801d      	strh	r5, [r3, #0]
 8003bc6:	801a      	strh	r2, [r3, #0]
 8003bc8:	2034      	movs	r0, #52	; 0x34
 8003bca:	8018      	strh	r0, [r3, #0]
 8003bcc:	2002      	movs	r0, #2
 8003bce:	8018      	strh	r0, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003bd0:	27f7      	movs	r7, #247	; 0xf7
 8003bd2:	8027      	strh	r7, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003bd4:	2720      	movs	r7, #32
 8003bd6:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003bd8:	27ea      	movs	r7, #234	; 0xea
 8003bda:	8027      	strh	r7, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003be0:	27c0      	movs	r7, #192	; 0xc0
 8003be2:	8027      	strh	r7, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003be4:	2721      	movs	r7, #33	; 0x21
 8003be6:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003be8:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003bea:	2711      	movs	r7, #17
 8003bec:	801f      	strh	r7, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003bee:	26c5      	movs	r6, #197	; 0xc5
 8003bf0:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003bf2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8003bf6:	f8a3 c000 	strh.w	ip, [r3]
 8003bfa:	2633      	movs	r6, #51	; 0x33
 8003bfc:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003bfe:	2636      	movs	r6, #54	; 0x36
 8003c00:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c02:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c04:	263a      	movs	r6, #58	; 0x3a
 8003c06:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c08:	2655      	movs	r6, #85	; 0x55
 8003c0a:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c0c:	26b1      	movs	r6, #177	; 0xb1
 8003c0e:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	f04f 0917 	mov.w	r9, #23
 8003c16:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c1a:	26b6      	movs	r6, #182	; 0xb6
 8003c1c:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c1e:	260a      	movs	r6, #10
 8003c20:	801e      	strh	r6, [r3, #0]
 8003c22:	26a2      	movs	r6, #162	; 0xa2
 8003c24:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c26:	26f6      	movs	r6, #246	; 0xf6
 8003c28:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c2a:	2601      	movs	r6, #1
 8003c2c:	801e      	strh	r6, [r3, #0]
 8003c2e:	f8a3 e000 	strh.w	lr, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c32:	f04f 0ef2 	mov.w	lr, #242	; 0xf2
 8003c36:	f8a4 e000 	strh.w	lr, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c3a:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c3c:	f04f 0e26 	mov.w	lr, #38	; 0x26
 8003c40:	f8a4 e000 	strh.w	lr, [r4]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c44:	801e      	strh	r6, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c46:	26e0      	movs	r6, #224	; 0xe0
 8003c48:	8026      	strh	r6, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c4a:	f04f 08d0 	mov.w	r8, #208	; 0xd0
 8003c4e:	f8a3 8000 	strh.w	r8, [r3]
 8003c52:	801a      	strh	r2, [r3, #0]
 8003c54:	8018      	strh	r0, [r3, #0]
 8003c56:	f04f 0e07 	mov.w	lr, #7
 8003c5a:	f8a3 e000 	strh.w	lr, [r3]
 8003c5e:	260b      	movs	r6, #11
 8003c60:	801e      	strh	r6, [r3, #0]
 8003c62:	261a      	movs	r6, #26
 8003c64:	801e      	strh	r6, [r3, #0]
 8003c66:	2631      	movs	r6, #49	; 0x31
 8003c68:	801e      	strh	r6, [r3, #0]
 8003c6a:	2654      	movs	r6, #84	; 0x54
 8003c6c:	801e      	strh	r6, [r3, #0]
 8003c6e:	2640      	movs	r6, #64	; 0x40
 8003c70:	801e      	strh	r6, [r3, #0]
 8003c72:	2629      	movs	r6, #41	; 0x29
 8003c74:	801e      	strh	r6, [r3, #0]
 8003c76:	8019      	strh	r1, [r3, #0]
 8003c78:	8019      	strh	r1, [r3, #0]
 8003c7a:	8019      	strh	r1, [r3, #0]
 8003c7c:	f8a3 9000 	strh.w	r9, [r3]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003c80:	21e1      	movs	r1, #225	; 0xe1
 8003c82:	8021      	strh	r1, [r4, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_DATA ) = usData;
 8003c84:	f8a3 8000 	strh.w	r8, [r3]
 8003c88:	801a      	strh	r2, [r3, #0]
 8003c8a:	8018      	strh	r0, [r3, #0]
 8003c8c:	f8a3 e000 	strh.w	lr, [r3]
 8003c90:	2205      	movs	r2, #5
 8003c92:	801a      	strh	r2, [r3, #0]
 8003c94:	2225      	movs	r2, #37	; 0x25
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	f8a3 c000 	strh.w	ip, [r3]
 8003c9c:	2244      	movs	r2, #68	; 0x44
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	2245      	movs	r2, #69	; 0x45
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	221c      	movs	r2, #28
 8003ca6:	801a      	strh	r2, [r3, #0]
 8003ca8:	2118      	movs	r1, #24
 8003caa:	8019      	strh	r1, [r3, #0]
 8003cac:	2116      	movs	r1, #22
 8003cae:	8019      	strh	r1, [r3, #0]
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	221d      	movs	r2, #29
 8003cb4:	801a      	strh	r2, [r3, #0]
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003cb6:	8027      	strh	r7, [r4, #0]
    ILI9341_Delay ( 0xAFFf<<2 );
 8003cb8:	4803      	ldr	r0, [pc, #12]	; (8003cc8 <ILI9341_Init+0x330>)
 8003cba:	f7ff fd5d 	bl	8003778 <ILI9341_Delay>
	* ( __IO uint16_t * ) ( FSMC_Addr_ILI9341_CMD ) = usCmd;
 8003cbe:	8026      	strh	r6, [r4, #0]
 8003cc0:	8025      	strh	r5, [r4, #0]
}
 8003cc2:	e67e      	b.n	80039c2 <ILI9341_Init+0x2a>
 8003cc4:	60020000 	.word	0x60020000
 8003cc8:	0002bffc 	.word	0x0002bffc

08003ccc <XPT2046_DelayUS>:




static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8003ccc:	b082      	sub	sp, #8
 8003cce:	9001      	str	r0, [sp, #4]
	uint32_t i;
	for ( i = 0; i < ulCount; i ++ )
 8003cd0:	9b01      	ldr	r3, [sp, #4]
 8003cd2:	b123      	cbz	r3, 8003cde <XPT2046_DelayUS+0x12>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	9a01      	ldr	r2, [sp, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d8fb      	bhi.n	8003cd6 <XPT2046_DelayUS+0xa>
	{
		uint8_t uc = 12;     //����ֵΪ12����Լ��1΢��
		while ( uc -- );     //��1΢��
	}
}
 8003cde:	b002      	add	sp, #8
 8003ce0:	4770      	bx	lr
	...

08003ce4 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8003ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce8:	4607      	mov	r7, r0
	uint8_t i;
	XPT2046_MOSI_0();	
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <XPT2046_WriteCMD+0x54>)
 8003cec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003cf0:	611a      	str	r2, [r3, #16]
	XPT2046_CLK_LOW();
 8003cf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cf6:	611a      	str	r2, [r3, #16]
 8003cf8:	2407      	movs	r4, #7
		if( ( ucCmd >> ( 7 - i ) ) & 0x01 )
		{
			XPT2046_MOSI_1()
		}else
		{
			XPT2046_MOSI_0();
 8003cfa:	461d      	mov	r5, r3
 8003cfc:	f44f 2880 	mov.w	r8, #262144	; 0x40000
		}
	  XPT2046_DelayUS ( 5 );
 8003d00:	2605      	movs	r6, #5
		if( ( ucCmd >> ( 7 - i ) ) & 0x01 )
 8003d02:	fa47 f304 	asr.w	r3, r7, r4
 8003d06:	f013 0f01 	tst.w	r3, #1
			XPT2046_MOSI_1()
 8003d0a:	bf1a      	itte	ne
 8003d0c:	2304      	movne	r3, #4
 8003d0e:	612b      	strne	r3, [r5, #16]
			XPT2046_MOSI_0();
 8003d10:	f8c5 8010 	streq.w	r8, [r5, #16]
	  XPT2046_DelayUS ( 5 );
 8003d14:	4630      	mov	r0, r6
 8003d16:	f7ff ffd9 	bl	8003ccc <XPT2046_DelayUS>
		XPT2046_CLK_HIGH();
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	612b      	str	r3, [r5, #16]
	  XPT2046_DelayUS ( 5 );
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f7ff ffd4 	bl	8003ccc <XPT2046_DelayUS>
		XPT2046_CLK_LOW();
 8003d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d28:	612b      	str	r3, [r5, #16]
	for ( i = 0; i < 8; i ++ ) 
 8003d2a:	3c01      	subs	r4, #1
 8003d2c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003d30:	d1e7      	bne.n	8003d02 <XPT2046_WriteCMD+0x1e>
	}
	
}
 8003d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d36:	bf00      	nop
 8003d38:	40011800 	.word	0x40011800

08003d3c <XPT2046_ReadCMD>:

static uint16_t XPT2046_ReadCMD ( void ) 
{
 8003d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	uint16_t usBuf=0, usTemp;
	XPT2046_MOSI_0();
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <XPT2046_ReadCMD+0x40>)
 8003d42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003d46:	611a      	str	r2, [r3, #16]
	XPT2046_CLK_HIGH();
 8003d48:	2201      	movs	r2, #1
 8003d4a:	611a      	str	r2, [r3, #16]
 8003d4c:	250b      	movs	r5, #11
	uint16_t usBuf=0, usTemp;
 8003d4e:	2400      	movs	r4, #0
	for ( i=0;i<12;i++ ) 
	{
		XPT2046_CLK_LOW();    
 8003d50:	461e      	mov	r6, r3
 8003d52:	f44f 3880 	mov.w	r8, #65536	; 0x10000
		usTemp = XPT2046_MISO();
 8003d56:	2708      	movs	r7, #8
		XPT2046_CLK_LOW();    
 8003d58:	f8c6 8010 	str.w	r8, [r6, #16]
		usTemp = XPT2046_MISO();
 8003d5c:	4639      	mov	r1, r7
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7fe f9b6 	bl	80020d0 <HAL_GPIO_ReadPin>
		usBuf |= usTemp << ( 11 - i );
 8003d64:	40a8      	lsls	r0, r5
 8003d66:	4304      	orrs	r4, r0
 8003d68:	b2a4      	uxth	r4, r4
		XPT2046_CLK_HIGH();
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	6133      	str	r3, [r6, #16]
	for ( i=0;i<12;i++ ) 
 8003d6e:	3d01      	subs	r5, #1
 8003d70:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003d74:	d1f0      	bne.n	8003d58 <XPT2046_ReadCMD+0x1c>
	}
	return usBuf;
}
 8003d76:	4620      	mov	r0, r4
 8003d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d7c:	40011800 	.word	0x40011800

08003d80 <XPT2046_Init>:
{
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	b087      	sub	sp, #28
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <XPT2046_Init+0x90>)
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003d94:	9200      	str	r2, [sp, #0]
 8003d96:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	f042 0220 	orr.w	r2, r2, #32
 8003d9e:	619a      	str	r2, [r3, #24]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Pin=XPT2046_SPI_CLK_PIN;
 8003daa:	2401      	movs	r4, #1
 8003dac:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH ;	  
 8003dae:	2603      	movs	r6, #3
 8003db0:	9605      	str	r6, [sp, #20]
  GPIO_InitStructure.Mode=GPIO_MODE_OUTPUT_PP;
 8003db2:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(XPT2046_SPI_CLK_PORT, &GPIO_InitStructure);
 8003db4:	4d17      	ldr	r5, [pc, #92]	; (8003e14 <XPT2046_Init+0x94>)
 8003db6:	a902      	add	r1, sp, #8
 8003db8:	4628      	mov	r0, r5
 8003dba:	f7fe f83f 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = XPT2046_SPI_MOSI_PIN;
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(XPT2046_SPI_MOSI_PORT, &GPIO_InitStructure);
 8003dc2:	a902      	add	r1, sp, #8
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f7fe f839 	bl	8001e3c <HAL_GPIO_Init>
	GPIO_InitStructure.Pin = XPT2046_SPI_CS_PIN; 
 8003dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dce:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH ;
 8003dd0:	9605      	str	r6, [sp, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;      
 8003dd2:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(XPT2046_SPI_CS_PORT, &GPIO_InitStructure); 
 8003dd4:	4f10      	ldr	r7, [pc, #64]	; (8003e18 <XPT2046_Init+0x98>)
 8003dd6:	a902      	add	r1, sp, #8
 8003dd8:	4638      	mov	r0, r7
 8003dda:	f7fe f82f 	bl	8001e3c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = XPT2046_SPI_MISO_PIN; 
 8003dde:	2308      	movs	r3, #8
 8003de0:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH ;
 8003de2:	9605      	str	r6, [sp, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;  //��������
 8003de4:	2600      	movs	r6, #0
 8003de6:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8003de8:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(XPT2046_SPI_MISO_PORT, &GPIO_InitStructure);
 8003dea:	eb0d 0103 	add.w	r1, sp, r3
 8003dee:	4628      	mov	r0, r5
 8003df0:	f7fe f824 	bl	8001e3c <HAL_GPIO_Init>
  XPT2046_CS_DISABLE();		
 8003df4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pin = XPT2046_PENIRQ_GPIO_PIN;       
 8003dfa:	2310      	movs	r3, #16
 8003dfc:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;  //��������
 8003dfe:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8003e00:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(XPT2046_PENIRQ_GPIO_PORT, &GPIO_InitStructure);
 8003e02:	a902      	add	r1, sp, #8
 8003e04:	4628      	mov	r0, r5
 8003e06:	f7fe f819 	bl	8001e3c <HAL_GPIO_Init>
}
 8003e0a:	b007      	add	sp, #28
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40011800 	.word	0x40011800
 8003e18:	40011400 	.word	0x40011400

08003e1c <XPT2046_Get_TouchedPoint>:
	}   	
	return 0;    	
}

uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	b08b      	sub	sp, #44	; 0x2c
 8003e22:	4683      	mov	fp, r0
 8003e24:	468a      	mov	sl, r1
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  //����X��Y���ж�β���
 8003e26:	466e      	mov	r6, sp
 8003e28:	2228      	movs	r2, #40	; 0x28
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	f028 feb3 	bl	802cb98 <memset>
	uint8_t ucCount = 0, i;
 8003e32:	2400      	movs	r4, #0
	XPT2046_WriteCMD ( ucChannel );
 8003e34:	f04f 0990 	mov.w	r9, #144	; 0x90
	XPT2046_DelayUS ( 1 ); 
 8003e38:	f04f 0801 	mov.w	r8, #1
	}	while ( ( XPT2046_PENIRQ_Read() == XPT2046_PENIRQ_ActiveLevel ) && ( ucCount < 10 ) );//�û����������ʱ��TP_INT_IN�ź�Ϊ�� ���� ucCount<10
 8003e3c:	4f6a      	ldr	r7, [pc, #424]	; (8003fe8 <XPT2046_Get_TouchedPoint+0x1cc>)
	XPT2046_WriteCMD ( ucChannel );
 8003e3e:	4648      	mov	r0, r9
 8003e40:	f7ff ff50 	bl	8003ce4 <XPT2046_WriteCMD>
  return 	XPT2046_ReadCMD ();
 8003e44:	f7ff ff7a 	bl	8003d3c <XPT2046_ReadCMD>
 8003e48:	4605      	mov	r5, r0
	XPT2046_DelayUS ( 1 ); 
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	f7ff ff3e 	bl	8003ccc <XPT2046_DelayUS>
	XPT2046_WriteCMD ( ucChannel );
 8003e50:	20d0      	movs	r0, #208	; 0xd0
 8003e52:	f7ff ff47 	bl	8003ce4 <XPT2046_WriteCMD>
  return 	XPT2046_ReadCMD ();
 8003e56:	f7ff ff71 	bl	8003d3c <XPT2046_ReadCMD>
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 8003e5a:	f826 5b02 	strh.w	r5, [r6], #2
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 8003e5e:	8270      	strh	r0, [r6, #18]
		ucCount ++;  
 8003e60:	3401      	adds	r4, #1
 8003e62:	b2e4      	uxtb	r4, r4
	}	while ( ( XPT2046_PENIRQ_Read() == XPT2046_PENIRQ_ActiveLevel ) && ( ucCount < 10 ) );//�û����������ʱ��TP_INT_IN�ź�Ϊ�� ���� ucCount<10
 8003e64:	2110      	movs	r1, #16
 8003e66:	4638      	mov	r0, r7
 8003e68:	f7fe f932 	bl	80020d0 <HAL_GPIO_ReadPin>
 8003e6c:	b980      	cbnz	r0, 8003e90 <XPT2046_Get_TouchedPoint+0x74>
 8003e6e:	2c0a      	cmp	r4, #10
 8003e70:	d1e5      	bne.n	8003e3e <XPT2046_Get_TouchedPoint+0x22>
	if ( XPT2046_PENIRQ_Read() != XPT2046_PENIRQ_ActiveLevel )
 8003e72:	2110      	movs	r1, #16
 8003e74:	485c      	ldr	r0, [pc, #368]	; (8003fe8 <XPT2046_Get_TouchedPoint+0x1cc>)
 8003e76:	f7fe f92b 	bl	80020d0 <HAL_GPIO_ReadPin>
 8003e7a:	b180      	cbz	r0, 8003e9e <XPT2046_Get_TouchedPoint+0x82>
		ucXPT2046_TouchFlag = 0;			//�жϱ�־��λ
 8003e7c:	4b5b      	ldr	r3, [pc, #364]	; (8003fec <XPT2046_Get_TouchedPoint+0x1d0>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
	if ( ucCount ==10 )		 					
 8003e82:	2c0a      	cmp	r4, #10
		pDisplayCoordinate ->x = ( ( pTouchPara[LCD_SCAN_MODE].dX_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dX_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dX );        
		pDisplayCoordinate ->y = ( ( pTouchPara[LCD_SCAN_MODE].dY_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dY_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dY );

  }
	 
	else ucRet = 0;            //�����ȡ�Ĵ�����Ϣ�����򷵻�0
 8003e84:	bf18      	it	ne
 8003e86:	2000      	movne	r0, #0
	if ( ucCount ==10 )		 					
 8003e88:	d009      	beq.n	8003e9e <XPT2046_Get_TouchedPoint+0x82>
		
  return ucRet;
} 
 8003e8a:	b00b      	add	sp, #44	; 0x2c
 8003e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ( XPT2046_PENIRQ_Read() != XPT2046_PENIRQ_ActiveLevel )
 8003e90:	2110      	movs	r1, #16
 8003e92:	4855      	ldr	r0, [pc, #340]	; (8003fe8 <XPT2046_Get_TouchedPoint+0x1cc>)
 8003e94:	f7fe f91c 	bl	80020d0 <HAL_GPIO_ReadPin>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	d0f2      	beq.n	8003e82 <XPT2046_Get_TouchedPoint+0x66>
 8003e9c:	e7ee      	b.n	8003e7c <XPT2046_Get_TouchedPoint+0x60>
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8003e9e:	f9bd c000 	ldrsh.w	ip, [sp]
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8003ea2:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
		for ( i = 1; i < 10; i ++ )
 8003ea6:	f10d 0012 	add.w	r0, sp, #18
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8003eaa:	466b      	mov	r3, sp
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8003eac:	4664      	mov	r4, ip
 8003eae:	4665      	mov	r5, ip
 8003eb0:	e004      	b.n	8003ebc <XPT2046_Get_TouchedPoint+0xa0>
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8003eb2:	4294      	cmp	r4, r2
 8003eb4:	bfb8      	it	lt
 8003eb6:	4614      	movlt	r4, r2
		for ( i = 1; i < 10; i ++ )
 8003eb8:	4283      	cmp	r3, r0
 8003eba:	d005      	beq.n	8003ec8 <XPT2046_Get_TouchedPoint+0xac>
			if ( sBufferArray[ 0 ] [ i ] < lX_Min )
 8003ebc:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8003ec0:	42aa      	cmp	r2, r5
 8003ec2:	daf6      	bge.n	8003eb2 <XPT2046_Get_TouchedPoint+0x96>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8003ec4:	4615      	mov	r5, r2
 8003ec6:	e7f7      	b.n	8003eb8 <XPT2046_Get_TouchedPoint+0x9c>
		for ( i = 1; i < 10; i ++ )
 8003ec8:	ae05      	add	r6, sp, #20
 8003eca:	f10d 0026 	add.w	r0, sp, #38	; 0x26
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8003ece:	460b      	mov	r3, r1
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	e004      	b.n	8003ede <XPT2046_Get_TouchedPoint+0xc2>
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8003ed4:	42bb      	cmp	r3, r7
 8003ed6:	bfb8      	it	lt
 8003ed8:	463b      	movlt	r3, r7
		for ( i = 1; i < 10; i ++ )
 8003eda:	4286      	cmp	r6, r0
 8003edc:	d005      	beq.n	8003eea <XPT2046_Get_TouchedPoint+0xce>
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8003ede:	f936 7f02 	ldrsh.w	r7, [r6, #2]!
 8003ee2:	4297      	cmp	r7, r2
 8003ee4:	daf6      	bge.n	8003ed4 <XPT2046_Get_TouchedPoint+0xb8>
				lY_Min = sBufferArray [ 1 ] [ i ];
 8003ee6:	463a      	mov	r2, r7
 8003ee8:	e7f7      	b.n	8003eda <XPT2046_Get_TouchedPoint+0xbe>
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003eea:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8003eee:	4460      	add	r0, ip
 8003ef0:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8003ef4:	4430      	add	r0, r6
 8003ef6:	f9bd 6006 	ldrsh.w	r6, [sp, #6]
 8003efa:	4430      	add	r0, r6
 8003efc:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 8003f00:	4430      	add	r0, r6
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003f02:	f9bd 600a 	ldrsh.w	r6, [sp, #10]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003f06:	4430      	add	r0, r6
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003f08:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8003f0c:	4430      	add	r0, r6
 8003f0e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8003f12:	4430      	add	r0, r6
 8003f14:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8003f18:	4430      	add	r0, r6
 8003f1a:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8003f1e:	4430      	add	r0, r6
 8003f20:	1b40      	subs	r0, r0, r5
 8003f22:	1b00      	subs	r0, r0, r4
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003f24:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 8003f28:	440c      	add	r4, r1
 8003f2a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8003f2e:	440c      	add	r4, r1
 8003f30:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8003f34:	440c      	add	r4, r1
 8003f36:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8003f3a:	440c      	add	r4, r1
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003f3c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003f40:	440c      	add	r4, r1
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003f42:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8003f46:	440c      	add	r4, r1
 8003f48:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8003f4c:	440c      	add	r4, r1
 8003f4e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8003f52:	440c      	add	r4, r1
 8003f54:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
 8003f58:	440c      	add	r4, r1
 8003f5a:	1aa4      	subs	r4, r4, r2
 8003f5c:	1ae4      	subs	r4, r4, r3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8003f5e:	f344 04cf 	sbfx	r4, r4, #3, #16
		pDisplayCoordinate ->x = ( ( pTouchPara[LCD_SCAN_MODE].dX_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dX_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dX );        
 8003f62:	4e23      	ldr	r6, [pc, #140]	; (8003ff0 <XPT2046_Get_TouchedPoint+0x1d4>)
 8003f64:	7835      	ldrb	r5, [r6, #0]
 8003f66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f6a:	00ef      	lsls	r7, r5, #3
 8003f6c:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8003f70:	f340 00cf 	sbfx	r0, r0, #3, #16
 8003f74:	f7fc fad6 	bl	8000524 <__aeabi_i2f>
 8003f78:	4680      	mov	r8, r0
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	f7fc fad2 	bl	8000524 <__aeabi_i2f>
 8003f80:	4604      	mov	r4, r0
 8003f82:	f85a 1007 	ldr.w	r1, [sl, r7]
 8003f86:	4640      	mov	r0, r8
 8003f88:	f7fc f95e 	bl	8000248 <__aeabi_fmul>
 8003f8c:	4607      	mov	r7, r0
 8003f8e:	6869      	ldr	r1, [r5, #4]
 8003f90:	4620      	mov	r0, r4
 8003f92:	f7fc f959 	bl	8000248 <__aeabi_fmul>
 8003f96:	4601      	mov	r1, r0
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f7fc fa0f 	bl	80003bc <__addsf3>
 8003f9e:	68a9      	ldr	r1, [r5, #8]
 8003fa0:	f7fc fa0c 	bl	80003bc <__addsf3>
 8003fa4:	f7fc fb12 	bl	80005cc <__aeabi_f2iz>
 8003fa8:	f8ab 0000 	strh.w	r0, [fp]
		pDisplayCoordinate ->y = ( ( pTouchPara[LCD_SCAN_MODE].dY_X * strScreenCoordinate.x ) + ( pTouchPara[LCD_SCAN_MODE].dY_Y * strScreenCoordinate.y ) + pTouchPara[LCD_SCAN_MODE].dY );
 8003fac:	7833      	ldrb	r3, [r6, #0]
 8003fae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003fb2:	eb0a 0ac3 	add.w	sl, sl, r3, lsl #3
 8003fb6:	f8da 100c 	ldr.w	r1, [sl, #12]
 8003fba:	4640      	mov	r0, r8
 8003fbc:	f7fc f944 	bl	8000248 <__aeabi_fmul>
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	f8da 1010 	ldr.w	r1, [sl, #16]
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7fc f93e 	bl	8000248 <__aeabi_fmul>
 8003fcc:	4601      	mov	r1, r0
 8003fce:	4628      	mov	r0, r5
 8003fd0:	f7fc f9f4 	bl	80003bc <__addsf3>
 8003fd4:	f8da 1014 	ldr.w	r1, [sl, #20]
 8003fd8:	f7fc f9f0 	bl	80003bc <__addsf3>
 8003fdc:	f7fc faf6 	bl	80005cc <__aeabi_f2iz>
 8003fe0:	f8ab 0002 	strh.w	r0, [fp, #2]
	uint8_t ucRet = 1;           //���������򷵻�0
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	e750      	b.n	8003e8a <XPT2046_Get_TouchedPoint+0x6e>
 8003fe8:	40011800 	.word	0x40011800
 8003fec:	20001272 	.word	0x20001272
 8003ff0:	20000634 	.word	0x20000634

08003ff4 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	4605      	mov	r5, r0
	if(disp_flush_enabled) {
 8003ff8:	4b13      	ldr	r3, [pc, #76]	; (8004048 <disp_flush+0x54>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	b91b      	cbnz	r3, 8004006 <disp_flush+0x12>
		HAL_DMA_Start(&hdma_memtomem_dma1_channel1,(uint32_t)color_p,(uint32_t)0x60020000,size);
		HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, HAL_DMA_FULL_TRANSFER, 100);
	}
    /*IMPORTANT!!!
     *Inform the graphics library that you are ready with the flushing*/
	 lv_disp_flush_ready(disp_drv);
 8003ffe:	4628      	mov	r0, r5
 8004000:	f01c fd74 	bl	8020aec <lv_disp_flush_ready>
}
 8004004:	bd70      	pop	{r4, r5, r6, pc}
 8004006:	460c      	mov	r4, r1
 8004008:	4616      	mov	r6, r2
		ILI9341_OpenWindow2(area->x1,area->y1,area->x2,area->y2);
 800400a:	88cb      	ldrh	r3, [r1, #6]
 800400c:	888a      	ldrh	r2, [r1, #4]
 800400e:	8849      	ldrh	r1, [r1, #2]
 8004010:	8820      	ldrh	r0, [r4, #0]
 8004012:	f7ff fc85 	bl	8003920 <ILI9341_OpenWindow2>
		uint32_t size = (area->x2 - area->x1 + 1) * (area->y2 - area->y1 + 1);
 8004016:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800401a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8004024:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8004028:	1a5b      	subs	r3, r3, r1
 800402a:	3301      	adds	r3, #1
		HAL_DMA_Start(&hdma_memtomem_dma1_channel1,(uint32_t)color_p,(uint32_t)0x60020000,size);
 800402c:	4c07      	ldr	r4, [pc, #28]	; (800404c <disp_flush+0x58>)
 800402e:	fb02 3303 	mla	r3, r2, r3, r3
 8004032:	4a07      	ldr	r2, [pc, #28]	; (8004050 <disp_flush+0x5c>)
 8004034:	4631      	mov	r1, r6
 8004036:	4620      	mov	r0, r4
 8004038:	f7fd f9c6 	bl	80013c8 <HAL_DMA_Start>
		HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, HAL_DMA_FULL_TRANSFER, 100);
 800403c:	2264      	movs	r2, #100	; 0x64
 800403e:	2100      	movs	r1, #0
 8004040:	4620      	mov	r0, r4
 8004042:	f7fd fad1 	bl	80015e8 <HAL_DMA_PollForTransfer>
 8004046:	e7da      	b.n	8003ffe <disp_flush+0xa>
 8004048:	200006fc 	.word	0x200006fc
 800404c:	20000824 	.word	0x20000824
 8004050:	60020000 	.word	0x60020000

08004054 <lv_port_disp_init>:
{
 8004054:	b538      	push	{r3, r4, r5, lr}
	ILI9341_Init();
 8004056:	f7ff fc9f 	bl	8003998 <ILI9341_Init>
    lv_disp_draw_buf_init(&draw_buf_dsc_1, buf_1, NULL, MY_DISP_HOR_RES * 10);   /*Initialize the display buffer*/
 800405a:	4d0c      	ldr	r5, [pc, #48]	; (800408c <lv_port_disp_init+0x38>)
 800405c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8004060:	2200      	movs	r2, #0
 8004062:	490b      	ldr	r1, [pc, #44]	; (8004090 <lv_port_disp_init+0x3c>)
 8004064:	4628      	mov	r0, r5
 8004066:	f01c fc4d 	bl	8020904 <lv_disp_draw_buf_init>
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 800406a:	4c0a      	ldr	r4, [pc, #40]	; (8004094 <lv_port_disp_init+0x40>)
 800406c:	4620      	mov	r0, r4
 800406e:	f01c fc21 	bl	80208b4 <lv_disp_drv_init>
    disp_drv.hor_res = MY_DISP_HOR_RES;
 8004072:	23f0      	movs	r3, #240	; 0xf0
 8004074:	8023      	strh	r3, [r4, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 8004076:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800407a:	8063      	strh	r3, [r4, #2]
    disp_drv.flush_cb = disp_flush;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <lv_port_disp_init+0x44>)
 800407e:	6163      	str	r3, [r4, #20]
    disp_drv.draw_buf = &draw_buf_dsc_1;
 8004080:	60e5      	str	r5, [r4, #12]
    lv_disp_drv_register(&disp_drv);
 8004082:	4620      	mov	r0, r4
 8004084:	f01c fc4c 	bl	8020920 <lv_disp_drv_register>
}
 8004088:	bd38      	pop	{r3, r4, r5, pc}
 800408a:	bf00      	nop
 800408c:	20002584 	.word	0x20002584
 8004090:	20001274 	.word	0x20001274
 8004094:	20002534 	.word	0x20002534
 8004098:	08003ff5 	.word	0x08003ff5

0800409c <touchpad_read>:
	XPT2046_Init();
}

/*Will be called by the library to read the touchpad*/
static void touchpad_read(lv_indev_drv_t * indev_drv, lv_indev_data_t * data)
{
 800409c:	b530      	push	{r4, r5, lr}
 800409e:	b083      	sub	sp, #12
 80040a0:	460c      	mov	r4, r1
/*Return true is the touchpad is pressed*/
static bool touchpad_is_pressed(void)
{
    /*Your code comes here*/
	strType_XPT2046_Coordinate strDisplayCoordinate;
	if( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ))
 80040a2:	490f      	ldr	r1, [pc, #60]	; (80040e0 <touchpad_read+0x44>)
 80040a4:	4668      	mov	r0, sp
 80040a6:	f7ff feb9 	bl	8003e1c <XPT2046_Get_TouchedPoint>
    if(touchpad_is_pressed()) {
 80040aa:	b950      	cbnz	r0, 80040c2 <touchpad_read+0x26>
        data->state = LV_INDEV_STATE_REL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73a3      	strb	r3, [r4, #14]
    data->point.x = last_x;
 80040b0:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <touchpad_read+0x48>)
 80040b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b6:	8023      	strh	r3, [r4, #0]
    data->point.y = last_y;
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <touchpad_read+0x4c>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	8063      	strh	r3, [r4, #2]
}
 80040be:	b003      	add	sp, #12
 80040c0:	bd30      	pop	{r4, r5, pc}
/*Get the x and y coordinates if the touchpad is pressed*/
static void touchpad_get_xy(lv_coord_t * x, lv_coord_t * y)
{
    /*Your code comes here*/
	static strType_XPT2046_Coordinate cinfo={-1,-1,-1,-1};; // x,y,last x,last y
	XPT2046_Get_TouchedPoint(&cinfo,strXPT2046_TouchPara);
 80040c2:	4d0a      	ldr	r5, [pc, #40]	; (80040ec <touchpad_read+0x50>)
 80040c4:	4906      	ldr	r1, [pc, #24]	; (80040e0 <touchpad_read+0x44>)
 80040c6:	4628      	mov	r0, r5
 80040c8:	f7ff fea8 	bl	8003e1c <XPT2046_Get_TouchedPoint>

    (*x) = cinfo.x;
 80040cc:	882a      	ldrh	r2, [r5, #0]
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <touchpad_read+0x48>)
 80040d0:	801a      	strh	r2, [r3, #0]
    (*y) = cinfo.y;
 80040d2:	886a      	ldrh	r2, [r5, #2]
 80040d4:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <touchpad_read+0x4c>)
 80040d6:	801a      	strh	r2, [r3, #0]
        data->state = LV_INDEV_STATE_PR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73a3      	strb	r3, [r4, #14]
 80040dc:	e7e8      	b.n	80040b0 <touchpad_read+0x14>
 80040de:	bf00      	nop
 80040e0:	2000063c 	.word	0x2000063c
 80040e4:	200025c4 	.word	0x200025c4
 80040e8:	200025c6 	.word	0x200025c6
 80040ec:	20000700 	.word	0x20000700

080040f0 <lv_port_indev_init>:
{
 80040f0:	b510      	push	{r4, lr}
	XPT2046_Init();
 80040f2:	f7ff fe45 	bl	8003d80 <XPT2046_Init>
    lv_indev_drv_init(&indev_drv);
 80040f6:	4c07      	ldr	r4, [pc, #28]	; (8004114 <lv_port_indev_init+0x24>)
 80040f8:	4620      	mov	r0, r4
 80040fa:	f01c fd0e 	bl	8020b1a <lv_indev_drv_init>
    indev_drv.type = LV_INDEV_TYPE_POINTER;
 80040fe:	2301      	movs	r3, #1
 8004100:	7023      	strb	r3, [r4, #0]
    indev_drv.read_cb = touchpad_read;
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <lv_port_indev_init+0x28>)
 8004104:	6063      	str	r3, [r4, #4]
    indev_touchpad = lv_indev_drv_register(&indev_drv);
 8004106:	4620      	mov	r0, r4
 8004108:	f01c fd1c 	bl	8020b44 <lv_indev_drv_register>
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <lv_port_indev_init+0x2c>)
 800410e:	6018      	str	r0, [r3, #0]
}
 8004110:	bd10      	pop	{r4, pc}
 8004112:	bf00      	nop
 8004114:	200025a0 	.word	0x200025a0
 8004118:	0800409d 	.word	0x0800409d
 800411c:	200025c0 	.word	0x200025c0

08004120 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8004120:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8004122:	4603      	mov	r3, r0
 8004124:	b108      	cbz	r0, 800412a <lv_disp_get_scr_act+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8004126:	6918      	ldr	r0, [r3, #16]
}
 8004128:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 800412a:	f01c fca1 	bl	8020a70 <lv_disp_get_default>
    if(!disp) {
 800412e:	4603      	mov	r3, r0
 8004130:	2800      	cmp	r0, #0
 8004132:	d1f8      	bne.n	8004126 <lv_disp_get_scr_act+0x6>
 8004134:	e7f8      	b.n	8004128 <lv_disp_get_scr_act+0x8>

08004136 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8004136:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8004138:	4603      	mov	r3, r0
 800413a:	b108      	cbz	r0, 8004140 <lv_disp_get_scr_prev+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 800413c:	6958      	ldr	r0, [r3, #20]
}
 800413e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8004140:	f01c fc96 	bl	8020a70 <lv_disp_get_default>
    if(!disp) {
 8004144:	4603      	mov	r3, r0
 8004146:	2800      	cmp	r0, #0
 8004148:	d1f8      	bne.n	800413c <lv_disp_get_scr_prev+0x6>
 800414a:	e7f8      	b.n	800413e <lv_disp_get_scr_prev+0x8>

0800414c <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 800414c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800414e:	4603      	mov	r3, r0
 8004150:	b108      	cbz	r0, 8004156 <lv_disp_get_layer_top+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 8004152:	69d8      	ldr	r0, [r3, #28]
}
 8004154:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8004156:	f01c fc8b 	bl	8020a70 <lv_disp_get_default>
    if(!disp) {
 800415a:	4603      	mov	r3, r0
 800415c:	2800      	cmp	r0, #0
 800415e:	d1f8      	bne.n	8004152 <lv_disp_get_layer_top+0x6>
 8004160:	e7f8      	b.n	8004154 <lv_disp_get_layer_top+0x8>

08004162 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8004162:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8004164:	4603      	mov	r3, r0
 8004166:	b108      	cbz	r0, 800416c <lv_disp_get_layer_sys+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8004168:	6a18      	ldr	r0, [r3, #32]
}
 800416a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 800416c:	f01c fc80 	bl	8020a70 <lv_disp_get_default>
    if(!disp) {
 8004170:	4603      	mov	r3, r0
 8004172:	2800      	cmp	r0, #0
 8004174:	d1f8      	bne.n	8004168 <lv_disp_get_layer_sys+0x6>
 8004176:	e7f8      	b.n	800416a <lv_disp_get_layer_sys+0x8>

08004178 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8004178:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 800417a:	4603      	mov	r3, r0
 800417c:	b108      	cbz	r0, 8004182 <lv_disp_get_theme+0xa>
    return disp->theme;
}
 800417e:	6898      	ldr	r0, [r3, #8]
 8004180:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 8004182:	f01c fc75 	bl	8020a70 <lv_disp_get_default>
 8004186:	4603      	mov	r3, r0
 8004188:	e7f9      	b.n	800417e <lv_disp_get_theme+0x6>

0800418a <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 800418a:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800418c:	4603      	mov	r3, r0
 800418e:	b130      	cbz	r0, 800419e <lv_disp_is_invalidation_enabled+0x14>
    if(!disp) {
        LV_LOG_WARN("no display registered");
        return false;
    }

    return (disp->inv_en_cnt > 0);
 8004190:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
 8004194:	2800      	cmp	r0, #0
 8004196:	bfd4      	ite	le
 8004198:	2000      	movle	r0, #0
 800419a:	2001      	movgt	r0, #1
}
 800419c:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 800419e:	f01c fc67 	bl	8020a70 <lv_disp_get_default>
    if(!disp) {
 80041a2:	4603      	mov	r3, r0
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d1f3      	bne.n	8004190 <lv_disp_is_invalidation_enabled+0x6>
        return false;
 80041a8:	2000      	movs	r0, #0
 80041aa:	e7f7      	b.n	800419c <lv_disp_is_invalidation_enabled+0x12>

080041ac <lv_obj_get_event_dsc>:

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 80041ac:	6880      	ldr	r0, [r0, #8]
 80041ae:	b158      	cbz	r0, 80041c8 <lv_obj_get_event_dsc+0x1c>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 80041b0:	7e83      	ldrb	r3, [r0, #26]
 80041b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b6:	428b      	cmp	r3, r1
 80041b8:	d905      	bls.n	80041c6 <lv_obj_get_event_dsc+0x1a>

    return &obj->spec_attr->event_dsc[id];
 80041ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80041be:	68c0      	ldr	r0, [r0, #12]
 80041c0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80041c4:	4770      	bx	lr
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 80041c6:	2000      	movs	r0, #0
}
 80041c8:	4770      	bx	lr

080041ca <lv_obj_event_base>:
{
 80041ca:	b510      	push	{r4, lr}
 80041cc:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 80041ce:	b140      	cbz	r0, 80041e2 <lv_obj_event_base+0x18>
    else base = class_p->base_class;
 80041d0:	6800      	ldr	r0, [r0, #0]
    while(base && base->event_cb == NULL) base = base->base_class;
 80041d2:	b148      	cbz	r0, 80041e8 <lv_obj_event_base+0x1e>
 80041d4:	6903      	ldr	r3, [r0, #16]
 80041d6:	b94b      	cbnz	r3, 80041ec <lv_obj_event_base+0x22>
 80041d8:	6800      	ldr	r0, [r0, #0]
 80041da:	2800      	cmp	r0, #0
 80041dc:	d1fa      	bne.n	80041d4 <lv_obj_event_base+0xa>
    if(base == NULL) return LV_RES_OK;
 80041de:	2001      	movs	r0, #1
 80041e0:	e00e      	b.n	8004200 <lv_obj_event_base+0x36>
    if(class_p == NULL) base = e->current_target->class_p;
 80041e2:	684b      	ldr	r3, [r1, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	e7f4      	b.n	80041d2 <lv_obj_event_base+0x8>
    if(base == NULL) return LV_RES_OK;
 80041e8:	2001      	movs	r0, #1
 80041ea:	e009      	b.n	8004200 <lv_obj_event_base+0x36>
    e->user_data = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60e3      	str	r3, [r4, #12]
    base->event_cb(base, e);
 80041f0:	6903      	ldr	r3, [r0, #16]
 80041f2:	4621      	mov	r1, r4
 80041f4:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 80041f6:	7e20      	ldrb	r0, [r4, #24]
 80041f8:	f080 0001 	eor.w	r0, r0, #1
    if(base == NULL) return LV_RES_OK;
 80041fc:	f000 0001 	and.w	r0, r0, #1
}
 8004200:	bd10      	pop	{r4, pc}
	...

08004204 <event_send_core>:

static lv_res_t event_send_core(lv_event_t * e)
{
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	4604      	mov	r4, r0
    EVENT_TRACE("Sending event %d to %p with %p param", e->code, (void *)e->current_target, e->param);

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8004208:	f000 fc82 	bl	8004b10 <lv_indev_get_act>
    if(indev_act) {
 800420c:	b168      	cbz	r0, 800422a <event_send_core+0x26>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 800420e:	6800      	ldr	r0, [r0, #0]
 8004210:	6883      	ldr	r3, [r0, #8]
 8004212:	b10b      	cbz	r3, 8004218 <event_send_core+0x14>
 8004214:	7a21      	ldrb	r1, [r4, #8]
 8004216:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8004218:	7e23      	ldrb	r3, [r4, #24]
 800421a:	f013 0602 	ands.w	r6, r3, #2
 800421e:	f040 80c3 	bne.w	80043a8 <event_send_core+0x1a4>
        if(e->deleted) return LV_RES_INV;
 8004222:	f013 0f01 	tst.w	r3, #1
 8004226:	f040 80c0 	bne.w	80043aa <event_send_core+0x1a6>
    }

    lv_res_t res = LV_RES_OK;
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 800422a:	2100      	movs	r1, #0
 800422c:	6860      	ldr	r0, [r4, #4]
 800422e:	f7ff ffbd 	bl	80041ac <lv_obj_get_event_dsc>

    uint32_t i = 0;
    while(event_dsc && res == LV_RES_OK) {
 8004232:	4603      	mov	r3, r0
 8004234:	b330      	cbz	r0, 8004284 <event_send_core+0x80>
    uint32_t i = 0;
 8004236:	2500      	movs	r5, #0
 8004238:	e014      	b.n	8004264 <event_send_core+0x60>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
            e->user_data = event_dsc->user_data;
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	60e2      	str	r2, [r4, #12]
            event_dsc->cb(e);
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4620      	mov	r0, r4
 8004242:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 8004244:	7e23      	ldrb	r3, [r4, #24]
 8004246:	f013 0602 	ands.w	r6, r3, #2
 800424a:	f040 80b0 	bne.w	80043ae <event_send_core+0x1aa>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 800424e:	f013 0f01 	tst.w	r3, #1
 8004252:	f040 80aa 	bne.w	80043aa <event_send_core+0x1a6>
        }

        i++;
 8004256:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8004258:	4629      	mov	r1, r5
 800425a:	6860      	ldr	r0, [r4, #4]
 800425c:	f7ff ffa6 	bl	80041ac <lv_obj_get_event_dsc>
    while(event_dsc && res == LV_RES_OK) {
 8004260:	4603      	mov	r3, r0
 8004262:	b178      	cbz	r0, 8004284 <event_send_core+0x80>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2a00      	cmp	r2, #0
 8004268:	d0f5      	beq.n	8004256 <event_send_core+0x52>
 800426a:	7a1a      	ldrb	r2, [r3, #8]
 800426c:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8004270:	2900      	cmp	r1, #0
 8004272:	daf0      	bge.n	8004256 <event_send_core+0x52>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8004274:	2a80      	cmp	r2, #128	; 0x80
 8004276:	d0e0      	beq.n	800423a <event_send_core+0x36>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8004278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800427c:	7a21      	ldrb	r1, [r4, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 800427e:	428a      	cmp	r2, r1
 8004280:	d1e9      	bne.n	8004256 <event_send_core+0x52>
 8004282:	e7da      	b.n	800423a <event_send_core+0x36>
    }

    res = lv_obj_event_base(NULL, e);
 8004284:	4621      	mov	r1, r4
 8004286:	2000      	movs	r0, #0
 8004288:	f7ff ff9f 	bl	80041ca <lv_obj_event_base>

    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 800428c:	4606      	mov	r6, r0
 800428e:	2800      	cmp	r0, #0
 8004290:	f000 808b 	beq.w	80043aa <event_send_core+0x1a6>
 8004294:	2100      	movs	r1, #0
 8004296:	6860      	ldr	r0, [r4, #4]
 8004298:	f7ff ff88 	bl	80041ac <lv_obj_get_event_dsc>

    i = 0;
    while(event_dsc && res == LV_RES_OK) {
 800429c:	4603      	mov	r3, r0
 800429e:	b328      	cbz	r0, 80042ec <event_send_core+0xe8>
 80042a0:	2e01      	cmp	r6, #1
 80042a2:	f040 8082 	bne.w	80043aa <event_send_core+0x1a6>
 80042a6:	2500      	movs	r5, #0
 80042a8:	e012      	b.n	80042d0 <event_send_core+0xcc>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
            e->user_data = event_dsc->user_data;
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	60e2      	str	r2, [r4, #12]
            event_dsc->cb(e);
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4620      	mov	r0, r4
 80042b2:	4798      	blx	r3

            if(e->stop_processing) return LV_RES_OK;
 80042b4:	7e23      	ldrb	r3, [r4, #24]
 80042b6:	f013 0202 	ands.w	r2, r3, #2
 80042ba:	d176      	bne.n	80043aa <event_send_core+0x1a6>
            /*Stop if the object is deleted*/
            if(e->deleted) return LV_RES_INV;
 80042bc:	f013 0f01 	tst.w	r3, #1
 80042c0:	d177      	bne.n	80043b2 <event_send_core+0x1ae>
        }

        i++;
 80042c2:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 80042c4:	4629      	mov	r1, r5
 80042c6:	6860      	ldr	r0, [r4, #4]
 80042c8:	f7ff ff70 	bl	80041ac <lv_obj_get_event_dsc>
    while(event_dsc && res == LV_RES_OK) {
 80042cc:	4603      	mov	r3, r0
 80042ce:	b178      	cbz	r0, 80042f0 <event_send_core+0xec>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	2a00      	cmp	r2, #0
 80042d4:	d0f5      	beq.n	80042c2 <event_send_core+0xbe>
 80042d6:	7a19      	ldrb	r1, [r3, #8]
 80042d8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80042dc:	2a00      	cmp	r2, #0
 80042de:	dbf0      	blt.n	80042c2 <event_send_core+0xbe>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d0e2      	beq.n	80042aa <event_send_core+0xa6>
 80042e4:	7a22      	ldrb	r2, [r4, #8]
 80042e6:	428a      	cmp	r2, r1
 80042e8:	d1eb      	bne.n	80042c2 <event_send_core+0xbe>
 80042ea:	e7de      	b.n	80042aa <event_send_core+0xa6>
    }

    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 80042ec:	2e01      	cmp	r6, #1
 80042ee:	d15c      	bne.n	80043aa <event_send_core+0x1a6>
 80042f0:	6860      	ldr	r0, [r4, #4]
 80042f2:	6843      	ldr	r3, [r0, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05e      	beq.n	80043b6 <event_send_core+0x1b2>
    return res;
}

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 80042f8:	7e23      	ldrb	r3, [r4, #24]
 80042fa:	f013 0f04 	tst.w	r3, #4
 80042fe:	d15e      	bne.n	80043be <event_send_core+0x1ba>

    /*Event codes that always bubble*/
    switch(e->code) {
 8004300:	7a23      	ldrb	r3, [r4, #8]
 8004302:	3b23      	subs	r3, #35	; 0x23
 8004304:	2b01      	cmp	r3, #1
 8004306:	d80a      	bhi.n	800431e <event_send_core+0x11a>
        e->current_target = e->current_target->parent;
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	6063      	str	r3, [r4, #4]
        res = event_send_core(e);
 800430e:	4620      	mov	r0, r4
 8004310:	f7ff ff78 	bl	8004204 <event_send_core>
        if(e->stop_processing) return LV_RES_OK;
 8004314:	2801      	cmp	r0, #1
 8004316:	bf14      	ite	ne
 8004318:	2600      	movne	r6, #0
 800431a:	2601      	moveq	r6, #1
 800431c:	e045      	b.n	80043aa <event_send_core+0x1a6>
        default:
            break;
    }

    /*Check other codes only if bubbling is enabled*/
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 800431e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004322:	f002 feb7 	bl	8007094 <lv_obj_has_flag>
 8004326:	2800      	cmp	r0, #0
 8004328:	d049      	beq.n	80043be <event_send_core+0x1ba>

    switch(e->code) {
 800432a:	7a23      	ldrb	r3, [r4, #8]
 800432c:	3b11      	subs	r3, #17
 800432e:	2b1b      	cmp	r3, #27
 8004330:	d8ea      	bhi.n	8004308 <event_send_core+0x104>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <event_send_core+0x134>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	080043bb 	.word	0x080043bb
 800433c:	080043bb 	.word	0x080043bb
 8004340:	080043bb 	.word	0x080043bb
 8004344:	080043bb 	.word	0x080043bb
 8004348:	080043bb 	.word	0x080043bb
 800434c:	080043bb 	.word	0x080043bb
 8004350:	080043bb 	.word	0x080043bb
 8004354:	080043bb 	.word	0x080043bb
 8004358:	080043bb 	.word	0x080043bb
 800435c:	080043bb 	.word	0x080043bb
 8004360:	080043bb 	.word	0x080043bb
 8004364:	08004309 	.word	0x08004309
 8004368:	08004309 	.word	0x08004309
 800436c:	080043bb 	.word	0x080043bb
 8004370:	08004309 	.word	0x08004309
 8004374:	08004309 	.word	0x08004309
 8004378:	080043bb 	.word	0x080043bb
 800437c:	080043bb 	.word	0x080043bb
 8004380:	080043bb 	.word	0x080043bb
 8004384:	080043bb 	.word	0x080043bb
 8004388:	08004309 	.word	0x08004309
 800438c:	08004309 	.word	0x08004309
 8004390:	08004309 	.word	0x08004309
 8004394:	08004309 	.word	0x08004309
 8004398:	080043bb 	.word	0x080043bb
 800439c:	080043bb 	.word	0x080043bb
 80043a0:	08004309 	.word	0x08004309
 80043a4:	080043bb 	.word	0x080043bb
        if(e->stop_processing) return LV_RES_OK;
 80043a8:	2601      	movs	r6, #1
}
 80043aa:	4630      	mov	r0, r6
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
            if(e->stop_processing) return LV_RES_OK;
 80043ae:	2601      	movs	r6, #1
 80043b0:	e7fb      	b.n	80043aa <event_send_core+0x1a6>
            if(e->deleted) return LV_RES_INV;
 80043b2:	4616      	mov	r6, r2
 80043b4:	e7f9      	b.n	80043aa <event_send_core+0x1a6>
    res = lv_obj_event_base(NULL, e);
 80043b6:	2601      	movs	r6, #1
 80043b8:	e7f7      	b.n	80043aa <event_send_core+0x1a6>
    switch(e->code) {
 80043ba:	2601      	movs	r6, #1
 80043bc:	e7f5      	b.n	80043aa <event_send_core+0x1a6>
    res = lv_obj_event_base(NULL, e);
 80043be:	2601      	movs	r6, #1
 80043c0:	e7f3      	b.n	80043aa <event_send_core+0x1a6>
 80043c2:	bf00      	nop

080043c4 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
 80043c4:	b1d8      	cbz	r0, 80043fe <lv_event_send+0x3a>
{
 80043c6:	b510      	push	{r4, lr}
 80043c8:	b088      	sub	sp, #32
    e.target = obj;
 80043ca:	9001      	str	r0, [sp, #4]
    e.current_target = obj;
 80043cc:	9002      	str	r0, [sp, #8]
    e.code = event_code;
 80043ce:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 80043d2:	2100      	movs	r1, #0
 80043d4:	9104      	str	r1, [sp, #16]
    e.param = param;
 80043d6:	9205      	str	r2, [sp, #20]
    e.deleted = 0;
 80043d8:	f89d 301c 	ldrb.w	r3, [sp, #28]
    e.stop_processing = 0;
 80043dc:	f003 03fa 	and.w	r3, r3, #250	; 0xfa
 80043e0:	f361 0341 	bfi	r3, r1, #1, #1
 80043e4:	f88d 301c 	strb.w	r3, [sp, #28]
    e.prev = event_head;
 80043e8:	4c06      	ldr	r4, [pc, #24]	; (8004404 <lv_event_send+0x40>)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	9306      	str	r3, [sp, #24]
    event_head = &e;
 80043ee:	a801      	add	r0, sp, #4
 80043f0:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
 80043f2:	f7ff ff07 	bl	8004204 <event_send_core>
    event_head = e.prev;
 80043f6:	9b06      	ldr	r3, [sp, #24]
 80043f8:	6023      	str	r3, [r4, #0]
}
 80043fa:	b008      	add	sp, #32
 80043fc:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 80043fe:	2001      	movs	r0, #1
}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	200025c8 	.word	0x200025c8

08004408 <lv_event_get_target>:
}
 8004408:	6800      	ldr	r0, [r0, #0]
 800440a:	4770      	bx	lr

0800440c <lv_event_get_current_target>:
}
 800440c:	6840      	ldr	r0, [r0, #4]
 800440e:	4770      	bx	lr

08004410 <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 8004410:	7a00      	ldrb	r0, [r0, #8]
}
 8004412:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004416:	4770      	bx	lr

08004418 <lv_event_get_param>:
}
 8004418:	6900      	ldr	r0, [r0, #16]
 800441a:	4770      	bx	lr

0800441c <lv_event_get_user_data>:
}
 800441c:	68c0      	ldr	r0, [r0, #12]
 800441e:	4770      	bx	lr

08004420 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8004420:	4b08      	ldr	r3, [pc, #32]	; (8004444 <_lv_event_mark_deleted+0x24>)
 8004422:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8004424:	b93b      	cbnz	r3, 8004436 <_lv_event_mark_deleted+0x16>
}
 8004426:	4770      	bx	lr
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004428:	7e1a      	ldrb	r2, [r3, #24]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8004430:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f7      	beq.n	8004426 <_lv_event_mark_deleted+0x6>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	4282      	cmp	r2, r0
 800443a:	d0f5      	beq.n	8004428 <_lv_event_mark_deleted+0x8>
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4282      	cmp	r2, r0
 8004440:	d1f6      	bne.n	8004430 <_lv_event_mark_deleted+0x10>
 8004442:	e7f1      	b.n	8004428 <_lv_event_mark_deleted+0x8>
 8004444:	200025c8 	.word	0x200025c8

08004448 <lv_obj_add_event_cb>:
{
 8004448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444c:	4604      	mov	r4, r0
 800444e:	460f      	mov	r7, r1
 8004450:	4616      	mov	r6, r2
 8004452:	461d      	mov	r5, r3
    lv_obj_allocate_spec_attr(obj);
 8004454:	f003 f846 	bl	80074e4 <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8004458:	68a3      	ldr	r3, [r4, #8]
 800445a:	7e98      	ldrb	r0, [r3, #26]
 800445c:	1c42      	adds	r2, r0, #1
 800445e:	f362 0005 	bfi	r0, r2, #0, #6
 8004462:	7698      	strb	r0, [r3, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8004464:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                               obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8004468:	f898 001a 	ldrb.w	r0, [r8, #26]
 800446c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8004470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004474:	0081      	lsls	r1, r0, #2
 8004476:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800447a:	f01d fd91 	bl	8021fa0 <lv_mem_realloc>
 800447e:	f8c8 000c 	str.w	r0, [r8, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8004482:	68a3      	ldr	r3, [r4, #8]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	b352      	cbz	r2, 80044de <lv_obj_add_event_cb+0x96>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8004488:	7e9b      	ldrb	r3, [r3, #26]
 800448a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004496:	f843 7c0c 	str.w	r7, [r3, #-12]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 800449a:	68a2      	ldr	r2, [r4, #8]
 800449c:	7e93      	ldrb	r3, [r2, #26]
 800449e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a2:	68d2      	ldr	r2, [r2, #12]
 80044a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80044ac:	f803 6c04 	strb.w	r6, [r3, #-4]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 80044b0:	68a2      	ldr	r2, [r4, #8]
 80044b2:	7e93      	ldrb	r3, [r2, #26]
 80044b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b8:	68d2      	ldr	r2, [r2, #12]
 80044ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80044c2:	f843 5c08 	str.w	r5, [r3, #-8]
    return &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
 80044c6:	68a2      	ldr	r2, [r4, #8]
 80044c8:	7e93      	ldrb	r3, [r2, #26]
 80044ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	3b0c      	subs	r3, #12
 80044d6:	68d0      	ldr	r0, [r2, #12]
}
 80044d8:	4418      	add	r0, r3
 80044da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 80044de:	e7fe      	b.n	80044de <lv_obj_add_event_cb+0x96>

080044e0 <lv_event_get_indev>:
       e->code == LV_EVENT_DEFOCUSED ||
 80044e0:	7a03      	ldrb	r3, [r0, #8]
 80044e2:	3b01      	subs	r3, #1
    if(e->code == LV_EVENT_PRESSED ||
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b0f      	cmp	r3, #15
    return e->param;
 80044e8:	bf94      	ite	ls
 80044ea:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 80044ec:	2000      	movhi	r0, #0
}
 80044ee:	4770      	bx	lr

080044f0 <lv_event_get_draw_ctx>:
    if(e->code == LV_EVENT_DRAW_MAIN ||
 80044f0:	7a03      	ldrb	r3, [r0, #8]
 80044f2:	3b14      	subs	r3, #20
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b05      	cmp	r3, #5
    return e->param;
 80044f8:	bf94      	ite	ls
 80044fa:	6900      	ldrls	r0, [r0, #16]
        return NULL;
 80044fc:	2000      	movhi	r0, #0
}
 80044fe:	4770      	bx	lr

08004500 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8004500:	7a03      	ldrb	r3, [r0, #8]
 8004502:	2b13      	cmp	r3, #19
 8004504:	d000      	beq.n	8004508 <lv_event_set_ext_draw_size+0x8>
}
 8004506:	4770      	bx	lr
    return e->param;
 8004508:	6902      	ldr	r2, [r0, #16]
        *cur_size = LV_MAX(*cur_size, size);
 800450a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800450e:	4299      	cmp	r1, r3
 8004510:	bfb8      	it	lt
 8004512:	4619      	movlt	r1, r3
 8004514:	8011      	strh	r1, [r2, #0]
}
 8004516:	e7f6      	b.n	8004506 <lv_event_set_ext_draw_size+0x6>

08004518 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	4605      	mov	r5, r0
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800451c:	2000      	movs	r0, #0
 800451e:	f01c fb37 	bl	8020b90 <lv_indev_get_next>
    while(indev) {
 8004522:	b1d8      	cbz	r0, 800455c <get_indev+0x44>
 8004524:	4604      	mov	r4, r0
    lv_indev_t * indev_group = NULL;
 8004526:	2700      	movs	r7, #0
    lv_indev_t * indev_encoder = NULL;
 8004528:	463e      	mov	r6, r7
 800452a:	e004      	b.n	8004536 <get_indev+0x1e>
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
            indev_group = indev;
        }
        indev = lv_indev_get_next(indev);
 800452c:	4620      	mov	r0, r4
 800452e:	f01c fb2f 	bl	8020b90 <lv_indev_get_next>
    while(indev) {
 8004532:	4604      	mov	r4, r0
 8004534:	b160      	cbz	r0, 8004550 <get_indev+0x38>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8004536:	4620      	mov	r0, r4
 8004538:	f000 faf0 	bl	8004b1c <lv_indev_get_type>
        if(indev->group == g) {
 800453c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800453e:	42ab      	cmp	r3, r5
 8004540:	d1f4      	bne.n	800452c <get_indev+0x14>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8004542:	2802      	cmp	r0, #2
 8004544:	d00f      	beq.n	8004566 <get_indev+0x4e>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8004546:	4627      	mov	r7, r4
 8004548:	2804      	cmp	r0, #4
 800454a:	bf08      	it	eq
 800454c:	4626      	moveq	r6, r4
 800454e:	e7ed      	b.n	800452c <get_indev+0x14>
    }

    if(indev_encoder) return indev_encoder;
 8004550:	b10e      	cbz	r6, 8004556 <get_indev+0x3e>
    if(indev_group) return indev_group;

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
}
 8004552:	4630      	mov	r0, r6
 8004554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(indev_group) return indev_group;
 8004556:	b10f      	cbz	r7, 800455c <get_indev+0x44>
 8004558:	463e      	mov	r6, r7
 800455a:	e7fa      	b.n	8004552 <get_indev+0x3a>
    return lv_indev_get_next(NULL);
 800455c:	2000      	movs	r0, #0
 800455e:	f01c fb17 	bl	8020b90 <lv_indev_get_next>
 8004562:	4606      	mov	r6, r0
 8004564:	e7f5      	b.n	8004552 <get_indev+0x3a>
 8004566:	4626      	mov	r6, r4
 8004568:	e7f3      	b.n	8004552 <get_indev+0x3a>

0800456a <focus_next_core>:
{
 800456a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(group->frozen) return focus_changed;
 800456e:	7f03      	ldrb	r3, [r0, #28]
 8004570:	f013 0f01 	tst.w	r3, #1
 8004574:	d16f      	bne.n	8004656 <focus_next_core+0xec>
 8004576:	4607      	mov	r7, r0
 8004578:	468b      	mov	fp, r1
 800457a:	4691      	mov	r9, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 800457c:	68c5      	ldr	r5, [r0, #12]
    bool can_begin           = true;
 800457e:	f04f 0a01 	mov.w	sl, #1
    lv_obj_t ** obj_sentinel = NULL;
 8004582:	2600      	movs	r6, #0
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8004584:	46d0      	mov	r8, sl
        if(obj_next == NULL) {
 8004586:	b1f5      	cbz	r5, 80045c6 <focus_next_core+0x5c>
        if(obj_sentinel == NULL) {
 8004588:	2e00      	cmp	r6, #0
 800458a:	bf08      	it	eq
 800458c:	462e      	moveq	r6, r5
            obj_next = move(&group->obj_ll, obj_next);
 800458e:	4629      	mov	r1, r5
 8004590:	4638      	mov	r0, r7
 8004592:	47c8      	blx	r9
 8004594:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return focus_changed;
 8004596:	42b0      	cmp	r0, r6
 8004598:	d065      	beq.n	8004666 <focus_next_core+0xfc>
        if(obj_next == NULL) continue;
 800459a:	2d00      	cmp	r5, #0
 800459c:	d0f3      	beq.n	8004586 <focus_next_core+0x1c>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 800459e:	6828      	ldr	r0, [r5, #0]
 80045a0:	f002 fd85 	bl	80070ae <lv_obj_get_state>
 80045a4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80045a8:	d1ed      	bne.n	8004586 <focus_next_core+0x1c>
        lv_obj_t * parent = *obj_next;
 80045aa:	682c      	ldr	r4, [r5, #0]
        while(parent) {
 80045ac:	b31c      	cbz	r4, 80045f6 <focus_next_core+0x8c>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 80045ae:	4641      	mov	r1, r8
 80045b0:	4620      	mov	r0, r4
 80045b2:	f002 fd6f 	bl	8007094 <lv_obj_has_flag>
 80045b6:	b9b8      	cbnz	r0, 80045e8 <focus_next_core+0x7e>
            parent = lv_obj_get_parent(parent);
 80045b8:	4620      	mov	r0, r4
 80045ba:	f007 fbb9 	bl	800bd30 <lv_obj_get_parent>
        while(parent) {
 80045be:	4604      	mov	r4, r0
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d1f4      	bne.n	80045ae <focus_next_core+0x44>
 80045c4:	e017      	b.n	80045f6 <focus_next_core+0x8c>
            if(group->wrap || obj_sentinel == NULL) {
 80045c6:	7f3b      	ldrb	r3, [r7, #28]
 80045c8:	f013 0f08 	tst.w	r3, #8
 80045cc:	d101      	bne.n	80045d2 <focus_next_core+0x68>
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	d146      	bne.n	8004660 <focus_next_core+0xf6>
                if(!can_begin) return focus_changed;
 80045d2:	f1ba 0f00 	cmp.w	sl, #0
 80045d6:	d040      	beq.n	800465a <focus_next_core+0xf0>
                obj_next  = begin(&group->obj_ll);
 80045d8:	4638      	mov	r0, r7
 80045da:	47d8      	blx	fp
 80045dc:	4605      	mov	r5, r0
        if(obj_sentinel == NULL) {
 80045de:	2e00      	cmp	r6, #0
 80045e0:	d04d      	beq.n	800467e <focus_next_core+0x114>
                can_begin = false;
 80045e2:	f04f 0a00 	mov.w	sl, #0
 80045e6:	e7d8      	b.n	800459a <focus_next_core+0x30>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 80045e8:	b12c      	cbz	r4, 80045f6 <focus_next_core+0x8c>
 80045ea:	4641      	mov	r1, r8
 80045ec:	4620      	mov	r0, r4
 80045ee:	f002 fd51 	bl	8007094 <lv_obj_has_flag>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d1c7      	bne.n	8004586 <focus_next_core+0x1c>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	42ab      	cmp	r3, r5
 80045fa:	d037      	beq.n	800466c <focus_next_core+0x102>
    if(group->obj_focus) {
 80045fc:	b18b      	cbz	r3, 8004622 <focus_next_core+0xb8>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 80045fe:	681c      	ldr	r4, [r3, #0]
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff ff89 	bl	8004518 <get_indev>
 8004606:	4602      	mov	r2, r0
 8004608:	210f      	movs	r1, #15
 800460a:	4620      	mov	r0, r4
 800460c:	f7ff feda 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8004610:	2801      	cmp	r0, #1
 8004612:	d002      	beq.n	800461a <focus_next_core+0xb0>
 8004614:	f04f 0a00 	mov.w	sl, #0
 8004618:	e01f      	b.n	800465a <focus_next_core+0xf0>
        lv_obj_invalidate(*group->obj_focus);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f004 f80d 	bl	800863c <lv_obj_invalidate>
    group->obj_focus = obj_next;
 8004622:	60fd      	str	r5, [r7, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8004624:	682c      	ldr	r4, [r5, #0]
 8004626:	4638      	mov	r0, r7
 8004628:	f7ff ff76 	bl	8004518 <get_indev>
 800462c:	4602      	mov	r2, r0
 800462e:	210e      	movs	r1, #14
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff fec7 	bl	80043c4 <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 8004636:	2801      	cmp	r0, #1
 8004638:	d002      	beq.n	8004640 <focus_next_core+0xd6>
 800463a:	f04f 0a00 	mov.w	sl, #0
 800463e:	e00c      	b.n	800465a <focus_next_core+0xf0>
    lv_obj_invalidate(*group->obj_focus);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	f003 fffa 	bl	800863c <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	b193      	cbz	r3, 8004672 <focus_next_core+0x108>
 800464c:	4638      	mov	r0, r7
 800464e:	4798      	blx	r3
    return focus_changed;
 8004650:	f04f 0a01 	mov.w	sl, #1
 8004654:	e001      	b.n	800465a <focus_next_core+0xf0>
    if(group->frozen) return focus_changed;
 8004656:	f04f 0a00 	mov.w	sl, #0
}
 800465a:	4650      	mov	r0, sl
 800465c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return focus_changed;
 8004660:	f04f 0a00 	mov.w	sl, #0
 8004664:	e7f9      	b.n	800465a <focus_next_core+0xf0>
            if(obj_next == obj_sentinel) return focus_changed;
 8004666:	f04f 0a00 	mov.w	sl, #0
 800466a:	e7f6      	b.n	800465a <focus_next_core+0xf0>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 800466c:	f04f 0a00 	mov.w	sl, #0
 8004670:	e7f3      	b.n	800465a <focus_next_core+0xf0>
    return focus_changed;
 8004672:	f04f 0a01 	mov.w	sl, #1
 8004676:	e7f0      	b.n	800465a <focus_next_core+0xf0>
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8004678:	f04f 0a00 	mov.w	sl, #0
 800467c:	e7ed      	b.n	800465a <focus_next_core+0xf0>
 800467e:	2800      	cmp	r0, #0
 8004680:	d0fa      	beq.n	8004678 <focus_next_core+0x10e>
                obj_next  = begin(&group->obj_ll);
 8004682:	4606      	mov	r6, r0
                can_begin = false;
 8004684:	f04f 0a00 	mov.w	sl, #0
 8004688:	e789      	b.n	800459e <focus_next_core+0x34>
	...

0800468c <_lv_group_init>:
{
 800468c:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 800468e:	2120      	movs	r1, #32
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <_lv_group_init+0xc>)
 8004692:	f01d fa8c 	bl	8021bae <_lv_ll_init>
}
 8004696:	bd08      	pop	{r3, pc}
 8004698:	20002918 	.word	0x20002918

0800469c <lv_group_get_default>:
}
 800469c:	4b01      	ldr	r3, [pc, #4]	; (80046a4 <lv_group_get_default+0x8>)
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	200025cc 	.word	0x200025cc

080046a8 <lv_group_focus_next>:
{
 80046a8:	b510      	push	{r4, lr}
 80046aa:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 80046ac:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <lv_group_focus_next+0x1c>)
 80046ae:	4906      	ldr	r1, [pc, #24]	; (80046c8 <lv_group_focus_next+0x20>)
 80046b0:	f7ff ff5b 	bl	800456a <focus_next_core>
    if(group->edge_cb) {
 80046b4:	6963      	ldr	r3, [r4, #20]
 80046b6:	b11b      	cbz	r3, 80046c0 <lv_group_focus_next+0x18>
        if(!focus_changed)
 80046b8:	b910      	cbnz	r0, 80046c0 <lv_group_focus_next+0x18>
            group->edge_cb(group, true);
 80046ba:	2101      	movs	r1, #1
 80046bc:	4620      	mov	r0, r4
 80046be:	4798      	blx	r3
}
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	bf00      	nop
 80046c4:	08021cd1 	.word	0x08021cd1
 80046c8:	08021cc1 	.word	0x08021cc1

080046cc <lv_group_focus_prev>:
{
 80046cc:	b510      	push	{r4, lr}
 80046ce:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 80046d0:	4a05      	ldr	r2, [pc, #20]	; (80046e8 <lv_group_focus_prev+0x1c>)
 80046d2:	4906      	ldr	r1, [pc, #24]	; (80046ec <lv_group_focus_prev+0x20>)
 80046d4:	f7ff ff49 	bl	800456a <focus_next_core>
    if(group->edge_cb) {
 80046d8:	6963      	ldr	r3, [r4, #20]
 80046da:	b11b      	cbz	r3, 80046e4 <lv_group_focus_prev+0x18>
        if(!focus_changed)
 80046dc:	b910      	cbnz	r0, 80046e4 <lv_group_focus_prev+0x18>
            group->edge_cb(group, false);
 80046de:	2100      	movs	r1, #0
 80046e0:	4620      	mov	r0, r4
 80046e2:	4798      	blx	r3
}
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	bf00      	nop
 80046e8:	08021cd9 	.word	0x08021cd9
 80046ec:	08021cc9 	.word	0x08021cc9

080046f0 <lv_group_refocus>:
{
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 80046f4:	7f03      	ldrb	r3, [r0, #28]
 80046f6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 80046fa:	f043 0308 	orr.w	r3, r3, #8
 80046fe:	7703      	strb	r3, [r0, #28]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8004700:	f013 0f04 	tst.w	r3, #4
 8004704:	d106      	bne.n	8004714 <lv_group_refocus+0x24>
        lv_group_focus_next(g);
 8004706:	f7ff ffcf 	bl	80046a8 <lv_group_focus_next>
    g->wrap = temp_wrap;
 800470a:	7f23      	ldrb	r3, [r4, #28]
 800470c:	f365 03c3 	bfi	r3, r5, #3, #1
 8004710:	7723      	strb	r3, [r4, #28]
}
 8004712:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8004714:	f7ff ffda 	bl	80046cc <lv_group_focus_prev>
 8004718:	e7f7      	b.n	800470a <lv_group_refocus+0x1a>

0800471a <lv_group_remove_obj>:
{
 800471a:	b570      	push	{r4, r5, r6, lr}
 800471c:	4605      	mov	r5, r0
    lv_group_t * g = lv_obj_get_group(obj);
 800471e:	f002 fcce 	bl	80070be <lv_obj_get_group>
    if(g == NULL) return;
 8004722:	b1a0      	cbz	r0, 800474e <lv_group_remove_obj+0x34>
 8004724:	4606      	mov	r6, r0
    if(g->obj_focus && *g->obj_focus == obj) {
 8004726:	68c3      	ldr	r3, [r0, #12]
 8004728:	b113      	cbz	r3, 8004730 <lv_group_remove_obj+0x16>
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	42ab      	cmp	r3, r5
 800472e:	d00f      	beq.n	8004750 <lv_group_remove_obj+0x36>
    _LV_LL_READ(&g->obj_ll, i) {
 8004730:	4630      	mov	r0, r6
 8004732:	f01d fac5 	bl	8021cc0 <_lv_ll_get_head>
 8004736:	4604      	mov	r4, r0
 8004738:	b148      	cbz	r0, 800474e <lv_group_remove_obj+0x34>
        if(*i == obj) {
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	42ab      	cmp	r3, r5
 800473e:	d031      	beq.n	80047a4 <lv_group_remove_obj+0x8a>
    _LV_LL_READ(&g->obj_ll, i) {
 8004740:	4621      	mov	r1, r4
 8004742:	4630      	mov	r0, r6
 8004744:	f01d fac4 	bl	8021cd0 <_lv_ll_get_next>
 8004748:	4604      	mov	r4, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	d1f5      	bne.n	800473a <lv_group_remove_obj+0x20>
}
 800474e:	bd70      	pop	{r4, r5, r6, pc}
        if(g->frozen) g->frozen = 0;
 8004750:	7f03      	ldrb	r3, [r0, #28]
 8004752:	f013 0f01 	tst.w	r3, #1
 8004756:	d003      	beq.n	8004760 <lv_group_remove_obj+0x46>
 8004758:	7f03      	ldrb	r3, [r0, #28]
 800475a:	f36f 0300 	bfc	r3, #0, #1
 800475e:	7703      	strb	r3, [r0, #28]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8004760:	4630      	mov	r0, r6
 8004762:	f01d faad 	bl	8021cc0 <_lv_ll_get_head>
 8004766:	68f3      	ldr	r3, [r6, #12]
 8004768:	4283      	cmp	r3, r0
 800476a:	d00b      	beq.n	8004784 <lv_group_remove_obj+0x6a>
            lv_group_refocus(g);
 800476c:	4630      	mov	r0, r6
 800476e:	f7ff ffbf 	bl	80046f0 <lv_group_refocus>
    if(g->obj_focus && *g->obj_focus == obj) {
 8004772:	68f3      	ldr	r3, [r6, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0db      	beq.n	8004730 <lv_group_remove_obj+0x16>
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	42ab      	cmp	r3, r5
        g->obj_focus = NULL;
 800477c:	bf04      	itt	eq
 800477e:	2300      	moveq	r3, #0
 8004780:	60f3      	streq	r3, [r6, #12]
 8004782:	e7d5      	b.n	8004730 <lv_group_remove_obj+0x16>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8004784:	4630      	mov	r0, r6
 8004786:	f01d fa9f 	bl	8021cc8 <_lv_ll_get_tail>
 800478a:	68f3      	ldr	r3, [r6, #12]
 800478c:	4283      	cmp	r3, r0
 800478e:	d1ed      	bne.n	800476c <lv_group_remove_obj+0x52>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8004790:	681c      	ldr	r4, [r3, #0]
 8004792:	4630      	mov	r0, r6
 8004794:	f7ff fec0 	bl	8004518 <get_indev>
 8004798:	4602      	mov	r2, r0
 800479a:	210f      	movs	r1, #15
 800479c:	4620      	mov	r0, r4
 800479e:	f7ff fe11 	bl	80043c4 <lv_event_send>
 80047a2:	e7e6      	b.n	8004772 <lv_group_remove_obj+0x58>
            _lv_ll_remove(&g->obj_ll, i);
 80047a4:	4621      	mov	r1, r4
 80047a6:	4630      	mov	r0, r6
 80047a8:	f01d fa47 	bl	8021c3a <_lv_ll_remove>
            lv_mem_free(i);
 80047ac:	4620      	mov	r0, r4
 80047ae:	f01d fbdb 	bl	8021f68 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 80047b2:	68ab      	ldr	r3, [r5, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ca      	beq.n	800474e <lv_group_remove_obj+0x34>
 80047b8:	2200      	movs	r2, #0
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	e7c7      	b.n	800474e <lv_group_remove_obj+0x34>

080047be <lv_group_add_obj>:
    if(group == NULL) return;
 80047be:	2800      	cmp	r0, #0
 80047c0:	d03a      	beq.n	8004838 <lv_group_add_obj+0x7a>
{
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	460c      	mov	r4, r1
 80047c6:	4605      	mov	r5, r0
    lv_group_remove_obj(obj);
 80047c8:	4608      	mov	r0, r1
 80047ca:	f7ff ffa6 	bl	800471a <lv_group_remove_obj>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 80047ce:	4628      	mov	r0, r5
 80047d0:	f01d fa76 	bl	8021cc0 <_lv_ll_get_head>
 80047d4:	4601      	mov	r1, r0
 80047d6:	b140      	cbz	r0, 80047ea <lv_group_add_obj+0x2c>
        if((*obj_i) == obj) {
 80047d8:	680b      	ldr	r3, [r1, #0]
 80047da:	42a3      	cmp	r3, r4
 80047dc:	d01d      	beq.n	800481a <lv_group_add_obj+0x5c>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 80047de:	4628      	mov	r0, r5
 80047e0:	f01d fa76 	bl	8021cd0 <_lv_ll_get_next>
 80047e4:	4601      	mov	r1, r0
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d1f6      	bne.n	80047d8 <lv_group_add_obj+0x1a>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 80047ea:	4620      	mov	r0, r4
 80047ec:	f002 fc67 	bl	80070be <lv_obj_get_group>
    if(group_cur) {
 80047f0:	b1b0      	cbz	r0, 8004820 <lv_group_add_obj+0x62>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	b11b      	cbz	r3, 8004800 <lv_group_add_obj+0x42>
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	42a3      	cmp	r3, r4
 80047fe:	d00d      	beq.n	800481c <lv_group_add_obj+0x5e>
    obj->spec_attr->group_p = group;
 8004800:	68a3      	ldr	r3, [r4, #8]
 8004802:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8004804:	4628      	mov	r0, r5
 8004806:	f01d f9f9 	bl	8021bfc <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 800480a:	4606      	mov	r6, r0
 800480c:	b178      	cbz	r0, 800482e <lv_group_add_obj+0x70>
    *next = obj;
 800480e:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8004810:	4628      	mov	r0, r5
 8004812:	f01d fa55 	bl	8021cc0 <_lv_ll_get_head>
 8004816:	4286      	cmp	r6, r0
 8004818:	d00a      	beq.n	8004830 <lv_group_add_obj+0x72>
}
 800481a:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(group_cur);
 800481c:	f7ff ff68 	bl	80046f0 <lv_group_refocus>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 8004820:	68a3      	ldr	r3, [r4, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ec      	bne.n	8004800 <lv_group_add_obj+0x42>
 8004826:	4620      	mov	r0, r4
 8004828:	f002 fe5c 	bl	80074e4 <lv_obj_allocate_spec_attr>
 800482c:	e7e8      	b.n	8004800 <lv_group_add_obj+0x42>
    LV_ASSERT_MALLOC(next);
 800482e:	e7fe      	b.n	800482e <lv_group_add_obj+0x70>
        lv_group_refocus(group);
 8004830:	4628      	mov	r0, r5
 8004832:	f7ff ff5d 	bl	80046f0 <lv_group_refocus>
    LV_LOG_TRACE("finished");
 8004836:	e7f0      	b.n	800481a <lv_group_add_obj+0x5c>
 8004838:	4770      	bx	lr

0800483a <lv_group_get_focused>:
    if(!group) return NULL;
 800483a:	b118      	cbz	r0, 8004844 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
 800483c:	68c0      	ldr	r0, [r0, #12]
 800483e:	b108      	cbz	r0, 8004844 <lv_group_get_focused+0xa>
    return *group->obj_focus;
 8004840:	6800      	ldr	r0, [r0, #0]
 8004842:	4770      	bx	lr
}
 8004844:	4770      	bx	lr

08004846 <lv_group_send_data>:
{
 8004846:	b510      	push	{r4, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
 800484c:	f7ff fff5 	bl	800483a <lv_group_get_focused>
    if(act == NULL) return LV_RES_OK;
 8004850:	b168      	cbz	r0, 800486e <lv_group_send_data+0x28>
 8004852:	4604      	mov	r4, r0
    if(lv_obj_has_state(act, LV_STATE_DISABLED)) return LV_RES_OK;
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	f002 fc2c 	bl	80070b2 <lv_obj_has_state>
 800485a:	b110      	cbz	r0, 8004862 <lv_group_send_data+0x1c>
 800485c:	2001      	movs	r0, #1
}
 800485e:	b002      	add	sp, #8
 8004860:	bd10      	pop	{r4, pc}
    return lv_event_send(act, LV_EVENT_KEY, &c);
 8004862:	aa01      	add	r2, sp, #4
 8004864:	210d      	movs	r1, #13
 8004866:	4620      	mov	r0, r4
 8004868:	f7ff fdac 	bl	80043c4 <lv_event_send>
 800486c:	e7f7      	b.n	800485e <lv_group_send_data+0x18>
    if(act == NULL) return LV_RES_OK;
 800486e:	2001      	movs	r0, #1
 8004870:	e7f5      	b.n	800485e <lv_group_send_data+0x18>

08004872 <lv_group_set_editing>:
    if(group == NULL) return;
 8004872:	b1f8      	cbz	r0, 80048b4 <lv_group_set_editing+0x42>
{
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8004878:	7f03      	ldrb	r3, [r0, #28]
 800487a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800487e:	428b      	cmp	r3, r1
 8004880:	d013      	beq.n	80048aa <lv_group_set_editing+0x38>
    group->editing     = en_val;
 8004882:	7f03      	ldrb	r3, [r0, #28]
 8004884:	f361 0341 	bfi	r3, r1, #1, #1
 8004888:	7703      	strb	r3, [r0, #28]
    lv_obj_t * focused = lv_group_get_focused(group);
 800488a:	f7ff ffd6 	bl	800483a <lv_group_get_focused>
    if(focused) {
 800488e:	4605      	mov	r5, r0
 8004890:	b158      	cbz	r0, 80048aa <lv_group_set_editing+0x38>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8004892:	68e3      	ldr	r3, [r4, #12]
 8004894:	681e      	ldr	r6, [r3, #0]
 8004896:	4620      	mov	r0, r4
 8004898:	f7ff fe3e 	bl	8004518 <get_indev>
 800489c:	4602      	mov	r2, r0
 800489e:	210e      	movs	r1, #14
 80048a0:	4630      	mov	r0, r6
 80048a2:	f7ff fd8f 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return;
 80048a6:	2801      	cmp	r0, #1
 80048a8:	d000      	beq.n	80048ac <lv_group_set_editing+0x3a>
}
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_invalidate(focused);
 80048ac:	4628      	mov	r0, r5
 80048ae:	f003 fec5 	bl	800863c <lv_obj_invalidate>
 80048b2:	e7fa      	b.n	80048aa <lv_group_set_editing+0x38>
 80048b4:	4770      	bx	lr

080048b6 <lv_group_focus_obj>:
    if(obj == NULL) return;
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d047      	beq.n	800494a <lv_group_focus_obj+0x94>
{
 80048ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048bc:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 80048be:	f002 fbfe 	bl	80070be <lv_obj_get_group>
    if(g == NULL) return;
 80048c2:	4605      	mov	r5, r0
 80048c4:	b118      	cbz	r0, 80048ce <lv_group_focus_obj+0x18>
    if(g->frozen != 0) return;
 80048c6:	7f03      	ldrb	r3, [r0, #28]
 80048c8:	f013 0f01 	tst.w	r3, #1
 80048cc:	d000      	beq.n	80048d0 <lv_group_focus_obj+0x1a>
}
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_group_set_editing(g, false);
 80048d0:	2100      	movs	r1, #0
 80048d2:	f7ff ffce 	bl	8004872 <lv_group_set_editing>
    _LV_LL_READ(&g->obj_ll, i) {
 80048d6:	4628      	mov	r0, r5
 80048d8:	f01d f9f2 	bl	8021cc0 <_lv_ll_get_head>
 80048dc:	4604      	mov	r4, r0
 80048de:	2800      	cmp	r0, #0
 80048e0:	d0f5      	beq.n	80048ce <lv_group_focus_obj+0x18>
        if(*i == obj) {
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	42b3      	cmp	r3, r6
 80048e6:	d007      	beq.n	80048f8 <lv_group_focus_obj+0x42>
    _LV_LL_READ(&g->obj_ll, i) {
 80048e8:	4621      	mov	r1, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	f01d f9f0 	bl	8021cd0 <_lv_ll_get_next>
 80048f0:	4604      	mov	r4, r0
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d1f5      	bne.n	80048e2 <lv_group_focus_obj+0x2c>
 80048f6:	e7ea      	b.n	80048ce <lv_group_focus_obj+0x18>
            if(g->obj_focus != NULL && obj != *g->obj_focus) {  /*Do not defocus if the same object needs to be focused again*/
 80048f8:	68eb      	ldr	r3, [r5, #12]
 80048fa:	b183      	cbz	r3, 800491e <lv_group_focus_obj+0x68>
 80048fc:	681f      	ldr	r7, [r3, #0]
 80048fe:	42b7      	cmp	r7, r6
 8004900:	d00d      	beq.n	800491e <lv_group_focus_obj+0x68>
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8004902:	4628      	mov	r0, r5
 8004904:	f7ff fe08 	bl	8004518 <get_indev>
 8004908:	4602      	mov	r2, r0
 800490a:	210f      	movs	r1, #15
 800490c:	4638      	mov	r0, r7
 800490e:	f7ff fd59 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 8004912:	2801      	cmp	r0, #1
 8004914:	d1db      	bne.n	80048ce <lv_group_focus_obj+0x18>
                lv_obj_invalidate(*g->obj_focus);
 8004916:	68eb      	ldr	r3, [r5, #12]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	f003 fe8f 	bl	800863c <lv_obj_invalidate>
            g->obj_focus = i;
 800491e:	60ec      	str	r4, [r5, #12]
                if(g->focus_cb) g->focus_cb(g);
 8004920:	692b      	ldr	r3, [r5, #16]
 8004922:	b10b      	cbz	r3, 8004928 <lv_group_focus_obj+0x72>
 8004924:	4628      	mov	r0, r5
 8004926:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, get_indev(g));
 8004928:	68eb      	ldr	r3, [r5, #12]
 800492a:	681c      	ldr	r4, [r3, #0]
 800492c:	4628      	mov	r0, r5
 800492e:	f7ff fdf3 	bl	8004518 <get_indev>
 8004932:	4602      	mov	r2, r0
 8004934:	210e      	movs	r1, #14
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff fd44 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 800493c:	2801      	cmp	r0, #1
 800493e:	d1c6      	bne.n	80048ce <lv_group_focus_obj+0x18>
                lv_obj_invalidate(*g->obj_focus);
 8004940:	68eb      	ldr	r3, [r5, #12]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	f003 fe7a 	bl	800863c <lv_obj_invalidate>
 8004948:	e7c1      	b.n	80048ce <lv_group_focus_obj+0x18>
 800494a:	4770      	bx	lr

0800494c <lv_group_get_editing>:
    if(!group) return false;
 800494c:	b118      	cbz	r0, 8004956 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 800494e:	7f00      	ldrb	r0, [r0, #28]
 8004950:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004954:	4770      	bx	lr
    if(!group) return false;
 8004956:	2000      	movs	r0, #0
}
 8004958:	4770      	bx	lr

0800495a <lv_group_get_obj_count>:
{
 800495a:	b508      	push	{r3, lr}
    return _lv_ll_get_len(&group->obj_ll);
 800495c:	f01d f9bf 	bl	8021cde <_lv_ll_get_len>
}
 8004960:	bd08      	pop	{r3, pc}
	...

08004964 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
 8004964:	7943      	ldrb	r3, [r0, #5]
 8004966:	f013 0f02 	tst.w	r3, #2
 800496a:	d01b      	beq.n	80049a4 <indev_proc_reset_query_handler+0x40>
        indev->proc.types.pointer.act_obj           = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	6283      	str	r3, [r0, #40]	; 0x28
        indev->proc.types.pointer.last_obj          = NULL;
 8004970:	62c3      	str	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.scroll_obj          = NULL;
 8004972:	6303      	str	r3, [r0, #48]	; 0x30
        indev->proc.long_pr_sent                    = 0;
 8004974:	7942      	ldrb	r2, [r0, #5]
        indev->proc.pr_timestamp                    = 0;
 8004976:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
 8004978:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.scroll_sum.x        = 0;
 800497a:	8383      	strh	r3, [r0, #28]
        indev->proc.types.pointer.scroll_sum.y        = 0;
 800497c:	83c3      	strh	r3, [r0, #30]
        indev->proc.types.pointer.scroll_dir = LV_DIR_NONE;
 800497e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
 8004982:	f363 0103 	bfi	r1, r3, #0, #4
 8004986:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
        indev->proc.types.pointer.scroll_throw_vect.x = 0;
 800498a:	8403      	strh	r3, [r0, #32]
        indev->proc.types.pointer.scroll_throw_vect.y = 0;
 800498c:	8443      	strh	r3, [r0, #34]	; 0x22
        indev->proc.types.pointer.gesture_sum.x     = 0;
 800498e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        indev->proc.types.pointer.gesture_sum.y     = 0;
 8004992:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.reset_query                     = 0;
 8004996:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800499a:	f363 0241 	bfi	r2, r3, #1, #1
 800499e:	7142      	strb	r2, [r0, #5]
        indev_obj_act                               = NULL;
 80049a0:	4a01      	ldr	r2, [pc, #4]	; (80049a8 <indev_proc_reset_query_handler+0x44>)
 80049a2:	6013      	str	r3, [r2, #0]
    }
}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	200025d4 	.word	0x200025d4

080049ac <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(_lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
 80049ac:	7840      	ldrb	r0, [r0, #1]
 80049ae:	f010 0f02 	tst.w	r0, #2
 80049b2:	d002      	beq.n	80049ba <indev_reset_check+0xe>
        indev_obj_act = NULL;
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <indev_reset_check+0x14>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
 80049ba:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80049be:	4770      	bx	lr
 80049c0:	200025d4 	.word	0x200025d4

080049c4 <indev_proc_release>:
{
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	b083      	sub	sp, #12
 80049ca:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
 80049cc:	7843      	ldrb	r3, [r0, #1]
 80049ce:	f013 0f08 	tst.w	r3, #8
 80049d2:	d158      	bne.n	8004a86 <indev_proc_release+0xc2>
    indev_obj_act = proc->types.pointer.act_obj;
 80049d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80049d6:	4b4c      	ldr	r3, [pc, #304]	; (8004b08 <indev_proc_release+0x144>)
 80049d8:	6018      	str	r0, [r3, #0]
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 80049da:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    if(indev_obj_act) {
 80049dc:	2800      	cmp	r0, #0
 80049de:	d068      	beq.n	8004ab2 <indev_proc_release+0xee>
        lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 80049e0:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <indev_proc_release+0x148>)
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	2108      	movs	r1, #8
 80049e6:	f7ff fced 	bl	80043c4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80049ea:	4620      	mov	r0, r4
 80049ec:	f7ff ffde 	bl	80049ac <indev_reset_check>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d165      	bne.n	8004ac0 <indev_proc_release+0xfc>
        if(scroll_obj == NULL) {
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d066      	beq.n	8004ac6 <indev_proc_release+0x102>
        proc->types.pointer.act_obj = NULL;
 80049f8:	2600      	movs	r6, #0
 80049fa:	6266      	str	r6, [r4, #36]	; 0x24
        proc->pr_timestamp          = 0;
 80049fc:	6466      	str	r6, [r4, #68]	; 0x44
        proc->longpr_rep_timestamp  = 0;
 80049fe:	64a6      	str	r6, [r4, #72]	; 0x48
            lv_point_t pivot = { 0, 0 };
 8004a00:	f8ad 6004 	strh.w	r6, [sp, #4]
 8004a04:	f8ad 6006 	strh.w	r6, [sp, #6]
            int16_t zoom = 256;
 8004a08:	f44f 7780 	mov.w	r7, #256	; 0x100
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_transform_angle(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8004a0c:	f04f 0b6d 	mov.w	fp, #109	; 0x6d
 8004a10:	46b0      	mov	r8, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8004a12:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8004a16:	465a      	mov	r2, fp
 8004a18:	4641      	mov	r1, r8
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f006 fa46 	bl	800aeac <lv_obj_get_style_prop>
                angle += lv_obj_get_style_transform_angle(parent, 0);
 8004a20:	4406      	add	r6, r0
 8004a22:	fa1f f986 	uxth.w	r9, r6
 8004a26:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8004a28:	4652      	mov	r2, sl
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f006 fa3d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004a32:	b200      	sxth	r0, r0
                zoom *= (lv_obj_get_style_transform_zoom(parent, 0) / 256);
 8004a34:	2800      	cmp	r0, #0
 8004a36:	bfb8      	it	lt
 8004a38:	30ff      	addlt	r0, #255	; 0xff
 8004a3a:	1200      	asrs	r0, r0, #8
 8004a3c:	fb00 f707 	mul.w	r7, r0, r7
 8004a40:	b23f      	sxth	r7, r7
                parent = lv_obj_get_parent(parent);
 8004a42:	4628      	mov	r0, r5
 8004a44:	f007 f974 	bl	800bd30 <lv_obj_get_parent>
            while(parent) {
 8004a48:	4605      	mov	r5, r0
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1e3      	bne.n	8004a16 <indev_proc_release+0x52>
            if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 8004a4e:	b916      	cbnz	r6, 8004a56 <indev_proc_release+0x92>
 8004a50:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8004a54:	d02e      	beq.n	8004ab4 <indev_proc_release+0xf0>
                zoom = (256 * 256) / zoom;
 8004a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a5a:	fb93 f7f7 	sdiv	r7, r3, r7
                angle = -angle;
 8004a5e:	f1c9 0900 	rsb	r9, r9, #0
                lv_point_transform(&proc->types.pointer.scroll_throw_vect, angle, zoom, &pivot);
 8004a62:	fa0f f989 	sxth.w	r9, r9
 8004a66:	b23f      	sxth	r7, r7
 8004a68:	ab01      	add	r3, sp, #4
 8004a6a:	463a      	mov	r2, r7
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	f104 001c 	add.w	r0, r4, #28
 8004a72:	f01c fd17 	bl	80214a4 <lv_point_transform>
                lv_point_transform(&proc->types.pointer.scroll_throw_vect_ori, angle, zoom, &pivot);
 8004a76:	ab01      	add	r3, sp, #4
 8004a78:	463a      	mov	r2, r7
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f104 0020 	add.w	r0, r4, #32
 8004a80:	f01c fd10 	bl	80214a4 <lv_point_transform>
    if(scroll_obj) {
 8004a84:	e016      	b.n	8004ab4 <indev_proc_release+0xf0>
        lv_event_send(proc->types.pointer.act_obj, LV_EVENT_PRESS_LOST, indev_act);
 8004a86:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <indev_proc_release+0x148>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	2103      	movs	r1, #3
 8004a8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004a8e:	f7ff fc99 	bl	80043c4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff ff8a 	bl	80049ac <indev_reset_check>
 8004a98:	b990      	cbnz	r0, 8004ac0 <indev_proc_release+0xfc>
        proc->types.pointer.act_obj  = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6263      	str	r3, [r4, #36]	; 0x24
        proc->types.pointer.last_obj = NULL;
 8004a9e:	62a3      	str	r3, [r4, #40]	; 0x28
        proc->pr_timestamp           = 0;
 8004aa0:	6463      	str	r3, [r4, #68]	; 0x44
        proc->longpr_rep_timestamp   = 0;
 8004aa2:	64a3      	str	r3, [r4, #72]	; 0x48
        proc->wait_until_release     = 0;
 8004aa4:	7862      	ldrb	r2, [r4, #1]
 8004aa6:	f363 02c3 	bfi	r2, r3, #3, #1
 8004aaa:	7062      	strb	r2, [r4, #1]
    indev_obj_act = proc->types.pointer.act_obj;
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <indev_proc_release+0x144>)
 8004aae:	6013      	str	r3, [r2, #0]
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8004ab0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    if(scroll_obj) {
 8004ab2:	b12d      	cbz	r5, 8004ac0 <indev_proc_release+0xfc>
        _lv_indev_scroll_throw_handler(proc);
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f001 fcd9 	bl	800646c <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff ff76 	bl	80049ac <indev_reset_check>
}
 8004ac0:	b003      	add	sp, #12
 8004ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(proc->long_pr_sent == 0) {
 8004ac6:	7863      	ldrb	r3, [r4, #1]
 8004ac8:	f013 0f01 	tst.w	r3, #1
 8004acc:	d10b      	bne.n	8004ae6 <indev_proc_release+0x122>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <indev_proc_release+0x148>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <indev_proc_release+0x144>)
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	f7ff fc74 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7ff ff65 	bl	80049ac <indev_reset_check>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d1ec      	bne.n	8004ac0 <indev_proc_release+0xfc>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <indev_proc_release+0x148>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	2107      	movs	r1, #7
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <indev_proc_release+0x144>)
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	f7ff fc68 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004af4:	4620      	mov	r0, r4
 8004af6:	f7ff ff59 	bl	80049ac <indev_reset_check>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d1e0      	bne.n	8004ac0 <indev_proc_release+0xfc>
        proc->types.pointer.act_obj = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	6263      	str	r3, [r4, #36]	; 0x24
        proc->pr_timestamp          = 0;
 8004b02:	6463      	str	r3, [r4, #68]	; 0x44
        proc->longpr_rep_timestamp  = 0;
 8004b04:	64a3      	str	r3, [r4, #72]	; 0x48
    if(scroll_obj) {
 8004b06:	e7db      	b.n	8004ac0 <indev_proc_release+0xfc>
 8004b08:	200025d4 	.word	0x200025d4
 8004b0c:	200025d0 	.word	0x200025d0

08004b10 <lv_indev_get_act>:
}
 8004b10:	4b01      	ldr	r3, [pc, #4]	; (8004b18 <lv_indev_get_act+0x8>)
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	200025d0 	.word	0x200025d0

08004b1c <lv_indev_get_type>:
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8004b1c:	b110      	cbz	r0, 8004b24 <lv_indev_get_type+0x8>
    return indev->driver->type;
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	7818      	ldrb	r0, [r3, #0]
 8004b22:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8004b24:	2000      	movs	r0, #0
}
 8004b26:	4770      	bx	lr

08004b28 <lv_indev_reset>:
{
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	460c      	mov	r4, r1
    if(indev) {
 8004b2c:	b318      	cbz	r0, 8004b76 <lv_indev_reset+0x4e>
 8004b2e:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
 8004b30:	7942      	ldrb	r2, [r0, #5]
 8004b32:	f042 0202 	orr.w	r2, r2, #2
 8004b36:	7142      	strb	r2, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 8004b38:	4a2b      	ldr	r2, [pc, #172]	; (8004be8 <lv_indev_reset+0xc0>)
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	4282      	cmp	r2, r0
 8004b3e:	d006      	beq.n	8004b4e <lv_indev_reset+0x26>
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	7812      	ldrb	r2, [r2, #0]
 8004b44:	3a01      	subs	r2, #1
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	2a01      	cmp	r2, #1
 8004b4a:	d904      	bls.n	8004b56 <lv_indev_reset+0x2e>
}
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
        if(indev_act == indev) indev_obj_act = NULL;
 8004b4e:	4a27      	ldr	r2, [pc, #156]	; (8004bec <lv_indev_reset+0xc4>)
 8004b50:	2100      	movs	r1, #0
 8004b52:	6011      	str	r1, [r2, #0]
 8004b54:	e7f4      	b.n	8004b40 <lv_indev_reset+0x18>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 8004b56:	b1fc      	cbz	r4, 8004b98 <lv_indev_reset+0x70>
 8004b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b5a:	42a2      	cmp	r2, r4
 8004b5c:	d019      	beq.n	8004b92 <lv_indev_reset+0x6a>
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8004b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b60:	42a2      	cmp	r2, r4
 8004b62:	d003      	beq.n	8004b6c <lv_indev_reset+0x44>
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 8004b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b66:	42a2      	cmp	r2, r4
 8004b68:	d1f0      	bne.n	8004b4c <lv_indev_reset+0x24>
 8004b6a:	e018      	b.n	8004b9e <lv_indev_reset+0x76>
                indev->proc.types.pointer.act_obj = NULL;
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 8004b70:	2c00      	cmp	r4, #0
 8004b72:	d1f7      	bne.n	8004b64 <lv_indev_reset+0x3c>
 8004b74:	e013      	b.n	8004b9e <lv_indev_reset+0x76>
        lv_indev_t * i = lv_indev_get_next(NULL);
 8004b76:	2000      	movs	r0, #0
 8004b78:	f01c f80a 	bl	8020b90 <lv_indev_get_next>
        while(i) {
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b120      	cbz	r0, 8004b8a <lv_indev_reset+0x62>
                    i->proc.types.pointer.last_pressed = NULL;
 8004b80:	2500      	movs	r5, #0
 8004b82:	e018      	b.n	8004bb6 <lv_indev_reset+0x8e>
                    i->proc.types.pointer.act_obj = NULL;
 8004b84:	629d      	str	r5, [r3, #40]	; 0x28
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8004b86:	bb44      	cbnz	r4, 8004bda <lv_indev_reset+0xb2>
 8004b88:	e00e      	b.n	8004ba8 <lv_indev_reset+0x80>
        indev_obj_act = NULL;
 8004b8a:	4b18      	ldr	r3, [pc, #96]	; (8004bec <lv_indev_reset+0xc4>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	e7dc      	b.n	8004b4c <lv_indev_reset+0x24>
                indev->proc.types.pointer.last_pressed = NULL;
 8004b92:	2200      	movs	r2, #0
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 8004b96:	e7e2      	b.n	8004b5e <lv_indev_reset+0x36>
                indev->proc.types.pointer.last_pressed = NULL;
 8004b98:	2200      	movs	r2, #0
 8004b9a:	635a      	str	r2, [r3, #52]	; 0x34
                indev->proc.types.pointer.act_obj = NULL;
 8004b9c:	629a      	str	r2, [r3, #40]	; 0x28
                indev->proc.types.pointer.last_obj = NULL;
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ba2:	e7d3      	b.n	8004b4c <lv_indev_reset+0x24>
                    i->proc.types.pointer.last_pressed = NULL;
 8004ba4:	635d      	str	r5, [r3, #52]	; 0x34
                    i->proc.types.pointer.act_obj = NULL;
 8004ba6:	629d      	str	r5, [r3, #40]	; 0x28
                    i->proc.types.pointer.last_obj = NULL;
 8004ba8:	62dd      	str	r5, [r3, #44]	; 0x2c
            i = lv_indev_get_next(i);
 8004baa:	4618      	mov	r0, r3
 8004bac:	f01b fff0 	bl	8020b90 <lv_indev_get_next>
        while(i) {
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d0e9      	beq.n	8004b8a <lv_indev_reset+0x62>
            i->proc.reset_query = 1;
 8004bb6:	795a      	ldrb	r2, [r3, #5]
 8004bb8:	f042 0202 	orr.w	r2, r2, #2
 8004bbc:	715a      	strb	r2, [r3, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	3a01      	subs	r2, #1
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	2a01      	cmp	r2, #1
 8004bc8:	d8ef      	bhi.n	8004baa <lv_indev_reset+0x82>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d0ea      	beq.n	8004ba4 <lv_indev_reset+0x7c>
 8004bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd0:	42a2      	cmp	r2, r4
 8004bd2:	d006      	beq.n	8004be2 <lv_indev_reset+0xba>
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8004bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bd6:	42a2      	cmp	r2, r4
 8004bd8:	d0d4      	beq.n	8004b84 <lv_indev_reset+0x5c>
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	42a2      	cmp	r2, r4
 8004bde:	d1e4      	bne.n	8004baa <lv_indev_reset+0x82>
 8004be0:	e7e2      	b.n	8004ba8 <lv_indev_reset+0x80>
                    i->proc.types.pointer.last_pressed = NULL;
 8004be2:	635d      	str	r5, [r3, #52]	; 0x34
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8004be4:	e7f6      	b.n	8004bd4 <lv_indev_reset+0xac>
 8004be6:	bf00      	nop
 8004be8:	200025d0 	.word	0x200025d0
 8004bec:	200025d4 	.word	0x200025d4

08004bf0 <lv_indev_reset_long_press>:
{
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 8004bf4:	7943      	ldrb	r3, [r0, #5]
 8004bf6:	f36f 0300 	bfc	r3, #0, #1
 8004bfa:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 8004bfc:	f01b fff7 	bl	8020bee <lv_tick_get>
 8004c00:	64e0      	str	r0, [r4, #76]	; 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 8004c02:	f01b fff4 	bl	8020bee <lv_tick_get>
 8004c06:	64a0      	str	r0, [r4, #72]	; 0x48
}
 8004c08:	bd10      	pop	{r4, pc}

08004c0a <lv_indev_get_point>:
    if(indev == NULL) {
 8004c0a:	b150      	cbz	r0, 8004c22 <lv_indev_get_point+0x18>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 8004c0c:	6803      	ldr	r3, [r0, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d008      	beq.n	8004c2a <lv_indev_get_point+0x20>
        point->x = -1;
 8004c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c1c:	800b      	strh	r3, [r1, #0]
        point->y = -1;
 8004c1e:	804b      	strh	r3, [r1, #2]
 8004c20:	4770      	bx	lr
        point->x = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	800b      	strh	r3, [r1, #0]
        point->y = 0;
 8004c26:	804b      	strh	r3, [r1, #2]
        return;
 8004c28:	4770      	bx	lr
        point->x = indev->proc.types.pointer.act_point.x;
 8004c2a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8004c2e:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8004c30:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8004c34:	804b      	strh	r3, [r1, #2]
}
 8004c36:	4770      	bx	lr

08004c38 <lv_indev_get_scroll_dir>:
    if(indev == NULL) return false;
 8004c38:	b160      	cbz	r0, 8004c54 <lv_indev_get_scroll_dir+0x1c>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8004c3a:	6803      	ldr	r3, [r0, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d001      	beq.n	8004c4a <lv_indev_get_scroll_dir+0x12>
 8004c46:	2000      	movs	r0, #0
}
 8004c48:	4770      	bx	lr
    return indev->proc.types.pointer.scroll_dir;
 8004c4a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8004c4e:	f000 000f 	and.w	r0, r0, #15
 8004c52:	4770      	bx	lr
    if(indev == NULL) return false;
 8004c54:	2000      	movs	r0, #0
 8004c56:	4770      	bx	lr

08004c58 <lv_indev_get_scroll_obj>:
    if(indev == NULL) return NULL;
 8004c58:	b148      	cbz	r0, 8004c6e <lv_indev_get_scroll_obj+0x16>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 8004c5a:	6802      	ldr	r2, [r0, #0]
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8004c62:	2a01      	cmp	r2, #1
 8004c64:	d001      	beq.n	8004c6a <lv_indev_get_scroll_obj+0x12>
 8004c66:	2000      	movs	r0, #0
}
 8004c68:	4770      	bx	lr
    return indev->proc.types.pointer.scroll_obj;
 8004c6a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004c6c:	4770      	bx	lr
 8004c6e:	4770      	bx	lr

08004c70 <lv_indev_get_vect>:
    point->x = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 8004c74:	804b      	strh	r3, [r1, #2]
    if(indev == NULL) return;
 8004c76:	b128      	cbz	r0, 8004c84 <lv_indev_get_vect+0x14>
    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 8004c78:	6803      	ldr	r3, [r0, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d000      	beq.n	8004c86 <lv_indev_get_vect+0x16>
}
 8004c84:	4770      	bx	lr
        point->x = indev->proc.types.pointer.vect.x;
 8004c86:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8004c8a:	800b      	strh	r3, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 8004c8c:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8004c90:	804b      	strh	r3, [r1, #2]
 8004c92:	e7f7      	b.n	8004c84 <lv_indev_get_vect+0x14>

08004c94 <lv_indev_wait_release>:
    if(indev == NULL)return;
 8004c94:	b118      	cbz	r0, 8004c9e <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 8004c96:	7943      	ldrb	r3, [r0, #5]
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	7143      	strb	r3, [r0, #5]
}
 8004c9e:	4770      	bx	lr

08004ca0 <lv_indev_get_obj_act>:
}
 8004ca0:	4b01      	ldr	r3, [pc, #4]	; (8004ca8 <lv_indev_get_obj_act+0x8>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	200025d4 	.word	0x200025d4

08004cac <lv_indev_search_obj>:
{
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	460c      	mov	r4, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	f002 f9ed 	bl	8007094 <lv_obj_has_flag>
 8004cba:	bb80      	cbnz	r0, 8004d1e <lv_indev_search_obj+0x72>
    lv_point_t p_trans = *point;
 8004cbc:	6820      	ldr	r0, [r4, #0]
 8004cbe:	9001      	str	r0, [sp, #4]
    lv_obj_transform_point(obj, &p_trans, false, true);
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	a901      	add	r1, sp, #4
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f003 fb62 	bl	8008390 <lv_obj_transform_point>
    bool hit_test_ok = lv_obj_hit_test(obj, &p_trans);
 8004ccc:	a901      	add	r1, sp, #4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f003 ff1b 	bl	8008b0a <lv_obj_hit_test>
 8004cd4:	4606      	mov	r6, r0
    if(_lv_area_is_point_on(&obj->coords, &p_trans, 0) || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	a901      	add	r1, sp, #4
 8004cda:	f105 0014 	add.w	r0, r5, #20
 8004cde:	f01c fa5d 	bl	802119c <_lv_area_is_point_on>
 8004ce2:	b928      	cbnz	r0, 8004cf0 <lv_indev_search_obj+0x44>
 8004ce4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f002 f9d3 	bl	8007094 <lv_obj_has_flag>
 8004cee:	b178      	cbz	r0, 8004d10 <lv_indev_search_obj+0x64>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f007 f836 	bl	800bd62 <lv_obj_get_child_cnt>
        for(i = child_cnt - 1; i >= 0; i--) {
 8004cf6:	1e44      	subs	r4, r0, #1
 8004cf8:	d40a      	bmi.n	8004d10 <lv_indev_search_obj+0x64>
            lv_obj_t * child = obj->spec_attr->children[i];
 8004cfa:	68ab      	ldr	r3, [r5, #8]
 8004cfc:	681b      	ldr	r3, [r3, #0]
            found_p = lv_indev_search_obj(child, &p_trans);
 8004cfe:	a901      	add	r1, sp, #4
 8004d00:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d04:	f7ff ffd2 	bl	8004cac <lv_indev_search_obj>
            if(found_p) return found_p;
 8004d08:	4603      	mov	r3, r0
 8004d0a:	b928      	cbnz	r0, 8004d18 <lv_indev_search_obj+0x6c>
        for(i = child_cnt - 1; i >= 0; i--) {
 8004d0c:	3c01      	subs	r4, #1
 8004d0e:	d5f4      	bpl.n	8004cfa <lv_indev_search_obj+0x4e>
    else return NULL;
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	bf14      	ite	ne
 8004d14:	462b      	movne	r3, r5
 8004d16:	2300      	moveq	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e7fa      	b.n	8004d18 <lv_indev_search_obj+0x6c>
	...

08004d24 <indev_proc_press>:
{
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	4604      	mov	r4, r0
    indev_obj_act = proc->types.pointer.act_obj;
 8004d28:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004d2a:	4ba0      	ldr	r3, [pc, #640]	; (8004fac <indev_proc_press+0x288>)
 8004d2c:	6018      	str	r0, [r3, #0]
    if(proc->wait_until_release != 0) return;
 8004d2e:	7863      	ldrb	r3, [r4, #1]
 8004d30:	f013 0f08 	tst.w	r3, #8
 8004d34:	d135      	bne.n	8004da2 <indev_proc_press+0x7e>
    lv_disp_t * disp = indev_act->driver->disp;
 8004d36:	4b9e      	ldr	r3, [pc, #632]	; (8004fb0 <indev_proc_press+0x28c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691d      	ldr	r5, [r3, #16]
    if(indev_obj_act == NULL) {
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d030      	beq.n	8004da4 <indev_proc_press+0x80>
    else if(proc->types.pointer.scroll_obj == NULL &&
 8004d42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d057      	beq.n	8004df8 <indev_proc_press+0xd4>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8004d48:	88a2      	ldrh	r2, [r4, #4]
 8004d4a:	89a0      	ldrh	r0, [r4, #12]
 8004d4c:	1a12      	subs	r2, r2, r0
 8004d4e:	b210      	sxth	r0, r2
 8004d50:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8004d52:	88e3      	ldrh	r3, [r4, #6]
 8004d54:	89e1      	ldrh	r1, [r4, #14]
 8004d56:	1a5b      	subs	r3, r3, r1
 8004d58:	b219      	sxth	r1, r3
 8004d5a:	82e1      	strh	r1, [r4, #22]
    proc->types.pointer.scroll_throw_vect.x = (proc->types.pointer.scroll_throw_vect.x + proc->types.pointer.vect.x) / 2;
 8004d5c:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
 8004d60:	4402      	add	r2, r0
 8004d62:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8004d66:	1052      	asrs	r2, r2, #1
 8004d68:	83a2      	strh	r2, [r4, #28]
    proc->types.pointer.scroll_throw_vect.y = (proc->types.pointer.scroll_throw_vect.y + proc->types.pointer.vect.y) / 2;
 8004d6a:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8004d6e:	440b      	add	r3, r1
 8004d70:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004d74:	105b      	asrs	r3, r3, #1
 8004d76:	83e3      	strh	r3, [r4, #30]
    proc->types.pointer.scroll_throw_vect_ori = proc->types.pointer.scroll_throw_vect;
 8004d78:	69e3      	ldr	r3, [r4, #28]
 8004d7a:	6223      	str	r3, [r4, #32]
    if(indev_obj_act) {
 8004d7c:	4b8b      	ldr	r3, [pc, #556]	; (8004fac <indev_proc_press+0x288>)
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	b178      	cbz	r0, 8004da2 <indev_proc_press+0x7e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8004d82:	4b8b      	ldr	r3, [pc, #556]	; (8004fb0 <indev_proc_press+0x28c>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	2102      	movs	r1, #2
 8004d88:	f7ff fb1c 	bl	80043c4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f7ff fe0d 	bl	80049ac <indev_reset_check>
 8004d92:	b930      	cbnz	r0, 8004da2 <indev_proc_press+0x7e>
        if(indev_act->proc.wait_until_release) return;
 8004d94:	4b86      	ldr	r3, [pc, #536]	; (8004fb0 <indev_proc_press+0x28c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	795b      	ldrb	r3, [r3, #5]
 8004d9a:	f013 0f08 	tst.w	r3, #8
 8004d9e:	f000 8109 	beq.w	8004fb4 <indev_proc_press+0x290>
}
 8004da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8004da4:	4628      	mov	r0, r5
 8004da6:	f7ff f9dc 	bl	8004162 <lv_disp_get_layer_sys>
 8004daa:	1d26      	adds	r6, r4, #4
 8004dac:	4631      	mov	r1, r6
 8004dae:	f7ff ff7d 	bl	8004cac <lv_indev_search_obj>
 8004db2:	4b7e      	ldr	r3, [pc, #504]	; (8004fac <indev_proc_press+0x288>)
 8004db4:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8004db6:	b160      	cbz	r0, 8004dd2 <indev_proc_press+0xae>
    if(new_obj_searched && proc->types.pointer.last_obj) {
 8004db8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dba:	b323      	cbz	r3, 8004e06 <indev_proc_press+0xe2>
        proc->types.pointer.scroll_throw_vect.x = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	83a3      	strh	r3, [r4, #28]
        proc->types.pointer.scroll_throw_vect.y = 0;
 8004dc0:	83e3      	strh	r3, [r4, #30]
        _lv_indev_scroll_throw_handler(proc);
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f001 fb52 	bl	800646c <_lv_indev_scroll_throw_handler>
        if(indev_reset_check(proc)) return;
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7ff fdef 	bl	80049ac <indev_reset_check>
 8004dce:	b1d0      	cbz	r0, 8004e06 <indev_proc_press+0xe2>
 8004dd0:	e7e7      	b.n	8004da2 <indev_proc_press+0x7e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f7ff f9ba 	bl	800414c <lv_disp_get_layer_top>
 8004dd8:	4631      	mov	r1, r6
 8004dda:	f7ff ff67 	bl	8004cac <lv_indev_search_obj>
 8004dde:	4b73      	ldr	r3, [pc, #460]	; (8004fac <indev_proc_press+0x288>)
 8004de0:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d1e8      	bne.n	8004db8 <indev_proc_press+0x94>
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7ff f99a 	bl	8004120 <lv_disp_get_scr_act>
 8004dec:	4631      	mov	r1, r6
 8004dee:	f7ff ff5d 	bl	8004cac <lv_indev_search_obj>
 8004df2:	4b6e      	ldr	r3, [pc, #440]	; (8004fac <indev_proc_press+0x288>)
 8004df4:	6018      	str	r0, [r3, #0]
 8004df6:	e7df      	b.n	8004db8 <indev_proc_press+0x94>
            lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_PRESS_LOCK) == false) {
 8004df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dfc:	f002 f94a 	bl	8007094 <lv_obj_has_flag>
    else if(proc->types.pointer.scroll_obj == NULL &&
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f000 8081 	beq.w	8004f08 <indev_proc_press+0x1e4>
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8004e06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e08:	4b68      	ldr	r3, [pc, #416]	; (8004fac <indev_proc_press+0x288>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4298      	cmp	r0, r3
 8004e0e:	d09b      	beq.n	8004d48 <indev_proc_press+0x24>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8004e10:	88a3      	ldrh	r3, [r4, #4]
 8004e12:	81a3      	strh	r3, [r4, #12]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8004e14:	88e3      	ldrh	r3, [r4, #6]
 8004e16:	81e3      	strh	r3, [r4, #14]
        if(proc->types.pointer.act_obj != NULL) {
 8004e18:	b148      	cbz	r0, 8004e2e <indev_proc_press+0x10a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, indev_act);
 8004e1a:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <indev_proc_press+0x28c>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	2103      	movs	r1, #3
 8004e20:	f7ff fad0 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004e24:	4620      	mov	r0, r4
 8004e26:	f7ff fdc1 	bl	80049ac <indev_reset_check>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d1b9      	bne.n	8004da2 <indev_proc_press+0x7e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8004e2e:	4b5f      	ldr	r3, [pc, #380]	; (8004fac <indev_proc_press+0x288>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6263      	str	r3, [r4, #36]	; 0x24
        proc->types.pointer.last_obj = indev_obj_act;
 8004e34:	62a3      	str	r3, [r4, #40]	; 0x28
        if(indev_obj_act != NULL) {
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d086      	beq.n	8004d48 <indev_proc_press+0x24>
            proc->pr_timestamp                 = lv_tick_get();
 8004e3a:	f01b fed8 	bl	8020bee <lv_tick_get>
 8004e3e:	6460      	str	r0, [r4, #68]	; 0x44
            proc->long_pr_sent                 = 0;
 8004e40:	7863      	ldrb	r3, [r4, #1]
 8004e42:	f36f 0300 	bfc	r3, #0, #1
 8004e46:	7063      	strb	r3, [r4, #1]
            proc->types.pointer.scroll_sum.x     = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	8323      	strh	r3, [r4, #24]
            proc->types.pointer.scroll_sum.y     = 0;
 8004e4c:	8363      	strh	r3, [r4, #26]
            proc->types.pointer.scroll_dir = LV_DIR_NONE;
 8004e4e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
            proc->types.pointer.gesture_dir = LV_DIR_NONE;
 8004e52:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004e56:	f363 1207 	bfi	r2, r3, #4, #4
 8004e5a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
            proc->types.pointer.gesture_sent   = 0;
 8004e5e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8004e62:	f363 0200 	bfi	r2, r3, #0, #1
 8004e66:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
            proc->types.pointer.gesture_sum.x  = 0;
 8004e6a:	87a3      	strh	r3, [r4, #60]	; 0x3c
            proc->types.pointer.gesture_sum.y  = 0;
 8004e6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
            proc->types.pointer.vect.x         = 0;
 8004e6e:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.vect.y         = 0;
 8004e70:	82e3      	strh	r3, [r4, #22]
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8004e72:	4b4f      	ldr	r3, [pc, #316]	; (8004fb0 <indev_proc_press+0x28c>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	2101      	movs	r1, #1
 8004e78:	4b4c      	ldr	r3, [pc, #304]	; (8004fac <indev_proc_press+0x288>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	f7ff faa2 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004e80:	4620      	mov	r0, r4
 8004e82:	f7ff fd93 	bl	80049ac <indev_reset_check>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d18b      	bne.n	8004da2 <indev_proc_press+0x7e>
            if(indev_act->proc.wait_until_release) return;
 8004e8a:	4b49      	ldr	r3, [pc, #292]	; (8004fb0 <indev_proc_press+0x28c>)
 8004e8c:	681d      	ldr	r5, [r3, #0]
 8004e8e:	796b      	ldrb	r3, [r5, #5]
 8004e90:	f013 0f08 	tst.w	r3, #8
 8004e94:	d185      	bne.n	8004da2 <indev_proc_press+0x7e>
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 8004e96:	2104      	movs	r1, #4
 8004e98:	4b44      	ldr	r3, [pc, #272]	; (8004fac <indev_proc_press+0x288>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	f002 f8fa 	bl	8007094 <lv_obj_has_flag>
 8004ea0:	b358      	cbz	r0, 8004efa <indev_proc_press+0x1d6>
       proc->types.pointer.last_pressed == indev_obj_act) {
 8004ea2:	4b42      	ldr	r3, [pc, #264]	; (8004fac <indev_proc_press+0x288>)
 8004ea4:	6818      	ldr	r0, [r3, #0]
    if(lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_CLICK_FOCUSABLE) == false ||
 8004ea6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004ea8:	4283      	cmp	r3, r0
 8004eaa:	d026      	beq.n	8004efa <indev_proc_press+0x1d6>
            indev_click_focus(&indev_act->proc);
 8004eac:	1d2f      	adds	r7, r5, #4
    lv_group_t * g_act = lv_obj_get_group(indev_obj_act);
 8004eae:	f002 f906 	bl	80070be <lv_obj_get_group>
 8004eb2:	4606      	mov	r6, r0
    lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
 8004eb4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f000 8148 	beq.w	800514c <indev_proc_press+0x428>
 8004ebc:	f002 f8ff 	bl	80070be <lv_obj_get_group>
    if(g_act == g_prev) {
 8004ec0:	4286      	cmp	r6, r0
 8004ec2:	d041      	beq.n	8004f48 <indev_proc_press+0x224>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	f000 8144 	beq.w	8005152 <indev_proc_press+0x42e>
            if(proc->types.pointer.last_pressed) {
 8004eca:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004ecc:	b140      	cbz	r0, 8004ee0 <indev_proc_press+0x1bc>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, indev_act);
 8004ece:	4b38      	ldr	r3, [pc, #224]	; (8004fb0 <indev_proc_press+0x28c>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	f7ff fa76 	bl	80043c4 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7ff fd67 	bl	80049ac <indev_reset_check>
 8004ede:	b960      	cbnz	r0, 8004efa <indev_proc_press+0x1d6>
        if(g_act) {
 8004ee0:	2e00      	cmp	r6, #0
 8004ee2:	d055      	beq.n	8004f90 <indev_proc_press+0x26c>
            lv_group_focus_obj(indev_obj_act);
 8004ee4:	4b31      	ldr	r3, [pc, #196]	; (8004fac <indev_proc_press+0x288>)
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	f7ff fce5 	bl	80048b6 <lv_group_focus_obj>
            if(indev_reset_check(proc)) return;
 8004eec:	4638      	mov	r0, r7
 8004eee:	f7ff fd5d 	bl	80049ac <indev_reset_check>
 8004ef2:	b910      	cbnz	r0, 8004efa <indev_proc_press+0x1d6>
    proc->types.pointer.last_pressed = indev_obj_act;
 8004ef4:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <indev_proc_press+0x288>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	636b      	str	r3, [r5, #52]	; 0x34
            if(indev_reset_check(proc)) return;
 8004efa:	4620      	mov	r0, r4
 8004efc:	f7ff fd56 	bl	80049ac <indev_reset_check>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	f43f af21 	beq.w	8004d48 <indev_proc_press+0x24>
 8004f06:	e74c      	b.n	8004da2 <indev_proc_press+0x7e>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f7ff f92a 	bl	8004162 <lv_disp_get_layer_sys>
 8004f0e:	1d26      	adds	r6, r4, #4
 8004f10:	4631      	mov	r1, r6
 8004f12:	f7ff fecb 	bl	8004cac <lv_indev_search_obj>
 8004f16:	4b25      	ldr	r3, [pc, #148]	; (8004fac <indev_proc_press+0x288>)
 8004f18:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f47f af4c 	bne.w	8004db8 <indev_proc_press+0x94>
 8004f20:	4628      	mov	r0, r5
 8004f22:	f7ff f913 	bl	800414c <lv_disp_get_layer_top>
 8004f26:	4631      	mov	r1, r6
 8004f28:	f7ff fec0 	bl	8004cac <lv_indev_search_obj>
 8004f2c:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <indev_proc_press+0x288>)
 8004f2e:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
 8004f30:	2800      	cmp	r0, #0
 8004f32:	f47f af41 	bne.w	8004db8 <indev_proc_press+0x94>
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7ff f8f2 	bl	8004120 <lv_disp_get_scr_act>
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	f7ff feb5 	bl	8004cac <lv_indev_search_obj>
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <indev_proc_press+0x288>)
 8004f44:	6018      	str	r0, [r3, #0]
 8004f46:	e737      	b.n	8004db8 <indev_proc_press+0x94>
        if(g_act) {
 8004f48:	b148      	cbz	r0, 8004f5e <indev_proc_press+0x23a>
            lv_group_focus_obj(indev_obj_act);
 8004f4a:	4b18      	ldr	r3, [pc, #96]	; (8004fac <indev_proc_press+0x288>)
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f7ff fcb2 	bl	80048b6 <lv_group_focus_obj>
            if(indev_reset_check(proc)) return;
 8004f52:	4638      	mov	r0, r7
 8004f54:	f7ff fd2a 	bl	80049ac <indev_reset_check>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d0cb      	beq.n	8004ef4 <indev_proc_press+0x1d0>
 8004f5c:	e7cd      	b.n	8004efa <indev_proc_press+0x1d6>
            if(proc->types.pointer.last_pressed) {
 8004f5e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004f60:	b148      	cbz	r0, 8004f76 <indev_proc_press+0x252>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <indev_proc_press+0x28c>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	210f      	movs	r1, #15
 8004f68:	f7ff fa2c 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7ff fd1d 	bl	80049ac <indev_reset_check>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d1c1      	bne.n	8004efa <indev_proc_press+0x1d6>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <indev_proc_press+0x28c>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	210e      	movs	r1, #14
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <indev_proc_press+0x288>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	f7ff fa20 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004f84:	4638      	mov	r0, r7
 8004f86:	f7ff fd11 	bl	80049ac <indev_reset_check>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d0b2      	beq.n	8004ef4 <indev_proc_press+0x1d0>
 8004f8e:	e7b4      	b.n	8004efa <indev_proc_press+0x1d6>
            lv_event_send(indev_obj_act, LV_EVENT_FOCUSED, indev_act);
 8004f90:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <indev_proc_press+0x28c>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	210e      	movs	r1, #14
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <indev_proc_press+0x288>)
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	f7ff fa13 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f7ff fd04 	bl	80049ac <indev_reset_check>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d0a5      	beq.n	8004ef4 <indev_proc_press+0x1d0>
 8004fa8:	e7a7      	b.n	8004efa <indev_proc_press+0x1d6>
 8004faa:	bf00      	nop
 8004fac:	200025d4 	.word	0x200025d4
 8004fb0:	200025d0 	.word	0x200025d0
        _lv_indev_scroll_handler(proc);
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f000 ff4d 	bl	8005e54 <_lv_indev_scroll_handler>
        if(indev_reset_check(proc)) return;
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7ff fcf6 	bl	80049ac <indev_reset_check>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f47f aeee 	bne.w	8004da2 <indev_proc_press+0x7e>
    if(proc->types.pointer.scroll_obj) return;
 8004fc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fc8:	b33b      	cbz	r3, 800501a <indev_proc_press+0x2f6>
        if(indev_reset_check(proc)) return;
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f7ff fcee 	bl	80049ac <indev_reset_check>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	f47f aee6 	bne.w	8004da2 <indev_proc_press+0x7e>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 0) {
 8004fd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f aee2 	bne.w	8004da2 <indev_proc_press+0x7e>
 8004fde:	7863      	ldrb	r3, [r4, #1]
 8004fe0:	f013 0f01 	tst.w	r3, #1
 8004fe4:	f000 808c 	beq.w	8005100 <indev_proc_press+0x3dc>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver->long_press_repeat_time) {
 8004fe8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004fea:	f01b fe04 	bl	8020bf6 <lv_tick_elaps>
 8004fee:	4b61      	ldr	r3, [pc, #388]	; (8005174 <indev_proc_press+0x450>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	8bdb      	ldrh	r3, [r3, #30]
 8004ff6:	4298      	cmp	r0, r3
 8004ff8:	f67f aed3 	bls.w	8004da2 <indev_proc_press+0x7e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 8004ffc:	2106      	movs	r1, #6
 8004ffe:	4b5e      	ldr	r3, [pc, #376]	; (8005178 <indev_proc_press+0x454>)
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	f7ff f9df 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8005006:	4620      	mov	r0, r4
 8005008:	f7ff fcd0 	bl	80049ac <indev_reset_check>
 800500c:	2800      	cmp	r0, #0
 800500e:	f47f aec8 	bne.w	8004da2 <indev_proc_press+0x7e>
                proc->longpr_rep_timestamp = lv_tick_get();
 8005012:	f01b fdec 	bl	8020bee <lv_tick_get>
 8005016:	64a0      	str	r0, [r4, #72]	; 0x48
 8005018:	e6c3      	b.n	8004da2 <indev_proc_press+0x7e>
    if(proc->types.pointer.gesture_sent) return;
 800501a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800501e:	f013 0f01 	tst.w	r3, #1
 8005022:	d1d2      	bne.n	8004fca <indev_proc_press+0x2a6>
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
 8005024:	6a65      	ldr	r5, [r4, #36]	; 0x24
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 8005026:	2d00      	cmp	r5, #0
 8005028:	d0cf      	beq.n	8004fca <indev_proc_press+0x2a6>
 800502a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	f002 f82f 	bl	8007094 <lv_obj_has_flag>
 8005036:	b130      	cbz	r0, 8005046 <indev_proc_press+0x322>
        gesture_obj = lv_obj_get_parent(gesture_obj);
 8005038:	4628      	mov	r0, r5
 800503a:	f006 fe79 	bl	800bd30 <lv_obj_get_parent>
    while(gesture_obj && lv_obj_has_flag(gesture_obj, LV_OBJ_FLAG_GESTURE_BUBBLE)) {
 800503e:	4605      	mov	r5, r0
 8005040:	2800      	cmp	r0, #0
 8005042:	d1f4      	bne.n	800502e <indev_proc_press+0x30a>
 8005044:	e7c1      	b.n	8004fca <indev_proc_press+0x2a6>
    if(gesture_obj == NULL) return;
 8005046:	2d00      	cmp	r5, #0
 8005048:	d0bf      	beq.n	8004fca <indev_proc_press+0x2a6>
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 800504a:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800504e:	4a49      	ldr	r2, [pc, #292]	; (8005174 <indev_proc_press+0x450>)
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	6811      	ldr	r1, [r2, #0]
 8005054:	7e88      	ldrb	r0, [r1, #26]
 8005056:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800505a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800505e:	b289      	uxth	r1, r1
 8005060:	4281      	cmp	r1, r0
 8005062:	d20a      	bcs.n	800507a <indev_proc_press+0x356>
       (LV_ABS(proc->types.pointer.vect.y) < indev_act->driver->gesture_min_velocity)) {
 8005064:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8005068:	2900      	cmp	r1, #0
 800506a:	bfb8      	it	lt
 800506c:	4249      	neglt	r1, r1
    if((LV_ABS(proc->types.pointer.vect.x) < indev_act->driver->gesture_min_velocity) &&
 800506e:	b289      	uxth	r1, r1
 8005070:	4288      	cmp	r0, r1
 8005072:	d902      	bls.n	800507a <indev_proc_press+0x356>
        proc->types.pointer.gesture_sum.x = 0;
 8005074:	2100      	movs	r1, #0
 8005076:	87a1      	strh	r1, [r4, #60]	; 0x3c
        proc->types.pointer.gesture_sum.y = 0;
 8005078:	87e1      	strh	r1, [r4, #62]	; 0x3e
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
 800507a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800507c:	440b      	add	r3, r1
 800507e:	b21b      	sxth	r3, r3
 8005080:	87a3      	strh	r3, [r4, #60]	; 0x3c
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
 8005082:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005084:	8ae0      	ldrh	r0, [r4, #22]
 8005086:	4401      	add	r1, r0
 8005088:	b209      	sxth	r1, r1
 800508a:	87e1      	strh	r1, [r4, #62]	; 0x3e
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 800508c:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8005090:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8005094:	b280      	uxth	r0, r0
 8005096:	6816      	ldr	r6, [r2, #0]
 8005098:	7ef6      	ldrb	r6, [r6, #27]
 800509a:	42b0      	cmp	r0, r6
 800509c:	d806      	bhi.n	80050ac <indev_proc_press+0x388>
       (LV_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver->gesture_limit)) {
 800509e:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
 80050a2:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver->gesture_limit) ||
 80050a6:	b2bf      	uxth	r7, r7
 80050a8:	42be      	cmp	r6, r7
 80050aa:	d28e      	bcs.n	8004fca <indev_proc_press+0x2a6>
        proc->types.pointer.gesture_sent = 1;
 80050ac:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
 80050b0:	f046 0601 	orr.w	r6, r6, #1
 80050b4:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
        if(LV_ABS(proc->types.pointer.gesture_sum.x) > LV_ABS(proc->types.pointer.gesture_sum.y)) {
 80050b8:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 80050bc:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
 80050c0:	b2b6      	uxth	r6, r6
 80050c2:	42b0      	cmp	r0, r6
 80050c4:	d911      	bls.n	80050ea <indev_proc_press+0x3c6>
            if(proc->types.pointer.gesture_sum.x > 0)
 80050c6:	2b00      	cmp	r3, #0
                proc->types.pointer.gesture_dir = LV_DIR_RIGHT;
 80050c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80050cc:	bfcc      	ite	gt
 80050ce:	2102      	movgt	r1, #2
                proc->types.pointer.gesture_dir = LV_DIR_LEFT;
 80050d0:	2101      	movle	r1, #1
 80050d2:	f361 1307 	bfi	r3, r1, #4, #4
 80050d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, indev_act);
 80050da:	210c      	movs	r1, #12
 80050dc:	4628      	mov	r0, r5
 80050de:	f7ff f971 	bl	80043c4 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80050e2:	4620      	mov	r0, r4
 80050e4:	f7ff fc62 	bl	80049ac <indev_reset_check>
 80050e8:	e76f      	b.n	8004fca <indev_proc_press+0x2a6>
            if(proc->types.pointer.gesture_sum.y > 0)
 80050ea:	2900      	cmp	r1, #0
                proc->types.pointer.gesture_dir = LV_DIR_BOTTOM;
 80050ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80050f0:	bfcc      	ite	gt
 80050f2:	2108      	movgt	r1, #8
                proc->types.pointer.gesture_dir = LV_DIR_TOP;
 80050f4:	2104      	movle	r1, #4
 80050f6:	f361 1307 	bfi	r3, r1, #4, #4
 80050fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80050fe:	e7ec      	b.n	80050da <indev_proc_press+0x3b6>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver->long_press_time) {
 8005100:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005102:	f01b fd78 	bl	8020bf6 <lv_tick_elaps>
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <indev_proc_press+0x450>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	8b9b      	ldrh	r3, [r3, #28]
 800510e:	4298      	cmp	r0, r3
 8005110:	d809      	bhi.n	8005126 <indev_proc_press+0x402>
        if(proc->types.pointer.scroll_obj == NULL && proc->long_pr_sent == 1) {
 8005112:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f ae44 	bne.w	8004da2 <indev_proc_press+0x7e>
 800511a:	7863      	ldrb	r3, [r4, #1]
 800511c:	f013 0f01 	tst.w	r3, #1
 8005120:	f43f ae3f 	beq.w	8004da2 <indev_proc_press+0x7e>
 8005124:	e760      	b.n	8004fe8 <indev_proc_press+0x2c4>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8005126:	2105      	movs	r1, #5
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <indev_proc_press+0x454>)
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	f7ff f94a 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff fc3b 	bl	80049ac <indev_reset_check>
 8005136:	2800      	cmp	r0, #0
 8005138:	f47f ae33 	bne.w	8004da2 <indev_proc_press+0x7e>
                proc->long_pr_sent = 1;
 800513c:	7863      	ldrb	r3, [r4, #1]
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	7063      	strb	r3, [r4, #1]
                proc->longpr_rep_timestamp = lv_tick_get();
 8005144:	f01b fd53 	bl	8020bee <lv_tick_get>
 8005148:	64a0      	str	r0, [r4, #72]	; 0x48
 800514a:	e7e2      	b.n	8005112 <indev_proc_press+0x3ee>
    if(g_act == g_prev) {
 800514c:	2e00      	cmp	r6, #0
 800514e:	f43f af12 	beq.w	8004f76 <indev_proc_press+0x252>
        if(g_prev == NULL && proc->types.pointer.last_pressed) {
 8005152:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8005154:	2800      	cmp	r0, #0
 8005156:	f43f aec3 	beq.w	8004ee0 <indev_proc_press+0x1bc>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, indev_act);
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <indev_proc_press+0x450>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	210f      	movs	r1, #15
 8005160:	f7ff f930 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8005164:	4638      	mov	r0, r7
 8005166:	f7ff fc21 	bl	80049ac <indev_reset_check>
 800516a:	2800      	cmp	r0, #0
 800516c:	f43f aeb8 	beq.w	8004ee0 <indev_proc_press+0x1bc>
 8005170:	e6c3      	b.n	8004efa <indev_proc_press+0x1d6>
 8005172:	bf00      	nop
 8005174:	200025d0 	.word	0x200025d0
 8005178:	200025d4 	.word	0x200025d4

0800517c <lv_indev_read_timer_cb>:
{
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	b084      	sub	sp, #16
    indev_act = timer->user_data;
 8005182:	68c4      	ldr	r4, [r0, #12]
 8005184:	4b9c      	ldr	r3, [pc, #624]	; (80053f8 <lv_indev_read_timer_cb+0x27c>)
 8005186:	601c      	str	r4, [r3, #0]
    if(indev_act->driver->disp == NULL) return; /*Not assigned to any displays*/
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	b153      	cbz	r3, 80051a4 <lv_indev_read_timer_cb+0x28>
    indev_proc_reset_query_handler(indev_act);
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff fbe8 	bl	8004964 <indev_proc_reset_query_handler>
    if(indev_act->proc.disabled ||
 8005194:	7963      	ldrb	r3, [r4, #5]
 8005196:	f013 0f04 	tst.w	r3, #4
 800519a:	d103      	bne.n	80051a4 <lv_indev_read_timer_cb+0x28>
       indev_act->driver->disp->prev_scr != NULL) return; /*Input disabled or screen animation active*/
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
    if(indev_act->proc.disabled ||
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	b113      	cbz	r3, 80051aa <lv_indev_read_timer_cb+0x2e>
}
 80051a4:	b004      	add	sp, #16
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _lv_indev_read(indev_act, &data);
 80051aa:	4d93      	ldr	r5, [pc, #588]	; (80053f8 <lv_indev_read_timer_cb+0x27c>)
        indev_obj_act = NULL;
 80051ac:	4f93      	ldr	r7, [pc, #588]	; (80053fc <lv_indev_read_timer_cb+0x280>)
 80051ae:	e0c9      	b.n	8005344 <lv_indev_read_timer_cb+0x1c8>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	691c      	ldr	r4, [r3, #16]
 80051b4:	f01b fd1b 	bl	8020bee <lv_tick_get>
 80051b8:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
 80051bc:	e0d9      	b.n	8005372 <lv_indev_read_timer_cb+0x1f6>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 80051be:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80051c2:	2a00      	cmp	r2, #0
 80051c4:	d164      	bne.n	8005290 <lv_indev_read_timer_cb+0x114>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 80051c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	f000 8261 	beq.w	8005692 <lv_indev_read_timer_cb+0x516>
    if(i->proc.wait_until_release) {
 80051d0:	7963      	ldrb	r3, [r4, #5]
 80051d2:	f013 0f08 	tst.w	r3, #8
 80051d6:	d008      	beq.n	80051ea <lv_indev_read_timer_cb+0x6e>
        i->proc.wait_until_release      = 0;
 80051d8:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp            = 0;
 80051da:	2200      	movs	r2, #0
 80051dc:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 80051de:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80051e2:	f362 0300 	bfi	r3, r2, #0, #1
 80051e6:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 80051e8:	7222      	strb	r2, [r4, #8]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 80051ea:	f894 9008 	ldrb.w	r9, [r4, #8]
    i->proc.types.keypad.last_state = data->state;
 80051ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80051f2:	7223      	strb	r3, [r4, #8]
    i->proc.types.keypad.last_key   = data->key;
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	60e3      	str	r3, [r4, #12]
    lv_group_t * g = i->group;
 80051f8:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
    if(g == NULL) return;
 80051fc:	f1b8 0f00 	cmp.w	r8, #0
 8005200:	f000 809a 	beq.w	8005338 <lv_indev_read_timer_cb+0x1bc>
    indev_obj_act = lv_group_get_focused(g);
 8005204:	4640      	mov	r0, r8
 8005206:	f7ff fb18 	bl	800483a <lv_group_get_focused>
 800520a:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 800520c:	2800      	cmp	r0, #0
 800520e:	f000 8093 	beq.w	8005338 <lv_indev_read_timer_cb+0x1bc>
    if(data->state != LV_INDEV_STATE_RELEASED) {
 8005212:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005216:	b113      	cbz	r3, 800521e <lv_indev_read_timer_cb+0xa2>
        data->enc_diff = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	f8ad 300c 	strh.w	r3, [sp, #12]
    indev_obj_act = lv_group_get_focused(g);
 800521e:	4640      	mov	r0, r8
 8005220:	f7ff fb0b 	bl	800483a <lv_group_get_focused>
 8005224:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8005226:	2800      	cmp	r0, #0
 8005228:	f000 8086 	beq.w	8005338 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 800522c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005230:	2b01      	cmp	r3, #1
 8005232:	f000 8234 	beq.w	800569e <lv_indev_read_timer_cb+0x522>
    else if(data->state == LV_INDEV_STATE_RELEASED && last_state == LV_INDEV_STATE_PRESSED) {
 8005236:	b91b      	cbnz	r3, 8005240 <lv_indev_read_timer_cb+0xc4>
 8005238:	f1b9 0f01 	cmp.w	r9, #1
 800523c:	f000 8312 	beq.w	8005864 <lv_indev_read_timer_cb+0x6e8>
    indev_obj_act = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	603b      	str	r3, [r7, #0]
    if(data->enc_diff != 0) {
 8005244:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d075      	beq.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        if(lv_group_get_editing(g)) {
 800524c:	4640      	mov	r0, r8
 800524e:	f7ff fb7d 	bl	800494c <lv_group_get_editing>
 8005252:	2800      	cmp	r0, #0
 8005254:	f000 83a2 	beq.w	800599c <lv_indev_read_timer_cb+0x820>
            if(data->enc_diff < 0) {
 8005258:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f2c0 8386 	blt.w	800596e <lv_indev_read_timer_cb+0x7f2>
                for(s = 0; s < data->enc_diff; s++) {
 8005262:	2b00      	cmp	r3, #0
 8005264:	dd68      	ble.n	8005338 <lv_indev_read_timer_cb+0x1bc>
 8005266:	f04f 0900 	mov.w	r9, #0
                    lv_group_send_data(g, LV_KEY_RIGHT);
 800526a:	f04f 0a13 	mov.w	sl, #19
                    if(indev_reset_check(&i->proc)) return;
 800526e:	3404      	adds	r4, #4
                    lv_group_send_data(g, LV_KEY_RIGHT);
 8005270:	4651      	mov	r1, sl
 8005272:	4640      	mov	r0, r8
 8005274:	f7ff fae7 	bl	8004846 <lv_group_send_data>
                    if(indev_reset_check(&i->proc)) return;
 8005278:	4620      	mov	r0, r4
 800527a:	f7ff fb97 	bl	80049ac <indev_reset_check>
 800527e:	2800      	cmp	r0, #0
 8005280:	d15a      	bne.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < data->enc_diff; s++) {
 8005282:	f109 0901 	add.w	r9, r9, #1
 8005286:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800528a:	4599      	cmp	r9, r3
 800528c:	dbf0      	blt.n	8005270 <lv_indev_read_timer_cb+0xf4>
 800528e:	e053      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
            indev_act->driver->disp->last_activity_time = lv_tick_get();
 8005290:	691c      	ldr	r4, [r3, #16]
 8005292:	f01b fcac 	bl	8020bee <lv_tick_get>
 8005296:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
 800529a:	e06a      	b.n	8005372 <lv_indev_read_timer_cb+0x1f6>
    lv_disp_t * disp = i->driver->disp;
 800529c:	6911      	ldr	r1, [r2, #16]
    i->proc.types.pointer.last_raw_point.x = data->point.x;
 800529e:	f9bd 2000 	ldrsh.w	r2, [sp]
 80052a2:	82a2      	strh	r2, [r4, #20]
    i->proc.types.pointer.last_raw_point.y = data->point.y;
 80052a4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80052a8:	82e3      	strh	r3, [r4, #22]
    if(disp->driver->rotated == LV_DISP_ROT_180 || disp->driver->rotated == LV_DISP_ROT_270) {
 80052aa:	f8d1 c000 	ldr.w	ip, [r1]
 80052ae:	f89c 0010 	ldrb.w	r0, [ip, #16]
 80052b2:	f010 0f20 	tst.w	r0, #32
 80052b6:	d104      	bne.n	80052c2 <lv_indev_read_timer_cb+0x146>
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 80052b8:	f000 0030 	and.w	r0, r0, #48	; 0x30
 80052bc:	2810      	cmp	r0, #16
 80052be:	d11d      	bne.n	80052fc <lv_indev_read_timer_cb+0x180>
 80052c0:	e010      	b.n	80052e4 <lv_indev_read_timer_cb+0x168>
        data->point.x = disp->driver->hor_res - data->point.x - 1;
 80052c2:	43d2      	mvns	r2, r2
 80052c4:	f8bc 0000 	ldrh.w	r0, [ip]
 80052c8:	4402      	add	r2, r0
 80052ca:	f8ad 2000 	strh.w	r2, [sp]
        data->point.y = disp->driver->ver_res - data->point.y - 1;
 80052ce:	680a      	ldr	r2, [r1, #0]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	8852      	ldrh	r2, [r2, #2]
 80052d4:	4413      	add	r3, r2
 80052d6:	f8ad 3002 	strh.w	r3, [sp, #2]
    if(disp->driver->rotated == LV_DISP_ROT_90 || disp->driver->rotated == LV_DISP_ROT_270) {
 80052da:	680b      	ldr	r3, [r1, #0]
 80052dc:	7c1b      	ldrb	r3, [r3, #16]
 80052de:	f013 0f10 	tst.w	r3, #16
 80052e2:	d00b      	beq.n	80052fc <lv_indev_read_timer_cb+0x180>
        lv_coord_t tmp = data->point.y;
 80052e4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
        data->point.y = data->point.x;
 80052e8:	f8bd 2000 	ldrh.w	r2, [sp]
 80052ec:	f8ad 2002 	strh.w	r2, [sp, #2]
        data->point.x = disp->driver->ver_res - tmp - 1;
 80052f0:	680a      	ldr	r2, [r1, #0]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	8852      	ldrh	r2, [r2, #2]
 80052f6:	4413      	add	r3, r2
 80052f8:	f8ad 3000 	strh.w	r3, [sp]
    if(data->point.x >= lv_disp_get_hor_res(i->driver->disp)) {
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	6918      	ldr	r0, [r3, #16]
 8005300:	f01b fbbc 	bl	8020a7c <lv_disp_get_hor_res>
    if(data->point.y >= lv_disp_get_ver_res(i->driver->disp)) {
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	6918      	ldr	r0, [r3, #16]
 8005308:	f01b fbcc 	bl	8020aa4 <lv_disp_get_ver_res>
    if(i->cursor != NULL &&
 800530c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800530e:	b118      	cbz	r0, 8005318 <lv_indev_read_timer_cb+0x19c>
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	9b00      	ldr	r3, [sp, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d164      	bne.n	80053e2 <lv_indev_read_timer_cb+0x266>
    i->proc.types.pointer.act_point.x = data->point.x;
 8005318:	f8bd 3000 	ldrh.w	r3, [sp]
 800531c:	8123      	strh	r3, [r4, #8]
    i->proc.types.pointer.act_point.y = data->point.y;
 800531e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005322:	8163      	strh	r3, [r4, #10]
    if(i->proc.state == LV_INDEV_STATE_PRESSED) {
 8005324:	7923      	ldrb	r3, [r4, #4]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d062      	beq.n	80053f0 <lv_indev_read_timer_cb+0x274>
        indev_proc_release(&i->proc);
 800532a:	1d20      	adds	r0, r4, #4
 800532c:	f7ff fb4a 	bl	80049c4 <indev_proc_release>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8005330:	8923      	ldrh	r3, [r4, #8]
 8005332:	8223      	strh	r3, [r4, #16]
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8005334:	8963      	ldrh	r3, [r4, #10]
 8005336:	8263      	strh	r3, [r4, #18]
        indev_proc_reset_query_handler(indev_act);
 8005338:	6828      	ldr	r0, [r5, #0]
 800533a:	f7ff fb13 	bl	8004964 <indev_proc_reset_query_handler>
    } while(continue_reading);
 800533e:	2e00      	cmp	r6, #0
 8005340:	f000 836b 	beq.w	8005a1a <lv_indev_read_timer_cb+0x89e>
        _lv_indev_read(indev_act, &data);
 8005344:	4669      	mov	r1, sp
 8005346:	6828      	ldr	r0, [r5, #0]
 8005348:	f01b fc30 	bl	8020bac <_lv_indev_read>
        continue_reading = data.continue_reading;
 800534c:	f89d 600f 	ldrb.w	r6, [sp, #15]
        indev_proc_reset_query_handler(indev_act);
 8005350:	682c      	ldr	r4, [r5, #0]
 8005352:	4620      	mov	r0, r4
 8005354:	f7ff fb06 	bl	8004964 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	603b      	str	r3, [r7, #0]
        indev_act->proc.state = data.state;
 800535c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005360:	7123      	strb	r3, [r4, #4]
        if(indev_act->proc.state == LV_INDEV_STATE_PRESSED) {
 8005362:	2b01      	cmp	r3, #1
 8005364:	f43f af24 	beq.w	80051b0 <lv_indev_read_timer_cb+0x34>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	2a04      	cmp	r2, #4
 800536e:	f43f af26 	beq.w	80051be <lv_indev_read_timer_cb+0x42>
        if(indev_act->driver->type == LV_INDEV_TYPE_POINTER) {
 8005372:	682c      	ldr	r4, [r5, #0]
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	7813      	ldrb	r3, [r2, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d08f      	beq.n	800529c <lv_indev_read_timer_cb+0x120>
        else if(indev_act->driver->type == LV_INDEV_TYPE_KEYPAD) {
 800537c:	2b02      	cmp	r3, #2
 800537e:	d03f      	beq.n	8005400 <lv_indev_read_timer_cb+0x284>
        else if(indev_act->driver->type == LV_INDEV_TYPE_ENCODER) {
 8005380:	2b04      	cmp	r3, #4
 8005382:	f43f af20 	beq.w	80051c6 <lv_indev_read_timer_cb+0x4a>
        else if(indev_act->driver->type == LV_INDEV_TYPE_BUTTON) {
 8005386:	2b03      	cmp	r3, #3
 8005388:	d1d6      	bne.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    if(i->btn_points == NULL) {
 800538a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0d3      	beq.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    lv_coord_t x = i->btn_points[data->btn_id].x;
 8005390:	9a02      	ldr	r2, [sp, #8]
 8005392:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8005396:	f933 9022 	ldrsh.w	r9, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
 800539a:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
    if(data->state == LV_INDEV_STATE_PRESSED) {
 800539e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	f000 8328 	beq.w	80059f8 <lv_indev_read_timer_cb+0x87c>
    if(indev_reset_check(&i->proc)) return;
 80053a8:	f104 0804 	add.w	r8, r4, #4
 80053ac:	4640      	mov	r0, r8
 80053ae:	f7ff fafd 	bl	80049ac <indev_reset_check>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d1c0      	bne.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    i->proc.types.pointer.act_point.x = x;
 80053b6:	f8a4 9008 	strh.w	r9, [r4, #8]
    i->proc.types.pointer.act_point.y = y;
 80053ba:	f8a4 a00a 	strh.w	sl, [r4, #10]
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 80053be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	f000 8325 	beq.w	8005a12 <lv_indev_read_timer_cb+0x896>
    else indev_proc_release(&i->proc);
 80053c8:	4640      	mov	r0, r8
 80053ca:	f7ff fafb 	bl	80049c4 <indev_proc_release>
    if(indev_reset_check(&i->proc)) return;
 80053ce:	4640      	mov	r0, r8
 80053d0:	f7ff faec 	bl	80049ac <indev_reset_check>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d1af      	bne.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 80053d8:	8923      	ldrh	r3, [r4, #8]
 80053da:	8223      	strh	r3, [r4, #16]
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 80053dc:	8963      	ldrh	r3, [r4, #10]
 80053de:	8263      	strh	r3, [r4, #18]
 80053e0:	e7aa      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80053e2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80053e6:	f9bd 1000 	ldrsh.w	r1, [sp]
 80053ea:	f002 fdd7 	bl	8007f9c <lv_obj_set_pos>
 80053ee:	e793      	b.n	8005318 <lv_indev_read_timer_cb+0x19c>
        indev_proc_press(&i->proc);
 80053f0:	1d20      	adds	r0, r4, #4
 80053f2:	f7ff fc97 	bl	8004d24 <indev_proc_press>
 80053f6:	e79b      	b.n	8005330 <lv_indev_read_timer_cb+0x1b4>
 80053f8:	200025d0 	.word	0x200025d0
 80053fc:	200025d4 	.word	0x200025d4
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8005400:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d02f      	beq.n	8005468 <lv_indev_read_timer_cb+0x2ec>
    if(i->proc.wait_until_release) {
 8005408:	7963      	ldrb	r3, [r4, #5]
 800540a:	f013 0f08 	tst.w	r3, #8
 800540e:	d008      	beq.n	8005422 <lv_indev_read_timer_cb+0x2a6>
        i->proc.wait_until_release      = 0;
 8005410:	7963      	ldrb	r3, [r4, #5]
        i->proc.pr_timestamp            = 0;
 8005412:	2200      	movs	r2, #0
 8005414:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
 8005416:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800541a:	f362 0300 	bfi	r3, r2, #0, #1
 800541e:	7163      	strb	r3, [r4, #5]
        i->proc.types.keypad.last_state = LV_INDEV_STATE_RELEASED; /*To skip the processing of release*/
 8005420:	7222      	strb	r2, [r4, #8]
    lv_group_t * g = i->group;
 8005422:	f8d4 8054 	ldr.w	r8, [r4, #84]	; 0x54
    if(g == NULL) return;
 8005426:	f1b8 0f00 	cmp.w	r8, #0
 800542a:	d085      	beq.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    indev_obj_act = lv_group_get_focused(g);
 800542c:	4640      	mov	r0, r8
 800542e:	f7ff fa04 	bl	800483a <lv_group_get_focused>
 8005432:	6038      	str	r0, [r7, #0]
    if(indev_obj_act == NULL) return;
 8005434:	2800      	cmp	r0, #0
 8005436:	f43f af7f 	beq.w	8005338 <lv_indev_read_timer_cb+0x1bc>
    bool dis = lv_obj_has_state(indev_obj_act, LV_STATE_DISABLED);
 800543a:	2180      	movs	r1, #128	; 0x80
 800543c:	f001 fe39 	bl	80070b2 <lv_obj_has_state>
 8005440:	4681      	mov	r9, r0
    uint32_t prev_key = i->proc.types.keypad.last_key;
 8005442:	68e0      	ldr	r0, [r4, #12]
    i->proc.types.keypad.last_key = data->key;
 8005444:	9a01      	ldr	r2, [sp, #4]
 8005446:	60e2      	str	r2, [r4, #12]
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 8005448:	7a21      	ldrb	r1, [r4, #8]
    i->proc.types.keypad.last_state = data->state;
 800544a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800544e:	7223      	strb	r3, [r4, #8]
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8005450:	2b01      	cmp	r3, #1
 8005452:	d00e      	beq.n	8005472 <lv_indev_read_timer_cb+0x2f6>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 8005454:	f1b9 0f00 	cmp.w	r9, #0
 8005458:	d103      	bne.n	8005462 <lv_indev_read_timer_cb+0x2e6>
    else if(!dis && data->state == LV_INDEV_STATE_RELEASED && prev_state == LV_INDEV_STATE_PRESSED) {
 800545a:	b913      	cbnz	r3, 8005462 <lv_indev_read_timer_cb+0x2e6>
 800545c:	2901      	cmp	r1, #1
 800545e:	f000 80e7 	beq.w	8005630 <lv_indev_read_timer_cb+0x4b4>
    indev_obj_act = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	e767      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8005468:	7963      	ldrb	r3, [r4, #5]
 800546a:	f013 0f08 	tst.w	r3, #8
 800546e:	d0d8      	beq.n	8005422 <lv_indev_read_timer_cb+0x2a6>
 8005470:	e762      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_RELEASED) {
 8005472:	b341      	cbz	r1, 80054c6 <lv_indev_read_timer_cb+0x34a>
    else if(!dis && data->state == LV_INDEV_STATE_PRESSED && prev_state == LV_INDEV_STATE_PRESSED) {
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	d1f3      	bne.n	8005462 <lv_indev_read_timer_cb+0x2e6>
 800547a:	2901      	cmp	r1, #1
 800547c:	d1f1      	bne.n	8005462 <lv_indev_read_timer_cb+0x2e6>
        if(data->key == LV_KEY_ENTER) {
 800547e:	2a0a      	cmp	r2, #10
 8005480:	d07e      	beq.n	8005580 <lv_indev_read_timer_cb+0x404>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8005482:	7963      	ldrb	r3, [r4, #5]
 8005484:	f013 0f01 	tst.w	r3, #1
 8005488:	f000 8086 	beq.w	8005598 <lv_indev_read_timer_cb+0x41c>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 800548c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800548e:	f01b fbb2 	bl	8020bf6 <lv_tick_elaps>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	8bdb      	ldrh	r3, [r3, #30]
        else if(i->proc.long_pr_sent != 0 &&
 8005496:	4298      	cmp	r0, r3
 8005498:	d9e3      	bls.n	8005462 <lv_indev_read_timer_cb+0x2e6>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 800549a:	f01b fba8 	bl	8020bee <lv_tick_get>
 800549e:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 80054a0:	9901      	ldr	r1, [sp, #4]
 80054a2:	290a      	cmp	r1, #10
 80054a4:	f000 809c 	beq.w	80055e0 <lv_indev_read_timer_cb+0x464>
            else if(data->key == LV_KEY_NEXT) {
 80054a8:	2909      	cmp	r1, #9
 80054aa:	f000 80a5 	beq.w	80055f8 <lv_indev_read_timer_cb+0x47c>
            else if(data->key == LV_KEY_PREV) {
 80054ae:	290b      	cmp	r1, #11
 80054b0:	f000 80b0 	beq.w	8005614 <lv_indev_read_timer_cb+0x498>
                lv_group_send_data(g, data->key);
 80054b4:	4640      	mov	r0, r8
 80054b6:	f7ff f9c6 	bl	8004846 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 80054ba:	1d20      	adds	r0, r4, #4
 80054bc:	f7ff fa76 	bl	80049ac <indev_reset_check>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0ce      	beq.n	8005462 <lv_indev_read_timer_cb+0x2e6>
 80054c4:	e738      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        i->proc.pr_timestamp = lv_tick_get();
 80054c6:	f01b fb92 	bl	8020bee <lv_tick_get>
 80054ca:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_NEXT) {
 80054cc:	9901      	ldr	r1, [sp, #4]
 80054ce:	2909      	cmp	r1, #9
 80054d0:	d011      	beq.n	80054f6 <lv_indev_read_timer_cb+0x37a>
        else if(data->key == LV_KEY_PREV) {
 80054d2:	290b      	cmp	r1, #11
 80054d4:	d01c      	beq.n	8005510 <lv_indev_read_timer_cb+0x394>
        else if(!dis) {
 80054d6:	f1b9 0f00 	cmp.w	r9, #0
 80054da:	d1c2      	bne.n	8005462 <lv_indev_read_timer_cb+0x2e6>
            if(data->key == LV_KEY_ENTER) {
 80054dc:	290a      	cmp	r1, #10
 80054de:	d024      	beq.n	800552a <lv_indev_read_timer_cb+0x3ae>
            else if(data->key == LV_KEY_ESC) {
 80054e0:	291b      	cmp	r1, #27
 80054e2:	d037      	beq.n	8005554 <lv_indev_read_timer_cb+0x3d8>
                lv_group_send_data(g, data->key);
 80054e4:	4640      	mov	r0, r8
 80054e6:	f7ff f9ae 	bl	8004846 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 80054ea:	1d20      	adds	r0, r4, #4
 80054ec:	f7ff fa5e 	bl	80049ac <indev_reset_check>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d0b6      	beq.n	8005462 <lv_indev_read_timer_cb+0x2e6>
 80054f4:	e720      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80054f6:	2100      	movs	r1, #0
 80054f8:	4640      	mov	r0, r8
 80054fa:	f7ff f9ba 	bl	8004872 <lv_group_set_editing>
            lv_group_focus_next(g);
 80054fe:	4640      	mov	r0, r8
 8005500:	f7ff f8d2 	bl	80046a8 <lv_group_focus_next>
            if(indev_reset_check(&i->proc)) return;
 8005504:	1d20      	adds	r0, r4, #4
 8005506:	f7ff fa51 	bl	80049ac <indev_reset_check>
 800550a:	2800      	cmp	r0, #0
 800550c:	d0a9      	beq.n	8005462 <lv_indev_read_timer_cb+0x2e6>
 800550e:	e713      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8005510:	2100      	movs	r1, #0
 8005512:	4640      	mov	r0, r8
 8005514:	f7ff f9ad 	bl	8004872 <lv_group_set_editing>
            lv_group_focus_prev(g);
 8005518:	4640      	mov	r0, r8
 800551a:	f7ff f8d7 	bl	80046cc <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 800551e:	1d20      	adds	r0, r4, #4
 8005520:	f7ff fa44 	bl	80049ac <indev_reset_check>
 8005524:	2800      	cmp	r0, #0
 8005526:	d09c      	beq.n	8005462 <lv_indev_read_timer_cb+0x2e6>
 8005528:	e706      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                lv_group_send_data(g, LV_KEY_ENTER);
 800552a:	4640      	mov	r0, r8
 800552c:	f7ff f98b 	bl	8004846 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8005530:	3404      	adds	r4, #4
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff fa3a 	bl	80049ac <indev_reset_check>
 8005538:	2800      	cmp	r0, #0
 800553a:	f47f aefd 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                if(!dis) lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 800553e:	682a      	ldr	r2, [r5, #0]
 8005540:	2101      	movs	r1, #1
 8005542:	6838      	ldr	r0, [r7, #0]
 8005544:	f7fe ff3e 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005548:	4620      	mov	r0, r4
 800554a:	f7ff fa2f 	bl	80049ac <indev_reset_check>
 800554e:	2800      	cmp	r0, #0
 8005550:	d087      	beq.n	8005462 <lv_indev_read_timer_cb+0x2e6>
 8005552:	e6f1      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                lv_group_send_data(g, LV_KEY_ESC);
 8005554:	4640      	mov	r0, r8
 8005556:	f7ff f976 	bl	8004846 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 800555a:	3404      	adds	r4, #4
 800555c:	4620      	mov	r0, r4
 800555e:	f7ff fa25 	bl	80049ac <indev_reset_check>
 8005562:	2800      	cmp	r0, #0
 8005564:	f47f aee8 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 8005568:	682a      	ldr	r2, [r5, #0]
 800556a:	2120      	movs	r1, #32
 800556c:	6838      	ldr	r0, [r7, #0]
 800556e:	f7fe ff29 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005572:	4620      	mov	r0, r4
 8005574:	f7ff fa1a 	bl	80049ac <indev_reset_check>
 8005578:	2800      	cmp	r0, #0
 800557a:	f43f af72 	beq.w	8005462 <lv_indev_read_timer_cb+0x2e6>
 800557e:	e6db      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, indev_act);
 8005580:	682a      	ldr	r2, [r5, #0]
 8005582:	2102      	movs	r1, #2
 8005584:	6838      	ldr	r0, [r7, #0]
 8005586:	f7fe ff1d 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800558a:	1d20      	adds	r0, r4, #4
 800558c:	f7ff fa0e 	bl	80049ac <indev_reset_check>
 8005590:	2800      	cmp	r0, #0
 8005592:	f43f af76 	beq.w	8005482 <lv_indev_read_timer_cb+0x306>
 8005596:	e6cf      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 8005598:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800559a:	f01b fb2c 	bl	8020bf6 <lv_tick_elaps>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	8b9b      	ldrh	r3, [r3, #28]
 80055a2:	4298      	cmp	r0, r3
 80055a4:	d916      	bls.n	80055d4 <lv_indev_read_timer_cb+0x458>
            i->proc.long_pr_sent = 1;
 80055a6:	7963      	ldrb	r3, [r4, #5]
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	7163      	strb	r3, [r4, #5]
            if(data->key == LV_KEY_ENTER) {
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	2b0a      	cmp	r3, #10
 80055b2:	f47f af56 	bne.w	8005462 <lv_indev_read_timer_cb+0x2e6>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 80055b6:	f01b fb1a 	bl	8020bee <lv_tick_get>
 80055ba:	64e0      	str	r0, [r4, #76]	; 0x4c
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 80055bc:	682a      	ldr	r2, [r5, #0]
 80055be:	2105      	movs	r1, #5
 80055c0:	6838      	ldr	r0, [r7, #0]
 80055c2:	f7fe feff 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80055c6:	1d20      	adds	r0, r4, #4
 80055c8:	f7ff f9f0 	bl	80049ac <indev_reset_check>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f43f af48 	beq.w	8005462 <lv_indev_read_timer_cb+0x2e6>
 80055d2:	e6b1      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        else if(i->proc.long_pr_sent != 0 &&
 80055d4:	7963      	ldrb	r3, [r4, #5]
 80055d6:	f013 0f01 	tst.w	r3, #1
 80055da:	f43f af42 	beq.w	8005462 <lv_indev_read_timer_cb+0x2e6>
 80055de:	e755      	b.n	800548c <lv_indev_read_timer_cb+0x310>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 80055e0:	682a      	ldr	r2, [r5, #0]
 80055e2:	2106      	movs	r1, #6
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f7fe feed 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80055ea:	1d20      	adds	r0, r4, #4
 80055ec:	f7ff f9de 	bl	80049ac <indev_reset_check>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	f43f af36 	beq.w	8005462 <lv_indev_read_timer_cb+0x2e6>
 80055f6:	e69f      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80055f8:	2100      	movs	r1, #0
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff f939 	bl	8004872 <lv_group_set_editing>
                lv_group_focus_next(g);
 8005600:	4640      	mov	r0, r8
 8005602:	f7ff f851 	bl	80046a8 <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 8005606:	1d20      	adds	r0, r4, #4
 8005608:	f7ff f9d0 	bl	80049ac <indev_reset_check>
 800560c:	2800      	cmp	r0, #0
 800560e:	f43f af28 	beq.w	8005462 <lv_indev_read_timer_cb+0x2e6>
 8005612:	e691      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8005614:	2100      	movs	r1, #0
 8005616:	4640      	mov	r0, r8
 8005618:	f7ff f92b 	bl	8004872 <lv_group_set_editing>
                lv_group_focus_prev(g);
 800561c:	4640      	mov	r0, r8
 800561e:	f7ff f855 	bl	80046cc <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 8005622:	1d20      	adds	r0, r4, #4
 8005624:	f7ff f9c2 	bl	80049ac <indev_reset_check>
 8005628:	2800      	cmp	r0, #0
 800562a:	f43f af1a 	beq.w	8005462 <lv_indev_read_timer_cb+0x2e6>
 800562e:	e683      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        data->key = prev_key;
 8005630:	9001      	str	r0, [sp, #4]
        if(data->key == LV_KEY_ENTER) {
 8005632:	280a      	cmp	r0, #10
 8005634:	d006      	beq.n	8005644 <lv_indev_read_timer_cb+0x4c8>
        i->proc.pr_timestamp = 0;
 8005636:	2200      	movs	r2, #0
 8005638:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 800563a:	7963      	ldrb	r3, [r4, #5]
 800563c:	f362 0300 	bfi	r3, r2, #0, #1
 8005640:	7163      	strb	r3, [r4, #5]
 8005642:	e70e      	b.n	8005462 <lv_indev_read_timer_cb+0x2e6>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8005644:	682a      	ldr	r2, [r5, #0]
 8005646:	2108      	movs	r1, #8
 8005648:	6838      	ldr	r0, [r7, #0]
 800564a:	f7fe febb 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800564e:	f104 0804 	add.w	r8, r4, #4
 8005652:	4640      	mov	r0, r8
 8005654:	f7ff f9aa 	bl	80049ac <indev_reset_check>
 8005658:	2800      	cmp	r0, #0
 800565a:	f47f ae6d 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
            if(i->proc.long_pr_sent == 0) {
 800565e:	7963      	ldrb	r3, [r4, #5]
 8005660:	f013 0f01 	tst.w	r3, #1
 8005664:	d10a      	bne.n	800567c <lv_indev_read_timer_cb+0x500>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8005666:	682a      	ldr	r2, [r5, #0]
 8005668:	2104      	movs	r1, #4
 800566a:	6838      	ldr	r0, [r7, #0]
 800566c:	f7fe feaa 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005670:	4640      	mov	r0, r8
 8005672:	f7ff f99b 	bl	80049ac <indev_reset_check>
 8005676:	2800      	cmp	r0, #0
 8005678:	f47f ae5e 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 800567c:	682a      	ldr	r2, [r5, #0]
 800567e:	2107      	movs	r1, #7
 8005680:	6838      	ldr	r0, [r7, #0]
 8005682:	f7fe fe9f 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8005686:	4640      	mov	r0, r8
 8005688:	f7ff f990 	bl	80049ac <indev_reset_check>
 800568c:	2800      	cmp	r0, #0
 800568e:	d0d2      	beq.n	8005636 <lv_indev_read_timer_cb+0x4ba>
 8005690:	e652      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && i->proc.wait_until_release) return;
 8005692:	7963      	ldrb	r3, [r4, #5]
 8005694:	f013 0f08 	tst.w	r3, #8
 8005698:	f43f ada7 	beq.w	80051ea <lv_indev_read_timer_cb+0x6e>
 800569c:	e64c      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
    if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_RELEASED) {
 800569e:	f1b9 0f00 	cmp.w	r9, #0
 80056a2:	d022      	beq.n	80056ea <lv_indev_read_timer_cb+0x56e>
    else if(data->state == LV_INDEV_STATE_PRESSED && last_state == LV_INDEV_STATE_PRESSED) {
 80056a4:	f1b9 0f01 	cmp.w	r9, #1
 80056a8:	f47f adca 	bne.w	8005240 <lv_indev_read_timer_cb+0xc4>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 80056ac:	7963      	ldrb	r3, [r4, #5]
 80056ae:	f013 0f01 	tst.w	r3, #1
 80056b2:	d077      	beq.n	80057a4 <lv_indev_read_timer_cb+0x628>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 80056b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80056b6:	f01b fa9e 	bl	8020bf6 <lv_tick_elaps>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	8bdb      	ldrh	r3, [r3, #30]
 80056be:	4298      	cmp	r0, r3
 80056c0:	f67f adbe 	bls.w	8005240 <lv_indev_read_timer_cb+0xc4>
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80056c4:	f01b fa93 	bl	8020bee <lv_tick_get>
 80056c8:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 80056ca:	9901      	ldr	r1, [sp, #4]
 80056cc:	290a      	cmp	r1, #10
 80056ce:	f000 80ad 	beq.w	800582c <lv_indev_read_timer_cb+0x6b0>
            else if(data->key == LV_KEY_LEFT) {
 80056d2:	2914      	cmp	r1, #20
 80056d4:	f000 80b6 	beq.w	8005844 <lv_indev_read_timer_cb+0x6c8>
            else if(data->key == LV_KEY_RIGHT) {
 80056d8:	2913      	cmp	r1, #19
 80056da:	f040 80b9 	bne.w	8005850 <lv_indev_read_timer_cb+0x6d4>
                data->enc_diff++;
 80056de:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80056e8:	e5aa      	b.n	8005240 <lv_indev_read_timer_cb+0xc4>
        i->proc.pr_timestamp = lv_tick_get();
 80056ea:	f01b fa80 	bl	8020bee <lv_tick_get>
 80056ee:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
 80056f0:	9901      	ldr	r1, [sp, #4]
 80056f2:	290a      	cmp	r1, #10
 80056f4:	d00f      	beq.n	8005716 <lv_indev_read_timer_cb+0x59a>
        else if(data->key == LV_KEY_LEFT) {
 80056f6:	2914      	cmp	r1, #20
 80056f8:	d031      	beq.n	800575e <lv_indev_read_timer_cb+0x5e2>
        else if(data->key == LV_KEY_RIGHT) {
 80056fa:	2913      	cmp	r1, #19
 80056fc:	d035      	beq.n	800576a <lv_indev_read_timer_cb+0x5ee>
        else if(data->key == LV_KEY_ESC) {
 80056fe:	291b      	cmp	r1, #27
 8005700:	d039      	beq.n	8005776 <lv_indev_read_timer_cb+0x5fa>
            lv_group_send_data(g, data->key);
 8005702:	4640      	mov	r0, r8
 8005704:	f7ff f89f 	bl	8004846 <lv_group_send_data>
            if(indev_reset_check(&i->proc)) return;
 8005708:	1d20      	adds	r0, r4, #4
 800570a:	f7ff f94f 	bl	80049ac <indev_reset_check>
 800570e:	2800      	cmp	r0, #0
 8005710:	f43f ad96 	beq.w	8005240 <lv_indev_read_timer_cb+0xc4>
 8005714:	e610      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8005716:	6838      	ldr	r0, [r7, #0]
 8005718:	f001 ffa5 	bl	8007666 <lv_obj_is_editable>
 800571c:	b130      	cbz	r0, 800572c <lv_indev_read_timer_cb+0x5b0>
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 800571e:	4640      	mov	r0, r8
 8005720:	f7ff f914 	bl	800494c <lv_group_get_editing>
 8005724:	2800      	cmp	r0, #0
 8005726:	f43f ad8b 	beq.w	8005240 <lv_indev_read_timer_cb+0xc4>
 800572a:	e00c      	b.n	8005746 <lv_indev_read_timer_cb+0x5ca>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 800572c:	2110      	movs	r1, #16
 800572e:	6838      	ldr	r0, [r7, #0]
 8005730:	f001 fcb0 	bl	8007094 <lv_obj_has_flag>
 8005734:	4681      	mov	r9, r0
            if(lv_group_get_editing(g) == true || editable_or_scrollable == false) {
 8005736:	4640      	mov	r0, r8
 8005738:	f7ff f908 	bl	800494c <lv_group_get_editing>
 800573c:	b918      	cbnz	r0, 8005746 <lv_indev_read_timer_cb+0x5ca>
 800573e:	f1b9 0f00 	cmp.w	r9, #0
 8005742:	f47f ad7d 	bne.w	8005240 <lv_indev_read_timer_cb+0xc4>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, indev_act);
 8005746:	682a      	ldr	r2, [r5, #0]
 8005748:	2101      	movs	r1, #1
 800574a:	6838      	ldr	r0, [r7, #0]
 800574c:	f7fe fe3a 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005750:	1d20      	adds	r0, r4, #4
 8005752:	f7ff f92b 	bl	80049ac <indev_reset_check>
 8005756:	2800      	cmp	r0, #0
 8005758:	f43f ad72 	beq.w	8005240 <lv_indev_read_timer_cb+0xc4>
 800575c:	e5ec      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
            data->enc_diff--;
 800575e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005762:	3b01      	subs	r3, #1
 8005764:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005768:	e56a      	b.n	8005240 <lv_indev_read_timer_cb+0xc4>
            data->enc_diff++;
 800576a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005774:	e564      	b.n	8005240 <lv_indev_read_timer_cb+0xc4>
            lv_group_send_data(g, LV_KEY_ESC);
 8005776:	4640      	mov	r0, r8
 8005778:	f7ff f865 	bl	8004846 <lv_group_send_data>
            if(indev_reset_check(&i->proc)) return;
 800577c:	f104 0904 	add.w	r9, r4, #4
 8005780:	4648      	mov	r0, r9
 8005782:	f7ff f913 	bl	80049ac <indev_reset_check>
 8005786:	2800      	cmp	r0, #0
 8005788:	f47f add6 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, indev_act);
 800578c:	682a      	ldr	r2, [r5, #0]
 800578e:	2120      	movs	r1, #32
 8005790:	6838      	ldr	r0, [r7, #0]
 8005792:	f7fe fe17 	bl	80043c4 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8005796:	4648      	mov	r0, r9
 8005798:	f7ff f908 	bl	80049ac <indev_reset_check>
 800579c:	2800      	cmp	r0, #0
 800579e:	f43f ad4f 	beq.w	8005240 <lv_indev_read_timer_cb+0xc4>
 80057a2:	e5c9      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver->long_press_time) {
 80057a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80057a6:	f01b fa26 	bl	8020bf6 <lv_tick_elaps>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	8b9b      	ldrh	r3, [r3, #28]
 80057ae:	4298      	cmp	r0, r3
 80057b0:	d805      	bhi.n	80057be <lv_indev_read_timer_cb+0x642>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver->long_press_repeat_time) {
 80057b2:	7963      	ldrb	r3, [r4, #5]
 80057b4:	f013 0f01 	tst.w	r3, #1
 80057b8:	f43f ad42 	beq.w	8005240 <lv_indev_read_timer_cb+0xc4>
 80057bc:	e77a      	b.n	80056b4 <lv_indev_read_timer_cb+0x538>
            i->proc.long_pr_sent = 1;
 80057be:	7963      	ldrb	r3, [r4, #5]
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	7163      	strb	r3, [r4, #5]
            i->proc.longpr_rep_timestamp = lv_tick_get();
 80057c6:	f01b fa12 	bl	8020bee <lv_tick_get>
 80057ca:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
 80057cc:	9b01      	ldr	r3, [sp, #4]
 80057ce:	2b0a      	cmp	r3, #10
 80057d0:	d004      	beq.n	80057dc <lv_indev_read_timer_cb+0x660>
            i->proc.long_pr_sent = 1;
 80057d2:	7963      	ldrb	r3, [r4, #5]
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	7163      	strb	r3, [r4, #5]
 80057da:	e531      	b.n	8005240 <lv_indev_read_timer_cb+0xc4>
                bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 80057dc:	6838      	ldr	r0, [r7, #0]
 80057de:	f001 ff42 	bl	8007666 <lv_obj_is_editable>
 80057e2:	b190      	cbz	r0, 800580a <lv_indev_read_timer_cb+0x68e>
                    if(lv_group_get_obj_count(g) > 1) {
 80057e4:	4640      	mov	r0, r8
 80057e6:	f7ff f8b8 	bl	800495a <lv_group_get_obj_count>
 80057ea:	2801      	cmp	r0, #1
 80057ec:	d9f1      	bls.n	80057d2 <lv_indev_read_timer_cb+0x656>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80057ee:	4640      	mov	r0, r8
 80057f0:	f7ff f8ac 	bl	800494c <lv_group_get_editing>
 80057f4:	f080 0101 	eor.w	r1, r0, #1
 80057f8:	b2c9      	uxtb	r1, r1
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff f839 	bl	8004872 <lv_group_set_editing>
                        lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 8005800:	2120      	movs	r1, #32
 8005802:	6838      	ldr	r0, [r7, #0]
 8005804:	f001 fc3b 	bl	800707e <lv_obj_clear_state>
 8005808:	e7e3      	b.n	80057d2 <lv_indev_read_timer_cb+0x656>
                                              lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 800580a:	2110      	movs	r1, #16
 800580c:	6838      	ldr	r0, [r7, #0]
 800580e:	f001 fc41 	bl	8007094 <lv_obj_has_flag>
                if(editable_or_scrollable) {
 8005812:	2800      	cmp	r0, #0
 8005814:	d1e6      	bne.n	80057e4 <lv_indev_read_timer_cb+0x668>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, indev_act);
 8005816:	682a      	ldr	r2, [r5, #0]
 8005818:	2105      	movs	r1, #5
 800581a:	6838      	ldr	r0, [r7, #0]
 800581c:	f7fe fdd2 	bl	80043c4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 8005820:	1d20      	adds	r0, r4, #4
 8005822:	f7ff f8c3 	bl	80049ac <indev_reset_check>
 8005826:	2800      	cmp	r0, #0
 8005828:	d0d3      	beq.n	80057d2 <lv_indev_read_timer_cb+0x656>
 800582a:	e585      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, indev_act);
 800582c:	682a      	ldr	r2, [r5, #0]
 800582e:	2106      	movs	r1, #6
 8005830:	6838      	ldr	r0, [r7, #0]
 8005832:	f7fe fdc7 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8005836:	1d20      	adds	r0, r4, #4
 8005838:	f7ff f8b8 	bl	80049ac <indev_reset_check>
 800583c:	2800      	cmp	r0, #0
 800583e:	f43f acff 	beq.w	8005240 <lv_indev_read_timer_cb+0xc4>
 8005842:	e579      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                data->enc_diff--;
 8005844:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005848:	3b01      	subs	r3, #1
 800584a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800584e:	e4f7      	b.n	8005240 <lv_indev_read_timer_cb+0xc4>
                lv_group_send_data(g, data->key);
 8005850:	4640      	mov	r0, r8
 8005852:	f7fe fff8 	bl	8004846 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 8005856:	1d20      	adds	r0, r4, #4
 8005858:	f7ff f8a8 	bl	80049ac <indev_reset_check>
 800585c:	2800      	cmp	r0, #0
 800585e:	f43f acef 	beq.w	8005240 <lv_indev_read_timer_cb+0xc4>
 8005862:	e569      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        if(data->key == LV_KEY_ENTER) {
 8005864:	9b01      	ldr	r3, [sp, #4]
 8005866:	2b0a      	cmp	r3, #10
 8005868:	d006      	beq.n	8005878 <lv_indev_read_timer_cb+0x6fc>
        i->proc.pr_timestamp = 0;
 800586a:	2200      	movs	r2, #0
 800586c:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
 800586e:	7963      	ldrb	r3, [r4, #5]
 8005870:	f362 0300 	bfi	r3, r2, #0, #1
 8005874:	7163      	strb	r3, [r4, #5]
 8005876:	e4e3      	b.n	8005240 <lv_indev_read_timer_cb+0xc4>
            bool editable_or_scrollable = lv_obj_is_editable(indev_obj_act) ||
 8005878:	f001 fef5 	bl	8007666 <lv_obj_is_editable>
 800587c:	2800      	cmp	r0, #0
 800587e:	d03a      	beq.n	80058f6 <lv_indev_read_timer_cb+0x77a>
            else if(lv_group_get_editing(g)) {
 8005880:	4640      	mov	r0, r8
 8005882:	f7ff f863 	bl	800494c <lv_group_get_editing>
 8005886:	2800      	cmp	r0, #0
 8005888:	d068      	beq.n	800595c <lv_indev_read_timer_cb+0x7e0>
                if(!i->proc.long_pr_sent || lv_group_get_obj_count(g) <= 1) {
 800588a:	7963      	ldrb	r3, [r4, #5]
 800588c:	f013 0f01 	tst.w	r3, #1
 8005890:	d004      	beq.n	800589c <lv_indev_read_timer_cb+0x720>
 8005892:	4640      	mov	r0, r8
 8005894:	f7ff f861 	bl	800495a <lv_group_get_obj_count>
 8005898:	2801      	cmp	r0, #1
 800589a:	d85a      	bhi.n	8005952 <lv_indev_read_timer_cb+0x7d6>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 800589c:	682a      	ldr	r2, [r5, #0]
 800589e:	2108      	movs	r1, #8
 80058a0:	6838      	ldr	r0, [r7, #0]
 80058a2:	f7fe fd8f 	bl	80043c4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80058a6:	f104 0904 	add.w	r9, r4, #4
 80058aa:	4648      	mov	r0, r9
 80058ac:	f7ff f87e 	bl	80049ac <indev_reset_check>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	f47f ad41 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 80058b6:	682a      	ldr	r2, [r5, #0]
 80058b8:	2104      	movs	r1, #4
 80058ba:	6838      	ldr	r0, [r7, #0]
 80058bc:	f7fe fd82 	bl	80043c4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80058c0:	4648      	mov	r0, r9
 80058c2:	f7ff f873 	bl	80049ac <indev_reset_check>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f47f ad36 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 80058cc:	682a      	ldr	r2, [r5, #0]
 80058ce:	2107      	movs	r1, #7
 80058d0:	6838      	ldr	r0, [r7, #0]
 80058d2:	f7fe fd77 	bl	80043c4 <lv_event_send>
                    if(indev_reset_check(&i->proc)) return;
 80058d6:	4648      	mov	r0, r9
 80058d8:	f7ff f868 	bl	80049ac <indev_reset_check>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f47f ad2b 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                    lv_group_send_data(g, LV_KEY_ENTER);
 80058e2:	210a      	movs	r1, #10
 80058e4:	4640      	mov	r0, r8
 80058e6:	f7fe ffae 	bl	8004846 <lv_group_send_data>
                    if(indev_reset_check(&i->proc)) return;
 80058ea:	4648      	mov	r0, r9
 80058ec:	f7ff f85e 	bl	80049ac <indev_reset_check>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	d0ba      	beq.n	800586a <lv_indev_read_timer_cb+0x6ee>
 80058f4:	e520      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                                          lv_obj_has_flag(indev_obj_act, LV_OBJ_FLAG_SCROLLABLE);
 80058f6:	2110      	movs	r1, #16
 80058f8:	6838      	ldr	r0, [r7, #0]
 80058fa:	f001 fbcb 	bl	8007094 <lv_obj_has_flag>
            if(editable_or_scrollable == false) {
 80058fe:	2800      	cmp	r0, #0
 8005900:	d1be      	bne.n	8005880 <lv_indev_read_timer_cb+0x704>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, indev_act);
 8005902:	682a      	ldr	r2, [r5, #0]
 8005904:	2108      	movs	r1, #8
 8005906:	6838      	ldr	r0, [r7, #0]
 8005908:	f7fe fd5c 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800590c:	f104 0904 	add.w	r9, r4, #4
 8005910:	4648      	mov	r0, r9
 8005912:	f7ff f84b 	bl	80049ac <indev_reset_check>
 8005916:	2800      	cmp	r0, #0
 8005918:	f47f ad0e 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 800591c:	7963      	ldrb	r3, [r4, #5]
 800591e:	f013 0f01 	tst.w	r3, #1
 8005922:	d010      	beq.n	8005946 <lv_indev_read_timer_cb+0x7ca>
                if(indev_reset_check(&i->proc)) return;
 8005924:	4648      	mov	r0, r9
 8005926:	f7ff f841 	bl	80049ac <indev_reset_check>
 800592a:	2800      	cmp	r0, #0
 800592c:	f47f ad04 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, indev_act);
 8005930:	682a      	ldr	r2, [r5, #0]
 8005932:	2107      	movs	r1, #7
 8005934:	6838      	ldr	r0, [r7, #0]
 8005936:	f7fe fd45 	bl	80043c4 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800593a:	4648      	mov	r0, r9
 800593c:	f7ff f836 	bl	80049ac <indev_reset_check>
 8005940:	2800      	cmp	r0, #0
 8005942:	d092      	beq.n	800586a <lv_indev_read_timer_cb+0x6ee>
 8005944:	e4f8      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, indev_act);
 8005946:	682a      	ldr	r2, [r5, #0]
 8005948:	2104      	movs	r1, #4
 800594a:	6838      	ldr	r0, [r7, #0]
 800594c:	f7fe fd3a 	bl	80043c4 <lv_event_send>
 8005950:	e7e8      	b.n	8005924 <lv_indev_read_timer_cb+0x7a8>
                    lv_obj_clear_state(indev_obj_act, LV_STATE_PRESSED);    /*Remove the pressed state manually*/
 8005952:	2120      	movs	r1, #32
 8005954:	6838      	ldr	r0, [r7, #0]
 8005956:	f001 fb92 	bl	800707e <lv_obj_clear_state>
 800595a:	e786      	b.n	800586a <lv_indev_read_timer_cb+0x6ee>
            else if(!i->proc.long_pr_sent) {
 800595c:	7963      	ldrb	r3, [r4, #5]
 800595e:	f013 0f01 	tst.w	r3, #1
 8005962:	d182      	bne.n	800586a <lv_indev_read_timer_cb+0x6ee>
                lv_group_set_editing(g, true); /*Set edit mode*/
 8005964:	2101      	movs	r1, #1
 8005966:	4640      	mov	r0, r8
 8005968:	f7fe ff83 	bl	8004872 <lv_group_set_editing>
 800596c:	e77d      	b.n	800586a <lv_indev_read_timer_cb+0x6ee>
                for(s = 0; s < -data->enc_diff; s++) {
 800596e:	f04f 0900 	mov.w	r9, #0
                    lv_group_send_data(g, LV_KEY_LEFT);
 8005972:	f04f 0a14 	mov.w	sl, #20
                    if(indev_reset_check(&i->proc)) return;
 8005976:	3404      	adds	r4, #4
                    lv_group_send_data(g, LV_KEY_LEFT);
 8005978:	4651      	mov	r1, sl
 800597a:	4640      	mov	r0, r8
 800597c:	f7fe ff63 	bl	8004846 <lv_group_send_data>
                    if(indev_reset_check(&i->proc)) return;
 8005980:	4620      	mov	r0, r4
 8005982:	f7ff f813 	bl	80049ac <indev_reset_check>
 8005986:	2800      	cmp	r0, #0
 8005988:	f47f acd6 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < -data->enc_diff; s++) {
 800598c:	f109 0901 	add.w	r9, r9, #1
 8005990:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005994:	425b      	negs	r3, r3
 8005996:	4599      	cmp	r9, r3
 8005998:	dbee      	blt.n	8005978 <lv_indev_read_timer_cb+0x7fc>
 800599a:	e4cd      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
            if(data->enc_diff < 0) {
 800599c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db15      	blt.n	80059d0 <lv_indev_read_timer_cb+0x854>
                for(s = 0; s < data->enc_diff; s++) {
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f77f acc7 	ble.w	8005338 <lv_indev_read_timer_cb+0x1bc>
 80059aa:	f04f 0900 	mov.w	r9, #0
                    if(indev_reset_check(&i->proc)) return;
 80059ae:	3404      	adds	r4, #4
                    lv_group_focus_next(g);
 80059b0:	4640      	mov	r0, r8
 80059b2:	f7fe fe79 	bl	80046a8 <lv_group_focus_next>
                    if(indev_reset_check(&i->proc)) return;
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7fe fff8 	bl	80049ac <indev_reset_check>
 80059bc:	2800      	cmp	r0, #0
 80059be:	f47f acbb 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < data->enc_diff; s++) {
 80059c2:	f109 0901 	add.w	r9, r9, #1
 80059c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80059ca:	4599      	cmp	r9, r3
 80059cc:	dbf0      	blt.n	80059b0 <lv_indev_read_timer_cb+0x834>
 80059ce:	e4b3      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < -data->enc_diff; s++) {
 80059d0:	f04f 0900 	mov.w	r9, #0
                    if(indev_reset_check(&i->proc)) return;
 80059d4:	3404      	adds	r4, #4
                    lv_group_focus_prev(g);
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7fe fe78 	bl	80046cc <lv_group_focus_prev>
                    if(indev_reset_check(&i->proc)) return;
 80059dc:	4620      	mov	r0, r4
 80059de:	f7fe ffe5 	bl	80049ac <indev_reset_check>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	f47f aca8 	bne.w	8005338 <lv_indev_read_timer_cb+0x1bc>
                for(s = 0; s < -data->enc_diff; s++) {
 80059e8:	f109 0901 	add.w	r9, r9, #1
 80059ec:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80059f0:	425b      	negs	r3, r3
 80059f2:	4599      	cmp	r9, r3
 80059f4:	dbef      	blt.n	80059d6 <lv_indev_read_timer_cb+0x85a>
 80059f6:	e49f      	b.n	8005338 <lv_indev_read_timer_cb+0x1bc>
        if(i->proc.types.pointer.last_point.x != x ||
 80059f8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80059fc:	454b      	cmp	r3, r9
 80059fe:	d104      	bne.n	8005a0a <lv_indev_read_timer_cb+0x88e>
 8005a00:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8005a04:	4553      	cmp	r3, sl
 8005a06:	f43f accf 	beq.w	80053a8 <lv_indev_read_timer_cb+0x22c>
            indev_proc_release(&i->proc);
 8005a0a:	1d20      	adds	r0, r4, #4
 8005a0c:	f7fe ffda 	bl	80049c4 <indev_proc_release>
 8005a10:	e4ca      	b.n	80053a8 <lv_indev_read_timer_cb+0x22c>
    if(data->state == LV_INDEV_STATE_PRESSED) indev_proc_press(&i->proc);
 8005a12:	4640      	mov	r0, r8
 8005a14:	f7ff f986 	bl	8004d24 <indev_proc_press>
 8005a18:	e4d9      	b.n	80053ce <lv_indev_read_timer_cb+0x252>
    indev_act     = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4a02      	ldr	r2, [pc, #8]	; (8005a28 <lv_indev_read_timer_cb+0x8ac>)
 8005a1e:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
 8005a20:	4a02      	ldr	r2, [pc, #8]	; (8005a2c <lv_indev_read_timer_cb+0x8b0>)
 8005a22:	6013      	str	r3, [r2, #0]
    INDEV_TRACE("finished");
 8005a24:	f7ff bbbe 	b.w	80051a4 <lv_indev_read_timer_cb+0x28>
 8005a28:	200025d0 	.word	0x200025d0
 8005a2c:	200025d4 	.word	0x200025d4

08005a30 <find_snap_point_y>:
 * @param ofs offset to snap points. Useful to get a snap point in an imagined case
 *            what if children are already moved by this value
 * @return the distance of the snap point.
 */
static lv_coord_t find_snap_point_y(const lv_obj_t * obj, lv_coord_t min, lv_coord_t max, lv_coord_t ofs)
{
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	b089      	sub	sp, #36	; 0x24
 8005a36:	4606      	mov	r6, r0
 8005a38:	9101      	str	r1, [sp, #4]
 8005a3a:	9203      	str	r2, [sp, #12]
 8005a3c:	9302      	str	r3, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_y(obj);
 8005a3e:	f003 ff8f 	bl	8009960 <lv_obj_get_scroll_snap_y>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8005a42:	b918      	cbnz	r0, 8005a4c <find_snap_point_y+0x1c>
 8005a44:	2000      	movs	r0, #0
            }
        }
    }

    return dist == LV_COORD_MAX ? 0 : -dist;
}
 8005a46:	b009      	add	sp, #36	; 0x24
 8005a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4c:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_top(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005a4e:	2210      	movs	r2, #16
 8005a50:	2100      	movs	r1, #0
 8005a52:	4630      	mov	r0, r6
 8005a54:	f005 fa2a 	bl	800aeac <lv_obj_get_style_prop>
 8005a58:	9004      	str	r0, [sp, #16]
    return (lv_coord_t)v.num;
 8005a5a:	b203      	sxth	r3, r0
 8005a5c:	9307      	str	r3, [sp, #28]
}

static inline lv_coord_t lv_obj_get_style_pad_bottom(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005a5e:	2211      	movs	r2, #17
 8005a60:	2100      	movs	r1, #0
 8005a62:	4630      	mov	r0, r6
 8005a64:	f005 fa22 	bl	800aeac <lv_obj_get_style_prop>
 8005a68:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)v.num;
 8005a6a:	b203      	sxth	r3, r0
 8005a6c:	9305      	str	r3, [sp, #20]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f006 f977 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005a74:	4607      	mov	r7, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d06e      	beq.n	8005b58 <find_snap_point_y+0x128>
 8005a7a:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 8005a7c:	f641 79ff 	movw	r9, #8191	; 0x1fff
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005a80:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8005b60 <find_snap_point_y+0x130>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 8005a84:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8005a88:	e025      	b.n	8005ad6 <find_snap_point_y+0xa6>
                    y_child = child->coords.y2;
 8005a8a:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
                    y_parent = obj->coords.y2 - pad_bottom;
 8005a8e:	8b72      	ldrh	r2, [r6, #26]
 8005a90:	9906      	ldr	r1, [sp, #24]
 8005a92:	1a52      	subs	r2, r2, r1
 8005a94:	b212      	sxth	r2, r2
                    break;
 8005a96:	e03d      	b.n	8005b14 <find_snap_point_y+0xe4>
                    y_child = child->coords.y1 + lv_area_get_height(&child->coords) / 2;
 8005a98:	8aeb      	ldrh	r3, [r5, #22]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005a9a:	8b6a      	ldrh	r2, [r5, #26]
 8005a9c:	3201      	adds	r2, #1
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	b211      	sxth	r1, r2
 8005aa2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005aa6:	440a      	add	r2, r1
 8005aa8:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8005aac:	b21b      	sxth	r3, r3
                    y_parent = obj->coords.y1 + pad_top + (lv_area_get_height(&obj->coords) - pad_top - pad_bottom) / 2;
 8005aae:	8af1      	ldrh	r1, [r6, #22]
 8005ab0:	8b72      	ldrh	r2, [r6, #26]
 8005ab2:	3201      	adds	r2, #1
 8005ab4:	1a52      	subs	r2, r2, r1
 8005ab6:	b212      	sxth	r2, r2
 8005ab8:	9807      	ldr	r0, [sp, #28]
 8005aba:	1a12      	subs	r2, r2, r0
 8005abc:	9805      	ldr	r0, [sp, #20]
 8005abe:	1a12      	subs	r2, r2, r0
 8005ac0:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8005ac4:	9a04      	ldr	r2, [sp, #16]
 8005ac6:	188a      	adds	r2, r1, r2
 8005ac8:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8005acc:	b212      	sxth	r2, r2
                    break;
 8005ace:	e021      	b.n	8005b14 <find_snap_point_y+0xe4>
    for(i = 0; i < child_cnt; i++) {
 8005ad0:	3401      	adds	r4, #1
 8005ad2:	42a7      	cmp	r7, r4
 8005ad4:	d038      	beq.n	8005b48 <find_snap_point_y+0x118>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005ad6:	68b3      	ldr	r3, [r6, #8]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005ade:	4641      	mov	r1, r8
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	f001 fade 	bl	80070a2 <lv_obj_has_flag_any>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1f2      	bne.n	8005ad0 <find_snap_point_y+0xa0>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 8005aea:	4659      	mov	r1, fp
 8005aec:	4628      	mov	r0, r5
 8005aee:	f001 fad1 	bl	8007094 <lv_obj_has_flag>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d0ec      	beq.n	8005ad0 <find_snap_point_y+0xa0>
            switch(align) {
 8005af6:	f1ba 0f02 	cmp.w	sl, #2
 8005afa:	d0c6      	beq.n	8005a8a <find_snap_point_y+0x5a>
 8005afc:	f1ba 0f03 	cmp.w	sl, #3
 8005b00:	d0ca      	beq.n	8005a98 <find_snap_point_y+0x68>
 8005b02:	f1ba 0f01 	cmp.w	sl, #1
 8005b06:	d1e3      	bne.n	8005ad0 <find_snap_point_y+0xa0>
                    y_child = child->coords.y1;
 8005b08:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
                    y_parent = obj->coords.y1 + pad_top;
 8005b0c:	8af2      	ldrh	r2, [r6, #22]
 8005b0e:	9904      	ldr	r1, [sp, #16]
 8005b10:	440a      	add	r2, r1
 8005b12:	b212      	sxth	r2, r2
            y_child += ofs;
 8005b14:	9902      	ldr	r1, [sp, #8]
 8005b16:	440b      	add	r3, r1
 8005b18:	b299      	uxth	r1, r3
 8005b1a:	b21b      	sxth	r3, r3
            if(y_child >= min && y_child <= max) {
 8005b1c:	9801      	ldr	r0, [sp, #4]
 8005b1e:	4283      	cmp	r3, r0
 8005b20:	dbd6      	blt.n	8005ad0 <find_snap_point_y+0xa0>
 8005b22:	9803      	ldr	r0, [sp, #12]
 8005b24:	4283      	cmp	r3, r0
 8005b26:	dcd3      	bgt.n	8005ad0 <find_snap_point_y+0xa0>
                lv_coord_t y = y_child -  y_parent;
 8005b28:	1a8a      	subs	r2, r1, r2
 8005b2a:	b212      	sxth	r2, r2
                if(LV_ABS(y) < LV_ABS(dist)) dist = y;
 8005b2c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8005b30:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8005b34:	ea89 73e9 	eor.w	r3, r9, r9, asr #31
 8005b38:	eba3 73e9 	sub.w	r3, r3, r9, asr #31
 8005b3c:	b289      	uxth	r1, r1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4299      	cmp	r1, r3
 8005b42:	bf38      	it	cc
 8005b44:	4691      	movcc	r9, r2
 8005b46:	e7c3      	b.n	8005ad0 <find_snap_point_y+0xa0>
    return dist == LV_COORD_MAX ? 0 : -dist;
 8005b48:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005b4c:	4599      	cmp	r9, r3
 8005b4e:	d005      	beq.n	8005b5c <find_snap_point_y+0x12c>
 8005b50:	f1c9 0000 	rsb	r0, r9, #0
 8005b54:	b200      	sxth	r0, r0
 8005b56:	e776      	b.n	8005a46 <find_snap_point_y+0x16>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e774      	b.n	8005a46 <find_snap_point_y+0x16>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e772      	b.n	8005a46 <find_snap_point_y+0x16>
 8005b60:	00040001 	.word	0x00040001

08005b64 <find_snap_point_x>:
{
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	b089      	sub	sp, #36	; 0x24
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	9101      	str	r1, [sp, #4]
 8005b6e:	9203      	str	r2, [sp, #12]
 8005b70:	9302      	str	r3, [sp, #8]
    lv_scroll_snap_t align = lv_obj_get_scroll_snap_x(obj);
 8005b72:	f003 feed 	bl	8009950 <lv_obj_get_scroll_snap_x>
    if(align == LV_SCROLL_SNAP_NONE) return 0;
 8005b76:	b918      	cbnz	r0, 8005b80 <find_snap_point_x+0x1c>
 8005b78:	2000      	movs	r0, #0
}
 8005b7a:	b009      	add	sp, #36	; 0x24
 8005b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b80:	4682      	mov	sl, r0
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005b82:	2212      	movs	r2, #18
 8005b84:	2100      	movs	r1, #0
 8005b86:	4630      	mov	r0, r6
 8005b88:	f005 f990 	bl	800aeac <lv_obj_get_style_prop>
 8005b8c:	9004      	str	r0, [sp, #16]
    return (lv_coord_t)v.num;
 8005b8e:	b203      	sxth	r3, r0
 8005b90:	9307      	str	r3, [sp, #28]
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005b92:	2213      	movs	r2, #19
 8005b94:	2100      	movs	r1, #0
 8005b96:	4630      	mov	r0, r6
 8005b98:	f005 f988 	bl	800aeac <lv_obj_get_style_prop>
 8005b9c:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)v.num;
 8005b9e:	b203      	sxth	r3, r0
 8005ba0:	9305      	str	r3, [sp, #20]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	f006 f8dd 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8005ba8:	4607      	mov	r7, r0
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d06e      	beq.n	8005c8c <find_snap_point_x+0x128>
 8005bae:	2400      	movs	r4, #0
    lv_coord_t dist = LV_COORD_MAX;
 8005bb0:	f641 79ff 	movw	r9, #8191	; 0x1fff
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005bb4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8005c94 <find_snap_point_x+0x130>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 8005bb8:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8005bbc:	e025      	b.n	8005c0a <find_snap_point_x+0xa6>
                    x_child = child->coords.x2;
 8005bbe:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
                    x_parent = obj->coords.x2 - pad_right;
 8005bc2:	8b32      	ldrh	r2, [r6, #24]
 8005bc4:	9906      	ldr	r1, [sp, #24]
 8005bc6:	1a52      	subs	r2, r2, r1
 8005bc8:	b212      	sxth	r2, r2
                    break;
 8005bca:	e03d      	b.n	8005c48 <find_snap_point_x+0xe4>
                    x_child = child->coords.x1 + lv_area_get_width(&child->coords) / 2;
 8005bcc:	8aab      	ldrh	r3, [r5, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8005bce:	8b2a      	ldrh	r2, [r5, #24]
 8005bd0:	3201      	adds	r2, #1
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	b211      	sxth	r1, r2
 8005bd6:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005bda:	440a      	add	r2, r1
 8005bdc:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8005be0:	b21b      	sxth	r3, r3
                    x_parent = obj->coords.x1 + pad_left + (lv_area_get_width(&obj->coords) - pad_left - pad_right) / 2;
 8005be2:	8ab1      	ldrh	r1, [r6, #20]
 8005be4:	8b32      	ldrh	r2, [r6, #24]
 8005be6:	3201      	adds	r2, #1
 8005be8:	1a52      	subs	r2, r2, r1
 8005bea:	b212      	sxth	r2, r2
 8005bec:	9807      	ldr	r0, [sp, #28]
 8005bee:	1a12      	subs	r2, r2, r0
 8005bf0:	9805      	ldr	r0, [sp, #20]
 8005bf2:	1a12      	subs	r2, r2, r0
 8005bf4:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8005bf8:	9a04      	ldr	r2, [sp, #16]
 8005bfa:	188a      	adds	r2, r1, r2
 8005bfc:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8005c00:	b212      	sxth	r2, r2
                    break;
 8005c02:	e021      	b.n	8005c48 <find_snap_point_x+0xe4>
    for(i = 0; i < child_cnt; i++) {
 8005c04:	3401      	adds	r4, #1
 8005c06:	42a7      	cmp	r7, r4
 8005c08:	d038      	beq.n	8005c7c <find_snap_point_x+0x118>
        lv_obj_t * child = obj->spec_attr->children[i];
 8005c0a:	68b3      	ldr	r3, [r6, #8]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8005c12:	4641      	mov	r1, r8
 8005c14:	4628      	mov	r0, r5
 8005c16:	f001 fa44 	bl	80070a2 <lv_obj_has_flag_any>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d1f2      	bne.n	8005c04 <find_snap_point_x+0xa0>
        if(lv_obj_has_flag(child, LV_OBJ_FLAG_SNAPPABLE)) {
 8005c1e:	4659      	mov	r1, fp
 8005c20:	4628      	mov	r0, r5
 8005c22:	f001 fa37 	bl	8007094 <lv_obj_has_flag>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d0ec      	beq.n	8005c04 <find_snap_point_x+0xa0>
            switch(align) {
 8005c2a:	f1ba 0f02 	cmp.w	sl, #2
 8005c2e:	d0c6      	beq.n	8005bbe <find_snap_point_x+0x5a>
 8005c30:	f1ba 0f03 	cmp.w	sl, #3
 8005c34:	d0ca      	beq.n	8005bcc <find_snap_point_x+0x68>
 8005c36:	f1ba 0f01 	cmp.w	sl, #1
 8005c3a:	d1e3      	bne.n	8005c04 <find_snap_point_x+0xa0>
                    x_child = child->coords.x1;
 8005c3c:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
                    x_parent = obj->coords.x1 + pad_left;
 8005c40:	8ab2      	ldrh	r2, [r6, #20]
 8005c42:	9904      	ldr	r1, [sp, #16]
 8005c44:	440a      	add	r2, r1
 8005c46:	b212      	sxth	r2, r2
            x_child += ofs;
 8005c48:	9902      	ldr	r1, [sp, #8]
 8005c4a:	440b      	add	r3, r1
 8005c4c:	b299      	uxth	r1, r3
 8005c4e:	b21b      	sxth	r3, r3
            if(x_child >= min && x_child <= max) {
 8005c50:	9801      	ldr	r0, [sp, #4]
 8005c52:	4283      	cmp	r3, r0
 8005c54:	dbd6      	blt.n	8005c04 <find_snap_point_x+0xa0>
 8005c56:	9803      	ldr	r0, [sp, #12]
 8005c58:	4283      	cmp	r3, r0
 8005c5a:	dcd3      	bgt.n	8005c04 <find_snap_point_x+0xa0>
                lv_coord_t x = x_child -  x_parent;
 8005c5c:	1a8a      	subs	r2, r1, r2
 8005c5e:	b212      	sxth	r2, r2
                if(LV_ABS(x) < LV_ABS(dist)) dist = x;
 8005c60:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8005c64:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8005c68:	ea89 73e9 	eor.w	r3, r9, r9, asr #31
 8005c6c:	eba3 73e9 	sub.w	r3, r3, r9, asr #31
 8005c70:	b289      	uxth	r1, r1
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	4299      	cmp	r1, r3
 8005c76:	bf38      	it	cc
 8005c78:	4691      	movcc	r9, r2
 8005c7a:	e7c3      	b.n	8005c04 <find_snap_point_x+0xa0>
    return dist == LV_COORD_MAX ? 0 : -dist;
 8005c7c:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8005c80:	4599      	cmp	r9, r3
 8005c82:	d005      	beq.n	8005c90 <find_snap_point_x+0x12c>
 8005c84:	f1c9 0000 	rsb	r0, r9, #0
 8005c88:	b200      	sxth	r0, r0
 8005c8a:	e776      	b.n	8005b7a <find_snap_point_x+0x16>
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e774      	b.n	8005b7a <find_snap_point_x+0x16>
 8005c90:	2000      	movs	r0, #0
 8005c92:	e772      	b.n	8005b7a <find_snap_point_x+0x16>
 8005c94:	00040001 	.word	0x00040001

08005c98 <elastic_diff>:
    return move;
}

static lv_coord_t elastic_diff(lv_obj_t * scroll_obj, lv_coord_t diff, lv_coord_t scroll_start, lv_coord_t scroll_end,
                               lv_dir_t dir)
{
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	4617      	mov	r7, r2
 8005ca2:	461e      	mov	r6, r3
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_ELASTIC)) {
 8005ca4:	2120      	movs	r1, #32
 8005ca6:	f001 f9f5 	bl	8007094 <lv_obj_has_flag>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f000 80c5 	beq.w	8005e3a <elastic_diff+0x1a2>
        /*If there is snapping in the current direction don't use the elastic factor because
         *it's natural that the first and last items are scrolled (snapped) in.*/
        lv_scroll_snap_t snap;
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8005cb0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d02d      	beq.n	8005d14 <elastic_diff+0x7c>
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f003 fe51 	bl	8009960 <lv_obj_get_scroll_snap_y>
 8005cbe:	4680      	mov	r8, r0

        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8005cc0:	f7fe ffee 	bl	8004ca0 <lv_indev_get_obj_act>
 8005cc4:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005cc6:	2210      	movs	r2, #16
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f005 f8ee 	bl	800aeac <lv_obj_get_style_prop>
 8005cd0:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005cd2:	2211      	movs	r2, #17
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f005 f8e8 	bl	800aeac <lv_obj_get_style_prop>
        }
        else {
            lv_coord_t pad_top = lv_obj_get_style_pad_top(scroll_obj, LV_PART_MAIN);
            lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(scroll_obj, LV_PART_MAIN);

            switch(snap) {
 8005cdc:	f1b8 0f02 	cmp.w	r8, #2
 8005ce0:	f000 8086 	beq.w	8005df0 <elastic_diff+0x158>
 8005ce4:	f1b8 0f03 	cmp.w	r8, #3
 8005ce8:	d059      	beq.n	8005d9e <elastic_diff+0x106>
 8005cea:	f1b8 0f01 	cmp.w	r8, #1
 8005cee:	d079      	beq.n	8005de4 <elastic_diff+0x14c>
                    act_obj_point = act_obj->coords.y2;
                    break;
            }
        }

        if(scroll_end < 0) {
 8005cf0:	2e00      	cmp	r6, #0
 8005cf2:	f280 8088 	bge.w	8005e06 <elastic_diff+0x16e>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;

            /*Rounding*/
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8005cf6:	2c00      	cmp	r4, #0
 8005cf8:	bfbc      	itt	lt
 8005cfa:	1ea0      	sublt	r0, r4, #2
 8005cfc:	b204      	sxthlt	r4, r0
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 8005cfe:	2c00      	cmp	r4, #0
 8005d00:	bfc4      	itt	gt
 8005d02:	1ca0      	addgt	r0, r4, #2
 8005d04:	b204      	sxthgt	r4, r0
            return diff / ELASTIC_SLOWNESS_FACTOR;
 8005d06:	4620      	mov	r0, r4
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	bfb8      	it	lt
 8005d0c:	1ce0      	addlt	r0, r4, #3
 8005d0e:	f340 008f 	sbfx	r0, r0, #2, #16
 8005d12:	e09b      	b.n	8005e4c <elastic_diff+0x1b4>
        snap = dir == LV_DIR_HOR ? lv_obj_get_scroll_snap_x(scroll_obj) : lv_obj_get_scroll_snap_y(scroll_obj);
 8005d14:	4628      	mov	r0, r5
 8005d16:	f003 fe1b 	bl	8009950 <lv_obj_get_scroll_snap_x>
 8005d1a:	4680      	mov	r8, r0
        lv_obj_t * act_obj = lv_indev_get_obj_act();
 8005d1c:	f7fe ffc0 	bl	8004ca0 <lv_indev_get_obj_act>
 8005d20:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005d22:	2212      	movs	r2, #18
 8005d24:	2100      	movs	r1, #0
 8005d26:	4628      	mov	r0, r5
 8005d28:	f005 f8c0 	bl	800aeac <lv_obj_get_style_prop>
 8005d2c:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005d2e:	2213      	movs	r2, #19
 8005d30:	2100      	movs	r1, #0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f005 f8ba 	bl	800aeac <lv_obj_get_style_prop>
            switch(snap) {
 8005d38:	f1b8 0f02 	cmp.w	r8, #2
 8005d3c:	d029      	beq.n	8005d92 <elastic_diff+0xfa>
 8005d3e:	f1b8 0f03 	cmp.w	r8, #3
 8005d42:	d008      	beq.n	8005d56 <elastic_diff+0xbe>
 8005d44:	f1b8 0f01 	cmp.w	r8, #1
 8005d48:	d1d2      	bne.n	8005cf0 <elastic_diff+0x58>
                    snap_point = scroll_obj->coords.x1 + pad_left;
 8005d4a:	8aab      	ldrh	r3, [r5, #20]
 8005d4c:	4453      	add	r3, sl
 8005d4e:	b21b      	sxth	r3, r3
                    act_obj_point = act_obj->coords.x1;
 8005d50:	f9b9 2014 	ldrsh.w	r2, [r9, #20]
                    break;
 8005d54:	e040      	b.n	8005dd8 <elastic_diff+0x140>
 8005d56:	8aaa      	ldrh	r2, [r5, #20]
 8005d58:	8b2b      	ldrh	r3, [r5, #24]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	1a9b      	subs	r3, r3, r2
                    snap_point = pad_left + (lv_area_get_width(&scroll_obj->coords) - pad_left - pad_right) / 2 + scroll_obj->coords.x1;
 8005d5e:	b21b      	sxth	r3, r3
 8005d60:	fa0f f18a 	sxth.w	r1, sl
 8005d64:	1a5b      	subs	r3, r3, r1
 8005d66:	b200      	sxth	r0, r0
 8005d68:	1a1b      	subs	r3, r3, r0
 8005d6a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005d6e:	4452      	add	r2, sl
 8005d70:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8005d74:	b21b      	sxth	r3, r3
 8005d76:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8005d7a:	f8b9 1018 	ldrh.w	r1, [r9, #24]
 8005d7e:	3101      	adds	r1, #1
 8005d80:	1a89      	subs	r1, r1, r2
                    act_obj_point = lv_area_get_width(&act_obj->coords) / 2 + act_obj->coords.x1;
 8005d82:	b208      	sxth	r0, r1
 8005d84:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8005d88:	4401      	add	r1, r0
 8005d8a:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8005d8e:	b212      	sxth	r2, r2
                    break;
 8005d90:	e022      	b.n	8005dd8 <elastic_diff+0x140>
                    snap_point = scroll_obj->coords.x2 - pad_right;
 8005d92:	8b2b      	ldrh	r3, [r5, #24]
 8005d94:	1a18      	subs	r0, r3, r0
 8005d96:	b203      	sxth	r3, r0
                    act_obj_point = act_obj->coords.x2;
 8005d98:	f9b9 2018 	ldrsh.w	r2, [r9, #24]
                    break;
 8005d9c:	e01c      	b.n	8005dd8 <elastic_diff+0x140>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8005d9e:	8ae9      	ldrh	r1, [r5, #22]
 8005da0:	8b6a      	ldrh	r2, [r5, #26]
 8005da2:	3201      	adds	r2, #1
 8005da4:	1a52      	subs	r2, r2, r1
                    snap_point = pad_top + (lv_area_get_height(&scroll_obj->coords) - pad_top - pad_bottom) / 2 + scroll_obj->coords.y1;
 8005da6:	b212      	sxth	r2, r2
 8005da8:	fa0f f389 	sxth.w	r3, r9
 8005dac:	1ad2      	subs	r2, r2, r3
 8005dae:	b200      	sxth	r0, r0
 8005db0:	1a13      	subs	r3, r2, r0
 8005db2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005db6:	4449      	add	r1, r9
 8005db8:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	f8ba 2016 	ldrh.w	r2, [sl, #22]
 8005dc2:	f8ba 101a 	ldrh.w	r1, [sl, #26]
 8005dc6:	3101      	adds	r1, #1
 8005dc8:	1a89      	subs	r1, r1, r2
                    act_obj_point = lv_area_get_height(&act_obj->coords) / 2 + act_obj->coords.y1;
 8005dca:	b208      	sxth	r0, r1
 8005dcc:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 8005dd0:	4401      	add	r1, r0
 8005dd2:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8005dd6:	b212      	sxth	r2, r2
        if(scroll_end < 0) {
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	db0f      	blt.n	8005dfc <elastic_diff+0x164>
        }
        else if(scroll_start < 0) {
 8005ddc:	2f00      	cmp	r7, #0
 8005dde:	db28      	blt.n	8005e32 <elastic_diff+0x19a>
 8005de0:	4620      	mov	r0, r4
 8005de2:	e033      	b.n	8005e4c <elastic_diff+0x1b4>
                    snap_point = scroll_obj->coords.y1 + pad_top;
 8005de4:	8aeb      	ldrh	r3, [r5, #22]
 8005de6:	444b      	add	r3, r9
 8005de8:	b21b      	sxth	r3, r3
                    act_obj_point = act_obj->coords.y1;
 8005dea:	f9ba 2016 	ldrsh.w	r2, [sl, #22]
                    break;
 8005dee:	e7f3      	b.n	8005dd8 <elastic_diff+0x140>
                    snap_point = scroll_obj->coords.y2 - pad_bottom;
 8005df0:	8b6b      	ldrh	r3, [r5, #26]
 8005df2:	1a18      	subs	r0, r3, r0
 8005df4:	b203      	sxth	r3, r0
                    act_obj_point = act_obj->coords.y2;
 8005df6:	f9ba 201a 	ldrsh.w	r2, [sl, #26]
                    break;
 8005dfa:	e7ed      	b.n	8005dd8 <elastic_diff+0x140>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point > snap_point) return diff;
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	f6bf af7a 	bge.w	8005cf6 <elastic_diff+0x5e>
 8005e02:	4620      	mov	r0, r4
 8005e04:	e022      	b.n	8005e4c <elastic_diff+0x1b4>
        else if(scroll_start < 0) {
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	da22      	bge.n	8005e50 <elastic_diff+0x1b8>
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 8005e0a:	f1b8 0f00 	cmp.w	r8, #0
 8005e0e:	d10e      	bne.n	8005e2e <elastic_diff+0x196>

            /*Rounding*/
            if(diff < 0) diff -= ELASTIC_SLOWNESS_FACTOR / 2;
 8005e10:	2c00      	cmp	r4, #0
 8005e12:	bfbc      	itt	lt
 8005e14:	1ea0      	sublt	r0, r4, #2
 8005e16:	b204      	sxthlt	r4, r0
            if(diff > 0) diff += ELASTIC_SLOWNESS_FACTOR / 2;
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	bfc4      	itt	gt
 8005e1c:	1ca0      	addgt	r0, r4, #2
 8005e1e:	b204      	sxthgt	r4, r0
            return diff / ELASTIC_SLOWNESS_FACTOR;
 8005e20:	4620      	mov	r0, r4
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	bfb8      	it	lt
 8005e26:	1ce0      	addlt	r0, r4, #3
 8005e28:	f340 008f 	sbfx	r0, r0, #2, #16
 8005e2c:	e00e      	b.n	8005e4c <elastic_diff+0x1b4>
 8005e2e:	2200      	movs	r2, #0
 8005e30:	4613      	mov	r3, r2
            if(snap != LV_SCROLL_SNAP_NONE && act_obj_point < snap_point) return diff;
 8005e32:	4293      	cmp	r3, r2
 8005e34:	ddec      	ble.n	8005e10 <elastic_diff+0x178>
 8005e36:	4620      	mov	r0, r4
 8005e38:	e008      	b.n	8005e4c <elastic_diff+0x1b4>
        }
    }
    else {
        /*Scroll back to the boundary if required*/
        if(scroll_end + diff < 0) diff = - scroll_end;
 8005e3a:	42e6      	cmn	r6, r4
 8005e3c:	bf44      	itt	mi
 8005e3e:	4270      	negmi	r0, r6
 8005e40:	b204      	sxthmi	r4, r0
        if(scroll_start - diff < 0) diff = scroll_start;
 8005e42:	1b3b      	subs	r3, r7, r4
 8005e44:	ea34 0023 	bics.w	r0, r4, r3, asr #32
 8005e48:	bf28      	it	cs
 8005e4a:	4638      	movcs	r0, r7
    }

    return diff;
}
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	4620      	mov	r0, r4
 8005e52:	e7fb      	b.n	8005e4c <elastic_diff+0x1b4>

08005e54 <_lv_indev_scroll_handler>:
    if(proc->types.pointer.vect.x == 0 && proc->types.pointer.vect.y == 0) {
 8005e54:	6943      	ldr	r3, [r0, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f000 8305 	beq.w	8006466 <_lv_indev_scroll_handler+0x612>
{
 8005e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e60:	b08d      	sub	sp, #52	; 0x34
 8005e62:	4607      	mov	r7, r0
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8005e64:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005e66:	9302      	str	r3, [sp, #8]
    if(scroll_obj == NULL) {
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80a2 	beq.w	8005fb2 <_lv_indev_scroll_handler+0x15e>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 8005e6e:	9e02      	ldr	r6, [sp, #8]
 8005e70:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005e74:	2500      	movs	r5, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8005e76:	f04f 0b6d 	mov.w	fp, #109	; 0x6d
 8005e7a:	46a8      	mov	r8, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8005e7c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8005e80:	465a      	mov	r2, fp
 8005e82:	4641      	mov	r1, r8
 8005e84:	4630      	mov	r0, r6
 8005e86:	f005 f811 	bl	800aeac <lv_obj_get_style_prop>
        angle += lv_obj_get_style_transform_angle(parent, 0);
 8005e8a:	4405      	add	r5, r0
 8005e8c:	fa1f f985 	uxth.w	r9, r5
 8005e90:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8005e92:	4652      	mov	r2, sl
 8005e94:	4641      	mov	r1, r8
 8005e96:	4630      	mov	r0, r6
 8005e98:	f005 f808 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005e9c:	b200      	sxth	r0, r0
        zoom *= (lv_obj_get_style_transform_zoom(parent, 0) / 256);
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	30ff      	addlt	r0, #255	; 0xff
 8005ea4:	1200      	asrs	r0, r0, #8
 8005ea6:	fb00 f404 	mul.w	r4, r0, r4
 8005eaa:	b224      	sxth	r4, r4
        parent = lv_obj_get_parent(parent);
 8005eac:	4630      	mov	r0, r6
 8005eae:	f005 ff3f 	bl	800bd30 <lv_obj_get_parent>
    while(parent) {
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d1e3      	bne.n	8005e80 <_lv_indev_scroll_handler+0x2c>
    if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 8005eb8:	b915      	cbnz	r5, 8005ec0 <_lv_indev_scroll_handler+0x6c>
 8005eba:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8005ebe:	d011      	beq.n	8005ee4 <_lv_indev_scroll_handler+0x90>
        zoom = (256 * 256) / zoom;
 8005ec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ec4:	fb92 f2f4 	sdiv	r2, r2, r4
        lv_point_t pivot = { 0, 0 };
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8005ece:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        angle = -angle;
 8005ed2:	f1c9 0100 	rsb	r1, r9, #0
        lv_point_transform(&proc->types.pointer.vect, angle, zoom, &pivot);
 8005ed6:	ab0b      	add	r3, sp, #44	; 0x2c
 8005ed8:	b212      	sxth	r2, r2
 8005eda:	b209      	sxth	r1, r1
 8005edc:	f107 0014 	add.w	r0, r7, #20
 8005ee0:	f01b fae0 	bl	80214a4 <lv_point_transform>
    if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 8005ee4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	f000 8289 	beq.w	8006404 <_lv_indev_scroll_handler+0x5b0>
        lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8005ef2:	9d02      	ldr	r5, [sp, #8]
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f003 fd4b 	bl	8009990 <lv_obj_get_scroll_top>
 8005efa:	4604      	mov	r4, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 8005efc:	4628      	mov	r0, r5
 8005efe:	f003 fd4f 	bl	80099a0 <lv_obj_get_scroll_bottom>
 8005f02:	4603      	mov	r3, r0
        diff_y = elastic_diff(scroll_obj, proc->types.pointer.vect.y, st, sb, LV_DIR_VER);
 8005f04:	220c      	movs	r2, #12
 8005f06:	9200      	str	r2, [sp, #0]
 8005f08:	4622      	mov	r2, r4
 8005f0a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f7ff fec2 	bl	8005c98 <elastic_diff>
 8005f14:	4604      	mov	r4, r0
    lv_coord_t diff_x = 0;
 8005f16:	2500      	movs	r5, #0
    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(scroll_obj);
 8005f18:	9802      	ldr	r0, [sp, #8]
 8005f1a:	f003 fd11 	bl	8009940 <lv_obj_get_scroll_dir>
    if((scroll_dir & LV_DIR_LEFT)   == 0 && diff_x > 0) diff_x = 0;
 8005f1e:	f010 0f01 	tst.w	r0, #1
 8005f22:	bf04      	itt	eq
 8005f24:	ea05 75e5 	andeq.w	r5, r5, r5, asr #31
 8005f28:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_RIGHT)  == 0 && diff_x < 0) diff_x = 0;
 8005f2a:	f010 0f02 	tst.w	r0, #2
 8005f2e:	bf04      	itt	eq
 8005f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f34:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_TOP)    == 0 && diff_y > 0) diff_y = 0;
 8005f36:	f010 0f04 	tst.w	r0, #4
 8005f3a:	bf04      	itt	eq
 8005f3c:	ea04 74e4 	andeq.w	r4, r4, r4, asr #31
 8005f40:	b224      	sxtheq	r4, r4
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && diff_y < 0) diff_y = 0;
 8005f42:	f010 0f08 	tst.w	r0, #8
 8005f46:	bf04      	itt	eq
 8005f48:	ea24 74e4 	biceq.w	r4, r4, r4, asr #31
 8005f4c:	b224      	sxtheq	r4, r4
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 8005f4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8005f52:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8005f56:	18e1      	adds	r1, r4, r3
 8005f58:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 8005f5a:	bfbc      	itt	lt
 8005f5c:	1ad2      	sublt	r2, r2, r3
 8005f5e:	b214      	sxthlt	r4, r2
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 8005f60:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8005f64:	18e1      	adds	r1, r4, r3
 8005f66:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 8005f68:	bfc4      	itt	gt
 8005f6a:	1ad3      	subgt	r3, r2, r3
 8005f6c:	b21c      	sxthgt	r4, r3
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8005f6e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005f72:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8005f76:	18e9      	adds	r1, r5, r3
 8005f78:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 8005f7a:	bfbc      	itt	lt
 8005f7c:	1ad2      	sublt	r2, r2, r3
 8005f7e:	b215      	sxthlt	r5, r2
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 8005f80:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8005f84:	18e9      	adds	r1, r5, r3
 8005f86:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 8005f88:	bfc4      	itt	gt
 8005f8a:	1ad3      	subgt	r3, r2, r3
 8005f8c:	b21d      	sxthgt	r5, r3
    _lv_obj_scroll_by_raw(scroll_obj, diff_x, diff_y);
 8005f8e:	4622      	mov	r2, r4
 8005f90:	4629      	mov	r1, r5
 8005f92:	9802      	ldr	r0, [sp, #8]
 8005f94:	f003 fe7e 	bl	8009c94 <_lv_obj_scroll_by_raw>
    if(proc->reset_query) return;
 8005f98:	787b      	ldrb	r3, [r7, #1]
 8005f9a:	f013 0f02 	tst.w	r3, #2
 8005f9e:	d105      	bne.n	8005fac <_lv_indev_scroll_handler+0x158>
    proc->types.pointer.scroll_sum.x += diff_x;
 8005fa0:	8b38      	ldrh	r0, [r7, #24]
 8005fa2:	4405      	add	r5, r0
 8005fa4:	833d      	strh	r5, [r7, #24]
    proc->types.pointer.scroll_sum.y += diff_y;
 8005fa6:	8b78      	ldrh	r0, [r7, #26]
 8005fa8:	4404      	add	r4, r0
 8005faa:	837c      	strh	r4, [r7, #26]
}
 8005fac:	b00d      	add	sp, #52	; 0x34
 8005fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev_act = lv_indev_get_act();
 8005fb2:	f7fe fdad 	bl	8004b10 <lv_indev_get_act>
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 8005fb6:	6803      	ldr	r3, [r0, #0]
 8005fb8:	7e1b      	ldrb	r3, [r3, #24]
 8005fba:	9303      	str	r3, [sp, #12]
    lv_obj_t * obj_act = proc->types.pointer.act_obj;
 8005fbc:	f8d7 a024 	ldr.w	sl, [r7, #36]	; 0x24
    proc->types.pointer.scroll_sum.x += proc->types.pointer.vect.x;
 8005fc0:	8b3b      	ldrh	r3, [r7, #24]
 8005fc2:	8aba      	ldrh	r2, [r7, #20]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	833b      	strh	r3, [r7, #24]
    proc->types.pointer.scroll_sum.y += proc->types.pointer.vect.y;
 8005fc8:	8b7b      	ldrh	r3, [r7, #26]
 8005fca:	8afa      	ldrh	r2, [r7, #22]
 8005fcc:	4413      	add	r3, r2
 8005fce:	837b      	strh	r3, [r7, #26]
    while(obj_act) {
 8005fd0:	f1ba 0f00 	cmp.w	sl, #0
 8005fd4:	d0ea      	beq.n	8005fac <_lv_indev_scroll_handler+0x158>
    lv_coord_t scroll_limit = indev_act->driver->scroll_limit;
 8005fd6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005fda:	9307      	str	r3, [sp, #28]
    lv_dir_t dir_candidate = LV_DIR_NONE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9306      	str	r3, [sp, #24]
    bool ver_en = false;
 8005fe0:	9304      	str	r3, [sp, #16]
    bool hor_en = false;
 8005fe2:	9305      	str	r3, [sp, #20]
        lv_point_t pivot = { 0, 0 };
 8005fe4:	469b      	mov	fp, r3
 8005fe6:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
 8005fea:	f8ad b02a 	strh.w	fp, [sp, #42]	; 0x2a
        while(parent) {
 8005fee:	f1ba 0f00 	cmp.w	sl, #0
 8005ff2:	f000 8230 	beq.w	8006456 <_lv_indev_scroll_handler+0x602>
 8005ff6:	4656      	mov	r6, sl
        int16_t zoom = 256;
 8005ff8:	f44f 7480 	mov.w	r4, #256	; 0x100
        int16_t angle = 0;
 8005ffc:	465d      	mov	r5, fp
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8005ffe:	f04f 096c 	mov.w	r9, #108	; 0x6c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8006002:	226d      	movs	r2, #109	; 0x6d
 8006004:	4659      	mov	r1, fp
 8006006:	4630      	mov	r0, r6
 8006008:	f004 ff50 	bl	800aeac <lv_obj_get_style_prop>
            angle += lv_obj_get_style_transform_angle(parent, 0);
 800600c:	4405      	add	r5, r0
 800600e:	fa1f f885 	uxth.w	r8, r5
 8006012:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8006014:	464a      	mov	r2, r9
 8006016:	4659      	mov	r1, fp
 8006018:	4630      	mov	r0, r6
 800601a:	f004 ff47 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800601e:	b200      	sxth	r0, r0
            zoom *= (lv_obj_get_style_transform_zoom(parent, 0) / 256);
 8006020:	2800      	cmp	r0, #0
 8006022:	bfb8      	it	lt
 8006024:	30ff      	addlt	r0, #255	; 0xff
 8006026:	1200      	asrs	r0, r0, #8
 8006028:	fb00 f404 	mul.w	r4, r0, r4
 800602c:	b224      	sxth	r4, r4
            parent = lv_obj_get_parent(parent);
 800602e:	4630      	mov	r0, r6
 8006030:	f005 fe7e 	bl	800bd30 <lv_obj_get_parent>
        while(parent) {
 8006034:	4606      	mov	r6, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	d1e3      	bne.n	8006002 <_lv_indev_scroll_handler+0x1ae>
        lv_point_t obj_scroll_sum = proc->types.pointer.scroll_sum;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	930b      	str	r3, [sp, #44]	; 0x2c
        if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 800603e:	b915      	cbnz	r5, 8006046 <_lv_indev_scroll_handler+0x1f2>
 8006040:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8006044:	d00b      	beq.n	800605e <_lv_indev_scroll_handler+0x20a>
            zoom = (256 * 256) / zoom;
 8006046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800604a:	fb92 f2f4 	sdiv	r2, r2, r4
            angle = -angle;
 800604e:	f1c8 0100 	rsb	r1, r8, #0
            lv_point_transform(&obj_scroll_sum, angle, zoom, &pivot);
 8006052:	ab0a      	add	r3, sp, #40	; 0x28
 8006054:	b212      	sxth	r2, r2
 8006056:	b209      	sxth	r1, r1
 8006058:	a80b      	add	r0, sp, #44	; 0x2c
 800605a:	f01b fa23 	bl	80214a4 <lv_point_transform>
        if(LV_ABS(obj_scroll_sum.x) > LV_ABS(obj_scroll_sum.y)) {
 800605e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8006062:	2a00      	cmp	r2, #0
 8006064:	bfb8      	it	lt
 8006066:	4252      	neglt	r2, r2
 8006068:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 800606c:	2b00      	cmp	r3, #0
 800606e:	bfb8      	it	lt
 8006070:	425b      	neglt	r3, r3
 8006072:	b292      	uxth	r2, r2
 8006074:	b29b      	uxth	r3, r3
            ver_en = true;
 8006076:	9904      	ldr	r1, [sp, #16]
 8006078:	429a      	cmp	r2, r3
 800607a:	bf98      	it	ls
 800607c:	2101      	movls	r1, #1
 800607e:	9104      	str	r1, [sp, #16]
 8006080:	9c05      	ldr	r4, [sp, #20]
 8006082:	429a      	cmp	r2, r3
 8006084:	bf88      	it	hi
 8006086:	2401      	movhi	r4, #1
 8006088:	9405      	str	r4, [sp, #20]
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLLABLE) == false) {
 800608a:	2110      	movs	r1, #16
 800608c:	4650      	mov	r0, sl
 800608e:	f001 f801 	bl	8007094 <lv_obj_has_flag>
 8006092:	b9b8      	cbnz	r0, 80060c4 <_lv_indev_scroll_handler+0x270>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 8006094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006098:	4650      	mov	r0, sl
 800609a:	f000 fffb 	bl	8007094 <lv_obj_has_flag>
 800609e:	b910      	cbnz	r0, 80060a6 <_lv_indev_scroll_handler+0x252>
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	f040 80b2 	bne.w	800620a <_lv_indev_scroll_handler+0x3b6>
            if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 80060a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060aa:	4650      	mov	r0, sl
 80060ac:	f000 fff2 	bl	8007094 <lv_obj_has_flag>
 80060b0:	b918      	cbnz	r0, 80060ba <_lv_indev_scroll_handler+0x266>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 80a8 	bne.w	800620a <_lv_indev_scroll_handler+0x3b6>
            obj_act = lv_obj_get_parent(obj_act);
 80060ba:	4650      	mov	r0, sl
 80060bc:	f005 fe38 	bl	800bd30 <lv_obj_get_parent>
 80060c0:	4682      	mov	sl, r0
            continue;
 80060c2:	e09e      	b.n	8006202 <_lv_indev_scroll_handler+0x3ae>
        lv_dir_t scroll_dir = lv_obj_get_scroll_dir(obj_act);
 80060c4:	4650      	mov	r0, sl
 80060c6:	f003 fc3b 	bl	8009940 <lv_obj_get_scroll_dir>
        if((scroll_dir & LV_DIR_LEFT) == 0) left_en = false;
 80060ca:	f010 0f01 	tst.w	r0, #1
 80060ce:	9b05      	ldr	r3, [sp, #20]
 80060d0:	bf14      	ite	ne
 80060d2:	461e      	movne	r6, r3
 80060d4:	2600      	moveq	r6, #0
        if((scroll_dir & LV_DIR_RIGHT) == 0) right_en = false;
 80060d6:	f010 0f02 	tst.w	r0, #2
 80060da:	bf08      	it	eq
 80060dc:	2300      	moveq	r3, #0
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
        if((scroll_dir & LV_DIR_TOP) == 0) up_en = false;
 80060e0:	f010 0f04 	tst.w	r0, #4
 80060e4:	9b04      	ldr	r3, [sp, #16]
 80060e6:	bf14      	ite	ne
 80060e8:	461c      	movne	r4, r3
 80060ea:	2400      	moveq	r4, #0
        if((scroll_dir & LV_DIR_BOTTOM) == 0) down_en = false;
 80060ec:	f010 0f08 	tst.w	r0, #8
 80060f0:	bf14      	ite	ne
 80060f2:	461d      	movne	r5, r3
 80060f4:	2500      	moveq	r5, #0
        lv_coord_t st = lv_obj_get_scroll_top(obj_act);
 80060f6:	4650      	mov	r0, sl
 80060f8:	f003 fc4a 	bl	8009990 <lv_obj_get_scroll_top>
 80060fc:	4680      	mov	r8, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj_act);
 80060fe:	4650      	mov	r0, sl
 8006100:	f003 fc4e 	bl	80099a0 <lv_obj_get_scroll_bottom>
 8006104:	9008      	str	r0, [sp, #32]
        lv_coord_t sl = lv_obj_get_scroll_left(obj_act);
 8006106:	4650      	mov	r0, sl
 8006108:	f003 fcb4 	bl	8009a74 <lv_obj_get_scroll_left>
 800610c:	4681      	mov	r9, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj_act);
 800610e:	4650      	mov	r0, sl
 8006110:	f003 fd24 	bl	8009b5c <lv_obj_get_scroll_right>
        if((st > 0 || sb > 0)  &&
 8006114:	f1b8 0f00 	cmp.w	r8, #0
 8006118:	f340 80b8 	ble.w	800628c <_lv_indev_scroll_handler+0x438>
 800611c:	b12c      	cbz	r4, 800612a <_lv_indev_scroll_handler+0x2d6>
           ((up_en    && obj_scroll_sum.y >=   scroll_limit) ||
 800611e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	4293      	cmp	r3, r2
 8006126:	f280 80b6 	bge.w	8006296 <_lv_indev_scroll_handler+0x442>
 800612a:	b16d      	cbz	r5, 8006148 <_lv_indev_scroll_handler+0x2f4>
            (down_en  && obj_scroll_sum.y <= - scroll_limit))) {
 800612c:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8006130:	9b03      	ldr	r3, [sp, #12]
 8006132:	425b      	negs	r3, r3
 8006134:	9902      	ldr	r1, [sp, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	bfd8      	it	le
 800613a:	4651      	movle	r1, sl
 800613c:	9102      	str	r1, [sp, #8]
 800613e:	9906      	ldr	r1, [sp, #24]
 8006140:	429a      	cmp	r2, r3
 8006142:	bfd8      	it	le
 8006144:	210c      	movle	r1, #12
 8006146:	9106      	str	r1, [sp, #24]
        if((sl > 0 || sr > 0)  &&
 8006148:	f1b9 0f00 	cmp.w	r9, #0
 800614c:	f340 80a8 	ble.w	80062a0 <_lv_indev_scroll_handler+0x44c>
 8006150:	b12e      	cbz	r6, 800615e <_lv_indev_scroll_handler+0x30a>
           ((left_en   && obj_scroll_sum.x >=   scroll_limit) ||
 8006152:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8006156:	9a07      	ldr	r2, [sp, #28]
 8006158:	4293      	cmp	r3, r2
 800615a:	f280 80a5 	bge.w	80062a8 <_lv_indev_scroll_handler+0x454>
 800615e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006160:	b16b      	cbz	r3, 800617e <_lv_indev_scroll_handler+0x32a>
            (right_en  && obj_scroll_sum.x <= - scroll_limit))) {
 8006162:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	425b      	negs	r3, r3
 800616a:	9902      	ldr	r1, [sp, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	bfd8      	it	le
 8006170:	4651      	movle	r1, sl
 8006172:	9102      	str	r1, [sp, #8]
 8006174:	9906      	ldr	r1, [sp, #24]
 8006176:	429a      	cmp	r2, r3
 8006178:	bfd8      	it	le
 800617a:	2103      	movle	r1, #3
 800617c:	9106      	str	r1, [sp, #24]
        if(st <= 0) up_en = false;
 800617e:	f1b8 0f00 	cmp.w	r8, #0
 8006182:	bfd8      	it	le
 8006184:	2400      	movle	r4, #0
        if(sb <= 0) down_en = false;
 8006186:	9b08      	ldr	r3, [sp, #32]
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfd8      	it	le
 800618c:	2500      	movle	r5, #0
        if(sl <= 0) left_en = false;
 800618e:	f1b9 0f00 	cmp.w	r9, #0
 8006192:	f340 8163 	ble.w	800645c <_lv_indev_scroll_handler+0x608>
        if(sr <= 0) right_en = false;
 8006196:	2800      	cmp	r0, #0
 8006198:	f340 8148 	ble.w	800642c <_lv_indev_scroll_handler+0x5d8>
        if((left_en  && obj_scroll_sum.x >=   scroll_limit) ||
 800619c:	b12e      	cbz	r6, 80061aa <_lv_indev_scroll_handler+0x356>
 800619e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80061a2:	9a07      	ldr	r2, [sp, #28]
 80061a4:	4293      	cmp	r3, r2
 80061a6:	f280 814a 	bge.w	800643e <_lv_indev_scroll_handler+0x5ea>
 80061aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ac:	b133      	cbz	r3, 80061bc <_lv_indev_scroll_handler+0x368>
           (right_en && obj_scroll_sum.x <= - scroll_limit) ||
 80061ae:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	425b      	negs	r3, r3
 80061b6:	429a      	cmp	r2, r3
 80061b8:	f340 8141 	ble.w	800643e <_lv_indev_scroll_handler+0x5ea>
 80061bc:	b12c      	cbz	r4, 80061ca <_lv_indev_scroll_handler+0x376>
           (up_en    && obj_scroll_sum.y >=   scroll_limit) ||
 80061be:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80061c2:	9a07      	ldr	r2, [sp, #28]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	f280 813a 	bge.w	800643e <_lv_indev_scroll_handler+0x5ea>
 80061ca:	b135      	cbz	r5, 80061da <_lv_indev_scroll_handler+0x386>
           (down_en  && obj_scroll_sum.y <= - scroll_limit)) {
 80061cc:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	425b      	negs	r3, r3
 80061d4:	429a      	cmp	r2, r3
 80061d6:	f340 8132 	ble.w	800643e <_lv_indev_scroll_handler+0x5ea>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_HOR) == false && hor_en) break;
 80061da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061de:	4650      	mov	r0, sl
 80061e0:	f000 ff58 	bl	8007094 <lv_obj_has_flag>
 80061e4:	b908      	cbnz	r0, 80061ea <_lv_indev_scroll_handler+0x396>
 80061e6:	9b05      	ldr	r3, [sp, #20]
 80061e8:	b97b      	cbnz	r3, 800620a <_lv_indev_scroll_handler+0x3b6>
        if(lv_obj_has_flag(obj_act, LV_OBJ_FLAG_SCROLL_CHAIN_VER) == false && ver_en) break;
 80061ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ee:	4650      	mov	r0, sl
 80061f0:	f000 ff50 	bl	8007094 <lv_obj_has_flag>
 80061f4:	b908      	cbnz	r0, 80061fa <_lv_indev_scroll_handler+0x3a6>
 80061f6:	9b04      	ldr	r3, [sp, #16]
 80061f8:	b93b      	cbnz	r3, 800620a <_lv_indev_scroll_handler+0x3b6>
        obj_act = lv_obj_get_parent(obj_act);
 80061fa:	4650      	mov	r0, sl
 80061fc:	f005 fd98 	bl	800bd30 <lv_obj_get_parent>
 8006200:	4682      	mov	sl, r0
    while(obj_act) {
 8006202:	f1ba 0f00 	cmp.w	sl, #0
 8006206:	f47f aeee 	bne.w	8005fe6 <_lv_indev_scroll_handler+0x192>
    if(obj_candidate) {
 800620a:	9a02      	ldr	r2, [sp, #8]
 800620c:	2a00      	cmp	r2, #0
 800620e:	f43f aecd 	beq.w	8005fac <_lv_indev_scroll_handler+0x158>
        proc->types.pointer.scroll_dir = dir_candidate;
 8006212:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006216:	9906      	ldr	r1, [sp, #24]
 8006218:	f361 0303 	bfi	r3, r1, #0, #4
 800621c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        proc->types.pointer.scroll_obj = obj_candidate;
 8006220:	62fa      	str	r2, [r7, #44]	; 0x2c
        proc->types.pointer.scroll_sum.x = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	833b      	strh	r3, [r7, #24]
        proc->types.pointer.scroll_sum.y = 0;
 8006226:	837b      	strh	r3, [r7, #26]
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ONE) == false) {
 8006228:	2180      	movs	r1, #128	; 0x80
 800622a:	4610      	mov	r0, r2
 800622c:	f000 ff32 	bl	8007094 <lv_obj_has_flag>
 8006230:	2800      	cmp	r0, #0
 8006232:	d13e      	bne.n	80062b2 <_lv_indev_scroll_handler+0x45e>
        lv_area_set(&proc->types.pointer.scroll_area, LV_COORD_MIN, LV_COORD_MIN, LV_COORD_MAX, LV_COORD_MAX);
 8006234:	498c      	ldr	r1, [pc, #560]	; (8006468 <_lv_indev_scroll_handler+0x614>)
 8006236:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	460a      	mov	r2, r1
 800623e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8006242:	f01a ff21 	bl	8021088 <lv_area_set>
    if(proc->types.pointer.scroll_area.x1 == 0) proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 8006246:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800624a:	b913      	cbnz	r3, 8006252 <_lv_indev_scroll_handler+0x3fe>
 800624c:	f24e 0301 	movw	r3, #57345	; 0xe001
 8006250:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8006252:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8006256:	b913      	cbnz	r3, 800625e <_lv_indev_scroll_handler+0x40a>
 8006258:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800625c:	873b      	strh	r3, [r7, #56]	; 0x38
    if(proc->types.pointer.scroll_area.y1 == 0) proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 800625e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006262:	b913      	cbnz	r3, 800626a <_lv_indev_scroll_handler+0x416>
 8006264:	f24e 0301 	movw	r3, #57345	; 0xe001
 8006268:	86fb      	strh	r3, [r7, #54]	; 0x36
    if(proc->types.pointer.scroll_area.y2 == 0) proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 800626a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800626e:	b913      	cbnz	r3, 8006276 <_lv_indev_scroll_handler+0x422>
 8006270:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006274:	877b      	strh	r3, [r7, #58]	; 0x3a
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8006276:	2200      	movs	r2, #0
 8006278:	2109      	movs	r1, #9
 800627a:	9802      	ldr	r0, [sp, #8]
 800627c:	f7fe f8a2 	bl	80043c4 <lv_event_send>
        if(proc->reset_query) return;
 8006280:	787b      	ldrb	r3, [r7, #1]
 8006282:	f013 0f02 	tst.w	r3, #2
 8006286:	f43f adf2 	beq.w	8005e6e <_lv_indev_scroll_handler+0x1a>
 800628a:	e68f      	b.n	8005fac <_lv_indev_scroll_handler+0x158>
        if((st > 0 || sb > 0)  &&
 800628c:	9b08      	ldr	r3, [sp, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f73f af44 	bgt.w	800611c <_lv_indev_scroll_handler+0x2c8>
 8006294:	e758      	b.n	8006148 <_lv_indev_scroll_handler+0x2f4>
 8006296:	f8cd a008 	str.w	sl, [sp, #8]
            dir_candidate = LV_DIR_VER;
 800629a:	230c      	movs	r3, #12
 800629c:	9306      	str	r3, [sp, #24]
 800629e:	e753      	b.n	8006148 <_lv_indev_scroll_handler+0x2f4>
        if((sl > 0 || sr > 0)  &&
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f73f af55 	bgt.w	8006150 <_lv_indev_scroll_handler+0x2fc>
 80062a6:	e76a      	b.n	800617e <_lv_indev_scroll_handler+0x32a>
 80062a8:	f8cd a008 	str.w	sl, [sp, #8]
            dir_candidate = LV_DIR_HOR;
 80062ac:	2303      	movs	r3, #3
 80062ae:	9306      	str	r3, [sp, #24]
 80062b0:	e765      	b.n	800617e <_lv_indev_scroll_handler+0x32a>
        switch(lv_obj_get_scroll_snap_y(obj)) {
 80062b2:	9802      	ldr	r0, [sp, #8]
 80062b4:	f003 fb54 	bl	8009960 <lv_obj_get_scroll_snap_y>
 80062b8:	2802      	cmp	r0, #2
 80062ba:	d02e      	beq.n	800631a <_lv_indev_scroll_handler+0x4c6>
 80062bc:	2803      	cmp	r0, #3
 80062be:	d03f      	beq.n	8006340 <_lv_indev_scroll_handler+0x4ec>
 80062c0:	2801      	cmp	r0, #1
 80062c2:	d006      	beq.n	80062d2 <_lv_indev_scroll_handler+0x47e>
                proc->types.pointer.scroll_area.y1 = LV_COORD_MIN;
 80062c4:	f24e 0301 	movw	r3, #57345	; 0xe001
 80062c8:	86fb      	strh	r3, [r7, #54]	; 0x36
                proc->types.pointer.scroll_area.y2 = LV_COORD_MAX;
 80062ca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80062ce:	877b      	strh	r3, [r7, #58]	; 0x3a
                break;
 80062d0:	e013      	b.n	80062fa <_lv_indev_scroll_handler+0x4a6>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y1 + 1, LV_COORD_MAX, 0);
 80062d2:	9c02      	ldr	r4, [sp, #8]
 80062d4:	4620      	mov	r0, r4
 80062d6:	8ae1      	ldrh	r1, [r4, #22]
 80062d8:	3101      	adds	r1, #1
 80062da:	2300      	movs	r3, #0
 80062dc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80062e0:	b209      	sxth	r1, r1
 80062e2:	f7ff fba5 	bl	8005a30 <find_snap_point_y>
 80062e6:	86f8      	strh	r0, [r7, #54]	; 0x36
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y1 - 1, 0);
 80062e8:	4620      	mov	r0, r4
 80062ea:	8ae2      	ldrh	r2, [r4, #22]
 80062ec:	3a01      	subs	r2, #1
 80062ee:	2300      	movs	r3, #0
 80062f0:	b212      	sxth	r2, r2
 80062f2:	495d      	ldr	r1, [pc, #372]	; (8006468 <_lv_indev_scroll_handler+0x614>)
 80062f4:	f7ff fb9c 	bl	8005a30 <find_snap_point_y>
 80062f8:	8778      	strh	r0, [r7, #58]	; 0x3a
        switch(lv_obj_get_scroll_snap_x(obj)) {
 80062fa:	9802      	ldr	r0, [sp, #8]
 80062fc:	f003 fb28 	bl	8009950 <lv_obj_get_scroll_snap_x>
 8006300:	2802      	cmp	r0, #2
 8006302:	d04e      	beq.n	80063a2 <_lv_indev_scroll_handler+0x54e>
 8006304:	2803      	cmp	r0, #3
 8006306:	d05f      	beq.n	80063c8 <_lv_indev_scroll_handler+0x574>
 8006308:	2801      	cmp	r0, #1
 800630a:	d037      	beq.n	800637c <_lv_indev_scroll_handler+0x528>
                proc->types.pointer.scroll_area.x1 = LV_COORD_MIN;
 800630c:	f24e 0301 	movw	r3, #57345	; 0xe001
 8006310:	86bb      	strh	r3, [r7, #52]	; 0x34
                proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8006312:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006316:	873b      	strh	r3, [r7, #56]	; 0x38
    if(proc->types.pointer.scroll_area.x2 == 0) proc->types.pointer.scroll_area.x2 = LV_COORD_MAX;
 8006318:	e7a1      	b.n	800625e <_lv_indev_scroll_handler+0x40a>
                proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, obj->coords.y2, LV_COORD_MAX, 0);
 800631a:	2300      	movs	r3, #0
 800631c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006320:	9c02      	ldr	r4, [sp, #8]
 8006322:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8006326:	4620      	mov	r0, r4
 8006328:	f7ff fb82 	bl	8005a30 <find_snap_point_y>
 800632c:	86f8      	strh	r0, [r7, #54]	; 0x36
                proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, obj->coords.y2, 0);
 800632e:	2300      	movs	r3, #0
 8006330:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8006334:	494c      	ldr	r1, [pc, #304]	; (8006468 <_lv_indev_scroll_handler+0x614>)
 8006336:	4620      	mov	r0, r4
 8006338:	f7ff fb7a 	bl	8005a30 <find_snap_point_y>
 800633c:	8778      	strh	r0, [r7, #58]	; 0x3a
                break;
 800633e:	e7dc      	b.n	80062fa <_lv_indev_scroll_handler+0x4a6>
                    lv_coord_t y_mid = obj->coords.y1 + lv_area_get_height(&obj->coords) / 2;
 8006340:	9d02      	ldr	r5, [sp, #8]
 8006342:	4628      	mov	r0, r5
 8006344:	8aea      	ldrh	r2, [r5, #22]
 8006346:	8b6b      	ldrh	r3, [r5, #26]
 8006348:	3301      	adds	r3, #1
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	b219      	sxth	r1, r3
 800634e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8006352:	440b      	add	r3, r1
 8006354:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8006358:	b29c      	uxth	r4, r3
                    proc->types.pointer.scroll_area.y1 = find_snap_point_y(obj, y_mid + 1, LV_COORD_MAX, 0);
 800635a:	1c61      	adds	r1, r4, #1
 800635c:	2300      	movs	r3, #0
 800635e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006362:	b209      	sxth	r1, r1
 8006364:	f7ff fb64 	bl	8005a30 <find_snap_point_y>
 8006368:	86f8      	strh	r0, [r7, #54]	; 0x36
                    proc->types.pointer.scroll_area.y2 = find_snap_point_y(obj, LV_COORD_MIN, y_mid - 1, 0);
 800636a:	1e62      	subs	r2, r4, #1
 800636c:	2300      	movs	r3, #0
 800636e:	b212      	sxth	r2, r2
 8006370:	493d      	ldr	r1, [pc, #244]	; (8006468 <_lv_indev_scroll_handler+0x614>)
 8006372:	4628      	mov	r0, r5
 8006374:	f7ff fb5c 	bl	8005a30 <find_snap_point_y>
 8006378:	8778      	strh	r0, [r7, #58]	; 0x3a
                    break;
 800637a:	e7be      	b.n	80062fa <_lv_indev_scroll_handler+0x4a6>
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x1, LV_COORD_MAX, 0);
 800637c:	2300      	movs	r3, #0
 800637e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8006382:	9c02      	ldr	r4, [sp, #8]
 8006384:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8006388:	4620      	mov	r0, r4
 800638a:	f7ff fbeb 	bl	8005b64 <find_snap_point_x>
 800638e:	86b8      	strh	r0, [r7, #52]	; 0x34
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x1, 0);
 8006390:	2300      	movs	r3, #0
 8006392:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8006396:	4934      	ldr	r1, [pc, #208]	; (8006468 <_lv_indev_scroll_handler+0x614>)
 8006398:	4620      	mov	r0, r4
 800639a:	f7ff fbe3 	bl	8005b64 <find_snap_point_x>
 800639e:	8738      	strh	r0, [r7, #56]	; 0x38
                break;
 80063a0:	e751      	b.n	8006246 <_lv_indev_scroll_handler+0x3f2>
                proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, obj->coords.x2, LV_COORD_MAX, 0);
 80063a2:	2300      	movs	r3, #0
 80063a4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80063a8:	9c02      	ldr	r4, [sp, #8]
 80063aa:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff fbd8 	bl	8005b64 <find_snap_point_x>
 80063b4:	86b8      	strh	r0, [r7, #52]	; 0x34
                proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, obj->coords.x2, 0);
 80063b6:	2300      	movs	r3, #0
 80063b8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80063bc:	492a      	ldr	r1, [pc, #168]	; (8006468 <_lv_indev_scroll_handler+0x614>)
 80063be:	4620      	mov	r0, r4
 80063c0:	f7ff fbd0 	bl	8005b64 <find_snap_point_x>
 80063c4:	8738      	strh	r0, [r7, #56]	; 0x38
                break;
 80063c6:	e73e      	b.n	8006246 <_lv_indev_scroll_handler+0x3f2>
                    lv_coord_t x_mid = obj->coords.x1 + lv_area_get_width(&obj->coords) / 2;
 80063c8:	9d02      	ldr	r5, [sp, #8]
 80063ca:	4628      	mov	r0, r5
 80063cc:	8aaa      	ldrh	r2, [r5, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80063ce:	8b2b      	ldrh	r3, [r5, #24]
 80063d0:	3301      	adds	r3, #1
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	b219      	sxth	r1, r3
 80063d6:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80063da:	440b      	add	r3, r1
 80063dc:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80063e0:	b29c      	uxth	r4, r3
                    proc->types.pointer.scroll_area.x1 = find_snap_point_x(obj, x_mid + 1, LV_COORD_MAX, 0);
 80063e2:	1c61      	adds	r1, r4, #1
 80063e4:	2300      	movs	r3, #0
 80063e6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80063ea:	b209      	sxth	r1, r1
 80063ec:	f7ff fbba 	bl	8005b64 <find_snap_point_x>
 80063f0:	86b8      	strh	r0, [r7, #52]	; 0x34
                    proc->types.pointer.scroll_area.x2 = find_snap_point_x(obj, LV_COORD_MIN, x_mid - 1, 0);
 80063f2:	1e62      	subs	r2, r4, #1
 80063f4:	2300      	movs	r3, #0
 80063f6:	b212      	sxth	r2, r2
 80063f8:	491b      	ldr	r1, [pc, #108]	; (8006468 <_lv_indev_scroll_handler+0x614>)
 80063fa:	4628      	mov	r0, r5
 80063fc:	f7ff fbb2 	bl	8005b64 <find_snap_point_x>
 8006400:	8738      	strh	r0, [r7, #56]	; 0x38
                    break;
 8006402:	e720      	b.n	8006246 <_lv_indev_scroll_handler+0x3f2>
        lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8006404:	9d02      	ldr	r5, [sp, #8]
 8006406:	4628      	mov	r0, r5
 8006408:	f003 fba8 	bl	8009b5c <lv_obj_get_scroll_right>
 800640c:	4604      	mov	r4, r0
        lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 800640e:	4628      	mov	r0, r5
 8006410:	f003 fb30 	bl	8009a74 <lv_obj_get_scroll_left>
 8006414:	4602      	mov	r2, r0
        diff_x = elastic_diff(scroll_obj, proc->types.pointer.vect.x, sl, sr, LV_DIR_HOR);
 8006416:	2303      	movs	r3, #3
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4623      	mov	r3, r4
 800641c:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8006420:	4628      	mov	r0, r5
 8006422:	f7ff fc39 	bl	8005c98 <elastic_diff>
 8006426:	4605      	mov	r5, r0
    lv_coord_t diff_y = 0;
 8006428:	2400      	movs	r4, #0
 800642a:	e575      	b.n	8005f18 <_lv_indev_scroll_handler+0xc4>
        if((left_en  && obj_scroll_sum.x >=   scroll_limit) ||
 800642c:	2e00      	cmp	r6, #0
 800642e:	f43f aec5 	beq.w	80061bc <_lv_indev_scroll_handler+0x368>
 8006432:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8006436:	9a07      	ldr	r2, [sp, #28]
 8006438:	4293      	cmp	r3, r2
 800643a:	f6ff aebf 	blt.w	80061bc <_lv_indev_scroll_handler+0x368>
            proc->types.pointer.scroll_dir = hor_en ? LV_DIR_HOR : LV_DIR_VER;
 800643e:	9b05      	ldr	r3, [sp, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf14      	ite	ne
 8006444:	2203      	movne	r2, #3
 8006446:	220c      	moveq	r2, #12
 8006448:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800644c:	f362 0303 	bfi	r3, r2, #0, #4
 8006450:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            break;
 8006454:	e6d9      	b.n	800620a <_lv_indev_scroll_handler+0x3b6>
        lv_point_t obj_scroll_sum = proc->types.pointer.scroll_sum;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	930b      	str	r3, [sp, #44]	; 0x2c
        if(angle != 0 || zoom != LV_IMG_ZOOM_NONE) {
 800645a:	e600      	b.n	800605e <_lv_indev_scroll_handler+0x20a>
        if(sr <= 0) right_en = false;
 800645c:	2800      	cmp	r0, #0
 800645e:	f77f aead 	ble.w	80061bc <_lv_indev_scroll_handler+0x368>
        if(sl <= 0) left_en = false;
 8006462:	465e      	mov	r6, fp
 8006464:	e69a      	b.n	800619c <_lv_indev_scroll_handler+0x348>
 8006466:	4770      	bx	lr
 8006468:	ffffe001 	.word	0xffffe001

0800646c <_lv_indev_scroll_throw_handler>:
{
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	b082      	sub	sp, #8
    lv_obj_t * scroll_obj = proc->types.pointer.scroll_obj;
 8006472:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
    if(scroll_obj == NULL) return;
 8006474:	b12e      	cbz	r6, 8006482 <_lv_indev_scroll_throw_handler+0x16>
 8006476:	4604      	mov	r4, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_NONE) return;
 8006478:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800647c:	f013 0f0f 	tst.w	r3, #15
 8006480:	d102      	bne.n	8006488 <_lv_indev_scroll_throw_handler+0x1c>
}
 8006482:	b002      	add	sp, #8
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_indev_t * indev_act = lv_indev_get_act();
 8006488:	f7fe fb42 	bl	8004b10 <lv_indev_get_act>
 800648c:	4607      	mov	r7, r0
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 800648e:	6803      	ldr	r3, [r0, #0]
 8006490:	7e5d      	ldrb	r5, [r3, #25]
    if(lv_obj_has_flag(scroll_obj, LV_OBJ_FLAG_SCROLL_MOMENTUM) == false) {
 8006492:	2140      	movs	r1, #64	; 0x40
 8006494:	4630      	mov	r0, r6
 8006496:	f000 fdfd 	bl	8007094 <lv_obj_has_flag>
 800649a:	b910      	cbnz	r0, 80064a2 <_lv_indev_scroll_throw_handler+0x36>
        proc->types.pointer.scroll_throw_vect.y = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	83e3      	strh	r3, [r4, #30]
        proc->types.pointer.scroll_throw_vect.x = 0;
 80064a0:	83a3      	strh	r3, [r4, #28]
    lv_scroll_snap_t align_x = lv_obj_get_scroll_snap_x(scroll_obj);
 80064a2:	4630      	mov	r0, r6
 80064a4:	f003 fa54 	bl	8009950 <lv_obj_get_scroll_snap_x>
 80064a8:	4680      	mov	r8, r0
    lv_scroll_snap_t align_y = lv_obj_get_scroll_snap_y(scroll_obj);
 80064aa:	4630      	mov	r0, r6
 80064ac:	f003 fa58 	bl	8009960 <lv_obj_get_scroll_snap_y>
 80064b0:	4682      	mov	sl, r0
    if(proc->types.pointer.scroll_dir == LV_DIR_VER) {
 80064b2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	2b0c      	cmp	r3, #12
 80064bc:	d01e      	beq.n	80064fc <_lv_indev_scroll_throw_handler+0x90>
    else if(proc->types.pointer.scroll_dir == LV_DIR_HOR) {
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f000 80a4 	beq.w	800660c <_lv_indev_scroll_throw_handler+0x1a0>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 80064c4:	69e3      	ldr	r3, [r4, #28]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1db      	bne.n	8006482 <_lv_indev_scroll_throw_handler+0x16>
        if(align_y == LV_SCROLL_SNAP_NONE) {
 80064ca:	f1ba 0f00 	cmp.w	sl, #0
 80064ce:	d040      	beq.n	8006552 <_lv_indev_scroll_throw_handler+0xe6>
        if(align_x == LV_SCROLL_SNAP_NONE) {
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	f000 8111 	beq.w	80066fa <_lv_indev_scroll_throw_handler+0x28e>
        lv_event_send(scroll_obj, LV_EVENT_SCROLL_END, indev_act);
 80064d8:	463a      	mov	r2, r7
 80064da:	210a      	movs	r1, #10
 80064dc:	4630      	mov	r0, r6
 80064de:	f7fd ff71 	bl	80043c4 <lv_event_send>
        if(proc->reset_query) return;
 80064e2:	7863      	ldrb	r3, [r4, #1]
 80064e4:	f013 0f02 	tst.w	r3, #2
 80064e8:	d1cb      	bne.n	8006482 <_lv_indev_scroll_throw_handler+0x16>
        proc->types.pointer.scroll_dir = LV_DIR_NONE;
 80064ea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80064ee:	f36f 0303 	bfc	r3, #0, #4
 80064f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        proc->types.pointer.scroll_obj = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064fa:	e7c2      	b.n	8006482 <_lv_indev_scroll_throw_handler+0x16>
        proc->types.pointer.scroll_throw_vect.x = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	83a3      	strh	r3, [r4, #28]
        if(align_y == LV_SCROLL_SNAP_NONE) {
 8006500:	2800      	cmp	r0, #0
 8006502:	d13d      	bne.n	8006580 <_lv_indev_scroll_throw_handler+0x114>
                proc->types.pointer.scroll_throw_vect.y * (100 - scroll_throw) / 100;
 8006504:	f9b4 301e 	ldrsh.w	r3, [r4, #30]
 8006508:	f1c5 0564 	rsb	r5, r5, #100	; 0x64
 800650c:	fb03 f505 	mul.w	r5, r3, r5
 8006510:	4b8a      	ldr	r3, [pc, #552]	; (800673c <_lv_indev_scroll_throw_handler+0x2d0>)
 8006512:	fb83 2305 	smull	r2, r3, r3, r5
 8006516:	17ed      	asrs	r5, r5, #31
 8006518:	ebc5 1563 	rsb	r5, r5, r3, asr #5
            proc->types.pointer.scroll_throw_vect.y =
 800651c:	83e5      	strh	r5, [r4, #30]
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800651e:	4630      	mov	r0, r6
 8006520:	f003 fa3e 	bl	80099a0 <lv_obj_get_scroll_bottom>
 8006524:	4605      	mov	r5, r0
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8006526:	4630      	mov	r0, r6
 8006528:	f003 fa32 	bl	8009990 <lv_obj_get_scroll_top>
 800652c:	4602      	mov	r2, r0
            proc->types.pointer.scroll_throw_vect.y = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.y, st, sb,
 800652e:	230c      	movs	r3, #12
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	462b      	mov	r3, r5
 8006534:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff fbad 	bl	8005c98 <elastic_diff>
 800653e:	4602      	mov	r2, r0
 8006540:	83e0      	strh	r0, [r4, #30]
            lv_obj_scroll_by(scroll_obj, 0, proc->types.pointer.scroll_throw_vect.y, LV_ANIM_OFF);
 8006542:	2300      	movs	r3, #0
 8006544:	4619      	mov	r1, r3
 8006546:	4630      	mov	r0, r6
 8006548:	f003 fbe2 	bl	8009d10 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 800654c:	69e3      	ldr	r3, [r4, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d197      	bne.n	8006482 <_lv_indev_scroll_throw_handler+0x16>
            lv_coord_t st = lv_obj_get_scroll_top(scroll_obj);
 8006552:	4630      	mov	r0, r6
 8006554:	f003 fa1c 	bl	8009990 <lv_obj_get_scroll_top>
 8006558:	4605      	mov	r5, r0
            lv_coord_t sb = lv_obj_get_scroll_bottom(scroll_obj);
 800655a:	4630      	mov	r0, r6
 800655c:	f003 fa20 	bl	80099a0 <lv_obj_get_scroll_bottom>
            if(st > 0 || sb > 0) {
 8006560:	2d00      	cmp	r5, #0
 8006562:	f340 80bf 	ble.w	80066e4 <_lv_indev_scroll_throw_handler+0x278>
                if(st < 0) {
 8006566:	2d00      	cmp	r5, #0
 8006568:	f2c0 80c0 	blt.w	80066ec <_lv_indev_scroll_throw_handler+0x280>
                else if(sb < 0) {
 800656c:	2800      	cmp	r0, #0
 800656e:	daaf      	bge.n	80064d0 <_lv_indev_scroll_throw_handler+0x64>
                    lv_obj_scroll_by(scroll_obj, 0, -sb, LV_ANIM_ON);
 8006570:	4242      	negs	r2, r0
 8006572:	2301      	movs	r3, #1
 8006574:	b212      	sxth	r2, r2
 8006576:	2100      	movs	r1, #0
 8006578:	4630      	mov	r0, r6
 800657a:	f003 fbc9 	bl	8009d10 <lv_obj_scroll_by>
 800657e:	e7a7      	b.n	80064d0 <_lv_indev_scroll_throw_handler+0x64>
    lv_coord_t y = proc->types.pointer.scroll_throw_vect.y;
 8006580:	f9b4 501e 	ldrsh.w	r5, [r4, #30]
    lv_indev_t * indev_act = lv_indev_get_act();
 8006584:	f7fe fac4 	bl	8004b10 <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8006588:	6803      	ldr	r3, [r0, #0]
 800658a:	7e5a      	ldrb	r2, [r3, #25]
    while(y) {
 800658c:	2d00      	cmp	r5, #0
 800658e:	d03b      	beq.n	8006608 <_lv_indev_scroll_throw_handler+0x19c>
    lv_coord_t move = 0;
 8006590:	f04f 0900 	mov.w	r9, #0
        y = y * (100 - scroll_throw) / 100;
 8006594:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8006598:	4968      	ldr	r1, [pc, #416]	; (800673c <_lv_indev_scroll_throw_handler+0x2d0>)
        move += y;
 800659a:	44a9      	add	r9, r5
 800659c:	fa0f f989 	sxth.w	r9, r9
        y = y * (100 - scroll_throw) / 100;
 80065a0:	fb02 f505 	mul.w	r5, r2, r5
 80065a4:	fb81 0305 	smull	r0, r3, r1, r5
 80065a8:	17ed      	asrs	r5, r5, #31
 80065aa:	ebc5 1563 	rsb	r5, r5, r3, asr #5
 80065ae:	b22d      	sxth	r5, r5
    while(y) {
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	d1f2      	bne.n	800659a <_lv_indev_scroll_throw_handler+0x12e>
            proc->types.pointer.scroll_throw_vect.y = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	83e3      	strh	r3, [r4, #30]
        if(proc->types.pointer.scroll_sum.y + *diff_y < proc->types.pointer.scroll_area.y1) {
 80065b8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80065bc:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 80065c0:	eb09 0103 	add.w	r1, r9, r3
 80065c4:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y1 - proc->types.pointer.scroll_sum.y;
 80065c6:	bfbc      	itt	lt
 80065c8:	1ad2      	sublt	r2, r2, r3
 80065ca:	fa0f f982 	sxthlt.w	r9, r2
        if(proc->types.pointer.scroll_sum.y + *diff_y > proc->types.pointer.scroll_area.y2) {
 80065ce:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 80065d2:	eb09 0103 	add.w	r1, r9, r3
 80065d6:	4291      	cmp	r1, r2
            *diff_y = proc->types.pointer.scroll_area.y2 - proc->types.pointer.scroll_sum.y;
 80065d8:	bfc4      	itt	gt
 80065da:	1ad2      	subgt	r2, r2, r3
 80065dc:	fa0f f982 	sxthgt.w	r9, r2
            lv_coord_t y = find_snap_point_y(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_y);
 80065e0:	464b      	mov	r3, r9
 80065e2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80065e6:	4956      	ldr	r1, [pc, #344]	; (8006740 <_lv_indev_scroll_throw_handler+0x2d4>)
 80065e8:	4630      	mov	r0, r6
 80065ea:	f7ff fa21 	bl	8005a30 <find_snap_point_y>
            lv_obj_scroll_by(scroll_obj, 0, diff_y + y, LV_ANIM_ON);
 80065ee:	eb09 0200 	add.w	r2, r9, r0
 80065f2:	2301      	movs	r3, #1
 80065f4:	b212      	sxth	r2, r2
 80065f6:	2100      	movs	r1, #0
 80065f8:	4630      	mov	r0, r6
 80065fa:	f003 fb89 	bl	8009d10 <lv_obj_scroll_by>
    if(proc->types.pointer.scroll_throw_vect.x == 0 && proc->types.pointer.scroll_throw_vect.y == 0) {
 80065fe:	69e3      	ldr	r3, [r4, #28]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f47f af3e 	bne.w	8006482 <_lv_indev_scroll_throw_handler+0x16>
 8006606:	e763      	b.n	80064d0 <_lv_indev_scroll_throw_handler+0x64>
    lv_coord_t move = 0;
 8006608:	46a9      	mov	r9, r5
 800660a:	e7d3      	b.n	80065b4 <_lv_indev_scroll_throw_handler+0x148>
        proc->types.pointer.scroll_throw_vect.y = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	83e3      	strh	r3, [r4, #30]
        if(align_x == LV_SCROLL_SNAP_NONE) {
 8006610:	f1b8 0f00 	cmp.w	r8, #0
 8006614:	d124      	bne.n	8006660 <_lv_indev_scroll_throw_handler+0x1f4>
                proc->types.pointer.scroll_throw_vect.x * (100 - scroll_throw) / 100;
 8006616:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800661a:	f1c5 0564 	rsb	r5, r5, #100	; 0x64
 800661e:	fb03 f505 	mul.w	r5, r3, r5
 8006622:	4b46      	ldr	r3, [pc, #280]	; (800673c <_lv_indev_scroll_throw_handler+0x2d0>)
 8006624:	fb83 2305 	smull	r2, r3, r3, r5
 8006628:	17ed      	asrs	r5, r5, #31
 800662a:	ebc5 1563 	rsb	r5, r5, r3, asr #5
            proc->types.pointer.scroll_throw_vect.x =
 800662e:	83a5      	strh	r5, [r4, #28]
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 8006630:	4630      	mov	r0, r6
 8006632:	f003 fa1f 	bl	8009a74 <lv_obj_get_scroll_left>
 8006636:	4605      	mov	r5, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8006638:	4630      	mov	r0, r6
 800663a:	f003 fa8f 	bl	8009b5c <lv_obj_get_scroll_right>
 800663e:	4603      	mov	r3, r0
            proc->types.pointer.scroll_throw_vect.x = elastic_diff(scroll_obj, proc->types.pointer.scroll_throw_vect.x, sl, sr,
 8006640:	2203      	movs	r2, #3
 8006642:	9200      	str	r2, [sp, #0]
 8006644:	462a      	mov	r2, r5
 8006646:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
 800664a:	4630      	mov	r0, r6
 800664c:	f7ff fb24 	bl	8005c98 <elastic_diff>
 8006650:	4601      	mov	r1, r0
 8006652:	83a0      	strh	r0, [r4, #28]
            lv_obj_scroll_by(scroll_obj, proc->types.pointer.scroll_throw_vect.x, 0, LV_ANIM_OFF);
 8006654:	2300      	movs	r3, #0
 8006656:	461a      	mov	r2, r3
 8006658:	4630      	mov	r0, r6
 800665a:	f003 fb59 	bl	8009d10 <lv_obj_scroll_by>
 800665e:	e731      	b.n	80064c4 <_lv_indev_scroll_throw_handler+0x58>
    lv_coord_t x = proc->types.pointer.scroll_throw_vect.x;
 8006660:	f9b4 501c 	ldrsh.w	r5, [r4, #28]
    lv_indev_t * indev_act = lv_indev_get_act();
 8006664:	f7fe fa54 	bl	8004b10 <lv_indev_get_act>
    lv_coord_t scroll_throw = indev_act->driver->scroll_throw;
 8006668:	6803      	ldr	r3, [r0, #0]
 800666a:	7e5a      	ldrb	r2, [r3, #25]
    while(x) {
 800666c:	2d00      	cmp	r5, #0
 800666e:	d037      	beq.n	80066e0 <_lv_indev_scroll_throw_handler+0x274>
    lv_coord_t move = 0;
 8006670:	f04f 0900 	mov.w	r9, #0
        x = x * (100 - scroll_throw) / 100;
 8006674:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8006678:	4930      	ldr	r1, [pc, #192]	; (800673c <_lv_indev_scroll_throw_handler+0x2d0>)
        move += x;
 800667a:	44a9      	add	r9, r5
 800667c:	fa0f f989 	sxth.w	r9, r9
        x = x * (100 - scroll_throw) / 100;
 8006680:	fb02 f505 	mul.w	r5, r2, r5
 8006684:	fb81 0305 	smull	r0, r3, r1, r5
 8006688:	17ed      	asrs	r5, r5, #31
 800668a:	ebc5 1563 	rsb	r5, r5, r3, asr #5
 800668e:	b22d      	sxth	r5, r5
    while(x) {
 8006690:	2d00      	cmp	r5, #0
 8006692:	d1f2      	bne.n	800667a <_lv_indev_scroll_throw_handler+0x20e>
            proc->types.pointer.scroll_throw_vect.x = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	83a3      	strh	r3, [r4, #28]
        if(proc->types.pointer.scroll_sum.x + *diff_x < proc->types.pointer.scroll_area.x1) {
 8006698:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800669c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80066a0:	eb09 0103 	add.w	r1, r9, r3
 80066a4:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x1 - proc->types.pointer.scroll_sum.x;
 80066a6:	bfbc      	itt	lt
 80066a8:	1ad2      	sublt	r2, r2, r3
 80066aa:	fa0f f982 	sxthlt.w	r9, r2
        if(proc->types.pointer.scroll_sum.x + *diff_x > proc->types.pointer.scroll_area.x2) {
 80066ae:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 80066b2:	eb09 0103 	add.w	r1, r9, r3
 80066b6:	4291      	cmp	r1, r2
            *diff_x = proc->types.pointer.scroll_area.x2 - proc->types.pointer.scroll_sum.x;
 80066b8:	bfc4      	itt	gt
 80066ba:	1ad3      	subgt	r3, r2, r3
 80066bc:	fa0f f983 	sxthgt.w	r9, r3
            lv_coord_t x = find_snap_point_x(scroll_obj, LV_COORD_MIN, LV_COORD_MAX, diff_x);
 80066c0:	464b      	mov	r3, r9
 80066c2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80066c6:	491e      	ldr	r1, [pc, #120]	; (8006740 <_lv_indev_scroll_throw_handler+0x2d4>)
 80066c8:	4630      	mov	r0, r6
 80066ca:	f7ff fa4b 	bl	8005b64 <find_snap_point_x>
            lv_obj_scroll_by(scroll_obj, x + diff_x, 0, LV_ANIM_ON);
 80066ce:	eb00 0109 	add.w	r1, r0, r9
 80066d2:	2301      	movs	r3, #1
 80066d4:	2200      	movs	r2, #0
 80066d6:	b209      	sxth	r1, r1
 80066d8:	4630      	mov	r0, r6
 80066da:	f003 fb19 	bl	8009d10 <lv_obj_scroll_by>
 80066de:	e6f1      	b.n	80064c4 <_lv_indev_scroll_throw_handler+0x58>
    lv_coord_t move = 0;
 80066e0:	46a9      	mov	r9, r5
 80066e2:	e7d7      	b.n	8006694 <_lv_indev_scroll_throw_handler+0x228>
            if(st > 0 || sb > 0) {
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f73f af3e 	bgt.w	8006566 <_lv_indev_scroll_throw_handler+0xfa>
 80066ea:	e6f1      	b.n	80064d0 <_lv_indev_scroll_throw_handler+0x64>
                    lv_obj_scroll_by(scroll_obj, 0, st, LV_ANIM_ON);
 80066ec:	2301      	movs	r3, #1
 80066ee:	462a      	mov	r2, r5
 80066f0:	2100      	movs	r1, #0
 80066f2:	4630      	mov	r0, r6
 80066f4:	f003 fb0c 	bl	8009d10 <lv_obj_scroll_by>
 80066f8:	e6ea      	b.n	80064d0 <_lv_indev_scroll_throw_handler+0x64>
            lv_coord_t sl = lv_obj_get_scroll_left(scroll_obj);
 80066fa:	4630      	mov	r0, r6
 80066fc:	f003 f9ba 	bl	8009a74 <lv_obj_get_scroll_left>
 8006700:	4605      	mov	r5, r0
            lv_coord_t sr = lv_obj_get_scroll_right(scroll_obj);
 8006702:	4630      	mov	r0, r6
 8006704:	f003 fa2a 	bl	8009b5c <lv_obj_get_scroll_right>
            if(sl > 0 || sr > 0) {
 8006708:	2d00      	cmp	r5, #0
 800670a:	dd0c      	ble.n	8006726 <_lv_indev_scroll_throw_handler+0x2ba>
                if(sl < 0) {
 800670c:	2d00      	cmp	r5, #0
 800670e:	db0d      	blt.n	800672c <_lv_indev_scroll_throw_handler+0x2c0>
                else if(sr < 0) {
 8006710:	2800      	cmp	r0, #0
 8006712:	f6bf aee1 	bge.w	80064d8 <_lv_indev_scroll_throw_handler+0x6c>
                    lv_obj_scroll_by(scroll_obj, -sr, 0, LV_ANIM_ON);
 8006716:	4241      	negs	r1, r0
 8006718:	2301      	movs	r3, #1
 800671a:	2200      	movs	r2, #0
 800671c:	b209      	sxth	r1, r1
 800671e:	4630      	mov	r0, r6
 8006720:	f003 faf6 	bl	8009d10 <lv_obj_scroll_by>
 8006724:	e6d8      	b.n	80064d8 <_lv_indev_scroll_throw_handler+0x6c>
            if(sl > 0 || sr > 0) {
 8006726:	2800      	cmp	r0, #0
 8006728:	dcf0      	bgt.n	800670c <_lv_indev_scroll_throw_handler+0x2a0>
 800672a:	e6d5      	b.n	80064d8 <_lv_indev_scroll_throw_handler+0x6c>
                    lv_obj_scroll_by(scroll_obj, sl, 0, LV_ANIM_ON);
 800672c:	2301      	movs	r3, #1
 800672e:	2200      	movs	r2, #0
 8006730:	4629      	mov	r1, r5
 8006732:	4630      	mov	r0, r6
 8006734:	f003 faec 	bl	8009d10 <lv_obj_scroll_by>
 8006738:	e6ce      	b.n	80064d8 <_lv_indev_scroll_throw_handler+0x6c>
 800673a:	bf00      	nop
 800673c:	51eb851f 	.word	0x51eb851f
 8006740:	ffffe001 	.word	0xffffe001

08006744 <lv_indev_scroll_throw_predict>:
    if(indev == NULL) return 0;
 8006744:	b1f8      	cbz	r0, 8006786 <lv_indev_scroll_throw_predict+0x42>
 8006746:	4602      	mov	r2, r0
    switch(dir) {
 8006748:	2903      	cmp	r1, #3
 800674a:	d019      	beq.n	8006780 <lv_indev_scroll_throw_predict+0x3c>
 800674c:	290c      	cmp	r1, #12
 800674e:	d11c      	bne.n	800678a <lv_indev_scroll_throw_predict+0x46>
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 8006750:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 8006754:	6812      	ldr	r2, [r2, #0]
 8006756:	7e51      	ldrb	r1, [r2, #25]
    while(v) {
 8006758:	b1cb      	cbz	r3, 800678e <lv_indev_scroll_throw_predict+0x4a>
{
 800675a:	b410      	push	{r4}
    lv_coord_t sum = 0;
 800675c:	2000      	movs	r0, #0
        v = v * (100 - scroll_throw) / 100;
 800675e:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 8006762:	4c0c      	ldr	r4, [pc, #48]	; (8006794 <lv_indev_scroll_throw_predict+0x50>)
        sum += v;
 8006764:	4418      	add	r0, r3
 8006766:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	fb84 c203 	smull	ip, r2, r4, r3
 8006770:	17db      	asrs	r3, r3, #31
 8006772:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8006776:	b21b      	sxth	r3, r3
    while(v) {
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f3      	bne.n	8006764 <lv_indev_scroll_throw_predict+0x20>
}
 800677c:	bc10      	pop	{r4}
 800677e:	4770      	bx	lr
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 8006780:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
            break;
 8006784:	e7e6      	b.n	8006754 <lv_indev_scroll_throw_predict+0x10>
    if(indev == NULL) return 0;
 8006786:	2000      	movs	r0, #0
 8006788:	4770      	bx	lr
    switch(dir) {
 800678a:	2000      	movs	r0, #0
 800678c:	4770      	bx	lr
    lv_coord_t sum = 0;
 800678e:	4618      	mov	r0, r3
}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	51eb851f 	.word	0x51eb851f

08006798 <lv_obj_draw>:
        obj->spec_attr = NULL;
    }
}

static void lv_obj_draw(lv_event_t * e)
{
 8006798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679c:	b0a4      	sub	sp, #144	; 0x90
 800679e:	4606      	mov	r6, r0
    lv_event_code_t code = lv_event_get_code(e);
 80067a0:	f7fd fe36 	bl	8004410 <lv_event_get_code>
 80067a4:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80067a6:	4630      	mov	r0, r6
 80067a8:	f7fd fe2e 	bl	8004408 <lv_event_get_target>
 80067ac:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 80067ae:	2d12      	cmp	r5, #18
 80067b0:	d007      	beq.n	80067c2 <lv_obj_draw+0x2a>
        }

        info->res = LV_COVER_RES_COVER;

    }
    else if(code == LV_EVENT_DRAW_MAIN) {
 80067b2:	2d15      	cmp	r5, #21
 80067b4:	d050      	beq.n	8006858 <lv_obj_draw+0xc0>

        }
#endif
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
    }
    else if(code == LV_EVENT_DRAW_POST) {
 80067b6:	2d18      	cmp	r5, #24
 80067b8:	f000 80ae 	beq.w	8006918 <lv_obj_draw+0x180>

            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
        }
    }
}
 80067bc:	b024      	add	sp, #144	; 0x90
 80067be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7fd fe28 	bl	8004418 <lv_event_get_param>
 80067c8:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 80067ca:	7803      	ldrb	r3, [r0, #0]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d0f5      	beq.n	80067bc <lv_obj_draw+0x24>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80067d0:	2217      	movs	r2, #23
 80067d2:	2100      	movs	r1, #0
 80067d4:	4620      	mov	r0, r4
 80067d6:	f004 fb69 	bl	800aeac <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 80067da:	b110      	cbz	r0, 80067e2 <lv_obj_draw+0x4a>
            info->res = LV_COVER_RES_MASKED;
 80067dc:	2302      	movs	r3, #2
 80067de:	702b      	strb	r3, [r5, #0]
            return;
 80067e0:	e7ec      	b.n	80067bc <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80067e2:	220b      	movs	r2, #11
 80067e4:	2100      	movs	r1, #0
 80067e6:	4620      	mov	r0, r4
 80067e8:	f004 fb60 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80067ec:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80067ee:	2268      	movs	r2, #104	; 0x68
 80067f0:	2100      	movs	r1, #0
 80067f2:	4620      	mov	r0, r4
 80067f4:	f004 fb5a 	bl	800aeac <lv_obj_get_style_prop>
 80067f8:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80067fa:	2269      	movs	r2, #105	; 0x69
 80067fc:	2100      	movs	r1, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	f004 fb54 	bl	800aeac <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8006804:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8006808:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
    dest->y2 = src->y2;
 800680c:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 8006810:	b2b3      	uxth	r3, r6
 8006812:	8aa1      	ldrh	r1, [r4, #20]
 8006814:	1ac9      	subs	r1, r1, r3
 8006816:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
        coords.x2 += w;
 800681a:	4473      	add	r3, lr
 800681c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        coords.y1 -= h;
 8006820:	b280      	uxth	r0, r0
 8006822:	1a12      	subs	r2, r2, r0
 8006824:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
        coords.y2 += h;
 8006828:	4460      	add	r0, ip
 800682a:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 800682e:	463a      	mov	r2, r7
 8006830:	a912      	add	r1, sp, #72	; 0x48
 8006832:	6868      	ldr	r0, [r5, #4]
 8006834:	f01a fd8f 	bl	8021356 <_lv_area_is_in>
 8006838:	b910      	cbnz	r0, 8006840 <lv_obj_draw+0xa8>
            info->res = LV_COVER_RES_NOT_COVER;
 800683a:	2301      	movs	r3, #1
 800683c:	702b      	strb	r3, [r5, #0]
            return;
 800683e:	e7bd      	b.n	80067bc <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8006840:	2221      	movs	r2, #33	; 0x21
 8006842:	2100      	movs	r1, #0
 8006844:	4620      	mov	r0, r4
 8006846:	f004 fb31 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800684a:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 800684c:	28fc      	cmp	r0, #252	; 0xfc
            info->res = LV_COVER_RES_NOT_COVER;
 800684e:	bf94      	ite	ls
 8006850:	2301      	movls	r3, #1
        info->res = LV_COVER_RES_COVER;
 8006852:	2300      	movhi	r3, #0
 8006854:	702b      	strb	r3, [r5, #0]
 8006856:	e7b1      	b.n	80067bc <lv_obj_draw+0x24>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8006858:	4630      	mov	r0, r6
 800685a:	f7fd fe49 	bl	80044f0 <lv_event_get_draw_ctx>
 800685e:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 8006860:	a804      	add	r0, sp, #16
 8006862:	f008 ffe3 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8006866:	2234      	movs	r2, #52	; 0x34
 8006868:	2100      	movs	r1, #0
 800686a:	4620      	mov	r0, r4
 800686c:	f004 fb1e 	bl	800aeac <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8006870:	b128      	cbz	r0, 800687e <lv_obj_draw+0xe6>
            draw_dsc.border_post = 1;
 8006872:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 800687e:	af04      	add	r7, sp, #16
 8006880:	463a      	mov	r2, r7
 8006882:	2100      	movs	r1, #0
 8006884:	4620      	mov	r0, r4
 8006886:	f000 ff4b 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 800688a:	2268      	movs	r2, #104	; 0x68
 800688c:	2100      	movs	r1, #0
 800688e:	4620      	mov	r0, r4
 8006890:	f004 fb0c 	bl	800aeac <lv_obj_get_style_prop>
 8006894:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8006896:	2269      	movs	r2, #105	; 0x69
 8006898:	2100      	movs	r1, #0
 800689a:	4620      	mov	r0, r4
 800689c:	f004 fb06 	bl	800aeac <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 80068a0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 80068a4:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
    dest->y2 = src->y2;
 80068a8:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
        coords.x1 -= w;
 80068ac:	b2ab      	uxth	r3, r5
 80068ae:	8aa1      	ldrh	r1, [r4, #20]
 80068b0:	1ac9      	subs	r1, r1, r3
 80068b2:	f8ad 1008 	strh.w	r1, [sp, #8]
        coords.x2 += w;
 80068b6:	4473      	add	r3, lr
 80068b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        coords.y1 -= h;
 80068bc:	b283      	uxth	r3, r0
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	f8ad 200a 	strh.w	r2, [sp, #10]
        coords.y2 += h;
 80068c4:	4463      	add	r3, ip
 80068c6:	f8ad 300e 	strh.w	r3, [sp, #14]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80068ca:	4631      	mov	r1, r6
 80068cc:	a812      	add	r0, sp, #72	; 0x48
 80068ce:	f001 fa62 	bl	8007d96 <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 80068d2:	4bd0      	ldr	r3, [pc, #832]	; (8006c14 <lv_obj_draw+0x47c>)
 80068d4:	9313      	str	r3, [sp, #76]	; 0x4c
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 80068d6:	2500      	movs	r5, #0
 80068d8:	9514      	str	r5, [sp, #80]	; 0x50
        part_dsc.rect_dsc = &draw_dsc;
 80068da:	9716      	str	r7, [sp, #88]	; 0x58
        part_dsc.draw_area = &coords;
 80068dc:	ab02      	add	r3, sp, #8
 80068de:	9315      	str	r3, [sp, #84]	; 0x54
        part_dsc.part = LV_PART_MAIN;
 80068e0:	951f      	str	r5, [sp, #124]	; 0x7c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 80068e2:	aa12      	add	r2, sp, #72	; 0x48
 80068e4:	211a      	movs	r1, #26
 80068e6:	4620      	mov	r0, r4
 80068e8:	f7fd fd6c 	bl	80043c4 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 80068ec:	2217      	movs	r2, #23
 80068ee:	4629      	mov	r1, r5
 80068f0:	4620      	mov	r0, r4
 80068f2:	f004 fadb 	bl	800aeac <lv_obj_get_style_prop>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 80068f6:	b120      	cbz	r0, 8006902 <lv_obj_draw+0x16a>
 80068f8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 815a 	bne.w	8006bb6 <lv_obj_draw+0x41e>
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006902:	aa02      	add	r2, sp, #8
 8006904:	a904      	add	r1, sp, #16
 8006906:	4630      	mov	r0, r6
 8006908:	f008 ffec 	bl	800f8e4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 800690c:	aa12      	add	r2, sp, #72	; 0x48
 800690e:	211b      	movs	r1, #27
 8006910:	4620      	mov	r0, r4
 8006912:	f7fd fd57 	bl	80043c4 <lv_event_send>
 8006916:	e751      	b.n	80067bc <lv_obj_draw+0x24>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8006918:	4630      	mov	r0, r6
 800691a:	f7fd fde9 	bl	80044f0 <lv_event_get_draw_ctx>
 800691e:	4605      	mov	r5, r0
static void draw_scrollbar(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx)
{

    lv_area_t hor_area;
    lv_area_t ver_area;
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006920:	aa02      	add	r2, sp, #8
 8006922:	4669      	mov	r1, sp
 8006924:	4620      	mov	r0, r4
 8006926:	f003 fcd5 	bl	800a2d4 <lv_obj_get_scrollbar_area>

    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800692a:	4668      	mov	r0, sp
 800692c:	f01a fbbd 	bl	80210aa <lv_area_get_size>
 8006930:	b920      	cbnz	r0, 800693c <lv_obj_draw+0x1a4>
 8006932:	a802      	add	r0, sp, #8
 8006934:	f01a fbb9 	bl	80210aa <lv_area_get_size>
 8006938:	2800      	cmp	r0, #0
 800693a:	d067      	beq.n	8006a0c <lv_obj_draw+0x274>
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
    lv_draw_rect_dsc_init(dsc);
 800693c:	a804      	add	r0, sp, #16
 800693e:	f008 ff75 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8006942:	2221      	movs	r2, #33	; 0x21
 8006944:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006948:	4620      	mov	r0, r4
 800694a:	f004 faaf 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800694e:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8006950:	f88d 0013 	strb.w	r0, [sp, #19]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8006954:	2802      	cmp	r0, #2
 8006956:	f200 80ba 	bhi.w	8006ace <lv_obj_draw+0x336>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800695a:	2231      	movs	r2, #49	; 0x31
 800695c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006960:	4620      	mov	r0, r4
 8006962:	f004 faa3 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8006966:	b2c0      	uxtb	r0, r0
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8006968:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    if(dsc->border_opa > LV_OPA_MIN) {
 800696c:	2802      	cmp	r0, #2
 800696e:	f200 80b7 	bhi.w	8006ae0 <lv_obj_draw+0x348>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8006972:	2245      	movs	r2, #69	; 0x45
 8006974:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006978:	4620      	mov	r0, r4
 800697a:	f004 fa97 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800697e:	b2c0      	uxtb	r0, r0
            dsc->border_opa = LV_OPA_TRANSP;
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8006980:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8006984:	2802      	cmp	r0, #2
 8006986:	f200 80c3 	bhi.w	8006b10 <lv_obj_draw+0x378>
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800698a:	2260      	movs	r2, #96	; 0x60
 800698c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006990:	4620      	mov	r0, r4
 8006992:	f004 fa8b 	bl	800aeac <lv_obj_get_style_prop>
            dsc->shadow_opa = LV_OPA_TRANSP;
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa(obj, LV_PART_SCROLLBAR);
    if(opa < LV_OPA_MAX) {
 8006996:	b2c3      	uxtb	r3, r0
 8006998:	2bfc      	cmp	r3, #252	; 0xfc
 800699a:	d80d      	bhi.n	80069b8 <lv_obj_draw+0x220>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 800699c:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80069a0:	fb03 f000 	mul.w	r0, r3, r0
 80069a4:	1200      	asrs	r0, r0, #8
 80069a6:	f88d 0013 	strb.w	r0, [sp, #19]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 80069aa:	fb00 f303 	mul.w	r3, r0, r3
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 80069b4:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 80069b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80069bc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 80069c6:	4313      	orrs	r3, r2
 80069c8:	d020      	beq.n	8006a0c <lv_obj_draw+0x274>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 80069ca:	220b      	movs	r2, #11
 80069cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80069d0:	4620      	mov	r0, r4
 80069d2:	f004 fa6b 	bl	800aeac <lv_obj_get_style_prop>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 80069d6:	f8ad 0010 	strh.w	r0, [sp, #16]
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 80069da:	4629      	mov	r1, r5
 80069dc:	a812      	add	r0, sp, #72	; 0x48
 80069de:	f001 f9da 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 80069e2:	4b8c      	ldr	r3, [pc, #560]	; (8006c14 <lv_obj_draw+0x47c>)
 80069e4:	9313      	str	r3, [sp, #76]	; 0x4c
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 80069e6:	2302      	movs	r3, #2
 80069e8:	9314      	str	r3, [sp, #80]	; 0x50
    part_dsc.rect_dsc = &draw_dsc;
 80069ea:	ab04      	add	r3, sp, #16
 80069ec:	9316      	str	r3, [sp, #88]	; 0x58
    part_dsc.part = LV_PART_SCROLLBAR;
 80069ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069f2:	931f      	str	r3, [sp, #124]	; 0x7c
    if(lv_area_get_size(&hor_area) > 0) {
 80069f4:	4668      	mov	r0, sp
 80069f6:	f01a fb58 	bl	80210aa <lv_area_get_size>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	f040 80a8 	bne.w	8006b50 <lv_obj_draw+0x3b8>
    if(lv_area_get_size(&ver_area) > 0) {
 8006a00:	a802      	add	r0, sp, #8
 8006a02:	f01a fb52 	bl	80210aa <lv_area_get_size>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f040 80b4 	bne.w	8006b74 <lv_obj_draw+0x3dc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8006a0c:	2217      	movs	r2, #23
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4620      	mov	r0, r4
 8006a12:	f004 fa4b 	bl	800aeac <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f040 80bf 	bne.w	8006b9a <lv_obj_draw+0x402>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8006a1c:	2234      	movs	r2, #52	; 0x34
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4620      	mov	r0, r4
 8006a22:	f004 fa43 	bl	800aeac <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f43f aec8 	beq.w	80067bc <lv_obj_draw+0x24>
            lv_draw_rect_dsc_init(&draw_dsc);
 8006a2c:	af04      	add	r7, sp, #16
 8006a2e:	4638      	mov	r0, r7
 8006a30:	f008 fefc 	bl	800f82c <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006a34:	2600      	movs	r6, #0
 8006a36:	f88d 6013 	strb.w	r6, [sp, #19]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8006a3a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8006a3e:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8006a42:	f88d 6046 	strb.w	r6, [sp, #70]	; 0x46
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8006a46:	463a      	mov	r2, r7
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fe68 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8006a50:	2268      	movs	r2, #104	; 0x68
 8006a52:	4631      	mov	r1, r6
 8006a54:	4620      	mov	r0, r4
 8006a56:	f004 fa29 	bl	800aeac <lv_obj_get_style_prop>
 8006a5a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8006a5c:	2269      	movs	r2, #105	; 0x69
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4620      	mov	r0, r4
 8006a62:	f004 fa23 	bl	800aeac <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 8006a66:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8006a6a:	f9b4 e018 	ldrsh.w	lr, [r4, #24]
    dest->y2 = src->y2;
 8006a6e:	f9b4 c01a 	ldrsh.w	ip, [r4, #26]
            coords.x1 -= w;
 8006a72:	fa1f f388 	uxth.w	r3, r8
 8006a76:	8aa1      	ldrh	r1, [r4, #20]
 8006a78:	1ac9      	subs	r1, r1, r3
 8006a7a:	f8ad 1008 	strh.w	r1, [sp, #8]
            coords.x2 += w;
 8006a7e:	4473      	add	r3, lr
 8006a80:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.y1 -= h;
 8006a84:	b280      	uxth	r0, r0
 8006a86:	1a12      	subs	r2, r2, r0
 8006a88:	f8ad 200a 	strh.w	r2, [sp, #10]
            coords.y2 += h;
 8006a8c:	4460      	add	r0, ip
 8006a8e:	f8ad 000e 	strh.w	r0, [sp, #14]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8006a92:	4629      	mov	r1, r5
 8006a94:	a812      	add	r0, sp, #72	; 0x48
 8006a96:	f001 f97e 	bl	8007d96 <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8006a9a:	4b5e      	ldr	r3, [pc, #376]	; (8006c14 <lv_obj_draw+0x47c>)
 8006a9c:	9313      	str	r3, [sp, #76]	; 0x4c
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	9314      	str	r3, [sp, #80]	; 0x50
            part_dsc.rect_dsc = &draw_dsc;
 8006aa2:	9716      	str	r7, [sp, #88]	; 0x58
            part_dsc.draw_area = &coords;
 8006aa4:	f10d 0808 	add.w	r8, sp, #8
 8006aa8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
            part_dsc.part = LV_PART_MAIN;
 8006aac:	961f      	str	r6, [sp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8006aae:	aa12      	add	r2, sp, #72	; 0x48
 8006ab0:	211a      	movs	r1, #26
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f7fd fc86 	bl	80043c4 <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006ab8:	4642      	mov	r2, r8
 8006aba:	4639      	mov	r1, r7
 8006abc:	4628      	mov	r0, r5
 8006abe:	f008 ff11 	bl	800f8e4 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006ac2:	aa12      	add	r2, sp, #72	; 0x48
 8006ac4:	211b      	movs	r1, #27
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7fd fc7c 	bl	80043c4 <lv_event_send>
 8006acc:	e676      	b.n	80067bc <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f004 f9e9 	bl	800aeac <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8006ada:	f8ad 0014 	strh.w	r0, [sp, #20]
 8006ade:	e73c      	b.n	800695a <lv_obj_draw+0x1c2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006ae0:	2232      	movs	r2, #50	; 0x32
 8006ae2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f004 f9e0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006aec:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8006aee:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
        if(dsc->border_width > 0) {
 8006af2:	2800      	cmp	r0, #0
 8006af4:	dc03      	bgt.n	8006afe <lv_obj_draw+0x366>
            dsc->border_opa = LV_OPA_TRANSP;
 8006af6:	2300      	movs	r3, #0
 8006af8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8006afc:	e739      	b.n	8006972 <lv_obj_draw+0x1da>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8006afe:	2230      	movs	r2, #48	; 0x30
 8006b00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b04:	4620      	mov	r0, r4
 8006b06:	f004 f9d1 	bl	800aeac <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8006b0a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8006b0e:	e730      	b.n	8006972 <lv_obj_draw+0x1da>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8006b10:	2240      	movs	r2, #64	; 0x40
 8006b12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b16:	4620      	mov	r0, r4
 8006b18:	f004 f9c8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006b1c:	b200      	sxth	r0, r0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 8006b1e:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
        if(dsc->shadow_width > 0) {
 8006b22:	2800      	cmp	r0, #0
 8006b24:	dc03      	bgt.n	8006b2e <lv_obj_draw+0x396>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8006b26:	2300      	movs	r3, #0
 8006b28:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8006b2c:	e72d      	b.n	800698a <lv_obj_draw+0x1f2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8006b2e:	2243      	movs	r2, #67	; 0x43
 8006b30:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b34:	4620      	mov	r0, r4
 8006b36:	f004 f9b9 	bl	800aeac <lv_obj_get_style_prop>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8006b3a:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8006b3e:	2244      	movs	r2, #68	; 0x44
 8006b40:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8006b44:	4620      	mov	r0, r4
 8006b46:	f004 f9b1 	bl	800aeac <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8006b4a:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8006b4e:	e71c      	b.n	800698a <lv_obj_draw+0x1f2>
        part_dsc.draw_area = &hor_area;
 8006b50:	f8cd d054 	str.w	sp, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8006b54:	aa12      	add	r2, sp, #72	; 0x48
 8006b56:	211a      	movs	r1, #26
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f7fd fc33 	bl	80043c4 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8006b5e:	466a      	mov	r2, sp
 8006b60:	a904      	add	r1, sp, #16
 8006b62:	4628      	mov	r0, r5
 8006b64:	f008 febe 	bl	800f8e4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006b68:	aa12      	add	r2, sp, #72	; 0x48
 8006b6a:	211b      	movs	r1, #27
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7fd fc29 	bl	80043c4 <lv_event_send>
 8006b72:	e745      	b.n	8006a00 <lv_obj_draw+0x268>
        part_dsc.draw_area = &ver_area;
 8006b74:	ae02      	add	r6, sp, #8
 8006b76:	9615      	str	r6, [sp, #84]	; 0x54
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8006b78:	aa12      	add	r2, sp, #72	; 0x48
 8006b7a:	211a      	movs	r1, #26
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f7fd fc21 	bl	80043c4 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8006b82:	9615      	str	r6, [sp, #84]	; 0x54
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8006b84:	4632      	mov	r2, r6
 8006b86:	a904      	add	r1, sp, #16
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f008 feab 	bl	800f8e4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8006b8e:	aa12      	add	r2, sp, #72	; 0x48
 8006b90:	211b      	movs	r1, #27
 8006b92:	4620      	mov	r0, r4
 8006b94:	f7fd fc16 	bl	80043c4 <lv_event_send>
 8006b98:	e738      	b.n	8006a0c <lv_obj_draw+0x274>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8006b9a:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8006b9e:	f008 fa4b 	bl	800f038 <lv_draw_mask_remove_custom>
            if(param) {
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	f43f af39 	beq.w	8006a1c <lv_obj_draw+0x284>
                lv_draw_mask_free_param(param);
 8006baa:	f008 fa5d 	bl	800f068 <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f01b fa70 	bl	8022094 <lv_mem_buf_release>
 8006bb4:	e732      	b.n	8006a1c <lv_obj_draw+0x284>
        const void * bg_img_src = draw_dsc.bg_img_src;
 8006bb6:	f8dd 8020 	ldr.w	r8, [sp, #32]
            draw_dsc.bg_img_src = NULL;
 8006bba:	2700      	movs	r7, #0
 8006bbc:	9708      	str	r7, [sp, #32]
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006bbe:	aa02      	add	r2, sp, #8
 8006bc0:	a904      	add	r1, sp, #16
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f008 fe8e 	bl	800f8e4 <lv_draw_rect>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8006bc8:	2018      	movs	r0, #24
 8006bca:	f01b fa01 	bl	8021fd0 <lv_mem_buf_get>
 8006bce:	4605      	mov	r5, r0
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8006bd0:	463b      	mov	r3, r7
 8006bd2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8006bd6:	f104 0114 	add.w	r1, r4, #20
 8006bda:	f008 fbd3 	bl	800f384 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8006bde:	f504 7190 	add.w	r1, r4, #288	; 0x120
 8006be2:	4628      	mov	r0, r5
 8006be4:	f008 f9cc 	bl	800ef80 <lv_draw_mask_add>
            if(bg_img_src) {
 8006be8:	f1b8 0f00 	cmp.w	r8, #0
 8006bec:	f43f ae8e 	beq.w	800690c <lv_obj_draw+0x174>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f88d 3013 	strb.w	r3, [sp, #19]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8006bf6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8006bfa:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8006bfe:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                draw_dsc.bg_img_src = bg_img_src;
 8006c02:	f8cd 8020 	str.w	r8, [sp, #32]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8006c06:	aa02      	add	r2, sp, #8
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f008 fe6a 	bl	800f8e4 <lv_draw_rect>
 8006c10:	e67c      	b.n	800690c <lv_obj_draw+0x174>
 8006c12:	bf00      	nop
 8006c14:	0802d640 	.word	0x0802d640

08006c18 <lv_obj_constructor>:
{
 8006c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1c:	460c      	mov	r4, r1
    lv_obj_t * parent = obj->parent;
 8006c1e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    if(parent) {
 8006c22:	f1b8 0f00 	cmp.w	r8, #0
 8006c26:	d026      	beq.n	8006c76 <lv_obj_constructor+0x5e>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8006c28:	4640      	mov	r0, r8
 8006c2a:	f002 ff23 	bl	8009a74 <lv_obj_get_scroll_left>
 8006c2e:	4607      	mov	r7, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 8006c30:	4640      	mov	r0, r8
 8006c32:	f002 fead 	bl	8009990 <lv_obj_get_scroll_top>
 8006c36:	4605      	mov	r5, r0
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8006c38:	f8b8 6016 	ldrh.w	r6, [r8, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006c3c:	2210      	movs	r2, #16
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4640      	mov	r0, r8
 8006c42:	f004 f933 	bl	800aeac <lv_obj_get_style_prop>
 8006c46:	1833      	adds	r3, r6, r0
 8006c48:	1b5b      	subs	r3, r3, r5
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	8363      	strh	r3, [r4, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8006c52:	f8b8 5014 	ldrh.w	r5, [r8, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006c56:	2212      	movs	r2, #18
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	f004 f926 	bl	800aeac <lv_obj_get_style_prop>
 8006c60:	4405      	add	r5, r0
 8006c62:	1be8      	subs	r0, r5, r7
 8006c64:	b280      	uxth	r0, r0
 8006c66:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 8006c68:	3801      	subs	r0, #1
 8006c6a:	8320      	strh	r0, [r4, #24]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8006c6c:	f64b 3376 	movw	r3, #47990	; 0xbb76
 8006c70:	61e3      	str	r3, [r4, #28]
}
 8006c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 8006c76:	f641 0376 	movw	r3, #6262	; 0x1876
 8006c7a:	61cb      	str	r3, [r1, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 8006c7c:	e7f9      	b.n	8006c72 <lv_obj_constructor+0x5a>

08006c7e <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8006c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c82:	b08d      	sub	sp, #52	; 0x34
 8006c84:	910a      	str	r1, [sp, #40]	; 0x28
    if(obj->state == new_state) return;
 8006c86:	8c03      	ldrh	r3, [r0, #32]
 8006c88:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8a:	428b      	cmp	r3, r1
 8006c8c:	d008      	beq.n	8006ca0 <lv_obj_set_state+0x22>
 8006c8e:	4683      	mov	fp, r0
 8006c90:	460c      	mov	r4, r1

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
 8006c92:	8401      	strh	r1, [r0, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 8006c94:	460a      	mov	r2, r1
 8006c96:	4619      	mov	r1, r3
 8006c98:	f004 fe4c 	bl	800b934 <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 8006c9c:	9008      	str	r0, [sp, #32]
 8006c9e:	b910      	cbnz	r0, 8006ca6 <lv_obj_set_state+0x28>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 8006ca0:	b00d      	add	sp, #52	; 0x34
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8006ca6:	f44f 7020 	mov.w	r0, #640	; 0x280
 8006caa:	f01b f991 	bl	8021fd0 <lv_mem_buf_get>
 8006cae:	9005      	str	r0, [sp, #20]
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 8006cb0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006cb4:	f01b fbba 	bl	802242c <lv_memset_00>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8006cb8:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 8006cbc:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 8006cc0:	f000 80fc 	beq.w	8006ebc <lv_obj_set_state+0x23e>
 8006cc4:	2200      	movs	r2, #0
    uint32_t tsi = 0;
 8006cc6:	4692      	mov	sl, r2
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8006cc8:	43e3      	mvns	r3, r4
 8006cca:	9307      	str	r3, [sp, #28]
        }
    }
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8006ccc:	f8cd b010 	str.w	fp, [sp, #16]
 8006cd0:	4693      	mov	fp, r2
 8006cd2:	e01b      	b.n	8006d0c <lv_obj_set_state+0x8e>
        for(i = 0; i < style->prop_cnt; i++) {
 8006cd4:	79dd      	ldrb	r5, [r3, #7]
 8006cd6:	b165      	cbz	r5, 8006cf2 <lv_obj_set_state+0x74>
            const_prop = style->v_p.const_props + i;
 8006cd8:	681c      	ldr	r4, [r3, #0]
 8006cda:	4622      	mov	r2, r4
        for(i = 0; i < style->prop_cnt; i++) {
 8006cdc:	2300      	movs	r3, #0
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8006cde:	f834 1033 	ldrh.w	r1, [r4, r3, lsl #3]
            if(prop_id == prop) {
 8006ce2:	f3c1 000d 	ubfx	r0, r1, #0, #14
 8006ce6:	2866      	cmp	r0, #102	; 0x66
 8006ce8:	d048      	beq.n	8006d7c <lv_obj_set_state+0xfe>
        for(i = 0; i < style->prop_cnt; i++) {
 8006cea:	3301      	adds	r3, #1
 8006cec:	3208      	adds	r2, #8
 8006cee:	42ab      	cmp	r3, r5
 8006cf0:	d1f5      	bne.n	8006cde <lv_obj_set_state+0x60>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8006cf2:	f10b 0b01 	add.w	fp, fp, #1
 8006cf6:	9b04      	ldr	r3, [sp, #16]
 8006cf8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006cfa:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8006cfe:	455b      	cmp	r3, fp
 8006d00:	f240 80c5 	bls.w	8006e8e <lv_obj_set_state+0x210>
 8006d04:	f1ba 0f1f 	cmp.w	sl, #31
 8006d08:	f200 80ec 	bhi.w	8006ee4 <lv_obj_set_state+0x266>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8006d0c:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8006d10:	9f04      	ldr	r7, [sp, #16]
 8006d12:	68fd      	ldr	r5, [r7, #12]
 8006d14:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 8006d18:	9606      	str	r6, [sp, #24]
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 8006d1a:	6870      	ldr	r0, [r6, #4]
 8006d1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006d20:	f004 ff3f 	bl	800bba2 <lv_obj_style_get_selector_state>
 8006d24:	4680      	mov	r8, r0
 8006d26:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4423      	add	r3, r4
 8006d2c:	6858      	ldr	r0, [r3, #4]
 8006d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006d32:	f004 ff38 	bl	800bba6 <lv_obj_style_get_selector_part>
 8006d36:	4607      	mov	r7, r0
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 8006d38:	9b07      	ldr	r3, [sp, #28]
 8006d3a:	ea13 0f08 	tst.w	r3, r8
 8006d3e:	d1d8      	bne.n	8006cf2 <lv_obj_set_state+0x74>
        if(obj_style->is_trans) continue;
 8006d40:	79f3      	ldrb	r3, [r6, #7]
 8006d42:	f013 0f02 	tst.w	r3, #2
 8006d46:	d1d4      	bne.n	8006cf2 <lv_obj_set_state+0x74>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 8006d48:	592b      	ldr	r3, [r5, r4]
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8006d4a:	889a      	ldrh	r2, [r3, #4]
 8006d4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d50:	428a      	cmp	r2, r1
 8006d52:	d0bf      	beq.n	8006cd4 <lv_obj_set_state+0x56>
    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8006d54:	79d8      	ldrb	r0, [r3, #7]
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d0cb      	beq.n	8006cf2 <lv_obj_set_state+0x74>
    if(style->prop_cnt > 1) {
 8006d5a:	2801      	cmp	r0, #1
 8006d5c:	d936      	bls.n	8006dcc <lv_obj_set_state+0x14e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8006d5e:	681c      	ldr	r4, [r3, #0]
        for(i = 0; i < style->prop_cnt; i++) {
 8006d60:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8006d64:	3a02      	subs	r2, #2
 8006d66:	2300      	movs	r3, #0
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8006d68:	f832 1f02 	ldrh.w	r1, [r2, #2]!
            if(prop_id == prop) {
 8006d6c:	f3c1 050d 	ubfx	r5, r1, #0, #14
 8006d70:	2d66      	cmp	r5, #102	; 0x66
 8006d72:	d01d      	beq.n	8006db0 <lv_obj_set_state+0x132>
        for(i = 0; i < style->prop_cnt; i++) {
 8006d74:	3301      	adds	r3, #1
 8006d76:	4298      	cmp	r0, r3
 8006d78:	d1f6      	bne.n	8006d68 <lv_obj_set_state+0xea>
 8006d7a:	e7ba      	b.n	8006cf2 <lv_obj_set_state+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8006d7c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8006d80:	d1b7      	bne.n	8006cf2 <lv_obj_set_state+0x74>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8006d82:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 8006d86:	d10f      	bne.n	8006da8 <lv_obj_set_state+0x12a>
 8006d88:	f8d2 9004 	ldr.w	r9, [r2, #4]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006d8c:	f8d9 3000 	ldr.w	r3, [r9]
 8006d90:	881b      	ldrh	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0ad      	beq.n	8006cf2 <lv_obj_set_state+0x74>
 8006d96:	f1ba 0f1f 	cmp.w	sl, #31
 8006d9a:	d8aa      	bhi.n	8006cf2 <lv_obj_set_state+0x74>
 8006d9c:	f04f 0800 	mov.w	r8, #0
 8006da0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006da4:	46bb      	mov	fp, r7
 8006da6:	e047      	b.n	8006e38 <lv_obj_set_state+0x1ba>
 8006da8:	f01c f98c 	bl	80230c4 <lv_style_prop_get_default>
 8006dac:	4681      	mov	r9, r0
 8006dae:	e7ed      	b.n	8006d8c <lv_obj_set_state+0x10e>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8006db0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8006db4:	d19d      	bne.n	8006cf2 <lv_obj_set_state+0x74>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8006db6:	f411 4f80 	tst.w	r1, #16384	; 0x4000
 8006dba:	d102      	bne.n	8006dc2 <lv_obj_set_state+0x144>
                    *value = values[i];
 8006dbc:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
 8006dc0:	e7e4      	b.n	8006d8c <lv_obj_set_state+0x10e>
                    *value = lv_style_prop_get_default(prop_id);
 8006dc2:	2066      	movs	r0, #102	; 0x66
 8006dc4:	f01c f97e 	bl	80230c4 <lv_style_prop_get_default>
 8006dc8:	4681      	mov	r9, r0
 8006dca:	e7df      	b.n	8006d8c <lv_obj_set_state+0x10e>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8006dcc:	f3c2 010d 	ubfx	r1, r2, #0, #14
 8006dd0:	2966      	cmp	r1, #102	; 0x66
 8006dd2:	d18e      	bne.n	8006cf2 <lv_obj_set_state+0x74>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8006dd4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006dd8:	d18b      	bne.n	8006cf2 <lv_obj_set_state+0x74>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8006dda:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8006dde:	d102      	bne.n	8006de6 <lv_obj_set_state+0x168>
 8006de0:	f8d3 9000 	ldr.w	r9, [r3]
 8006de4:	e7d2      	b.n	8006d8c <lv_obj_set_state+0x10e>
 8006de6:	2066      	movs	r0, #102	; 0x66
 8006de8:	f01c f96c 	bl	80230c4 <lv_style_prop_get_default>
 8006dec:	4681      	mov	r9, r0
 8006dee:	e7cd      	b.n	8006d8c <lv_obj_set_state+0x10e>
            for(t = 0; t < tsi; t++) {
 8006df0:	3601      	adds	r6, #1
 8006df2:	3414      	adds	r4, #20
 8006df4:	4556      	cmp	r6, sl
 8006df6:	d025      	beq.n	8006e44 <lv_obj_set_state+0x1c6>
                lv_style_selector_t selector = ts[t].selector;
 8006df8:	6867      	ldr	r7, [r4, #4]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f004 fed1 	bl	800bba2 <lv_obj_style_get_selector_state>
 8006e00:	4605      	mov	r5, r0
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 8006e02:	4638      	mov	r0, r7
 8006e04:	f004 fecf 	bl	800bba6 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 8006e08:	f8d9 3000 	ldr.w	r3, [r9]
 8006e0c:	8922      	ldrh	r2, [r4, #8]
 8006e0e:	f833 3008 	ldrh.w	r3, [r3, r8]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d1ec      	bne.n	8006df0 <lv_obj_set_state+0x172>
 8006e16:	4583      	cmp	fp, r0
 8006e18:	d1ea      	bne.n	8006df0 <lv_obj_set_state+0x172>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	d8e7      	bhi.n	8006df0 <lv_obj_set_state+0x172>
            if(t == tsi) {
 8006e20:	45b2      	cmp	sl, r6
 8006e22:	d00f      	beq.n	8006e44 <lv_obj_set_state+0x1c6>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006e24:	f108 0802 	add.w	r8, r8, #2
 8006e28:	f8d9 3000 	ldr.w	r3, [r9]
 8006e2c:	f833 3008 	ldrh.w	r3, [r3, r8]
 8006e30:	b353      	cbz	r3, 8006e88 <lv_obj_set_state+0x20a>
 8006e32:	f1ba 0f1f 	cmp.w	sl, #31
 8006e36:	d824      	bhi.n	8006e82 <lv_obj_set_state+0x204>
            for(t = 0; t < tsi; t++) {
 8006e38:	f1ba 0f00 	cmp.w	sl, #0
 8006e3c:	d002      	beq.n	8006e44 <lv_obj_set_state+0x1c6>
 8006e3e:	9c05      	ldr	r4, [sp, #20]
 8006e40:	2600      	movs	r6, #0
 8006e42:	e7d9      	b.n	8006df8 <lv_obj_set_state+0x17a>
                ts[tsi].time = tr->time;
 8006e44:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8006e48:	9805      	ldr	r0, [sp, #20]
 8006e4a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006e4e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8006e52:	f820 1022 	strh.w	r1, [r0, r2, lsl #2]
                ts[tsi].delay = tr->delay;
 8006e56:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006e5a:	805a      	strh	r2, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8006e5c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8006e60:	60da      	str	r2, [r3, #12]
                ts[tsi].prop = tr->props[j];
 8006e62:	f8d9 2000 	ldr.w	r2, [r9]
 8006e66:	f832 2008 	ldrh.w	r2, [r2, r8]
 8006e6a:	811a      	strh	r2, [r3, #8]
                ts[tsi].user_data = tr->user_data;
 8006e6c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006e70:	611a      	str	r2, [r3, #16]
                ts[tsi].selector = obj_style->selector;
 8006e72:	9a06      	ldr	r2, [sp, #24]
 8006e74:	6852      	ldr	r2, [r2, #4]
 8006e76:	f3c2 0217 	ubfx	r2, r2, #0, #24
 8006e7a:	605a      	str	r2, [r3, #4]
                tsi++;
 8006e7c:	f10a 0a01 	add.w	sl, sl, #1
 8006e80:	e7d0      	b.n	8006e24 <lv_obj_set_state+0x1a6>
 8006e82:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8006e86:	e734      	b.n	8006cf2 <lv_obj_set_state+0x74>
 8006e88:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8006e8c:	e731      	b.n	8006cf2 <lv_obj_set_state+0x74>
    for(i = 0; i < tsi; i++) {
 8006e8e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006e92:	f1ba 0f00 	cmp.w	sl, #0
 8006e96:	d011      	beq.n	8006ebc <lv_obj_set_state+0x23e>
 8006e98:	9c05      	ldr	r4, [sp, #20]
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006e9e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8006ea0:	6860      	ldr	r0, [r4, #4]
 8006ea2:	f004 fe80 	bl	800bba6 <lv_obj_style_get_selector_part>
 8006ea6:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8006ea8:	9400      	str	r4, [sp, #0]
 8006eaa:	463b      	mov	r3, r7
 8006eac:	4632      	mov	r2, r6
 8006eae:	4658      	mov	r0, fp
 8006eb0:	f004 fc6c 	bl	800b78c <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	3414      	adds	r4, #20
 8006eb8:	45aa      	cmp	sl, r5
 8006eba:	d1f1      	bne.n	8006ea0 <lv_obj_set_state+0x222>
    lv_mem_buf_release(ts);
 8006ebc:	9805      	ldr	r0, [sp, #20]
 8006ebe:	f01b f8e9 	bl	8022094 <lv_mem_buf_release>
    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 8006ec2:	9b08      	ldr	r3, [sp, #32]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d010      	beq.n	8006eea <lv_obj_set_state+0x26c>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8006ec8:	9b08      	ldr	r3, [sp, #32]
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d011      	beq.n	8006ef2 <lv_obj_set_state+0x274>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	f47f aee5 	bne.w	8006ca0 <lv_obj_set_state+0x22>
        lv_obj_invalidate(obj);
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f001 fbb0 	bl	800863c <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 8006edc:	4658      	mov	r0, fp
 8006ede:	f000 ff69 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
 8006ee2:	e6dd      	b.n	8006ca0 <lv_obj_set_state+0x22>
 8006ee4:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006ee8:	e7d6      	b.n	8006e98 <lv_obj_set_state+0x21a>
        lv_obj_invalidate(obj);
 8006eea:	4658      	mov	r0, fp
 8006eec:	f001 fba6 	bl	800863c <lv_obj_invalidate>
 8006ef0:	e6d6      	b.n	8006ca0 <lv_obj_set_state+0x22>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8006ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ef6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006efa:	4658      	mov	r0, fp
 8006efc:	f004 f898 	bl	800b030 <lv_obj_refresh_style>
 8006f00:	e6ce      	b.n	8006ca0 <lv_obj_set_state+0x22>
	...

08006f04 <lv_init>:
{
 8006f04:	b508      	push	{r3, lr}
    if(lv_initialized) {
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <lv_init+0x4c>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <lv_init+0xa>
}
 8006f0c:	bd08      	pop	{r3, pc}
    lv_mem_init();
 8006f0e:	f01a ffff 	bl	8021f10 <lv_mem_init>
    _lv_timer_core_init();
 8006f12:	f01c fba5 	bl	8023660 <_lv_timer_core_init>
    _lv_fs_init();
 8006f16:	f01a fc7f 	bl	8021818 <_lv_fs_init>
    _lv_anim_core_init();
 8006f1a:	f019 ff75 	bl	8020e08 <_lv_anim_core_init>
    _lv_group_init();
 8006f1e:	f7fd fbb5 	bl	800468c <_lv_group_init>
    lv_draw_init();
 8006f22:	f006 fa5b 	bl	800d3dc <lv_draw_init>
    _lv_obj_style_init();
 8006f26:	f003 ffb3 	bl	800ae90 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8006f2a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8006f2e:	4809      	ldr	r0, [pc, #36]	; (8006f54 <lv_init+0x50>)
 8006f30:	f01a fe3d 	bl	8021bae <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8006f34:	215c      	movs	r1, #92	; 0x5c
 8006f36:	4808      	ldr	r0, [pc, #32]	; (8006f58 <lv_init+0x54>)
 8006f38:	f01a fe39 	bl	8021bae <_lv_ll_init>
    _lv_refr_init();
 8006f3c:	f005 f91c 	bl	800c178 <_lv_refr_init>
    _lv_img_decoder_init();
 8006f40:	f009 f9b8 	bl	80102b4 <_lv_img_decoder_init>
    lv_extra_init();
 8006f44:	f010 fe7a 	bl	8017c3c <lv_extra_init>
    lv_initialized = true;
 8006f48:	4b01      	ldr	r3, [pc, #4]	; (8006f50 <lv_init+0x4c>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	701a      	strb	r2, [r3, #0]
    LV_LOG_TRACE("finished");
 8006f4e:	e7dd      	b.n	8006f0c <lv_init+0x8>
 8006f50:	200025d8 	.word	0x200025d8
 8006f54:	2000287c 	.word	0x2000287c
 8006f58:	2000295c 	.word	0x2000295c

08006f5c <lv_obj_create>:
{
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8006f60:	4803      	ldr	r0, [pc, #12]	; (8006f70 <lv_obj_create+0x14>)
 8006f62:	f000 faf7 	bl	8007554 <lv_obj_class_create_obj>
 8006f66:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8006f68:	f000 fba1 	bl	80076ae <lv_obj_class_init_obj>
}
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	bd10      	pop	{r4, pc}
 8006f70:	0802d640 	.word	0x0802d640

08006f74 <lv_obj_add_flag>:
{
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	4604      	mov	r4, r0
 8006f7a:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8006f7c:	f001 f850 	bl	8008020 <lv_obj_is_layout_positioned>
 8006f80:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8006f82:	f015 0f01 	tst.w	r5, #1
 8006f86:	d117      	bne.n	8006fb8 <lv_obj_add_flag+0x44>
    obj->flags |= f;
 8006f88:	69e3      	ldr	r3, [r4, #28]
 8006f8a:	432b      	orrs	r3, r5
 8006f8c:	61e3      	str	r3, [r4, #28]
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f001 f846 	bl	8008020 <lv_obj_is_layout_positioned>
 8006f94:	42b0      	cmp	r0, r6
 8006f96:	d102      	bne.n	8006f9e <lv_obj_add_flag+0x2a>
 8006f98:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8006f9c:	d007      	beq.n	8006fae <lv_obj_add_flag+0x3a>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f004 fec6 	bl	800bd30 <lv_obj_get_parent>
 8006fa4:	f001 f856 	bl	8008054 <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f001 f853 	bl	8008054 <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8006fae:	f015 0f10 	tst.w	r5, #16
 8006fb2:	d10b      	bne.n	8006fcc <lv_obj_add_flag+0x58>
}
 8006fb4:	b004      	add	sp, #16
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f001 fb3f 	bl	800863c <lv_obj_invalidate>
    obj->flags |= f;
 8006fbe:	69e3      	ldr	r3, [r4, #28]
 8006fc0:	432b      	orrs	r3, r5
 8006fc2:	61e3      	str	r3, [r4, #28]
        lv_obj_invalidate(obj);
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f001 fb39 	bl	800863c <lv_obj_invalidate>
 8006fca:	e7e0      	b.n	8006f8e <lv_obj_add_flag+0x1a>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8006fcc:	aa02      	add	r2, sp, #8
 8006fce:	4669      	mov	r1, sp
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f003 f97f 	bl	800a2d4 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8006fd6:	4669      	mov	r1, sp
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f001 fb0b 	bl	80085f4 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8006fde:	a902      	add	r1, sp, #8
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f001 fb07 	bl	80085f4 <lv_obj_invalidate_area>
}
 8006fe6:	e7e5      	b.n	8006fb4 <lv_obj_add_flag+0x40>

08006fe8 <lv_obj_clear_flag>:
{
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	4604      	mov	r4, r0
 8006fee:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8006ff0:	f001 f816 	bl	8008020 <lv_obj_is_layout_positioned>
 8006ff4:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8006ff6:	f015 0f10 	tst.w	r5, #16
 8006ffa:	d115      	bne.n	8007028 <lv_obj_clear_flag+0x40>
    obj->flags &= (~f);
 8006ffc:	69e3      	ldr	r3, [r4, #28]
 8006ffe:	ea23 0305 	bic.w	r3, r3, r5
 8007002:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 8007004:	f015 0f01 	tst.w	r5, #1
 8007008:	d11c      	bne.n	8007044 <lv_obj_clear_flag+0x5c>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 800700a:	4620      	mov	r0, r4
 800700c:	f001 f808 	bl	8008020 <lv_obj_is_layout_positioned>
 8007010:	42b0      	cmp	r0, r6
 8007012:	d102      	bne.n	800701a <lv_obj_clear_flag+0x32>
 8007014:	f015 7fc0 	tst.w	r5, #25165824	; 0x1800000
 8007018:	d004      	beq.n	8007024 <lv_obj_clear_flag+0x3c>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 800701a:	4620      	mov	r0, r4
 800701c:	f004 fe88 	bl	800bd30 <lv_obj_get_parent>
 8007020:	f001 f818 	bl	8008054 <lv_obj_mark_layout_as_dirty>
}
 8007024:	b004      	add	sp, #16
 8007026:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8007028:	aa02      	add	r2, sp, #8
 800702a:	4669      	mov	r1, sp
 800702c:	4620      	mov	r0, r4
 800702e:	f003 f951 	bl	800a2d4 <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 8007032:	4669      	mov	r1, sp
 8007034:	4620      	mov	r0, r4
 8007036:	f001 fadd 	bl	80085f4 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 800703a:	a902      	add	r1, sp, #8
 800703c:	4620      	mov	r0, r4
 800703e:	f001 fad9 	bl	80085f4 <lv_obj_invalidate_area>
 8007042:	e7db      	b.n	8006ffc <lv_obj_clear_flag+0x14>
        lv_obj_invalidate(obj);
 8007044:	4620      	mov	r0, r4
 8007046:	f001 faf9 	bl	800863c <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 800704a:	4620      	mov	r0, r4
 800704c:	f000 ffe8 	bl	8008020 <lv_obj_is_layout_positioned>
 8007050:	2800      	cmp	r0, #0
 8007052:	d0da      	beq.n	800700a <lv_obj_clear_flag+0x22>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8007054:	4620      	mov	r0, r4
 8007056:	f004 fe6b 	bl	800bd30 <lv_obj_get_parent>
 800705a:	f000 fffb 	bl	8008054 <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 800705e:	4620      	mov	r0, r4
 8007060:	f000 fff8 	bl	8008054 <lv_obj_mark_layout_as_dirty>
 8007064:	e7d1      	b.n	800700a <lv_obj_clear_flag+0x22>

08007066 <lv_obj_add_state>:
{
 8007066:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state | state;
 8007068:	8c03      	ldrh	r3, [r0, #32]
 800706a:	ea43 0201 	orr.w	r2, r3, r1
    if(obj->state != new_state) {
 800706e:	ea31 0303 	bics.w	r3, r1, r3
 8007072:	d100      	bne.n	8007076 <lv_obj_add_state+0x10>
}
 8007074:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 8007076:	4611      	mov	r1, r2
 8007078:	f7ff fe01 	bl	8006c7e <lv_obj_set_state>
}
 800707c:	e7fa      	b.n	8007074 <lv_obj_add_state+0xe>

0800707e <lv_obj_clear_state>:
{
 800707e:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state & (~state);
 8007080:	8c03      	ldrh	r3, [r0, #32]
 8007082:	ea23 0201 	bic.w	r2, r3, r1
    if(obj->state != new_state) {
 8007086:	4219      	tst	r1, r3
 8007088:	d100      	bne.n	800708c <lv_obj_clear_state+0xe>
}
 800708a:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 800708c:	4611      	mov	r1, r2
 800708e:	f7ff fdf6 	bl	8006c7e <lv_obj_set_state>
}
 8007092:	e7fa      	b.n	800708a <lv_obj_clear_state+0xc>

08007094 <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 8007094:	69c3      	ldr	r3, [r0, #28]
 8007096:	ea31 0303 	bics.w	r3, r1, r3
}
 800709a:	bf0c      	ite	eq
 800709c:	2001      	moveq	r0, #1
 800709e:	2000      	movne	r0, #0
 80070a0:	4770      	bx	lr

080070a2 <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 80070a2:	69c3      	ldr	r3, [r0, #28]
 80070a4:	4219      	tst	r1, r3
}
 80070a6:	bf14      	ite	ne
 80070a8:	2001      	movne	r0, #1
 80070aa:	2000      	moveq	r0, #0
 80070ac:	4770      	bx	lr

080070ae <lv_obj_get_state>:
}
 80070ae:	8c00      	ldrh	r0, [r0, #32]
 80070b0:	4770      	bx	lr

080070b2 <lv_obj_has_state>:
    return obj->state & state ? true : false;
 80070b2:	8c03      	ldrh	r3, [r0, #32]
 80070b4:	4219      	tst	r1, r3
}
 80070b6:	bf14      	ite	ne
 80070b8:	2001      	movne	r0, #1
 80070ba:	2000      	moveq	r0, #0
 80070bc:	4770      	bx	lr

080070be <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 80070be:	6880      	ldr	r0, [r0, #8]
 80070c0:	b100      	cbz	r0, 80070c4 <lv_obj_get_group+0x6>
 80070c2:	6880      	ldr	r0, [r0, #8]
}
 80070c4:	4770      	bx	lr

080070c6 <lv_obj_event>:
{
 80070c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c8:	b085      	sub	sp, #20
 80070ca:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 80070cc:	4608      	mov	r0, r1
 80070ce:	f7fd f99f 	bl	8004410 <lv_event_get_code>
 80070d2:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7fd f999 	bl	800440c <lv_event_get_current_target>
 80070da:	4605      	mov	r5, r0
    if(code == LV_EVENT_PRESSED) {
 80070dc:	2c01      	cmp	r4, #1
 80070de:	d029      	beq.n	8007134 <lv_obj_event+0x6e>
    else if(code == LV_EVENT_RELEASED) {
 80070e0:	2c08      	cmp	r4, #8
 80070e2:	d02c      	beq.n	800713e <lv_obj_event+0x78>
    else if(code == LV_EVENT_PRESS_LOST) {
 80070e4:	2c03      	cmp	r4, #3
 80070e6:	d04b      	beq.n	8007180 <lv_obj_event+0xba>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 80070e8:	2c2a      	cmp	r4, #42	; 0x2a
 80070ea:	d04d      	beq.n	8007188 <lv_obj_event+0xc2>
    else if(code == LV_EVENT_KEY) {
 80070ec:	2c0d      	cmp	r4, #13
 80070ee:	d05b      	beq.n	80071a8 <lv_obj_event+0xe2>
    else if(code == LV_EVENT_FOCUSED) {
 80070f0:	2c0e      	cmp	r4, #14
 80070f2:	f000 8121 	beq.w	8007338 <lv_obj_event+0x272>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 80070f6:	2c09      	cmp	r4, #9
 80070f8:	f000 814c 	beq.w	8007394 <lv_obj_event+0x2ce>
    else if(code == LV_EVENT_SCROLL_END) {
 80070fc:	2c0a      	cmp	r4, #10
 80070fe:	f000 814d 	beq.w	800739c <lv_obj_event+0x2d6>
    else if(code == LV_EVENT_DEFOCUSED) {
 8007102:	2c0f      	cmp	r4, #15
 8007104:	f000 8161 	beq.w	80073ca <lv_obj_event+0x304>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8007108:	2c29      	cmp	r4, #41	; 0x29
 800710a:	f000 8162 	beq.w	80073d2 <lv_obj_event+0x30c>
    else if(code == LV_EVENT_CHILD_CHANGED) {
 800710e:	2c22      	cmp	r4, #34	; 0x22
 8007110:	f000 8183 	beq.w	800741a <lv_obj_event+0x354>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8007114:	2c13      	cmp	r4, #19
 8007116:	f000 81a8 	beq.w	800746a <lv_obj_event+0x3a4>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 800711a:	2c18      	cmp	r4, #24
 800711c:	d80d      	bhi.n	800713a <lv_obj_event+0x74>
 800711e:	f04f 7392 	mov.w	r3, #19136512	; 0x1240000
 8007122:	fa23 f404 	lsr.w	r4, r3, r4
 8007126:	f014 0f01 	tst.w	r4, #1
 800712a:	d006      	beq.n	800713a <lv_obj_event+0x74>
        lv_obj_draw(e);
 800712c:	4630      	mov	r0, r6
 800712e:	f7ff fb33 	bl	8006798 <lv_obj_draw>
 8007132:	e002      	b.n	800713a <lv_obj_event+0x74>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8007134:	2120      	movs	r1, #32
 8007136:	f7ff ff96 	bl	8007066 <lv_obj_add_state>
}
 800713a:	b005      	add	sp, #20
 800713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 800713e:	2120      	movs	r1, #32
 8007140:	f7ff ff9d 	bl	800707e <lv_obj_clear_state>
        void * param = lv_event_get_param(e);
 8007144:	4630      	mov	r0, r6
 8007146:	f7fd f967 	bl	8004418 <lv_event_get_param>
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 800714a:	f7fd fd85 	bl	8004c58 <lv_indev_get_scroll_obj>
 800714e:	2800      	cmp	r0, #0
 8007150:	d1f3      	bne.n	800713a <lv_obj_event+0x74>
    return (obj->flags & f)  == f ? true : false;
 8007152:	69eb      	ldr	r3, [r5, #28]
        if(lv_indev_get_scroll_obj(param) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8007154:	f013 0f08 	tst.w	r3, #8
 8007158:	d0ef      	beq.n	800713a <lv_obj_event+0x74>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 800715a:	8c2b      	ldrh	r3, [r5, #32]
 800715c:	f013 0f01 	tst.w	r3, #1
 8007160:	d109      	bne.n	8007176 <lv_obj_event+0xb0>
 8007162:	2101      	movs	r1, #1
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff ff7e 	bl	8007066 <lv_obj_add_state>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800716a:	2200      	movs	r2, #0
 800716c:	211c      	movs	r1, #28
 800716e:	4628      	mov	r0, r5
 8007170:	f7fd f928 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 8007174:	e7e1      	b.n	800713a <lv_obj_event+0x74>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8007176:	2101      	movs	r1, #1
 8007178:	4628      	mov	r0, r5
 800717a:	f7ff ff80 	bl	800707e <lv_obj_clear_state>
 800717e:	e7f4      	b.n	800716a <lv_obj_event+0xa4>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8007180:	2120      	movs	r1, #32
 8007182:	f7ff ff7c 	bl	800707e <lv_obj_clear_state>
 8007186:	e7d8      	b.n	800713a <lv_obj_event+0x74>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8007188:	f004 fdeb 	bl	800bd62 <lv_obj_get_child_cnt>
        for(uint32_t i = 0; i < child_cnt; i++) {
 800718c:	4606      	mov	r6, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	d0d3      	beq.n	800713a <lv_obj_event+0x74>
 8007192:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8007194:	68ab      	ldr	r3, [r5, #8]
 8007196:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 8007198:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800719c:	f000 ff5a 	bl	8008054 <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 80071a0:	3401      	adds	r4, #1
 80071a2:	42a6      	cmp	r6, r4
 80071a4:	d1f6      	bne.n	8007194 <lv_obj_event+0xce>
 80071a6:	e7c8      	b.n	800713a <lv_obj_event+0x74>
    return (obj->flags & f)  == f ? true : false;
 80071a8:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80071aa:	f013 0f08 	tst.w	r3, #8
 80071ae:	d13b      	bne.n	8007228 <lv_obj_event+0x162>
    return (obj->flags & f)  == f ? true : false;
 80071b0:	f403 6301 	and.w	r3, r3, #2064	; 0x810
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 80071b4:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80071b8:	d1bf      	bne.n	800713a <lv_obj_event+0x74>
 80071ba:	f000 fa54 	bl	8007666 <lv_obj_is_editable>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d1bb      	bne.n	800713a <lv_obj_event+0x74>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 80071c2:	4628      	mov	r0, r5
 80071c4:	f002 fc56 	bl	8009a74 <lv_obj_get_scroll_left>
 80071c8:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80071ca:	4628      	mov	r0, r5
 80071cc:	f002 fcc6 	bl	8009b5c <lv_obj_get_scroll_right>
 80071d0:	4604      	mov	r4, r0
            char c = *((char *)lv_event_get_param(e));
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7fd f920 	bl	8004418 <lv_event_get_param>
 80071d8:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 80071da:	2b12      	cmp	r3, #18
 80071dc:	d043      	beq.n	8007266 <lv_obj_event+0x1a0>
            else if(c == LV_KEY_UP) {
 80071de:	2b11      	cmp	r3, #17
 80071e0:	d054      	beq.n	800728c <lv_obj_event+0x1c6>
            else if(c == LV_KEY_RIGHT) {
 80071e2:	2b13      	cmp	r3, #19
 80071e4:	d065      	beq.n	80072b2 <lv_obj_event+0x1ec>
            else if(c == LV_KEY_LEFT) {
 80071e6:	2b14      	cmp	r3, #20
 80071e8:	d1a7      	bne.n	800713a <lv_obj_event+0x74>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 80071ea:	4628      	mov	r0, r5
 80071ec:	f002 fba8 	bl	8009940 <lv_obj_get_scroll_dir>
 80071f0:	f010 0f03 	tst.w	r0, #3
 80071f4:	f000 808d 	beq.w	8007312 <lv_obj_event+0x24c>
 80071f8:	2f00      	cmp	r7, #0
 80071fa:	dc02      	bgt.n	8007202 <lv_obj_event+0x13c>
 80071fc:	2c00      	cmp	r4, #0
 80071fe:	f340 8088 	ble.w	8007312 <lv_obj_event+0x24c>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8007202:	4628      	mov	r0, r5
 8007204:	f002 fbb4 	bl	8009970 <lv_obj_get_scroll_x>
 8007208:	4604      	mov	r4, r0
 800720a:	4628      	mov	r0, r5
 800720c:	f000 ffcf 	bl	80081ae <lv_obj_get_width>
 8007210:	4601      	mov	r1, r0
 8007212:	2800      	cmp	r0, #0
 8007214:	bfb8      	it	lt
 8007216:	1cc1      	addlt	r1, r0, #3
 8007218:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 800721c:	2200      	movs	r2, #0
 800721e:	b209      	sxth	r1, r1
 8007220:	4628      	mov	r0, r5
 8007222:	f002 fe83 	bl	8009f2c <lv_obj_scroll_to_x>
 8007226:	e788      	b.n	800713a <lv_obj_event+0x74>
            char c = *((char *)lv_event_get_param(e));
 8007228:	4630      	mov	r0, r6
 800722a:	f7fd f8f5 	bl	8004418 <lv_event_get_param>
 800722e:	7804      	ldrb	r4, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8007230:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 8007234:	2b11      	cmp	r3, #17
 8007236:	d007      	beq.n	8007248 <lv_obj_event+0x182>
            else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 8007238:	2c14      	cmp	r4, #20
 800723a:	d00f      	beq.n	800725c <lv_obj_event+0x196>
 800723c:	2c12      	cmp	r4, #18
 800723e:	d00d      	beq.n	800725c <lv_obj_event+0x196>
            if(c != LV_KEY_ENTER) {
 8007240:	2c0a      	cmp	r4, #10
 8007242:	f43f af7a 	beq.w	800713a <lv_obj_event+0x74>
 8007246:	e003      	b.n	8007250 <lv_obj_event+0x18a>
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 8007248:	2101      	movs	r1, #1
 800724a:	4628      	mov	r0, r5
 800724c:	f7ff ff0b 	bl	8007066 <lv_obj_add_state>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8007250:	2200      	movs	r2, #0
 8007252:	211c      	movs	r1, #28
 8007254:	4628      	mov	r0, r5
 8007256:	f7fd f8b5 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 800725a:	e76e      	b.n	800713a <lv_obj_event+0x74>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 800725c:	2101      	movs	r1, #1
 800725e:	4628      	mov	r0, r5
 8007260:	f7ff ff0d 	bl	800707e <lv_obj_clear_state>
 8007264:	e7ec      	b.n	8007240 <lv_obj_event+0x17a>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 8007266:	4628      	mov	r0, r5
 8007268:	f002 fb8a 	bl	8009980 <lv_obj_get_scroll_y>
 800726c:	4604      	mov	r4, r0
 800726e:	4628      	mov	r0, r5
 8007270:	f000 ffa3 	bl	80081ba <lv_obj_get_height>
 8007274:	4601      	mov	r1, r0
 8007276:	2800      	cmp	r0, #0
 8007278:	bfb8      	it	lt
 800727a:	1cc1      	addlt	r1, r0, #3
 800727c:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8007280:	2200      	movs	r2, #0
 8007282:	b209      	sxth	r1, r1
 8007284:	4628      	mov	r0, r5
 8007286:	f002 fe65 	bl	8009f54 <lv_obj_scroll_to_y>
 800728a:	e756      	b.n	800713a <lv_obj_event+0x74>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 800728c:	4628      	mov	r0, r5
 800728e:	f002 fb77 	bl	8009980 <lv_obj_get_scroll_y>
 8007292:	4604      	mov	r4, r0
 8007294:	4628      	mov	r0, r5
 8007296:	f000 ff90 	bl	80081ba <lv_obj_get_height>
 800729a:	4601      	mov	r1, r0
 800729c:	2800      	cmp	r0, #0
 800729e:	bfb8      	it	lt
 80072a0:	1cc1      	addlt	r1, r0, #3
 80072a2:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 80072a6:	2200      	movs	r2, #0
 80072a8:	b209      	sxth	r1, r1
 80072aa:	4628      	mov	r0, r5
 80072ac:	f002 fe52 	bl	8009f54 <lv_obj_scroll_to_y>
 80072b0:	e743      	b.n	800713a <lv_obj_event+0x74>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 80072b2:	4628      	mov	r0, r5
 80072b4:	f002 fb44 	bl	8009940 <lv_obj_get_scroll_dir>
 80072b8:	f010 0f03 	tst.w	r0, #3
 80072bc:	d016      	beq.n	80072ec <lv_obj_event+0x226>
 80072be:	2f00      	cmp	r7, #0
 80072c0:	dc01      	bgt.n	80072c6 <lv_obj_event+0x200>
 80072c2:	2c00      	cmp	r4, #0
 80072c4:	dd12      	ble.n	80072ec <lv_obj_event+0x226>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 80072c6:	4628      	mov	r0, r5
 80072c8:	f002 fb52 	bl	8009970 <lv_obj_get_scroll_x>
 80072cc:	4604      	mov	r4, r0
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 ff6d 	bl	80081ae <lv_obj_get_width>
 80072d4:	4601      	mov	r1, r0
 80072d6:	2800      	cmp	r0, #0
 80072d8:	bfb8      	it	lt
 80072da:	1cc1      	addlt	r1, r0, #3
 80072dc:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 80072e0:	2200      	movs	r2, #0
 80072e2:	b209      	sxth	r1, r1
 80072e4:	4628      	mov	r0, r5
 80072e6:	f002 fe21 	bl	8009f2c <lv_obj_scroll_to_x>
 80072ea:	e726      	b.n	800713a <lv_obj_event+0x74>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 80072ec:	4628      	mov	r0, r5
 80072ee:	f002 fb47 	bl	8009980 <lv_obj_get_scroll_y>
 80072f2:	4604      	mov	r4, r0
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 ff60 	bl	80081ba <lv_obj_get_height>
 80072fa:	4601      	mov	r1, r0
 80072fc:	2800      	cmp	r0, #0
 80072fe:	bfb8      	it	lt
 8007300:	1cc1      	addlt	r1, r0, #3
 8007302:	eb04 01a1 	add.w	r1, r4, r1, asr #2
 8007306:	2200      	movs	r2, #0
 8007308:	b209      	sxth	r1, r1
 800730a:	4628      	mov	r0, r5
 800730c:	f002 fe22 	bl	8009f54 <lv_obj_scroll_to_y>
 8007310:	e713      	b.n	800713a <lv_obj_event+0x74>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8007312:	4628      	mov	r0, r5
 8007314:	f002 fb34 	bl	8009980 <lv_obj_get_scroll_y>
 8007318:	4604      	mov	r4, r0
 800731a:	4628      	mov	r0, r5
 800731c:	f000 ff4d 	bl	80081ba <lv_obj_get_height>
 8007320:	4601      	mov	r1, r0
 8007322:	2800      	cmp	r0, #0
 8007324:	bfb8      	it	lt
 8007326:	1cc1      	addlt	r1, r0, #3
 8007328:	eba4 01a1 	sub.w	r1, r4, r1, asr #2
 800732c:	2200      	movs	r2, #0
 800732e:	b209      	sxth	r1, r1
 8007330:	4628      	mov	r0, r5
 8007332:	f002 fe0f 	bl	8009f54 <lv_obj_scroll_to_y>
 8007336:	e700      	b.n	800713a <lv_obj_event+0x74>
    return (obj->flags & f)  == f ? true : false;
 8007338:	69c3      	ldr	r3, [r0, #28]
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 800733a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800733e:	d117      	bne.n	8007370 <lv_obj_event+0x2aa>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 8007340:	4628      	mov	r0, r5
 8007342:	f7ff febc 	bl	80070be <lv_obj_get_group>
 8007346:	f7fd fb01 	bl	800494c <lv_group_get_editing>
 800734a:	4604      	mov	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
 800734c:	f7fd fbe0 	bl	8004b10 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8007350:	b190      	cbz	r0, 8007378 <lv_obj_event+0x2b2>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8007352:	f7fd fbe3 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8007356:	2802      	cmp	r0, #2
 8007358:	d012      	beq.n	8007380 <lv_obj_event+0x2ba>
 800735a:	2804      	cmp	r0, #4
 800735c:	bf14      	ite	ne
 800735e:	2102      	movne	r1, #2
 8007360:	2106      	moveq	r1, #6
        if(editing) {
 8007362:	b17c      	cbz	r4, 8007384 <lv_obj_event+0x2be>
            lv_obj_add_state(obj, state);
 8007364:	f041 0108 	orr.w	r1, r1, #8
 8007368:	4628      	mov	r0, r5
 800736a:	f7ff fe7c 	bl	8007066 <lv_obj_add_state>
 800736e:	e6e4      	b.n	800713a <lv_obj_event+0x74>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 8007370:	2101      	movs	r1, #1
 8007372:	f002 ff8d 	bl	800a290 <lv_obj_scroll_to_view_recursive>
 8007376:	e7e3      	b.n	8007340 <lv_obj_event+0x27a>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8007378:	4630      	mov	r0, r6
 800737a:	f7fd f8b1 	bl	80044e0 <lv_event_get_indev>
 800737e:	e7e8      	b.n	8007352 <lv_obj_event+0x28c>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8007380:	2106      	movs	r1, #6
 8007382:	e7ee      	b.n	8007362 <lv_obj_event+0x29c>
            lv_obj_add_state(obj, state);
 8007384:	4628      	mov	r0, r5
 8007386:	f7ff fe6e 	bl	8007066 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 800738a:	2108      	movs	r1, #8
 800738c:	4628      	mov	r0, r5
 800738e:	f7ff fe76 	bl	800707e <lv_obj_clear_state>
 8007392:	e6d2      	b.n	800713a <lv_obj_event+0x74>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 8007394:	2140      	movs	r1, #64	; 0x40
 8007396:	f7ff fe66 	bl	8007066 <lv_obj_add_state>
 800739a:	e6ce      	b.n	800713a <lv_obj_event+0x74>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 800739c:	2140      	movs	r1, #64	; 0x40
 800739e:	f7ff fe6e 	bl	800707e <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 80073a2:	4628      	mov	r0, r5
 80073a4:	f002 fac4 	bl	8009930 <lv_obj_get_scrollbar_mode>
 80073a8:	2802      	cmp	r0, #2
 80073aa:	f47f aec6 	bne.w	800713a <lv_obj_event+0x74>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 80073ae:	aa02      	add	r2, sp, #8
 80073b0:	4669      	mov	r1, sp
 80073b2:	4628      	mov	r0, r5
 80073b4:	f002 ff8e 	bl	800a2d4 <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 80073b8:	4669      	mov	r1, sp
 80073ba:	4628      	mov	r0, r5
 80073bc:	f001 f91a 	bl	80085f4 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 80073c0:	a902      	add	r1, sp, #8
 80073c2:	4628      	mov	r0, r5
 80073c4:	f001 f916 	bl	80085f4 <lv_obj_invalidate_area>
 80073c8:	e6b7      	b.n	800713a <lv_obj_event+0x74>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 80073ca:	210e      	movs	r1, #14
 80073cc:	f7ff fe57 	bl	800707e <lv_obj_clear_state>
 80073d0:	e6b3      	b.n	800713a <lv_obj_event+0x74>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80073d2:	2209      	movs	r2, #9
 80073d4:	2100      	movs	r1, #0
 80073d6:	f003 fd69 	bl	800aeac <lv_obj_get_style_prop>
 80073da:	4604      	mov	r4, r0
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80073dc:	220a      	movs	r2, #10
 80073de:	2100      	movs	r1, #0
 80073e0:	4628      	mov	r0, r5
 80073e2:	f003 fd63 	bl	800aeac <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80073e6:	b280      	uxth	r0, r0
        if(layout || align) {
 80073e8:	b910      	cbnz	r0, 80073f0 <lv_obj_event+0x32a>
 80073ea:	f014 0fff 	tst.w	r4, #255	; 0xff
 80073ee:	d002      	beq.n	80073f6 <lv_obj_event+0x330>
            lv_obj_mark_layout_as_dirty(obj);
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 fe2f 	bl	8008054 <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80073f6:	4628      	mov	r0, r5
 80073f8:	f004 fcb3 	bl	800bd62 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 80073fc:	4606      	mov	r6, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f ae9b 	beq.w	800713a <lv_obj_event+0x74>
 8007404:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 8007406:	68ab      	ldr	r3, [r5, #8]
 8007408:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 800740a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800740e:	f000 fe21 	bl	8008054 <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 8007412:	3401      	adds	r4, #1
 8007414:	42a6      	cmp	r6, r4
 8007416:	d1f6      	bne.n	8007406 <lv_obj_event+0x340>
 8007418:	e68f      	b.n	800713a <lv_obj_event+0x74>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800741a:	2201      	movs	r2, #1
 800741c:	2100      	movs	r1, #0
 800741e:	f003 fd45 	bl	800aeac <lv_obj_get_style_prop>
 8007422:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8007424:	2204      	movs	r2, #4
 8007426:	2100      	movs	r1, #0
 8007428:	4628      	mov	r0, r5
 800742a:	f003 fd3f 	bl	800aeac <lv_obj_get_style_prop>
 800742e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8007430:	2209      	movs	r2, #9
 8007432:	2100      	movs	r1, #0
 8007434:	4628      	mov	r0, r5
 8007436:	f003 fd39 	bl	800aeac <lv_obj_get_style_prop>
 800743a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800743c:	220a      	movs	r2, #10
 800743e:	2100      	movs	r1, #0
 8007440:	4628      	mov	r0, r5
 8007442:	f003 fd33 	bl	800aeac <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8007446:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8007448:	b958      	cbnz	r0, 8007462 <lv_obj_event+0x39c>
 800744a:	f016 0fff 	tst.w	r6, #255	; 0xff
 800744e:	d108      	bne.n	8007462 <lv_obj_event+0x39c>
 8007450:	b224      	sxth	r4, r4
 8007452:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8007456:	429c      	cmp	r4, r3
 8007458:	d003      	beq.n	8007462 <lv_obj_event+0x39c>
 800745a:	b238      	sxth	r0, r7
 800745c:	4298      	cmp	r0, r3
 800745e:	f47f ae6c 	bne.w	800713a <lv_obj_event+0x74>
            lv_obj_mark_layout_as_dirty(obj);
 8007462:	4628      	mov	r0, r5
 8007464:	f000 fdf6 	bl	8008054 <lv_obj_mark_layout_as_dirty>
 8007468:	e667      	b.n	800713a <lv_obj_event+0x74>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 800746a:	2100      	movs	r1, #0
 800746c:	f000 fc29 	bl	8007cc2 <lv_obj_calculate_ext_draw_size>
 8007470:	4601      	mov	r1, r0
        lv_event_set_ext_draw_size(e, d);
 8007472:	4630      	mov	r0, r6
 8007474:	f7fd f844 	bl	8004500 <lv_event_set_ext_draw_size>
 8007478:	e65f      	b.n	800713a <lv_obj_event+0x74>
	...

0800747c <lv_obj_destructor>:
{
 800747c:	b510      	push	{r4, lr}
 800747e:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 8007480:	4608      	mov	r0, r1
 8007482:	f7fc ffcd 	bl	8004420 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 8007486:	2000      	movs	r0, #0
 8007488:	f003 fd0a 	bl	800aea0 <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800748c:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <lv_obj_destructor+0x64>)
 800748e:	2100      	movs	r1, #0
 8007490:	4620      	mov	r0, r4
 8007492:	f004 f801 	bl	800b498 <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 8007496:	2001      	movs	r0, #1
 8007498:	f003 fd02 	bl	800aea0 <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 800749c:	2100      	movs	r1, #0
 800749e:	4620      	mov	r0, r4
 80074a0:	f019 fce6 	bl	8020e70 <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 80074a4:	4620      	mov	r0, r4
 80074a6:	f7ff fe0a 	bl	80070be <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 80074aa:	b110      	cbz	r0, 80074b2 <lv_obj_destructor+0x36>
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7fd f934 	bl	800471a <lv_group_remove_obj>
    if(obj->spec_attr) {
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	b19b      	cbz	r3, 80074de <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	b120      	cbz	r0, 80074c4 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 80074ba:	f01a fd55 	bl	8021f68 <lv_mem_free>
            obj->spec_attr->children = NULL;
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 80074c4:	68a3      	ldr	r3, [r4, #8]
 80074c6:	68d8      	ldr	r0, [r3, #12]
 80074c8:	b120      	cbz	r0, 80074d4 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 80074ca:	f01a fd4d 	bl	8021f68 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	2200      	movs	r2, #0
 80074d2:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 80074d4:	68a0      	ldr	r0, [r4, #8]
 80074d6:	f01a fd47 	bl	8021f68 <lv_mem_free>
        obj->spec_attr = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	60a3      	str	r3, [r4, #8]
}
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	000fffff 	.word	0x000fffff

080074e4 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 80074e4:	6883      	ldr	r3, [r0, #8]
 80074e6:	b103      	cbz	r3, 80074ea <lv_obj_allocate_spec_attr+0x6>
 80074e8:	4770      	bx	lr
{
 80074ea:	b510      	push	{r4, lr}
 80074ec:	4604      	mov	r4, r0
        x++;
 80074ee:	4a0c      	ldr	r2, [pc, #48]	; (8007520 <lv_obj_allocate_spec_attr+0x3c>)
 80074f0:	6813      	ldr	r3, [r2, #0]
 80074f2:	3301      	adds	r3, #1
 80074f4:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 80074f6:	201c      	movs	r0, #28
 80074f8:	f01a fd18 	bl	8021f2c <lv_mem_alloc>
 80074fc:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 80074fe:	b168      	cbz	r0, 800751c <lv_obj_allocate_spec_attr+0x38>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 8007500:	211c      	movs	r1, #28
 8007502:	f01a ff93 	bl	802242c <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 8007506:	68a2      	ldr	r2, [r4, #8]
 8007508:	7e53      	ldrb	r3, [r2, #25]
 800750a:	f043 030f 	orr.w	r3, r3, #15
 800750e:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 8007510:	68a2      	ldr	r2, [r4, #8]
 8007512:	7e13      	ldrb	r3, [r2, #24]
 8007514:	f043 0303 	orr.w	r3, r3, #3
 8007518:	7613      	strb	r3, [r2, #24]
}
 800751a:	bd10      	pop	{r4, pc}
        LV_ASSERT_MALLOC(obj->spec_attr);
 800751c:	e7fe      	b.n	800751c <lv_obj_allocate_spec_attr+0x38>
 800751e:	bf00      	nop
 8007520:	200025dc 	.word	0x200025dc

08007524 <lv_obj_check_type>:
    if(obj == NULL) return false;
 8007524:	b128      	cbz	r0, 8007532 <lv_obj_check_type+0xe>
    return obj->class_p == class_p ? true : false;
 8007526:	6800      	ldr	r0, [r0, #0]
 8007528:	4288      	cmp	r0, r1
 800752a:	bf14      	ite	ne
 800752c:	2000      	movne	r0, #0
 800752e:	2001      	moveq	r0, #1
 8007530:	4770      	bx	lr
    if(obj == NULL) return false;
 8007532:	2000      	movs	r0, #0
}
 8007534:	4770      	bx	lr

08007536 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 8007536:	b538      	push	{r3, r4, r5, lr}
 8007538:	4604      	mov	r4, r0
    const lv_obj_class_t * original_class_p = obj->class_p;
 800753a:	6805      	ldr	r5, [r0, #0]

    if(obj->class_p->base_class) {
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b113      	cbz	r3, 8007546 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 8007540:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 8007542:	f7ff fff8 	bl	8007536 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 8007546:	6025      	str	r5, [r4, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 8007548:	686b      	ldr	r3, [r5, #4]
 800754a:	b113      	cbz	r3, 8007552 <lv_obj_construct+0x1c>
 800754c:	4621      	mov	r1, r4
 800754e:	4628      	mov	r0, r5
 8007550:	4798      	blx	r3
}
 8007552:	bd38      	pop	{r3, r4, r5, pc}

08007554 <lv_obj_class_create_obj>:
{
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	460d      	mov	r5, r1

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
 8007558:	4607      	mov	r7, r0

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 800755a:	2400      	movs	r4, #0
    while(base && base->instance_size == 0) base = base->base_class;
 800755c:	2800      	cmp	r0, #0
 800755e:	d049      	beq.n	80075f4 <lv_obj_class_create_obj+0xa0>
    const lv_obj_class_t * base = class_p;
 8007560:	4603      	mov	r3, r0
    while(base && base->instance_size == 0) base = base->base_class;
 8007562:	4a38      	ldr	r2, [pc, #224]	; (8007644 <lv_obj_class_create_obj+0xf0>)
 8007564:	6998      	ldr	r0, [r3, #24]
 8007566:	ea12 0400 	ands.w	r4, r2, r0
 800756a:	d140      	bne.n	80075ee <lv_obj_class_create_obj+0x9a>
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f8      	bne.n	8007564 <lv_obj_class_create_obj+0x10>
 8007572:	e03f      	b.n	80075f4 <lv_obj_class_create_obj+0xa0>
        lv_disp_t * disp = lv_disp_get_default();
 8007574:	f019 fa7c 	bl	8020a70 <lv_disp_get_default>
        if(!disp) {
 8007578:	4604      	mov	r4, r0
 800757a:	b1e0      	cbz	r0, 80075b6 <lv_obj_class_create_obj+0x62>
        if(disp->screens == NULL) {
 800757c:	68c0      	ldr	r0, [r0, #12]
 800757e:	b1f8      	cbz	r0, 80075c0 <lv_obj_class_create_obj+0x6c>
            disp->screen_cnt++;
 8007580:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007582:	3101      	adds	r1, #1
 8007584:	6261      	str	r1, [r4, #36]	; 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8007586:	0089      	lsls	r1, r1, #2
 8007588:	f01a fd0a 	bl	8021fa0 <lv_mem_realloc>
 800758c:	60e0      	str	r0, [r4, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 800758e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007594:	3b01      	subs	r3, #1
 8007596:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
        obj->coords.x1 = 0;
 800759a:	2400      	movs	r4, #0
 800759c:	82b4      	strh	r4, [r6, #20]
        obj->coords.y1 = 0;
 800759e:	82f4      	strh	r4, [r6, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 80075a0:	4620      	mov	r0, r4
 80075a2:	f019 fa6b 	bl	8020a7c <lv_disp_get_hor_res>
 80075a6:	1e43      	subs	r3, r0, #1
 80075a8:	8333      	strh	r3, [r6, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 80075aa:	4620      	mov	r0, r4
 80075ac:	f019 fa7a 	bl	8020aa4 <lv_disp_get_ver_res>
 80075b0:	1e43      	subs	r3, r0, #1
 80075b2:	8373      	strh	r3, [r6, #26]
 80075b4:	e043      	b.n	800763e <lv_obj_class_create_obj+0xea>
            lv_mem_free(obj);
 80075b6:	4630      	mov	r0, r6
 80075b8:	f01a fcd6 	bl	8021f68 <lv_mem_free>
            return NULL;
 80075bc:	4626      	mov	r6, r4
 80075be:	e03e      	b.n	800763e <lv_obj_class_create_obj+0xea>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 80075c0:	2004      	movs	r0, #4
 80075c2:	f01a fcb3 	bl	8021f2c <lv_mem_alloc>
 80075c6:	60e0      	str	r0, [r4, #12]
            disp->screens[0] = obj;
 80075c8:	6006      	str	r6, [r0, #0]
            disp->screen_cnt = 1;
 80075ca:	2301      	movs	r3, #1
 80075cc:	6263      	str	r3, [r4, #36]	; 0x24
 80075ce:	e7e4      	b.n	800759a <lv_obj_class_create_obj+0x46>
            lv_obj_allocate_spec_attr(parent);
 80075d0:	4628      	mov	r0, r5
 80075d2:	f7ff ff87 	bl	80074e4 <lv_obj_allocate_spec_attr>
 80075d6:	e01c      	b.n	8007612 <lv_obj_class_create_obj+0xbe>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 80075d8:	2004      	movs	r0, #4
 80075da:	f01a fca7 	bl	8021f2c <lv_mem_alloc>
 80075de:	6020      	str	r0, [r4, #0]
            parent->spec_attr->children[0] = obj;
 80075e0:	68ab      	ldr	r3, [r5, #8]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	601e      	str	r6, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 80075e6:	68ab      	ldr	r3, [r5, #8]
 80075e8:	2201      	movs	r2, #1
 80075ea:	605a      	str	r2, [r3, #4]
 80075ec:	e027      	b.n	800763e <lv_obj_class_create_obj+0xea>

    return base->instance_size;
 80075ee:	699c      	ldr	r4, [r3, #24]
 80075f0:	f3c4 140f 	ubfx	r4, r4, #4, #16
    lv_obj_t * obj = lv_mem_alloc(s);
 80075f4:	4620      	mov	r0, r4
 80075f6:	f01a fc99 	bl	8021f2c <lv_mem_alloc>
    if(obj == NULL) return NULL;
 80075fa:	4606      	mov	r6, r0
 80075fc:	b1f8      	cbz	r0, 800763e <lv_obj_class_create_obj+0xea>
    lv_memset_00(obj, s);
 80075fe:	4621      	mov	r1, r4
 8007600:	f01a ff14 	bl	802242c <lv_memset_00>
    obj->class_p = class_p;
 8007604:	6037      	str	r7, [r6, #0]
    obj->parent = parent;
 8007606:	6075      	str	r5, [r6, #4]
    if(parent == NULL) {
 8007608:	2d00      	cmp	r5, #0
 800760a:	d0b3      	beq.n	8007574 <lv_obj_class_create_obj+0x20>
        if(parent->spec_attr == NULL) {
 800760c:	68ab      	ldr	r3, [r5, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0de      	beq.n	80075d0 <lv_obj_class_create_obj+0x7c>
        if(parent->spec_attr->children == NULL) {
 8007612:	68ac      	ldr	r4, [r5, #8]
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0de      	beq.n	80075d8 <lv_obj_class_create_obj+0x84>
            parent->spec_attr->child_cnt++;
 800761a:	6863      	ldr	r3, [r4, #4]
 800761c:	3301      	adds	r3, #1
 800761e:	6063      	str	r3, [r4, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8007620:	68ac      	ldr	r4, [r5, #8]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8007622:	6861      	ldr	r1, [r4, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8007624:	0089      	lsls	r1, r1, #2
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	f01a fcba 	bl	8021fa0 <lv_mem_realloc>
 800762c:	6020      	str	r0, [r4, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 800762e:	68aa      	ldr	r2, [r5, #8]
 8007630:	6853      	ldr	r3, [r2, #4]
 8007632:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007636:	3b01      	subs	r3, #1
 8007638:	6812      	ldr	r2, [r2, #0]
 800763a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
}
 800763e:	4630      	mov	r0, r6
 8007640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007642:	bf00      	nop
 8007644:	000ffff0 	.word	0x000ffff0

08007648 <_lv_obj_destruct>:
{
 8007648:	b510      	push	{r4, lr}
 800764a:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 800764c:	6800      	ldr	r0, [r0, #0]
 800764e:	6883      	ldr	r3, [r0, #8]
 8007650:	b10b      	cbz	r3, 8007656 <_lv_obj_destruct+0xe>
 8007652:	4621      	mov	r1, r4
 8007654:	4798      	blx	r3
    if(obj->class_p->base_class) {
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	b11b      	cbz	r3, 8007664 <_lv_obj_destruct+0x1c>
        obj->class_p = obj->class_p->base_class;
 800765c:	6023      	str	r3, [r4, #0]
        _lv_obj_destruct(obj);
 800765e:	4620      	mov	r0, r4
 8007660:	f7ff fff2 	bl	8007648 <_lv_obj_destruct>
}
 8007664:	bd10      	pop	{r4, pc}

08007666 <lv_obj_is_editable>:
    const lv_obj_class_t * class_p = obj->class_p;
 8007666:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8007668:	b143      	cbz	r3, 800767c <lv_obj_is_editable+0x16>
 800766a:	7e18      	ldrb	r0, [r3, #24]
 800766c:	f010 0003 	ands.w	r0, r0, #3
 8007670:	d106      	bne.n	8007680 <lv_obj_is_editable+0x1a>
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1f8      	bne.n	800766a <lv_obj_is_editable+0x4>
    if(class_p == NULL) return false;
 8007678:	2000      	movs	r0, #0
 800767a:	4770      	bx	lr
 800767c:	2000      	movs	r0, #0
 800767e:	4770      	bx	lr
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8007680:	2801      	cmp	r0, #1
 8007682:	bf14      	ite	ne
 8007684:	2000      	movne	r0, #0
 8007686:	2001      	moveq	r0, #1
}
 8007688:	4770      	bx	lr

0800768a <lv_obj_is_group_def>:
    const lv_obj_class_t * class_p = obj->class_p;
 800768a:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 800768c:	b143      	cbz	r3, 80076a0 <lv_obj_is_group_def+0x16>
 800768e:	7e18      	ldrb	r0, [r3, #24]
 8007690:	f010 000c 	ands.w	r0, r0, #12
 8007694:	d106      	bne.n	80076a4 <lv_obj_is_group_def+0x1a>
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f8      	bne.n	800768e <lv_obj_is_group_def+0x4>
    if(class_p == NULL) return false;
 800769c:	2000      	movs	r0, #0
 800769e:	4770      	bx	lr
 80076a0:	2000      	movs	r0, #0
 80076a2:	4770      	bx	lr
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 80076a4:	2804      	cmp	r0, #4
 80076a6:	bf14      	ite	ne
 80076a8:	2000      	movne	r0, #0
 80076aa:	2001      	moveq	r0, #1
}
 80076ac:	4770      	bx	lr

080076ae <lv_obj_class_init_obj>:
{
 80076ae:	b538      	push	{r3, r4, r5, lr}
 80076b0:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 80076b2:	f000 fccf 	bl	8008054 <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 80076b6:	2000      	movs	r0, #0
 80076b8:	f003 fbf2 	bl	800aea0 <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 80076bc:	4620      	mov	r0, r4
 80076be:	f005 fe71 	bl	800d3a4 <lv_theme_apply>
    lv_obj_construct(obj);
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff ff37 	bl	8007536 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 80076c8:	2001      	movs	r0, #1
 80076ca:	f003 fbe9 	bl	800aea0 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 80076ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076d2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80076d6:	4620      	mov	r0, r4
 80076d8:	f003 fcaa 	bl	800b030 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fe03 	bl	80082e8 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 80076e2:	f7fc ffdb 	bl	800469c <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 80076e6:	b120      	cbz	r0, 80076f2 <lv_obj_class_init_obj+0x44>
 80076e8:	4605      	mov	r5, r0
 80076ea:	4620      	mov	r0, r4
 80076ec:	f7ff ffcd 	bl	800768a <lv_obj_is_group_def>
 80076f0:	b988      	cbnz	r0, 8007716 <lv_obj_class_init_obj+0x68>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80076f2:	4620      	mov	r0, r4
 80076f4:	f004 fb1c 	bl	800bd30 <lv_obj_get_parent>
    if(parent) {
 80076f8:	4605      	mov	r5, r0
 80076fa:	b158      	cbz	r0, 8007714 <lv_obj_class_init_obj+0x66>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 80076fc:	4622      	mov	r2, r4
 80076fe:	2122      	movs	r1, #34	; 0x22
 8007700:	f7fc fe60 	bl	80043c4 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 8007704:	4622      	mov	r2, r4
 8007706:	2123      	movs	r1, #35	; 0x23
 8007708:	4628      	mov	r0, r5
 800770a:	f7fc fe5b 	bl	80043c4 <lv_event_send>
        lv_obj_invalidate(obj);
 800770e:	4620      	mov	r0, r4
 8007710:	f000 ff94 	bl	800863c <lv_obj_invalidate>
}
 8007714:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_add_obj(def_group, obj);
 8007716:	4621      	mov	r1, r4
 8007718:	4628      	mov	r0, r5
 800771a:	f7fd f850 	bl	80047be <lv_group_add_obj>
 800771e:	e7e8      	b.n	80076f2 <lv_obj_class_init_obj+0x44>

08007720 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	4605      	mov	r5, r0
 8007724:	4614      	mov	r4, r2
    lv_opa_t opa = LV_OPA_COVER;
    if(part != LV_PART_MAIN) {
 8007726:	460e      	mov	r6, r1
 8007728:	2900      	cmp	r1, #0
 800772a:	d13e      	bne.n	80077aa <lv_obj_init_draw_rect_dsc+0x8a>
    lv_opa_t opa = LV_OPA_COVER;
 800772c:	27ff      	movs	r7, #255	; 0xff
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 800772e:	220b      	movs	r2, #11
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	f003 fbba 	bl	800aeac <lv_obj_get_style_prop>
    }

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);

    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8007738:	8020      	strh	r0, [r4, #0]

    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 800773a:	78e3      	ldrb	r3, [r4, #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d14b      	bne.n	80077d8 <lv_obj_init_draw_rect_dsc+0xb8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8007740:	2232      	movs	r2, #50	; 0x32
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	f003 fbb1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800774a:	b200      	sxth	r0, r0
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
            }
        }
    }

    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 800774c:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 800774e:	b120      	cbz	r0, 800775a <lv_obj_init_draw_rect_dsc+0x3a>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8007750:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 809c 	bne.w	8007892 <lv_obj_init_draw_rect_dsc+0x172>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 800775a:	2235      	movs	r2, #53	; 0x35
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	f003 fba4 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007764:	b200      	sxth	r0, r0
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
            }
        }
    }

    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8007766:	84e0      	strh	r0, [r4, #38]	; 0x26
    if(draw_dsc->outline_width) {
 8007768:	b120      	cbz	r0, 8007774 <lv_obj_init_draw_rect_dsc+0x54>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 800776a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 80b1 	bne.w	80078d6 <lv_obj_init_draw_rect_dsc+0x1b6>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
            }
        }
    }

    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8007774:	7ea3      	ldrb	r3, [r4, #26]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 80ca 	bne.w	8007910 <lv_obj_init_draw_rect_dsc+0x1f0>
                }
            }
        }
    }

    if(draw_dsc->shadow_opa) {
 800777c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 810a 	bne.w	800799a <lv_obj_init_draw_rect_dsc+0x27a>
            }
        }
    }
#endif

    if(part != LV_PART_MAIN) {
 8007786:	b17e      	cbz	r6, 80077a8 <lv_obj_init_draw_rect_dsc+0x88>
        if(opa < LV_OPA_MAX) {
 8007788:	2ffc      	cmp	r7, #252	; 0xfc
 800778a:	d80d      	bhi.n	80077a8 <lv_obj_init_draw_rect_dsc+0x88>
            draw_dsc->bg_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800778c:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
 8007790:	fb00 f707 	mul.w	r7, r0, r7
 8007794:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8007798:	70e7      	strb	r7, [r4, #3]
            draw_dsc->bg_img_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800779a:	76a7      	strb	r7, [r4, #26]
            draw_dsc->border_opa = (opa * draw_dsc->shadow_opa) >> 8;
 800779c:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
            draw_dsc->outline_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80077a0:	f884 702a 	strb.w	r7, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 80077a4:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
        }
    }
}
 80077a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 80077aa:	2260      	movs	r2, #96	; 0x60
 80077ac:	f003 fb7e 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80077b0:	b2c7      	uxtb	r7, r0
        if(opa <= LV_OPA_MIN) {
 80077b2:	2f02      	cmp	r7, #2
 80077b4:	d906      	bls.n	80077c4 <lv_obj_init_draw_rect_dsc+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80077b6:	2267      	movs	r2, #103	; 0x67
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	f003 fb76 	bl	800aeac <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80077c0:	70a0      	strb	r0, [r4, #2]
 80077c2:	e7b4      	b.n	800772e <lv_obj_init_draw_rect_dsc+0xe>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 80077c4:	2300      	movs	r3, #0
 80077c6:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 80077c8:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 80077ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 80077ce:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 80077d2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
            return;
 80077d6:	e7e7      	b.n	80077a8 <lv_obj_init_draw_rect_dsc+0x88>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 80077d8:	2221      	movs	r2, #33	; 0x21
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	f003 fb65 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80077e2:	b2c0      	uxtb	r0, r0
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 80077e4:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 80077e6:	2802      	cmp	r0, #2
 80077e8:	d9aa      	bls.n	8007740 <lv_obj_init_draw_rect_dsc+0x20>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 80077ea:	2220      	movs	r2, #32
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	f003 fb5c 	bl	800aeac <lv_obj_get_style_prop>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	f004 f87d 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 80077fe:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 8007800:	2226      	movs	r2, #38	; 0x26
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	f003 fb51 	bl	800aeac <lv_obj_get_style_prop>
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 800780a:	4601      	mov	r1, r0
 800780c:	b118      	cbz	r0, 8007816 <lv_obj_init_draw_rect_dsc+0xf6>
 800780e:	7a43      	ldrb	r3, [r0, #9]
 8007810:	f013 0f07 	tst.w	r3, #7
 8007814:	d115      	bne.n	8007842 <lv_obj_init_draw_rect_dsc+0x122>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8007816:	2223      	movs	r2, #35	; 0x23
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	f003 fb46 	bl	800aeac <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8007820:	7be3      	ldrb	r3, [r4, #15]
 8007822:	f360 0302 	bfi	r3, r0, #0, #3
 8007826:	73e3      	strb	r3, [r4, #15]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8007828:	f013 0f07 	tst.w	r3, #7
 800782c:	d10e      	bne.n	800784c <lv_obj_init_draw_rect_dsc+0x12c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 800782e:	2227      	movs	r2, #39	; 0x27
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	f003 fb3a 	bl	800aeac <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8007838:	7be3      	ldrb	r3, [r4, #15]
 800783a:	f360 03c5 	bfi	r3, r0, #3, #3
 800783e:	73e3      	strb	r3, [r4, #15]
 8007840:	e77e      	b.n	8007740 <lv_obj_init_draw_rect_dsc+0x20>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8007842:	220a      	movs	r2, #10
 8007844:	1da0      	adds	r0, r4, #6
 8007846:	f01a fc5b 	bl	8022100 <lv_memcpy>
 800784a:	e779      	b.n	8007740 <lv_obj_init_draw_rect_dsc+0x20>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 800784c:	2220      	movs	r2, #32
 800784e:	4631      	mov	r1, r6
 8007850:	4628      	mov	r0, r5
 8007852:	f003 fb2b 	bl	800aeac <lv_obj_get_style_prop>
 8007856:	4602      	mov	r2, r0
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	f004 f84c 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8007860:	80e0      	strh	r0, [r4, #6]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 8007862:	2222      	movs	r2, #34	; 0x22
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	f003 fb20 	bl	800aeac <lv_obj_get_style_prop>
 800786c:	4602      	mov	r2, r0
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	f004 f841 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8007876:	8160      	strh	r0, [r4, #10]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8007878:	2224      	movs	r2, #36	; 0x24
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	f003 fb15 	bl	800aeac <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 8007882:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8007884:	2225      	movs	r2, #37	; 0x25
 8007886:	4631      	mov	r1, r6
 8007888:	4628      	mov	r0, r5
 800788a:	f003 fb0f 	bl	800aeac <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 800788e:	7320      	strb	r0, [r4, #12]
 8007890:	e7cd      	b.n	800782e <lv_obj_init_draw_rect_dsc+0x10e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8007892:	2231      	movs	r2, #49	; 0x31
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	f003 fb08 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800789c:	b2c0      	uxtb	r0, r0
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 800789e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 80078a2:	2802      	cmp	r0, #2
 80078a4:	f67f af59 	bls.w	800775a <lv_obj_init_draw_rect_dsc+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 80078a8:	2233      	movs	r2, #51	; 0x33
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	f003 fafd 	bl	800aeac <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 80078b2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80078b6:	f360 0345 	bfi	r3, r0, #1, #5
 80078ba:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 80078be:	2230      	movs	r2, #48	; 0x30
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	f003 faf2 	bl	800aeac <lv_obj_get_style_prop>
 80078c8:	4602      	mov	r2, r0
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	f004 f813 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 80078d2:	83e0      	strh	r0, [r4, #30]
 80078d4:	e741      	b.n	800775a <lv_obj_init_draw_rect_dsc+0x3a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80078d6:	2237      	movs	r2, #55	; 0x37
 80078d8:	4631      	mov	r1, r6
 80078da:	4628      	mov	r0, r5
 80078dc:	f003 fae6 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80078e0:	b2c0      	uxtb	r0, r0
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 80078e2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 80078e6:	2802      	cmp	r0, #2
 80078e8:	f67f af44 	bls.w	8007774 <lv_obj_init_draw_rect_dsc+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80078ec:	2238      	movs	r2, #56	; 0x38
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	f003 fadb 	bl	800aeac <lv_obj_get_style_prop>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 80078f6:	8520      	strh	r0, [r4, #40]	; 0x28
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 80078f8:	2236      	movs	r2, #54	; 0x36
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	f003 fad5 	bl	800aeac <lv_obj_get_style_prop>
 8007902:	4602      	mov	r2, r0
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	f003 fff6 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 800790c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800790e:	e731      	b.n	8007774 <lv_obj_init_draw_rect_dsc+0x54>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8007910:	2228      	movs	r2, #40	; 0x28
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	f003 fac9 	bl	800aeac <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 800791a:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 800791c:	2800      	cmp	r0, #0
 800791e:	f43f af2d 	beq.w	800777c <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8007922:	2229      	movs	r2, #41	; 0x29
 8007924:	4631      	mov	r1, r6
 8007926:	4628      	mov	r0, r5
 8007928:	f003 fac0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800792c:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 800792e:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8007930:	2802      	cmp	r0, #2
 8007932:	f67f af23 	bls.w	800777c <lv_obj_init_draw_rect_dsc+0x5c>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8007936:	6920      	ldr	r0, [r4, #16]
 8007938:	f006 f83f 	bl	800d9ba <lv_img_src_get_type>
 800793c:	2802      	cmp	r0, #2
 800793e:	d01a      	beq.n	8007976 <lv_obj_init_draw_rect_dsc+0x256>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 8007940:	222a      	movs	r2, #42	; 0x2a
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	f003 fab1 	bl	800aeac <lv_obj_get_style_prop>
 800794a:	4602      	mov	r2, r0
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	f003 ffd2 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8007954:	8320      	strh	r0, [r4, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8007956:	222b      	movs	r2, #43	; 0x2b
 8007958:	4631      	mov	r1, r6
 800795a:	4628      	mov	r0, r5
 800795c:	f003 faa6 	bl	800aeac <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8007960:	76e0      	strb	r0, [r4, #27]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 8007962:	222c      	movs	r2, #44	; 0x2c
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	f003 faa0 	bl	800aeac <lv_obj_get_style_prop>
    return (bool)v.num;
 800796c:	3800      	subs	r0, #0
 800796e:	bf18      	it	ne
 8007970:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8007972:	7720      	strb	r0, [r4, #28]
 8007974:	e702      	b.n	800777c <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8007976:	2257      	movs	r2, #87	; 0x57
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	f003 fa96 	bl	800aeac <lv_obj_get_style_prop>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8007980:	6160      	str	r0, [r4, #20]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8007982:	2255      	movs	r2, #85	; 0x55
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	f003 fa90 	bl	800aeac <lv_obj_get_style_prop>
 800798c:	4602      	mov	r2, r0
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	f003 ffb1 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8007996:	8320      	strh	r0, [r4, #24]
 8007998:	e6f0      	b.n	800777c <lv_obj_init_draw_rect_dsc+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 800799a:	2240      	movs	r2, #64	; 0x40
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	f003 fa84 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80079a4:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 80079a6:	85e0      	strh	r0, [r4, #46]	; 0x2e
        if(draw_dsc->shadow_width) {
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f43f aeec 	beq.w	8007786 <lv_obj_init_draw_rect_dsc+0x66>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80079ae:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	f67f aee7 	bls.w	8007786 <lv_obj_init_draw_rect_dsc+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 80079b8:	2245      	movs	r2, #69	; 0x45
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	f003 fa75 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80079c2:	b2c0      	uxtb	r0, r0
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 80079c4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 80079c8:	2802      	cmp	r0, #2
 80079ca:	f67f aedc 	bls.w	8007786 <lv_obj_init_draw_rect_dsc+0x66>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 80079ce:	2241      	movs	r2, #65	; 0x41
 80079d0:	4631      	mov	r1, r6
 80079d2:	4628      	mov	r0, r5
 80079d4:	f003 fa6a 	bl	800aeac <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 80079d8:	8620      	strh	r0, [r4, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 80079da:	2242      	movs	r2, #66	; 0x42
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	f003 fa64 	bl	800aeac <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 80079e4:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 80079e6:	2243      	movs	r2, #67	; 0x43
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	f003 fa5e 	bl	800aeac <lv_obj_get_style_prop>
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 80079f0:	86a0      	strh	r0, [r4, #52]	; 0x34
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 80079f2:	2244      	movs	r2, #68	; 0x44
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	f003 fa58 	bl	800aeac <lv_obj_get_style_prop>
 80079fc:	4602      	mov	r2, r0
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	f003 ff79 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8007a06:	85a0      	strh	r0, [r4, #44]	; 0x2c
 8007a08:	e6bd      	b.n	8007786 <lv_obj_init_draw_rect_dsc+0x66>

08007a0a <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8007a0a:	b570      	push	{r4, r5, r6, lr}
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	4615      	mov	r5, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 8007a12:	2256      	movs	r2, #86	; 0x56
 8007a14:	f003 fa4a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007a18:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8007a1a:	76ab      	strb	r3, [r5, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d93d      	bls.n	8007a9c <lv_obj_init_draw_label_dsc+0x92>

    if(part != LV_PART_MAIN) {
 8007a20:	b17c      	cbz	r4, 8007a42 <lv_obj_init_draw_label_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007a22:	2260      	movs	r2, #96	; 0x60
 8007a24:	4621      	mov	r1, r4
 8007a26:	4630      	mov	r0, r6
 8007a28:	f003 fa40 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007a2c:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d935      	bls.n	8007a9e <lv_obj_init_draw_label_dsc+0x94>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 8007a32:	2bfc      	cmp	r3, #252	; 0xfc
 8007a34:	d805      	bhi.n	8007a42 <lv_obj_init_draw_label_dsc+0x38>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007a36:	7eab      	ldrb	r3, [r5, #26]
 8007a38:	b2c0      	uxtb	r0, r0
 8007a3a:	fb03 f000 	mul.w	r0, r3, r0
 8007a3e:	1200      	asrs	r0, r0, #8
 8007a40:	76a8      	strb	r0, [r5, #26]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8007a42:	2255      	movs	r2, #85	; 0x55
 8007a44:	4621      	mov	r1, r4
 8007a46:	4630      	mov	r0, r6
 8007a48:	f003 fa30 	bl	800aeac <lv_obj_get_style_prop>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4630      	mov	r0, r6
 8007a52:	f003 ff51 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
        }
    }

    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8007a56:	81a8      	strh	r0, [r5, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8007a58:	2258      	movs	r2, #88	; 0x58
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f003 fa25 	bl	800aeac <lv_obj_get_style_prop>
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8007a62:	82a8      	strh	r0, [r5, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8007a64:	2259      	movs	r2, #89	; 0x59
 8007a66:	4621      	mov	r1, r4
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f003 fa1f 	bl	800aeac <lv_obj_get_style_prop>
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8007a6e:	8268      	strh	r0, [r5, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8007a70:	225a      	movs	r2, #90	; 0x5a
 8007a72:	4621      	mov	r1, r4
 8007a74:	4630      	mov	r0, r6
 8007a76:	f003 fa19 	bl	800aeac <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8007a7a:	7fab      	ldrb	r3, [r5, #30]
 8007a7c:	f360 0302 	bfi	r3, r0, #0, #3
 8007a80:	77ab      	strb	r3, [r5, #30]
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007a82:	b97c      	cbnz	r4, 8007aa4 <lv_obj_init_draw_label_dsc+0x9a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8007a84:	2257      	movs	r2, #87	; 0x57
 8007a86:	4621      	mov	r1, r4
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f003 fa0f 	bl	800aeac <lv_obj_get_style_prop>
#endif

    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8007a8e:	6028      	str	r0, [r5, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8007a90:	225b      	movs	r2, #91	; 0x5b
 8007a92:	4621      	mov	r1, r4
 8007a94:	4630      	mov	r0, r6
 8007a96:	f003 fa09 	bl	800aeac <lv_obj_get_style_prop>

#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8007a9a:	7728      	strb	r0, [r5, #28]
}
 8007a9c:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = LV_OPA_TRANSP;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	76ab      	strb	r3, [r5, #26]
            return;
 8007aa2:	e7fb      	b.n	8007a9c <lv_obj_init_draw_label_dsc+0x92>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007aa4:	2267      	movs	r2, #103	; 0x67
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f003 f9ff 	bl	800aeac <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007aae:	7fab      	ldrb	r3, [r5, #30]
 8007ab0:	f360 03c5 	bfi	r3, r0, #3, #3
 8007ab4:	77ab      	strb	r3, [r5, #30]
 8007ab6:	e7e5      	b.n	8007a84 <lv_obj_init_draw_label_dsc+0x7a>

08007ab8 <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4605      	mov	r5, r0
 8007abc:	460e      	mov	r6, r1
 8007abe:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8007ac0:	2246      	movs	r2, #70	; 0x46
 8007ac2:	f003 f9f3 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007ac6:	b2c0      	uxtb	r0, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 8007ac8:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8007aca:	2802      	cmp	r0, #2
 8007acc:	d932      	bls.n	8007b34 <lv_obj_init_draw_img_dsc+0x7c>

    if(part != LV_PART_MAIN) {
 8007ace:	b17e      	cbz	r6, 8007af0 <lv_obj_init_draw_img_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007ad0:	2260      	movs	r2, #96	; 0x60
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f003 f9e9 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007ada:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d92a      	bls.n	8007b36 <lv_obj_init_draw_img_dsc+0x7e>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 8007ae0:	2bfc      	cmp	r3, #252	; 0xfc
 8007ae2:	d805      	bhi.n	8007af0 <lv_obj_init_draw_img_dsc+0x38>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007ae4:	7ae3      	ldrb	r3, [r4, #11]
 8007ae6:	b2c0      	uxtb	r0, r0
 8007ae8:	fb03 f000 	mul.w	r0, r3, r0
 8007aec:	1200      	asrs	r0, r0, #8
 8007aee:	72e0      	strb	r0, [r4, #11]
        }
    }

    draw_dsc->angle = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	8023      	strh	r3, [r4, #0]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8007af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007af8:	8063      	strh	r3, [r4, #2]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007afa:	8b2b      	ldrh	r3, [r5, #24]
 8007afc:	3301      	adds	r3, #1
 8007afe:	8aaa      	ldrh	r2, [r5, #20]
 8007b00:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8007b02:	b21a      	sxth	r2, r3
 8007b04:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8007b08:	4413      	add	r3, r2
 8007b0a:	105b      	asrs	r3, r3, #1
 8007b0c:	80a3      	strh	r3, [r4, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007b0e:	8b6b      	ldrh	r3, [r5, #26]
 8007b10:	3301      	adds	r3, #1
 8007b12:	8aea      	ldrh	r2, [r5, #22]
 8007b14:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 8007b16:	b21a      	sxth	r2, r3
 8007b18:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	105b      	asrs	r3, r3, #1
 8007b20:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 8007b22:	2248      	movs	r2, #72	; 0x48
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	f003 f9c0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007b2c:	b2c0      	uxtb	r0, r0

    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 8007b2e:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8007b30:	b920      	cbnz	r0, 8007b3c <lv_obj_init_draw_img_dsc+0x84>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007b32:	b97e      	cbnz	r6, 8007b54 <lv_obj_init_draw_img_dsc+0x9c>
#endif
}
 8007b34:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = LV_OPA_TRANSP;
 8007b36:	2300      	movs	r3, #0
 8007b38:	72e3      	strb	r3, [r4, #11]
            return;
 8007b3a:	e7fb      	b.n	8007b34 <lv_obj_init_draw_img_dsc+0x7c>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 8007b3c:	2247      	movs	r2, #71	; 0x47
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	f003 f9b3 	bl	800aeac <lv_obj_get_style_prop>
 8007b46:	4602      	mov	r2, r0
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f003 fed4 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 8007b50:	8120      	strh	r0, [r4, #8]
 8007b52:	e7ee      	b.n	8007b32 <lv_obj_init_draw_img_dsc+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007b54:	2267      	movs	r2, #103	; 0x67
 8007b56:	4631      	mov	r1, r6
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f003 f9a7 	bl	800aeac <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007b5e:	7b23      	ldrb	r3, [r4, #12]
 8007b60:	f360 0303 	bfi	r3, r0, #0, #4
 8007b64:	7323      	strb	r3, [r4, #12]
 8007b66:	e7e5      	b.n	8007b34 <lv_obj_init_draw_img_dsc+0x7c>

08007b68 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 8007b70:	224e      	movs	r2, #78	; 0x4e
 8007b72:	f003 f99b 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007b76:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 8007b78:	7223      	strb	r3, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d918      	bls.n	8007bb0 <lv_obj_init_draw_line_dsc+0x48>

    if(part != LV_PART_MAIN) {
 8007b7e:	b17d      	cbz	r5, 8007ba0 <lv_obj_init_draw_line_dsc+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007b80:	2260      	movs	r2, #96	; 0x60
 8007b82:	4629      	mov	r1, r5
 8007b84:	4630      	mov	r0, r6
 8007b86:	f003 f991 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007b8a:	b2c3      	uxtb	r3, r0
        lv_opa_t opa = lv_obj_get_style_opa(obj, part);
        if(opa <= LV_OPA_MIN) {
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d910      	bls.n	8007bb2 <lv_obj_init_draw_line_dsc+0x4a>
            draw_dsc->opa = LV_OPA_TRANSP;
            return;
        }
        if(opa < LV_OPA_MAX) {
 8007b90:	2bfc      	cmp	r3, #252	; 0xfc
 8007b92:	d805      	bhi.n	8007ba0 <lv_obj_init_draw_line_dsc+0x38>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007b94:	7a23      	ldrb	r3, [r4, #8]
 8007b96:	b2c0      	uxtb	r0, r0
 8007b98:	fb03 f000 	mul.w	r0, r3, r0
 8007b9c:	1200      	asrs	r0, r0, #8
 8007b9e:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 8007ba0:	2249      	movs	r2, #73	; 0x49
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f003 f981 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007baa:	b200      	sxth	r0, r0
        }
    }

    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 8007bac:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8007bae:	b918      	cbnz	r0, 8007bb8 <lv_obj_init_draw_line_dsc+0x50>
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
            draw_dsc->opa = LV_OPA_TRANSP;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	7223      	strb	r3, [r4, #8]
            return;
 8007bb6:	e7fb      	b.n	8007bb0 <lv_obj_init_draw_line_dsc+0x48>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR));
 8007bb8:	224d      	movs	r2, #77	; 0x4d
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f003 f975 	bl	800aeac <lv_obj_get_style_prop>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f003 fe96 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
    draw_dsc->color = lv_obj_get_style_line_color_filtered(obj, part);
 8007bcc:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 8007bce:	224a      	movs	r2, #74	; 0x4a
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	f003 f96a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007bd8:	b200      	sxth	r0, r0
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8007bda:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 8007bdc:	b9c8      	cbnz	r0, 8007c12 <lv_obj_init_draw_line_dsc+0xaa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 8007bde:	224c      	movs	r2, #76	; 0x4c
 8007be0:	4629      	mov	r1, r5
 8007be2:	4630      	mov	r0, r6
 8007be4:	f003 f962 	bl	800aeac <lv_obj_get_style_prop>
    return (bool)v.num;
 8007be8:	3800      	subs	r0, #0
 8007bea:	bf18      	it	ne
 8007bec:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8007bee:	7a63      	ldrb	r3, [r4, #9]
 8007bf0:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
 8007bf4:	f360 03c3 	bfi	r3, r0, #3, #1
 8007bf8:	7263      	strb	r3, [r4, #9]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007bfa:	2d00      	cmp	r5, #0
 8007bfc:	d0d8      	beq.n	8007bb0 <lv_obj_init_draw_line_dsc+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007bfe:	2267      	movs	r2, #103	; 0x67
 8007c00:	4629      	mov	r1, r5
 8007c02:	4630      	mov	r0, r6
 8007c04:	f003 f952 	bl	800aeac <lv_obj_get_style_prop>
 8007c08:	7a63      	ldrb	r3, [r4, #9]
 8007c0a:	f360 0301 	bfi	r3, r0, #0, #2
 8007c0e:	7263      	strb	r3, [r4, #9]
 8007c10:	e7ce      	b.n	8007bb0 <lv_obj_init_draw_line_dsc+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 8007c12:	224b      	movs	r2, #75	; 0x4b
 8007c14:	4629      	mov	r1, r5
 8007c16:	4630      	mov	r0, r6
 8007c18:	f003 f948 	bl	800aeac <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 8007c1c:	80e0      	strh	r0, [r4, #6]
 8007c1e:	e7de      	b.n	8007bde <lv_obj_init_draw_line_dsc+0x76>

08007c20 <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	4606      	mov	r6, r0
 8007c24:	460d      	mov	r5, r1
 8007c26:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8007c28:	2250      	movs	r2, #80	; 0x50
 8007c2a:	f003 f93f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007c2e:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 8007c30:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8007c32:	b900      	cbnz	r0, 8007c36 <lv_obj_init_draw_arc_dsc+0x16>
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 8007c36:	2253      	movs	r2, #83	; 0x53
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f003 f936 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007c40:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 8007c42:	7323      	strb	r3, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d9f5      	bls.n	8007c34 <lv_obj_init_draw_arc_dsc+0x14>
    if(part != LV_PART_MAIN) {
 8007c48:	b17d      	cbz	r5, 8007c6a <lv_obj_init_draw_arc_dsc+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8007c4a:	2260      	movs	r2, #96	; 0x60
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f003 f92c 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007c54:	b2c3      	uxtb	r3, r0
        if(opa <= LV_OPA_MIN) {
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d930      	bls.n	8007cbc <lv_obj_init_draw_arc_dsc+0x9c>
        if(opa < LV_OPA_MAX) {
 8007c5a:	2bfc      	cmp	r3, #252	; 0xfc
 8007c5c:	d805      	bhi.n	8007c6a <lv_obj_init_draw_arc_dsc+0x4a>
            draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8007c5e:	7b23      	ldrb	r3, [r4, #12]
 8007c60:	b2c0      	uxtb	r0, r0
 8007c62:	fb03 f000 	mul.w	r0, r3, r0
 8007c66:	1200      	asrs	r0, r0, #8
 8007c68:	7320      	strb	r0, [r4, #12]
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR));
 8007c6a:	2252      	movs	r2, #82	; 0x52
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f003 f91c 	bl	800aeac <lv_obj_get_style_prop>
 8007c74:	4602      	mov	r2, r0
 8007c76:	4629      	mov	r1, r5
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f003 fe3d 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
    draw_dsc->color = lv_obj_get_style_arc_color_filtered(obj, part);
 8007c7e:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 8007c80:	2254      	movs	r2, #84	; 0x54
 8007c82:	4629      	mov	r1, r5
 8007c84:	4630      	mov	r0, r6
 8007c86:	f003 f911 	bl	800aeac <lv_obj_get_style_prop>
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 8007c8a:	60a0      	str	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8007c8c:	2251      	movs	r2, #81	; 0x51
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4630      	mov	r0, r6
 8007c92:	f003 f90b 	bl	800aeac <lv_obj_get_style_prop>
    return (bool)v.num;
 8007c96:	3800      	subs	r0, #0
 8007c98:	bf18      	it	ne
 8007c9a:	2001      	movne	r0, #1
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 8007c9c:	7b63      	ldrb	r3, [r4, #13]
 8007c9e:	f360 0382 	bfi	r3, r0, #2, #1
 8007ca2:	7363      	strb	r3, [r4, #13]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8007ca4:	2d00      	cmp	r5, #0
 8007ca6:	d0c5      	beq.n	8007c34 <lv_obj_init_draw_arc_dsc+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8007ca8:	2267      	movs	r2, #103	; 0x67
 8007caa:	4629      	mov	r1, r5
 8007cac:	4630      	mov	r0, r6
 8007cae:	f003 f8fd 	bl	800aeac <lv_obj_get_style_prop>
 8007cb2:	7b63      	ldrb	r3, [r4, #13]
 8007cb4:	f360 0301 	bfi	r3, r0, #0, #2
 8007cb8:	7363      	strb	r3, [r4, #13]
 8007cba:	e7bb      	b.n	8007c34 <lv_obj_init_draw_arc_dsc+0x14>
            draw_dsc->opa = LV_OPA_TRANSP;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	7323      	strb	r3, [r4, #12]
            return;
 8007cc0:	e7b8      	b.n	8007c34 <lv_obj_init_draw_arc_dsc+0x14>

08007cc2 <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 8007cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8007cc8:	2240      	movs	r2, #64	; 0x40
 8007cca:	f003 f8ef 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007cce:	b204      	sxth	r4, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8007cd0:	b9e4      	cbnz	r4, 8007d0c <lv_obj_calculate_ext_draw_size+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8007cd2:	2235      	movs	r2, #53	; 0x35
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f003 f8e8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007cdc:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8007cde:	2f00      	cmp	r7, #0
 8007ce0:	d145      	bne.n	8007d6e <lv_obj_calculate_ext_draw_size+0xac>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8007ce2:	2268      	movs	r2, #104	; 0x68
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f003 f8e0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007cec:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8007cee:	2269      	movs	r2, #105	; 0x69
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f003 f8da 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007cf8:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 8007cfa:	42b8      	cmp	r0, r7
 8007cfc:	bfb8      	it	lt
 8007cfe:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 8007d00:	2800      	cmp	r0, #0
 8007d02:	bfc4      	itt	gt
 8007d04:	1900      	addgt	r0, r0, r4
 8007d06:	b204      	sxthgt	r4, r0

    return s;
}
 8007d08:	4620      	mov	r0, r4
 8007d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8007d0c:	2245      	movs	r2, #69	; 0x45
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	f003 f8cb 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007d16:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 8007d18:	2802      	cmp	r0, #2
 8007d1a:	d801      	bhi.n	8007d20 <lv_obj_calculate_ext_draw_size+0x5e>
    lv_coord_t s = 0;
 8007d1c:	2400      	movs	r4, #0
 8007d1e:	e7d8      	b.n	8007cd2 <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8007d20:	2243      	movs	r2, #67	; 0x43
 8007d22:	4631      	mov	r1, r6
 8007d24:	4628      	mov	r0, r5
 8007d26:	f003 f8c1 	bl	800aeac <lv_obj_get_style_prop>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8007d2a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	eb03 0464 	add.w	r4, r3, r4, asr #1
 8007d34:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8007d36:	2241      	movs	r2, #65	; 0x41
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f003 f8b6 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007d40:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8007d42:	2242      	movs	r2, #66	; 0x42
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	f003 f8b0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007d4c:	b203      	sxth	r3, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	bfb8      	it	lt
 8007d52:	425b      	neglt	r3, r3
 8007d54:	2f00      	cmp	r7, #0
 8007d56:	bfb8      	it	lt
 8007d58:	427f      	neglt	r7, r7
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	b2bf      	uxth	r7, r7
 8007d5e:	42bb      	cmp	r3, r7
 8007d60:	bf2c      	ite	cs
 8007d62:	18e4      	addcs	r4, r4, r3
 8007d64:	19e4      	addcc	r4, r4, r7
            s = LV_MAX(s, sh_width);
 8007d66:	b220      	sxth	r0, r4
 8007d68:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
 8007d6c:	e7b1      	b.n	8007cd2 <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8007d6e:	2237      	movs	r2, #55	; 0x37
 8007d70:	4631      	mov	r1, r6
 8007d72:	4628      	mov	r0, r5
 8007d74:	f003 f89a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8007d78:	b2c0      	uxtb	r0, r0
        if(outline_opa > LV_OPA_MIN) {
 8007d7a:	2802      	cmp	r0, #2
 8007d7c:	d9b1      	bls.n	8007ce2 <lv_obj_calculate_ext_draw_size+0x20>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8007d7e:	2238      	movs	r2, #56	; 0x38
 8007d80:	4631      	mov	r1, r6
 8007d82:	4628      	mov	r0, r5
 8007d84:	f003 f892 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007d88:	b200      	sxth	r0, r0
            s = LV_MAX(s, outline_pad + outline_width);
 8007d8a:	4438      	add	r0, r7
 8007d8c:	42a0      	cmp	r0, r4
 8007d8e:	bfb8      	it	lt
 8007d90:	4620      	movlt	r0, r4
 8007d92:	b204      	sxth	r4, r0
 8007d94:	e7a5      	b.n	8007ce2 <lv_obj_calculate_ext_draw_size+0x20>

08007d96 <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 8007d96:	b538      	push	{r3, r4, r5, lr}
 8007d98:	4604      	mov	r4, r0
 8007d9a:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 8007d9c:	2148      	movs	r1, #72	; 0x48
 8007d9e:	f01a fb45 	bl	802242c <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 8007da2:	6025      	str	r5, [r4, #0]
}
 8007da4:	bd38      	pop	{r3, r4, r5, pc}

08007da6 <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 8007da6:	6883      	ldr	r3, [r0, #8]
 8007da8:	b113      	cbz	r3, 8007db0 <_lv_obj_get_ext_draw_size+0xa>
 8007daa:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8007dae:	4770      	bx	lr
    else return 0;
 8007db0:	2000      	movs	r0, #0
}
 8007db2:	4770      	bx	lr

08007db4 <lv_obj_refresh_ext_draw_size>:
{
 8007db4:	b530      	push	{r4, r5, lr}
 8007db6:	b083      	sub	sp, #12
 8007db8:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 8007dba:	f7ff fff4 	bl	8007da6 <_lv_obj_get_ext_draw_size>
 8007dbe:	4605      	mov	r5, r0
    lv_coord_t s_new = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 8007dc6:	f10d 0206 	add.w	r2, sp, #6
 8007dca:	2113      	movs	r1, #19
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f7fc faf9 	bl	80043c4 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8007dd2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8007dd6:	42ab      	cmp	r3, r5
 8007dd8:	d10a      	bne.n	8007df0 <lv_obj_refresh_ext_draw_size+0x3c>
    if(obj->spec_attr) {
 8007dda:	68a3      	ldr	r3, [r4, #8]
 8007ddc:	b163      	cbz	r3, 8007df8 <lv_obj_refresh_ext_draw_size+0x44>
        obj->spec_attr->ext_draw_size = s_new;
 8007dde:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007de2:	82da      	strh	r2, [r3, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 8007de4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8007de8:	42ab      	cmp	r3, r5
 8007dea:	d111      	bne.n	8007e10 <lv_obj_refresh_ext_draw_size+0x5c>
}
 8007dec:	b003      	add	sp, #12
 8007dee:	bd30      	pop	{r4, r5, pc}
    if(s_new != s_old) lv_obj_invalidate(obj);
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fc23 	bl	800863c <lv_obj_invalidate>
 8007df6:	e7f0      	b.n	8007dda <lv_obj_refresh_ext_draw_size+0x26>
    else if(s_new != 0) {
 8007df8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0f1      	beq.n	8007de4 <lv_obj_refresh_ext_draw_size+0x30>
        lv_obj_allocate_spec_attr(obj);
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7ff fb6f 	bl	80074e4 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007e0c:	82da      	strh	r2, [r3, #22]
 8007e0e:	e7e9      	b.n	8007de4 <lv_obj_refresh_ext_draw_size+0x30>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fc13 	bl	800863c <lv_obj_invalidate>
}
 8007e16:	e7e9      	b.n	8007dec <lv_obj_refresh_ext_draw_size+0x38>

08007e18 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 8007e18:	6883      	ldr	r3, [r0, #8]
 8007e1a:	b113      	cbz	r3, 8007e22 <_lv_obj_get_layer_type+0xa>
 8007e1c:	7e98      	ldrb	r0, [r3, #26]
 8007e1e:	0980      	lsrs	r0, r0, #6
 8007e20:	4770      	bx	lr
    else return LV_LAYER_TYPE_NONE;
 8007e22:	2000      	movs	r0, #0
}
 8007e24:	4770      	bx	lr
	...

08007e28 <transform_point>:
        }
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8007e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	4604      	mov	r4, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	4690      	mov	r8, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 8007e34:	226d      	movs	r2, #109	; 0x6d
 8007e36:	2100      	movs	r1, #0
 8007e38:	f003 f838 	bl	800aeac <lv_obj_get_style_prop>
 8007e3c:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8007e3e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 8007e42:	226c      	movs	r2, #108	; 0x6c
 8007e44:	2100      	movs	r1, #0
 8007e46:	4620      	mov	r0, r4
 8007e48:	f003 f830 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007e4c:	b205      	sxth	r5, r0
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 8007e4e:	f1b9 0f00 	cmp.w	r9, #0
 8007e52:	d102      	bne.n	8007e5a <transform_point+0x32>
 8007e54:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007e58:	d037      	beq.n	8007eca <transform_point+0xa2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8007e5a:	226e      	movs	r2, #110	; 0x6e
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f003 f824 	bl	800aeac <lv_obj_get_style_prop>

    lv_point_t pivot = {
 8007e64:	f8ad 0004 	strh.w	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 8007e68:	226f      	movs	r2, #111	; 0x6f
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f003 f81d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007e72:	b202      	sxth	r2, r0
 8007e74:	f8ad 2006 	strh.w	r2, [sp, #6]
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 8007e78:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007e7c:	f403 41c0 	and.w	r1, r3, #24576	; 0x6000
 8007e80:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007e84:	d024      	beq.n	8007ed0 <transform_point+0xa8>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 8007e86:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 8007e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8e:	d03b      	beq.n	8007f08 <transform_point+0xe0>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
    }

    pivot.x = obj->coords.x1 + pivot.x;
 8007e90:	8aa3      	ldrh	r3, [r4, #20]
 8007e92:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8007e96:	4413      	add	r3, r2
 8007e98:	f8ad 3004 	strh.w	r3, [sp, #4]
    pivot.y = obj->coords.y1 + pivot.y;
 8007e9c:	8ae3      	ldrh	r3, [r4, #22]
 8007e9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(inv) {
 8007ea8:	f1b8 0f00 	cmp.w	r8, #0
 8007eac:	d007      	beq.n	8007ebe <transform_point+0x96>
        angle = -angle;
 8007eae:	4276      	negs	r6, r6
 8007eb0:	fa0f f986 	sxth.w	r9, r6
        zoom = (256 * 256) / zoom;
 8007eb4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007eb8:	fb90 f5f5 	sdiv	r5, r0, r5
 8007ebc:	b22d      	sxth	r5, r5
    }

    lv_point_transform(p, angle, zoom, &pivot);
 8007ebe:	ab01      	add	r3, sp, #4
 8007ec0:	462a      	mov	r2, r5
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f019 faed 	bl	80214a4 <lv_point_transform>
}
 8007eca:	b003      	add	sp, #12
 8007ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(LV_COORD_IS_PCT(pivot.x)) {
 8007ed0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8007ed4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007ed8:	dcd5      	bgt.n	8007e86 <transform_point+0x5e>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8007eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ede:	bfc8      	it	gt
 8007ee0:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007ee4:	8b21      	ldrh	r1, [r4, #24]
 8007ee6:	3101      	adds	r1, #1
 8007ee8:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8007eec:	eba1 010c 	sub.w	r1, r1, ip
 8007ef0:	b209      	sxth	r1, r1
 8007ef2:	fb01 f303 	mul.w	r3, r1, r3
 8007ef6:	4911      	ldr	r1, [pc, #68]	; (8007f3c <transform_point+0x114>)
 8007ef8:	fb81 c103 	smull	ip, r1, r1, r3
 8007efc:	17db      	asrs	r3, r3, #31
 8007efe:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8007f02:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007f06:	e7be      	b.n	8007e86 <transform_point+0x5e>
    if(LV_COORD_IS_PCT(pivot.y)) {
 8007f08:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007f0c:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8007f10:	dcbe      	bgt.n	8007e90 <transform_point+0x68>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8007f12:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8007f16:	bfc8      	it	gt
 8007f18:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007f1c:	8b63      	ldrh	r3, [r4, #26]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	8ae1      	ldrh	r1, [r4, #22]
 8007f22:	1a5b      	subs	r3, r3, r1
 8007f24:	b21b      	sxth	r3, r3
 8007f26:	fb03 f202 	mul.w	r2, r3, r2
 8007f2a:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <transform_point+0x114>)
 8007f2c:	fb83 1302 	smull	r1, r3, r3, r2
 8007f30:	17d2      	asrs	r2, r2, #31
 8007f32:	ebc2 1263 	rsb	r2, r2, r3, asr #5
 8007f36:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007f3a:	e7a9      	b.n	8007e90 <transform_point+0x68>
 8007f3c:	51eb851f 	.word	0x51eb851f

08007f40 <lv_obj_set_x>:
{
 8007f40:	b530      	push	{r4, r5, lr}
 8007f42:	b083      	sub	sp, #12
 8007f44:	4605      	mov	r5, r0
 8007f46:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	aa01      	add	r2, sp, #4
 8007f4c:	2107      	movs	r1, #7
 8007f4e:	f003 fbc6 	bl	800b6de <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8007f52:	2801      	cmp	r0, #1
 8007f54:	d007      	beq.n	8007f66 <lv_obj_set_x+0x26>
 8007f56:	b920      	cbnz	r0, 8007f62 <lv_obj_set_x+0x22>
        lv_obj_set_style_x(obj, x, 0);
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f003 fe4b 	bl	800bbf8 <lv_obj_set_style_x>
}
 8007f62:	b003      	add	sp, #12
 8007f64:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d1f5      	bne.n	8007f58 <lv_obj_set_x+0x18>
 8007f6c:	e7f9      	b.n	8007f62 <lv_obj_set_x+0x22>

08007f6e <lv_obj_set_y>:
{
 8007f6e:	b530      	push	{r4, r5, lr}
 8007f70:	b083      	sub	sp, #12
 8007f72:	4605      	mov	r5, r0
 8007f74:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 8007f76:	2300      	movs	r3, #0
 8007f78:	aa01      	add	r2, sp, #4
 8007f7a:	2108      	movs	r1, #8
 8007f7c:	f003 fbaf 	bl	800b6de <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8007f80:	2801      	cmp	r0, #1
 8007f82:	d007      	beq.n	8007f94 <lv_obj_set_y+0x26>
 8007f84:	b920      	cbnz	r0, 8007f90 <lv_obj_set_y+0x22>
        lv_obj_set_style_y(obj, y, 0);
 8007f86:	2200      	movs	r2, #0
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f003 fe3b 	bl	800bc06 <lv_obj_set_style_y>
}
 8007f90:	b003      	add	sp, #12
 8007f92:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 8007f94:	9b01      	ldr	r3, [sp, #4]
 8007f96:	42a3      	cmp	r3, r4
 8007f98:	d1f5      	bne.n	8007f86 <lv_obj_set_y+0x18>
 8007f9a:	e7f9      	b.n	8007f90 <lv_obj_set_y+0x22>

08007f9c <lv_obj_set_pos>:
{
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 8007fa2:	f7ff ffcd 	bl	8007f40 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f7ff ffe0 	bl	8007f6e <lv_obj_set_y>
}
 8007fae:	bd38      	pop	{r3, r4, r5, pc}

08007fb0 <lv_obj_set_width>:
{
 8007fb0:	b530      	push	{r4, r5, lr}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	aa01      	add	r2, sp, #4
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	f003 fb8e 	bl	800b6de <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8007fc2:	2801      	cmp	r0, #1
 8007fc4:	d007      	beq.n	8007fd6 <lv_obj_set_width+0x26>
 8007fc6:	b920      	cbnz	r0, 8007fd2 <lv_obj_set_width+0x22>
        lv_obj_set_style_width(obj, w, 0);
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f003 fdfe 	bl	800bbce <lv_obj_set_style_width>
}
 8007fd2:	b003      	add	sp, #12
 8007fd4:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	d1f5      	bne.n	8007fc8 <lv_obj_set_width+0x18>
 8007fdc:	e7f9      	b.n	8007fd2 <lv_obj_set_width+0x22>

08007fde <lv_obj_set_height>:
{
 8007fde:	b530      	push	{r4, r5, lr}
 8007fe0:	b083      	sub	sp, #12
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	aa01      	add	r2, sp, #4
 8007fea:	2104      	movs	r1, #4
 8007fec:	f003 fb77 	bl	800b6de <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8007ff0:	2801      	cmp	r0, #1
 8007ff2:	d007      	beq.n	8008004 <lv_obj_set_height+0x26>
 8007ff4:	b920      	cbnz	r0, 8008000 <lv_obj_set_height+0x22>
        lv_obj_set_style_height(obj, h, 0);
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f003 fdf5 	bl	800bbea <lv_obj_set_style_height>
}
 8008000:	b003      	add	sp, #12
 8008002:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	42a3      	cmp	r3, r4
 8008008:	d1f5      	bne.n	8007ff6 <lv_obj_set_height+0x18>
 800800a:	e7f9      	b.n	8008000 <lv_obj_set_height+0x22>

0800800c <lv_obj_set_size>:
{
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4604      	mov	r4, r0
 8008010:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 8008012:	f7ff ffcd 	bl	8007fb0 <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 8008016:	4629      	mov	r1, r5
 8008018:	4620      	mov	r0, r4
 800801a:	f7ff ffe0 	bl	8007fde <lv_obj_set_height>
}
 800801e:	bd38      	pop	{r3, r4, r5, pc}

08008020 <lv_obj_is_layout_positioned>:
{
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4605      	mov	r5, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 8008024:	490a      	ldr	r1, [pc, #40]	; (8008050 <lv_obj_is_layout_positioned+0x30>)
 8008026:	f7ff f83c 	bl	80070a2 <lv_obj_has_flag_any>
 800802a:	b110      	cbz	r0, 8008032 <lv_obj_is_layout_positioned+0x12>
 800802c:	2400      	movs	r4, #0
}
 800802e:	4620      	mov	r0, r4
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008034:	4628      	mov	r0, r5
 8008036:	f003 fe7b 	bl	800bd30 <lv_obj_get_parent>
    if(parent == NULL) return false;
 800803a:	2800      	cmp	r0, #0
 800803c:	d0f7      	beq.n	800802e <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 800803e:	220a      	movs	r2, #10
 8008040:	2100      	movs	r1, #0
 8008042:	f002 ff33 	bl	800aeac <lv_obj_get_style_prop>
    if(layout) return true;
 8008046:	b284      	uxth	r4, r0
 8008048:	3c00      	subs	r4, #0
 800804a:	bf18      	it	ne
 800804c:	2401      	movne	r4, #1
 800804e:	e7ee      	b.n	800802e <lv_obj_is_layout_positioned+0xe>
 8008050:	00060001 	.word	0x00060001

08008054 <lv_obj_mark_layout_as_dirty>:
{
 8008054:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 8008056:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_obj_t * scr = lv_obj_get_screen(obj);
 8008062:	f003 fe3a 	bl	800bcda <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 8008066:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 800806a:	f042 0202 	orr.w	r2, r2, #2
 800806e:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
    lv_disp_t * disp = lv_obj_get_disp(scr);
 8008072:	f003 fe39 	bl	800bce8 <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 8008076:	6840      	ldr	r0, [r0, #4]
 8008078:	b108      	cbz	r0, 800807e <lv_obj_mark_layout_as_dirty+0x2a>
 800807a:	f01b fc1a 	bl	80238b2 <lv_timer_resume>
}
 800807e:	bd08      	pop	{r3, pc}

08008080 <lv_obj_set_layout>:
{
 8008080:	b510      	push	{r4, lr}
 8008082:	4604      	mov	r4, r0
    lv_obj_set_style_layout(obj, layout, 0);
 8008084:	2200      	movs	r2, #0
 8008086:	b289      	uxth	r1, r1
 8008088:	f003 fe19 	bl	800bcbe <lv_obj_set_style_layout>
    lv_obj_mark_layout_as_dirty(obj);
 800808c:	4620      	mov	r0, r4
 800808e:	f7ff ffe1 	bl	8008054 <lv_obj_mark_layout_as_dirty>
}
 8008092:	bd10      	pop	{r4, pc}

08008094 <lv_layout_register>:
{
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4605      	mov	r5, r0
 8008098:	460c      	mov	r4, r1
    layout_cnt++;
 800809a:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <lv_layout_register+0x3c>)
 800809c:	6813      	ldr	r3, [r2, #0]
 800809e:	3301      	adds	r3, #1
 80080a0:	6013      	str	r3, [r2, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 80080a2:	4e0c      	ldr	r6, [pc, #48]	; (80080d4 <lv_layout_register+0x40>)
 80080a4:	00d9      	lsls	r1, r3, #3
 80080a6:	6830      	ldr	r0, [r6, #0]
 80080a8:	f019 ff7a 	bl	8021fa0 <lv_mem_realloc>
 80080ac:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 80080ae:	b168      	cbz	r0, 80080cc <lv_layout_register+0x38>
 80080b0:	4603      	mov	r3, r0
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 80080b2:	4a07      	ldr	r2, [pc, #28]	; (80080d0 <lv_layout_register+0x3c>)
 80080b4:	6810      	ldr	r0, [r2, #0]
 80080b6:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 80080ba:	3a01      	subs	r2, #1
 80080bc:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <lv_layout_register+0x40>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80080c8:	6054      	str	r4, [r2, #4]
}
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 80080cc:	e7fe      	b.n	80080cc <lv_layout_register+0x38>
 80080ce:	bf00      	nop
 80080d0:	200025e0 	.word	0x200025e0
 80080d4:	20002968 	.word	0x20002968

080080d8 <lv_obj_align>:
{
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	4604      	mov	r4, r0
 80080dc:	4615      	mov	r5, r2
 80080de:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 80080e0:	2200      	movs	r2, #0
 80080e2:	f003 fd97 	bl	800bc14 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 80080e6:	4632      	mov	r2, r6
 80080e8:	4629      	mov	r1, r5
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff ff56 	bl	8007f9c <lv_obj_set_pos>
}
 80080f0:	bd70      	pop	{r4, r5, r6, pc}

080080f2 <lv_obj_get_coords>:
    dest->x1 = src->x1;
 80080f2:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 80080f6:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 80080f8:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 80080fc:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 80080fe:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 8008102:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 8008104:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8008108:	80cb      	strh	r3, [r1, #6]
}
 800810a:	4770      	bx	lr

0800810c <lv_obj_get_x>:
{
 800810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008112:	f003 fe0d 	bl	800bd30 <lv_obj_get_parent>
    if(parent) {
 8008116:	b1c8      	cbz	r0, 800814c <lv_obj_get_x+0x40>
 8008118:	4606      	mov	r6, r0
        rel_x  = obj->coords.x1 - parent->coords.x1;
 800811a:	8aa4      	ldrh	r4, [r4, #20]
 800811c:	f8b0 8014 	ldrh.w	r8, [r0, #20]
        rel_x += lv_obj_get_scroll_x(parent);
 8008120:	f001 fc26 	bl	8009970 <lv_obj_get_scroll_x>
 8008124:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008126:	2212      	movs	r2, #18
 8008128:	2100      	movs	r1, #0
 800812a:	4630      	mov	r0, r6
 800812c:	f002 febe 	bl	800aeac <lv_obj_get_style_prop>
 8008130:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008132:	2232      	movs	r2, #50	; 0x32
 8008134:	2100      	movs	r1, #0
 8008136:	4630      	mov	r0, r6
 8008138:	f002 feb8 	bl	800aeac <lv_obj_get_style_prop>
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 800813c:	4405      	add	r5, r0
 800813e:	1b64      	subs	r4, r4, r5
 8008140:	eba4 0008 	sub.w	r0, r4, r8
 8008144:	4438      	add	r0, r7
 8008146:	b200      	sxth	r0, r0
}
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rel_x = obj->coords.x1;
 800814c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8008150:	e7fa      	b.n	8008148 <lv_obj_get_x+0x3c>

08008152 <lv_obj_get_y>:
{
 8008152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008156:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008158:	f003 fdea 	bl	800bd30 <lv_obj_get_parent>
    if(parent) {
 800815c:	b1c8      	cbz	r0, 8008192 <lv_obj_get_y+0x40>
 800815e:	4606      	mov	r6, r0
        rel_y = obj->coords.y1 - parent->coords.y1;
 8008160:	8ae4      	ldrh	r4, [r4, #22]
 8008162:	f8b0 8016 	ldrh.w	r8, [r0, #22]
        rel_y += lv_obj_get_scroll_y(parent);
 8008166:	f001 fc0b 	bl	8009980 <lv_obj_get_scroll_y>
 800816a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800816c:	2210      	movs	r2, #16
 800816e:	2100      	movs	r1, #0
 8008170:	4630      	mov	r0, r6
 8008172:	f002 fe9b 	bl	800aeac <lv_obj_get_style_prop>
 8008176:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008178:	2232      	movs	r2, #50	; 0x32
 800817a:	2100      	movs	r1, #0
 800817c:	4630      	mov	r0, r6
 800817e:	f002 fe95 	bl	800aeac <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 8008182:	4405      	add	r5, r0
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	eba4 0008 	sub.w	r0, r4, r8
 800818a:	4438      	add	r0, r7
 800818c:	b200      	sxth	r0, r0
}
 800818e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rel_y = obj->coords.y1;
 8008192:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8008196:	e7fa      	b.n	800818e <lv_obj_get_y+0x3c>

08008198 <lv_obj_get_y2>:
{
 8008198:	b510      	push	{r4, lr}
 800819a:	4604      	mov	r4, r0
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 800819c:	f7ff ffd9 	bl	8008152 <lv_obj_get_y>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80081a0:	8b63      	ldrh	r3, [r4, #26]
 80081a2:	3301      	adds	r3, #1
 80081a4:	8ae2      	ldrh	r2, [r4, #22]
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	4418      	add	r0, r3
}
 80081aa:	b200      	sxth	r0, r0
 80081ac:	bd10      	pop	{r4, pc}

080081ae <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80081ae:	8b03      	ldrh	r3, [r0, #24]
 80081b0:	3301      	adds	r3, #1
 80081b2:	8a80      	ldrh	r0, [r0, #20]
 80081b4:	1a18      	subs	r0, r3, r0
}
 80081b6:	b200      	sxth	r0, r0
 80081b8:	4770      	bx	lr

080081ba <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80081ba:	8b43      	ldrh	r3, [r0, #26]
 80081bc:	3301      	adds	r3, #1
 80081be:	8ac0      	ldrh	r0, [r0, #22]
 80081c0:	1a18      	subs	r0, r3, r0
}
 80081c2:	b200      	sxth	r0, r0
 80081c4:	4770      	bx	lr

080081c6 <lv_obj_get_content_width>:
{
 80081c6:	b570      	push	{r4, r5, r6, lr}
 80081c8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80081ca:	2212      	movs	r2, #18
 80081cc:	2100      	movs	r1, #0
 80081ce:	f002 fe6d 	bl	800aeac <lv_obj_get_style_prop>
 80081d2:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80081d4:	2213      	movs	r2, #19
 80081d6:	2100      	movs	r1, #0
 80081d8:	4628      	mov	r0, r5
 80081da:	f002 fe67 	bl	800aeac <lv_obj_get_style_prop>
 80081de:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80081e0:	2232      	movs	r2, #50	; 0x32
 80081e2:	2100      	movs	r1, #0
 80081e4:	4628      	mov	r0, r5
 80081e6:	f002 fe61 	bl	800aeac <lv_obj_get_style_prop>
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 80081ea:	4434      	add	r4, r6
 80081ec:	f1c4 0401 	rsb	r4, r4, #1
 80081f0:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
 80081f4:	8b28      	ldrh	r0, [r5, #24]
 80081f6:	4404      	add	r4, r0
 80081f8:	8aa8      	ldrh	r0, [r5, #20]
 80081fa:	1a20      	subs	r0, r4, r0
}
 80081fc:	b200      	sxth	r0, r0
 80081fe:	bd70      	pop	{r4, r5, r6, pc}

08008200 <lv_obj_get_content_height>:
{
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8008204:	2210      	movs	r2, #16
 8008206:	2100      	movs	r1, #0
 8008208:	f002 fe50 	bl	800aeac <lv_obj_get_style_prop>
 800820c:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800820e:	2211      	movs	r2, #17
 8008210:	2100      	movs	r1, #0
 8008212:	4628      	mov	r0, r5
 8008214:	f002 fe4a 	bl	800aeac <lv_obj_get_style_prop>
 8008218:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800821a:	2232      	movs	r2, #50	; 0x32
 800821c:	2100      	movs	r1, #0
 800821e:	4628      	mov	r0, r5
 8008220:	f002 fe44 	bl	800aeac <lv_obj_get_style_prop>
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 8008224:	4434      	add	r4, r6
 8008226:	f1c4 0401 	rsb	r4, r4, #1
 800822a:	eba4 0440 	sub.w	r4, r4, r0, lsl #1
 800822e:	8b68      	ldrh	r0, [r5, #26]
 8008230:	4404      	add	r4, r0
 8008232:	8ae8      	ldrh	r0, [r5, #22]
 8008234:	1a20      	subs	r0, r4, r0
}
 8008236:	b200      	sxth	r0, r0
 8008238:	bd70      	pop	{r4, r5, r6, pc}

0800823a <lv_obj_get_content_coords>:
{
 800823a:	b570      	push	{r4, r5, r6, lr}
 800823c:	4606      	mov	r6, r0
 800823e:	460c      	mov	r4, r1
 8008240:	2232      	movs	r2, #50	; 0x32
 8008242:	2100      	movs	r1, #0
 8008244:	f002 fe32 	bl	800aeac <lv_obj_get_style_prop>
 8008248:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, area);
 800824a:	4621      	mov	r1, r4
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff ff50 	bl	80080f2 <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 8008252:	4269      	negs	r1, r5
 8008254:	b209      	sxth	r1, r1
 8008256:	460a      	mov	r2, r1
 8008258:	4620      	mov	r0, r4
 800825a:	f018 ff34 	bl	80210c6 <lv_area_increase>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800825e:	2212      	movs	r2, #18
 8008260:	2100      	movs	r1, #0
 8008262:	4630      	mov	r0, r6
 8008264:	f002 fe22 	bl	800aeac <lv_obj_get_style_prop>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8008268:	8823      	ldrh	r3, [r4, #0]
 800826a:	4418      	add	r0, r3
 800826c:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800826e:	2213      	movs	r2, #19
 8008270:	2100      	movs	r1, #0
 8008272:	4630      	mov	r0, r6
 8008274:	f002 fe1a 	bl	800aeac <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 8008278:	88a3      	ldrh	r3, [r4, #4]
 800827a:	1a1b      	subs	r3, r3, r0
 800827c:	80a3      	strh	r3, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800827e:	2210      	movs	r2, #16
 8008280:	2100      	movs	r1, #0
 8008282:	4630      	mov	r0, r6
 8008284:	f002 fe12 	bl	800aeac <lv_obj_get_style_prop>
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8008288:	8863      	ldrh	r3, [r4, #2]
 800828a:	4418      	add	r0, r3
 800828c:	8060      	strh	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800828e:	2211      	movs	r2, #17
 8008290:	2100      	movs	r1, #0
 8008292:	4630      	mov	r0, r6
 8008294:	f002 fe0a 	bl	800aeac <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 8008298:	88e3      	ldrh	r3, [r4, #6]
 800829a:	1a1b      	subs	r3, r3, r0
 800829c:	80e3      	strh	r3, [r4, #6]
}
 800829e:	bd70      	pop	{r4, r5, r6, pc}

080082a0 <lv_obj_get_self_width>:
{
 80082a0:	b500      	push	{lr}
 80082a2:	b083      	sub	sp, #12
    lv_point_t p = {0, LV_COORD_MIN};
 80082a4:	2300      	movs	r3, #0
 80082a6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80082aa:	f24e 0301 	movw	r3, #57345	; 0xe001
 80082ae:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 80082b2:	aa01      	add	r2, sp, #4
 80082b4:	212c      	movs	r1, #44	; 0x2c
 80082b6:	f7fc f885 	bl	80043c4 <lv_event_send>
}
 80082ba:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80082be:	b003      	add	sp, #12
 80082c0:	f85d fb04 	ldr.w	pc, [sp], #4

080082c4 <lv_obj_get_self_height>:
{
 80082c4:	b500      	push	{lr}
 80082c6:	b083      	sub	sp, #12
    lv_point_t p = {LV_COORD_MIN, 0};
 80082c8:	f24e 0301 	movw	r3, #57345	; 0xe001
 80082cc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80082d0:	2300      	movs	r3, #0
 80082d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 80082d6:	aa01      	add	r2, sp, #4
 80082d8:	212c      	movs	r1, #44	; 0x2c
 80082da:	f7fc f873 	bl	80043c4 <lv_event_send>
}
 80082de:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80082e2:	b003      	add	sp, #12
 80082e4:	f85d fb04 	ldr.w	pc, [sp], #4

080082e8 <lv_obj_refresh_self_size>:
{
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80082ec:	2201      	movs	r2, #1
 80082ee:	2100      	movs	r1, #0
 80082f0:	f002 fddc 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80082f4:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80082f6:	2204      	movs	r2, #4
 80082f8:	2100      	movs	r1, #0
 80082fa:	4620      	mov	r0, r4
 80082fc:	f002 fdd6 	bl	800aeac <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8008300:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008304:	429d      	cmp	r5, r3
 8008306:	d002      	beq.n	800830e <lv_obj_refresh_self_size+0x26>
 8008308:	b200      	sxth	r0, r0
 800830a:	4298      	cmp	r0, r3
 800830c:	d104      	bne.n	8008318 <lv_obj_refresh_self_size+0x30>
    lv_obj_mark_layout_as_dirty(obj);
 800830e:	4620      	mov	r0, r4
 8008310:	f7ff fea0 	bl	8008054 <lv_obj_mark_layout_as_dirty>
    return true;
 8008314:	2001      	movs	r0, #1
}
 8008316:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8008318:	2000      	movs	r0, #0
 800831a:	e7fc      	b.n	8008316 <lv_obj_refresh_self_size+0x2e>

0800831c <lv_obj_move_children_by>:
{
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	b083      	sub	sp, #12
 8008322:	4680      	mov	r8, r0
 8008324:	460e      	mov	r6, r1
 8008326:	9100      	str	r1, [sp, #0]
 8008328:	4614      	mov	r4, r2
 800832a:	9201      	str	r2, [sp, #4]
 800832c:	4699      	mov	r9, r3
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800832e:	f003 fd18 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8008332:	b350      	cbz	r0, 800838a <lv_obj_move_children_by+0x6e>
 8008334:	4682      	mov	sl, r0
 8008336:	2500      	movs	r5, #0
        child->coords.x1 += x_diff;
 8008338:	b2b7      	uxth	r7, r6
        child->coords.y1 += y_diff;
 800833a:	b2a6      	uxth	r6, r4
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 800833c:	46ab      	mov	fp, r5
 800833e:	e014      	b.n	800836a <lv_obj_move_children_by+0x4e>
        child->coords.x1 += x_diff;
 8008340:	8aa3      	ldrh	r3, [r4, #20]
 8008342:	443b      	add	r3, r7
 8008344:	82a3      	strh	r3, [r4, #20]
        child->coords.y1 += y_diff;
 8008346:	8ae3      	ldrh	r3, [r4, #22]
 8008348:	4433      	add	r3, r6
 800834a:	82e3      	strh	r3, [r4, #22]
        child->coords.x2 += x_diff;
 800834c:	8b23      	ldrh	r3, [r4, #24]
 800834e:	443b      	add	r3, r7
 8008350:	8323      	strh	r3, [r4, #24]
        child->coords.y2 += y_diff;
 8008352:	8b63      	ldrh	r3, [r4, #26]
 8008354:	4433      	add	r3, r6
 8008356:	8363      	strh	r3, [r4, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8008358:	465b      	mov	r3, fp
 800835a:	9a01      	ldr	r2, [sp, #4]
 800835c:	9900      	ldr	r1, [sp, #0]
 800835e:	4620      	mov	r0, r4
 8008360:	f7ff ffdc 	bl	800831c <lv_obj_move_children_by>
    for(i = 0; i < child_cnt; i++) {
 8008364:	3501      	adds	r5, #1
 8008366:	45aa      	cmp	sl, r5
 8008368:	d00f      	beq.n	800838a <lv_obj_move_children_by+0x6e>
        lv_obj_t * child = obj->spec_attr->children[i];
 800836a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	d0e2      	beq.n	8008340 <lv_obj_move_children_by+0x24>
 800837a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800837e:	4620      	mov	r0, r4
 8008380:	f7fe fe88 	bl	8007094 <lv_obj_has_flag>
 8008384:	2800      	cmp	r0, #0
 8008386:	d0db      	beq.n	8008340 <lv_obj_move_children_by+0x24>
 8008388:	e7ec      	b.n	8008364 <lv_obj_move_children_by+0x48>
}
 800838a:	b003      	add	sp, #12
 800838c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008390 <lv_obj_transform_point>:
    if(obj) {
 8008390:	b380      	cbz	r0, 80083f4 <lv_obj_transform_point+0x64>
{
 8008392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	460f      	mov	r7, r1
 8008398:	4614      	mov	r4, r2
 800839a:	461d      	mov	r5, r3
 800839c:	4680      	mov	r8, r0
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800839e:	f7ff fd3b 	bl	8007e18 <_lv_obj_get_layer_type>
 80083a2:	4606      	mov	r6, r0
        if(inv) {
 80083a4:	b19d      	cbz	r5, 80083ce <lv_obj_transform_point+0x3e>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80083a6:	b91c      	cbnz	r4, 80083b0 <lv_obj_transform_point+0x20>
            if(do_tranf) transform_point(obj, p, inv);
 80083a8:	2e02      	cmp	r6, #2
 80083aa:	d00a      	beq.n	80083c2 <lv_obj_transform_point+0x32>
}
 80083ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80083b0:	4640      	mov	r0, r8
 80083b2:	f003 fcbd 	bl	800bd30 <lv_obj_get_parent>
 80083b6:	2301      	movs	r3, #1
 80083b8:	461a      	mov	r2, r3
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7ff ffe8 	bl	8008390 <lv_obj_transform_point>
 80083c0:	e7f2      	b.n	80083a8 <lv_obj_transform_point+0x18>
            if(do_tranf) transform_point(obj, p, inv);
 80083c2:	2201      	movs	r2, #1
 80083c4:	4639      	mov	r1, r7
 80083c6:	4640      	mov	r0, r8
 80083c8:	f7ff fd2e 	bl	8007e28 <transform_point>
 80083cc:	e7ee      	b.n	80083ac <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 80083ce:	2802      	cmp	r0, #2
 80083d0:	d00a      	beq.n	80083e8 <lv_obj_transform_point+0x58>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 80083d2:	2c00      	cmp	r4, #0
 80083d4:	d0ea      	beq.n	80083ac <lv_obj_transform_point+0x1c>
 80083d6:	4640      	mov	r0, r8
 80083d8:	f003 fcaa 	bl	800bd30 <lv_obj_get_parent>
 80083dc:	2300      	movs	r3, #0
 80083de:	2201      	movs	r2, #1
 80083e0:	4639      	mov	r1, r7
 80083e2:	f7ff ffd5 	bl	8008390 <lv_obj_transform_point>
}
 80083e6:	e7e1      	b.n	80083ac <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 80083e8:	2200      	movs	r2, #0
 80083ea:	4639      	mov	r1, r7
 80083ec:	4640      	mov	r0, r8
 80083ee:	f7ff fd1b 	bl	8007e28 <transform_point>
 80083f2:	e7ee      	b.n	80083d2 <lv_obj_transform_point+0x42>
 80083f4:	4770      	bx	lr

080083f6 <lv_obj_get_transformed_area>:
{
 80083f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083f8:	b085      	sub	sp, #20
 80083fa:	4605      	mov	r5, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	4616      	mov	r6, r2
 8008400:	461f      	mov	r7, r3
        {area->x1, area->y1},
 8008402:	f9b1 1000 	ldrsh.w	r1, [r1]
    lv_point_t p[4] = {
 8008406:	f8ad 1000 	strh.w	r1, [sp]
        {area->x1, area->y1},
 800840a:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
    lv_point_t p[4] = {
 800840e:	f8ad e002 	strh.w	lr, [sp, #2]
 8008412:	f8ad 1004 	strh.w	r1, [sp, #4]
        {area->x1, area->y2},
 8008416:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    lv_point_t p[4] = {
 800841a:	f8ad 1006 	strh.w	r1, [sp, #6]
        {area->x2, area->y1},
 800841e:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
    lv_point_t p[4] = {
 8008422:	f8ad c008 	strh.w	ip, [sp, #8]
 8008426:	f8ad e00a 	strh.w	lr, [sp, #10]
 800842a:	f8ad c00c 	strh.w	ip, [sp, #12]
 800842e:	f8ad 100e 	strh.w	r1, [sp, #14]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 8008432:	4669      	mov	r1, sp
 8008434:	f7ff ffac 	bl	8008390 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 8008438:	463b      	mov	r3, r7
 800843a:	4632      	mov	r2, r6
 800843c:	a901      	add	r1, sp, #4
 800843e:	4628      	mov	r0, r5
 8008440:	f7ff ffa6 	bl	8008390 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 8008444:	463b      	mov	r3, r7
 8008446:	4632      	mov	r2, r6
 8008448:	a902      	add	r1, sp, #8
 800844a:	4628      	mov	r0, r5
 800844c:	f7ff ffa0 	bl	8008390 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 8008450:	463b      	mov	r3, r7
 8008452:	4632      	mov	r2, r6
 8008454:	a903      	add	r1, sp, #12
 8008456:	4628      	mov	r0, r5
 8008458:	f7ff ff9a 	bl	8008390 <lv_obj_transform_point>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 800845c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008460:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 8008464:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8008468:	f9bd 1000 	ldrsh.w	r1, [sp]
 800846c:	461a      	mov	r2, r3
 800846e:	42ab      	cmp	r3, r5
 8008470:	bfa8      	it	ge
 8008472:	462a      	movge	r2, r5
 8008474:	4282      	cmp	r2, r0
 8008476:	bfa8      	it	ge
 8008478:	4602      	movge	r2, r0
 800847a:	428a      	cmp	r2, r1
 800847c:	bfa8      	it	ge
 800847e:	460a      	movge	r2, r1
 8008480:	8022      	strh	r2, [r4, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 8008482:	42ab      	cmp	r3, r5
 8008484:	bfb8      	it	lt
 8008486:	462b      	movlt	r3, r5
 8008488:	4283      	cmp	r3, r0
 800848a:	bfb8      	it	lt
 800848c:	4603      	movlt	r3, r0
 800848e:	428b      	cmp	r3, r1
 8008490:	bfb8      	it	lt
 8008492:	460b      	movlt	r3, r1
 8008494:	80a3      	strh	r3, [r4, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8008496:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800849a:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 800849e:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80084a2:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80084a6:	461a      	mov	r2, r3
 80084a8:	42ab      	cmp	r3, r5
 80084aa:	bfa8      	it	ge
 80084ac:	462a      	movge	r2, r5
 80084ae:	4282      	cmp	r2, r0
 80084b0:	bfa8      	it	ge
 80084b2:	4602      	movge	r2, r0
 80084b4:	428a      	cmp	r2, r1
 80084b6:	bfa8      	it	ge
 80084b8:	460a      	movge	r2, r1
 80084ba:	8062      	strh	r2, [r4, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 80084bc:	42ab      	cmp	r3, r5
 80084be:	bfb8      	it	lt
 80084c0:	462b      	movlt	r3, r5
 80084c2:	4283      	cmp	r3, r0
 80084c4:	bfb8      	it	lt
 80084c6:	4603      	movlt	r3, r0
 80084c8:	428b      	cmp	r3, r1
 80084ca:	bfb8      	it	lt
 80084cc:	460b      	movlt	r3, r1
 80084ce:	80e3      	strh	r3, [r4, #6]
    lv_area_increase(area, 5, 5);
 80084d0:	2205      	movs	r2, #5
 80084d2:	4611      	mov	r1, r2
 80084d4:	4620      	mov	r0, r4
 80084d6:	f018 fdf6 	bl	80210c6 <lv_area_increase>
}
 80084da:	b005      	add	sp, #20
 80084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084de <lv_obj_area_is_visible>:
{
 80084de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084e2:	b083      	sub	sp, #12
 80084e4:	4604      	mov	r4, r0
 80084e6:	460e      	mov	r6, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 80084e8:	2101      	movs	r1, #1
 80084ea:	f7fe fdd3 	bl	8007094 <lv_obj_has_flag>
 80084ee:	b128      	cbz	r0, 80084fc <lv_obj_area_is_visible+0x1e>
 80084f0:	f04f 0900 	mov.w	r9, #0
}
 80084f4:	4648      	mov	r0, r9
 80084f6:	b003      	add	sp, #12
 80084f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084fc:	4681      	mov	r9, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 80084fe:	4620      	mov	r0, r4
 8008500:	f003 fbeb 	bl	800bcda <lv_obj_get_screen>
 8008504:	4605      	mov	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8008506:	f003 fbef 	bl	800bce8 <lv_obj_get_disp>
 800850a:	4607      	mov	r7, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800850c:	f7fb fe08 	bl	8004120 <lv_disp_get_scr_act>
 8008510:	4285      	cmp	r5, r0
 8008512:	d00e      	beq.n	8008532 <lv_obj_area_is_visible+0x54>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8008514:	4638      	mov	r0, r7
 8008516:	f7fb fe0e 	bl	8004136 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 800851a:	4285      	cmp	r5, r0
 800851c:	d009      	beq.n	8008532 <lv_obj_area_is_visible+0x54>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800851e:	4638      	mov	r0, r7
 8008520:	f7fb fe14 	bl	800414c <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8008524:	4285      	cmp	r5, r0
 8008526:	d004      	beq.n	8008532 <lv_obj_area_is_visible+0x54>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8008528:	4638      	mov	r0, r7
 800852a:	f7fb fe1a 	bl	8004162 <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 800852e:	4285      	cmp	r5, r0
 8008530:	d1e0      	bne.n	80084f4 <lv_obj_area_is_visible+0x16>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8008532:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008536:	4620      	mov	r0, r4
 8008538:	f7fe fdb3 	bl	80070a2 <lv_obj_has_flag_any>
 800853c:	b9e0      	cbnz	r0, 8008578 <lv_obj_area_is_visible+0x9a>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff fc31 	bl	8007da6 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8008544:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
 8008548:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
    dest->y2 = src->y2;
 800854c:	f9b4 501a 	ldrsh.w	r5, [r4, #26]
        obj_coords.x1 -= ext_size;
 8008550:	b280      	uxth	r0, r0
 8008552:	8aa1      	ldrh	r1, [r4, #20]
 8008554:	1a09      	subs	r1, r1, r0
 8008556:	f8ad 1000 	strh.w	r1, [sp]
        obj_coords.y1 -= ext_size;
 800855a:	1a12      	subs	r2, r2, r0
 800855c:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
 8008560:	4403      	add	r3, r0
 8008562:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
 8008566:	4428      	add	r0, r5
 8008568:	f8ad 0006 	strh.w	r0, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 800856c:	466a      	mov	r2, sp
 800856e:	4631      	mov	r1, r6
 8008570:	4630      	mov	r0, r6
 8008572:	f018 fdc6 	bl	8021102 <_lv_area_intersect>
 8008576:	b178      	cbz	r0, 8008598 <lv_obj_area_is_visible+0xba>
    lv_obj_get_transformed_area(obj, area, true, false);
 8008578:	2300      	movs	r3, #0
 800857a:	2201      	movs	r2, #1
 800857c:	4631      	mov	r1, r6
 800857e:	4620      	mov	r0, r4
 8008580:	f7ff ff39 	bl	80083f6 <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 8008584:	4620      	mov	r0, r4
 8008586:	f003 fbd3 	bl	800bd30 <lv_obj_get_parent>
    while(par != NULL) {
 800858a:	4604      	mov	r4, r0
 800858c:	b378      	cbz	r0, 80085ee <lv_obj_area_is_visible+0x110>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 800858e:	2701      	movs	r7, #1
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8008590:	f44f 2800 	mov.w	r8, #524288	; 0x80000
            lv_area_t par_area = par->coords;
 8008594:	466d      	mov	r5, sp
 8008596:	e006      	b.n	80085a6 <lv_obj_area_is_visible+0xc8>
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8008598:	4681      	mov	r9, r0
 800859a:	e7ab      	b.n	80084f4 <lv_obj_area_is_visible+0x16>
        par = lv_obj_get_parent(par);
 800859c:	4620      	mov	r0, r4
 800859e:	f003 fbc7 	bl	800bd30 <lv_obj_get_parent>
    while(par != NULL) {
 80085a2:	4604      	mov	r4, r0
 80085a4:	b300      	cbz	r0, 80085e8 <lv_obj_area_is_visible+0x10a>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 80085a6:	4639      	mov	r1, r7
 80085a8:	4620      	mov	r0, r4
 80085aa:	f7fe fd73 	bl	8007094 <lv_obj_has_flag>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d1a0      	bne.n	80084f4 <lv_obj_area_is_visible+0x16>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 80085b2:	4641      	mov	r1, r8
 80085b4:	4620      	mov	r0, r4
 80085b6:	f7fe fd74 	bl	80070a2 <lv_obj_has_flag_any>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1ee      	bne.n	800859c <lv_obj_area_is_visible+0xbe>
            lv_area_t par_area = par->coords;
 80085be:	f104 0314 	add.w	r3, r4, #20
 80085c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80085c6:	e885 0003 	stmia.w	r5, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 80085ca:	2300      	movs	r3, #0
 80085cc:	463a      	mov	r2, r7
 80085ce:	4629      	mov	r1, r5
 80085d0:	4620      	mov	r0, r4
 80085d2:	f7ff ff10 	bl	80083f6 <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 80085d6:	462a      	mov	r2, r5
 80085d8:	4631      	mov	r1, r6
 80085da:	4630      	mov	r0, r6
 80085dc:	f018 fd91 	bl	8021102 <_lv_area_intersect>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d1db      	bne.n	800859c <lv_obj_area_is_visible+0xbe>
 80085e4:	4681      	mov	r9, r0
 80085e6:	e785      	b.n	80084f4 <lv_obj_area_is_visible+0x16>
    return true;
 80085e8:	f04f 0901 	mov.w	r9, #1
 80085ec:	e782      	b.n	80084f4 <lv_obj_area_is_visible+0x16>
 80085ee:	f04f 0901 	mov.w	r9, #1
 80085f2:	e77f      	b.n	80084f4 <lv_obj_area_is_visible+0x16>

080085f4 <lv_obj_invalidate_area>:
{
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	b083      	sub	sp, #12
 80085f8:	4605      	mov	r5, r0
 80085fa:	460c      	mov	r4, r1
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 80085fc:	f003 fb74 	bl	800bce8 <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8008600:	f7fb fdc3 	bl	800418a <lv_disp_is_invalidation_enabled>
 8008604:	b908      	cbnz	r0, 800860a <lv_obj_invalidate_area+0x16>
}
 8008606:	b003      	add	sp, #12
 8008608:	bd30      	pop	{r4, r5, pc}
    dest->x1 = src->x1;
 800860a:	8823      	ldrh	r3, [r4, #0]
 800860c:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8008610:	8863      	ldrh	r3, [r4, #2]
 8008612:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8008616:	88a3      	ldrh	r3, [r4, #4]
 8008618:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 800861c:	88e3      	ldrh	r3, [r4, #6]
 800861e:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8008622:	4669      	mov	r1, sp
 8008624:	4628      	mov	r0, r5
 8008626:	f7ff ff5a 	bl	80084de <lv_obj_area_is_visible>
 800862a:	2800      	cmp	r0, #0
 800862c:	d0eb      	beq.n	8008606 <lv_obj_invalidate_area+0x12>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 800862e:	4628      	mov	r0, r5
 8008630:	f003 fb5a 	bl	800bce8 <lv_obj_get_disp>
 8008634:	4669      	mov	r1, sp
 8008636:	f004 fb3f 	bl	800ccb8 <_lv_inv_area>
 800863a:	e7e4      	b.n	8008606 <lv_obj_invalidate_area+0x12>

0800863c <lv_obj_invalidate>:
{
 800863c:	b510      	push	{r4, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8008642:	f7ff fbb0 	bl	8007da6 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8008646:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    dest->x2 = src->x2;
 800864a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 800864e:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
    obj_coords.x1 -= ext_size;
 8008652:	b283      	uxth	r3, r0
 8008654:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8008658:	ebac 0c03 	sub.w	ip, ip, r3
 800865c:	f8ad c000 	strh.w	ip, [sp]
    obj_coords.y1 -= ext_size;
 8008660:	1ac9      	subs	r1, r1, r3
 8008662:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.x2 += ext_size;
 8008666:	441a      	add	r2, r3
 8008668:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 800866c:	4473      	add	r3, lr
 800866e:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 8008672:	4669      	mov	r1, sp
 8008674:	4620      	mov	r0, r4
 8008676:	f7ff ffbd 	bl	80085f4 <lv_obj_invalidate_area>
}
 800867a:	b002      	add	sp, #8
 800867c:	bd10      	pop	{r4, pc}

0800867e <lv_obj_move_to>:
{
 800867e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	4604      	mov	r4, r0
 8008686:	460e      	mov	r6, r1
 8008688:	4615      	mov	r5, r2
    lv_obj_t * parent = obj->parent;
 800868a:	6847      	ldr	r7, [r0, #4]
    if(parent) {
 800868c:	b32f      	cbz	r7, 80086da <lv_obj_move_to+0x5c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800868e:	2212      	movs	r2, #18
 8008690:	2100      	movs	r1, #0
 8008692:	4638      	mov	r0, r7
 8008694:	f002 fc0a 	bl	800aeac <lv_obj_get_style_prop>
 8008698:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800869a:	2210      	movs	r2, #16
 800869c:	2100      	movs	r1, #0
 800869e:	4638      	mov	r0, r7
 80086a0:	f002 fc04 	bl	800aeac <lv_obj_get_style_prop>
 80086a4:	4681      	mov	r9, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 80086a6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80086aa:	4620      	mov	r0, r4
 80086ac:	f7fe fcf2 	bl	8007094 <lv_obj_has_flag>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d036      	beq.n	8008722 <lv_obj_move_to+0xa4>
            x += pad_left + parent->coords.x1;
 80086b4:	4446      	add	r6, r8
 80086b6:	f8b7 8014 	ldrh.w	r8, [r7, #20]
 80086ba:	4446      	add	r6, r8
 80086bc:	b236      	sxth	r6, r6
            y += pad_top + parent->coords.y1;
 80086be:	444d      	add	r5, r9
 80086c0:	8afa      	ldrh	r2, [r7, #22]
 80086c2:	4415      	add	r5, r2
 80086c4:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80086c6:	2232      	movs	r2, #50	; 0x32
 80086c8:	2100      	movs	r1, #0
 80086ca:	4638      	mov	r0, r7
 80086cc:	f002 fbee 	bl	800aeac <lv_obj_get_style_prop>
        x += border_width;
 80086d0:	b280      	uxth	r0, r0
 80086d2:	4406      	add	r6, r0
 80086d4:	b236      	sxth	r6, r6
        y += border_width;
 80086d6:	4405      	add	r5, r0
 80086d8:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
 80086da:	8aa1      	ldrh	r1, [r4, #20]
 80086dc:	1a76      	subs	r6, r6, r1
 80086de:	fa1f f886 	uxth.w	r8, r6
 80086e2:	b236      	sxth	r6, r6
    diff.y = y - obj->coords.y1;
 80086e4:	8ae2      	ldrh	r2, [r4, #22]
 80086e6:	1aad      	subs	r5, r5, r2
 80086e8:	fa1f f985 	uxth.w	r9, r5
 80086ec:	b22d      	sxth	r5, r5
    if(diff.x == 0 && diff.y == 0) return;
 80086ee:	ea58 0309 	orrs.w	r3, r8, r9
 80086f2:	d05f      	beq.n	80087b4 <lv_obj_move_to+0x136>
    lv_obj_invalidate(obj);
 80086f4:	4620      	mov	r0, r4
 80086f6:	f7ff ffa1 	bl	800863c <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 80086fa:	a902      	add	r1, sp, #8
 80086fc:	4620      	mov	r0, r4
 80086fe:	f7ff fcf8 	bl	80080f2 <lv_obj_get_coords>
    if(parent) {
 8008702:	b33f      	cbz	r7, 8008754 <lv_obj_move_to+0xd6>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8008704:	4669      	mov	r1, sp
 8008706:	4638      	mov	r0, r7
 8008708:	f7ff fd97 	bl	800823a <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800870c:	2200      	movs	r2, #0
 800870e:	4669      	mov	r1, sp
 8008710:	a802      	add	r0, sp, #8
 8008712:	f018 fe20 	bl	8021356 <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8008716:	4682      	mov	sl, r0
 8008718:	b9f0      	cbnz	r0, 8008758 <lv_obj_move_to+0xda>
 800871a:	4638      	mov	r0, r7
 800871c:	f002 fa0c 	bl	800ab38 <lv_obj_scrollbar_invalidate>
 8008720:	e01a      	b.n	8008758 <lv_obj_move_to+0xda>
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8008722:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008726:	fa0f f888 	sxth.w	r8, r8
 800872a:	4498      	add	r8, r3
 800872c:	4638      	mov	r0, r7
 800872e:	f001 f91f 	bl	8009970 <lv_obj_get_scroll_x>
 8008732:	eba8 0800 	sub.w	r8, r8, r0
 8008736:	4446      	add	r6, r8
 8008738:	b236      	sxth	r6, r6
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 800873a:	f9b7 8016 	ldrsh.w	r8, [r7, #22]
 800873e:	fa0f f989 	sxth.w	r9, r9
 8008742:	44c8      	add	r8, r9
 8008744:	4638      	mov	r0, r7
 8008746:	f001 f91b 	bl	8009980 <lv_obj_get_scroll_y>
 800874a:	eba8 0800 	sub.w	r8, r8, r0
 800874e:	4445      	add	r5, r8
 8008750:	b22d      	sxth	r5, r5
 8008752:	e7b8      	b.n	80086c6 <lv_obj_move_to+0x48>
    bool on1 = false;
 8008754:	f04f 0a00 	mov.w	sl, #0
    obj->coords.x1 += diff.x;
 8008758:	8aa3      	ldrh	r3, [r4, #20]
 800875a:	4443      	add	r3, r8
 800875c:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 800875e:	8ae3      	ldrh	r3, [r4, #22]
 8008760:	444b      	add	r3, r9
 8008762:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 8008764:	8b23      	ldrh	r3, [r4, #24]
 8008766:	4498      	add	r8, r3
 8008768:	f8a4 8018 	strh.w	r8, [r4, #24]
    obj->coords.y2 += diff.y;
 800876c:	8b63      	ldrh	r3, [r4, #26]
 800876e:	4499      	add	r9, r3
 8008770:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 8008774:	2300      	movs	r3, #0
 8008776:	462a      	mov	r2, r5
 8008778:	4631      	mov	r1, r6
 800877a:	4620      	mov	r0, r4
 800877c:	f7ff fdce 	bl	800831c <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8008780:	b1af      	cbz	r7, 80087ae <lv_obj_move_to+0x130>
 8008782:	4622      	mov	r2, r4
 8008784:	2122      	movs	r1, #34	; 0x22
 8008786:	4638      	mov	r0, r7
 8008788:	f7fb fe1c 	bl	80043c4 <lv_event_send>
    lv_obj_invalidate(obj);
 800878c:	4620      	mov	r0, r4
 800878e:	f7ff ff55 	bl	800863c <lv_obj_invalidate>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8008792:	2200      	movs	r2, #0
 8008794:	4669      	mov	r1, sp
 8008796:	f104 0014 	add.w	r0, r4, #20
 800879a:	f018 fddc 	bl	8021356 <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800879e:	f1ba 0f00 	cmp.w	sl, #0
 80087a2:	d100      	bne.n	80087a6 <lv_obj_move_to+0x128>
 80087a4:	b130      	cbz	r0, 80087b4 <lv_obj_move_to+0x136>
 80087a6:	4638      	mov	r0, r7
 80087a8:	f002 f9c6 	bl	800ab38 <lv_obj_scrollbar_invalidate>
 80087ac:	e002      	b.n	80087b4 <lv_obj_move_to+0x136>
    lv_obj_invalidate(obj);
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff ff44 	bl	800863c <lv_obj_invalidate>
}
 80087b4:	b004      	add	sp, #16
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080087bc <lv_obj_refr_pos>:
{
 80087bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c0:	b087      	sub	sp, #28
 80087c2:	4604      	mov	r4, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 80087c4:	f7ff fc2c 	bl	8008020 <lv_obj_is_layout_positioned>
 80087c8:	b110      	cbz	r0, 80087d0 <lv_obj_refr_pos+0x14>
}
 80087ca:	b007      	add	sp, #28
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80087d0:	4620      	mov	r0, r4
 80087d2:	f003 faad 	bl	800bd30 <lv_obj_get_parent>
 80087d6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 80087d8:	2207      	movs	r2, #7
 80087da:	2100      	movs	r1, #0
 80087dc:	4620      	mov	r0, r4
 80087de:	f002 fb65 	bl	800aeac <lv_obj_get_style_prop>
 80087e2:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 80087e4:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80087e6:	2208      	movs	r2, #8
 80087e8:	2100      	movs	r1, #0
 80087ea:	4620      	mov	r0, r4
 80087ec:	f002 fb5e 	bl	800aeac <lv_obj_get_style_prop>
 80087f0:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 80087f2:	b205      	sxth	r5, r0
    if(parent == NULL) {
 80087f4:	f1b8 0f00 	cmp.w	r8, #0
 80087f8:	d058      	beq.n	80088ac <lv_obj_refr_pos+0xf0>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 80087fa:	4640      	mov	r0, r8
 80087fc:	f7ff fce3 	bl	80081c6 <lv_obj_get_content_width>
 8008800:	9000      	str	r0, [sp, #0]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 8008802:	4640      	mov	r0, r8
 8008804:	f7ff fcfc 	bl	8008200 <lv_obj_get_content_height>
 8008808:	9001      	str	r0, [sp, #4]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 800880a:	f409 49c0 	and.w	r9, r9, #24576	; 0x6000
 800880e:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
 8008812:	d051      	beq.n	80088b8 <lv_obj_refr_pos+0xfc>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 8008814:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 8008818:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800881c:	d061      	beq.n	80088e2 <lv_obj_refr_pos+0x126>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 800881e:	226a      	movs	r2, #106	; 0x6a
 8008820:	2100      	movs	r1, #0
 8008822:	4620      	mov	r0, r4
 8008824:	f002 fb42 	bl	800aeac <lv_obj_get_style_prop>
 8008828:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 800882a:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 800882e:	226b      	movs	r2, #107	; 0x6b
 8008830:	2100      	movs	r1, #0
 8008832:	4620      	mov	r0, r4
 8008834:	f002 fb3a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008838:	b203      	sxth	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800883a:	8aa1      	ldrh	r1, [r4, #20]
 800883c:	9104      	str	r1, [sp, #16]
 800883e:	8b22      	ldrh	r2, [r4, #24]
 8008840:	3201      	adds	r2, #1
 8008842:	b292      	uxth	r2, r2
 8008844:	9205      	str	r2, [sp, #20]
 8008846:	1a52      	subs	r2, r2, r1
 8008848:	b212      	sxth	r2, r2
 800884a:	9203      	str	r2, [sp, #12]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800884c:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8008850:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8008854:	f109 0901 	add.w	r9, r9, #1
 8008858:	fa1f f989 	uxth.w	r9, r9
 800885c:	eba9 020a 	sub.w	r2, r9, sl
 8008860:	b212      	sxth	r2, r2
 8008862:	9202      	str	r2, [sp, #8]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8008864:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 8008868:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800886c:	d04e      	beq.n	800890c <lv_obj_refr_pos+0x150>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800886e:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8008872:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008876:	d060      	beq.n	800893a <lv_obj_refr_pos+0x17e>
    x += tr_x;
 8008878:	445f      	add	r7, fp
 800887a:	b2be      	uxth	r6, r7
 800887c:	b23f      	sxth	r7, r7
    y += tr_y;
 800887e:	441d      	add	r5, r3
 8008880:	fa1f fb85 	uxth.w	fp, r5
 8008884:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008886:	2209      	movs	r2, #9
 8008888:	2100      	movs	r1, #0
 800888a:	4620      	mov	r0, r4
 800888c:	f002 fb0e 	bl	800aeac <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 8008890:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8008894:	d066      	beq.n	8008964 <lv_obj_refr_pos+0x1a8>
    if(align == LV_ALIGN_TOP_LEFT) {
 8008896:	2801      	cmp	r0, #1
 8008898:	d06c      	beq.n	8008974 <lv_obj_refr_pos+0x1b8>
        switch(align) {
 800889a:	3802      	subs	r0, #2
 800889c:	2807      	cmp	r0, #7
 800889e:	d87a      	bhi.n	8008996 <lv_obj_refr_pos+0x1da>
 80088a0:	e8df f000 	tbb	[pc, r0]
 80088a4:	9a937f6e 	.word	0x9a937f6e
 80088a8:	cdba87ac 	.word	0xcdba87ac
        lv_obj_move_to(obj, x, y);
 80088ac:	462a      	mov	r2, r5
 80088ae:	4639      	mov	r1, r7
 80088b0:	4620      	mov	r0, r4
 80088b2:	f7ff fee4 	bl	800867e <lv_obj_move_to>
        return;
 80088b6:	e788      	b.n	80087ca <lv_obj_refr_pos+0xe>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 80088b8:	f427 43c0 	bic.w	r3, r7, #24576	; 0x6000
 80088bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80088c0:	dca8      	bgt.n	8008814 <lv_obj_refr_pos+0x58>
 80088c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088c6:	bfc8      	it	gt
 80088c8:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80088cc:	9a00      	ldr	r2, [sp, #0]
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	4a66      	ldr	r2, [pc, #408]	; (8008a6c <lv_obj_refr_pos+0x2b0>)
 80088d4:	fb82 1203 	smull	r1, r2, r2, r3
 80088d8:	17df      	asrs	r7, r3, #31
 80088da:	ebc7 1762 	rsb	r7, r7, r2, asr #5
 80088de:	b23f      	sxth	r7, r7
 80088e0:	e798      	b.n	8008814 <lv_obj_refr_pos+0x58>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 80088e2:	f425 43c0 	bic.w	r3, r5, #24576	; 0x6000
 80088e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80088ea:	dc98      	bgt.n	800881e <lv_obj_refr_pos+0x62>
 80088ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088f0:	bfc8      	it	gt
 80088f2:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 80088f6:	9a01      	ldr	r2, [sp, #4]
 80088f8:	fb02 f303 	mul.w	r3, r2, r3
 80088fc:	4a5b      	ldr	r2, [pc, #364]	; (8008a6c <lv_obj_refr_pos+0x2b0>)
 80088fe:	fb82 1203 	smull	r1, r2, r2, r3
 8008902:	17dd      	asrs	r5, r3, #31
 8008904:	ebc5 1562 	rsb	r5, r5, r2, asr #5
 8008908:	b22d      	sxth	r5, r5
 800890a:	e788      	b.n	800881e <lv_obj_refr_pos+0x62>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 800890c:	f42b 42c0 	bic.w	r2, fp, #24576	; 0x6000
 8008910:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008914:	dcab      	bgt.n	800886e <lv_obj_refr_pos+0xb2>
 8008916:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800891a:	bfc8      	it	gt
 800891c:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 8008920:	9903      	ldr	r1, [sp, #12]
 8008922:	fb01 f202 	mul.w	r2, r1, r2
 8008926:	4951      	ldr	r1, [pc, #324]	; (8008a6c <lv_obj_refr_pos+0x2b0>)
 8008928:	fb81 6102 	smull	r6, r1, r1, r2
 800892c:	ea4f 7be2 	mov.w	fp, r2, asr #31
 8008930:	ebcb 1b61 	rsb	fp, fp, r1, asr #5
 8008934:	fa0f fb8b 	sxth.w	fp, fp
 8008938:	e799      	b.n	800886e <lv_obj_refr_pos+0xb2>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 800893a:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800893e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008942:	dc99      	bgt.n	8008878 <lv_obj_refr_pos+0xbc>
 8008944:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008948:	bfc8      	it	gt
 800894a:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	fb03 f202 	mul.w	r2, r3, r2
 8008954:	4945      	ldr	r1, [pc, #276]	; (8008a6c <lv_obj_refr_pos+0x2b0>)
 8008956:	fb81 3102 	smull	r3, r1, r1, r2
 800895a:	17d3      	asrs	r3, r2, #31
 800895c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 8008960:	b21b      	sxth	r3, r3
 8008962:	e789      	b.n	8008878 <lv_obj_refr_pos+0xbc>
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008964:	2216      	movs	r2, #22
 8008966:	2100      	movs	r1, #0
 8008968:	4640      	mov	r0, r8
 800896a:	f002 fa9f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800896e:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 8008970:	2801      	cmp	r0, #1
 8008972:	d016      	beq.n	80089a2 <lv_obj_refr_pos+0x1e6>
        lv_obj_move_to(obj, x, y);
 8008974:	462a      	mov	r2, r5
 8008976:	4639      	mov	r1, r7
 8008978:	4620      	mov	r0, r4
 800897a:	f7ff fe80 	bl	800867e <lv_obj_move_to>
 800897e:	e724      	b.n	80087ca <lv_obj_refr_pos+0xe>
                x += pw / 2 - w / 2;
 8008980:	9b00      	ldr	r3, [sp, #0]
 8008982:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8008986:	9b03      	ldr	r3, [sp, #12]
 8008988:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
 800898c:	107f      	asrs	r7, r7, #1
 800898e:	ebc7 0760 	rsb	r7, r7, r0, asr #1
 8008992:	4437      	add	r7, r6
 8008994:	b23f      	sxth	r7, r7
        lv_obj_move_to(obj, x, y);
 8008996:	462a      	mov	r2, r5
 8008998:	4639      	mov	r1, r7
 800899a:	4620      	mov	r0, r4
 800899c:	f7ff fe6f 	bl	800867e <lv_obj_move_to>
 80089a0:	e713      	b.n	80087ca <lv_obj_refr_pos+0xe>
                x += pw - w;
 80089a2:	9b04      	ldr	r3, [sp, #16]
 80089a4:	9a05      	ldr	r2, [sp, #20]
 80089a6:	1a9f      	subs	r7, r3, r2
 80089a8:	9b00      	ldr	r3, [sp, #0]
 80089aa:	441f      	add	r7, r3
 80089ac:	4437      	add	r7, r6
 80089ae:	b23f      	sxth	r7, r7
                break;
 80089b0:	e7f1      	b.n	8008996 <lv_obj_refr_pos+0x1da>
                y += ph / 2 - h / 2;
 80089b2:	9b01      	ldr	r3, [sp, #4]
 80089b4:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 80089be:	106d      	asrs	r5, r5, #1
 80089c0:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 80089c4:	445d      	add	r5, fp
 80089c6:	b22d      	sxth	r5, r5
                break;
 80089c8:	e7e5      	b.n	8008996 <lv_obj_refr_pos+0x1da>
                y += ph - h;
 80089ca:	ebaa 0509 	sub.w	r5, sl, r9
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	441d      	add	r5, r3
 80089d2:	445d      	add	r5, fp
 80089d4:	b22d      	sxth	r5, r5
                break;
 80089d6:	e7de      	b.n	8008996 <lv_obj_refr_pos+0x1da>
                x += pw / 2 - w / 2;
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 80089de:	9b03      	ldr	r3, [sp, #12]
 80089e0:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
 80089e4:	107f      	asrs	r7, r7, #1
 80089e6:	ebc7 0760 	rsb	r7, r7, r0, asr #1
 80089ea:	4437      	add	r7, r6
 80089ec:	b23f      	sxth	r7, r7
                y += ph - h;
 80089ee:	ebaa 0509 	sub.w	r5, sl, r9
 80089f2:	9b01      	ldr	r3, [sp, #4]
 80089f4:	441d      	add	r5, r3
 80089f6:	445d      	add	r5, fp
 80089f8:	b22d      	sxth	r5, r5
                break;
 80089fa:	e7cc      	b.n	8008996 <lv_obj_refr_pos+0x1da>
                x += pw - w;
 80089fc:	9b04      	ldr	r3, [sp, #16]
 80089fe:	9a05      	ldr	r2, [sp, #20]
 8008a00:	1a9f      	subs	r7, r3, r2
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	441f      	add	r7, r3
 8008a06:	4437      	add	r7, r6
 8008a08:	b23f      	sxth	r7, r7
                y += ph - h;
 8008a0a:	ebaa 0509 	sub.w	r5, sl, r9
 8008a0e:	9b01      	ldr	r3, [sp, #4]
 8008a10:	441d      	add	r5, r3
 8008a12:	445d      	add	r5, fp
 8008a14:	b22d      	sxth	r5, r5
                break;
 8008a16:	e7be      	b.n	8008996 <lv_obj_refr_pos+0x1da>
                x += pw - w;
 8008a18:	9b04      	ldr	r3, [sp, #16]
 8008a1a:	9a05      	ldr	r2, [sp, #20]
 8008a1c:	1a9f      	subs	r7, r3, r2
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	441f      	add	r7, r3
 8008a22:	4437      	add	r7, r6
 8008a24:	b23f      	sxth	r7, r7
                y += ph / 2 - h / 2;
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 8008a32:	106d      	asrs	r5, r5, #1
 8008a34:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 8008a38:	445d      	add	r5, fp
 8008a3a:	b22d      	sxth	r5, r5
                break;
 8008a3c:	e7ab      	b.n	8008996 <lv_obj_refr_pos+0x1da>
                x += pw / 2 - w / 2;
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
 8008a4a:	107f      	asrs	r7, r7, #1
 8008a4c:	ebc7 0760 	rsb	r7, r7, r0, asr #1
 8008a50:	4437      	add	r7, r6
 8008a52:	b23f      	sxth	r7, r7
                y += ph / 2 - h / 2;
 8008a54:	9b01      	ldr	r3, [sp, #4]
 8008a56:	eb03 70d3 	add.w	r0, r3, r3, lsr #31
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
 8008a60:	106d      	asrs	r5, r5, #1
 8008a62:	ebc5 0560 	rsb	r5, r5, r0, asr #1
 8008a66:	445d      	add	r5, fp
 8008a68:	b22d      	sxth	r5, r5
                break;
 8008a6a:	e794      	b.n	8008996 <lv_obj_refr_pos+0x1da>
 8008a6c:	51eb851f 	.word	0x51eb851f

08008a70 <lv_obj_is_visible>:
{
 8008a70:	b510      	push	{r4, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8008a76:	f7ff f996 	bl	8007da6 <_lv_obj_get_ext_draw_size>
    dest->y1 = src->y1;
 8008a7a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
    dest->x2 = src->x2;
 8008a7e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    dest->y2 = src->y2;
 8008a82:	f9b4 e01a 	ldrsh.w	lr, [r4, #26]
    obj_coords.x1 -= ext_size;
 8008a86:	b283      	uxth	r3, r0
 8008a88:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8008a8c:	ebac 0c03 	sub.w	ip, ip, r3
 8008a90:	f8ad c000 	strh.w	ip, [sp]
    obj_coords.y1 -= ext_size;
 8008a94:	1ac9      	subs	r1, r1, r3
 8008a96:	f8ad 1002 	strh.w	r1, [sp, #2]
    obj_coords.x2 += ext_size;
 8008a9a:	441a      	add	r2, r3
 8008a9c:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
 8008aa0:	4473      	add	r3, lr
 8008aa2:	f8ad 3006 	strh.w	r3, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 8008aa6:	4669      	mov	r1, sp
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f7ff fd18 	bl	80084de <lv_obj_area_is_visible>
}
 8008aae:	b002      	add	sp, #8
 8008ab0:	bd10      	pop	{r4, pc}

08008ab2 <lv_obj_set_ext_click_area>:
{
 8008ab2:	b538      	push	{r3, r4, r5, lr}
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8008ab8:	f7fe fd14 	bl	80074e4 <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 8008abc:	68ab      	ldr	r3, [r5, #8]
 8008abe:	829c      	strh	r4, [r3, #20]
}
 8008ac0:	bd38      	pop	{r3, r4, r5, pc}

08008ac2 <lv_obj_get_click_area>:
{
 8008ac2:	b510      	push	{r4, lr}
    dest->x1 = src->x1;
 8008ac4:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8008ac8:	f8a1 e000 	strh.w	lr, [r1]
    dest->y1 = src->y1;
 8008acc:	f9b0 2016 	ldrsh.w	r2, [r0, #22]
 8008ad0:	804a      	strh	r2, [r1, #2]
    dest->x2 = src->x2;
 8008ad2:	f9b0 c018 	ldrsh.w	ip, [r0, #24]
 8008ad6:	f8a1 c004 	strh.w	ip, [r1, #4]
    dest->y2 = src->y2;
 8008ada:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8008ade:	80cb      	strh	r3, [r1, #6]
    if(obj->spec_attr) {
 8008ae0:	6884      	ldr	r4, [r0, #8]
 8008ae2:	b18c      	cbz	r4, 8008b08 <lv_obj_get_click_area+0x46>
        area->x1 -= obj->spec_attr->ext_click_pad;
 8008ae4:	8aa4      	ldrh	r4, [r4, #20]
 8008ae6:	ebae 0e04 	sub.w	lr, lr, r4
 8008aea:	f8a1 e000 	strh.w	lr, [r1]
        area->x2 += obj->spec_attr->ext_click_pad;
 8008aee:	6884      	ldr	r4, [r0, #8]
 8008af0:	8aa4      	ldrh	r4, [r4, #20]
 8008af2:	44a4      	add	ip, r4
 8008af4:	f8a1 c004 	strh.w	ip, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 8008af8:	6884      	ldr	r4, [r0, #8]
 8008afa:	8aa4      	ldrh	r4, [r4, #20]
 8008afc:	1b12      	subs	r2, r2, r4
 8008afe:	804a      	strh	r2, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 8008b00:	6882      	ldr	r2, [r0, #8]
 8008b02:	8a92      	ldrh	r2, [r2, #20]
 8008b04:	4413      	add	r3, r2
 8008b06:	80cb      	strh	r3, [r1, #6]
}
 8008b08:	bd10      	pop	{r4, pc}

08008b0a <lv_obj_hit_test>:
{
 8008b0a:	b570      	push	{r4, r5, r6, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460c      	mov	r4, r1
    if(!lv_obj_has_flag(obj, LV_OBJ_FLAG_CLICKABLE)) return false;
 8008b12:	2102      	movs	r1, #2
 8008b14:	f7fe fabe 	bl	8007094 <lv_obj_has_flag>
 8008b18:	4605      	mov	r5, r0
 8008b1a:	b910      	cbnz	r0, 8008b22 <lv_obj_hit_test+0x18>
}
 8008b1c:	4628      	mov	r0, r5
 8008b1e:	b004      	add	sp, #16
 8008b20:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_state(obj, LV_STATE_DISABLED)) return false;
 8008b22:	2180      	movs	r1, #128	; 0x80
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7fe fac4 	bl	80070b2 <lv_obj_has_state>
 8008b2a:	b108      	cbz	r0, 8008b30 <lv_obj_hit_test+0x26>
 8008b2c:	2500      	movs	r5, #0
 8008b2e:	e7f5      	b.n	8008b1c <lv_obj_hit_test+0x12>
    lv_obj_get_click_area(obj, &a);
 8008b30:	a902      	add	r1, sp, #8
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7ff ffc5 	bl	8008ac2 <lv_obj_get_click_area>
    bool res = _lv_area_is_point_on(&a, point, 0);
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	a802      	add	r0, sp, #8
 8008b3e:	f018 fb2d 	bl	802119c <_lv_area_is_point_on>
    if(res == false) return false;
 8008b42:	4605      	mov	r5, r0
 8008b44:	2800      	cmp	r0, #0
 8008b46:	d0e9      	beq.n	8008b1c <lv_obj_hit_test+0x12>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 8008b48:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f7fe faa1 	bl	8007094 <lv_obj_has_flag>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d0e2      	beq.n	8008b1c <lv_obj_hit_test+0x12>
        hit_info.point = point;
 8008b56:	9400      	str	r4, [sp, #0]
        hit_info.res = true;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f88d 3004 	strb.w	r3, [sp, #4]
        lv_event_send(obj, LV_EVENT_HIT_TEST, &hit_info);
 8008b5e:	466a      	mov	r2, sp
 8008b60:	2111      	movs	r1, #17
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7fb fc2e 	bl	80043c4 <lv_event_send>
        return hit_info.res;
 8008b68:	f89d 5004 	ldrb.w	r5, [sp, #4]
 8008b6c:	e7d6      	b.n	8008b1c <lv_obj_hit_test+0x12>
	...

08008b70 <lv_clamp_width>:
{
 8008b70:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8008b72:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 8008b76:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 8008b7a:	d00c      	beq.n	8008b96 <lv_clamp_width+0x26>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8008b7c:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 8008b80:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 8008b84:	d01c      	beq.n	8008bc0 <lv_clamp_width+0x50>
    return LV_CLAMP(min_width, width, max_width);
 8008b86:	4290      	cmp	r0, r2
 8008b88:	bfa8      	it	ge
 8008b8a:	4610      	movge	r0, r2
}
 8008b8c:	4288      	cmp	r0, r1
 8008b8e:	bfb8      	it	lt
 8008b90:	4608      	movlt	r0, r1
 8008b92:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 8008b96:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 8008b9a:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8008b9e:	dced      	bgt.n	8008b7c <lv_clamp_width+0xc>
 8008ba0:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8008ba4:	bfc8      	it	gt
 8008ba6:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 8008baa:	fb0c fc03 	mul.w	ip, ip, r3
 8008bae:	490e      	ldr	r1, [pc, #56]	; (8008be8 <lv_clamp_width+0x78>)
 8008bb0:	fb81 1e0c 	smull	r1, lr, r1, ip
 8008bb4:	ea4f 71ec 	mov.w	r1, ip, asr #31
 8008bb8:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 8008bbc:	b209      	sxth	r1, r1
 8008bbe:	e7dd      	b.n	8008b7c <lv_clamp_width+0xc>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 8008bc0:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 8008bc4:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8008bc8:	dcdd      	bgt.n	8008b86 <lv_clamp_width+0x16>
 8008bca:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8008bce:	bfc8      	it	gt
 8008bd0:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 8008bd4:	fb0c f303 	mul.w	r3, ip, r3
 8008bd8:	4a03      	ldr	r2, [pc, #12]	; (8008be8 <lv_clamp_width+0x78>)
 8008bda:	fb82 c203 	smull	ip, r2, r2, r3
 8008bde:	17db      	asrs	r3, r3, #31
 8008be0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8008be4:	b21a      	sxth	r2, r3
 8008be6:	e7ce      	b.n	8008b86 <lv_clamp_width+0x16>
 8008be8:	51eb851f 	.word	0x51eb851f

08008bec <lv_clamp_height>:
{
 8008bec:	b500      	push	{lr}
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8008bee:	f401 4cc0 	and.w	ip, r1, #24576	; 0x6000
 8008bf2:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 8008bf6:	d00c      	beq.n	8008c12 <lv_clamp_height+0x26>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8008bf8:	f402 4cc0 	and.w	ip, r2, #24576	; 0x6000
 8008bfc:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
 8008c00:	d01c      	beq.n	8008c3c <lv_clamp_height+0x50>
    return LV_CLAMP(min_height, height, max_height);
 8008c02:	4290      	cmp	r0, r2
 8008c04:	bfa8      	it	ge
 8008c06:	4610      	movge	r0, r2
}
 8008c08:	4288      	cmp	r0, r1
 8008c0a:	bfb8      	it	lt
 8008c0c:	4608      	movlt	r0, r1
 8008c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 8008c12:	f421 4cc0 	bic.w	ip, r1, #24576	; 0x6000
 8008c16:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8008c1a:	dced      	bgt.n	8008bf8 <lv_clamp_height+0xc>
 8008c1c:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8008c20:	bfc8      	it	gt
 8008c22:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 8008c26:	fb0c fc03 	mul.w	ip, ip, r3
 8008c2a:	490e      	ldr	r1, [pc, #56]	; (8008c64 <lv_clamp_height+0x78>)
 8008c2c:	fb81 1e0c 	smull	r1, lr, r1, ip
 8008c30:	ea4f 71ec 	mov.w	r1, ip, asr #31
 8008c34:	ebc1 116e 	rsb	r1, r1, lr, asr #5
 8008c38:	b209      	sxth	r1, r1
 8008c3a:	e7dd      	b.n	8008bf8 <lv_clamp_height+0xc>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 8008c3c:	f422 4cc0 	bic.w	ip, r2, #24576	; 0x6000
 8008c40:	f5bc 6ffa 	cmp.w	ip, #2000	; 0x7d0
 8008c44:	dcdd      	bgt.n	8008c02 <lv_clamp_height+0x16>
 8008c46:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
 8008c4a:	bfc8      	it	gt
 8008c4c:	f5cc 7c7a 	rsbgt	ip, ip, #1000	; 0x3e8
 8008c50:	fb0c f303 	mul.w	r3, ip, r3
 8008c54:	4a03      	ldr	r2, [pc, #12]	; (8008c64 <lv_clamp_height+0x78>)
 8008c56:	fb82 c203 	smull	ip, r2, r2, r3
 8008c5a:	17db      	asrs	r3, r3, #31
 8008c5c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8008c60:	b21a      	sxth	r2, r3
 8008c62:	e7ce      	b.n	8008c02 <lv_clamp_height+0x16>
 8008c64:	51eb851f 	.word	0x51eb851f

08008c68 <lv_obj_refr_size>:
{
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	b08d      	sub	sp, #52	; 0x34
    if(obj->w_layout && obj->h_layout) return false;
 8008c6e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8008c72:	f003 0306 	and.w	r3, r3, #6
 8008c76:	2b06      	cmp	r3, #6
 8008c78:	f000 8336 	beq.w	80092e8 <lv_obj_refr_size+0x680>
 8008c7c:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8008c7e:	f003 f857 	bl	800bd30 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8008c82:	4607      	mov	r7, r0
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f000 8331 	beq.w	80092ec <lv_obj_refr_size+0x684>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 fef2 	bl	8009a74 <lv_obj_get_scroll_left>
 8008c90:	9000      	str	r0, [sp, #0]
    if(obj->w_layout) {
 8008c92:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008c96:	f013 0f04 	tst.w	r3, #4
 8008c9a:	d024      	beq.n	8008ce6 <lv_obj_refr_size+0x7e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008c9c:	8b25      	ldrh	r5, [r4, #24]
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	8aa0      	ldrh	r0, [r4, #20]
 8008ca2:	1a2d      	subs	r5, r5, r0
 8008ca4:	b22d      	sxth	r5, r5
    bool w_is_content = false;
 8008ca6:	2600      	movs	r6, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 fe71 	bl	8009990 <lv_obj_get_scroll_top>
 8008cae:	4680      	mov	r8, r0
    if(obj->h_layout) {
 8008cb0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008cb4:	f013 0f02 	tst.w	r3, #2
 8008cb8:	f000 818e 	beq.w	8008fd8 <lv_obj_refr_size+0x370>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8008cbc:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8008cc0:	f109 0901 	add.w	r9, r9, #1
 8008cc4:	8ae0      	ldrh	r0, [r4, #22]
 8008cc6:	eba9 0900 	sub.w	r9, r9, r0
 8008cca:	fa0f f989 	sxth.w	r9, r9
    if(w_is_content || h_is_content) {
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	f040 827e 	bne.w	80091d0 <lv_obj_refr_size+0x568>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008cd4:	8b23      	ldrh	r3, [r4, #24]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	8aa2      	ldrh	r2, [r4, #20]
 8008cda:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 8008cdc:	b21b      	sxth	r3, r3
 8008cde:	429d      	cmp	r5, r3
 8008ce0:	f040 828a 	bne.w	80091f8 <lv_obj_refr_size+0x590>
 8008ce4:	e2cc      	b.n	8009280 <lv_obj_refr_size+0x618>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4620      	mov	r0, r4
 8008cec:	f002 f8de 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008cf0:	b205      	sxth	r5, r0
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 8008cf2:	f242 76d1 	movw	r6, #10193	; 0x27d1
 8008cf6:	42b5      	cmp	r5, r6
 8008cf8:	bf14      	ite	ne
 8008cfa:	2600      	movne	r6, #0
 8008cfc:	2601      	moveq	r6, #1
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8008cfe:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8008d02:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008d06:	d044      	beq.n	8008d92 <lv_obj_refr_size+0x12a>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff fa5c 	bl	80081c6 <lv_obj_get_content_width>
 8008d0e:	9001      	str	r0, [sp, #4]
        if(w_is_content) {
 8008d10:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008d14:	429d      	cmp	r5, r3
 8008d16:	d15f      	bne.n	8008dd8 <lv_obj_refr_size+0x170>
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f001 f905 	bl	8009f2c <lv_obj_scroll_to_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008d22:	2232      	movs	r2, #50	; 0x32
 8008d24:	2100      	movs	r1, #0
 8008d26:	4620      	mov	r0, r4
 8008d28:	f002 f8c0 	bl	800aeac <lv_obj_get_style_prop>
 8008d2c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008d2e:	2213      	movs	r2, #19
 8008d30:	2100      	movs	r1, #0
 8008d32:	4620      	mov	r0, r4
 8008d34:	f002 f8ba 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8008d38:	b2ad      	uxth	r5, r5
 8008d3a:	4428      	add	r0, r5
 8008d3c:	fa1f f880 	uxth.w	r8, r0
 8008d40:	f8cd 800c 	str.w	r8, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008d44:	2212      	movs	r2, #18
 8008d46:	2100      	movs	r1, #0
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f002 f8af 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8008d4e:	4405      	add	r5, r0
 8008d50:	b2ad      	uxth	r5, r5
 8008d52:	9502      	str	r5, [sp, #8]
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8008d54:	4620      	mov	r0, r4
 8008d56:	f7ff faa3 	bl	80082a0 <lv_obj_get_self_width>
 8008d5a:	4643      	mov	r3, r8
 8008d5c:	195d      	adds	r5, r3, r5
 8008d5e:	4405      	add	r5, r0
 8008d60:	b22d      	sxth	r5, r5
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8008d62:	4620      	mov	r0, r4
 8008d64:	f002 fffd 	bl	800bd62 <lv_obj_get_child_cnt>
 8008d68:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8008d6a:	2216      	movs	r2, #22
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f002 f89c 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8008d74:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8008d76:	2801      	cmp	r0, #1
 8008d78:	d042      	beq.n	8008e00 <lv_obj_refr_size+0x198>
        for(i = 0; i < child_cnt; i++) {
 8008d7a:	f1bb 0f00 	cmp.w	fp, #0
 8008d7e:	d02b      	beq.n	8008dd8 <lv_obj_refr_size+0x170>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8008d80:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8008d84:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 8008d86:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8009074 <lv_obj_refr_size+0x40c>
        for(i = 0; i < child_cnt; i++) {
 8008d8a:	f04f 0900 	mov.w	r9, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008d8e:	46a2      	mov	sl, r4
 8008d90:	e0b9      	b.n	8008f06 <lv_obj_refr_size+0x29e>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 8008d92:	f425 48c0 	bic.w	r8, r5, #24576	; 0x6000
 8008d96:	f5b8 6ffa 	cmp.w	r8, #2000	; 0x7d0
 8008d9a:	dcb5      	bgt.n	8008d08 <lv_obj_refr_size+0xa0>
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	f7ff fa12 	bl	80081c6 <lv_obj_get_content_width>
 8008da2:	9001      	str	r0, [sp, #4]
        if(w_is_content) {
 8008da4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008da8:	429d      	cmp	r5, r3
 8008daa:	d0b5      	beq.n	8008d18 <lv_obj_refr_size+0xb0>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8008dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008db0:	f013 0f04 	tst.w	r3, #4
 8008db4:	f000 80eb 	beq.w	8008f8e <lv_obj_refr_size+0x326>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 8008db8:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 8008dbc:	bfc8      	it	gt
 8008dbe:	f5c8 787a 	rsbgt	r8, r8, #1000	; 0x3e8
 8008dc2:	9b01      	ldr	r3, [sp, #4]
 8008dc4:	fb08 f803 	mul.w	r8, r8, r3
 8008dc8:	4bab      	ldr	r3, [pc, #684]	; (8009078 <lv_obj_refr_size+0x410>)
 8008dca:	fb83 2308 	smull	r2, r3, r3, r8
 8008dce:	ea4f 75e8 	mov.w	r5, r8, asr #31
 8008dd2:	ebc5 1563 	rsb	r5, r5, r3, asr #5
 8008dd6:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8008dd8:	2202      	movs	r2, #2
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f002 f865 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008de2:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 8008de6:	2203      	movs	r2, #3
 8008de8:	2100      	movs	r1, #0
 8008dea:	4620      	mov	r0, r4
 8008dec:	f002 f85e 	bl	800aeac <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	b202      	sxth	r2, r0
 8008df4:	4641      	mov	r1, r8
 8008df6:	4628      	mov	r0, r5
 8008df8:	f7ff feba 	bl	8008b70 <lv_clamp_width>
 8008dfc:	4605      	mov	r5, r0
 8008dfe:	e753      	b.n	8008ca8 <lv_obj_refr_size+0x40>
        for(i = 0; i < child_cnt; i++) {
 8008e00:	f1bb 0f00 	cmp.w	fp, #0
 8008e04:	d0e8      	beq.n	8008dd8 <lv_obj_refr_size+0x170>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8008e06:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008e0a:	9304      	str	r3, [sp, #16]
    lv_coord_t child_res = LV_COORD_MIN;
 8008e0c:	f8df a264 	ldr.w	sl, [pc, #612]	; 8009074 <lv_obj_refr_size+0x40c>
        for(i = 0; i < child_cnt; i++) {
 8008e10:	f04f 0800 	mov.w	r8, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008e14:	46a1      	mov	r9, r4
 8008e16:	e01d      	b.n	8008e54 <lv_obj_refr_size+0x1ec>
 8008e18:	2209      	movs	r2, #9
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f002 f845 	bl	800aeac <lv_obj_get_style_prop>
                switch(align) {
 8008e22:	b2c3      	uxtb	r3, r0
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d831      	bhi.n	8008e8c <lv_obj_refr_size+0x224>
 8008e28:	e8df f003 	tbb	[pc, r3]
 8008e2c:	05303005 	.word	0x05303005
 8008e30:	30053030 	.word	0x30053030
 8008e34:	05          	.byte	0x05
 8008e35:	00          	.byte	0x00
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8008e36:	f9b9 3018 	ldrsh.w	r3, [r9, #24]
 8008e3a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	3301      	adds	r3, #1
 8008e42:	459a      	cmp	sl, r3
 8008e44:	bfb8      	it	lt
 8008e46:	469a      	movlt	sl, r3
 8008e48:	fa0f fa8a 	sxth.w	sl, sl
        for(i = 0; i < child_cnt; i++) {
 8008e4c:	f108 0801 	add.w	r8, r8, #1
 8008e50:	45c3      	cmp	fp, r8
 8008e52:	d033      	beq.n	8008ebc <lv_obj_refr_size+0x254>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008e54:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008e5e:	4987      	ldr	r1, [pc, #540]	; (800907c <lv_obj_refr_size+0x414>)
 8008e60:	4620      	mov	r0, r4
 8008e62:	f7fe f91e 	bl	80070a2 <lv_obj_has_flag_any>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d1f0      	bne.n	8008e4c <lv_obj_refr_size+0x1e4>
            if(!lv_obj_is_layout_positioned(child)) {
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f7ff f8d8 	bl	8008020 <lv_obj_is_layout_positioned>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d0d1      	beq.n	8008e18 <lv_obj_refr_size+0x1b0>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 8008e74:	f9b9 3018 	ldrsh.w	r3, [r9, #24]
 8008e78:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	3301      	adds	r3, #1
 8008e80:	459a      	cmp	sl, r3
 8008e82:	bfb8      	it	lt
 8008e84:	469a      	movlt	sl, r3
 8008e86:	fa0f fa8a 	sxth.w	sl, sl
 8008e8a:	e7df      	b.n	8008e4c <lv_obj_refr_size+0x1e4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8008e8c:	2207      	movs	r2, #7
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4620      	mov	r0, r4
 8008e92:	f002 f80b 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008e96:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d1d7      	bne.n	8008e4c <lv_obj_refr_size+0x1e4>
 8008e9c:	8b23      	ldrh	r3, [r4, #24]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	8aa2      	ldrh	r2, [r4, #20]
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 8008ea6:	b21b      	sxth	r3, r3
 8008ea8:	9904      	ldr	r1, [sp, #16]
 8008eaa:	440b      	add	r3, r1
 8008eac:	459a      	cmp	sl, r3
 8008eae:	dccd      	bgt.n	8008e4c <lv_obj_refr_size+0x1e4>
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	eb03 0a02 	add.w	sl, r3, r2
 8008eb6:	fa0f fa8a 	sxth.w	sl, sl
 8008eba:	e7c7      	b.n	8008e4c <lv_obj_refr_size+0x1e4>
        if(child_res != LV_COORD_MIN) {
 8008ebc:	464c      	mov	r4, r9
 8008ebe:	4b6d      	ldr	r3, [pc, #436]	; (8009074 <lv_obj_refr_size+0x40c>)
 8008ec0:	459a      	cmp	sl, r3
 8008ec2:	d089      	beq.n	8008dd8 <lv_obj_refr_size+0x170>
            child_res += pad_left;
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	4453      	add	r3, sl
 8008ec8:	b21b      	sxth	r3, r3
 8008eca:	e058      	b.n	8008f7e <lv_obj_refr_size+0x316>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8008ecc:	2209      	movs	r2, #9
 8008ece:	2100      	movs	r1, #0
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f001 ffeb 	bl	800aeac <lv_obj_get_style_prop>
                switch(align) {
 8008ed6:	b2c0      	uxtb	r0, r0
 8008ed8:	2807      	cmp	r0, #7
 8008eda:	d830      	bhi.n	8008f3e <lv_obj_refr_size+0x2d6>
 8008edc:	2301      	movs	r3, #1
 8008ede:	fa03 f000 	lsl.w	r0, r3, r0
 8008ee2:	f010 0f93 	tst.w	r0, #147	; 0x93
 8008ee6:	d02a      	beq.n	8008f3e <lv_obj_refr_size+0x2d6>
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8008ee8:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8008eec:	f9ba 2014 	ldrsh.w	r2, [sl, #20]
 8008ef0:	1a9b      	subs	r3, r3, r2
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	4598      	cmp	r8, r3
 8008ef6:	bfb8      	it	lt
 8008ef8:	4698      	movlt	r8, r3
 8008efa:	fa0f f888 	sxth.w	r8, r8
        for(i = 0; i < child_cnt; i++) {
 8008efe:	f109 0901 	add.w	r9, r9, #1
 8008f02:	45cb      	cmp	fp, r9
 8008f04:	d033      	beq.n	8008f6e <lv_obj_refr_size+0x306>
            lv_obj_t * child = obj->spec_attr->children[i];
 8008f06:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f853 4029 	ldr.w	r4, [r3, r9, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8008f10:	495a      	ldr	r1, [pc, #360]	; (800907c <lv_obj_refr_size+0x414>)
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7fe f8c5 	bl	80070a2 <lv_obj_has_flag_any>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1f0      	bne.n	8008efe <lv_obj_refr_size+0x296>
            if(!lv_obj_is_layout_positioned(child)) {
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7ff f87f 	bl	8008020 <lv_obj_is_layout_positioned>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d0d2      	beq.n	8008ecc <lv_obj_refr_size+0x264>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8008f26:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8008f2a:	f9ba 2014 	ldrsh.w	r2, [sl, #20]
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	3301      	adds	r3, #1
 8008f32:	4598      	cmp	r8, r3
 8008f34:	bfb8      	it	lt
 8008f36:	4698      	movlt	r8, r3
 8008f38:	fa0f f888 	sxth.w	r8, r8
 8008f3c:	e7df      	b.n	8008efe <lv_obj_refr_size+0x296>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8008f3e:	2208      	movs	r2, #8
 8008f40:	2100      	movs	r1, #0
 8008f42:	4620      	mov	r0, r4
 8008f44:	f001 ffb2 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008f48:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d1d7      	bne.n	8008efe <lv_obj_refr_size+0x296>
 8008f4e:	8b23      	ldrh	r3, [r4, #24]
 8008f50:	3301      	adds	r3, #1
 8008f52:	8aa2      	ldrh	r2, [r4, #20]
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 8008f58:	b21b      	sxth	r3, r3
 8008f5a:	9904      	ldr	r1, [sp, #16]
 8008f5c:	440b      	add	r3, r1
 8008f5e:	4598      	cmp	r8, r3
 8008f60:	dccd      	bgt.n	8008efe <lv_obj_refr_size+0x296>
 8008f62:	9b02      	ldr	r3, [sp, #8]
 8008f64:	eb03 0802 	add.w	r8, r3, r2
 8008f68:	fa0f f888 	sxth.w	r8, r8
 8008f6c:	e7c7      	b.n	8008efe <lv_obj_refr_size+0x296>
        if(child_res != LV_COORD_MIN) {
 8008f6e:	4654      	mov	r4, sl
 8008f70:	4b40      	ldr	r3, [pc, #256]	; (8009074 <lv_obj_refr_size+0x40c>)
 8008f72:	4598      	cmp	r8, r3
 8008f74:	f43f af30 	beq.w	8008dd8 <lv_obj_refr_size+0x170>
            child_res += pad_right;
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	4443      	add	r3, r8
 8008f7c:	b21b      	sxth	r3, r3
    if(child_res == LV_COORD_MIN) return self_w;
 8008f7e:	4a3d      	ldr	r2, [pc, #244]	; (8009074 <lv_obj_refr_size+0x40c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	f43f af29 	beq.w	8008dd8 <lv_obj_refr_size+0x170>
    else return LV_MAX(child_res, self_w);
 8008f86:	429d      	cmp	r5, r3
 8008f88:	bfb8      	it	lt
 8008f8a:	461d      	movlt	r5, r3
 8008f8c:	e724      	b.n	8008dd8 <lv_obj_refr_size+0x170>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8008f8e:	2201      	movs	r2, #1
 8008f90:	2100      	movs	r1, #0
 8008f92:	4638      	mov	r0, r7
 8008f94:	f001 ff8a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008f98:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8008f9a:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008f9e:	4298      	cmp	r0, r3
 8008fa0:	f47f af0a 	bne.w	8008db8 <lv_obj_refr_size+0x150>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8008fa4:	2232      	movs	r2, #50	; 0x32
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f001 ff7f 	bl	800aeac <lv_obj_get_style_prop>
 8008fae:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8008fb0:	2212      	movs	r2, #18
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f001 ff79 	bl	800aeac <lv_obj_get_style_prop>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 8008fba:	eb00 0508 	add.w	r5, r0, r8
 8008fbe:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8008fc0:	2213      	movs	r2, #19
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f001 ff71 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008fca:	b203      	sxth	r3, r0
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 8008fcc:	fa0f f888 	sxth.w	r8, r8
 8008fd0:	4443      	add	r3, r8
 8008fd2:	441d      	add	r5, r3
 8008fd4:	b22d      	sxth	r5, r5
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 8008fd6:	e6ff      	b.n	8008dd8 <lv_obj_refr_size+0x170>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8008fd8:	2204      	movs	r2, #4
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f001 ff65 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8008fe2:	fa0f fb80 	sxth.w	fp, r0
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8008fe6:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 8008fea:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008fee:	d047      	beq.n	8009080 <lv_obj_refr_size+0x418>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f7ff f905 	bl	8008200 <lv_obj_get_content_height>
 8008ff6:	9001      	str	r0, [sp, #4]
        if(h_is_content) {
 8008ff8:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8008ffc:	459b      	cmp	fp, r3
 8008ffe:	d163      	bne.n	80090c8 <lv_obj_refr_size+0x460>
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8009000:	2200      	movs	r2, #0
 8009002:	4611      	mov	r1, r2
 8009004:	4620      	mov	r0, r4
 8009006:	f000 ffa5 	bl	8009f54 <lv_obj_scroll_to_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800900a:	2232      	movs	r2, #50	; 0x32
 800900c:	2100      	movs	r1, #0
 800900e:	4620      	mov	r0, r4
 8009010:	f001 ff4c 	bl	800aeac <lv_obj_get_style_prop>
 8009014:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009016:	2210      	movs	r2, #16
 8009018:	2100      	movs	r1, #0
 800901a:	4620      	mov	r0, r4
 800901c:	f001 ff46 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8009020:	fa1f f989 	uxth.w	r9, r9
 8009024:	4448      	add	r0, r9
 8009026:	fa1f fa80 	uxth.w	sl, r0
 800902a:	f8cd a01c 	str.w	sl, [sp, #28]
 800902e:	b203      	sxth	r3, r0
 8009030:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009032:	2211      	movs	r2, #17
 8009034:	2100      	movs	r1, #0
 8009036:	4620      	mov	r0, r4
 8009038:	f001 ff38 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 800903c:	4481      	add	r9, r0
 800903e:	fa1f f989 	uxth.w	r9, r9
 8009042:	f8cd 9014 	str.w	r9, [sp, #20]
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8009046:	4620      	mov	r0, r4
 8009048:	f7ff f93c 	bl	80082c4 <lv_obj_get_self_height>
 800904c:	4653      	mov	r3, sl
 800904e:	444b      	add	r3, r9
 8009050:	4403      	add	r3, r0
 8009052:	b21b      	sxth	r3, r3
 8009054:	9302      	str	r3, [sp, #8]
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009056:	4620      	mov	r0, r4
 8009058:	f002 fe83 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800905c:	2800      	cmp	r0, #0
 800905e:	f000 809f 	beq.w	80091a0 <lv_obj_refr_size+0x538>
    lv_coord_t child_res = LV_COORD_MIN;
 8009062:	f8df a010 	ldr.w	sl, [pc, #16]	; 8009074 <lv_obj_refr_size+0x40c>
    for(i = 0; i < child_cnt; i++) {
 8009066:	f04f 0900 	mov.w	r9, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 800906a:	9503      	str	r5, [sp, #12]
 800906c:	9704      	str	r7, [sp, #16]
 800906e:	4607      	mov	r7, r0
 8009070:	e057      	b.n	8009122 <lv_obj_refr_size+0x4ba>
 8009072:	bf00      	nop
 8009074:	ffffe001 	.word	0xffffe001
 8009078:	51eb851f 	.word	0x51eb851f
 800907c:	00040001 	.word	0x00040001
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 8009080:	f42b 49c0 	bic.w	r9, fp, #24576	; 0x6000
 8009084:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
 8009088:	dcb2      	bgt.n	8008ff0 <lv_obj_refr_size+0x388>
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 800908a:	4638      	mov	r0, r7
 800908c:	f7ff f8b8 	bl	8008200 <lv_obj_get_content_height>
 8009090:	9001      	str	r0, [sp, #4]
        if(h_is_content) {
 8009092:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8009096:	459b      	cmp	fp, r3
 8009098:	d0b2      	beq.n	8009000 <lv_obj_refr_size+0x398>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 800909a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800909e:	f013 0f02 	tst.w	r3, #2
 80090a2:	f000 80f1 	beq.w	8009288 <lv_obj_refr_size+0x620>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 80090a6:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 80090aa:	bfc8      	it	gt
 80090ac:	f5c9 797a 	rsbgt	r9, r9, #1000	; 0x3e8
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	fb09 f903 	mul.w	r9, r9, r3
 80090b6:	4b8f      	ldr	r3, [pc, #572]	; (80092f4 <lv_obj_refr_size+0x68c>)
 80090b8:	fb83 2309 	smull	r2, r3, r3, r9
 80090bc:	ea4f 7be9 	mov.w	fp, r9, asr #31
 80090c0:	ebcb 1b63 	rsb	fp, fp, r3, asr #5
 80090c4:	fa0f fb8b 	sxth.w	fp, fp
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80090c8:	2205      	movs	r2, #5
 80090ca:	2100      	movs	r1, #0
 80090cc:	4620      	mov	r0, r4
 80090ce:	f001 feed 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80090d2:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80090d6:	2206      	movs	r2, #6
 80090d8:	2100      	movs	r1, #0
 80090da:	4620      	mov	r0, r4
 80090dc:	f001 fee6 	bl	800aeac <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	b202      	sxth	r2, r0
 80090e4:	4649      	mov	r1, r9
 80090e6:	4658      	mov	r0, fp
 80090e8:	f7ff fd80 	bl	8008bec <lv_clamp_height>
 80090ec:	4681      	mov	r9, r0
    if(w_is_content || h_is_content) {
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	d16e      	bne.n	80091d0 <lv_obj_refr_size+0x568>
 80090f2:	e073      	b.n	80091dc <lv_obj_refr_size+0x574>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80090f4:	2209      	movs	r2, #9
 80090f6:	2100      	movs	r1, #0
 80090f8:	4628      	mov	r0, r5
 80090fa:	f001 fed7 	bl	800aeac <lv_obj_get_style_prop>
            switch(align) {
 80090fe:	b2c0      	uxtb	r0, r0
 8009100:	2803      	cmp	r0, #3
 8009102:	d829      	bhi.n	8009158 <lv_obj_refr_size+0x4f0>
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009104:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8009108:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	3301      	adds	r3, #1
 8009110:	459a      	cmp	sl, r3
 8009112:	bfb8      	it	lt
 8009114:	469a      	movlt	sl, r3
 8009116:	fa0f fa8a 	sxth.w	sl, sl
    for(i = 0; i < child_cnt; i++) {
 800911a:	f109 0901 	add.w	r9, r9, #1
 800911e:	454f      	cmp	r7, r9
 8009120:	d031      	beq.n	8009186 <lv_obj_refr_size+0x51e>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 800912a:	4973      	ldr	r1, [pc, #460]	; (80092f8 <lv_obj_refr_size+0x690>)
 800912c:	4628      	mov	r0, r5
 800912e:	f7fd ffb8 	bl	80070a2 <lv_obj_has_flag_any>
 8009132:	2800      	cmp	r0, #0
 8009134:	d1f1      	bne.n	800911a <lv_obj_refr_size+0x4b2>
        if(!lv_obj_is_layout_positioned(child)) {
 8009136:	4628      	mov	r0, r5
 8009138:	f7fe ff72 	bl	8008020 <lv_obj_is_layout_positioned>
 800913c:	2800      	cmp	r0, #0
 800913e:	d0d9      	beq.n	80090f4 <lv_obj_refr_size+0x48c>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8009140:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8009144:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	3301      	adds	r3, #1
 800914c:	459a      	cmp	sl, r3
 800914e:	bfb8      	it	lt
 8009150:	469a      	movlt	sl, r3
 8009152:	fa0f fa8a 	sxth.w	sl, sl
 8009156:	e7e0      	b.n	800911a <lv_obj_refr_size+0x4b2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8009158:	2208      	movs	r2, #8
 800915a:	2100      	movs	r1, #0
 800915c:	4628      	mov	r0, r5
 800915e:	f001 fea5 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009162:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8009164:	2800      	cmp	r0, #0
 8009166:	d1d8      	bne.n	800911a <lv_obj_refr_size+0x4b2>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009168:	8b6b      	ldrh	r3, [r5, #26]
 800916a:	3301      	adds	r3, #1
 800916c:	8aea      	ldrh	r2, [r5, #22]
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	b29a      	uxth	r2, r3
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8009172:	b21b      	sxth	r3, r3
 8009174:	9906      	ldr	r1, [sp, #24]
 8009176:	440b      	add	r3, r1
 8009178:	459a      	cmp	sl, r3
 800917a:	dcce      	bgt.n	800911a <lv_obj_refr_size+0x4b2>
 800917c:	9b07      	ldr	r3, [sp, #28]
 800917e:	441a      	add	r2, r3
 8009180:	fa0f fa82 	sxth.w	sl, r2
 8009184:	e7c9      	b.n	800911a <lv_obj_refr_size+0x4b2>
    if(child_res != LV_COORD_MIN) {
 8009186:	9d03      	ldr	r5, [sp, #12]
 8009188:	9f04      	ldr	r7, [sp, #16]
 800918a:	4b5c      	ldr	r3, [pc, #368]	; (80092fc <lv_obj_refr_size+0x694>)
 800918c:	459a      	cmp	sl, r3
 800918e:	d007      	beq.n	80091a0 <lv_obj_refr_size+0x538>
        child_res += pad_bottom;
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	4453      	add	r3, sl
        return LV_MAX(child_res, self_h);
 8009194:	b21b      	sxth	r3, r3
 8009196:	9a02      	ldr	r2, [sp, #8]
 8009198:	429a      	cmp	r2, r3
 800919a:	bfb8      	it	lt
 800919c:	461a      	movlt	r2, r3
 800919e:	9202      	str	r2, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80091a0:	2205      	movs	r2, #5
 80091a2:	2100      	movs	r1, #0
 80091a4:	4620      	mov	r0, r4
 80091a6:	f001 fe81 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80091aa:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80091ae:	2206      	movs	r2, #6
 80091b0:	2100      	movs	r1, #0
 80091b2:	4620      	mov	r0, r4
 80091b4:	f001 fe7a 	bl	800aeac <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 80091b8:	9b01      	ldr	r3, [sp, #4]
 80091ba:	b202      	sxth	r2, r0
 80091bc:	4649      	mov	r1, r9
 80091be:	9802      	ldr	r0, [sp, #8]
 80091c0:	f7ff fd14 	bl	8008bec <lv_clamp_height>
 80091c4:	4681      	mov	r9, r0
    if(w_is_content || h_is_content) {
 80091c6:	b91e      	cbnz	r6, 80091d0 <lv_obj_refr_size+0x568>
 80091c8:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80091cc:	459b      	cmp	fp, r3
 80091ce:	d105      	bne.n	80091dc <lv_obj_refr_size+0x574>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 80091d0:	2300      	movs	r3, #0
 80091d2:	4642      	mov	r2, r8
 80091d4:	9900      	ldr	r1, [sp, #0]
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 fed0 	bl	8009f7c <lv_obj_scroll_to>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80091dc:	8b23      	ldrh	r3, [r4, #24]
 80091de:	3301      	adds	r3, #1
 80091e0:	8aa2      	ldrh	r2, [r4, #20]
 80091e2:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 80091e4:	b21b      	sxth	r3, r3
 80091e6:	429d      	cmp	r5, r3
 80091e8:	d106      	bne.n	80091f8 <lv_obj_refr_size+0x590>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80091ea:	8b63      	ldrh	r3, [r4, #26]
 80091ec:	3301      	adds	r3, #1
 80091ee:	8ae2      	ldrh	r2, [r4, #22]
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	b21b      	sxth	r3, r3
 80091f4:	454b      	cmp	r3, r9
 80091f6:	d07b      	beq.n	80092f0 <lv_obj_refr_size+0x688>
    lv_obj_invalidate(obj);
 80091f8:	4620      	mov	r0, r4
 80091fa:	f7ff fa1f 	bl	800863c <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 80091fe:	a90a      	add	r1, sp, #40	; 0x28
 8009200:	4620      	mov	r0, r4
 8009202:	f7fe ff76 	bl	80080f2 <lv_obj_get_coords>
    lv_obj_get_content_coords(parent, &parent_fit_area);
 8009206:	a908      	add	r1, sp, #32
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff f816 	bl	800823a <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 800920e:	2200      	movs	r2, #0
 8009210:	a908      	add	r1, sp, #32
 8009212:	a80a      	add	r0, sp, #40	; 0x28
 8009214:	f018 f89f 	bl	8021356 <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 8009218:	4606      	mov	r6, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d05b      	beq.n	80092d6 <lv_obj_refr_size+0x66e>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 800921e:	8ae0      	ldrh	r0, [r4, #22]
 8009220:	3801      	subs	r0, #1
 8009222:	4481      	add	r9, r0
 8009224:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8009228:	2216      	movs	r2, #22
 800922a:	2100      	movs	r1, #0
 800922c:	4620      	mov	r0, r4
 800922e:	f001 fe3d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8009232:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8009234:	2801      	cmp	r0, #1
 8009236:	d052      	beq.n	80092de <lv_obj_refr_size+0x676>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 8009238:	8aa0      	ldrh	r0, [r4, #20]
 800923a:	3801      	subs	r0, #1
 800923c:	4405      	add	r5, r0
 800923e:	8325      	strh	r5, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 8009240:	aa0a      	add	r2, sp, #40	; 0x28
 8009242:	2129      	movs	r1, #41	; 0x29
 8009244:	4620      	mov	r0, r4
 8009246:	f7fb f8bd 	bl	80043c4 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800924a:	4622      	mov	r2, r4
 800924c:	2122      	movs	r1, #34	; 0x22
 800924e:	4638      	mov	r0, r7
 8009250:	f7fb f8b8 	bl	80043c4 <lv_event_send>
    lv_obj_invalidate(obj);
 8009254:	4620      	mov	r0, r4
 8009256:	f7ff f9f1 	bl	800863c <lv_obj_invalidate>
    lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 800925a:	2100      	movs	r1, #0
 800925c:	4620      	mov	r0, r4
 800925e:	f001 fc8e 	bl	800ab7e <lv_obj_readjust_scroll>
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 8009262:	2200      	movs	r2, #0
 8009264:	a908      	add	r1, sp, #32
 8009266:	f104 0014 	add.w	r0, r4, #20
 800926a:	f018 f874 	bl	8021356 <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 800926e:	b906      	cbnz	r6, 8009272 <lv_obj_refr_size+0x60a>
 8009270:	b110      	cbz	r0, 8009278 <lv_obj_refr_size+0x610>
 8009272:	4638      	mov	r0, r7
 8009274:	f001 fc60 	bl	800ab38 <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 8009278:	4620      	mov	r0, r4
 800927a:	f7fe fd9b 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
    return true;
 800927e:	2601      	movs	r6, #1
}
 8009280:	4630      	mov	r0, r6
 8009282:	b00d      	add	sp, #52	; 0x34
 8009284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8009288:	2204      	movs	r2, #4
 800928a:	2100      	movs	r1, #0
 800928c:	4638      	mov	r0, r7
 800928e:	f001 fe0d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8009292:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 8009294:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8009298:	4298      	cmp	r0, r3
 800929a:	f47f af04 	bne.w	80090a6 <lv_obj_refr_size+0x43e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800929e:	2232      	movs	r2, #50	; 0x32
 80092a0:	2100      	movs	r1, #0
 80092a2:	4620      	mov	r0, r4
 80092a4:	f001 fe02 	bl	800aeac <lv_obj_get_style_prop>
 80092a8:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80092aa:	2210      	movs	r2, #16
 80092ac:	2100      	movs	r1, #0
 80092ae:	4620      	mov	r0, r4
 80092b0:	f001 fdfc 	bl	800aeac <lv_obj_get_style_prop>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 80092b4:	eb00 090a 	add.w	r9, r0, sl
 80092b8:	fa1f f989 	uxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80092bc:	2211      	movs	r2, #17
 80092be:	2100      	movs	r1, #0
 80092c0:	4620      	mov	r0, r4
 80092c2:	f001 fdf3 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80092c6:	b203      	sxth	r3, r0
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 80092c8:	fa0f fa8a 	sxth.w	sl, sl
 80092cc:	4453      	add	r3, sl
 80092ce:	444b      	add	r3, r9
 80092d0:	fa0f fb83 	sxth.w	fp, r3
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 80092d4:	e6f8      	b.n	80090c8 <lv_obj_refr_size+0x460>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 80092d6:	4638      	mov	r0, r7
 80092d8:	f001 fc2e 	bl	800ab38 <lv_obj_scrollbar_invalidate>
 80092dc:	e79f      	b.n	800921e <lv_obj_refr_size+0x5b6>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 80092de:	8b20      	ldrh	r0, [r4, #24]
 80092e0:	3001      	adds	r0, #1
 80092e2:	1b45      	subs	r5, r0, r5
 80092e4:	82a5      	strh	r5, [r4, #20]
 80092e6:	e7ab      	b.n	8009240 <lv_obj_refr_size+0x5d8>
    if(obj->w_layout && obj->h_layout) return false;
 80092e8:	2600      	movs	r6, #0
 80092ea:	e7c9      	b.n	8009280 <lv_obj_refr_size+0x618>
    if(parent == NULL) return false;
 80092ec:	2600      	movs	r6, #0
 80092ee:	e7c7      	b.n	8009280 <lv_obj_refr_size+0x618>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 80092f0:	2600      	movs	r6, #0
 80092f2:	e7c5      	b.n	8009280 <lv_obj_refr_size+0x618>
 80092f4:	51eb851f 	.word	0x51eb851f
 80092f8:	00040001 	.word	0x00040001
 80092fc:	ffffe001 	.word	0xffffe001

08009300 <layout_update_core>:
{
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	4605      	mov	r5, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009304:	f002 fd2d 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8009308:	b180      	cbz	r0, 800932c <layout_update_core+0x2c>
 800930a:	4606      	mov	r6, r0
 800930c:	2400      	movs	r4, #0
        lv_obj_t * child = obj->spec_attr->children[i];
 800930e:	68ab      	ldr	r3, [r5, #8]
 8009310:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 8009312:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009316:	f7ff fff3 	bl	8009300 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 800931a:	3401      	adds	r4, #1
 800931c:	42a6      	cmp	r6, r4
 800931e:	d1f6      	bne.n	800930e <layout_update_core+0xe>
    if(obj->layout_inv == 0) return;
 8009320:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009324:	f013 0f01 	tst.w	r3, #1
 8009328:	d112      	bne.n	8009350 <layout_update_core+0x50>
}
 800932a:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->layout_inv == 0) return;
 800932c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009330:	f013 0f01 	tst.w	r3, #1
 8009334:	d0f9      	beq.n	800932a <layout_update_core+0x2a>
    obj->layout_inv = 0;
 8009336:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800933a:	f36f 0300 	bfc	r3, #0, #1
 800933e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_refr_size(obj);
 8009342:	4628      	mov	r0, r5
 8009344:	f7ff fc90 	bl	8008c68 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8009348:	4628      	mov	r0, r5
 800934a:	f7ff fa37 	bl	80087bc <lv_obj_refr_pos>
    if(child_cnt > 0) {
 800934e:	e7ec      	b.n	800932a <layout_update_core+0x2a>
    obj->layout_inv = 0;
 8009350:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009354:	f36f 0300 	bfc	r3, #0, #1
 8009358:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_refr_size(obj);
 800935c:	4628      	mov	r0, r5
 800935e:	f7ff fc83 	bl	8008c68 <lv_obj_refr_size>
    lv_obj_refr_pos(obj);
 8009362:	4628      	mov	r0, r5
 8009364:	f7ff fa2a 	bl	80087bc <lv_obj_refr_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8009368:	220a      	movs	r2, #10
 800936a:	2100      	movs	r1, #0
 800936c:	4628      	mov	r0, r5
 800936e:	f001 fd9d 	bl	800aeac <lv_obj_get_style_prop>
        uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 8009372:	b280      	uxth	r0, r0
        if(layout_id > 0 && layout_id <= layout_cnt) {
 8009374:	2800      	cmp	r0, #0
 8009376:	d0d8      	beq.n	800932a <layout_update_core+0x2a>
 8009378:	4b08      	ldr	r3, [pc, #32]	; (800939c <layout_update_core+0x9c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4283      	cmp	r3, r0
 800937e:	d3d4      	bcc.n	800932a <layout_update_core+0x2a>
            void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 8009380:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8009384:	3801      	subs	r0, #1
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <layout_update_core+0xa0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
            LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 800938e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8009392:	6851      	ldr	r1, [r2, #4]
 8009394:	4628      	mov	r0, r5
 8009396:	4798      	blx	r3
 8009398:	e7c7      	b.n	800932a <layout_update_core+0x2a>
 800939a:	bf00      	nop
 800939c:	200025e0 	.word	0x200025e0
 80093a0:	20002968 	.word	0x20002968

080093a4 <lv_obj_update_layout>:
    if(mutex) {
 80093a4:	4b10      	ldr	r3, [pc, #64]	; (80093e8 <lv_obj_update_layout+0x44>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	b103      	cbz	r3, 80093ac <lv_obj_update_layout+0x8>
 80093aa:	4770      	bx	lr
{
 80093ac:	b510      	push	{r4, lr}
    mutex = true;
 80093ae:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <lv_obj_update_layout+0x44>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	701a      	strb	r2, [r3, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 80093b4:	f002 fc91 	bl	800bcda <lv_obj_get_screen>
 80093b8:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 80093ba:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80093be:	f013 0f02 	tst.w	r3, #2
 80093c2:	d00d      	beq.n	80093e0 <lv_obj_update_layout+0x3c>
        scr->scr_layout_inv = 0;
 80093c4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80093c8:	f36f 0341 	bfc	r3, #1, #1
 80093cc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        layout_update_core(scr);
 80093d0:	4620      	mov	r0, r4
 80093d2:	f7ff ff95 	bl	8009300 <layout_update_core>
    while(scr->scr_layout_inv) {
 80093d6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80093da:	f013 0f02 	tst.w	r3, #2
 80093de:	d1f1      	bne.n	80093c4 <lv_obj_update_layout+0x20>
    mutex = false;
 80093e0:	4b01      	ldr	r3, [pc, #4]	; (80093e8 <lv_obj_update_layout+0x44>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	701a      	strb	r2, [r3, #0]
}
 80093e6:	bd10      	pop	{r4, pc}
 80093e8:	200025e4 	.word	0x200025e4

080093ec <lv_obj_align_to>:
{
 80093ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	b085      	sub	sp, #20
 80093f2:	4681      	mov	r9, r0
 80093f4:	460e      	mov	r6, r1
 80093f6:	4693      	mov	fp, r2
 80093f8:	9301      	str	r3, [sp, #4]
    lv_obj_update_layout(obj);
 80093fa:	f7ff ffd3 	bl	80093a4 <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 80093fe:	2e00      	cmp	r6, #0
 8009400:	d051      	beq.n	80094a6 <lv_obj_align_to+0xba>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8009402:	4648      	mov	r0, r9
 8009404:	f002 fc94 	bl	800bd30 <lv_obj_get_parent>
 8009408:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 800940a:	2232      	movs	r2, #50	; 0x32
 800940c:	2100      	movs	r1, #0
 800940e:	f001 fd4d 	bl	800aeac <lv_obj_get_style_prop>
 8009412:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009414:	2212      	movs	r2, #18
 8009416:	2100      	movs	r1, #0
 8009418:	4640      	mov	r0, r8
 800941a:	f001 fd47 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 800941e:	b2bf      	uxth	r7, r7
 8009420:	eb07 0a00 	add.w	sl, r7, r0
 8009424:	fa0f fa8a 	sxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009428:	2210      	movs	r2, #16
 800942a:	2100      	movs	r1, #0
 800942c:	4640      	mov	r0, r8
 800942e:	f001 fd3d 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 8009432:	4407      	add	r7, r0
 8009434:	b23f      	sxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009436:	2232      	movs	r2, #50	; 0x32
 8009438:	2100      	movs	r1, #0
 800943a:	4630      	mov	r0, r6
 800943c:	f001 fd36 	bl	800aeac <lv_obj_get_style_prop>
 8009440:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009442:	2212      	movs	r2, #18
 8009444:	2100      	movs	r1, #0
 8009446:	4630      	mov	r0, r6
 8009448:	f001 fd30 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 800944c:	b2a4      	uxth	r4, r4
 800944e:	1825      	adds	r5, r4, r0
 8009450:	b2ab      	uxth	r3, r5
 8009452:	9302      	str	r3, [sp, #8]
 8009454:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009456:	2210      	movs	r2, #16
 8009458:	2100      	movs	r1, #0
 800945a:	4630      	mov	r0, r6
 800945c:	f001 fd26 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 8009460:	4404      	add	r4, r0
 8009462:	b2a3      	uxth	r3, r4
 8009464:	9303      	str	r3, [sp, #12]
 8009466:	b224      	sxth	r4, r4
    if(align == LV_ALIGN_DEFAULT) {
 8009468:	f1bb 0f00 	cmp.w	fp, #0
 800946c:	d020      	beq.n	80094b0 <lv_obj_align_to+0xc4>
    switch(align) {
 800946e:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009472:	2a14      	cmp	r2, #20
 8009474:	f200 8208 	bhi.w	8009888 <lv_obj_align_to+0x49c>
 8009478:	e8df f012 	tbh	[pc, r2, lsl #1]
 800947c:	00830022 	.word	0x00830022
 8009480:	00a70099 	.word	0x00a70099
 8009484:	00d800b5 	.word	0x00d800b5
 8009488:	010a00f3 	.word	0x010a00f3
 800948c:	012e0057 	.word	0x012e0057
 8009490:	01550137 	.word	0x01550137
 8009494:	016e0167 	.word	0x016e0167
 8009498:	019a018a 	.word	0x019a018a
 800949c:	01c101a3 	.word	0x01c101a3
 80094a0:	01da01d3 	.word	0x01da01d3
 80094a4:	01f6      	.short	0x01f6
    if(base == NULL) base = lv_obj_get_parent(obj);
 80094a6:	4648      	mov	r0, r9
 80094a8:	f002 fc42 	bl	800bd30 <lv_obj_get_parent>
 80094ac:	4606      	mov	r6, r0
 80094ae:	e7a8      	b.n	8009402 <lv_obj_align_to+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80094b0:	2216      	movs	r2, #22
 80094b2:	2100      	movs	r1, #0
 80094b4:	4630      	mov	r0, r6
 80094b6:	f001 fcf9 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80094ba:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 80094bc:	2801      	cmp	r0, #1
 80094be:	d076      	beq.n	80095ae <lv_obj_align_to+0x1c2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80094c0:	2216      	movs	r2, #22
 80094c2:	2100      	movs	r1, #0
 80094c4:	4640      	mov	r0, r8
 80094c6:	f001 fcf1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80094ca:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80094cc:	2801      	cmp	r0, #1
 80094ce:	f000 81de 	beq.w	800988e <lv_obj_align_to+0x4a2>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 80094d2:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	4418      	add	r0, r3
 80094da:	f9b8 b014 	ldrsh.w	fp, [r8, #20]
 80094de:	eba0 0b0b 	sub.w	fp, r0, fp
 80094e2:	4640      	mov	r0, r8
 80094e4:	f000 fac6 	bl	8009a74 <lv_obj_get_scroll_left>
 80094e8:	4458      	add	r0, fp
 80094ea:	eba0 0a0a 	sub.w	sl, r0, sl
 80094ee:	4455      	add	r5, sl
 80094f0:	b22d      	sxth	r5, r5
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 80094f2:	f9b6 0016 	ldrsh.w	r0, [r6, #22]
 80094f6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80094fa:	4430      	add	r0, r6
 80094fc:	f9b8 6016 	ldrsh.w	r6, [r8, #22]
 8009500:	1b86      	subs	r6, r0, r6
 8009502:	4640      	mov	r0, r8
 8009504:	f000 fa44 	bl	8009990 <lv_obj_get_scroll_top>
 8009508:	4430      	add	r0, r6
 800950a:	1bc7      	subs	r7, r0, r7
 800950c:	443c      	add	r4, r7
 800950e:	b2a4      	uxth	r4, r4
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 8009510:	2200      	movs	r2, #0
 8009512:	2101      	movs	r1, #1
 8009514:	4648      	mov	r0, r9
 8009516:	f002 fb7d 	bl	800bc14 <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x, y);
 800951a:	b222      	sxth	r2, r4
 800951c:	4629      	mov	r1, r5
 800951e:	4648      	mov	r0, r9
 8009520:	f7fe fd3c 	bl	8007f9c <lv_obj_set_pos>
}
 8009524:	b005      	add	sp, #20
 8009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 800952a:	4630      	mov	r0, r6
 800952c:	f7fe fe4b 	bl	80081c6 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009530:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8009534:	3301      	adds	r3, #1
 8009536:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	b21a      	sxth	r2, r3
 800953e:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8009542:	4415      	add	r5, r2
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	eba3 0565 	sub.w	r5, r3, r5, asr #1
 800954a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800954e:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8009552:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8009554:	4630      	mov	r0, r6
 8009556:	f7fe fe53 	bl	8008200 <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800955a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800955e:	3301      	adds	r3, #1
 8009560:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	b21a      	sxth	r2, r3
 8009568:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800956c:	4413      	add	r3, r2
 800956e:	9a03      	ldr	r2, [sp, #12]
 8009570:	eba2 0b63 	sub.w	fp, r2, r3, asr #1
 8009574:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009578:	eb0b 0b60 	add.w	fp, fp, r0, asr #1
 800957c:	fa0f f48b 	sxth.w	r4, fp
            break;
 8009580:	e79e      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 8009582:	4630      	mov	r0, r6
 8009584:	f7fe fe1f 	bl	80081c6 <lv_obj_get_content_width>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009588:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800958c:	3301      	adds	r3, #1
 800958e:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	b21a      	sxth	r2, r3
 8009596:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 800959a:	4415      	add	r5, r2
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	eba3 0565 	sub.w	r5, r3, r5, asr #1
 80095a2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80095a6:	eb05 0560 	add.w	r5, r5, r0, asr #1
 80095aa:	b22d      	sxth	r5, r5
            break;
 80095ac:	e788      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7fe fe09 	bl	80081c6 <lv_obj_get_content_width>
 80095b4:	9b02      	ldr	r3, [sp, #8]
 80095b6:	1e5d      	subs	r5, r3, #1
 80095b8:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 80095bc:	441d      	add	r5, r3
 80095be:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80095c2:	1aed      	subs	r5, r5, r3
 80095c4:	4405      	add	r5, r0
 80095c6:	b22d      	sxth	r5, r5
            break;
 80095c8:	e77a      	b.n	80094c0 <lv_obj_align_to+0xd4>
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7fe fe18 	bl	8008200 <lv_obj_get_content_height>
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	1e5c      	subs	r4, r3, #1
 80095d4:	f8b9 b016 	ldrh.w	fp, [r9, #22]
 80095d8:	445c      	add	r4, fp
 80095da:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80095de:	1ae4      	subs	r4, r4, r3
 80095e0:	4404      	add	r4, r0
 80095e2:	b224      	sxth	r4, r4
            break;
 80095e4:	e76c      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7fe fded 	bl	80081c6 <lv_obj_get_content_width>
 80095ec:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80095f0:	3301      	adds	r3, #1
 80095f2:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 80095f6:	1a9b      	subs	r3, r3, r2
 80095f8:	b21a      	sxth	r2, r3
 80095fa:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 80095fe:	4415      	add	r5, r2
 8009600:	9b02      	ldr	r3, [sp, #8]
 8009602:	eba3 0565 	sub.w	r5, r3, r5, asr #1
 8009606:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800960a:	eb05 0560 	add.w	r5, r5, r0, asr #1
 800960e:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8009610:	4630      	mov	r0, r6
 8009612:	f7fe fdf5 	bl	8008200 <lv_obj_get_content_height>
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	1e5c      	subs	r4, r3, #1
 800961a:	f8b9 b016 	ldrh.w	fp, [r9, #22]
 800961e:	445c      	add	r4, fp
 8009620:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8009624:	1ae4      	subs	r4, r4, r3
 8009626:	4404      	add	r4, r0
 8009628:	b224      	sxth	r4, r4
            break;
 800962a:	e749      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 800962c:	4630      	mov	r0, r6
 800962e:	f7fe fdca 	bl	80081c6 <lv_obj_get_content_width>
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	1e5d      	subs	r5, r3, #1
 8009636:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800963a:	441d      	add	r5, r3
 800963c:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8009640:	1aed      	subs	r5, r5, r3
 8009642:	4405      	add	r5, r0
 8009644:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 8009646:	4630      	mov	r0, r6
 8009648:	f7fe fdda 	bl	8008200 <lv_obj_get_content_height>
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	1e5c      	subs	r4, r3, #1
 8009650:	f8b9 b016 	ldrh.w	fp, [r9, #22]
 8009654:	445c      	add	r4, fp
 8009656:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800965a:	1ae4      	subs	r4, r4, r3
 800965c:	4404      	add	r4, r0
 800965e:	b224      	sxth	r4, r4
            break;
 8009660:	e72e      	b.n	80094c0 <lv_obj_align_to+0xd4>
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 8009662:	4630      	mov	r0, r6
 8009664:	f7fe fdcc 	bl	8008200 <lv_obj_get_content_height>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009668:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800966c:	3301      	adds	r3, #1
 800966e:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	b21a      	sxth	r2, r3
 8009676:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800967a:	4413      	add	r3, r2
 800967c:	9a03      	ldr	r2, [sp, #12]
 800967e:	eba2 0b63 	sub.w	fp, r2, r3, asr #1
 8009682:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009686:	eb0b 0b60 	add.w	fp, fp, r0, asr #1
 800968a:	fa0f f48b 	sxth.w	r4, fp
            break;
 800968e:	e717      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 8009690:	4630      	mov	r0, r6
 8009692:	f7fe fd98 	bl	80081c6 <lv_obj_get_content_width>
 8009696:	9b02      	ldr	r3, [sp, #8]
 8009698:	1e5d      	subs	r5, r3, #1
 800969a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 800969e:	441d      	add	r5, r3
 80096a0:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80096a4:	1aed      	subs	r5, r5, r3
 80096a6:	4405      	add	r5, r0
 80096a8:	b22d      	sxth	r5, r5
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7fe fda8 	bl	8008200 <lv_obj_get_content_height>
 80096b0:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80096b4:	3301      	adds	r3, #1
 80096b6:	f8b9 2016 	ldrh.w	r2, [r9, #22]
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	b21a      	sxth	r2, r3
 80096be:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80096c2:	4413      	add	r3, r2
 80096c4:	9a03      	ldr	r2, [sp, #12]
 80096c6:	eba2 0b63 	sub.w	fp, r2, r3, asr #1
 80096ca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80096ce:	eb0b 0b60 	add.w	fp, fp, r0, asr #1
 80096d2:	fa0f f48b 	sxth.w	r4, fp
            break;
 80096d6:	e6f3      	b.n	80094c0 <lv_obj_align_to+0xd4>
            y = -lv_obj_get_height(obj);
 80096d8:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 80096dc:	3c01      	subs	r4, #1
 80096de:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80096e2:	1ae4      	subs	r4, r4, r3
 80096e4:	b224      	sxth	r4, r4
            x = 0;
 80096e6:	2500      	movs	r5, #0
            break;
 80096e8:	e6ea      	b.n	80094c0 <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80096ea:	8b33      	ldrh	r3, [r6, #24]
 80096ec:	3301      	adds	r3, #1
 80096ee:	8ab2      	ldrh	r2, [r6, #20]
 80096f0:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80096f2:	b21a      	sxth	r2, r3
 80096f4:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 80096f8:	442a      	add	r2, r5
 80096fa:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80096fe:	3301      	adds	r3, #1
 8009700:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8009704:	1a5b      	subs	r3, r3, r1
 8009706:	b219      	sxth	r1, r3
 8009708:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 800970c:	440d      	add	r5, r1
 800970e:	106d      	asrs	r5, r5, #1
 8009710:	ebc5 0562 	rsb	r5, r5, r2, asr #1
 8009714:	b22d      	sxth	r5, r5
            y = -lv_obj_get_height(obj);
 8009716:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 800971a:	3c01      	subs	r4, #1
 800971c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8009720:	1ae4      	subs	r4, r4, r3
 8009722:	b224      	sxth	r4, r4
            break;
 8009724:	e6cc      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009726:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 800972a:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800972e:	1aed      	subs	r5, r5, r3
 8009730:	8b33      	ldrh	r3, [r6, #24]
 8009732:	441d      	add	r5, r3
 8009734:	8ab3      	ldrh	r3, [r6, #20]
 8009736:	1aed      	subs	r5, r5, r3
 8009738:	b22d      	sxth	r5, r5
            y = -lv_obj_get_height(obj);
 800973a:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 800973e:	3c01      	subs	r4, #1
 8009740:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8009744:	1ae4      	subs	r4, r4, r3
 8009746:	b224      	sxth	r4, r4
            break;
 8009748:	e6ba      	b.n	80094c0 <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800974a:	8b74      	ldrh	r4, [r6, #26]
 800974c:	3401      	adds	r4, #1
 800974e:	8af3      	ldrh	r3, [r6, #22]
 8009750:	1ae4      	subs	r4, r4, r3
 8009752:	b224      	sxth	r4, r4
            x = 0;
 8009754:	2500      	movs	r5, #0
            break;
 8009756:	e6b3      	b.n	80094c0 <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009758:	8b33      	ldrh	r3, [r6, #24]
 800975a:	3301      	adds	r3, #1
 800975c:	8ab2      	ldrh	r2, [r6, #20]
 800975e:	1a9b      	subs	r3, r3, r2
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8009760:	b21a      	sxth	r2, r3
 8009762:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 8009766:	442a      	add	r2, r5
 8009768:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 800976c:	3301      	adds	r3, #1
 800976e:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8009772:	1a5b      	subs	r3, r3, r1
 8009774:	b219      	sxth	r1, r3
 8009776:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 800977a:	440d      	add	r5, r1
 800977c:	106d      	asrs	r5, r5, #1
 800977e:	ebc5 0562 	rsb	r5, r5, r2, asr #1
 8009782:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009784:	8b74      	ldrh	r4, [r6, #26]
 8009786:	3401      	adds	r4, #1
 8009788:	8af3      	ldrh	r3, [r6, #22]
 800978a:	1ae4      	subs	r4, r4, r3
 800978c:	b224      	sxth	r4, r4
            break;
 800978e:	e697      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8009790:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 8009794:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8009798:	1aed      	subs	r5, r5, r3
 800979a:	8b33      	ldrh	r3, [r6, #24]
 800979c:	441d      	add	r5, r3
 800979e:	8ab3      	ldrh	r3, [r6, #20]
 80097a0:	1aed      	subs	r5, r5, r3
 80097a2:	b22d      	sxth	r5, r5
 80097a4:	8b74      	ldrh	r4, [r6, #26]
 80097a6:	3401      	adds	r4, #1
 80097a8:	8af3      	ldrh	r3, [r6, #22]
 80097aa:	1ae4      	subs	r4, r4, r3
 80097ac:	b224      	sxth	r4, r4
            break;
 80097ae:	e687      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = -lv_obj_get_width(obj);
 80097b0:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 80097b4:	3d01      	subs	r5, #1
 80097b6:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80097ba:	1aed      	subs	r5, r5, r3
 80097bc:	b22d      	sxth	r5, r5
            y = 0;
 80097be:	2400      	movs	r4, #0
            break;
 80097c0:	e67e      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = -lv_obj_get_width(obj);
 80097c2:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 80097c6:	3d01      	subs	r5, #1
 80097c8:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80097cc:	1aed      	subs	r5, r5, r3
 80097ce:	b22d      	sxth	r5, r5
 80097d0:	8b73      	ldrh	r3, [r6, #26]
 80097d2:	3301      	adds	r3, #1
 80097d4:	8af2      	ldrh	r2, [r6, #22]
 80097d6:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80097d8:	b21a      	sxth	r2, r3
 80097da:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 80097de:	4422      	add	r2, r4
 80097e0:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 80097e4:	3301      	adds	r3, #1
 80097e6:	f8b9 1016 	ldrh.w	r1, [r9, #22]
 80097ea:	1a5b      	subs	r3, r3, r1
 80097ec:	b219      	sxth	r1, r3
 80097ee:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 80097f2:	440c      	add	r4, r1
 80097f4:	1064      	asrs	r4, r4, #1
 80097f6:	ebc4 0462 	rsb	r4, r4, r2, asr #1
 80097fa:	b224      	sxth	r4, r4
            break;
 80097fc:	e660      	b.n	80094c0 <lv_obj_align_to+0xd4>
            x = -lv_obj_get_width(obj);
 80097fe:	f8b9 5014 	ldrh.w	r5, [r9, #20]
 8009802:	3d01      	subs	r5, #1
 8009804:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 8009808:	1aed      	subs	r5, r5, r3
 800980a:	b22d      	sxth	r5, r5
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800980c:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 8009810:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 8009814:	1ae4      	subs	r4, r4, r3
 8009816:	8b73      	ldrh	r3, [r6, #26]
 8009818:	441c      	add	r4, r3
 800981a:	8af3      	ldrh	r3, [r6, #22]
 800981c:	1ae4      	subs	r4, r4, r3
 800981e:	b224      	sxth	r4, r4
            break;
 8009820:	e64e      	b.n	80094c0 <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009822:	8b35      	ldrh	r5, [r6, #24]
 8009824:	3501      	adds	r5, #1
 8009826:	8ab3      	ldrh	r3, [r6, #20]
 8009828:	1aed      	subs	r5, r5, r3
 800982a:	b22d      	sxth	r5, r5
            y = 0;
 800982c:	2400      	movs	r4, #0
            break;
 800982e:	e647      	b.n	80094c0 <lv_obj_align_to+0xd4>
 8009830:	8b35      	ldrh	r5, [r6, #24]
 8009832:	3501      	adds	r5, #1
 8009834:	8ab3      	ldrh	r3, [r6, #20]
 8009836:	1aed      	subs	r5, r5, r3
 8009838:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800983a:	8b73      	ldrh	r3, [r6, #26]
 800983c:	3301      	adds	r3, #1
 800983e:	8af2      	ldrh	r2, [r6, #22]
 8009840:	1a9b      	subs	r3, r3, r2
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8009842:	b21a      	sxth	r2, r3
 8009844:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 8009848:	4422      	add	r2, r4
 800984a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800984e:	3301      	adds	r3, #1
 8009850:	f8b9 1016 	ldrh.w	r1, [r9, #22]
 8009854:	1a5b      	subs	r3, r3, r1
 8009856:	b219      	sxth	r1, r3
 8009858:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 800985c:	440c      	add	r4, r1
 800985e:	1064      	asrs	r4, r4, #1
 8009860:	ebc4 0462 	rsb	r4, r4, r2, asr #1
 8009864:	b224      	sxth	r4, r4
            break;
 8009866:	e62b      	b.n	80094c0 <lv_obj_align_to+0xd4>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009868:	8b35      	ldrh	r5, [r6, #24]
 800986a:	3501      	adds	r5, #1
 800986c:	8ab3      	ldrh	r3, [r6, #20]
 800986e:	1aed      	subs	r5, r5, r3
 8009870:	b22d      	sxth	r5, r5
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8009872:	f8b9 4016 	ldrh.w	r4, [r9, #22]
 8009876:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800987a:	1ae4      	subs	r4, r4, r3
 800987c:	8b73      	ldrh	r3, [r6, #26]
 800987e:	441c      	add	r4, r3
 8009880:	8af3      	ldrh	r3, [r6, #22]
 8009882:	1ae4      	subs	r4, r4, r3
 8009884:	b224      	sxth	r4, r4
            break;
 8009886:	e61b      	b.n	80094c0 <lv_obj_align_to+0xd4>
    lv_coord_t y = 0;
 8009888:	2400      	movs	r4, #0
    lv_coord_t x = 0;
 800988a:	4625      	mov	r5, r4
 800988c:	e618      	b.n	80094c0 <lv_obj_align_to+0xd4>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 800988e:	f9b6 0014 	ldrsh.w	r0, [r6, #20]
 8009892:	9b01      	ldr	r3, [sp, #4]
 8009894:	4418      	add	r0, r3
 8009896:	f9b8 b014 	ldrsh.w	fp, [r8, #20]
 800989a:	eba0 0b0b 	sub.w	fp, r0, fp
 800989e:	4640      	mov	r0, r8
 80098a0:	f000 f95c 	bl	8009b5c <lv_obj_get_scroll_right>
 80098a4:	4458      	add	r0, fp
 80098a6:	eba0 0a0a 	sub.w	sl, r0, sl
 80098aa:	4455      	add	r5, sl
 80098ac:	b22d      	sxth	r5, r5
 80098ae:	e620      	b.n	80094f2 <lv_obj_align_to+0x106>

080098b0 <scroll_anim_ready_cb>:
{
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 80098b0:	b508      	push	{r3, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 80098b2:	2200      	movs	r2, #0
 80098b4:	210a      	movs	r1, #10
 80098b6:	6800      	ldr	r0, [r0, #0]
 80098b8:	f7fa fd84 	bl	80043c4 <lv_event_send>
}
 80098bc:	bd08      	pop	{r3, pc}

080098be <lv_obj_set_scrollbar_mode>:
{
 80098be:	b538      	push	{r3, r4, r5, lr}
 80098c0:	4604      	mov	r4, r0
 80098c2:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 80098c4:	f7fd fe0e 	bl	80074e4 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 80098c8:	68a2      	ldr	r2, [r4, #8]
 80098ca:	7e13      	ldrb	r3, [r2, #24]
 80098cc:	f003 0303 	and.w	r3, r3, #3
 80098d0:	42ab      	cmp	r3, r5
 80098d2:	d006      	beq.n	80098e2 <lv_obj_set_scrollbar_mode+0x24>
    obj->spec_attr->scrollbar_mode = mode;
 80098d4:	7e13      	ldrb	r3, [r2, #24]
 80098d6:	f365 0301 	bfi	r3, r5, #0, #2
 80098da:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 80098dc:	4620      	mov	r0, r4
 80098de:	f7fe fead 	bl	800863c <lv_obj_invalidate>
}
 80098e2:	bd38      	pop	{r3, r4, r5, pc}

080098e4 <lv_obj_set_scroll_dir>:
{
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4605      	mov	r5, r0
 80098e8:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 80098ea:	f7fd fdfb 	bl	80074e4 <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 80098ee:	68aa      	ldr	r2, [r5, #8]
 80098f0:	7e53      	ldrb	r3, [r2, #25]
 80098f2:	f003 030f 	and.w	r3, r3, #15
 80098f6:	42a3      	cmp	r3, r4
 80098f8:	d003      	beq.n	8009902 <lv_obj_set_scroll_dir+0x1e>
        obj->spec_attr->scroll_dir = dir;
 80098fa:	7e53      	ldrb	r3, [r2, #25]
 80098fc:	f364 0303 	bfi	r3, r4, #0, #4
 8009900:	7653      	strb	r3, [r2, #25]
}
 8009902:	bd38      	pop	{r3, r4, r5, pc}

08009904 <lv_obj_set_scroll_snap_x>:
{
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4605      	mov	r5, r0
 8009908:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 800990a:	f7fd fdeb 	bl	80074e4 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 800990e:	68ab      	ldr	r3, [r5, #8]
 8009910:	7e1a      	ldrb	r2, [r3, #24]
 8009912:	f364 0283 	bfi	r2, r4, #2, #2
 8009916:	761a      	strb	r2, [r3, #24]
}
 8009918:	bd38      	pop	{r3, r4, r5, pc}

0800991a <lv_obj_set_scroll_snap_y>:
{
 800991a:	b538      	push	{r3, r4, r5, lr}
 800991c:	4605      	mov	r5, r0
 800991e:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 8009920:	f7fd fde0 	bl	80074e4 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 8009924:	68ab      	ldr	r3, [r5, #8]
 8009926:	7e1a      	ldrb	r2, [r3, #24]
 8009928:	f364 1205 	bfi	r2, r4, #4, #2
 800992c:	761a      	strb	r2, [r3, #24]
}
 800992e:	bd38      	pop	{r3, r4, r5, pc}

08009930 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 8009930:	6883      	ldr	r3, [r0, #8]
 8009932:	b11b      	cbz	r3, 800993c <lv_obj_get_scrollbar_mode+0xc>
 8009934:	7e18      	ldrb	r0, [r3, #24]
 8009936:	f000 0003 	and.w	r0, r0, #3
 800993a:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 800993c:	2003      	movs	r0, #3
}
 800993e:	4770      	bx	lr

08009940 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 8009940:	6883      	ldr	r3, [r0, #8]
 8009942:	b11b      	cbz	r3, 800994c <lv_obj_get_scroll_dir+0xc>
 8009944:	7e58      	ldrb	r0, [r3, #25]
 8009946:	f000 000f 	and.w	r0, r0, #15
 800994a:	4770      	bx	lr
    else return LV_DIR_ALL;
 800994c:	200f      	movs	r0, #15
}
 800994e:	4770      	bx	lr

08009950 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 8009950:	6883      	ldr	r3, [r0, #8]
 8009952:	b11b      	cbz	r3, 800995c <lv_obj_get_scroll_snap_x+0xc>
 8009954:	7e18      	ldrb	r0, [r3, #24]
 8009956:	f3c0 0081 	ubfx	r0, r0, #2, #2
 800995a:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 800995c:	2000      	movs	r0, #0
}
 800995e:	4770      	bx	lr

08009960 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 8009960:	6883      	ldr	r3, [r0, #8]
 8009962:	b11b      	cbz	r3, 800996c <lv_obj_get_scroll_snap_y+0xc>
 8009964:	7e18      	ldrb	r0, [r3, #24]
 8009966:	f3c0 1001 	ubfx	r0, r0, #4, #2
 800996a:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 800996c:	2000      	movs	r0, #0
}
 800996e:	4770      	bx	lr

08009970 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 8009970:	6883      	ldr	r3, [r0, #8]
 8009972:	b11b      	cbz	r3, 800997c <lv_obj_get_scroll_x+0xc>
    return -obj->spec_attr->scroll.x;
 8009974:	8a18      	ldrh	r0, [r3, #16]
 8009976:	4240      	negs	r0, r0
 8009978:	b200      	sxth	r0, r0
 800997a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800997c:	2000      	movs	r0, #0
}
 800997e:	4770      	bx	lr

08009980 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 8009980:	6883      	ldr	r3, [r0, #8]
 8009982:	b11b      	cbz	r3, 800998c <lv_obj_get_scroll_y+0xc>
    return -obj->spec_attr->scroll.y;
 8009984:	8a58      	ldrh	r0, [r3, #18]
 8009986:	4240      	negs	r0, r0
 8009988:	b200      	sxth	r0, r0
 800998a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800998c:	2000      	movs	r0, #0
}
 800998e:	4770      	bx	lr

08009990 <lv_obj_get_scroll_top>:
    if(obj->spec_attr == NULL) return 0;
 8009990:	6883      	ldr	r3, [r0, #8]
 8009992:	b11b      	cbz	r3, 800999c <lv_obj_get_scroll_top+0xc>
    return -obj->spec_attr->scroll.y;
 8009994:	8a58      	ldrh	r0, [r3, #18]
 8009996:	4240      	negs	r0, r0
 8009998:	b200      	sxth	r0, r0
 800999a:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800999c:	2000      	movs	r0, #0
}
 800999e:	4770      	bx	lr

080099a0 <lv_obj_get_scroll_bottom>:
{
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80099a6:	f002 f9dc 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d049      	beq.n	8009a42 <lv_obj_get_scroll_bottom+0xa2>
 80099ae:	4680      	mov	r8, r0
 80099b0:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 80099b2:	4f2e      	ldr	r7, [pc, #184]	; (8009a6c <lv_obj_get_scroll_bottom+0xcc>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80099b4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009a70 <lv_obj_get_scroll_bottom+0xd0>
 80099b8:	e007      	b.n	80099ca <lv_obj_get_scroll_bottom+0x2a>
        child_res = LV_MAX(child_res, child->coords.y2);
 80099ba:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 80099be:	429f      	cmp	r7, r3
 80099c0:	bfb8      	it	lt
 80099c2:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 80099c4:	3401      	adds	r4, #1
 80099c6:	45a0      	cmp	r8, r4
 80099c8:	d00a      	beq.n	80099e0 <lv_obj_get_scroll_bottom+0x40>
        lv_obj_t * child = obj->spec_attr->children[i];
 80099ca:	68b3      	ldr	r3, [r6, #8]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80099d2:	4649      	mov	r1, r9
 80099d4:	4628      	mov	r0, r5
 80099d6:	f7fd fb64 	bl	80070a2 <lv_obj_has_flag_any>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d0ed      	beq.n	80099ba <lv_obj_get_scroll_bottom+0x1a>
 80099de:	e7f1      	b.n	80099c4 <lv_obj_get_scroll_bottom+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80099e0:	2210      	movs	r2, #16
 80099e2:	2100      	movs	r1, #0
 80099e4:	4630      	mov	r0, r6
 80099e6:	f001 fa61 	bl	800aeac <lv_obj_get_style_prop>
 80099ea:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80099ec:	2211      	movs	r2, #17
 80099ee:	2100      	movs	r1, #0
 80099f0:	4630      	mov	r0, r6
 80099f2:	f001 fa5b 	bl	800aeac <lv_obj_get_style_prop>
 80099f6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80099f8:	2232      	movs	r2, #50	; 0x32
 80099fa:	2100      	movs	r1, #0
 80099fc:	4630      	mov	r0, r6
 80099fe:	f001 fa55 	bl	800aeac <lv_obj_get_style_prop>
 8009a02:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
 8009a04:	4b19      	ldr	r3, [pc, #100]	; (8009a6c <lv_obj_get_scroll_bottom+0xcc>)
 8009a06:	429f      	cmp	r7, r3
 8009a08:	d004      	beq.n	8009a14 <lv_obj_get_scroll_bottom+0x74>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 8009a0a:	1823      	adds	r3, r4, r0
 8009a0c:	8b72      	ldrh	r2, [r6, #26]
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	441f      	add	r7, r3
 8009a12:	b23f      	sxth	r7, r7
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7fe fc55 	bl	80082c4 <lv_obj_get_self_height>
 8009a1a:	4681      	mov	r9, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7fe fbcc 	bl	80081ba <lv_obj_get_height>
 8009a22:	4444      	add	r4, r8
 8009a24:	444c      	add	r4, r9
 8009a26:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8009a2a:	1a24      	subs	r4, r4, r0
 8009a2c:	b2a4      	uxth	r4, r4
    self_h -= lv_obj_get_scroll_y(obj);
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7ff ffa6 	bl	8009980 <lv_obj_get_scroll_y>
 8009a34:	1a20      	subs	r0, r4, r0
    return LV_MAX(child_res, self_h);
 8009a36:	b200      	sxth	r0, r0
 8009a38:	42b8      	cmp	r0, r7
 8009a3a:	bfb8      	it	lt
 8009a3c:	4638      	movlt	r0, r7
}
 8009a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009a42:	2210      	movs	r2, #16
 8009a44:	2100      	movs	r1, #0
 8009a46:	4630      	mov	r0, r6
 8009a48:	f001 fa30 	bl	800aeac <lv_obj_get_style_prop>
 8009a4c:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009a4e:	2211      	movs	r2, #17
 8009a50:	2100      	movs	r1, #0
 8009a52:	4630      	mov	r0, r6
 8009a54:	f001 fa2a 	bl	800aeac <lv_obj_get_style_prop>
 8009a58:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009a5a:	2232      	movs	r2, #50	; 0x32
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f001 fa24 	bl	800aeac <lv_obj_get_style_prop>
 8009a64:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
 8009a66:	4f01      	ldr	r7, [pc, #4]	; (8009a6c <lv_obj_get_scroll_bottom+0xcc>)
 8009a68:	e7d4      	b.n	8009a14 <lv_obj_get_scroll_bottom+0x74>
 8009a6a:	bf00      	nop
 8009a6c:	ffffe001 	.word	0xffffe001
 8009a70:	00040001 	.word	0x00040001

08009a74 <lv_obj_get_scroll_left>:
{
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8009a7c:	2216      	movs	r2, #22
 8009a7e:	2100      	movs	r1, #0
 8009a80:	f001 fa14 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8009a84:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8009a86:	2801      	cmp	r0, #1
 8009a88:	d008      	beq.n	8009a9c <lv_obj_get_scroll_left+0x28>
        if(obj->spec_attr == NULL) return 0;
 8009a8a:	68a3      	ldr	r3, [r4, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d05e      	beq.n	8009b4e <lv_obj_get_scroll_left+0xda>
        return -obj->spec_attr->scroll.x;
 8009a90:	8a18      	ldrh	r0, [r3, #16]
 8009a92:	4240      	negs	r0, r0
 8009a94:	b200      	sxth	r0, r0
}
 8009a96:	b003      	add	sp, #12
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009a9c:	2213      	movs	r2, #19
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f001 fa03 	bl	800aeac <lv_obj_get_style_prop>
 8009aa6:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009aa8:	2212      	movs	r2, #18
 8009aaa:	2100      	movs	r1, #0
 8009aac:	4620      	mov	r0, r4
 8009aae:	f001 f9fd 	bl	800aeac <lv_obj_get_style_prop>
 8009ab2:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009ab4:	2232      	movs	r2, #50	; 0x32
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f001 f9f7 	bl	800aeac <lv_obj_get_style_prop>
 8009abe:	4682      	mov	sl, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f002 f94e 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d03c      	beq.n	8009b46 <lv_obj_get_scroll_left+0xd2>
    lv_coord_t x1 = LV_COORD_MAX;
 8009acc:	f641 77ff 	movw	r7, #8191	; 0x1fff
    for(i = 0; i < child_cnt; i++) {
 8009ad0:	2500      	movs	r5, #0
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009ad2:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8009b54 <lv_obj_get_scroll_left+0xe0>
 8009ad6:	e007      	b.n	8009ae8 <lv_obj_get_scroll_left+0x74>
        x1 = LV_MIN(x1, child->coords.x1);
 8009ad8:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8009adc:	429f      	cmp	r7, r3
 8009ade:	bfa8      	it	ge
 8009ae0:	461f      	movge	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8009ae2:	3501      	adds	r5, #1
 8009ae4:	45a8      	cmp	r8, r5
 8009ae6:	d00a      	beq.n	8009afe <lv_obj_get_scroll_left+0x8a>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009ae8:	68a3      	ldr	r3, [r4, #8]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009af0:	4649      	mov	r1, r9
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7fd fad5 	bl	80070a2 <lv_obj_has_flag_any>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d0ed      	beq.n	8009ad8 <lv_obj_get_scroll_left+0x64>
 8009afc:	e7f1      	b.n	8009ae2 <lv_obj_get_scroll_left+0x6e>
    if(x1 != LV_COORD_MAX) {
 8009afe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8009b02:	429f      	cmp	r7, r3
 8009b04:	d021      	beq.n	8009b4a <lv_obj_get_scroll_left+0xd6>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 8009b06:	eb0b 000a 	add.w	r0, fp, sl
 8009b0a:	8aa3      	ldrh	r3, [r4, #20]
 8009b0c:	4418      	add	r0, r3
 8009b0e:	1bc7      	subs	r7, r0, r7
 8009b10:	b23f      	sxth	r7, r7
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 8009b12:	4620      	mov	r0, r4
 8009b14:	f7fe fbc4 	bl	80082a0 <lv_obj_get_self_width>
 8009b18:	4606      	mov	r6, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7fe fb47 	bl	80081ae <lv_obj_get_width>
 8009b20:	4605      	mov	r5, r0
 8009b22:	9b01      	ldr	r3, [sp, #4]
 8009b24:	445b      	add	r3, fp
 8009b26:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 8009b2a:	44b2      	add	sl, r6
 8009b2c:	fa1f fa8a 	uxth.w	sl, sl
    self_w += lv_obj_get_scroll_x(obj);
 8009b30:	4620      	mov	r0, r4
 8009b32:	f7ff ff1d 	bl	8009970 <lv_obj_get_scroll_x>
 8009b36:	4482      	add	sl, r0
 8009b38:	ebaa 0005 	sub.w	r0, sl, r5
    return LV_MAX(child_res, self_w);
 8009b3c:	b200      	sxth	r0, r0
 8009b3e:	42b8      	cmp	r0, r7
 8009b40:	bfb8      	it	lt
 8009b42:	4638      	movlt	r0, r7
 8009b44:	e7a7      	b.n	8009a96 <lv_obj_get_scroll_left+0x22>
        child_res = LV_COORD_MIN;
 8009b46:	4f04      	ldr	r7, [pc, #16]	; (8009b58 <lv_obj_get_scroll_left+0xe4>)
 8009b48:	e7e3      	b.n	8009b12 <lv_obj_get_scroll_left+0x9e>
 8009b4a:	4f03      	ldr	r7, [pc, #12]	; (8009b58 <lv_obj_get_scroll_left+0xe4>)
 8009b4c:	e7e1      	b.n	8009b12 <lv_obj_get_scroll_left+0x9e>
        if(obj->spec_attr == NULL) return 0;
 8009b4e:	2000      	movs	r0, #0
 8009b50:	e7a1      	b.n	8009a96 <lv_obj_get_scroll_left+0x22>
 8009b52:	bf00      	nop
 8009b54:	00040001 	.word	0x00040001
 8009b58:	ffffe001 	.word	0xffffe001

08009b5c <lv_obj_get_scroll_right>:
{
 8009b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b60:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8009b62:	2216      	movs	r2, #22
 8009b64:	2100      	movs	r1, #0
 8009b66:	f001 f9a1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8009b6a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8009b6c:	2801      	cmp	r0, #1
 8009b6e:	d105      	bne.n	8009b7c <lv_obj_get_scroll_right+0x20>
        if(obj->spec_attr == NULL) return 0;
 8009b70:	68ab      	ldr	r3, [r5, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d052      	beq.n	8009c1c <lv_obj_get_scroll_right+0xc0>
        return obj->spec_attr->scroll.x;
 8009b76:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
 8009b7a:	e04d      	b.n	8009c18 <lv_obj_get_scroll_right+0xbc>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f002 f8f0 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 8009b82:	4680      	mov	r8, r0
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d04b      	beq.n	8009c20 <lv_obj_get_scroll_right+0xc4>
 8009b88:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8009b8a:	4f2f      	ldr	r7, [pc, #188]	; (8009c48 <lv_obj_get_scroll_right+0xec>)
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009b8c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8009c4c <lv_obj_get_scroll_right+0xf0>
 8009b90:	e007      	b.n	8009ba2 <lv_obj_get_scroll_right+0x46>
        child_res = LV_MAX(child_res, child->coords.x2);
 8009b92:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8009b96:	429f      	cmp	r7, r3
 8009b98:	bfb8      	it	lt
 8009b9a:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 8009b9c:	3401      	adds	r4, #1
 8009b9e:	45a0      	cmp	r8, r4
 8009ba0:	d00a      	beq.n	8009bb8 <lv_obj_get_scroll_right+0x5c>
        lv_obj_t * child = obj->spec_attr->children[i];
 8009ba2:	68ab      	ldr	r3, [r5, #8]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8009baa:	4649      	mov	r1, r9
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7fd fa78 	bl	80070a2 <lv_obj_has_flag_any>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0ed      	beq.n	8009b92 <lv_obj_get_scroll_right+0x36>
 8009bb6:	e7f1      	b.n	8009b9c <lv_obj_get_scroll_right+0x40>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009bb8:	2213      	movs	r2, #19
 8009bba:	2100      	movs	r1, #0
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f001 f975 	bl	800aeac <lv_obj_get_style_prop>
 8009bc2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009bc4:	2212      	movs	r2, #18
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f001 f96f 	bl	800aeac <lv_obj_get_style_prop>
 8009bce:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009bd0:	2232      	movs	r2, #50	; 0x32
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f001 f969 	bl	800aeac <lv_obj_get_style_prop>
 8009bda:	4680      	mov	r8, r0
    if(child_res != LV_COORD_MIN) {
 8009bdc:	4b1a      	ldr	r3, [pc, #104]	; (8009c48 <lv_obj_get_scroll_right+0xec>)
 8009bde:	429f      	cmp	r7, r3
 8009be0:	d005      	beq.n	8009bee <lv_obj_get_scroll_right+0x92>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 8009be2:	eb09 0300 	add.w	r3, r9, r0
 8009be6:	8b28      	ldrh	r0, [r5, #24]
 8009be8:	1a1b      	subs	r3, r3, r0
 8009bea:	441f      	add	r7, r3
 8009bec:	b23f      	sxth	r7, r7
    self_w = lv_obj_get_self_width(obj);
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7fe fb56 	bl	80082a0 <lv_obj_get_self_width>
 8009bf4:	4682      	mov	sl, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f7fe fad9 	bl	80081ae <lv_obj_get_width>
 8009bfc:	444c      	add	r4, r9
 8009bfe:	4454      	add	r4, sl
 8009c00:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 8009c04:	1a24      	subs	r4, r4, r0
 8009c06:	b2a4      	uxth	r4, r4
    self_w -= lv_obj_get_scroll_x(obj);
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f7ff feb1 	bl	8009970 <lv_obj_get_scroll_x>
 8009c0e:	1a20      	subs	r0, r4, r0
    return LV_MAX(child_res, self_w);
 8009c10:	b200      	sxth	r0, r0
 8009c12:	42b8      	cmp	r0, r7
 8009c14:	bfb8      	it	lt
 8009c16:	4638      	movlt	r0, r7
}
 8009c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(obj->spec_attr == NULL) return 0;
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7fb      	b.n	8009c18 <lv_obj_get_scroll_right+0xbc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8009c20:	2213      	movs	r2, #19
 8009c22:	2100      	movs	r1, #0
 8009c24:	4628      	mov	r0, r5
 8009c26:	f001 f941 	bl	800aeac <lv_obj_get_style_prop>
 8009c2a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8009c2c:	2212      	movs	r2, #18
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4628      	mov	r0, r5
 8009c32:	f001 f93b 	bl	800aeac <lv_obj_get_style_prop>
 8009c36:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009c38:	2232      	movs	r2, #50	; 0x32
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f001 f935 	bl	800aeac <lv_obj_get_style_prop>
 8009c42:	4680      	mov	r8, r0
    if(child_res != LV_COORD_MIN) {
 8009c44:	4f00      	ldr	r7, [pc, #0]	; (8009c48 <lv_obj_get_scroll_right+0xec>)
 8009c46:	e7d2      	b.n	8009bee <lv_obj_get_scroll_right+0x92>
 8009c48:	ffffe001 	.word	0xffffe001
 8009c4c:	00040001 	.word	0x00040001

08009c50 <lv_obj_get_scroll_end>:
{
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4605      	mov	r5, r0
 8009c54:	460c      	mov	r4, r1
    a = lv_anim_get(obj, scroll_x_anim);
 8009c56:	490d      	ldr	r1, [pc, #52]	; (8009c8c <lv_obj_get_scroll_end+0x3c>)
 8009c58:	f017 f986 	bl	8020f68 <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8009c5c:	b168      	cbz	r0, 8009c7a <lv_obj_get_scroll_end+0x2a>
 8009c5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009c60:	425b      	negs	r3, r3
 8009c62:	b21b      	sxth	r3, r3
 8009c64:	8023      	strh	r3, [r4, #0]
    a = lv_anim_get(obj, scroll_y_anim);
 8009c66:	490a      	ldr	r1, [pc, #40]	; (8009c90 <lv_obj_get_scroll_end+0x40>)
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f017 f97d 	bl	8020f68 <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8009c6e:	b148      	cbz	r0, 8009c84 <lv_obj_get_scroll_end+0x34>
 8009c70:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009c72:	4240      	negs	r0, r0
 8009c74:	b200      	sxth	r0, r0
 8009c76:	8060      	strh	r0, [r4, #2]
}
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	f7ff fe78 	bl	8009970 <lv_obj_get_scroll_x>
 8009c80:	4603      	mov	r3, r0
 8009c82:	e7ef      	b.n	8009c64 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 8009c84:	4628      	mov	r0, r5
 8009c86:	f7ff fe7b 	bl	8009980 <lv_obj_get_scroll_y>
 8009c8a:	e7f4      	b.n	8009c76 <lv_obj_get_scroll_end+0x26>
 8009c8c:	08009cf9 	.word	0x08009cf9
 8009c90:	08009ce1 	.word	0x08009ce1

08009c94 <_lv_obj_scroll_by_raw>:
{
 8009c94:	b570      	push	{r4, r5, r6, lr}
    if(x == 0 && y == 0) return LV_RES_OK;
 8009c96:	ea51 0302 	orrs.w	r3, r1, r2
 8009c9a:	d102      	bne.n	8009ca2 <_lv_obj_scroll_by_raw+0xe>
 8009c9c:	2501      	movs	r5, #1
}
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	4616      	mov	r6, r2
    lv_obj_allocate_spec_attr(obj);
 8009ca8:	f7fd fc1c 	bl	80074e4 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 8009cac:	68a2      	ldr	r2, [r4, #8]
 8009cae:	8a13      	ldrh	r3, [r2, #16]
 8009cb0:	442b      	add	r3, r5
 8009cb2:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
 8009cb4:	68a2      	ldr	r2, [r4, #8]
 8009cb6:	8a53      	ldrh	r3, [r2, #18]
 8009cb8:	4433      	add	r3, r6
 8009cba:	8253      	strh	r3, [r2, #18]
    lv_obj_move_children_by(obj, x, y, true);
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7fe fb2a 	bl	800831c <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 8009cc8:	2200      	movs	r2, #0
 8009cca:	210b      	movs	r1, #11
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7fa fb79 	bl	80043c4 <lv_event_send>
 8009cd2:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 8009cd4:	2801      	cmp	r0, #1
 8009cd6:	d1e2      	bne.n	8009c9e <_lv_obj_scroll_by_raw+0xa>
    lv_obj_invalidate(obj);
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7fe fcaf 	bl	800863c <lv_obj_invalidate>
    return LV_RES_OK;
 8009cde:	e7de      	b.n	8009c9e <_lv_obj_scroll_by_raw+0xa>

08009ce0 <scroll_y_anim>:
{
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 8009ce6:	f7ff fe4b 	bl	8009980 <lv_obj_get_scroll_y>
 8009cea:	1942      	adds	r2, r0, r5
 8009cec:	b212      	sxth	r2, r2
 8009cee:	2100      	movs	r1, #0
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f7ff ffcf 	bl	8009c94 <_lv_obj_scroll_by_raw>
}
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}

08009cf8 <scroll_x_anim>:
{
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 8009cfe:	f7ff fe37 	bl	8009970 <lv_obj_get_scroll_x>
 8009d02:	1941      	adds	r1, r0, r5
 8009d04:	2200      	movs	r2, #0
 8009d06:	b209      	sxth	r1, r1
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f7ff ffc3 	bl	8009c94 <_lv_obj_scroll_by_raw>
}
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}

08009d10 <lv_obj_scroll_by>:
{
 8009d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d12:	b093      	sub	sp, #76	; 0x4c
 8009d14:	4604      	mov	r4, r0
 8009d16:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 8009d18:	460e      	mov	r6, r1
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	d178      	bne.n	8009e10 <lv_obj_scroll_by+0x100>
 8009d1e:	2a00      	cmp	r2, #0
 8009d20:	f000 8087 	beq.w	8009e32 <lv_obj_scroll_by+0x122>
    if(anim_en == LV_ANIM_ON) {
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d175      	bne.n	8009e14 <lv_obj_scroll_by+0x104>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f001 ffdd 	bl	800bce8 <lv_obj_get_disp>
 8009d2e:	4607      	mov	r7, r0
        lv_anim_init(&a);
 8009d30:	a801      	add	r0, sp, #4
 8009d32:	f017 f883 	bl	8020e3c <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 8009d36:	9401      	str	r4, [sp, #4]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 8009d38:	4b3f      	ldr	r3, [pc, #252]	; (8009e38 <lv_obj_scroll_by+0x128>)
 8009d3a:	9304      	str	r3, [sp, #16]
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f016 feb1 	bl	8020aa4 <lv_disp_get_ver_res>
 8009d42:	462a      	mov	r2, r5
 8009d44:	2100      	movs	r1, #0
 8009d46:	f340 005d 	sbfx	r0, r0, #1, #30
 8009d4a:	f017 f929 	bl	8020fa0 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8009d4e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8009d52:	bf28      	it	cs
 8009d54:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8009d58:	28c8      	cmp	r0, #200	; 0xc8
 8009d5a:	bf38      	it	cc
 8009d5c:	20c8      	movcc	r0, #200	; 0xc8
 8009d5e:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff fe0d 	bl	8009980 <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 8009d66:	4243      	negs	r3, r0
    a->start_value = start;
 8009d68:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 8009d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d6c:	1a28      	subs	r0, r5, r0
    a->end_value = end;
 8009d6e:	900b      	str	r0, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 8009d70:	4b32      	ldr	r3, [pc, #200]	; (8009e3c <lv_obj_scroll_by+0x12c>)
 8009d72:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8009d74:	4b32      	ldr	r3, [pc, #200]	; (8009e40 <lv_obj_scroll_by+0x130>)
 8009d76:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8009d78:	aa01      	add	r2, sp, #4
 8009d7a:	2109      	movs	r1, #9
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7fa fb21 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 8009d82:	2801      	cmp	r0, #1
 8009d84:	d155      	bne.n	8009e32 <lv_obj_scroll_by+0x122>
            lv_anim_start(&a);
 8009d86:	a801      	add	r0, sp, #4
 8009d88:	f017 f8aa 	bl	8020ee0 <lv_anim_start>
 8009d8c:	e051      	b.n	8009e32 <lv_obj_scroll_by+0x122>
        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 8009d8e:	462a      	mov	r2, r5
 8009d90:	4631      	mov	r1, r6
 8009d92:	4620      	mov	r0, r4
 8009d94:	f7ff ff7e 	bl	8009c94 <_lv_obj_scroll_by_raw>
        if(res != LV_RES_OK) return;
 8009d98:	2801      	cmp	r0, #1
 8009d9a:	d14a      	bne.n	8009e32 <lv_obj_scroll_by+0x122>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	210a      	movs	r1, #10
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7fa fb0f 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return;
 8009da6:	e044      	b.n	8009e32 <lv_obj_scroll_by+0x122>
        lv_disp_t * d = lv_obj_get_disp(obj);
 8009da8:	4620      	mov	r0, r4
 8009daa:	f001 ff9d 	bl	800bce8 <lv_obj_get_disp>
 8009dae:	4607      	mov	r7, r0
        lv_anim_init(&a);
 8009db0:	a801      	add	r0, sp, #4
 8009db2:	f017 f843 	bl	8020e3c <lv_anim_init>
    a->var = var;
 8009db6:	9401      	str	r4, [sp, #4]
    a->ready_cb = ready_cb;
 8009db8:	4b1f      	ldr	r3, [pc, #124]	; (8009e38 <lv_obj_scroll_by+0x128>)
 8009dba:	9304      	str	r3, [sp, #16]
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f016 fe5d 	bl	8020a7c <lv_disp_get_hor_res>
 8009dc2:	4632      	mov	r2, r6
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	f340 005d 	sbfx	r0, r0, #1, #30
 8009dca:	f017 f8e9 	bl	8020fa0 <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 8009dce:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8009dd2:	bf28      	it	cs
 8009dd4:	f44f 70c8 	movcs.w	r0, #400	; 0x190
    a->time = duration;
 8009dd8:	28c8      	cmp	r0, #200	; 0xc8
 8009dda:	bf38      	it	cc
 8009ddc:	20c8      	movcc	r0, #200	; 0xc8
 8009dde:	900c      	str	r0, [sp, #48]	; 0x30
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7ff fdc5 	bl	8009970 <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 8009de6:	4243      	negs	r3, r0
    a->start_value = start;
 8009de8:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 8009dea:	930a      	str	r3, [sp, #40]	; 0x28
 8009dec:	1a30      	subs	r0, r6, r0
    a->end_value = end;
 8009dee:	900b      	str	r0, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 8009df0:	4b14      	ldr	r3, [pc, #80]	; (8009e44 <lv_obj_scroll_by+0x134>)
 8009df2:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 8009df4:	4b12      	ldr	r3, [pc, #72]	; (8009e40 <lv_obj_scroll_by+0x130>)
 8009df6:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 8009df8:	aa01      	add	r2, sp, #4
 8009dfa:	2109      	movs	r1, #9
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f7fa fae1 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 8009e02:	2801      	cmp	r0, #1
 8009e04:	d115      	bne.n	8009e32 <lv_obj_scroll_by+0x122>
            lv_anim_start(&a);
 8009e06:	a801      	add	r0, sp, #4
 8009e08:	f017 f86a 	bl	8020ee0 <lv_anim_start>
        if(dy) {
 8009e0c:	b18d      	cbz	r5, 8009e32 <lv_obj_scroll_by+0x122>
 8009e0e:	e795      	b.n	8009d3c <lv_obj_scroll_by+0x2c>
    if(anim_en == LV_ANIM_ON) {
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d0c9      	beq.n	8009da8 <lv_obj_scroll_by+0x98>
        lv_anim_del(obj, scroll_y_anim);
 8009e14:	4909      	ldr	r1, [pc, #36]	; (8009e3c <lv_obj_scroll_by+0x12c>)
 8009e16:	4620      	mov	r0, r4
 8009e18:	f017 f82a 	bl	8020e70 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 8009e1c:	4909      	ldr	r1, [pc, #36]	; (8009e44 <lv_obj_scroll_by+0x134>)
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f017 f826 	bl	8020e70 <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 8009e24:	2200      	movs	r2, #0
 8009e26:	2109      	movs	r1, #9
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7fa facb 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return;
 8009e2e:	2801      	cmp	r0, #1
 8009e30:	d0ad      	beq.n	8009d8e <lv_obj_scroll_by+0x7e>
}
 8009e32:	b013      	add	sp, #76	; 0x4c
 8009e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e36:	bf00      	nop
 8009e38:	080098b1 	.word	0x080098b1
 8009e3c:	08009ce1 	.word	0x08009ce1
 8009e40:	08020fbf 	.word	0x08020fbf
 8009e44:	08009cf9 	.word	0x08009cf9

08009e48 <lv_obj_scroll_by_bounded>:
{
 8009e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4c:	4698      	mov	r8, r3
    if(dx == 0 && dy == 0) return;
 8009e4e:	ea51 0302 	orrs.w	r3, r1, r2
 8009e52:	d101      	bne.n	8009e58 <lv_obj_scroll_by_bounded+0x10>
}
 8009e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e58:	4607      	mov	r7, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	4615      	mov	r5, r2
    lv_obj_update_layout(obj);
 8009e5e:	f7ff faa1 	bl	80093a4 <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 8009e62:	4638      	mov	r0, r7
 8009e64:	f7ff fd84 	bl	8009970 <lv_obj_get_scroll_x>
 8009e68:	b286      	uxth	r6, r0
    lv_coord_t x_bounded = x_current + dx;
 8009e6a:	1ba4      	subs	r4, r4, r6
 8009e6c:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8009e6e:	2216      	movs	r2, #22
 8009e70:	2100      	movs	r1, #0
 8009e72:	4638      	mov	r0, r7
 8009e74:	f001 f81a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8009e78:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8009e7a:	2801      	cmp	r0, #1
 8009e7c:	d02e      	beq.n	8009edc <lv_obj_scroll_by_bounded+0x94>
        if(x_bounded > 0) x_bounded = 0;
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	dd1a      	ble.n	8009eb8 <lv_obj_scroll_by_bounded+0x70>
 8009e82:	2400      	movs	r4, #0
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 8009e84:	4638      	mov	r0, r7
 8009e86:	f7ff fd7b 	bl	8009980 <lv_obj_get_scroll_y>
 8009e8a:	fa1f f980 	uxth.w	r9, r0
    lv_coord_t y_bounded = y_current + dy;
 8009e8e:	eba5 0509 	sub.w	r5, r5, r9
 8009e92:	b22d      	sxth	r5, r5
    if(y_bounded > 0) y_bounded = 0;
 8009e94:	2d00      	cmp	r5, #0
 8009e96:	dd36      	ble.n	8009f06 <lv_obj_scroll_by_bounded+0xbe>
 8009e98:	2500      	movs	r5, #0
    dx = x_bounded - x_current;
 8009e9a:	1931      	adds	r1, r6, r4
 8009e9c:	b289      	uxth	r1, r1
    dy = y_bounded - y_current;
 8009e9e:	eb09 0205 	add.w	r2, r9, r5
 8009ea2:	b292      	uxth	r2, r2
    if(dx || dy) {
 8009ea4:	ea51 0302 	orrs.w	r3, r1, r2
 8009ea8:	d0d4      	beq.n	8009e54 <lv_obj_scroll_by_bounded+0xc>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 8009eaa:	4643      	mov	r3, r8
 8009eac:	b212      	sxth	r2, r2
 8009eae:	b209      	sxth	r1, r1
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f7ff ff2d 	bl	8009d10 <lv_obj_scroll_by>
 8009eb6:	e7cd      	b.n	8009e54 <lv_obj_scroll_by_bounded+0xc>
        if(x_bounded < 0) {
 8009eb8:	dae4      	bge.n	8009e84 <lv_obj_scroll_by_bounded+0x3c>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f7ff fdda 	bl	8009a74 <lv_obj_get_scroll_left>
 8009ec0:	4681      	mov	r9, r0
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	f7ff fe4a 	bl	8009b5c <lv_obj_get_scroll_right>
 8009ec8:	eb09 0300 	add.w	r3, r9, r0
 8009ecc:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 8009ece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 8009ed2:	425a      	negs	r2, r3
 8009ed4:	4294      	cmp	r4, r2
 8009ed6:	dad5      	bge.n	8009e84 <lv_obj_scroll_by_bounded+0x3c>
 8009ed8:	b214      	sxth	r4, r2
 8009eda:	e7d3      	b.n	8009e84 <lv_obj_scroll_by_bounded+0x3c>
        if(x_bounded < 0) x_bounded = 0;
 8009edc:	2c00      	cmp	r4, #0
 8009ede:	db10      	blt.n	8009f02 <lv_obj_scroll_by_bounded+0xba>
        if(x_bounded > 0) {
 8009ee0:	ddd0      	ble.n	8009e84 <lv_obj_scroll_by_bounded+0x3c>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f7ff fdc6 	bl	8009a74 <lv_obj_get_scroll_left>
 8009ee8:	4681      	mov	r9, r0
 8009eea:	4638      	mov	r0, r7
 8009eec:	f7ff fe36 	bl	8009b5c <lv_obj_get_scroll_right>
 8009ef0:	4481      	add	r9, r0
 8009ef2:	fa0f f989 	sxth.w	r9, r9
            if(x_bounded > scroll_max) x_bounded = scroll_max;
 8009ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009efa:	454c      	cmp	r4, r9
 8009efc:	bfa8      	it	ge
 8009efe:	464c      	movge	r4, r9
 8009f00:	e7c0      	b.n	8009e84 <lv_obj_scroll_by_bounded+0x3c>
        if(x_bounded < 0) x_bounded = 0;
 8009f02:	2400      	movs	r4, #0
 8009f04:	e7be      	b.n	8009e84 <lv_obj_scroll_by_bounded+0x3c>
    if(y_bounded < 0) {
 8009f06:	dac8      	bge.n	8009e9a <lv_obj_scroll_by_bounded+0x52>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff fd41 	bl	8009990 <lv_obj_get_scroll_top>
 8009f0e:	4682      	mov	sl, r0
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff fd45 	bl	80099a0 <lv_obj_get_scroll_bottom>
 8009f16:	eb0a 0300 	add.w	r3, sl, r0
 8009f1a:	b21b      	sxth	r3, r3
        if(scroll_max < 0) scroll_max = 0;
 8009f1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 8009f20:	425a      	negs	r2, r3
 8009f22:	4295      	cmp	r5, r2
 8009f24:	dab9      	bge.n	8009e9a <lv_obj_scroll_by_bounded+0x52>
 8009f26:	b215      	sxth	r5, r2
 8009f28:	e7b7      	b.n	8009e9a <lv_obj_scroll_by_bounded+0x52>
	...

08009f2c <lv_obj_scroll_to_x>:
{
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	4604      	mov	r4, r0
 8009f30:	460e      	mov	r6, r1
 8009f32:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_x_anim);
 8009f34:	4906      	ldr	r1, [pc, #24]	; (8009f50 <lv_obj_scroll_to_x+0x24>)
 8009f36:	f016 ff9b 	bl	8020e70 <lv_anim_del>
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f7ff fd18 	bl	8009970 <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 8009f40:	1b81      	subs	r1, r0, r6
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 8009f42:	462b      	mov	r3, r5
 8009f44:	2200      	movs	r2, #0
 8009f46:	b209      	sxth	r1, r1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff ff7d 	bl	8009e48 <lv_obj_scroll_by_bounded>
}
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	08009cf9 	.word	0x08009cf9

08009f54 <lv_obj_scroll_to_y>:
{
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	4604      	mov	r4, r0
 8009f58:	460e      	mov	r6, r1
 8009f5a:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_y_anim);
 8009f5c:	4906      	ldr	r1, [pc, #24]	; (8009f78 <lv_obj_scroll_to_y+0x24>)
 8009f5e:	f016 ff87 	bl	8020e70 <lv_anim_del>
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 8009f62:	4620      	mov	r0, r4
 8009f64:	f7ff fd0c 	bl	8009980 <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 8009f68:	1b80      	subs	r0, r0, r6
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 8009f6a:	462b      	mov	r3, r5
 8009f6c:	b202      	sxth	r2, r0
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7ff ff69 	bl	8009e48 <lv_obj_scroll_by_bounded>
}
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
 8009f78:	08009ce1 	.word	0x08009ce1

08009f7c <lv_obj_scroll_to>:
{
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	4605      	mov	r5, r0
 8009f80:	4616      	mov	r6, r2
 8009f82:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 8009f84:	461a      	mov	r2, r3
 8009f86:	f7ff ffd1 	bl	8009f2c <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f7ff ffe0 	bl	8009f54 <lv_obj_scroll_to_y>
}
 8009f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f98 <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	b08b      	sub	sp, #44	; 0x2c
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	9103      	str	r1, [sp, #12]
 8009fa4:	4617      	mov	r7, r2
 8009fa6:	9302      	str	r3, [sp, #8]
    lv_obj_t * parent = lv_obj_get_parent(child);
 8009fa8:	4608      	mov	r0, r1
 8009faa:	f001 fec1 	bl	800bd30 <lv_obj_get_parent>
 8009fae:	4604      	mov	r4, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 8009fb0:	2110      	movs	r1, #16
 8009fb2:	f7fd f86f 	bl	8007094 <lv_obj_has_flag>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f000 80db 	beq.w	800a172 <scroll_area_into_view+0x1da>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7ff fcbf 	bl	8009940 <lv_obj_get_scroll_dir>
 8009fc2:	9001      	str	r0, [sp, #4]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff fccb 	bl	8009960 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 8009fca:	4683      	mov	fp, r0
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	d038      	beq.n	800a042 <scroll_area_into_view+0xaa>
 8009fd0:	f105 0a14 	add.w	sl, r5, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8009fd4:	2232      	movs	r2, #50	; 0x32
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f000 ff67 	bl	800aeac <lv_obj_get_style_prop>
 8009fde:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8009fe0:	2210      	movs	r2, #16
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 ff61 	bl	800aeac <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 8009fea:	b2ad      	uxth	r5, r5
 8009fec:	4428      	add	r0, r5
 8009fee:	b286      	uxth	r6, r0
 8009ff0:	9604      	str	r6, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8009ff2:	2211      	movs	r2, #17
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 ff58 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 8009ffc:	4428      	add	r0, r5
 8009ffe:	b281      	uxth	r1, r0
 800a000:	9105      	str	r1, [sp, #20]
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 800a002:	887b      	ldrh	r3, [r7, #2]
 800a004:	1af6      	subs	r6, r6, r3
 800a006:	8ae2      	ldrh	r2, [r4, #22]
 800a008:	4416      	add	r6, r2
 800a00a:	f8ba 2002 	ldrh.w	r2, [sl, #2]
 800a00e:	1ab6      	subs	r6, r6, r2
 800a010:	b236      	sxth	r6, r6
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 800a012:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a016:	9207      	str	r2, [sp, #28]
 800a018:	8b60      	ldrh	r0, [r4, #26]
 800a01a:	9008      	str	r0, [sp, #32]
 800a01c:	440b      	add	r3, r1
 800a01e:	b29b      	uxth	r3, r3
 800a020:	9309      	str	r3, [sp, #36]	; 0x24
 800a022:	eba3 0900 	sub.w	r9, r3, r0
 800a026:	4491      	add	r9, r2
 800a028:	fa0f f989 	sxth.w	r9, r9
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800a02c:	4620      	mov	r0, r4
 800a02e:	f7fe f8c4 	bl	80081ba <lv_obj_get_height>
 800a032:	9006      	str	r0, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 800a034:	2e00      	cmp	r6, #0
 800a036:	db06      	blt.n	800a046 <scroll_area_into_view+0xae>
 800a038:	f1b9 0f00 	cmp.w	r9, #0
 800a03c:	db03      	blt.n	800a046 <scroll_area_into_view+0xae>
 800a03e:	2600      	movs	r6, #0
 800a040:	e00b      	b.n	800a05a <scroll_area_into_view+0xc2>
    else area_tmp = area;
 800a042:	46c2      	mov	sl, r8
 800a044:	e7c6      	b.n	8009fd4 <scroll_area_into_view+0x3c>
    else if(top_diff > 0) {
 800a046:	2e00      	cmp	r6, #0
 800a048:	f340 8096 	ble.w	800a178 <scroll_area_into_view+0x1e0>
        y_scroll = top_diff;
        /*Do not let scrolling in*/
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 800a04c:	4620      	mov	r0, r4
 800a04e:	f7ff fc9f 	bl	8009990 <lv_obj_get_scroll_top>
        if(st - y_scroll < 0) y_scroll = 0;
 800a052:	1b80      	subs	r0, r0, r6
 800a054:	2800      	cmp	r0, #0
 800a056:	bfb8      	it	lt
 800a058:	2600      	movlt	r6, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 800a05a:	f1bb 0f02 	cmp.w	fp, #2
 800a05e:	f000 80a6 	beq.w	800a1ae <scroll_area_into_view+0x216>
 800a062:	f1bb 0f03 	cmp.w	fp, #3
 800a066:	f000 80aa 	beq.w	800a1be <scroll_area_into_view+0x226>
 800a06a:	f1bb 0f01 	cmp.w	fp, #1
 800a06e:	f000 8095 	beq.w	800a19c <scroll_area_into_view+0x204>
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 800a072:	4620      	mov	r0, r4
 800a074:	f7ff fc6c 	bl	8009950 <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 800a078:	4682      	mov	sl, r0
 800a07a:	b110      	cbz	r0, 800a082 <scroll_area_into_view+0xea>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	f103 0814 	add.w	r8, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a082:	2212      	movs	r2, #18
 800a084:	2100      	movs	r1, #0
 800a086:	4620      	mov	r0, r4
 800a088:	f000 ff10 	bl	800aeac <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 800a08c:	eb05 0900 	add.w	r9, r5, r0
 800a090:	fa1f f989 	uxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a094:	2213      	movs	r2, #19
 800a096:	2100      	movs	r1, #0
 800a098:	4620      	mov	r0, r4
 800a09a:	f000 ff07 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 800a09e:	4405      	add	r5, r0
 800a0a0:	fa1f fb85 	uxth.w	fp, r5
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 800a0a4:	883b      	ldrh	r3, [r7, #0]
 800a0a6:	eba9 0503 	sub.w	r5, r9, r3
 800a0aa:	8aa2      	ldrh	r2, [r4, #20]
 800a0ac:	4415      	add	r5, r2
 800a0ae:	f8b8 2000 	ldrh.w	r2, [r8]
 800a0b2:	1aad      	subs	r5, r5, r2
 800a0b4:	b22d      	sxth	r5, r5
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 800a0b6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800a0ba:	8b21      	ldrh	r1, [r4, #24]
 800a0bc:	445b      	add	r3, fp
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	1a5a      	subs	r2, r3, r1
 800a0c2:	4402      	add	r2, r0
 800a0c4:	b212      	sxth	r2, r2
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 800a0c6:	2d00      	cmp	r5, #0
 800a0c8:	f2c0 8095 	blt.w	800a1f6 <scroll_area_into_view+0x25e>
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	f2c0 8092 	blt.w	800a1f6 <scroll_area_into_view+0x25e>
 800a0d2:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f7fe f86a 	bl	80081ae <lv_obj_get_width>
    switch(snap_x) {
 800a0da:	f1ba 0f02 	cmp.w	sl, #2
 800a0de:	f000 80aa 	beq.w	800a236 <scroll_area_into_view+0x29e>
 800a0e2:	f1ba 0f03 	cmp.w	sl, #3
 800a0e6:	f000 80af 	beq.w	800a248 <scroll_area_into_view+0x2b0>
 800a0ea:	f1ba 0f01 	cmp.w	sl, #1
 800a0ee:	f000 809a 	beq.w	800a226 <scroll_area_into_view+0x28e>
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 800a0f2:	4965      	ldr	r1, [pc, #404]	; (800a288 <scroll_area_into_view+0x2f0>)
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f016 febb 	bl	8020e70 <lv_anim_del>
 800a0fa:	4680      	mov	r8, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 800a0fc:	4963      	ldr	r1, [pc, #396]	; (800a28c <scroll_area_into_view+0x2f4>)
 800a0fe:	4620      	mov	r0, r4
 800a100:	f016 feb6 	bl	8020e70 <lv_anim_del>
    if(y_del || x_del) {
 800a104:	f1b8 0f00 	cmp.w	r8, #0
 800a108:	d100      	bne.n	800a10c <scroll_area_into_view+0x174>
 800a10a:	b130      	cbz	r0, 800a11a <scroll_area_into_view+0x182>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 800a10c:	2200      	movs	r2, #0
 800a10e:	210a      	movs	r1, #10
 800a110:	4620      	mov	r0, r4
 800a112:	f7fa f957 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return;
 800a116:	2801      	cmp	r0, #1
 800a118:	d12b      	bne.n	800a172 <scroll_area_into_view+0x1da>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 800a11a:	9b01      	ldr	r3, [sp, #4]
 800a11c:	f013 0f01 	tst.w	r3, #1
 800a120:	bf04      	itt	eq
 800a122:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a126:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	f013 0f02 	tst.w	r3, #2
 800a12e:	bf04      	itt	eq
 800a130:	ea05 75e5 	andeq.w	r5, r5, r5, asr #31
 800a134:	b22d      	sxtheq	r5, r5
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	f013 0f04 	tst.w	r3, #4
 800a13c:	bf04      	itt	eq
 800a13e:	ea26 76e6 	biceq.w	r6, r6, r6, asr #31
 800a142:	b236      	sxtheq	r6, r6
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	f013 0f08 	tst.w	r3, #8
 800a14a:	bf04      	itt	eq
 800a14c:	ea06 76e6 	andeq.w	r6, r6, r6, asr #31
 800a150:	b236      	sxtheq	r6, r6

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800a152:	f9b7 3000 	ldrsh.w	r3, [r7]
 800a156:	9a02      	ldr	r2, [sp, #8]
 800a158:	2a00      	cmp	r2, #0
 800a15a:	f040 8090 	bne.w	800a27e <scroll_area_into_view+0x2e6>
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800a15e:	887b      	ldrh	r3, [r7, #2]
 800a160:	2200      	movs	r2, #0
 800a162:	4413      	add	r3, r2
 800a164:	807b      	strh	r3, [r7, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 800a166:	9b02      	ldr	r3, [sp, #8]
 800a168:	4632      	mov	r2, r6
 800a16a:	4629      	mov	r1, r5
 800a16c:	4620      	mov	r0, r4
 800a16e:	f7ff fdcf 	bl	8009d10 <lv_obj_scroll_by>
}
 800a172:	b00b      	add	sp, #44	; 0x2c
 800a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(bottom_diff > 0) {
 800a178:	f1b9 0f00 	cmp.w	r9, #0
 800a17c:	dc01      	bgt.n	800a182 <scroll_area_into_view+0x1ea>
    lv_coord_t y_scroll = 0;
 800a17e:	2600      	movs	r6, #0
 800a180:	e76b      	b.n	800a05a <scroll_area_into_view+0xc2>
        y_scroll = -bottom_diff;
 800a182:	9b08      	ldr	r3, [sp, #32]
 800a184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a186:	1a9e      	subs	r6, r3, r2
 800a188:	9b07      	ldr	r3, [sp, #28]
 800a18a:	1af6      	subs	r6, r6, r3
 800a18c:	b236      	sxth	r6, r6
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff fc06 	bl	80099a0 <lv_obj_get_scroll_bottom>
        if(sb + y_scroll < 0) y_scroll = 0;
 800a194:	42f0      	cmn	r0, r6
 800a196:	bf48      	it	mi
 800a198:	2600      	movmi	r6, #0
 800a19a:	e75e      	b.n	800a05a <scroll_area_into_view+0xc2>
            y_scroll += snap_goal - act;
 800a19c:	8ae6      	ldrh	r6, [r4, #22]
 800a19e:	9b04      	ldr	r3, [sp, #16]
 800a1a0:	4433      	add	r3, r6
 800a1a2:	461e      	mov	r6, r3
 800a1a4:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 800a1a8:	1af6      	subs	r6, r6, r3
 800a1aa:	b236      	sxth	r6, r6
            break;
 800a1ac:	e761      	b.n	800a072 <scroll_area_into_view+0xda>
            y_scroll += snap_goal - act;
 800a1ae:	8b66      	ldrh	r6, [r4, #26]
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	1af6      	subs	r6, r6, r3
 800a1b4:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a1b8:	1af6      	subs	r6, r6, r3
 800a1ba:	b236      	sxth	r6, r6
            break;
 800a1bc:	e759      	b.n	800a072 <scroll_area_into_view+0xda>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a1be:	f8ba 3002 	ldrh.w	r3, [sl, #2]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 800a1c2:	9805      	ldr	r0, [sp, #20]
 800a1c4:	9904      	ldr	r1, [sp, #16]
 800a1c6:	4408      	add	r0, r1
 800a1c8:	9a06      	ldr	r2, [sp, #24]
 800a1ca:	1a10      	subs	r0, r2, r0
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 800a1cc:	b206      	sxth	r6, r0
 800a1ce:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800a1d2:	4430      	add	r0, r6
            y_scroll += snap_goal - act;
 800a1d4:	8ae6      	ldrh	r6, [r4, #22]
 800a1d6:	440e      	add	r6, r1
 800a1d8:	1af6      	subs	r6, r6, r3
 800a1da:	eb06 0660 	add.w	r6, r6, r0, asr #1
 800a1de:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a1e2:	3201      	adds	r2, #1
 800a1e4:	1ad3      	subs	r3, r2, r3
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 800a1e6:	b21a      	sxth	r2, r3
 800a1e8:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800a1ec:	4413      	add	r3, r2
            y_scroll += snap_goal - act;
 800a1ee:	eba6 0663 	sub.w	r6, r6, r3, asr #1
 800a1f2:	b236      	sxth	r6, r6
            break;
 800a1f4:	e73d      	b.n	800a072 <scroll_area_into_view+0xda>
    else if(left_diff > 0) {
 800a1f6:	2d00      	cmp	r5, #0
 800a1f8:	dc03      	bgt.n	800a202 <scroll_area_into_view+0x26a>
    else if(right_diff > 0) {
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	dc09      	bgt.n	800a212 <scroll_area_into_view+0x27a>
    lv_coord_t x_scroll = 0;
 800a1fe:	2500      	movs	r5, #0
 800a200:	e768      	b.n	800a0d4 <scroll_area_into_view+0x13c>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff fc36 	bl	8009a74 <lv_obj_get_scroll_left>
        if(sl - x_scroll < 0) x_scroll = 0;
 800a208:	1b40      	subs	r0, r0, r5
 800a20a:	2800      	cmp	r0, #0
 800a20c:	bfb8      	it	lt
 800a20e:	2500      	movlt	r5, #0
 800a210:	e760      	b.n	800a0d4 <scroll_area_into_view+0x13c>
        x_scroll = -right_diff;
 800a212:	1acb      	subs	r3, r1, r3
 800a214:	1a18      	subs	r0, r3, r0
 800a216:	b205      	sxth	r5, r0
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 800a218:	4620      	mov	r0, r4
 800a21a:	f7ff fc9f 	bl	8009b5c <lv_obj_get_scroll_right>
        if(sr + x_scroll < 0) x_scroll = 0;
 800a21e:	42e8      	cmn	r0, r5
 800a220:	bf48      	it	mi
 800a222:	2500      	movmi	r5, #0
 800a224:	e756      	b.n	800a0d4 <scroll_area_into_view+0x13c>
            x_scroll += snap_goal - act;
 800a226:	8aa5      	ldrh	r5, [r4, #20]
 800a228:	444d      	add	r5, r9
 800a22a:	f8b8 9000 	ldrh.w	r9, [r8]
 800a22e:	eba5 0509 	sub.w	r5, r5, r9
 800a232:	b22d      	sxth	r5, r5
            break;
 800a234:	e75d      	b.n	800a0f2 <scroll_area_into_view+0x15a>
            x_scroll += snap_goal - act;
 800a236:	8b25      	ldrh	r5, [r4, #24]
 800a238:	eba5 050b 	sub.w	r5, r5, fp
 800a23c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a240:	eba5 050b 	sub.w	r5, r5, fp
 800a244:	b22d      	sxth	r5, r5
            break;
 800a246:	e754      	b.n	800a0f2 <scroll_area_into_view+0x15a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a248:	f8b8 2000 	ldrh.w	r2, [r8]
            x_scroll += snap_goal - act;
 800a24c:	8aa5      	ldrh	r5, [r4, #20]
 800a24e:	444d      	add	r5, r9
 800a250:	1aad      	subs	r5, r5, r2
 800a252:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800a256:	3301      	adds	r3, #1
 800a258:	1a9b      	subs	r3, r3, r2
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 800a25a:	b21a      	sxth	r2, r3
 800a25c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800a260:	4413      	add	r3, r2
            x_scroll += snap_goal - act;
 800a262:	eba5 0563 	sub.w	r5, r5, r3, asr #1
    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 800a266:	44d9      	add	r9, fp
 800a268:	eba0 0909 	sub.w	r9, r0, r9
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 800a26c:	fa0f f089 	sxth.w	r0, r9
 800a270:	f3c9 39c0 	ubfx	r9, r9, #15, #1
 800a274:	4481      	add	r9, r0
            x_scroll += snap_goal - act;
 800a276:	eb05 0569 	add.w	r5, r5, r9, asr #1
 800a27a:	b22d      	sxth	r5, r5
            break;
 800a27c:	e739      	b.n	800a0f2 <scroll_area_into_view+0x15a>
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 800a27e:	442b      	add	r3, r5
 800a280:	803b      	strh	r3, [r7, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 800a282:	887b      	ldrh	r3, [r7, #2]
 800a284:	4632      	mov	r2, r6
 800a286:	e76c      	b.n	800a162 <scroll_area_into_view+0x1ca>
 800a288:	08009ce1 	.word	0x08009ce1
 800a28c:	08009cf9 	.word	0x08009cf9

0800a290 <lv_obj_scroll_to_view_recursive>:
{
 800a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a292:	b083      	sub	sp, #12
 800a294:	4606      	mov	r6, r0
 800a296:	460f      	mov	r7, r1
    lv_obj_update_layout(obj);
 800a298:	f7ff f884 	bl	80093a4 <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 800a29c:	2300      	movs	r3, #0
 800a29e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a2a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_t * parent = lv_obj_get_parent(child);
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f001 fd42 	bl	800bd30 <lv_obj_get_parent>
    while(parent) {
 800a2ac:	b178      	cbz	r0, 800a2ce <lv_obj_scroll_to_view_recursive+0x3e>
 800a2ae:	4604      	mov	r4, r0
    lv_obj_t * child = obj;
 800a2b0:	4635      	mov	r5, r6
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 800a2b2:	3614      	adds	r6, #20
 800a2b4:	463b      	mov	r3, r7
 800a2b6:	aa01      	add	r2, sp, #4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff fe6c 	bl	8009f98 <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 800a2c0:	4625      	mov	r5, r4
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f001 fd34 	bl	800bd30 <lv_obj_get_parent>
    while(parent) {
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d1f2      	bne.n	800a2b4 <lv_obj_scroll_to_view_recursive+0x24>
}
 800a2ce:	b003      	add	sp, #12
 800a2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a2d4 <lv_obj_get_scrollbar_area>:
{
 800a2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d8:	b093      	sub	sp, #76	; 0x4c
 800a2da:	4604      	mov	r4, r0
 800a2dc:	468b      	mov	fp, r1
 800a2de:	4615      	mov	r5, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 800a2e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a2e4:	9600      	str	r6, [sp, #0]
 800a2e6:	4633      	mov	r3, r6
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4658      	mov	r0, fp
 800a2ee:	f016 fecb 	bl	8021088 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 800a2f2:	9600      	str	r6, [sp, #0]
 800a2f4:	4633      	mov	r3, r6
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f016 fec4 	bl	8021088 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 800a300:	2110      	movs	r1, #16
 800a302:	4620      	mov	r0, r4
 800a304:	f7fc fec6 	bl	8007094 <lv_obj_has_flag>
 800a308:	b128      	cbz	r0, 800a316 <lv_obj_get_scrollbar_area+0x42>
 800a30a:	4606      	mov	r6, r0
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 800a30c:	4620      	mov	r0, r4
 800a30e:	f7ff fb0f 	bl	8009930 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 800a312:	4681      	mov	r9, r0
 800a314:	b910      	cbnz	r0, 800a31c <lv_obj_get_scrollbar_area+0x48>
}
 800a316:	b013      	add	sp, #76	; 0x4c
 800a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800a31c:	2000      	movs	r0, #0
 800a31e:	f016 fc37 	bl	8020b90 <lv_indev_get_next>
 800a322:	4607      	mov	r7, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 800a324:	f1b9 0f02 	cmp.w	r9, #2
 800a328:	d13d      	bne.n	800a3a6 <lv_obj_get_scrollbar_area+0xd2>
        while(indev) {
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d0f3      	beq.n	800a316 <lv_obj_get_scrollbar_area+0x42>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 800a32e:	4638      	mov	r0, r7
 800a330:	f7fa fc92 	bl	8004c58 <lv_indev_get_scroll_obj>
 800a334:	4284      	cmp	r4, r0
 800a336:	d006      	beq.n	800a346 <lv_obj_get_scrollbar_area+0x72>
            indev = lv_indev_get_next(indev);
 800a338:	4638      	mov	r0, r7
 800a33a:	f016 fc29 	bl	8020b90 <lv_indev_get_next>
        while(indev) {
 800a33e:	4607      	mov	r7, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	d1f4      	bne.n	800a32e <lv_obj_get_scrollbar_area+0x5a>
 800a344:	e7e7      	b.n	800a316 <lv_obj_get_scrollbar_area+0x42>
        if(indev == NULL)  return;
 800a346:	2f00      	cmp	r7, #0
 800a348:	d0e5      	beq.n	800a316 <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800a34a:	4620      	mov	r0, r4
 800a34c:	f7ff fb20 	bl	8009990 <lv_obj_get_scroll_top>
 800a350:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff fb24 	bl	80099a0 <lv_obj_get_scroll_bottom>
 800a358:	9003      	str	r0, [sp, #12]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff fb8a 	bl	8009a74 <lv_obj_get_scroll_left>
 800a360:	9004      	str	r0, [sp, #16]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff fbfa 	bl	8009b5c <lv_obj_get_scroll_right>
 800a368:	9005      	str	r0, [sp, #20]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800a36a:	4620      	mov	r0, r4
 800a36c:	f7ff fae8 	bl	8009940 <lv_obj_get_scroll_dir>
 800a370:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
 800a372:	f010 0f0c 	tst.w	r0, #12
 800a376:	f040 8142 	bne.w	800a5fe <lv_obj_get_scrollbar_area+0x32a>
    if((dir & LV_DIR_HOR) &&
 800a37a:	f010 0f03 	tst.w	r0, #3
 800a37e:	d0ca      	beq.n	800a316 <lv_obj_get_scrollbar_area+0x42>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800a380:	f1b9 0f03 	cmp.w	r9, #3
 800a384:	bf08      	it	eq
 800a386:	f04f 0900 	moveq.w	r9, #0
 800a38a:	f000 812b 	beq.w	800a5e4 <lv_obj_get_scrollbar_area+0x310>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800a38e:	f1b9 0f02 	cmp.w	r9, #2
 800a392:	f040 8145 	bne.w	800a620 <lv_obj_get_scrollbar_area+0x34c>
 800a396:	f04f 0900 	mov.w	r9, #0
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7fa fc4c 	bl	8004c38 <lv_indev_get_scroll_dir>
 800a3a0:	2803      	cmp	r0, #3
 800a3a2:	d128      	bne.n	800a3f6 <lv_obj_get_scrollbar_area+0x122>
 800a3a4:	e02b      	b.n	800a3fe <lv_obj_get_scrollbar_area+0x12a>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff faf2 	bl	8009990 <lv_obj_get_scroll_top>
 800a3ac:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7ff faf6 	bl	80099a0 <lv_obj_get_scroll_bottom>
 800a3b4:	9003      	str	r0, [sp, #12]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f7ff fb5c 	bl	8009a74 <lv_obj_get_scroll_left>
 800a3bc:	9004      	str	r0, [sp, #16]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f7ff fbcc 	bl	8009b5c <lv_obj_get_scroll_right>
 800a3c4:	9005      	str	r0, [sp, #20]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f7ff faba 	bl	8009940 <lv_obj_get_scroll_dir>
    if((dir & LV_DIR_VER) &&
 800a3cc:	f010 0f0c 	tst.w	r0, #12
 800a3d0:	f000 839e 	beq.w	800ab10 <lv_obj_get_scrollbar_area+0x83c>
 800a3d4:	f1b9 0f01 	cmp.w	r9, #1
 800a3d8:	f000 83a6 	beq.w	800ab28 <lv_obj_get_scrollbar_area+0x854>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800a3dc:	f1b9 0f03 	cmp.w	r9, #3
 800a3e0:	f000 80f7 	beq.w	800a5d2 <lv_obj_get_scrollbar_area+0x2fe>
    if((dir & LV_DIR_HOR) &&
 800a3e4:	f010 0f03 	tst.w	r0, #3
 800a3e8:	d095      	beq.n	800a316 <lv_obj_get_scrollbar_area+0x42>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800a3ea:	f1b9 0f03 	cmp.w	r9, #3
 800a3ee:	f000 8114 	beq.w	800a61a <lv_obj_get_scrollbar_area+0x346>
 800a3f2:	f04f 0900 	mov.w	r9, #0
    if(!hor_draw && !ver_draw) return;
 800a3f6:	f1b9 0f00 	cmp.w	r9, #0
 800a3fa:	d08c      	beq.n	800a316 <lv_obj_get_scrollbar_area+0x42>
 800a3fc:	2600      	movs	r6, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800a3fe:	2216      	movs	r2, #22
 800a400:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a404:	4620      	mov	r0, r4
 800a406:	f000 fd51 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800a40a:	b2c3      	uxtb	r3, r0
 800a40c:	930d      	str	r3, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800a40e:	2210      	movs	r2, #16
 800a410:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fd49 	bl	800aeac <lv_obj_get_style_prop>
 800a41a:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800a41c:	2211      	movs	r2, #17
 800a41e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a422:	4620      	mov	r0, r4
 800a424:	f000 fd42 	bl	800aeac <lv_obj_get_style_prop>
 800a428:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800a42a:	2212      	movs	r2, #18
 800a42c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fd3b 	bl	800aeac <lv_obj_get_style_prop>
 800a436:	900c      	str	r0, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800a438:	2213      	movs	r2, #19
 800a43a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 fd34 	bl	800aeac <lv_obj_get_style_prop>
 800a444:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800a446:	2201      	movs	r2, #1
 800a448:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 fd2d 	bl	800aeac <lv_obj_get_style_prop>
 800a452:	900b      	str	r0, [sp, #44]	; 0x2c
    return (lv_coord_t)v.num;
 800a454:	b207      	sxth	r7, r0
    lv_coord_t obj_h = lv_obj_get_height(obj);
 800a456:	4620      	mov	r0, r4
 800a458:	f7fd feaf 	bl	80081ba <lv_obj_get_height>
 800a45c:	4682      	mov	sl, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 800a45e:	4620      	mov	r0, r4
 800a460:	f7fd fea5 	bl	80081ae <lv_obj_get_width>
 800a464:	9006      	str	r0, [sp, #24]
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 800a466:	f1b9 0f00 	cmp.w	r9, #0
 800a46a:	bf14      	ite	ne
 800a46c:	463b      	movne	r3, r7
 800a46e:	2300      	moveq	r3, #0
 800a470:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 800a472:	2e00      	cmp	r6, #0
 800a474:	bf08      	it	eq
 800a476:	2700      	moveq	r7, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 800a478:	2221      	movs	r2, #33	; 0x21
 800a47a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 fd14 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800a484:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800a486:	2801      	cmp	r0, #1
 800a488:	f240 80cd 	bls.w	800a626 <lv_obj_get_scrollbar_area+0x352>
    if(ver_draw && content_h) {
 800a48c:	f1b9 0f00 	cmp.w	r9, #0
 800a490:	f000 8111 	beq.w	800a6b6 <lv_obj_get_scrollbar_area+0x3e2>
    lv_coord_t content_h = obj_h + st + sb;
 800a494:	fa1f f98a 	uxth.w	r9, sl
 800a498:	9b03      	ldr	r3, [sp, #12]
 800a49a:	eb09 0003 	add.w	r0, r9, r3
 800a49e:	4480      	add	r8, r0
 800a4a0:	fa1f f388 	uxth.w	r3, r8
 800a4a4:	930e      	str	r3, [sp, #56]	; 0x38
 800a4a6:	fa0f f088 	sxth.w	r0, r8
    if(ver_draw && content_h) {
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f000 8103 	beq.w	800a6b6 <lv_obj_get_scrollbar_area+0x3e2>
        ver_area->y1 = obj->coords.y1;
 800a4b0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 800a4b4:	806b      	strh	r3, [r5, #2]
        ver_area->y2 = obj->coords.y2;
 800a4b6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800a4ba:	80eb      	strh	r3, [r5, #6]
        if(rtl) {
 800a4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	f000 80bc 	beq.w	800a63c <lv_obj_get_scrollbar_area+0x368>
            ver_area->x2 = obj->coords.x2 - right_space;
 800a4c4:	8b23      	ldrh	r3, [r4, #24]
 800a4c6:	9a08      	ldr	r2, [sp, #32]
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	80ab      	strh	r3, [r5, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 800a4ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4d0:	f1c2 0201 	rsb	r2, r2, #1
 800a4d4:	4413      	add	r3, r2
 800a4d6:	802b      	strh	r3, [r5, #0]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 800a4d8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 800a4dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4de:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800a4e2:	9210      	str	r2, [sp, #64]	; 0x40
 800a4e4:	9711      	str	r7, [sp, #68]	; 0x44
 800a4e6:	ebaa 0803 	sub.w	r8, sl, r3
 800a4ea:	eba8 0802 	sub.w	r8, r8, r2
 800a4ee:	eba8 0807 	sub.w	r8, r8, r7
 800a4f2:	fb0a f808 	mul.w	r8, sl, r8
 800a4f6:	fb98 f8f0 	sdiv	r8, r8, r0
 800a4fa:	fa0f f888 	sxth.w	r8, r8
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800a4fe:	46c2      	mov	sl, r8
 800a500:	2000      	movs	r0, #0
 800a502:	f016 fae3 	bl	8020acc <lv_disp_get_dpi>
 800a506:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a50a:	0040      	lsls	r0, r0, #1
 800a50c:	28ef      	cmp	r0, #239	; 0xef
 800a50e:	f300 809f 	bgt.w	800a650 <lv_obj_get_scrollbar_area+0x37c>
 800a512:	2301      	movs	r3, #1
 800a514:	459a      	cmp	sl, r3
 800a516:	f340 80a9 	ble.w	800a66c <lv_obj_get_scrollbar_area+0x398>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800a51a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800a51e:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 800a522:	b2bf      	uxth	r7, r7
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 800a524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a526:	eba3 0309 	sub.w	r3, r3, r9
 800a52a:	b219      	sxth	r1, r3
        if(scroll_h <= 0) {
 800a52c:	2900      	cmp	r1, #0
 800a52e:	f340 80b9 	ble.w	800a6a4 <lv_obj_get_scrollbar_area+0x3d0>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 800a532:	fa1f f888 	uxth.w	r8, r8
 800a536:	eb00 030a 	add.w	r3, r0, sl
 800a53a:	eba9 0303 	sub.w	r3, r9, r3
 800a53e:	1bdb      	subs	r3, r3, r7
 800a540:	eba3 0308 	sub.w	r3, r3, r8
 800a544:	b29b      	uxth	r3, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800a546:	8ae2      	ldrh	r2, [r4, #22]
 800a548:	4402      	add	r2, r0
 800a54a:	eb02 0c03 	add.w	ip, r2, r3
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 800a54e:	b21b      	sxth	r3, r3
 800a550:	9a03      	ldr	r2, [sp, #12]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	fb93 f3f1 	sdiv	r3, r3, r1
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 800a55a:	ebac 0303 	sub.w	r3, ip, r3
 800a55e:	b21a      	sxth	r2, r3
 800a560:	806a      	strh	r2, [r5, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 800a562:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a566:	4443      	add	r3, r8
 800a568:	80eb      	strh	r3, [r5, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 800a56a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 800a56e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a570:	4443      	add	r3, r8
 800a572:	429a      	cmp	r2, r3
 800a574:	f2c0 8143 	blt.w	800a7fe <lv_obj_get_scrollbar_area+0x52a>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 800a578:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 800a57c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800a580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a586:	1a1b      	subs	r3, r3, r0
 800a588:	4299      	cmp	r1, r3
 800a58a:	f340 8094 	ble.w	800a6b6 <lv_obj_get_scrollbar_area+0x3e2>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 800a58e:	eba2 020a 	sub.w	r2, r2, sl
 800a592:	1bd7      	subs	r7, r2, r7
 800a594:	b23f      	sxth	r7, r7
 800a596:	80ef      	strh	r7, [r5, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800a598:	2000      	movs	r0, #0
 800a59a:	f016 fa97 	bl	8020acc <lv_disp_get_dpi>
 800a59e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a5a2:	0043      	lsls	r3, r0, #1
 800a5a4:	2bef      	cmp	r3, #239	; 0xef
 800a5a6:	f300 8169 	bgt.w	800a87c <lv_obj_get_scrollbar_area+0x5a8>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	1afb      	subs	r3, r7, r3
 800a5ae:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	da7f      	bge.n	800a6b6 <lv_obj_get_scrollbar_area+0x3e2>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800a5b6:	88ef      	ldrh	r7, [r5, #6]
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	f016 fa87 	bl	8020acc <lv_disp_get_dpi>
 800a5be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a5c2:	0043      	lsls	r3, r0, #1
 800a5c4:	2bef      	cmp	r3, #239	; 0xef
 800a5c6:	f300 8167 	bgt.w	800a898 <lv_obj_get_scrollbar_area+0x5c4>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	1afb      	subs	r3, r7, r3
 800a5ce:	806b      	strh	r3, [r5, #2]
 800a5d0:	e071      	b.n	800a6b6 <lv_obj_get_scrollbar_area+0x3e2>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800a5d2:	f1b8 0f00 	cmp.w	r8, #0
 800a5d6:	dd0e      	ble.n	800a5f6 <lv_obj_get_scrollbar_area+0x322>
    if((dir & LV_DIR_HOR) &&
 800a5d8:	f010 0f03 	tst.w	r0, #3
 800a5dc:	bf18      	it	ne
 800a5de:	46b1      	movne	r9, r6
 800a5e0:	f000 8293 	beq.w	800ab0a <lv_obj_get_scrollbar_area+0x836>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 800a5e4:	9b04      	ldr	r3, [sp, #16]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f73f af09 	bgt.w	800a3fe <lv_obj_get_scrollbar_area+0x12a>
 800a5ec:	9b05      	ldr	r3, [sp, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f73f af05 	bgt.w	800a3fe <lv_obj_get_scrollbar_area+0x12a>
 800a5f4:	e6ff      	b.n	800a3f6 <lv_obj_get_scrollbar_area+0x122>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dced      	bgt.n	800a5d8 <lv_obj_get_scrollbar_area+0x304>
 800a5fc:	e6f2      	b.n	800a3e4 <lv_obj_get_scrollbar_area+0x110>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 800a5fe:	4638      	mov	r0, r7
 800a600:	f7fa fb1a 	bl	8004c38 <lv_indev_get_scroll_dir>
 800a604:	280c      	cmp	r0, #12
 800a606:	bf14      	ite	ne
 800a608:	f04f 0900 	movne.w	r9, #0
 800a60c:	f04f 0901 	moveq.w	r9, #1
    if((dir & LV_DIR_HOR) &&
 800a610:	f01a 0f03 	tst.w	sl, #3
 800a614:	f43f aeef 	beq.w	800a3f6 <lv_obj_get_scrollbar_area+0x122>
 800a618:	e6bf      	b.n	800a39a <lv_obj_get_scrollbar_area+0xc6>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 800a61a:	f04f 0900 	mov.w	r9, #0
 800a61e:	e7e1      	b.n	800a5e4 <lv_obj_get_scrollbar_area+0x310>
 800a620:	f04f 0900 	mov.w	r9, #0
 800a624:	e6e7      	b.n	800a3f6 <lv_obj_get_scrollbar_area+0x122>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 800a626:	2231      	movs	r2, #49	; 0x31
 800a628:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fc3d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800a632:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 800a634:	2801      	cmp	r0, #1
 800a636:	f63f af29 	bhi.w	800a48c <lv_obj_get_scrollbar_area+0x1b8>
 800a63a:	e66c      	b.n	800a316 <lv_obj_get_scrollbar_area+0x42>
            ver_area->x1 = obj->coords.x1 + left_space;
 800a63c:	8aa3      	ldrh	r3, [r4, #20]
 800a63e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a640:	4413      	add	r3, r2
 800a642:	b29b      	uxth	r3, r3
 800a644:	802b      	strh	r3, [r5, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 800a646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a648:	3a01      	subs	r2, #1
 800a64a:	4413      	add	r3, r2
 800a64c:	80ab      	strh	r3, [r5, #4]
 800a64e:	e743      	b.n	800a4d8 <lv_obj_get_scrollbar_area+0x204>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 800a650:	2000      	movs	r0, #0
 800a652:	f016 fa3b 	bl	8020acc <lv_disp_get_dpi>
 800a656:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a65a:	0043      	lsls	r3, r0, #1
 800a65c:	3350      	adds	r3, #80	; 0x50
 800a65e:	4ab7      	ldr	r2, [pc, #732]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a660:	fb82 1203 	smull	r1, r2, r2, r3
 800a664:	17db      	asrs	r3, r3, #31
 800a666:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a66a:	e753      	b.n	800a514 <lv_obj_get_scrollbar_area+0x240>
 800a66c:	2000      	movs	r0, #0
 800a66e:	f016 fa2d 	bl	8020acc <lv_disp_get_dpi>
 800a672:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a676:	0043      	lsls	r3, r0, #1
 800a678:	2bef      	cmp	r3, #239	; 0xef
 800a67a:	dc02      	bgt.n	800a682 <lv_obj_get_scrollbar_area+0x3ae>
 800a67c:	f04f 0801 	mov.w	r8, #1
 800a680:	e74b      	b.n	800a51a <lv_obj_get_scrollbar_area+0x246>
 800a682:	2000      	movs	r0, #0
 800a684:	f016 fa22 	bl	8020acc <lv_disp_get_dpi>
 800a688:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a68c:	0043      	lsls	r3, r0, #1
 800a68e:	3350      	adds	r3, #80	; 0x50
 800a690:	4aaa      	ldr	r2, [pc, #680]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a692:	fb82 1203 	smull	r1, r2, r2, r3
 800a696:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800a69a:	ebc8 18a2 	rsb	r8, r8, r2, asr #6
 800a69e:	fa0f f888 	sxth.w	r8, r8
 800a6a2:	e73a      	b.n	800a51a <lv_obj_get_scrollbar_area+0x246>
            ver_area->y1 = obj->coords.y1 + top_space;
 800a6a4:	8ae3      	ldrh	r3, [r4, #22]
 800a6a6:	4418      	add	r0, r3
 800a6a8:	8068      	strh	r0, [r5, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 800a6aa:	ea6f 030a 	mvn.w	r3, sl
 800a6ae:	8b62      	ldrh	r2, [r4, #26]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	1bdf      	subs	r7, r3, r7
 800a6b4:	80ef      	strh	r7, [r5, #6]
    if(hor_draw && content_w) {
 800a6b6:	2e00      	cmp	r6, #0
 800a6b8:	f43f ae2d 	beq.w	800a316 <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t content_w = obj_w + sl + sr;
 800a6bc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 800a6c0:	9b05      	ldr	r3, [sp, #20]
 800a6c2:	18f0      	adds	r0, r6, r3
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	4418      	add	r0, r3
 800a6c8:	fa1f f880 	uxth.w	r8, r0
 800a6cc:	b200      	sxth	r0, r0
    if(hor_draw && content_w) {
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f43f ae21 	beq.w	800a316 <lv_obj_get_scrollbar_area+0x42>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 800a6d4:	8b62      	ldrh	r2, [r4, #26]
 800a6d6:	9b07      	ldr	r3, [sp, #28]
 800a6d8:	1ad2      	subs	r2, r2, r3
 800a6da:	b292      	uxth	r2, r2
 800a6dc:	f8ab 2006 	strh.w	r2, [fp, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 800a6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6e2:	f1c3 0301 	rsb	r3, r3, #1
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f8ab 3002 	strh.w	r3, [fp, #2]
        hor_area->x1 = obj->coords.x1;
 800a6ec:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800a6f0:	f8ab 3000 	strh.w	r3, [fp]
        hor_area->x2 = obj->coords.x2;
 800a6f4:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800a6f8:	f8ab 3004 	strh.w	r3, [fp, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 800a6fc:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 800a700:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 800a704:	9a06      	ldr	r2, [sp, #24]
 800a706:	eba2 0509 	sub.w	r5, r2, r9
 800a70a:	eba5 050a 	sub.w	r5, r5, sl
 800a70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a710:	1aed      	subs	r5, r5, r3
 800a712:	fb02 f505 	mul.w	r5, r2, r5
 800a716:	fb95 f0f0 	sdiv	r0, r5, r0
 800a71a:	b205      	sxth	r5, r0
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800a71c:	462f      	mov	r7, r5
 800a71e:	2000      	movs	r0, #0
 800a720:	f016 f9d4 	bl	8020acc <lv_disp_get_dpi>
 800a724:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a728:	0040      	lsls	r0, r0, #1
 800a72a:	28ef      	cmp	r0, #239	; 0xef
 800a72c:	f300 80c3 	bgt.w	800a8b6 <lv_obj_get_scrollbar_area+0x5e2>
 800a730:	2301      	movs	r3, #1
 800a732:	429f      	cmp	r7, r3
 800a734:	f340 80cd 	ble.w	800a8d2 <lv_obj_get_scrollbar_area+0x5fe>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800a738:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800a73c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a740:	9303      	str	r3, [sp, #12]
 800a742:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 800a746:	eba8 0806 	sub.w	r8, r8, r6
 800a74a:	fa0f f888 	sxth.w	r8, r8
        if(scroll_w <= 0) {
 800a74e:	f1b8 0f00 	cmp.w	r8, #0
 800a752:	f340 80d7 	ble.w	800a904 <lv_obj_get_scrollbar_area+0x630>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 800a756:	b2ad      	uxth	r5, r5
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	18c3      	adds	r3, r0, r3
 800a75c:	1af3      	subs	r3, r6, r3
 800a75e:	1bdb      	subs	r3, r3, r7
 800a760:	1b5b      	subs	r3, r3, r5
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 800a762:	b21a      	sxth	r2, r3
 800a764:	9905      	ldr	r1, [sp, #20]
 800a766:	fb01 f202 	mul.w	r2, r1, r2
 800a76a:	fb92 f8f8 	sdiv	r8, r2, r8
            sb_x = rem - sb_x;
 800a76e:	eba3 0308 	sub.w	r3, r3, r8
 800a772:	b29b      	uxth	r3, r3
            if(rtl) {
 800a774:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a776:	2a01      	cmp	r2, #1
 800a778:	f000 80e2 	beq.w	800a940 <lv_obj_get_scrollbar_area+0x66c>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 800a77c:	8aa2      	ldrh	r2, [r4, #20]
 800a77e:	4402      	add	r2, r0
 800a780:	4413      	add	r3, r2
 800a782:	b21a      	sxth	r2, r3
 800a784:	f8ab 2000 	strh.w	r2, [fp]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800a788:	3d01      	subs	r5, #1
 800a78a:	442b      	add	r3, r5
 800a78c:	f8ab 3004 	strh.w	r3, [fp, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 800a790:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 800a794:	44a9      	add	r9, r5
 800a796:	454a      	cmp	r2, r9
 800a798:	f2c0 8161 	blt.w	800aa5e <lv_obj_get_scrollbar_area+0x78a>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 800a79c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 800a7a0:	f9bb 1004 	ldrsh.w	r1, [fp, #4]
 800a7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	eba3 0a0a 	sub.w	sl, r3, sl
 800a7ac:	4551      	cmp	r1, sl
 800a7ae:	f77f adb2 	ble.w	800a316 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 800a7b2:	9b03      	ldr	r3, [sp, #12]
 800a7b4:	1ad4      	subs	r4, r2, r3
 800a7b6:	1be4      	subs	r4, r4, r7
 800a7b8:	b224      	sxth	r4, r4
 800a7ba:	f8ab 4004 	strh.w	r4, [fp, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a7be:	2000      	movs	r0, #0
 800a7c0:	f016 f984 	bl	8020acc <lv_disp_get_dpi>
 800a7c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a7c8:	0043      	lsls	r3, r0, #1
 800a7ca:	2bef      	cmp	r3, #239	; 0xef
 800a7cc:	f300 8183 	bgt.w	800aad6 <lv_obj_get_scrollbar_area+0x802>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	1ae3      	subs	r3, r4, r3
 800a7d4:	f9bb 2000 	ldrsh.w	r2, [fp]
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	f6bf ad9c 	bge.w	800a316 <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a7de:	f8bb 4004 	ldrh.w	r4, [fp, #4]
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	f016 f972 	bl	8020acc <lv_disp_get_dpi>
 800a7e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a7ec:	0043      	lsls	r3, r0, #1
 800a7ee:	2bef      	cmp	r3, #239	; 0xef
 800a7f0:	f300 817f 	bgt.w	800aaf2 <lv_obj_get_scrollbar_area+0x81e>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	1ae3      	subs	r3, r4, r3
 800a7f8:	f8ab 3000 	strh.w	r3, [fp]
 800a7fc:	e58b      	b.n	800a316 <lv_obj_get_scrollbar_area+0x42>
                ver_area->y1 = obj->coords.y1 + top_space;
 800a7fe:	4440      	add	r0, r8
 800a800:	fa0f f880 	sxth.w	r8, r0
 800a804:	f8a5 8002 	strh.w	r8, [r5, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800a808:	2000      	movs	r0, #0
 800a80a:	f016 f95f 	bl	8020acc <lv_disp_get_dpi>
 800a80e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a812:	0043      	lsls	r3, r0, #1
 800a814:	2bef      	cmp	r3, #239	; 0xef
 800a816:	dc14      	bgt.n	800a842 <lv_obj_get_scrollbar_area+0x56e>
 800a818:	2301      	movs	r3, #1
 800a81a:	4443      	add	r3, r8
 800a81c:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 800a820:	4293      	cmp	r3, r2
 800a822:	f77f aea9 	ble.w	800a578 <lv_obj_get_scrollbar_area+0x2a4>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800a826:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 800a82a:	2000      	movs	r0, #0
 800a82c:	f016 f94e 	bl	8020acc <lv_disp_get_dpi>
 800a830:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a834:	0043      	lsls	r3, r0, #1
 800a836:	2bef      	cmp	r3, #239	; 0xef
 800a838:	dc11      	bgt.n	800a85e <lv_obj_get_scrollbar_area+0x58a>
 800a83a:	2301      	movs	r3, #1
 800a83c:	4443      	add	r3, r8
 800a83e:	80eb      	strh	r3, [r5, #6]
 800a840:	e69a      	b.n	800a578 <lv_obj_get_scrollbar_area+0x2a4>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 800a842:	2000      	movs	r0, #0
 800a844:	f016 f942 	bl	8020acc <lv_disp_get_dpi>
 800a848:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a84c:	0043      	lsls	r3, r0, #1
 800a84e:	3350      	adds	r3, #80	; 0x50
 800a850:	4a3a      	ldr	r2, [pc, #232]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a852:	fb82 1203 	smull	r1, r2, r2, r3
 800a856:	17db      	asrs	r3, r3, #31
 800a858:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a85c:	e7dd      	b.n	800a81a <lv_obj_get_scrollbar_area+0x546>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 800a85e:	2000      	movs	r0, #0
 800a860:	f016 f934 	bl	8020acc <lv_disp_get_dpi>
 800a864:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a868:	0043      	lsls	r3, r0, #1
 800a86a:	3350      	adds	r3, #80	; 0x50
 800a86c:	4a33      	ldr	r2, [pc, #204]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a86e:	fb82 1203 	smull	r1, r2, r2, r3
 800a872:	17db      	asrs	r3, r3, #31
 800a874:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a878:	b29b      	uxth	r3, r3
 800a87a:	e7df      	b.n	800a83c <lv_obj_get_scrollbar_area+0x568>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 800a87c:	2000      	movs	r0, #0
 800a87e:	f016 f925 	bl	8020acc <lv_disp_get_dpi>
 800a882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a886:	0043      	lsls	r3, r0, #1
 800a888:	3350      	adds	r3, #80	; 0x50
 800a88a:	4a2c      	ldr	r2, [pc, #176]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a88c:	fb82 1203 	smull	r1, r2, r2, r3
 800a890:	17db      	asrs	r3, r3, #31
 800a892:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a896:	e689      	b.n	800a5ac <lv_obj_get_scrollbar_area+0x2d8>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 800a898:	2000      	movs	r0, #0
 800a89a:	f016 f917 	bl	8020acc <lv_disp_get_dpi>
 800a89e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a8a2:	0043      	lsls	r3, r0, #1
 800a8a4:	3350      	adds	r3, #80	; 0x50
 800a8a6:	4a25      	ldr	r2, [pc, #148]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a8a8:	fb82 1203 	smull	r1, r2, r2, r3
 800a8ac:	17db      	asrs	r3, r3, #31
 800a8ae:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	e68a      	b.n	800a5cc <lv_obj_get_scrollbar_area+0x2f8>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	f016 f908 	bl	8020acc <lv_disp_get_dpi>
 800a8bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a8c0:	0043      	lsls	r3, r0, #1
 800a8c2:	3350      	adds	r3, #80	; 0x50
 800a8c4:	4a1d      	ldr	r2, [pc, #116]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a8c6:	fb82 1203 	smull	r1, r2, r2, r3
 800a8ca:	17db      	asrs	r3, r3, #31
 800a8cc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800a8d0:	e72f      	b.n	800a732 <lv_obj_get_scrollbar_area+0x45e>
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f016 f8fa 	bl	8020acc <lv_disp_get_dpi>
 800a8d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a8dc:	0043      	lsls	r3, r0, #1
 800a8de:	2bef      	cmp	r3, #239	; 0xef
 800a8e0:	dc01      	bgt.n	800a8e6 <lv_obj_get_scrollbar_area+0x612>
 800a8e2:	2501      	movs	r5, #1
 800a8e4:	e728      	b.n	800a738 <lv_obj_get_scrollbar_area+0x464>
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	f016 f8f0 	bl	8020acc <lv_disp_get_dpi>
 800a8ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a8f0:	0043      	lsls	r3, r0, #1
 800a8f2:	3350      	adds	r3, #80	; 0x50
 800a8f4:	4a11      	ldr	r2, [pc, #68]	; (800a93c <lv_obj_get_scrollbar_area+0x668>)
 800a8f6:	fb82 1203 	smull	r1, r2, r2, r3
 800a8fa:	17dd      	asrs	r5, r3, #31
 800a8fc:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
 800a900:	b22d      	sxth	r5, r5
 800a902:	e719      	b.n	800a738 <lv_obj_get_scrollbar_area+0x464>
            if(rtl) {
 800a904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a906:	2b01      	cmp	r3, #1
 800a908:	d00b      	beq.n	800a922 <lv_obj_get_scrollbar_area+0x64e>
                hor_area->x1 = obj->coords.x1 + left_space;
 800a90a:	8aa3      	ldrh	r3, [r4, #20]
 800a90c:	4418      	add	r0, r3
 800a90e:	f8ab 0000 	strh.w	r0, [fp]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	43db      	mvns	r3, r3
 800a916:	8b22      	ldrh	r2, [r4, #24]
 800a918:	4413      	add	r3, r2
 800a91a:	1bdb      	subs	r3, r3, r7
 800a91c:	f8ab 3004 	strh.w	r3, [fp, #4]
 800a920:	e4f9      	b.n	800a316 <lv_obj_get_scrollbar_area+0x42>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 800a922:	1e43      	subs	r3, r0, #1
 800a924:	8aa2      	ldrh	r2, [r4, #20]
 800a926:	4413      	add	r3, r2
 800a928:	443b      	add	r3, r7
 800a92a:	f8ab 3000 	strh.w	r3, [fp]
                hor_area->x2 = obj->coords.x2 - right_space;
 800a92e:	8b23      	ldrh	r3, [r4, #24]
 800a930:	9a03      	ldr	r2, [sp, #12]
 800a932:	1a9f      	subs	r7, r3, r2
 800a934:	f8ab 7004 	strh.w	r7, [fp, #4]
 800a938:	e4ed      	b.n	800a316 <lv_obj_get_scrollbar_area+0x42>
 800a93a:	bf00      	nop
 800a93c:	66666667 	.word	0x66666667
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 800a940:	8aa2      	ldrh	r2, [r4, #20]
 800a942:	4402      	add	r2, r0
 800a944:	443a      	add	r2, r7
 800a946:	4413      	add	r3, r2
 800a948:	b21a      	sxth	r2, r3
 800a94a:	f8ab 2000 	strh.w	r2, [fp]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 800a94e:	3d01      	subs	r5, #1
 800a950:	442b      	add	r3, r5
 800a952:	f8ab 3004 	strh.w	r3, [fp, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 800a956:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800a95a:	eb01 0309 	add.w	r3, r1, r9
 800a95e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a960:	442b      	add	r3, r5
 800a962:	429a      	cmp	r2, r3
 800a964:	db2b      	blt.n	800a9be <lv_obj_get_scrollbar_area+0x6ea>
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 800a966:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800a96a:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800a96e:	eba3 0a0a 	sub.w	sl, r3, sl
 800a972:	4552      	cmp	r2, sl
 800a974:	f77f accf 	ble.w	800a316 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - right_space;
 800a978:	9a03      	ldr	r2, [sp, #12]
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	b21c      	sxth	r4, r3
 800a97e:	f8ab 4004 	strh.w	r4, [fp, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800a982:	2000      	movs	r0, #0
 800a984:	f016 f8a2 	bl	8020acc <lv_disp_get_dpi>
 800a988:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a98c:	0043      	lsls	r3, r0, #1
 800a98e:	2bef      	cmp	r3, #239	; 0xef
 800a990:	dc4e      	bgt.n	800aa30 <lv_obj_get_scrollbar_area+0x75c>
 800a992:	2301      	movs	r3, #1
 800a994:	1ae3      	subs	r3, r4, r3
 800a996:	f9bb 2000 	ldrsh.w	r2, [fp]
 800a99a:	4293      	cmp	r3, r2
 800a99c:	f6bf acbb 	bge.w	800a316 <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800a9a0:	f8bb 4004 	ldrh.w	r4, [fp, #4]
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	f016 f891 	bl	8020acc <lv_disp_get_dpi>
 800a9aa:	230a      	movs	r3, #10
 800a9ac:	fb00 f303 	mul.w	r3, r0, r3
 800a9b0:	2bef      	cmp	r3, #239	; 0xef
 800a9b2:	dc48      	bgt.n	800aa46 <lv_obj_get_scrollbar_area+0x772>
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	1ae3      	subs	r3, r4, r3
 800a9b8:	f8ab 3000 	strh.w	r3, [fp]
 800a9bc:	e4ab      	b.n	800a316 <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 800a9be:	1845      	adds	r5, r0, r1
 800a9c0:	443d      	add	r5, r7
 800a9c2:	b22d      	sxth	r5, r5
 800a9c4:	f8ab 5000 	strh.w	r5, [fp]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	f016 f87f 	bl	8020acc <lv_disp_get_dpi>
 800a9ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a9d2:	0043      	lsls	r3, r0, #1
 800a9d4:	2bef      	cmp	r3, #239	; 0xef
 800a9d6:	dc14      	bgt.n	800aa02 <lv_obj_get_scrollbar_area+0x72e>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	442b      	add	r3, r5
 800a9dc:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	ddc0      	ble.n	800a966 <lv_obj_get_scrollbar_area+0x692>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800a9e4:	f8bb 5000 	ldrh.w	r5, [fp]
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	f016 f86f 	bl	8020acc <lv_disp_get_dpi>
 800a9ee:	230a      	movs	r3, #10
 800a9f0:	fb00 f303 	mul.w	r3, r0, r3
 800a9f4:	2bef      	cmp	r3, #239	; 0xef
 800a9f6:	dc0f      	bgt.n	800aa18 <lv_obj_get_scrollbar_area+0x744>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	442b      	add	r3, r5
 800a9fc:	f8ab 3004 	strh.w	r3, [fp, #4]
 800aa00:	e7b1      	b.n	800a966 <lv_obj_get_scrollbar_area+0x692>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800aa02:	2000      	movs	r0, #0
 800aa04:	f016 f862 	bl	8020acc <lv_disp_get_dpi>
 800aa08:	220a      	movs	r2, #10
 800aa0a:	fb02 f300 	mul.w	r3, r2, r0
 800aa0e:	3350      	adds	r3, #80	; 0x50
 800aa10:	22a0      	movs	r2, #160	; 0xa0
 800aa12:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa16:	e7e0      	b.n	800a9da <lv_obj_get_scrollbar_area+0x706>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800aa18:	2000      	movs	r0, #0
 800aa1a:	f016 f857 	bl	8020acc <lv_disp_get_dpi>
 800aa1e:	220a      	movs	r2, #10
 800aa20:	fb02 f300 	mul.w	r3, r2, r0
 800aa24:	3350      	adds	r3, #80	; 0x50
 800aa26:	22a0      	movs	r2, #160	; 0xa0
 800aa28:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	e7e4      	b.n	800a9fa <lv_obj_get_scrollbar_area+0x726>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800aa30:	2000      	movs	r0, #0
 800aa32:	f016 f84b 	bl	8020acc <lv_disp_get_dpi>
 800aa36:	220a      	movs	r2, #10
 800aa38:	fb02 f300 	mul.w	r3, r2, r0
 800aa3c:	3350      	adds	r3, #80	; 0x50
 800aa3e:	22a0      	movs	r2, #160	; 0xa0
 800aa40:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa44:	e7a6      	b.n	800a994 <lv_obj_get_scrollbar_area+0x6c0>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800aa46:	2000      	movs	r0, #0
 800aa48:	f016 f840 	bl	8020acc <lv_disp_get_dpi>
 800aa4c:	220a      	movs	r2, #10
 800aa4e:	fb02 f300 	mul.w	r3, r2, r0
 800aa52:	3350      	adds	r3, #80	; 0x50
 800aa54:	22a0      	movs	r2, #160	; 0xa0
 800aa56:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	e7ab      	b.n	800a9b6 <lv_obj_get_scrollbar_area+0x6e2>
                    hor_area->x1 = obj->coords.x1 + left_space;
 800aa5e:	4428      	add	r0, r5
 800aa60:	b205      	sxth	r5, r0
 800aa62:	f8ab 5000 	strh.w	r5, [fp]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800aa66:	2000      	movs	r0, #0
 800aa68:	f016 f830 	bl	8020acc <lv_disp_get_dpi>
 800aa6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa70:	0043      	lsls	r3, r0, #1
 800aa72:	2bef      	cmp	r3, #239	; 0xef
 800aa74:	dc15      	bgt.n	800aaa2 <lv_obj_get_scrollbar_area+0x7ce>
 800aa76:	2301      	movs	r3, #1
 800aa78:	442b      	add	r3, r5
 800aa7a:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	f77f ae8c 	ble.w	800a79c <lv_obj_get_scrollbar_area+0x4c8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800aa84:	f8bb 5000 	ldrh.w	r5, [fp]
 800aa88:	2000      	movs	r0, #0
 800aa8a:	f016 f81f 	bl	8020acc <lv_disp_get_dpi>
 800aa8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa92:	0043      	lsls	r3, r0, #1
 800aa94:	2bef      	cmp	r3, #239	; 0xef
 800aa96:	dc12      	bgt.n	800aabe <lv_obj_get_scrollbar_area+0x7ea>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	442b      	add	r3, r5
 800aa9c:	f8ab 3004 	strh.w	r3, [fp, #4]
 800aaa0:	e67c      	b.n	800a79c <lv_obj_get_scrollbar_area+0x4c8>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	f016 f812 	bl	8020acc <lv_disp_get_dpi>
 800aaa8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aaac:	0043      	lsls	r3, r0, #1
 800aaae:	3350      	adds	r3, #80	; 0x50
 800aab0:	4a20      	ldr	r2, [pc, #128]	; (800ab34 <lv_obj_get_scrollbar_area+0x860>)
 800aab2:	fb82 1203 	smull	r1, r2, r2, r3
 800aab6:	17db      	asrs	r3, r3, #31
 800aab8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800aabc:	e7dc      	b.n	800aa78 <lv_obj_get_scrollbar_area+0x7a4>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 800aabe:	2000      	movs	r0, #0
 800aac0:	f016 f804 	bl	8020acc <lv_disp_get_dpi>
 800aac4:	220a      	movs	r2, #10
 800aac6:	fb02 f300 	mul.w	r3, r2, r0
 800aaca:	3350      	adds	r3, #80	; 0x50
 800aacc:	22a0      	movs	r2, #160	; 0xa0
 800aace:	fb93 f3f2 	sdiv	r3, r3, r2
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	e7e1      	b.n	800aa9a <lv_obj_get_scrollbar_area+0x7c6>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 800aad6:	2000      	movs	r0, #0
 800aad8:	f015 fff8 	bl	8020acc <lv_disp_get_dpi>
 800aadc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aae0:	0043      	lsls	r3, r0, #1
 800aae2:	3350      	adds	r3, #80	; 0x50
 800aae4:	4a13      	ldr	r2, [pc, #76]	; (800ab34 <lv_obj_get_scrollbar_area+0x860>)
 800aae6:	fb82 1203 	smull	r1, r2, r2, r3
 800aaea:	17db      	asrs	r3, r3, #31
 800aaec:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800aaf0:	e66f      	b.n	800a7d2 <lv_obj_get_scrollbar_area+0x4fe>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	f015 ffea 	bl	8020acc <lv_disp_get_dpi>
 800aaf8:	220a      	movs	r2, #10
 800aafa:	fb02 f300 	mul.w	r3, r2, r0
 800aafe:	3350      	adds	r3, #80	; 0x50
 800ab00:	22a0      	movs	r2, #160	; 0xa0
 800ab02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	e675      	b.n	800a7f6 <lv_obj_get_scrollbar_area+0x522>
    if((dir & LV_DIR_HOR) &&
 800ab0a:	46b1      	mov	r9, r6
 800ab0c:	2600      	movs	r6, #0
 800ab0e:	e476      	b.n	800a3fe <lv_obj_get_scrollbar_area+0x12a>
 800ab10:	f010 0f03 	tst.w	r0, #3
 800ab14:	f43f abff 	beq.w	800a316 <lv_obj_get_scrollbar_area+0x42>
 800ab18:	f1b9 0f01 	cmp.w	r9, #1
 800ab1c:	bf08      	it	eq
 800ab1e:	f04f 0900 	moveq.w	r9, #0
 800ab22:	f43f ac6c 	beq.w	800a3fe <lv_obj_get_scrollbar_area+0x12a>
 800ab26:	e42b      	b.n	800a380 <lv_obj_get_scrollbar_area+0xac>
        ver_draw = true;
 800ab28:	46b1      	mov	r9, r6
    if((dir & LV_DIR_HOR) &&
 800ab2a:	f010 0603 	ands.w	r6, r0, #3
 800ab2e:	bf18      	it	ne
 800ab30:	2601      	movne	r6, #1
 800ab32:	e464      	b.n	800a3fe <lv_obj_get_scrollbar_area+0x12a>
 800ab34:	66666667 	.word	0x66666667

0800ab38 <lv_obj_scrollbar_invalidate>:
{
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 800ab3e:	466a      	mov	r2, sp
 800ab40:	a902      	add	r1, sp, #8
 800ab42:	f7ff fbc7 	bl	800a2d4 <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 800ab46:	a802      	add	r0, sp, #8
 800ab48:	f016 faaf 	bl	80210aa <lv_area_get_size>
 800ab4c:	b918      	cbnz	r0, 800ab56 <lv_obj_scrollbar_invalidate+0x1e>
 800ab4e:	4668      	mov	r0, sp
 800ab50:	f016 faab 	bl	80210aa <lv_area_get_size>
 800ab54:	b138      	cbz	r0, 800ab66 <lv_obj_scrollbar_invalidate+0x2e>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800ab56:	a802      	add	r0, sp, #8
 800ab58:	f016 faa7 	bl	80210aa <lv_area_get_size>
 800ab5c:	b928      	cbnz	r0, 800ab6a <lv_obj_scrollbar_invalidate+0x32>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800ab5e:	4668      	mov	r0, sp
 800ab60:	f016 faa3 	bl	80210aa <lv_area_get_size>
 800ab64:	b930      	cbnz	r0, 800ab74 <lv_obj_scrollbar_invalidate+0x3c>
}
 800ab66:	b004      	add	sp, #16
 800ab68:	bd10      	pop	{r4, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 800ab6a:	a902      	add	r1, sp, #8
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f7fd fd41 	bl	80085f4 <lv_obj_invalidate_area>
 800ab72:	e7f4      	b.n	800ab5e <lv_obj_scrollbar_invalidate+0x26>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 800ab74:	4669      	mov	r1, sp
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7fd fd3c 	bl	80085f4 <lv_obj_invalidate_area>
 800ab7c:	e7f3      	b.n	800ab66 <lv_obj_scrollbar_invalidate+0x2e>

0800ab7e <lv_obj_readjust_scroll>:
{
 800ab7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 800ab84:	f7fe feec 	bl	8009960 <lv_obj_get_scroll_snap_y>
 800ab88:	b120      	cbz	r0, 800ab94 <lv_obj_readjust_scroll+0x16>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7fe fee0 	bl	8009950 <lv_obj_get_scroll_snap_x>
 800ab90:	b1b0      	cbz	r0, 800abc0 <lv_obj_readjust_scroll+0x42>
}
 800ab92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 800ab94:	4620      	mov	r0, r4
 800ab96:	f7fe fefb 	bl	8009990 <lv_obj_get_scroll_top>
 800ab9a:	4606      	mov	r6, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7fe feff 	bl	80099a0 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 800aba2:	1e03      	subs	r3, r0, #0
 800aba4:	daf1      	bge.n	800ab8a <lv_obj_readjust_scroll+0xc>
 800aba6:	2e00      	cmp	r6, #0
 800aba8:	ddef      	ble.n	800ab8a <lv_obj_readjust_scroll+0xc>
            sb = LV_MIN(st, -sb);
 800abaa:	425b      	negs	r3, r3
 800abac:	429e      	cmp	r6, r3
 800abae:	bfa8      	it	ge
 800abb0:	461e      	movge	r6, r3
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 800abb2:	462b      	mov	r3, r5
 800abb4:	b232      	sxth	r2, r6
 800abb6:	2100      	movs	r1, #0
 800abb8:	4620      	mov	r0, r4
 800abba:	f7ff f8a9 	bl	8009d10 <lv_obj_scroll_by>
 800abbe:	e7e4      	b.n	800ab8a <lv_obj_readjust_scroll+0xc>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 800abc0:	4620      	mov	r0, r4
 800abc2:	f7fe ff57 	bl	8009a74 <lv_obj_get_scroll_left>
 800abc6:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 800abc8:	4620      	mov	r0, r4
 800abca:	f7fe ffc7 	bl	8009b5c <lv_obj_get_scroll_right>
 800abce:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800abd0:	2216      	movs	r2, #22
 800abd2:	2100      	movs	r1, #0
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 f969 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 800abda:	b2c3      	uxtb	r3, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d00e      	beq.n	800abfe <lv_obj_readjust_scroll+0x80>
            if(sr < 0 && sl > 0) {
 800abe0:	2e00      	cmp	r6, #0
 800abe2:	dad6      	bge.n	800ab92 <lv_obj_readjust_scroll+0x14>
 800abe4:	2f00      	cmp	r7, #0
 800abe6:	ddd4      	ble.n	800ab92 <lv_obj_readjust_scroll+0x14>
                sr = LV_MIN(sl, -sr);
 800abe8:	4276      	negs	r6, r6
 800abea:	42be      	cmp	r6, r7
 800abec:	bfa8      	it	ge
 800abee:	463e      	movge	r6, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 800abf0:	462b      	mov	r3, r5
 800abf2:	2200      	movs	r2, #0
 800abf4:	b231      	sxth	r1, r6
 800abf6:	4620      	mov	r0, r4
 800abf8:	f7ff f88a 	bl	8009d10 <lv_obj_scroll_by>
 800abfc:	e7c9      	b.n	800ab92 <lv_obj_readjust_scroll+0x14>
            if(sl < 0 && sr > 0) {
 800abfe:	2f00      	cmp	r7, #0
 800ac00:	dac7      	bge.n	800ab92 <lv_obj_readjust_scroll+0x14>
 800ac02:	2e00      	cmp	r6, #0
 800ac04:	ddc5      	ble.n	800ab92 <lv_obj_readjust_scroll+0x14>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 800ac06:	462b      	mov	r3, r5
 800ac08:	2200      	movs	r2, #0
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f7ff f87f 	bl	8009d10 <lv_obj_scroll_by>
}
 800ac12:	e7be      	b.n	800ab92 <lv_obj_readjust_scroll+0x14>

0800ac14 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 800ac14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac18:	4606      	mov	r6, r0
 800ac1a:	4689      	mov	r9, r1
 800ac1c:	4693      	mov	fp, r2
 800ac1e:	4698      	mov	r8, r3
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800ac20:	482d      	ldr	r0, [pc, #180]	; (800acd8 <trans_del+0xc4>)
 800ac22:	f017 f851 	bl	8021cc8 <_lv_ll_get_tail>
    while(tr != NULL) {
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d04f      	beq.n	800acca <trans_del+0xb6>
 800ac2a:	4604      	mov	r4, r0
        if(tr == tr_limit) break;
 800ac2c:	4540      	cmp	r0, r8
 800ac2e:	d050      	beq.n	800acd2 <trans_del+0xbe>
    bool removed = false;
 800ac30:	2700      	movs	r7, #0

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800ac32:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800acd8 <trans_del+0xc4>
 800ac36:	e00a      	b.n	800ac4e <trans_del+0x3a>

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800ac38:	88ab      	ldrh	r3, [r5, #4]
 800ac3a:	455b      	cmp	r3, fp
 800ac3c:	d017      	beq.n	800ac6e <trans_del+0x5a>
 800ac3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac42:	459b      	cmp	fp, r3
 800ac44:	d013      	beq.n	800ac6e <trans_del+0x5a>
    while(tr != NULL) {
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d040      	beq.n	800accc <trans_del+0xb8>
        if(tr == tr_limit) break;
 800ac4a:	45a0      	cmp	r8, r4
 800ac4c:	d03e      	beq.n	800accc <trans_del+0xb8>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800ac4e:	4625      	mov	r5, r4
 800ac50:	4621      	mov	r1, r4
 800ac52:	4650      	mov	r0, sl
 800ac54:	f017 f840 	bl	8021cd8 <_lv_ll_get_prev>
 800ac58:	4604      	mov	r4, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 800ac5a:	682b      	ldr	r3, [r5, #0]
 800ac5c:	42b3      	cmp	r3, r6
 800ac5e:	d1f2      	bne.n	800ac46 <trans_del+0x32>
 800ac60:	68ab      	ldr	r3, [r5, #8]
 800ac62:	454b      	cmp	r3, r9
 800ac64:	d0e8      	beq.n	800ac38 <trans_del+0x24>
 800ac66:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
 800ac6a:	d1ec      	bne.n	800ac46 <trans_del+0x32>
 800ac6c:	e7e4      	b.n	800ac38 <trans_del+0x24>
            /*Remove any transitioned properties from the trans. style
             *to allow changing it by normal styles*/
            uint32_t i;
            for(i = 0; i < obj->style_cnt; i++) {
 800ac6e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 800ac70:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800ac74:	bf18      	it	ne
 800ac76:	2700      	movne	r7, #0
 800ac78:	d116      	bne.n	800aca8 <trans_del+0x94>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
                }
            }

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f016 f8f7 	bl	8020e70 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800ac82:	4629      	mov	r1, r5
 800ac84:	4650      	mov	r0, sl
 800ac86:	f016 ffd8 	bl	8021c3a <_lv_ll_remove>
            lv_mem_free(tr);
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f017 f96c 	bl	8021f68 <lv_mem_free>
            removed = true;
 800ac90:	2701      	movs	r7, #1
 800ac92:	e7d8      	b.n	800ac46 <trans_del+0x32>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 800ac94:	88a9      	ldrh	r1, [r5, #4]
 800ac96:	5810      	ldr	r0, [r2, r0]
 800ac98:	f018 f994 	bl	8022fc4 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 800ac9c:	3701      	adds	r7, #1
 800ac9e:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 800aca0:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800aca4:	42bb      	cmp	r3, r7
 800aca6:	d9e8      	bls.n	800ac7a <trans_del+0x66>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 800aca8:	00f8      	lsls	r0, r7, #3
 800acaa:	68f2      	ldr	r2, [r6, #12]
 800acac:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
 800acb0:	79d9      	ldrb	r1, [r3, #7]
 800acb2:	f011 0f02 	tst.w	r1, #2
 800acb6:	d0f1      	beq.n	800ac9c <trans_del+0x88>
 800acb8:	f5b9 2f70 	cmp.w	r9, #983040	; 0xf0000
 800acbc:	d0ea      	beq.n	800ac94 <trans_del+0x80>
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800acc4:	454b      	cmp	r3, r9
 800acc6:	d1e9      	bne.n	800ac9c <trans_del+0x88>
 800acc8:	e7e4      	b.n	800ac94 <trans_del+0x80>
    bool removed = false;
 800acca:	2700      	movs	r7, #0

        }
        tr = tr_prev;
    }
    return removed;
}
 800accc:	4638      	mov	r0, r7
 800acce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool removed = false;
 800acd2:	2700      	movs	r7, #0
 800acd4:	e7fa      	b.n	800accc <trans_del+0xb8>
 800acd6:	bf00      	nop
 800acd8:	2000296c 	.word	0x2000296c

0800acdc <refresh_children_style>:
{
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800ace2:	f001 f83e 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800ace6:	b1c8      	cbz	r0, 800ad1c <refresh_children_style+0x40>
 800ace8:	4607      	mov	r7, r0
 800acea:	2500      	movs	r5, #0
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800acec:	46a9      	mov	r9, r5
 800acee:	f04f 082a 	mov.w	r8, #42	; 0x2a
        lv_obj_t * child = obj->spec_attr->children[i];
 800acf2:	68b3      	ldr	r3, [r6, #8]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
        lv_obj_invalidate(child);
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7fd fc9e 	bl	800863c <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 800ad00:	464a      	mov	r2, r9
 800ad02:	4641      	mov	r1, r8
 800ad04:	4620      	mov	r0, r4
 800ad06:	f7f9 fb5d 	bl	80043c4 <lv_event_send>
        lv_obj_invalidate(child);
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f7fd fc96 	bl	800863c <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 800ad10:	4620      	mov	r0, r4
 800ad12:	f7ff ffe3 	bl	800acdc <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 800ad16:	3501      	adds	r5, #1
 800ad18:	42af      	cmp	r7, r5
 800ad1a:	d1ea      	bne.n	800acf2 <refresh_children_style+0x16>
}
 800ad1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ad20 <get_local_style>:
{
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	4604      	mov	r4, r0
 800ad26:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 800ad28:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 800ad2a:	f3c7 07c5 	ubfx	r7, r7, #3, #6
 800ad2e:	b197      	cbz	r7, 800ad56 <get_local_style+0x36>
 800ad30:	4638      	mov	r0, r7
 800ad32:	68e3      	ldr	r3, [r4, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	e003      	b.n	800ad40 <get_local_style+0x20>
 800ad38:	3201      	adds	r2, #1
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	4282      	cmp	r2, r0
 800ad3e:	d00b      	beq.n	800ad58 <get_local_style+0x38>
        if(obj->styles[i].is_local &&
 800ad40:	79d9      	ldrb	r1, [r3, #7]
 800ad42:	f011 0f01 	tst.w	r1, #1
 800ad46:	d0f7      	beq.n	800ad38 <get_local_style+0x18>
           obj->styles[i].selector == selector) {
 800ad48:	6859      	ldr	r1, [r3, #4]
 800ad4a:	f3c1 0117 	ubfx	r1, r1, #0, #24
        if(obj->styles[i].is_local &&
 800ad4e:	42a9      	cmp	r1, r5
 800ad50:	d1f2      	bne.n	800ad38 <get_local_style+0x18>
            return obj->styles[i].style;
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	e045      	b.n	800ade2 <get_local_style+0xc2>
    for(i = 0; i < obj->style_cnt; i++) {
 800ad56:	2700      	movs	r7, #0
    obj->style_cnt++;
 800ad58:	1c79      	adds	r1, r7, #1
 800ad5a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800ad5e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ad60:	f361 03c8 	bfi	r3, r1, #3, #6
 800ad64:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800ad66:	00c9      	lsls	r1, r1, #3
 800ad68:	68e0      	ldr	r0, [r4, #12]
 800ad6a:	f017 f919 	bl	8021fa0 <lv_mem_realloc>
 800ad6e:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->styles);
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d038      	beq.n	800ade6 <get_local_style+0xc6>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800ad74:	8c66      	ldrh	r6, [r4, #34]	; 0x22
 800ad76:	f3c6 06c5 	ubfx	r6, r6, #3, #6
 800ad7a:	3e01      	subs	r6, #1
 800ad7c:	d00f      	beq.n	800ad9e <get_local_style+0x7e>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 800ad7e:	68e2      	ldr	r2, [r4, #12]
 800ad80:	00f1      	lsls	r1, r6, #3
 800ad82:	f1a1 0308 	sub.w	r3, r1, #8
 800ad86:	4413      	add	r3, r2
 800ad88:	79d8      	ldrb	r0, [r3, #7]
 800ad8a:	f010 0f03 	tst.w	r0, #3
 800ad8e:	d106      	bne.n	800ad9e <get_local_style+0x7e>
        obj->styles[i] = obj->styles[i - 1];
 800ad90:	440a      	add	r2, r1
 800ad92:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad96:	e882 0003 	stmia.w	r2, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800ad9a:	3e01      	subs	r6, #1
 800ad9c:	d1ef      	bne.n	800ad7e <get_local_style+0x5e>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800ad9e:	00f7      	lsls	r7, r6, #3
 800ada0:	68e0      	ldr	r0, [r4, #12]
 800ada2:	2108      	movs	r1, #8
 800ada4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800ada8:	f017 fb40 	bl	802242c <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 800adac:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800adb0:	2008      	movs	r0, #8
 800adb2:	f017 f8bb 	bl	8021f2c <lv_mem_alloc>
 800adb6:	f848 0036 	str.w	r0, [r8, r6, lsl #3]
    lv_style_init(obj->styles[i].style);
 800adba:	68e3      	ldr	r3, [r4, #12]
 800adbc:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
 800adc0:	f018 f8ab 	bl	8022f1a <lv_style_init>
    obj->styles[i].is_local = 1;
 800adc4:	68e3      	ldr	r3, [r4, #12]
 800adc6:	443b      	add	r3, r7
 800adc8:	79da      	ldrb	r2, [r3, #7]
 800adca:	f042 0201 	orr.w	r2, r2, #1
 800adce:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 800add0:	68e3      	ldr	r3, [r4, #12]
 800add2:	443b      	add	r3, r7
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	f365 0217 	bfi	r2, r5, #0, #24
 800adda:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 800addc:	68e3      	ldr	r3, [r4, #12]
 800adde:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
}
 800ade2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(obj->styles);
 800ade6:	e7fe      	b.n	800ade6 <get_local_style+0xc6>

0800ade8 <get_trans_style>:
{
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	4604      	mov	r4, r0
 800adec:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 800adee:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 800adf0:	f3c0 00c5 	ubfx	r0, r0, #3, #6
 800adf4:	b1c0      	cbz	r0, 800ae28 <get_trans_style+0x40>
 800adf6:	4601      	mov	r1, r0
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800adf8:	68e6      	ldr	r6, [r4, #12]
 800adfa:	4633      	mov	r3, r6
    for(i = 0; i < obj->style_cnt; i++) {
 800adfc:	2200      	movs	r2, #0
 800adfe:	e003      	b.n	800ae08 <get_trans_style+0x20>
 800ae00:	3201      	adds	r2, #1
 800ae02:	3308      	adds	r3, #8
 800ae04:	428a      	cmp	r2, r1
 800ae06:	d010      	beq.n	800ae2a <get_trans_style+0x42>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 800ae08:	f893 c007 	ldrb.w	ip, [r3, #7]
 800ae0c:	f01c 0f02 	tst.w	ip, #2
 800ae10:	d0f6      	beq.n	800ae00 <get_trans_style+0x18>
 800ae12:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800ae16:	f3cc 0c17 	ubfx	ip, ip, #0, #24
 800ae1a:	45ac      	cmp	ip, r5
 800ae1c:	d1f0      	bne.n	800ae00 <get_trans_style+0x18>
    if(i != obj->style_cnt) return &obj->styles[i];
 800ae1e:	4291      	cmp	r1, r2
 800ae20:	d003      	beq.n	800ae2a <get_trans_style+0x42>
 800ae22:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
}
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 800ae28:	2000      	movs	r0, #0
    obj->style_cnt++;
 800ae2a:	1c41      	adds	r1, r0, #1
 800ae2c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800ae30:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ae32:	f361 03c8 	bfi	r3, r1, #3, #6
 800ae36:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800ae38:	00c9      	lsls	r1, r1, #3
 800ae3a:	68e0      	ldr	r0, [r4, #12]
 800ae3c:	f017 f8b0 	bl	8021fa0 <lv_mem_realloc>
 800ae40:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800ae42:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800ae44:	f3c2 02c5 	ubfx	r2, r2, #3, #6
 800ae48:	3a01      	subs	r2, #1
 800ae4a:	d008      	beq.n	800ae5e <get_trans_style+0x76>
        obj->styles[i] = obj->styles[i - 1];
 800ae4c:	68e3      	ldr	r3, [r4, #12]
 800ae4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae52:	e913 0003 	ldmdb	r3, {r0, r1}
 800ae56:	e883 0003 	stmia.w	r3, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 800ae5a:	3a01      	subs	r2, #1
 800ae5c:	d1f6      	bne.n	800ae4c <get_trans_style+0x64>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 800ae5e:	2108      	movs	r1, #8
 800ae60:	68e0      	ldr	r0, [r4, #12]
 800ae62:	f017 fae3 	bl	802242c <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 800ae66:	68e6      	ldr	r6, [r4, #12]
 800ae68:	2008      	movs	r0, #8
 800ae6a:	f017 f85f 	bl	8021f2c <lv_mem_alloc>
 800ae6e:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 800ae70:	68e3      	ldr	r3, [r4, #12]
 800ae72:	6818      	ldr	r0, [r3, #0]
 800ae74:	f018 f851 	bl	8022f1a <lv_style_init>
    obj->styles[0].is_trans = 1;
 800ae78:	68e2      	ldr	r2, [r4, #12]
 800ae7a:	79d3      	ldrb	r3, [r2, #7]
 800ae7c:	f043 0302 	orr.w	r3, r3, #2
 800ae80:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 800ae82:	68e3      	ldr	r3, [r4, #12]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	f365 0217 	bfi	r2, r5, #0, #24
 800ae8a:	605a      	str	r2, [r3, #4]
    return &obj->styles[0];
 800ae8c:	68e0      	ldr	r0, [r4, #12]
 800ae8e:	e7ca      	b.n	800ae26 <get_trans_style+0x3e>

0800ae90 <_lv_obj_style_init>:
{
 800ae90:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 800ae92:	2114      	movs	r1, #20
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <_lv_obj_style_init+0xc>)
 800ae96:	f016 fe8a 	bl	8021bae <_lv_ll_init>
}
 800ae9a:	bd08      	pop	{r3, pc}
 800ae9c:	2000296c 	.word	0x2000296c

0800aea0 <lv_obj_enable_style_refresh>:
    style_refr = en;
 800aea0:	4b01      	ldr	r3, [pc, #4]	; (800aea8 <lv_obj_enable_style_refresh+0x8>)
 800aea2:	7018      	strb	r0, [r3, #0]
}
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	20000708 	.word	0x20000708

0800aeac <lv_obj_get_style_prop>:
{
 800aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb0:	b085      	sub	sp, #20
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	460f      	mov	r7, r1
 800aeb6:	4693      	mov	fp, r2
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f018 fa6f 	bl	802339c <_lv_style_prop_lookup_flags>
 800aebe:	f000 0301 	and.w	r3, r0, #1
 800aec2:	9301      	str	r3, [sp, #4]
    while(obj) {
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	f040 8098 	bne.w	800affa <lv_obj_get_style_prop+0x14e>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 800aeca:	b92f      	cbnz	r7, 800aed8 <lv_obj_get_style_prop+0x2c>
 800aecc:	f1bb 0f01 	cmp.w	fp, #1
 800aed0:	d072      	beq.n	800afb8 <lv_obj_get_style_prop+0x10c>
 800aed2:	f1bb 0f04 	cmp.w	fp, #4
 800aed6:	d06f      	beq.n	800afb8 <lv_obj_get_style_prop+0x10c>
            value_act = lv_style_prop_get_default(prop);
 800aed8:	4658      	mov	r0, fp
 800aeda:	f018 f8f3 	bl	80230c4 <lv_style_prop_get_default>
 800aede:	e066      	b.n	800afae <lv_obj_get_style_prop+0x102>
            *v = value_tmp;
 800aee0:	9803      	ldr	r0, [sp, #12]
            return LV_STYLE_RES_FOUND;
 800aee2:	e064      	b.n	800afae <lv_obj_get_style_prop+0x102>
    for(i = 0; i < obj->style_cnt; i++) {
 800aee4:	3401      	adds	r4, #1
 800aee6:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800aee8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800aeec:	429c      	cmp	r4, r3
 800aeee:	d277      	bcs.n	800afe0 <lv_obj_get_style_prop+0x134>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 800aef0:	00e0      	lsls	r0, r4, #3
 800aef2:	68ea      	ldr	r2, [r5, #12]
 800aef4:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
        if(obj_style->is_trans == false) break;
 800aef8:	79d9      	ldrb	r1, [r3, #7]
 800aefa:	f011 0f02 	tst.w	r1, #2
 800aefe:	d017      	beq.n	800af30 <lv_obj_get_style_prop+0x84>
        if(skip_trans) continue;
 800af00:	2e00      	cmp	r6, #0
 800af02:	d1ef      	bne.n	800aee4 <lv_obj_get_style_prop+0x38>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800af04:	685b      	ldr	r3, [r3, #4]
    return selector & 0xFF0000;
 800af06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800af0a:	42bb      	cmp	r3, r7
 800af0c:	d1ea      	bne.n	800aee4 <lv_obj_get_style_prop+0x38>
        if((obj_style->style->has_group & group) == 0) continue;
 800af0e:	5810      	ldr	r0, [r2, r0]
 800af10:	7983      	ldrb	r3, [r0, #6]
 800af12:	ea18 0f03 	tst.w	r8, r3
 800af16:	d0e5      	beq.n	800aee4 <lv_obj_get_style_prop+0x38>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800af18:	aa03      	add	r2, sp, #12
 800af1a:	4659      	mov	r1, fp
 800af1c:	f018 f92a 	bl	8023174 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 800af20:	2801      	cmp	r0, #1
 800af22:	d0dd      	beq.n	800aee0 <lv_obj_get_style_prop+0x34>
        else if(found == LV_STYLE_RES_INHERIT) {
 800af24:	2802      	cmp	r0, #2
 800af26:	d1dd      	bne.n	800aee4 <lv_obj_get_style_prop+0x38>
        if(!inheritable) break;
 800af28:	9b01      	ldr	r3, [sp, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d15e      	bne.n	800afec <lv_obj_get_style_prop+0x140>
 800af2e:	e7cc      	b.n	800aeca <lv_obj_get_style_prop+0x1e>
    for(; i < obj->style_cnt; i++) {
 800af30:	4646      	mov	r6, r8
 800af32:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800af34:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800af38:	42a3      	cmp	r3, r4
 800af3a:	d951      	bls.n	800afe0 <lv_obj_get_style_prop+0x134>
 800af3c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800af40:	e012      	b.n	800af68 <lv_obj_get_style_prop+0xbc>
            if(state_act == state) {
 800af42:	9b00      	ldr	r3, [sp, #0]
 800af44:	4543      	cmp	r3, r8
 800af46:	d007      	beq.n	800af58 <lv_obj_get_style_prop+0xac>
    for(; i < obj->style_cnt; i++) {
 800af48:	3401      	adds	r4, #1
 800af4a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800af4c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800af50:	429c      	cmp	r4, r3
 800af52:	d22b      	bcs.n	800afac <lv_obj_get_style_prop+0x100>
                weight = state_act;
 800af54:	46c2      	mov	sl, r8
 800af56:	e007      	b.n	800af68 <lv_obj_get_style_prop+0xbc>
                *v = value_tmp;
 800af58:	9803      	ldr	r0, [sp, #12]
                return LV_STYLE_RES_FOUND;
 800af5a:	e028      	b.n	800afae <lv_obj_get_style_prop+0x102>
    for(; i < obj->style_cnt; i++) {
 800af5c:	3401      	adds	r4, #1
 800af5e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800af60:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800af64:	429c      	cmp	r4, r3
 800af66:	d21e      	bcs.n	800afa6 <lv_obj_get_style_prop+0xfa>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 800af68:	68eb      	ldr	r3, [r5, #12]
 800af6a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800af6e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800af72:	7983      	ldrb	r3, [r0, #6]
 800af74:	421e      	tst	r6, r3
 800af76:	d0f1      	beq.n	800af5c <lv_obj_get_style_prop+0xb0>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 800af78:	6853      	ldr	r3, [r2, #4]
 800af7a:	f3c3 0217 	ubfx	r2, r3, #0, #24
    return selector & 0xFF0000;
 800af7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        if(part_act != part) continue;
 800af82:	42bb      	cmp	r3, r7
 800af84:	d1ea      	bne.n	800af5c <lv_obj_get_style_prop+0xb0>
    return selector & 0xFFFF;
 800af86:	fa1f f882 	uxth.w	r8, r2
        if((state_act & state_inv)) continue;
 800af8a:	ea12 0f09 	tst.w	r2, r9
 800af8e:	d1e5      	bne.n	800af5c <lv_obj_get_style_prop+0xb0>
        if(state_act <= weight) continue;
 800af90:	45d0      	cmp	r8, sl
 800af92:	dde3      	ble.n	800af5c <lv_obj_get_style_prop+0xb0>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 800af94:	aa03      	add	r2, sp, #12
 800af96:	4659      	mov	r1, fp
 800af98:	f018 f8ec 	bl	8023174 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 800af9c:	2801      	cmp	r0, #1
 800af9e:	d0d0      	beq.n	800af42 <lv_obj_get_style_prop+0x96>
        else if(found == LV_STYLE_RES_INHERIT) {
 800afa0:	2802      	cmp	r0, #2
 800afa2:	d1db      	bne.n	800af5c <lv_obj_get_style_prop+0xb0>
 800afa4:	e7c0      	b.n	800af28 <lv_obj_get_style_prop+0x7c>
    if(weight >= 0) {
 800afa6:	f1ba 0f00 	cmp.w	sl, #0
 800afaa:	db19      	blt.n	800afe0 <lv_obj_get_style_prop+0x134>
        *v = value_tmp;
 800afac:	9803      	ldr	r0, [sp, #12]
}
 800afae:	b005      	add	sp, #20
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            part = LV_PART_MAIN;
 800afb4:	2700      	movs	r7, #0
 800afb6:	e020      	b.n	800affa <lv_obj_get_style_prop+0x14e>
            const lv_obj_class_t * cls = obj->class_p;
 800afb8:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 800afba:	b93b      	cbnz	r3, 800afcc <lv_obj_get_style_prop+0x120>
                value_act.num = 0;
 800afbc:	2000      	movs	r0, #0
 800afbe:	e7f6      	b.n	800afae <lv_obj_get_style_prop+0x102>
                    if(cls->width_def != 0) break;
 800afc0:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d1f2      	bne.n	800afae <lv_obj_get_style_prop+0x102>
                cls = cls->base_class;
 800afc8:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 800afca:	b13b      	cbz	r3, 800afdc <lv_obj_get_style_prop+0x130>
                if(prop == LV_STYLE_WIDTH) {
 800afcc:	f1bb 0f01 	cmp.w	fp, #1
 800afd0:	d0f6      	beq.n	800afc0 <lv_obj_get_style_prop+0x114>
                    if(cls->height_def != 0) break;
 800afd2:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d0f6      	beq.n	800afc8 <lv_obj_get_style_prop+0x11c>
 800afda:	e7e8      	b.n	800afae <lv_obj_get_style_prop+0x102>
                value_act.num = 0;
 800afdc:	2000      	movs	r0, #0
 800afde:	e7e6      	b.n	800afae <lv_obj_get_style_prop+0x102>
        if(!inheritable) break;
 800afe0:	9b01      	ldr	r3, [sp, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f43f af71 	beq.w	800aeca <lv_obj_get_style_prop+0x1e>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 800afe8:	2f00      	cmp	r7, #0
 800afea:	d1e3      	bne.n	800afb4 <lv_obj_get_style_prop+0x108>
        obj = lv_obj_get_parent(obj);
 800afec:	4628      	mov	r0, r5
 800afee:	f000 fe9f 	bl	800bd30 <lv_obj_get_parent>
    while(obj) {
 800aff2:	4605      	mov	r5, r0
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f43f af68 	beq.w	800aeca <lv_obj_get_style_prop+0x1e>
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 800affa:	4658      	mov	r0, fp
 800affc:	f018 f92f 	bl	802325e <_lv_style_get_prop_group>
 800b000:	2301      	movs	r3, #1
 800b002:	fa03 f600 	lsl.w	r6, r3, r0
 800b006:	b2f6      	uxtb	r6, r6
    lv_state_t state = obj->state;
 800b008:	8c2b      	ldrh	r3, [r5, #32]
 800b00a:	9300      	str	r3, [sp, #0]
    lv_state_t state_inv = ~state;
 800b00c:	ea6f 0903 	mvn.w	r9, r3
 800b010:	fa1f f989 	uxth.w	r9, r9
    bool skip_trans = obj->skip_trans;
 800b014:	f895 8022 	ldrb.w	r8, [r5, #34]	; 0x22
 800b018:	f3c8 0880 	ubfx	r8, r8, #2, #1
    for(i = 0; i < obj->style_cnt; i++) {
 800b01c:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800b01e:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b022:	d0dd      	beq.n	800afe0 <lv_obj_get_style_prop+0x134>
 800b024:	2400      	movs	r4, #0
 800b026:	4643      	mov	r3, r8
 800b028:	46b0      	mov	r8, r6
 800b02a:	461e      	mov	r6, r3
 800b02c:	e760      	b.n	800aef0 <lv_obj_get_style_prop+0x44>
	...

0800b030 <lv_obj_refresh_style>:
    if(!style_refr) return;
 800b030:	4b60      	ldr	r3, [pc, #384]	; (800b1b4 <lv_obj_refresh_style+0x184>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b903      	cbnz	r3, 800b038 <lv_obj_refresh_style+0x8>
 800b036:	4770      	bx	lr
{
 800b038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b03c:	4606      	mov	r6, r0
 800b03e:	460c      	mov	r4, r1
 800b040:	4615      	mov	r5, r2
    lv_obj_invalidate(obj);
 800b042:	f7fd fafb 	bl	800863c <lv_obj_invalidate>
    return selector & 0xFF0000;
 800b046:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800b04a:	4628      	mov	r0, r5
 800b04c:	f018 f9a6 	bl	802339c <_lv_style_prop_lookup_flags>
 800b050:	f000 0704 	and.w	r7, r0, #4
 800b054:	4628      	mov	r0, r5
 800b056:	f018 f9a1 	bl	802339c <_lv_style_prop_lookup_flags>
 800b05a:	f000 0802 	and.w	r8, r0, #2
 800b05e:	4628      	mov	r0, r5
 800b060:	f018 f99c 	bl	802339c <_lv_style_prop_lookup_flags>
 800b064:	4681      	mov	r9, r0
 800b066:	4628      	mov	r0, r5
 800b068:	f018 f998 	bl	802339c <_lv_style_prop_lookup_flags>
 800b06c:	4682      	mov	sl, r0
    if(is_layout_refr) {
 800b06e:	b15f      	cbz	r7, 800b088 <lv_obj_refresh_style+0x58>
        if(part == LV_PART_ANY ||
 800b070:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 800b074:	d000      	beq.n	800b078 <lv_obj_refresh_style+0x48>
 800b076:	bb6c      	cbnz	r4, 800b0d4 <lv_obj_refresh_style+0xa4>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 800b078:	2200      	movs	r2, #0
 800b07a:	212a      	movs	r1, #42	; 0x2a
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7f9 f9a1 	bl	80043c4 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 800b082:	4630      	mov	r0, r6
 800b084:	f7fc ffe6 	bl	8008054 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 800b088:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 800b08c:	d000      	beq.n	800b090 <lv_obj_refresh_style+0x60>
 800b08e:	b984      	cbnz	r4, 800b0b2 <lv_obj_refresh_style+0x82>
 800b090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b094:	429d      	cmp	r5, r3
 800b096:	d000      	beq.n	800b09a <lv_obj_refresh_style+0x6a>
 800b098:	b12f      	cbz	r7, 800b0a6 <lv_obj_refresh_style+0x76>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 800b09a:	4630      	mov	r0, r6
 800b09c:	f000 fe48 	bl	800bd30 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 800b0a0:	b108      	cbz	r0, 800b0a6 <lv_obj_refresh_style+0x76>
 800b0a2:	f7fc ffd7 	bl	8008054 <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800b0a6:	f5b4 2f70 	cmp.w	r4, #983040	; 0xf0000
 800b0aa:	d128      	bne.n	800b0fe <lv_obj_refresh_style+0xce>
 800b0ac:	f01a 0f10 	tst.w	sl, #16
 800b0b0:	d128      	bne.n	800b104 <lv_obj_refresh_style+0xd4>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 800b0b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0b6:	429d      	cmp	r5, r3
 800b0b8:	d070      	beq.n	800b19c <lv_obj_refresh_style+0x16c>
 800b0ba:	f1b8 0f00 	cmp.w	r8, #0
 800b0be:	d166      	bne.n	800b18e <lv_obj_refresh_style+0x15e>
    lv_obj_invalidate(obj);
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	f7fd fabb 	bl	800863c <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800b0c6:	f019 0f01 	tst.w	r9, #1
 800b0ca:	d070      	beq.n	800b1ae <lv_obj_refresh_style+0x17e>
 800b0cc:	ea58 0307 	orrs.w	r3, r8, r7
 800b0d0:	d06d      	beq.n	800b1ae <lv_obj_refresh_style+0x17e>
 800b0d2:	e069      	b.n	800b1a8 <lv_obj_refresh_style+0x178>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 800b0d4:	2204      	movs	r2, #4
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7ff fee7 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b0de:	b200      	sxth	r0, r0
           part == LV_PART_MAIN ||
 800b0e0:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800b0e4:	4298      	cmp	r0, r3
 800b0e6:	d0c7      	beq.n	800b078 <lv_obj_refresh_style+0x48>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff fedd 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b0f2:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 800b0f4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 800b0f8:	4298      	cmp	r0, r3
 800b0fa:	d1da      	bne.n	800b0b2 <lv_obj_refresh_style+0x82>
 800b0fc:	e7bc      	b.n	800b078 <lv_obj_refresh_style+0x48>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 800b0fe:	2c00      	cmp	r4, #0
 800b100:	d0d4      	beq.n	800b0ac <lv_obj_refresh_style+0x7c>
 800b102:	e7d6      	b.n	800b0b2 <lv_obj_refresh_style+0x82>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800b104:	226d      	movs	r2, #109	; 0x6d
 800b106:	2100      	movs	r1, #0
 800b108:	4630      	mov	r0, r6
 800b10a:	f7ff fecf 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b10e:	b200      	sxth	r0, r0
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800b110:	bb98      	cbnz	r0, 800b17a <lv_obj_refresh_style+0x14a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800b112:	226c      	movs	r2, #108	; 0x6c
 800b114:	2100      	movs	r1, #0
 800b116:	4630      	mov	r0, r6
 800b118:	f7ff fec8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800b11c:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 800b11e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b122:	d002      	beq.n	800b12a <lv_obj_refresh_style+0xfa>
 800b124:	f04f 0a02 	mov.w	sl, #2
 800b128:	e029      	b.n	800b17e <lv_obj_refresh_style+0x14e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800b12a:	2260      	movs	r2, #96	; 0x60
 800b12c:	2100      	movs	r1, #0
 800b12e:	4630      	mov	r0, r6
 800b130:	f7ff febc 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800b134:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_opa(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 800b136:	28ff      	cmp	r0, #255	; 0xff
 800b138:	d002      	beq.n	800b140 <lv_obj_refresh_style+0x110>
 800b13a:	f04f 0a01 	mov.w	sl, #1
 800b13e:	e01e      	b.n	800b17e <lv_obj_refresh_style+0x14e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800b140:	2267      	movs	r2, #103	; 0x67
 800b142:	2100      	movs	r1, #0
 800b144:	4630      	mov	r0, r6
 800b146:	f7ff feb1 	bl	800aeac <lv_obj_get_style_prop>

#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 800b14a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800b14e:	bf14      	ite	ne
 800b150:	f04f 0a01 	movne.w	sl, #1
 800b154:	f04f 0a00 	moveq.w	sl, #0
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800b158:	68b3      	ldr	r3, [r6, #8]
 800b15a:	b99b      	cbnz	r3, 800b184 <lv_obj_refresh_style+0x154>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d0a8      	beq.n	800b0b2 <lv_obj_refresh_style+0x82>
            lv_obj_allocate_spec_attr(obj);
 800b160:	4630      	mov	r0, r6
 800b162:	f7fc f9bf 	bl	80074e4 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 800b166:	68b3      	ldr	r3, [r6, #8]
 800b168:	7e9a      	ldrb	r2, [r3, #26]
 800b16a:	f36a 1287 	bfi	r2, sl, #6, #2
 800b16e:	769a      	strb	r2, [r3, #26]
 800b170:	e79f      	b.n	800b0b2 <lv_obj_refresh_style+0x82>
            refresh_children_style(obj);
 800b172:	4630      	mov	r0, r6
 800b174:	f7ff fdb2 	bl	800acdc <refresh_children_style>
 800b178:	e019      	b.n	800b1ae <lv_obj_refresh_style+0x17e>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 800b17a:	f04f 0a02 	mov.w	sl, #2
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 800b17e:	68b3      	ldr	r3, [r6, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d0ed      	beq.n	800b160 <lv_obj_refresh_style+0x130>
 800b184:	7e9a      	ldrb	r2, [r3, #26]
 800b186:	f36a 1287 	bfi	r2, sl, #6, #2
 800b18a:	769a      	strb	r2, [r3, #26]
 800b18c:	e791      	b.n	800b0b2 <lv_obj_refresh_style+0x82>
        lv_obj_refresh_ext_draw_size(obj);
 800b18e:	4630      	mov	r0, r6
 800b190:	f7fc fe10 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800b194:	4630      	mov	r0, r6
 800b196:	f7fd fa51 	bl	800863c <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 800b19a:	e794      	b.n	800b0c6 <lv_obj_refresh_style+0x96>
        lv_obj_refresh_ext_draw_size(obj);
 800b19c:	4630      	mov	r0, r6
 800b19e:	f7fc fe09 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f7fd fa4a 	bl	800863c <lv_obj_invalidate>
        if(part != LV_PART_SCROLLBAR) {
 800b1a8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 800b1ac:	d1e1      	bne.n	800b172 <lv_obj_refresh_style+0x142>
}
 800b1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b2:	bf00      	nop
 800b1b4:	20000708 	.word	0x20000708

0800b1b8 <lv_obj_add_style>:
{
 800b1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460f      	mov	r7, r1
 800b1c0:	4616      	mov	r6, r2
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	f7ff fd23 	bl	800ac14 <trans_del>
    for(i = 0; i < obj->style_cnt; i++) {
 800b1ce:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800b1d0:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800b1d4:	2900      	cmp	r1, #0
 800b1d6:	d043      	beq.n	800b260 <lv_obj_add_style+0xa8>
 800b1d8:	4608      	mov	r0, r1
 800b1da:	68e3      	ldr	r3, [r4, #12]
 800b1dc:	2500      	movs	r5, #0
        if(obj->styles[i].is_local) continue;
 800b1de:	79da      	ldrb	r2, [r3, #7]
 800b1e0:	f012 0f03 	tst.w	r2, #3
 800b1e4:	d004      	beq.n	800b1f0 <lv_obj_add_style+0x38>
    for(i = 0; i < obj->style_cnt; i++) {
 800b1e6:	3501      	adds	r5, #1
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	4285      	cmp	r5, r0
 800b1ec:	d1f7      	bne.n	800b1de <lv_obj_add_style+0x26>
 800b1ee:	4605      	mov	r5, r0
    obj->style_cnt++;
 800b1f0:	3101      	adds	r1, #1
 800b1f2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b1f6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b1f8:	f361 03c8 	bfi	r3, r1, #3, #6
 800b1fc:	8463      	strh	r3, [r4, #34]	; 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800b1fe:	00c9      	lsls	r1, r1, #3
 800b200:	68e0      	ldr	r0, [r4, #12]
 800b202:	f016 fecd 	bl	8021fa0 <lv_mem_realloc>
 800b206:	60e0      	str	r0, [r4, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800b208:	f8b4 c022 	ldrh.w	ip, [r4, #34]	; 0x22
 800b20c:	f3cc 0cc5 	ubfx	ip, ip, #3, #6
 800b210:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b214:	45ac      	cmp	ip, r5
 800b216:	d90a      	bls.n	800b22e <lv_obj_add_style+0x76>
        obj->styles[j] = obj->styles[j - 1];
 800b218:	68e3      	ldr	r3, [r4, #12]
 800b21a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800b21e:	e913 0003 	ldmdb	r3, {r0, r1}
 800b222:	e883 0003 	stmia.w	r3, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 800b226:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b22a:	45ac      	cmp	ip, r5
 800b22c:	d8f4      	bhi.n	800b218 <lv_obj_add_style+0x60>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 800b22e:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800b232:	68e0      	ldr	r0, [r4, #12]
 800b234:	2108      	movs	r1, #8
 800b236:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 800b23a:	f017 f8f7 	bl	802242c <lv_memset_00>
    obj->styles[i].style = style;
 800b23e:	68e3      	ldr	r3, [r4, #12]
 800b240:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    obj->styles[i].selector = selector;
 800b244:	68e3      	ldr	r3, [r4, #12]
 800b246:	4443      	add	r3, r8
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	f366 0217 	bfi	r2, r6, #0, #24
 800b24e:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 800b250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b254:	4631      	mov	r1, r6
 800b256:	4620      	mov	r0, r4
 800b258:	f7ff feea 	bl	800b030 <lv_obj_refresh_style>
}
 800b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(i = 0; i < obj->style_cnt; i++) {
 800b260:	460d      	mov	r5, r1
 800b262:	2100      	movs	r1, #0
 800b264:	e7c4      	b.n	800b1f0 <lv_obj_add_style+0x38>

0800b266 <report_style_change_core>:
{
 800b266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b268:	4604      	mov	r4, r0
 800b26a:	460e      	mov	r6, r1
    for(i = 0; i < obj->style_cnt; i++) {
 800b26c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800b26e:	f3c3 00c5 	ubfx	r0, r3, #3, #6
 800b272:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b276:	d011      	beq.n	800b29c <report_style_change_core+0x36>
        if(style == NULL || obj->styles[i].style == style) {
 800b278:	b14c      	cbz	r4, 800b28e <report_style_change_core+0x28>
 800b27a:	68c9      	ldr	r1, [r1, #12]
    for(i = 0; i < obj->style_cnt; i++) {
 800b27c:	2300      	movs	r3, #0
        if(style == NULL || obj->styles[i].style == style) {
 800b27e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800b282:	42a2      	cmp	r2, r4
 800b284:	d003      	beq.n	800b28e <report_style_change_core+0x28>
    for(i = 0; i < obj->style_cnt; i++) {
 800b286:	3301      	adds	r3, #1
 800b288:	4283      	cmp	r3, r0
 800b28a:	d1f8      	bne.n	800b27e <report_style_change_core+0x18>
 800b28c:	e006      	b.n	800b29c <report_style_change_core+0x36>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 800b28e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b292:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800b296:	4630      	mov	r0, r6
 800b298:	f7ff feca 	bl	800b030 <lv_obj_refresh_style>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800b29c:	4630      	mov	r0, r6
 800b29e:	f000 fd60 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = 0; i < child_cnt; i++) {
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	b150      	cbz	r0, 800b2bc <report_style_change_core+0x56>
 800b2a6:	2500      	movs	r5, #0
        report_style_change_core(style, obj->spec_attr->children[i]);
 800b2a8:	68b3      	ldr	r3, [r6, #8]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f7ff ffd8 	bl	800b266 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 800b2b6:	3501      	adds	r5, #1
 800b2b8:	42af      	cmp	r7, r5
 800b2ba:	d1f5      	bne.n	800b2a8 <report_style_change_core+0x42>
}
 800b2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2c0 <lv_obj_report_style_change>:
    if(!style_refr) return;
 800b2c0:	4b10      	ldr	r3, [pc, #64]	; (800b304 <lv_obj_report_style_change+0x44>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	b903      	cbnz	r3, 800b2c8 <lv_obj_report_style_change+0x8>
 800b2c6:	4770      	bx	lr
{
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	f015 fc13 	bl	8020af8 <lv_disp_get_next>
    while(d) {
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	b980      	cbnz	r0, 800b2f8 <lv_obj_report_style_change+0x38>
}
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
            report_style_change_core(style, d->screens[i]);
 800b2d8:	68eb      	ldr	r3, [r5, #12]
 800b2da:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800b2de:	4630      	mov	r0, r6
 800b2e0:	f7ff ffc1 	bl	800b266 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 800b2e4:	3401      	adds	r4, #1
 800b2e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	d8f5      	bhi.n	800b2d8 <lv_obj_report_style_change+0x18>
        d = lv_disp_get_next(d);
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f015 fc03 	bl	8020af8 <lv_disp_get_next>
    while(d) {
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d0ee      	beq.n	800b2d6 <lv_obj_report_style_change+0x16>
        for(i = 0; i < d->screen_cnt; i++) {
 800b2f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2fa:	2400      	movs	r4, #0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1eb      	bne.n	800b2d8 <lv_obj_report_style_change+0x18>
 800b300:	e7f4      	b.n	800b2ec <lv_obj_report_style_change+0x2c>
 800b302:	bf00      	nop
 800b304:	20000708 	.word	0x20000708

0800b308 <trans_anim_cb>:
{
 800b308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30c:	b082      	sub	sp, #8
    lv_obj_t * obj = tr->obj;
 800b30e:	6805      	ldr	r5, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 800b310:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800b312:	f3c3 0cc5 	ubfx	ip, r3, #3, #6
 800b316:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b31a:	f000 80b7 	beq.w	800b48c <trans_anim_cb+0x184>
 800b31e:	4604      	mov	r4, r0
 800b320:	460f      	mov	r7, r1
 800b322:	2200      	movs	r2, #0
 800b324:	e003      	b.n	800b32e <trans_anim_cb+0x26>
 800b326:	3201      	adds	r2, #1
 800b328:	4562      	cmp	r2, ip
 800b32a:	f000 80af 	beq.w	800b48c <trans_anim_cb+0x184>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 800b32e:	00d6      	lsls	r6, r2, #3
 800b330:	68eb      	ldr	r3, [r5, #12]
 800b332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b336:	79d8      	ldrb	r0, [r3, #7]
 800b338:	f010 0f02 	tst.w	r0, #2
 800b33c:	d0f3      	beq.n	800b326 <trans_anim_cb+0x1e>
 800b33e:	6858      	ldr	r0, [r3, #4]
 800b340:	f3c0 0017 	ubfx	r0, r0, #0, #24
 800b344:	68a1      	ldr	r1, [r4, #8]
 800b346:	4288      	cmp	r0, r1
 800b348:	d1ed      	bne.n	800b326 <trans_anim_cb+0x1e>
        switch(tr->prop) {
 800b34a:	88a1      	ldrh	r1, [r4, #4]
 800b34c:	f1a1 0220 	sub.w	r2, r1, #32
 800b350:	2a47      	cmp	r2, #71	; 0x47
 800b352:	f200 8082 	bhi.w	800b45a <trans_anim_cb+0x152>
 800b356:	e8df f002 	tbb	[pc, r2]
 800b35a:	8053      	.short	0x8053
 800b35c:	80808080 	.word	0x80808080
 800b360:	80808080 	.word	0x80808080
 800b364:	80808080 	.word	0x80808080
 800b368:	80538080 	.word	0x80538080
 800b36c:	80242480 	.word	0x80242480
 800b370:	80808053 	.word	0x80808053
 800b374:	80808080 	.word	0x80808080
 800b378:	80808080 	.word	0x80808080
 800b37c:	80538080 	.word	0x80538080
 800b380:	80805380 	.word	0x80805380
 800b384:	80808080 	.word	0x80808080
 800b388:	80808080 	.word	0x80808080
 800b38c:	53808080 	.word	0x53808080
 800b390:	80803e80 	.word	0x80803e80
 800b394:	80808080 	.word	0x80808080
 800b398:	45808080 	.word	0x45808080
 800b39c:	80808080 	.word	0x80808080
 800b3a0:	243e      	.short	0x243e
                if(v < 255) value_final.num = tr->start_value.num;
 800b3a2:	2ffe      	cmp	r7, #254	; 0xfe
 800b3a4:	bfd4      	ite	le
 800b3a6:	f8d4 800c 	ldrle.w	r8, [r4, #12]
                else value_final.num = tr->end_value.num;
 800b3aa:	f8d4 8010 	ldrgt.w	r8, [r4, #16]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 800b3ae:	aa01      	add	r2, sp, #4
 800b3b0:	6818      	ldr	r0, [r3, #0]
 800b3b2:	f017 fedf 	bl	8023174 <lv_style_get_prop>
 800b3b6:	b110      	cbz	r0, 800b3be <trans_anim_cb+0xb6>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 800b3b8:	9f01      	ldr	r7, [sp, #4]
 800b3ba:	45b8      	cmp	r8, r7
 800b3bc:	d05e      	beq.n	800b47c <trans_anim_cb+0x174>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800b3be:	68eb      	ldr	r3, [r5, #12]
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	88a1      	ldrh	r1, [r4, #4]
 800b3c4:	5998      	ldr	r0, [r3, r6]
 800b3c6:	f017 ffe1 	bl	802338c <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800b3ca:	88a2      	ldrh	r2, [r4, #4]
 800b3cc:	68a1      	ldr	r1, [r4, #8]
 800b3ce:	6820      	ldr	r0, [r4, #0]
 800b3d0:	f7ff fe2e 	bl	800b030 <lv_obj_refresh_style>
}
 800b3d4:	e05a      	b.n	800b48c <trans_anim_cb+0x184>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 800b3d6:	2ffe      	cmp	r7, #254	; 0xfe
 800b3d8:	bfd4      	ite	le
 800b3da:	f8d4 800c 	ldrle.w	r8, [r4, #12]
                else value_final.ptr = tr->end_value.ptr;
 800b3de:	f8d4 8010 	ldrgt.w	r8, [r4, #16]
 800b3e2:	e7e4      	b.n	800b3ae <trans_anim_cb+0xa6>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800b3e4:	68e2      	ldr	r2, [r4, #12]
 800b3e6:	b132      	cbz	r2, 800b3f6 <trans_anim_cb+0xee>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800b3e8:	6920      	ldr	r0, [r4, #16]
 800b3ea:	b138      	cbz	r0, 800b3fc <trans_anim_cb+0xf4>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 800b3ec:	2f7f      	cmp	r7, #127	; 0x7f
 800b3ee:	bfcc      	ite	gt
 800b3f0:	4680      	movgt	r8, r0
 800b3f2:	4690      	movle	r8, r2
 800b3f4:	e7db      	b.n	800b3ae <trans_anim_cb+0xa6>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 800b3f6:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800b3fa:	e7d8      	b.n	800b3ae <trans_anim_cb+0xa6>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 800b3fc:	4690      	mov	r8, r2
 800b3fe:	e7d6      	b.n	800b3ae <trans_anim_cb+0xa6>
                if(v <= 0) value_final.color = tr->start_value.color;
 800b400:	2f00      	cmp	r7, #0
 800b402:	dd07      	ble.n	800b414 <trans_anim_cb+0x10c>
                else if(v >= 255) value_final.color = tr->end_value.color;
 800b404:	2ffe      	cmp	r7, #254	; 0xfe
 800b406:	dd0b      	ble.n	800b420 <trans_anim_cb+0x118>
 800b408:	8a22      	ldrh	r2, [r4, #16]
 800b40a:	f04f 0800 	mov.w	r8, #0
 800b40e:	f362 080f 	bfi	r8, r2, #0, #16
 800b412:	e7cc      	b.n	800b3ae <trans_anim_cb+0xa6>
                if(v <= 0) value_final.color = tr->start_value.color;
 800b414:	89a2      	ldrh	r2, [r4, #12]
 800b416:	f04f 0800 	mov.w	r8, #0
 800b41a:	f362 080f 	bfi	r8, r2, #0, #16
 800b41e:	e7c6      	b.n	800b3ae <trans_anim_cb+0xa6>
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800b420:	89a0      	ldrh	r0, [r4, #12]
 800b422:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 800b426:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800b494 <trans_anim_cb+0x18c>
 800b42a:	ea00 000c 	and.w	r0, r0, ip
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800b42e:	8a22      	ldrh	r2, [r4, #16]
 800b430:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800b434:	ea02 020c 	and.w	r2, r2, ip
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800b438:	1a12      	subs	r2, r2, r0
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800b43a:	b2ff      	uxtb	r7, r7
 800b43c:	3704      	adds	r7, #4
 800b43e:	08ff      	lsrs	r7, r7, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800b440:	fb07 f202 	mul.w	r2, r7, r2
 800b444:	eb00 1252 	add.w	r2, r0, r2, lsr #5
 800b448:	ea02 020c 	and.w	r2, r2, ip
    ret.full = (uint16_t)((result >> 16) | result);
 800b44c:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 800b450:	f04f 0800 	mov.w	r8, #0
 800b454:	f362 080f 	bfi	r8, r2, #0, #16
 800b458:	e7a9      	b.n	800b3ae <trans_anim_cb+0xa6>
                if(v == 0) value_final.num = tr->start_value.num;
 800b45a:	b917      	cbnz	r7, 800b462 <trans_anim_cb+0x15a>
 800b45c:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800b460:	e7a5      	b.n	800b3ae <trans_anim_cb+0xa6>
                else if(v == 255) value_final.num = tr->end_value.num;
 800b462:	2fff      	cmp	r7, #255	; 0xff
 800b464:	d007      	beq.n	800b476 <trans_anim_cb+0x16e>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 800b466:	68e0      	ldr	r0, [r4, #12]
 800b468:	6922      	ldr	r2, [r4, #16]
 800b46a:	1a12      	subs	r2, r2, r0
 800b46c:	fb02 f707 	mul.w	r7, r2, r7
 800b470:	eb00 2827 	add.w	r8, r0, r7, asr #8
 800b474:	e79b      	b.n	800b3ae <trans_anim_cb+0xa6>
                else if(v == 255) value_final.num = tr->end_value.num;
 800b476:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800b47a:	e798      	b.n	800b3ae <trans_anim_cb+0xa6>
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 800b47c:	68eb      	ldr	r3, [r5, #12]
 800b47e:	4642      	mov	r2, r8
 800b480:	88a1      	ldrh	r1, [r4, #4]
 800b482:	5998      	ldr	r0, [r3, r6]
 800b484:	f017 ff82 	bl	802338c <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 800b488:	45b8      	cmp	r8, r7
 800b48a:	d19e      	bne.n	800b3ca <trans_anim_cb+0xc2>
}
 800b48c:	b002      	add	sp, #8
 800b48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b492:	bf00      	nop
 800b494:	07e0f81f 	.word	0x07e0f81f

0800b498 <lv_obj_remove_style>:
{
 800b498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	4604      	mov	r4, r0
    return selector & 0xFFFF;
 800b49e:	fa1f f882 	uxth.w	r8, r2
    return selector & 0xFF0000;
 800b4a2:	f402 077f 	and.w	r7, r2, #16711680	; 0xff0000
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 800b4a6:	468a      	mov	sl, r1
 800b4a8:	b1a1      	cbz	r1, 800b4d4 <lv_obj_remove_style+0x3c>
 800b4aa:	f891 b007 	ldrb.w	fp, [r1, #7]
 800b4ae:	f1bb 0b00 	subs.w	fp, fp, #0
 800b4b2:	bf18      	it	ne
 800b4b4:	f04f 0b01 	movne.w	fp, #1
 800b4b8:	f1cb 0b00 	rsb	fp, fp, #0
 800b4bc:	fa1f fb8b 	uxth.w	fp, fp
    while(i <  obj->style_cnt) {
 800b4c0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b4c2:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b4c6:	d073      	beq.n	800b5b0 <lv_obj_remove_style+0x118>
    bool deleted = false;
 800b4c8:	2200      	movs	r2, #0
    uint32_t i = 0;
 800b4ca:	4616      	mov	r6, r2
        if((state != LV_STATE_ANY && state_act != state) ||
 800b4cc:	f64f 79ff 	movw	r9, #65535	; 0xffff
            obj->styles[i].style = NULL;
 800b4d0:	4655      	mov	r5, sl
 800b4d2:	e00d      	b.n	800b4f0 <lv_obj_remove_style+0x58>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 800b4d4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 800b4d8:	e7f2      	b.n	800b4c0 <lv_obj_remove_style+0x28>
           (part != LV_PART_ANY && part_act != part) ||
 800b4da:	b1fd      	cbz	r5, 800b51c <lv_obj_remove_style+0x84>
           (style != NULL && style != obj->styles[i].style)) {
 800b4dc:	f851 300a 	ldr.w	r3, [r1, sl]
 800b4e0:	42ab      	cmp	r3, r5
 800b4e2:	d01b      	beq.n	800b51c <lv_obj_remove_style+0x84>
            i++;
 800b4e4:	3601      	adds	r6, #1
    while(i <  obj->style_cnt) {
 800b4e6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b4e8:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b4ec:	42b3      	cmp	r3, r6
 800b4ee:	d95b      	bls.n	800b5a8 <lv_obj_remove_style+0x110>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 800b4f0:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
 800b4f4:	68e1      	ldr	r1, [r4, #12]
 800b4f6:	eb01 00c6 	add.w	r0, r1, r6, lsl #3
 800b4fa:	6843      	ldr	r3, [r0, #4]
 800b4fc:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if((state != LV_STATE_ANY && state_act != state) ||
 800b500:	45c8      	cmp	r8, r9
 800b502:	d003      	beq.n	800b50c <lv_obj_remove_style+0x74>
 800b504:	fa1f fc83 	uxth.w	ip, r3
 800b508:	45e0      	cmp	r8, ip
 800b50a:	d1eb      	bne.n	800b4e4 <lv_obj_remove_style+0x4c>
 800b50c:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800b510:	d0e3      	beq.n	800b4da <lv_obj_remove_style+0x42>
    return selector & 0xFF0000;
 800b512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
           (part != LV_PART_ANY && part_act != part) ||
 800b516:	429f      	cmp	r7, r3
 800b518:	d0df      	beq.n	800b4da <lv_obj_remove_style+0x42>
 800b51a:	e7e3      	b.n	800b4e4 <lv_obj_remove_style+0x4c>
        if(obj->styles[i].is_trans) {
 800b51c:	79c3      	ldrb	r3, [r0, #7]
 800b51e:	f013 0f02 	tst.w	r3, #2
 800b522:	d12c      	bne.n	800b57e <lv_obj_remove_style+0xe6>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 800b524:	68e3      	ldr	r3, [r4, #12]
 800b526:	eb03 020a 	add.w	r2, r3, sl
 800b52a:	79d2      	ldrb	r2, [r2, #7]
 800b52c:	f012 0f03 	tst.w	r2, #3
 800b530:	d12c      	bne.n	800b58c <lv_obj_remove_style+0xf4>
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800b532:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800b534:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800b538:	1e4b      	subs	r3, r1, #1
 800b53a:	42b3      	cmp	r3, r6
 800b53c:	d911      	bls.n	800b562 <lv_obj_remove_style+0xca>
 800b53e:	f10a 0a08 	add.w	sl, sl, #8
 800b542:	4632      	mov	r2, r6
            obj->styles[j] = obj->styles[j + 1];
 800b544:	68e3      	ldr	r3, [r4, #12]
 800b546:	3201      	adds	r2, #1
 800b548:	4453      	add	r3, sl
 800b54a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b54e:	e903 0003 	stmdb	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 800b552:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800b554:	f3c1 01c5 	ubfx	r1, r1, #3, #6
 800b558:	f10a 0a08 	add.w	sl, sl, #8
 800b55c:	1e4b      	subs	r3, r1, #1
 800b55e:	429a      	cmp	r2, r3
 800b560:	d3f0      	bcc.n	800b544 <lv_obj_remove_style+0xac>
        obj->style_cnt--;
 800b562:	313f      	adds	r1, #63	; 0x3f
 800b564:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800b568:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800b56a:	f361 03c8 	bfi	r3, r1, #3, #6
 800b56e:	8463      	strh	r3, [r4, #34]	; 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 800b570:	00c9      	lsls	r1, r1, #3
 800b572:	68e0      	ldr	r0, [r4, #12]
 800b574:	f016 fd14 	bl	8021fa0 <lv_mem_realloc>
 800b578:	60e0      	str	r0, [r4, #12]
        deleted = true;
 800b57a:	2201      	movs	r2, #1
 800b57c:	e7b3      	b.n	800b4e6 <lv_obj_remove_style+0x4e>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 800b57e:	2300      	movs	r3, #0
 800b580:	464a      	mov	r2, r9
 800b582:	4639      	mov	r1, r7
 800b584:	4620      	mov	r0, r4
 800b586:	f7ff fb45 	bl	800ac14 <trans_del>
 800b58a:	e7cb      	b.n	800b524 <lv_obj_remove_style+0x8c>
            lv_style_reset(obj->styles[i].style);
 800b58c:	f853 000a 	ldr.w	r0, [r3, sl]
 800b590:	f017 fcc8 	bl	8022f24 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 800b594:	68e3      	ldr	r3, [r4, #12]
 800b596:	f853 000a 	ldr.w	r0, [r3, sl]
 800b59a:	f016 fce5 	bl	8021f68 <lv_mem_free>
            obj->styles[i].style = NULL;
 800b59e:	68e3      	ldr	r3, [r4, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f843 200a 	str.w	r2, [r3, sl]
 800b5a6:	e7c4      	b.n	800b532 <lv_obj_remove_style+0x9a>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 800b5a8:	b112      	cbz	r2, 800b5b0 <lv_obj_remove_style+0x118>
 800b5aa:	f1bb 0f00 	cmp.w	fp, #0
 800b5ae:	d101      	bne.n	800b5b4 <lv_obj_remove_style+0x11c>
}
 800b5b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refresh_style(obj, part, prop);
 800b5b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5b8:	4639      	mov	r1, r7
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f7ff fd38 	bl	800b030 <lv_obj_refresh_style>
}
 800b5c0:	e7f6      	b.n	800b5b0 <lv_obj_remove_style+0x118>
	...

0800b5c4 <trans_anim_ready_cb>:
{
 800b5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 800b5c8:	6804      	ldr	r4, [r0, #0]
    lv_obj_t * obj = tr->obj;
 800b5ca:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 800b5cc:	88a6      	ldrh	r6, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 800b5ce:	482a      	ldr	r0, [pc, #168]	; (800b678 <trans_anim_ready_cb+0xb4>)
 800b5d0:	f016 fb76 	bl	8021cc0 <_lv_ll_get_head>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d045      	beq.n	800b664 <trans_anim_ready_cb+0xa0>
 800b5d8:	4601      	mov	r1, r0
 800b5da:	4f27      	ldr	r7, [pc, #156]	; (800b678 <trans_anim_ready_cb+0xb4>)
 800b5dc:	e005      	b.n	800b5ea <trans_anim_ready_cb+0x26>
 800b5de:	4638      	mov	r0, r7
 800b5e0:	f016 fb76 	bl	8021cd0 <_lv_ll_get_next>
 800b5e4:	4601      	mov	r1, r0
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d03c      	beq.n	800b664 <trans_anim_ready_cb+0xa0>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 800b5ea:	428c      	cmp	r4, r1
 800b5ec:	d0f7      	beq.n	800b5de <trans_anim_ready_cb+0x1a>
 800b5ee:	680a      	ldr	r2, [r1, #0]
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d1f3      	bne.n	800b5de <trans_anim_ready_cb+0x1a>
 800b5f6:	688a      	ldr	r2, [r1, #8]
 800b5f8:	68a3      	ldr	r3, [r4, #8]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d1ef      	bne.n	800b5de <trans_anim_ready_cb+0x1a>
 800b5fe:	888a      	ldrh	r2, [r1, #4]
 800b600:	88a3      	ldrh	r3, [r4, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d1eb      	bne.n	800b5de <trans_anim_ready_cb+0x1a>
 800b606:	e02b      	b.n	800b660 <trans_anim_ready_cb+0x9c>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 800b608:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b60c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800b610:	59e1      	ldr	r1, [r4, r7]
 800b612:	4628      	mov	r0, r5
 800b614:	f7ff ff40 	bl	800b498 <lv_obj_remove_style>
 800b618:	e022      	b.n	800b660 <trans_anim_ready_cb+0x9c>
        for(i = 0; i < obj->style_cnt; i++) {
 800b61a:	3301      	adds	r3, #1
 800b61c:	3208      	adds	r2, #8
 800b61e:	4563      	cmp	r3, ip
 800b620:	d01e      	beq.n	800b660 <trans_anim_ready_cb+0x9c>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 800b622:	00df      	lsls	r7, r3, #3
 800b624:	79d1      	ldrb	r1, [r2, #7]
 800b626:	f011 0f02 	tst.w	r1, #2
 800b62a:	d0f6      	beq.n	800b61a <trans_anim_ready_cb+0x56>
 800b62c:	6851      	ldr	r1, [r2, #4]
 800b62e:	f3c1 0117 	ubfx	r1, r1, #0, #24
 800b632:	68a0      	ldr	r0, [r4, #8]
 800b634:	4281      	cmp	r1, r0
 800b636:	d1f0      	bne.n	800b61a <trans_anim_ready_cb+0x56>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 800b638:	4621      	mov	r1, r4
 800b63a:	480f      	ldr	r0, [pc, #60]	; (800b678 <trans_anim_ready_cb+0xb4>)
 800b63c:	f016 fafd 	bl	8021c3a <_lv_ll_remove>
                lv_mem_free(tr);
 800b640:	4620      	mov	r0, r4
 800b642:	f016 fc91 	bl	8021f68 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 800b646:	68ec      	ldr	r4, [r5, #12]
 800b648:	eb04 0807 	add.w	r8, r4, r7
                lv_style_remove_prop(obj_style->style, prop);
 800b64c:	4631      	mov	r1, r6
 800b64e:	59e0      	ldr	r0, [r4, r7]
 800b650:	f017 fcb8 	bl	8022fc4 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 800b654:	68eb      	ldr	r3, [r5, #12]
 800b656:	59d8      	ldr	r0, [r3, r7]
 800b658:	f017 fdfc 	bl	8023254 <lv_style_is_empty>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d1d3      	bne.n	800b608 <trans_anim_ready_cb+0x44>
}
 800b660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(i = 0; i < obj->style_cnt; i++) {
 800b664:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800b666:	f3c3 0cc5 	ubfx	ip, r3, #3, #6
 800b66a:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b66e:	d0f7      	beq.n	800b660 <trans_anim_ready_cb+0x9c>
 800b670:	68ea      	ldr	r2, [r5, #12]
 800b672:	2300      	movs	r3, #0
 800b674:	e7d5      	b.n	800b622 <trans_anim_ready_cb+0x5e>
 800b676:	bf00      	nop
 800b678:	2000296c 	.word	0x2000296c

0800b67c <trans_anim_start_cb>:
{
 800b67c:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
 800b67e:	6804      	ldr	r4, [r0, #0]
    return selector & 0xFF0000;
 800b680:	68a5      	ldr	r5, [r4, #8]
 800b682:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 800b686:	88a2      	ldrh	r2, [r4, #4]
 800b688:	4629      	mov	r1, r5
 800b68a:	6820      	ldr	r0, [r4, #0]
 800b68c:	f7ff fc0e 	bl	800aeac <lv_obj_get_style_prop>
 800b690:	60e0      	str	r0, [r4, #12]
    lv_style_prop_t prop_tmp = tr->prop;
 800b692:	88a6      	ldrh	r6, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 800b694:	2300      	movs	r3, #0
 800b696:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 800b698:	4623      	mov	r3, r4
 800b69a:	4632      	mov	r2, r6
 800b69c:	4629      	mov	r1, r5
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	f7ff fab8 	bl	800ac14 <trans_del>
    tr->prop = prop_tmp;
 800b6a4:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 800b6a6:	68a1      	ldr	r1, [r4, #8]
 800b6a8:	6820      	ldr	r0, [r4, #0]
 800b6aa:	f7ff fb9d 	bl	800ade8 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 800b6ae:	68e2      	ldr	r2, [r4, #12]
 800b6b0:	88a1      	ldrh	r1, [r4, #4]
 800b6b2:	6800      	ldr	r0, [r0, #0]
 800b6b4:	f017 fe6a 	bl	802338c <lv_style_set_prop>
}
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}

0800b6ba <lv_obj_set_local_style_prop>:
{
 800b6ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6bc:	4606      	mov	r6, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	4617      	mov	r7, r2
 800b6c2:	461c      	mov	r4, r3
    lv_style_t * style = get_local_style(obj, selector);
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f7ff fb2b 	bl	800ad20 <get_local_style>
    lv_style_set_prop(style, prop, value);
 800b6ca:	463a      	mov	r2, r7
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f017 fe5d 	bl	802338c <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7ff fcaa 	bl	800b030 <lv_obj_refresh_style>
}
 800b6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6de <lv_obj_get_local_style_prop>:
{
 800b6de:	b538      	push	{r3, r4, r5, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 800b6e0:	8c45      	ldrh	r5, [r0, #34]	; 0x22
 800b6e2:	f3c5 04c5 	ubfx	r4, r5, #3, #6
 800b6e6:	f415 7ffc 	tst.w	r5, #504	; 0x1f8
 800b6ea:	d019      	beq.n	800b720 <lv_obj_get_local_style_prop+0x42>
 800b6ec:	68c0      	ldr	r0, [r0, #12]
 800b6ee:	f04f 0c00 	mov.w	ip, #0
 800b6f2:	e004      	b.n	800b6fe <lv_obj_get_local_style_prop+0x20>
 800b6f4:	f10c 0c01 	add.w	ip, ip, #1
 800b6f8:	3008      	adds	r0, #8
 800b6fa:	45a4      	cmp	ip, r4
 800b6fc:	d00e      	beq.n	800b71c <lv_obj_get_local_style_prop+0x3e>
        if(obj->styles[i].is_local &&
 800b6fe:	f890 e007 	ldrb.w	lr, [r0, #7]
 800b702:	f01e 0f01 	tst.w	lr, #1
 800b706:	d0f5      	beq.n	800b6f4 <lv_obj_get_local_style_prop+0x16>
           obj->styles[i].selector == selector) {
 800b708:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800b70c:	f3ce 0e17 	ubfx	lr, lr, #0, #24
        if(obj->styles[i].is_local &&
 800b710:	459e      	cmp	lr, r3
 800b712:	d1ef      	bne.n	800b6f4 <lv_obj_get_local_style_prop+0x16>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 800b714:	6800      	ldr	r0, [r0, #0]
 800b716:	f017 fd2d 	bl	8023174 <lv_style_get_prop>
 800b71a:	e000      	b.n	800b71e <lv_obj_get_local_style_prop+0x40>
    return LV_STYLE_RES_NOT_FOUND;
 800b71c:	2000      	movs	r0, #0
}
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
    return LV_STYLE_RES_NOT_FOUND;
 800b720:	2000      	movs	r0, #0
 800b722:	e7fc      	b.n	800b71e <lv_obj_get_local_style_prop+0x40>

0800b724 <lv_obj_remove_local_style_prop>:
{
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	4614      	mov	r4, r2
    for(i = 0; i < obj->style_cnt; i++) {
 800b728:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800b72a:	f3c3 02c5 	ubfx	r2, r3, #3, #6
 800b72e:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b732:	d027      	beq.n	800b784 <lv_obj_remove_local_style_prop+0x60>
 800b734:	4605      	mov	r5, r0
 800b736:	460e      	mov	r6, r1
        if(obj->styles[i].is_local &&
 800b738:	68c0      	ldr	r0, [r0, #12]
 800b73a:	4603      	mov	r3, r0
    for(i = 0; i < obj->style_cnt; i++) {
 800b73c:	f04f 0c00 	mov.w	ip, #0
 800b740:	e004      	b.n	800b74c <lv_obj_remove_local_style_prop+0x28>
 800b742:	f10c 0c01 	add.w	ip, ip, #1
 800b746:	3308      	adds	r3, #8
 800b748:	4594      	cmp	ip, r2
 800b74a:	d018      	beq.n	800b77e <lv_obj_remove_local_style_prop+0x5a>
        if(obj->styles[i].is_local &&
 800b74c:	f893 e007 	ldrb.w	lr, [r3, #7]
 800b750:	f01e 0f01 	tst.w	lr, #1
 800b754:	d0f5      	beq.n	800b742 <lv_obj_remove_local_style_prop+0x1e>
           obj->styles[i].selector == selector) {
 800b756:	6859      	ldr	r1, [r3, #4]
 800b758:	f3c1 0e17 	ubfx	lr, r1, #0, #24
        if(obj->styles[i].is_local &&
 800b75c:	45a6      	cmp	lr, r4
 800b75e:	d1f0      	bne.n	800b742 <lv_obj_remove_local_style_prop+0x1e>
    if(i == obj->style_cnt) return false;
 800b760:	4562      	cmp	r2, ip
 800b762:	d011      	beq.n	800b788 <lv_obj_remove_local_style_prop+0x64>
    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 800b764:	4631      	mov	r1, r6
 800b766:	f850 003c 	ldr.w	r0, [r0, ip, lsl #3]
 800b76a:	f017 fc2b 	bl	8022fc4 <lv_style_remove_prop>
    if(res == LV_RES_OK) {
 800b76e:	4607      	mov	r7, r0
 800b770:	b130      	cbz	r0, 800b780 <lv_obj_remove_local_style_prop+0x5c>
        lv_obj_refresh_style(obj, selector, prop);
 800b772:	4632      	mov	r2, r6
 800b774:	4621      	mov	r1, r4
 800b776:	4628      	mov	r0, r5
 800b778:	f7ff fc5a 	bl	800b030 <lv_obj_refresh_style>
 800b77c:	e000      	b.n	800b780 <lv_obj_remove_local_style_prop+0x5c>
    if(i == obj->style_cnt) return false;
 800b77e:	2700      	movs	r7, #0
}
 800b780:	4638      	mov	r0, r7
 800b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(i == obj->style_cnt) return false;
 800b784:	2700      	movs	r7, #0
 800b786:	e7fb      	b.n	800b780 <lv_obj_remove_local_style_prop+0x5c>
 800b788:	2700      	movs	r7, #0
 800b78a:	e7f9      	b.n	800b780 <lv_obj_remove_local_style_prop+0x5c>

0800b78c <_lv_obj_style_create_transition>:
{
 800b78c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b790:	b092      	sub	sp, #72	; 0x48
 800b792:	4604      	mov	r4, r0
 800b794:	460e      	mov	r6, r1
 800b796:	4691      	mov	r9, r2
 800b798:	4698      	mov	r8, r3
 800b79a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    obj->skip_trans = 1;
 800b79c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800b7a0:	f043 0304 	orr.w	r3, r3, #4
 800b7a4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    obj->state = prev_state;
 800b7a8:	8402      	strh	r2, [r0, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b7aa:	892a      	ldrh	r2, [r5, #8]
 800b7ac:	f7ff fb7e 	bl	800aeac <lv_obj_get_style_prop>
 800b7b0:	4682      	mov	sl, r0
    obj->state = new_state;
 800b7b2:	f8a4 8020 	strh.w	r8, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b7b6:	892a      	ldrh	r2, [r5, #8]
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f7ff fb76 	bl	800aeac <lv_obj_get_style_prop>
 800b7c0:	4607      	mov	r7, r0
    obj->skip_trans = 0;
 800b7c2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800b7c6:	f36f 0382 	bfc	r3, #2, #1
 800b7ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800b7ce:	4582      	cmp	sl, r0
 800b7d0:	d047      	beq.n	800b862 <_lv_obj_style_create_transition+0xd6>
    obj->state = prev_state;
 800b7d2:	f8a4 9020 	strh.w	r9, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 800b7d6:	892a      	ldrh	r2, [r5, #8]
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f7ff fb66 	bl	800aeac <lv_obj_get_style_prop>
 800b7e0:	4681      	mov	r9, r0
    obj->state = new_state;
 800b7e2:	f8a4 8020 	strh.w	r8, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f7ff fafd 	bl	800ade8 <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 800b7ee:	464a      	mov	r2, r9
 800b7f0:	8929      	ldrh	r1, [r5, #8]
 800b7f2:	6800      	ldr	r0, [r0, #0]
 800b7f4:	f017 fdca 	bl	802338c <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 800b7f8:	892b      	ldrh	r3, [r5, #8]
 800b7fa:	2b0b      	cmp	r3, #11
 800b7fc:	d033      	beq.n	800b866 <_lv_obj_style_create_transition+0xda>
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 800b7fe:	483a      	ldr	r0, [pc, #232]	; (800b8e8 <_lv_obj_style_create_transition+0x15c>)
 800b800:	f016 f9dd 	bl	8021bbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 800b804:	4680      	mov	r8, r0
 800b806:	2800      	cmp	r0, #0
 800b808:	d053      	beq.n	800b8b2 <_lv_obj_style_create_transition+0x126>
    tr->start_value = v1;
 800b80a:	f8c0 900c 	str.w	r9, [r0, #12]
    tr->end_value = v2;
 800b80e:	6107      	str	r7, [r0, #16]
    tr->obj = obj;
 800b810:	6004      	str	r4, [r0, #0]
    tr->prop = tr_dsc->prop;
 800b812:	892b      	ldrh	r3, [r5, #8]
 800b814:	8083      	strh	r3, [r0, #4]
    tr->selector = part;
 800b816:	6086      	str	r6, [r0, #8]
    lv_anim_init(&a);
 800b818:	a801      	add	r0, sp, #4
 800b81a:	f015 fb0f 	bl	8020e3c <lv_anim_init>
    a->var = var;
 800b81e:	f8cd 8004 	str.w	r8, [sp, #4]
    a->exec_cb = exec_cb;
 800b822:	4b32      	ldr	r3, [pc, #200]	; (800b8ec <_lv_obj_style_create_transition+0x160>)
 800b824:	9302      	str	r3, [sp, #8]
    a->start_cb = start_cb;
 800b826:	4b32      	ldr	r3, [pc, #200]	; (800b8f0 <_lv_obj_style_create_transition+0x164>)
 800b828:	9303      	str	r3, [sp, #12]
    a->ready_cb = ready_cb;
 800b82a:	4b32      	ldr	r3, [pc, #200]	; (800b8f4 <_lv_obj_style_create_transition+0x168>)
 800b82c:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 800b82e:	2300      	movs	r3, #0
 800b830:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 800b832:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 800b834:	22ff      	movs	r2, #255	; 0xff
 800b836:	920b      	str	r2, [sp, #44]	; 0x2c
    a->time = duration;
 800b838:	882a      	ldrh	r2, [r5, #0]
 800b83a:	920c      	str	r2, [sp, #48]	; 0x30
    a->act_time = -(int32_t)(delay);
 800b83c:	886a      	ldrh	r2, [r5, #2]
 800b83e:	4252      	negs	r2, r2
 800b840:	920d      	str	r2, [sp, #52]	; 0x34
    a->path_cb = path_cb;
 800b842:	68ea      	ldr	r2, [r5, #12]
 800b844:	9208      	str	r2, [sp, #32]
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 800b846:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 800b84a:	f363 0200 	bfi	r2, r3, #0, #1
 800b84e:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    a.user_data = tr_dsc->user_data;
 800b852:	692b      	ldr	r3, [r5, #16]
 800b854:	9307      	str	r3, [sp, #28]
    lv_anim_start(&a);
 800b856:	a801      	add	r0, sp, #4
 800b858:	f015 fb42 	bl	8020ee0 <lv_anim_start>
}
 800b85c:	b012      	add	sp, #72	; 0x48
 800b85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 800b862:	d1b6      	bne.n	800b7d2 <_lv_obj_style_create_transition+0x46>
 800b864:	e7fa      	b.n	800b85c <_lv_obj_style_create_transition+0xd0>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 800b866:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b86a:	4599      	cmp	r9, r3
 800b86c:	d022      	beq.n	800b8b4 <_lv_obj_style_create_transition+0x128>
 800b86e:	429f      	cmp	r7, r3
 800b870:	d1c5      	bne.n	800b7fe <_lv_obj_style_create_transition+0x72>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800b872:	4620      	mov	r0, r4
 800b874:	f7fc fc9b 	bl	80081ae <lv_obj_get_width>
 800b878:	4680      	mov	r8, r0
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7fc fc9d 	bl	80081ba <lv_obj_get_height>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800b880:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800b884:	f348 084f 	sbfx	r8, r8, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800b888:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b88c:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800b890:	4598      	cmp	r8, r3
 800b892:	db0a      	blt.n	800b8aa <_lv_obj_style_create_transition+0x11e>
 800b894:	3301      	adds	r3, #1
 800b896:	b21f      	sxth	r7, r3
 800b898:	e7b1      	b.n	800b7fe <_lv_obj_style_create_transition+0x72>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800b89a:	f108 0901 	add.w	r9, r8, #1
 800b89e:	fa0f f989 	sxth.w	r9, r9
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800b8a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800b8a6:	429f      	cmp	r7, r3
 800b8a8:	d1a9      	bne.n	800b7fe <_lv_obj_style_create_transition+0x72>
 800b8aa:	f108 0701 	add.w	r7, r8, #1
 800b8ae:	b23f      	sxth	r7, r7
 800b8b0:	e7a5      	b.n	800b7fe <_lv_obj_style_create_transition+0x72>
    LV_ASSERT_MALLOC(tr);
 800b8b2:	e7fe      	b.n	800b8b2 <_lv_obj_style_create_transition+0x126>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f7fc fc7a 	bl	80081ae <lv_obj_get_width>
 800b8ba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b8be:	f340 084f 	sbfx	r8, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f7fc fc79 	bl	80081ba <lv_obj_get_height>
 800b8c8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800b8cc:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 800b8d0:	4598      	cmp	r8, r3
 800b8d2:	dbe2      	blt.n	800b89a <_lv_obj_style_create_transition+0x10e>
 800b8d4:	f103 0901 	add.w	r9, r3, #1
 800b8d8:	fa0f f989 	sxth.w	r9, r9
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 800b8dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b8e0:	4297      	cmp	r7, r2
 800b8e2:	d18c      	bne.n	800b7fe <_lv_obj_style_create_transition+0x72>
 800b8e4:	e7d6      	b.n	800b894 <_lv_obj_style_create_transition+0x108>
 800b8e6:	bf00      	nop
 800b8e8:	2000296c 	.word	0x2000296c
 800b8ec:	0800b309 	.word	0x0800b309
 800b8f0:	0800b67d 	.word	0x0800b67d
 800b8f4:	0800b5c5 	.word	0x0800b5c5

0800b8f8 <_lv_obj_style_apply_color_filter>:
{
 800b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fa:	4614      	mov	r4, r2
    if(obj == NULL) return v;
 800b8fc:	b1c0      	cbz	r0, 800b930 <_lv_obj_style_apply_color_filter+0x38>
 800b8fe:	460d      	mov	r5, r1
 800b900:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 800b902:	2261      	movs	r2, #97	; 0x61
 800b904:	f7ff fad2 	bl	800aeac <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 800b908:	4607      	mov	r7, r0
 800b90a:	b178      	cbz	r0, 800b92c <_lv_obj_style_apply_color_filter+0x34>
 800b90c:	6803      	ldr	r3, [r0, #0]
 800b90e:	b16b      	cbz	r3, 800b92c <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 800b910:	2262      	movs	r2, #98	; 0x62
 800b912:	4629      	mov	r1, r5
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff fac9 	bl	800aeac <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 800b91a:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 800b91e:	d005      	beq.n	800b92c <_lv_obj_style_apply_color_filter+0x34>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	4621      	mov	r1, r4
 800b924:	4638      	mov	r0, r7
 800b926:	4798      	blx	r3
 800b928:	f360 040f 	bfi	r4, r0, #0, #16
    return v;
 800b92c:	4620      	mov	r0, r4
}
 800b92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj == NULL) return v;
 800b930:	4610      	mov	r0, r2
 800b932:	e7fc      	b.n	800b92e <_lv_obj_style_apply_color_filter+0x36>

0800b934 <_lv_obj_style_state_compare>:
{
 800b934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b938:	b083      	sub	sp, #12
    for(i = 0; i < obj->style_cnt; i++) {
 800b93a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800b93c:	f413 7ffc 	tst.w	r3, #504	; 0x1f8
 800b940:	f000 812c 	beq.w	800bb9c <_lv_obj_style_state_compare+0x268>
 800b944:	4606      	mov	r6, r0
 800b946:	2500      	movs	r5, #0
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800b948:	46a9      	mov	r9, r5
        bool valid1 = state_act & (~state1) ? false : true;
 800b94a:	ea6f 0801 	mvn.w	r8, r1
        bool valid2 = state_act & (~state2) ? false : true;
 800b94e:	43d7      	mvns	r7, r2
 800b950:	e015      	b.n	800b97e <_lv_obj_style_state_compare+0x4a>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 800b952:	f04f 0903 	mov.w	r9, #3
}
 800b956:	4648      	mov	r0, r9
 800b958:	b003      	add	sp, #12
 800b95a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800b95e:	aa01      	add	r2, sp, #4
 800b960:	2169      	movs	r1, #105	; 0x69
 800b962:	4620      	mov	r0, r4
 800b964:	f017 fc06 	bl	8023174 <lv_style_get_prop>
 800b968:	2800      	cmp	r0, #0
 800b96a:	f000 80ae 	beq.w	800baca <_lv_obj_style_state_compare+0x196>
 800b96e:	f04f 0902 	mov.w	r9, #2
    for(i = 0; i < obj->style_cnt; i++) {
 800b972:	3501      	adds	r5, #1
 800b974:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 800b976:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 800b97a:	42ab      	cmp	r3, r5
 800b97c:	d9eb      	bls.n	800b956 <_lv_obj_style_state_compare+0x22>
        if(obj->styles[i].is_trans) continue;
 800b97e:	00e8      	lsls	r0, r5, #3
 800b980:	68f2      	ldr	r2, [r6, #12]
 800b982:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 800b986:	79d9      	ldrb	r1, [r3, #7]
 800b988:	f011 0f02 	tst.w	r1, #2
 800b98c:	d1f1      	bne.n	800b972 <_lv_obj_style_state_compare+0x3e>
        bool valid1 = state_act & (~state1) ? false : true;
 800b98e:	8899      	ldrh	r1, [r3, #4]
 800b990:	ea18 0f01 	tst.w	r8, r1
 800b994:	bf0c      	ite	eq
 800b996:	2301      	moveq	r3, #1
 800b998:	2300      	movne	r3, #0
        bool valid2 = state_act & (~state2) ? false : true;
 800b99a:	420f      	tst	r7, r1
        if(valid1 != valid2) {
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	bf0c      	ite	eq
 800b9a0:	2101      	moveq	r1, #1
 800b9a2:	2100      	movne	r1, #0
 800b9a4:	428b      	cmp	r3, r1
 800b9a6:	d0e4      	beq.n	800b972 <_lv_obj_style_state_compare+0x3e>
            lv_style_t * style = obj->styles[i].style;
 800b9a8:	5814      	ldr	r4, [r2, r0]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 800b9aa:	aa01      	add	r2, sp, #4
 800b9ac:	2110      	movs	r1, #16
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f017 fbe0 	bl	8023174 <lv_style_get_prop>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d1cc      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 800b9b8:	aa01      	add	r2, sp, #4
 800b9ba:	2111      	movs	r1, #17
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f017 fbd9 	bl	8023174 <lv_style_get_prop>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d1c5      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 800b9c6:	aa01      	add	r2, sp, #4
 800b9c8:	2112      	movs	r1, #18
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f017 fbd2 	bl	8023174 <lv_style_get_prop>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d1be      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 800b9d4:	aa01      	add	r2, sp, #4
 800b9d6:	2113      	movs	r1, #19
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f017 fbcb 	bl	8023174 <lv_style_get_prop>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d1b7      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 800b9e2:	aa01      	add	r2, sp, #4
 800b9e4:	2115      	movs	r1, #21
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f017 fbc4 	bl	8023174 <lv_style_get_prop>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d1b0      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 800b9f0:	aa01      	add	r2, sp, #4
 800b9f2:	2114      	movs	r1, #20
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f017 fbbd 	bl	8023174 <lv_style_get_prop>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d1a9      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 800b9fe:	aa01      	add	r2, sp, #4
 800ba00:	210a      	movs	r1, #10
 800ba02:	4620      	mov	r0, r4
 800ba04:	f017 fbb6 	bl	8023174 <lv_style_get_prop>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d1a2      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 800ba0c:	aa01      	add	r2, sp, #4
 800ba0e:	216a      	movs	r1, #106	; 0x6a
 800ba10:	4620      	mov	r0, r4
 800ba12:	f017 fbaf 	bl	8023174 <lv_style_get_prop>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d19b      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 800ba1a:	aa01      	add	r2, sp, #4
 800ba1c:	216b      	movs	r1, #107	; 0x6b
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f017 fba8 	bl	8023174 <lv_style_get_prop>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d194      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 800ba28:	aa01      	add	r2, sp, #4
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f017 fba1 	bl	8023174 <lv_style_get_prop>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d18d      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 800ba36:	aa01      	add	r2, sp, #4
 800ba38:	2104      	movs	r1, #4
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f017 fb9a 	bl	8023174 <lv_style_get_prop>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d186      	bne.n	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 800ba44:	aa01      	add	r2, sp, #4
 800ba46:	2102      	movs	r1, #2
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f017 fb93 	bl	8023174 <lv_style_get_prop>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f47f af7f 	bne.w	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 800ba54:	aa01      	add	r2, sp, #4
 800ba56:	2103      	movs	r1, #3
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f017 fb8b 	bl	8023174 <lv_style_get_prop>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f47f af77 	bne.w	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 800ba64:	aa01      	add	r2, sp, #4
 800ba66:	2105      	movs	r1, #5
 800ba68:	4620      	mov	r0, r4
 800ba6a:	f017 fb83 	bl	8023174 <lv_style_get_prop>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f47f af6f 	bne.w	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 800ba74:	aa01      	add	r2, sp, #4
 800ba76:	2106      	movs	r1, #6
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f017 fb7b 	bl	8023174 <lv_style_get_prop>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f47f af67 	bne.w	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 800ba84:	aa01      	add	r2, sp, #4
 800ba86:	2132      	movs	r1, #50	; 0x32
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f017 fb73 	bl	8023174 <lv_style_get_prop>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	f47f af5f 	bne.w	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 800ba94:	aa01      	add	r2, sp, #4
 800ba96:	216d      	movs	r1, #109	; 0x6d
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f017 fb6b 	bl	8023174 <lv_style_get_prop>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	f47f af57 	bne.w	800b952 <_lv_obj_style_state_compare+0x1e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 800baa4:	aa01      	add	r2, sp, #4
 800baa6:	216c      	movs	r1, #108	; 0x6c
 800baa8:	4620      	mov	r0, r4
 800baaa:	f017 fb63 	bl	8023174 <lv_style_get_prop>
 800baae:	2800      	cmp	r0, #0
 800bab0:	f47f af4f 	bne.w	800b952 <_lv_obj_style_state_compare+0x1e>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bab4:	aa01      	add	r2, sp, #4
 800bab6:	2168      	movs	r1, #104	; 0x68
 800bab8:	4620      	mov	r0, r4
 800baba:	f017 fb5b 	bl	8023174 <lv_style_get_prop>
 800babe:	2800      	cmp	r0, #0
 800bac0:	f43f af4d 	beq.w	800b95e <_lv_obj_style_state_compare+0x2a>
 800bac4:	f04f 0902 	mov.w	r9, #2
 800bac8:	e753      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800baca:	aa01      	add	r2, sp, #4
 800bacc:	216d      	movs	r1, #109	; 0x6d
 800bace:	4620      	mov	r0, r4
 800bad0:	f017 fb50 	bl	8023174 <lv_style_get_prop>
 800bad4:	b110      	cbz	r0, 800badc <_lv_obj_style_state_compare+0x1a8>
 800bad6:	f04f 0902 	mov.w	r9, #2
 800bada:	e74a      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800badc:	aa01      	add	r2, sp, #4
 800bade:	216c      	movs	r1, #108	; 0x6c
 800bae0:	4620      	mov	r0, r4
 800bae2:	f017 fb47 	bl	8023174 <lv_style_get_prop>
 800bae6:	b110      	cbz	r0, 800baee <_lv_obj_style_state_compare+0x1ba>
 800bae8:	f04f 0902 	mov.w	r9, #2
 800baec:	e741      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800baee:	aa01      	add	r2, sp, #4
 800baf0:	2137      	movs	r1, #55	; 0x37
 800baf2:	4620      	mov	r0, r4
 800baf4:	f017 fb3e 	bl	8023174 <lv_style_get_prop>
 800baf8:	b110      	cbz	r0, 800bb00 <_lv_obj_style_state_compare+0x1cc>
 800bafa:	f04f 0902 	mov.w	r9, #2
 800bafe:	e738      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb00:	aa01      	add	r2, sp, #4
 800bb02:	2138      	movs	r1, #56	; 0x38
 800bb04:	4620      	mov	r0, r4
 800bb06:	f017 fb35 	bl	8023174 <lv_style_get_prop>
 800bb0a:	b110      	cbz	r0, 800bb12 <_lv_obj_style_state_compare+0x1de>
 800bb0c:	f04f 0902 	mov.w	r9, #2
 800bb10:	e72f      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb12:	aa01      	add	r2, sp, #4
 800bb14:	2135      	movs	r1, #53	; 0x35
 800bb16:	4620      	mov	r0, r4
 800bb18:	f017 fb2c 	bl	8023174 <lv_style_get_prop>
 800bb1c:	b110      	cbz	r0, 800bb24 <_lv_obj_style_state_compare+0x1f0>
 800bb1e:	f04f 0902 	mov.w	r9, #2
 800bb22:	e726      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb24:	aa01      	add	r2, sp, #4
 800bb26:	2140      	movs	r1, #64	; 0x40
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f017 fb23 	bl	8023174 <lv_style_get_prop>
 800bb2e:	b110      	cbz	r0, 800bb36 <_lv_obj_style_state_compare+0x202>
 800bb30:	f04f 0902 	mov.w	r9, #2
 800bb34:	e71d      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb36:	aa01      	add	r2, sp, #4
 800bb38:	2145      	movs	r1, #69	; 0x45
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f017 fb1a 	bl	8023174 <lv_style_get_prop>
 800bb40:	b110      	cbz	r0, 800bb48 <_lv_obj_style_state_compare+0x214>
 800bb42:	f04f 0902 	mov.w	r9, #2
 800bb46:	e714      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb48:	aa01      	add	r2, sp, #4
 800bb4a:	2141      	movs	r1, #65	; 0x41
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f017 fb11 	bl	8023174 <lv_style_get_prop>
 800bb52:	b110      	cbz	r0, 800bb5a <_lv_obj_style_state_compare+0x226>
 800bb54:	f04f 0902 	mov.w	r9, #2
 800bb58:	e70b      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb5a:	aa01      	add	r2, sp, #4
 800bb5c:	2142      	movs	r1, #66	; 0x42
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f017 fb08 	bl	8023174 <lv_style_get_prop>
 800bb64:	b110      	cbz	r0, 800bb6c <_lv_obj_style_state_compare+0x238>
 800bb66:	f04f 0902 	mov.w	r9, #2
 800bb6a:	e702      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb6c:	aa01      	add	r2, sp, #4
 800bb6e:	2143      	movs	r1, #67	; 0x43
 800bb70:	4620      	mov	r0, r4
 800bb72:	f017 faff 	bl	8023174 <lv_style_get_prop>
 800bb76:	b110      	cbz	r0, 800bb7e <_lv_obj_style_state_compare+0x24a>
 800bb78:	f04f 0902 	mov.w	r9, #2
 800bb7c:	e6f9      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb7e:	aa01      	add	r2, sp, #4
 800bb80:	2149      	movs	r1, #73	; 0x49
 800bb82:	4620      	mov	r0, r4
 800bb84:	f017 faf6 	bl	8023174 <lv_style_get_prop>
 800bb88:	b928      	cbnz	r0, 800bb96 <_lv_obj_style_state_compare+0x262>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 800bb8a:	f1b9 0f01 	cmp.w	r9, #1
 800bb8e:	bf38      	it	cc
 800bb90:	f04f 0901 	movcc.w	r9, #1
 800bb94:	e6ed      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 800bb96:	f04f 0902 	mov.w	r9, #2
 800bb9a:	e6ea      	b.n	800b972 <_lv_obj_style_state_compare+0x3e>
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 800bb9c:	f04f 0900 	mov.w	r9, #0
 800bba0:	e6d9      	b.n	800b956 <_lv_obj_style_state_compare+0x22>

0800bba2 <lv_obj_style_get_selector_state>:
}
 800bba2:	b280      	uxth	r0, r0
 800bba4:	4770      	bx	lr

0800bba6 <lv_obj_style_get_selector_part>:
}
 800bba6:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800bbaa:	4770      	bx	lr

0800bbac <lv_obj_calculate_style_text_align>:
{
 800bbac:	b570      	push	{r4, r5, r6, lr}
 800bbae:	4605      	mov	r5, r0
 800bbb0:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 800bbb2:	225b      	movs	r2, #91	; 0x5b
 800bbb4:	f7ff f97a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_text_align_t)v.num;
 800bbb8:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 800bbba:	2216      	movs	r2, #22
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f7ff f974 	bl	800aeac <lv_obj_get_style_prop>
}
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	2c01      	cmp	r4, #1
 800bbc8:	bf38      	it	cc
 800bbca:	2001      	movcc	r0, #1
 800bbcc:	bd70      	pop	{r4, r5, r6, pc}

0800bbce <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bbce:	b508      	push	{r3, lr}
 800bbd0:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 800bbd2:	460a      	mov	r2, r1
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	f7ff fd70 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bbda:	bd08      	pop	{r3, pc}

0800bbdc <lv_obj_set_style_min_width>:

void lv_obj_set_style_min_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bbdc:	b508      	push	{r3, lr}
 800bbde:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MIN_WIDTH, v, selector);
 800bbe0:	460a      	mov	r2, r1
 800bbe2:	2102      	movs	r1, #2
 800bbe4:	f7ff fd69 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bbe8:	bd08      	pop	{r3, pc}

0800bbea <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bbea:	b508      	push	{r3, lr}
 800bbec:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 800bbee:	460a      	mov	r2, r1
 800bbf0:	2104      	movs	r1, #4
 800bbf2:	f7ff fd62 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bbf6:	bd08      	pop	{r3, pc}

0800bbf8 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bbf8:	b508      	push	{r3, lr}
 800bbfa:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 800bbfc:	460a      	mov	r2, r1
 800bbfe:	2107      	movs	r1, #7
 800bc00:	f7ff fd5b 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc04:	bd08      	pop	{r3, pc}

0800bc06 <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bc06:	b508      	push	{r3, lr}
 800bc08:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 800bc0a:	460a      	mov	r2, r1
 800bc0c:	2108      	movs	r1, #8
 800bc0e:	f7ff fd54 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc12:	bd08      	pop	{r3, pc}

0800bc14 <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 800bc14:	b508      	push	{r3, lr}
 800bc16:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 800bc18:	460a      	mov	r2, r1
 800bc1a:	2109      	movs	r1, #9
 800bc1c:	f7ff fd4d 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc20:	bd08      	pop	{r3, pc}

0800bc22 <lv_obj_set_style_pad_top>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TRANSFORM_PIVOT_Y, v, selector);
}

void lv_obj_set_style_pad_top(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bc22:	b508      	push	{r3, lr}
 800bc24:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_TOP, v, selector);
 800bc26:	460a      	mov	r2, r1
 800bc28:	2110      	movs	r1, #16
 800bc2a:	f7ff fd46 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc2e:	bd08      	pop	{r3, pc}

0800bc30 <lv_obj_set_style_pad_bottom>:

void lv_obj_set_style_pad_bottom(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bc30:	b508      	push	{r3, lr}
 800bc32:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_BOTTOM, v, selector);
 800bc34:	460a      	mov	r2, r1
 800bc36:	2111      	movs	r1, #17
 800bc38:	f7ff fd3f 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc3c:	bd08      	pop	{r3, pc}

0800bc3e <lv_obj_set_style_pad_left>:

void lv_obj_set_style_pad_left(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bc3e:	b508      	push	{r3, lr}
 800bc40:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_LEFT, v, selector);
 800bc42:	460a      	mov	r2, r1
 800bc44:	2112      	movs	r1, #18
 800bc46:	f7ff fd38 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc4a:	bd08      	pop	{r3, pc}

0800bc4c <lv_obj_set_style_pad_right>:

void lv_obj_set_style_pad_right(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 800bc4c:	b508      	push	{r3, lr}
 800bc4e:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_RIGHT, v, selector);
 800bc50:	460a      	mov	r2, r1
 800bc52:	2113      	movs	r1, #19
 800bc54:	f7ff fd31 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc58:	bd08      	pop	{r3, pc}

0800bc5a <lv_obj_set_style_bg_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_COLUMN, v, selector);
}

void lv_obj_set_style_bg_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800bc5a:	b500      	push	{lr}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	4613      	mov	r3, r2
    lv_style_value_t v = {
 800bc60:	f04f 0c00 	mov.w	ip, #0
 800bc64:	f8ad c000 	strh.w	ip, [sp]
 800bc68:	4662      	mov	r2, ip
 800bc6a:	f36c 421f 	bfi	r2, ip, #16, #16
 800bc6e:	f361 020f 	bfi	r2, r1, #0, #16
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_COLOR, v, selector);
 800bc72:	2120      	movs	r1, #32
 800bc74:	f7ff fd21 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc78:	b003      	add	sp, #12
 800bc7a:	f85d fb04 	ldr.w	pc, [sp], #4

0800bc7e <lv_obj_set_style_bg_opa>:

void lv_obj_set_style_bg_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 800bc7e:	b508      	push	{r3, lr}
 800bc80:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_OPA, v, selector);
 800bc82:	460a      	mov	r2, r1
 800bc84:	2121      	movs	r1, #33	; 0x21
 800bc86:	f7ff fd18 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bc8a:	bd08      	pop	{r3, pc}

0800bc8c <lv_obj_set_style_text_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ARC_IMG_SRC, v, selector);
}

void lv_obj_set_style_text_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 800bc8c:	b500      	push	{lr}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	4613      	mov	r3, r2
    lv_style_value_t v = {
 800bc92:	f04f 0c00 	mov.w	ip, #0
 800bc96:	f8ad c000 	strh.w	ip, [sp]
 800bc9a:	4662      	mov	r2, ip
 800bc9c:	f36c 421f 	bfi	r2, ip, #16, #16
 800bca0:	f361 020f 	bfi	r2, r1, #0, #16
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_COLOR, v, selector);
 800bca4:	2155      	movs	r1, #85	; 0x55
 800bca6:	f7ff fd08 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bcaa:	b003      	add	sp, #12
 800bcac:	f85d fb04 	ldr.w	pc, [sp], #4

0800bcb0 <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 800bcb0:	b508      	push	{r3, lr}
 800bcb2:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 800bcb4:	460a      	mov	r2, r1
 800bcb6:	215b      	movs	r1, #91	; 0x5b
 800bcb8:	f7ff fcff 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bcbc:	bd08      	pop	{r3, pc}

0800bcbe <lv_obj_set_style_layout>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BLEND_MODE, v, selector);
}

void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
 800bcbe:	b508      	push	{r3, lr}
 800bcc0:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 800bcc2:	460a      	mov	r2, r1
 800bcc4:	210a      	movs	r1, #10
 800bcc6:	f7ff fcf8 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bcca:	bd08      	pop	{r3, pc}

0800bccc <lv_obj_set_style_base_dir>:

void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
 800bccc:	b508      	push	{r3, lr}
 800bcce:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 800bcd0:	460a      	mov	r2, r1
 800bcd2:	2116      	movs	r1, #22
 800bcd4:	f7ff fcf1 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 800bcd8:	bd08      	pop	{r3, pc}

0800bcda <lv_obj_get_screen>:

lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    const lv_obj_t * par = obj;
 800bcda:	e000      	b.n	800bcde <lv_obj_get_screen+0x4>
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 800bcdc:	4618      	mov	r0, r3
    if(obj == NULL) return NULL;
 800bcde:	b110      	cbz	r0, 800bce6 <lv_obj_get_screen+0xc>
    return obj->parent;
 800bce0:	6843      	ldr	r3, [r0, #4]
    } while(par != NULL);
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1fa      	bne.n	800bcdc <lv_obj_get_screen+0x2>
}
 800bce6:	4770      	bx	lr

0800bce8 <lv_obj_get_disp>:
{
 800bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcea:	4605      	mov	r5, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 800bcec:	6843      	ldr	r3, [r0, #4]
 800bcee:	b113      	cbz	r3, 800bcf6 <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 800bcf0:	f7ff fff3 	bl	800bcda <lv_obj_get_screen>
 800bcf4:	4605      	mov	r5, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800bcf6:	480d      	ldr	r0, [pc, #52]	; (800bd2c <lv_obj_get_disp+0x44>)
 800bcf8:	f015 ffe2 	bl	8021cc0 <_lv_ll_get_head>
 800bcfc:	4601      	mov	r1, r0
 800bcfe:	b190      	cbz	r0, 800bd26 <lv_obj_get_disp+0x3e>
 800bd00:	4f0a      	ldr	r7, [pc, #40]	; (800bd2c <lv_obj_get_disp+0x44>)
        for(i = 0; i < d->screen_cnt; i++) {
 800bd02:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800bd04:	b14e      	cbz	r6, 800bd1a <lv_obj_get_disp+0x32>
 800bd06:	68ca      	ldr	r2, [r1, #12]
 800bd08:	3a04      	subs	r2, #4
 800bd0a:	2300      	movs	r3, #0
            if(d->screens[i] == scr) return d;
 800bd0c:	f852 4f04 	ldr.w	r4, [r2, #4]!
 800bd10:	42ac      	cmp	r4, r5
 800bd12:	d008      	beq.n	800bd26 <lv_obj_get_disp+0x3e>
        for(i = 0; i < d->screen_cnt; i++) {
 800bd14:	3301      	adds	r3, #1
 800bd16:	42b3      	cmp	r3, r6
 800bd18:	d1f8      	bne.n	800bd0c <lv_obj_get_disp+0x24>
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	f015 ffd8 	bl	8021cd0 <_lv_ll_get_next>
 800bd20:	4601      	mov	r1, r0
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d1ed      	bne.n	800bd02 <lv_obj_get_disp+0x1a>
}
 800bd26:	4608      	mov	r0, r1
 800bd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	2000287c 	.word	0x2000287c

0800bd30 <lv_obj_get_parent>:
    if(obj == NULL) return NULL;
 800bd30:	b108      	cbz	r0, 800bd36 <lv_obj_get_parent+0x6>
    return obj->parent;
 800bd32:	6840      	ldr	r0, [r0, #4]
 800bd34:	4770      	bx	lr
}
 800bd36:	4770      	bx	lr

0800bd38 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 800bd38:	6880      	ldr	r0, [r0, #8]
 800bd3a:	b188      	cbz	r0, 800bd60 <lv_obj_get_child+0x28>

    uint32_t idu;
    if(id < 0) {
 800bd3c:	2900      	cmp	r1, #0
 800bd3e:	db07      	blt.n	800bd50 <lv_obj_get_child+0x18>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
        idu = (uint32_t) id;
    }
    else {
        idu = id;
 800bd40:	460b      	mov	r3, r1
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800bd42:	6842      	ldr	r2, [r0, #4]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d90a      	bls.n	800bd5e <lv_obj_get_child+0x26>
    else return obj->spec_attr->children[id];
 800bd48:	6803      	ldr	r3, [r0, #0]
 800bd4a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800bd4e:	4770      	bx	lr
        id = obj->spec_attr->child_cnt + id;
 800bd50:	6843      	ldr	r3, [r0, #4]
 800bd52:	4419      	add	r1, r3
 800bd54:	460b      	mov	r3, r1
        if(id < 0) return NULL;
 800bd56:	2900      	cmp	r1, #0
 800bd58:	daf3      	bge.n	800bd42 <lv_obj_get_child+0xa>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	4770      	bx	lr
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 800bd5e:	2000      	movs	r0, #0
}
 800bd60:	4770      	bx	lr

0800bd62 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 800bd62:	6883      	ldr	r3, [r0, #8]
 800bd64:	b10b      	cbz	r3, 800bd6a <lv_obj_get_child_cnt+0x8>
    return obj->spec_attr->child_cnt;
 800bd66:	6858      	ldr	r0, [r3, #4]
 800bd68:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 800bd6a:	2000      	movs	r0, #0
}
 800bd6c:	4770      	bx	lr

0800bd6e <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 800bd6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj == NULL) return NULL;
 800bd70:	b1a8      	cbz	r0, 800bd9e <lv_obj_get_index+0x30>
 800bd72:	4607      	mov	r7, r0
    return obj->parent;
 800bd74:	6846      	ldr	r6, [r0, #4]
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
    if(parent == NULL) return 0;
 800bd76:	b1a6      	cbz	r6, 800bda2 <lv_obj_get_index+0x34>

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f7ff fff2 	bl	800bd62 <lv_obj_get_child_cnt>
 800bd7e:	4605      	mov	r5, r0
 800bd80:	2400      	movs	r4, #0
 800bd82:	42a5      	cmp	r5, r4
 800bd84:	d007      	beq.n	800bd96 <lv_obj_get_index+0x28>
        if(lv_obj_get_child(parent, i) == obj) return i;
 800bd86:	4621      	mov	r1, r4
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f7ff ffd5 	bl	800bd38 <lv_obj_get_child>
 800bd8e:	4287      	cmp	r7, r0
 800bd90:	d003      	beq.n	800bd9a <lv_obj_get_index+0x2c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 800bd92:	3401      	adds	r4, #1
 800bd94:	e7f5      	b.n	800bd82 <lv_obj_get_index+0x14>
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 800bd96:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(parent == NULL) return 0;
 800bd9e:	2400      	movs	r4, #0
 800bda0:	e7fb      	b.n	800bd9a <lv_obj_get_index+0x2c>
 800bda2:	2400      	movs	r4, #0
 800bda4:	e7f9      	b.n	800bd9a <lv_obj_get_index+0x2c>

0800bda6 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 800bda6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda8:	4605      	mov	r5, r0
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2121      	movs	r1, #33	; 0x21
 800bdae:	f7f8 fb09 	bl	80043c4 <lv_event_send>
    if(res == LV_RES_INV) return;
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d060      	beq.n	800be78 <obj_del_core+0xd2>

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f7ff ffbd 	bl	800bd38 <lv_obj_get_child>
    while(child) {
 800bdbe:	b140      	cbz	r0, 800bdd2 <obj_del_core+0x2c>
        obj_del_core(child);
        child = lv_obj_get_child(obj, 0);
 800bdc0:	2400      	movs	r4, #0
        obj_del_core(child);
 800bdc2:	f7ff fff0 	bl	800bda6 <obj_del_core>
        child = lv_obj_get_child(obj, 0);
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7ff ffb5 	bl	800bd38 <lv_obj_get_child>
    while(child) {
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d1f7      	bne.n	800bdc2 <obj_del_core+0x1c>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f7fb f973 	bl	80070be <lv_obj_get_group>
 800bdd8:	4606      	mov	r6, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 800bdda:	2000      	movs	r0, #0
 800bddc:	f014 fed8 	bl	8020b90 <lv_indev_get_next>
    while(indev) {
 800bde0:	4604      	mov	r4, r0
 800bde2:	b308      	cbz	r0, 800be28 <obj_del_core+0x82>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
            lv_indev_reset(indev, obj);
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
 800bde4:	2700      	movs	r7, #0
 800bde6:	e00f      	b.n	800be08 <obj_del_core+0x62>
            lv_indev_reset(indev, obj);
 800bde8:	4629      	mov	r1, r5
 800bdea:	4620      	mov	r0, r4
 800bdec:	f7f8 fe9c 	bl	8004b28 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
 800bdf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdf2:	42ab      	cmp	r3, r5
            indev->proc.types.pointer.last_pressed = NULL;
 800bdf4:	bf08      	it	eq
 800bdf6:	6367      	streq	r7, [r4, #52]	; 0x34
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800bdf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bdfa:	42b3      	cmp	r3, r6
 800bdfc:	d00b      	beq.n	800be16 <obj_del_core+0x70>
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 800bdfe:	4620      	mov	r0, r4
 800be00:	f014 fec6 	bl	8020b90 <lv_indev_get_next>
    while(indev) {
 800be04:	4604      	mov	r4, r0
 800be06:	b178      	cbz	r0, 800be28 <obj_del_core+0x82>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 800be08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be0a:	42ab      	cmp	r3, r5
 800be0c:	d0ec      	beq.n	800bde8 <obj_del_core+0x42>
 800be0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be10:	42ab      	cmp	r3, r5
 800be12:	d1ed      	bne.n	800bdf0 <obj_del_core+0x4a>
 800be14:	e7e8      	b.n	800bde8 <obj_del_core+0x42>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 800be16:	f7f8 ff43 	bl	8004ca0 <lv_indev_get_obj_act>
 800be1a:	4285      	cmp	r5, r0
 800be1c:	d1ef      	bne.n	800bdfe <obj_del_core+0x58>
            lv_indev_reset(indev, obj);
 800be1e:	4629      	mov	r1, r5
 800be20:	4620      	mov	r0, r4
 800be22:	f7f8 fe81 	bl	8004b28 <lv_indev_reset>
 800be26:	e7ea      	b.n	800bdfe <obj_del_core+0x58>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 800be28:	4628      	mov	r0, r5
 800be2a:	f7fb fc0d 	bl	8007648 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 800be2e:	686c      	ldr	r4, [r5, #4]
 800be30:	b31c      	cbz	r4, 800be7a <obj_del_core+0xd4>
        disp->screen_cnt--;
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
    }
    /*Remove the object from the child list of its parent*/
    else {
        uint32_t id = lv_obj_get_index(obj);
 800be32:	4628      	mov	r0, r5
 800be34:	f7ff ff9b 	bl	800bd6e <lv_obj_get_index>
        uint32_t i;
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800be38:	68a1      	ldr	r1, [r4, #8]
 800be3a:	684b      	ldr	r3, [r1, #4]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	4298      	cmp	r0, r3
 800be40:	d20e      	bcs.n	800be60 <obj_del_core+0xba>
 800be42:	1c42      	adds	r2, r0, #1
 800be44:	0092      	lsls	r2, r2, #2
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 800be46:	680b      	ldr	r3, [r1, #0]
 800be48:	3001      	adds	r0, #1
 800be4a:	5899      	ldr	r1, [r3, r2]
 800be4c:	4413      	add	r3, r2
 800be4e:	f843 1c04 	str.w	r1, [r3, #-4]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 800be52:	686b      	ldr	r3, [r5, #4]
 800be54:	6899      	ldr	r1, [r3, #8]
 800be56:	684b      	ldr	r3, [r1, #4]
 800be58:	3b01      	subs	r3, #1
 800be5a:	3204      	adds	r2, #4
 800be5c:	4298      	cmp	r0, r3
 800be5e:	d3f2      	bcc.n	800be46 <obj_del_core+0xa0>
        }
        obj->parent->spec_attr->child_cnt--;
 800be60:	604b      	str	r3, [r1, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800be62:	686b      	ldr	r3, [r5, #4]
 800be64:	689c      	ldr	r4, [r3, #8]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 800be66:	6861      	ldr	r1, [r4, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 800be68:	0089      	lsls	r1, r1, #2
 800be6a:	6820      	ldr	r0, [r4, #0]
 800be6c:	f016 f898 	bl	8021fa0 <lv_mem_realloc>
 800be70:	6020      	str	r0, [r4, #0]
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 800be72:	4628      	mov	r0, r5
 800be74:	f016 f878 	bl	8021f68 <lv_mem_free>
}
 800be78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_disp_t * disp = lv_obj_get_disp(obj);
 800be7a:	4628      	mov	r0, r5
 800be7c:	f7ff ff34 	bl	800bce8 <lv_obj_get_disp>
 800be80:	4604      	mov	r4, r0
        for(i = 0; i < disp->screen_cnt; i++) {
 800be82:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800be84:	b311      	cbz	r1, 800becc <obj_del_core+0x126>
 800be86:	68c2      	ldr	r2, [r0, #12]
 800be88:	3a04      	subs	r2, #4
 800be8a:	2300      	movs	r3, #0
            if(disp->screens[i] == obj) break;
 800be8c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800be90:	42a8      	cmp	r0, r5
 800be92:	d004      	beq.n	800be9e <obj_del_core+0xf8>
        for(i = 0; i < disp->screen_cnt; i++) {
 800be94:	3301      	adds	r3, #1
 800be96:	428b      	cmp	r3, r1
 800be98:	d1f8      	bne.n	800be8c <obj_del_core+0xe6>
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800be9a:	3901      	subs	r1, #1
 800be9c:	e00f      	b.n	800bebe <obj_del_core+0x118>
 800be9e:	3901      	subs	r1, #1
 800bea0:	4299      	cmp	r1, r3
 800bea2:	d90c      	bls.n	800bebe <obj_del_core+0x118>
 800bea4:	1c58      	adds	r0, r3, #1
 800bea6:	0080      	lsls	r0, r0, #2
            disp->screens[i] = disp->screens[i + 1];
 800bea8:	68e2      	ldr	r2, [r4, #12]
 800beaa:	3301      	adds	r3, #1
 800beac:	5811      	ldr	r1, [r2, r0]
 800beae:	4402      	add	r2, r0
 800beb0:	f842 1c04 	str.w	r1, [r2, #-4]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 800beb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800beb6:	3901      	subs	r1, #1
 800beb8:	3004      	adds	r0, #4
 800beba:	428b      	cmp	r3, r1
 800bebc:	d3f4      	bcc.n	800bea8 <obj_del_core+0x102>
        disp->screen_cnt--;
 800bebe:	6261      	str	r1, [r4, #36]	; 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 800bec0:	0089      	lsls	r1, r1, #2
 800bec2:	68e0      	ldr	r0, [r4, #12]
 800bec4:	f016 f86c 	bl	8021fa0 <lv_mem_realloc>
 800bec8:	60e0      	str	r0, [r4, #12]
 800beca:	e7d2      	b.n	800be72 <obj_del_core+0xcc>
        for(i = 0; i < disp->screen_cnt; i++) {
 800becc:	460b      	mov	r3, r1
 800bece:	e7e9      	b.n	800bea4 <obj_del_core+0xfe>

0800bed0 <lv_obj_del>:
{
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 800bed4:	f7fc fbb2 	bl	800863c <lv_obj_invalidate>
    if(obj == NULL) return NULL;
 800bed8:	b1e4      	cbz	r4, 800bf14 <lv_obj_del+0x44>
    return obj->parent;
 800beda:	6865      	ldr	r5, [r4, #4]
    if(par) {
 800bedc:	b1d5      	cbz	r5, 800bf14 <lv_obj_del+0x44>
        lv_obj_scrollbar_invalidate(par);
 800bede:	4628      	mov	r0, r5
 800bee0:	f7fe fe2a 	bl	800ab38 <lv_obj_scrollbar_invalidate>
    obj_del_core(obj);
 800bee4:	4620      	mov	r0, r4
 800bee6:	f7ff ff5e 	bl	800bda6 <obj_del_core>
        lv_obj_update_layout(par);
 800beea:	4628      	mov	r0, r5
 800beec:	f7fd fa5a 	bl	80093a4 <lv_obj_update_layout>
        lv_obj_readjust_scroll(par, LV_ANIM_OFF);
 800bef0:	2100      	movs	r1, #0
 800bef2:	4628      	mov	r0, r5
 800bef4:	f7fe fe43 	bl	800ab7e <lv_obj_readjust_scroll>
        lv_obj_scrollbar_invalidate(par);
 800bef8:	4628      	mov	r0, r5
 800befa:	f7fe fe1d 	bl	800ab38 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 800befe:	2200      	movs	r2, #0
 800bf00:	2122      	movs	r1, #34	; 0x22
 800bf02:	4628      	mov	r0, r5
 800bf04:	f7f8 fa5e 	bl	80043c4 <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2124      	movs	r1, #36	; 0x24
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f7f8 fa59 	bl	80043c4 <lv_event_send>
}
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
        disp = lv_obj_get_disp(obj);
 800bf14:	4620      	mov	r0, r4
 800bf16:	f7ff fee7 	bl	800bce8 <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d0f8      	beq.n	800bf12 <lv_obj_del+0x42>
        if(disp->act_scr == obj) act_scr_del = true;
 800bf20:	692e      	ldr	r6, [r5, #16]
    obj_del_core(obj);
 800bf22:	4620      	mov	r0, r4
 800bf24:	f7ff ff3f 	bl	800bda6 <obj_del_core>
    if(act_scr_del) {
 800bf28:	42a6      	cmp	r6, r4
 800bf2a:	d1f2      	bne.n	800bf12 <lv_obj_del+0x42>
        disp->act_scr = NULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	612b      	str	r3, [r5, #16]
    LV_LOG_TRACE("finished (delete %p)", (void *)obj);
 800bf30:	e7ef      	b.n	800bf12 <lv_obj_del+0x42>

0800bf32 <lv_obj_set_parent>:
    if(obj->parent == NULL) {
 800bf32:	6843      	ldr	r3, [r0, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d070      	beq.n	800c01a <lv_obj_set_parent+0xe8>
{
 800bf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	4688      	mov	r8, r1
    if(parent == NULL) {
 800bf40:	2900      	cmp	r1, #0
 800bf42:	d061      	beq.n	800c008 <lv_obj_set_parent+0xd6>
    lv_obj_invalidate(obj);
 800bf44:	f7fc fb7a 	bl	800863c <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 800bf48:	4640      	mov	r0, r8
 800bf4a:	f7fb facb 	bl	80074e4 <lv_obj_allocate_spec_attr>
    lv_obj_t * old_parent = obj->parent;
 800bf4e:	687e      	ldr	r6, [r7, #4]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 800bf50:	4638      	mov	r0, r7
 800bf52:	f7ff ff0c 	bl	800bd6e <lv_obj_get_index>
 800bf56:	4604      	mov	r4, r0
 800bf58:	1c45      	adds	r5, r0, #1
 800bf5a:	00ad      	lsls	r5, r5, #2
 800bf5c:	e006      	b.n	800bf6c <lv_obj_set_parent+0x3a>
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 800bf5e:	68b3      	ldr	r3, [r6, #8]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	595a      	ldr	r2, [r3, r5]
 800bf64:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 800bf68:	3401      	adds	r4, #1
 800bf6a:	3504      	adds	r5, #4
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	f7ff fef8 	bl	800bd62 <lv_obj_get_child_cnt>
 800bf72:	3801      	subs	r0, #1
 800bf74:	42a0      	cmp	r0, r4
 800bf76:	dcf2      	bgt.n	800bf5e <lv_obj_set_parent+0x2c>
    old_parent->spec_attr->child_cnt--;
 800bf78:	68b2      	ldr	r2, [r6, #8]
 800bf7a:	6853      	ldr	r3, [r2, #4]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	6053      	str	r3, [r2, #4]
    if(old_parent->spec_attr->child_cnt) {
 800bf80:	68b4      	ldr	r4, [r6, #8]
 800bf82:	6861      	ldr	r1, [r4, #4]
 800bf84:	2900      	cmp	r1, #0
 800bf86:	d041      	beq.n	800c00c <lv_obj_set_parent+0xda>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 800bf88:	0089      	lsls	r1, r1, #2
 800bf8a:	6820      	ldr	r0, [r4, #0]
 800bf8c:	f016 f808 	bl	8021fa0 <lv_mem_realloc>
 800bf90:	6020      	str	r0, [r4, #0]
    parent->spec_attr->child_cnt++;
 800bf92:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800bf96:	6853      	ldr	r3, [r2, #4]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	6053      	str	r3, [r2, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800bf9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
                                                 parent->spec_attr->child_cnt * (sizeof(lv_obj_t *)));
 800bfa0:	6861      	ldr	r1, [r4, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 800bfa2:	0089      	lsls	r1, r1, #2
 800bfa4:	6820      	ldr	r0, [r4, #0]
 800bfa6:	f015 fffb 	bl	8021fa0 <lv_mem_realloc>
 800bfaa:	6020      	str	r0, [r4, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 800bfac:	4640      	mov	r0, r8
 800bfae:	f7ff fed8 	bl	800bd62 <lv_obj_get_child_cnt>
 800bfb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfb6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800bfba:	3801      	subs	r0, #1
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
    obj->parent = parent;
 800bfc2:	f8c7 8004 	str.w	r8, [r7, #4]
    lv_obj_readjust_scroll(old_parent, LV_ANIM_OFF);
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f7fe fdd8 	bl	800ab7e <lv_obj_readjust_scroll>
    lv_obj_scrollbar_invalidate(old_parent);
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7fe fdb2 	bl	800ab38 <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 800bfd4:	463a      	mov	r2, r7
 800bfd6:	2122      	movs	r1, #34	; 0x22
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7f8 f9f3 	bl	80043c4 <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 800bfde:	2200      	movs	r2, #0
 800bfe0:	2124      	movs	r1, #36	; 0x24
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f7f8 f9ee 	bl	80043c4 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 800bfe8:	463a      	mov	r2, r7
 800bfea:	2122      	movs	r1, #34	; 0x22
 800bfec:	4640      	mov	r0, r8
 800bfee:	f7f8 f9e9 	bl	80043c4 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 800bff2:	2200      	movs	r2, #0
 800bff4:	2123      	movs	r1, #35	; 0x23
 800bff6:	4640      	mov	r0, r8
 800bff8:	f7f8 f9e4 	bl	80043c4 <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 800bffc:	4638      	mov	r0, r7
 800bffe:	f7fc f829 	bl	8008054 <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 800c002:	4638      	mov	r0, r7
 800c004:	f7fc fb1a 	bl	800863c <lv_obj_invalidate>
}
 800c008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_mem_free(old_parent->spec_attr->children);
 800c00c:	6820      	ldr	r0, [r4, #0]
 800c00e:	f015 ffab 	bl	8021f68 <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 800c012:	68b3      	ldr	r3, [r6, #8]
 800c014:	2200      	movs	r2, #0
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	e7bb      	b.n	800bf92 <lv_obj_set_parent+0x60>
 800c01a:	4770      	bx	lr

0800c01c <lv_obj_move_to_index>:
{
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	4606      	mov	r6, r0
    if(index < 0) {
 800c020:	1e0d      	subs	r5, r1, #0
 800c022:	db1b      	blt.n	800c05c <lv_obj_move_to_index+0x40>
    const int32_t old_index = lv_obj_get_index(obj);
 800c024:	f7ff fea3 	bl	800bd6e <lv_obj_get_index>
 800c028:	4604      	mov	r4, r0
    if(obj == NULL) return NULL;
 800c02a:	b30e      	cbz	r6, 800c070 <lv_obj_move_to_index+0x54>
    return obj->parent;
 800c02c:	6877      	ldr	r7, [r6, #4]
    if(index < 0) return;
 800c02e:	2d00      	cmp	r5, #0
 800c030:	db39      	blt.n	800c0a6 <lv_obj_move_to_index+0x8a>
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 800c032:	4638      	mov	r0, r7
 800c034:	f7ff fe95 	bl	800bd62 <lv_obj_get_child_cnt>
 800c038:	42a8      	cmp	r0, r5
 800c03a:	dd34      	ble.n	800c0a6 <lv_obj_move_to_index+0x8a>
    if(index == old_index) return;
 800c03c:	42a5      	cmp	r5, r4
 800c03e:	d032      	beq.n	800c0a6 <lv_obj_move_to_index+0x8a>
    if(index < old_index) {
 800c040:	db18      	blt.n	800c074 <lv_obj_move_to_index+0x58>
        while(i < index) {
 800c042:	dd24      	ble.n	800c08e <lv_obj_move_to_index+0x72>
 800c044:	1c63      	adds	r3, r4, #1
 800c046:	009b      	lsls	r3, r3, #2
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	6812      	ldr	r2, [r2, #0]
 800c04c:	58d1      	ldr	r1, [r2, r3]
 800c04e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
            i++;
 800c052:	3401      	adds	r4, #1
        while(i < index) {
 800c054:	3304      	adds	r3, #4
 800c056:	42ac      	cmp	r4, r5
 800c058:	d1f6      	bne.n	800c048 <lv_obj_move_to_index+0x2c>
 800c05a:	e018      	b.n	800c08e <lv_obj_move_to_index+0x72>
    if(obj == NULL) return NULL;
 800c05c:	b320      	cbz	r0, 800c0a8 <lv_obj_move_to_index+0x8c>
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800c05e:	6840      	ldr	r0, [r0, #4]
 800c060:	f7ff fe7f 	bl	800bd62 <lv_obj_get_child_cnt>
 800c064:	4405      	add	r5, r0
    const int32_t old_index = lv_obj_get_index(obj);
 800c066:	4630      	mov	r0, r6
 800c068:	f7ff fe81 	bl	800bd6e <lv_obj_get_index>
 800c06c:	4604      	mov	r4, r0
    if(obj == NULL) return NULL;
 800c06e:	e7dd      	b.n	800c02c <lv_obj_move_to_index+0x10>
 800c070:	4637      	mov	r7, r6
 800c072:	e7de      	b.n	800c032 <lv_obj_move_to_index+0x16>
 800c074:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800c078:	3b01      	subs	r3, #1
 800c07a:	009b      	lsls	r3, r3, #2
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 800c07c:	68ba      	ldr	r2, [r7, #8]
 800c07e:	6812      	ldr	r2, [r2, #0]
 800c080:	58d1      	ldr	r1, [r2, r3]
 800c082:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
            i--;
 800c086:	3c01      	subs	r4, #1
        while(i > index)  {
 800c088:	3b04      	subs	r3, #4
 800c08a:	42ac      	cmp	r4, r5
 800c08c:	d1f6      	bne.n	800c07c <lv_obj_move_to_index+0x60>
    parent->spec_attr->children[index] = obj;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 800c096:	2200      	movs	r2, #0
 800c098:	2122      	movs	r1, #34	; 0x22
 800c09a:	4638      	mov	r0, r7
 800c09c:	f7f8 f992 	bl	80043c4 <lv_event_send>
    lv_obj_invalidate(parent);
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7fc facb 	bl	800863c <lv_obj_invalidate>
}
 800c0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	f7ff fe5a 	bl	800bd62 <lv_obj_get_child_cnt>
 800c0ae:	4405      	add	r5, r0
    const int32_t old_index = lv_obj_get_index(obj);
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	f7ff fe5c 	bl	800bd6e <lv_obj_get_index>
 800c0b6:	4604      	mov	r4, r0
    if(obj == NULL) return NULL;
 800c0b8:	4637      	mov	r7, r6
 800c0ba:	e7b8      	b.n	800c02e <lv_obj_move_to_index+0x12>

0800c0bc <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 800c0bc:	b510      	push	{r4, lr}
 800c0be:	b082      	sub	sp, #8
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 800c0c0:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 800c0c4:	880c      	ldrh	r4, [r1, #0]
 800c0c6:	4474      	add	r4, lr
    lv_area_t offset_area = {
 800c0c8:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 800c0cc:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800c0d0:	884c      	ldrh	r4, [r1, #2]
 800c0d2:	4464      	add	r4, ip
    lv_area_t offset_area = {
 800c0d4:	f8ad 4002 	strh.w	r4, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 800c0d8:	888c      	ldrh	r4, [r1, #4]
 800c0da:	44a6      	add	lr, r4
    lv_area_t offset_area = {
 800c0dc:	f8ad e004 	strh.w	lr, [sp, #4]
        .y2 = area->y2 + drv->offset_y
 800c0e0:	88c9      	ldrh	r1, [r1, #6]
 800c0e2:	448c      	add	ip, r1
    lv_area_t offset_area = {
 800c0e4:	f8ad c006 	strh.w	ip, [sp, #6]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 800c0e8:	6943      	ldr	r3, [r0, #20]
 800c0ea:	4669      	mov	r1, sp
 800c0ec:	4798      	blx	r3
}
 800c0ee:	b002      	add	sp, #8
 800c0f0:	bd10      	pop	{r4, pc}

0800c0f2 <lv_refr_get_top_obj>:
{
 800c0f2:	b570      	push	{r4, r5, r6, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	3114      	adds	r1, #20
 800c0fe:	f015 f92a 	bl	8021356 <_lv_area_is_in>
 800c102:	b370      	cbz	r0, 800c162 <lv_refr_get_top_obj+0x70>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800c104:	2101      	movs	r1, #1
 800c106:	4620      	mov	r0, r4
 800c108:	f7fa ffc4 	bl	8007094 <lv_obj_has_flag>
 800c10c:	bb68      	cbnz	r0, 800c16a <lv_refr_get_top_obj+0x78>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800c10e:	4620      	mov	r0, r4
 800c110:	f7fb fe82 	bl	8007e18 <_lv_obj_get_layer_type>
 800c114:	bb58      	cbnz	r0, 800c16e <lv_refr_get_top_obj+0x7c>
    info.res = LV_COVER_RES_COVER;
 800c116:	2300      	movs	r3, #0
 800c118:	f88d 3000 	strb.w	r3, [sp]
    info.area = area_p;
 800c11c:	9601      	str	r6, [sp, #4]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800c11e:	466a      	mov	r2, sp
 800c120:	2112      	movs	r1, #18
 800c122:	4620      	mov	r0, r4
 800c124:	f7f8 f94e 	bl	80043c4 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800c128:	f89d 3000 	ldrb.w	r3, [sp]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d020      	beq.n	800c172 <lv_refr_get_top_obj+0x80>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c130:	4620      	mov	r0, r4
 800c132:	f7ff fe16 	bl	800bd62 <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 800c136:	1e45      	subs	r5, r0, #1
 800c138:	d40c      	bmi.n	800c154 <lv_refr_get_top_obj+0x62>
        lv_obj_t * child = obj->spec_attr->children[i];
 800c13a:	68a3      	ldr	r3, [r4, #8]
 800c13c:	681b      	ldr	r3, [r3, #0]
        found_p = lv_refr_get_top_obj(area_p, child);
 800c13e:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800c142:	4630      	mov	r0, r6
 800c144:	f7ff ffd5 	bl	800c0f2 <lv_refr_get_top_obj>
        if(found_p != NULL) {
 800c148:	4603      	mov	r3, r0
 800c14a:	b958      	cbnz	r0, 800c164 <lv_refr_get_top_obj+0x72>
    for(i = child_cnt - 1; i >= 0; i--) {
 800c14c:	3d01      	subs	r5, #1
 800c14e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800c152:	d1f2      	bne.n	800c13a <lv_refr_get_top_obj+0x48>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 800c154:	f89d 3000 	ldrb.w	r3, [sp]
        found_p = obj;
 800c158:	2b00      	cmp	r3, #0
 800c15a:	bf0c      	ite	eq
 800c15c:	4623      	moveq	r3, r4
 800c15e:	2300      	movne	r3, #0
 800c160:	e000      	b.n	800c164 <lv_refr_get_top_obj+0x72>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	b002      	add	sp, #8
 800c168:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 800c16a:	2300      	movs	r3, #0
 800c16c:	e7fa      	b.n	800c164 <lv_refr_get_top_obj+0x72>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	e7f8      	b.n	800c164 <lv_refr_get_top_obj+0x72>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	e7f6      	b.n	800c164 <lv_refr_get_top_obj+0x72>
	...

0800c178 <_lv_refr_init>:

#if LV_USE_PERF_MONITOR
static void perf_monitor_init(perf_monitor_t * _perf_monitor)
{
    LV_ASSERT_NULL(_perf_monitor);
    _perf_monitor->elaps_sum = 0;
 800c178:	4b04      	ldr	r3, [pc, #16]	; (800c18c <_lv_refr_init+0x14>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	605a      	str	r2, [r3, #4]
    _perf_monitor->fps_sum_all = 0;
 800c17e:	611a      	str	r2, [r3, #16]
    _perf_monitor->fps_sum_cnt = 0;
 800c180:	60da      	str	r2, [r3, #12]
    _perf_monitor->frame_cnt = 0;
 800c182:	609a      	str	r2, [r3, #8]
    _perf_monitor->perf_last_time = 0;
 800c184:	601a      	str	r2, [r3, #0]
    _perf_monitor->perf_label = NULL;
 800c186:	615a      	str	r2, [r3, #20]
}
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	200025ec 	.word	0x200025ec

0800c190 <lv_obj_redraw>:
{
 800c190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c194:	b087      	sub	sp, #28
 800c196:	4606      	mov	r6, r0
 800c198:	460d      	mov	r5, r1
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800c19a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    lv_obj_get_coords(obj, &obj_coords_ext);
 800c19e:	a902      	add	r1, sp, #8
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	f7fb ffa6 	bl	80080f2 <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f7fb fdfd 	bl	8007da6 <_lv_obj_get_ext_draw_size>
 800c1ac:	4601      	mov	r1, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	a802      	add	r0, sp, #8
 800c1b2:	f014 ff88 	bl	80210c6 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 800c1b6:	aa02      	add	r2, sp, #8
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	a804      	add	r0, sp, #16
 800c1bc:	f014 ffa1 	bl	8021102 <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800c1c0:	b198      	cbz	r0, 800c1ea <lv_obj_redraw+0x5a>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800c1c2:	ab04      	add	r3, sp, #16
 800c1c4:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	2114      	movs	r1, #20
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f7f8 f8fa 	bl	80043c4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	2115      	movs	r1, #21
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f7f8 f8f5 	bl	80043c4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 800c1da:	4632      	mov	r2, r6
 800c1dc:	2116      	movs	r1, #22
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f7f8 f8f0 	bl	80043c4 <lv_event_send>
 800c1e4:	f04f 0901 	mov.w	r9, #1
 800c1e8:	e007      	b.n	800c1fa <lv_obj_redraw+0x6a>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 800c1ea:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f7fa ff50 	bl	8007094 <lv_obj_has_flag>
    if(should_draw) {
 800c1f4:	4681      	mov	r9, r0
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d1e3      	bne.n	800c1c2 <lv_obj_redraw+0x32>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 800c1fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c1fe:	4628      	mov	r0, r5
 800c200:	f7fa ff48 	bl	8007094 <lv_obj_has_flag>
 800c204:	b1f8      	cbz	r0, 800c246 <lv_obj_redraw+0xb6>
        clip_coords_for_children  = *clip_area_ori;
 800c206:	466b      	mov	r3, sp
 800c208:	f8d8 0000 	ldr.w	r0, [r8]
 800c20c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c210:	c303      	stmia	r3!, {r0, r1}
        draw_ctx->clip_area = &clip_coords_for_children;
 800c212:	f8c6 d008 	str.w	sp, [r6, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 800c216:	4628      	mov	r0, r5
 800c218:	f7ff fda3 	bl	800bd62 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 800c21c:	4607      	mov	r7, r0
 800c21e:	b150      	cbz	r0, 800c236 <lv_obj_redraw+0xa6>
 800c220:	2400      	movs	r4, #0
            lv_obj_t * child = obj->spec_attr->children[i];
 800c222:	68ab      	ldr	r3, [r5, #8]
 800c224:	681b      	ldr	r3, [r3, #0]
            refr_obj(draw_ctx, child);
 800c226:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800c22a:	4630      	mov	r0, r6
 800c22c:	f000 f826 	bl	800c27c <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 800c230:	3401      	adds	r4, #1
 800c232:	42a7      	cmp	r7, r4
 800c234:	d1f5      	bne.n	800c222 <lv_obj_redraw+0x92>
    if(should_draw) {
 800c236:	f1b9 0f00 	cmp.w	r9, #0
 800c23a:	d10d      	bne.n	800c258 <lv_obj_redraw+0xc8>
    draw_ctx->clip_area = clip_area_ori;
 800c23c:	f8c6 8008 	str.w	r8, [r6, #8]
}
 800c240:	b007      	add	sp, #28
 800c242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 800c246:	f105 0214 	add.w	r2, r5, #20
 800c24a:	4641      	mov	r1, r8
 800c24c:	4668      	mov	r0, sp
 800c24e:	f014 ff58 	bl	8021102 <_lv_area_intersect>
 800c252:	2800      	cmp	r0, #0
 800c254:	d0ef      	beq.n	800c236 <lv_obj_redraw+0xa6>
 800c256:	e7dc      	b.n	800c212 <lv_obj_redraw+0x82>
        draw_ctx->clip_area = &clip_coords_for_obj;
 800c258:	ab04      	add	r3, sp, #16
 800c25a:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 800c25c:	4632      	mov	r2, r6
 800c25e:	2117      	movs	r1, #23
 800c260:	4628      	mov	r0, r5
 800c262:	f7f8 f8af 	bl	80043c4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 800c266:	4632      	mov	r2, r6
 800c268:	2118      	movs	r1, #24
 800c26a:	4628      	mov	r0, r5
 800c26c:	f7f8 f8aa 	bl	80043c4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 800c270:	4632      	mov	r2, r6
 800c272:	2119      	movs	r1, #25
 800c274:	4628      	mov	r0, r5
 800c276:	f7f8 f8a5 	bl	80043c4 <lv_event_send>
 800c27a:	e7df      	b.n	800c23c <lv_obj_redraw+0xac>

0800c27c <refr_obj>:
{
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	b091      	sub	sp, #68	; 0x44
 800c282:	4605      	mov	r5, r0
 800c284:	460c      	mov	r4, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 800c286:	2101      	movs	r1, #1
 800c288:	4620      	mov	r0, r4
 800c28a:	f7fa ff03 	bl	8007094 <lv_obj_has_flag>
 800c28e:	9000      	str	r0, [sp, #0]
 800c290:	b110      	cbz	r0, 800c298 <refr_obj+0x1c>
}
 800c292:	b011      	add	sp, #68	; 0x44
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 800c298:	4620      	mov	r0, r4
 800c29a:	f7fb fdbd 	bl	8007e18 <_lv_obj_get_layer_type>
    if(layer_type == LV_LAYER_TYPE_NONE) {
 800c29e:	4606      	mov	r6, r0
 800c2a0:	b920      	cbnz	r0, 800c2ac <refr_obj+0x30>
        lv_obj_redraw(draw_ctx, obj);
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f7ff ff73 	bl	800c190 <lv_obj_redraw>
 800c2aa:	e7f2      	b.n	800c292 <refr_obj+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 800c2ac:	2260      	movs	r2, #96	; 0x60
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f7fe fdfb 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 800c2b6:	b2c7      	uxtb	r7, r0
        if(opa < LV_OPA_MIN) return;
 800c2b8:	2f01      	cmp	r7, #1
 800c2ba:	d9ea      	bls.n	800c292 <refr_obj+0x16>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7fb fd72 	bl	8007da6 <_lv_obj_get_ext_draw_size>
 800c2c2:	4680      	mov	r8, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 800c2c4:	a904      	add	r1, sp, #16
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f7fb ff13 	bl	80080f2 <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 800c2cc:	4642      	mov	r2, r8
 800c2ce:	4641      	mov	r1, r8
 800c2d0:	a804      	add	r0, sp, #16
 800c2d2:	f014 fef8 	bl	80210c6 <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 800c2d6:	2e02      	cmp	r6, #2
 800c2d8:	d01d      	beq.n	800c316 <refr_obj+0x9a>
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 800c2da:	2e01      	cmp	r6, #1
 800c2dc:	d1d9      	bne.n	800c292 <refr_obj+0x16>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 800c2de:	aa04      	add	r2, sp, #16
 800c2e0:	68a9      	ldr	r1, [r5, #8]
 800c2e2:	a80a      	add	r0, sp, #40	; 0x28
 800c2e4:	f014 ff0d 	bl	8021102 <_lv_area_intersect>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d0d2      	beq.n	800c292 <refr_obj+0x16>
        *layer_area_out = clip_coords_for_obj;
 800c2ec:	ab02      	add	r3, sp, #8
 800c2ee:	aa0a      	add	r2, sp, #40	; 0x28
 800c2f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2f4:	e883 0003 	stmia.w	r3, {r0, r1}
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800c2f8:	f104 0214 	add.w	r2, r4, #20
 800c2fc:	4611      	mov	r1, r2
 800c2fe:	9201      	str	r2, [sp, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	4618      	mov	r0, r3
 800c304:	f015 f827 	bl	8021356 <_lv_area_is_in>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d13d      	bne.n	800c388 <refr_obj+0x10c>
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800c30c:	f046 0a02 	orr.w	sl, r6, #2
 800c310:	fa5f fa8a 	uxtb.w	sl, sl
 800c314:	e04b      	b.n	800c3ae <refr_obj+0x132>
        lv_area_t tranf_coords = obj_coords_ext;
 800c316:	f10d 0820 	add.w	r8, sp, #32
 800c31a:	ab04      	add	r3, sp, #16
 800c31c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c320:	e888 0003 	stmia.w	r8, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 800c324:	2300      	movs	r3, #0
 800c326:	461a      	mov	r2, r3
 800c328:	4641      	mov	r1, r8
 800c32a:	4620      	mov	r0, r4
 800c32c:	f7fc f863 	bl	80083f6 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 800c330:	4642      	mov	r2, r8
 800c332:	68a9      	ldr	r1, [r5, #8]
 800c334:	a806      	add	r0, sp, #24
 800c336:	f014 fee4 	bl	8021102 <_lv_area_intersect>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d0a9      	beq.n	800c292 <refr_obj+0x16>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 800c33e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c342:	ab06      	add	r3, sp, #24
 800c344:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c348:	e888 0003 	stmia.w	r8, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 800c34c:	2301      	movs	r3, #1
 800c34e:	2200      	movs	r2, #0
 800c350:	4641      	mov	r1, r8
 800c352:	4620      	mov	r0, r4
 800c354:	f7fc f84f 	bl	80083f6 <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 800c358:	aa04      	add	r2, sp, #16
 800c35a:	4641      	mov	r1, r8
 800c35c:	4640      	mov	r0, r8
 800c35e:	f014 fed0 	bl	8021102 <_lv_area_intersect>
 800c362:	2800      	cmp	r0, #0
 800c364:	d095      	beq.n	800c292 <refr_obj+0x16>
        *layer_area_out = inverse_clip_coords_for_obj;
 800c366:	ab02      	add	r3, sp, #8
 800c368:	e9d8 0100 	ldrd	r0, r1, [r8]
 800c36c:	e883 0003 	stmia.w	r3, {r0, r1}
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 800c370:	f104 0214 	add.w	r2, r4, #20
 800c374:	4611      	mov	r1, r2
 800c376:	9201      	str	r2, [sp, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	4618      	mov	r0, r3
 800c37c:	f014 ffeb 	bl	8021356 <_lv_area_is_in>
 800c380:	b910      	cbnz	r0, 800c388 <refr_obj+0x10c>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800c382:	f04f 0a01 	mov.w	sl, #1
 800c386:	e012      	b.n	800c3ae <refr_obj+0x132>
            info.res = LV_COVER_RES_COVER;
 800c388:	2300      	movs	r3, #0
 800c38a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            info.area = &layer_area_full;
 800c38e:	ab02      	add	r3, sp, #8
 800c390:	930b      	str	r3, [sp, #44]	; 0x2c
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800c392:	aa0a      	add	r2, sp, #40	; 0x28
 800c394:	2112      	movs	r1, #18
 800c396:	4620      	mov	r0, r4
 800c398:	f7f8 f814 	bl	80043c4 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800c39c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 800c3a0:	f1ba 0a00 	subs.w	sl, sl, #0
 800c3a4:	bf18      	it	ne
 800c3a6:	f04f 0a01 	movne.w	sl, #1
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 800c3aa:	2e01      	cmp	r6, #1
 800c3ac:	d06f      	beq.n	800c48e <refr_obj+0x212>
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 800c3ae:	4652      	mov	r2, sl
 800c3b0:	a902      	add	r1, sp, #8
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f001 ff90 	bl	800e2d8 <lv_draw_layer_create>
        if(layer_ctx == NULL) {
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f43f af69 	beq.w	800c292 <refr_obj+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 800c3c0:	226e      	movs	r2, #110	; 0x6e
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7fe fd71 	bl	800aeac <lv_obj_get_style_prop>
 800c3ca:	4683      	mov	fp, r0
    return (lv_coord_t)v.num;
 800c3cc:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 800c3d0:	226f      	movs	r2, #111	; 0x6f
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f7fe fd69 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800c3da:	fa0f f880 	sxth.w	r8, r0
        if(LV_COORD_IS_PCT(pivot.x)) {
 800c3de:	f40b 4bc0 	and.w	fp, fp, #24576	; 0x6000
 800c3e2:	f5bb 5f00 	cmp.w	fp, #8192	; 0x2000
 800c3e6:	d054      	beq.n	800c492 <refr_obj+0x216>
        if(LV_COORD_IS_PCT(pivot.y)) {
 800c3e8:	f400 40c0 	and.w	r0, r0, #24576	; 0x6000
 800c3ec:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800c3f0:	d06b      	beq.n	800c4ca <refr_obj+0x24e>
        lv_draw_img_dsc_init(&draw_dsc);
 800c3f2:	a80a      	add	r0, sp, #40	; 0x28
 800c3f4:	f001 fa95 	bl	800d922 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 800c3f8:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 800c3fc:	226d      	movs	r2, #109	; 0x6d
 800c3fe:	2100      	movs	r1, #0
 800c400:	4620      	mov	r0, r4
 800c402:	f7fe fd53 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800c406:	b203      	sxth	r3, r0
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 800c408:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800c40c:	dd79      	ble.n	800c502 <refr_obj+0x286>
 800c40e:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
 800c412:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 800c416:	226c      	movs	r2, #108	; 0x6c
 800c418:	2100      	movs	r1, #0
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7fe fd46 	bl	800aeac <lv_obj_get_style_prop>
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 800c420:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 800c424:	2267      	movs	r2, #103	; 0x67
 800c426:	2100      	movs	r1, #0
 800c428:	4620      	mov	r0, r4
 800c42a:	f7fe fd3f 	bl	800aeac <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 800c42e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800c432:	f360 0303 	bfi	r3, r0, #0, #4
 800c436:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 800c43a:	4b63      	ldr	r3, [pc, #396]	; (800c5c8 <refr_obj+0x34c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	7c1b      	ldrb	r3, [r3, #16]
 800c442:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c446:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800c44a:	f363 0200 	bfi	r2, r3, #0, #1
 800c44e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800c452:	f01a 0702 	ands.w	r7, sl, #2
 800c456:	d010      	beq.n	800c47a <refr_obj+0x1fe>
            layer_ctx->area_act = layer_ctx->area_full;
 800c458:	f106 0308 	add.w	r3, r6, #8
 800c45c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c460:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800c464:	8973      	ldrh	r3, [r6, #10]
 800c466:	8a72      	ldrh	r2, [r6, #18]
 800c468:	4413      	add	r3, r2
 800c46a:	3b01      	subs	r3, #1
 800c46c:	b21b      	sxth	r3, r3
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800c46e:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800c472:	4293      	cmp	r3, r2
 800c474:	bfa8      	it	ge
 800c476:	4613      	movge	r3, r2
 800c478:	81f3      	strh	r3, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800c47a:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800c47e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c482:	429a      	cmp	r2, r3
 800c484:	f300 809a 	bgt.w	800c5bc <refr_obj+0x340>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800c488:	f00a 0a01 	and.w	sl, sl, #1
 800c48c:	e07f      	b.n	800c58e <refr_obj+0x312>
 800c48e:	4656      	mov	r6, sl
 800c490:	e73c      	b.n	800c30c <refr_obj+0x90>
        if(LV_COORD_IS_PCT(pivot.x)) {
 800c492:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 800c496:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c49a:	dca5      	bgt.n	800c3e8 <refr_obj+0x16c>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 800c49c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4a0:	bfcc      	ite	gt
 800c4a2:	f5c3 727a 	rsbgt	r2, r3, #1000	; 0x3e8
 800c4a6:	461a      	movle	r2, r3
 800c4a8:	8b23      	ldrh	r3, [r4, #24]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	8aa1      	ldrh	r1, [r4, #20]
 800c4ae:	1a5b      	subs	r3, r3, r1
 800c4b0:	b21b      	sxth	r3, r3
 800c4b2:	fb02 f303 	mul.w	r3, r2, r3
 800c4b6:	4a45      	ldr	r2, [pc, #276]	; (800c5cc <refr_obj+0x350>)
 800c4b8:	fb82 1203 	smull	r1, r2, r2, r3
 800c4bc:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800c4c0:	ebc9 1962 	rsb	r9, r9, r2, asr #5
 800c4c4:	fa0f f989 	sxth.w	r9, r9
 800c4c8:	e78e      	b.n	800c3e8 <refr_obj+0x16c>
        if(LV_COORD_IS_PCT(pivot.y)) {
 800c4ca:	f428 43c0 	bic.w	r3, r8, #24576	; 0x6000
 800c4ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c4d2:	dc8e      	bgt.n	800c3f2 <refr_obj+0x176>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 800c4d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4d8:	bfcc      	ite	gt
 800c4da:	f5c3 727a 	rsbgt	r2, r3, #1000	; 0x3e8
 800c4de:	461a      	movle	r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c4e0:	8b63      	ldrh	r3, [r4, #26]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	8ae1      	ldrh	r1, [r4, #22]
 800c4e6:	1a5b      	subs	r3, r3, r1
 800c4e8:	b21b      	sxth	r3, r3
 800c4ea:	fb02 f303 	mul.w	r3, r2, r3
 800c4ee:	4a37      	ldr	r2, [pc, #220]	; (800c5cc <refr_obj+0x350>)
 800c4f0:	fb82 1203 	smull	r1, r2, r2, r3
 800c4f4:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800c4f8:	ebc8 1862 	rsb	r8, r8, r2, asr #5
 800c4fc:	fa0f f888 	sxth.w	r8, r8
 800c500:	e777      	b.n	800c3f2 <refr_obj+0x176>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800c502:	2b00      	cmp	r3, #0
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 800c504:	bfae      	itee	ge
 800c506:	f8ad 3028 	strhge.w	r3, [sp, #40]	; 0x28
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 800c50a:	f500 6061 	addlt.w	r0, r0, #3600	; 0xe10
 800c50e:	f8ad 0028 	strhlt.w	r0, [sp, #40]	; 0x28
 800c512:	e780      	b.n	800c416 <refr_obj+0x19a>
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 800c514:	f106 0b08 	add.w	fp, r6, #8
 800c518:	2200      	movs	r2, #0
 800c51a:	9901      	ldr	r1, [sp, #4]
 800c51c:	4658      	mov	r0, fp
 800c51e:	f014 ff1a 	bl	8021356 <_lv_area_is_in>
 800c522:	2800      	cmp	r0, #0
 800c524:	d13a      	bne.n	800c59c <refr_obj+0x320>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 800c526:	8973      	ldrh	r3, [r6, #10]
 800c528:	8a32      	ldrh	r2, [r6, #16]
 800c52a:	4413      	add	r3, r2
 800c52c:	3b01      	subs	r3, #1
 800c52e:	81f3      	strh	r3, [r6, #14]
 800c530:	2201      	movs	r2, #1
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 800c532:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c536:	f9b6 100e 	ldrsh.w	r1, [r6, #14]
 800c53a:	4299      	cmp	r1, r3
 800c53c:	bfc8      	it	gt
 800c53e:	81f3      	strhgt	r3, [r6, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 800c540:	4631      	mov	r1, r6
 800c542:	4628      	mov	r0, r5
 800c544:	f001 fef8 	bl	800e338 <lv_draw_layer_adjust>
            lv_obj_redraw(draw_ctx, obj);
 800c548:	4621      	mov	r1, r4
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7ff fe20 	bl	800c190 <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 800c550:	686a      	ldr	r2, [r5, #4]
 800c552:	8aa3      	ldrh	r3, [r4, #20]
 800c554:	8811      	ldrh	r1, [r2, #0]
 800c556:	1a5b      	subs	r3, r3, r1
 800c558:	444b      	add	r3, r9
 800c55a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 800c55e:	8ae3      	ldrh	r3, [r4, #22]
 800c560:	8852      	ldrh	r2, [r2, #2]
 800c562:	1a9b      	subs	r3, r3, r2
 800c564:	4443      	add	r3, r8
 800c566:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 800c56a:	aa0a      	add	r2, sp, #40	; 0x28
 800c56c:	4631      	mov	r1, r6
 800c56e:	4628      	mov	r0, r5
 800c570:	f001 fee7 	bl	800e342 <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 800c574:	b317      	cbz	r7, 800c5bc <refr_obj+0x340>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 800c576:	89f3      	ldrh	r3, [r6, #14]
 800c578:	3301      	adds	r3, #1
 800c57a:	b219      	sxth	r1, r3
 800c57c:	8171      	strh	r1, [r6, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 800c57e:	8a72      	ldrh	r2, [r6, #18]
 800c580:	3a01      	subs	r2, #1
 800c582:	4413      	add	r3, r2
 800c584:	81f3      	strh	r3, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 800c586:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c58a:	428b      	cmp	r3, r1
 800c58c:	db16      	blt.n	800c5bc <refr_obj+0x340>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800c58e:	2f00      	cmp	r7, #0
 800c590:	d0da      	beq.n	800c548 <refr_obj+0x2cc>
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800c592:	f1ba 0f00 	cmp.w	sl, #0
 800c596:	d1bd      	bne.n	800c514 <refr_obj+0x298>
        has_alpha = false;
 800c598:	9a00      	ldr	r2, [sp, #0]
 800c59a:	e7ca      	b.n	800c532 <refr_obj+0x2b6>
            info.res = LV_COVER_RES_COVER;
 800c59c:	2300      	movs	r3, #0
 800c59e:	f88d 3020 	strb.w	r3, [sp, #32]
            info.area = &layer_ctx->area_act;
 800c5a2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 800c5a6:	aa08      	add	r2, sp, #32
 800c5a8:	2112      	movs	r1, #18
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7f7 ff0a 	bl	80043c4 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 800c5b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1b6      	bne.n	800c526 <refr_obj+0x2aa>
 800c5b8:	9a00      	ldr	r2, [sp, #0]
 800c5ba:	e7ba      	b.n	800c532 <refr_obj+0x2b6>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 800c5bc:	4631      	mov	r1, r6
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f001 fec4 	bl	800e34c <lv_draw_layer_destroy>
 800c5c4:	e665      	b.n	800c292 <refr_obj+0x16>
 800c5c6:	bf00      	nop
 800c5c8:	200025e8 	.word	0x200025e8
 800c5cc:	51eb851f 	.word	0x51eb851f

0800c5d0 <refr_obj_and_children>:
{
 800c5d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	4681      	mov	r9, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800c5d6:	4688      	mov	r8, r1
 800c5d8:	b169      	cbz	r1, 800c5f6 <refr_obj_and_children+0x26>
    refr_obj(draw_ctx, top_obj);
 800c5da:	4641      	mov	r1, r8
 800c5dc:	4648      	mov	r0, r9
 800c5de:	f7ff fe4d 	bl	800c27c <refr_obj>
    parent = lv_obj_get_parent(top_obj);
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	f7ff fba4 	bl	800bd30 <lv_obj_get_parent>
    while(parent != NULL) {
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	b158      	cbz	r0, 800c604 <refr_obj_and_children+0x34>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800c5ec:	f04f 0b17 	mov.w	fp, #23
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800c5f0:	f04f 0a18 	mov.w	sl, #24
 800c5f4:	e02f      	b.n	800c656 <refr_obj_and_children+0x86>
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 800c5f6:	4b1c      	ldr	r3, [pc, #112]	; (800c668 <refr_obj_and_children+0x98>)
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	f7f7 fd91 	bl	8004120 <lv_disp_get_scr_act>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 800c5fe:	4680      	mov	r8, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	d1ea      	bne.n	800c5da <refr_obj_and_children+0xa>
}
 800c604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(child == border_p) go = true;
 800c608:	4541      	cmp	r1, r8
 800c60a:	bf14      	ite	ne
 800c60c:	2600      	movne	r6, #0
 800c60e:	2601      	moveq	r6, #1
        for(i = 0; i < child_cnt; i++) {
 800c610:	3401      	adds	r4, #1
 800c612:	42a7      	cmp	r7, r4
 800c614:	d009      	beq.n	800c62a <refr_obj_and_children+0x5a>
            lv_obj_t * child = parent->spec_attr->children[i];
 800c616:	68ab      	ldr	r3, [r5, #8]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            if(!go) {
 800c61e:	2e00      	cmp	r6, #0
 800c620:	d0f2      	beq.n	800c608 <refr_obj_and_children+0x38>
                refr_obj(draw_ctx, child);
 800c622:	4648      	mov	r0, r9
 800c624:	f7ff fe2a 	bl	800c27c <refr_obj>
 800c628:	e7f2      	b.n	800c610 <refr_obj_and_children+0x40>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 800c62a:	464a      	mov	r2, r9
 800c62c:	4659      	mov	r1, fp
 800c62e:	4628      	mov	r0, r5
 800c630:	f7f7 fec8 	bl	80043c4 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 800c634:	464a      	mov	r2, r9
 800c636:	4651      	mov	r1, sl
 800c638:	4628      	mov	r0, r5
 800c63a:	f7f7 fec3 	bl	80043c4 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 800c63e:	464a      	mov	r2, r9
 800c640:	2119      	movs	r1, #25
 800c642:	4628      	mov	r0, r5
 800c644:	f7f7 febe 	bl	80043c4 <lv_event_send>
        parent = lv_obj_get_parent(parent);
 800c648:	4628      	mov	r0, r5
 800c64a:	f7ff fb71 	bl	800bd30 <lv_obj_get_parent>
    while(parent != NULL) {
 800c64e:	46a8      	mov	r8, r5
 800c650:	4605      	mov	r5, r0
 800c652:	2800      	cmp	r0, #0
 800c654:	d0d6      	beq.n	800c604 <refr_obj_and_children+0x34>
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 800c656:	4628      	mov	r0, r5
 800c658:	f7ff fb83 	bl	800bd62 <lv_obj_get_child_cnt>
        for(i = 0; i < child_cnt; i++) {
 800c65c:	4607      	mov	r7, r0
 800c65e:	2800      	cmp	r0, #0
 800c660:	d0e3      	beq.n	800c62a <refr_obj_and_children+0x5a>
 800c662:	2400      	movs	r4, #0
        bool go = false;
 800c664:	4626      	mov	r6, r4
 800c666:	e7d6      	b.n	800c616 <refr_obj_and_children+0x46>
 800c668:	200025e8 	.word	0x200025e8

0800c66c <refr_area_part>:
{
 800c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c670:	b0ad      	sub	sp, #180	; 0xb4
 800c672:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800c674:	4b93      	ldr	r3, [pc, #588]	; (800c8c4 <refr_area_part+0x258>)
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	f014 fa4c 	bl	8020b14 <lv_disp_get_draw_buf>
 800c67c:	4604      	mov	r4, r0
    if(draw_ctx->init_buf)
 800c67e:	68eb      	ldr	r3, [r5, #12]
 800c680:	b10b      	cbz	r3, 800c686 <refr_area_part+0x1a>
        draw_ctx->init_buf(draw_ctx);
 800c682:	4628      	mov	r0, r5
 800c684:	4798      	blx	r3
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	b173      	cbz	r3, 800c6a8 <refr_area_part+0x3c>
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d072      	beq.n	800c776 <refr_area_part+0x10a>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800c690:	4b8c      	ldr	r3, [pc, #560]	; (800c8c4 <refr_area_part+0x258>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c69a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c69e:	fb02 f303 	mul.w	r3, r2, r3
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 800c6a2:	68e2      	ldr	r2, [r4, #12]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d066      	beq.n	800c776 <refr_area_part+0x10a>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 800c6a8:	686e      	ldr	r6, [r5, #4]
 800c6aa:	4c86      	ldr	r4, [pc, #536]	; (800c8c4 <refr_area_part+0x258>)
 800c6ac:	6820      	ldr	r0, [r4, #0]
 800c6ae:	f7f7 fd37 	bl	8004120 <lv_disp_get_scr_act>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7ff fd1c 	bl	800c0f2 <lv_refr_get_top_obj>
 800c6ba:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
 800c6bc:	6823      	ldr	r3, [r4, #0]
 800c6be:	695c      	ldr	r4, [r3, #20]
 800c6c0:	2c00      	cmp	r4, #0
 800c6c2:	f000 82da 	beq.w	800cc7a <refr_area_part+0x60e>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 800c6c6:	4621      	mov	r1, r4
 800c6c8:	6868      	ldr	r0, [r5, #4]
 800c6ca:	f7ff fd12 	bl	800c0f2 <lv_refr_get_top_obj>
 800c6ce:	4604      	mov	r4, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800c6d0:	2e00      	cmp	r6, #0
 800c6d2:	d05b      	beq.n	800c78c <refr_area_part+0x120>
    if(disp_refr->draw_prev_over_act) {
 800c6d4:	4b7b      	ldr	r3, [pc, #492]	; (800c8c4 <refr_area_part+0x258>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800c6dc:	f012 0f01 	tst.w	r2, #1
 800c6e0:	f040 82d6 	bne.w	800cc90 <refr_area_part+0x624>
        if(disp_refr->prev_scr) {
 800c6e4:	6959      	ldr	r1, [r3, #20]
 800c6e6:	b129      	cbz	r1, 800c6f4 <refr_area_part+0x88>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800c6e8:	2c00      	cmp	r4, #0
 800c6ea:	bf18      	it	ne
 800c6ec:	4621      	movne	r1, r4
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	f7ff ff6e 	bl	800c5d0 <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800c6f4:	2e00      	cmp	r6, #0
 800c6f6:	f000 80a8 	beq.w	800c84a <refr_area_part+0x1de>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	f7ff ff67 	bl	800c5d0 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 800c702:	4c70      	ldr	r4, [pc, #448]	; (800c8c4 <refr_area_part+0x258>)
 800c704:	6820      	ldr	r0, [r4, #0]
 800c706:	f7f7 fd21 	bl	800414c <lv_disp_get_layer_top>
 800c70a:	4601      	mov	r1, r0
 800c70c:	4628      	mov	r0, r5
 800c70e:	f7ff ff5f 	bl	800c5d0 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 800c712:	6820      	ldr	r0, [r4, #0]
 800c714:	f7f7 fd25 	bl	8004162 <lv_disp_get_layer_sys>
 800c718:	4601      	mov	r1, r0
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7ff ff58 	bl	800c5d0 <refr_obj_and_children>
    draw_buf_flush(disp_refr);
 800c720:	6824      	ldr	r4, [r4, #0]
 800c722:	9405      	str	r4, [sp, #20]
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800c724:	4620      	mov	r0, r4
 800c726:	f014 f9f5 	bl	8020b14 <lv_disp_get_draw_buf>
 800c72a:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800c730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c732:	b10b      	cbz	r3, 800c738 <refr_area_part+0xcc>
 800c734:	4620      	mov	r0, r4
 800c736:	4798      	blx	r3
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f000 8089 	beq.w	800c852 <refr_area_part+0x1e6>
 800c740:	686b      	ldr	r3, [r5, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8085 	beq.w	800c852 <refr_area_part+0x1e6>
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 800c748:	4b5e      	ldr	r3, [pc, #376]	; (800c8c4 <refr_area_part+0x258>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c752:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c756:	fb02 f303 	mul.w	r3, r2, r3
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 800c75a:	68ea      	ldr	r2, [r5, #12]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d078      	beq.n	800c852 <refr_area_part+0x1e6>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c760:	4e58      	ldr	r6, [pc, #352]	; (800c8c4 <refr_area_part+0x258>)
 800c762:	6832      	ldr	r2, [r6, #0]
        while(draw_buf->flushing) {
 800c764:	692b      	ldr	r3, [r5, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d073      	beq.n	800c852 <refr_area_part+0x1e6>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c76a:	6810      	ldr	r0, [r2, #0]
 800c76c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0f8      	beq.n	800c764 <refr_area_part+0xf8>
 800c772:	4798      	blx	r3
 800c774:	e7f5      	b.n	800c762 <refr_area_part+0xf6>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c776:	4e53      	ldr	r6, [pc, #332]	; (800c8c4 <refr_area_part+0x258>)
 800c778:	6832      	ldr	r2, [r6, #0]
        while(draw_buf->flushing) {
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d093      	beq.n	800c6a8 <refr_area_part+0x3c>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 800c780:	6810      	ldr	r0, [r2, #0]
 800c782:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0f8      	beq.n	800c77a <refr_area_part+0x10e>
 800c788:	4798      	blx	r3
 800c78a:	e7f5      	b.n	800c778 <refr_area_part+0x10c>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800c78c:	b140      	cbz	r0, 800c7a0 <refr_area_part+0x134>
    if(disp_refr->draw_prev_over_act) {
 800c78e:	4b4d      	ldr	r3, [pc, #308]	; (800c8c4 <refr_area_part+0x258>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800c796:	f012 0f01 	tst.w	r2, #1
 800c79a:	d0a3      	beq.n	800c6e4 <refr_area_part+0x78>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800c79c:	691e      	ldr	r6, [r3, #16]
 800c79e:	e277      	b.n	800cc90 <refr_area_part+0x624>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800c7a0:	4f48      	ldr	r7, [pc, #288]	; (800c8c4 <refr_area_part+0x258>)
 800c7a2:	6838      	ldr	r0, [r7, #0]
 800c7a4:	f014 f96a 	bl	8020a7c <lv_disp_get_hor_res>
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	6838      	ldr	r0, [r7, #0]
 800c7ac:	f014 f97a 	bl	8020aa4 <lv_disp_get_ver_res>
 800c7b0:	1e63      	subs	r3, r4, #1
 800c7b2:	1e42      	subs	r2, r0, #1
        lv_area_set(&a, 0, 0,
 800c7b4:	b212      	sxth	r2, r2
 800c7b6:	9200      	str	r2, [sp, #0]
 800c7b8:	b21b      	sxth	r3, r3
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	4611      	mov	r1, r2
 800c7be:	a81c      	add	r0, sp, #112	; 0x70
 800c7c0:	f014 fc62 	bl	8021088 <lv_area_set>
        if(draw_ctx->draw_bg) {
 800c7c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c7c6:	b1ab      	cbz	r3, 800c7f4 <refr_area_part+0x188>
            lv_draw_rect_dsc_init(&dsc);
 800c7c8:	a81e      	add	r0, sp, #120	; 0x78
 800c7ca:	f003 f82f 	bl	800f82c <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d2:	9222      	str	r2, [sp, #136]	; 0x88
            dsc.bg_img_opa = disp_refr->bg_opa;
 800c7d4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800c7d8:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
            dsc.bg_color = disp_refr->bg_color;
 800c7dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7de:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            dsc.bg_opa = disp_refr->bg_opa;
 800c7e2:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 800c7e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c7e8:	aa1c      	add	r2, sp, #112	; 0x70
 800c7ea:	a91e      	add	r1, sp, #120	; 0x78
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	4798      	blx	r3
 800c7f0:	2400      	movs	r4, #0
 800c7f2:	e7cc      	b.n	800c78e <refr_area_part+0x122>
        else if(disp_refr->bg_img) {
 800c7f4:	4b33      	ldr	r3, [pc, #204]	; (800c8c4 <refr_area_part+0x258>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c7fa:	b1a0      	cbz	r0, 800c826 <refr_area_part+0x1ba>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 800c7fc:	a91b      	add	r1, sp, #108	; 0x6c
 800c7fe:	f003 fc85 	bl	801010c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 800c802:	2801      	cmp	r0, #1
 800c804:	d1f4      	bne.n	800c7f0 <refr_area_part+0x184>
                lv_draw_img_dsc_init(&dsc);
 800c806:	a81e      	add	r0, sp, #120	; 0x78
 800c808:	f001 f88b 	bl	800d922 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 800c80c:	4b2d      	ldr	r3, [pc, #180]	; (800c8c4 <refr_area_part+0x258>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800c814:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	aa1c      	add	r2, sp, #112	; 0x70
 800c81c:	a91e      	add	r1, sp, #120	; 0x78
 800c81e:	4628      	mov	r0, r5
 800c820:	f001 f8e6 	bl	800d9f0 <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 800c824:	e7e4      	b.n	800c7f0 <refr_area_part+0x184>
            lv_draw_rect_dsc_init(&dsc);
 800c826:	a81e      	add	r0, sp, #120	; 0x78
 800c828:	f003 f800 	bl	800f82c <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 800c82c:	4b25      	ldr	r3, [pc, #148]	; (800c8c4 <refr_area_part+0x258>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c832:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
            dsc.bg_opa = disp_refr->bg_opa;
 800c836:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c83a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 800c83e:	686a      	ldr	r2, [r5, #4]
 800c840:	a91e      	add	r1, sp, #120	; 0x78
 800c842:	4628      	mov	r0, r5
 800c844:	f003 f84e 	bl	800f8e4 <lv_draw_rect>
 800c848:	e7d2      	b.n	800c7f0 <refr_area_part+0x184>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 800c84a:	4b1e      	ldr	r3, [pc, #120]	; (800c8c4 <refr_area_part+0x258>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	691e      	ldr	r6, [r3, #16]
 800c850:	e753      	b.n	800c6fa <refr_area_part+0x8e>
    draw_buf->flushing = 1;
 800c852:	2301      	movs	r3, #1
 800c854:	612b      	str	r3, [r5, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 800c856:	4b1b      	ldr	r3, [pc, #108]	; (800c8c4 <refr_area_part+0x258>)
 800c858:	6819      	ldr	r1, [r3, #0]
 800c85a:	680b      	ldr	r3, [r1, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	699a      	ldr	r2, [r3, #24]
 800c860:	f012 0f01 	tst.w	r2, #1
 800c864:	d006      	beq.n	800c874 <refr_area_part+0x208>
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	f013 0f02 	tst.w	r3, #2
 800c86c:	d002      	beq.n	800c874 <refr_area_part+0x208>
 800c86e:	2301      	movs	r3, #1
 800c870:	616b      	str	r3, [r5, #20]
 800c872:	e001      	b.n	800c878 <refr_area_part+0x20c>
    else draw_buf->flushing_last = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	616b      	str	r3, [r5, #20]
    bool flushing_last = draw_buf->flushing_last;
 800c878:	696b      	ldr	r3, [r5, #20]
 800c87a:	9309      	str	r3, [sp, #36]	; 0x24
    if(disp->driver->flush_cb) {
 800c87c:	9b05      	ldr	r3, [sp, #20]
 800c87e:	6818      	ldr	r0, [r3, #0]
 800c880:	6943      	ldr	r3, [r0, #20]
 800c882:	b153      	cbz	r3, 800c89a <refr_area_part+0x22e>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 800c884:	7c03      	ldrb	r3, [r0, #16]
 800c886:	f013 0f30 	tst.w	r3, #48	; 0x30
 800c88a:	d002      	beq.n	800c892 <refr_area_part+0x226>
 800c88c:	f013 0f04 	tst.w	r3, #4
 800c890:	d11a      	bne.n	800c8c8 <refr_area_part+0x25c>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 800c892:	6822      	ldr	r2, [r4, #0]
 800c894:	6861      	ldr	r1, [r4, #4]
 800c896:	f7ff fc11 	bl	800c0bc <call_flush_cb>
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 800c89a:	682b      	ldr	r3, [r5, #0]
 800c89c:	b173      	cbz	r3, 800c8bc <refr_area_part+0x250>
 800c89e:	686a      	ldr	r2, [r5, #4]
 800c8a0:	b162      	cbz	r2, 800c8bc <refr_area_part+0x250>
 800c8a2:	9905      	ldr	r1, [sp, #20]
 800c8a4:	6809      	ldr	r1, [r1, #0]
 800c8a6:	7c09      	ldrb	r1, [r1, #16]
 800c8a8:	f011 0f01 	tst.w	r1, #1
 800c8ac:	d001      	beq.n	800c8b2 <refr_area_part+0x246>
 800c8ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8b0:	b121      	cbz	r1, 800c8bc <refr_area_part+0x250>
        if(draw_buf->buf_act == draw_buf->buf1)
 800c8b2:	68a9      	ldr	r1, [r5, #8]
            draw_buf->buf_act = draw_buf->buf2;
 800c8b4:	428b      	cmp	r3, r1
 800c8b6:	bf18      	it	ne
 800c8b8:	461a      	movne	r2, r3
 800c8ba:	60aa      	str	r2, [r5, #8]
}
 800c8bc:	b02d      	add	sp, #180	; 0xb4
 800c8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c2:	bf00      	nop
 800c8c4:	200025e8 	.word	0x200025e8
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 800c8c8:	6863      	ldr	r3, [r4, #4]
 800c8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c8cc:	6824      	ldr	r4, [r4, #0]
    lv_disp_drv_t * drv = disp_refr->driver;
 800c8ce:	f8d1 8000 	ldr.w	r8, [r1]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 800c8d2:	f898 3010 	ldrb.w	r3, [r8, #16]
 800c8d6:	f003 0206 	and.w	r2, r3, #6
 800c8da:	2a06      	cmp	r2, #6
 800c8dc:	d0dd      	beq.n	800c89a <refr_area_part+0x22e>
    if(drv->rotated == LV_DISP_ROT_180) {
 800c8de:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800c8e2:	2a20      	cmp	r2, #32
 800c8e4:	d050      	beq.n	800c988 <refr_area_part+0x31c>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 800c8e6:	f013 0f10 	tst.w	r3, #16
 800c8ea:	d0d6      	beq.n	800c89a <refr_area_part+0x22e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 800c8ec:	4608      	mov	r0, r1
 800c8ee:	f014 f911 	bl	8020b14 <lv_disp_get_draw_buf>
 800c8f2:	4607      	mov	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c8f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c8f6:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 800c8fa:	f9b6 1000 	ldrsh.w	r1, [r6]
 800c8fe:	b288      	uxth	r0, r1
 800c900:	9011      	str	r0, [sp, #68]	; 0x44
 800c902:	1c53      	adds	r3, r2, #1
 800c904:	b29b      	uxth	r3, r3
 800c906:	9312      	str	r3, [sp, #72]	; 0x48
 800c908:	1a1b      	subs	r3, r3, r0
 800c90a:	b298      	uxth	r0, r3
 800c90c:	fa0f f983 	sxth.w	r9, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c910:	4633      	mov	r3, r6
 800c912:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
 800c916:	9616      	str	r6, [sp, #88]	; 0x58
 800c918:	b2b6      	uxth	r6, r6
 800c91a:	960f      	str	r6, [sp, #60]	; 0x3c
 800c91c:	88db      	ldrh	r3, [r3, #6]
 800c91e:	3301      	adds	r3, #1
 800c920:	1b9b      	subs	r3, r3, r6
 800c922:	b21e      	sxth	r6, r3
 800c924:	9608      	str	r6, [sp, #32]
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 800c926:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c92a:	fbb3 f3f9 	udiv	r3, r3, r9
 800c92e:	42b3      	cmp	r3, r6
 800c930:	bfa8      	it	ge
 800c932:	4633      	movge	r3, r6
 800c934:	930e      	str	r3, [sp, #56]	; 0x38
        if(drv->rotated == LV_DISP_ROT_90) {
 800c936:	f898 3010 	ldrb.w	r3, [r8, #16]
 800c93a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c93e:	2b10      	cmp	r3, #16
 800c940:	d060      	beq.n	800ca04 <refr_area_part+0x398>
            area->y1 = area->x1;
 800c942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c944:	8059      	strh	r1, [r3, #2]
            area->y2 = area->y1 + area_w - 1;
 800c946:	80da      	strh	r2, [r3, #6]
        while(row < area_h) {
 800c948:	9b08      	ldr	r3, [sp, #32]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	dda5      	ble.n	800c89a <refr_area_part+0x22e>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800c94e:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
 800c952:	105b      	asrs	r3, r3, #1
 800c954:	930c      	str	r3, [sp, #48]	; 0x30
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800c956:	f109 0301 	add.w	r3, r9, #1
 800c95a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800c95e:	105b      	asrs	r3, r3, #1
 800c960:	9304      	str	r3, [sp, #16]
 800c962:	1e43      	subs	r3, r0, #1
 800c964:	b29b      	uxth	r3, r3
 800c966:	9317      	str	r3, [sp, #92]	; 0x5c
 800c968:	3301      	adds	r3, #1
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	9310      	str	r3, [sp, #64]	; 0x40
 800c96e:	f04f 0a00 	mov.w	sl, #0
 800c972:	f8cd a018 	str.w	sl, [sp, #24]
                    area->x2 = init_y_off + area_w - 1;
 800c976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c978:	3b01      	subs	r3, #1
 800c97a:	18c3      	adds	r3, r0, r3
 800c97c:	9318      	str	r3, [sp, #96]	; 0x60
 800c97e:	9519      	str	r5, [sp, #100]	; 0x64
 800c980:	4655      	mov	r5, sl
 800c982:	46c2      	mov	sl, r8
 800c984:	46b8      	mov	r8, r7
 800c986:	e102      	b.n	800cb8e <refr_area_part+0x522>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c988:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c98a:	8883      	ldrh	r3, [r0, #4]
 800c98c:	1c5a      	adds	r2, r3, #1
 800c98e:	8803      	ldrh	r3, [r0, #0]
 800c990:	1ad3      	subs	r3, r2, r3
    uint32_t total = area_w * area_h;
 800c992:	b219      	sxth	r1, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c994:	88c3      	ldrh	r3, [r0, #6]
 800c996:	3301      	adds	r3, #1
 800c998:	8842      	ldrh	r2, [r0, #2]
 800c99a:	1a9b      	subs	r3, r3, r2
 800c99c:	b21b      	sxth	r3, r3
 800c99e:	fb03 f701 	mul.w	r7, r3, r1
    while(i > j) {
 800c9a2:	1e7b      	subs	r3, r7, #1
 800c9a4:	d00d      	beq.n	800c9c2 <refr_area_part+0x356>
 800c9a6:	eb04 0047 	add.w	r0, r4, r7, lsl #1
 800c9aa:	1ea1      	subs	r1, r4, #2
        tmp = color_p[i];
 800c9ac:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
        color_p[i] = color_p[j];
 800c9b0:	f831 6f02 	ldrh.w	r6, [r1, #2]!
 800c9b4:	8006      	strh	r6, [r0, #0]
        color_p[j] = tmp;
 800c9b6:	800a      	strh	r2, [r1, #0]
        i--;
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	3b01      	subs	r3, #1
    while(i > j) {
 800c9bc:	1aba      	subs	r2, r7, r2
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d8f4      	bhi.n	800c9ac <refr_area_part+0x340>
    tmp_coord = area->y2;
 800c9c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c9c4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    area->y2 = drv->ver_res - area->y1 - 1;
 800c9c8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	8841      	ldrh	r1, [r0, #2]
 800c9d0:	1a5b      	subs	r3, r3, r1
 800c9d2:	80c3      	strh	r3, [r0, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 800c9d4:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	1a9b      	subs	r3, r3, r2
 800c9dc:	8043      	strh	r3, [r0, #2]
    tmp_coord = area->x2;
 800c9de:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
    area->x2 = drv->hor_res - area->x1 - 1;
 800c9e2:	f8b8 3000 	ldrh.w	r3, [r8]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	8801      	ldrh	r1, [r0, #0]
 800c9ea:	1a5b      	subs	r3, r3, r1
 800c9ec:	4601      	mov	r1, r0
 800c9ee:	8083      	strh	r3, [r0, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 800c9f0:	f8b8 3000 	ldrh.w	r3, [r8]
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	1a9b      	subs	r3, r3, r2
 800c9f8:	8003      	strh	r3, [r0, #0]
        call_flush_cb(drv, area, color_p);
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	4640      	mov	r0, r8
 800c9fe:	f7ff fb5d 	bl	800c0bc <call_flush_cb>
 800ca02:	e74a      	b.n	800c89a <refr_area_part+0x22e>
            area->y2 = drv->ver_res - area->x1 - 1;
 800ca04:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800ca08:	1e5a      	subs	r2, r3, #1
 800ca0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca0c:	1a52      	subs	r2, r2, r1
 800ca0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ca10:	80ca      	strh	r2, [r1, #6]
            area->y1 = area->y2 - area_w + 1;
 800ca12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca14:	1a9b      	subs	r3, r3, r2
 800ca16:	804b      	strh	r3, [r1, #2]
 800ca18:	e796      	b.n	800c948 <refr_area_part+0x2dc>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 800ca1a:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ca1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ca22:	461a      	mov	r2, r3
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800ca24:	f1b9 0f01 	cmp.w	r9, #1
 800ca28:	dd63      	ble.n	800caf2 <refr_area_part+0x486>
 800ca2a:	9b06      	ldr	r3, [sp, #24]
 800ca2c:	9307      	str	r3, [sp, #28]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800ca2e:	930d      	str	r3, [sp, #52]	; 0x34
 800ca30:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800ca34:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ca38:	4692      	mov	sl, r2
 800ca3a:	9515      	str	r5, [sp, #84]	; 0x54
 800ca3c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ca3e:	e044      	b.n	800caca <refr_area_part+0x45e>
                    &color_p[i * w + j],
 800ca40:	eb0e 0501 	add.w	r5, lr, r1
                    &color_p[j * w + inv_i],
 800ca44:	9803      	ldr	r0, [sp, #12]
 800ca46:	fb01 0109 	mla	r1, r1, r9, r0
                    &color_p[inv_i * w + inv_j],
 800ca4a:	eb0c 0002 	add.w	r0, ip, r2
                    &color_p[inv_j * w + i]
 800ca4e:	fb09 8202 	mla	r2, r9, r2, r8
    tmp = *a;
 800ca52:	f834 b015 	ldrh.w	fp, [r4, r5, lsl #1]
    *a = *b;
 800ca56:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
 800ca5a:	f824 6015 	strh.w	r6, [r4, r5, lsl #1]
    *b = *c;
 800ca5e:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
 800ca62:	f824 5011 	strh.w	r5, [r4, r1, lsl #1]
    *c = *d;
 800ca66:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 800ca6a:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
    *d = tmp;
 800ca6e:	f824 b012 	strh.w	fp, [r4, r2, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800ca72:	3301      	adds	r3, #1
 800ca74:	b21b      	sxth	r3, r3
 800ca76:	4619      	mov	r1, r3
 800ca78:	9a04      	ldr	r2, [sp, #16]
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	da1e      	bge.n	800cabc <refr_area_part+0x450>
            lv_coord_t inv_j = (w - 1) - j;
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	1afa      	subs	r2, r7, r3
 800ca82:	b212      	sxth	r2, r2
            if(is_270) {
 800ca84:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 800ca88:	d1da      	bne.n	800ca40 <refr_area_part+0x3d4>
                    &color_p[i * w + j],
 800ca8a:	eb0e 0501 	add.w	r5, lr, r1
                    &color_p[inv_j * w + i],
 800ca8e:	fb09 8002 	mla	r0, r9, r2, r8
                    &color_p[inv_i * w + inv_j],
 800ca92:	4462      	add	r2, ip
                    &color_p[j * w + inv_i]
 800ca94:	9e03      	ldr	r6, [sp, #12]
 800ca96:	fb01 6109 	mla	r1, r1, r9, r6
    tmp = *a;
 800ca9a:	f834 b015 	ldrh.w	fp, [r4, r5, lsl #1]
    *a = *b;
 800ca9e:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 800caa2:	f824 6015 	strh.w	r6, [r4, r5, lsl #1]
    *b = *c;
 800caa6:	f834 5012 	ldrh.w	r5, [r4, r2, lsl #1]
 800caaa:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
    *c = *d;
 800caae:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 800cab2:	f824 0012 	strh.w	r0, [r4, r2, lsl #1]
    *d = tmp;
 800cab6:	f824 b011 	strh.w	fp, [r4, r1, lsl #1]
}
 800caba:	e7da      	b.n	800ca72 <refr_area_part+0x406>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 800cabc:	9b07      	ldr	r3, [sp, #28]
 800cabe:	3301      	adds	r3, #1
 800cac0:	b21b      	sxth	r3, r3
 800cac2:	9307      	str	r3, [sp, #28]
 800cac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cac6:	4293      	cmp	r3, r2
 800cac8:	da0e      	bge.n	800cae8 <refr_area_part+0x47c>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800caca:	f1b9 0f00 	cmp.w	r9, #0
 800cace:	ddf5      	ble.n	800cabc <refr_area_part+0x450>
            lv_coord_t inv_i = (w - 1) - i;
 800cad0:	9b07      	ldr	r3, [sp, #28]
 800cad2:	1afe      	subs	r6, r7, r3
 800cad4:	b236      	sxth	r6, r6
                    &color_p[i * w + j],
 800cad6:	4698      	mov	r8, r3
 800cad8:	fb09 fe03 	mul.w	lr, r9, r3
                    &color_p[inv_i * w + inv_j],
 800cadc:	fb09 fc06 	mul.w	ip, r9, r6
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 800cae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cae2:	2100      	movs	r1, #0
 800cae4:	9603      	str	r6, [sp, #12]
 800cae6:	e7ca      	b.n	800ca7e <refr_area_part+0x412>
 800cae8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800caec:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800caf0:	9d15      	ldr	r5, [sp, #84]	; 0x54
                if(drv->rotated == LV_DISP_ROT_90) {
 800caf2:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800caf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cafa:	2b10      	cmp	r3, #16
 800cafc:	d00f      	beq.n	800cb1e <refr_area_part+0x4b2>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 800cafe:	f8ba 3000 	ldrh.w	r3, [sl]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb06:	1a9b      	subs	r3, r3, r2
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb0c:	808b      	strh	r3, [r1, #4]
                    area->x1 = area->x2 - area_w + 1;
 800cb0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb10:	3201      	adds	r2, #1
 800cb12:	4413      	add	r3, r2
 800cb14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb16:	1a9b      	subs	r3, r3, r2
 800cb18:	800b      	strh	r3, [r1, #0]
                height = area_w;
 800cb1a:	464e      	mov	r6, r9
 800cb1c:	e08d      	b.n	800cc3a <refr_area_part+0x5ce>
                    area->x1 = init_y_off;
 800cb1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb20:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cb22:	801a      	strh	r2, [r3, #0]
                    area->x2 = init_y_off + area_w - 1;
 800cb24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb26:	809a      	strh	r2, [r3, #4]
                height = area_w;
 800cb28:	464e      	mov	r6, r9
 800cb2a:	e086      	b.n	800cc3a <refr_area_part+0x5ce>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800cb2c:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800cb30:	f015 fa4e 	bl	8021fd0 <lv_mem_buf_get>
 800cb34:	4605      	mov	r5, r0
 800cb36:	e03d      	b.n	800cbb4 <refr_area_part+0x548>
                    area->x1 = init_y_off + row;
 800cb38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb3a:	9a06      	ldr	r2, [sp, #24]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb42:	8013      	strh	r3, [r2, #0]
                    area->x2 = init_y_off + row + height - 1;
 800cb44:	3b01      	subs	r3, #1
 800cb46:	9903      	ldr	r1, [sp, #12]
 800cb48:	440b      	add	r3, r1
 800cb4a:	8093      	strh	r3, [r2, #4]
 800cb4c:	e075      	b.n	800cc3a <refr_area_part+0x5ce>
                draw_buf->flushing_last = 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f8c8 3014 	str.w	r3, [r8, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 800cb54:	2d00      	cmp	r5, #0
 800cb56:	bf14      	ite	ne
 800cb58:	462a      	movne	r2, r5
 800cb5a:	4622      	moveq	r2, r4
 800cb5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cb5e:	4650      	mov	r0, sl
 800cb60:	f7ff faac 	bl	800c0bc <call_flush_cb>
            while(draw_buf->flushing) {
 800cb64:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cb68:	b133      	cbz	r3, 800cb78 <refr_area_part+0x50c>
                if(drv->wait_cb) drv->wait_cb(drv);
 800cb6a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d0f8      	beq.n	800cb64 <refr_area_part+0x4f8>
 800cb72:	4650      	mov	r0, sl
 800cb74:	4798      	blx	r3
 800cb76:	e7f5      	b.n	800cb64 <refr_area_part+0x4f8>
            color_p += area_w * height;
 800cb78:	fb09 f707 	mul.w	r7, r9, r7
 800cb7c:	eb04 0447 	add.w	r4, r4, r7, lsl #1
            row += height;
 800cb80:	9b06      	ldr	r3, [sp, #24]
 800cb82:	4433      	add	r3, r6
 800cb84:	b21b      	sxth	r3, r3
 800cb86:	9306      	str	r3, [sp, #24]
        while(row < area_h) {
 800cb88:	9a08      	ldr	r2, [sp, #32]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	dd6b      	ble.n	800cc66 <refr_area_part+0x5fa>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 800cb8e:	9a06      	ldr	r2, [sp, #24]
 800cb90:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb92:	9908      	ldr	r1, [sp, #32]
 800cb94:	1a8b      	subs	r3, r1, r2
 800cb96:	980e      	ldr	r0, [sp, #56]	; 0x38
 800cb98:	4283      	cmp	r3, r0
 800cb9a:	bfa8      	it	ge
 800cb9c:	4603      	movge	r3, r0
 800cb9e:	9303      	str	r3, [sp, #12]
 800cba0:	b21e      	sxth	r6, r3
            draw_buf->flushing = 1;
 800cba2:	2301      	movs	r3, #1
 800cba4:	f8c8 3010 	str.w	r3, [r8, #16]
            if((row == 0) && (area_h >= area_w)) {
 800cba8:	b912      	cbnz	r2, 800cbb0 <refr_area_part+0x544>
 800cbaa:	4589      	cmp	r9, r1
 800cbac:	f77f af35 	ble.w	800ca1a <refr_area_part+0x3ae>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 800cbb0:	2d00      	cmp	r5, #0
 800cbb2:	d0bb      	beq.n	800cb2c <refr_area_part+0x4c0>
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 800cbb4:	f89a 7010 	ldrb.w	r7, [sl, #16]
 800cbb8:	f007 0730 	and.w	r7, r7, #48	; 0x30
    uint32_t invert = (area_w * area_h) - 1;
 800cbbc:	fb09 f206 	mul.w	r2, r9, r6
    uint32_t initial_i = ((area_w - 1) * area_h);
 800cbc0:	eba2 0c06 	sub.w	ip, r2, r6
    for(lv_coord_t y = 0; y < area_h; y++) {
 800cbc4:	2e00      	cmp	r6, #0
 800cbc6:	dd24      	ble.n	800cc12 <refr_area_part+0x5a6>
 800cbc8:	f8bd e00c 	ldrh.w	lr, [sp, #12]
 800cbcc:	44e6      	add	lr, ip
 800cbce:	4623      	mov	r3, r4
 800cbd0:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
 800cbd4:	f8cd a01c 	str.w	sl, [sp, #28]
 800cbd8:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
        if(invert_i)
 800cbdc:	2f30      	cmp	r7, #48	; 0x30
            i = invert - i;
 800cbde:	bf0c      	ite	eq
 800cbe0:	ebab 020c 	subeq.w	r2, fp, ip
        uint32_t i = initial_i + y;
 800cbe4:	4662      	movne	r2, ip
        for(lv_coord_t x = 0; x < area_w; x++) {
 800cbe6:	f1b9 0f00 	cmp.w	r9, #0
 800cbea:	dd0c      	ble.n	800cc06 <refr_area_part+0x59a>
 800cbec:	eb03 000a 	add.w	r0, r3, sl
            rot_buf[i] = *(orig_color_p++);
 800cbf0:	f833 1b02 	ldrh.w	r1, [r3], #2
 800cbf4:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
            if(invert_i)
 800cbf8:	2f30      	cmp	r7, #48	; 0x30
                i += area_h;
 800cbfa:	bf0c      	ite	eq
 800cbfc:	1992      	addeq	r2, r2, r6
                i -= area_h;
 800cbfe:	1b92      	subne	r2, r2, r6
        for(lv_coord_t x = 0; x < area_w; x++) {
 800cc00:	4283      	cmp	r3, r0
 800cc02:	d1f5      	bne.n	800cbf0 <refr_area_part+0x584>
            rot_buf[i] = *(orig_color_p++);
 800cc04:	4603      	mov	r3, r0
    for(lv_coord_t y = 0; y < area_h; y++) {
 800cc06:	f10c 0c01 	add.w	ip, ip, #1
 800cc0a:	45f4      	cmp	ip, lr
 800cc0c:	d1e6      	bne.n	800cbdc <refr_area_part+0x570>
 800cc0e:	f8dd a01c 	ldr.w	sl, [sp, #28]
                if(drv->rotated == LV_DISP_ROT_90) {
 800cc12:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800cc16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cc1a:	2b10      	cmp	r3, #16
 800cc1c:	d08c      	beq.n	800cb38 <refr_area_part+0x4cc>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 800cc1e:	f8ba 3000 	ldrh.w	r3, [sl]
 800cc22:	3b01      	subs	r3, #1
 800cc24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc26:	1a9b      	subs	r3, r3, r2
 800cc28:	9a06      	ldr	r2, [sp, #24]
 800cc2a:	1a9b      	subs	r3, r3, r2
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cc30:	808b      	strh	r3, [r1, #4]
                    area->x1 = area->x2 - height + 1;
 800cc32:	3301      	adds	r3, #1
 800cc34:	9a03      	ldr	r2, [sp, #12]
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	800b      	strh	r3, [r1, #0]
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 800cc3a:	4637      	mov	r7, r6
 800cc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3e:	4433      	add	r3, r6
 800cc40:	9a08      	ldr	r2, [sp, #32]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	dc83      	bgt.n	800cb4e <refr_area_part+0x4e2>
 800cc46:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800cc4a:	f013 0f01 	tst.w	r3, #1
 800cc4e:	f43f af7e 	beq.w	800cb4e <refr_area_part+0x4e2>
 800cc52:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800cc56:	f013 0f02 	tst.w	r3, #2
 800cc5a:	f43f af78 	beq.w	800cb4e <refr_area_part+0x4e2>
                draw_buf->flushing_last = 1;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	f8c8 3014 	str.w	r3, [r8, #20]
 800cc64:	e776      	b.n	800cb54 <refr_area_part+0x4e8>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 800cc66:	46aa      	mov	sl, r5
 800cc68:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800cc6a:	f1ba 0f00 	cmp.w	sl, #0
 800cc6e:	f43f ae14 	beq.w	800c89a <refr_area_part+0x22e>
 800cc72:	4650      	mov	r0, sl
 800cc74:	f015 fa0e 	bl	8022094 <lv_mem_buf_release>
 800cc78:	e60f      	b.n	800c89a <refr_area_part+0x22e>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f43f ad90 	beq.w	800c7a0 <refr_area_part+0x134>
    if(disp_refr->draw_prev_over_act) {
 800cc80:	4b0c      	ldr	r3, [pc, #48]	; (800ccb4 <refr_area_part+0x648>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc88:	f013 0f01 	tst.w	r3, #1
 800cc8c:	f43f ad32 	beq.w	800c6f4 <refr_area_part+0x88>
        refr_obj_and_children(draw_ctx, top_act_scr);
 800cc90:	4631      	mov	r1, r6
 800cc92:	4628      	mov	r0, r5
 800cc94:	f7ff fc9c 	bl	800c5d0 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 800cc98:	4b06      	ldr	r3, [pc, #24]	; (800ccb4 <refr_area_part+0x648>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6959      	ldr	r1, [r3, #20]
 800cc9e:	2900      	cmp	r1, #0
 800cca0:	f43f ad2f 	beq.w	800c702 <refr_area_part+0x96>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 800cca4:	2c00      	cmp	r4, #0
 800cca6:	bf18      	it	ne
 800cca8:	4621      	movne	r1, r4
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f7ff fc90 	bl	800c5d0 <refr_obj_and_children>
 800ccb0:	e527      	b.n	800c702 <refr_area_part+0x96>
 800ccb2:	bf00      	nop
 800ccb4:	200025e8 	.word	0x200025e8

0800ccb8 <_lv_inv_area>:
{
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d053      	beq.n	800cd6c <_lv_inv_area+0xb4>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f7f7 fa60 	bl	800418a <lv_disp_is_invalidation_enabled>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d053      	beq.n	800cd76 <_lv_inv_area+0xbe>
    if(disp->rendering_in_progress) {
 800ccce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ccd2:	f013 0f04 	tst.w	r3, #4
 800ccd6:	d14e      	bne.n	800cd76 <_lv_inv_area+0xbe>
    if(area_p == NULL) {
 800ccd8:	2d00      	cmp	r5, #0
 800ccda:	d04e      	beq.n	800cd7a <_lv_inv_area+0xc2>
    scr_area.x1 = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
 800cce2:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 800cce6:	4620      	mov	r0, r4
 800cce8:	f013 fec8 	bl	8020a7c <lv_disp_get_hor_res>
 800ccec:	3801      	subs	r0, #1
 800ccee:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f013 fed6 	bl	8020aa4 <lv_disp_get_ver_res>
 800ccf8:	3801      	subs	r0, #1
 800ccfa:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 800ccfe:	aa02      	add	r2, sp, #8
 800cd00:	4629      	mov	r1, r5
 800cd02:	4668      	mov	r0, sp
 800cd04:	f014 f9fd 	bl	8021102 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d034      	beq.n	800cd76 <_lv_inv_area+0xbe>
    if(disp->driver->full_refresh) {
 800cd0c:	6820      	ldr	r0, [r4, #0]
 800cd0e:	7c03      	ldrb	r3, [r0, #16]
 800cd10:	f013 0f02 	tst.w	r3, #2
 800cd14:	d135      	bne.n	800cd82 <_lv_inv_area+0xca>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 800cd16:	6983      	ldr	r3, [r0, #24]
 800cd18:	b10b      	cbz	r3, 800cd1e <_lv_inv_area+0x66>
 800cd1a:	4669      	mov	r1, sp
 800cd1c:	4798      	blx	r3
    for(i = 0; i < disp->inv_p; i++) {
 800cd1e:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d03d      	beq.n	800cda2 <_lv_inv_area+0xea>
 800cd26:	2500      	movs	r5, #0
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 800cd28:	462e      	mov	r6, r5
 800cd2a:	b2a9      	uxth	r1, r5
 800cd2c:	3106      	adds	r1, #6
 800cd2e:	4632      	mov	r2, r6
 800cd30:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800cd34:	4668      	mov	r0, sp
 800cd36:	f014 fb0e 	bl	8021356 <_lv_area_is_in>
 800cd3a:	b9e0      	cbnz	r0, 800cd76 <_lv_inv_area+0xbe>
    for(i = 0; i < disp->inv_p; i++) {
 800cd3c:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800cd40:	3501      	adds	r5, #1
 800cd42:	b2aa      	uxth	r2, r5
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d8f0      	bhi.n	800cd2a <_lv_inv_area+0x72>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 800cd48:	2b1f      	cmp	r3, #31
 800cd4a:	d92a      	bls.n	800cda2 <_lv_inv_area+0xea>
        disp->inv_p = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    dest->x1 = src->x1;
 800cd52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800cd56:	8623      	strh	r3, [r4, #48]	; 0x30
    dest->y1 = src->y1;
 800cd58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800cd5c:	8663      	strh	r3, [r4, #50]	; 0x32
    dest->x2 = src->x2;
 800cd5e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cd62:	86a3      	strh	r3, [r4, #52]	; 0x34
    dest->y2 = src->y2;
 800cd64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800cd68:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 800cd6a:	e028      	b.n	800cdbe <_lv_inv_area+0x106>
    if(!disp) disp = lv_disp_get_default();
 800cd6c:	f013 fe80 	bl	8020a70 <lv_disp_get_default>
    if(!disp) return;
 800cd70:	4604      	mov	r4, r0
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d1a6      	bne.n	800ccc4 <_lv_inv_area+0xc>
}
 800cd76:	b004      	add	sp, #16
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
        disp->inv_p = 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
        return;
 800cd80:	e7f9      	b.n	800cd76 <_lv_inv_area+0xbe>
        disp->inv_areas[0] = scr_area;
 800cd82:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cd86:	aa04      	add	r2, sp, #16
 800cd88:	e912 0003 	ldmdb	r2, {r0, r1}
 800cd8c:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 800cd90:	2301      	movs	r3, #1
 800cd92:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800cd96:	6860      	ldr	r0, [r4, #4]
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d0ec      	beq.n	800cd76 <_lv_inv_area+0xbe>
 800cd9c:	f016 fd89 	bl	80238b2 <lv_timer_resume>
 800cda0:	e7e9      	b.n	800cd76 <_lv_inv_area+0xbe>
    dest->x1 = src->x1;
 800cda2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800cda6:	f8bd 2000 	ldrh.w	r2, [sp]
 800cdaa:	861a      	strh	r2, [r3, #48]	; 0x30
    dest->y1 = src->y1;
 800cdac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cdb0:	865a      	strh	r2, [r3, #50]	; 0x32
    dest->x2 = src->x2;
 800cdb2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800cdb6:	869a      	strh	r2, [r3, #52]	; 0x34
    dest->y2 = src->y2;
 800cdb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cdbc:	86da      	strh	r2, [r3, #54]	; 0x36
    disp->inv_p++;
 800cdbe:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 800cdc8:	6860      	ldr	r0, [r4, #4]
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d0d3      	beq.n	800cd76 <_lv_inv_area+0xbe>
 800cdce:	f016 fd70 	bl	80238b2 <lv_timer_resume>
 800cdd2:	e7d0      	b.n	800cd76 <_lv_inv_area+0xbe>

0800cdd4 <_lv_refr_get_disp_refreshing>:
}
 800cdd4:	4b01      	ldr	r3, [pc, #4]	; (800cddc <_lv_refr_get_disp_refreshing+0x8>)
 800cdd6:	6818      	ldr	r0, [r3, #0]
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	200025e8 	.word	0x200025e8

0800cde0 <_lv_disp_refr_timer>:
{
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	b08d      	sub	sp, #52	; 0x34
 800cde6:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 800cde8:	f013 ff01 	bl	8020bee <lv_tick_get>
 800cdec:	9007      	str	r0, [sp, #28]
    volatile uint32_t elaps = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	930b      	str	r3, [sp, #44]	; 0x2c
    if(tmr) {
 800cdf2:	b314      	cbz	r4, 800ce3a <_lv_disp_refr_timer+0x5a>
        disp_refr = tmr->user_data;
 800cdf4:	68e2      	ldr	r2, [r4, #12]
 800cdf6:	4ba3      	ldr	r3, [pc, #652]	; (800d084 <_lv_disp_refr_timer+0x2a4>)
 800cdf8:	601a      	str	r2, [r3, #0]
    lv_obj_update_layout(disp_refr->act_scr);
 800cdfa:	4ca2      	ldr	r4, [pc, #648]	; (800d084 <_lv_disp_refr_timer+0x2a4>)
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	6918      	ldr	r0, [r3, #16]
 800ce00:	f7fc fad0 	bl	80093a4 <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	6958      	ldr	r0, [r3, #20]
 800ce08:	b108      	cbz	r0, 800ce0e <_lv_disp_refr_timer+0x2e>
 800ce0a:	f7fc facb 	bl	80093a4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 800ce0e:	4c9d      	ldr	r4, [pc, #628]	; (800d084 <_lv_disp_refr_timer+0x2a4>)
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	69d8      	ldr	r0, [r3, #28]
 800ce14:	f7fc fac6 	bl	80093a4 <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	6a18      	ldr	r0, [r3, #32]
 800ce1c:	f7fc fac2 	bl	80093a4 <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	691a      	ldr	r2, [r3, #16]
 800ce24:	b172      	cbz	r2, 800ce44 <_lv_disp_refr_timer+0x64>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800ce26:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 800ce2a:	2a00      	cmp	r2, #0
 800ce2c:	f000 828f 	beq.w	800d34e <_lv_disp_refr_timer+0x56e>
 800ce30:	f04f 0830 	mov.w	r8, #48	; 0x30
 800ce34:	2700      	movs	r7, #0
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800ce36:	4e93      	ldr	r6, [pc, #588]	; (800d084 <_lv_disp_refr_timer+0x2a4>)
 800ce38:	e050      	b.n	800cedc <_lv_disp_refr_timer+0xfc>
        disp_refr = lv_disp_get_default();
 800ce3a:	f013 fe19 	bl	8020a70 <lv_disp_get_default>
 800ce3e:	4b91      	ldr	r3, [pc, #580]	; (800d084 <_lv_disp_refr_timer+0x2a4>)
 800ce40:	6018      	str	r0, [r3, #0]
 800ce42:	e7da      	b.n	800cdfa <_lv_disp_refr_timer+0x1a>
        disp_refr->inv_p = 0;
 800ce44:	2200      	movs	r2, #0
 800ce46:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
 800ce4a:	b00d      	add	sp, #52	; 0x34
 800ce4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800ce50:	3401      	adds	r4, #1
 800ce52:	6830      	ldr	r0, [r6, #0]
 800ce54:	3508      	adds	r5, #8
 800ce56:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 800ce5a:	429c      	cmp	r4, r3
 800ce5c:	d236      	bcs.n	800cecc <_lv_disp_refr_timer+0xec>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800ce5e:	1903      	adds	r3, r0, r4
 800ce60:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1f3      	bne.n	800ce50 <_lv_disp_refr_timer+0x70>
 800ce68:	42a7      	cmp	r7, r4
 800ce6a:	d0f1      	beq.n	800ce50 <_lv_disp_refr_timer+0x70>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 800ce6c:	1941      	adds	r1, r0, r5
 800ce6e:	4440      	add	r0, r8
 800ce70:	f014 fa50 	bl	8021314 <_lv_area_is_on>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d0eb      	beq.n	800ce50 <_lv_disp_refr_timer+0x70>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 800ce78:	6831      	ldr	r1, [r6, #0]
 800ce7a:	194a      	adds	r2, r1, r5
 800ce7c:	4441      	add	r1, r8
 800ce7e:	a809      	add	r0, sp, #36	; 0x24
 800ce80:	f014 f96b 	bl	802115a <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800ce84:	a809      	add	r0, sp, #36	; 0x24
 800ce86:	f014 f910 	bl	80210aa <lv_area_get_size>
 800ce8a:	4683      	mov	fp, r0
 800ce8c:	6830      	ldr	r0, [r6, #0]
 800ce8e:	4440      	add	r0, r8
 800ce90:	f014 f90b 	bl	80210aa <lv_area_get_size>
 800ce94:	4682      	mov	sl, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 800ce96:	6830      	ldr	r0, [r6, #0]
 800ce98:	4428      	add	r0, r5
 800ce9a:	f014 f906 	bl	80210aa <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 800ce9e:	4482      	add	sl, r0
 800cea0:	45d3      	cmp	fp, sl
 800cea2:	d2d5      	bcs.n	800ce50 <_lv_disp_refr_timer+0x70>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 800cea4:	6833      	ldr	r3, [r6, #0]
    dest->x1 = src->x1;
 800cea6:	eb03 0209 	add.w	r2, r3, r9
 800ceaa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800ceae:	8611      	strh	r1, [r2, #48]	; 0x30
    dest->y1 = src->y1;
 800ceb0:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800ceb4:	8651      	strh	r1, [r2, #50]	; 0x32
    dest->x2 = src->x2;
 800ceb6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800ceba:	8691      	strh	r1, [r2, #52]	; 0x34
    dest->y2 = src->y2;
 800cebc:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 800cec0:	86d1      	strh	r1, [r2, #54]	; 0x36
                disp_refr->inv_area_joined[join_from] = 1;
 800cec2:	4423      	add	r3, r4
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800ceca:	e7c1      	b.n	800ce50 <_lv_disp_refr_timer+0x70>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800cecc:	3701      	adds	r7, #1
 800cece:	6833      	ldr	r3, [r6, #0]
 800ced0:	f8b3 2150 	ldrh.w	r2, [r3, #336]	; 0x150
 800ced4:	f108 0808 	add.w	r8, r8, #8
 800ced8:	4297      	cmp	r7, r2
 800ceda:	d20f      	bcs.n	800cefc <_lv_disp_refr_timer+0x11c>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 800cedc:	443b      	add	r3, r7
 800cede:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1f2      	bne.n	800cecc <_lv_disp_refr_timer+0xec>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 800cee6:	6830      	ldr	r0, [r6, #0]
 800cee8:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 8232 	beq.w	800d356 <_lv_disp_refr_timer+0x576>
 800cef2:	2530      	movs	r5, #48	; 0x30
 800cef4:	2400      	movs	r4, #0
 800cef6:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800cefa:	e7b0      	b.n	800ce5e <_lv_disp_refr_timer+0x7e>
    px_num = 0;
 800cefc:	4962      	ldr	r1, [pc, #392]	; (800d088 <_lv_disp_refr_timer+0x2a8>)
 800cefe:	2000      	movs	r0, #0
 800cf00:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
 800cf02:	2a00      	cmp	r2, #0
 800cf04:	f000 8169 	beq.w	800d1da <_lv_disp_refr_timer+0x3fa>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800cf08:	1e51      	subs	r1, r2, #1
 800cf0a:	f502 7298 	add.w	r2, r2, #304	; 0x130
 800cf0e:	441a      	add	r2, r3
        if(disp_refr->inv_area_joined[i] == 0) {
 800cf10:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 800cf14:	b130      	cbz	r0, 800cf24 <_lv_disp_refr_timer+0x144>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 800cf16:	3901      	subs	r1, #1
 800cf18:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800cf1c:	d1f8      	bne.n	800cf10 <_lv_disp_refr_timer+0x130>
    int32_t last_i = 0;
 800cf1e:	2200      	movs	r2, #0
 800cf20:	9206      	str	r2, [sp, #24]
 800cf22:	e000      	b.n	800cf26 <_lv_disp_refr_timer+0x146>
 800cf24:	9106      	str	r1, [sp, #24]
    if(disp_refr->driver->render_start_cb) {
 800cf26:	6818      	ldr	r0, [r3, #0]
 800cf28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf2a:	b103      	cbz	r3, 800cf2e <_lv_disp_refr_timer+0x14e>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 800cf2c:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 800cf2e:	4b55      	ldr	r3, [pc, #340]	; (800d084 <_lv_disp_refr_timer+0x2a4>)
 800cf30:	681c      	ldr	r4, [r3, #0]
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	68da      	ldr	r2, [r3, #12]
 800cf36:	7e13      	ldrb	r3, [r2, #24]
 800cf38:	f36f 0300 	bfc	r3, #0, #1
 800cf3c:	7613      	strb	r3, [r2, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 800cf3e:	6823      	ldr	r3, [r4, #0]
 800cf40:	68da      	ldr	r2, [r3, #12]
 800cf42:	7e13      	ldrb	r3, [r2, #24]
 800cf44:	f36f 0341 	bfc	r3, #1, #1
 800cf48:	7613      	strb	r3, [r2, #24]
    disp_refr->rendering_in_progress = true;
 800cf4a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cf4e:	f043 0304 	orr.w	r3, r3, #4
 800cf52:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 800cf56:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 8137 	beq.w	800d1ce <_lv_disp_refr_timer+0x3ee>
 800cf60:	2300      	movs	r3, #0
 800cf62:	9302      	str	r3, [sp, #8]
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800cf64:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800d084 <_lv_disp_refr_timer+0x2a4>
        draw_ctx->buf_area = &sub_area;
 800cf68:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800cf6c:	e0a9      	b.n	800d0c2 <_lv_disp_refr_timer+0x2e2>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	68da      	ldr	r2, [r3, #12]
 800cf72:	7e13      	ldrb	r3, [r2, #24]
 800cf74:	f043 0301 	orr.w	r3, r3, #1
 800cf78:	7613      	strb	r3, [r2, #24]
 800cf7a:	e0ac      	b.n	800d0d6 <_lv_disp_refr_timer+0x2f6>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f013 fd7d 	bl	8020a7c <lv_disp_get_hor_res>
 800cf82:	4606      	mov	r6, r0
 800cf84:	f8da 0000 	ldr.w	r0, [sl]
 800cf88:	f013 fd8c 	bl	8020aa4 <lv_disp_get_ver_res>
 800cf8c:	1e73      	subs	r3, r6, #1
 800cf8e:	1e42      	subs	r2, r0, #1
 800cf90:	b212      	sxth	r2, r2
 800cf92:	9200      	str	r2, [sp, #0]
 800cf94:	b21b      	sxth	r3, r3
 800cf96:	2200      	movs	r2, #0
 800cf98:	4611      	mov	r1, r2
 800cf9a:	4658      	mov	r0, fp
 800cf9c:	f014 f874 	bl	8021088 <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 800cfa0:	f8c5 b004 	str.w	fp, [r5, #4]
        if(disp_refr->driver->full_refresh) {
 800cfa4:	f8da 3000 	ldr.w	r3, [sl]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	7c1a      	ldrb	r2, [r3, #16]
 800cfac:	f012 0f02 	tst.w	r2, #2
 800cfb0:	d00a      	beq.n	800cfc8 <_lv_disp_refr_timer+0x1e8>
            disp_refr->driver->draw_buf->last_part = 1;
 800cfb2:	68da      	ldr	r2, [r3, #12]
 800cfb4:	7e13      	ldrb	r3, [r2, #24]
 800cfb6:	f043 0302 	orr.w	r3, r3, #2
 800cfba:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 800cfbc:	f8c5 b008 	str.w	fp, [r5, #8]
            refr_area_part(draw_ctx);
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f7ff fb53 	bl	800c66c <refr_area_part>
 800cfc6:	e065      	b.n	800d094 <_lv_disp_refr_timer+0x2b4>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 800cfc8:	68da      	ldr	r2, [r3, #12]
 800cfca:	6991      	ldr	r1, [r2, #24]
 800cfcc:	7e13      	ldrb	r3, [r2, #24]
 800cfce:	f361 0341 	bfi	r3, r1, #1, #1
 800cfd2:	7613      	strb	r3, [r2, #24]
            refr_area(&disp_refr->inv_areas[i]);
 800cfd4:	9b02      	ldr	r3, [sp, #8]
 800cfd6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800cfda:	3330      	adds	r3, #48	; 0x30
            draw_ctx->clip_area = area_p;
 800cfdc:	60ab      	str	r3, [r5, #8]
            refr_area_part(draw_ctx);
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f7ff fb44 	bl	800c66c <refr_area_part>
        return;
 800cfe4:	e056      	b.n	800d094 <_lv_disp_refr_timer+0x2b4>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800cfe6:	f8da 0000 	ldr.w	r0, [sl]
 800cfea:	f013 fd5b 	bl	8020aa4 <lv_disp_get_ver_res>
 800cfee:	1e44      	subs	r4, r0, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800cff0:	b224      	sxth	r4, r4
 800cff2:	e09a      	b.n	800d12a <_lv_disp_refr_timer+0x34a>
        if(h_tmp <= 0) {
 800cff4:	2f00      	cmp	r7, #0
            max_row = tmp.y2 + 1;
 800cff6:	bfc8      	it	gt
 800cff8:	f102 0801 	addgt.w	r8, r2, #1
        if(h_tmp <= 0) {
 800cffc:	f340 80c6 	ble.w	800d18c <_lv_disp_refr_timer+0x3ac>
    int32_t max_row = get_max_row(disp_refr, w, h);
 800d000:	f8cd 8010 	str.w	r8, [sp, #16]
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800d004:	f9b6 7032 	ldrsh.w	r7, [r6, #50]	; 0x32
 800d008:	9403      	str	r4, [sp, #12]
 800d00a:	eb07 0308 	add.w	r3, r7, r8
 800d00e:	3b01      	subs	r3, #1
 800d010:	42a3      	cmp	r3, r4
 800d012:	dc3b      	bgt.n	800d08c <_lv_disp_refr_timer+0x2ac>
        sub_area.y2 = row + max_row - 1;
 800d014:	fa1f f988 	uxth.w	r9, r8
 800d018:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800d01c:	9305      	str	r3, [sp, #20]
 800d01e:	e00c      	b.n	800d03a <_lv_disp_refr_timer+0x25a>
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800d020:	45a0      	cmp	r8, r4
 800d022:	d028      	beq.n	800d076 <_lv_disp_refr_timer+0x296>
        refr_area_part(draw_ctx);
 800d024:	4628      	mov	r0, r5
 800d026:	f7ff fb21 	bl	800c66c <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800d02a:	444f      	add	r7, r9
 800d02c:	b23f      	sxth	r7, r7
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	18fb      	adds	r3, r7, r3
 800d032:	3b01      	subs	r3, #1
 800d034:	9a03      	ldr	r2, [sp, #12]
 800d036:	429a      	cmp	r2, r3
 800d038:	db2a      	blt.n	800d090 <_lv_disp_refr_timer+0x2b0>
        sub_area.x1 = area_p->x1;
 800d03a:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800d03c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        sub_area.x2 = area_p->x2;
 800d040:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 800d042:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sub_area.y1 = row;
 800d046:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
        sub_area.y2 = row + max_row - 1;
 800d04a:	b2bf      	uxth	r7, r7
 800d04c:	9b05      	ldr	r3, [sp, #20]
 800d04e:	18fb      	adds	r3, r7, r3
 800d050:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        draw_ctx->buf_area = &sub_area;
 800d054:	f8c5 b004 	str.w	fp, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 800d058:	f8c5 b008 	str.w	fp, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800d05c:	f8da 3000 	ldr.w	r3, [sl]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	68d2      	ldr	r2, [r2, #12]
 800d064:	6892      	ldr	r2, [r2, #8]
 800d066:	602a      	str	r2, [r5, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 800d068:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 800d06c:	45a0      	cmp	r8, r4
 800d06e:	ddd7      	ble.n	800d020 <_lv_disp_refr_timer+0x240>
 800d070:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
        row_last = sub_area.y2;
 800d074:	46a0      	mov	r8, r4
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	7e13      	ldrb	r3, [r2, #24]
 800d07c:	f043 0302 	orr.w	r3, r3, #2
 800d080:	7613      	strb	r3, [r2, #24]
 800d082:	e7cf      	b.n	800d024 <_lv_disp_refr_timer+0x244>
 800d084:	200025e8 	.word	0x200025e8
 800d088:	20002604 	.word	0x20002604
    lv_coord_t row_last = 0;
 800d08c:	f04f 0800 	mov.w	r8, #0
    if(y2 != row_last) {
 800d090:	4544      	cmp	r4, r8
 800d092:	d17e      	bne.n	800d192 <_lv_disp_refr_timer+0x3b2>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800d094:	9b02      	ldr	r3, [sp, #8]
 800d096:	00db      	lsls	r3, r3, #3
 800d098:	3330      	adds	r3, #48	; 0x30
 800d09a:	f8da 0000 	ldr.w	r0, [sl]
 800d09e:	4418      	add	r0, r3
 800d0a0:	f014 f803 	bl	80210aa <lv_area_get_size>
 800d0a4:	4aae      	ldr	r2, [pc, #696]	; (800d360 <_lv_disp_refr_timer+0x580>)
 800d0a6:	6813      	ldr	r3, [r2, #0]
 800d0a8:	4403      	add	r3, r0
 800d0aa:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 800d0ac:	9b02      	ldr	r3, [sp, #8]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	9302      	str	r3, [sp, #8]
 800d0b4:	f8da 4000 	ldr.w	r4, [sl]
 800d0b8:	f8b4 3150 	ldrh.w	r3, [r4, #336]	; 0x150
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	f280 8086 	bge.w	800d1ce <_lv_disp_refr_timer+0x3ee>
        if(disp_refr->inv_area_joined[i] == 0) {
 800d0c2:	9a02      	ldr	r2, [sp, #8]
 800d0c4:	18a3      	adds	r3, r4, r2
 800d0c6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1ee      	bne.n	800d0ac <_lv_disp_refr_timer+0x2cc>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 800d0ce:	9b06      	ldr	r3, [sp, #24]
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	f43f af4c 	beq.w	800cf6e <_lv_disp_refr_timer+0x18e>
            disp_refr->driver->draw_buf->last_part = 0;
 800d0d6:	6823      	ldr	r3, [r4, #0]
 800d0d8:	68da      	ldr	r2, [r3, #12]
 800d0da:	7e13      	ldrb	r3, [r2, #24]
 800d0dc:	f36f 0341 	bfc	r3, #1, #1
 800d0e0:	7613      	strb	r3, [r2, #24]
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	602b      	str	r3, [r5, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	7c1b      	ldrb	r3, [r3, #16]
 800d0f0:	f013 0f03 	tst.w	r3, #3
 800d0f4:	f47f af42 	bne.w	800cf7c <_lv_disp_refr_timer+0x19c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d0f8:	9b02      	ldr	r3, [sp, #8]
 800d0fa:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 800d0fe:	8eb7      	ldrh	r7, [r6, #52]	; 0x34
 800d100:	3701      	adds	r7, #1
 800d102:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800d104:	1aff      	subs	r7, r7, r3
 800d106:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d108:	f9b6 9036 	ldrsh.w	r9, [r6, #54]	; 0x36
 800d10c:	f109 0801 	add.w	r8, r9, #1
 800d110:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800d112:	eba8 0803 	sub.w	r8, r8, r3
 800d116:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 800d11a:	4620      	mov	r0, r4
 800d11c:	f013 fcc2 	bl	8020aa4 <lv_disp_get_ver_res>
 800d120:	4581      	cmp	r9, r0
 800d122:	f6bf af60 	bge.w	800cfe6 <_lv_disp_refr_timer+0x206>
 800d126:	f9b6 4036 	ldrsh.w	r4, [r6, #54]	; 0x36
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 800d12a:	f8da 3000 	ldr.w	r3, [sl]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	68d3      	ldr	r3, [r2, #12]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	fbb3 f7f7 	udiv	r7, r3, r7
    if(max_row > area_h) max_row = area_h;
 800d138:	45b8      	cmp	r8, r7
 800d13a:	bfa8      	it	ge
 800d13c:	46b8      	movge	r8, r7
    if(disp_refr->driver->rounder_cb) {
 800d13e:	6993      	ldr	r3, [r2, #24]
 800d140:	2b00      	cmp	r3, #0
 800d142:	f43f af5d 	beq.w	800d000 <_lv_disp_refr_timer+0x220>
        tmp.x1 = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        tmp.x2 = 0;
 800d14c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        tmp.y1 = 0;
 800d150:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_coord_t h_tmp = max_row;
 800d154:	fa0f f988 	sxth.w	r9, r8
            tmp.y2 = h_tmp - 1;
 800d158:	464f      	mov	r7, r9
 800d15a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d15e:	fa0f f989 	sxth.w	r9, r9
 800d162:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 800d166:	f8da 3000 	ldr.w	r3, [sl]
 800d16a:	6818      	ldr	r0, [r3, #0]
 800d16c:	6983      	ldr	r3, [r0, #24]
 800d16e:	4659      	mov	r1, fp
 800d170:	4798      	blx	r3
 800d172:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 800d176:	1c53      	adds	r3, r2, #1
 800d178:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800d17c:	1a5b      	subs	r3, r3, r1
            if(lv_area_get_height(&tmp) <= max_row) break;
 800d17e:	b21b      	sxth	r3, r3
 800d180:	4598      	cmp	r8, r3
 800d182:	f6bf af37 	bge.w	800cff4 <_lv_disp_refr_timer+0x214>
        } while(h_tmp > 0);
 800d186:	f1b9 0f00 	cmp.w	r9, #0
 800d18a:	dce5      	bgt.n	800d158 <_lv_disp_refr_timer+0x378>
            return 0;
 800d18c:	f04f 0800 	mov.w	r8, #0
 800d190:	e736      	b.n	800d000 <_lv_disp_refr_timer+0x220>
        sub_area.x1 = area_p->x1;
 800d192:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800d194:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        sub_area.x2 = area_p->x2;
 800d198:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 800d19a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        sub_area.y1 = row;
 800d19e:	f8ad 7026 	strh.w	r7, [sp, #38]	; 0x26
        sub_area.y2 = y2;
 800d1a2:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
        draw_ctx->buf_area = &sub_area;
 800d1a6:	f8c5 b004 	str.w	fp, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 800d1aa:	f8c5 b008 	str.w	fp, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 800d1ae:	f8da 3000 	ldr.w	r3, [sl]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	68d2      	ldr	r2, [r2, #12]
 800d1b6:	6892      	ldr	r2, [r2, #8]
 800d1b8:	602a      	str	r2, [r5, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68da      	ldr	r2, [r3, #12]
 800d1be:	7e13      	ldrb	r3, [r2, #24]
 800d1c0:	f043 0302 	orr.w	r3, r3, #2
 800d1c4:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f7ff fa50 	bl	800c66c <refr_area_part>
 800d1cc:	e762      	b.n	800d094 <_lv_disp_refr_timer+0x2b4>
    disp_refr->rendering_in_progress = false;
 800d1ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d1d2:	f36f 0382 	bfc	r3, #2, #1
 800d1d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if(disp_refr->inv_p != 0) {
 800d1da:	4b62      	ldr	r3, [pc, #392]	; (800d364 <_lv_disp_refr_timer+0x584>)
 800d1dc:	6818      	ldr	r0, [r3, #0]
 800d1de:	f8b0 3150 	ldrh.w	r3, [r0, #336]	; 0x150
 800d1e2:	bb03      	cbnz	r3, 800d226 <_lv_disp_refr_timer+0x446>
    lv_mem_buf_free_all();
 800d1e4:	f014 ff6e 	bl	80220c4 <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 800d1e8:	f013 fb62 	bl	80208b0 <_lv_font_clean_up_fmt_txt>
    _lv_draw_mask_cleanup();
 800d1ec:	f001 ff5a 	bl	800f0a4 <_lv_draw_mask_cleanup>
    lv_obj_t * perf_label = perf_monitor.perf_label;
 800d1f0:	4b5d      	ldr	r3, [pc, #372]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d1f2:	695c      	ldr	r4, [r3, #20]
    if(perf_label == NULL) {
 800d1f4:	2c00      	cmp	r4, #0
 800d1f6:	d034      	beq.n	800d262 <_lv_disp_refr_timer+0x482>
    if(lv_tick_elaps(perf_monitor.perf_last_time) < 300) {
 800d1f8:	4b5b      	ldr	r3, [pc, #364]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d1fa:	6818      	ldr	r0, [r3, #0]
 800d1fc:	f013 fcfb 	bl	8020bf6 <lv_tick_elaps>
 800d200:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 800d204:	d26a      	bcs.n	800d2dc <_lv_disp_refr_timer+0x4fc>
        if(px_num > 5000) {
 800d206:	4b56      	ldr	r3, [pc, #344]	; (800d360 <_lv_disp_refr_timer+0x580>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d20e:	429a      	cmp	r2, r3
 800d210:	f67f ae1b 	bls.w	800ce4a <_lv_disp_refr_timer+0x6a>
            perf_monitor.elaps_sum += elaps;
 800d214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d216:	4b54      	ldr	r3, [pc, #336]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	440a      	add	r2, r1
 800d21c:	605a      	str	r2, [r3, #4]
            perf_monitor.frame_cnt ++;
 800d21e:	689a      	ldr	r2, [r3, #8]
 800d220:	3201      	adds	r2, #1
 800d222:	609a      	str	r2, [r3, #8]
 800d224:	e611      	b.n	800ce4a <_lv_disp_refr_timer+0x6a>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 800d226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d22a:	3030      	adds	r0, #48	; 0x30
 800d22c:	f015 f8fe 	bl	802242c <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 800d230:	4c4c      	ldr	r4, [pc, #304]	; (800d364 <_lv_disp_refr_timer+0x584>)
 800d232:	6820      	ldr	r0, [r4, #0]
 800d234:	2120      	movs	r1, #32
 800d236:	f500 7098 	add.w	r0, r0, #304	; 0x130
 800d23a:	f015 f8f7 	bl	802242c <lv_memset_00>
        disp_refr->inv_p = 0;
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	2200      	movs	r2, #0
 800d242:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
        elaps = lv_tick_elaps(start);
 800d246:	9807      	ldr	r0, [sp, #28]
 800d248:	f013 fcd5 	bl	8020bf6 <lv_tick_elaps>
 800d24c:	900b      	str	r0, [sp, #44]	; 0x2c
        if(disp_refr->driver->monitor_cb) {
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	6818      	ldr	r0, [r3, #0]
 800d252:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d254:	2b00      	cmp	r3, #0
 800d256:	d0c5      	beq.n	800d1e4 <_lv_disp_refr_timer+0x404>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 800d258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d25a:	4a41      	ldr	r2, [pc, #260]	; (800d360 <_lv_disp_refr_timer+0x580>)
 800d25c:	6812      	ldr	r2, [r2, #0]
 800d25e:	4798      	blx	r3
 800d260:	e7c0      	b.n	800d1e4 <_lv_disp_refr_timer+0x404>
 * Get the active screen of the default display
 * @return  pointer to the sys layer
 */
static inline lv_obj_t * lv_layer_sys(void)
{
    return lv_disp_get_layer_sys(lv_disp_get_default());
 800d262:	f013 fc05 	bl	8020a70 <lv_disp_get_default>
 800d266:	f7f6 ff7c 	bl	8004162 <lv_disp_get_layer_sys>
        perf_label = lv_label_create(lv_layer_sys());
 800d26a:	f01b f9c1 	bl	80285f0 <lv_label_create>
 800d26e:	4604      	mov	r4, r0
        lv_obj_set_style_bg_opa(perf_label, LV_OPA_50, 0);
 800d270:	2200      	movs	r2, #0
 800d272:	217f      	movs	r1, #127	; 0x7f
 800d274:	f7fe fd03 	bl	800bc7e <lv_obj_set_style_bg_opa>
        lv_obj_set_style_bg_color(perf_label, lv_color_black(), 0);
 800d278:	2200      	movs	r2, #0
 800d27a:	f04f 0100 	mov.w	r1, #0
 800d27e:	4620      	mov	r0, r4
 800d280:	f7fe fceb 	bl	800bc5a <lv_obj_set_style_bg_color>
        lv_obj_set_style_text_color(perf_label, lv_color_white(), 0);
 800d284:	2200      	movs	r2, #0
 800d286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d28a:	4620      	mov	r0, r4
 800d28c:	f7fe fcfe 	bl	800bc8c <lv_obj_set_style_text_color>
        lv_obj_set_style_pad_top(perf_label, 3, 0);
 800d290:	2200      	movs	r2, #0
 800d292:	2103      	movs	r1, #3
 800d294:	4620      	mov	r0, r4
 800d296:	f7fe fcc4 	bl	800bc22 <lv_obj_set_style_pad_top>
        lv_obj_set_style_pad_bottom(perf_label, 3, 0);
 800d29a:	2200      	movs	r2, #0
 800d29c:	2103      	movs	r1, #3
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f7fe fcc6 	bl	800bc30 <lv_obj_set_style_pad_bottom>
        lv_obj_set_style_pad_left(perf_label, 3, 0);
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	2103      	movs	r1, #3
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7fe fcc8 	bl	800bc3e <lv_obj_set_style_pad_left>
        lv_obj_set_style_pad_right(perf_label, 3, 0);
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2103      	movs	r1, #3
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7fe fcca 	bl	800bc4c <lv_obj_set_style_pad_right>
        lv_obj_set_style_text_align(perf_label, LV_TEXT_ALIGN_RIGHT, 0);
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	2103      	movs	r1, #3
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f7fe fcf7 	bl	800bcb0 <lv_obj_set_style_text_align>
        lv_label_set_text(perf_label, "?");
 800d2c2:	492a      	ldr	r1, [pc, #168]	; (800d36c <_lv_disp_refr_timer+0x58c>)
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f01b fe6f 	bl	8028fa8 <lv_label_set_text>
        lv_obj_align(perf_label, LV_USE_PERF_MONITOR_POS, 0, 0);
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	2106      	movs	r1, #6
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f7fa ff01 	bl	80080d8 <lv_obj_align>
        perf_monitor.perf_label = perf_label;
 800d2d6:	4b24      	ldr	r3, [pc, #144]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d2d8:	615c      	str	r4, [r3, #20]
 800d2da:	e78d      	b.n	800d1f8 <_lv_disp_refr_timer+0x418>
        perf_monitor.perf_last_time = lv_tick_get();
 800d2dc:	f013 fc87 	bl	8020bee <lv_tick_get>
 800d2e0:	4b21      	ldr	r3, [pc, #132]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d2e2:	6018      	str	r0, [r3, #0]
        if(disp_refr->refr_timer) {
 800d2e4:	4b1f      	ldr	r3, [pc, #124]	; (800d364 <_lv_disp_refr_timer+0x584>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	b363      	cbz	r3, 800d346 <_lv_disp_refr_timer+0x566>
            fps_limit = 1000 / disp_refr->refr_timer->period;
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800d2f2:	fbb5 f5f3 	udiv	r5, r5, r3
        if(perf_monitor.elaps_sum == 0) {
 800d2f6:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	b913      	cbnz	r3, 800d302 <_lv_disp_refr_timer+0x522>
            perf_monitor.elaps_sum = 1;
 800d2fc:	4b1a      	ldr	r3, [pc, #104]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d2fe:	2201      	movs	r2, #1
 800d300:	605a      	str	r2, [r3, #4]
        if(perf_monitor.frame_cnt == 0) {
 800d302:	4b19      	ldr	r3, [pc, #100]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	b303      	cbz	r3, 800d34a <_lv_disp_refr_timer+0x56a>
            fps = (1000 * perf_monitor.frame_cnt) / perf_monitor.elaps_sum;
 800d308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d30c:	fb02 f303 	mul.w	r3, r2, r3
 800d310:	4a15      	ldr	r2, [pc, #84]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d312:	6852      	ldr	r2, [r2, #4]
 800d314:	fbb3 f2f2 	udiv	r2, r3, r2
        perf_monitor.elaps_sum = 0;
 800d318:	4b13      	ldr	r3, [pc, #76]	; (800d368 <_lv_disp_refr_timer+0x588>)
 800d31a:	2100      	movs	r1, #0
 800d31c:	6059      	str	r1, [r3, #4]
        perf_monitor.frame_cnt = 0;
 800d31e:	6099      	str	r1, [r3, #8]
        if(fps > fps_limit) {
 800d320:	4295      	cmp	r5, r2
 800d322:	bf28      	it	cs
 800d324:	4615      	movcs	r5, r2
        perf_monitor.fps_sum_all += fps;
 800d326:	691a      	ldr	r2, [r3, #16]
 800d328:	442a      	add	r2, r5
 800d32a:	611a      	str	r2, [r3, #16]
        perf_monitor.fps_sum_cnt ++;
 800d32c:	68da      	ldr	r2, [r3, #12]
 800d32e:	3201      	adds	r2, #1
 800d330:	60da      	str	r2, [r3, #12]
        uint32_t cpu = 100 - lv_timer_get_idle();
 800d332:	f016 facd 	bl	80238d0 <lv_timer_get_idle>
        lv_label_set_text_fmt(perf_label, "%"LV_PRIu32" FPS\n%"LV_PRIu32"%% CPU", fps, cpu);
 800d336:	f1c0 0364 	rsb	r3, r0, #100	; 0x64
 800d33a:	462a      	mov	r2, r5
 800d33c:	490c      	ldr	r1, [pc, #48]	; (800d370 <_lv_disp_refr_timer+0x590>)
 800d33e:	4620      	mov	r0, r4
 800d340:	f01b fe6d 	bl	802901e <lv_label_set_text_fmt>
    REFR_TRACE("finished");
 800d344:	e581      	b.n	800ce4a <_lv_disp_refr_timer+0x6a>
            fps_limit = 1000 / LV_DISP_DEF_REFR_PERIOD;
 800d346:	2519      	movs	r5, #25
 800d348:	e7d5      	b.n	800d2f6 <_lv_disp_refr_timer+0x516>
            fps = fps_limit;
 800d34a:	462a      	mov	r2, r5
 800d34c:	e7e4      	b.n	800d318 <_lv_disp_refr_timer+0x538>
    px_num = 0;
 800d34e:	4b04      	ldr	r3, [pc, #16]	; (800d360 <_lv_disp_refr_timer+0x580>)
 800d350:	2200      	movs	r2, #0
 800d352:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p != 0) {
 800d354:	e746      	b.n	800d1e4 <_lv_disp_refr_timer+0x404>
    px_num = 0;
 800d356:	4b02      	ldr	r3, [pc, #8]	; (800d360 <_lv_disp_refr_timer+0x580>)
 800d358:	2200      	movs	r2, #0
 800d35a:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
 800d35c:	e73d      	b.n	800d1da <_lv_disp_refr_timer+0x3fa>
 800d35e:	bf00      	nop
 800d360:	20002604 	.word	0x20002604
 800d364:	200025e8 	.word	0x200025e8
 800d368:	200025ec 	.word	0x200025ec
 800d36c:	0802d65c 	.word	0x0802d65c
 800d370:	0802d660 	.word	0x0802d660

0800d374 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4604      	mov	r4, r0
 800d378:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 800d37a:	6840      	ldr	r0, [r0, #4]
 800d37c:	b108      	cbz	r0, 800d382 <apply_theme+0xe>
 800d37e:	f7ff fff9 	bl	800d374 <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	b113      	cbz	r3, 800d38c <apply_theme+0x18>
 800d386:	4629      	mov	r1, r5
 800d388:	4620      	mov	r0, r4
 800d38a:	4798      	blx	r3
}
 800d38c:	bd38      	pop	{r3, r4, r5, pc}

0800d38e <lv_theme_get_from_obj>:
{
 800d38e:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800d390:	b120      	cbz	r0, 800d39c <lv_theme_get_from_obj+0xe>
 800d392:	f7fe fca9 	bl	800bce8 <lv_obj_get_disp>
    return lv_disp_get_theme(disp);
 800d396:	f7f6 feef 	bl	8004178 <lv_disp_get_theme>
}
 800d39a:	bd08      	pop	{r3, pc}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 800d39c:	f013 fb68 	bl	8020a70 <lv_disp_get_default>
 800d3a0:	e7f9      	b.n	800d396 <lv_theme_get_from_obj+0x8>
	...

0800d3a4 <lv_theme_apply>:
{
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4604      	mov	r4, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800d3a8:	f7ff fff1 	bl	800d38e <lv_theme_get_from_obj>
    if(th == NULL) return;
 800d3ac:	b148      	cbz	r0, 800d3c2 <lv_theme_apply+0x1e>
 800d3ae:	4605      	mov	r5, r0
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 800d3b0:	4a04      	ldr	r2, [pc, #16]	; (800d3c4 <lv_theme_apply+0x20>)
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f7fe f86f 	bl	800b498 <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f7ff ffd9 	bl	800d374 <apply_theme>
}
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	000fffff 	.word	0x000fffff

0800d3c8 <lv_theme_get_color_primary>:
{
 800d3c8:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 800d3ca:	f7ff ffe0 	bl	800d38e <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 800d3ce:	b108      	cbz	r0, 800d3d4 <lv_theme_get_color_primary+0xc>
 800d3d0:	8a00      	ldrh	r0, [r0, #16]
}
 800d3d2:	bd08      	pop	{r3, pc}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 800d3d4:	2011      	movs	r0, #17
 800d3d6:	f014 f9ed 	bl	80217b4 <lv_palette_main>
 800d3da:	e7fa      	b.n	800d3d2 <lv_theme_get_color_primary+0xa>

0800d3dc <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 800d3dc:	4770      	bx	lr

0800d3de <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 800d3de:	b508      	push	{r3, lr}
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800d3e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d3e2:	b103      	cbz	r3, 800d3e6 <lv_draw_wait_for_finish+0x8>
 800d3e4:	4798      	blx	r3
}
 800d3e6:	bd08      	pop	{r3, pc}

0800d3e8 <lv_draw_arc_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_arc_dsc_init(lv_draw_arc_dsc_t * dsc)
{
 800d3e8:	b510      	push	{r4, lr}
 800d3ea:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 800d3ec:	2110      	movs	r1, #16
 800d3ee:	f015 f81d 	bl	802242c <lv_memset_00>
    dsc->width = 1;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 800d3f6:	23ff      	movs	r3, #255	; 0xff
 800d3f8:	7323      	strb	r3, [r4, #12]
    dsc->color = lv_color_black();
 800d3fa:	7823      	ldrb	r3, [r4, #0]
 800d3fc:	f36f 0304 	bfc	r3, #0, #5
 800d400:	7023      	strb	r3, [r4, #0]
 800d402:	8823      	ldrh	r3, [r4, #0]
 800d404:	f36f 134a 	bfc	r3, #5, #6
 800d408:	8023      	strh	r3, [r4, #0]
 800d40a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d40e:	f36f 03c7 	bfc	r3, #3, #5
 800d412:	7063      	strb	r3, [r4, #1]
}
 800d414:	bd10      	pop	{r4, pc}

0800d416 <lv_draw_arc>:

void lv_draw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                 uint16_t start_angle, uint16_t end_angle)
{
 800d416:	b570      	push	{r4, r5, r6, lr}
 800d418:	b082      	sub	sp, #8
 800d41a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800d41e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    if(dsc->opa <= LV_OPA_MIN) return;
 800d422:	f891 c00c 	ldrb.w	ip, [r1, #12]
 800d426:	f1bc 0f02 	cmp.w	ip, #2
 800d42a:	d908      	bls.n	800d43e <lv_draw_arc+0x28>
    if(dsc->width == 0) return;
 800d42c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d430:	b12e      	cbz	r6, 800d43e <lv_draw_arc+0x28>
    if(start_angle == end_angle) return;
 800d432:	42ac      	cmp	r4, r5
 800d434:	d003      	beq.n	800d43e <lv_draw_arc+0x28>

    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 800d436:	9501      	str	r5, [sp, #4]
 800d438:	9400      	str	r4, [sp, #0]
 800d43a:	6944      	ldr	r4, [r0, #20]
 800d43c:	47a0      	blx	r4

    //    const lv_draw_backend_t * backend = lv_draw_backend_get();
    //    backend->draw_arc(center_x, center_y, radius, start_angle, end_angle, clip_area, dsc);
}
 800d43e:	b002      	add	sp, #8
 800d440:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d444 <lv_draw_arc_get_area>:

void lv_draw_arc_get_area(lv_coord_t x, lv_coord_t y, uint16_t radius,  uint16_t start_angle, uint16_t end_angle,
                          lv_coord_t w, bool rounded, lv_area_t * area)
{
 800d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d448:	b085      	sub	sp, #20
 800d44a:	4683      	mov	fp, r0
 800d44c:	9100      	str	r1, [sp, #0]
 800d44e:	4616      	mov	r6, r2
 800d450:	461c      	mov	r4, r3
 800d452:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 800d456:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 800d45a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800d45e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    lv_coord_t rout = radius;

    /*Special case: full arc invalidation */
    if(end_angle == start_angle + 360) {
 800d460:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d464:	459a      	cmp	sl, r3
 800d466:	d044      	beq.n	800d4f2 <lv_draw_arc_get_area+0xae>
 800d468:	fa0f f986 	sxth.w	r9, r6
        area->x2 = x + rout;
        area->y2 = y + rout;
        return;
    }

    if(start_angle > 360) start_angle -= 360;
 800d46c:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 800d470:	bf84      	itt	hi
 800d472:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 800d476:	b2a4      	uxthhi	r4, r4
    if(end_angle > 360) end_angle -= 360;
 800d478:	f5ba 7fb4 	cmp.w	sl, #360	; 0x168
 800d47c:	bf84      	itt	hi
 800d47e:	f5aa 7ab4 	subhi.w	sl, sl, #360	; 0x168
 800d482:	fa1f fa8a 	uxthhi.w	sl, sl

    lv_coord_t rin = radius - w;
 800d486:	eba6 0805 	sub.w	r8, r6, r5
 800d48a:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 800d48e:	2a00      	cmp	r2, #0
 800d490:	d03e      	beq.n	800d510 <lv_draw_arc_get_area+0xcc>
 800d492:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d496:	106d      	asrs	r5, r5, #1
 800d498:	3501      	adds	r5, #1
 800d49a:	b22d      	sxth	r5, r5
    uint8_t start_quarter = start_angle / 90;
 800d49c:	0862      	lsrs	r2, r4, #1
 800d49e:	49c6      	ldr	r1, [pc, #792]	; (800d7b8 <lv_draw_arc_get_area+0x374>)
 800d4a0:	fba1 3202 	umull	r3, r2, r1, r2
 800d4a4:	f3c2 1247 	ubfx	r2, r2, #5, #8
    uint8_t end_quarter = end_angle / 90;
 800d4a8:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800d4ac:	fba1 1303 	umull	r1, r3, r1, r3
 800d4b0:	f3c3 1347 	ubfx	r3, r3, #5, #8

    /*360 deg still counts as quarter 3 (360 / 90 would be 4)*/
    if(start_quarter == 4) start_quarter = 3;
 800d4b4:	2a04      	cmp	r2, #4
 800d4b6:	f000 81c1 	beq.w	800d83c <lv_draw_arc_get_area+0x3f8>
    if(end_quarter == 4) end_quarter = 3;
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	bf08      	it	eq
 800d4be:	2303      	moveq	r3, #3

    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d028      	beq.n	800d516 <lv_draw_arc_get_area+0xd2>

            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
        }
    }
    else if(start_quarter == 0 && end_quarter == 1) {
 800d4c4:	2a00      	cmp	r2, #0
 800d4c6:	f040 8133 	bne.w	800d730 <lv_draw_arc_get_area+0x2ec>
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	f000 80f4 	beq.w	800d6b8 <lv_draw_arc_get_area+0x274>
        area->x2 = x + rout + extra_area;
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;

    }
    else {
        area->x1 = x - rout;
 800d4d0:	fa1f fb8b 	uxth.w	fp, fp
 800d4d4:	ebab 0306 	sub.w	r3, fp, r6
 800d4d8:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 800d4da:	f8bd 1000 	ldrh.w	r1, [sp]
 800d4de:	1b8b      	subs	r3, r1, r6
 800d4e0:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout;
 800d4e2:	44b3      	add	fp, r6
 800d4e4:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + rout;
 800d4e8:	440e      	add	r6, r1
 800d4ea:	80fe      	strh	r6, [r7, #6]
    }
}
 800d4ec:	b005      	add	sp, #20
 800d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        area->x1 = x - rout;
 800d4f2:	fa1f fb80 	uxth.w	fp, r0
 800d4f6:	ebab 0306 	sub.w	r3, fp, r6
 800d4fa:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 800d4fc:	f8bd 1000 	ldrh.w	r1, [sp]
 800d500:	1b8b      	subs	r3, r1, r6
 800d502:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout;
 800d504:	44b3      	add	fp, r6
 800d506:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + rout;
 800d50a:	440e      	add	r6, r1
 800d50c:	80fe      	strh	r6, [r7, #6]
        return;
 800d50e:	e7ed      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 800d510:	2500      	movs	r5, #0
 800d512:	e7c3      	b.n	800d49c <lv_draw_arc_get_area+0x58>
    if(start_quarter == 4) start_quarter = 3;
 800d514:	461a      	mov	r2, r3
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800d516:	4554      	cmp	r4, sl
 800d518:	f200 80cc 	bhi.w	800d6b4 <lv_draw_arc_get_area+0x270>
        if(start_quarter == 0) {
 800d51c:	b3ba      	cbz	r2, 800d58e <lv_draw_arc_get_area+0x14a>
        else if(start_quarter == 1) {
 800d51e:	2a01      	cmp	r2, #1
 800d520:	d066      	beq.n	800d5f0 <lv_draw_arc_get_area+0x1ac>
        else if(start_quarter == 2) {
 800d522:	2a02      	cmp	r2, #2
 800d524:	f000 8095 	beq.w	800d652 <lv_draw_arc_get_area+0x20e>
        else if(start_quarter == 3) {
 800d528:	2a03      	cmp	r2, #3
 800d52a:	d1df      	bne.n	800d4ec <lv_draw_arc_get_area+0xa8>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d52c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d530:	b200      	sxth	r0, r0
 800d532:	f014 fbef 	bl	8021d14 <lv_trigo_sin>
 800d536:	fa1f fb8b 	uxth.w	fp, fp
 800d53a:	b2ad      	uxth	r5, r5
 800d53c:	fb08 f200 	mul.w	r2, r8, r0
 800d540:	ebab 0305 	sub.w	r3, fp, r5
 800d544:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800d548:	803b      	strh	r3, [r7, #0]
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d54a:	b220      	sxth	r0, r4
 800d54c:	f014 fbe2 	bl	8021d14 <lv_trigo_sin>
 800d550:	f8bd 6000 	ldrh.w	r6, [sp]
 800d554:	fb09 f200 	mul.w	r2, r9, r0
 800d558:	1b73      	subs	r3, r6, r5
 800d55a:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800d55e:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d560:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800d564:	b200      	sxth	r0, r0
 800d566:	f014 fbd5 	bl	8021d14 <lv_trigo_sin>
 800d56a:	fb09 f900 	mul.w	r9, r9, r0
 800d56e:	eb0b 0305 	add.w	r3, fp, r5
 800d572:	eb03 33e9 	add.w	r3, r3, r9, asr #15
 800d576:	80bb      	strh	r3, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d578:	fa0f f08a 	sxth.w	r0, sl
 800d57c:	f014 fbca 	bl	8021d14 <lv_trigo_sin>
 800d580:	fb08 f300 	mul.w	r3, r8, r0
 800d584:	4435      	add	r5, r6
 800d586:	eb05 33e3 	add.w	r3, r5, r3, asr #15
 800d58a:	80fb      	strh	r3, [r7, #6]
 800d58c:	e7ae      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d58e:	b220      	sxth	r0, r4
 800d590:	f014 fbc0 	bl	8021d14 <lv_trigo_sin>
 800d594:	f8bd 6000 	ldrh.w	r6, [sp]
 800d598:	b2ad      	uxth	r5, r5
 800d59a:	fb08 f000 	mul.w	r0, r8, r0
 800d59e:	1b73      	subs	r3, r6, r5
 800d5a0:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d5a4:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d5a6:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d5aa:	b200      	sxth	r0, r0
 800d5ac:	f014 fbb2 	bl	8021d14 <lv_trigo_sin>
 800d5b0:	fa1f fb8b 	uxth.w	fp, fp
 800d5b4:	fb09 f000 	mul.w	r0, r9, r0
 800d5b8:	eb05 030b 	add.w	r3, r5, fp
 800d5bc:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d5c0:	80bb      	strh	r3, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d5c2:	fa0f f08a 	sxth.w	r0, sl
 800d5c6:	f014 fba5 	bl	8021d14 <lv_trigo_sin>
 800d5ca:	fb09 f900 	mul.w	r9, r9, r0
 800d5ce:	442e      	add	r6, r5
 800d5d0:	eb06 36e9 	add.w	r6, r6, r9, asr #15
 800d5d4:	80fe      	strh	r6, [r7, #6]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d5d6:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800d5da:	b200      	sxth	r0, r0
 800d5dc:	f014 fb9a 	bl	8021d14 <lv_trigo_sin>
 800d5e0:	fb08 f800 	mul.w	r8, r8, r0
 800d5e4:	ebab 0505 	sub.w	r5, fp, r5
 800d5e8:	eb05 35e8 	add.w	r5, r5, r8, asr #15
 800d5ec:	803d      	strh	r5, [r7, #0]
 800d5ee:	e77d      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d5f0:	b220      	sxth	r0, r4
 800d5f2:	f014 fb8f 	bl	8021d14 <lv_trigo_sin>
 800d5f6:	f8bd 6000 	ldrh.w	r6, [sp]
 800d5fa:	b2ad      	uxth	r5, r5
 800d5fc:	fb09 f000 	mul.w	r0, r9, r0
 800d600:	1973      	adds	r3, r6, r5
 800d602:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d606:	80fb      	strh	r3, [r7, #6]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d608:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d60c:	b200      	sxth	r0, r0
 800d60e:	f014 fb81 	bl	8021d14 <lv_trigo_sin>
 800d612:	fa1f fb8b 	uxth.w	fp, fp
 800d616:	fb08 f000 	mul.w	r0, r8, r0
 800d61a:	eb05 030b 	add.w	r3, r5, fp
 800d61e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d622:	80bb      	strh	r3, [r7, #4]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d624:	fa0f f08a 	sxth.w	r0, sl
 800d628:	f014 fb74 	bl	8021d14 <lv_trigo_sin>
 800d62c:	fb08 f800 	mul.w	r8, r8, r0
 800d630:	1b76      	subs	r6, r6, r5
 800d632:	eb06 36e8 	add.w	r6, r6, r8, asr #15
 800d636:	807e      	strh	r6, [r7, #2]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d638:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800d63c:	b200      	sxth	r0, r0
 800d63e:	f014 fb69 	bl	8021d14 <lv_trigo_sin>
 800d642:	fb09 f900 	mul.w	r9, r9, r0
 800d646:	ebab 0505 	sub.w	r5, fp, r5
 800d64a:	eb05 35e9 	add.w	r5, r5, r9, asr #15
 800d64e:	803d      	strh	r5, [r7, #0]
 800d650:	e74c      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d652:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d656:	b200      	sxth	r0, r0
 800d658:	f014 fb5c 	bl	8021d14 <lv_trigo_sin>
 800d65c:	fa1f fb8b 	uxth.w	fp, fp
 800d660:	b2ad      	uxth	r5, r5
 800d662:	fb09 f200 	mul.w	r2, r9, r0
 800d666:	ebab 0305 	sub.w	r3, fp, r5
 800d66a:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800d66e:	803b      	strh	r3, [r7, #0]
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d670:	b220      	sxth	r0, r4
 800d672:	f014 fb4f 	bl	8021d14 <lv_trigo_sin>
 800d676:	f8bd 6000 	ldrh.w	r6, [sp]
 800d67a:	fb08 f200 	mul.w	r2, r8, r0
 800d67e:	19ab      	adds	r3, r5, r6
 800d680:	eb03 33e2 	add.w	r3, r3, r2, asr #15
 800d684:	80fb      	strh	r3, [r7, #6]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d686:	fa0f f08a 	sxth.w	r0, sl
 800d68a:	f014 fb43 	bl	8021d14 <lv_trigo_sin>
 800d68e:	fb09 f900 	mul.w	r9, r9, r0
 800d692:	1b73      	subs	r3, r6, r5
 800d694:	eb03 33e9 	add.w	r3, r3, r9, asr #15
 800d698:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d69a:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800d69e:	b200      	sxth	r0, r0
 800d6a0:	f014 fb38 	bl	8021d14 <lv_trigo_sin>
 800d6a4:	fb08 f800 	mul.w	r8, r8, r0
 800d6a8:	eb0b 0305 	add.w	r3, fp, r5
 800d6ac:	eb03 33e8 	add.w	r3, r3, r8, asr #15
 800d6b0:	80bb      	strh	r3, [r7, #4]
 800d6b2:	e71b      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	e705      	b.n	800d4c4 <lv_draw_arc_get_area+0x80>
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d6b8:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800d6bc:	b200      	sxth	r0, r0
 800d6be:	f014 fb29 	bl	8021d14 <lv_trigo_sin>
 800d6c2:	fa1f fb8b 	uxth.w	fp, fp
 800d6c6:	b2ad      	uxth	r5, r5
 800d6c8:	fb09 f300 	mul.w	r3, r9, r0
 800d6cc:	ebab 0005 	sub.w	r0, fp, r5
 800d6d0:	eb00 30e3 	add.w	r0, r0, r3, asr #15
 800d6d4:	8038      	strh	r0, [r7, #0]
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800d6d6:	fa0f fa8a 	sxth.w	sl, sl
 800d6da:	4650      	mov	r0, sl
 800d6dc:	f014 fb1a 	bl	8021d14 <lv_trigo_sin>
 800d6e0:	9001      	str	r0, [sp, #4]
 800d6e2:	b223      	sxth	r3, r4
 800d6e4:	9302      	str	r3, [sp, #8]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f014 fb14 	bl	8021d14 <lv_trigo_sin>
 800d6ec:	9b01      	ldr	r3, [sp, #4]
 800d6ee:	4283      	cmp	r3, r0
 800d6f0:	bfb4      	ite	lt
 800d6f2:	4650      	movlt	r0, sl
 800d6f4:	9802      	ldrge	r0, [sp, #8]
 800d6f6:	f014 fb0d 	bl	8021d14 <lv_trigo_sin>
 800d6fa:	f8bd a000 	ldrh.w	sl, [sp]
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d6fe:	fb00 f808 	mul.w	r8, r0, r8
 800d702:	ebaa 0305 	sub.w	r3, sl, r5
 800d706:	eb03 38e8 	add.w	r8, r3, r8, asr #15
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 800d70a:	f8a7 8002 	strh.w	r8, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d70e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d712:	b200      	sxth	r0, r0
 800d714:	f014 fafe 	bl	8021d14 <lv_trigo_sin>
 800d718:	fb09 f000 	mul.w	r0, r9, r0
 800d71c:	eb0b 0905 	add.w	r9, fp, r5
 800d720:	eb09 39e0 	add.w	r9, r9, r0, asr #15
 800d724:	f8a7 9004 	strh.w	r9, [r7, #4]
        area->y2 = y + rout + extra_area;
 800d728:	4456      	add	r6, sl
 800d72a:	4435      	add	r5, r6
 800d72c:	80fd      	strh	r5, [r7, #6]
 800d72e:	e6dd      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
    else if(start_quarter == 1 && end_quarter == 2) {
 800d730:	2a01      	cmp	r2, #1
 800d732:	d043      	beq.n	800d7bc <lv_draw_arc_get_area+0x378>
    else if(start_quarter == 2 && end_quarter == 3) {
 800d734:	2a02      	cmp	r2, #2
 800d736:	d17e      	bne.n	800d836 <lv_draw_arc_get_area+0x3f2>
 800d738:	2b03      	cmp	r3, #3
 800d73a:	f47f aec9 	bne.w	800d4d0 <lv_draw_arc_get_area+0x8c>
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d73e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800d742:	b200      	sxth	r0, r0
 800d744:	f014 fae6 	bl	8021d14 <lv_trigo_sin>
 800d748:	fa1f fb8b 	uxth.w	fp, fp
 800d74c:	b2ad      	uxth	r5, r5
 800d74e:	fb09 f000 	mul.w	r0, r9, r0
 800d752:	ebab 0305 	sub.w	r3, fp, r5
 800d756:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d75a:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout - extra_area;
 800d75c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	1b9e      	subs	r6, r3, r6
 800d764:	1b76      	subs	r6, r6, r5
 800d766:	807e      	strh	r6, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d768:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
 800d76c:	b200      	sxth	r0, r0
 800d76e:	f014 fad1 	bl	8021d14 <lv_trigo_sin>
 800d772:	fb09 f900 	mul.w	r9, r9, r0
 800d776:	44ab      	add	fp, r5
 800d778:	eb0b 39e9 	add.w	r9, fp, r9, asr #15
 800d77c:	f8a7 9004 	strh.w	r9, [r7, #4]
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 800d780:	fa0f fa8a 	sxth.w	sl, sl
 800d784:	4650      	mov	r0, sl
 800d786:	f014 fac5 	bl	8021d14 <lv_trigo_sin>
 800d78a:	fb08 f600 	mul.w	r6, r8, r0
 800d78e:	b224      	sxth	r4, r4
 800d790:	4620      	mov	r0, r4
 800d792:	f014 fabf 	bl	8021d14 <lv_trigo_sin>
 800d796:	fb08 f000 	mul.w	r0, r8, r0
 800d79a:	4286      	cmp	r6, r0
 800d79c:	bfcc      	ite	gt
 800d79e:	4650      	movgt	r0, sl
 800d7a0:	4620      	movle	r0, r4
 800d7a2:	f014 fab7 	bl	8021d14 <lv_trigo_sin>
 800d7a6:	fb08 f800 	mul.w	r8, r8, r0
 800d7aa:	f3c8 38cf 	ubfx	r8, r8, #15, #16
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d7ae:	9b00      	ldr	r3, [sp, #0]
 800d7b0:	441d      	add	r5, r3
 800d7b2:	4445      	add	r5, r8
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 800d7b4:	80fd      	strh	r5, [r7, #6]
 800d7b6:	e699      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
 800d7b8:	b60b60b7 	.word	0xb60b60b7
    else if(start_quarter == 1 && end_quarter == 2) {
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	f47f ae87 	bne.w	800d4d0 <lv_draw_arc_get_area+0x8c>
        area->x1 = x - rout - extra_area;
 800d7c2:	fa1f fb8b 	uxth.w	fp, fp
 800d7c6:	b2ad      	uxth	r5, r5
 800d7c8:	ebab 0606 	sub.w	r6, fp, r6
 800d7cc:	1b76      	subs	r6, r6, r5
 800d7ce:	803e      	strh	r6, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d7d0:	fa0f f08a 	sxth.w	r0, sl
 800d7d4:	f014 fa9e 	bl	8021d14 <lv_trigo_sin>
 800d7d8:	f8bd 6000 	ldrh.w	r6, [sp]
 800d7dc:	fb09 f000 	mul.w	r0, r9, r0
 800d7e0:	1b73      	subs	r3, r6, r5
 800d7e2:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d7e6:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 800d7e8:	f104 035a 	add.w	r3, r4, #90	; 0x5a
 800d7ec:	b21b      	sxth	r3, r3
 800d7ee:	9301      	str	r3, [sp, #4]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f014 fa8f 	bl	8021d14 <lv_trigo_sin>
 800d7f6:	9000      	str	r0, [sp, #0]
 800d7f8:	f10a 0a5a 	add.w	sl, sl, #90	; 0x5a
 800d7fc:	fa0f fa8a 	sxth.w	sl, sl
 800d800:	4650      	mov	r0, sl
 800d802:	f014 fa87 	bl	8021d14 <lv_trigo_sin>
 800d806:	9a00      	ldr	r2, [sp, #0]
 800d808:	4282      	cmp	r2, r0
 800d80a:	bfcc      	ite	gt
 800d80c:	9801      	ldrgt	r0, [sp, #4]
 800d80e:	4650      	movle	r0, sl
 800d810:	f014 fa80 	bl	8021d14 <lv_trigo_sin>
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800d814:	fb00 f808 	mul.w	r8, r0, r8
 800d818:	44ab      	add	fp, r5
 800d81a:	eb0b 38e8 	add.w	r8, fp, r8, asr #15
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 800d81e:	f8a7 8004 	strh.w	r8, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d822:	b220      	sxth	r0, r4
 800d824:	f014 fa76 	bl	8021d14 <lv_trigo_sin>
 800d828:	fb09 f900 	mul.w	r9, r9, r0
 800d82c:	4435      	add	r5, r6
 800d82e:	eb05 35e9 	add.w	r5, r5, r9, asr #15
 800d832:	80fd      	strh	r5, [r7, #6]
 800d834:	e65a      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
    else if(start_quarter == 3 && end_quarter == 0) {
 800d836:	2a03      	cmp	r2, #3
 800d838:	d005      	beq.n	800d846 <lv_draw_arc_get_area+0x402>
 800d83a:	e649      	b.n	800d4d0 <lv_draw_arc_get_area+0x8c>
    if(end_quarter == 4) end_quarter = 3;
 800d83c:	2b04      	cmp	r3, #4
 800d83e:	d040      	beq.n	800d8c2 <lv_draw_arc_get_area+0x47e>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800d840:	2b03      	cmp	r3, #3
 800d842:	f43f ae67 	beq.w	800d514 <lv_draw_arc_get_area+0xd0>
    else if(start_quarter == 3 && end_quarter == 0) {
 800d846:	2b00      	cmp	r3, #0
 800d848:	f47f ae42 	bne.w	800d4d0 <lv_draw_arc_get_area+0x8c>
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 800d84c:	f10a 035a 	add.w	r3, sl, #90	; 0x5a
 800d850:	b21b      	sxth	r3, r3
 800d852:	9302      	str	r3, [sp, #8]
 800d854:	4618      	mov	r0, r3
 800d856:	f014 fa5d 	bl	8021d14 <lv_trigo_sin>
 800d85a:	9001      	str	r0, [sp, #4]
 800d85c:	f104 035a 	add.w	r3, r4, #90	; 0x5a
 800d860:	b21b      	sxth	r3, r3
 800d862:	9303      	str	r3, [sp, #12]
 800d864:	4618      	mov	r0, r3
 800d866:	f014 fa55 	bl	8021d14 <lv_trigo_sin>
 800d86a:	9a01      	ldr	r2, [sp, #4]
 800d86c:	4282      	cmp	r2, r0
 800d86e:	bfb4      	ite	lt
 800d870:	9802      	ldrlt	r0, [sp, #8]
 800d872:	9803      	ldrge	r0, [sp, #12]
 800d874:	f014 fa4e 	bl	8021d14 <lv_trigo_sin>
 800d878:	fa1f fb8b 	uxth.w	fp, fp
                                lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 800d87c:	b2ad      	uxth	r5, r5
 800d87e:	fb00 f808 	mul.w	r8, r0, r8
 800d882:	ebab 0305 	sub.w	r3, fp, r5
 800d886:	eb03 38e8 	add.w	r8, r3, r8, asr #15
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 800d88a:	f8a7 8000 	strh.w	r8, [r7]
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800d88e:	b220      	sxth	r0, r4
 800d890:	f014 fa40 	bl	8021d14 <lv_trigo_sin>
 800d894:	f8bd 4000 	ldrh.w	r4, [sp]
 800d898:	fb09 f000 	mul.w	r0, r9, r0
 800d89c:	1b63      	subs	r3, r4, r5
 800d89e:	eb03 33e0 	add.w	r3, r3, r0, asr #15
 800d8a2:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout + extra_area;
 800d8a4:	44b3      	add	fp, r6
 800d8a6:	44ab      	add	fp, r5
 800d8a8:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800d8ac:	fa0f f08a 	sxth.w	r0, sl
 800d8b0:	f014 fa30 	bl	8021d14 <lv_trigo_sin>
 800d8b4:	fb09 f900 	mul.w	r9, r9, r0
 800d8b8:	4425      	add	r5, r4
 800d8ba:	eb05 35e9 	add.w	r5, r5, r9, asr #15
 800d8be:	80fd      	strh	r5, [r7, #6]
 800d8c0:	e614      	b.n	800d4ec <lv_draw_arc_get_area+0xa8>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 800d8c2:	4554      	cmp	r4, sl
 800d8c4:	f67f ae32 	bls.w	800d52c <lv_draw_arc_get_area+0xe8>
    if(start_quarter == 4) start_quarter = 3;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	e5fa      	b.n	800d4c4 <lv_draw_arc_get_area+0x80>
 800d8ce:	bf00      	nop

0800d8d0 <show_error>:
    return LV_RES_OK;
}


static void show_error(lv_draw_ctx_t * draw_ctx, const lv_area_t * coords, const char * msg)
{
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	b098      	sub	sp, #96	; 0x60
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	460d      	mov	r5, r1
 800d8d8:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
 800d8da:	a80a      	add	r0, sp, #40	; 0x28
 800d8dc:	f001 ffa6 	bl	800f82c <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = lv_color_white();
 800d8e0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800d8e4:	f043 031f 	orr.w	r3, r3, #31
 800d8e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800d8ec:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d8f0:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800d8f4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800d8f8:	23ff      	movs	r3, #255	; 0xff
 800d8fa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 800d8fe:	462a      	mov	r2, r5
 800d900:	a90a      	add	r1, sp, #40	; 0x28
 800d902:	4620      	mov	r0, r4
 800d904:	f001 ffee 	bl	800f8e4 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 800d908:	a802      	add	r0, sp, #8
 800d90a:	f000 f9d3 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 800d90e:	2300      	movs	r3, #0
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	4633      	mov	r3, r6
 800d914:	462a      	mov	r2, r5
 800d916:	a902      	add	r1, sp, #8
 800d918:	4620      	mov	r0, r4
 800d91a:	f000 f9ff 	bl	800dd1c <lv_draw_label>
}
 800d91e:	b018      	add	sp, #96	; 0x60
 800d920:	bd70      	pop	{r4, r5, r6, pc}

0800d922 <lv_draw_img_dsc_init>:
{
 800d922:	b510      	push	{r4, lr}
 800d924:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 800d926:	2118      	movs	r1, #24
 800d928:	f014 fd80 	bl	802242c <lv_memset_00>
    dsc->recolor = lv_color_black();
 800d92c:	7a23      	ldrb	r3, [r4, #8]
 800d92e:	f36f 0304 	bfc	r3, #0, #5
 800d932:	7223      	strb	r3, [r4, #8]
 800d934:	8923      	ldrh	r3, [r4, #8]
 800d936:	f36f 134a 	bfc	r3, #5, #6
 800d93a:	8123      	strh	r3, [r4, #8]
 800d93c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800d940:	f36f 03c7 	bfc	r3, #3, #5
 800d944:	7263      	strb	r3, [r4, #9]
    dsc->opa = LV_OPA_COVER;
 800d946:	23ff      	movs	r3, #255	; 0xff
 800d948:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 800d94a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d94e:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 800d950:	7d23      	ldrb	r3, [r4, #20]
 800d952:	f043 0301 	orr.w	r3, r3, #1
 800d956:	7523      	strb	r3, [r4, #20]
}
 800d958:	bd10      	pop	{r4, pc}

0800d95a <lv_img_cf_get_px_size>:
    switch(cf) {
 800d95a:	3804      	subs	r0, #4
 800d95c:	280a      	cmp	r0, #10
 800d95e:	d813      	bhi.n	800d988 <lv_img_cf_get_px_size+0x2e>
 800d960:	e8df f000 	tbb	[pc, r0]
 800d964:	0a060806 	.word	0x0a060806
 800d968:	0a100e0c 	.word	0x0a100e0c
 800d96c:	0e0c      	.short	0x0e0c
 800d96e:	10          	.byte	0x10
 800d96f:	00          	.byte	0x00
 800d970:	2010      	movs	r0, #16
 800d972:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 800d974:	2018      	movs	r0, #24
            break;
 800d976:	4770      	bx	lr
            px_size = 1;
 800d978:	2001      	movs	r0, #1
            break;
 800d97a:	4770      	bx	lr
            px_size = 2;
 800d97c:	2002      	movs	r0, #2
            break;
 800d97e:	4770      	bx	lr
            px_size = 4;
 800d980:	2004      	movs	r0, #4
            break;
 800d982:	4770      	bx	lr
            px_size = 8;
 800d984:	2008      	movs	r0, #8
            break;
 800d986:	4770      	bx	lr
            px_size = 0;
 800d988:	2000      	movs	r0, #0
}
 800d98a:	4770      	bx	lr

0800d98c <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 800d98c:	2803      	cmp	r0, #3
 800d98e:	d004      	beq.n	800d99a <lv_img_cf_is_chroma_keyed+0xe>
 800d990:	2806      	cmp	r0, #6
 800d992:	bf14      	ite	ne
 800d994:	2000      	movne	r0, #0
 800d996:	2001      	moveq	r0, #1
 800d998:	4770      	bx	lr
            is_chroma_keyed = true;
 800d99a:	2001      	movs	r0, #1
}
 800d99c:	4770      	bx	lr

0800d99e <lv_img_cf_has_alpha>:
    switch(cf) {
 800d99e:	280e      	cmp	r0, #14
 800d9a0:	d809      	bhi.n	800d9b6 <lv_img_cf_has_alpha+0x18>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	fa03 f000 	lsl.w	r0, r3, r0
 800d9a8:	f647 73a4 	movw	r3, #32676	; 0x7fa4
 800d9ac:	4218      	tst	r0, r3
 800d9ae:	bf14      	ite	ne
 800d9b0:	2001      	movne	r0, #1
 800d9b2:	2000      	moveq	r0, #0
 800d9b4:	4770      	bx	lr
{
 800d9b6:	2000      	movs	r0, #0
}
 800d9b8:	4770      	bx	lr

0800d9ba <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 800d9ba:	b158      	cbz	r0, 800d9d4 <lv_img_src_get_type+0x1a>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 800d9bc:	7802      	ldrb	r2, [r0, #0]
 800d9be:	f1a2 0320 	sub.w	r3, r2, #32
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	2b5f      	cmp	r3, #95	; 0x5f
 800d9c6:	d907      	bls.n	800d9d8 <lv_img_src_get_type+0x1e>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 800d9c8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800d9cc:	bf14      	ite	ne
 800d9ce:	2002      	movne	r0, #2
 800d9d0:	2000      	moveq	r0, #0
 800d9d2:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 800d9d4:	2003      	movs	r0, #3
 800d9d6:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 800d9d8:	2001      	movs	r0, #1
}
 800d9da:	4770      	bx	lr

0800d9dc <lv_draw_img_decoded>:
{
 800d9dc:	b530      	push	{r4, r5, lr}
 800d9de:	b083      	sub	sp, #12
    if(draw_ctx->draw_img_decoded == NULL) return;
 800d9e0:	6984      	ldr	r4, [r0, #24]
 800d9e2:	b11c      	cbz	r4, 800d9ec <lv_draw_img_decoded+0x10>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 800d9e4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800d9e8:	9500      	str	r5, [sp, #0]
 800d9ea:	47a0      	blx	r4
}
 800d9ec:	b003      	add	sp, #12
 800d9ee:	bd30      	pop	{r4, r5, pc}

0800d9f0 <lv_draw_img>:
{
 800d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	b08d      	sub	sp, #52	; 0x34
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	4616      	mov	r6, r2
    if(src == NULL) {
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d036      	beq.n	800da6c <lv_draw_img+0x7c>
 800d9fe:	460c      	mov	r4, r1
 800da00:	461f      	mov	r7, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 800da02:	7acb      	ldrb	r3, [r1, #11]
 800da04:	2b02      	cmp	r3, #2
 800da06:	f240 812a 	bls.w	800dc5e <lv_draw_img+0x26e>
    if(draw_ctx->draw_img) {
 800da0a:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800da0e:	f1b8 0f00 	cmp.w	r8, #0
 800da12:	d008      	beq.n	800da26 <lv_draw_img+0x36>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 800da14:	463b      	mov	r3, r7
 800da16:	47c0      	blx	r8
    if(res != LV_RES_OK) {
 800da18:	2801      	cmp	r0, #1
 800da1a:	f000 8120 	beq.w	800dc5e <lv_draw_img+0x26e>
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 800da1e:	7ae3      	ldrb	r3, [r4, #11]
 800da20:	2b02      	cmp	r3, #2
 800da22:	f240 811c 	bls.w	800dc5e <lv_draw_img+0x26e>
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 800da26:	6922      	ldr	r2, [r4, #16]
 800da28:	8921      	ldrh	r1, [r4, #8]
 800da2a:	4638      	mov	r0, r7
 800da2c:	f002 f806 	bl	800fa3c <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 800da30:	4607      	mov	r7, r0
 800da32:	2800      	cmp	r0, #0
 800da34:	f000 810e 	beq.w	800dc54 <lv_draw_img+0x264>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800da38:	f890 9014 	ldrb.w	r9, [r0, #20]
 800da3c:	f009 091f 	and.w	r9, r9, #31
 800da40:	4648      	mov	r0, r9
 800da42:	f7ff ffa3 	bl	800d98c <lv_img_cf_is_chroma_keyed>
 800da46:	2800      	cmp	r0, #0
 800da48:	d163      	bne.n	800db12 <lv_draw_img+0x122>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 800da4a:	46c8      	mov	r8, r9
 800da4c:	f1b9 0f0e 	cmp.w	r9, #14
 800da50:	d011      	beq.n	800da76 <lv_draw_img+0x86>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 800da52:	f1b9 0f14 	cmp.w	r9, #20
 800da56:	d05e      	beq.n	800db16 <lv_draw_img+0x126>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800da58:	4648      	mov	r0, r9
 800da5a:	f7ff ffa0 	bl	800d99e <lv_img_cf_has_alpha>
    else cf = LV_IMG_CF_TRUE_COLOR;
 800da5e:	2800      	cmp	r0, #0
 800da60:	bf14      	ite	ne
 800da62:	f04f 0805 	movne.w	r8, #5
 800da66:	f04f 0804 	moveq.w	r8, #4
 800da6a:	e054      	b.n	800db16 <lv_draw_img+0x126>
        show_error(draw_ctx, coords, "No\ndata");
 800da6c:	4a80      	ldr	r2, [pc, #512]	; (800dc70 <lv_draw_img+0x280>)
 800da6e:	4631      	mov	r1, r6
 800da70:	f7ff ff2e 	bl	800d8d0 <show_error>
        return;
 800da74:	e0f3      	b.n	800dc5e <lv_draw_img+0x26e>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800da7c:	d04b      	beq.n	800db16 <lv_draw_img+0x126>
            cdsc->dec_dsc.img_data = NULL;
 800da7e:	2300      	movs	r3, #0
 800da80:	61bb      	str	r3, [r7, #24]
    if(cdsc->dec_dsc.error_msg != NULL) {
 800da82:	6a3a      	ldr	r2, [r7, #32]
 800da84:	2a00      	cmp	r2, #0
 800da86:	d148      	bne.n	800db1a <lv_draw_img+0x12a>
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 800da88:	f04f 0805 	mov.w	r8, #5
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 800da8c:	4632      	mov	r2, r6
 800da8e:	68a9      	ldr	r1, [r5, #8]
 800da90:	a806      	add	r0, sp, #24
 800da92:	f013 fb36 	bl	8021102 <_lv_area_intersect>
        if(union_ok == false) {
 800da96:	2800      	cmp	r0, #0
 800da98:	f000 80a0 	beq.w	800dbdc <lv_draw_img+0x1ec>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800da9c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800daa0:	3301      	adds	r3, #1
 800daa2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800daa6:	1a9b      	subs	r3, r3, r2
 800daa8:	b21b      	sxth	r3, r3
 800daaa:	9302      	str	r3, [sp, #8]
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 800daac:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dab0:	f014 fa8e 	bl	8021fd0 <lv_mem_buf_get>
 800dab4:	9004      	str	r0, [sp, #16]
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800dab6:	f8d5 b008 	ldr.w	fp, [r5, #8]
    dest->x1 = src->x1;
 800daba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800dabe:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 800dac2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800dac6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 800daca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800dace:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 800dad2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800dad6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_area_set_height(&line, 1);
 800dada:	2101      	movs	r1, #1
 800dadc:	a808      	add	r0, sp, #32
 800dade:	f013 fadf 	bl	80210a0 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 800dae2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800dae6:	f9b6 1000 	ldrsh.w	r1, [r6]
        int32_t y = mask_com.y1 - coords->y1;
 800daea:	f9bd 901a 	ldrsh.w	r9, [sp, #26]
 800daee:	f9b6 a002 	ldrsh.w	sl, [r6, #2]
 800daf2:	eba9 0a0a 	sub.w	sl, r9, sl
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800daf6:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 800dafa:	454a      	cmp	r2, r9
 800dafc:	f2c0 80b2 	blt.w	800dc64 <lv_draw_img+0x274>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800db00:	1a5b      	subs	r3, r3, r1
 800db02:	b21b      	sxth	r3, r3
 800db04:	9303      	str	r3, [sp, #12]
 800db06:	4623      	mov	r3, r4
 800db08:	4644      	mov	r4, r8
 800db0a:	9605      	str	r6, [sp, #20]
 800db0c:	9e04      	ldr	r6, [sp, #16]
 800db0e:	4698      	mov	r8, r3
 800db10:	e083      	b.n	800dc1a <lv_draw_img+0x22a>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 800db12:	f04f 0806 	mov.w	r8, #6
    if(cdsc->dec_dsc.error_msg != NULL) {
 800db16:	6a3a      	ldr	r2, [r7, #32]
 800db18:	b13a      	cbz	r2, 800db2a <lv_draw_img+0x13a>
        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 800db1a:	4631      	mov	r1, r6
 800db1c:	4628      	mov	r0, r5
 800db1e:	f7ff fed7 	bl	800d8d0 <show_error>

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 800db22:	4638      	mov	r0, r7
 800db24:	f002 fba5 	bl	8010272 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 800db28:	e099      	b.n	800dc5e <lv_draw_img+0x26e>
    else if(cdsc->dec_dsc.img_data) {
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d0ad      	beq.n	800da8c <lv_draw_img+0x9c>
    dest->x1 = src->x1;
 800db30:	f9b6 0000 	ldrsh.w	r0, [r6]
 800db34:	f8ad 0020 	strh.w	r0, [sp, #32]
    dest->y1 = src->y1;
 800db38:	f9b6 e002 	ldrsh.w	lr, [r6, #2]
 800db3c:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
    dest->x2 = src->x2;
 800db40:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 800db44:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    dest->y2 = src->y2;
 800db48:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 800db4c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800db56:	d115      	bne.n	800db84 <lv_draw_img+0x194>
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 800db58:	aa08      	add	r2, sp, #32
 800db5a:	68a9      	ldr	r1, [r5, #8]
 800db5c:	a80a      	add	r0, sp, #40	; 0x28
 800db5e:	f013 fad0 	bl	8021102 <_lv_area_intersect>
        if(union_ok == false) {
 800db62:	2800      	cmp	r0, #0
 800db64:	d036      	beq.n	800dbd4 <lv_draw_img+0x1e4>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800db66:	f8d5 9008 	ldr.w	r9, [r5, #8]
        draw_ctx->clip_area = &clip_com;
 800db6a:	ab0a      	add	r3, sp, #40	; 0x28
 800db6c:	60ab      	str	r3, [r5, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	f8cd 8000 	str.w	r8, [sp]
 800db74:	4632      	mov	r2, r6
 800db76:	4621      	mov	r1, r4
 800db78:	4628      	mov	r0, r5
 800db7a:	f7ff ff2f 	bl	800d9dc <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 800db7e:	f8c5 9008 	str.w	r9, [r5, #8]
 800db82:	e7ce      	b.n	800db22 <lv_draw_img+0x132>
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 800db84:	46a4      	mov	ip, r4
 800db86:	f93c 3b04 	ldrsh.w	r3, [ip], #4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800db8a:	3201      	adds	r2, #1
 800db8c:	eba2 020e 	sub.w	r2, r2, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800db90:	3101      	adds	r1, #1
 800db92:	1a09      	subs	r1, r1, r0
 800db94:	f8cd c004 	str.w	ip, [sp, #4]
 800db98:	8860      	ldrh	r0, [r4, #2]
 800db9a:	9000      	str	r0, [sp, #0]
 800db9c:	b212      	sxth	r2, r2
 800db9e:	b209      	sxth	r1, r1
 800dba0:	a808      	add	r0, sp, #32
 800dba2:	f001 fecf 	bl	800f944 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 800dba6:	8832      	ldrh	r2, [r6, #0]
 800dba8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800dbac:	4413      	add	r3, r2
 800dbae:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 800dbb2:	8873      	ldrh	r3, [r6, #2]
 800dbb4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800dbb8:	4419      	add	r1, r3
 800dbba:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
 800dbbe:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800dbc2:	440a      	add	r2, r1
 800dbc4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
 800dbc8:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800dbcc:	4413      	add	r3, r2
 800dbce:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800dbd2:	e7c1      	b.n	800db58 <lv_draw_img+0x168>
    lv_img_decoder_close(&cache->dec_dsc);
 800dbd4:	4638      	mov	r0, r7
 800dbd6:	f002 fb4c 	bl	8010272 <lv_img_decoder_close>
            return LV_RES_OK;
 800dbda:	e040      	b.n	800dc5e <lv_draw_img+0x26e>
    lv_img_decoder_close(&cache->dec_dsc);
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f002 fb48 	bl	8010272 <lv_img_decoder_close>
    if(res != LV_RES_OK) {
 800dbe2:	e03c      	b.n	800dc5e <lv_draw_img+0x26e>
            draw_ctx->clip_area = &mask_line;
 800dbe4:	ab0a      	add	r3, sp, #40	; 0x28
 800dbe6:	60ab      	str	r3, [r5, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 800dbe8:	9400      	str	r4, [sp, #0]
 800dbea:	4633      	mov	r3, r6
 800dbec:	aa08      	add	r2, sp, #32
 800dbee:	4641      	mov	r1, r8
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	f7ff fef3 	bl	800d9dc <lv_draw_img_decoded>
            line.y1++;
 800dbf6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
 800dc00:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800dc04:	3301      	adds	r3, #1
 800dc06:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
 800dc0a:	f10a 0a01 	add.w	sl, sl, #1
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 800dc0e:	f109 0901 	add.w	r9, r9, #1
 800dc12:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800dc16:	4599      	cmp	r9, r3
 800dc18:	dc24      	bgt.n	800dc64 <lv_draw_img+0x274>
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 800dc1a:	aa08      	add	r2, sp, #32
 800dc1c:	4659      	mov	r1, fp
 800dc1e:	a80a      	add	r0, sp, #40	; 0x28
 800dc20:	f013 fa6f 	bl	8021102 <_lv_area_intersect>
            if(union_ok == false) continue;
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d0f2      	beq.n	800dc0e <lv_draw_img+0x21e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 800dc28:	9600      	str	r6, [sp, #0]
 800dc2a:	9b02      	ldr	r3, [sp, #8]
 800dc2c:	fa0f f28a 	sxth.w	r2, sl
 800dc30:	9903      	ldr	r1, [sp, #12]
 800dc32:	4638      	mov	r0, r7
 800dc34:	f002 fb0a 	bl	801024c <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 800dc38:	2801      	cmp	r0, #1
 800dc3a:	d0d3      	beq.n	800dbe4 <lv_draw_img+0x1f4>
                lv_img_decoder_close(&cdsc->dec_dsc);
 800dc3c:	9e05      	ldr	r6, [sp, #20]
 800dc3e:	4638      	mov	r0, r7
 800dc40:	f002 fb17 	bl	8010272 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 800dc44:	9804      	ldr	r0, [sp, #16]
 800dc46:	f014 fa25 	bl	8022094 <lv_mem_buf_release>
    lv_img_decoder_close(&cache->dec_dsc);
 800dc4a:	4638      	mov	r0, r7
 800dc4c:	f002 fb11 	bl	8010272 <lv_img_decoder_close>
                draw_ctx->clip_area = clip_area_ori;
 800dc50:	f8c5 b008 	str.w	fp, [r5, #8]
        show_error(draw_ctx, coords, "No\ndata");
 800dc54:	4a06      	ldr	r2, [pc, #24]	; (800dc70 <lv_draw_img+0x280>)
 800dc56:	4631      	mov	r1, r6
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f7ff fe39 	bl	800d8d0 <show_error>
}
 800dc5e:	b00d      	add	sp, #52	; 0x34
 800dc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        draw_ctx->clip_area = clip_area_ori;
 800dc64:	f8c5 b008 	str.w	fp, [r5, #8]
        lv_mem_buf_release(buf);
 800dc68:	9804      	ldr	r0, [sp, #16]
 800dc6a:	f014 fa13 	bl	8022094 <lv_mem_buf_release>
 800dc6e:	e758      	b.n	800db22 <lv_draw_img+0x132>
 800dc70:	0802d674 	.word	0x0802d674

0800dc74 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800dc74:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 800dc76:	3830      	subs	r0, #48	; 0x30
 800dc78:	b2c0      	uxtb	r0, r0
 800dc7a:	2809      	cmp	r0, #9
 800dc7c:	d918      	bls.n	800dcb0 <hex_char_to_num+0x3c>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 800dc7e:	2b60      	cmp	r3, #96	; 0x60
 800dc80:	bf84      	itt	hi
 800dc82:	3b20      	subhi	r3, #32
 800dc84:	b2db      	uxtbhi	r3, r3

        switch(hex) {
 800dc86:	3b41      	subs	r3, #65	; 0x41
 800dc88:	2b05      	cmp	r3, #5
 800dc8a:	d80e      	bhi.n	800dcaa <hex_char_to_num+0x36>
 800dc8c:	e8df f003 	tbb	[pc, r3]
 800dc90:	0705030f 	.word	0x0705030f
 800dc94:	0b09      	.short	0x0b09
 800dc96:	200b      	movs	r0, #11
 800dc98:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
 800dc9a:	200c      	movs	r0, #12
                break;
 800dc9c:	4770      	bx	lr
            case 'D':
                result = 13;
 800dc9e:	200d      	movs	r0, #13
                break;
 800dca0:	4770      	bx	lr
            case 'E':
                result = 14;
 800dca2:	200e      	movs	r0, #14
                break;
 800dca4:	4770      	bx	lr
            case 'F':
                result = 15;
 800dca6:	200f      	movs	r0, #15
                break;
 800dca8:	4770      	bx	lr
            default:
                result = 0;
 800dcaa:	2000      	movs	r0, #0
                break;
 800dcac:	4770      	bx	lr
                result = 10;
 800dcae:	200a      	movs	r0, #10
        }
    }

    return result;
}
 800dcb0:	4770      	bx	lr
	...

0800dcb4 <lv_draw_label_dsc_init>:
{
 800dcb4:	b510      	push	{r4, lr}
 800dcb6:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 800dcb8:	2120      	movs	r1, #32
 800dcba:	f014 fbb7 	bl	802242c <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 800dcbe:	23ff      	movs	r3, #255	; 0xff
 800dcc0:	76a3      	strb	r3, [r4, #26]
    dsc->color = lv_color_black();
 800dcc2:	7b23      	ldrb	r3, [r4, #12]
 800dcc4:	f36f 0304 	bfc	r3, #0, #5
 800dcc8:	7323      	strb	r3, [r4, #12]
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	f36f 134a 	bfc	r3, #5, #6
 800dcd0:	81a3      	strh	r3, [r4, #12]
 800dcd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800dcd6:	f36f 03c7 	bfc	r3, #3, #5
 800dcda:	7363      	strb	r3, [r4, #13]
    dsc->font = LV_FONT_DEFAULT;
 800dcdc:	4b0c      	ldr	r3, [pc, #48]	; (800dd10 <lv_draw_label_dsc_init+0x5c>)
 800dcde:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 800dce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dce4:	6063      	str	r3, [r4, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 800dce6:	60a3      	str	r3, [r4, #8]
    dsc->sel_color = lv_color_black();
 800dce8:	7ba3      	ldrb	r3, [r4, #14]
 800dcea:	f36f 0304 	bfc	r3, #0, #5
 800dcee:	73a3      	strb	r3, [r4, #14]
 800dcf0:	89e3      	ldrh	r3, [r4, #14]
 800dcf2:	f36f 134a 	bfc	r3, #5, #6
 800dcf6:	81e3      	strh	r3, [r4, #14]
 800dcf8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800dcfc:	f36f 03c7 	bfc	r3, #3, #5
 800dd00:	73e3      	strb	r3, [r4, #15]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 800dd02:	2005      	movs	r0, #5
 800dd04:	f013 fd56 	bl	80217b4 <lv_palette_main>
 800dd08:	8220      	strh	r0, [r4, #16]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	76e3      	strb	r3, [r4, #27]
}
 800dd0e:	bd10      	pop	{r4, pc}
 800dd10:	08031440 	.word	0x08031440

0800dd14 <lv_draw_letter>:
{
 800dd14:	b510      	push	{r4, lr}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 800dd16:	6a04      	ldr	r4, [r0, #32]
 800dd18:	47a0      	blx	r4
}
 800dd1a:	bd10      	pop	{r4, pc}

0800dd1c <lv_draw_label>:
{
 800dd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd20:	b0b7      	sub	sp, #220	; 0xdc
 800dd22:	920c      	str	r2, [sp, #48]	; 0x30
 800dd24:	469c      	mov	ip, r3
 800dd26:	9306      	str	r3, [sp, #24]
 800dd28:	9e40      	ldr	r6, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
 800dd2a:	7e8b      	ldrb	r3, [r1, #26]
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d914      	bls.n	800dd5a <lv_draw_label+0x3e>
 800dd30:	4682      	mov	sl, r0
 800dd32:	460c      	mov	r4, r1
 800dd34:	4696      	mov	lr, r2
    if(dsc->font == NULL) {
 800dd36:	6809      	ldr	r1, [r1, #0]
 800dd38:	9104      	str	r1, [sp, #16]
 800dd3a:	b171      	cbz	r1, 800dd5a <lv_draw_label+0x3e>
    if(draw_ctx->draw_letter == NULL) {
 800dd3c:	6a03      	ldr	r3, [r0, #32]
 800dd3e:	b163      	cbz	r3, 800dd5a <lv_draw_label+0x3e>
    lv_draw_label_dsc_t dsc_mod = *dsc;
 800dd40:	ad2e      	add	r5, sp, #184	; 0xb8
 800dd42:	4627      	mov	r7, r4
 800dd44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dd46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd48:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800dd4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if(txt == NULL || txt[0] == '\0')
 800dd50:	4663      	mov	r3, ip
 800dd52:	b113      	cbz	r3, 800dd5a <lv_draw_label+0x3e>
 800dd54:	f89c 3000 	ldrb.w	r3, [ip]
 800dd58:	b913      	cbnz	r3, 800dd60 <lv_draw_label+0x44>
}
 800dd5a:	b037      	add	sp, #220	; 0xdc
 800dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 800dd60:	f8da 2008 	ldr.w	r2, [sl, #8]
 800dd64:	4675      	mov	r5, lr
 800dd66:	4671      	mov	r1, lr
 800dd68:	a82c      	add	r0, sp, #176	; 0xb0
 800dd6a:	f013 f9ca 	bl	8021102 <_lv_area_intersect>
    if(!clip_ok) return;
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	d0f3      	beq.n	800dd5a <lv_draw_label+0x3e>
    lv_text_align_t align = dsc->align;
 800dd72:	7f23      	ldrb	r3, [r4, #28]
 800dd74:	930f      	str	r3, [sp, #60]	; 0x3c
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 800dd76:	7f63      	ldrb	r3, [r4, #29]
 800dd78:	f013 0f02 	tst.w	r3, #2
 800dd7c:	d123      	bne.n	800ddc6 <lv_draw_label+0xaa>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dd7e:	88ab      	ldrh	r3, [r5, #4]
 800dd80:	3301      	adds	r3, #1
 800dd82:	882a      	ldrh	r2, [r5, #0]
 800dd84:	1a9b      	subs	r3, r3, r2
        w = lv_area_get_width(coords);
 800dd86:	b21b      	sxth	r3, r3
    int32_t line_height_font = lv_font_get_line_height(font);
 800dd88:	9a04      	ldr	r2, [sp, #16]
 800dd8a:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
 800dd8e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800dd92:	19d5      	adds	r5, r2, r7
 800dd94:	950d      	str	r5, [sp, #52]	; 0x34
    pos.x = coords->x1;
 800dd96:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd98:	880a      	ldrh	r2, [r1, #0]
 800dd9a:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
    pos.y = coords->y1;
 800dd9e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    x_ofs = dsc->ofs_x;
 800dda2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 800dda6:	9210      	str	r2, [sp, #64]	; 0x40
    y_ofs = dsc->ofs_y;
 800dda8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
    pos.y += y_ofs;
 800ddac:	1842      	adds	r2, r0, r1
 800ddae:	b292      	uxth	r2, r2
 800ddb0:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 800ddb4:	2e00      	cmp	r6, #0
 800ddb6:	d045      	beq.n	800de44 <lv_draw_label+0x128>
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	d146      	bne.n	800de4a <lv_draw_label+0x12e>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	db13      	blt.n	800dde8 <lv_draw_label+0xcc>
    uint32_t line_start     = 0;
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	9209      	str	r2, [sp, #36]	; 0x24
 800ddc4:	e028      	b.n	800de18 <lv_draw_label+0xfc>
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 800ddc6:	9302      	str	r3, [sp, #8]
 800ddc8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800ddcc:	9301      	str	r3, [sp, #4]
 800ddce:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ddd8:	6822      	ldr	r2, [r4, #0]
 800ddda:	9906      	ldr	r1, [sp, #24]
 800dddc:	a817      	add	r0, sp, #92	; 0x5c
 800ddde:	f016 fbe0 	bl	80245a2 <lv_txt_get_size>
        w = p.x;
 800dde2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 800dde6:	e7cf      	b.n	800dd88 <lv_draw_label+0x6c>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 800dde8:	68b1      	ldr	r1, [r6, #8]
 800ddea:	1a09      	subs	r1, r1, r0
 800ddec:	2900      	cmp	r1, #0
 800ddee:	bfb8      	it	lt
 800ddf0:	4249      	neglt	r1, r1
 800ddf2:	f5c5 7000 	rsb	r0, r5, #512	; 0x200
 800ddf6:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 800ddfa:	dd05      	ble.n	800de08 <lv_draw_label+0xec>
            hint->line_start = -1;
 800ddfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de00:	6032      	str	r2, [r6, #0]
    uint32_t line_start     = 0;
 800de02:	2200      	movs	r2, #0
 800de04:	9209      	str	r2, [sp, #36]	; 0x24
 800de06:	e007      	b.n	800de18 <lv_draw_label+0xfc>
        last_line_start = hint->line_start;
 800de08:	6831      	ldr	r1, [r6, #0]
    if(hint && last_line_start >= 0) {
 800de0a:	2900      	cmp	r1, #0
 800de0c:	db20      	blt.n	800de50 <lv_draw_label+0x134>
        line_start = last_line_start;
 800de0e:	9109      	str	r1, [sp, #36]	; 0x24
        pos.y += hint->y;
 800de10:	6871      	ldr	r1, [r6, #4]
 800de12:	440a      	add	r2, r1
 800de14:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800de18:	b21a      	sxth	r2, r3
 800de1a:	920e      	str	r2, [sp, #56]	; 0x38
 800de1c:	7f63      	ldrb	r3, [r4, #29]
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	2300      	movs	r3, #0
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	4613      	mov	r3, r2
 800de26:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800de2a:	9904      	ldr	r1, [sp, #16]
 800de2c:	9806      	ldr	r0, [sp, #24]
 800de2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de30:	4428      	add	r0, r5
 800de32:	f016 f991 	bl	8024158 <_lv_txt_get_next_line>
 800de36:	1943      	adds	r3, r0, r5
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800de38:	f04f 0800 	mov.w	r8, #0
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800de3c:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800e07c <lv_draw_label+0x360>
 800de40:	461d      	mov	r5, r3
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800de42:	e00f      	b.n	800de64 <lv_draw_label+0x148>
    uint32_t line_start     = 0;
 800de44:	2200      	movs	r2, #0
 800de46:	9209      	str	r2, [sp, #36]	; 0x24
 800de48:	e7e6      	b.n	800de18 <lv_draw_label+0xfc>
 800de4a:	2200      	movs	r2, #0
 800de4c:	9209      	str	r2, [sp, #36]	; 0x24
 800de4e:	e7e3      	b.n	800de18 <lv_draw_label+0xfc>
 800de50:	2200      	movs	r2, #0
 800de52:	9209      	str	r2, [sp, #36]	; 0x24
 800de54:	e7e0      	b.n	800de18 <lv_draw_label+0xfc>
        if(txt[line_start] == '\0') return;
 800de56:	9509      	str	r5, [sp, #36]	; 0x24
 800de58:	f89b 3000 	ldrb.w	r3, [fp]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f43f af7c 	beq.w	800dd5a <lv_draw_label+0x3e>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800de62:	4605      	mov	r5, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 800de64:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 800de68:	443b      	add	r3, r7
 800de6a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800de6e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800de72:	4293      	cmp	r3, r2
 800de74:	da26      	bge.n	800dec4 <lv_draw_label+0x1a8>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800de76:	9b06      	ldr	r3, [sp, #24]
 800de78:	eb03 0b05 	add.w	fp, r3, r5
 800de7c:	7f63      	ldrb	r3, [r4, #29]
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	f8cd 8000 	str.w	r8, [sp]
 800de84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de86:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800de8a:	9904      	ldr	r1, [sp, #16]
 800de8c:	4658      	mov	r0, fp
 800de8e:	f016 f963 	bl	8024158 <_lv_txt_get_next_line>
 800de92:	4428      	add	r0, r5
        pos.y += line_height;
 800de94:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800de98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de9a:	4413      	add	r3, r2
 800de9c:	b21b      	sxth	r3, r3
 800de9e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 800dea2:	2e00      	cmp	r6, #0
 800dea4:	d0d7      	beq.n	800de56 <lv_draw_label+0x13a>
 800dea6:	454b      	cmp	r3, r9
 800dea8:	dbd5      	blt.n	800de56 <lv_draw_label+0x13a>
 800deaa:	6832      	ldr	r2, [r6, #0]
 800deac:	2a00      	cmp	r2, #0
 800deae:	dad2      	bge.n	800de56 <lv_draw_label+0x13a>
            hint->line_start = line_start;
 800deb0:	6035      	str	r5, [r6, #0]
            hint->y          = pos.y - coords->y1;
 800deb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800deb4:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800deb8:	1a9b      	subs	r3, r3, r2
 800deba:	6073      	str	r3, [r6, #4]
            hint->coord_y    = coords->y1;
 800debc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800dec0:	60b3      	str	r3, [r6, #8]
 800dec2:	e7c8      	b.n	800de56 <lv_draw_label+0x13a>
    if(align == LV_TEXT_ALIGN_CENTER) {
 800dec4:	950b      	str	r5, [sp, #44]	; 0x2c
 800dec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d01f      	beq.n	800df0c <lv_draw_label+0x1f0>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 800decc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dece:	2b03      	cmp	r3, #3
 800ded0:	d037      	beq.n	800df42 <lv_draw_label+0x226>
    uint32_t sel_start = dsc->sel_start;
 800ded2:	f8d4 8004 	ldr.w	r8, [r4, #4]
    uint32_t sel_end = dsc->sel_end;
 800ded6:	f8d4 b008 	ldr.w	fp, [r4, #8]
    if(sel_start > sel_end) {
 800deda:	45d8      	cmp	r8, fp
 800dedc:	d902      	bls.n	800dee4 <lv_draw_label+0x1c8>
 800dede:	4643      	mov	r3, r8
        sel_start = sel_end;
 800dee0:	46d8      	mov	r8, fp
        sel_end = tmp;
 800dee2:	469b      	mov	fp, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 800dee4:	7fa3      	ldrb	r3, [r4, #30]
 800dee6:	f013 0f03 	tst.w	r3, #3
 800deea:	d143      	bne.n	800df74 <lv_draw_label+0x258>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800deec:	a819      	add	r0, sp, #100	; 0x64
 800deee:	f001 fc9d 	bl	800f82c <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 800def2:	8a23      	ldrh	r3, [r4, #16]
 800def4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    int32_t pos_x_start = pos.x;
 800def8:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800defc:	9312      	str	r3, [sp, #72]	; 0x48
    while(txt[line_start] != '\0') {
 800defe:	2600      	movs	r6, #0
 800df00:	960a      	str	r6, [sp, #40]	; 0x28
    uint32_t par_start = 0;
 800df02:	9611      	str	r6, [sp, #68]	; 0x44
 800df04:	46d9      	mov	r9, fp
 800df06:	f8cd a020 	str.w	sl, [sp, #32]
    while(txt[line_start] != '\0') {
 800df0a:	e150      	b.n	800e1ae <lv_draw_label+0x492>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800df0c:	7f63      	ldrb	r3, [r4, #29]
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800df14:	9a04      	ldr	r2, [sp, #16]
 800df16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df18:	1a29      	subs	r1, r5, r0
 800df1a:	9d06      	ldr	r5, [sp, #24]
 800df1c:	1828      	adds	r0, r5, r0
 800df1e:	f016 faef 	bl	8024500 <lv_txt_get_width>
 800df22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df24:	8893      	ldrh	r3, [r2, #4]
 800df26:	3301      	adds	r3, #1
 800df28:	8812      	ldrh	r2, [r2, #0]
 800df2a:	1a9b      	subs	r3, r3, r2
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800df2c:	b21b      	sxth	r3, r3
 800df2e:	1a1b      	subs	r3, r3, r0
 800df30:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800df34:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800df38:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800df3c:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800df40:	e7c7      	b.n	800ded2 <lv_draw_label+0x1b6>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800df42:	7f63      	ldrb	r3, [r4, #29]
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800df4a:	9a04      	ldr	r2, [sp, #16]
 800df4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df50:	1a09      	subs	r1, r1, r0
 800df52:	9d06      	ldr	r5, [sp, #24]
 800df54:	1828      	adds	r0, r5, r0
 800df56:	f016 fad3 	bl	8024500 <lv_txt_get_width>
 800df5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df5c:	8893      	ldrh	r3, [r2, #4]
 800df5e:	3301      	adds	r3, #1
 800df60:	8812      	ldrh	r2, [r2, #0]
 800df62:	1a9b      	subs	r3, r3, r2
        pos.x += lv_area_get_width(coords) - line_width;
 800df64:	b21b      	sxth	r3, r3
 800df66:	1a1b      	subs	r3, r3, r0
 800df68:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800df6c:	4413      	add	r3, r2
 800df6e:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800df72:	e7ae      	b.n	800ded2 <lv_draw_label+0x1b6>
        lv_draw_line_dsc_init(&line_dsc);
 800df74:	a828      	add	r0, sp, #160	; 0xa0
 800df76:	f000 fa06 	bl	800e386 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800df7a:	89a3      	ldrh	r3, [r4, #12]
 800df7c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 800df80:	9b04      	ldr	r3, [sp, #16]
 800df82:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800df86:	2b00      	cmp	r3, #0
 800df88:	bf08      	it	eq
 800df8a:	2301      	moveq	r3, #1
 800df8c:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
        line_dsc.opa = dsc->opa;
 800df90:	7ea3      	ldrb	r3, [r4, #26]
 800df92:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
        line_dsc.blend_mode = dsc->blend_mode;
 800df96:	7fa3      	ldrb	r3, [r4, #30]
 800df98:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800df9c:	f89d 20a9 	ldrb.w	r2, [sp, #169]	; 0xa9
 800dfa0:	f363 0201 	bfi	r2, r3, #0, #2
 800dfa4:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800dfa8:	e7a0      	b.n	800deec <lv_draw_label+0x1d0>
            uint32_t logical_char_pos = 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	9305      	str	r3, [sp, #20]
 800dfae:	e087      	b.n	800e0c0 <lv_draw_label+0x3a4>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	9305      	str	r3, [sp, #20]
 800dfb4:	e084      	b.n	800e0c0 <lv_draw_label+0x3a4>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 800dfb6:	f1ba 0f00 	cmp.w	sl, #0
 800dfba:	d009      	beq.n	800dfd0 <lv_draw_label+0x2b4>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 800dfbc:	f1ba 0f01 	cmp.w	sl, #1
 800dfc0:	f000 8183 	beq.w	800e2ca <lv_draw_label+0x5ae>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 800dfc4:	f1ba 0f02 	cmp.w	sl, #2
 800dfc8:	f000 80bb 	beq.w	800e142 <lv_draw_label+0x426>
            color = dsc->color;
 800dfcc:	89a6      	ldrh	r6, [r4, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800dfce:	e08f      	b.n	800e0f0 <lv_draw_label+0x3d4>
                        par_start = i;
 800dfd0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800dfd2:	9211      	str	r2, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
 800dfd4:	469a      	mov	sl, r3
                        continue;
 800dfd6:	e063      	b.n	800e0a0 <lv_draw_label+0x384>
                    if(letter == ' ') {
 800dfd8:	2a20      	cmp	r2, #32
 800dfda:	d161      	bne.n	800e0a0 <lv_draw_label+0x384>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 800dfdc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dfde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dfe0:	1a9b      	subs	r3, r3, r2
 800dfe2:	2b07      	cmp	r3, #7
 800dfe4:	d004      	beq.n	800dff0 <lv_draw_label+0x2d4>
                            recolor.full = dsc->color.full;
 800dfe6:	89a3      	ldrh	r3, [r4, #12]
 800dfe8:	930a      	str	r3, [sp, #40]	; 0x28
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800dfea:	f04f 0a02 	mov.w	sl, #2
 800dfee:	e057      	b.n	800e0a0 <lv_draw_label+0x384>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 800dff0:	9b07      	ldr	r3, [sp, #28]
 800dff2:	1898      	adds	r0, r3, r2
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800dff4:	1e43      	subs	r3, r0, #1
 800dff6:	3005      	adds	r0, #5
    uint8_t * d8 = (uint8_t *)dst;
 800dff8:	aa17      	add	r2, sp, #92	; 0x5c
        *d8 = *s8;
 800dffa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dffe:	f802 1b01 	strb.w	r1, [r2], #1
    while(len) {
 800e002:	4298      	cmp	r0, r3
 800e004:	d1f9      	bne.n	800dffa <lv_draw_label+0x2de>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 800e006:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800e00a:	f7ff fe33 	bl	800dc74 <hex_char_to_num>
 800e00e:	4605      	mov	r5, r0
 800e010:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
 800e014:	f7ff fe2e 	bl	800dc74 <hex_char_to_num>
 800e018:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 800e01c:	9305      	str	r3, [sp, #20]
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800e01e:	f89d 005e 	ldrb.w	r0, [sp, #94]	; 0x5e
 800e022:	f7ff fe27 	bl	800dc74 <hex_char_to_num>
 800e026:	4682      	mov	sl, r0
 800e028:	f89d 005f 	ldrb.w	r0, [sp, #95]	; 0x5f
 800e02c:	f7ff fe22 	bl	800dc74 <hex_char_to_num>
 800e030:	eb00 1a0a 	add.w	sl, r0, sl, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800e034:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
 800e038:	f7ff fe1c 	bl	800dc74 <hex_char_to_num>
 800e03c:	4605      	mov	r5, r0
 800e03e:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
 800e042:	f7ff fe17 	bl	800dc74 <hex_char_to_num>
 800e046:	eb00 1305 	add.w	r3, r0, r5, lsl #4
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800e04a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800e04e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e050:	f363 0204 	bfi	r2, r3, #0, #5
 800e054:	f3ca 0585 	ubfx	r5, sl, #2, #6
 800e058:	4613      	mov	r3, r2
 800e05a:	f365 134a 	bfi	r3, r5, #5, #6
 800e05e:	461a      	mov	r2, r3
 800e060:	9b05      	ldr	r3, [sp, #20]
 800e062:	f3c3 05c4 	ubfx	r5, r3, #3, #5
 800e066:	4613      	mov	r3, r2
 800e068:	f365 23cf 	bfi	r3, r5, #11, #5
 800e06c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800e070:	b29b      	uxth	r3, r3
 800e072:	930a      	str	r3, [sp, #40]	; 0x28
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 800e074:	f04f 0a02 	mov.w	sl, #2
 800e078:	e012      	b.n	800e0a0 <lv_draw_label+0x384>
 800e07a:	bf00      	nop
 800e07c:	fffffc00 	.word	0xfffffc00
            dsc_mod.color = color;
 800e080:	f8ad 60c4 	strh.w	r6, [sp, #196]	; 0xc4
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 800e084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e086:	aa2b      	add	r2, sp, #172	; 0xac
 800e088:	a92e      	add	r1, sp, #184	; 0xb8
 800e08a:	9808      	ldr	r0, [sp, #32]
 800e08c:	f7ff fe42 	bl	800dd14 <lv_draw_letter>
            if(letter_w > 0) {
 800e090:	b135      	cbz	r5, 800e0a0 <lv_draw_label+0x384>
                pos.x += letter_w + dsc->letter_space;
 800e092:	f8bd 00ac 	ldrh.w	r0, [sp, #172]	; 0xac
 800e096:	8aa3      	ldrh	r3, [r4, #20]
 800e098:	4418      	add	r0, r3
 800e09a:	4405      	add	r5, r0
 800e09c:	f8ad 50ac 	strh.w	r5, [sp, #172]	; 0xac
        while(i < line_end - line_start) {
 800e0a0:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e0a2:	4559      	cmp	r1, fp
 800e0a4:	d250      	bcs.n	800e148 <lv_draw_label+0x42c>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800e0a6:	45b8      	cmp	r8, r7
 800e0a8:	f43f af7f 	beq.w	800dfaa <lv_draw_label+0x28e>
 800e0ac:	45b9      	cmp	r9, r7
 800e0ae:	f43f af7f 	beq.w	800dfb0 <lv_draw_label+0x294>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 800e0b2:	4b88      	ldr	r3, [pc, #544]	; (800e2d4 <lv_draw_label+0x5b8>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0b8:	4411      	add	r1, r2
 800e0ba:	9806      	ldr	r0, [sp, #24]
 800e0bc:	4798      	blx	r3
 800e0be:	9005      	str	r0, [sp, #20]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 800e0c0:	ab27      	add	r3, sp, #156	; 0x9c
 800e0c2:	aa16      	add	r2, sp, #88	; 0x58
 800e0c4:	a915      	add	r1, sp, #84	; 0x54
 800e0c6:	9807      	ldr	r0, [sp, #28]
 800e0c8:	f016 fa04 	bl	80244d4 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 800e0cc:	7f63      	ldrb	r3, [r4, #29]
 800e0ce:	f013 0301 	ands.w	r3, r3, #1
 800e0d2:	d007      	beq.n	800e0e4 <lv_draw_label+0x3c8>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 800e0d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e0d6:	2a23      	cmp	r2, #35	; 0x23
 800e0d8:	f43f af6d 	beq.w	800dfb6 <lv_draw_label+0x29a>
                if(cmd_state == CMD_STATE_PAR) {
 800e0dc:	f1ba 0f01 	cmp.w	sl, #1
 800e0e0:	f43f af7a 	beq.w	800dfd8 <lv_draw_label+0x2bc>
            color = dsc->color;
 800e0e4:	89a6      	ldrh	r6, [r4, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800e0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0e8:	f1ba 0f02 	cmp.w	sl, #2
 800e0ec:	bf08      	it	eq
 800e0ee:	461e      	moveq	r6, r3
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 800e0f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e0f4:	9804      	ldr	r0, [sp, #16]
 800e0f6:	f012 fa72 	bl	80205de <lv_font_get_glyph_width>
 800e0fa:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800e0fc:	45b8      	cmp	r8, r7
 800e0fe:	d0bf      	beq.n	800e080 <lv_draw_label+0x364>
 800e100:	45b9      	cmp	r9, r7
 800e102:	d0bd      	beq.n	800e080 <lv_draw_label+0x364>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800e104:	9b05      	ldr	r3, [sp, #20]
 800e106:	4598      	cmp	r8, r3
 800e108:	d8ba      	bhi.n	800e080 <lv_draw_label+0x364>
 800e10a:	4599      	cmp	r9, r3
 800e10c:	d9b8      	bls.n	800e080 <lv_draw_label+0x364>
                    sel_coords.x1 = pos.x;
 800e10e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 800e112:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    sel_coords.y1 = pos.y;
 800e116:	f9bd 20ae 	ldrsh.w	r2, [sp, #174]	; 0xae
 800e11a:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 800e11e:	3b01      	subs	r3, #1
 800e120:	8aa1      	ldrh	r1, [r4, #20]
 800e122:	440b      	add	r3, r1
 800e124:	4403      	add	r3, r0
 800e126:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y2 = pos.y + line_height - 1;
 800e12a:	3a01      	subs	r2, #1
 800e12c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e12e:	441a      	add	r2, r3
 800e130:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 800e134:	aa17      	add	r2, sp, #92	; 0x5c
 800e136:	a919      	add	r1, sp, #100	; 0x64
 800e138:	9808      	ldr	r0, [sp, #32]
 800e13a:	f001 fbd3 	bl	800f8e4 <lv_draw_rect>
                    color = dsc->sel_color;
 800e13e:	89e6      	ldrh	r6, [r4, #14]
 800e140:	e79e      	b.n	800e080 <lv_draw_label+0x364>
                        cmd_state = CMD_STATE_WAIT;
 800e142:	f04f 0a00 	mov.w	sl, #0
 800e146:	e7ab      	b.n	800e0a0 <lv_draw_label+0x384>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 800e148:	7fa3      	ldrb	r3, [r4, #30]
 800e14a:	f013 0f02 	tst.w	r3, #2
 800e14e:	d149      	bne.n	800e1e4 <lv_draw_label+0x4c8>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800e150:	7fa3      	ldrb	r3, [r4, #30]
 800e152:	f013 0f01 	tst.w	r3, #1
 800e156:	d169      	bne.n	800e22c <lv_draw_label+0x510>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800e158:	9b06      	ldr	r3, [sp, #24]
 800e15a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e15c:	19dd      	adds	r5, r3, r7
 800e15e:	7f63      	ldrb	r3, [r4, #29]
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	2300      	movs	r3, #0
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e168:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800e16c:	9904      	ldr	r1, [sp, #16]
 800e16e:	4628      	mov	r0, r5
 800e170:	f015 fff2 	bl	8024158 <_lv_txt_get_next_line>
 800e174:	4407      	add	r7, r0
        pos.x = coords->x1;
 800e176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        if(align == LV_TEXT_ALIGN_CENTER) {
 800e17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e180:	2b02      	cmp	r3, #2
 800e182:	d073      	beq.n	800e26c <lv_draw_label+0x550>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 800e184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e186:	2b03      	cmp	r3, #3
 800e188:	f000 8089 	beq.w	800e29e <lv_draw_label+0x582>
        pos.y += line_height;
 800e18c:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800e190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e192:	4413      	add	r3, r2
 800e194:	b21b      	sxth	r3, r3
 800e196:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
        line_start = line_end;
 800e19a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e19c:	9209      	str	r2, [sp, #36]	; 0x24
        if(pos.y > draw_ctx->clip_area->y2) return;
 800e19e:	9a08      	ldr	r2, [sp, #32]
 800e1a0:	6892      	ldr	r2, [r2, #8]
 800e1a2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	f6ff add7 	blt.w	800dd5a <lv_draw_label+0x3e>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 800e1ac:	970b      	str	r7, [sp, #44]	; 0x2c
    while(txt[line_start] != '\0') {
 800e1ae:	9b06      	ldr	r3, [sp, #24]
 800e1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1b2:	1899      	adds	r1, r3, r2
 800e1b4:	9107      	str	r1, [sp, #28]
 800e1b6:	5c9b      	ldrb	r3, [r3, r2]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f43f adce 	beq.w	800dd5a <lv_draw_label+0x3e>
        pos.x += x_ofs;
 800e1be:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800e1c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1c4:	4413      	add	r3, r2
 800e1c6:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
        i         = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	9327      	str	r3, [sp, #156]	; 0x9c
        while(i < line_end - line_start) {
 800e1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1d2:	ebb3 0b02 	subs.w	fp, r3, r2
 800e1d6:	d0b7      	beq.n	800e148 <lv_draw_label+0x42c>
        cmd_state = CMD_STATE_WAIT;
 800e1d8:	f04f 0a00 	mov.w	sl, #0
        while(i < line_end - line_start) {
 800e1dc:	4651      	mov	r1, sl
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800e1de:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800e1e2:	e760      	b.n	800e0a6 <lv_draw_label+0x38a>
            p1.x = pos_x_start;
 800e1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1e6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 800e1ea:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 800e1ee:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 800e1f2:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800e1f6:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800e1fa:	6822      	ldr	r2, [r4, #0]
 800e1fc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800e200:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800e204:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800e208:	b21b      	sxth	r3, r3
 800e20a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.x = pos.x;
 800e20e:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800e212:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            p2.y = p1.y;
 800e216:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            line_dsc.color = color;
 800e21a:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800e21e:	ab17      	add	r3, sp, #92	; 0x5c
 800e220:	aa16      	add	r2, sp, #88	; 0x58
 800e222:	a928      	add	r1, sp, #160	; 0xa0
 800e224:	9808      	ldr	r0, [sp, #32]
 800e226:	f000 f8c5 	bl	800e3b4 <lv_draw_line>
 800e22a:	e791      	b.n	800e150 <lv_draw_label+0x434>
            p1.x = pos_x_start;
 800e22c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e22e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800e232:	6822      	ldr	r2, [r4, #0]
 800e234:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 800e238:	8911      	ldrh	r1, [r2, #8]
 800e23a:	440b      	add	r3, r1
 800e23c:	8952      	ldrh	r2, [r2, #10]
 800e23e:	1a9b      	subs	r3, r3, r2
 800e240:	9a04      	ldr	r2, [sp, #16]
 800e242:	f992 200d 	ldrsb.w	r2, [r2, #13]
 800e246:	1a9b      	subs	r3, r3, r2
 800e248:	b21b      	sxth	r3, r3
 800e24a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            p2.x = pos.x;
 800e24e:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800e252:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
            p2.y = p1.y;
 800e256:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            line_dsc.color = color;
 800e25a:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800e25e:	ab17      	add	r3, sp, #92	; 0x5c
 800e260:	aa16      	add	r2, sp, #88	; 0x58
 800e262:	a928      	add	r1, sp, #160	; 0xa0
 800e264:	9808      	ldr	r0, [sp, #32]
 800e266:	f000 f8a5 	bl	800e3b4 <lv_draw_line>
 800e26a:	e775      	b.n	800e158 <lv_draw_label+0x43c>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800e26c:	7f63      	ldrb	r3, [r4, #29]
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800e274:	9a04      	ldr	r2, [sp, #16]
 800e276:	4601      	mov	r1, r0
 800e278:	4628      	mov	r0, r5
 800e27a:	f016 f941 	bl	8024500 <lv_txt_get_width>
 800e27e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e280:	8893      	ldrh	r3, [r2, #4]
 800e282:	3301      	adds	r3, #1
 800e284:	8812      	ldrh	r2, [r2, #0]
 800e286:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 800e288:	b21b      	sxth	r3, r3
 800e28a:	1a18      	subs	r0, r3, r0
 800e28c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800e290:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 800e294:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800e298:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e29c:	e776      	b.n	800e18c <lv_draw_label+0x470>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800e29e:	7f63      	ldrb	r3, [r4, #29]
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800e2a6:	9a04      	ldr	r2, [sp, #16]
 800e2a8:	4601      	mov	r1, r0
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	f016 f928 	bl	8024500 <lv_txt_get_width>
 800e2b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2b2:	8893      	ldrh	r3, [r2, #4]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	8812      	ldrh	r2, [r2, #0]
 800e2b8:	1a9b      	subs	r3, r3, r2
            pos.x += lv_area_get_width(coords) - line_width;
 800e2ba:	b21b      	sxth	r3, r3
 800e2bc:	1a1b      	subs	r3, r3, r0
 800e2be:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	; 0xac
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e2c8:	e760      	b.n	800e18c <lv_draw_label+0x470>
            color = dsc->color;
 800e2ca:	89a6      	ldrh	r6, [r4, #12]
                        cmd_state = CMD_STATE_WAIT;
 800e2cc:	f04f 0a00 	mov.w	sl, #0
 800e2d0:	e70e      	b.n	800e0f0 <lv_draw_label+0x3d4>
 800e2d2:	bf00      	nop
 800e2d4:	20000768 	.word	0x20000768

0800e2d8 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(draw_ctx->layer_init == NULL) return NULL;
 800e2da:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e2dc:	b353      	cbz	r3, 800e334 <lv_draw_layer_create+0x5c>
 800e2de:	4604      	mov	r4, r0
 800e2e0:	460f      	mov	r7, r1
 800e2e2:	4616      	mov	r6, r2

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 800e2e4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e2e6:	f013 fe21 	bl	8021f2c <lv_mem_alloc>
    LV_ASSERT_MALLOC(layer_ctx);
 800e2ea:	4605      	mov	r5, r0
 800e2ec:	b1e8      	cbz	r0, 800e32a <lv_draw_layer_create+0x52>
    if(layer_ctx == NULL) {
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800e2ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e2f0:	f014 f89c 	bl	802242c <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800e2f4:	f7fe fd6e 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	622b      	str	r3, [r5, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 800e2fc:	6863      	ldr	r3, [r4, #4]
 800e2fe:	61eb      	str	r3, [r5, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800e300:	68a3      	ldr	r3, [r4, #8]
 800e302:	61ab      	str	r3, [r5, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 800e304:	6803      	ldr	r3, [r0, #0]
 800e306:	7c1b      	ldrb	r3, [r3, #16]
 800e308:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e30c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    layer_ctx->area_full = *layer_area;
 800e310:	462b      	mov	r3, r5
 800e312:	6838      	ldr	r0, [r7, #0]
 800e314:	6879      	ldr	r1, [r7, #4]
 800e316:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 800e318:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e31a:	4632      	mov	r2, r6
 800e31c:	4629      	mov	r1, r5
 800e31e:	4620      	mov	r0, r4
 800e320:	4798      	blx	r3
    if(NULL == init_layer_ctx) {
 800e322:	4604      	mov	r4, r0
 800e324:	b110      	cbz	r0, 800e32c <lv_draw_layer_create+0x54>
        lv_mem_free(layer_ctx);
    }
    return init_layer_ctx;
}
 800e326:	4620      	mov	r0, r4
 800e328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(layer_ctx);
 800e32a:	e7fe      	b.n	800e32a <lv_draw_layer_create+0x52>
        lv_mem_free(layer_ctx);
 800e32c:	4628      	mov	r0, r5
 800e32e:	f013 fe1b 	bl	8021f68 <lv_mem_free>
 800e332:	e7f8      	b.n	800e326 <lv_draw_layer_create+0x4e>
    if(draw_ctx->layer_init == NULL) return NULL;
 800e334:	2400      	movs	r4, #0
 800e336:	e7f6      	b.n	800e326 <lv_draw_layer_create+0x4e>

0800e338 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 800e338:	b508      	push	{r3, lr}
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 800e33a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e33c:	b103      	cbz	r3, 800e340 <lv_draw_layer_adjust+0x8>
 800e33e:	4798      	blx	r3
}
 800e340:	bd08      	pop	{r3, pc}

0800e342 <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 800e342:	b508      	push	{r3, lr}
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 800e344:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e346:	b103      	cbz	r3, 800e34a <lv_draw_layer_blend+0x8>
 800e348:	4798      	blx	r3
}
 800e34a:	bd08      	pop	{r3, pc}

0800e34c <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4605      	mov	r5, r0
 800e350:	460c      	mov	r4, r1

    lv_draw_wait_for_finish(draw_ctx);
 800e352:	f7ff f844 	bl	800d3de <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 800e356:	6a23      	ldr	r3, [r4, #32]
 800e358:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 800e35a:	69e3      	ldr	r3, [r4, #28]
 800e35c:	606b      	str	r3, [r5, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 800e35e:	69a3      	ldr	r3, [r4, #24]
 800e360:	60ab      	str	r3, [r5, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800e362:	f7fe fd37 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800e366:	6803      	ldr	r3, [r0, #0]
 800e368:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800e36c:	7c1a      	ldrb	r2, [r3, #16]
 800e36e:	f361 1286 	bfi	r2, r1, #6, #1
 800e372:	741a      	strb	r2, [r3, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 800e374:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e376:	b113      	cbz	r3, 800e37e <lv_draw_layer_destroy+0x32>
 800e378:	4621      	mov	r1, r4
 800e37a:	4628      	mov	r0, r5
 800e37c:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 800e37e:	4620      	mov	r0, r4
 800e380:	f013 fdf2 	bl	8021f68 <lv_mem_free>
}
 800e384:	bd38      	pop	{r3, r4, r5, pc}

0800e386 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 800e386:	b510      	push	{r4, lr}
 800e388:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 800e38a:	210a      	movs	r1, #10
 800e38c:	f014 f84e 	bl	802242c <lv_memset_00>
    dsc->width = 1;
 800e390:	2301      	movs	r3, #1
 800e392:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 800e394:	23ff      	movs	r3, #255	; 0xff
 800e396:	7223      	strb	r3, [r4, #8]
    dsc->color = lv_color_black();
 800e398:	7823      	ldrb	r3, [r4, #0]
 800e39a:	f36f 0304 	bfc	r3, #0, #5
 800e39e:	7023      	strb	r3, [r4, #0]
 800e3a0:	8823      	ldrh	r3, [r4, #0]
 800e3a2:	f36f 134a 	bfc	r3, #5, #6
 800e3a6:	8023      	strh	r3, [r4, #0]
 800e3a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800e3ac:	f36f 03c7 	bfc	r3, #3, #5
 800e3b0:	7063      	strb	r3, [r4, #1]
}
 800e3b2:	bd10      	pop	{r4, pc}

0800e3b4 <lv_draw_line>:

LV_ATTRIBUTE_FAST_MEM void lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 800e3b4:	b510      	push	{r4, lr}
    if(dsc->width == 0) return;
 800e3b6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800e3ba:	b124      	cbz	r4, 800e3c6 <lv_draw_line+0x12>
    if(dsc->opa <= LV_OPA_MIN) return;
 800e3bc:	7a0c      	ldrb	r4, [r1, #8]
 800e3be:	2c02      	cmp	r4, #2
 800e3c0:	d901      	bls.n	800e3c6 <lv_draw_line+0x12>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 800e3c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e3c4:	47a0      	blx	r4
}
 800e3c6:	bd10      	pop	{r4, pc}

0800e3c8 <lv_draw_mask_line>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t lv_draw_mask_line(lv_opa_t * mask_buf, lv_coord_t abs_x,
                                                                  lv_coord_t abs_y, lv_coord_t len,
                                                                  lv_draw_mask_line_param_t * p)
{
 800e3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3cc:	4686      	mov	lr, r0
 800e3ce:	9c08      	ldr	r4, [sp, #32]
    /*Make to points relative to the vertex*/
    abs_y -= p->origo.y;
 800e3d0:	8aa0      	ldrh	r0, [r4, #20]
 800e3d2:	1a12      	subs	r2, r2, r0
 800e3d4:	fa0f fc82 	sxth.w	ip, r2
    abs_x -= p->origo.x;
 800e3d8:	8a62      	ldrh	r2, [r4, #18]
 800e3da:	1a89      	subs	r1, r1, r2
 800e3dc:	b20a      	sxth	r2, r1

    /*Handle special cases*/
    if(p->steep == 0) {
 800e3de:	6a21      	ldr	r1, [r4, #32]
 800e3e0:	2900      	cmp	r1, #0
 800e3e2:	d159      	bne.n	800e498 <lv_draw_mask_line+0xd0>
        /*Horizontal*/
        if(p->flat) {
 800e3e4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800e3e8:	f010 0001 	ands.w	r0, r0, #1
 800e3ec:	d017      	beq.n	800e41e <lv_draw_mask_line+0x56>
            /*Non sense: Can't be on the right/left of a horizontal line*/
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 800e3ee:	7c23      	ldrb	r3, [r4, #16]
 800e3f0:	f013 0f02 	tst.w	r3, #2
 800e3f4:	f000 8101 	beq.w	800e5fa <lv_draw_mask_line+0x232>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e3f8:	f003 0303 	and.w	r3, r3, #3
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d008      	beq.n	800e412 <lv_draw_mask_line+0x4a>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e400:	2b03      	cmp	r3, #3
 800e402:	f040 81ec 	bne.w	800e7de <lv_draw_mask_line+0x416>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
            }
        }
    }

    return LV_DRAW_MASK_RES_CHANGED;
 800e406:	f1bc 0f00 	cmp.w	ip, #0
 800e40a:	bfd4      	ite	le
 800e40c:	2000      	movle	r0, #0
 800e40e:	2001      	movgt	r0, #1
 800e410:	e0f3      	b.n	800e5fa <lv_draw_mask_line+0x232>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e412:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 800e416:	bfac      	ite	ge
 800e418:	2000      	movge	r0, #0
 800e41a:	2001      	movlt	r0, #1
 800e41c:	e0ed      	b.n	800e5fa <lv_draw_mask_line+0x232>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 800e41e:	7c20      	ldrb	r0, [r4, #16]
 800e420:	f010 0402 	ands.w	r4, r0, #2
 800e424:	f040 81dd 	bne.w	800e7e2 <lv_draw_mask_line+0x41a>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e428:	f000 0003 	and.w	r0, r0, #3
 800e42c:	2801      	cmp	r0, #1
 800e42e:	d00b      	beq.n	800e448 <lv_draw_mask_line+0x80>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 800e430:	b9e8      	cbnz	r0, 800e46e <lv_draw_mask_line+0xa6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e432:	18d1      	adds	r1, r2, r3
 800e434:	f100 81d7 	bmi.w	800e7e6 <lv_draw_mask_line+0x41e>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e438:	2a00      	cmp	r2, #0
 800e43a:	f300 80de 	bgt.w	800e5fa <lv_draw_mask_line+0x232>
                    int32_t k = - abs_x;
 800e43e:	4252      	negs	r2, r2
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800e440:	4293      	cmp	r3, r2
 800e442:	dc0e      	bgt.n	800e462 <lv_draw_mask_line+0x9a>
                    return  LV_DRAW_MASK_RES_CHANGED;
 800e444:	2002      	movs	r0, #2
 800e446:	e0d8      	b.n	800e5fa <lv_draw_mask_line+0x232>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e448:	2a00      	cmp	r2, #0
 800e44a:	f300 80d6 	bgt.w	800e5fa <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e44e:	4610      	mov	r0, r2
 800e450:	461d      	mov	r5, r3
 800e452:	42da      	cmn	r2, r3
 800e454:	f100 81d5 	bmi.w	800e802 <lv_draw_mask_line+0x43a>
                    int32_t k = - abs_x;
 800e458:	4241      	negs	r1, r0
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800e45a:	42a9      	cmp	r1, r5
 800e45c:	db12      	blt.n	800e484 <lv_draw_mask_line+0xbc>
 800e45e:	4620      	mov	r0, r4
 800e460:	e0cb      	b.n	800e5fa <lv_draw_mask_line+0x232>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 800e462:	eb0e 0002 	add.w	r0, lr, r2
 800e466:	f013 ffe1 	bl	802242c <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 800e46a:	2002      	movs	r0, #2
 800e46c:	e0c5      	b.n	800e5fa <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e46e:	4610      	mov	r0, r2
 800e470:	461d      	mov	r5, r3
 800e472:	42da      	cmn	r2, r3
 800e474:	f100 81b9 	bmi.w	800e7ea <lv_draw_mask_line+0x422>
                    if(k < 0) k = 0;
 800e478:	2a00      	cmp	r2, #0
 800e47a:	dded      	ble.n	800e458 <lv_draw_mask_line+0x90>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dc06      	bgt.n	800e48e <lv_draw_mask_line+0xc6>
 800e480:	4620      	mov	r0, r4
 800e482:	e0ba      	b.n	800e5fa <lv_draw_mask_line+0x232>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 800e484:	2800      	cmp	r0, #0
                    return  LV_DRAW_MASK_RES_CHANGED;
 800e486:	bfc8      	it	gt
 800e488:	2002      	movgt	r0, #2
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 800e48a:	f300 80b6 	bgt.w	800e5fa <lv_draw_mask_line+0x232>
 800e48e:	4670      	mov	r0, lr
 800e490:	f013 ffcc 	bl	802242c <lv_memset_00>
                    return  LV_DRAW_MASK_RES_CHANGED;
 800e494:	2002      	movs	r0, #2
 800e496:	e0b0      	b.n	800e5fa <lv_draw_mask_line+0x232>
    if(p->flat) {
 800e498:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 800e49c:	f016 0001 	ands.w	r0, r6, #1
 800e4a0:	f000 809e 	beq.w	800e5e0 <lv_draw_mask_line+0x218>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 800e4a4:	69e0      	ldr	r0, [r4, #28]
 800e4a6:	fb02 f100 	mul.w	r1, r2, r0
 800e4aa:	1289      	asrs	r1, r1, #10
    if(p->yx_steep > 0) {
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	dd05      	ble.n	800e4bc <lv_draw_mask_line+0xf4>
        if(y_at_x > abs_y) {
 800e4b0:	4561      	cmp	r1, ip
 800e4b2:	f340 81ad 	ble.w	800e810 <lv_draw_mask_line+0x448>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e4b6:	f3c6 0040 	ubfx	r0, r6, #1, #1
 800e4ba:	e09e      	b.n	800e5fa <lv_draw_mask_line+0x232>
        if(y_at_x < abs_y) {
 800e4bc:	4561      	cmp	r1, ip
 800e4be:	f280 81e5 	bge.w	800e88c <lv_draw_mask_line+0x4c4>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e4c2:	f3c6 0040 	ubfx	r0, r6, #1, #1
 800e4c6:	e098      	b.n	800e5fa <lv_draw_mask_line+0x232>
            if(p->inv) {
 800e4c8:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e4cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800e4d0:	e093      	b.n	800e5fa <lv_draw_mask_line+0x232>
            if(p->inv) {
 800e4d2:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e4d6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800e4da:	e08e      	b.n	800e5fa <lv_draw_mask_line+0x232>


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
    if(mask_new <= LV_OPA_MIN) return 0;
 800e4dc:	2200      	movs	r2, #0
 800e4de:	e1cf      	b.n	800e880 <lv_draw_mask_line+0x4b8>
 800e4e0:	463e      	mov	r6, r7
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e4e2:	f888 6000 	strb.w	r6, [r8]
        px_h -= p->spx;
 800e4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4e8:	ebac 0c03 	sub.w	ip, ip, r3
        k++;
 800e4ec:	3201      	adds	r2, #1
        if(k >= len) break;
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	42aa      	cmp	r2, r5
 800e4f2:	da57      	bge.n	800e5a4 <lv_draw_mask_line+0x1dc>
    while(px_h > p->spx) {
 800e4f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4f6:	459c      	cmp	ip, r3
 800e4f8:	dd1c      	ble.n	800e534 <lv_draw_mask_line+0x16c>
        if(k >= 0 && k < len) {
 800e4fa:	2a00      	cmp	r2, #0
 800e4fc:	dbf3      	blt.n	800e4e6 <lv_draw_mask_line+0x11e>
 800e4fe:	42aa      	cmp	r2, r5
 800e500:	daf1      	bge.n	800e4e6 <lv_draw_mask_line+0x11e>
            m = px_h - (p->spx >> 1);
 800e502:	ebac 0363 	sub.w	r3, ip, r3, asr #1
 800e506:	b2db      	uxtb	r3, r3
            if(p->inv) m = 255 - m;
 800e508:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 800e50c:	f016 0f02 	tst.w	r6, #2
 800e510:	bf1c      	itt	ne
 800e512:	43db      	mvnne	r3, r3
 800e514:	b2db      	uxtbne	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e516:	4680      	mov	r8, r0
 800e518:	7806      	ldrb	r6, [r0, #0]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e51a:	2bfc      	cmp	r3, #252	; 0xfc
 800e51c:	d8e1      	bhi.n	800e4e2 <lv_draw_mask_line+0x11a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e51e:	2b02      	cmp	r3, #2
 800e520:	d9de      	bls.n	800e4e0 <lv_draw_mask_line+0x118>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e522:	fb06 f303 	mul.w	r3, r6, r3
 800e526:	eb03 2603 	add.w	r6, r3, r3, lsl #8
 800e52a:	eb03 16c6 	add.w	r6, r3, r6, lsl #7
 800e52e:	f3c6 56c7 	ubfx	r6, r6, #23, #8
 800e532:	e7d6      	b.n	800e4e2 <lv_draw_mask_line+0x11a>
    if(k < len && k >= 0) {
 800e534:	42aa      	cmp	r2, r5
 800e536:	da35      	bge.n	800e5a4 <lv_draw_mask_line+0x1dc>
 800e538:	2a00      	cmp	r2, #0
 800e53a:	db33      	blt.n	800e5a4 <lv_draw_mask_line+0x1dc>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 800e53c:	69a3      	ldr	r3, [r4, #24]
 800e53e:	fb03 f30c 	mul.w	r3, r3, ip
 800e542:	129b      	asrs	r3, r3, #10
        m = (x_inters * px_h) >> 9;
 800e544:	fb0c fc03 	mul.w	ip, ip, r3
 800e548:	f3cc 2c47 	ubfx	ip, ip, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 800e54c:	69e3      	ldr	r3, [r4, #28]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	bfbc      	itt	lt
 800e552:	ea6f 0c0c 	mvnlt.w	ip, ip
 800e556:	fa5f fc8c 	uxtblt.w	ip, ip
        if(p->inv) m = 255 - m;
 800e55a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e55e:	f013 0f02 	tst.w	r3, #2
 800e562:	bf1c      	itt	ne
 800e564:	ea6f 0c0c 	mvnne.w	ip, ip
 800e568:	fa5f fc8c 	uxtbne.w	ip, ip
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800e56c:	eb0e 0002 	add.w	r0, lr, r2
 800e570:	f81e 3002 	ldrb.w	r3, [lr, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e574:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
 800e578:	d80a      	bhi.n	800e590 <lv_draw_mask_line+0x1c8>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e57a:	f1bc 0f02 	cmp.w	ip, #2
 800e57e:	d90f      	bls.n	800e5a0 <lv_draw_mask_line+0x1d8>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e580:	fb0c f303 	mul.w	r3, ip, r3
 800e584:	eb03 2603 	add.w	r6, r3, r3, lsl #8
 800e588:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
 800e58c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800e590:	7003      	strb	r3, [r0, #0]
    if(p->inv) {
 800e592:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e596:	f013 0f02 	tst.w	r3, #2
 800e59a:	d108      	bne.n	800e5ae <lv_draw_mask_line+0x1e6>
        k++;
 800e59c:	3201      	adds	r2, #1
        if(k < 0) {
 800e59e:	e014      	b.n	800e5ca <lv_draw_mask_line+0x202>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	e7f5      	b.n	800e590 <lv_draw_mask_line+0x1c8>
    if(p->inv) {
 800e5a4:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800e5a8:	f010 0002 	ands.w	r0, r0, #2
 800e5ac:	d00b      	beq.n	800e5c6 <lv_draw_mask_line+0x1fe>
        if(k > len) {
 800e5ae:	428d      	cmp	r5, r1
 800e5b0:	f2c0 811d 	blt.w	800e7ee <lv_draw_mask_line+0x426>
        if(k >= 0) {
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	da01      	bge.n	800e5bc <lv_draw_mask_line+0x1f4>
    return LV_DRAW_MASK_RES_CHANGED;
 800e5b8:	2002      	movs	r0, #2
 800e5ba:	e01e      	b.n	800e5fa <lv_draw_mask_line+0x232>
            lv_memset_00(&mask_buf[0], k);
 800e5bc:	4670      	mov	r0, lr
 800e5be:	f013 ff35 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e5c2:	2002      	movs	r0, #2
 800e5c4:	e019      	b.n	800e5fa <lv_draw_mask_line+0x232>
        if(k < 0) {
 800e5c6:	3201      	adds	r2, #1
 800e5c8:	d417      	bmi.n	800e5fa <lv_draw_mask_line+0x232>
        if(k <= len) {
 800e5ca:	4295      	cmp	r5, r2
 800e5cc:	da01      	bge.n	800e5d2 <lv_draw_mask_line+0x20a>
    return LV_DRAW_MASK_RES_CHANGED;
 800e5ce:	2002      	movs	r0, #2
 800e5d0:	e013      	b.n	800e5fa <lv_draw_mask_line+0x232>
            lv_memset_00(&mask_buf[k], len - k);
 800e5d2:	1aa9      	subs	r1, r5, r2
 800e5d4:	eb0e 0002 	add.w	r0, lr, r2
 800e5d8:	f013 ff28 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e5dc:	2002      	movs	r0, #2
 800e5de:	e00c      	b.n	800e5fa <lv_draw_mask_line+0x232>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800e5e0:	69a5      	ldr	r5, [r4, #24]
 800e5e2:	fb05 fc0c 	mul.w	ip, r5, ip
 800e5e6:	ea4f 21ac 	mov.w	r1, ip, asr #10
    if(p->xy_steep > 0) x_at_y++;
 800e5ea:	2d00      	cmp	r5, #0
 800e5ec:	bfcc      	ite	gt
 800e5ee:	1c4f      	addgt	r7, r1, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800e5f0:	460f      	movle	r7, r1
    if(x_at_y < abs_x) {
 800e5f2:	42ba      	cmp	r2, r7
 800e5f4:	dd03      	ble.n	800e5fe <lv_draw_mask_line+0x236>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e5f6:	f3c6 0040 	ubfx	r0, r6, #1, #1
}
 800e5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(x_at_y > abs_x + len) {
 800e5fe:	18d7      	adds	r7, r2, r3
 800e600:	42b9      	cmp	r1, r7
 800e602:	dd04      	ble.n	800e60e <lv_draw_mask_line+0x246>
        if(p->inv) {
 800e604:	f086 0002 	eor.w	r0, r6, #2
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 800e608:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800e60c:	e7f5      	b.n	800e5fa <lv_draw_mask_line+0x232>
    int32_t xsi = xs >> 8;
 800e60e:	f34c 288d 	sbfx	r8, ip, #10, #14
    int32_t xsf = xs & 0xFF;
 800e612:	f3cc 0787 	ubfx	r7, ip, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800e616:	44ac      	add	ip, r5
 800e618:	ea4f 290c 	mov.w	r9, ip, lsl #8
    int32_t xei = xe >> 8;
 800e61c:	f34c 2c8d 	sbfx	ip, ip, #10, #14
    k = xsi - abs_x;
 800e620:	eba8 0102 	sub.w	r1, r8, r2
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800e624:	45e0      	cmp	r8, ip
 800e626:	d053      	beq.n	800e6d0 <lv_draw_mask_line+0x308>
 800e628:	2d00      	cmp	r5, #0
 800e62a:	db4c      	blt.n	800e6c6 <lv_draw_mask_line+0x2fe>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 800e62c:	f1c7 07ff 	rsb	r7, r7, #255	; 0xff
 800e630:	69e2      	ldr	r2, [r4, #28]
 800e632:	fb07 f202 	mul.w	r2, r7, r2
 800e636:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
 800e638:	2900      	cmp	r1, #0
 800e63a:	f2c0 80a6 	blt.w	800e78a <lv_draw_mask_line+0x3c2>
 800e63e:	428b      	cmp	r3, r1
 800e640:	dd1a      	ble.n	800e678 <lv_draw_mask_line+0x2b0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800e642:	fb02 f707 	mul.w	r7, r2, r7
 800e646:	f3c7 2547 	ubfx	r5, r7, #9, #8
                if(p->inv) m = 255 - m;
 800e64a:	f016 0f02 	tst.w	r6, #2
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 800e64e:	bf04      	itt	eq
 800e650:	43ed      	mvneq	r5, r5
 800e652:	b2ed      	uxtbeq	r5, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e654:	eb0e 0701 	add.w	r7, lr, r1
 800e658:	f81e 6001 	ldrb.w	r6, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e65c:	2dfc      	cmp	r5, #252	; 0xfc
 800e65e:	d80a      	bhi.n	800e676 <lv_draw_mask_line+0x2ae>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e660:	2d02      	cmp	r5, #2
 800e662:	f240 8090 	bls.w	800e786 <lv_draw_mask_line+0x3be>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e666:	fb06 f505 	mul.w	r5, r6, r5
 800e66a:	eb05 2605 	add.w	r6, r5, r5, lsl #8
 800e66e:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 800e672:	f3c5 56c7 	ubfx	r6, r5, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e676:	703e      	strb	r6, [r7, #0]
            k++;
 800e678:	1c4e      	adds	r6, r1, #1
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800e67a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800e67e:	69a5      	ldr	r5, [r4, #24]
 800e680:	fb02 f505 	mul.w	r5, r2, r5
 800e684:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
 800e686:	42b3      	cmp	r3, r6
 800e688:	f340 8081 	ble.w	800e78e <lv_draw_mask_line+0x3c6>
                m = ((255 - y_inters) * x_inters) >> 9;
 800e68c:	fb05 f202 	mul.w	r2, r5, r2
 800e690:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
 800e694:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
 800e698:	f015 0f02 	tst.w	r5, #2
 800e69c:	bf1c      	itt	ne
 800e69e:	43d2      	mvnne	r2, r2
 800e6a0:	b2d2      	uxtbne	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e6a2:	eb0e 0706 	add.w	r7, lr, r6
 800e6a6:	f81e 5006 	ldrb.w	r5, [lr, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e6aa:	2afc      	cmp	r2, #252	; 0xfc
 800e6ac:	d809      	bhi.n	800e6c2 <lv_draw_mask_line+0x2fa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e6ae:	2a02      	cmp	r2, #2
 800e6b0:	d97f      	bls.n	800e7b2 <lv_draw_mask_line+0x3ea>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e6b2:	fb05 f202 	mul.w	r2, r5, r2
 800e6b6:	eb02 2502 	add.w	r5, r2, r2, lsl #8
 800e6ba:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
 800e6be:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e6c2:	703d      	strb	r5, [r7, #0]
 800e6c4:	e063      	b.n	800e78e <lv_draw_mask_line+0x3c6>
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 800e6c6:	2f00      	cmp	r7, #0
 800e6c8:	f040 80f8 	bne.w	800e8bc <lv_draw_mask_line+0x4f4>
        k--;
 800e6cc:	3901      	subs	r1, #1
        xsf = 0xFF;
 800e6ce:	27ff      	movs	r7, #255	; 0xff
        if(k >= 0 && k < len) {
 800e6d0:	2900      	cmp	r1, #0
 800e6d2:	db2d      	blt.n	800e730 <lv_draw_mask_line+0x368>
 800e6d4:	428b      	cmp	r3, r1
 800e6d6:	dd2b      	ble.n	800e730 <lv_draw_mask_line+0x368>
    int32_t xef = xe & 0xFF;
 800e6d8:	f3c9 2587 	ubfx	r5, r9, #10, #8
            m = (xsf + xef) >> 1;
 800e6dc:	443d      	add	r5, r7
 800e6de:	f3c5 0547 	ubfx	r5, r5, #1, #8
            if(p->inv) m = 255 - m;
 800e6e2:	f016 0f02 	tst.w	r6, #2
 800e6e6:	bf1c      	itt	ne
 800e6e8:	43ed      	mvnne	r5, r5
 800e6ea:	b2ed      	uxtbne	r5, r5
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e6ec:	eb0e 0701 	add.w	r7, lr, r1
 800e6f0:	f81e 6001 	ldrb.w	r6, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e6f4:	2dfc      	cmp	r5, #252	; 0xfc
 800e6f6:	d809      	bhi.n	800e70c <lv_draw_mask_line+0x344>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e6f8:	2d02      	cmp	r5, #2
 800e6fa:	d917      	bls.n	800e72c <lv_draw_mask_line+0x364>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e6fc:	fb06 f505 	mul.w	r5, r6, r5
 800e700:	eb05 2605 	add.w	r6, r5, r5, lsl #8
 800e704:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 800e708:	f3c5 56c7 	ubfx	r6, r5, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e70c:	703e      	strb	r6, [r7, #0]
        if(p->inv) {
 800e70e:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 800e712:	f014 0f02 	tst.w	r4, #2
 800e716:	f000 80c7 	beq.w	800e8a8 <lv_draw_mask_line+0x4e0>
            k = xsi - abs_x;
 800e71a:	ebac 0102 	sub.w	r1, ip, r2
            if(k >= len) {
 800e71e:	428b      	cmp	r3, r1
 800e720:	f77f af6b 	ble.w	800e5fa <lv_draw_mask_line+0x232>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800e724:	2900      	cmp	r1, #0
 800e726:	da12      	bge.n	800e74e <lv_draw_mask_line+0x386>
    return LV_DRAW_MASK_RES_CHANGED;
 800e728:	2002      	movs	r0, #2
 800e72a:	e766      	b.n	800e5fa <lv_draw_mask_line+0x232>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e72c:	4606      	mov	r6, r0
 800e72e:	e7ed      	b.n	800e70c <lv_draw_mask_line+0x344>
        if(p->inv) {
 800e730:	f016 0602 	ands.w	r6, r6, #2
 800e734:	d1f1      	bne.n	800e71a <lv_draw_mask_line+0x352>
        k++;
 800e736:	1c48      	adds	r0, r1, #1
 800e738:	4298      	cmp	r0, r3
 800e73a:	bfa8      	it	ge
 800e73c:	4618      	movge	r0, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e73e:	2800      	cmp	r0, #0
 800e740:	d057      	beq.n	800e7f2 <lv_draw_mask_line+0x42a>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e742:	2800      	cmp	r0, #0
    return LV_DRAW_MASK_RES_CHANGED;
 800e744:	bfd8      	it	le
 800e746:	2002      	movle	r0, #2
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e748:	f77f af57 	ble.w	800e5fa <lv_draw_mask_line+0x232>
 800e74c:	e0b0      	b.n	800e8b0 <lv_draw_mask_line+0x4e8>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 800e74e:	4670      	mov	r0, lr
 800e750:	f013 fe6c 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e754:	2002      	movs	r0, #2
 800e756:	e750      	b.n	800e5fa <lv_draw_mask_line+0x232>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e758:	4606      	mov	r6, r0
 800e75a:	e0d2      	b.n	800e902 <lv_draw_mask_line+0x53a>
 800e75c:	4605      	mov	r5, r0
 800e75e:	e0f6      	b.n	800e94e <lv_draw_mask_line+0x586>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800e760:	4631      	mov	r1, r6
 800e762:	4670      	mov	r0, lr
 800e764:	f013 fe62 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e768:	2002      	movs	r0, #2
 800e76a:	e746      	b.n	800e5fa <lv_draw_mask_line+0x232>
            k += 2;
 800e76c:	1c48      	adds	r0, r1, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800e76e:	4283      	cmp	r3, r0
 800e770:	db43      	blt.n	800e7fa <lv_draw_mask_line+0x432>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800e772:	2800      	cmp	r0, #0
 800e774:	da01      	bge.n	800e77a <lv_draw_mask_line+0x3b2>
    return LV_DRAW_MASK_RES_CHANGED;
 800e776:	2002      	movs	r0, #2
 800e778:	e73f      	b.n	800e5fa <lv_draw_mask_line+0x232>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 800e77a:	1a19      	subs	r1, r3, r0
 800e77c:	4470      	add	r0, lr
 800e77e:	f013 fe55 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e782:	2002      	movs	r0, #2
 800e784:	e739      	b.n	800e5fa <lv_draw_mask_line+0x232>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e786:	4606      	mov	r6, r0
 800e788:	e775      	b.n	800e676 <lv_draw_mask_line+0x2ae>
            if(k >= 0 && k < len) {
 800e78a:	1c4e      	adds	r6, r1, #1
 800e78c:	d50b      	bpl.n	800e7a6 <lv_draw_mask_line+0x3de>
            if(p->inv) {
 800e78e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e792:	f012 0202 	ands.w	r2, r2, #2
 800e796:	d013      	beq.n	800e7c0 <lv_draw_mask_line+0x3f8>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 800e798:	428b      	cmp	r3, r1
 800e79a:	f6ff af2e 	blt.w	800e5fa <lv_draw_mask_line+0x232>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800e79e:	2900      	cmp	r1, #0
 800e7a0:	da09      	bge.n	800e7b6 <lv_draw_mask_line+0x3ee>
    return LV_DRAW_MASK_RES_CHANGED;
 800e7a2:	2002      	movs	r0, #2
 800e7a4:	e729      	b.n	800e5fa <lv_draw_mask_line+0x232>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 800e7a6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800e7aa:	fb02 f505 	mul.w	r5, r2, r5
 800e7ae:	12ad      	asrs	r5, r5, #10
 800e7b0:	e769      	b.n	800e686 <lv_draw_mask_line+0x2be>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	e785      	b.n	800e6c2 <lv_draw_mask_line+0x2fa>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 800e7b6:	4670      	mov	r0, lr
 800e7b8:	f013 fe38 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e7bc:	2002      	movs	r0, #2
 800e7be:	e71c      	b.n	800e5fa <lv_draw_mask_line+0x232>
            k++;
 800e7c0:	1c88      	adds	r0, r1, #2
 800e7c2:	4298      	cmp	r0, r3
 800e7c4:	bfa8      	it	ge
 800e7c6:	4618      	movge	r0, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e7c8:	b1c8      	cbz	r0, 800e7fe <lv_draw_mask_line+0x436>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	dc01      	bgt.n	800e7d2 <lv_draw_mask_line+0x40a>
    return LV_DRAW_MASK_RES_CHANGED;
 800e7ce:	2002      	movs	r0, #2
 800e7d0:	e713      	b.n	800e5fa <lv_draw_mask_line+0x232>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e7d2:	1a19      	subs	r1, r3, r0
 800e7d4:	4470      	add	r0, lr
 800e7d6:	f013 fe29 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e7da:	2002      	movs	r0, #2
 800e7dc:	e70d      	b.n	800e5fa <lv_draw_mask_line+0x232>
                return LV_DRAW_MASK_RES_TRANSP;
 800e7de:	2000      	movs	r0, #0
 800e7e0:	e70b      	b.n	800e5fa <lv_draw_mask_line+0x232>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7e2:	2001      	movs	r0, #1
 800e7e4:	e709      	b.n	800e5fa <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	e707      	b.n	800e5fa <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	e705      	b.n	800e5fa <lv_draw_mask_line+0x232>
            return LV_DRAW_MASK_RES_TRANSP;
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e703      	b.n	800e5fa <lv_draw_mask_line+0x232>
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	e701      	b.n	800e5fa <lv_draw_mask_line+0x232>
    return LV_DRAW_MASK_RES_CHANGED;
 800e7f6:	2002      	movs	r0, #2
 800e7f8:	e6ff      	b.n	800e5fa <lv_draw_mask_line+0x232>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 800e7fa:	2001      	movs	r0, #1
 800e7fc:	e6fd      	b.n	800e5fa <lv_draw_mask_line+0x232>
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 800e7fe:	4610      	mov	r0, r2
 800e800:	e6fb      	b.n	800e5fa <lv_draw_mask_line+0x232>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 800e802:	4620      	mov	r0, r4
 800e804:	e6f9      	b.n	800e5fa <lv_draw_mask_line+0x232>
    int32_t k = xei - abs_x;
 800e806:	1a8a      	subs	r2, r1, r2
 800e808:	4611      	mov	r1, r2
    if(xef == 0) px_h = 255;
 800e80a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800e80e:	e039      	b.n	800e884 <lv_draw_mask_line+0x4bc>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800e810:	461d      	mov	r5, r3
 800e812:	4413      	add	r3, r2
 800e814:	fb03 f000 	mul.w	r0, r3, r0
        if(y_at_x < abs_y) {
 800e818:	ebbc 2fa0 	cmp.w	ip, r0, asr #10
 800e81c:	f73f ae54 	bgt.w	800e4c8 <lv_draw_mask_line+0x100>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 800e820:	69a3      	ldr	r3, [r4, #24]
 800e822:	fb03 fc0c 	mul.w	ip, r3, ip
 800e826:	f34c 0c95 	sbfx	ip, ip, #2, #22
    int32_t xei = xe >> 8;
 800e82a:	ea4f 212c 	mov.w	r1, ip, asr #8
    if(xef == 0) px_h = 255;
 800e82e:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800e832:	d0e8      	beq.n	800e806 <lv_draw_mask_line+0x43e>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 800e834:	f1cc 03ff 	rsb	r3, ip, #255	; 0xff
 800e838:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800e83a:	fb03 f707 	mul.w	r7, r3, r7
 800e83e:	123f      	asrs	r7, r7, #8
 800e840:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
        if(k >= 0 && k < len) {
 800e844:	1a89      	subs	r1, r1, r2
 800e846:	d41c      	bmi.n	800e882 <lv_draw_mask_line+0x4ba>
 800e848:	42a9      	cmp	r1, r5
 800e84a:	da1a      	bge.n	800e882 <lv_draw_mask_line+0x4ba>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800e84c:	fb07 f303 	mul.w	r3, r7, r3
 800e850:	f3c3 2347 	ubfx	r3, r3, #9, #8
            if(p->inv) m = 255 - m;
 800e854:	f016 0f02 	tst.w	r6, #2
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 800e858:	bf04      	itt	eq
 800e85a:	43db      	mvneq	r3, r3
 800e85c:	b2db      	uxtbeq	r3, r3
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e85e:	eb0e 0001 	add.w	r0, lr, r1
 800e862:	f81e 2001 	ldrb.w	r2, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e866:	2bfc      	cmp	r3, #252	; 0xfc
 800e868:	d80a      	bhi.n	800e880 <lv_draw_mask_line+0x4b8>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	f67f ae36 	bls.w	800e4dc <lv_draw_mask_line+0x114>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e870:	fb02 f303 	mul.w	r3, r2, r3
 800e874:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 800e878:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800e87c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800e880:	7002      	strb	r2, [r0, #0]
        k++;
 800e882:	1c4a      	adds	r2, r1, #1
 800e884:	eb0e 0002 	add.w	r0, lr, r2
    if(mask_new <= LV_OPA_MIN) return 0;
 800e888:	2700      	movs	r7, #0
 800e88a:	e633      	b.n	800e4f4 <lv_draw_mask_line+0x12c>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 800e88c:	461d      	mov	r5, r3
 800e88e:	4413      	add	r3, r2
 800e890:	fb03 f000 	mul.w	r0, r3, r0
        if(y_at_x > abs_y) {
 800e894:	ebbc 2fa0 	cmp.w	ip, r0, asr #10
 800e898:	f6ff ae1b 	blt.w	800e4d2 <lv_draw_mask_line+0x10a>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 800e89c:	69a3      	ldr	r3, [r4, #24]
 800e89e:	fb0c 3c03 	mla	ip, ip, r3, r3
 800e8a2:	f34c 0c95 	sbfx	ip, ip, #2, #22
 800e8a6:	e7c0      	b.n	800e82a <lv_draw_mask_line+0x462>
        k++;
 800e8a8:	1c48      	adds	r0, r1, #1
 800e8aa:	4298      	cmp	r0, r3
 800e8ac:	bfa8      	it	ge
 800e8ae:	4618      	movge	r0, r3
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 800e8b0:	1a19      	subs	r1, r3, r0
 800e8b2:	4470      	add	r0, lr
 800e8b4:	f013 fdba 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800e8b8:	2002      	movs	r0, #2
 800e8ba:	e69e      	b.n	800e5fa <lv_draw_mask_line+0x232>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 800e8bc:	69e2      	ldr	r2, [r4, #28]
 800e8be:	4252      	negs	r2, r2
 800e8c0:	fb07 f202 	mul.w	r2, r7, r2
 800e8c4:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
 800e8c6:	2900      	cmp	r1, #0
 800e8c8:	db1c      	blt.n	800e904 <lv_draw_mask_line+0x53c>
 800e8ca:	428b      	cmp	r3, r1
 800e8cc:	dd1a      	ble.n	800e904 <lv_draw_mask_line+0x53c>
                m = (y_inters * xsf) >> 9;
 800e8ce:	fb02 f507 	mul.w	r5, r2, r7
 800e8d2:	f3c5 2547 	ubfx	r5, r5, #9, #8
                if(p->inv) m = 255 - m;
 800e8d6:	f016 0f02 	tst.w	r6, #2
 800e8da:	bf1c      	itt	ne
 800e8dc:	43ed      	mvnne	r5, r5
 800e8de:	b2ed      	uxtbne	r5, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e8e0:	eb0e 0701 	add.w	r7, lr, r1
 800e8e4:	f81e 6001 	ldrb.w	r6, [lr, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e8e8:	2dfc      	cmp	r5, #252	; 0xfc
 800e8ea:	d80a      	bhi.n	800e902 <lv_draw_mask_line+0x53a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e8ec:	2d02      	cmp	r5, #2
 800e8ee:	f67f af33 	bls.w	800e758 <lv_draw_mask_line+0x390>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e8f2:	fb06 f505 	mul.w	r5, r6, r5
 800e8f6:	eb05 2605 	add.w	r6, r5, r5, lsl #8
 800e8fa:	eb05 15c6 	add.w	r5, r5, r6, lsl #7
 800e8fe:	f3c5 56c7 	ubfx	r6, r5, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e902:	703e      	strb	r6, [r7, #0]
            if(k >= 0 && k < len) {
 800e904:	1e4e      	subs	r6, r1, #1
 800e906:	d424      	bmi.n	800e952 <lv_draw_mask_line+0x58a>
 800e908:	42b3      	cmp	r3, r6
 800e90a:	dd22      	ble.n	800e952 <lv_draw_mask_line+0x58a>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 800e90c:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 800e910:	69a5      	ldr	r5, [r4, #24]
 800e912:	426d      	negs	r5, r5
 800e914:	fb07 f205 	mul.w	r2, r7, r5
 800e918:	1292      	asrs	r2, r2, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800e91a:	fb07 f202 	mul.w	r2, r7, r2
 800e91e:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
 800e922:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
 800e926:	f015 0f02 	tst.w	r5, #2
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 800e92a:	bf04      	itt	eq
 800e92c:	43d2      	mvneq	r2, r2
 800e92e:	b2d2      	uxtbeq	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e930:	f81e 5006 	ldrb.w	r5, [lr, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800e934:	2afc      	cmp	r2, #252	; 0xfc
 800e936:	d80a      	bhi.n	800e94e <lv_draw_mask_line+0x586>
    if(mask_new <= LV_OPA_MIN) return 0;
 800e938:	2a02      	cmp	r2, #2
 800e93a:	f67f af0f 	bls.w	800e75c <lv_draw_mask_line+0x394>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800e93e:	fb05 f202 	mul.w	r2, r5, r2
 800e942:	eb02 2502 	add.w	r5, r2, r2, lsl #8
 800e946:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
 800e94a:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 800e94e:	f80e 5006 	strb.w	r5, [lr, r6]
            if(p->inv) {
 800e952:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800e956:	f012 0f02 	tst.w	r2, #2
 800e95a:	f43f af07 	beq.w	800e76c <lv_draw_mask_line+0x3a4>
                if(k > len) k = len;
 800e95e:	42b3      	cmp	r3, r6
 800e960:	f6ff af49 	blt.w	800e7f6 <lv_draw_mask_line+0x42e>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 800e964:	2e00      	cmp	r6, #0
 800e966:	f73f aefb 	bgt.w	800e760 <lv_draw_mask_line+0x398>
    return LV_DRAW_MASK_RES_CHANGED;
 800e96a:	2002      	movs	r0, #2
 800e96c:	e645      	b.n	800e5fa <lv_draw_mask_line+0x232>

0800e96e <lv_draw_mask_angle>:
{
 800e96e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e972:	b083      	sub	sp, #12
 800e974:	4680      	mov	r8, r0
 800e976:	460f      	mov	r7, r1
 800e978:	4615      	mov	r5, r2
 800e97a:	4699      	mov	r9, r3
 800e97c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 800e97e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e982:	1ad6      	subs	r6, r2, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 800e984:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800e988:	1a89      	subs	r1, r1, r2
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 800e98a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e98e:	2ab3      	cmp	r2, #179	; 0xb3
 800e990:	dc71      	bgt.n	800ea76 <lv_draw_mask_angle+0x108>
 800e992:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800e996:	28b3      	cmp	r0, #179	; 0xb3
 800e998:	f300 814b 	bgt.w	800ec32 <lv_draw_mask_angle+0x2c4>
 800e99c:	2a00      	cmp	r2, #0
 800e99e:	f000 814a 	beq.w	800ec36 <lv_draw_mask_angle+0x2c8>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	f000 80f6 	beq.w	800eb94 <lv_draw_mask_angle+0x226>
 800e9a8:	4282      	cmp	r2, r0
 800e9aa:	f340 80f3 	ble.w	800eb94 <lv_draw_mask_angle+0x226>
        if(abs_y < p->cfg.vertex_p.y) {
 800e9ae:	42ab      	cmp	r3, r5
 800e9b0:	f300 812a 	bgt.w	800ec08 <lv_draw_mask_angle+0x29a>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800e9b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e9b6:	fb06 f303 	mul.w	r3, r6, r3
 800e9ba:	ea4f 2ca3 	mov.w	ip, r3, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800e9be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e9c0:	fb06 3603 	mla	r6, r6, r3, r3
 800e9c4:	12b6      	asrs	r6, r6, #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e9c6:	b292      	uxth	r2, r2
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800e9c8:	1e53      	subs	r3, r2, #1
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	2b59      	cmp	r3, #89	; 0x59
 800e9ce:	d82d      	bhi.n	800ea2c <lv_draw_mask_angle+0xbe>
 800e9d0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800e9d4:	b280      	uxth	r0, r0
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 800e9d6:	1e43      	subs	r3, r0, #1
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	2b59      	cmp	r3, #89	; 0x59
 800e9dc:	d82d      	bhi.n	800ea3a <lv_draw_mask_angle+0xcc>
 800e9de:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800e9e2:	ebac 0c06 	sub.w	ip, ip, r6
        int32_t tmp = start_angle_last + dist - rel_x;
 800e9e6:	eb06 066c 	add.w	r6, r6, ip, asr #1
 800e9ea:	1a76      	subs	r6, r6, r1
        if(tmp > len) tmp = len;
 800e9ec:	454e      	cmp	r6, r9
 800e9ee:	bfa8      	it	ge
 800e9f0:	464e      	movge	r6, r9
        if(tmp > 0) {
 800e9f2:	2e00      	cmp	r6, #0
 800e9f4:	dc28      	bgt.n	800ea48 <lv_draw_mask_angle+0xda>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800e9f6:	f04f 0a01 	mov.w	sl, #1
        if(tmp > len) tmp = len;
 800e9fa:	454e      	cmp	r6, r9
 800e9fc:	bfa8      	it	ge
 800e9fe:	464e      	movge	r6, r9
        if(tmp < 0) tmp = 0;
 800ea00:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 800ea04:	44d8      	add	r8, fp
 800ea06:	fa1f f18b 	uxth.w	r1, fp
 800ea0a:	eba9 0301 	sub.w	r3, r9, r1
 800ea0e:	4439      	add	r1, r7
 800ea10:	343c      	adds	r4, #60	; 0x3c
 800ea12:	9400      	str	r4, [sp, #0]
 800ea14:	b21b      	sxth	r3, r3
 800ea16:	462a      	mov	r2, r5
 800ea18:	b209      	sxth	r1, r1
 800ea1a:	4640      	mov	r0, r8
 800ea1c:	f7ff fcd4 	bl	800e3c8 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800ea20:	4606      	mov	r6, r0
 800ea22:	b310      	cbz	r0, 800ea6a <lv_draw_mask_angle+0xfc>
        else return LV_DRAW_MASK_RES_CHANGED;
 800ea24:	45b2      	cmp	sl, r6
 800ea26:	bf18      	it	ne
 800ea28:	2602      	movne	r6, #2
 800ea2a:	e0af      	b.n	800eb8c <lv_draw_mask_angle+0x21e>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800ea2c:	3a5b      	subs	r2, #91	; 0x5b
 800ea2e:	b293      	uxth	r3, r2
 800ea30:	2bb2      	cmp	r3, #178	; 0xb2
 800ea32:	bf98      	it	ls
 800ea34:	ea06 76e6 	andls.w	r6, r6, r6, asr #31
 800ea38:	e7cc      	b.n	800e9d4 <lv_draw_mask_angle+0x66>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800ea3a:	385b      	subs	r0, #91	; 0x5b
 800ea3c:	b283      	uxth	r3, r0
 800ea3e:	2bb2      	cmp	r3, #178	; 0xb2
 800ea40:	bf98      	it	ls
 800ea42:	ea06 76e6 	andls.w	r6, r6, r6, asr #31
 800ea46:	e7cc      	b.n	800e9e2 <lv_draw_mask_angle+0x74>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 800ea48:	f104 0310 	add.w	r3, r4, #16
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	b233      	sxth	r3, r6
 800ea50:	462a      	mov	r2, r5
 800ea52:	4639      	mov	r1, r7
 800ea54:	4640      	mov	r0, r8
 800ea56:	f7ff fcb7 	bl	800e3c8 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800ea5a:	4682      	mov	sl, r0
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d1cc      	bne.n	800e9fa <lv_draw_mask_angle+0x8c>
                lv_memset_00(&mask_buf[0], tmp);
 800ea60:	4631      	mov	r1, r6
 800ea62:	4640      	mov	r0, r8
 800ea64:	f013 fce2 	bl	802242c <lv_memset_00>
 800ea68:	e7c7      	b.n	800e9fa <lv_draw_mask_angle+0x8c>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800ea6a:	eba9 010b 	sub.w	r1, r9, fp
 800ea6e:	4640      	mov	r0, r8
 800ea70:	f013 fcdc 	bl	802242c <lv_memset_00>
 800ea74:	e7d6      	b.n	800ea24 <lv_draw_mask_angle+0xb6>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 800ea76:	2ab4      	cmp	r2, #180	; 0xb4
 800ea78:	dd71      	ble.n	800eb5e <lv_draw_mask_angle+0x1f0>
 800ea7a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800ea7e:	28b4      	cmp	r0, #180	; 0xb4
 800ea80:	f340 808c 	ble.w	800eb9c <lv_draw_mask_angle+0x22e>
 800ea84:	4282      	cmp	r2, r0
 800ea86:	f340 8089 	ble.w	800eb9c <lv_draw_mask_angle+0x22e>
        if(abs_y > p->cfg.vertex_p.y) {
 800ea8a:	42ab      	cmp	r3, r5
 800ea8c:	f2c0 80be 	blt.w	800ec0c <lv_draw_mask_angle+0x29e>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 800ea90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ea92:	fb06 f303 	mul.w	r3, r6, r3
 800ea96:	129b      	asrs	r3, r3, #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 800ea98:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ea9c:	fb06 cc0c 	mla	ip, r6, ip, ip
 800eaa0:	ea4f 2cac 	mov.w	ip, ip, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800eaa4:	b292      	uxth	r2, r2
 800eaa6:	f2a2 160f 	subw	r6, r2, #271	; 0x10f
 800eaaa:	b2b6      	uxth	r6, r6
 800eaac:	2e58      	cmp	r6, #88	; 0x58
 800eaae:	d830      	bhi.n	800eb12 <lv_draw_mask_angle+0x1a4>
 800eab0:	f1bc 0f00 	cmp.w	ip, #0
 800eab4:	da33      	bge.n	800eb1e <lv_draw_mask_angle+0x1b0>
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800eab6:	b280      	uxth	r0, r0
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800eab8:	f04f 0c00 	mov.w	ip, #0
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800eabc:	385b      	subs	r0, #91	; 0x5b
 800eabe:	b280      	uxth	r0, r0
 800eac0:	28b2      	cmp	r0, #178	; 0xb2
 800eac2:	bf98      	it	ls
 800eac4:	ea0c 7cec 	andls.w	ip, ip, ip, asr #31
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 800eac8:	eba3 060c 	sub.w	r6, r3, ip
        int32_t tmp = start_angle_last + dist - rel_x;
 800eacc:	eb0c 0666 	add.w	r6, ip, r6, asr #1
 800ead0:	1a76      	subs	r6, r6, r1
        if(tmp > len) tmp = len;
 800ead2:	454e      	cmp	r6, r9
 800ead4:	bfa8      	it	ge
 800ead6:	464e      	movge	r6, r9
        if(tmp > 0) {
 800ead8:	2e00      	cmp	r6, #0
 800eada:	dc29      	bgt.n	800eb30 <lv_draw_mask_angle+0x1c2>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800eadc:	f04f 0a01 	mov.w	sl, #1
        if(tmp > len) tmp = len;
 800eae0:	454e      	cmp	r6, r9
 800eae2:	bfa8      	it	ge
 800eae4:	464e      	movge	r6, r9
        if(tmp < 0) tmp = 0;
 800eae6:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 800eaea:	44d8      	add	r8, fp
 800eaec:	fa1f f18b 	uxth.w	r1, fp
 800eaf0:	eba9 0301 	sub.w	r3, r9, r1
 800eaf4:	4439      	add	r1, r7
 800eaf6:	3410      	adds	r4, #16
 800eaf8:	9400      	str	r4, [sp, #0]
 800eafa:	b21b      	sxth	r3, r3
 800eafc:	462a      	mov	r2, r5
 800eafe:	b209      	sxth	r1, r1
 800eb00:	4640      	mov	r0, r8
 800eb02:	f7ff fc61 	bl	800e3c8 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 800eb06:	4606      	mov	r6, r0
 800eb08:	b318      	cbz	r0, 800eb52 <lv_draw_mask_angle+0x1e4>
        else return LV_DRAW_MASK_RES_CHANGED;
 800eb0a:	45b2      	cmp	sl, r6
 800eb0c:	bf18      	it	ne
 800eb0e:	2602      	movne	r6, #2
 800eb10:	e03c      	b.n	800eb8c <lv_draw_mask_angle+0x21e>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 800eb12:	3a5b      	subs	r2, #91	; 0x5b
 800eb14:	b292      	uxth	r2, r2
 800eb16:	2ab2      	cmp	r2, #178	; 0xb2
 800eb18:	bf98      	it	ls
 800eb1a:	ea0c 7cec 	andls.w	ip, ip, ip, asr #31
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 800eb1e:	b280      	uxth	r0, r0
 800eb20:	f2a0 120f 	subw	r2, r0, #271	; 0x10f
 800eb24:	b292      	uxth	r2, r2
 800eb26:	2a58      	cmp	r2, #88	; 0x58
 800eb28:	d8c8      	bhi.n	800eabc <lv_draw_mask_angle+0x14e>
 800eb2a:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
 800eb2e:	e7cb      	b.n	800eac8 <lv_draw_mask_angle+0x15a>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 800eb30:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	b233      	sxth	r3, r6
 800eb38:	462a      	mov	r2, r5
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	f7ff fc43 	bl	800e3c8 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 800eb42:	4682      	mov	sl, r0
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d1cb      	bne.n	800eae0 <lv_draw_mask_angle+0x172>
                lv_memset_00(&mask_buf[0], tmp);
 800eb48:	4631      	mov	r1, r6
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	f013 fc6e 	bl	802242c <lv_memset_00>
 800eb50:	e7c6      	b.n	800eae0 <lv_draw_mask_angle+0x172>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 800eb52:	eba9 010b 	sub.w	r1, r9, fp
 800eb56:	4640      	mov	r0, r8
 800eb58:	f013 fc68 	bl	802242c <lv_memset_00>
 800eb5c:	e7d5      	b.n	800eb0a <lv_draw_mask_angle+0x19c>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800eb5e:	42ab      	cmp	r3, r5
 800eb60:	dc5c      	bgt.n	800ec1c <lv_draw_mask_angle+0x2ae>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800eb62:	2603      	movs	r6, #3
        if(p->cfg.end_angle == 180) {
 800eb64:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800eb68:	2bb4      	cmp	r3, #180	; 0xb4
 800eb6a:	d055      	beq.n	800ec18 <lv_draw_mask_angle+0x2aa>
        else if(p->cfg.end_angle == 0) {
 800eb6c:	bb6b      	cbnz	r3, 800ebca <lv_draw_mask_angle+0x25c>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800eb6e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800eb72:	42a8      	cmp	r0, r5
 800eb74:	bfcc      	ite	gt
 800eb76:	2001      	movgt	r0, #1
 800eb78:	2003      	movle	r0, #3
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800eb7a:	b13e      	cbz	r6, 800eb8c <lv_draw_mask_angle+0x21e>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 800eb7c:	2e03      	cmp	r6, #3
 800eb7e:	d03e      	beq.n	800ebfe <lv_draw_mask_angle+0x290>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 800eb80:	2e01      	cmp	r6, #1
 800eb82:	d145      	bne.n	800ec10 <lv_draw_mask_angle+0x2a2>
 800eb84:	2801      	cmp	r0, #1
 800eb86:	bf0c      	ite	eq
 800eb88:	4606      	moveq	r6, r0
 800eb8a:	2602      	movne	r6, #2
}
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	b003      	add	sp, #12
 800eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800eb94:	42ab      	cmp	r3, r5
 800eb96:	dd03      	ble.n	800eba0 <lv_draw_mask_angle+0x232>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800eb98:	2603      	movs	r6, #3
 800eb9a:	e040      	b.n	800ec1e <lv_draw_mask_angle+0x2b0>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800eb9c:	42ab      	cmp	r3, r5
 800eb9e:	dd46      	ble.n	800ec2e <lv_draw_mask_angle+0x2c0>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 800eba0:	f104 0310 	add.w	r3, r4, #16
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	464b      	mov	r3, r9
 800eba8:	462a      	mov	r2, r5
 800ebaa:	4639      	mov	r1, r7
 800ebac:	4640      	mov	r0, r8
 800ebae:	f7ff fc0b 	bl	800e3c8 <lv_draw_mask_line>
 800ebb2:	4606      	mov	r6, r0
        if(p->cfg.end_angle == 180) {
 800ebb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ebb8:	2bb4      	cmp	r3, #180	; 0xb4
 800ebba:	d1d7      	bne.n	800eb6c <lv_draw_mask_angle+0x1fe>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800ebbc:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800ebc0:	42a8      	cmp	r0, r5
 800ebc2:	bfcc      	ite	gt
 800ebc4:	2003      	movgt	r0, #3
 800ebc6:	2001      	movle	r0, #1
 800ebc8:	e7d7      	b.n	800eb7a <lv_draw_mask_angle+0x20c>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 800ebca:	2bb3      	cmp	r3, #179	; 0xb3
 800ebcc:	dc05      	bgt.n	800ebda <lv_draw_mask_angle+0x26c>
 800ebce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ebd2:	42ab      	cmp	r3, r5
 800ebd4:	dd05      	ble.n	800ebe2 <lv_draw_mask_angle+0x274>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800ebd6:	2003      	movs	r0, #3
 800ebd8:	e7cf      	b.n	800eb7a <lv_draw_mask_angle+0x20c>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800ebda:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ebde:	42ab      	cmp	r3, r5
 800ebe0:	dd18      	ble.n	800ec14 <lv_draw_mask_angle+0x2a6>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 800ebe2:	343c      	adds	r4, #60	; 0x3c
 800ebe4:	9400      	str	r4, [sp, #0]
 800ebe6:	464b      	mov	r3, r9
 800ebe8:	462a      	mov	r2, r5
 800ebea:	4639      	mov	r1, r7
 800ebec:	4640      	mov	r0, r8
 800ebee:	f7ff fbeb 	bl	800e3c8 <lv_draw_mask_line>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	d0ca      	beq.n	800eb8c <lv_draw_mask_angle+0x21e>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d1c0      	bne.n	800eb7c <lv_draw_mask_angle+0x20e>
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	e7c6      	b.n	800eb8c <lv_draw_mask_angle+0x21e>
        else return LV_DRAW_MASK_RES_CHANGED;
 800ebfe:	2803      	cmp	r0, #3
 800ec00:	bf0c      	ite	eq
 800ec02:	2600      	moveq	r6, #0
 800ec04:	2602      	movne	r6, #2
 800ec06:	e7c1      	b.n	800eb8c <lv_draw_mask_angle+0x21e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800ec08:	2601      	movs	r6, #1
 800ec0a:	e7bf      	b.n	800eb8c <lv_draw_mask_angle+0x21e>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800ec0c:	2601      	movs	r6, #1
 800ec0e:	e7bd      	b.n	800eb8c <lv_draw_mask_angle+0x21e>
        else return LV_DRAW_MASK_RES_CHANGED;
 800ec10:	2602      	movs	r6, #2
 800ec12:	e7bb      	b.n	800eb8c <lv_draw_mask_angle+0x21e>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800ec14:	2003      	movs	r0, #3
 800ec16:	e7b0      	b.n	800eb7a <lv_draw_mask_angle+0x20c>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 800ec18:	2001      	movs	r0, #1
 800ec1a:	e7ae      	b.n	800eb7a <lv_draw_mask_angle+0x20c>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800ec1c:	2601      	movs	r6, #1
        if(p->cfg.end_angle == 180) {
 800ec1e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800ec22:	2bb4      	cmp	r3, #180	; 0xb4
 800ec24:	d1a2      	bne.n	800eb6c <lv_draw_mask_angle+0x1fe>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800ec26:	2003      	movs	r0, #3
 800ec28:	e7a7      	b.n	800eb7a <lv_draw_mask_angle+0x20c>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800ec2a:	2603      	movs	r6, #3
 800ec2c:	e7f7      	b.n	800ec1e <lv_draw_mask_angle+0x2b0>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800ec2e:	2603      	movs	r6, #3
 800ec30:	e798      	b.n	800eb64 <lv_draw_mask_angle+0x1f6>
        else if(p->cfg.start_angle == 0) {
 800ec32:	2a00      	cmp	r2, #0
 800ec34:	d1ae      	bne.n	800eb94 <lv_draw_mask_angle+0x226>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 800ec36:	42ab      	cmp	r3, r5
 800ec38:	dcf7      	bgt.n	800ec2a <lv_draw_mask_angle+0x2bc>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800ec3a:	2601      	movs	r6, #1
 800ec3c:	e792      	b.n	800eb64 <lv_draw_mask_angle+0x1f6>

0800ec3e <lv_draw_mask_radius>:
{
 800ec3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec42:	b083      	sub	sp, #12
 800ec44:	4605      	mov	r5, r0
 800ec46:	460e      	mov	r6, r1
 800ec48:	461c      	mov	r4, r3
 800ec4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bool outer = p->cfg.outer;
 800ec4c:	7c98      	ldrb	r0, [r3, #18]
    dest->y1 = src->y1;
 800ec4e:	f9b3 c00a 	ldrsh.w	ip, [r3, #10]
    dest->y2 = src->y2;
 800ec52:	f9b3 800e 	ldrsh.w	r8, [r3, #14]
    if(outer == false) {
 800ec56:	f010 0001 	ands.w	r0, r0, #1
 800ec5a:	d133      	bne.n	800ecc4 <lv_draw_mask_radius+0x86>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 800ec5c:	4562      	cmp	r2, ip
 800ec5e:	f2c0 8180 	blt.w	800ef62 <lv_draw_mask_radius+0x324>
 800ec62:	4542      	cmp	r2, r8
 800ec64:	f300 8181 	bgt.w	800ef6a <lv_draw_mask_radius+0x32c>
    int32_t radius = p->cfg.radius;
 800ec68:	f9b3 e010 	ldrsh.w	lr, [r3, #16]
    dest->x1 = src->x1;
 800ec6c:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
    dest->x2 = src->x2;
 800ec70:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800ec74:	eb09 010e 	add.w	r1, r9, lr
 800ec78:	428e      	cmp	r6, r1
 800ec7a:	db04      	blt.n	800ec86 <lv_draw_mask_radius+0x48>
 800ec7c:	19a1      	adds	r1, r4, r6
 800ec7e:	eba7 0a0e 	sub.w	sl, r7, lr
 800ec82:	4551      	cmp	r1, sl
 800ec84:	dd07      	ble.n	800ec96 <lv_draw_mask_radius+0x58>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800ec86:	eb0c 010e 	add.w	r1, ip, lr
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800ec8a:	428a      	cmp	r2, r1
 800ec8c:	db48      	blt.n	800ed20 <lv_draw_mask_radius+0xe2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800ec8e:	eba8 010e 	sub.w	r1, r8, lr
 800ec92:	428a      	cmp	r2, r1
 800ec94:	dc44      	bgt.n	800ed20 <lv_draw_mask_radius+0xe2>
        if(outer == false) {
 800ec96:	bb60      	cbnz	r0, 800ecf2 <lv_draw_mask_radius+0xb4>
            int32_t last = rect.x1 - abs_x;
 800ec98:	eba9 0906 	sub.w	r9, r9, r6
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800ec9c:	454c      	cmp	r4, r9
 800ec9e:	f2c0 8168 	blt.w	800ef72 <lv_draw_mask_radius+0x334>
            if(last >= 0) {
 800eca2:	f1b9 0f00 	cmp.w	r9, #0
 800eca6:	da14      	bge.n	800ecd2 <lv_draw_mask_radius+0x94>
            int32_t first = rect.x2 - abs_x + 1;
 800eca8:	1bbe      	subs	r6, r7, r6
 800ecaa:	3601      	adds	r6, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800ecac:	2e00      	cmp	r6, #0
 800ecae:	f340 8162 	ble.w	800ef76 <lv_draw_mask_radius+0x338>
            else if(first < len) {
 800ecb2:	42b4      	cmp	r4, r6
 800ecb4:	dc12      	bgt.n	800ecdc <lv_draw_mask_radius+0x9e>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800ecb6:	f1b9 0f00 	cmp.w	r9, #0
 800ecba:	d118      	bne.n	800ecee <lv_draw_mask_radius+0xb0>
 800ecbc:	42b4      	cmp	r4, r6
 800ecbe:	d116      	bne.n	800ecee <lv_draw_mask_radius+0xb0>
 800ecc0:	2001      	movs	r0, #1
 800ecc2:	e14f      	b.n	800ef64 <lv_draw_mask_radius+0x326>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 800ecc4:	4562      	cmp	r2, ip
 800ecc6:	f2c0 8152 	blt.w	800ef6e <lv_draw_mask_radius+0x330>
 800ecca:	4542      	cmp	r2, r8
 800eccc:	ddcc      	ble.n	800ec68 <lv_draw_mask_radius+0x2a>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800ecce:	2001      	movs	r0, #1
 800ecd0:	e148      	b.n	800ef64 <lv_draw_mask_radius+0x326>
                lv_memset_00(&mask_buf[0], last);
 800ecd2:	4649      	mov	r1, r9
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f013 fba9 	bl	802242c <lv_memset_00>
 800ecda:	e7e5      	b.n	800eca8 <lv_draw_mask_radius+0x6a>
                lv_memset_00(&mask_buf[first], len - first);
 800ecdc:	1ba1      	subs	r1, r4, r6
 800ecde:	19a8      	adds	r0, r5, r6
 800ece0:	f013 fba4 	bl	802242c <lv_memset_00>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800ece4:	f1b9 0f00 	cmp.w	r9, #0
 800ece8:	d101      	bne.n	800ecee <lv_draw_mask_radius+0xb0>
            else return LV_DRAW_MASK_RES_CHANGED;
 800ecea:	2002      	movs	r0, #2
 800ecec:	e13a      	b.n	800ef64 <lv_draw_mask_radius+0x326>
 800ecee:	2002      	movs	r0, #2
 800ecf0:	e138      	b.n	800ef64 <lv_draw_mask_radius+0x326>
            int32_t first = rect.x1 - abs_x;
 800ecf2:	eba9 0006 	sub.w	r0, r9, r6
            if(first < 0) first = 0;
 800ecf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
            if(first <= len) {
 800ecfa:	42a0      	cmp	r0, r4
 800ecfc:	f300 813d 	bgt.w	800ef7a <lv_draw_mask_radius+0x33c>
                int32_t last = rect.x2 - abs_x - first + 1;
 800ed00:	1bb9      	subs	r1, r7, r6
 800ed02:	1a09      	subs	r1, r1, r0
 800ed04:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 800ed06:	1843      	adds	r3, r0, r1
 800ed08:	429c      	cmp	r4, r3
 800ed0a:	bfb8      	it	lt
 800ed0c:	1a21      	sublt	r1, r4, r0
                if(last >= 0) {
 800ed0e:	2900      	cmp	r1, #0
 800ed10:	da01      	bge.n	800ed16 <lv_draw_mask_radius+0xd8>
        return LV_DRAW_MASK_RES_CHANGED;
 800ed12:	2002      	movs	r0, #2
 800ed14:	e126      	b.n	800ef64 <lv_draw_mask_radius+0x326>
                    lv_memset_00(&mask_buf[first], last);
 800ed16:	4428      	add	r0, r5
 800ed18:	f013 fb88 	bl	802242c <lv_memset_00>
        return LV_DRAW_MASK_RES_CHANGED;
 800ed1c:	2002      	movs	r0, #2
 800ed1e:	e121      	b.n	800ef64 <lv_draw_mask_radius+0x326>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 800ed20:	eba9 0106 	sub.w	r1, r9, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ed24:	3701      	adds	r7, #1
 800ed26:	eba7 0709 	sub.w	r7, r7, r9
 800ed2a:	b2bf      	uxth	r7, r7
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ed2c:	fa1f fc8c 	uxth.w	ip, ip
    abs_y -= rect.y1;
 800ed30:	b292      	uxth	r2, r2
 800ed32:	eba2 060c 	sub.w	r6, r2, ip
 800ed36:	fa1f f986 	uxth.w	r9, r6
    if(abs_y < radius) {
 800ed3a:	b236      	sxth	r6, r6
 800ed3c:	45b6      	cmp	lr, r6
 800ed3e:	dd3a      	ble.n	800edb6 <lv_draw_mask_radius+0x178>
        cir_y = radius - abs_y - 1;
 800ed40:	44f4      	add	ip, lr
 800ed42:	43d2      	mvns	r2, r2
 800ed44:	4494      	add	ip, r2
 800ed46:	fa0f fc8c 	sxth.w	ip, ip
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 800ed4a:	695a      	ldr	r2, [r3, #20]
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 800ed4c:	68d3      	ldr	r3, [r2, #12]
 800ed4e:	f10c 0601 	add.w	r6, ip, #1
 800ed52:	f833 901c 	ldrh.w	r9, [r3, ip, lsl #1]
 800ed56:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 800ed5a:	eba6 0609 	sub.w	r6, r6, r9
 800ed5e:	fa1f f886 	uxth.w	r8, r6
 800ed62:	b236      	sxth	r6, r6
    *x_start = c->x_start_on_y[y];
 800ed64:	6893      	ldr	r3, [r2, #8]
 800ed66:	f833 c01c 	ldrh.w	ip, [r3, ip, lsl #1]
    return &c->cir_opa[c->opa_start_on_y[y]];
 800ed6a:	6852      	ldr	r2, [r2, #4]
 800ed6c:	444a      	add	r2, r9
    lv_coord_t cir_x_right = k + w - radius + x_start;
 800ed6e:	b289      	uxth	r1, r1
 800ed70:	fa1f fe8e 	uxth.w	lr, lr
 800ed74:	eba7 030e 	sub.w	r3, r7, lr
 800ed78:	440b      	add	r3, r1
 800ed7a:	4463      	add	r3, ip
 800ed7c:	b29f      	uxth	r7, r3
 800ed7e:	9701      	str	r7, [sp, #4]
 800ed80:	b21b      	sxth	r3, r3
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 800ed82:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800ed86:	4471      	add	r1, lr
 800ed88:	eba1 0c0c 	sub.w	ip, r1, ip
 800ed8c:	fa0f fb8c 	sxth.w	fp, ip
    if(outer == false) {
 800ed90:	b1d0      	cbz	r0, 800edc8 <lv_draw_mask_radius+0x18a>
        for(i = 0; i < aa_len; i++) {
 800ed92:	2e00      	cmp	r6, #0
 800ed94:	f340 80c4 	ble.w	800ef20 <lv_draw_mask_radius+0x2e2>
 800ed98:	3e01      	subs	r6, #1
 800ed9a:	4432      	add	r2, r6
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	465f      	mov	r7, fp
 800eda0:	eb05 0c0b 	add.w	ip, r5, fp
 800eda4:	18ee      	adds	r6, r5, r3
 800eda6:	f103 0e01 	add.w	lr, r3, #1
 800edaa:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 800edae:	b289      	uxth	r1, r1
 800edb0:	46f0      	mov	r8, lr
 800edb2:	4488      	add	r8, r1
 800edb4:	e083      	b.n	800eebe <lv_draw_mask_radius+0x280>
        cir_y = abs_y - (h - radius);
 800edb6:	44f4      	add	ip, lr
 800edb8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800edbc:	44cc      	add	ip, r9
 800edbe:	ebac 0c08 	sub.w	ip, ip, r8
 800edc2:	fa0f fc8c 	sxth.w	ip, ip
 800edc6:	e7c0      	b.n	800ed4a <lv_draw_mask_radius+0x10c>
        for(i = 0; i < aa_len; i++) {
 800edc8:	2e00      	cmp	r6, #0
 800edca:	dd67      	ble.n	800ee9c <lv_draw_mask_radius+0x25e>
 800edcc:	4432      	add	r2, r6
 800edce:	4618      	mov	r0, r3
 800edd0:	4659      	mov	r1, fp
 800edd2:	eb05 0e0b 	add.w	lr, r5, fp
 800edd6:	eb05 0c03 	add.w	ip, r5, r3
 800edda:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 800edde:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ede2:	fa1f f888 	uxth.w	r8, r8
 800ede6:	eba9 0908 	sub.w	r9, r9, r8
    if(mask_new <= LV_OPA_MIN) return 0;
 800edea:	469a      	mov	sl, r3
 800edec:	9501      	str	r5, [sp, #4]
 800edee:	e00e      	b.n	800ee0e <lv_draw_mask_radius+0x1d0>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800edf0:	463b      	mov	r3, r7
 800edf2:	e021      	b.n	800ee38 <lv_draw_mask_radius+0x1fa>
    if(mask_new <= LV_OPA_MIN) return 0;
 800edf4:	2300      	movs	r3, #0
 800edf6:	e01f      	b.n	800ee38 <lv_draw_mask_radius+0x1fa>
 800edf8:	2700      	movs	r7, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800edfa:	f888 7000 	strb.w	r7, [r8]
        for(i = 0; i < aa_len; i++) {
 800edfe:	3001      	adds	r0, #1
 800ee00:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800ee04:	3901      	subs	r1, #1
 800ee06:	f10c 0c01 	add.w	ip, ip, #1
 800ee0a:	4549      	cmp	r1, r9
 800ee0c:	d02a      	beq.n	800ee64 <lv_draw_mask_radius+0x226>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 800ee0e:	f812 7d01 	ldrb.w	r7, [r2, #-1]!
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800ee12:	2800      	cmp	r0, #0
 800ee14:	db12      	blt.n	800ee3c <lv_draw_mask_radius+0x1fe>
 800ee16:	4284      	cmp	r4, r0
 800ee18:	dd10      	ble.n	800ee3c <lv_draw_mask_radius+0x1fe>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800ee1a:	46e0      	mov	r8, ip
 800ee1c:	f89c 3000 	ldrb.w	r3, [ip]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800ee20:	2bfc      	cmp	r3, #252	; 0xfc
 800ee22:	d8e5      	bhi.n	800edf0 <lv_draw_mask_radius+0x1b2>
    if(mask_new <= LV_OPA_MIN) return 0;
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d9e5      	bls.n	800edf4 <lv_draw_mask_radius+0x1b6>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800ee28:	fb07 f303 	mul.w	r3, r7, r3
 800ee2c:	eb03 2503 	add.w	r5, r3, r3, lsl #8
 800ee30:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
 800ee34:	f3c3 53c7 	ubfx	r3, r3, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800ee38:	f888 3000 	strb.w	r3, [r8]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 800ee3c:	2900      	cmp	r1, #0
 800ee3e:	dbde      	blt.n	800edfe <lv_draw_mask_radius+0x1c0>
 800ee40:	428c      	cmp	r4, r1
 800ee42:	dddc      	ble.n	800edfe <lv_draw_mask_radius+0x1c0>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800ee44:	46f0      	mov	r8, lr
 800ee46:	f89e 3000 	ldrb.w	r3, [lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800ee4a:	2bfc      	cmp	r3, #252	; 0xfc
 800ee4c:	d8d5      	bhi.n	800edfa <lv_draw_mask_radius+0x1bc>
    if(mask_new <= LV_OPA_MIN) return 0;
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d9d2      	bls.n	800edf8 <lv_draw_mask_radius+0x1ba>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800ee52:	fb03 f707 	mul.w	r7, r3, r7
 800ee56:	eb07 2307 	add.w	r3, r7, r7, lsl #8
 800ee5a:	eb07 17c3 	add.w	r7, r7, r3, lsl #7
 800ee5e:	f3c7 57c7 	ubfx	r7, r7, #23, #8
 800ee62:	e7ca      	b.n	800edfa <lv_draw_mask_radius+0x1bc>
        for(i = 0; i < aa_len; i++) {
 800ee64:	4653      	mov	r3, sl
 800ee66:	9d01      	ldr	r5, [sp, #4]
 800ee68:	4630      	mov	r0, r6
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 800ee6a:	4403      	add	r3, r0
 800ee6c:	42a3      	cmp	r3, r4
 800ee6e:	bfa8      	it	ge
 800ee70:	4623      	movge	r3, r4
 800ee72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ee76:	b21b      	sxth	r3, r3
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 800ee78:	1ae1      	subs	r1, r4, r3
 800ee7a:	18e8      	adds	r0, r5, r3
 800ee7c:	f013 fad6 	bl	802242c <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 800ee80:	ebab 0106 	sub.w	r1, fp, r6
 800ee84:	3101      	adds	r1, #1
 800ee86:	42a1      	cmp	r1, r4
 800ee88:	bfa8      	it	ge
 800ee8a:	4621      	movge	r1, r4
 800ee8c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        lv_memset_00(&mask_buf[0], cir_x_left);
 800ee90:	b209      	sxth	r1, r1
 800ee92:	4628      	mov	r0, r5
 800ee94:	f013 faca 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800ee98:	2002      	movs	r0, #2
 800ee9a:	e063      	b.n	800ef64 <lv_draw_mask_radius+0x326>
        for(i = 0; i < aa_len; i++) {
 800ee9c:	2000      	movs	r0, #0
 800ee9e:	e7e4      	b.n	800ee6a <lv_draw_mask_radius+0x22c>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800eea0:	468e      	mov	lr, r1
 800eea2:	e025      	b.n	800eef0 <lv_draw_mask_radius+0x2b2>
    if(mask_new <= LV_OPA_MIN) return 0;
 800eea4:	f04f 0e00 	mov.w	lr, #0
 800eea8:	e022      	b.n	800eef0 <lv_draw_mask_radius+0x2b2>
 800eeaa:	2100      	movs	r1, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800eeac:	f889 1000 	strb.w	r1, [r9]
        for(i = 0; i < aa_len; i++) {
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800eeb6:	3f01      	subs	r7, #1
 800eeb8:	3601      	adds	r6, #1
 800eeba:	4540      	cmp	r0, r8
 800eebc:	d030      	beq.n	800ef20 <lv_draw_mask_radius+0x2e2>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 800eebe:	f812 1901 	ldrb.w	r1, [r2], #-1
 800eec2:	43c9      	mvns	r1, r1
 800eec4:	b2c9      	uxtb	r1, r1
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800eec6:	2800      	cmp	r0, #0
 800eec8:	db14      	blt.n	800eef4 <lv_draw_mask_radius+0x2b6>
 800eeca:	4284      	cmp	r4, r0
 800eecc:	dd12      	ble.n	800eef4 <lv_draw_mask_radius+0x2b6>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800eece:	46b1      	mov	r9, r6
 800eed0:	f896 e000 	ldrb.w	lr, [r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800eed4:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
 800eed8:	d8e2      	bhi.n	800eea0 <lv_draw_mask_radius+0x262>
    if(mask_new <= LV_OPA_MIN) return 0;
 800eeda:	f1be 0f02 	cmp.w	lr, #2
 800eede:	d9e1      	bls.n	800eea4 <lv_draw_mask_radius+0x266>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800eee0:	fb0e fe01 	mul.w	lr, lr, r1
 800eee4:	eb0e 2a0e 	add.w	sl, lr, lr, lsl #8
 800eee8:	eb0e 1eca 	add.w	lr, lr, sl, lsl #7
 800eeec:	f3ce 5ec7 	ubfx	lr, lr, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800eef0:	f889 e000 	strb.w	lr, [r9]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 800eef4:	2f00      	cmp	r7, #0
 800eef6:	dbdb      	blt.n	800eeb0 <lv_draw_mask_radius+0x272>
 800eef8:	42bc      	cmp	r4, r7
 800eefa:	ddd9      	ble.n	800eeb0 <lv_draw_mask_radius+0x272>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800eefc:	46e1      	mov	r9, ip
 800eefe:	f89c e000 	ldrb.w	lr, [ip]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800ef02:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
 800ef06:	d8d1      	bhi.n	800eeac <lv_draw_mask_radius+0x26e>
    if(mask_new <= LV_OPA_MIN) return 0;
 800ef08:	f1be 0f02 	cmp.w	lr, #2
 800ef0c:	d9cd      	bls.n	800eeaa <lv_draw_mask_radius+0x26c>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800ef0e:	fb0e f101 	mul.w	r1, lr, r1
 800ef12:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
 800ef16:	eb01 11ce 	add.w	r1, r1, lr, lsl #7
 800ef1a:	f3c1 51c7 	ubfx	r1, r1, #23, #8
 800ef1e:	e7c5      	b.n	800eeac <lv_draw_mask_radius+0x26e>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 800ef20:	f10b 0101 	add.w	r1, fp, #1
 800ef24:	42a1      	cmp	r1, r4
 800ef26:	bfa8      	it	ge
 800ef28:	4621      	movge	r1, r4
 800ef2a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800ef2e:	b208      	sxth	r0, r1
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800ef30:	429c      	cmp	r4, r3
 800ef32:	dd0a      	ble.n	800ef4a <lv_draw_mask_radius+0x30c>
 800ef34:	1a1b      	subs	r3, r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	db0f      	blt.n	800ef5a <lv_draw_mask_radius+0x31c>
 800ef3a:	9b01      	ldr	r3, [sp, #4]
 800ef3c:	1a59      	subs	r1, r3, r1
 800ef3e:	b209      	sxth	r1, r1
        lv_memset_00(&mask_buf[clr_start], clr_len);
 800ef40:	4428      	add	r0, r5
 800ef42:	f013 fa73 	bl	802242c <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800ef46:	2002      	movs	r0, #2
 800ef48:	e00c      	b.n	800ef64 <lv_draw_mask_radius+0x326>
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 800ef4a:	1a22      	subs	r2, r4, r0
 800ef4c:	2a00      	cmp	r2, #0
 800ef4e:	db06      	blt.n	800ef5e <lv_draw_mask_radius+0x320>
 800ef50:	429c      	cmp	r4, r3
 800ef52:	dcf2      	bgt.n	800ef3a <lv_draw_mask_radius+0x2fc>
 800ef54:	1a61      	subs	r1, r4, r1
 800ef56:	b209      	sxth	r1, r1
 800ef58:	e7f2      	b.n	800ef40 <lv_draw_mask_radius+0x302>
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	e7f0      	b.n	800ef40 <lv_draw_mask_radius+0x302>
 800ef5e:	2100      	movs	r1, #0
 800ef60:	e7ee      	b.n	800ef40 <lv_draw_mask_radius+0x302>
            return LV_DRAW_MASK_RES_TRANSP;
 800ef62:	2000      	movs	r0, #0
}
 800ef64:	b003      	add	sp, #12
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	e7fa      	b.n	800ef64 <lv_draw_mask_radius+0x326>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800ef6e:	2001      	movs	r0, #1
 800ef70:	e7f8      	b.n	800ef64 <lv_draw_mask_radius+0x326>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 800ef72:	2000      	movs	r0, #0
 800ef74:	e7f6      	b.n	800ef64 <lv_draw_mask_radius+0x326>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 800ef76:	2000      	movs	r0, #0
 800ef78:	e7f4      	b.n	800ef64 <lv_draw_mask_radius+0x326>
        return LV_DRAW_MASK_RES_CHANGED;
 800ef7a:	2002      	movs	r0, #2
 800ef7c:	e7f2      	b.n	800ef64 <lv_draw_mask_radius+0x326>
	...

0800ef80 <lv_draw_mask_add>:
{
 800ef80:	b410      	push	{r4}
 800ef82:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 800ef84:	4c0e      	ldr	r4, [pc, #56]	; (800efc0 <lv_draw_mask_add+0x40>)
 800ef86:	fa5f fc83 	uxtb.w	ip, r3
 800ef8a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800ef8e:	b12a      	cbz	r2, 800ef9c <lv_draw_mask_add+0x1c>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800ef90:	3301      	adds	r3, #1
 800ef92:	2b10      	cmp	r3, #16
 800ef94:	d1f7      	bne.n	800ef86 <lv_draw_mask_add+0x6>
        return LV_MASK_ID_INV;
 800ef96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef9a:	e00b      	b.n	800efb4 <lv_draw_mask_add+0x34>
    if(i >= _LV_MASK_MAX_NUM) {
 800ef9c:	f1bc 0f0f 	cmp.w	ip, #15
 800efa0:	d80a      	bhi.n	800efb8 <lv_draw_mask_add+0x38>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	4a06      	ldr	r2, [pc, #24]	; (800efc0 <lv_draw_mask_add+0x40>)
 800efa6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 800efaa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800efae:	6059      	str	r1, [r3, #4]
    return i;
 800efb0:	fa0f f08c 	sxth.w	r0, ip
}
 800efb4:	bc10      	pop	{r4}
 800efb6:	4770      	bx	lr
        return LV_MASK_ID_INV;
 800efb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efbc:	e7fa      	b.n	800efb4 <lv_draw_mask_add+0x34>
 800efbe:	bf00      	nop
 800efc0:	20002888 	.word	0x20002888

0800efc4 <lv_draw_mask_apply>:
{
 800efc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc8:	b082      	sub	sp, #8
 800efca:	469a      	mov	sl, r3
    while(m->param) {
 800efcc:	4b10      	ldr	r3, [pc, #64]	; (800f010 <lv_draw_mask_apply+0x4c>)
 800efce:	681c      	ldr	r4, [r3, #0]
 800efd0:	b1e4      	cbz	r4, 800f00c <lv_draw_mask_apply+0x48>
 800efd2:	4607      	mov	r7, r0
 800efd4:	4688      	mov	r8, r1
 800efd6:	4691      	mov	r9, r2
 800efd8:	461e      	mov	r6, r3
    bool changed = false;
 800efda:	2500      	movs	r5, #0
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 800efdc:	9400      	str	r4, [sp, #0]
 800efde:	6824      	ldr	r4, [r4, #0]
 800efe0:	4653      	mov	r3, sl
 800efe2:	464a      	mov	r2, r9
 800efe4:	4641      	mov	r1, r8
 800efe6:	4638      	mov	r0, r7
 800efe8:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800efea:	4603      	mov	r3, r0
 800efec:	b150      	cbz	r0, 800f004 <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 800efee:	2802      	cmp	r0, #2
 800eff0:	bf08      	it	eq
 800eff2:	2501      	moveq	r5, #1
    while(m->param) {
 800eff4:	f856 4f08 	ldr.w	r4, [r6, #8]!
 800eff8:	2c00      	cmp	r4, #0
 800effa:	d1ef      	bne.n	800efdc <lv_draw_mask_apply+0x18>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800effc:	2d00      	cmp	r5, #0
 800effe:	bf14      	ite	ne
 800f000:	2302      	movne	r3, #2
 800f002:	2301      	moveq	r3, #1
}
 800f004:	4618      	mov	r0, r3
 800f006:	b002      	add	sp, #8
 800f008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800f00c:	2301      	movs	r3, #1
 800f00e:	e7f9      	b.n	800f004 <lv_draw_mask_apply+0x40>
 800f010:	20002888 	.word	0x20002888

0800f014 <lv_draw_mask_remove_id>:
{
 800f014:	4603      	mov	r3, r0
    if(id != LV_MASK_ID_INV) {
 800f016:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f01a:	d009      	beq.n	800f030 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800f01c:	4a05      	ldr	r2, [pc, #20]	; (800f034 <lv_draw_mask_remove_id+0x20>)
 800f01e:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 800f022:	2100      	movs	r1, #0
 800f024:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 800f028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f02c:	6059      	str	r1, [r3, #4]
 800f02e:	4770      	bx	lr
    _lv_draw_mask_common_dsc_t * p = NULL;
 800f030:	2000      	movs	r0, #0
}
 800f032:	4770      	bx	lr
 800f034:	20002888 	.word	0x20002888

0800f038 <lv_draw_mask_remove_custom>:
{
 800f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03a:	4606      	mov	r6, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800f03c:	4d09      	ldr	r5, [pc, #36]	; (800f064 <lv_draw_mask_remove_custom+0x2c>)
{
 800f03e:	2400      	movs	r4, #0
    _lv_draw_mask_common_dsc_t * p = NULL;
 800f040:	4627      	mov	r7, r4
 800f042:	e003      	b.n	800f04c <lv_draw_mask_remove_custom+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800f044:	3401      	adds	r4, #1
 800f046:	3508      	adds	r5, #8
 800f048:	2c10      	cmp	r4, #16
 800f04a:	d008      	beq.n	800f05e <lv_draw_mask_remove_custom+0x26>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	42b3      	cmp	r3, r6
 800f050:	d1f8      	bne.n	800f044 <lv_draw_mask_remove_custom+0xc>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800f052:	f855 7c04 	ldr.w	r7, [r5, #-4]
            lv_draw_mask_remove_id(i);
 800f056:	b220      	sxth	r0, r4
 800f058:	f7ff ffdc 	bl	800f014 <lv_draw_mask_remove_id>
 800f05c:	e7f2      	b.n	800f044 <lv_draw_mask_remove_custom+0xc>
}
 800f05e:	4638      	mov	r0, r7
 800f060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f062:	bf00      	nop
 800f064:	2000288c 	.word	0x2000288c

0800f068 <lv_draw_mask_free_param>:
{
 800f068:	b510      	push	{r4, lr}
 800f06a:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800f06c:	7903      	ldrb	r3, [r0, #4]
 800f06e:	2b02      	cmp	r3, #2
 800f070:	d002      	beq.n	800f078 <lv_draw_mask_free_param+0x10>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 800f072:	2b05      	cmp	r3, #5
 800f074:	d011      	beq.n	800f09a <lv_draw_mask_free_param+0x32>
}
 800f076:	bd10      	pop	{r4, pc}
        if(radius_p->circle) {
 800f078:	6943      	ldr	r3, [r0, #20]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0fb      	beq.n	800f076 <lv_draw_mask_free_param+0xe>
            if(radius_p->circle->life < 0) {
 800f07e:	691a      	ldr	r2, [r3, #16]
 800f080:	2a00      	cmp	r2, #0
 800f082:	db03      	blt.n	800f08c <lv_draw_mask_free_param+0x24>
                radius_p->circle->used_cnt--;
 800f084:	695a      	ldr	r2, [r3, #20]
 800f086:	3a01      	subs	r2, #1
 800f088:	615a      	str	r2, [r3, #20]
 800f08a:	e7f4      	b.n	800f076 <lv_draw_mask_free_param+0xe>
                lv_mem_free(radius_p->circle->cir_opa);
 800f08c:	6858      	ldr	r0, [r3, #4]
 800f08e:	f012 ff6b 	bl	8021f68 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 800f092:	6960      	ldr	r0, [r4, #20]
 800f094:	f012 ff68 	bl	8021f68 <lv_mem_free>
 800f098:	e7ed      	b.n	800f076 <lv_draw_mask_free_param+0xe>
        lv_mem_free(poly_p->cfg.points);
 800f09a:	6880      	ldr	r0, [r0, #8]
 800f09c:	f012 ff64 	bl	8021f68 <lv_mem_free>
}
 800f0a0:	e7e9      	b.n	800f076 <lv_draw_mask_free_param+0xe>
	...

0800f0a4 <_lv_draw_mask_cleanup>:
{
 800f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800f0a6:	4c0a      	ldr	r4, [pc, #40]	; (800f0d0 <_lv_draw_mask_cleanup+0x2c>)
 800f0a8:	f104 0770 	add.w	r7, r4, #112	; 0x70
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 800f0ac:	261c      	movs	r6, #28
 800f0ae:	e006      	b.n	800f0be <_lv_draw_mask_cleanup+0x1a>
 800f0b0:	4631      	mov	r1, r6
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	f013 f9ba 	bl	802242c <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800f0b8:	341c      	adds	r4, #28
 800f0ba:	42bc      	cmp	r4, r7
 800f0bc:	d006      	beq.n	800f0cc <_lv_draw_mask_cleanup+0x28>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 800f0be:	4625      	mov	r5, r4
 800f0c0:	6820      	ldr	r0, [r4, #0]
 800f0c2:	2800      	cmp	r0, #0
 800f0c4:	d0f4      	beq.n	800f0b0 <_lv_draw_mask_cleanup+0xc>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 800f0c6:	f012 ff4f 	bl	8021f68 <lv_mem_free>
 800f0ca:	e7f1      	b.n	800f0b0 <_lv_draw_mask_cleanup+0xc>
}
 800f0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	2000280c 	.word	0x2000280c

0800f0d4 <lv_draw_mask_is_any>:
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800f0d4:	b120      	cbz	r0, 800f0e0 <lv_draw_mask_is_any+0xc>
{
 800f0d6:	b570      	push	{r4, r5, r6, lr}
 800f0d8:	4606      	mov	r6, r0
 800f0da:	2400      	movs	r4, #0
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800f0dc:	4d16      	ldr	r5, [pc, #88]	; (800f138 <lv_draw_mask_is_any+0x64>)
 800f0de:	e00f      	b.n	800f100 <lv_draw_mask_is_any+0x2c>
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800f0e0:	4b15      	ldr	r3, [pc, #84]	; (800f138 <lv_draw_mask_is_any+0x64>)
 800f0e2:	6818      	ldr	r0, [r3, #0]
 800f0e4:	3800      	subs	r0, #0
 800f0e6:	bf18      	it	ne
 800f0e8:	2001      	movne	r0, #1
}
 800f0ea:	4770      	bx	lr
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800f0ec:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 800f0f0:	3108      	adds	r1, #8
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	f012 f92f 	bl	8021356 <_lv_area_is_in>
 800f0f8:	b1d8      	cbz	r0, 800f132 <lv_draw_mask_is_any+0x5e>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800f0fa:	3401      	adds	r4, #1
 800f0fc:	2c10      	cmp	r4, #16
 800f0fe:	d014      	beq.n	800f12a <lv_draw_mask_is_any+0x56>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 800f100:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
        if(comm_param == NULL) continue;
 800f104:	2900      	cmp	r1, #0
 800f106:	d0f8      	beq.n	800f0fa <lv_draw_mask_is_any+0x26>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800f108:	790b      	ldrb	r3, [r1, #4]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d10f      	bne.n	800f12e <lv_draw_mask_is_any+0x5a>
            if(radius_param->cfg.outer) {
 800f10e:	7c8b      	ldrb	r3, [r1, #18]
 800f110:	f013 0f01 	tst.w	r3, #1
 800f114:	d0ea      	beq.n	800f0ec <lv_draw_mask_is_any+0x18>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800f116:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 800f11a:	3108      	adds	r1, #8
 800f11c:	4630      	mov	r0, r6
 800f11e:	f012 f968 	bl	80213f2 <_lv_area_is_out>
 800f122:	2800      	cmp	r0, #0
 800f124:	d1e9      	bne.n	800f0fa <lv_draw_mask_is_any+0x26>
 800f126:	2001      	movs	r0, #1
 800f128:	e000      	b.n	800f12c <lv_draw_mask_is_any+0x58>
    return false;
 800f12a:	2000      	movs	r0, #0
}
 800f12c:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 800f12e:	2001      	movs	r0, #1
 800f130:	e7fc      	b.n	800f12c <lv_draw_mask_is_any+0x58>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800f132:	2001      	movs	r0, #1
 800f134:	e7fa      	b.n	800f12c <lv_draw_mask_is_any+0x58>
 800f136:	bf00      	nop
 800f138:	20002888 	.word	0x20002888

0800f13c <lv_draw_mask_line_points_init>:
{
 800f13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f140:	4604      	mov	r4, r0
 800f142:	460e      	mov	r6, r1
 800f144:	4615      	mov	r5, r2
 800f146:	4698      	mov	r8, r3
 800f148:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 800f14c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 800f150:	212c      	movs	r1, #44	; 0x2c
 800f152:	f013 f96b 	bl	802242c <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800f156:	42bd      	cmp	r5, r7
 800f158:	d056      	beq.n	800f208 <lv_draw_mask_line_points_init+0xcc>
    if(p1y > p2y) {
 800f15a:	42bd      	cmp	r5, r7
 800f15c:	dd05      	ble.n	800f16a <lv_draw_mask_line_points_init+0x2e>
 800f15e:	462b      	mov	r3, r5
 800f160:	463d      	mov	r5, r7
 800f162:	461f      	mov	r7, r3
 800f164:	4633      	mov	r3, r6
        p1x = t;
 800f166:	4646      	mov	r6, r8
        p2x = p1x;
 800f168:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
 800f16a:	8126      	strh	r6, [r4, #8]
    param->cfg.p1.y = p1y;
 800f16c:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
 800f16e:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 800f172:	81e7      	strh	r7, [r4, #14]
    param->cfg.side = side;
 800f174:	7c23      	ldrb	r3, [r4, #16]
 800f176:	f369 0301 	bfi	r3, r9, #0, #2
 800f17a:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
 800f17c:	8266      	strh	r6, [r4, #18]
    param->origo.y = p1y;
 800f17e:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 800f180:	eba8 0606 	sub.w	r6, r8, r6
 800f184:	1b7d      	subs	r5, r7, r5
 800f186:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
 800f18a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 800f18e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 800f192:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 800f196:	429a      	cmp	r2, r3
 800f198:	bfd4      	ite	le
 800f19a:	2200      	movle	r2, #0
 800f19c:	2201      	movgt	r2, #1
 800f19e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f1a2:	f362 0300 	bfi	r3, r2, #0, #1
 800f1a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
 800f1ae:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 800f1b0:	493c      	ldr	r1, [pc, #240]	; (800f2a4 <lv_draw_mask_line_points_init+0x168>)
 800f1b2:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 800f1b4:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
 800f1b6:	f013 0f01 	tst.w	r3, #1
 800f1ba:	d02d      	beq.n	800f218 <lv_draw_mask_line_points_init+0xdc>
        if(dx) {
 800f1bc:	b13e      	cbz	r6, 800f1ce <lv_draw_mask_line_points_init+0x92>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 800f1be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f1c2:	fb93 f3f6 	sdiv	r3, r3, r6
            param->yx_steep = (m * dy) >> 10;
 800f1c6:	fb05 f303 	mul.w	r3, r5, r3
 800f1ca:	129b      	asrs	r3, r3, #10
 800f1cc:	61e3      	str	r3, [r4, #28]
        if(dy) {
 800f1ce:	b13d      	cbz	r5, 800f1e0 <lv_draw_mask_line_points_init+0xa4>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800f1d0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 800f1d4:	fb97 f5f5 	sdiv	r5, r7, r5
            param->xy_steep = (m * dx) >> 10;
 800f1d8:	fb05 f606 	mul.w	r6, r5, r6
 800f1dc:	12b6      	asrs	r6, r6, #10
 800f1de:	61a6      	str	r6, [r4, #24]
        param->steep = param->yx_steep;
 800f1e0:	69e3      	ldr	r3, [r4, #28]
 800f1e2:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 800f1e4:	7c23      	ldrb	r3, [r4, #16]
 800f1e6:	f013 0303 	ands.w	r3, r3, #3
 800f1ea:	d12a      	bne.n	800f242 <lv_draw_mask_line_points_init+0x106>
 800f1ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f1f0:	f36f 0341 	bfc	r3, #1, #1
 800f1f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800f1f8:	6a23      	ldr	r3, [r4, #32]
 800f1fa:	109a      	asrs	r2, r3, #2
    if(param->steep < 0) param->spx = -param->spx;
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	bfb8      	it	lt
 800f200:	4252      	neglt	r2, r2
 800f202:	6262      	str	r2, [r4, #36]	; 0x24
}
 800f204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800f208:	f1b9 0f03 	cmp.w	r9, #3
 800f20c:	d1ad      	bne.n	800f16a <lv_draw_mask_line_points_init+0x2e>
        p1y--;
 800f20e:	3d01      	subs	r5, #1
 800f210:	b22d      	sxth	r5, r5
        p2y--;
 800f212:	3f01      	subs	r7, #1
 800f214:	b23f      	sxth	r7, r7
 800f216:	e7a0      	b.n	800f15a <lv_draw_mask_line_points_init+0x1e>
        if(dy) {
 800f218:	b13d      	cbz	r5, 800f22a <lv_draw_mask_line_points_init+0xee>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800f21a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f21e:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
 800f222:	fb06 f303 	mul.w	r3, r6, r3
 800f226:	129b      	asrs	r3, r3, #10
 800f228:	61a3      	str	r3, [r4, #24]
        if(dx) {
 800f22a:	b13e      	cbz	r6, 800f23c <lv_draw_mask_line_points_init+0x100>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800f22c:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 800f230:	fb98 f6f6 	sdiv	r6, r8, r6
            param->yx_steep = (m * dy) >> 10;
 800f234:	fb06 f505 	mul.w	r5, r6, r5
 800f238:	12ad      	asrs	r5, r5, #10
 800f23a:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 800f23c:	69a3      	ldr	r3, [r4, #24]
 800f23e:	6223      	str	r3, [r4, #32]
 800f240:	e7d0      	b.n	800f1e4 <lv_draw_mask_line_points_init+0xa8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800f242:	2b01      	cmp	r3, #1
 800f244:	d00b      	beq.n	800f25e <lv_draw_mask_line_points_init+0x122>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
 800f246:	2b02      	cmp	r3, #2
 800f248:	d010      	beq.n	800f26c <lv_draw_mask_line_points_init+0x130>
        if(param->steep > 0) param->inv = 0;
 800f24a:	6a23      	ldr	r3, [r4, #32]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	dd21      	ble.n	800f294 <lv_draw_mask_line_points_init+0x158>
 800f250:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f254:	f36f 0341 	bfc	r3, #1, #1
 800f258:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f25c:	e00f      	b.n	800f27e <lv_draw_mask_line_points_init+0x142>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800f25e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f262:	f043 0302 	orr.w	r3, r3, #2
 800f266:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f26a:	e7c5      	b.n	800f1f8 <lv_draw_mask_line_points_init+0xbc>
        if(param->steep > 0) param->inv = 1;
 800f26c:	6a23      	ldr	r3, [r4, #32]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	dd09      	ble.n	800f286 <lv_draw_mask_line_points_init+0x14a>
 800f272:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f276:	f043 0302 	orr.w	r3, r3, #2
 800f27a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
 800f27e:	6a23      	ldr	r3, [r4, #32]
 800f280:	109b      	asrs	r3, r3, #2
 800f282:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
 800f284:	e7be      	b.n	800f204 <lv_draw_mask_line_points_init+0xc8>
        else param->inv = 0;
 800f286:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f28a:	f36f 0341 	bfc	r3, #1, #1
 800f28e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f292:	e7b1      	b.n	800f1f8 <lv_draw_mask_line_points_init+0xbc>
        else param->inv = 1;
 800f294:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f298:	f043 0302 	orr.w	r3, r3, #2
 800f29c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f2a0:	e7aa      	b.n	800f1f8 <lv_draw_mask_line_points_init+0xbc>
 800f2a2:	bf00      	nop
 800f2a4:	0800e3c9 	.word	0x0800e3c9

0800f2a8 <lv_draw_mask_line_angle_init>:
{
 800f2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ac:	b082      	sub	sp, #8
 800f2ae:	4680      	mov	r8, r0
 800f2b0:	460e      	mov	r6, r1
 800f2b2:	4617      	mov	r7, r2
 800f2b4:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 800f2b6:	2bb4      	cmp	r3, #180	; 0xb4
 800f2b8:	bfc4      	itt	gt
 800f2ba:	f1a3 04b4 	subgt.w	r4, r3, #180	; 0xb4
 800f2be:	b224      	sxthgt	r4, r4
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 800f2c0:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800f2c4:	b200      	sxth	r0, r0
 800f2c6:	f012 fd25 	bl	8021d14 <lv_trigo_sin>
 800f2ca:	4605      	mov	r5, r0
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f012 fd21 	bl	8021d14 <lv_trigo_sin>
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 800f2d2:	eb06 1365 	add.w	r3, r6, r5, asr #5
 800f2d6:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800f2da:	9201      	str	r2, [sp, #4]
 800f2dc:	eb07 1060 	add.w	r0, r7, r0, asr #5
 800f2e0:	b200      	sxth	r0, r0
 800f2e2:	9000      	str	r0, [sp, #0]
 800f2e4:	b21b      	sxth	r3, r3
 800f2e6:	463a      	mov	r2, r7
 800f2e8:	4631      	mov	r1, r6
 800f2ea:	4640      	mov	r0, r8
 800f2ec:	f7ff ff26 	bl	800f13c <lv_draw_mask_line_points_init>
}
 800f2f0:	b002      	add	sp, #8
 800f2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f2f8 <lv_draw_mask_angle_init>:
{
 800f2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	460e      	mov	r6, r1
 800f300:	4617      	mov	r7, r2
    if(start_angle < 0)
 800f302:	f240 1267 	movw	r2, #359	; 0x167
 800f306:	4293      	cmp	r3, r2
 800f308:	bfa8      	it	ge
 800f30a:	4613      	movge	r3, r2
 800f30c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    if(end_angle < 0)
 800f310:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 800f314:	4295      	cmp	r5, r2
 800f316:	bfa8      	it	ge
 800f318:	4615      	movge	r5, r2
 800f31a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    if(end_angle < start_angle) {
 800f31e:	429d      	cmp	r5, r3
 800f320:	da28      	bge.n	800f374 <lv_draw_mask_angle_init+0x7c>
        param->delta_deg = 360 - start_angle + end_angle;
 800f322:	f505 72b4 	add.w	r2, r5, #360	; 0x168
 800f326:	1ad2      	subs	r2, r2, r3
 800f328:	b292      	uxth	r2, r2
 800f32a:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    param->cfg.start_angle = start_angle;
 800f32e:	81a3      	strh	r3, [r4, #12]
    param->cfg.end_angle = end_angle;
 800f330:	81e5      	strh	r5, [r4, #14]
    param->cfg.vertex_p.x = vertex_x;
 800f332:	8126      	strh	r6, [r4, #8]
    param->cfg.vertex_p.y = vertex_y;
 800f334:	8167      	strh	r7, [r4, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 800f336:	4a12      	ldr	r2, [pc, #72]	; (800f380 <lv_draw_mask_angle_init+0x88>)
 800f338:	6022      	str	r2, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 800f33a:	2201      	movs	r2, #1
 800f33c:	7122      	strb	r2, [r4, #4]
    if(start_angle >= 0 && start_angle < 180) {
 800f33e:	b29a      	uxth	r2, r3
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 800f340:	2ab3      	cmp	r2, #179	; 0xb3
 800f342:	bf94      	ite	ls
 800f344:	2200      	movls	r2, #0
 800f346:	2201      	movhi	r2, #1
 800f348:	9200      	str	r2, [sp, #0]
 800f34a:	463a      	mov	r2, r7
 800f34c:	4631      	mov	r1, r6
 800f34e:	f104 0010 	add.w	r0, r4, #16
 800f352:	f7ff ffa9 	bl	800f2a8 <lv_draw_mask_line_angle_init>
    if(end_angle >= 0 && end_angle < 180) {
 800f356:	b2ab      	uxth	r3, r5
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 800f358:	2bb3      	cmp	r3, #179	; 0xb3
 800f35a:	bf8c      	ite	hi
 800f35c:	2300      	movhi	r3, #0
 800f35e:	2301      	movls	r3, #1
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	462b      	mov	r3, r5
 800f364:	463a      	mov	r2, r7
 800f366:	4631      	mov	r1, r6
 800f368:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800f36c:	f7ff ff9c 	bl	800f2a8 <lv_draw_mask_line_angle_init>
}
 800f370:	b003      	add	sp, #12
 800f372:	bdf0      	pop	{r4, r5, r6, r7, pc}
        param->delta_deg = LV_ABS(end_angle - start_angle);
 800f374:	1aea      	subs	r2, r5, r3
 800f376:	2a00      	cmp	r2, #0
 800f378:	bfb8      	it	lt
 800f37a:	4252      	neglt	r2, r2
 800f37c:	b292      	uxth	r2, r2
 800f37e:	e7d4      	b.n	800f32a <lv_draw_mask_angle_init+0x32>
 800f380:	0800e96f 	.word	0x0800e96f

0800f384 <lv_draw_mask_radius_init>:
{
 800f384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	b08b      	sub	sp, #44	; 0x2c
 800f38a:	4606      	mov	r6, r0
 800f38c:	4617      	mov	r7, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f38e:	f9b1 4000 	ldrsh.w	r4, [r1]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f392:	88c8      	ldrh	r0, [r1, #6]
 800f394:	3001      	adds	r0, #1
 800f396:	884a      	ldrh	r2, [r1, #2]
 800f398:	1a80      	subs	r0, r0, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f39a:	888a      	ldrh	r2, [r1, #4]
 800f39c:	3201      	adds	r2, #1
 800f39e:	1b12      	subs	r2, r2, r4
    int32_t short_side = LV_MIN(w, h);
 800f3a0:	b200      	sxth	r0, r0
 800f3a2:	b212      	sxth	r2, r2
 800f3a4:	4290      	cmp	r0, r2
 800f3a6:	bfa8      	it	ge
 800f3a8:	4610      	movge	r0, r2
    if(radius > short_side >> 1) radius = short_side >> 1;
 800f3aa:	ebb7 0f60 	cmp.w	r7, r0, asr #1
 800f3ae:	bfc4      	itt	gt
 800f3b0:	1042      	asrgt	r2, r0, #1
 800f3b2:	b217      	sxthgt	r7, r2
    if(radius < 0) radius = 0;
 800f3b4:	ea27 75e7 	bic.w	r5, r7, r7, asr #31
    dest->x1 = src->x1;
 800f3b8:	8134      	strh	r4, [r6, #8]
    dest->y1 = src->y1;
 800f3ba:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800f3be:	8172      	strh	r2, [r6, #10]
    dest->x2 = src->x2;
 800f3c0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 800f3c4:	81b2      	strh	r2, [r6, #12]
    dest->y2 = src->y2;
 800f3c6:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800f3ca:	81f2      	strh	r2, [r6, #14]
    param->cfg.radius = radius;
 800f3cc:	8235      	strh	r5, [r6, #16]
    param->cfg.outer = inv ? 1 : 0;
 800f3ce:	7cb2      	ldrb	r2, [r6, #18]
 800f3d0:	f363 0200 	bfi	r2, r3, #0, #1
 800f3d4:	74b2      	strb	r2, [r6, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 800f3d6:	4bb5      	ldr	r3, [pc, #724]	; (800f6ac <lv_draw_mask_radius_init+0x328>)
 800f3d8:	6033      	str	r3, [r6, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 800f3da:	2302      	movs	r3, #2
 800f3dc:	7133      	strb	r3, [r6, #4]
    if(radius == 0) {
 800f3de:	2f00      	cmp	r7, #0
 800f3e0:	dd0e      	ble.n	800f400 <lv_draw_mask_radius_init+0x7c>
 800f3e2:	4bb3      	ldr	r3, [pc, #716]	; (800f6b0 <lv_draw_mask_radius_init+0x32c>)
 800f3e4:	4619      	mov	r1, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800f3e6:	2200      	movs	r2, #0
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 800f3e8:	f9b1 0018 	ldrsh.w	r0, [r1, #24]
 800f3ec:	42a8      	cmp	r0, r5
 800f3ee:	d00c      	beq.n	800f40a <lv_draw_mask_radius_init+0x86>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800f3f0:	3201      	adds	r2, #1
 800f3f2:	311c      	adds	r1, #28
 800f3f4:	2a04      	cmp	r2, #4
 800f3f6:	d1f7      	bne.n	800f3e8 <lv_draw_mask_radius_init+0x64>
 800f3f8:	f103 0c70 	add.w	ip, r3, #112	; 0x70
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 800f3fc:	2400      	movs	r4, #0
 800f3fe:	e024      	b.n	800f44a <lv_draw_mask_radius_init+0xc6>
        param->circle = NULL;
 800f400:	2300      	movs	r3, #0
 800f402:	6173      	str	r3, [r6, #20]
}
 800f404:	b00b      	add	sp, #44	; 0x2c
 800f406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 800f40a:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800f40e:	49a8      	ldr	r1, [pc, #672]	; (800f6b0 <lv_draw_mask_radius_init+0x32c>)
 800f410:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f414:	6959      	ldr	r1, [r3, #20]
 800f416:	3101      	adds	r1, #1
 800f418:	6159      	str	r1, [r3, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	2f0f      	cmp	r7, #15
 800f41e:	bfcc      	ite	gt
 800f420:	f345 150f 	sbfxgt	r5, r5, #4, #16
 800f424:	2501      	movle	r5, #1
 800f426:	49a2      	ldr	r1, [pc, #648]	; (800f6b0 <lv_draw_mask_radius_init+0x32c>)
 800f428:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
 800f42c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800f430:	442b      	add	r3, r5
 800f432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f436:	bfa8      	it	ge
 800f438:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800f43c:	6103      	str	r3, [r0, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 800f43e:	6170      	str	r0, [r6, #20]
            return;
 800f440:	e7e0      	b.n	800f404 <lv_draw_mask_radius_init+0x80>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800f442:	461c      	mov	r4, r3
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 800f444:	331c      	adds	r3, #28
 800f446:	4563      	cmp	r3, ip
 800f448:	d00a      	beq.n	800f460 <lv_draw_mask_radius_init+0xdc>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 800f44a:	695a      	ldr	r2, [r3, #20]
 800f44c:	2a00      	cmp	r2, #0
 800f44e:	d1f9      	bne.n	800f444 <lv_draw_mask_radius_init+0xc0>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800f450:	2c00      	cmp	r4, #0
 800f452:	d0f6      	beq.n	800f442 <lv_draw_mask_radius_init+0xbe>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 800f454:	6918      	ldr	r0, [r3, #16]
 800f456:	6922      	ldr	r2, [r4, #16]
 800f458:	4290      	cmp	r0, r2
 800f45a:	bfb8      	it	lt
 800f45c:	461c      	movlt	r4, r3
 800f45e:	e7f1      	b.n	800f444 <lv_draw_mask_radius_init+0xc0>
    if(!entry) {
 800f460:	2c00      	cmp	r4, #0
 800f462:	d041      	beq.n	800f4e8 <lv_draw_mask_radius_init+0x164>
        entry->used_cnt++;
 800f464:	6963      	ldr	r3, [r4, #20]
 800f466:	3301      	adds	r3, #1
 800f468:	6163      	str	r3, [r4, #20]
        CIRCLE_CACHE_AGING(entry->life, radius);
 800f46a:	2f0f      	cmp	r7, #15
 800f46c:	bfcc      	ite	gt
 800f46e:	f345 130f 	sbfxgt	r3, r5, #4, #16
 800f472:	2301      	movle	r3, #1
 800f474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f478:	bfa8      	it	ge
 800f47a:	f44f 737a 	movge.w	r3, #1000	; 0x3e8
 800f47e:	6123      	str	r3, [r4, #16]
    param->circle = entry;
 800f480:	6174      	str	r4, [r6, #20]
    c->radius = radius;
 800f482:	8325      	strh	r5, [r4, #24]
    if(c->buf) lv_mem_free(c->buf);
 800f484:	6820      	ldr	r0, [r4, #0]
 800f486:	b108      	cbz	r0, 800f48c <lv_draw_mask_radius_init+0x108>
 800f488:	f012 fd6e 	bl	8021f68 <lv_mem_free>
    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 800f48c:	1c6e      	adds	r6, r5, #1
 800f48e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800f492:	0040      	lsls	r0, r0, #1
 800f494:	f012 fd4a 	bl	8021f2c <lv_mem_alloc>
 800f498:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MALLOC(c->buf);
 800f49a:	b390      	cbz	r0, 800f502 <lv_draw_mask_radius_init+0x17e>
    c->cir_opa = c->buf;
 800f49c:	6060      	str	r0, [r4, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 800f49e:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 800f4a2:	3302      	adds	r3, #2
 800f4a4:	60e3      	str	r3, [r4, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 800f4a6:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800f4aa:	f10c 0804 	add.w	r8, ip, #4
 800f4ae:	eb00 0308 	add.w	r3, r0, r8
 800f4b2:	60a3      	str	r3, [r4, #8]
    if(radius == 1) {
 800f4b4:	2f01      	cmp	r7, #1
 800f4b6:	d025      	beq.n	800f504 <lv_draw_mask_radius_init+0x180>
    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 800f4b8:	00f0      	lsls	r0, r6, #3
 800f4ba:	f012 fd89 	bl	8021fd0 <lv_mem_buf_get>
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 800f4be:	eb00 0c08 	add.w	ip, r0, r8
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 800f4c2:	00aa      	lsls	r2, r5, #2
 800f4c4:	b211      	sxth	r1, r2
    *tmp = 1 - radius;
 800f4c6:	f1c2 0301 	rsb	r3, r2, #1
 800f4ca:	b21b      	sxth	r3, r3
    x_int[0] = cp.x >> 2;
 800f4cc:	f342 028d 	sbfx	r2, r2, #2, #14
 800f4d0:	9202      	str	r2, [sp, #8]
    x_fract[0] = 0;
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	9206      	str	r2, [sp, #24]
    while(circ_cont(&cp)) {
 800f4d6:	4291      	cmp	r1, r2
    lv_coord_t cir_size = 0;
 800f4d8:	bfb8      	it	lt
 800f4da:	4696      	movlt	lr, r2
    while(circ_cont(&cp)) {
 800f4dc:	f2c0 8121 	blt.w	800f722 <lv_draw_mask_radius_init+0x39e>
    c->y = 0;
 800f4e0:	2200      	movs	r2, #0
    uint32_t y_8th_cnt = 0;
 800f4e2:	4693      	mov	fp, r2
    lv_coord_t cir_size = 0;
 800f4e4:	4696      	mov	lr, r2
 800f4e6:	e081      	b.n	800f5ec <lv_draw_mask_radius_init+0x268>
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800f4e8:	201c      	movs	r0, #28
 800f4ea:	f012 fd1f 	bl	8021f2c <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	b130      	cbz	r0, 800f500 <lv_draw_mask_radius_init+0x17c>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 800f4f2:	211c      	movs	r1, #28
 800f4f4:	f012 ff9a 	bl	802242c <lv_memset_00>
        entry->life = -1;
 800f4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4fc:	6123      	str	r3, [r4, #16]
 800f4fe:	e7bf      	b.n	800f480 <lv_draw_mask_radius_init+0xfc>
        LV_ASSERT_MALLOC(entry);
 800f500:	e7fe      	b.n	800f500 <lv_draw_mask_radius_init+0x17c>
    LV_ASSERT_MALLOC(c->buf);
 800f502:	e7fe      	b.n	800f502 <lv_draw_mask_radius_init+0x17e>
        c->cir_opa[0] = 180;
 800f504:	23b4      	movs	r3, #180	; 0xb4
 800f506:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] = 0;
 800f508:	68e2      	ldr	r2, [r4, #12]
 800f50a:	2300      	movs	r3, #0
 800f50c:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] = 1;
 800f50e:	68e2      	ldr	r2, [r4, #12]
 800f510:	2101      	movs	r1, #1
 800f512:	8051      	strh	r1, [r2, #2]
        c->x_start_on_y[0] = 0;
 800f514:	68a2      	ldr	r2, [r4, #8]
 800f516:	8013      	strh	r3, [r2, #0]
        return;
 800f518:	e774      	b.n	800f404 <lv_draw_mask_radius_init+0x80>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 800f51a:	3303      	adds	r3, #3
 800f51c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f520:	b21b      	sxth	r3, r3
    c->y++;
 800f522:	3201      	adds	r2, #1
 800f524:	b212      	sxth	r2, r2
            if(circ_cont(&cp) == false) break;
 800f526:	4291      	cmp	r1, r2
 800f528:	db15      	blt.n	800f556 <lv_draw_mask_radius_init+0x1d2>
            x_int[i] = cp.x >> 2;
 800f52a:	ea4f 0aa1 	mov.w	sl, r1, asr #2
 800f52e:	f849 ab04 	str.w	sl, [r9], #4
            x_fract[i] = cp.x & 0x3;
 800f532:	f001 0a03 	and.w	sl, r1, #3
 800f536:	f848 ab04 	str.w	sl, [r8], #4
        for(i = 0; i < 4; i++) {
 800f53a:	3601      	adds	r6, #1
 800f53c:	2e04      	cmp	r6, #4
 800f53e:	d00d      	beq.n	800f55c <lv_draw_mask_radius_init+0x1d8>
    if(*tmp <= 0) {
 800f540:	2b00      	cmp	r3, #0
 800f542:	ddea      	ble.n	800f51a <lv_draw_mask_radius_init+0x196>
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 800f544:	eba2 0a01 	sub.w	sl, r2, r1
 800f548:	3305      	adds	r3, #5
 800f54a:	eb03 034a 	add.w	r3, r3, sl, lsl #1
 800f54e:	b21b      	sxth	r3, r3
        c->x--;
 800f550:	3901      	subs	r1, #1
 800f552:	b209      	sxth	r1, r1
 800f554:	e7e5      	b.n	800f522 <lv_draw_mask_radius_init+0x19e>
        if(i != 4) break;
 800f556:	2e04      	cmp	r6, #4
 800f558:	f040 80e3 	bne.w	800f722 <lv_draw_mask_radius_init+0x39e>
        if(x_int[0] == x_int[3]) {
 800f55c:	9e02      	ldr	r6, [sp, #8]
 800f55e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f562:	4546      	cmp	r6, r8
 800f564:	d048      	beq.n	800f5f8 <lv_draw_mask_radius_init+0x274>
        else if(x_int[0] != x_int[1]) {
 800f566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f56a:	4546      	cmp	r6, r8
 800f56c:	d062      	beq.n	800f634 <lv_draw_mask_radius_init+0x2b0>
            cir_x[cir_size] = x_int[0];
 800f56e:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f572:	fa0f f98b 	sxth.w	r9, fp
 800f576:	f82c 901e 	strh.w	r9, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0];
 800f57a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f57e:	f88d 8007 	strb.w	r8, [sp, #7]
 800f582:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f586:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800f58a:	f808 700e 	strb.w	r7, [r8, lr]
            c->cir_opa[cir_size] *= 16;
 800f58e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f592:	f81a 800e 	ldrb.w	r8, [sl, lr]
 800f596:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800f59a:	f80a 800e 	strb.w	r8, [sl, lr]
            cir_size++;
 800f59e:	fa1f fe8e 	uxth.w	lr, lr
 800f5a2:	f10e 0801 	add.w	r8, lr, #1
            cir_x[cir_size] = x_int[0] - 1;
 800f5a6:	fa0f f888 	sxth.w	r8, r8
 800f5aa:	3e01      	subs	r6, #1
 800f5ac:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f5b0:	f82c 9018 	strh.w	r9, [ip, r8, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 800f5b4:	9e08      	ldr	r6, [sp, #32]
 800f5b6:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800f5ba:	444e      	add	r6, r9
 800f5bc:	f106 0904 	add.w	r9, r6, #4
 800f5c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f5c2:	444e      	add	r6, r9
 800f5c4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f5c8:	f809 6008 	strb.w	r6, [r9, r8]
            c->cir_opa[cir_size] *= 16;
 800f5cc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f5d0:	f819 6008 	ldrb.w	r6, [r9, r8]
 800f5d4:	0136      	lsls	r6, r6, #4
 800f5d6:	f809 6008 	strb.w	r6, [r9, r8]
            cir_size++;
 800f5da:	f10e 0e02 	add.w	lr, lr, #2
 800f5de:	fa0f fe8e 	sxth.w	lr, lr
        y_8th_cnt++;
 800f5e2:	f10b 0b01 	add.w	fp, fp, #1
    while(circ_cont(&cp)) {
 800f5e6:	4291      	cmp	r1, r2
 800f5e8:	f2c0 809b 	blt.w	800f722 <lv_draw_mask_radius_init+0x39e>
        for(i = 0; i < 4; i++) {
 800f5ec:	f10d 0908 	add.w	r9, sp, #8
 800f5f0:	f10d 0818 	add.w	r8, sp, #24
 800f5f4:	2600      	movs	r6, #0
 800f5f6:	e7a3      	b.n	800f540 <lv_draw_mask_radius_init+0x1bc>
            cir_x[cir_size] = x_int[0];
 800f5f8:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f5fc:	f82c b01e 	strh.w	fp, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 800f600:	6866      	ldr	r6, [r4, #4]
 800f602:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f606:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800f60a:	44c8      	add	r8, r9
 800f60c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f610:	44c8      	add	r8, r9
 800f612:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f616:	44c8      	add	r8, r9
 800f618:	f806 800e 	strb.w	r8, [r6, lr]
            c->cir_opa[cir_size] *= 16;
 800f61c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f620:	f818 600e 	ldrb.w	r6, [r8, lr]
 800f624:	0136      	lsls	r6, r6, #4
 800f626:	f808 600e 	strb.w	r6, [r8, lr]
            cir_size++;
 800f62a:	f10e 0e01 	add.w	lr, lr, #1
 800f62e:	fa0f fe8e 	sxth.w	lr, lr
 800f632:	e7d6      	b.n	800f5e2 <lv_draw_mask_radius_init+0x25e>
        else if(x_int[0] != x_int[2]) {
 800f634:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f638:	4546      	cmp	r6, r8
 800f63a:	d03b      	beq.n	800f6b4 <lv_draw_mask_radius_init+0x330>
            cir_x[cir_size] = x_int[0];
 800f63c:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f640:	fa0f f88b 	sxth.w	r8, fp
 800f644:	f82c 801e 	strh.w	r8, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 800f648:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800f64c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f650:	44d1      	add	r9, sl
 800f652:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f656:	f80a 900e 	strb.w	r9, [sl, lr]
            c->cir_opa[cir_size] *= 16;
 800f65a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f65e:	f81a 900e 	ldrb.w	r9, [sl, lr]
 800f662:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800f666:	f80a 900e 	strb.w	r9, [sl, lr]
            cir_size++;
 800f66a:	fa1f f98e 	uxth.w	r9, lr
 800f66e:	f109 0e01 	add.w	lr, r9, #1
            cir_x[cir_size] = x_int[0] - 1;
 800f672:	fa0f fe8e 	sxth.w	lr, lr
 800f676:	3e01      	subs	r6, #1
 800f678:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f67c:	f82c 801e 	strh.w	r8, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800f680:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f682:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f686:	4446      	add	r6, r8
 800f688:	3608      	adds	r6, #8
 800f68a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f68e:	f808 600e 	strb.w	r6, [r8, lr]
            c->cir_opa[cir_size] *= 16;
 800f692:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f696:	f818 600e 	ldrb.w	r6, [r8, lr]
 800f69a:	0136      	lsls	r6, r6, #4
 800f69c:	f808 600e 	strb.w	r6, [r8, lr]
            cir_size++;
 800f6a0:	f109 0e02 	add.w	lr, r9, #2
 800f6a4:	fa0f fe8e 	sxth.w	lr, lr
 800f6a8:	e79b      	b.n	800f5e2 <lv_draw_mask_radius_init+0x25e>
 800f6aa:	bf00      	nop
 800f6ac:	0800ec3f 	.word	0x0800ec3f
 800f6b0:	2000280c 	.word	0x2000280c
            cir_x[cir_size] = x_int[0];
 800f6b4:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f6b8:	fa0f f88b 	sxth.w	r8, fp
 800f6bc:	f82c 801e 	strh.w	r8, [ip, lr, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 800f6c0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800f6c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f6c8:	44d1      	add	r9, sl
 800f6ca:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f6ce:	44d1      	add	r9, sl
 800f6d0:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f6d4:	f80a 900e 	strb.w	r9, [sl, lr]
            c->cir_opa[cir_size] *= 16;
 800f6d8:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f6dc:	f81a 900e 	ldrb.w	r9, [sl, lr]
 800f6e0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800f6e4:	f80a 900e 	strb.w	r9, [sl, lr]
            cir_size++;
 800f6e8:	fa1f fe8e 	uxth.w	lr, lr
 800f6ec:	f10e 0901 	add.w	r9, lr, #1
            cir_x[cir_size] = x_int[0] - 1;
 800f6f0:	fa0f f989 	sxth.w	r9, r9
 800f6f4:	3e01      	subs	r6, #1
 800f6f6:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800f6fa:	f82c 8019 	strh.w	r8, [ip, r9, lsl #1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 800f6fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f700:	360c      	adds	r6, #12
 800f702:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f706:	f808 6009 	strb.w	r6, [r8, r9]
            c->cir_opa[cir_size] *= 16;
 800f70a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f70e:	f818 6009 	ldrb.w	r6, [r8, r9]
 800f712:	0136      	lsls	r6, r6, #4
 800f714:	f808 6009 	strb.w	r6, [r8, r9]
            cir_size++;
 800f718:	f10e 0e02 	add.w	lr, lr, #2
 800f71c:	fa0f fe8e 	sxth.w	lr, lr
 800f720:	e75f      	b.n	800f5e2 <lv_draw_mask_radius_init+0x25e>
    int32_t mid = radius * 723;
 800f722:	f240 23d3 	movw	r3, #723	; 0x2d3
 800f726:	fb03 f505 	mul.w	r5, r3, r5
    int32_t mid_int = mid >> 10;
 800f72a:	12aa      	asrs	r2, r5, #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800f72c:	4676      	mov	r6, lr
 800f72e:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 800f732:	3b01      	subs	r3, #1
 800f734:	0059      	lsls	r1, r3, #1
 800f736:	f930 7013 	ldrsh.w	r7, [r0, r3, lsl #1]
 800f73a:	ebb7 2fa5 	cmp.w	r7, r5, asr #10
 800f73e:	d03c      	beq.n	800f7ba <lv_draw_mask_radius_init+0x436>
        int32_t tmp_val = mid - (mid_int << 10);
 800f740:	f3c5 0509 	ubfx	r5, r5, #0, #10
        if(tmp_val <= 512) {
 800f744:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f748:	dc3c      	bgt.n	800f7c4 <lv_draw_mask_radius_init+0x440>
            tmp_val = tmp_val * tmp_val * 2;
 800f74a:	fb05 f505 	mul.w	r5, r5, r5
            tmp_val = tmp_val >> (10 + 6);
 800f74e:	13eb      	asrs	r3, r5, #15
        cir_x[cir_size] = mid_int;
 800f750:	3102      	adds	r1, #2
 800f752:	b212      	sxth	r2, r2
 800f754:	5242      	strh	r2, [r0, r1]
        cir_y[cir_size] = mid_int;
 800f756:	f82c 2001 	strh.w	r2, [ip, r1]
        c->cir_opa[cir_size] = tmp_val;
 800f75a:	6862      	ldr	r2, [r4, #4]
 800f75c:	5593      	strb	r3, [r2, r6]
        c->cir_opa[cir_size] *= 16;
 800f75e:	6862      	ldr	r2, [r4, #4]
 800f760:	5d93      	ldrb	r3, [r2, r6]
 800f762:	011b      	lsls	r3, r3, #4
 800f764:	5593      	strb	r3, [r2, r6]
        cir_size++;
 800f766:	f10e 0e01 	add.w	lr, lr, #1
 800f76a:	fa0f fe8e 	sxth.w	lr, lr
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800f76e:	f1be 0602 	subs.w	r6, lr, #2
 800f772:	d41a      	bmi.n	800f7aa <lv_draw_mask_radius_init+0x426>
 800f774:	4633      	mov	r3, r6
 800f776:	fa1f fe8e 	uxth.w	lr, lr
        cir_x[cir_size] = cir_y[i];
 800f77a:	4476      	add	r6, lr
 800f77c:	1af2      	subs	r2, r6, r3
 800f77e:	b212      	sxth	r2, r2
 800f780:	f93c 1013 	ldrsh.w	r1, [ip, r3, lsl #1]
 800f784:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
        cir_y[cir_size] = cir_x[i];
 800f788:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 800f78c:	f82c 1012 	strh.w	r1, [ip, r2, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 800f790:	6861      	ldr	r1, [r4, #4]
 800f792:	5ccd      	ldrb	r5, [r1, r3]
 800f794:	548d      	strb	r5, [r1, r2]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 800f796:	3b01      	subs	r3, #1
 800f798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f79c:	d1ee      	bne.n	800f77c <lv_draw_mask_radius_init+0x3f8>
 800f79e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f7a2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800f7a6:	fa0f fe8e 	sxth.w	lr, lr
    c->opa_start_on_y[0] = 0;
 800f7aa:	68e3      	ldr	r3, [r4, #12]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	801a      	strh	r2, [r3, #0]
    while(i < cir_size) {
 800f7b0:	46f0      	mov	r8, lr
 800f7b2:	4596      	cmp	lr, r2
 800f7b4:	dd37      	ble.n	800f826 <lv_draw_mask_radius_init+0x4a2>
 800f7b6:	4691      	mov	r9, r2
 800f7b8:	e010      	b.n	800f7dc <lv_draw_mask_radius_init+0x458>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 800f7ba:	f93c 3013 	ldrsh.w	r3, [ip, r3, lsl #1]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d1be      	bne.n	800f740 <lv_draw_mask_radius_init+0x3bc>
 800f7c2:	e7d4      	b.n	800f76e <lv_draw_mask_radius_init+0x3ea>
            tmp_val = 1024 - tmp_val;
 800f7c4:	f5c5 6580 	rsb	r5, r5, #1024	; 0x400
            tmp_val = tmp_val * tmp_val * 2;
 800f7c8:	fb05 f505 	mul.w	r5, r5, r5
            tmp_val = tmp_val >> (10 + 6);
 800f7cc:	13eb      	asrs	r3, r5, #15
            tmp_val = 15 - tmp_val;
 800f7ce:	f1c3 030f 	rsb	r3, r3, #15
 800f7d2:	e7bd      	b.n	800f750 <lv_draw_mask_radius_init+0x3cc>
    while(i < cir_size) {
 800f7d4:	f109 0901 	add.w	r9, r9, #1
 800f7d8:	4590      	cmp	r8, r2
 800f7da:	dd24      	ble.n	800f826 <lv_draw_mask_radius_init+0x4a2>
        c->opa_start_on_y[y] = i;
 800f7dc:	fa0f f189 	sxth.w	r1, r9
 800f7e0:	004f      	lsls	r7, r1, #1
 800f7e2:	68e3      	ldr	r3, [r4, #12]
 800f7e4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 800f7e8:	0055      	lsls	r5, r2, #1
 800f7ea:	68a3      	ldr	r3, [r4, #8]
 800f7ec:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
 800f7f0:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800f7f4:	f93c e012 	ldrsh.w	lr, [ip, r2, lsl #1]
 800f7f8:	4571      	cmp	r1, lr
 800f7fa:	d1eb      	bne.n	800f7d4 <lv_draw_mask_radius_init+0x450>
 800f7fc:	4590      	cmp	r8, r2
 800f7fe:	dd12      	ble.n	800f826 <lv_draw_mask_radius_init+0x4a2>
 800f800:	1eae      	subs	r6, r5, #2
 800f802:	4406      	add	r6, r0
 800f804:	4465      	add	r5, ip
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 800f806:	68a1      	ldr	r1, [r4, #8]
 800f808:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800f80c:	f831 a007 	ldrh.w	sl, [r1, r7]
 800f810:	4553      	cmp	r3, sl
 800f812:	bfa8      	it	ge
 800f814:	4653      	movge	r3, sl
 800f816:	53cb      	strh	r3, [r1, r7]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800f818:	3201      	adds	r2, #1
 800f81a:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800f81e:	4573      	cmp	r3, lr
 800f820:	d1d8      	bne.n	800f7d4 <lv_draw_mask_radius_init+0x450>
 800f822:	4542      	cmp	r2, r8
 800f824:	d1ef      	bne.n	800f806 <lv_draw_mask_radius_init+0x482>
    lv_mem_buf_release(cir_x);
 800f826:	f012 fc35 	bl	8022094 <lv_mem_buf_release>
 800f82a:	e5eb      	b.n	800f404 <lv_draw_mask_radius_init+0x80>

0800f82c <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 800f82c:	b510      	push	{r4, lr}
 800f82e:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 800f830:	2138      	movs	r1, #56	; 0x38
 800f832:	f012 fdfb 	bl	802242c <lv_memset_00>
    dsc->bg_color = lv_color_white();
 800f836:	7923      	ldrb	r3, [r4, #4]
 800f838:	f043 031f 	orr.w	r3, r3, #31
 800f83c:	7123      	strb	r3, [r4, #4]
 800f83e:	88a3      	ldrh	r3, [r4, #4]
 800f840:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800f844:	80a3      	strh	r3, [r4, #4]
 800f846:	23ff      	movs	r3, #255	; 0xff
 800f848:	7163      	strb	r3, [r4, #5]
    dsc->bg_grad.stops[0].color = lv_color_white();
 800f84a:	79a3      	ldrb	r3, [r4, #6]
 800f84c:	f043 031f 	orr.w	r3, r3, #31
 800f850:	71a3      	strb	r3, [r4, #6]
 800f852:	88e3      	ldrh	r3, [r4, #6]
 800f854:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 800f858:	80e3      	strh	r3, [r4, #6]
 800f85a:	23ff      	movs	r3, #255	; 0xff
 800f85c:	71e3      	strb	r3, [r4, #7]
    dsc->bg_grad.stops[1].color = lv_color_black();
 800f85e:	7aa3      	ldrb	r3, [r4, #10]
 800f860:	f36f 0304 	bfc	r3, #0, #5
 800f864:	72a3      	strb	r3, [r4, #10]
 800f866:	8963      	ldrh	r3, [r4, #10]
 800f868:	f36f 134a 	bfc	r3, #5, #6
 800f86c:	8163      	strh	r3, [r4, #10]
 800f86e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f872:	f36f 03c7 	bfc	r3, #3, #5
 800f876:	72e3      	strb	r3, [r4, #11]
    dsc->bg_grad.stops[1].frac = 0xFF;
 800f878:	23ff      	movs	r3, #255	; 0xff
 800f87a:	7323      	strb	r3, [r4, #12]
    dsc->bg_grad.stops_count = 2;
 800f87c:	2202      	movs	r2, #2
 800f87e:	73a2      	strb	r2, [r4, #14]
    dsc->border_color = lv_color_black();
 800f880:	7fa2      	ldrb	r2, [r4, #30]
 800f882:	f36f 0204 	bfc	r2, #0, #5
 800f886:	77a2      	strb	r2, [r4, #30]
 800f888:	8be2      	ldrh	r2, [r4, #30]
 800f88a:	f36f 124a 	bfc	r2, #5, #6
 800f88e:	83e2      	strh	r2, [r4, #30]
 800f890:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f894:	f36f 02c7 	bfc	r2, #3, #5
 800f898:	77e2      	strb	r2, [r4, #31]
    dsc->shadow_color = lv_color_black();
 800f89a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800f89e:	f36f 0204 	bfc	r2, #0, #5
 800f8a2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
 800f8a6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f8a8:	f36f 124a 	bfc	r2, #5, #6
 800f8ac:	85a2      	strh	r2, [r4, #44]	; 0x2c
 800f8ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f8b2:	f36f 02c7 	bfc	r2, #3, #5
 800f8b6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 800f8ba:	4a09      	ldr	r2, [pc, #36]	; (800f8e0 <lv_draw_rect_dsc_init+0xb4>)
 800f8bc:	6162      	str	r2, [r4, #20]
    dsc->bg_opa = LV_OPA_COVER;
 800f8be:	70e3      	strb	r3, [r4, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 800f8c0:	76a3      	strb	r3, [r4, #26]
    dsc->outline_opa = LV_OPA_COVER;
 800f8c2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_opa = LV_OPA_COVER;
 800f8c6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    dsc->shadow_opa = LV_OPA_COVER;
 800f8ca:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->border_side = LV_BORDER_SIDE_FULL;
 800f8ce:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800f8d2:	220f      	movs	r2, #15
 800f8d4:	f362 0345 	bfi	r3, r2, #1, #5
 800f8d8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 800f8dc:	bd10      	pop	{r4, pc}
 800f8de:	bf00      	nop
 800f8e0:	08031440 	.word	0x08031440

0800f8e4 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 800f8e4:	b508      	push	{r3, lr}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f8e6:	88d3      	ldrh	r3, [r2, #6]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800f8ee:	eba3 030c 	sub.w	r3, r3, ip
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800f8f2:	b21b      	sxth	r3, r3
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dd0a      	ble.n	800f90e <lv_draw_rect+0x2a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f8f8:	8893      	ldrh	r3, [r2, #4]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	f8b2 c000 	ldrh.w	ip, [r2]
 800f900:	eba3 030c 	sub.w	r3, r3, ip
 800f904:	b21b      	sxth	r3, r3
 800f906:	2b00      	cmp	r3, #0
 800f908:	dd01      	ble.n	800f90e <lv_draw_rect+0x2a>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 800f90a:	6903      	ldr	r3, [r0, #16]
 800f90c:	4798      	blx	r3

    LV_ASSERT_MEM_INTEGRITY();
}
 800f90e:	bd08      	pop	{r3, pc}

0800f910 <lv_draw_transform>:
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
    LV_ASSERT_NULL(draw_ctx);
 800f910:	b1b8      	cbz	r0, 800f942 <lv_draw_transform+0x32>
{
 800f912:	b510      	push	{r4, lr}
 800f914:	b086      	sub	sp, #24
 800f916:	4684      	mov	ip, r0
    if(draw_ctx->draw_transform == NULL) {
 800f918:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800f91a:	b184      	cbz	r4, 800f93e <lv_draw_transform+0x2e>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 800f91c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f91e:	9005      	str	r0, [sp, #20]
 800f920:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f922:	9004      	str	r0, [sp, #16]
 800f924:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 800f928:	9003      	str	r0, [sp, #12]
 800f92a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f92c:	9002      	str	r0, [sp, #8]
 800f92e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800f932:	9001      	str	r0, [sp, #4]
 800f934:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800f938:	9000      	str	r0, [sp, #0]
 800f93a:	4660      	mov	r0, ip
 800f93c:	47a0      	blx	r4

}
 800f93e:	b006      	add	sp, #24
 800f940:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(draw_ctx);
 800f942:	e7fe      	b.n	800f942 <lv_draw_transform+0x32>

0800f944 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 800f944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f946:	b085      	sub	sp, #20
 800f948:	4604      	mov	r4, r0
 800f94a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800f94e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 800f950:	461e      	mov	r6, r3
 800f952:	b913      	cbnz	r3, 800f95a <_lv_img_buf_get_transformed_area+0x16>
 800f954:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f958:	d068      	beq.n	800fa2c <_lv_img_buf_get_transformed_area+0xe8>
        res->x2 = w - 1;
        res->y2 = h - 1;
        return;
    }

    lv_point_t p[4] = {
 800f95a:	2300      	movs	r3, #0
 800f95c:	f8ad 3000 	strh.w	r3, [sp]
 800f960:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f964:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f968:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f96c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800f970:	f8ad 200a 	strh.w	r2, [sp, #10]
 800f974:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f978:	f8ad 200e 	strh.w	r2, [sp, #14]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 800f97c:	463b      	mov	r3, r7
 800f97e:	462a      	mov	r2, r5
 800f980:	4631      	mov	r1, r6
 800f982:	4668      	mov	r0, sp
 800f984:	f011 fd8e 	bl	80214a4 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 800f988:	463b      	mov	r3, r7
 800f98a:	462a      	mov	r2, r5
 800f98c:	4631      	mov	r1, r6
 800f98e:	a801      	add	r0, sp, #4
 800f990:	f011 fd88 	bl	80214a4 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 800f994:	463b      	mov	r3, r7
 800f996:	462a      	mov	r2, r5
 800f998:	4631      	mov	r1, r6
 800f99a:	a802      	add	r0, sp, #8
 800f99c:	f011 fd82 	bl	80214a4 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 800f9a0:	463b      	mov	r3, r7
 800f9a2:	462a      	mov	r2, r5
 800f9a4:	4631      	mov	r1, r6
 800f9a6:	a803      	add	r0, sp, #12
 800f9a8:	f011 fd7c 	bl	80214a4 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 800f9ac:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f9b0:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 800f9b4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800f9b8:	f9bd 1000 	ldrsh.w	r1, [sp]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	42ab      	cmp	r3, r5
 800f9c0:	bfa8      	it	ge
 800f9c2:	462a      	movge	r2, r5
 800f9c4:	4282      	cmp	r2, r0
 800f9c6:	bfa8      	it	ge
 800f9c8:	4602      	movge	r2, r0
 800f9ca:	428a      	cmp	r2, r1
 800f9cc:	bfa8      	it	ge
 800f9ce:	460a      	movge	r2, r1
 800f9d0:	3a02      	subs	r2, #2
 800f9d2:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 800f9d4:	42ab      	cmp	r3, r5
 800f9d6:	bfb8      	it	lt
 800f9d8:	462b      	movlt	r3, r5
 800f9da:	4283      	cmp	r3, r0
 800f9dc:	bfb8      	it	lt
 800f9de:	4603      	movlt	r3, r0
 800f9e0:	428b      	cmp	r3, r1
 800f9e2:	bfb8      	it	lt
 800f9e4:	460b      	movlt	r3, r1
 800f9e6:	3302      	adds	r3, #2
 800f9e8:	80a3      	strh	r3, [r4, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 800f9ea:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f9ee:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 800f9f2:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 800f9f6:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	42ab      	cmp	r3, r5
 800f9fe:	bfa8      	it	ge
 800fa00:	462a      	movge	r2, r5
 800fa02:	4282      	cmp	r2, r0
 800fa04:	bfa8      	it	ge
 800fa06:	4602      	movge	r2, r0
 800fa08:	428a      	cmp	r2, r1
 800fa0a:	bfa8      	it	ge
 800fa0c:	460a      	movge	r2, r1
 800fa0e:	3a02      	subs	r2, #2
 800fa10:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 800fa12:	42ab      	cmp	r3, r5
 800fa14:	bfb8      	it	lt
 800fa16:	462b      	movlt	r3, r5
 800fa18:	4283      	cmp	r3, r0
 800fa1a:	bfb8      	it	lt
 800fa1c:	4603      	movlt	r3, r0
 800fa1e:	428b      	cmp	r3, r1
 800fa20:	bfb8      	it	lt
 800fa22:	460b      	movlt	r3, r1
 800fa24:	3302      	adds	r3, #2
 800fa26:	80e3      	strh	r3, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 800fa28:	b005      	add	sp, #20
 800fa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res->x1 = 0;
 800fa2c:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 800fa2e:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 800fa30:	3901      	subs	r1, #1
 800fa32:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
 800fa34:	3a01      	subs	r2, #1
 800fa36:	80c2      	strh	r2, [r0, #6]
        return;
 800fa38:	e7f6      	b.n	800fa28 <_lv_img_buf_get_transformed_area+0xe4>
	...

0800fa3c <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 800fa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3e:	4604      	mov	r4, r0
 800fa40:	460d      	mov	r5, r1
 800fa42:	4616      	mov	r6, r2
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 800fa44:	f011 f8d3 	bl	8020bee <lv_tick_get>
 800fa48:	4607      	mov	r7, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 800fa4a:	4633      	mov	r3, r6
 800fa4c:	462a      	mov	r2, r5
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4810      	ldr	r0, [pc, #64]	; (800fa94 <_lv_img_cache_open+0x58>)
 800fa52:	f000 fb8d 	bl	8010170 <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 800fa56:	b130      	cbz	r0, 800fa66 <_lv_img_cache_open+0x2a>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
        return NULL;
    }

    cached_src->life = 0;
 800fa58:	4b0e      	ldr	r3, [pc, #56]	; (800fa94 <_lv_img_cache_open+0x58>)
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	629a      	str	r2, [r3, #40]	; 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 800fa5e:	69db      	ldr	r3, [r3, #28]
 800fa60:	b15b      	cbz	r3, 800fa7a <_lv_img_cache_open+0x3e>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
 800fa62:	480c      	ldr	r0, [pc, #48]	; (800fa94 <_lv_img_cache_open+0x58>)
}
 800fa64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 800fa66:	4c0b      	ldr	r4, [pc, #44]	; (800fa94 <_lv_img_cache_open+0x58>)
 800fa68:	212c      	movs	r1, #44	; 0x2c
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	f012 fcde 	bl	802242c <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 800fa70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa74:	62a3      	str	r3, [r4, #40]	; 0x28
        return NULL;
 800fa76:	2000      	movs	r0, #0
 800fa78:	e7f4      	b.n	800fa64 <_lv_img_cache_open+0x28>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	f011 f8bb 	bl	8020bf6 <lv_tick_elaps>
 800fa80:	4b04      	ldr	r3, [pc, #16]	; (800fa94 <_lv_img_cache_open+0x58>)
 800fa82:	61d8      	str	r0, [r3, #28]
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 800fa84:	b918      	cbnz	r0, 800fa8e <_lv_img_cache_open+0x52>
 800fa86:	4618      	mov	r0, r3
 800fa88:	2301      	movs	r3, #1
 800fa8a:	61c3      	str	r3, [r0, #28]
 800fa8c:	e7ea      	b.n	800fa64 <_lv_img_cache_open+0x28>
    return cached_src;
 800fa8e:	4801      	ldr	r0, [pc, #4]	; (800fa94 <_lv_img_cache_open+0x58>)
 800fa90:	e7e8      	b.n	800fa64 <_lv_img_cache_open+0x28>
 800fa92:	bf00      	nop
 800fa94:	20002924 	.word	0x20002924

0800fa98 <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 800fa98:	4770      	bx	lr
	...

0800fa9c <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 800fa9c:	b570      	push	{r4, r5, r6, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	460d      	mov	r5, r1
 800faa2:	4614      	mov	r4, r2
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 800faa4:	4608      	mov	r0, r1
 800faa6:	f7fd ff88 	bl	800d9ba <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800faaa:	4606      	mov	r6, r0
 800faac:	b9e8      	cbnz	r0, 800faea <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 800faae:	782b      	ldrb	r3, [r5, #0]
 800fab0:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800fab4:	3b04      	subs	r3, #4
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b10      	cmp	r3, #16
 800faba:	d813      	bhi.n	800fae4 <lv_img_decoder_built_in_info+0x48>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800fac2:	6822      	ldr	r2, [r4, #0]
 800fac4:	f363 2294 	bfi	r2, r3, #10, #11
 800fac8:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800faca:	886b      	ldrh	r3, [r5, #2]
 800facc:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800fad0:	8862      	ldrh	r2, [r4, #2]
 800fad2:	f363 124f 	bfi	r2, r3, #5, #11
 800fad6:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800fad8:	782a      	ldrb	r2, [r5, #0]
 800fada:	7823      	ldrb	r3, [r4, #0]
 800fadc:	f362 0304 	bfi	r3, r2, #0, #5
 800fae0:	7023      	strb	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 800fae2:	2601      	movs	r6, #1
}
 800fae4:	4630      	mov	r0, r6
 800fae6:	b004      	add	sp, #16
 800fae8:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 800faea:	2801      	cmp	r0, #1
 800faec:	d010      	beq.n	800fb10 <lv_img_decoder_built_in_info+0x74>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800faee:	2802      	cmp	r0, #2
 800faf0:	d135      	bne.n	800fb5e <lv_img_decoder_built_in_info+0xc2>
        header->w = 1;
 800faf2:	6823      	ldr	r3, [r4, #0]
 800faf4:	2601      	movs	r6, #1
 800faf6:	f366 2394 	bfi	r3, r6, #10, #11
 800fafa:	6023      	str	r3, [r4, #0]
        header->h = 1;
 800fafc:	f3c3 420f 	ubfx	r2, r3, #16, #16
 800fb00:	f366 124f 	bfi	r2, r6, #5, #11
 800fb04:	8062      	strh	r2, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800fb06:	220b      	movs	r2, #11
 800fb08:	f362 0304 	bfi	r3, r2, #0, #5
 800fb0c:	7023      	strb	r3, [r4, #0]
 800fb0e:	e7e9      	b.n	800fae4 <lv_img_decoder_built_in_info+0x48>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 800fb10:	4628      	mov	r0, r5
 800fb12:	f012 f821 	bl	8021b58 <lv_fs_get_ext>
 800fb16:	4913      	ldr	r1, [pc, #76]	; (800fb64 <lv_img_decoder_built_in_info+0xc8>)
 800fb18:	f7f0 fb84 	bl	8000224 <strcmp>
 800fb1c:	b108      	cbz	r0, 800fb22 <lv_img_decoder_built_in_info+0x86>
 800fb1e:	2600      	movs	r6, #0
 800fb20:	e7e0      	b.n	800fae4 <lv_img_decoder_built_in_info+0x48>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 800fb22:	2202      	movs	r2, #2
 800fb24:	4629      	mov	r1, r5
 800fb26:	a801      	add	r0, sp, #4
 800fb28:	f011 ffd6 	bl	8021ad8 <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 800fb2c:	b130      	cbz	r0, 800fb3c <lv_img_decoder_built_in_info+0xa0>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 800fb2e:	7823      	ldrb	r3, [r4, #0]
 800fb30:	331c      	adds	r3, #28
 800fb32:	f003 031f 	and.w	r3, r3, #31
 800fb36:	2b10      	cmp	r3, #16
 800fb38:	d9d4      	bls.n	800fae4 <lv_img_decoder_built_in_info+0x48>
 800fb3a:	e7f0      	b.n	800fb1e <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 800fb3c:	466b      	mov	r3, sp
 800fb3e:	2204      	movs	r2, #4
 800fb40:	4621      	mov	r1, r4
 800fb42:	eb0d 0002 	add.w	r0, sp, r2
 800fb46:	f011 fe8e 	bl	8021866 <lv_fs_read>
 800fb4a:	4605      	mov	r5, r0
            lv_fs_close(&f);
 800fb4c:	a801      	add	r0, sp, #4
 800fb4e:	f011 fe6b 	bl	8021828 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800fb52:	2d00      	cmp	r5, #0
 800fb54:	d1e3      	bne.n	800fb1e <lv_img_decoder_built_in_info+0x82>
 800fb56:	9b00      	ldr	r3, [sp, #0]
 800fb58:	2b04      	cmp	r3, #4
 800fb5a:	d1e0      	bne.n	800fb1e <lv_img_decoder_built_in_info+0x82>
 800fb5c:	e7e7      	b.n	800fb2e <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
 800fb5e:	2600      	movs	r6, #0
 800fb60:	e7c0      	b.n	800fae4 <lv_img_decoder_built_in_info+0x48>
 800fb62:	bf00      	nop
 800fb64:	0802d67c 	.word	0x0802d67c

0800fb68 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800fb68:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800fb6a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    if(user_data) {
 800fb6c:	b185      	cbz	r5, 800fb90 <lv_img_decoder_built_in_close+0x28>
 800fb6e:	460c      	mov	r4, r1
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800fb70:	7c0b      	ldrb	r3, [r1, #16]
 800fb72:	2b01      	cmp	r3, #1
 800fb74:	d00d      	beq.n	800fb92 <lv_img_decoder_built_in_close+0x2a>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 800fb76:	68e8      	ldr	r0, [r5, #12]
 800fb78:	b108      	cbz	r0, 800fb7e <lv_img_decoder_built_in_close+0x16>
 800fb7a:	f012 f9f5 	bl	8021f68 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 800fb7e:	6928      	ldr	r0, [r5, #16]
 800fb80:	b108      	cbz	r0, 800fb86 <lv_img_decoder_built_in_close+0x1e>
 800fb82:	f012 f9f1 	bl	8021f68 <lv_mem_free>

        lv_mem_free(user_data);
 800fb86:	4628      	mov	r0, r5
 800fb88:	f012 f9ee 	bl	8021f68 <lv_mem_free>
        dsc->user_data = NULL;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	6263      	str	r3, [r4, #36]	; 0x24
    }
}
 800fb90:	bd38      	pop	{r3, r4, r5, pc}
            lv_fs_close(&user_data->f);
 800fb92:	4628      	mov	r0, r5
 800fb94:	f011 fe48 	bl	8021828 <lv_fs_close>
 800fb98:	e7ed      	b.n	800fb76 <lv_img_decoder_built_in_close+0xe>
	...

0800fb9c <lv_img_decoder_built_in_open>:
{
 800fb9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fba0:	b085      	sub	sp, #20
 800fba2:	4606      	mov	r6, r0
 800fba4:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800fba6:	7c0d      	ldrb	r5, [r1, #16]
 800fba8:	2d01      	cmp	r5, #1
 800fbaa:	d011      	beq.n	800fbd0 <lv_img_decoder_built_in_open+0x34>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800fbac:	2d00      	cmp	r5, #0
 800fbae:	f040 80e9 	bne.w	800fd84 <lv_img_decoder_built_in_open+0x1e8>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 800fbb2:	684b      	ldr	r3, [r1, #4]
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d038      	beq.n	800fc2c <lv_img_decoder_built_in_open+0x90>
    lv_img_cf_t cf = dsc->header.cf;
 800fbba:	7d0b      	ldrb	r3, [r1, #20]
 800fbbc:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800fbc0:	1f02      	subs	r2, r0, #4
 800fbc2:	b2d2      	uxtb	r2, r2
 800fbc4:	2a02      	cmp	r2, #2
 800fbc6:	d92d      	bls.n	800fc24 <lv_img_decoder_built_in_open+0x88>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800fbc8:	2814      	cmp	r0, #20
 800fbca:	f040 80e4 	bne.w	800fd96 <lv_img_decoder_built_in_open+0x1fa>
 800fbce:	e029      	b.n	800fc24 <lv_img_decoder_built_in_open+0x88>
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800fbd0:	6848      	ldr	r0, [r1, #4]
 800fbd2:	f011 ffc1 	bl	8021b58 <lv_fs_get_ext>
 800fbd6:	4977      	ldr	r1, [pc, #476]	; (800fdb4 <lv_img_decoder_built_in_open+0x218>)
 800fbd8:	f7f0 fb24 	bl	8000224 <strcmp>
 800fbdc:	b108      	cbz	r0, 800fbe2 <lv_img_decoder_built_in_open+0x46>
 800fbde:	2500      	movs	r5, #0
 800fbe0:	e024      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800fbe2:	2202      	movs	r2, #2
 800fbe4:	6861      	ldr	r1, [r4, #4]
 800fbe6:	a801      	add	r0, sp, #4
 800fbe8:	f011 ff76 	bl	8021ad8 <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d1f6      	bne.n	800fbde <lv_img_decoder_built_in_open+0x42>
        if(dsc->user_data == NULL) {
 800fbf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf2:	b1fb      	cbz	r3, 800fc34 <lv_img_decoder_built_in_open+0x98>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800fbf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf6:	aa01      	add	r2, sp, #4
 800fbf8:	f103 000c 	add.w	r0, r3, #12
        *d8 = *s8;
 800fbfc:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fc00:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
 800fc04:	4283      	cmp	r3, r0
 800fc06:	d1f9      	bne.n	800fbfc <lv_img_decoder_built_in_open+0x60>
    lv_img_cf_t cf = dsc->header.cf;
 800fc08:	7d23      	ldrb	r3, [r4, #20]
 800fc0a:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800fc0e:	1f02      	subs	r2, r0, #4
 800fc10:	b2d2      	uxtb	r2, r2
 800fc12:	2a02      	cmp	r2, #2
 800fc14:	d902      	bls.n	800fc1c <lv_img_decoder_built_in_open+0x80>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800fc16:	2814      	cmp	r0, #20
 800fc18:	f040 80bd 	bne.w	800fd96 <lv_img_decoder_built_in_open+0x1fa>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800fc1c:	7c23      	ldrb	r3, [r4, #16]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f040 80a8 	bne.w	800fd74 <lv_img_decoder_built_in_open+0x1d8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800fc24:	6863      	ldr	r3, [r4, #4]
 800fc26:	689b      	ldr	r3, [r3, #8]
 800fc28:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 800fc2a:	2501      	movs	r5, #1
}
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	b005      	add	sp, #20
 800fc30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800fc34:	2014      	movs	r0, #20
 800fc36:	f012 f979 	bl	8021f2c <lv_mem_alloc>
 800fc3a:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800fc3c:	b118      	cbz	r0, 800fc46 <lv_img_decoder_built_in_open+0xaa>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800fc3e:	2114      	movs	r1, #20
 800fc40:	f012 fbf4 	bl	802242c <lv_memset_00>
 800fc44:	e7d6      	b.n	800fbf4 <lv_img_decoder_built_in_open+0x58>
            LV_ASSERT_MALLOC(dsc->user_data);
 800fc46:	e7fe      	b.n	800fc46 <lv_img_decoder_built_in_open+0xaa>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 800fc48:	f7fd fe87 	bl	800d95a <lv_img_cf_get_px_size>
 800fc4c:	4680      	mov	r8, r0
        if(dsc->user_data == NULL) {
 800fc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d040      	beq.n	800fcd6 <lv_img_decoder_built_in_open+0x13a>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800fc54:	6a67      	ldr	r7, [r4, #36]	; 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800fc56:	2002      	movs	r0, #2
 800fc58:	fa00 f008 	lsl.w	r0, r0, r8
 800fc5c:	f012 f966 	bl	8021f2c <lv_mem_alloc>
 800fc60:	60f8      	str	r0, [r7, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d041      	beq.n	800fcea <lv_img_decoder_built_in_open+0x14e>
        uint32_t palette_size = 1 << px_size;
 800fc66:	2301      	movs	r3, #1
 800fc68:	fa03 f808 	lsl.w	r8, r3, r8
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	f012 f95d 	bl	8021f2c <lv_mem_alloc>
 800fc72:	6138      	str	r0, [r7, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d039      	beq.n	800fcec <lv_img_decoder_built_in_open+0x150>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d037      	beq.n	800fcee <lv_img_decoder_built_in_open+0x152>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800fc7e:	7c25      	ldrb	r5, [r4, #16]
 800fc80:	2d01      	cmp	r5, #1
 800fc82:	d03a      	beq.n	800fcfa <lv_img_decoder_built_in_open+0x15e>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800fc84:	6863      	ldr	r3, [r4, #4]
 800fc86:	6899      	ldr	r1, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 800fc88:	f1b8 0f00 	cmp.w	r8, #0
 800fc8c:	d074      	beq.n	800fd78 <lv_img_decoder_built_in_open+0x1dc>
 800fc8e:	2300      	movs	r3, #0
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	eb00 0643 	add.w	r6, r0, r3, lsl #1
 800fc96:	784d      	ldrb	r5, [r1, #1]
 800fc98:	08ad      	lsrs	r5, r5, #2
 800fc9a:	788c      	ldrb	r4, [r1, #2]
 800fc9c:	08e4      	lsrs	r4, r4, #3
 800fc9e:	780a      	ldrb	r2, [r1, #0]
 800fca0:	08d2      	lsrs	r2, r2, #3
 800fca2:	f810 c013 	ldrb.w	ip, [r0, r3, lsl #1]
 800fca6:	f362 0c04 	bfi	ip, r2, #0, #5
 800fcaa:	f800 c013 	strb.w	ip, [r0, r3, lsl #1]
 800fcae:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800fcb2:	f365 124a 	bfi	r2, r5, #5, #6
 800fcb6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800fcba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800fcbe:	f364 02c7 	bfi	r2, r4, #3, #5
 800fcc2:	7072      	strb	r2, [r6, #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 800fcc4:	78c8      	ldrb	r0, [r1, #3]
 800fcc6:	693a      	ldr	r2, [r7, #16]
 800fcc8:	54d0      	strb	r0, [r2, r3]
            for(i = 0; i < palette_size; i++) {
 800fcca:	3301      	adds	r3, #1
 800fccc:	3104      	adds	r1, #4
 800fcce:	4598      	cmp	r8, r3
 800fcd0:	d1de      	bne.n	800fc90 <lv_img_decoder_built_in_open+0xf4>
        return LV_RES_OK;
 800fcd2:	2501      	movs	r5, #1
 800fcd4:	e7aa      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800fcd6:	2014      	movs	r0, #20
 800fcd8:	f012 f928 	bl	8021f2c <lv_mem_alloc>
 800fcdc:	6260      	str	r0, [r4, #36]	; 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 800fcde:	b118      	cbz	r0, 800fce8 <lv_img_decoder_built_in_open+0x14c>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 800fce0:	2114      	movs	r1, #20
 800fce2:	f012 fba3 	bl	802242c <lv_memset_00>
 800fce6:	e7b5      	b.n	800fc54 <lv_img_decoder_built_in_open+0xb8>
            LV_ASSERT_MALLOC(dsc->user_data);
 800fce8:	e7fe      	b.n	800fce8 <lv_img_decoder_built_in_open+0x14c>
        LV_ASSERT_MALLOC(user_data->palette);
 800fcea:	e7fe      	b.n	800fcea <lv_img_decoder_built_in_open+0x14e>
        LV_ASSERT_MALLOC(user_data->opa);
 800fcec:	e7fe      	b.n	800fcec <lv_img_decoder_built_in_open+0x150>
            lv_img_decoder_built_in_close(decoder, dsc);
 800fcee:	4621      	mov	r1, r4
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	f7ff ff39 	bl	800fb68 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 800fcf6:	2500      	movs	r5, #0
 800fcf8:	e798      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	2104      	movs	r1, #4
 800fcfe:	4638      	mov	r0, r7
 800fd00:	f011 fe81 	bl	8021a06 <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 800fd04:	f1b8 0f00 	cmp.w	r8, #0
 800fd08:	d090      	beq.n	800fc2c <lv_img_decoder_built_in_open+0x90>
 800fd0a:	2400      	movs	r4, #0
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 800fd0c:	46a1      	mov	r9, r4
 800fd0e:	2604      	movs	r6, #4
 800fd10:	464b      	mov	r3, r9
 800fd12:	4632      	mov	r2, r6
 800fd14:	a901      	add	r1, sp, #4
 800fd16:	4638      	mov	r0, r7
 800fd18:	f011 fda5 	bl	8021866 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	eb02 0c44 	add.w	ip, r2, r4, lsl #1
 800fd22:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800fd26:	0880      	lsrs	r0, r0, #2
 800fd28:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800fd2c:	08c9      	lsrs	r1, r1, #3
 800fd2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd32:	08db      	lsrs	r3, r3, #3
 800fd34:	f812 e014 	ldrb.w	lr, [r2, r4, lsl #1]
 800fd38:	f363 0e04 	bfi	lr, r3, #0, #5
 800fd3c:	f802 e014 	strb.w	lr, [r2, r4, lsl #1]
 800fd40:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800fd44:	f360 134a 	bfi	r3, r0, #5, #6
 800fd48:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
 800fd4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800fd50:	f361 03c7 	bfi	r3, r1, #3, #5
 800fd54:	f88c 3001 	strb.w	r3, [ip, #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 800fd58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 800fd60:	3401      	adds	r4, #1
 800fd62:	45a0      	cmp	r8, r4
 800fd64:	d1d4      	bne.n	800fd10 <lv_img_decoder_built_in_open+0x174>
 800fd66:	e761      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
        lv_img_decoder_built_in_close(decoder, dsc);
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f7ff fefc 	bl	800fb68 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 800fd70:	2500      	movs	r5, #0
 800fd72:	e75b      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
            return LV_RES_OK;
 800fd74:	2501      	movs	r5, #1
 800fd76:	e759      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
        return LV_RES_OK;
 800fd78:	2501      	movs	r5, #1
 800fd7a:	e757      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
            return LV_RES_OK;
 800fd7c:	2501      	movs	r5, #1
 800fd7e:	e755      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
 800fd80:	2501      	movs	r5, #1
 800fd82:	e753      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
    lv_img_cf_t cf = dsc->header.cf;
 800fd84:	7d0b      	ldrb	r3, [r1, #20]
 800fd86:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800fd8a:	1f02      	subs	r2, r0, #4
 800fd8c:	b2d2      	uxtb	r2, r2
 800fd8e:	2a02      	cmp	r2, #2
 800fd90:	d9f4      	bls.n	800fd7c <lv_img_decoder_built_in_open+0x1e0>
       cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED || cf == LV_IMG_CF_RGB565A8 ||
 800fd92:	2814      	cmp	r0, #20
 800fd94:	d0f4      	beq.n	800fd80 <lv_img_decoder_built_in_open+0x1e4>
 800fd96:	280e      	cmp	r0, #14
 800fd98:	f43f af40 	beq.w	800fc1c <lv_img_decoder_built_in_open+0x80>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800fd9c:	1fc2      	subs	r2, r0, #7
 800fd9e:	b2d2      	uxtb	r2, r2
 800fda0:	2a03      	cmp	r2, #3
 800fda2:	f67f af51 	bls.w	800fc48 <lv_img_decoder_built_in_open+0xac>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT) {
 800fda6:	f1a0 030b 	sub.w	r3, r0, #11
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b02      	cmp	r3, #2
 800fdae:	d8db      	bhi.n	800fd68 <lv_img_decoder_built_in_open+0x1cc>
        return LV_RES_OK; /*Nothing to process*/
 800fdb0:	2501      	movs	r5, #1
 800fdb2:	e73b      	b.n	800fc2c <lv_img_decoder_built_in_open+0x90>
 800fdb4:	0802d67c 	.word	0x0802d67c

0800fdb8 <lv_img_decoder_built_in_read_line>:
{
 800fdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdbc:	b089      	sub	sp, #36	; 0x24
 800fdbe:	460d      	mov	r5, r1
 800fdc0:	4614      	mov	r4, r2
 800fdc2:	461f      	mov	r7, r3
 800fdc4:	f9bd 6048 	ldrsh.w	r6, [sp, #72]	; 0x48
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800fdc8:	7d09      	ldrb	r1, [r1, #20]
 800fdca:	f001 031e 	and.w	r3, r1, #30
 800fdce:	2b04      	cmp	r3, #4
 800fdd0:	d00f      	beq.n	800fdf2 <lv_img_decoder_built_in_read_line+0x3a>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800fdd2:	f001 011f 	and.w	r1, r1, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800fdd6:	2906      	cmp	r1, #6
 800fdd8:	d00b      	beq.n	800fdf2 <lv_img_decoder_built_in_read_line+0x3a>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800fdda:	f1a1 030b 	sub.w	r3, r1, #11
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	2b03      	cmp	r3, #3
 800fde2:	d93b      	bls.n	800fe5c <lv_img_decoder_built_in_read_line+0xa4>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800fde4:	3907      	subs	r1, #7
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800fde6:	b2c9      	uxtb	r1, r1
 800fde8:	2903      	cmp	r1, #3
 800fdea:	f240 80f0 	bls.w	800ffce <lv_img_decoder_built_in_read_line+0x216>
        return LV_RES_INV;
 800fdee:	2400      	movs	r4, #0
 800fdf0:	e003      	b.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800fdf2:	7c2b      	ldrb	r3, [r5, #16]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d004      	beq.n	800fe02 <lv_img_decoder_built_in_read_line+0x4a>
    lv_res_t res = LV_RES_INV;
 800fdf8:	2400      	movs	r4, #0
}
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	b009      	add	sp, #36	; 0x24
 800fdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800fe02:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800fe06:	7d28      	ldrb	r0, [r5, #20]
 800fe08:	f000 001f 	and.w	r0, r0, #31
 800fe0c:	f7fd fda5 	bl	800d95a <lv_img_cf_get_px_size>
 800fe10:	4680      	mov	r8, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800fe12:	6969      	ldr	r1, [r5, #20]
 800fe14:	f3c1 218a 	ubfx	r1, r1, #10, #11
 800fe18:	fb07 4101 	mla	r1, r7, r1, r4
 800fe1c:	fb00 f101 	mul.w	r1, r0, r1
 800fe20:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 800fe22:	2200      	movs	r2, #0
 800fe24:	3104      	adds	r1, #4
 800fe26:	4648      	mov	r0, r9
 800fe28:	f011 fded 	bl	8021a06 <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	b108      	cbz	r0, 800fe34 <lv_img_decoder_built_in_read_line+0x7c>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 800fe30:	2400      	movs	r4, #0
 800fe32:	e7e2      	b.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
    }
    uint32_t btr = len * (px_size >> 3);
 800fe34:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 800fe38:	fb06 f608 	mul.w	r6, r6, r8
    uint32_t br  = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	9304      	str	r3, [sp, #16]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 800fe40:	ab04      	add	r3, sp, #16
 800fe42:	4632      	mov	r2, r6
 800fe44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fe46:	4648      	mov	r0, r9
 800fe48:	f011 fd0d 	bl	8021866 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	d1d4      	bne.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 800fe50:	9c04      	ldr	r4, [sp, #16]
 800fe52:	42b4      	cmp	r4, r6
 800fe54:	bf14      	ite	ne
 800fe56:	2400      	movne	r4, #0
 800fe58:	2401      	moveq	r4, #1
 800fe5a:	e7ce      	b.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
}

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800fe5c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800fe60:	f8ad 3008 	strh.w	r3, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800fe64:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
 800fe68:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
 800fe6c:	9303      	str	r3, [sp, #12]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800fe6e:	4ba6      	ldr	r3, [pc, #664]	; (8010108 <lv_img_decoder_built_in_read_line+0x350>)
 800fe70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe72:	f10d 0c20 	add.w	ip, sp, #32
 800fe76:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 800fe7a:	892a      	ldrh	r2, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800fe7c:	2e00      	cmp	r6, #0
 800fe7e:	dd0d      	ble.n	800fe9c <lv_img_decoder_built_in_read_line+0xe4>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800fe80:	0a10      	lsrs	r0, r2, #8
 800fe82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fe84:	1e73      	subs	r3, r6, #1
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe8c:	f101 0c03 	add.w	ip, r1, #3
 800fe90:	4463      	add	r3, ip
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800fe92:	700a      	strb	r2, [r1, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800fe94:	7048      	strb	r0, [r1, #1]
    for(i = 0; i < len; i++) {
 800fe96:	3103      	adds	r1, #3
 800fe98:	4299      	cmp	r1, r3
 800fe9a:	d1fa      	bne.n	800fe92 <lv_img_decoder_built_in_read_line+0xda>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 800fe9c:	7d28      	ldrb	r0, [r5, #20]
 800fe9e:	f000 001f 	and.w	r0, r0, #31
 800fea2:	f7fd fd5a 	bl	800d95a <lv_img_cf_get_px_size>
 800fea6:	4680      	mov	r8, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 800fea8:	7d2b      	ldrb	r3, [r5, #20]
 800feaa:	f003 031f 	and.w	r3, r3, #31
 800feae:	3b0b      	subs	r3, #11
 800feb0:	2b03      	cmp	r3, #3
 800feb2:	d874      	bhi.n	800ff9e <lv_img_decoder_built_in_read_line+0x1e6>
 800feb4:	e8df f003 	tbb	[pc, r3]
 800feb8:	6a5b4c02 	.word	0x6a5b4c02
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800febc:	696b      	ldr	r3, [r5, #20]
 800febe:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800fec2:	3007      	adds	r0, #7
 800fec4:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800fec6:	10e3      	asrs	r3, r4, #3
 800fec8:	fb07 3700 	mla	r7, r7, r0, r3
            pos = 7 - (x & 0x7);
 800fecc:	43e4      	mvns	r4, r4
 800fece:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 800fed2:	f10d 0908 	add.w	r9, sp, #8
            ofs += w * y + x;  /*First pixel*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800fed6:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    uint8_t * fs_buf = lv_mem_buf_get(w);
 800feda:	9001      	str	r0, [sp, #4]
 800fedc:	f012 f878 	bl	8021fd0 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 800fee0:	4682      	mov	sl, r0
 800fee2:	2800      	cmp	r0, #0
 800fee4:	d071      	beq.n	800ffca <lv_img_decoder_built_in_read_line+0x212>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800fee6:	7c2b      	ldrb	r3, [r5, #16]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d161      	bne.n	800ffb0 <lv_img_decoder_built_in_read_line+0x1f8>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
 800feec:	686b      	ldr	r3, [r5, #4]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	441f      	add	r7, r3
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    for(i = 0; i < len; i++) {
 800fef2:	2e00      	cmp	r6, #0
 800fef4:	dd27      	ble.n	800ff46 <lv_img_decoder_built_in_read_line+0x18e>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800fef6:	2001      	movs	r0, #1
 800fef8:	fa00 f008 	lsl.w	r0, r0, r8
 800fefc:	3801      	subs	r0, #1
 800fefe:	b280      	uxth	r0, r0
 800ff00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ff02:	1e71      	subs	r1, r6, #1
 800ff04:	b289      	uxth	r1, r1
 800ff06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ff0a:	4613      	mov	r3, r2
 800ff0c:	3303      	adds	r3, #3
 800ff0e:	4419      	add	r1, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 800ff10:	f1c8 0608 	rsb	r6, r8, #8
 800ff14:	b276      	sxtb	r6, r6
        uint8_t val_act = (*data_tmp >> pos) & mask;
 800ff16:	783b      	ldrb	r3, [r7, #0]
 800ff18:	4123      	asrs	r3, r4
 800ff1a:	4003      	ands	r3, r0
 800ff1c:	b2db      	uxtb	r3, r3
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800ff1e:	f895 c014 	ldrb.w	ip, [r5, #20]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800ff22:	f00c 0c1f 	and.w	ip, ip, #31
 800ff26:	f1bc 0f0e 	cmp.w	ip, #14
 800ff2a:	bf18      	it	ne
 800ff2c:	f819 3003 	ldrbne.w	r3, [r9, r3]
 800ff30:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
 800ff32:	eba4 0408 	sub.w	r4, r4, r8
 800ff36:	b264      	sxtb	r4, r4
        if(pos < 0) {
 800ff38:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 800ff3a:	bfbc      	itt	lt
 800ff3c:	4634      	movlt	r4, r6
            data_tmp++;
 800ff3e:	3701      	addlt	r7, #1
    for(i = 0; i < len; i++) {
 800ff40:	3203      	adds	r2, #3
 800ff42:	4291      	cmp	r1, r2
 800ff44:	d1e7      	bne.n	800ff16 <lv_img_decoder_built_in_read_line+0x15e>
        }
    }
    lv_mem_buf_release(fs_buf);
 800ff46:	4650      	mov	r0, sl
 800ff48:	f012 f8a4 	bl	8022094 <lv_mem_buf_release>
    return LV_RES_OK;
 800ff4c:	2401      	movs	r4, #1
 800ff4e:	e754      	b.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800ff50:	696b      	ldr	r3, [r5, #20]
 800ff52:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800ff56:	3003      	adds	r0, #3
 800ff58:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 800ff5a:	10a3      	asrs	r3, r4, #2
 800ff5c:	fb07 3700 	mla	r7, r7, r0, r3
            pos = 6 - (x & 0x3) * 2;
 800ff60:	43e4      	mvns	r4, r4
 800ff62:	f004 0403 	and.w	r4, r4, #3
 800ff66:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 800ff68:	f10d 090c 	add.w	r9, sp, #12
            break;
 800ff6c:	e7b3      	b.n	800fed6 <lv_img_decoder_built_in_read_line+0x11e>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800ff6e:	696b      	ldr	r3, [r5, #20]
 800ff70:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800ff74:	3001      	adds	r0, #1
 800ff76:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 800ff78:	1063      	asrs	r3, r4, #1
 800ff7a:	fb07 3700 	mla	r7, r7, r0, r3
            pos = 4 - (x & 0x1) * 4;
 800ff7e:	f014 0f01 	tst.w	r4, #1
 800ff82:	d011      	beq.n	800ffa8 <lv_img_decoder_built_in_read_line+0x1f0>
 800ff84:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
 800ff86:	f10d 0910 	add.w	r9, sp, #16
 800ff8a:	e7a4      	b.n	800fed6 <lv_img_decoder_built_in_read_line+0x11e>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800ff8c:	6968      	ldr	r0, [r5, #20]
 800ff8e:	f3c0 238a 	ubfx	r3, r0, #10, #11
 800ff92:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 800ff94:	fb07 4703 	mla	r7, r7, r3, r4
            pos = 0;
 800ff98:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 800ff9a:	46a1      	mov	r9, r4
            break;
 800ff9c:	e79b      	b.n	800fed6 <lv_img_decoder_built_in_read_line+0x11e>
    switch(dsc->header.cf) {
 800ff9e:	2400      	movs	r4, #0
 800ffa0:	4627      	mov	r7, r4
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	46a1      	mov	r9, r4
 800ffa6:	e796      	b.n	800fed6 <lv_img_decoder_built_in_read_line+0x11e>
            pos = 4 - (x & 0x1) * 4;
 800ffa8:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
 800ffaa:	f10d 0910 	add.w	r9, sp, #16
 800ffae:	e792      	b.n	800fed6 <lv_img_decoder_built_in_read_line+0x11e>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	1d39      	adds	r1, r7, #4
 800ffb4:	4658      	mov	r0, fp
 800ffb6:	f011 fd26 	bl	8021a06 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9a01      	ldr	r2, [sp, #4]
 800ffbe:	4651      	mov	r1, sl
 800ffc0:	4658      	mov	r0, fp
 800ffc2:	f011 fc50 	bl	8021866 <lv_fs_read>
        data_tmp = fs_buf;
 800ffc6:	4657      	mov	r7, sl
 800ffc8:	e793      	b.n	800fef2 <lv_img_decoder_built_in_read_line+0x13a>
    if(fs_buf == NULL) return LV_RES_INV;
 800ffca:	2400      	movs	r4, #0
 800ffcc:	e715      	b.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
}

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 800ffce:	7d28      	ldrb	r0, [r5, #20]
 800ffd0:	f000 001f 	and.w	r0, r0, #31
 800ffd4:	f7fd fcc1 	bl	800d95a <lv_img_cf_get_px_size>
 800ffd8:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 800ffda:	7d2b      	ldrb	r3, [r5, #20]
 800ffdc:	f003 031f 	and.w	r3, r3, #31
 800ffe0:	3b07      	subs	r3, #7
 800ffe2:	2b03      	cmp	r3, #3
 800ffe4:	d87b      	bhi.n	80100de <lv_img_decoder_built_in_read_line+0x326>
 800ffe6:	e8df f003 	tbb	[pc, r3]
 800ffea:	4f02      	.short	0x4f02
 800ffec:	705f      	.short	0x705f
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 800ffee:	696b      	ldr	r3, [r5, #20]
 800fff0:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800fff4:	3007      	adds	r0, #7
 800fff6:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 800fff8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 800fffc:	fb07 a700 	mla	r7, r7, r0, sl
            ofs += 8;                /*Skip the palette*/
 8010000:	f107 0a08 	add.w	sl, r7, #8
            pos = 7 - (x & 0x7);
 8010004:	43e4      	mvns	r4, r4
 8010006:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801000a:	6a6f      	ldr	r7, [r5, #36]	; 0x24

    uint8_t * fs_buf = lv_mem_buf_get(w);
 801000c:	4683      	mov	fp, r0
 801000e:	f011 ffdf 	bl	8021fd0 <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8010012:	4681      	mov	r9, r0
 8010014:	2800      	cmp	r0, #0
 8010016:	d075      	beq.n	8010104 <lv_img_decoder_built_in_read_line+0x34c>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8010018:	7c2b      	ldrb	r3, [r5, #16]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d164      	bne.n	80100e8 <lv_img_decoder_built_in_read_line+0x330>
        const lv_img_dsc_t * img_dsc = dsc->src;
        data_tmp                     = img_dsc->data + ofs;
 801001e:	686b      	ldr	r3, [r5, #4]
 8010020:	689d      	ldr	r5, [r3, #8]
 8010022:	4455      	add	r5, sl
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8010024:	2e00      	cmp	r6, #0
 8010026:	dd2a      	ble.n	801007e <lv_img_decoder_built_in_read_line+0x2c6>
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 8010028:	f04f 0c01 	mov.w	ip, #1
 801002c:	fa0c fc08 	lsl.w	ip, ip, r8
 8010030:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8010034:	fa1f fc8c 	uxth.w	ip, ip
 8010038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801003a:	1e71      	subs	r1, r6, #1
 801003c:	b289      	uxth	r1, r1
 801003e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010042:	4613      	mov	r3, r2
 8010044:	3303      	adds	r3, #3
 8010046:	4419      	add	r1, r3
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];

        pos -= px_size;
        if(pos < 0) {
            pos = 8 - px_size;
 8010048:	f1c8 0608 	rsb	r6, r8, #8
 801004c:	b276      	sxtb	r6, r6
        uint8_t val_act = (*data_tmp >> pos) & mask;
 801004e:	782b      	ldrb	r3, [r5, #0]
 8010050:	4123      	asrs	r3, r4
 8010052:	ea03 030c 	and.w	r3, r3, ip
        lv_color_t color = user_data->palette[val_act];
 8010056:	b2db      	uxtb	r3, r3
 8010058:	68f8      	ldr	r0, [r7, #12]
 801005a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 801005e:	7010      	strb	r0, [r2, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 8010060:	0a00      	lsrs	r0, r0, #8
 8010062:	7050      	strb	r0, [r2, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 8010064:	6938      	ldr	r0, [r7, #16]
 8010066:	5cc3      	ldrb	r3, [r0, r3]
 8010068:	7093      	strb	r3, [r2, #2]
        pos -= px_size;
 801006a:	eba4 0408 	sub.w	r4, r4, r8
 801006e:	b264      	sxtb	r4, r4
        if(pos < 0) {
 8010070:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
 8010072:	bfbc      	itt	lt
 8010074:	4634      	movlt	r4, r6
            data_tmp++;
 8010076:	3501      	addlt	r5, #1
    for(i = 0; i < len; i++) {
 8010078:	3203      	adds	r2, #3
 801007a:	428a      	cmp	r2, r1
 801007c:	d1e7      	bne.n	801004e <lv_img_decoder_built_in_read_line+0x296>
        }
    }
    lv_mem_buf_release(fs_buf);
 801007e:	4648      	mov	r0, r9
 8010080:	f012 f808 	bl	8022094 <lv_mem_buf_release>
    return LV_RES_OK;
 8010084:	2401      	movs	r4, #1
 8010086:	e6b8      	b.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 8010088:	696b      	ldr	r3, [r5, #20]
 801008a:	f3c3 208a 	ubfx	r0, r3, #10, #11
 801008e:	3003      	adds	r0, #3
 8010090:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 8010092:	ea4f 0aa4 	mov.w	sl, r4, asr #2
 8010096:	fb07 a700 	mla	r7, r7, r0, sl
            ofs += 16;               /*Skip the palette*/
 801009a:	f107 0a10 	add.w	sl, r7, #16
            pos = 6 - (x & 0x3) * 2;
 801009e:	43e4      	mvns	r4, r4
 80100a0:	f004 0403 	and.w	r4, r4, #3
 80100a4:	0064      	lsls	r4, r4, #1
            break;
 80100a6:	e7b0      	b.n	801000a <lv_img_decoder_built_in_read_line+0x252>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 80100a8:	696b      	ldr	r3, [r5, #20]
 80100aa:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80100ae:	3001      	adds	r0, #1
 80100b0:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 80100b2:	ea4f 0a64 	mov.w	sl, r4, asr #1
 80100b6:	fb07 a700 	mla	r7, r7, r0, sl
            ofs += 64;               /*Skip the palette*/
 80100ba:	f107 0a40 	add.w	sl, r7, #64	; 0x40
            pos = 4 - (x & 0x1) * 4;
 80100be:	f014 0f01 	tst.w	r4, #1
 80100c2:	bf0c      	ite	eq
 80100c4:	2404      	moveq	r4, #4
 80100c6:	2400      	movne	r4, #0
 80100c8:	e79f      	b.n	801000a <lv_img_decoder_built_in_read_line+0x252>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 80100ca:	6968      	ldr	r0, [r5, #20]
 80100cc:	f3c0 238a 	ubfx	r3, r0, #10, #11
 80100d0:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 80100d2:	fb07 4703 	mla	r7, r7, r3, r4
            ofs += 1024;       /*Skip the palette*/
 80100d6:	f507 6a80 	add.w	sl, r7, #1024	; 0x400
            pos = 0;
 80100da:	2400      	movs	r4, #0
            break;
 80100dc:	e795      	b.n	801000a <lv_img_decoder_built_in_read_line+0x252>
    switch(dsc->header.cf) {
 80100de:	f04f 0a00 	mov.w	sl, #0
 80100e2:	4654      	mov	r4, sl
 80100e4:	4650      	mov	r0, sl
 80100e6:	e790      	b.n	801000a <lv_img_decoder_built_in_read_line+0x252>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 80100e8:	2200      	movs	r2, #0
 80100ea:	f10a 0104 	add.w	r1, sl, #4
 80100ee:	4638      	mov	r0, r7
 80100f0:	f011 fc89 	bl	8021a06 <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 80100f4:	2300      	movs	r3, #0
 80100f6:	465a      	mov	r2, fp
 80100f8:	4649      	mov	r1, r9
 80100fa:	4638      	mov	r0, r7
 80100fc:	f011 fbb3 	bl	8021866 <lv_fs_read>
        data_tmp = fs_buf;
 8010100:	464d      	mov	r5, r9
 8010102:	e78f      	b.n	8010024 <lv_img_decoder_built_in_read_line+0x26c>
    if(fs_buf == NULL) return LV_RES_INV;
 8010104:	2400      	movs	r4, #0
 8010106:	e678      	b.n	800fdfa <lv_img_decoder_built_in_read_line+0x42>
 8010108:	0802d49c 	.word	0x0802d49c

0801010c <lv_img_decoder_get_info>:
{
 801010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010110:	4606      	mov	r6, r0
 8010112:	460f      	mov	r7, r1
    lv_memset_00(header, sizeof(lv_img_header_t));
 8010114:	2104      	movs	r1, #4
 8010116:	4638      	mov	r0, r7
 8010118:	f012 f988 	bl	802242c <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 801011c:	b306      	cbz	r6, 8010160 <lv_img_decoder_get_info+0x54>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 801011e:	4630      	mov	r0, r6
 8010120:	f7fd fc4b 	bl	800d9ba <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8010124:	4605      	mov	r5, r0
 8010126:	b908      	cbnz	r0, 801012c <lv_img_decoder_get_info+0x20>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8010128:	68b3      	ldr	r3, [r6, #8]
 801012a:	b1d3      	cbz	r3, 8010162 <lv_img_decoder_get_info+0x56>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 801012c:	480f      	ldr	r0, [pc, #60]	; (801016c <lv_img_decoder_get_info+0x60>)
 801012e:	f011 fdc7 	bl	8021cc0 <_lv_ll_get_head>
 8010132:	4604      	mov	r4, r0
 8010134:	b1c0      	cbz	r0, 8010168 <lv_img_decoder_get_info+0x5c>
    lv_res_t res = LV_RES_INV;
 8010136:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 8010138:	f8df 8030 	ldr.w	r8, [pc, #48]	; 801016c <lv_img_decoder_get_info+0x60>
 801013c:	e005      	b.n	801014a <lv_img_decoder_get_info+0x3e>
 801013e:	4621      	mov	r1, r4
 8010140:	4640      	mov	r0, r8
 8010142:	f011 fdc5 	bl	8021cd0 <_lv_ll_get_next>
 8010146:	4604      	mov	r4, r0
 8010148:	b158      	cbz	r0, 8010162 <lv_img_decoder_get_info+0x56>
        if(d->info_cb) {
 801014a:	6823      	ldr	r3, [r4, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d0f6      	beq.n	801013e <lv_img_decoder_get_info+0x32>
            res = d->info_cb(d, src, header);
 8010150:	463a      	mov	r2, r7
 8010152:	4631      	mov	r1, r6
 8010154:	4620      	mov	r0, r4
 8010156:	4798      	blx	r3
 8010158:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 801015a:	2801      	cmp	r0, #1
 801015c:	d1ef      	bne.n	801013e <lv_img_decoder_get_info+0x32>
 801015e:	e000      	b.n	8010162 <lv_img_decoder_get_info+0x56>
    if(src == NULL) return LV_RES_INV;
 8010160:	2500      	movs	r5, #0
}
 8010162:	4628      	mov	r0, r5
 8010164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_res_t res = LV_RES_INV;
 8010168:	2500      	movs	r5, #0
 801016a:	e7fa      	b.n	8010162 <lv_img_decoder_get_info+0x56>
 801016c:	20002950 	.word	0x20002950

08010170 <lv_img_decoder_open>:
{
 8010170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010174:	4606      	mov	r6, r0
 8010176:	460f      	mov	r7, r1
 8010178:	4690      	mov	r8, r2
 801017a:	461c      	mov	r4, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 801017c:	2128      	movs	r1, #40	; 0x28
 801017e:	f012 f955 	bl	802242c <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 8010182:	2f00      	cmp	r7, #0
 8010184:	d05e      	beq.n	8010244 <lv_img_decoder_open+0xd4>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8010186:	4638      	mov	r0, r7
 8010188:	f7fd fc17 	bl	800d9ba <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801018c:	4605      	mov	r5, r0
 801018e:	b9b0      	cbnz	r0, 80101be <lv_img_decoder_open+0x4e>
        if(img_dsc->data == NULL) return LV_RES_INV;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d04f      	beq.n	8010236 <lv_img_decoder_open+0xc6>
    dsc->color    = color;
 8010196:	f8a6 8008 	strh.w	r8, [r6, #8]
    dsc->src_type = src_type;
 801019a:	2300      	movs	r3, #0
 801019c:	7433      	strb	r3, [r6, #16]
    dsc->frame_id = frame_id;
 801019e:	60f4      	str	r4, [r6, #12]
        dsc->src = src;
 80101a0:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 80101a2:	4829      	ldr	r0, [pc, #164]	; (8010248 <lv_img_decoder_open+0xd8>)
 80101a4:	f011 fd8c 	bl	8021cc0 <_lv_ll_get_head>
 80101a8:	4604      	mov	r4, r0
 80101aa:	2800      	cmp	r0, #0
 80101ac:	d03f      	beq.n	801022e <lv_img_decoder_open+0xbe>
    lv_res_t res = LV_RES_INV;
 80101ae:	2500      	movs	r5, #0
        res = decoder->info_cb(decoder, src, &dsc->header);
 80101b0:	f106 0814 	add.w	r8, r6, #20
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 80101b4:	f04f 0a04 	mov.w	sl, #4
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 80101b8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8010248 <lv_img_decoder_open+0xd8>
 80101bc:	e018      	b.n	80101f0 <lv_img_decoder_open+0x80>
    dsc->color    = color;
 80101be:	f8a6 8008 	strh.w	r8, [r6, #8]
    dsc->src_type = src_type;
 80101c2:	7430      	strb	r0, [r6, #16]
    dsc->frame_id = frame_id;
 80101c4:	60f4      	str	r4, [r6, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 80101c6:	2801      	cmp	r0, #1
 80101c8:	d1ea      	bne.n	80101a0 <lv_img_decoder_open+0x30>
        size_t fnlen = strlen(src);
 80101ca:	4638      	mov	r0, r7
 80101cc:	f7f0 f834 	bl	8000238 <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 80101d0:	3001      	adds	r0, #1
 80101d2:	f011 feab 	bl	8021f2c <lv_mem_alloc>
 80101d6:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MALLOC(dsc->src);
 80101d8:	b118      	cbz	r0, 80101e2 <lv_img_decoder_open+0x72>
        strcpy((char *)dsc->src, src);
 80101da:	4639      	mov	r1, r7
 80101dc:	f01c fe9a 	bl	802cf14 <strcpy>
 80101e0:	e7df      	b.n	80101a2 <lv_img_decoder_open+0x32>
        LV_ASSERT_MALLOC(dsc->src);
 80101e2:	e7fe      	b.n	80101e2 <lv_img_decoder_open+0x72>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 80101e4:	4621      	mov	r1, r4
 80101e6:	4648      	mov	r0, r9
 80101e8:	f011 fd72 	bl	8021cd0 <_lv_ll_get_next>
 80101ec:	4604      	mov	r4, r0
 80101ee:	b1f8      	cbz	r0, 8010230 <lv_img_decoder_open+0xc0>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 80101f0:	6823      	ldr	r3, [r4, #0]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d0f6      	beq.n	80101e4 <lv_img_decoder_open+0x74>
 80101f6:	6862      	ldr	r2, [r4, #4]
 80101f8:	2a00      	cmp	r2, #0
 80101fa:	d0f3      	beq.n	80101e4 <lv_img_decoder_open+0x74>
        res = decoder->info_cb(decoder, src, &dsc->header);
 80101fc:	4642      	mov	r2, r8
 80101fe:	4639      	mov	r1, r7
 8010200:	4620      	mov	r0, r4
 8010202:	4798      	blx	r3
 8010204:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
 8010206:	2801      	cmp	r0, #1
 8010208:	d1ec      	bne.n	80101e4 <lv_img_decoder_open+0x74>
        dsc->decoder = decoder;
 801020a:	6034      	str	r4, [r6, #0]
        res = decoder->open_cb(decoder, dsc);
 801020c:	6863      	ldr	r3, [r4, #4]
 801020e:	4631      	mov	r1, r6
 8010210:	4620      	mov	r0, r4
 8010212:	4798      	blx	r3
 8010214:	4605      	mov	r5, r0
        if(res == LV_RES_OK) return res;
 8010216:	2801      	cmp	r0, #1
 8010218:	d00d      	beq.n	8010236 <lv_img_decoder_open+0xc6>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 801021a:	4651      	mov	r1, sl
 801021c:	4640      	mov	r0, r8
 801021e:	f012 f905 	bl	802242c <lv_memset_00>
        dsc->error_msg = NULL;
 8010222:	2300      	movs	r3, #0
 8010224:	6233      	str	r3, [r6, #32]
        dsc->img_data  = NULL;
 8010226:	61b3      	str	r3, [r6, #24]
        dsc->user_data = NULL;
 8010228:	6273      	str	r3, [r6, #36]	; 0x24
        dsc->time_to_open = 0;
 801022a:	61f3      	str	r3, [r6, #28]
 801022c:	e7da      	b.n	80101e4 <lv_img_decoder_open+0x74>
    lv_res_t res = LV_RES_INV;
 801022e:	2500      	movs	r5, #0
    if(dsc->src_type == LV_IMG_SRC_FILE)
 8010230:	7c33      	ldrb	r3, [r6, #16]
 8010232:	2b01      	cmp	r3, #1
 8010234:	d002      	beq.n	801023c <lv_img_decoder_open+0xcc>
}
 8010236:	4628      	mov	r0, r5
 8010238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_mem_free((void *)dsc->src);
 801023c:	6870      	ldr	r0, [r6, #4]
 801023e:	f011 fe93 	bl	8021f68 <lv_mem_free>
 8010242:	e7f8      	b.n	8010236 <lv_img_decoder_open+0xc6>
    if(src == NULL) return LV_RES_INV;
 8010244:	2500      	movs	r5, #0
 8010246:	e7f6      	b.n	8010236 <lv_img_decoder_open+0xc6>
 8010248:	20002950 	.word	0x20002950

0801024c <lv_img_decoder_read_line>:
{
 801024c:	b510      	push	{r4, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	4684      	mov	ip, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 8010252:	6800      	ldr	r0, [r0, #0]
 8010254:	6884      	ldr	r4, [r0, #8]
 8010256:	b154      	cbz	r4, 801026e <lv_img_decoder_read_line+0x22>
 8010258:	f8dd e010 	ldr.w	lr, [sp, #16]
 801025c:	f8cd e004 	str.w	lr, [sp, #4]
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	4613      	mov	r3, r2
 8010264:	460a      	mov	r2, r1
 8010266:	4661      	mov	r1, ip
 8010268:	47a0      	blx	r4
}
 801026a:	b002      	add	sp, #8
 801026c:	bd10      	pop	{r4, pc}
    lv_res_t res = LV_RES_INV;
 801026e:	2000      	movs	r0, #0
 8010270:	e7fb      	b.n	801026a <lv_img_decoder_read_line+0x1e>

08010272 <lv_img_decoder_close>:
{
 8010272:	b510      	push	{r4, lr}
 8010274:	4604      	mov	r4, r0
    if(dsc->decoder) {
 8010276:	6800      	ldr	r0, [r0, #0]
 8010278:	b130      	cbz	r0, 8010288 <lv_img_decoder_close+0x16>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 801027a:	68c3      	ldr	r3, [r0, #12]
 801027c:	b10b      	cbz	r3, 8010282 <lv_img_decoder_close+0x10>
 801027e:	4621      	mov	r1, r4
 8010280:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8010282:	7c23      	ldrb	r3, [r4, #16]
 8010284:	2b01      	cmp	r3, #1
 8010286:	d000      	beq.n	801028a <lv_img_decoder_close+0x18>
}
 8010288:	bd10      	pop	{r4, pc}
            lv_mem_free((void *)dsc->src);
 801028a:	6860      	ldr	r0, [r4, #4]
 801028c:	f011 fe6c 	bl	8021f68 <lv_mem_free>
            dsc->src = NULL;
 8010290:	2300      	movs	r3, #0
 8010292:	6063      	str	r3, [r4, #4]
}
 8010294:	e7f8      	b.n	8010288 <lv_img_decoder_close+0x16>
	...

08010298 <lv_img_decoder_create>:
{
 8010298:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 801029a:	4805      	ldr	r0, [pc, #20]	; (80102b0 <lv_img_decoder_create+0x18>)
 801029c:	f011 fc8f 	bl	8021bbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 80102a0:	b128      	cbz	r0, 80102ae <lv_img_decoder_create+0x16>
 80102a2:	4604      	mov	r4, r0
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 80102a4:	2114      	movs	r1, #20
 80102a6:	f012 f8c1 	bl	802242c <lv_memset_00>
}
 80102aa:	4620      	mov	r0, r4
 80102ac:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 80102ae:	e7fe      	b.n	80102ae <lv_img_decoder_create+0x16>
 80102b0:	20002950 	.word	0x20002950

080102b4 <_lv_img_decoder_init>:
{
 80102b4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 80102b6:	2114      	movs	r1, #20
 80102b8:	4807      	ldr	r0, [pc, #28]	; (80102d8 <_lv_img_decoder_init+0x24>)
 80102ba:	f011 fc78 	bl	8021bae <_lv_ll_init>
    decoder = lv_img_decoder_create();
 80102be:	f7ff ffeb 	bl	8010298 <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 80102c2:	b140      	cbz	r0, 80102d6 <_lv_img_decoder_init+0x22>
    decoder->info_cb = info_cb;
 80102c4:	4a05      	ldr	r2, [pc, #20]	; (80102dc <_lv_img_decoder_init+0x28>)
 80102c6:	6002      	str	r2, [r0, #0]
    decoder->open_cb = open_cb;
 80102c8:	4a05      	ldr	r2, [pc, #20]	; (80102e0 <_lv_img_decoder_init+0x2c>)
 80102ca:	6042      	str	r2, [r0, #4]
    decoder->read_line_cb = read_line_cb;
 80102cc:	4a05      	ldr	r2, [pc, #20]	; (80102e4 <_lv_img_decoder_init+0x30>)
 80102ce:	6082      	str	r2, [r0, #8]
    decoder->close_cb = close_cb;
 80102d0:	4a05      	ldr	r2, [pc, #20]	; (80102e8 <_lv_img_decoder_init+0x34>)
 80102d2:	60c2      	str	r2, [r0, #12]
}
 80102d4:	bd08      	pop	{r3, pc}
    LV_ASSERT_MALLOC(decoder);
 80102d6:	e7fe      	b.n	80102d6 <_lv_img_decoder_init+0x22>
 80102d8:	20002950 	.word	0x20002950
 80102dc:	0800fa9d 	.word	0x0800fa9d
 80102e0:	0800fb9d 	.word	0x0800fb9d
 80102e4:	0800fdb9 	.word	0x0800fdb9
 80102e8:	0800fb69 	.word	0x0800fb69

080102ec <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 80102ec:	4770      	bx	lr

080102ee <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 80102ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102f2:	4698      	mov	r8, r3
 80102f4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80102f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28

    lv_color_t * dest_bufc =  dest_buf;
    lv_color_t * src_bufc =  src_buf;

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 80102fa:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
    dest_bufc += dest_area->x1;
 80102fe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8010302:	fb04 0502 	mla	r5, r4, r2, r0
 8010306:	eb01 0545 	add.w	r5, r1, r5, lsl #1

    src_bufc += src_stride * src_area->y1;
 801030a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    src_bufc += src_area->x1;
 801030e:	f9b7 6000 	ldrsh.w	r6, [r7]
 8010312:	fb0a 6303 	mla	r3, sl, r3, r6
 8010316:	9e08      	ldr	r6, [sp, #32]
 8010318:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801031c:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8010320:	3701      	adds	r7, #1
 8010322:	1a3f      	subs	r7, r7, r0

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8010324:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8010328:	42a3      	cmp	r3, r4
 801032a:	db12      	blt.n	8010352 <lv_draw_sw_buffer_copy+0x64>
 801032c:	b23f      	sxth	r7, r7
 801032e:	007f      	lsls	r7, r7, #1
        lv_memcpy(dest_bufc, src_bufc, line_length);
        dest_bufc += dest_stride;
 8010330:	ea4f 0942 	mov.w	r9, r2, lsl #1
        src_bufc += src_stride;
 8010334:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        lv_memcpy(dest_bufc, src_bufc, line_length);
 8010338:	463a      	mov	r2, r7
 801033a:	4631      	mov	r1, r6
 801033c:	4628      	mov	r0, r5
 801033e:	f011 fedf 	bl	8022100 <lv_memcpy>
        dest_bufc += dest_stride;
 8010342:	444d      	add	r5, r9
        src_bufc += src_stride;
 8010344:	4456      	add	r6, sl
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8010346:	3401      	adds	r4, #1
 8010348:	b224      	sxth	r4, r4
 801034a:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
 801034e:	42a2      	cmp	r2, r4
 8010350:	daf2      	bge.n	8010338 <lv_draw_sw_buffer_copy+0x4a>
    }
}
 8010352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010358 <lv_draw_sw_init_ctx>:
{
 8010358:	b510      	push	{r4, lr}
 801035a:	460c      	mov	r4, r1
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 801035c:	2158      	movs	r1, #88	; 0x58
 801035e:	4620      	mov	r0, r4
 8010360:	f012 f864 	bl	802242c <lv_memset_00>
    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 8010364:	4b10      	ldr	r3, [pc, #64]	; (80103a8 <lv_draw_sw_init_ctx+0x50>)
 8010366:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8010368:	4b10      	ldr	r3, [pc, #64]	; (80103ac <lv_draw_sw_init_ctx+0x54>)
 801036a:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 801036c:	4b10      	ldr	r3, [pc, #64]	; (80103b0 <lv_draw_sw_init_ctx+0x58>)
 801036e:	6323      	str	r3, [r4, #48]	; 0x30
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 8010370:	4b10      	ldr	r3, [pc, #64]	; (80103b4 <lv_draw_sw_init_ctx+0x5c>)
 8010372:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 8010374:	4b10      	ldr	r3, [pc, #64]	; (80103b8 <lv_draw_sw_init_ctx+0x60>)
 8010376:	61a3      	str	r3, [r4, #24]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 8010378:	4b10      	ldr	r3, [pc, #64]	; (80103bc <lv_draw_sw_init_ctx+0x64>)
 801037a:	6263      	str	r3, [r4, #36]	; 0x24
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 801037c:	4b10      	ldr	r3, [pc, #64]	; (80103c0 <lv_draw_sw_init_ctx+0x68>)
 801037e:	62a3      	str	r3, [r4, #40]	; 0x28
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 8010380:	4b10      	ldr	r3, [pc, #64]	; (80103c4 <lv_draw_sw_init_ctx+0x6c>)
 8010382:	62e3      	str	r3, [r4, #44]	; 0x2c
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 8010384:	4b10      	ldr	r3, [pc, #64]	; (80103c8 <lv_draw_sw_init_ctx+0x70>)
 8010386:	6363      	str	r3, [r4, #52]	; 0x34
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 8010388:	4b10      	ldr	r3, [pc, #64]	; (80103cc <lv_draw_sw_init_ctx+0x74>)
 801038a:	63a3      	str	r3, [r4, #56]	; 0x38
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 801038c:	4b10      	ldr	r3, [pc, #64]	; (80103d0 <lv_draw_sw_init_ctx+0x78>)
 801038e:	63e3      	str	r3, [r4, #60]	; 0x3c
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 8010390:	4b10      	ldr	r3, [pc, #64]	; (80103d4 <lv_draw_sw_init_ctx+0x7c>)
 8010392:	6423      	str	r3, [r4, #64]	; 0x40
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 8010394:	4b10      	ldr	r3, [pc, #64]	; (80103d8 <lv_draw_sw_init_ctx+0x80>)
 8010396:	6463      	str	r3, [r4, #68]	; 0x44
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 8010398:	4b10      	ldr	r3, [pc, #64]	; (80103dc <lv_draw_sw_init_ctx+0x84>)
 801039a:	64a3      	str	r3, [r4, #72]	; 0x48
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 801039c:	4b10      	ldr	r3, [pc, #64]	; (80103e0 <lv_draw_sw_init_ctx+0x88>)
 801039e:	6563      	str	r3, [r4, #84]	; 0x54
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 80103a0:	232c      	movs	r3, #44	; 0x2c
 80103a2:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80103a4:	bd10      	pop	{r4, pc}
 80103a6:	bf00      	nop
 80103a8:	0801046d 	.word	0x0801046d
 80103ac:	08014c1b 	.word	0x08014c1b
 80103b0:	08014575 	.word	0x08014575
 80103b4:	08012e01 	.word	0x08012e01
 80103b8:	08012683 	.word	0x08012683
 80103bc:	0801323d 	.word	0x0801323d
 80103c0:	08013ac5 	.word	0x08013ac5
 80103c4:	08015d2d 	.word	0x08015d2d
 80103c8:	080102ed 	.word	0x080102ed
 80103cc:	080102ef 	.word	0x080102ef
 80103d0:	08012c05 	.word	0x08012c05
 80103d4:	08012d09 	.word	0x08012d09
 80103d8:	08012d63 	.word	0x08012d63
 80103dc:	08012df7 	.word	0x08012df7
 80103e0:	080112fd 	.word	0x080112fd

080103e4 <get_rounded_area>:

    q->draw_ctx->clip_area = clip_area_ori;
}

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 80103e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103e8:	4681      	mov	r9, r0
 80103ea:	461d      	mov	r5, r3
    const uint8_t ps = 8;
    const uint8_t pa = 127;

    int32_t thick_half = thickness / 2;
 80103ec:	0856      	lsrs	r6, r2, #1
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 80103ee:	f082 0401 	eor.w	r4, r2, #1
 80103f2:	f004 0401 	and.w	r4, r4, #1

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 80103f6:	eba1 0852 	sub.w	r8, r1, r2, lsr #1
 80103fa:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80103fe:	b200      	sxth	r0, r0
 8010400:	f011 fc88 	bl	8021d14 <lv_trigo_sin>
 8010404:	fb08 f200 	mul.w	r2, r8, r0
 8010408:	11d7      	asrs	r7, r2, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 801040a:	4648      	mov	r0, r9
 801040c:	f011 fc82 	bl	8021d14 <lv_trigo_sin>
 8010410:	fb08 f000 	mul.w	r0, r8, r0
 8010414:	11c0      	asrs	r0, r0, #7

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 8010416:	2f00      	cmp	r7, #0
 8010418:	dd14      	ble.n	8010444 <get_rounded_area+0x60>
        cir_x = (cir_x - pa) >> ps;
 801041a:	f1a7 027f 	sub.w	r2, r7, #127	; 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 801041e:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8010422:	1ba3      	subs	r3, r4, r6
 8010424:	4413      	add	r3, r2
 8010426:	802b      	strh	r3, [r5, #0]
        res_area->x2 = cir_x + thick_half;
 8010428:	4432      	add	r2, r6
 801042a:	80aa      	strh	r2, [r5, #4]
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 801042c:	2800      	cmp	r0, #0
 801042e:	dd13      	ble.n	8010458 <get_rounded_area+0x74>
        cir_y = (cir_y - pa) >> ps;
 8010430:	387f      	subs	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 8010432:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8010436:	1ba4      	subs	r4, r4, r6
 8010438:	441c      	add	r4, r3
 801043a:	806c      	strh	r4, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 801043c:	4433      	add	r3, r6
 801043e:	80eb      	strh	r3, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 8010440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 8010444:	f107 027f 	add.w	r2, r7, #127	; 0x7f
        res_area->x1 = cir_x - thick_half;
 8010448:	f3c2 220f 	ubfx	r2, r2, #8, #16
 801044c:	1b93      	subs	r3, r2, r6
 801044e:	802b      	strh	r3, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 8010450:	1b33      	subs	r3, r6, r4
 8010452:	441a      	add	r2, r3
 8010454:	80aa      	strh	r2, [r5, #4]
 8010456:	e7e9      	b.n	801042c <get_rounded_area+0x48>
        cir_y = (cir_y + pa) >> ps;
 8010458:	307f      	adds	r0, #127	; 0x7f
        res_area->y1 = cir_y - thick_half;
 801045a:	f3c0 200f 	ubfx	r0, r0, #8, #16
 801045e:	1b83      	subs	r3, r0, r6
 8010460:	806b      	strh	r3, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 8010462:	1b34      	subs	r4, r6, r4
 8010464:	4420      	add	r0, r4
 8010466:	80e8      	strh	r0, [r5, #6]
}
 8010468:	e7ea      	b.n	8010440 <get_rounded_area+0x5c>
	...

0801046c <lv_draw_sw_arc>:
{
 801046c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010470:	b0d3      	sub	sp, #332	; 0x14c
 8010472:	461f      	mov	r7, r3
 8010474:	f8bd 4170 	ldrh.w	r4, [sp, #368]	; 0x170
 8010478:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
    if(dsc->opa <= LV_OPA_MIN) return;
 801047c:	7b0b      	ldrb	r3, [r1, #12]
 801047e:	2b02      	cmp	r3, #2
 8010480:	f240 80c2 	bls.w	8010608 <lv_draw_sw_arc+0x19c>
 8010484:	4681      	mov	r9, r0
 8010486:	460e      	mov	r6, r1
 8010488:	4690      	mov	r8, r2
    if(dsc->width == 0) return;
 801048a:	f9b1 a002 	ldrsh.w	sl, [r1, #2]
 801048e:	f1ba 0f00 	cmp.w	sl, #0
 8010492:	f000 80b9 	beq.w	8010608 <lv_draw_sw_arc+0x19c>
    if(start_angle == end_angle) return;
 8010496:	42ac      	cmp	r4, r5
 8010498:	f000 80b6 	beq.w	8010608 <lv_draw_sw_arc+0x19c>
    if(width > radius) width = radius;
 801049c:	45ba      	cmp	sl, r7
 801049e:	bfc8      	it	gt
 80104a0:	fa0f fa87 	sxthgt.w	sl, r7
    lv_draw_rect_dsc_init(&cir_dsc);
 80104a4:	a844      	add	r0, sp, #272	; 0x110
 80104a6:	f7ff f9c1 	bl	800f82c <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 80104aa:	7b73      	ldrb	r3, [r6, #13]
 80104ac:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80104b0:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
    if(dsc->img_src) {
 80104b4:	68b3      	ldr	r3, [r6, #8]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 80a9 	beq.w	801060e <lv_draw_sw_arc+0x1a2>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 80104bc:	2200      	movs	r2, #0
 80104be:	f88d 2113 	strb.w	r2, [sp, #275]	; 0x113
        cir_dsc.bg_img_src = dsc->img_src;
 80104c2:	9348      	str	r3, [sp, #288]	; 0x120
        cir_dsc.bg_img_opa = dsc->opa;
 80104c4:	7b33      	ldrb	r3, [r6, #12]
 80104c6:	f88d 312a 	strb.w	r3, [sp, #298]	; 0x12a
    area_out.x1 = center->x - radius;
 80104ca:	f8b8 3000 	ldrh.w	r3, [r8]
 80104ce:	1bd8      	subs	r0, r3, r7
 80104d0:	b280      	uxth	r0, r0
 80104d2:	f8ad 0108 	strh.w	r0, [sp, #264]	; 0x108
    area_out.y1 = center->y - radius;
 80104d6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80104da:	1bca      	subs	r2, r1, r7
 80104dc:	b292      	uxth	r2, r2
 80104de:	f8ad 210a 	strh.w	r2, [sp, #266]	; 0x10a
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 80104e2:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80104e6:	fa1f fc8c 	uxth.w	ip, ip
 80104ea:	4463      	add	r3, ip
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
    area_out.y2 = center->y + radius - 1;
 80104f2:	4461      	add	r1, ip
 80104f4:	b289      	uxth	r1, r1
 80104f6:	f8ad 110e 	strh.w	r1, [sp, #270]	; 0x10e
    area_in.x1 += dsc->width;
 80104fa:	f8b6 c002 	ldrh.w	ip, [r6, #2]
 80104fe:	4460      	add	r0, ip
 8010500:	b280      	uxth	r0, r0
 8010502:	f8ad 0100 	strh.w	r0, [sp, #256]	; 0x100
    area_in.y1 += dsc->width;
 8010506:	4462      	add	r2, ip
 8010508:	b292      	uxth	r2, r2
 801050a:	f8ad 2102 	strh.w	r2, [sp, #258]	; 0x102
    area_in.x2 -= dsc->width;
 801050e:	eba3 030c 	sub.w	r3, r3, ip
 8010512:	b29b      	uxth	r3, r3
 8010514:	f8ad 3104 	strh.w	r3, [sp, #260]	; 0x104
    area_in.y2 -= dsc->width;
 8010518:	eba1 010c 	sub.w	r1, r1, ip
 801051c:	b289      	uxth	r1, r1
 801051e:	f8ad 1106 	strh.w	r1, [sp, #262]	; 0x106
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010522:	3301      	adds	r3, #1
 8010524:	1a1b      	subs	r3, r3, r0
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 8010526:	b21b      	sxth	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	dd04      	ble.n	8010536 <lv_draw_sw_arc+0xca>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801052c:	3101      	adds	r1, #1
 801052e:	1a8a      	subs	r2, r1, r2
 8010530:	b212      	sxth	r2, r2
 8010532:	2a00      	cmp	r2, #0
 8010534:	dc72      	bgt.n	801061c <lv_draw_sw_arc+0x1b0>
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8010536:	2300      	movs	r3, #0
 8010538:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801053c:	a942      	add	r1, sp, #264	; 0x108
 801053e:	a834      	add	r0, sp, #208	; 0xd0
 8010540:	f7fe ff20 	bl	800f384 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8010544:	2100      	movs	r1, #0
 8010546:	a834      	add	r0, sp, #208	; 0xd0
 8010548:	f7fe fd1a 	bl	800ef80 <lv_draw_mask_add>
 801054c:	9002      	str	r0, [sp, #8]
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 801054e:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8010552:	42ab      	cmp	r3, r5
 8010554:	f000 8591 	beq.w	801107a <lv_draw_sw_arc+0xc0e>
 8010558:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 801055c:	42a3      	cmp	r3, r4
 801055e:	f000 85b3 	beq.w	80110c8 <lv_draw_sw_arc+0xc5c>
 8010562:	2300      	movs	r3, #0
 8010564:	9305      	str	r3, [sp, #20]
 8010566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801056a:	9303      	str	r3, [sp, #12]
    while(start_angle >= 360) start_angle -= 360;
 801056c:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8010570:	d305      	bcc.n	801057e <lv_draw_sw_arc+0x112>
 8010572:	f5a4 74b4 	sub.w	r4, r4, #360	; 0x168
 8010576:	b2a4      	uxth	r4, r4
 8010578:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 801057c:	d2f9      	bcs.n	8010572 <lv_draw_sw_arc+0x106>
    while(end_angle >= 360) end_angle -= 360;
 801057e:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8010582:	d305      	bcc.n	8010590 <lv_draw_sw_arc+0x124>
 8010584:	f5a5 75b4 	sub.w	r5, r5, #360	; 0x168
 8010588:	b2ad      	uxth	r5, r5
 801058a:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 801058e:	d2f9      	bcs.n	8010584 <lv_draw_sw_arc+0x118>
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 8010590:	b223      	sxth	r3, r4
 8010592:	9308      	str	r3, [sp, #32]
 8010594:	b22a      	sxth	r2, r5
 8010596:	9209      	str	r2, [sp, #36]	; 0x24
 8010598:	9200      	str	r2, [sp, #0]
 801059a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801059e:	f9b8 1000 	ldrsh.w	r1, [r8]
 80105a2:	a819      	add	r0, sp, #100	; 0x64
 80105a4:	f7fe fea8 	bl	800f2f8 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 80105a8:	2100      	movs	r1, #0
 80105aa:	a819      	add	r0, sp, #100	; 0x64
 80105ac:	f7fe fce8 	bl	800ef80 <lv_draw_mask_add>
 80105b0:	9004      	str	r0, [sp, #16]
    if(end_angle > start_angle) {
 80105b2:	42ac      	cmp	r4, r5
        angle_gap = 360 - (end_angle - start_angle);
 80105b4:	bf3a      	itte	cc
 80105b6:	1b2b      	subcc	r3, r5, r4
 80105b8:	f5c3 73b4 	rsbcc	r3, r3, #360	; 0x168
        angle_gap = start_angle - end_angle;
 80105bc:	1b63      	subcs	r3, r4, r5
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80105be:	f8d9 b008 	ldr.w	fp, [r9, #8]
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 80105c2:	2b3c      	cmp	r3, #60	; 0x3c
 80105c4:	dd01      	ble.n	80105ca <lv_draw_sw_arc+0x15e>
 80105c6:	2f0a      	cmp	r7, #10
 80105c8:	d86b      	bhi.n	80106a2 <lv_draw_sw_arc+0x236>
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80105ca:	aa42      	add	r2, sp, #264	; 0x108
 80105cc:	a944      	add	r1, sp, #272	; 0x110
 80105ce:	4648      	mov	r0, r9
 80105d0:	f7ff f988 	bl	800f8e4 <lv_draw_rect>
    lv_draw_mask_free_param(&mask_angle_param);
 80105d4:	a819      	add	r0, sp, #100	; 0x64
 80105d6:	f7fe fd47 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 80105da:	a834      	add	r0, sp, #208	; 0xd0
 80105dc:	f7fe fd44 	bl	800f068 <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 80105e0:	9b05      	ldr	r3, [sp, #20]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f040 84ba 	bne.w	8010f5c <lv_draw_sw_arc+0xaf0>
    lv_draw_mask_remove_id(mask_angle_id);
 80105e8:	9804      	ldr	r0, [sp, #16]
 80105ea:	f7fe fd13 	bl	800f014 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 80105ee:	9802      	ldr	r0, [sp, #8]
 80105f0:	f7fe fd10 	bl	800f014 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 80105f4:	9b03      	ldr	r3, [sp, #12]
 80105f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105fa:	f040 84b4 	bne.w	8010f66 <lv_draw_sw_arc+0xafa>
    if(dsc->rounded) {
 80105fe:	7b73      	ldrb	r3, [r6, #13]
 8010600:	f013 0f04 	tst.w	r3, #4
 8010604:	f040 84b4 	bne.w	8010f70 <lv_draw_sw_arc+0xb04>
}
 8010608:	b053      	add	sp, #332	; 0x14c
 801060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cir_dsc.bg_opa = dsc->opa;
 801060e:	7b33      	ldrb	r3, [r6, #12]
 8010610:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
        cir_dsc.bg_color = dsc->color;
 8010614:	8833      	ldrh	r3, [r6, #0]
 8010616:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
 801061a:	e756      	b.n	80104ca <lv_draw_sw_arc+0x5e>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 801061c:	2301      	movs	r3, #1
 801061e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010622:	a940      	add	r1, sp, #256	; 0x100
 8010624:	a83a      	add	r0, sp, #232	; 0xe8
 8010626:	f7fe fead 	bl	800f384 <lv_draw_mask_radius_init>
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 801062a:	2100      	movs	r1, #0
 801062c:	a83a      	add	r0, sp, #232	; 0xe8
 801062e:	f7fe fca7 	bl	800ef80 <lv_draw_mask_add>
 8010632:	9003      	str	r0, [sp, #12]
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 8010634:	2300      	movs	r3, #0
 8010636:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801063a:	a942      	add	r1, sp, #264	; 0x108
 801063c:	a834      	add	r0, sp, #208	; 0xd0
 801063e:	f7fe fea1 	bl	800f384 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 8010642:	2100      	movs	r1, #0
 8010644:	a834      	add	r0, sp, #208	; 0xd0
 8010646:	f7fe fc9b 	bl	800ef80 <lv_draw_mask_add>
 801064a:	9002      	str	r0, [sp, #8]
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 801064c:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 8010650:	42ab      	cmp	r3, r5
 8010652:	f000 8523 	beq.w	801109c <lv_draw_sw_arc+0xc30>
 8010656:	f505 73b4 	add.w	r3, r5, #360	; 0x168
 801065a:	429c      	cmp	r4, r3
 801065c:	d11c      	bne.n	8010698 <lv_draw_sw_arc+0x22c>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801065e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010662:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8010666:	aa42      	add	r2, sp, #264	; 0x108
 8010668:	a944      	add	r1, sp, #272	; 0x110
 801066a:	4648      	mov	r0, r9
 801066c:	f7ff f93a 	bl	800f8e4 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 8010670:	9802      	ldr	r0, [sp, #8]
 8010672:	f7fe fccf 	bl	800f014 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801067c:	d00f      	beq.n	801069e <lv_draw_sw_arc+0x232>
 801067e:	9803      	ldr	r0, [sp, #12]
 8010680:	f7fe fcc8 	bl	800f014 <lv_draw_mask_remove_id>
 8010684:	2401      	movs	r4, #1
        lv_draw_mask_free_param(&mask_out_param);
 8010686:	a834      	add	r0, sp, #208	; 0xd0
 8010688:	f7fe fcee 	bl	800f068 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 801068c:	2c00      	cmp	r4, #0
 801068e:	d0bb      	beq.n	8010608 <lv_draw_sw_arc+0x19c>
            lv_draw_mask_free_param(&mask_in_param);
 8010690:	a83a      	add	r0, sp, #232	; 0xe8
 8010692:	f7fe fce9 	bl	800f068 <lv_draw_mask_free_param>
 8010696:	e7b7      	b.n	8010608 <lv_draw_sw_arc+0x19c>
        mask_in_param_valid = true;
 8010698:	2301      	movs	r3, #1
 801069a:	9305      	str	r3, [sp, #20]
 801069c:	e766      	b.n	801056c <lv_draw_sw_arc+0x100>
 801069e:	2401      	movs	r4, #1
 80106a0:	e7f1      	b.n	8010686 <lv_draw_sw_arc+0x21a>
        q_dsc.radius = radius;
 80106a2:	b23b      	sxth	r3, r7
 80106a4:	930a      	str	r3, [sp, #40]	; 0x28
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 80106a6:	0863      	lsrs	r3, r4, #1
 80106a8:	49ac      	ldr	r1, [pc, #688]	; (801095c <lv_draw_sw_arc+0x4f0>)
 80106aa:	fba1 2303 	umull	r2, r3, r1, r3
 80106ae:	f3c3 1241 	ubfx	r2, r3, #5, #2
 80106b2:	9206      	str	r2, [sp, #24]
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 80106b4:	086a      	lsrs	r2, r5, #1
 80106b6:	fba1 1202 	umull	r1, r2, r1, r2
 80106ba:	f3c2 114f 	ubfx	r1, r2, #5, #16
 80106be:	910b      	str	r1, [sp, #44]	; 0x2c
 80106c0:	f3c2 1241 	ubfx	r2, r2, #5, #2
 80106c4:	9207      	str	r2, [sp, #28]
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 80106c6:	ea41 1353 	orr.w	r3, r1, r3, lsr #5
 80106ca:	f013 0f03 	tst.w	r3, #3
 80106ce:	d03d      	beq.n	801074c <lv_draw_sw_arc+0x2e0>
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 80106d0:	9b06      	ldr	r3, [sp, #24]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f000 808b 	beq.w	80107ee <lv_draw_sw_arc+0x382>
 80106d8:	9b07      	ldr	r3, [sp, #28]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	f000 80db 	beq.w	8010896 <lv_draw_sw_arc+0x42a>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 80106e0:	9b06      	ldr	r3, [sp, #24]
 80106e2:	9a07      	ldr	r2, [sp, #28]
 80106e4:	4293      	cmp	r3, r2
 80106e6:	f000 8112 	beq.w	801090e <lv_draw_sw_arc+0x4a2>
 80106ea:	9b06      	ldr	r3, [sp, #24]
 80106ec:	2b02      	cmp	r3, #2
 80106ee:	f000 812f 	beq.w	8010950 <lv_draw_sw_arc+0x4e4>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 80106f2:	9b06      	ldr	r3, [sp, #24]
 80106f4:	2b03      	cmp	r3, #3
 80106f6:	f040 80a9 	bne.w	801084c <lv_draw_sw_arc+0x3e0>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 80106fa:	9b07      	ldr	r3, [sp, #28]
 80106fc:	3b01      	subs	r3, #1
 80106fe:	b29b      	uxth	r3, r3
 8010700:	2b01      	cmp	r3, #1
 8010702:	f240 8107 	bls.w	8010914 <lv_draw_sw_arc+0x4a8>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8010706:	42ac      	cmp	r4, r5
 8010708:	f240 80af 	bls.w	801086a <lv_draw_sw_arc+0x3fe>
        quarter_area.x1 = q->center->x - q->radius;
 801070c:	f8b8 2000 	ldrh.w	r2, [r8]
 8010710:	1bd3      	subs	r3, r2, r7
 8010712:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y;
 8010716:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 801071a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x - 1;
 801071e:	3a01      	subs	r2, #1
 8010720:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + q->radius;
 8010724:	443b      	add	r3, r7
 8010726:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801072a:	465a      	mov	r2, fp
 801072c:	a913      	add	r1, sp, #76	; 0x4c
 801072e:	4608      	mov	r0, r1
 8010730:	f010 fce7 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 8010734:	2800      	cmp	r0, #0
 8010736:	f000 8147 	beq.w	80109c8 <lv_draw_sw_arc+0x55c>
            q->draw_ctx->clip_area = &quarter_area;
 801073a:	ab13      	add	r3, sp, #76	; 0x4c
 801073c:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010740:	aa42      	add	r2, sp, #264	; 0x108
 8010742:	a944      	add	r1, sp, #272	; 0x110
 8010744:	4648      	mov	r0, r9
 8010746:	f7ff f8cd 	bl	800f8e4 <lv_draw_rect>
 801074a:	e13d      	b.n	80109c8 <lv_draw_sw_arc+0x55c>
    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 801074c:	42ac      	cmp	r4, r5
 801074e:	d2bf      	bcs.n	80106d0 <lv_draw_sw_arc+0x264>
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010750:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010754:	930c      	str	r3, [sp, #48]	; 0x30
 8010756:	9808      	ldr	r0, [sp, #32]
 8010758:	f011 fadc 	bl	8021d14 <lv_trigo_sin>
 801075c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801075e:	eba3 020a 	sub.w	r2, r3, sl
 8010762:	920d      	str	r2, [sp, #52]	; 0x34
 8010764:	fb02 f300 	mul.w	r3, r2, r0
 8010768:	990c      	ldr	r1, [sp, #48]	; 0x30
 801076a:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 801076e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010772:	f8b8 1000 	ldrh.w	r1, [r8]
 8010776:	910c      	str	r1, [sp, #48]	; 0x30
 8010778:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 801077c:	b200      	sxth	r0, r0
 801077e:	f011 fac9 	bl	8021d14 <lv_trigo_sin>
 8010782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010784:	fb03 f300 	mul.w	r3, r3, r0
 8010788:	990c      	ldr	r1, [sp, #48]	; 0x30
 801078a:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 801078e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8010792:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8010796:	910c      	str	r1, [sp, #48]	; 0x30
 8010798:	9809      	ldr	r0, [sp, #36]	; 0x24
 801079a:	f011 fabb 	bl	8021d14 <lv_trigo_sin>
 801079e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107a0:	fb03 f300 	mul.w	r3, r3, r0
 80107a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80107a6:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 80107aa:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80107ae:	f8b8 3000 	ldrh.w	r3, [r8]
 80107b2:	930c      	str	r3, [sp, #48]	; 0x30
 80107b4:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80107b8:	b200      	sxth	r0, r0
 80107ba:	f011 faab 	bl	8021d14 <lv_trigo_sin>
 80107be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107c0:	fb02 f300 	mul.w	r3, r2, r0
 80107c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107c6:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80107ca:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80107ce:	465a      	mov	r2, fp
 80107d0:	a913      	add	r1, sp, #76	; 0x4c
 80107d2:	4608      	mov	r0, r1
 80107d4:	f010 fc95 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 80107d8:	2800      	cmp	r0, #0
 80107da:	d037      	beq.n	801084c <lv_draw_sw_arc+0x3e0>
            q->draw_ctx->clip_area = &quarter_area;
 80107dc:	ab13      	add	r3, sp, #76	; 0x4c
 80107de:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 80107e2:	aa42      	add	r2, sp, #264	; 0x108
 80107e4:	a944      	add	r1, sp, #272	; 0x110
 80107e6:	4648      	mov	r0, r9
 80107e8:	f7ff f87c 	bl	800f8e4 <lv_draw_rect>
 80107ec:	e02e      	b.n	801084c <lv_draw_sw_arc+0x3e0>
            quarter_area.x1 = q->center->x;
 80107ee:	f8b8 3000 	ldrh.w	r3, [r8]
 80107f2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y2 = q->center->y + q->radius;
 80107f6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 80107fa:	930c      	str	r3, [sp, #48]	; 0x30
 80107fc:	18fb      	adds	r3, r7, r3
 80107fe:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010802:	9808      	ldr	r0, [sp, #32]
 8010804:	f011 fa86 	bl	8021d14 <lv_trigo_sin>
 8010808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801080a:	eba2 030a 	sub.w	r3, r2, sl
 801080e:	fb00 f303 	mul.w	r3, r0, r3
 8010812:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010814:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010818:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 801081c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010820:	930c      	str	r3, [sp, #48]	; 0x30
 8010822:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010826:	b200      	sxth	r0, r0
 8010828:	f011 fa74 	bl	8021d14 <lv_trigo_sin>
 801082c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801082e:	fb02 f300 	mul.w	r3, r2, r0
 8010832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010834:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010838:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 801083c:	465a      	mov	r2, fp
 801083e:	a913      	add	r1, sp, #76	; 0x4c
 8010840:	4608      	mov	r0, r1
 8010842:	f010 fc5e 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 8010846:	b9e8      	cbnz	r0, 8010884 <lv_draw_sw_arc+0x418>
        if(q->end_quarter == 0) {
 8010848:	9b07      	ldr	r3, [sp, #28]
 801084a:	b323      	cbz	r3, 8010896 <lv_draw_sw_arc+0x42a>
    q->draw_ctx->clip_area = clip_area_ori;
 801084c:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 8010850:	9b06      	ldr	r3, [sp, #24]
 8010852:	2b01      	cmp	r3, #1
 8010854:	f000 8084 	beq.w	8010960 <lv_draw_sw_arc+0x4f4>
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 8010858:	9b07      	ldr	r3, [sp, #28]
 801085a:	2b01      	cmp	r3, #1
 801085c:	f000 812a 	beq.w	8010ab4 <lv_draw_sw_arc+0x648>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 8010860:	9b06      	ldr	r3, [sp, #24]
 8010862:	9a07      	ldr	r2, [sp, #28]
 8010864:	4293      	cmp	r3, r2
 8010866:	f43f af4e 	beq.w	8010706 <lv_draw_sw_arc+0x29a>
 801086a:	9b06      	ldr	r3, [sp, #24]
 801086c:	2b00      	cmp	r3, #0
 801086e:	f040 815f 	bne.w	8010b30 <lv_draw_sw_arc+0x6c4>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 8010872:	9b07      	ldr	r3, [sp, #28]
 8010874:	3b02      	subs	r3, #2
 8010876:	b29b      	uxth	r3, r3
 8010878:	2b01      	cmp	r3, #1
 801087a:	f67f af47 	bls.w	801070c <lv_draw_sw_arc+0x2a0>
    q->draw_ctx->clip_area = clip_area_ori;
 801087e:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8010882:	e0a7      	b.n	80109d4 <lv_draw_sw_arc+0x568>
                q->draw_ctx->clip_area = &quarter_area;
 8010884:	ab13      	add	r3, sp, #76	; 0x4c
 8010886:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 801088a:	aa42      	add	r2, sp, #264	; 0x108
 801088c:	a944      	add	r1, sp, #272	; 0x110
 801088e:	4648      	mov	r0, r9
 8010890:	f7ff f828 	bl	800f8e4 <lv_draw_rect>
 8010894:	e7d8      	b.n	8010848 <lv_draw_sw_arc+0x3dc>
            quarter_area.x2 = q->center->x + q->radius;
 8010896:	f8b8 3000 	ldrh.w	r3, [r8]
 801089a:	443b      	add	r3, r7
 801089c:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y1 = q->center->y;
 80108a0:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80108a4:	930c      	str	r3, [sp, #48]	; 0x30
 80108a6:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 80108aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108ac:	f011 fa32 	bl	8021d14 <lv_trigo_sin>
 80108b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80108b2:	fb01 f300 	mul.w	r3, r1, r0
 80108b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108b8:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80108bc:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 80108c0:	f8b8 3000 	ldrh.w	r3, [r8]
 80108c4:	930c      	str	r3, [sp, #48]	; 0x30
 80108c6:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80108ca:	b200      	sxth	r0, r0
 80108cc:	f011 fa22 	bl	8021d14 <lv_trigo_sin>
 80108d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80108d2:	eba1 030a 	sub.w	r3, r1, sl
 80108d6:	fb00 f303 	mul.w	r3, r0, r3
 80108da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108dc:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80108e0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80108e4:	465a      	mov	r2, fp
 80108e6:	a913      	add	r1, sp, #76	; 0x4c
 80108e8:	4608      	mov	r0, r1
 80108ea:	f010 fc0a 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 80108ee:	b928      	cbnz	r0, 80108fc <lv_draw_sw_arc+0x490>
    q->draw_ctx->clip_area = clip_area_ori;
 80108f0:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 80108f4:	9b06      	ldr	r3, [sp, #24]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d1ae      	bne.n	8010858 <lv_draw_sw_arc+0x3ec>
 80108fa:	e034      	b.n	8010966 <lv_draw_sw_arc+0x4fa>
                q->draw_ctx->clip_area = &quarter_area;
 80108fc:	ab13      	add	r3, sp, #76	; 0x4c
 80108fe:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010902:	aa42      	add	r2, sp, #264	; 0x108
 8010904:	a944      	add	r1, sp, #272	; 0x110
 8010906:	4648      	mov	r0, r9
 8010908:	f7fe ffec 	bl	800f8e4 <lv_draw_rect>
 801090c:	e7f0      	b.n	80108f0 <lv_draw_sw_arc+0x484>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 801090e:	42ac      	cmp	r4, r5
 8010910:	f67f aeeb 	bls.w	80106ea <lv_draw_sw_arc+0x27e>
        quarter_area.x1 = q->center->x;
 8010914:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010918:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y;
 801091c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8010920:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + q->radius;
 8010924:	443a      	add	r2, r7
 8010926:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + q->radius;
 801092a:	443b      	add	r3, r7
 801092c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010930:	465a      	mov	r2, fp
 8010932:	a913      	add	r1, sp, #76	; 0x4c
 8010934:	4608      	mov	r0, r1
 8010936:	f010 fbe4 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 801093a:	2800      	cmp	r0, #0
 801093c:	d086      	beq.n	801084c <lv_draw_sw_arc+0x3e0>
            q->draw_ctx->clip_area = &quarter_area;
 801093e:	ab13      	add	r3, sp, #76	; 0x4c
 8010940:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010944:	aa42      	add	r2, sp, #264	; 0x108
 8010946:	a944      	add	r1, sp, #272	; 0x110
 8010948:	4648      	mov	r0, r9
 801094a:	f7fe ffcb 	bl	800f8e4 <lv_draw_rect>
 801094e:	e77d      	b.n	801084c <lv_draw_sw_arc+0x3e0>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8010950:	9b07      	ldr	r3, [sp, #28]
 8010952:	2b01      	cmp	r3, #1
 8010954:	d0de      	beq.n	8010914 <lv_draw_sw_arc+0x4a8>
    q->draw_ctx->clip_area = clip_area_ori;
 8010956:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 801095a:	e781      	b.n	8010860 <lv_draw_sw_arc+0x3f4>
 801095c:	b60b60b7 	.word	0xb60b60b7
 8010960:	9b07      	ldr	r3, [sp, #28]
 8010962:	2b01      	cmp	r3, #1
 8010964:	d04a      	beq.n	80109fc <lv_draw_sw_arc+0x590>
            quarter_area.x1 = q->center->x - q->radius;
 8010966:	f8b8 3000 	ldrh.w	r3, [r8]
 801096a:	1bdb      	subs	r3, r3, r7
 801096c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y1 = q->center->y;
 8010970:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8010974:	930c      	str	r3, [sp, #48]	; 0x30
 8010976:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 801097a:	9808      	ldr	r0, [sp, #32]
 801097c:	f011 f9ca 	bl	8021d14 <lv_trigo_sin>
 8010980:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010982:	fb01 f300 	mul.w	r3, r1, r0
 8010986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010988:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 801098c:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010990:	f8b8 3000 	ldrh.w	r3, [r8]
 8010994:	930c      	str	r3, [sp, #48]	; 0x30
 8010996:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 801099a:	b200      	sxth	r0, r0
 801099c:	f011 f9ba 	bl	8021d14 <lv_trigo_sin>
 80109a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80109a2:	eba1 030a 	sub.w	r3, r1, sl
 80109a6:	fb00 f303 	mul.w	r3, r0, r3
 80109aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109ac:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 80109b0:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 80109b4:	465a      	mov	r2, fp
 80109b6:	a913      	add	r1, sp, #76	; 0x4c
 80109b8:	4608      	mov	r0, r1
 80109ba:	f010 fba2 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 80109be:	2800      	cmp	r0, #0
 80109c0:	d16f      	bne.n	8010aa2 <lv_draw_sw_arc+0x636>
        if(q->end_quarter == 1) {
 80109c2:	9b07      	ldr	r3, [sp, #28]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d075      	beq.n	8010ab4 <lv_draw_sw_arc+0x648>
    q->draw_ctx->clip_area = clip_area_ori;
 80109c8:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 80109cc:	9b06      	ldr	r3, [sp, #24]
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	f000 80df 	beq.w	8010b92 <lv_draw_sw_arc+0x726>
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 80109d4:	9b07      	ldr	r3, [sp, #28]
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	f000 81aa 	beq.w	8010d30 <lv_draw_sw_arc+0x8c4>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 80109dc:	9b06      	ldr	r3, [sp, #24]
 80109de:	9a07      	ldr	r2, [sp, #28]
 80109e0:	4293      	cmp	r3, r2
 80109e2:	f000 80b3 	beq.w	8010b4c <lv_draw_sw_arc+0x6e0>
 80109e6:	9b06      	ldr	r3, [sp, #24]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f040 821c 	bne.w	8010e26 <lv_draw_sw_arc+0x9ba>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 80109ee:	9b07      	ldr	r3, [sp, #28]
 80109f0:	2b03      	cmp	r3, #3
 80109f2:	f000 80ae 	beq.w	8010b52 <lv_draw_sw_arc+0x6e6>
    q->draw_ctx->clip_area = clip_area_ori;
 80109f6:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 80109fa:	e107      	b.n	8010c0c <lv_draw_sw_arc+0x7a0>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 80109fc:	42ac      	cmp	r4, r5
 80109fe:	d2b2      	bcs.n	8010966 <lv_draw_sw_arc+0x4fa>
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010a00:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010a04:	930c      	str	r3, [sp, #48]	; 0x30
 8010a06:	9808      	ldr	r0, [sp, #32]
 8010a08:	f011 f984 	bl	8021d14 <lv_trigo_sin>
 8010a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a0e:	fb03 f300 	mul.w	r3, r3, r0
 8010a12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a14:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010a18:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010a1c:	f8b8 2000 	ldrh.w	r2, [r8]
 8010a20:	920c      	str	r2, [sp, #48]	; 0x30
 8010a22:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010a26:	b200      	sxth	r0, r0
 8010a28:	f011 f974 	bl	8021d14 <lv_trigo_sin>
 8010a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a2e:	eba3 020a 	sub.w	r2, r3, sl
 8010a32:	920d      	str	r2, [sp, #52]	; 0x34
 8010a34:	fb02 f300 	mul.w	r3, r2, r0
 8010a38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a3a:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010a3e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010a42:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8010a46:	910c      	str	r1, [sp, #48]	; 0x30
 8010a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a4a:	f011 f963 	bl	8021d14 <lv_trigo_sin>
 8010a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a50:	fb02 f300 	mul.w	r3, r2, r0
 8010a54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a56:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010a5a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010a5e:	f8b8 2000 	ldrh.w	r2, [r8]
 8010a62:	920c      	str	r2, [sp, #48]	; 0x30
 8010a64:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010a68:	b200      	sxth	r0, r0
 8010a6a:	f011 f953 	bl	8021d14 <lv_trigo_sin>
 8010a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a70:	fb03 f300 	mul.w	r3, r3, r0
 8010a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a76:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010a7a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010a7e:	465a      	mov	r2, fp
 8010a80:	a913      	add	r1, sp, #76	; 0x4c
 8010a82:	4608      	mov	r0, r1
 8010a84:	f010 fb3d 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 8010a88:	b910      	cbnz	r0, 8010a90 <lv_draw_sw_arc+0x624>
    q->draw_ctx->clip_area = clip_area_ori;
 8010a8a:	f8c9 b008 	str.w	fp, [r9, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8010a8e:	e05d      	b.n	8010b4c <lv_draw_sw_arc+0x6e0>
            q->draw_ctx->clip_area = &quarter_area;
 8010a90:	ab13      	add	r3, sp, #76	; 0x4c
 8010a92:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010a96:	aa42      	add	r2, sp, #264	; 0x108
 8010a98:	a944      	add	r1, sp, #272	; 0x110
 8010a9a:	4648      	mov	r0, r9
 8010a9c:	f7fe ff22 	bl	800f8e4 <lv_draw_rect>
 8010aa0:	e7f3      	b.n	8010a8a <lv_draw_sw_arc+0x61e>
                q->draw_ctx->clip_area = &quarter_area;
 8010aa2:	ab13      	add	r3, sp, #76	; 0x4c
 8010aa4:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010aa8:	aa42      	add	r2, sp, #264	; 0x108
 8010aaa:	a944      	add	r1, sp, #272	; 0x110
 8010aac:	4648      	mov	r0, r9
 8010aae:	f7fe ff19 	bl	800f8e4 <lv_draw_rect>
 8010ab2:	e786      	b.n	80109c2 <lv_draw_sw_arc+0x556>
            quarter_area.x2 = q->center->x - 1;
 8010ab4:	f8b8 3000 	ldrh.w	r3, [r8]
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y2 = q->center->y + q->radius;
 8010abe:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8010ac4:	18fb      	adds	r3, r7, r3
 8010ac6:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010acc:	f011 f922 	bl	8021d14 <lv_trigo_sin>
 8010ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ad2:	eba2 030a 	sub.w	r3, r2, sl
 8010ad6:	fb00 f303 	mul.w	r3, r0, r3
 8010ada:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010adc:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010ae0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010ae4:	f8b8 3000 	ldrh.w	r3, [r8]
 8010ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8010aea:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010aee:	b200      	sxth	r0, r0
 8010af0:	f011 f910 	bl	8021d14 <lv_trigo_sin>
 8010af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010af6:	fb02 f300 	mul.w	r3, r2, r0
 8010afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010afc:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010b00:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010b04:	465a      	mov	r2, fp
 8010b06:	a913      	add	r1, sp, #76	; 0x4c
 8010b08:	4608      	mov	r0, r1
 8010b0a:	f010 fafa 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 8010b0e:	b930      	cbnz	r0, 8010b1e <lv_draw_sw_arc+0x6b2>
    q->draw_ctx->clip_area = clip_area_ori;
 8010b10:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8010b14:	9b06      	ldr	r3, [sp, #24]
 8010b16:	2b02      	cmp	r3, #2
 8010b18:	f47f af5c 	bne.w	80109d4 <lv_draw_sw_arc+0x568>
 8010b1c:	e03c      	b.n	8010b98 <lv_draw_sw_arc+0x72c>
                q->draw_ctx->clip_area = &quarter_area;
 8010b1e:	ab13      	add	r3, sp, #76	; 0x4c
 8010b20:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010b24:	aa42      	add	r2, sp, #264	; 0x108
 8010b26:	a944      	add	r1, sp, #272	; 0x110
 8010b28:	4648      	mov	r0, r9
 8010b2a:	f7fe fedb 	bl	800f8e4 <lv_draw_rect>
 8010b2e:	e7ef      	b.n	8010b10 <lv_draw_sw_arc+0x6a4>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8010b30:	9b06      	ldr	r3, [sp, #24]
 8010b32:	2b03      	cmp	r3, #3
 8010b34:	f47f af48 	bne.w	80109c8 <lv_draw_sw_arc+0x55c>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 8010b38:	9b07      	ldr	r3, [sp, #28]
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	f43f ade6 	beq.w	801070c <lv_draw_sw_arc+0x2a0>
    q->draw_ctx->clip_area = clip_area_ori;
 8010b40:	f8c9 b008 	str.w	fp, [r9, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 8010b44:	9b06      	ldr	r3, [sp, #24]
 8010b46:	9a07      	ldr	r2, [sp, #28]
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d159      	bne.n	8010c00 <lv_draw_sw_arc+0x794>
 8010b4c:	42ac      	cmp	r4, r5
 8010b4e:	f67f af4a 	bls.w	80109e6 <lv_draw_sw_arc+0x57a>
        quarter_area.x1 = q->center->x - q->radius;
 8010b52:	f8b8 2000 	ldrh.w	r2, [r8]
 8010b56:	1bd3      	subs	r3, r2, r7
 8010b58:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y - q->radius;
 8010b5c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010b60:	1bd9      	subs	r1, r3, r7
 8010b62:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x - 1;
 8010b66:	3a01      	subs	r2, #1
 8010b68:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y - 1;
 8010b6c:	3b01      	subs	r3, #1
 8010b6e:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010b72:	465a      	mov	r2, fp
 8010b74:	a913      	add	r1, sp, #76	; 0x4c
 8010b76:	4608      	mov	r0, r1
 8010b78:	f010 fac3 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d03f      	beq.n	8010c00 <lv_draw_sw_arc+0x794>
            q->draw_ctx->clip_area = &quarter_area;
 8010b80:	ab13      	add	r3, sp, #76	; 0x4c
 8010b82:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010b86:	aa42      	add	r2, sp, #264	; 0x108
 8010b88:	a944      	add	r1, sp, #272	; 0x110
 8010b8a:	4648      	mov	r0, r9
 8010b8c:	f7fe feaa 	bl	800f8e4 <lv_draw_rect>
 8010b90:	e036      	b.n	8010c00 <lv_draw_sw_arc+0x794>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8010b92:	9b07      	ldr	r3, [sp, #28]
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	d04e      	beq.n	8010c36 <lv_draw_sw_arc+0x7ca>
            quarter_area.x2 = q->center->x - 1;
 8010b98:	f8b8 3000 	ldrh.w	r3, [r8]
 8010b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8010b9e:	3b01      	subs	r3, #1
 8010ba0:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y1 = q->center->y - q->radius;
 8010ba4:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010ba8:	1bdb      	subs	r3, r3, r7
 8010baa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010bae:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010bb2:	b200      	sxth	r0, r0
 8010bb4:	f011 f8ae 	bl	8021d14 <lv_trigo_sin>
 8010bb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010bba:	fb01 f300 	mul.w	r3, r1, r0
 8010bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bc0:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010bc4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010bc8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8010bce:	9808      	ldr	r0, [sp, #32]
 8010bd0:	f011 f8a0 	bl	8021d14 <lv_trigo_sin>
 8010bd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010bd6:	eba1 030a 	sub.w	r3, r1, sl
 8010bda:	fb00 f303 	mul.w	r3, r0, r3
 8010bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010be0:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010be4:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010be8:	465a      	mov	r2, fp
 8010bea:	a913      	add	r1, sp, #76	; 0x4c
 8010bec:	4608      	mov	r0, r1
 8010bee:	f010 fa88 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	f040 8093 	bne.w	8010d1e <lv_draw_sw_arc+0x8b2>
        if(q->end_quarter == 2) {
 8010bf8:	9b07      	ldr	r3, [sp, #28]
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	f000 8098 	beq.w	8010d30 <lv_draw_sw_arc+0x8c4>
    q->draw_ctx->clip_area = clip_area_ori;
 8010c00:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8010c04:	9b06      	ldr	r3, [sp, #24]
 8010c06:	2b03      	cmp	r3, #3
 8010c08:	f000 80c7 	beq.w	8010d9a <lv_draw_sw_arc+0x92e>
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 8010c0c:	9b07      	ldr	r3, [sp, #28]
 8010c0e:	2b03      	cmp	r3, #3
 8010c10:	f000 816b 	beq.w	8010eea <lv_draw_sw_arc+0xa7e>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8010c14:	9b06      	ldr	r3, [sp, #24]
 8010c16:	9a07      	ldr	r2, [sp, #28]
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d055      	beq.n	8010cc8 <lv_draw_sw_arc+0x85c>
 8010c1c:	9b06      	ldr	r3, [sp, #24]
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	f000 8196 	beq.w	8010f50 <lv_draw_sw_arc+0xae4>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8010c24:	9b06      	ldr	r3, [sp, #24]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	f040 80ea 	bne.w	8010e00 <lv_draw_sw_arc+0x994>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 8010c2c:	9b07      	ldr	r3, [sp, #28]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f040 80e6 	bne.w	8010e00 <lv_draw_sw_arc+0x994>
 8010c34:	e04a      	b.n	8010ccc <lv_draw_sw_arc+0x860>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 8010c36:	42ac      	cmp	r4, r5
 8010c38:	d2ae      	bcs.n	8010b98 <lv_draw_sw_arc+0x72c>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010c3a:	f8b8 3000 	ldrh.w	r3, [r8]
 8010c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8010c40:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010c44:	b200      	sxth	r0, r0
 8010c46:	f011 f865 	bl	8021d14 <lv_trigo_sin>
 8010c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c4c:	fb03 f300 	mul.w	r3, r3, r0
 8010c50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c52:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010c56:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010c5a:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 8010c5e:	920c      	str	r2, [sp, #48]	; 0x30
 8010c60:	9808      	ldr	r0, [sp, #32]
 8010c62:	f011 f857 	bl	8021d14 <lv_trigo_sin>
 8010c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c68:	eba3 020a 	sub.w	r2, r3, sl
 8010c6c:	920d      	str	r2, [sp, #52]	; 0x34
 8010c6e:	fb02 f300 	mul.w	r3, r2, r0
 8010c72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010c74:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010c78:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8010c7c:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8010c80:	910c      	str	r1, [sp, #48]	; 0x30
 8010c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c84:	f011 f846 	bl	8021d14 <lv_trigo_sin>
 8010c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c8a:	fb03 f300 	mul.w	r3, r3, r0
 8010c8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010c90:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010c94:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010c98:	f8b8 3000 	ldrh.w	r3, [r8]
 8010c9c:	930a      	str	r3, [sp, #40]	; 0x28
 8010c9e:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010ca2:	b200      	sxth	r0, r0
 8010ca4:	f011 f836 	bl	8021d14 <lv_trigo_sin>
 8010ca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010caa:	fb02 f300 	mul.w	r3, r2, r0
 8010cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cb0:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010cb4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010cb8:	465a      	mov	r2, fp
 8010cba:	a913      	add	r1, sp, #76	; 0x4c
 8010cbc:	4608      	mov	r0, r1
 8010cbe:	f010 fa20 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 8010cc2:	bb18      	cbnz	r0, 8010d0c <lv_draw_sw_arc+0x8a0>
    q->draw_ctx->clip_area = clip_area_ori;
 8010cc4:	f8c9 b008 	str.w	fp, [r9, #8]
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 8010cc8:	42ac      	cmp	r4, r5
 8010cca:	d9a7      	bls.n	8010c1c <lv_draw_sw_arc+0x7b0>
        quarter_area.x1 = q->center->x;
 8010ccc:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010cd0:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y - q->radius;
 8010cd4:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010cd8:	1bd9      	subs	r1, r3, r7
 8010cda:	f8ad 104e 	strh.w	r1, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + q->radius;
 8010cde:	443a      	add	r2, r7
 8010ce0:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y - 1;
 8010ce4:	3b01      	subs	r3, #1
 8010ce6:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010cea:	465a      	mov	r2, fp
 8010cec:	a913      	add	r1, sp, #76	; 0x4c
 8010cee:	4608      	mov	r0, r1
 8010cf0:	f010 fa07 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	f000 8083 	beq.w	8010e00 <lv_draw_sw_arc+0x994>
            q->draw_ctx->clip_area = &quarter_area;
 8010cfa:	ab13      	add	r3, sp, #76	; 0x4c
 8010cfc:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010d00:	aa42      	add	r2, sp, #264	; 0x108
 8010d02:	a944      	add	r1, sp, #272	; 0x110
 8010d04:	4648      	mov	r0, r9
 8010d06:	f7fe fded 	bl	800f8e4 <lv_draw_rect>
 8010d0a:	e079      	b.n	8010e00 <lv_draw_sw_arc+0x994>
            q->draw_ctx->clip_area = &quarter_area;
 8010d0c:	ab13      	add	r3, sp, #76	; 0x4c
 8010d0e:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010d12:	aa42      	add	r2, sp, #264	; 0x108
 8010d14:	a944      	add	r1, sp, #272	; 0x110
 8010d16:	4648      	mov	r0, r9
 8010d18:	f7fe fde4 	bl	800f8e4 <lv_draw_rect>
 8010d1c:	e7d2      	b.n	8010cc4 <lv_draw_sw_arc+0x858>
                q->draw_ctx->clip_area = &quarter_area;
 8010d1e:	ab13      	add	r3, sp, #76	; 0x4c
 8010d20:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010d24:	aa42      	add	r2, sp, #264	; 0x108
 8010d26:	a944      	add	r1, sp, #272	; 0x110
 8010d28:	4648      	mov	r0, r9
 8010d2a:	f7fe fddb 	bl	800f8e4 <lv_draw_rect>
 8010d2e:	e763      	b.n	8010bf8 <lv_draw_sw_arc+0x78c>
            quarter_area.x1 = q->center->x - q->radius;
 8010d30:	f8b8 3000 	ldrh.w	r3, [r8]
 8010d34:	930c      	str	r3, [sp, #48]	; 0x30
 8010d36:	1bdb      	subs	r3, r3, r7
 8010d38:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y2 = q->center->y - 1;
 8010d3c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010d46:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010d4a:	b200      	sxth	r0, r0
 8010d4c:	f010 ffe2 	bl	8021d14 <lv_trigo_sin>
 8010d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d52:	eba2 030a 	sub.w	r3, r2, sl
 8010d56:	fb00 f303 	mul.w	r3, r0, r3
 8010d5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d5c:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010d60:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010d64:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010d68:	930c      	str	r3, [sp, #48]	; 0x30
 8010d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d6c:	f010 ffd2 	bl	8021d14 <lv_trigo_sin>
 8010d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d72:	fb02 f300 	mul.w	r3, r2, r0
 8010d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d78:	eb02 33e3 	add.w	r3, r2, r3, asr #15
 8010d7c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010d80:	465a      	mov	r2, fp
 8010d82:	a913      	add	r1, sp, #76	; 0x4c
 8010d84:	4608      	mov	r0, r1
 8010d86:	f010 f9bc 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	d13c      	bne.n	8010e08 <lv_draw_sw_arc+0x99c>
    q->draw_ctx->clip_area = clip_area_ori;
 8010d8e:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8010d92:	9b06      	ldr	r3, [sp, #24]
 8010d94:	2b03      	cmp	r3, #3
 8010d96:	f47f af3d 	bne.w	8010c14 <lv_draw_sw_arc+0x7a8>
 8010d9a:	9b07      	ldr	r3, [sp, #28]
 8010d9c:	2b03      	cmp	r3, #3
 8010d9e:	d050      	beq.n	8010e42 <lv_draw_sw_arc+0x9d6>
            quarter_area.x2 = q->center->x + q->radius;
 8010da0:	f8b8 3000 	ldrh.w	r3, [r8]
 8010da4:	9306      	str	r3, [sp, #24]
 8010da6:	18fb      	adds	r3, r7, r3
 8010da8:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
            quarter_area.y2 = q->center->y - 1;
 8010dac:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010db0:	3b01      	subs	r3, #1
 8010db2:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010db6:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010dba:	b200      	sxth	r0, r0
 8010dbc:	f010 ffaa 	bl	8021d14 <lv_trigo_sin>
 8010dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dc2:	eba2 030a 	sub.w	r3, r2, sl
 8010dc6:	fb00 f303 	mul.w	r3, r0, r3
 8010dca:	9906      	ldr	r1, [sp, #24]
 8010dcc:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010dd0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010dd4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010dd8:	9808      	ldr	r0, [sp, #32]
 8010dda:	f010 ff9b 	bl	8021d14 <lv_trigo_sin>
 8010dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010de0:	fb02 f300 	mul.w	r3, r2, r0
 8010de4:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010de8:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010dec:	465a      	mov	r2, fp
 8010dee:	a913      	add	r1, sp, #76	; 0x4c
 8010df0:	4608      	mov	r0, r1
 8010df2:	f010 f986 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d16e      	bne.n	8010ed8 <lv_draw_sw_arc+0xa6c>
        if(q->end_quarter == 3) {
 8010dfa:	9b07      	ldr	r3, [sp, #28]
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	d074      	beq.n	8010eea <lv_draw_sw_arc+0xa7e>
    q->draw_ctx->clip_area = clip_area_ori;
 8010e00:	f8c9 b008 	str.w	fp, [r9, #8]
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 8010e04:	f7ff bbe6 	b.w	80105d4 <lv_draw_sw_arc+0x168>
                q->draw_ctx->clip_area = &quarter_area;
 8010e08:	ab13      	add	r3, sp, #76	; 0x4c
 8010e0a:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010e0e:	aa42      	add	r2, sp, #264	; 0x108
 8010e10:	a944      	add	r1, sp, #272	; 0x110
 8010e12:	4648      	mov	r0, r9
 8010e14:	f7fe fd66 	bl	800f8e4 <lv_draw_rect>
    q->draw_ctx->clip_area = clip_area_ori;
 8010e18:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8010e1c:	9b06      	ldr	r3, [sp, #24]
 8010e1e:	2b03      	cmp	r3, #3
 8010e20:	f47f aef4 	bne.w	8010c0c <lv_draw_sw_arc+0x7a0>
 8010e24:	e7bc      	b.n	8010da0 <lv_draw_sw_arc+0x934>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 8010e26:	9b06      	ldr	r3, [sp, #24]
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	f47f aee9 	bne.w	8010c00 <lv_draw_sw_arc+0x794>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 8010e2e:	9b07      	ldr	r3, [sp, #28]
 8010e30:	2b03      	cmp	r3, #3
 8010e32:	f43f ae8e 	beq.w	8010b52 <lv_draw_sw_arc+0x6e6>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f43f ae8b 	beq.w	8010b52 <lv_draw_sw_arc+0x6e6>
    q->draw_ctx->clip_area = clip_area_ori;
 8010e3c:	f8c9 b008 	str.w	fp, [r9, #8]
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 8010e40:	e6e8      	b.n	8010c14 <lv_draw_sw_arc+0x7a8>
 8010e42:	42ac      	cmp	r4, r5
 8010e44:	d2ac      	bcs.n	8010da0 <lv_draw_sw_arc+0x934>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010e46:	f8b8 3000 	ldrh.w	r3, [r8]
 8010e4a:	9306      	str	r3, [sp, #24]
 8010e4c:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8010e50:	b200      	sxth	r0, r0
 8010e52:	f010 ff5f 	bl	8021d14 <lv_trigo_sin>
 8010e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e58:	eba3 020a 	sub.w	r2, r3, sl
 8010e5c:	9207      	str	r2, [sp, #28]
 8010e5e:	fb02 f300 	mul.w	r3, r2, r0
 8010e62:	9906      	ldr	r1, [sp, #24]
 8010e64:	eb01 33e3 	add.w	r3, r1, r3, asr #15
 8010e68:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010e6c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010e70:	9808      	ldr	r0, [sp, #32]
 8010e72:	f010 ff4f 	bl	8021d14 <lv_trigo_sin>
 8010e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e78:	fb03 f300 	mul.w	r3, r3, r0
 8010e7c:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010e80:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010e84:	f8b8 4000 	ldrh.w	r4, [r8]
 8010e88:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010e8c:	b200      	sxth	r0, r0
 8010e8e:	f010 ff41 	bl	8021d14 <lv_trigo_sin>
 8010e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e94:	fb03 f300 	mul.w	r3, r3, r0
 8010e98:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010e9c:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010ea0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ea6:	f010 ff35 	bl	8021d14 <lv_trigo_sin>
 8010eaa:	9a07      	ldr	r2, [sp, #28]
 8010eac:	fb02 f300 	mul.w	r3, r2, r0
 8010eb0:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010eb4:	f8ad 4052 	strh.w	r4, [sp, #82]	; 0x52
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010eb8:	465a      	mov	r2, fp
 8010eba:	a913      	add	r1, sp, #76	; 0x4c
 8010ebc:	4608      	mov	r0, r1
 8010ebe:	f010 f920 	bl	8021102 <_lv_area_intersect>
        if(ok) {
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d09c      	beq.n	8010e00 <lv_draw_sw_arc+0x994>
            q->draw_ctx->clip_area = &quarter_area;
 8010ec6:	ab13      	add	r3, sp, #76	; 0x4c
 8010ec8:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010ecc:	aa42      	add	r2, sp, #264	; 0x108
 8010ece:	a944      	add	r1, sp, #272	; 0x110
 8010ed0:	4648      	mov	r0, r9
 8010ed2:	f7fe fd07 	bl	800f8e4 <lv_draw_rect>
 8010ed6:	e793      	b.n	8010e00 <lv_draw_sw_arc+0x994>
                q->draw_ctx->clip_area = &quarter_area;
 8010ed8:	ab13      	add	r3, sp, #76	; 0x4c
 8010eda:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010ede:	aa42      	add	r2, sp, #264	; 0x108
 8010ee0:	a944      	add	r1, sp, #272	; 0x110
 8010ee2:	4648      	mov	r0, r9
 8010ee4:	f7fe fcfe 	bl	800f8e4 <lv_draw_rect>
 8010ee8:	e787      	b.n	8010dfa <lv_draw_sw_arc+0x98e>
            quarter_area.x1 = q->center->x;
 8010eea:	f9b8 4000 	ldrsh.w	r4, [r8]
 8010eee:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
            quarter_area.y1 = q->center->y - q->radius;
 8010ef2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010ef6:	1bdb      	subs	r3, r3, r7
 8010ef8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8010efc:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8010f00:	b200      	sxth	r0, r0
 8010f02:	f010 ff07 	bl	8021d14 <lv_trigo_sin>
 8010f06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010f08:	fb05 f300 	mul.w	r3, r5, r0
 8010f0c:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010f10:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8010f14:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f1a:	f010 fefb 	bl	8021d14 <lv_trigo_sin>
 8010f1e:	eba5 030a 	sub.w	r3, r5, sl
 8010f22:	fb00 f303 	mul.w	r3, r0, r3
 8010f26:	eb04 34e3 	add.w	r4, r4, r3, asr #15
 8010f2a:	f8ad 4052 	strh.w	r4, [sp, #82]	; 0x52
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8010f2e:	465a      	mov	r2, fp
 8010f30:	a913      	add	r1, sp, #76	; 0x4c
 8010f32:	4608      	mov	r0, r1
 8010f34:	f010 f8e5 	bl	8021102 <_lv_area_intersect>
            if(ok) {
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	f43f af61 	beq.w	8010e00 <lv_draw_sw_arc+0x994>
                q->draw_ctx->clip_area = &quarter_area;
 8010f3e:	ab13      	add	r3, sp, #76	; 0x4c
 8010f40:	f8c9 3008 	str.w	r3, [r9, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8010f44:	aa42      	add	r2, sp, #264	; 0x108
 8010f46:	a944      	add	r1, sp, #272	; 0x110
 8010f48:	4648      	mov	r0, r9
 8010f4a:	f7fe fccb 	bl	800f8e4 <lv_draw_rect>
 8010f4e:	e757      	b.n	8010e00 <lv_draw_sw_arc+0x994>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 8010f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f52:	f013 0f02 	tst.w	r3, #2
 8010f56:	f43f aeb9 	beq.w	8010ccc <lv_draw_sw_arc+0x860>
 8010f5a:	e751      	b.n	8010e00 <lv_draw_sw_arc+0x994>
        lv_draw_mask_free_param(&mask_in_param);
 8010f5c:	a83a      	add	r0, sp, #232	; 0xe8
 8010f5e:	f7fe f883 	bl	800f068 <lv_draw_mask_free_param>
 8010f62:	f7ff bb41 	b.w	80105e8 <lv_draw_sw_arc+0x17c>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fe f854 	bl	800f014 <lv_draw_mask_remove_id>
 8010f6c:	f7ff bb47 	b.w	80105fe <lv_draw_sw_arc+0x192>
        get_rounded_area(start_angle, radius, width, &round_area);
 8010f70:	b23f      	sxth	r7, r7
 8010f72:	fa5f fa8a 	uxtb.w	sl, sl
 8010f76:	ab0f      	add	r3, sp, #60	; 0x3c
 8010f78:	4652      	mov	r2, sl
 8010f7a:	4639      	mov	r1, r7
 8010f7c:	9808      	ldr	r0, [sp, #32]
 8010f7e:	f7ff fa31 	bl	80103e4 <get_rounded_area>
        round_area.x1 += center->x;
 8010f82:	f8b8 3000 	ldrh.w	r3, [r8]
 8010f86:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8010f8a:	441a      	add	r2, r3
 8010f8c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        round_area.x2 += center->x;
 8010f90:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010f94:	4413      	add	r3, r2
 8010f96:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        round_area.y1 += center->y;
 8010f9a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010f9e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8010fa2:	441a      	add	r2, r3
 8010fa4:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
        round_area.y2 += center->y;
 8010fa8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8010fac:	4413      	add	r3, r2
 8010fae:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8010fb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8010fb4:	4659      	mov	r1, fp
 8010fb6:	a811      	add	r0, sp, #68	; 0x44
 8010fb8:	f010 f8a3 	bl	8021102 <_lv_area_intersect>
 8010fbc:	bb38      	cbnz	r0, 801100e <lv_draw_sw_arc+0xba2>
        get_rounded_area(end_angle, radius, width, &round_area);
 8010fbe:	ab0f      	add	r3, sp, #60	; 0x3c
 8010fc0:	4652      	mov	r2, sl
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fc6:	f7ff fa0d 	bl	80103e4 <get_rounded_area>
        round_area.x1 += center->x;
 8010fca:	f8b8 3000 	ldrh.w	r3, [r8]
 8010fce:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8010fd2:	441a      	add	r2, r3
 8010fd4:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
        round_area.x2 += center->x;
 8010fd8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010fdc:	4413      	add	r3, r2
 8010fde:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        round_area.y1 += center->y;
 8010fe2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8010fe6:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8010fea:	441a      	add	r2, r3
 8010fec:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
        round_area.y2 += center->y;
 8010ff0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8010ff4:	4413      	add	r3, r2
 8010ff6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 8010ffa:	aa0f      	add	r2, sp, #60	; 0x3c
 8010ffc:	4659      	mov	r1, fp
 8010ffe:	a811      	add	r0, sp, #68	; 0x44
 8011000:	f010 f87f 	bl	8021102 <_lv_area_intersect>
 8011004:	b9f0      	cbnz	r0, 8011044 <lv_draw_sw_arc+0xbd8>
        draw_ctx->clip_area = clip_area_ori;
 8011006:	f8c9 b008 	str.w	fp, [r9, #8]
 801100a:	f7ff bafd 	b.w	8010608 <lv_draw_sw_arc+0x19c>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 801100e:	2300      	movs	r3, #0
 8011010:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011014:	a90f      	add	r1, sp, #60	; 0x3c
 8011016:	a813      	add	r0, sp, #76	; 0x4c
 8011018:	f7fe f9b4 	bl	800f384 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 801101c:	2100      	movs	r1, #0
 801101e:	a813      	add	r0, sp, #76	; 0x4c
 8011020:	f7fd ffae 	bl	800ef80 <lv_draw_mask_add>
 8011024:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 8011026:	ab11      	add	r3, sp, #68	; 0x44
 8011028:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 801102c:	aa42      	add	r2, sp, #264	; 0x108
 801102e:	a944      	add	r1, sp, #272	; 0x110
 8011030:	4648      	mov	r0, r9
 8011032:	f7fe fc57 	bl	800f8e4 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 8011036:	4620      	mov	r0, r4
 8011038:	f7fd ffec 	bl	800f014 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 801103c:	a813      	add	r0, sp, #76	; 0x4c
 801103e:	f7fe f813 	bl	800f068 <lv_draw_mask_free_param>
 8011042:	e7bc      	b.n	8010fbe <lv_draw_sw_arc+0xb52>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 8011044:	2300      	movs	r3, #0
 8011046:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801104a:	a90f      	add	r1, sp, #60	; 0x3c
 801104c:	a813      	add	r0, sp, #76	; 0x4c
 801104e:	f7fe f999 	bl	800f384 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 8011052:	2100      	movs	r1, #0
 8011054:	a813      	add	r0, sp, #76	; 0x4c
 8011056:	f7fd ff93 	bl	800ef80 <lv_draw_mask_add>
 801105a:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 801105c:	ab11      	add	r3, sp, #68	; 0x44
 801105e:	f8c9 3008 	str.w	r3, [r9, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8011062:	aa42      	add	r2, sp, #264	; 0x108
 8011064:	a944      	add	r1, sp, #272	; 0x110
 8011066:	4648      	mov	r0, r9
 8011068:	f7fe fc3c 	bl	800f8e4 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 801106c:	4620      	mov	r0, r4
 801106e:	f7fd ffd1 	bl	800f014 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 8011072:	a813      	add	r0, sp, #76	; 0x4c
 8011074:	f7fd fff8 	bl	800f068 <lv_draw_mask_free_param>
 8011078:	e7c5      	b.n	8011006 <lv_draw_sw_arc+0xb9a>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801107a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801107e:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 8011082:	aa42      	add	r2, sp, #264	; 0x108
 8011084:	a944      	add	r1, sp, #272	; 0x110
 8011086:	4648      	mov	r0, r9
 8011088:	f7fe fc2c 	bl	800f8e4 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 801108c:	9802      	ldr	r0, [sp, #8]
 801108e:	f7fd ffc1 	bl	800f014 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_out_param);
 8011092:	a834      	add	r0, sp, #208	; 0xd0
 8011094:	f7fd ffe8 	bl	800f068 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 8011098:	f7ff bab6 	b.w	8010608 <lv_draw_sw_arc+0x19c>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 801109c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80110a0:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80110a4:	aa42      	add	r2, sp, #264	; 0x108
 80110a6:	a944      	add	r1, sp, #272	; 0x110
 80110a8:	4648      	mov	r0, r9
 80110aa:	f7fe fc1b 	bl	800f8e4 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 80110ae:	9802      	ldr	r0, [sp, #8]
 80110b0:	f7fd ffb0 	bl	800f014 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 80110b4:	9b03      	ldr	r3, [sp, #12]
 80110b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110ba:	f47f aae0 	bne.w	801067e <lv_draw_sw_arc+0x212>
        lv_draw_mask_free_param(&mask_out_param);
 80110be:	a834      	add	r0, sp, #208	; 0xd0
 80110c0:	f7fd ffd2 	bl	800f068 <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 80110c4:	f7ff bae4 	b.w	8010690 <lv_draw_sw_arc+0x224>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 80110c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80110cc:	f8ad 3110 	strh.w	r3, [sp, #272]	; 0x110
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 80110d0:	aa42      	add	r2, sp, #264	; 0x108
 80110d2:	a944      	add	r1, sp, #272	; 0x110
 80110d4:	4648      	mov	r0, r9
 80110d6:	f7fe fc05 	bl	800f8e4 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 80110da:	9802      	ldr	r0, [sp, #8]
 80110dc:	f7fd ff9a 	bl	800f014 <lv_draw_mask_remove_id>
 80110e0:	2400      	movs	r4, #0
 80110e2:	f7ff bad0 	b.w	8010686 <lv_draw_sw_arc+0x21a>
 80110e6:	bf00      	nop

080110e8 <color_blend_true_color_additive>:
        }
    }
}

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 80110e8:	b510      	push	{r4, lr}
 80110ea:	f001 041f 	and.w	r4, r1, #31
 80110ee:	f3c1 1e45 	ubfx	lr, r1, #5, #6
 80110f2:	f3c1 2cc4 	ubfx	ip, r1, #11, #5

    if(opa <= LV_OPA_MIN) return bg;
 80110f6:	2a02      	cmp	r2, #2
 80110f8:	d937      	bls.n	801116a <color_blend_true_color_additive+0x82>
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
 80110fa:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 80110fe:	4463      	add	r3, ip
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MIN(tmp, 31);
 8011100:	2b1f      	cmp	r3, #31
 8011102:	bf28      	it	cs
 8011104:	231f      	movcs	r3, #31
 8011106:	f003 031f 	and.w	r3, r3, #31
#if LV_COLOR_DEPTH == 8
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
 801110a:	f3c0 1c45 	ubfx	ip, r0, #5, #6
 801110e:	44f4      	add	ip, lr
    fg.ch.green = LV_MIN(tmp, 63);
 8011110:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8011114:	bf28      	it	cs
 8011116:	f04f 0c3f 	movcs.w	ip, #63	; 0x3f
 801111a:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
#elif LV_COLOR_DEPTH == 32
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
 801111e:	f000 0e1f 	and.w	lr, r0, #31
 8011122:	44a6      	add	lr, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MIN(tmp, 31);
 8011124:	f1be 0f1f 	cmp.w	lr, #31
 8011128:	bf28      	it	cs
 801112a:	f04f 0e1f 	movcs.w	lr, #31
 801112e:	f00e 0e1f 	and.w	lr, lr, #31
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 8011132:	2aff      	cmp	r2, #255	; 0xff
 8011134:	d022      	beq.n	801117c <color_blend_true_color_additive+0x94>

    return lv_color_mix(fg, bg, opa);
 8011136:	f36e 0004 	bfi	r0, lr, #0, #5
 801113a:	f36c 104a 	bfi	r0, ip, #5, #6
 801113e:	f363 20cf 	bfi	r0, r3, #11, #5
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011142:	b28b      	uxth	r3, r1
 8011144:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8011148:	4c11      	ldr	r4, [pc, #68]	; (8011190 <color_blend_true_color_additive+0xa8>)
 801114a:	4021      	ands	r1, r4
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801114c:	b283      	uxth	r3, r0
 801114e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8011152:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011154:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011156:	3204      	adds	r2, #4
 8011158:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801115a:	fb02 f000 	mul.w	r0, r2, r0
 801115e:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8011162:	4020      	ands	r0, r4
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8011164:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 8011168:	bd10      	pop	{r4, pc}
    if(opa <= LV_OPA_MIN) return bg;
 801116a:	f04f 0000 	mov.w	r0, #0
 801116e:	f364 0004 	bfi	r0, r4, #0, #5
 8011172:	f36e 104a 	bfi	r0, lr, #5, #6
 8011176:	f36c 20cf 	bfi	r0, ip, #11, #5
 801117a:	e7f5      	b.n	8011168 <color_blend_true_color_additive+0x80>
    if(opa == LV_OPA_COVER) return fg;
 801117c:	f04f 0000 	mov.w	r0, #0
 8011180:	f36e 0004 	bfi	r0, lr, #0, #5
 8011184:	f36c 104a 	bfi	r0, ip, #5, #6
 8011188:	f363 20cf 	bfi	r0, r3, #11, #5
 801118c:	e7ec      	b.n	8011168 <color_blend_true_color_additive+0x80>
 801118e:	bf00      	nop
 8011190:	07e0f81f 	.word	0x07e0f81f

08011194 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8011194:	b510      	push	{r4, lr}
 8011196:	f001 0e1f 	and.w	lr, r1, #31
 801119a:	f3c1 1c45 	ubfx	ip, r1, #5, #6
 801119e:	f3c1 23c4 	ubfx	r3, r1, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 80111a2:	2a02      	cmp	r2, #2
 80111a4:	d932      	bls.n	801120c <color_blend_true_color_subtractive+0x78>

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 80111a6:	f3c0 24c4 	ubfx	r4, r0, #11, #5
 80111aa:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MAX(tmp, 0);
 80111ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80111b0:	f003 031f 	and.w	r3, r3, #31

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
 80111b4:	f3c0 1445 	ubfx	r4, r0, #5, #6
 80111b8:	ebac 0c04 	sub.w	ip, ip, r4
    fg.ch.green = LV_MAX(tmp, 0);
 80111bc:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
 80111c0:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    tmp = LV_MAX(tmp, 0);
    fg.ch.green_h = tmp >> 3;
    fg.ch.green_l = tmp & 0x7;
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 80111c4:	f000 041f 	and.w	r4, r0, #31
 80111c8:	ebae 0e04 	sub.w	lr, lr, r4
    fg.ch.blue = LV_MAX(tmp, 0);
 80111cc:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
 80111d0:	f00e 0e1f 	and.w	lr, lr, #31

    if(opa == LV_OPA_COVER) return fg;
 80111d4:	2aff      	cmp	r2, #255	; 0xff
 80111d6:	d022      	beq.n	801121e <color_blend_true_color_subtractive+0x8a>

    return lv_color_mix(fg, bg, opa);
 80111d8:	f36e 0004 	bfi	r0, lr, #0, #5
 80111dc:	f36c 104a 	bfi	r0, ip, #5, #6
 80111e0:	f363 20cf 	bfi	r0, r3, #11, #5
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80111e4:	b28b      	uxth	r3, r1
 80111e6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80111ea:	4c11      	ldr	r4, [pc, #68]	; (8011230 <color_blend_true_color_subtractive+0x9c>)
 80111ec:	4021      	ands	r1, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80111ee:	b283      	uxth	r3, r0
 80111f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80111f4:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80111f6:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80111f8:	3204      	adds	r2, #4
 80111fa:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80111fc:	fb02 f000 	mul.w	r0, r2, r0
 8011200:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8011204:	4020      	ands	r0, r4
    return ret;
 8011206:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 801120a:	bd10      	pop	{r4, pc}
    if(opa <= LV_OPA_MIN) return bg;
 801120c:	f04f 0000 	mov.w	r0, #0
 8011210:	f36e 0004 	bfi	r0, lr, #0, #5
 8011214:	f36c 104a 	bfi	r0, ip, #5, #6
 8011218:	f363 20cf 	bfi	r0, r3, #11, #5
 801121c:	e7f5      	b.n	801120a <color_blend_true_color_subtractive+0x76>
    if(opa == LV_OPA_COVER) return fg;
 801121e:	f04f 0000 	mov.w	r0, #0
 8011222:	f36e 0004 	bfi	r0, lr, #0, #5
 8011226:	f36c 104a 	bfi	r0, ip, #5, #6
 801122a:	f363 20cf 	bfi	r0, r3, #11, #5
 801122e:	e7ec      	b.n	801120a <color_blend_true_color_subtractive+0x76>
 8011230:	07e0f81f 	.word	0x07e0f81f

08011234 <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
 8011234:	b510      	push	{r4, lr}
 8011236:	f001 0c1f 	and.w	ip, r1, #31
 801123a:	f3c1 1445 	ubfx	r4, r1, #5, #6
 801123e:	f3c1 2ec4 	ubfx	lr, r1, #11, #5
    if(opa <= LV_OPA_MIN) return bg;
 8011242:	2a02      	cmp	r2, #2
 8011244:	d92d      	bls.n	80112a2 <color_blend_true_color_multiply+0x6e>
#if LV_COLOR_DEPTH == 32
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 8;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 8;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 8;
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 8011246:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 801124a:	fb0e f303 	mul.w	r3, lr, r3
 801124e:	f3c3 1344 	ubfx	r3, r3, #5, #5
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 8011252:	f000 0e1f 	and.w	lr, r0, #31
 8011256:	fb0c fe0e 	mul.w	lr, ip, lr
 801125a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 801125e:	f3c0 1c45 	ubfx	ip, r0, #5, #6
 8011262:	fb04 fc0c 	mul.w	ip, r4, ip
 8011266:	f3cc 1c85 	ubfx	ip, ip, #6, #6
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 801126a:	2aff      	cmp	r2, #255	; 0xff
 801126c:	d022      	beq.n	80112b4 <color_blend_true_color_multiply+0x80>

    return lv_color_mix(fg, bg, opa);
 801126e:	f36e 0004 	bfi	r0, lr, #0, #5
 8011272:	f36c 104a 	bfi	r0, ip, #5, #6
 8011276:	f363 20cf 	bfi	r0, r3, #11, #5
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801127a:	b28b      	uxth	r3, r1
 801127c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8011280:	4c11      	ldr	r4, [pc, #68]	; (80112c8 <color_blend_true_color_multiply+0x94>)
 8011282:	4021      	ands	r1, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011284:	b283      	uxth	r3, r0
 8011286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 801128a:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801128c:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801128e:	3204      	adds	r2, #4
 8011290:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011292:	fb02 f000 	mul.w	r0, r2, r0
 8011296:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 801129a:	4020      	ands	r0, r4
    return ret;
 801129c:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 80112a0:	bd10      	pop	{r4, pc}
    if(opa <= LV_OPA_MIN) return bg;
 80112a2:	f04f 0000 	mov.w	r0, #0
 80112a6:	f36c 0004 	bfi	r0, ip, #0, #5
 80112aa:	f364 104a 	bfi	r0, r4, #5, #6
 80112ae:	f36e 20cf 	bfi	r0, lr, #11, #5
 80112b2:	e7f5      	b.n	80112a0 <color_blend_true_color_multiply+0x6c>
    if(opa == LV_OPA_COVER) return fg;
 80112b4:	f04f 0000 	mov.w	r0, #0
 80112b8:	f36e 0004 	bfi	r0, lr, #0, #5
 80112bc:	f36c 104a 	bfi	r0, ip, #5, #6
 80112c0:	f363 20cf 	bfi	r0, r3, #11, #5
 80112c4:	e7ec      	b.n	80112a0 <color_blend_true_color_multiply+0x6c>
 80112c6:	bf00      	nop
 80112c8:	07e0f81f 	.word	0x07e0f81f

080112cc <lv_draw_sw_blend>:
    if(dsc->opa <= LV_OPA_MIN) return;
 80112cc:	7e0b      	ldrb	r3, [r1, #24]
 80112ce:	2b02      	cmp	r3, #2
 80112d0:	d800      	bhi.n	80112d4 <lv_draw_sw_blend+0x8>
 80112d2:	4770      	bx	lr
{
 80112d4:	b530      	push	{r4, r5, lr}
 80112d6:	b083      	sub	sp, #12
 80112d8:	4605      	mov	r5, r0
 80112da:	460c      	mov	r4, r1
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 80112dc:	6882      	ldr	r2, [r0, #8]
 80112de:	6809      	ldr	r1, [r1, #0]
 80112e0:	4668      	mov	r0, sp
 80112e2:	f00f ff0e 	bl	8021102 <_lv_area_intersect>
 80112e6:	b138      	cbz	r0, 80112f8 <lv_draw_sw_blend+0x2c>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80112e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80112ea:	b10b      	cbz	r3, 80112f0 <lv_draw_sw_blend+0x24>
 80112ec:	4628      	mov	r0, r5
 80112ee:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 80112f0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80112f2:	4621      	mov	r1, r4
 80112f4:	4628      	mov	r0, r5
 80112f6:	4798      	blx	r3
}
 80112f8:	b003      	add	sp, #12
 80112fa:	bd30      	pop	{r4, r5, pc}

080112fc <lv_draw_sw_blend_basic>:
{
 80112fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011300:	b091      	sub	sp, #68	; 0x44
 8011302:	4605      	mov	r5, r0
 8011304:	460c      	mov	r4, r1
    if(dsc->mask_buf == NULL) mask = NULL;
 8011306:	68cb      	ldr	r3, [r1, #12]
 8011308:	9305      	str	r3, [sp, #20]
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 801130a:	b10b      	cbz	r3, 8011310 <lv_draw_sw_blend_basic+0x14>
 801130c:	7c0b      	ldrb	r3, [r1, #16]
 801130e:	b183      	cbz	r3, 8011332 <lv_draw_sw_blend_basic+0x36>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 8011310:	7c23      	ldrb	r3, [r4, #16]
 8011312:	2b01      	cmp	r3, #1
 8011314:	9b05      	ldr	r3, [sp, #20]
 8011316:	bf08      	it	eq
 8011318:	2300      	moveq	r3, #0
 801131a:	9305      	str	r3, [sp, #20]
    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 801131c:	686b      	ldr	r3, [r5, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801131e:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8011322:	f9b3 7000 	ldrsh.w	r7, [r3]
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 8011326:	68aa      	ldr	r2, [r5, #8]
 8011328:	6821      	ldr	r1, [r4, #0]
 801132a:	a80e      	add	r0, sp, #56	; 0x38
 801132c:	f00f fee9 	bl	8021102 <_lv_area_intersect>
 8011330:	b910      	cbnz	r0, 8011338 <lv_draw_sw_blend_basic+0x3c>
}
 8011332:	b011      	add	sp, #68	; 0x44
 8011334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011338:	3601      	adds	r6, #1
 801133a:	1bf6      	subs	r6, r6, r7
 801133c:	b233      	sxth	r3, r6
 801133e:	9304      	str	r3, [sp, #16]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 8011340:	f7fb fd48 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
 8011344:	4606      	mov	r6, r0
    lv_color_t * dest_buf = draw_ctx->buf;
 8011346:	682b      	ldr	r3, [r5, #0]
 8011348:	9306      	str	r3, [sp, #24]
    if(disp->driver->set_px_cb == NULL) {
 801134a:	6802      	ldr	r2, [r0, #0]
 801134c:	69d3      	ldr	r3, [r2, #28]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d06d      	beq.n	801142e <lv_draw_sw_blend_basic+0x132>
    const lv_color_t * src_buf = dsc->src_buf;
 8011352:	6863      	ldr	r3, [r4, #4]
    if(src_buf) {
 8011354:	9307      	str	r3, [sp, #28]
 8011356:	2b00      	cmp	r3, #0
 8011358:	f000 8097 	beq.w	801148a <lv_draw_sw_blend_basic+0x18e>
        src_stride = lv_area_get_width(dsc->blend_area);
 801135c:	6827      	ldr	r7, [r4, #0]
 801135e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8011362:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8011366:	f10b 0b01 	add.w	fp, fp, #1
 801136a:	ebab 0b01 	sub.w	fp, fp, r1
 801136e:	fa0f fb8b 	sxth.w	fp, fp
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 8011372:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011376:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 801137a:	1a18      	subs	r0, r3, r0
 801137c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8011380:	1a5b      	subs	r3, r3, r1
 8011382:	fb0b 3300 	mla	r3, fp, r0, r3
 8011386:	9907      	ldr	r1, [sp, #28]
 8011388:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801138c:	9307      	str	r3, [sp, #28]
    if(mask) {
 801138e:	9b05      	ldr	r3, [sp, #20]
 8011390:	2b00      	cmp	r3, #0
 8011392:	f000 8090 	beq.w	80114b6 <lv_draw_sw_blend_basic+0x1ba>
        if(disp->driver->antialiasing == 0) {
 8011396:	7c13      	ldrb	r3, [r2, #16]
 8011398:	f013 0f08 	tst.w	r3, #8
 801139c:	d078      	beq.n	8011490 <lv_draw_sw_blend_basic+0x194>
        mask_stride = lv_area_get_width(dsc->mask_area);
 801139e:	6960      	ldr	r0, [r4, #20]
 80113a0:	f9b0 1000 	ldrsh.w	r1, [r0]
 80113a4:	8882      	ldrh	r2, [r0, #4]
 80113a6:	3201      	adds	r2, #1
 80113a8:	1a52      	subs	r2, r2, r1
 80113aa:	b217      	sxth	r7, r2
 80113ac:	9708      	str	r7, [sp, #32]
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 80113ae:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80113b2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80113b6:	1a9a      	subs	r2, r3, r2
 80113b8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80113bc:	1a5b      	subs	r3, r3, r1
 80113be:	fb07 3302 	mla	r3, r7, r2, r3
 80113c2:	9a05      	ldr	r2, [sp, #20]
 80113c4:	441a      	add	r2, r3
 80113c6:	9205      	str	r2, [sp, #20]
    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 80113c8:	686b      	ldr	r3, [r5, #4]
 80113ca:	885a      	ldrh	r2, [r3, #2]
 80113cc:	4252      	negs	r2, r2
 80113ce:	8819      	ldrh	r1, [r3, #0]
 80113d0:	4249      	negs	r1, r1
 80113d2:	b212      	sxth	r2, r2
 80113d4:	b209      	sxth	r1, r1
 80113d6:	a80e      	add	r0, sp, #56	; 0x38
 80113d8:	f00f fe84 	bl	80210e4 <lv_area_move>
    if(disp->driver->set_px_cb) {
 80113dc:	6833      	ldr	r3, [r6, #0]
 80113de:	69db      	ldr	r3, [r3, #28]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	f000 8154 	beq.w	801168e <lv_draw_sw_blend_basic+0x392>
        if(dsc->src_buf == NULL) {
 80113e6:	6863      	ldr	r3, [r4, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d067      	beq.n	80114bc <lv_draw_sw_blend_basic+0x1c0>
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 80113ec:	f894 a018 	ldrb.w	sl, [r4, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80113f0:	f7fb fcf0 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
 80113f4:	4681      	mov	r9, r0
 80113f6:	f8bd 703c 	ldrh.w	r7, [sp, #60]	; 0x3c
 80113fa:	3701      	adds	r7, #1
 80113fc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011400:	1aff      	subs	r7, r7, r3
    int32_t w = lv_area_get_width(dest_area);
 8011402:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011404:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011408:	3301      	adds	r3, #1
 801140a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801140e:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 8011410:	b21b      	sxth	r3, r3
 8011412:	461a      	mov	r2, r3
 8011414:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask == NULL) {
 8011416:	9b05      	ldr	r3, [sp, #20]
 8011418:	2b00      	cmp	r3, #0
 801141a:	f000 80ca 	beq.w	80115b2 <lv_draw_sw_blend_basic+0x2b6>
        for(y = 0; y < h; y++) {
 801141e:	2a00      	cmp	r2, #0
 8011420:	dd87      	ble.n	8011332 <lv_draw_sw_blend_basic+0x36>
            src_buf += src_stride;
 8011422:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8011426:	930a      	str	r3, [sp, #40]	; 0x28
        for(y = 0; y < h; y++) {
 8011428:	f04f 0b00 	mov.w	fp, #0
 801142c:	e128      	b.n	8011680 <lv_draw_sw_blend_basic+0x384>
        if(disp->driver->screen_transp == 0) {
 801142e:	7c13      	ldrb	r3, [r2, #16]
 8011430:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011434:	d112      	bne.n	801145c <lv_draw_sw_blend_basic+0x160>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 8011436:	6868      	ldr	r0, [r5, #4]
 8011438:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801143c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011440:	1a59      	subs	r1, r3, r1
 8011442:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8011446:	f9b0 0000 	ldrsh.w	r0, [r0]
 801144a:	1a1b      	subs	r3, r3, r0
 801144c:	9804      	ldr	r0, [sp, #16]
 801144e:	fb00 3301 	mla	r3, r0, r1, r3
 8011452:	9906      	ldr	r1, [sp, #24]
 8011454:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011458:	9306      	str	r3, [sp, #24]
 801145a:	e77a      	b.n	8011352 <lv_draw_sw_blend_basic+0x56>
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 801145c:	6868      	ldr	r0, [r5, #4]
 801145e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011462:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011466:	1a5b      	subs	r3, r3, r1
 8011468:	9904      	ldr	r1, [sp, #16]
 801146a:	fb01 f303 	mul.w	r3, r1, r3
 801146e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8011472:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8011476:	f9b0 0000 	ldrsh.w	r0, [r0]
 801147a:	1a09      	subs	r1, r1, r0
 801147c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011480:	440b      	add	r3, r1
 8011482:	9906      	ldr	r1, [sp, #24]
 8011484:	4419      	add	r1, r3
 8011486:	9106      	str	r1, [sp, #24]
            dest_buf = (lv_color_t *)dest_buf8;
 8011488:	e763      	b.n	8011352 <lv_draw_sw_blend_basic+0x56>
        src_stride = 0;
 801148a:	f04f 0b00 	mov.w	fp, #0
 801148e:	e77e      	b.n	801138e <lv_draw_sw_blend_basic+0x92>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 8011490:	6960      	ldr	r0, [r4, #20]
 8011492:	f00f fe0a 	bl	80210aa <lv_area_get_size>
            for(i = 0; i < mask_size; i++) {
 8011496:	1e01      	subs	r1, r0, #0
 8011498:	dd81      	ble.n	801139e <lv_draw_sw_blend_basic+0xa2>
 801149a:	9b05      	ldr	r3, [sp, #20]
 801149c:	3b01      	subs	r3, #1
 801149e:	4419      	add	r1, r3
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 80114a0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80114a4:	2a80      	cmp	r2, #128	; 0x80
 80114a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114aa:	bf98      	it	ls
 80114ac:	2200      	movls	r2, #0
 80114ae:	701a      	strb	r2, [r3, #0]
            for(i = 0; i < mask_size; i++) {
 80114b0:	428b      	cmp	r3, r1
 80114b2:	d1f5      	bne.n	80114a0 <lv_draw_sw_blend_basic+0x1a4>
 80114b4:	e773      	b.n	801139e <lv_draw_sw_blend_basic+0xa2>
        mask_stride = 0;
 80114b6:	2300      	movs	r3, #0
 80114b8:	9308      	str	r3, [sp, #32]
 80114ba:	e785      	b.n	80113c8 <lv_draw_sw_blend_basic+0xcc>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 80114bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80114c0:	f8b4 a008 	ldrh.w	sl, [r4, #8]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 80114c4:	f7fb fc86 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
 80114c8:	4680      	mov	r8, r0
    if(mask == NULL) {
 80114ca:	9b05      	ldr	r3, [sp, #20]
 80114cc:	b1a3      	cbz	r3, 80114f8 <lv_draw_sw_blend_basic+0x1fc>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80114ce:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80114d2:	3601      	adds	r6, #1
 80114d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80114d8:	1af6      	subs	r6, r6, r3
        int32_t w = lv_area_get_width(blend_area);
 80114da:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80114dc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80114e0:	3301      	adds	r3, #1
 80114e2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80114e6:	1a9b      	subs	r3, r3, r2
        int32_t h = lv_area_get_height(blend_area);
 80114e8:	b21b      	sxth	r3, r3
 80114ea:	9307      	str	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	bfc8      	it	gt
 80114f0:	f04f 0b00 	movgt.w	fp, #0
 80114f4:	dc57      	bgt.n	80115a6 <lv_draw_sw_blend_basic+0x2aa>
 80114f6:	e71c      	b.n	8011332 <lv_draw_sw_blend_basic+0x36>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 80114f8:	f9bd 703a 	ldrsh.w	r7, [sp, #58]	; 0x3a
 80114fc:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8011500:	429f      	cmp	r7, r3
 8011502:	f73f af16 	bgt.w	8011332 <lv_draw_sw_blend_basic+0x36>
 8011506:	9705      	str	r7, [sp, #20]
 8011508:	464f      	mov	r7, r9
 801150a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801150e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8011512:	e008      	b.n	8011526 <lv_draw_sw_blend_basic+0x22a>
 8011514:	9b05      	ldr	r3, [sp, #20]
 8011516:	3301      	adds	r3, #1
 8011518:	461a      	mov	r2, r3
 801151a:	9305      	str	r3, [sp, #20]
 801151c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8011520:	429a      	cmp	r2, r3
 8011522:	f73f af06 	bgt.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 8011526:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 801152a:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801152e:	429c      	cmp	r4, r3
 8011530:	dcf0      	bgt.n	8011514 <lv_draw_sw_blend_basic+0x218>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 8011532:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 8011536:	f8d8 0000 	ldr.w	r0, [r8]
 801153a:	9702      	str	r7, [sp, #8]
 801153c:	f8ad a004 	strh.w	sl, [sp, #4]
 8011540:	9600      	str	r6, [sp, #0]
 8011542:	69c5      	ldr	r5, [r0, #28]
 8011544:	b223      	sxth	r3, r4
 8011546:	464a      	mov	r2, r9
 8011548:	4659      	mov	r1, fp
 801154a:	47a8      	blx	r5
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 801154c:	3401      	adds	r4, #1
 801154e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8011552:	429c      	cmp	r4, r3
 8011554:	ddef      	ble.n	8011536 <lv_draw_sw_blend_basic+0x23a>
 8011556:	e7dd      	b.n	8011514 <lv_draw_sw_blend_basic+0x218>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8011558:	f8d8 0000 	ldr.w	r0, [r8]
 801155c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011560:	4423      	add	r3, r4
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 8011562:	fb02 f209 	mul.w	r2, r2, r9
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 8011566:	0a12      	lsrs	r2, r2, #8
 8011568:	9202      	str	r2, [sp, #8]
 801156a:	f8ad a004 	strh.w	sl, [sp, #4]
 801156e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011572:	445a      	add	r2, fp
 8011574:	b212      	sxth	r2, r2
 8011576:	9200      	str	r2, [sp, #0]
 8011578:	69c7      	ldr	r7, [r0, #28]
 801157a:	b21b      	sxth	r3, r3
 801157c:	9a04      	ldr	r2, [sp, #16]
 801157e:	9906      	ldr	r1, [sp, #24]
 8011580:	47b8      	blx	r7
            for(x = 0; x < w; x++) {
 8011582:	3401      	adds	r4, #1
 8011584:	42a6      	cmp	r6, r4
 8011586:	d004      	beq.n	8011592 <lv_draw_sw_blend_basic+0x296>
                if(mask[x]) {
 8011588:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801158c:	2a00      	cmp	r2, #0
 801158e:	d0f8      	beq.n	8011582 <lv_draw_sw_blend_basic+0x286>
 8011590:	e7e2      	b.n	8011558 <lv_draw_sw_blend_basic+0x25c>
            mask += mask_stide;
 8011592:	9b05      	ldr	r3, [sp, #20]
 8011594:	9a08      	ldr	r2, [sp, #32]
 8011596:	4413      	add	r3, r2
 8011598:	9305      	str	r3, [sp, #20]
        for(y = 0; y < h; y++) {
 801159a:	f10b 0b01 	add.w	fp, fp, #1
 801159e:	9b07      	ldr	r3, [sp, #28]
 80115a0:	455b      	cmp	r3, fp
 80115a2:	f43f aec6 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 80115a6:	2e00      	cmp	r6, #0
 80115a8:	ddf3      	ble.n	8011592 <lv_draw_sw_blend_basic+0x296>
 80115aa:	9b05      	ldr	r3, [sp, #20]
 80115ac:	1e5d      	subs	r5, r3, #1
 80115ae:	2400      	movs	r4, #0
 80115b0:	e7ea      	b.n	8011588 <lv_draw_sw_blend_basic+0x28c>
        for(y = 0; y < h; y++) {
 80115b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f77f aebc 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
            src_buf += src_stride;
 80115ba:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
        for(y = 0; y < h; y++) {
 80115be:	f04f 0800 	mov.w	r8, #0
 80115c2:	f8cd b014 	str.w	fp, [sp, #20]
 80115c6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80115ca:	e028      	b.n	801161e <lv_draw_sw_blend_basic+0x322>
 80115cc:	9d07      	ldr	r5, [sp, #28]
            for(x = 0; x < w; x++) {
 80115ce:	2400      	movs	r4, #0
 80115d0:	463b      	mov	r3, r7
 80115d2:	4657      	mov	r7, sl
 80115d4:	469a      	mov	sl, r3
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 80115d6:	f8d9 0000 	ldr.w	r0, [r9]
 80115da:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80115de:	4423      	add	r3, r4
 80115e0:	9702      	str	r7, [sp, #8]
 80115e2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80115e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80115ea:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80115ee:	4442      	add	r2, r8
 80115f0:	b212      	sxth	r2, r2
 80115f2:	9200      	str	r2, [sp, #0]
 80115f4:	69c6      	ldr	r6, [r0, #28]
 80115f6:	b21b      	sxth	r3, r3
 80115f8:	9a04      	ldr	r2, [sp, #16]
 80115fa:	4659      	mov	r1, fp
 80115fc:	47b0      	blx	r6
            for(x = 0; x < w; x++) {
 80115fe:	3401      	adds	r4, #1
 8011600:	45a2      	cmp	sl, r4
 8011602:	d1e8      	bne.n	80115d6 <lv_draw_sw_blend_basic+0x2da>
 8011604:	4653      	mov	r3, sl
 8011606:	46ba      	mov	sl, r7
 8011608:	461f      	mov	r7, r3
            src_buf += src_stride;
 801160a:	9b07      	ldr	r3, [sp, #28]
 801160c:	9a05      	ldr	r2, [sp, #20]
 801160e:	4413      	add	r3, r2
 8011610:	9307      	str	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 8011612:	f108 0801 	add.w	r8, r8, #1
 8011616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011618:	4543      	cmp	r3, r8
 801161a:	f43f ae8a 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 801161e:	2f00      	cmp	r7, #0
 8011620:	dcd4      	bgt.n	80115cc <lv_draw_sw_blend_basic+0x2d0>
 8011622:	e7f2      	b.n	801160a <lv_draw_sw_blend_basic+0x30e>
            for(x = 0; x < w; x++) {
 8011624:	3401      	adds	r4, #1
 8011626:	3502      	adds	r5, #2
 8011628:	42a7      	cmp	r7, r4
 801162a:	d01b      	beq.n	8011664 <lv_draw_sw_blend_basic+0x368>
                if(mask[x]) {
 801162c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8011630:	2a00      	cmp	r2, #0
 8011632:	d0f7      	beq.n	8011624 <lv_draw_sw_blend_basic+0x328>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8011634:	f8d9 0000 	ldr.w	r0, [r9]
 8011638:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801163c:	4423      	add	r3, r4
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 801163e:	fb02 f20a 	mul.w	r2, r2, sl
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 8011642:	0a12      	lsrs	r2, r2, #8
 8011644:	9202      	str	r2, [sp, #8]
 8011646:	882a      	ldrh	r2, [r5, #0]
 8011648:	f8ad 2004 	strh.w	r2, [sp, #4]
 801164c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011650:	445a      	add	r2, fp
 8011652:	b212      	sxth	r2, r2
 8011654:	9200      	str	r2, [sp, #0]
 8011656:	f8d0 801c 	ldr.w	r8, [r0, #28]
 801165a:	b21b      	sxth	r3, r3
 801165c:	9a04      	ldr	r2, [sp, #16]
 801165e:	9906      	ldr	r1, [sp, #24]
 8011660:	47c0      	blx	r8
 8011662:	e7df      	b.n	8011624 <lv_draw_sw_blend_basic+0x328>
            mask += mask_stride;
 8011664:	9b05      	ldr	r3, [sp, #20]
 8011666:	9a08      	ldr	r2, [sp, #32]
 8011668:	4413      	add	r3, r2
 801166a:	9305      	str	r3, [sp, #20]
            src_buf += src_stride;
 801166c:	9b07      	ldr	r3, [sp, #28]
 801166e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011670:	4413      	add	r3, r2
 8011672:	9307      	str	r3, [sp, #28]
        for(y = 0; y < h; y++) {
 8011674:	f10b 0b01 	add.w	fp, fp, #1
 8011678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801167a:	455b      	cmp	r3, fp
 801167c:	f43f ae59 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8011680:	2f00      	cmp	r7, #0
 8011682:	ddef      	ble.n	8011664 <lv_draw_sw_blend_basic+0x368>
 8011684:	9b05      	ldr	r3, [sp, #20]
 8011686:	1e5e      	subs	r6, r3, #1
 8011688:	9d07      	ldr	r5, [sp, #28]
 801168a:	2400      	movs	r4, #0
 801168c:	e7ce      	b.n	801162c <lv_draw_sw_blend_basic+0x330>
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 801168e:	7e66      	ldrb	r6, [r4, #25]
 8011690:	2e00      	cmp	r6, #0
 8011692:	f040 83de 	bne.w	8011e52 <lv_draw_sw_blend_basic+0xb56>
        if(dsc->src_buf == NULL) {
 8011696:	6863      	ldr	r3, [r4, #4]
 8011698:	b39b      	cbz	r3, 8011702 <lv_draw_sw_blend_basic+0x406>
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 801169a:	f894 c018 	ldrb.w	ip, [r4, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801169e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80116a2:	3501      	adds	r5, #1
 80116a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80116a8:	1aed      	subs	r5, r5, r3
 80116aa:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80116ac:	f8bd a03e 	ldrh.w	sl, [sp, #62]	; 0x3e
 80116b0:	f10a 0a01 	add.w	sl, sl, #1
 80116b4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80116b8:	ebaa 0a03 	sub.w	sl, sl, r3
    int32_t h = lv_area_get_height(dest_area);
 80116bc:	fa0f fa8a 	sxth.w	sl, sl
    if(mask == NULL) {
 80116c0:	9b05      	ldr	r3, [sp, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	f000 820b 	beq.w	8011ade <lv_draw_sw_blend_basic+0x7e2>
        if(opa > LV_OPA_MAX) {
 80116c8:	f1bc 0ffd 	cmp.w	ip, #253	; 0xfd
 80116cc:	f200 825c 	bhi.w	8011b88 <lv_draw_sw_blend_basic+0x88c>
            for(y = 0; y < h; y++) {
 80116d0:	f1ba 0f00 	cmp.w	sl, #0
 80116d4:	f77f ae2d 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 80116d8:	9b04      	ldr	r3, [sp, #16]
 80116da:	ea4f 0943 	mov.w	r9, r3, lsl #1
                src_buf += src_stride;
 80116de:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80116e2:	9b06      	ldr	r3, [sp, #24]
 80116e4:	eb03 0e45 	add.w	lr, r3, r5, lsl #1
            for(y = 0; y < h; y++) {
 80116e8:	f04f 0800 	mov.w	r8, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80116ec:	4fc2      	ldr	r7, [pc, #776]	; (80119f8 <lv_draw_sw_blend_basic+0x6fc>)
 80116ee:	9e05      	ldr	r6, [sp, #20]
 80116f0:	9504      	str	r5, [sp, #16]
 80116f2:	f8cd a014 	str.w	sl, [sp, #20]
 80116f6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80116fa:	f8cd b018 	str.w	fp, [sp, #24]
 80116fe:	469b      	mov	fp, r3
 8011700:	e3a0      	b.n	8011e44 <lv_draw_sw_blend_basic+0xb48>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 8011702:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011706:	8924      	ldrh	r4, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011708:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801170c:	3501      	adds	r5, #1
 801170e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011712:	1aed      	subs	r5, r5, r3
 8011714:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011716:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801171a:	3301      	adds	r3, #1
 801171c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011720:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 8011722:	b21b      	sxth	r3, r3
 8011724:	9307      	str	r3, [sp, #28]
    if(mask == NULL) {
 8011726:	9b05      	ldr	r3, [sp, #20]
 8011728:	b1f3      	cbz	r3, 8011768 <lv_draw_sw_blend_basic+0x46c>
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 801172a:	0422      	lsls	r2, r4, #16
        if(opa >= LV_OPA_MAX) {
 801172c:	f1bb 0ffc 	cmp.w	fp, #252	; 0xfc
 8011730:	f240 819b 	bls.w	8011a6a <lv_draw_sw_blend_basic+0x76e>
            int32_t x_end4 = w - 4;
 8011734:	1f28      	subs	r0, r5, #4
            for(y = 0; y < h; y++) {
 8011736:	9b07      	ldr	r3, [sp, #28]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f77f adfa 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 801173e:	18a6      	adds	r6, r4, r2
                dest_buf += (dest_stride - w);
 8011740:	9b04      	ldr	r3, [sp, #16]
 8011742:	eba3 0b05 	sub.w	fp, r3, r5
 8011746:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            for(y = 0; y < h; y++) {
 801174a:	f04f 0a00 	mov.w	sl, #0
 801174e:	4faa      	ldr	r7, [pc, #680]	; (80119f8 <lv_draw_sw_blend_basic+0x6fc>)
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011750:	4322      	orrs	r2, r4
 8011752:	ea02 0c07 	and.w	ip, r2, r7
                mask += (mask_stride - w);
 8011756:	9b08      	ldr	r3, [sp, #32]
 8011758:	1b5b      	subs	r3, r3, r5
 801175a:	9304      	str	r3, [sp, #16]
 801175c:	f8dd e014 	ldr.w	lr, [sp, #20]
 8011760:	9a06      	ldr	r2, [sp, #24]
 8011762:	f8cd b014 	str.w	fp, [sp, #20]
 8011766:	e172      	b.n	8011a4e <lv_draw_sw_blend_basic+0x752>
        if(opa >= LV_OPA_MAX) {
 8011768:	f1bb 0ffc 	cmp.w	fp, #252	; 0xfc
 801176c:	d912      	bls.n	8011794 <lv_draw_sw_blend_basic+0x498>
            for(y = 0; y < h; y++) {
 801176e:	9b07      	ldr	r3, [sp, #28]
 8011770:	2b00      	cmp	r3, #0
 8011772:	f77f adde 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 8011776:	9a04      	ldr	r2, [sp, #16]
 8011778:	0057      	lsls	r7, r2, #1
            for(y = 0; y < h; y++) {
 801177a:	4699      	mov	r9, r3
 801177c:	f8dd 8018 	ldr.w	r8, [sp, #24]
                lv_color_fill(dest_buf, color, w);
 8011780:	462a      	mov	r2, r5
 8011782:	4621      	mov	r1, r4
 8011784:	4640      	mov	r0, r8
 8011786:	f00f ff4b 	bl	8021620 <lv_color_fill>
                dest_buf += dest_stride;
 801178a:	44b8      	add	r8, r7
            for(y = 0; y < h; y++) {
 801178c:	3601      	adds	r6, #1
 801178e:	45b1      	cmp	r9, r6
 8011790:	d1f6      	bne.n	8011780 <lv_draw_sw_blend_basic+0x484>
 8011792:	e5ce      	b.n	8011332 <lv_draw_sw_blend_basic+0x36>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011794:	f10b 0904 	add.w	r9, fp, #4
 8011798:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801179c:	ea44 4304 	orr.w	r3, r4, r4, lsl #16
 80117a0:	4995      	ldr	r1, [pc, #596]	; (80119f8 <lv_draw_sw_blend_basic+0x6fc>)
 80117a2:	400b      	ands	r3, r1
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80117a4:	fb09 f303 	mul.w	r3, r9, r3
 80117a8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
    return ret;
 80117ac:	f001 061f 	and.w	r6, r1, #31
 80117b0:	0d48      	lsrs	r0, r1, #21
 80117b2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
            opa = opa << 3;
 80117b6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80117ba:	fa5f fc89 	uxtb.w	ip, r9
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 80117be:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80117c2:	ea4f 2ed4 	mov.w	lr, r4, lsr #11
 80117c6:	fb0e fe09 	mul.w	lr, lr, r9
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 80117ca:	f3c4 1845 	ubfx	r8, r4, #5, #6
 80117ce:	fb08 f809 	mul.w	r8, r8, r9
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 80117d2:	f004 041f 	and.w	r4, r4, #31
 80117d6:	fb04 f909 	mul.w	r9, r4, r9
            lv_opa_t opa_inv = 255 - opa;
 80117da:	f08c 0cff 	eor.w	ip, ip, #255	; 0xff
            for(y = 0; y < h; y++) {
 80117de:	9b07      	ldr	r3, [sp, #28]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f77f ada6 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 80117e6:	9b04      	ldr	r3, [sp, #16]
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	9304      	str	r3, [sp, #16]
 80117ec:	9b06      	ldr	r3, [sp, #24]
 80117ee:	eb03 0a45 	add.w	sl, r3, r5, lsl #1
 80117f2:	2700      	movs	r7, #0
            for(y = 0; y < h; y++) {
 80117f4:	46bb      	mov	fp, r7
 80117f6:	e040      	b.n	801187a <lv_draw_sw_blend_basic+0x57e>
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 80117f8:	785a      	ldrb	r2, [r3, #1]
 80117fa:	08d2      	lsrs	r2, r2, #3
 80117fc:	fb0c e202 	mla	r2, ip, r2, lr
 8011800:	eb02 2102 	add.w	r1, r2, r2, lsl #8
 8011804:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8011808:	f3c2 51c4 	ubfx	r1, r2, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 801180c:	881a      	ldrh	r2, [r3, #0]
 801180e:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8011812:	fb0c 8202 	mla	r2, ip, r2, r8
 8011816:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 801181a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 801181e:	f3c2 50c5 	ubfx	r0, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8011822:	781a      	ldrb	r2, [r3, #0]
 8011824:	f002 021f 	and.w	r2, r2, #31
 8011828:	fb0c 9202 	mla	r2, ip, r2, r9
 801182c:	eb02 2602 	add.w	r6, r2, r2, lsl #8
 8011830:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
 8011834:	f3c2 56c4 	ubfx	r6, r2, #23, #5
                    dest_buf[x] = last_res_color;
 8011838:	781a      	ldrb	r2, [r3, #0]
 801183a:	f366 0204 	bfi	r2, r6, #0, #5
 801183e:	701a      	strb	r2, [r3, #0]
 8011840:	881a      	ldrh	r2, [r3, #0]
 8011842:	f360 124a 	bfi	r2, r0, #5, #6
 8011846:	801a      	strh	r2, [r3, #0]
 8011848:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801184c:	f361 02c7 	bfi	r2, r1, #3, #5
 8011850:	705a      	strb	r2, [r3, #1]
                for(x = 0; x < w; x++) {
 8011852:	45a2      	cmp	sl, r4
 8011854:	d006      	beq.n	8011864 <lv_draw_sw_blend_basic+0x568>
                    if(last_dest_color.full != dest_buf[x].full) {
 8011856:	4623      	mov	r3, r4
 8011858:	463a      	mov	r2, r7
 801185a:	f834 7b02 	ldrh.w	r7, [r4], #2
 801185e:	4297      	cmp	r7, r2
 8011860:	d0ea      	beq.n	8011838 <lv_draw_sw_blend_basic+0x53c>
 8011862:	e7c9      	b.n	80117f8 <lv_draw_sw_blend_basic+0x4fc>
                dest_buf += dest_stride;
 8011864:	9b06      	ldr	r3, [sp, #24]
 8011866:	9a04      	ldr	r2, [sp, #16]
 8011868:	4413      	add	r3, r2
 801186a:	9306      	str	r3, [sp, #24]
            for(y = 0; y < h; y++) {
 801186c:	f10b 0b01 	add.w	fp, fp, #1
 8011870:	4492      	add	sl, r2
 8011872:	9b07      	ldr	r3, [sp, #28]
 8011874:	455b      	cmp	r3, fp
 8011876:	f43f ad5c 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 801187a:	2d00      	cmp	r5, #0
 801187c:	ddf2      	ble.n	8011864 <lv_draw_sw_blend_basic+0x568>
 801187e:	9c06      	ldr	r4, [sp, #24]
 8011880:	e7e9      	b.n	8011856 <lv_draw_sw_blend_basic+0x55a>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011882:	8813      	ldrh	r3, [r2, #0]
 8011884:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011888:	403b      	ands	r3, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801188a:	ebac 0903 	sub.w	r9, ip, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801188e:	f10e 0e04 	add.w	lr, lr, #4
 8011892:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011896:	fb0e fe09 	mul.w	lr, lr, r9
 801189a:	eb03 135e 	add.w	r3, r3, lr, lsr #5
 801189e:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 80118a0:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
                    FILL_NORMAL_MASK_PX(color)
 80118a4:	8013      	strh	r3, [r2, #0]
 80118a6:	46c6      	mov	lr, r8
 80118a8:	3202      	adds	r2, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80118aa:	3101      	adds	r1, #1
 80118ac:	45c3      	cmp	fp, r8
 80118ae:	f000 8454 	beq.w	801215a <lv_draw_sw_blend_basic+0xe5e>
 80118b2:	f018 0f03 	tst.w	r8, #3
 80118b6:	f000 844c 	beq.w	8012152 <lv_draw_sw_blend_basic+0xe56>
                    FILL_NORMAL_MASK_PX(color)
 80118ba:	f818 eb01 	ldrb.w	lr, [r8], #1
 80118be:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80118c2:	d1de      	bne.n	8011882 <lv_draw_sw_blend_basic+0x586>
 80118c4:	8014      	strh	r4, [r2, #0]
 80118c6:	e7ee      	b.n	80118a6 <lv_draw_sw_blend_basic+0x5aa>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 80118c8:	f013 0f03 	tst.w	r3, #3
 80118cc:	d07a      	beq.n	80119c4 <lv_draw_sw_blend_basic+0x6c8>
                            *(dest_buf + 0) = color;
 80118ce:	f823 4c08 	strh.w	r4, [r3, #-8]
                            *d = c32;
 80118d2:	f843 6c06 	str.w	r6, [r3, #-6]
                            *(dest_buf + 3) = color;
 80118d6:	f823 4c02 	strh.w	r4, [r3, #-2]
                        dest_buf += 4;
 80118da:	461a      	mov	r2, r3
                        mask += 4;
 80118dc:	46c6      	mov	lr, r8
                for(; x <= x_end4; x += 4) {
 80118de:	3104      	adds	r1, #4
 80118e0:	3308      	adds	r3, #8
 80118e2:	4288      	cmp	r0, r1
 80118e4:	f2c0 8082 	blt.w	80119ec <lv_draw_sw_blend_basic+0x6f0>
                    uint32_t mask32 = *((uint32_t *)mask);
 80118e8:	f858 2b04 	ldr.w	r2, [r8], #4
                    if(mask32 == 0xFFFFFFFF) {
 80118ec:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80118f0:	d0ea      	beq.n	80118c8 <lv_draw_sw_blend_basic+0x5cc>
                    else if(mask32) {
 80118f2:	2a00      	cmp	r2, #0
 80118f4:	d077      	beq.n	80119e6 <lv_draw_sw_blend_basic+0x6ea>
                        FILL_NORMAL_MASK_PX(color)
 80118f6:	46c6      	mov	lr, r8
 80118f8:	f818 9c04 	ldrb.w	r9, [r8, #-4]
 80118fc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011900:	d065      	beq.n	80119ce <lv_draw_sw_blend_basic+0x6d2>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011902:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8011906:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801190a:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801190c:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011910:	f109 0904 	add.w	r9, r9, #4
 8011914:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011918:	fb09 f90b 	mul.w	r9, r9, fp
 801191c:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 8011920:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011922:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 8011926:	f823 2c08 	strh.w	r2, [r3, #-8]
                        FILL_NORMAL_MASK_PX(color)
 801192a:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 801192e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011932:	d04f      	beq.n	80119d4 <lv_draw_sw_blend_basic+0x6d8>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011934:	f833 2c06 	ldrh.w	r2, [r3, #-6]
 8011938:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801193c:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801193e:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011942:	f109 0904 	add.w	r9, r9, #4
 8011946:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801194a:	fb09 f90b 	mul.w	r9, r9, fp
 801194e:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 8011952:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011954:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 8011958:	f823 2c06 	strh.w	r2, [r3, #-6]
                        FILL_NORMAL_MASK_PX(color)
 801195c:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8011960:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011964:	d039      	beq.n	80119da <lv_draw_sw_blend_basic+0x6de>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011966:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801196a:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801196e:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011970:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011974:	f109 0904 	add.w	r9, r9, #4
 8011978:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801197c:	fb09 f90b 	mul.w	r9, r9, fp
 8011980:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 8011984:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011986:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 801198a:	f823 2c04 	strh.w	r2, [r3, #-4]
                        FILL_NORMAL_MASK_PX(color)
 801198e:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8011992:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011996:	d023      	beq.n	80119e0 <lv_draw_sw_blend_basic+0x6e4>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011998:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 801199c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 80119a0:	403a      	ands	r2, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80119a2:	ebac 0b02 	sub.w	fp, ip, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80119a6:	f109 0904 	add.w	r9, r9, #4
 80119aa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80119ae:	fb09 f90b 	mul.w	r9, r9, fp
 80119b2:	eb02 1259 	add.w	r2, r2, r9, lsr #5
 80119b6:	403a      	ands	r2, r7
    ret.full = (uint16_t)((result >> 16) | result);
 80119b8:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 80119bc:	f823 2c02 	strh.w	r2, [r3, #-2]
 80119c0:	461a      	mov	r2, r3
 80119c2:	e78c      	b.n	80118de <lv_draw_sw_blend_basic+0x5e2>
                            *d = c32;
 80119c4:	f843 6c08 	str.w	r6, [r3, #-8]
                            *(d + 1) = c32;
 80119c8:	f843 6c04 	str.w	r6, [r3, #-4]
 80119cc:	e785      	b.n	80118da <lv_draw_sw_blend_basic+0x5de>
                        FILL_NORMAL_MASK_PX(color)
 80119ce:	f823 4c08 	strh.w	r4, [r3, #-8]
 80119d2:	e7aa      	b.n	801192a <lv_draw_sw_blend_basic+0x62e>
                        FILL_NORMAL_MASK_PX(color)
 80119d4:	f823 4c06 	strh.w	r4, [r3, #-6]
 80119d8:	e7c0      	b.n	801195c <lv_draw_sw_blend_basic+0x660>
                        FILL_NORMAL_MASK_PX(color)
 80119da:	f823 4c04 	strh.w	r4, [r3, #-4]
 80119de:	e7d6      	b.n	801198e <lv_draw_sw_blend_basic+0x692>
                        FILL_NORMAL_MASK_PX(color)
 80119e0:	f823 4c02 	strh.w	r4, [r3, #-2]
 80119e4:	e7ec      	b.n	80119c0 <lv_draw_sw_blend_basic+0x6c4>
                        mask += 4;
 80119e6:	46c6      	mov	lr, r8
                        dest_buf += 4;
 80119e8:	461a      	mov	r2, r3
 80119ea:	e778      	b.n	80118de <lv_draw_sw_blend_basic+0x5e2>
                for(; x < w ; x++) {
 80119ec:	428d      	cmp	r5, r1
 80119ee:	dd24      	ble.n	8011a3a <lv_draw_sw_blend_basic+0x73e>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 80119f0:	46f0      	mov	r8, lr
 80119f2:	eba1 010e 	sub.w	r1, r1, lr
 80119f6:	e019      	b.n	8011a2c <lv_draw_sw_blend_basic+0x730>
 80119f8:	07e0f81f 	.word	0x07e0f81f
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80119fc:	8813      	ldrh	r3, [r2, #0]
 80119fe:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011a02:	403b      	ands	r3, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011a04:	ebac 0903 	sub.w	r9, ip, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011a08:	f10e 0e04 	add.w	lr, lr, #4
 8011a0c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011a10:	fb0e fe09 	mul.w	lr, lr, r9
 8011a14:	eb03 135e 	add.w	r3, r3, lr, lsr #5
 8011a18:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011a1a:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
                    FILL_NORMAL_MASK_PX(color)
 8011a1e:	8013      	strh	r3, [r2, #0]
 8011a20:	46c6      	mov	lr, r8
 8011a22:	3202      	adds	r2, #2
                for(; x < w ; x++) {
 8011a24:	eb01 0308 	add.w	r3, r1, r8
 8011a28:	429d      	cmp	r5, r3
 8011a2a:	dd06      	ble.n	8011a3a <lv_draw_sw_blend_basic+0x73e>
                    FILL_NORMAL_MASK_PX(color)
 8011a2c:	f818 eb01 	ldrb.w	lr, [r8], #1
 8011a30:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8011a34:	d1e2      	bne.n	80119fc <lv_draw_sw_blend_basic+0x700>
 8011a36:	8014      	strh	r4, [r2, #0]
 8011a38:	e7f2      	b.n	8011a20 <lv_draw_sw_blend_basic+0x724>
                dest_buf += (dest_stride - w);
 8011a3a:	9b05      	ldr	r3, [sp, #20]
 8011a3c:	441a      	add	r2, r3
                mask += (mask_stride - w);
 8011a3e:	9b04      	ldr	r3, [sp, #16]
 8011a40:	449e      	add	lr, r3
            for(y = 0; y < h; y++) {
 8011a42:	f10a 0a01 	add.w	sl, sl, #1
 8011a46:	9b07      	ldr	r3, [sp, #28]
 8011a48:	4553      	cmp	r3, sl
 8011a4a:	f43f ac72 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8011a4e:	2d00      	cmp	r5, #0
 8011a50:	f340 8382 	ble.w	8012158 <lv_draw_sw_blend_basic+0xe5c>
 8011a54:	46f0      	mov	r8, lr
 8011a56:	f01e 0f03 	tst.w	lr, #3
 8011a5a:	bf08      	it	eq
 8011a5c:	2100      	moveq	r1, #0
 8011a5e:	f000 8378 	beq.w	8012152 <lv_draw_sw_blend_basic+0xe56>
 8011a62:	eb0e 0b05 	add.w	fp, lr, r5
 8011a66:	2100      	movs	r1, #0
 8011a68:	e727      	b.n	80118ba <lv_draw_sw_blend_basic+0x5be>
            last_dest_color.full = dest_buf[0].full;
 8011a6a:	9906      	ldr	r1, [sp, #24]
 8011a6c:	f8b1 e000 	ldrh.w	lr, [r1]
            for(y = 0; y < h; y++) {
 8011a70:	9b07      	ldr	r3, [sp, #28]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f77f ac5d 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 8011a78:	9b04      	ldr	r3, [sp, #16]
 8011a7a:	005b      	lsls	r3, r3, #1
 8011a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8011a7e:	eb01 0745 	add.w	r7, r1, r5, lsl #1
            last_res_color.full = dest_buf[0].full;
 8011a82:	4673      	mov	r3, lr
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 8011a84:	46b4      	mov	ip, r6
            for(y = 0; y < h; y++) {
 8011a86:	f04f 0a00 	mov.w	sl, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011a8a:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8011da4 <lv_draw_sw_blend_basic+0xaa8>
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011a8e:	4322      	orrs	r2, r4
 8011a90:	ea02 0209 	and.w	r2, r2, r9
 8011a94:	9204      	str	r2, [sp, #16]
 8011a96:	9409      	str	r4, [sp, #36]	; 0x24
 8011a98:	9c05      	ldr	r4, [sp, #20]
 8011a9a:	e01b      	b.n	8011ad4 <lv_draw_sw_blend_basic+0x7d8>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 8011a9c:	f8b2 8000 	ldrh.w	r8, [r2]
 8011aa0:	45f0      	cmp	r8, lr
 8011aa2:	f000 837c 	beq.w	801219e <lv_draw_sw_blend_basic+0xea2>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 8011aa6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8011aaa:	f040 8361 	bne.w	8012170 <lv_draw_sw_blend_basic+0xe74>
 8011aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ab0:	e372      	b.n	8012198 <lv_draw_sw_blend_basic+0xe9c>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 8011ab2:	46dc      	mov	ip, fp
 8011ab4:	e35c      	b.n	8012170 <lv_draw_sw_blend_basic+0xe74>
                    mask++;
 8011ab6:	442c      	add	r4, r5
                dest_buf += dest_stride;
 8011ab8:	9a06      	ldr	r2, [sp, #24]
 8011aba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011abc:	440a      	add	r2, r1
 8011abe:	9206      	str	r2, [sp, #24]
                mask += (mask_stride - w);
 8011ac0:	9a08      	ldr	r2, [sp, #32]
 8011ac2:	1b52      	subs	r2, r2, r5
 8011ac4:	4414      	add	r4, r2
            for(y = 0; y < h; y++) {
 8011ac6:	f10a 0a01 	add.w	sl, sl, #1
 8011aca:	440f      	add	r7, r1
 8011acc:	9a07      	ldr	r2, [sp, #28]
 8011ace:	4552      	cmp	r2, sl
 8011ad0:	f43f ac2f 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 8011ad4:	2d00      	cmp	r5, #0
 8011ad6:	ddef      	ble.n	8011ab8 <lv_draw_sw_blend_basic+0x7bc>
 8011ad8:	1e60      	subs	r0, r4, #1
 8011ada:	9a06      	ldr	r2, [sp, #24]
 8011adc:	e364      	b.n	80121a8 <lv_draw_sw_blend_basic+0xeac>
        if(opa >= LV_OPA_MAX) {
 8011ade:	f1bc 0ffc 	cmp.w	ip, #252	; 0xfc
 8011ae2:	d815      	bhi.n	8011b10 <lv_draw_sw_blend_basic+0x814>
            for(y = 0; y < h; y++) {
 8011ae4:	f1ba 0f00 	cmp.w	sl, #0
 8011ae8:	f77f ac23 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011aec:	f10c 0704 	add.w	r7, ip, #4
 8011af0:	08ff      	lsrs	r7, r7, #3
                dest_buf += dest_stride;
 8011af2:	9b04      	ldr	r3, [sp, #16]
 8011af4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
                src_buf += src_stride;
 8011af8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011afc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8011b00:	eb08 0645 	add.w	r6, r8, r5, lsl #1
            for(y = 0; y < h; y++) {
 8011b04:	f04f 0c00 	mov.w	ip, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011b08:	4ca6      	ldr	r4, [pc, #664]	; (8011da4 <lv_draw_sw_blend_basic+0xaa8>)
 8011b0a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8011b0e:	e020      	b.n	8011b52 <lv_draw_sw_blend_basic+0x856>
            for(y = 0; y < h; y++) {
 8011b10:	f1ba 0f00 	cmp.w	sl, #0
 8011b14:	f77f ac0d 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8011b18:	006d      	lsls	r5, r5, #1
                dest_buf += dest_stride;
 8011b1a:	9b04      	ldr	r3, [sp, #16]
 8011b1c:	005e      	lsls	r6, r3, #1
                src_buf += src_stride;
 8011b1e:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            for(y = 0; y < h; y++) {
 8011b22:	2400      	movs	r4, #0
 8011b24:	9f07      	ldr	r7, [sp, #28]
 8011b26:	f8dd 8018 	ldr.w	r8, [sp, #24]
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 8011b2a:	462a      	mov	r2, r5
 8011b2c:	4639      	mov	r1, r7
 8011b2e:	4640      	mov	r0, r8
 8011b30:	f010 fae6 	bl	8022100 <lv_memcpy>
                dest_buf += dest_stride;
 8011b34:	44b0      	add	r8, r6
                src_buf += src_stride;
 8011b36:	445f      	add	r7, fp
            for(y = 0; y < h; y++) {
 8011b38:	3401      	adds	r4, #1
 8011b3a:	45a2      	cmp	sl, r4
 8011b3c:	d1f5      	bne.n	8011b2a <lv_draw_sw_blend_basic+0x82e>
 8011b3e:	f7ff bbf8 	b.w	8011332 <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 8011b42:	44f1      	add	r9, lr
                src_buf += src_stride;
 8011b44:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
 8011b46:	f10c 0c01 	add.w	ip, ip, #1
 8011b4a:	445e      	add	r6, fp
 8011b4c:	45e2      	cmp	sl, ip
 8011b4e:	f43f abf0 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 8011b52:	2d00      	cmp	r5, #0
 8011b54:	ddf5      	ble.n	8011b42 <lv_draw_sw_blend_basic+0x846>
 8011b56:	4640      	mov	r0, r8
 8011b58:	f1a9 0102 	sub.w	r1, r9, #2
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 8011b5c:	f830 2b02 	ldrh.w	r2, [r0], #2
 8011b60:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8011b64:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011b68:	4023      	ands	r3, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011b6a:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8011b6e:	4022      	ands	r2, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011b70:	1ad2      	subs	r2, r2, r3
 8011b72:	fb07 f202 	mul.w	r2, r7, r2
 8011b76:	eb03 1352 	add.w	r3, r3, r2, lsr #5
 8011b7a:	4023      	ands	r3, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011b7c:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
 8011b80:	800b      	strh	r3, [r1, #0]
                for(x = 0; x < w; x++) {
 8011b82:	42b0      	cmp	r0, r6
 8011b84:	d1ea      	bne.n	8011b5c <lv_draw_sw_blend_basic+0x860>
 8011b86:	e7dc      	b.n	8011b42 <lv_draw_sw_blend_basic+0x846>
            int32_t x_end4 = w - 4;
 8011b88:	f1a5 0804 	sub.w	r8, r5, #4
            for(y = 0; y < h; y++) {
 8011b8c:	f1ba 0f00 	cmp.w	sl, #0
 8011b90:	f77f abcf 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
                dest_buf += dest_stride;
 8011b94:	9b04      	ldr	r3, [sp, #16]
 8011b96:	005b      	lsls	r3, r3, #1
 8011b98:	9304      	str	r3, [sp, #16]
                src_buf += src_stride;
 8011b9a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
            for(y = 0; y < h; y++) {
 8011b9e:	f04f 0900 	mov.w	r9, #0
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011ba2:	4c80      	ldr	r4, [pc, #512]	; (8011da4 <lv_draw_sw_blend_basic+0xaa8>)
 8011ba4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011ba8:	f8dd e018 	ldr.w	lr, [sp, #24]
 8011bac:	f8cd a018 	str.w	sl, [sp, #24]
 8011bb0:	f8cd b01c 	str.w	fp, [sp, #28]
 8011bb4:	e106      	b.n	8011dc4 <lv_draw_sw_blend_basic+0xac8>
 8011bb6:	883a      	ldrh	r2, [r7, #0]
 8011bb8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8011bbc:	4022      	ands	r2, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011bbe:	f8ba 6000 	ldrh.w	r6, [sl]
 8011bc2:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8011bc6:	4026      	ands	r6, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011bc8:	1ab6      	subs	r6, r6, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011bca:	3104      	adds	r1, #4
 8011bcc:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011bce:	fb06 f101 	mul.w	r1, r6, r1
 8011bd2:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8011bd6:	4022      	ands	r2, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011bd8:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
                    MAP_NORMAL_MASK_PX(x)
 8011bdc:	803a      	strh	r2, [r7, #0]
 8011bde:	4606      	mov	r6, r0
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8011be0:	3301      	adds	r3, #1
 8011be2:	429d      	cmp	r5, r3
 8011be4:	f000 82f0 	beq.w	80121c8 <lv_draw_sw_blend_basic+0xecc>
 8011be8:	f10a 0a02 	add.w	sl, sl, #2
 8011bec:	3702      	adds	r7, #2
 8011bee:	f010 0f03 	tst.w	r0, #3
 8011bf2:	f000 80f5 	beq.w	8011de0 <lv_draw_sw_blend_basic+0xae4>
                    MAP_NORMAL_MASK_PX(x)
 8011bf6:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011bfa:	2900      	cmp	r1, #0
 8011bfc:	d0ef      	beq.n	8011bde <lv_draw_sw_blend_basic+0x8e2>
 8011bfe:	29ff      	cmp	r1, #255	; 0xff
 8011c00:	d1d9      	bne.n	8011bb6 <lv_draw_sw_blend_basic+0x8ba>
 8011c02:	f8ba 2000 	ldrh.w	r2, [sl]
 8011c06:	803a      	strh	r2, [r7, #0]
 8011c08:	e7e9      	b.n	8011bde <lv_draw_sw_blend_basic+0x8e2>
                            dest_buf[x] = src_buf[x];
 8011c0a:	8806      	ldrh	r6, [r0, #0]
 8011c0c:	8016      	strh	r6, [r2, #0]
                            dest_buf[x + 1] = src_buf[x + 1];
 8011c0e:	8846      	ldrh	r6, [r0, #2]
 8011c10:	8056      	strh	r6, [r2, #2]
                            dest_buf[x + 2] = src_buf[x + 2];
 8011c12:	8886      	ldrh	r6, [r0, #4]
 8011c14:	8096      	strh	r6, [r2, #4]
                            dest_buf[x + 3] = src_buf[x + 3];
 8011c16:	88c6      	ldrh	r6, [r0, #6]
 8011c18:	80d6      	strh	r6, [r2, #6]
                    mask32++;
 8011c1a:	460e      	mov	r6, r1
                for(; x < x_end4; x += 4) {
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	3008      	adds	r0, #8
 8011c20:	3208      	adds	r2, #8
 8011c22:	4598      	cmp	r8, r3
 8011c24:	f340 8091 	ble.w	8011d4a <lv_draw_sw_blend_basic+0xa4e>
                    if(*mask32) {
 8011c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8011c2c:	2e00      	cmp	r6, #0
 8011c2e:	d0f4      	beq.n	8011c1a <lv_draw_sw_blend_basic+0x91e>
                        if((*mask32) == 0xFFFFFFFF) {
 8011c30:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8011c34:	d0e9      	beq.n	8011c0a <lv_draw_sw_blend_basic+0x90e>
                            MAP_NORMAL_MASK_PX(x)
 8011c36:	460f      	mov	r7, r1
 8011c38:	f811 ac04 	ldrb.w	sl, [r1, #-4]
 8011c3c:	f1ba 0f00 	cmp.w	sl, #0
 8011c40:	d01a      	beq.n	8011c78 <lv_draw_sw_blend_basic+0x97c>
 8011c42:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8011c46:	d074      	beq.n	8011d32 <lv_draw_sw_blend_basic+0xa36>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011c48:	8816      	ldrh	r6, [r2, #0]
 8011c4a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8011c4e:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011c50:	f8b0 b000 	ldrh.w	fp, [r0]
 8011c54:	ea4b 4b0b 	orr.w	fp, fp, fp, lsl #16
 8011c58:	ea0b 0b04 	and.w	fp, fp, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011c5c:	ebab 0b06 	sub.w	fp, fp, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011c60:	f10a 0a04 	add.w	sl, sl, #4
 8011c64:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011c68:	fb0a fa0b 	mul.w	sl, sl, fp
 8011c6c:	eb06 165a 	add.w	r6, r6, sl, lsr #5
 8011c70:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011c72:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 8011c76:	8016      	strh	r6, [r2, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
 8011c78:	f817 ac03 	ldrb.w	sl, [r7, #-3]
 8011c7c:	f1ba 0f00 	cmp.w	sl, #0
 8011c80:	d01a      	beq.n	8011cb8 <lv_draw_sw_blend_basic+0x9bc>
 8011c82:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8011c86:	d057      	beq.n	8011d38 <lv_draw_sw_blend_basic+0xa3c>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011c88:	8856      	ldrh	r6, [r2, #2]
 8011c8a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8011c8e:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011c90:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 8011c94:	ea4b 4b0b 	orr.w	fp, fp, fp, lsl #16
 8011c98:	ea0b 0b04 	and.w	fp, fp, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011c9c:	ebab 0b06 	sub.w	fp, fp, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011ca0:	f10a 0a04 	add.w	sl, sl, #4
 8011ca4:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011ca8:	fb0a fa0b 	mul.w	sl, sl, fp
 8011cac:	eb06 165a 	add.w	r6, r6, sl, lsr #5
 8011cb0:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011cb2:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 8011cb6:	8056      	strh	r6, [r2, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
 8011cb8:	f817 ac02 	ldrb.w	sl, [r7, #-2]
 8011cbc:	f1ba 0f00 	cmp.w	sl, #0
 8011cc0:	d01a      	beq.n	8011cf8 <lv_draw_sw_blend_basic+0x9fc>
 8011cc2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8011cc6:	d03a      	beq.n	8011d3e <lv_draw_sw_blend_basic+0xa42>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011cc8:	8896      	ldrh	r6, [r2, #4]
 8011cca:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8011cce:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011cd0:	f8b0 b004 	ldrh.w	fp, [r0, #4]
 8011cd4:	ea4b 4b0b 	orr.w	fp, fp, fp, lsl #16
 8011cd8:	ea0b 0b04 	and.w	fp, fp, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011cdc:	ebab 0b06 	sub.w	fp, fp, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011ce0:	f10a 0a04 	add.w	sl, sl, #4
 8011ce4:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011ce8:	fb0a fa0b 	mul.w	sl, sl, fp
 8011cec:	eb06 165a 	add.w	r6, r6, sl, lsr #5
 8011cf0:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011cf2:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 8011cf6:	8096      	strh	r6, [r2, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
 8011cf8:	f817 7c01 	ldrb.w	r7, [r7, #-1]
 8011cfc:	2f00      	cmp	r7, #0
 8011cfe:	d08c      	beq.n	8011c1a <lv_draw_sw_blend_basic+0x91e>
 8011d00:	2fff      	cmp	r7, #255	; 0xff
 8011d02:	d01f      	beq.n	8011d44 <lv_draw_sw_blend_basic+0xa48>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011d04:	88d6      	ldrh	r6, [r2, #6]
 8011d06:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8011d0a:	4026      	ands	r6, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011d0c:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 8011d10:	ea4a 4a0a 	orr.w	sl, sl, sl, lsl #16
 8011d14:	ea0a 0a04 	and.w	sl, sl, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011d18:	ebaa 0a06 	sub.w	sl, sl, r6
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011d1c:	3704      	adds	r7, #4
 8011d1e:	08ff      	lsrs	r7, r7, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011d20:	fb07 f70a 	mul.w	r7, r7, sl
 8011d24:	eb06 1657 	add.w	r6, r6, r7, lsr #5
 8011d28:	4026      	ands	r6, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011d2a:	ea46 4616 	orr.w	r6, r6, r6, lsr #16
 8011d2e:	80d6      	strh	r6, [r2, #6]
 8011d30:	e773      	b.n	8011c1a <lv_draw_sw_blend_basic+0x91e>
                            MAP_NORMAL_MASK_PX(x)
 8011d32:	8806      	ldrh	r6, [r0, #0]
 8011d34:	8016      	strh	r6, [r2, #0]
 8011d36:	e79f      	b.n	8011c78 <lv_draw_sw_blend_basic+0x97c>
                            MAP_NORMAL_MASK_PX(x + 1)
 8011d38:	8846      	ldrh	r6, [r0, #2]
 8011d3a:	8056      	strh	r6, [r2, #2]
 8011d3c:	e7bc      	b.n	8011cb8 <lv_draw_sw_blend_basic+0x9bc>
                            MAP_NORMAL_MASK_PX(x + 2)
 8011d3e:	8886      	ldrh	r6, [r0, #4]
 8011d40:	8096      	strh	r6, [r2, #4]
 8011d42:	e7d9      	b.n	8011cf8 <lv_draw_sw_blend_basic+0x9fc>
                            MAP_NORMAL_MASK_PX(x + 3)
 8011d44:	88c6      	ldrh	r6, [r0, #6]
 8011d46:	80d6      	strh	r6, [r2, #6]
 8011d48:	e767      	b.n	8011c1a <lv_draw_sw_blend_basic+0x91e>
                for(; x < w ; x++) {
 8011d4a:	429d      	cmp	r5, r3
 8011d4c:	dd2c      	ble.n	8011da8 <lv_draw_sw_blend_basic+0xaac>
 8011d4e:	3e01      	subs	r6, #1
 8011d50:	eb0c 0a43 	add.w	sl, ip, r3, lsl #1
 8011d54:	eb0e 0743 	add.w	r7, lr, r3, lsl #1
 8011d58:	e019      	b.n	8011d8e <lv_draw_sw_blend_basic+0xa92>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011d5a:	883a      	ldrh	r2, [r7, #0]
 8011d5c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8011d60:	4022      	ands	r2, r4
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011d62:	f8ba 0000 	ldrh.w	r0, [sl]
 8011d66:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 8011d6a:	4020      	ands	r0, r4
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011d6c:	1a80      	subs	r0, r0, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011d6e:	3104      	adds	r1, #4
 8011d70:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011d72:	fb00 f101 	mul.w	r1, r0, r1
 8011d76:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8011d7a:	4022      	ands	r2, r4
    ret.full = (uint16_t)((result >> 16) | result);
 8011d7c:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
                    MAP_NORMAL_MASK_PX(x)
 8011d80:	803a      	strh	r2, [r7, #0]
                for(; x < w ; x++) {
 8011d82:	3301      	adds	r3, #1
 8011d84:	f10a 0a02 	add.w	sl, sl, #2
 8011d88:	3702      	adds	r7, #2
 8011d8a:	429d      	cmp	r5, r3
 8011d8c:	dd0c      	ble.n	8011da8 <lv_draw_sw_blend_basic+0xaac>
                    MAP_NORMAL_MASK_PX(x)
 8011d8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011d92:	2900      	cmp	r1, #0
 8011d94:	d0f5      	beq.n	8011d82 <lv_draw_sw_blend_basic+0xa86>
 8011d96:	29ff      	cmp	r1, #255	; 0xff
 8011d98:	d1df      	bne.n	8011d5a <lv_draw_sw_blend_basic+0xa5e>
 8011d9a:	f8ba 2000 	ldrh.w	r2, [sl]
 8011d9e:	803a      	strh	r2, [r7, #0]
 8011da0:	e7ef      	b.n	8011d82 <lv_draw_sw_blend_basic+0xa86>
 8011da2:	bf00      	nop
 8011da4:	07e0f81f 	.word	0x07e0f81f
                dest_buf += dest_stride;
 8011da8:	9b04      	ldr	r3, [sp, #16]
 8011daa:	449e      	add	lr, r3
                src_buf += src_stride;
 8011dac:	9b07      	ldr	r3, [sp, #28]
 8011dae:	449c      	add	ip, r3
                mask += mask_stride;
 8011db0:	9b05      	ldr	r3, [sp, #20]
 8011db2:	9a08      	ldr	r2, [sp, #32]
 8011db4:	4413      	add	r3, r2
 8011db6:	9305      	str	r3, [sp, #20]
            for(y = 0; y < h; y++) {
 8011db8:	f109 0901 	add.w	r9, r9, #1
 8011dbc:	9b06      	ldr	r3, [sp, #24]
 8011dbe:	454b      	cmp	r3, r9
 8011dc0:	f43f aab7 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 8011dc4:	2d00      	cmp	r5, #0
 8011dc6:	f340 81fd 	ble.w	80121c4 <lv_draw_sw_blend_basic+0xec8>
 8011dca:	9b05      	ldr	r3, [sp, #20]
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f013 0f03 	tst.w	r3, #3
 8011dd2:	d003      	beq.n	8011ddc <lv_draw_sw_blend_basic+0xae0>
 8011dd4:	46e2      	mov	sl, ip
 8011dd6:	4677      	mov	r7, lr
 8011dd8:	2300      	movs	r3, #0
 8011dda:	e70c      	b.n	8011bf6 <lv_draw_sw_blend_basic+0x8fa>
 8011ddc:	461e      	mov	r6, r3
 8011dde:	2300      	movs	r3, #0
                for(; x < x_end4; x += 4) {
 8011de0:	4598      	cmp	r8, r3
 8011de2:	f300 81f4 	bgt.w	80121ce <lv_draw_sw_blend_basic+0xed2>
 8011de6:	e7b2      	b.n	8011d4e <lv_draw_sw_blend_basic+0xa52>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 8011de8:	2afc      	cmp	r2, #252	; 0xfc
 8011dea:	bf9a      	itte	ls
 8011dec:	fb02 f20c 	mulls.w	r2, r2, ip
 8011df0:	0a12      	lsrls	r2, r2, #8
 8011df2:	4662      	movhi	r2, ip
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8011df4:	8803      	ldrh	r3, [r0, #0]
 8011df6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011dfa:	403b      	ands	r3, r7
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8011dfc:	8821      	ldrh	r1, [r4, #0]
 8011dfe:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8011e02:	4039      	ands	r1, r7
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011e04:	1ac9      	subs	r1, r1, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8011e06:	3204      	adds	r2, #4
 8011e08:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8011e0a:	fb01 f202 	mul.w	r2, r1, r2
 8011e0e:	eb03 1352 	add.w	r3, r3, r2, lsr #5
 8011e12:	403b      	ands	r3, r7
    ret.full = (uint16_t)((result >> 16) | result);
 8011e14:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 8011e18:	8003      	strh	r3, [r0, #0]
                for(x = 0; x < w; x++) {
 8011e1a:	3402      	adds	r4, #2
 8011e1c:	3002      	adds	r0, #2
 8011e1e:	4570      	cmp	r0, lr
 8011e20:	d004      	beq.n	8011e2c <lv_draw_sw_blend_basic+0xb30>
                    if(mask[x]) {
 8011e22:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8011e26:	2a00      	cmp	r2, #0
 8011e28:	d0f7      	beq.n	8011e1a <lv_draw_sw_blend_basic+0xb1e>
 8011e2a:	e7dd      	b.n	8011de8 <lv_draw_sw_blend_basic+0xaec>
                dest_buf += dest_stride;
 8011e2c:	44cb      	add	fp, r9
                src_buf += src_stride;
 8011e2e:	9b06      	ldr	r3, [sp, #24]
 8011e30:	449a      	add	sl, r3
                mask += mask_stride;
 8011e32:	9b08      	ldr	r3, [sp, #32]
 8011e34:	441e      	add	r6, r3
            for(y = 0; y < h; y++) {
 8011e36:	f108 0801 	add.w	r8, r8, #1
 8011e3a:	44ce      	add	lr, r9
 8011e3c:	9b05      	ldr	r3, [sp, #20]
 8011e3e:	4543      	cmp	r3, r8
 8011e40:	f43f aa77 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
                for(x = 0; x < w; x++) {
 8011e44:	9b04      	ldr	r3, [sp, #16]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	ddf0      	ble.n	8011e2c <lv_draw_sw_blend_basic+0xb30>
 8011e4a:	1e75      	subs	r5, r6, #1
 8011e4c:	4654      	mov	r4, sl
 8011e4e:	4658      	mov	r0, fp
 8011e50:	e7e7      	b.n	8011e22 <lv_draw_sw_blend_basic+0xb26>
        if(dsc->src_buf == NULL) {
 8011e52:	6863      	ldr	r3, [r4, #4]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d04a      	beq.n	8011eee <lv_draw_sw_blend_basic+0xbf2>
    switch(blend_mode) {
 8011e58:	2e02      	cmp	r6, #2
 8011e5a:	f000 80e9 	beq.w	8012030 <lv_draw_sw_blend_basic+0xd34>
 8011e5e:	2e03      	cmp	r6, #3
 8011e60:	f000 80e9 	beq.w	8012036 <lv_draw_sw_blend_basic+0xd3a>
 8011e64:	2e01      	cmp	r6, #1
 8011e66:	f47f aa64 	bne.w	8011332 <lv_draw_sw_blend_basic+0x36>
            blend_fp = color_blend_true_color_additive;
 8011e6a:	4b98      	ldr	r3, [pc, #608]	; (80120cc <lv_draw_sw_blend_basic+0xdd0>)
 8011e6c:	469c      	mov	ip, r3
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 8011e6e:	7e23      	ldrb	r3, [r4, #24]
 8011e70:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011e72:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011e76:	3301      	adds	r3, #1
 8011e78:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8011e7c:	1a9b      	subs	r3, r3, r2
 8011e7e:	b21b      	sxth	r3, r3
 8011e80:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011e82:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011e86:	3301      	adds	r3, #1
 8011e88:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011e8c:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 8011e8e:	b21b      	sxth	r3, r3
 8011e90:	930a      	str	r3, [sp, #40]	; 0x28
    if(mask == NULL) {
 8011e92:	9b05      	ldr	r3, [sp, #20]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f000 80d1 	beq.w	801203c <lv_draw_sw_blend_basic+0xd40>
        last_dest_color = dest_buf[0];
 8011e9a:	9b06      	ldr	r3, [sp, #24]
 8011e9c:	f8b3 a000 	ldrh.w	sl, [r3]
        last_src_color = src_buf[0];
 8011ea0:	9b07      	ldr	r3, [sp, #28]
 8011ea2:	881b      	ldrh	r3, [r3, #0]
 8011ea4:	4618      	mov	r0, r3
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 8011ea6:	9b05      	ldr	r3, [sp, #20]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2bfc      	cmp	r3, #252	; 0xfc
 8011eac:	bf9d      	ittte	ls
 8011eae:	9a09      	ldrls	r2, [sp, #36]	; 0x24
 8011eb0:	4353      	mulls	r3, r2
 8011eb2:	0a1b      	lsrls	r3, r3, #8
 8011eb4:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 8011eb6:	461e      	mov	r6, r3
 8011eb8:	461a      	mov	r2, r3
 8011eba:	4651      	mov	r1, sl
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	4664      	mov	r4, ip
 8011ec0:	47a0      	blx	r4
        for(y = 0; y < h; y++) {
 8011ec2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011ec4:	2900      	cmp	r1, #0
 8011ec6:	f77f aa34 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 8011eca:	9904      	ldr	r1, [sp, #16]
 8011ecc:	0049      	lsls	r1, r1, #1
 8011ece:	910c      	str	r1, [sp, #48]	; 0x30
            src_buf += src_stride;
 8011ed0:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8011ed4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ed6:	9b06      	ldr	r3, [sp, #24]
 8011ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011eda:	eb03 0942 	add.w	r9, r3, r2, lsl #1
        for(y = 0; y < h; y++) {
 8011ede:	f04f 0b00 	mov.w	fp, #0
 8011ee2:	f8cd b010 	str.w	fp, [sp, #16]
 8011ee6:	46a3      	mov	fp, r4
 8011ee8:	4632      	mov	r2, r6
 8011eea:	462b      	mov	r3, r5
 8011eec:	e128      	b.n	8012140 <lv_draw_sw_blend_basic+0xe44>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 8011eee:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011ef2:	f8b4 a008 	ldrh.w	sl, [r4, #8]
    switch(blend_mode) {
 8011ef6:	2e02      	cmp	r6, #2
 8011ef8:	d034      	beq.n	8011f64 <lv_draw_sw_blend_basic+0xc68>
 8011efa:	2e03      	cmp	r6, #3
 8011efc:	d034      	beq.n	8011f68 <lv_draw_sw_blend_basic+0xc6c>
 8011efe:	2e01      	cmp	r6, #1
 8011f00:	f47f aa17 	bne.w	8011332 <lv_draw_sw_blend_basic+0x36>
            blend_fp = color_blend_true_color_additive;
 8011f04:	4f71      	ldr	r7, [pc, #452]	; (80120cc <lv_draw_sw_blend_basic+0xdd0>)
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8011f06:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8011f10:	1a9b      	subs	r3, r3, r2
 8011f12:	b21b      	sxth	r3, r3
 8011f14:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8011f16:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011f20:	1a9b      	subs	r3, r3, r2
    int32_t h = lv_area_get_height(dest_area);
 8011f22:	b21b      	sxth	r3, r3
 8011f24:	9309      	str	r3, [sp, #36]	; 0x24
    if(mask == NULL) {
 8011f26:	9b05      	ldr	r3, [sp, #20]
 8011f28:	b303      	cbz	r3, 8011f6c <lv_draw_sw_blend_basic+0xc70>
        last_dest_color = dest_buf[0];
 8011f2a:	9b06      	ldr	r3, [sp, #24]
 8011f2c:	f8b3 8000 	ldrh.w	r8, [r3]
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 8011f30:	9b05      	ldr	r3, [sp, #20]
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	2bfc      	cmp	r3, #252	; 0xfc
 8011f36:	bf9a      	itte	ls
 8011f38:	fb0b f303 	mulls.w	r3, fp, r3
 8011f3c:	0a1a      	lsrls	r2, r3, #8
 8011f3e:	465a      	movhi	r2, fp
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 8011f40:	4641      	mov	r1, r8
 8011f42:	4650      	mov	r0, sl
 8011f44:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 8011f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f77f a9f2 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 8011f4e:	9b04      	ldr	r3, [sp, #16]
 8011f50:	005b      	lsls	r3, r3, #1
 8011f52:	9304      	str	r3, [sp, #16]
 8011f54:	9b06      	ldr	r3, [sp, #24]
 8011f56:	9a07      	ldr	r2, [sp, #28]
 8011f58:	eb03 0942 	add.w	r9, r3, r2, lsl #1
        lv_opa_t last_mask = LV_OPA_TRANSP;
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	4641      	mov	r1, r8
 8011f60:	4690      	mov	r8, r2
 8011f62:	e05e      	b.n	8012022 <lv_draw_sw_blend_basic+0xd26>
    switch(blend_mode) {
 8011f64:	4f5a      	ldr	r7, [pc, #360]	; (80120d0 <lv_draw_sw_blend_basic+0xdd4>)
 8011f66:	e7ce      	b.n	8011f06 <lv_draw_sw_blend_basic+0xc0a>
            blend_fp = color_blend_true_color_multiply;
 8011f68:	4f5a      	ldr	r7, [pc, #360]	; (80120d4 <lv_draw_sw_blend_basic+0xdd8>)
 8011f6a:	e7cc      	b.n	8011f06 <lv_draw_sw_blend_basic+0xc0a>
        lv_color_t last_dest_color = dest_buf[0];
 8011f6c:	9c06      	ldr	r4, [sp, #24]
 8011f6e:	8825      	ldrh	r5, [r4, #0]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 8011f70:	465a      	mov	r2, fp
 8011f72:	8821      	ldrh	r1, [r4, #0]
 8011f74:	4650      	mov	r0, sl
 8011f76:	47b8      	blx	r7
        for(y = 0; y < h; y++) {
 8011f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f77f a9d9 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 8011f80:	9b04      	ldr	r3, [sp, #16]
 8011f82:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8011f86:	9b07      	ldr	r3, [sp, #28]
 8011f88:	eb04 0643 	add.w	r6, r4, r3, lsl #1
        for(y = 0; y < h; y++) {
 8011f8c:	f04f 0800 	mov.w	r8, #0
 8011f90:	e018      	b.n	8011fc4 <lv_draw_sw_blend_basic+0xcc8>
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 8011f92:	465a      	mov	r2, fp
 8011f94:	8809      	ldrh	r1, [r1, #0]
 8011f96:	4650      	mov	r0, sl
 8011f98:	47b8      	blx	r7
                dest_buf[x] = last_res_color;
 8011f9a:	f824 0c02 	strh.w	r0, [r4, #-2]
            for(x = 0; x < w; x++) {
 8011f9e:	42b4      	cmp	r4, r6
 8011fa0:	d006      	beq.n	8011fb0 <lv_draw_sw_blend_basic+0xcb4>
                if(last_dest_color.full != dest_buf[x].full) {
 8011fa2:	4621      	mov	r1, r4
 8011fa4:	462b      	mov	r3, r5
 8011fa6:	f834 5b02 	ldrh.w	r5, [r4], #2
 8011faa:	429d      	cmp	r5, r3
 8011fac:	d1f1      	bne.n	8011f92 <lv_draw_sw_blend_basic+0xc96>
 8011fae:	e7f4      	b.n	8011f9a <lv_draw_sw_blend_basic+0xc9e>
            dest_buf += dest_stride;
 8011fb0:	9b06      	ldr	r3, [sp, #24]
 8011fb2:	444b      	add	r3, r9
 8011fb4:	9306      	str	r3, [sp, #24]
        for(y = 0; y < h; y++) {
 8011fb6:	f108 0801 	add.w	r8, r8, #1
 8011fba:	444e      	add	r6, r9
 8011fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fbe:	4543      	cmp	r3, r8
 8011fc0:	f43f a9b7 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8011fc4:	9b07      	ldr	r3, [sp, #28]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	ddf2      	ble.n	8011fb0 <lv_draw_sw_blend_basic+0xcb4>
 8011fca:	9c06      	ldr	r4, [sp, #24]
 8011fcc:	e7e9      	b.n	8011fa2 <lv_draw_sw_blend_basic+0xca6>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 8011fce:	2bfc      	cmp	r3, #252	; 0xfc
 8011fd0:	bf9a      	itte	ls
 8011fd2:	fb0b f303 	mulls.w	r3, fp, r3
 8011fd6:	0a1a      	lsrls	r2, r3, #8
 8011fd8:	465a      	movhi	r2, fp
                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 8011fda:	8821      	ldrh	r1, [r4, #0]
 8011fdc:	4650      	mov	r0, sl
 8011fde:	47b8      	blx	r7
                    last_mask = mask[x];
 8011fe0:	7832      	ldrb	r2, [r6, #0]
                    last_dest_color.full = dest_buf[x].full;
 8011fe2:	8821      	ldrh	r1, [r4, #0]
                dest_buf[x] = last_res_color;
 8011fe4:	8020      	strh	r0, [r4, #0]
            for(x = 0; x < w; x++) {
 8011fe6:	3402      	adds	r4, #2
 8011fe8:	454c      	cmp	r4, r9
 8011fea:	d00b      	beq.n	8012004 <lv_draw_sw_blend_basic+0xd08>
                if(mask[x] == 0) continue;
 8011fec:	3501      	adds	r5, #1
 8011fee:	462e      	mov	r6, r5
 8011ff0:	782b      	ldrb	r3, [r5, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d0f7      	beq.n	8011fe6 <lv_draw_sw_blend_basic+0xcea>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	d1e9      	bne.n	8011fce <lv_draw_sw_blend_basic+0xcd2>
 8011ffa:	f8b4 c000 	ldrh.w	ip, [r4]
 8011ffe:	458c      	cmp	ip, r1
 8012000:	d1e5      	bne.n	8011fce <lv_draw_sw_blend_basic+0xcd2>
 8012002:	e7ef      	b.n	8011fe4 <lv_draw_sw_blend_basic+0xce8>
            dest_buf += dest_stride;
 8012004:	9b06      	ldr	r3, [sp, #24]
 8012006:	9c04      	ldr	r4, [sp, #16]
 8012008:	4423      	add	r3, r4
 801200a:	9306      	str	r3, [sp, #24]
            mask += mask_stride;
 801200c:	9b05      	ldr	r3, [sp, #20]
 801200e:	9d08      	ldr	r5, [sp, #32]
 8012010:	442b      	add	r3, r5
 8012012:	9305      	str	r3, [sp, #20]
        for(y = 0; y < h; y++) {
 8012014:	f108 0801 	add.w	r8, r8, #1
 8012018:	44a1      	add	r9, r4
 801201a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801201c:	4543      	cmp	r3, r8
 801201e:	f43f a988 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8012022:	9b07      	ldr	r3, [sp, #28]
 8012024:	2b00      	cmp	r3, #0
 8012026:	dded      	ble.n	8012004 <lv_draw_sw_blend_basic+0xd08>
 8012028:	9b05      	ldr	r3, [sp, #20]
 801202a:	1e5d      	subs	r5, r3, #1
 801202c:	9c06      	ldr	r4, [sp, #24]
 801202e:	e7dd      	b.n	8011fec <lv_draw_sw_blend_basic+0xcf0>
    switch(blend_mode) {
 8012030:	4b27      	ldr	r3, [pc, #156]	; (80120d0 <lv_draw_sw_blend_basic+0xdd4>)
 8012032:	469c      	mov	ip, r3
 8012034:	e71b      	b.n	8011e6e <lv_draw_sw_blend_basic+0xb72>
            blend_fp = color_blend_true_color_multiply;
 8012036:	4b27      	ldr	r3, [pc, #156]	; (80120d4 <lv_draw_sw_blend_basic+0xdd8>)
 8012038:	469c      	mov	ip, r3
 801203a:	e718      	b.n	8011e6e <lv_draw_sw_blend_basic+0xb72>
        last_dest_color = dest_buf[0];
 801203c:	9b06      	ldr	r3, [sp, #24]
 801203e:	881e      	ldrh	r6, [r3, #0]
        last_src_color = src_buf[0];
 8012040:	9c07      	ldr	r4, [sp, #28]
 8012042:	8827      	ldrh	r7, [r4, #0]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 8012044:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8012048:	4642      	mov	r2, r8
 801204a:	4631      	mov	r1, r6
 801204c:	4638      	mov	r0, r7
 801204e:	4665      	mov	r5, ip
 8012050:	47a8      	blx	r5
        for(y = 0; y < h; y++) {
 8012052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012054:	2b00      	cmp	r3, #0
 8012056:	f77f a96c 	ble.w	8011332 <lv_draw_sw_blend_basic+0x36>
            dest_buf += dest_stride;
 801205a:	9b04      	ldr	r3, [sp, #16]
 801205c:	005b      	lsls	r3, r3, #1
 801205e:	9304      	str	r3, [sp, #16]
            src_buf += src_stride;
 8012060:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8012064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012066:	eb04 0943 	add.w	r9, r4, r3, lsl #1
        for(y = 0; y < h; y++) {
 801206a:	f04f 0a00 	mov.w	sl, #0
 801206e:	f8cd b014 	str.w	fp, [sp, #20]
 8012072:	46c3      	mov	fp, r8
 8012074:	463b      	mov	r3, r7
 8012076:	462f      	mov	r7, r5
 8012078:	e020      	b.n	80120bc <lv_draw_sw_blend_basic+0xdc0>
                    last_dest_color = dest_buf[x];
 801207a:	886e      	ldrh	r6, [r5, #2]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 801207c:	465a      	mov	r2, fp
 801207e:	4631      	mov	r1, r6
 8012080:	4620      	mov	r0, r4
 8012082:	47b8      	blx	r7
                    last_src_color = src_buf[x];
 8012084:	4623      	mov	r3, r4
                dest_buf[x] = last_res_color;
 8012086:	f825 0f02 	strh.w	r0, [r5, #2]!
            for(x = 0; x < w; x++) {
 801208a:	45c8      	cmp	r8, r9
 801208c:	d007      	beq.n	801209e <lv_draw_sw_blend_basic+0xda2>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 801208e:	f838 4b02 	ldrh.w	r4, [r8], #2
 8012092:	429c      	cmp	r4, r3
 8012094:	d1f1      	bne.n	801207a <lv_draw_sw_blend_basic+0xd7e>
 8012096:	886a      	ldrh	r2, [r5, #2]
 8012098:	42b2      	cmp	r2, r6
 801209a:	d1ee      	bne.n	801207a <lv_draw_sw_blend_basic+0xd7e>
 801209c:	e7f3      	b.n	8012086 <lv_draw_sw_blend_basic+0xd8a>
            dest_buf += dest_stride;
 801209e:	9a06      	ldr	r2, [sp, #24]
 80120a0:	9904      	ldr	r1, [sp, #16]
 80120a2:	440a      	add	r2, r1
 80120a4:	9206      	str	r2, [sp, #24]
            src_buf += src_stride;
 80120a6:	9a07      	ldr	r2, [sp, #28]
 80120a8:	9905      	ldr	r1, [sp, #20]
 80120aa:	440a      	add	r2, r1
 80120ac:	9207      	str	r2, [sp, #28]
        for(y = 0; y < h; y++) {
 80120ae:	f10a 0a01 	add.w	sl, sl, #1
 80120b2:	4489      	add	r9, r1
 80120b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120b6:	4552      	cmp	r2, sl
 80120b8:	f43f a93b 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 80120bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120be:	2a00      	cmp	r2, #0
 80120c0:	dded      	ble.n	801209e <lv_draw_sw_blend_basic+0xda2>
 80120c2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80120c6:	9a06      	ldr	r2, [sp, #24]
 80120c8:	1e95      	subs	r5, r2, #2
 80120ca:	e7e0      	b.n	801208e <lv_draw_sw_blend_basic+0xd92>
 80120cc:	080110e9 	.word	0x080110e9
 80120d0:	08011195 	.word	0x08011195
 80120d4:	08011235 	.word	0x08011235
                    last_dest_color = dest_buf[x];
 80120d8:	f8b5 a000 	ldrh.w	sl, [r5]
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 80120dc:	4622      	mov	r2, r4
 80120de:	4651      	mov	r1, sl
 80120e0:	4638      	mov	r0, r7
 80120e2:	47d8      	blx	fp
                    last_src_color = src_buf[x];
 80120e4:	463b      	mov	r3, r7
                dest_buf[x] = last_res_color;
 80120e6:	8028      	strh	r0, [r5, #0]
 80120e8:	4622      	mov	r2, r4
            for(x = 0; x < w; x++) {
 80120ea:	3502      	adds	r5, #2
 80120ec:	3602      	adds	r6, #2
 80120ee:	454d      	cmp	r5, r9
 80120f0:	d012      	beq.n	8012118 <lv_draw_sw_blend_basic+0xe1c>
                if(mask[x] == 0) continue;
 80120f2:	f818 4f01 	ldrb.w	r4, [r8, #1]!
 80120f6:	2c00      	cmp	r4, #0
 80120f8:	d0f7      	beq.n	80120ea <lv_draw_sw_blend_basic+0xdee>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 80120fa:	2cfc      	cmp	r4, #252	; 0xfc
 80120fc:	bf9d      	ittte	ls
 80120fe:	9909      	ldrls	r1, [sp, #36]	; 0x24
 8012100:	434c      	mulls	r4, r1
 8012102:	0a24      	lsrls	r4, r4, #8
 8012104:	9c09      	ldrhi	r4, [sp, #36]	; 0x24
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 8012106:	8837      	ldrh	r7, [r6, #0]
 8012108:	429f      	cmp	r7, r3
 801210a:	d1e5      	bne.n	80120d8 <lv_draw_sw_blend_basic+0xddc>
 801210c:	8829      	ldrh	r1, [r5, #0]
 801210e:	4551      	cmp	r1, sl
 8012110:	d1e2      	bne.n	80120d8 <lv_draw_sw_blend_basic+0xddc>
 8012112:	4294      	cmp	r4, r2
 8012114:	d1e0      	bne.n	80120d8 <lv_draw_sw_blend_basic+0xddc>
 8012116:	e7e6      	b.n	80120e6 <lv_draw_sw_blend_basic+0xdea>
            dest_buf += dest_stride;
 8012118:	9906      	ldr	r1, [sp, #24]
 801211a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801211c:	4421      	add	r1, r4
 801211e:	9106      	str	r1, [sp, #24]
            src_buf += src_stride;
 8012120:	9907      	ldr	r1, [sp, #28]
 8012122:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012124:	4429      	add	r1, r5
 8012126:	9107      	str	r1, [sp, #28]
            mask += mask_stride;
 8012128:	9905      	ldr	r1, [sp, #20]
 801212a:	9d08      	ldr	r5, [sp, #32]
 801212c:	4429      	add	r1, r5
 801212e:	9105      	str	r1, [sp, #20]
        for(y = 0; y < h; y++) {
 8012130:	9904      	ldr	r1, [sp, #16]
 8012132:	3101      	adds	r1, #1
 8012134:	9104      	str	r1, [sp, #16]
 8012136:	44a1      	add	r9, r4
 8012138:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801213a:	428c      	cmp	r4, r1
 801213c:	f43f a8f9 	beq.w	8011332 <lv_draw_sw_blend_basic+0x36>
            for(x = 0; x < w; x++) {
 8012140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012142:	2900      	cmp	r1, #0
 8012144:	dde8      	ble.n	8012118 <lv_draw_sw_blend_basic+0xe1c>
 8012146:	9905      	ldr	r1, [sp, #20]
 8012148:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 801214c:	9d06      	ldr	r5, [sp, #24]
 801214e:	9e07      	ldr	r6, [sp, #28]
 8012150:	e7cf      	b.n	80120f2 <lv_draw_sw_blend_basic+0xdf6>
                for(; x <= x_end4; x += 4) {
 8012152:	4288      	cmp	r0, r1
 8012154:	da04      	bge.n	8012160 <lv_draw_sw_blend_basic+0xe64>
 8012156:	e44b      	b.n	80119f0 <lv_draw_sw_blend_basic+0x6f4>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 8012158:	2100      	movs	r1, #0
                for(; x <= x_end4; x += 4) {
 801215a:	4288      	cmp	r0, r1
 801215c:	f6ff ac6d 	blt.w	8011a3a <lv_draw_sw_blend_basic+0x73e>
 8012160:	46f0      	mov	r8, lr
 8012162:	f102 0308 	add.w	r3, r2, #8
 8012166:	f7ff bbbf 	b.w	80118e8 <lv_draw_sw_blend_basic+0x5ec>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 801216a:	2eff      	cmp	r6, #255	; 0xff
 801216c:	d035      	beq.n	80121da <lv_draw_sw_blend_basic+0xede>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 801216e:	46dc      	mov	ip, fp
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8012170:	8813      	ldrh	r3, [r2, #0]
 8012172:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8012176:	ea03 0309 	and.w	r3, r3, r9
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801217a:	9e04      	ldr	r6, [sp, #16]
 801217c:	1af6      	subs	r6, r6, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801217e:	f10c 0e04 	add.w	lr, ip, #4
 8012182:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8012186:	fb0e f606 	mul.w	r6, lr, r6
 801218a:	eb03 1356 	add.w	r3, r3, r6, lsr #5
 801218e:	ea03 0309 	and.w	r3, r3, r9
    ret.full = (uint16_t)((result >> 16) | result);
 8012192:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
 8012196:	b29b      	uxth	r3, r3
                            last_dest_color.full = dest_buf[x].full;
 8012198:	f8b2 e000 	ldrh.w	lr, [r2]
                            last_mask = *mask;
 801219c:	460e      	mov	r6, r1
                        dest_buf[x] = last_res_color;
 801219e:	8013      	strh	r3, [r2, #0]
                for(x = 0; x < w; x++) {
 80121a0:	3202      	adds	r2, #2
 80121a2:	4297      	cmp	r7, r2
 80121a4:	f43f ac87 	beq.w	8011ab6 <lv_draw_sw_blend_basic+0x7ba>
                    if(*mask) {
 80121a8:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80121ac:	2900      	cmp	r1, #0
 80121ae:	d0f7      	beq.n	80121a0 <lv_draw_sw_blend_basic+0xea4>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80121b0:	42b1      	cmp	r1, r6
 80121b2:	f43f ac73 	beq.w	8011a9c <lv_draw_sw_blend_basic+0x7a0>
 80121b6:	29ff      	cmp	r1, #255	; 0xff
 80121b8:	d0d7      	beq.n	801216a <lv_draw_sw_blend_basic+0xe6e>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 80121ba:	fb0b fc01 	mul.w	ip, fp, r1
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80121be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 80121c2:	e7d5      	b.n	8012170 <lv_draw_sw_blend_basic+0xe74>
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 80121c4:	9e05      	ldr	r6, [sp, #20]
 80121c6:	2300      	movs	r3, #0
                for(; x < x_end4; x += 4) {
 80121c8:	4598      	cmp	r8, r3
 80121ca:	f77f aded 	ble.w	8011da8 <lv_draw_sw_blend_basic+0xaac>
 80121ce:	4631      	mov	r1, r6
 80121d0:	eb0c 0043 	add.w	r0, ip, r3, lsl #1
 80121d4:	eb0e 0243 	add.w	r2, lr, r3, lsl #1
 80121d8:	e526      	b.n	8011c28 <lv_draw_sw_blend_basic+0x92c>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 80121da:	f8b2 c000 	ldrh.w	ip, [r2]
 80121de:	45f4      	cmp	ip, lr
 80121e0:	f47f ac67 	bne.w	8011ab2 <lv_draw_sw_blend_basic+0x7b6>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 80121e4:	46dc      	mov	ip, fp
 80121e6:	e7da      	b.n	801219e <lv_draw_sw_blend_basic+0xea2>

080121e8 <find_oldest_item_life>:
}

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
    uint32_t * min_life = (uint32_t *)ctx;
    if(c->life < *min_life) *min_life = c->life;
 80121e8:	6843      	ldr	r3, [r0, #4]
 80121ea:	f3c3 031d 	ubfx	r3, r3, #0, #30
 80121ee:	680a      	ldr	r2, [r1, #0]
 80121f0:	4293      	cmp	r3, r2
 80121f2:	bf38      	it	cc
 80121f4:	600b      	strcc	r3, [r1, #0]
    return LV_RES_INV;
}
 80121f6:	2000      	movs	r0, #0
 80121f8:	4770      	bx	lr

080121fa <find_item>:
}

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
    uint32_t * k = (uint32_t *)ctx;
    if(c->key == *k) return LV_RES_OK;
 80121fa:	6800      	ldr	r0, [r0, #0]
 80121fc:	680b      	ldr	r3, [r1, #0]
    return LV_RES_INV;
}
 80121fe:	4298      	cmp	r0, r3
 8012200:	bf14      	ite	ne
 8012202:	2000      	movne	r0, #0
 8012204:	2001      	moveq	r0, #1
 8012206:	4770      	bx	lr

08012208 <iterate_cache>:
{
 8012208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(grad_cache_size == 0) return NULL;
 801220c:	4b19      	ldr	r3, [pc, #100]	; (8012274 <iterate_cache+0x6c>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	b363      	cbz	r3, 801226c <iterate_cache+0x64>
 8012212:	4605      	mov	r5, r0
 8012214:	460e      	mov	r6, r1
 8012216:	4691      	mov	r9, r2
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 8012218:	4b17      	ldr	r3, [pc, #92]	; (8012278 <iterate_cache+0x70>)
 801221a:	681c      	ldr	r4, [r3, #0]
    while(first != NULL && first->life) {
 801221c:	b1e4      	cbz	r4, 8012258 <iterate_cache+0x50>
    if(grad_cache_size == 0) return NULL;
 801221e:	4f15      	ldr	r7, [pc, #84]	; (8012274 <iterate_cache+0x6c>)
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8012220:	f8df 8058 	ldr.w	r8, [pc, #88]	; 801227c <iterate_cache+0x74>
    while(first != NULL && first->life) {
 8012224:	6863      	ldr	r3, [r4, #4]
 8012226:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 801222a:	d01d      	beq.n	8012268 <iterate_cache+0x60>
        if((*func)(first, ctx) == LV_RES_OK) {
 801222c:	4631      	mov	r1, r6
 801222e:	4620      	mov	r0, r4
 8012230:	47a8      	blx	r5
 8012232:	2801      	cmp	r0, #1
 8012234:	d012      	beq.n	801225c <iterate_cache+0x54>
    if(grad_cache_size == 0) return NULL;
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	b1d3      	cbz	r3, 8012270 <iterate_cache+0x68>
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 801223a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801223e:	005b      	lsls	r3, r3, #1
 8012240:	3303      	adds	r3, #3
 8012242:	f023 0303 	bic.w	r3, r3, #3
 8012246:	3310      	adds	r3, #16
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 8012248:	441c      	add	r4, r3
 801224a:	f8d8 3000 	ldr.w	r3, [r8]
 801224e:	429c      	cmp	r4, r3
 8012250:	d3e8      	bcc.n	8012224 <iterate_cache+0x1c>
    return LV_RES_INV;
 8012252:	2000      	movs	r0, #0
}
 8012254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return LV_RES_INV;
 8012258:	2000      	movs	r0, #0
 801225a:	e7fb      	b.n	8012254 <iterate_cache+0x4c>
            if(out != NULL) *out = first;
 801225c:	f1b9 0f00 	cmp.w	r9, #0
 8012260:	d0f8      	beq.n	8012254 <iterate_cache+0x4c>
 8012262:	f8c9 4000 	str.w	r4, [r9]
 8012266:	e7f5      	b.n	8012254 <iterate_cache+0x4c>
    return LV_RES_INV;
 8012268:	2000      	movs	r0, #0
 801226a:	e7f3      	b.n	8012254 <iterate_cache+0x4c>
 801226c:	2000      	movs	r0, #0
 801226e:	e7f1      	b.n	8012254 <iterate_cache+0x4c>
 8012270:	2000      	movs	r0, #0
 8012272:	e7ef      	b.n	8012254 <iterate_cache+0x4c>
 8012274:	2000260c 	.word	0x2000260c
 8012278:	20002914 	.word	0x20002914
 801227c:	20002608 	.word	0x20002608

08012280 <kill_oldest_item>:
{
 8012280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(c->life == *min_life) {
 8012282:	6843      	ldr	r3, [r0, #4]
 8012284:	f3c3 031d 	ubfx	r3, r3, #0, #30
 8012288:	680a      	ldr	r2, [r1, #0]
 801228a:	4293      	cmp	r3, r2
    return LV_RES_INV;
 801228c:	bf18      	it	ne
 801228e:	2000      	movne	r0, #0
    if(c->life == *min_life) {
 8012290:	d000      	beq.n	8012294 <kill_oldest_item+0x14>
}
 8012292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012294:	4604      	mov	r4, r0
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 8012296:	f9b0 500c 	ldrsh.w	r5, [r0, #12]
 801229a:	006d      	lsls	r5, r5, #1
 801229c:	3503      	adds	r5, #3
 801229e:	f025 0503 	bic.w	r5, r5, #3
 80122a2:	f105 0710 	add.w	r7, r5, #16
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 80122a6:	4a15      	ldr	r2, [pc, #84]	; (80122fc <kill_oldest_item+0x7c>)
 80122a8:	6813      	ldr	r3, [r2, #0]
 80122aa:	1a1e      	subs	r6, r3, r0
    grad_cache_end -= size;
 80122ac:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 80122b0:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80122b4:	35f0      	adds	r5, #240	; 0xf0
 80122b6:	442b      	add	r3, r5
 80122b8:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 80122ba:	1bf6      	subs	r6, r6, r7
 80122bc:	d101      	bne.n	80122c2 <kill_oldest_item+0x42>
        return LV_RES_OK;
 80122be:	2001      	movs	r0, #1
 80122c0:	e7e7      	b.n	8012292 <kill_oldest_item+0x12>
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 80122c2:	4632      	mov	r2, r6
 80122c4:	19c1      	adds	r1, r0, r7
 80122c6:	f00f ff1b 	bl	8022100 <lv_memcpy>
        while((uint8_t *)c != grad_cache_end) {
 80122ca:	4b0c      	ldr	r3, [pc, #48]	; (80122fc <kill_oldest_item+0x7c>)
 80122cc:	6819      	ldr	r1, [r3, #0]
 80122ce:	428c      	cmp	r4, r1
 80122d0:	d00d      	beq.n	80122ee <kill_oldest_item+0x6e>
 80122d2:	4622      	mov	r2, r4
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 80122d4:	6893      	ldr	r3, [r2, #8]
 80122d6:	442b      	add	r3, r5
 80122d8:	6093      	str	r3, [r2, #8]
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 80122da:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	3303      	adds	r3, #3
 80122e2:	f023 0303 	bic.w	r3, r3, #3
 80122e6:	3310      	adds	r3, #16
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 80122e8:	441a      	add	r2, r3
        while((uint8_t *)c != grad_cache_end) {
 80122ea:	4291      	cmp	r1, r2
 80122ec:	d1f2      	bne.n	80122d4 <kill_oldest_item+0x54>
        lv_memset_00(old + next_items_size, size);
 80122ee:	4639      	mov	r1, r7
 80122f0:	19a0      	adds	r0, r4, r6
 80122f2:	f010 f89b 	bl	802242c <lv_memset_00>
        return LV_RES_OK;
 80122f6:	2001      	movs	r0, #1
 80122f8:	e7cb      	b.n	8012292 <kill_oldest_item+0x12>
 80122fa:	bf00      	nop
 80122fc:	20002608 	.word	0x20002608

08012300 <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 8012300:	b538      	push	{r3, r4, r5, lr}
 8012302:	4604      	mov	r4, r0
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 8012304:	4d08      	ldr	r5, [pc, #32]	; (8012328 <lv_gradient_set_cache_size+0x28>)
 8012306:	6828      	ldr	r0, [r5, #0]
 8012308:	f00f fe2e 	bl	8021f68 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 801230c:	4620      	mov	r0, r4
 801230e:	f00f fe0d 	bl	8021f2c <lv_mem_alloc>
 8012312:	6028      	str	r0, [r5, #0]
 8012314:	4b05      	ldr	r3, [pc, #20]	; (801232c <lv_gradient_set_cache_size+0x2c>)
 8012316:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8012318:	b128      	cbz	r0, 8012326 <lv_gradient_set_cache_size+0x26>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 801231a:	4621      	mov	r1, r4
 801231c:	f010 f886 	bl	802242c <lv_memset_00>
    grad_cache_size = max_bytes;
 8012320:	4b03      	ldr	r3, [pc, #12]	; (8012330 <lv_gradient_set_cache_size+0x30>)
 8012322:	601c      	str	r4, [r3, #0]
}
 8012324:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 8012326:	e7fe      	b.n	8012326 <lv_gradient_set_cache_size+0x26>
 8012328:	20002914 	.word	0x20002914
 801232c:	20002608 	.word	0x20002608
 8012330:	2000260c 	.word	0x2000260c

08012334 <lv_gradient_calculate>:
                                                            lv_coord_t frac)
{
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 8012334:	7883      	ldrb	r3, [r0, #2]
 8012336:	fb01 f303 	mul.w	r3, r1, r3
    if(frac <= min) {
 801233a:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 801233e:	dd1b      	ble.n	8012378 <lv_gradient_calculate+0x44>
{
 8012340:	b570      	push	{r4, r5, r6, lr}
 8012342:	121d      	asrs	r5, r3, #8
        GRAD_CONV(tmp, dsc->stops[0].color);
        return tmp;
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 8012344:	7a06      	ldrb	r6, [r0, #8]
 8012346:	1e74      	subs	r4, r6, #1
 8012348:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 801234c:	789b      	ldrb	r3, [r3, #2]
 801234e:	fb01 f303 	mul.w	r3, r1, r3
    if(frac >= max) {
 8012352:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 8012356:	da20      	bge.n	801239a <lv_gradient_calculate+0x66>
        return tmp;
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 8012358:	2e01      	cmp	r6, #1
    int32_t d = 0;
 801235a:	bf98      	it	ls
 801235c:	2100      	movls	r1, #0
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 801235e:	d908      	bls.n	8012372 <lv_gradient_calculate+0x3e>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 8012360:	7983      	ldrb	r3, [r0, #6]
 8012362:	fb01 f303 	mul.w	r3, r1, r3
 8012366:	121c      	asrs	r4, r3, #8
        if(frac <= cur) {
 8012368:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t d = 0;
 801236c:	bfc8      	it	gt
 801236e:	2100      	movgt	r1, #0
        if(frac <= cur) {
 8012370:	dd28      	ble.n	80123c4 <lv_gradient_calculate+0x90>
            d = max - min;
            break;
        }
    }

    LV_ASSERT(d != 0);
 8012372:	2900      	cmp	r1, #0
 8012374:	d179      	bne.n	801246a <lv_gradient_calculate+0x136>
 8012376:	e7fe      	b.n	8012376 <lv_gradient_calculate+0x42>
        GRAD_CONV(tmp, dsc->stops[0].color);
 8012378:	8802      	ldrh	r2, [r0, #0]
 801237a:	f3c2 1245 	ubfx	r2, r2, #5, #6
 801237e:	7843      	ldrb	r3, [r0, #1]
 8012380:	08db      	lsrs	r3, r3, #3
 8012382:	7801      	ldrb	r1, [r0, #0]
 8012384:	f3c1 0104 	ubfx	r1, r1, #0, #5
        return tmp;
 8012388:	f04f 0000 	mov.w	r0, #0
 801238c:	f361 0004 	bfi	r0, r1, #0, #5
 8012390:	f362 104a 	bfi	r0, r2, #5, #6
 8012394:	f363 20cf 	bfi	r0, r3, #11, #5

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
}
 8012398:	4770      	bx	lr
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 801239a:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 801239e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80123a2:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80123a6:	785b      	ldrb	r3, [r3, #1]
 80123a8:	08db      	lsrs	r3, r3, #3
 80123aa:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
 80123ae:	f3c1 0104 	ubfx	r1, r1, #0, #5
        return tmp;
 80123b2:	f04f 0000 	mov.w	r0, #0
 80123b6:	f361 0004 	bfi	r0, r1, #0, #5
 80123ba:	f362 104a 	bfi	r0, r2, #5, #6
 80123be:	f363 20cf 	bfi	r0, r3, #11, #5
}
 80123c2:	bd70      	pop	{r4, r5, r6, pc}
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 80123c4:	7803      	ldrb	r3, [r0, #0]
 80123c6:	f003 031f 	and.w	r3, r3, #31
 80123ca:	8805      	ldrh	r5, [r0, #0]
 80123cc:	f3c5 1545 	ubfx	r5, r5, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 80123d0:	f890 c001 	ldrb.w	ip, [r0, #1]
 80123d4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80123d8:	eb0c 1e4c 	add.w	lr, ip, ip, lsl #5
 80123dc:	ebcc 0ece 	rsb	lr, ip, lr, lsl #3
 80123e0:	f10e 0e07 	add.w	lr, lr, #7
 80123e4:	ea4f 1e6e 	mov.w	lr, lr, asr #5
 80123e8:	f04f 0c00 	mov.w	ip, #0
 80123ec:	f36e 4c17 	bfi	ip, lr, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 80123f0:	eb05 16c5 	add.w	r6, r5, r5, lsl #7
 80123f4:	eb05 0546 	add.w	r5, r5, r6, lsl #1
 80123f8:	3503      	adds	r5, #3
 80123fa:	11ad      	asrs	r5, r5, #6
 80123fc:	f365 2c0f 	bfi	ip, r5, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8012400:	eb03 1543 	add.w	r5, r3, r3, lsl #5
 8012404:	ebc3 03c5 	rsb	r3, r3, r5, lsl #3
 8012408:	3307      	adds	r3, #7
 801240a:	115b      	asrs	r3, r3, #5
 801240c:	f363 0c07 	bfi	ip, r3, #0, #8
 8012410:	f04c 4c7f 	orr.w	ip, ip, #4278190080	; 0xff000000
            two.full = lv_color_to32(dsc->stops[i].color);
 8012414:	7903      	ldrb	r3, [r0, #4]
 8012416:	f003 031f 	and.w	r3, r3, #31
 801241a:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 801241e:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8012422:	7945      	ldrb	r5, [r0, #5]
 8012424:	08ed      	lsrs	r5, r5, #3
 8012426:	eb05 1645 	add.w	r6, r5, r5, lsl #5
 801242a:	ebc5 05c6 	rsb	r5, r5, r6, lsl #3
 801242e:	3507      	adds	r5, #7
 8012430:	116d      	asrs	r5, r5, #5
 8012432:	2600      	movs	r6, #0
 8012434:	f365 4617 	bfi	r6, r5, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8012438:	eb0e 15ce 	add.w	r5, lr, lr, lsl #7
 801243c:	eb0e 0545 	add.w	r5, lr, r5, lsl #1
 8012440:	3503      	adds	r5, #3
 8012442:	11ad      	asrs	r5, r5, #6
 8012444:	f365 260f 	bfi	r6, r5, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8012448:	eb03 1543 	add.w	r5, r3, r3, lsl #5
 801244c:	ebc3 03c5 	rsb	r3, r3, r5, lsl #3
 8012450:	3307      	adds	r3, #7
 8012452:	115b      	asrs	r3, r3, #5
 8012454:	f363 0607 	bfi	r6, r3, #0, #8
 8012458:	f046 4e7f 	orr.w	lr, r6, #4278190080	; 0xff000000
            min = (dsc->stops[i - 1].frac * range) >> 8;
 801245c:	7883      	ldrb	r3, [r0, #2]
 801245e:	fb03 f101 	mul.w	r1, r3, r1
 8012462:	120d      	asrs	r5, r1, #8
            d = max - min;
 8012464:	eba4 2121 	sub.w	r1, r4, r1, asr #8
            break;
 8012468:	e783      	b.n	8012372 <lv_gradient_calculate+0x3e>
    frac -= min;
 801246a:	1b53      	subs	r3, r2, r5
    lv_opa_t mix = (frac * 255) / d;
 801246c:	b21b      	sxth	r3, r3
 801246e:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8012472:	fb93 f3f1 	sdiv	r3, r3, r1
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 8012476:	b2d8      	uxtb	r0, r3
    lv_opa_t imix = 255 - mix;
 8012478:	43db      	mvns	r3, r3
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 801247a:	b2db      	uxtb	r3, r3
 801247c:	f3ce 2107 	ubfx	r1, lr, #8, #8
 8012480:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8012484:	fb03 f202 	mul.w	r2, r3, r2
 8012488:	fb00 2201 	mla	r2, r0, r1, r2
 801248c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
 8012490:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8012494:	f3c2 6145 	ubfx	r1, r2, #25, #6
 8012498:	f3ce 4407 	ubfx	r4, lr, #16, #8
 801249c:	f3cc 4207 	ubfx	r2, ip, #16, #8
 80124a0:	fb03 f202 	mul.w	r2, r3, r2
 80124a4:	fb00 2204 	mla	r2, r0, r4, r2
 80124a8:	eb02 2402 	add.w	r4, r2, r2, lsl #8
 80124ac:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80124b0:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80124b4:	fa5f fe8e 	uxtb.w	lr, lr
 80124b8:	fa5f fc8c 	uxtb.w	ip, ip
 80124bc:	fb03 f30c 	mul.w	r3, r3, ip
 80124c0:	fb00 330e 	mla	r3, r0, lr, r3
 80124c4:	eb03 2003 	add.w	r0, r3, r3, lsl #8
 80124c8:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
 80124cc:	0e9b      	lsrs	r3, r3, #26
    return r;
 80124ce:	f04f 0000 	mov.w	r0, #0
 80124d2:	f363 0004 	bfi	r0, r3, #0, #5
 80124d6:	f361 104a 	bfi	r0, r1, #5, #6
 80124da:	f362 20cf 	bfi	r0, r2, #11, #5
 80124de:	e770      	b.n	80123c2 <lv_gradient_calculate+0x8e>

080124e0 <lv_gradient_get>:
{
 80124e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	b085      	sub	sp, #20
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 80124e6:	7a43      	ldrb	r3, [r0, #9]
 80124e8:	f013 0f07 	tst.w	r3, #7
 80124ec:	f000 80b0 	beq.w	8012650 <lv_gradient_get+0x170>
 80124f0:	4680      	mov	r8, r0
 80124f2:	460c      	mov	r4, r1
 80124f4:	4615      	mov	r5, r2
    if(!inited) {
 80124f6:	4b57      	ldr	r3, [pc, #348]	; (8012654 <lv_gradient_get+0x174>)
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d064      	beq.n	80125c8 <lv_gradient_get+0xe8>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 80124fe:	f898 2009 	ldrb.w	r2, [r8, #9]
 8012502:	f002 0207 	and.w	r2, r2, #7
 8012506:	2a02      	cmp	r2, #2
 8012508:	bf0c      	ite	eq
 801250a:	4623      	moveq	r3, r4
 801250c:	462b      	movne	r3, r5
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 801250e:	ea88 0964 	eor.w	r9, r8, r4, asr #1
 8012512:	ea83 0309 	eor.w	r3, r3, r9
    uint32_t key = compute_key(g, size, w);
 8012516:	9303      	str	r3, [sp, #12]
    lv_grad_t * item = NULL;
 8012518:	2300      	movs	r3, #0
 801251a:	9302      	str	r3, [sp, #8]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 801251c:	aa02      	add	r2, sp, #8
 801251e:	a903      	add	r1, sp, #12
 8012520:	484d      	ldr	r0, [pc, #308]	; (8012658 <lv_gradient_get+0x178>)
 8012522:	f7ff fe71 	bl	8012208 <iterate_cache>
 8012526:	2801      	cmp	r0, #1
 8012528:	d055      	beq.n	80125d6 <lv_gradient_get+0xf6>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 801252a:	f898 3009 	ldrb.w	r3, [r8, #9]
 801252e:	f003 0307 	and.w	r3, r3, #7
 8012532:	2b02      	cmp	r3, #2
 8012534:	bf0c      	ite	eq
 8012536:	4626      	moveq	r6, r4
 8012538:	462e      	movne	r6, r5
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 801253a:	42a5      	cmp	r5, r4
 801253c:	bfb8      	it	lt
 801253e:	4625      	movlt	r5, r4
    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 8012540:	006f      	lsls	r7, r5, #1
 8012542:	3703      	adds	r7, #3
 8012544:	f027 0703 	bic.w	r7, r7, #3
 8012548:	3710      	adds	r7, #16
    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 801254a:	4b44      	ldr	r3, [pc, #272]	; (801265c <lv_gradient_get+0x17c>)
 801254c:	681c      	ldr	r4, [r3, #0]
 801254e:	4b44      	ldr	r3, [pc, #272]	; (8012660 <lv_gradient_get+0x180>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	1ae3      	subs	r3, r4, r3
    if(req_size + act_size < grad_cache_size) {
 8012554:	443b      	add	r3, r7
 8012556:	4a43      	ldr	r2, [pc, #268]	; (8012664 <lv_gradient_get+0x184>)
 8012558:	6812      	ldr	r2, [r2, #0]
 801255a:	4293      	cmp	r3, r2
 801255c:	d242      	bcs.n	80125e4 <lv_gradient_get+0x104>
        item->not_cached = 0;
 801255e:	79e3      	ldrb	r3, [r4, #7]
 8012560:	f36f 13c7 	bfc	r3, #7, #1
 8012564:	71e3      	strb	r3, [r4, #7]
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 8012566:	ea86 0309 	eor.w	r3, r6, r9
    item->key = compute_key(g, size, w);
 801256a:	6023      	str	r3, [r4, #0]
    item->life = 1;
 801256c:	6863      	ldr	r3, [r4, #4]
 801256e:	2201      	movs	r2, #1
 8012570:	f362 031d 	bfi	r3, r2, #0, #30
 8012574:	6063      	str	r3, [r4, #4]
    item->filled = 0;
 8012576:	f3c3 6307 	ubfx	r3, r3, #24, #8
 801257a:	f36f 1386 	bfc	r3, #6, #1
 801257e:	71e3      	strb	r3, [r4, #7]
    item->alloc_size = map_size;
 8012580:	81a5      	strh	r5, [r4, #12]
    item->size = size;
 8012582:	81e6      	strh	r6, [r4, #14]
    if(item->not_cached) {
 8012584:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012588:	d15e      	bne.n	8012648 <lv_gradient_get+0x168>
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 801258a:	4a34      	ldr	r2, [pc, #208]	; (801265c <lv_gradient_get+0x17c>)
 801258c:	6813      	ldr	r3, [r2, #0]
 801258e:	f103 0110 	add.w	r1, r3, #16
 8012592:	60a1      	str	r1, [r4, #8]
        grad_cache_end += req_size;
 8012594:	443b      	add	r3, r7
 8012596:	6013      	str	r3, [r2, #0]
    item = allocate_item(g, w, h);
 8012598:	9402      	str	r4, [sp, #8]
    for(lv_coord_t i = 0; i < item->size; i++) {
 801259a:	2e00      	cmp	r6, #0
 801259c:	dd10      	ble.n	80125c0 <lv_gradient_get+0xe0>
 801259e:	2500      	movs	r5, #0
 80125a0:	b22f      	sxth	r7, r5
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 80125a2:	463a      	mov	r2, r7
 80125a4:	4631      	mov	r1, r6
 80125a6:	4640      	mov	r0, r8
 80125a8:	f7ff fec4 	bl	8012334 <lv_gradient_calculate>
 80125ac:	68a3      	ldr	r3, [r4, #8]
 80125ae:	f823 0017 	strh.w	r0, [r3, r7, lsl #1]
    for(lv_coord_t i = 0; i < item->size; i++) {
 80125b2:	9c02      	ldr	r4, [sp, #8]
 80125b4:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 80125b8:	3501      	adds	r5, #1
 80125ba:	b22b      	sxth	r3, r5
 80125bc:	429e      	cmp	r6, r3
 80125be:	dcef      	bgt.n	80125a0 <lv_gradient_get+0xc0>
}
 80125c0:	4620      	mov	r0, r4
 80125c2:	b005      	add	sp, #20
 80125c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 80125c8:	2000      	movs	r0, #0
 80125ca:	f7ff fe99 	bl	8012300 <lv_gradient_set_cache_size>
        inited = true;
 80125ce:	4b21      	ldr	r3, [pc, #132]	; (8012654 <lv_gradient_get+0x174>)
 80125d0:	2201      	movs	r2, #1
 80125d2:	701a      	strb	r2, [r3, #0]
 80125d4:	e793      	b.n	80124fe <lv_gradient_get+0x1e>
        item->life++; /* Don't forget to bump the counter */
 80125d6:	9c02      	ldr	r4, [sp, #8]
 80125d8:	6863      	ldr	r3, [r4, #4]
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	f362 031d 	bfi	r3, r2, #0, #30
 80125e0:	6063      	str	r3, [r4, #4]
        return item;
 80125e2:	e7ed      	b.n	80125c0 <lv_gradient_get+0xe0>
        if(req_size <= grad_cache_size) {
 80125e4:	4297      	cmp	r7, r2
 80125e6:	d824      	bhi.n	8012632 <lv_gradient_get+0x152>
            while(act_size + req_size > grad_cache_size) {
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d91b      	bls.n	8012624 <lv_gradient_get+0x144>
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 80125ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012668 <lv_gradient_get+0x188>
 80125f0:	2400      	movs	r4, #0
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 80125f2:	f8df a078 	ldr.w	sl, [pc, #120]	; 801266c <lv_gradient_get+0x18c>
                uint32_t oldest_life = UINT32_MAX;
 80125f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125fa:	9301      	str	r3, [sp, #4]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 80125fc:	4622      	mov	r2, r4
 80125fe:	a901      	add	r1, sp, #4
 8012600:	4658      	mov	r0, fp
 8012602:	f7ff fe01 	bl	8012208 <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 8012606:	4622      	mov	r2, r4
 8012608:	a901      	add	r1, sp, #4
 801260a:	4650      	mov	r0, sl
 801260c:	f7ff fdfc 	bl	8012208 <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 8012610:	4b12      	ldr	r3, [pc, #72]	; (801265c <lv_gradient_get+0x17c>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	4a12      	ldr	r2, [pc, #72]	; (8012660 <lv_gradient_get+0x180>)
 8012616:	6812      	ldr	r2, [r2, #0]
 8012618:	1a9b      	subs	r3, r3, r2
            while(act_size + req_size > grad_cache_size) {
 801261a:	443b      	add	r3, r7
 801261c:	4a11      	ldr	r2, [pc, #68]	; (8012664 <lv_gradient_get+0x184>)
 801261e:	6812      	ldr	r2, [r2, #0]
 8012620:	4293      	cmp	r3, r2
 8012622:	d8e8      	bhi.n	80125f6 <lv_gradient_get+0x116>
            item = (lv_grad_t *)grad_cache_end;
 8012624:	4b0d      	ldr	r3, [pc, #52]	; (801265c <lv_gradient_get+0x17c>)
 8012626:	681c      	ldr	r4, [r3, #0]
            item->not_cached = 0;
 8012628:	79e3      	ldrb	r3, [r4, #7]
 801262a:	f36f 13c7 	bfc	r3, #7, #1
 801262e:	71e3      	strb	r3, [r4, #7]
 8012630:	e799      	b.n	8012566 <lv_gradient_get+0x86>
            item = lv_mem_alloc(req_size);
 8012632:	4638      	mov	r0, r7
 8012634:	f00f fc7a 	bl	8021f2c <lv_mem_alloc>
            LV_ASSERT_MALLOC(item);
 8012638:	4604      	mov	r4, r0
 801263a:	b120      	cbz	r0, 8012646 <lv_gradient_get+0x166>
            item->not_cached = 1;
 801263c:	79c3      	ldrb	r3, [r0, #7]
 801263e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012642:	71c3      	strb	r3, [r0, #7]
 8012644:	e78f      	b.n	8012566 <lv_gradient_get+0x86>
            LV_ASSERT_MALLOC(item);
 8012646:	e7fe      	b.n	8012646 <lv_gradient_get+0x166>
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 8012648:	f104 0310 	add.w	r3, r4, #16
 801264c:	60a3      	str	r3, [r4, #8]
 801264e:	e7a3      	b.n	8012598 <lv_gradient_get+0xb8>
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 8012650:	2400      	movs	r4, #0
 8012652:	e7b5      	b.n	80125c0 <lv_gradient_get+0xe0>
 8012654:	20002610 	.word	0x20002610
 8012658:	080121fb 	.word	0x080121fb
 801265c:	20002608 	.word	0x20002608
 8012660:	20002914 	.word	0x20002914
 8012664:	2000260c 	.word	0x2000260c
 8012668:	080121e9 	.word	0x080121e9
 801266c:	08012281 	.word	0x08012281

08012670 <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 8012670:	b508      	push	{r3, lr}
    if(grad->not_cached) {
 8012672:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8012676:	2b00      	cmp	r3, #0
 8012678:	db00      	blt.n	801267c <lv_gradient_cleanup+0xc>
        lv_mem_free(grad);
    }
}
 801267a:	bd08      	pop	{r3, pc}
        lv_mem_free(grad);
 801267c:	f00f fc74 	bl	8021f68 <lv_mem_free>
}
 8012680:	e7fb      	b.n	801267a <lv_gradient_cleanup+0xa>

08012682 <lv_draw_sw_img_decoded>:
 **********************/


LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_img_decoded(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_img_dsc_t * draw_dsc,
                                                  const lv_area_t * coords, const uint8_t * src_buf, lv_img_cf_t cf)
{
 8012682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012686:	b0ab      	sub	sp, #172	; 0xac
 8012688:	9007      	str	r0, [sp, #28]
 801268a:	4689      	mov	r9, r1
 801268c:	920b      	str	r2, [sp, #44]	; 0x2c
 801268e:	9311      	str	r3, [sp, #68]	; 0x44
 8012690:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
 8012694:	9308      	str	r3, [sp, #32]
    /*Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 8012696:	6883      	ldr	r3, [r0, #8]
    dest->x1 = src->x1;
 8012698:	f9b3 2000 	ldrsh.w	r2, [r3]
 801269c:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
    dest->y1 = src->y1;
 80126a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80126a4:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
    dest->x2 = src->x2;
 80126a8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80126ac:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
    dest->y2 = src->y2;
 80126b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80126b4:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6

    bool mask_any = lv_draw_mask_is_any(&draw_area);
 80126b8:	a828      	add	r0, sp, #160	; 0xa0
 80126ba:	f7fc fd0b 	bl	800f0d4 <lv_draw_mask_is_any>
 80126be:	4604      	mov	r4, r0
 80126c0:	900f      	str	r0, [sp, #60]	; 0x3c
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 80126c2:	f8d9 5000 	ldr.w	r5, [r9]
 80126c6:	950e      	str	r5, [sp, #56]	; 0x38

    lv_area_t blend_area;
    lv_draw_sw_blend_dsc_t blend_dsc;

    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 80126c8:	211c      	movs	r1, #28
 80126ca:	a81f      	add	r0, sp, #124	; 0x7c
 80126cc:	f00f feae 	bl	802242c <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 80126d0:	f899 300b 	ldrb.w	r3, [r9, #11]
 80126d4:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 80126d8:	f899 300c 	ldrb.w	r3, [r9, #12]
 80126dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80126e0:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
    blend_dsc.blend_area = &blend_area;
 80126e4:	ab26      	add	r3, sp, #152	; 0x98
 80126e6:	931f      	str	r3, [sp, #124]	; 0x7c

    /*The simplest case just copy the pixels into the draw_buf*/
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 80126e8:	b914      	cbnz	r4, 80126f0 <lv_draw_sw_img_decoded+0x6e>
 80126ea:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 80126ee:	d06b      	beq.n	80127c8 <lv_draw_sw_img_decoded+0x146>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        blend_area.x1 = draw_ctx->clip_area->x1;
 80126f0:	9b07      	ldr	r3, [sp, #28]
 80126f2:	689a      	ldr	r2, [r3, #8]
 80126f4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80126f8:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
        blend_area.x2 = draw_ctx->clip_area->x2;
 80126fc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8012700:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        blend_area.y1 = draw_ctx->clip_area->y1;
 8012704:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012708:	f8ad 609a 	strh.w	r6, [sp, #154]	; 0x9a
        blend_area.y2 = draw_ctx->clip_area->y2;
 801270c:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8012710:	f8ad 409e 	strh.w	r4, [sp, #158]	; 0x9e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012714:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012716:	88aa      	ldrh	r2, [r5, #4]
 8012718:	8828      	ldrh	r0, [r5, #0]
 801271a:	1a12      	subs	r2, r2, r0
 801271c:	b292      	uxth	r2, r2
 801271e:	9217      	str	r2, [sp, #92]	; 0x5c
 8012720:	3201      	adds	r2, #1
 8012722:	b212      	sxth	r2, r2
 8012724:	920d      	str	r2, [sp, #52]	; 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012726:	88ea      	ldrh	r2, [r5, #6]
 8012728:	3201      	adds	r2, #1
 801272a:	8868      	ldrh	r0, [r5, #2]
 801272c:	1a12      	subs	r2, r2, r0
 801272e:	b212      	sxth	r2, r2
 8012730:	9212      	str	r2, [sp, #72]	; 0x48
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012732:	3301      	adds	r3, #1
 8012734:	1a5b      	subs	r3, r3, r1
 8012736:	fa0f fa83 	sxth.w	sl, r3
        lv_coord_t src_w = lv_area_get_width(coords);
        lv_coord_t src_h = lv_area_get_height(coords);
        lv_coord_t blend_h = lv_area_get_height(&blend_area);
        lv_coord_t blend_w = lv_area_get_width(&blend_area);

        uint32_t max_buf_size = MAX_BUF_SIZE;
 801273a:	f7fa fb4b 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
 801273e:	f00e f99d 	bl	8020a7c <lv_disp_get_hor_res>
 8012742:	4605      	mov	r5, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 8012744:	a826      	add	r0, sp, #152	; 0x98
 8012746:	f00e fcb0 	bl	80210aa <lv_area_get_size>
        uint32_t buf_h;
        uint32_t buf_w = blend_w;
        if(blend_size <= max_buf_size) {
 801274a:	4285      	cmp	r5, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801274c:	bf23      	ittte	cs
 801274e:	1c65      	addcs	r5, r4, #1
 8012750:	1bad      	subcs	r5, r5, r6
            buf_h = blend_h;
 8012752:	b22d      	sxthcs	r5, r5
        }
        else {
            /*Round to full lines*/
            buf_h = max_buf_size / blend_w;
 8012754:	fbb5 f5fa 	udivcc	r5, r5, sl
        }

        /*Create buffers and masks*/
        uint32_t buf_size = buf_w * buf_h;
 8012758:	fb0a f405 	mul.w	r4, sl, r5
 801275c:	9415      	str	r4, [sp, #84]	; 0x54

        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 801275e:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8012762:	4658      	mov	r0, fp
 8012764:	f00f fc34 	bl	8021fd0 <lv_mem_buf_get>
 8012768:	4606      	mov	r6, r0
 801276a:	9009      	str	r0, [sp, #36]	; 0x24
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 801276c:	4620      	mov	r0, r4
 801276e:	f00f fc2f 	bl	8021fd0 <lv_mem_buf_get>
 8012772:	900a      	str	r0, [sp, #40]	; 0x28
        blend_dsc.mask_buf = mask_buf;
 8012774:	9022      	str	r0, [sp, #136]	; 0x88
        blend_dsc.mask_area = &blend_area;
 8012776:	ab26      	add	r3, sp, #152	; 0x98
 8012778:	9324      	str	r3, [sp, #144]	; 0x90
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        blend_dsc.src_buf = rgb_buf;
 801277a:	9620      	str	r6, [sp, #128]	; 0x80
        lv_coord_t y_last = blend_area.y2;
 801277c:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 8012780:	930c      	str	r3, [sp, #48]	; 0x30
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 8012782:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
 8012786:	b2ab      	uxth	r3, r5
 8012788:	4619      	mov	r1, r3
 801278a:	9310      	str	r3, [sp, #64]	; 0x40
 801278c:	1e53      	subs	r3, r2, #1
 801278e:	440b      	add	r3, r1
 8012790:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e

        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 8012794:	9b08      	ldr	r3, [sp, #32]
 8012796:	2b04      	cmp	r3, #4
 8012798:	d069      	beq.n	801286e <lv_draw_sw_img_decoded+0x1ec>
 801279a:	2302      	movs	r3, #2
                                           draw_dsc->zoom != LV_IMG_ZOOM_NONE) ?
                                          LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
        blend_dsc.mask_res = mask_res_def;
 801279c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c

        while(blend_area.y1 <= y_last) {
 80127a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127a2:	429a      	cmp	r2, r3
 80127a4:	f300 8225 	bgt.w	8012bf2 <lv_draw_sw_img_decoded+0x570>
        }
    }
    else if(cf == LV_IMG_CF_RGB565A8) {
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 80127a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80127aa:	004b      	lsls	r3, r1, #1
 80127ac:	b21b      	sxth	r3, r3
 80127ae:	9316      	str	r3, [sp, #88]	; 0x58
            cbuf += dest_w;
            src_tmp8 += src_stride_byte;
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 80127b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80127b2:	fb01 f303 	mul.w	r3, r1, r3
 80127b6:	005b      	lsls	r3, r3, #1
 80127b8:	9318      	str	r3, [sp, #96]	; 0x60
 80127ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127bc:	449b      	add	fp, r3
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 80127be:	9b08      	ldr	r3, [sp, #32]
 80127c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80127c4:	9314      	str	r3, [sp, #80]	; 0x50
 80127c6:	e103      	b.n	80129d0 <lv_draw_sw_img_decoded+0x34e>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 80127c8:	9b08      	ldr	r3, [sp, #32]
 80127ca:	2b04      	cmp	r3, #4
 80127cc:	d025      	beq.n	801281a <lv_draw_sw_img_decoded+0x198>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 80127ce:	9b08      	ldr	r3, [sp, #32]
 80127d0:	2b0e      	cmp	r3, #14
 80127d2:	d030      	beq.n	8012836 <lv_draw_sw_img_decoded+0x1b4>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 80127d4:	9b08      	ldr	r3, [sp, #32]
 80127d6:	2b14      	cmp	r3, #20
 80127d8:	d18a      	bne.n	80126f0 <lv_draw_sw_img_decoded+0x6e>
 80127da:	f899 300a 	ldrb.w	r3, [r9, #10]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d186      	bne.n	80126f0 <lv_draw_sw_img_decoded+0x6e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80127e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80127e4:	8883      	ldrh	r3, [r0, #4]
 80127e6:	3301      	adds	r3, #1
 80127e8:	8802      	ldrh	r2, [r0, #0]
 80127ea:	1a9b      	subs	r3, r3, r2
 80127ec:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80127ee:	88c2      	ldrh	r2, [r0, #6]
 80127f0:	3201      	adds	r2, #1
 80127f2:	8841      	ldrh	r1, [r0, #2]
 80127f4:	1a52      	subs	r2, r2, r1
 80127f6:	b212      	sxth	r2, r2
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 80127f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80127fa:	9120      	str	r1, [sp, #128]	; 0x80
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 80127fc:	fb02 f303 	mul.w	r3, r2, r3
 8012800:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8012804:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.blend_area = coords;
 8012806:	901f      	str	r0, [sp, #124]	; 0x7c
        blend_dsc.mask_area = coords;
 8012808:	9024      	str	r0, [sp, #144]	; 0x90
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801280a:	2302      	movs	r3, #2
 801280c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012810:	a91f      	add	r1, sp, #124	; 0x7c
 8012812:	9807      	ldr	r0, [sp, #28]
 8012814:	f7fe fd5a 	bl	80112cc <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 8012818:	e1f1      	b.n	8012bfe <lv_draw_sw_img_decoded+0x57c>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 801281a:	f899 300a 	ldrb.w	r3, [r9, #10]
 801281e:	2b00      	cmp	r3, #0
 8012820:	f47f af66 	bne.w	80126f0 <lv_draw_sw_img_decoded+0x6e>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 8012824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012826:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.blend_area = coords;
 8012828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801282a:	931f      	str	r3, [sp, #124]	; 0x7c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801282c:	a91f      	add	r1, sp, #124	; 0x7c
 801282e:	9807      	ldr	r0, [sp, #28]
 8012830:	f7fe fd4c 	bl	80112cc <lv_draw_sw_blend>
 8012834:	e1e3      	b.n	8012bfe <lv_draw_sw_img_decoded+0x57c>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 8012836:	9d07      	ldr	r5, [sp, #28]
 8012838:	68aa      	ldr	r2, [r5, #8]
 801283a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801283c:	4621      	mov	r1, r4
 801283e:	a81d      	add	r0, sp, #116	; 0x74
 8012840:	f00e fc5f 	bl	8021102 <_lv_area_intersect>
 8012844:	2800      	cmp	r0, #0
 8012846:	f000 81da 	beq.w	8012bfe <lv_draw_sw_img_decoded+0x57c>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 801284a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801284c:	9322      	str	r3, [sp, #136]	; 0x88
        blend_dsc.mask_area = coords;
 801284e:	9424      	str	r4, [sp, #144]	; 0x90
        blend_dsc.src_buf = NULL;
 8012850:	2300      	movs	r3, #0
 8012852:	9320      	str	r3, [sp, #128]	; 0x80
        blend_dsc.color = draw_dsc->recolor;
 8012854:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8012858:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801285c:	2302      	movs	r3, #2
 801285e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
        blend_dsc.blend_area = coords;
 8012862:	941f      	str	r4, [sp, #124]	; 0x7c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8012864:	a91f      	add	r1, sp, #124	; 0x7c
 8012866:	4628      	mov	r0, r5
 8012868:	f7fe fd30 	bl	80112cc <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 801286c:	e1c7      	b.n	8012bfe <lv_draw_sw_img_decoded+0x57c>
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 801286e:	f8d9 3000 	ldr.w	r3, [r9]
 8012872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012876:	bf14      	ite	ne
 8012878:	2302      	movne	r3, #2
 801287a:	2301      	moveq	r3, #1
 801287c:	e78e      	b.n	801279c <lv_draw_sw_img_decoded+0x11a>
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801287e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012880:	2b04      	cmp	r3, #4
 8012882:	d053      	beq.n	801292c <lv_draw_sw_img_decoded+0x2aa>
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 8012884:	9b08      	ldr	r3, [sp, #32]
 8012886:	2b05      	cmp	r3, #5
 8012888:	f000 80e4 	beq.w	8012a54 <lv_draw_sw_img_decoded+0x3d2>
    else if(cf == LV_IMG_CF_RGB565A8) {
 801288c:	9b08      	ldr	r3, [sp, #32]
 801288e:	2b14      	cmp	r3, #20
 8012890:	d17f      	bne.n	8012992 <lv_draw_sw_img_decoded+0x310>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 8012892:	f9bd 2076 	ldrsh.w	r2, [sp, #118]	; 0x76
 8012896:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 801289a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801289c:	fb01 3402 	mla	r4, r1, r2, r3
 80128a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80128a2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80128a6:	f8bd 707a 	ldrh.w	r7, [sp, #122]	; 0x7a
 80128aa:	3701      	adds	r7, #1
 80128ac:	1abf      	subs	r7, r7, r2
 80128ae:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80128b0:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 80128b4:	f108 0801 	add.w	r8, r8, #1
 80128b8:	eba8 0803 	sub.w	r8, r8, r3
 80128bc:	fa0f f888 	sxth.w	r8, r8
        for(y = 0; y < dest_h; y++) {
 80128c0:	2f00      	cmp	r7, #0
 80128c2:	dd66      	ble.n	8012992 <lv_draw_sw_img_decoded+0x310>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 80128c4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80128c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80128ca:	2500      	movs	r5, #0
 80128cc:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80128d0:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 80128d4:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80128d8:	469a      	mov	sl, r3
 80128da:	4652      	mov	r2, sl
 80128dc:	4621      	mov	r1, r4
 80128de:	4630      	mov	r0, r6
 80128e0:	f00f fc0e 	bl	8022100 <lv_memcpy>
            cbuf += dest_w;
 80128e4:	4456      	add	r6, sl
            src_tmp8 += src_stride_byte;
 80128e6:	445c      	add	r4, fp
        for(y = 0; y < dest_h; y++) {
 80128e8:	3501      	adds	r5, #1
 80128ea:	b22b      	sxth	r3, r5
 80128ec:	429f      	cmp	r7, r3
 80128ee:	dcf4      	bgt.n	80128da <lv_draw_sw_img_decoded+0x258>
 80128f0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 80128f4:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	; 0x76
 80128f8:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 80128fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128fe:	fb02 4403 	mla	r4, r2, r3, r4
 8012902:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012904:	441c      	add	r4, r3
 8012906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012908:	441c      	add	r4, r3
 801290a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801290c:	2500      	movs	r5, #0
 801290e:	4693      	mov	fp, r2
        for(y = 0; y < dest_h; y++) {
            lv_memcpy(abuf, src_tmp8, dest_w);
 8012910:	4642      	mov	r2, r8
 8012912:	4621      	mov	r1, r4
 8012914:	4630      	mov	r0, r6
 8012916:	f00f fbf3 	bl	8022100 <lv_memcpy>
            abuf += dest_w;
 801291a:	4446      	add	r6, r8
            src_tmp8 += src_stride;
 801291c:	445c      	add	r4, fp
        for(y = 0; y < dest_h; y++) {
 801291e:	3501      	adds	r5, #1
 8012920:	b22b      	sxth	r3, r5
 8012922:	429f      	cmp	r7, r3
 8012924:	dcf4      	bgt.n	8012910 <lv_draw_sw_img_decoded+0x28e>
 8012926:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 801292a:	e032      	b.n	8012992 <lv_draw_sw_img_decoded+0x310>
        uint32_t px_cnt = lv_area_get_size(dest_area);
 801292c:	a81d      	add	r0, sp, #116	; 0x74
 801292e:	f00e fbbc 	bl	80210aa <lv_area_get_size>
 8012932:	4680      	mov	r8, r0
        lv_memset_ff(abuf, px_cnt);
 8012934:	4601      	mov	r1, r0
 8012936:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012938:	f00f fdde 	bl	80224f8 <lv_memset_ff>
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 801293c:	f9bd 4076 	ldrsh.w	r4, [sp, #118]	; 0x76
 8012940:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8012944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012946:	fb04 3502 	mla	r5, r4, r2, r3
 801294a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801294c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8012950:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8012954:	3601      	adds	r6, #1
 8012956:	1af6      	subs	r6, r6, r3
        uint32_t dest_w = lv_area_get_width(dest_area);
 8012958:	b236      	sxth	r6, r6
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 801295a:	0076      	lsls	r6, r6, #1
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801295c:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8012960:	42a3      	cmp	r3, r4
 8012962:	db13      	blt.n	801298c <lv_draw_sw_img_decoded+0x30a>
        lv_color_t * cbuf_tmp = cbuf;
 8012964:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012966:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 801296a:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 801296e:	4632      	mov	r2, r6
 8012970:	4629      	mov	r1, r5
 8012972:	4638      	mov	r0, r7
 8012974:	f00f fbc4 	bl	8022100 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 8012978:	445d      	add	r5, fp
            cbuf_tmp += dest_w;
 801297a:	4437      	add	r7, r6
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 801297c:	3401      	adds	r4, #1
 801297e:	b224      	sxth	r4, r4
 8012980:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	; 0x7a
 8012984:	42a3      	cmp	r3, r4
 8012986:	daf2      	bge.n	801296e <lv_draw_sw_img_decoded+0x2ec>
 8012988:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801298c:	9b08      	ldr	r3, [sp, #32]
 801298e:	2b06      	cmp	r3, #6
 8012990:	d04d      	beq.n	8012a2e <lv_draw_sw_img_decoded+0x3ac>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 8012992:	f899 500a 	ldrb.w	r5, [r9, #10]
 8012996:	2d02      	cmp	r5, #2
 8012998:	f200 80be 	bhi.w	8012b18 <lv_draw_sw_img_decoded+0x496>
            if(mask_any) {
 801299c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f040 8101 	bne.w	8012ba6 <lv_draw_sw_img_decoded+0x524>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80129a4:	a91f      	add	r1, sp, #124	; 0x7c
 80129a6:	9807      	ldr	r0, [sp, #28]
 80129a8:	f7fe fc90 	bl	80112cc <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 80129ac:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 80129b0:	1c5a      	adds	r2, r3, #1
 80129b2:	b212      	sxth	r2, r2
 80129b4:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 80129b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80129ba:	440b      	add	r3, r1
 80129bc:	b21b      	sxth	r3, r3
 80129be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80129c0:	428b      	cmp	r3, r1
 80129c2:	bfa8      	it	ge
 80129c4:	460b      	movge	r3, r1
 80129c6:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
        while(blend_area.y1 <= y_last) {
 80129ca:	428a      	cmp	r2, r1
 80129cc:	f300 8111 	bgt.w	8012bf2 <lv_draw_sw_img_decoded+0x570>
    dest->x1 = src->x1;
 80129d0:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80129d4:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    dest->y1 = src->y1;
 80129d8:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    dest->x2 = src->x2;
 80129dc:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 80129e0:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    dest->y2 = src->y2;
 80129e4:	f8bd 309e 	ldrh.w	r3, [sp, #158]	; 0x9e
 80129e8:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 80129ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129ee:	885a      	ldrh	r2, [r3, #2]
 80129f0:	4252      	negs	r2, r2
 80129f2:	8819      	ldrh	r1, [r3, #0]
 80129f4:	4249      	negs	r1, r1
 80129f6:	b212      	sxth	r2, r2
 80129f8:	b209      	sxth	r1, r1
 80129fa:	a81d      	add	r0, sp, #116	; 0x74
 80129fc:	f00e fb72 	bl	80210e4 <lv_area_move>
            if(transform) {
 8012a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012a06:	f43f af3a 	beq.w	801287e <lv_draw_sw_img_decoded+0x1fc>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 8012a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a0c:	9305      	str	r3, [sp, #20]
 8012a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a10:	9304      	str	r3, [sp, #16]
 8012a12:	9b08      	ldr	r3, [sp, #32]
 8012a14:	9303      	str	r3, [sp, #12]
 8012a16:	f8cd 9008 	str.w	r9, [sp, #8]
 8012a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a20:	9200      	str	r2, [sp, #0]
 8012a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012a24:	a91d      	add	r1, sp, #116	; 0x74
 8012a26:	9807      	ldr	r0, [sp, #28]
 8012a28:	f7fc ff72 	bl	800f910 <lv_draw_transform>
 8012a2c:	e7b1      	b.n	8012992 <lv_draw_sw_img_decoded+0x310>
            for(i = 0; i < px_cnt; i++) {
 8012a2e:	f1b8 0f00 	cmp.w	r8, #0
 8012a32:	d0ae      	beq.n	8012992 <lv_draw_sw_img_decoded+0x310>
 8012a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012a36:	1e8b      	subs	r3, r1, #2
 8012a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a3a:	eb03 0848 	add.w	r8, r3, r8, lsl #1
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 8012a3e:	2000      	movs	r0, #0
 8012a40:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8012a44:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
 8012a48:	bf08      	it	eq
 8012a4a:	7010      	strbeq	r0, [r2, #0]
            for(i = 0; i < px_cnt; i++) {
 8012a4c:	3201      	adds	r2, #1
 8012a4e:	4598      	cmp	r8, r3
 8012a50:	d1f6      	bne.n	8012a40 <lv_draw_sw_img_decoded+0x3be>
 8012a52:	e79e      	b.n	8012992 <lv_draw_sw_img_decoded+0x310>
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8012a54:	f9bd 1076 	ldrsh.w	r1, [sp, #118]	; 0x76
 8012a58:	f9bd 2074 	ldrsh.w	r2, [sp, #116]	; 0x74
 8012a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a5e:	fb01 2603 	mla	r6, r1, r3, r2
 8012a62:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8012a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a68:	441e      	add	r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012a6a:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8012a6e:	b292      	uxth	r2, r2
 8012a70:	1c47      	adds	r7, r0, #1
 8012a72:	1abf      	subs	r7, r7, r2
 8012a74:	b2bb      	uxth	r3, r7
 8012a76:	b23f      	sxth	r7, r7
        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 8012a78:	1a12      	subs	r2, r2, r0
 8012a7a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012a7c:	4402      	add	r2, r0
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8012a7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a82:	b214      	sxth	r4, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012a84:	f8bd 207a 	ldrh.w	r2, [sp, #122]	; 0x7a
 8012a88:	3201      	adds	r2, #1
 8012a8a:	1a51      	subs	r1, r2, r1
 8012a8c:	b20a      	sxth	r2, r1
        for(y = 0; y < dest_h; y++) {
 8012a8e:	2a00      	cmp	r2, #0
 8012a90:	f77f af7f 	ble.w	8012992 <lv_draw_sw_img_decoded+0x310>
            cbuf += dest_w;
 8012a94:	0078      	lsls	r0, r7, #1
 8012a96:	3b01      	subs	r3, #1
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012a9c:	18cd      	adds	r5, r1, r3
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012aa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8012aa6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8012aaa:	468e      	mov	lr, r1
 8012aac:	f04f 0c00 	mov.w	ip, #0
 8012ab0:	f8cd b064 	str.w	fp, [sp, #100]	; 0x64
 8012ab4:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
 8012ab8:	4692      	mov	sl, r2
 8012aba:	4683      	mov	fp, r0
 8012abc:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8012ac0:	46a1      	mov	r9, r4
 8012ac2:	e01f      	b.n	8012b04 <lv_draw_sw_img_decoded+0x482>
 8012ac4:	1cf3      	adds	r3, r6, #3
 8012ac6:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8012aca:	f1a8 0002 	sub.w	r0, r8, #2
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8012ace:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8012ad2:	f801 2f01 	strb.w	r2, [r1, #1]!
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 8012ad6:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 8012ada:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8012ade:	eb02 2204 	add.w	r2, r2, r4, lsl #8
 8012ae2:	f820 2f02 	strh.w	r2, [r0, #2]!
            for(x = 0; x < dest_w; x++) {
 8012ae6:	3303      	adds	r3, #3
 8012ae8:	42a9      	cmp	r1, r5
 8012aea:	d1f0      	bne.n	8012ace <lv_draw_sw_img_decoded+0x44c>
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 8012aec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012aee:	441e      	add	r6, r3
            cbuf += dest_w;
 8012af0:	44d8      	add	r8, fp
            abuf += dest_w;
 8012af2:	44be      	add	lr, r7
            src_tmp8 += src_new_line_step_byte;
 8012af4:	444e      	add	r6, r9
        for(y = 0; y < dest_h; y++) {
 8012af6:	f10c 0c01 	add.w	ip, ip, #1
 8012afa:	443d      	add	r5, r7
 8012afc:	fa0f f38c 	sxth.w	r3, ip
 8012b00:	459a      	cmp	sl, r3
 8012b02:	dd02      	ble.n	8012b0a <lv_draw_sw_img_decoded+0x488>
            for(x = 0; x < dest_w; x++) {
 8012b04:	2f00      	cmp	r7, #0
 8012b06:	dcdd      	bgt.n	8012ac4 <lv_draw_sw_img_decoded+0x442>
 8012b08:	e7f2      	b.n	8012af0 <lv_draw_sw_img_decoded+0x46e>
 8012b0a:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8012b0e:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012b12:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8012b16:	e73c      	b.n	8012992 <lv_draw_sw_img_decoded+0x310>
                lv_color_t recolor = draw_dsc->recolor;
 8012b18:	f899 7009 	ldrb.w	r7, [r9, #9]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 8012b1c:	08ff      	lsrs	r7, r7, #3
 8012b1e:	fb05 f707 	mul.w	r7, r5, r7
 8012b22:	f8b9 c008 	ldrh.w	ip, [r9, #8]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 8012b26:	f3cc 1c45 	ubfx	ip, ip, #5, #6
 8012b2a:	fb05 fc0c 	mul.w	ip, r5, ip
 8012b2e:	f899 e008 	ldrb.w	lr, [r9, #8]
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 8012b32:	f00e 0e1f 	and.w	lr, lr, #31
 8012b36:	fb05 fe0e 	mul.w	lr, r5, lr
                recolor_opa = 255 - recolor_opa;
 8012b3a:	43ed      	mvns	r5, r5
 8012b3c:	b2ed      	uxtb	r5, r5
                for(i = 0; i < buf_size; i++) {
 8012b3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f43f af2b 	beq.w	801299c <lv_draw_sw_img_decoded+0x31a>
 8012b46:	9909      	ldr	r1, [sp, #36]	; 0x24
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8012b48:	784b      	ldrb	r3, [r1, #1]
 8012b4a:	08db      	lsrs	r3, r3, #3
 8012b4c:	fb05 7303 	mla	r3, r5, r3, r7
 8012b50:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 8012b54:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8012b58:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8012b5c:	880a      	ldrh	r2, [r1, #0]
 8012b5e:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8012b62:	fb05 c202 	mla	r2, r5, r2, ip
 8012b66:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 8012b6a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 8012b6e:	f3c2 52c5 	ubfx	r2, r2, #23, #6
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 8012b72:	780c      	ldrb	r4, [r1, #0]
 8012b74:	f004 001f 	and.w	r0, r4, #31
 8012b78:	fb05 e000 	mla	r0, r5, r0, lr
 8012b7c:	eb00 2600 	add.w	r6, r0, r0, lsl #8
 8012b80:	eb00 10c6 	add.w	r0, r0, r6, lsl #7
 8012b84:	0dc0      	lsrs	r0, r0, #23
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 8012b86:	f360 0404 	bfi	r4, r0, #0, #5
 8012b8a:	700c      	strb	r4, [r1, #0]
 8012b8c:	8808      	ldrh	r0, [r1, #0]
 8012b8e:	f362 104a 	bfi	r0, r2, #5, #6
 8012b92:	8008      	strh	r0, [r1, #0]
 8012b94:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8012b98:	f363 00c7 	bfi	r0, r3, #3, #5
 8012b9c:	7048      	strb	r0, [r1, #1]
                for(i = 0; i < buf_size; i++) {
 8012b9e:	3102      	adds	r1, #2
 8012ba0:	4559      	cmp	r1, fp
 8012ba2:	d1d1      	bne.n	8012b48 <lv_draw_sw_img_decoded+0x4c6>
 8012ba4:	e6fa      	b.n	801299c <lv_draw_sw_img_decoded+0x31a>
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8012ba6:	f9bd 409a 	ldrsh.w	r4, [sp, #154]	; 0x9a
 8012baa:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 8012bae:	42a3      	cmp	r3, r4
 8012bb0:	f6ff aef8 	blt.w	80129a4 <lv_draw_sw_img_decoded+0x322>
                lv_opa_t * mask_buf_tmp = mask_buf;
 8012bb4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012bb6:	2602      	movs	r6, #2
 8012bb8:	e00b      	b.n	8012bd2 <lv_draw_sw_img_decoded+0x550>
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 8012bba:	2802      	cmp	r0, #2
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012bbc:	bf08      	it	eq
 8012bbe:	f88d 608c 	strbeq.w	r6, [sp, #140]	; 0x8c
                    mask_buf_tmp += blend_w;
 8012bc2:	4455      	add	r5, sl
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 8012bc4:	3401      	adds	r4, #1
 8012bc6:	b224      	sxth	r4, r4
 8012bc8:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 8012bcc:	42a3      	cmp	r3, r4
 8012bce:	f6ff aee9 	blt.w	80129a4 <lv_draw_sw_img_decoded+0x322>
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 8012bd2:	4653      	mov	r3, sl
 8012bd4:	4622      	mov	r2, r4
 8012bd6:	f9bd 1098 	ldrsh.w	r1, [sp, #152]	; 0x98
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f7fc f9f2 	bl	800efc4 <lv_draw_mask_apply>
                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d1ea      	bne.n	8012bba <lv_draw_sw_img_decoded+0x538>
                        lv_memset_00(mask_buf_tmp, blend_w);
 8012be4:	4651      	mov	r1, sl
 8012be6:	4628      	mov	r0, r5
 8012be8:	f00f fc20 	bl	802242c <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8012bec:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
 8012bf0:	e7e7      	b.n	8012bc2 <lv_draw_sw_img_decoded+0x540>
        lv_mem_buf_release(mask_buf);
 8012bf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012bf4:	f00f fa4e 	bl	8022094 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 8012bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bfa:	f00f fa4b 	bl	8022094 <lv_mem_buf_release>
}
 8012bfe:	b02b      	add	sp, #172	; 0xac
 8012c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c04 <lv_draw_sw_layer_create>:


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 8012c04:	f012 0f01 	tst.w	r2, #1
 8012c08:	d17a      	bne.n	8012d00 <lv_draw_sw_layer_create+0xfc>
{
 8012c0a:	b570      	push	{r4, r5, r6, lr}
 8012c0c:	4606      	mov	r6, r0
 8012c0e:	460c      	mov	r4, r1
 8012c10:	4615      	mov	r5, r2
        return NULL;
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 8012c12:	f012 0f02 	tst.w	r2, #2
 8012c16:	d042      	beq.n	8012c9e <lv_draw_sw_layer_create+0x9a>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 8012c18:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8012c1a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8012c1e:	f362 031e 	bfi	r3, r2, #0, #31
 8012c22:	628b      	str	r3, [r1, #40]	; 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8012c24:	4608      	mov	r0, r1
 8012c26:	f00e fa40 	bl	80210aa <lv_area_get_size>
 8012c2a:	0042      	lsls	r2, r0, #1
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 8012c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012c2e:	f3c3 031e 	ubfx	r3, r3, #0, #31
 8012c32:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 8012c36:	d903      	bls.n	8012c40 <lv_draw_sw_layer_create+0x3c>
 8012c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012c3a:	f362 031e 	bfi	r3, r2, #0, #31
 8012c3e:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8012c40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012c42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012c46:	f00f f971 	bl	8021f2c <lv_mem_alloc>
 8012c4a:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8012c4c:	b1d8      	cbz	r0, 8012c86 <lv_draw_sw_layer_create+0x82>
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
            if(layer_sw_ctx->base_draw.buf == NULL) {
                return NULL;
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8012c4e:	f104 0308 	add.w	r3, r4, #8
 8012c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012c56:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 8012c5a:	8863      	ldrh	r3, [r4, #2]
 8012c5c:	81e3      	strh	r3, [r4, #14]
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 8012c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012c60:	f3c3 031e 	ubfx	r3, r3, #0, #31
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8012c64:	89a2      	ldrh	r2, [r4, #12]
 8012c66:	3201      	adds	r2, #1
 8012c68:	8921      	ldrh	r1, [r4, #8]
 8012c6a:	1a52      	subs	r2, r2, r1
 8012c6c:	b212      	sxth	r2, r2
 8012c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c72:	4a24      	ldr	r2, [pc, #144]	; (8012d04 <lv_draw_sw_layer_create+0x100>)
 8012c74:	fb82 1203 	smull	r1, r2, r2, r3
 8012c78:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8012c7c:	8222      	strh	r2, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 8012c7e:	085b      	lsrs	r3, r3, #1
 8012c80:	8263      	strh	r3, [r4, #18]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
    }

    return layer_ctx;
 8012c82:	4620      	mov	r0, r4
}
 8012c84:	bd70      	pop	{r4, r5, r6, pc}
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 8012c86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012c88:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012c8c:	f360 031e 	bfi	r3, r0, #0, #31
 8012c90:	62a3      	str	r3, [r4, #40]	; 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8012c92:	f00f f94b 	bl	8021f2c <lv_mem_alloc>
 8012c96:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	d1d8      	bne.n	8012c4e <lv_draw_sw_layer_create+0x4a>
 8012c9c:	e7f2      	b.n	8012c84 <lv_draw_sw_layer_create+0x80>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 8012c9e:	f101 0308 	add.w	r3, r1, #8
 8012ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ca6:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 8012caa:	4620      	mov	r0, r4
 8012cac:	f00e f9fd 	bl	80210aa <lv_area_get_size>
 8012cb0:	0040      	lsls	r0, r0, #1
 8012cb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012cb8:	f360 031e 	bfi	r3, r0, #0, #31
 8012cbc:	62a3      	str	r3, [r4, #40]	; 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 8012cbe:	f00f f935 	bl	8021f2c <lv_mem_alloc>
 8012cc2:	6160      	str	r0, [r4, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 8012cc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012cc6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012cca:	f00f fbaf 	bl	802242c <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8012cce:	f005 0501 	and.w	r5, r5, #1
 8012cd2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8012cd6:	f365 13c7 	bfi	r3, r5, #7, #1
 8012cda:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 8012cde:	6960      	ldr	r0, [r4, #20]
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d0cf      	beq.n	8012c84 <lv_draw_sw_layer_create+0x80>
        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 8012ce4:	6030      	str	r0, [r6, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 8012ce6:	f104 0308 	add.w	r3, r4, #8
 8012cea:	6073      	str	r3, [r6, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 8012cec:	60b3      	str	r3, [r6, #8]
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8012cee:	f7fa f871 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 8012cf2:	6803      	ldr	r3, [r0, #0]
 8012cf4:	7c1a      	ldrb	r2, [r3, #16]
 8012cf6:	f365 1286 	bfi	r2, r5, #6, #1
 8012cfa:	741a      	strb	r2, [r3, #16]
    return layer_ctx;
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	e7c1      	b.n	8012c84 <lv_draw_sw_layer_create+0x80>
        return NULL;
 8012d00:	2000      	movs	r0, #0
}
 8012d02:	4770      	bx	lr
 8012d04:	55555556 	.word	0x55555556

08012d08 <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 8012d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0a:	4605      	mov	r5, r0
 8012d0c:	460c      	mov	r4, r1
 8012d0e:	4617      	mov	r7, r2

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8012d10:	f7fa f860 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
 8012d14:	4606      	mov	r6, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 8012d16:	f017 0f01 	tst.w	r7, #1
 8012d1a:	d110      	bne.n	8012d3e <lv_draw_sw_layer_adjust+0x36>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
        layer_sw_ctx->has_alpha = 1;
        disp_refr->driver->screen_transp = 1;
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 8012d1c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8012d20:	f36f 13c7 	bfc	r3, #7, #1
 8012d24:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 0;
 8012d28:	6803      	ldr	r3, [r0, #0]
 8012d2a:	7c1a      	ldrb	r2, [r3, #16]
 8012d2c:	f36f 1286 	bfc	r2, #6, #1
 8012d30:	741a      	strb	r2, [r3, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 8012d32:	6963      	ldr	r3, [r4, #20]
 8012d34:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 8012d36:	3408      	adds	r4, #8
 8012d38:	606c      	str	r4, [r5, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 8012d3a:	60ac      	str	r4, [r5, #8]
}
 8012d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 8012d3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012d40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d44:	6960      	ldr	r0, [r4, #20]
 8012d46:	f00f fb71 	bl	802242c <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 8012d4a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8012d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d52:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
        disp_refr->driver->screen_transp = 1;
 8012d56:	6832      	ldr	r2, [r6, #0]
 8012d58:	7c13      	ldrb	r3, [r2, #16]
 8012d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d5e:	7413      	strb	r3, [r2, #16]
 8012d60:	e7e7      	b.n	8012d32 <lv_draw_sw_layer_adjust+0x2a>

08012d62 <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 8012d62:	b570      	push	{r4, r5, r6, lr}
 8012d64:	b084      	sub	sp, #16
 8012d66:	4604      	mov	r4, r0
 8012d68:	460d      	mov	r5, r1
 8012d6a:	4616      	mov	r6, r2
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 8012d6c:	6803      	ldr	r3, [r0, #0]
 8012d6e:	9303      	str	r3, [sp, #12]
    img.header.always_zero = 0;
 8012d70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d74:	f36f 1347 	bfc	r3, #5, #3
 8012d78:	f88d 3004 	strb.w	r3, [sp, #4]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 8012d7c:	6842      	ldr	r2, [r0, #4]
 8012d7e:	8893      	ldrh	r3, [r2, #4]
 8012d80:	3301      	adds	r3, #1
 8012d82:	8811      	ldrh	r1, [r2, #0]
 8012d84:	1a5b      	subs	r3, r3, r1
 8012d86:	9901      	ldr	r1, [sp, #4]
 8012d88:	f363 2194 	bfi	r1, r3, #10, #11
 8012d8c:	9101      	str	r1, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8012d8e:	88d3      	ldrh	r3, [r2, #6]
 8012d90:	3301      	adds	r3, #1
 8012d92:	8852      	ldrh	r2, [r2, #2]
 8012d94:	1a9b      	subs	r3, r3, r2
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 8012d96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012d9a:	f363 124f 	bfi	r2, r3, #5, #11
 8012d9e:	f8ad 2006 	strh.w	r2, [sp, #6]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 8012da2:	f995 302b 	ldrsb.w	r3, [r5, #43]	; 0x2b
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	bfb4      	ite	lt
 8012daa:	2205      	movlt	r2, #5
 8012dac:	2204      	movge	r2, #4
 8012dae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012db2:	f362 0304 	bfi	r3, r2, #0, #5
 8012db6:	f88d 3004 	strb.w	r3, [sp, #4]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 8012dba:	6a2b      	ldr	r3, [r5, #32]
 8012dbc:	6003      	str	r3, [r0, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8012dbe:	69eb      	ldr	r3, [r5, #28]
 8012dc0:	6043      	str	r3, [r0, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 8012dc2:	69ab      	ldr	r3, [r5, #24]
 8012dc4:	6083      	str	r3, [r0, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8012dc6:	f7fa f805 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8012dca:	6803      	ldr	r3, [r0, #0]
 8012dcc:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8012dd0:	7c1a      	ldrb	r2, [r3, #16]
 8012dd2:	f361 1286 	bfi	r2, r1, #6, #1
 8012dd6:	741a      	strb	r2, [r3, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 8012dd8:	ab01      	add	r3, sp, #4
 8012dda:	f105 0208 	add.w	r2, r5, #8
 8012dde:	4631      	mov	r1, r6
 8012de0:	4620      	mov	r0, r4
 8012de2:	f7fa fe05 	bl	800d9f0 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 8012de6:	4620      	mov	r0, r4
 8012de8:	f7fa faf9 	bl	800d3de <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 8012dec:	a801      	add	r0, sp, #4
 8012dee:	f7fc fe53 	bl	800fa98 <lv_img_cache_invalidate_src>
}
 8012df2:	b004      	add	sp, #16
 8012df4:	bd70      	pop	{r4, r5, r6, pc}

08012df6 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8012df6:	b508      	push	{r3, lr}
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 8012df8:	6948      	ldr	r0, [r1, #20]
 8012dfa:	f00f f8b5 	bl	8021f68 <lv_mem_free>
}
 8012dfe:	bd08      	pop	{r3, pc}

08012e00 <lv_draw_sw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_sw_letter(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,  const lv_point_t * pos_p,
                       uint32_t letter)
{
 8012e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e04:	b0a7      	sub	sp, #156	; 0x9c
 8012e06:	4604      	mov	r4, r0
 8012e08:	460f      	mov	r7, r1
 8012e0a:	4615      	mov	r5, r2
 8012e0c:	461e      	mov	r6, r3
    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 8012e0e:	2300      	movs	r3, #0
 8012e10:	4632      	mov	r2, r6
 8012e12:	a922      	add	r1, sp, #136	; 0x88
 8012e14:	6838      	ldr	r0, [r7, #0]
 8012e16:	f00d fb8d 	bl	8020534 <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 8012e1a:	2800      	cmp	r0, #0
 8012e1c:	d04f      	beq.n	8012ebe <lv_draw_sw_letter+0xbe>
        }
        return;
    }

    /*Don't draw anything if the character is empty. E.g. space*/
    if((g.box_h == 0) || (g.box_w == 0)) return;
 8012e1e:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d055      	beq.n	8012ed2 <lv_draw_sw_letter+0xd2>
 8012e26:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
 8012e2a:	2a00      	cmp	r2, #0
 8012e2c:	d051      	beq.n	8012ed2 <lv_draw_sw_letter+0xd2>

    lv_point_t gpos;
    gpos.x = pos_p->x + g.ofs_x;
 8012e2e:	f8b5 b000 	ldrh.w	fp, [r5]
 8012e32:	f8bd 1092 	ldrh.w	r1, [sp, #146]	; 0x92
 8012e36:	448b      	add	fp, r1
 8012e38:	fa1f f98b 	uxth.w	r9, fp
 8012e3c:	fa0f fb8b 	sxth.w	fp, fp
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it*/
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 8012e40:	68a1      	ldr	r1, [r4, #8]
 8012e42:	445a      	add	r2, fp
 8012e44:	f9b1 0000 	ldrsh.w	r0, [r1]
 8012e48:	4282      	cmp	r2, r0
 8012e4a:	db42      	blt.n	8012ed2 <lv_draw_sw_letter+0xd2>
 8012e4c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8012e50:	455a      	cmp	r2, fp
 8012e52:	db3e      	blt.n	8012ed2 <lv_draw_sw_letter+0xd2>
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 8012e54:	6838      	ldr	r0, [r7, #0]
 8012e56:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 8012e5a:	441a      	add	r2, r3
 8012e5c:	886d      	ldrh	r5, [r5, #2]
 8012e5e:	1aad      	subs	r5, r5, r2
 8012e60:	8902      	ldrh	r2, [r0, #8]
 8012e62:	4415      	add	r5, r2
 8012e64:	8942      	ldrh	r2, [r0, #10]
 8012e66:	1aad      	subs	r5, r5, r2
 8012e68:	fa1f fa85 	uxth.w	sl, r5
 8012e6c:	b22d      	sxth	r5, r5
       gpos.x > draw_ctx->clip_area->x2 ||
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8012e6e:	442b      	add	r3, r5
 8012e70:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 8012e74:	4293      	cmp	r3, r2
 8012e76:	db2c      	blt.n	8012ed2 <lv_draw_sw_letter+0xd2>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 8012e78:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012e7c:	42ab      	cmp	r3, r5
 8012e7e:	db28      	blt.n	8012ed2 <lv_draw_sw_letter+0xd2>
       gpos.y > draw_ctx->clip_area->y2)  {
        return;
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 8012e80:	4631      	mov	r1, r6
 8012e82:	9822      	ldr	r0, [sp, #136]	; 0x88
 8012e84:	f00d fb50 	bl	8020528 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 8012e88:	4606      	mov	r6, r0
 8012e8a:	b310      	cbz	r0, 8012ed2 <lv_draw_sw_letter+0xd2>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
        return;
    }

    if(g.resolved_font->subpx) {
 8012e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e8e:	7b1b      	ldrb	r3, [r3, #12]
 8012e90:	f013 0f03 	tst.w	r3, #3
 8012e94:	d11d      	bne.n	8012ed2 <lv_draw_sw_letter+0xd2>
{

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 8012e96:	f89d 3096 	ldrb.w	r3, [sp, #150]	; 0x96
 8012e9a:	f003 030f 	and.w	r3, r3, #15
    lv_opa_t opa = dsc->opa;
 8012e9e:	7eb8      	ldrb	r0, [r7, #26]
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 8012ea0:	2b03      	cmp	r3, #3
 8012ea2:	d061      	beq.n	8012f68 <lv_draw_sw_letter+0x168>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	2b07      	cmp	r3, #7
 8012ea8:	d813      	bhi.n	8012ed2 <lv_draw_sw_letter+0xd2>
 8012eaa:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012eae:	0129      	.short	0x0129
 8012eb0:	00120044 	.word	0x00120044
 8012eb4:	0012004c 	.word	0x0012004c
 8012eb8:	00120012 	.word	0x00120012
 8012ebc:	0054      	.short	0x0054
        if(letter >= 0x20 &&
 8012ebe:	2e1f      	cmp	r6, #31
 8012ec0:	d907      	bls.n	8012ed2 <lv_draw_sw_letter+0xd2>
 8012ec2:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012ec6:	429e      	cmp	r6, r3
 8012ec8:	d003      	beq.n	8012ed2 <lv_draw_sw_letter+0xd2>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 8012eca:	f242 030c 	movw	r3, #8204	; 0x200c
 8012ece:	429e      	cmp	r6, r3
 8012ed0:	d102      	bne.n	8012ed8 <lv_draw_sw_letter+0xd8>
}
 8012ed2:	b027      	add	sp, #156	; 0x9c
 8012ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 8012ed8:	8829      	ldrh	r1, [r5, #0]
 8012eda:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
 8012ede:	4419      	add	r1, r3
 8012ee0:	b289      	uxth	r1, r1
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 8012ee2:	886a      	ldrh	r2, [r5, #2]
 8012ee4:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8012ee8:	441a      	add	r2, r3
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 8012eea:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8012eee:	440b      	add	r3, r1
 8012ef0:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8012ef4:	4410      	add	r0, r2
 8012ef6:	b200      	sxth	r0, r0
 8012ef8:	9000      	str	r0, [sp, #0]
 8012efa:	b21b      	sxth	r3, r3
 8012efc:	b212      	sxth	r2, r2
 8012efe:	b209      	sxth	r1, r1
 8012f00:	a812      	add	r0, sp, #72	; 0x48
 8012f02:	f00e f8c1 	bl	8021088 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 8012f06:	a814      	add	r0, sp, #80	; 0x50
 8012f08:	f7fc fc90 	bl	800f82c <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 8012f0c:	2302      	movs	r3, #2
 8012f0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
            glyph_dsc.outline_opa = LV_OPA_MIN;
 8012f12:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 8012f16:	f88d 3086 	strb.w	r3, [sp, #134]	; 0x86
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 8012f1a:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
            glyph_dsc.border_color = dsc->color;
 8012f1e:	89bb      	ldrh	r3, [r7, #12]
 8012f20:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            glyph_dsc.border_width = 1;
 8012f24:	2301      	movs	r3, #1
 8012f26:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	aa12      	add	r2, sp, #72	; 0x48
 8012f2e:	a914      	add	r1, sp, #80	; 0x50
 8012f30:	4620      	mov	r0, r4
 8012f32:	4798      	blx	r3
 8012f34:	e7cd      	b.n	8012ed2 <lv_draw_sw_letter+0xd2>
    switch(bpp) {
 8012f36:	f04f 0802 	mov.w	r8, #2
 8012f3a:	2304      	movs	r3, #4
 8012f3c:	22c0      	movs	r2, #192	; 0xc0
 8012f3e:	9202      	str	r2, [sp, #8]
 8012f40:	4ab1      	ldr	r2, [pc, #708]	; (8013208 <lv_draw_sw_letter+0x408>)
 8012f42:	920f      	str	r2, [sp, #60]	; 0x3c
 8012f44:	e017      	b.n	8012f76 <lv_draw_sw_letter+0x176>
    uint32_t bpp = g->bpp;
 8012f46:	f04f 0804 	mov.w	r8, #4
            shades = 4;
            break;
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
            bitmask_init  = 0xF0;
            shades = 16;
 8012f4a:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 8012f4c:	22f0      	movs	r2, #240	; 0xf0
 8012f4e:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8012f50:	4aae      	ldr	r2, [pc, #696]	; (801320c <lv_draw_sw_letter+0x40c>)
 8012f52:	920f      	str	r2, [sp, #60]	; 0x3c
 8012f54:	e00f      	b.n	8012f76 <lv_draw_sw_letter+0x176>
    uint32_t bpp = g->bpp;
 8012f56:	f04f 0808 	mov.w	r8, #8
            break;
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
            bitmask_init  = 0xFF;
            shades = 256;
 8012f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
            bitmask_init  = 0xFF;
 8012f5e:	22ff      	movs	r2, #255	; 0xff
 8012f60:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 8012f62:	4aab      	ldr	r2, [pc, #684]	; (8013210 <lv_draw_sw_letter+0x410>)
 8012f64:	920f      	str	r2, [sp, #60]	; 0x3c
            break;       /*No opa table, pixel value will be used directly*/
 8012f66:	e006      	b.n	8012f76 <lv_draw_sw_letter+0x176>
    if(bpp == 3) bpp = 4;
 8012f68:	f04f 0804 	mov.w	r8, #4
            shades = 16;
 8012f6c:	2310      	movs	r3, #16
            bitmask_init  = 0xF0;
 8012f6e:	22f0      	movs	r2, #240	; 0xf0
 8012f70:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 8012f72:	4aa6      	ldr	r2, [pc, #664]	; (801320c <lv_draw_sw_letter+0x40c>)
 8012f74:	920f      	str	r2, [sp, #60]	; 0x3c
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 8012f76:	28fc      	cmp	r0, #252	; 0xfc
 8012f78:	d81d      	bhi.n	8012fb6 <lv_draw_sw_letter+0x1b6>
        if(prev_opa != opa || prev_bpp != bpp) {
 8012f7a:	4aa6      	ldr	r2, [pc, #664]	; (8013214 <lv_draw_sw_letter+0x414>)
 8012f7c:	7812      	ldrb	r2, [r2, #0]
 8012f7e:	4282      	cmp	r2, r0
 8012f80:	f000 80c6 	beq.w	8013110 <lv_draw_sw_letter+0x310>
 8012f84:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8012f88:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8012f8c:	49a2      	ldr	r1, [pc, #648]	; (8013218 <lv_draw_sw_letter+0x418>)
 8012f8e:	3b01      	subs	r3, #1
 8012f90:	449c      	add	ip, r3
            uint32_t i;
            for(i = 0; i < shades; i++) {
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 8012f92:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012f96:	2bff      	cmp	r3, #255	; 0xff
 8012f98:	bf1a      	itte	ne
 8012f9a:	4343      	mulne	r3, r0
 8012f9c:	0a1b      	lsrne	r3, r3, #8
 8012f9e:	4603      	moveq	r3, r0
 8012fa0:	f801 3b01 	strb.w	r3, [r1], #1
            for(i = 0; i < shades; i++) {
 8012fa4:	4562      	cmp	r2, ip
 8012fa6:	d1f4      	bne.n	8012f92 <lv_draw_sw_letter+0x192>
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
 8012fa8:	4b9a      	ldr	r3, [pc, #616]	; (8013214 <lv_draw_sw_letter+0x414>)
 8012faa:	7018      	strb	r0, [r3, #0]
        prev_bpp = bpp;
 8012fac:	4b9b      	ldr	r3, [pc, #620]	; (801321c <lv_draw_sw_letter+0x41c>)
 8012fae:	f8c3 8000 	str.w	r8, [r3]
        bpp_opa_table_p = opa_table;
 8012fb2:	4b99      	ldr	r3, [pc, #612]	; (8013218 <lv_draw_sw_letter+0x418>)
 8012fb4:	930f      	str	r3, [sp, #60]	; 0x3c
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 8012fb6:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8012fba:	9305      	str	r3, [sp, #20]
    int32_t box_h = g->box_h;
 8012fbc:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8012fc0:	9206      	str	r2, [sp, #24]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 8012fc2:	fb08 f203 	mul.w	r2, r8, r3

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 8012fc6:	68a3      	ldr	r3, [r4, #8]
 8012fc8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012fcc:	458b      	cmp	fp, r1
 8012fce:	bfb4      	ite	lt
 8012fd0:	eba1 010b 	sublt.w	r1, r1, fp
 8012fd4:	2100      	movge	r1, #0
 8012fd6:	9103      	str	r1, [sp, #12]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 8012fd8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8012fdc:	9805      	ldr	r0, [sp, #20]
 8012fde:	4458      	add	r0, fp
 8012fe0:	4288      	cmp	r0, r1
 8012fe2:	bfc6      	itte	gt
 8012fe4:	eba1 010b 	subgt.w	r1, r1, fp
 8012fe8:	3101      	addgt	r1, #1
 8012fea:	9905      	ldrle	r1, [sp, #20]
 8012fec:	9104      	str	r1, [sp, #16]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 8012fee:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8012ff2:	428d      	cmp	r5, r1
 8012ff4:	bfb4      	ite	lt
 8012ff6:	eba1 0b05 	sublt.w	fp, r1, r5
 8012ffa:	f04f 0b00 	movge.w	fp, #0
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 8012ffe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013002:	9906      	ldr	r1, [sp, #24]
 8013004:	1869      	adds	r1, r5, r1
 8013006:	4299      	cmp	r1, r3
 8013008:	bfc6      	itte	gt
 801300a:	1b5b      	subgt	r3, r3, r5
 801300c:	3301      	addgt	r3, #1
 801300e:	9b06      	ldrle	r3, [sp, #24]
 8013010:	9307      	str	r3, [sp, #28]

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 8013012:	9b03      	ldr	r3, [sp, #12]
 8013014:	930b      	str	r3, [sp, #44]	; 0x2c
 8013016:	fb03 f508 	mul.w	r5, r3, r8
 801301a:	fb0b 5502 	mla	r5, fp, r2, r5
    map_p += bit_ofs >> 3;
 801301e:	eb06 06d5 	add.w	r6, r6, r5, lsr #3

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 8013022:	f005 0507 	and.w	r5, r5, #7

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013026:	211c      	movs	r1, #28
 8013028:	a814      	add	r0, sp, #80	; 0x50
 801302a:	f00f f9ff 	bl	802242c <lv_memset_00>
    blend_dsc.color = dsc->color;
 801302e:	89bb      	ldrh	r3, [r7, #12]
 8013030:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    blend_dsc.opa = dsc->opa;
 8013034:	7ebb      	ldrb	r3, [r7, #26]
 8013036:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    blend_dsc.blend_mode = dsc->blend_mode;
 801303a:	7fbb      	ldrb	r3, [r7, #30]
 801303c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8013040:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 8013044:	f7f9 fec6 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
 8013048:	f00d fd18 	bl	8020a7c <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 801304c:	9b06      	ldr	r3, [sp, #24]
 801304e:	9a05      	ldr	r2, [sp, #20]
 8013050:	fb02 f303 	mul.w	r3, r2, r3
 8013054:	461f      	mov	r7, r3
 8013056:	4283      	cmp	r3, r0
 8013058:	bfa8      	it	ge
 801305a:	4607      	movge	r7, r0
 801305c:	9708      	str	r7, [sp, #32]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 801305e:	4638      	mov	r0, r7
 8013060:	f00e ffb6 	bl	8021fd0 <lv_mem_buf_get>
    blend_dsc.mask_buf = mask_buf;
 8013064:	9006      	str	r0, [sp, #24]
 8013066:	9017      	str	r0, [sp, #92]	; 0x5c
    int32_t mask_p = 0;

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 8013068:	9803      	ldr	r0, [sp, #12]
 801306a:	eb09 0200 	add.w	r2, r9, r0
 801306e:	b290      	uxth	r0, r2
 8013070:	b212      	sxth	r2, r2
 8013072:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos->x - 1;
 8013076:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 801307a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801307e:	444b      	add	r3, r9
 8013080:	b21f      	sxth	r7, r3
 8013082:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos->y;
 8013086:	44da      	add	sl, fp
 8013088:	fa0f f18a 	sxth.w	r1, sl
 801308c:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
 8013090:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013094:	f1c0 0001 	rsb	r0, r0, #1
 8013098:	4403      	add	r3, r0
 801309a:	fa0f fc83 	sxth.w	ip, r3
 801309e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    dest->x1 = src->x1;
 80130a2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    dest->y1 = src->y1;
 80130a6:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    dest->x2 = src->x2;
 80130aa:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
    mask_area.y2 = mask_area.y1 + row_end;
 80130ae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80130b2:	44e2      	add	sl, ip
 80130b4:	f8ad a04e 	strh.w	sl, [sp, #78]	; 0x4e
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 80130b8:	a812      	add	r0, sp, #72	; 0x48
 80130ba:	f7fc f80b 	bl	800f0d4 <lv_draw_mask_is_any>
 80130be:	9009      	str	r0, [sp, #36]	; 0x24
#endif
    blend_dsc.blend_area = &fill_area;
 80130c0:	ab10      	add	r3, sp, #64	; 0x40
 80130c2:	9314      	str	r3, [sp, #80]	; 0x50
    blend_dsc.mask_area = &fill_area;
 80130c4:	9319      	str	r3, [sp, #100]	; 0x64

    uint32_t col_bit_max = 8 - bpp;
 80130c6:	f1c8 0708 	rsb	r7, r8, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 80130ca:	9b05      	ldr	r3, [sp, #20]
 80130cc:	9903      	ldr	r1, [sp, #12]
 80130ce:	440b      	add	r3, r1
 80130d0:	464a      	mov	r2, r9
 80130d2:	1a9b      	subs	r3, r3, r2
 80130d4:	fb08 f003 	mul.w	r0, r8, r3
 80130d8:	900a      	str	r0, [sp, #40]	; 0x28

    for(row = row_start ; row < row_end; row++) {
 80130da:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80130de:	45e3      	cmp	fp, ip
 80130e0:	f280 8087 	bge.w	80131f2 <lv_draw_sw_letter+0x3f2>
    int32_t mask_p = 0;
 80130e4:	f04f 0900 	mov.w	r9, #0
 80130e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80130ea:	1a53      	subs	r3, r2, r1
 80130ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80130ee:	9a06      	ldr	r2, [sp, #24]
 80130f0:	18d3      	adds	r3, r2, r3
 80130f2:	930c      	str	r3, [sp, #48]	; 0x30
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
            if(letter_px) {
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
            }
            else {
                mask_buf[mask_p] = 0;
 80130f4:	46ca      	mov	sl, r9
 80130f6:	940e      	str	r4, [sp, #56]	; 0x38
 80130f8:	464c      	mov	r4, r9
 80130fa:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80130fe:	e043      	b.n	8013188 <lv_draw_sw_letter+0x388>
    uint32_t bpp = g->bpp;
 8013100:	f04f 0801 	mov.w	r8, #1
            shades = 2;
 8013104:	2302      	movs	r3, #2
            bitmask_init  = 0x80;
 8013106:	2280      	movs	r2, #128	; 0x80
 8013108:	9202      	str	r2, [sp, #8]
            bpp_opa_table_p = _lv_bpp1_opa_table;
 801310a:	4a45      	ldr	r2, [pc, #276]	; (8013220 <lv_draw_sw_letter+0x420>)
 801310c:	920f      	str	r2, [sp, #60]	; 0x3c
 801310e:	e732      	b.n	8012f76 <lv_draw_sw_letter+0x176>
        if(prev_opa != opa || prev_bpp != bpp) {
 8013110:	4a42      	ldr	r2, [pc, #264]	; (801321c <lv_draw_sw_letter+0x41c>)
 8013112:	6812      	ldr	r2, [r2, #0]
 8013114:	4542      	cmp	r2, r8
 8013116:	f47f af35 	bne.w	8012f84 <lv_draw_sw_letter+0x184>
 801311a:	e745      	b.n	8012fa8 <lv_draw_sw_letter+0x1a8>
                bitmask = bitmask >> bpp;
            }
            else {
                col_bit = 0;
                bitmask = bitmask_init;
                map_p++;
 801311c:	3601      	adds	r6, #1
                bitmask = bitmask_init;
 801311e:	9902      	ldr	r1, [sp, #8]
                col_bit = 0;
 8013120:	2500      	movs	r5, #0
        for(col = col_start; col < col_end; col++) {
 8013122:	3201      	adds	r2, #1
 8013124:	4594      	cmp	ip, r2
 8013126:	d012      	beq.n	801314e <lv_draw_sw_letter+0x34e>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 8013128:	7833      	ldrb	r3, [r6, #0]
 801312a:	400b      	ands	r3, r1
 801312c:	1b78      	subs	r0, r7, r5
 801312e:	40c3      	lsrs	r3, r0
            if(letter_px) {
 8013130:	f013 0fff 	tst.w	r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 8013134:	bf1d      	ittte	ne
 8013136:	b2db      	uxtbne	r3, r3
 8013138:	f819 3003 	ldrbne.w	r3, [r9, r3]
 801313c:	7013      	strbne	r3, [r2, #0]
                mask_buf[mask_p] = 0;
 801313e:	f882 a000 	strbeq.w	sl, [r2]
            if(col_bit < col_bit_max) {
 8013142:	42af      	cmp	r7, r5
 8013144:	d9ea      	bls.n	801311c <lv_draw_sw_letter+0x31c>
                col_bit += bpp;
 8013146:	4445      	add	r5, r8
                bitmask = bitmask >> bpp;
 8013148:	fa21 f108 	lsr.w	r1, r1, r8
 801314c:	e7e9      	b.n	8013122 <lv_draw_sw_letter+0x322>
            }

            /*Next mask byte*/
            mask_p++;
 801314e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013150:	4473      	add	r3, lr
 8013152:	9305      	str	r3, [sp, #20]
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 8013154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013156:	bb3b      	cbnz	r3, 80131a8 <lv_draw_sw_letter+0x3a8>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 8013158:	9b04      	ldr	r3, [sp, #16]
 801315a:	9a03      	ldr	r2, [sp, #12]
 801315c:	1a9b      	subs	r3, r3, r2
 801315e:	9c05      	ldr	r4, [sp, #20]
 8013160:	4423      	add	r3, r4
 8013162:	9a08      	ldr	r2, [sp, #32]
 8013164:	429a      	cmp	r2, r3
 8013166:	d932      	bls.n	80131ce <lv_draw_sw_letter+0x3ce>
            fill_area.y2 ++;
 8013168:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801316c:	3301      	adds	r3, #1
 801316e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area.y1 = fill_area.y2 + 1;
            fill_area.y2 = fill_area.y1;
            mask_p = 0;
        }

        col_bit += col_bit_row_ofs;
 8013172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013174:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
 8013176:	eb06 06d5 	add.w	r6, r6, r5, lsr #3
        col_bit = col_bit & 0x7;
 801317a:	f005 0507 	and.w	r5, r5, #7
    for(row = row_start ; row < row_end; row++) {
 801317e:	f10b 0b01 	add.w	fp, fp, #1
 8013182:	9b07      	ldr	r3, [sp, #28]
 8013184:	455b      	cmp	r3, fp
 8013186:	d033      	beq.n	80131f0 <lv_draw_sw_letter+0x3f0>
        bitmask = bitmask_init >> col_bit;
 8013188:	9b02      	ldr	r3, [sp, #8]
 801318a:	fa23 f105 	lsr.w	r1, r3, r5
        for(col = col_start; col < col_end; col++) {
 801318e:	9b03      	ldr	r3, [sp, #12]
 8013190:	9a04      	ldr	r2, [sp, #16]
 8013192:	4293      	cmp	r3, r2
 8013194:	da06      	bge.n	80131a4 <lv_draw_sw_letter+0x3a4>
 8013196:	46a6      	mov	lr, r4
 8013198:	9b06      	ldr	r3, [sp, #24]
 801319a:	191a      	adds	r2, r3, r4
 801319c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801319e:	eb03 0c04 	add.w	ip, r3, r4
 80131a2:	e7c1      	b.n	8013128 <lv_draw_sw_letter+0x328>
 80131a4:	9405      	str	r4, [sp, #20]
 80131a6:	e7d5      	b.n	8013154 <lv_draw_sw_letter+0x354>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 80131a8:	9b06      	ldr	r3, [sp, #24]
 80131aa:	441c      	add	r4, r3
 80131ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131ae:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80131b2:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80131b6:	4620      	mov	r0, r4
 80131b8:	f7fb ff04 	bl	800efc4 <lv_draw_mask_apply>
 80131bc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 80131c0:	2800      	cmp	r0, #0
 80131c2:	d1c9      	bne.n	8013158 <lv_draw_sw_letter+0x358>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 80131c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80131c6:	4620      	mov	r0, r4
 80131c8:	f00f f930 	bl	802242c <lv_memset_00>
 80131cc:	e7c4      	b.n	8013158 <lv_draw_sw_letter+0x358>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80131ce:	2302      	movs	r3, #2
 80131d0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80131d4:	a914      	add	r1, sp, #80	; 0x50
 80131d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80131d8:	f7fe f878 	bl	80112cc <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 80131dc:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 80131e0:	3301      	adds	r3, #1
 80131e2:	b21b      	sxth	r3, r3
 80131e4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
 80131e8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
 80131ec:	4654      	mov	r4, sl
 80131ee:	e7c0      	b.n	8013172 <lv_draw_sw_letter+0x372>
 80131f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 80131f2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80131f6:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80131fa:	429a      	cmp	r2, r3
 80131fc:	d112      	bne.n	8013224 <lv_draw_sw_letter+0x424>
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 80131fe:	9806      	ldr	r0, [sp, #24]
 8013200:	f00e ff48 	bl	8022094 <lv_mem_buf_release>
 8013204:	e665      	b.n	8012ed2 <lv_draw_sw_letter+0xd2>
 8013206:	bf00      	nop
 8013208:	0802d684 	.word	0x0802d684
 801320c:	0802d688 	.word	0x0802d688
 8013210:	0802d698 	.word	0x0802d698
 8013214:	20002718 	.word	0x20002718
 8013218:	20002614 	.word	0x20002614
 801321c:	20002714 	.word	0x20002714
 8013220:	0802d680 	.word	0x0802d680
        fill_area.y2--;
 8013224:	3b01      	subs	r3, #1
 8013226:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801322a:	2302      	movs	r3, #2
 801322c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013230:	a914      	add	r1, sp, #80	; 0x50
 8013232:	4620      	mov	r0, r4
 8013234:	f7fe f84a 	bl	80112cc <lv_draw_sw_blend>
        mask_p = 0;
 8013238:	e7e1      	b.n	80131fe <lv_draw_sw_letter+0x3fe>
 801323a:	bf00      	nop

0801323c <lv_draw_sw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_sw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                           const lv_point_t * point1, const lv_point_t * point2)
{
 801323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013240:	b0c7      	sub	sp, #284	; 0x11c
 8013242:	9003      	str	r0, [sp, #12]
 8013244:	9204      	str	r2, [sp, #16]
 8013246:	461e      	mov	r6, r3
 8013248:	9305      	str	r3, [sp, #20]
    if(dsc->width == 0) return;
 801324a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801324e:	2b00      	cmp	r3, #0
 8013250:	f000 8345 	beq.w	80138de <lv_draw_sw_line+0x6a2>
 8013254:	460c      	mov	r4, r1
 8013256:	4610      	mov	r0, r2
    if(dsc->opa <= LV_OPA_MIN) return;
 8013258:	7a0a      	ldrb	r2, [r1, #8]
 801325a:	2a02      	cmp	r2, #2
 801325c:	f240 833f 	bls.w	80138de <lv_draw_sw_line+0x6a2>

    if(point1->x == point2->x && point1->y == point2->y) return;
 8013260:	f9b0 1000 	ldrsh.w	r1, [r0]
 8013264:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013268:	4291      	cmp	r1, r2
 801326a:	d106      	bne.n	801327a <lv_draw_sw_line+0x3e>
 801326c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8013270:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8013274:	4285      	cmp	r5, r0
 8013276:	f000 8332 	beq.w	80138de <lv_draw_sw_line+0x6a2>

    lv_area_t clip_line;
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 801327a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801327e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8013282:	4291      	cmp	r1, r2
 8013284:	bfd4      	ite	le
 8013286:	ebc3 0001 	rsble	r0, r3, r1
 801328a:	ebc3 0002 	rsbgt	r0, r3, r2
 801328e:	f8ad 0110 	strh.w	r0, [sp, #272]	; 0x110
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 8013292:	4291      	cmp	r1, r2
 8013294:	bfac      	ite	ge
 8013296:	1858      	addge	r0, r3, r1
 8013298:	1898      	addlt	r0, r3, r2
 801329a:	f8ad 0114 	strh.w	r0, [sp, #276]	; 0x114
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 801329e:	9e05      	ldr	r6, [sp, #20]
 80132a0:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 80132a4:	9f04      	ldr	r7, [sp, #16]
 80132a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80132aa:	4291      	cmp	r1, r2
 80132ac:	bfd4      	ite	le
 80132ae:	ebc3 0001 	rsble	r0, r3, r1
 80132b2:	ebc3 0002 	rsbgt	r0, r3, r2
 80132b6:	f8ad 0112 	strh.w	r0, [sp, #274]	; 0x112
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 80132ba:	4291      	cmp	r1, r2
 80132bc:	bfac      	ite	ge
 80132be:	185b      	addge	r3, r3, r1
 80132c0:	189b      	addlt	r3, r3, r2
 80132c2:	f8ad 3116 	strh.w	r3, [sp, #278]	; 0x116

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 80132c6:	9d03      	ldr	r5, [sp, #12]
 80132c8:	68aa      	ldr	r2, [r5, #8]
 80132ca:	a944      	add	r1, sp, #272	; 0x110
 80132cc:	4608      	mov	r0, r1
 80132ce:	f00d ff18 	bl	8021102 <_lv_area_intersect>
    if(!is_common) return;
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f000 8303 	beq.w	80138de <lv_draw_sw_line+0x6a2>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80132d8:	68ab      	ldr	r3, [r5, #8]
 80132da:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_line;
 80132dc:	ab44      	add	r3, sp, #272	; 0x110
 80132de:	60ab      	str	r3, [r5, #8]

    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 80132e0:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 80132e4:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
 80132e8:	42b5      	cmp	r5, r6
 80132ea:	f000 80d7 	beq.w	801349c <lv_draw_sw_line+0x260>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 80132ee:	9b04      	ldr	r3, [sp, #16]
 80132f0:	f9b3 7000 	ldrsh.w	r7, [r3]
 80132f4:	9b05      	ldr	r3, [sp, #20]
 80132f6:	f9b3 8000 	ldrsh.w	r8, [r3]
 80132fa:	4547      	cmp	r7, r8
 80132fc:	f000 8186 	beq.w	801360c <lv_draw_sw_line+0x3d0>
{
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 8013300:	42b5      	cmp	r5, r6
 8013302:	db05      	blt.n	8013310 <lv_draw_sw_line+0xd4>
 8013304:	462b      	mov	r3, r5
        p2.y = point2->y;
        p1.x = point1->x;
        p2.x = point2->x;
    }
    else {
        p1.y = point2->y;
 8013306:	4635      	mov	r5, r6
        p2.y = point1->y;
 8013308:	461e      	mov	r6, r3
    if(point1->y < point2->y) {
 801330a:	463b      	mov	r3, r7
        p1.x = point2->x;
 801330c:	4647      	mov	r7, r8
        p2.x = point1->x;
 801330e:	4698      	mov	r8, r3
    }

    int32_t xdiff = p2.x - p1.x;
 8013310:	eba8 0207 	sub.w	r2, r8, r7
 8013314:	9208      	str	r2, [sp, #32]
    int32_t ydiff = p2.y - p1.y;
 8013316:	1b73      	subs	r3, r6, r5
 8013318:	930b      	str	r3, [sp, #44]	; 0x2c
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 801331a:	ea82 7be2 	eor.w	fp, r2, r2, asr #31
 801331e:	ebab 7be2 	sub.w	fp, fp, r2, asr #31
 8013322:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 8013326:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 801332a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 801332e:	45d3      	cmp	fp, sl
 8013330:	bfc7      	ittee	gt
 8013332:	ea4f 134a 	movgt.w	r3, sl, lsl #5
 8013336:	fb93 f3fb 	sdivgt	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 801333a:	ea4f 134b 	movle.w	r3, fp, lsl #5
 801333e:	fb93 f3fa 	sdivle	r3, r3, sl

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 8013342:	49b1      	ldr	r1, [pc, #708]	; (8013608 <lv_draw_sw_line+0x3cc>)
 8013344:	f811 9003 	ldrb.w	r9, [r1, r3]
 8013348:	fb02 f909 	mul.w	r9, r2, r9
 801334c:	f109 093f 	add.w	r9, r9, #63	; 0x3f
 8013350:	ea4f 13e9 	mov.w	r3, r9, asr #7
 8013354:	9307      	str	r3, [sp, #28]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 8013356:	f3c9 13cf 	ubfx	r3, r9, #7, #16
 801335a:	45b8      	cmp	r8, r7
 801335c:	bfd4      	ite	le
 801335e:	ebc3 0208 	rsble	r2, r3, r8
 8013362:	ebc3 0207 	rsbgt	r2, r3, r7
 8013366:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 801336a:	45b8      	cmp	r8, r7
 801336c:	bfac      	ite	ge
 801336e:	eb03 0208 	addge.w	r2, r3, r8
 8013372:	19da      	addlt	r2, r3, r7
 8013374:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 8013378:	42ae      	cmp	r6, r5
 801337a:	bfd4      	ite	le
 801337c:	ebc3 0206 	rsble	r2, r3, r6
 8013380:	ebc3 0205 	rsbgt	r2, r3, r5
 8013384:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 8013388:	42ae      	cmp	r6, r5
 801338a:	bfac      	ite	ge
 801338c:	199b      	addge	r3, r3, r6
 801338e:	195b      	addlt	r3, r3, r5
 8013390:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8013394:	aa44      	add	r2, sp, #272	; 0x110
 8013396:	a90c      	add	r1, sp, #48	; 0x30
 8013398:	4608      	mov	r0, r1
 801339a:	f00d feb2 	bl	8021102 <_lv_area_intersect>
    if(is_common == false) return;
 801339e:	2800      	cmp	r0, #0
 80133a0:	f000 8296 	beq.w	80138d0 <lv_draw_sw_line+0x694>
    int32_t w_half0 = w >> 1;
 80133a4:	ea4f 2229 	mov.w	r2, r9, asr #8
 80133a8:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80133aa:	9b07      	ldr	r3, [sp, #28]
 80133ac:	f003 0301 	and.w	r3, r3, #1
 80133b0:	eb03 2329 	add.w	r3, r3, r9, asr #8
 80133b4:	9307      	str	r3, [sp, #28]
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 80133b6:	45d3      	cmp	fp, sl
 80133b8:	f340 81e0 	ble.w	801377c <lv_draw_sw_line+0x540>
        if(xdiff > 0) {
 80133bc:	9b08      	ldr	r3, [sp, #32]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	f340 81b6 	ble.w	8013730 <lv_draw_sw_line+0x4f4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 80133c4:	fa1f fa85 	uxth.w	sl, r5
 80133c8:	b293      	uxth	r3, r2
 80133ca:	fa1f f986 	uxth.w	r9, r6
 80133ce:	ebaa 0203 	sub.w	r2, sl, r3
 80133d2:	2100      	movs	r1, #0
 80133d4:	9101      	str	r1, [sp, #4]
 80133d6:	eba9 0303 	sub.w	r3, r9, r3
 80133da:	b21b      	sxth	r3, r3
 80133dc:	9300      	str	r3, [sp, #0]
 80133de:	4643      	mov	r3, r8
 80133e0:	b212      	sxth	r2, r2
 80133e2:	4639      	mov	r1, r7
 80133e4:	a815      	add	r0, sp, #84	; 0x54
 80133e6:	f7fb fea9 	bl	800f13c <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 80133ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80133ee:	eb0a 0203 	add.w	r2, sl, r3
 80133f2:	2101      	movs	r1, #1
 80133f4:	9101      	str	r1, [sp, #4]
 80133f6:	4499      	add	r9, r3
 80133f8:	fa0f f389 	sxth.w	r3, r9
 80133fc:	9300      	str	r3, [sp, #0]
 80133fe:	4643      	mov	r3, r8
 8013400:	b212      	sxth	r2, r2
 8013402:	4639      	mov	r1, r7
 8013404:	a820      	add	r0, sp, #128	; 0x80
 8013406:	f7fb fe99 	bl	800f13c <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 801340a:	2100      	movs	r1, #0
 801340c:	a815      	add	r0, sp, #84	; 0x54
 801340e:	f7fb fdb7 	bl	800ef80 <lv_draw_mask_add>
 8013412:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 8013414:	2100      	movs	r1, #0
 8013416:	a820      	add	r0, sp, #128	; 0x80
 8013418:	f7fb fdb2 	bl	800ef80 <lv_draw_mask_add>
 801341c:	900a      	str	r0, [sp, #40]	; 0x28
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 801341e:	7a63      	ldrb	r3, [r4, #9]
 8013420:	f013 0f10 	tst.w	r3, #16
 8013424:	f000 81cd 	beq.w	80137c2 <lv_draw_sw_line+0x586>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 8013428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801342c:	9308      	str	r3, [sp, #32]
    int16_t mask_top_id = LV_MASK_ID_INV;
 801342e:	9307      	str	r3, [sp, #28]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013430:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8013434:	3701      	adds	r7, #1
 8013436:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801343a:	1aff      	subs	r7, r7, r3
 801343c:	b23f      	sxth	r7, r7
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 801343e:	f7f9 fcc9 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
 8013442:	f00d fb1b 	bl	8020a7c <lv_disp_get_hor_res>
 8013446:	4605      	mov	r5, r0
 8013448:	4682      	mov	sl, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 801344a:	a80c      	add	r0, sp, #48	; 0x30
 801344c:	f00d fe2d 	bl	80210aa <lv_area_get_size>
 8013450:	4285      	cmp	r5, r0
 8013452:	f200 81e1 	bhi.w	8013818 <lv_draw_sw_line+0x5dc>
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 8013456:	4650      	mov	r0, sl
 8013458:	f00e fdba 	bl	8021fd0 <lv_mem_buf_get>
 801345c:	4681      	mov	r9, r0

    lv_coord_t y2 = blend_area.y2;
 801345e:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
    blend_area.y2 = blend_area.y1;
 8013462:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8013466:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    uint32_t mask_p = 0;
    lv_memset_ff(mask_buf, mask_buf_size);
 801346a:	4651      	mov	r1, sl
 801346c:	f00f f844 	bl	80224f8 <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013470:	211c      	movs	r1, #28
 8013472:	a80e      	add	r0, sp, #56	; 0x38
 8013474:	f00e ffda 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8013478:	ab0c      	add	r3, sp, #48	; 0x30
 801347a:	930e      	str	r3, [sp, #56]	; 0x38
    blend_dsc.color = dsc->color;
 801347c:	8822      	ldrh	r2, [r4, #0]
 801347e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    blend_dsc.opa = dsc->opa;
 8013482:	7a22      	ldrb	r2, [r4, #8]
 8013484:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
    blend_dsc.mask_buf = mask_buf;
 8013488:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    blend_dsc.mask_area = &blend_area;
 801348c:	9313      	str	r3, [sp, #76]	; 0x4c

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 801348e:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8013492:	45b3      	cmp	fp, r6
 8013494:	f2c0 81f9 	blt.w	801388a <lv_draw_sw_line+0x64e>
    uint32_t mask_p = 0;
 8013498:	2500      	movs	r5, #0
 801349a:	e1df      	b.n	801385c <lv_draw_sw_line+0x620>
    int32_t w = dsc->width - 1;
 801349c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80134a0:	3a01      	subs	r2, #1
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 80134a2:	9b05      	ldr	r3, [sp, #20]
 80134a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134a8:	9904      	ldr	r1, [sp, #16]
 80134aa:	f9b1 1000 	ldrsh.w	r1, [r1]
 80134ae:	4618      	mov	r0, r3
 80134b0:	428b      	cmp	r3, r1
 80134b2:	bfa8      	it	ge
 80134b4:	4608      	movge	r0, r1
 80134b6:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 80134ba:	428b      	cmp	r3, r1
 80134bc:	bfb8      	it	lt
 80134be:	460b      	movlt	r3, r1
 80134c0:	3b01      	subs	r3, #1
 80134c2:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
    blend_area.y1 = point1->y - w_half1;
 80134c6:	b2ad      	uxth	r5, r5
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 80134c8:	f002 0301 	and.w	r3, r2, #1
 80134cc:	eb03 0362 	add.w	r3, r3, r2, asr #1
    blend_area.y1 = point1->y - w_half1;
 80134d0:	1aeb      	subs	r3, r5, r3
 80134d2:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = point1->y + w_half0;
 80134d6:	eb05 0562 	add.w	r5, r5, r2, asr #1
 80134da:	f8ad 50b2 	strh.w	r5, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 80134de:	aa44      	add	r2, sp, #272	; 0x110
 80134e0:	a92b      	add	r1, sp, #172	; 0xac
 80134e2:	4608      	mov	r0, r1
 80134e4:	f00d fe0d 	bl	8021102 <_lv_area_intersect>
    if(!is_common) return;
 80134e8:	4681      	mov	r9, r0
 80134ea:	2800      	cmp	r0, #0
 80134ec:	f000 81f0 	beq.w	80138d0 <lv_draw_sw_line+0x694>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80134f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	f000 82a7 	beq.w	8013a48 <lv_draw_sw_line+0x80c>
 80134fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 82a2 	beq.w	8013a48 <lv_draw_sw_line+0x80c>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8013504:	a82b      	add	r0, sp, #172	; 0xac
 8013506:	f7fb fde5 	bl	800f0d4 <lv_draw_mask_is_any>
 801350a:	2800      	cmp	r0, #0
 801350c:	f040 8249 	bne.w	80139a2 <lv_draw_sw_line+0x766>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013510:	211c      	movs	r1, #28
 8013512:	a836      	add	r0, sp, #216	; 0xd8
 8013514:	f00e ff8a 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8013518:	ab2b      	add	r3, sp, #172	; 0xac
 801351a:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 801351c:	8823      	ldrh	r3, [r4, #0]
 801351e:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8013522:	7a23      	ldrb	r3, [r4, #8]
 8013524:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8013528:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801352c:	f8bd 60b0 	ldrh.w	r6, [sp, #176]	; 0xb0
 8013530:	3601      	adds	r6, #1
 8013532:	1af6      	subs	r6, r6, r3
 8013534:	b236      	sxth	r6, r6
        lv_coord_t y2 = blend_area.y2;
 8013536:	f9bd 80b2 	ldrsh.w	r8, [sp, #178]	; 0xb2
        blend_area.y2 = blend_area.y1;
 801353a:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
 801353e:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 8013542:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013546:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801354a:	440a      	add	r2, r1
 801354c:	fb93 f1f2 	sdiv	r1, r3, r2
 8013550:	fb02 3311 	mls	r3, r2, r1, r3
 8013554:	b21b      	sxth	r3, r3
 8013556:	9307      	str	r3, [sp, #28]
        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 8013558:	46b3      	mov	fp, r6
 801355a:	4630      	mov	r0, r6
 801355c:	f00e fd38 	bl	8021fd0 <lv_mem_buf_get>
 8013560:	4607      	mov	r7, r0
        blend_dsc.mask_buf = mask_buf;
 8013562:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 8013564:	ab2b      	add	r3, sp, #172	; 0xac
 8013566:	933b      	str	r3, [sp, #236]	; 0xec
        for(h = blend_area.y1; h <= y2; h++) {
 8013568:	f9bd 50ae 	ldrsh.w	r5, [sp, #174]	; 0xae
 801356c:	46c2      	mov	sl, r8
 801356e:	4545      	cmp	r5, r8
 8013570:	dc45      	bgt.n	80135fe <lv_draw_sw_line+0x3c2>
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 8013572:	f04f 0800 	mov.w	r8, #0
 8013576:	e02b      	b.n	80135d0 <lv_draw_sw_line+0x394>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8013578:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801357c:	4403      	add	r3, r0
 801357e:	429a      	cmp	r2, r3
                            mask_buf[i] = 0x00;
 8013580:	bfba      	itte	lt
 8013582:	f807 8001 	strblt.w	r8, [r7, r1]
 8013586:	4613      	movlt	r3, r2
                            dash_cnt = 0;
 8013588:	4643      	movge	r3, r8
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 801358a:	3101      	adds	r1, #1
 801358c:	b209      	sxth	r1, r1
 801358e:	3301      	adds	r3, #1
 8013590:	b21a      	sxth	r2, r3
 8013592:	42b1      	cmp	r1, r6
 8013594:	da07      	bge.n	80135a6 <lv_draw_sw_line+0x36a>
                        if(dash_cnt <= dsc->dash_width) {
 8013596:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801359a:	429a      	cmp	r2, r3
 801359c:	dcec      	bgt.n	8013578 <lv_draw_sw_line+0x33c>
                            i += diff;
 801359e:	4419      	add	r1, r3
 80135a0:	1a89      	subs	r1, r1, r2
 80135a2:	b209      	sxth	r1, r1
                            dash_cnt += diff;
 80135a4:	e7f1      	b.n	801358a <lv_draw_sw_line+0x34e>
                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80135a6:	f04f 0302 	mov.w	r3, #2
 80135aa:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80135ae:	a936      	add	r1, sp, #216	; 0xd8
 80135b0:	9803      	ldr	r0, [sp, #12]
 80135b2:	f7fd fe8b 	bl	80112cc <lv_draw_sw_blend>
            blend_area.y1++;
 80135b6:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 80135ba:	3301      	adds	r3, #1
 80135bc:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 80135c0:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 80135c4:	3301      	adds	r3, #1
 80135c6:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 80135ca:	3501      	adds	r5, #1
 80135cc:	4555      	cmp	r5, sl
 80135ce:	dc16      	bgt.n	80135fe <lv_draw_sw_line+0x3c2>
            lv_memset_ff(mask_buf, blend_area_w);
 80135d0:	4659      	mov	r1, fp
 80135d2:	4638      	mov	r0, r7
 80135d4:	f00e ff90 	bl	80224f8 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 80135d8:	4633      	mov	r3, r6
 80135da:	b22a      	sxth	r2, r5
 80135dc:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 80135e0:	4638      	mov	r0, r7
 80135e2:	f7fb fcef 	bl	800efc4 <lv_draw_mask_apply>
 80135e6:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 80135ea:	f1b9 0f00 	cmp.w	r9, #0
 80135ee:	d0de      	beq.n	80135ae <lv_draw_sw_line+0x372>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 80135f0:	2800      	cmp	r0, #0
 80135f2:	d0dc      	beq.n	80135ae <lv_draw_sw_line+0x372>
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 80135f4:	2e00      	cmp	r6, #0
 80135f6:	ddd6      	ble.n	80135a6 <lv_draw_sw_line+0x36a>
                    lv_coord_t dash_cnt = dash_start;
 80135f8:	9a07      	ldr	r2, [sp, #28]
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 80135fa:	4641      	mov	r1, r8
 80135fc:	e7cb      	b.n	8013596 <lv_draw_sw_line+0x35a>
        lv_mem_buf_release(mask_buf);
 80135fe:	4638      	mov	r0, r7
 8013600:	f00e fd48 	bl	8022094 <lv_mem_buf_release>
 8013604:	e164      	b.n	80138d0 <lv_draw_sw_line+0x694>
 8013606:	bf00      	nop
 8013608:	0802d798 	.word	0x0802d798
    int32_t w = dsc->width - 1;
 801360c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013610:	3b01      	subs	r3, #1
    blend_area.x1 = point1->x - w_half1;
 8013612:	b2bf      	uxth	r7, r7
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 8013614:	f003 0201 	and.w	r2, r3, #1
 8013618:	eb02 0263 	add.w	r2, r2, r3, asr #1
    blend_area.x1 = point1->x - w_half1;
 801361c:	1aba      	subs	r2, r7, r2
 801361e:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
    blend_area.x2 = point1->x + w_half0;
 8013622:	eb07 0763 	add.w	r7, r7, r3, asr #1
 8013626:	f8ad 70b0 	strh.w	r7, [sp, #176]	; 0xb0
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 801362a:	462b      	mov	r3, r5
 801362c:	42b5      	cmp	r5, r6
 801362e:	bfa8      	it	ge
 8013630:	4633      	movge	r3, r6
 8013632:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 8013636:	42ae      	cmp	r6, r5
 8013638:	bfb8      	it	lt
 801363a:	462e      	movlt	r6, r5
 801363c:	3e01      	subs	r6, #1
 801363e:	f8ad 60b2 	strh.w	r6, [sp, #178]	; 0xb2
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 8013642:	aa44      	add	r2, sp, #272	; 0x110
 8013644:	a92b      	add	r1, sp, #172	; 0xac
 8013646:	4608      	mov	r0, r1
 8013648:	f00d fd5b 	bl	8021102 <_lv_area_intersect>
    if(!is_common) return;
 801364c:	4606      	mov	r6, r0
 801364e:	2800      	cmp	r0, #0
 8013650:	f000 813e 	beq.w	80138d0 <lv_draw_sw_line+0x694>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8013654:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013658:	2b00      	cmp	r3, #0
 801365a:	f000 821c 	beq.w	8013a96 <lv_draw_sw_line+0x85a>
 801365e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	f000 8217 	beq.w	8013a96 <lv_draw_sw_line+0x85a>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8013668:	a82b      	add	r0, sp, #172	; 0xac
 801366a:	f7fb fd33 	bl	800f0d4 <lv_draw_mask_is_any>
 801366e:	4682      	mov	sl, r0
 8013670:	2800      	cmp	r0, #0
 8013672:	f040 819a 	bne.w	80139aa <lv_draw_sw_line+0x76e>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013676:	211c      	movs	r1, #28
 8013678:	a836      	add	r0, sp, #216	; 0xd8
 801367a:	f00e fed7 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 801367e:	ad2b      	add	r5, sp, #172	; 0xac
 8013680:	9536      	str	r5, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 8013682:	8823      	ldrh	r3, [r4, #0]
 8013684:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8013688:	7a23      	ldrb	r3, [r4, #8]
 801368a:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 801368e:	f8bd 80b0 	ldrh.w	r8, [sp, #176]	; 0xb0
 8013692:	f108 0801 	add.w	r8, r8, #1
 8013696:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 801369a:	eba8 0803 	sub.w	r8, r8, r3
 801369e:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t y2 = blend_area.y2;
 80136a2:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 80136a6:	469b      	mov	fp, r3
        blend_area.y2 = blend_area.y1;
 80136a8:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 80136ac:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 80136b0:	46c1      	mov	r9, r8
 80136b2:	4640      	mov	r0, r8
 80136b4:	f00e fc8c 	bl	8021fd0 <lv_mem_buf_get>
 80136b8:	4607      	mov	r7, r0
        blend_dsc.mask_buf = mask_buf;
 80136ba:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 80136bc:	953b      	str	r5, [sp, #236]	; 0xec
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80136be:	46b2      	mov	sl, r6
 80136c0:	e19a      	b.n	80139f8 <lv_draw_sw_line+0x7bc>
                dash_cnt ++;
 80136c2:	3601      	adds	r6, #1
 80136c4:	b236      	sxth	r6, r6
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80136c6:	a936      	add	r1, sp, #216	; 0xd8
 80136c8:	9803      	ldr	r0, [sp, #12]
 80136ca:	f7fd fdff 	bl	80112cc <lv_draw_sw_blend>
            blend_area.y1++;
 80136ce:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 80136d2:	3301      	adds	r3, #1
 80136d4:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
            blend_area.y2++;
 80136d8:	f8bd 30b2 	ldrh.w	r3, [sp, #178]	; 0xb2
 80136dc:	3301      	adds	r3, #1
 80136de:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        for(h = blend_area.y1; h <= y2; h++) {
 80136e2:	3501      	adds	r5, #1
 80136e4:	45ab      	cmp	fp, r5
 80136e6:	db1e      	blt.n	8013726 <lv_draw_sw_line+0x4ea>
            lv_memset_ff(mask_buf, draw_area_w);
 80136e8:	4649      	mov	r1, r9
 80136ea:	4638      	mov	r0, r7
 80136ec:	f00e ff04 	bl	80224f8 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 80136f0:	4643      	mov	r3, r8
 80136f2:	b22a      	sxth	r2, r5
 80136f4:	f9bd 10ac 	ldrsh.w	r1, [sp, #172]	; 0xac
 80136f8:	4638      	mov	r0, r7
 80136fa:	f7fb fc63 	bl	800efc4 <lv_draw_mask_apply>
 80136fe:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
            if(dashed) {
 8013702:	2c00      	cmp	r4, #0
 8013704:	d0df      	beq.n	80136c6 <lv_draw_sw_line+0x48a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 8013706:	2800      	cmp	r0, #0
 8013708:	d0db      	beq.n	80136c2 <lv_draw_sw_line+0x486>
                    if(dash_cnt > dsc->dash_width) {
 801370a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801370e:	42b2      	cmp	r2, r6
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 8013710:	bfbc      	itt	lt
 8013712:	2300      	movlt	r3, #0
 8013714:	f88d 30e8 	strblt.w	r3, [sp, #232]	; 0xe8
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 8013718:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801371c:	4413      	add	r3, r2
                        dash_cnt = 0;
 801371e:	429e      	cmp	r6, r3
 8013720:	bfa8      	it	ge
 8013722:	2600      	movge	r6, #0
 8013724:	e7cd      	b.n	80136c2 <lv_draw_sw_line+0x486>
 8013726:	4654      	mov	r4, sl
        lv_mem_buf_release(mask_buf);
 8013728:	4638      	mov	r0, r7
 801372a:	f00e fcb3 	bl	8022094 <lv_mem_buf_release>
 801372e:	e0cf      	b.n	80138d0 <lv_draw_sw_line+0x694>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 8013730:	fa1f fb85 	uxth.w	fp, r5
 8013734:	f8bd 901c 	ldrh.w	r9, [sp, #28]
 8013738:	fa1f fa86 	uxth.w	sl, r6
 801373c:	eb0b 0209 	add.w	r2, fp, r9
 8013740:	2300      	movs	r3, #0
 8013742:	9301      	str	r3, [sp, #4]
 8013744:	44d1      	add	r9, sl
 8013746:	fa0f f389 	sxth.w	r3, r9
 801374a:	9300      	str	r3, [sp, #0]
 801374c:	4643      	mov	r3, r8
 801374e:	b212      	sxth	r2, r2
 8013750:	4639      	mov	r1, r7
 8013752:	a815      	add	r0, sp, #84	; 0x54
 8013754:	f7fb fcf2 	bl	800f13c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 8013758:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801375c:	ebab 0203 	sub.w	r2, fp, r3
 8013760:	2101      	movs	r1, #1
 8013762:	9101      	str	r1, [sp, #4]
 8013764:	ebaa 0a03 	sub.w	sl, sl, r3
 8013768:	fa0f f38a 	sxth.w	r3, sl
 801376c:	9300      	str	r3, [sp, #0]
 801376e:	4643      	mov	r3, r8
 8013770:	b212      	sxth	r2, r2
 8013772:	4639      	mov	r1, r7
 8013774:	a820      	add	r0, sp, #128	; 0x80
 8013776:	f7fb fce1 	bl	800f13c <lv_draw_mask_line_points_init>
 801377a:	e646      	b.n	801340a <lv_draw_sw_line+0x1ce>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 801377c:	fa1f fb87 	uxth.w	fp, r7
 8013780:	f8bd 901c 	ldrh.w	r9, [sp, #28]
 8013784:	fa1f fa88 	uxth.w	sl, r8
 8013788:	eb09 030a 	add.w	r3, r9, sl
 801378c:	44d9      	add	r9, fp
 801378e:	2200      	movs	r2, #0
 8013790:	9201      	str	r2, [sp, #4]
 8013792:	9600      	str	r6, [sp, #0]
 8013794:	b21b      	sxth	r3, r3
 8013796:	462a      	mov	r2, r5
 8013798:	fa0f f189 	sxth.w	r1, r9
 801379c:	a815      	add	r0, sp, #84	; 0x54
 801379e:	f7fb fccd 	bl	800f13c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 80137a2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80137a6:	ebaa 0301 	sub.w	r3, sl, r1
 80137aa:	ebab 0101 	sub.w	r1, fp, r1
 80137ae:	2201      	movs	r2, #1
 80137b0:	9201      	str	r2, [sp, #4]
 80137b2:	9600      	str	r6, [sp, #0]
 80137b4:	b21b      	sxth	r3, r3
 80137b6:	462a      	mov	r2, r5
 80137b8:	b209      	sxth	r1, r1
 80137ba:	a820      	add	r0, sp, #128	; 0x80
 80137bc:	f7fb fcbe 	bl	800f13c <lv_draw_mask_line_points_init>
 80137c0:	e623      	b.n	801340a <lv_draw_sw_line+0x1ce>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 80137c2:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80137c6:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80137ca:	eba7 030a 	sub.w	r3, r7, sl
 80137ce:	2203      	movs	r2, #3
 80137d0:	9201      	str	r2, [sp, #4]
 80137d2:	eb09 0205 	add.w	r2, r9, r5
 80137d6:	b212      	sxth	r2, r2
 80137d8:	9200      	str	r2, [sp, #0]
 80137da:	b21b      	sxth	r3, r3
 80137dc:	462a      	mov	r2, r5
 80137de:	4639      	mov	r1, r7
 80137e0:	a82b      	add	r0, sp, #172	; 0xac
 80137e2:	f7fb fcab 	bl	800f13c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 80137e6:	eba8 030a 	sub.w	r3, r8, sl
 80137ea:	2202      	movs	r2, #2
 80137ec:	9201      	str	r2, [sp, #4]
 80137ee:	44b1      	add	r9, r6
 80137f0:	fa0f f289 	sxth.w	r2, r9
 80137f4:	9200      	str	r2, [sp, #0]
 80137f6:	b21b      	sxth	r3, r3
 80137f8:	4632      	mov	r2, r6
 80137fa:	4641      	mov	r1, r8
 80137fc:	a836      	add	r0, sp, #216	; 0xd8
 80137fe:	f7fb fc9d 	bl	800f13c <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 8013802:	2100      	movs	r1, #0
 8013804:	a82b      	add	r0, sp, #172	; 0xac
 8013806:	f7fb fbbb 	bl	800ef80 <lv_draw_mask_add>
 801380a:	9007      	str	r0, [sp, #28]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 801380c:	2100      	movs	r1, #0
 801380e:	a836      	add	r0, sp, #216	; 0xd8
 8013810:	f7fb fbb6 	bl	800ef80 <lv_draw_mask_add>
 8013814:	9008      	str	r0, [sp, #32]
 8013816:	e60b      	b.n	8013430 <lv_draw_sw_line+0x1f4>
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 8013818:	a80c      	add	r0, sp, #48	; 0x30
 801381a:	f00d fc46 	bl	80210aa <lv_area_get_size>
 801381e:	4682      	mov	sl, r0
 8013820:	e619      	b.n	8013456 <lv_draw_sw_line+0x21a>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 8013822:	4639      	mov	r1, r7
 8013824:	4640      	mov	r0, r8
 8013826:	f00e fe01 	bl	802242c <lv_memset_00>
 801382a:	e024      	b.n	8013876 <lv_draw_sw_line+0x63a>
        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            blend_area.y2 ++;
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801382c:	f04f 0302 	mov.w	r3, #2
 8013830:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013834:	a90e      	add	r1, sp, #56	; 0x38
 8013836:	9803      	ldr	r0, [sp, #12]
 8013838:	f7fd fd48 	bl	80112cc <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 801383c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8013840:	3301      	adds	r3, #1
 8013842:	b21b      	sxth	r3, r3
 8013844:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            blend_area.y2 = blend_area.y1;
 8013848:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            lv_memset_ff(mask_buf, mask_buf_size);
 801384c:	4651      	mov	r1, sl
 801384e:	4648      	mov	r0, r9
 8013850:	f00e fe52 	bl	80224f8 <lv_memset_ff>
            mask_p = 0;
 8013854:	2500      	movs	r5, #0
    for(h = blend_area.y1; h <= y2; h++) {
 8013856:	3601      	adds	r6, #1
 8013858:	45b3      	cmp	fp, r6
 801385a:	db16      	blt.n	801388a <lv_draw_sw_line+0x64e>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 801385c:	eb09 0805 	add.w	r8, r9, r5
 8013860:	463b      	mov	r3, r7
 8013862:	b232      	sxth	r2, r6
 8013864:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8013868:	4640      	mov	r0, r8
 801386a:	f7fb fbab 	bl	800efc4 <lv_draw_mask_apply>
 801386e:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8013872:	2800      	cmp	r0, #0
 8013874:	d0d5      	beq.n	8013822 <lv_draw_sw_line+0x5e6>
        mask_p += draw_area_w;
 8013876:	443d      	add	r5, r7
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 8013878:	197b      	adds	r3, r7, r5
 801387a:	459a      	cmp	sl, r3
 801387c:	d9d6      	bls.n	801382c <lv_draw_sw_line+0x5f0>
            blend_area.y2 ++;
 801387e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8013882:	3301      	adds	r3, #1
 8013884:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013888:	e7e5      	b.n	8013856 <lv_draw_sw_line+0x61a>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 801388a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801388e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8013892:	429a      	cmp	r2, r3
 8013894:	d126      	bne.n	80138e4 <lv_draw_sw_line+0x6a8>
        blend_area.y2--;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    lv_mem_buf_release(mask_buf);
 8013896:	4648      	mov	r0, r9
 8013898:	f00e fbfc 	bl	8022094 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 801389c:	a815      	add	r0, sp, #84	; 0x54
 801389e:	f7fb fbe3 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 80138a2:	a820      	add	r0, sp, #128	; 0x80
 80138a4:	f7fb fbe0 	bl	800f068 <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 80138a8:	9b07      	ldr	r3, [sp, #28]
 80138aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138ae:	d124      	bne.n	80138fa <lv_draw_sw_line+0x6be>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 80138b0:	9b08      	ldr	r3, [sp, #32]
 80138b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138b6:	d124      	bne.n	8013902 <lv_draw_sw_line+0x6c6>
    lv_draw_mask_remove_id(mask_left_id);
 80138b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138ba:	f7fb fbab 	bl	800f014 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 80138be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80138c0:	f7fb fba8 	bl	800f014 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 80138c4:	9807      	ldr	r0, [sp, #28]
 80138c6:	f7fb fba5 	bl	800f014 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 80138ca:	9808      	ldr	r0, [sp, #32]
 80138cc:	f7fb fba2 	bl	800f014 <lv_draw_mask_remove_id>
    if(dsc->round_end || dsc->round_start) {
 80138d0:	7a63      	ldrb	r3, [r4, #9]
 80138d2:	f013 0f0c 	tst.w	r3, #12
 80138d6:	d118      	bne.n	801390a <lv_draw_sw_line+0x6ce>
    draw_ctx->clip_area = clip_area_ori;
 80138d8:	9b03      	ldr	r3, [sp, #12]
 80138da:	9a06      	ldr	r2, [sp, #24]
 80138dc:	609a      	str	r2, [r3, #8]
}
 80138de:	b047      	add	sp, #284	; 0x11c
 80138e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        blend_area.y2--;
 80138e4:	3b01      	subs	r3, #1
 80138e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80138ea:	2302      	movs	r3, #2
 80138ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80138f0:	a90e      	add	r1, sp, #56	; 0x38
 80138f2:	9803      	ldr	r0, [sp, #12]
 80138f4:	f7fd fcea 	bl	80112cc <lv_draw_sw_blend>
 80138f8:	e7cd      	b.n	8013896 <lv_draw_sw_line+0x65a>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 80138fa:	a82b      	add	r0, sp, #172	; 0xac
 80138fc:	f7fb fbb4 	bl	800f068 <lv_draw_mask_free_param>
 8013900:	e7d6      	b.n	80138b0 <lv_draw_sw_line+0x674>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 8013902:	a836      	add	r0, sp, #216	; 0xd8
 8013904:	f7fb fbb0 	bl	800f068 <lv_draw_mask_free_param>
 8013908:	e7d6      	b.n	80138b8 <lv_draw_sw_line+0x67c>
        lv_draw_rect_dsc_init(&cir_dsc);
 801390a:	a836      	add	r0, sp, #216	; 0xd8
 801390c:	f7fb ff8e 	bl	800f82c <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 8013910:	8823      	ldrh	r3, [r4, #0]
 8013912:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 8013916:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801391a:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
        cir_dsc.bg_opa = dsc->opa;
 801391e:	7a23      	ldrb	r3, [r4, #8]
 8013920:	f88d 30db 	strb.w	r3, [sp, #219]	; 0xdb
        int32_t r = (dsc->width >> 1);
 8013924:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013928:	105e      	asrs	r6, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 801392a:	f083 0301 	eor.w	r3, r3, #1
 801392e:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
 8013932:	7a63      	ldrb	r3, [r4, #9]
 8013934:	f013 0f04 	tst.w	r3, #4
 8013938:	d11b      	bne.n	8013972 <lv_draw_sw_line+0x736>
        if(dsc->round_end) {
 801393a:	7a63      	ldrb	r3, [r4, #9]
 801393c:	f013 0f08 	tst.w	r3, #8
 8013940:	d0ca      	beq.n	80138d8 <lv_draw_sw_line+0x69c>
            cir_area.x1 = point2->x - r;
 8013942:	9905      	ldr	r1, [sp, #20]
 8013944:	880b      	ldrh	r3, [r1, #0]
 8013946:	b2b6      	uxth	r6, r6
 8013948:	1b9a      	subs	r2, r3, r6
 801394a:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
            cir_area.y1 = point2->y - r;
 801394e:	884a      	ldrh	r2, [r1, #2]
 8013950:	1b91      	subs	r1, r2, r6
 8013952:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
            cir_area.x2 = point2->x + r - r_corr;
 8013956:	4433      	add	r3, r6
 8013958:	1b5b      	subs	r3, r3, r5
 801395a:	f8ad 30b0 	strh.w	r3, [sp, #176]	; 0xb0
            cir_area.y2 = point2->y + r - r_corr ;
 801395e:	4416      	add	r6, r2
 8013960:	1b75      	subs	r5, r6, r5
 8013962:	f8ad 50b2 	strh.w	r5, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 8013966:	aa2b      	add	r2, sp, #172	; 0xac
 8013968:	a936      	add	r1, sp, #216	; 0xd8
 801396a:	9803      	ldr	r0, [sp, #12]
 801396c:	f7fb ffba 	bl	800f8e4 <lv_draw_rect>
 8013970:	e7b2      	b.n	80138d8 <lv_draw_sw_line+0x69c>
            cir_area.x1 = point1->x - r;
 8013972:	9804      	ldr	r0, [sp, #16]
 8013974:	8802      	ldrh	r2, [r0, #0]
 8013976:	b2b3      	uxth	r3, r6
 8013978:	1ad1      	subs	r1, r2, r3
 801397a:	f8ad 10ac 	strh.w	r1, [sp, #172]	; 0xac
            cir_area.y1 = point1->y - r;
 801397e:	8841      	ldrh	r1, [r0, #2]
 8013980:	1ac8      	subs	r0, r1, r3
 8013982:	f8ad 00ae 	strh.w	r0, [sp, #174]	; 0xae
            cir_area.x2 = point1->x + r - r_corr;
 8013986:	441a      	add	r2, r3
 8013988:	1b52      	subs	r2, r2, r5
 801398a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
            cir_area.y2 = point1->y + r - r_corr ;
 801398e:	440b      	add	r3, r1
 8013990:	1b5b      	subs	r3, r3, r5
 8013992:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 8013996:	aa2b      	add	r2, sp, #172	; 0xac
 8013998:	a936      	add	r1, sp, #216	; 0xd8
 801399a:	9803      	ldr	r0, [sp, #12]
 801399c:	f7fb ffa2 	bl	800f8e4 <lv_draw_rect>
 80139a0:	e7cb      	b.n	801393a <lv_draw_sw_line+0x6fe>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80139a2:	4681      	mov	r9, r0
 80139a4:	e057      	b.n	8013a56 <lv_draw_sw_line+0x81a>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 80139a6:	f04f 0a00 	mov.w	sl, #0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 80139aa:	211c      	movs	r1, #28
 80139ac:	a836      	add	r0, sp, #216	; 0xd8
 80139ae:	f00e fd3d 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 80139b2:	ad2b      	add	r5, sp, #172	; 0xac
 80139b4:	9536      	str	r5, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 80139b6:	8823      	ldrh	r3, [r4, #0]
 80139b8:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 80139bc:	7a23      	ldrb	r3, [r4, #8]
 80139be:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 80139c2:	f8bd 80b0 	ldrh.w	r8, [sp, #176]	; 0xb0
 80139c6:	f108 0801 	add.w	r8, r8, #1
 80139ca:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 80139ce:	eba8 0803 	sub.w	r8, r8, r3
 80139d2:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t y2 = blend_area.y2;
 80139d6:	f9bd 30b2 	ldrsh.w	r3, [sp, #178]	; 0xb2
 80139da:	469b      	mov	fp, r3
        blend_area.y2 = blend_area.y1;
 80139dc:	f8bd 30ae 	ldrh.w	r3, [sp, #174]	; 0xae
 80139e0:	f8ad 30b2 	strh.w	r3, [sp, #178]	; 0xb2
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 80139e4:	46c1      	mov	r9, r8
 80139e6:	4640      	mov	r0, r8
 80139e8:	f00e faf2 	bl	8021fd0 <lv_mem_buf_get>
 80139ec:	4607      	mov	r7, r0
        blend_dsc.mask_buf = mask_buf;
 80139ee:	9039      	str	r0, [sp, #228]	; 0xe4
        blend_dsc.mask_area = &blend_area;
 80139f0:	953b      	str	r5, [sp, #236]	; 0xec
        if(dashed) {
 80139f2:	f1ba 0f00 	cmp.w	sl, #0
 80139f6:	d014      	beq.n	8013a22 <lv_draw_sw_line+0x7e6>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 80139f8:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 80139fc:	f9b4 6006 	ldrsh.w	r6, [r4, #6]
 8013a00:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013a04:	4416      	add	r6, r2
 8013a06:	fb93 f2f6 	sdiv	r2, r3, r6
 8013a0a:	fb06 3312 	mls	r3, r6, r2, r3
 8013a0e:	b21e      	sxth	r6, r3
        for(h = blend_area.y1; h <= y2; h++) {
 8013a10:	f9bd 50ae 	ldrsh.w	r5, [sp, #174]	; 0xae
 8013a14:	45ab      	cmp	fp, r5
 8013a16:	f6ff ae87 	blt.w	8013728 <lv_draw_sw_line+0x4ec>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013a1a:	4623      	mov	r3, r4
 8013a1c:	4654      	mov	r4, sl
 8013a1e:	469a      	mov	sl, r3
 8013a20:	e662      	b.n	80136e8 <lv_draw_sw_line+0x4ac>
        lv_coord_t dash_start = 0;
 8013a22:	2600      	movs	r6, #0
 8013a24:	e7f4      	b.n	8013a10 <lv_draw_sw_line+0x7d4>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013a26:	211c      	movs	r1, #28
 8013a28:	a836      	add	r0, sp, #216	; 0xd8
 8013a2a:	f00e fcff 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8013a2e:	ab2b      	add	r3, sp, #172	; 0xac
 8013a30:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 8013a32:	8823      	ldrh	r3, [r4, #0]
 8013a34:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8013a38:	7a23      	ldrb	r3, [r4, #8]
 8013a3a:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013a3e:	a936      	add	r1, sp, #216	; 0xd8
 8013a40:	9803      	ldr	r0, [sp, #12]
 8013a42:	f7fd fc43 	bl	80112cc <lv_draw_sw_blend>
 8013a46:	e743      	b.n	80138d0 <lv_draw_sw_line+0x694>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8013a48:	a82b      	add	r0, sp, #172	; 0xac
 8013a4a:	f7fb fb43 	bl	800f0d4 <lv_draw_mask_is_any>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d0e9      	beq.n	8013a26 <lv_draw_sw_line+0x7ea>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 8013a52:	f04f 0900 	mov.w	r9, #0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013a56:	211c      	movs	r1, #28
 8013a58:	a836      	add	r0, sp, #216	; 0xd8
 8013a5a:	f00e fce7 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8013a5e:	ab2b      	add	r3, sp, #172	; 0xac
 8013a60:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 8013a62:	8823      	ldrh	r3, [r4, #0]
 8013a64:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8013a68:	7a23      	ldrb	r3, [r4, #8]
 8013a6a:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8013a6e:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8013a72:	f8bd 60b0 	ldrh.w	r6, [sp, #176]	; 0xb0
 8013a76:	3601      	adds	r6, #1
 8013a78:	1af6      	subs	r6, r6, r3
 8013a7a:	b236      	sxth	r6, r6
        lv_coord_t y2 = blend_area.y2;
 8013a7c:	f9bd 80b2 	ldrsh.w	r8, [sp, #178]	; 0xb2
        blend_area.y2 = blend_area.y1;
 8013a80:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
 8013a84:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
        if(dashed) {
 8013a88:	f1b9 0f00 	cmp.w	r9, #0
 8013a8c:	f47f ad59 	bne.w	8013542 <lv_draw_sw_line+0x306>
        lv_coord_t dash_start = 0;
 8013a90:	2300      	movs	r3, #0
 8013a92:	9307      	str	r3, [sp, #28]
 8013a94:	e560      	b.n	8013558 <lv_draw_sw_line+0x31c>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 8013a96:	a82b      	add	r0, sp, #172	; 0xac
 8013a98:	f7fb fb1c 	bl	800f0d4 <lv_draw_mask_is_any>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d182      	bne.n	80139a6 <lv_draw_sw_line+0x76a>
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8013aa0:	211c      	movs	r1, #28
 8013aa2:	a836      	add	r0, sp, #216	; 0xd8
 8013aa4:	f00e fcc2 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8013aa8:	ab2b      	add	r3, sp, #172	; 0xac
 8013aaa:	9336      	str	r3, [sp, #216]	; 0xd8
    blend_dsc.color = dsc->color;
 8013aac:	8823      	ldrh	r3, [r4, #0]
 8013aae:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
    blend_dsc.opa = dsc->opa;
 8013ab2:	7a23      	ldrb	r3, [r4, #8]
 8013ab4:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8013ab8:	a936      	add	r1, sp, #216	; 0xd8
 8013aba:	9803      	ldr	r0, [sp, #12]
 8013abc:	f7fd fc06 	bl	80112cc <lv_draw_sw_blend>
 8013ac0:	e706      	b.n	80138d0 <lv_draw_sw_line+0x694>
 8013ac2:	bf00      	nop

08013ac4 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 8013ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac8:	b08d      	sub	sp, #52	; 0x34
 8013aca:	9004      	str	r0, [sp, #16]
 8013acc:	9106      	str	r1, [sp, #24]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 8013ace:	2b02      	cmp	r3, #2
 8013ad0:	f240 8148 	bls.w	8013d64 <lv_draw_sw_polygon+0x2a0>
 8013ad4:	4616      	mov	r6, r2
 8013ad6:	461d      	mov	r5, r3
    if(points == NULL) return;
 8013ad8:	2a00      	cmp	r2, #0
 8013ada:	f000 8143 	beq.w	8013d64 <lv_draw_sw_polygon+0x2a0>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 8013ade:	009f      	lsls	r7, r3, #2
 8013ae0:	4638      	mov	r0, r7
 8013ae2:	f00e fa75 	bl	8021fd0 <lv_mem_buf_get>
    if(p == NULL) return;
 8013ae6:	4604      	mov	r4, r0
 8013ae8:	2800      	cmp	r0, #0
 8013aea:	f000 813b 	beq.w	8013d64 <lv_draw_sw_polygon+0x2a0>
    uint16_t i;
    uint16_t pcnt = 0;
    p[0] = points[0];
 8013aee:	6833      	ldr	r3, [r6, #0]
 8013af0:	6003      	str	r3, [r0, #0]
    for(i = 0; i < point_cnt - 1; i++) {
 8013af2:	1e68      	subs	r0, r5, #1
    uint16_t pcnt = 0;
 8013af4:	2500      	movs	r5, #0
    for(i = 0; i < point_cnt - 1; i++) {
 8013af6:	462b      	mov	r3, r5
 8013af8:	e008      	b.n	8013b0c <lv_draw_sw_polygon+0x48>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
            p[pcnt] = points[i];
 8013afa:	5872      	ldr	r2, [r6, r1]
 8013afc:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
            pcnt++;
 8013b00:	3501      	adds	r5, #1
 8013b02:	b2ad      	uxth	r5, r5
    for(i = 0; i < point_cnt - 1; i++) {
 8013b04:	3301      	adds	r3, #1
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	4283      	cmp	r3, r0
 8013b0a:	da11      	bge.n	8013b30 <lv_draw_sw_polygon+0x6c>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 8013b0c:	0099      	lsls	r1, r3, #2
 8013b0e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
 8013b12:	1d0a      	adds	r2, r1, #4
 8013b14:	eb06 0e02 	add.w	lr, r6, r2
 8013b18:	f936 c023 	ldrsh.w	ip, [r6, r3, lsl #2]
 8013b1c:	5eb2      	ldrsh	r2, [r6, r2]
 8013b1e:	4594      	cmp	ip, r2
 8013b20:	d1eb      	bne.n	8013afa <lv_draw_sw_polygon+0x36>
 8013b22:	f9b8 c002 	ldrsh.w	ip, [r8, #2]
 8013b26:	f9be 2002 	ldrsh.w	r2, [lr, #2]
 8013b2a:	4594      	cmp	ip, r2
 8013b2c:	d1e5      	bne.n	8013afa <lv_draw_sw_polygon+0x36>
 8013b2e:	e7e9      	b.n	8013b04 <lv_draw_sw_polygon+0x40>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 8013b30:	3f04      	subs	r7, #4
 8013b32:	19f1      	adds	r1, r6, r7
 8013b34:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013b38:	5ff3      	ldrsh	r3, [r6, r7]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	f000 808e 	beq.w	8013c5c <lv_draw_sw_polygon+0x198>
        p[pcnt] = points[point_cnt - 1];
 8013b40:	59f3      	ldr	r3, [r6, r7]
 8013b42:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        pcnt++;
 8013b46:	3501      	adds	r5, #1
 8013b48:	b2ad      	uxth	r5, r5
    }

    point_cnt = pcnt;
    if(point_cnt < 3) {
 8013b4a:	2d02      	cmp	r5, #2
 8013b4c:	f240 808e 	bls.w	8013c6c <lv_draw_sw_polygon+0x1a8>
        lv_mem_buf_release(p);
        return;
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 8013b50:	4b86      	ldr	r3, [pc, #536]	; (8013d6c <lv_draw_sw_polygon+0x2a8>)
 8013b52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013b56:	ab0c      	add	r3, sp, #48	; 0x30
 8013b58:	e903 0003 	stmdb	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 8013b5c:	4623      	mov	r3, r4
 8013b5e:	1ca7      	adds	r7, r4, #2
 8013b60:	463a      	mov	r2, r7
 8013b62:	1e68      	subs	r0, r5, #1
 8013b64:	b281      	uxth	r1, r0
 8013b66:	1d20      	adds	r0, r4, #4
 8013b68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 8013b6c:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 8013b70:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8013b74:	42b1      	cmp	r1, r6
 8013b76:	bfa8      	it	ge
 8013b78:	4631      	movge	r1, r6
 8013b7a:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 8013b7e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8013b82:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8013b86:	42b1      	cmp	r1, r6
 8013b88:	bfa8      	it	ge
 8013b8a:	4631      	movge	r1, r6
 8013b8c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 8013b90:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 8013b94:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8013b98:	42b1      	cmp	r1, r6
 8013b9a:	bfb8      	it	lt
 8013b9c:	4631      	movlt	r1, r6
 8013b9e:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 8013ba2:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8013ba6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8013baa:	42b1      	cmp	r1, r6
 8013bac:	bfb8      	it	lt
 8013bae:	4631      	movlt	r1, r6
 8013bb0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    for(i = 0; i < point_cnt; i++) {
 8013bb4:	3304      	adds	r3, #4
 8013bb6:	3204      	adds	r2, #4
 8013bb8:	4283      	cmp	r3, r0
 8013bba:	d1d7      	bne.n	8013b6c <lv_draw_sw_polygon+0xa8>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 8013bbc:	9b04      	ldr	r3, [sp, #16]
 8013bbe:	689a      	ldr	r2, [r3, #8]
 8013bc0:	a90a      	add	r1, sp, #40	; 0x28
 8013bc2:	a808      	add	r0, sp, #32
 8013bc4:	f00d fa9d 	bl	8021102 <_lv_area_intersect>
    if(!is_common) {
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d053      	beq.n	8013c74 <lv_draw_sw_polygon+0x1b0>
        lv_mem_buf_release(p);
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8013bcc:	9a04      	ldr	r2, [sp, #16]
 8013bce:	6893      	ldr	r3, [r2, #8]
 8013bd0:	9307      	str	r3, [sp, #28]
    draw_ctx->clip_area = &clip_area;
 8013bd2:	ab08      	add	r3, sp, #32
 8013bd4:	6093      	str	r3, [r2, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 8013bd6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013bda:	2301      	movs	r3, #1
    int16_t y_min_i = 0;
 8013bdc:	2600      	movs	r6, #0

    for(i = 1; i < point_cnt; i++) {
        if(p[i].y < y_min) {
 8013bde:	f937 2023 	ldrsh.w	r2, [r7, r3, lsl #2]
 8013be2:	428a      	cmp	r2, r1
            y_min = p[i].y;
            y_min_i = i;
 8013be4:	bfbc      	itt	lt
 8013be6:	b21e      	sxthlt	r6, r3
            y_min = p[i].y;
 8013be8:	4611      	movlt	r1, r2
    for(i = 1; i < point_cnt; i++) {
 8013bea:	3301      	adds	r3, #1
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	4295      	cmp	r5, r2
 8013bf0:	d8f5      	bhi.n	8013bde <lv_draw_sw_polygon+0x11a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 8013bf2:	46aa      	mov	sl, r5
 8013bf4:	202c      	movs	r0, #44	; 0x2c
 8013bf6:	fb05 f000 	mul.w	r0, r5, r0
 8013bfa:	f00e f9e9 	bl	8021fd0 <lv_mem_buf_get>
 8013bfe:	9005      	str	r0, [sp, #20]
    lv_draw_mask_line_param_t * mp_next = mp;

    int32_t i_prev_left = y_min_i;
 8013c00:	4637      	mov	r7, r6
    int32_t i_next_right;
    uint32_t mask_cnt = 0;

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 8013c02:	1e72      	subs	r2, r6, #1
 8013c04:	bf48      	it	mi
 8013c06:	1952      	addmi	r2, r2, r5

    i_next_right = y_min_i + 1;
 8013c08:	f106 0c01 	add.w	ip, r6, #1
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 8013c0c:	46ab      	mov	fp, r5
 8013c0e:	4565      	cmp	r5, ip
 8013c10:	bfd8      	it	le
 8013c12:	f04f 0c00 	movle.w	ip, #0
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 8013c16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8013c1a:	eb04 0586 	add.w	r5, r4, r6, lsl #2
 8013c1e:	f834 0026 	ldrh.w	r0, [r4, r6, lsl #2]
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 8013c22:	eb04 038c 	add.w	r3, r4, ip, lsl #2
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 8013c26:	886e      	ldrh	r6, [r5, #2]
 8013c28:	8849      	ldrh	r1, [r1, #2]
 8013c2a:	1b89      	subs	r1, r1, r6
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;

    bool inv = false;
    if(dyl * dxr < dyr * dxl) inv = true;
 8013c2c:	b209      	sxth	r1, r1
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 8013c2e:	f834 502c 	ldrh.w	r5, [r4, ip, lsl #2]
 8013c32:	1a2d      	subs	r5, r5, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 8013c34:	b22d      	sxth	r5, r5
 8013c36:	fb05 f101 	mul.w	r1, r5, r1
 8013c3a:	9102      	str	r1, [sp, #8]
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 8013c3c:	885b      	ldrh	r3, [r3, #2]
 8013c3e:	1b9b      	subs	r3, r3, r6
    if(dyl * dxr < dyr * dxl) inv = true;
 8013c40:	b21b      	sxth	r3, r3
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 8013c42:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
 8013c46:	1a12      	subs	r2, r2, r0
    if(dyl * dxr < dyr * dxl) inv = true;
 8013c48:	b212      	sxth	r2, r2
 8013c4a:	fb02 f303 	mul.w	r3, r2, r3
 8013c4e:	9303      	str	r3, [sp, #12]
 8013c50:	46b9      	mov	r9, r7
 8013c52:	9b05      	ldr	r3, [sp, #20]
 8013c54:	469e      	mov	lr, r3
 8013c56:	f04f 0800 	mov.w	r8, #0
 8013c5a:	e02c      	b.n	8013cb6 <lv_draw_sw_polygon+0x1f2>
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 8013c5c:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8013c60:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	f47f af6b 	bne.w	8013b40 <lv_draw_sw_polygon+0x7c>
 8013c6a:	e76e      	b.n	8013b4a <lv_draw_sw_polygon+0x86>
        lv_mem_buf_release(p);
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	f00e fa11 	bl	8022094 <lv_mem_buf_release>
        return;
 8013c72:	e077      	b.n	8013d64 <lv_draw_sw_polygon+0x2a0>
        lv_mem_buf_release(p);
 8013c74:	4620      	mov	r0, r4
 8013c76:	f00e fa0d 	bl	8022094 <lv_mem_buf_release>
        return;
 8013c7a:	e073      	b.n	8013d64 <lv_draw_sw_polygon+0x2a0>

            i_next_right = i_prev_right + 1;
            if(i_next_right > point_cnt - 1) i_next_right = 0;
        }
        else {
            i_next_left = i_prev_left + 1;
 8013c7c:	1c7d      	adds	r5, r7, #1
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 8013c7e:	45ab      	cmp	fp, r5
 8013c80:	bfd8      	it	le
 8013c82:	2500      	movle	r5, #0

            i_next_right = i_prev_right - 1;
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 8013c84:	f1b9 0601 	subs.w	r6, r9, #1
 8013c88:	bf48      	it	mi
 8013c8a:	445e      	addmi	r6, fp
 8013c8c:	e01f      	b.n	8013cce <lv_draw_sw_polygon+0x20a>
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
            if(p[i_next_left].y != p[i_prev_left].y &&
               p[i_next_left].x != p[i_prev_left].x) {
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 8013c8e:	2701      	movs	r7, #1
 8013c90:	9701      	str	r7, [sp, #4]
 8013c92:	9000      	str	r0, [sp, #0]
 8013c94:	4677      	mov	r7, lr
 8013c96:	4670      	mov	r0, lr
 8013c98:	f7fb fa50 	bl	800f13c <lv_draw_mask_line_points_init>
                                              p[i_next_left].x, p[i_next_left].y,
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
 8013c9c:	9905      	ldr	r1, [sp, #20]
 8013c9e:	4638      	mov	r0, r7
 8013ca0:	f7fb f96e 	bl	800ef80 <lv_draw_mask_add>
                mp_next++;
 8013ca4:	463b      	mov	r3, r7
 8013ca6:	332c      	adds	r3, #44	; 0x2c
 8013ca8:	469e      	mov	lr, r3
 8013caa:	e023      	b.n	8013cf4 <lv_draw_sw_polygon+0x230>
                                              p[i_next_right].x, p[i_next_right].y,
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
                mp_next++;
            }
            mask_cnt++;
 8013cac:	f108 0801 	add.w	r8, r8, #1
            i_prev_right = i_next_right;
 8013cb0:	46b1      	mov	r9, r6
        }

    } while(mask_cnt < point_cnt);
 8013cb2:	45c2      	cmp	sl, r8
 8013cb4:	d944      	bls.n	8013d40 <lv_draw_sw_polygon+0x27c>
        if(!inv) {
 8013cb6:	9b02      	ldr	r3, [sp, #8]
 8013cb8:	9a03      	ldr	r2, [sp, #12]
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	dbde      	blt.n	8013c7c <lv_draw_sw_polygon+0x1b8>
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 8013cbe:	1e7d      	subs	r5, r7, #1
 8013cc0:	bf48      	it	mi
 8013cc2:	445d      	addmi	r5, fp
            i_next_right = i_prev_right + 1;
 8013cc4:	f109 0601 	add.w	r6, r9, #1
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 8013cc8:	45b3      	cmp	fp, r6
 8013cca:	bfd8      	it	le
 8013ccc:	2600      	movle	r6, #0
        if(p[i_next_left].y >= p[i_prev_left].y) {
 8013cce:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8013cd2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013cd6:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013cda:	00b9      	lsls	r1, r7, #2
 8013cdc:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8013ce0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013ce4:	4290      	cmp	r0, r2
 8013ce6:	db08      	blt.n	8013cfa <lv_draw_sw_polygon+0x236>
            if(p[i_next_left].y != p[i_prev_left].y &&
 8013ce8:	d004      	beq.n	8013cf4 <lv_draw_sw_polygon+0x230>
               p[i_next_left].x != p[i_prev_left].x) {
 8013cea:	f934 300c 	ldrsh.w	r3, [r4, ip]
 8013cee:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_left].y != p[i_prev_left].y &&
 8013cf0:	428b      	cmp	r3, r1
 8013cf2:	d1cc      	bne.n	8013c8e <lv_draw_sw_polygon+0x1ca>
            mask_cnt++;
 8013cf4:	f108 0801 	add.w	r8, r8, #1
            i_prev_left = i_next_left;
 8013cf8:	462f      	mov	r7, r5
        if(mask_cnt == point_cnt) break;
 8013cfa:	45c2      	cmp	sl, r8
 8013cfc:	d020      	beq.n	8013d40 <lv_draw_sw_polygon+0x27c>
        if(p[i_next_right].y >= p[i_prev_right].y) {
 8013cfe:	00b5      	lsls	r5, r6, #2
 8013d00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013d04:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013d08:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8013d0c:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8013d10:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013d14:	4290      	cmp	r0, r2
 8013d16:	dbcc      	blt.n	8013cb2 <lv_draw_sw_polygon+0x1ee>
            if(p[i_next_right].y != p[i_prev_right].y &&
 8013d18:	d0c8      	beq.n	8013cac <lv_draw_sw_polygon+0x1e8>
               p[i_next_right].x != p[i_prev_right].x) {
 8013d1a:	5f63      	ldrsh	r3, [r4, r5]
 8013d1c:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_right].y != p[i_prev_right].y &&
 8013d1e:	428b      	cmp	r3, r1
 8013d20:	d0c4      	beq.n	8013cac <lv_draw_sw_polygon+0x1e8>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 8013d22:	2500      	movs	r5, #0
 8013d24:	9501      	str	r5, [sp, #4]
 8013d26:	9000      	str	r0, [sp, #0]
 8013d28:	4675      	mov	r5, lr
 8013d2a:	4670      	mov	r0, lr
 8013d2c:	f7fb fa06 	bl	800f13c <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 8013d30:	9905      	ldr	r1, [sp, #20]
 8013d32:	4628      	mov	r0, r5
 8013d34:	f7fb f924 	bl	800ef80 <lv_draw_mask_add>
                mp_next++;
 8013d38:	462b      	mov	r3, r5
 8013d3a:	332c      	adds	r3, #44	; 0x2c
 8013d3c:	469e      	mov	lr, r3
 8013d3e:	e7b5      	b.n	8013cac <lv_draw_sw_polygon+0x1e8>

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 8013d40:	aa0a      	add	r2, sp, #40	; 0x28
 8013d42:	9906      	ldr	r1, [sp, #24]
 8013d44:	9d04      	ldr	r5, [sp, #16]
 8013d46:	4628      	mov	r0, r5
 8013d48:	f7fb fdcc 	bl	800f8e4 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 8013d4c:	9e05      	ldr	r6, [sp, #20]
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f7fb f972 	bl	800f038 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 8013d54:	4630      	mov	r0, r6
 8013d56:	f00e f99d 	bl	8022094 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	f00e f99a 	bl	8022094 <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 8013d60:	9a07      	ldr	r2, [sp, #28]
 8013d62:	60aa      	str	r2, [r5, #8]
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 8013d64:	b00d      	add	sp, #52	; 0x34
 8013d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6a:	bf00      	nop
 8013d6c:	0802d4ac 	.word	0x0802d4ac

08013d70 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
 8013d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d74:	b087      	sub	sp, #28
 8013d76:	4604      	mov	r4, r0
 8013d78:	460b      	mov	r3, r1
 8013d7a:	9100      	str	r1, [sp, #0]
 8013d7c:	9204      	str	r2, [sp, #16]
    int32_t s_left = sw >> 1;
 8013d7e:	104e      	asrs	r6, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
 8013d80:	f011 0f01 	tst.w	r1, #1
 8013d84:	bf03      	ittte	eq
 8013d86:	f106 39ff 	addeq.w	r9, r6, #4294967295	; 0xffffffff
 8013d8a:	fa0f f389 	sxtheq.w	r3, r9
 8013d8e:	9305      	streq	r3, [sp, #20]
    int32_t s_left = sw >> 1;
 8013d90:	9605      	strne	r6, [sp, #20]

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 8013d92:	0045      	lsls	r5, r0, #1
 8013d94:	4628      	mov	r0, r5
 8013d96:	f00e f91b 	bl	8021fd0 <lv_mem_buf_get>
 8013d9a:	9001      	str	r0, [sp, #4]
    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;

    for(y = 0; y < size; y++) {
 8013d9c:	2c00      	cmp	r4, #0
 8013d9e:	f340 80a9 	ble.w	8013ef4 <shadow_blur_corner+0x184>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8013da2:	f1a5 0b02 	sub.w	fp, r5, #2
 8013da6:	f106 0901 	add.w	r9, r6, #1
 8013daa:	9a05      	ldr	r2, [sp, #20]
 8013dac:	4491      	add	r9, r2
 8013dae:	ebc9 79c9 	rsb	r9, r9, r9, lsl #31
 8013db2:	9f04      	ldr	r7, [sp, #16]
 8013db4:	eb07 0949 	add.w	r9, r7, r9, lsl #1
 8013db8:	1e63      	subs	r3, r4, #1
 8013dba:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013dbe:	9302      	str	r3, [sp, #8]
 8013dc0:	eb06 0802 	add.w	r8, r6, r2
    for(y = 0; y < size; y++) {
 8013dc4:	f04f 0a00 	mov.w	sl, #0
        for(x = size - 1; x >= 0; x--) {
 8013dc8:	1e63      	subs	r3, r4, #1
 8013dca:	4433      	add	r3, r6
 8013dcc:	9303      	str	r3, [sp, #12]
 8013dce:	e01e      	b.n	8013e0e <shadow_blur_corner+0x9e>
 8013dd0:	4611      	mov	r1, r2
            sh_ups_blur_buf[x] = v;
 8013dd2:	f820 3902 	strh.w	r3, [r0], #-2

            /*Forget the right pixel*/
            uint32_t right_val = 0;
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 8013dd6:	428c      	cmp	r4, r1
 8013dd8:	bfcc      	ite	gt
 8013dda:	f837 2011 	ldrhgt.w	r2, [r7, r1, lsl #1]
            uint32_t right_val = 0;
 8013dde:	2200      	movle	r2, #0
            v -= right_val;
 8013de0:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 8013de2:	eba1 0208 	sub.w	r2, r1, r8
 8013de6:	2a00      	cmp	r2, #0
 8013de8:	bfd4      	ite	le
 8013dea:	883a      	ldrhle	r2, [r7, #0]
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 8013dec:	f839 2011 	ldrhgt.w	r2, [r9, r1, lsl #1]
            v += left_val;
 8013df0:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
 8013df2:	1e4a      	subs	r2, r1, #1
 8013df4:	42b1      	cmp	r1, r6
 8013df6:	d1eb      	bne.n	8013dd0 <shadow_blur_corner+0x60>
        }
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 8013df8:	462a      	mov	r2, r5
 8013dfa:	9901      	ldr	r1, [sp, #4]
 8013dfc:	4638      	mov	r0, r7
 8013dfe:	f00e f97f 	bl	8022100 <lv_memcpy>
        sh_ups_tmp_buf += size;
 8013e02:	442f      	add	r7, r5
    for(y = 0; y < size; y++) {
 8013e04:	f10a 0a01 	add.w	sl, sl, #1
 8013e08:	44a9      	add	r9, r5
 8013e0a:	45a2      	cmp	sl, r4
 8013e0c:	d07b      	beq.n	8013f06 <shadow_blur_corner+0x196>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 8013e0e:	f837 300b 	ldrh.w	r3, [r7, fp]
 8013e12:	9a00      	ldr	r2, [sp, #0]
 8013e14:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
 8013e18:	9903      	ldr	r1, [sp, #12]
 8013e1a:	9802      	ldr	r0, [sp, #8]
 8013e1c:	e7d9      	b.n	8013dd2 <shadow_blur_corner+0x62>

    /*Vertical blur*/
    uint32_t i;
    uint32_t max_v = LV_OPA_COVER << SHADOW_UPSCALE_SHIFT;
    uint32_t max_v_div = max_v / sw;
    for(i = 0; i < (uint32_t)size * size; i++) {
 8013e1e:	3101      	adds	r1, #1
 8013e20:	428f      	cmp	r7, r1
 8013e22:	d90c      	bls.n	8013e3e <shadow_blur_corner+0xce>
        if(sh_ups_buf[i] == 0) continue;
 8013e24:	3302      	adds	r3, #2
 8013e26:	881a      	ldrh	r2, [r3, #0]
 8013e28:	2a00      	cmp	r2, #0
 8013e2a:	d0f8      	beq.n	8013e1e <shadow_blur_corner+0xae>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 8013e2c:	f5b2 5f7f 	cmp.w	r2, #16320	; 0x3fc0
 8013e30:	bf0e      	itee	eq
 8013e32:	f8a3 c000 	strheq.w	ip, [r3]
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 8013e36:	fb92 f2fe 	sdivne	r2, r2, lr
 8013e3a:	801a      	strhne	r2, [r3, #0]
 8013e3c:	e7ef      	b.n	8013e1e <shadow_blur_corner+0xae>
    }

    for(x = 0; x < size; x++) {
 8013e3e:	2c00      	cmp	r4, #0
 8013e40:	dd52      	ble.n	8013ee8 <shadow_blur_corner+0x178>
 8013e42:	9b04      	ldr	r3, [sp, #16]
 8013e44:	9303      	str	r3, [sp, #12]
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8013e46:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8013e4a:	fb05 3a0a 	mla	sl, r5, sl, r3
 8013e4e:	9905      	ldr	r1, [sp, #20]
 8013e50:	fb01 5205 	mla	r2, r1, r5, r5
 8013e54:	43f3      	mvns	r3, r6
 8013e56:	1a5b      	subs	r3, r3, r1
 8013e58:	fb04 f803 	mul.w	r8, r4, r3
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	9302      	str	r3, [sp, #8]
 8013e60:	1e93      	subs	r3, r2, #2
 8013e62:	9304      	str	r3, [sp, #16]
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8013e64:	f101 0901 	add.w	r9, r1, #1
 8013e68:	9605      	str	r6, [sp, #20]
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8013e6a:	9a03      	ldr	r2, [sp, #12]
 8013e6c:	4611      	mov	r1, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8013e6e:	3202      	adds	r2, #2
 8013e70:	9203      	str	r2, [sp, #12]
 8013e72:	880b      	ldrh	r3, [r1, #0]
 8013e74:	9800      	ldr	r0, [sp, #0]
 8013e76:	fb00 f303 	mul.w	r3, r0, r3
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8013e7a:	9804      	ldr	r0, [sp, #16]
 8013e7c:	4410      	add	r0, r2
 8013e7e:	9a01      	ldr	r2, [sp, #4]
 8013e80:	f1a2 0c02 	sub.w	ip, r2, #2
 8013e84:	9a05      	ldr	r2, [sp, #20]
 8013e86:	4256      	negs	r6, r2
        int32_t v = sh_ups_tmp_buf[0] * sw;
 8013e88:	46e6      	mov	lr, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
 8013e8a:	460f      	mov	r7, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8013e8c:	2200      	movs	r2, #0
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	bfac      	ite	ge
 8013e92:	f3c3 1b8f 	ubfxge	fp, r3, #6, #16
 8013e96:	f04f 0b00 	movlt.w	fp, #0
 8013e9a:	f82e bf02 	strh.w	fp, [lr, #2]!
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 8013e9e:	2e00      	cmp	r6, #0
 8013ea0:	bfd4      	ite	le
 8013ea2:	f8b7 b000 	ldrhle.w	fp, [r7]
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 8013ea6:	f830 b018 	ldrhgt.w	fp, [r0, r8, lsl #1]
            v -= top_val;
 8013eaa:	eba3 0b0b 	sub.w	fp, r3, fp
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 8013eae:	eb09 0302 	add.w	r3, r9, r2
 8013eb2:	429c      	cmp	r4, r3
 8013eb4:	bfcc      	ite	gt
 8013eb6:	8803      	ldrhgt	r3, [r0, #0]
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 8013eb8:	f8ba 3000 	ldrhle.w	r3, [sl]
            v += bottom_val;
 8013ebc:	445b      	add	r3, fp
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 8013ebe:	3201      	adds	r2, #1
 8013ec0:	442f      	add	r7, r5
 8013ec2:	4428      	add	r0, r5
 8013ec4:	3601      	adds	r6, #1
 8013ec6:	42a2      	cmp	r2, r4
 8013ec8:	dbe1      	blt.n	8013e8e <shadow_blur_corner+0x11e>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8013eca:	2300      	movs	r3, #0
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 8013ecc:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 8013ed0:	800a      	strh	r2, [r1, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	4429      	add	r1, r5
 8013ed6:	42a3      	cmp	r3, r4
 8013ed8:	dbf8      	blt.n	8013ecc <shadow_blur_corner+0x15c>
    for(x = 0; x < size; x++) {
 8013eda:	9b02      	ldr	r3, [sp, #8]
 8013edc:	3301      	adds	r3, #1
 8013ede:	9302      	str	r3, [sp, #8]
 8013ee0:	f10a 0a02 	add.w	sl, sl, #2
 8013ee4:	42a3      	cmp	r3, r4
 8013ee6:	dbc0      	blt.n	8013e6a <shadow_blur_corner+0xfa>
        }
    }

    lv_mem_buf_release(sh_ups_blur_buf);
 8013ee8:	9801      	ldr	r0, [sp, #4]
 8013eea:	f00e f8d3 	bl	8022094 <lv_mem_buf_release>
}
 8013eee:	b007      	add	sp, #28
 8013ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t max_v_div = max_v / sw;
 8013ef4:	f44f 5c7f 	mov.w	ip, #16320	; 0x3fc0
 8013ef8:	9b00      	ldr	r3, [sp, #0]
 8013efa:	fbbc fcf3 	udiv	ip, ip, r3
    for(i = 0; i < (uint32_t)size * size; i++) {
 8013efe:	fb04 f704 	mul.w	r7, r4, r4
 8013f02:	b94f      	cbnz	r7, 8013f18 <shadow_blur_corner+0x1a8>
 8013f04:	e7f0      	b.n	8013ee8 <shadow_blur_corner+0x178>
    uint32_t max_v_div = max_v / sw;
 8013f06:	f44f 5c7f 	mov.w	ip, #16320	; 0x3fc0
 8013f0a:	9b00      	ldr	r3, [sp, #0]
 8013f0c:	fbbc fcf3 	udiv	ip, ip, r3
    for(i = 0; i < (uint32_t)size * size; i++) {
 8013f10:	fb04 f704 	mul.w	r7, r4, r4
 8013f14:	2f00      	cmp	r7, #0
 8013f16:	d094      	beq.n	8013e42 <shadow_blur_corner+0xd2>
 8013f18:	9b04      	ldr	r3, [sp, #16]
 8013f1a:	3b02      	subs	r3, #2
 8013f1c:	2100      	movs	r1, #0
 8013f1e:	f8dd e000 	ldr.w	lr, [sp]
 8013f22:	e77f      	b.n	8013e24 <shadow_blur_corner+0xb4>

08013f24 <draw_bg>:
{
 8013f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f28:	b09b      	sub	sp, #108	; 0x6c
 8013f2a:	9000      	str	r0, [sp, #0]
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 8013f2c:	78cb      	ldrb	r3, [r1, #3]
 8013f2e:	2b02      	cmp	r3, #2
 8013f30:	f240 8187 	bls.w	8014242 <draw_bg+0x31e>
 8013f34:	460c      	mov	r4, r1
    dest->x1 = src->x1;
 8013f36:	f9b2 5000 	ldrsh.w	r5, [r2]
 8013f3a:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    dest->y1 = src->y1;
 8013f3e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8013f42:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
    dest->x2 = src->x2;
 8013f46:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8013f4a:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
    dest->y2 = src->y2;
 8013f4e:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8013f52:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 8013f56:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 8013f5a:	2a01      	cmp	r2, #1
 8013f5c:	dd1c      	ble.n	8013f98 <draw_bg+0x74>
 8013f5e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8013f62:	2afc      	cmp	r2, #252	; 0xfc
 8013f64:	d918      	bls.n	8013f98 <draw_bg+0x74>
 8013f66:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013f6a:	b1aa      	cbz	r2, 8013f98 <draw_bg+0x74>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 8013f6c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8013f70:	f3c2 06c0 	ubfx	r6, r2, #3, #1
 8013f74:	4435      	add	r5, r6
 8013f76:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 8013f7a:	f3c2 0580 	ubfx	r5, r2, #2, #1
 8013f7e:	4428      	add	r0, r5
 8013f80:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 8013f84:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8013f88:	1a09      	subs	r1, r1, r0
 8013f8a:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 8013f8e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8013f92:	1a9b      	subs	r3, r3, r2
 8013f94:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 8013f98:	9b00      	ldr	r3, [sp, #0]
 8013f9a:	689a      	ldr	r2, [r3, #8]
 8013f9c:	a918      	add	r1, sp, #96	; 0x60
 8013f9e:	a816      	add	r0, sp, #88	; 0x58
 8013fa0:	f00d f8af 	bl	8021102 <_lv_area_intersect>
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	f000 814c 	beq.w	8014242 <draw_bg+0x31e>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 8013faa:	f894 a00f 	ldrb.w	sl, [r4, #15]
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 8013fae:	f01a 0a07 	ands.w	sl, sl, #7
 8013fb2:	bf0c      	ite	eq
 8013fb4:	88a5      	ldrheq	r5, [r4, #4]
 8013fb6:	88e5      	ldrhne	r5, [r4, #6]
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 8013fb8:	8963      	ldrh	r3, [r4, #10]
 8013fba:	42ab      	cmp	r3, r5
 8013fbc:	bf08      	it	eq
 8013fbe:	f04f 0a00 	moveq.w	sl, #0
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 8013fc2:	a818      	add	r0, sp, #96	; 0x60
 8013fc4:	f7fb f886 	bl	800f0d4 <lv_draw_mask_is_any>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 8013fc8:	2300      	movs	r3, #0
 8013fca:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fcc:	9310      	str	r3, [sp, #64]	; 0x40
 8013fce:	9311      	str	r3, [sp, #68]	; 0x44
 8013fd0:	9312      	str	r3, [sp, #72]	; 0x48
 8013fd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8013fd4:	9314      	str	r3, [sp, #80]	; 0x50
 8013fd6:	9315      	str	r3, [sp, #84]	; 0x54
    blend_dsc.blend_mode = dsc->blend_mode;
 8013fd8:	78a3      	ldrb	r3, [r4, #2]
 8013fda:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    blend_dsc.color = bg_color;
 8013fde:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 8013fe2:	9002      	str	r0, [sp, #8]
 8013fe4:	b928      	cbnz	r0, 8013ff2 <draw_bg+0xce>
 8013fe6:	f9b4 3000 	ldrsh.w	r3, [r4]
 8013fea:	b913      	cbnz	r3, 8013ff2 <draw_bg+0xce>
 8013fec:	f1ba 0f00 	cmp.w	sl, #0
 8013ff0:	d05e      	beq.n	80140b0 <draw_bg+0x18c>
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 8013ff2:	f894 9003 	ldrb.w	r9, [r4, #3]
 8013ff6:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
 8013ffa:	bf28      	it	cs
 8013ffc:	f04f 09ff 	movcs.w	r9, #255	; 0xff
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014000:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8014004:	3501      	adds	r5, #1
 8014006:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801400a:	1aed      	subs	r5, r5, r3
 801400c:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801400e:	f8bd 7066 	ldrh.w	r7, [sp, #102]	; 0x66
 8014012:	3701      	adds	r7, #1
 8014014:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8014018:	1aff      	subs	r7, r7, r3
 801401a:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 801401c:	46bb      	mov	fp, r7
 801401e:	42af      	cmp	r7, r5
 8014020:	bfa8      	it	ge
 8014022:	46ab      	movge	fp, r5
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 8014024:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 8014028:	f9b4 3000 	ldrsh.w	r3, [r4]
 801402c:	459b      	cmp	fp, r3
 801402e:	bfa8      	it	ge
 8014030:	469b      	movge	fp, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014032:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8014036:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
 801403a:	1c5e      	adds	r6, r3, #1
 801403c:	1ab6      	subs	r6, r6, r2
 801403e:	b236      	sxth	r6, r6
    if(rout > 0 || mask_any) {
 8014040:	f1bb 0f00 	cmp.w	fp, #0
 8014044:	dc03      	bgt.n	801404e <draw_bg+0x12a>
 8014046:	9902      	ldr	r1, [sp, #8]
 8014048:	2900      	cmp	r1, #0
 801404a:	f000 8132 	beq.w	80142b2 <draw_bg+0x38e>
        mask_buf = lv_mem_buf_get(clipped_w);
 801404e:	4630      	mov	r0, r6
 8014050:	f00d ffbe 	bl	8021fd0 <lv_mem_buf_get>
 8014054:	4680      	mov	r8, r0
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 8014056:	2300      	movs	r3, #0
 8014058:	465a      	mov	r2, fp
 801405a:	a918      	add	r1, sp, #96	; 0x60
 801405c:	a809      	add	r0, sp, #36	; 0x24
 801405e:	f7fb f991 	bl	800f384 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8014062:	2100      	movs	r1, #0
 8014064:	a809      	add	r0, sp, #36	; 0x24
 8014066:	f7fa ff8b 	bl	800ef80 <lv_draw_mask_add>
 801406a:	9003      	str	r0, [sp, #12]
    blend_area.x1 = clipped_coords.x1;
 801406c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8014070:	f8ad 301c 	strh.w	r3, [sp, #28]
    blend_area.x2 = clipped_coords.x2;
 8014074:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8014078:	f8ad 3020 	strh.w	r3, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 801407c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    blend_dsc.blend_area = &blend_area;
 8014080:	ab07      	add	r3, sp, #28
 8014082:	930f      	str	r3, [sp, #60]	; 0x3c
    blend_dsc.mask_area = &blend_area;
 8014084:	9314      	str	r3, [sp, #80]	; 0x50
    blend_dsc.opa = LV_OPA_COVER;
 8014086:	23ff      	movs	r3, #255	; 0xff
 8014088:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 801408c:	463a      	mov	r2, r7
 801408e:	4629      	mov	r1, r5
 8014090:	1da0      	adds	r0, r4, #6
 8014092:	f7fe fa25 	bl	80124e0 <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 8014096:	9001      	str	r0, [sp, #4]
 8014098:	b110      	cbz	r0, 80140a0 <draw_bg+0x17c>
 801409a:	f1ba 0f02 	cmp.w	sl, #2
 801409e:	d011      	beq.n	80140c4 <draw_bg+0x1a0>
    if(mask_any) {
 80140a0:	9b02      	ldr	r3, [sp, #8]
 80140a2:	b9d3      	cbnz	r3, 80140da <draw_bg+0x1b6>
    for(h = 0; h < rout; h++) {
 80140a4:	f1bb 0f00 	cmp.w	fp, #0
 80140a8:	bfc8      	it	gt
 80140aa:	2700      	movgt	r7, #0
 80140ac:	dc60      	bgt.n	8014170 <draw_bg+0x24c>
 80140ae:	e11d      	b.n	80142ec <draw_bg+0x3c8>
        blend_dsc.blend_area = &bg_coords;
 80140b0:	ab18      	add	r3, sp, #96	; 0x60
 80140b2:	930f      	str	r3, [sp, #60]	; 0x3c
        blend_dsc.opa = dsc->bg_opa;
 80140b4:	78e3      	ldrb	r3, [r4, #3]
 80140b6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80140ba:	a90f      	add	r1, sp, #60	; 0x3c
 80140bc:	9800      	ldr	r0, [sp, #0]
 80140be:	f7fd f905 	bl	80112cc <lv_draw_sw_blend>
        return;
 80140c2:	e0be      	b.n	8014242 <draw_bg+0x31e>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 80140c4:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 80140c8:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
 80140cc:	1a9a      	subs	r2, r3, r2
 80140ce:	9b01      	ldr	r3, [sp, #4]
 80140d0:	689b      	ldr	r3, [r3, #8]
 80140d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80140d6:	9310      	str	r3, [sp, #64]	; 0x40
 80140d8:	e7e2      	b.n	80140a0 <draw_bg+0x17c>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 80140da:	f9bd 405a 	ldrsh.w	r4, [sp, #90]	; 0x5a
 80140de:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80140e2:	429c      	cmp	r4, r3
 80140e4:	f300 809e 	bgt.w	8014224 <draw_bg+0x300>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80140e8:	2702      	movs	r7, #2
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80140ea:	f8dd b000 	ldr.w	fp, [sp]
 80140ee:	e009      	b.n	8014104 <draw_bg+0x1e0>
 80140f0:	a90f      	add	r1, sp, #60	; 0x3c
 80140f2:	4658      	mov	r0, fp
 80140f4:	f7fd f8ea 	bl	80112cc <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 80140f8:	3401      	adds	r4, #1
 80140fa:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80140fe:	42a3      	cmp	r3, r4
 8014100:	f2c0 8090 	blt.w	8014224 <draw_bg+0x300>
            blend_area.y1 = h;
 8014104:	b225      	sxth	r5, r4
 8014106:	f8ad 501e 	strh.w	r5, [sp, #30]
            blend_area.y2 = h;
 801410a:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
            lv_memset(mask_buf, opa, clipped_w);
 801410e:	4632      	mov	r2, r6
 8014110:	4649      	mov	r1, r9
 8014112:	4640      	mov	r0, r8
 8014114:	f00e f925 	bl	8022362 <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8014118:	4633      	mov	r3, r6
 801411a:	462a      	mov	r2, r5
 801411c:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
 8014120:	4640      	mov	r0, r8
 8014122:	f7fa ff4f 	bl	800efc4 <lv_draw_mask_apply>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8014126:	2801      	cmp	r0, #1
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8014128:	bf14      	ite	ne
 801412a:	f88d 004c 	strbne.w	r0, [sp, #76]	; 0x4c
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801412e:	f88d 704c 	strbeq.w	r7, [sp, #76]	; 0x4c
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8014132:	f1ba 0f01 	cmp.w	sl, #1
 8014136:	d1db      	bne.n	80140f0 <draw_bg+0x1cc>
 8014138:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801413c:	1ae3      	subs	r3, r4, r3
 801413e:	9a01      	ldr	r2, [sp, #4]
 8014140:	6892      	ldr	r2, [r2, #8]
 8014142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014146:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801414a:	e7d1      	b.n	80140f0 <draw_bg+0x1cc>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 801414c:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8014150:	1ae4      	subs	r4, r4, r3
 8014152:	9b01      	ldr	r3, [sp, #4]
 8014154:	689b      	ldr	r3, [r3, #8]
 8014156:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801415a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801415e:	e036      	b.n	80141ce <draw_bg+0x2aa>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014160:	a90f      	add	r1, sp, #60	; 0x3c
 8014162:	9800      	ldr	r0, [sp, #0]
 8014164:	f7fd f8b2 	bl	80112cc <lv_draw_sw_blend>
    for(h = 0; h < rout; h++) {
 8014168:	3701      	adds	r7, #1
 801416a:	45bb      	cmp	fp, r7
 801416c:	f000 80be 	beq.w	80142ec <draw_bg+0x3c8>
        lv_coord_t top_y = bg_coords.y1 + h;
 8014170:	b2bd      	uxth	r5, r7
 8014172:	f8bd 4062 	ldrh.w	r4, [sp, #98]	; 0x62
 8014176:	442c      	add	r4, r5
 8014178:	b224      	sxth	r4, r4
        lv_coord_t bottom_y = bg_coords.y2 - h;
 801417a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 801417e:	1b5d      	subs	r5, r3, r5
 8014180:	b22d      	sxth	r5, r5
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 8014182:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8014186:	42a3      	cmp	r3, r4
 8014188:	dd03      	ble.n	8014192 <draw_bg+0x26e>
 801418a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801418e:	42ab      	cmp	r3, r5
 8014190:	dbea      	blt.n	8014168 <draw_bg+0x244>
        lv_memset(mask_buf, opa, clipped_w);
 8014192:	4632      	mov	r2, r6
 8014194:	4649      	mov	r1, r9
 8014196:	4640      	mov	r0, r8
 8014198:	f00e f8e3 	bl	8022362 <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 801419c:	4633      	mov	r3, r6
 801419e:	4622      	mov	r2, r4
 80141a0:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 80141a4:	4640      	mov	r0, r8
 80141a6:	f7fa ff0d 	bl	800efc4 <lv_draw_mask_apply>
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80141aa:	2801      	cmp	r0, #1
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 80141ac:	bf12      	itee	ne
 80141ae:	f88d 004c 	strbne.w	r0, [sp, #76]	; 0x4c
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80141b2:	2302      	moveq	r3, #2
 80141b4:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
        if(top_y >= clipped_coords.y1) {
 80141b8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80141bc:	42a3      	cmp	r3, r4
 80141be:	dc0a      	bgt.n	80141d6 <draw_bg+0x2b2>
            blend_area.y1 = top_y;
 80141c0:	f8ad 401e 	strh.w	r4, [sp, #30]
            blend_area.y2 = top_y;
 80141c4:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 80141c8:	f1ba 0f01 	cmp.w	sl, #1
 80141cc:	d0be      	beq.n	801414c <draw_bg+0x228>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80141ce:	a90f      	add	r1, sp, #60	; 0x3c
 80141d0:	9800      	ldr	r0, [sp, #0]
 80141d2:	f7fd f87b 	bl	80112cc <lv_draw_sw_blend>
        if(bottom_y <= clipped_coords.y2) {
 80141d6:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80141da:	42ab      	cmp	r3, r5
 80141dc:	dbc4      	blt.n	8014168 <draw_bg+0x244>
            blend_area.y1 = bottom_y;
 80141de:	f8ad 501e 	strh.w	r5, [sp, #30]
            blend_area.y2 = bottom_y;
 80141e2:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 80141e6:	f1ba 0f01 	cmp.w	sl, #1
 80141ea:	d1b9      	bne.n	8014160 <draw_bg+0x23c>
 80141ec:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 80141f0:	1aed      	subs	r5, r5, r3
 80141f2:	9b01      	ldr	r3, [sp, #4]
 80141f4:	689b      	ldr	r3, [r3, #8]
 80141f6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80141fa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80141fe:	e7af      	b.n	8014160 <draw_bg+0x23c>
        blend_area.y1 = bg_coords.y1 + rout;
 8014200:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8014204:	4423      	add	r3, r4
 8014206:	f8ad 301e 	strh.w	r3, [sp, #30]
        blend_area.y2 = bg_coords.y2 - rout;
 801420a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 801420e:	1b1c      	subs	r4, r3, r4
 8014210:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
        blend_dsc.opa = opa;
 8014214:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
        blend_dsc.mask_buf = NULL;
 8014218:	2300      	movs	r3, #0
 801421a:	9312      	str	r3, [sp, #72]	; 0x48
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801421c:	a90f      	add	r1, sp, #60	; 0x3c
 801421e:	9800      	ldr	r0, [sp, #0]
 8014220:	f7fd f854 	bl	80112cc <lv_draw_sw_blend>
    if(mask_buf) lv_mem_buf_release(mask_buf);
 8014224:	f1b8 0f00 	cmp.w	r8, #0
 8014228:	d002      	beq.n	8014230 <draw_bg+0x30c>
 801422a:	4640      	mov	r0, r8
 801422c:	f00d ff32 	bl	8022094 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 8014230:	9b03      	ldr	r3, [sp, #12]
 8014232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014236:	d135      	bne.n	80142a4 <draw_bg+0x380>
    if(grad) {
 8014238:	9b01      	ldr	r3, [sp, #4]
 801423a:	b113      	cbz	r3, 8014242 <draw_bg+0x31e>
        lv_gradient_cleanup(grad);
 801423c:	4618      	mov	r0, r3
 801423e:	f7fe fa17 	bl	8012670 <lv_gradient_cleanup>
}
 8014242:	b01b      	add	sp, #108	; 0x6c
 8014244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_memset(mask_buf, opa, clipped_w);
 8014248:	4632      	mov	r2, r6
 801424a:	9902      	ldr	r1, [sp, #8]
 801424c:	4640      	mov	r0, r8
 801424e:	f00e f888 	bl	8022362 <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 8014252:	4633      	mov	r3, r6
 8014254:	fa0f f28b 	sxth.w	r2, fp
 8014258:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
 801425c:	4640      	mov	r0, r8
 801425e:	f7fa feb1 	bl	800efc4 <lv_draw_mask_apply>
 8014262:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
 8014266:	e009      	b.n	801427c <draw_bg+0x358>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014268:	a90f      	add	r1, sp, #60	; 0x3c
 801426a:	4638      	mov	r0, r7
 801426c:	f7fd f82e 	bl	80112cc <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8014270:	f10b 0b01 	add.w	fp, fp, #1
 8014274:	455c      	cmp	r4, fp
 8014276:	dbd5      	blt.n	8014224 <draw_bg+0x300>
            if(mask_any_center) {
 8014278:	2d00      	cmp	r5, #0
 801427a:	d1e5      	bne.n	8014248 <draw_bg+0x324>
            blend_area.y1 = h;
 801427c:	fa0f f38b 	sxth.w	r3, fp
 8014280:	f8ad 301e 	strh.w	r3, [sp, #30]
            blend_area.y2 = h;
 8014284:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 8014288:	f1ba 0f01 	cmp.w	sl, #1
 801428c:	d1ec      	bne.n	8014268 <draw_bg+0x344>
 801428e:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 8014292:	ebab 0303 	sub.w	r3, fp, r3
 8014296:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801429a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801429e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80142a2:	e7e1      	b.n	8014268 <draw_bg+0x344>
        lv_draw_mask_remove_id(mask_rout_id);
 80142a4:	4618      	mov	r0, r3
 80142a6:	f7fa feb5 	bl	800f014 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 80142aa:	a809      	add	r0, sp, #36	; 0x24
 80142ac:	f7fa fedc 	bl	800f068 <lv_draw_mask_free_param>
 80142b0:	e7c2      	b.n	8014238 <draw_bg+0x314>
    blend_area.x1 = clipped_coords.x1;
 80142b2:	f8ad 201c 	strh.w	r2, [sp, #28]
    blend_area.x2 = clipped_coords.x2;
 80142b6:	f8ad 3020 	strh.w	r3, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 80142ba:	2300      	movs	r3, #0
 80142bc:	9312      	str	r3, [sp, #72]	; 0x48
    blend_dsc.blend_area = &blend_area;
 80142be:	ab07      	add	r3, sp, #28
 80142c0:	930f      	str	r3, [sp, #60]	; 0x3c
    blend_dsc.mask_area = &blend_area;
 80142c2:	9314      	str	r3, [sp, #80]	; 0x50
    blend_dsc.opa = LV_OPA_COVER;
 80142c4:	23ff      	movs	r3, #255	; 0xff
 80142c6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 80142ca:	463a      	mov	r2, r7
 80142cc:	4629      	mov	r1, r5
 80142ce:	1da0      	adds	r0, r4, #6
 80142d0:	f7fe f906 	bl	80124e0 <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 80142d4:	9001      	str	r0, [sp, #4]
 80142d6:	b128      	cbz	r0, 80142e4 <draw_bg+0x3c0>
    lv_opa_t * mask_buf = NULL;
 80142d8:	f04f 0800 	mov.w	r8, #0
    int16_t mask_rout_id = LV_MASK_ID_INV;
 80142dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142e0:	9303      	str	r3, [sp, #12]
 80142e2:	e6da      	b.n	801409a <draw_bg+0x176>
    lv_opa_t * mask_buf = NULL;
 80142e4:	4680      	mov	r8, r0
    int16_t mask_rout_id = LV_MASK_ID_INV;
 80142e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142ea:	9303      	str	r3, [sp, #12]
    center_coords.x1 = bg_coords.x1;
 80142ec:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80142f0:	f8ad 3014 	strh.w	r3, [sp, #20]
    center_coords.x2 = bg_coords.x2;
 80142f4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80142f8:	f8ad 3018 	strh.w	r3, [sp, #24]
    center_coords.y1 = bg_coords.y1 + rout;
 80142fc:	fa1f f48b 	uxth.w	r4, fp
 8014300:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8014304:	4423      	add	r3, r4
 8014306:	f8ad 3016 	strh.w	r3, [sp, #22]
    center_coords.y2 = bg_coords.y2 - rout;
 801430a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
 801430e:	1b1b      	subs	r3, r3, r4
 8014310:	f8ad 301a 	strh.w	r3, [sp, #26]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 8014314:	a805      	add	r0, sp, #20
 8014316:	f7fa fedd 	bl	800f0d4 <lv_draw_mask_is_any>
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 801431a:	4605      	mov	r5, r0
 801431c:	b918      	cbnz	r0, 8014326 <draw_bg+0x402>
 801431e:	f1ba 0f00 	cmp.w	sl, #0
 8014322:	f43f af6d 	beq.w	8014200 <draw_bg+0x2dc>
        blend_dsc.opa = opa;
 8014326:	f88d 9054 	strb.w	r9, [sp, #84]	; 0x54
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 801432a:	2301      	movs	r3, #1
 801432c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
        int32_t h_end = bg_coords.y2 - rout;
 8014330:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 8014334:	eba4 040b 	sub.w	r4, r4, fp
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 8014338:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801433c:	449b      	add	fp, r3
 801433e:	455c      	cmp	r4, fp
 8014340:	f6ff af70 	blt.w	8014224 <draw_bg+0x300>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014344:	f8cd 9008 	str.w	r9, [sp, #8]
 8014348:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801434c:	9f00      	ldr	r7, [sp, #0]
 801434e:	e793      	b.n	8014278 <draw_bg+0x354>

08014350 <draw_bg_img>:
    if(dsc->bg_img_src == NULL) return;
 8014350:	690b      	ldr	r3, [r1, #16]
 8014352:	2b00      	cmp	r3, #0
 8014354:	f000 810d 	beq.w	8014572 <draw_bg_img+0x222>
{
 8014358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801435c:	b092      	sub	sp, #72	; 0x48
 801435e:	4606      	mov	r6, r0
 8014360:	460c      	mov	r4, r1
 8014362:	4615      	mov	r5, r2
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 8014364:	7e8b      	ldrb	r3, [r1, #26]
 8014366:	2b02      	cmp	r3, #2
 8014368:	d802      	bhi.n	8014370 <draw_bg_img+0x20>
}
 801436a:	b012      	add	sp, #72	; 0x48
 801436c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 8014370:	6882      	ldr	r2, [r0, #8]
 8014372:	4629      	mov	r1, r5
 8014374:	a810      	add	r0, sp, #64	; 0x40
 8014376:	f00c fec4 	bl	8021102 <_lv_area_intersect>
 801437a:	2800      	cmp	r0, #0
 801437c:	d0f5      	beq.n	801436a <draw_bg_img+0x1a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801437e:	68b7      	ldr	r7, [r6, #8]
    draw_ctx->clip_area = &clip_area;
 8014380:	ab10      	add	r3, sp, #64	; 0x40
 8014382:	60b3      	str	r3, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 8014384:	6920      	ldr	r0, [r4, #16]
 8014386:	f7f9 fb18 	bl	800d9ba <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 801438a:	2802      	cmp	r0, #2
 801438c:	d007      	beq.n	801439e <draw_bg_img+0x4e>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 801438e:	a905      	add	r1, sp, #20
 8014390:	6920      	ldr	r0, [r4, #16]
 8014392:	f7fb febb 	bl	801010c <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 8014396:	2801      	cmp	r0, #1
 8014398:	d052      	beq.n	8014440 <draw_bg_img+0xf0>
    draw_ctx->clip_area = clip_area_ori;
 801439a:	60b7      	str	r7, [r6, #8]
 801439c:	e7e5      	b.n	801436a <draw_bg_img+0x1a>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 801439e:	f04f 0800 	mov.w	r8, #0
 80143a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80143a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80143aa:	9301      	str	r3, [sp, #4]
 80143ac:	f8cd 8000 	str.w	r8, [sp]
 80143b0:	4643      	mov	r3, r8
 80143b2:	6962      	ldr	r2, [r4, #20]
 80143b4:	6921      	ldr	r1, [r4, #16]
 80143b6:	a805      	add	r0, sp, #20
 80143b8:	f010 f8f3 	bl	80245a2 <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 80143bc:	882b      	ldrh	r3, [r5, #0]
 80143be:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 80143c2:	88aa      	ldrh	r2, [r5, #4]
 80143c4:	3201      	adds	r2, #1
 80143c6:	1ad2      	subs	r2, r2, r3
 80143c8:	b210      	sxth	r0, r2
 80143ca:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80143ce:	4402      	add	r2, r0
 80143d0:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 80143d4:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 80143d8:	eb03 0362 	add.w	r3, r3, r2, asr #1
 80143dc:	b29b      	uxth	r3, r3
 80143de:	f8ad 3018 	strh.w	r3, [sp, #24]
        a.x2 = a.x1 + size.x - 1;
 80143e2:	3901      	subs	r1, #1
 80143e4:	440b      	add	r3, r1
 80143e6:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 80143ea:	886b      	ldrh	r3, [r5, #2]
 80143ec:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80143f0:	88ea      	ldrh	r2, [r5, #6]
 80143f2:	3201      	adds	r2, #1
 80143f4:	1ad2      	subs	r2, r2, r3
 80143f6:	b210      	sxth	r0, r2
 80143f8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80143fc:	4402      	add	r2, r0
 80143fe:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 8014402:	eba3 0360 	sub.w	r3, r3, r0, asr #1
 8014406:	eb03 0362 	add.w	r3, r3, r2, asr #1
 801440a:	b29b      	uxth	r3, r3
 801440c:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.y2 = a.y1 + size.y - 1;
 8014410:	3901      	subs	r1, #1
 8014412:	440b      	add	r3, r1
 8014414:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_draw_label_dsc_init(&label_draw_dsc);
 8014418:	a808      	add	r0, sp, #32
 801441a:	f7f9 fc4b 	bl	800dcb4 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 801441e:	6963      	ldr	r3, [r4, #20]
 8014420:	9308      	str	r3, [sp, #32]
        label_draw_dsc.color = dsc->bg_img_recolor;
 8014422:	8b23      	ldrh	r3, [r4, #24]
 8014424:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        label_draw_dsc.opa = dsc->bg_img_opa;
 8014428:	7ea3      	ldrb	r3, [r4, #26]
 801442a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 801442e:	f8cd 8000 	str.w	r8, [sp]
 8014432:	6923      	ldr	r3, [r4, #16]
 8014434:	aa06      	add	r2, sp, #24
 8014436:	a908      	add	r1, sp, #32
 8014438:	4630      	mov	r0, r6
 801443a:	f7f9 fc6f 	bl	800dd1c <lv_draw_label>
 801443e:	e7ac      	b.n	801439a <draw_bg_img+0x4a>
            lv_draw_img_dsc_init(&img_dsc);
 8014440:	a808      	add	r0, sp, #32
 8014442:	f7f9 fa6e 	bl	800d922 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 8014446:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801444a:	78a2      	ldrb	r2, [r4, #2]
 801444c:	f362 0303 	bfi	r3, r2, #0, #4
 8014450:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            img_dsc.recolor = dsc->bg_img_recolor;
 8014454:	8b23      	ldrh	r3, [r4, #24]
 8014456:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 801445a:	7ee3      	ldrb	r3, [r4, #27]
 801445c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
            img_dsc.opa = dsc->bg_img_opa;
 8014460:	7ea3      	ldrb	r3, [r4, #26]
 8014462:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
            if(dsc->bg_img_tiled == false) {
 8014466:	7f23      	ldrb	r3, [r4, #28]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d04a      	beq.n	8014502 <draw_bg_img+0x1b2>
                area.y1 = coords->y1;
 801446c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014470:	f8ad 201a 	strh.w	r2, [sp, #26]
                area.y2 = area.y1 + header.h - 1;
 8014474:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014478:	f3c3 134a 	ubfx	r3, r3, #5, #11
 801447c:	3b01      	subs	r3, #1
 801447e:	4413      	add	r3, r2
 8014480:	f8ad 301e 	strh.w	r3, [sp, #30]
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 8014484:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014488:	4293      	cmp	r3, r2
 801448a:	db86      	blt.n	801439a <draw_bg_img+0x4a>
                    area.x1 = coords->x1;
 801448c:	f9b5 2000 	ldrsh.w	r2, [r5]
 8014490:	f8ad 2018 	strh.w	r2, [sp, #24]
                    area.x2 = area.x1 + header.w - 1;
 8014494:	9b05      	ldr	r3, [sp, #20]
 8014496:	f3c3 238a 	ubfx	r3, r3, #10, #11
 801449a:	3b01      	subs	r3, #1
 801449c:	4413      	add	r3, r2
 801449e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 80144a2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80144a6:	4293      	cmp	r3, r2
 80144a8:	db17      	blt.n	80144da <draw_bg_img+0x18a>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 80144aa:	6923      	ldr	r3, [r4, #16]
 80144ac:	aa06      	add	r2, sp, #24
 80144ae:	a908      	add	r1, sp, #32
 80144b0:	4630      	mov	r0, r6
 80144b2:	f7f9 fa9d 	bl	800d9f0 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 80144b6:	9b05      	ldr	r3, [sp, #20]
 80144b8:	f3c3 2c8a 	ubfx	ip, r3, #10, #11
 80144bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80144c0:	4463      	add	r3, ip
 80144c2:	b21b      	sxth	r3, r3
 80144c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80144c8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80144cc:	4494      	add	ip, r2
 80144ce:	f8ad c01c 	strh.w	ip, [sp, #28]
 80144d2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80144d6:	429a      	cmp	r2, r3
 80144d8:	dae7      	bge.n	80144aa <draw_bg_img+0x15a>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 80144da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80144de:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80144e2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80144e6:	4413      	add	r3, r2
 80144e8:	b21b      	sxth	r3, r3
 80144ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80144ee:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80144f2:	440a      	add	r2, r1
 80144f4:	f8ad 201e 	strh.w	r2, [sp, #30]
 80144f8:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 80144fc:	429a      	cmp	r2, r3
 80144fe:	dac5      	bge.n	801448c <draw_bg_img+0x13c>
 8014500:	e74b      	b.n	801439a <draw_bg_img+0x4a>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 8014502:	882a      	ldrh	r2, [r5, #0]
 8014504:	9905      	ldr	r1, [sp, #20]
 8014506:	f3c1 2c8a 	ubfx	ip, r1, #10, #11
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801450a:	88ab      	ldrh	r3, [r5, #4]
 801450c:	3301      	adds	r3, #1
 801450e:	1a9b      	subs	r3, r3, r2
 8014510:	b218      	sxth	r0, r3
 8014512:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8014516:	4403      	add	r3, r0
 8014518:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 801451c:	1a52      	subs	r2, r2, r1
 801451e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8014522:	b29a      	uxth	r2, r3
 8014524:	f8ad 2018 	strh.w	r2, [sp, #24]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 8014528:	886b      	ldrh	r3, [r5, #2]
 801452a:	f8bd e016 	ldrh.w	lr, [sp, #22]
 801452e:	f3ce 104a 	ubfx	r0, lr, #5, #11
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014532:	88e9      	ldrh	r1, [r5, #6]
 8014534:	3101      	adds	r1, #1
 8014536:	1ac9      	subs	r1, r1, r3
 8014538:	b20d      	sxth	r5, r1
 801453a:	f3c1 31c0 	ubfx	r1, r1, #15, #1
 801453e:	4429      	add	r1, r5
 8014540:	f3ce 1e89 	ubfx	lr, lr, #6, #10
 8014544:	eba3 030e 	sub.w	r3, r3, lr
 8014548:	eb03 0361 	add.w	r3, r3, r1, asr #1
 801454c:	b29b      	uxth	r3, r3
 801454e:	f8ad 301a 	strh.w	r3, [sp, #26]
                area.x2 = area.x1 + header.w - 1;
 8014552:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8014556:	4462      	add	r2, ip
 8014558:	f8ad 201c 	strh.w	r2, [sp, #28]
                area.y2 = area.y1 + header.h - 1;
 801455c:	3801      	subs	r0, #1
 801455e:	4403      	add	r3, r0
 8014560:	f8ad 301e 	strh.w	r3, [sp, #30]
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 8014564:	6923      	ldr	r3, [r4, #16]
 8014566:	aa06      	add	r2, sp, #24
 8014568:	a908      	add	r1, sp, #32
 801456a:	4630      	mov	r0, r6
 801456c:	f7f9 fa40 	bl	800d9f0 <lv_draw_img>
 8014570:	e713      	b.n	801439a <draw_bg_img+0x4a>
 8014572:	4770      	bx	lr

08014574 <lv_draw_sw_bg>:
{
 8014574:	b570      	push	{r4, r5, r6, lr}
 8014576:	4604      	mov	r4, r0
 8014578:	460d      	mov	r5, r1
 801457a:	4616      	mov	r6, r2
    draw_bg(draw_ctx, dsc, coords);
 801457c:	f7ff fcd2 	bl	8013f24 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 8014580:	4632      	mov	r2, r6
 8014582:	4629      	mov	r1, r5
 8014584:	4620      	mov	r0, r4
 8014586:	f7ff fee3 	bl	8014350 <draw_bg_img>
}
 801458a:	bd70      	pop	{r4, r5, r6, pc}

0801458c <draw_border_generic>:
                        dsc->blend_mode);
}

void draw_border_generic(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                         lv_coord_t rout, lv_coord_t rin, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
 801458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014590:	b0b1      	sub	sp, #196	; 0xc4
 8014592:	4683      	mov	fp, r0
 8014594:	4689      	mov	r9, r1
 8014596:	4692      	mov	sl, r2
 8014598:	461d      	mov	r5, r3
 801459a:	f9bd 60e8 	ldrsh.w	r6, [sp, #232]	; 0xe8
 801459e:	f89d 70f0 	ldrb.w	r7, [sp, #240]	; 0xf0
    opa = opa >= LV_OPA_COVER ? LV_OPA_COVER : opa;

    bool mask_any = lv_draw_mask_is_any(outer_area);
 80145a2:	4608      	mov	r0, r1
 80145a4:	f7fa fd96 	bl	800f0d4 <lv_draw_mask_is_any>

#if LV_DRAW_COMPLEX

    if(!mask_any && rout == 0 && rin == 0) {
 80145a8:	9003      	str	r0, [sp, #12]
 80145aa:	2800      	cmp	r0, #0
 80145ac:	d175      	bne.n	801469a <draw_border_generic+0x10e>
 80145ae:	ea55 0306 	orrs.w	r3, r5, r6
 80145b2:	d172      	bne.n	801469a <draw_border_generic+0x10e>
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 80145b4:	211c      	movs	r1, #28
 80145b6:	a812      	add	r0, sp, #72	; 0x48
 80145b8:	f00d ff38 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &a;
 80145bc:	ab10      	add	r3, sp, #64	; 0x40
 80145be:	9312      	str	r3, [sp, #72]	; 0x48
    blend_dsc.color = color;
 80145c0:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 80145c4:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
    blend_dsc.opa = opa;
 80145c8:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 80145cc:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 80145d0:	f9ba 4002 	ldrsh.w	r4, [sl, #2]
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 80145d4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80145d8:	9301      	str	r3, [sp, #4]
 80145da:	f9ba 8006 	ldrsh.w	r8, [sl, #6]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 80145de:	f9b9 7000 	ldrsh.w	r7, [r9]
 80145e2:	f9ba 3000 	ldrsh.w	r3, [sl]
 80145e6:	9302      	str	r3, [sp, #8]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 80145e8:	f9b9 6004 	ldrsh.w	r6, [r9, #4]
 80145ec:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 80145f0:	9303      	str	r3, [sp, #12]


    /*Top*/
    a.x1 = outer_area->x1;
 80145f2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
    a.x2 = outer_area->x2;
 80145f6:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
    a.y1 = outer_area->y1;
 80145fa:	f8ad 5042 	strh.w	r5, [sp, #66]	; 0x42
    a.y2 = inner_area->y1 - 1;
 80145fe:	1e63      	subs	r3, r4, #1
 8014600:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(top_side) {
 8014604:	42a5      	cmp	r5, r4
 8014606:	dd39      	ble.n	801467c <draw_border_generic+0xf0>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 8014608:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 801460c:	3301      	adds	r3, #1
 801460e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    a.y2 = outer_area->y2;
 8014612:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8014616:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(bottom_side) {
 801461a:	9b01      	ldr	r3, [sp, #4]
 801461c:	4543      	cmp	r3, r8
 801461e:	da32      	bge.n	8014686 <draw_border_generic+0xfa>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Left*/
    a.x1 = outer_area->x1;
 8014620:	f8b9 3000 	ldrh.w	r3, [r9]
 8014624:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    a.x2 = inner_area->x1 - 1;
 8014628:	f8ba 3000 	ldrh.w	r3, [sl]
 801462c:	3b01      	subs	r3, #1
 801462e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 8014632:	42a5      	cmp	r5, r4
 8014634:	bfd4      	ite	le
 8014636:	f9ba 3002 	ldrshle.w	r3, [sl, #2]
 801463a:	f9b9 3002 	ldrshgt.w	r3, [r9, #2]
 801463e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 8014642:	9b01      	ldr	r3, [sp, #4]
 8014644:	4543      	cmp	r3, r8
 8014646:	bfac      	ite	ge
 8014648:	f9ba 3006 	ldrshge.w	r3, [sl, #6]
 801464c:	f9b9 3006 	ldrshlt.w	r3, [r9, #6]
 8014650:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    if(left_side) {
 8014654:	9b02      	ldr	r3, [sp, #8]
 8014656:	429f      	cmp	r7, r3
 8014658:	dd1a      	ble.n	8014690 <draw_border_generic+0x104>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 801465a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801465e:	3301      	adds	r3, #1
 8014660:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    a.x2 = outer_area->x2;
 8014664:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8014668:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    if(right_side) {
 801466c:	9b03      	ldr	r3, [sp, #12]
 801466e:	429e      	cmp	r6, r3
 8014670:	db1b      	blt.n	80146aa <draw_border_generic+0x11e>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014672:	a912      	add	r1, sp, #72	; 0x48
 8014674:	4658      	mov	r0, fp
 8014676:	f7fc fe29 	bl	80112cc <lv_draw_sw_blend>
        return;
 801467a:	e016      	b.n	80146aa <draw_border_generic+0x11e>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801467c:	a912      	add	r1, sp, #72	; 0x48
 801467e:	4658      	mov	r0, fp
 8014680:	f7fc fe24 	bl	80112cc <lv_draw_sw_blend>
 8014684:	e7c0      	b.n	8014608 <draw_border_generic+0x7c>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014686:	a912      	add	r1, sp, #72	; 0x48
 8014688:	4658      	mov	r0, fp
 801468a:	f7fc fe1f 	bl	80112cc <lv_draw_sw_blend>
 801468e:	e7c7      	b.n	8014620 <draw_border_generic+0x94>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014690:	a912      	add	r1, sp, #72	; 0x48
 8014692:	4658      	mov	r0, fp
 8014694:	f7fc fe1a 	bl	80112cc <lv_draw_sw_blend>
 8014698:	e7df      	b.n	801465a <draw_border_generic+0xce>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 801469a:	f8db 2008 	ldr.w	r2, [fp, #8]
 801469e:	4649      	mov	r1, r9
 80146a0:	a82e      	add	r0, sp, #184	; 0xb8
 80146a2:	f00c fd2e 	bl	8021102 <_lv_area_intersect>
 80146a6:	9004      	str	r0, [sp, #16]
 80146a8:	b910      	cbnz	r0, 80146b0 <draw_border_generic+0x124>
}
 80146aa:	b031      	add	sp, #196	; 0xc4
 80146ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80146b0:	f8bd 40bc 	ldrh.w	r4, [sp, #188]	; 0xbc
 80146b4:	3401      	adds	r4, #1
 80146b6:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 80146ba:	1ae4      	subs	r4, r4, r3
 80146bc:	b224      	sxth	r4, r4
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 80146be:	211c      	movs	r1, #28
 80146c0:	a827      	add	r0, sp, #156	; 0x9c
 80146c2:	f00d feb3 	bl	802242c <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 80146c6:	4620      	mov	r0, r4
 80146c8:	f00d fc82 	bl	8021fd0 <lv_mem_buf_get>
 80146cc:	902a      	str	r0, [sp, #168]	; 0xa8
    if(rout > 0) {
 80146ce:	2d00      	cmp	r5, #0
 80146d0:	dc7e      	bgt.n	80147d0 <draw_border_generic+0x244>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 80146d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146d6:	9306      	str	r3, [sp, #24]
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 80146d8:	2301      	movs	r3, #1
 80146da:	4632      	mov	r2, r6
 80146dc:	4651      	mov	r1, sl
 80146de:	a81b      	add	r0, sp, #108	; 0x6c
 80146e0:	f7fa fe50 	bl	800f384 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 80146e4:	2100      	movs	r1, #0
 80146e6:	a81b      	add	r0, sp, #108	; 0x6c
 80146e8:	f7fa fc4a 	bl	800ef80 <lv_draw_mask_add>
 80146ec:	9005      	str	r0, [sp, #20]
    blend_dsc.blend_area = &blend_area;
 80146ee:	ab19      	add	r3, sp, #100	; 0x64
 80146f0:	9327      	str	r3, [sp, #156]	; 0x9c
    blend_dsc.mask_area = &blend_area;
 80146f2:	932c      	str	r3, [sp, #176]	; 0xb0
    blend_dsc.color = color;
 80146f4:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 80146f8:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    blend_dsc.opa = opa;
 80146fc:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
    blend_dsc.blend_mode = blend_mode;
 8014700:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8014704:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 8014708:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
 801470c:	f9b9 7002 	ldrsh.w	r7, [r9, #2]
 8014710:	197b      	adds	r3, r7, r5
 8014712:	42b3      	cmp	r3, r6
 8014714:	bfb8      	it	lt
 8014716:	4633      	movlt	r3, r6
 8014718:	b21b      	sxth	r3, r3
 801471a:	9302      	str	r3, [sp, #8]
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 801471c:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 8014720:	9207      	str	r2, [sp, #28]
 8014722:	f9b9 8006 	ldrsh.w	r8, [r9, #6]
 8014726:	eba8 0305 	sub.w	r3, r8, r5
 801472a:	4293      	cmp	r3, r2
 801472c:	bfa8      	it	ge
 801472e:	4613      	movge	r3, r2
 8014730:	930d      	str	r3, [sp, #52]	; 0x34
 8014732:	b21b      	sxth	r3, r3
 8014734:	9301      	str	r3, [sp, #4]
    if(mask_any) {
 8014736:	9b03      	ldr	r3, [sp, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d155      	bne.n	80147e8 <draw_border_generic+0x25c>
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 801473c:	f9ba c000 	ldrsh.w	ip, [sl]
 8014740:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8014744:	f9b9 1000 	ldrsh.w	r1, [r9]
 8014748:	910c      	str	r1, [sp, #48]	; 0x30
 801474a:	194b      	adds	r3, r1, r5
 801474c:	4662      	mov	r2, ip
 801474e:	459c      	cmp	ip, r3
 8014750:	bfb8      	it	lt
 8014752:	461a      	movlt	r2, r3
 8014754:	920a      	str	r2, [sp, #40]	; 0x28
 8014756:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801475a:	930e      	str	r3, [sp, #56]	; 0x38
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 801475c:	f9ba e004 	ldrsh.w	lr, [sl, #4]
 8014760:	f8cd e020 	str.w	lr, [sp, #32]
 8014764:	f9b9 0004 	ldrsh.w	r0, [r9, #4]
 8014768:	9009      	str	r0, [sp, #36]	; 0x24
 801476a:	1b43      	subs	r3, r0, r5
 801476c:	4573      	cmp	r3, lr
 801476e:	bfa8      	it	ge
 8014770:	4673      	movge	r3, lr
 8014772:	b21a      	sxth	r2, r3
 8014774:	920f      	str	r2, [sp, #60]	; 0x3c
    if(left_side && right_side && top_side && bottom_side &&
 8014776:	458c      	cmp	ip, r1
 8014778:	f2c0 813e 	blt.w	80149f8 <draw_border_generic+0x46c>
 801477c:	4586      	cmp	lr, r0
 801477e:	f300 813b 	bgt.w	80149f8 <draw_border_generic+0x46c>
 8014782:	42be      	cmp	r6, r7
 8014784:	f2c0 8108 	blt.w	8014998 <draw_border_generic+0x40c>
 8014788:	9a07      	ldr	r2, [sp, #28]
 801478a:	4542      	cmp	r2, r8
 801478c:	f300 8121 	bgt.w	80149d2 <draw_border_generic+0x446>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8014790:	2101      	movs	r1, #1
 8014792:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8014796:	440b      	add	r3, r1
 8014798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801479a:	1a9b      	subs	r3, r3, r2
    if(top_side && split_hor) {
 801479c:	b21b      	sxth	r3, r3
 801479e:	2b31      	cmp	r3, #49	; 0x31
 80147a0:	f300 822b 	bgt.w	8014bfa <draw_border_generic+0x66e>
        blend_area.x1 = outer_area->x1;
 80147a4:	f8b9 3000 	ldrh.w	r3, [r9]
 80147a8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = inner_area->x1 - 1;
 80147ac:	f8ba 3000 	ldrh.w	r3, [sl]
 80147b0:	3b01      	subs	r3, #1
 80147b2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = core_area.y1;
 80147b6:	9b02      	ldr	r3, [sp, #8]
 80147b8:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        blend_area.y2 = core_area.y2;
 80147bc:	9b01      	ldr	r3, [sp, #4]
 80147be:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80147c2:	a927      	add	r1, sp, #156	; 0x9c
 80147c4:	4658      	mov	r0, fp
 80147c6:	f7fc fd81 	bl	80112cc <lv_draw_sw_blend>
 80147ca:	9b03      	ldr	r3, [sp, #12]
 80147cc:	9304      	str	r3, [sp, #16]
 80147ce:	e121      	b.n	8014a14 <draw_border_generic+0x488>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 80147d0:	2300      	movs	r3, #0
 80147d2:	462a      	mov	r2, r5
 80147d4:	4649      	mov	r1, r9
 80147d6:	a821      	add	r0, sp, #132	; 0x84
 80147d8:	f7fa fdd4 	bl	800f384 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 80147dc:	2100      	movs	r1, #0
 80147de:	a821      	add	r0, sp, #132	; 0x84
 80147e0:	f7fa fbce 	bl	800ef80 <lv_draw_mask_add>
 80147e4:	9006      	str	r0, [sp, #24]
 80147e6:	e777      	b.n	80146d8 <draw_border_generic+0x14c>
        blend_area.x1 = draw_area.x1;
 80147e8:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 80147ec:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = draw_area.x2;
 80147f0:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	; 0xbc
 80147f4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 80147f8:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 80147fc:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014800:	429d      	cmp	r5, r3
 8014802:	dc28      	bgt.n	8014856 <draw_border_generic+0x2ca>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014804:	4692      	mov	sl, r2
 8014806:	e020      	b.n	801484a <draw_border_generic+0x2be>
            if(!bottom_side && h > core_area.y2) break;
 8014808:	45c2      	cmp	sl, r8
 801480a:	dd02      	ble.n	8014812 <draw_border_generic+0x286>
 801480c:	9b01      	ldr	r3, [sp, #4]
 801480e:	42ab      	cmp	r3, r5
 8014810:	db21      	blt.n	8014856 <draw_border_generic+0x2ca>
            blend_area.y1 = h;
 8014812:	fa0f f985 	sxth.w	r9, r5
 8014816:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
            blend_area.y2 = h;
 801481a:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 801481e:	4621      	mov	r1, r4
 8014820:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014822:	f00d fe69 	bl	80224f8 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 8014826:	4623      	mov	r3, r4
 8014828:	464a      	mov	r2, r9
 801482a:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	; 0xb8
 801482e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014830:	f7fa fbc8 	bl	800efc4 <lv_draw_mask_apply>
 8014834:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014838:	a927      	add	r1, sp, #156	; 0x9c
 801483a:	4658      	mov	r0, fp
 801483c:	f7fc fd46 	bl	80112cc <lv_draw_sw_blend>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 8014840:	3501      	adds	r5, #1
 8014842:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014846:	42ab      	cmp	r3, r5
 8014848:	db05      	blt.n	8014856 <draw_border_generic+0x2ca>
            if(!top_side && h < core_area.y1) continue;
 801484a:	42be      	cmp	r6, r7
 801484c:	dadc      	bge.n	8014808 <draw_border_generic+0x27c>
 801484e:	9b02      	ldr	r3, [sp, #8]
 8014850:	42ab      	cmp	r3, r5
 8014852:	ddd9      	ble.n	8014808 <draw_border_generic+0x27c>
 8014854:	e7f4      	b.n	8014840 <draw_border_generic+0x2b4>
        lv_draw_mask_free_param(&mask_rin_param);
 8014856:	a81b      	add	r0, sp, #108	; 0x6c
 8014858:	f7fa fc06 	bl	800f068 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 801485c:	9805      	ldr	r0, [sp, #20]
 801485e:	f7fa fbd9 	bl	800f014 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 8014862:	9c06      	ldr	r4, [sp, #24]
 8014864:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8014868:	d103      	bne.n	8014872 <draw_border_generic+0x2e6>
        lv_mem_buf_release(blend_dsc.mask_buf);
 801486a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801486c:	f00d fc12 	bl	8022094 <lv_mem_buf_release>
        return;
 8014870:	e71b      	b.n	80146aa <draw_border_generic+0x11e>
            lv_draw_mask_free_param(&mask_rout_param);
 8014872:	a821      	add	r0, sp, #132	; 0x84
 8014874:	f7fa fbf8 	bl	800f068 <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 8014878:	4620      	mov	r0, r4
 801487a:	f7fa fbcb 	bl	800f014 <lv_draw_mask_remove_id>
 801487e:	e7f4      	b.n	801486a <draw_border_generic+0x2de>
        blend_area.x1 = core_area.x1;
 8014880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014882:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 8014886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014888:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = outer_area->y1;
 801488c:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
        blend_area.y2 = inner_area->y1 - 1;
 8014890:	1e73      	subs	r3, r6, #1
 8014892:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014896:	a927      	add	r1, sp, #156	; 0x9c
 8014898:	4658      	mov	r0, fp
 801489a:	f7fc fd17 	bl	80112cc <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 801489e:	9b07      	ldr	r3, [sp, #28]
 80148a0:	4543      	cmp	r3, r8
 80148a2:	dd7f      	ble.n	80149a4 <draw_border_generic+0x418>
 80148a4:	e0b1      	b.n	8014a0a <draw_border_generic+0x47e>
 80148a6:	9b04      	ldr	r3, [sp, #16]
 80148a8:	9303      	str	r3, [sp, #12]
 80148aa:	e77b      	b.n	80147a4 <draw_border_generic+0x218>
        blend_area.x1 = inner_area->x2 + 1;
 80148ac:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80148b0:	3301      	adds	r3, #1
 80148b2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = outer_area->x2;
 80148b6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80148ba:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = core_area.y1;
 80148be:	9b02      	ldr	r3, [sp, #8]
 80148c0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        blend_area.y2 = core_area.y2;
 80148c4:	9b01      	ldr	r3, [sp, #4]
 80148c6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80148ca:	a927      	add	r1, sp, #156	; 0x9c
 80148cc:	4658      	mov	r0, fp
 80148ce:	f7fc fcfd 	bl	80112cc <lv_draw_sw_blend>
 80148d2:	e0a4      	b.n	8014a1e <draw_border_generic+0x492>
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 80148d4:	4621      	mov	r1, r4
 80148d6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80148d8:	f00d fe0e 	bl	80224f8 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 80148dc:	4623      	mov	r3, r4
 80148de:	4632      	mov	r2, r6
 80148e0:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 80148e4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80148e6:	f7fa fb6d 	bl	800efc4 <lv_draw_mask_apply>
 80148ea:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
            if(top_y >= draw_area.y1) {
 80148ee:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 80148f2:	42b3      	cmp	r3, r6
 80148f4:	dd1b      	ble.n	801492e <draw_border_generic+0x3a2>
            if(bottom_y <= draw_area.y2) {
 80148f6:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 80148fa:	42bb      	cmp	r3, r7
 80148fc:	da20      	bge.n	8014940 <draw_border_generic+0x3b4>
        for(h = 0; h < max_h; h++) {
 80148fe:	f108 0801 	add.w	r8, r8, #1
 8014902:	45a8      	cmp	r8, r5
 8014904:	f000 80f5 	beq.w	8014af2 <draw_border_generic+0x566>
            lv_coord_t top_y = outer_area->y1 + h;
 8014908:	fa1f f788 	uxth.w	r7, r8
 801490c:	f8b9 6002 	ldrh.w	r6, [r9, #2]
 8014910:	443e      	add	r6, r7
 8014912:	b236      	sxth	r6, r6
            lv_coord_t bottom_y = outer_area->y2 - h;
 8014914:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8014918:	1bdf      	subs	r7, r3, r7
 801491a:	b23f      	sxth	r7, r7
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 801491c:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 8014920:	42b3      	cmp	r3, r6
 8014922:	ddd7      	ble.n	80148d4 <draw_border_generic+0x348>
 8014924:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014928:	42bb      	cmp	r3, r7
 801492a:	dad3      	bge.n	80148d4 <draw_border_generic+0x348>
 801492c:	e7e7      	b.n	80148fe <draw_border_generic+0x372>
                blend_area.y1 = top_y;
 801492e:	f8ad 6066 	strh.w	r6, [sp, #102]	; 0x66
                blend_area.y2 = top_y;
 8014932:	f8ad 606a 	strh.w	r6, [sp, #106]	; 0x6a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014936:	a927      	add	r1, sp, #156	; 0x9c
 8014938:	4658      	mov	r0, fp
 801493a:	f7fc fcc7 	bl	80112cc <lv_draw_sw_blend>
 801493e:	e7da      	b.n	80148f6 <draw_border_generic+0x36a>
                blend_area.y1 = bottom_y;
 8014940:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
                blend_area.y2 = bottom_y;
 8014944:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014948:	a927      	add	r1, sp, #156	; 0x9c
 801494a:	4658      	mov	r0, fp
 801494c:	f7fc fcbe 	bl	80112cc <lv_draw_sw_blend>
 8014950:	e7d5      	b.n	80148fe <draw_border_generic+0x372>
        blend_area.x1 = draw_area.x1;
 8014952:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8014956:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 801495a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801495c:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 8014960:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8014964:	45a2      	cmp	sl, r4
 8014966:	bfa8      	it	ge
 8014968:	46a2      	movge	sl, r4
 801496a:	f8ad a068 	strh.w	sl, [sp, #104]	; 0x68
 801496e:	f1c3 0401 	rsb	r4, r3, #1
 8014972:	44a2      	add	sl, r4
 8014974:	fa0f f48a 	sxth.w	r4, sl
        if(blend_w > 0) {
 8014978:	2c00      	cmp	r4, #0
 801497a:	f340 8119 	ble.w	8014bb0 <draw_border_generic+0x624>
            if(left_side || top_side) {
 801497e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014982:	4293      	cmp	r3, r2
 8014984:	f280 80c5 	bge.w	8014b12 <draw_border_generic+0x586>
 8014988:	42be      	cmp	r6, r7
 801498a:	f280 812f 	bge.w	8014bec <draw_border_generic+0x660>
            if(left_side || bottom_side) {
 801498e:	9b07      	ldr	r3, [sp, #28]
 8014990:	4543      	cmp	r3, r8
 8014992:	f300 810d 	bgt.w	8014bb0 <draw_border_generic+0x624>
 8014996:	e0e1      	b.n	8014b5c <draw_border_generic+0x5d0>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 8014998:	2301      	movs	r3, #1
 801499a:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    if(bottom_side && split_hor) {
 801499e:	9b07      	ldr	r3, [sp, #28]
 80149a0:	4543      	cmp	r3, r8
 80149a2:	dc13      	bgt.n	80149cc <draw_border_generic+0x440>
        blend_area.x1 = core_area.x1;
 80149a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149a6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 80149aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ac:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = inner_area->y2 + 1;
 80149b0:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80149b4:	3301      	adds	r3, #1
 80149b6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        blend_area.y2 = outer_area->y2;
 80149ba:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80149be:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80149c2:	a927      	add	r1, sp, #156	; 0x9c
 80149c4:	4658      	mov	r0, fp
 80149c6:	f7fc fc81 	bl	80112cc <lv_draw_sw_blend>
 80149ca:	e01e      	b.n	8014a0a <draw_border_generic+0x47e>
    if(bottom_side && split_hor) {
 80149cc:	9b04      	ldr	r3, [sp, #16]
 80149ce:	9303      	str	r3, [sp, #12]
 80149d0:	e6e8      	b.n	80147a4 <draw_border_generic+0x218>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80149d2:	2301      	movs	r3, #1
 80149d4:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
        blend_area.x1 = core_area.x1;
 80149d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149da:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 80149de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149e0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = outer_area->y1;
 80149e4:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
        blend_area.y2 = inner_area->y1 - 1;
 80149e8:	1e73      	subs	r3, r6, #1
 80149ea:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80149ee:	a927      	add	r1, sp, #156	; 0x9c
 80149f0:	4658      	mov	r0, fp
 80149f2:	f7fc fc6b 	bl	80112cc <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 80149f6:	e008      	b.n	8014a0a <draw_border_generic+0x47e>
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 80149f8:	2301      	movs	r3, #1
 80149fa:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    if(top_side && split_hor) {
 80149fe:	42be      	cmp	r6, r7
 8014a00:	f6bf af3e 	bge.w	8014880 <draw_border_generic+0x2f4>
    if(bottom_side && split_hor) {
 8014a04:	9b07      	ldr	r3, [sp, #28]
 8014a06:	4543      	cmp	r3, r8
 8014a08:	ddcc      	ble.n	80149a4 <draw_border_generic+0x418>
    if(left_side) {
 8014a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	f6bf af49 	bge.w	80148a6 <draw_border_generic+0x31a>
    if(right_side) {
 8014a14:	9b08      	ldr	r3, [sp, #32]
 8014a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a18:	4293      	cmp	r3, r2
 8014a1a:	f77f af47 	ble.w	80148ac <draw_border_generic+0x320>
    if(!split_hor) {
 8014a1e:	9b04      	ldr	r3, [sp, #16]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d196      	bne.n	8014952 <draw_border_generic+0x3c6>
        blend_area.x1 = draw_area.x1;
 8014a24:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
 8014a28:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = draw_area.x2;
 8014a2c:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	; 0xbc
 8014a30:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 8014a34:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 8014a38:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 8014a3c:	1a9b      	subs	r3, r3, r2
 8014a3e:	429d      	cmp	r5, r3
 8014a40:	bfb8      	it	lt
 8014a42:	461d      	movlt	r5, r3
        for(h = 0; h < max_h; h++) {
 8014a44:	b22d      	sxth	r5, r5
 8014a46:	2d00      	cmp	r5, #0
 8014a48:	dd53      	ble.n	8014af2 <draw_border_generic+0x566>
 8014a4a:	f04f 0800 	mov.w	r8, #0
 8014a4e:	e75b      	b.n	8014908 <draw_border_generic+0x37c>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8014a50:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 8014a54:	9b02      	ldr	r3, [sp, #8]
 8014a56:	461e      	mov	r6, r3
 8014a58:	429d      	cmp	r5, r3
 8014a5a:	db06      	blt.n	8014a6a <draw_border_generic+0x4de>
 8014a5c:	e0c2      	b.n	8014be4 <draw_border_generic+0x658>
 8014a5e:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 8014a62:	9b02      	ldr	r3, [sp, #8]
 8014a64:	461e      	mov	r6, r3
 8014a66:	429d      	cmp	r5, r3
 8014a68:	da1d      	bge.n	8014aa6 <draw_border_generic+0x51a>
                    blend_area.y1 = h;
 8014a6a:	b22f      	sxth	r7, r5
 8014a6c:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 8014a70:	f8ad 706a 	strh.w	r7, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8014a74:	4621      	mov	r1, r4
 8014a76:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014a78:	f00d fd3e 	bl	80224f8 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8014a7c:	4623      	mov	r3, r4
 8014a7e:	463a      	mov	r2, r7
 8014a80:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8014a84:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014a86:	f7fa fa9d 	bl	800efc4 <lv_draw_mask_apply>
 8014a8a:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014a8e:	a927      	add	r1, sp, #156	; 0x9c
 8014a90:	4658      	mov	r0, fp
 8014a92:	f7fc fc1b 	bl	80112cc <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8014a96:	3501      	adds	r5, #1
 8014a98:	42b5      	cmp	r5, r6
 8014a9a:	d1e6      	bne.n	8014a6a <draw_border_generic+0x4de>
            if(right_side || bottom_side) {
 8014a9c:	9b08      	ldr	r3, [sp, #32]
 8014a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	f300 809f 	bgt.w	8014be4 <draw_border_generic+0x658>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8014aa6:	9b01      	ldr	r3, [sp, #4]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	dc1f      	bgt.n	8014af2 <draw_border_generic+0x566>
 8014ab2:	461e      	mov	r6, r3
 8014ab4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014ab6:	3701      	adds	r7, #1
 8014ab8:	1aff      	subs	r7, r7, r3
                    blend_area.y1 = h;
 8014aba:	19bd      	adds	r5, r7, r6
 8014abc:	b22d      	sxth	r5, r5
 8014abe:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 8014ac2:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8014ac6:	4621      	mov	r1, r4
 8014ac8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014aca:	f00d fd15 	bl	80224f8 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8014ace:	4623      	mov	r3, r4
 8014ad0:	462a      	mov	r2, r5
 8014ad2:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8014ad6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014ad8:	f7fa fa74 	bl	800efc4 <lv_draw_mask_apply>
 8014adc:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014ae0:	a927      	add	r1, sp, #156	; 0x9c
 8014ae2:	4658      	mov	r0, fp
 8014ae4:	f7fc fbf2 	bl	80112cc <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8014ae8:	3601      	adds	r6, #1
 8014aea:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014aee:	42b3      	cmp	r3, r6
 8014af0:	dae3      	bge.n	8014aba <draw_border_generic+0x52e>
    lv_draw_mask_free_param(&mask_rin_param);
 8014af2:	a81b      	add	r0, sp, #108	; 0x6c
 8014af4:	f7fa fab8 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 8014af8:	9805      	ldr	r0, [sp, #20]
 8014afa:	f7fa fa8b 	bl	800f014 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 8014afe:	a821      	add	r0, sp, #132	; 0x84
 8014b00:	f7fa fab2 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 8014b04:	9806      	ldr	r0, [sp, #24]
 8014b06:	f7fa fa85 	bl	800f014 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 8014b0a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014b0c:	f00d fac2 	bl	8022094 <lv_mem_buf_release>
 8014b10:	e5cb      	b.n	80146aa <draw_border_generic+0x11e>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8014b12:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 8014b16:	9b02      	ldr	r3, [sp, #8]
 8014b18:	469a      	mov	sl, r3
 8014b1a:	429d      	cmp	r5, r3
 8014b1c:	da1e      	bge.n	8014b5c <draw_border_generic+0x5d0>
                    blend_area.y1 = h;
 8014b1e:	fa0f f985 	sxth.w	r9, r5
 8014b22:	f8ad 9066 	strh.w	r9, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 8014b26:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8014b2a:	4621      	mov	r1, r4
 8014b2c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014b2e:	f00d fce3 	bl	80224f8 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8014b32:	4623      	mov	r3, r4
 8014b34:	464a      	mov	r2, r9
 8014b36:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8014b3a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014b3c:	f7fa fa42 	bl	800efc4 <lv_draw_mask_apply>
 8014b40:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014b44:	a927      	add	r1, sp, #156	; 0x9c
 8014b46:	4658      	mov	r0, fp
 8014b48:	f7fc fbc0 	bl	80112cc <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8014b4c:	3501      	adds	r5, #1
 8014b4e:	4555      	cmp	r5, sl
 8014b50:	d1e5      	bne.n	8014b1e <draw_border_generic+0x592>
            if(left_side || bottom_side) {
 8014b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b56:	4293      	cmp	r3, r2
 8014b58:	f6ff af19 	blt.w	801498e <draw_border_generic+0x402>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8014b5c:	9b01      	ldr	r3, [sp, #4]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 8014b64:	4293      	cmp	r3, r2
 8014b66:	dc23      	bgt.n	8014bb0 <draw_border_generic+0x624>
 8014b68:	4699      	mov	r9, r3
 8014b6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014b6c:	f102 0a01 	add.w	sl, r2, #1
 8014b70:	ebaa 0a03 	sub.w	sl, sl, r3
                    blend_area.y1 = h;
 8014b74:	eb0a 0509 	add.w	r5, sl, r9
 8014b78:	b22d      	sxth	r5, r5
 8014b7a:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                    blend_area.y2 = h;
 8014b7e:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 8014b82:	4621      	mov	r1, r4
 8014b84:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014b86:	f00d fcb7 	bl	80224f8 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 8014b8a:	4623      	mov	r3, r4
 8014b8c:	462a      	mov	r2, r5
 8014b8e:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8014b92:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014b94:	f7fa fa16 	bl	800efc4 <lv_draw_mask_apply>
 8014b98:	f88d 00ac 	strb.w	r0, [sp, #172]	; 0xac
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014b9c:	a927      	add	r1, sp, #156	; 0x9c
 8014b9e:	4658      	mov	r0, fp
 8014ba0:	f7fc fb94 	bl	80112cc <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 8014ba4:	f109 0901 	add.w	r9, r9, #1
 8014ba8:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8014bac:	454b      	cmp	r3, r9
 8014bae:	dae1      	bge.n	8014b74 <draw_border_generic+0x5e8>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 8014bb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8014bb2:	3401      	adds	r4, #1
 8014bb4:	f9bd 20b8 	ldrsh.w	r2, [sp, #184]	; 0xb8
 8014bb8:	42a2      	cmp	r2, r4
 8014bba:	bfb8      	it	lt
 8014bbc:	4622      	movlt	r2, r4
 8014bbe:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        blend_area.x2 = draw_area.x2;
 8014bc2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8014bc6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 8014bca:	1c5c      	adds	r4, r3, #1
 8014bcc:	1aa4      	subs	r4, r4, r2
 8014bce:	b224      	sxth	r4, r4
        if(blend_w > 0) {
 8014bd0:	2c00      	cmp	r4, #0
 8014bd2:	dd8e      	ble.n	8014af2 <draw_border_generic+0x566>
            if(right_side || top_side) {
 8014bd4:	9b08      	ldr	r3, [sp, #32]
 8014bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bd8:	4293      	cmp	r3, r2
 8014bda:	f77f af40 	ble.w	8014a5e <draw_border_generic+0x4d2>
 8014bde:	42be      	cmp	r6, r7
 8014be0:	f6bf af36 	bge.w	8014a50 <draw_border_generic+0x4c4>
            if(right_side || bottom_side) {
 8014be4:	9b07      	ldr	r3, [sp, #28]
 8014be6:	4543      	cmp	r3, r8
 8014be8:	dc83      	bgt.n	8014af2 <draw_border_generic+0x566>
 8014bea:	e75c      	b.n	8014aa6 <draw_border_generic+0x51a>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 8014bec:	f9bd 50ba 	ldrsh.w	r5, [sp, #186]	; 0xba
 8014bf0:	9b02      	ldr	r3, [sp, #8]
 8014bf2:	469a      	mov	sl, r3
 8014bf4:	429d      	cmp	r5, r3
 8014bf6:	db92      	blt.n	8014b1e <draw_border_generic+0x592>
 8014bf8:	e6c9      	b.n	801498e <draw_border_generic+0x402>
        blend_area.x1 = core_area.x1;
 8014bfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bfc:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        blend_area.x2 = core_area.x2;
 8014c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c02:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        blend_area.y1 = outer_area->y1;
 8014c06:	f8ad 7066 	strh.w	r7, [sp, #102]	; 0x66
        blend_area.y2 = inner_area->y1 - 1;
 8014c0a:	1e73      	subs	r3, r6, #1
 8014c0c:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8014c10:	a927      	add	r1, sp, #156	; 0x9c
 8014c12:	4658      	mov	r0, fp
 8014c14:	f7fc fb5a 	bl	80112cc <lv_draw_sw_blend>
    if(bottom_side && split_hor) {
 8014c18:	e6c4      	b.n	80149a4 <draw_border_generic+0x418>

08014c1a <lv_draw_sw_rect>:
{
 8014c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1e:	b0ab      	sub	sp, #172	; 0xac
 8014c20:	9004      	str	r0, [sp, #16]
 8014c22:	468a      	mov	sl, r1
 8014c24:	9205      	str	r2, [sp, #20]
    if(dsc->shadow_width == 0) return;
 8014c26:	f9b1 302e 	ldrsh.w	r3, [r1, #46]	; 0x2e
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d047      	beq.n	8014cbe <lv_draw_sw_rect+0xa4>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 8014c2e:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 8014c32:	9206      	str	r2, [sp, #24]
 8014c34:	2a02      	cmp	r2, #2
 8014c36:	d942      	bls.n	8014cbe <lv_draw_sw_rect+0xa4>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	f000 80be 	beq.w	8014dba <lv_draw_sw_rect+0x1a0>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8014c3e:	f8ba 2030 	ldrh.w	r2, [sl, #48]	; 0x30
 8014c42:	9f05      	ldr	r7, [sp, #20]
 8014c44:	883d      	ldrh	r5, [r7, #0]
 8014c46:	4415      	add	r5, r2
 8014c48:	b2ad      	uxth	r5, r5
 8014c4a:	f8ba 9034 	ldrh.w	r9, [sl, #52]	; 0x34
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 8014c4e:	eb02 0409 	add.w	r4, r2, r9
 8014c52:	88ba      	ldrh	r2, [r7, #4]
 8014c54:	4414      	add	r4, r2
 8014c56:	b2a4      	uxth	r4, r4
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8014c58:	f8ba 2032 	ldrh.w	r2, [sl, #50]	; 0x32
 8014c5c:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8014c60:	4490      	add	r8, r2
 8014c62:	fa1f f888 	uxth.w	r8, r8
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 8014c66:	eb09 0602 	add.w	r6, r9, r2
 8014c6a:	88fa      	ldrh	r2, [r7, #6]
 8014c6c:	4416      	add	r6, r2
 8014c6e:	b2b6      	uxth	r6, r6
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 8014c70:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8014c74:	f3c3 034f 	ubfx	r3, r3, #1, #16
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 8014c78:	eba5 0209 	sub.w	r2, r5, r9
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 8014c7c:	3a01      	subs	r2, #1
 8014c7e:	1ad2      	subs	r2, r2, r3
 8014c80:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 8014c84:	1c5a      	adds	r2, r3, #1
 8014c86:	b292      	uxth	r2, r2
 8014c88:	18a1      	adds	r1, r4, r2
 8014c8a:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 8014c8e:	eba8 0109 	sub.w	r1, r8, r9
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 8014c92:	3901      	subs	r1, #1
 8014c94:	1acb      	subs	r3, r1, r3
 8014c96:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 8014c9a:	4432      	add	r2, r6
 8014c9c:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8014ca0:	9b06      	ldr	r3, [sp, #24]
 8014ca2:	2bfe      	cmp	r3, #254	; 0xfe
 8014ca4:	bf28      	it	cs
 8014ca6:	23ff      	movcs	r3, #255	; 0xff
 8014ca8:	9306      	str	r3, [sp, #24]
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 8014caa:	9b04      	ldr	r3, [sp, #16]
 8014cac:	689a      	ldr	r2, [r3, #8]
 8014cae:	a913      	add	r1, sp, #76	; 0x4c
 8014cb0:	a815      	add	r0, sp, #84	; 0x54
 8014cb2:	f00c fa26 	bl	8021102 <_lv_area_intersect>
 8014cb6:	9009      	str	r0, [sp, #36]	; 0x24
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	f040 8088 	bne.w	8014dce <lv_draw_sw_rect+0x1b4>
    draw_bg(draw_ctx, dsc, coords);
 8014cbe:	9c05      	ldr	r4, [sp, #20]
 8014cc0:	4622      	mov	r2, r4
 8014cc2:	4651      	mov	r1, sl
 8014cc4:	9d04      	ldr	r5, [sp, #16]
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	f7ff f92c 	bl	8013f24 <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 8014ccc:	4622      	mov	r2, r4
 8014cce:	4651      	mov	r1, sl
 8014cd0:	4628      	mov	r0, r5
 8014cd2:	f7ff fb3d 	bl	8014350 <draw_bg_img>
    if(dsc->border_opa <= LV_OPA_MIN) return;
 8014cd6:	f89a 0022 	ldrb.w	r0, [sl, #34]	; 0x22
 8014cda:	2802      	cmp	r0, #2
 8014cdc:	d961      	bls.n	8014da2 <lv_draw_sw_rect+0x188>
    if(dsc->border_width == 0) return;
 8014cde:	f9ba 2020 	ldrsh.w	r2, [sl, #32]
 8014ce2:	2a00      	cmp	r2, #0
 8014ce4:	d05d      	beq.n	8014da2 <lv_draw_sw_rect+0x188>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 8014ce6:	f89a 3023 	ldrb.w	r3, [sl, #35]	; 0x23
 8014cea:	f013 0f3e 	tst.w	r3, #62	; 0x3e
 8014cee:	d058      	beq.n	8014da2 <lv_draw_sw_rect+0x188>
    if(dsc->border_post) return;
 8014cf0:	f013 0f01 	tst.w	r3, #1
 8014cf4:	d155      	bne.n	8014da2 <lv_draw_sw_rect+0x188>
 8014cf6:	4623      	mov	r3, r4
 8014cf8:	88a6      	ldrh	r6, [r4, #4]
 8014cfa:	8827      	ldrh	r7, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014cfc:	88e4      	ldrh	r4, [r4, #6]
 8014cfe:	885d      	ldrh	r5, [r3, #2]
    int32_t rout = dsc->radius;
 8014d00:	f9ba c000 	ldrsh.w	ip, [sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014d04:	1c73      	adds	r3, r6, #1
 8014d06:	1bd9      	subs	r1, r3, r7
    int32_t coords_w = lv_area_get_width(coords);
 8014d08:	b20b      	sxth	r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014d0a:	1c61      	adds	r1, r4, #1
 8014d0c:	1b49      	subs	r1, r1, r5
    int32_t coords_h = lv_area_get_height(coords);
 8014d0e:	b209      	sxth	r1, r1
    int32_t short_side = LV_MIN(coords_w, coords_h);
 8014d10:	4299      	cmp	r1, r3
 8014d12:	bfa8      	it	ge
 8014d14:	4619      	movge	r1, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
 8014d16:	104b      	asrs	r3, r1, #1
 8014d18:	4563      	cmp	r3, ip
 8014d1a:	bfa8      	it	ge
 8014d1c:	4663      	movge	r3, ip
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 8014d1e:	f89a c023 	ldrb.w	ip, [sl, #35]	; 0x23
 8014d22:	f3cc 0144 	ubfx	r1, ip, #1, #5
 8014d26:	f01c 0f08 	tst.w	ip, #8
 8014d2a:	bf11      	iteee	ne
 8014d2c:	fa1f fc82 	uxthne.w	ip, r2
 8014d30:	eb02 0c03 	addeq.w	ip, r2, r3
 8014d34:	f1cc 0c00 	rsbeq	ip, ip, #0
 8014d38:	fa1f fc8c 	uxtheq.w	ip, ip
 8014d3c:	4467      	add	r7, ip
 8014d3e:	f8ad 708c 	strh.w	r7, [sp, #140]	; 0x8c
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 8014d42:	f011 0f08 	tst.w	r1, #8
 8014d46:	bf11      	iteee	ne
 8014d48:	b297      	uxthne	r7, r2
 8014d4a:	18d7      	addeq	r7, r2, r3
 8014d4c:	427f      	negeq	r7, r7
 8014d4e:	b2bf      	uxtheq	r7, r7
 8014d50:	1bf6      	subs	r6, r6, r7
 8014d52:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 8014d56:	f011 0f02 	tst.w	r1, #2
 8014d5a:	bf11      	iteee	ne
 8014d5c:	b296      	uxthne	r6, r2
 8014d5e:	18d6      	addeq	r6, r2, r3
 8014d60:	4276      	negeq	r6, r6
 8014d62:	b2b6      	uxtheq	r6, r6
 8014d64:	4435      	add	r5, r6
 8014d66:	f8ad 508e 	strh.w	r5, [sp, #142]	; 0x8e
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 8014d6a:	f011 0f01 	tst.w	r1, #1
 8014d6e:	bf11      	iteee	ne
 8014d70:	b291      	uxthne	r1, r2
 8014d72:	18d1      	addeq	r1, r2, r3
 8014d74:	4249      	negeq	r1, r1
 8014d76:	b289      	uxtheq	r1, r1
 8014d78:	1a64      	subs	r4, r4, r1
 8014d7a:	f8ad 4092 	strh.w	r4, [sp, #146]	; 0x92
    lv_coord_t rin = rout - dsc->border_width;
 8014d7e:	1a9a      	subs	r2, r3, r2
 8014d80:	b212      	sxth	r2, r2
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 8014d82:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8014d86:	9103      	str	r1, [sp, #12]
 8014d88:	9002      	str	r0, [sp, #8]
 8014d8a:	f8ba 101e 	ldrh.w	r1, [sl, #30]
 8014d8e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014d92:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8014d96:	9200      	str	r2, [sp, #0]
 8014d98:	aa23      	add	r2, sp, #140	; 0x8c
 8014d9a:	9905      	ldr	r1, [sp, #20]
 8014d9c:	9804      	ldr	r0, [sp, #16]
 8014d9e:	f7ff fbf5 	bl	801458c <draw_border_generic>
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 8014da2:	f89a 502a 	ldrb.w	r5, [sl, #42]	; 0x2a
 8014da6:	2d02      	cmp	r5, #2
 8014da8:	d904      	bls.n	8014db4 <lv_draw_sw_rect+0x19a>
    if(dsc->outline_width == 0) return;
 8014daa:	f9ba 0026 	ldrsh.w	r0, [sl, #38]	; 0x26
 8014dae:	2800      	cmp	r0, #0
 8014db0:	f040 86b3 	bne.w	8015b1a <lv_draw_sw_rect+0xf00>
}
 8014db4:	b02b      	add	sp, #172	; 0xac
 8014db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 8014dba:	f9b1 2034 	ldrsh.w	r2, [r1, #52]	; 0x34
 8014dbe:	2a00      	cmp	r2, #0
 8014dc0:	f73f af3d 	bgt.w	8014c3e <lv_draw_sw_rect+0x24>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 8014dc4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8014dc6:	2a00      	cmp	r2, #0
 8014dc8:	f47f af39 	bne.w	8014c3e <lv_draw_sw_rect+0x24>
 8014dcc:	e777      	b.n	8014cbe <lv_draw_sw_rect+0xa4>
    dest->x1 = src->x1;
 8014dce:	883b      	ldrh	r3, [r7, #0]
 8014dd0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    dest->y1 = src->y1;
 8014dd4:	887b      	ldrh	r3, [r7, #2]
 8014dd6:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    dest->x2 = src->x2;
 8014dda:	88bb      	ldrh	r3, [r7, #4]
 8014ddc:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    dest->y2 = src->y2;
 8014de0:	88fb      	ldrh	r3, [r7, #6]
 8014de2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
    lv_area_increase(&bg_area, -1, -1);
 8014de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dea:	4611      	mov	r1, r2
 8014dec:	a817      	add	r0, sp, #92	; 0x5c
 8014dee:	f00c f96a 	bl	80210c6 <lv_area_increase>
    int32_t r_bg = dsc->radius;
 8014df2:	f9ba 2000 	ldrsh.w	r2, [sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014df6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8014e00:	1a5b      	subs	r3, r3, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014e02:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
 8014e06:	3101      	adds	r1, #1
 8014e08:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
 8014e0c:	1a09      	subs	r1, r1, r0
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 8014e0e:	b21b      	sxth	r3, r3
 8014e10:	b209      	sxth	r1, r1
 8014e12:	428b      	cmp	r3, r1
 8014e14:	bfa8      	it	ge
 8014e16:	460b      	movge	r3, r1
 8014e18:	105b      	asrs	r3, r3, #1
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	bfa8      	it	ge
 8014e1e:	4613      	movge	r3, r2
 8014e20:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014e22:	f109 0301 	add.w	r3, r9, #1
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	441c      	add	r4, r3
 8014e2a:	b2a4      	uxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8014e2c:	4433      	add	r3, r6
 8014e2e:	eba3 0808 	sub.w	r8, r3, r8
 8014e32:	fa1f f988 	uxth.w	r9, r8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014e36:	1b67      	subs	r7, r4, r5
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 8014e38:	b23f      	sxth	r7, r7
 8014e3a:	fa0f f888 	sxth.w	r8, r8
 8014e3e:	45b8      	cmp	r8, r7
 8014e40:	bfa8      	it	ge
 8014e42:	46b8      	movge	r8, r7
 8014e44:	ea4f 0768 	mov.w	r7, r8, asr #1
 8014e48:	4297      	cmp	r7, r2
 8014e4a:	bfa8      	it	ge
 8014e4c:	4617      	movge	r7, r2
    int32_t corner_size = dsc->shadow_width  + r_sh;
 8014e4e:	f9ba 302e 	ldrsh.w	r3, [sl, #46]	; 0x2e
 8014e52:	eb03 0b07 	add.w	fp, r3, r7
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 8014e56:	fb0b f00b 	mul.w	r0, fp, fp
 8014e5a:	0040      	lsls	r0, r0, #1
 8014e5c:	f00d f8b8 	bl	8021fd0 <lv_mem_buf_get>
 8014e60:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 8014e62:	f9ba 802e 	ldrsh.w	r8, [sl, #46]	; 0x2e
    int32_t size = sw_ori  + r;
 8014e66:	eb07 0608 	add.w	r6, r7, r8
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 8014e6a:	eb08 72d8 	add.w	r2, r8, r8, lsr #31
 8014e6e:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8014e72:	1e53      	subs	r3, r2, #1
 8014e74:	f018 0101 	ands.w	r1, r8, #1
 8014e78:	910e      	str	r1, [sp, #56]	; 0x38
 8014e7a:	bf0c      	ite	eq
 8014e7c:	2101      	moveq	r1, #1
 8014e7e:	2100      	movne	r1, #0
 8014e80:	1a5b      	subs	r3, r3, r1
 8014e82:	443b      	add	r3, r7
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    sh_area.y1 = sw / 2 + 1;
 8014e8a:	3201      	adds	r2, #1
 8014e8c:	b292      	uxth	r2, r2
 8014e8e:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 8014e92:	1b2c      	subs	r4, r5, r4
 8014e94:	4423      	add	r3, r4
 8014e96:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 8014e9a:	444a      	add	r2, r9
 8014e9c:	f8ad 207a 	strh.w	r2, [sp, #122]	; 0x7a
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	463a      	mov	r2, r7
 8014ea4:	a91d      	add	r1, sp, #116	; 0x74
 8014ea6:	a823      	add	r0, sp, #140	; 0x8c
 8014ea8:	f7fa fa6c 	bl	800f384 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 8014eac:	f1b8 0f01 	cmp.w	r8, #1
 8014eb0:	f000 86cf 	beq.w	8015c52 <lv_draw_sw_rect+0x1038>
    else sw = sw_ori >> 1;
 8014eb4:	ea4f 0368 	mov.w	r3, r8, asr #1
 8014eb8:	9308      	str	r3, [sp, #32]
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8014eba:	960b      	str	r6, [sp, #44]	; 0x2c
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	f00d f887 	bl	8021fd0 <lv_mem_buf_get>
 8014ec2:	4680      	mov	r8, r0
    for(y = 0; y < size; y++) {
 8014ec4:	2e00      	cmp	r6, #0
 8014ec6:	dd42      	ble.n	8014f4e <lv_draw_sw_rect+0x334>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8014ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014eca:	ea4f 0943 	mov.w	r9, r3, lsl #1
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 8014ece:	9f07      	ldr	r7, [sp, #28]
    for(y = 0; y < size; y++) {
 8014ed0:	2400      	movs	r4, #0
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8014ed2:	b232      	sxth	r2, r6
 8014ed4:	1e75      	subs	r5, r6, #1
 8014ed6:	4445      	add	r5, r8
 8014ed8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8014edc:	469b      	mov	fp, r3
 8014ede:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014ee2:	4692      	mov	sl, r2
 8014ee4:	e008      	b.n	8014ef8 <lv_draw_sw_rect+0x2de>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 8014ee6:	4649      	mov	r1, r9
 8014ee8:	4638      	mov	r0, r7
 8014eea:	f00d fa9f 	bl	802242c <lv_memset_00>
        sh_ups_tmp_buf += size;
 8014eee:	444f      	add	r7, r9
    for(y = 0; y < size; y++) {
 8014ef0:	3401      	adds	r4, #1
 8014ef2:	42a6      	cmp	r6, r4
 8014ef4:	f340 8675 	ble.w	8015be2 <lv_draw_sw_rect+0xfc8>
        lv_memset_ff(mask_line, size);
 8014ef8:	4659      	mov	r1, fp
 8014efa:	4640      	mov	r0, r8
 8014efc:	f00d fafc 	bl	80224f8 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 8014f00:	ab23      	add	r3, sp, #140	; 0x8c
 8014f02:	9300      	str	r3, [sp, #0]
 8014f04:	4653      	mov	r3, sl
 8014f06:	b222      	sxth	r2, r4
 8014f08:	2100      	movs	r1, #0
 8014f0a:	4640      	mov	r0, r8
 8014f0c:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 8014f10:	47e0      	blx	ip
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 8014f12:	2800      	cmp	r0, #0
 8014f14:	d0e7      	beq.n	8014ee6 <lv_draw_sw_rect+0x2cc>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 8014f16:	9a08      	ldr	r2, [sp, #32]
 8014f18:	4610      	mov	r0, r2
 8014f1a:	f898 3000 	ldrb.w	r3, [r8]
 8014f1e:	019b      	lsls	r3, r3, #6
 8014f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f24:	803b      	strh	r3, [r7, #0]
            for(i = 1; i < size; i++) {
 8014f26:	2e01      	cmp	r6, #1
 8014f28:	dde1      	ble.n	8014eee <lv_draw_sw_rect+0x2d4>
 8014f2a:	4642      	mov	r2, r8
 8014f2c:	4639      	mov	r1, r7
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 8014f2e:	4694      	mov	ip, r2
 8014f30:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8014f34:	f89c c000 	ldrb.w	ip, [ip]
 8014f38:	459c      	cmp	ip, r3
 8014f3a:	bf0e      	itee	eq
 8014f3c:	880b      	ldrheq	r3, [r1, #0]
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8014f3e:	019b      	lslne	r3, r3, #6
 8014f40:	fb93 f3f0 	sdivne	r3, r3, r0
 8014f44:	804b      	strh	r3, [r1, #2]
            for(i = 1; i < size; i++) {
 8014f46:	3102      	adds	r1, #2
 8014f48:	42aa      	cmp	r2, r5
 8014f4a:	d1f0      	bne.n	8014f2e <lv_draw_sw_rect+0x314>
 8014f4c:	e7cf      	b.n	8014eee <lv_draw_sw_rect+0x2d4>
    lv_mem_buf_release(mask_line);
 8014f4e:	f00d f8a1 	bl	8022094 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 8014f52:	a823      	add	r0, sp, #140	; 0x8c
 8014f54:	f7fa f888 	bl	800f068 <lv_draw_mask_free_param>
    if(sw == 1) {
 8014f58:	9b08      	ldr	r3, [sp, #32]
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	f040 864e 	bne.w	8015bfc <lv_draw_sw_rect+0xfe2>
 8014f60:	f000 be71 	b.w	8015c46 <lv_draw_sw_rect+0x102c>
        for(i = 0; i < (uint32_t)size * size; i++) {
 8014f64:	42ab      	cmp	r3, r5
 8014f66:	d00b      	beq.n	8014f80 <lv_draw_sw_rect+0x366>
            if(sh_buf[i] == 0) continue;
 8014f68:	3302      	adds	r3, #2
 8014f6a:	881a      	ldrh	r2, [r3, #0]
 8014f6c:	2a00      	cmp	r2, #0
 8014f6e:	d0f9      	beq.n	8014f64 <lv_draw_sw_rect+0x34a>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 8014f70:	2aff      	cmp	r2, #255	; 0xff
 8014f72:	bf0f      	iteee	eq
 8014f74:	801f      	strheq	r7, [r3, #0]
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 8014f76:	0192      	lslne	r2, r2, #6
 8014f78:	fb92 f2f1 	sdivne	r2, r2, r1
 8014f7c:	801a      	strhne	r2, [r3, #0]
 8014f7e:	e7f1      	b.n	8014f64 <lv_draw_sw_rect+0x34a>
        shadow_blur_corner(size, sw, sh_buf);
 8014f80:	9a07      	ldr	r2, [sp, #28]
 8014f82:	4620      	mov	r0, r4
 8014f84:	f7fe fef4 	bl	8013d70 <shadow_blur_corner>
    for(x = 0; x < size * size; x++) {
 8014f88:	fb06 f606 	mul.w	r6, r6, r6
 8014f8c:	2e00      	cmp	r6, #0
 8014f8e:	dd0a      	ble.n	8014fa6 <lv_draw_sw_rect+0x38c>
 8014f90:	9a07      	ldr	r2, [sp, #28]
 8014f92:	1e93      	subs	r3, r2, #2
 8014f94:	3a01      	subs	r2, #1
 8014f96:	eb03 0046 	add.w	r0, r3, r6, lsl #1
        res_buf[x] = sh_buf[x];
 8014f9a:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8014f9e:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(x = 0; x < size * size; x++) {
 8014fa2:	4283      	cmp	r3, r0
 8014fa4:	d1f9      	bne.n	8014f9a <lv_draw_sw_rect+0x380>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 8014fa6:	a813      	add	r0, sp, #76	; 0x4c
 8014fa8:	f7fa f894 	bl	800f0d4 <lv_draw_mask_is_any>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8014fac:	b928      	cbnz	r0, 8014fba <lv_draw_sw_rect+0x3a0>
 8014fae:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 8014fb2:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8014fb6:	f000 810f 	beq.w	80151d8 <lv_draw_sw_rect+0x5be>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 8014fba:	2301      	movs	r3, #1
 8014fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014fbe:	a917      	add	r1, sp, #92	; 0x5c
 8014fc0:	a81d      	add	r0, sp, #116	; 0x74
 8014fc2:	f7fa f9df 	bl	800f384 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 8014fc6:	2100      	movs	r1, #0
 8014fc8:	a81d      	add	r0, sp, #116	; 0x74
 8014fca:	f7f9 ffd9 	bl	800ef80 <lv_draw_mask_add>
 8014fce:	900d      	str	r0, [sp, #52]	; 0x34
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8014fd4:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 8014fd8:	3001      	adds	r0, #1
 8014fda:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014fde:	1ac0      	subs	r0, r0, r3
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 8014fe0:	b200      	sxth	r0, r0
 8014fe2:	f00c fff5 	bl	8021fd0 <lv_mem_buf_get>
 8014fe6:	4680      	mov	r8, r0
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 8014fe8:	211c      	movs	r1, #28
 8014fea:	a823      	add	r0, sp, #140	; 0x8c
 8014fec:	f00d fa1e 	bl	802242c <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 8014ff0:	a919      	add	r1, sp, #100	; 0x64
 8014ff2:	9123      	str	r1, [sp, #140]	; 0x8c
    blend_dsc.mask_area = &blend_area;
 8014ff4:	9128      	str	r1, [sp, #160]	; 0xa0
    blend_dsc.mask_buf = mask_buf;
 8014ff6:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
    blend_dsc.color = dsc->shadow_color;
 8014ffa:	f8ba 302c 	ldrh.w	r3, [sl, #44]	; 0x2c
 8014ffe:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    blend_dsc.opa = dsc->shadow_opa;
 8015002:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
 8015006:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_dsc.blend_mode = dsc->blend_mode;
 801500a:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801500e:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 8015012:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8015016:	f9bd 4050 	ldrsh.w	r4, [sp, #80]	; 0x50
 801501a:	1c60      	adds	r0, r4, #1
 801501c:	b280      	uxth	r0, r0
 801501e:	1a83      	subs	r3, r0, r2
 8015020:	b21d      	sxth	r5, r3
 8015022:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8015026:	442b      	add	r3, r5
 8015028:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801502c:	b21f      	sxth	r7, r3
 801502e:	9708      	str	r7, [sp, #32]
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 8015030:	f9bd 504e 	ldrsh.w	r5, [sp, #78]	; 0x4e
 8015034:	b2aa      	uxth	r2, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015036:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 801503a:	3301      	adds	r3, #1
 801503c:	1a9b      	subs	r3, r3, r2
 801503e:	b21e      	sxth	r6, r3
 8015040:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8015044:	4433      	add	r3, r6
 8015046:	eb02 0963 	add.w	r9, r2, r3, asr #1
 801504a:	fa1f f389 	uxth.w	r3, r9
 801504e:	930c      	str	r3, [sp, #48]	; 0x30
 8015050:	fa0f f989 	sxth.w	r9, r9
    blend_area.x2 = shadow_area.x2;
 8015054:	f8ad 4068 	strh.w	r4, [sp, #104]	; 0x68
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8015058:	fa1f f48b 	uxth.w	r4, fp
    blend_area.y1 = shadow_area.y1;
 801505c:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8015060:	1b03      	subs	r3, r0, r4
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 8015062:	b21b      	sxth	r3, r3
 8015064:	42bb      	cmp	r3, r7
 8015066:	bfb8      	it	lt
 8015068:	463b      	movlt	r3, r7
 801506a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 801506e:	1e53      	subs	r3, r2, #1
 8015070:	4423      	add	r3, r4
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8015072:	b21b      	sxth	r3, r3
 8015074:	454b      	cmp	r3, r9
 8015076:	bfa8      	it	ge
 8015078:	464b      	movge	r3, r9
 801507a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801507e:	9b04      	ldr	r3, [sp, #16]
 8015080:	689a      	ldr	r2, [r3, #8]
 8015082:	a81b      	add	r0, sp, #108	; 0x6c
 8015084:	f00c f83d 	bl	8021102 <_lv_area_intersect>
 8015088:	2800      	cmp	r0, #0
 801508a:	f040 80a9 	bne.w	80151e0 <lv_draw_sw_rect+0x5c6>
    blend_area.x2 = shadow_area.x2;
 801508e:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 8015092:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8015096:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 801509a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 801509e:	3201      	adds	r2, #1
 80150a0:	1b12      	subs	r2, r2, r4
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 80150a2:	b212      	sxth	r2, r2
 80150a4:	9908      	ldr	r1, [sp, #32]
 80150a6:	428a      	cmp	r2, r1
 80150a8:	bfb8      	it	lt
 80150aa:	460a      	movlt	r2, r1
 80150ac:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 80150b0:	f109 0201 	add.w	r2, r9, #1
 80150b4:	920b      	str	r2, [sp, #44]	; 0x2c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 80150b6:	3301      	adds	r3, #1
 80150b8:	1b1b      	subs	r3, r3, r4
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 80150ba:	b21b      	sxth	r3, r3
 80150bc:	4293      	cmp	r3, r2
 80150be:	bfb8      	it	lt
 80150c0:	4613      	movlt	r3, r2
 80150c2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80150c6:	9b04      	ldr	r3, [sp, #16]
 80150c8:	689a      	ldr	r2, [r3, #8]
 80150ca:	a919      	add	r1, sp, #100	; 0x64
 80150cc:	a81b      	add	r0, sp, #108	; 0x6c
 80150ce:	f00c f818 	bl	8021102 <_lv_area_intersect>
 80150d2:	2800      	cmp	r0, #0
 80150d4:	f040 80fb 	bne.w	80152ce <lv_draw_sw_rect+0x6b4>
    blend_area.x1 = shadow_area.x1 + corner_size;
 80150d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80150dc:	4423      	add	r3, r4
 80150de:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 80150e2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80150e6:	1b1b      	subs	r3, r3, r4
 80150e8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1;
 80150ec:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80150f0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 80150f4:	3b01      	subs	r3, #1
 80150f6:	4423      	add	r3, r4
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 80150f8:	b21b      	sxth	r3, r3
 80150fa:	454b      	cmp	r3, r9
 80150fc:	bfa8      	it	ge
 80150fe:	464b      	movge	r3, r9
 8015100:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015104:	9b04      	ldr	r3, [sp, #16]
 8015106:	689a      	ldr	r2, [r3, #8]
 8015108:	a919      	add	r1, sp, #100	; 0x64
 801510a:	a81b      	add	r0, sp, #108	; 0x6c
 801510c:	f00b fff9 	bl	8021102 <_lv_area_intersect>
 8015110:	2800      	cmp	r0, #0
 8015112:	f040 8153 	bne.w	80153bc <lv_draw_sw_rect+0x7a2>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 8015116:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
 801511a:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x1 + corner_size;
 801511e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015122:	4423      	add	r3, r4
 8015124:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 8015128:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801512c:	1b1b      	subs	r3, r3, r4
 801512e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8015132:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 8015136:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801513a:	3301      	adds	r3, #1
 801513c:	1b1b      	subs	r3, r3, r4
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 801513e:	b21b      	sxth	r3, r3
 8015140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015142:	4293      	cmp	r3, r2
 8015144:	bfb8      	it	lt
 8015146:	4613      	movlt	r3, r2
 8015148:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 801514c:	9b04      	ldr	r3, [sp, #16]
 801514e:	689a      	ldr	r2, [r3, #8]
 8015150:	a919      	add	r1, sp, #100	; 0x64
 8015152:	a81b      	add	r0, sp, #108	; 0x6c
 8015154:	f00b ffd5 	bl	8021102 <_lv_area_intersect>
 8015158:	2800      	cmp	r0, #0
 801515a:	f040 81ac 	bne.w	80154b6 <lv_draw_sw_rect+0x89c>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 801515e:	f89a 3036 	ldrb.w	r3, [sl, #54]	; 0x36
 8015162:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 8015166:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 801516a:	1c5a      	adds	r2, r3, #1
 801516c:	1b12      	subs	r2, r2, r4
 801516e:	b212      	sxth	r2, r2
    blend_area.x2 = shadow_area.x2;
 8015170:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 8015174:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8015178:	4423      	add	r3, r4
 801517a:	b21b      	sxth	r3, r3
    blend_area.y2 = shadow_area.y2 - corner_size;
 801517c:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 8015180:	1b09      	subs	r1, r1, r4
 8015182:	b209      	sxth	r1, r1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 8015184:	4599      	cmp	r9, r3
 8015186:	da02      	bge.n	801518e <lv_draw_sw_rect+0x574>
 8015188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801518a:	3301      	adds	r3, #1
 801518c:	b21b      	sxth	r3, r3
 801518e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 8015192:	460b      	mov	r3, r1
 8015194:	4549      	cmp	r1, r9
 8015196:	bfb8      	it	lt
 8015198:	464b      	movlt	r3, r9
 801519a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 801519e:	9b08      	ldr	r3, [sp, #32]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	bfb8      	it	lt
 80151a4:	461a      	movlt	r2, r3
 80151a6:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80151aa:	9b04      	ldr	r3, [sp, #16]
 80151ac:	689a      	ldr	r2, [r3, #8]
 80151ae:	a919      	add	r1, sp, #100	; 0x64
 80151b0:	a81b      	add	r0, sp, #108	; 0x6c
 80151b2:	f00b ffa6 	bl	8021102 <_lv_area_intersect>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	f040 81fe 	bne.w	80155b8 <lv_draw_sw_rect+0x99e>
    for(y = 0; y < corner_size; y++) {
 80151bc:	f1bb 0f00 	cmp.w	fp, #0
 80151c0:	f340 827c 	ble.w	80156bc <lv_draw_sw_rect+0xaa2>
        for(x = 0; x < corner_size / 2; x++) {
 80151c4:	eb0b 76db 	add.w	r6, fp, fp, lsr #31
 80151c8:	1076      	asrs	r6, r6, #1
 80151ca:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
 80151ce:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80151d2:	4465      	add	r5, ip
 80151d4:	2700      	movs	r7, #0
 80151d6:	e26a      	b.n	80156ae <lv_draw_sw_rect+0xa94>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 80151d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151dc:	930d      	str	r3, [sp, #52]	; 0x34
 80151de:	e6f9      	b.n	8014fd4 <lv_draw_sw_rect+0x3ba>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80151e0:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80151e4:	462a      	mov	r2, r5
 80151e6:	a917      	add	r1, sp, #92	; 0x5c
 80151e8:	a81b      	add	r0, sp, #108	; 0x6c
 80151ea:	f00c f8b4 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80151ee:	2800      	cmp	r0, #0
 80151f0:	f47f af4d 	bne.w	801508e <lv_draw_sw_rect+0x474>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80151f4:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 80151f8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80151fc:	3301      	adds	r3, #1
 80151fe:	1b9b      	subs	r3, r3, r6
 8015200:	b21b      	sxth	r3, r3
 8015202:	930b      	str	r3, [sp, #44]	; 0x2c
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 8015204:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8015208:	930e      	str	r3, [sp, #56]	; 0x38
 801520a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801520e:	930f      	str	r3, [sp, #60]	; 0x3c
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 8015210:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8015214:	9310      	str	r3, [sp, #64]	; 0x40
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015218:	bb4b      	cbnz	r3, 801526e <lv_draw_sw_rect+0x654>
 801521a:	9f09      	ldr	r7, [sp, #36]	; 0x24
        if(w > 0) {
 801521c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801521e:	2b00      	cmp	r3, #0
 8015220:	f77f af35 	ble.w	801508e <lv_draw_sw_rect+0x474>
            blend_dsc.mask_buf = mask_buf;
 8015224:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 8015228:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801522c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8015230:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015234:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8015238:	2302      	movs	r3, #2
 801523a:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801523e:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 8015242:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015246:	42ab      	cmp	r3, r5
 8015248:	f6ff af21 	blt.w	801508e <lv_draw_sw_rect+0x474>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801524c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801524e:	eba3 030b 	sub.w	r3, r3, fp
 8015252:	3301      	adds	r3, #1
 8015254:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 8015256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801525a:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801525c:	fb0b 6603 	mla	r6, fp, r3, r6
 8015260:	9b07      	ldr	r3, [sp, #28]
 8015262:	441e      	add	r6, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015264:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015268:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801526c:	e012      	b.n	8015294 <lv_draw_sw_rect+0x67a>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801526e:	462a      	mov	r2, r5
 8015270:	a917      	add	r1, sp, #92	; 0x5c
 8015272:	a81b      	add	r0, sp, #108	; 0x6c
 8015274:	f00c f8bd 	bl	80213f2 <_lv_area_is_out>
 8015278:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801527a:	e7cf      	b.n	801521c <lv_draw_sw_rect+0x602>
                    blend_dsc.mask_buf = sh_buf_tmp;
 801527c:	9626      	str	r6, [sp, #152]	; 0x98
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801527e:	a923      	add	r1, sp, #140	; 0x8c
 8015280:	4648      	mov	r0, r9
 8015282:	f7fc f823 	bl	80112cc <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8015286:	445e      	add	r6, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015288:	3501      	adds	r5, #1
 801528a:	b22d      	sxth	r5, r5
 801528c:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015290:	42ab      	cmp	r3, r5
 8015292:	db19      	blt.n	80152c8 <lv_draw_sw_rect+0x6ae>
                blend_area.y1 = y;
 8015294:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015298:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 801529c:	2f00      	cmp	r7, #0
 801529e:	d1ed      	bne.n	801527c <lv_draw_sw_rect+0x662>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 80152a0:	465a      	mov	r2, fp
 80152a2:	4631      	mov	r1, r6
 80152a4:	4640      	mov	r0, r8
 80152a6:	f00c ff2b 	bl	8022100 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80152aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152ac:	462a      	mov	r2, r5
 80152ae:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80152b2:	4640      	mov	r0, r8
 80152b4:	f7f9 fe86 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80152b8:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80152ba:	bf12      	itee	ne
 80152bc:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80152c0:	2302      	moveq	r3, #2
 80152c2:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 80152c6:	e7da      	b.n	801527e <lv_draw_sw_rect+0x664>
 80152c8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80152cc:	e6df      	b.n	801508e <lv_draw_sw_rect+0x474>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80152ce:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80152d2:	462a      	mov	r2, r5
 80152d4:	a917      	add	r1, sp, #92	; 0x5c
 80152d6:	a81b      	add	r0, sp, #108	; 0x6c
 80152d8:	f00c f83d 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80152dc:	2800      	cmp	r0, #0
 80152de:	f47f aefb 	bne.w	80150d8 <lv_draw_sw_rect+0x4be>
 80152e2:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 80152e6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80152ea:	3301      	adds	r3, #1
 80152ec:	1b9b      	subs	r3, r3, r6
 80152ee:	b21b      	sxth	r3, r3
 80152f0:	930e      	str	r3, [sp, #56]	; 0x38
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 80152f2:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 80152f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80152f8:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80152fc:	9310      	str	r3, [sp, #64]	; 0x40
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80152fe:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8015302:	9311      	str	r3, [sp, #68]	; 0x44
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015306:	bb4b      	cbnz	r3, 801535c <lv_draw_sw_rect+0x742>
 8015308:	9f09      	ldr	r7, [sp, #36]	; 0x24
        if(w > 0) {
 801530a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801530c:	2b00      	cmp	r3, #0
 801530e:	f77f aee3 	ble.w	80150d8 <lv_draw_sw_rect+0x4be>
            blend_dsc.mask_buf = mask_buf;
 8015312:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 8015316:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801531a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 801531e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015322:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8015326:	2302      	movs	r3, #2
 8015328:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 801532c:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
 8015330:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8015334:	42ab      	cmp	r3, r5
 8015336:	f73f aecf 	bgt.w	80150d8 <lv_draw_sw_rect+0x4be>
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801533a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801533c:	eba3 030b 	sub.w	r3, r3, fp
 8015340:	3301      	adds	r3, #1
 8015342:	1af6      	subs	r6, r6, r3
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8015344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015346:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015348:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 801534a:	fb0b 6603 	mla	r6, fp, r3, r6
 801534e:	9b07      	ldr	r3, [sp, #28]
 8015350:	441e      	add	r6, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015352:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8015356:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801535a:	e012      	b.n	8015382 <lv_draw_sw_rect+0x768>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801535c:	462a      	mov	r2, r5
 801535e:	a917      	add	r1, sp, #92	; 0x5c
 8015360:	a81b      	add	r0, sp, #108	; 0x6c
 8015362:	f00c f846 	bl	80213f2 <_lv_area_is_out>
 8015366:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015368:	e7cf      	b.n	801530a <lv_draw_sw_rect+0x6f0>
                    blend_dsc.mask_buf = sh_buf_tmp;
 801536a:	9626      	str	r6, [sp, #152]	; 0x98
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801536c:	a923      	add	r1, sp, #140	; 0x8c
 801536e:	4648      	mov	r0, r9
 8015370:	f7fb ffac 	bl	80112cc <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8015374:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8015376:	3d01      	subs	r5, #1
 8015378:	b22d      	sxth	r5, r5
 801537a:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 801537e:	42ab      	cmp	r3, r5
 8015380:	dc19      	bgt.n	80153b6 <lv_draw_sw_rect+0x79c>
                blend_area.y1 = y;
 8015382:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015386:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 801538a:	2f00      	cmp	r7, #0
 801538c:	d1ed      	bne.n	801536a <lv_draw_sw_rect+0x750>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 801538e:	465a      	mov	r2, fp
 8015390:	4631      	mov	r1, r6
 8015392:	4640      	mov	r0, r8
 8015394:	f00c feb4 	bl	8022100 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801539a:	462a      	mov	r2, r5
 801539c:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80153a0:	4640      	mov	r0, r8
 80153a2:	f7f9 fe0f 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80153a6:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80153a8:	bf12      	itee	ne
 80153aa:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80153ae:	2302      	moveq	r3, #2
 80153b0:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 80153b4:	e7da      	b.n	801536c <lv_draw_sw_rect+0x752>
 80153b6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80153ba:	e68d      	b.n	80150d8 <lv_draw_sw_rect+0x4be>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80153bc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80153c0:	462a      	mov	r2, r5
 80153c2:	a917      	add	r1, sp, #92	; 0x5c
 80153c4:	a81b      	add	r0, sp, #108	; 0x6c
 80153c6:	f00b ffc6 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80153ca:	2800      	cmp	r0, #0
 80153cc:	f47f aea3 	bne.w	8015116 <lv_draw_sw_rect+0x4fc>
 80153d0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80153d4:	3301      	adds	r3, #1
 80153d6:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80153da:	1a9b      	subs	r3, r3, r2
 80153dc:	b21b      	sxth	r3, r3
 80153de:	930e      	str	r3, [sp, #56]	; 0x38
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 80153e0:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 80153e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80153e6:	f9bd 6066 	ldrsh.w	r6, [sp, #102]	; 0x66
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80153ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153ec:	b933      	cbnz	r3, 80153fc <lv_draw_sw_rect+0x7e2>
        if(w > 0) {
 80153ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f77f ae90 	ble.w	8015116 <lv_draw_sw_rect+0x4fc>
 80153f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
                blend_dsc.mask_buf = mask_buf;
 80153f8:	4643      	mov	r3, r8
 80153fa:	e00a      	b.n	8015412 <lv_draw_sw_rect+0x7f8>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80153fc:	462a      	mov	r2, r5
 80153fe:	a917      	add	r1, sp, #92	; 0x5c
 8015400:	a81b      	add	r0, sp, #108	; 0x6c
 8015402:	f00b fff6 	bl	80213f2 <_lv_area_is_out>
        if(w > 0) {
 8015406:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015408:	2b00      	cmp	r3, #0
 801540a:	f77f ae84 	ble.w	8015116 <lv_draw_sw_rect+0x4fc>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801540e:	9f09      	ldr	r7, [sp, #36]	; 0x24
                blend_dsc.mask_buf = NULL;
 8015410:	2300      	movs	r3, #0
 8015412:	9326      	str	r3, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 8015414:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8015418:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 801541c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015420:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015424:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 8015428:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 801542c:	42ab      	cmp	r3, r5
 801542e:	f6ff ae72 	blt.w	8015116 <lv_draw_sw_rect+0x4fc>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8015432:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015434:	1b9e      	subs	r6, r3, r6
 8015436:	9b07      	ldr	r3, [sp, #28]
 8015438:	fb0b 3606 	mla	r6, fp, r6, r3
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801543c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8015440:	9410      	str	r4, [sp, #64]	; 0x40
 8015442:	9c06      	ldr	r4, [sp, #24]
 8015444:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015448:	e013      	b.n	8015472 <lv_draw_sw_rect+0x858>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 801544a:	2cff      	cmp	r4, #255	; 0xff
 801544c:	7833      	ldrb	r3, [r6, #0]
 801544e:	bf1e      	ittt	ne
 8015450:	f89a 2036 	ldrbne.w	r2, [sl, #54]	; 0x36
 8015454:	4353      	mulne	r3, r2
 8015456:	0a1b      	lsrne	r3, r3, #8
 8015458:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801545c:	a923      	add	r1, sp, #140	; 0x8c
 801545e:	4648      	mov	r0, r9
 8015460:	f7fb ff34 	bl	80112cc <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8015464:	445e      	add	r6, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015466:	3501      	adds	r5, #1
 8015468:	b22d      	sxth	r5, r5
 801546a:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 801546e:	42ab      	cmp	r3, r5
 8015470:	db1d      	blt.n	80154ae <lv_draw_sw_rect+0x894>
                blend_area.y1 = y;
 8015472:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015476:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 801547a:	2f00      	cmp	r7, #0
 801547c:	d1e5      	bne.n	801544a <lv_draw_sw_rect+0x830>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 801547e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015480:	7831      	ldrb	r1, [r6, #0]
 8015482:	4640      	mov	r0, r8
 8015484:	f00c ff6d 	bl	8022362 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801548a:	462a      	mov	r2, r5
 801548c:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8015490:	4640      	mov	r0, r8
 8015492:	f7f9 fd97 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015496:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015498:	bf12      	itee	ne
 801549a:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801549e:	2302      	moveq	r3, #2
 80154a0:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 80154a4:	a923      	add	r1, sp, #140	; 0x8c
 80154a6:	4648      	mov	r0, r9
 80154a8:	f7fb ff10 	bl	80112cc <lv_draw_sw_blend>
 80154ac:	e7da      	b.n	8015464 <lv_draw_sw_rect+0x84a>
 80154ae:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80154b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80154b4:	e62f      	b.n	8015116 <lv_draw_sw_rect+0x4fc>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80154b6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80154ba:	463a      	mov	r2, r7
 80154bc:	a917      	add	r1, sp, #92	; 0x5c
 80154be:	a81b      	add	r0, sp, #108	; 0x6c
 80154c0:	f00b ff49 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80154c4:	2800      	cmp	r0, #0
 80154c6:	f47f ae4a 	bne.w	801515e <lv_draw_sw_rect+0x544>
 80154ca:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80154ce:	3301      	adds	r3, #1
 80154d0:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80154d4:	1a9b      	subs	r3, r3, r2
 80154d6:	b21b      	sxth	r3, r3
 80154d8:	930e      	str	r3, [sp, #56]	; 0x38
        if(w > 0) {
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f77f ae3f 	ble.w	801515e <lv_draw_sw_rect+0x544>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 80154e0:	f9bd 606a 	ldrsh.w	r6, [sp, #106]	; 0x6a
 80154e4:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80154e8:	930f      	str	r3, [sp, #60]	; 0x3c
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80154ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154ec:	b9e3      	cbnz	r3, 8015528 <lv_draw_sw_rect+0x90e>
                blend_dsc.mask_buf = mask_buf;
 80154ee:	4643      	mov	r3, r8
 80154f0:	9326      	str	r3, [sp, #152]	; 0x98
            blend_area.x1 = clip_area_sub.x1;
 80154f2:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80154f6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 80154fa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80154fe:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8015502:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
 8015506:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 801550a:	42ab      	cmp	r3, r5
 801550c:	f73f ae27 	bgt.w	801515e <lv_draw_sw_rect+0x544>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8015510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015512:	1af6      	subs	r6, r6, r3
 8015514:	9b07      	ldr	r3, [sp, #28]
 8015516:	fb0b 3606 	mla	r6, fp, r6, r3
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 801551a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801551e:	9410      	str	r4, [sp, #64]	; 0x40
 8015520:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015522:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015526:	e021      	b.n	801556c <lv_draw_sw_rect+0x952>
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015528:	463a      	mov	r2, r7
 801552a:	a917      	add	r1, sp, #92	; 0x5c
 801552c:	a81b      	add	r0, sp, #108	; 0x6c
 801552e:	f00b ff60 	bl	80213f2 <_lv_area_is_out>
                blend_dsc.mask_buf = NULL;
 8015532:	2300      	movs	r3, #0
 8015534:	e7dc      	b.n	80154f0 <lv_draw_sw_rect+0x8d6>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015536:	463a      	mov	r2, r7
 8015538:	a917      	add	r1, sp, #92	; 0x5c
 801553a:	a81b      	add	r0, sp, #108	; 0x6c
 801553c:	f00b ff59 	bl	80213f2 <_lv_area_is_out>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 8015540:	9b06      	ldr	r3, [sp, #24]
 8015542:	2bff      	cmp	r3, #255	; 0xff
 8015544:	d032      	beq.n	80155ac <lv_draw_sw_rect+0x992>
 8015546:	7833      	ldrb	r3, [r6, #0]
 8015548:	f89a 2036 	ldrb.w	r2, [sl, #54]	; 0x36
 801554c:	fb02 f303 	mul.w	r3, r2, r3
 8015550:	0a1b      	lsrs	r3, r3, #8
 8015552:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015556:	a923      	add	r1, sp, #140	; 0x8c
 8015558:	4648      	mov	r0, r9
 801555a:	f7fb feb7 	bl	80112cc <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801555e:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8015560:	3d01      	subs	r5, #1
 8015562:	b22d      	sxth	r5, r5
 8015564:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8015568:	42ab      	cmp	r3, r5
 801556a:	dc21      	bgt.n	80155b0 <lv_draw_sw_rect+0x996>
                blend_area.y1 = y;
 801556c:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015570:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015574:	2c00      	cmp	r4, #0
 8015576:	d1de      	bne.n	8015536 <lv_draw_sw_rect+0x91c>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 8015578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801557a:	7831      	ldrb	r1, [r6, #0]
 801557c:	4640      	mov	r0, r8
 801557e:	f00c fef0 	bl	8022362 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015584:	462a      	mov	r2, r5
 8015586:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 801558a:	4640      	mov	r0, r8
 801558c:	f7f9 fd1a 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015590:	2801      	cmp	r0, #1
 8015592:	d006      	beq.n	80155a2 <lv_draw_sw_rect+0x988>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015594:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015598:	a923      	add	r1, sp, #140	; 0x8c
 801559a:	4648      	mov	r0, r9
 801559c:	f7fb fe96 	bl	80112cc <lv_draw_sw_blend>
 80155a0:	e7dd      	b.n	801555e <lv_draw_sw_rect+0x944>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80155a2:	f04f 0302 	mov.w	r3, #2
 80155a6:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
 80155aa:	e7f5      	b.n	8015598 <lv_draw_sw_rect+0x97e>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 80155ac:	7833      	ldrb	r3, [r6, #0]
 80155ae:	e7d0      	b.n	8015552 <lv_draw_sw_rect+0x938>
 80155b0:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80155b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80155b6:	e5d2      	b.n	801515e <lv_draw_sw_rect+0x544>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80155b8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80155bc:	462a      	mov	r2, r5
 80155be:	a917      	add	r1, sp, #92	; 0x5c
 80155c0:	a81b      	add	r0, sp, #108	; 0x6c
 80155c2:	f00b fec8 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80155c6:	2800      	cmp	r0, #0
 80155c8:	f47f adf8 	bne.w	80151bc <lv_draw_sw_rect+0x5a2>
 80155cc:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 80155d0:	f8bd 7070 	ldrh.w	r7, [sp, #112]	; 0x70
 80155d4:	3701      	adds	r7, #1
 80155d6:	1aff      	subs	r7, r7, r3
 80155d8:	b23f      	sxth	r7, r7
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80155da:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
 80155de:	eba2 020b 	sub.w	r2, r2, fp
 80155e2:	3201      	adds	r2, #1
 80155e4:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += (corner_size - 1) * corner_size;
 80155e6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 80155ea:	fb0b 3302 	mla	r3, fp, r2, r3
 80155ee:	9a07      	ldr	r2, [sp, #28]
 80155f0:	18d3      	adds	r3, r2, r3
 80155f2:	9306      	str	r3, [sp, #24]
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80155f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155f6:	b9e3      	cbnz	r3, 8015632 <lv_draw_sw_rect+0xa18>
 80155f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 80155fa:	4643      	mov	r3, r8
 80155fc:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 80155fe:	2f00      	cmp	r7, #0
 8015600:	f77f addc 	ble.w	80151bc <lv_draw_sw_rect+0x5a2>
            blend_area.x1 = clip_area_sub.x1;
 8015604:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8015608:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 801560c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015610:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8015614:	2302      	movs	r3, #2
 8015616:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801561a:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 801561e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015622:	42ab      	cmp	r3, r5
 8015624:	f6ff adca 	blt.w	80151bc <lv_draw_sw_rect+0x5a2>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015628:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801562c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8015630:	e011      	b.n	8015656 <lv_draw_sw_rect+0xa3c>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015632:	462a      	mov	r2, r5
 8015634:	a917      	add	r1, sp, #92	; 0x5c
 8015636:	a81b      	add	r0, sp, #108	; 0x6c
 8015638:	f00b fedb 	bl	80213f2 <_lv_area_is_out>
 801563c:	9e09      	ldr	r6, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801563e:	9b06      	ldr	r3, [sp, #24]
 8015640:	e7dc      	b.n	80155fc <lv_draw_sw_rect+0x9e2>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015642:	a923      	add	r1, sp, #140	; 0x8c
 8015644:	4658      	mov	r0, fp
 8015646:	f7fb fe41 	bl	80112cc <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801564a:	3501      	adds	r5, #1
 801564c:	b22d      	sxth	r5, r5
 801564e:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015652:	42ab      	cmp	r3, r5
 8015654:	db19      	blt.n	801568a <lv_draw_sw_rect+0xa70>
                blend_area.y1 = y;
 8015656:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 801565a:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 801565e:	2e00      	cmp	r6, #0
 8015660:	d1ef      	bne.n	8015642 <lv_draw_sw_rect+0xa28>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 8015662:	463a      	mov	r2, r7
 8015664:	9906      	ldr	r1, [sp, #24]
 8015666:	4640      	mov	r0, r8
 8015668:	f00c fd4a 	bl	8022100 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801566c:	463b      	mov	r3, r7
 801566e:	462a      	mov	r2, r5
 8015670:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8015674:	4640      	mov	r0, r8
 8015676:	f7f9 fca5 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801567a:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 801567c:	bf12      	itee	ne
 801567e:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015682:	2302      	moveq	r3, #2
 8015684:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 8015688:	e7db      	b.n	8015642 <lv_draw_sw_rect+0xa28>
 801568a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801568e:	e595      	b.n	80151bc <lv_draw_sw_rect+0x5a2>
            lv_opa_t tmp = *start;
 8015690:	f812 1f01 	ldrb.w	r1, [r2, #1]!
            *start = *end;
 8015694:	7818      	ldrb	r0, [r3, #0]
 8015696:	7010      	strb	r0, [r2, #0]
            *end = tmp;
 8015698:	f803 1901 	strb.w	r1, [r3], #-1
        for(x = 0; x < corner_size / 2; x++) {
 801569c:	1ae9      	subs	r1, r5, r3
 801569e:	428e      	cmp	r6, r1
 80156a0:	dcf6      	bgt.n	8015690 <lv_draw_sw_rect+0xa76>
        sh_buf_tmp += corner_size;
 80156a2:	44dc      	add	ip, fp
    for(y = 0; y < corner_size; y++) {
 80156a4:	3701      	adds	r7, #1
 80156a6:	b23f      	sxth	r7, r7
 80156a8:	445d      	add	r5, fp
 80156aa:	45bb      	cmp	fp, r7
 80156ac:	dd06      	ble.n	80156bc <lv_draw_sw_rect+0xaa2>
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 80156ae:	462b      	mov	r3, r5
        for(x = 0; x < corner_size / 2; x++) {
 80156b0:	f1bb 0f01 	cmp.w	fp, #1
 80156b4:	ddf5      	ble.n	80156a2 <lv_draw_sw_rect+0xa88>
 80156b6:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80156ba:	e7e9      	b.n	8015690 <lv_draw_sw_rect+0xa76>
    blend_area.x1 = shadow_area.x1;
 80156bc:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80156c0:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 80156c4:	1e5a      	subs	r2, r3, #1
 80156c6:	4422      	add	r2, r4
 80156c8:	b212      	sxth	r2, r2
    blend_area.y1 = shadow_area.y1 + corner_size;
 80156ca:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80156ce:	4423      	add	r3, r4
 80156d0:	b21b      	sxth	r3, r3
    blend_area.y2 = shadow_area.y2 - corner_size;
 80156d2:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
 80156d6:	1b09      	subs	r1, r1, r4
 80156d8:	b209      	sxth	r1, r1
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 80156da:	4599      	cmp	r9, r3
 80156dc:	da02      	bge.n	80156e4 <lv_draw_sw_rect+0xaca>
 80156de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156e0:	3301      	adds	r3, #1
 80156e2:	b21b      	sxth	r3, r3
 80156e4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 80156e8:	460b      	mov	r3, r1
 80156ea:	4549      	cmp	r1, r9
 80156ec:	bfb8      	it	lt
 80156ee:	464b      	movlt	r3, r9
 80156f0:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 80156f4:	9b08      	ldr	r3, [sp, #32]
 80156f6:	1e5e      	subs	r6, r3, #1
 80156f8:	42b2      	cmp	r2, r6
 80156fa:	bfa8      	it	ge
 80156fc:	4632      	movge	r2, r6
 80156fe:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015702:	9b04      	ldr	r3, [sp, #16]
 8015704:	689a      	ldr	r2, [r3, #8]
 8015706:	a919      	add	r1, sp, #100	; 0x64
 8015708:	a81b      	add	r0, sp, #108	; 0x6c
 801570a:	f00b fcfa 	bl	8021102 <_lv_area_intersect>
 801570e:	2800      	cmp	r0, #0
 8015710:	d16d      	bne.n	80157ee <lv_draw_sw_rect+0xbd4>
    blend_area.x1 = shadow_area.x1;
 8015712:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8015716:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
    blend_area.y1 = shadow_area.y1;
 801571a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801571e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8015722:	3a01      	subs	r2, #1
 8015724:	4422      	add	r2, r4
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 8015726:	b212      	sxth	r2, r2
 8015728:	42b2      	cmp	r2, r6
 801572a:	bfa8      	it	ge
 801572c:	4632      	movge	r2, r6
 801572e:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 8015732:	3b01      	subs	r3, #1
 8015734:	4423      	add	r3, r4
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 8015736:	b21b      	sxth	r3, r3
 8015738:	4599      	cmp	r9, r3
 801573a:	bfa8      	it	ge
 801573c:	4699      	movge	r9, r3
 801573e:	f8ad 906a 	strh.w	r9, [sp, #106]	; 0x6a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015742:	9b04      	ldr	r3, [sp, #16]
 8015744:	689a      	ldr	r2, [r3, #8]
 8015746:	a919      	add	r1, sp, #100	; 0x64
 8015748:	a81b      	add	r0, sp, #108	; 0x6c
 801574a:	f00b fcda 	bl	8021102 <_lv_area_intersect>
 801574e:	2800      	cmp	r0, #0
 8015750:	f040 80ba 	bne.w	80158c8 <lv_draw_sw_rect+0xcae>
    blend_area.x1 = shadow_area.x1 ;
 8015754:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8015758:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 801575c:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
    blend_area.y2 = shadow_area.y2;
 8015760:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 8015764:	3201      	adds	r2, #1
 8015766:	1b12      	subs	r2, r2, r4
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 8015768:	b212      	sxth	r2, r2
 801576a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801576c:	428a      	cmp	r2, r1
 801576e:	bfb8      	it	lt
 8015770:	460a      	movlt	r2, r1
 8015772:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 8015776:	3b01      	subs	r3, #1
 8015778:	4423      	add	r3, r4
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 801577a:	b21b      	sxth	r3, r3
 801577c:	429e      	cmp	r6, r3
 801577e:	bfa8      	it	ge
 8015780:	461e      	movge	r6, r3
 8015782:	f8ad 6068 	strh.w	r6, [sp, #104]	; 0x68
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015786:	9b04      	ldr	r3, [sp, #16]
 8015788:	689a      	ldr	r2, [r3, #8]
 801578a:	a919      	add	r1, sp, #100	; 0x64
 801578c:	a81b      	add	r0, sp, #108	; 0x6c
 801578e:	f00b fcb8 	bl	8021102 <_lv_area_intersect>
 8015792:	2800      	cmp	r0, #0
 8015794:	f040 810d 	bne.w	80159b2 <lv_draw_sw_rect+0xd98>
    blend_area.x1 = shadow_area.x1 + corner_size ;
 8015798:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801579c:	4423      	add	r3, r4
 801579e:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    blend_area.x2 = shadow_area.x2 - corner_size;
 80157a2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80157a6:	1b1b      	subs	r3, r3, r4
 80157a8:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    blend_area.y1 = shadow_area.y1 + corner_size;
 80157ac:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80157b0:	4423      	add	r3, r4
 80157b2:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    blend_area.y2 = shadow_area.y2 - corner_size;
 80157b6:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 80157ba:	1b1c      	subs	r4, r3, r4
 80157bc:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
    blend_dsc.mask_buf = mask_buf;
 80157c0:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80157c4:	9b04      	ldr	r3, [sp, #16]
 80157c6:	689a      	ldr	r2, [r3, #8]
 80157c8:	a919      	add	r1, sp, #100	; 0x64
 80157ca:	a81b      	add	r0, sp, #108	; 0x6c
 80157cc:	f00b fc99 	bl	8021102 <_lv_area_intersect>
 80157d0:	2800      	cmp	r0, #0
 80157d2:	f040 8161 	bne.w	8015a98 <lv_draw_sw_rect+0xe7e>
    if(!simple) {
 80157d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157d8:	2b00      	cmp	r3, #0
 80157da:	f000 8197 	beq.w	8015b0c <lv_draw_sw_rect+0xef2>
    lv_mem_buf_release(sh_buf);
 80157de:	9807      	ldr	r0, [sp, #28]
 80157e0:	f00c fc58 	bl	8022094 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 80157e4:	4640      	mov	r0, r8
 80157e6:	f00c fc55 	bl	8022094 <lv_mem_buf_release>
 80157ea:	f7ff ba68 	b.w	8014cbe <lv_draw_sw_rect+0xa4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80157ee:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80157f2:	462a      	mov	r2, r5
 80157f4:	a917      	add	r1, sp, #92	; 0x5c
 80157f6:	a81b      	add	r0, sp, #108	; 0x6c
 80157f8:	f00b fdad 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d188      	bne.n	8015712 <lv_draw_sw_rect+0xaf8>
 8015800:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8015804:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8015808:	3201      	adds	r2, #1
 801580a:	1ad2      	subs	r2, r2, r3
 801580c:	b212      	sxth	r2, r2
 801580e:	9208      	str	r2, [sp, #32]
        sh_buf_tmp += (corner_size - 1) * corner_size;
 8015810:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8015814:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8015818:	1a5b      	subs	r3, r3, r1
 801581a:	fb0b 3302 	mla	r3, fp, r2, r3
 801581e:	9a07      	ldr	r2, [sp, #28]
 8015820:	18d3      	adds	r3, r2, r3
 8015822:	9306      	str	r3, [sp, #24]
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015826:	b9fb      	cbnz	r3, 8015868 <lv_draw_sw_rect+0xc4e>
 8015828:	9f09      	ldr	r7, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 801582a:	4643      	mov	r3, r8
 801582c:	9326      	str	r3, [sp, #152]	; 0x98
        if(w > 0) {
 801582e:	9a08      	ldr	r2, [sp, #32]
 8015830:	2a00      	cmp	r2, #0
 8015832:	f77f af6e 	ble.w	8015712 <lv_draw_sw_rect+0xaf8>
            blend_area.x1 = clip_area_sub.x1;
 8015836:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 801583a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 801583e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015842:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8015846:	2302      	movs	r3, #2
 8015848:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801584c:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 8015850:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015854:	42ab      	cmp	r3, r5
 8015856:	f6ff af5c 	blt.w	8015712 <lv_draw_sw_rect+0xaf8>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 801585a:	f8cd b020 	str.w	fp, [sp, #32]
 801585e:	940c      	str	r4, [sp, #48]	; 0x30
 8015860:	4614      	mov	r4, r2
 8015862:	f8dd b010 	ldr.w	fp, [sp, #16]
 8015866:	e011      	b.n	801588c <lv_draw_sw_rect+0xc72>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015868:	462a      	mov	r2, r5
 801586a:	a917      	add	r1, sp, #92	; 0x5c
 801586c:	a81b      	add	r0, sp, #108	; 0x6c
 801586e:	f00b fdc0 	bl	80213f2 <_lv_area_is_out>
 8015872:	9f09      	ldr	r7, [sp, #36]	; 0x24
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 8015874:	9b06      	ldr	r3, [sp, #24]
 8015876:	e7d9      	b.n	801582c <lv_draw_sw_rect+0xc12>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015878:	a923      	add	r1, sp, #140	; 0x8c
 801587a:	4658      	mov	r0, fp
 801587c:	f7fb fd26 	bl	80112cc <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015880:	3501      	adds	r5, #1
 8015882:	b22d      	sxth	r5, r5
 8015884:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015888:	42ab      	cmp	r3, r5
 801588a:	db19      	blt.n	80158c0 <lv_draw_sw_rect+0xca6>
                blend_area.y1 = y;
 801588c:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015890:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8015894:	2f00      	cmp	r7, #0
 8015896:	d1ef      	bne.n	8015878 <lv_draw_sw_rect+0xc5e>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 8015898:	4622      	mov	r2, r4
 801589a:	9906      	ldr	r1, [sp, #24]
 801589c:	4640      	mov	r0, r8
 801589e:	f00c fc2f 	bl	8022100 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80158a2:	4623      	mov	r3, r4
 80158a4:	462a      	mov	r2, r5
 80158a6:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 80158aa:	4640      	mov	r0, r8
 80158ac:	f7f9 fb8a 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80158b0:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80158b2:	bf12      	itee	ne
 80158b4:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80158b8:	2302      	moveq	r3, #2
 80158ba:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 80158be:	e7db      	b.n	8015878 <lv_draw_sw_rect+0xc5e>
 80158c0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80158c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80158c6:	e724      	b.n	8015712 <lv_draw_sw_rect+0xaf8>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80158c8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80158cc:	462a      	mov	r2, r5
 80158ce:	a917      	add	r1, sp, #92	; 0x5c
 80158d0:	a81b      	add	r0, sp, #108	; 0x6c
 80158d2:	f00b fd40 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80158d6:	2800      	cmp	r0, #0
 80158d8:	f47f af3c 	bne.w	8015754 <lv_draw_sw_rect+0xb3a>
 80158dc:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 80158e0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80158e4:	3301      	adds	r3, #1
 80158e6:	1bdb      	subs	r3, r3, r7
 80158e8:	b21b      	sxth	r3, r3
 80158ea:	9306      	str	r3, [sp, #24]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 80158ec:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 80158f0:	9308      	str	r3, [sp, #32]
 80158f2:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 80158f6:	930c      	str	r3, [sp, #48]	; 0x30
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 80158f8:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80158fc:	930e      	str	r3, [sp, #56]	; 0x38
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80158fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015900:	bb3b      	cbnz	r3, 8015952 <lv_draw_sw_rect+0xd38>
 8015902:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
        blend_dsc.mask_buf = mask_buf;
 8015906:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
        if(w > 0) {
 801590a:	9b06      	ldr	r3, [sp, #24]
 801590c:	2b00      	cmp	r3, #0
 801590e:	f77f af21 	ble.w	8015754 <lv_draw_sw_rect+0xb3a>
            blend_area.x1 = clip_area_sub.x1;
 8015912:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8015916:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 801591a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801591e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8015922:	2302      	movs	r3, #2
 8015924:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015928:	f9bd 506e 	ldrsh.w	r5, [sp, #110]	; 0x6e
 801592c:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015930:	42ab      	cmp	r3, r5
 8015932:	f6ff af0f 	blt.w	8015754 <lv_draw_sw_rect+0xb3a>
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 8015936:	9b08      	ldr	r3, [sp, #32]
 8015938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801593a:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 801593c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801593e:	1abf      	subs	r7, r7, r2
 8015940:	fb0b 7703 	mla	r7, fp, r3, r7
 8015944:	9b07      	ldr	r3, [sp, #28]
 8015946:	441f      	add	r7, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015948:	9408      	str	r4, [sp, #32]
 801594a:	464c      	mov	r4, r9
 801594c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8015950:	e013      	b.n	801597a <lv_draw_sw_rect+0xd60>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015952:	462a      	mov	r2, r5
 8015954:	a917      	add	r1, sp, #92	; 0x5c
 8015956:	a81b      	add	r0, sp, #108	; 0x6c
 8015958:	f00b fd4b 	bl	80213f2 <_lv_area_is_out>
 801595c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015960:	e7d1      	b.n	8015906 <lv_draw_sw_rect+0xcec>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8015962:	9726      	str	r7, [sp, #152]	; 0x98
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015964:	a923      	add	r1, sp, #140	; 0x8c
 8015966:	4648      	mov	r0, r9
 8015968:	f7fb fcb0 	bl	80112cc <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 801596c:	445f      	add	r7, fp
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 801596e:	3501      	adds	r5, #1
 8015970:	b22d      	sxth	r5, r5
 8015972:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015976:	42ab      	cmp	r3, r5
 8015978:	db19      	blt.n	80159ae <lv_draw_sw_rect+0xd94>
                blend_area.y1 = y;
 801597a:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 801597e:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8015982:	2c00      	cmp	r4, #0
 8015984:	d1ed      	bne.n	8015962 <lv_draw_sw_rect+0xd48>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 8015986:	465a      	mov	r2, fp
 8015988:	4639      	mov	r1, r7
 801598a:	4640      	mov	r0, r8
 801598c:	f00c fbb8 	bl	8022100 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015990:	9b06      	ldr	r3, [sp, #24]
 8015992:	462a      	mov	r2, r5
 8015994:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8015998:	4640      	mov	r0, r8
 801599a:	f7f9 fb13 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 801599e:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 80159a0:	bf12      	itee	ne
 80159a2:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 80159a6:	2302      	moveq	r3, #2
 80159a8:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
 80159ac:	e7da      	b.n	8015964 <lv_draw_sw_rect+0xd4a>
 80159ae:	9c08      	ldr	r4, [sp, #32]
 80159b0:	e6d0      	b.n	8015754 <lv_draw_sw_rect+0xb3a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 80159b2:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80159b6:	462a      	mov	r2, r5
 80159b8:	a917      	add	r1, sp, #92	; 0x5c
 80159ba:	a81b      	add	r0, sp, #108	; 0x6c
 80159bc:	f00b fccb 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 80159c0:	2800      	cmp	r0, #0
 80159c2:	f47f aee9 	bne.w	8015798 <lv_draw_sw_rect+0xb7e>
 80159c6:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 80159ca:	f8bd 9070 	ldrh.w	r9, [sp, #112]	; 0x70
 80159ce:	f109 0901 	add.w	r9, r9, #1
 80159d2:	eba9 0906 	sub.w	r9, r9, r6
 80159d6:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 80159da:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 80159de:	9306      	str	r3, [sp, #24]
 80159e0:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 80159e4:	9308      	str	r3, [sp, #32]
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 80159e6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80159ea:	930b      	str	r3, [sp, #44]	; 0x2c
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 80159ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159ee:	bb23      	cbnz	r3, 8015a3a <lv_draw_sw_rect+0xe20>
 80159f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
        blend_dsc.mask_buf = mask_buf;
 80159f2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
        if(w > 0) {
 80159f6:	f1b9 0f00 	cmp.w	r9, #0
 80159fa:	f77f aecd 	ble.w	8015798 <lv_draw_sw_rect+0xb7e>
            blend_area.x1 = clip_area_sub.x1;
 80159fe:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8015a02:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8015a06:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8015a0a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 8015a0e:	2302      	movs	r3, #2
 8015a10:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8015a14:	f9bd 5072 	ldrsh.w	r5, [sp, #114]	; 0x72
 8015a18:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8015a1c:	42ab      	cmp	r3, r5
 8015a1e:	f73f aebb 	bgt.w	8015798 <lv_draw_sw_rect+0xb7e>
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 8015a22:	9b06      	ldr	r3, [sp, #24]
 8015a24:	9a08      	ldr	r2, [sp, #32]
 8015a26:	1a9b      	subs	r3, r3, r2
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 8015a28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a2a:	1ab6      	subs	r6, r6, r2
 8015a2c:	fb0b 6603 	mla	r6, fp, r3, r6
 8015a30:	9b07      	ldr	r3, [sp, #28]
 8015a32:	441e      	add	r6, r3
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015a34:	9406      	str	r4, [sp, #24]
 8015a36:	9c04      	ldr	r4, [sp, #16]
 8015a38:	e024      	b.n	8015a84 <lv_draw_sw_rect+0xe6a>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 8015a3a:	462a      	mov	r2, r5
 8015a3c:	a917      	add	r1, sp, #92	; 0x5c
 8015a3e:	a81b      	add	r0, sp, #108	; 0x6c
 8015a40:	f00b fcd7 	bl	80213f2 <_lv_area_is_out>
 8015a44:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015a46:	e7d4      	b.n	80159f2 <lv_draw_sw_rect+0xdd8>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 8015a48:	465a      	mov	r2, fp
 8015a4a:	4631      	mov	r1, r6
 8015a4c:	4640      	mov	r0, r8
 8015a4e:	f00c fb57 	bl	8022100 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015a52:	464b      	mov	r3, r9
 8015a54:	462a      	mov	r2, r5
 8015a56:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8015a5a:	4640      	mov	r0, r8
 8015a5c:	f7f9 fab2 	bl	800efc4 <lv_draw_mask_apply>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015a60:	2801      	cmp	r0, #1
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015a62:	bf12      	itee	ne
 8015a64:	f88d 009c 	strbne.w	r0, [sp, #156]	; 0x9c
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 8015a68:	2302      	moveq	r3, #2
 8015a6a:	f88d 309c 	strbeq.w	r3, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015a6e:	a923      	add	r1, sp, #140	; 0x8c
 8015a70:	4620      	mov	r0, r4
 8015a72:	f7fb fc2b 	bl	80112cc <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 8015a76:	445e      	add	r6, fp
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 8015a78:	3d01      	subs	r5, #1
 8015a7a:	b22d      	sxth	r5, r5
 8015a7c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
 8015a80:	42ab      	cmp	r3, r5
 8015a82:	dc07      	bgt.n	8015a94 <lv_draw_sw_rect+0xe7a>
                blend_area.y1 = y;
 8015a84:	f8ad 5066 	strh.w	r5, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015a88:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
                if(!simple_sub) {
 8015a8c:	2f00      	cmp	r7, #0
 8015a8e:	d0db      	beq.n	8015a48 <lv_draw_sw_rect+0xe2e>
                    blend_dsc.mask_buf = sh_buf_tmp;
 8015a90:	9626      	str	r6, [sp, #152]	; 0x98
 8015a92:	e7ec      	b.n	8015a6e <lv_draw_sw_rect+0xe54>
 8015a94:	9c06      	ldr	r4, [sp, #24]
 8015a96:	e67f      	b.n	8015798 <lv_draw_sw_rect+0xb7e>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 8015a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a9a:	a917      	add	r1, sp, #92	; 0x5c
 8015a9c:	a81b      	add	r0, sp, #108	; 0x6c
 8015a9e:	f00b fc5a 	bl	8021356 <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 8015aa2:	2800      	cmp	r0, #0
 8015aa4:	f47f ae97 	bne.w	80157d6 <lv_draw_sw_rect+0xbbc>
 8015aa8:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	; 0x70
 8015aac:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 8015ab0:	1c5d      	adds	r5, r3, #1
 8015ab2:	1aad      	subs	r5, r5, r2
 8015ab4:	b22d      	sxth	r5, r5
        if(w > 0) {
 8015ab6:	2d00      	cmp	r5, #0
 8015ab8:	f77f ae8d 	ble.w	80157d6 <lv_draw_sw_rect+0xbbc>
            blend_area.x1 = clip_area_sub.x1;
 8015abc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
            blend_area.x2 = clip_area_sub.x2;
 8015ac0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015ac4:	f9bd 406e 	ldrsh.w	r4, [sp, #110]	; 0x6e
 8015ac8:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015acc:	42a3      	cmp	r3, r4
 8015ace:	f6ff ae82 	blt.w	80157d6 <lv_draw_sw_rect+0xbbc>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015ad2:	9e04      	ldr	r6, [sp, #16]
                blend_area.y1 = y;
 8015ad4:	f8ad 4066 	strh.w	r4, [sp, #102]	; 0x66
                blend_area.y2 = y;
 8015ad8:	f8ad 406a 	strh.w	r4, [sp, #106]	; 0x6a
                lv_memset_ff(mask_buf, w);
 8015adc:	4629      	mov	r1, r5
 8015ade:	4640      	mov	r0, r8
 8015ae0:	f00c fd0a 	bl	80224f8 <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 8015ae4:	462b      	mov	r3, r5
 8015ae6:	4622      	mov	r2, r4
 8015ae8:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8015aec:	4640      	mov	r0, r8
 8015aee:	f7f9 fa69 	bl	800efc4 <lv_draw_mask_apply>
 8015af2:	f88d 009c 	strb.w	r0, [sp, #156]	; 0x9c
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 8015af6:	a923      	add	r1, sp, #140	; 0x8c
 8015af8:	4630      	mov	r0, r6
 8015afa:	f7fb fbe7 	bl	80112cc <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 8015afe:	3401      	adds	r4, #1
 8015b00:	b224      	sxth	r4, r4
 8015b02:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	; 0x72
 8015b06:	42a3      	cmp	r3, r4
 8015b08:	dae4      	bge.n	8015ad4 <lv_draw_sw_rect+0xeba>
 8015b0a:	e664      	b.n	80157d6 <lv_draw_sw_rect+0xbbc>
        lv_draw_mask_free_param(&mask_rout_param);
 8015b0c:	a81d      	add	r0, sp, #116	; 0x74
 8015b0e:	f7f9 faab 	bl	800f068 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 8015b12:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015b14:	f7f9 fa7e 	bl	800f014 <lv_draw_mask_remove_id>
 8015b18:	e661      	b.n	80157de <lv_draw_sw_rect+0xbc4>
    dest->y1 = src->y1;
 8015b1a:	9a05      	ldr	r2, [sp, #20]
 8015b1c:	f9b2 7002 	ldrsh.w	r7, [r2, #2]
    dest->x2 = src->x2;
 8015b20:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    dest->y2 = src->y2;
 8015b24:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
    lv_coord_t pad = dsc->outline_pad - 1;
 8015b28:	f8ba 1028 	ldrh.w	r1, [sl, #40]	; 0x28
 8015b2c:	3901      	subs	r1, #1
 8015b2e:	b289      	uxth	r1, r1
    area_inner.x1 -= pad;
 8015b30:	8812      	ldrh	r2, [r2, #0]
 8015b32:	eba2 0c01 	sub.w	ip, r2, r1
 8015b36:	fa1f fc8c 	uxth.w	ip, ip
 8015b3a:	f8ad c074 	strh.w	ip, [sp, #116]	; 0x74
    area_inner.y1 -= pad;
 8015b3e:	b2bf      	uxth	r7, r7
 8015b40:	1a7e      	subs	r6, r7, r1
 8015b42:	b2b6      	uxth	r6, r6
 8015b44:	f8ad 6076 	strh.w	r6, [sp, #118]	; 0x76
    area_inner.x2 += pad;
 8015b48:	440b      	add	r3, r1
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
    area_inner.y2 += pad;
 8015b50:	440c      	add	r4, r1
 8015b52:	b2a4      	uxth	r4, r4
 8015b54:	f8ad 407a 	strh.w	r4, [sp, #122]	; 0x7a
    area_outer.x1 -= dsc->outline_width;
 8015b58:	b280      	uxth	r0, r0
 8015b5a:	ebac 0c00 	sub.w	ip, ip, r0
 8015b5e:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
    area_outer.x2 += dsc->outline_width;
 8015b62:	eb03 0c00 	add.w	ip, r3, r0
 8015b66:	f8ad c090 	strh.w	ip, [sp, #144]	; 0x90
    area_outer.y1 -= dsc->outline_width;
 8015b6a:	1a36      	subs	r6, r6, r0
 8015b6c:	f8ad 608e 	strh.w	r6, [sp, #142]	; 0x8e
    area_outer.y2 += dsc->outline_width;
 8015b70:	1826      	adds	r6, r4, r0
 8015b72:	f8ad 6092 	strh.w	r6, [sp, #146]	; 0x92
    int32_t rin = dsc->radius;
 8015b76:	f9ba 6000 	ldrsh.w	r6, [sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015b7a:	f1c2 0201 	rsb	r2, r2, #1
 8015b7e:	440a      	add	r2, r1
 8015b80:	4413      	add	r3, r2
    int32_t inner_w = lv_area_get_width(&area_inner);
 8015b82:	b21a      	sxth	r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015b84:	f1c7 0701 	rsb	r7, r7, #1
 8015b88:	4439      	add	r1, r7
 8015b8a:	4421      	add	r1, r4
    int32_t inner_h = lv_area_get_height(&area_inner);
 8015b8c:	b20b      	sxth	r3, r1
    int32_t short_side = LV_MIN(inner_w, inner_h);
 8015b8e:	4293      	cmp	r3, r2
 8015b90:	bfa8      	it	ge
 8015b92:	4613      	movge	r3, r2
    if(rin > short_side >> 1) rin = short_side >> 1;
 8015b94:	105a      	asrs	r2, r3, #1
 8015b96:	42b2      	cmp	r2, r6
 8015b98:	bfa8      	it	ge
 8015b9a:	4632      	movge	r2, r6
    lv_coord_t rout = rin + dsc->outline_width;
 8015b9c:	1883      	adds	r3, r0, r2
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 8015b9e:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8015ba2:	9103      	str	r1, [sp, #12]
 8015ba4:	9502      	str	r5, [sp, #8]
 8015ba6:	f8ba 1024 	ldrh.w	r1, [sl, #36]	; 0x24
 8015baa:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015bae:	9200      	str	r2, [sp, #0]
 8015bb0:	b21b      	sxth	r3, r3
 8015bb2:	aa1d      	add	r2, sp, #116	; 0x74
 8015bb4:	a923      	add	r1, sp, #140	; 0x8c
 8015bb6:	9804      	ldr	r0, [sp, #16]
 8015bb8:	f7fe fce8 	bl	801458c <draw_border_generic>
 8015bbc:	f7ff b8fa 	b.w	8014db4 <lv_draw_sw_rect+0x19a>
        for(i = 0; i < size * size; i++) {
 8015bc0:	fb06 f606 	mul.w	r6, r6, r6
 8015bc4:	9c07      	ldr	r4, [sp, #28]
 8015bc6:	1ea1      	subs	r1, r4, #2
 8015bc8:	1e62      	subs	r2, r4, #1
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 8015bca:	4613      	mov	r3, r2
 8015bcc:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8015bd0:	0980      	lsrs	r0, r0, #6
 8015bd2:	f802 0f01 	strb.w	r0, [r2, #1]!
        for(i = 0; i < size * size; i++) {
 8015bd6:	3302      	adds	r3, #2
 8015bd8:	1b1b      	subs	r3, r3, r4
 8015bda:	429e      	cmp	r6, r3
 8015bdc:	dcf5      	bgt.n	8015bca <lv_draw_sw_rect+0xfb0>
 8015bde:	f7ff b9e2 	b.w	8014fa6 <lv_draw_sw_rect+0x38c>
 8015be2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8015be6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    lv_mem_buf_release(mask_line);
 8015bea:	4640      	mov	r0, r8
 8015bec:	f00c fa52 	bl	8022094 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 8015bf0:	a823      	add	r0, sp, #140	; 0x8c
 8015bf2:	f7f9 fa39 	bl	800f068 <lv_draw_mask_free_param>
    if(sw == 1) {
 8015bf6:	9b08      	ldr	r3, [sp, #32]
 8015bf8:	2b01      	cmp	r3, #1
 8015bfa:	d0e1      	beq.n	8015bc0 <lv_draw_sw_rect+0xfa6>
    shadow_blur_corner(size, sw, sh_buf);
 8015bfc:	b234      	sxth	r4, r6
 8015bfe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015c02:	4642      	mov	r2, r8
 8015c04:	9d08      	ldr	r5, [sp, #32]
 8015c06:	4629      	mov	r1, r5
 8015c08:	4620      	mov	r0, r4
 8015c0a:	f7fe f8b1 	bl	8013d70 <shadow_blur_corner>
    sw += sw_ori & 1;
 8015c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c10:	442b      	add	r3, r5
 8015c12:	4619      	mov	r1, r3
    if(sw > 1) {
 8015c14:	2b01      	cmp	r3, #1
 8015c16:	f77f a9b7 	ble.w	8014f88 <lv_draw_sw_rect+0x36e>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 8015c1a:	f44f 577f 	mov.w	r7, #16320	; 0x3fc0
 8015c1e:	fb97 f7f3 	sdiv	r7, r7, r3
        for(i = 0; i < (uint32_t)size * size; i++) {
 8015c22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015c24:	fb05 f505 	mul.w	r5, r5, r5
 8015c28:	2d00      	cmp	r5, #0
 8015c2a:	f43f a9a9 	beq.w	8014f80 <lv_draw_sw_rect+0x366>
 8015c2e:	f1a8 0302 	sub.w	r3, r8, #2
 8015c32:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8015c36:	f7ff b997 	b.w	8014f68 <lv_draw_sw_rect+0x34e>
    lv_mem_buf_release(mask_line);
 8015c3a:	4640      	mov	r0, r8
 8015c3c:	f00c fa2a 	bl	8022094 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 8015c40:	a823      	add	r0, sp, #140	; 0x8c
 8015c42:	f7f9 fa11 	bl	800f068 <lv_draw_mask_free_param>
        for(i = 0; i < size * size; i++) {
 8015c46:	fb06 f606 	mul.w	r6, r6, r6
 8015c4a:	2e00      	cmp	r6, #0
 8015c4c:	f77f a9ab 	ble.w	8014fa6 <lv_draw_sw_rect+0x38c>
 8015c50:	e7b8      	b.n	8015bc4 <lv_draw_sw_rect+0xfaa>
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 8015c52:	960b      	str	r6, [sp, #44]	; 0x2c
 8015c54:	4630      	mov	r0, r6
 8015c56:	f00c f9bb 	bl	8021fd0 <lv_mem_buf_get>
 8015c5a:	4680      	mov	r8, r0
    for(y = 0; y < size; y++) {
 8015c5c:	2e00      	cmp	r6, #0
 8015c5e:	ddec      	ble.n	8015c3a <lv_draw_sw_rect+0x1020>
    if(sw_ori == 1) sw = 1;
 8015c60:	2301      	movs	r3, #1
 8015c62:	9308      	str	r3, [sp, #32]
 8015c64:	f7ff b930 	b.w	8014ec8 <lv_draw_sw_rect+0x2ae>

08015c68 <transform_point_upscaled>:
    }
}

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 8015c68:	b510      	push	{r4, lr}
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 8015c6a:	69c4      	ldr	r4, [r0, #28]
 8015c6c:	2c00      	cmp	r4, #0
 8015c6e:	d135      	bne.n	8015cdc <transform_point_upscaled+0x74>
 8015c70:	6984      	ldr	r4, [r0, #24]
 8015c72:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8015c76:	d013      	beq.n	8015ca0 <transform_point_upscaled+0x38>
        *yout = yin * 256;
        return;
    }

    xin -= t->pivot.x;
    yin -= t->pivot.y;
 8015c78:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 8015c7c:	eba2 020c 	sub.w	r2, r2, ip
    xin -= t->pivot.x;
 8015c80:	f9b0 c028 	ldrsh.w	ip, [r0, #40]	; 0x28
 8015c84:	eba1 010c 	sub.w	r1, r1, ip

    if(t->angle == 0) {
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 8015c88:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8015c8c:	fb04 c101 	mla	r1, r4, r1, ip
 8015c90:	6019      	str	r1, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 8015c92:	6981      	ldr	r1, [r0, #24]
 8015c94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015c96:	fb01 3202 	mla	r2, r1, r2, r3
 8015c9a:	9b02      	ldr	r3, [sp, #8]
 8015c9c:	601a      	str	r2, [r3, #0]
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
    }
}
 8015c9e:	bd10      	pop	{r4, pc}
        *xout = xin * 256;
 8015ca0:	0209      	lsls	r1, r1, #8
 8015ca2:	6019      	str	r1, [r3, #0]
        *yout = yin * 256;
 8015ca4:	0212      	lsls	r2, r2, #8
 8015ca6:	9b02      	ldr	r3, [sp, #8]
 8015ca8:	601a      	str	r2, [r3, #0]
        return;
 8015caa:	e7f8      	b.n	8015c9e <transform_point_upscaled+0x36>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 8015cac:	6944      	ldr	r4, [r0, #20]
 8015cae:	fb01 f404 	mul.w	r4, r1, r4
 8015cb2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015cb6:	fb0c 4412 	mls	r4, ip, r2, r4
 8015cba:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8015cbe:	eb0c 04a4 	add.w	r4, ip, r4, asr #2
 8015cc2:	601c      	str	r4, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 8015cc4:	6904      	ldr	r4, [r0, #16]
 8015cc6:	6943      	ldr	r3, [r0, #20]
 8015cc8:	fb03 f202 	mul.w	r2, r3, r2
 8015ccc:	fb04 2101 	mla	r1, r4, r1, r2
 8015cd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015cd2:	eb03 01a1 	add.w	r1, r3, r1, asr #2
 8015cd6:	9b02      	ldr	r3, [sp, #8]
 8015cd8:	6019      	str	r1, [r3, #0]
 8015cda:	e7e0      	b.n	8015c9e <transform_point_upscaled+0x36>
    xin -= t->pivot.x;
 8015cdc:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	; 0x28
 8015ce0:	1b09      	subs	r1, r1, r4
    yin -= t->pivot.y;
 8015ce2:	f9b0 402a 	ldrsh.w	r4, [r0, #42]	; 0x2a
 8015ce6:	1b12      	subs	r2, r2, r4
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 8015ce8:	6984      	ldr	r4, [r0, #24]
 8015cea:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8015cee:	d0dd      	beq.n	8015cac <transform_point_upscaled+0x44>
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 8015cf0:	f8d0 c014 	ldr.w	ip, [r0, #20]
 8015cf4:	fb0c fc01 	mul.w	ip, ip, r1
 8015cf8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8015cfc:	fb0e cc12 	mls	ip, lr, r2, ip
 8015d00:	fb04 fc0c 	mul.w	ip, r4, ip
 8015d04:	6a04      	ldr	r4, [r0, #32]
 8015d06:	eb04 24ac 	add.w	r4, r4, ip, asr #10
 8015d0a:	601c      	str	r4, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 8015d0c:	6904      	ldr	r4, [r0, #16]
 8015d0e:	6943      	ldr	r3, [r0, #20]
 8015d10:	fb03 f202 	mul.w	r2, r3, r2
 8015d14:	fb04 2101 	mla	r1, r4, r1, r2
 8015d18:	6982      	ldr	r2, [r0, #24]
 8015d1a:	fb02 f101 	mul.w	r1, r2, r1
 8015d1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015d20:	eb03 21a1 	add.w	r1, r3, r1, asr #10
 8015d24:	9b02      	ldr	r3, [sp, #8]
 8015d26:	6019      	str	r1, [r3, #0]
 8015d28:	e7b9      	b.n	8015c9e <transform_point_upscaled+0x36>
	...

08015d2c <lv_draw_sw_transform>:
{
 8015d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d30:	b0af      	sub	sp, #188	; 0xbc
 8015d32:	468a      	mov	sl, r1
 8015d34:	910d      	str	r1, [sp, #52]	; 0x34
 8015d36:	9208      	str	r2, [sp, #32]
 8015d38:	9304      	str	r3, [sp, #16]
 8015d3a:	f9bd b0e0 	ldrsh.w	fp, [sp, #224]	; 0xe0
 8015d3e:	f8cd b018 	str.w	fp, [sp, #24]
 8015d42:	f9bd 00e4 	ldrsh.w	r0, [sp, #228]	; 0xe4
 8015d46:	900b      	str	r0, [sp, #44]	; 0x2c
 8015d48:	f89d 10ec 	ldrb.w	r1, [sp, #236]	; 0xec
 8015d4c:	9107      	str	r1, [sp, #28]
    tr_dsc.angle = -draw_dsc->angle;
 8015d4e:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8015d50:	f9b1 1000 	ldrsh.w	r1, [r1]
 8015d54:	424b      	negs	r3, r1
 8015d56:	932a      	str	r3, [sp, #168]	; 0xa8
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 8015d58:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8015d5a:	8860      	ldrh	r0, [r4, #2]
 8015d5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015d60:	fb92 f2f0 	sdiv	r2, r2, r0
 8015d64:	9229      	str	r2, [sp, #164]	; 0xa4
    tr_dsc.pivot = draw_dsc->pivot;
 8015d66:	6862      	ldr	r2, [r4, #4]
 8015d68:	922d      	str	r2, [sp, #180]	; 0xb4
    int32_t angle_low = tr_dsc.angle / 10;
 8015d6a:	4fb8      	ldr	r7, [pc, #736]	; (801604c <lv_draw_sw_transform+0x320>)
 8015d6c:	fb87 4503 	smull	r4, r5, r7, r3
 8015d70:	17db      	asrs	r3, r3, #31
 8015d72:	ebc3 05a5 	rsb	r5, r3, r5, asr #2
    int32_t angle_high = angle_low + 1;
 8015d76:	f105 0801 	add.w	r8, r5, #1
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 8015d7a:	f06f 0609 	mvn.w	r6, #9
 8015d7e:	fb05 f606 	mul.w	r6, r5, r6
 8015d82:	1a76      	subs	r6, r6, r1
    int32_t s1 = lv_trigo_sin(angle_low);
 8015d84:	b228      	sxth	r0, r5
 8015d86:	f00b ffc5 	bl	8021d14 <lv_trigo_sin>
 8015d8a:	4681      	mov	r9, r0
    int32_t s2 = lv_trigo_sin(angle_high);
 8015d8c:	fa0f f088 	sxth.w	r0, r8
 8015d90:	f00b ffc0 	bl	8021d14 <lv_trigo_sin>
 8015d94:	4604      	mov	r4, r0
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 8015d96:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8015d9a:	b200      	sxth	r0, r0
 8015d9c:	f00b ffba 	bl	8021d14 <lv_trigo_sin>
 8015da0:	4605      	mov	r5, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 8015da2:	f108 005a 	add.w	r0, r8, #90	; 0x5a
 8015da6:	b200      	sxth	r0, r0
 8015da8:	f00b ffb4 	bl	8021d14 <lv_trigo_sin>
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8015dac:	f1c6 020a 	rsb	r2, r6, #10
 8015db0:	fb06 f404 	mul.w	r4, r6, r4
 8015db4:	fb02 4909 	mla	r9, r2, r9, r4
 8015db8:	fb87 1309 	smull	r1, r3, r7, r9
 8015dbc:	ea4f 79e9 	mov.w	r9, r9, asr #31
 8015dc0:	ebc9 03a3 	rsb	r3, r9, r3, asr #2
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 8015dc4:	115b      	asrs	r3, r3, #5
 8015dc6:	9327      	str	r3, [sp, #156]	; 0x9c
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8015dc8:	fb00 f606 	mul.w	r6, r0, r6
 8015dcc:	fb02 6505 	mla	r5, r2, r5, r6
 8015dd0:	fb87 1305 	smull	r1, r3, r7, r5
 8015dd4:	17ed      	asrs	r5, r5, #31
 8015dd6:	ebc5 03a3 	rsb	r3, r5, r3, asr #2
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 8015dda:	115b      	asrs	r3, r3, #5
 8015ddc:	9328      	str	r3, [sp, #160]	; 0xa0
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 8015dde:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8015de2:	021b      	lsls	r3, r3, #8
 8015de4:	932b      	str	r3, [sp, #172]	; 0xac
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 8015de6:	f9bd 30b6 	ldrsh.w	r3, [sp, #182]	; 0xb6
 8015dea:	021b      	lsls	r3, r3, #8
 8015dec:	932c      	str	r3, [sp, #176]	; 0xb0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015dee:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8015df2:	3301      	adds	r3, #1
 8015df4:	f8ba 2000 	ldrh.w	r2, [sl]
 8015df8:	1a9b      	subs	r3, r3, r2
 8015dfa:	b29a      	uxth	r2, r3
 8015dfc:	b21c      	sxth	r4, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015dfe:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8015e02:	3301      	adds	r3, #1
 8015e04:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8015e08:	1a5b      	subs	r3, r3, r1
 8015e0a:	b218      	sxth	r0, r3
 8015e0c:	900c      	str	r0, [sp, #48]	; 0x30
    for(y = 0; y < dest_h; y++) {
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	f340 8324 	ble.w	801645c <lv_draw_sw_transform+0x730>
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
 8015e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015e16:	fb0b f300 	mul.w	r3, fp, r0
 8015e1a:	0058      	lsls	r0, r3, #1
 8015e1c:	9017      	str	r0, [sp, #92]	; 0x5c
                    const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 8015e1e:	9808      	ldr	r0, [sp, #32]
 8015e20:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8015e24:	911b      	str	r1, [sp, #108]	; 0x6c
        cbuf += dest_w;
 8015e26:	0060      	lsls	r0, r4, #1
 8015e28:	900e      	str	r0, [sp, #56]	; 0x38
 8015e2a:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8015e2c:	1c43      	adds	r3, r0, #1
 8015e2e:	3a01      	subs	r2, #1
 8015e30:	b292      	uxth	r2, r2
 8015e32:	eb03 0b02 	add.w	fp, r3, r2
 8015e36:	2200      	movs	r2, #0
 8015e38:	9203      	str	r2, [sp, #12]
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8015e3a:	46a2      	mov	sl, r4
 8015e3c:	46d9      	mov	r9, fp
 8015e3e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015e42:	e2ab      	b.n	801639c <lv_draw_sw_transform+0x670>
        int32_t ys_step_256 = 0;
 8015e44:	2400      	movs	r4, #0
        int32_t xs_step_256 = 0;
 8015e46:	4626      	mov	r6, r4
 8015e48:	e2d3      	b.n	80163f2 <lv_draw_sw_transform+0x6c6>
    for(x = 0; x < x_end; x++) {
 8015e4a:	f1ba 0f00 	cmp.w	sl, #0
 8015e4e:	f340 8296 	ble.w	801637e <lv_draw_sw_transform+0x652>
 8015e52:	4633      	mov	r3, r6
 8015e54:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015e56:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 8015e58:	2500      	movs	r5, #0
 8015e5a:	4628      	mov	r0, r5
            abuf[x] = 0;
 8015e5c:	46ac      	mov	ip, r5
 8015e5e:	f8dd e010 	ldr.w	lr, [sp, #16]
 8015e62:	f8cd a010 	str.w	sl, [sp, #16]
 8015e66:	e089      	b.n	8015f7c <lv_draw_sw_transform+0x250>
    for(x = 0; x < x_end; x++) {
 8015e68:	f1ba 0f00 	cmp.w	sl, #0
 8015e6c:	f340 8287 	ble.w	801637e <lv_draw_sw_transform+0x652>
 8015e70:	4633      	mov	r3, r6
 8015e72:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015e74:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 8015e76:	2500      	movs	r5, #0
 8015e78:	4628      	mov	r0, r5
            abuf[x] = 0;
 8015e7a:	462f      	mov	r7, r5
 8015e7c:	f8cd a014 	str.w	sl, [sp, #20]
 8015e80:	e006      	b.n	8015e90 <lv_draw_sw_transform+0x164>
 8015e82:	700f      	strb	r7, [r1, #0]
    for(x = 0; x < x_end; x++) {
 8015e84:	4418      	add	r0, r3
 8015e86:	3101      	adds	r1, #1
 8015e88:	3602      	adds	r6, #2
 8015e8a:	4425      	add	r5, r4
 8015e8c:	4549      	cmp	r1, r9
 8015e8e:	d025      	beq.n	8015edc <lv_draw_sw_transform+0x1b0>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8015e90:	eb0b 2220 	add.w	r2, fp, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015e94:	1212      	asrs	r2, r2, #8
 8015e96:	d4f4      	bmi.n	8015e82 <lv_draw_sw_transform+0x156>
 8015e98:	4542      	cmp	r2, r8
 8015e9a:	daf2      	bge.n	8015e82 <lv_draw_sw_transform+0x156>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8015e9c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8015ea0:	eb0c 2c25 	add.w	ip, ip, r5, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015ea4:	ea5f 2c2c 	movs.w	ip, ip, asr #8
 8015ea8:	d4eb      	bmi.n	8015e82 <lv_draw_sw_transform+0x156>
 8015eaa:	f8dd a018 	ldr.w	sl, [sp, #24]
 8015eae:	45d4      	cmp	ip, sl
 8015eb0:	dae7      	bge.n	8015e82 <lv_draw_sw_transform+0x156>
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 8015eb2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8015eb6:	fb0a 220c 	mla	r2, sl, ip, r2
 8015eba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015ebe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015ec2:	eb0a 0c02 	add.w	ip, sl, r2
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 8015ec6:	f89c e001 	ldrb.w	lr, [ip, #1]
 8015eca:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8015ece:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8015ed2:	8032      	strh	r2, [r6, #0]
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8015ed4:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8015ed8:	700a      	strb	r2, [r1, #0]
 8015eda:	e7d3      	b.n	8015e84 <lv_draw_sw_transform+0x158>
 8015edc:	f8dd a014 	ldr.w	sl, [sp, #20]
 8015ee0:	e24d      	b.n	801637e <lv_draw_sw_transform+0x652>
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8015ee2:	f7f6 ff77 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
    lv_color_t ck = d->driver->color_chroma_key;
 8015ee6:	6803      	ldr	r3, [r0, #0]
 8015ee8:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
    lv_memset_ff(abuf, x_end);
 8015eea:	4651      	mov	r1, sl
 8015eec:	983d      	ldr	r0, [sp, #244]	; 0xf4
 8015eee:	f00c fb03 	bl	80224f8 <lv_memset_ff>
    for(x = 0; x < x_end; x++) {
 8015ef2:	f1ba 0f00 	cmp.w	sl, #0
 8015ef6:	f340 8242 	ble.w	801637e <lv_draw_sw_transform+0x652>
 8015efa:	4633      	mov	r3, r6
 8015efc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015efe:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 8015f00:	2700      	movs	r7, #0
 8015f02:	4638      	mov	r0, r7
            abuf[x] = 0x00;
 8015f04:	46be      	mov	lr, r7
 8015f06:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015f0a:	9505      	str	r5, [sp, #20]
 8015f0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015f10:	e00a      	b.n	8015f28 <lv_draw_sw_transform+0x1fc>
 8015f12:	f881 e000 	strb.w	lr, [r1]
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 8015f16:	f1ba 0f06 	cmp.w	sl, #6
 8015f1a:	d01d      	beq.n	8015f58 <lv_draw_sw_transform+0x22c>
    for(x = 0; x < x_end; x++) {
 8015f1c:	4418      	add	r0, r3
 8015f1e:	3101      	adds	r1, #1
 8015f20:	3602      	adds	r6, #2
 8015f22:	4427      	add	r7, r4
 8015f24:	4549      	cmp	r1, r9
 8015f26:	d01e      	beq.n	8015f66 <lv_draw_sw_transform+0x23a>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8015f28:	eb0b 2220 	add.w	r2, fp, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015f2c:	1212      	asrs	r2, r2, #8
 8015f2e:	d4f0      	bmi.n	8015f12 <lv_draw_sw_transform+0x1e6>
 8015f30:	4542      	cmp	r2, r8
 8015f32:	daee      	bge.n	8015f12 <lv_draw_sw_transform+0x1e6>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8015f34:	f8dd c010 	ldr.w	ip, [sp, #16]
 8015f38:	eb0c 2c27 	add.w	ip, ip, r7, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015f3c:	ea5f 2c2c 	movs.w	ip, ip, asr #8
 8015f40:	d4e7      	bmi.n	8015f12 <lv_draw_sw_transform+0x1e6>
 8015f42:	9d06      	ldr	r5, [sp, #24]
 8015f44:	45ac      	cmp	ip, r5
 8015f46:	dae4      	bge.n	8015f12 <lv_draw_sw_transform+0x1e6>
            src_tmp += ys_int * src_stride + xs_int;
 8015f48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015f4a:	fb05 2c0c 	mla	ip, r5, ip, r2
            cbuf[x] = *src_tmp;
 8015f4e:	9a08      	ldr	r2, [sp, #32]
 8015f50:	f832 201c 	ldrh.w	r2, [r2, ip, lsl #1]
 8015f54:	8032      	strh	r2, [r6, #0]
 8015f56:	e7de      	b.n	8015f16 <lv_draw_sw_transform+0x1ea>
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 8015f58:	8832      	ldrh	r2, [r6, #0]
 8015f5a:	9d05      	ldr	r5, [sp, #20]
 8015f5c:	42aa      	cmp	r2, r5
            abuf[x] = 0x00;
 8015f5e:	bf08      	it	eq
 8015f60:	f881 e000 	strbeq.w	lr, [r1]
 8015f64:	e7da      	b.n	8015f1c <lv_draw_sw_transform+0x1f0>
 8015f66:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8015f6a:	e208      	b.n	801637e <lv_draw_sw_transform+0x652>
            abuf[x] = 0;
 8015f6c:	f881 c000 	strb.w	ip, [r1]
    for(x = 0; x < x_end; x++) {
 8015f70:	4418      	add	r0, r3
 8015f72:	3101      	adds	r1, #1
 8015f74:	3602      	adds	r6, #2
 8015f76:	4425      	add	r5, r4
 8015f78:	4549      	cmp	r1, r9
 8015f7a:	d01b      	beq.n	8015fb4 <lv_draw_sw_transform+0x288>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8015f7c:	eb0b 2220 	add.w	r2, fp, r0, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015f80:	1212      	asrs	r2, r2, #8
 8015f82:	d4f3      	bmi.n	8015f6c <lv_draw_sw_transform+0x240>
 8015f84:	4542      	cmp	r2, r8
 8015f86:	daf1      	bge.n	8015f6c <lv_draw_sw_transform+0x240>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8015f88:	eb0e 2725 	add.w	r7, lr, r5, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8015f8c:	123f      	asrs	r7, r7, #8
 8015f8e:	d4ed      	bmi.n	8015f6c <lv_draw_sw_transform+0x240>
 8015f90:	f8dd a018 	ldr.w	sl, [sp, #24]
 8015f94:	4557      	cmp	r7, sl
 8015f96:	dae9      	bge.n	8015f6c <lv_draw_sw_transform+0x240>
            src_tmp += ys_int * src_stride + xs_int;
 8015f98:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8015f9c:	fb0a 2707 	mla	r7, sl, r7, r2
            cbuf[x] = *src_tmp;
 8015fa0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015fa4:	f83a 2017 	ldrh.w	r2, [sl, r7, lsl #1]
 8015fa8:	8032      	strh	r2, [r6, #0]
            abuf[x] = *a_tmp;
 8015faa:	4457      	add	r7, sl
 8015fac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015fae:	5cba      	ldrb	r2, [r7, r2]
 8015fb0:	700a      	strb	r2, [r1, #0]
 8015fb2:	e7dd      	b.n	8015f70 <lv_draw_sw_transform+0x244>
 8015fb4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015fb8:	e1e1      	b.n	801637e <lv_draw_sw_transform+0x652>
    switch(cf) {
 8015fba:	9b07      	ldr	r3, [sp, #28]
 8015fbc:	3b04      	subs	r3, #4
 8015fbe:	2b10      	cmp	r3, #16
 8015fc0:	f200 81dd 	bhi.w	801637e <lv_draw_sw_transform+0x652>
 8015fc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015fc8:	0011003c 	.word	0x0011003c
 8015fcc:	01db0018 	.word	0x01db0018
 8015fd0:	01db01db 	.word	0x01db01db
 8015fd4:	01db01db 	.word	0x01db01db
 8015fd8:	01db01db 	.word	0x01db01db
 8015fdc:	01db01db 	.word	0x01db01db
 8015fe0:	01db01db 	.word	0x01db01db
 8015fe4:	01db01db 	.word	0x01db01db
 8015fe8:	0035      	.short	0x0035
 8015fea:	2300      	movs	r3, #0
 8015fec:	9318      	str	r3, [sp, #96]	; 0x60
 8015fee:	2303      	movs	r3, #3
 8015ff0:	9310      	str	r3, [sp, #64]	; 0x40
 8015ff2:	2301      	movs	r3, #1
 8015ff4:	9319      	str	r3, [sp, #100]	; 0x64
 8015ff6:	e008      	b.n	801600a <lv_draw_sw_transform+0x2de>
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 8015ff8:	f7f6 feec 	bl	800cdd4 <_lv_refr_get_disp_refreshing>
                ck = d->driver->color_chroma_key;
 8015ffc:	6803      	ldr	r3, [r0, #0]
 8015ffe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8016000:	9318      	str	r3, [sp, #96]	; 0x60
                px_size = sizeof(lv_color_t);
 8016002:	2302      	movs	r3, #2
 8016004:	9310      	str	r3, [sp, #64]	; 0x40
                has_alpha = true;
 8016006:	2301      	movs	r3, #1
 8016008:	9319      	str	r3, [sp, #100]	; 0x64
    for(x = 0; x < x_end; x++) {
 801600a:	f1ba 0f00 	cmp.w	sl, #0
 801600e:	f340 81b6 	ble.w	801637e <lv_draw_sw_transform+0x652>
 8016012:	4631      	mov	r1, r6
 8016014:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8016016:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
 8016018:	9405      	str	r4, [sp, #20]
 801601a:	2700      	movs	r7, #0
 801601c:	46be      	mov	lr, r7
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801601e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8016022:	9214      	str	r2, [sp, #80]	; 0x50
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8016024:	9a06      	ldr	r2, [sp, #24]
 8016026:	3a01      	subs	r2, #1
 8016028:	9215      	str	r2, [sp, #84]	; 0x54
            y_next = -1;
 801602a:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 801602e:	468a      	mov	sl, r1
 8016030:	e019      	b.n	8016066 <lv_draw_sw_transform+0x33a>
    lv_color_t ck = {0};
 8016032:	2300      	movs	r3, #0
 8016034:	9318      	str	r3, [sp, #96]	; 0x60
            px_size = sizeof(lv_color_t);
 8016036:	2302      	movs	r3, #2
 8016038:	9310      	str	r3, [sp, #64]	; 0x40
            has_alpha = true;
 801603a:	2301      	movs	r3, #1
 801603c:	9319      	str	r3, [sp, #100]	; 0x64
            break;
 801603e:	e7e4      	b.n	801600a <lv_draw_sw_transform+0x2de>
    lv_color_t ck = {0};
 8016040:	2300      	movs	r3, #0
 8016042:	9318      	str	r3, [sp, #96]	; 0x60
            px_size = sizeof(lv_color_t);
 8016044:	2202      	movs	r2, #2
 8016046:	9210      	str	r2, [sp, #64]	; 0x40
            has_alpha = false;
 8016048:	9319      	str	r3, [sp, #100]	; 0x64
 801604a:	e7de      	b.n	801600a <lv_draw_sw_transform+0x2de>
 801604c:	66666667 	.word	0x66666667
            abuf[x] = 0x00;
 8016050:	f04f 0200 	mov.w	r2, #0
 8016054:	701a      	strb	r2, [r3, #0]
    for(x = 0; x < x_end; x++) {
 8016056:	44d6      	add	lr, sl
 8016058:	3301      	adds	r3, #1
 801605a:	3602      	adds	r6, #2
 801605c:	9a05      	ldr	r2, [sp, #20]
 801605e:	4417      	add	r7, r2
 8016060:	454b      	cmp	r3, r9
 8016062:	f000 818a 	beq.w	801637a <lv_draw_sw_transform+0x64e>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 8016066:	eb0b 212e 	add.w	r1, fp, lr, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 801606a:	120a      	asrs	r2, r1, #8
 801606c:	d4f0      	bmi.n	8016050 <lv_draw_sw_transform+0x324>
 801606e:	4542      	cmp	r2, r8
 8016070:	daee      	bge.n	8016050 <lv_draw_sw_transform+0x324>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 8016072:	9804      	ldr	r0, [sp, #16]
 8016074:	eb00 2427 	add.w	r4, r0, r7, asr #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 8016078:	1220      	asrs	r0, r4, #8
 801607a:	d4e9      	bmi.n	8016050 <lv_draw_sw_transform+0x324>
 801607c:	9d06      	ldr	r5, [sp, #24]
 801607e:	42a8      	cmp	r0, r5
 8016080:	dae6      	bge.n	8016050 <lv_draw_sw_transform+0x324>
        int32_t xs_fract = xs_ups & 0xFF;
 8016082:	fa5f fc81 	uxtb.w	ip, r1
        int32_t ys_fract = ys_ups & 0xFF;
 8016086:	b2e5      	uxtb	r5, r4
        if(xs_fract < 0x80) {
 8016088:	f011 0f80 	tst.w	r1, #128	; 0x80
 801608c:	d152      	bne.n	8016134 <lv_draw_sw_transform+0x408>
            xs_fract = (0x7F - xs_fract) * 2;
 801608e:	f1cc 0c7f 	rsb	ip, ip, #127	; 0x7f
 8016092:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8016096:	9111      	str	r1, [sp, #68]	; 0x44
            x_next = -1;
 8016098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801609c:	910a      	str	r1, [sp, #40]	; 0x28
        if(ys_fract < 0x80) {
 801609e:	f014 0f80 	tst.w	r4, #128	; 0x80
 80160a2:	d14f      	bne.n	8016144 <lv_draw_sw_transform+0x418>
            ys_fract = (0x7F - ys_fract) * 2;
 80160a4:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
 80160a8:	0069      	lsls	r1, r5, #1
 80160aa:	9112      	str	r1, [sp, #72]	; 0x48
            y_next = -1;
 80160ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80160b0:	910f      	str	r1, [sp, #60]	; 0x3c
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 80160b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80160b4:	fb05 f100 	mul.w	r1, r5, r0
 80160b8:	9113      	str	r1, [sp, #76]	; 0x4c
 80160ba:	1851      	adds	r1, r2, r1
 80160bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80160be:	fb05 f101 	mul.w	r1, r5, r1
 80160c2:	9c08      	ldr	r4, [sp, #32]
 80160c4:	440c      	add	r4, r1
 80160c6:	9409      	str	r4, [sp, #36]	; 0x24
        if(xs_int + x_next >= 0 &&
 80160c8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80160cc:	eb12 0c0c 	adds.w	ip, r2, ip
 80160d0:	f100 810a 	bmi.w	80162e8 <lv_draw_sw_transform+0x5bc>
 80160d4:	45e0      	cmp	r8, ip
 80160d6:	f340 8107 	ble.w	80162e8 <lv_draw_sw_transform+0x5bc>
           xs_int + x_next <= src_w - 1 &&
 80160da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80160dc:	1945      	adds	r5, r0, r5
 80160de:	951a      	str	r5, [sp, #104]	; 0x68
 80160e0:	f100 8102 	bmi.w	80162e8 <lv_draw_sw_transform+0x5bc>
           ys_int + y_next >= 0 &&
 80160e4:	9c06      	ldr	r4, [sp, #24]
 80160e6:	42ac      	cmp	r4, r5
 80160e8:	f340 80fe 	ble.w	80162e8 <lv_draw_sw_transform+0x5bc>
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 80160ec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80160ee:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80160f2:	fb0c f404 	mul.w	r4, ip, r4
 80160f6:	941c      	str	r4, [sp, #112]	; 0x70
 80160f8:	4620      	mov	r0, r4
 80160fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80160fc:	4420      	add	r0, r4
 80160fe:	901d      	str	r0, [sp, #116]	; 0x74
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 8016100:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016102:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016104:	fb05 f000 	mul.w	r0, r5, r0
 8016108:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801610a:	fb04 fc00 	mul.w	ip, r4, r0
 801610e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016110:	eb04 000c 	add.w	r0, r4, ip
 8016114:	900f      	str	r0, [sp, #60]	; 0x3c
            if(has_alpha) {
 8016116:	9819      	ldr	r0, [sp, #100]	; 0x64
 8016118:	2800      	cmp	r0, #0
 801611a:	d07f      	beq.n	801621c <lv_draw_sw_transform+0x4f0>
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 801611c:	9807      	ldr	r0, [sp, #28]
 801611e:	2805      	cmp	r0, #5
 8016120:	d016      	beq.n	8016150 <lv_draw_sw_transform+0x424>
                else if(cf == LV_IMG_CF_RGB565A8) {
 8016122:	9807      	ldr	r0, [sp, #28]
 8016124:	2814      	cmp	r0, #20
 8016126:	d055      	beq.n	80161d4 <lv_draw_sw_transform+0x4a8>
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 8016128:	9a07      	ldr	r2, [sp, #28]
 801612a:	2a06      	cmp	r2, #6
 801612c:	d061      	beq.n	80161f2 <lv_draw_sw_transform+0x4c6>
 801612e:	25ff      	movs	r5, #255	; 0xff
 8016130:	950a      	str	r5, [sp, #40]	; 0x28
 8016132:	e031      	b.n	8016198 <lv_draw_sw_transform+0x46c>
            xs_fract = (xs_fract - 0x80) * 2;
 8016134:	f1ac 0c80 	sub.w	ip, ip, #128	; 0x80
 8016138:	ea4f 014c 	mov.w	r1, ip, lsl #1
 801613c:	9111      	str	r1, [sp, #68]	; 0x44
            x_next = 1;
 801613e:	2101      	movs	r1, #1
 8016140:	910a      	str	r1, [sp, #40]	; 0x28
 8016142:	e7ac      	b.n	801609e <lv_draw_sw_transform+0x372>
            ys_fract = (ys_fract - 0x80) * 2;
 8016144:	3d80      	subs	r5, #128	; 0x80
 8016146:	0069      	lsls	r1, r5, #1
 8016148:	9112      	str	r1, [sp, #72]	; 0x48
            y_next = 1;
 801614a:	2101      	movs	r1, #1
 801614c:	910f      	str	r1, [sp, #60]	; 0x3c
 801614e:	e7b0      	b.n	80160b2 <lv_draw_sw_transform+0x386>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8016150:	78a2      	ldrb	r2, [r4, #2]
 8016152:	9213      	str	r2, [sp, #76]	; 0x4c
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8016154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016156:	7895      	ldrb	r5, [r2, #2]
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 8016158:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801615a:	7892      	ldrb	r2, [r2, #2]
 801615c:	920a      	str	r2, [sp, #40]	; 0x28
                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 801615e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016160:	42ac      	cmp	r4, r5
 8016162:	d008      	beq.n	8016176 <lv_draw_sw_transform+0x44a>
 8016164:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016166:	fb00 f205 	mul.w	r2, r0, r5
 801616a:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801616e:	fb04 2205 	mla	r2, r4, r5, r2
 8016172:	f3c2 2507 	ubfx	r5, r2, #8, #8
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 8016176:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016178:	980a      	ldr	r0, [sp, #40]	; 0x28
 801617a:	4284      	cmp	r4, r0
 801617c:	d00c      	beq.n	8016198 <lv_draw_sw_transform+0x46c>
 801617e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016180:	920a      	str	r2, [sp, #40]	; 0x28
 8016182:	fb02 f000 	mul.w	r0, r2, r0
 8016186:	4602      	mov	r2, r0
 8016188:	980a      	ldr	r0, [sp, #40]	; 0x28
 801618a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801618e:	fb04 2200 	mla	r2, r4, r0, r2
 8016192:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8016196:	920a      	str	r2, [sp, #40]	; 0x28
                abuf[x] = (a_ver + a_hor) >> 1;
 8016198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801619a:	442a      	add	r2, r5
 801619c:	f3c2 0247 	ubfx	r2, r2, #1, #8
 80161a0:	701a      	strb	r2, [r3, #0]
                if(abuf[x] == 0x00) continue;
 80161a2:	2a00      	cmp	r2, #0
 80161a4:	f43f af57 	beq.w	8016056 <lv_draw_sw_transform+0x32a>
                c_base.full = px_base[0] + (px_base[1] << 8);
 80161a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80161aa:	786a      	ldrb	r2, [r5, #1]
 80161ac:	9808      	ldr	r0, [sp, #32]
 80161ae:	5c41      	ldrb	r1, [r0, r1]
 80161b0:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 80161b4:	b289      	uxth	r1, r1
                c_ver.full = px_ver[0] + (px_ver[1] << 8);
 80161b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161b8:	7850      	ldrb	r0, [r2, #1]
 80161ba:	f815 200c 	ldrb.w	r2, [r5, ip]
 80161be:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 80161c2:	b292      	uxth	r2, r2
                c_hor.full = px_hor[0] + (px_hor[1] << 8);
 80161c4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80161c6:	7840      	ldrb	r0, [r0, #1]
 80161c8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80161ca:	5d2c      	ldrb	r4, [r5, r4]
 80161cc:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 80161d0:	b280      	uxth	r0, r0
 80161d2:	e02d      	b.n	8016230 <lv_draw_sw_transform+0x504>
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
 80161d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80161d6:	4415      	add	r5, r2
 80161d8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80161da:	5d60      	ldrb	r0, [r4, r5]
 80161dc:	9013      	str	r0, [sp, #76]	; 0x4c
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
 80161de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161e0:	4420      	add	r0, r4
 80161e2:	5d40      	ldrb	r0, [r0, r5]
 80161e4:	900a      	str	r0, [sp, #40]	; 0x28
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
 80161e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80161e8:	981a      	ldr	r0, [sp, #104]	; 0x68
 80161ea:	fb00 4505 	mla	r5, r0, r5, r4
 80161ee:	5cad      	ldrb	r5, [r5, r2]
 80161f0:	e7b5      	b.n	801615e <lv_draw_sw_transform+0x432>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 80161f2:	9a08      	ldr	r2, [sp, #32]
 80161f4:	5a52      	ldrh	r2, [r2, r1]
 80161f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80161f8:	4282      	cmp	r2, r0
 80161fa:	d00b      	beq.n	8016214 <lv_draw_sw_transform+0x4e8>
 80161fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80161fe:	f834 200c 	ldrh.w	r2, [r4, ip]
 8016202:	4282      	cmp	r2, r0
 8016204:	d006      	beq.n	8016214 <lv_draw_sw_transform+0x4e8>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 8016206:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016208:	5aa2      	ldrh	r2, [r4, r2]
 801620a:	4282      	cmp	r2, r0
 801620c:	d002      	beq.n	8016214 <lv_draw_sw_transform+0x4e8>
 801620e:	25ff      	movs	r5, #255	; 0xff
 8016210:	950a      	str	r5, [sp, #40]	; 0x28
 8016212:	e7c1      	b.n	8016198 <lv_draw_sw_transform+0x46c>
                        abuf[x] = 0x00;
 8016214:	f04f 0200 	mov.w	r2, #0
 8016218:	701a      	strb	r2, [r3, #0]
                        continue;
 801621a:	e71c      	b.n	8016056 <lv_draw_sw_transform+0x32a>
                c_base = *((const lv_color_t *) px_base);
 801621c:	9a08      	ldr	r2, [sp, #32]
 801621e:	5a51      	ldrh	r1, [r2, r1]
                c_hor = *((const lv_color_t *) px_hor);
 8016220:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016222:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016224:	5aa0      	ldrh	r0, [r4, r2]
                c_ver = *((const lv_color_t *) px_ver);
 8016226:	f834 200c 	ldrh.w	r2, [r4, ip]
                abuf[x] = 0xff;
 801622a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801622e:	701c      	strb	r4, [r3, #0]
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 8016230:	428a      	cmp	r2, r1
 8016232:	d055      	beq.n	80162e0 <lv_draw_sw_transform+0x5b4>
 8016234:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8016238:	f021 4178 	bic.w	r1, r1, #4160749568	; 0xf8000000
 801623c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8016240:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8016244:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8016248:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 801624c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8016250:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8016254:	1a52      	subs	r2, r2, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8016256:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801625a:	3404      	adds	r4, #4
 801625c:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801625e:	fb04 f202 	mul.w	r2, r4, r2
 8016262:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 8016266:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 801626a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 801626e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8016272:	ea40 4000 	orr.w	r0, r0, r0, lsl #16
 8016276:	f020 4078 	bic.w	r0, r0, #4160749568	; 0xf8000000
 801627a:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 801627e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8016282:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8016284:	f89d 4044 	ldrb.w	r4, [sp, #68]	; 0x44
 8016288:	3404      	adds	r4, #4
 801628a:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801628c:	fb04 f000 	mul.w	r0, r4, r0
 8016290:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 8016294:	f021 4178 	bic.w	r1, r1, #4160749568	; 0xf8000000
 8016298:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 801629c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
    ret.full = (uint16_t)((result >> 16) | result);
 80162a0:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80162a4:	b290      	uxth	r0, r2
 80162a6:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80162aa:	486e      	ldr	r0, [pc, #440]	; (8016464 <lv_draw_sw_transform+0x738>)
 80162ac:	4010      	ands	r0, r2
    ret.full = (uint16_t)((result >> 16) | result);
 80162ae:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80162b2:	b28a      	uxth	r2, r1
 80162b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80162b8:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80162bc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80162c0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80162c4:	1a12      	subs	r2, r2, r0
 80162c6:	f3c2 025a 	ubfx	r2, r2, #1, #27
 80162ca:	4402      	add	r2, r0
 80162cc:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80162d0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80162d4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
    ret.full = (uint16_t)((result >> 16) | result);
 80162d8:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 80162dc:	8032      	strh	r2, [r6, #0]
 80162de:	e6ba      	b.n	8016056 <lv_draw_sw_transform+0x32a>
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 80162e0:	4281      	cmp	r1, r0
 80162e2:	d1a7      	bne.n	8016234 <lv_draw_sw_transform+0x508>
                cbuf[x] = c_base;
 80162e4:	8031      	strh	r1, [r6, #0]
 80162e6:	e6b6      	b.n	8016056 <lv_draw_sw_transform+0x32a>
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 80162e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80162ea:	7865      	ldrb	r5, [r4, #1]
 80162ec:	9c08      	ldr	r4, [sp, #32]
 80162ee:	5c61      	ldrb	r1, [r4, r1]
 80162f0:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80162f4:	b289      	uxth	r1, r1
 80162f6:	8031      	strh	r1, [r6, #0]
            switch(cf) {
 80162f8:	9d07      	ldr	r5, [sp, #28]
 80162fa:	2d06      	cmp	r5, #6
 80162fc:	d019      	beq.n	8016332 <lv_draw_sw_transform+0x606>
 80162fe:	2d14      	cmp	r5, #20
 8016300:	d01e      	beq.n	8016340 <lv_draw_sw_transform+0x614>
 8016302:	2d05      	cmp	r5, #5
 8016304:	d012      	beq.n	801632c <lv_draw_sw_transform+0x600>
 8016306:	21ff      	movs	r1, #255	; 0xff
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 8016308:	b912      	cbnz	r2, 8016310 <lv_draw_sw_transform+0x5e4>
 801630a:	f1bc 0f00 	cmp.w	ip, #0
 801630e:	db21      	blt.n	8016354 <lv_draw_sw_transform+0x628>
 8016310:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016312:	42a2      	cmp	r2, r4
 8016314:	d01b      	beq.n	801634e <lv_draw_sw_transform+0x622>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8016316:	b910      	cbnz	r0, 801631e <lv_draw_sw_transform+0x5f2>
 8016318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801631a:	2a00      	cmp	r2, #0
 801631c:	db25      	blt.n	801636a <lv_draw_sw_transform+0x63e>
 801631e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016320:	4290      	cmp	r0, r2
 8016322:	d01f      	beq.n	8016364 <lv_draw_sw_transform+0x638>
                abuf[x] = 0x00;
 8016324:	f04f 0200 	mov.w	r2, #0
 8016328:	701a      	strb	r2, [r3, #0]
 801632a:	e694      	b.n	8016056 <lv_draw_sw_transform+0x32a>
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 801632c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801632e:	7889      	ldrb	r1, [r1, #2]
                    break;
 8016330:	e7ea      	b.n	8016308 <lv_draw_sw_transform+0x5dc>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 8016332:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8016334:	1a61      	subs	r1, r4, r1
 8016336:	bf18      	it	ne
 8016338:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 801633c:	b2c9      	uxtb	r1, r1
 801633e:	e7e3      	b.n	8016308 <lv_draw_sw_transform+0x5dc>
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
 8016340:	9908      	ldr	r1, [sp, #32]
 8016342:	4411      	add	r1, r2
 8016344:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016346:	4421      	add	r1, r4
 8016348:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801634a:	5d09      	ldrb	r1, [r1, r4]
                    break;
 801634c:	e7dc      	b.n	8016308 <lv_draw_sw_transform+0x5dc>
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 801634e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016350:	2a00      	cmp	r2, #0
 8016352:	dde0      	ble.n	8016316 <lv_draw_sw_transform+0x5ea>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 8016354:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016356:	f1c2 0cff 	rsb	ip, r2, #255	; 0xff
 801635a:	fb01 f10c 	mul.w	r1, r1, ip
 801635e:	1209      	asrs	r1, r1, #8
 8016360:	7019      	strb	r1, [r3, #0]
 8016362:	e678      	b.n	8016056 <lv_draw_sw_transform+0x32a>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 8016364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016366:	2a00      	cmp	r2, #0
 8016368:	dddc      	ble.n	8016324 <lv_draw_sw_transform+0x5f8>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 801636a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801636c:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
 8016370:	fb05 f101 	mul.w	r1, r5, r1
 8016374:	1209      	asrs	r1, r1, #8
 8016376:	7019      	strb	r1, [r3, #0]
 8016378:	e66d      	b.n	8016056 <lv_draw_sw_transform+0x32a>
 801637a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
        cbuf += dest_w;
 801637e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8016380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016382:	4413      	add	r3, r2
 8016384:	933c      	str	r3, [sp, #240]	; 0xf0
        abuf += dest_w;
 8016386:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8016388:	4453      	add	r3, sl
 801638a:	933d      	str	r3, [sp, #244]	; 0xf4
    for(y = 0; y < dest_h; y++) {
 801638c:	9b03      	ldr	r3, [sp, #12]
 801638e:	3301      	adds	r3, #1
 8016390:	9303      	str	r3, [sp, #12]
 8016392:	44d1      	add	r9, sl
 8016394:	b21b      	sxth	r3, r3
 8016396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016398:	429a      	cmp	r2, r3
 801639a:	dd5f      	ble.n	801645c <lv_draw_sw_transform+0x730>
        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 801639c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801639e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80163a2:	ab20      	add	r3, sp, #128	; 0x80
 80163a4:	9300      	str	r3, [sp, #0]
 80163a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80163a8:	9d03      	ldr	r5, [sp, #12]
 80163aa:	442a      	add	r2, r5
 80163ac:	f9b4 1000 	ldrsh.w	r1, [r4]
 80163b0:	a823      	add	r0, sp, #140	; 0x8c
 80163b2:	f7ff fc59 	bl	8015c68 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 80163b6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80163ba:	ab22      	add	r3, sp, #136	; 0x88
 80163bc:	9300      	str	r3, [sp, #0]
 80163be:	ab21      	add	r3, sp, #132	; 0x84
 80163c0:	442a      	add	r2, r5
 80163c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80163c6:	a823      	add	r0, sp, #140	; 0x8c
 80163c8:	f7ff fc4e 	bl	8015c68 <transform_point_upscaled>
        int32_t xs_diff = xs2_ups - xs1_ups;
 80163cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
        int32_t ys_diff = ys2_ups - ys1_ups;
 80163d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80163d2:	9920      	ldr	r1, [sp, #128]	; 0x80
        if(dest_w > 1) {
 80163d4:	f1ba 0f01 	cmp.w	sl, #1
 80163d8:	f77f ad34 	ble.w	8015e44 <lv_draw_sw_transform+0x118>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 80163dc:	f10a 34ff 	add.w	r4, sl, #4294967295	; 0xffffffff
        int32_t xs_diff = xs2_ups - xs1_ups;
 80163e0:	1a1b      	subs	r3, r3, r0
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 80163e2:	021b      	lsls	r3, r3, #8
 80163e4:	4625      	mov	r5, r4
 80163e6:	fb93 f6f4 	sdiv	r6, r3, r4
        int32_t ys_diff = ys2_ups - ys1_ups;
 80163ea:	1a54      	subs	r4, r2, r1
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 80163ec:	0224      	lsls	r4, r4, #8
 80163ee:	fb94 f4f5 	sdiv	r4, r4, r5
        int32_t xs_ups = xs1_ups + 0x80;
 80163f2:	f100 0b80 	add.w	fp, r0, #128	; 0x80
        int32_t ys_ups = ys1_ups + 0x80;
 80163f6:	f101 0380 	add.w	r3, r1, #128	; 0x80
 80163fa:	9304      	str	r3, [sp, #16]
        if(draw_dsc->antialias == 0) {
 80163fc:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80163fe:	7d1b      	ldrb	r3, [r3, #20]
 8016400:	f013 0f01 	tst.w	r3, #1
 8016404:	f47f add9 	bne.w	8015fba <lv_draw_sw_transform+0x28e>
            switch(cf) {
 8016408:	9b07      	ldr	r3, [sp, #28]
 801640a:	3b04      	subs	r3, #4
 801640c:	2b10      	cmp	r3, #16
 801640e:	d8b6      	bhi.n	801637e <lv_draw_sw_transform+0x652>
 8016410:	a201      	add	r2, pc, #4	; (adr r2, 8016418 <lv_draw_sw_transform+0x6ec>)
 8016412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016416:	bf00      	nop
 8016418:	08015ee3 	.word	0x08015ee3
 801641c:	08015e69 	.word	0x08015e69
 8016420:	08015ee3 	.word	0x08015ee3
 8016424:	0801637f 	.word	0x0801637f
 8016428:	0801637f 	.word	0x0801637f
 801642c:	0801637f 	.word	0x0801637f
 8016430:	0801637f 	.word	0x0801637f
 8016434:	0801637f 	.word	0x0801637f
 8016438:	0801637f 	.word	0x0801637f
 801643c:	0801637f 	.word	0x0801637f
 8016440:	0801637f 	.word	0x0801637f
 8016444:	0801637f 	.word	0x0801637f
 8016448:	0801637f 	.word	0x0801637f
 801644c:	0801637f 	.word	0x0801637f
 8016450:	0801637f 	.word	0x0801637f
 8016454:	0801637f 	.word	0x0801637f
 8016458:	08015e4b 	.word	0x08015e4b
}
 801645c:	b02f      	add	sp, #188	; 0xbc
 801645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016462:	bf00      	nop
 8016464:	07e0f81f 	.word	0x07e0f81f

08016468 <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8016468:	8883      	ldrh	r3, [r0, #4]
 801646a:	3301      	adds	r3, #1
 801646c:	8800      	ldrh	r0, [r0, #0]
 801646e:	1a18      	subs	r0, r3, r0
}
 8016470:	b200      	sxth	r0, r0
 8016472:	4770      	bx	lr

08016474 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8016474:	88c3      	ldrh	r3, [r0, #6]
 8016476:	3301      	adds	r3, #1
 8016478:	8840      	ldrh	r0, [r0, #2]
 801647a:	1a18      	subs	r0, r3, r0
}
 801647c:	b200      	sxth	r0, r0
 801647e:	4770      	bx	lr

08016480 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
 8016480:	b410      	push	{r4}
 8016482:	9c01      	ldr	r4, [sp, #4]
    if(item_cnt <= 1) {
 8016484:	2b01      	cmp	r3, #1
 8016486:	dd07      	ble.n	8016498 <place_content+0x18>
            default:
                break;
        }
    }

    switch(place) {
 8016488:	3801      	subs	r0, #1
 801648a:	2804      	cmp	r0, #4
 801648c:	d843      	bhi.n	8016516 <place_content+0x96>
 801648e:	e8df f000 	tbb	[pc, r0]
 8016492:	0814      	.short	0x0814
 8016494:	2536      	.short	0x2536
 8016496:	1c          	.byte	0x1c
 8016497:	00          	.byte	0x00
        switch(place) {
 8016498:	f1a0 0c03 	sub.w	ip, r0, #3
 801649c:	f1bc 0f02 	cmp.w	ip, #2
 80164a0:	d8f2      	bhi.n	8016488 <place_content+0x8>
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 80164a2:	2300      	movs	r3, #0
 80164a4:	9802      	ldr	r0, [sp, #8]
 80164a6:	8003      	strh	r3, [r0, #0]
            *start_pos += (max_size - content_size) / 2;
 80164a8:	1a89      	subs	r1, r1, r2
 80164aa:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80164ae:	8823      	ldrh	r3, [r4, #0]
 80164b0:	eb03 0161 	add.w	r1, r3, r1, asr #1
 80164b4:	8021      	strh	r1, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 80164b6:	bc10      	pop	{r4}
 80164b8:	4770      	bx	lr
            *gap = 0;
 80164ba:	2300      	movs	r3, #0
 80164bc:	9802      	ldr	r0, [sp, #8]
 80164be:	8003      	strh	r3, [r0, #0]
            *start_pos += max_size - content_size;
 80164c0:	1a89      	subs	r1, r1, r2
 80164c2:	8823      	ldrh	r3, [r4, #0]
 80164c4:	4419      	add	r1, r3
 80164c6:	8021      	strh	r1, [r4, #0]
            break;
 80164c8:	e7f5      	b.n	80164b6 <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 80164ca:	1a89      	subs	r1, r1, r2
 80164cc:	b209      	sxth	r1, r1
 80164ce:	3b01      	subs	r3, #1
 80164d0:	b21b      	sxth	r3, r3
 80164d2:	fb91 f1f3 	sdiv	r1, r1, r3
 80164d6:	9b02      	ldr	r3, [sp, #8]
 80164d8:	8019      	strh	r1, [r3, #0]
            break;
 80164da:	e7ec      	b.n	80164b6 <place_content+0x36>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 80164dc:	1a89      	subs	r1, r1, r2
 80164de:	b209      	sxth	r1, r1
 80164e0:	fb91 f3f3 	sdiv	r3, r1, r3
 80164e4:	9a02      	ldr	r2, [sp, #8]
 80164e6:	8812      	ldrh	r2, [r2, #0]
 80164e8:	4413      	add	r3, r2
 80164ea:	b21b      	sxth	r3, r3
 80164ec:	9a02      	ldr	r2, [sp, #8]
 80164ee:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap / 2;
 80164f0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80164f4:	8822      	ldrh	r2, [r4, #0]
 80164f6:	eb02 0363 	add.w	r3, r2, r3, asr #1
 80164fa:	8023      	strh	r3, [r4, #0]
            break;
 80164fc:	e7db      	b.n	80164b6 <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 80164fe:	1a89      	subs	r1, r1, r2
 8016500:	b209      	sxth	r1, r1
 8016502:	3301      	adds	r3, #1
 8016504:	b21b      	sxth	r3, r3
 8016506:	fb91 f1f3 	sdiv	r1, r1, r3
 801650a:	9b02      	ldr	r3, [sp, #8]
 801650c:	8019      	strh	r1, [r3, #0]
            *start_pos += *gap;
 801650e:	8823      	ldrh	r3, [r4, #0]
 8016510:	4419      	add	r1, r3
 8016512:	8021      	strh	r1, [r4, #0]
            break;
 8016514:	e7cf      	b.n	80164b6 <place_content+0x36>
            *gap = 0;
 8016516:	2300      	movs	r3, #0
 8016518:	9a02      	ldr	r2, [sp, #8]
 801651a:	8013      	strh	r3, [r2, #0]
}
 801651c:	e7cb      	b.n	80164b6 <place_content+0x36>

0801651e <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 801651e:	b149      	cbz	r1, 8016534 <get_next_item+0x16>
        (*item_id)--;
 8016520:	6813      	ldr	r3, [r2, #0]
 8016522:	3b01      	subs	r3, #1
 8016524:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8016526:	2b00      	cmp	r3, #0
 8016528:	db0f      	blt.n	801654a <get_next_item+0x2c>
 801652a:	6882      	ldr	r2, [r0, #8]
 801652c:	6812      	ldr	r2, [r2, #0]
 801652e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016532:	4770      	bx	lr
        else return NULL;
    }
    else {
        (*item_id)++;
 8016534:	6813      	ldr	r3, [r2, #0]
 8016536:	3301      	adds	r3, #1
 8016538:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 801653a:	6882      	ldr	r2, [r0, #8]
 801653c:	6851      	ldr	r1, [r2, #4]
 801653e:	428b      	cmp	r3, r1
 8016540:	da05      	bge.n	801654e <get_next_item+0x30>
 8016542:	6812      	ldr	r2, [r2, #0]
 8016544:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016548:	4770      	bx	lr
        else return NULL;
 801654a:	2000      	movs	r0, #0
 801654c:	4770      	bx	lr
        else return NULL;
 801654e:	2000      	movs	r0, #0
    }
}
 8016550:	4770      	bx	lr
	...

08016554 <find_track_end>:
{
 8016554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016558:	b089      	sub	sp, #36	; 0x24
 801655a:	4681      	mov	r9, r0
 801655c:	460e      	mov	r6, r1
 801655e:	4690      	mov	r8, r2
 8016560:	9304      	str	r3, [sp, #16]
 8016562:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8016566:	9301      	str	r3, [sp, #4]
 8016568:	9d13      	ldr	r5, [sp, #76]	; 0x4c
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801656a:	2201      	movs	r2, #1
 801656c:	2100      	movs	r1, #0
 801656e:	f7f4 fc9d 	bl	800aeac <lv_obj_get_style_prop>
 8016572:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8016574:	2204      	movs	r2, #4
 8016576:	2100      	movs	r1, #0
 8016578:	4648      	mov	r0, r9
 801657a:	f7f4 fc97 	bl	800aeac <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 801657e:	78f3      	ldrb	r3, [r6, #3]
 8016580:	f013 0f02 	tst.w	r3, #2
 8016584:	d015      	beq.n	80165b2 <find_track_end+0x5e>
 8016586:	f013 0f01 	tst.w	r3, #1
 801658a:	d009      	beq.n	80165a0 <find_track_end+0x4c>
 801658c:	b224      	sxth	r4, r4
 801658e:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8016592:	429c      	cmp	r4, r3
 8016594:	d009      	beq.n	80165aa <find_track_end+0x56>
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8016596:	4b85      	ldr	r3, [pc, #532]	; (80167ac <find_track_end+0x258>)
 8016598:	9305      	str	r3, [sp, #20]
 801659a:	4b85      	ldr	r3, [pc, #532]	; (80167b0 <find_track_end+0x25c>)
 801659c:	9302      	str	r3, [sp, #8]
 801659e:	e010      	b.n	80165c2 <find_track_end+0x6e>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 80165a0:	b200      	sxth	r0, r0
 80165a2:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80165a6:	4298      	cmp	r0, r3
 80165a8:	d107      	bne.n	80165ba <find_track_end+0x66>
        f->wrap = false;
 80165aa:	78f3      	ldrb	r3, [r6, #3]
 80165ac:	f36f 0341 	bfc	r3, #1, #1
 80165b0:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 80165b2:	78f3      	ldrb	r3, [r6, #3]
 80165b4:	f013 0f01 	tst.w	r3, #1
 80165b8:	d1ed      	bne.n	8016596 <find_track_end+0x42>
{
 80165ba:	4b7d      	ldr	r3, [pc, #500]	; (80167b0 <find_track_end+0x25c>)
 80165bc:	9305      	str	r3, [sp, #20]
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 80165be:	4b7b      	ldr	r3, [pc, #492]	; (80167ac <find_track_end+0x258>)
 80165c0:	9302      	str	r3, [sp, #8]
    t->track_main_size = 0;
 80165c2:	2300      	movs	r3, #0
 80165c4:	806b      	strh	r3, [r5, #2]
    t->track_fix_main_size = 0;
 80165c6:	80ab      	strh	r3, [r5, #4]
    t->grow_item_cnt = 0;
 80165c8:	612b      	str	r3, [r5, #16]
    t->track_cross_size = 0;
 80165ca:	802b      	strh	r3, [r5, #0]
    t->item_cnt = 0;
 80165cc:	60ab      	str	r3, [r5, #8]
    t->grow_dsc = NULL;
 80165ce:	60eb      	str	r3, [r5, #12]
    int32_t item_id = item_start_id;
 80165d0:	f8cd 801c 	str.w	r8, [sp, #28]
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 80165d4:	4641      	mov	r1, r8
 80165d6:	4648      	mov	r0, r9
 80165d8:	f7f5 fbae 	bl	800bd38 <lv_obj_get_child>
    while(item) {
 80165dc:	4604      	mov	r4, r0
 80165de:	b320      	cbz	r0, 801662a <find_track_end+0xd6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 80165e0:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 80165e4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80167b4 <find_track_end+0x260>
 80165e8:	e016      	b.n	8016618 <find_track_end+0xc4>
 80165ea:	4651      	mov	r1, sl
 80165ec:	4620      	mov	r0, r4
 80165ee:	f7f0 fd58 	bl	80070a2 <lv_obj_has_flag_any>
 80165f2:	2800      	cmp	r0, #0
 80165f4:	d030      	beq.n	8016658 <find_track_end+0x104>
        item_id += f->rev ? -1 : +1;
 80165f6:	78f3      	ldrb	r3, [r6, #3]
 80165f8:	f013 0f04 	tst.w	r3, #4
 80165fc:	bf14      	ite	ne
 80165fe:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8016602:	2101      	moveq	r1, #1
 8016604:	9b07      	ldr	r3, [sp, #28]
 8016606:	4419      	add	r1, r3
 8016608:	9107      	str	r1, [sp, #28]
        if(item_id < 0) break;
 801660a:	2900      	cmp	r1, #0
 801660c:	db0d      	blt.n	801662a <find_track_end+0xd6>
        item = lv_obj_get_child(cont, item_id);
 801660e:	4648      	mov	r0, r9
 8016610:	f7f5 fb92 	bl	800bd38 <lv_obj_get_child>
    while(item) {
 8016614:	4604      	mov	r4, r0
 8016616:	b140      	cbz	r0, 801662a <find_track_end+0xd6>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 8016618:	9b07      	ldr	r3, [sp, #28]
 801661a:	4543      	cmp	r3, r8
 801661c:	d0e5      	beq.n	80165ea <find_track_end+0x96>
 801661e:	4659      	mov	r1, fp
 8016620:	4620      	mov	r0, r4
 8016622:	f7f0 fd37 	bl	8007094 <lv_obj_has_flag>
 8016626:	2800      	cmp	r0, #0
 8016628:	d0df      	beq.n	80165ea <find_track_end+0x96>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 801662a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801662e:	2b00      	cmp	r3, #0
 8016630:	dd02      	ble.n	8016638 <find_track_end+0xe4>
 8016632:	9a01      	ldr	r2, [sp, #4]
 8016634:	1a9b      	subs	r3, r3, r2
 8016636:	80ab      	strh	r3, [r5, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 8016638:	692b      	ldr	r3, [r5, #16]
 801663a:	b913      	cbnz	r3, 8016642 <find_track_end+0xee>
 801663c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016640:	9304      	str	r3, [sp, #16]
 8016642:	9b04      	ldr	r3, [sp, #16]
 8016644:	806b      	strh	r3, [r5, #2]
    if(item && item_id == item_start_id) {
 8016646:	b11c      	cbz	r4, 8016650 <find_track_end+0xfc>
 8016648:	9b07      	ldr	r3, [sp, #28]
 801664a:	4543      	cmp	r3, r8
 801664c:	f000 8094 	beq.w	8016778 <find_track_end+0x224>
    return item_id;
 8016650:	9807      	ldr	r0, [sp, #28]
}
 8016652:	b009      	add	sp, #36	; 0x24
 8016654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8016658:	4b57      	ldr	r3, [pc, #348]	; (80167b8 <find_track_end+0x264>)
 801665a:	881a      	ldrh	r2, [r3, #0]
 801665c:	2100      	movs	r1, #0
 801665e:	4620      	mov	r0, r4
 8016660:	f7f4 fc24 	bl	800aeac <lv_obj_get_style_prop>
 8016664:	4607      	mov	r7, r0
            if(grow_value) {
 8016666:	f010 0fff 	tst.w	r0, #255	; 0xff
 801666a:	d063      	beq.n	8016734 <find_track_end+0x1e0>
                t->grow_item_cnt++;
 801666c:	6928      	ldr	r0, [r5, #16]
 801666e:	3001      	adds	r0, #1
 8016670:	6128      	str	r0, [r5, #16]
                t->track_fix_main_size += item_gap;
 8016672:	88ab      	ldrh	r3, [r5, #4]
 8016674:	9a01      	ldr	r2, [sp, #4]
 8016676:	4413      	add	r3, r2
 8016678:	80ab      	strh	r3, [r5, #4]
                if(t->grow_dsc_calc) {
 801667a:	7d2b      	ldrb	r3, [r5, #20]
 801667c:	f013 0f01 	tst.w	r3, #1
 8016680:	d06b      	beq.n	801675a <find_track_end+0x206>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 8016682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016686:	0080      	lsls	r0, r0, #2
 8016688:	f00b fca2 	bl	8021fd0 <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 801668c:	9003      	str	r0, [sp, #12]
 801668e:	2800      	cmp	r0, #0
 8016690:	d04f      	beq.n	8016732 <find_track_end+0x1de>
                    if(t->grow_dsc) {
 8016692:	68e9      	ldr	r1, [r5, #12]
 8016694:	b151      	cbz	r1, 80166ac <find_track_end+0x158>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 8016696:	692b      	ldr	r3, [r5, #16]
 8016698:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801669c:	009a      	lsls	r2, r3, #2
 801669e:	3a14      	subs	r2, #20
 80166a0:	9803      	ldr	r0, [sp, #12]
 80166a2:	f00b fd2d 	bl	8022100 <lv_memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 80166a6:	68e8      	ldr	r0, [r5, #12]
 80166a8:	f00b fcf4 	bl	8022094 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 80166ac:	692b      	ldr	r3, [r5, #16]
 80166ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80166b2:	9a03      	ldr	r2, [sp, #12]
 80166b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80166b8:	f843 4c14 	str.w	r4, [r3, #-20]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 80166bc:	78f3      	ldrb	r3, [r6, #3]
 80166be:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 80166c2:	bf14      	ite	ne
 80166c4:	2202      	movne	r2, #2
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80166c6:	2205      	moveq	r2, #5
 80166c8:	2100      	movs	r1, #0
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7f4 fbee 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80166d0:	b200      	sxth	r0, r0
 80166d2:	692b      	ldr	r3, [r5, #16]
 80166d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80166d8:	9a03      	ldr	r2, [sp, #12]
 80166da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80166de:	f823 0c10 	strh.w	r0, [r3, #-16]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 80166e2:	78f3      	ldrb	r3, [r6, #3]
 80166e4:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 80166e8:	bf14      	ite	ne
 80166ea:	2203      	movne	r2, #3
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80166ec:	2206      	moveq	r2, #6
 80166ee:	2100      	movs	r1, #0
 80166f0:	4620      	mov	r0, r4
 80166f2:	f7f4 fbdb 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80166f6:	b200      	sxth	r0, r0
 80166f8:	692b      	ldr	r3, [r5, #16]
 80166fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80166fe:	9903      	ldr	r1, [sp, #12]
 8016700:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016704:	f823 0c0e 	strh.w	r0, [r3, #-14]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 8016708:	692b      	ldr	r3, [r5, #16]
 801670a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801670e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016712:	b2ff      	uxtb	r7, r7
 8016714:	f843 7c08 	str.w	r7, [r3, #-8]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8016718:	692b      	ldr	r3, [r5, #16]
 801671a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801671e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016722:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8016726:	f36f 0200 	bfc	r2, #0, #1
 801672a:	f803 2c04 	strb.w	r2, [r3, #-4]
                    t->grow_dsc = new_dsc;
 801672e:	60e9      	str	r1, [r5, #12]
 8016730:	e013      	b.n	801675a <find_track_end+0x206>
                    LV_ASSERT_MALLOC(new_dsc);
 8016732:	e7fe      	b.n	8016732 <find_track_end+0x1de>
                lv_coord_t item_size = get_main_size(item);
 8016734:	4620      	mov	r0, r4
 8016736:	9b05      	ldr	r3, [sp, #20]
 8016738:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 801673a:	78f3      	ldrb	r3, [r6, #3]
 801673c:	f013 0f02 	tst.w	r3, #2
 8016740:	d006      	beq.n	8016750 <find_track_end+0x1fc>
 8016742:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016746:	4403      	add	r3, r0
 8016748:	9a04      	ldr	r2, [sp, #16]
 801674a:	4293      	cmp	r3, r2
 801674c:	f73f af6d 	bgt.w	801662a <find_track_end+0xd6>
                t->track_fix_main_size += item_size + item_gap;
 8016750:	88ab      	ldrh	r3, [r5, #4]
 8016752:	9a01      	ldr	r2, [sp, #4]
 8016754:	4413      	add	r3, r2
 8016756:	4418      	add	r0, r3
 8016758:	80a8      	strh	r0, [r5, #4]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 801675a:	4620      	mov	r0, r4
 801675c:	9f02      	ldr	r7, [sp, #8]
 801675e:	47b8      	blx	r7
 8016760:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016764:	4298      	cmp	r0, r3
 8016766:	dd02      	ble.n	801676e <find_track_end+0x21a>
 8016768:	4620      	mov	r0, r4
 801676a:	47b8      	blx	r7
 801676c:	4603      	mov	r3, r0
 801676e:	802b      	strh	r3, [r5, #0]
            t->item_cnt++;
 8016770:	68ab      	ldr	r3, [r5, #8]
 8016772:	3301      	adds	r3, #1
 8016774:	60ab      	str	r3, [r5, #8]
 8016776:	e73e      	b.n	80165f6 <find_track_end+0xa2>
        item = cont->spec_attr->children[item_id];
 8016778:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 8016782:	78f1      	ldrb	r1, [r6, #3]
 8016784:	aa07      	add	r2, sp, #28
 8016786:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801678a:	4648      	mov	r0, r9
 801678c:	f7ff fec7 	bl	801651e <get_next_item>
        if(item) {
 8016790:	2c00      	cmp	r4, #0
 8016792:	f43f af5d 	beq.w	8016650 <find_track_end+0xfc>
            t->track_cross_size = get_cross_size(item);
 8016796:	4620      	mov	r0, r4
 8016798:	9b02      	ldr	r3, [sp, #8]
 801679a:	4798      	blx	r3
 801679c:	8028      	strh	r0, [r5, #0]
            t->track_main_size = get_main_size(item);
 801679e:	4620      	mov	r0, r4
 80167a0:	9b05      	ldr	r3, [sp, #20]
 80167a2:	4798      	blx	r3
 80167a4:	8068      	strh	r0, [r5, #2]
            t->item_cnt = 1;
 80167a6:	2301      	movs	r3, #1
 80167a8:	60ab      	str	r3, [r5, #8]
 80167aa:	e751      	b.n	8016650 <find_track_end+0xfc>
 80167ac:	080081af 	.word	0x080081af
 80167b0:	080081bb 	.word	0x080081bb
 80167b4:	00060001 	.word	0x00060001
 80167b8:	20002720 	.word	0x20002720

080167bc <flex_update>:
{
 80167bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c0:	b0a1      	sub	sp, #132	; 0x84
 80167c2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 80167c4:	4bb5      	ldr	r3, [pc, #724]	; (8016a9c <flex_update+0x2e0>)
 80167c6:	881a      	ldrh	r2, [r3, #0]
 80167c8:	2100      	movs	r1, #0
 80167ca:	f7f4 fb6f 	bl	800aeac <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 80167ce:	f080 0201 	eor.w	r2, r0, #1
 80167d2:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80167d6:	f362 0300 	bfi	r3, r2, #0, #1
    f.wrap = flow & _LV_FLEX_WRAP ? 1 : 0;
 80167da:	f3c0 0285 	ubfx	r2, r0, #2, #6
 80167de:	f362 0341 	bfi	r3, r2, #1, #1
    f.rev = flow & _LV_FLEX_REVERSE ? 1 : 0;
 80167e2:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80167e6:	f360 0382 	bfi	r3, r0, #2, #1
 80167ea:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 80167ee:	4bac      	ldr	r3, [pc, #688]	; (8016aa0 <flex_update+0x2e4>)
 80167f0:	881a      	ldrh	r2, [r3, #0]
 80167f2:	2100      	movs	r1, #0
 80167f4:	4630      	mov	r0, r6
 80167f6:	f7f4 fb59 	bl	800aeac <lv_obj_get_style_prop>
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 80167fa:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 80167fe:	4ba9      	ldr	r3, [pc, #676]	; (8016aa4 <flex_update+0x2e8>)
 8016800:	881a      	ldrh	r2, [r3, #0]
 8016802:	2100      	movs	r1, #0
 8016804:	4630      	mov	r0, r6
 8016806:	f7f4 fb51 	bl	800aeac <lv_obj_get_style_prop>
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 801680a:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 801680e:	4ba6      	ldr	r3, [pc, #664]	; (8016aa8 <flex_update+0x2ec>)
 8016810:	881a      	ldrh	r2, [r3, #0]
 8016812:	2100      	movs	r1, #0
 8016814:	4630      	mov	r0, r6
 8016816:	f7f4 fb49 	bl	800aeac <lv_obj_get_style_prop>
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 801681a:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801681e:	2216      	movs	r2, #22
 8016820:	2100      	movs	r1, #0
 8016822:	4630      	mov	r0, r6
 8016824:	f7f4 fb42 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8016828:	b2c3      	uxtb	r3, r0
 801682a:	9303      	str	r3, [sp, #12]
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 801682c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016830:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8016834:	bf0c      	ite	eq
 8016836:	2215      	moveq	r2, #21
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016838:	2214      	movne	r2, #20
 801683a:	2100      	movs	r1, #0
 801683c:	4630      	mov	r0, r6
 801683e:	f7f4 fb35 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8016842:	b203      	sxth	r3, r0
 8016844:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 8016846:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801684a:	f013 0f01 	tst.w	r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801684e:	bf14      	ite	ne
 8016850:	2215      	movne	r2, #21
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8016852:	2214      	moveq	r2, #20
 8016854:	2100      	movs	r1, #0
 8016856:	4630      	mov	r0, r6
 8016858:	f7f4 fb28 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801685c:	b203      	sxth	r3, r0
 801685e:	9304      	str	r3, [sp, #16]
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 8016860:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016864:	f013 0f01 	tst.w	r3, #1
 8016868:	d05f      	beq.n	801692a <flex_update+0x16e>
 801686a:	4630      	mov	r0, r6
 801686c:	f7f1 fcab 	bl	80081c6 <lv_obj_get_content_width>
 8016870:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8016872:	2232      	movs	r2, #50	; 0x32
 8016874:	2100      	movs	r1, #0
 8016876:	4630      	mov	r0, r6
 8016878:	f7f4 fb18 	bl	800aeac <lv_obj_get_style_prop>
 801687c:	4604      	mov	r4, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 801687e:	8af5      	ldrh	r5, [r6, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8016880:	2210      	movs	r2, #16
 8016882:	2100      	movs	r1, #0
 8016884:	4630      	mov	r0, r6
 8016886:	f7f4 fb11 	bl	800aeac <lv_obj_get_style_prop>
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 801688a:	b2a4      	uxth	r4, r4
 801688c:	1823      	adds	r3, r4, r0
 801688e:	441d      	add	r5, r3
 8016890:	b2ad      	uxth	r5, r5
 8016892:	4630      	mov	r0, r6
 8016894:	f7f3 f874 	bl	8009980 <lv_obj_get_scroll_y>
 8016898:	1a2d      	subs	r5, r5, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 801689a:	f8ad 507a 	strh.w	r5, [sp, #122]	; 0x7a
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 801689e:	8ab5      	ldrh	r5, [r6, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80168a0:	2212      	movs	r2, #18
 80168a2:	2100      	movs	r1, #0
 80168a4:	4630      	mov	r0, r6
 80168a6:	f7f4 fb01 	bl	800aeac <lv_obj_get_style_prop>
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 80168aa:	4404      	add	r4, r0
 80168ac:	442c      	add	r4, r5
 80168ae:	b2a4      	uxth	r4, r4
 80168b0:	4630      	mov	r0, r6
 80168b2:	f7f3 f85d 	bl	8009970 <lv_obj_get_scroll_x>
 80168b6:	1a24      	subs	r4, r4, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 80168b8:	f8ad 4078 	strh.w	r4, [sp, #120]	; 0x78
    lv_flex_align_t track_cross_place = f.track_place;
 80168bc:	f89d 707e 	ldrb.w	r7, [sp, #126]	; 0x7e
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 80168c0:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80168c4:	f013 0f01 	tst.w	r3, #1
 80168c8:	bf0c      	ite	eq
 80168ca:	ab1e      	addeq	r3, sp, #120	; 0x78
 80168cc:	f10d 037a 	addne.w	r3, sp, #122	; 0x7a
 80168d0:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80168d2:	2201      	movs	r2, #1
 80168d4:	2100      	movs	r1, #0
 80168d6:	4630      	mov	r0, r6
 80168d8:	f7f4 fae8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80168dc:	b203      	sxth	r3, r0
 80168de:	930a      	str	r3, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 80168e0:	2204      	movs	r2, #4
 80168e2:	2100      	movs	r1, #0
 80168e4:	4630      	mov	r0, r6
 80168e6:	f7f4 fae1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80168ea:	b203      	sxth	r3, r0
 80168ec:	4618      	mov	r0, r3
 80168ee:	930d      	str	r3, [sp, #52]	; 0x34
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 80168f0:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80168f4:	f013 0201 	ands.w	r2, r3, #1
 80168f8:	d02e      	beq.n	8016958 <flex_update+0x19c>
 80168fa:	f242 71d1 	movw	r1, #10193	; 0x27d1
 80168fe:	4288      	cmp	r0, r1
 8016900:	d018      	beq.n	8016934 <flex_update+0x178>
    lv_coord_t gap = 0;
 8016902:	2200      	movs	r2, #0
 8016904:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 8016908:	2f00      	cmp	r7, #0
 801690a:	d05e      	beq.n	80169ca <flex_update+0x20e>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 801690c:	f013 0f04 	tst.w	r3, #4
 8016910:	f000 82ba 	beq.w	8016e88 <flex_update+0x6cc>
 8016914:	68b3      	ldr	r3, [r6, #8]
 8016916:	685b      	ldr	r3, [r3, #4]
 8016918:	1e5a      	subs	r2, r3, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 801691a:	429a      	cmp	r2, r3
 801691c:	da4d      	bge.n	80169ba <flex_update+0x1fe>
 801691e:	2a00      	cmp	r2, #0
 8016920:	f280 82b9 	bge.w	8016e96 <flex_update+0x6da>
 8016924:	2500      	movs	r5, #0
 8016926:	462c      	mov	r4, r5
 8016928:	e2df      	b.n	8016eea <flex_update+0x72e>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 801692a:	4630      	mov	r0, r6
 801692c:	f7f1 fc68 	bl	8008200 <lv_obj_get_content_height>
 8016930:	9005      	str	r0, [sp, #20]
 8016932:	e79e      	b.n	8016872 <flex_update+0xb6>
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 8016934:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 8016938:	f011 0f02 	tst.w	r1, #2
 801693c:	d1e1      	bne.n	8016902 <flex_update+0x146>
    if(rtl && !f.row) {
 801693e:	9903      	ldr	r1, [sp, #12]
 8016940:	2901      	cmp	r1, #1
 8016942:	d01d      	beq.n	8016980 <flex_update+0x1c4>
    lv_coord_t gap = 0;
 8016944:	2300      	movs	r3, #0
 8016946:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 801694a:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 801694e:	f013 0f04 	tst.w	r3, #4
 8016952:	d13e      	bne.n	80169d2 <flex_update+0x216>
 8016954:	2700      	movs	r7, #0
 8016956:	e2e9      	b.n	8016f2c <flex_update+0x770>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 8016958:	f242 71d1 	movw	r1, #10193	; 0x27d1
 801695c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801695e:	4288      	cmp	r0, r1
 8016960:	d008      	beq.n	8016974 <flex_update+0x1b8>
    if(rtl && !f.row) {
 8016962:	9a03      	ldr	r2, [sp, #12]
 8016964:	2a01      	cmp	r2, #1
 8016966:	d1cc      	bne.n	8016902 <flex_update+0x146>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 8016968:	b987      	cbnz	r7, 801698c <flex_update+0x1d0>
    lv_coord_t gap = 0;
 801696a:	2200      	movs	r2, #0
 801696c:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 8016970:	2701      	movs	r7, #1
 8016972:	e7cb      	b.n	801690c <flex_update+0x150>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 8016974:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
 8016978:	f011 0f04 	tst.w	r1, #4
 801697c:	d0df      	beq.n	801693e <flex_update+0x182>
 801697e:	e7f0      	b.n	8016962 <flex_update+0x1a6>
    if(rtl && !f.row) {
 8016980:	2a00      	cmp	r2, #0
 8016982:	d0f2      	beq.n	801696a <flex_update+0x1ae>
    lv_coord_t gap = 0;
 8016984:	2400      	movs	r4, #0
 8016986:	f8ad 4076 	strh.w	r4, [sp, #118]	; 0x76
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 801698a:	e2c2      	b.n	8016f12 <flex_update+0x756>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 801698c:	2f01      	cmp	r7, #1
 801698e:	d003      	beq.n	8016998 <flex_update+0x1dc>
    lv_coord_t gap = 0;
 8016990:	2200      	movs	r2, #0
 8016992:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 8016996:	e7b9      	b.n	801690c <flex_update+0x150>
    lv_coord_t gap = 0;
 8016998:	2200      	movs	r2, #0
 801699a:	f8ad 2076 	strh.w	r2, [sp, #118]	; 0x76
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 801699e:	f013 0f04 	tst.w	r3, #4
 80169a2:	d114      	bne.n	80169ce <flex_update+0x212>
 80169a4:	4617      	mov	r7, r2
    lv_coord_t total_track_cross_size = 0;
 80169a6:	4614      	mov	r4, r2
    if(rtl && !f.row) {
 80169a8:	f013 0f01 	tst.w	r3, #1
 80169ac:	f040 82be 	bne.w	8016f2c <flex_update+0x770>
        *cross_pos += total_track_cross_size;
 80169b0:	9a06      	ldr	r2, [sp, #24]
 80169b2:	8813      	ldrh	r3, [r2, #0]
 80169b4:	441c      	add	r4, r3
 80169b6:	8014      	strh	r4, [r2, #0]
 80169b8:	e2b8      	b.n	8016f2c <flex_update+0x770>
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 80169ba:	2500      	movs	r5, #0
 80169bc:	462c      	mov	r4, r5
 80169be:	e294      	b.n	8016eea <flex_update+0x72e>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 80169c0:	4630      	mov	r0, r6
 80169c2:	f7f1 fc00 	bl	80081c6 <lv_obj_get_content_width>
 80169c6:	4601      	mov	r1, r0
 80169c8:	e299      	b.n	8016efe <flex_update+0x742>
    lv_coord_t total_track_cross_size = 0;
 80169ca:	2400      	movs	r4, #0
 80169cc:	e2a1      	b.n	8016f12 <flex_update+0x756>
 80169ce:	2400      	movs	r4, #0
 80169d0:	e2a5      	b.n	8016f1e <flex_update+0x762>
 80169d2:	2400      	movs	r4, #0
 80169d4:	e2a3      	b.n	8016f1e <flex_update+0x762>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80169d6:	2700      	movs	r7, #0
 80169d8:	e2a4      	b.n	8016f24 <flex_update+0x768>
        if(rtl && !f.row) {
 80169da:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80169de:	f013 0f01 	tst.w	r3, #1
 80169e2:	f040 8244 	bne.w	8016e6e <flex_update+0x6b2>
            *cross_pos -= t.track_cross_size;
 80169e6:	9906      	ldr	r1, [sp, #24]
 80169e8:	880b      	ldrh	r3, [r1, #0]
 80169ea:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80169ee:	1a9b      	subs	r3, r3, r2
 80169f0:	800b      	strh	r3, [r1, #0]
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 80169f2:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 80169f6:	9307      	str	r3, [sp, #28]
 80169f8:	f9bd 907a 	ldrsh.w	r9, [sp, #122]	; 0x7a
 80169fc:	9714      	str	r7, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 80169fe:	e2bb      	b.n	8016f78 <flex_update+0x7bc>
                grow_max_size -= t->grow_dsc[i].final_size;
 8016a00:	8918      	ldrh	r0, [r3, #8]
 8016a02:	1a09      	subs	r1, r1, r0
 8016a04:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 8016a06:	3314      	adds	r3, #20
 8016a08:	42a3      	cmp	r3, r4
 8016a0a:	d007      	beq.n	8016a1c <flex_update+0x260>
            if(t->grow_dsc[i].clamped == 0) {
 8016a0c:	7c18      	ldrb	r0, [r3, #16]
 8016a0e:	f010 0f01 	tst.w	r0, #1
 8016a12:	d1f5      	bne.n	8016a00 <flex_update+0x244>
                grow_value_sum += t->grow_dsc[i].grow_value;
 8016a14:	68d8      	ldr	r0, [r3, #12]
 8016a16:	4402      	add	r2, r0
 8016a18:	b212      	sxth	r2, r2
 8016a1a:	e7f4      	b.n	8016a06 <flex_update+0x24a>
 8016a1c:	2000      	movs	r0, #0
 8016a1e:	4607      	mov	r7, r0
 8016a20:	4605      	mov	r5, r0
 8016a22:	e014      	b.n	8016a4e <flex_update+0x292>
                LV_ASSERT(grow_value_sum != 0);
 8016a24:	e7fe      	b.n	8016a24 <flex_update+0x268>
                    t->grow_dsc[i].clamped = 1;
 8016a26:	7c1c      	ldrb	r4, [r3, #16]
 8016a28:	f044 0401 	orr.w	r4, r4, #1
 8016a2c:	741c      	strb	r4, [r3, #16]
                    grow_reiterate = true;
 8016a2e:	2701      	movs	r7, #1
                t->grow_dsc[i].final_size = size_clamp;
 8016a30:	f8a3 e008 	strh.w	lr, [r3, #8]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 8016a34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016a36:	4403      	add	r3, r0
 8016a38:	68dc      	ldr	r4, [r3, #12]
 8016a3a:	1b12      	subs	r2, r2, r4
 8016a3c:	b212      	sxth	r2, r2
                grow_max_size  -= t->grow_dsc[i].final_size;
 8016a3e:	891b      	ldrh	r3, [r3, #8]
 8016a40:	1ac9      	subs	r1, r1, r3
 8016a42:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 8016a44:	3501      	adds	r5, #1
 8016a46:	3014      	adds	r0, #20
 8016a48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a4a:	429d      	cmp	r5, r3
 8016a4c:	d21a      	bcs.n	8016a84 <flex_update+0x2c8>
            if(t->grow_dsc[i].clamped == 0) {
 8016a4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016a50:	4403      	add	r3, r0
 8016a52:	7c1c      	ldrb	r4, [r3, #16]
 8016a54:	f014 0f01 	tst.w	r4, #1
 8016a58:	d1f4      	bne.n	8016a44 <flex_update+0x288>
                LV_ASSERT(grow_value_sum != 0);
 8016a5a:	2a00      	cmp	r2, #0
 8016a5c:	d0e2      	beq.n	8016a24 <flex_update+0x268>
                grow_unit = grow_max_size / grow_value_sum;
 8016a5e:	fb91 fef2 	sdiv	lr, r1, r2
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 8016a62:	68dc      	ldr	r4, [r3, #12]
 8016a64:	fb0e f404 	mul.w	r4, lr, r4
 8016a68:	b224      	sxth	r4, r4
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 8016a6a:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 8016a6e:	45a6      	cmp	lr, r4
 8016a70:	bfa8      	it	ge
 8016a72:	46a6      	movge	lr, r4
 8016a74:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8016a78:	45c6      	cmp	lr, r8
 8016a7a:	bfb8      	it	lt
 8016a7c:	46c6      	movlt	lr, r8
                if(size_clamp != size) {
 8016a7e:	4574      	cmp	r4, lr
 8016a80:	d1d1      	bne.n	8016a26 <flex_update+0x26a>
 8016a82:	e7d5      	b.n	8016a30 <flex_update+0x274>
    while(grow_reiterate) {
 8016a84:	b197      	cbz	r7, 8016aac <flex_update+0x2f0>
        for(i = 0; i < t->grow_item_cnt; i++) {
 8016a86:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8016a88:	b184      	cbz	r4, 8016aac <flex_update+0x2f0>
 8016a8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016a8c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016a90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 8016a94:	4661      	mov	r1, ip
        lv_coord_t grow_value_sum = 0;
 8016a96:	4652      	mov	r2, sl
 8016a98:	e7b8      	b.n	8016a0c <flex_update+0x250>
 8016a9a:	bf00      	nop
 8016a9c:	2000271e 	.word	0x2000271e
 8016aa0:	20002722 	.word	0x20002722
 8016aa4:	2000271c 	.word	0x2000271c
 8016aa8:	20002724 	.word	0x20002724
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8016aac:	2216      	movs	r2, #22
 8016aae:	2100      	movs	r1, #0
 8016ab0:	4630      	mov	r0, r6
 8016ab2:	f7f4 f9fb 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8016ab6:	b2c3      	uxtb	r3, r0
 8016ab8:	461c      	mov	r4, r3
 8016aba:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t main_pos = 0;
 8016abc:	2300      	movs	r3, #0
 8016abe:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    lv_coord_t place_gap = 0;
 8016ac2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 8016ac6:	f10d 034e 	add.w	r3, sp, #78	; 0x4e
 8016aca:	9301      	str	r3, [sp, #4]
 8016acc:	ab13      	add	r3, sp, #76	; 0x4c
 8016ace:	9300      	str	r3, [sp, #0]
 8016ad0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8016ad4:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 8016ad8:	9905      	ldr	r1, [sp, #20]
 8016ada:	f89d 007c 	ldrb.w	r0, [sp, #124]	; 0x7c
 8016ade:	f7ff fccf 	bl	8016480 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 8016ae2:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016ae6:	f013 0f01 	tst.w	r3, #1
 8016aea:	d001      	beq.n	8016af0 <flex_update+0x334>
 8016aec:	2c01      	cmp	r4, #1
 8016aee:	d00c      	beq.n	8016b0a <flex_update+0x34e>
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 8016af0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016af2:	4630      	mov	r0, r6
 8016af4:	f7f5 f920 	bl	800bd38 <lv_obj_get_child>
    while(item && item_first_id != item_last_id) {
 8016af8:	4604      	mov	r4, r0
 8016afa:	2800      	cmp	r0, #0
 8016afc:	f000 8179 	beq.w	8016df2 <flex_update+0x636>
 8016b00:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8016b04:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8016b08:	e0f5      	b.n	8016cf6 <flex_update+0x53a>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	f7f1 fb5b 	bl	80081c6 <lv_obj_get_content_width>
 8016b10:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016b14:	4403      	add	r3, r0
 8016b16:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8016b1a:	e7e9      	b.n	8016af0 <flex_update+0x334>
            item = get_next_item(cont, f->rev, &item_first_id);
 8016b1c:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
 8016b20:	aa14      	add	r2, sp, #80	; 0x50
 8016b22:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8016b26:	4630      	mov	r0, r6
 8016b28:	f7ff fcf9 	bl	801651e <get_next_item>
 8016b2c:	4604      	mov	r4, r0
            continue;
 8016b2e:	e0e0      	b.n	8016cf2 <flex_update+0x536>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8016b30:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016b32:	2800      	cmp	r0, #0
 8016b34:	d04c      	beq.n	8016bd0 <flex_update+0x414>
                if(t->grow_dsc[i].item == item) {
 8016b36:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8016b38:	462a      	mov	r2, r5
 8016b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016b3e:	2300      	movs	r3, #0
 8016b40:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8016b44:	42a1      	cmp	r1, r4
 8016b46:	d005      	beq.n	8016b54 <flex_update+0x398>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8016b48:	3214      	adds	r2, #20
 8016b4a:	3305      	adds	r3, #5
 8016b4c:	4298      	cmp	r0, r3
 8016b4e:	d1f7      	bne.n	8016b40 <flex_update+0x384>
            lv_coord_t s = 0;
 8016b50:	2700      	movs	r7, #0
 8016b52:	e001      	b.n	8016b58 <flex_update+0x39c>
                    s = t->grow_dsc[i].final_size;
 8016b54:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
            if(f->row) {
 8016b58:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016b5c:	f013 0f01 	tst.w	r3, #1
                item->w_layout = 1;
 8016b60:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
                item->h_layout = 0;
 8016b64:	bf19      	ittee	ne
 8016b66:	f043 0304 	orrne.w	r3, r3, #4
 8016b6a:	f36f 0341 	bfcne	r3, #1, #1
                item->w_layout = 0;
 8016b6e:	f043 0302 	orreq.w	r3, r3, #2
 8016b72:	f36f 0382 	bfceq	r3, #2, #1
 8016b76:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            if(s != area_get_main_size(&item->coords)) {
 8016b7a:	f104 0514 	add.w	r5, r4, #20
 8016b7e:	4628      	mov	r0, r5
 8016b80:	9b08      	ldr	r3, [sp, #32]
 8016b82:	4798      	blx	r3
 8016b84:	42b8      	cmp	r0, r7
 8016b86:	f000 80d2 	beq.w	8016d2e <flex_update+0x572>
                lv_obj_invalidate(item);
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	f7f1 fd56 	bl	800863c <lv_obj_invalidate>
    dest->x1 = src->x1;
 8016b90:	8aa3      	ldrh	r3, [r4, #20]
 8016b92:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    dest->y1 = src->y1;
 8016b96:	8ae3      	ldrh	r3, [r4, #22]
 8016b98:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    dest->x2 = src->x2;
 8016b9c:	8b23      	ldrh	r3, [r4, #24]
 8016b9e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    dest->y2 = src->y2;
 8016ba2:	8b63      	ldrh	r3, [r4, #26]
 8016ba4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
                area_set_main_size(&item->coords, s);
 8016ba8:	4639      	mov	r1, r7
 8016baa:	4628      	mov	r0, r5
 8016bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016bae:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8016bb0:	aa15      	add	r2, sp, #84	; 0x54
 8016bb2:	2129      	movs	r1, #41	; 0x29
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f7ed fc05 	bl	80043c4 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f7f5 f8b8 	bl	800bd30 <lv_obj_get_parent>
 8016bc0:	4622      	mov	r2, r4
 8016bc2:	2122      	movs	r1, #34	; 0x22
 8016bc4:	f7ed fbfe 	bl	80043c4 <lv_event_send>
                lv_obj_invalidate(item);
 8016bc8:	4620      	mov	r0, r4
 8016bca:	f7f1 fd37 	bl	800863c <lv_obj_invalidate>
 8016bce:	e0ae      	b.n	8016d2e <flex_update+0x572>
            lv_coord_t s = 0;
 8016bd0:	2700      	movs	r7, #0
 8016bd2:	e7c1      	b.n	8016b58 <flex_update+0x39c>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 8016bd4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8016bd8:	f104 0014 	add.w	r0, r4, #20
 8016bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bde:	4798      	blx	r3
 8016be0:	1a2d      	subs	r5, r5, r0
 8016be2:	b22d      	sxth	r5, r5
                break;
 8016be4:	e000      	b.n	8016be8 <flex_update+0x42c>
        switch(f->cross_place) {
 8016be6:	2500      	movs	r5, #0
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8016be8:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016bec:	f013 0f01 	tst.w	r3, #1
 8016bf0:	d003      	beq.n	8016bfa <flex_update+0x43e>
 8016bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bf4:	2b01      	cmp	r3, #1
 8016bf6:	f000 80b1 	beq.w	8016d5c <flex_update+0x5a0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 8016bfa:	226a      	movs	r2, #106	; 0x6a
 8016bfc:	2100      	movs	r1, #0
 8016bfe:	4620      	mov	r0, r4
 8016c00:	f7f4 f954 	bl	800aeac <lv_obj_get_style_prop>
 8016c04:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8016c06:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 8016c0a:	226b      	movs	r2, #107	; 0x6b
 8016c0c:	2100      	movs	r1, #0
 8016c0e:	4620      	mov	r0, r4
 8016c10:	f7f4 f94c 	bl	800aeac <lv_obj_get_style_prop>
 8016c14:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 8016c16:	fa0f fa80 	sxth.w	sl, r0
        lv_coord_t w = lv_obj_get_width(item);
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	f7f1 fac7 	bl	80081ae <lv_obj_get_width>
 8016c20:	900f      	str	r0, [sp, #60]	; 0x3c
        lv_coord_t h = lv_obj_get_height(item);
 8016c22:	4620      	mov	r0, r4
 8016c24:	f7f1 fac9 	bl	80081ba <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8016c28:	f408 48c0 	and.w	r8, r8, #24576	; 0x6000
 8016c2c:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8016c30:	f000 809e 	beq.w	8016d70 <flex_update+0x5b4>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8016c34:	f407 47c0 	and.w	r7, r7, #24576	; 0x6000
 8016c38:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8016c3c:	f000 80b1 	beq.w	8016da2 <flex_update+0x5e6>
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 8016c40:	8aa3      	ldrh	r3, [r4, #20]
 8016c42:	9a07      	ldr	r2, [sp, #28]
 8016c44:	1ad3      	subs	r3, r2, r3
 8016c46:	449b      	add	fp, r3
 8016c48:	fa1f fb8b 	uxth.w	fp, fp
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 8016c4c:	8ae3      	ldrh	r3, [r4, #22]
 8016c4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c50:	1ad3      	subs	r3, r2, r3
 8016c52:	449a      	add	sl, r3
 8016c54:	fa1f fa8a 	uxth.w	sl, sl
        diff_x += f->row ? main_pos : cross_pos;
 8016c58:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016c5c:	f013 0f01 	tst.w	r3, #1
 8016c60:	f000 80b5 	beq.w	8016dce <flex_update+0x612>
 8016c64:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8016c68:	44bb      	add	fp, r7
 8016c6a:	fa1f f88b 	uxth.w	r8, fp
 8016c6e:	fa0f fb8b 	sxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 8016c72:	b2ad      	uxth	r5, r5
 8016c74:	4455      	add	r5, sl
 8016c76:	b2ad      	uxth	r5, r5
        if(diff_x || diff_y) {
 8016c78:	fa1f f38b 	uxth.w	r3, fp
 8016c7c:	432b      	orrs	r3, r5
 8016c7e:	d018      	beq.n	8016cb2 <flex_update+0x4f6>
            lv_obj_invalidate(item);
 8016c80:	4620      	mov	r0, r4
 8016c82:	f7f1 fcdb 	bl	800863c <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 8016c86:	8aa3      	ldrh	r3, [r4, #20]
 8016c88:	4443      	add	r3, r8
 8016c8a:	82a3      	strh	r3, [r4, #20]
            item->coords.x2 += diff_x;
 8016c8c:	8b23      	ldrh	r3, [r4, #24]
 8016c8e:	4498      	add	r8, r3
 8016c90:	f8a4 8018 	strh.w	r8, [r4, #24]
            item->coords.y1 += diff_y;
 8016c94:	8ae3      	ldrh	r3, [r4, #22]
 8016c96:	442b      	add	r3, r5
 8016c98:	82e3      	strh	r3, [r4, #22]
            item->coords.y2 += diff_y;
 8016c9a:	8b63      	ldrh	r3, [r4, #26]
 8016c9c:	442b      	add	r3, r5
 8016c9e:	8363      	strh	r3, [r4, #26]
            lv_obj_invalidate(item);
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f7f1 fccb 	bl	800863c <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	b22a      	sxth	r2, r5
 8016caa:	4659      	mov	r1, fp
 8016cac:	4620      	mov	r0, r4
 8016cae:	f7f1 fb35 	bl	800831c <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 8016cb2:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016cb6:	f013 0f01 	tst.w	r3, #1
 8016cba:	d003      	beq.n	8016cc4 <flex_update+0x508>
 8016cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cbe:	2b01      	cmp	r3, #1
 8016cc0:	f000 808d 	beq.w	8016dde <flex_update+0x622>
 8016cc4:	f104 0014 	add.w	r0, r4, #20
 8016cc8:	9b08      	ldr	r3, [sp, #32]
 8016cca:	4798      	blx	r3
 8016ccc:	9b04      	ldr	r3, [sp, #16]
 8016cce:	18c3      	adds	r3, r0, r3
 8016cd0:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8016cd4:	4413      	add	r3, r2
 8016cd6:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8016cda:	4413      	add	r3, r2
 8016cdc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        item = get_next_item(cont, f->rev, &item_first_id);
 8016ce0:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
 8016ce4:	aa14      	add	r2, sp, #80	; 0x50
 8016ce6:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8016cea:	4630      	mov	r0, r6
 8016cec:	f7ff fc17 	bl	801651e <get_next_item>
 8016cf0:	4604      	mov	r4, r0
    while(item && item_first_id != item_last_id) {
 8016cf2:	2c00      	cmp	r4, #0
 8016cf4:	d07d      	beq.n	8016df2 <flex_update+0x636>
 8016cf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016cf8:	4599      	cmp	r9, r3
 8016cfa:	d07a      	beq.n	8016df2 <flex_update+0x636>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8016cfc:	49a8      	ldr	r1, [pc, #672]	; (8016fa0 <flex_update+0x7e4>)
 8016cfe:	4620      	mov	r0, r4
 8016d00:	f7f0 f9cf 	bl	80070a2 <lv_obj_has_flag_any>
 8016d04:	2800      	cmp	r0, #0
 8016d06:	f47f af09 	bne.w	8016b1c <flex_update+0x360>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8016d0a:	4ba6      	ldr	r3, [pc, #664]	; (8016fa4 <flex_update+0x7e8>)
 8016d0c:	881a      	ldrh	r2, [r3, #0]
 8016d0e:	2100      	movs	r1, #0
 8016d10:	4620      	mov	r0, r4
 8016d12:	f7f4 f8cb 	bl	800aeac <lv_obj_get_style_prop>
        if(grow_size) {
 8016d16:	f010 0fff 	tst.w	r0, #255	; 0xff
 8016d1a:	f47f af09 	bne.w	8016b30 <flex_update+0x374>
            item->w_layout = 0;
 8016d1e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            item->h_layout = 0;
 8016d22:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8016d26:	f36f 0341 	bfc	r3, #1, #1
 8016d2a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
        switch(f->cross_place) {
 8016d2e:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8016d32:	2b01      	cmp	r3, #1
 8016d34:	f43f af4e 	beq.w	8016bd4 <flex_update+0x418>
 8016d38:	2b02      	cmp	r3, #2
 8016d3a:	f47f af54 	bne.w	8016be6 <flex_update+0x42a>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 8016d3e:	f9bd 505c 	ldrsh.w	r5, [sp, #92]	; 0x5c
 8016d42:	3501      	adds	r5, #1
 8016d44:	f025 0501 	bic.w	r5, r5, #1
 8016d48:	f104 0014 	add.w	r0, r4, #20
 8016d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d4e:	4798      	blx	r3
 8016d50:	1a2d      	subs	r5, r5, r0
 8016d52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016d56:	f345 054f 	sbfx	r5, r5, #1, #16
                break;
 8016d5a:	e745      	b.n	8016be8 <flex_update+0x42c>
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8016d5c:	f104 0014 	add.w	r0, r4, #20
 8016d60:	9b08      	ldr	r3, [sp, #32]
 8016d62:	4798      	blx	r3
 8016d64:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016d68:	1a1b      	subs	r3, r3, r0
 8016d6a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8016d6e:	e744      	b.n	8016bfa <flex_update+0x43e>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8016d70:	f42b 43c0 	bic.w	r3, fp, #24576	; 0x6000
 8016d74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8016d78:	f73f af5c 	bgt.w	8016c34 <flex_update+0x478>
 8016d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016d80:	bfc8      	it	gt
 8016d82:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8016d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d88:	fb03 f202 	mul.w	r2, r3, r2
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	4a86      	ldr	r2, [pc, #536]	; (8016fa8 <flex_update+0x7ec>)
 8016d90:	fb82 1203 	smull	r1, r2, r2, r3
 8016d94:	ea4f 7be3 	mov.w	fp, r3, asr #31
 8016d98:	ebcb 1b62 	rsb	fp, fp, r2, asr #5
 8016d9c:	fa0f fb8b 	sxth.w	fp, fp
 8016da0:	e748      	b.n	8016c34 <flex_update+0x478>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8016da2:	f42a 43c0 	bic.w	r3, sl, #24576	; 0x6000
 8016da6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8016daa:	f73f af49 	bgt.w	8016c40 <flex_update+0x484>
 8016dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016db2:	bfc8      	it	gt
 8016db4:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8016db8:	fb03 f000 	mul.w	r0, r3, r0
 8016dbc:	4b7a      	ldr	r3, [pc, #488]	; (8016fa8 <flex_update+0x7ec>)
 8016dbe:	fb83 3a00 	smull	r3, sl, r3, r0
 8016dc2:	17c0      	asrs	r0, r0, #31
 8016dc4:	ebc0 1a6a 	rsb	sl, r0, sl, asr #5
 8016dc8:	fa0f fa8a 	sxth.w	sl, sl
 8016dcc:	e738      	b.n	8016c40 <flex_update+0x484>
        diff_x += f->row ? main_pos : cross_pos;
 8016dce:	44ab      	add	fp, r5
 8016dd0:	fa1f f88b 	uxth.w	r8, fp
 8016dd4:	fa0f fb8b 	sxth.w	fp, fp
        diff_y += f->row ? cross_pos : main_pos;
 8016dd8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016ddc:	e74a      	b.n	8016c74 <flex_update+0x4b8>
        else main_pos -= item_gap + place_gap;
 8016dde:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016de2:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8016de6:	1a9b      	subs	r3, r3, r2
 8016de8:	9a04      	ldr	r2, [sp, #16]
 8016dea:	1a9b      	subs	r3, r3, r2
 8016dec:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8016df0:	e776      	b.n	8016ce0 <flex_update+0x524>
        lv_mem_buf_release(t.grow_dsc);
 8016df2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016df4:	f00b f94e 	bl	8022094 <lv_mem_buf_release>
        if(rtl && !f.row) {
 8016df8:	9b03      	ldr	r3, [sp, #12]
 8016dfa:	2b01      	cmp	r3, #1
 8016dfc:	d015      	beq.n	8016e2a <flex_update+0x66e>
            *cross_pos += t.track_cross_size + gap + track_gap;
 8016dfe:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8016e02:	f8bd 2076 	ldrh.w	r2, [sp, #118]	; 0x76
 8016e06:	4413      	add	r3, r2
 8016e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e0a:	4413      	add	r3, r2
 8016e0c:	9a06      	ldr	r2, [sp, #24]
 8016e0e:	8812      	ldrh	r2, [r2, #0]
 8016e10:	4413      	add	r3, r2
 8016e12:	b21b      	sxth	r3, r3
 8016e14:	9a06      	ldr	r2, [sp, #24]
 8016e16:	8013      	strh	r3, [r2, #0]
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016e18:	68b3      	ldr	r3, [r6, #8]
 8016e1a:	685b      	ldr	r3, [r3, #4]
 8016e1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e1e:	4293      	cmp	r3, r2
 8016e20:	dd11      	ble.n	8016e46 <flex_update+0x68a>
 8016e22:	2a00      	cmp	r2, #0
 8016e24:	db0f      	blt.n	8016e46 <flex_update+0x68a>
        track_first_item = next_track_first_item;
 8016e26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016e28:	e086      	b.n	8016f38 <flex_update+0x77c>
        if(rtl && !f.row) {
 8016e2a:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016e2e:	f013 0f01 	tst.w	r3, #1
 8016e32:	d1e4      	bne.n	8016dfe <flex_update+0x642>
            *cross_pos -= gap + track_gap;
 8016e34:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 8016e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e3a:	441a      	add	r2, r3
 8016e3c:	9b06      	ldr	r3, [sp, #24]
 8016e3e:	881b      	ldrh	r3, [r3, #0]
 8016e40:	1a9b      	subs	r3, r3, r2
 8016e42:	b21b      	sxth	r3, r3
 8016e44:	e7e6      	b.n	8016e14 <flex_update+0x658>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8016e46:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8016e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016e4c:	429a      	cmp	r2, r3
 8016e4e:	d00a      	beq.n	8016e66 <flex_update+0x6aa>
 8016e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e52:	429a      	cmp	r2, r3
 8016e54:	d007      	beq.n	8016e66 <flex_update+0x6aa>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8016e56:	2200      	movs	r2, #0
 8016e58:	212b      	movs	r1, #43	; 0x2b
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f7ed fab2 	bl	80043c4 <lv_event_send>
}
 8016e60:	b021      	add	sp, #132	; 0x84
 8016e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
 8016e66:	4630      	mov	r0, r6
 8016e68:	f7f1 fefe 	bl	8008c68 <lv_obj_refr_size>
 8016e6c:	e7f3      	b.n	8016e56 <flex_update+0x69a>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 8016e6e:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8016e72:	9307      	str	r3, [sp, #28]
 8016e74:	f9bd 907a 	ldrsh.w	r9, [sp, #122]	; 0x7a
 8016e78:	9714      	str	r7, [sp, #80]	; 0x50
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 8016e7a:	4b4c      	ldr	r3, [pc, #304]	; (8016fac <flex_update+0x7f0>)
 8016e7c:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 8016e7e:	4b4c      	ldr	r3, [pc, #304]	; (8016fb0 <flex_update+0x7f4>)
 8016e80:	9308      	str	r3, [sp, #32]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 8016e82:	4b4c      	ldr	r3, [pc, #304]	; (8016fb4 <flex_update+0x7f8>)
 8016e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e86:	e07d      	b.n	8016f84 <flex_update+0x7c8>
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016e88:	68b3      	ldr	r3, [r6, #8]
 8016e8a:	685b      	ldr	r3, [r3, #4]
 8016e8c:	2b00      	cmp	r3, #0
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8016e8e:	bfc8      	it	gt
 8016e90:	2200      	movgt	r2, #0
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016e92:	f340 8082 	ble.w	8016f9a <flex_update+0x7de>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8016e96:	2500      	movs	r5, #0
 8016e98:	462c      	mov	r4, r5
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8016e9a:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8016e9e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016ea2:	f8dd a014 	ldr.w	sl, [sp, #20]
 8016ea6:	46bb      	mov	fp, r7
 8016ea8:	9f04      	ldr	r7, [sp, #16]
            t.grow_dsc_calc = 0;
 8016eaa:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8016eae:	f36f 0300 	bfc	r3, #0, #1
 8016eb2:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8016eb6:	f8cd 8004 	str.w	r8, [sp, #4]
 8016eba:	9700      	str	r7, [sp, #0]
 8016ebc:	4653      	mov	r3, sl
 8016ebe:	a91f      	add	r1, sp, #124	; 0x7c
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	f7ff fb47 	bl	8016554 <find_track_end>
 8016ec6:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 8016ec8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8016ecc:	4423      	add	r3, r4
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	eb03 0409 	add.w	r4, r3, r9
 8016ed4:	b224      	sxth	r4, r4
            track_cnt++;
 8016ed6:	3501      	adds	r5, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016ed8:	68b1      	ldr	r1, [r6, #8]
 8016eda:	6849      	ldr	r1, [r1, #4]
 8016edc:	4281      	cmp	r1, r0
 8016ede:	dd01      	ble.n	8016ee4 <flex_update+0x728>
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	dae2      	bge.n	8016eaa <flex_update+0x6ee>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 8016ee4:	465f      	mov	r7, fp
 8016ee6:	b105      	cbz	r5, 8016eea <flex_update+0x72e>
 8016ee8:	b21c      	sxth	r4, r3
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 8016eea:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016eee:	f013 0f01 	tst.w	r3, #1
 8016ef2:	f43f ad65 	beq.w	80169c0 <flex_update+0x204>
 8016ef6:	4630      	mov	r0, r6
 8016ef8:	f7f1 f982 	bl	8008200 <lv_obj_get_content_height>
 8016efc:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 8016efe:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8016f02:	9301      	str	r3, [sp, #4]
 8016f04:	9b06      	ldr	r3, [sp, #24]
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	b22b      	sxth	r3, r5
 8016f0a:	4622      	mov	r2, r4
 8016f0c:	4638      	mov	r0, r7
 8016f0e:	f7ff fab7 	bl	8016480 <place_content>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 8016f12:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016f16:	f013 0f04 	tst.w	r3, #4
 8016f1a:	f43f ad5c 	beq.w	80169d6 <flex_update+0x21a>
 8016f1e:	68b2      	ldr	r2, [r6, #8]
 8016f20:	6857      	ldr	r7, [r2, #4]
 8016f22:	3f01      	subs	r7, #1
    if(rtl && !f.row) {
 8016f24:	9a03      	ldr	r2, [sp, #12]
 8016f26:	2a01      	cmp	r2, #1
 8016f28:	f43f ad3e 	beq.w	80169a8 <flex_update+0x1ec>
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016f2c:	68b3      	ldr	r3, [r6, #8]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	42bb      	cmp	r3, r7
 8016f32:	dd88      	ble.n	8016e46 <flex_update+0x68a>
 8016f34:	2f00      	cmp	r7, #0
 8016f36:	db86      	blt.n	8016e46 <flex_update+0x68a>
        t.grow_dsc_calc = 1;
 8016f38:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8016f3c:	f043 0301 	orr.w	r3, r3, #1
 8016f40:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8016f44:	ab17      	add	r3, sp, #92	; 0x5c
 8016f46:	9301      	str	r3, [sp, #4]
 8016f48:	9b04      	ldr	r3, [sp, #16]
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	9b05      	ldr	r3, [sp, #20]
 8016f4e:	463a      	mov	r2, r7
 8016f50:	a91f      	add	r1, sp, #124	; 0x7c
 8016f52:	4630      	mov	r0, r6
 8016f54:	f7ff fafe 	bl	8016554 <find_track_end>
 8016f58:	900c      	str	r0, [sp, #48]	; 0x30
        if(rtl && !f.row) {
 8016f5a:	9b03      	ldr	r3, [sp, #12]
 8016f5c:	2b01      	cmp	r3, #1
 8016f5e:	f43f ad3c 	beq.w	80169da <flex_update+0x21e>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 8016f62:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	; 0x78
 8016f66:	9307      	str	r3, [sp, #28]
 8016f68:	f9bd 907a 	ldrsh.w	r9, [sp, #122]	; 0x7a
 8016f6c:	9714      	str	r7, [sp, #80]	; 0x50
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 8016f6e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8016f72:	f013 0f01 	tst.w	r3, #1
 8016f76:	d180      	bne.n	8016e7a <flex_update+0x6be>
        track_first_item = next_track_first_item;
 8016f78:	4b0f      	ldr	r3, [pc, #60]	; (8016fb8 <flex_update+0x7fc>)
 8016f7a:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 8016f7c:	4b0d      	ldr	r3, [pc, #52]	; (8016fb4 <flex_update+0x7f8>)
 8016f7e:	9308      	str	r3, [sp, #32]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 8016f80:	4b0b      	ldr	r3, [pc, #44]	; (8016fb0 <flex_update+0x7f4>)
 8016f82:	930b      	str	r3, [sp, #44]	; 0x2c
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 8016f84:	f8bd c05e 	ldrh.w	ip, [sp, #94]	; 0x5e
 8016f88:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016f8c:	ebac 0c03 	sub.w	ip, ip, r3
 8016f90:	fa0f fc8c 	sxth.w	ip, ip
        lv_coord_t grow_value_sum = 0;
 8016f94:	f04f 0a00 	mov.w	sl, #0
 8016f98:	e575      	b.n	8016a86 <flex_update+0x2ca>
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8016f9a:	2500      	movs	r5, #0
 8016f9c:	462c      	mov	r4, r5
 8016f9e:	e7a4      	b.n	8016eea <flex_update+0x72e>
 8016fa0:	00060001 	.word	0x00060001
 8016fa4:	20002720 	.word	0x20002720
 8016fa8:	51eb851f 	.word	0x51eb851f
 8016fac:	08021097 	.word	0x08021097
 8016fb0:	08016469 	.word	0x08016469
 8016fb4:	08016475 	.word	0x08016475
 8016fb8:	080210a1 	.word	0x080210a1

08016fbc <lv_flex_init>:
{
 8016fbc:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 8016fbe:	2100      	movs	r1, #0
 8016fc0:	480c      	ldr	r0, [pc, #48]	; (8016ff4 <lv_flex_init+0x38>)
 8016fc2:	f7f1 f867 	bl	8008094 <lv_layout_register>
 8016fc6:	4b0c      	ldr	r3, [pc, #48]	; (8016ff8 <lv_flex_init+0x3c>)
 8016fc8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop(LV_STYLE_PROP_FLAG_NONE);
 8016fca:	2000      	movs	r0, #0
 8016fcc:	f00b ffbe 	bl	8022f4c <lv_style_register_prop>
 8016fd0:	4b0a      	ldr	r3, [pc, #40]	; (8016ffc <lv_flex_init+0x40>)
 8016fd2:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8016fd4:	2004      	movs	r0, #4
 8016fd6:	f00b ffb9 	bl	8022f4c <lv_style_register_prop>
 8016fda:	4b09      	ldr	r3, [pc, #36]	; (8017000 <lv_flex_init+0x44>)
 8016fdc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8016fde:	2004      	movs	r0, #4
 8016fe0:	f00b ffb4 	bl	8022f4c <lv_style_register_prop>
 8016fe4:	4b07      	ldr	r3, [pc, #28]	; (8017004 <lv_flex_init+0x48>)
 8016fe6:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8016fe8:	2004      	movs	r0, #4
 8016fea:	f00b ffaf 	bl	8022f4c <lv_style_register_prop>
 8016fee:	4b06      	ldr	r3, [pc, #24]	; (8017008 <lv_flex_init+0x4c>)
 8016ff0:	8018      	strh	r0, [r3, #0]
}
 8016ff2:	bd08      	pop	{r3, pc}
 8016ff4:	080167bd 	.word	0x080167bd
 8016ff8:	2000271a 	.word	0x2000271a
 8016ffc:	2000271e 	.word	0x2000271e
 8017000:	20002722 	.word	0x20002722
 8017004:	2000271c 	.word	0x2000271c
 8017008:	20002724 	.word	0x20002724

0801700c <lv_obj_set_style_flex_flow>:
{
 801700c:	b508      	push	{r3, lr}
 801700e:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 8017010:	460a      	mov	r2, r1
 8017012:	4902      	ldr	r1, [pc, #8]	; (801701c <lv_obj_set_style_flex_flow+0x10>)
 8017014:	8809      	ldrh	r1, [r1, #0]
 8017016:	f7f4 fb50 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 801701a:	bd08      	pop	{r3, pc}
 801701c:	2000271e 	.word	0x2000271e

08017020 <lv_obj_set_flex_flow>:
{
 8017020:	b510      	push	{r4, lr}
 8017022:	4604      	mov	r4, r0
    lv_obj_set_style_flex_flow(obj, flow, 0);
 8017024:	2200      	movs	r2, #0
 8017026:	f7ff fff1 	bl	801700c <lv_obj_set_style_flex_flow>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 801702a:	2200      	movs	r2, #0
 801702c:	4b02      	ldr	r3, [pc, #8]	; (8017038 <lv_obj_set_flex_flow+0x18>)
 801702e:	8819      	ldrh	r1, [r3, #0]
 8017030:	4620      	mov	r0, r4
 8017032:	f7f4 fe44 	bl	800bcbe <lv_obj_set_style_layout>
}
 8017036:	bd10      	pop	{r4, pc}
 8017038:	2000271a 	.word	0x2000271a

0801703c <lv_obj_set_style_flex_main_place>:
{
 801703c:	b508      	push	{r3, lr}
 801703e:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 8017040:	460a      	mov	r2, r1
 8017042:	4902      	ldr	r1, [pc, #8]	; (801704c <lv_obj_set_style_flex_main_place+0x10>)
 8017044:	8809      	ldrh	r1, [r1, #0]
 8017046:	f7f4 fb38 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 801704a:	bd08      	pop	{r3, pc}
 801704c:	20002722 	.word	0x20002722

08017050 <lv_obj_set_style_flex_cross_place>:
{
 8017050:	b508      	push	{r3, lr}
 8017052:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 8017054:	460a      	mov	r2, r1
 8017056:	4902      	ldr	r1, [pc, #8]	; (8017060 <lv_obj_set_style_flex_cross_place+0x10>)
 8017058:	8809      	ldrh	r1, [r1, #0]
 801705a:	f7f4 fb2e 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 801705e:	bd08      	pop	{r3, pc}
 8017060:	2000271c 	.word	0x2000271c

08017064 <lv_obj_set_style_flex_track_place>:
{
 8017064:	b508      	push	{r3, lr}
 8017066:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 8017068:	460a      	mov	r2, r1
 801706a:	4902      	ldr	r1, [pc, #8]	; (8017074 <lv_obj_set_style_flex_track_place+0x10>)
 801706c:	8809      	ldrh	r1, [r1, #0]
 801706e:	f7f4 fb24 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 8017072:	bd08      	pop	{r3, pc}
 8017074:	20002724 	.word	0x20002724

08017078 <lv_obj_set_flex_align>:
{
 8017078:	b570      	push	{r4, r5, r6, lr}
 801707a:	4604      	mov	r4, r0
 801707c:	4616      	mov	r6, r2
 801707e:	461d      	mov	r5, r3
    lv_obj_set_style_flex_main_place(obj, main_place, 0);
 8017080:	2200      	movs	r2, #0
 8017082:	f7ff ffdb 	bl	801703c <lv_obj_set_style_flex_main_place>
    lv_obj_set_style_flex_cross_place(obj, cross_place, 0);
 8017086:	2200      	movs	r2, #0
 8017088:	4631      	mov	r1, r6
 801708a:	4620      	mov	r0, r4
 801708c:	f7ff ffe0 	bl	8017050 <lv_obj_set_style_flex_cross_place>
    lv_obj_set_style_flex_track_place(obj, track_place, 0);
 8017090:	2200      	movs	r2, #0
 8017092:	4629      	mov	r1, r5
 8017094:	4620      	mov	r0, r4
 8017096:	f7ff ffe5 	bl	8017064 <lv_obj_set_style_flex_track_place>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 801709a:	2200      	movs	r2, #0
 801709c:	4b02      	ldr	r3, [pc, #8]	; (80170a8 <lv_obj_set_flex_align+0x30>)
 801709e:	8819      	ldrh	r1, [r3, #0]
 80170a0:	4620      	mov	r0, r4
 80170a2:	f7f4 fe0c 	bl	800bcbe <lv_obj_set_style_layout>
}
 80170a6:	bd70      	pop	{r4, r5, r6, pc}
 80170a8:	2000271a 	.word	0x2000271a

080170ac <lv_obj_set_style_flex_grow>:
{
 80170ac:	b508      	push	{r3, lr}
 80170ae:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 80170b0:	460a      	mov	r2, r1
 80170b2:	4902      	ldr	r1, [pc, #8]	; (80170bc <lv_obj_set_style_flex_grow+0x10>)
 80170b4:	8809      	ldrh	r1, [r1, #0]
 80170b6:	f7f4 fb00 	bl	800b6ba <lv_obj_set_local_style_prop>
}
 80170ba:	bd08      	pop	{r3, pc}
 80170bc:	20002720 	.word	0x20002720

080170c0 <lv_obj_set_flex_grow>:
{
 80170c0:	b510      	push	{r4, lr}
 80170c2:	4604      	mov	r4, r0
    lv_obj_set_style_flex_grow(obj, grow, 0);
 80170c4:	2200      	movs	r2, #0
 80170c6:	f7ff fff1 	bl	80170ac <lv_obj_set_style_flex_grow>
    lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 80170ca:	4620      	mov	r0, r4
 80170cc:	f7f4 fe30 	bl	800bd30 <lv_obj_get_parent>
 80170d0:	f7f0 ffc0 	bl	8008054 <lv_obj_mark_layout_as_dirty>
}
 80170d4:	bd10      	pop	{r4, pc}
	...

080170d8 <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 80170d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170dc:	4686      	mov	lr, r0
 80170de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80170e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80170e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80170e4:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 80170e8:	b391      	cbz	r1, 8017150 <grid_align+0x78>
        pos_array[0] = 0;
 80170ea:	2200      	movs	r2, #0
 80170ec:	8022      	strh	r2, [r4, #0]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 80170ee:	f1b6 0901 	subs.w	r9, r6, #1
 80170f2:	f000 80a4 	beq.w	801723e <grid_align+0x166>
 80170f6:	46a4      	mov	ip, r4
 80170f8:	1eb8      	subs	r0, r7, #2
 80170fa:	2100      	movs	r1, #0
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 80170fc:	f9bc 5000 	ldrsh.w	r5, [ip]
 8017100:	3101      	adds	r1, #1
 8017102:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8017106:	441a      	add	r2, r3
 8017108:	442a      	add	r2, r5
 801710a:	f82c 2f02 	strh.w	r2, [ip, #2]!
    for(i = 0; i < track_num - 1; i++) {
 801710e:	4549      	cmp	r1, r9
 8017110:	d3f4      	bcc.n	80170fc <grid_align+0x24>
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 8017112:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017116:	3b01      	subs	r3, #1
 8017118:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 801711c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017120:	4418      	add	r0, r3
 8017122:	8823      	ldrh	r3, [r4, #0]
 8017124:	1ac0      	subs	r0, r0, r3
 8017126:	b200      	sxth	r0, r0

    if(reverse) {
 8017128:	f1b8 0f00 	cmp.w	r8, #0
 801712c:	d00e      	beq.n	801714c <grid_align+0x74>
        for(i = 0; i < track_num; i++) {
 801712e:	b16e      	cbz	r6, 801714c <grid_align+0x74>
 8017130:	3c02      	subs	r4, #2
 8017132:	3f02      	subs	r7, #2
    for(i = 0; i < track_num - 1; i++) {
 8017134:	2200      	movs	r2, #0
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 8017136:	f834 3f02 	ldrh.w	r3, [r4, #2]!
 801713a:	f837 1f02 	ldrh.w	r1, [r7, #2]!
 801713e:	440b      	add	r3, r1
 8017140:	ebae 0303 	sub.w	r3, lr, r3
 8017144:	8023      	strh	r3, [r4, #0]
        for(i = 0; i < track_num; i++) {
 8017146:	3201      	adds	r2, #1
 8017148:	4296      	cmp	r6, r2
 801714a:	d8f4      	bhi.n	8017136 <grid_align+0x5e>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 801714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 8017150:	1f11      	subs	r1, r2, #4
 8017152:	b2c9      	uxtb	r1, r1
 8017154:	2902      	cmp	r1, #2
 8017156:	d802      	bhi.n	801715e <grid_align+0x86>
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 8017158:	2e01      	cmp	r6, #1
 801715a:	d029      	beq.n	80171b0 <grid_align+0xd8>
            gap = 0;
 801715c:	2300      	movs	r3, #0
        for(i = 0; i < track_num; i++) {
 801715e:	2e00      	cmp	r6, #0
 8017160:	d074      	beq.n	801724c <grid_align+0x174>
 8017162:	f1a7 0c02 	sub.w	ip, r7, #2
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 8017166:	2000      	movs	r0, #0
 8017168:	4682      	mov	sl, r0
            grid_size += size_array[i] + gap;
 801716a:	b29d      	uxth	r5, r3
 801716c:	46a9      	mov	r9, r5
 801716e:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
 8017172:	4451      	add	r1, sl
 8017174:	b289      	uxth	r1, r1
 8017176:	eb05 0a01 	add.w	sl, r5, r1
 801717a:	fa1f fb8a 	uxth.w	fp, sl
 801717e:	fa0f fa8a 	sxth.w	sl, sl
        for(i = 0; i < track_num; i++) {
 8017182:	3001      	adds	r0, #1
 8017184:	4286      	cmp	r6, r0
 8017186:	d8f1      	bhi.n	801716c <grid_align+0x94>
        switch(align) {
 8017188:	2a06      	cmp	r2, #6
 801718a:	d8b0      	bhi.n	80170ee <grid_align+0x16>
 801718c:	a001      	add	r0, pc, #4	; (adr r0, 8017194 <grid_align+0xbc>)
 801718e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8017192:	bf00      	nop
 8017194:	080171b7 	.word	0x080171b7
 8017198:	080171bd 	.word	0x080171bd
 801719c:	080171d1 	.word	0x080171d1
 80171a0:	080170ef 	.word	0x080170ef
 80171a4:	08017221 	.word	0x08017221
 80171a8:	080171ff 	.word	0x080171ff
 80171ac:	080171e1 	.word	0x080171e1
            gap = 0;
 80171b0:	2300      	movs	r3, #0
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 80171b2:	2201      	movs	r2, #1
 80171b4:	e7d5      	b.n	8017162 <grid_align+0x8a>
                pos_array[0] = 0;
 80171b6:	2200      	movs	r2, #0
 80171b8:	8022      	strh	r2, [r4, #0]
                break;
 80171ba:	e798      	b.n	80170ee <grid_align+0x16>
        grid_size -= gap;
 80171bc:	b20a      	sxth	r2, r1
                pos_array[0] = (cont_size - grid_size) / 2;
 80171be:	ebae 0202 	sub.w	r2, lr, r2
 80171c2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80171c6:	1052      	asrs	r2, r2, #1
 80171c8:	8022      	strh	r2, [r4, #0]
                break;
 80171ca:	e790      	b.n	80170ee <grid_align+0x16>
        switch(align) {
 80171cc:	f04f 0b00 	mov.w	fp, #0
                pos_array[0] = cont_size - grid_size;
 80171d0:	44f1      	add	r9, lr
 80171d2:	eba9 0b0b 	sub.w	fp, r9, fp
 80171d6:	f8a4 b000 	strh.w	fp, [r4]
                break;
 80171da:	e788      	b.n	80170ee <grid_align+0x16>
        switch(align) {
 80171dc:	f04f 0b00 	mov.w	fp, #0
                pos_array[0] = 0;
 80171e0:	2300      	movs	r3, #0
 80171e2:	8023      	strh	r3, [r4, #0]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 80171e4:	eb09 030e 	add.w	r3, r9, lr
 80171e8:	eba3 030b 	sub.w	r3, r3, fp
 80171ec:	b21b      	sxth	r3, r3
 80171ee:	1e72      	subs	r2, r6, #1
 80171f0:	b212      	sxth	r2, r2
 80171f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80171f6:	b21b      	sxth	r3, r3
                break;
 80171f8:	e779      	b.n	80170ee <grid_align+0x16>
        switch(align) {
 80171fa:	f04f 0b00 	mov.w	fp, #0
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 80171fe:	eb09 020e 	add.w	r2, r9, lr
 8017202:	eba2 020b 	sub.w	r2, r2, fp
 8017206:	b212      	sxth	r2, r2
 8017208:	b233      	sxth	r3, r6
 801720a:	fb92 f2f3 	sdiv	r2, r2, r3
 801720e:	b213      	sxth	r3, r2
                pos_array[0] = gap / 2;
 8017210:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8017214:	441a      	add	r2, r3
 8017216:	1052      	asrs	r2, r2, #1
 8017218:	8022      	strh	r2, [r4, #0]
                break;
 801721a:	e768      	b.n	80170ee <grid_align+0x16>
        switch(align) {
 801721c:	f04f 0b00 	mov.w	fp, #0
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 8017220:	eb09 030e 	add.w	r3, r9, lr
 8017224:	eba3 030b 	sub.w	r3, r3, fp
 8017228:	b21b      	sxth	r3, r3
 801722a:	1c72      	adds	r2, r6, #1
 801722c:	b212      	sxth	r2, r2
 801722e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017232:	b21b      	sxth	r3, r3
                pos_array[0] = gap;
 8017234:	8023      	strh	r3, [r4, #0]
                break;
 8017236:	e75a      	b.n	80170ee <grid_align+0x16>
    for(i = 0; i < track_num - 1; i++) {
 8017238:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801723c:	e75b      	b.n	80170f6 <grid_align+0x1e>
    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 801723e:	f9b7 0000 	ldrsh.w	r0, [r7]
    if(reverse) {
 8017242:	f1b8 0f00 	cmp.w	r8, #0
 8017246:	f47f af73 	bne.w	8017130 <grid_align+0x58>
 801724a:	e77f      	b.n	801714c <grid_align+0x74>
        grid_size -= gap;
 801724c:	fa1f f983 	uxth.w	r9, r3
        switch(align) {
 8017250:	2a06      	cmp	r2, #6
 8017252:	d8f1      	bhi.n	8017238 <grid_align+0x160>
 8017254:	a101      	add	r1, pc, #4	; (adr r1, 801725c <grid_align+0x184>)
 8017256:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801725a:	bf00      	nop
 801725c:	080171b7 	.word	0x080171b7
 8017260:	08017279 	.word	0x08017279
 8017264:	080171cd 	.word	0x080171cd
 8017268:	08017239 	.word	0x08017239
 801726c:	0801721d 	.word	0x0801721d
 8017270:	080171fb 	.word	0x080171fb
 8017274:	080171dd 	.word	0x080171dd
        grid_size -= gap;
 8017278:	f1c9 0200 	rsb	r2, r9, #0
 801727c:	b212      	sxth	r2, r2
 801727e:	e79e      	b.n	80171be <grid_align+0xe6>

08017280 <grid_update>:
{
 8017280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017284:	b097      	sub	sp, #92	; 0x5c
 8017286:	4682      	mov	sl, r0
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8017288:	4bb4      	ldr	r3, [pc, #720]	; (801755c <grid_update+0x2dc>)
 801728a:	881a      	ldrh	r2, [r3, #0]
 801728c:	2100      	movs	r1, #0
 801728e:	f7f3 fe0d 	bl	800aeac <lv_obj_get_style_prop>
 8017292:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 8017294:	4bb2      	ldr	r3, [pc, #712]	; (8017560 <grid_update+0x2e0>)
 8017296:	881a      	ldrh	r2, [r3, #0]
 8017298:	2100      	movs	r1, #0
 801729a:	4650      	mov	r0, sl
 801729c:	f7f3 fe06 	bl	800aeac <lv_obj_get_style_prop>
    if(col_templ == NULL || row_templ == NULL) return;
 80172a0:	2c00      	cmp	r4, #0
 80172a2:	f000 8442 	beq.w	8017b2a <grid_update+0x8aa>
 80172a6:	2800      	cmp	r0, #0
 80172a8:	f000 843f 	beq.w	8017b2a <grid_update+0x8aa>
    if(lv_obj_get_child(cont, 0) == NULL) {
 80172ac:	2100      	movs	r1, #0
 80172ae:	4650      	mov	r0, sl
 80172b0:	f7f4 fd42 	bl	800bd38 <lv_obj_get_child>
 80172b4:	b350      	cbz	r0, 801730c <grid_update+0x8c>
 80172b6:	4baa      	ldr	r3, [pc, #680]	; (8017560 <grid_update+0x2e0>)
 80172b8:	881a      	ldrh	r2, [r3, #0]
 80172ba:	2100      	movs	r1, #0
 80172bc:	4650      	mov	r0, sl
 80172be:	f7f3 fdf5 	bl	800aeac <lv_obj_get_style_prop>
 80172c2:	9005      	str	r0, [sp, #20]

static uint32_t count_tracks(const lv_coord_t * templ)
{
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 80172c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80172c8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d022      	beq.n	8017316 <grid_update+0x96>
 80172d0:	4602      	mov	r2, r0
 80172d2:	2300      	movs	r3, #0
 80172d4:	f641 74ff 	movw	r4, #8191	; 0x1fff
 80172d8:	3301      	adds	r3, #1
 80172da:	0058      	lsls	r0, r3, #1
 80172dc:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
 80172e0:	42a1      	cmp	r1, r4
 80172e2:	d1f9      	bne.n	80172d8 <grid_update+0x58>
    c->row_num = count_tracks(row_templ);
 80172e4:	9314      	str	r3, [sp, #80]	; 0x50
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 80172e6:	f00a fe73 	bl	8021fd0 <lv_mem_buf_get>
 80172ea:	9010      	str	r0, [sp, #64]	; 0x40
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 80172ec:	9814      	ldr	r0, [sp, #80]	; 0x50
 80172ee:	0040      	lsls	r0, r0, #1
 80172f0:	f00a fe6e 	bl	8021fd0 <lv_mem_buf_get>
 80172f4:	9012      	str	r0, [sp, #72]	; 0x48
    for(i = 0; i < c->row_num; i++) {
 80172f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80172f8:	2c00      	cmp	r4, #0
 80172fa:	d071      	beq.n	80173e0 <grid_update+0x160>
 80172fc:	9b05      	ldr	r3, [sp, #20]
 80172fe:	1e9f      	subs	r7, r3, #2
 8017300:	46b8      	mov	r8, r7
 8017302:	2600      	movs	r6, #0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8017304:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8017564 <grid_update+0x2e4>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_pos(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8017308:	9706      	str	r7, [sp, #24]
 801730a:	e03f      	b.n	801738c <grid_update+0x10c>
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 801730c:	211c      	movs	r1, #28
 801730e:	a80f      	add	r0, sp, #60	; 0x3c
 8017310:	f00b f88c 	bl	802242c <lv_memset_00>
        return;
 8017314:	e1f3      	b.n	80176fe <grid_update+0x47e>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8017316:	2000      	movs	r0, #0
 8017318:	4603      	mov	r3, r0
 801731a:	e7e3      	b.n	80172e4 <grid_update+0x64>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 801731c:	3401      	adds	r4, #1
 801731e:	4650      	mov	r0, sl
 8017320:	f7f4 fd1f 	bl	800bd62 <lv_obj_get_child_cnt>
 8017324:	4284      	cmp	r4, r0
 8017326:	d225      	bcs.n	8017374 <grid_update+0xf4>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 8017328:	4621      	mov	r1, r4
 801732a:	4650      	mov	r0, sl
 801732c:	f7f4 fd04 	bl	800bd38 <lv_obj_get_child>
 8017330:	4605      	mov	r5, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8017332:	4659      	mov	r1, fp
 8017334:	f7ef feb5 	bl	80070a2 <lv_obj_has_flag_any>
 8017338:	2800      	cmp	r0, #0
 801733a:	d1ef      	bne.n	801731c <grid_update+0x9c>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801733c:	4b8a      	ldr	r3, [pc, #552]	; (8017568 <grid_update+0x2e8>)
 801733e:	881a      	ldrh	r2, [r3, #0]
 8017340:	2100      	movs	r1, #0
 8017342:	4628      	mov	r0, r5
 8017344:	f7f3 fdb2 	bl	800aeac <lv_obj_get_style_prop>
                if(row_span != 1) continue;
 8017348:	b2c0      	uxtb	r0, r0
 801734a:	2801      	cmp	r0, #1
 801734c:	d1e6      	bne.n	801731c <grid_update+0x9c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 801734e:	4b87      	ldr	r3, [pc, #540]	; (801756c <grid_update+0x2ec>)
 8017350:	881a      	ldrh	r2, [r3, #0]
 8017352:	2100      	movs	r1, #0
 8017354:	4628      	mov	r0, r5
 8017356:	f7f3 fda9 	bl	800aeac <lv_obj_get_style_prop>
                uint32_t row_pos = get_row_pos(item);
 801735a:	b2c0      	uxtb	r0, r0
                if(row_pos != i) continue;
 801735c:	42b0      	cmp	r0, r6
 801735e:	d1dd      	bne.n	801731c <grid_update+0x9c>
                size = LV_MAX(size, lv_obj_get_height(item));
 8017360:	4628      	mov	r0, r5
 8017362:	f7f0 ff2a 	bl	80081ba <lv_obj_get_height>
 8017366:	42b8      	cmp	r0, r7
 8017368:	dbd8      	blt.n	801731c <grid_update+0x9c>
 801736a:	4628      	mov	r0, r5
 801736c:	f7f0 ff25 	bl	80081ba <lv_obj_get_height>
 8017370:	4607      	mov	r7, r0
 8017372:	e7d3      	b.n	801731c <grid_update+0x9c>
            if(size >= 0) c->h[i] = size;
 8017374:	2f00      	cmp	r7, #0
 8017376:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017378:	bfae      	itee	ge
 801737a:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->h[i] = 0;
 801737e:	2200      	movlt	r2, #0
 8017380:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->row_num; i++) {
 8017384:	3601      	adds	r6, #1
 8017386:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017388:	42a6      	cmp	r6, r4
 801738a:	d20a      	bcs.n	80173a2 <grid_update+0x122>
        if(IS_CONTENT(row_templ[i])) {
 801738c:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8017390:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
 8017394:	f641 739a 	movw	r3, #8090	; 0x1f9a
 8017398:	429a      	cmp	r2, r3
 801739a:	d1f3      	bne.n	8017384 <grid_update+0x104>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 801739c:	2400      	movs	r4, #0
        lv_coord_t size = LV_COORD_MIN;
 801739e:	4f74      	ldr	r7, [pc, #464]	; (8017570 <grid_update+0x2f0>)
 80173a0:	e7bd      	b.n	801731e <grid_update+0x9e>
    for(i = 0; i < c->row_num; i++) {
 80173a2:	9f06      	ldr	r7, [sp, #24]
 80173a4:	2c00      	cmp	r4, #0
 80173a6:	d037      	beq.n	8017418 <grid_update+0x198>
    lv_coord_t grid_h = 0;
 80173a8:	2500      	movs	r5, #0
    uint32_t row_fr_cnt = 0;
 80173aa:	462c      	mov	r4, r5
    for(i = 0; i < c->row_num; i++) {
 80173ac:	462a      	mov	r2, r5
        if(IS_FR(x)) {
 80173ae:	f641 769a 	movw	r6, #8090	; 0x1f9a
 80173b2:	e00b      	b.n	80173cc <grid_update+0x14c>
        else if(IS_CONTENT(x)) {
 80173b4:	42b3      	cmp	r3, r6
            grid_h += c->h[i];
 80173b6:	bf07      	ittee	eq
 80173b8:	9b12      	ldreq	r3, [sp, #72]	; 0x48
 80173ba:	5a5b      	ldrheq	r3, [r3, r1]
            c->h[i] = x;
 80173bc:	9812      	ldrne	r0, [sp, #72]	; 0x48
 80173be:	5243      	strhne	r3, [r0, r1]
            grid_h += x;
 80173c0:	441d      	add	r5, r3
 80173c2:	b22d      	sxth	r5, r5
    for(i = 0; i < c->row_num; i++) {
 80173c4:	3201      	adds	r2, #1
 80173c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80173c8:	429a      	cmp	r2, r3
 80173ca:	d20a      	bcs.n	80173e2 <grid_update+0x162>
        lv_coord_t x = row_templ[i];
 80173cc:	0051      	lsls	r1, r2, #1
 80173ce:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
        if(IS_FR(x)) {
 80173d2:	42b3      	cmp	r3, r6
 80173d4:	ddee      	ble.n	80173b4 <grid_update+0x134>
            row_fr_cnt += GET_FR(x);
 80173d6:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 80173da:	3b1b      	subs	r3, #27
 80173dc:	441c      	add	r4, r3
 80173de:	e7f1      	b.n	80173c4 <grid_update+0x144>
    lv_coord_t grid_h = 0;
 80173e0:	2500      	movs	r5, #0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_row(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80173e2:	2214      	movs	r2, #20
 80173e4:	2100      	movs	r1, #0
 80173e6:	4650      	mov	r0, sl
 80173e8:	f7f3 fd60 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80173ec:	b206      	sxth	r6, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 80173ee:	4650      	mov	r0, sl
 80173f0:	f7f0 ff06 	bl	8008200 <lv_obj_get_content_height>
 80173f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80173f6:	1e5a      	subs	r2, r3, #1
 80173f8:	fb02 0016 	mls	r0, r2, r6, r0
    lv_coord_t free_h = cont_h - grid_h;
 80173fc:	1b45      	subs	r5, r0, r5
 80173fe:	b22d      	sxth	r5, r5
    if(free_h < 0) free_h = 0;
 8017400:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    for(i = 0; i < c->row_num; i++) {
 8017404:	b353      	cbz	r3, 801745c <grid_update+0x1dc>
 8017406:	9b05      	ldr	r3, [sp, #20]
 8017408:	1e98      	subs	r0, r3, #2
    int32_t last_fr_x = 0;
 801740a:	2200      	movs	r2, #0
    int32_t last_fr_i = -1;
 801740c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for(i = 0; i < c->row_num; i++) {
 8017410:	4611      	mov	r1, r2
        if(IS_FR(x)) {
 8017412:	f641 779a 	movw	r7, #8090	; 0x1f9a
 8017416:	e005      	b.n	8017424 <grid_update+0x1a4>
    lv_coord_t grid_h = 0;
 8017418:	2500      	movs	r5, #0
 801741a:	e7e2      	b.n	80173e2 <grid_update+0x162>
    for(i = 0; i < c->row_num; i++) {
 801741c:	3101      	adds	r1, #1
 801741e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017420:	4299      	cmp	r1, r3
 8017422:	d210      	bcs.n	8017446 <grid_update+0x1c6>
        lv_coord_t x = row_templ[i];
 8017424:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
        if(IS_FR(x)) {
 8017428:	42bb      	cmp	r3, r7
 801742a:	ddf7      	ble.n	801741c <grid_update+0x19c>
            lv_coord_t f = GET_FR(x);
 801742c:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 8017430:	3b1b      	subs	r3, #27
            c->h[i] = (free_h * f) / row_fr_cnt;
 8017432:	b21a      	sxth	r2, r3
 8017434:	fb02 f605 	mul.w	r6, r2, r5
 8017438:	fbb6 f6f4 	udiv	r6, r6, r4
 801743c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801743e:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
            last_fr_i = i;
 8017442:	460e      	mov	r6, r1
            last_fr_x = f;
 8017444:	e7ea      	b.n	801741c <grid_update+0x19c>
    if(last_fr_i >= 0) {
 8017446:	2e00      	cmp	r6, #0
 8017448:	db08      	blt.n	801745c <grid_update+0x1dc>
        c->h[last_fr_i] = free_h - ((free_h * (row_fr_cnt - last_fr_x)) / row_fr_cnt);
 801744a:	1aa3      	subs	r3, r4, r2
 801744c:	fb05 f303 	mul.w	r3, r5, r3
 8017450:	fbb3 f4f4 	udiv	r4, r3, r4
 8017454:	1b2c      	subs	r4, r5, r4
 8017456:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017458:	f823 4016 	strh.w	r4, [r3, r6, lsl #1]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 801745c:	4b3f      	ldr	r3, [pc, #252]	; (801755c <grid_update+0x2dc>)
 801745e:	881a      	ldrh	r2, [r3, #0]
 8017460:	2100      	movs	r1, #0
 8017462:	4650      	mov	r0, sl
 8017464:	f7f3 fd22 	bl	800aeac <lv_obj_get_style_prop>
 8017468:	4604      	mov	r4, r0
 801746a:	9005      	str	r0, [sp, #20]
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 801746c:	4650      	mov	r0, sl
 801746e:	f7f0 feaa 	bl	80081c6 <lv_obj_get_content_width>
 8017472:	9006      	str	r0, [sp, #24]
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 8017474:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017478:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801747c:	429a      	cmp	r2, r3
 801747e:	d01d      	beq.n	80174bc <grid_update+0x23c>
 8017480:	4622      	mov	r2, r4
 8017482:	2300      	movs	r3, #0
 8017484:	f641 74ff 	movw	r4, #8191	; 0x1fff
 8017488:	3301      	adds	r3, #1
 801748a:	0058      	lsls	r0, r3, #1
 801748c:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
 8017490:	42a1      	cmp	r1, r4
 8017492:	d1f9      	bne.n	8017488 <grid_update+0x208>
    c->col_num = count_tracks(col_templ);
 8017494:	9313      	str	r3, [sp, #76]	; 0x4c
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 8017496:	f00a fd9b 	bl	8021fd0 <lv_mem_buf_get>
 801749a:	900f      	str	r0, [sp, #60]	; 0x3c
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 801749c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801749e:	0040      	lsls	r0, r0, #1
 80174a0:	f00a fd96 	bl	8021fd0 <lv_mem_buf_get>
 80174a4:	9011      	str	r0, [sp, #68]	; 0x44
    for(i = 0; i < c->col_num; i++) {
 80174a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80174a8:	2c00      	cmp	r4, #0
 80174aa:	d07d      	beq.n	80175a8 <grid_update+0x328>
 80174ac:	9b05      	ldr	r3, [sp, #20]
 80174ae:	1e9f      	subs	r7, r3, #2
 80174b0:	46b8      	mov	r8, r7
 80174b2:	2600      	movs	r6, #0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80174b4:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8017564 <grid_update+0x2e4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 80174b8:	9707      	str	r7, [sp, #28]
 80174ba:	e03a      	b.n	8017532 <grid_update+0x2b2>
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 80174bc:	2000      	movs	r0, #0
 80174be:	4603      	mov	r3, r0
 80174c0:	e7e8      	b.n	8017494 <grid_update+0x214>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 80174c2:	3401      	adds	r4, #1
 80174c4:	4650      	mov	r0, sl
 80174c6:	f7f4 fc4c 	bl	800bd62 <lv_obj_get_child_cnt>
 80174ca:	4284      	cmp	r4, r0
 80174cc:	d225      	bcs.n	801751a <grid_update+0x29a>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 80174ce:	4621      	mov	r1, r4
 80174d0:	4650      	mov	r0, sl
 80174d2:	f7f4 fc31 	bl	800bd38 <lv_obj_get_child>
 80174d6:	4605      	mov	r5, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80174d8:	4659      	mov	r1, fp
 80174da:	f7ef fde2 	bl	80070a2 <lv_obj_has_flag_any>
 80174de:	2800      	cmp	r0, #0
 80174e0:	d1ef      	bne.n	80174c2 <grid_update+0x242>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 80174e2:	4b24      	ldr	r3, [pc, #144]	; (8017574 <grid_update+0x2f4>)
 80174e4:	881a      	ldrh	r2, [r3, #0]
 80174e6:	2100      	movs	r1, #0
 80174e8:	4628      	mov	r0, r5
 80174ea:	f7f3 fcdf 	bl	800aeac <lv_obj_get_style_prop>
                if(col_span != 1) continue;
 80174ee:	b2c0      	uxtb	r0, r0
 80174f0:	2801      	cmp	r0, #1
 80174f2:	d1e6      	bne.n	80174c2 <grid_update+0x242>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 80174f4:	4b20      	ldr	r3, [pc, #128]	; (8017578 <grid_update+0x2f8>)
 80174f6:	881a      	ldrh	r2, [r3, #0]
 80174f8:	2100      	movs	r1, #0
 80174fa:	4628      	mov	r0, r5
 80174fc:	f7f3 fcd6 	bl	800aeac <lv_obj_get_style_prop>
                uint32_t col_pos = get_col_pos(item);
 8017500:	b2c0      	uxtb	r0, r0
                if(col_pos != i) continue;
 8017502:	4286      	cmp	r6, r0
 8017504:	d1dd      	bne.n	80174c2 <grid_update+0x242>
                size = LV_MAX(size, lv_obj_get_width(item));
 8017506:	4628      	mov	r0, r5
 8017508:	f7f0 fe51 	bl	80081ae <lv_obj_get_width>
 801750c:	42b8      	cmp	r0, r7
 801750e:	dbd8      	blt.n	80174c2 <grid_update+0x242>
 8017510:	4628      	mov	r0, r5
 8017512:	f7f0 fe4c 	bl	80081ae <lv_obj_get_width>
 8017516:	4607      	mov	r7, r0
 8017518:	e7d3      	b.n	80174c2 <grid_update+0x242>
            if(size >= 0) c->w[i] = size;
 801751a:	2f00      	cmp	r7, #0
 801751c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801751e:	bfae      	itee	ge
 8017520:	f823 7009 	strhge.w	r7, [r3, r9]
            else c->w[i] = 0;
 8017524:	2200      	movlt	r2, #0
 8017526:	f823 2009 	strhlt.w	r2, [r3, r9]
    for(i = 0; i < c->col_num; i++) {
 801752a:	3601      	adds	r6, #1
 801752c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801752e:	42a6      	cmp	r6, r4
 8017530:	d20a      	bcs.n	8017548 <grid_update+0x2c8>
        if(IS_CONTENT(col_templ[i])) {
 8017532:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8017536:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
 801753a:	f641 739a 	movw	r3, #8090	; 0x1f9a
 801753e:	429a      	cmp	r2, r3
 8017540:	d1f3      	bne.n	801752a <grid_update+0x2aa>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8017542:	2400      	movs	r4, #0
        lv_coord_t size = LV_COORD_MIN;
 8017544:	4f0a      	ldr	r7, [pc, #40]	; (8017570 <grid_update+0x2f0>)
 8017546:	e7bd      	b.n	80174c4 <grid_update+0x244>
    for(i = 0; i < c->col_num; i++) {
 8017548:	9f07      	ldr	r7, [sp, #28]
 801754a:	2c00      	cmp	r4, #0
 801754c:	d046      	beq.n	80175dc <grid_update+0x35c>
    lv_coord_t grid_w = 0;
 801754e:	2500      	movs	r5, #0
    uint32_t col_fr_cnt = 0;
 8017550:	462c      	mov	r4, r5
    for(i = 0; i < c->col_num; i++) {
 8017552:	462a      	mov	r2, r5
        if(IS_FR(x)) {
 8017554:	f641 769a 	movw	r6, #8090	; 0x1f9a
 8017558:	e01c      	b.n	8017594 <grid_update+0x314>
 801755a:	bf00      	nop
 801755c:	20002736 	.word	0x20002736
 8017560:	2000273a 	.word	0x2000273a
 8017564:	00060001 	.word	0x00060001
 8017568:	2000272e 	.word	0x2000272e
 801756c:	2000272c 	.word	0x2000272c
 8017570:	ffffe001 	.word	0xffffe001
 8017574:	2000272a 	.word	0x2000272a
 8017578:	20002728 	.word	0x20002728
        else if(IS_CONTENT(x)) {
 801757c:	42b3      	cmp	r3, r6
            grid_w += c->w[i];
 801757e:	bf07      	ittee	eq
 8017580:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8017582:	5a5b      	ldrheq	r3, [r3, r1]
            c->w[i] = x;
 8017584:	9811      	ldrne	r0, [sp, #68]	; 0x44
 8017586:	5243      	strhne	r3, [r0, r1]
            grid_w += x;
 8017588:	441d      	add	r5, r3
 801758a:	b22d      	sxth	r5, r5
    for(i = 0; i < c->col_num; i++) {
 801758c:	3201      	adds	r2, #1
 801758e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017590:	429a      	cmp	r2, r3
 8017592:	d20a      	bcs.n	80175aa <grid_update+0x32a>
        lv_coord_t x = col_templ[i];
 8017594:	0051      	lsls	r1, r2, #1
 8017596:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
        if(IS_FR(x)) {
 801759a:	42b3      	cmp	r3, r6
 801759c:	ddee      	ble.n	801757c <grid_update+0x2fc>
            col_fr_cnt += GET_FR(x);
 801759e:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 80175a2:	3b1b      	subs	r3, #27
 80175a4:	441c      	add	r4, r3
 80175a6:	e7f1      	b.n	801758c <grid_update+0x30c>
    lv_coord_t grid_w = 0;
 80175a8:	2500      	movs	r5, #0
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80175aa:	2215      	movs	r2, #21
 80175ac:	2100      	movs	r1, #0
 80175ae:	4650      	mov	r0, sl
 80175b0:	f7f3 fc7c 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80175b4:	b200      	sxth	r0, r0
    cont_w -= col_gap * (c->col_num - 1);
 80175b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175b8:	1e5a      	subs	r2, r3, #1
 80175ba:	9906      	ldr	r1, [sp, #24]
 80175bc:	fb02 1010 	mls	r0, r2, r0, r1
    lv_coord_t free_w = cont_w - grid_w;
 80175c0:	1b45      	subs	r5, r0, r5
 80175c2:	b22d      	sxth	r5, r5
    if(free_w < 0) free_w = 0;
 80175c4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    for(i = 0; i < c->col_num; i++) {
 80175c8:	b353      	cbz	r3, 8017620 <grid_update+0x3a0>
 80175ca:	9b05      	ldr	r3, [sp, #20]
 80175cc:	1e98      	subs	r0, r3, #2
    int32_t last_fr_x = 0;
 80175ce:	2200      	movs	r2, #0
    int32_t last_fr_i = -1;
 80175d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    for(i = 0; i < c->col_num; i++) {
 80175d4:	4611      	mov	r1, r2
        if(IS_FR(x)) {
 80175d6:	f641 779a 	movw	r7, #8090	; 0x1f9a
 80175da:	e005      	b.n	80175e8 <grid_update+0x368>
    lv_coord_t grid_w = 0;
 80175dc:	2500      	movs	r5, #0
 80175de:	e7e4      	b.n	80175aa <grid_update+0x32a>
    for(i = 0; i < c->col_num; i++) {
 80175e0:	3101      	adds	r1, #1
 80175e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175e4:	4299      	cmp	r1, r3
 80175e6:	d210      	bcs.n	801760a <grid_update+0x38a>
        lv_coord_t x = col_templ[i];
 80175e8:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
        if(IS_FR(x)) {
 80175ec:	42bb      	cmp	r3, r7
 80175ee:	ddf7      	ble.n	80175e0 <grid_update+0x360>
            lv_coord_t f = GET_FR(x);
 80175f0:	f5a3 53fc 	sub.w	r3, r3, #8064	; 0x1f80
 80175f4:	3b1b      	subs	r3, #27
            c->w[i] = (free_w * f) / col_fr_cnt;
 80175f6:	b21a      	sxth	r2, r3
 80175f8:	fb02 f605 	mul.w	r6, r2, r5
 80175fc:	fbb6 f6f4 	udiv	r6, r6, r4
 8017600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017602:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
            last_fr_i = i;
 8017606:	460e      	mov	r6, r1
            last_fr_x = f;
 8017608:	e7ea      	b.n	80175e0 <grid_update+0x360>
    if(last_fr_i >= 0) {
 801760a:	2e00      	cmp	r6, #0
 801760c:	db08      	blt.n	8017620 <grid_update+0x3a0>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 801760e:	1aa3      	subs	r3, r4, r2
 8017610:	fb05 f303 	mul.w	r3, r5, r3
 8017614:	fbb3 f4f4 	udiv	r4, r3, r4
 8017618:	1b2c      	subs	r4, r5, r4
 801761a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801761c:	f823 4016 	strh.w	r4, [r3, r6, lsl #1]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8017620:	2215      	movs	r2, #21
 8017622:	2100      	movs	r1, #0
 8017624:	4650      	mov	r0, sl
 8017626:	f7f3 fc41 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801762a:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801762c:	2214      	movs	r2, #20
 801762e:	2100      	movs	r1, #0
 8017630:	4650      	mov	r0, sl
 8017632:	f7f3 fc3b 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017636:	b206      	sxth	r6, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8017638:	2216      	movs	r2, #22
 801763a:	2100      	movs	r1, #0
 801763c:	4650      	mov	r0, sl
 801763e:	f7f3 fc35 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8017642:	b2c2      	uxtb	r2, r0
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 8017644:	2a01      	cmp	r2, #1
 8017646:	bf14      	ite	ne
 8017648:	f04f 0800 	movne.w	r8, #0
 801764c:	f04f 0801 	moveq.w	r8, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8017650:	2201      	movs	r2, #1
 8017652:	2100      	movs	r1, #0
 8017654:	4650      	mov	r0, sl
 8017656:	f7f3 fc29 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801765a:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801765c:	2204      	movs	r2, #4
 801765e:	2100      	movs	r1, #0
 8017660:	4650      	mov	r0, sl
 8017662:	f7f3 fc23 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017666:	b204      	sxth	r4, r0
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 8017668:	f242 73d1 	movw	r3, #10193	; 0x27d1
 801766c:	429d      	cmp	r5, r3
 801766e:	bf03      	ittte	eq
 8017670:	f89a 9023 	ldrbeq.w	r9, [sl, #35]	; 0x23
 8017674:	f089 0904 	eoreq.w	r9, r9, #4
 8017678:	f3c9 0980 	ubfxeq	r9, r9, #2, #1
 801767c:	f04f 0900 	movne.w	r9, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8017680:	4650      	mov	r0, sl
 8017682:	f7f0 fda0 	bl	80081c6 <lv_obj_get_content_width>
 8017686:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 8017688:	4b51      	ldr	r3, [pc, #324]	; (80177d0 <grid_update+0x550>)
 801768a:	881a      	ldrh	r2, [r3, #0]
 801768c:	2100      	movs	r1, #0
 801768e:	4650      	mov	r0, sl
 8017690:	f7f3 fc0c 	bl	800aeac <lv_obj_get_style_prop>
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 8017694:	f8cd 800c 	str.w	r8, [sp, #12]
 8017698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801769a:	9302      	str	r3, [sp, #8]
 801769c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801769e:	9301      	str	r3, [sp, #4]
 80176a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80176a2:	9300      	str	r3, [sp, #0]
 80176a4:	463b      	mov	r3, r7
 80176a6:	b2c2      	uxtb	r2, r0
 80176a8:	4649      	mov	r1, r9
 80176aa:	4628      	mov	r0, r5
 80176ac:	f7ff fd14 	bl	80170d8 <grid_align>
 80176b0:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 80176b4:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80176b8:	429c      	cmp	r4, r3
 80176ba:	bf03      	ittte	eq
 80176bc:	f89a 5023 	ldrbeq.w	r5, [sl, #35]	; 0x23
 80176c0:	f085 0502 	eoreq.w	r5, r5, #2
 80176c4:	f3c5 0540 	ubfxeq	r5, r5, #1, #1
 80176c8:	2500      	movne	r5, #0
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 80176ca:	4650      	mov	r0, sl
 80176cc:	f7f0 fd98 	bl	8008200 <lv_obj_get_content_height>
 80176d0:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 80176d2:	4b40      	ldr	r3, [pc, #256]	; (80177d4 <grid_update+0x554>)
 80176d4:	881a      	ldrh	r2, [r3, #0]
 80176d6:	2100      	movs	r1, #0
 80176d8:	4650      	mov	r0, sl
 80176da:	f7f3 fbe7 	bl	800aeac <lv_obj_get_style_prop>
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 80176de:	2300      	movs	r3, #0
 80176e0:	9303      	str	r3, [sp, #12]
 80176e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176e4:	9302      	str	r3, [sp, #8]
 80176e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80176e8:	9301      	str	r3, [sp, #4]
 80176ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176ec:	9300      	str	r3, [sp, #0]
 80176ee:	4633      	mov	r3, r6
 80176f0:	b2c2      	uxtb	r2, r0
 80176f2:	4629      	mov	r1, r5
 80176f4:	4620      	mov	r0, r4
 80176f6:	f7ff fcef 	bl	80170d8 <grid_align>
 80176fa:	f8ad 0056 	strh.w	r0, [sp, #86]	; 0x56
    lv_memset_00(&hint, sizeof(hint));
 80176fe:	210c      	movs	r1, #12
 8017700:	a80c      	add	r0, sp, #48	; 0x30
 8017702:	f00a fe93 	bl	802242c <lv_memset_00>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017706:	2232      	movs	r2, #50	; 0x32
 8017708:	2100      	movs	r1, #0
 801770a:	4650      	mov	r0, sl
 801770c:	f7f3 fbce 	bl	800aeac <lv_obj_get_style_prop>
 8017710:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8017712:	2212      	movs	r2, #18
 8017714:	2100      	movs	r1, #0
 8017716:	4650      	mov	r0, sl
 8017718:	f7f3 fbc8 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 801771c:	b2ad      	uxth	r5, r5
 801771e:	182c      	adds	r4, r5, r0
 8017720:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8017722:	2210      	movs	r2, #16
 8017724:	2100      	movs	r1, #0
 8017726:	4650      	mov	r0, sl
 8017728:	f7f3 fbc0 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 801772c:	4405      	add	r5, r0
 801772e:	b2ad      	uxth	r5, r5
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 8017730:	f8ba 3014 	ldrh.w	r3, [sl, #20]
 8017734:	441c      	add	r4, r3
 8017736:	b2a4      	uxth	r4, r4
 8017738:	4650      	mov	r0, sl
 801773a:	f7f2 f919 	bl	8009970 <lv_obj_get_scroll_x>
 801773e:	1a24      	subs	r4, r4, r0
 8017740:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 8017744:	f8ba 3016 	ldrh.w	r3, [sl, #22]
 8017748:	441d      	add	r5, r3
 801774a:	b2ad      	uxth	r5, r5
 801774c:	4650      	mov	r0, sl
 801774e:	f7f2 f917 	bl	8009980 <lv_obj_get_scroll_y>
 8017752:	1a2d      	subs	r5, r5, r0
 8017754:	f8ad 503a 	strh.w	r5, [sp, #58]	; 0x3a
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8017758:	f8da 3008 	ldr.w	r3, [sl, #8]
 801775c:	685a      	ldr	r2, [r3, #4]
 801775e:	2a00      	cmp	r2, #0
 8017760:	f000 81c0 	beq.w	8017ae4 <grid_update+0x864>
 8017764:	f04f 0b00 	mov.w	fp, #0
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8017768:	f8cd a014 	str.w	sl, [sp, #20]
 801776c:	e0c5      	b.n	80178fa <grid_update+0x67a>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 801776e:	f1b8 0f00 	cmp.w	r8, #0
 8017772:	f000 81e1 	beq.w	8017b38 <grid_update+0x8b8>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 8017776:	f1b8 0f02 	cmp.w	r8, #2
 801777a:	f040 8124 	bne.w	80179c6 <grid_update+0x746>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801777e:	8b25      	ldrh	r5, [r4, #24]
 8017780:	3501      	adds	r5, #1
 8017782:	8aa3      	ldrh	r3, [r4, #20]
 8017784:	1aed      	subs	r5, r5, r3
 8017786:	b22d      	sxth	r5, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017788:	8b66      	ldrh	r6, [r4, #26]
 801778a:	3601      	adds	r6, #1
 801778c:	8ae3      	ldrh	r3, [r4, #22]
 801778e:	1af6      	subs	r6, r6, r3
 8017790:	b236      	sxth	r6, r6
    switch(col_align) {
 8017792:	e12e      	b.n	80179f2 <grid_update+0x772>
            x = c->x[col_pos];
 8017794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017796:	f933 8017 	ldrsh.w	r8, [r3, r7, lsl #1]
            item->w_layout = 1;
 801779a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801779e:	f043 0304 	orr.w	r3, r3, #4
 80177a2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_w = col_w;
 80177a6:	9d06      	ldr	r5, [sp, #24]
            break;
 80177a8:	e12c      	b.n	8017a04 <grid_update+0x784>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 80177aa:	9b06      	ldr	r3, [sp, #24]
 80177ac:	eba3 0805 	sub.w	r8, r3, r5
 80177b0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80177b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177b6:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80177ba:	eb03 0868 	add.w	r8, r3, r8, asr #1
 80177be:	fa0f f888 	sxth.w	r8, r8
            item->w_layout = 0;
 80177c2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80177c6:	f36f 0382 	bfc	r3, #2, #1
 80177ca:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 80177ce:	e119      	b.n	8017a04 <grid_update+0x784>
 80177d0:	20002734 	.word	0x20002734
 80177d4:	20002738 	.word	0x20002738
            y = c->y[row_pos];
 80177d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177da:	f933 701a 	ldrsh.w	r7, [r3, sl, lsl #1]
            item->h_layout = 1;
 80177de:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80177e2:	f043 0302 	orr.w	r3, r3, #2
 80177e6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            item_h = row_h;
 80177ea:	9e07      	ldr	r6, [sp, #28]
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 80177ec:	4620      	mov	r0, r4
 80177ee:	f7f0 fcde 	bl	80081ae <lv_obj_get_width>
 80177f2:	42a8      	cmp	r0, r5
 80177f4:	f000 813d 	beq.w	8017a72 <grid_update+0x7f2>
    dest->x1 = src->x1;
 80177f8:	8aa3      	ldrh	r3, [r4, #20]
 80177fa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    dest->y1 = src->y1;
 80177fe:	8ae3      	ldrh	r3, [r4, #22]
 8017800:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dest->x2 = src->x2;
 8017804:	8b23      	ldrh	r3, [r4, #24]
 8017806:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    dest->y2 = src->y2;
 801780a:	8b63      	ldrh	r3, [r4, #26]
 801780c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        lv_obj_invalidate(item);
 8017810:	4620      	mov	r0, r4
 8017812:	f7f0 ff13 	bl	800863c <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 8017816:	f104 0314 	add.w	r3, r4, #20
 801781a:	4629      	mov	r1, r5
 801781c:	461d      	mov	r5, r3
 801781e:	4618      	mov	r0, r3
 8017820:	f009 fc39 	bl	8021096 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 8017824:	4631      	mov	r1, r6
 8017826:	4628      	mov	r0, r5
 8017828:	f009 fc3a 	bl	80210a0 <lv_area_set_height>
        lv_obj_invalidate(item);
 801782c:	4620      	mov	r0, r4
 801782e:	f7f0 ff05 	bl	800863c <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 8017832:	aa0a      	add	r2, sp, #40	; 0x28
 8017834:	2129      	movs	r1, #41	; 0x29
 8017836:	4620      	mov	r0, r4
 8017838:	f7ec fdc4 	bl	80043c4 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 801783c:	4620      	mov	r0, r4
 801783e:	f7f4 fa77 	bl	800bd30 <lv_obj_get_parent>
 8017842:	4622      	mov	r2, r4
 8017844:	2122      	movs	r1, #34	; 0x22
 8017846:	f7ec fdbd 	bl	80043c4 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801784a:	226a      	movs	r2, #106	; 0x6a
 801784c:	2100      	movs	r1, #0
 801784e:	4620      	mov	r0, r4
 8017850:	f7f3 fb2c 	bl	800aeac <lv_obj_get_style_prop>
 8017854:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8017856:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 801785a:	226b      	movs	r2, #107	; 0x6b
 801785c:	2100      	movs	r1, #0
 801785e:	4620      	mov	r0, r4
 8017860:	f7f3 fb24 	bl	800aeac <lv_obj_get_style_prop>
 8017864:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
 8017866:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t w = lv_obj_get_width(item);
 801786a:	4620      	mov	r0, r4
 801786c:	f7f0 fc9f 	bl	80081ae <lv_obj_get_width>
 8017870:	9006      	str	r0, [sp, #24]
    lv_coord_t h = lv_obj_get_height(item);
 8017872:	4620      	mov	r0, r4
 8017874:	f7f0 fca1 	bl	80081ba <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8017878:	f406 46c0 	and.w	r6, r6, #24576	; 0x6000
 801787c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8017880:	f000 80fe 	beq.w	8017a80 <grid_update+0x800>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8017884:	f405 45c0 	and.w	r5, r5, #24576	; 0x6000
 8017888:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 801788c:	f000 8111 	beq.w	8017ab2 <grid_update+0x832>
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 8017890:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017894:	8aa2      	ldrh	r2, [r4, #20]
 8017896:	1a9b      	subs	r3, r3, r2
 8017898:	4498      	add	r8, r3
 801789a:	44c2      	add	sl, r8
 801789c:	fa1f fa8a 	uxth.w	sl, sl
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 80178a0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80178a4:	8ae2      	ldrh	r2, [r4, #22]
 80178a6:	1a9b      	subs	r3, r3, r2
 80178a8:	441f      	add	r7, r3
 80178aa:	44b9      	add	r9, r7
 80178ac:	fa1f f989 	uxth.w	r9, r9
    if(diff_x || diff_y) {
 80178b0:	ea5a 0309 	orrs.w	r3, sl, r9
 80178b4:	d019      	beq.n	80178ea <grid_update+0x66a>
        lv_obj_invalidate(item);
 80178b6:	4620      	mov	r0, r4
 80178b8:	f7f0 fec0 	bl	800863c <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 80178bc:	8aa3      	ldrh	r3, [r4, #20]
 80178be:	4453      	add	r3, sl
 80178c0:	82a3      	strh	r3, [r4, #20]
        item->coords.x2 += diff_x;
 80178c2:	8b23      	ldrh	r3, [r4, #24]
 80178c4:	4453      	add	r3, sl
 80178c6:	8323      	strh	r3, [r4, #24]
        item->coords.y1 += diff_y;
 80178c8:	8ae3      	ldrh	r3, [r4, #22]
 80178ca:	444b      	add	r3, r9
 80178cc:	82e3      	strh	r3, [r4, #22]
        item->coords.y2 += diff_y;
 80178ce:	8b63      	ldrh	r3, [r4, #26]
 80178d0:	444b      	add	r3, r9
 80178d2:	8363      	strh	r3, [r4, #26]
        lv_obj_invalidate(item);
 80178d4:	4620      	mov	r0, r4
 80178d6:	f7f0 feb1 	bl	800863c <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, false);
 80178da:	2300      	movs	r3, #0
 80178dc:	fa0f f289 	sxth.w	r2, r9
 80178e0:	fa0f f18a 	sxth.w	r1, sl
 80178e4:	4620      	mov	r0, r4
 80178e6:	f7f0 fd19 	bl	800831c <lv_obj_move_children_by>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 80178ea:	f10b 0b01 	add.w	fp, fp, #1
 80178ee:	9b05      	ldr	r3, [sp, #20]
 80178f0:	689b      	ldr	r3, [r3, #8]
 80178f2:	685a      	ldr	r2, [r3, #4]
 80178f4:	455a      	cmp	r2, fp
 80178f6:	f240 80f3 	bls.w	8017ae0 <grid_update+0x860>
        lv_obj_t * item = cont->spec_attr->children[i];
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 8017900:	499d      	ldr	r1, [pc, #628]	; (8017b78 <grid_update+0x8f8>)
 8017902:	4620      	mov	r0, r4
 8017904:	f7ef fbcd 	bl	80070a2 <lv_obj_has_flag_any>
 8017908:	2800      	cmp	r0, #0
 801790a:	d1ee      	bne.n	80178ea <grid_update+0x66a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 801790c:	4b9b      	ldr	r3, [pc, #620]	; (8017b7c <grid_update+0x8fc>)
 801790e:	881a      	ldrh	r2, [r3, #0]
 8017910:	2100      	movs	r1, #0
 8017912:	4620      	mov	r0, r4
 8017914:	f7f3 faca 	bl	800aeac <lv_obj_get_style_prop>
 8017918:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801791a:	4b99      	ldr	r3, [pc, #612]	; (8017b80 <grid_update+0x900>)
 801791c:	881a      	ldrh	r2, [r3, #0]
 801791e:	2100      	movs	r1, #0
 8017920:	4620      	mov	r0, r4
 8017922:	f7f3 fac3 	bl	800aeac <lv_obj_get_style_prop>
    if(row_span == 0 || col_span == 0) return;
 8017926:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 801792a:	d0de      	beq.n	80178ea <grid_update+0x66a>
 801792c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8017930:	d0db      	beq.n	80178ea <grid_update+0x66a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 8017932:	4b94      	ldr	r3, [pc, #592]	; (8017b84 <grid_update+0x904>)
 8017934:	881a      	ldrh	r2, [r3, #0]
 8017936:	2100      	movs	r1, #0
 8017938:	4620      	mov	r0, r4
 801793a:	f7f3 fab7 	bl	800aeac <lv_obj_get_style_prop>
    uint32_t col_pos = get_col_pos(item);
 801793e:	b2c7      	uxtb	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 8017940:	4b91      	ldr	r3, [pc, #580]	; (8017b88 <grid_update+0x908>)
 8017942:	881a      	ldrh	r2, [r3, #0]
 8017944:	2100      	movs	r1, #0
 8017946:	4620      	mov	r0, r4
 8017948:	f7f3 fab0 	bl	800aeac <lv_obj_get_style_prop>
    uint32_t row_pos = get_row_pos(item);
 801794c:	fa5f fa80 	uxtb.w	sl, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 8017950:	4b8e      	ldr	r3, [pc, #568]	; (8017b8c <grid_update+0x90c>)
 8017952:	881a      	ldrh	r2, [r3, #0]
 8017954:	2100      	movs	r1, #0
 8017956:	4620      	mov	r0, r4
 8017958:	f7f3 faa8 	bl	800aeac <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_x_align(obj, 0);
 801795c:	fa5f f880 	uxtb.w	r8, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 8017960:	4b8b      	ldr	r3, [pc, #556]	; (8017b90 <grid_update+0x910>)
 8017962:	881a      	ldrh	r2, [r3, #0]
 8017964:	2100      	movs	r1, #0
 8017966:	4620      	mov	r0, r4
 8017968:	f7f3 faa0 	bl	800aeac <lv_obj_get_style_prop>
    return lv_obj_get_style_grid_cell_y_align(obj, 0);
 801796c:	fa5f f980 	uxtb.w	r9, r0
    lv_coord_t col_x1 = c->x[col_pos];
 8017970:	990f      	ldr	r1, [sp, #60]	; 0x3c
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 8017972:	443d      	add	r5, r7
 8017974:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017978:	4415      	add	r5, r2
 801797a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801797c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8017980:	f831 0015 	ldrh.w	r0, [r1, r5, lsl #1]
 8017984:	4403      	add	r3, r0
    lv_coord_t col_w = col_x2 - col_x1;
 8017986:	f831 1017 	ldrh.w	r1, [r1, r7, lsl #1]
 801798a:	1a5b      	subs	r3, r3, r1
 801798c:	b299      	uxth	r1, r3
 801798e:	9108      	str	r1, [sp, #32]
 8017990:	b21b      	sxth	r3, r3
 8017992:	9306      	str	r3, [sp, #24]
    lv_coord_t row_y1 = c->y[row_pos];
 8017994:	9910      	ldr	r1, [sp, #64]	; 0x40
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 8017996:	4456      	add	r6, sl
 8017998:	4416      	add	r6, r2
 801799a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801799c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 80179a0:	f831 2016 	ldrh.w	r2, [r1, r6, lsl #1]
 80179a4:	4413      	add	r3, r2
    lv_coord_t row_h = row_y2 - row_y1;
 80179a6:	f831 201a 	ldrh.w	r2, [r1, sl, lsl #1]
 80179aa:	1a9b      	subs	r3, r3, r2
 80179ac:	b29a      	uxth	r2, r3
 80179ae:	9209      	str	r2, [sp, #36]	; 0x24
 80179b0:	b21b      	sxth	r3, r3
 80179b2:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80179b4:	2216      	movs	r2, #22
 80179b6:	2100      	movs	r1, #0
 80179b8:	4620      	mov	r0, r4
 80179ba:	f7f3 fa77 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80179be:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80179c0:	2801      	cmp	r0, #1
 80179c2:	f43f aed4 	beq.w	801776e <grid_update+0x4ee>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80179c6:	8b25      	ldrh	r5, [r4, #24]
 80179c8:	3501      	adds	r5, #1
 80179ca:	8aa3      	ldrh	r3, [r4, #20]
 80179cc:	1aed      	subs	r5, r5, r3
 80179ce:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80179d0:	8b66      	ldrh	r6, [r4, #26]
 80179d2:	3601      	adds	r6, #1
 80179d4:	8ae3      	ldrh	r3, [r4, #22]
 80179d6:	1af6      	subs	r6, r6, r3
 80179d8:	b236      	sxth	r6, r6
    switch(col_align) {
 80179da:	f1b8 0f02 	cmp.w	r8, #2
 80179de:	f000 80b5 	beq.w	8017b4c <grid_update+0x8cc>
 80179e2:	f1b8 0f03 	cmp.w	r8, #3
 80179e6:	f43f aed5 	beq.w	8017794 <grid_update+0x514>
 80179ea:	f1b8 0f01 	cmp.w	r8, #1
 80179ee:	f43f aedc 	beq.w	80177aa <grid_update+0x52a>
            x = c->x[col_pos];
 80179f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179f4:	f933 8017 	ldrsh.w	r8, [r3, r7, lsl #1]
            item->w_layout = 0;
 80179f8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80179fc:	f36f 0382 	bfc	r3, #2, #1
 8017a00:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    switch(row_align) {
 8017a04:	f1b9 0f02 	cmp.w	r9, #2
 8017a08:	d021      	beq.n	8017a4e <grid_update+0x7ce>
 8017a0a:	f1b9 0f03 	cmp.w	r9, #3
 8017a0e:	f43f aee3 	beq.w	80177d8 <grid_update+0x558>
 8017a12:	f1b9 0f01 	cmp.w	r9, #1
 8017a16:	d009      	beq.n	8017a2c <grid_update+0x7ac>
            y = c->y[row_pos];
 8017a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a1a:	f933 701a 	ldrsh.w	r7, [r3, sl, lsl #1]
            item->h_layout = 0;
 8017a1e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017a22:	f36f 0341 	bfc	r3, #1, #1
 8017a26:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8017a2a:	e6df      	b.n	80177ec <grid_update+0x56c>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 8017a2c:	9b07      	ldr	r3, [sp, #28]
 8017a2e:	1b9f      	subs	r7, r3, r6
 8017a30:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8017a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a36:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 8017a3a:	eb03 0767 	add.w	r7, r3, r7, asr #1
 8017a3e:	b23f      	sxth	r7, r7
            item->h_layout = 0;
 8017a40:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017a44:	f36f 0341 	bfc	r3, #1, #1
 8017a48:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8017a4c:	e6ce      	b.n	80177ec <grid_update+0x56c>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 8017a4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a50:	f833 701a 	ldrh.w	r7, [r3, sl, lsl #1]
 8017a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a56:	443b      	add	r3, r7
 8017a58:	b29f      	uxth	r7, r3
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f7f0 fbad 	bl	80081ba <lv_obj_get_height>
 8017a60:	1a3f      	subs	r7, r7, r0
 8017a62:	b23f      	sxth	r7, r7
            item->h_layout = 0;
 8017a64:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017a68:	f36f 0341 	bfc	r3, #1, #1
 8017a6c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8017a70:	e6bc      	b.n	80177ec <grid_update+0x56c>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8017a72:	4620      	mov	r0, r4
 8017a74:	f7f0 fba1 	bl	80081ba <lv_obj_get_height>
 8017a78:	42b0      	cmp	r0, r6
 8017a7a:	f47f aebd 	bne.w	80177f8 <grid_update+0x578>
 8017a7e:	e6e4      	b.n	801784a <grid_update+0x5ca>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8017a80:	f42a 42c0 	bic.w	r2, sl, #24576	; 0x6000
 8017a84:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8017a88:	f73f aefc 	bgt.w	8017884 <grid_update+0x604>
 8017a8c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8017a90:	bfc8      	it	gt
 8017a92:	f5c2 727a 	rsbgt	r2, r2, #1000	; 0x3e8
 8017a96:	9b06      	ldr	r3, [sp, #24]
 8017a98:	fb02 f303 	mul.w	r3, r2, r3
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	4b3d      	ldr	r3, [pc, #244]	; (8017b94 <grid_update+0x914>)
 8017aa0:	fb83 1302 	smull	r1, r3, r3, r2
 8017aa4:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 8017aa8:	ebca 1a63 	rsb	sl, sl, r3, asr #5
 8017aac:	fa0f fa8a 	sxth.w	sl, sl
 8017ab0:	e6e8      	b.n	8017884 <grid_update+0x604>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8017ab2:	f429 43c0 	bic.w	r3, r9, #24576	; 0x6000
 8017ab6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8017aba:	f73f aee9 	bgt.w	8017890 <grid_update+0x610>
 8017abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017ac2:	bfc8      	it	gt
 8017ac4:	f5c3 737a 	rsbgt	r3, r3, #1000	; 0x3e8
 8017ac8:	fb00 f303 	mul.w	r3, r0, r3
 8017acc:	4a31      	ldr	r2, [pc, #196]	; (8017b94 <grid_update+0x914>)
 8017ace:	fb82 1203 	smull	r1, r2, r2, r3
 8017ad2:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8017ad6:	ebc9 1962 	rsb	r9, r9, r2, asr #5
 8017ada:	fa0f f989 	sxth.w	r9, r9
 8017ade:	e6d7      	b.n	8017890 <grid_update+0x610>
 8017ae0:	f8dd a014 	ldr.w	sl, [sp, #20]
    lv_mem_buf_release(calc->x);
 8017ae4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017ae6:	f00a fad5 	bl	8022094 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 8017aea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017aec:	f00a fad2 	bl	8022094 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 8017af0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017af2:	f00a facf 	bl	8022094 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 8017af6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017af8:	f00a facc 	bl	8022094 <lv_mem_buf_release>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8017afc:	2201      	movs	r2, #1
 8017afe:	2100      	movs	r1, #0
 8017b00:	4650      	mov	r0, sl
 8017b02:	f7f3 f9d3 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017b06:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8017b08:	2204      	movs	r2, #4
 8017b0a:	2100      	movs	r1, #0
 8017b0c:	4650      	mov	r0, sl
 8017b0e:	f7f3 f9cd 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017b12:	b200      	sxth	r0, r0
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8017b14:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8017b18:	429c      	cmp	r4, r3
 8017b1a:	d009      	beq.n	8017b30 <grid_update+0x8b0>
 8017b1c:	4298      	cmp	r0, r3
 8017b1e:	d007      	beq.n	8017b30 <grid_update+0x8b0>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8017b20:	2200      	movs	r2, #0
 8017b22:	212b      	movs	r1, #43	; 0x2b
 8017b24:	4650      	mov	r0, sl
 8017b26:	f7ec fc4d 	bl	80043c4 <lv_event_send>
}
 8017b2a:	b017      	add	sp, #92	; 0x5c
 8017b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
 8017b30:	4650      	mov	r0, sl
 8017b32:	f7f1 f899 	bl	8008c68 <lv_obj_refr_size>
 8017b36:	e7f3      	b.n	8017b20 <grid_update+0x8a0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8017b38:	8b25      	ldrh	r5, [r4, #24]
 8017b3a:	3501      	adds	r5, #1
 8017b3c:	8aa3      	ldrh	r3, [r4, #20]
 8017b3e:	1aed      	subs	r5, r5, r3
 8017b40:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017b42:	8b66      	ldrh	r6, [r4, #26]
 8017b44:	3601      	adds	r6, #1
 8017b46:	8ae3      	ldrh	r3, [r4, #22]
 8017b48:	1af6      	subs	r6, r6, r3
 8017b4a:	b236      	sxth	r6, r6
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 8017b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b4e:	f833 8017 	ldrh.w	r8, [r3, r7, lsl #1]
 8017b52:	9b08      	ldr	r3, [sp, #32]
 8017b54:	4443      	add	r3, r8
 8017b56:	fa1f f883 	uxth.w	r8, r3
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	f7f0 fb27 	bl	80081ae <lv_obj_get_width>
 8017b60:	eba8 0800 	sub.w	r8, r8, r0
 8017b64:	fa0f f888 	sxth.w	r8, r8
            item->w_layout = 0;
 8017b68:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8017b6c:	f36f 0382 	bfc	r3, #2, #1
 8017b70:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
            break;
 8017b74:	e746      	b.n	8017a04 <grid_update+0x784>
 8017b76:	bf00      	nop
 8017b78:	00060001 	.word	0x00060001
 8017b7c:	2000272a 	.word	0x2000272a
 8017b80:	2000272e 	.word	0x2000272e
 8017b84:	20002728 	.word	0x20002728
 8017b88:	2000272c 	.word	0x2000272c
 8017b8c:	20002730 	.word	0x20002730
 8017b90:	20002732 	.word	0x20002732
 8017b94:	51eb851f 	.word	0x51eb851f

08017b98 <lv_grid_init>:
{
 8017b98:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 8017b9a:	2100      	movs	r1, #0
 8017b9c:	481b      	ldr	r0, [pc, #108]	; (8017c0c <lv_grid_init+0x74>)
 8017b9e:	f7f0 fa79 	bl	8008094 <lv_layout_register>
 8017ba2:	4b1b      	ldr	r3, [pc, #108]	; (8017c10 <lv_grid_init+0x78>)
 8017ba4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017ba6:	2004      	movs	r0, #4
 8017ba8:	f00b f9d0 	bl	8022f4c <lv_style_register_prop>
 8017bac:	4b19      	ldr	r3, [pc, #100]	; (8017c14 <lv_grid_init+0x7c>)
 8017bae:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017bb0:	2004      	movs	r0, #4
 8017bb2:	f00b f9cb 	bl	8022f4c <lv_style_register_prop>
 8017bb6:	4b18      	ldr	r3, [pc, #96]	; (8017c18 <lv_grid_init+0x80>)
 8017bb8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017bba:	2004      	movs	r0, #4
 8017bbc:	f00b f9c6 	bl	8022f4c <lv_style_register_prop>
 8017bc0:	4b16      	ldr	r3, [pc, #88]	; (8017c1c <lv_grid_init+0x84>)
 8017bc2:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017bc4:	2004      	movs	r0, #4
 8017bc6:	f00b f9c1 	bl	8022f4c <lv_style_register_prop>
 8017bca:	4b15      	ldr	r3, [pc, #84]	; (8017c20 <lv_grid_init+0x88>)
 8017bcc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017bce:	2004      	movs	r0, #4
 8017bd0:	f00b f9bc 	bl	8022f4c <lv_style_register_prop>
 8017bd4:	4b13      	ldr	r3, [pc, #76]	; (8017c24 <lv_grid_init+0x8c>)
 8017bd6:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017bd8:	2004      	movs	r0, #4
 8017bda:	f00b f9b7 	bl	8022f4c <lv_style_register_prop>
 8017bde:	4b12      	ldr	r3, [pc, #72]	; (8017c28 <lv_grid_init+0x90>)
 8017be0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017be2:	2004      	movs	r0, #4
 8017be4:	f00b f9b2 	bl	8022f4c <lv_style_register_prop>
 8017be8:	4b10      	ldr	r3, [pc, #64]	; (8017c2c <lv_grid_init+0x94>)
 8017bea:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017bec:	2004      	movs	r0, #4
 8017bee:	f00b f9ad 	bl	8022f4c <lv_style_register_prop>
 8017bf2:	4b0f      	ldr	r3, [pc, #60]	; (8017c30 <lv_grid_init+0x98>)
 8017bf4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017bf6:	2004      	movs	r0, #4
 8017bf8:	f00b f9a8 	bl	8022f4c <lv_style_register_prop>
 8017bfc:	4b0d      	ldr	r3, [pc, #52]	; (8017c34 <lv_grid_init+0x9c>)
 8017bfe:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8017c00:	2004      	movs	r0, #4
 8017c02:	f00b f9a3 	bl	8022f4c <lv_style_register_prop>
 8017c06:	4b0c      	ldr	r3, [pc, #48]	; (8017c38 <lv_grid_init+0xa0>)
 8017c08:	8018      	strh	r0, [r3, #0]
}
 8017c0a:	bd08      	pop	{r3, pc}
 8017c0c:	08017281 	.word	0x08017281
 8017c10:	20002726 	.word	0x20002726
 8017c14:	20002736 	.word	0x20002736
 8017c18:	2000273a 	.word	0x2000273a
 8017c1c:	20002734 	.word	0x20002734
 8017c20:	20002738 	.word	0x20002738
 8017c24:	2000272e 	.word	0x2000272e
 8017c28:	2000272c 	.word	0x2000272c
 8017c2c:	2000272a 	.word	0x2000272a
 8017c30:	20002728 	.word	0x20002728
 8017c34:	20002730 	.word	0x20002730
 8017c38:	20002732 	.word	0x20002732

08017c3c <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 8017c3c:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 8017c3e:	f7ff f9bd 	bl	8016fbc <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
 8017c42:	f7ff ffa9 	bl	8017b98 <lv_grid_init>
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8017c46:	bd08      	pop	{r3, pc}

08017c48 <theme_apply>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 8017c48:	b570      	push	{r4, r5, r6, lr}
 8017c4a:	460c      	mov	r4, r1
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 8017c4c:	4608      	mov	r0, r1
 8017c4e:	f7f4 f86f 	bl	800bd30 <lv_obj_get_parent>
 8017c52:	b178      	cbz	r0, 8017c74 <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
        return;
    }

    if(lv_obj_check_type(obj, &lv_obj_class)) {
 8017c54:	49c2      	ldr	r1, [pc, #776]	; (8017f60 <theme_apply+0x318>)
 8017c56:	4620      	mov	r0, r4
 8017c58:	f7ef fc64 	bl	8007524 <lv_obj_check_type>
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	f000 808e 	beq.w	8017d7e <theme_apply+0x136>
#if LV_USE_TABVIEW
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8017c62:	4620      	mov	r0, r4
 8017c64:	f7f4 f864 	bl	800bd30 <lv_obj_get_parent>
 8017c68:	4605      	mov	r5, r0
        /*Tabview content area*/
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 8017c6a:	49be      	ldr	r1, [pc, #760]	; (8017f64 <theme_apply+0x31c>)
 8017c6c:	f7ef fc5a 	bl	8007524 <lv_obj_check_type>
 8017c70:	b1a0      	cbz	r0, 8017c9c <theme_apply+0x54>
#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->led, 0);
    }
#endif
}
 8017c72:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_add_style(obj, &styles->scr, 0);
 8017c74:	4dbc      	ldr	r5, [pc, #752]	; (8017f68 <theme_apply+0x320>)
 8017c76:	2200      	movs	r2, #0
 8017c78:	6829      	ldr	r1, [r5, #0]
 8017c7a:	4620      	mov	r0, r4
 8017c7c:	f7f3 fa9c 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017c80:	6829      	ldr	r1, [r5, #0]
 8017c82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017c86:	3108      	adds	r1, #8
 8017c88:	4620      	mov	r0, r4
 8017c8a:	f7f3 fa95 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017c8e:	6829      	ldr	r1, [r5, #0]
 8017c90:	4ab6      	ldr	r2, [pc, #728]	; (8017f6c <theme_apply+0x324>)
 8017c92:	3110      	adds	r1, #16
 8017c94:	4620      	mov	r0, r4
 8017c96:	f7f3 fa8f 	bl	800b1b8 <lv_obj_add_style>
        return;
 8017c9a:	e7ea      	b.n	8017c72 <theme_apply+0x2a>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 8017c9c:	4628      	mov	r0, r5
 8017c9e:	f7f4 f847 	bl	800bd30 <lv_obj_get_parent>
 8017ca2:	49b0      	ldr	r1, [pc, #704]	; (8017f64 <theme_apply+0x31c>)
 8017ca4:	f7ef fc3e 	bl	8007524 <lv_obj_check_type>
 8017ca8:	bb20      	cbnz	r0, 8017cf4 <theme_apply+0xac>
        if(lv_obj_get_index(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8017caa:	4620      	mov	r0, r4
 8017cac:	f7f4 f85f 	bl	800bd6e <lv_obj_get_index>
 8017cb0:	b930      	cbnz	r0, 8017cc0 <theme_apply+0x78>
 8017cb2:	4620      	mov	r0, r4
 8017cb4:	f7f4 f83c 	bl	800bd30 <lv_obj_get_parent>
 8017cb8:	49ad      	ldr	r1, [pc, #692]	; (8017f70 <theme_apply+0x328>)
 8017cba:	f7ef fc33 	bl	8007524 <lv_obj_check_type>
 8017cbe:	bb70      	cbnz	r0, 8017d1e <theme_apply+0xd6>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f7f4 f854 	bl	800bd6e <lv_obj_get_index>
 8017cc6:	2801      	cmp	r0, #1
 8017cc8:	d037      	beq.n	8017d3a <theme_apply+0xf2>
        lv_obj_add_style(obj, &styles->card, 0);
 8017cca:	4da7      	ldr	r5, [pc, #668]	; (8017f68 <theme_apply+0x320>)
 8017ccc:	6829      	ldr	r1, [r5, #0]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	3118      	adds	r1, #24
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	f7f3 fa70 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017cd8:	6829      	ldr	r1, [r5, #0]
 8017cda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017cde:	3108      	adds	r1, #8
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	f7f3 fa69 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017ce6:	6829      	ldr	r1, [r5, #0]
 8017ce8:	4aa0      	ldr	r2, [pc, #640]	; (8017f6c <theme_apply+0x324>)
 8017cea:	3110      	adds	r1, #16
 8017cec:	4620      	mov	r0, r4
 8017cee:	f7f3 fa63 	bl	800b1b8 <lv_obj_add_style>
 8017cf2:	e7be      	b.n	8017c72 <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8017cf4:	4d9c      	ldr	r5, [pc, #624]	; (8017f68 <theme_apply+0x320>)
 8017cf6:	6829      	ldr	r1, [r5, #0]
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	3180      	adds	r1, #128	; 0x80
 8017cfc:	4620      	mov	r0, r4
 8017cfe:	f7f3 fa5b 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017d02:	6829      	ldr	r1, [r5, #0]
 8017d04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017d08:	3108      	adds	r1, #8
 8017d0a:	4620      	mov	r0, r4
 8017d0c:	f7f3 fa54 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017d10:	6829      	ldr	r1, [r5, #0]
 8017d12:	4a96      	ldr	r2, [pc, #600]	; (8017f6c <theme_apply+0x324>)
 8017d14:	3110      	adds	r1, #16
 8017d16:	4620      	mov	r0, r4
 8017d18:	f7f3 fa4e 	bl	800b1b8 <lv_obj_add_style>
            return;
 8017d1c:	e7a9      	b.n	8017c72 <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8017d1e:	4d92      	ldr	r5, [pc, #584]	; (8017f68 <theme_apply+0x320>)
 8017d20:	6829      	ldr	r1, [r5, #0]
 8017d22:	2200      	movs	r2, #0
 8017d24:	3148      	adds	r1, #72	; 0x48
 8017d26:	4620      	mov	r0, r4
 8017d28:	f7f3 fa46 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 8017d2c:	6829      	ldr	r1, [r5, #0]
 8017d2e:	2200      	movs	r2, #0
 8017d30:	3170      	adds	r1, #112	; 0x70
 8017d32:	4620      	mov	r0, r4
 8017d34:	f7f3 fa40 	bl	800b1b8 <lv_obj_add_style>
            return;
 8017d38:	e79b      	b.n	8017c72 <theme_apply+0x2a>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	f7f3 fff8 	bl	800bd30 <lv_obj_get_parent>
 8017d40:	498b      	ldr	r1, [pc, #556]	; (8017f70 <theme_apply+0x328>)
 8017d42:	f7ef fbef 	bl	8007524 <lv_obj_check_type>
 8017d46:	2800      	cmp	r0, #0
 8017d48:	d0bf      	beq.n	8017cca <theme_apply+0x82>
            lv_obj_add_style(obj, &styles->scr, 0);
 8017d4a:	4d87      	ldr	r5, [pc, #540]	; (8017f68 <theme_apply+0x320>)
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	6829      	ldr	r1, [r5, #0]
 8017d50:	4620      	mov	r0, r4
 8017d52:	f7f3 fa31 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8017d56:	6829      	ldr	r1, [r5, #0]
 8017d58:	2200      	movs	r2, #0
 8017d5a:	3180      	adds	r1, #128	; 0x80
 8017d5c:	4620      	mov	r0, r4
 8017d5e:	f7f3 fa2b 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8017d62:	6829      	ldr	r1, [r5, #0]
 8017d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017d68:	3108      	adds	r1, #8
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	f7f3 fa24 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8017d70:	6829      	ldr	r1, [r5, #0]
 8017d72:	4a7e      	ldr	r2, [pc, #504]	; (8017f6c <theme_apply+0x324>)
 8017d74:	3110      	adds	r1, #16
 8017d76:	4620      	mov	r0, r4
 8017d78:	f7f3 fa1e 	bl	800b1b8 <lv_obj_add_style>
            return;
 8017d7c:	e779      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 8017d7e:	497d      	ldr	r1, [pc, #500]	; (8017f74 <theme_apply+0x32c>)
 8017d80:	4620      	mov	r0, r4
 8017d82:	f7ef fbcf 	bl	8007524 <lv_obj_check_type>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	d056      	beq.n	8017e38 <theme_apply+0x1f0>
        lv_obj_add_style(obj, &styles->btn, 0);
 8017d8a:	4d77      	ldr	r5, [pc, #476]	; (8017f68 <theme_apply+0x320>)
 8017d8c:	6829      	ldr	r1, [r5, #0]
 8017d8e:	2200      	movs	r2, #0
 8017d90:	3120      	adds	r1, #32
 8017d92:	4620      	mov	r0, r4
 8017d94:	f7f3 fa10 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 8017d98:	6829      	ldr	r1, [r5, #0]
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	3128      	adds	r1, #40	; 0x28
 8017d9e:	4620      	mov	r0, r4
 8017da0:	f7f3 fa0a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8017da4:	6829      	ldr	r1, [r5, #0]
 8017da6:	2200      	movs	r2, #0
 8017da8:	31d0      	adds	r1, #208	; 0xd0
 8017daa:	4620      	mov	r0, r4
 8017dac:	f7f3 fa04 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8017db0:	6829      	ldr	r1, [r5, #0]
 8017db2:	2220      	movs	r2, #32
 8017db4:	3158      	adds	r1, #88	; 0x58
 8017db6:	4620      	mov	r0, r4
 8017db8:	f7f3 f9fe 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 8017dbc:	6829      	ldr	r1, [r5, #0]
 8017dbe:	2220      	movs	r2, #32
 8017dc0:	31d8      	adds	r1, #216	; 0xd8
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	f7f3 f9f8 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017dc8:	6829      	ldr	r1, [r5, #0]
 8017dca:	2204      	movs	r2, #4
 8017dcc:	31a0      	adds	r1, #160	; 0xa0
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f7f3 f9f2 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 8017dd4:	6829      	ldr	r1, [r5, #0]
 8017dd6:	2220      	movs	r2, #32
 8017dd8:	31c8      	adds	r1, #200	; 0xc8
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f7f3 f9ec 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 8017de0:	6829      	ldr	r1, [r5, #0]
 8017de2:	2201      	movs	r2, #1
 8017de4:	3138      	adds	r1, #56	; 0x38
 8017de6:	4620      	mov	r0, r4
 8017de8:	f7f3 f9e6 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8017dec:	6829      	ldr	r1, [r5, #0]
 8017dee:	2280      	movs	r2, #128	; 0x80
 8017df0:	3160      	adds	r1, #96	; 0x60
 8017df2:	4620      	mov	r0, r4
 8017df4:	f7f3 f9e0 	bl	800b1b8 <lv_obj_add_style>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f7f3 ff99 	bl	800bd30 <lv_obj_get_parent>
 8017dfe:	495e      	ldr	r1, [pc, #376]	; (8017f78 <theme_apply+0x330>)
 8017e00:	f7ef fb90 	bl	8007524 <lv_obj_check_type>
 8017e04:	b940      	cbnz	r0, 8017e18 <theme_apply+0x1d0>
           lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_main_header_cont_class)) {
 8017e06:	4620      	mov	r0, r4
 8017e08:	f7f3 ff92 	bl	800bd30 <lv_obj_get_parent>
 8017e0c:	495b      	ldr	r1, [pc, #364]	; (8017f7c <theme_apply+0x334>)
 8017e0e:	f7ef fb89 	bl	8007524 <lv_obj_check_type>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 8017e12:	2800      	cmp	r0, #0
 8017e14:	f43f af2d 	beq.w	8017c72 <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->menu_header_btn, 0);
 8017e18:	4d53      	ldr	r5, [pc, #332]	; (8017f68 <theme_apply+0x320>)
 8017e1a:	6829      	ldr	r1, [r5, #0]
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	f501 71dc 	add.w	r1, r1, #440	; 0x1b8
 8017e22:	4620      	mov	r0, r4
 8017e24:	f7f3 f9c8 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 8017e28:	6829      	ldr	r1, [r5, #0]
 8017e2a:	2220      	movs	r2, #32
 8017e2c:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 8017e30:	4620      	mov	r0, r4
 8017e32:	f7f3 f9c1 	bl	800b1b8 <lv_obj_add_style>
 8017e36:	e71c      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 8017e38:	4951      	ldr	r1, [pc, #324]	; (8017f80 <theme_apply+0x338>)
 8017e3a:	4620      	mov	r0, r4
 8017e3c:	f7ef fb72 	bl	8007524 <lv_obj_check_type>
 8017e40:	b140      	cbz	r0, 8017e54 <theme_apply+0x20c>
        lv_obj_add_style(obj, &styles->line, 0);
 8017e42:	4b49      	ldr	r3, [pc, #292]	; (8017f68 <theme_apply+0x320>)
 8017e44:	6819      	ldr	r1, [r3, #0]
 8017e46:	2200      	movs	r2, #0
 8017e48:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f7f3 f9b3 	bl	800b1b8 <lv_obj_add_style>
 8017e52:	e70e      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 8017e54:	494b      	ldr	r1, [pc, #300]	; (8017f84 <theme_apply+0x33c>)
 8017e56:	4620      	mov	r0, r4
 8017e58:	f7ef fb64 	bl	8007524 <lv_obj_check_type>
 8017e5c:	2800      	cmp	r0, #0
 8017e5e:	f000 80dc 	beq.w	801801a <theme_apply+0x3d2>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 8017e62:	4620      	mov	r0, r4
 8017e64:	f7f3 ff64 	bl	800bd30 <lv_obj_get_parent>
 8017e68:	4947      	ldr	r1, [pc, #284]	; (8017f88 <theme_apply+0x340>)
 8017e6a:	f7ef fb5b 	bl	8007524 <lv_obj_check_type>
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	d141      	bne.n	8017ef6 <theme_apply+0x2ae>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 8017e72:	4620      	mov	r0, r4
 8017e74:	f7f3 ff5c 	bl	800bd30 <lv_obj_get_parent>
 8017e78:	493a      	ldr	r1, [pc, #232]	; (8017f64 <theme_apply+0x31c>)
 8017e7a:	f7ef fb53 	bl	8007524 <lv_obj_check_type>
 8017e7e:	2800      	cmp	r0, #0
 8017e80:	f040 808e 	bne.w	8017fa0 <theme_apply+0x358>
        lv_obj_add_style(obj, &styles->card, 0);
 8017e84:	4d38      	ldr	r5, [pc, #224]	; (8017f68 <theme_apply+0x320>)
 8017e86:	6829      	ldr	r1, [r5, #0]
 8017e88:	2200      	movs	r2, #0
 8017e8a:	3118      	adds	r1, #24
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f7f3 f993 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017e92:	6829      	ldr	r1, [r5, #0]
 8017e94:	2204      	movs	r2, #4
 8017e96:	31a0      	adds	r1, #160	; 0xa0
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f7f3 f98d 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8017e9e:	6829      	ldr	r1, [r5, #0]
 8017ea0:	2208      	movs	r2, #8
 8017ea2:	31a8      	adds	r1, #168	; 0xa8
 8017ea4:	4620      	mov	r0, r4
 8017ea6:	f7f3 f987 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8017eaa:	6829      	ldr	r1, [r5, #0]
 8017eac:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8017eb0:	3120      	adds	r1, #32
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	f7f3 f980 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8017eb8:	6829      	ldr	r1, [r5, #0]
 8017eba:	4a34      	ldr	r2, [pc, #208]	; (8017f8c <theme_apply+0x344>)
 8017ebc:	3160      	adds	r1, #96	; 0x60
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	f7f3 f97a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8017ec4:	6829      	ldr	r1, [r5, #0]
 8017ec6:	4a32      	ldr	r2, [pc, #200]	; (8017f90 <theme_apply+0x348>)
 8017ec8:	3158      	adds	r1, #88	; 0x58
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f7f3 f974 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8017ed0:	6829      	ldr	r1, [r5, #0]
 8017ed2:	4a30      	ldr	r2, [pc, #192]	; (8017f94 <theme_apply+0x34c>)
 8017ed4:	3128      	adds	r1, #40	; 0x28
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f7f3 f96e 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8017edc:	6829      	ldr	r1, [r5, #0]
 8017ede:	4a2e      	ldr	r2, [pc, #184]	; (8017f98 <theme_apply+0x350>)
 8017ee0:	31a0      	adds	r1, #160	; 0xa0
 8017ee2:	4620      	mov	r0, r4
 8017ee4:	f7f3 f968 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8017ee8:	6829      	ldr	r1, [r5, #0]
 8017eea:	4a2c      	ldr	r2, [pc, #176]	; (8017f9c <theme_apply+0x354>)
 8017eec:	31a8      	adds	r1, #168	; 0xa8
 8017eee:	4620      	mov	r0, r4
 8017ef0:	f7f3 f962 	bl	800b1b8 <lv_obj_add_style>
 8017ef4:	e6bd      	b.n	8017c72 <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 8017ef6:	4d1c      	ldr	r5, [pc, #112]	; (8017f68 <theme_apply+0x320>)
 8017ef8:	6829      	ldr	r1, [r5, #0]
 8017efa:	2200      	movs	r2, #0
 8017efc:	f501 71f0 	add.w	r1, r1, #480	; 0x1e0
 8017f00:	4620      	mov	r0, r4
 8017f02:	f7f3 f959 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 8017f06:	6829      	ldr	r1, [r5, #0]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	3188      	adds	r1, #136	; 0x88
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	f7f3 f953 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8017f12:	6829      	ldr	r1, [r5, #0]
 8017f14:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8017f18:	3120      	adds	r1, #32
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f7f3 f94c 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8017f20:	6829      	ldr	r1, [r5, #0]
 8017f22:	4a1b      	ldr	r2, [pc, #108]	; (8017f90 <theme_apply+0x348>)
 8017f24:	3158      	adds	r1, #88	; 0x58
 8017f26:	4620      	mov	r0, r4
 8017f28:	f7f3 f946 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8017f2c:	6829      	ldr	r1, [r5, #0]
 8017f2e:	4a17      	ldr	r2, [pc, #92]	; (8017f8c <theme_apply+0x344>)
 8017f30:	3160      	adds	r1, #96	; 0x60
 8017f32:	4620      	mov	r0, r4
 8017f34:	f7f3 f940 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8017f38:	6829      	ldr	r1, [r5, #0]
 8017f3a:	4a16      	ldr	r2, [pc, #88]	; (8017f94 <theme_apply+0x34c>)
 8017f3c:	3128      	adds	r1, #40	; 0x28
 8017f3e:	4620      	mov	r0, r4
 8017f40:	f7f3 f93a 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8017f44:	6829      	ldr	r1, [r5, #0]
 8017f46:	4a14      	ldr	r2, [pc, #80]	; (8017f98 <theme_apply+0x350>)
 8017f48:	3130      	adds	r1, #48	; 0x30
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	f7f3 f934 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 8017f50:	6829      	ldr	r1, [r5, #0]
 8017f52:	4a12      	ldr	r2, [pc, #72]	; (8017f9c <theme_apply+0x354>)
 8017f54:	3140      	adds	r1, #64	; 0x40
 8017f56:	4620      	mov	r0, r4
 8017f58:	f7f3 f92e 	bl	800b1b8 <lv_obj_add_style>
            return;
 8017f5c:	e689      	b.n	8017c72 <theme_apply+0x2a>
 8017f5e:	bf00      	nop
 8017f60:	0802d640 	.word	0x0802d640
 8017f64:	0802df20 	.word	0x0802df20
 8017f68:	20002764 	.word	0x20002764
 8017f6c:	00010040 	.word	0x00010040
 8017f70:	0802df74 	.word	0x0802df74
 8017f74:	080335e0 	.word	0x080335e0
 8017f78:	0802de78 	.word	0x0802de78
 8017f7c:	0802ddec 	.word	0x0802ddec
 8017f80:	080336f8 	.word	0x080336f8
 8017f84:	08033624 	.word	0x08033624
 8017f88:	0802decc 	.word	0x0802decc
 8017f8c:	00050080 	.word	0x00050080
 8017f90:	00050020 	.word	0x00050020
 8017f94:	00050001 	.word	0x00050001
 8017f98:	00050004 	.word	0x00050004
 8017f9c:	00050008 	.word	0x00050008
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8017fa0:	4dab      	ldr	r5, [pc, #684]	; (8018250 <theme_apply+0x608>)
 8017fa2:	6829      	ldr	r1, [r5, #0]
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	3150      	adds	r1, #80	; 0x50
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f7f3 f905 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8017fae:	6829      	ldr	r1, [r5, #0]
 8017fb0:	2204      	movs	r2, #4
 8017fb2:	31a0      	adds	r1, #160	; 0xa0
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	f7f3 f8ff 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 8017fba:	6829      	ldr	r1, [r5, #0]
 8017fbc:	2204      	movs	r2, #4
 8017fbe:	f501 7106 	add.w	r1, r1, #536	; 0x218
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f7f3 f8f8 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8017fc8:	6829      	ldr	r1, [r5, #0]
 8017fca:	4aa2      	ldr	r2, [pc, #648]	; (8018254 <theme_apply+0x60c>)
 8017fcc:	3158      	adds	r1, #88	; 0x58
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f7f3 f8f2 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 8017fd4:	4ea0      	ldr	r6, [pc, #640]	; (8018258 <theme_apply+0x610>)
 8017fd6:	6829      	ldr	r1, [r5, #0]
 8017fd8:	4632      	mov	r2, r6
 8017fda:	3130      	adds	r1, #48	; 0x30
 8017fdc:	4620      	mov	r0, r4
 8017fde:	f7f3 f8eb 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 8017fe2:	6829      	ldr	r1, [r5, #0]
 8017fe4:	4632      	mov	r2, r6
 8017fe6:	f501 7108 	add.w	r1, r1, #544	; 0x220
 8017fea:	4620      	mov	r0, r4
 8017fec:	f7f3 f8e4 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8017ff0:	3603      	adds	r6, #3
 8017ff2:	6829      	ldr	r1, [r5, #0]
 8017ff4:	4632      	mov	r2, r6
 8017ff6:	31a0      	adds	r1, #160	; 0xa0
 8017ff8:	4620      	mov	r0, r4
 8017ffa:	f7f3 f8dd 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8017ffe:	6829      	ldr	r1, [r5, #0]
 8018000:	4a96      	ldr	r2, [pc, #600]	; (801825c <theme_apply+0x614>)
 8018002:	31a8      	adds	r1, #168	; 0xa8
 8018004:	4620      	mov	r0, r4
 8018006:	f7f3 f8d7 	bl	800b1b8 <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 801800a:	6829      	ldr	r1, [r5, #0]
 801800c:	4632      	mov	r2, r6
 801800e:	f501 7106 	add.w	r1, r1, #536	; 0x218
 8018012:	4620      	mov	r0, r4
 8018014:	f7f3 f8d0 	bl	800b1b8 <lv_obj_add_style>
            return;
 8018018:	e62b      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 801801a:	4991      	ldr	r1, [pc, #580]	; (8018260 <theme_apply+0x618>)
 801801c:	4620      	mov	r0, r4
 801801e:	f7ef fa81 	bl	8007524 <lv_obj_check_type>
 8018022:	b338      	cbz	r0, 8018074 <theme_apply+0x42c>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8018024:	4d8a      	ldr	r5, [pc, #552]	; (8018250 <theme_apply+0x608>)
 8018026:	6829      	ldr	r1, [r5, #0]
 8018028:	2200      	movs	r2, #0
 801802a:	3130      	adds	r1, #48	; 0x30
 801802c:	4620      	mov	r0, r4
 801802e:	f7f3 f8c3 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8018032:	6829      	ldr	r1, [r5, #0]
 8018034:	2200      	movs	r2, #0
 8018036:	31b0      	adds	r1, #176	; 0xb0
 8018038:	4620      	mov	r0, r4
 801803a:	f7f3 f8bd 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801803e:	6829      	ldr	r1, [r5, #0]
 8018040:	2204      	movs	r2, #4
 8018042:	31a0      	adds	r1, #160	; 0xa0
 8018044:	4620      	mov	r0, r4
 8018046:	f7f3 f8b7 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 801804a:	6829      	ldr	r1, [r5, #0]
 801804c:	2208      	movs	r2, #8
 801804e:	31a8      	adds	r1, #168	; 0xa8
 8018050:	4620      	mov	r0, r4
 8018052:	f7f3 f8b1 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8018056:	6829      	ldr	r1, [r5, #0]
 8018058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801805c:	3128      	adds	r1, #40	; 0x28
 801805e:	4620      	mov	r0, r4
 8018060:	f7f3 f8aa 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8018064:	6829      	ldr	r1, [r5, #0]
 8018066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801806a:	31b0      	adds	r1, #176	; 0xb0
 801806c:	4620      	mov	r0, r4
 801806e:	f7f3 f8a3 	bl	800b1b8 <lv_obj_add_style>
 8018072:	e5fe      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 8018074:	497b      	ldr	r1, [pc, #492]	; (8018264 <theme_apply+0x61c>)
 8018076:	4620      	mov	r0, r4
 8018078:	f7ef fa54 	bl	8007524 <lv_obj_check_type>
 801807c:	2800      	cmp	r0, #0
 801807e:	d042      	beq.n	8018106 <theme_apply+0x4be>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8018080:	4d73      	ldr	r5, [pc, #460]	; (8018250 <theme_apply+0x608>)
 8018082:	6829      	ldr	r1, [r5, #0]
 8018084:	2200      	movs	r2, #0
 8018086:	3130      	adds	r1, #48	; 0x30
 8018088:	4620      	mov	r0, r4
 801808a:	f7f3 f895 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 801808e:	6829      	ldr	r1, [r5, #0]
 8018090:	2200      	movs	r2, #0
 8018092:	31b0      	adds	r1, #176	; 0xb0
 8018094:	4620      	mov	r0, r4
 8018096:	f7f3 f88f 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 801809a:	6829      	ldr	r1, [r5, #0]
 801809c:	2204      	movs	r2, #4
 801809e:	31a0      	adds	r1, #160	; 0xa0
 80180a0:	4620      	mov	r0, r4
 80180a2:	f7f3 f889 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80180a6:	6829      	ldr	r1, [r5, #0]
 80180a8:	2208      	movs	r2, #8
 80180aa:	31a8      	adds	r1, #168	; 0xa8
 80180ac:	4620      	mov	r0, r4
 80180ae:	f7f3 f883 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 80180b2:	6829      	ldr	r1, [r5, #0]
 80180b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80180b8:	3128      	adds	r1, #40	; 0x28
 80180ba:	4620      	mov	r0, r4
 80180bc:	f7f3 f87c 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 80180c0:	6829      	ldr	r1, [r5, #0]
 80180c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80180c6:	31b0      	adds	r1, #176	; 0xb0
 80180c8:	4620      	mov	r0, r4
 80180ca:	f7f3 f875 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 80180ce:	6829      	ldr	r1, [r5, #0]
 80180d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80180d4:	31f0      	adds	r1, #240	; 0xf0
 80180d6:	4620      	mov	r0, r4
 80180d8:	f7f3 f86e 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 80180dc:	4e62      	ldr	r6, [pc, #392]	; (8018268 <theme_apply+0x620>)
 80180de:	6829      	ldr	r1, [r5, #0]
 80180e0:	4632      	mov	r2, r6
 80180e2:	31c8      	adds	r1, #200	; 0xc8
 80180e4:	4620      	mov	r0, r4
 80180e6:	f7f3 f867 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 80180ea:	6829      	ldr	r1, [r5, #0]
 80180ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80180f0:	31d0      	adds	r1, #208	; 0xd0
 80180f2:	4620      	mov	r0, r4
 80180f4:	f7f3 f860 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 80180f8:	6829      	ldr	r1, [r5, #0]
 80180fa:	4632      	mov	r2, r6
 80180fc:	31d8      	adds	r1, #216	; 0xd8
 80180fe:	4620      	mov	r0, r4
 8018100:	f7f3 f85a 	bl	800b1b8 <lv_obj_add_style>
 8018104:	e5b5      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 8018106:	4959      	ldr	r1, [pc, #356]	; (801826c <theme_apply+0x624>)
 8018108:	4620      	mov	r0, r4
 801810a:	f7ef fa0b 	bl	8007524 <lv_obj_check_type>
 801810e:	2800      	cmp	r0, #0
 8018110:	d054      	beq.n	80181bc <theme_apply+0x574>
        lv_obj_add_style(obj, &styles->card, 0);
 8018112:	4d4f      	ldr	r5, [pc, #316]	; (8018250 <theme_apply+0x608>)
 8018114:	6829      	ldr	r1, [r5, #0]
 8018116:	2200      	movs	r2, #0
 8018118:	3118      	adds	r1, #24
 801811a:	4620      	mov	r0, r4
 801811c:	f7f3 f84c 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8018120:	6829      	ldr	r1, [r5, #0]
 8018122:	2200      	movs	r2, #0
 8018124:	3168      	adds	r1, #104	; 0x68
 8018126:	4620      	mov	r0, r4
 8018128:	f7f3 f846 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 801812c:	6829      	ldr	r1, [r5, #0]
 801812e:	2200      	movs	r2, #0
 8018130:	31b8      	adds	r1, #184	; 0xb8
 8018132:	4620      	mov	r0, r4
 8018134:	f7f3 f840 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8018138:	6829      	ldr	r1, [r5, #0]
 801813a:	2204      	movs	r2, #4
 801813c:	31a0      	adds	r1, #160	; 0xa0
 801813e:	4620      	mov	r0, r4
 8018140:	f7f3 f83a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8018144:	6829      	ldr	r1, [r5, #0]
 8018146:	2208      	movs	r2, #8
 8018148:	31a8      	adds	r1, #168	; 0xa8
 801814a:	4620      	mov	r0, r4
 801814c:	f7f3 f834 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8018150:	6829      	ldr	r1, [r5, #0]
 8018152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8018156:	3108      	adds	r1, #8
 8018158:	4620      	mov	r0, r4
 801815a:	f7f3 f82d 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801815e:	6829      	ldr	r1, [r5, #0]
 8018160:	4a43      	ldr	r2, [pc, #268]	; (8018270 <theme_apply+0x628>)
 8018162:	3110      	adds	r1, #16
 8018164:	4620      	mov	r0, r4
 8018166:	f7f3 f827 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 801816a:	6829      	ldr	r1, [r5, #0]
 801816c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8018170:	3150      	adds	r1, #80	; 0x50
 8018172:	4620      	mov	r0, r4
 8018174:	f7f3 f820 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 8018178:	6829      	ldr	r1, [r5, #0]
 801817a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801817e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
 8018182:	4620      	mov	r0, r4
 8018184:	f7f3 f818 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 8018188:	6829      	ldr	r1, [r5, #0]
 801818a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801818e:	3180      	adds	r1, #128	; 0x80
 8018190:	4620      	mov	r0, r4
 8018192:	f7f3 f811 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8018196:	6829      	ldr	r1, [r5, #0]
 8018198:	4a2e      	ldr	r2, [pc, #184]	; (8018254 <theme_apply+0x60c>)
 801819a:	3158      	adds	r1, #88	; 0x58
 801819c:	4620      	mov	r0, r4
 801819e:	f7f3 f80b 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 80181a2:	6829      	ldr	r1, [r5, #0]
 80181a4:	4a33      	ldr	r2, [pc, #204]	; (8018274 <theme_apply+0x62c>)
 80181a6:	3128      	adds	r1, #40	; 0x28
 80181a8:	4620      	mov	r0, r4
 80181aa:	f7f3 f805 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 80181ae:	6829      	ldr	r1, [r5, #0]
 80181b0:	4a2a      	ldr	r2, [pc, #168]	; (801825c <theme_apply+0x614>)
 80181b2:	3138      	adds	r1, #56	; 0x38
 80181b4:	4620      	mov	r0, r4
 80181b6:	f7f2 ffff 	bl	800b1b8 <lv_obj_add_style>
 80181ba:	e55a      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 80181bc:	492e      	ldr	r1, [pc, #184]	; (8018278 <theme_apply+0x630>)
 80181be:	4620      	mov	r0, r4
 80181c0:	f7ef f9b0 	bl	8007524 <lv_obj_check_type>
 80181c4:	2800      	cmp	r0, #0
 80181c6:	d05d      	beq.n	8018284 <theme_apply+0x63c>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 80181c8:	4d21      	ldr	r5, [pc, #132]	; (8018250 <theme_apply+0x608>)
 80181ca:	6829      	ldr	r1, [r5, #0]
 80181cc:	2200      	movs	r2, #0
 80181ce:	3188      	adds	r1, #136	; 0x88
 80181d0:	4620      	mov	r0, r4
 80181d2:	f7f2 fff1 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80181d6:	6829      	ldr	r1, [r5, #0]
 80181d8:	2204      	movs	r2, #4
 80181da:	31a0      	adds	r1, #160	; 0xa0
 80181dc:	4620      	mov	r0, r4
 80181de:	f7f2 ffeb 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 80181e2:	6829      	ldr	r1, [r5, #0]
 80181e4:	4a25      	ldr	r2, [pc, #148]	; (801827c <theme_apply+0x634>)
 80181e6:	3160      	adds	r1, #96	; 0x60
 80181e8:	4620      	mov	r0, r4
 80181ea:	f7f2 ffe5 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 80181ee:	6829      	ldr	r1, [r5, #0]
 80181f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80181f4:	f501 719c 	add.w	r1, r1, #312	; 0x138
 80181f8:	4620      	mov	r0, r4
 80181fa:	f7f2 ffdd 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80181fe:	4e20      	ldr	r6, [pc, #128]	; (8018280 <theme_apply+0x638>)
 8018200:	6829      	ldr	r1, [r5, #0]
 8018202:	4632      	mov	r2, r6
 8018204:	3128      	adds	r1, #40	; 0x28
 8018206:	4620      	mov	r0, r4
 8018208:	f7f2 ffd6 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801820c:	6829      	ldr	r1, [r5, #0]
 801820e:	4632      	mov	r2, r6
 8018210:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 8018214:	4620      	mov	r0, r4
 8018216:	f7f2 ffcf 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 801821a:	361f      	adds	r6, #31
 801821c:	6829      	ldr	r1, [r5, #0]
 801821e:	4632      	mov	r2, r6
 8018220:	3158      	adds	r1, #88	; 0x58
 8018222:	4620      	mov	r0, r4
 8018224:	f7f2 ffc8 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8018228:	6829      	ldr	r1, [r5, #0]
 801822a:	4632      	mov	r2, r6
 801822c:	31c8      	adds	r1, #200	; 0xc8
 801822e:	4620      	mov	r0, r4
 8018230:	f7f2 ffc2 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8018234:	6829      	ldr	r1, [r5, #0]
 8018236:	4632      	mov	r2, r6
 8018238:	31d8      	adds	r1, #216	; 0xd8
 801823a:	4620      	mov	r0, r4
 801823c:	f7f2 ffbc 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 8018240:	6829      	ldr	r1, [r5, #0]
 8018242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8018246:	31d0      	adds	r1, #208	; 0xd0
 8018248:	4620      	mov	r0, r4
 801824a:	f7f2 ffb5 	bl	800b1b8 <lv_obj_add_style>
 801824e:	e510      	b.n	8017c72 <theme_apply+0x2a>
 8018250:	20002764 	.word	0x20002764
 8018254:	00050020 	.word	0x00050020
 8018258:	00050001 	.word	0x00050001
 801825c:	00050008 	.word	0x00050008
 8018260:	080335c4 	.word	0x080335c4
 8018264:	0803377c 	.word	0x0803377c
 8018268:	00030020 	.word	0x00030020
 801826c:	080337b4 	.word	0x080337b4
 8018270:	00010040 	.word	0x00010040
 8018274:	00050004 	.word	0x00050004
 8018278:	0803364c 	.word	0x0803364c
 801827c:	00020080 	.word	0x00020080
 8018280:	00020001 	.word	0x00020001
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 8018284:	49bf      	ldr	r1, [pc, #764]	; (8018584 <theme_apply+0x93c>)
 8018286:	4620      	mov	r0, r4
 8018288:	f7ef f94c 	bl	8007524 <lv_obj_check_type>
 801828c:	2800      	cmp	r0, #0
 801828e:	d05c      	beq.n	801834a <theme_apply+0x702>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8018290:	4dbd      	ldr	r5, [pc, #756]	; (8018588 <theme_apply+0x940>)
 8018292:	6829      	ldr	r1, [r5, #0]
 8018294:	2200      	movs	r2, #0
 8018296:	3148      	adds	r1, #72	; 0x48
 8018298:	4620      	mov	r0, r4
 801829a:	f7f2 ff8d 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 801829e:	6829      	ldr	r1, [r5, #0]
 80182a0:	2200      	movs	r2, #0
 80182a2:	31b0      	adds	r1, #176	; 0xb0
 80182a4:	4620      	mov	r0, r4
 80182a6:	f7f2 ff87 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim_fast, 0);
 80182aa:	6829      	ldr	r1, [r5, #0]
 80182ac:	2200      	movs	r2, #0
 80182ae:	31e8      	adds	r1, #232	; 0xe8
 80182b0:	4620      	mov	r0, r4
 80182b2:	f7f2 ff81 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 80182b6:	6829      	ldr	r1, [r5, #0]
 80182b8:	2280      	movs	r2, #128	; 0x80
 80182ba:	3160      	adds	r1, #96	; 0x60
 80182bc:	4620      	mov	r0, r4
 80182be:	f7f2 ff7b 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80182c2:	6829      	ldr	r1, [r5, #0]
 80182c4:	2204      	movs	r2, #4
 80182c6:	31a0      	adds	r1, #160	; 0xa0
 80182c8:	4620      	mov	r0, r4
 80182ca:	f7f2 ff75 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 80182ce:	4eaf      	ldr	r6, [pc, #700]	; (801858c <theme_apply+0x944>)
 80182d0:	6829      	ldr	r1, [r5, #0]
 80182d2:	4632      	mov	r2, r6
 80182d4:	3128      	adds	r1, #40	; 0x28
 80182d6:	4620      	mov	r0, r4
 80182d8:	f7f2 ff6e 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 80182dc:	6829      	ldr	r1, [r5, #0]
 80182de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80182e2:	31b0      	adds	r1, #176	; 0xb0
 80182e4:	4620      	mov	r0, r4
 80182e6:	f7f2 ff67 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 80182ea:	6829      	ldr	r1, [r5, #0]
 80182ec:	4aa8      	ldr	r2, [pc, #672]	; (8018590 <theme_apply+0x948>)
 80182ee:	3160      	adds	r1, #96	; 0x60
 80182f0:	4620      	mov	r0, r4
 80182f2:	f7f2 ff61 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 80182f6:	6829      	ldr	r1, [r5, #0]
 80182f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80182fc:	31f0      	adds	r1, #240	; 0xf0
 80182fe:	4620      	mov	r0, r4
 8018300:	f7f2 ff5a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8018304:	6829      	ldr	r1, [r5, #0]
 8018306:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 801830a:	3150      	adds	r1, #80	; 0x50
 801830c:	4620      	mov	r0, r4
 801830e:	f7f2 ff53 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 8018312:	6829      	ldr	r1, [r5, #0]
 8018314:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8018318:	f501 71a4 	add.w	r1, r1, #328	; 0x148
 801831c:	4620      	mov	r0, r4
 801831e:	f7f2 ff4b 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 8018322:	6829      	ldr	r1, [r5, #0]
 8018324:	4a9b      	ldr	r2, [pc, #620]	; (8018594 <theme_apply+0x94c>)
 8018326:	3160      	adds	r1, #96	; 0x60
 8018328:	4620      	mov	r0, r4
 801832a:	f7f2 ff45 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_CHECKED);
 801832e:	6829      	ldr	r1, [r5, #0]
 8018330:	4632      	mov	r2, r6
 8018332:	31d8      	adds	r1, #216	; 0xd8
 8018334:	4620      	mov	r0, r4
 8018336:	f7f2 ff3f 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 801833a:	6829      	ldr	r1, [r5, #0]
 801833c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8018340:	31d8      	adds	r1, #216	; 0xd8
 8018342:	4620      	mov	r0, r4
 8018344:	f7f2 ff38 	bl	800b1b8 <lv_obj_add_style>
 8018348:	e493      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 801834a:	4993      	ldr	r1, [pc, #588]	; (8018598 <theme_apply+0x950>)
 801834c:	4620      	mov	r0, r4
 801834e:	f7ef f8e9 	bl	8007524 <lv_obj_check_type>
 8018352:	2800      	cmp	r0, #0
 8018354:	d041      	beq.n	80183da <theme_apply+0x792>
        lv_obj_add_style(obj, &styles->card, 0);
 8018356:	4d8c      	ldr	r5, [pc, #560]	; (8018588 <theme_apply+0x940>)
 8018358:	6829      	ldr	r1, [r5, #0]
 801835a:	2200      	movs	r2, #0
 801835c:	3118      	adds	r1, #24
 801835e:	4620      	mov	r0, r4
 8018360:	f7f2 ff2a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8018364:	6829      	ldr	r1, [r5, #0]
 8018366:	2200      	movs	r2, #0
 8018368:	3178      	adds	r1, #120	; 0x78
 801836a:	4620      	mov	r0, r4
 801836c:	f7f2 ff24 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 8018370:	6829      	ldr	r1, [r5, #0]
 8018372:	2200      	movs	r2, #0
 8018374:	f501 7194 	add.w	r1, r1, #296	; 0x128
 8018378:	4620      	mov	r0, r4
 801837a:	f7f2 ff1d 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801837e:	6829      	ldr	r1, [r5, #0]
 8018380:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8018384:	3108      	adds	r1, #8
 8018386:	4620      	mov	r0, r4
 8018388:	f7f2 ff16 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 801838c:	6829      	ldr	r1, [r5, #0]
 801838e:	4a83      	ldr	r2, [pc, #524]	; (801859c <theme_apply+0x954>)
 8018390:	3110      	adds	r1, #16
 8018392:	4620      	mov	r0, r4
 8018394:	f7f2 ff10 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 8018398:	6829      	ldr	r1, [r5, #0]
 801839a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801839e:	f501 7188 	add.w	r1, r1, #272	; 0x110
 80183a2:	4620      	mov	r0, r4
 80183a4:	f7f2 ff08 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 80183a8:	6829      	ldr	r1, [r5, #0]
 80183aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80183ae:	f501 718c 	add.w	r1, r1, #280	; 0x118
 80183b2:	4620      	mov	r0, r4
 80183b4:	f7f2 ff00 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 80183b8:	6829      	ldr	r1, [r5, #0]
 80183ba:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80183be:	f501 7190 	add.w	r1, r1, #288	; 0x120
 80183c2:	4620      	mov	r0, r4
 80183c4:	f7f2 fef8 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 80183c8:	6829      	ldr	r1, [r5, #0]
 80183ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80183ce:	f501 7188 	add.w	r1, r1, #272	; 0x110
 80183d2:	4620      	mov	r0, r4
 80183d4:	f7f2 fef0 	bl	800b1b8 <lv_obj_add_style>
 80183d8:	e44b      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 80183da:	4971      	ldr	r1, [pc, #452]	; (80185a0 <theme_apply+0x958>)
 80183dc:	4620      	mov	r0, r4
 80183de:	f7ef f8a1 	bl	8007524 <lv_obj_check_type>
 80183e2:	b360      	cbz	r0, 801843e <theme_apply+0x7f6>
        lv_obj_add_style(obj, &styles->card, 0);
 80183e4:	4d68      	ldr	r5, [pc, #416]	; (8018588 <theme_apply+0x940>)
 80183e6:	6829      	ldr	r1, [r5, #0]
 80183e8:	2200      	movs	r2, #0
 80183ea:	3118      	adds	r1, #24
 80183ec:	4620      	mov	r0, r4
 80183ee:	f7f2 fee3 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 80183f2:	6829      	ldr	r1, [r5, #0]
 80183f4:	2200      	movs	r2, #0
 80183f6:	31e0      	adds	r1, #224	; 0xe0
 80183f8:	4620      	mov	r0, r4
 80183fa:	f7f2 fedd 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 80183fe:	6829      	ldr	r1, [r5, #0]
 8018400:	2200      	movs	r2, #0
 8018402:	3190      	adds	r1, #144	; 0x90
 8018404:	4620      	mov	r0, r4
 8018406:	f7f2 fed7 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 801840a:	6829      	ldr	r1, [r5, #0]
 801840c:	2200      	movs	r2, #0
 801840e:	3198      	adds	r1, #152	; 0x98
 8018410:	4620      	mov	r0, r4
 8018412:	f7f2 fed1 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8018416:	6829      	ldr	r1, [r5, #0]
 8018418:	2204      	movs	r2, #4
 801841a:	31a0      	adds	r1, #160	; 0xa0
 801841c:	4620      	mov	r0, r4
 801841e:	f7f2 fecb 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8018422:	6829      	ldr	r1, [r5, #0]
 8018424:	2208      	movs	r2, #8
 8018426:	31a8      	adds	r1, #168	; 0xa8
 8018428:	4620      	mov	r0, r4
 801842a:	f7f2 fec5 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 801842e:	6829      	ldr	r1, [r5, #0]
 8018430:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8018434:	3128      	adds	r1, #40	; 0x28
 8018436:	4620      	mov	r0, r4
 8018438:	f7f2 febe 	bl	800b1b8 <lv_obj_add_style>
 801843c:	e419      	b.n	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 801843e:	4959      	ldr	r1, [pc, #356]	; (80185a4 <theme_apply+0x95c>)
 8018440:	4620      	mov	r0, r4
 8018442:	f7ef f86f 	bl	8007524 <lv_obj_check_type>
 8018446:	b398      	cbz	r0, 80184b0 <theme_apply+0x868>
        lv_obj_add_style(obj, &styles->card, 0);
 8018448:	4d4f      	ldr	r5, [pc, #316]	; (8018588 <theme_apply+0x940>)
 801844a:	6829      	ldr	r1, [r5, #0]
 801844c:	2200      	movs	r2, #0
 801844e:	3118      	adds	r1, #24
 8018450:	4620      	mov	r0, r4
 8018452:	f7f2 feb1 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8018456:	6829      	ldr	r1, [r5, #0]
 8018458:	2200      	movs	r2, #0
 801845a:	3178      	adds	r1, #120	; 0x78
 801845c:	4620      	mov	r0, r4
 801845e:	f7f2 feab 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8018462:	6829      	ldr	r1, [r5, #0]
 8018464:	2200      	movs	r2, #0
 8018466:	31d0      	adds	r1, #208	; 0xd0
 8018468:	4620      	mov	r0, r4
 801846a:	f7f2 fea5 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 801846e:	6829      	ldr	r1, [r5, #0]
 8018470:	2220      	movs	r2, #32
 8018472:	31d8      	adds	r1, #216	; 0xd8
 8018474:	4620      	mov	r0, r4
 8018476:	f7f2 fe9f 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 801847a:	6829      	ldr	r1, [r5, #0]
 801847c:	2220      	movs	r2, #32
 801847e:	3158      	adds	r1, #88	; 0x58
 8018480:	4620      	mov	r0, r4
 8018482:	f7f2 fe99 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8018486:	6829      	ldr	r1, [r5, #0]
 8018488:	2204      	movs	r2, #4
 801848a:	31a0      	adds	r1, #160	; 0xa0
 801848c:	4620      	mov	r0, r4
 801848e:	f7f2 fe93 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8018492:	6829      	ldr	r1, [r5, #0]
 8018494:	2208      	movs	r2, #8
 8018496:	31a8      	adds	r1, #168	; 0xa8
 8018498:	4620      	mov	r0, r4
 801849a:	f7f2 fe8d 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 801849e:	6829      	ldr	r1, [r5, #0]
 80184a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80184a4:	31d8      	adds	r1, #216	; 0xd8
 80184a6:	4620      	mov	r0, r4
 80184a8:	f7f2 fe86 	bl	800b1b8 <lv_obj_add_style>
 80184ac:	f7ff bbe1 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 80184b0:	493d      	ldr	r1, [pc, #244]	; (80185a8 <theme_apply+0x960>)
 80184b2:	4620      	mov	r0, r4
 80184b4:	f7ef f836 	bl	8007524 <lv_obj_check_type>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	d03b      	beq.n	8018534 <theme_apply+0x8ec>
        lv_obj_add_style(obj, &styles->card, 0);
 80184bc:	4d32      	ldr	r5, [pc, #200]	; (8018588 <theme_apply+0x940>)
 80184be:	6829      	ldr	r1, [r5, #0]
 80184c0:	2200      	movs	r2, #0
 80184c2:	3118      	adds	r1, #24
 80184c4:	4620      	mov	r0, r4
 80184c6:	f7f2 fe77 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 80184ca:	6829      	ldr	r1, [r5, #0]
 80184cc:	2200      	movs	r2, #0
 80184ce:	31c0      	adds	r1, #192	; 0xc0
 80184d0:	4620      	mov	r0, r4
 80184d2:	f7f2 fe71 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 80184d6:	6829      	ldr	r1, [r5, #0]
 80184d8:	2200      	movs	r2, #0
 80184da:	3190      	adds	r1, #144	; 0x90
 80184dc:	4620      	mov	r0, r4
 80184de:	f7f2 fe6b 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 80184e2:	6829      	ldr	r1, [r5, #0]
 80184e4:	2200      	movs	r2, #0
 80184e6:	f501 7198 	add.w	r1, r1, #304	; 0x130
 80184ea:	4620      	mov	r0, r4
 80184ec:	f7f2 fe64 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80184f0:	6829      	ldr	r1, [r5, #0]
 80184f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80184f6:	3108      	adds	r1, #8
 80184f8:	4620      	mov	r0, r4
 80184fa:	f7f2 fe5d 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80184fe:	6829      	ldr	r1, [r5, #0]
 8018500:	4a26      	ldr	r2, [pc, #152]	; (801859c <theme_apply+0x954>)
 8018502:	3110      	adds	r1, #16
 8018504:	4620      	mov	r0, r4
 8018506:	f7f2 fe57 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 801850a:	6829      	ldr	r1, [r5, #0]
 801850c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8018510:	3150      	adds	r1, #80	; 0x50
 8018512:	4620      	mov	r0, r4
 8018514:	f7f2 fe50 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 8018518:	6829      	ldr	r1, [r5, #0]
 801851a:	4a24      	ldr	r2, [pc, #144]	; (80185ac <theme_apply+0x964>)
 801851c:	3128      	adds	r1, #40	; 0x28
 801851e:	4620      	mov	r0, r4
 8018520:	f7f2 fe4a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 8018524:	6829      	ldr	r1, [r5, #0]
 8018526:	4a22      	ldr	r2, [pc, #136]	; (80185b0 <theme_apply+0x968>)
 8018528:	3158      	adds	r1, #88	; 0x58
 801852a:	4620      	mov	r0, r4
 801852c:	f7f2 fe44 	bl	800b1b8 <lv_obj_add_style>
 8018530:	f7ff bb9f 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 8018534:	491f      	ldr	r1, [pc, #124]	; (80185b4 <theme_apply+0x96c>)
 8018536:	4620      	mov	r0, r4
 8018538:	f7ee fff4 	bl	8007524 <lv_obj_check_type>
 801853c:	2800      	cmp	r0, #0
 801853e:	d03b      	beq.n	80185b8 <theme_apply+0x970>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 8018540:	4d11      	ldr	r5, [pc, #68]	; (8018588 <theme_apply+0x940>)
 8018542:	6829      	ldr	r1, [r5, #0]
 8018544:	2200      	movs	r2, #0
 8018546:	f501 7180 	add.w	r1, r1, #256	; 0x100
 801854a:	4620      	mov	r0, r4
 801854c:	f7f2 fe34 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 8018550:	6829      	ldr	r1, [r5, #0]
 8018552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8018556:	f501 7180 	add.w	r1, r1, #256	; 0x100
 801855a:	4620      	mov	r0, r4
 801855c:	f7f2 fe2c 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 8018560:	6829      	ldr	r1, [r5, #0]
 8018562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8018566:	f501 7184 	add.w	r1, r1, #264	; 0x108
 801856a:	4620      	mov	r0, r4
 801856c:	f7f2 fe24 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8018570:	6829      	ldr	r1, [r5, #0]
 8018572:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8018576:	31f0      	adds	r1, #240	; 0xf0
 8018578:	4620      	mov	r0, r4
 801857a:	f7f2 fe1d 	bl	800b1b8 <lv_obj_add_style>
 801857e:	f7ff bb78 	b.w	8017c72 <theme_apply+0x2a>
 8018582:	bf00      	nop
 8018584:	08033798 	.word	0x08033798
 8018588:	20002764 	.word	0x20002764
 801858c:	00020001 	.word	0x00020001
 8018590:	00020080 	.word	0x00020080
 8018594:	00030080 	.word	0x00030080
 8018598:	0802d7dc 	.word	0x0802d7dc
 801859c:	00010040 	.word	0x00010040
 80185a0:	08033744 	.word	0x08033744
 80185a4:	08033688 	.word	0x08033688
 80185a8:	080336a4 	.word	0x080336a4
 80185ac:	00040001 	.word	0x00040001
 80185b0:	00040020 	.word	0x00040020
 80185b4:	080335a8 	.word	0x080335a8
    else if(lv_obj_check_type(obj, &lv_spinner_class)) {
 80185b8:	49c6      	ldr	r1, [pc, #792]	; (80188d4 <theme_apply+0xc8c>)
 80185ba:	4620      	mov	r0, r4
 80185bc:	f7ee ffb2 	bl	8007524 <lv_obj_check_type>
 80185c0:	b1c8      	cbz	r0, 80185f6 <theme_apply+0x9ae>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 80185c2:	4dc5      	ldr	r5, [pc, #788]	; (80188d8 <theme_apply+0xc90>)
 80185c4:	6829      	ldr	r1, [r5, #0]
 80185c6:	2200      	movs	r2, #0
 80185c8:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80185cc:	4620      	mov	r0, r4
 80185ce:	f7f2 fdf3 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 80185d2:	6829      	ldr	r1, [r5, #0]
 80185d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80185d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80185dc:	4620      	mov	r0, r4
 80185de:	f7f2 fdeb 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 80185e2:	6829      	ldr	r1, [r5, #0]
 80185e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80185e8:	f501 7184 	add.w	r1, r1, #264	; 0x108
 80185ec:	4620      	mov	r0, r4
 80185ee:	f7f2 fde3 	bl	800b1b8 <lv_obj_add_style>
 80185f2:	f7ff bb3e 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 80185f6:	49b9      	ldr	r1, [pc, #740]	; (80188dc <theme_apply+0xc94>)
 80185f8:	4620      	mov	r0, r4
 80185fa:	f7ee ff93 	bl	8007524 <lv_obj_check_type>
 80185fe:	b1b0      	cbz	r0, 801862e <theme_apply+0x9e6>
        lv_obj_add_style(obj, &styles->card, 0);
 8018600:	4db5      	ldr	r5, [pc, #724]	; (80188d8 <theme_apply+0xc90>)
 8018602:	6829      	ldr	r1, [r5, #0]
 8018604:	2200      	movs	r2, #0
 8018606:	3118      	adds	r1, #24
 8018608:	4620      	mov	r0, r4
 801860a:	f7f2 fdd5 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 801860e:	6829      	ldr	r1, [r5, #0]
 8018610:	2200      	movs	r2, #0
 8018612:	31b0      	adds	r1, #176	; 0xb0
 8018614:	4620      	mov	r0, r4
 8018616:	f7f2 fdcf 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 801861a:	6829      	ldr	r1, [r5, #0]
 801861c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8018620:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8018624:	4620      	mov	r0, r4
 8018626:	f7f2 fdc7 	bl	800b1b8 <lv_obj_add_style>
 801862a:	f7ff bb22 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 801862e:	49ac      	ldr	r1, [pc, #688]	; (80188e0 <theme_apply+0xc98>)
 8018630:	4620      	mov	r0, r4
 8018632:	f7ee ff77 	bl	8007524 <lv_obj_check_type>
 8018636:	2800      	cmp	r0, #0
 8018638:	d03c      	beq.n	80186b4 <theme_apply+0xa6c>
        lv_obj_add_style(obj, &styles->card, 0);
 801863a:	4da7      	ldr	r5, [pc, #668]	; (80188d8 <theme_apply+0xc90>)
 801863c:	6829      	ldr	r1, [r5, #0]
 801863e:	2200      	movs	r2, #0
 8018640:	3118      	adds	r1, #24
 8018642:	4620      	mov	r0, r4
 8018644:	f7f2 fdb8 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8018648:	6829      	ldr	r1, [r5, #0]
 801864a:	2200      	movs	r2, #0
 801864c:	3178      	adds	r1, #120	; 0x78
 801864e:	4620      	mov	r0, r4
 8018650:	f7f2 fdb2 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8018654:	6829      	ldr	r1, [r5, #0]
 8018656:	2280      	movs	r2, #128	; 0x80
 8018658:	3160      	adds	r1, #96	; 0x60
 801865a:	4620      	mov	r0, r4
 801865c:	f7f2 fdac 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8018660:	6829      	ldr	r1, [r5, #0]
 8018662:	2204      	movs	r2, #4
 8018664:	31a0      	adds	r1, #160	; 0xa0
 8018666:	4620      	mov	r0, r4
 8018668:	f7f2 fda6 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 801866c:	6829      	ldr	r1, [r5, #0]
 801866e:	2208      	movs	r2, #8
 8018670:	31a8      	adds	r1, #168	; 0xa8
 8018672:	4620      	mov	r0, r4
 8018674:	f7f2 fda0 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8018678:	6829      	ldr	r1, [r5, #0]
 801867a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801867e:	3108      	adds	r1, #8
 8018680:	4620      	mov	r0, r4
 8018682:	f7f2 fd99 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8018686:	6829      	ldr	r1, [r5, #0]
 8018688:	4a96      	ldr	r2, [pc, #600]	; (80188e4 <theme_apply+0xc9c>)
 801868a:	3110      	adds	r1, #16
 801868c:	4620      	mov	r0, r4
 801868e:	f7f2 fd93 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 8018692:	6829      	ldr	r1, [r5, #0]
 8018694:	4a94      	ldr	r2, [pc, #592]	; (80188e8 <theme_apply+0xca0>)
 8018696:	f501 71b8 	add.w	r1, r1, #368	; 0x170
 801869a:	4620      	mov	r0, r4
 801869c:	f7f2 fd8c 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 80186a0:	6829      	ldr	r1, [r5, #0]
 80186a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80186a6:	f501 71bc 	add.w	r1, r1, #376	; 0x178
 80186aa:	4620      	mov	r0, r4
 80186ac:	f7f2 fd84 	bl	800b1b8 <lv_obj_add_style>
 80186b0:	f7ff badf 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 80186b4:	498d      	ldr	r1, [pc, #564]	; (80188ec <theme_apply+0xca4>)
 80186b6:	4620      	mov	r0, r4
 80186b8:	f7ee ff34 	bl	8007524 <lv_obj_check_type>
 80186bc:	2800      	cmp	r0, #0
 80186be:	d054      	beq.n	801876a <theme_apply+0xb22>
        lv_obj_add_style(obj, &styles->scr, 0);
 80186c0:	2200      	movs	r2, #0
 80186c2:	4b85      	ldr	r3, [pc, #532]	; (80188d8 <theme_apply+0xc90>)
 80186c4:	6819      	ldr	r1, [r3, #0]
 80186c6:	4620      	mov	r0, r4
 80186c8:	f7f2 fd76 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 80186cc:	4b88      	ldr	r3, [pc, #544]	; (80188f0 <theme_apply+0xca8>)
 80186ce:	781b      	ldrb	r3, [r3, #0]
 80186d0:	2b01      	cmp	r3, #1
 80186d2:	4b81      	ldr	r3, [pc, #516]	; (80188d8 <theme_apply+0xc90>)
 80186d4:	6819      	ldr	r1, [r3, #0]
 80186d6:	bf0c      	ite	eq
 80186d8:	3178      	addeq	r1, #120	; 0x78
 80186da:	3170      	addne	r1, #112	; 0x70
 80186dc:	2200      	movs	r2, #0
 80186de:	4620      	mov	r0, r4
 80186e0:	f7f2 fd6a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80186e4:	4d7c      	ldr	r5, [pc, #496]	; (80188d8 <theme_apply+0xc90>)
 80186e6:	6829      	ldr	r1, [r5, #0]
 80186e8:	2204      	movs	r2, #4
 80186ea:	31a0      	adds	r1, #160	; 0xa0
 80186ec:	4620      	mov	r0, r4
 80186ee:	f7f2 fd63 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80186f2:	6829      	ldr	r1, [r5, #0]
 80186f4:	2208      	movs	r2, #8
 80186f6:	31a8      	adds	r1, #168	; 0xa8
 80186f8:	4620      	mov	r0, r4
 80186fa:	f7f2 fd5d 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 80186fe:	6829      	ldr	r1, [r5, #0]
 8018700:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8018704:	3120      	adds	r1, #32
 8018706:	4620      	mov	r0, r4
 8018708:	f7f2 fd56 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 801870c:	6829      	ldr	r1, [r5, #0]
 801870e:	4a79      	ldr	r2, [pc, #484]	; (80188f4 <theme_apply+0xcac>)
 8018710:	3160      	adds	r1, #96	; 0x60
 8018712:	4620      	mov	r0, r4
 8018714:	f7f2 fd50 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 8018718:	6829      	ldr	r1, [r5, #0]
 801871a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801871e:	3150      	adds	r1, #80	; 0x50
 8018720:	4620      	mov	r0, r4
 8018722:	f7f2 fd49 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 8018726:	6829      	ldr	r1, [r5, #0]
 8018728:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 801872c:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
 8018730:	4620      	mov	r0, r4
 8018732:	f7f2 fd41 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8018736:	6829      	ldr	r1, [r5, #0]
 8018738:	4a6f      	ldr	r2, [pc, #444]	; (80188f8 <theme_apply+0xcb0>)
 801873a:	3158      	adds	r1, #88	; 0x58
 801873c:	4620      	mov	r0, r4
 801873e:	f7f2 fd3b 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 8018742:	6829      	ldr	r1, [r5, #0]
 8018744:	4a6d      	ldr	r2, [pc, #436]	; (80188fc <theme_apply+0xcb4>)
 8018746:	3148      	adds	r1, #72	; 0x48
 8018748:	4620      	mov	r0, r4
 801874a:	f7f2 fd35 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 801874e:	6829      	ldr	r1, [r5, #0]
 8018750:	4a6b      	ldr	r2, [pc, #428]	; (8018900 <theme_apply+0xcb8>)
 8018752:	3130      	adds	r1, #48	; 0x30
 8018754:	4620      	mov	r0, r4
 8018756:	f7f2 fd2f 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 801875a:	6829      	ldr	r1, [r5, #0]
 801875c:	4a69      	ldr	r2, [pc, #420]	; (8018904 <theme_apply+0xcbc>)
 801875e:	3140      	adds	r1, #64	; 0x40
 8018760:	4620      	mov	r0, r4
 8018762:	f7f2 fd29 	bl	800b1b8 <lv_obj_add_style>
 8018766:	f7ff ba84 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 801876a:	4967      	ldr	r1, [pc, #412]	; (8018908 <theme_apply+0xcc0>)
 801876c:	4620      	mov	r0, r4
 801876e:	f7ee fed9 	bl	8007524 <lv_obj_check_type>
 8018772:	b9a0      	cbnz	r0, 801879e <theme_apply+0xb56>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 8018774:	4965      	ldr	r1, [pc, #404]	; (801890c <theme_apply+0xcc4>)
 8018776:	4620      	mov	r0, r4
 8018778:	f7ee fed4 	bl	8007524 <lv_obj_check_type>
 801877c:	b360      	cbz	r0, 80187d8 <theme_apply+0xb90>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 801877e:	4d56      	ldr	r5, [pc, #344]	; (80188d8 <theme_apply+0xc90>)
 8018780:	6829      	ldr	r1, [r5, #0]
 8018782:	2200      	movs	r2, #0
 8018784:	3148      	adds	r1, #72	; 0x48
 8018786:	4620      	mov	r0, r4
 8018788:	f7f2 fd16 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 801878c:	6829      	ldr	r1, [r5, #0]
 801878e:	2200      	movs	r2, #0
 8018790:	f501 7102 	add.w	r1, r1, #520	; 0x208
 8018794:	4620      	mov	r0, r4
 8018796:	f7f2 fd0f 	bl	800b1b8 <lv_obj_add_style>
 801879a:	f7ff ba6a 	b.w	8017c72 <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->card, 0);
 801879e:	4d4e      	ldr	r5, [pc, #312]	; (80188d8 <theme_apply+0xc90>)
 80187a0:	6829      	ldr	r1, [r5, #0]
 80187a2:	2200      	movs	r2, #0
 80187a4:	3118      	adds	r1, #24
 80187a6:	4620      	mov	r0, r4
 80187a8:	f7f2 fd06 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 80187ac:	6829      	ldr	r1, [r5, #0]
 80187ae:	2200      	movs	r2, #0
 80187b0:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80187b4:	4620      	mov	r0, r4
 80187b6:	f7f2 fcff 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80187ba:	6829      	ldr	r1, [r5, #0]
 80187bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80187c0:	3108      	adds	r1, #8
 80187c2:	4620      	mov	r0, r4
 80187c4:	f7f2 fcf8 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80187c8:	6829      	ldr	r1, [r5, #0]
 80187ca:	4a46      	ldr	r2, [pc, #280]	; (80188e4 <theme_apply+0xc9c>)
 80187cc:	3110      	adds	r1, #16
 80187ce:	4620      	mov	r0, r4
 80187d0:	f7f2 fcf2 	bl	800b1b8 <lv_obj_add_style>
        return;
 80187d4:	f7ff ba4d 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 80187d8:	494d      	ldr	r1, [pc, #308]	; (8018910 <theme_apply+0xcc8>)
 80187da:	4620      	mov	r0, r4
 80187dc:	f7ee fea2 	bl	8007524 <lv_obj_check_type>
 80187e0:	b348      	cbz	r0, 8018836 <theme_apply+0xbee>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 80187e2:	4d3d      	ldr	r5, [pc, #244]	; (80188d8 <theme_apply+0xc90>)
 80187e4:	6829      	ldr	r1, [r5, #0]
 80187e6:	2200      	movs	r2, #0
 80187e8:	3150      	adds	r1, #80	; 0x50
 80187ea:	4620      	mov	r0, r4
 80187ec:	f7f2 fce4 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 80187f0:	6829      	ldr	r1, [r5, #0]
 80187f2:	2200      	movs	r2, #0
 80187f4:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80187f8:	4620      	mov	r0, r4
 80187fa:	f7f2 fcdd 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 80187fe:	6829      	ldr	r1, [r5, #0]
 8018800:	2204      	movs	r2, #4
 8018802:	3128      	adds	r1, #40	; 0x28
 8018804:	4620      	mov	r0, r4
 8018806:	f7f2 fcd7 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 801880a:	6829      	ldr	r1, [r5, #0]
 801880c:	2204      	movs	r2, #4
 801880e:	f501 7102 	add.w	r1, r1, #520	; 0x208
 8018812:	4620      	mov	r0, r4
 8018814:	f7f2 fcd0 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 8018818:	6829      	ldr	r1, [r5, #0]
 801881a:	2220      	movs	r2, #32
 801881c:	f501 7102 	add.w	r1, r1, #520	; 0x208
 8018820:	4620      	mov	r0, r4
 8018822:	f7f2 fcc9 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8018826:	6829      	ldr	r1, [r5, #0]
 8018828:	2220      	movs	r2, #32
 801882a:	3158      	adds	r1, #88	; 0x58
 801882c:	4620      	mov	r0, r4
 801882e:	f7f2 fcc3 	bl	800b1b8 <lv_obj_add_style>
 8018832:	f7ff ba1e 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_class)) {
 8018836:	4937      	ldr	r1, [pc, #220]	; (8018914 <theme_apply+0xccc>)
 8018838:	4620      	mov	r0, r4
 801883a:	f7ee fe73 	bl	8007524 <lv_obj_check_type>
 801883e:	b178      	cbz	r0, 8018860 <theme_apply+0xc18>
        lv_obj_add_style(obj, &styles->card, 0);
 8018840:	4d25      	ldr	r5, [pc, #148]	; (80188d8 <theme_apply+0xc90>)
 8018842:	6829      	ldr	r1, [r5, #0]
 8018844:	2200      	movs	r2, #0
 8018846:	3118      	adds	r1, #24
 8018848:	4620      	mov	r0, r4
 801884a:	f7f2 fcb5 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_bg, 0);
 801884e:	6829      	ldr	r1, [r5, #0]
 8018850:	2200      	movs	r2, #0
 8018852:	f501 71c4 	add.w	r1, r1, #392	; 0x188
 8018856:	4620      	mov	r0, r4
 8018858:	f7f2 fcae 	bl	800b1b8 <lv_obj_add_style>
 801885c:	f7ff ba09 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_cont_class)) {
 8018860:	492d      	ldr	r1, [pc, #180]	; (8018918 <theme_apply+0xcd0>)
 8018862:	4620      	mov	r0, r4
 8018864:	f7ee fe5e 	bl	8007524 <lv_obj_check_type>
 8018868:	b1b0      	cbz	r0, 8018898 <theme_apply+0xc50>
        lv_obj_add_style(obj, &styles->menu_sidebar_cont, 0);
 801886a:	4d1b      	ldr	r5, [pc, #108]	; (80188d8 <theme_apply+0xc90>)
 801886c:	6829      	ldr	r1, [r5, #0]
 801886e:	2200      	movs	r2, #0
 8018870:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8018874:	4620      	mov	r0, r4
 8018876:	f7f2 fc9f 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 801887a:	6829      	ldr	r1, [r5, #0]
 801887c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8018880:	3108      	adds	r1, #8
 8018882:	4620      	mov	r0, r4
 8018884:	f7f2 fc98 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8018888:	6829      	ldr	r1, [r5, #0]
 801888a:	4a16      	ldr	r2, [pc, #88]	; (80188e4 <theme_apply+0xc9c>)
 801888c:	3110      	adds	r1, #16
 801888e:	4620      	mov	r0, r4
 8018890:	f7f2 fc92 	bl	800b1b8 <lv_obj_add_style>
 8018894:	f7ff b9ed 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_main_cont_class)) {
 8018898:	4920      	ldr	r1, [pc, #128]	; (801891c <theme_apply+0xcd4>)
 801889a:	4620      	mov	r0, r4
 801889c:	f7ee fe42 	bl	8007524 <lv_obj_check_type>
 80188a0:	2800      	cmp	r0, #0
 80188a2:	d03d      	beq.n	8018920 <theme_apply+0xcd8>
        lv_obj_add_style(obj, &styles->menu_main_cont, 0);
 80188a4:	4d0c      	ldr	r5, [pc, #48]	; (80188d8 <theme_apply+0xc90>)
 80188a6:	6829      	ldr	r1, [r5, #0]
 80188a8:	2200      	movs	r2, #0
 80188aa:	f501 71d0 	add.w	r1, r1, #416	; 0x1a0
 80188ae:	4620      	mov	r0, r4
 80188b0:	f7f2 fc82 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80188b4:	6829      	ldr	r1, [r5, #0]
 80188b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80188ba:	3108      	adds	r1, #8
 80188bc:	4620      	mov	r0, r4
 80188be:	f7f2 fc7b 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80188c2:	6829      	ldr	r1, [r5, #0]
 80188c4:	4a07      	ldr	r2, [pc, #28]	; (80188e4 <theme_apply+0xc9c>)
 80188c6:	3110      	adds	r1, #16
 80188c8:	4620      	mov	r0, r4
 80188ca:	f7f2 fc75 	bl	800b1b8 <lv_obj_add_style>
 80188ce:	f7ff b9d0 	b.w	8017c72 <theme_apply+0x2a>
 80188d2:	bf00      	nop
 80188d4:	0802df04 	.word	0x0802df04
 80188d8:	20002764 	.word	0x20002764
 80188dc:	0802de94 	.word	0x0802de94
 80188e0:	080337d4 	.word	0x080337d4
 80188e4:	00010040 	.word	0x00010040
 80188e8:	00070002 	.word	0x00070002
 80188ec:	0802dd0c 	.word	0x0802dd0c
 80188f0:	20002754 	.word	0x20002754
 80188f4:	00050080 	.word	0x00050080
 80188f8:	00050020 	.word	0x00050020
 80188fc:	00050001 	.word	0x00050001
 8018900:	00050004 	.word	0x00050004
 8018904:	00050008 	.word	0x00050008
 8018908:	0802dd60 	.word	0x0802dd60
 801890c:	0802dd7c 	.word	0x0802dd7c
 8018910:	0802dd44 	.word	0x0802dd44
 8018914:	0802dd98 	.word	0x0802dd98
 8018918:	0802de5c 	.word	0x0802de5c
 801891c:	0802ddd0 	.word	0x0802ddd0
    else if(lv_obj_check_type(obj, &lv_menu_cont_class)) {
 8018920:	49a2      	ldr	r1, [pc, #648]	; (8018bac <theme_apply+0xf64>)
 8018922:	4620      	mov	r0, r4
 8018924:	f7ee fdfe 	bl	8007524 <lv_obj_check_type>
 8018928:	b310      	cbz	r0, 8018970 <theme_apply+0xd28>
        lv_obj_add_style(obj, &styles->menu_cont, 0);
 801892a:	4da1      	ldr	r5, [pc, #644]	; (8018bb0 <theme_apply+0xf68>)
 801892c:	6829      	ldr	r1, [r5, #0]
 801892e:	2200      	movs	r2, #0
 8018930:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8018934:	4620      	mov	r0, r4
 8018936:	f7f2 fc3f 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 801893a:	6829      	ldr	r1, [r5, #0]
 801893c:	2220      	movs	r2, #32
 801893e:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
 8018942:	4620      	mov	r0, r4
 8018944:	f7f2 fc38 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_PRESSED | LV_STATE_CHECKED);
 8018948:	6829      	ldr	r1, [r5, #0]
 801894a:	2221      	movs	r2, #33	; 0x21
 801894c:	3130      	adds	r1, #48	; 0x30
 801894e:	4620      	mov	r0, r4
 8018950:	f7f2 fc32 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_CHECKED);
 8018954:	6829      	ldr	r1, [r5, #0]
 8018956:	2201      	movs	r2, #1
 8018958:	3130      	adds	r1, #48	; 0x30
 801895a:	4620      	mov	r0, r4
 801895c:	f7f2 fc2c 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 8018960:	6829      	ldr	r1, [r5, #0]
 8018962:	2204      	movs	r2, #4
 8018964:	3128      	adds	r1, #40	; 0x28
 8018966:	4620      	mov	r0, r4
 8018968:	f7f2 fc26 	bl	800b1b8 <lv_obj_add_style>
 801896c:	f7ff b981 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 8018970:	4990      	ldr	r1, [pc, #576]	; (8018bb4 <theme_apply+0xf6c>)
 8018972:	4620      	mov	r0, r4
 8018974:	f7ee fdd6 	bl	8007524 <lv_obj_check_type>
 8018978:	b920      	cbnz	r0, 8018984 <theme_apply+0xd3c>
            lv_obj_check_type(obj, &lv_menu_main_header_cont_class)) {
 801897a:	498f      	ldr	r1, [pc, #572]	; (8018bb8 <theme_apply+0xf70>)
 801897c:	4620      	mov	r0, r4
 801897e:	f7ee fdd1 	bl	8007524 <lv_obj_check_type>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 8018982:	b148      	cbz	r0, 8018998 <theme_apply+0xd50>
        lv_obj_add_style(obj, &styles->menu_header_cont, 0);
 8018984:	4b8a      	ldr	r3, [pc, #552]	; (8018bb0 <theme_apply+0xf68>)
 8018986:	6819      	ldr	r1, [r3, #0]
 8018988:	2200      	movs	r2, #0
 801898a:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 801898e:	4620      	mov	r0, r4
 8018990:	f7f2 fc12 	bl	800b1b8 <lv_obj_add_style>
 8018994:	f7ff b96d 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_page_class)) {
 8018998:	4988      	ldr	r1, [pc, #544]	; (8018bbc <theme_apply+0xf74>)
 801899a:	4620      	mov	r0, r4
 801899c:	f7ee fdc2 	bl	8007524 <lv_obj_check_type>
 80189a0:	b1b0      	cbz	r0, 80189d0 <theme_apply+0xd88>
        lv_obj_add_style(obj, &styles->menu_page, 0);
 80189a2:	4d83      	ldr	r5, [pc, #524]	; (8018bb0 <theme_apply+0xf68>)
 80189a4:	6829      	ldr	r1, [r5, #0]
 80189a6:	2200      	movs	r2, #0
 80189a8:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 80189ac:	4620      	mov	r0, r4
 80189ae:	f7f2 fc03 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80189b2:	6829      	ldr	r1, [r5, #0]
 80189b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80189b8:	3108      	adds	r1, #8
 80189ba:	4620      	mov	r0, r4
 80189bc:	f7f2 fbfc 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80189c0:	6829      	ldr	r1, [r5, #0]
 80189c2:	4a7f      	ldr	r2, [pc, #508]	; (8018bc0 <theme_apply+0xf78>)
 80189c4:	3110      	adds	r1, #16
 80189c6:	4620      	mov	r0, r4
 80189c8:	f7f2 fbf6 	bl	800b1b8 <lv_obj_add_style>
 80189cc:	f7ff b951 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_section_class)) {
 80189d0:	497c      	ldr	r1, [pc, #496]	; (8018bc4 <theme_apply+0xf7c>)
 80189d2:	4620      	mov	r0, r4
 80189d4:	f7ee fda6 	bl	8007524 <lv_obj_check_type>
 80189d8:	b148      	cbz	r0, 80189ee <theme_apply+0xda6>
        lv_obj_add_style(obj, &styles->menu_section, 0);
 80189da:	4b75      	ldr	r3, [pc, #468]	; (8018bb0 <theme_apply+0xf68>)
 80189dc:	6819      	ldr	r1, [r3, #0]
 80189de:	2200      	movs	r2, #0
 80189e0:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 80189e4:	4620      	mov	r0, r4
 80189e6:	f7f2 fbe7 	bl	800b1b8 <lv_obj_add_style>
 80189ea:	f7ff b942 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_separator_class)) {
 80189ee:	4976      	ldr	r1, [pc, #472]	; (8018bc8 <theme_apply+0xf80>)
 80189f0:	4620      	mov	r0, r4
 80189f2:	f7ee fd97 	bl	8007524 <lv_obj_check_type>
 80189f6:	b148      	cbz	r0, 8018a0c <theme_apply+0xdc4>
        lv_obj_add_style(obj, &styles->menu_separator, 0);
 80189f8:	4b6d      	ldr	r3, [pc, #436]	; (8018bb0 <theme_apply+0xf68>)
 80189fa:	6819      	ldr	r1, [r3, #0]
 80189fc:	2200      	movs	r2, #0
 80189fe:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
 8018a02:	4620      	mov	r0, r4
 8018a04:	f7f2 fbd8 	bl	800b1b8 <lv_obj_add_style>
 8018a08:	f7ff b933 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 8018a0c:	496f      	ldr	r1, [pc, #444]	; (8018bcc <theme_apply+0xf84>)
 8018a0e:	4620      	mov	r0, r4
 8018a10:	f7ee fd88 	bl	8007524 <lv_obj_check_type>
 8018a14:	b970      	cbnz	r0, 8018a34 <theme_apply+0xdec>
    else if(lv_obj_check_type(obj, &lv_msgbox_backdrop_class)) {
 8018a16:	496e      	ldr	r1, [pc, #440]	; (8018bd0 <theme_apply+0xf88>)
 8018a18:	4620      	mov	r0, r4
 8018a1a:	f7ee fd83 	bl	8007524 <lv_obj_check_type>
 8018a1e:	b1c8      	cbz	r0, 8018a54 <theme_apply+0xe0c>
        lv_obj_add_style(obj, &styles->msgbox_backdrop_bg, 0);
 8018a20:	4b63      	ldr	r3, [pc, #396]	; (8018bb0 <theme_apply+0xf68>)
 8018a22:	6819      	ldr	r1, [r3, #0]
 8018a24:	2200      	movs	r2, #0
 8018a26:	f501 71f4 	add.w	r1, r1, #488	; 0x1e8
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	f7f2 fbc4 	bl	800b1b8 <lv_obj_add_style>
 8018a30:	f7ff b91f 	b.w	8017c72 <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->card, 0);
 8018a34:	4d5e      	ldr	r5, [pc, #376]	; (8018bb0 <theme_apply+0xf68>)
 8018a36:	6829      	ldr	r1, [r5, #0]
 8018a38:	2200      	movs	r2, #0
 8018a3a:	3118      	adds	r1, #24
 8018a3c:	4620      	mov	r0, r4
 8018a3e:	f7f2 fbbb 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 8018a42:	6829      	ldr	r1, [r5, #0]
 8018a44:	2200      	movs	r2, #0
 8018a46:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
 8018a4a:	4620      	mov	r0, r4
 8018a4c:	f7f2 fbb4 	bl	800b1b8 <lv_obj_add_style>
        return;
 8018a50:	f7ff b90f 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 8018a54:	495f      	ldr	r1, [pc, #380]	; (8018bd4 <theme_apply+0xf8c>)
 8018a56:	4620      	mov	r0, r4
 8018a58:	f7ee fd64 	bl	8007524 <lv_obj_check_type>
 8018a5c:	b308      	cbz	r0, 8018aa2 <theme_apply+0xe5a>
        lv_obj_add_style(obj, &styles->card, 0);
 8018a5e:	4d54      	ldr	r5, [pc, #336]	; (8018bb0 <theme_apply+0xf68>)
 8018a60:	6829      	ldr	r1, [r5, #0]
 8018a62:	2200      	movs	r2, #0
 8018a64:	3118      	adds	r1, #24
 8018a66:	4620      	mov	r0, r4
 8018a68:	f7f2 fba6 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8018a6c:	6829      	ldr	r1, [r5, #0]
 8018a6e:	2200      	movs	r2, #0
 8018a70:	3178      	adds	r1, #120	; 0x78
 8018a72:	4620      	mov	r0, r4
 8018a74:	f7f2 fba0 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8018a78:	6829      	ldr	r1, [r5, #0]
 8018a7a:	2204      	movs	r2, #4
 8018a7c:	31a0      	adds	r1, #160	; 0xa0
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f7f2 fb9a 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8018a84:	6829      	ldr	r1, [r5, #0]
 8018a86:	2208      	movs	r2, #8
 8018a88:	31a8      	adds	r1, #168	; 0xa8
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f7f2 fb94 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 8018a90:	6829      	ldr	r1, [r5, #0]
 8018a92:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8018a96:	3128      	adds	r1, #40	; 0x28
 8018a98:	4620      	mov	r0, r4
 8018a9a:	f7f2 fb8d 	bl	800b1b8 <lv_obj_add_style>
 8018a9e:	f7ff b8e8 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 8018aa2:	494d      	ldr	r1, [pc, #308]	; (8018bd8 <theme_apply+0xf90>)
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	f7ee fd3d 	bl	8007524 <lv_obj_check_type>
 8018aaa:	b1a0      	cbz	r0, 8018ad6 <theme_apply+0xe8e>
        lv_obj_add_style(obj, &styles->scr, 0);
 8018aac:	4d40      	ldr	r5, [pc, #256]	; (8018bb0 <theme_apply+0xf68>)
 8018aae:	2200      	movs	r2, #0
 8018ab0:	6829      	ldr	r1, [r5, #0]
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f7f2 fb80 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8018ab8:	6829      	ldr	r1, [r5, #0]
 8018aba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8018abe:	3108      	adds	r1, #8
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	f7f2 fb79 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8018ac6:	6829      	ldr	r1, [r5, #0]
 8018ac8:	4a3d      	ldr	r2, [pc, #244]	; (8018bc0 <theme_apply+0xf78>)
 8018aca:	3110      	adds	r1, #16
 8018acc:	4620      	mov	r0, r4
 8018ace:	f7f2 fb73 	bl	800b1b8 <lv_obj_add_style>
 8018ad2:	f7ff b8ce 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 8018ad6:	4941      	ldr	r1, [pc, #260]	; (8018bdc <theme_apply+0xf94>)
 8018ad8:	4620      	mov	r0, r4
 8018ada:	f7ee fd23 	bl	8007524 <lv_obj_check_type>
 8018ade:	b178      	cbz	r0, 8018b00 <theme_apply+0xeb8>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8018ae0:	4d33      	ldr	r5, [pc, #204]	; (8018bb0 <theme_apply+0xf68>)
 8018ae2:	6829      	ldr	r1, [r5, #0]
 8018ae4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8018ae8:	3108      	adds	r1, #8
 8018aea:	4620      	mov	r0, r4
 8018aec:	f7f2 fb64 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8018af0:	6829      	ldr	r1, [r5, #0]
 8018af2:	4a33      	ldr	r2, [pc, #204]	; (8018bc0 <theme_apply+0xf78>)
 8018af4:	3110      	adds	r1, #16
 8018af6:	4620      	mov	r0, r4
 8018af8:	f7f2 fb5e 	bl	800b1b8 <lv_obj_add_style>
 8018afc:	f7ff b8b9 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tabview_class)) {
 8018b00:	4937      	ldr	r1, [pc, #220]	; (8018be0 <theme_apply+0xf98>)
 8018b02:	4620      	mov	r0, r4
 8018b04:	f7ee fd0e 	bl	8007524 <lv_obj_check_type>
 8018b08:	b168      	cbz	r0, 8018b26 <theme_apply+0xede>
        lv_obj_add_style(obj, &styles->scr, 0);
 8018b0a:	4d29      	ldr	r5, [pc, #164]	; (8018bb0 <theme_apply+0xf68>)
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	6829      	ldr	r1, [r5, #0]
 8018b10:	4620      	mov	r0, r4
 8018b12:	f7f2 fb51 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8018b16:	6829      	ldr	r1, [r5, #0]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	3168      	adds	r1, #104	; 0x68
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	f7f2 fb4b 	bl	800b1b8 <lv_obj_add_style>
 8018b22:	f7ff b8a6 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_win_class)) {
 8018b26:	492f      	ldr	r1, [pc, #188]	; (8018be4 <theme_apply+0xf9c>)
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f7ee fcfb 	bl	8007524 <lv_obj_check_type>
 8018b2e:	b140      	cbz	r0, 8018b42 <theme_apply+0xefa>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 8018b30:	4b1f      	ldr	r3, [pc, #124]	; (8018bb0 <theme_apply+0xf68>)
 8018b32:	6819      	ldr	r1, [r3, #0]
 8018b34:	2200      	movs	r2, #0
 8018b36:	31c0      	adds	r1, #192	; 0xc0
 8018b38:	4620      	mov	r0, r4
 8018b3a:	f7f2 fb3d 	bl	800b1b8 <lv_obj_add_style>
 8018b3e:	f7ff b898 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 8018b42:	4929      	ldr	r1, [pc, #164]	; (8018be8 <theme_apply+0xfa0>)
 8018b44:	4620      	mov	r0, r4
 8018b46:	f7ee fced 	bl	8007524 <lv_obj_check_type>
 8018b4a:	b1e8      	cbz	r0, 8018b88 <theme_apply+0xf40>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 8018b4c:	4d18      	ldr	r5, [pc, #96]	; (8018bb0 <theme_apply+0xf68>)
 8018b4e:	6829      	ldr	r1, [r5, #0]
 8018b50:	2200      	movs	r2, #0
 8018b52:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8018b56:	4620      	mov	r0, r4
 8018b58:	f7f2 fb2e 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 8018b5c:	6829      	ldr	r1, [r5, #0]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	3180      	adds	r1, #128	; 0x80
 8018b62:	4620      	mov	r0, r4
 8018b64:	f7f2 fb28 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8018b68:	6829      	ldr	r1, [r5, #0]
 8018b6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8018b6e:	3150      	adds	r1, #80	; 0x50
 8018b70:	4620      	mov	r0, r4
 8018b72:	f7f2 fb21 	bl	800b1b8 <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 8018b76:	6829      	ldr	r1, [r5, #0]
 8018b78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8018b7c:	3180      	adds	r1, #128	; 0x80
 8018b7e:	4620      	mov	r0, r4
 8018b80:	f7f2 fb1a 	bl	800b1b8 <lv_obj_add_style>
 8018b84:	f7ff b875 	b.w	8017c72 <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 8018b88:	4918      	ldr	r1, [pc, #96]	; (8018bec <theme_apply+0xfa4>)
 8018b8a:	4620      	mov	r0, r4
 8018b8c:	f7ee fcca 	bl	8007524 <lv_obj_check_type>
 8018b90:	2800      	cmp	r0, #0
 8018b92:	f43f a86e 	beq.w	8017c72 <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->led, 0);
 8018b96:	4b06      	ldr	r3, [pc, #24]	; (8018bb0 <theme_apply+0xf68>)
 8018b98:	6819      	ldr	r1, [r3, #0]
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	f7f2 fb09 	bl	800b1b8 <lv_obj_add_style>
 8018ba6:	f7ff b864 	b.w	8017c72 <theme_apply+0x2a>
 8018baa:	bf00      	nop
 8018bac:	0802ddb4 	.word	0x0802ddb4
 8018bb0:	20002764 	.word	0x20002764
 8018bb4:	0802de78 	.word	0x0802de78
 8018bb8:	0802ddec 	.word	0x0802ddec
 8018bbc:	0802de08 	.word	0x0802de08
 8018bc0:	00010040 	.word	0x00010040
 8018bc4:	0802de24 	.word	0x0802de24
 8018bc8:	0802de40 	.word	0x0802de40
 8018bcc:	0802decc 	.word	0x0802decc
 8018bd0:	0802deb0 	.word	0x0802deb0
 8018bd4:	0802dee8 	.word	0x0802dee8
 8018bd8:	0802df3c 	.word	0x0802df3c
 8018bdc:	0802df58 	.word	0x0802df58
 8018be0:	0802df20 	.word	0x0802df20
 8018be4:	0802df74 	.word	0x0802df74
 8018be8:	0802d7f8 	.word	0x0802d7f8
 8018bec:	0802dd28 	.word	0x0802dd28

08018bf0 <dark_color_filter_cb>:
{
 8018bf0:	b508      	push	{r3, lr}
 8018bf2:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 8018bf4:	4611      	mov	r1, r2
 8018bf6:	f008 fd4d 	bl	8021694 <lv_color_darken>
}
 8018bfa:	bd08      	pop	{r3, pc}

08018bfc <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
 8018bfc:	b508      	push	{r3, lr}
    if(inited) {
 8018bfe:	4b04      	ldr	r3, [pc, #16]	; (8018c10 <style_init_reset+0x14>)
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	b113      	cbz	r3, 8018c0a <style_init_reset+0xe>
        lv_style_reset(style);
 8018c04:	f00a f98e 	bl	8022f24 <lv_style_reset>
    }
    else {
        lv_style_init(style);
    }
}
 8018c08:	bd08      	pop	{r3, pc}
        lv_style_init(style);
 8018c0a:	f00a f986 	bl	8022f1a <lv_style_init>
}
 8018c0e:	e7fb      	b.n	8018c08 <style_init_reset+0xc>
 8018c10:	20002760 	.word	0x20002760

08018c14 <grey_filter_cb>:
{
 8018c14:	b538      	push	{r3, r4, r5, lr}
 8018c16:	460d      	mov	r5, r1
 8018c18:	4614      	mov	r4, r2
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 8018c1a:	4b1a      	ldr	r3, [pc, #104]	; (8018c84 <grey_filter_cb+0x70>)
 8018c1c:	6a1b      	ldr	r3, [r3, #32]
 8018c1e:	f013 0f01 	tst.w	r3, #1
 8018c22:	d017      	beq.n	8018c54 <grey_filter_cb+0x40>
 8018c24:	2102      	movs	r1, #2
 8018c26:	2012      	movs	r0, #18
 8018c28:	f008 fde4 	bl	80217f4 <lv_palette_darken>
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8018c2c:	b2ab      	uxth	r3, r5
 8018c2e:	ea43 4105 	orr.w	r1, r3, r5, lsl #16
 8018c32:	4d15      	ldr	r5, [pc, #84]	; (8018c88 <grey_filter_cb+0x74>)
 8018c34:	4029      	ands	r1, r5
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8018c36:	b283      	uxth	r3, r0
 8018c38:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8018c3c:	4028      	ands	r0, r5
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8018c3e:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8018c40:	3404      	adds	r4, #4
 8018c42:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8018c44:	fb04 f000 	mul.w	r0, r4, r0
 8018c48:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8018c4c:	4028      	ands	r0, r5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8018c4e:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
}
 8018c52:	bd38      	pop	{r3, r4, r5, pc}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 8018c54:	2102      	movs	r1, #2
 8018c56:	2012      	movs	r0, #18
 8018c58:	f008 fdb6 	bl	80217c8 <lv_palette_lighten>
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8018c5c:	b2ab      	uxth	r3, r5
 8018c5e:	ea43 4105 	orr.w	r1, r3, r5, lsl #16
 8018c62:	4a09      	ldr	r2, [pc, #36]	; (8018c88 <grey_filter_cb+0x74>)
 8018c64:	4011      	ands	r1, r2
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8018c66:	b283      	uxth	r3, r0
 8018c68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8018c6c:	4010      	ands	r0, r2
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8018c6e:	1a40      	subs	r0, r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8018c70:	3404      	adds	r4, #4
 8018c72:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8018c74:	fb04 f000 	mul.w	r0, r4, r0
 8018c78:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8018c7c:	4010      	ands	r0, r2
    return ret;
 8018c7e:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
 8018c82:	e7e6      	b.n	8018c52 <grey_filter_cb+0x3e>
 8018c84:	20002768 	.word	0x20002768
 8018c88:	07e0f81f 	.word	0x07e0f81f

08018c8c <lv_theme_default_init>:
{
 8018c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c90:	b082      	sub	sp, #8
 8018c92:	4605      	mov	r5, r0
 8018c94:	4688      	mov	r8, r1
 8018c96:	4617      	mov	r7, r2
 8018c98:	461c      	mov	r4, r3
 8018c9a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 8018c9c:	4bbf      	ldr	r3, [pc, #764]	; (8018f9c <lv_theme_default_init+0x310>)
    if(!lv_theme_default_is_inited()) {
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	f001 8496 	beq.w	801a5d2 <lv_theme_default_init+0x1946>
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 8018ca6:	f007 fee3 	bl	8020a70 <lv_disp_get_default>
 8018caa:	f007 fee7 	bl	8020a7c <lv_disp_get_hor_res>
 8018cae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8018cb2:	f301 849b 	bgt.w	801a5ec <lv_theme_default_init+0x1960>
 8018cb6:	4bba      	ldr	r3, [pc, #744]	; (8018fa0 <lv_theme_default_init+0x314>)
 8018cb8:	2203      	movs	r2, #3
 8018cba:	701a      	strb	r2, [r3, #0]
    theme.disp = disp;
 8018cbc:	48b9      	ldr	r0, [pc, #740]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018cbe:	60c5      	str	r5, [r0, #12]
    theme.color_primary = color_primary;
 8018cc0:	f8a0 8010 	strh.w	r8, [r0, #16]
    theme.color_secondary = color_secondary;
 8018cc4:	8247      	strh	r7, [r0, #18]
    theme.font_small = font;
 8018cc6:	6146      	str	r6, [r0, #20]
    theme.font_normal = font;
 8018cc8:	6186      	str	r6, [r0, #24]
    theme.font_large = font;
 8018cca:	61c6      	str	r6, [r0, #28]
    theme.apply_cb = theme_apply;
 8018ccc:	4bb6      	ldr	r3, [pc, #728]	; (8018fa8 <lv_theme_default_init+0x31c>)
 8018cce:	6003      	str	r3, [r0, #0]
    theme.flags = dark ? MODE_DARK : 0;
 8018cd0:	6204      	str	r4, [r0, #32]
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8018cd2:	2c00      	cmp	r4, #0
 8018cd4:	f001 8497 	beq.w	801a606 <lv_theme_default_init+0x197a>
 8018cd8:	4bb4      	ldr	r3, [pc, #720]	; (8018fac <lv_theme_default_init+0x320>)
 8018cda:	f241 02a3 	movw	r2, #4259	; 0x10a3
 8018cde:	801a      	strh	r2, [r3, #0]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8018ce0:	2105      	movs	r1, #5
 8018ce2:	2012      	movs	r0, #18
 8018ce4:	f008 fd70 	bl	80217c8 <lv_palette_lighten>
 8018ce8:	4bb1      	ldr	r3, [pc, #708]	; (8018fb0 <lv_theme_default_init+0x324>)
 8018cea:	8018      	strh	r0, [r3, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8018cec:	4bad      	ldr	r3, [pc, #692]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018cee:	6a1b      	ldr	r3, [r3, #32]
 8018cf0:	f013 0f01 	tst.w	r3, #1
 8018cf4:	f001 849b 	beq.w	801a62e <lv_theme_default_init+0x19a2>
 8018cf8:	4bae      	ldr	r3, [pc, #696]	; (8018fb4 <lv_theme_default_init+0x328>)
 8018cfa:	f642 1246 	movw	r2, #10566	; 0x2946
 8018cfe:	801a      	strh	r2, [r3, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 8018d00:	4bad      	ldr	r3, [pc, #692]	; (8018fb8 <lv_theme_default_init+0x32c>)
 8018d02:	f642 1286 	movw	r2, #10630	; 0x2986
 8018d06:	801a      	strh	r2, [r3, #0]
    style_init_reset(&styles->transition_delayed);
 8018d08:	4cac      	ldr	r4, [pc, #688]	; (8018fbc <lv_theme_default_init+0x330>)
 8018d0a:	6820      	ldr	r0, [r4, #0]
 8018d0c:	30d0      	adds	r0, #208	; 0xd0
 8018d0e:	f7ff ff75 	bl	8018bfc <style_init_reset>
    style_init_reset(&styles->transition_normal);
 8018d12:	6820      	ldr	r0, [r4, #0]
 8018d14:	30d8      	adds	r0, #216	; 0xd8
 8018d16:	f7ff ff71 	bl	8018bfc <style_init_reset>
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 8018d1a:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 8018fc0 <lv_theme_default_init+0x334>
 8018d1e:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8018fc4 <lv_theme_default_init+0x338>
 8018d22:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8018fc8 <lv_theme_default_init+0x33c>
 8018d26:	2600      	movs	r6, #0
 8018d28:	9601      	str	r6, [sp, #4]
 8018d2a:	2346      	movs	r3, #70	; 0x46
 8018d2c:	9300      	str	r3, [sp, #0]
 8018d2e:	2350      	movs	r3, #80	; 0x50
 8018d30:	4652      	mov	r2, sl
 8018d32:	4649      	mov	r1, r9
 8018d34:	4640      	mov	r0, r8
 8018d36:	f00a f9af 	bl	8023098 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 8018d3a:	4fa4      	ldr	r7, [pc, #656]	; (8018fcc <lv_theme_default_init+0x340>)
 8018d3c:	9601      	str	r6, [sp, #4]
 8018d3e:	9600      	str	r6, [sp, #0]
 8018d40:	2350      	movs	r3, #80	; 0x50
 8018d42:	4652      	mov	r2, sl
 8018d44:	4649      	mov	r1, r9
 8018d46:	4638      	mov	r0, r7
 8018d48:	f00a f9a6 	bl	8023098 <lv_style_transition_dsc_init>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 8018d4c:	6820      	ldr	r0, [r4, #0]
 8018d4e:	4641      	mov	r1, r8
 8018d50:	30d0      	adds	r0, #208	; 0xd0
 8018d52:	f00a fc7f 	bl	8023654 <lv_style_set_transition>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 8018d56:	6820      	ldr	r0, [r4, #0]
 8018d58:	4639      	mov	r1, r7
 8018d5a:	30d8      	adds	r0, #216	; 0xd8
 8018d5c:	f00a fc7a 	bl	8023654 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar);
 8018d60:	6820      	ldr	r0, [r4, #0]
 8018d62:	3008      	adds	r0, #8
 8018d64:	f7ff ff4a 	bl	8018bfc <style_init_reset>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 8018d68:	4b8e      	ldr	r3, [pc, #568]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018d6a:	6a1b      	ldr	r3, [r3, #32]
 8018d6c:	f013 0f01 	tst.w	r3, #1
 8018d70:	f001 8470 	beq.w	801a654 <lv_theme_default_init+0x19c8>
 8018d74:	2102      	movs	r1, #2
 8018d76:	2012      	movs	r0, #18
 8018d78:	f008 fd3c 	bl	80217f4 <lv_palette_darken>
 8018d7c:	4601      	mov	r1, r0
    lv_style_set_bg_color(&styles->scrollbar, sb_color);
 8018d7e:	4c8f      	ldr	r4, [pc, #572]	; (8018fbc <lv_theme_default_init+0x330>)
 8018d80:	6820      	ldr	r0, [r4, #0]
 8018d82:	3008      	adds	r0, #8
 8018d84:	f00a fb76 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 8018d88:	6820      	ldr	r0, [r4, #0]
 8018d8a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8018d8e:	3008      	adds	r0, #8
 8018d90:	f00a fc42 	bl	8023618 <lv_style_set_radius>
    lv_style_set_pad_all(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 8018d94:	6826      	ldr	r6, [r4, #0]
 8018d96:	3608      	adds	r6, #8
 8018d98:	4b82      	ldr	r3, [pc, #520]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018d9a:	68dc      	ldr	r4, [r3, #12]
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
{
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	f007 fe95 	bl	8020acc <lv_disp_get_dpi>
 8018da2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8018da6:	28ef      	cmp	r0, #239	; 0xef
 8018da8:	f301 845a 	bgt.w	801a660 <lv_theme_default_init+0x19d4>
 8018dac:	2401      	movs	r4, #1
    lv_style_set_height(style, value);
}

static inline void lv_style_set_pad_all(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_left(style, value);
 8018dae:	4621      	mov	r1, r4
 8018db0:	4630      	mov	r0, r6
 8018db2:	f00a fb47 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018db6:	4621      	mov	r1, r4
 8018db8:	4630      	mov	r0, r6
 8018dba:	f00a fb49 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8018dbe:	4621      	mov	r1, r4
 8018dc0:	4630      	mov	r0, r6
 8018dc2:	f00a fb33 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018dc6:	4621      	mov	r1, r4
 8018dc8:	4630      	mov	r0, r6
 8018dca:	f00a fb35 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_width(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 8018dce:	4b7b      	ldr	r3, [pc, #492]	; (8018fbc <lv_theme_default_init+0x330>)
 8018dd0:	681c      	ldr	r4, [r3, #0]
 8018dd2:	3408      	adds	r4, #8
 8018dd4:	4b73      	ldr	r3, [pc, #460]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018dd6:	68de      	ldr	r6, [r3, #12]
 8018dd8:	4630      	mov	r0, r6
 8018dda:	f007 fe77 	bl	8020acc <lv_disp_get_dpi>
 8018dde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018de2:	28ef      	cmp	r0, #239	; 0xef
 8018de4:	f301 8460 	bgt.w	801a6a8 <lv_theme_default_init+0x1a1c>
 8018de8:	2101      	movs	r1, #1
 8018dea:	4620      	mov	r0, r4
 8018dec:	f00a fafa 	bl	80233e4 <lv_style_set_width>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 8018df0:	4c72      	ldr	r4, [pc, #456]	; (8018fbc <lv_theme_default_init+0x330>)
 8018df2:	6820      	ldr	r0, [r4, #0]
 8018df4:	2166      	movs	r1, #102	; 0x66
 8018df6:	3008      	adds	r0, #8
 8018df8:	f00a fb48 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 8018dfc:	6820      	ldr	r0, [r4, #0]
 8018dfe:	4973      	ldr	r1, [pc, #460]	; (8018fcc <lv_theme_default_init+0x340>)
 8018e00:	3008      	adds	r0, #8
 8018e02:	f00a fc27 	bl	8023654 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar_scrolled);
 8018e06:	6820      	ldr	r0, [r4, #0]
 8018e08:	3010      	adds	r0, #16
 8018e0a:	f7ff fef7 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 8018e0e:	6820      	ldr	r0, [r4, #0]
 8018e10:	21ff      	movs	r1, #255	; 0xff
 8018e12:	3010      	adds	r0, #16
 8018e14:	f00a fb3a 	bl	802348c <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 8018e18:	6820      	ldr	r0, [r4, #0]
 8018e1a:	f7ff feef 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 8018e1e:	21ff      	movs	r1, #255	; 0xff
 8018e20:	6820      	ldr	r0, [r4, #0]
 8018e22:	f00a fb33 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 8018e26:	4b61      	ldr	r3, [pc, #388]	; (8018fac <lv_theme_default_init+0x320>)
 8018e28:	8819      	ldrh	r1, [r3, #0]
 8018e2a:	6820      	ldr	r0, [r4, #0]
 8018e2c:	f00a fb22 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 8018e30:	4b5f      	ldr	r3, [pc, #380]	; (8018fb0 <lv_theme_default_init+0x324>)
 8018e32:	8819      	ldrh	r1, [r3, #0]
 8018e34:	6820      	ldr	r0, [r4, #0]
 8018e36:	f00a fbd1 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 8018e3a:	6824      	ldr	r4, [r4, #0]
 8018e3c:	4b58      	ldr	r3, [pc, #352]	; (8018fa0 <lv_theme_default_init+0x314>)
 8018e3e:	781b      	ldrb	r3, [r3, #0]
 8018e40:	2b01      	cmp	r3, #1
 8018e42:	f001 8441 	beq.w	801a6c8 <lv_theme_default_init+0x1a3c>
 8018e46:	2b02      	cmp	r3, #2
 8018e48:	f001 845b 	beq.w	801a702 <lv_theme_default_init+0x1a76>
 8018e4c:	4b55      	ldr	r3, [pc, #340]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018e4e:	68de      	ldr	r6, [r3, #12]
 8018e50:	4630      	mov	r0, r6
 8018e52:	f007 fe3b 	bl	8020acc <lv_disp_get_dpi>
 8018e56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018e5a:	0040      	lsls	r0, r0, #1
 8018e5c:	28ef      	cmp	r0, #239	; 0xef
 8018e5e:	f301 846d 	bgt.w	801a73c <lv_theme_default_init+0x1ab0>
 8018e62:	2101      	movs	r1, #1
 8018e64:	4620      	mov	r0, r4
 8018e66:	f00a faf9 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 8018e6a:	4b54      	ldr	r3, [pc, #336]	; (8018fbc <lv_theme_default_init+0x330>)
 8018e6c:	681c      	ldr	r4, [r3, #0]
 8018e6e:	4b4c      	ldr	r3, [pc, #304]	; (8018fa0 <lv_theme_default_init+0x314>)
 8018e70:	781b      	ldrb	r3, [r3, #0]
 8018e72:	2b01      	cmp	r3, #1
 8018e74:	f001 8472 	beq.w	801a75c <lv_theme_default_init+0x1ad0>
 8018e78:	2b02      	cmp	r3, #2
 8018e7a:	f001 848c 	beq.w	801a796 <lv_theme_default_init+0x1b0a>
 8018e7e:	4b49      	ldr	r3, [pc, #292]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018e80:	68de      	ldr	r6, [r3, #12]
 8018e82:	4630      	mov	r0, r6
 8018e84:	f007 fe22 	bl	8020acc <lv_disp_get_dpi>
 8018e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018e8c:	0040      	lsls	r0, r0, #1
 8018e8e:	28ef      	cmp	r0, #239	; 0xef
 8018e90:	f301 849e 	bgt.w	801a7d0 <lv_theme_default_init+0x1b44>
 8018e94:	2101      	movs	r1, #1
 8018e96:	4620      	mov	r0, r4
 8018e98:	f00a fae6 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 8018e9c:	4c47      	ldr	r4, [pc, #284]	; (8018fbc <lv_theme_default_init+0x330>)
 8018e9e:	6820      	ldr	r0, [r4, #0]
 8018ea0:	3018      	adds	r0, #24
 8018ea2:	f7ff feab 	bl	8018bfc <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 8018ea6:	6824      	ldr	r4, [r4, #0]
 8018ea8:	3418      	adds	r4, #24
 8018eaa:	4b3d      	ldr	r3, [pc, #244]	; (8018fa0 <lv_theme_default_init+0x314>)
 8018eac:	781b      	ldrb	r3, [r3, #0]
 8018eae:	2b01      	cmp	r3, #1
 8018eb0:	f001 849e 	beq.w	801a7f0 <lv_theme_default_init+0x1b64>
 8018eb4:	4b3b      	ldr	r3, [pc, #236]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018eb6:	68de      	ldr	r6, [r3, #12]
 8018eb8:	4630      	mov	r0, r6
 8018eba:	f007 fe07 	bl	8020acc <lv_disp_get_dpi>
 8018ebe:	00c0      	lsls	r0, r0, #3
 8018ec0:	28ef      	cmp	r0, #239	; 0xef
 8018ec2:	f301 84b2 	bgt.w	801a82a <lv_theme_default_init+0x1b9e>
 8018ec6:	2101      	movs	r1, #1
 8018ec8:	4620      	mov	r0, r4
 8018eca:	f00a fba5 	bl	8023618 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 8018ece:	4c3b      	ldr	r4, [pc, #236]	; (8018fbc <lv_theme_default_init+0x330>)
 8018ed0:	6820      	ldr	r0, [r4, #0]
 8018ed2:	21ff      	movs	r1, #255	; 0xff
 8018ed4:	3018      	adds	r0, #24
 8018ed6:	f00a fad9 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 8018eda:	6820      	ldr	r0, [r4, #0]
 8018edc:	4b35      	ldr	r3, [pc, #212]	; (8018fb4 <lv_theme_default_init+0x328>)
 8018ede:	8819      	ldrh	r1, [r3, #0]
 8018ee0:	3018      	adds	r0, #24
 8018ee2:	f00a fac7 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 8018ee6:	6820      	ldr	r0, [r4, #0]
 8018ee8:	4b33      	ldr	r3, [pc, #204]	; (8018fb8 <lv_theme_default_init+0x32c>)
 8018eea:	8819      	ldrh	r1, [r3, #0]
 8018eec:	3018      	adds	r0, #24
 8018eee:	f00a fae5 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 8018ef2:	6824      	ldr	r4, [r4, #0]
 8018ef4:	3418      	adds	r4, #24
 8018ef6:	4b2b      	ldr	r3, [pc, #172]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018ef8:	68de      	ldr	r6, [r3, #12]
 8018efa:	4630      	mov	r0, r6
 8018efc:	f007 fde6 	bl	8020acc <lv_disp_get_dpi>
 8018f00:	0040      	lsls	r0, r0, #1
 8018f02:	28ef      	cmp	r0, #239	; 0xef
 8018f04:	f301 849f 	bgt.w	801a846 <lv_theme_default_init+0x1bba>
 8018f08:	2101      	movs	r1, #1
 8018f0a:	4620      	mov	r0, r4
 8018f0c:	f00a fae8 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 8018f10:	4c2a      	ldr	r4, [pc, #168]	; (8018fbc <lv_theme_default_init+0x330>)
 8018f12:	6820      	ldr	r0, [r4, #0]
 8018f14:	2101      	movs	r1, #1
 8018f16:	3018      	adds	r0, #24
 8018f18:	f00a faee 	bl	80234f8 <lv_style_set_border_post>
    lv_style_set_text_color(&styles->card, color_text);
 8018f1c:	6820      	ldr	r0, [r4, #0]
 8018f1e:	4b24      	ldr	r3, [pc, #144]	; (8018fb0 <lv_theme_default_init+0x324>)
 8018f20:	8819      	ldrh	r1, [r3, #0]
 8018f22:	3018      	adds	r0, #24
 8018f24:	f00a fb5a 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 8018f28:	6826      	ldr	r6, [r4, #0]
 8018f2a:	3618      	adds	r6, #24
 8018f2c:	4b1c      	ldr	r3, [pc, #112]	; (8018fa0 <lv_theme_default_init+0x314>)
 8018f2e:	781b      	ldrb	r3, [r3, #0]
 8018f30:	2b01      	cmp	r3, #1
 8018f32:	f001 8496 	beq.w	801a862 <lv_theme_default_init+0x1bd6>
 8018f36:	2b02      	cmp	r3, #2
 8018f38:	f001 84b0 	beq.w	801a89c <lv_theme_default_init+0x1c10>
 8018f3c:	4b19      	ldr	r3, [pc, #100]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018f3e:	68dc      	ldr	r4, [r3, #12]
 8018f40:	4620      	mov	r0, r4
 8018f42:	f007 fdc3 	bl	8020acc <lv_disp_get_dpi>
 8018f46:	0100      	lsls	r0, r0, #4
 8018f48:	28ef      	cmp	r0, #239	; 0xef
 8018f4a:	f301 84c4 	bgt.w	801a8d6 <lv_theme_default_init+0x1c4a>
 8018f4e:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8018f50:	4621      	mov	r1, r4
 8018f52:	4630      	mov	r0, r6
 8018f54:	f00a fa76 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8018f58:	4621      	mov	r1, r4
 8018f5a:	4630      	mov	r0, r6
 8018f5c:	f00a fa78 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8018f60:	4621      	mov	r1, r4
 8018f62:	4630      	mov	r0, r6
 8018f64:	f00a fa62 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8018f68:	4621      	mov	r1, r4
 8018f6a:	4630      	mov	r0, r6
 8018f6c:	f00a fa64 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 8018f70:	4b12      	ldr	r3, [pc, #72]	; (8018fbc <lv_theme_default_init+0x330>)
 8018f72:	681c      	ldr	r4, [r3, #0]
 8018f74:	3418      	adds	r4, #24
 8018f76:	4b0a      	ldr	r3, [pc, #40]	; (8018fa0 <lv_theme_default_init+0x314>)
 8018f78:	781b      	ldrb	r3, [r3, #0]
 8018f7a:	2b01      	cmp	r3, #1
 8018f7c:	f001 84b9 	beq.w	801a8f2 <lv_theme_default_init+0x1c66>
 8018f80:	2b02      	cmp	r3, #2
 8018f82:	f001 84d3 	beq.w	801a92c <lv_theme_default_init+0x1ca0>
 8018f86:	4b07      	ldr	r3, [pc, #28]	; (8018fa4 <lv_theme_default_init+0x318>)
 8018f88:	68de      	ldr	r6, [r3, #12]
 8018f8a:	4630      	mov	r0, r6
 8018f8c:	f007 fd9e 	bl	8020acc <lv_disp_get_dpi>
 8018f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018f94:	0040      	lsls	r0, r0, #1
 8018f96:	28ef      	cmp	r0, #239	; 0xef
 8018f98:	e01a      	b.n	8018fd0 <lv_theme_default_init+0x344>
 8018f9a:	bf00      	nop
 8018f9c:	2000297c 	.word	0x2000297c
 8018fa0:	20002754 	.word	0x20002754
 8018fa4:	20002768 	.word	0x20002768
 8018fa8:	08017c49 	.word	0x08017c49
 8018fac:	20002744 	.word	0x20002744
 8018fb0:	20002748 	.word	0x20002748
 8018fb4:	2000273c 	.word	0x2000273c
 8018fb8:	20002740 	.word	0x20002740
 8018fbc:	20002764 	.word	0x20002764
 8018fc0:	08020ddd 	.word	0x08020ddd
 8018fc4:	0802d7c0 	.word	0x0802d7c0
 8018fc8:	2000278c 	.word	0x2000278c
 8018fcc:	200027a0 	.word	0x200027a0
 8018fd0:	f301 84c9 	bgt.w	801a966 <lv_theme_default_init+0x1cda>
 8018fd4:	2101      	movs	r1, #1
 8018fd6:	4620      	mov	r0, r4
 8018fd8:	f00a fa40 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 8018fdc:	4bc0      	ldr	r3, [pc, #768]	; (80192e0 <lv_theme_default_init+0x654>)
 8018fde:	681c      	ldr	r4, [r3, #0]
 8018fe0:	3418      	adds	r4, #24
 8018fe2:	4bc0      	ldr	r3, [pc, #768]	; (80192e4 <lv_theme_default_init+0x658>)
 8018fe4:	781b      	ldrb	r3, [r3, #0]
 8018fe6:	2b01      	cmp	r3, #1
 8018fe8:	f001 84cd 	beq.w	801a986 <lv_theme_default_init+0x1cfa>
 8018fec:	2b02      	cmp	r3, #2
 8018fee:	f001 84e7 	beq.w	801a9c0 <lv_theme_default_init+0x1d34>
 8018ff2:	4bbd      	ldr	r3, [pc, #756]	; (80192e8 <lv_theme_default_init+0x65c>)
 8018ff4:	68de      	ldr	r6, [r3, #12]
 8018ff6:	4630      	mov	r0, r6
 8018ff8:	f007 fd68 	bl	8020acc <lv_disp_get_dpi>
 8018ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019000:	0040      	lsls	r0, r0, #1
 8019002:	28ef      	cmp	r0, #239	; 0xef
 8019004:	f301 84fe 	bgt.w	801aa04 <lv_theme_default_init+0x1d78>
 8019008:	2101      	movs	r1, #1
 801900a:	4620      	mov	r0, r4
 801900c:	f00a fa2c 	bl	8023468 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 8019010:	4eb3      	ldr	r6, [pc, #716]	; (80192e0 <lv_theme_default_init+0x654>)
 8019012:	6834      	ldr	r4, [r6, #0]
 8019014:	3418      	adds	r4, #24
 8019016:	2012      	movs	r0, #18
 8019018:	f008 fbcc 	bl	80217b4 <lv_palette_main>
 801901c:	4601      	mov	r1, r0
 801901e:	4620      	mov	r0, r4
 8019020:	f00a fab8 	bl	8023594 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 8019024:	6834      	ldr	r4, [r6, #0]
 8019026:	3418      	adds	r4, #24
 8019028:	4baf      	ldr	r3, [pc, #700]	; (80192e8 <lv_theme_default_init+0x65c>)
 801902a:	68de      	ldr	r6, [r3, #12]
 801902c:	4630      	mov	r0, r6
 801902e:	f007 fd4d 	bl	8020acc <lv_disp_get_dpi>
 8019032:	28ef      	cmp	r0, #239	; 0xef
 8019034:	f301 84f6 	bgt.w	801aa24 <lv_theme_default_init+0x1d98>
 8019038:	2101      	movs	r1, #1
 801903a:	4620      	mov	r0, r4
 801903c:	f00a faa4 	bl	8023588 <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 8019040:	4ca7      	ldr	r4, [pc, #668]	; (80192e0 <lv_theme_default_init+0x654>)
 8019042:	6820      	ldr	r0, [r4, #0]
 8019044:	30a0      	adds	r0, #160	; 0xa0
 8019046:	f7ff fdd9 	bl	8018bfc <style_init_reset>
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 801904a:	4ea7      	ldr	r6, [pc, #668]	; (80192e8 <lv_theme_default_init+0x65c>)
 801904c:	6820      	ldr	r0, [r4, #0]
 801904e:	8a31      	ldrh	r1, [r6, #16]
 8019050:	30a0      	adds	r0, #160	; 0xa0
 8019052:	f00a fa5d 	bl	8023510 <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 8019056:	6824      	ldr	r4, [r4, #0]
 8019058:	34a0      	adds	r4, #160	; 0xa0
 801905a:	68f6      	ldr	r6, [r6, #12]
 801905c:	4630      	mov	r0, r6
 801905e:	f007 fd35 	bl	8020acc <lv_disp_get_dpi>
 8019062:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019066:	28ef      	cmp	r0, #239	; 0xef
 8019068:	f301 84e9 	bgt.w	801aa3e <lv_theme_default_init+0x1db2>
 801906c:	2101      	movs	r1, #1
 801906e:	4620      	mov	r0, r4
 8019070:	f00a fa48 	bl	8023504 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 8019074:	4b9a      	ldr	r3, [pc, #616]	; (80192e0 <lv_theme_default_init+0x654>)
 8019076:	681c      	ldr	r4, [r3, #0]
 8019078:	34a0      	adds	r4, #160	; 0xa0
 801907a:	4b9b      	ldr	r3, [pc, #620]	; (80192e8 <lv_theme_default_init+0x65c>)
 801907c:	68de      	ldr	r6, [r3, #12]
 801907e:	4630      	mov	r0, r6
 8019080:	f007 fd24 	bl	8020acc <lv_disp_get_dpi>
 8019084:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019088:	28ef      	cmp	r0, #239	; 0xef
 801908a:	f301 84e8 	bgt.w	801aa5e <lv_theme_default_init+0x1dd2>
 801908e:	2101      	movs	r1, #1
 8019090:	4620      	mov	r0, r4
 8019092:	f00a fa4f 	bl	8023534 <lv_style_set_outline_pad>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 8019096:	4c92      	ldr	r4, [pc, #584]	; (80192e0 <lv_theme_default_init+0x654>)
 8019098:	6820      	ldr	r0, [r4, #0]
 801909a:	217f      	movs	r1, #127	; 0x7f
 801909c:	30a0      	adds	r0, #160	; 0xa0
 801909e:	f00a fa43 	bl	8023528 <lv_style_set_outline_opa>
    style_init_reset(&styles->outline_secondary);
 80190a2:	6820      	ldr	r0, [r4, #0]
 80190a4:	30a8      	adds	r0, #168	; 0xa8
 80190a6:	f7ff fda9 	bl	8018bfc <style_init_reset>
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 80190aa:	4e8f      	ldr	r6, [pc, #572]	; (80192e8 <lv_theme_default_init+0x65c>)
 80190ac:	6820      	ldr	r0, [r4, #0]
 80190ae:	8a71      	ldrh	r1, [r6, #18]
 80190b0:	30a8      	adds	r0, #168	; 0xa8
 80190b2:	f00a fa2d 	bl	8023510 <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 80190b6:	6824      	ldr	r4, [r4, #0]
 80190b8:	34a8      	adds	r4, #168	; 0xa8
 80190ba:	68f6      	ldr	r6, [r6, #12]
 80190bc:	4630      	mov	r0, r6
 80190be:	f007 fd05 	bl	8020acc <lv_disp_get_dpi>
 80190c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80190c6:	28ef      	cmp	r0, #239	; 0xef
 80190c8:	f301 84d9 	bgt.w	801aa7e <lv_theme_default_init+0x1df2>
 80190cc:	2101      	movs	r1, #1
 80190ce:	4620      	mov	r0, r4
 80190d0:	f00a fa18 	bl	8023504 <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 80190d4:	4c82      	ldr	r4, [pc, #520]	; (80192e0 <lv_theme_default_init+0x654>)
 80190d6:	6820      	ldr	r0, [r4, #0]
 80190d8:	217f      	movs	r1, #127	; 0x7f
 80190da:	30a8      	adds	r0, #168	; 0xa8
 80190dc:	f00a fa24 	bl	8023528 <lv_style_set_outline_opa>
    style_init_reset(&styles->btn);
 80190e0:	6820      	ldr	r0, [r4, #0]
 80190e2:	3020      	adds	r0, #32
 80190e4:	f7ff fd8a 	bl	8018bfc <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 80190e8:	6824      	ldr	r4, [r4, #0]
 80190ea:	3420      	adds	r4, #32
 80190ec:	4b7d      	ldr	r3, [pc, #500]	; (80192e4 <lv_theme_default_init+0x658>)
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	2b01      	cmp	r3, #1
 80190f2:	f001 84d4 	beq.w	801aa9e <lv_theme_default_init+0x1e12>
 80190f6:	2b02      	cmp	r3, #2
 80190f8:	f001 84ea 	beq.w	801aad0 <lv_theme_default_init+0x1e44>
                                                                             16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 80190fc:	4b7a      	ldr	r3, [pc, #488]	; (80192e8 <lv_theme_default_init+0x65c>)
 80190fe:	68de      	ldr	r6, [r3, #12]
 8019100:	4630      	mov	r0, r6
 8019102:	f007 fce3 	bl	8020acc <lv_disp_get_dpi>
 8019106:	00c0      	lsls	r0, r0, #3
 8019108:	28ef      	cmp	r0, #239	; 0xef
 801910a:	f301 84fe 	bgt.w	801ab0a <lv_theme_default_init+0x1e7e>
 801910e:	2101      	movs	r1, #1
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 8019110:	4620      	mov	r0, r4
 8019112:	f00a fa81 	bl	8023618 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 8019116:	4c72      	ldr	r4, [pc, #456]	; (80192e0 <lv_theme_default_init+0x654>)
 8019118:	6820      	ldr	r0, [r4, #0]
 801911a:	21ff      	movs	r1, #255	; 0xff
 801911c:	3020      	adds	r0, #32
 801911e:	f00a f9b5 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 8019122:	6820      	ldr	r0, [r4, #0]
 8019124:	4b71      	ldr	r3, [pc, #452]	; (80192ec <lv_theme_default_init+0x660>)
 8019126:	8819      	ldrh	r1, [r3, #0]
 8019128:	3020      	adds	r0, #32
 801912a:	f00a f9a3 	bl	8023474 <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 801912e:	4b6e      	ldr	r3, [pc, #440]	; (80192e8 <lv_theme_default_init+0x65c>)
 8019130:	6a1b      	ldr	r3, [r3, #32]
 8019132:	f013 0f01 	tst.w	r3, #1
 8019136:	f001 84f6 	beq.w	801ab26 <lv_theme_default_init+0x1e9a>
    lv_style_set_text_color(&styles->btn, color_text);
 801913a:	4c69      	ldr	r4, [pc, #420]	; (80192e0 <lv_theme_default_init+0x654>)
 801913c:	6820      	ldr	r0, [r4, #0]
 801913e:	4b6c      	ldr	r3, [pc, #432]	; (80192f0 <lv_theme_default_init+0x664>)
 8019140:	8819      	ldrh	r1, [r3, #0]
 8019142:	3020      	adds	r0, #32
 8019144:	f00a fa4a 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8019148:	6826      	ldr	r6, [r4, #0]
 801914a:	3620      	adds	r6, #32
 801914c:	4b65      	ldr	r3, [pc, #404]	; (80192e4 <lv_theme_default_init+0x658>)
 801914e:	781b      	ldrb	r3, [r3, #0]
 8019150:	2b01      	cmp	r3, #1
 8019152:	f001 8548 	beq.w	801abe6 <lv_theme_default_init+0x1f5a>
 8019156:	2b02      	cmp	r3, #2
 8019158:	f001 8562 	beq.w	801ac20 <lv_theme_default_init+0x1f94>
 801915c:	4b62      	ldr	r3, [pc, #392]	; (80192e8 <lv_theme_default_init+0x65c>)
 801915e:	68dc      	ldr	r4, [r3, #12]
 8019160:	4620      	mov	r0, r4
 8019162:	f007 fcb3 	bl	8020acc <lv_disp_get_dpi>
 8019166:	0100      	lsls	r0, r0, #4
 8019168:	28ef      	cmp	r0, #239	; 0xef
 801916a:	f301 8576 	bgt.w	801ac5a <lv_theme_default_init+0x1fce>
 801916e:	2401      	movs	r4, #1
}

static inline void lv_style_set_pad_hor(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_left(style, value);
 8019170:	4621      	mov	r1, r4
 8019172:	4630      	mov	r0, r6
 8019174:	f00a f966 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019178:	4621      	mov	r1, r4
 801917a:	4630      	mov	r0, r6
 801917c:	f00a f968 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 8019180:	4b57      	ldr	r3, [pc, #348]	; (80192e0 <lv_theme_default_init+0x654>)
 8019182:	681e      	ldr	r6, [r3, #0]
 8019184:	3620      	adds	r6, #32
 8019186:	4b57      	ldr	r3, [pc, #348]	; (80192e4 <lv_theme_default_init+0x658>)
 8019188:	781b      	ldrb	r3, [r3, #0]
 801918a:	2b01      	cmp	r3, #1
 801918c:	f001 8573 	beq.w	801ac76 <lv_theme_default_init+0x1fea>
 8019190:	2b02      	cmp	r3, #2
 8019192:	f001 858d 	beq.w	801acb0 <lv_theme_default_init+0x2024>
 8019196:	4b54      	ldr	r3, [pc, #336]	; (80192e8 <lv_theme_default_init+0x65c>)
 8019198:	68dc      	ldr	r4, [r3, #12]
 801919a:	4620      	mov	r0, r4
 801919c:	f007 fc96 	bl	8020acc <lv_disp_get_dpi>
 80191a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80191a4:	0040      	lsls	r0, r0, #1
 80191a6:	28ef      	cmp	r0, #239	; 0xef
 80191a8:	f301 859f 	bgt.w	801acea <lv_theme_default_init+0x205e>
 80191ac:	2401      	movs	r4, #1
}

static inline void lv_style_set_pad_ver(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_top(style, value);
 80191ae:	4621      	mov	r1, r4
 80191b0:	4630      	mov	r0, r6
 80191b2:	f00a f93b 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80191b6:	4621      	mov	r1, r4
 80191b8:	4630      	mov	r0, r6
 80191ba:	f00a f93d 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 80191be:	4b48      	ldr	r3, [pc, #288]	; (80192e0 <lv_theme_default_init+0x654>)
 80191c0:	681c      	ldr	r4, [r3, #0]
 80191c2:	3420      	adds	r4, #32
 80191c4:	4b48      	ldr	r3, [pc, #288]	; (80192e8 <lv_theme_default_init+0x65c>)
 80191c6:	68de      	ldr	r6, [r3, #12]
 80191c8:	4630      	mov	r0, r6
 80191ca:	f007 fc7f 	bl	8020acc <lv_disp_get_dpi>
 80191ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80191d2:	28ef      	cmp	r0, #239	; 0xef
 80191d4:	f301 8599 	bgt.w	801ad0a <lv_theme_default_init+0x207e>
 80191d8:	2101      	movs	r1, #1
 80191da:	4620      	mov	r0, r4
 80191dc:	f00a f944 	bl	8023468 <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 80191e0:	4b3f      	ldr	r3, [pc, #252]	; (80192e0 <lv_theme_default_init+0x654>)
 80191e2:	681c      	ldr	r4, [r3, #0]
 80191e4:	3420      	adds	r4, #32
 80191e6:	4b40      	ldr	r3, [pc, #256]	; (80192e8 <lv_theme_default_init+0x65c>)
 80191e8:	68de      	ldr	r6, [r3, #12]
 80191ea:	4630      	mov	r0, r6
 80191ec:	f007 fc6e 	bl	8020acc <lv_disp_get_dpi>
 80191f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80191f4:	28ef      	cmp	r0, #239	; 0xef
 80191f6:	f301 8598 	bgt.w	801ad2a <lv_theme_default_init+0x209e>
 80191fa:	2101      	movs	r1, #1
 80191fc:	4620      	mov	r0, r4
 80191fe:	f00a f92d 	bl	802345c <lv_style_set_pad_row>
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
}

static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
{
    dsc->filter_cb = cb;
 8019202:	4f3c      	ldr	r7, [pc, #240]	; (80192f4 <lv_theme_default_init+0x668>)
 8019204:	4b3c      	ldr	r3, [pc, #240]	; (80192f8 <lv_theme_default_init+0x66c>)
 8019206:	603b      	str	r3, [r7, #0]
 8019208:	4e3c      	ldr	r6, [pc, #240]	; (80192fc <lv_theme_default_init+0x670>)
 801920a:	4b3d      	ldr	r3, [pc, #244]	; (8019300 <lv_theme_default_init+0x674>)
 801920c:	6033      	str	r3, [r6, #0]
    style_init_reset(&styles->pressed);
 801920e:	4c34      	ldr	r4, [pc, #208]	; (80192e0 <lv_theme_default_init+0x654>)
 8019210:	6820      	ldr	r0, [r4, #0]
 8019212:	3058      	adds	r0, #88	; 0x58
 8019214:	f7ff fcf2 	bl	8018bfc <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 8019218:	6820      	ldr	r0, [r4, #0]
 801921a:	4639      	mov	r1, r7
 801921c:	3058      	adds	r0, #88	; 0x58
 801921e:	f00a fa07 	bl	8023630 <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 8019222:	6820      	ldr	r0, [r4, #0]
 8019224:	2123      	movs	r1, #35	; 0x23
 8019226:	3058      	adds	r0, #88	; 0x58
 8019228:	f00a fa08 	bl	802363c <lv_style_set_color_filter_opa>
    style_init_reset(&styles->disabled);
 801922c:	6820      	ldr	r0, [r4, #0]
 801922e:	3060      	adds	r0, #96	; 0x60
 8019230:	f7ff fce4 	bl	8018bfc <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 8019234:	6820      	ldr	r0, [r4, #0]
 8019236:	4631      	mov	r1, r6
 8019238:	3060      	adds	r0, #96	; 0x60
 801923a:	f00a f9f9 	bl	8023630 <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 801923e:	6820      	ldr	r0, [r4, #0]
 8019240:	217f      	movs	r1, #127	; 0x7f
 8019242:	3060      	adds	r0, #96	; 0x60
 8019244:	f00a f9fa 	bl	802363c <lv_style_set_color_filter_opa>
    style_init_reset(&styles->clip_corner);
 8019248:	6820      	ldr	r0, [r4, #0]
 801924a:	30c0      	adds	r0, #192	; 0xc0
 801924c:	f7ff fcd6 	bl	8018bfc <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 8019250:	6820      	ldr	r0, [r4, #0]
 8019252:	2101      	movs	r1, #1
 8019254:	30c0      	adds	r0, #192	; 0xc0
 8019256:	f00a f9e5 	bl	8023624 <lv_style_set_clip_corner>
    lv_style_set_border_post(&styles->clip_corner, true);
 801925a:	6820      	ldr	r0, [r4, #0]
 801925c:	2101      	movs	r1, #1
 801925e:	30c0      	adds	r0, #192	; 0xc0
 8019260:	f00a f94a 	bl	80234f8 <lv_style_set_border_post>
    style_init_reset(&styles->pad_normal);
 8019264:	6820      	ldr	r0, [r4, #0]
 8019266:	3080      	adds	r0, #128	; 0x80
 8019268:	f7ff fcc8 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 801926c:	6826      	ldr	r6, [r4, #0]
 801926e:	3680      	adds	r6, #128	; 0x80
 8019270:	4b1c      	ldr	r3, [pc, #112]	; (80192e4 <lv_theme_default_init+0x658>)
 8019272:	781b      	ldrb	r3, [r3, #0]
 8019274:	2b01      	cmp	r3, #1
 8019276:	f001 856f 	beq.w	801ad58 <lv_theme_default_init+0x20cc>
 801927a:	2b02      	cmp	r3, #2
 801927c:	f001 8589 	beq.w	801ad92 <lv_theme_default_init+0x2106>
 8019280:	4b19      	ldr	r3, [pc, #100]	; (80192e8 <lv_theme_default_init+0x65c>)
 8019282:	68dc      	ldr	r4, [r3, #12]
 8019284:	4620      	mov	r0, r4
 8019286:	f007 fc21 	bl	8020acc <lv_disp_get_dpi>
 801928a:	0100      	lsls	r0, r0, #4
 801928c:	28ef      	cmp	r0, #239	; 0xef
 801928e:	f301 859d 	bgt.w	801adcc <lv_theme_default_init+0x2140>
 8019292:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019294:	4621      	mov	r1, r4
 8019296:	4630      	mov	r0, r6
 8019298:	f00a f8d4 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 801929c:	4621      	mov	r1, r4
 801929e:	4630      	mov	r0, r6
 80192a0:	f00a f8d6 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 80192a4:	4621      	mov	r1, r4
 80192a6:	4630      	mov	r0, r6
 80192a8:	f00a f8c0 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80192ac:	4621      	mov	r1, r4
 80192ae:	4630      	mov	r0, r6
 80192b0:	f00a f8c2 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 80192b4:	4b0a      	ldr	r3, [pc, #40]	; (80192e0 <lv_theme_default_init+0x654>)
 80192b6:	681c      	ldr	r4, [r3, #0]
 80192b8:	3480      	adds	r4, #128	; 0x80
 80192ba:	4b0a      	ldr	r3, [pc, #40]	; (80192e4 <lv_theme_default_init+0x658>)
 80192bc:	781b      	ldrb	r3, [r3, #0]
 80192be:	2b01      	cmp	r3, #1
 80192c0:	f001 8592 	beq.w	801ade8 <lv_theme_default_init+0x215c>
 80192c4:	2b02      	cmp	r3, #2
 80192c6:	f001 85ac 	beq.w	801ae22 <lv_theme_default_init+0x2196>
 80192ca:	4b07      	ldr	r3, [pc, #28]	; (80192e8 <lv_theme_default_init+0x65c>)
 80192cc:	68de      	ldr	r6, [r3, #12]
 80192ce:	4630      	mov	r0, r6
 80192d0:	f007 fbfc 	bl	8020acc <lv_disp_get_dpi>
 80192d4:	0100      	lsls	r0, r0, #4
 80192d6:	28ef      	cmp	r0, #239	; 0xef
 80192d8:	f301 85c0 	bgt.w	801ae5c <lv_theme_default_init+0x21d0>
 80192dc:	2101      	movs	r1, #1
 80192de:	e011      	b.n	8019304 <lv_theme_default_init+0x678>
 80192e0:	20002764 	.word	0x20002764
 80192e4:	20002754 	.word	0x20002754
 80192e8:	20002768 	.word	0x20002768
 80192ec:	20002740 	.word	0x20002740
 80192f0:	20002748 	.word	0x20002748
 80192f4:	2000274c 	.word	0x2000274c
 80192f8:	08018bf1 	.word	0x08018bf1
 80192fc:	20002758 	.word	0x20002758
 8019300:	08018c15 	.word	0x08018c15
 8019304:	4620      	mov	r0, r4
 8019306:	f00a f8a9 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 801930a:	4bc6      	ldr	r3, [pc, #792]	; (8019624 <lv_theme_default_init+0x998>)
 801930c:	681c      	ldr	r4, [r3, #0]
 801930e:	3480      	adds	r4, #128	; 0x80
 8019310:	4bc5      	ldr	r3, [pc, #788]	; (8019628 <lv_theme_default_init+0x99c>)
 8019312:	781b      	ldrb	r3, [r3, #0]
 8019314:	2b01      	cmp	r3, #1
 8019316:	f001 85af 	beq.w	801ae78 <lv_theme_default_init+0x21ec>
 801931a:	2b02      	cmp	r3, #2
 801931c:	f001 85c9 	beq.w	801aeb2 <lv_theme_default_init+0x2226>
 8019320:	4bc2      	ldr	r3, [pc, #776]	; (801962c <lv_theme_default_init+0x9a0>)
 8019322:	68de      	ldr	r6, [r3, #12]
 8019324:	4630      	mov	r0, r6
 8019326:	f007 fbd1 	bl	8020acc <lv_disp_get_dpi>
 801932a:	0100      	lsls	r0, r0, #4
 801932c:	28ef      	cmp	r0, #239	; 0xef
 801932e:	f301 85dd 	bgt.w	801aeec <lv_theme_default_init+0x2260>
 8019332:	2101      	movs	r1, #1
 8019334:	4620      	mov	r0, r4
 8019336:	f00a f897 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 801933a:	4cba      	ldr	r4, [pc, #744]	; (8019624 <lv_theme_default_init+0x998>)
 801933c:	6820      	ldr	r0, [r4, #0]
 801933e:	3078      	adds	r0, #120	; 0x78
 8019340:	f7ff fc5c 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 8019344:	6826      	ldr	r6, [r4, #0]
 8019346:	3678      	adds	r6, #120	; 0x78
 8019348:	4bb7      	ldr	r3, [pc, #732]	; (8019628 <lv_theme_default_init+0x99c>)
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	2b01      	cmp	r3, #1
 801934e:	f001 85db 	beq.w	801af08 <lv_theme_default_init+0x227c>
 8019352:	2b02      	cmp	r3, #2
 8019354:	f001 85f5 	beq.w	801af42 <lv_theme_default_init+0x22b6>
 8019358:	4bb4      	ldr	r3, [pc, #720]	; (801962c <lv_theme_default_init+0x9a0>)
 801935a:	68dc      	ldr	r4, [r3, #12]
 801935c:	4620      	mov	r0, r4
 801935e:	f007 fbb5 	bl	8020acc <lv_disp_get_dpi>
 8019362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019366:	0040      	lsls	r0, r0, #1
 8019368:	28ef      	cmp	r0, #239	; 0xef
 801936a:	f301 8607 	bgt.w	801af7c <lv_theme_default_init+0x22f0>
 801936e:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019370:	4621      	mov	r1, r4
 8019372:	4630      	mov	r0, r6
 8019374:	f00a f866 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019378:	4621      	mov	r1, r4
 801937a:	4630      	mov	r0, r6
 801937c:	f00a f868 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019380:	4621      	mov	r1, r4
 8019382:	4630      	mov	r0, r6
 8019384:	f00a f852 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019388:	4621      	mov	r1, r4
 801938a:	4630      	mov	r0, r6
 801938c:	f00a f854 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8019390:	4ba4      	ldr	r3, [pc, #656]	; (8019624 <lv_theme_default_init+0x998>)
 8019392:	681e      	ldr	r6, [r3, #0]
 8019394:	3678      	adds	r6, #120	; 0x78
 8019396:	4ba4      	ldr	r3, [pc, #656]	; (8019628 <lv_theme_default_init+0x99c>)
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	2b01      	cmp	r3, #1
 801939c:	f001 85fe 	beq.w	801af9c <lv_theme_default_init+0x2310>
 80193a0:	2b02      	cmp	r3, #2
 80193a2:	f001 8618 	beq.w	801afd6 <lv_theme_default_init+0x234a>
 80193a6:	4ba1      	ldr	r3, [pc, #644]	; (801962c <lv_theme_default_init+0x9a0>)
 80193a8:	68dc      	ldr	r4, [r3, #12]
 80193aa:	4620      	mov	r0, r4
 80193ac:	f007 fb8e 	bl	8020acc <lv_disp_get_dpi>
 80193b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80193b4:	0040      	lsls	r0, r0, #1
 80193b6:	28ef      	cmp	r0, #239	; 0xef
 80193b8:	f301 862a 	bgt.w	801b010 <lv_theme_default_init+0x2384>
 80193bc:	2401      	movs	r4, #1
}

static inline void lv_style_set_pad_gap(lv_style_t * style, lv_coord_t value)
{
    lv_style_set_pad_row(style, value);
 80193be:	4621      	mov	r1, r4
 80193c0:	4630      	mov	r0, r6
 80193c2:	f00a f84b 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 80193c6:	4621      	mov	r1, r4
 80193c8:	4630      	mov	r0, r6
 80193ca:	f00a f84d 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_gap);
 80193ce:	4c95      	ldr	r4, [pc, #596]	; (8019624 <lv_theme_default_init+0x998>)
 80193d0:	6820      	ldr	r0, [r4, #0]
 80193d2:	3088      	adds	r0, #136	; 0x88
 80193d4:	f7ff fc12 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 80193d8:	6824      	ldr	r4, [r4, #0]
 80193da:	3488      	adds	r4, #136	; 0x88
 80193dc:	4b93      	ldr	r3, [pc, #588]	; (801962c <lv_theme_default_init+0x9a0>)
 80193de:	68de      	ldr	r6, [r3, #12]
 80193e0:	4630      	mov	r0, r6
 80193e2:	f007 fb73 	bl	8020acc <lv_disp_get_dpi>
 80193e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80193ea:	0040      	lsls	r0, r0, #1
 80193ec:	28ef      	cmp	r0, #239	; 0xef
 80193ee:	f301 861f 	bgt.w	801b030 <lv_theme_default_init+0x23a4>
 80193f2:	2101      	movs	r1, #1
 80193f4:	4620      	mov	r0, r4
 80193f6:	f00a f831 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 80193fa:	4b8a      	ldr	r3, [pc, #552]	; (8019624 <lv_theme_default_init+0x998>)
 80193fc:	681c      	ldr	r4, [r3, #0]
 80193fe:	3488      	adds	r4, #136	; 0x88
 8019400:	4b8a      	ldr	r3, [pc, #552]	; (801962c <lv_theme_default_init+0x9a0>)
 8019402:	68de      	ldr	r6, [r3, #12]
 8019404:	4630      	mov	r0, r6
 8019406:	f007 fb61 	bl	8020acc <lv_disp_get_dpi>
 801940a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801940e:	0040      	lsls	r0, r0, #1
 8019410:	28ef      	cmp	r0, #239	; 0xef
 8019412:	f301 861d 	bgt.w	801b050 <lv_theme_default_init+0x23c4>
 8019416:	2101      	movs	r1, #1
 8019418:	4620      	mov	r0, r4
 801941a:	f00a f825 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 801941e:	4c81      	ldr	r4, [pc, #516]	; (8019624 <lv_theme_default_init+0x998>)
 8019420:	6820      	ldr	r0, [r4, #0]
 8019422:	3090      	adds	r0, #144	; 0x90
 8019424:	f7ff fbea 	bl	8018bfc <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 8019428:	6824      	ldr	r4, [r4, #0]
 801942a:	3490      	adds	r4, #144	; 0x90
 801942c:	4b7f      	ldr	r3, [pc, #508]	; (801962c <lv_theme_default_init+0x9a0>)
 801942e:	68de      	ldr	r6, [r3, #12]
 8019430:	4630      	mov	r0, r6
 8019432:	f007 fb4b 	bl	8020acc <lv_disp_get_dpi>
 8019436:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801943a:	0080      	lsls	r0, r0, #2
 801943c:	28ef      	cmp	r0, #239	; 0xef
 801943e:	f301 8617 	bgt.w	801b070 <lv_theme_default_init+0x23e4>
 8019442:	2101      	movs	r1, #1
 8019444:	4620      	mov	r0, r4
 8019446:	f00a f8db 	bl	8023600 <lv_style_set_text_line_space>
    style_init_reset(&styles->text_align_center);
 801944a:	4c76      	ldr	r4, [pc, #472]	; (8019624 <lv_theme_default_init+0x998>)
 801944c:	6820      	ldr	r0, [r4, #0]
 801944e:	3098      	adds	r0, #152	; 0x98
 8019450:	f7ff fbd4 	bl	8018bfc <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 8019454:	6820      	ldr	r0, [r4, #0]
 8019456:	2102      	movs	r1, #2
 8019458:	3098      	adds	r0, #152	; 0x98
 801945a:	f00a f8d7 	bl	802360c <lv_style_set_text_align>
    style_init_reset(&styles->pad_zero);
 801945e:	6820      	ldr	r0, [r4, #0]
 8019460:	3068      	adds	r0, #104	; 0x68
 8019462:	f7ff fbcb 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 8019466:	6826      	ldr	r6, [r4, #0]
 8019468:	3668      	adds	r6, #104	; 0x68
    lv_style_set_pad_left(style, value);
 801946a:	2100      	movs	r1, #0
 801946c:	4630      	mov	r0, r6
 801946e:	f009 ffe9 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019472:	2100      	movs	r1, #0
 8019474:	4630      	mov	r0, r6
 8019476:	f009 ffeb 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801947a:	2100      	movs	r1, #0
 801947c:	4630      	mov	r0, r6
 801947e:	f009 ffd5 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019482:	2100      	movs	r1, #0
 8019484:	4630      	mov	r0, r6
 8019486:	f009 ffd7 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 801948a:	6820      	ldr	r0, [r4, #0]
 801948c:	2100      	movs	r1, #0
 801948e:	3068      	adds	r0, #104	; 0x68
 8019490:	f009 ffe4 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 8019494:	6820      	ldr	r0, [r4, #0]
 8019496:	2100      	movs	r1, #0
 8019498:	3068      	adds	r0, #104	; 0x68
 801949a:	f009 ffe5 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 801949e:	6820      	ldr	r0, [r4, #0]
 80194a0:	3070      	adds	r0, #112	; 0x70
 80194a2:	f7ff fbab 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 80194a6:	6826      	ldr	r6, [r4, #0]
 80194a8:	3670      	adds	r6, #112	; 0x70
 80194aa:	4b5f      	ldr	r3, [pc, #380]	; (8019628 <lv_theme_default_init+0x99c>)
 80194ac:	781b      	ldrb	r3, [r3, #0]
 80194ae:	2b01      	cmp	r3, #1
 80194b0:	f001 85ee 	beq.w	801b090 <lv_theme_default_init+0x2404>
 80194b4:	2b02      	cmp	r3, #2
 80194b6:	f001 8609 	beq.w	801b0cc <lv_theme_default_init+0x2440>
 80194ba:	4b5c      	ldr	r3, [pc, #368]	; (801962c <lv_theme_default_init+0x9a0>)
 80194bc:	68dc      	ldr	r4, [r3, #12]
 80194be:	4620      	mov	r0, r4
 80194c0:	f007 fb04 	bl	8020acc <lv_disp_get_dpi>
 80194c4:	0040      	lsls	r0, r0, #1
 80194c6:	28ef      	cmp	r0, #239	; 0xef
 80194c8:	f301 861d 	bgt.w	801b106 <lv_theme_default_init+0x247a>
 80194cc:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 80194ce:	4621      	mov	r1, r4
 80194d0:	4630      	mov	r0, r6
 80194d2:	f009 ffb7 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 80194d6:	4621      	mov	r1, r4
 80194d8:	4630      	mov	r0, r6
 80194da:	f009 ffb9 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 80194de:	4621      	mov	r1, r4
 80194e0:	4630      	mov	r0, r6
 80194e2:	f009 ffa3 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80194e6:	4621      	mov	r1, r4
 80194e8:	4630      	mov	r0, r6
 80194ea:	f009 ffa5 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 80194ee:	4b4d      	ldr	r3, [pc, #308]	; (8019624 <lv_theme_default_init+0x998>)
 80194f0:	681c      	ldr	r4, [r3, #0]
 80194f2:	3470      	adds	r4, #112	; 0x70
 80194f4:	4b4c      	ldr	r3, [pc, #304]	; (8019628 <lv_theme_default_init+0x99c>)
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	2b01      	cmp	r3, #1
 80194fa:	f001 8612 	beq.w	801b122 <lv_theme_default_init+0x2496>
 80194fe:	2b02      	cmp	r3, #2
 8019500:	f001 8628 	beq.w	801b154 <lv_theme_default_init+0x24c8>
 8019504:	4b49      	ldr	r3, [pc, #292]	; (801962c <lv_theme_default_init+0x9a0>)
 8019506:	68de      	ldr	r6, [r3, #12]
 8019508:	4630      	mov	r0, r6
 801950a:	f007 fadf 	bl	8020acc <lv_disp_get_dpi>
 801950e:	0040      	lsls	r0, r0, #1
 8019510:	28ef      	cmp	r0, #239	; 0xef
 8019512:	f301 863c 	bgt.w	801b18e <lv_theme_default_init+0x2502>
 8019516:	2101      	movs	r1, #1
 8019518:	4620      	mov	r0, r4
 801951a:	f009 ff9f 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 801951e:	4b41      	ldr	r3, [pc, #260]	; (8019624 <lv_theme_default_init+0x998>)
 8019520:	681c      	ldr	r4, [r3, #0]
 8019522:	3470      	adds	r4, #112	; 0x70
 8019524:	4b40      	ldr	r3, [pc, #256]	; (8019628 <lv_theme_default_init+0x99c>)
 8019526:	781b      	ldrb	r3, [r3, #0]
 8019528:	2b01      	cmp	r3, #1
 801952a:	f001 863e 	beq.w	801b1aa <lv_theme_default_init+0x251e>
 801952e:	2b02      	cmp	r3, #2
 8019530:	f001 8654 	beq.w	801b1dc <lv_theme_default_init+0x2550>
 8019534:	4b3d      	ldr	r3, [pc, #244]	; (801962c <lv_theme_default_init+0x9a0>)
 8019536:	68de      	ldr	r6, [r3, #12]
 8019538:	4630      	mov	r0, r6
 801953a:	f007 fac7 	bl	8020acc <lv_disp_get_dpi>
 801953e:	0040      	lsls	r0, r0, #1
 8019540:	28ef      	cmp	r0, #239	; 0xef
 8019542:	f301 8668 	bgt.w	801b216 <lv_theme_default_init+0x258a>
 8019546:	2101      	movs	r1, #1
 8019548:	4620      	mov	r0, r4
 801954a:	f009 ff8d 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 801954e:	4c35      	ldr	r4, [pc, #212]	; (8019624 <lv_theme_default_init+0x998>)
 8019550:	6820      	ldr	r0, [r4, #0]
 8019552:	3028      	adds	r0, #40	; 0x28
 8019554:	f7ff fb52 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 8019558:	4e34      	ldr	r6, [pc, #208]	; (801962c <lv_theme_default_init+0x9a0>)
 801955a:	6820      	ldr	r0, [r4, #0]
 801955c:	8a31      	ldrh	r1, [r6, #16]
 801955e:	3028      	adds	r0, #40	; 0x28
 8019560:	f009 ff88 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 8019564:	6820      	ldr	r0, [r4, #0]
 8019566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801956a:	3028      	adds	r0, #40	; 0x28
 801956c:	f00a f836 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 8019570:	6820      	ldr	r0, [r4, #0]
 8019572:	21ff      	movs	r1, #255	; 0xff
 8019574:	3028      	adds	r0, #40	; 0x28
 8019576:	f009 ff89 	bl	802348c <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 801957a:	6820      	ldr	r0, [r4, #0]
 801957c:	3030      	adds	r0, #48	; 0x30
 801957e:	f7ff fb3d 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 8019582:	6820      	ldr	r0, [r4, #0]
 8019584:	8a31      	ldrh	r1, [r6, #16]
 8019586:	3030      	adds	r0, #48	; 0x30
 8019588:	f009 ff74 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 801958c:	6820      	ldr	r0, [r4, #0]
 801958e:	8a31      	ldrh	r1, [r6, #16]
 8019590:	3030      	adds	r0, #48	; 0x30
 8019592:	f00a f823 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 8019596:	6820      	ldr	r0, [r4, #0]
 8019598:	2133      	movs	r1, #51	; 0x33
 801959a:	3030      	adds	r0, #48	; 0x30
 801959c:	f009 ff76 	bl	802348c <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 80195a0:	6820      	ldr	r0, [r4, #0]
 80195a2:	3038      	adds	r0, #56	; 0x38
 80195a4:	f7ff fb2a 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 80195a8:	6820      	ldr	r0, [r4, #0]
 80195aa:	8a71      	ldrh	r1, [r6, #18]
 80195ac:	3038      	adds	r0, #56	; 0x38
 80195ae:	f009 ff61 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 80195b2:	6820      	ldr	r0, [r4, #0]
 80195b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80195b8:	3038      	adds	r0, #56	; 0x38
 80195ba:	f00a f80f 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 80195be:	6820      	ldr	r0, [r4, #0]
 80195c0:	21ff      	movs	r1, #255	; 0xff
 80195c2:	3038      	adds	r0, #56	; 0x38
 80195c4:	f009 ff62 	bl	802348c <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 80195c8:	6820      	ldr	r0, [r4, #0]
 80195ca:	3040      	adds	r0, #64	; 0x40
 80195cc:	f7ff fb16 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 80195d0:	6820      	ldr	r0, [r4, #0]
 80195d2:	8a71      	ldrh	r1, [r6, #18]
 80195d4:	3040      	adds	r0, #64	; 0x40
 80195d6:	f009 ff4d 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 80195da:	6820      	ldr	r0, [r4, #0]
 80195dc:	8a71      	ldrh	r1, [r6, #18]
 80195de:	3040      	adds	r0, #64	; 0x40
 80195e0:	f009 fffc 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 80195e4:	6820      	ldr	r0, [r4, #0]
 80195e6:	2133      	movs	r1, #51	; 0x33
 80195e8:	3040      	adds	r0, #64	; 0x40
 80195ea:	f009 ff4f 	bl	802348c <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 80195ee:	6820      	ldr	r0, [r4, #0]
 80195f0:	3048      	adds	r0, #72	; 0x48
 80195f2:	f7ff fb03 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 80195f6:	6820      	ldr	r0, [r4, #0]
 80195f8:	4b0d      	ldr	r3, [pc, #52]	; (8019630 <lv_theme_default_init+0x9a4>)
 80195fa:	8819      	ldrh	r1, [r3, #0]
 80195fc:	3048      	adds	r0, #72	; 0x48
 80195fe:	f009 ff39 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 8019602:	6820      	ldr	r0, [r4, #0]
 8019604:	21ff      	movs	r1, #255	; 0xff
 8019606:	3048      	adds	r0, #72	; 0x48
 8019608:	f009 ff40 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 801960c:	4f09      	ldr	r7, [pc, #36]	; (8019634 <lv_theme_default_init+0x9a8>)
 801960e:	6820      	ldr	r0, [r4, #0]
 8019610:	8839      	ldrh	r1, [r7, #0]
 8019612:	3048      	adds	r0, #72	; 0x48
 8019614:	f009 ffe2 	bl	80235dc <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 8019618:	6820      	ldr	r0, [r4, #0]
 801961a:	3050      	adds	r0, #80	; 0x50
 801961c:	f7ff faee 	bl	8018bfc <style_init_reset>
 8019620:	e00a      	b.n	8019638 <lv_theme_default_init+0x9ac>
 8019622:	bf00      	nop
 8019624:	20002764 	.word	0x20002764
 8019628:	20002754 	.word	0x20002754
 801962c:	20002768 	.word	0x20002768
 8019630:	20002740 	.word	0x20002740
 8019634:	20002748 	.word	0x20002748
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 8019638:	6820      	ldr	r0, [r4, #0]
 801963a:	4bcd      	ldr	r3, [pc, #820]	; (8019970 <lv_theme_default_init+0xce4>)
 801963c:	8819      	ldrh	r1, [r3, #0]
 801963e:	3050      	adds	r0, #80	; 0x50
 8019640:	f009 ff18 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 8019644:	6820      	ldr	r0, [r4, #0]
 8019646:	21ff      	movs	r1, #255	; 0xff
 8019648:	3050      	adds	r0, #80	; 0x50
 801964a:	f009 ff1f 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 801964e:	6820      	ldr	r0, [r4, #0]
 8019650:	8839      	ldrh	r1, [r7, #0]
 8019652:	3050      	adds	r0, #80	; 0x50
 8019654:	f009 ffc2 	bl	80235dc <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 8019658:	6820      	ldr	r0, [r4, #0]
 801965a:	30b0      	adds	r0, #176	; 0xb0
 801965c:	f7ff face 	bl	8018bfc <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 8019660:	6820      	ldr	r0, [r4, #0]
 8019662:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019666:	30b0      	adds	r0, #176	; 0xb0
 8019668:	f009 ffd6 	bl	8023618 <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 801966c:	6820      	ldr	r0, [r4, #0]
 801966e:	30b8      	adds	r0, #184	; 0xb8
 8019670:	f7ff fac4 	bl	8018bfc <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 8019674:	6820      	ldr	r0, [r4, #0]
 8019676:	2100      	movs	r1, #0
 8019678:	30b8      	adds	r0, #184	; 0xb8
 801967a:	f009 ffcd 	bl	8023618 <lv_style_set_radius>
    style_init_reset(&styles->grow);
 801967e:	6820      	ldr	r0, [r4, #0]
 8019680:	30c8      	adds	r0, #200	; 0xc8
 8019682:	f7ff fabb 	bl	8018bfc <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8019686:	6824      	ldr	r4, [r4, #0]
 8019688:	34c8      	adds	r4, #200	; 0xc8
 801968a:	68f6      	ldr	r6, [r6, #12]
 801968c:	4630      	mov	r0, r6
 801968e:	f007 fa1d 	bl	8020acc <lv_disp_get_dpi>
 8019692:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019696:	28ef      	cmp	r0, #239	; 0xef
 8019698:	f301 85cb 	bgt.w	801b232 <lv_theme_default_init+0x25a6>
 801969c:	2101      	movs	r1, #1
 801969e:	4620      	mov	r0, r4
 80196a0:	f009 feb8 	bl	8023414 <lv_style_set_transform_width>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 80196a4:	4bb3      	ldr	r3, [pc, #716]	; (8019974 <lv_theme_default_init+0xce8>)
 80196a6:	681c      	ldr	r4, [r3, #0]
 80196a8:	34c8      	adds	r4, #200	; 0xc8
 80196aa:	4bb3      	ldr	r3, [pc, #716]	; (8019978 <lv_theme_default_init+0xcec>)
 80196ac:	68de      	ldr	r6, [r3, #12]
 80196ae:	4630      	mov	r0, r6
 80196b0:	f007 fa0c 	bl	8020acc <lv_disp_get_dpi>
 80196b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80196b8:	28ef      	cmp	r0, #239	; 0xef
 80196ba:	f301 85ca 	bgt.w	801b252 <lv_theme_default_init+0x25c6>
 80196be:	2101      	movs	r1, #1
 80196c0:	4620      	mov	r0, r4
 80196c2:	f009 fead 	bl	8023420 <lv_style_set_transform_height>
    style_init_reset(&styles->knob);
 80196c6:	4cab      	ldr	r4, [pc, #684]	; (8019974 <lv_theme_default_init+0xce8>)
 80196c8:	6820      	ldr	r0, [r4, #0]
 80196ca:	30f0      	adds	r0, #240	; 0xf0
 80196cc:	f7ff fa96 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 80196d0:	4fa9      	ldr	r7, [pc, #676]	; (8019978 <lv_theme_default_init+0xcec>)
 80196d2:	6820      	ldr	r0, [r4, #0]
 80196d4:	8a39      	ldrh	r1, [r7, #16]
 80196d6:	30f0      	adds	r0, #240	; 0xf0
 80196d8:	f009 fecc 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 80196dc:	6820      	ldr	r0, [r4, #0]
 80196de:	21ff      	movs	r1, #255	; 0xff
 80196e0:	30f0      	adds	r0, #240	; 0xf0
 80196e2:	f009 fed3 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 80196e6:	6826      	ldr	r6, [r4, #0]
 80196e8:	36f0      	adds	r6, #240	; 0xf0
 80196ea:	68fc      	ldr	r4, [r7, #12]
 80196ec:	4620      	mov	r0, r4
 80196ee:	f007 f9ed 	bl	8020acc <lv_disp_get_dpi>
 80196f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80196f6:	0040      	lsls	r0, r0, #1
 80196f8:	28ef      	cmp	r0, #239	; 0xef
 80196fa:	f301 85ba 	bgt.w	801b272 <lv_theme_default_init+0x25e6>
 80196fe:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019700:	4621      	mov	r1, r4
 8019702:	4630      	mov	r0, r6
 8019704:	f009 fe9e 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019708:	4621      	mov	r1, r4
 801970a:	4630      	mov	r0, r6
 801970c:	f009 fea0 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019710:	4621      	mov	r1, r4
 8019712:	4630      	mov	r0, r6
 8019714:	f009 fe8a 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019718:	4621      	mov	r1, r4
 801971a:	4630      	mov	r0, r6
 801971c:	f009 fe8c 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 8019720:	4c94      	ldr	r4, [pc, #592]	; (8019974 <lv_theme_default_init+0xce8>)
 8019722:	6820      	ldr	r0, [r4, #0]
 8019724:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019728:	30f0      	adds	r0, #240	; 0xf0
 801972a:	f009 ff75 	bl	8023618 <lv_style_set_radius>
    style_init_reset(&styles->anim);
 801972e:	6820      	ldr	r0, [r4, #0]
 8019730:	30e0      	adds	r0, #224	; 0xe0
 8019732:	f7ff fa63 	bl	8018bfc <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 8019736:	6820      	ldr	r0, [r4, #0]
 8019738:	21c8      	movs	r1, #200	; 0xc8
 801973a:	30e0      	adds	r0, #224	; 0xe0
 801973c:	f009 ff84 	bl	8023648 <lv_style_set_anim_time>
    style_init_reset(&styles->anim_fast);
 8019740:	6820      	ldr	r0, [r4, #0]
 8019742:	30e8      	adds	r0, #232	; 0xe8
 8019744:	f7ff fa5a 	bl	8018bfc <style_init_reset>
    lv_style_set_anim_time(&styles->anim_fast, 120);
 8019748:	6820      	ldr	r0, [r4, #0]
 801974a:	2178      	movs	r1, #120	; 0x78
 801974c:	30e8      	adds	r0, #232	; 0xe8
 801974e:	f009 ff7b 	bl	8023648 <lv_style_set_anim_time>
    style_init_reset(&styles->arc_indic);
 8019752:	6820      	ldr	r0, [r4, #0]
 8019754:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8019758:	f7ff fa50 	bl	8018bfc <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 801975c:	6820      	ldr	r0, [r4, #0]
 801975e:	4b87      	ldr	r3, [pc, #540]	; (801997c <lv_theme_default_init+0xcf0>)
 8019760:	8819      	ldrh	r1, [r3, #0]
 8019762:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8019766:	f009 ff2d 	bl	80235c4 <lv_style_set_arc_color>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 801976a:	6824      	ldr	r4, [r4, #0]
 801976c:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8019770:	4b81      	ldr	r3, [pc, #516]	; (8019978 <lv_theme_default_init+0xcec>)
 8019772:	68de      	ldr	r6, [r3, #12]
 8019774:	4630      	mov	r0, r6
 8019776:	f007 f9a9 	bl	8020acc <lv_disp_get_dpi>
 801977a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801977e:	28ef      	cmp	r0, #239	; 0xef
 8019780:	f301 8587 	bgt.w	801b292 <lv_theme_default_init+0x2606>
 8019784:	2101      	movs	r1, #1
 8019786:	4620      	mov	r0, r4
 8019788:	f009 ff10 	bl	80235ac <lv_style_set_arc_width>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 801978c:	4c79      	ldr	r4, [pc, #484]	; (8019974 <lv_theme_default_init+0xce8>)
 801978e:	6820      	ldr	r0, [r4, #0]
 8019790:	2101      	movs	r1, #1
 8019792:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8019796:	f009 ff0f 	bl	80235b8 <lv_style_set_arc_rounded>
    style_init_reset(&styles->arc_indic_primary);
 801979a:	6820      	ldr	r0, [r4, #0]
 801979c:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80197a0:	f7ff fa2c 	bl	8018bfc <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 80197a4:	4f74      	ldr	r7, [pc, #464]	; (8019978 <lv_theme_default_init+0xcec>)
 80197a6:	6820      	ldr	r0, [r4, #0]
 80197a8:	8a39      	ldrh	r1, [r7, #16]
 80197aa:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80197ae:	f009 ff09 	bl	80235c4 <lv_style_set_arc_color>
    style_init_reset(&styles->dropdown_list);
 80197b2:	6820      	ldr	r0, [r4, #0]
 80197b4:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80197b8:	f7ff fa20 	bl	8018bfc <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 80197bc:	6820      	ldr	r0, [r4, #0]
 80197be:	f44f 7182 	mov.w	r1, #260	; 0x104
 80197c2:	f500 7098 	add.w	r0, r0, #304	; 0x130
 80197c6:	f009 fe1f 	bl	8023408 <lv_style_set_max_height>
    style_init_reset(&styles->cb_marker);
 80197ca:	6820      	ldr	r0, [r4, #0]
 80197cc:	f500 709c 	add.w	r0, r0, #312	; 0x138
 80197d0:	f7ff fa14 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 80197d4:	6826      	ldr	r6, [r4, #0]
 80197d6:	f506 769c 	add.w	r6, r6, #312	; 0x138
 80197da:	68fc      	ldr	r4, [r7, #12]
 80197dc:	4620      	mov	r0, r4
 80197de:	f007 f975 	bl	8020acc <lv_disp_get_dpi>
 80197e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80197e6:	28ef      	cmp	r0, #239	; 0xef
 80197e8:	f301 8563 	bgt.w	801b2b2 <lv_theme_default_init+0x2626>
 80197ec:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 80197ee:	4621      	mov	r1, r4
 80197f0:	4630      	mov	r0, r6
 80197f2:	f009 fe27 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 80197f6:	4621      	mov	r1, r4
 80197f8:	4630      	mov	r0, r6
 80197fa:	f009 fe29 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 80197fe:	4621      	mov	r1, r4
 8019800:	4630      	mov	r0, r6
 8019802:	f009 fe13 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019806:	4621      	mov	r1, r4
 8019808:	4630      	mov	r0, r6
 801980a:	f009 fe15 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 801980e:	4b59      	ldr	r3, [pc, #356]	; (8019974 <lv_theme_default_init+0xce8>)
 8019810:	681c      	ldr	r4, [r3, #0]
 8019812:	f504 749c 	add.w	r4, r4, #312	; 0x138
 8019816:	4b58      	ldr	r3, [pc, #352]	; (8019978 <lv_theme_default_init+0xcec>)
 8019818:	68de      	ldr	r6, [r3, #12]
 801981a:	4630      	mov	r0, r6
 801981c:	f007 f956 	bl	8020acc <lv_disp_get_dpi>
 8019820:	0040      	lsls	r0, r0, #1
 8019822:	28ef      	cmp	r0, #239	; 0xef
 8019824:	f301 8555 	bgt.w	801b2d2 <lv_theme_default_init+0x2646>
 8019828:	2101      	movs	r1, #1
 801982a:	4620      	mov	r0, r4
 801982c:	f009 fe58 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 8019830:	4c50      	ldr	r4, [pc, #320]	; (8019974 <lv_theme_default_init+0xce8>)
 8019832:	6820      	ldr	r0, [r4, #0]
 8019834:	4b50      	ldr	r3, [pc, #320]	; (8019978 <lv_theme_default_init+0xcec>)
 8019836:	8a19      	ldrh	r1, [r3, #16]
 8019838:	f500 709c 	add.w	r0, r0, #312	; 0x138
 801983c:	f009 fe3e 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 8019840:	6820      	ldr	r0, [r4, #0]
 8019842:	4b4b      	ldr	r3, [pc, #300]	; (8019970 <lv_theme_default_init+0xce4>)
 8019844:	8819      	ldrh	r1, [r3, #0]
 8019846:	f500 709c 	add.w	r0, r0, #312	; 0x138
 801984a:	f009 fe13 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 801984e:	6820      	ldr	r0, [r4, #0]
 8019850:	21ff      	movs	r1, #255	; 0xff
 8019852:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8019856:	f009 fe19 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 801985a:	6824      	ldr	r4, [r4, #0]
 801985c:	f504 749c 	add.w	r4, r4, #312	; 0x138
 8019860:	4b47      	ldr	r3, [pc, #284]	; (8019980 <lv_theme_default_init+0xcf4>)
 8019862:	781b      	ldrb	r3, [r3, #0]
 8019864:	2b01      	cmp	r3, #1
 8019866:	f001 8542 	beq.w	801b2ee <lv_theme_default_init+0x2662>
 801986a:	4b43      	ldr	r3, [pc, #268]	; (8019978 <lv_theme_default_init+0xcec>)
 801986c:	68de      	ldr	r6, [r3, #12]
 801986e:	4630      	mov	r0, r6
 8019870:	f007 f92c 	bl	8020acc <lv_disp_get_dpi>
 8019874:	00c0      	lsls	r0, r0, #3
 8019876:	28ef      	cmp	r0, #239	; 0xef
 8019878:	f301 8558 	bgt.w	801b32c <lv_theme_default_init+0x26a0>
 801987c:	2101      	movs	r1, #1
 801987e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8019882:	1049      	asrs	r1, r1, #1
 8019884:	4620      	mov	r0, r4
 8019886:	f009 fec7 	bl	8023618 <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 801988a:	4c3a      	ldr	r4, [pc, #232]	; (8019974 <lv_theme_default_init+0xce8>)
 801988c:	6820      	ldr	r0, [r4, #0]
 801988e:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8019892:	f7ff f9b3 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 8019896:	6820      	ldr	r0, [r4, #0]
 8019898:	493a      	ldr	r1, [pc, #232]	; (8019984 <lv_theme_default_init+0xcf8>)
 801989a:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 801989e:	f009 fe07 	bl	80234b0 <lv_style_set_bg_img_src>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 80198a2:	6820      	ldr	r0, [r4, #0]
 80198a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80198a8:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 80198ac:	f009 fe96 	bl	80235dc <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 80198b0:	4f31      	ldr	r7, [pc, #196]	; (8019978 <lv_theme_default_init+0xcec>)
 80198b2:	6820      	ldr	r0, [r4, #0]
 80198b4:	6979      	ldr	r1, [r7, #20]
 80198b6:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 80198ba:	f009 fe9b 	bl	80235f4 <lv_style_set_text_font>
    style_init_reset(&styles->switch_knob);
 80198be:	6820      	ldr	r0, [r4, #0]
 80198c0:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 80198c4:	f7ff f99a 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 80198c8:	6826      	ldr	r6, [r4, #0]
 80198ca:	f506 76a4 	add.w	r6, r6, #328	; 0x148
 80198ce:	68fc      	ldr	r4, [r7, #12]
 80198d0:	4620      	mov	r0, r4
 80198d2:	f007 f8fb 	bl	8020acc <lv_disp_get_dpi>
 80198d6:	0080      	lsls	r0, r0, #2
 80198d8:	28ef      	cmp	r0, #239	; 0xef
 80198da:	f301 8535 	bgt.w	801b348 <lv_theme_default_init+0x26bc>
 80198de:	2401      	movs	r4, #1
 80198e0:	4264      	negs	r4, r4
 80198e2:	b224      	sxth	r4, r4
    lv_style_set_pad_left(style, value);
 80198e4:	4621      	mov	r1, r4
 80198e6:	4630      	mov	r0, r6
 80198e8:	f009 fdac 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 80198ec:	4621      	mov	r1, r4
 80198ee:	4630      	mov	r0, r6
 80198f0:	f009 fdae 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 80198f4:	4621      	mov	r1, r4
 80198f6:	4630      	mov	r0, r6
 80198f8:	f009 fd98 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 80198fc:	4621      	mov	r1, r4
 80198fe:	4630      	mov	r0, r6
 8019900:	f009 fd9a 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 8019904:	4c1b      	ldr	r4, [pc, #108]	; (8019974 <lv_theme_default_init+0xce8>)
 8019906:	6820      	ldr	r0, [r4, #0]
 8019908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801990c:	f500 70a4 	add.w	r0, r0, #328	; 0x148
 8019910:	f009 fdb0 	bl	8023474 <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 8019914:	6820      	ldr	r0, [r4, #0]
 8019916:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801991a:	f7ff f96f 	bl	8018bfc <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 801991e:	6820      	ldr	r0, [r4, #0]
 8019920:	2101      	movs	r1, #1
 8019922:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8019926:	f009 fe2f 	bl	8023588 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 801992a:	6820      	ldr	r0, [r4, #0]
 801992c:	4b16      	ldr	r3, [pc, #88]	; (8019988 <lv_theme_default_init+0xcfc>)
 801992e:	8819      	ldrh	r1, [r3, #0]
 8019930:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8019934:	f009 fe2e 	bl	8023594 <lv_style_set_line_color>
    style_init_reset(&styles->chart_bg);
 8019938:	6820      	ldr	r0, [r4, #0]
 801993a:	f500 7094 	add.w	r0, r0, #296	; 0x128
 801993e:	f7ff f95d 	bl	8018bfc <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 8019942:	6820      	ldr	r0, [r4, #0]
 8019944:	2100      	movs	r1, #0
 8019946:	f500 7094 	add.w	r0, r0, #296	; 0x128
 801994a:	f009 fdd5 	bl	80234f8 <lv_style_set_border_post>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 801994e:	6824      	ldr	r4, [r4, #0]
 8019950:	f504 7494 	add.w	r4, r4, #296	; 0x128
 8019954:	4b08      	ldr	r3, [pc, #32]	; (8019978 <lv_theme_default_init+0xcec>)
 8019956:	68de      	ldr	r6, [r3, #12]
 8019958:	4630      	mov	r0, r6
 801995a:	f007 f8b7 	bl	8020acc <lv_disp_get_dpi>
 801995e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019962:	0040      	lsls	r0, r0, #1
 8019964:	28ef      	cmp	r0, #239	; 0xef
 8019966:	f301 84fd 	bgt.w	801b364 <lv_theme_default_init+0x26d8>
 801996a:	2101      	movs	r1, #1
 801996c:	e00e      	b.n	801998c <lv_theme_default_init+0xd00>
 801996e:	bf00      	nop
 8019970:	2000273c 	.word	0x2000273c
 8019974:	20002764 	.word	0x20002764
 8019978:	20002768 	.word	0x20002768
 801997c:	20002740 	.word	0x20002740
 8019980:	20002754 	.word	0x20002754
 8019984:	0802d7bc 	.word	0x0802d7bc
 8019988:	20002748 	.word	0x20002748
 801998c:	4620      	mov	r0, r4
 801998e:	f009 fd6b 	bl	8023468 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 8019992:	4cc8      	ldr	r4, [pc, #800]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019994:	6820      	ldr	r0, [r4, #0]
 8019996:	4bc8      	ldr	r3, [pc, #800]	; (8019cb8 <lv_theme_default_init+0x102c>)
 8019998:	8819      	ldrh	r1, [r3, #0]
 801999a:	f500 7094 	add.w	r0, r0, #296	; 0x128
 801999e:	f009 fdf9 	bl	8023594 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 80199a2:	6820      	ldr	r0, [r4, #0]
 80199a4:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80199a8:	f7ff f928 	bl	8018bfc <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 80199ac:	6824      	ldr	r4, [r4, #0]
 80199ae:	f504 7488 	add.w	r4, r4, #272	; 0x110
 80199b2:	4bc2      	ldr	r3, [pc, #776]	; (8019cbc <lv_theme_default_init+0x1030>)
 80199b4:	68de      	ldr	r6, [r3, #12]
 80199b6:	4630      	mov	r0, r6
 80199b8:	f007 f888 	bl	8020acc <lv_disp_get_dpi>
 80199bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80199c0:	28ef      	cmp	r0, #239	; 0xef
 80199c2:	f301 84df 	bgt.w	801b384 <lv_theme_default_init+0x26f8>
 80199c6:	2101      	movs	r1, #1
 80199c8:	4620      	mov	r0, r4
 80199ca:	f009 fddd 	bl	8023588 <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 80199ce:	4bb9      	ldr	r3, [pc, #740]	; (8019cb4 <lv_theme_default_init+0x1028>)
 80199d0:	681c      	ldr	r4, [r3, #0]
 80199d2:	f504 7488 	add.w	r4, r4, #272	; 0x110
 80199d6:	4bb9      	ldr	r3, [pc, #740]	; (8019cbc <lv_theme_default_init+0x1030>)
 80199d8:	68de      	ldr	r6, [r3, #12]
 80199da:	4630      	mov	r0, r6
 80199dc:	f007 f876 	bl	8020acc <lv_disp_get_dpi>
 80199e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80199e4:	28ef      	cmp	r0, #239	; 0xef
 80199e6:	f301 84dd 	bgt.w	801b3a4 <lv_theme_default_init+0x2718>
 80199ea:	2101      	movs	r1, #1
 80199ec:	4620      	mov	r0, r4
 80199ee:	f009 fe13 	bl	8023618 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 80199f2:	4bb0      	ldr	r3, [pc, #704]	; (8019cb4 <lv_theme_default_init+0x1028>)
 80199f4:	681e      	ldr	r6, [r3, #0]
 80199f6:	f506 7688 	add.w	r6, r6, #272	; 0x110
 80199fa:	4bb0      	ldr	r3, [pc, #704]	; (8019cbc <lv_theme_default_init+0x1030>)
 80199fc:	68dc      	ldr	r4, [r3, #12]
 80199fe:	4620      	mov	r0, r4
 8019a00:	f007 f864 	bl	8020acc <lv_disp_get_dpi>
 8019a04:	00c0      	lsls	r0, r0, #3
 8019a06:	28ef      	cmp	r0, #239	; 0xef
 8019a08:	f301 84dc 	bgt.w	801b3c4 <lv_theme_default_init+0x2738>
 8019a0c:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 8019a0e:	4621      	mov	r1, r4
 8019a10:	4630      	mov	r0, r6
 8019a12:	f009 fce7 	bl	80233e4 <lv_style_set_width>
    lv_style_set_height(style, value);
 8019a16:	4621      	mov	r1, r4
 8019a18:	4630      	mov	r0, r6
 8019a1a:	f009 fcef 	bl	80233fc <lv_style_set_height>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 8019a1e:	4ba5      	ldr	r3, [pc, #660]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019a20:	681c      	ldr	r4, [r3, #0]
 8019a22:	f504 7488 	add.w	r4, r4, #272	; 0x110
 8019a26:	4ba5      	ldr	r3, [pc, #660]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019a28:	68de      	ldr	r6, [r3, #12]
 8019a2a:	4630      	mov	r0, r6
 8019a2c:	f007 f84e 	bl	8020acc <lv_disp_get_dpi>
 8019a30:	0040      	lsls	r0, r0, #1
 8019a32:	28ef      	cmp	r0, #239	; 0xef
 8019a34:	f301 84d4 	bgt.w	801b3e0 <lv_theme_default_init+0x2754>
 8019a38:	2101      	movs	r1, #1
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	f009 fd14 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 8019a40:	4c9c      	ldr	r4, [pc, #624]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019a42:	6820      	ldr	r0, [r4, #0]
 8019a44:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8019a48:	f7ff f8d8 	bl	8018bfc <style_init_reset>
    lv_style_set_radius(&styles->chart_indic, LV_RADIUS_CIRCLE);
 8019a4c:	6820      	ldr	r0, [r4, #0]
 8019a4e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019a52:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8019a56:	f009 fddf 	bl	8023618 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 8019a5a:	6826      	ldr	r6, [r4, #0]
 8019a5c:	f506 768c 	add.w	r6, r6, #280	; 0x118
 8019a60:	4b96      	ldr	r3, [pc, #600]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019a62:	68dc      	ldr	r4, [r3, #12]
 8019a64:	4620      	mov	r0, r4
 8019a66:	f007 f831 	bl	8020acc <lv_disp_get_dpi>
 8019a6a:	00c0      	lsls	r0, r0, #3
 8019a6c:	28ef      	cmp	r0, #239	; 0xef
 8019a6e:	f301 84c5 	bgt.w	801b3fc <lv_theme_default_init+0x2770>
 8019a72:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 8019a74:	4621      	mov	r1, r4
 8019a76:	4630      	mov	r0, r6
 8019a78:	f009 fcb4 	bl	80233e4 <lv_style_set_width>
    lv_style_set_height(style, value);
 8019a7c:	4621      	mov	r1, r4
 8019a7e:	4630      	mov	r0, r6
 8019a80:	f009 fcbc 	bl	80233fc <lv_style_set_height>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 8019a84:	4e8d      	ldr	r6, [pc, #564]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019a86:	4c8b      	ldr	r4, [pc, #556]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019a88:	6820      	ldr	r0, [r4, #0]
 8019a8a:	8a31      	ldrh	r1, [r6, #16]
 8019a8c:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8019a90:	f009 fcf0 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 8019a94:	6820      	ldr	r0, [r4, #0]
 8019a96:	21ff      	movs	r1, #255	; 0xff
 8019a98:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8019a9c:	f009 fcf6 	bl	802348c <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 8019aa0:	6820      	ldr	r0, [r4, #0]
 8019aa2:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8019aa6:	f7ff f8a9 	bl	8018bfc <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 8019aaa:	6824      	ldr	r4, [r4, #0]
 8019aac:	f504 7490 	add.w	r4, r4, #288	; 0x120
 8019ab0:	68f6      	ldr	r6, [r6, #12]
 8019ab2:	4630      	mov	r0, r6
 8019ab4:	f007 f80a 	bl	8020acc <lv_disp_get_dpi>
 8019ab8:	28ef      	cmp	r0, #239	; 0xef
 8019aba:	f301 84b1 	bgt.w	801b420 <lv_theme_default_init+0x2794>
 8019abe:	2101      	movs	r1, #1
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f009 fd61 	bl	8023588 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 8019ac6:	4c7b      	ldr	r4, [pc, #492]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019ac8:	6820      	ldr	r0, [r4, #0]
 8019aca:	4b7d      	ldr	r3, [pc, #500]	; (8019cc0 <lv_theme_default_init+0x1034>)
 8019acc:	8819      	ldrh	r1, [r3, #0]
 8019ace:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8019ad2:	f009 fd5f 	bl	8023594 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 8019ad6:	6826      	ldr	r6, [r4, #0]
 8019ad8:	f506 7690 	add.w	r6, r6, #288	; 0x120
 8019adc:	4b77      	ldr	r3, [pc, #476]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019ade:	68dc      	ldr	r4, [r3, #12]
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	f006 fff3 	bl	8020acc <lv_disp_get_dpi>
 8019ae6:	0040      	lsls	r0, r0, #1
 8019ae8:	28ef      	cmp	r0, #239	; 0xef
 8019aea:	f301 84a6 	bgt.w	801b43a <lv_theme_default_init+0x27ae>
 8019aee:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019af0:	4621      	mov	r1, r4
 8019af2:	4630      	mov	r0, r6
 8019af4:	f009 fca6 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019af8:	4621      	mov	r1, r4
 8019afa:	4630      	mov	r0, r6
 8019afc:	f009 fca8 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019b00:	4621      	mov	r1, r4
 8019b02:	4630      	mov	r0, r6
 8019b04:	f009 fc92 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019b08:	4621      	mov	r1, r4
 8019b0a:	4630      	mov	r0, r6
 8019b0c:	f009 fc94 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 8019b10:	4c68      	ldr	r4, [pc, #416]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019b12:	6826      	ldr	r6, [r4, #0]
 8019b14:	f506 7690 	add.w	r6, r6, #288	; 0x120
 8019b18:	2012      	movs	r0, #18
 8019b1a:	f007 fe4b 	bl	80217b4 <lv_palette_main>
 8019b1e:	4601      	mov	r1, r0
 8019b20:	4630      	mov	r0, r6
 8019b22:	f009 fd5b 	bl	80235dc <lv_style_set_text_color>
    style_init_reset(&styles->menu_bg);
 8019b26:	6820      	ldr	r0, [r4, #0]
 8019b28:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8019b2c:	f7ff f866 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->menu_bg, 0);
 8019b30:	6826      	ldr	r6, [r4, #0]
 8019b32:	f506 76c4 	add.w	r6, r6, #392	; 0x188
    lv_style_set_pad_left(style, value);
 8019b36:	2100      	movs	r1, #0
 8019b38:	4630      	mov	r0, r6
 8019b3a:	f009 fc83 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019b3e:	2100      	movs	r1, #0
 8019b40:	4630      	mov	r0, r6
 8019b42:	f009 fc85 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019b46:	2100      	movs	r1, #0
 8019b48:	4630      	mov	r0, r6
 8019b4a:	f009 fc6f 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019b4e:	2100      	movs	r1, #0
 8019b50:	4630      	mov	r0, r6
 8019b52:	f009 fc71 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_bg, 0);
 8019b56:	6826      	ldr	r6, [r4, #0]
 8019b58:	f506 76c4 	add.w	r6, r6, #392	; 0x188
    lv_style_set_pad_row(style, value);
 8019b5c:	2100      	movs	r1, #0
 8019b5e:	4630      	mov	r0, r6
 8019b60:	f009 fc7c 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019b64:	2100      	movs	r1, #0
 8019b66:	4630      	mov	r0, r6
 8019b68:	f009 fc7e 	bl	8023468 <lv_style_set_pad_column>
    lv_style_set_radius(&styles->menu_bg, 0);
 8019b6c:	6820      	ldr	r0, [r4, #0]
 8019b6e:	2100      	movs	r1, #0
 8019b70:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8019b74:	f009 fd50 	bl	8023618 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_bg, true);
 8019b78:	6820      	ldr	r0, [r4, #0]
 8019b7a:	2101      	movs	r1, #1
 8019b7c:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8019b80:	f009 fd50 	bl	8023624 <lv_style_set_clip_corner>
    lv_style_set_border_side(&styles->menu_bg, LV_BORDER_SIDE_NONE);
 8019b84:	6820      	ldr	r0, [r4, #0]
 8019b86:	2100      	movs	r1, #0
 8019b88:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8019b8c:	f009 fcae 	bl	80234ec <lv_style_set_border_side>
    style_init_reset(&styles->menu_section);
 8019b90:	6820      	ldr	r0, [r4, #0]
 8019b92:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019b96:	f7ff f831 	bl	8018bfc <style_init_reset>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 8019b9a:	6824      	ldr	r4, [r4, #0]
 8019b9c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
 8019ba0:	4b48      	ldr	r3, [pc, #288]	; (8019cc4 <lv_theme_default_init+0x1038>)
 8019ba2:	781b      	ldrb	r3, [r3, #0]
 8019ba4:	2b01      	cmp	r3, #1
 8019ba6:	f001 8456 	beq.w	801b456 <lv_theme_default_init+0x27ca>
 8019baa:	4b44      	ldr	r3, [pc, #272]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019bac:	68de      	ldr	r6, [r3, #12]
 8019bae:	4630      	mov	r0, r6
 8019bb0:	f006 ff8c 	bl	8020acc <lv_disp_get_dpi>
 8019bb4:	00c0      	lsls	r0, r0, #3
 8019bb6:	28ef      	cmp	r0, #239	; 0xef
 8019bb8:	f301 846a 	bgt.w	801b490 <lv_theme_default_init+0x2804>
 8019bbc:	2101      	movs	r1, #1
 8019bbe:	4620      	mov	r0, r4
 8019bc0:	f009 fd2a 	bl	8023618 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_section, true);
 8019bc4:	4c3b      	ldr	r4, [pc, #236]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019bc6:	6820      	ldr	r0, [r4, #0]
 8019bc8:	2101      	movs	r1, #1
 8019bca:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019bce:	f009 fd29 	bl	8023624 <lv_style_set_clip_corner>
    lv_style_set_bg_opa(&styles->menu_section, LV_OPA_COVER);
 8019bd2:	6820      	ldr	r0, [r4, #0]
 8019bd4:	21ff      	movs	r1, #255	; 0xff
 8019bd6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019bda:	f009 fc57 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_section, color_card);
 8019bde:	6820      	ldr	r0, [r4, #0]
 8019be0:	4b39      	ldr	r3, [pc, #228]	; (8019cc8 <lv_theme_default_init+0x103c>)
 8019be2:	8819      	ldrh	r1, [r3, #0]
 8019be4:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019be8:	f009 fc44 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->menu_section, color_text);
 8019bec:	6820      	ldr	r0, [r4, #0]
 8019bee:	4b34      	ldr	r3, [pc, #208]	; (8019cc0 <lv_theme_default_init+0x1034>)
 8019bf0:	8819      	ldrh	r1, [r3, #0]
 8019bf2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 8019bf6:	f009 fcf1 	bl	80235dc <lv_style_set_text_color>
    style_init_reset(&styles->menu_cont);
 8019bfa:	6820      	ldr	r0, [r4, #0]
 8019bfc:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8019c00:	f7fe fffc 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 8019c04:	6826      	ldr	r6, [r4, #0]
 8019c06:	f506 76c8 	add.w	r6, r6, #400	; 0x190
 8019c0a:	4b2e      	ldr	r3, [pc, #184]	; (8019cc4 <lv_theme_default_init+0x1038>)
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	2b01      	cmp	r3, #1
 8019c10:	f001 844c 	beq.w	801b4ac <lv_theme_default_init+0x2820>
 8019c14:	2b02      	cmp	r3, #2
 8019c16:	f001 8466 	beq.w	801b4e6 <lv_theme_default_init+0x285a>
 8019c1a:	4b28      	ldr	r3, [pc, #160]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019c1c:	68dc      	ldr	r4, [r3, #12]
 8019c1e:	4620      	mov	r0, r4
 8019c20:	f006 ff54 	bl	8020acc <lv_disp_get_dpi>
 8019c24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019c28:	0040      	lsls	r0, r0, #1
 8019c2a:	28ef      	cmp	r0, #239	; 0xef
 8019c2c:	f301 8478 	bgt.w	801b520 <lv_theme_default_init+0x2894>
 8019c30:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019c32:	4621      	mov	r1, r4
 8019c34:	4630      	mov	r0, r6
 8019c36:	f009 fc05 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019c3a:	4621      	mov	r1, r4
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	f009 fc07 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 8019c42:	4b1c      	ldr	r3, [pc, #112]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019c44:	681e      	ldr	r6, [r3, #0]
 8019c46:	f506 76c8 	add.w	r6, r6, #400	; 0x190
 8019c4a:	4b1e      	ldr	r3, [pc, #120]	; (8019cc4 <lv_theme_default_init+0x1038>)
 8019c4c:	781b      	ldrb	r3, [r3, #0]
 8019c4e:	2b01      	cmp	r3, #1
 8019c50:	f001 8476 	beq.w	801b540 <lv_theme_default_init+0x28b4>
 8019c54:	2b02      	cmp	r3, #2
 8019c56:	f001 8490 	beq.w	801b57a <lv_theme_default_init+0x28ee>
 8019c5a:	4b18      	ldr	r3, [pc, #96]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019c5c:	68dc      	ldr	r4, [r3, #12]
 8019c5e:	4620      	mov	r0, r4
 8019c60:	f006 ff34 	bl	8020acc <lv_disp_get_dpi>
 8019c64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019c68:	0040      	lsls	r0, r0, #1
 8019c6a:	28ef      	cmp	r0, #239	; 0xef
 8019c6c:	f301 84a2 	bgt.w	801b5b4 <lv_theme_default_init+0x2928>
 8019c70:	2401      	movs	r4, #1
    lv_style_set_pad_top(style, value);
 8019c72:	4621      	mov	r1, r4
 8019c74:	4630      	mov	r0, r6
 8019c76:	f009 fbd9 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019c7a:	4621      	mov	r1, r4
 8019c7c:	4630      	mov	r0, r6
 8019c7e:	f009 fbdb 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 8019c82:	4b0c      	ldr	r3, [pc, #48]	; (8019cb4 <lv_theme_default_init+0x1028>)
 8019c84:	681e      	ldr	r6, [r3, #0]
 8019c86:	f506 76c8 	add.w	r6, r6, #400	; 0x190
 8019c8a:	4b0e      	ldr	r3, [pc, #56]	; (8019cc4 <lv_theme_default_init+0x1038>)
 8019c8c:	781b      	ldrb	r3, [r3, #0]
 8019c8e:	2b01      	cmp	r3, #1
 8019c90:	f001 84a0 	beq.w	801b5d4 <lv_theme_default_init+0x2948>
 8019c94:	2b02      	cmp	r3, #2
 8019c96:	f001 84ba 	beq.w	801b60e <lv_theme_default_init+0x2982>
 8019c9a:	4b08      	ldr	r3, [pc, #32]	; (8019cbc <lv_theme_default_init+0x1030>)
 8019c9c:	68dc      	ldr	r4, [r3, #12]
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	f006 ff14 	bl	8020acc <lv_disp_get_dpi>
 8019ca4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019ca8:	0040      	lsls	r0, r0, #1
 8019caa:	28ef      	cmp	r0, #239	; 0xef
 8019cac:	f301 84cc 	bgt.w	801b648 <lv_theme_default_init+0x29bc>
 8019cb0:	2401      	movs	r4, #1
 8019cb2:	e00b      	b.n	8019ccc <lv_theme_default_init+0x1040>
 8019cb4:	20002764 	.word	0x20002764
 8019cb8:	20002740 	.word	0x20002740
 8019cbc:	20002768 	.word	0x20002768
 8019cc0:	20002748 	.word	0x20002748
 8019cc4:	20002754 	.word	0x20002754
 8019cc8:	2000273c 	.word	0x2000273c
    lv_style_set_pad_row(style, value);
 8019ccc:	4621      	mov	r1, r4
 8019cce:	4630      	mov	r0, r6
 8019cd0:	f009 fbc4 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019cd4:	4621      	mov	r1, r4
 8019cd6:	4630      	mov	r0, r6
 8019cd8:	f009 fbc6 	bl	8023468 <lv_style_set_pad_column>
    lv_style_set_border_width(&styles->menu_cont, lv_disp_dpx(theme.disp, 1));
 8019cdc:	4bca      	ldr	r3, [pc, #808]	; (801a008 <lv_theme_default_init+0x137c>)
 8019cde:	681c      	ldr	r4, [r3, #0]
 8019ce0:	f504 74c8 	add.w	r4, r4, #400	; 0x190
 8019ce4:	4bc9      	ldr	r3, [pc, #804]	; (801a00c <lv_theme_default_init+0x1380>)
 8019ce6:	68de      	ldr	r6, [r3, #12]
 8019ce8:	4630      	mov	r0, r6
 8019cea:	f006 feef 	bl	8020acc <lv_disp_get_dpi>
 8019cee:	28ef      	cmp	r0, #239	; 0xef
 8019cf0:	f301 84ba 	bgt.w	801b668 <lv_theme_default_init+0x29dc>
 8019cf4:	2101      	movs	r1, #1
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	f009 fbf2 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_cont, LV_OPA_10);
 8019cfc:	4cc2      	ldr	r4, [pc, #776]	; (801a008 <lv_theme_default_init+0x137c>)
 8019cfe:	6820      	ldr	r0, [r4, #0]
 8019d00:	2119      	movs	r1, #25
 8019d02:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8019d06:	f009 fbe5 	bl	80234d4 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_cont, color_text);
 8019d0a:	6820      	ldr	r0, [r4, #0]
 8019d0c:	4bc0      	ldr	r3, [pc, #768]	; (801a010 <lv_theme_default_init+0x1384>)
 8019d0e:	8819      	ldrh	r1, [r3, #0]
 8019d10:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8019d14:	f009 fbd2 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_cont, LV_BORDER_SIDE_NONE);
 8019d18:	6820      	ldr	r0, [r4, #0]
 8019d1a:	2100      	movs	r1, #0
 8019d1c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8019d20:	f009 fbe4 	bl	80234ec <lv_style_set_border_side>
    style_init_reset(&styles->menu_sidebar_cont);
 8019d24:	6820      	ldr	r0, [r4, #0]
 8019d26:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8019d2a:	f7fe ff67 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->menu_sidebar_cont, 0);
 8019d2e:	6826      	ldr	r6, [r4, #0]
 8019d30:	f506 76cc 	add.w	r6, r6, #408	; 0x198
    lv_style_set_pad_left(style, value);
 8019d34:	2100      	movs	r1, #0
 8019d36:	4630      	mov	r0, r6
 8019d38:	f009 fb84 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019d3c:	2100      	movs	r1, #0
 8019d3e:	4630      	mov	r0, r6
 8019d40:	f009 fb86 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019d44:	2100      	movs	r1, #0
 8019d46:	4630      	mov	r0, r6
 8019d48:	f009 fb70 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019d4c:	2100      	movs	r1, #0
 8019d4e:	4630      	mov	r0, r6
 8019d50:	f009 fb72 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_sidebar_cont, 0);
 8019d54:	6826      	ldr	r6, [r4, #0]
 8019d56:	f506 76cc 	add.w	r6, r6, #408	; 0x198
    lv_style_set_pad_row(style, value);
 8019d5a:	2100      	movs	r1, #0
 8019d5c:	4630      	mov	r0, r6
 8019d5e:	f009 fb7d 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019d62:	2100      	movs	r1, #0
 8019d64:	4630      	mov	r0, r6
 8019d66:	f009 fb7f 	bl	8023468 <lv_style_set_pad_column>
    lv_style_set_border_width(&styles->menu_sidebar_cont, lv_disp_dpx(theme.disp, 1));
 8019d6a:	6824      	ldr	r4, [r4, #0]
 8019d6c:	f504 74cc 	add.w	r4, r4, #408	; 0x198
 8019d70:	4ba6      	ldr	r3, [pc, #664]	; (801a00c <lv_theme_default_init+0x1380>)
 8019d72:	68de      	ldr	r6, [r3, #12]
 8019d74:	4630      	mov	r0, r6
 8019d76:	f006 fea9 	bl	8020acc <lv_disp_get_dpi>
 8019d7a:	28ef      	cmp	r0, #239	; 0xef
 8019d7c:	f301 8481 	bgt.w	801b682 <lv_theme_default_init+0x29f6>
 8019d80:	2101      	movs	r1, #1
 8019d82:	4620      	mov	r0, r4
 8019d84:	f009 fbac 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_sidebar_cont, LV_OPA_10);
 8019d88:	4c9f      	ldr	r4, [pc, #636]	; (801a008 <lv_theme_default_init+0x137c>)
 8019d8a:	6820      	ldr	r0, [r4, #0]
 8019d8c:	2119      	movs	r1, #25
 8019d8e:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8019d92:	f009 fb9f 	bl	80234d4 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_sidebar_cont, color_text);
 8019d96:	6820      	ldr	r0, [r4, #0]
 8019d98:	4b9d      	ldr	r3, [pc, #628]	; (801a010 <lv_theme_default_init+0x1384>)
 8019d9a:	8819      	ldrh	r1, [r3, #0]
 8019d9c:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8019da0:	f009 fb8c 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_sidebar_cont, LV_BORDER_SIDE_RIGHT);
 8019da4:	6820      	ldr	r0, [r4, #0]
 8019da6:	2108      	movs	r1, #8
 8019da8:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8019dac:	f009 fb9e 	bl	80234ec <lv_style_set_border_side>
    style_init_reset(&styles->menu_main_cont);
 8019db0:	6820      	ldr	r0, [r4, #0]
 8019db2:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
 8019db6:	f7fe ff21 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->menu_main_cont, 0);
 8019dba:	6826      	ldr	r6, [r4, #0]
 8019dbc:	f506 76d0 	add.w	r6, r6, #416	; 0x1a0
    lv_style_set_pad_left(style, value);
 8019dc0:	2100      	movs	r1, #0
 8019dc2:	4630      	mov	r0, r6
 8019dc4:	f009 fb3e 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019dc8:	2100      	movs	r1, #0
 8019dca:	4630      	mov	r0, r6
 8019dcc:	f009 fb40 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8019dd0:	2100      	movs	r1, #0
 8019dd2:	4630      	mov	r0, r6
 8019dd4:	f009 fb2a 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019dd8:	2100      	movs	r1, #0
 8019dda:	4630      	mov	r0, r6
 8019ddc:	f009 fb2c 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_main_cont, 0);
 8019de0:	6826      	ldr	r6, [r4, #0]
 8019de2:	f506 76d0 	add.w	r6, r6, #416	; 0x1a0
    lv_style_set_pad_row(style, value);
 8019de6:	2100      	movs	r1, #0
 8019de8:	4630      	mov	r0, r6
 8019dea:	f009 fb37 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019dee:	2100      	movs	r1, #0
 8019df0:	4630      	mov	r0, r6
 8019df2:	f009 fb39 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->menu_header_cont);
 8019df6:	6820      	ldr	r0, [r4, #0]
 8019df8:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8019dfc:	f7fe fefe 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 8019e00:	6826      	ldr	r6, [r4, #0]
 8019e02:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
 8019e06:	4b83      	ldr	r3, [pc, #524]	; (801a014 <lv_theme_default_init+0x1388>)
 8019e08:	781b      	ldrb	r3, [r3, #0]
 8019e0a:	2b01      	cmp	r3, #1
 8019e0c:	f001 8446 	beq.w	801b69c <lv_theme_default_init+0x2a10>
 8019e10:	2b02      	cmp	r3, #2
 8019e12:	f001 8460 	beq.w	801b6d6 <lv_theme_default_init+0x2a4a>
 8019e16:	4b7d      	ldr	r3, [pc, #500]	; (801a00c <lv_theme_default_init+0x1380>)
 8019e18:	68dc      	ldr	r4, [r3, #12]
 8019e1a:	4620      	mov	r0, r4
 8019e1c:	f006 fe56 	bl	8020acc <lv_disp_get_dpi>
 8019e20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019e24:	0040      	lsls	r0, r0, #1
 8019e26:	28ef      	cmp	r0, #239	; 0xef
 8019e28:	f301 8472 	bgt.w	801b710 <lv_theme_default_init+0x2a84>
 8019e2c:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019e2e:	4621      	mov	r1, r4
 8019e30:	4630      	mov	r0, r6
 8019e32:	f009 fb07 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019e36:	4621      	mov	r1, r4
 8019e38:	4630      	mov	r0, r6
 8019e3a:	f009 fb09 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 8019e3e:	4b72      	ldr	r3, [pc, #456]	; (801a008 <lv_theme_default_init+0x137c>)
 8019e40:	681e      	ldr	r6, [r3, #0]
 8019e42:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
 8019e46:	4b73      	ldr	r3, [pc, #460]	; (801a014 <lv_theme_default_init+0x1388>)
 8019e48:	781b      	ldrb	r3, [r3, #0]
 8019e4a:	2b01      	cmp	r3, #1
 8019e4c:	f001 8470 	beq.w	801b730 <lv_theme_default_init+0x2aa4>
 8019e50:	2b02      	cmp	r3, #2
 8019e52:	f001 8486 	beq.w	801b762 <lv_theme_default_init+0x2ad6>
 8019e56:	4b6d      	ldr	r3, [pc, #436]	; (801a00c <lv_theme_default_init+0x1380>)
 8019e58:	68dc      	ldr	r4, [r3, #12]
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	f006 fe36 	bl	8020acc <lv_disp_get_dpi>
 8019e60:	0040      	lsls	r0, r0, #1
 8019e62:	28ef      	cmp	r0, #239	; 0xef
 8019e64:	f301 849e 	bgt.w	801b7a4 <lv_theme_default_init+0x2b18>
 8019e68:	2401      	movs	r4, #1
    lv_style_set_pad_top(style, value);
 8019e6a:	4621      	mov	r1, r4
 8019e6c:	4630      	mov	r0, r6
 8019e6e:	f009 fadd 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019e72:	4621      	mov	r1, r4
 8019e74:	4630      	mov	r0, r6
 8019e76:	f009 fadf 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 8019e7a:	4b63      	ldr	r3, [pc, #396]	; (801a008 <lv_theme_default_init+0x137c>)
 8019e7c:	681e      	ldr	r6, [r3, #0]
 8019e7e:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
 8019e82:	4b64      	ldr	r3, [pc, #400]	; (801a014 <lv_theme_default_init+0x1388>)
 8019e84:	781b      	ldrb	r3, [r3, #0]
 8019e86:	2b01      	cmp	r3, #1
 8019e88:	f001 849a 	beq.w	801b7c0 <lv_theme_default_init+0x2b34>
 8019e8c:	2b02      	cmp	r3, #2
 8019e8e:	f001 84b4 	beq.w	801b7fa <lv_theme_default_init+0x2b6e>
 8019e92:	4b5e      	ldr	r3, [pc, #376]	; (801a00c <lv_theme_default_init+0x1380>)
 8019e94:	68dc      	ldr	r4, [r3, #12]
 8019e96:	4620      	mov	r0, r4
 8019e98:	f006 fe18 	bl	8020acc <lv_disp_get_dpi>
 8019e9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019ea0:	0040      	lsls	r0, r0, #1
 8019ea2:	28ef      	cmp	r0, #239	; 0xef
 8019ea4:	f301 84c6 	bgt.w	801b834 <lv_theme_default_init+0x2ba8>
 8019ea8:	2401      	movs	r4, #1
    lv_style_set_pad_row(style, value);
 8019eaa:	4621      	mov	r1, r4
 8019eac:	4630      	mov	r0, r6
 8019eae:	f009 fad5 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019eb2:	4621      	mov	r1, r4
 8019eb4:	4630      	mov	r0, r6
 8019eb6:	f009 fad7 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->menu_header_btn);
 8019eba:	4c53      	ldr	r4, [pc, #332]	; (801a008 <lv_theme_default_init+0x137c>)
 8019ebc:	6820      	ldr	r0, [r4, #0]
 8019ebe:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 8019ec2:	f7fe fe9b 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 8019ec6:	6826      	ldr	r6, [r4, #0]
 8019ec8:	f506 76dc 	add.w	r6, r6, #440	; 0x1b8
 8019ecc:	4b51      	ldr	r3, [pc, #324]	; (801a014 <lv_theme_default_init+0x1388>)
 8019ece:	781b      	ldrb	r3, [r3, #0]
 8019ed0:	2b01      	cmp	r3, #1
 8019ed2:	f001 84bf 	beq.w	801b854 <lv_theme_default_init+0x2bc8>
 8019ed6:	2b02      	cmp	r3, #2
 8019ed8:	f001 84d5 	beq.w	801b886 <lv_theme_default_init+0x2bfa>
 8019edc:	4b4b      	ldr	r3, [pc, #300]	; (801a00c <lv_theme_default_init+0x1380>)
 8019ede:	68dc      	ldr	r4, [r3, #12]
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	f006 fdf3 	bl	8020acc <lv_disp_get_dpi>
 8019ee6:	0040      	lsls	r0, r0, #1
 8019ee8:	28ef      	cmp	r0, #239	; 0xef
 8019eea:	f301 84e9 	bgt.w	801b8c0 <lv_theme_default_init+0x2c34>
 8019eee:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 8019ef0:	4621      	mov	r1, r4
 8019ef2:	4630      	mov	r0, r6
 8019ef4:	f009 faa6 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019ef8:	4621      	mov	r1, r4
 8019efa:	4630      	mov	r0, r6
 8019efc:	f009 faa8 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 8019f00:	4b41      	ldr	r3, [pc, #260]	; (801a008 <lv_theme_default_init+0x137c>)
 8019f02:	681e      	ldr	r6, [r3, #0]
 8019f04:	f506 76dc 	add.w	r6, r6, #440	; 0x1b8
 8019f08:	4b42      	ldr	r3, [pc, #264]	; (801a014 <lv_theme_default_init+0x1388>)
 8019f0a:	781b      	ldrb	r3, [r3, #0]
 8019f0c:	2b01      	cmp	r3, #1
 8019f0e:	f001 84e5 	beq.w	801b8dc <lv_theme_default_init+0x2c50>
 8019f12:	2b02      	cmp	r3, #2
 8019f14:	f001 84fb 	beq.w	801b90e <lv_theme_default_init+0x2c82>
 8019f18:	4b3c      	ldr	r3, [pc, #240]	; (801a00c <lv_theme_default_init+0x1380>)
 8019f1a:	68dc      	ldr	r4, [r3, #12]
 8019f1c:	4620      	mov	r0, r4
 8019f1e:	f006 fdd5 	bl	8020acc <lv_disp_get_dpi>
 8019f22:	0040      	lsls	r0, r0, #1
 8019f24:	28ef      	cmp	r0, #239	; 0xef
 8019f26:	f301 850f 	bgt.w	801b948 <lv_theme_default_init+0x2cbc>
 8019f2a:	2401      	movs	r4, #1
    lv_style_set_pad_top(style, value);
 8019f2c:	4621      	mov	r1, r4
 8019f2e:	4630      	mov	r0, r6
 8019f30:	f009 fa7c 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8019f34:	4621      	mov	r1, r4
 8019f36:	4630      	mov	r0, r6
 8019f38:	f009 fa7e 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_shadow_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 8019f3c:	4c32      	ldr	r4, [pc, #200]	; (801a008 <lv_theme_default_init+0x137c>)
 8019f3e:	6820      	ldr	r0, [r4, #0]
 8019f40:	2100      	movs	r1, #0
 8019f42:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 8019f46:	f009 fb19 	bl	802357c <lv_style_set_shadow_opa>
    lv_style_set_bg_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 8019f4a:	6820      	ldr	r0, [r4, #0]
 8019f4c:	2100      	movs	r1, #0
 8019f4e:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 8019f52:	f009 fa9b 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->menu_header_btn, color_text);
 8019f56:	6820      	ldr	r0, [r4, #0]
 8019f58:	4b2d      	ldr	r3, [pc, #180]	; (801a010 <lv_theme_default_init+0x1384>)
 8019f5a:	8819      	ldrh	r1, [r3, #0]
 8019f5c:	f500 70dc 	add.w	r0, r0, #440	; 0x1b8
 8019f60:	f009 fb3c 	bl	80235dc <lv_style_set_text_color>
    style_init_reset(&styles->menu_page);
 8019f64:	6820      	ldr	r0, [r4, #0]
 8019f66:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
 8019f6a:	f7fe fe47 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_page, 0);
 8019f6e:	6826      	ldr	r6, [r4, #0]
 8019f70:	f506 76d4 	add.w	r6, r6, #424	; 0x1a8
    lv_style_set_pad_left(style, value);
 8019f74:	2100      	movs	r1, #0
 8019f76:	4630      	mov	r0, r6
 8019f78:	f009 fa64 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8019f7c:	2100      	movs	r1, #0
 8019f7e:	4630      	mov	r0, r6
 8019f80:	f009 fa66 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_gap(&styles->menu_page, 0);
 8019f84:	6826      	ldr	r6, [r4, #0]
 8019f86:	f506 76d4 	add.w	r6, r6, #424	; 0x1a8
    lv_style_set_pad_row(style, value);
 8019f8a:	2100      	movs	r1, #0
 8019f8c:	4630      	mov	r0, r6
 8019f8e:	f009 fa65 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8019f92:	2100      	movs	r1, #0
 8019f94:	4630      	mov	r0, r6
 8019f96:	f009 fa67 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->menu_pressed);
 8019f9a:	6820      	ldr	r0, [r4, #0]
 8019f9c:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 8019fa0:	f7fe fe2c 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_pressed, LV_OPA_20);
 8019fa4:	6820      	ldr	r0, [r4, #0]
 8019fa6:	2133      	movs	r1, #51	; 0x33
 8019fa8:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
 8019fac:	f009 fa6e 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_pressed, lv_palette_main(LV_PALETTE_GREY));
 8019fb0:	6826      	ldr	r6, [r4, #0]
 8019fb2:	f506 76e4 	add.w	r6, r6, #456	; 0x1c8
 8019fb6:	2012      	movs	r0, #18
 8019fb8:	f007 fbfc 	bl	80217b4 <lv_palette_main>
 8019fbc:	4601      	mov	r1, r0
 8019fbe:	4630      	mov	r0, r6
 8019fc0:	f009 fa58 	bl	8023474 <lv_style_set_bg_color>
    style_init_reset(&styles->menu_separator);
 8019fc4:	6820      	ldr	r0, [r4, #0]
 8019fc6:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8019fca:	f7fe fe17 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_separator, LV_OPA_TRANSP);
 8019fce:	6820      	ldr	r0, [r4, #0]
 8019fd0:	2100      	movs	r1, #0
 8019fd2:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8019fd6:	f009 fa59 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 8019fda:	6826      	ldr	r6, [r4, #0]
 8019fdc:	f506 76e8 	add.w	r6, r6, #464	; 0x1d0
 8019fe0:	4b0c      	ldr	r3, [pc, #48]	; (801a014 <lv_theme_default_init+0x1388>)
 8019fe2:	781b      	ldrb	r3, [r3, #0]
 8019fe4:	2b01      	cmp	r3, #1
 8019fe6:	f001 84bd 	beq.w	801b964 <lv_theme_default_init+0x2cd8>
 8019fea:	2b02      	cmp	r3, #2
 8019fec:	f001 84d3 	beq.w	801b996 <lv_theme_default_init+0x2d0a>
 8019ff0:	4b06      	ldr	r3, [pc, #24]	; (801a00c <lv_theme_default_init+0x1380>)
 8019ff2:	68dc      	ldr	r4, [r3, #12]
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	f006 fd69 	bl	8020acc <lv_disp_get_dpi>
 8019ffa:	0040      	lsls	r0, r0, #1
 8019ffc:	28ef      	cmp	r0, #239	; 0xef
 8019ffe:	f301 84e7 	bgt.w	801b9d0 <lv_theme_default_init+0x2d44>
 801a002:	2401      	movs	r4, #1
 801a004:	e008      	b.n	801a018 <lv_theme_default_init+0x138c>
 801a006:	bf00      	nop
 801a008:	20002764 	.word	0x20002764
 801a00c:	20002768 	.word	0x20002768
 801a010:	20002748 	.word	0x20002748
 801a014:	20002754 	.word	0x20002754
    lv_style_set_pad_top(style, value);
 801a018:	4621      	mov	r1, r4
 801a01a:	4630      	mov	r0, r6
 801a01c:	f009 fa06 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 801a020:	4621      	mov	r1, r4
 801a022:	4630      	mov	r0, r6
 801a024:	f009 fa08 	bl	8023438 <lv_style_set_pad_bottom>
    style_init_reset(&styles->meter_marker);
 801a028:	4cca      	ldr	r4, [pc, #808]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a02a:	6820      	ldr	r0, [r4, #0]
 801a02c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 801a030:	f7fe fde4 	bl	8018bfc <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 801a034:	6824      	ldr	r4, [r4, #0]
 801a036:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 801a03a:	4bc7      	ldr	r3, [pc, #796]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a03c:	68de      	ldr	r6, [r3, #12]
 801a03e:	4630      	mov	r0, r6
 801a040:	f006 fd44 	bl	8020acc <lv_disp_get_dpi>
 801a044:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a048:	28ef      	cmp	r0, #239	; 0xef
 801a04a:	f301 84cf 	bgt.w	801b9ec <lv_theme_default_init+0x2d60>
 801a04e:	2101      	movs	r1, #1
 801a050:	4620      	mov	r0, r4
 801a052:	f009 fa99 	bl	8023588 <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 801a056:	4cbf      	ldr	r4, [pc, #764]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a058:	6820      	ldr	r0, [r4, #0]
 801a05a:	4bc0      	ldr	r3, [pc, #768]	; (801a35c <lv_theme_default_init+0x16d0>)
 801a05c:	8819      	ldrh	r1, [r3, #0]
 801a05e:	f500 70b0 	add.w	r0, r0, #352	; 0x160
 801a062:	f009 fa97 	bl	8023594 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 801a066:	6826      	ldr	r6, [r4, #0]
 801a068:	f506 76b0 	add.w	r6, r6, #352	; 0x160
 801a06c:	4bba      	ldr	r3, [pc, #744]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a06e:	68dc      	ldr	r4, [r3, #12]
 801a070:	4620      	mov	r0, r4
 801a072:	f006 fd2b 	bl	8020acc <lv_disp_get_dpi>
 801a076:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a07a:	0080      	lsls	r0, r0, #2
 801a07c:	28ef      	cmp	r0, #239	; 0xef
 801a07e:	f301 84c5 	bgt.w	801ba0c <lv_theme_default_init+0x2d80>
 801a082:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 801a084:	4621      	mov	r1, r4
 801a086:	4630      	mov	r0, r6
 801a088:	f009 f9ac 	bl	80233e4 <lv_style_set_width>
    lv_style_set_height(style, value);
 801a08c:	4621      	mov	r1, r4
 801a08e:	4630      	mov	r0, r6
 801a090:	f009 f9b4 	bl	80233fc <lv_style_set_height>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 801a094:	4baf      	ldr	r3, [pc, #700]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a096:	681c      	ldr	r4, [r3, #0]
 801a098:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 801a09c:	4bae      	ldr	r3, [pc, #696]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a09e:	68de      	ldr	r6, [r3, #12]
 801a0a0:	4630      	mov	r0, r6
 801a0a2:	f006 fd13 	bl	8020acc <lv_disp_get_dpi>
 801a0a6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a0aa:	28ef      	cmp	r0, #239	; 0xef
 801a0ac:	f301 84be 	bgt.w	801ba2c <lv_theme_default_init+0x2da0>
 801a0b0:	2101      	movs	r1, #1
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	f009 f9c6 	bl	8023444 <lv_style_set_pad_left>
    style_init_reset(&styles->meter_indic);
 801a0b8:	4ca6      	ldr	r4, [pc, #664]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a0ba:	6820      	ldr	r0, [r4, #0]
 801a0bc:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 801a0c0:	f7fe fd9c 	bl	8018bfc <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 801a0c4:	6820      	ldr	r0, [r4, #0]
 801a0c6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801a0ca:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 801a0ce:	f009 faa3 	bl	8023618 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 801a0d2:	6820      	ldr	r0, [r4, #0]
 801a0d4:	4ba1      	ldr	r3, [pc, #644]	; (801a35c <lv_theme_default_init+0x16d0>)
 801a0d6:	8819      	ldrh	r1, [r3, #0]
 801a0d8:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 801a0dc:	f009 f9ca 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 801a0e0:	6820      	ldr	r0, [r4, #0]
 801a0e2:	21ff      	movs	r1, #255	; 0xff
 801a0e4:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 801a0e8:	f009 f9d0 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 801a0ec:	6826      	ldr	r6, [r4, #0]
 801a0ee:	f506 76b4 	add.w	r6, r6, #360	; 0x168
 801a0f2:	4b99      	ldr	r3, [pc, #612]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a0f4:	68dc      	ldr	r4, [r3, #12]
 801a0f6:	4620      	mov	r0, r4
 801a0f8:	f006 fce8 	bl	8020acc <lv_disp_get_dpi>
 801a0fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a100:	28ef      	cmp	r0, #239	; 0xef
 801a102:	f301 84a3 	bgt.w	801ba4c <lv_theme_default_init+0x2dc0>
 801a106:	2401      	movs	r4, #1
    lv_style_set_width(style, value);
 801a108:	4621      	mov	r1, r4
 801a10a:	4630      	mov	r0, r6
 801a10c:	f009 f96a 	bl	80233e4 <lv_style_set_width>
    lv_style_set_height(style, value);
 801a110:	4621      	mov	r1, r4
 801a112:	4630      	mov	r0, r6
 801a114:	f009 f972 	bl	80233fc <lv_style_set_height>
    style_init_reset(&styles->table_cell);
 801a118:	4c8e      	ldr	r4, [pc, #568]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a11a:	6820      	ldr	r0, [r4, #0]
 801a11c:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 801a120:	f7fe fd6c 	bl	8018bfc <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 801a124:	6824      	ldr	r4, [r4, #0]
 801a126:	f504 74ac 	add.w	r4, r4, #344	; 0x158
 801a12a:	4b8b      	ldr	r3, [pc, #556]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a12c:	68de      	ldr	r6, [r3, #12]
 801a12e:	4630      	mov	r0, r6
 801a130:	f006 fccc 	bl	8020acc <lv_disp_get_dpi>
 801a134:	28ef      	cmp	r0, #239	; 0xef
 801a136:	f301 8499 	bgt.w	801ba6c <lv_theme_default_init+0x2de0>
 801a13a:	2101      	movs	r1, #1
 801a13c:	4620      	mov	r0, r4
 801a13e:	f009 f9cf 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 801a142:	4c84      	ldr	r4, [pc, #528]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a144:	6820      	ldr	r0, [r4, #0]
 801a146:	4b86      	ldr	r3, [pc, #536]	; (801a360 <lv_theme_default_init+0x16d4>)
 801a148:	8819      	ldrh	r1, [r3, #0]
 801a14a:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 801a14e:	f009 f9b5 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 801a152:	6820      	ldr	r0, [r4, #0]
 801a154:	2103      	movs	r1, #3
 801a156:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 801a15a:	f009 f9c7 	bl	80234ec <lv_style_set_border_side>
    style_init_reset(&styles->ta_cursor);
 801a15e:	6820      	ldr	r0, [r4, #0]
 801a160:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 801a164:	f7fe fd4a 	bl	8018bfc <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 801a168:	6820      	ldr	r0, [r4, #0]
 801a16a:	4b7c      	ldr	r3, [pc, #496]	; (801a35c <lv_theme_default_init+0x16d0>)
 801a16c:	8819      	ldrh	r1, [r3, #0]
 801a16e:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 801a172:	f009 f9a3 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 801a176:	6824      	ldr	r4, [r4, #0]
 801a178:	f504 74b8 	add.w	r4, r4, #368	; 0x170
 801a17c:	4b76      	ldr	r3, [pc, #472]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a17e:	68de      	ldr	r6, [r3, #12]
 801a180:	4630      	mov	r0, r6
 801a182:	f006 fca3 	bl	8020acc <lv_disp_get_dpi>
 801a186:	0040      	lsls	r0, r0, #1
 801a188:	28ef      	cmp	r0, #239	; 0xef
 801a18a:	f301 847c 	bgt.w	801ba86 <lv_theme_default_init+0x2dfa>
 801a18e:	2101      	movs	r1, #1
 801a190:	4620      	mov	r0, r4
 801a192:	f009 f9a5 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, - lv_disp_dpx(theme.disp, 1));
 801a196:	4b6f      	ldr	r3, [pc, #444]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a198:	681c      	ldr	r4, [r3, #0]
 801a19a:	f504 74b8 	add.w	r4, r4, #368	; 0x170
 801a19e:	4b6e      	ldr	r3, [pc, #440]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a1a0:	68de      	ldr	r6, [r3, #12]
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	f006 fc92 	bl	8020acc <lv_disp_get_dpi>
 801a1a8:	28ef      	cmp	r0, #239	; 0xef
 801a1aa:	f301 847a 	bgt.w	801baa2 <lv_theme_default_init+0x2e16>
 801a1ae:	2101      	movs	r1, #1
 801a1b0:	4249      	negs	r1, r1
 801a1b2:	b209      	sxth	r1, r1
 801a1b4:	4620      	mov	r0, r4
 801a1b6:	f009 f945 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 801a1ba:	4c66      	ldr	r4, [pc, #408]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a1bc:	6820      	ldr	r0, [r4, #0]
 801a1be:	2104      	movs	r1, #4
 801a1c0:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 801a1c4:	f009 f992 	bl	80234ec <lv_style_set_border_side>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 801a1c8:	6820      	ldr	r0, [r4, #0]
 801a1ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801a1ce:	f500 70b8 	add.w	r0, r0, #368	; 0x170
 801a1d2:	f009 fa39 	bl	8023648 <lv_style_set_anim_time>
    style_init_reset(&styles->ta_placeholder);
 801a1d6:	6820      	ldr	r0, [r4, #0]
 801a1d8:	f500 70bc 	add.w	r0, r0, #376	; 0x178
 801a1dc:	f7fe fd0e 	bl	8018bfc <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 801a1e0:	6824      	ldr	r4, [r4, #0]
 801a1e2:	f504 74bc 	add.w	r4, r4, #376	; 0x178
 801a1e6:	4b5c      	ldr	r3, [pc, #368]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a1e8:	6a1b      	ldr	r3, [r3, #32]
 801a1ea:	f013 0f01 	tst.w	r3, #1
 801a1ee:	f001 8465 	beq.w	801babc <lv_theme_default_init+0x2e30>
 801a1f2:	2102      	movs	r1, #2
 801a1f4:	2012      	movs	r0, #18
 801a1f6:	f007 fafd 	bl	80217f4 <lv_palette_darken>
 801a1fa:	4601      	mov	r1, r0
 801a1fc:	4620      	mov	r0, r4
 801a1fe:	f009 f9ed 	bl	80235dc <lv_style_set_text_color>
    style_init_reset(&styles->colorwheel_main);
 801a202:	4c54      	ldr	r4, [pc, #336]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a204:	6820      	ldr	r0, [r4, #0]
 801a206:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 801a20a:	f7fe fcf7 	bl	8018bfc <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 801a20e:	6824      	ldr	r4, [r4, #0]
 801a210:	f504 74c0 	add.w	r4, r4, #384	; 0x180
 801a214:	4b50      	ldr	r3, [pc, #320]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a216:	68de      	ldr	r6, [r3, #12]
 801a218:	4630      	mov	r0, r6
 801a21a:	f006 fc57 	bl	8020acc <lv_disp_get_dpi>
 801a21e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a222:	0040      	lsls	r0, r0, #1
 801a224:	28ef      	cmp	r0, #239	; 0xef
 801a226:	f301 8450 	bgt.w	801baca <lv_theme_default_init+0x2e3e>
 801a22a:	2101      	movs	r1, #1
 801a22c:	4620      	mov	r0, r4
 801a22e:	f009 f9bd 	bl	80235ac <lv_style_set_arc_width>
    style_init_reset(&styles->msgbox_btn_bg);
 801a232:	4c48      	ldr	r4, [pc, #288]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a234:	6820      	ldr	r0, [r4, #0]
 801a236:	f500 70f0 	add.w	r0, r0, #480	; 0x1e0
 801a23a:	f7fe fcdf 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 801a23e:	6826      	ldr	r6, [r4, #0]
 801a240:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
 801a244:	4b44      	ldr	r3, [pc, #272]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a246:	68dc      	ldr	r4, [r3, #12]
 801a248:	4620      	mov	r0, r4
 801a24a:	f006 fc3f 	bl	8020acc <lv_disp_get_dpi>
 801a24e:	0080      	lsls	r0, r0, #2
 801a250:	28ef      	cmp	r0, #239	; 0xef
 801a252:	f301 844f 	bgt.w	801baf4 <lv_theme_default_init+0x2e68>
 801a256:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801a258:	4621      	mov	r1, r4
 801a25a:	4630      	mov	r0, r6
 801a25c:	f009 f8f2 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 801a260:	4621      	mov	r1, r4
 801a262:	4630      	mov	r0, r6
 801a264:	f009 f8f4 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801a268:	4621      	mov	r1, r4
 801a26a:	4630      	mov	r0, r6
 801a26c:	f009 f8de 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 801a270:	4621      	mov	r1, r4
 801a272:	4630      	mov	r0, r6
 801a274:	f009 f8e0 	bl	8023438 <lv_style_set_pad_bottom>
    style_init_reset(&styles->msgbox_bg);
 801a278:	4c36      	ldr	r4, [pc, #216]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a27a:	6820      	ldr	r0, [r4, #0]
 801a27c:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 801a280:	f7fe fcbc 	bl	8018bfc <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 801a284:	6820      	ldr	r0, [r4, #0]
 801a286:	f242 0164 	movw	r1, #8292	; 0x2064
 801a28a:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 801a28e:	f009 f8af 	bl	80233f0 <lv_style_set_max_width>
    style_init_reset(&styles->msgbox_backdrop_bg);
 801a292:	6820      	ldr	r0, [r4, #0]
 801a294:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 801a298:	f7fe fcb0 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_color(&styles->msgbox_backdrop_bg, lv_palette_main(LV_PALETTE_GREY));
 801a29c:	6826      	ldr	r6, [r4, #0]
 801a29e:	f506 76f4 	add.w	r6, r6, #488	; 0x1e8
 801a2a2:	2012      	movs	r0, #18
 801a2a4:	f007 fa86 	bl	80217b4 <lv_palette_main>
 801a2a8:	4601      	mov	r1, r0
 801a2aa:	4630      	mov	r0, r6
 801a2ac:	f009 f8e2 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->msgbox_backdrop_bg, LV_OPA_50);
 801a2b0:	6820      	ldr	r0, [r4, #0]
 801a2b2:	217f      	movs	r1, #127	; 0x7f
 801a2b4:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 801a2b8:	f009 f8e8 	bl	802348c <lv_style_set_bg_opa>
    style_init_reset(&styles->keyboard_btn_bg);
 801a2bc:	6820      	ldr	r0, [r4, #0]
 801a2be:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 801a2c2:	f7fe fc9b 	bl	8018bfc <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 801a2c6:	6820      	ldr	r0, [r4, #0]
 801a2c8:	2100      	movs	r1, #0
 801a2ca:	f500 70f8 	add.w	r0, r0, #496	; 0x1f0
 801a2ce:	f009 f937 	bl	8023540 <lv_style_set_shadow_width>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 801a2d2:	6824      	ldr	r4, [r4, #0]
 801a2d4:	f504 74f8 	add.w	r4, r4, #496	; 0x1f0
 801a2d8:	4b22      	ldr	r3, [pc, #136]	; (801a364 <lv_theme_default_init+0x16d8>)
 801a2da:	781b      	ldrb	r3, [r3, #0]
 801a2dc:	2b03      	cmp	r3, #3
 801a2de:	f001 8417 	beq.w	801bb10 <lv_theme_default_init+0x2e84>
 801a2e2:	2b01      	cmp	r3, #1
 801a2e4:	f001 842f 	beq.w	801bb46 <lv_theme_default_init+0x2eba>
 801a2e8:	4b1b      	ldr	r3, [pc, #108]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a2ea:	68de      	ldr	r6, [r3, #12]
 801a2ec:	4630      	mov	r0, r6
 801a2ee:	f006 fbed 	bl	8020acc <lv_disp_get_dpi>
 801a2f2:	00c0      	lsls	r0, r0, #3
 801a2f4:	28ef      	cmp	r0, #239	; 0xef
 801a2f6:	f301 8443 	bgt.w	801bb80 <lv_theme_default_init+0x2ef4>
 801a2fa:	2101      	movs	r1, #1
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	f009 f98b 	bl	8023618 <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 801a302:	4c14      	ldr	r4, [pc, #80]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a304:	6820      	ldr	r0, [r4, #0]
 801a306:	f500 7008 	add.w	r0, r0, #544	; 0x220
 801a30a:	f7fe fc77 	bl	8018bfc <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 801a30e:	4e12      	ldr	r6, [pc, #72]	; (801a358 <lv_theme_default_init+0x16cc>)
 801a310:	6820      	ldr	r0, [r4, #0]
 801a312:	8a31      	ldrh	r1, [r6, #16]
 801a314:	f500 7008 	add.w	r0, r0, #544	; 0x220
 801a318:	f009 f8d0 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 801a31c:	6824      	ldr	r4, [r4, #0]
 801a31e:	f504 7408 	add.w	r4, r4, #544	; 0x220
 801a322:	68f6      	ldr	r6, [r6, #12]
 801a324:	4630      	mov	r0, r6
 801a326:	f006 fbd1 	bl	8020acc <lv_disp_get_dpi>
 801a32a:	0040      	lsls	r0, r0, #1
 801a32c:	28ef      	cmp	r0, #239	; 0xef
 801a32e:	f301 8435 	bgt.w	801bb9c <lv_theme_default_init+0x2f10>
 801a332:	2101      	movs	r1, #1
 801a334:	0049      	lsls	r1, r1, #1
 801a336:	b209      	sxth	r1, r1
 801a338:	4620      	mov	r0, r4
 801a33a:	f009 f8d1 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 801a33e:	4c05      	ldr	r4, [pc, #20]	; (801a354 <lv_theme_default_init+0x16c8>)
 801a340:	6820      	ldr	r0, [r4, #0]
 801a342:	2101      	movs	r1, #1
 801a344:	f500 7008 	add.w	r0, r0, #544	; 0x220
 801a348:	f009 f8d0 	bl	80234ec <lv_style_set_border_side>
    style_init_reset(&styles->tab_bg_focus);
 801a34c:	6820      	ldr	r0, [r4, #0]
 801a34e:	f500 7006 	add.w	r0, r0, #536	; 0x218
 801a352:	e009      	b.n	801a368 <lv_theme_default_init+0x16dc>
 801a354:	20002764 	.word	0x20002764
 801a358:	20002768 	.word	0x20002768
 801a35c:	20002748 	.word	0x20002748
 801a360:	20002740 	.word	0x20002740
 801a364:	20002754 	.word	0x20002754
 801a368:	f7fe fc48 	bl	8018bfc <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 801a36c:	6824      	ldr	r4, [r4, #0]
 801a36e:	f504 7406 	add.w	r4, r4, #536	; 0x218
 801a372:	4bc3      	ldr	r3, [pc, #780]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a374:	68de      	ldr	r6, [r3, #12]
 801a376:	4630      	mov	r0, r6
 801a378:	f006 fba8 	bl	8020acc <lv_disp_get_dpi>
 801a37c:	0040      	lsls	r0, r0, #1
 801a37e:	28ef      	cmp	r0, #239	; 0xef
 801a380:	f301 841a 	bgt.w	801bbb8 <lv_theme_default_init+0x2f2c>
 801a384:	2101      	movs	r1, #1
 801a386:	4249      	negs	r1, r1
 801a388:	b209      	sxth	r1, r1
 801a38a:	4620      	mov	r0, r4
 801a38c:	f009 f8d2 	bl	8023534 <lv_style_set_outline_pad>
    style_init_reset(&styles->list_bg);
 801a390:	4cbc      	ldr	r4, [pc, #752]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a392:	6820      	ldr	r0, [r4, #0]
 801a394:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 801a398:	f7fe fc30 	bl	8018bfc <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 801a39c:	6826      	ldr	r6, [r4, #0]
 801a39e:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 801a3a2:	4bb9      	ldr	r3, [pc, #740]	; (801a688 <lv_theme_default_init+0x19fc>)
 801a3a4:	781b      	ldrb	r3, [r3, #0]
 801a3a6:	2b01      	cmp	r3, #1
 801a3a8:	f001 8414 	beq.w	801bbd4 <lv_theme_default_init+0x2f48>
 801a3ac:	2b02      	cmp	r3, #2
 801a3ae:	f001 842e 	beq.w	801bc0e <lv_theme_default_init+0x2f82>
 801a3b2:	4bb3      	ldr	r3, [pc, #716]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a3b4:	68dc      	ldr	r4, [r3, #12]
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	f006 fb88 	bl	8020acc <lv_disp_get_dpi>
 801a3bc:	0100      	lsls	r0, r0, #4
 801a3be:	28ef      	cmp	r0, #239	; 0xef
 801a3c0:	f301 8442 	bgt.w	801bc48 <lv_theme_default_init+0x2fbc>
 801a3c4:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801a3c6:	4621      	mov	r1, r4
 801a3c8:	4630      	mov	r0, r6
 801a3ca:	f009 f83b 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 801a3ce:	4621      	mov	r1, r4
 801a3d0:	4630      	mov	r0, r6
 801a3d2:	f009 f83d 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 801a3d6:	4cab      	ldr	r4, [pc, #684]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a3d8:	6826      	ldr	r6, [r4, #0]
 801a3da:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
    lv_style_set_pad_top(style, value);
 801a3de:	2100      	movs	r1, #0
 801a3e0:	4630      	mov	r0, r6
 801a3e2:	f009 f823 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 801a3e6:	2100      	movs	r1, #0
 801a3e8:	4630      	mov	r0, r6
 801a3ea:	f009 f825 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 801a3ee:	6826      	ldr	r6, [r4, #0]
 801a3f0:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
    lv_style_set_pad_row(style, value);
 801a3f4:	2100      	movs	r1, #0
 801a3f6:	4630      	mov	r0, r6
 801a3f8:	f009 f830 	bl	802345c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 801a3fc:	2100      	movs	r1, #0
 801a3fe:	4630      	mov	r0, r6
 801a400:	f009 f832 	bl	8023468 <lv_style_set_pad_column>
    lv_style_set_clip_corner(&styles->list_bg, true);
 801a404:	6820      	ldr	r0, [r4, #0]
 801a406:	2101      	movs	r1, #1
 801a408:	f500 70fc 	add.w	r0, r0, #504	; 0x1f8
 801a40c:	f009 f90a 	bl	8023624 <lv_style_set_clip_corner>
    style_init_reset(&styles->list_btn);
 801a410:	6820      	ldr	r0, [r4, #0]
 801a412:	f500 7000 	add.w	r0, r0, #512	; 0x200
 801a416:	f7fe fbf1 	bl	8018bfc <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 801a41a:	6824      	ldr	r4, [r4, #0]
 801a41c:	f504 7400 	add.w	r4, r4, #512	; 0x200
 801a420:	4b97      	ldr	r3, [pc, #604]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a422:	68de      	ldr	r6, [r3, #12]
 801a424:	4630      	mov	r0, r6
 801a426:	f006 fb51 	bl	8020acc <lv_disp_get_dpi>
 801a42a:	28ef      	cmp	r0, #239	; 0xef
 801a42c:	f301 841a 	bgt.w	801bc64 <lv_theme_default_init+0x2fd8>
 801a430:	2101      	movs	r1, #1
 801a432:	4620      	mov	r0, r4
 801a434:	f009 f854 	bl	80234e0 <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 801a438:	4c92      	ldr	r4, [pc, #584]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a43a:	6820      	ldr	r0, [r4, #0]
 801a43c:	4b93      	ldr	r3, [pc, #588]	; (801a68c <lv_theme_default_init+0x1a00>)
 801a43e:	8819      	ldrh	r1, [r3, #0]
 801a440:	f500 7000 	add.w	r0, r0, #512	; 0x200
 801a444:	f009 f83a 	bl	80234bc <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 801a448:	6820      	ldr	r0, [r4, #0]
 801a44a:	2101      	movs	r1, #1
 801a44c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 801a450:	f009 f84c 	bl	80234ec <lv_style_set_border_side>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 801a454:	6826      	ldr	r6, [r4, #0]
 801a456:	f506 7600 	add.w	r6, r6, #512	; 0x200
 801a45a:	4b8b      	ldr	r3, [pc, #556]	; (801a688 <lv_theme_default_init+0x19fc>)
 801a45c:	781b      	ldrb	r3, [r3, #0]
 801a45e:	2b01      	cmp	r3, #1
 801a460:	f001 840d 	beq.w	801bc7e <lv_theme_default_init+0x2ff2>
 801a464:	2b02      	cmp	r3, #2
 801a466:	f001 8427 	beq.w	801bcb8 <lv_theme_default_init+0x302c>
 801a46a:	4b85      	ldr	r3, [pc, #532]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a46c:	68dc      	ldr	r4, [r3, #12]
 801a46e:	4620      	mov	r0, r4
 801a470:	f006 fb2c 	bl	8020acc <lv_disp_get_dpi>
 801a474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a478:	0040      	lsls	r0, r0, #1
 801a47a:	28ef      	cmp	r0, #239	; 0xef
 801a47c:	f301 8439 	bgt.w	801bcf2 <lv_theme_default_init+0x3066>
 801a480:	2401      	movs	r4, #1
    lv_style_set_pad_left(style, value);
 801a482:	4621      	mov	r1, r4
 801a484:	4630      	mov	r0, r6
 801a486:	f008 ffdd 	bl	8023444 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 801a48a:	4621      	mov	r1, r4
 801a48c:	4630      	mov	r0, r6
 801a48e:	f008 ffdf 	bl	8023450 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 801a492:	4621      	mov	r1, r4
 801a494:	4630      	mov	r0, r6
 801a496:	f008 ffc9 	bl	802342c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 801a49a:	4621      	mov	r1, r4
 801a49c:	4630      	mov	r0, r6
 801a49e:	f008 ffcb 	bl	8023438 <lv_style_set_pad_bottom>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 801a4a2:	4b78      	ldr	r3, [pc, #480]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a4a4:	681c      	ldr	r4, [r3, #0]
 801a4a6:	f504 7400 	add.w	r4, r4, #512	; 0x200
 801a4aa:	4b77      	ldr	r3, [pc, #476]	; (801a688 <lv_theme_default_init+0x19fc>)
 801a4ac:	781b      	ldrb	r3, [r3, #0]
 801a4ae:	2b01      	cmp	r3, #1
 801a4b0:	f001 842f 	beq.w	801bd12 <lv_theme_default_init+0x3086>
 801a4b4:	2b02      	cmp	r3, #2
 801a4b6:	f001 8449 	beq.w	801bd4c <lv_theme_default_init+0x30c0>
 801a4ba:	4b71      	ldr	r3, [pc, #452]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a4bc:	68de      	ldr	r6, [r3, #12]
 801a4be:	4630      	mov	r0, r6
 801a4c0:	f006 fb04 	bl	8020acc <lv_disp_get_dpi>
 801a4c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a4c8:	0040      	lsls	r0, r0, #1
 801a4ca:	28ef      	cmp	r0, #239	; 0xef
 801a4cc:	f301 845b 	bgt.w	801bd86 <lv_theme_default_init+0x30fa>
 801a4d0:	2101      	movs	r1, #1
 801a4d2:	4620      	mov	r0, r4
 801a4d4:	f008 ffc8 	bl	8023468 <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 801a4d8:	4c6a      	ldr	r4, [pc, #424]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a4da:	6820      	ldr	r0, [r4, #0]
 801a4dc:	f500 7002 	add.w	r0, r0, #520	; 0x208
 801a4e0:	f7fe fb8c 	bl	8018bfc <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 801a4e4:	6824      	ldr	r4, [r4, #0]
 801a4e6:	f504 7402 	add.w	r4, r4, #520	; 0x208
 801a4ea:	4b67      	ldr	r3, [pc, #412]	; (801a688 <lv_theme_default_init+0x19fc>)
 801a4ec:	781b      	ldrb	r3, [r3, #0]
 801a4ee:	2b01      	cmp	r3, #1
 801a4f0:	f001 8459 	beq.w	801bda6 <lv_theme_default_init+0x311a>
 801a4f4:	2b02      	cmp	r3, #2
 801a4f6:	f001 8473 	beq.w	801bde0 <lv_theme_default_init+0x3154>
 801a4fa:	4b61      	ldr	r3, [pc, #388]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a4fc:	68de      	ldr	r6, [r3, #12]
 801a4fe:	4630      	mov	r0, r6
 801a500:	f006 fae4 	bl	8020acc <lv_disp_get_dpi>
 801a504:	0100      	lsls	r0, r0, #4
 801a506:	28ef      	cmp	r0, #239	; 0xef
 801a508:	f301 8487 	bgt.w	801be1a <lv_theme_default_init+0x318e>
 801a50c:	2101      	movs	r1, #1
 801a50e:	4620      	mov	r0, r4
 801a510:	f008 ff80 	bl	8023414 <lv_style_set_transform_width>
    style_init_reset(&styles->led);
 801a514:	4c5b      	ldr	r4, [pc, #364]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a516:	6820      	ldr	r0, [r4, #0]
 801a518:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801a51c:	f7fe fb6e 	bl	8018bfc <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 801a520:	6820      	ldr	r0, [r4, #0]
 801a522:	21ff      	movs	r1, #255	; 0xff
 801a524:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801a528:	f008 ffb0 	bl	802348c <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 801a52c:	6820      	ldr	r0, [r4, #0]
 801a52e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a532:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801a536:	f008 ff9d 	bl	8023474 <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 801a53a:	6826      	ldr	r6, [r4, #0]
 801a53c:	f506 760a 	add.w	r6, r6, #552	; 0x228
 801a540:	2012      	movs	r0, #18
 801a542:	f007 f937 	bl	80217b4 <lv_palette_main>
 801a546:	4601      	mov	r1, r0
 801a548:	4630      	mov	r0, r6
 801a54a:	f008 ffa5 	bl	8023498 <lv_style_set_bg_grad_color>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 801a54e:	6820      	ldr	r0, [r4, #0]
 801a550:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801a554:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801a558:	f009 f85e 	bl	8023618 <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 801a55c:	6824      	ldr	r4, [r4, #0]
 801a55e:	f504 740a 	add.w	r4, r4, #552	; 0x228
 801a562:	4b47      	ldr	r3, [pc, #284]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a564:	68de      	ldr	r6, [r3, #12]
 801a566:	4630      	mov	r0, r6
 801a568:	f006 fab0 	bl	8020acc <lv_disp_get_dpi>
 801a56c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801a570:	28ef      	cmp	r0, #239	; 0xef
 801a572:	f301 8465 	bgt.w	801be40 <lv_theme_default_init+0x31b4>
 801a576:	2101      	movs	r1, #1
 801a578:	4620      	mov	r0, r4
 801a57a:	f008 ffe1 	bl	8023540 <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 801a57e:	4c41      	ldr	r4, [pc, #260]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a580:	6820      	ldr	r0, [r4, #0]
 801a582:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a586:	f500 700a 	add.w	r0, r0, #552	; 0x228
 801a58a:	f008 ffeb 	bl	8023564 <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 801a58e:	6824      	ldr	r4, [r4, #0]
 801a590:	f504 740a 	add.w	r4, r4, #552	; 0x228
 801a594:	4b3a      	ldr	r3, [pc, #232]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a596:	68de      	ldr	r6, [r3, #12]
 801a598:	4630      	mov	r0, r6
 801a59a:	f006 fa97 	bl	8020acc <lv_disp_get_dpi>
 801a59e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a5a2:	28ef      	cmp	r0, #239	; 0xef
 801a5a4:	f301 845c 	bgt.w	801be60 <lv_theme_default_init+0x31d4>
 801a5a8:	2101      	movs	r1, #1
 801a5aa:	4620      	mov	r0, r4
 801a5ac:	f008 ffd4 	bl	8023558 <lv_style_set_shadow_spread>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 801a5b0:	b12d      	cbz	r5, 801a5be <lv_theme_default_init+0x1932>
 801a5b2:	4628      	mov	r0, r5
 801a5b4:	f7e9 fde0 	bl	8004178 <lv_disp_get_theme>
 801a5b8:	4b31      	ldr	r3, [pc, #196]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a5ba:	4283      	cmp	r3, r0
 801a5bc:	d102      	bne.n	801a5c4 <lv_theme_default_init+0x1938>
 801a5be:	2000      	movs	r0, #0
 801a5c0:	f7f0 fe7e 	bl	800b2c0 <lv_obj_report_style_change>
    inited = true;
 801a5c4:	4b32      	ldr	r3, [pc, #200]	; (801a690 <lv_theme_default_init+0x1a04>)
 801a5c6:	2201      	movs	r2, #1
 801a5c8:	701a      	strb	r2, [r3, #0]
}
 801a5ca:	482d      	ldr	r0, [pc, #180]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a5cc:	b002      	add	sp, #8
 801a5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        inited = false;
 801a5d2:	4b2f      	ldr	r3, [pc, #188]	; (801a690 <lv_theme_default_init+0x1a04>)
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 801a5d8:	f44f 700c 	mov.w	r0, #560	; 0x230
 801a5dc:	f007 fca6 	bl	8021f2c <lv_mem_alloc>
 801a5e0:	4b2c      	ldr	r3, [pc, #176]	; (801a694 <lv_theme_default_init+0x1a08>)
 801a5e2:	6018      	str	r0, [r3, #0]
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 801a5e4:	4b27      	ldr	r3, [pc, #156]	; (801a684 <lv_theme_default_init+0x19f8>)
 801a5e6:	6018      	str	r0, [r3, #0]
 801a5e8:	f7fe bb5d 	b.w	8018ca6 <lv_theme_default_init+0x1a>
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 801a5ec:	f006 fa40 	bl	8020a70 <lv_disp_get_default>
 801a5f0:	f006 fa44 	bl	8020a7c <lv_disp_get_hor_res>
 801a5f4:	f5b0 7f34 	cmp.w	r0, #720	; 0x2d0
 801a5f8:	4b23      	ldr	r3, [pc, #140]	; (801a688 <lv_theme_default_init+0x19fc>)
 801a5fa:	bfb4      	ite	lt
 801a5fc:	2202      	movlt	r2, #2
    else disp_size = DISP_LARGE;
 801a5fe:	2201      	movge	r2, #1
 801a600:	701a      	strb	r2, [r3, #0]
 801a602:	f7fe bb5b 	b.w	8018cbc <lv_theme_default_init+0x30>
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 801a606:	2104      	movs	r1, #4
 801a608:	2012      	movs	r0, #18
 801a60a:	f007 f8dd 	bl	80217c8 <lv_palette_lighten>
 801a60e:	4b22      	ldr	r3, [pc, #136]	; (801a698 <lv_theme_default_init+0x1a0c>)
 801a610:	8018      	strh	r0, [r3, #0]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 801a612:	4b1b      	ldr	r3, [pc, #108]	; (801a680 <lv_theme_default_init+0x19f4>)
 801a614:	6a1b      	ldr	r3, [r3, #32]
 801a616:	f013 0f01 	tst.w	r3, #1
 801a61a:	f47e ab61 	bne.w	8018ce0 <lv_theme_default_init+0x54>
 801a61e:	2104      	movs	r1, #4
 801a620:	2012      	movs	r0, #18
 801a622:	f007 f8e7 	bl	80217f4 <lv_palette_darken>
 801a626:	4b1d      	ldr	r3, [pc, #116]	; (801a69c <lv_theme_default_init+0x1a10>)
 801a628:	8018      	strh	r0, [r3, #0]
 801a62a:	f7fe bb5f 	b.w	8018cec <lv_theme_default_init+0x60>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 801a62e:	4b1c      	ldr	r3, [pc, #112]	; (801a6a0 <lv_theme_default_init+0x1a14>)
 801a630:	781a      	ldrb	r2, [r3, #0]
 801a632:	f042 021f 	orr.w	r2, r2, #31
 801a636:	701a      	strb	r2, [r3, #0]
 801a638:	881a      	ldrh	r2, [r3, #0]
 801a63a:	f442 62fc 	orr.w	r2, r2, #2016	; 0x7e0
 801a63e:	801a      	strh	r2, [r3, #0]
 801a640:	22ff      	movs	r2, #255	; 0xff
 801a642:	705a      	strb	r2, [r3, #1]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 801a644:	2102      	movs	r1, #2
 801a646:	2012      	movs	r0, #18
 801a648:	f007 f8be 	bl	80217c8 <lv_palette_lighten>
 801a64c:	4b0f      	ldr	r3, [pc, #60]	; (801a68c <lv_theme_default_init+0x1a00>)
 801a64e:	8018      	strh	r0, [r3, #0]
 801a650:	f7fe bb5a 	b.w	8018d08 <lv_theme_default_init+0x7c>
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 801a654:	2012      	movs	r0, #18
 801a656:	f007 f8ad 	bl	80217b4 <lv_palette_main>
 801a65a:	4601      	mov	r1, r0
 801a65c:	f7fe bb8f 	b.w	8018d7e <lv_theme_default_init+0xf2>
 801a660:	4620      	mov	r0, r4
 801a662:	f006 fa33 	bl	8020acc <lv_disp_get_dpi>
 801a666:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a66a:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a66e:	4a0d      	ldr	r2, [pc, #52]	; (801a6a4 <lv_theme_default_init+0x1a18>)
 801a670:	fb82 1203 	smull	r1, r2, r2, r3
 801a674:	17dc      	asrs	r4, r3, #31
 801a676:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a67a:	b224      	sxth	r4, r4
 801a67c:	f7fe bb97 	b.w	8018dae <lv_theme_default_init+0x122>
 801a680:	20002768 	.word	0x20002768
 801a684:	20002764 	.word	0x20002764
 801a688:	20002754 	.word	0x20002754
 801a68c:	20002740 	.word	0x20002740
 801a690:	20002760 	.word	0x20002760
 801a694:	2000297c 	.word	0x2000297c
 801a698:	20002744 	.word	0x20002744
 801a69c:	20002748 	.word	0x20002748
 801a6a0:	2000273c 	.word	0x2000273c
 801a6a4:	66666667 	.word	0x66666667
 801a6a8:	4630      	mov	r0, r6
 801a6aa:	f006 fa0f 	bl	8020acc <lv_disp_get_dpi>
 801a6ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a6b2:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801a6b6:	4ad1      	ldr	r2, [pc, #836]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a6b8:	fb82 1203 	smull	r1, r2, r2, r3
 801a6bc:	17d9      	asrs	r1, r3, #31
 801a6be:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a6c2:	b209      	sxth	r1, r1
 801a6c4:	f7fe bb91 	b.w	8018dea <lv_theme_default_init+0x15e>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 801a6c8:	4bcd      	ldr	r3, [pc, #820]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a6ca:	68de      	ldr	r6, [r3, #12]
 801a6cc:	4630      	mov	r0, r6
 801a6ce:	f006 f9fd 	bl	8020acc <lv_disp_get_dpi>
 801a6d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a6d6:	0040      	lsls	r0, r0, #1
 801a6d8:	28ef      	cmp	r0, #239	; 0xef
 801a6da:	dc02      	bgt.n	801a6e2 <lv_theme_default_init+0x1a56>
 801a6dc:	2101      	movs	r1, #1
 801a6de:	f7fe bbc1 	b.w	8018e64 <lv_theme_default_init+0x1d8>
 801a6e2:	4630      	mov	r0, r6
 801a6e4:	f006 f9f2 	bl	8020acc <lv_disp_get_dpi>
 801a6e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a6ec:	0043      	lsls	r3, r0, #1
 801a6ee:	3350      	adds	r3, #80	; 0x50
 801a6f0:	4ac2      	ldr	r2, [pc, #776]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a6f2:	fb82 1203 	smull	r1, r2, r2, r3
 801a6f6:	17d9      	asrs	r1, r3, #31
 801a6f8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a6fc:	b209      	sxth	r1, r1
 801a6fe:	f7fe bbb1 	b.w	8018e64 <lv_theme_default_init+0x1d8>
 801a702:	4bbf      	ldr	r3, [pc, #764]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a704:	68de      	ldr	r6, [r3, #12]
 801a706:	4630      	mov	r0, r6
 801a708:	f006 f9e0 	bl	8020acc <lv_disp_get_dpi>
 801a70c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a710:	0080      	lsls	r0, r0, #2
 801a712:	28ef      	cmp	r0, #239	; 0xef
 801a714:	dc02      	bgt.n	801a71c <lv_theme_default_init+0x1a90>
 801a716:	2101      	movs	r1, #1
 801a718:	f7fe bba4 	b.w	8018e64 <lv_theme_default_init+0x1d8>
 801a71c:	4630      	mov	r0, r6
 801a71e:	f006 f9d5 	bl	8020acc <lv_disp_get_dpi>
 801a722:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a726:	0083      	lsls	r3, r0, #2
 801a728:	3350      	adds	r3, #80	; 0x50
 801a72a:	4ab4      	ldr	r2, [pc, #720]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a72c:	fb82 1203 	smull	r1, r2, r2, r3
 801a730:	17d9      	asrs	r1, r3, #31
 801a732:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a736:	b209      	sxth	r1, r1
 801a738:	f7fe bb94 	b.w	8018e64 <lv_theme_default_init+0x1d8>
 801a73c:	4630      	mov	r0, r6
 801a73e:	f006 f9c5 	bl	8020acc <lv_disp_get_dpi>
 801a742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a746:	0043      	lsls	r3, r0, #1
 801a748:	3350      	adds	r3, #80	; 0x50
 801a74a:	4aac      	ldr	r2, [pc, #688]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a74c:	fb82 1203 	smull	r1, r2, r2, r3
 801a750:	17d9      	asrs	r1, r3, #31
 801a752:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a756:	b209      	sxth	r1, r1
 801a758:	f7fe bb84 	b.w	8018e64 <lv_theme_default_init+0x1d8>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 801a75c:	4ba8      	ldr	r3, [pc, #672]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a75e:	68de      	ldr	r6, [r3, #12]
 801a760:	4630      	mov	r0, r6
 801a762:	f006 f9b3 	bl	8020acc <lv_disp_get_dpi>
 801a766:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a76a:	0040      	lsls	r0, r0, #1
 801a76c:	28ef      	cmp	r0, #239	; 0xef
 801a76e:	dc02      	bgt.n	801a776 <lv_theme_default_init+0x1aea>
 801a770:	2101      	movs	r1, #1
 801a772:	f7fe bb90 	b.w	8018e96 <lv_theme_default_init+0x20a>
 801a776:	4630      	mov	r0, r6
 801a778:	f006 f9a8 	bl	8020acc <lv_disp_get_dpi>
 801a77c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a780:	0043      	lsls	r3, r0, #1
 801a782:	3350      	adds	r3, #80	; 0x50
 801a784:	4a9d      	ldr	r2, [pc, #628]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a786:	fb82 1203 	smull	r1, r2, r2, r3
 801a78a:	17d9      	asrs	r1, r3, #31
 801a78c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a790:	b209      	sxth	r1, r1
 801a792:	f7fe bb80 	b.w	8018e96 <lv_theme_default_init+0x20a>
 801a796:	4b9a      	ldr	r3, [pc, #616]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a798:	68de      	ldr	r6, [r3, #12]
 801a79a:	4630      	mov	r0, r6
 801a79c:	f006 f996 	bl	8020acc <lv_disp_get_dpi>
 801a7a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a7a4:	0080      	lsls	r0, r0, #2
 801a7a6:	28ef      	cmp	r0, #239	; 0xef
 801a7a8:	dc02      	bgt.n	801a7b0 <lv_theme_default_init+0x1b24>
 801a7aa:	2101      	movs	r1, #1
 801a7ac:	f7fe bb73 	b.w	8018e96 <lv_theme_default_init+0x20a>
 801a7b0:	4630      	mov	r0, r6
 801a7b2:	f006 f98b 	bl	8020acc <lv_disp_get_dpi>
 801a7b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a7ba:	0083      	lsls	r3, r0, #2
 801a7bc:	3350      	adds	r3, #80	; 0x50
 801a7be:	4a8f      	ldr	r2, [pc, #572]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a7c0:	fb82 1203 	smull	r1, r2, r2, r3
 801a7c4:	17d9      	asrs	r1, r3, #31
 801a7c6:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a7ca:	b209      	sxth	r1, r1
 801a7cc:	f7fe bb63 	b.w	8018e96 <lv_theme_default_init+0x20a>
 801a7d0:	4630      	mov	r0, r6
 801a7d2:	f006 f97b 	bl	8020acc <lv_disp_get_dpi>
 801a7d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a7da:	0043      	lsls	r3, r0, #1
 801a7dc:	3350      	adds	r3, #80	; 0x50
 801a7de:	4a87      	ldr	r2, [pc, #540]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a7e0:	fb82 1203 	smull	r1, r2, r2, r3
 801a7e4:	17d9      	asrs	r1, r3, #31
 801a7e6:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a7ea:	b209      	sxth	r1, r1
 801a7ec:	f7fe bb53 	b.w	8018e96 <lv_theme_default_init+0x20a>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 801a7f0:	4b83      	ldr	r3, [pc, #524]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a7f2:	68de      	ldr	r6, [r3, #12]
 801a7f4:	4630      	mov	r0, r6
 801a7f6:	f006 f969 	bl	8020acc <lv_disp_get_dpi>
 801a7fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a7fe:	0080      	lsls	r0, r0, #2
 801a800:	28ef      	cmp	r0, #239	; 0xef
 801a802:	dc02      	bgt.n	801a80a <lv_theme_default_init+0x1b7e>
 801a804:	2101      	movs	r1, #1
 801a806:	f7fe bb5f 	b.w	8018ec8 <lv_theme_default_init+0x23c>
 801a80a:	4630      	mov	r0, r6
 801a80c:	f006 f95e 	bl	8020acc <lv_disp_get_dpi>
 801a810:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a814:	0083      	lsls	r3, r0, #2
 801a816:	3350      	adds	r3, #80	; 0x50
 801a818:	4a78      	ldr	r2, [pc, #480]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a81a:	fb82 1203 	smull	r1, r2, r2, r3
 801a81e:	17d9      	asrs	r1, r3, #31
 801a820:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a824:	b209      	sxth	r1, r1
 801a826:	f7fe bb4f 	b.w	8018ec8 <lv_theme_default_init+0x23c>
 801a82a:	4630      	mov	r0, r6
 801a82c:	f006 f94e 	bl	8020acc <lv_disp_get_dpi>
 801a830:	00c3      	lsls	r3, r0, #3
 801a832:	3350      	adds	r3, #80	; 0x50
 801a834:	4a71      	ldr	r2, [pc, #452]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a836:	fb82 1203 	smull	r1, r2, r2, r3
 801a83a:	17d9      	asrs	r1, r3, #31
 801a83c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a840:	b209      	sxth	r1, r1
 801a842:	f7fe bb41 	b.w	8018ec8 <lv_theme_default_init+0x23c>
 801a846:	4630      	mov	r0, r6
 801a848:	f006 f940 	bl	8020acc <lv_disp_get_dpi>
 801a84c:	0043      	lsls	r3, r0, #1
 801a84e:	3350      	adds	r3, #80	; 0x50
 801a850:	4a6a      	ldr	r2, [pc, #424]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a852:	fb82 1203 	smull	r1, r2, r2, r3
 801a856:	17d9      	asrs	r1, r3, #31
 801a858:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a85c:	b209      	sxth	r1, r1
 801a85e:	f7fe bb54 	b.w	8018f0a <lv_theme_default_init+0x27e>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 801a862:	4b67      	ldr	r3, [pc, #412]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a864:	68dc      	ldr	r4, [r3, #12]
 801a866:	4620      	mov	r0, r4
 801a868:	f006 f930 	bl	8020acc <lv_disp_get_dpi>
 801a86c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a870:	00c0      	lsls	r0, r0, #3
 801a872:	28ef      	cmp	r0, #239	; 0xef
 801a874:	dc02      	bgt.n	801a87c <lv_theme_default_init+0x1bf0>
 801a876:	2401      	movs	r4, #1
 801a878:	f7fe bb6a 	b.w	8018f50 <lv_theme_default_init+0x2c4>
 801a87c:	4620      	mov	r0, r4
 801a87e:	f006 f925 	bl	8020acc <lv_disp_get_dpi>
 801a882:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a886:	00c3      	lsls	r3, r0, #3
 801a888:	3350      	adds	r3, #80	; 0x50
 801a88a:	4a5c      	ldr	r2, [pc, #368]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a88c:	fb82 1203 	smull	r1, r2, r2, r3
 801a890:	17dc      	asrs	r4, r3, #31
 801a892:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a896:	b224      	sxth	r4, r4
 801a898:	f7fe bb5a 	b.w	8018f50 <lv_theme_default_init+0x2c4>
 801a89c:	4b58      	ldr	r3, [pc, #352]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a89e:	68dc      	ldr	r4, [r3, #12]
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	f006 f913 	bl	8020acc <lv_disp_get_dpi>
 801a8a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a8aa:	0080      	lsls	r0, r0, #2
 801a8ac:	28ef      	cmp	r0, #239	; 0xef
 801a8ae:	dc02      	bgt.n	801a8b6 <lv_theme_default_init+0x1c2a>
 801a8b0:	2401      	movs	r4, #1
 801a8b2:	f7fe bb4d 	b.w	8018f50 <lv_theme_default_init+0x2c4>
 801a8b6:	4620      	mov	r0, r4
 801a8b8:	f006 f908 	bl	8020acc <lv_disp_get_dpi>
 801a8bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a8c0:	0083      	lsls	r3, r0, #2
 801a8c2:	3350      	adds	r3, #80	; 0x50
 801a8c4:	4a4d      	ldr	r2, [pc, #308]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a8c6:	fb82 1203 	smull	r1, r2, r2, r3
 801a8ca:	17dc      	asrs	r4, r3, #31
 801a8cc:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a8d0:	b224      	sxth	r4, r4
 801a8d2:	f7fe bb3d 	b.w	8018f50 <lv_theme_default_init+0x2c4>
 801a8d6:	4620      	mov	r0, r4
 801a8d8:	f006 f8f8 	bl	8020acc <lv_disp_get_dpi>
 801a8dc:	0103      	lsls	r3, r0, #4
 801a8de:	3350      	adds	r3, #80	; 0x50
 801a8e0:	4a46      	ldr	r2, [pc, #280]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a8e2:	fb82 1203 	smull	r1, r2, r2, r3
 801a8e6:	17dc      	asrs	r4, r3, #31
 801a8e8:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801a8ec:	b224      	sxth	r4, r4
 801a8ee:	f7fe bb2f 	b.w	8018f50 <lv_theme_default_init+0x2c4>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 801a8f2:	4b43      	ldr	r3, [pc, #268]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a8f4:	68de      	ldr	r6, [r3, #12]
 801a8f6:	4630      	mov	r0, r6
 801a8f8:	f006 f8e8 	bl	8020acc <lv_disp_get_dpi>
 801a8fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a900:	0040      	lsls	r0, r0, #1
 801a902:	28ef      	cmp	r0, #239	; 0xef
 801a904:	dc02      	bgt.n	801a90c <lv_theme_default_init+0x1c80>
 801a906:	2101      	movs	r1, #1
 801a908:	f7fe bb65 	b.w	8018fd6 <lv_theme_default_init+0x34a>
 801a90c:	4630      	mov	r0, r6
 801a90e:	f006 f8dd 	bl	8020acc <lv_disp_get_dpi>
 801a912:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a916:	0043      	lsls	r3, r0, #1
 801a918:	3350      	adds	r3, #80	; 0x50
 801a91a:	4a38      	ldr	r2, [pc, #224]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a91c:	fb82 1203 	smull	r1, r2, r2, r3
 801a920:	17d9      	asrs	r1, r3, #31
 801a922:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a926:	b209      	sxth	r1, r1
 801a928:	f7fe bb55 	b.w	8018fd6 <lv_theme_default_init+0x34a>
 801a92c:	4b34      	ldr	r3, [pc, #208]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a92e:	68de      	ldr	r6, [r3, #12]
 801a930:	4630      	mov	r0, r6
 801a932:	f006 f8cb 	bl	8020acc <lv_disp_get_dpi>
 801a936:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a93a:	0080      	lsls	r0, r0, #2
 801a93c:	28ef      	cmp	r0, #239	; 0xef
 801a93e:	dc02      	bgt.n	801a946 <lv_theme_default_init+0x1cba>
 801a940:	2101      	movs	r1, #1
 801a942:	f7fe bb48 	b.w	8018fd6 <lv_theme_default_init+0x34a>
 801a946:	4630      	mov	r0, r6
 801a948:	f006 f8c0 	bl	8020acc <lv_disp_get_dpi>
 801a94c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a950:	0083      	lsls	r3, r0, #2
 801a952:	3350      	adds	r3, #80	; 0x50
 801a954:	4a29      	ldr	r2, [pc, #164]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a956:	fb82 1203 	smull	r1, r2, r2, r3
 801a95a:	17d9      	asrs	r1, r3, #31
 801a95c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a960:	b209      	sxth	r1, r1
 801a962:	f7fe bb38 	b.w	8018fd6 <lv_theme_default_init+0x34a>
 801a966:	4630      	mov	r0, r6
 801a968:	f006 f8b0 	bl	8020acc <lv_disp_get_dpi>
 801a96c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801a970:	0043      	lsls	r3, r0, #1
 801a972:	3350      	adds	r3, #80	; 0x50
 801a974:	4a21      	ldr	r2, [pc, #132]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a976:	fb82 1203 	smull	r1, r2, r2, r3
 801a97a:	17d9      	asrs	r1, r3, #31
 801a97c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a980:	b209      	sxth	r1, r1
 801a982:	f7fe bb28 	b.w	8018fd6 <lv_theme_default_init+0x34a>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 801a986:	4b1e      	ldr	r3, [pc, #120]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a988:	68de      	ldr	r6, [r3, #12]
 801a98a:	4630      	mov	r0, r6
 801a98c:	f006 f89e 	bl	8020acc <lv_disp_get_dpi>
 801a990:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a994:	0040      	lsls	r0, r0, #1
 801a996:	28ef      	cmp	r0, #239	; 0xef
 801a998:	dc02      	bgt.n	801a9a0 <lv_theme_default_init+0x1d14>
 801a99a:	2101      	movs	r1, #1
 801a99c:	f7fe bb35 	b.w	801900a <lv_theme_default_init+0x37e>
 801a9a0:	4630      	mov	r0, r6
 801a9a2:	f006 f893 	bl	8020acc <lv_disp_get_dpi>
 801a9a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a9aa:	0043      	lsls	r3, r0, #1
 801a9ac:	3350      	adds	r3, #80	; 0x50
 801a9ae:	4a13      	ldr	r2, [pc, #76]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a9b0:	fb82 1203 	smull	r1, r2, r2, r3
 801a9b4:	17d9      	asrs	r1, r3, #31
 801a9b6:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a9ba:	b209      	sxth	r1, r1
 801a9bc:	f7fe bb25 	b.w	801900a <lv_theme_default_init+0x37e>
 801a9c0:	4b0f      	ldr	r3, [pc, #60]	; (801aa00 <lv_theme_default_init+0x1d74>)
 801a9c2:	68de      	ldr	r6, [r3, #12]
 801a9c4:	4630      	mov	r0, r6
 801a9c6:	f006 f881 	bl	8020acc <lv_disp_get_dpi>
 801a9ca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a9ce:	0080      	lsls	r0, r0, #2
 801a9d0:	28ef      	cmp	r0, #239	; 0xef
 801a9d2:	dc02      	bgt.n	801a9da <lv_theme_default_init+0x1d4e>
 801a9d4:	2101      	movs	r1, #1
 801a9d6:	f7fe bb18 	b.w	801900a <lv_theme_default_init+0x37e>
 801a9da:	4630      	mov	r0, r6
 801a9dc:	f006 f876 	bl	8020acc <lv_disp_get_dpi>
 801a9e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a9e4:	0083      	lsls	r3, r0, #2
 801a9e6:	3350      	adds	r3, #80	; 0x50
 801a9e8:	4a04      	ldr	r2, [pc, #16]	; (801a9fc <lv_theme_default_init+0x1d70>)
 801a9ea:	fb82 1203 	smull	r1, r2, r2, r3
 801a9ee:	17d9      	asrs	r1, r3, #31
 801a9f0:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801a9f4:	b209      	sxth	r1, r1
 801a9f6:	f7fe bb08 	b.w	801900a <lv_theme_default_init+0x37e>
 801a9fa:	bf00      	nop
 801a9fc:	66666667 	.word	0x66666667
 801aa00:	20002768 	.word	0x20002768
 801aa04:	4630      	mov	r0, r6
 801aa06:	f006 f861 	bl	8020acc <lv_disp_get_dpi>
 801aa0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801aa0e:	0043      	lsls	r3, r0, #1
 801aa10:	3350      	adds	r3, #80	; 0x50
 801aa12:	4ace      	ldr	r2, [pc, #824]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aa14:	fb82 1203 	smull	r1, r2, r2, r3
 801aa18:	17d9      	asrs	r1, r3, #31
 801aa1a:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aa1e:	b209      	sxth	r1, r1
 801aa20:	f7fe baf3 	b.w	801900a <lv_theme_default_init+0x37e>
 801aa24:	4630      	mov	r0, r6
 801aa26:	f006 f851 	bl	8020acc <lv_disp_get_dpi>
 801aa2a:	3050      	adds	r0, #80	; 0x50
 801aa2c:	4bc7      	ldr	r3, [pc, #796]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aa2e:	fb83 2300 	smull	r2, r3, r3, r0
 801aa32:	17c1      	asrs	r1, r0, #31
 801aa34:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801aa38:	b209      	sxth	r1, r1
 801aa3a:	f7fe bafe 	b.w	801903a <lv_theme_default_init+0x3ae>
 801aa3e:	4630      	mov	r0, r6
 801aa40:	f006 f844 	bl	8020acc <lv_disp_get_dpi>
 801aa44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa48:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801aa4c:	4abf      	ldr	r2, [pc, #764]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aa4e:	fb82 1203 	smull	r1, r2, r2, r3
 801aa52:	17d9      	asrs	r1, r3, #31
 801aa54:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aa58:	b209      	sxth	r1, r1
 801aa5a:	f7fe bb08 	b.w	801906e <lv_theme_default_init+0x3e2>
 801aa5e:	4630      	mov	r0, r6
 801aa60:	f006 f834 	bl	8020acc <lv_disp_get_dpi>
 801aa64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa68:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801aa6c:	4ab7      	ldr	r2, [pc, #732]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aa6e:	fb82 1203 	smull	r1, r2, r2, r3
 801aa72:	17d9      	asrs	r1, r3, #31
 801aa74:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aa78:	b209      	sxth	r1, r1
 801aa7a:	f7fe bb09 	b.w	8019090 <lv_theme_default_init+0x404>
 801aa7e:	4630      	mov	r0, r6
 801aa80:	f006 f824 	bl	8020acc <lv_disp_get_dpi>
 801aa84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa88:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801aa8c:	4aaf      	ldr	r2, [pc, #700]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aa8e:	fb82 1203 	smull	r1, r2, r2, r3
 801aa92:	17d9      	asrs	r1, r3, #31
 801aa94:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aa98:	b209      	sxth	r1, r1
 801aa9a:	f7fe bb18 	b.w	80190ce <lv_theme_default_init+0x442>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 801aa9e:	4bac      	ldr	r3, [pc, #688]	; (801ad50 <lv_theme_default_init+0x20c4>)
 801aaa0:	68de      	ldr	r6, [r3, #12]
 801aaa2:	4630      	mov	r0, r6
 801aaa4:	f006 f812 	bl	8020acc <lv_disp_get_dpi>
 801aaa8:	0100      	lsls	r0, r0, #4
 801aaaa:	28ef      	cmp	r0, #239	; 0xef
 801aaac:	dc02      	bgt.n	801aab4 <lv_theme_default_init+0x1e28>
 801aaae:	2101      	movs	r1, #1
 801aab0:	f7fe bb2e 	b.w	8019110 <lv_theme_default_init+0x484>
 801aab4:	4630      	mov	r0, r6
 801aab6:	f006 f809 	bl	8020acc <lv_disp_get_dpi>
 801aaba:	0100      	lsls	r0, r0, #4
 801aabc:	3050      	adds	r0, #80	; 0x50
 801aabe:	4ba3      	ldr	r3, [pc, #652]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aac0:	fb83 2300 	smull	r2, r3, r3, r0
 801aac4:	17c1      	asrs	r1, r0, #31
 801aac6:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801aaca:	b209      	sxth	r1, r1
 801aacc:	f7fe bb20 	b.w	8019110 <lv_theme_default_init+0x484>
                                                                             16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 801aad0:	4b9f      	ldr	r3, [pc, #636]	; (801ad50 <lv_theme_default_init+0x20c4>)
 801aad2:	68de      	ldr	r6, [r3, #12]
 801aad4:	4630      	mov	r0, r6
 801aad6:	f005 fff9 	bl	8020acc <lv_disp_get_dpi>
 801aada:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aade:	0080      	lsls	r0, r0, #2
 801aae0:	28ef      	cmp	r0, #239	; 0xef
 801aae2:	dc02      	bgt.n	801aaea <lv_theme_default_init+0x1e5e>
 801aae4:	2101      	movs	r1, #1
 801aae6:	f7fe bb13 	b.w	8019110 <lv_theme_default_init+0x484>
 801aaea:	4630      	mov	r0, r6
 801aaec:	f005 ffee 	bl	8020acc <lv_disp_get_dpi>
 801aaf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aaf4:	0083      	lsls	r3, r0, #2
 801aaf6:	3350      	adds	r3, #80	; 0x50
 801aaf8:	4a94      	ldr	r2, [pc, #592]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aafa:	fb82 1203 	smull	r1, r2, r2, r3
 801aafe:	17d9      	asrs	r1, r3, #31
 801ab00:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ab04:	b209      	sxth	r1, r1
 801ab06:	f7fe bb03 	b.w	8019110 <lv_theme_default_init+0x484>
 801ab0a:	4630      	mov	r0, r6
 801ab0c:	f005 ffde 	bl	8020acc <lv_disp_get_dpi>
 801ab10:	00c3      	lsls	r3, r0, #3
 801ab12:	3350      	adds	r3, #80	; 0x50
 801ab14:	4a8d      	ldr	r2, [pc, #564]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801ab16:	fb82 1203 	smull	r1, r2, r2, r3
 801ab1a:	17d9      	asrs	r1, r3, #31
 801ab1c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ab20:	b209      	sxth	r1, r1
 801ab22:	f7fe baf5 	b.w	8019110 <lv_theme_default_init+0x484>
        lv_style_set_shadow_color(&styles->btn, lv_palette_main(LV_PALETTE_GREY));
 801ab26:	4626      	mov	r6, r4
 801ab28:	6824      	ldr	r4, [r4, #0]
 801ab2a:	3420      	adds	r4, #32
 801ab2c:	2012      	movs	r0, #18
 801ab2e:	f006 fe41 	bl	80217b4 <lv_palette_main>
 801ab32:	4601      	mov	r1, r0
 801ab34:	4620      	mov	r0, r4
 801ab36:	f008 fd15 	bl	8023564 <lv_style_set_shadow_color>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 801ab3a:	6834      	ldr	r4, [r6, #0]
 801ab3c:	3420      	adds	r4, #32
 801ab3e:	2000      	movs	r0, #0
 801ab40:	f005 ffc4 	bl	8020acc <lv_disp_get_dpi>
 801ab44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab48:	28ef      	cmp	r0, #239	; 0xef
 801ab4a:	dc1c      	bgt.n	801ab86 <lv_theme_default_init+0x1efa>
 801ab4c:	2101      	movs	r1, #1
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f008 fcf6 	bl	8023540 <lv_style_set_shadow_width>
        lv_style_set_shadow_opa(&styles->btn, LV_OPA_50);
 801ab54:	4c7f      	ldr	r4, [pc, #508]	; (801ad54 <lv_theme_default_init+0x20c8>)
 801ab56:	6820      	ldr	r0, [r4, #0]
 801ab58:	217f      	movs	r1, #127	; 0x7f
 801ab5a:	3020      	adds	r0, #32
 801ab5c:	f008 fd0e 	bl	802357c <lv_style_set_shadow_opa>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 801ab60:	6826      	ldr	r6, [r4, #0]
 801ab62:	3620      	adds	r6, #32
 801ab64:	4b7a      	ldr	r3, [pc, #488]	; (801ad50 <lv_theme_default_init+0x20c4>)
 801ab66:	68df      	ldr	r7, [r3, #12]
 801ab68:	2000      	movs	r0, #0
 801ab6a:	f005 ffaf 	bl	8020acc <lv_disp_get_dpi>
 801ab6e:	283b      	cmp	r0, #59	; 0x3b
 801ab70:	dc18      	bgt.n	801aba4 <lv_theme_default_init+0x1f18>
 801ab72:	2401      	movs	r4, #1
 801ab74:	4638      	mov	r0, r7
 801ab76:	f005 ffa9 	bl	8020acc <lv_disp_get_dpi>
 801ab7a:	fb04 f000 	mul.w	r0, r4, r0
 801ab7e:	28ef      	cmp	r0, #239	; 0xef
 801ab80:	dc23      	bgt.n	801abca <lv_theme_default_init+0x1f3e>
 801ab82:	2401      	movs	r4, #1
 801ab84:	e01b      	b.n	801abbe <lv_theme_default_init+0x1f32>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 801ab86:	2000      	movs	r0, #0
 801ab88:	f005 ffa0 	bl	8020acc <lv_disp_get_dpi>
 801ab8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab90:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801ab94:	4a6d      	ldr	r2, [pc, #436]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801ab96:	fb82 1203 	smull	r1, r2, r2, r3
 801ab9a:	17d9      	asrs	r1, r3, #31
 801ab9c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aba0:	b209      	sxth	r1, r1
 801aba2:	e7d4      	b.n	801ab4e <lv_theme_default_init+0x1ec2>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 801aba4:	2000      	movs	r0, #0
 801aba6:	f005 ff91 	bl	8020acc <lv_disp_get_dpi>
 801abaa:	3014      	adds	r0, #20
 801abac:	4b67      	ldr	r3, [pc, #412]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801abae:	fb83 2300 	smull	r2, r3, r3, r0
 801abb2:	17c4      	asrs	r4, r0, #31
 801abb4:	ebc4 1423 	rsb	r4, r4, r3, asr #4
 801abb8:	b224      	sxth	r4, r4
 801abba:	2c00      	cmp	r4, #0
 801abbc:	d1da      	bne.n	801ab74 <lv_theme_default_init+0x1ee8>
 801abbe:	4621      	mov	r1, r4
 801abc0:	4630      	mov	r0, r6
 801abc2:	f008 fcc3 	bl	802354c <lv_style_set_shadow_ofs_y>
 801abc6:	f7fe bab8 	b.w	801913a <lv_theme_default_init+0x4ae>
 801abca:	4638      	mov	r0, r7
 801abcc:	f005 ff7e 	bl	8020acc <lv_disp_get_dpi>
 801abd0:	fb00 f404 	mul.w	r4, r0, r4
 801abd4:	3450      	adds	r4, #80	; 0x50
 801abd6:	4b5d      	ldr	r3, [pc, #372]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801abd8:	fb83 2304 	smull	r2, r3, r3, r4
 801abdc:	17e4      	asrs	r4, r4, #31
 801abde:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801abe2:	b224      	sxth	r4, r4
 801abe4:	e7eb      	b.n	801abbe <lv_theme_default_init+0x1f32>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 801abe6:	4b5a      	ldr	r3, [pc, #360]	; (801ad50 <lv_theme_default_init+0x20c4>)
 801abe8:	68dc      	ldr	r4, [r3, #12]
 801abea:	4620      	mov	r0, r4
 801abec:	f005 ff6e 	bl	8020acc <lv_disp_get_dpi>
 801abf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801abf4:	00c0      	lsls	r0, r0, #3
 801abf6:	28ef      	cmp	r0, #239	; 0xef
 801abf8:	dc02      	bgt.n	801ac00 <lv_theme_default_init+0x1f74>
 801abfa:	2401      	movs	r4, #1
 801abfc:	f7fe bab8 	b.w	8019170 <lv_theme_default_init+0x4e4>
 801ac00:	4620      	mov	r0, r4
 801ac02:	f005 ff63 	bl	8020acc <lv_disp_get_dpi>
 801ac06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ac0a:	00c3      	lsls	r3, r0, #3
 801ac0c:	3350      	adds	r3, #80	; 0x50
 801ac0e:	4a4f      	ldr	r2, [pc, #316]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801ac10:	fb82 1203 	smull	r1, r2, r2, r3
 801ac14:	17dc      	asrs	r4, r3, #31
 801ac16:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ac1a:	b224      	sxth	r4, r4
 801ac1c:	f7fe baa8 	b.w	8019170 <lv_theme_default_init+0x4e4>
 801ac20:	4b4b      	ldr	r3, [pc, #300]	; (801ad50 <lv_theme_default_init+0x20c4>)
 801ac22:	68dc      	ldr	r4, [r3, #12]
 801ac24:	4620      	mov	r0, r4
 801ac26:	f005 ff51 	bl	8020acc <lv_disp_get_dpi>
 801ac2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ac2e:	0080      	lsls	r0, r0, #2
 801ac30:	28ef      	cmp	r0, #239	; 0xef
 801ac32:	dc02      	bgt.n	801ac3a <lv_theme_default_init+0x1fae>
 801ac34:	2401      	movs	r4, #1
 801ac36:	f7fe ba9b 	b.w	8019170 <lv_theme_default_init+0x4e4>
 801ac3a:	4620      	mov	r0, r4
 801ac3c:	f005 ff46 	bl	8020acc <lv_disp_get_dpi>
 801ac40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ac44:	0083      	lsls	r3, r0, #2
 801ac46:	3350      	adds	r3, #80	; 0x50
 801ac48:	4a40      	ldr	r2, [pc, #256]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801ac4a:	fb82 1203 	smull	r1, r2, r2, r3
 801ac4e:	17dc      	asrs	r4, r3, #31
 801ac50:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ac54:	b224      	sxth	r4, r4
 801ac56:	f7fe ba8b 	b.w	8019170 <lv_theme_default_init+0x4e4>
 801ac5a:	4620      	mov	r0, r4
 801ac5c:	f005 ff36 	bl	8020acc <lv_disp_get_dpi>
 801ac60:	0103      	lsls	r3, r0, #4
 801ac62:	3350      	adds	r3, #80	; 0x50
 801ac64:	4a39      	ldr	r2, [pc, #228]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801ac66:	fb82 1203 	smull	r1, r2, r2, r3
 801ac6a:	17dc      	asrs	r4, r3, #31
 801ac6c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ac70:	b224      	sxth	r4, r4
 801ac72:	f7fe ba7d 	b.w	8019170 <lv_theme_default_init+0x4e4>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 801ac76:	4b36      	ldr	r3, [pc, #216]	; (801ad50 <lv_theme_default_init+0x20c4>)
 801ac78:	68dc      	ldr	r4, [r3, #12]
 801ac7a:	4620      	mov	r0, r4
 801ac7c:	f005 ff26 	bl	8020acc <lv_disp_get_dpi>
 801ac80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801ac84:	0040      	lsls	r0, r0, #1
 801ac86:	28ef      	cmp	r0, #239	; 0xef
 801ac88:	dc02      	bgt.n	801ac90 <lv_theme_default_init+0x2004>
 801ac8a:	2401      	movs	r4, #1
 801ac8c:	f7fe ba8f 	b.w	80191ae <lv_theme_default_init+0x522>
 801ac90:	4620      	mov	r0, r4
 801ac92:	f005 ff1b 	bl	8020acc <lv_disp_get_dpi>
 801ac96:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801ac9a:	0043      	lsls	r3, r0, #1
 801ac9c:	3350      	adds	r3, #80	; 0x50
 801ac9e:	4a2b      	ldr	r2, [pc, #172]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801aca0:	fb82 1203 	smull	r1, r2, r2, r3
 801aca4:	17dc      	asrs	r4, r3, #31
 801aca6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801acaa:	b224      	sxth	r4, r4
 801acac:	f7fe ba7f 	b.w	80191ae <lv_theme_default_init+0x522>
 801acb0:	4b27      	ldr	r3, [pc, #156]	; (801ad50 <lv_theme_default_init+0x20c4>)
 801acb2:	68dc      	ldr	r4, [r3, #12]
 801acb4:	4620      	mov	r0, r4
 801acb6:	f005 ff09 	bl	8020acc <lv_disp_get_dpi>
 801acba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801acbe:	0080      	lsls	r0, r0, #2
 801acc0:	28ef      	cmp	r0, #239	; 0xef
 801acc2:	dc02      	bgt.n	801acca <lv_theme_default_init+0x203e>
 801acc4:	2401      	movs	r4, #1
 801acc6:	f7fe ba72 	b.w	80191ae <lv_theme_default_init+0x522>
 801acca:	4620      	mov	r0, r4
 801accc:	f005 fefe 	bl	8020acc <lv_disp_get_dpi>
 801acd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801acd4:	0083      	lsls	r3, r0, #2
 801acd6:	3350      	adds	r3, #80	; 0x50
 801acd8:	4a1c      	ldr	r2, [pc, #112]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801acda:	fb82 1203 	smull	r1, r2, r2, r3
 801acde:	17dc      	asrs	r4, r3, #31
 801ace0:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ace4:	b224      	sxth	r4, r4
 801ace6:	f7fe ba62 	b.w	80191ae <lv_theme_default_init+0x522>
 801acea:	4620      	mov	r0, r4
 801acec:	f005 feee 	bl	8020acc <lv_disp_get_dpi>
 801acf0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801acf4:	0043      	lsls	r3, r0, #1
 801acf6:	3350      	adds	r3, #80	; 0x50
 801acf8:	4a14      	ldr	r2, [pc, #80]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801acfa:	fb82 1203 	smull	r1, r2, r2, r3
 801acfe:	17dc      	asrs	r4, r3, #31
 801ad00:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ad04:	b224      	sxth	r4, r4
 801ad06:	f7fe ba52 	b.w	80191ae <lv_theme_default_init+0x522>
 801ad0a:	4630      	mov	r0, r6
 801ad0c:	f005 fede 	bl	8020acc <lv_disp_get_dpi>
 801ad10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ad14:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801ad18:	4a0c      	ldr	r2, [pc, #48]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801ad1a:	fb82 1203 	smull	r1, r2, r2, r3
 801ad1e:	17d9      	asrs	r1, r3, #31
 801ad20:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ad24:	b209      	sxth	r1, r1
 801ad26:	f7fe ba58 	b.w	80191da <lv_theme_default_init+0x54e>
 801ad2a:	4630      	mov	r0, r6
 801ad2c:	f005 fece 	bl	8020acc <lv_disp_get_dpi>
 801ad30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ad34:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801ad38:	4a04      	ldr	r2, [pc, #16]	; (801ad4c <lv_theme_default_init+0x20c0>)
 801ad3a:	fb82 1203 	smull	r1, r2, r2, r3
 801ad3e:	17d9      	asrs	r1, r3, #31
 801ad40:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ad44:	b209      	sxth	r1, r1
 801ad46:	f7fe ba59 	b.w	80191fc <lv_theme_default_init+0x570>
 801ad4a:	bf00      	nop
 801ad4c:	66666667 	.word	0x66666667
 801ad50:	20002768 	.word	0x20002768
 801ad54:	20002764 	.word	0x20002764
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 801ad58:	4bd3      	ldr	r3, [pc, #844]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801ad5a:	68dc      	ldr	r4, [r3, #12]
 801ad5c:	4620      	mov	r0, r4
 801ad5e:	f005 feb5 	bl	8020acc <lv_disp_get_dpi>
 801ad62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ad66:	00c0      	lsls	r0, r0, #3
 801ad68:	28ef      	cmp	r0, #239	; 0xef
 801ad6a:	dc02      	bgt.n	801ad72 <lv_theme_default_init+0x20e6>
 801ad6c:	2401      	movs	r4, #1
 801ad6e:	f7fe ba91 	b.w	8019294 <lv_theme_default_init+0x608>
 801ad72:	4620      	mov	r0, r4
 801ad74:	f005 feaa 	bl	8020acc <lv_disp_get_dpi>
 801ad78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ad7c:	00c3      	lsls	r3, r0, #3
 801ad7e:	3350      	adds	r3, #80	; 0x50
 801ad80:	4aca      	ldr	r2, [pc, #808]	; (801b0ac <lv_theme_default_init+0x2420>)
 801ad82:	fb82 1203 	smull	r1, r2, r2, r3
 801ad86:	17dc      	asrs	r4, r3, #31
 801ad88:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ad8c:	b224      	sxth	r4, r4
 801ad8e:	f7fe ba81 	b.w	8019294 <lv_theme_default_init+0x608>
 801ad92:	4bc5      	ldr	r3, [pc, #788]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801ad94:	68dc      	ldr	r4, [r3, #12]
 801ad96:	4620      	mov	r0, r4
 801ad98:	f005 fe98 	bl	8020acc <lv_disp_get_dpi>
 801ad9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ada0:	0080      	lsls	r0, r0, #2
 801ada2:	28ef      	cmp	r0, #239	; 0xef
 801ada4:	dc02      	bgt.n	801adac <lv_theme_default_init+0x2120>
 801ada6:	2401      	movs	r4, #1
 801ada8:	f7fe ba74 	b.w	8019294 <lv_theme_default_init+0x608>
 801adac:	4620      	mov	r0, r4
 801adae:	f005 fe8d 	bl	8020acc <lv_disp_get_dpi>
 801adb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801adb6:	0083      	lsls	r3, r0, #2
 801adb8:	3350      	adds	r3, #80	; 0x50
 801adba:	4abc      	ldr	r2, [pc, #752]	; (801b0ac <lv_theme_default_init+0x2420>)
 801adbc:	fb82 1203 	smull	r1, r2, r2, r3
 801adc0:	17dc      	asrs	r4, r3, #31
 801adc2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801adc6:	b224      	sxth	r4, r4
 801adc8:	f7fe ba64 	b.w	8019294 <lv_theme_default_init+0x608>
 801adcc:	4620      	mov	r0, r4
 801adce:	f005 fe7d 	bl	8020acc <lv_disp_get_dpi>
 801add2:	0103      	lsls	r3, r0, #4
 801add4:	3350      	adds	r3, #80	; 0x50
 801add6:	4ab5      	ldr	r2, [pc, #724]	; (801b0ac <lv_theme_default_init+0x2420>)
 801add8:	fb82 1203 	smull	r1, r2, r2, r3
 801addc:	17dc      	asrs	r4, r3, #31
 801adde:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ade2:	b224      	sxth	r4, r4
 801ade4:	f7fe ba56 	b.w	8019294 <lv_theme_default_init+0x608>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 801ade8:	4baf      	ldr	r3, [pc, #700]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801adea:	68de      	ldr	r6, [r3, #12]
 801adec:	4630      	mov	r0, r6
 801adee:	f005 fe6d 	bl	8020acc <lv_disp_get_dpi>
 801adf2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801adf6:	00c0      	lsls	r0, r0, #3
 801adf8:	28ef      	cmp	r0, #239	; 0xef
 801adfa:	dc02      	bgt.n	801ae02 <lv_theme_default_init+0x2176>
 801adfc:	2101      	movs	r1, #1
 801adfe:	f7fe ba81 	b.w	8019304 <lv_theme_default_init+0x678>
 801ae02:	4630      	mov	r0, r6
 801ae04:	f005 fe62 	bl	8020acc <lv_disp_get_dpi>
 801ae08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae0c:	00c3      	lsls	r3, r0, #3
 801ae0e:	3350      	adds	r3, #80	; 0x50
 801ae10:	4aa6      	ldr	r2, [pc, #664]	; (801b0ac <lv_theme_default_init+0x2420>)
 801ae12:	fb82 1203 	smull	r1, r2, r2, r3
 801ae16:	17d9      	asrs	r1, r3, #31
 801ae18:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ae1c:	b209      	sxth	r1, r1
 801ae1e:	f7fe ba71 	b.w	8019304 <lv_theme_default_init+0x678>
 801ae22:	4ba1      	ldr	r3, [pc, #644]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801ae24:	68de      	ldr	r6, [r3, #12]
 801ae26:	4630      	mov	r0, r6
 801ae28:	f005 fe50 	bl	8020acc <lv_disp_get_dpi>
 801ae2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ae30:	0080      	lsls	r0, r0, #2
 801ae32:	28ef      	cmp	r0, #239	; 0xef
 801ae34:	dc02      	bgt.n	801ae3c <lv_theme_default_init+0x21b0>
 801ae36:	2101      	movs	r1, #1
 801ae38:	f7fe ba64 	b.w	8019304 <lv_theme_default_init+0x678>
 801ae3c:	4630      	mov	r0, r6
 801ae3e:	f005 fe45 	bl	8020acc <lv_disp_get_dpi>
 801ae42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ae46:	0083      	lsls	r3, r0, #2
 801ae48:	3350      	adds	r3, #80	; 0x50
 801ae4a:	4a98      	ldr	r2, [pc, #608]	; (801b0ac <lv_theme_default_init+0x2420>)
 801ae4c:	fb82 1203 	smull	r1, r2, r2, r3
 801ae50:	17d9      	asrs	r1, r3, #31
 801ae52:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ae56:	b209      	sxth	r1, r1
 801ae58:	f7fe ba54 	b.w	8019304 <lv_theme_default_init+0x678>
 801ae5c:	4630      	mov	r0, r6
 801ae5e:	f005 fe35 	bl	8020acc <lv_disp_get_dpi>
 801ae62:	0103      	lsls	r3, r0, #4
 801ae64:	3350      	adds	r3, #80	; 0x50
 801ae66:	4a91      	ldr	r2, [pc, #580]	; (801b0ac <lv_theme_default_init+0x2420>)
 801ae68:	fb82 1203 	smull	r1, r2, r2, r3
 801ae6c:	17d9      	asrs	r1, r3, #31
 801ae6e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ae72:	b209      	sxth	r1, r1
 801ae74:	f7fe ba46 	b.w	8019304 <lv_theme_default_init+0x678>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 801ae78:	4b8b      	ldr	r3, [pc, #556]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801ae7a:	68de      	ldr	r6, [r3, #12]
 801ae7c:	4630      	mov	r0, r6
 801ae7e:	f005 fe25 	bl	8020acc <lv_disp_get_dpi>
 801ae82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae86:	00c0      	lsls	r0, r0, #3
 801ae88:	28ef      	cmp	r0, #239	; 0xef
 801ae8a:	dc02      	bgt.n	801ae92 <lv_theme_default_init+0x2206>
 801ae8c:	2101      	movs	r1, #1
 801ae8e:	f7fe ba51 	b.w	8019334 <lv_theme_default_init+0x6a8>
 801ae92:	4630      	mov	r0, r6
 801ae94:	f005 fe1a 	bl	8020acc <lv_disp_get_dpi>
 801ae98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae9c:	00c3      	lsls	r3, r0, #3
 801ae9e:	3350      	adds	r3, #80	; 0x50
 801aea0:	4a82      	ldr	r2, [pc, #520]	; (801b0ac <lv_theme_default_init+0x2420>)
 801aea2:	fb82 1203 	smull	r1, r2, r2, r3
 801aea6:	17d9      	asrs	r1, r3, #31
 801aea8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aeac:	b209      	sxth	r1, r1
 801aeae:	f7fe ba41 	b.w	8019334 <lv_theme_default_init+0x6a8>
 801aeb2:	4b7d      	ldr	r3, [pc, #500]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801aeb4:	68de      	ldr	r6, [r3, #12]
 801aeb6:	4630      	mov	r0, r6
 801aeb8:	f005 fe08 	bl	8020acc <lv_disp_get_dpi>
 801aebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801aec0:	0080      	lsls	r0, r0, #2
 801aec2:	28ef      	cmp	r0, #239	; 0xef
 801aec4:	dc02      	bgt.n	801aecc <lv_theme_default_init+0x2240>
 801aec6:	2101      	movs	r1, #1
 801aec8:	f7fe ba34 	b.w	8019334 <lv_theme_default_init+0x6a8>
 801aecc:	4630      	mov	r0, r6
 801aece:	f005 fdfd 	bl	8020acc <lv_disp_get_dpi>
 801aed2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801aed6:	0083      	lsls	r3, r0, #2
 801aed8:	3350      	adds	r3, #80	; 0x50
 801aeda:	4a74      	ldr	r2, [pc, #464]	; (801b0ac <lv_theme_default_init+0x2420>)
 801aedc:	fb82 1203 	smull	r1, r2, r2, r3
 801aee0:	17d9      	asrs	r1, r3, #31
 801aee2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801aee6:	b209      	sxth	r1, r1
 801aee8:	f7fe ba24 	b.w	8019334 <lv_theme_default_init+0x6a8>
 801aeec:	4630      	mov	r0, r6
 801aeee:	f005 fded 	bl	8020acc <lv_disp_get_dpi>
 801aef2:	0103      	lsls	r3, r0, #4
 801aef4:	3350      	adds	r3, #80	; 0x50
 801aef6:	4a6d      	ldr	r2, [pc, #436]	; (801b0ac <lv_theme_default_init+0x2420>)
 801aef8:	fb82 1203 	smull	r1, r2, r2, r3
 801aefc:	17d9      	asrs	r1, r3, #31
 801aefe:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801af02:	b209      	sxth	r1, r1
 801af04:	f7fe ba16 	b.w	8019334 <lv_theme_default_init+0x6a8>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 801af08:	4b67      	ldr	r3, [pc, #412]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801af0a:	68dc      	ldr	r4, [r3, #12]
 801af0c:	4620      	mov	r0, r4
 801af0e:	f005 fddd 	bl	8020acc <lv_disp_get_dpi>
 801af12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801af16:	0040      	lsls	r0, r0, #1
 801af18:	28ef      	cmp	r0, #239	; 0xef
 801af1a:	dc02      	bgt.n	801af22 <lv_theme_default_init+0x2296>
 801af1c:	2401      	movs	r4, #1
 801af1e:	f7fe ba27 	b.w	8019370 <lv_theme_default_init+0x6e4>
 801af22:	4620      	mov	r0, r4
 801af24:	f005 fdd2 	bl	8020acc <lv_disp_get_dpi>
 801af28:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801af2c:	0043      	lsls	r3, r0, #1
 801af2e:	3350      	adds	r3, #80	; 0x50
 801af30:	4a5e      	ldr	r2, [pc, #376]	; (801b0ac <lv_theme_default_init+0x2420>)
 801af32:	fb82 1203 	smull	r1, r2, r2, r3
 801af36:	17dc      	asrs	r4, r3, #31
 801af38:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801af3c:	b224      	sxth	r4, r4
 801af3e:	f7fe ba17 	b.w	8019370 <lv_theme_default_init+0x6e4>
 801af42:	4b59      	ldr	r3, [pc, #356]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801af44:	68dc      	ldr	r4, [r3, #12]
 801af46:	4620      	mov	r0, r4
 801af48:	f005 fdc0 	bl	8020acc <lv_disp_get_dpi>
 801af4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af50:	0080      	lsls	r0, r0, #2
 801af52:	28ef      	cmp	r0, #239	; 0xef
 801af54:	dc02      	bgt.n	801af5c <lv_theme_default_init+0x22d0>
 801af56:	2401      	movs	r4, #1
 801af58:	f7fe ba0a 	b.w	8019370 <lv_theme_default_init+0x6e4>
 801af5c:	4620      	mov	r0, r4
 801af5e:	f005 fdb5 	bl	8020acc <lv_disp_get_dpi>
 801af62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af66:	0083      	lsls	r3, r0, #2
 801af68:	3350      	adds	r3, #80	; 0x50
 801af6a:	4a50      	ldr	r2, [pc, #320]	; (801b0ac <lv_theme_default_init+0x2420>)
 801af6c:	fb82 1203 	smull	r1, r2, r2, r3
 801af70:	17dc      	asrs	r4, r3, #31
 801af72:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801af76:	b224      	sxth	r4, r4
 801af78:	f7fe b9fa 	b.w	8019370 <lv_theme_default_init+0x6e4>
 801af7c:	4620      	mov	r0, r4
 801af7e:	f005 fda5 	bl	8020acc <lv_disp_get_dpi>
 801af82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801af86:	0043      	lsls	r3, r0, #1
 801af88:	3350      	adds	r3, #80	; 0x50
 801af8a:	4a48      	ldr	r2, [pc, #288]	; (801b0ac <lv_theme_default_init+0x2420>)
 801af8c:	fb82 1203 	smull	r1, r2, r2, r3
 801af90:	17dc      	asrs	r4, r3, #31
 801af92:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801af96:	b224      	sxth	r4, r4
 801af98:	f7fe b9ea 	b.w	8019370 <lv_theme_default_init+0x6e4>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 801af9c:	4b42      	ldr	r3, [pc, #264]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801af9e:	68dc      	ldr	r4, [r3, #12]
 801afa0:	4620      	mov	r0, r4
 801afa2:	f005 fd93 	bl	8020acc <lv_disp_get_dpi>
 801afa6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801afaa:	0040      	lsls	r0, r0, #1
 801afac:	28ef      	cmp	r0, #239	; 0xef
 801afae:	dc02      	bgt.n	801afb6 <lv_theme_default_init+0x232a>
 801afb0:	2401      	movs	r4, #1
 801afb2:	f7fe ba04 	b.w	80193be <lv_theme_default_init+0x732>
 801afb6:	4620      	mov	r0, r4
 801afb8:	f005 fd88 	bl	8020acc <lv_disp_get_dpi>
 801afbc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801afc0:	0043      	lsls	r3, r0, #1
 801afc2:	3350      	adds	r3, #80	; 0x50
 801afc4:	4a39      	ldr	r2, [pc, #228]	; (801b0ac <lv_theme_default_init+0x2420>)
 801afc6:	fb82 1203 	smull	r1, r2, r2, r3
 801afca:	17dc      	asrs	r4, r3, #31
 801afcc:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801afd0:	b224      	sxth	r4, r4
 801afd2:	f7fe b9f4 	b.w	80193be <lv_theme_default_init+0x732>
 801afd6:	4b34      	ldr	r3, [pc, #208]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801afd8:	68dc      	ldr	r4, [r3, #12]
 801afda:	4620      	mov	r0, r4
 801afdc:	f005 fd76 	bl	8020acc <lv_disp_get_dpi>
 801afe0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801afe4:	0080      	lsls	r0, r0, #2
 801afe6:	28ef      	cmp	r0, #239	; 0xef
 801afe8:	dc02      	bgt.n	801aff0 <lv_theme_default_init+0x2364>
 801afea:	2401      	movs	r4, #1
 801afec:	f7fe b9e7 	b.w	80193be <lv_theme_default_init+0x732>
 801aff0:	4620      	mov	r0, r4
 801aff2:	f005 fd6b 	bl	8020acc <lv_disp_get_dpi>
 801aff6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801affa:	0083      	lsls	r3, r0, #2
 801affc:	3350      	adds	r3, #80	; 0x50
 801affe:	4a2b      	ldr	r2, [pc, #172]	; (801b0ac <lv_theme_default_init+0x2420>)
 801b000:	fb82 1203 	smull	r1, r2, r2, r3
 801b004:	17dc      	asrs	r4, r3, #31
 801b006:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b00a:	b224      	sxth	r4, r4
 801b00c:	f7fe b9d7 	b.w	80193be <lv_theme_default_init+0x732>
 801b010:	4620      	mov	r0, r4
 801b012:	f005 fd5b 	bl	8020acc <lv_disp_get_dpi>
 801b016:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b01a:	0043      	lsls	r3, r0, #1
 801b01c:	3350      	adds	r3, #80	; 0x50
 801b01e:	4a23      	ldr	r2, [pc, #140]	; (801b0ac <lv_theme_default_init+0x2420>)
 801b020:	fb82 1203 	smull	r1, r2, r2, r3
 801b024:	17dc      	asrs	r4, r3, #31
 801b026:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b02a:	b224      	sxth	r4, r4
 801b02c:	f7fe b9c7 	b.w	80193be <lv_theme_default_init+0x732>
 801b030:	4630      	mov	r0, r6
 801b032:	f005 fd4b 	bl	8020acc <lv_disp_get_dpi>
 801b036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b03a:	0043      	lsls	r3, r0, #1
 801b03c:	3350      	adds	r3, #80	; 0x50
 801b03e:	4a1b      	ldr	r2, [pc, #108]	; (801b0ac <lv_theme_default_init+0x2420>)
 801b040:	fb82 1203 	smull	r1, r2, r2, r3
 801b044:	17d9      	asrs	r1, r3, #31
 801b046:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b04a:	b209      	sxth	r1, r1
 801b04c:	f7fe b9d2 	b.w	80193f4 <lv_theme_default_init+0x768>
 801b050:	4630      	mov	r0, r6
 801b052:	f005 fd3b 	bl	8020acc <lv_disp_get_dpi>
 801b056:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b05a:	0043      	lsls	r3, r0, #1
 801b05c:	3350      	adds	r3, #80	; 0x50
 801b05e:	4a13      	ldr	r2, [pc, #76]	; (801b0ac <lv_theme_default_init+0x2420>)
 801b060:	fb82 1203 	smull	r1, r2, r2, r3
 801b064:	17d9      	asrs	r1, r3, #31
 801b066:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b06a:	b209      	sxth	r1, r1
 801b06c:	f7fe b9d4 	b.w	8019418 <lv_theme_default_init+0x78c>
 801b070:	4630      	mov	r0, r6
 801b072:	f005 fd2b 	bl	8020acc <lv_disp_get_dpi>
 801b076:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b07a:	0083      	lsls	r3, r0, #2
 801b07c:	3350      	adds	r3, #80	; 0x50
 801b07e:	4a0b      	ldr	r2, [pc, #44]	; (801b0ac <lv_theme_default_init+0x2420>)
 801b080:	fb82 1203 	smull	r1, r2, r2, r3
 801b084:	17d9      	asrs	r1, r3, #31
 801b086:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b08a:	b209      	sxth	r1, r1
 801b08c:	f7fe b9da 	b.w	8019444 <lv_theme_default_init+0x7b8>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 801b090:	4b05      	ldr	r3, [pc, #20]	; (801b0a8 <lv_theme_default_init+0x241c>)
 801b092:	68dc      	ldr	r4, [r3, #12]
 801b094:	4620      	mov	r0, r4
 801b096:	f005 fd19 	bl	8020acc <lv_disp_get_dpi>
 801b09a:	00c0      	lsls	r0, r0, #3
 801b09c:	28ef      	cmp	r0, #239	; 0xef
 801b09e:	dc07      	bgt.n	801b0b0 <lv_theme_default_init+0x2424>
 801b0a0:	2401      	movs	r4, #1
 801b0a2:	f7fe ba14 	b.w	80194ce <lv_theme_default_init+0x842>
 801b0a6:	bf00      	nop
 801b0a8:	20002768 	.word	0x20002768
 801b0ac:	66666667 	.word	0x66666667
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	f005 fd0b 	bl	8020acc <lv_disp_get_dpi>
 801b0b6:	00c0      	lsls	r0, r0, #3
 801b0b8:	3050      	adds	r0, #80	; 0x50
 801b0ba:	4bd7      	ldr	r3, [pc, #860]	; (801b418 <lv_theme_default_init+0x278c>)
 801b0bc:	fb83 2300 	smull	r2, r3, r3, r0
 801b0c0:	17c4      	asrs	r4, r0, #31
 801b0c2:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b0c6:	b224      	sxth	r4, r4
 801b0c8:	f7fe ba01 	b.w	80194ce <lv_theme_default_init+0x842>
 801b0cc:	4bd3      	ldr	r3, [pc, #844]	; (801b41c <lv_theme_default_init+0x2790>)
 801b0ce:	68dc      	ldr	r4, [r3, #12]
 801b0d0:	4620      	mov	r0, r4
 801b0d2:	f005 fcfb 	bl	8020acc <lv_disp_get_dpi>
 801b0d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b0da:	0040      	lsls	r0, r0, #1
 801b0dc:	28ef      	cmp	r0, #239	; 0xef
 801b0de:	dc02      	bgt.n	801b0e6 <lv_theme_default_init+0x245a>
 801b0e0:	2401      	movs	r4, #1
 801b0e2:	f7fe b9f4 	b.w	80194ce <lv_theme_default_init+0x842>
 801b0e6:	4620      	mov	r0, r4
 801b0e8:	f005 fcf0 	bl	8020acc <lv_disp_get_dpi>
 801b0ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b0f0:	0043      	lsls	r3, r0, #1
 801b0f2:	3350      	adds	r3, #80	; 0x50
 801b0f4:	4ac8      	ldr	r2, [pc, #800]	; (801b418 <lv_theme_default_init+0x278c>)
 801b0f6:	fb82 1203 	smull	r1, r2, r2, r3
 801b0fa:	17dc      	asrs	r4, r3, #31
 801b0fc:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b100:	b224      	sxth	r4, r4
 801b102:	f7fe b9e4 	b.w	80194ce <lv_theme_default_init+0x842>
 801b106:	4620      	mov	r0, r4
 801b108:	f005 fce0 	bl	8020acc <lv_disp_get_dpi>
 801b10c:	0043      	lsls	r3, r0, #1
 801b10e:	3350      	adds	r3, #80	; 0x50
 801b110:	4ac1      	ldr	r2, [pc, #772]	; (801b418 <lv_theme_default_init+0x278c>)
 801b112:	fb82 1203 	smull	r1, r2, r2, r3
 801b116:	17dc      	asrs	r4, r3, #31
 801b118:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b11c:	b224      	sxth	r4, r4
 801b11e:	f7fe b9d6 	b.w	80194ce <lv_theme_default_init+0x842>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 801b122:	4bbe      	ldr	r3, [pc, #760]	; (801b41c <lv_theme_default_init+0x2790>)
 801b124:	68de      	ldr	r6, [r3, #12]
 801b126:	4630      	mov	r0, r6
 801b128:	f005 fcd0 	bl	8020acc <lv_disp_get_dpi>
 801b12c:	00c0      	lsls	r0, r0, #3
 801b12e:	28ef      	cmp	r0, #239	; 0xef
 801b130:	dc02      	bgt.n	801b138 <lv_theme_default_init+0x24ac>
 801b132:	2101      	movs	r1, #1
 801b134:	f7fe b9f0 	b.w	8019518 <lv_theme_default_init+0x88c>
 801b138:	4630      	mov	r0, r6
 801b13a:	f005 fcc7 	bl	8020acc <lv_disp_get_dpi>
 801b13e:	00c0      	lsls	r0, r0, #3
 801b140:	3050      	adds	r0, #80	; 0x50
 801b142:	4bb5      	ldr	r3, [pc, #724]	; (801b418 <lv_theme_default_init+0x278c>)
 801b144:	fb83 2300 	smull	r2, r3, r3, r0
 801b148:	17c1      	asrs	r1, r0, #31
 801b14a:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b14e:	b209      	sxth	r1, r1
 801b150:	f7fe b9e2 	b.w	8019518 <lv_theme_default_init+0x88c>
 801b154:	4bb1      	ldr	r3, [pc, #708]	; (801b41c <lv_theme_default_init+0x2790>)
 801b156:	68de      	ldr	r6, [r3, #12]
 801b158:	4630      	mov	r0, r6
 801b15a:	f005 fcb7 	bl	8020acc <lv_disp_get_dpi>
 801b15e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b162:	0040      	lsls	r0, r0, #1
 801b164:	28ef      	cmp	r0, #239	; 0xef
 801b166:	dc02      	bgt.n	801b16e <lv_theme_default_init+0x24e2>
 801b168:	2101      	movs	r1, #1
 801b16a:	f7fe b9d5 	b.w	8019518 <lv_theme_default_init+0x88c>
 801b16e:	4630      	mov	r0, r6
 801b170:	f005 fcac 	bl	8020acc <lv_disp_get_dpi>
 801b174:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b178:	0043      	lsls	r3, r0, #1
 801b17a:	3350      	adds	r3, #80	; 0x50
 801b17c:	4aa6      	ldr	r2, [pc, #664]	; (801b418 <lv_theme_default_init+0x278c>)
 801b17e:	fb82 1203 	smull	r1, r2, r2, r3
 801b182:	17d9      	asrs	r1, r3, #31
 801b184:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b188:	b209      	sxth	r1, r1
 801b18a:	f7fe b9c5 	b.w	8019518 <lv_theme_default_init+0x88c>
 801b18e:	4630      	mov	r0, r6
 801b190:	f005 fc9c 	bl	8020acc <lv_disp_get_dpi>
 801b194:	0043      	lsls	r3, r0, #1
 801b196:	3350      	adds	r3, #80	; 0x50
 801b198:	4a9f      	ldr	r2, [pc, #636]	; (801b418 <lv_theme_default_init+0x278c>)
 801b19a:	fb82 1203 	smull	r1, r2, r2, r3
 801b19e:	17d9      	asrs	r1, r3, #31
 801b1a0:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b1a4:	b209      	sxth	r1, r1
 801b1a6:	f7fe b9b7 	b.w	8019518 <lv_theme_default_init+0x88c>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 801b1aa:	4b9c      	ldr	r3, [pc, #624]	; (801b41c <lv_theme_default_init+0x2790>)
 801b1ac:	68de      	ldr	r6, [r3, #12]
 801b1ae:	4630      	mov	r0, r6
 801b1b0:	f005 fc8c 	bl	8020acc <lv_disp_get_dpi>
 801b1b4:	00c0      	lsls	r0, r0, #3
 801b1b6:	28ef      	cmp	r0, #239	; 0xef
 801b1b8:	dc02      	bgt.n	801b1c0 <lv_theme_default_init+0x2534>
 801b1ba:	2101      	movs	r1, #1
 801b1bc:	f7fe b9c4 	b.w	8019548 <lv_theme_default_init+0x8bc>
 801b1c0:	4630      	mov	r0, r6
 801b1c2:	f005 fc83 	bl	8020acc <lv_disp_get_dpi>
 801b1c6:	00c0      	lsls	r0, r0, #3
 801b1c8:	3050      	adds	r0, #80	; 0x50
 801b1ca:	4b93      	ldr	r3, [pc, #588]	; (801b418 <lv_theme_default_init+0x278c>)
 801b1cc:	fb83 2300 	smull	r2, r3, r3, r0
 801b1d0:	17c1      	asrs	r1, r0, #31
 801b1d2:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b1d6:	b209      	sxth	r1, r1
 801b1d8:	f7fe b9b6 	b.w	8019548 <lv_theme_default_init+0x8bc>
 801b1dc:	4b8f      	ldr	r3, [pc, #572]	; (801b41c <lv_theme_default_init+0x2790>)
 801b1de:	68de      	ldr	r6, [r3, #12]
 801b1e0:	4630      	mov	r0, r6
 801b1e2:	f005 fc73 	bl	8020acc <lv_disp_get_dpi>
 801b1e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b1ea:	0040      	lsls	r0, r0, #1
 801b1ec:	28ef      	cmp	r0, #239	; 0xef
 801b1ee:	dc02      	bgt.n	801b1f6 <lv_theme_default_init+0x256a>
 801b1f0:	2101      	movs	r1, #1
 801b1f2:	f7fe b9a9 	b.w	8019548 <lv_theme_default_init+0x8bc>
 801b1f6:	4630      	mov	r0, r6
 801b1f8:	f005 fc68 	bl	8020acc <lv_disp_get_dpi>
 801b1fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b200:	0043      	lsls	r3, r0, #1
 801b202:	3350      	adds	r3, #80	; 0x50
 801b204:	4a84      	ldr	r2, [pc, #528]	; (801b418 <lv_theme_default_init+0x278c>)
 801b206:	fb82 1203 	smull	r1, r2, r2, r3
 801b20a:	17d9      	asrs	r1, r3, #31
 801b20c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b210:	b209      	sxth	r1, r1
 801b212:	f7fe b999 	b.w	8019548 <lv_theme_default_init+0x8bc>
 801b216:	4630      	mov	r0, r6
 801b218:	f005 fc58 	bl	8020acc <lv_disp_get_dpi>
 801b21c:	0043      	lsls	r3, r0, #1
 801b21e:	3350      	adds	r3, #80	; 0x50
 801b220:	4a7d      	ldr	r2, [pc, #500]	; (801b418 <lv_theme_default_init+0x278c>)
 801b222:	fb82 1203 	smull	r1, r2, r2, r3
 801b226:	17d9      	asrs	r1, r3, #31
 801b228:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b22c:	b209      	sxth	r1, r1
 801b22e:	f7fe b98b 	b.w	8019548 <lv_theme_default_init+0x8bc>
 801b232:	4630      	mov	r0, r6
 801b234:	f005 fc4a 	bl	8020acc <lv_disp_get_dpi>
 801b238:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b23c:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b240:	4a75      	ldr	r2, [pc, #468]	; (801b418 <lv_theme_default_init+0x278c>)
 801b242:	fb82 1203 	smull	r1, r2, r2, r3
 801b246:	17d9      	asrs	r1, r3, #31
 801b248:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b24c:	b209      	sxth	r1, r1
 801b24e:	f7fe ba26 	b.w	801969e <lv_theme_default_init+0xa12>
 801b252:	4630      	mov	r0, r6
 801b254:	f005 fc3a 	bl	8020acc <lv_disp_get_dpi>
 801b258:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b25c:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b260:	4a6d      	ldr	r2, [pc, #436]	; (801b418 <lv_theme_default_init+0x278c>)
 801b262:	fb82 1203 	smull	r1, r2, r2, r3
 801b266:	17d9      	asrs	r1, r3, #31
 801b268:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b26c:	b209      	sxth	r1, r1
 801b26e:	f7fe ba27 	b.w	80196c0 <lv_theme_default_init+0xa34>
 801b272:	4620      	mov	r0, r4
 801b274:	f005 fc2a 	bl	8020acc <lv_disp_get_dpi>
 801b278:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b27c:	0043      	lsls	r3, r0, #1
 801b27e:	3350      	adds	r3, #80	; 0x50
 801b280:	4a65      	ldr	r2, [pc, #404]	; (801b418 <lv_theme_default_init+0x278c>)
 801b282:	fb82 1203 	smull	r1, r2, r2, r3
 801b286:	17dc      	asrs	r4, r3, #31
 801b288:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b28c:	b224      	sxth	r4, r4
 801b28e:	f7fe ba37 	b.w	8019700 <lv_theme_default_init+0xa74>
 801b292:	4630      	mov	r0, r6
 801b294:	f005 fc1a 	bl	8020acc <lv_disp_get_dpi>
 801b298:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801b29c:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b2a0:	4a5d      	ldr	r2, [pc, #372]	; (801b418 <lv_theme_default_init+0x278c>)
 801b2a2:	fb82 1203 	smull	r1, r2, r2, r3
 801b2a6:	17d9      	asrs	r1, r3, #31
 801b2a8:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b2ac:	b209      	sxth	r1, r1
 801b2ae:	f7fe ba6a 	b.w	8019786 <lv_theme_default_init+0xafa>
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	f005 fc0a 	bl	8020acc <lv_disp_get_dpi>
 801b2b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b2bc:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b2c0:	4a55      	ldr	r2, [pc, #340]	; (801b418 <lv_theme_default_init+0x278c>)
 801b2c2:	fb82 1203 	smull	r1, r2, r2, r3
 801b2c6:	17dc      	asrs	r4, r3, #31
 801b2c8:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b2cc:	b224      	sxth	r4, r4
 801b2ce:	f7fe ba8e 	b.w	80197ee <lv_theme_default_init+0xb62>
 801b2d2:	4630      	mov	r0, r6
 801b2d4:	f005 fbfa 	bl	8020acc <lv_disp_get_dpi>
 801b2d8:	0043      	lsls	r3, r0, #1
 801b2da:	3350      	adds	r3, #80	; 0x50
 801b2dc:	4a4e      	ldr	r2, [pc, #312]	; (801b418 <lv_theme_default_init+0x278c>)
 801b2de:	fb82 1203 	smull	r1, r2, r2, r3
 801b2e2:	17d9      	asrs	r1, r3, #31
 801b2e4:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b2e8:	b209      	sxth	r1, r1
 801b2ea:	f7fe ba9e 	b.w	801982a <lv_theme_default_init+0xb9e>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 801b2ee:	4b4b      	ldr	r3, [pc, #300]	; (801b41c <lv_theme_default_init+0x2790>)
 801b2f0:	68de      	ldr	r6, [r3, #12]
 801b2f2:	4630      	mov	r0, r6
 801b2f4:	f005 fbea 	bl	8020acc <lv_disp_get_dpi>
 801b2f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b2fc:	0080      	lsls	r0, r0, #2
 801b2fe:	28ef      	cmp	r0, #239	; 0xef
 801b300:	dc05      	bgt.n	801b30e <lv_theme_default_init+0x2682>
 801b302:	2101      	movs	r1, #1
 801b304:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801b308:	1049      	asrs	r1, r1, #1
 801b30a:	f7fe babb 	b.w	8019884 <lv_theme_default_init+0xbf8>
 801b30e:	4630      	mov	r0, r6
 801b310:	f005 fbdc 	bl	8020acc <lv_disp_get_dpi>
 801b314:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b318:	0083      	lsls	r3, r0, #2
 801b31a:	3350      	adds	r3, #80	; 0x50
 801b31c:	4a3e      	ldr	r2, [pc, #248]	; (801b418 <lv_theme_default_init+0x278c>)
 801b31e:	fb82 1203 	smull	r1, r2, r2, r3
 801b322:	17d9      	asrs	r1, r3, #31
 801b324:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b328:	b209      	sxth	r1, r1
 801b32a:	e7eb      	b.n	801b304 <lv_theme_default_init+0x2678>
 801b32c:	4630      	mov	r0, r6
 801b32e:	f005 fbcd 	bl	8020acc <lv_disp_get_dpi>
 801b332:	00c3      	lsls	r3, r0, #3
 801b334:	3350      	adds	r3, #80	; 0x50
 801b336:	4a38      	ldr	r2, [pc, #224]	; (801b418 <lv_theme_default_init+0x278c>)
 801b338:	fb82 1203 	smull	r1, r2, r2, r3
 801b33c:	17d9      	asrs	r1, r3, #31
 801b33e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b342:	b209      	sxth	r1, r1
 801b344:	f7fe ba9b 	b.w	801987e <lv_theme_default_init+0xbf2>
 801b348:	4620      	mov	r0, r4
 801b34a:	f005 fbbf 	bl	8020acc <lv_disp_get_dpi>
 801b34e:	0083      	lsls	r3, r0, #2
 801b350:	3350      	adds	r3, #80	; 0x50
 801b352:	4a31      	ldr	r2, [pc, #196]	; (801b418 <lv_theme_default_init+0x278c>)
 801b354:	fb82 1203 	smull	r1, r2, r2, r3
 801b358:	17dc      	asrs	r4, r3, #31
 801b35a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b35e:	b224      	sxth	r4, r4
 801b360:	f7fe babe 	b.w	80198e0 <lv_theme_default_init+0xc54>
 801b364:	4630      	mov	r0, r6
 801b366:	f005 fbb1 	bl	8020acc <lv_disp_get_dpi>
 801b36a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b36e:	0043      	lsls	r3, r0, #1
 801b370:	3350      	adds	r3, #80	; 0x50
 801b372:	4a29      	ldr	r2, [pc, #164]	; (801b418 <lv_theme_default_init+0x278c>)
 801b374:	fb82 1203 	smull	r1, r2, r2, r3
 801b378:	17d9      	asrs	r1, r3, #31
 801b37a:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b37e:	b209      	sxth	r1, r1
 801b380:	f7fe bb04 	b.w	801998c <lv_theme_default_init+0xd00>
 801b384:	4630      	mov	r0, r6
 801b386:	f005 fba1 	bl	8020acc <lv_disp_get_dpi>
 801b38a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b38e:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b392:	4a21      	ldr	r2, [pc, #132]	; (801b418 <lv_theme_default_init+0x278c>)
 801b394:	fb82 1203 	smull	r1, r2, r2, r3
 801b398:	17d9      	asrs	r1, r3, #31
 801b39a:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b39e:	b209      	sxth	r1, r1
 801b3a0:	f7fe bb12 	b.w	80199c8 <lv_theme_default_init+0xd3c>
 801b3a4:	4630      	mov	r0, r6
 801b3a6:	f005 fb91 	bl	8020acc <lv_disp_get_dpi>
 801b3aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b3ae:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b3b2:	4a19      	ldr	r2, [pc, #100]	; (801b418 <lv_theme_default_init+0x278c>)
 801b3b4:	fb82 1203 	smull	r1, r2, r2, r3
 801b3b8:	17d9      	asrs	r1, r3, #31
 801b3ba:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b3be:	b209      	sxth	r1, r1
 801b3c0:	f7fe bb14 	b.w	80199ec <lv_theme_default_init+0xd60>
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	f005 fb81 	bl	8020acc <lv_disp_get_dpi>
 801b3ca:	00c3      	lsls	r3, r0, #3
 801b3cc:	3350      	adds	r3, #80	; 0x50
 801b3ce:	4a12      	ldr	r2, [pc, #72]	; (801b418 <lv_theme_default_init+0x278c>)
 801b3d0:	fb82 1203 	smull	r1, r2, r2, r3
 801b3d4:	17dc      	asrs	r4, r3, #31
 801b3d6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b3da:	b224      	sxth	r4, r4
 801b3dc:	f7fe bb17 	b.w	8019a0e <lv_theme_default_init+0xd82>
 801b3e0:	4630      	mov	r0, r6
 801b3e2:	f005 fb73 	bl	8020acc <lv_disp_get_dpi>
 801b3e6:	0043      	lsls	r3, r0, #1
 801b3e8:	3350      	adds	r3, #80	; 0x50
 801b3ea:	4a0b      	ldr	r2, [pc, #44]	; (801b418 <lv_theme_default_init+0x278c>)
 801b3ec:	fb82 1203 	smull	r1, r2, r2, r3
 801b3f0:	17d9      	asrs	r1, r3, #31
 801b3f2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b3f6:	b209      	sxth	r1, r1
 801b3f8:	f7fe bb1f 	b.w	8019a3a <lv_theme_default_init+0xdae>
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	f005 fb65 	bl	8020acc <lv_disp_get_dpi>
 801b402:	00c3      	lsls	r3, r0, #3
 801b404:	3350      	adds	r3, #80	; 0x50
 801b406:	4a04      	ldr	r2, [pc, #16]	; (801b418 <lv_theme_default_init+0x278c>)
 801b408:	fb82 1203 	smull	r1, r2, r2, r3
 801b40c:	17dc      	asrs	r4, r3, #31
 801b40e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b412:	b224      	sxth	r4, r4
 801b414:	f7fe bb2e 	b.w	8019a74 <lv_theme_default_init+0xde8>
 801b418:	66666667 	.word	0x66666667
 801b41c:	20002768 	.word	0x20002768
 801b420:	4630      	mov	r0, r6
 801b422:	f005 fb53 	bl	8020acc <lv_disp_get_dpi>
 801b426:	3050      	adds	r0, #80	; 0x50
 801b428:	4bd4      	ldr	r3, [pc, #848]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b42a:	fb83 2300 	smull	r2, r3, r3, r0
 801b42e:	17c1      	asrs	r1, r0, #31
 801b430:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b434:	b209      	sxth	r1, r1
 801b436:	f7fe bb43 	b.w	8019ac0 <lv_theme_default_init+0xe34>
 801b43a:	4620      	mov	r0, r4
 801b43c:	f005 fb46 	bl	8020acc <lv_disp_get_dpi>
 801b440:	0043      	lsls	r3, r0, #1
 801b442:	3350      	adds	r3, #80	; 0x50
 801b444:	4acd      	ldr	r2, [pc, #820]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b446:	fb82 1203 	smull	r1, r2, r2, r3
 801b44a:	17dc      	asrs	r4, r3, #31
 801b44c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b450:	b224      	sxth	r4, r4
 801b452:	f7fe bb4d 	b.w	8019af0 <lv_theme_default_init+0xe64>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 801b456:	4bca      	ldr	r3, [pc, #808]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b458:	68de      	ldr	r6, [r3, #12]
 801b45a:	4630      	mov	r0, r6
 801b45c:	f005 fb36 	bl	8020acc <lv_disp_get_dpi>
 801b460:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b464:	0080      	lsls	r0, r0, #2
 801b466:	28ef      	cmp	r0, #239	; 0xef
 801b468:	dc02      	bgt.n	801b470 <lv_theme_default_init+0x27e4>
 801b46a:	2101      	movs	r1, #1
 801b46c:	f7fe bba7 	b.w	8019bbe <lv_theme_default_init+0xf32>
 801b470:	4630      	mov	r0, r6
 801b472:	f005 fb2b 	bl	8020acc <lv_disp_get_dpi>
 801b476:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b47a:	0083      	lsls	r3, r0, #2
 801b47c:	3350      	adds	r3, #80	; 0x50
 801b47e:	4abf      	ldr	r2, [pc, #764]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b480:	fb82 1203 	smull	r1, r2, r2, r3
 801b484:	17d9      	asrs	r1, r3, #31
 801b486:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b48a:	b209      	sxth	r1, r1
 801b48c:	f7fe bb97 	b.w	8019bbe <lv_theme_default_init+0xf32>
 801b490:	4630      	mov	r0, r6
 801b492:	f005 fb1b 	bl	8020acc <lv_disp_get_dpi>
 801b496:	00c3      	lsls	r3, r0, #3
 801b498:	3350      	adds	r3, #80	; 0x50
 801b49a:	4ab8      	ldr	r2, [pc, #736]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b49c:	fb82 1203 	smull	r1, r2, r2, r3
 801b4a0:	17d9      	asrs	r1, r3, #31
 801b4a2:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801b4a6:	b209      	sxth	r1, r1
 801b4a8:	f7fe bb89 	b.w	8019bbe <lv_theme_default_init+0xf32>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 801b4ac:	4bb4      	ldr	r3, [pc, #720]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b4ae:	68dc      	ldr	r4, [r3, #12]
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	f005 fb0b 	bl	8020acc <lv_disp_get_dpi>
 801b4b6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b4ba:	0040      	lsls	r0, r0, #1
 801b4bc:	28ef      	cmp	r0, #239	; 0xef
 801b4be:	dc02      	bgt.n	801b4c6 <lv_theme_default_init+0x283a>
 801b4c0:	2401      	movs	r4, #1
 801b4c2:	f7fe bbb6 	b.w	8019c32 <lv_theme_default_init+0xfa6>
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	f005 fb00 	bl	8020acc <lv_disp_get_dpi>
 801b4cc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b4d0:	0043      	lsls	r3, r0, #1
 801b4d2:	3350      	adds	r3, #80	; 0x50
 801b4d4:	4aa9      	ldr	r2, [pc, #676]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b4d6:	fb82 1203 	smull	r1, r2, r2, r3
 801b4da:	17dc      	asrs	r4, r3, #31
 801b4dc:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b4e0:	b224      	sxth	r4, r4
 801b4e2:	f7fe bba6 	b.w	8019c32 <lv_theme_default_init+0xfa6>
 801b4e6:	4ba6      	ldr	r3, [pc, #664]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b4e8:	68dc      	ldr	r4, [r3, #12]
 801b4ea:	4620      	mov	r0, r4
 801b4ec:	f005 faee 	bl	8020acc <lv_disp_get_dpi>
 801b4f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b4f4:	0080      	lsls	r0, r0, #2
 801b4f6:	28ef      	cmp	r0, #239	; 0xef
 801b4f8:	dc02      	bgt.n	801b500 <lv_theme_default_init+0x2874>
 801b4fa:	2401      	movs	r4, #1
 801b4fc:	f7fe bb99 	b.w	8019c32 <lv_theme_default_init+0xfa6>
 801b500:	4620      	mov	r0, r4
 801b502:	f005 fae3 	bl	8020acc <lv_disp_get_dpi>
 801b506:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b50a:	0083      	lsls	r3, r0, #2
 801b50c:	3350      	adds	r3, #80	; 0x50
 801b50e:	4a9b      	ldr	r2, [pc, #620]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b510:	fb82 1203 	smull	r1, r2, r2, r3
 801b514:	17dc      	asrs	r4, r3, #31
 801b516:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b51a:	b224      	sxth	r4, r4
 801b51c:	f7fe bb89 	b.w	8019c32 <lv_theme_default_init+0xfa6>
 801b520:	4620      	mov	r0, r4
 801b522:	f005 fad3 	bl	8020acc <lv_disp_get_dpi>
 801b526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b52a:	0043      	lsls	r3, r0, #1
 801b52c:	3350      	adds	r3, #80	; 0x50
 801b52e:	4a93      	ldr	r2, [pc, #588]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b530:	fb82 1203 	smull	r1, r2, r2, r3
 801b534:	17dc      	asrs	r4, r3, #31
 801b536:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b53a:	b224      	sxth	r4, r4
 801b53c:	f7fe bb79 	b.w	8019c32 <lv_theme_default_init+0xfa6>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 801b540:	4b8f      	ldr	r3, [pc, #572]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b542:	68dc      	ldr	r4, [r3, #12]
 801b544:	4620      	mov	r0, r4
 801b546:	f005 fac1 	bl	8020acc <lv_disp_get_dpi>
 801b54a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b54e:	0040      	lsls	r0, r0, #1
 801b550:	28ef      	cmp	r0, #239	; 0xef
 801b552:	dc02      	bgt.n	801b55a <lv_theme_default_init+0x28ce>
 801b554:	2401      	movs	r4, #1
 801b556:	f7fe bb8c 	b.w	8019c72 <lv_theme_default_init+0xfe6>
 801b55a:	4620      	mov	r0, r4
 801b55c:	f005 fab6 	bl	8020acc <lv_disp_get_dpi>
 801b560:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b564:	0043      	lsls	r3, r0, #1
 801b566:	3350      	adds	r3, #80	; 0x50
 801b568:	4a84      	ldr	r2, [pc, #528]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b56a:	fb82 1203 	smull	r1, r2, r2, r3
 801b56e:	17dc      	asrs	r4, r3, #31
 801b570:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b574:	b224      	sxth	r4, r4
 801b576:	f7fe bb7c 	b.w	8019c72 <lv_theme_default_init+0xfe6>
 801b57a:	4b81      	ldr	r3, [pc, #516]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b57c:	68dc      	ldr	r4, [r3, #12]
 801b57e:	4620      	mov	r0, r4
 801b580:	f005 faa4 	bl	8020acc <lv_disp_get_dpi>
 801b584:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b588:	0080      	lsls	r0, r0, #2
 801b58a:	28ef      	cmp	r0, #239	; 0xef
 801b58c:	dc02      	bgt.n	801b594 <lv_theme_default_init+0x2908>
 801b58e:	2401      	movs	r4, #1
 801b590:	f7fe bb6f 	b.w	8019c72 <lv_theme_default_init+0xfe6>
 801b594:	4620      	mov	r0, r4
 801b596:	f005 fa99 	bl	8020acc <lv_disp_get_dpi>
 801b59a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b59e:	0083      	lsls	r3, r0, #2
 801b5a0:	3350      	adds	r3, #80	; 0x50
 801b5a2:	4a76      	ldr	r2, [pc, #472]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b5a4:	fb82 1203 	smull	r1, r2, r2, r3
 801b5a8:	17dc      	asrs	r4, r3, #31
 801b5aa:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b5ae:	b224      	sxth	r4, r4
 801b5b0:	f7fe bb5f 	b.w	8019c72 <lv_theme_default_init+0xfe6>
 801b5b4:	4620      	mov	r0, r4
 801b5b6:	f005 fa89 	bl	8020acc <lv_disp_get_dpi>
 801b5ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b5be:	0043      	lsls	r3, r0, #1
 801b5c0:	3350      	adds	r3, #80	; 0x50
 801b5c2:	4a6e      	ldr	r2, [pc, #440]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b5c4:	fb82 1203 	smull	r1, r2, r2, r3
 801b5c8:	17dc      	asrs	r4, r3, #31
 801b5ca:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b5ce:	b224      	sxth	r4, r4
 801b5d0:	f7fe bb4f 	b.w	8019c72 <lv_theme_default_init+0xfe6>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 801b5d4:	4b6a      	ldr	r3, [pc, #424]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b5d6:	68dc      	ldr	r4, [r3, #12]
 801b5d8:	4620      	mov	r0, r4
 801b5da:	f005 fa77 	bl	8020acc <lv_disp_get_dpi>
 801b5de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b5e2:	0040      	lsls	r0, r0, #1
 801b5e4:	28ef      	cmp	r0, #239	; 0xef
 801b5e6:	dc02      	bgt.n	801b5ee <lv_theme_default_init+0x2962>
 801b5e8:	2401      	movs	r4, #1
 801b5ea:	f7fe bb6f 	b.w	8019ccc <lv_theme_default_init+0x1040>
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f005 fa6c 	bl	8020acc <lv_disp_get_dpi>
 801b5f4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b5f8:	0043      	lsls	r3, r0, #1
 801b5fa:	3350      	adds	r3, #80	; 0x50
 801b5fc:	4a5f      	ldr	r2, [pc, #380]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b5fe:	fb82 1203 	smull	r1, r2, r2, r3
 801b602:	17dc      	asrs	r4, r3, #31
 801b604:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b608:	b224      	sxth	r4, r4
 801b60a:	f7fe bb5f 	b.w	8019ccc <lv_theme_default_init+0x1040>
 801b60e:	4b5c      	ldr	r3, [pc, #368]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b610:	68dc      	ldr	r4, [r3, #12]
 801b612:	4620      	mov	r0, r4
 801b614:	f005 fa5a 	bl	8020acc <lv_disp_get_dpi>
 801b618:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b61c:	0080      	lsls	r0, r0, #2
 801b61e:	28ef      	cmp	r0, #239	; 0xef
 801b620:	dc02      	bgt.n	801b628 <lv_theme_default_init+0x299c>
 801b622:	2401      	movs	r4, #1
 801b624:	f7fe bb52 	b.w	8019ccc <lv_theme_default_init+0x1040>
 801b628:	4620      	mov	r0, r4
 801b62a:	f005 fa4f 	bl	8020acc <lv_disp_get_dpi>
 801b62e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b632:	0083      	lsls	r3, r0, #2
 801b634:	3350      	adds	r3, #80	; 0x50
 801b636:	4a51      	ldr	r2, [pc, #324]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b638:	fb82 1203 	smull	r1, r2, r2, r3
 801b63c:	17dc      	asrs	r4, r3, #31
 801b63e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b642:	b224      	sxth	r4, r4
 801b644:	f7fe bb42 	b.w	8019ccc <lv_theme_default_init+0x1040>
 801b648:	4620      	mov	r0, r4
 801b64a:	f005 fa3f 	bl	8020acc <lv_disp_get_dpi>
 801b64e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b652:	0043      	lsls	r3, r0, #1
 801b654:	3350      	adds	r3, #80	; 0x50
 801b656:	4a49      	ldr	r2, [pc, #292]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b658:	fb82 1203 	smull	r1, r2, r2, r3
 801b65c:	17dc      	asrs	r4, r3, #31
 801b65e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b662:	b224      	sxth	r4, r4
 801b664:	f7fe bb32 	b.w	8019ccc <lv_theme_default_init+0x1040>
 801b668:	4630      	mov	r0, r6
 801b66a:	f005 fa2f 	bl	8020acc <lv_disp_get_dpi>
 801b66e:	3050      	adds	r0, #80	; 0x50
 801b670:	4b42      	ldr	r3, [pc, #264]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b672:	fb83 2300 	smull	r2, r3, r3, r0
 801b676:	17c1      	asrs	r1, r0, #31
 801b678:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b67c:	b209      	sxth	r1, r1
 801b67e:	f7fe bb3a 	b.w	8019cf6 <lv_theme_default_init+0x106a>
 801b682:	4630      	mov	r0, r6
 801b684:	f005 fa22 	bl	8020acc <lv_disp_get_dpi>
 801b688:	3050      	adds	r0, #80	; 0x50
 801b68a:	4b3c      	ldr	r3, [pc, #240]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b68c:	fb83 2300 	smull	r2, r3, r3, r0
 801b690:	17c1      	asrs	r1, r0, #31
 801b692:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801b696:	b209      	sxth	r1, r1
 801b698:	f7fe bb73 	b.w	8019d82 <lv_theme_default_init+0x10f6>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 801b69c:	4b38      	ldr	r3, [pc, #224]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b69e:	68dc      	ldr	r4, [r3, #12]
 801b6a0:	4620      	mov	r0, r4
 801b6a2:	f005 fa13 	bl	8020acc <lv_disp_get_dpi>
 801b6a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b6aa:	0040      	lsls	r0, r0, #1
 801b6ac:	28ef      	cmp	r0, #239	; 0xef
 801b6ae:	dc02      	bgt.n	801b6b6 <lv_theme_default_init+0x2a2a>
 801b6b0:	2401      	movs	r4, #1
 801b6b2:	f7fe bbbc 	b.w	8019e2e <lv_theme_default_init+0x11a2>
 801b6b6:	4620      	mov	r0, r4
 801b6b8:	f005 fa08 	bl	8020acc <lv_disp_get_dpi>
 801b6bc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b6c0:	0043      	lsls	r3, r0, #1
 801b6c2:	3350      	adds	r3, #80	; 0x50
 801b6c4:	4a2d      	ldr	r2, [pc, #180]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b6c6:	fb82 1203 	smull	r1, r2, r2, r3
 801b6ca:	17dc      	asrs	r4, r3, #31
 801b6cc:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b6d0:	b224      	sxth	r4, r4
 801b6d2:	f7fe bbac 	b.w	8019e2e <lv_theme_default_init+0x11a2>
 801b6d6:	4b2a      	ldr	r3, [pc, #168]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b6d8:	68dc      	ldr	r4, [r3, #12]
 801b6da:	4620      	mov	r0, r4
 801b6dc:	f005 f9f6 	bl	8020acc <lv_disp_get_dpi>
 801b6e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b6e4:	0080      	lsls	r0, r0, #2
 801b6e6:	28ef      	cmp	r0, #239	; 0xef
 801b6e8:	dc02      	bgt.n	801b6f0 <lv_theme_default_init+0x2a64>
 801b6ea:	2401      	movs	r4, #1
 801b6ec:	f7fe bb9f 	b.w	8019e2e <lv_theme_default_init+0x11a2>
 801b6f0:	4620      	mov	r0, r4
 801b6f2:	f005 f9eb 	bl	8020acc <lv_disp_get_dpi>
 801b6f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b6fa:	0083      	lsls	r3, r0, #2
 801b6fc:	3350      	adds	r3, #80	; 0x50
 801b6fe:	4a1f      	ldr	r2, [pc, #124]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b700:	fb82 1203 	smull	r1, r2, r2, r3
 801b704:	17dc      	asrs	r4, r3, #31
 801b706:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b70a:	b224      	sxth	r4, r4
 801b70c:	f7fe bb8f 	b.w	8019e2e <lv_theme_default_init+0x11a2>
 801b710:	4620      	mov	r0, r4
 801b712:	f005 f9db 	bl	8020acc <lv_disp_get_dpi>
 801b716:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b71a:	0043      	lsls	r3, r0, #1
 801b71c:	3350      	adds	r3, #80	; 0x50
 801b71e:	4a17      	ldr	r2, [pc, #92]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b720:	fb82 1203 	smull	r1, r2, r2, r3
 801b724:	17dc      	asrs	r4, r3, #31
 801b726:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b72a:	b224      	sxth	r4, r4
 801b72c:	f7fe bb7f 	b.w	8019e2e <lv_theme_default_init+0x11a2>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 801b730:	4b13      	ldr	r3, [pc, #76]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b732:	68dc      	ldr	r4, [r3, #12]
 801b734:	4620      	mov	r0, r4
 801b736:	f005 f9c9 	bl	8020acc <lv_disp_get_dpi>
 801b73a:	00c0      	lsls	r0, r0, #3
 801b73c:	28ef      	cmp	r0, #239	; 0xef
 801b73e:	dc02      	bgt.n	801b746 <lv_theme_default_init+0x2aba>
 801b740:	2401      	movs	r4, #1
 801b742:	f7fe bb92 	b.w	8019e6a <lv_theme_default_init+0x11de>
 801b746:	4620      	mov	r0, r4
 801b748:	f005 f9c0 	bl	8020acc <lv_disp_get_dpi>
 801b74c:	00c0      	lsls	r0, r0, #3
 801b74e:	3050      	adds	r0, #80	; 0x50
 801b750:	4b0a      	ldr	r3, [pc, #40]	; (801b77c <lv_theme_default_init+0x2af0>)
 801b752:	fb83 2300 	smull	r2, r3, r3, r0
 801b756:	17c4      	asrs	r4, r0, #31
 801b758:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b75c:	b224      	sxth	r4, r4
 801b75e:	f7fe bb84 	b.w	8019e6a <lv_theme_default_init+0x11de>
 801b762:	4b07      	ldr	r3, [pc, #28]	; (801b780 <lv_theme_default_init+0x2af4>)
 801b764:	68dc      	ldr	r4, [r3, #12]
 801b766:	4620      	mov	r0, r4
 801b768:	f005 f9b0 	bl	8020acc <lv_disp_get_dpi>
 801b76c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b770:	0040      	lsls	r0, r0, #1
 801b772:	28ef      	cmp	r0, #239	; 0xef
 801b774:	dc06      	bgt.n	801b784 <lv_theme_default_init+0x2af8>
 801b776:	2401      	movs	r4, #1
 801b778:	f7fe bb77 	b.w	8019e6a <lv_theme_default_init+0x11de>
 801b77c:	66666667 	.word	0x66666667
 801b780:	20002768 	.word	0x20002768
 801b784:	4620      	mov	r0, r4
 801b786:	f005 f9a1 	bl	8020acc <lv_disp_get_dpi>
 801b78a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b78e:	0043      	lsls	r3, r0, #1
 801b790:	3350      	adds	r3, #80	; 0x50
 801b792:	4ad6      	ldr	r2, [pc, #856]	; (801baec <lv_theme_default_init+0x2e60>)
 801b794:	fb82 1203 	smull	r1, r2, r2, r3
 801b798:	17dc      	asrs	r4, r3, #31
 801b79a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b79e:	b224      	sxth	r4, r4
 801b7a0:	f7fe bb63 	b.w	8019e6a <lv_theme_default_init+0x11de>
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	f005 f991 	bl	8020acc <lv_disp_get_dpi>
 801b7aa:	0043      	lsls	r3, r0, #1
 801b7ac:	3350      	adds	r3, #80	; 0x50
 801b7ae:	4acf      	ldr	r2, [pc, #828]	; (801baec <lv_theme_default_init+0x2e60>)
 801b7b0:	fb82 1203 	smull	r1, r2, r2, r3
 801b7b4:	17dc      	asrs	r4, r3, #31
 801b7b6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b7ba:	b224      	sxth	r4, r4
 801b7bc:	f7fe bb55 	b.w	8019e6a <lv_theme_default_init+0x11de>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 801b7c0:	4bcb      	ldr	r3, [pc, #812]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b7c2:	68dc      	ldr	r4, [r3, #12]
 801b7c4:	4620      	mov	r0, r4
 801b7c6:	f005 f981 	bl	8020acc <lv_disp_get_dpi>
 801b7ca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b7ce:	0040      	lsls	r0, r0, #1
 801b7d0:	28ef      	cmp	r0, #239	; 0xef
 801b7d2:	dc02      	bgt.n	801b7da <lv_theme_default_init+0x2b4e>
 801b7d4:	2401      	movs	r4, #1
 801b7d6:	f7fe bb68 	b.w	8019eaa <lv_theme_default_init+0x121e>
 801b7da:	4620      	mov	r0, r4
 801b7dc:	f005 f976 	bl	8020acc <lv_disp_get_dpi>
 801b7e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801b7e4:	0043      	lsls	r3, r0, #1
 801b7e6:	3350      	adds	r3, #80	; 0x50
 801b7e8:	4ac0      	ldr	r2, [pc, #768]	; (801baec <lv_theme_default_init+0x2e60>)
 801b7ea:	fb82 1203 	smull	r1, r2, r2, r3
 801b7ee:	17dc      	asrs	r4, r3, #31
 801b7f0:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b7f4:	b224      	sxth	r4, r4
 801b7f6:	f7fe bb58 	b.w	8019eaa <lv_theme_default_init+0x121e>
 801b7fa:	4bbd      	ldr	r3, [pc, #756]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b7fc:	68dc      	ldr	r4, [r3, #12]
 801b7fe:	4620      	mov	r0, r4
 801b800:	f005 f964 	bl	8020acc <lv_disp_get_dpi>
 801b804:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b808:	0080      	lsls	r0, r0, #2
 801b80a:	28ef      	cmp	r0, #239	; 0xef
 801b80c:	dc02      	bgt.n	801b814 <lv_theme_default_init+0x2b88>
 801b80e:	2401      	movs	r4, #1
 801b810:	f7fe bb4b 	b.w	8019eaa <lv_theme_default_init+0x121e>
 801b814:	4620      	mov	r0, r4
 801b816:	f005 f959 	bl	8020acc <lv_disp_get_dpi>
 801b81a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b81e:	0083      	lsls	r3, r0, #2
 801b820:	3350      	adds	r3, #80	; 0x50
 801b822:	4ab2      	ldr	r2, [pc, #712]	; (801baec <lv_theme_default_init+0x2e60>)
 801b824:	fb82 1203 	smull	r1, r2, r2, r3
 801b828:	17dc      	asrs	r4, r3, #31
 801b82a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b82e:	b224      	sxth	r4, r4
 801b830:	f7fe bb3b 	b.w	8019eaa <lv_theme_default_init+0x121e>
 801b834:	4620      	mov	r0, r4
 801b836:	f005 f949 	bl	8020acc <lv_disp_get_dpi>
 801b83a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b83e:	0043      	lsls	r3, r0, #1
 801b840:	3350      	adds	r3, #80	; 0x50
 801b842:	4aaa      	ldr	r2, [pc, #680]	; (801baec <lv_theme_default_init+0x2e60>)
 801b844:	fb82 1203 	smull	r1, r2, r2, r3
 801b848:	17dc      	asrs	r4, r3, #31
 801b84a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b84e:	b224      	sxth	r4, r4
 801b850:	f7fe bb2b 	b.w	8019eaa <lv_theme_default_init+0x121e>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 801b854:	4ba6      	ldr	r3, [pc, #664]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b856:	68dc      	ldr	r4, [r3, #12]
 801b858:	4620      	mov	r0, r4
 801b85a:	f005 f937 	bl	8020acc <lv_disp_get_dpi>
 801b85e:	00c0      	lsls	r0, r0, #3
 801b860:	28ef      	cmp	r0, #239	; 0xef
 801b862:	dc02      	bgt.n	801b86a <lv_theme_default_init+0x2bde>
 801b864:	2401      	movs	r4, #1
 801b866:	f7fe bb43 	b.w	8019ef0 <lv_theme_default_init+0x1264>
 801b86a:	4620      	mov	r0, r4
 801b86c:	f005 f92e 	bl	8020acc <lv_disp_get_dpi>
 801b870:	00c0      	lsls	r0, r0, #3
 801b872:	3050      	adds	r0, #80	; 0x50
 801b874:	4b9d      	ldr	r3, [pc, #628]	; (801baec <lv_theme_default_init+0x2e60>)
 801b876:	fb83 2300 	smull	r2, r3, r3, r0
 801b87a:	17c4      	asrs	r4, r0, #31
 801b87c:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b880:	b224      	sxth	r4, r4
 801b882:	f7fe bb35 	b.w	8019ef0 <lv_theme_default_init+0x1264>
 801b886:	4b9a      	ldr	r3, [pc, #616]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b888:	68dc      	ldr	r4, [r3, #12]
 801b88a:	4620      	mov	r0, r4
 801b88c:	f005 f91e 	bl	8020acc <lv_disp_get_dpi>
 801b890:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b894:	0040      	lsls	r0, r0, #1
 801b896:	28ef      	cmp	r0, #239	; 0xef
 801b898:	dc02      	bgt.n	801b8a0 <lv_theme_default_init+0x2c14>
 801b89a:	2401      	movs	r4, #1
 801b89c:	f7fe bb28 	b.w	8019ef0 <lv_theme_default_init+0x1264>
 801b8a0:	4620      	mov	r0, r4
 801b8a2:	f005 f913 	bl	8020acc <lv_disp_get_dpi>
 801b8a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b8aa:	0043      	lsls	r3, r0, #1
 801b8ac:	3350      	adds	r3, #80	; 0x50
 801b8ae:	4a8f      	ldr	r2, [pc, #572]	; (801baec <lv_theme_default_init+0x2e60>)
 801b8b0:	fb82 1203 	smull	r1, r2, r2, r3
 801b8b4:	17dc      	asrs	r4, r3, #31
 801b8b6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b8ba:	b224      	sxth	r4, r4
 801b8bc:	f7fe bb18 	b.w	8019ef0 <lv_theme_default_init+0x1264>
 801b8c0:	4620      	mov	r0, r4
 801b8c2:	f005 f903 	bl	8020acc <lv_disp_get_dpi>
 801b8c6:	0043      	lsls	r3, r0, #1
 801b8c8:	3350      	adds	r3, #80	; 0x50
 801b8ca:	4a88      	ldr	r2, [pc, #544]	; (801baec <lv_theme_default_init+0x2e60>)
 801b8cc:	fb82 1203 	smull	r1, r2, r2, r3
 801b8d0:	17dc      	asrs	r4, r3, #31
 801b8d2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b8d6:	b224      	sxth	r4, r4
 801b8d8:	f7fe bb0a 	b.w	8019ef0 <lv_theme_default_init+0x1264>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 801b8dc:	4b84      	ldr	r3, [pc, #528]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b8de:	68dc      	ldr	r4, [r3, #12]
 801b8e0:	4620      	mov	r0, r4
 801b8e2:	f005 f8f3 	bl	8020acc <lv_disp_get_dpi>
 801b8e6:	00c0      	lsls	r0, r0, #3
 801b8e8:	28ef      	cmp	r0, #239	; 0xef
 801b8ea:	dc02      	bgt.n	801b8f2 <lv_theme_default_init+0x2c66>
 801b8ec:	2401      	movs	r4, #1
 801b8ee:	f7fe bb1d 	b.w	8019f2c <lv_theme_default_init+0x12a0>
 801b8f2:	4620      	mov	r0, r4
 801b8f4:	f005 f8ea 	bl	8020acc <lv_disp_get_dpi>
 801b8f8:	00c0      	lsls	r0, r0, #3
 801b8fa:	3050      	adds	r0, #80	; 0x50
 801b8fc:	4b7b      	ldr	r3, [pc, #492]	; (801baec <lv_theme_default_init+0x2e60>)
 801b8fe:	fb83 2300 	smull	r2, r3, r3, r0
 801b902:	17c4      	asrs	r4, r0, #31
 801b904:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b908:	b224      	sxth	r4, r4
 801b90a:	f7fe bb0f 	b.w	8019f2c <lv_theme_default_init+0x12a0>
 801b90e:	4b78      	ldr	r3, [pc, #480]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b910:	68dc      	ldr	r4, [r3, #12]
 801b912:	4620      	mov	r0, r4
 801b914:	f005 f8da 	bl	8020acc <lv_disp_get_dpi>
 801b918:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b91c:	0040      	lsls	r0, r0, #1
 801b91e:	28ef      	cmp	r0, #239	; 0xef
 801b920:	dc02      	bgt.n	801b928 <lv_theme_default_init+0x2c9c>
 801b922:	2401      	movs	r4, #1
 801b924:	f7fe bb02 	b.w	8019f2c <lv_theme_default_init+0x12a0>
 801b928:	4620      	mov	r0, r4
 801b92a:	f005 f8cf 	bl	8020acc <lv_disp_get_dpi>
 801b92e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b932:	0043      	lsls	r3, r0, #1
 801b934:	3350      	adds	r3, #80	; 0x50
 801b936:	4a6d      	ldr	r2, [pc, #436]	; (801baec <lv_theme_default_init+0x2e60>)
 801b938:	fb82 1203 	smull	r1, r2, r2, r3
 801b93c:	17dc      	asrs	r4, r3, #31
 801b93e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b942:	b224      	sxth	r4, r4
 801b944:	f7fe baf2 	b.w	8019f2c <lv_theme_default_init+0x12a0>
 801b948:	4620      	mov	r0, r4
 801b94a:	f005 f8bf 	bl	8020acc <lv_disp_get_dpi>
 801b94e:	0043      	lsls	r3, r0, #1
 801b950:	3350      	adds	r3, #80	; 0x50
 801b952:	4a66      	ldr	r2, [pc, #408]	; (801baec <lv_theme_default_init+0x2e60>)
 801b954:	fb82 1203 	smull	r1, r2, r2, r3
 801b958:	17dc      	asrs	r4, r3, #31
 801b95a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b95e:	b224      	sxth	r4, r4
 801b960:	f7fe bae4 	b.w	8019f2c <lv_theme_default_init+0x12a0>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 801b964:	4b62      	ldr	r3, [pc, #392]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b966:	68dc      	ldr	r4, [r3, #12]
 801b968:	4620      	mov	r0, r4
 801b96a:	f005 f8af 	bl	8020acc <lv_disp_get_dpi>
 801b96e:	00c0      	lsls	r0, r0, #3
 801b970:	28ef      	cmp	r0, #239	; 0xef
 801b972:	dc02      	bgt.n	801b97a <lv_theme_default_init+0x2cee>
 801b974:	2401      	movs	r4, #1
 801b976:	f7fe bb4f 	b.w	801a018 <lv_theme_default_init+0x138c>
 801b97a:	4620      	mov	r0, r4
 801b97c:	f005 f8a6 	bl	8020acc <lv_disp_get_dpi>
 801b980:	00c0      	lsls	r0, r0, #3
 801b982:	3050      	adds	r0, #80	; 0x50
 801b984:	4b59      	ldr	r3, [pc, #356]	; (801baec <lv_theme_default_init+0x2e60>)
 801b986:	fb83 2300 	smull	r2, r3, r3, r0
 801b98a:	17c4      	asrs	r4, r0, #31
 801b98c:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 801b990:	b224      	sxth	r4, r4
 801b992:	f7fe bb41 	b.w	801a018 <lv_theme_default_init+0x138c>
 801b996:	4b56      	ldr	r3, [pc, #344]	; (801baf0 <lv_theme_default_init+0x2e64>)
 801b998:	68dc      	ldr	r4, [r3, #12]
 801b99a:	4620      	mov	r0, r4
 801b99c:	f005 f896 	bl	8020acc <lv_disp_get_dpi>
 801b9a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b9a4:	0040      	lsls	r0, r0, #1
 801b9a6:	28ef      	cmp	r0, #239	; 0xef
 801b9a8:	dc02      	bgt.n	801b9b0 <lv_theme_default_init+0x2d24>
 801b9aa:	2401      	movs	r4, #1
 801b9ac:	f7fe bb34 	b.w	801a018 <lv_theme_default_init+0x138c>
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	f005 f88b 	bl	8020acc <lv_disp_get_dpi>
 801b9b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b9ba:	0043      	lsls	r3, r0, #1
 801b9bc:	3350      	adds	r3, #80	; 0x50
 801b9be:	4a4b      	ldr	r2, [pc, #300]	; (801baec <lv_theme_default_init+0x2e60>)
 801b9c0:	fb82 1203 	smull	r1, r2, r2, r3
 801b9c4:	17dc      	asrs	r4, r3, #31
 801b9c6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b9ca:	b224      	sxth	r4, r4
 801b9cc:	f7fe bb24 	b.w	801a018 <lv_theme_default_init+0x138c>
 801b9d0:	4620      	mov	r0, r4
 801b9d2:	f005 f87b 	bl	8020acc <lv_disp_get_dpi>
 801b9d6:	0043      	lsls	r3, r0, #1
 801b9d8:	3350      	adds	r3, #80	; 0x50
 801b9da:	4a44      	ldr	r2, [pc, #272]	; (801baec <lv_theme_default_init+0x2e60>)
 801b9dc:	fb82 1203 	smull	r1, r2, r2, r3
 801b9e0:	17dc      	asrs	r4, r3, #31
 801b9e2:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801b9e6:	b224      	sxth	r4, r4
 801b9e8:	f7fe bb16 	b.w	801a018 <lv_theme_default_init+0x138c>
 801b9ec:	4630      	mov	r0, r6
 801b9ee:	f005 f86d 	bl	8020acc <lv_disp_get_dpi>
 801b9f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b9f6:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801b9fa:	4a3c      	ldr	r2, [pc, #240]	; (801baec <lv_theme_default_init+0x2e60>)
 801b9fc:	fb82 1203 	smull	r1, r2, r2, r3
 801ba00:	17d9      	asrs	r1, r3, #31
 801ba02:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ba06:	b209      	sxth	r1, r1
 801ba08:	f7fe bb22 	b.w	801a050 <lv_theme_default_init+0x13c4>
 801ba0c:	4620      	mov	r0, r4
 801ba0e:	f005 f85d 	bl	8020acc <lv_disp_get_dpi>
 801ba12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ba16:	0083      	lsls	r3, r0, #2
 801ba18:	3350      	adds	r3, #80	; 0x50
 801ba1a:	4a34      	ldr	r2, [pc, #208]	; (801baec <lv_theme_default_init+0x2e60>)
 801ba1c:	fb82 1203 	smull	r1, r2, r2, r3
 801ba20:	17dc      	asrs	r4, r3, #31
 801ba22:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ba26:	b224      	sxth	r4, r4
 801ba28:	f7fe bb2c 	b.w	801a084 <lv_theme_default_init+0x13f8>
 801ba2c:	4630      	mov	r0, r6
 801ba2e:	f005 f84d 	bl	8020acc <lv_disp_get_dpi>
 801ba32:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801ba36:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801ba3a:	4a2c      	ldr	r2, [pc, #176]	; (801baec <lv_theme_default_init+0x2e60>)
 801ba3c:	fb82 1203 	smull	r1, r2, r2, r3
 801ba40:	17d9      	asrs	r1, r3, #31
 801ba42:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ba46:	b209      	sxth	r1, r1
 801ba48:	f7fe bb33 	b.w	801a0b2 <lv_theme_default_init+0x1426>
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	f005 f83d 	bl	8020acc <lv_disp_get_dpi>
 801ba52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801ba56:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801ba5a:	4a24      	ldr	r2, [pc, #144]	; (801baec <lv_theme_default_init+0x2e60>)
 801ba5c:	fb82 1203 	smull	r1, r2, r2, r3
 801ba60:	17dc      	asrs	r4, r3, #31
 801ba62:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801ba66:	b224      	sxth	r4, r4
 801ba68:	f7fe bb4e 	b.w	801a108 <lv_theme_default_init+0x147c>
 801ba6c:	4630      	mov	r0, r6
 801ba6e:	f005 f82d 	bl	8020acc <lv_disp_get_dpi>
 801ba72:	3050      	adds	r0, #80	; 0x50
 801ba74:	4b1d      	ldr	r3, [pc, #116]	; (801baec <lv_theme_default_init+0x2e60>)
 801ba76:	fb83 2300 	smull	r2, r3, r3, r0
 801ba7a:	17c1      	asrs	r1, r0, #31
 801ba7c:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801ba80:	b209      	sxth	r1, r1
 801ba82:	f7fe bb5b 	b.w	801a13c <lv_theme_default_init+0x14b0>
 801ba86:	4630      	mov	r0, r6
 801ba88:	f005 f820 	bl	8020acc <lv_disp_get_dpi>
 801ba8c:	0043      	lsls	r3, r0, #1
 801ba8e:	3350      	adds	r3, #80	; 0x50
 801ba90:	4a16      	ldr	r2, [pc, #88]	; (801baec <lv_theme_default_init+0x2e60>)
 801ba92:	fb82 1203 	smull	r1, r2, r2, r3
 801ba96:	17d9      	asrs	r1, r3, #31
 801ba98:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801ba9c:	b209      	sxth	r1, r1
 801ba9e:	f7fe bb77 	b.w	801a190 <lv_theme_default_init+0x1504>
 801baa2:	4630      	mov	r0, r6
 801baa4:	f005 f812 	bl	8020acc <lv_disp_get_dpi>
 801baa8:	3050      	adds	r0, #80	; 0x50
 801baaa:	4b10      	ldr	r3, [pc, #64]	; (801baec <lv_theme_default_init+0x2e60>)
 801baac:	fb83 2300 	smull	r2, r3, r3, r0
 801bab0:	17c1      	asrs	r1, r0, #31
 801bab2:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801bab6:	b209      	sxth	r1, r1
 801bab8:	f7fe bb7a 	b.w	801a1b0 <lv_theme_default_init+0x1524>
                                                                                                   2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 801babc:	2101      	movs	r1, #1
 801babe:	2012      	movs	r0, #18
 801bac0:	f005 fe82 	bl	80217c8 <lv_palette_lighten>
 801bac4:	4601      	mov	r1, r0
 801bac6:	f7fe bb99 	b.w	801a1fc <lv_theme_default_init+0x1570>
 801baca:	4630      	mov	r0, r6
 801bacc:	f004 fffe 	bl	8020acc <lv_disp_get_dpi>
 801bad0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bad4:	0043      	lsls	r3, r0, #1
 801bad6:	3350      	adds	r3, #80	; 0x50
 801bad8:	4a04      	ldr	r2, [pc, #16]	; (801baec <lv_theme_default_init+0x2e60>)
 801bada:	fb82 1203 	smull	r1, r2, r2, r3
 801bade:	17d9      	asrs	r1, r3, #31
 801bae0:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bae4:	b209      	sxth	r1, r1
 801bae6:	f7fe bba1 	b.w	801a22c <lv_theme_default_init+0x15a0>
 801baea:	bf00      	nop
 801baec:	66666667 	.word	0x66666667
 801baf0:	20002768 	.word	0x20002768
 801baf4:	4620      	mov	r0, r4
 801baf6:	f004 ffe9 	bl	8020acc <lv_disp_get_dpi>
 801bafa:	0083      	lsls	r3, r0, #2
 801bafc:	3350      	adds	r3, #80	; 0x50
 801bafe:	4ace      	ldr	r2, [pc, #824]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bb00:	fb82 1203 	smull	r1, r2, r2, r3
 801bb04:	17dc      	asrs	r4, r3, #31
 801bb06:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801bb0a:	b224      	sxth	r4, r4
 801bb0c:	f7fe bba4 	b.w	801a258 <lv_theme_default_init+0x15cc>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 801bb10:	4bca      	ldr	r3, [pc, #808]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bb12:	68de      	ldr	r6, [r3, #12]
 801bb14:	4630      	mov	r0, r6
 801bb16:	f004 ffd9 	bl	8020acc <lv_disp_get_dpi>
 801bb1a:	00c0      	lsls	r0, r0, #3
 801bb1c:	28ef      	cmp	r0, #239	; 0xef
 801bb1e:	dc05      	bgt.n	801bb2c <lv_theme_default_init+0x2ea0>
 801bb20:	2101      	movs	r1, #1
 801bb22:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 801bb26:	1049      	asrs	r1, r1, #1
 801bb28:	f7fe bbe8 	b.w	801a2fc <lv_theme_default_init+0x1670>
 801bb2c:	4630      	mov	r0, r6
 801bb2e:	f004 ffcd 	bl	8020acc <lv_disp_get_dpi>
 801bb32:	00c0      	lsls	r0, r0, #3
 801bb34:	3050      	adds	r0, #80	; 0x50
 801bb36:	4bc0      	ldr	r3, [pc, #768]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bb38:	fb83 2300 	smull	r2, r3, r3, r0
 801bb3c:	17c1      	asrs	r1, r0, #31
 801bb3e:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801bb42:	b209      	sxth	r1, r1
 801bb44:	e7ed      	b.n	801bb22 <lv_theme_default_init+0x2e96>
 801bb46:	4bbd      	ldr	r3, [pc, #756]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bb48:	68de      	ldr	r6, [r3, #12]
 801bb4a:	4630      	mov	r0, r6
 801bb4c:	f004 ffbe 	bl	8020acc <lv_disp_get_dpi>
 801bb50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bb54:	0080      	lsls	r0, r0, #2
 801bb56:	28ef      	cmp	r0, #239	; 0xef
 801bb58:	dc02      	bgt.n	801bb60 <lv_theme_default_init+0x2ed4>
 801bb5a:	2101      	movs	r1, #1
 801bb5c:	f7fe bbce 	b.w	801a2fc <lv_theme_default_init+0x1670>
 801bb60:	4630      	mov	r0, r6
 801bb62:	f004 ffb3 	bl	8020acc <lv_disp_get_dpi>
 801bb66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bb6a:	0083      	lsls	r3, r0, #2
 801bb6c:	3350      	adds	r3, #80	; 0x50
 801bb6e:	4ab2      	ldr	r2, [pc, #712]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bb70:	fb82 1203 	smull	r1, r2, r2, r3
 801bb74:	17d9      	asrs	r1, r3, #31
 801bb76:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bb7a:	b209      	sxth	r1, r1
 801bb7c:	f7fe bbbe 	b.w	801a2fc <lv_theme_default_init+0x1670>
 801bb80:	4630      	mov	r0, r6
 801bb82:	f004 ffa3 	bl	8020acc <lv_disp_get_dpi>
 801bb86:	00c3      	lsls	r3, r0, #3
 801bb88:	3350      	adds	r3, #80	; 0x50
 801bb8a:	4aab      	ldr	r2, [pc, #684]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bb8c:	fb82 1203 	smull	r1, r2, r2, r3
 801bb90:	17d9      	asrs	r1, r3, #31
 801bb92:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bb96:	b209      	sxth	r1, r1
 801bb98:	f7fe bbb0 	b.w	801a2fc <lv_theme_default_init+0x1670>
 801bb9c:	4630      	mov	r0, r6
 801bb9e:	f004 ff95 	bl	8020acc <lv_disp_get_dpi>
 801bba2:	0043      	lsls	r3, r0, #1
 801bba4:	3350      	adds	r3, #80	; 0x50
 801bba6:	4aa4      	ldr	r2, [pc, #656]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bba8:	fb82 1203 	smull	r1, r2, r2, r3
 801bbac:	17d9      	asrs	r1, r3, #31
 801bbae:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bbb2:	b209      	sxth	r1, r1
 801bbb4:	f7fe bbbe 	b.w	801a334 <lv_theme_default_init+0x16a8>
 801bbb8:	4630      	mov	r0, r6
 801bbba:	f004 ff87 	bl	8020acc <lv_disp_get_dpi>
 801bbbe:	0043      	lsls	r3, r0, #1
 801bbc0:	3350      	adds	r3, #80	; 0x50
 801bbc2:	4a9d      	ldr	r2, [pc, #628]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bbc4:	fb82 1203 	smull	r1, r2, r2, r3
 801bbc8:	17d9      	asrs	r1, r3, #31
 801bbca:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bbce:	b209      	sxth	r1, r1
 801bbd0:	f7fe bbd9 	b.w	801a386 <lv_theme_default_init+0x16fa>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 801bbd4:	4b99      	ldr	r3, [pc, #612]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bbd6:	68dc      	ldr	r4, [r3, #12]
 801bbd8:	4620      	mov	r0, r4
 801bbda:	f004 ff77 	bl	8020acc <lv_disp_get_dpi>
 801bbde:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bbe2:	00c0      	lsls	r0, r0, #3
 801bbe4:	28ef      	cmp	r0, #239	; 0xef
 801bbe6:	dc02      	bgt.n	801bbee <lv_theme_default_init+0x2f62>
 801bbe8:	2401      	movs	r4, #1
 801bbea:	f7fe bbec 	b.w	801a3c6 <lv_theme_default_init+0x173a>
 801bbee:	4620      	mov	r0, r4
 801bbf0:	f004 ff6c 	bl	8020acc <lv_disp_get_dpi>
 801bbf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bbf8:	00c3      	lsls	r3, r0, #3
 801bbfa:	3350      	adds	r3, #80	; 0x50
 801bbfc:	4a8e      	ldr	r2, [pc, #568]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bbfe:	fb82 1203 	smull	r1, r2, r2, r3
 801bc02:	17dc      	asrs	r4, r3, #31
 801bc04:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801bc08:	b224      	sxth	r4, r4
 801bc0a:	f7fe bbdc 	b.w	801a3c6 <lv_theme_default_init+0x173a>
 801bc0e:	4b8b      	ldr	r3, [pc, #556]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bc10:	68dc      	ldr	r4, [r3, #12]
 801bc12:	4620      	mov	r0, r4
 801bc14:	f004 ff5a 	bl	8020acc <lv_disp_get_dpi>
 801bc18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bc1c:	0080      	lsls	r0, r0, #2
 801bc1e:	28ef      	cmp	r0, #239	; 0xef
 801bc20:	dc02      	bgt.n	801bc28 <lv_theme_default_init+0x2f9c>
 801bc22:	2401      	movs	r4, #1
 801bc24:	f7fe bbcf 	b.w	801a3c6 <lv_theme_default_init+0x173a>
 801bc28:	4620      	mov	r0, r4
 801bc2a:	f004 ff4f 	bl	8020acc <lv_disp_get_dpi>
 801bc2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bc32:	0083      	lsls	r3, r0, #2
 801bc34:	3350      	adds	r3, #80	; 0x50
 801bc36:	4a80      	ldr	r2, [pc, #512]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bc38:	fb82 1203 	smull	r1, r2, r2, r3
 801bc3c:	17dc      	asrs	r4, r3, #31
 801bc3e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801bc42:	b224      	sxth	r4, r4
 801bc44:	f7fe bbbf 	b.w	801a3c6 <lv_theme_default_init+0x173a>
 801bc48:	4620      	mov	r0, r4
 801bc4a:	f004 ff3f 	bl	8020acc <lv_disp_get_dpi>
 801bc4e:	0103      	lsls	r3, r0, #4
 801bc50:	3350      	adds	r3, #80	; 0x50
 801bc52:	4a79      	ldr	r2, [pc, #484]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bc54:	fb82 1203 	smull	r1, r2, r2, r3
 801bc58:	17dc      	asrs	r4, r3, #31
 801bc5a:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801bc5e:	b224      	sxth	r4, r4
 801bc60:	f7fe bbb1 	b.w	801a3c6 <lv_theme_default_init+0x173a>
 801bc64:	4630      	mov	r0, r6
 801bc66:	f004 ff31 	bl	8020acc <lv_disp_get_dpi>
 801bc6a:	3050      	adds	r0, #80	; 0x50
 801bc6c:	4b72      	ldr	r3, [pc, #456]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bc6e:	fb83 2300 	smull	r2, r3, r3, r0
 801bc72:	17c1      	asrs	r1, r0, #31
 801bc74:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 801bc78:	b209      	sxth	r1, r1
 801bc7a:	f7fe bbda 	b.w	801a432 <lv_theme_default_init+0x17a6>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 801bc7e:	4b6f      	ldr	r3, [pc, #444]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bc80:	68dc      	ldr	r4, [r3, #12]
 801bc82:	4620      	mov	r0, r4
 801bc84:	f004 ff22 	bl	8020acc <lv_disp_get_dpi>
 801bc88:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801bc8c:	0040      	lsls	r0, r0, #1
 801bc8e:	28ef      	cmp	r0, #239	; 0xef
 801bc90:	dc02      	bgt.n	801bc98 <lv_theme_default_init+0x300c>
 801bc92:	2401      	movs	r4, #1
 801bc94:	f7fe bbf5 	b.w	801a482 <lv_theme_default_init+0x17f6>
 801bc98:	4620      	mov	r0, r4
 801bc9a:	f004 ff17 	bl	8020acc <lv_disp_get_dpi>
 801bc9e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801bca2:	0043      	lsls	r3, r0, #1
 801bca4:	3350      	adds	r3, #80	; 0x50
 801bca6:	4a64      	ldr	r2, [pc, #400]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bca8:	fb82 1203 	smull	r1, r2, r2, r3
 801bcac:	17dc      	asrs	r4, r3, #31
 801bcae:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801bcb2:	b224      	sxth	r4, r4
 801bcb4:	f7fe bbe5 	b.w	801a482 <lv_theme_default_init+0x17f6>
 801bcb8:	4b60      	ldr	r3, [pc, #384]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bcba:	68dc      	ldr	r4, [r3, #12]
 801bcbc:	4620      	mov	r0, r4
 801bcbe:	f004 ff05 	bl	8020acc <lv_disp_get_dpi>
 801bcc2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bcc6:	0080      	lsls	r0, r0, #2
 801bcc8:	28ef      	cmp	r0, #239	; 0xef
 801bcca:	dc02      	bgt.n	801bcd2 <lv_theme_default_init+0x3046>
 801bccc:	2401      	movs	r4, #1
 801bcce:	f7fe bbd8 	b.w	801a482 <lv_theme_default_init+0x17f6>
 801bcd2:	4620      	mov	r0, r4
 801bcd4:	f004 fefa 	bl	8020acc <lv_disp_get_dpi>
 801bcd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bcdc:	0083      	lsls	r3, r0, #2
 801bcde:	3350      	adds	r3, #80	; 0x50
 801bce0:	4a55      	ldr	r2, [pc, #340]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bce2:	fb82 1203 	smull	r1, r2, r2, r3
 801bce6:	17dc      	asrs	r4, r3, #31
 801bce8:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801bcec:	b224      	sxth	r4, r4
 801bcee:	f7fe bbc8 	b.w	801a482 <lv_theme_default_init+0x17f6>
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	f004 feea 	bl	8020acc <lv_disp_get_dpi>
 801bcf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bcfc:	0043      	lsls	r3, r0, #1
 801bcfe:	3350      	adds	r3, #80	; 0x50
 801bd00:	4a4d      	ldr	r2, [pc, #308]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bd02:	fb82 1203 	smull	r1, r2, r2, r3
 801bd06:	17dc      	asrs	r4, r3, #31
 801bd08:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
 801bd0c:	b224      	sxth	r4, r4
 801bd0e:	f7fe bbb8 	b.w	801a482 <lv_theme_default_init+0x17f6>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 801bd12:	4b4a      	ldr	r3, [pc, #296]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bd14:	68de      	ldr	r6, [r3, #12]
 801bd16:	4630      	mov	r0, r6
 801bd18:	f004 fed8 	bl	8020acc <lv_disp_get_dpi>
 801bd1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801bd20:	0040      	lsls	r0, r0, #1
 801bd22:	28ef      	cmp	r0, #239	; 0xef
 801bd24:	dc02      	bgt.n	801bd2c <lv_theme_default_init+0x30a0>
 801bd26:	2101      	movs	r1, #1
 801bd28:	f7fe bbd3 	b.w	801a4d2 <lv_theme_default_init+0x1846>
 801bd2c:	4630      	mov	r0, r6
 801bd2e:	f004 fecd 	bl	8020acc <lv_disp_get_dpi>
 801bd32:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801bd36:	0043      	lsls	r3, r0, #1
 801bd38:	3350      	adds	r3, #80	; 0x50
 801bd3a:	4a3f      	ldr	r2, [pc, #252]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bd3c:	fb82 1203 	smull	r1, r2, r2, r3
 801bd40:	17d9      	asrs	r1, r3, #31
 801bd42:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bd46:	b209      	sxth	r1, r1
 801bd48:	f7fe bbc3 	b.w	801a4d2 <lv_theme_default_init+0x1846>
 801bd4c:	4b3b      	ldr	r3, [pc, #236]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bd4e:	68de      	ldr	r6, [r3, #12]
 801bd50:	4630      	mov	r0, r6
 801bd52:	f004 febb 	bl	8020acc <lv_disp_get_dpi>
 801bd56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bd5a:	0080      	lsls	r0, r0, #2
 801bd5c:	28ef      	cmp	r0, #239	; 0xef
 801bd5e:	dc02      	bgt.n	801bd66 <lv_theme_default_init+0x30da>
 801bd60:	2101      	movs	r1, #1
 801bd62:	f7fe bbb6 	b.w	801a4d2 <lv_theme_default_init+0x1846>
 801bd66:	4630      	mov	r0, r6
 801bd68:	f004 feb0 	bl	8020acc <lv_disp_get_dpi>
 801bd6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bd70:	0083      	lsls	r3, r0, #2
 801bd72:	3350      	adds	r3, #80	; 0x50
 801bd74:	4a30      	ldr	r2, [pc, #192]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bd76:	fb82 1203 	smull	r1, r2, r2, r3
 801bd7a:	17d9      	asrs	r1, r3, #31
 801bd7c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bd80:	b209      	sxth	r1, r1
 801bd82:	f7fe bba6 	b.w	801a4d2 <lv_theme_default_init+0x1846>
 801bd86:	4630      	mov	r0, r6
 801bd88:	f004 fea0 	bl	8020acc <lv_disp_get_dpi>
 801bd8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bd90:	0043      	lsls	r3, r0, #1
 801bd92:	3350      	adds	r3, #80	; 0x50
 801bd94:	4a28      	ldr	r2, [pc, #160]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bd96:	fb82 1203 	smull	r1, r2, r2, r3
 801bd9a:	17d9      	asrs	r1, r3, #31
 801bd9c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bda0:	b209      	sxth	r1, r1
 801bda2:	f7fe bb96 	b.w	801a4d2 <lv_theme_default_init+0x1846>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 801bda6:	4b25      	ldr	r3, [pc, #148]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bda8:	68de      	ldr	r6, [r3, #12]
 801bdaa:	4630      	mov	r0, r6
 801bdac:	f004 fe8e 	bl	8020acc <lv_disp_get_dpi>
 801bdb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bdb4:	00c0      	lsls	r0, r0, #3
 801bdb6:	28ef      	cmp	r0, #239	; 0xef
 801bdb8:	dc02      	bgt.n	801bdc0 <lv_theme_default_init+0x3134>
 801bdba:	2101      	movs	r1, #1
 801bdbc:	f7fe bba7 	b.w	801a50e <lv_theme_default_init+0x1882>
 801bdc0:	4630      	mov	r0, r6
 801bdc2:	f004 fe83 	bl	8020acc <lv_disp_get_dpi>
 801bdc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bdca:	00c3      	lsls	r3, r0, #3
 801bdcc:	3350      	adds	r3, #80	; 0x50
 801bdce:	4a1a      	ldr	r2, [pc, #104]	; (801be38 <lv_theme_default_init+0x31ac>)
 801bdd0:	fb82 1203 	smull	r1, r2, r2, r3
 801bdd4:	17d9      	asrs	r1, r3, #31
 801bdd6:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801bdda:	b209      	sxth	r1, r1
 801bddc:	f7fe bb97 	b.w	801a50e <lv_theme_default_init+0x1882>
 801bde0:	4b16      	ldr	r3, [pc, #88]	; (801be3c <lv_theme_default_init+0x31b0>)
 801bde2:	68de      	ldr	r6, [r3, #12]
 801bde4:	4630      	mov	r0, r6
 801bde6:	f004 fe71 	bl	8020acc <lv_disp_get_dpi>
 801bdea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bdee:	0080      	lsls	r0, r0, #2
 801bdf0:	28ef      	cmp	r0, #239	; 0xef
 801bdf2:	dc02      	bgt.n	801bdfa <lv_theme_default_init+0x316e>
 801bdf4:	2101      	movs	r1, #1
 801bdf6:	f7fe bb8a 	b.w	801a50e <lv_theme_default_init+0x1882>
 801bdfa:	4630      	mov	r0, r6
 801bdfc:	f004 fe66 	bl	8020acc <lv_disp_get_dpi>
 801be00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801be04:	0083      	lsls	r3, r0, #2
 801be06:	3350      	adds	r3, #80	; 0x50
 801be08:	4a0b      	ldr	r2, [pc, #44]	; (801be38 <lv_theme_default_init+0x31ac>)
 801be0a:	fb82 1203 	smull	r1, r2, r2, r3
 801be0e:	17d9      	asrs	r1, r3, #31
 801be10:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801be14:	b209      	sxth	r1, r1
 801be16:	f7fe bb7a 	b.w	801a50e <lv_theme_default_init+0x1882>
 801be1a:	4630      	mov	r0, r6
 801be1c:	f004 fe56 	bl	8020acc <lv_disp_get_dpi>
 801be20:	0103      	lsls	r3, r0, #4
 801be22:	3350      	adds	r3, #80	; 0x50
 801be24:	4a04      	ldr	r2, [pc, #16]	; (801be38 <lv_theme_default_init+0x31ac>)
 801be26:	fb82 1203 	smull	r1, r2, r2, r3
 801be2a:	17d9      	asrs	r1, r3, #31
 801be2c:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801be30:	b209      	sxth	r1, r1
 801be32:	f7fe bb6c 	b.w	801a50e <lv_theme_default_init+0x1882>
 801be36:	bf00      	nop
 801be38:	66666667 	.word	0x66666667
 801be3c:	20002768 	.word	0x20002768
 801be40:	4630      	mov	r0, r6
 801be42:	f004 fe43 	bl	8020acc <lv_disp_get_dpi>
 801be46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801be4a:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801be4e:	4a0c      	ldr	r2, [pc, #48]	; (801be80 <lv_theme_default_init+0x31f4>)
 801be50:	fb82 1203 	smull	r1, r2, r2, r3
 801be54:	17d9      	asrs	r1, r3, #31
 801be56:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801be5a:	b209      	sxth	r1, r1
 801be5c:	f7fe bb8c 	b.w	801a578 <lv_theme_default_init+0x18ec>
 801be60:	4630      	mov	r0, r6
 801be62:	f004 fe33 	bl	8020acc <lv_disp_get_dpi>
 801be66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801be6a:	f100 0350 	add.w	r3, r0, #80	; 0x50
 801be6e:	4a04      	ldr	r2, [pc, #16]	; (801be80 <lv_theme_default_init+0x31f4>)
 801be70:	fb82 1203 	smull	r1, r2, r2, r3
 801be74:	17d9      	asrs	r1, r3, #31
 801be76:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 801be7a:	b209      	sxth	r1, r1
 801be7c:	f7fe bb95 	b.w	801a5aa <lv_theme_default_init+0x191e>
 801be80:	66666667 	.word	0x66666667

0801be84 <lv_theme_default_get>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 801be84:	4b03      	ldr	r3, [pc, #12]	; (801be94 <lv_theme_default_get+0x10>)
 801be86:	681b      	ldr	r3, [r3, #0]
    return (lv_theme_t *)&theme;
 801be88:	2b00      	cmp	r3, #0
}
 801be8a:	4803      	ldr	r0, [pc, #12]	; (801be98 <lv_theme_default_get+0x14>)
 801be8c:	bf08      	it	eq
 801be8e:	4618      	moveq	r0, r3
 801be90:	4770      	bx	lr
 801be92:	bf00      	nop
 801be94:	2000297c 	.word	0x2000297c
 801be98:	20002768 	.word	0x20002768

0801be9c <lv_theme_default_is_inited>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 801be9c:	4b02      	ldr	r3, [pc, #8]	; (801bea8 <lv_theme_default_is_inited+0xc>)
 801be9e:	6818      	ldr	r0, [r3, #0]
}
 801bea0:	3800      	subs	r0, #0
 801bea2:	bf18      	it	ne
 801bea4:	2001      	movne	r0, #1
 801bea6:	4770      	bx	lr
 801bea8:	2000297c 	.word	0x2000297c

0801beac <invalidate_point>:
}

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 801beac:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 801beb0:	428b      	cmp	r3, r1
 801beb2:	d800      	bhi.n	801beb6 <invalidate_point+0xa>
 801beb4:	4770      	bx	lr
{
 801beb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801beba:	b082      	sub	sp, #8
 801bebc:	4604      	mov	r4, r0
 801bebe:	460d      	mov	r5, r1

    lv_coord_t w  = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801bec0:	f7ec f981 	bl	80081c6 <lv_obj_get_content_width>
 801bec4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801bec8:	fb00 f303 	mul.w	r3, r0, r3
 801becc:	f343 260f 	sbfx	r6, r3, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 801bed0:	4620      	mov	r0, r4
 801bed2:	f7ed fdcf 	bl	8009a74 <lv_obj_get_scroll_left>
 801bed6:	4607      	mov	r7, r0

    /*In shift mode the whole chart changes so the whole object*/
    if(chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 801bed8:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801bedc:	f013 0f08 	tst.w	r3, #8
 801bee0:	d00b      	beq.n	801befa <invalidate_point+0x4e>
        lv_obj_invalidate(obj);
        return;
    }

    if(chart->type == LV_CHART_TYPE_LINE) {
 801bee2:	f003 0307 	and.w	r3, r3, #7
 801bee6:	2b01      	cmp	r3, #1
 801bee8:	d00b      	beq.n	801bf02 <invalidate_point+0x56>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
            lv_obj_invalidate_area(obj, &coords);
        }
    }
    else if(chart->type == LV_CHART_TYPE_BAR) {
 801beea:	2b02      	cmp	r3, #2
 801beec:	d06a      	beq.n	801bfc4 <invalidate_point+0x118>
        col_a.x1 -= block_gap;

        lv_obj_invalidate_area(obj, &col_a);
    }
    else {
        lv_obj_invalidate(obj);
 801beee:	4620      	mov	r0, r4
 801bef0:	f7ec fba4 	bl	800863c <lv_obj_invalidate>
    }
}
 801bef4:	b002      	add	sp, #8
 801bef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_obj_invalidate(obj);
 801befa:	4620      	mov	r0, r4
 801befc:	f7ec fb9e 	bl	800863c <lv_obj_invalidate>
        return;
 801bf00:	e7f8      	b.n	801bef4 <invalidate_point+0x48>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bf02:	2232      	movs	r2, #50	; 0x32
 801bf04:	2100      	movs	r1, #0
 801bf06:	4620      	mov	r0, r4
 801bf08:	f7ee ffd0 	bl	800aeac <lv_obj_get_style_prop>
 801bf0c:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801bf0e:	2212      	movs	r2, #18
 801bf10:	2100      	movs	r1, #0
 801bf12:	4620      	mov	r0, r4
 801bf14:	f7ee ffca 	bl	800aeac <lv_obj_get_style_prop>
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 801bf18:	4440      	add	r0, r8
 801bf1a:	8aa3      	ldrh	r3, [r4, #20]
 801bf1c:	4418      	add	r0, r3
 801bf1e:	1bc7      	subs	r7, r0, r7
 801bf20:	b2bf      	uxth	r7, r7
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801bf22:	2249      	movs	r2, #73	; 0x49
 801bf24:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f7ee ffbf 	bl	800aeac <lv_obj_get_style_prop>
 801bf2e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801bf30:	2201      	movs	r2, #1
 801bf32:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801bf36:	4620      	mov	r0, r4
 801bf38:	f7ee ffb8 	bl	800aeac <lv_obj_get_style_prop>
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
    dest->y1 = src->y1;
 801bf3c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
    dest->x2 = src->x2;
    dest->y2 = src->y2;
 801bf40:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
        coords.y1 -= line_width + point_w;
 801bf44:	4480      	add	r8, r0
 801bf46:	fa1f f888 	uxth.w	r8, r8
 801bf4a:	eba2 0208 	sub.w	r2, r2, r8
 801bf4e:	f8ad 2002 	strh.w	r2, [sp, #2]
        coords.y2 += line_width + point_w;
 801bf52:	4443      	add	r3, r8
 801bf54:	f8ad 3006 	strh.w	r3, [sp, #6]
        if(i < chart->point_cnt - 1) {
 801bf58:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801bf5c:	3b01      	subs	r3, #1
 801bf5e:	429d      	cmp	r5, r3
 801bf60:	db1a      	blt.n	801bf98 <invalidate_point+0xec>
        if(i > 0) {
 801bf62:	2d00      	cmp	r5, #0
 801bf64:	d0c6      	beq.n	801bef4 <invalidate_point+0x48>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801bf66:	3d01      	subs	r5, #1
 801bf68:	fb06 f505 	mul.w	r5, r6, r5
 801bf6c:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801bf70:	3b01      	subs	r3, #1
 801bf72:	fb95 f2f3 	sdiv	r2, r5, r3
 801bf76:	eba7 0108 	sub.w	r1, r7, r8
 801bf7a:	440a      	add	r2, r1
 801bf7c:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801bf80:	442e      	add	r6, r5
 801bf82:	fb96 f6f3 	sdiv	r6, r6, r3
 801bf86:	4447      	add	r7, r8
 801bf88:	4437      	add	r7, r6
 801bf8a:	f8ad 7004 	strh.w	r7, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 801bf8e:	4669      	mov	r1, sp
 801bf90:	4620      	mov	r0, r4
 801bf92:	f7ec fb2f 	bl	80085f4 <lv_obj_invalidate_area>
 801bf96:	e7ad      	b.n	801bef4 <invalidate_point+0x48>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 801bf98:	fb06 f205 	mul.w	r2, r6, r5
 801bf9c:	fb92 f1f3 	sdiv	r1, r2, r3
 801bfa0:	eba7 0008 	sub.w	r0, r7, r8
 801bfa4:	4401      	add	r1, r0
 801bfa6:	f8ad 1000 	strh.w	r1, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 801bfaa:	4432      	add	r2, r6
 801bfac:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfb0:	eb07 0208 	add.w	r2, r7, r8
 801bfb4:	4413      	add	r3, r2
 801bfb6:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 801bfba:	4669      	mov	r1, sp
 801bfbc:	4620      	mov	r0, r4
 801bfbe:	f7ec fb19 	bl	80085f4 <lv_obj_invalidate_area>
 801bfc2:	e7ce      	b.n	801bf62 <invalidate_point+0xb6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801bfc4:	2215      	movs	r2, #21
 801bfc6:	2100      	movs	r1, #0
 801bfc8:	4620      	mov	r0, r4
 801bfca:	f7ee ff6f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bfce:	b200      	sxth	r0, r0
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801bfd0:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801bfd4:	fb00 f303 	mul.w	r3, r0, r3
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801bfd8:	ea4f 2823 	mov.w	r8, r3, asr #8
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 801bfdc:	eb06 2623 	add.w	r6, r6, r3, asr #8
 801bfe0:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801bfe4:	fb96 f6f3 	sdiv	r6, r6, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801bfe8:	2232      	movs	r2, #50	; 0x32
 801bfea:	2100      	movs	r1, #0
 801bfec:	4620      	mov	r0, r4
 801bfee:	f7ee ff5d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801bff2:	fa0f fa80 	sxth.w	sl, r0
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 801bff6:	b2b6      	uxth	r6, r6
 801bff8:	fb06 f505 	mul.w	r5, r6, r5
 801bffc:	b2ad      	uxth	r5, r5
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801bffe:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801c002:	44ca      	add	sl, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c004:	2212      	movs	r2, #18
 801c006:	2100      	movs	r1, #0
 801c008:	4620      	mov	r0, r4
 801c00a:	f7ee ff4f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c00e:	fa0f f980 	sxth.w	r9, r0
        lv_obj_get_coords(obj, &col_a);
 801c012:	4669      	mov	r1, sp
 801c014:	4620      	mov	r0, r4
 801c016:	f7ec f86c 	bl	80080f2 <lv_obj_get_coords>
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 801c01a:	44d1      	add	r9, sl
        col_a.x1 = x_act - scroll_left;
 801c01c:	eba9 0707 	sub.w	r7, r9, r7
 801c020:	443d      	add	r5, r7
 801c022:	b2ad      	uxth	r5, r5
        col_a.x2 = col_a.x1 + block_w;
 801c024:	442e      	add	r6, r5
 801c026:	f8ad 6004 	strh.w	r6, [sp, #4]
        col_a.x1 -= block_gap;
 801c02a:	eba5 0508 	sub.w	r5, r5, r8
 801c02e:	f8ad 5000 	strh.w	r5, [sp]
        lv_obj_invalidate_area(obj, &col_a);
 801c032:	4669      	mov	r1, sp
 801c034:	4620      	mov	r0, r4
 801c036:	f7ec fadd 	bl	80085f4 <lv_obj_invalidate_area>
 801c03a:	e75b      	b.n	801bef4 <invalidate_point+0x48>

0801c03c <lv_chart_destructor>:
{
 801c03c:	b570      	push	{r4, r5, r6, lr}
 801c03e:	460d      	mov	r5, r1
    while(chart->series_ll.head) {
 801c040:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801c042:	b1bb      	cbz	r3, 801c074 <lv_chart_destructor+0x38>
        ser = _lv_ll_get_head(&chart->series_ll);
 801c044:	f101 0624 	add.w	r6, r1, #36	; 0x24
 801c048:	e008      	b.n	801c05c <lv_chart_destructor+0x20>
        _lv_ll_remove(&chart->series_ll, ser);
 801c04a:	4621      	mov	r1, r4
 801c04c:	4630      	mov	r0, r6
 801c04e:	f005 fdf4 	bl	8021c3a <_lv_ll_remove>
        lv_mem_free(ser);
 801c052:	4620      	mov	r0, r4
 801c054:	f005 ff88 	bl	8021f68 <lv_mem_free>
    while(chart->series_ll.head) {
 801c058:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801c05a:	b15b      	cbz	r3, 801c074 <lv_chart_destructor+0x38>
        ser = _lv_ll_get_head(&chart->series_ll);
 801c05c:	4630      	mov	r0, r6
 801c05e:	f005 fe2f 	bl	8021cc0 <_lv_ll_get_head>
 801c062:	4604      	mov	r4, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 801c064:	7b03      	ldrb	r3, [r0, #12]
 801c066:	f013 0f04 	tst.w	r3, #4
 801c06a:	d1ee      	bne.n	801c04a <lv_chart_destructor+0xe>
 801c06c:	6840      	ldr	r0, [r0, #4]
 801c06e:	f005 ff7b 	bl	8021f68 <lv_mem_free>
 801c072:	e7ea      	b.n	801c04a <lv_chart_destructor+0xe>
    _lv_ll_clear(&chart->series_ll);
 801c074:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801c078:	f005 fe0e 	bl	8021c98 <_lv_ll_clear>
    while(chart->cursor_ll.head) {
 801c07c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801c07e:	b17b      	cbz	r3, 801c0a0 <lv_chart_destructor+0x64>
        cur = _lv_ll_get_head(&chart->cursor_ll);
 801c080:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801c084:	4630      	mov	r0, r6
 801c086:	f005 fe1b 	bl	8021cc0 <_lv_ll_get_head>
 801c08a:	4604      	mov	r4, r0
        _lv_ll_remove(&chart->cursor_ll, cur);
 801c08c:	4601      	mov	r1, r0
 801c08e:	4630      	mov	r0, r6
 801c090:	f005 fdd3 	bl	8021c3a <_lv_ll_remove>
        lv_mem_free(cur);
 801c094:	4620      	mov	r0, r4
 801c096:	f005 ff67 	bl	8021f68 <lv_mem_free>
    while(chart->cursor_ll.head) {
 801c09a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d1f1      	bne.n	801c084 <lv_chart_destructor+0x48>
    _lv_ll_clear(&chart->cursor_ll);
 801c0a0:	f105 0030 	add.w	r0, r5, #48	; 0x30
 801c0a4:	f005 fdf8 	bl	8021c98 <_lv_ll_clear>
}
 801c0a8:	bd70      	pop	{r4, r5, r6, pc}

0801c0aa <lv_chart_constructor>:
{
 801c0aa:	b510      	push	{r4, lr}
 801c0ac:	460c      	mov	r4, r1
    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 801c0ae:	2110      	movs	r1, #16
 801c0b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801c0b4:	f005 fd7b 	bl	8021bae <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 801c0b8:	2110      	movs	r1, #16
 801c0ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801c0be:	f005 fd76 	bl	8021bae <_lv_ll_init>
    chart->ymin[0] = 0;
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
    chart->xmin[0] = 0;
 801c0c8:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
    chart->ymin[1] = 0;
 801c0cc:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e
    chart->xmin[1] = 0;
 801c0d0:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
    chart->ymax[0] = 100;
 801c0d4:	2364      	movs	r3, #100	; 0x64
 801c0d6:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
    chart->xmax[0] = 100;
 801c0da:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
    chart->ymax[1] = 100;
 801c0de:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
    chart->xmax[1] = 100;
 801c0e2:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    chart->hdiv_cnt    = LV_CHART_HDIV_DEF;
 801c0e6:	2303      	movs	r3, #3
 801c0e8:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 801c0ec:	2305      	movs	r3, #5
 801c0ee:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    chart->point_cnt   = LV_CHART_POINT_CNT_DEF;
 801c0f2:	230a      	movs	r3, #10
 801c0f4:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    chart->pressed_point_id  = LV_CHART_POINT_NONE;
 801c0f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c0fc:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    chart->type        = LV_CHART_TYPE_LINE;
 801c100:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801c104:	2101      	movs	r1, #1
 801c106:	f361 0302 	bfi	r3, r1, #0, #3
    chart->update_mode = LV_CHART_UPDATE_MODE_SHIFT;
 801c10a:	f362 03c3 	bfi	r3, r2, #3, #1
 801c10e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 801c112:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c116:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    chart->zoom_y      = LV_IMG_ZOOM_NONE;
 801c11a:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
}
 801c11e:	bd10      	pop	{r4, pc}

0801c120 <lv_chart_get_point_pos_by_id>:
    LV_ASSERT_NULL(obj);
 801c120:	b188      	cbz	r0, 801c146 <lv_chart_get_point_pos_by_id+0x26>
{
 801c122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c126:	b087      	sub	sp, #28
 801c128:	460d      	mov	r5, r1
 801c12a:	4617      	mov	r7, r2
 801c12c:	461c      	mov	r4, r3
 801c12e:	4606      	mov	r6, r0
    LV_ASSERT_NULL(ser);
 801c130:	b151      	cbz	r1, 801c148 <lv_chart_get_point_pos_by_id+0x28>
    if(id >= chart->point_cnt) {
 801c132:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 801c136:	4293      	cmp	r3, r2
 801c138:	d807      	bhi.n	801c14a <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 801c13a:	2300      	movs	r3, #0
 801c13c:	8023      	strh	r3, [r4, #0]
        p_out->y = 0;
 801c13e:	8063      	strh	r3, [r4, #2]
}
 801c140:	b007      	add	sp, #28
 801c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LV_ASSERT_NULL(obj);
 801c146:	e7fe      	b.n	801c146 <lv_chart_get_point_pos_by_id+0x26>
    LV_ASSERT_NULL(ser);
 801c148:	e7fe      	b.n	801c148 <lv_chart_get_point_pos_by_id+0x28>
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c14a:	f7ec f83c 	bl	80081c6 <lv_obj_get_content_width>
 801c14e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 801c152:	fb00 f303 	mul.w	r3, r0, r3
 801c156:	f343 280f 	sbfx	r8, r3, #8, #16
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801c15a:	4630      	mov	r0, r6
 801c15c:	f7ec f850 	bl	8008200 <lv_obj_get_content_height>
 801c160:	f8b6 9086 	ldrh.w	r9, [r6, #134]	; 0x86
 801c164:	fb00 f909 	mul.w	r9, r0, r9
 801c168:	ea4f 2a29 	mov.w	sl, r9, asr #8
 801c16c:	f349 290f 	sbfx	r9, r9, #8, #16
    if(chart->type == LV_CHART_TYPE_LINE) {
 801c170:	f896 3088 	ldrb.w	r3, [r6, #136]	; 0x88
 801c174:	f003 0307 	and.w	r3, r3, #7
 801c178:	2b01      	cmp	r3, #1
 801c17a:	d040      	beq.n	801c1fe <lv_chart_get_point_pos_by_id+0xde>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 801c17c:	2b03      	cmp	r3, #3
 801c17e:	d047      	beq.n	801c210 <lv_chart_get_point_pos_by_id+0xf0>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 801c180:	2b02      	cmp	r3, #2
 801c182:	d058      	beq.n	801c236 <lv_chart_get_point_pos_by_id+0x116>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c184:	2232      	movs	r2, #50	; 0x32
 801c186:	2100      	movs	r1, #0
 801c188:	4630      	mov	r0, r6
 801c18a:	f7ee fe8f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c18e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c192:	2212      	movs	r2, #18
 801c194:	2100      	movs	r1, #0
 801c196:	4630      	mov	r0, r6
 801c198:	f7ee fe88 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c19c:	b203      	sxth	r3, r0
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801c19e:	4443      	add	r3, r8
 801c1a0:	8822      	ldrh	r2, [r4, #0]
 801c1a2:	4413      	add	r3, r2
 801c1a4:	8023      	strh	r3, [r4, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 801c1a6:	4630      	mov	r0, r6
 801c1a8:	f7ed fc64 	bl	8009a74 <lv_obj_get_scroll_left>
 801c1ac:	8823      	ldrh	r3, [r4, #0]
 801c1ae:	1a1b      	subs	r3, r3, r0
 801c1b0:	8023      	strh	r3, [r4, #0]
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 801c1b2:	7b2a      	ldrb	r2, [r5, #12]
 801c1b4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801c1b8:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 801c1bc:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 801c1c0:	686b      	ldr	r3, [r5, #4]
 801c1c2:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 801c1c6:	1a5b      	subs	r3, r3, r1
 801c1c8:	fb09 f303 	mul.w	r3, r9, r3
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801c1cc:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
 801c1d0:	1a52      	subs	r2, r2, r1
 801c1d2:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - temp_y;
 801c1d6:	ebaa 0303 	sub.w	r3, sl, r3
 801c1da:	8063      	strh	r3, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c1dc:	2210      	movs	r2, #16
 801c1de:	2100      	movs	r1, #0
 801c1e0:	4630      	mov	r0, r6
 801c1e2:	f7ee fe63 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c1e6:	b203      	sxth	r3, r0
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801c1e8:	4443      	add	r3, r8
 801c1ea:	8862      	ldrh	r2, [r4, #2]
 801c1ec:	4413      	add	r3, r2
 801c1ee:	8063      	strh	r3, [r4, #2]
    p_out->y -= lv_obj_get_scroll_top(obj);
 801c1f0:	4630      	mov	r0, r6
 801c1f2:	f7ed fbcd 	bl	8009990 <lv_obj_get_scroll_top>
 801c1f6:	8863      	ldrh	r3, [r4, #2]
 801c1f8:	1a1b      	subs	r3, r3, r0
 801c1fa:	8063      	strh	r3, [r4, #2]
 801c1fc:	e7a0      	b.n	801c140 <lv_chart_get_point_pos_by_id+0x20>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 801c1fe:	fb07 f308 	mul.w	r3, r7, r8
 801c202:	f8b6 2082 	ldrh.w	r2, [r6, #130]	; 0x82
 801c206:	3a01      	subs	r2, #1
 801c208:	fb93 f3f2 	sdiv	r3, r3, r2
 801c20c:	8023      	strh	r3, [r4, #0]
 801c20e:	e7b9      	b.n	801c184 <lv_chart_get_point_pos_by_id+0x64>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801c210:	7b29      	ldrb	r1, [r5, #12]
 801c212:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 801c216:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 801c21a:	682b      	ldr	r3, [r5, #0]
 801c21c:	f933 0017 	ldrsh.w	r0, [r3, r7, lsl #1]
 801c220:	f8cd 8000 	str.w	r8, [sp]
 801c224:	2300      	movs	r3, #0
 801c226:	f9b1 2078 	ldrsh.w	r2, [r1, #120]	; 0x78
 801c22a:	f9b1 1074 	ldrsh.w	r1, [r1, #116]	; 0x74
 801c22e:	f005 fe4d 	bl	8021ecc <lv_map>
 801c232:	8020      	strh	r0, [r4, #0]
 801c234:	e7a6      	b.n	801c184 <lv_chart_get_point_pos_by_id+0x64>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 801c236:	f106 0324 	add.w	r3, r6, #36	; 0x24
 801c23a:	9303      	str	r3, [sp, #12]
 801c23c:	4618      	mov	r0, r3
 801c23e:	f005 fd4e 	bl	8021cde <_lv_ll_get_len>
 801c242:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801c244:	2215      	movs	r2, #21
 801c246:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801c24a:	4630      	mov	r0, r6
 801c24c:	f7ee fe2e 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c250:	b202      	sxth	r2, r0
                                                                LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the column on the ~same X*/
 801c252:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 801c256:	fb02 f303 	mul.w	r3, r2, r3
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801c25a:	121b      	asrs	r3, r3, #8
 801c25c:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801c25e:	2215      	movs	r2, #21
 801c260:	2100      	movs	r1, #0
 801c262:	4630      	mov	r0, r6
 801c264:	f7ee fe22 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c268:	b201      	sxth	r1, r0
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801c26a:	f8b6 2082 	ldrh.w	r2, [r6, #130]	; 0x82
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801c26e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
 801c272:	fb01 f303 	mul.w	r3, r1, r3
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801c276:	121b      	asrs	r3, r3, #8
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801c278:	1e51      	subs	r1, r2, #1
 801c27a:	fb01 8313 	mls	r3, r1, r3, r8
 801c27e:	fb93 f3f2 	sdiv	r3, r3, r2
        lv_coord_t col_w = block_w / ser_cnt;
 801c282:	b21b      	sxth	r3, r3
 801c284:	fbb3 fbfb 	udiv	fp, r3, fp
 801c288:	fa0f f18b 	sxth.w	r1, fp
 801c28c:	9105      	str	r1, [sp, #20]
        p_out->x = (int32_t)((int32_t)w * id) / chart->point_cnt;
 801c28e:	fb08 f307 	mul.w	r3, r8, r7
 801c292:	fb93 f3f2 	sdiv	r3, r3, r2
 801c296:	8023      	strh	r3, [r4, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 801c298:	9803      	ldr	r0, [sp, #12]
 801c29a:	f005 fd15 	bl	8021cc8 <_lv_ll_get_tail>
 801c29e:	4601      	mov	r1, r0
 801c2a0:	b168      	cbz	r0, 801c2be <lv_chart_get_point_pos_by_id+0x19e>
            if(ser_i == ser) break;
 801c2a2:	4285      	cmp	r5, r0
 801c2a4:	d00b      	beq.n	801c2be <lv_chart_get_point_pos_by_id+0x19e>
 801c2a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
            p_out->x += col_w;
 801c2aa:	8823      	ldrh	r3, [r4, #0]
 801c2ac:	445b      	add	r3, fp
 801c2ae:	8023      	strh	r3, [r4, #0]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 801c2b0:	4640      	mov	r0, r8
 801c2b2:	f005 fd11 	bl	8021cd8 <_lv_ll_get_prev>
 801c2b6:	4601      	mov	r1, r0
 801c2b8:	b108      	cbz	r0, 801c2be <lv_chart_get_point_pos_by_id+0x19e>
            if(ser_i == ser) break;
 801c2ba:	428d      	cmp	r5, r1
 801c2bc:	d1f5      	bne.n	801c2aa <lv_chart_get_point_pos_by_id+0x18a>
        p_out->x += (col_w - ser_gap) / 2;
 801c2be:	9b05      	ldr	r3, [sp, #20]
 801c2c0:	9a04      	ldr	r2, [sp, #16]
 801c2c2:	1a9b      	subs	r3, r3, r2
 801c2c4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c2c8:	8822      	ldrh	r2, [r4, #0]
 801c2ca:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801c2ce:	8023      	strh	r3, [r4, #0]
 801c2d0:	e758      	b.n	801c184 <lv_chart_get_point_pos_by_id+0x64>

0801c2d2 <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t *) obj;
    switch(axis) {
 801c2d2:	2904      	cmp	r1, #4
 801c2d4:	d80c      	bhi.n	801c2f0 <get_tick_gsc+0x1e>
 801c2d6:	e8df f001 	tbb	[pc, r1]
 801c2da:	0703      	.short	0x0703
 801c2dc:	0b05      	.short	0x0b05
 801c2de:	09          	.byte	0x09
 801c2df:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y:
            return &chart->tick[0];
 801c2e0:	303c      	adds	r0, #60	; 0x3c
 801c2e2:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X:
            return &chart->tick[1];
 801c2e4:	3048      	adds	r0, #72	; 0x48
 801c2e6:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y:
            return &chart->tick[2];
 801c2e8:	3054      	adds	r0, #84	; 0x54
 801c2ea:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X:
            return &chart->tick[3];
 801c2ec:	3060      	adds	r0, #96	; 0x60
 801c2ee:	4770      	bx	lr
    switch(axis) {
 801c2f0:	2000      	movs	r0, #0
        default:
            return NULL;
    }
}
 801c2f2:	4770      	bx	lr

0801c2f4 <draw_y_ticks>:
{
 801c2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2f8:	b0b1      	sub	sp, #196	; 0xc4
 801c2fa:	4604      	mov	r4, r0
 801c2fc:	9107      	str	r1, [sp, #28]
 801c2fe:	9205      	str	r2, [sp, #20]
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 801c300:	4611      	mov	r1, r2
 801c302:	f7ff ffe6 	bl	801c2d2 <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 801c306:	8903      	ldrh	r3, [r0, #8]
 801c308:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c30c:	2b01      	cmp	r3, #1
 801c30e:	f240 8177 	bls.w	801c600 <draw_y_ticks+0x30c>
 801c312:	4605      	mov	r5, r0
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 801c314:	f990 3009 	ldrsb.w	r3, [r0, #9]
 801c318:	2b00      	cmp	r3, #0
 801c31a:	db03      	blt.n	801c324 <draw_y_ticks+0x30>
 801c31c:	6803      	ldr	r3, [r0, #0]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	f000 816e 	beq.w	801c600 <draw_y_ticks+0x30c>
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_Y ? 0 : 1;
 801c324:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801c328:	f1b9 0600 	subs.w	r6, r9, #0
 801c32c:	bf18      	it	ne
 801c32e:	2601      	movne	r6, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c330:	2232      	movs	r2, #50	; 0x32
 801c332:	2100      	movs	r1, #0
 801c334:	4620      	mov	r0, r4
 801c336:	f7ee fdb9 	bl	800aeac <lv_obj_get_style_prop>
 801c33a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c33c:	2210      	movs	r2, #16
 801c33e:	2100      	movs	r1, #0
 801c340:	4620      	mov	r0, r4
 801c342:	f7ee fdb3 	bl	800aeac <lv_obj_get_style_prop>
 801c346:	4607      	mov	r7, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801c348:	4620      	mov	r0, r4
 801c34a:	f7eb ff59 	bl	8008200 <lv_obj_get_content_height>
 801c34e:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 801c352:	fb00 f303 	mul.w	r3, r0, r3
 801c356:	f343 230f 	sbfx	r3, r3, #8, #16
 801c35a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 801c35c:	4447      	add	r7, r8
 801c35e:	8ae3      	ldrh	r3, [r4, #22]
 801c360:	441f      	add	r7, r3
 801c362:	b2bf      	uxth	r7, r7
 801c364:	4620      	mov	r0, r4
 801c366:	f7ed fb13 	bl	8009990 <lv_obj_get_scroll_top>
 801c36a:	1a3f      	subs	r7, r7, r0
 801c36c:	fa1f fa87 	uxth.w	sl, r7
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 801c370:	464b      	mov	r3, r9
 801c372:	2b00      	cmp	r3, #0
 801c374:	d157      	bne.n	801c426 <draw_y_ticks+0x132>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c376:	2212      	movs	r2, #18
 801c378:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c37c:	4620      	mov	r0, r4
 801c37e:	f7ee fd95 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c382:	b203      	sxth	r3, r0
 801c384:	9308      	str	r3, [sp, #32]
        x_ofs = obj->coords.x1;
 801c386:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
    lv_coord_t major_len = t->major_len;
 801c38a:	f9b5 b000 	ldrsh.w	fp, [r5]
    lv_coord_t minor_len = t->minor_len;
 801c38e:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
    lv_draw_line_dsc_init(&line_dsc);
 801c392:	a82b      	add	r0, sp, #172	; 0xac
 801c394:	f7f1 fff7 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801c398:	aa2b      	add	r2, sp, #172	; 0xac
 801c39a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c39e:	4620      	mov	r0, r4
 801c3a0:	f7eb fbe2 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 801c3a4:	f10d 098c 	add.w	r9, sp, #140	; 0x8c
 801c3a8:	4648      	mov	r0, r9
 801c3aa:	f7f1 fc83 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801c3ae:	464a      	mov	r2, r9
 801c3b0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c3b4:	4620      	mov	r0, r4
 801c3b6:	f7eb fb28 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801c3ba:	9907      	ldr	r1, [sp, #28]
 801c3bc:	a811      	add	r0, sp, #68	; 0x44
 801c3be:	f7eb fcea 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801c3c2:	4b91      	ldr	r3, [pc, #580]	; (801c608 <draw_y_ticks+0x314>)
 801c3c4:	9312      	str	r3, [sp, #72]	; 0x48
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 801c3c6:	2306      	movs	r3, #6
 801c3c8:	9313      	str	r3, [sp, #76]	; 0x4c
    part_draw_dsc.id = axis;
 801c3ca:	9a05      	ldr	r2, [sp, #20]
 801c3cc:	921f      	str	r2, [sp, #124]	; 0x7c
    part_draw_dsc.part = LV_PART_TICKS;
 801c3ce:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 801c3d2:	931e      	str	r3, [sp, #120]	; 0x78
    part_draw_dsc.line_dsc = &line_dsc;
 801c3d4:	ab2b      	add	r3, sp, #172	; 0xac
 801c3d6:	9317      	str	r3, [sp, #92]	; 0x5c
    part_draw_dsc.label_dsc = &label_dsc;
 801c3d8:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 801c3dc:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801c3e0:	f3c9 090e 	ubfx	r9, r9, #0, #15
 801c3e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801c3e8:	88eb      	ldrh	r3, [r5, #6]
 801c3ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c3ee:	fb03 f909 	mul.w	r9, r3, r9
        else p1.x++;
 801c3f2:	b2bf      	uxth	r7, r7
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 801c3f4:	1e7b      	subs	r3, r7, #1
        else p1.x++;
 801c3f6:	3701      	adds	r7, #1
 801c3f8:	2a00      	cmp	r2, #0
 801c3fa:	bf18      	it	ne
 801c3fc:	463b      	movne	r3, r7
 801c3fe:	b21f      	sxth	r7, r3
        else p2.x = p1.x - minor_len; /*minor tick*/
 801c400:	b29b      	uxth	r3, r3
 801c402:	eba3 0808 	sub.w	r8, r3, r8
 801c406:	fa0f f288 	sxth.w	r2, r8
 801c40a:	9206      	str	r2, [sp, #24]
        if(major) p2.x = p1.x - major_len; /*major tick*/
 801c40c:	eba3 0b0b 	sub.w	fp, r3, fp
 801c410:	fa0f fb8b 	sxth.w	fp, fp
    for(i = 0; i <= total_tick_num; i++) {
 801c414:	f04f 0800 	mov.w	r8, #0
 801c418:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 801c41c:	f8cd b010 	str.w	fp, [sp, #16]
 801c420:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c424:	e09b      	b.n	801c55e <draw_y_ticks+0x26a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801c426:	2213      	movs	r2, #19
 801c428:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c42c:	4620      	mov	r0, r4
 801c42e:	f7ee fd3d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c432:	b203      	sxth	r3, r0
 801c434:	9308      	str	r3, [sp, #32]
        x_ofs = obj->coords.x2;
 801c436:	f9b4 7018 	ldrsh.w	r7, [r4, #24]
    lv_coord_t major_len = t->major_len;
 801c43a:	f9b5 b000 	ldrsh.w	fp, [r5]
    lv_coord_t minor_len = t->minor_len;
 801c43e:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
    if(axis == LV_CHART_AXIS_SECONDARY_Y) {
 801c442:	9b05      	ldr	r3, [sp, #20]
 801c444:	2b01      	cmp	r3, #1
 801c446:	d1a4      	bne.n	801c392 <draw_y_ticks+0x9e>
        major_len *= -1;
 801c448:	f1cb 0b00 	rsb	fp, fp, #0
 801c44c:	fa0f fb8b 	sxth.w	fp, fp
        minor_len *= -1;
 801c450:	f1c8 0800 	rsb	r8, r8, #0
 801c454:	fa0f f888 	sxth.w	r8, r8
 801c458:	e79b      	b.n	801c392 <draw_y_ticks+0x9e>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 801c45a:	9b04      	ldr	r3, [sp, #16]
 801c45c:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        part_draw_dsc.p1 = &p1;
 801c460:	ab2f      	add	r3, sp, #188	; 0xbc
 801c462:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p2 = &p2;
 801c464:	ab2e      	add	r3, sp, #184	; 0xb8
 801c466:	931b      	str	r3, [sp, #108]	; 0x6c
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 801c468:	f9b6 3070 	ldrsh.w	r3, [r6, #112]	; 0x70
 801c46c:	9300      	str	r3, [sp, #0]
 801c46e:	f9b6 306c 	ldrsh.w	r3, [r6, #108]	; 0x6c
 801c472:	464a      	mov	r2, r9
 801c474:	2100      	movs	r1, #0
 801c476:	eba9 0008 	sub.w	r0, r9, r8
 801c47a:	f005 fd27 	bl	8021ecc <lv_map>
        part_draw_dsc.value = tick_value;
 801c47e:	9021      	str	r0, [sp, #132]	; 0x84
        if(major && t->label_en)  {
 801c480:	f995 2009 	ldrsb.w	r2, [r5, #9]
 801c484:	2a00      	cmp	r2, #0
 801c486:	f280 8097 	bge.w	801c5b8 <draw_y_ticks+0x2c4>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 801c48a:	4603      	mov	r3, r0
 801c48c:	4a5f      	ldr	r2, [pc, #380]	; (801c60c <draw_y_ticks+0x318>)
 801c48e:	2110      	movs	r1, #16
 801c490:	a80d      	add	r0, sp, #52	; 0x34
 801c492:	f006 fd1d 	bl	8022ed0 <lv_snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 801c496:	ab23      	add	r3, sp, #140	; 0x8c
 801c498:	9316      	str	r3, [sp, #88]	; 0x58
            part_draw_dsc.text = buf;
 801c49a:	ab0d      	add	r3, sp, #52	; 0x34
 801c49c:	931c      	str	r3, [sp, #112]	; 0x70
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 801c49e:	2310      	movs	r3, #16
 801c4a0:	931d      	str	r3, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c4a2:	aa11      	add	r2, sp, #68	; 0x44
 801c4a4:	211a      	movs	r1, #26
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	f7e7 ff8c 	bl	80043c4 <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	9302      	str	r3, [sp, #8]
 801c4b0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801c4b4:	9301      	str	r3, [sp, #4]
 801c4b6:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	; 0x9e
 801c4ba:	9300      	str	r3, [sp, #0]
 801c4bc:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c4c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801c4c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c4c4:	a80a      	add	r0, sp, #40	; 0x28
 801c4c6:	f008 f86c 	bl	80245a2 <lv_txt_get_size>
            a.y1 = p2.y - size.y / 2;
 801c4ca:	f8bd 20ba 	ldrh.w	r2, [sp, #186]	; 0xba
 801c4ce:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801c4d2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c4d6:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801c4da:	1ad1      	subs	r1, r2, r3
 801c4dc:	b209      	sxth	r1, r1
 801c4de:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
            a.y2 = p2.y + size.y / 2;
 801c4e2:	4413      	add	r3, r2
 801c4e4:	b21b      	sxth	r3, r3
 801c4e6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            if(!sec_axis) {
 801c4ea:	9a05      	ldr	r2, [sp, #20]
 801c4ec:	b9fa      	cbnz	r2, 801c52e <draw_y_ticks+0x23a>
                a.x1 = p2.x - size.x - label_gap;
 801c4ee:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
 801c4f2:	f8bd c020 	ldrh.w	ip, [sp, #32]
 801c4f6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801c4fa:	1a82      	subs	r2, r0, r2
 801c4fc:	eba2 020c 	sub.w	r2, r2, ip
 801c500:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
                a.x2 = p2.x - label_gap;
 801c504:	eba0 000c 	sub.w	r0, r0, ip
 801c508:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
            if(a.y2 >= obj->coords.y1 &&
 801c50c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801c510:	429a      	cmp	r2, r3
 801c512:	dc5a      	bgt.n	801c5ca <draw_y_ticks+0x2d6>
 801c514:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801c518:	428b      	cmp	r3, r1
 801c51a:	db56      	blt.n	801c5ca <draw_y_ticks+0x2d6>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 801c51c:	2300      	movs	r3, #0
 801c51e:	9300      	str	r3, [sp, #0]
 801c520:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c522:	aa0b      	add	r2, sp, #44	; 0x2c
 801c524:	a923      	add	r1, sp, #140	; 0x8c
 801c526:	9807      	ldr	r0, [sp, #28]
 801c528:	f7f1 fbf8 	bl	800dd1c <lv_draw_label>
        if(major && t->label_en)  {
 801c52c:	e04d      	b.n	801c5ca <draw_y_ticks+0x2d6>
                a.x1 = p2.x + label_gap;
 801c52e:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	; 0xb8
 801c532:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c536:	eb00 0c02 	add.w	ip, r0, r2
 801c53a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
                a.x2 = p2.x + size.x + label_gap;
 801c53e:	f8bd c028 	ldrh.w	ip, [sp, #40]	; 0x28
 801c542:	4460      	add	r0, ip
 801c544:	4402      	add	r2, r0
 801c546:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801c54a:	e7df      	b.n	801c50c <draw_y_ticks+0x218>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801c54c:	aa11      	add	r2, sp, #68	; 0x44
 801c54e:	211b      	movs	r1, #27
 801c550:	4620      	mov	r0, r4
 801c552:	f7e7 ff37 	bl	80043c4 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 801c556:	f108 0801 	add.w	r8, r8, #1
 801c55a:	45c1      	cmp	r9, r8
 801c55c:	d350      	bcc.n	801c600 <draw_y_ticks+0x30c>
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 801c55e:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 801c562:	ebab 0303 	sub.w	r3, fp, r3
 801c566:	fb08 f303 	mul.w	r3, r8, r3
 801c56a:	fbb3 f3f9 	udiv	r3, r3, r9
 801c56e:	4453      	add	r3, sl
 801c570:	b21b      	sxth	r3, r3
 801c572:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 801c576:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 801c57a:	f8ad 70bc 	strh.w	r7, [sp, #188]	; 0xbc
        if(i % t->minor_cnt == 0) major = true;
 801c57e:	88eb      	ldrh	r3, [r5, #6]
 801c580:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c584:	fbb8 f2f3 	udiv	r2, r8, r3
 801c588:	fb03 8312 	mls	r3, r3, r2, r8
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	f43f af64 	beq.w	801c45a <draw_y_ticks+0x166>
        else p2.x = p1.x - minor_len; /*minor tick*/
 801c592:	9b06      	ldr	r3, [sp, #24]
 801c594:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
        part_draw_dsc.p1 = &p1;
 801c598:	ab2f      	add	r3, sp, #188	; 0xbc
 801c59a:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p2 = &p2;
 801c59c:	ab2e      	add	r3, sp, #184	; 0xb8
 801c59e:	931b      	str	r3, [sp, #108]	; 0x6c
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 801c5a0:	f9b6 3070 	ldrsh.w	r3, [r6, #112]	; 0x70
 801c5a4:	9300      	str	r3, [sp, #0]
 801c5a6:	f9b6 306c 	ldrsh.w	r3, [r6, #108]	; 0x6c
 801c5aa:	464a      	mov	r2, r9
 801c5ac:	2100      	movs	r1, #0
 801c5ae:	eba9 0008 	sub.w	r0, r9, r8
 801c5b2:	f005 fc8b 	bl	8021ecc <lv_map>
        part_draw_dsc.value = tick_value;
 801c5b6:	9021      	str	r0, [sp, #132]	; 0x84
            part_draw_dsc.label_dsc = NULL;
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	9316      	str	r3, [sp, #88]	; 0x58
            part_draw_dsc.text = NULL;
 801c5bc:	931c      	str	r3, [sp, #112]	; 0x70
            part_draw_dsc.text_length = 0;
 801c5be:	931d      	str	r3, [sp, #116]	; 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c5c0:	aa11      	add	r2, sp, #68	; 0x44
 801c5c2:	211a      	movs	r1, #26
 801c5c4:	4620      	mov	r0, r4
 801c5c6:	f7e7 fefd 	bl	80043c4 <lv_event_send>
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 801c5ca:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	; 0xae
 801c5ce:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c5d2:	1059      	asrs	r1, r3, #1
 801c5d4:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 801c5d8:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801c5dc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801c5e0:	4293      	cmp	r3, r2
 801c5e2:	dbb3      	blt.n	801c54c <draw_y_ticks+0x258>
           p2.y - line_dsc.width / 2  <= obj->coords.y2) {
 801c5e4:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 801c5e8:	1a5b      	subs	r3, r3, r1
 801c5ea:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 801c5ee:	4293      	cmp	r3, r2
 801c5f0:	dcac      	bgt.n	801c54c <draw_y_ticks+0x258>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801c5f2:	ab2e      	add	r3, sp, #184	; 0xb8
 801c5f4:	aa2f      	add	r2, sp, #188	; 0xbc
 801c5f6:	a92b      	add	r1, sp, #172	; 0xac
 801c5f8:	9807      	ldr	r0, [sp, #28]
 801c5fa:	f7f1 fedb 	bl	800e3b4 <lv_draw_line>
 801c5fe:	e7a5      	b.n	801c54c <draw_y_ticks+0x258>
}
 801c600:	b031      	add	sp, #196	; 0xc4
 801c602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c606:	bf00      	nop
 801c608:	0802d7dc 	.word	0x0802d7dc
 801c60c:	0802d7d8 	.word	0x0802d7d8

0801c610 <draw_x_ticks>:
{
 801c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c614:	b0af      	sub	sp, #188	; 0xbc
 801c616:	4604      	mov	r4, r0
 801c618:	9104      	str	r1, [sp, #16]
 801c61a:	4692      	mov	sl, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 801c61c:	4611      	mov	r1, r2
 801c61e:	f7ff fe58 	bl	801c2d2 <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 801c622:	8903      	ldrh	r3, [r0, #8]
 801c624:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c628:	2b01      	cmp	r3, #1
 801c62a:	f240 809d 	bls.w	801c768 <draw_x_ticks+0x158>
 801c62e:	4607      	mov	r7, r0
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 801c630:	f990 3009 	ldrsb.w	r3, [r0, #9]
 801c634:	2b00      	cmp	r3, #0
 801c636:	db03      	blt.n	801c640 <draw_x_ticks+0x30>
 801c638:	6803      	ldr	r3, [r0, #0]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	f000 8094 	beq.w	801c768 <draw_x_ticks+0x158>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801c640:	2212      	movs	r2, #18
 801c642:	2100      	movs	r1, #0
 801c644:	4620      	mov	r0, r4
 801c646:	f7ee fc31 	bl	800aeac <lv_obj_get_style_prop>
 801c64a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801c64c:	2232      	movs	r2, #50	; 0x32
 801c64e:	2100      	movs	r1, #0
 801c650:	4620      	mov	r0, r4
 801c652:	f7ee fc2b 	bl	800aeac <lv_obj_get_style_prop>
 801c656:	9007      	str	r0, [sp, #28]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c658:	4620      	mov	r0, r4
 801c65a:	f7eb fdb4 	bl	80081c6 <lv_obj_get_content_width>
 801c65e:	4683      	mov	fp, r0
 801c660:	f8b4 8084 	ldrh.w	r8, [r4, #132]	; 0x84
    lv_draw_label_dsc_init(&label_dsc);
 801c664:	a824      	add	r0, sp, #144	; 0x90
 801c666:	f7f1 fb25 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801c66a:	aa24      	add	r2, sp, #144	; 0x90
 801c66c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c670:	4620      	mov	r0, r4
 801c672:	f7eb f9ca 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801c676:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801c67a:	4620      	mov	r0, r4
 801c67c:	f7ed f9fa 	bl	8009a74 <lv_obj_get_scroll_left>
 801c680:	9006      	str	r0, [sp, #24]
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 801c682:	f1ba 0f02 	cmp.w	sl, #2
 801c686:	d053      	beq.n	801c730 <draw_x_ticks+0x120>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 801c688:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	db77      	blt.n	801c780 <draw_x_ticks+0x170>
 801c690:	2300      	movs	r3, #0
 801c692:	9305      	str	r3, [sp, #20]
        y_ofs = obj->coords.y1 - 1;
 801c694:	8ae5      	ldrh	r5, [r4, #22]
 801c696:	3d01      	subs	r5, #1
 801c698:	b22d      	sxth	r5, r5
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801c69a:	fb08 fb0b 	mul.w	fp, r8, fp
 801c69e:	ea4f 282b 	mov.w	r8, fp, asr #8
 801c6a2:	f34b 2b0f 	sbfx	fp, fp, #8, #16
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 801c6a6:	9b07      	ldr	r3, [sp, #28]
 801c6a8:	441e      	add	r6, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801c6aa:	44b1      	add	r9, r6
 801c6ac:	9b06      	ldr	r3, [sp, #24]
 801c6ae:	eba9 0903 	sub.w	r9, r9, r3
 801c6b2:	fa1f f989 	uxth.w	r9, r9
    lv_draw_line_dsc_init(&line_dsc);
 801c6b6:	ae21      	add	r6, sp, #132	; 0x84
 801c6b8:	4630      	mov	r0, r6
 801c6ba:	f7f1 fe64 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801c6be:	4632      	mov	r2, r6
 801c6c0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c6c4:	4620      	mov	r0, r4
 801c6c6:	f7eb fa4f 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    line_dsc.dash_gap = 0;
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    line_dsc.dash_width = 0;
 801c6d0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801c6d4:	9904      	ldr	r1, [sp, #16]
 801c6d6:	a80f      	add	r0, sp, #60	; 0x3c
 801c6d8:	f7eb fb5d 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801c6dc:	4ba8      	ldr	r3, [pc, #672]	; (801c980 <draw_x_ticks+0x370>)
 801c6de:	9310      	str	r3, [sp, #64]	; 0x40
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 801c6e0:	2306      	movs	r3, #6
 801c6e2:	9311      	str	r3, [sp, #68]	; 0x44
    part_draw_dsc.id = LV_CHART_AXIS_PRIMARY_X;
 801c6e4:	2302      	movs	r3, #2
 801c6e6:	931d      	str	r3, [sp, #116]	; 0x74
    part_draw_dsc.part = LV_PART_TICKS;
 801c6e8:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 801c6ec:	931c      	str	r3, [sp, #112]	; 0x70
    part_draw_dsc.label_dsc = &label_dsc;
 801c6ee:	ab24      	add	r3, sp, #144	; 0x90
 801c6f0:	9314      	str	r3, [sp, #80]	; 0x50
    part_draw_dsc.line_dsc = &line_dsc;
 801c6f2:	9615      	str	r6, [sp, #84]	; 0x54
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 801c6f4:	f1ba 0602 	subs.w	r6, sl, #2
 801c6f8:	bf18      	it	ne
 801c6fa:	2601      	movne	r6, #1
    if(chart->type == LV_CHART_TYPE_BAR) {
 801c6fc:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801c700:	f003 0307 	and.w	r3, r3, #7
 801c704:	2b02      	cmp	r3, #2
 801c706:	d044      	beq.n	801c792 <draw_x_ticks+0x182>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801c708:	fa0f f989 	sxth.w	r9, r9
    p1.y = y_ofs;
 801c70c:	f8ad 50b6 	strh.w	r5, [sp, #182]	; 0xb6
    uint32_t total_tick_num = (t->major_cnt - 1) * t->minor_cnt;
 801c710:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 801c714:	f3c8 080e 	ubfx	r8, r8, #0, #15
 801c718:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801c71c:	88fb      	ldrh	r3, [r7, #6]
 801c71e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c722:	fb03 f808 	mul.w	r8, r3, r8
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 801c726:	2500      	movs	r5, #0
 801c728:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 801c72c:	9306      	str	r3, [sp, #24]
 801c72e:	e08c      	b.n	801c84a <draw_x_ticks+0x23a>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 801c730:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801c734:	2b00      	cmp	r3, #0
 801c736:	db1a      	blt.n	801c76e <draw_x_ticks+0x15e>
 801c738:	2300      	movs	r3, #0
 801c73a:	9305      	str	r3, [sp, #20]
        y_ofs = obj->coords.y2 + 1;
 801c73c:	8b65      	ldrh	r5, [r4, #26]
 801c73e:	3501      	adds	r5, #1
 801c740:	b22d      	sxth	r5, r5
        if(y_ofs > draw_ctx->clip_area->y2) return;
 801c742:	9b04      	ldr	r3, [sp, #16]
 801c744:	689a      	ldr	r2, [r3, #8]
 801c746:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801c74a:	42ab      	cmp	r3, r5
 801c74c:	db0c      	blt.n	801c768 <draw_x_ticks+0x158>
        if(y_ofs + label_gap + label_dsc.font->line_height + t->major_len < draw_ctx->clip_area->y1) return;
 801c74e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c754:	9905      	ldr	r1, [sp, #20]
 801c756:	1869      	adds	r1, r5, r1
 801c758:	440b      	add	r3, r1
 801c75a:	f9b7 1000 	ldrsh.w	r1, [r7]
 801c75e:	440b      	add	r3, r1
 801c760:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801c764:	4293      	cmp	r3, r2
 801c766:	da98      	bge.n	801c69a <draw_x_ticks+0x8a>
}
 801c768:	b02f      	add	sp, #188	; 0xbc
 801c76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801c76e:	2211      	movs	r2, #17
 801c770:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c774:	4620      	mov	r0, r4
 801c776:	f7ee fb99 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c77a:	b203      	sxth	r3, r0
 801c77c:	9305      	str	r3, [sp, #20]
 801c77e:	e7dd      	b.n	801c73c <draw_x_ticks+0x12c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801c780:	2210      	movs	r2, #16
 801c782:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801c786:	4620      	mov	r0, r4
 801c788:	f7ee fb90 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c78c:	b203      	sxth	r3, r0
 801c78e:	9305      	str	r3, [sp, #20]
 801c790:	e780      	b.n	801c694 <draw_x_ticks+0x84>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801c792:	2215      	movs	r2, #21
 801c794:	2100      	movs	r1, #0
 801c796:	4620      	mov	r0, r4
 801c798:	f7ee fb88 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c79c:	b200      	sxth	r0, r0
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 801c79e:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801c7a2:	fb00 f101 	mul.w	r1, r0, r1
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 801c7a6:	eb0b 2b21 	add.w	fp, fp, r1, asr #8
 801c7aa:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 801c7ae:	fb9b f2f3 	sdiv	r2, fp, r3
        x_ofs += (block_w - block_gap) / 2;
 801c7b2:	b213      	sxth	r3, r2
 801c7b4:	eba3 2321 	sub.w	r3, r3, r1, asr #8
 801c7b8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c7bc:	eb09 0963 	add.w	r9, r9, r3, asr #1
 801c7c0:	fa0f f989 	sxth.w	r9, r9
        w -= block_w - block_gap;
 801c7c4:	eb08 2b21 	add.w	fp, r8, r1, asr #8
 801c7c8:	ebab 0b02 	sub.w	fp, fp, r2
 801c7cc:	fa0f fb8b 	sxth.w	fp, fp
 801c7d0:	e79c      	b.n	801c70c <draw_x_ticks+0xfc>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 801c7d2:	8879      	ldrh	r1, [r7, #2]
 801c7d4:	1a52      	subs	r2, r2, r1
 801c7d6:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
        part_draw_dsc.p1 = &p1;
 801c7da:	aa2d      	add	r2, sp, #180	; 0xb4
 801c7dc:	9218      	str	r2, [sp, #96]	; 0x60
        part_draw_dsc.p2 = &p2;
 801c7de:	aa2c      	add	r2, sp, #176	; 0xb0
 801c7e0:	9219      	str	r2, [sp, #100]	; 0x64
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 801c7e2:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 801c7e6:	f002 0207 	and.w	r2, r2, #7
 801c7ea:	2a03      	cmp	r2, #3
 801c7ec:	d055      	beq.n	801c89a <draw_x_ticks+0x28a>
            tick_value = i / t->minor_cnt;
 801c7ee:	fbb5 f3f3 	udiv	r3, r5, r3
        part_draw_dsc.value = tick_value;
 801c7f2:	931f      	str	r3, [sp, #124]	; 0x7c
        if(major && t->label_en) {
 801c7f4:	b91e      	cbnz	r6, 801c7fe <draw_x_ticks+0x1ee>
 801c7f6:	f997 2009 	ldrsb.w	r2, [r7, #9]
 801c7fa:	2a00      	cmp	r2, #0
 801c7fc:	db5a      	blt.n	801c8b4 <draw_x_ticks+0x2a4>
            part_draw_dsc.label_dsc = NULL;
 801c7fe:	2300      	movs	r3, #0
 801c800:	9314      	str	r3, [sp, #80]	; 0x50
            part_draw_dsc.text = NULL;
 801c802:	931a      	str	r3, [sp, #104]	; 0x68
            part_draw_dsc.text_length = 0;
 801c804:	931b      	str	r3, [sp, #108]	; 0x6c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c806:	aa0f      	add	r2, sp, #60	; 0x3c
 801c808:	211a      	movs	r1, #26
 801c80a:	4620      	mov	r0, r4
 801c80c:	f7e7 fdda 	bl	80043c4 <lv_event_send>
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 801c810:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
 801c814:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c818:	1059      	asrs	r1, r3, #1
 801c81a:	f9bd 20b4 	ldrsh.w	r2, [sp, #180]	; 0xb4
 801c81e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 801c822:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801c826:	4293      	cmp	r3, r2
 801c828:	db07      	blt.n	801c83a <draw_x_ticks+0x22a>
           p2.x - line_dsc.width / 2  <= obj->coords.x2) {
 801c82a:	f9bd 30b0 	ldrsh.w	r3, [sp, #176]	; 0xb0
 801c82e:	1a5b      	subs	r3, r3, r1
 801c830:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 801c834:	4293      	cmp	r3, r2
 801c836:	f340 809b 	ble.w	801c970 <draw_x_ticks+0x360>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801c83a:	aa0f      	add	r2, sp, #60	; 0x3c
 801c83c:	211b      	movs	r1, #27
 801c83e:	4620      	mov	r0, r4
 801c840:	f7e7 fdc0 	bl	80043c4 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 801c844:	3501      	adds	r5, #1
 801c846:	45a8      	cmp	r8, r5
 801c848:	d38e      	bcc.n	801c768 <draw_x_ticks+0x158>
        if(i % t->minor_cnt == 0) major = true;
 801c84a:	88fb      	ldrh	r3, [r7, #6]
 801c84c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c850:	fbb5 f6f3 	udiv	r6, r5, r3
 801c854:	fb03 5616 	mls	r6, r3, r6, r5
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 801c858:	f9bd 2086 	ldrsh.w	r2, [sp, #134]	; 0x86
 801c85c:	ebab 0202 	sub.w	r2, fp, r2
 801c860:	fb05 f202 	mul.w	r2, r5, r2
 801c864:	fbb2 f2f8 	udiv	r2, r2, r8
 801c868:	444a      	add	r2, r9
 801c86a:	b212      	sxth	r2, r2
 801c86c:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
 801c870:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 801c874:	f1ba 0f02 	cmp.w	sl, #2
 801c878:	d005      	beq.n	801c886 <draw_x_ticks+0x276>
 801c87a:	f8bd 20b6 	ldrh.w	r2, [sp, #182]	; 0xb6
 801c87e:	2e00      	cmp	r6, #0
 801c880:	d1a7      	bne.n	801c7d2 <draw_x_ticks+0x1c2>
 801c882:	8839      	ldrh	r1, [r7, #0]
 801c884:	e7a6      	b.n	801c7d4 <draw_x_ticks+0x1c4>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 801c886:	f8bd 20b6 	ldrh.w	r2, [sp, #182]	; 0xb6
 801c88a:	b926      	cbnz	r6, 801c896 <draw_x_ticks+0x286>
 801c88c:	8839      	ldrh	r1, [r7, #0]
 801c88e:	440a      	add	r2, r1
 801c890:	f8ad 20b2 	strh.w	r2, [sp, #178]	; 0xb2
 801c894:	e7a1      	b.n	801c7da <draw_x_ticks+0x1ca>
 801c896:	8879      	ldrh	r1, [r7, #2]
 801c898:	e7f9      	b.n	801c88e <draw_x_ticks+0x27e>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 801c89a:	9a06      	ldr	r2, [sp, #24]
 801c89c:	f9b2 3078 	ldrsh.w	r3, [r2, #120]	; 0x78
 801c8a0:	9300      	str	r3, [sp, #0]
 801c8a2:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 801c8a6:	4642      	mov	r2, r8
 801c8a8:	2100      	movs	r1, #0
 801c8aa:	4628      	mov	r0, r5
 801c8ac:	f005 fb0e 	bl	8021ecc <lv_map>
 801c8b0:	4603      	mov	r3, r0
 801c8b2:	e79e      	b.n	801c7f2 <draw_x_ticks+0x1e2>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 801c8b4:	ae0b      	add	r6, sp, #44	; 0x2c
 801c8b6:	4a33      	ldr	r2, [pc, #204]	; (801c984 <draw_x_ticks+0x374>)
 801c8b8:	2110      	movs	r1, #16
 801c8ba:	4630      	mov	r0, r6
 801c8bc:	f006 fb08 	bl	8022ed0 <lv_snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 801c8c0:	ab24      	add	r3, sp, #144	; 0x90
 801c8c2:	9314      	str	r3, [sp, #80]	; 0x50
            part_draw_dsc.text = buf;
 801c8c4:	961a      	str	r6, [sp, #104]	; 0x68
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 801c8c6:	2310      	movs	r3, #16
 801c8c8:	931b      	str	r3, [sp, #108]	; 0x6c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801c8ca:	aa0f      	add	r2, sp, #60	; 0x3c
 801c8cc:	211a      	movs	r1, #26
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	f7e7 fd78 	bl	80043c4 <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 801c8d4:	2300      	movs	r3, #0
 801c8d6:	9302      	str	r3, [sp, #8]
 801c8d8:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801c8dc:	9301      	str	r3, [sp, #4]
 801c8de:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801c8e2:	9300      	str	r3, [sp, #0]
 801c8e4:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801c8e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c8ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c8ec:	a808      	add	r0, sp, #32
 801c8ee:	f007 fe58 	bl	80245a2 <lv_txt_get_size>
            a.x1 = (p2.x - size.x / 2);
 801c8f2:	f8bd 20b0 	ldrh.w	r2, [sp, #176]	; 0xb0
 801c8f6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c8fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801c8fe:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801c902:	1ad1      	subs	r1, r2, r3
 801c904:	b209      	sxth	r1, r1
 801c906:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
            a.x2 = (p2.x + size.x / 2);
 801c90a:	4413      	add	r3, r2
 801c90c:	b21b      	sxth	r3, r3
 801c90e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            if(sec_axis) {
 801c912:	f1ba 0f02 	cmp.w	sl, #2
 801c916:	d01e      	beq.n	801c956 <draw_x_ticks+0x346>
                a.y2 = p2.y - label_gap;
 801c918:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 801c91c:	9805      	ldr	r0, [sp, #20]
 801c91e:	1a12      	subs	r2, r2, r0
 801c920:	b292      	uxth	r2, r2
 801c922:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
                a.y1 = a.y2 - size.y;
 801c926:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 801c92a:	1a12      	subs	r2, r2, r0
 801c92c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            if(a.x2 >= obj->coords.x1 &&
 801c930:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801c934:	429a      	cmp	r2, r3
 801c936:	f73f af6b 	bgt.w	801c810 <draw_x_ticks+0x200>
 801c93a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801c93e:	428b      	cmp	r3, r1
 801c940:	f6ff af66 	blt.w	801c810 <draw_x_ticks+0x200>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 801c944:	2300      	movs	r3, #0
 801c946:	9300      	str	r3, [sp, #0]
 801c948:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c94a:	aa09      	add	r2, sp, #36	; 0x24
 801c94c:	a924      	add	r1, sp, #144	; 0x90
 801c94e:	9804      	ldr	r0, [sp, #16]
 801c950:	f7f1 f9e4 	bl	800dd1c <lv_draw_label>
        if(major && t->label_en) {
 801c954:	e75c      	b.n	801c810 <draw_x_ticks+0x200>
                a.y1 = p2.y + label_gap;
 801c956:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 801c95a:	9805      	ldr	r0, [sp, #20]
 801c95c:	4402      	add	r2, r0
 801c95e:	b292      	uxth	r2, r2
 801c960:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
                a.y2 = a.y1 + size.y;
 801c964:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
 801c968:	4402      	add	r2, r0
 801c96a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c96e:	e7df      	b.n	801c930 <draw_x_ticks+0x320>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801c970:	ab2c      	add	r3, sp, #176	; 0xb0
 801c972:	aa2d      	add	r2, sp, #180	; 0xb4
 801c974:	a921      	add	r1, sp, #132	; 0x84
 801c976:	9804      	ldr	r0, [sp, #16]
 801c978:	f7f1 fd1c 	bl	800e3b4 <lv_draw_line>
 801c97c:	e75d      	b.n	801c83a <draw_x_ticks+0x22a>
 801c97e:	bf00      	nop
 801c980:	0802d7dc 	.word	0x0802d7dc
 801c984:	0802d7d8 	.word	0x0802d7d8

0801c988 <lv_chart_event>:
{
 801c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c98c:	b0d1      	sub	sp, #324	; 0x144
 801c98e:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801c990:	48a4      	ldr	r0, [pc, #656]	; (801cc24 <lv_chart_event+0x29c>)
 801c992:	f7e7 fc1a 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801c996:	2801      	cmp	r0, #1
 801c998:	d002      	beq.n	801c9a0 <lv_chart_event+0x18>
}
 801c99a:	b051      	add	sp, #324	; 0x144
 801c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801c9a0:	4628      	mov	r0, r5
 801c9a2:	f7e7 fd35 	bl	8004410 <lv_event_get_code>
 801c9a6:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801c9a8:	4628      	mov	r0, r5
 801c9aa:	f7e7 fd2d 	bl	8004408 <lv_event_get_target>
 801c9ae:	4683      	mov	fp, r0
    if(code == LV_EVENT_PRESSED) {
 801c9b0:	2c01      	cmp	r4, #1
 801c9b2:	f000 809f 	beq.w	801caf4 <lv_chart_event+0x16c>
    else if(code == LV_EVENT_RELEASED) {
 801c9b6:	2c08      	cmp	r4, #8
 801c9b8:	f000 80fb 	beq.w	801cbb2 <lv_chart_event+0x22a>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801c9bc:	2c29      	cmp	r4, #41	; 0x29
 801c9be:	f000 8101 	beq.w	801cbc4 <lv_chart_event+0x23c>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801c9c2:	2c13      	cmp	r4, #19
 801c9c4:	f000 8101 	beq.w	801cbca <lv_chart_event+0x242>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 801c9c8:	2c2c      	cmp	r4, #44	; 0x2c
 801c9ca:	f000 8113 	beq.w	801cbf4 <lv_chart_event+0x26c>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801c9ce:	2c15      	cmp	r4, #21
 801c9d0:	d1e3      	bne.n	801c99a <lv_chart_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801c9d2:	4628      	mov	r0, r5
 801c9d4:	f7e7 fd8c 	bl	80044f0 <lv_event_get_draw_ctx>
 801c9d8:	4682      	mov	sl, r0
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 801c9da:	f10b 0314 	add.w	r3, fp, #20
 801c9de:	9307      	str	r3, [sp, #28]
 801c9e0:	6882      	ldr	r2, [r0, #8]
 801c9e2:	4619      	mov	r1, r3
 801c9e4:	a822      	add	r0, sp, #136	; 0x88
 801c9e6:	f004 fb8c 	bl	8021102 <_lv_area_intersect>
    if(mask_ret == false) return;
 801c9ea:	2800      	cmp	r0, #0
 801c9ec:	f040 811c 	bne.w	801cc28 <lv_chart_event+0x2a0>
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_Y);
 801c9f0:	2200      	movs	r2, #0
 801c9f2:	4651      	mov	r1, sl
 801c9f4:	4658      	mov	r0, fp
 801c9f6:	f7ff fc7d 	bl	801c2f4 <draw_y_ticks>
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_Y);
 801c9fa:	2201      	movs	r2, #1
 801c9fc:	4651      	mov	r1, sl
 801c9fe:	4658      	mov	r0, fp
 801ca00:	f7ff fc78 	bl	801c2f4 <draw_y_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_X);
 801ca04:	2202      	movs	r2, #2
 801ca06:	4651      	mov	r1, sl
 801ca08:	4658      	mov	r0, fp
 801ca0a:	f7ff fe01 	bl	801c610 <draw_x_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_X);
 801ca0e:	2204      	movs	r2, #4
 801ca10:	4651      	mov	r1, sl
 801ca12:	4658      	mov	r0, fp
 801ca14:	f7ff fdfc 	bl	801c610 <draw_x_ticks>
        if(_lv_ll_is_empty(&chart->series_ll) == false) {
 801ca18:	f10b 0824 	add.w	r8, fp, #36	; 0x24
 801ca1c:	4640      	mov	r0, r8
 801ca1e:	f005 f96d 	bl	8021cfc <_lv_ll_is_empty>
 801ca22:	b960      	cbnz	r0, 801ca3e <lv_chart_event+0xb6>
            if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, draw_ctx);
 801ca24:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801ca28:	f003 0307 	and.w	r3, r3, #7
 801ca2c:	2b01      	cmp	r3, #1
 801ca2e:	f000 824b 	beq.w	801cec8 <lv_chart_event+0x540>
            else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, draw_ctx);
 801ca32:	2b02      	cmp	r3, #2
 801ca34:	f000 8462 	beq.w	801d2fc <lv_chart_event+0x974>
            else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, draw_ctx);
 801ca38:	2b03      	cmp	r3, #3
 801ca3a:	f000 85af 	beq.w	801d59c <lv_chart_event+0xc14>
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 801ca3e:	f10b 0830 	add.w	r8, fp, #48	; 0x30
 801ca42:	4640      	mov	r0, r8
 801ca44:	f005 f95a 	bl	8021cfc <_lv_ll_is_empty>
 801ca48:	9004      	str	r0, [sp, #16]
 801ca4a:	2800      	cmp	r0, #0
 801ca4c:	d1a5      	bne.n	801c99a <lv_chart_event+0x12>
    if(!_lv_area_intersect(&clip_area, draw_ctx->clip_area, &obj->coords)) return;
 801ca4e:	9a07      	ldr	r2, [sp, #28]
 801ca50:	f8da 1008 	ldr.w	r1, [sl, #8]
 801ca54:	a818      	add	r0, sp, #96	; 0x60
 801ca56:	f004 fb54 	bl	8021102 <_lv_area_intersect>
 801ca5a:	9005      	str	r0, [sp, #20]
 801ca5c:	2800      	cmp	r0, #0
 801ca5e:	d09c      	beq.n	801c99a <lv_chart_event+0x12>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801ca60:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ca64:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_area;
 801ca66:	ab18      	add	r3, sp, #96	; 0x60
 801ca68:	f8ca 3008 	str.w	r3, [sl, #8]
    lv_draw_line_dsc_init(&line_dsc_ori);
 801ca6c:	a81c      	add	r0, sp, #112	; 0x70
 801ca6e:	f7f1 fc8a 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 801ca72:	aa1c      	add	r2, sp, #112	; 0x70
 801ca74:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801ca78:	4658      	mov	r0, fp
 801ca7a:	f7eb f875 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 801ca7e:	a822      	add	r0, sp, #136	; 0x88
 801ca80:	f7f2 fed4 	bl	800f82c <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 801ca84:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 801ca88:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 801ca8c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801ca90:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801ca94:	2201      	movs	r2, #1
 801ca96:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801ca9a:	4658      	mov	r0, fp
 801ca9c:	f7ee fa06 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801caa0:	b203      	sxth	r3, r0
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 801caa2:	f3c0 37c0 	ubfx	r7, r0, #15, #1
 801caa6:	441f      	add	r7, r3
 801caa8:	107f      	asrs	r7, r7, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801caaa:	2201      	movs	r2, #1
 801caac:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801cab0:	4658      	mov	r0, fp
 801cab2:	f7ee f9fb 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cab6:	b203      	sxth	r3, r0
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 801cab8:	f3c0 32c0 	ubfx	r2, r0, #15, #1
 801cabc:	4413      	add	r3, r2
 801cabe:	105b      	asrs	r3, r3, #1
 801cac0:	9303      	str	r3, [sp, #12]
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801cac2:	4651      	mov	r1, sl
 801cac4:	a83e      	add	r0, sp, #248	; 0xf8
 801cac6:	f7eb f966 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.line_dsc = &line_dsc_tmp;
 801caca:	ab1f      	add	r3, sp, #124	; 0x7c
 801cacc:	9344      	str	r3, [sp, #272]	; 0x110
    part_draw_dsc.rect_dsc = &point_dsc_tmp;
 801cace:	ab30      	add	r3, sp, #192	; 0xc0
 801cad0:	9342      	str	r3, [sp, #264]	; 0x108
    part_draw_dsc.part = LV_PART_CURSOR;
 801cad2:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 801cad6:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 801cad8:	4b52      	ldr	r3, [pc, #328]	; (801cc24 <lv_chart_event+0x29c>)
 801cada:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_CURSOR;
 801cadc:	2305      	movs	r3, #5
 801cade:	9340      	str	r3, [sp, #256]	; 0x100
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 801cae0:	4640      	mov	r0, r8
 801cae2:	f005 f8f1 	bl	8021cc8 <_lv_ll_get_tail>
 801cae6:	4604      	mov	r4, r0
 801cae8:	2800      	cmp	r0, #0
 801caea:	f000 876a 	beq.w	801d9c2 <lv_chart_event+0x103a>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 801caee:	46b9      	mov	r9, r7
 801caf0:	f000 bfd7 	b.w	801daa2 <lv_chart_event+0x111a>
        lv_indev_t * indev = lv_indev_get_act();
 801caf4:	f7e8 f80c 	bl	8004b10 <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 801caf8:	a93e      	add	r1, sp, #248	; 0xf8
 801cafa:	f7e8 f886 	bl	8004c0a <lv_indev_get_point>
        p.x -= obj->coords.x1;
 801cafe:	f8bd 40f8 	ldrh.w	r4, [sp, #248]	; 0xf8
 801cb02:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801cb06:	1ae4      	subs	r4, r4, r3
 801cb08:	b2a4      	uxth	r4, r4
 801cb0a:	f8ad 40f8 	strh.w	r4, [sp, #248]	; 0xf8
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 801cb0e:	4658      	mov	r0, fp
 801cb10:	f7ec ffb0 	bl	8009a74 <lv_obj_get_scroll_left>
 801cb14:	4606      	mov	r6, r0
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cb16:	4658      	mov	r0, fp
 801cb18:	f7eb fb55 	bl	80081c6 <lv_obj_get_content_width>
 801cb1c:	4605      	mov	r5, r0
 801cb1e:	f8bb 7084 	ldrh.w	r7, [fp, #132]	; 0x84
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801cb22:	2212      	movs	r2, #18
 801cb24:	2100      	movs	r1, #0
 801cb26:	4658      	mov	r0, fp
 801cb28:	f7ee f9c0 	bl	800aeac <lv_obj_get_style_prop>
    x -= pad_left;
 801cb2c:	1a24      	subs	r4, r4, r0
 801cb2e:	4434      	add	r4, r6
 801cb30:	b224      	sxth	r4, r4
    if(x < 0) return 0;
 801cb32:	2c00      	cmp	r4, #0
 801cb34:	db3b      	blt.n	801cbae <lv_chart_event+0x226>
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cb36:	fb07 f305 	mul.w	r3, r7, r5
 801cb3a:	f343 230f 	sbfx	r3, r3, #8, #16
    if(x > w) return chart->point_cnt - 1;
 801cb3e:	42a3      	cmp	r3, r4
 801cb40:	db1e      	blt.n	801cb80 <lv_chart_event+0x1f8>
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 801cb42:	f89b 2088 	ldrb.w	r2, [fp, #136]	; 0x88
 801cb46:	f002 0207 	and.w	r2, r2, #7
 801cb4a:	2a01      	cmp	r2, #1
 801cb4c:	d01c      	beq.n	801cb88 <lv_chart_event+0x200>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 801cb4e:	2a02      	cmp	r2, #2
 801cb50:	d026      	beq.n	801cba0 <lv_chart_event+0x218>
    return 0;
 801cb52:	2400      	movs	r4, #0
        if(id != (uint32_t)chart->pressed_point_id) {
 801cb54:	f9bb 307c 	ldrsh.w	r3, [fp, #124]	; 0x7c
 801cb58:	42a3      	cmp	r3, r4
 801cb5a:	f43f af1e 	beq.w	801c99a <lv_chart_event+0x12>
            invalidate_point(obj, id);
 801cb5e:	b2a1      	uxth	r1, r4
 801cb60:	4658      	mov	r0, fp
 801cb62:	f7ff f9a3 	bl	801beac <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 801cb66:	f8bb 107c 	ldrh.w	r1, [fp, #124]	; 0x7c
 801cb6a:	4658      	mov	r0, fp
 801cb6c:	f7ff f99e 	bl	801beac <invalidate_point>
            chart->pressed_point_id = id;
 801cb70:	f8ab 407c 	strh.w	r4, [fp, #124]	; 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801cb74:	2200      	movs	r2, #0
 801cb76:	211c      	movs	r1, #28
 801cb78:	4658      	mov	r0, fp
 801cb7a:	f7e7 fc23 	bl	80043c4 <lv_event_send>
 801cb7e:	e70c      	b.n	801c99a <lv_chart_event+0x12>
    if(x > w) return chart->point_cnt - 1;
 801cb80:	f8bb 4082 	ldrh.w	r4, [fp, #130]	; 0x82
 801cb84:	3c01      	subs	r4, #1
 801cb86:	e7e5      	b.n	801cb54 <lv_chart_event+0x1cc>
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 801cb88:	f8bb 1082 	ldrh.w	r1, [fp, #130]	; 0x82
 801cb8c:	3901      	subs	r1, #1
 801cb8e:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801cb92:	f342 024f 	sbfx	r2, r2, #1, #16
 801cb96:	fb04 2401 	mla	r4, r4, r1, r2
 801cb9a:	fb94 f4f3 	sdiv	r4, r4, r3
 801cb9e:	e7d9      	b.n	801cb54 <lv_chart_event+0x1cc>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 801cba0:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801cba4:	fb02 f404 	mul.w	r4, r2, r4
 801cba8:	fb94 f4f3 	sdiv	r4, r4, r3
 801cbac:	e7d2      	b.n	801cb54 <lv_chart_event+0x1cc>
    if(x < 0) return 0;
 801cbae:	2400      	movs	r4, #0
 801cbb0:	e7d0      	b.n	801cb54 <lv_chart_event+0x1cc>
        invalidate_point(obj, chart->pressed_point_id);
 801cbb2:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 801cbb6:	f7ff f979 	bl	801beac <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 801cbba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801cbbe:	f8ab 307c 	strh.w	r3, [fp, #124]	; 0x7c
 801cbc2:	e6ea      	b.n	801c99a <lv_chart_event+0x12>
        lv_obj_refresh_self_size(obj);
 801cbc4:	f7eb fb90 	bl	80082e8 <lv_obj_refresh_self_size>
 801cbc8:	e6e7      	b.n	801c99a <lv_chart_event+0x12>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size,
 801cbca:	f9b0 3064 	ldrsh.w	r3, [r0, #100]	; 0x64
 801cbce:	f9b0 1058 	ldrsh.w	r1, [r0, #88]	; 0x58
 801cbd2:	428b      	cmp	r3, r1
 801cbd4:	bfb8      	it	lt
 801cbd6:	460b      	movlt	r3, r1
 801cbd8:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	; 0x4c
 801cbdc:	428b      	cmp	r3, r1
 801cbde:	bfb8      	it	lt
 801cbe0:	460b      	movlt	r3, r1
 801cbe2:	f9b0 1040 	ldrsh.w	r1, [r0, #64]	; 0x40
 801cbe6:	4299      	cmp	r1, r3
 801cbe8:	bfb8      	it	lt
 801cbea:	4619      	movlt	r1, r3
 801cbec:	4628      	mov	r0, r5
 801cbee:	f7e7 fc87 	bl	8004500 <lv_event_set_ext_draw_size>
 801cbf2:	e6d2      	b.n	801c99a <lv_chart_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 801cbf4:	4628      	mov	r0, r5
 801cbf6:	f7e7 fc0f 	bl	8004418 <lv_event_get_param>
 801cbfa:	4604      	mov	r4, r0
        p->x = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cbfc:	4658      	mov	r0, fp
 801cbfe:	f7eb fae2 	bl	80081c6 <lv_obj_get_content_width>
 801cc02:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801cc06:	fb00 f303 	mul.w	r3, r0, r3
 801cc0a:	121b      	asrs	r3, r3, #8
 801cc0c:	8023      	strh	r3, [r4, #0]
        p->y = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801cc0e:	4658      	mov	r0, fp
 801cc10:	f7eb faf6 	bl	8008200 <lv_obj_get_content_height>
 801cc14:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 801cc18:	fb00 f303 	mul.w	r3, r0, r3
 801cc1c:	121b      	asrs	r3, r3, #8
 801cc1e:	8063      	strh	r3, [r4, #2]
 801cc20:	e6bb      	b.n	801c99a <lv_chart_event+0x12>
 801cc22:	bf00      	nop
 801cc24:	0802d7dc 	.word	0x0802d7dc
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801cc28:	f8da 3008 	ldr.w	r3, [sl, #8]
 801cc2c:	9303      	str	r3, [sp, #12]
    draw_ctx->clip_area = &series_clip_area;
 801cc2e:	ab22      	add	r3, sp, #136	; 0x88
 801cc30:	f8ca 3008 	str.w	r3, [sl, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801cc34:	2232      	movs	r2, #50	; 0x32
 801cc36:	2100      	movs	r1, #0
 801cc38:	4658      	mov	r0, fp
 801cc3a:	f7ee f937 	bl	800aeac <lv_obj_get_style_prop>
 801cc3e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801cc40:	2212      	movs	r2, #18
 801cc42:	2100      	movs	r1, #0
 801cc44:	4658      	mov	r0, fp
 801cc46:	f7ee f931 	bl	800aeac <lv_obj_get_style_prop>
 801cc4a:	9004      	str	r0, [sp, #16]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801cc4c:	fa1f f884 	uxth.w	r8, r4
 801cc50:	f8cd 8014 	str.w	r8, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801cc54:	2210      	movs	r2, #16
 801cc56:	2100      	movs	r1, #0
 801cc58:	4658      	mov	r0, fp
 801cc5a:	f7ee f927 	bl	800aeac <lv_obj_get_style_prop>
 801cc5e:	4604      	mov	r4, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cc60:	4658      	mov	r0, fp
 801cc62:	f7eb fab0 	bl	80081c6 <lv_obj_get_content_width>
 801cc66:	9009      	str	r0, [sp, #36]	; 0x24
 801cc68:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801cc6c:	930a      	str	r3, [sp, #40]	; 0x28
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801cc6e:	4658      	mov	r0, fp
 801cc70:	f7eb fac6 	bl	8008200 <lv_obj_get_content_height>
 801cc74:	900b      	str	r0, [sp, #44]	; 0x2c
 801cc76:	f8bb 7086 	ldrh.w	r7, [fp, #134]	; 0x86
    lv_draw_line_dsc_init(&line_dsc);
 801cc7a:	ae30      	add	r6, sp, #192	; 0xc0
 801cc7c:	4630      	mov	r0, r6
 801cc7e:	f7f1 fb82 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801cc82:	4632      	mov	r2, r6
 801cc84:	2100      	movs	r1, #0
 801cc86:	4658      	mov	r0, fp
 801cc88:	f7ea ff6e 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801cc8c:	4651      	mov	r1, sl
 801cc8e:	a83e      	add	r0, sp, #248	; 0xf8
 801cc90:	f7eb f881 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_MAIN;
 801cc94:	2500      	movs	r5, #0
 801cc96:	954b      	str	r5, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 801cc98:	4b8a      	ldr	r3, [pc, #552]	; (801cec4 <lv_chart_event+0x53c>)
 801cc9a:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_INIT;
 801cc9c:	9540      	str	r5, [sp, #256]	; 0x100
    part_draw_dsc.line_dsc = &line_dsc;
 801cc9e:	9644      	str	r6, [sp, #272]	; 0x110
    part_draw_dsc.id = 0xFFFFFFFF;
 801cca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cca4:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.p1 = NULL;
 801cca6:	9547      	str	r5, [sp, #284]	; 0x11c
    part_draw_dsc.p2 = NULL;
 801cca8:	9548      	str	r5, [sp, #288]	; 0x120
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801ccaa:	aa3e      	add	r2, sp, #248	; 0xf8
 801ccac:	211a      	movs	r1, #26
 801ccae:	4658      	mov	r0, fp
 801ccb0:	f7e7 fb88 	bl	80043c4 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 801ccb4:	2231      	movs	r2, #49	; 0x31
 801ccb6:	4629      	mov	r1, r5
 801ccb8:	4658      	mov	r0, fp
 801ccba:	f7ee f8f7 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801ccbe:	b2c6      	uxtb	r6, r0
 801ccc0:	9606      	str	r6, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801ccc2:	2232      	movs	r2, #50	; 0x32
 801ccc4:	4629      	mov	r1, r5
 801ccc6:	4658      	mov	r0, fp
 801ccc8:	f7ee f8f0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cccc:	b203      	sxth	r3, r0
 801ccce:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 801ccd0:	2233      	movs	r2, #51	; 0x33
 801ccd2:	4629      	mov	r1, r5
 801ccd4:	4658      	mov	r0, fp
 801ccd6:	f7ee f8e9 	bl	800aeac <lv_obj_get_style_prop>
 801ccda:	900d      	str	r0, [sp, #52]	; 0x34
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 801ccdc:	4658      	mov	r0, fp
 801ccde:	f7ec fec9 	bl	8009a74 <lv_obj_get_scroll_left>
 801cce2:	9008      	str	r0, [sp, #32]
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 801cce4:	4658      	mov	r0, fp
 801cce6:	f7ec fe53 	bl	8009990 <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 801ccea:	f8bb 507e 	ldrh.w	r5, [fp, #126]	; 0x7e
 801ccee:	2d00      	cmp	r5, #0
 801ccf0:	d067      	beq.n	801cdc2 <lv_chart_event+0x43a>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801ccf2:	4643      	mov	r3, r8
 801ccf4:	191a      	adds	r2, r3, r4
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 801ccf6:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 801ccfa:	4413      	add	r3, r2
 801ccfc:	1a1b      	subs	r3, r3, r0
 801ccfe:	fa1f f983 	uxth.w	r9, r3
        p1.x = obj->coords.x1;
 801cd02:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801cd06:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        p2.x = obj->coords.x2;
 801cd0a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801cd0e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        i_end = chart->hdiv_cnt;
 801cd12:	fa0f f885 	sxth.w	r8, r5
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 801cd16:	2e02      	cmp	r6, #2
 801cd18:	d921      	bls.n	801cd5e <lv_chart_event+0x3d6>
 801cd1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	f340 8081 	ble.w	801ce24 <lv_chart_event+0x49c>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 801cd22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd24:	f013 0f02 	tst.w	r3, #2
 801cd28:	d10f      	bne.n	801cd4a <lv_chart_event+0x3c2>
        i_start = 0;
 801cd2a:	2400      	movs	r4, #0
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 801cd2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd2e:	f013 0f01 	tst.w	r3, #1
 801cd32:	d015      	beq.n	801cd60 <lv_chart_event+0x3d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801cd34:	2211      	movs	r2, #17
 801cd36:	2100      	movs	r1, #0
 801cd38:	4658      	mov	r0, fp
 801cd3a:	f7ee f8b7 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cd3e:	b200      	sxth	r0, r0
 801cd40:	b970      	cbnz	r0, 801cd60 <lv_chart_event+0x3d8>
 801cd42:	3d01      	subs	r5, #1
 801cd44:	fa0f f885 	sxth.w	r8, r5
 801cd48:	e00a      	b.n	801cd60 <lv_chart_event+0x3d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801cd4a:	2210      	movs	r2, #16
 801cd4c:	2100      	movs	r1, #0
 801cd4e:	4658      	mov	r0, fp
 801cd50:	f7ee f8ac 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cd54:	b204      	sxth	r4, r0
        i_start = 0;
 801cd56:	fab4 f484 	clz	r4, r4
 801cd5a:	0964      	lsrs	r4, r4, #5
 801cd5c:	e7e6      	b.n	801cd2c <lv_chart_event+0x3a4>
 801cd5e:	2400      	movs	r4, #0
        for(i = i_start; i < i_end; i++) {
 801cd60:	45a0      	cmp	r8, r4
 801cd62:	dd2e      	ble.n	801cdc2 <lv_chart_event+0x43a>
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801cd64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd66:	fb07 f303 	mul.w	r3, r7, r3
 801cd6a:	f343 270f 	sbfx	r7, r3, #8, #16
            part_draw_dsc.p1 = &p1;
 801cd6e:	ae1c      	add	r6, sp, #112	; 0x70
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 801cd70:	fb04 f307 	mul.w	r3, r4, r7
 801cd74:	f8bb 207e 	ldrh.w	r2, [fp, #126]	; 0x7e
 801cd78:	3a01      	subs	r2, #1
 801cd7a:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.y += y_ofs;
 801cd7e:	444b      	add	r3, r9
 801cd80:	b21b      	sxth	r3, r3
 801cd82:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
            p2.y = p1.y;
 801cd86:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            part_draw_dsc.class_p = MY_CLASS;
 801cd8a:	4b4e      	ldr	r3, [pc, #312]	; (801cec4 <lv_chart_event+0x53c>)
 801cd8c:	933f      	str	r3, [sp, #252]	; 0xfc
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_HOR;
 801cd8e:	2301      	movs	r3, #1
 801cd90:	9340      	str	r3, [sp, #256]	; 0x100
            part_draw_dsc.p1 = &p1;
 801cd92:	9647      	str	r6, [sp, #284]	; 0x11c
            part_draw_dsc.p2 = &p2;
 801cd94:	ad1f      	add	r5, sp, #124	; 0x7c
 801cd96:	9548      	str	r5, [sp, #288]	; 0x120
            part_draw_dsc.id = i;
 801cd98:	944c      	str	r4, [sp, #304]	; 0x130
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801cd9a:	aa3e      	add	r2, sp, #248	; 0xf8
 801cd9c:	211a      	movs	r1, #26
 801cd9e:	4658      	mov	r0, fp
 801cda0:	f7e7 fb10 	bl	80043c4 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801cda4:	462b      	mov	r3, r5
 801cda6:	4632      	mov	r2, r6
 801cda8:	a930      	add	r1, sp, #192	; 0xc0
 801cdaa:	4650      	mov	r0, sl
 801cdac:	f7f1 fb02 	bl	800e3b4 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801cdb0:	aa3e      	add	r2, sp, #248	; 0xf8
 801cdb2:	211b      	movs	r1, #27
 801cdb4:	4658      	mov	r0, fp
 801cdb6:	f7e7 fb05 	bl	80043c4 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 801cdba:	3401      	adds	r4, #1
 801cdbc:	b224      	sxth	r4, r4
 801cdbe:	4544      	cmp	r4, r8
 801cdc0:	dbd6      	blt.n	801cd70 <lv_chart_event+0x3e8>
    if(chart->vdiv_cnt != 0) {
 801cdc2:	f8bb 5080 	ldrh.w	r5, [fp, #128]	; 0x80
 801cdc6:	2d00      	cmp	r5, #0
 801cdc8:	d06b      	beq.n	801cea2 <lv_chart_event+0x51a>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801cdca:	9e05      	ldr	r6, [sp, #20]
 801cdcc:	9b04      	ldr	r3, [sp, #16]
 801cdce:	441e      	add	r6, r3
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 801cdd0:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801cdd4:	441e      	add	r6, r3
 801cdd6:	9b08      	ldr	r3, [sp, #32]
 801cdd8:	1af6      	subs	r6, r6, r3
 801cdda:	b2b6      	uxth	r6, r6
        p1.y = obj->coords.y1;
 801cddc:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 801cde0:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        p2.y = obj->coords.y2;
 801cde4:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 801cde8:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        i_end = chart->vdiv_cnt;
 801cdec:	fa0f f985 	sxth.w	r9, r5
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 801cdf0:	9b06      	ldr	r3, [sp, #24]
 801cdf2:	2b02      	cmp	r3, #2
 801cdf4:	d922      	bls.n	801ce3c <lv_chart_event+0x4b4>
 801cdf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	dd61      	ble.n	801cec0 <lv_chart_event+0x538>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 801cdfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cdfe:	f013 0f04 	tst.w	r3, #4
 801ce02:	d111      	bne.n	801ce28 <lv_chart_event+0x4a0>
        i_start = 0;
 801ce04:	2400      	movs	r4, #0
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 801ce06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce08:	f013 0f08 	tst.w	r3, #8
 801ce0c:	d017      	beq.n	801ce3e <lv_chart_event+0x4b6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ce0e:	2213      	movs	r2, #19
 801ce10:	2100      	movs	r1, #0
 801ce12:	4658      	mov	r0, fp
 801ce14:	f7ee f84a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ce18:	b200      	sxth	r0, r0
 801ce1a:	b980      	cbnz	r0, 801ce3e <lv_chart_event+0x4b6>
 801ce1c:	3d01      	subs	r5, #1
 801ce1e:	fa0f f985 	sxth.w	r9, r5
 801ce22:	e00c      	b.n	801ce3e <lv_chart_event+0x4b6>
        i_start = 0;
 801ce24:	2400      	movs	r4, #0
 801ce26:	e79b      	b.n	801cd60 <lv_chart_event+0x3d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801ce28:	2212      	movs	r2, #18
 801ce2a:	2100      	movs	r1, #0
 801ce2c:	4658      	mov	r0, fp
 801ce2e:	f7ee f83d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ce32:	b204      	sxth	r4, r0
        i_start = 0;
 801ce34:	fab4 f484 	clz	r4, r4
 801ce38:	0964      	lsrs	r4, r4, #5
 801ce3a:	e7e4      	b.n	801ce06 <lv_chart_event+0x47e>
 801ce3c:	2400      	movs	r4, #0
        for(i = i_start; i < i_end; i++) {
 801ce3e:	45a1      	cmp	r9, r4
 801ce40:	dd2f      	ble.n	801cea2 <lv_chart_event+0x51a>
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801ce42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ce46:	fb02 f803 	mul.w	r8, r2, r3
 801ce4a:	f348 280f 	sbfx	r8, r8, #8, #16
            part_draw_dsc.p1 = &p1;
 801ce4e:	af1c      	add	r7, sp, #112	; 0x70
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 801ce50:	fb04 f308 	mul.w	r3, r4, r8
 801ce54:	f8bb 2080 	ldrh.w	r2, [fp, #128]	; 0x80
 801ce58:	3a01      	subs	r2, #1
 801ce5a:	fb93 f3f2 	sdiv	r3, r3, r2
            p1.x += x_ofs;
 801ce5e:	4433      	add	r3, r6
 801ce60:	b21b      	sxth	r3, r3
 801ce62:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
            p2.x = p1.x;
 801ce66:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            part_draw_dsc.class_p = MY_CLASS;
 801ce6a:	4b16      	ldr	r3, [pc, #88]	; (801cec4 <lv_chart_event+0x53c>)
 801ce6c:	933f      	str	r3, [sp, #252]	; 0xfc
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_VER;
 801ce6e:	2302      	movs	r3, #2
 801ce70:	9340      	str	r3, [sp, #256]	; 0x100
            part_draw_dsc.p1 = &p1;
 801ce72:	9747      	str	r7, [sp, #284]	; 0x11c
            part_draw_dsc.p2 = &p2;
 801ce74:	ad1f      	add	r5, sp, #124	; 0x7c
 801ce76:	9548      	str	r5, [sp, #288]	; 0x120
            part_draw_dsc.id = i;
 801ce78:	944c      	str	r4, [sp, #304]	; 0x130
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801ce7a:	aa3e      	add	r2, sp, #248	; 0xf8
 801ce7c:	211a      	movs	r1, #26
 801ce7e:	4658      	mov	r0, fp
 801ce80:	f7e7 faa0 	bl	80043c4 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801ce84:	462b      	mov	r3, r5
 801ce86:	463a      	mov	r2, r7
 801ce88:	a930      	add	r1, sp, #192	; 0xc0
 801ce8a:	4650      	mov	r0, sl
 801ce8c:	f7f1 fa92 	bl	800e3b4 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801ce90:	aa3e      	add	r2, sp, #248	; 0xf8
 801ce92:	211b      	movs	r1, #27
 801ce94:	4658      	mov	r0, fp
 801ce96:	f7e7 fa95 	bl	80043c4 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 801ce9a:	3401      	adds	r4, #1
 801ce9c:	b224      	sxth	r4, r4
 801ce9e:	454c      	cmp	r4, r9
 801cea0:	dbd6      	blt.n	801ce50 <lv_chart_event+0x4c8>
    part_draw_dsc.id = 0xFFFFFFFF;
 801cea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cea6:	934c      	str	r3, [sp, #304]	; 0x130
    part_draw_dsc.p1 = NULL;
 801cea8:	2300      	movs	r3, #0
 801ceaa:	9347      	str	r3, [sp, #284]	; 0x11c
    part_draw_dsc.p2 = NULL;
 801ceac:	9348      	str	r3, [sp, #288]	; 0x120
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801ceae:	aa3e      	add	r2, sp, #248	; 0xf8
 801ceb0:	211b      	movs	r1, #27
 801ceb2:	4658      	mov	r0, fp
 801ceb4:	f7e7 fa86 	bl	80043c4 <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 801ceb8:	9b03      	ldr	r3, [sp, #12]
 801ceba:	f8ca 3008 	str.w	r3, [sl, #8]
 801cebe:	e597      	b.n	801c9f0 <lv_chart_event+0x68>
        i_start = 0;
 801cec0:	2400      	movs	r4, #0
 801cec2:	e7bc      	b.n	801ce3e <lv_chart_event+0x4b6>
 801cec4:	0802d7dc 	.word	0x0802d7dc
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 801cec8:	f8da 2008 	ldr.w	r2, [sl, #8]
 801cecc:	9f07      	ldr	r7, [sp, #28]
 801cece:	4639      	mov	r1, r7
 801ced0:	a81a      	add	r0, sp, #104	; 0x68
 801ced2:	f004 f916 	bl	8021102 <_lv_area_intersect>
 801ced6:	2800      	cmp	r0, #0
 801ced8:	f43f adb1 	beq.w	801ca3e <lv_chart_event+0xb6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801cedc:	f8da 3008 	ldr.w	r3, [sl, #8]
 801cee0:	9312      	str	r3, [sp, #72]	; 0x48
    draw_ctx->clip_area = &clip_area;
 801cee2:	ab1a      	add	r3, sp, #104	; 0x68
 801cee4:	f8ca 3008 	str.w	r3, [sl, #8]
    if(chart->point_cnt < 2) return;
 801cee8:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801ceec:	2b01      	cmp	r3, #1
 801ceee:	f67f ada6 	bls.w	801ca3e <lv_chart_event+0xb6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801cef2:	2232      	movs	r2, #50	; 0x32
 801cef4:	2100      	movs	r1, #0
 801cef6:	4658      	mov	r0, fp
 801cef8:	f7ed ffd8 	bl	800aeac <lv_obj_get_style_prop>
 801cefc:	9003      	str	r0, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801cefe:	2212      	movs	r2, #18
 801cf00:	2100      	movs	r1, #0
 801cf02:	4658      	mov	r0, fp
 801cf04:	f7ed ffd2 	bl	800aeac <lv_obj_get_style_prop>
 801cf08:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801cf0a:	2210      	movs	r2, #16
 801cf0c:	2100      	movs	r1, #0
 801cf0e:	4658      	mov	r0, fp
 801cf10:	f7ed ffcc 	bl	800aeac <lv_obj_get_style_prop>
 801cf14:	9005      	str	r0, [sp, #20]
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cf16:	4658      	mov	r0, fp
 801cf18:	f7eb f955 	bl	80081c6 <lv_obj_get_content_width>
 801cf1c:	4681      	mov	r9, r0
 801cf1e:	f8bb 4084 	ldrh.w	r4, [fp, #132]	; 0x84
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801cf22:	4658      	mov	r0, fp
 801cf24:	f7eb f96c 	bl	8008200 <lv_obj_get_content_height>
 801cf28:	9006      	str	r0, [sp, #24]
 801cf2a:	f8bb 5086 	ldrh.w	r5, [fp, #134]	; 0x86
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801cf2e:	f9bb 6014 	ldrsh.w	r6, [fp, #20]
 801cf32:	4658      	mov	r0, fp
 801cf34:	f7ec fd9e 	bl	8009a74 <lv_obj_get_scroll_left>
 801cf38:	9008      	str	r0, [sp, #32]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 801cf3a:	f9bb 3016 	ldrsh.w	r3, [fp, #22]
 801cf3e:	9309      	str	r3, [sp, #36]	; 0x24
 801cf40:	4658      	mov	r0, fp
 801cf42:	f7ec fd25 	bl	8009990 <lv_obj_get_scroll_top>
 801cf46:	900b      	str	r0, [sp, #44]	; 0x2c
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 801cf48:	f8da 2008 	ldr.w	r2, [sl, #8]
 801cf4c:	4639      	mov	r1, r7
 801cf4e:	a81c      	add	r0, sp, #112	; 0x70
 801cf50:	f004 f8d7 	bl	8021102 <_lv_area_intersect>
    if(mask_ret == false) return;
 801cf54:	2800      	cmp	r0, #0
 801cf56:	f43f ad72 	beq.w	801ca3e <lv_chart_event+0xb6>
    lv_draw_line_dsc_init(&line_dsc_default);
 801cf5a:	a822      	add	r0, sp, #136	; 0x88
 801cf5c:	f7f1 fa13 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 801cf60:	aa22      	add	r2, sp, #136	; 0x88
 801cf62:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801cf66:	4658      	mov	r0, fp
 801cf68:	f7ea fdfe 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 801cf6c:	a830      	add	r0, sp, #192	; 0xc0
 801cf6e:	f7f2 fc5d 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 801cf72:	aa30      	add	r2, sp, #192	; 0xc0
 801cf74:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801cf78:	4658      	mov	r0, fp
 801cf7a:	f7ea fbd1 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801cf7e:	2201      	movs	r2, #1
 801cf80:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801cf84:	4658      	mov	r0, fp
 801cf86:	f7ed ff91 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cf8a:	b202      	sxth	r2, r0
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801cf8c:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801cf90:	4413      	add	r3, r2
 801cf92:	105f      	asrs	r7, r3, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801cf94:	2204      	movs	r2, #4
 801cf96:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801cf9a:	4658      	mov	r0, fp
 801cf9c:	f7ed ff86 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801cfa0:	b202      	sxth	r2, r0
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801cfa2:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801cfa6:	4413      	add	r3, r2
 801cfa8:	105b      	asrs	r3, r3, #1
 801cfaa:	461a      	mov	r2, r3
 801cfac:	930f      	str	r3, [sp, #60]	; 0x3c
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 801cfae:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 801cfb2:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 801cfb6:	42ba      	cmp	r2, r7
 801cfb8:	bfa8      	it	ge
 801cfba:	463a      	movge	r2, r7
 801cfbc:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 801cfc0:	dd05      	ble.n	801cfce <lv_chart_event+0x646>
 801cfc2:	f89d 2091 	ldrb.w	r2, [sp, #145]	; 0x91
 801cfc6:	f042 0210 	orr.w	r2, r2, #16
 801cfca:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801cfce:	2b01      	cmp	r3, #1
 801cfd0:	d032      	beq.n	801d038 <lv_chart_event+0x6b0>
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 801cfd2:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801cfd6:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801cfd8:	fb04 f409 	mul.w	r4, r4, r9
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 801cfdc:	f344 240f 	sbfx	r4, r4, #8, #16
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801cfe0:	4640      	mov	r0, r8
 801cfe2:	f004 fe71 	bl	8021cc8 <_lv_ll_get_tail>
 801cfe6:	4681      	mov	r9, r0
 801cfe8:	2800      	cmp	r0, #0
 801cfea:	f000 8182 	beq.w	801d2f2 <lv_chart_event+0x96a>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801cfee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801cff2:	9a06      	ldr	r2, [sp, #24]
 801cff4:	fb05 f202 	mul.w	r2, r5, r2
 801cff8:	4615      	mov	r5, r2
 801cffa:	f342 220f 	sbfx	r2, r2, #8, #16
 801cffe:	9206      	str	r2, [sp, #24]
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801d000:	9a04      	ldr	r2, [sp, #16]
 801d002:	441a      	add	r2, r3
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 801d004:	4416      	add	r6, r2
 801d006:	9a08      	ldr	r2, [sp, #32]
 801d008:	1ab2      	subs	r2, r6, r2
 801d00a:	b291      	uxth	r1, r2
 801d00c:	910a      	str	r1, [sp, #40]	; 0x28
 801d00e:	b212      	sxth	r2, r2
 801d010:	9215      	str	r2, [sp, #84]	; 0x54
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 801d012:	9a05      	ldr	r2, [sp, #20]
 801d014:	4413      	add	r3, r2
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 801d016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d018:	4413      	add	r3, r2
 801d01a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d01c:	1a9b      	subs	r3, r3, r2
 801d01e:	b29b      	uxth	r3, r3
 801d020:	eb03 2325 	add.w	r3, r3, r5, asr #8
 801d024:	b29b      	uxth	r3, r3
 801d026:	9309      	str	r3, [sp, #36]	; 0x24
        part_draw_dsc.class_p = MY_CLASS;
 801d028:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 801d02c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d030:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 801d034:	46a2      	mov	sl, r4
 801d036:	e102      	b.n	801d23e <lv_chart_event+0x8b6>
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801d038:	f89d 3091 	ldrb.w	r3, [sp, #145]	; 0x91
 801d03c:	f043 0310 	orr.w	r3, r3, #16
 801d040:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 801d044:	e7c5      	b.n	801cfd2 <lv_chart_event+0x64a>
                    point_area.x1 = p1.x - point_w;
 801d046:	b280      	uxth	r0, r0
 801d048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d04a:	1a83      	subs	r3, r0, r2
 801d04c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
                    point_area.x2 = p1.x + point_w;
 801d050:	4410      	add	r0, r2
 801d052:	f8ad 0080 	strh.w	r0, [sp, #128]	; 0x80
                    point_area.y1 = p1.y - point_h;
 801d056:	fa1f fc8c 	uxth.w	ip, ip
 801d05a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d05c:	ebac 0302 	sub.w	r3, ip, r2
 801d060:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
                    point_area.y2 = p1.y + point_h;
 801d064:	4494      	add	ip, r2
 801d066:	f8ad c082 	strh.w	ip, [sp, #130]	; 0x82
                    part_draw_dsc.id = i - 1;
 801d06a:	9b08      	ldr	r3, [sp, #32]
 801d06c:	3b01      	subs	r3, #1
 801d06e:	934c      	str	r3, [sp, #304]	; 0x130
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801d070:	9a04      	ldr	r2, [sp, #16]
 801d072:	0054      	lsls	r4, r2, #1
 801d074:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d078:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801d07c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d080:	4293      	cmp	r3, r2
 801d082:	bf0c      	ite	eq
 801d084:	2300      	moveq	r3, #0
 801d086:	ab17      	addne	r3, sp, #92	; 0x5c
 801d088:	9347      	str	r3, [sp, #284]	; 0x11c
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801d08a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d08e:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
 801d092:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d096:	4293      	cmp	r3, r2
 801d098:	bf0c      	ite	eq
 801d09a:	2300      	moveq	r3, #0
 801d09c:	ab18      	addne	r3, sp, #96	; 0x60
 801d09e:	9348      	str	r3, [sp, #288]	; 0x120
                    part_draw_dsc.draw_area = &point_area;
 801d0a0:	ab1f      	add	r3, sp, #124	; 0x7c
 801d0a2:	9341      	str	r3, [sp, #260]	; 0x104
                    part_draw_dsc.value = ser->y_points[p_prev];
 801d0a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d0a8:	5f1b      	ldrsh	r3, [r3, r4]
 801d0aa:	934e      	str	r3, [sp, #312]	; 0x138
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d0ac:	aa3e      	add	r2, sp, #248	; 0xf8
 801d0ae:	211a      	movs	r1, #26
 801d0b0:	4658      	mov	r0, fp
 801d0b2:	f7e7 f987 	bl	80043c4 <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d0b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d0ba:	5f1a      	ldrsh	r2, [r3, r4]
 801d0bc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801d0c0:	428a      	cmp	r2, r1
 801d0c2:	d004      	beq.n	801d0ce <lv_chart_event+0x746>
 801d0c4:	f933 3016 	ldrsh.w	r3, [r3, r6, lsl #1]
 801d0c8:	428b      	cmp	r3, r1
 801d0ca:	f040 809a 	bne.w	801d202 <lv_chart_event+0x87a>
                    if(point_w && point_h && ser->y_points[p_prev] != LV_CHART_POINT_NONE) {
 801d0ce:	9b03      	ldr	r3, [sp, #12]
 801d0d0:	b14b      	cbz	r3, 801d0e6 <lv_chart_event+0x75e>
 801d0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d0d4:	b13b      	cbz	r3, 801d0e6 <lv_chart_event+0x75e>
 801d0d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d0da:	5f1b      	ldrsh	r3, [r3, r4]
 801d0dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d0e0:	4293      	cmp	r3, r2
 801d0e2:	f040 8095 	bne.w	801d210 <lv_chart_event+0x888>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d0e6:	aa3e      	add	r2, sp, #248	; 0xf8
 801d0e8:	211b      	movs	r1, #27
 801d0ea:	4658      	mov	r0, fp
 801d0ec:	f7e7 f96a 	bl	80043c4 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 801d0f0:	3501      	adds	r5, #1
 801d0f2:	b2ad      	uxth	r5, r5
 801d0f4:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801d0f8:	42aa      	cmp	r2, r5
 801d0fa:	f240 808f 	bls.w	801d21c <lv_chart_event+0x894>
            p_act = (start_point + i) % chart->point_cnt;
 801d0fe:	9604      	str	r6, [sp, #16]
            p1.x = p2.x;
 801d100:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 801d104:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
            p1.y = p2.y;
 801d108:	f9bd c062 	ldrsh.w	ip, [sp, #98]	; 0x62
 801d10c:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
            if(p1.x > clip_area_ori->x2 + point_w + 1) break;
 801d110:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 801d114:	9903      	ldr	r1, [sp, #12]
 801d116:	440b      	add	r3, r1
 801d118:	3301      	adds	r3, #1
 801d11a:	4298      	cmp	r0, r3
 801d11c:	f300 8081 	bgt.w	801d222 <lv_chart_event+0x89a>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 801d120:	9508      	str	r5, [sp, #32]
 801d122:	fb05 f30a 	mul.w	r3, r5, sl
 801d126:	1e51      	subs	r1, r2, #1
 801d128:	fb93 f3f1 	sdiv	r3, r3, r1
 801d12c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d12e:	440b      	add	r3, r1
 801d130:	b299      	uxth	r1, r3
 801d132:	910b      	str	r1, [sp, #44]	; 0x2c
 801d134:	b21b      	sxth	r3, r3
 801d136:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
            p_act = (start_point + i) % chart->point_cnt;
 801d13a:	9905      	ldr	r1, [sp, #20]
 801d13c:	4429      	add	r1, r5
 801d13e:	fb91 f4f2 	sdiv	r4, r1, r2
 801d142:	fb02 1214 	mls	r2, r2, r4, r1
 801d146:	b216      	sxth	r6, r2
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 801d148:	f8d9 e004 	ldr.w	lr, [r9, #4]
 801d14c:	f899 100c 	ldrb.w	r1, [r9, #12]
 801d150:	f3c1 1100 	ubfx	r1, r1, #4, #1
 801d154:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 801d158:	f9b1 406c 	ldrsh.w	r4, [r1, #108]	; 0x6c
 801d15c:	f93e 2016 	ldrsh.w	r2, [lr, r6, lsl #1]
 801d160:	1b12      	subs	r2, r2, r4
 801d162:	9f06      	ldr	r7, [sp, #24]
 801d164:	fb07 f202 	mul.w	r2, r7, r2
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801d168:	f9b1 1070 	ldrsh.w	r1, [r1, #112]	; 0x70
 801d16c:	1b09      	subs	r1, r1, r4
 801d16e:	fb92 f4f1 	sdiv	r4, r2, r1
            p2.y  = h - y_tmp + y_ofs;
 801d172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d174:	1b14      	subs	r4, r2, r4
 801d176:	b224      	sxth	r4, r4
 801d178:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
            if(p2.x < clip_area_ori->x1 - point_w - 1) {
 801d17c:	f9b8 2000 	ldrsh.w	r2, [r8]
 801d180:	9903      	ldr	r1, [sp, #12]
 801d182:	1a52      	subs	r2, r2, r1
 801d184:	3a01      	subs	r2, #1
 801d186:	4293      	cmp	r3, r2
 801d188:	dbb2      	blt.n	801d0f0 <lv_chart_event+0x768>
            if(i != 0) {
 801d18a:	2d00      	cmp	r5, #0
 801d18c:	d0b0      	beq.n	801d0f0 <lv_chart_event+0x768>
                if(crowded_mode) {
 801d18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d190:	4552      	cmp	r2, sl
 801d192:	f6ff af58 	blt.w	801d046 <lv_chart_event+0x6be>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d196:	9a04      	ldr	r2, [sp, #16]
 801d198:	f93e 2012 	ldrsh.w	r2, [lr, r2, lsl #1]
 801d19c:	f647 77ff 	movw	r7, #32767	; 0x7fff
 801d1a0:	42ba      	cmp	r2, r7
 801d1a2:	d0a5      	beq.n	801d0f0 <lv_chart_event+0x768>
 801d1a4:	f93e 2016 	ldrsh.w	r2, [lr, r6, lsl #1]
 801d1a8:	42ba      	cmp	r2, r7
 801d1aa:	d0a1      	beq.n	801d0f0 <lv_chart_event+0x768>
                        y_max = LV_MAX(y_max, p2.y);
 801d1ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d1ae:	42a2      	cmp	r2, r4
 801d1b0:	bfb8      	it	lt
 801d1b2:	4622      	movlt	r2, r4
 801d1b4:	920e      	str	r2, [sp, #56]	; 0x38
                        y_min = LV_MIN(y_min, p2.y);
 801d1b6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d1b8:	42a7      	cmp	r7, r4
 801d1ba:	bfa8      	it	ge
 801d1bc:	4627      	movge	r7, r4
 801d1be:	9710      	str	r7, [sp, #64]	; 0x40
                        if(p1.x != p2.x) {
 801d1c0:	4298      	cmp	r0, r3
 801d1c2:	d095      	beq.n	801d0f0 <lv_chart_event+0x768>
                            p2.x--;         /*It's already on the next x value*/
 801d1c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d1c6:	1e4b      	subs	r3, r1, #1
 801d1c8:	b21b      	sxth	r3, r3
 801d1ca:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                            p1.x = p2.x;
 801d1ce:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                            p1.y = y_min;
 801d1d2:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 801d1d6:	42ba      	cmp	r2, r7
                            p2.y = y_max;
 801d1d8:	bf11      	iteee	ne
 801d1da:	f8ad 2062 	strhne.w	r2, [sp, #98]	; 0x62
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 801d1de:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 801d1e0:	3301      	addeq	r3, #1
 801d1e2:	f8ad 3062 	strheq.w	r3, [sp, #98]	; 0x62
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 801d1e6:	ab18      	add	r3, sp, #96	; 0x60
 801d1e8:	aa17      	add	r2, sp, #92	; 0x5c
 801d1ea:	a922      	add	r1, sp, #136	; 0x88
 801d1ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d1ee:	f7f1 f8e1 	bl	800e3b4 <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 801d1f2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801d1f6:	3301      	adds	r3, #1
 801d1f8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                            y_max = y_cur;
 801d1fc:	940e      	str	r4, [sp, #56]	; 0x38
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 801d1fe:	9410      	str	r4, [sp, #64]	; 0x40
 801d200:	e776      	b.n	801d0f0 <lv_chart_event+0x768>
                        lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 801d202:	ab18      	add	r3, sp, #96	; 0x60
 801d204:	aa17      	add	r2, sp, #92	; 0x5c
 801d206:	a922      	add	r1, sp, #136	; 0x88
 801d208:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d20a:	f7f1 f8d3 	bl	800e3b4 <lv_draw_line>
 801d20e:	e75e      	b.n	801d0ce <lv_chart_event+0x746>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801d210:	aa1f      	add	r2, sp, #124	; 0x7c
 801d212:	a930      	add	r1, sp, #192	; 0xc0
 801d214:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d216:	f7f2 fb65 	bl	800f8e4 <lv_draw_rect>
 801d21a:	e764      	b.n	801d0e6 <lv_chart_event+0x75e>
            p_act = (start_point + i) % chart->point_cnt;
 801d21c:	9f03      	ldr	r7, [sp, #12]
 801d21e:	9604      	str	r6, [sp, #16]
 801d220:	e000      	b.n	801d224 <lv_chart_event+0x89c>
 801d222:	9f03      	ldr	r7, [sp, #12]
        if(!crowded_mode && i == chart->point_cnt) {
 801d224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d226:	4553      	cmp	r3, sl
 801d228:	da02      	bge.n	801d230 <lv_chart_event+0x8a8>
 801d22a:	4295      	cmp	r5, r2
 801d22c:	f000 8471 	beq.w	801db12 <lv_chart_event+0x118a>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801d230:	4649      	mov	r1, r9
 801d232:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d234:	f004 fd50 	bl	8021cd8 <_lv_ll_get_prev>
 801d238:	4681      	mov	r9, r0
 801d23a:	2800      	cmp	r0, #0
 801d23c:	d057      	beq.n	801d2ee <lv_chart_event+0x966>
        if(ser->hidden) continue;
 801d23e:	f899 300c 	ldrb.w	r3, [r9, #12]
 801d242:	f013 0f01 	tst.w	r3, #1
 801d246:	d1f3      	bne.n	801d230 <lv_chart_event+0x8a8>
        line_dsc_default.color = ser->color;
 801d248:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801d24c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 801d250:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801d254:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801d258:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801d25c:	f013 0f08 	tst.w	r3, #8
 801d260:	bf0c      	ite	eq
 801d262:	f9b9 300a 	ldrsheq.w	r3, [r9, #10]
 801d266:	2300      	movne	r3, #0
 801d268:	9305      	str	r3, [sp, #20]
        p1.x = x_ofs;
 801d26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d26c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        p2.x = x_ofs;
 801d270:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 801d274:	f899 200c 	ldrb.w	r2, [r9, #12]
 801d278:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801d27c:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801d280:	f9b2 106c 	ldrsh.w	r1, [r2, #108]	; 0x6c
 801d284:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d288:	9c05      	ldr	r4, [sp, #20]
 801d28a:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 801d28e:	1a5b      	subs	r3, r3, r1
 801d290:	9806      	ldr	r0, [sp, #24]
 801d292:	fb00 f303 	mul.w	r3, r0, r3
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801d296:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
 801d29a:	1a52      	subs	r2, r2, r1
 801d29c:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
 801d2a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d2a2:	1ad3      	subs	r3, r2, r3
 801d2a4:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801d2a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d2aa:	a83e      	add	r0, sp, #248	; 0xf8
 801d2ac:	f7ea fd73 	bl	8007d96 <lv_obj_draw_dsc_init>
        part_draw_dsc.class_p = MY_CLASS;
 801d2b0:	4bb9      	ldr	r3, [pc, #740]	; (801d598 <lv_chart_event+0xc10>)
 801d2b2:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 801d2b4:	2303      	movs	r3, #3
 801d2b6:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.part = LV_PART_ITEMS;
 801d2b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801d2bc:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.line_dsc = &line_dsc_default;
 801d2be:	ab22      	add	r3, sp, #136	; 0x88
 801d2c0:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 801d2c2:	ab30      	add	r3, sp, #192	; 0xc0
 801d2c4:	9342      	str	r3, [sp, #264]	; 0x108
        part_draw_dsc.sub_part_ptr = ser;
 801d2c6:	f8cd 913c 	str.w	r9, [sp, #316]	; 0x13c
        lv_coord_t y_min = p2.y;
 801d2ca:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801d2ce:	930e      	str	r3, [sp, #56]	; 0x38
        for(i = 0; i < chart->point_cnt; i++) {
 801d2d0:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801d2d4:	2a00      	cmp	r2, #0
 801d2d6:	f000 8416 	beq.w	801db06 <lv_chart_event+0x117e>
        lv_coord_t y_min = p2.y;
 801d2da:	9310      	str	r3, [sp, #64]	; 0x40
        lv_coord_t p_act = start_point;
 801d2dc:	9404      	str	r4, [sp, #16]
        for(i = 0; i < chart->point_cnt; i++) {
 801d2de:	2500      	movs	r5, #0
                    point_area.x1 = p1.x - point_w;
 801d2e0:	b2bb      	uxth	r3, r7
 801d2e2:	9313      	str	r3, [sp, #76]	; 0x4c
                    point_area.y1 = p1.y - point_h;
 801d2e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801d2e8:	9314      	str	r3, [sp, #80]	; 0x50
 801d2ea:	9703      	str	r7, [sp, #12]
 801d2ec:	e708      	b.n	801d100 <lv_chart_event+0x778>
 801d2ee:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    draw_ctx->clip_area = clip_area_ori;
 801d2f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d2f4:	f8ca 3008 	str.w	r3, [sl, #8]
 801d2f8:	f7ff bba1 	b.w	801ca3e <lv_chart_event+0xb6>
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 801d2fc:	f8da 2008 	ldr.w	r2, [sl, #8]
 801d300:	9907      	ldr	r1, [sp, #28]
 801d302:	a81f      	add	r0, sp, #124	; 0x7c
 801d304:	f003 fefd 	bl	8021102 <_lv_area_intersect>
 801d308:	2800      	cmp	r0, #0
 801d30a:	f43f ab98 	beq.w	801ca3e <lv_chart_event+0xb6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801d30e:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d312:	930f      	str	r3, [sp, #60]	; 0x3c
    draw_ctx->clip_area = &clip_area;
 801d314:	ab1f      	add	r3, sp, #124	; 0x7c
 801d316:	f8ca 3008 	str.w	r3, [sl, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d31a:	2212      	movs	r2, #18
 801d31c:	2100      	movs	r1, #0
 801d31e:	4658      	mov	r0, fp
 801d320:	f7ed fdc4 	bl	800aeac <lv_obj_get_style_prop>
 801d324:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d326:	2210      	movs	r2, #16
 801d328:	2100      	movs	r1, #0
 801d32a:	4658      	mov	r0, fp
 801d32c:	f7ed fdbe 	bl	800aeac <lv_obj_get_style_prop>
 801d330:	4606      	mov	r6, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801d332:	4658      	mov	r0, fp
 801d334:	f7ea ff47 	bl	80081c6 <lv_obj_get_content_width>
 801d338:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801d33c:	fb00 f303 	mul.w	r3, r0, r3
 801d340:	f343 270f 	sbfx	r7, r3, #8, #16
 801d344:	970a      	str	r7, [sp, #40]	; 0x28
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801d346:	4658      	mov	r0, fp
 801d348:	f7ea ff5a 	bl	8008200 <lv_obj_get_content_height>
 801d34c:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 801d350:	fb00 f303 	mul.w	r3, r0, r3
 801d354:	121a      	asrs	r2, r3, #8
 801d356:	9204      	str	r2, [sp, #16]
 801d358:	f343 230f 	sbfx	r3, r3, #8, #16
 801d35c:	9305      	str	r3, [sp, #20]
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 801d35e:	4640      	mov	r0, r8
 801d360:	f004 fcbd 	bl	8021cde <_lv_ll_get_len>
 801d364:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801d366:	2215      	movs	r2, #21
 801d368:	2100      	movs	r1, #0
 801d36a:	4658      	mov	r0, fp
 801d36c:	f7ed fd9e 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d370:	b202      	sxth	r2, r0
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801d372:	f8bb 1082 	ldrh.w	r1, [fp, #130]	; 0x82
                                                              LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 801d376:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801d37a:	fb02 f303 	mul.w	r3, r2, r3
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801d37e:	121b      	asrs	r3, r3, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 801d380:	1e4a      	subs	r2, r1, #1
 801d382:	fb02 7313 	mls	r3, r2, r3, r7
 801d386:	fb93 f3f1 	sdiv	r3, r3, r1
 801d38a:	fa0f f983 	sxth.w	r9, r3
 801d38e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801d392:	2215      	movs	r2, #21
 801d394:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801d398:	4658      	mov	r0, fp
 801d39a:	f7ed fd87 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d39e:	b202      	sxth	r2, r0
                                                            LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the columns on the ~same X*/
 801d3a0:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801d3a4:	fb02 f303 	mul.w	r3, r2, r3
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 801d3a8:	121b      	asrs	r3, r3, #8
 801d3aa:	930c      	str	r3, [sp, #48]	; 0x30
    lv_coord_t col_w = (block_w - (ser_cnt - 1) * ser_gap) / ser_cnt;
 801d3ac:	1e67      	subs	r7, r4, #1
 801d3ae:	fb03 9717 	mls	r7, r3, r7, r9
 801d3b2:	fbb7 f7f4 	udiv	r7, r7, r4
 801d3b6:	b23f      	sxth	r7, r7
    if(col_w < 1) col_w  = 1;
 801d3b8:	2f01      	cmp	r7, #1
 801d3ba:	bfb8      	it	lt
 801d3bc:	2701      	movlt	r7, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801d3be:	2232      	movs	r2, #50	; 0x32
 801d3c0:	2100      	movs	r1, #0
 801d3c2:	4658      	mov	r0, fp
 801d3c4:	f7ed fd72 	bl	800aeac <lv_obj_get_style_prop>
 801d3c8:	4604      	mov	r4, r0
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 801d3ca:	4658      	mov	r0, fp
 801d3cc:	f7ec fb52 	bl	8009a74 <lv_obj_get_scroll_left>
 801d3d0:	b2a4      	uxth	r4, r4
 801d3d2:	4425      	add	r5, r4
 801d3d4:	1a2d      	subs	r5, r5, r0
 801d3d6:	b2ab      	uxth	r3, r5
 801d3d8:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 801d3da:	4658      	mov	r0, fp
 801d3dc:	f7ec fad8 	bl	8009990 <lv_obj_get_scroll_top>
 801d3e0:	4434      	add	r4, r6
 801d3e2:	1a24      	subs	r4, r4, r0
 801d3e4:	b2a3      	uxth	r3, r4
 801d3e6:	9306      	str	r3, [sp, #24]
    lv_draw_rect_dsc_init(&col_dsc);
 801d3e8:	a830      	add	r0, sp, #192	; 0xc0
 801d3ea:	f7f2 fa1f 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 801d3ee:	aa30      	add	r2, sp, #192	; 0xc0
 801d3f0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801d3f4:	4658      	mov	r0, fp
 801d3f6:	f7ea f993 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 801d3fa:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
 801d3fe:	f36f 0302 	bfc	r3, #0, #3
 801d402:	f88d 30cf 	strb.w	r3, [sp, #207]	; 0xcf
    col_dsc.bg_opa = LV_OPA_COVER;
 801d406:	23ff      	movs	r3, #255	; 0xff
 801d408:	f88d 30c3 	strb.w	r3, [sp, #195]	; 0xc3
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 801d40c:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 801d410:	f8bd 20c0 	ldrh.w	r2, [sp, #192]	; 0xc0
 801d414:	4413      	add	r3, r2
 801d416:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801d41a:	4651      	mov	r1, sl
 801d41c:	a83e      	add	r0, sp, #248	; 0xf8
 801d41e:	f7ea fcba 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 801d422:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801d426:	934b      	str	r3, [sp, #300]	; 0x12c
    part_draw_dsc.class_p = MY_CLASS;
 801d428:	4b5b      	ldr	r3, [pc, #364]	; (801d598 <lv_chart_event+0xc10>)
 801d42a:	933f      	str	r3, [sp, #252]	; 0xfc
    part_draw_dsc.type = LV_CHART_DRAW_PART_BAR;
 801d42c:	2304      	movs	r3, #4
 801d42e:	9340      	str	r3, [sp, #256]	; 0x100
    for(i = 0; i < chart->point_cnt; i++) {
 801d430:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801d434:	2b00      	cmp	r3, #0
 801d436:	f000 80aa 	beq.w	801d58e <lv_chart_event+0xc06>
 801d43a:	2200      	movs	r2, #0
 801d43c:	9208      	str	r2, [sp, #32]
            col_a.x2 = col_a.x1 + col_w - 1;
 801d43e:	b2ba      	uxth	r2, r7
 801d440:	920e      	str	r2, [sp, #56]	; 0x38
 801d442:	1e57      	subs	r7, r2, #1
 801d444:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d448:	e07f      	b.n	801d54a <lv_chart_event+0xbc2>
                part_draw_dsc.draw_area = &col_a;
 801d44a:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 801d44e:	f8cd a104 	str.w	sl, [sp, #260]	; 0x104
                part_draw_dsc.rect_dsc = &col_dsc;
 801d452:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
 801d456:	f8cd 9108 	str.w	r9, [sp, #264]	; 0x108
                part_draw_dsc.sub_part_ptr = ser;
 801d45a:	944f      	str	r4, [sp, #316]	; 0x13c
                part_draw_dsc.value = ser->y_points[p_act];
 801d45c:	6862      	ldr	r2, [r4, #4]
 801d45e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 801d462:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d464:	aa3e      	add	r2, sp, #248	; 0xf8
 801d466:	211a      	movs	r1, #26
 801d468:	4658      	mov	r0, fp
 801d46a:	f7e6 ffab 	bl	80043c4 <lv_event_send>
                lv_draw_rect(draw_ctx, &col_dsc, &col_a);
 801d46e:	4652      	mov	r2, sl
 801d470:	4649      	mov	r1, r9
 801d472:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d474:	f7f2 fa36 	bl	800f8e4 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d478:	aa3e      	add	r2, sp, #248	; 0xf8
 801d47a:	211b      	movs	r1, #27
 801d47c:	4658      	mov	r0, fp
 801d47e:	f7e6 ffa1 	bl	80043c4 <lv_event_send>
            x_act += col_w + ser_gap;
 801d482:	46a9      	mov	r9, r5
 801d484:	e000      	b.n	801d488 <lv_chart_event+0xb00>
 801d486:	46a9      	mov	r9, r5
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801d488:	4621      	mov	r1, r4
 801d48a:	4640      	mov	r0, r8
 801d48c:	f004 fc24 	bl	8021cd8 <_lv_ll_get_prev>
 801d490:	4604      	mov	r4, r0
 801d492:	2800      	cmp	r0, #0
 801d494:	d051      	beq.n	801d53a <lv_chart_event+0xbb2>
            if(ser->hidden) continue;
 801d496:	7b23      	ldrb	r3, [r4, #12]
 801d498:	f013 0f01 	tst.w	r3, #1
 801d49c:	d1f4      	bne.n	801d488 <lv_chart_event+0xb00>
            lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801d49e:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801d4a2:	f013 0f08 	tst.w	r3, #8
 801d4a6:	bf0c      	ite	eq
 801d4a8:	f9b4 200a 	ldrsheq.w	r2, [r4, #10]
 801d4ac:	2200      	movne	r2, #0
            col_a.x1 = x_act;
 801d4ae:	f8ad 9088 	strh.w	r9, [sp, #136]	; 0x88
            col_a.x2 = col_a.x1 + col_w - 1;
 801d4b2:	fa1f f589 	uxth.w	r5, r9
 801d4b6:	19eb      	adds	r3, r5, r7
 801d4b8:	b21b      	sxth	r3, r3
 801d4ba:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
            x_act += col_w + ser_gap;
 801d4be:	4435      	add	r5, r6
 801d4c0:	b22d      	sxth	r5, r5
            if(col_a.x2 < clip_area.x1) continue;
 801d4c2:	f9bd 107c 	ldrsh.w	r1, [sp, #124]	; 0x7c
 801d4c6:	4299      	cmp	r1, r3
 801d4c8:	dcdd      	bgt.n	801d486 <lv_chart_event+0xafe>
            if(col_a.x1 > clip_area.x2) break;
 801d4ca:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	; 0x80
 801d4ce:	454b      	cmp	r3, r9
 801d4d0:	db33      	blt.n	801d53a <lv_chart_event+0xbb2>
            col_dsc.bg_color = ser->color;
 801d4d2:	8923      	ldrh	r3, [r4, #8]
 801d4d4:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 801d4d8:	9b03      	ldr	r3, [sp, #12]
 801d4da:	18d3      	adds	r3, r2, r3
 801d4dc:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
 801d4e0:	fb93 f1f2 	sdiv	r1, r3, r2
 801d4e4:	fb02 3311 	mls	r3, r2, r1, r3
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 801d4e8:	b21b      	sxth	r3, r3
 801d4ea:	6860      	ldr	r0, [r4, #4]
 801d4ec:	7b22      	ldrb	r2, [r4, #12]
 801d4ee:	f3c2 1200 	ubfx	r2, r2, #4, #1
 801d4f2:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801d4f6:	f9b2 e06c 	ldrsh.w	lr, [r2, #108]	; 0x6c
 801d4fa:	f930 c013 	ldrsh.w	ip, [r0, r3, lsl #1]
 801d4fe:	ebac 0c0e 	sub.w	ip, ip, lr
 801d502:	9905      	ldr	r1, [sp, #20]
 801d504:	fb01 fc0c 	mul.w	ip, r1, ip
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 801d508:	f8bb 1016 	ldrh.w	r1, [fp, #22]
 801d50c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d510:	4449      	add	r1, r9
 801d512:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801d516:	4449      	add	r1, r9
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 801d518:	f9b2 2070 	ldrsh.w	r2, [r2, #112]	; 0x70
 801d51c:	eba2 020e 	sub.w	r2, r2, lr
 801d520:	fb9c f2f2 	sdiv	r2, ip, r2
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 801d524:	1a8a      	subs	r2, r1, r2
 801d526:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d52a:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 801d52e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d532:	4291      	cmp	r1, r2
 801d534:	d189      	bne.n	801d44a <lv_chart_event+0xac2>
            x_act += col_w + ser_gap;
 801d536:	46a9      	mov	r9, r5
 801d538:	e7a6      	b.n	801d488 <lv_chart_event+0xb00>
    for(i = 0; i < chart->point_cnt; i++) {
 801d53a:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801d53e:	9a08      	ldr	r2, [sp, #32]
 801d540:	3201      	adds	r2, #1
 801d542:	9208      	str	r2, [sp, #32]
 801d544:	b292      	uxth	r2, r2
 801d546:	4293      	cmp	r3, r2
 801d548:	d91f      	bls.n	801d58a <lv_chart_event+0xc02>
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 801d54a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801d54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d552:	eba2 0901 	sub.w	r9, r2, r1
 801d556:	fb0a f909 	mul.w	r9, sl, r9
 801d55a:	3b01      	subs	r3, #1
 801d55c:	fb99 f9f3 	sdiv	r9, r9, r3
 801d560:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801d564:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d566:	4413      	add	r3, r2
 801d568:	4499      	add	r9, r3
 801d56a:	fa0f f989 	sxth.w	r9, r9
        part_draw_dsc.id = i;
 801d56e:	f8cd a130 	str.w	sl, [sp, #304]	; 0x130
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801d572:	4640      	mov	r0, r8
 801d574:	f004 fba8 	bl	8021cc8 <_lv_ll_get_tail>
 801d578:	4604      	mov	r4, r0
 801d57a:	2800      	cmp	r0, #0
 801d57c:	d0dd      	beq.n	801d53a <lv_chart_event+0xbb2>
            x_act += col_w + ser_gap;
 801d57e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d582:	189e      	adds	r6, r3, r2
 801d584:	f8cd a00c 	str.w	sl, [sp, #12]
 801d588:	e785      	b.n	801d496 <lv_chart_event+0xb0e>
 801d58a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    draw_ctx->clip_area = clip_area_ori;
 801d58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d590:	f8ca 3008 	str.w	r3, [sl, #8]
 801d594:	f7ff ba53 	b.w	801ca3e <lv_chart_event+0xb6>
 801d598:	0802d7dc 	.word	0x0802d7dc
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 801d59c:	f8da 2008 	ldr.w	r2, [sl, #8]
 801d5a0:	9907      	ldr	r1, [sp, #28]
 801d5a2:	a81c      	add	r0, sp, #112	; 0x70
 801d5a4:	f003 fdad 	bl	8021102 <_lv_area_intersect>
 801d5a8:	2800      	cmp	r0, #0
 801d5aa:	f43f aa48 	beq.w	801ca3e <lv_chart_event+0xb6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801d5ae:	f8da 3008 	ldr.w	r3, [sl, #8]
 801d5b2:	930f      	str	r3, [sp, #60]	; 0x3c
    draw_ctx->clip_area = &clip_area;
 801d5b4:	ab1c      	add	r3, sp, #112	; 0x70
 801d5b6:	f8ca 3008 	str.w	r3, [sl, #8]
 801d5ba:	2232      	movs	r2, #50	; 0x32
 801d5bc:	2100      	movs	r1, #0
 801d5be:	4658      	mov	r0, fp
 801d5c0:	f7ed fc74 	bl	800aeac <lv_obj_get_style_prop>
 801d5c4:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801d5c6:	2212      	movs	r2, #18
 801d5c8:	2100      	movs	r1, #0
 801d5ca:	4658      	mov	r0, fp
 801d5cc:	f7ed fc6e 	bl	800aeac <lv_obj_get_style_prop>
 801d5d0:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801d5d2:	2210      	movs	r2, #16
 801d5d4:	2100      	movs	r1, #0
 801d5d6:	4658      	mov	r0, fp
 801d5d8:	f7ed fc68 	bl	800aeac <lv_obj_get_style_prop>
 801d5dc:	4605      	mov	r5, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 801d5de:	4658      	mov	r0, fp
 801d5e0:	f7ea fdf1 	bl	80081c6 <lv_obj_get_content_width>
 801d5e4:	f8bb 3084 	ldrh.w	r3, [fp, #132]	; 0x84
 801d5e8:	fb00 f303 	mul.w	r3, r0, r3
 801d5ec:	f343 230f 	sbfx	r3, r3, #8, #16
 801d5f0:	9305      	str	r3, [sp, #20]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 801d5f2:	4658      	mov	r0, fp
 801d5f4:	f7ea fe04 	bl	8008200 <lv_obj_get_content_height>
 801d5f8:	f8bb 3086 	ldrh.w	r3, [fp, #134]	; 0x86
 801d5fc:	fb00 f303 	mul.w	r3, r0, r3
 801d600:	ea4f 2923 	mov.w	r9, r3, asr #8
 801d604:	f343 230f 	sbfx	r3, r3, #8, #16
 801d608:	9306      	str	r3, [sp, #24]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 801d60a:	b2a4      	uxth	r4, r4
 801d60c:	4426      	add	r6, r4
 801d60e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 801d612:	441e      	add	r6, r3
 801d614:	b2b6      	uxth	r6, r6
 801d616:	4658      	mov	r0, fp
 801d618:	f7ec fa2c 	bl	8009a74 <lv_obj_get_scroll_left>
 801d61c:	1a36      	subs	r6, r6, r0
 801d61e:	b2b3      	uxth	r3, r6
 801d620:	9308      	str	r3, [sp, #32]
 801d622:	b233      	sxth	r3, r6
 801d624:	930e      	str	r3, [sp, #56]	; 0x38
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 801d626:	442c      	add	r4, r5
 801d628:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 801d62c:	441c      	add	r4, r3
 801d62e:	b2a4      	uxth	r4, r4
 801d630:	4658      	mov	r0, fp
 801d632:	f7ec f9ad 	bl	8009990 <lv_obj_get_scroll_top>
 801d636:	1a24      	subs	r4, r4, r0
 801d638:	b2a4      	uxth	r4, r4
    lv_draw_line_dsc_init(&line_dsc_default);
 801d63a:	a822      	add	r0, sp, #136	; 0x88
 801d63c:	f7f0 fea3 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 801d640:	aa22      	add	r2, sp, #136	; 0x88
 801d642:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801d646:	4658      	mov	r0, fp
 801d648:	f7ea fa8e 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 801d64c:	a830      	add	r0, sp, #192	; 0xc0
 801d64e:	f7f2 f8ed 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 801d652:	aa30      	add	r2, sp, #192	; 0xc0
 801d654:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801d658:	4658      	mov	r0, fp
 801d65a:	f7ea f861 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801d65e:	2201      	movs	r2, #1
 801d660:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801d664:	4658      	mov	r0, fp
 801d666:	f7ed fc21 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d66a:	b202      	sxth	r2, r0
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801d66c:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801d670:	4413      	add	r3, r2
 801d672:	105d      	asrs	r5, r3, #1
 801d674:	950a      	str	r5, [sp, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801d676:	2204      	movs	r2, #4
 801d678:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801d67c:	4658      	mov	r0, fp
 801d67e:	f7ed fc15 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801d682:	b202      	sxth	r2, r0
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801d684:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801d688:	4413      	add	r3, r2
 801d68a:	1058      	asrs	r0, r3, #1
 801d68c:	900b      	str	r0, [sp, #44]	; 0x2c
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 801d68e:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 801d692:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 801d696:	462a      	mov	r2, r5
 801d698:	4285      	cmp	r5, r0
 801d69a:	bfa8      	it	ge
 801d69c:	4602      	movge	r2, r0
 801d69e:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 801d6a2:	dd05      	ble.n	801d6b0 <lv_chart_event+0xd28>
 801d6a4:	f89d 2091 	ldrb.w	r2, [sp, #145]	; 0x91
 801d6a8:	f042 0210 	orr.w	r2, r2, #16
 801d6ac:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801d6b0:	2b01      	cmp	r3, #1
 801d6b2:	d00e      	beq.n	801d6d2 <lv_chart_event+0xd4a>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801d6b4:	4640      	mov	r0, r8
 801d6b6:	f004 fb07 	bl	8021cc8 <_lv_ll_get_tail>
 801d6ba:	4607      	mov	r7, r0
 801d6bc:	2800      	cmp	r0, #0
 801d6be:	f000 815e 	beq.w	801d97e <lv_chart_event+0xff6>
                p2.y += y_ofs;
 801d6c2:	eb04 0309 	add.w	r3, r4, r9
 801d6c6:	9309      	str	r3, [sp, #36]	; 0x24
 801d6c8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801d6cc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801d6d0:	e0de      	b.n	801d890 <lv_chart_event+0xf08>
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 801d6d2:	f89d 3091 	ldrb.w	r3, [sp, #145]	; 0x91
 801d6d6:	f043 0310 	orr.w	r3, r3, #16
 801d6da:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 801d6de:	e7e9      	b.n	801d6b4 <lv_chart_event+0xd2c>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801d6e0:	7b3b      	ldrb	r3, [r7, #12]
 801d6e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d6e6:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d6ea:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 801d6ee:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 801d6f2:	683b      	ldr	r3, [r7, #0]
 801d6f4:	f933 0019 	ldrsh.w	r0, [r3, r9, lsl #1]
 801d6f8:	9b05      	ldr	r3, [sp, #20]
 801d6fa:	9300      	str	r3, [sp, #0]
 801d6fc:	2300      	movs	r3, #0
 801d6fe:	f004 fbe5 	bl	8021ecc <lv_map>
            p2.x += x_ofs;
 801d702:	9b08      	ldr	r3, [sp, #32]
 801d704:	4403      	add	r3, r0
 801d706:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 801d70a:	7b3b      	ldrb	r3, [r7, #12]
 801d70c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801d710:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d714:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 801d718:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	f933 0019 	ldrsh.w	r0, [r3, r9, lsl #1]
 801d722:	9b06      	ldr	r3, [sp, #24]
 801d724:	9300      	str	r3, [sp, #0]
 801d726:	2300      	movs	r3, #0
 801d728:	f004 fbd0 	bl	8021ecc <lv_map>
            p2.y += y_ofs;
 801d72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d72e:	1a1b      	subs	r3, r3, r0
 801d730:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 801d734:	e0d0      	b.n	801d8d8 <lv_chart_event+0xf50>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d736:	aa3e      	add	r2, sp, #248	; 0xf8
 801d738:	211b      	movs	r1, #27
 801d73a:	4658      	mov	r0, fp
 801d73c:	f7e6 fe42 	bl	80043c4 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 801d740:	3401      	adds	r4, #1
 801d742:	b2a4      	uxth	r4, r4
 801d744:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801d748:	42a3      	cmp	r3, r4
 801d74a:	f240 8099 	bls.w	801d880 <lv_chart_event+0xef8>
            p1.x = p2.x;
 801d74e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 801d752:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p1.y = p2.y;
 801d756:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 801d75a:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
            p_act = (start_point + i) % chart->point_cnt;
 801d75e:	9404      	str	r4, [sp, #16]
 801d760:	9503      	str	r5, [sp, #12]
 801d762:	eb09 0504 	add.w	r5, r9, r4
 801d766:	fb95 f2f3 	sdiv	r2, r5, r3
 801d76a:	fb03 5512 	mls	r5, r3, r2, r5
 801d76e:	b22d      	sxth	r5, r5
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d770:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 801d77a:	42b0      	cmp	r0, r6
 801d77c:	d0e0      	beq.n	801d740 <lv_chart_event+0xdb8>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 801d77e:	7b3b      	ldrb	r3, [r7, #12]
 801d780:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801d784:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d788:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	; 0x70
 801d78c:	f9b3 106c 	ldrsh.w	r1, [r3, #108]	; 0x6c
 801d790:	f8dd c018 	ldr.w	ip, [sp, #24]
 801d794:	f8cd c000 	str.w	ip, [sp]
 801d798:	4643      	mov	r3, r8
 801d79a:	f004 fb97 	bl	8021ecc <lv_map>
                p2.y += y_ofs;
 801d79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7a0:	1a1b      	subs	r3, r3, r0
 801d7a2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 801d7a6:	7b3b      	ldrb	r3, [r7, #12]
 801d7a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d7ac:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801d7b0:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 801d7b4:	f9b3 1074 	ldrsh.w	r1, [r3, #116]	; 0x74
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 801d7be:	f8dd c014 	ldr.w	ip, [sp, #20]
 801d7c2:	f8cd c000 	str.w	ip, [sp]
 801d7c6:	4643      	mov	r3, r8
 801d7c8:	f004 fb80 	bl	8021ecc <lv_map>
                p2.x += x_ofs;
 801d7cc:	9b08      	ldr	r3, [sp, #32]
 801d7ce:	4403      	add	r3, r0
 801d7d0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            if(i != 0) {
 801d7d4:	2c00      	cmp	r4, #0
 801d7d6:	d0b3      	beq.n	801d740 <lv_chart_event+0xdb8>
                point_area.x1 = p1.x - point_w;
 801d7d8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801d7dc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d7e0:	1a99      	subs	r1, r3, r2
 801d7e2:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
                point_area.x2 = p1.x + point_w;
 801d7e6:	4413      	add	r3, r2
 801d7e8:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p1.y - point_h;
 801d7ec:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801d7f0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d7f4:	1a99      	subs	r1, r3, r2
 801d7f6:	f8ad 107e 	strh.w	r1, [sp, #126]	; 0x7e
                point_area.y2 = p1.y + point_h;
 801d7fa:	4413      	add	r3, r2
 801d7fc:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 801d800:	9b04      	ldr	r3, [sp, #16]
 801d802:	3b01      	subs	r3, #1
 801d804:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	9a03      	ldr	r2, [sp, #12]
 801d80a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801d80e:	42b3      	cmp	r3, r6
 801d810:	bf0c      	ite	eq
 801d812:	4643      	moveq	r3, r8
 801d814:	ab18      	addne	r3, sp, #96	; 0x60
 801d816:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	f933 300a 	ldrsh.w	r3, [r3, sl]
 801d81e:	42b3      	cmp	r3, r6
 801d820:	bf0c      	ite	eq
 801d822:	4643      	moveq	r3, r8
 801d824:	ab1a      	addne	r3, sp, #104	; 0x68
 801d826:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.draw_area = &point_area;
 801d828:	ab1f      	add	r3, sp, #124	; 0x7c
 801d82a:	9341      	str	r3, [sp, #260]	; 0x104
                part_draw_dsc.value = ser->y_points[p_prev];
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	9a03      	ldr	r2, [sp, #12]
 801d830:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801d834:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d836:	aa3e      	add	r2, sp, #248	; 0xf8
 801d838:	211a      	movs	r1, #26
 801d83a:	4658      	mov	r0, fp
 801d83c:	f7e6 fdc2 	bl	80043c4 <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	9a03      	ldr	r2, [sp, #12]
 801d844:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 801d848:	42b2      	cmp	r2, r6
 801d84a:	f43f af74 	beq.w	801d736 <lv_chart_event+0xdae>
 801d84e:	f933 300a 	ldrsh.w	r3, [r3, sl]
 801d852:	42b3      	cmp	r3, r6
 801d854:	f43f af6f 	beq.w	801d736 <lv_chart_event+0xdae>
                    lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 801d858:	ab1a      	add	r3, sp, #104	; 0x68
 801d85a:	aa18      	add	r2, sp, #96	; 0x60
 801d85c:	a922      	add	r1, sp, #136	; 0x88
 801d85e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d860:	f7f0 fda8 	bl	800e3b4 <lv_draw_line>
                    if(point_w && point_h) {
 801d864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d866:	2b00      	cmp	r3, #0
 801d868:	f43f af65 	beq.w	801d736 <lv_chart_event+0xdae>
 801d86c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d86e:	2b00      	cmp	r3, #0
 801d870:	f43f af61 	beq.w	801d736 <lv_chart_event+0xdae>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801d874:	aa1f      	add	r2, sp, #124	; 0x7c
 801d876:	a930      	add	r1, sp, #192	; 0xc0
 801d878:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d87a:	f7f2 f833 	bl	800f8e4 <lv_draw_rect>
 801d87e:	e75a      	b.n	801d736 <lv_chart_event+0xdae>
        if(i == chart->point_cnt) {
 801d880:	d043      	beq.n	801d90a <lv_chart_event+0xf82>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 801d882:	4639      	mov	r1, r7
 801d884:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d886:	f004 fa27 	bl	8021cd8 <_lv_ll_get_prev>
 801d88a:	4607      	mov	r7, r0
 801d88c:	2800      	cmp	r0, #0
 801d88e:	d074      	beq.n	801d97a <lv_chart_event+0xff2>
        if(ser->hidden) continue;
 801d890:	7b3b      	ldrb	r3, [r7, #12]
 801d892:	f013 0f01 	tst.w	r3, #1
 801d896:	d1f4      	bne.n	801d882 <lv_chart_event+0xefa>
        line_dsc_default.color = ser->color;
 801d898:	893b      	ldrh	r3, [r7, #8]
 801d89a:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
        point_dsc_default.bg_color = ser->color;
 801d89e:	893b      	ldrh	r3, [r7, #8]
 801d8a0:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        lv_coord_t start_point = chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 801d8a4:	f89b 3088 	ldrb.w	r3, [fp, #136]	; 0x88
 801d8a8:	f013 0f08 	tst.w	r3, #8
 801d8ac:	bf0c      	ite	eq
 801d8ae:	f9b7 900a 	ldrsheq.w	r9, [r7, #10]
 801d8b2:	f04f 0900 	movne.w	r9, #0
        p1.x = x_ofs;
 801d8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d8b8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        p2.x = x_ofs;
 801d8bc:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
 801d8c6:	2b0a      	cmp	r3, #10
 801d8c8:	f47f af0a 	bne.w	801d6e0 <lv_chart_event+0xd58>
            p2.x = LV_COORD_MIN;
 801d8cc:	f24e 0301 	movw	r3, #57345	; 0xe001
 801d8d0:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            p2.y = LV_COORD_MIN;
 801d8d4:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801d8d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d8da:	a83e      	add	r0, sp, #248	; 0xf8
 801d8dc:	f7ea fa5b 	bl	8007d96 <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_ITEMS;
 801d8e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 801d8e4:	934b      	str	r3, [sp, #300]	; 0x12c
        part_draw_dsc.class_p = MY_CLASS;
 801d8e6:	4ba8      	ldr	r3, [pc, #672]	; (801db88 <lv_chart_event+0x1200>)
 801d8e8:	933f      	str	r3, [sp, #252]	; 0xfc
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 801d8ea:	2303      	movs	r3, #3
 801d8ec:	9340      	str	r3, [sp, #256]	; 0x100
        part_draw_dsc.line_dsc = &line_dsc_default;
 801d8ee:	ab22      	add	r3, sp, #136	; 0x88
 801d8f0:	9344      	str	r3, [sp, #272]	; 0x110
        part_draw_dsc.rect_dsc = &point_dsc_default;
 801d8f2:	ab30      	add	r3, sp, #192	; 0xc0
 801d8f4:	9342      	str	r3, [sp, #264]	; 0x108
        part_draw_dsc.sub_part_ptr = ser;
 801d8f6:	974f      	str	r7, [sp, #316]	; 0x13c
        for(i = 0; i < chart->point_cnt; i++) {
 801d8f8:	f8bb 3082 	ldrh.w	r3, [fp, #130]	; 0x82
 801d8fc:	b13b      	cbz	r3, 801d90e <lv_chart_event+0xf86>
        lv_coord_t p_act = start_point;
 801d8fe:	464d      	mov	r5, r9
        for(i = 0; i < chart->point_cnt; i++) {
 801d900:	2400      	movs	r4, #0
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d902:	f647 76ff 	movw	r6, #32767	; 0x7fff
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 801d906:	46a0      	mov	r8, r4
 801d908:	e721      	b.n	801d74e <lv_chart_event+0xdc6>
            p_act = (start_point + i) % chart->point_cnt;
 801d90a:	46a9      	mov	r9, r5
        for(i = 0; i < chart->point_cnt; i++) {
 801d90c:	4623      	mov	r3, r4
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801d90e:	687a      	ldr	r2, [r7, #4]
 801d910:	f932 1019 	ldrsh.w	r1, [r2, r9, lsl #1]
 801d914:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801d918:	4291      	cmp	r1, r2
 801d91a:	d0b2      	beq.n	801d882 <lv_chart_event+0xefa>
                point_area.x1 = p2.x - point_w;
 801d91c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 801d920:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801d924:	1a50      	subs	r0, r2, r1
 801d926:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
                point_area.x2 = p2.x + point_w;
 801d92a:	440a      	add	r2, r1
 801d92c:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 801d930:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 801d934:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801d938:	1a50      	subs	r0, r2, r1
 801d93a:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
                point_area.y2 = p2.y + point_h;
 801d93e:	440a      	add	r2, r1
 801d940:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 801d944:	3b01      	subs	r3, #1
 801d946:	934c      	str	r3, [sp, #304]	; 0x130
                part_draw_dsc.p1 = NULL;
 801d948:	2300      	movs	r3, #0
 801d94a:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = NULL;
 801d94c:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.draw_area = &point_area;
 801d94e:	ac1f      	add	r4, sp, #124	; 0x7c
 801d950:	9441      	str	r4, [sp, #260]	; 0x104
                part_draw_dsc.value = ser->y_points[p_act];
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
 801d958:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801d95a:	aa3e      	add	r2, sp, #248	; 0xf8
 801d95c:	211a      	movs	r1, #26
 801d95e:	4658      	mov	r0, fp
 801d960:	f7e6 fd30 	bl	80043c4 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801d964:	4622      	mov	r2, r4
 801d966:	a930      	add	r1, sp, #192	; 0xc0
 801d968:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d96a:	f7f1 ffbb 	bl	800f8e4 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801d96e:	aa3e      	add	r2, sp, #248	; 0xf8
 801d970:	211b      	movs	r1, #27
 801d972:	4658      	mov	r0, fp
 801d974:	f7e6 fd26 	bl	80043c4 <lv_event_send>
 801d978:	e783      	b.n	801d882 <lv_chart_event+0xefa>
 801d97a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    draw_ctx->clip_area = clip_area_ori;
 801d97e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d980:	f8ca 3008 	str.w	r3, [sl, #8]
 801d984:	f7ff b85b 	b.w	801ca3e <lv_chart_event+0xb6>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 801d988:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d98c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d990:	429a      	cmp	r2, r3
 801d992:	d07f      	beq.n	801da94 <lv_chart_event+0x110c>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 801d994:	ab1a      	add	r3, sp, #104	; 0x68
 801d996:	b292      	uxth	r2, r2
 801d998:	68a1      	ldr	r1, [r4, #8]
 801d99a:	4658      	mov	r0, fp
 801d99c:	f7fe fbc0 	bl	801c120 <lv_chart_get_point_pos_by_id>
            cx = p.x;
 801d9a0:	f9bd 6068 	ldrsh.w	r6, [sp, #104]	; 0x68
            cy = p.y;
 801d9a4:	f9bd 506a 	ldrsh.w	r5, [sp, #106]	; 0x6a
 801d9a8:	e098      	b.n	801dadc <lv_chart_event+0x1154>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 801d9aa:	aa1a      	add	r2, sp, #104	; 0x68
 801d9ac:	a930      	add	r1, sp, #192	; 0xc0
 801d9ae:	4650      	mov	r0, sl
 801d9b0:	f7f1 ff98 	bl	800f8e4 <lv_draw_rect>
 801d9b4:	e040      	b.n	801da38 <lv_chart_event+0x10b0>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 801d9b6:	aa1a      	add	r2, sp, #104	; 0x68
 801d9b8:	a930      	add	r1, sp, #192	; 0xc0
 801d9ba:	4650      	mov	r0, sl
 801d9bc:	f7f1 ff92 	bl	800f8e4 <lv_draw_rect>
 801d9c0:	e063      	b.n	801da8a <lv_chart_event+0x1102>
    draw_ctx->clip_area = clip_area_ori;
 801d9c2:	9b06      	ldr	r3, [sp, #24]
 801d9c4:	f8ca 3008 	str.w	r3, [sl, #8]
 801d9c8:	f7fe bfe7 	b.w	801c99a <lv_chart_event+0x12>
            point_area.x1 = cx - point_w;
 801d9cc:	fa1f f089 	uxth.w	r0, r9
 801d9d0:	1a0f      	subs	r7, r1, r0
 801d9d2:	f8ad 7068 	strh.w	r7, [sp, #104]	; 0x68
            point_area.x2 = cx + point_w;
 801d9d6:	4401      	add	r1, r0
 801d9d8:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
            point_area.y1 = cy - point_h;
 801d9dc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d9e0:	1a50      	subs	r0, r2, r1
 801d9e2:	f8ad 006a 	strh.w	r0, [sp, #106]	; 0x6a
            point_area.y2 = cy + point_h;
 801d9e6:	440a      	add	r2, r1
 801d9e8:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
            part_draw_dsc.draw_area = &point_area;
 801d9ec:	aa1a      	add	r2, sp, #104	; 0x68
 801d9ee:	9241      	str	r2, [sp, #260]	; 0x104
        bool draw_point = point_w && point_h;
 801d9f0:	9f05      	ldr	r7, [sp, #20]
        if(cursor->dir & LV_DIR_HOR) {
 801d9f2:	7b22      	ldrb	r2, [r4, #12]
 801d9f4:	f012 0f03 	tst.w	r2, #3
 801d9f8:	d023      	beq.n	801da42 <lv_chart_event+0x10ba>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 801d9fa:	f012 0f01 	tst.w	r2, #1
 801d9fe:	bf08      	it	eq
 801da00:	4633      	moveq	r3, r6
 801da02:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            p1.y = cy;
 801da06:	f8ad 505a 	strh.w	r5, [sp, #90]	; 0x5a
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 801da0a:	f012 0f02 	tst.w	r2, #2
 801da0e:	bf14      	ite	ne
 801da10:	f9bb 3018 	ldrshne.w	r3, [fp, #24]
 801da14:	4633      	moveq	r3, r6
 801da16:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p2.y = p1.y;
 801da1a:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801da1e:	aa3e      	add	r2, sp, #248	; 0xf8
 801da20:	211a      	movs	r1, #26
 801da22:	4658      	mov	r0, fp
 801da24:	f7e6 fcce 	bl	80043c4 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 801da28:	ab17      	add	r3, sp, #92	; 0x5c
 801da2a:	aa16      	add	r2, sp, #88	; 0x58
 801da2c:	a91f      	add	r1, sp, #124	; 0x7c
 801da2e:	4650      	mov	r0, sl
 801da30:	f7f0 fcc0 	bl	800e3b4 <lv_draw_line>
            if(draw_point) {
 801da34:	2f00      	cmp	r7, #0
 801da36:	d1b8      	bne.n	801d9aa <lv_chart_event+0x1022>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801da38:	aa3e      	add	r2, sp, #248	; 0xf8
 801da3a:	211b      	movs	r1, #27
 801da3c:	4658      	mov	r0, fp
 801da3e:	f7e6 fcc1 	bl	80043c4 <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 801da42:	7b23      	ldrb	r3, [r4, #12]
 801da44:	f013 0f0c 	tst.w	r3, #12
 801da48:	d024      	beq.n	801da94 <lv_chart_event+0x110c>
            p1.x = cx;
 801da4a:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 801da4e:	f013 0f04 	tst.w	r3, #4
 801da52:	bf14      	ite	ne
 801da54:	f9bb 2016 	ldrshne.w	r2, [fp, #22]
 801da58:	462a      	moveq	r2, r5
 801da5a:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
            p2.x = p1.x;
 801da5e:	f8ad 605c 	strh.w	r6, [sp, #92]	; 0x5c
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 801da62:	f013 0f08 	tst.w	r3, #8
 801da66:	bf18      	it	ne
 801da68:	f9bb 501a 	ldrshne.w	r5, [fp, #26]
 801da6c:	f8ad 505e 	strh.w	r5, [sp, #94]	; 0x5e
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801da70:	aa3e      	add	r2, sp, #248	; 0xf8
 801da72:	211a      	movs	r1, #26
 801da74:	4658      	mov	r0, fp
 801da76:	f7e6 fca5 	bl	80043c4 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 801da7a:	ab17      	add	r3, sp, #92	; 0x5c
 801da7c:	aa16      	add	r2, sp, #88	; 0x58
 801da7e:	a91f      	add	r1, sp, #124	; 0x7c
 801da80:	4650      	mov	r0, sl
 801da82:	f7f0 fc97 	bl	800e3b4 <lv_draw_line>
            if(draw_point) {
 801da86:	2f00      	cmp	r7, #0
 801da88:	d195      	bne.n	801d9b6 <lv_chart_event+0x102e>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801da8a:	aa3e      	add	r2, sp, #248	; 0xf8
 801da8c:	211b      	movs	r1, #27
 801da8e:	4658      	mov	r0, fp
 801da90:	f7e6 fc98 	bl	80043c4 <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 801da94:	4621      	mov	r1, r4
 801da96:	4640      	mov	r0, r8
 801da98:	f004 f91e 	bl	8021cd8 <_lv_ll_get_prev>
 801da9c:	4604      	mov	r4, r0
 801da9e:	2800      	cmp	r0, #0
 801daa0:	d08f      	beq.n	801d9c2 <lv_chart_event+0x103a>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 801daa2:	220a      	movs	r2, #10
 801daa4:	a91c      	add	r1, sp, #112	; 0x70
 801daa6:	a81f      	add	r0, sp, #124	; 0x7c
 801daa8:	f004 fb2a 	bl	8022100 <lv_memcpy>
        lv_memcpy(&point_dsc_tmp, &point_dsc_ori, sizeof(lv_draw_rect_dsc_t));
 801daac:	2238      	movs	r2, #56	; 0x38
 801daae:	a922      	add	r1, sp, #136	; 0x88
 801dab0:	a830      	add	r0, sp, #192	; 0xc0
 801dab2:	f004 fb25 	bl	8022100 <lv_memcpy>
        line_dsc_tmp.color = cursor->color;
 801dab6:	88e3      	ldrh	r3, [r4, #6]
 801dab8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
        point_dsc_tmp.bg_color = cursor->color;
 801dabc:	88e3      	ldrh	r3, [r4, #6]
 801dabe:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
        part_draw_dsc.p1 = &p1;
 801dac2:	ab16      	add	r3, sp, #88	; 0x58
 801dac4:	9347      	str	r3, [sp, #284]	; 0x11c
        part_draw_dsc.p2 = &p2;
 801dac6:	ab17      	add	r3, sp, #92	; 0x5c
 801dac8:	9348      	str	r3, [sp, #288]	; 0x120
        if(cursor->pos_set) {
 801daca:	7b63      	ldrb	r3, [r4, #13]
 801dacc:	f013 0f01 	tst.w	r3, #1
 801dad0:	f43f af5a 	beq.w	801d988 <lv_chart_event+0x1000>
            cx = cursor->pos.x;
 801dad4:	f9b4 6000 	ldrsh.w	r6, [r4]
            cy = cursor->pos.y;
 801dad8:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
        cx += obj->coords.x1;
 801dadc:	f9bb 3014 	ldrsh.w	r3, [fp, #20]
 801dae0:	441e      	add	r6, r3
 801dae2:	b2b1      	uxth	r1, r6
 801dae4:	b236      	sxth	r6, r6
        cy += obj->coords.y1;
 801dae6:	f8bb 2016 	ldrh.w	r2, [fp, #22]
 801daea:	4415      	add	r5, r2
 801daec:	b2aa      	uxth	r2, r5
 801daee:	b22d      	sxth	r5, r5
        bool draw_point = point_w && point_h;
 801daf0:	f1b9 0f00 	cmp.w	r9, #0
 801daf4:	d003      	beq.n	801dafe <lv_chart_event+0x1176>
 801daf6:	9803      	ldr	r0, [sp, #12]
 801daf8:	2800      	cmp	r0, #0
 801dafa:	f47f af67 	bne.w	801d9cc <lv_chart_event+0x1044>
            part_draw_dsc.draw_area = NULL;
 801dafe:	2200      	movs	r2, #0
 801db00:	9241      	str	r2, [sp, #260]	; 0x104
        bool draw_point = point_w && point_h;
 801db02:	9f04      	ldr	r7, [sp, #16]
 801db04:	e775      	b.n	801d9f2 <lv_chart_event+0x106a>
        if(!crowded_mode && i == chart->point_cnt) {
 801db06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db08:	4553      	cmp	r3, sl
 801db0a:	f6bf ab91 	bge.w	801d230 <lv_chart_event+0x8a8>
        lv_coord_t p_act = start_point;
 801db0e:	9b05      	ldr	r3, [sp, #20]
 801db10:	9304      	str	r3, [sp, #16]
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 801db12:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801db16:	9d04      	ldr	r5, [sp, #16]
 801db18:	f933 1015 	ldrsh.w	r1, [r3, r5, lsl #1]
 801db1c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801db20:	4299      	cmp	r1, r3
 801db22:	f43f ab85 	beq.w	801d230 <lv_chart_event+0x8a8>
                point_area.x1 = p2.x - point_w;
 801db26:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801db2a:	b2b9      	uxth	r1, r7
 801db2c:	1a58      	subs	r0, r3, r1
 801db2e:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
                point_area.x2 = p2.x + point_w;
 801db32:	440b      	add	r3, r1
 801db34:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
                point_area.y1 = p2.y - point_h;
 801db38:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 801db3c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801db40:	1a58      	subs	r0, r3, r1
 801db42:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
                point_area.y2 = p2.y + point_h;
 801db46:	440b      	add	r3, r1
 801db48:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
                part_draw_dsc.id = i - 1;
 801db4c:	3a01      	subs	r2, #1
 801db4e:	924c      	str	r2, [sp, #304]	; 0x130
                part_draw_dsc.p1 = NULL;
 801db50:	2300      	movs	r3, #0
 801db52:	9347      	str	r3, [sp, #284]	; 0x11c
                part_draw_dsc.p2 = NULL;
 801db54:	9348      	str	r3, [sp, #288]	; 0x120
                part_draw_dsc.draw_area = &point_area;
 801db56:	ac1f      	add	r4, sp, #124	; 0x7c
 801db58:	9441      	str	r4, [sp, #260]	; 0x104
                part_draw_dsc.value = ser->y_points[p_act];
 801db5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801db5e:	f933 3015 	ldrsh.w	r3, [r3, r5, lsl #1]
 801db62:	934e      	str	r3, [sp, #312]	; 0x138
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801db64:	aa3e      	add	r2, sp, #248	; 0xf8
 801db66:	211a      	movs	r1, #26
 801db68:	4658      	mov	r0, fp
 801db6a:	f7e6 fc2b 	bl	80043c4 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 801db6e:	4622      	mov	r2, r4
 801db70:	a930      	add	r1, sp, #192	; 0xc0
 801db72:	980d      	ldr	r0, [sp, #52]	; 0x34
 801db74:	f7f1 feb6 	bl	800f8e4 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801db78:	aa3e      	add	r2, sp, #248	; 0xf8
 801db7a:	211b      	movs	r1, #27
 801db7c:	4658      	mov	r0, fp
 801db7e:	f7e6 fc21 	bl	80043c4 <lv_event_send>
 801db82:	f7ff bb55 	b.w	801d230 <lv_chart_event+0x8a8>
 801db86:	bf00      	nop
 801db88:	0802d7dc 	.word	0x0802d7dc

0801db8c <fast_hsv2rgb>:
 * We fold all symmetry by swapping the R, G, B pointers so that the code is the same for all sextants.
 * We replace division by 255 by a division by 256, a.k.a a shift right by 8 bits.
 * This is wrong, but since this is only used to compute the pixels on the screen and not the final color, it's ok.
 */
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t * r, uint8_t * g, uint8_t * b)
{
 801db8c:	b530      	push	{r4, r5, lr}
 801db8e:	9c03      	ldr	r4, [sp, #12]
 801db90:	9d04      	ldr	r5, [sp, #16]
    if(!s) {
 801db92:	b369      	cbz	r1, 801dbf0 <fast_hsv2rgb+0x64>
 801db94:	468c      	mov	ip, r1
        *r = *g = *b = v;
        return;
    }

    uint8_t sextant = h >> 8;
 801db96:	0a01      	lsrs	r1, r0, #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 801db98:	f410 7f00 	tst.w	r0, #512	; 0x200
 801db9c:	d002      	beq.n	801dba4 <fast_hsv2rgb+0x18>
 801db9e:	469e      	mov	lr, r3
 801dba0:	462b      	mov	r3, r5
 801dba2:	4675      	mov	r5, lr
 801dba4:	f011 0f04 	tst.w	r1, #4
 801dba8:	d002      	beq.n	801dbb0 <fast_hsv2rgb+0x24>
 801dbaa:	46a6      	mov	lr, r4
 801dbac:	462c      	mov	r4, r5
 801dbae:	4675      	mov	r5, lr
 801dbb0:	f011 0f06 	tst.w	r1, #6
 801dbb4:	d120      	bne.n	801dbf8 <fast_hsv2rgb+0x6c>
 801dbb6:	f011 0f01 	tst.w	r1, #1
 801dbba:	d023      	beq.n	801dc04 <fast_hsv2rgb+0x78>
 801dbbc:	4621      	mov	r1, r4
 801dbbe:	461c      	mov	r4, r3
 801dbc0:	460b      	mov	r3, r1

    *g = v;
 801dbc2:	701a      	strb	r2, [r3, #0]

    uint8_t bb = ~s;
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801dbc4:	b291      	uxth	r1, r2
    uint8_t bb = ~s;
 801dbc6:	ea6f 030c 	mvn.w	r3, ip
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801dbca:	b2db      	uxtb	r3, r3
    *b = ww >> 8;
 801dbcc:	fb03 f202 	mul.w	r2, r3, r2
 801dbd0:	0a12      	lsrs	r2, r2, #8
 801dbd2:	702a      	strb	r2, [r5, #0]
        /*Up slope*/
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
    }
    else {
        /*Down slope*/
        ww = s * h_frac;
 801dbd4:	b2c0      	uxtb	r0, r0
 801dbd6:	fb00 fc0c 	mul.w	ip, r0, ip
    }
    bb = ww >> 8;
    bb = ~bb;
 801dbda:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
    ww = v * bb;
 801dbde:	fa5f fc8c 	uxtb.w	ip, ip
    *r = ww >> 8;
 801dbe2:	fb0c fc01 	mul.w	ip, ip, r1
 801dbe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dbea:	f884 c000 	strb.w	ip, [r4]
}
 801dbee:	bd30      	pop	{r4, r5, pc}
        *r = *g = *b = v;
 801dbf0:	702a      	strb	r2, [r5, #0]
 801dbf2:	7022      	strb	r2, [r4, #0]
 801dbf4:	701a      	strb	r2, [r3, #0]
        return;
 801dbf6:	e7fa      	b.n	801dbee <fast_hsv2rgb+0x62>
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 801dbf8:	f011 0f01 	tst.w	r1, #1
 801dbfc:	d1e1      	bne.n	801dbc2 <fast_hsv2rgb+0x36>
 801dbfe:	4621      	mov	r1, r4
 801dc00:	461c      	mov	r4, r3
 801dc02:	460b      	mov	r3, r1
    *g = v;
 801dc04:	701a      	strb	r2, [r3, #0]
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801dc06:	b291      	uxth	r1, r2
    uint8_t bb = ~s;
 801dc08:	ea6f 030c 	mvn.w	r3, ip
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 801dc0c:	b2db      	uxtb	r3, r3
    *b = ww >> 8;
 801dc0e:	fb03 f202 	mul.w	r2, r3, r2
 801dc12:	0a12      	lsrs	r2, r2, #8
 801dc14:	702a      	strb	r2, [r5, #0]
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 801dc16:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 801dc1a:	d004      	beq.n	801dc26 <fast_hsv2rgb+0x9a>
 801dc1c:	4240      	negs	r0, r0
 801dc1e:	b2c0      	uxtb	r0, r0
 801dc20:	fb00 fc0c 	mul.w	ip, r0, ip
 801dc24:	e7d9      	b.n	801dbda <fast_hsv2rgb+0x4e>
 801dc26:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 801dc2a:	e7d6      	b.n	801dbda <fast_hsv2rgb+0x4e>

0801dc2c <get_knob_area>:
{
 801dc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc30:	4606      	mov	r6, r0
 801dc32:	460f      	mov	r7, r1
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801dc34:	2250      	movs	r2, #80	; 0x50
 801dc36:	2100      	movs	r1, #0
 801dc38:	4638      	mov	r0, r7
 801dc3a:	f7ed f937 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801dc3e:	b203      	sxth	r3, r0
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 801dc40:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 801dc44:	441c      	add	r4, r3
 801dc46:	f3c4 044f 	ubfx	r4, r4, #1, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801dc4a:	2212      	movs	r2, #18
 801dc4c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801dc50:	4638      	mov	r0, r7
 801dc52:	f7ed f92b 	bl	800aeac <lv_obj_get_style_prop>
 801dc56:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801dc58:	2213      	movs	r2, #19
 801dc5a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801dc5e:	4638      	mov	r0, r7
 801dc60:	f7ed f924 	bl	800aeac <lv_obj_get_style_prop>
 801dc64:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801dc66:	2210      	movs	r2, #16
 801dc68:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801dc6c:	4638      	mov	r0, r7
 801dc6e:	f7ed f91d 	bl	800aeac <lv_obj_get_style_prop>
 801dc72:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801dc74:	2211      	movs	r2, #17
 801dc76:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801dc7a:	4638      	mov	r0, r7
 801dc7c:	f7ed f916 	bl	800aeac <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 801dc80:	8aba      	ldrh	r2, [r7, #20]
 801dc82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dc84:	441a      	add	r2, r3
 801dc86:	b292      	uxth	r2, r2
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801dc88:	8afb      	ldrh	r3, [r7, #22]
 801dc8a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 801dc8c:	440b      	add	r3, r1
 801dc8e:	b29b      	uxth	r3, r3
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 801dc90:	eb04 0109 	add.w	r1, r4, r9
 801dc94:	1a51      	subs	r1, r2, r1
    return knob_area;
 801dc96:	8031      	strh	r1, [r6, #0]
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 801dc98:	4425      	add	r5, r4
 801dc9a:	1b5d      	subs	r5, r3, r5
    return knob_area;
 801dc9c:	8075      	strh	r5, [r6, #2]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 801dc9e:	44a0      	add	r8, r4
 801dca0:	4442      	add	r2, r8
    return knob_area;
 801dca2:	80b2      	strh	r2, [r6, #4]
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 801dca4:	4404      	add	r4, r0
 801dca6:	441c      	add	r4, r3
    return knob_area;
 801dca8:	80f4      	strh	r4, [r6, #6]
}
 801dcaa:	4630      	mov	r0, r6
 801dcac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801dcb0 <refr_knob_pos>:
{
 801dcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcb2:	b083      	sub	sp, #12
 801dcb4:	4604      	mov	r4, r0
    lv_area_t knob_area = get_knob_area(obj);
 801dcb6:	4601      	mov	r1, r0
 801dcb8:	4668      	mov	r0, sp
 801dcba:	f7ff ffb7 	bl	801dc2c <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 801dcbe:	4669      	mov	r1, sp
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	f7ea fc97 	bl	80085f4 <lv_obj_invalidate_area>
    lv_coord_t w = lv_obj_get_width(obj);
 801dcc6:	4620      	mov	r0, r4
 801dcc8:	f7ea fa71 	bl	80081ae <lv_obj_get_width>
 801dccc:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801dcce:	2250      	movs	r2, #80	; 0x50
 801dcd0:	2100      	movs	r1, #0
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	f7ed f8ea 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801dcd8:	b206      	sxth	r6, r0
    lv_coord_t r = (w - scale_w) / 2;
 801dcda:	1bae      	subs	r6, r5, r6
 801dcdc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801dce0:	f346 064f 	sbfx	r6, r6, #1, #16

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 801dce4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801dce8:	f003 0303 	and.w	r3, r3, #3
 801dcec:	2b01      	cmp	r3, #1
 801dcee:	d024      	beq.n	801dd3a <refr_knob_pos+0x8a>
 801dcf0:	2b02      	cmp	r3, #2
 801dcf2:	d02d      	beq.n	801dd50 <refr_knob_pos+0xa0>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 801dcf4:	8ca7      	ldrh	r7, [r4, #36]	; 0x24
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 801dcf6:	b238      	sxth	r0, r7
 801dcf8:	f004 f80c 	bl	8021d14 <lv_trigo_sin>
 801dcfc:	fb06 f000 	mul.w	r0, r6, r0
 801dd00:	13c0      	asrs	r0, r0, #15
 801dd02:	8520      	strh	r0, [r4, #40]	; 0x28
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 801dd04:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801dd08:	b200      	sxth	r0, r0
 801dd0a:	f004 f803 	bl	8021d14 <lv_trigo_sin>
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 801dd0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dd12:	f3c5 054f 	ubfx	r5, r5, #1, #16
 801dd16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801dd18:	442b      	add	r3, r5
 801dd1a:	8523      	strh	r3, [r4, #40]	; 0x28
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 801dd1c:	fb00 f606 	mul.w	r6, r0, r6
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 801dd20:	eb05 35e6 	add.w	r5, r5, r6, asr #15
 801dd24:	8565      	strh	r5, [r4, #42]	; 0x2a
    lv_area_t knob_area = get_knob_area(obj);
 801dd26:	4621      	mov	r1, r4
 801dd28:	4668      	mov	r0, sp
 801dd2a:	f7ff ff7f 	bl	801dc2c <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 801dd2e:	4669      	mov	r1, sp
 801dd30:	4620      	mov	r0, r4
 801dd32:	f7ea fc5f 	bl	80085f4 <lv_obj_invalidate_area>
}
 801dd36:	b003      	add	sp, #12
 801dd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            break;
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 801dd3a:	f894 7026 	ldrb.w	r7, [r4, #38]	; 0x26
 801dd3e:	f44f 70b4 	mov.w	r0, #360	; 0x168
 801dd42:	fb00 f707 	mul.w	r7, r0, r7
 801dd46:	4808      	ldr	r0, [pc, #32]	; (801dd68 <refr_knob_pos+0xb8>)
 801dd48:	fb80 3707 	smull	r3, r7, r0, r7
 801dd4c:	097f      	lsrs	r7, r7, #5
            break;
 801dd4e:	e7d2      	b.n	801dcf6 <refr_knob_pos+0x46>
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 801dd50:	f894 7027 	ldrb.w	r7, [r4, #39]	; 0x27
 801dd54:	f44f 70b4 	mov.w	r0, #360	; 0x168
 801dd58:	fb00 f707 	mul.w	r7, r0, r7
 801dd5c:	4802      	ldr	r0, [pc, #8]	; (801dd68 <refr_knob_pos+0xb8>)
 801dd5e:	fb80 3707 	smull	r3, r7, r0, r7
 801dd62:	097f      	lsrs	r7, r7, #5
            break;
 801dd64:	e7c7      	b.n	801dcf6 <refr_knob_pos+0x46>
 801dd66:	bf00      	nop
 801dd68:	51eb851f 	.word	0x51eb851f

0801dd6c <lv_colorwheel_constructor>:
{
 801dd6c:	b510      	push	{r4, lr}
 801dd6e:	460c      	mov	r4, r1
    colorwheel->hsv.h = 0;
 801dd70:	2300      	movs	r3, #0
 801dd72:	848b      	strh	r3, [r1, #36]	; 0x24
    colorwheel->hsv.s = 100;
 801dd74:	2264      	movs	r2, #100	; 0x64
 801dd76:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
    colorwheel->hsv.v = 100;
 801dd7a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 801dd7e:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
    colorwheel->mode_fixed = 0;
 801dd82:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801dd86:	f363 0282 	bfi	r2, r3, #2, #1
 801dd8a:	f881 203c 	strb.w	r2, [r1, #60]	; 0x3c
    colorwheel->last_click_time = 0;
 801dd8e:	630b      	str	r3, [r1, #48]	; 0x30
    colorwheel->last_change_time = 0;
 801dd90:	634b      	str	r3, [r1, #52]	; 0x34
    colorwheel->knob.recolor = create_knob_recolor;
 801dd92:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801dd96:	4a0a      	ldr	r2, [pc, #40]	; (801ddc0 <lv_colorwheel_constructor+0x54>)
 801dd98:	7812      	ldrb	r2, [r2, #0]
 801dd9a:	f362 0300 	bfi	r3, r2, #0, #1
 801dd9e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 801dda2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801dda6:	4620      	mov	r0, r4
 801dda8:	f7e9 f8e4 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 801ddac:	f44f 7140 	mov.w	r1, #768	; 0x300
 801ddb0:	4620      	mov	r0, r4
 801ddb2:	f7e9 f919 	bl	8006fe8 <lv_obj_clear_flag>
    refr_knob_pos(obj);
 801ddb6:	4620      	mov	r0, r4
 801ddb8:	f7ff ff7a 	bl	801dcb0 <refr_knob_pos>
}
 801ddbc:	bd10      	pop	{r4, pc}
 801ddbe:	bf00      	nop
 801ddc0:	200027b4 	.word	0x200027b4

0801ddc4 <lv_colorwheel_set_hsv>:
{
 801ddc4:	b530      	push	{r4, r5, lr}
 801ddc6:	b083      	sub	sp, #12
 801ddc8:	4604      	mov	r4, r0
 801ddca:	9101      	str	r1, [sp, #4]
 801ddcc:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801ddd0:	0e0a      	lsrs	r2, r1, #24
 801ddd2:	b289      	uxth	r1, r1
    if(hsv.h > 360) hsv.h %= 360;
 801ddd4:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 801ddd8:	d909      	bls.n	801ddee <lv_colorwheel_set_hsv+0x2a>
 801ddda:	08cb      	lsrs	r3, r1, #3
 801dddc:	4d15      	ldr	r5, [pc, #84]	; (801de34 <lv_colorwheel_set_hsv+0x70>)
 801ddde:	fba5 5303 	umull	r5, r3, r5, r3
 801dde2:	089b      	lsrs	r3, r3, #2
 801dde4:	f44f 7cb4 	mov.w	ip, #360	; 0x168
 801dde8:	fb0c 1113 	mls	r1, ip, r3, r1
 801ddec:	b289      	uxth	r1, r1
    if(hsv.s > 100) hsv.s = 100;
 801ddee:	2864      	cmp	r0, #100	; 0x64
 801ddf0:	bf28      	it	cs
 801ddf2:	2064      	movcs	r0, #100	; 0x64
    if(hsv.v > 100) hsv.v = 100;
 801ddf4:	4613      	mov	r3, r2
 801ddf6:	2a64      	cmp	r2, #100	; 0x64
 801ddf8:	bf28      	it	cs
 801ddfa:	2364      	movcs	r3, #100	; 0x64
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 801ddfc:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801ddfe:	428a      	cmp	r2, r1
 801de00:	d108      	bne.n	801de14 <lv_colorwheel_set_hsv+0x50>
 801de02:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 801de04:	f88d 0006 	strb.w	r0, [sp, #6]
 801de08:	f88d 3007 	strb.w	r3, [sp, #7]
 801de0c:	f8bd c006 	ldrh.w	ip, [sp, #6]
 801de10:	4594      	cmp	ip, r2
 801de12:	d00d      	beq.n	801de30 <lv_colorwheel_set_hsv+0x6c>
    colorwheel->hsv = hsv;
 801de14:	84a1      	strh	r1, [r4, #36]	; 0x24
 801de16:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
 801de1a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    refr_knob_pos(obj);
 801de1e:	4620      	mov	r0, r4
 801de20:	f7ff ff46 	bl	801dcb0 <refr_knob_pos>
    lv_obj_invalidate(obj);
 801de24:	4620      	mov	r0, r4
 801de26:	f7ea fc09 	bl	800863c <lv_obj_invalidate>
    return true;
 801de2a:	2001      	movs	r0, #1
}
 801de2c:	b003      	add	sp, #12
 801de2e:	bd30      	pop	{r4, r5, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 801de30:	2000      	movs	r0, #0
 801de32:	e7fb      	b.n	801de2c <lv_colorwheel_set_hsv+0x68>
 801de34:	16c16c17 	.word	0x16c16c17

0801de38 <lv_colorwheel_get_rgb>:
{
 801de38:	b508      	push	{r3, lr}
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 801de3a:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
 801de3e:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
 801de42:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 801de44:	f003 fc38 	bl	80216b8 <lv_color_hsv_to_rgb>
}
 801de48:	bd08      	pop	{r3, pc}
	...

0801de4c <lv_colorwheel_event>:
{
 801de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de50:	b0a7      	sub	sp, #156	; 0x9c
 801de52:	9105      	str	r1, [sp, #20]
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801de54:	48a1      	ldr	r0, [pc, #644]	; (801e0dc <lv_colorwheel_event+0x290>)
 801de56:	f7e6 f9b8 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801de5a:	2801      	cmp	r0, #1
 801de5c:	d002      	beq.n	801de64 <lv_colorwheel_event+0x18>
}
 801de5e:	b027      	add	sp, #156	; 0x9c
 801de60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801de64:	9d05      	ldr	r5, [sp, #20]
 801de66:	4628      	mov	r0, r5
 801de68:	f7e6 fad2 	bl	8004410 <lv_event_get_code>
 801de6c:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801de6e:	4628      	mov	r0, r5
 801de70:	f7e6 faca 	bl	8004408 <lv_event_get_target>
 801de74:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801de76:	2c13      	cmp	r4, #19
 801de78:	d01c      	beq.n	801deb4 <lv_colorwheel_event+0x68>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801de7a:	2c29      	cmp	r4, #41	; 0x29
 801de7c:	d04b      	beq.n	801df16 <lv_colorwheel_event+0xca>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 801de7e:	2c2a      	cmp	r4, #42	; 0x2a
 801de80:	d066      	beq.n	801df50 <lv_colorwheel_event+0x104>
    else if(code == LV_EVENT_KEY) {
 801de82:	2c0d      	cmp	r4, #13
 801de84:	d067      	beq.n	801df56 <lv_colorwheel_event+0x10a>
    else if(code == LV_EVENT_PRESSED) {
 801de86:	2c01      	cmp	r4, #1
 801de88:	f000 80e9 	beq.w	801e05e <lv_colorwheel_event+0x212>
    else if(code == LV_EVENT_PRESSING) {
 801de8c:	2c02      	cmp	r4, #2
 801de8e:	f000 812b 	beq.w	801e0e8 <lv_colorwheel_event+0x29c>
    else if(code == LV_EVENT_HIT_TEST) {
 801de92:	2c11      	cmp	r4, #17
 801de94:	f000 8215 	beq.w	801e2c2 <lv_colorwheel_event+0x476>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801de98:	2c15      	cmp	r4, #21
 801de9a:	f000 821f 	beq.w	801e2dc <lv_colorwheel_event+0x490>
    else if(code == LV_EVENT_COVER_CHECK) {
 801de9e:	2c12      	cmp	r4, #18
 801dea0:	d1dd      	bne.n	801de5e <lv_colorwheel_event+0x12>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 801dea2:	9805      	ldr	r0, [sp, #20]
 801dea4:	f7e6 fab8 	bl	8004418 <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 801dea8:	7803      	ldrb	r3, [r0, #0]
 801deaa:	2b02      	cmp	r3, #2
 801deac:	bf1c      	itt	ne
 801deae:	2301      	movne	r3, #1
 801deb0:	7003      	strbne	r3, [r0, #0]
 801deb2:	e7d4      	b.n	801de5e <lv_colorwheel_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801deb4:	2212      	movs	r2, #18
 801deb6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801deba:	f7ec fff7 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801debe:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801dec0:	2213      	movs	r2, #19
 801dec2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801dec6:	4628      	mov	r0, r5
 801dec8:	f7ec fff0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801decc:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801dece:	2210      	movs	r2, #16
 801ded0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801ded4:	4628      	mov	r0, r5
 801ded6:	f7ec ffe9 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801deda:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801dedc:	2211      	movs	r2, #17
 801dede:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801dee2:	4628      	mov	r0, r5
 801dee4:	f7ec ffe2 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801dee8:	b205      	sxth	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 801deea:	9805      	ldr	r0, [sp, #20]
 801deec:	f7e6 fa94 	bl	8004418 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 801def0:	4623      	mov	r3, r4
 801def2:	42bc      	cmp	r4, r7
 801def4:	bfb8      	it	lt
 801def6:	463b      	movlt	r3, r7
 801def8:	42b3      	cmp	r3, r6
 801defa:	bfb8      	it	lt
 801defc:	4633      	movlt	r3, r6
 801defe:	42ab      	cmp	r3, r5
 801df00:	bfb8      	it	lt
 801df02:	462b      	movlt	r3, r5
 801df04:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad);
 801df06:	b21b      	sxth	r3, r3
 801df08:	f9b0 2000 	ldrsh.w	r2, [r0]
 801df0c:	4293      	cmp	r3, r2
 801df0e:	bfb8      	it	lt
 801df10:	4613      	movlt	r3, r2
 801df12:	8003      	strh	r3, [r0, #0]
 801df14:	e7a3      	b.n	801de5e <lv_colorwheel_event+0x12>
        void * param = lv_event_get_param(e);
 801df16:	9805      	ldr	r0, [sp, #20]
 801df18:	f7e6 fa7e 	bl	8004418 <lv_event_get_param>
 801df1c:	4604      	mov	r4, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 801df1e:	4628      	mov	r0, r5
 801df20:	f7ea f945 	bl	80081ae <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801df24:	88a3      	ldrh	r3, [r4, #4]
 801df26:	3301      	adds	r3, #1
 801df28:	8822      	ldrh	r2, [r4, #0]
 801df2a:	1a9b      	subs	r3, r3, r2
 801df2c:	b21b      	sxth	r3, r3
 801df2e:	4298      	cmp	r0, r3
 801df30:	d003      	beq.n	801df3a <lv_colorwheel_event+0xee>
            refr_knob_pos(obj);
 801df32:	4628      	mov	r0, r5
 801df34:	f7ff febc 	bl	801dcb0 <refr_knob_pos>
 801df38:	e791      	b.n	801de5e <lv_colorwheel_event+0x12>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 801df3a:	4628      	mov	r0, r5
 801df3c:	f7ea f93d 	bl	80081ba <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801df40:	88e3      	ldrh	r3, [r4, #6]
 801df42:	3301      	adds	r3, #1
 801df44:	8862      	ldrh	r2, [r4, #2]
 801df46:	1a9b      	subs	r3, r3, r2
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 801df48:	b21b      	sxth	r3, r3
 801df4a:	4298      	cmp	r0, r3
 801df4c:	d1f1      	bne.n	801df32 <lv_colorwheel_event+0xe6>
 801df4e:	e786      	b.n	801de5e <lv_colorwheel_event+0x12>
        refr_knob_pos(obj);
 801df50:	f7ff feae 	bl	801dcb0 <refr_knob_pos>
 801df54:	e783      	b.n	801de5e <lv_colorwheel_event+0x12>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 801df56:	9805      	ldr	r0, [sp, #20]
 801df58:	f7e6 fa5e 	bl	8004418 <lv_event_get_param>
 801df5c:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 801df5e:	f023 0202 	bic.w	r2, r3, #2
 801df62:	2a11      	cmp	r2, #17
 801df64:	d01d      	beq.n	801dfa2 <lv_colorwheel_event+0x156>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 801df66:	2b14      	cmp	r3, #20
 801df68:	d002      	beq.n	801df70 <lv_colorwheel_event+0x124>
 801df6a:	2b12      	cmp	r3, #18
 801df6c:	f47f af77 	bne.w	801de5e <lv_colorwheel_event+0x12>
            hsv_cur = colorwheel->hsv;
 801df70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801df72:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 801df74:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801df78:	f003 0303 	and.w	r3, r3, #3
 801df7c:	2b01      	cmp	r3, #1
 801df7e:	d05a      	beq.n	801e036 <lv_colorwheel_event+0x1ea>
 801df80:	2b02      	cmp	r3, #2
 801df82:	d062      	beq.n	801e04a <lv_colorwheel_event+0x1fe>
 801df84:	2b00      	cmp	r3, #0
 801df86:	d04c      	beq.n	801e022 <lv_colorwheel_event+0x1d6>
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801df88:	9918      	ldr	r1, [sp, #96]	; 0x60
 801df8a:	4628      	mov	r0, r5
 801df8c:	f7ff ff1a 	bl	801ddc4 <lv_colorwheel_set_hsv>
 801df90:	2800      	cmp	r0, #0
 801df92:	f43f af64 	beq.w	801de5e <lv_colorwheel_event+0x12>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801df96:	2200      	movs	r2, #0
 801df98:	211c      	movs	r1, #28
 801df9a:	4628      	mov	r0, r5
 801df9c:	f7e6 fa12 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 801dfa0:	e75d      	b.n	801de5e <lv_colorwheel_event+0x12>
            hsv_cur = colorwheel->hsv;
 801dfa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801dfa4:	9318      	str	r3, [sp, #96]	; 0x60
            switch(colorwheel->mode) {
 801dfa6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801dfaa:	f003 0303 	and.w	r3, r3, #3
 801dfae:	2b01      	cmp	r3, #1
 801dfb0:	d01d      	beq.n	801dfee <lv_colorwheel_event+0x1a2>
 801dfb2:	2b02      	cmp	r3, #2
 801dfb4:	d028      	beq.n	801e008 <lv_colorwheel_event+0x1bc>
 801dfb6:	b163      	cbz	r3, 801dfd2 <lv_colorwheel_event+0x186>
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801dfb8:	9918      	ldr	r1, [sp, #96]	; 0x60
 801dfba:	4628      	mov	r0, r5
 801dfbc:	f7ff ff02 	bl	801ddc4 <lv_colorwheel_set_hsv>
 801dfc0:	2800      	cmp	r0, #0
 801dfc2:	f43f af4c 	beq.w	801de5e <lv_colorwheel_event+0x12>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801dfc6:	2200      	movs	r2, #0
 801dfc8:	211c      	movs	r1, #28
 801dfca:	4628      	mov	r0, r5
 801dfcc:	f7e6 f9fa 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 801dfd0:	e745      	b.n	801de5e <lv_colorwheel_event+0x12>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 801dfd2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 801dfd4:	3301      	adds	r3, #1
 801dfd6:	4a42      	ldr	r2, [pc, #264]	; (801e0e0 <lv_colorwheel_event+0x294>)
 801dfd8:	fb82 1203 	smull	r1, r2, r2, r3
 801dfdc:	441a      	add	r2, r3
 801dfde:	1212      	asrs	r2, r2, #8
 801dfe0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 801dfe4:	fb01 3312 	mls	r3, r1, r2, r3
 801dfe8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    break;
 801dfec:	e7e4      	b.n	801dfb8 <lv_colorwheel_event+0x16c>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 801dfee:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 801dff2:	3301      	adds	r3, #1
 801dff4:	4a3b      	ldr	r2, [pc, #236]	; (801e0e4 <lv_colorwheel_event+0x298>)
 801dff6:	fb82 1203 	smull	r1, r2, r2, r3
 801dffa:	1152      	asrs	r2, r2, #5
 801dffc:	2164      	movs	r1, #100	; 0x64
 801dffe:	fb01 3312 	mls	r3, r1, r2, r3
 801e002:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    break;
 801e006:	e7d7      	b.n	801dfb8 <lv_colorwheel_event+0x16c>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 801e008:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 801e00c:	3301      	adds	r3, #1
 801e00e:	4a35      	ldr	r2, [pc, #212]	; (801e0e4 <lv_colorwheel_event+0x298>)
 801e010:	fb82 1203 	smull	r1, r2, r2, r3
 801e014:	1152      	asrs	r2, r2, #5
 801e016:	2164      	movs	r1, #100	; 0x64
 801e018:	fb01 3312 	mls	r3, r1, r2, r3
 801e01c:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                    break;
 801e020:	e7ca      	b.n	801dfb8 <lv_colorwheel_event+0x16c>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801e022:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 801e024:	b123      	cbz	r3, 801e030 <lv_colorwheel_event+0x1e4>
 801e026:	3b01      	subs	r3, #1
 801e028:	b29b      	uxth	r3, r3
 801e02a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    break;
 801e02e:	e7ab      	b.n	801df88 <lv_colorwheel_event+0x13c>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 801e030:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801e034:	e7f9      	b.n	801e02a <lv_colorwheel_event+0x1de>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 801e036:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 801e03a:	b123      	cbz	r3, 801e046 <lv_colorwheel_event+0x1fa>
 801e03c:	3b01      	subs	r3, #1
 801e03e:	b2db      	uxtb	r3, r3
 801e040:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    break;
 801e044:	e7a0      	b.n	801df88 <lv_colorwheel_event+0x13c>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 801e046:	2364      	movs	r3, #100	; 0x64
 801e048:	e7fa      	b.n	801e040 <lv_colorwheel_event+0x1f4>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 801e04a:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
 801e04e:	b123      	cbz	r3, 801e05a <lv_colorwheel_event+0x20e>
 801e050:	3b01      	subs	r3, #1
 801e052:	b2db      	uxtb	r3, r3
 801e054:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                    break;
 801e058:	e796      	b.n	801df88 <lv_colorwheel_event+0x13c>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 801e05a:	2364      	movs	r3, #100	; 0x64
 801e05c:	e7fa      	b.n	801e054 <lv_colorwheel_event+0x208>
        colorwheel->last_change_time = lv_tick_get();
 801e05e:	f002 fdc6 	bl	8020bee <lv_tick_get>
 801e062:	6368      	str	r0, [r5, #52]	; 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 801e064:	f7e6 fd54 	bl	8004b10 <lv_indev_get_act>
 801e068:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801e06c:	f7e6 fdcd 	bl	8004c0a <lv_indev_get_point>
    lv_indev_t * indev = lv_indev_get_act();
 801e070:	f7e6 fd4e 	bl	8004b10 <lv_indev_get_act>
 801e074:	4604      	mov	r4, r0
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 801e076:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801e078:	f002 fdbd 	bl	8020bf6 <lv_tick_elaps>
 801e07c:	6823      	ldr	r3, [r4, #0]
 801e07e:	8b9b      	ldrh	r3, [r3, #28]
 801e080:	4298      	cmp	r0, r3
 801e082:	d212      	bcs.n	801e0aa <lv_colorwheel_event+0x25e>
        hsv_cur = colorwheel->hsv;
 801e084:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e086:	9318      	str	r3, [sp, #96]	; 0x60
        switch(colorwheel->mode) {
 801e088:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801e08c:	f003 0303 	and.w	r3, r3, #3
 801e090:	2b01      	cmp	r3, #1
 801e092:	d011      	beq.n	801e0b8 <lv_colorwheel_event+0x26c>
 801e094:	2b02      	cmp	r3, #2
 801e096:	d013      	beq.n	801e0c0 <lv_colorwheel_event+0x274>
 801e098:	b15b      	cbz	r3, 801e0b2 <lv_colorwheel_event+0x266>
        lv_indev_wait_release(indev);
 801e09a:	4620      	mov	r0, r4
 801e09c:	f7e6 fdfa 	bl	8004c94 <lv_indev_wait_release>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801e0a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e0a2:	4628      	mov	r0, r5
 801e0a4:	f7ff fe8e 	bl	801ddc4 <lv_colorwheel_set_hsv>
 801e0a8:	b970      	cbnz	r0, 801e0c8 <lv_colorwheel_event+0x27c>
    colorwheel->last_click_time = lv_tick_get();
 801e0aa:	f002 fda0 	bl	8020bee <lv_tick_get>
 801e0ae:	6328      	str	r0, [r5, #48]	; 0x30
    return LV_RES_OK;
 801e0b0:	e6d5      	b.n	801de5e <lv_colorwheel_event+0x12>
                hsv_cur.h = 0;
 801e0b2:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                break;
 801e0b6:	e7f0      	b.n	801e09a <lv_colorwheel_event+0x24e>
                hsv_cur.s = 100;
 801e0b8:	2364      	movs	r3, #100	; 0x64
 801e0ba:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                break;
 801e0be:	e7ec      	b.n	801e09a <lv_colorwheel_event+0x24e>
                hsv_cur.v = 100;
 801e0c0:	2364      	movs	r3, #100	; 0x64
 801e0c2:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                break;
 801e0c6:	e7e8      	b.n	801e09a <lv_colorwheel_event+0x24e>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801e0c8:	2200      	movs	r2, #0
 801e0ca:	211c      	movs	r1, #28
 801e0cc:	4628      	mov	r0, r5
 801e0ce:	f7e6 f979 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return res;
 801e0d2:	2801      	cmp	r0, #1
 801e0d4:	f47f aec3 	bne.w	801de5e <lv_colorwheel_event+0x12>
 801e0d8:	e7e7      	b.n	801e0aa <lv_colorwheel_event+0x25e>
 801e0da:	bf00      	nop
 801e0dc:	0802d7f8 	.word	0x0802d7f8
 801e0e0:	b60b60b7 	.word	0xb60b60b7
 801e0e4:	51eb851f 	.word	0x51eb851f
        lv_indev_t * indev = lv_indev_get_act();
 801e0e8:	f7e6 fd12 	bl	8004b10 <lv_indev_get_act>
        if(indev == NULL) return;
 801e0ec:	4606      	mov	r6, r0
 801e0ee:	2800      	cmp	r0, #0
 801e0f0:	f43f aeb5 	beq.w	801de5e <lv_colorwheel_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801e0f4:	f7e6 fd12 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801e0f8:	2804      	cmp	r0, #4
 801e0fa:	d002      	beq.n	801e102 <lv_colorwheel_event+0x2b6>
 801e0fc:	2802      	cmp	r0, #2
 801e0fe:	f040 8095 	bne.w	801e22c <lv_colorwheel_event+0x3e0>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 801e102:	8aac      	ldrh	r4, [r5, #20]
 801e104:	4628      	mov	r0, r5
 801e106:	f7ea f852 	bl	80081ae <lv_obj_get_width>
 801e10a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e10e:	eb04 0060 	add.w	r0, r4, r0, asr #1
 801e112:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 801e116:	8aec      	ldrh	r4, [r5, #22]
 801e118:	4628      	mov	r0, r5
 801e11a:	f7ea f84e 	bl	80081ba <lv_obj_get_height>
 801e11e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e122:	eb04 0060 	add.w	r0, r4, r0, asr #1
 801e126:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 801e12a:	6833      	ldr	r3, [r6, #0]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 801e12c:	7e1a      	ldrb	r2, [r3, #24]
 801e12e:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 801e132:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 801e136:	1a5b      	subs	r3, r3, r1
 801e138:	2b00      	cmp	r3, #0
 801e13a:	bfb8      	it	lt
 801e13c:	425b      	neglt	r3, r3
 801e13e:	4293      	cmp	r3, r2
 801e140:	dc09      	bgt.n	801e156 <lv_colorwheel_event+0x30a>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 801e142:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 801e146:	f9b5 103a 	ldrsh.w	r1, [r5, #58]	; 0x3a
 801e14a:	1a5b      	subs	r3, r3, r1
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	bfb8      	it	lt
 801e150:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 801e152:	429a      	cmp	r2, r3
 801e154:	da08      	bge.n	801e168 <lv_colorwheel_event+0x31c>
            colorwheel->last_change_time = lv_tick_get();
 801e156:	f002 fd4a 	bl	8020bee <lv_tick_get>
 801e15a:	6368      	str	r0, [r5, #52]	; 0x34
            colorwheel->last_press_point.x = p.x;
 801e15c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e160:	872b      	strh	r3, [r5, #56]	; 0x38
            colorwheel->last_press_point.y = p.y;
 801e162:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 801e166:	876b      	strh	r3, [r5, #58]	; 0x3a
        p.x -= obj->coords.x1;
 801e168:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801e16c:	8aaa      	ldrh	r2, [r5, #20]
 801e16e:	1a9b      	subs	r3, r3, r2
 801e170:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        p.y -= obj->coords.y1;
 801e174:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 801e178:	8aea      	ldrh	r2, [r5, #22]
 801e17a:	1a9b      	subs	r3, r3, r2
 801e17c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        uint16_t w = lv_obj_get_width(obj);
 801e180:	4628      	mov	r0, r5
 801e182:	f7ea f814 	bl	80081ae <lv_obj_get_width>
 801e186:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801e188:	2250      	movs	r2, #80	; 0x50
 801e18a:	2100      	movs	r1, #0
 801e18c:	4628      	mov	r0, r5
 801e18e:	f7ec fe8d 	bl	800aeac <lv_obj_get_style_prop>
        lv_coord_t r_in = w / 2;
 801e192:	f3c4 034e 	ubfx	r3, r4, #1, #15
        p.x -= r_in;
 801e196:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801e19a:	1ad2      	subs	r2, r2, r3
 801e19c:	b212      	sxth	r2, r2
 801e19e:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        p.y -= r_in;
 801e1a2:	f8bd 104a 	ldrh.w	r1, [sp, #74]	; 0x4a
 801e1a6:	1ac9      	subs	r1, r1, r3
 801e1a8:	b209      	sxth	r1, r1
 801e1aa:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
        r_in -= cir_w;
 801e1ae:	1a1b      	subs	r3, r3, r0
 801e1b0:	b29c      	uxth	r4, r3
 801e1b2:	b21b      	sxth	r3, r3
        if(r_in > LV_DPI_DEF / 2) {
 801e1b4:	2b41      	cmp	r3, #65	; 0x41
 801e1b6:	dd09      	ble.n	801e1cc <lv_colorwheel_event+0x380>
            lv_coord_t inner = cir_w / 2;
 801e1b8:	b207      	sxth	r7, r0
 801e1ba:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801e1be:	443b      	add	r3, r7
            r_in -= inner;
 801e1c0:	eba4 0363 	sub.w	r3, r4, r3, asr #1
 801e1c4:	b21b      	sxth	r3, r3
 801e1c6:	2b41      	cmp	r3, #65	; 0x41
 801e1c8:	bfb8      	it	lt
 801e1ca:	2341      	movlt	r3, #65	; 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 801e1cc:	fb01 f101 	mul.w	r1, r1, r1
 801e1d0:	fb02 1702 	mla	r7, r2, r2, r1
 801e1d4:	fb03 f403 	mul.w	r4, r3, r3
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 801e1d8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801e1da:	f002 fd0c 	bl	8020bf6 <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 801e1de:	42a7      	cmp	r7, r4
 801e1e0:	da29      	bge.n	801e236 <lv_colorwheel_event+0x3ea>
 801e1e2:	6833      	ldr	r3, [r6, #0]
 801e1e4:	8b9b      	ldrh	r3, [r3, #28]
 801e1e6:	4283      	cmp	r3, r0
 801e1e8:	f4bf ae39 	bcs.w	801de5e <lv_colorwheel_event+0x12>
 801e1ec:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801e1f0:	f013 0f04 	tst.w	r3, #4
 801e1f4:	f47f ae33 	bne.w	801de5e <lv_colorwheel_event+0x12>
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	f003 0303 	and.w	r3, r3, #3
 801e1fe:	3301      	adds	r3, #1
 801e200:	2203      	movs	r2, #3
 801e202:	fb93 f2f2 	sdiv	r2, r3, r2
 801e206:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e20a:	1a9b      	subs	r3, r3, r2
 801e20c:	460a      	mov	r2, r1
 801e20e:	f363 0201 	bfi	r2, r3, #0, #2
 801e212:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    refr_knob_pos(obj);
 801e216:	4628      	mov	r0, r5
 801e218:	f7ff fd4a 	bl	801dcb0 <refr_knob_pos>
    lv_obj_invalidate(obj);
 801e21c:	4628      	mov	r0, r5
 801e21e:	f7ea fa0d 	bl	800863c <lv_obj_invalidate>
            lv_indev_wait_release(lv_indev_get_act());
 801e222:	f7e6 fc75 	bl	8004b10 <lv_indev_get_act>
 801e226:	f7e6 fd35 	bl	8004c94 <lv_indev_wait_release>
            return;
 801e22a:	e618      	b.n	801de5e <lv_colorwheel_event+0x12>
            lv_indev_get_point(indev, &p);
 801e22c:	a912      	add	r1, sp, #72	; 0x48
 801e22e:	4630      	mov	r0, r6
 801e230:	f7e6 fceb 	bl	8004c0a <lv_indev_get_point>
 801e234:	e779      	b.n	801e12a <lv_colorwheel_event+0x2de>
        angle = lv_atan2(p.x, p.y) % 360;
 801e236:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 801e23a:	f9bd 0048 	ldrsh.w	r0, [sp, #72]	; 0x48
 801e23e:	f003 fdcf 	bl	8021de0 <lv_atan2>
 801e242:	08c3      	lsrs	r3, r0, #3
 801e244:	4acb      	ldr	r2, [pc, #812]	; (801e574 <lv_colorwheel_event+0x728>)
 801e246:	fba2 2303 	umull	r2, r3, r2, r3
 801e24a:	089b      	lsrs	r3, r3, #2
 801e24c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801e250:	fb02 0313 	mls	r3, r2, r3, r0
 801e254:	b299      	uxth	r1, r3
 801e256:	b21b      	sxth	r3, r3
        hsv_cur = colorwheel->hsv;
 801e258:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801e25a:	9218      	str	r2, [sp, #96]	; 0x60
        switch(colorwheel->mode) {
 801e25c:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 801e260:	f002 0203 	and.w	r2, r2, #3
 801e264:	2a01      	cmp	r2, #1
 801e266:	d012      	beq.n	801e28e <lv_colorwheel_event+0x442>
 801e268:	2a02      	cmp	r2, #2
 801e26a:	d01d      	beq.n	801e2a8 <lv_colorwheel_event+0x45c>
 801e26c:	b162      	cbz	r2, 801e288 <lv_colorwheel_event+0x43c>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 801e26e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e270:	4628      	mov	r0, r5
 801e272:	f7ff fda7 	bl	801ddc4 <lv_colorwheel_set_hsv>
 801e276:	2800      	cmp	r0, #0
 801e278:	f43f adf1 	beq.w	801de5e <lv_colorwheel_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 801e27c:	2200      	movs	r2, #0
 801e27e:	211c      	movs	r1, #28
 801e280:	4628      	mov	r0, r5
 801e282:	f7e6 f89f 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 801e286:	e5ea      	b.n	801de5e <lv_colorwheel_event+0x12>
                hsv_cur.h = angle;
 801e288:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
                break;
 801e28c:	e7ef      	b.n	801e26e <lv_colorwheel_event+0x422>
                hsv_cur.s = (angle * 100) / 360;
 801e28e:	2264      	movs	r2, #100	; 0x64
 801e290:	fb02 f303 	mul.w	r3, r2, r3
 801e294:	4ab8      	ldr	r2, [pc, #736]	; (801e578 <lv_colorwheel_event+0x72c>)
 801e296:	fb82 1203 	smull	r1, r2, r2, r3
 801e29a:	441a      	add	r2, r3
 801e29c:	17db      	asrs	r3, r3, #31
 801e29e:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 801e2a2:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                break;
 801e2a6:	e7e2      	b.n	801e26e <lv_colorwheel_event+0x422>
                hsv_cur.v = (angle * 100) / 360;
 801e2a8:	2264      	movs	r2, #100	; 0x64
 801e2aa:	fb02 f303 	mul.w	r3, r2, r3
 801e2ae:	4ab2      	ldr	r2, [pc, #712]	; (801e578 <lv_colorwheel_event+0x72c>)
 801e2b0:	fb82 1203 	smull	r1, r2, r2, r3
 801e2b4:	441a      	add	r2, r3
 801e2b6:	17db      	asrs	r3, r3, #31
 801e2b8:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 801e2bc:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
                break;
 801e2c0:	e7d5      	b.n	801e26e <lv_colorwheel_event+0x422>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 801e2c2:	9805      	ldr	r0, [sp, #20]
 801e2c4:	f7e6 f8a8 	bl	8004418 <lv_event_get_param>
 801e2c8:	4604      	mov	r4, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 801e2ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e2ce:	6801      	ldr	r1, [r0, #0]
 801e2d0:	f105 0014 	add.w	r0, r5, #20
 801e2d4:	f002 ff62 	bl	802119c <_lv_area_is_point_on>
 801e2d8:	7120      	strb	r0, [r4, #4]
 801e2da:	e5c0      	b.n	801de5e <lv_colorwheel_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 801e2dc:	9c05      	ldr	r4, [sp, #20]
 801e2de:	4620      	mov	r0, r4
 801e2e0:	f7e6 f892 	bl	8004408 <lv_event_get_target>
 801e2e4:	4680      	mov	r8, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	f7e6 f902 	bl	80044f0 <lv_event_get_draw_ctx>
 801e2ec:	9006      	str	r0, [sp, #24]
    lv_coord_t w = lv_obj_get_width(obj);
 801e2ee:	4640      	mov	r0, r8
 801e2f0:	f7e9 ff5d 	bl	80081ae <lv_obj_get_width>
 801e2f4:	4682      	mov	sl, r0
    lv_coord_t h = lv_obj_get_height(obj);
 801e2f6:	4640      	mov	r0, r8
 801e2f8:	f7e9 ff5f 	bl	80081ba <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 801e2fc:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 801e300:	f34a 0a4f 	sbfx	sl, sl, #1, #16
 801e304:	f8b8 b014 	ldrh.w	fp, [r8, #20]
 801e308:	44d3      	add	fp, sl
 801e30a:	fa1f fb8b 	uxth.w	fp, fp
    lv_coord_t cy = obj->coords.y1 + h / 2;
 801e30e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801e312:	f8b8 3016 	ldrh.w	r3, [r8, #22]
 801e316:	eb03 0060 	add.w	r0, r3, r0, asr #1
 801e31a:	b283      	uxth	r3, r0
 801e31c:	9303      	str	r3, [sp, #12]
    lv_draw_line_dsc_init(&line_dsc);
 801e31e:	a80f      	add	r0, sp, #60	; 0x3c
 801e320:	f7f0 f831 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 801e324:	aa0f      	add	r2, sp, #60	; 0x3c
 801e326:	2100      	movs	r1, #0
 801e328:	4640      	mov	r0, r8
 801e32a:	f7e9 fc1d 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 801e32e:	f44f 731d 	mov.w	r3, #628	; 0x274
 801e332:	fb03 f30a 	mul.w	r3, r3, sl
 801e336:	4a91      	ldr	r2, [pc, #580]	; (801e57c <lv_colorwheel_event+0x730>)
 801e338:	fb82 1203 	smull	r1, r2, r2, r3
 801e33c:	17db      	asrs	r3, r3, #31
 801e33e:	ebc3 3322 	rsb	r3, r3, r2, asr #12
    line_dsc.width += 2;
 801e342:	3302      	adds	r3, #2
 801e344:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e348:	2250      	movs	r2, #80	; 0x50
 801e34a:	2100      	movs	r1, #0
 801e34c:	4640      	mov	r0, r8
 801e34e:	f7ec fdad 	bl	800aeac <lv_obj_get_style_prop>
 801e352:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
 801e354:	b203      	sxth	r3, r0
 801e356:	9307      	str	r3, [sp, #28]
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 801e358:	2300      	movs	r3, #0
 801e35a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e35e:	f108 0114 	add.w	r1, r8, #20
 801e362:	a812      	add	r0, sp, #72	; 0x48
 801e364:	f7f1 f80e 	bl	800f384 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 801e368:	2100      	movs	r1, #0
 801e36a:	a812      	add	r0, sp, #72	; 0x48
 801e36c:	f7f0 fe08 	bl	800ef80 <lv_draw_mask_add>
 801e370:	9008      	str	r0, [sp, #32]
    dest->y1 = src->y1;
 801e372:	f9b8 2016 	ldrsh.w	r2, [r8, #22]
    dest->x2 = src->x2;
 801e376:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
    dest->y2 = src->y2;
 801e37a:	f9b8 301a 	ldrsh.w	r3, [r8, #26]
    mask_area.x1 += cir_w;
 801e37e:	b2a4      	uxth	r4, r4
 801e380:	f8b8 0014 	ldrh.w	r0, [r8, #20]
 801e384:	4420      	add	r0, r4
 801e386:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    mask_area.x2 -= cir_w;
 801e38a:	1b09      	subs	r1, r1, r4
 801e38c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
    mask_area.y1 += cir_w;
 801e390:	4422      	add	r2, r4
 801e392:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    mask_area.y2 -= cir_w;
 801e396:	1b1c      	subs	r4, r3, r4
 801e398:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 801e39c:	2301      	movs	r3, #1
 801e39e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e3a2:	a90b      	add	r1, sp, #44	; 0x2c
 801e3a4:	a818      	add	r0, sp, #96	; 0x60
 801e3a6:	f7f0 ffed 	bl	800f384 <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 801e3aa:	2100      	movs	r1, #0
 801e3ac:	a818      	add	r0, sp, #96	; 0x60
 801e3ae:	f7f0 fde7 	bl	800ef80 <lv_draw_mask_add>
 801e3b2:	9009      	str	r0, [sp, #36]	; 0x24
    lv_coord_t cir_w_extra = line_dsc.width;
 801e3b4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e3b8:	9304      	str	r3, [sp, #16]
 801e3ba:	2600      	movs	r6, #0
    if(angle_saved != angle) m = 255;
 801e3bc:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 801e580 <lv_colorwheel_event+0x734>
 801e3c0:	e068      	b.n	801e494 <lv_colorwheel_event+0x648>
            fast_hsv2rgb(angle * 6, s, v, &r, &g,
 801e3c2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 801e3c6:	0040      	lsls	r0, r0, #1
 801e3c8:	b280      	uxth	r0, r0
 801e3ca:	ab0d      	add	r3, sp, #52	; 0x34
 801e3cc:	9301      	str	r3, [sp, #4]
 801e3ce:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801e3d2:	9300      	str	r3, [sp, #0]
 801e3d4:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801e3d8:	4a6a      	ldr	r2, [pc, #424]	; (801e584 <lv_colorwheel_event+0x738>)
 801e3da:	7812      	ldrb	r2, [r2, #0]
 801e3dc:	496a      	ldr	r1, [pc, #424]	; (801e588 <lv_colorwheel_event+0x73c>)
 801e3de:	7809      	ldrb	r1, [r1, #0]
 801e3e0:	f7ff fbd4 	bl	801db8c <fast_hsv2rgb>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e3e4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801e3e8:	08db      	lsrs	r3, r3, #3
 801e3ea:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 801e3ee:	0889      	lsrs	r1, r1, #2
 801e3f0:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 801e3f4:	08d2      	lsrs	r2, r2, #3
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 801e3f6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801e3fa:	f363 0004 	bfi	r0, r3, #0, #5
 801e3fe:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
 801e402:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801e406:	f361 134a 	bfi	r3, r1, #5, #6
 801e40a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 801e40e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e412:	f362 03c7 	bfi	r3, r2, #3, #5
 801e416:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 801e41a:	0a25      	lsrs	r5, r4, #8
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801e41c:	9b04      	ldr	r3, [sp, #16]
 801e41e:	eb0a 0703 	add.w	r7, sl, r3
 801e422:	f344 240f 	sbfx	r4, r4, #8, #16
 801e426:	4620      	mov	r0, r4
 801e428:	f003 fc74 	bl	8021d14 <lv_trigo_sin>
 801e42c:	fb07 f000 	mul.w	r0, r7, r0
 801e430:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 801e434:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 801e438:	355a      	adds	r5, #90	; 0x5a
 801e43a:	b22d      	sxth	r5, r5
 801e43c:	4628      	mov	r0, r5
 801e43e:	f003 fc69 	bl	8021d14 <lv_trigo_sin>
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 801e442:	fb00 f707 	mul.w	r7, r0, r7
 801e446:	9a03      	ldr	r2, [sp, #12]
 801e448:	eb02 37e7 	add.w	r7, r2, r7, asr #15
 801e44c:	f8ad 7036 	strh.w	r7, [sp, #54]	; 0x36
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 801e450:	9907      	ldr	r1, [sp, #28]
 801e452:	ebaa 0701 	sub.w	r7, sl, r1
 801e456:	9b04      	ldr	r3, [sp, #16]
 801e458:	1aff      	subs	r7, r7, r3
 801e45a:	4620      	mov	r0, r4
 801e45c:	f003 fc5a 	bl	8021d14 <lv_trigo_sin>
 801e460:	fb07 f000 	mul.w	r0, r7, r0
 801e464:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 801e468:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801e46c:	4628      	mov	r0, r5
 801e46e:	f003 fc51 	bl	8021d14 <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 801e472:	fb00 f707 	mul.w	r7, r0, r7
 801e476:	9a03      	ldr	r2, [sp, #12]
 801e478:	eb02 37e7 	add.w	r7, r2, r7, asr #15
 801e47c:	f8ad 703a 	strh.w	r7, [sp, #58]	; 0x3a
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 801e480:	ab0e      	add	r3, sp, #56	; 0x38
 801e482:	aa0d      	add	r2, sp, #52	; 0x34
 801e484:	a90f      	add	r1, sp, #60	; 0x3c
 801e486:	9806      	ldr	r0, [sp, #24]
 801e488:	f7ef ff94 	bl	800e3b4 <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 801e48c:	3601      	adds	r6, #1
 801e48e:	2e56      	cmp	r6, #86	; 0x56
 801e490:	f000 80b1 	beq.w	801e5f6 <lv_colorwheel_event+0x7aa>
 801e494:	b2b0      	uxth	r0, r6
 801e496:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801e49a:	b29b      	uxth	r3, r3
 801e49c:	f44f 6487 	mov.w	r4, #1080	; 0x438
 801e4a0:	fb06 f404 	mul.w	r4, r6, r4
    uint8_t r = 0, g = 0, b = 0;
 801e4a4:	2200      	movs	r2, #0
 801e4a6:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 801e4aa:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 801e4ae:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    if(angle_saved != angle) m = 255;
 801e4b2:	4a36      	ldr	r2, [pc, #216]	; (801e58c <lv_colorwheel_event+0x740>)
 801e4b4:	8812      	ldrh	r2, [r2, #0]
 801e4b6:	429a      	cmp	r2, r3
 801e4b8:	bf1c      	itt	ne
 801e4ba:	22ff      	movne	r2, #255	; 0xff
 801e4bc:	f889 2000 	strbne.w	r2, [r9]
    angle_saved = angle;
 801e4c0:	4a32      	ldr	r2, [pc, #200]	; (801e58c <lv_colorwheel_event+0x740>)
 801e4c2:	8013      	strh	r3, [r2, #0]
    switch(ext->mode) {
 801e4c4:	f898 303c 	ldrb.w	r3, [r8, #60]	; 0x3c
 801e4c8:	f3c3 0201 	ubfx	r2, r3, #0, #2
 801e4cc:	f003 0303 	and.w	r3, r3, #3
 801e4d0:	2b01      	cmp	r3, #1
 801e4d2:	d020      	beq.n	801e516 <lv_colorwheel_event+0x6ca>
 801e4d4:	2b02      	cmp	r3, #2
 801e4d6:	d05f      	beq.n	801e598 <lv_colorwheel_event+0x74c>
            if(m != ext->mode) {
 801e4d8:	f899 1000 	ldrb.w	r1, [r9]
 801e4dc:	4299      	cmp	r1, r3
 801e4de:	f43f af70 	beq.w	801e3c2 <lv_colorwheel_event+0x576>
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 801e4e2:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 801e4e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e4ee:	4928      	ldr	r1, [pc, #160]	; (801e590 <lv_colorwheel_event+0x744>)
 801e4f0:	fb81 5303 	smull	r5, r3, r1, r3
 801e4f4:	10db      	asrs	r3, r3, #3
 801e4f6:	4d24      	ldr	r5, [pc, #144]	; (801e588 <lv_colorwheel_event+0x73c>)
 801e4f8:	702b      	strb	r3, [r5, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 801e4fa:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
 801e4fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e502:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e506:	fb81 1303 	smull	r1, r3, r1, r3
 801e50a:	10db      	asrs	r3, r3, #3
 801e50c:	491d      	ldr	r1, [pc, #116]	; (801e584 <lv_colorwheel_event+0x738>)
 801e50e:	700b      	strb	r3, [r1, #0]
                m = ext->mode;
 801e510:	f889 2000 	strb.w	r2, [r9]
 801e514:	e755      	b.n	801e3c2 <lv_colorwheel_event+0x576>
            if(m != ext->mode) {
 801e516:	f899 3000 	ldrb.w	r3, [r9]
 801e51a:	2b01      	cmp	r3, #1
 801e51c:	d019      	beq.n	801e552 <lv_colorwheel_event+0x706>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 801e51e:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 801e522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e526:	019b      	lsls	r3, r3, #6
 801e528:	4a12      	ldr	r2, [pc, #72]	; (801e574 <lv_colorwheel_event+0x728>)
 801e52a:	fba2 2303 	umull	r2, r3, r2, r3
 801e52e:	089b      	lsrs	r3, r3, #2
 801e530:	4a18      	ldr	r2, [pc, #96]	; (801e594 <lv_colorwheel_event+0x748>)
 801e532:	8013      	strh	r3, [r2, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 801e534:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
 801e538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e53c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e540:	4a13      	ldr	r2, [pc, #76]	; (801e590 <lv_colorwheel_event+0x744>)
 801e542:	fb82 2303 	smull	r2, r3, r2, r3
 801e546:	10db      	asrs	r3, r3, #3
 801e548:	4a0e      	ldr	r2, [pc, #56]	; (801e584 <lv_colorwheel_event+0x738>)
 801e54a:	7013      	strb	r3, [r2, #0]
                m = ext->mode;
 801e54c:	2301      	movs	r3, #1
 801e54e:	f889 3000 	strb.w	r3, [r9]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 801e552:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801e556:	ab0d      	add	r3, sp, #52	; 0x34
 801e558:	9301      	str	r3, [sp, #4]
 801e55a:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801e55e:	9300      	str	r3, [sp, #0]
 801e560:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801e564:	4a07      	ldr	r2, [pc, #28]	; (801e584 <lv_colorwheel_event+0x738>)
 801e566:	7812      	ldrb	r2, [r2, #0]
 801e568:	b2c9      	uxtb	r1, r1
 801e56a:	480a      	ldr	r0, [pc, #40]	; (801e594 <lv_colorwheel_event+0x748>)
 801e56c:	8800      	ldrh	r0, [r0, #0]
 801e56e:	f7ff fb0d 	bl	801db8c <fast_hsv2rgb>
            break;
 801e572:	e737      	b.n	801e3e4 <lv_colorwheel_event+0x598>
 801e574:	16c16c17 	.word	0x16c16c17
 801e578:	b60b60b7 	.word	0xb60b60b7
 801e57c:	7b5ca453 	.word	0x7b5ca453
 801e580:	2000070c 	.word	0x2000070c
 801e584:	200027b9 	.word	0x200027b9
 801e588:	200027b8 	.word	0x200027b8
 801e58c:	2000070a 	.word	0x2000070a
 801e590:	66666667 	.word	0x66666667
 801e594:	200027b6 	.word	0x200027b6
            if(m != ext->mode) {
 801e598:	f899 3000 	ldrb.w	r3, [r9]
 801e59c:	2b02      	cmp	r3, #2
 801e59e:	d019      	beq.n	801e5d4 <lv_colorwheel_event+0x788>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 801e5a0:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 801e5a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5a8:	019b      	lsls	r3, r3, #6
 801e5aa:	4a2e      	ldr	r2, [pc, #184]	; (801e664 <lv_colorwheel_event+0x818>)
 801e5ac:	fba2 2303 	umull	r2, r3, r2, r3
 801e5b0:	089b      	lsrs	r3, r3, #2
 801e5b2:	4a2d      	ldr	r2, [pc, #180]	; (801e668 <lv_colorwheel_event+0x81c>)
 801e5b4:	8013      	strh	r3, [r2, #0]
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 801e5b6:	f898 3026 	ldrb.w	r3, [r8, #38]	; 0x26
 801e5ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e5be:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e5c2:	4a2a      	ldr	r2, [pc, #168]	; (801e66c <lv_colorwheel_event+0x820>)
 801e5c4:	fb82 2303 	smull	r2, r3, r2, r3
 801e5c8:	10db      	asrs	r3, r3, #3
 801e5ca:	4a29      	ldr	r2, [pc, #164]	; (801e670 <lv_colorwheel_event+0x824>)
 801e5cc:	7013      	strb	r3, [r2, #0]
                m = ext->mode;
 801e5ce:	2302      	movs	r3, #2
 801e5d0:	f889 3000 	strb.w	r3, [r9]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 801e5d4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 801e5d8:	ab0d      	add	r3, sp, #52	; 0x34
 801e5da:	9301      	str	r3, [sp, #4]
 801e5dc:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801e5e0:	9300      	str	r3, [sp, #0]
 801e5e2:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 801e5e6:	b2d2      	uxtb	r2, r2
 801e5e8:	4921      	ldr	r1, [pc, #132]	; (801e670 <lv_colorwheel_event+0x824>)
 801e5ea:	7809      	ldrb	r1, [r1, #0]
 801e5ec:	481e      	ldr	r0, [pc, #120]	; (801e668 <lv_colorwheel_event+0x81c>)
 801e5ee:	8800      	ldrh	r0, [r0, #0]
 801e5f0:	f7ff facc 	bl	801db8c <fast_hsv2rgb>
            break;
 801e5f4:	e6f6      	b.n	801e3e4 <lv_colorwheel_event+0x598>
    lv_draw_mask_free_param(&mask_out_param);
 801e5f6:	a812      	add	r0, sp, #72	; 0x48
 801e5f8:	f7f0 fd36 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_in_param);
 801e5fc:	a818      	add	r0, sp, #96	; 0x60
 801e5fe:	f7f0 fd33 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_out_id);
 801e602:	9808      	ldr	r0, [sp, #32]
 801e604:	f7f0 fd06 	bl	800f014 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 801e608:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e60a:	f7f0 fd03 	bl	800f014 <lv_draw_mask_remove_id>
    lv_obj_t * obj = lv_event_get_target(e);
 801e60e:	9d05      	ldr	r5, [sp, #20]
 801e610:	4628      	mov	r0, r5
 801e612:	f7e5 fef9 	bl	8004408 <lv_event_get_target>
 801e616:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801e618:	4628      	mov	r0, r5
 801e61a:	f7e5 ff69 	bl	80044f0 <lv_event_get_draw_ctx>
 801e61e:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 801e620:	a818      	add	r0, sp, #96	; 0x60
 801e622:	f7f1 f903 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 801e626:	aa18      	add	r2, sp, #96	; 0x60
 801e628:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801e62c:	4620      	mov	r0, r4
 801e62e:	f7e9 f877 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 801e632:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e636:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    if(colorwheel->knob.recolor) {
 801e63a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801e63e:	f013 0f01 	tst.w	r3, #1
 801e642:	d109      	bne.n	801e658 <lv_colorwheel_event+0x80c>
    lv_area_t knob_area = get_knob_area(obj);
 801e644:	4621      	mov	r1, r4
 801e646:	a812      	add	r0, sp, #72	; 0x48
 801e648:	f7ff faf0 	bl	801dc2c <get_knob_area>
    lv_draw_rect(draw_ctx, &cir_dsc, &knob_area);
 801e64c:	aa12      	add	r2, sp, #72	; 0x48
 801e64e:	a918      	add	r1, sp, #96	; 0x60
 801e650:	4628      	mov	r0, r5
 801e652:	f7f1 f947 	bl	800f8e4 <lv_draw_rect>
}
 801e656:	e402      	b.n	801de5e <lv_colorwheel_event+0x12>
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 801e658:	4620      	mov	r0, r4
 801e65a:	f7ff fbed 	bl	801de38 <lv_colorwheel_get_rgb>
 801e65e:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
 801e662:	e7ef      	b.n	801e644 <lv_colorwheel_event+0x7f8>
 801e664:	16c16c17 	.word	0x16c16c17
 801e668:	200027b6 	.word	0x200027b6
 801e66c:	66666667 	.word	0x66666667
 801e670:	200027b8 	.word	0x200027b8

0801e674 <lv_keyboard_update_ctrl_map>:
/**
 * Update the control map for the current mode
 * @param obj pointer to a keyboard object
 */
static void lv_keyboard_update_ctrl_map(lv_obj_t * obj)
{
 801e674:	b538      	push	{r3, r4, r5, lr}
 801e676:	4604      	mov	r4, r0
    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;

    if(keyboard->popovers) {
 801e678:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801e67c:	f013 0f01 	tst.w	r3, #1
 801e680:	d007      	beq.n	801e692 <lv_keyboard_update_ctrl_map+0x1e>
        /*Apply the current control map (already includes LV_BTNMATRIX_CTRL_POPOVER flags)*/
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 801e682:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 801e686:	4b15      	ldr	r3, [pc, #84]	; (801e6dc <lv_keyboard_update_ctrl_map+0x68>)
 801e688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e68c:	f007 ff30 	bl	80264f0 <lv_btnmatrix_set_ctrl_map>

        /*Apply new control map and clean up*/
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
        lv_mem_free(ctrl_map);
    }
}
 801e690:	bd38      	pop	{r3, r4, r5, pc}
        lv_btnmatrix_ctrl_t * ctrl_map = lv_mem_alloc(btnm->btn_cnt * sizeof(lv_btnmatrix_ctrl_t));
 801e692:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 801e694:	0040      	lsls	r0, r0, #1
 801e696:	f003 fc49 	bl	8021f2c <lv_mem_alloc>
 801e69a:	4605      	mov	r5, r0
        lv_memcpy(ctrl_map, kb_ctrl[keyboard->mode], sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801e69c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 801e69e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801e6a2:	0052      	lsls	r2, r2, #1
 801e6a4:	4b0d      	ldr	r3, [pc, #52]	; (801e6dc <lv_keyboard_update_ctrl_map+0x68>)
 801e6a6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801e6aa:	f003 fd29 	bl	8022100 <lv_memcpy>
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 801e6ae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801e6b0:	b163      	cbz	r3, 801e6cc <lv_keyboard_update_ctrl_map+0x58>
 801e6b2:	2300      	movs	r3, #0
            ctrl_map[i] &= (~LV_BTNMATRIX_CTRL_POPOVER);
 801e6b4:	b299      	uxth	r1, r3
 801e6b6:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
 801e6ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801e6be:	f825 2011 	strh.w	r2, [r5, r1, lsl #1]
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 801e6c2:	3301      	adds	r3, #1
 801e6c4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 801e6c6:	b29a      	uxth	r2, r3
 801e6c8:	4291      	cmp	r1, r2
 801e6ca:	d8f3      	bhi.n	801e6b4 <lv_keyboard_update_ctrl_map+0x40>
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
 801e6cc:	4629      	mov	r1, r5
 801e6ce:	4620      	mov	r0, r4
 801e6d0:	f007 ff0e 	bl	80264f0 <lv_btnmatrix_set_ctrl_map>
        lv_mem_free(ctrl_map);
 801e6d4:	4628      	mov	r0, r5
 801e6d6:	f003 fc47 	bl	8021f68 <lv_mem_free>
}
 801e6da:	e7d9      	b.n	801e690 <lv_keyboard_update_ctrl_map+0x1c>
 801e6dc:	20000710 	.word	0x20000710

0801e6e0 <lv_keyboard_update_map>:
{
 801e6e0:	b510      	push	{r4, lr}
 801e6e2:	4604      	mov	r4, r0
    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 801e6e4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 801e6e8:	4b04      	ldr	r3, [pc, #16]	; (801e6fc <lv_keyboard_update_map+0x1c>)
 801e6ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e6ee:	f007 fd9d 	bl	802622c <lv_btnmatrix_set_map>
    lv_keyboard_update_ctrl_map(obj);
 801e6f2:	4620      	mov	r0, r4
 801e6f4:	f7ff ffbe 	bl	801e674 <lv_keyboard_update_ctrl_map>
}
 801e6f8:	bd10      	pop	{r4, pc}
 801e6fa:	bf00      	nop
 801e6fc:	20000734 	.word	0x20000734

0801e700 <lv_keyboard_constructor>:
{
 801e700:	b538      	push	{r3, r4, r5, lr}
 801e702:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 801e704:	2104      	movs	r1, #4
 801e706:	4620      	mov	r0, r4
 801e708:	f7e8 fc6e 	bl	8006fe8 <lv_obj_clear_flag>
    keyboard->ta         = NULL;
 801e70c:	2500      	movs	r5, #0
 801e70e:	63a5      	str	r5, [r4, #56]	; 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 801e710:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    keyboard->popovers   = 0;
 801e714:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801e718:	f365 0300 	bfi	r3, r5, #0, #1
 801e71c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 801e720:	462b      	mov	r3, r5
 801e722:	462a      	mov	r2, r5
 801e724:	2105      	movs	r1, #5
 801e726:	4620      	mov	r0, r4
 801e728:	f7e9 fcd6 	bl	80080d8 <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 801e72c:	462b      	mov	r3, r5
 801e72e:	221c      	movs	r2, #28
 801e730:	4906      	ldr	r1, [pc, #24]	; (801e74c <lv_keyboard_constructor+0x4c>)
 801e732:	4620      	mov	r0, r4
 801e734:	f7e5 fe88 	bl	8004448 <lv_obj_add_event_cb>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);
 801e738:	462a      	mov	r2, r5
 801e73a:	4629      	mov	r1, r5
 801e73c:	4620      	mov	r0, r4
 801e73e:	f7ed fac5 	bl	800bccc <lv_obj_set_style_base_dir>
    lv_keyboard_update_map(obj);
 801e742:	4620      	mov	r0, r4
 801e744:	f7ff ffcc 	bl	801e6e0 <lv_keyboard_update_map>
}
 801e748:	bd38      	pop	{r3, r4, r5, pc}
 801e74a:	bf00      	nop
 801e74c:	0801e751 	.word	0x0801e751

0801e750 <lv_keyboard_def_event_cb>:
{
 801e750:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 801e752:	f7e5 fe59 	bl	8004408 <lv_event_get_target>
 801e756:	4604      	mov	r4, r0
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 801e758:	f007 ff25 	bl	80265a6 <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 801e75c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e760:	4298      	cmp	r0, r3
 801e762:	d039      	beq.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 801e764:	4620      	mov	r0, r4
 801e766:	f007 ff1e 	bl	80265a6 <lv_btnmatrix_get_selected_btn>
 801e76a:	4601      	mov	r1, r0
 801e76c:	4620      	mov	r0, r4
 801e76e:	f007 ff1d 	bl	80265ac <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 801e772:	4605      	mov	r5, r0
 801e774:	b380      	cbz	r0, 801e7d8 <lv_keyboard_def_event_cb+0x88>
    if(strcmp(txt, "abc") == 0) {
 801e776:	496d      	ldr	r1, [pc, #436]	; (801e92c <lv_keyboard_def_event_cb+0x1dc>)
 801e778:	f7e1 fd54 	bl	8000224 <strcmp>
 801e77c:	b308      	cbz	r0, 801e7c2 <lv_keyboard_def_event_cb+0x72>
    else if(strcmp(txt, "ABC") == 0) {
 801e77e:	496c      	ldr	r1, [pc, #432]	; (801e930 <lv_keyboard_def_event_cb+0x1e0>)
 801e780:	4628      	mov	r0, r5
 801e782:	f7e1 fd4f 	bl	8000224 <strcmp>
 801e786:	b340      	cbz	r0, 801e7da <lv_keyboard_def_event_cb+0x8a>
    else if(strcmp(txt, "1#") == 0) {
 801e788:	496a      	ldr	r1, [pc, #424]	; (801e934 <lv_keyboard_def_event_cb+0x1e4>)
 801e78a:	4628      	mov	r0, r5
 801e78c:	f7e1 fd4a 	bl	8000224 <strcmp>
 801e790:	b378      	cbz	r0, 801e7f2 <lv_keyboard_def_event_cb+0xa2>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 801e792:	4969      	ldr	r1, [pc, #420]	; (801e938 <lv_keyboard_def_event_cb+0x1e8>)
 801e794:	4628      	mov	r0, r5
 801e796:	f7e1 fd45 	bl	8000224 <strcmp>
 801e79a:	b120      	cbz	r0, 801e7a6 <lv_keyboard_def_event_cb+0x56>
 801e79c:	4967      	ldr	r1, [pc, #412]	; (801e93c <lv_keyboard_def_event_cb+0x1ec>)
 801e79e:	4628      	mov	r0, r5
 801e7a0:	f7e1 fd40 	bl	8000224 <strcmp>
 801e7a4:	bb88      	cbnz	r0, 801e80a <lv_keyboard_def_event_cb+0xba>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 801e7a6:	2200      	movs	r2, #0
 801e7a8:	2120      	movs	r1, #32
 801e7aa:	4620      	mov	r0, r4
 801e7ac:	f7e5 fe0a 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return;
 801e7b0:	2801      	cmp	r0, #1
 801e7b2:	d111      	bne.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        if(keyboard->ta) {
 801e7b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e7b6:	b178      	cbz	r0, 801e7d8 <lv_keyboard_def_event_cb+0x88>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 801e7b8:	2200      	movs	r2, #0
 801e7ba:	2120      	movs	r1, #32
 801e7bc:	f7e5 fe02 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 801e7c0:	e00a      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 801e7c8:	4b5d      	ldr	r3, [pc, #372]	; (801e940 <lv_keyboard_def_event_cb+0x1f0>)
 801e7ca:	6819      	ldr	r1, [r3, #0]
 801e7cc:	4620      	mov	r0, r4
 801e7ce:	f007 fd2d 	bl	802622c <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 801e7d2:	4620      	mov	r0, r4
 801e7d4:	f7ff ff4e 	bl	801e674 <lv_keyboard_update_ctrl_map>
}
 801e7d8:	bd70      	pop	{r4, r5, r6, pc}
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 801e7da:	2301      	movs	r3, #1
 801e7dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 801e7e0:	4b57      	ldr	r3, [pc, #348]	; (801e940 <lv_keyboard_def_event_cb+0x1f0>)
 801e7e2:	6859      	ldr	r1, [r3, #4]
 801e7e4:	4620      	mov	r0, r4
 801e7e6:	f007 fd21 	bl	802622c <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 801e7ea:	4620      	mov	r0, r4
 801e7ec:	f7ff ff42 	bl	801e674 <lv_keyboard_update_ctrl_map>
        return;
 801e7f0:	e7f2      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 801e7f2:	2302      	movs	r3, #2
 801e7f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 801e7f8:	4b51      	ldr	r3, [pc, #324]	; (801e940 <lv_keyboard_def_event_cb+0x1f0>)
 801e7fa:	6899      	ldr	r1, [r3, #8]
 801e7fc:	4620      	mov	r0, r4
 801e7fe:	f007 fd15 	bl	802622c <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 801e802:	4620      	mov	r0, r4
 801e804:	f7ff ff36 	bl	801e674 <lv_keyboard_update_ctrl_map>
        return;
 801e808:	e7e6      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 801e80a:	494e      	ldr	r1, [pc, #312]	; (801e944 <lv_keyboard_def_event_cb+0x1f4>)
 801e80c:	4628      	mov	r0, r5
 801e80e:	f7e1 fd09 	bl	8000224 <strcmp>
 801e812:	b1d8      	cbz	r0, 801e84c <lv_keyboard_def_event_cb+0xfc>
    if(keyboard->ta == NULL) return;
 801e814:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801e816:	2e00      	cmp	r6, #0
 801e818:	d0de      	beq.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 801e81a:	494b      	ldr	r1, [pc, #300]	; (801e948 <lv_keyboard_def_event_cb+0x1f8>)
 801e81c:	4628      	mov	r0, r5
 801e81e:	f7e1 fd01 	bl	8000224 <strcmp>
 801e822:	b120      	cbz	r0, 801e82e <lv_keyboard_def_event_cb+0xde>
 801e824:	4949      	ldr	r1, [pc, #292]	; (801e94c <lv_keyboard_def_event_cb+0x1fc>)
 801e826:	4628      	mov	r0, r5
 801e828:	f7e1 fcfc 	bl	8000224 <strcmp>
 801e82c:	b9e8      	cbnz	r0, 801e86a <lv_keyboard_def_event_cb+0x11a>
        lv_textarea_add_char(keyboard->ta, '\n');
 801e82e:	210a      	movs	r1, #10
 801e830:	4630      	mov	r0, r6
 801e832:	f00d fd75 	bl	802c320 <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 801e836:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e838:	f00d fcbd 	bl	802c1b6 <lv_textarea_get_one_line>
 801e83c:	2800      	cmp	r0, #0
 801e83e:	d0cb      	beq.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 801e840:	2200      	movs	r2, #0
 801e842:	211f      	movs	r1, #31
 801e844:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e846:	f7e5 fdbd 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 801e84a:	e7c5      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 801e84c:	2200      	movs	r2, #0
 801e84e:	211f      	movs	r1, #31
 801e850:	4620      	mov	r0, r4
 801e852:	f7e5 fdb7 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return;
 801e856:	2801      	cmp	r0, #1
 801e858:	d1be      	bne.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        if(keyboard->ta) {
 801e85a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e85c:	2800      	cmp	r0, #0
 801e85e:	d0bb      	beq.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 801e860:	2200      	movs	r2, #0
 801e862:	211f      	movs	r1, #31
 801e864:	f7e5 fdae 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 801e868:	e7b6      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
    else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 801e86a:	4939      	ldr	r1, [pc, #228]	; (801e950 <lv_keyboard_def_event_cb+0x200>)
 801e86c:	4628      	mov	r0, r5
 801e86e:	f7e1 fcd9 	bl	8000224 <strcmp>
 801e872:	b348      	cbz	r0, 801e8c8 <lv_keyboard_def_event_cb+0x178>
    else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 801e874:	4937      	ldr	r1, [pc, #220]	; (801e954 <lv_keyboard_def_event_cb+0x204>)
 801e876:	4628      	mov	r0, r5
 801e878:	f7e1 fcd4 	bl	8000224 <strcmp>
 801e87c:	b340      	cbz	r0, 801e8d0 <lv_keyboard_def_event_cb+0x180>
    else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 801e87e:	4936      	ldr	r1, [pc, #216]	; (801e958 <lv_keyboard_def_event_cb+0x208>)
 801e880:	4628      	mov	r0, r5
 801e882:	f7e1 fccf 	bl	8000224 <strcmp>
 801e886:	b338      	cbz	r0, 801e8d8 <lv_keyboard_def_event_cb+0x188>
    else if(strcmp(txt, "+/-") == 0) {
 801e888:	4934      	ldr	r1, [pc, #208]	; (801e95c <lv_keyboard_def_event_cb+0x20c>)
 801e88a:	4628      	mov	r0, r5
 801e88c:	f7e1 fcca 	bl	8000224 <strcmp>
 801e890:	2800      	cmp	r0, #0
 801e892:	d145      	bne.n	801e920 <lv_keyboard_def_event_cb+0x1d0>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 801e894:	4630      	mov	r0, r6
 801e896:	f00d fc09 	bl	802c0ac <lv_textarea_get_cursor_pos>
 801e89a:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 801e89c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e89e:	f00d fbf9 	bl	802c094 <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 801e8a2:	7803      	ldrb	r3, [r0, #0]
 801e8a4:	2b2d      	cmp	r3, #45	; 0x2d
 801e8a6:	d01b      	beq.n	801e8e0 <lv_keyboard_def_event_cb+0x190>
        else if(ta_txt[0] == '+') {
 801e8a8:	2b2b      	cmp	r3, #43	; 0x2b
 801e8aa:	d029      	beq.n	801e900 <lv_keyboard_def_event_cb+0x1b0>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 801e8ac:	2100      	movs	r1, #0
 801e8ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e8b0:	f00d faee 	bl	802be90 <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 801e8b4:	212d      	movs	r1, #45	; 0x2d
 801e8b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e8b8:	f00d fd32 	bl	802c320 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 801e8bc:	b2a9      	uxth	r1, r5
 801e8be:	3101      	adds	r1, #1
 801e8c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e8c2:	f00d fae5 	bl	802be90 <lv_textarea_set_cursor_pos>
 801e8c6:	e787      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_cursor_left(keyboard->ta);
 801e8c8:	4630      	mov	r0, r6
 801e8ca:	f00d fe79 	bl	802c5c0 <lv_textarea_cursor_left>
 801e8ce:	e783      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_cursor_right(keyboard->ta);
 801e8d0:	4630      	mov	r0, r6
 801e8d2:	f00d fe6f 	bl	802c5b4 <lv_textarea_cursor_right>
 801e8d6:	e77f      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_del_char(keyboard->ta);
 801e8d8:	4630      	mov	r0, r6
 801e8da:	f00d fda5 	bl	802c428 <lv_textarea_del_char>
 801e8de:	e77b      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 801e8e0:	2101      	movs	r1, #1
 801e8e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e8e4:	f00d fad4 	bl	802be90 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 801e8e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e8ea:	f00d fd9d 	bl	802c428 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 801e8ee:	212b      	movs	r1, #43	; 0x2b
 801e8f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e8f2:	f00d fd15 	bl	802c320 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 801e8f6:	b2a9      	uxth	r1, r5
 801e8f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e8fa:	f00d fac9 	bl	802be90 <lv_textarea_set_cursor_pos>
 801e8fe:	e76b      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 801e900:	2101      	movs	r1, #1
 801e902:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e904:	f00d fac4 	bl	802be90 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 801e908:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e90a:	f00d fd8d 	bl	802c428 <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 801e90e:	212d      	movs	r1, #45	; 0x2d
 801e910:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e912:	f00d fd05 	bl	802c320 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 801e916:	b2a9      	uxth	r1, r5
 801e918:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e91a:	f00d fab9 	bl	802be90 <lv_textarea_set_cursor_pos>
 801e91e:	e75b      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_add_text(keyboard->ta, txt);
 801e920:	4629      	mov	r1, r5
 801e922:	4630      	mov	r0, r6
 801e924:	f00d fc68 	bl	802c1f8 <lv_textarea_add_text>
 801e928:	e756      	b.n	801e7d8 <lv_keyboard_def_event_cb+0x88>
 801e92a:	bf00      	nop
 801e92c:	0802d814 	.word	0x0802d814
 801e930:	0802d818 	.word	0x0802d818
 801e934:	0802d81c 	.word	0x0802d81c
 801e938:	0802d820 	.word	0x0802d820
 801e93c:	0802d824 	.word	0x0802d824
 801e940:	20000734 	.word	0x20000734
 801e944:	0802d7bc 	.word	0x0802d7bc
 801e948:	0802d828 	.word	0x0802d828
 801e94c:	0802d830 	.word	0x0802d830
 801e950:	0802d834 	.word	0x0802d834
 801e954:	0802d838 	.word	0x0802d838
 801e958:	0802d83c 	.word	0x0802d83c
 801e95c:	0802d840 	.word	0x0802d840

0801e960 <lv_led_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_led_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801e960:	b510      	push	{r4, lr}
 801e962:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_led_t * led = (lv_led_t *)obj;
    led->color = lv_theme_get_color_primary(obj);
 801e964:	4608      	mov	r0, r1
 801e966:	f7ee fd2f 	bl	800d3c8 <lv_theme_get_color_primary>
 801e96a:	84a0      	strh	r0, [r4, #36]	; 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 801e96c:	23ff      	movs	r3, #255	; 0xff
 801e96e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
 801e972:	bd10      	pop	{r4, pc}

0801e974 <lv_led_event>:

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801e974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e978:	b0a0      	sub	sp, #128	; 0x80
 801e97a:	460d      	mov	r5, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    lv_event_code_t code = lv_event_get_code(e);
 801e97c:	4608      	mov	r0, r1
 801e97e:	f7e5 fd47 	bl	8004410 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 801e982:	f1a0 0315 	sub.w	r3, r0, #21
 801e986:	b2db      	uxtb	r3, r3
 801e988:	2b01      	cmp	r3, #1
 801e98a:	d90d      	bls.n	801e9a8 <lv_led_event+0x34>
        res = lv_obj_event_base(MY_CLASS, e);
 801e98c:	4629      	mov	r1, r5
 801e98e:	4805      	ldr	r0, [pc, #20]	; (801e9a4 <lv_led_event+0x30>)
 801e990:	f7e5 fc1b 	bl	80041ca <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801e994:	2801      	cmp	r0, #1
 801e996:	d102      	bne.n	801e99e <lv_led_event+0x2a>
    }

    lv_obj_t * obj = lv_event_get_target(e);
 801e998:	4628      	mov	r0, r5
 801e99a:	f7e5 fd35 	bl	8004408 <lv_event_get_target>

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}
 801e99e:	b020      	add	sp, #128	; 0x80
 801e9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e9a4:	0802dd28 	.word	0x0802dd28
 801e9a8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801e9aa:	4628      	mov	r0, r5
 801e9ac:	f7e5 fd2c 	bl	8004408 <lv_event_get_target>
 801e9b0:	4606      	mov	r6, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 801e9b2:	2c15      	cmp	r4, #21
 801e9b4:	d1f3      	bne.n	801e99e <lv_led_event+0x2a>
        lv_draw_rect_dsc_init(&rect_dsc);
 801e9b6:	4668      	mov	r0, sp
 801e9b8:	f7f0 ff38 	bl	800f82c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 801e9bc:	466a      	mov	r2, sp
 801e9be:	2100      	movs	r1, #0
 801e9c0:	4630      	mov	r0, r6
 801e9c2:	f7e8 fead 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801e9c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801e9ca:	f003 031f 	and.w	r3, r3, #31
 801e9ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e9d2:	f3c2 1245 	ubfx	r2, r2, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801e9d6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801e9da:	08c9      	lsrs	r1, r1, #3
 801e9dc:	eb01 1041 	add.w	r0, r1, r1, lsl #5
 801e9e0:	ebc1 00c0 	rsb	r0, r1, r0, lsl #3
 801e9e4:	3007      	adds	r0, #7
 801e9e6:	1140      	asrs	r0, r0, #5
 801e9e8:	2100      	movs	r1, #0
 801e9ea:	f360 4117 	bfi	r1, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801e9ee:	eb02 10c2 	add.w	r0, r2, r2, lsl #7
 801e9f2:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e9f6:	3203      	adds	r2, #3
 801e9f8:	1192      	asrs	r2, r2, #6
 801e9fa:	f362 210f 	bfi	r1, r2, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801e9fe:	eb03 1243 	add.w	r2, r3, r3, lsl #5
 801ea02:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801ea06:	3307      	adds	r3, #7
 801ea08:	115b      	asrs	r3, r3, #5
 801ea0a:	f363 0107 	bfi	r1, r3, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801ea0e:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ea12:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 801ea14:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801ea18:	4bf6      	ldr	r3, [pc, #984]	; (801edf4 <lv_led_event+0x480>)
 801ea1a:	ea02 0703 	and.w	r7, r2, r3
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801ea1e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 801ea22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea26:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801ea2a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ea2e:	b2cc      	uxtb	r4, r1
 801ea30:	4414      	add	r4, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801ea32:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801ea36:	3404      	adds	r4, #4
 801ea38:	08e4      	lsrs	r4, r4, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ea3a:	fb07 f404 	mul.w	r4, r7, r4
 801ea3e:	ea03 1454 	and.w	r4, r3, r4, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801ea42:	f89d c006 	ldrb.w	ip, [sp, #6]
 801ea46:	f00c 0c1f 	and.w	ip, ip, #31
 801ea4a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801ea4e:	f3c1 1145 	ubfx	r1, r1, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801ea52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801ea56:	08d2      	lsrs	r2, r2, #3
 801ea58:	eb02 1042 	add.w	r0, r2, r2, lsl #5
 801ea5c:	ebc2 00c0 	rsb	r0, r2, r0, lsl #3
 801ea60:	3007      	adds	r0, #7
 801ea62:	1140      	asrs	r0, r0, #5
 801ea64:	2200      	movs	r2, #0
 801ea66:	f360 4217 	bfi	r2, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801ea6a:	eb01 10c1 	add.w	r0, r1, r1, lsl #7
 801ea6e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801ea72:	3103      	adds	r1, #3
 801ea74:	1189      	asrs	r1, r1, #6
 801ea76:	f361 220f 	bfi	r2, r1, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801ea7a:	eb0c 114c 	add.w	r1, ip, ip, lsl #5
 801ea7e:	ebcc 0cc1 	rsb	ip, ip, r1, lsl #3
 801ea82:	f10c 0c07 	add.w	ip, ip, #7
 801ea86:	ea4f 1c6c 	mov.w	ip, ip, asr #5
 801ea8a:	f36c 0207 	bfi	r2, ip, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801ea8e:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801ea92:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801ea96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea9a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801ea9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801eaa2:	b2d0      	uxtb	r0, r2
 801eaa4:	4408      	add	r0, r1
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801eaa6:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 801eaaa:	3004      	adds	r0, #4
 801eaac:	08c0      	lsrs	r0, r0, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801eaae:	fb07 f000 	mul.w	r0, r7, r0
 801eab2:	ea03 1050 	and.w	r0, r3, r0, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801eab6:	f89d 200a 	ldrb.w	r2, [sp, #10]
 801eaba:	f002 021f 	and.w	r2, r2, #31
 801eabe:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801eac2:	f3cc 1c45 	ubfx	ip, ip, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801eac6:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801eaca:	08c9      	lsrs	r1, r1, #3
 801eacc:	eb01 1e41 	add.w	lr, r1, r1, lsl #5
 801ead0:	ebc1 0ece 	rsb	lr, r1, lr, lsl #3
 801ead4:	f10e 0e07 	add.w	lr, lr, #7
 801ead8:	ea4f 1e6e 	mov.w	lr, lr, asr #5
 801eadc:	2100      	movs	r1, #0
 801eade:	f36e 4117 	bfi	r1, lr, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801eae2:	eb0c 1ecc 	add.w	lr, ip, ip, lsl #7
 801eae6:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
 801eaea:	f10c 0c03 	add.w	ip, ip, #3
 801eaee:	ea4f 1cac 	mov.w	ip, ip, asr #6
 801eaf2:	f36c 210f 	bfi	r1, ip, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801eaf6:	eb02 1c42 	add.w	ip, r2, r2, lsl #5
 801eafa:	ebc2 02cc 	rsb	r2, r2, ip, lsl #3
 801eafe:	3207      	adds	r2, #7
 801eb00:	1152      	asrs	r2, r2, #5
 801eb02:	f362 0107 	bfi	r1, r2, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801eb06:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801eb0a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 801eb0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb12:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801eb16:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 801eb1a:	b2c9      	uxtb	r1, r1
 801eb1c:	4411      	add	r1, r2
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801eb1e:	f3c1 01c7 	ubfx	r1, r1, #3, #8
 801eb22:	3104      	adds	r1, #4
 801eb24:	08c9      	lsrs	r1, r1, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801eb26:	fb07 f101 	mul.w	r1, r7, r1
 801eb2a:	ea03 1151 	and.w	r1, r3, r1, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801eb2e:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
 801eb32:	f00c 0c1f 	and.w	ip, ip, #31
 801eb36:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
 801eb3a:	f3ce 1e45 	ubfx	lr, lr, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801eb3e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801eb42:	08d2      	lsrs	r2, r2, #3
 801eb44:	eb02 1842 	add.w	r8, r2, r2, lsl #5
 801eb48:	ebc2 08c8 	rsb	r8, r2, r8, lsl #3
 801eb4c:	f108 0807 	add.w	r8, r8, #7
 801eb50:	ea4f 1868 	mov.w	r8, r8, asr #5
 801eb54:	2200      	movs	r2, #0
 801eb56:	f368 4217 	bfi	r2, r8, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801eb5a:	eb0e 18ce 	add.w	r8, lr, lr, lsl #7
 801eb5e:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 801eb62:	f10e 0e03 	add.w	lr, lr, #3
 801eb66:	ea4f 1eae 	mov.w	lr, lr, asr #6
 801eb6a:	f36e 220f 	bfi	r2, lr, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801eb6e:	eb0c 1e4c 	add.w	lr, ip, ip, lsl #5
 801eb72:	ebcc 0cce 	rsb	ip, ip, lr, lsl #3
 801eb76:	f10c 0c07 	add.w	ip, ip, #7
 801eb7a:	ea4f 1c6c 	mov.w	ip, ip, asr #5
 801eb7e:	f36c 0207 	bfi	r2, ip, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801eb82:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801eb86:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801eb8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801eb8e:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 801eb92:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 801eb96:	b2d2      	uxtb	r2, r2
 801eb98:	4462      	add	r2, ip
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801eb9a:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 801eb9e:	3204      	adds	r2, #4
 801eba0:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801eba2:	fb07 f202 	mul.w	r2, r7, r2
 801eba6:	ea03 1252 	and.w	r2, r3, r2, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801ebaa:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
 801ebae:	b292      	uxth	r2, r2
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 801ebb0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801ebb4:	f89d 701e 	ldrb.w	r7, [sp, #30]
 801ebb8:	f007 071f 	and.w	r7, r7, #31
 801ebbc:	f8bd c01e 	ldrh.w	ip, [sp, #30]
 801ebc0:	f3cc 1c45 	ubfx	ip, ip, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801ebc4:	f89d e01f 	ldrb.w	lr, [sp, #31]
 801ebc8:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 801ebcc:	eb0e 184e 	add.w	r8, lr, lr, lsl #5
 801ebd0:	ebce 08c8 	rsb	r8, lr, r8, lsl #3
 801ebd4:	f108 0807 	add.w	r8, r8, #7
 801ebd8:	ea4f 1868 	mov.w	r8, r8, asr #5
 801ebdc:	f04f 0e00 	mov.w	lr, #0
 801ebe0:	f368 4e17 	bfi	lr, r8, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801ebe4:	eb0c 18cc 	add.w	r8, ip, ip, lsl #7
 801ebe8:	eb0c 0c48 	add.w	ip, ip, r8, lsl #1
 801ebec:	f10c 0c03 	add.w	ip, ip, #3
 801ebf0:	ea4f 1cac 	mov.w	ip, ip, asr #6
 801ebf4:	f36c 2e0f 	bfi	lr, ip, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801ebf8:	eb07 1c47 	add.w	ip, r7, r7, lsl #5
 801ebfc:	ebc7 07cc 	rsb	r7, r7, ip, lsl #3
 801ec00:	3707      	adds	r7, #7
 801ec02:	117f      	asrs	r7, r7, #5
 801ec04:	f367 0e07 	bfi	lr, r7, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801ec08:	f04e 4e7f 	orr.w	lr, lr, #4278190080	; 0xff000000
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ec0c:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
 801ec10:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 801ec14:	ea0c 0703 	and.w	r7, ip, r3
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801ec18:	f3ce 4c07 	ubfx	ip, lr, #16, #8
 801ec1c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ec20:	f3ce 2807 	ubfx	r8, lr, #8, #8
 801ec24:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 801ec28:	fa5f fe8e 	uxtb.w	lr, lr
 801ec2c:	44e6      	add	lr, ip
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801ec2e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801ec32:	f10e 0e04 	add.w	lr, lr, #4
 801ec36:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ec3a:	fb07 fe0e 	mul.w	lr, r7, lr
 801ec3e:	ea03 1e5e 	and.w	lr, r3, lr, lsr #5
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801ec42:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 801ec46:	f008 081f 	and.w	r8, r8, #31
 801ec4a:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
 801ec4e:	f3c9 1945 	ubfx	r9, r9, #5, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 801ec52:	f89d c025 	ldrb.w	ip, [sp, #37]	; 0x25
 801ec56:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 801ec5a:	eb0c 1a4c 	add.w	sl, ip, ip, lsl #5
 801ec5e:	ebcc 0aca 	rsb	sl, ip, sl, lsl #3
 801ec62:	f10a 0a07 	add.w	sl, sl, #7
 801ec66:	ea4f 1a6a 	mov.w	sl, sl, asr #5
 801ec6a:	f04f 0c00 	mov.w	ip, #0
 801ec6e:	f36a 4c17 	bfi	ip, sl, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 801ec72:	eb09 1ac9 	add.w	sl, r9, r9, lsl #7
 801ec76:	eb09 094a 	add.w	r9, r9, sl, lsl #1
 801ec7a:	f109 0903 	add.w	r9, r9, #3
 801ec7e:	ea4f 19a9 	mov.w	r9, r9, asr #6
 801ec82:	f369 2c0f 	bfi	ip, r9, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 801ec86:	eb08 1948 	add.w	r9, r8, r8, lsl #5
 801ec8a:	ebc8 08c9 	rsb	r8, r8, r9, lsl #3
 801ec8e:	f108 0807 	add.w	r8, r8, #7
 801ec92:	ea4f 1868 	mov.w	r8, r8, asr #5
 801ec96:	f368 0c07 	bfi	ip, r8, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
 801ec9a:	f04c 4c7f 	orr.w	ip, ip, #4278190080	; 0xff000000
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801ec9e:	f3cc 4807 	ubfx	r8, ip, #16, #8
 801eca2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801eca6:	f3cc 2907 	ubfx	r9, ip, #8, #8
 801ecaa:	eb08 0889 	add.w	r8, r8, r9, lsl #2
 801ecae:	fa5f fc8c 	uxtb.w	ip, ip
 801ecb2:	44c4      	add	ip, r8
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801ecb4:	f3cc 0cc7 	ubfx	ip, ip, #3, #8
 801ecb8:	f10c 0c04 	add.w	ip, ip, #4
 801ecbc:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ecc0:	fb07 fc0c 	mul.w	ip, r7, ip
 801ecc4:	ea03 1c5c 	and.w	ip, r3, ip, lsr #5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801ecc8:	f896 7026 	ldrb.w	r7, [r6, #38]	; 0x26
 801eccc:	3704      	adds	r7, #4
 801ecce:	08ff      	lsrs	r7, r7, #3
    ret.full = (uint16_t)((result >> 16) | result);
 801ecd0:	ea44 4814 	orr.w	r8, r4, r4, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ecd4:	fa1f f488 	uxth.w	r4, r8
 801ecd8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 801ecdc:	401c      	ands	r4, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ecde:	fb07 f404 	mul.w	r4, r7, r4
 801ece2:	ea03 1454 	and.w	r4, r3, r4, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801ece6:	ea44 4414 	orr.w	r4, r4, r4, lsr #16
        rect_dsc.bg_color = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 801ecea:	f8ad 4004 	strh.w	r4, [sp, #4]
 801ecee:	ea40 4410 	orr.w	r4, r0, r0, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ecf2:	b2a0      	uxth	r0, r4
 801ecf4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 801ecf8:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ecfa:	fb07 f000 	mul.w	r0, r7, r0
 801ecfe:	ea03 1050 	and.w	r0, r3, r0, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801ed02:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
        rect_dsc.bg_grad.stops[0].color   = lv_color_mix(rect_dsc.bg_grad.stops[0].color, lv_color_black(), led->bright);
 801ed06:	f8ad 0006 	strh.w	r0, [sp, #6]
 801ed0a:	ea41 4011 	orr.w	r0, r1, r1, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ed0e:	b281      	uxth	r1, r0
 801ed10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ed14:	4019      	ands	r1, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ed16:	fb07 f101 	mul.w	r1, r7, r1
 801ed1a:	ea03 1151 	and.w	r1, r3, r1, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801ed1e:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
        rect_dsc.bg_grad.stops[1].color   = lv_color_mix(rect_dsc.bg_grad.stops[1].color, lv_color_black(), led->bright);
 801ed22:	f8ad 100a 	strh.w	r1, [sp, #10]
 801ed26:	ea4e 4e1e 	orr.w	lr, lr, lr, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ed2a:	fa1f f18e 	uxth.w	r1, lr
 801ed2e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 801ed32:	4019      	ands	r1, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ed34:	fb07 f101 	mul.w	r1, r7, r1
 801ed38:	ea03 1151 	and.w	r1, r3, r1, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801ed3c:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 801ed40:	f8ad 101e 	strh.w	r1, [sp, #30]
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ed44:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 801ed48:	401a      	ands	r2, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ed4a:	fb07 f202 	mul.w	r2, r7, r2
 801ed4e:	ea03 1252 	and.w	r2, r3, r2, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801ed52:	ea42 4212 	orr.w	r2, r2, r2, lsr #16
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 801ed56:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 801ed5a:	f896 2026 	ldrb.w	r2, [r6, #38]	; 0x26
 801ed5e:	ea4c 4c1c 	orr.w	ip, ip, ip, lsr #16
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801ed62:	fa1f f18c 	uxth.w	r1, ip
 801ed66:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 801ed6a:	4019      	ands	r1, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801ed6c:	1d10      	adds	r0, r2, #4
 801ed6e:	08c0      	lsrs	r0, r0, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801ed70:	fb00 f101 	mul.w	r1, r0, r1
 801ed74:	ea03 1351 	and.w	r3, r3, r1, lsr #5
    ret.full = (uint16_t)((result >> 16) | result);
 801ed78:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
 801ed7c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 801ed80:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
 801ed84:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801ed88:	fb02 f303 	mul.w	r3, r2, r3
 801ed8c:	4a1a      	ldr	r2, [pc, #104]	; (801edf8 <lv_led_event+0x484>)
 801ed8e:	fb82 0103 	smull	r0, r1, r2, r3
 801ed92:	17db      	asrs	r3, r3, #31
 801ed94:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
 801ed98:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 801ed9c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 801eda0:	3b50      	subs	r3, #80	; 0x50
 801eda2:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 801eda6:	fb01 f303 	mul.w	r3, r1, r3
 801edaa:	fb82 1203 	smull	r1, r2, r2, r3
 801edae:	17db      	asrs	r3, r3, #31
 801edb0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801edb4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801edb8:	4628      	mov	r0, r5
 801edba:	f7e5 fb99 	bl	80044f0 <lv_event_get_draw_ctx>
 801edbe:	4604      	mov	r4, r0
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801edc0:	4601      	mov	r1, r0
 801edc2:	a80e      	add	r0, sp, #56	; 0x38
 801edc4:	f7e8 ffe7 	bl	8007d96 <lv_obj_draw_dsc_init>
        part_draw_dsc.draw_area = &obj->coords;
 801edc8:	f106 0514 	add.w	r5, r6, #20
 801edcc:	9511      	str	r5, [sp, #68]	; 0x44
        part_draw_dsc.class_p = MY_CLASS;
 801edce:	4b0b      	ldr	r3, [pc, #44]	; (801edfc <lv_led_event+0x488>)
 801edd0:	930f      	str	r3, [sp, #60]	; 0x3c
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 801edd2:	2300      	movs	r3, #0
 801edd4:	9310      	str	r3, [sp, #64]	; 0x40
        part_draw_dsc.rect_dsc = &rect_dsc;
 801edd6:	f8cd d048 	str.w	sp, [sp, #72]	; 0x48
        part_draw_dsc.part = LV_PART_MAIN;
 801edda:	931b      	str	r3, [sp, #108]	; 0x6c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801eddc:	aa0e      	add	r2, sp, #56	; 0x38
 801edde:	211a      	movs	r1, #26
 801ede0:	4630      	mov	r0, r6
 801ede2:	f7e5 faef 	bl	80043c4 <lv_event_send>
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
 801ede6:	462a      	mov	r2, r5
 801ede8:	4669      	mov	r1, sp
 801edea:	4620      	mov	r0, r4
 801edec:	f7f0 fd7a 	bl	800f8e4 <lv_draw_rect>
 801edf0:	e006      	b.n	801ee00 <lv_led_event+0x48c>
 801edf2:	bf00      	nop
 801edf4:	07e0f81f 	.word	0x07e0f81f
 801edf8:	5d9f7391 	.word	0x5d9f7391
 801edfc:	0802dd28 	.word	0x0802dd28
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801ee00:	aa0e      	add	r2, sp, #56	; 0x38
 801ee02:	211b      	movs	r1, #27
 801ee04:	4630      	mov	r0, r6
 801ee06:	f7e5 fadd 	bl	80043c4 <lv_event_send>
 801ee0a:	e5c8      	b.n	801e99e <lv_led_event+0x2a>

0801ee0c <lv_menu_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_menu_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801ee0c:	b508      	push	{r3, lr}
    LV_TRACE_OBJ_CREATE("begin");

    lv_menu_t * menu = (lv_menu_t *)obj;
    lv_ll_t * history_ll = &(menu->history_ll);

    _lv_ll_clear(history_ll);
 801ee0e:	f101 0054 	add.w	r0, r1, #84	; 0x54
 801ee12:	f002 ff41 	bl	8021c98 <_lv_ll_clear>

    LV_TRACE_OBJ_CREATE("finished");
}
 801ee16:	bd08      	pop	{r3, pc}

0801ee18 <lv_menu_section_constructor>:
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
}

static void lv_menu_section_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801ee18:	b510      	push	{r4, lr}
 801ee1a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801ee1c:	2101      	movs	r1, #1
 801ee1e:	4620      	mov	r0, r4
 801ee20:	f7f8 f8fe 	bl	8017020 <lv_obj_set_flex_flow>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801ee24:	2102      	movs	r1, #2
 801ee26:	4620      	mov	r0, r4
 801ee28:	f7e8 f8de 	bl	8006fe8 <lv_obj_clear_flag>
}
 801ee2c:	bd10      	pop	{r4, pc}

0801ee2e <lv_menu_cont_constructor>:
{
 801ee2e:	b510      	push	{r4, lr}
 801ee30:	460c      	mov	r4, r1
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 801ee32:	2100      	movs	r1, #0
 801ee34:	4620      	mov	r0, r4
 801ee36:	f7f8 f8f3 	bl	8017020 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 801ee3a:	2302      	movs	r3, #2
 801ee3c:	461a      	mov	r2, r3
 801ee3e:	2100      	movs	r1, #0
 801ee40:	4620      	mov	r0, r4
 801ee42:	f7f8 f919 	bl	8017078 <lv_obj_set_flex_align>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801ee46:	2102      	movs	r1, #2
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f7e8 f8cd 	bl	8006fe8 <lv_obj_clear_flag>
}
 801ee4e:	bd10      	pop	{r4, pc}

0801ee50 <lv_menu_constructor>:
{
 801ee50:	b570      	push	{r4, r5, r6, lr}
 801ee52:	460c      	mov	r4, r1
    lv_obj_set_layout(obj, LV_LAYOUT_FLEX);
 801ee54:	4b48      	ldr	r3, [pc, #288]	; (801ef78 <lv_menu_constructor+0x128>)
 801ee56:	8819      	ldrh	r1, [r3, #0]
 801ee58:	4620      	mov	r0, r4
 801ee5a:	f7e9 f911 	bl	8008080 <lv_obj_set_layout>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 801ee5e:	2100      	movs	r1, #0
 801ee60:	4620      	mov	r0, r4
 801ee62:	f7f8 f8dd 	bl	8017020 <lv_obj_set_flex_flow>
    menu->mode_header = LV_MENU_HEADER_TOP_FIXED;
 801ee66:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    menu->cur_depth = 0;
 801ee6a:	2500      	movs	r5, #0
 801ee6c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    menu->prev_depth = 0;
 801ee70:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    menu->sidebar_generated = false;
 801ee74:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 801ee78:	f365 0300 	bfi	r3, r5, #0, #1
 801ee7c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    _lv_ll_init(&(menu->history_ll), sizeof(lv_menu_history_t));
 801ee80:	2104      	movs	r1, #4
 801ee82:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801ee86:	f002 fe92 	bl	8021bae <_lv_ll_init>
    menu->storage = lv_obj_create(obj);
 801ee8a:	4620      	mov	r0, r4
 801ee8c:	f7e8 f866 	bl	8006f5c <lv_obj_create>
 801ee90:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_add_flag(menu->storage, LV_OBJ_FLAG_HIDDEN);
 801ee92:	2101      	movs	r1, #1
 801ee94:	f7e8 f86e 	bl	8006f74 <lv_obj_add_flag>
    menu->sidebar = NULL;
 801ee98:	63e5      	str	r5, [r4, #60]	; 0x3c
    menu->sidebar_header = NULL;
 801ee9a:	6465      	str	r5, [r4, #68]	; 0x44
    menu->sidebar_header_back_btn = NULL;
 801ee9c:	64a5      	str	r5, [r4, #72]	; 0x48
    menu->sidebar_header_title = NULL;
 801ee9e:	64e5      	str	r5, [r4, #76]	; 0x4c
    menu->sidebar_page = NULL;
 801eea0:	6425      	str	r5, [r4, #64]	; 0x40
    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 801eea2:	4621      	mov	r1, r4
 801eea4:	4835      	ldr	r0, [pc, #212]	; (801ef7c <lv_menu_constructor+0x12c>)
 801eea6:	f7e8 fb55 	bl	8007554 <lv_obj_class_create_obj>
 801eeaa:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_cont);
 801eeac:	f7e8 fbff 	bl	80076ae <lv_obj_class_init_obj>
    lv_obj_set_height(main_cont, LV_PCT(100));
 801eeb0:	f242 0164 	movw	r1, #8292	; 0x2064
 801eeb4:	4630      	mov	r0, r6
 801eeb6:	f7e9 f892 	bl	8007fde <lv_obj_set_height>
    lv_obj_set_flex_grow(main_cont, 1);
 801eeba:	2101      	movs	r1, #1
 801eebc:	4630      	mov	r0, r6
 801eebe:	f7f8 f8ff 	bl	80170c0 <lv_obj_set_flex_grow>
    lv_obj_set_flex_flow(main_cont, LV_FLEX_FLOW_COLUMN);
 801eec2:	2101      	movs	r1, #1
 801eec4:	4630      	mov	r0, r6
 801eec6:	f7f8 f8ab 	bl	8017020 <lv_obj_set_flex_flow>
    lv_obj_add_flag(main_cont, LV_OBJ_FLAG_EVENT_BUBBLE);
 801eeca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801eece:	4630      	mov	r0, r6
 801eed0:	f7e8 f850 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_clear_flag(main_cont, LV_OBJ_FLAG_CLICKABLE);
 801eed4:	2102      	movs	r1, #2
 801eed6:	4630      	mov	r0, r6
 801eed8:	f7e8 f886 	bl	8006fe8 <lv_obj_clear_flag>
    menu->main = main_cont;
 801eedc:	62a6      	str	r6, [r4, #40]	; 0x28
    lv_obj_t * main_header = lv_obj_class_create_obj(&lv_menu_main_header_cont_class, main_cont);
 801eede:	4631      	mov	r1, r6
 801eee0:	4827      	ldr	r0, [pc, #156]	; (801ef80 <lv_menu_constructor+0x130>)
 801eee2:	f7e8 fb37 	bl	8007554 <lv_obj_class_create_obj>
 801eee6:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_header);
 801eee8:	f7e8 fbe1 	bl	80076ae <lv_obj_class_init_obj>
    lv_obj_set_size(main_header, LV_PCT(100), LV_SIZE_CONTENT);
 801eeec:	f242 72d1 	movw	r2, #10193	; 0x27d1
 801eef0:	f242 0164 	movw	r1, #8292	; 0x2064
 801eef4:	4630      	mov	r0, r6
 801eef6:	f7e9 f889 	bl	800800c <lv_obj_set_size>
    lv_obj_set_flex_flow(main_header, LV_FLEX_FLOW_ROW);
 801eefa:	4629      	mov	r1, r5
 801eefc:	4630      	mov	r0, r6
 801eefe:	f7f8 f88f 	bl	8017020 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(main_header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 801ef02:	2302      	movs	r3, #2
 801ef04:	461a      	mov	r2, r3
 801ef06:	4629      	mov	r1, r5
 801ef08:	4630      	mov	r0, r6
 801ef0a:	f7f8 f8b5 	bl	8017078 <lv_obj_set_flex_align>
    lv_obj_clear_flag(main_header, LV_OBJ_FLAG_CLICKABLE);
 801ef0e:	2102      	movs	r1, #2
 801ef10:	4630      	mov	r0, r6
 801ef12:	f7e8 f869 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_add_flag(main_header, LV_OBJ_FLAG_EVENT_BUBBLE);
 801ef16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801ef1a:	4630      	mov	r0, r6
 801ef1c:	f7e8 f82a 	bl	8006f74 <lv_obj_add_flag>
    menu->main_header = main_header;
 801ef20:	6326      	str	r6, [r4, #48]	; 0x30
    lv_obj_t * main_header_back_btn = lv_btn_create(menu->main_header);
 801ef22:	4630      	mov	r0, r6
 801ef24:	f006 fe0c 	bl	8025b40 <lv_btn_create>
 801ef28:	4606      	mov	r6, r0
    lv_obj_add_event_cb(main_header_back_btn, lv_menu_back_event_cb, LV_EVENT_CLICKED, menu);
 801ef2a:	4623      	mov	r3, r4
 801ef2c:	2207      	movs	r2, #7
 801ef2e:	4915      	ldr	r1, [pc, #84]	; (801ef84 <lv_menu_constructor+0x134>)
 801ef30:	f7e5 fa8a 	bl	8004448 <lv_obj_add_event_cb>
    lv_obj_add_flag(main_header_back_btn, LV_OBJ_FLAG_EVENT_BUBBLE);
 801ef34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801ef38:	4630      	mov	r0, r6
 801ef3a:	f7e8 f81b 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_set_flex_flow(main_header_back_btn, LV_FLEX_FLOW_ROW);
 801ef3e:	4629      	mov	r1, r5
 801ef40:	4630      	mov	r0, r6
 801ef42:	f7f8 f86d 	bl	8017020 <lv_obj_set_flex_flow>
    menu->main_header_back_btn = main_header_back_btn;
 801ef46:	6366      	str	r6, [r4, #52]	; 0x34
    lv_obj_t * main_header_back_icon = lv_img_create(menu->main_header_back_btn);
 801ef48:	4630      	mov	r0, r6
 801ef4a:	f008 fecf 	bl	8027cec <lv_img_create>
    lv_img_set_src(main_header_back_icon, LV_SYMBOL_LEFT);
 801ef4e:	490e      	ldr	r1, [pc, #56]	; (801ef88 <lv_menu_constructor+0x138>)
 801ef50:	f008 fed8 	bl	8027d04 <lv_img_set_src>
    lv_obj_t * main_header_title = lv_label_create(menu->main_header);
 801ef54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ef56:	f009 fb4b 	bl	80285f0 <lv_label_create>
 801ef5a:	4606      	mov	r6, r0
    lv_obj_add_flag(main_header_title, LV_OBJ_FLAG_HIDDEN);
 801ef5c:	2101      	movs	r1, #1
 801ef5e:	f7e8 f809 	bl	8006f74 <lv_obj_add_flag>
    menu->main_header_title = main_header_title;
 801ef62:	63a6      	str	r6, [r4, #56]	; 0x38
    menu->main_page = NULL;
 801ef64:	62e5      	str	r5, [r4, #44]	; 0x2c
    menu->selected_tab = NULL;
 801ef66:	6525      	str	r5, [r4, #80]	; 0x50
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 801ef68:	4623      	mov	r3, r4
 801ef6a:	221c      	movs	r2, #28
 801ef6c:	4907      	ldr	r1, [pc, #28]	; (801ef8c <lv_menu_constructor+0x13c>)
 801ef6e:	4620      	mov	r0, r4
 801ef70:	f7e5 fa6a 	bl	8004448 <lv_obj_add_event_cb>
}
 801ef74:	bd70      	pop	{r4, r5, r6, pc}
 801ef76:	bf00      	nop
 801ef78:	2000271a 	.word	0x2000271a
 801ef7c:	0802ddd0 	.word	0x0802ddd0
 801ef80:	0802ddec 	.word	0x0802ddec
 801ef84:	0801f1d1 	.word	0x0801f1d1
 801ef88:	0802d834 	.word	0x0802d834
 801ef8c:	0801f053 	.word	0x0801f053

0801ef90 <lv_menu_page_destructor>:
    if(page->title != NULL) {
 801ef90:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801ef92:	b130      	cbz	r0, 801efa2 <lv_menu_page_destructor+0x12>
{
 801ef94:	b510      	push	{r4, lr}
 801ef96:	460c      	mov	r4, r1
        lv_mem_free(page->title);
 801ef98:	f002 ffe6 	bl	8021f68 <lv_mem_free>
        page->title = NULL;
 801ef9c:	2300      	movs	r3, #0
 801ef9e:	6263      	str	r3, [r4, #36]	; 0x24
}
 801efa0:	bd10      	pop	{r4, pc}
 801efa2:	4770      	bx	lr

0801efa4 <lv_menu_page_constructor>:
{
 801efa4:	b510      	push	{r4, lr}
 801efa6:	460c      	mov	r4, r1
    lv_menu_t * menu = (lv_menu_t *)lv_obj_get_parent(obj);
 801efa8:	4608      	mov	r0, r1
 801efaa:	f7ec fec1 	bl	800bd30 <lv_obj_get_parent>
    lv_obj_set_parent(obj, ((lv_menu_t *)menu)->storage);
 801efae:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801efb0:	4620      	mov	r0, r4
 801efb2:	f7ec ffbe 	bl	800bf32 <lv_obj_set_parent>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 801efb6:	2101      	movs	r1, #1
 801efb8:	4620      	mov	r0, r4
 801efba:	f7f8 f831 	bl	8017020 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 801efbe:	2302      	movs	r3, #2
 801efc0:	461a      	mov	r2, r3
 801efc2:	2100      	movs	r1, #0
 801efc4:	4620      	mov	r0, r4
 801efc6:	f7f8 f857 	bl	8017078 <lv_obj_set_flex_align>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE);
 801efca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801efce:	4620      	mov	r0, r4
 801efd0:	f7e7 ffd0 	bl	8006f74 <lv_obj_add_flag>
}
 801efd4:	bd10      	pop	{r4, pc}

0801efd6 <lv_menu_refr_main_header_mode>:
        lv_obj_clear_flag(menu->sidebar_header, LV_OBJ_FLAG_HIDDEN);
    }
}

static void lv_menu_refr_main_header_mode(lv_obj_t * obj)
{
 801efd6:	b510      	push	{r4, lr}
 801efd8:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_menu_t * menu = (lv_menu_t *)obj;

    if(menu->main_header == NULL || menu->main_page == NULL) return;
 801efda:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801efdc:	b1d8      	cbz	r0, 801f016 <lv_menu_refr_main_header_mode+0x40>
 801efde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801efe0:	b1cb      	cbz	r3, 801f016 <lv_menu_refr_main_header_mode+0x40>

    switch(menu->mode_header) {
 801efe2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 801efe6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801efea:	2b01      	cmp	r3, #1
 801efec:	d01c      	beq.n	801f028 <lv_menu_refr_main_header_mode+0x52>
 801efee:	2b02      	cmp	r3, #2
 801eff0:	d022      	beq.n	801f038 <lv_menu_refr_main_header_mode+0x62>
 801eff2:	b18b      	cbz	r3, 801f018 <lv_menu_refr_main_header_mode+0x42>
            lv_obj_move_to_index(menu->main_header, 1);
            lv_obj_set_flex_grow(menu->main_page, 1);
            break;
    }

    lv_obj_refr_size(menu->main_header);
 801eff4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801eff6:	f7e9 fe37 	bl	8008c68 <lv_obj_refr_size>
    lv_obj_refr_size(menu->main_page);
 801effa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801effc:	f7e9 fe34 	bl	8008c68 <lv_obj_refr_size>
    lv_obj_update_layout(menu->main_header);
 801f000:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f002:	f7ea f9cf 	bl	80093a4 <lv_obj_update_layout>

    if(lv_obj_get_content_height(menu->main_header) == 0) {
 801f006:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f008:	f7e9 f8fa 	bl	8008200 <lv_obj_get_content_height>
 801f00c:	b9e0      	cbnz	r0, 801f048 <lv_menu_refr_main_header_mode+0x72>
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 801f00e:	2101      	movs	r1, #1
 801f010:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f012:	f7e7 ffaf 	bl	8006f74 <lv_obj_add_flag>
    }
    else {
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
    }
}
 801f016:	bd10      	pop	{r4, pc}
            lv_obj_move_to_index(menu->main_header, 0);
 801f018:	2100      	movs	r1, #0
 801f01a:	f7ec ffff 	bl	800c01c <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 801f01e:	2101      	movs	r1, #1
 801f020:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f022:	f7f8 f84d 	bl	80170c0 <lv_obj_set_flex_grow>
            break;
 801f026:	e7e5      	b.n	801eff4 <lv_menu_refr_main_header_mode+0x1e>
            lv_obj_move_to_index(menu->main_header, 0);
 801f028:	2100      	movs	r1, #0
 801f02a:	f7ec fff7 	bl	800c01c <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 0);
 801f02e:	2100      	movs	r1, #0
 801f030:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f032:	f7f8 f845 	bl	80170c0 <lv_obj_set_flex_grow>
            break;
 801f036:	e7dd      	b.n	801eff4 <lv_menu_refr_main_header_mode+0x1e>
            lv_obj_move_to_index(menu->main_header, 1);
 801f038:	2101      	movs	r1, #1
 801f03a:	f7ec ffef 	bl	800c01c <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 801f03e:	2101      	movs	r1, #1
 801f040:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f042:	f7f8 f83d 	bl	80170c0 <lv_obj_set_flex_grow>
            break;
 801f046:	e7d5      	b.n	801eff4 <lv_menu_refr_main_header_mode+0x1e>
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 801f048:	2101      	movs	r1, #1
 801f04a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f04c:	f7e7 ffcc 	bl	8006fe8 <lv_obj_clear_flag>
 801f050:	e7e1      	b.n	801f016 <lv_menu_refr_main_header_mode+0x40>

0801f052 <lv_menu_value_changed_event_cb>:
        }
    }
}

static void lv_menu_value_changed_event_cb(lv_event_t * e)
{
 801f052:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_event_get_user_data(e);
 801f054:	f7e5 f9e2 	bl	800441c <lv_event_get_user_data>
 801f058:	4604      	mov	r4, r0
    return menu->main_page;
 801f05a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    lv_menu_t * menu = (lv_menu_t *)obj;

    lv_menu_page_t * main_page = (lv_menu_page_t *)lv_menu_get_cur_main_page(obj);
    if(main_page != NULL && menu->main_header_title != NULL) {
 801f05c:	b14b      	cbz	r3, 801f072 <lv_menu_value_changed_event_cb+0x20>
 801f05e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f060:	b138      	cbz	r0, 801f072 <lv_menu_value_changed_event_cb+0x20>
        if(main_page->title != NULL) {
 801f062:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801f064:	b191      	cbz	r1, 801f08c <lv_menu_value_changed_event_cb+0x3a>
            lv_label_set_text(menu->main_header_title, main_page->title);
 801f066:	f009 ff9f 	bl	8028fa8 <lv_label_set_text>
            lv_obj_clear_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 801f06a:	2101      	movs	r1, #1
 801f06c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801f06e:	f7e7 ffbb 	bl	8006fe8 <lv_obj_clear_flag>
    return menu->sidebar_page;
 801f072:	6c23      	ldr	r3, [r4, #64]	; 0x40
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }

    lv_menu_page_t * sidebar_page = (lv_menu_page_t *)lv_menu_get_cur_sidebar_page(obj);
    if(sidebar_page != NULL && menu->sidebar_header_title != NULL) {
 801f074:	b14b      	cbz	r3, 801f08a <lv_menu_value_changed_event_cb+0x38>
 801f076:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801f078:	b138      	cbz	r0, 801f08a <lv_menu_value_changed_event_cb+0x38>
        if(sidebar_page->title != NULL) {
 801f07a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801f07c:	b151      	cbz	r1, 801f094 <lv_menu_value_changed_event_cb+0x42>
            lv_label_set_text(menu->sidebar_header_title, sidebar_page->title);
 801f07e:	f009 ff93 	bl	8028fa8 <lv_label_set_text>
            lv_obj_clear_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 801f082:	2101      	movs	r1, #1
 801f084:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801f086:	f7e7 ffaf 	bl	8006fe8 <lv_obj_clear_flag>
        }
        else {
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }
}
 801f08a:	bd10      	pop	{r4, pc}
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 801f08c:	2101      	movs	r1, #1
 801f08e:	f7e7 ff71 	bl	8006f74 <lv_obj_add_flag>
 801f092:	e7ee      	b.n	801f072 <lv_menu_value_changed_event_cb+0x20>
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 801f094:	2101      	movs	r1, #1
 801f096:	f7e7 ff6d 	bl	8006f74 <lv_obj_add_flag>
}
 801f09a:	e7f6      	b.n	801f08a <lv_menu_value_changed_event_cb+0x38>

0801f09c <lv_menu_back_btn_is_root>:
    if(obj == ((lv_menu_t *)menu)->sidebar_header_back_btn) {
 801f09c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801f09e:	428b      	cmp	r3, r1
 801f0a0:	d00b      	beq.n	801f0ba <lv_menu_back_btn_is_root+0x1e>
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 801f0a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801f0a4:	428b      	cmp	r3, r1
 801f0a6:	d001      	beq.n	801f0ac <lv_menu_back_btn_is_root+0x10>
    return false;
 801f0a8:	2000      	movs	r0, #0
}
 801f0aa:	4770      	bx	lr
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 801f0ac:	f890 0061 	ldrb.w	r0, [r0, #97]	; 0x61
 801f0b0:	2801      	cmp	r0, #1
 801f0b2:	bf8c      	ite	hi
 801f0b4:	2000      	movhi	r0, #0
 801f0b6:	2001      	movls	r0, #1
 801f0b8:	4770      	bx	lr
        return true;
 801f0ba:	2001      	movs	r0, #1
 801f0bc:	4770      	bx	lr

0801f0be <lv_menu_clear_history>:
{
 801f0be:	b510      	push	{r4, lr}
 801f0c0:	4604      	mov	r4, r0
    _lv_ll_clear(history_ll);
 801f0c2:	3054      	adds	r0, #84	; 0x54
 801f0c4:	f002 fde8 	bl	8021c98 <_lv_ll_clear>
    menu->cur_depth = 0;
 801f0c8:	2300      	movs	r3, #0
 801f0ca:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
}
 801f0ce:	bd10      	pop	{r4, pc}

0801f0d0 <lv_menu_set_page>:
{
 801f0d0:	b538      	push	{r3, r4, r5, lr}
 801f0d2:	4604      	mov	r4, r0
 801f0d4:	460d      	mov	r5, r1
    if(menu->main_page != NULL) {
 801f0d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f0d8:	b110      	cbz	r0, 801f0e0 <lv_menu_set_page+0x10>
        lv_obj_set_parent(menu->main_page, menu->storage);
 801f0da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f0dc:	f7ec ff29 	bl	800bf32 <lv_obj_set_parent>
    if(page != NULL) {
 801f0e0:	2d00      	cmp	r5, #0
 801f0e2:	d040      	beq.n	801f166 <lv_menu_set_page+0x96>
        lv_menu_history_t * new_node = _lv_ll_ins_head(history_ll);
 801f0e4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801f0e8:	f002 fd69 	bl	8021bbe <_lv_ll_ins_head>
        LV_ASSERT_MALLOC(new_node);
 801f0ec:	2800      	cmp	r0, #0
 801f0ee:	d039      	beq.n	801f164 <lv_menu_set_page+0x94>
        new_node->page = page;
 801f0f0:	6005      	str	r5, [r0, #0]
        menu->cur_depth++;
 801f0f2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801f0f6:	3301      	adds	r3, #1
 801f0f8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        lv_obj_set_parent(page, menu->main);
 801f0fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801f0fe:	4628      	mov	r0, r5
 801f100:	f7ec ff17 	bl	800bf32 <lv_obj_set_parent>
    menu->main_page = page;
 801f104:	62e5      	str	r5, [r4, #44]	; 0x2c
    if(menu->selected_tab != NULL) {
 801f106:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f108:	b120      	cbz	r0, 801f114 <lv_menu_set_page+0x44>
        if(menu->sidebar_page != NULL) {
 801f10a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f10c:	b37b      	cbz	r3, 801f16e <lv_menu_set_page+0x9e>
            lv_obj_add_state(menu->selected_tab, LV_STATE_CHECKED);
 801f10e:	2101      	movs	r1, #1
 801f110:	f7e7 ffa9 	bl	8007066 <lv_obj_add_state>
    if(menu->sidebar_page != NULL) {
 801f114:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f116:	2b00      	cmp	r3, #0
 801f118:	d03f      	beq.n	801f19a <lv_menu_set_page+0xca>
        if(menu->sidebar_generated) {
 801f11a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 801f11e:	f013 0f01 	tst.w	r3, #1
 801f122:	d00a      	beq.n	801f13a <lv_menu_set_page+0x6a>
            if(menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 801f124:	f013 0f08 	tst.w	r3, #8
 801f128:	d025      	beq.n	801f176 <lv_menu_set_page+0xa6>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801f12a:	2101      	movs	r1, #1
 801f12c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801f12e:	f7e7 ff5b 	bl	8006fe8 <lv_obj_clear_flag>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801f132:	2102      	movs	r1, #2
 801f134:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801f136:	f7e7 ff1d 	bl	8006f74 <lv_obj_add_flag>
        if(menu->cur_depth >= 2) {
 801f13a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801f13e:	2b01      	cmp	r3, #1
 801f140:	d922      	bls.n	801f188 <lv_menu_set_page+0xb8>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801f142:	2101      	movs	r1, #1
 801f144:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f146:	f7e7 ff4f 	bl	8006fe8 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801f14a:	2102      	movs	r1, #2
 801f14c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f14e:	f7e7 ff11 	bl	8006f74 <lv_obj_add_flag>
    lv_event_send((lv_obj_t *)menu, LV_EVENT_VALUE_CHANGED, NULL);
 801f152:	2200      	movs	r2, #0
 801f154:	211c      	movs	r1, #28
 801f156:	4620      	mov	r0, r4
 801f158:	f7e5 f934 	bl	80043c4 <lv_event_send>
    lv_menu_refr_main_header_mode(obj);
 801f15c:	4620      	mov	r0, r4
 801f15e:	f7ff ff3a 	bl	801efd6 <lv_menu_refr_main_header_mode>
}
 801f162:	bd38      	pop	{r3, r4, r5, pc}
        LV_ASSERT_MALLOC(new_node);
 801f164:	e7fe      	b.n	801f164 <lv_menu_set_page+0x94>
        lv_menu_clear_history(obj);
 801f166:	4620      	mov	r0, r4
 801f168:	f7ff ffa9 	bl	801f0be <lv_menu_clear_history>
 801f16c:	e7ca      	b.n	801f104 <lv_menu_set_page+0x34>
            lv_obj_clear_state(menu->selected_tab, LV_STATE_CHECKED);
 801f16e:	2101      	movs	r1, #1
 801f170:	f7e7 ff85 	bl	800707e <lv_obj_clear_state>
 801f174:	e7ce      	b.n	801f114 <lv_menu_set_page+0x44>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801f176:	2101      	movs	r1, #1
 801f178:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801f17a:	f7e7 fefb 	bl	8006f74 <lv_obj_add_flag>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801f17e:	2102      	movs	r1, #2
 801f180:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801f182:	f7e7 ff31 	bl	8006fe8 <lv_obj_clear_flag>
 801f186:	e7d8      	b.n	801f13a <lv_menu_set_page+0x6a>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801f188:	2101      	movs	r1, #1
 801f18a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f18c:	f7e7 fef2 	bl	8006f74 <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801f190:	2102      	movs	r1, #2
 801f192:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f194:	f7e7 ff28 	bl	8006fe8 <lv_obj_clear_flag>
 801f198:	e7db      	b.n	801f152 <lv_menu_set_page+0x82>
        if(menu->cur_depth >= 2 || menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 801f19a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801f19e:	2b01      	cmp	r3, #1
 801f1a0:	d804      	bhi.n	801f1ac <lv_menu_set_page+0xdc>
 801f1a2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 801f1a6:	f013 0f08 	tst.w	r3, #8
 801f1aa:	d008      	beq.n	801f1be <lv_menu_set_page+0xee>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801f1ac:	2101      	movs	r1, #1
 801f1ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f1b0:	f7e7 ff1a 	bl	8006fe8 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801f1b4:	2102      	movs	r1, #2
 801f1b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f1b8:	f7e7 fedc 	bl	8006f74 <lv_obj_add_flag>
 801f1bc:	e7c9      	b.n	801f152 <lv_menu_set_page+0x82>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 801f1be:	2101      	movs	r1, #1
 801f1c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f1c2:	f7e7 fed7 	bl	8006f74 <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801f1c6:	2102      	movs	r1, #2
 801f1c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f1ca:	f7e7 ff0d 	bl	8006fe8 <lv_obj_clear_flag>
 801f1ce:	e7c0      	b.n	801f152 <lv_menu_set_page+0x82>

0801f1d0 <lv_menu_back_event_cb>:
{
 801f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1d2:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 801f1d4:	f7e5 f91c 	bl	8004410 <lv_event_get_code>
    if(code == LV_EVENT_CLICKED) {
 801f1d8:	2807      	cmp	r0, #7
 801f1da:	d000      	beq.n	801f1de <lv_menu_back_event_cb+0xe>
}
 801f1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * obj = lv_event_get_target(e);
 801f1de:	4620      	mov	r0, r4
 801f1e0:	f7e5 f912 	bl	8004408 <lv_event_get_target>
 801f1e4:	4605      	mov	r5, r0
        lv_menu_t * menu = (lv_menu_t *)lv_event_get_user_data(e);
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f7e5 f918 	bl	800441c <lv_event_get_user_data>
 801f1ec:	4604      	mov	r4, r0
        if(!(obj == menu->main_header_back_btn || obj == menu->sidebar_header_back_btn)) return;
 801f1ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801f1f0:	42ab      	cmp	r3, r5
 801f1f2:	d002      	beq.n	801f1fa <lv_menu_back_event_cb+0x2a>
 801f1f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801f1f6:	42ab      	cmp	r3, r5
 801f1f8:	d1f0      	bne.n	801f1dc <lv_menu_back_event_cb+0xc>
        menu->prev_depth = menu->cur_depth; /* Save the previous value for user event handler */
 801f1fa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801f1fe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
        if(lv_menu_back_btn_is_root((lv_obj_t *)menu, obj)) return;
 801f202:	4629      	mov	r1, r5
 801f204:	4620      	mov	r0, r4
 801f206:	f7ff ff49 	bl	801f09c <lv_menu_back_btn_is_root>
 801f20a:	2800      	cmp	r0, #0
 801f20c:	d1e6      	bne.n	801f1dc <lv_menu_back_event_cb+0xc>
        lv_ll_t * history_ll = &(menu->history_ll);
 801f20e:	f104 0654 	add.w	r6, r4, #84	; 0x54
        lv_menu_history_t * act_hist = _lv_ll_get_head(history_ll);
 801f212:	4630      	mov	r0, r6
 801f214:	f002 fd54 	bl	8021cc0 <_lv_ll_get_head>
 801f218:	4605      	mov	r5, r0
        lv_menu_history_t * prev_hist = _lv_ll_get_next(history_ll, act_hist);
 801f21a:	4601      	mov	r1, r0
 801f21c:	4630      	mov	r0, r6
 801f21e:	f002 fd57 	bl	8021cd0 <_lv_ll_get_next>
        if(prev_hist != NULL) {
 801f222:	4607      	mov	r7, r0
 801f224:	2800      	cmp	r0, #0
 801f226:	d0d9      	beq.n	801f1dc <lv_menu_back_event_cb+0xc>
            _lv_ll_remove(history_ll, act_hist);
 801f228:	4629      	mov	r1, r5
 801f22a:	4630      	mov	r0, r6
 801f22c:	f002 fd05 	bl	8021c3a <_lv_ll_remove>
            lv_mem_free(act_hist);
 801f230:	4628      	mov	r0, r5
 801f232:	f002 fe99 	bl	8021f68 <lv_mem_free>
            menu->cur_depth--;
 801f236:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801f23a:	3b01      	subs	r3, #1
 801f23c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            _lv_ll_remove(history_ll, prev_hist);
 801f240:	4639      	mov	r1, r7
 801f242:	4630      	mov	r0, r6
 801f244:	f002 fcf9 	bl	8021c3a <_lv_ll_remove>
            menu->cur_depth--;
 801f248:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801f24c:	3b01      	subs	r3, #1
 801f24e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            lv_menu_set_page(&(menu->obj), prev_hist->page);
 801f252:	6839      	ldr	r1, [r7, #0]
 801f254:	4620      	mov	r0, r4
 801f256:	f7ff ff3b 	bl	801f0d0 <lv_menu_set_page>
            lv_mem_free(prev_hist);
 801f25a:	4638      	mov	r0, r7
 801f25c:	f002 fe84 	bl	8021f68 <lv_mem_free>
 801f260:	e7bc      	b.n	801f1dc <lv_menu_back_event_cb+0xc>
	...

0801f264 <lv_meter_event>:
    _lv_ll_clear(&meter->scale_ll);

}

static void lv_meter_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 801f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f268:	b0db      	sub	sp, #364	; 0x16c
 801f26a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 801f26c:	48ae      	ldr	r0, [pc, #696]	; (801f528 <lv_meter_event+0x2c4>)
 801f26e:	f7e4 ffac 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801f272:	2801      	cmp	r0, #1
 801f274:	d002      	beq.n	801f27c <lv_meter_event+0x18>
        nm_cord.y1 = scale_center.y - h;
        nm_cord.x2 = scale_center.x + w;
        nm_cord.y2 = scale_center.y + h;
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
    }
}
 801f276:	b05b      	add	sp, #364	; 0x16c
 801f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801f27c:	4620      	mov	r0, r4
 801f27e:	f7e5 f8c7 	bl	8004410 <lv_event_get_code>
 801f282:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801f284:	4620      	mov	r0, r4
 801f286:	f7e5 f8bf 	bl	8004408 <lv_event_get_target>
 801f28a:	9008      	str	r0, [sp, #32]
    if(code == LV_EVENT_DRAW_MAIN) {
 801f28c:	2d15      	cmp	r5, #21
 801f28e:	d1f2      	bne.n	801f276 <lv_meter_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801f290:	4620      	mov	r0, r4
 801f292:	f7e5 f92d 	bl	80044f0 <lv_event_get_draw_ctx>
 801f296:	4606      	mov	r6, r0
 801f298:	900a      	str	r0, [sp, #40]	; 0x28
        lv_obj_get_content_coords(obj, &scale_area);
 801f29a:	a915      	add	r1, sp, #84	; 0x54
 801f29c:	9f08      	ldr	r7, [sp, #32]
 801f29e:	4638      	mov	r0, r7
 801f2a0:	f7e8 ffcb 	bl	800823a <lv_obj_get_content_coords>
static void draw_arcs(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 801f2a4:	ac40      	add	r4, sp, #256	; 0x100
 801f2a6:	4620      	mov	r0, r4
 801f2a8:	f7ee f89e 	bl	800d3e8 <lv_draw_arc_dsc_init>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 801f2ac:	2251      	movs	r2, #81	; 0x51
 801f2ae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f2b2:	4638      	mov	r0, r7
 801f2b4:	f7eb fdfa 	bl	800aeac <lv_obj_get_style_prop>
    return (bool)v.num;
 801f2b8:	1e03      	subs	r3, r0, #0
 801f2ba:	bf18      	it	ne
 801f2bc:	2301      	movne	r3, #1
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 801f2be:	f89d 210d 	ldrb.w	r2, [sp, #269]	; 0x10d
 801f2c2:	f363 0282 	bfi	r2, r3, #2, #1
 801f2c6:	f88d 210d 	strb.w	r2, [sp, #269]	; 0x10d
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f2ca:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801f2ce:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801f2d2:	3301      	adds	r3, #1
 801f2d4:	1a9b      	subs	r3, r3, r2

    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 801f2d6:	b219      	sxth	r1, r3
 801f2d8:	f3c3 38c0 	ubfx	r8, r3, #15, #1
 801f2dc:	4488      	add	r8, r1
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_out;
 801f2de:	f3c8 084f 	ubfx	r8, r8, #1, #16
 801f2e2:	4442      	add	r2, r8
 801f2e4:	f8ad 20e0 	strh.w	r2, [sp, #224]	; 0xe0
    scale_center.y = scale_area->y1 + r_out;
 801f2e8:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801f2ec:	4443      	add	r3, r8
 801f2ee:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801f2f2:	2260      	movs	r2, #96	; 0x60
 801f2f4:	2100      	movs	r1, #0
 801f2f6:	4638      	mov	r0, r7
 801f2f8:	f7eb fdd8 	bl	800aeac <lv_obj_get_style_prop>
 801f2fc:	4682      	mov	sl, r0

    lv_opa_t opa_main = lv_obj_get_style_opa(obj, LV_PART_MAIN);
    lv_meter_indicator_t * indic;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801f2fe:	4631      	mov	r1, r6
 801f300:	a848      	add	r0, sp, #288	; 0x120
 801f302:	f7e8 fd48 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.arc_dsc = &arc_dsc;
 801f306:	9450      	str	r4, [sp, #320]	; 0x140
    part_draw_dsc.part = LV_PART_INDICATOR;
 801f308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801f30c:	9355      	str	r3, [sp, #340]	; 0x154
    part_draw_dsc.class_p = MY_CLASS;
 801f30e:	4b86      	ldr	r3, [pc, #536]	; (801f528 <lv_meter_event+0x2c4>)
 801f310:	9349      	str	r3, [sp, #292]	; 0x124
    part_draw_dsc.type = LV_METER_DRAW_PART_ARC;
 801f312:	2300      	movs	r3, #0
 801f314:	934a      	str	r3, [sp, #296]	; 0x128

    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f316:	f107 0b30 	add.w	fp, r7, #48	; 0x30
 801f31a:	4658      	mov	r0, fp
 801f31c:	f002 fcd4 	bl	8021cc8 <_lv_ll_get_tail>
 801f320:	4604      	mov	r4, r0
 801f322:	2800      	cmp	r0, #0
 801f324:	d055      	beq.n	801f3d2 <lv_meter_event+0x16e>
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
                                   scale->rotation + scale->angle_range);

        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
        part_draw_dsc.sub_part_ptr = indic;
        part_draw_dsc.p1 = &scale_center;
 801f326:	ad38      	add	r5, sp, #224	; 0xe0

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f328:	f04f 091a 	mov.w	r9, #26
 801f32c:	f8cd a018 	str.w	sl, [sp, #24]
 801f330:	46b2      	mov	sl, r6
 801f332:	e04a      	b.n	801f3ca <lv_meter_event+0x166>
        arc_dsc.color = indic->type_data.arc.color;
 801f334:	8b23      	ldrh	r3, [r4, #24]
 801f336:	f8ad 3100 	strh.w	r3, [sp, #256]	; 0x100
        arc_dsc.width = indic->type_data.arc.width;
 801f33a:	8a23      	ldrh	r3, [r4, #16]
 801f33c:	f8ad 3102 	strh.w	r3, [sp, #258]	; 0x102
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801f340:	7962      	ldrb	r2, [r4, #5]
 801f342:	2afd      	cmp	r2, #253	; 0xfd
 801f344:	bf9d      	ittte	ls
 801f346:	f89d 3018 	ldrbls.w	r3, [sp, #24]
 801f34a:	4353      	mulls	r3, r2
 801f34c:	121b      	asrls	r3, r3, #8
 801f34e:	9b06      	ldrhi	r3, [sp, #24]
 801f350:	f88d 310c 	strb.w	r3, [sp, #268]	; 0x10c
        lv_meter_scale_t * scale = indic->scale;
 801f354:	6826      	ldr	r6, [r4, #0]
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 801f356:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 801f35a:	69b2      	ldr	r2, [r6, #24]
 801f35c:	6971      	ldr	r1, [r6, #20]
 801f35e:	68a0      	ldr	r0, [r4, #8]
                                     scale->rotation + scale->angle_range);
 801f360:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 801f364:	449c      	add	ip, r3
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 801f366:	f8cd c000 	str.w	ip, [sp]
 801f36a:	f002 fdaf 	bl	8021ecc <lv_map>
 801f36e:	9005      	str	r0, [sp, #20]
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 801f370:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
 801f374:	69b2      	ldr	r2, [r6, #24]
 801f376:	6971      	ldr	r1, [r6, #20]
 801f378:	68e0      	ldr	r0, [r4, #12]
                                   scale->rotation + scale->angle_range);
 801f37a:	8bf6      	ldrh	r6, [r6, #30]
 801f37c:	441e      	add	r6, r3
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 801f37e:	9600      	str	r6, [sp, #0]
 801f380:	f002 fda4 	bl	8021ecc <lv_map>
 801f384:	4606      	mov	r6, r0
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 801f386:	8b63      	ldrh	r3, [r4, #26]
 801f388:	4443      	add	r3, r8
 801f38a:	f8ad 315c 	strh.w	r3, [sp, #348]	; 0x15c
        part_draw_dsc.sub_part_ptr = indic;
 801f38e:	9459      	str	r4, [sp, #356]	; 0x164
        part_draw_dsc.p1 = &scale_center;
 801f390:	9551      	str	r5, [sp, #324]	; 0x144
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f392:	aa48      	add	r2, sp, #288	; 0x120
 801f394:	4649      	mov	r1, r9
 801f396:	4638      	mov	r0, r7
 801f398:	f7e5 f814 	bl	80043c4 <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &scale_center, part_draw_dsc.radius, start_angle, end_angle);
 801f39c:	b2b6      	uxth	r6, r6
 801f39e:	9601      	str	r6, [sp, #4]
 801f3a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801f3a4:	9300      	str	r3, [sp, #0]
 801f3a6:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 801f3aa:	462a      	mov	r2, r5
 801f3ac:	a940      	add	r1, sp, #256	; 0x100
 801f3ae:	4650      	mov	r0, sl
 801f3b0:	f7ee f831 	bl	800d416 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801f3b4:	aa48      	add	r2, sp, #288	; 0x120
 801f3b6:	211b      	movs	r1, #27
 801f3b8:	4638      	mov	r0, r7
 801f3ba:	f7e5 f803 	bl	80043c4 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f3be:	4621      	mov	r1, r4
 801f3c0:	4658      	mov	r0, fp
 801f3c2:	f002 fc89 	bl	8021cd8 <_lv_ll_get_prev>
 801f3c6:	4604      	mov	r4, r0
 801f3c8:	b118      	cbz	r0, 801f3d2 <lv_meter_event+0x16e>
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 801f3ca:	7923      	ldrb	r3, [r4, #4]
 801f3cc:	2b03      	cmp	r3, #3
 801f3ce:	d0b1      	beq.n	801f334 <lv_meter_event+0xd0>
 801f3d0:	e7f5      	b.n	801f3be <lv_meter_event+0x15a>
 801f3d2:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801f3d6:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f3da:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801f3de:	3301      	adds	r3, #1
 801f3e0:	1a5b      	subs	r3, r3, r1
static void draw_ticks_and_labels(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter    = (lv_meter_t *)obj;

    lv_point_t p_center;
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 801f3e2:	b218      	sxth	r0, r3
 801f3e4:	f3c3 34c0 	ubfx	r4, r3, #15, #1
 801f3e8:	4404      	add	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801f3ea:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 801f3ee:	3301      	adds	r3, #1
 801f3f0:	1a9b      	subs	r3, r3, r2
 801f3f2:	b218      	sxth	r0, r3
 801f3f4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801f3f8:	4403      	add	r3, r0
 801f3fa:	1064      	asrs	r4, r4, #1
 801f3fc:	105b      	asrs	r3, r3, #1
 801f3fe:	429c      	cmp	r4, r3
 801f400:	bfa8      	it	ge
 801f402:	461c      	movge	r4, r3
    p_center.x = scale_area->x1 + r_edge;
 801f404:	b2a3      	uxth	r3, r4
 801f406:	930c      	str	r3, [sp, #48]	; 0x30
 801f408:	4419      	add	r1, r3
 801f40a:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
    p_center.y = scale_area->y1 + r_edge;
 801f40e:	441a      	add	r2, r3
 801f410:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 801f414:	ad1f      	add	r5, sp, #124	; 0x7c
 801f416:	4628      	mov	r0, r5
 801f418:	f7ee ffb5 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 801f41c:	462a      	mov	r2, r5
 801f41e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801f422:	9e08      	ldr	r6, [sp, #32]
 801f424:	4630      	mov	r0, r6
 801f426:	f7e8 fb9f 	bl	8007b68 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 801f42a:	f89d 3085 	ldrb.w	r3, [sp, #133]	; 0x85
 801f42e:	f043 0310 	orr.w	r3, r3, #16
 801f432:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 801f436:	a838      	add	r0, sp, #224	; 0xe0
 801f438:	f7ee fc3c 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 801f43c:	aa38      	add	r2, sp, #224	; 0xe0
 801f43e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801f442:	4630      	mov	r0, r6
 801f444:	f7e8 fae1 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801f448:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f44a:	a848      	add	r0, sp, #288	; 0x120
 801f44c:	f7e8 fca3 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801f450:	4b35      	ldr	r3, [pc, #212]	; (801f528 <lv_meter_event+0x2c4>)
 801f452:	9349      	str	r3, [sp, #292]	; 0x124
    part_draw_dsc.part = LV_PART_TICKS;
 801f454:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 801f458:	9355      	str	r3, [sp, #340]	; 0x154
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
 801f45a:	2303      	movs	r3, #3
 801f45c:	934a      	str	r3, [sp, #296]	; 0x128
    part_draw_dsc.line_dsc = &line_dsc;
 801f45e:	954e      	str	r5, [sp, #312]	; 0x138

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801f460:	f106 0324 	add.w	r3, r6, #36	; 0x24
 801f464:	930f      	str	r3, [sp, #60]	; 0x3c
 801f466:	4618      	mov	r0, r3
 801f468:	f002 fc2e 	bl	8021cc8 <_lv_ll_get_tail>
 801f46c:	2800      	cmp	r0, #0
 801f46e:	f000 81bd 	beq.w	801f7ec <lv_meter_event+0x588>
            line_dsc.width = line_width;

            /*Draw a little bit longer lines to be sure the mask will clip them correctly
             *and to get a better precision*/
            lv_point_t p_outer;
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 801f472:	2c82      	cmp	r4, #130	; 0x82
 801f474:	bfb8      	it	lt
 801f476:	2482      	movlt	r4, #130	; 0x82
 801f478:	940d      	str	r4, [sp, #52]	; 0x34
 801f47a:	46d9      	mov	r9, fp
 801f47c:	4683      	mov	fp, r0
 801f47e:	e14d      	b.n	801f71c <lv_meter_event+0x4b8>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 801f480:	f64f 7aff 	movw	sl, #65535	; 0xffff
        for(i = 0; i < scale->tick_cnt; i++) {
 801f484:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801f488:	2a00      	cmp	r2, #0
 801f48a:	f000 8134 	beq.w	801f6f6 <lv_meter_event+0x492>
 801f48e:	2300      	movs	r3, #0
 801f490:	9305      	str	r3, [sp, #20]
 801f492:	e108      	b.n	801f6a6 <lv_meter_event+0x442>
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f494:	4621      	mov	r1, r4
 801f496:	4648      	mov	r0, r9
 801f498:	f002 fc1e 	bl	8021cd8 <_lv_ll_get_prev>
 801f49c:	4604      	mov	r4, r0
 801f49e:	2800      	cmp	r0, #0
 801f4a0:	d046      	beq.n	801f530 <lv_meter_event+0x2cc>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 801f4a2:	7923      	ldrb	r3, [r4, #4]
 801f4a4:	2b02      	cmp	r3, #2
 801f4a6:	d1f5      	bne.n	801f494 <lv_meter_event+0x230>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 801f4a8:	68a1      	ldr	r1, [r4, #8]
 801f4aa:	42b1      	cmp	r1, r6
 801f4ac:	dcf2      	bgt.n	801f494 <lv_meter_event+0x230>
 801f4ae:	68e2      	ldr	r2, [r4, #12]
 801f4b0:	42b2      	cmp	r2, r6
 801f4b2:	dbef      	blt.n	801f494 <lv_meter_event+0x230>
                    line_width += indic->type_data.scale_lines.width_mod;
 801f4b4:	8a23      	ldrh	r3, [r4, #16]
 801f4b6:	441f      	add	r7, r3
 801f4b8:	b23f      	sxth	r7, r7
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 801f4ba:	8aa5      	ldrh	r5, [r4, #20]
 801f4bc:	8a63      	ldrh	r3, [r4, #18]
 801f4be:	42ab      	cmp	r3, r5
 801f4c0:	d0e8      	beq.n	801f494 <lv_meter_event+0x230>
                        if(indic->type_data.scale_lines.local_grad) {
 801f4c2:	7da3      	ldrb	r3, [r4, #22]
 801f4c4:	f013 0f01 	tst.w	r3, #1
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 801f4c8:	bf04      	itt	eq
 801f4ca:	f8db 2018 	ldreq.w	r2, [fp, #24]
 801f4ce:	f8db 1014 	ldreq.w	r1, [fp, #20]
 801f4d2:	23ff      	movs	r3, #255	; 0xff
 801f4d4:	9300      	str	r3, [sp, #0]
 801f4d6:	2300      	movs	r3, #0
 801f4d8:	4630      	mov	r0, r6
 801f4da:	f002 fcf7 	bl	8021ecc <lv_map>
 801f4de:	b2c2      	uxtb	r2, r0
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801f4e0:	8a65      	ldrh	r5, [r4, #18]
 801f4e2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 801f4e6:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
 801f4ea:	f425 15f8 	bic.w	r5, r5, #2031616	; 0x1f0000
 801f4ee:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801f4f2:	8aa3      	ldrh	r3, [r4, #20]
 801f4f4:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801f4f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 801f4fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801f500:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801f504:	1b5b      	subs	r3, r3, r5
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801f506:	3204      	adds	r2, #4
 801f508:	08d2      	lsrs	r2, r2, #3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801f50a:	fb02 f303 	mul.w	r3, r2, r3
 801f50e:	eb05 1553 	add.w	r5, r5, r3, lsr #5
 801f512:	f025 4578 	bic.w	r5, r5, #4160749568	; 0xf8000000
 801f516:	f425 15f8 	bic.w	r5, r5, #2031616	; 0x1f0000
 801f51a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
    ret.full = (uint16_t)((result >> 16) | result);
 801f51e:	ea45 4515 	orr.w	r5, r5, r5, lsr #16
 801f522:	b2ad      	uxth	r5, r5
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 801f524:	e7b6      	b.n	801f494 <lv_meter_event+0x230>
 801f526:	bf00      	nop
 801f528:	0802de94 	.word	0x0802de94
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f52c:	9d06      	ldr	r5, [sp, #24]
            lv_coord_t line_width = line_width_ori;
 801f52e:	9f07      	ldr	r7, [sp, #28]
            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 801f530:	f8bb 301e 	ldrh.w	r3, [fp, #30]
 801f534:	fb08 f803 	mul.w	r8, r8, r3
 801f538:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 801f53c:	ea4f 0448 	mov.w	r4, r8, lsl #1
 801f540:	f8bb 8002 	ldrh.w	r8, [fp, #2]
 801f544:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801f548:	fb94 f4f8 	sdiv	r4, r4, r8
 801f54c:	f9bb 3020 	ldrsh.w	r3, [fp, #32]
 801f550:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801f554:	eb04 0443 	add.w	r4, r4, r3, lsl #1
            line_dsc.color = line_color;
 801f558:	f8ad 507c 	strh.w	r5, [sp, #124]	; 0x7c
            line_dsc.width = line_width;
 801f55c:	f8ad 707e 	strh.w	r7, [sp, #126]	; 0x7e
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 801f560:	ad12      	add	r5, sp, #72	; 0x48
 801f562:	af11      	add	r7, sp, #68	; 0x44
 801f564:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801f568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f56a:	4413      	add	r3, r2
 801f56c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f56e:	4413      	add	r3, r2
 801f570:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
            p_outer.y = p_center.y;
 801f574:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801f578:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 801f57c:	463b      	mov	r3, r7
 801f57e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f582:	4621      	mov	r1, r4
 801f584:	4628      	mov	r0, r5
 801f586:	f001 ff8d 	bl	80214a4 <lv_point_transform>

            part_draw_dsc.p1 = &p_center;
 801f58a:	9751      	str	r7, [sp, #324]	; 0x144
            part_draw_dsc.p2 = &p_outer;
 801f58c:	9552      	str	r5, [sp, #328]	; 0x148
            part_draw_dsc.id = i;
 801f58e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801f592:	9356      	str	r3, [sp, #344]	; 0x158
            part_draw_dsc.label_dsc = &label_dsc;
 801f594:	ab38      	add	r3, sp, #224	; 0xe0
 801f596:	934d      	str	r3, [sp, #308]	; 0x134

            /*Draw the text*/
            if(major) {
 801f598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	f000 80a1 	beq.w	801f6e2 <lv_meter_event+0x47e>
                lv_draw_mask_remove_id(outer_mask_id);
 801f5a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f5a2:	f7ef fd37 	bl	800f014 <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 801f5a6:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
 801f5aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f5ac:	1ad3      	subs	r3, r2, r3
                lv_point_t p;
                p.x = p_center.x + r_text;
 801f5ae:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801f5b2:	4413      	add	r3, r2
 801f5b4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                p.y = p_center.y;
 801f5b8:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801f5bc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 801f5c0:	463b      	mov	r3, r7
 801f5c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f5c6:	4621      	mov	r1, r4
 801f5c8:	a813      	add	r0, sp, #76	; 0x4c
 801f5ca:	f001 ff6b 	bl	80214a4 <lv_point_transform>

                lv_draw_label_dsc_t label_dsc_tmp;
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 801f5ce:	ac40      	add	r4, sp, #256	; 0x100
 801f5d0:	2220      	movs	r2, #32
 801f5d2:	a938      	add	r1, sp, #224	; 0xe0
 801f5d4:	4620      	mov	r0, r4
 801f5d6:	f002 fd93 	bl	8022100 <lv_memcpy>

                part_draw_dsc.label_dsc = &label_dsc_tmp;
 801f5da:	944d      	str	r4, [sp, #308]	; 0x134
                char buf[16];

                lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, value_of_line);
 801f5dc:	ac22      	add	r4, sp, #136	; 0x88
 801f5de:	4633      	mov	r3, r6
 801f5e0:	4aa5      	ldr	r2, [pc, #660]	; (801f878 <lv_meter_event+0x614>)
 801f5e2:	2110      	movs	r1, #16
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	f003 fc73 	bl	8022ed0 <lv_snprintf>
                part_draw_dsc.text = buf;
 801f5ea:	9453      	str	r4, [sp, #332]	; 0x14c

                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f5ec:	aa48      	add	r2, sp, #288	; 0x120
 801f5ee:	211a      	movs	r1, #26
 801f5f0:	9808      	ldr	r0, [sp, #32]
 801f5f2:	f7e4 fee7 	bl	80043c4 <lv_event_send>

                lv_point_t label_size;
                lv_txt_get_size(&label_size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801f5f6:	2400      	movs	r4, #0
 801f5f8:	9402      	str	r4, [sp, #8]
 801f5fa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 801f5fe:	9301      	str	r3, [sp, #4]
 801f600:	f9bd 30f2 	ldrsh.w	r3, [sp, #242]	; 0xf2
 801f604:	9300      	str	r3, [sp, #0]
 801f606:	f9bd 30f4 	ldrsh.w	r3, [sp, #244]	; 0xf4
 801f60a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 801f60c:	9953      	ldr	r1, [sp, #332]	; 0x14c
 801f60e:	a814      	add	r0, sp, #80	; 0x50
 801f610:	f004 ffc7 	bl	80245a2 <lv_txt_get_size>
                                LV_COORD_MAX, LV_TEXT_FLAG_NONE);

                lv_area_t label_cord;
                label_cord.x1 = p.x - label_size.x / 2;
 801f614:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 801f618:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 801f61c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801f620:	eba2 0263 	sub.w	r2, r2, r3, asr #1
 801f624:	b292      	uxth	r2, r2
 801f626:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                label_cord.y1 = p.y - label_size.y / 2;
 801f62a:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
 801f62e:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
 801f632:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801f636:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 801f63a:	b29b      	uxth	r3, r3
 801f63c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                label_cord.x2 = label_cord.x1 + label_size.x;
 801f640:	4402      	add	r2, r0
 801f642:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
                label_cord.y2 = label_cord.y1 + label_size.y;
 801f646:	440b      	add	r3, r1
 801f648:	f8ad 307a 	strh.w	r3, [sp, #122]	; 0x7a

                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 801f64c:	9400      	str	r4, [sp, #0]
 801f64e:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 801f650:	aa1d      	add	r2, sp, #116	; 0x74
 801f652:	994d      	ldr	r1, [sp, #308]	; 0x134
 801f654:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f656:	f7ee fb61 	bl	800dd1c <lv_draw_label>

                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 801f65a:	4621      	mov	r1, r4
 801f65c:	a832      	add	r0, sp, #200	; 0xc8
 801f65e:	f7ef fc8f 	bl	800ef80 <lv_draw_mask_add>
 801f662:	900b      	str	r0, [sp, #44]	; 0x2c
                part_draw_dsc.label_dsc = NULL;
                part_draw_dsc.text = NULL;
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
            }

            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801f664:	a82c      	add	r0, sp, #176	; 0xb0
 801f666:	2100      	movs	r1, #0
 801f668:	f7ef fc8a 	bl	800ef80 <lv_draw_mask_add>
 801f66c:	4604      	mov	r4, r0
            lv_draw_line(draw_ctx, &line_dsc, &p_outer, &p_center);
 801f66e:	ab11      	add	r3, sp, #68	; 0x44
 801f670:	aa12      	add	r2, sp, #72	; 0x48
 801f672:	a91f      	add	r1, sp, #124	; 0x7c
 801f674:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f676:	f7ee fe9d 	bl	800e3b4 <lv_draw_line>
            lv_draw_mask_remove_id(inner_act_mask_id);
 801f67a:	4620      	mov	r0, r4
 801f67c:	f7ef fcca 	bl	800f014 <lv_draw_mask_remove_id>
            lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &part_draw_dsc);
 801f680:	aa48      	add	r2, sp, #288	; 0x120
 801f682:	2116      	movs	r1, #22
 801f684:	9808      	ldr	r0, [sp, #32]
 801f686:	f7e4 fe9d 	bl	80043c4 <lv_event_send>

            line_dsc.color = line_color_ori;
 801f68a:	9b06      	ldr	r3, [sp, #24]
 801f68c:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
            line_dsc.width = line_width_ori;
 801f690:	9b07      	ldr	r3, [sp, #28]
 801f692:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
        for(i = 0; i < scale->tick_cnt; i++) {
 801f696:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801f69a:	9b05      	ldr	r3, [sp, #20]
 801f69c:	3301      	adds	r3, #1
 801f69e:	9305      	str	r3, [sp, #20]
 801f6a0:	b29b      	uxth	r3, r3
 801f6a2:	429a      	cmp	r2, r3
 801f6a4:	d927      	bls.n	801f6f6 <lv_meter_event+0x492>
            minor_cnt++;
 801f6a6:	f10a 0a01 	add.w	sl, sl, #1
            if(minor_cnt == scale->tick_major_nth) {
 801f6aa:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801f6ae:	459a      	cmp	sl, r3
 801f6b0:	f000 81f3 	beq.w	801fa9a <lv_meter_event+0x836>
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801f6b4:	f8bd 8014 	ldrh.w	r8, [sp, #20]
 801f6b8:	f8db 3014 	ldr.w	r3, [fp, #20]
 801f6bc:	f8db 1018 	ldr.w	r1, [fp, #24]
 801f6c0:	9100      	str	r1, [sp, #0]
 801f6c2:	3a01      	subs	r2, #1
 801f6c4:	2100      	movs	r1, #0
 801f6c6:	4640      	mov	r0, r8
 801f6c8:	f002 fc00 	bl	8021ecc <lv_map>
 801f6cc:	4606      	mov	r6, r0
            part_draw_dsc.value = value_of_line;
 801f6ce:	9058      	str	r0, [sp, #352]	; 0x160
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 801f6d0:	f8bb 3000 	ldrh.w	r3, [fp]
 801f6d4:	9306      	str	r3, [sp, #24]
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 801f6d6:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 801f6da:	9307      	str	r3, [sp, #28]
            bool major = false;
 801f6dc:	2300      	movs	r3, #0
 801f6de:	9309      	str	r3, [sp, #36]	; 0x24
 801f6e0:	e1f3      	b.n	801faca <lv_meter_event+0x866>
                part_draw_dsc.label_dsc = NULL;
 801f6e2:	2300      	movs	r3, #0
 801f6e4:	934d      	str	r3, [sp, #308]	; 0x134
                part_draw_dsc.text = NULL;
 801f6e6:	9353      	str	r3, [sp, #332]	; 0x14c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f6e8:	aa48      	add	r2, sp, #288	; 0x120
 801f6ea:	211a      	movs	r1, #26
 801f6ec:	9808      	ldr	r0, [sp, #32]
 801f6ee:	f7e4 fe69 	bl	80043c4 <lv_event_send>
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 801f6f2:	a826      	add	r0, sp, #152	; 0x98
 801f6f4:	e7b7      	b.n	801f666 <lv_meter_event+0x402>

        }
        lv_draw_mask_free_param(&inner_minor_mask);
 801f6f6:	a826      	add	r0, sp, #152	; 0x98
 801f6f8:	f7ef fcb6 	bl	800f068 <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&inner_major_mask);
 801f6fc:	a82c      	add	r0, sp, #176	; 0xb0
 801f6fe:	f7ef fcb3 	bl	800f068 <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&outer_mask);
 801f702:	a832      	add	r0, sp, #200	; 0xc8
 801f704:	f7ef fcb0 	bl	800f068 <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(outer_mask_id);
 801f708:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f70a:	f7ef fc83 	bl	800f014 <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 801f70e:	4659      	mov	r1, fp
 801f710:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f712:	f002 fae1 	bl	8021cd8 <_lv_ll_get_prev>
 801f716:	4683      	mov	fp, r0
 801f718:	2800      	cmp	r0, #0
 801f71a:	d066      	beq.n	801f7ea <lv_meter_event+0x586>
        part_draw_dsc.sub_part_ptr = scale;
 801f71c:	f8cd b164 	str.w	fp, [sp, #356]	; 0x164
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 801f720:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801f724:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f726:	1af2      	subs	r2, r6, r3
 801f728:	b292      	uxth	r2, r2
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 801f72a:	f8bb 400c 	ldrh.w	r4, [fp, #12]
 801f72e:	1b31      	subs	r1, r6, r4
 801f730:	b28d      	uxth	r5, r1
 801f732:	b209      	sxth	r1, r1
 801f734:	910e      	str	r1, [sp, #56]	; 0x38
        area_inner_minor.x1 = p_center.x - r_in_minor;
 801f736:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 801f73a:	1b9b      	subs	r3, r3, r6
 801f73c:	b29b      	uxth	r3, r3
 801f73e:	18c8      	adds	r0, r1, r3
 801f740:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
        area_inner_minor.y1 = p_center.y - r_in_minor;
 801f744:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 801f748:	4403      	add	r3, r0
 801f74a:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
        area_inner_minor.x2 = p_center.x + r_in_minor;
 801f74e:	4411      	add	r1, r2
 801f750:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
        area_inner_minor.y2 = p_center.y + r_in_minor;
 801f754:	4402      	add	r2, r0
 801f756:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801f75a:	2301      	movs	r3, #1
 801f75c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f760:	a917      	add	r1, sp, #92	; 0x5c
 801f762:	a826      	add	r0, sp, #152	; 0x98
 801f764:	f7ef fe0e 	bl	800f384 <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 801f768:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801f76c:	1ba3      	subs	r3, r4, r6
 801f76e:	b29b      	uxth	r3, r3
 801f770:	18d1      	adds	r1, r2, r3
 801f772:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
        area_inner_major.y1 = p_center.y - r_in_major;
 801f776:	f8bd 1046 	ldrh.w	r1, [sp, #70]	; 0x46
 801f77a:	440b      	add	r3, r1
 801f77c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 801f780:	1e53      	subs	r3, r2, #1
 801f782:	442b      	add	r3, r5
 801f784:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 801f788:	3901      	subs	r1, #1
 801f78a:	440d      	add	r5, r1
 801f78c:	f8ad 506a 	strh.w	r5, [sp, #106]	; 0x6a
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 801f790:	2301      	movs	r3, #1
 801f792:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f796:	a919      	add	r1, sp, #100	; 0x64
 801f798:	a82c      	add	r0, sp, #176	; 0xb0
 801f79a:	f7ef fdf3 	bl	800f384 <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 801f79e:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801f7a2:	1b93      	subs	r3, r2, r6
 801f7a4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        area_outer.y1 = p_center.y - r_out;
 801f7a8:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801f7ac:	1b99      	subs	r1, r3, r6
 801f7ae:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
        area_outer.x2 = p_center.x + r_out - 1;
 801f7b2:	3a01      	subs	r2, #1
 801f7b4:	4432      	add	r2, r6
 801f7b6:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
        area_outer.y2 = p_center.y + r_out - 1;
 801f7ba:	3b01      	subs	r3, #1
 801f7bc:	4433      	add	r3, r6
 801f7be:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 801f7c2:	2300      	movs	r3, #0
 801f7c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801f7c8:	a91b      	add	r1, sp, #108	; 0x6c
 801f7ca:	a832      	add	r0, sp, #200	; 0xc8
 801f7cc:	f7ef fdda 	bl	800f384 <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 801f7d0:	2100      	movs	r1, #0
 801f7d2:	a832      	add	r0, sp, #200	; 0xc8
 801f7d4:	f7ef fbd4 	bl	800ef80 <lv_draw_mask_add>
 801f7d8:	900b      	str	r0, [sp, #44]	; 0x2c
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 801f7da:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801f7de:	2b00      	cmp	r3, #0
 801f7e0:	f43f ae4e 	beq.w	801f480 <lv_meter_event+0x21c>
 801f7e4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 801f7e8:	e64c      	b.n	801f484 <lv_meter_event+0x220>
 801f7ea:	46cb      	mov	fp, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801f7ec:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801f7f0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801f7f4:	3301      	adds	r3, #1
 801f7f6:	1a9b      	subs	r3, r3, r2

static void draw_needles(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 801f7f8:	b219      	sxth	r1, r3
 801f7fa:	f3c3 36c0 	ubfx	r6, r3, #15, #1
 801f7fe:	440e      	add	r6, r1
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_edge;
 801f800:	f3c6 064f 	ubfx	r6, r6, #1, #16
 801f804:	4432      	add	r2, r6
 801f806:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
    scale_center.y = scale_area->y1 + r_edge;
 801f80a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801f80e:	4433      	add	r3, r6
 801f810:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 801f814:	a838      	add	r0, sp, #224	; 0xe0
 801f816:	f7ee fdb6 	bl	800e386 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc);
 801f81a:	aa38      	add	r2, sp, #224	; 0xe0
 801f81c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f820:	9d08      	ldr	r5, [sp, #32]
 801f822:	4628      	mov	r0, r5
 801f824:	f7e8 f9a0 	bl	8007b68 <lv_obj_init_draw_line_dsc>

    lv_draw_img_dsc_t img_dsc;
    lv_draw_img_dsc_init(&img_dsc);
 801f828:	a840      	add	r0, sp, #256	; 0x100
 801f82a:	f7ee f87a 	bl	800d922 <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_ITEMS, &img_dsc);
 801f82e:	aa40      	add	r2, sp, #256	; 0x100
 801f830:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801f834:	4628      	mov	r0, r5
 801f836:	f7e8 f93f 	bl	8007ab8 <lv_obj_init_draw_img_dsc>
 801f83a:	2260      	movs	r2, #96	; 0x60
 801f83c:	2100      	movs	r1, #0
 801f83e:	4628      	mov	r0, r5
 801f840:	f7eb fb34 	bl	800aeac <lv_obj_get_style_prop>
 801f844:	9005      	str	r0, [sp, #20]
    return (lv_opa_t)v.num;
 801f846:	fa5f fa80 	uxtb.w	sl, r0
    lv_opa_t opa_main = lv_obj_get_style_opa(obj, LV_PART_MAIN);

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 801f84a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f84c:	a848      	add	r0, sp, #288	; 0x120
 801f84e:	f7e8 faa2 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 801f852:	4b0a      	ldr	r3, [pc, #40]	; (801f87c <lv_meter_event+0x618>)
 801f854:	9349      	str	r3, [sp, #292]	; 0x124
    part_draw_dsc.p1 = &scale_center;
 801f856:	ab26      	add	r3, sp, #152	; 0x98
 801f858:	9351      	str	r3, [sp, #324]	; 0x144

    lv_meter_indicator_t * indic;
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f85a:	4658      	mov	r0, fp
 801f85c:	f002 fa34 	bl	8021cc8 <_lv_ll_get_tail>
 801f860:	4604      	mov	r4, r0
 801f862:	2800      	cmp	r0, #0
 801f864:	f000 80d3 	beq.w	801fa0e <lv_meter_event+0x7aa>
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
            if(angle > 3600) angle -= 3600;
            img_dsc.angle = angle;

            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 801f868:	f04f 0902 	mov.w	r9, #2
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 801f86c:	f8df 8010 	ldr.w	r8, [pc, #16]	; 801f880 <lv_meter_event+0x61c>
 801f870:	f8cd a018 	str.w	sl, [sp, #24]
 801f874:	46aa      	mov	sl, r5
 801f876:	e064      	b.n	801f942 <lv_meter_event+0x6de>
 801f878:	0802d7d8 	.word	0x0802d7d8
 801f87c:	0802de94 	.word	0x0802de94
 801f880:	80010003 	.word	0x80010003
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801f884:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 801f888:	69aa      	ldr	r2, [r5, #24]
 801f88a:	6969      	ldr	r1, [r5, #20]
 801f88c:	68e0      	ldr	r0, [r4, #12]
 801f88e:	8bef      	ldrh	r7, [r5, #30]
 801f890:	441f      	add	r7, r3
 801f892:	9700      	str	r7, [sp, #0]
 801f894:	f002 fb1a 	bl	8021ecc <lv_map>
 801f898:	4607      	mov	r7, r0
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 801f89a:	8a63      	ldrh	r3, [r4, #18]
 801f89c:	4433      	add	r3, r6
 801f89e:	8bad      	ldrh	r5, [r5, #28]
 801f8a0:	441d      	add	r5, r3
 801f8a2:	b22d      	sxth	r5, r5
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 801f8a4:	b200      	sxth	r0, r0
 801f8a6:	f002 fa35 	bl	8021d14 <lv_trigo_sin>
 801f8aa:	fb05 f300 	mul.w	r3, r5, r0
 801f8ae:	fb88 1203 	smull	r1, r2, r8, r3
 801f8b2:	441a      	add	r2, r3
 801f8b4:	17db      	asrs	r3, r3, #31
 801f8b6:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
 801f8ba:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801f8be:	4413      	add	r3, r2
 801f8c0:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle);

static inline LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 801f8c4:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 801f8c8:	b200      	sxth	r0, r0
 801f8ca:	f002 fa23 	bl	8021d14 <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 801f8ce:	fb00 f505 	mul.w	r5, r0, r5
 801f8d2:	fb88 2305 	smull	r2, r3, r8, r5
 801f8d6:	195a      	adds	r2, r3, r5
 801f8d8:	17eb      	asrs	r3, r5, #31
 801f8da:	ebc3 33a2 	rsb	r3, r3, r2, asr #14
 801f8de:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801f8e2:	4413      	add	r3, r2
 801f8e4:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
            line_dsc.color = indic->type_data.needle_line.color;
 801f8e8:	8aa3      	ldrh	r3, [r4, #20]
 801f8ea:	f8ad 30e0 	strh.w	r3, [sp, #224]	; 0xe0
            line_dsc.width = indic->type_data.needle_line.width;
 801f8ee:	8a23      	ldrh	r3, [r4, #16]
 801f8f0:	f8ad 30e2 	strh.w	r3, [sp, #226]	; 0xe2
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801f8f4:	7962      	ldrb	r2, [r4, #5]
 801f8f6:	2afd      	cmp	r2, #253	; 0xfd
 801f8f8:	bf9d      	ittte	ls
 801f8fa:	f89d 3014 	ldrbls.w	r3, [sp, #20]
 801f8fe:	4353      	mulls	r3, r2
 801f900:	0a1b      	lsrls	r3, r3, #8
 801f902:	9b06      	ldrhi	r3, [sp, #24]
 801f904:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_LINE;
 801f908:	2301      	movs	r3, #1
 801f90a:	9356      	str	r3, [sp, #344]	; 0x158
            part_draw_dsc.line_dsc = &line_dsc;
 801f90c:	ad38      	add	r5, sp, #224	; 0xe0
 801f90e:	954e      	str	r5, [sp, #312]	; 0x138
            part_draw_dsc.p2 = &p_end;
 801f910:	af32      	add	r7, sp, #200	; 0xc8
 801f912:	9752      	str	r7, [sp, #328]	; 0x148
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f914:	aa48      	add	r2, sp, #288	; 0x120
 801f916:	211a      	movs	r1, #26
 801f918:	4650      	mov	r0, sl
 801f91a:	f7e4 fd53 	bl	80043c4 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &scale_center, &p_end);
 801f91e:	463b      	mov	r3, r7
 801f920:	aa26      	add	r2, sp, #152	; 0x98
 801f922:	4629      	mov	r1, r5
 801f924:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f926:	f7ee fd45 	bl	800e3b4 <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801f92a:	aa48      	add	r2, sp, #288	; 0x120
 801f92c:	211b      	movs	r1, #27
 801f92e:	4650      	mov	r0, sl
 801f930:	f7e4 fd48 	bl	80043c4 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801f934:	4621      	mov	r1, r4
 801f936:	4658      	mov	r0, fp
 801f938:	f002 f9ce 	bl	8021cd8 <_lv_ll_get_prev>
 801f93c:	4604      	mov	r4, r0
 801f93e:	2800      	cmp	r0, #0
 801f940:	d065      	beq.n	801fa0e <lv_meter_event+0x7aa>
        lv_meter_scale_t * scale = indic->scale;
 801f942:	6825      	ldr	r5, [r4, #0]
        part_draw_dsc.sub_part_ptr = indic;
 801f944:	9459      	str	r4, [sp, #356]	; 0x164
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 801f946:	7923      	ldrb	r3, [r4, #4]
 801f948:	2b01      	cmp	r3, #1
 801f94a:	d09b      	beq.n	801f884 <lv_meter_event+0x620>
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	d1f1      	bne.n	801f934 <lv_meter_event+0x6d0>
            if(indic->type_data.needle_img.src == NULL) continue;
 801f950:	6923      	ldr	r3, [r4, #16]
 801f952:	2b00      	cmp	r3, #0
 801f954:	d0ee      	beq.n	801f934 <lv_meter_event+0x6d0>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801f956:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 801f95a:	69aa      	ldr	r2, [r5, #24]
 801f95c:	6969      	ldr	r1, [r5, #20]
 801f95e:	68e0      	ldr	r0, [r4, #12]
 801f960:	8bed      	ldrh	r5, [r5, #30]
 801f962:	441d      	add	r5, r3
 801f964:	9500      	str	r5, [sp, #0]
 801f966:	f002 fab1 	bl	8021ecc <lv_map>
 801f96a:	4605      	mov	r5, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 801f96c:	a92c      	add	r1, sp, #176	; 0xb0
 801f96e:	6920      	ldr	r0, [r4, #16]
 801f970:	f7f0 fbcc 	bl	801010c <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 801f974:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 801f978:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 801f97c:	1bd2      	subs	r2, r2, r7
 801f97e:	b292      	uxth	r2, r2
 801f980:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 801f984:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801f988:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
 801f98c:	1a1b      	subs	r3, r3, r0
 801f98e:	b29b      	uxth	r3, r3
 801f990:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            a.x2 = a.x1 + info.w - 1;
 801f994:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f996:	f3c1 218a 	ubfx	r1, r1, #10, #11
 801f99a:	3901      	subs	r1, #1
 801f99c:	440a      	add	r2, r1
 801f99e:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
            a.y2 = a.y1 + info.h - 1;
 801f9a2:	f8bd 20b2 	ldrh.w	r2, [sp, #178]	; 0xb2
 801f9a6:	f3c2 124a 	ubfx	r2, r2, #5, #11
 801f9aa:	3a01      	subs	r2, #1
 801f9ac:	4413      	add	r3, r2
 801f9ae:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801f9b2:	7962      	ldrb	r2, [r4, #5]
 801f9b4:	2afd      	cmp	r2, #253	; 0xfd
 801f9b6:	bf9d      	ittte	ls
 801f9b8:	f89d 3014 	ldrbls.w	r3, [sp, #20]
 801f9bc:	4353      	mulls	r3, r2
 801f9be:	0a1b      	lsrls	r3, r3, #8
 801f9c0:	9b06      	ldrhi	r3, [sp, #24]
 801f9c2:	f88d 310b 	strb.w	r3, [sp, #267]	; 0x10b
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 801f9c6:	f8ad 7104 	strh.w	r7, [sp, #260]	; 0x104
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 801f9ca:	f8ad 0106 	strh.w	r0, [sp, #262]	; 0x106
            angle = angle * 10;
 801f9ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801f9d2:	006b      	lsls	r3, r5, #1
 801f9d4:	461a      	mov	r2, r3
            if(angle > 3600) angle -= 3600;
 801f9d6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 801f9da:	bfc8      	it	gt
 801f9dc:	f5a3 6261 	subgt.w	r2, r3, #3600	; 0xe10
            img_dsc.angle = angle;
 801f9e0:	f8ad 2100 	strh.w	r2, [sp, #256]	; 0x100
            part_draw_dsc.id = LV_METER_DRAW_PART_NEEDLE_IMG;
 801f9e4:	f8cd 9158 	str.w	r9, [sp, #344]	; 0x158
            part_draw_dsc.img_dsc = &img_dsc;
 801f9e8:	ad40      	add	r5, sp, #256	; 0x100
 801f9ea:	954f      	str	r5, [sp, #316]	; 0x13c

            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 801f9ec:	aa48      	add	r2, sp, #288	; 0x120
 801f9ee:	211a      	movs	r1, #26
 801f9f0:	4650      	mov	r0, sl
 801f9f2:	f7e4 fce7 	bl	80043c4 <lv_event_send>
            lv_draw_img(draw_ctx, &img_dsc, &a, indic->type_data.needle_img.src);
 801f9f6:	6923      	ldr	r3, [r4, #16]
 801f9f8:	aa32      	add	r2, sp, #200	; 0xc8
 801f9fa:	4629      	mov	r1, r5
 801f9fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f9fe:	f7ed fff7 	bl	800d9f0 <lv_draw_img>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801fa02:	aa48      	add	r2, sp, #288	; 0x120
 801fa04:	211b      	movs	r1, #27
 801fa06:	4650      	mov	r0, sl
 801fa08:	f7e4 fcdc 	bl	80043c4 <lv_event_send>
 801fa0c:	e792      	b.n	801f934 <lv_meter_event+0x6d0>
 801fa0e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801fa12:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801fa16:	3301      	adds	r3, #1
 801fa18:	1a9b      	subs	r3, r3, r2
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 801fa1a:	b219      	sxth	r1, r3
 801fa1c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 801fa20:	440b      	add	r3, r1
        scale_center.x = scale_area.x1 + r_edge;
 801fa22:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801fa26:	441a      	add	r2, r3
 801fa28:	b295      	uxth	r5, r2
        scale_center.y = scale_area.y1 + r_edge;
 801fa2a:	f8bd 4056 	ldrh.w	r4, [sp, #86]	; 0x56
 801fa2e:	4423      	add	r3, r4
 801fa30:	b29c      	uxth	r4, r3
        lv_draw_rect_dsc_init(&mid_dsc);
 801fa32:	a848      	add	r0, sp, #288	; 0x120
 801fa34:	f7ef fefa 	bl	800f82c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 801fa38:	aa48      	add	r2, sp, #288	; 0x120
 801fa3a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801fa3e:	9f08      	ldr	r7, [sp, #32]
 801fa40:	4638      	mov	r0, r7
 801fa42:	f7e7 fe6d 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801fa46:	2201      	movs	r2, #1
 801fa48:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801fa4c:	4638      	mov	r0, r7
 801fa4e:	f7eb fa2d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801fa52:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801fa54:	2204      	movs	r2, #4
 801fa56:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801fa5a:	4638      	mov	r0, r7
 801fa5c:	f7eb fa26 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801fa60:	b201      	sxth	r1, r0
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 801fa62:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
        nm_cord.x1 = scale_center.x - w;
 801fa66:	f3c6 024f 	ubfx	r2, r6, #1, #16
 801fa6a:	1aab      	subs	r3, r5, r2
 801fa6c:	f8ad 3100 	strh.w	r3, [sp, #256]	; 0x100
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 801fa70:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 801fa74:	440b      	add	r3, r1
        nm_cord.y1 = scale_center.y - h;
 801fa76:	f3c3 034f 	ubfx	r3, r3, #1, #16
 801fa7a:	1ae1      	subs	r1, r4, r3
 801fa7c:	f8ad 1102 	strh.w	r1, [sp, #258]	; 0x102
        nm_cord.x2 = scale_center.x + w;
 801fa80:	442a      	add	r2, r5
 801fa82:	f8ad 2104 	strh.w	r2, [sp, #260]	; 0x104
        nm_cord.y2 = scale_center.y + h;
 801fa86:	4423      	add	r3, r4
 801fa88:	f8ad 3106 	strh.w	r3, [sp, #262]	; 0x106
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 801fa8c:	aa40      	add	r2, sp, #256	; 0x100
 801fa8e:	a948      	add	r1, sp, #288	; 0x120
 801fa90:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fa92:	f7ef ff27 	bl	800f8e4 <lv_draw_rect>
 801fa96:	f7ff bbee 	b.w	801f276 <lv_meter_event+0x12>
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801fa9a:	f8bd 8014 	ldrh.w	r8, [sp, #20]
 801fa9e:	f8db 3014 	ldr.w	r3, [fp, #20]
 801faa2:	f8db 1018 	ldr.w	r1, [fp, #24]
 801faa6:	9100      	str	r1, [sp, #0]
 801faa8:	3a01      	subs	r2, #1
 801faaa:	2100      	movs	r1, #0
 801faac:	4640      	mov	r0, r8
 801faae:	f002 fa0d 	bl	8021ecc <lv_map>
 801fab2:	4606      	mov	r6, r0
            part_draw_dsc.value = value_of_line;
 801fab4:	9058      	str	r0, [sp, #352]	; 0x160
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 801fab6:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 801faba:	9306      	str	r3, [sp, #24]
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 801fabc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 801fac0:	9307      	str	r3, [sp, #28]
                minor_cnt = 0;
 801fac2:	f04f 0a00 	mov.w	sl, #0
                major = true;
 801fac6:	2301      	movs	r3, #1
 801fac8:	9309      	str	r3, [sp, #36]	; 0x24
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801faca:	4648      	mov	r0, r9
 801facc:	f002 f8fc 	bl	8021cc8 <_lv_ll_get_tail>
 801fad0:	4604      	mov	r4, r0
 801fad2:	2800      	cmp	r0, #0
 801fad4:	f43f ad2a 	beq.w	801f52c <lv_meter_event+0x2c8>
 801fad8:	9d06      	ldr	r5, [sp, #24]
            lv_coord_t line_width = line_width_ori;
 801fada:	9f07      	ldr	r7, [sp, #28]
 801fadc:	e4e1      	b.n	801f4a2 <lv_meter_event+0x23e>
 801fade:	bf00      	nop

0801fae0 <lv_meter_destructor>:
{
 801fae0:	b510      	push	{r4, lr}
 801fae2:	460c      	mov	r4, r1
    _lv_ll_clear(&meter->indicator_ll);
 801fae4:	f101 0030 	add.w	r0, r1, #48	; 0x30
 801fae8:	f002 f8d6 	bl	8021c98 <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 801faec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801faf0:	f002 f8d2 	bl	8021c98 <_lv_ll_clear>
}
 801faf4:	bd10      	pop	{r4, pc}

0801faf6 <lv_meter_constructor>:
{
 801faf6:	b510      	push	{r4, lr}
 801faf8:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 801fafa:	2124      	movs	r1, #36	; 0x24
 801fafc:	1860      	adds	r0, r4, r1
 801fafe:	f002 f856 	bl	8021bae <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 801fb02:	211c      	movs	r1, #28
 801fb04:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801fb08:	f002 f851 	bl	8021bae <_lv_ll_init>
}
 801fb0c:	bd10      	pop	{r4, pc}
	...

0801fb10 <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 801fb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb14:	b08a      	sub	sp, #40	; 0x28
 801fb16:	4604      	mov	r4, r0
    lv_spinbox_t * spinbox = (lv_spinbox_t *)obj;

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
 801fb18:	2112      	movs	r1, #18
 801fb1a:	a805      	add	r0, sp, #20
 801fb1c:	f002 fc86 	bl	802242c <lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 801fb20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	db5d      	blt.n	801fbe2 <lv_spinbox_updatevalue+0xd2>
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
        buf_p++;
    }
    else {
        /*Cursor need shift to left*/
        cur_shift_left++;
 801fb26:	2501      	movs	r5, #1
    char * buf_p = buf;
 801fb28:	af05      	add	r7, sp, #20
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%" LV_PRId32, LV_ABS(spinbox->value));
 801fb2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	bfb8      	it	lt
 801fb30:	425b      	neglt	r3, r3
 801fb32:	4a41      	ldr	r2, [pc, #260]	; (801fc38 <lv_spinbox_updatevalue+0x128>)
 801fb34:	210e      	movs	r1, #14
 801fb36:	a801      	add	r0, sp, #4
 801fb38:	f003 f9ca 	bl	8022ed0 <lv_snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 801fb3c:	f894 8074 	ldrb.w	r8, [r4, #116]	; 0x74
 801fb40:	f008 080f 	and.w	r8, r8, #15
 801fb44:	a801      	add	r0, sp, #4
 801fb46:	f7e0 fb77 	bl	8000238 <strlen>
 801fb4a:	eba8 0600 	sub.w	r6, r8, r0
    if(lz_cnt > 0) {
 801fb4e:	2e00      	cmp	r6, #0
 801fb50:	dd13      	ble.n	801fb7a <lv_spinbox_updatevalue+0x6a>
 801fb52:	1c42      	adds	r2, r0, #1
 801fb54:	ab01      	add	r3, sp, #4
 801fb56:	441a      	add	r2, r3
 801fb58:	eb03 0008 	add.w	r0, r3, r8
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
            digits[i + lz_cnt] = digits[i];
 801fb5c:	4611      	mov	r1, r2
 801fb5e:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 801fb62:	f800 3901 	strb.w	r3, [r0], #-1
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 801fb66:	ab01      	add	r3, sp, #4
 801fb68:	1ac9      	subs	r1, r1, r3
 801fb6a:	2902      	cmp	r1, #2
 801fb6c:	d5f6      	bpl.n	801fb5c <lv_spinbox_updatevalue+0x4c>
 801fb6e:	18f2      	adds	r2, r6, r3
        }
        for(i = 0; i < lz_cnt; i++) {
            digits[i] = '0';
 801fb70:	2130      	movs	r1, #48	; 0x30
 801fb72:	f803 1b01 	strb.w	r1, [r3], #1
        for(i = 0; i < lz_cnt; i++) {
 801fb76:	4293      	cmp	r3, r2
 801fb78:	d1fb      	bne.n	801fb72 <lv_spinbox_updatevalue+0x62>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801fb7a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801fb7e:	f013 00f0 	ands.w	r0, r3, #240	; 0xf0
 801fb82:	d053      	beq.n	801fc2c <lv_spinbox_updatevalue+0x11c>

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801fb84:	091e      	lsrs	r6, r3, #4
 801fb86:	d037      	beq.n	801fbf8 <lv_spinbox_updatevalue+0xe8>
 801fb88:	a901      	add	r1, sp, #4
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fb90:	b122      	cbz	r2, 801fb9c <lv_spinbox_updatevalue+0x8c>
        (*buf_p) = digits[i];
 801fb92:	f807 2b01 	strb.w	r2, [r7], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801fb96:	3301      	adds	r3, #1
 801fb98:	42b3      	cmp	r3, r6
 801fb9a:	dbf7      	blt.n	801fb8c <lv_spinbox_updatevalue+0x7c>
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 801fb9c:	bb68      	cbnz	r0, 801fbfa <lv_spinbox_updatevalue+0xea>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 801fb9e:	a905      	add	r1, sp, #20
 801fba0:	4620      	mov	r0, r4
 801fba2:	f00c fc9b 	bl	802c4dc <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
 801fba6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 801fba8:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
 801fbac:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 801fbb0:	2b09      	cmp	r3, #9
 801fbb2:	dd0a      	ble.n	801fbca <lv_spinbox_updatevalue+0xba>
        step /= 10;
 801fbb4:	4f21      	ldr	r7, [pc, #132]	; (801fc3c <lv_spinbox_updatevalue+0x12c>)
 801fbb6:	461a      	mov	r2, r3
 801fbb8:	fb87 c003 	smull	ip, r0, r7, r3
 801fbbc:	17db      	asrs	r3, r3, #31
 801fbbe:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
        cur_pos--;
 801fbc2:	3901      	subs	r1, #1
 801fbc4:	b2c9      	uxtb	r1, r1
    while(step >= 10) {
 801fbc6:	2a63      	cmp	r2, #99	; 0x63
 801fbc8:	dcf5      	bgt.n	801fbb6 <lv_spinbox_updatevalue+0xa6>
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 801fbca:	42b1      	cmp	r1, r6
 801fbcc:	bfc4      	itt	gt
 801fbce:	3101      	addgt	r1, #1
 801fbd0:	b2c9      	uxtbgt	r1, r1

    cur_pos -= cur_shift_left;
 801fbd2:	1b49      	subs	r1, r1, r5

    lv_textarea_set_cursor_pos(obj, cur_pos);
 801fbd4:	b2c9      	uxtb	r1, r1
 801fbd6:	4620      	mov	r0, r4
 801fbd8:	f00c f95a 	bl	802be90 <lv_textarea_set_cursor_pos>
}
 801fbdc:	b00a      	add	sp, #40	; 0x28
 801fbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 801fbe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	bfac      	ite	ge
 801fbe8:	232b      	movge	r3, #43	; 0x2b
 801fbea:	232d      	movlt	r3, #45	; 0x2d
 801fbec:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t cur_shift_left = 0;
 801fbf0:	2500      	movs	r5, #0
        buf_p++;
 801fbf2:	f10d 0715 	add.w	r7, sp, #21
 801fbf6:	e798      	b.n	801fb2a <lv_spinbox_updatevalue+0x1a>
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801fbf8:	2300      	movs	r3, #0
        (*buf_p) = '.';
 801fbfa:	463a      	mov	r2, r7
 801fbfc:	212e      	movs	r1, #46	; 0x2e
 801fbfe:	f802 1b01 	strb.w	r1, [r2], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 801fc02:	4598      	cmp	r8, r3
 801fc04:	ddcb      	ble.n	801fb9e <lv_spinbox_updatevalue+0x8e>
 801fc06:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801fc0a:	eb0d 0001 	add.w	r0, sp, r1
 801fc0e:	3825      	subs	r0, #37	; 0x25
 801fc10:	f108 0801 	add.w	r8, r8, #1
 801fc14:	eba8 0303 	sub.w	r3, r8, r3
 801fc18:	441f      	add	r7, r3
 801fc1a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 801fc1e:	2900      	cmp	r1, #0
 801fc20:	d0bd      	beq.n	801fb9e <lv_spinbox_updatevalue+0x8e>
            (*buf_p) = digits[i];
 801fc22:	f802 1b01 	strb.w	r1, [r2], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 801fc26:	4297      	cmp	r7, r2
 801fc28:	d1f7      	bne.n	801fc1a <lv_spinbox_updatevalue+0x10a>
 801fc2a:	e7b8      	b.n	801fb9e <lv_spinbox_updatevalue+0x8e>
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801fc2c:	4646      	mov	r6, r8
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 801fc2e:	f1b8 0f00 	cmp.w	r8, #0
 801fc32:	d0b4      	beq.n	801fb9e <lv_spinbox_updatevalue+0x8e>
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 801fc34:	4646      	mov	r6, r8
 801fc36:	e7a7      	b.n	801fb88 <lv_spinbox_updatevalue+0x78>
 801fc38:	0802d7d8 	.word	0x0802d7d8
 801fc3c:	66666667 	.word	0x66666667

0801fc40 <lv_spinbox_constructor>:
{
 801fc40:	b538      	push	{r3, r4, r5, lr}
 801fc42:	460c      	mov	r4, r1
    spinbox->value              = 0;
 801fc44:	2300      	movs	r3, #0
 801fc46:	664b      	str	r3, [r1, #100]	; 0x64
    spinbox->digit_count        = 5;
 801fc48:	2305      	movs	r3, #5
 801fc4a:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    spinbox->step               = 1;
 801fc4e:	2501      	movs	r5, #1
 801fc50:	670d      	str	r5, [r1, #112]	; 0x70
    spinbox->range_max          = 99999;
 801fc52:	4b0c      	ldr	r3, [pc, #48]	; (801fc84 <lv_spinbox_constructor+0x44>)
 801fc54:	668b      	str	r3, [r1, #104]	; 0x68
    spinbox->range_min          = -99999;
 801fc56:	4b0c      	ldr	r3, [pc, #48]	; (801fc88 <lv_spinbox_constructor+0x48>)
 801fc58:	66cb      	str	r3, [r1, #108]	; 0x6c
    spinbox->rollover           = false;
 801fc5a:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    spinbox->digit_step_dir     = LV_DIR_RIGHT;
 801fc5e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801fc62:	2202      	movs	r2, #2
 801fc64:	f362 0342 	bfi	r3, r2, #1, #2
 801fc68:	f881 3075 	strb.w	r3, [r1, #117]	; 0x75
    lv_textarea_set_one_line(obj, true);
 801fc6c:	4629      	mov	r1, r5
 801fc6e:	4620      	mov	r0, r4
 801fc70:	f00c f9d9 	bl	802c026 <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 801fc74:	4629      	mov	r1, r5
 801fc76:	4620      	mov	r0, r4
 801fc78:	f00c f9ce 	bl	802c018 <lv_textarea_set_cursor_click_pos>
    lv_spinbox_updatevalue(obj);
 801fc7c:	4620      	mov	r0, r4
 801fc7e:	f7ff ff47 	bl	801fb10 <lv_spinbox_updatevalue>
}
 801fc82:	bd38      	pop	{r3, r4, r5, pc}
 801fc84:	0001869f 	.word	0x0001869f
 801fc88:	fffe7961 	.word	0xfffe7961

0801fc8c <lv_spinbox_step_next>:
{
 801fc8c:	b508      	push	{r3, lr}
    int32_t new_step = spinbox->step / 10;
 801fc8e:	6f03      	ldr	r3, [r0, #112]	; 0x70
    if((new_step) > 0)
 801fc90:	2b09      	cmp	r3, #9
 801fc92:	dd09      	ble.n	801fca8 <lv_spinbox_step_next+0x1c>
    int32_t new_step = spinbox->step / 10;
 801fc94:	4a05      	ldr	r2, [pc, #20]	; (801fcac <lv_spinbox_step_next+0x20>)
 801fc96:	fb82 1203 	smull	r1, r2, r2, r3
 801fc9a:	17db      	asrs	r3, r3, #31
 801fc9c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 801fca0:	6703      	str	r3, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 801fca2:	f7ff ff35 	bl	801fb10 <lv_spinbox_updatevalue>
}
 801fca6:	bd08      	pop	{r3, pc}
        spinbox->step = 1;
 801fca8:	2301      	movs	r3, #1
 801fcaa:	e7f9      	b.n	801fca0 <lv_spinbox_step_next+0x14>
 801fcac:	66666667 	.word	0x66666667

0801fcb0 <lv_spinbox_step_prev>:
{
 801fcb0:	b510      	push	{r4, lr}
    int32_t new_step = spinbox->step * 10;
 801fcb2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 801fcb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 801fcb8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	bfb8      	it	lt
 801fcbe:	425b      	neglt	r3, r3
 801fcc0:	6e81      	ldr	r1, [r0, #104]	; 0x68
 801fcc2:	428b      	cmp	r3, r1
 801fcc4:	bfb8      	it	lt
 801fcc6:	460b      	movlt	r3, r1
    if(new_step <= step_limit) spinbox->step = new_step;
 801fcc8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801fccc:	bfa4      	itt	ge
 801fcce:	0054      	lslge	r4, r2, #1
 801fcd0:	6704      	strge	r4, [r0, #112]	; 0x70
    lv_spinbox_updatevalue(obj);
 801fcd2:	f7ff ff1d 	bl	801fb10 <lv_spinbox_updatevalue>
}
 801fcd6:	bd10      	pop	{r4, pc}

0801fcd8 <lv_spinbox_increment>:
{
 801fcd8:	b508      	push	{r3, lr}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 801fcda:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801fcdc:	6f01      	ldr	r1, [r0, #112]	; 0x70
 801fcde:	eb03 0c01 	add.w	ip, r3, r1
 801fce2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 801fce4:	4594      	cmp	ip, r2
 801fce6:	dc0c      	bgt.n	801fd02 <lv_spinbox_increment+0x2a>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 801fce8:	f1bc 0f00 	cmp.w	ip, #0
 801fcec:	dd03      	ble.n	801fcf6 <lv_spinbox_increment+0x1e>
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	bfbc      	itt	lt
 801fcf2:	425b      	neglt	r3, r3
 801fcf4:	6643      	strlt	r3, [r0, #100]	; 0x64
        spinbox->value += spinbox->step;
 801fcf6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801fcf8:	440b      	add	r3, r1
 801fcfa:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 801fcfc:	f7ff ff08 	bl	801fb10 <lv_spinbox_updatevalue>
}
 801fd00:	bd08      	pop	{r3, pc}
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 801fd02:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 801fd06:	f011 0f01 	tst.w	r1, #1
 801fd0a:	d001      	beq.n	801fd10 <lv_spinbox_increment+0x38>
 801fd0c:	4293      	cmp	r3, r2
 801fd0e:	d001      	beq.n	801fd14 <lv_spinbox_increment+0x3c>
            spinbox->value = spinbox->range_max;
 801fd10:	6642      	str	r2, [r0, #100]	; 0x64
 801fd12:	e7f3      	b.n	801fcfc <lv_spinbox_increment+0x24>
            spinbox->value = spinbox->range_min;
 801fd14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801fd16:	6643      	str	r3, [r0, #100]	; 0x64
 801fd18:	e7f0      	b.n	801fcfc <lv_spinbox_increment+0x24>

0801fd1a <lv_spinbox_decrement>:
{
 801fd1a:	b508      	push	{r3, lr}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 801fd1c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801fd1e:	6f01      	ldr	r1, [r0, #112]	; 0x70
 801fd20:	eba3 0c01 	sub.w	ip, r3, r1
 801fd24:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 801fd26:	4594      	cmp	ip, r2
 801fd28:	db0d      	blt.n	801fd46 <lv_spinbox_decrement+0x2c>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 801fd2a:	f1bc 0f00 	cmp.w	ip, #0
 801fd2e:	db05      	blt.n	801fd3c <lv_spinbox_decrement+0x22>
        spinbox->value -= spinbox->step;
 801fd30:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801fd32:	1a5b      	subs	r3, r3, r1
 801fd34:	6643      	str	r3, [r0, #100]	; 0x64
    lv_spinbox_updatevalue(obj);
 801fd36:	f7ff feeb 	bl	801fb10 <lv_spinbox_updatevalue>
}
 801fd3a:	bd08      	pop	{r3, pc}
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 801fd3c:	2b00      	cmp	r3, #0
 801fd3e:	bfc4      	itt	gt
 801fd40:	425b      	neggt	r3, r3
 801fd42:	6643      	strgt	r3, [r0, #100]	; 0x64
 801fd44:	e7f4      	b.n	801fd30 <lv_spinbox_decrement+0x16>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 801fd46:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
 801fd4a:	f011 0f01 	tst.w	r1, #1
 801fd4e:	d001      	beq.n	801fd54 <lv_spinbox_decrement+0x3a>
 801fd50:	4293      	cmp	r3, r2
 801fd52:	d001      	beq.n	801fd58 <lv_spinbox_decrement+0x3e>
            spinbox->value = spinbox->range_min;
 801fd54:	6642      	str	r2, [r0, #100]	; 0x64
 801fd56:	e7ee      	b.n	801fd36 <lv_spinbox_decrement+0x1c>
            spinbox->value = spinbox->range_max;
 801fd58:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801fd5a:	6643      	str	r3, [r0, #100]	; 0x64
 801fd5c:	e7eb      	b.n	801fd36 <lv_spinbox_decrement+0x1c>
	...

0801fd60 <lv_spinbox_event>:
{
 801fd60:	b570      	push	{r4, r5, r6, lr}
 801fd62:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801fd64:	4866      	ldr	r0, [pc, #408]	; (801ff00 <lv_spinbox_event+0x1a0>)
 801fd66:	f7e4 fa30 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801fd6a:	2801      	cmp	r0, #1
 801fd6c:	d000      	beq.n	801fd70 <lv_spinbox_event+0x10>
}
 801fd6e:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801fd70:	4620      	mov	r0, r4
 801fd72:	f7e4 fb4d 	bl	8004410 <lv_event_get_code>
 801fd76:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801fd78:	4620      	mov	r0, r4
 801fd7a:	f7e4 fb45 	bl	8004408 <lv_event_get_target>
 801fd7e:	4606      	mov	r6, r0
    if(code == LV_EVENT_RELEASED) {
 801fd80:	2d08      	cmp	r5, #8
 801fd82:	d01a      	beq.n	801fdba <lv_spinbox_event+0x5a>
    else if(code == LV_EVENT_KEY) {
 801fd84:	2d0d      	cmp	r5, #13
 801fd86:	d1f2      	bne.n	801fd6e <lv_spinbox_event+0xe>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801fd88:	f7e4 fec2 	bl	8004b10 <lv_indev_get_act>
 801fd8c:	f7e4 fec6 	bl	8004b1c <lv_indev_get_type>
 801fd90:	4605      	mov	r5, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 801fd92:	4620      	mov	r0, r4
 801fd94:	f7e4 fb40 	bl	8004418 <lv_event_get_param>
 801fd98:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 801fd9a:	2913      	cmp	r1, #19
 801fd9c:	f000 8093 	beq.w	801fec6 <lv_spinbox_event+0x166>
        else if(c == LV_KEY_LEFT) {
 801fda0:	2914      	cmp	r1, #20
 801fda2:	f000 809a 	beq.w	801feda <lv_spinbox_event+0x17a>
        else if(c == LV_KEY_UP) {
 801fda6:	2911      	cmp	r1, #17
 801fda8:	f000 80a1 	beq.w	801feee <lv_spinbox_event+0x18e>
        else if(c == LV_KEY_DOWN) {
 801fdac:	2912      	cmp	r1, #18
 801fdae:	f000 80a2 	beq.w	801fef6 <lv_spinbox_event+0x196>
            lv_textarea_add_char(obj, c);
 801fdb2:	4630      	mov	r0, r6
 801fdb4:	f00c fab4 	bl	802c320 <lv_textarea_add_char>
 801fdb8:	e7d9      	b.n	801fd6e <lv_spinbox_event+0xe>
        lv_indev_t * indev = lv_indev_get_act();
 801fdba:	f7e4 fea9 	bl	8004b10 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801fdbe:	f7e4 fead 	bl	8004b1c <lv_indev_get_type>
 801fdc2:	2804      	cmp	r0, #4
 801fdc4:	d015      	beq.n	801fdf2 <lv_spinbox_event+0x92>
            const char * txt = lv_textarea_get_text(obj);
 801fdc6:	4630      	mov	r0, r6
 801fdc8:	f00c f964 	bl	802c094 <lv_textarea_get_text>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 801fdcc:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801fdce:	5d03      	ldrb	r3, [r0, r4]
 801fdd0:	2b2e      	cmp	r3, #46	; 0x2e
 801fdd2:	d047      	beq.n	801fe64 <lv_spinbox_event+0x104>
            size_t txt_len = strlen(txt);
 801fdd4:	f7e0 fa30 	bl	8000238 <strlen>
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 801fdd8:	4284      	cmp	r4, r0
 801fdda:	d06a      	beq.n	801feb2 <lv_spinbox_event+0x152>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 801fddc:	2c00      	cmp	r4, #0
 801fdde:	d144      	bne.n	801fe6a <lv_spinbox_event+0x10a>
 801fde0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	db6a      	blt.n	801febc <lv_spinbox_event+0x15c>
            size_t len = spinbox->digit_count - 1;
 801fde6:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
 801fdea:	f001 010f 	and.w	r1, r1, #15
 801fdee:	3901      	subs	r1, #1
            if(spinbox->range_min < 0) pos++;
 801fdf0:	e050      	b.n	801fe94 <lv_spinbox_event+0x134>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 801fdf2:	4630      	mov	r0, r6
 801fdf4:	f7e7 f963 	bl	80070be <lv_obj_get_group>
 801fdf8:	f7e4 fda8 	bl	800494c <lv_group_get_editing>
 801fdfc:	2800      	cmp	r0, #0
 801fdfe:	d0b6      	beq.n	801fd6e <lv_spinbox_event+0xe>
                if(spinbox->digit_count > 1) {
 801fe00:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
 801fe04:	f002 020f 	and.w	r2, r2, #15
 801fe08:	2a01      	cmp	r2, #1
 801fe0a:	d9b0      	bls.n	801fd6e <lv_spinbox_event+0xe>
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 801fe0c:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
 801fe10:	f003 0306 	and.w	r3, r3, #6
 801fe14:	2b04      	cmp	r3, #4
 801fe16:	d110      	bne.n	801fe3a <lv_spinbox_event+0xda>
                        if(spinbox->step > 1) {
 801fe18:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801fe1a:	2b01      	cmp	r3, #1
 801fe1c:	dd03      	ble.n	801fe26 <lv_spinbox_event+0xc6>
                            lv_spinbox_step_next(obj);
 801fe1e:	4630      	mov	r0, r6
 801fe20:	f7ff ff34 	bl	801fc8c <lv_spinbox_step_next>
 801fe24:	e7a3      	b.n	801fd6e <lv_spinbox_event+0xe>
                            spinbox->step = lv_pow(10, spinbox->digit_count - 2);
 801fe26:	3a02      	subs	r2, #2
 801fe28:	200a      	movs	r0, #10
 801fe2a:	2100      	movs	r1, #0
 801fe2c:	f002 f82d 	bl	8021e8a <lv_pow>
 801fe30:	6730      	str	r0, [r6, #112]	; 0x70
                            lv_spinbox_step_prev(obj);
 801fe32:	4630      	mov	r0, r6
 801fe34:	f7ff ff3c 	bl	801fcb0 <lv_spinbox_step_prev>
 801fe38:	e799      	b.n	801fd6e <lv_spinbox_event+0xe>
                        if(spinbox->step < lv_pow(10, spinbox->digit_count - 1)) {
 801fe3a:	6f34      	ldr	r4, [r6, #112]	; 0x70
 801fe3c:	17e5      	asrs	r5, r4, #31
 801fe3e:	3a01      	subs	r2, #1
 801fe40:	200a      	movs	r0, #10
 801fe42:	2100      	movs	r1, #0
 801fe44:	f002 f821 	bl	8021e8a <lv_pow>
 801fe48:	4284      	cmp	r4, r0
 801fe4a:	eb75 0301 	sbcs.w	r3, r5, r1
 801fe4e:	da03      	bge.n	801fe58 <lv_spinbox_event+0xf8>
                            lv_spinbox_step_prev(obj);
 801fe50:	4630      	mov	r0, r6
 801fe52:	f7ff ff2d 	bl	801fcb0 <lv_spinbox_step_prev>
 801fe56:	e78a      	b.n	801fd6e <lv_spinbox_event+0xe>
                            spinbox->step = 10;
 801fe58:	230a      	movs	r3, #10
 801fe5a:	6733      	str	r3, [r6, #112]	; 0x70
                            lv_spinbox_step_next(obj);
 801fe5c:	4630      	mov	r0, r6
 801fe5e:	f7ff ff15 	bl	801fc8c <lv_spinbox_step_next>
 801fe62:	e784      	b.n	801fd6e <lv_spinbox_event+0xe>
                lv_textarea_cursor_left(obj);
 801fe64:	4630      	mov	r0, r6
 801fe66:	f00c fbab 	bl	802c5c0 <lv_textarea_cursor_left>
            size_t len = spinbox->digit_count - 1;
 801fe6a:	f896 0074 	ldrb.w	r0, [r6, #116]	; 0x74
 801fe6e:	f000 010f 	and.w	r1, r0, #15
 801fe72:	3901      	subs	r1, #1
            uint16_t cp = spinbox->ta.cursor.pos;
 801fe74:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801fe76:	b293      	uxth	r3, r2
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 801fe78:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
 801fe7c:	d905      	bls.n	801fe8a <lv_spinbox_event+0x12a>
 801fe7e:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 801fe82:	bf1c      	itt	ne
 801fe84:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 801fe88:	b29b      	uxthne	r3, r3
            uint32_t pos = len - cp;
 801fe8a:	1ac9      	subs	r1, r1, r3
            if(spinbox->range_min < 0) pos++;
 801fe8c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	bfb8      	it	lt
 801fe92:	3101      	addlt	r1, #1
            spinbox->step = 1;
 801fe94:	2301      	movs	r3, #1
 801fe96:	6733      	str	r3, [r6, #112]	; 0x70
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 801fe98:	2900      	cmp	r1, #0
 801fe9a:	f43f af68 	beq.w	801fd6e <lv_spinbox_event+0xe>
 801fe9e:	2200      	movs	r2, #0
 801fea0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801fea4:	005b      	lsls	r3, r3, #1
 801fea6:	3201      	adds	r2, #1
 801fea8:	b292      	uxth	r2, r2
 801feaa:	428a      	cmp	r2, r1
 801feac:	d3f8      	bcc.n	801fea0 <lv_spinbox_event+0x140>
 801feae:	6733      	str	r3, [r6, #112]	; 0x70
 801feb0:	e75d      	b.n	801fd6e <lv_spinbox_event+0xe>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 801feb2:	1e41      	subs	r1, r0, #1
 801feb4:	4630      	mov	r0, r6
 801feb6:	f00b ffeb 	bl	802be90 <lv_textarea_set_cursor_pos>
 801feba:	e7d6      	b.n	801fe6a <lv_spinbox_event+0x10a>
                lv_textarea_set_cursor_pos(obj, 1);
 801febc:	2101      	movs	r1, #1
 801febe:	4630      	mov	r0, r6
 801fec0:	f00b ffe6 	bl	802be90 <lv_textarea_set_cursor_pos>
 801fec4:	e7d1      	b.n	801fe6a <lv_spinbox_event+0x10a>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 801fec6:	2d04      	cmp	r5, #4
 801fec8:	d003      	beq.n	801fed2 <lv_spinbox_event+0x172>
                lv_spinbox_step_next(obj);
 801feca:	4630      	mov	r0, r6
 801fecc:	f7ff fede 	bl	801fc8c <lv_spinbox_step_next>
 801fed0:	e74d      	b.n	801fd6e <lv_spinbox_event+0xe>
                lv_spinbox_increment(obj);
 801fed2:	4630      	mov	r0, r6
 801fed4:	f7ff ff00 	bl	801fcd8 <lv_spinbox_increment>
 801fed8:	e749      	b.n	801fd6e <lv_spinbox_event+0xe>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 801feda:	2d04      	cmp	r5, #4
 801fedc:	d003      	beq.n	801fee6 <lv_spinbox_event+0x186>
                lv_spinbox_step_prev(obj);
 801fede:	4630      	mov	r0, r6
 801fee0:	f7ff fee6 	bl	801fcb0 <lv_spinbox_step_prev>
 801fee4:	e743      	b.n	801fd6e <lv_spinbox_event+0xe>
                lv_spinbox_decrement(obj);
 801fee6:	4630      	mov	r0, r6
 801fee8:	f7ff ff17 	bl	801fd1a <lv_spinbox_decrement>
 801feec:	e73f      	b.n	801fd6e <lv_spinbox_event+0xe>
            lv_spinbox_increment(obj);
 801feee:	4630      	mov	r0, r6
 801fef0:	f7ff fef2 	bl	801fcd8 <lv_spinbox_increment>
 801fef4:	e73b      	b.n	801fd6e <lv_spinbox_event+0xe>
            lv_spinbox_decrement(obj);
 801fef6:	4630      	mov	r0, r6
 801fef8:	f7ff ff0f 	bl	801fd1a <lv_spinbox_decrement>
 801fefc:	e737      	b.n	801fd6e <lv_spinbox_event+0xe>
 801fefe:	bf00      	nop
 801ff00:	0802dee8 	.word	0x0802dee8

0801ff04 <lv_spinner_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_spinner_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801ff04:	b570      	push	{r4, r5, r6, lr}
 801ff06:	b092      	sub	sp, #72	; 0x48
 801ff08:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 801ff0a:	2102      	movs	r1, #2
 801ff0c:	4620      	mov	r0, r4
 801ff0e:	f7e7 f86b 	bl	8006fe8 <lv_obj_clear_flag>

    lv_anim_t a;
    lv_anim_init(&a);
 801ff12:	a801      	add	r0, sp, #4
 801ff14:	f000 ff92 	bl	8020e3c <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 801ff18:	9401      	str	r4, [sp, #4]
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 801ff1a:	4b16      	ldr	r3, [pc, #88]	; (801ff74 <lv_spinner_constructor+0x70>)
 801ff1c:	9302      	str	r3, [sp, #8]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 801ff1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ff22:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    lv_anim_set_var(&a, obj);
    lv_anim_set_exec_cb(&a, arc_anim_end_angle);
    lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
    lv_anim_set_time(&a, time_param);
 801ff26:	4b14      	ldr	r3, [pc, #80]	; (801ff78 <lv_spinner_constructor+0x74>)
    a->time = duration;
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	930c      	str	r3, [sp, #48]	; 0x30
    lv_anim_set_values(&a, arc_length_param, 360 + arc_length_param);
 801ff2c:	4b13      	ldr	r3, [pc, #76]	; (801ff7c <lv_spinner_constructor+0x78>)
 801ff2e:	681b      	ldr	r3, [r3, #0]
    a->start_value = start;
 801ff30:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 801ff32:	930a      	str	r3, [sp, #40]	; 0x28
 801ff34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
    a->end_value = end;
 801ff38:	930b      	str	r3, [sp, #44]	; 0x2c
    lv_anim_start(&a);
 801ff3a:	a801      	add	r0, sp, #4
 801ff3c:	f000 ffd0 	bl	8020ee0 <lv_anim_start>
    a->path_cb = path_cb;
 801ff40:	4b0f      	ldr	r3, [pc, #60]	; (801ff80 <lv_spinner_constructor+0x7c>)
 801ff42:	9308      	str	r3, [sp, #32]
    a->start_value = start;
 801ff44:	2500      	movs	r5, #0
 801ff46:	9509      	str	r5, [sp, #36]	; 0x24
    a->current_value = start;
 801ff48:	950a      	str	r5, [sp, #40]	; 0x28
    a->end_value = end;
 801ff4a:	f44f 76b4 	mov.w	r6, #360	; 0x168
 801ff4e:	960b      	str	r6, [sp, #44]	; 0x2c
    a->exec_cb = exec_cb;
 801ff50:	4b0c      	ldr	r3, [pc, #48]	; (801ff84 <lv_spinner_constructor+0x80>)
 801ff52:	9302      	str	r3, [sp, #8]

    lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
    lv_anim_set_values(&a, 0, 360);
    lv_anim_set_exec_cb(&a, arc_anim_start_angle);
    lv_anim_start(&a);
 801ff54:	a801      	add	r0, sp, #4
 801ff56:	f000 ffc3 	bl	8020ee0 <lv_anim_start>

    lv_arc_set_bg_angles(obj, 0, 360);
 801ff5a:	4632      	mov	r2, r6
 801ff5c:	4629      	mov	r1, r5
 801ff5e:	4620      	mov	r0, r4
 801ff60:	f004 feb2 	bl	8024cc8 <lv_arc_set_bg_angles>
    lv_arc_set_rotation(obj, 270);
 801ff64:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801ff68:	4620      	mov	r0, r4
 801ff6a:	f004 feb8 	bl	8024cde <lv_arc_set_rotation>
}
 801ff6e:	b012      	add	sp, #72	; 0x48
 801ff70:	bd70      	pop	{r4, r5, r6, pc}
 801ff72:	bf00      	nop
 801ff74:	0801ff93 	.word	0x0801ff93
 801ff78:	200027c0 	.word	0x200027c0
 801ff7c:	200027bc 	.word	0x200027bc
 801ff80:	08020ff9 	.word	0x08020ff9
 801ff84:	0801ff89 	.word	0x0801ff89

0801ff88 <arc_anim_start_angle>:


static void arc_anim_start_angle(void * obj, int32_t v)
{
 801ff88:	b508      	push	{r3, lr}
    lv_arc_set_start_angle(obj, (uint16_t) v);
 801ff8a:	b289      	uxth	r1, r1
 801ff8c:	f004 fd32 	bl	80249f4 <lv_arc_set_start_angle>
}
 801ff90:	bd08      	pop	{r3, pc}

0801ff92 <arc_anim_end_angle>:


static void arc_anim_end_angle(void * obj, int32_t v)
{
 801ff92:	b508      	push	{r3, lr}
    lv_arc_set_end_angle(obj, (uint16_t) v);
 801ff94:	b289      	uxth	r1, r1
 801ff96:	f004 fd6d 	bl	8024a74 <lv_arc_set_end_angle>
}
 801ff9a:	bd08      	pop	{r3, pc}

0801ff9c <lv_tabview_destructor>:
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
}

static void lv_tabview_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 801ff9c:	b570      	push	{r4, r5, r6, lr}
 801ff9e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    uint32_t i;
    if(tabview->tab_pos & LV_DIR_VER) {
 801ffa0:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801ffa4:	f013 0f0c 	tst.w	r3, #12
 801ffa8:	d00f      	beq.n	801ffca <lv_tabview_destructor+0x2e>
        for(i = 0; i < tabview->tab_cnt; i++) {
 801ffaa:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 801ffac:	b313      	cbz	r3, 801fff4 <lv_tabview_destructor+0x58>
 801ffae:	2500      	movs	r5, #0
            lv_mem_free(tabview->map[i]);
            tabview->map[i] = NULL;
 801ffb0:	462e      	mov	r6, r5
            lv_mem_free(tabview->map[i]);
 801ffb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ffb4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ffb8:	f001 ffd6 	bl	8021f68 <lv_mem_free>
            tabview->map[i] = NULL;
 801ffbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ffbe:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 801ffc2:	3501      	adds	r5, #1
 801ffc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801ffc6:	42ab      	cmp	r3, r5
 801ffc8:	d8f3      	bhi.n	801ffb2 <lv_tabview_destructor+0x16>
        }
    }
    if(tabview->tab_pos & LV_DIR_HOR) {
 801ffca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ffce:	f013 0f03 	tst.w	r3, #3
 801ffd2:	d00f      	beq.n	801fff4 <lv_tabview_destructor+0x58>
        for(i = 0; i < tabview->tab_cnt; i++) {
 801ffd4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801ffd6:	b16b      	cbz	r3, 801fff4 <lv_tabview_destructor+0x58>
 801ffd8:	2500      	movs	r5, #0
            lv_mem_free(tabview->map[i * 2]);
            tabview->map[i * 2] = NULL;
 801ffda:	462e      	mov	r6, r5
            lv_mem_free(tabview->map[i * 2]);
 801ffdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ffde:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 801ffe2:	f001 ffc1 	bl	8021f68 <lv_mem_free>
            tabview->map[i * 2] = NULL;
 801ffe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ffe8:	f843 6035 	str.w	r6, [r3, r5, lsl #3]
        for(i = 0; i < tabview->tab_cnt; i++) {
 801ffec:	3501      	adds	r5, #1
 801ffee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801fff0:	42ab      	cmp	r3, r5
 801fff2:	d8f3      	bhi.n	801ffdc <lv_tabview_destructor+0x40>
        }
    }


    lv_mem_free(tabview->map);
 801fff4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fff6:	f001 ffb7 	bl	8021f68 <lv_mem_free>
    tabview->map = NULL;
 801fffa:	2300      	movs	r3, #0
 801fffc:	6263      	str	r3, [r4, #36]	; 0x24
}
 801fffe:	bd70      	pop	{r4, r5, r6, pc}

08020000 <lv_tabview_constructor>:
{
 8020000:	b570      	push	{r4, r5, r6, lr}
 8020002:	460c      	mov	r4, r1
    tabview->tab_pos = tabpos_create;
 8020004:	4b52      	ldr	r3, [pc, #328]	; (8020150 <lv_tabview_constructor+0x150>)
 8020006:	781b      	ldrb	r3, [r3, #0]
 8020008:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    switch(tabview->tab_pos) {
 802000c:	3b01      	subs	r3, #1
 802000e:	2b07      	cmp	r3, #7
 8020010:	d809      	bhi.n	8020026 <lv_tabview_constructor+0x26>
 8020012:	e8df f003 	tbb	[pc, r3]
 8020016:	5e59      	.short	0x5e59
 8020018:	08080408 	.word	0x08080408
 802001c:	5408      	.short	0x5408
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 802001e:	2101      	movs	r1, #1
 8020020:	4620      	mov	r0, r4
 8020022:	f7f6 fffd 	bl	8017020 <lv_obj_set_flex_flow>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8020026:	f242 0264 	movw	r2, #8292	; 0x2064
 802002a:	4611      	mov	r1, r2
 802002c:	4620      	mov	r0, r4
 802002e:	f7e7 ffed 	bl	800800c <lv_obj_set_size>
    btnm = lv_btnmatrix_create(obj);
 8020032:	4620      	mov	r0, r4
 8020034:	f006 f8ee 	bl	8026214 <lv_btnmatrix_create>
 8020038:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 802003a:	4620      	mov	r0, r4
 802003c:	f7e6 ff8e 	bl	8006f5c <lv_obj_create>
 8020040:	4605      	mov	r5, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 8020042:	2101      	movs	r1, #1
 8020044:	4630      	mov	r0, r6
 8020046:	f006 fde1 	bl	8026c0c <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 802004a:	2004      	movs	r0, #4
 802004c:	f001 ff6e 	bl	8021f2c <lv_mem_alloc>
 8020050:	6260      	str	r0, [r4, #36]	; 0x24
    tabview->map[0] = "";
 8020052:	4b40      	ldr	r3, [pc, #256]	; (8020154 <lv_tabview_constructor+0x154>)
 8020054:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 8020056:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8020058:	4630      	mov	r0, r6
 802005a:	f006 f8e7 	bl	802622c <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 802005e:	2300      	movs	r3, #0
 8020060:	221c      	movs	r2, #28
 8020062:	493d      	ldr	r1, [pc, #244]	; (8020158 <lv_tabview_constructor+0x158>)
 8020064:	4630      	mov	r0, r6
 8020066:	f7e4 f9ef 	bl	8004448 <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 802006a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802006e:	4630      	mov	r0, r6
 8020070:	f7e6 ff80 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 8020074:	2300      	movs	r3, #0
 8020076:	461a      	mov	r2, r3
 8020078:	4938      	ldr	r1, [pc, #224]	; (802015c <lv_tabview_constructor+0x15c>)
 802007a:	4628      	mov	r0, r5
 802007c:	f7e4 f9e4 	bl	8004448 <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 8020080:	2100      	movs	r1, #0
 8020082:	4628      	mov	r0, r5
 8020084:	f7e9 fc1b 	bl	80098be <lv_obj_set_scrollbar_mode>
    switch(tabview->tab_pos) {
 8020088:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 802008c:	2b04      	cmp	r3, #4
 802008e:	d027      	beq.n	80200e0 <lv_tabview_constructor+0xe0>
 8020090:	d824      	bhi.n	80200dc <lv_tabview_constructor+0xdc>
 8020092:	3b01      	subs	r3, #1
 8020094:	b2db      	uxtb	r3, r3
 8020096:	2b01      	cmp	r3, #1
 8020098:	d833      	bhi.n	8020102 <lv_tabview_constructor+0x102>
            lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 802009a:	f242 0264 	movw	r2, #8292	; 0x2064
 802009e:	4b30      	ldr	r3, [pc, #192]	; (8020160 <lv_tabview_constructor+0x160>)
 80200a0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80200a4:	4630      	mov	r0, r6
 80200a6:	f7e7 ffb1 	bl	800800c <lv_obj_set_size>
            lv_obj_set_height(cont, LV_PCT(100));
 80200aa:	f242 0164 	movw	r1, #8292	; 0x2064
 80200ae:	4628      	mov	r0, r5
 80200b0:	f7e7 ff95 	bl	8007fde <lv_obj_set_height>
            lv_obj_set_flex_grow(cont, 1);
 80200b4:	2101      	movs	r1, #1
 80200b6:	4628      	mov	r0, r5
 80200b8:	f7f7 f802 	bl	80170c0 <lv_obj_set_flex_grow>
            break;
 80200bc:	e021      	b.n	8020102 <lv_tabview_constructor+0x102>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 80200be:	2109      	movs	r1, #9
 80200c0:	4620      	mov	r0, r4
 80200c2:	f7f6 ffad 	bl	8017020 <lv_obj_set_flex_flow>
            break;
 80200c6:	e7ae      	b.n	8020026 <lv_tabview_constructor+0x26>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 80200c8:	2100      	movs	r1, #0
 80200ca:	4620      	mov	r0, r4
 80200cc:	f7f6 ffa8 	bl	8017020 <lv_obj_set_flex_flow>
            break;
 80200d0:	e7a9      	b.n	8020026 <lv_tabview_constructor+0x26>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 80200d2:	2108      	movs	r1, #8
 80200d4:	4620      	mov	r0, r4
 80200d6:	f7f6 ffa3 	bl	8017020 <lv_obj_set_flex_flow>
            break;
 80200da:	e7a4      	b.n	8020026 <lv_tabview_constructor+0x26>
    switch(tabview->tab_pos) {
 80200dc:	2b08      	cmp	r3, #8
 80200de:	d110      	bne.n	8020102 <lv_tabview_constructor+0x102>
            lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 80200e0:	4b1f      	ldr	r3, [pc, #124]	; (8020160 <lv_tabview_constructor+0x160>)
 80200e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80200e6:	f242 0164 	movw	r1, #8292	; 0x2064
 80200ea:	4630      	mov	r0, r6
 80200ec:	f7e7 ff8e 	bl	800800c <lv_obj_set_size>
            lv_obj_set_width(cont, LV_PCT(100));
 80200f0:	f242 0164 	movw	r1, #8292	; 0x2064
 80200f4:	4628      	mov	r0, r5
 80200f6:	f7e7 ff5b 	bl	8007fb0 <lv_obj_set_width>
            lv_obj_set_flex_grow(cont, 1);
 80200fa:	2101      	movs	r1, #1
 80200fc:	4628      	mov	r0, r5
 80200fe:	f7f6 ffdf 	bl	80170c0 <lv_obj_set_flex_grow>
    lv_group_t * g = lv_group_get_default();
 8020102:	f7e4 facb 	bl	800469c <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 8020106:	b110      	cbz	r0, 802010e <lv_tabview_constructor+0x10e>
 8020108:	4631      	mov	r1, r6
 802010a:	f7e4 fb58 	bl	80047be <lv_group_add_obj>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 802010e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8020112:	f013 0f0c 	tst.w	r3, #12
 8020116:	d011      	beq.n	802013c <lv_tabview_constructor+0x13c>
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 8020118:	2100      	movs	r1, #0
 802011a:	4628      	mov	r0, r5
 802011c:	f7f6 ff80 	bl	8017020 <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 8020120:	2103      	movs	r1, #3
 8020122:	4628      	mov	r0, r5
 8020124:	f7e9 fbee 	bl	8009904 <lv_obj_set_scroll_snap_x>
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 8020128:	2180      	movs	r1, #128	; 0x80
 802012a:	4628      	mov	r0, r5
 802012c:	f7e6 ff22 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8020130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020134:	4628      	mov	r0, r5
 8020136:	f7e6 ff57 	bl	8006fe8 <lv_obj_clear_flag>
}
 802013a:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_COLUMN);
 802013c:	2101      	movs	r1, #1
 802013e:	4628      	mov	r0, r5
 8020140:	f7f6 ff6e 	bl	8017020 <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_y(cont, LV_SCROLL_SNAP_CENTER);
 8020144:	2103      	movs	r1, #3
 8020146:	4628      	mov	r0, r5
 8020148:	f7e9 fbe7 	bl	800991a <lv_obj_set_scroll_snap_y>
 802014c:	e7ec      	b.n	8020128 <lv_tabview_constructor+0x128>
 802014e:	bf00      	nop
 8020150:	200027c4 	.word	0x200027c4
 8020154:	0802d578 	.word	0x0802d578
 8020158:	0802031b 	.word	0x0802031b
 802015c:	0802024d 	.word	0x0802024d
 8020160:	200027c6 	.word	0x200027c6

08020164 <lv_tabview_get_content>:
{
 8020164:	b508      	push	{r3, lr}
    return lv_obj_get_child(tv, 1);
 8020166:	2101      	movs	r1, #1
 8020168:	f7eb fde6 	bl	800bd38 <lv_obj_get_child>
}
 802016c:	bd08      	pop	{r3, pc}

0802016e <lv_tabview_get_tab_btns>:
{
 802016e:	b508      	push	{r3, lr}
    return lv_obj_get_child(tv, 0);
 8020170:	2100      	movs	r1, #0
 8020172:	f7eb fde1 	bl	800bd38 <lv_obj_get_child>
}
 8020176:	bd08      	pop	{r3, pc}

08020178 <lv_tabview_set_act>:
{
 8020178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802017c:	4604      	mov	r4, r0
 802017e:	460d      	mov	r5, r1
 8020180:	4616      	mov	r6, r2
    if(id >= tabview->tab_cnt) {
 8020182:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8020184:	428b      	cmp	r3, r1
        id = tabview->tab_cnt - 1;
 8020186:	bf98      	it	ls
 8020188:	f103 35ff 	addls.w	r5, r3, #4294967295	; 0xffffffff
    lv_obj_update_layout(obj);
 802018c:	f7e9 f90a 	bl	80093a4 <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 8020190:	4620      	mov	r0, r4
 8020192:	f7ff ffe7 	bl	8020164 <lv_tabview_get_content>
    if(cont == NULL) return;
 8020196:	4607      	mov	r7, r0
 8020198:	b358      	cbz	r0, 80201f2 <lv_tabview_set_act+0x7a>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 802019a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 802019e:	f013 0f0c 	tst.w	r3, #12
 80201a2:	d028      	beq.n	80201f6 <lv_tabview_set_act+0x7e>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80201a4:	2215      	movs	r2, #21
 80201a6:	2100      	movs	r1, #0
 80201a8:	f7ea fe80 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80201ac:	fa0f f980 	sxth.w	r9, r0
        lv_coord_t w = lv_obj_get_content_width(cont);
 80201b0:	4638      	mov	r0, r7
 80201b2:	f7e8 f808 	bl	80081c6 <lv_obj_get_content_width>
 80201b6:	4680      	mov	r8, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80201b8:	2216      	movs	r2, #22
 80201ba:	2100      	movs	r1, #0
 80201bc:	4620      	mov	r0, r4
 80201be:	f7ea fe75 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80201c2:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 80201c4:	2801      	cmp	r0, #1
            lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 80201c6:	eb09 0108 	add.w	r1, r9, r8
 80201ca:	bf12      	itee	ne
 80201cc:	4369      	mulne	r1, r5
            int32_t id_rtl = -(int32_t)id;
 80201ce:	f1c5 0800 	rsbeq	r8, r5, #0
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 80201d2:	fb01 f108 	muleq.w	r1, r1, r8
 80201d6:	4632      	mov	r2, r6
 80201d8:	b209      	sxth	r1, r1
 80201da:	4638      	mov	r0, r7
 80201dc:	f7e9 fea6 	bl	8009f2c <lv_obj_scroll_to_x>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 80201e0:	4620      	mov	r0, r4
 80201e2:	f7ff ffc4 	bl	802016e <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 80201e6:	b2ad      	uxth	r5, r5
 80201e8:	2280      	movs	r2, #128	; 0x80
 80201ea:	4629      	mov	r1, r5
 80201ec:	f006 f9b5 	bl	802655a <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 80201f0:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 80201f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80201f6:	2214      	movs	r2, #20
 80201f8:	2100      	movs	r1, #0
 80201fa:	f7ea fe57 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80201fe:	fa0f f880 	sxth.w	r8, r0
        lv_coord_t h = lv_obj_get_content_height(cont);
 8020202:	4638      	mov	r0, r7
 8020204:	f7e7 fffc 	bl	8008200 <lv_obj_get_content_height>
        lv_obj_scroll_to_y(cont, id * (gap + h), anim_en);
 8020208:	eb08 0100 	add.w	r1, r8, r0
 802020c:	fb05 f101 	mul.w	r1, r5, r1
 8020210:	4632      	mov	r2, r6
 8020212:	b209      	sxth	r1, r1
 8020214:	4638      	mov	r0, r7
 8020216:	f7e9 fe9d 	bl	8009f54 <lv_obj_scroll_to_y>
 802021a:	e7e1      	b.n	80201e0 <lv_tabview_set_act+0x68>

0802021c <lv_tabview_event>:

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 802021c:	b538      	push	{r3, r4, r5, lr}
 802021e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 8020220:	4809      	ldr	r0, [pc, #36]	; (8020248 <lv_tabview_event+0x2c>)
 8020222:	f7e3 ffd2 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8020226:	2801      	cmp	r0, #1
 8020228:	d000      	beq.n	802022c <lv_tabview_event+0x10>
    lv_obj_t * target = lv_event_get_target(e);

    if(code == LV_EVENT_SIZE_CHANGED) {
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
    }
}
 802022a:	bd38      	pop	{r3, r4, r5, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802022c:	4620      	mov	r0, r4
 802022e:	f7e4 f8ef 	bl	8004410 <lv_event_get_code>
 8020232:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8020234:	4620      	mov	r0, r4
 8020236:	f7e4 f8e7 	bl	8004408 <lv_event_get_target>
    if(code == LV_EVENT_SIZE_CHANGED) {
 802023a:	2d29      	cmp	r5, #41	; 0x29
 802023c:	d1f5      	bne.n	802022a <lv_tabview_event+0xe>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 802023e:	2200      	movs	r2, #0
 8020240:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8020242:	f7ff ff99 	bl	8020178 <lv_tabview_set_act>
 8020246:	e7f0      	b.n	802022a <lv_tabview_event+0xe>
 8020248:	0802df20 	.word	0x0802df20

0802024c <cont_scroll_end_event_cb>:
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 802024c:	b570      	push	{r4, r5, r6, lr}
 802024e:	b082      	sub	sp, #8
 8020250:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 8020252:	f7e4 f8d9 	bl	8004408 <lv_event_get_target>
 8020256:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8020258:	4620      	mov	r0, r4
 802025a:	f7e4 f8d9 	bl	8004410 <lv_event_get_code>
 802025e:	4604      	mov	r4, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 8020260:	4628      	mov	r0, r5
 8020262:	f7eb fd65 	bl	800bd30 <lv_obj_get_parent>
 8020266:	4606      	mov	r6, r0
    lv_tabview_t * tv_obj = (lv_tabview_t *)tv;
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8020268:	2c2b      	cmp	r4, #43	; 0x2b
 802026a:	d003      	beq.n	8020274 <cont_scroll_end_event_cb+0x28>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
    }
    else if(code == LV_EVENT_SCROLL_END) {
 802026c:	2c0a      	cmp	r4, #10
 802026e:	d006      	beq.n	802027e <cont_scroll_end_event_cb+0x32>
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);

        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 8020270:	b002      	add	sp, #8
 8020272:	bd70      	pop	{r4, r5, r6, pc}
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 8020274:	2200      	movs	r2, #0
 8020276:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8020278:	f7ff ff7e 	bl	8020178 <lv_tabview_set_act>
 802027c:	e7f8      	b.n	8020270 <cont_scroll_end_event_cb+0x24>
        lv_indev_t * indev = lv_indev_get_act();
 802027e:	f7e4 fc47 	bl	8004b10 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 8020282:	b110      	cbz	r0, 802028a <cont_scroll_end_event_cb+0x3e>
 8020284:	7903      	ldrb	r3, [r0, #4]
 8020286:	2b01      	cmp	r3, #1
 8020288:	d0f2      	beq.n	8020270 <cont_scroll_end_event_cb+0x24>
        lv_obj_get_scroll_end(cont, &p);
 802028a:	a901      	add	r1, sp, #4
 802028c:	4628      	mov	r0, r5
 802028e:	f7e9 fcdf 	bl	8009c50 <lv_obj_get_scroll_end>
        if((tv_obj->tab_pos & LV_DIR_VER) != 0) {
 8020292:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8020296:	f013 0f0c 	tst.w	r3, #12
 802029a:	d021      	beq.n	80202e0 <cont_scroll_end_event_cb+0x94>
            lv_coord_t w = lv_obj_get_content_width(cont);
 802029c:	4628      	mov	r0, r5
 802029e:	f7e7 ff92 	bl	80081c6 <lv_obj_get_content_width>
 80202a2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80202a4:	2216      	movs	r2, #22
 80202a6:	2100      	movs	r1, #0
 80202a8:	4630      	mov	r0, r6
 80202aa:	f7ea fdff 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80202ae:	b2c0      	uxtb	r0, r0
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 80202b0:	2801      	cmp	r0, #1
 80202b2:	d00a      	beq.n	80202ca <cont_scroll_end_event_cb+0x7e>
            else t = (p.x + w / 2) / w;
 80202b4:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80202b8:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 80202bc:	f343 034f 	sbfx	r3, r3, #1, #16
 80202c0:	441c      	add	r4, r3
 80202c2:	fb94 f4f5 	sdiv	r4, r4, r5
 80202c6:	b224      	sxth	r4, r4
 80202c8:	e017      	b.n	80202fa <cont_scroll_end_event_cb+0xae>
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 80202ca:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 80202ce:	f343 034f 	sbfx	r3, r3, #1, #16
 80202d2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80202d6:	1b1b      	subs	r3, r3, r4
 80202d8:	fb93 f4f5 	sdiv	r4, r3, r5
 80202dc:	b224      	sxth	r4, r4
 80202de:	e00c      	b.n	80202fa <cont_scroll_end_event_cb+0xae>
            lv_coord_t h = lv_obj_get_content_height(cont);
 80202e0:	4628      	mov	r0, r5
 80202e2:	f7e7 ff8d 	bl	8008200 <lv_obj_get_content_height>
            t = (p.y + h / 2) / h;
 80202e6:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 80202ea:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80202ee:	f343 034f 	sbfx	r3, r3, #1, #16
 80202f2:	441c      	add	r4, r3
 80202f4:	fb94 f4f0 	sdiv	r4, r4, r0
 80202f8:	b224      	sxth	r4, r4
        if(t < 0) t = 0;
 80202fa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
 80202fe:	8d75      	ldrh	r5, [r6, #42]	; 0x2a
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 8020300:	2201      	movs	r2, #1
 8020302:	4621      	mov	r1, r4
 8020304:	4630      	mov	r0, r6
 8020306:	f7ff ff37 	bl	8020178 <lv_tabview_set_act>
        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 802030a:	42ac      	cmp	r4, r5
 802030c:	d0b0      	beq.n	8020270 <cont_scroll_end_event_cb+0x24>
 802030e:	2200      	movs	r2, #0
 8020310:	211c      	movs	r1, #28
 8020312:	4630      	mov	r0, r6
 8020314:	f7e4 f856 	bl	80043c4 <lv_event_send>
 8020318:	e7aa      	b.n	8020270 <cont_scroll_end_event_cb+0x24>

0802031a <btns_value_changed_event_cb>:
{
 802031a:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 802031c:	f7e4 f874 	bl	8004408 <lv_event_get_target>
 8020320:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 8020322:	f7eb fd05 	bl	800bd30 <lv_obj_get_parent>
 8020326:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8020328:	4628      	mov	r0, r5
 802032a:	f006 f93c 	bl	80265a6 <lv_btnmatrix_get_selected_btn>
 802032e:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_ON);
 8020330:	2201      	movs	r2, #1
 8020332:	4620      	mov	r0, r4
 8020334:	f7ff ff20 	bl	8020178 <lv_tabview_set_act>
}
 8020338:	bd38      	pop	{r3, r4, r5, pc}
	...

0802033c <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 802033c:	b510      	push	{r4, lr}
 802033e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8020340:	f242 0264 	movw	r2, #8292	; 0x2064
 8020344:	4611      	mov	r1, r2
 8020346:	4620      	mov	r0, r4
 8020348:	f7e7 fe60 	bl	800800c <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 802034c:	2300      	movs	r3, #0
 802034e:	461a      	mov	r2, r3
 8020350:	4908      	ldr	r1, [pc, #32]	; (8020374 <lv_tileview_constructor+0x38>)
 8020352:	4620      	mov	r0, r4
 8020354:	f7e4 f878 	bl	8004448 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 8020358:	2180      	movs	r1, #128	; 0x80
 802035a:	4620      	mov	r0, r4
 802035c:	f7e6 fe0a 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 8020360:	2103      	movs	r1, #3
 8020362:	4620      	mov	r0, r4
 8020364:	f7e9 face 	bl	8009904 <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 8020368:	2103      	movs	r1, #3
 802036a:	4620      	mov	r0, r4
 802036c:	f7e9 fad5 	bl	800991a <lv_obj_set_scroll_snap_y>

}
 8020370:	bd10      	pop	{r4, pc}
 8020372:	bf00      	nop
 8020374:	08020379 	.word	0x08020379

08020378 <tileview_event_cb>:
        lv_obj_set_scroll_dir(parent, create_dir);
    }
}

static void tileview_event_cb(lv_event_t * e)
{
 8020378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802037c:	b083      	sub	sp, #12
 802037e:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8020380:	f7e4 f846 	bl	8004410 <lv_event_get_code>
 8020384:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8020386:	4628      	mov	r0, r5
 8020388:	f7e4 f83e 	bl	8004408 <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 802038c:	2c0a      	cmp	r4, #10
 802038e:	d002      	beq.n	8020396 <tileview_event_cb+0x1e>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
    }
}
 8020390:	b003      	add	sp, #12
 8020392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020396:	4607      	mov	r7, r0
        lv_indev_t * indev = lv_indev_get_act();
 8020398:	f7e4 fbba 	bl	8004b10 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 802039c:	b110      	cbz	r0, 80203a4 <tileview_event_cb+0x2c>
 802039e:	7903      	ldrb	r3, [r0, #4]
 80203a0:	2b01      	cmp	r3, #1
 80203a2:	d0f5      	beq.n	8020390 <tileview_event_cb+0x18>
        lv_coord_t w = lv_obj_get_content_width(obj);
 80203a4:	4638      	mov	r0, r7
 80203a6:	f7e7 ff0e 	bl	80081c6 <lv_obj_get_content_width>
 80203aa:	4680      	mov	r8, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 80203ac:	4638      	mov	r0, r7
 80203ae:	f7e7 ff27 	bl	8008200 <lv_obj_get_content_height>
 80203b2:	4681      	mov	r9, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 80203b4:	a901      	add	r1, sp, #4
 80203b6:	4638      	mov	r0, r7
 80203b8:	f7e9 fc4a 	bl	8009c50 <lv_obj_get_scroll_end>
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 80203bc:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80203c0:	eb08 73d8 	add.w	r3, r8, r8, lsr #31
 80203c4:	f343 034f 	sbfx	r3, r3, #1, #16
 80203c8:	4418      	add	r0, r3
 80203ca:	fb90 f0f8 	sdiv	r0, r0, r8
 80203ce:	fb00 f808 	mul.w	r8, r0, r8
 80203d2:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 80203d6:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80203da:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
 80203de:	f343 034f 	sbfx	r3, r3, #1, #16
 80203e2:	4418      	add	r0, r3
 80203e4:	fb90 f0f9 	sdiv	r0, r0, r9
 80203e8:	fb00 f909 	mul.w	r9, r0, r9
 80203ec:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 80203f0:	2400      	movs	r4, #0
 80203f2:	e000      	b.n	80203f6 <tileview_event_cb+0x7e>
 80203f4:	3401      	adds	r4, #1
 80203f6:	4638      	mov	r0, r7
 80203f8:	f7eb fcb3 	bl	800bd62 <lv_obj_get_child_cnt>
 80203fc:	42a0      	cmp	r0, r4
 80203fe:	d917      	bls.n	8020430 <tileview_event_cb+0xb8>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 8020400:	4621      	mov	r1, r4
 8020402:	4638      	mov	r0, r7
 8020404:	f7eb fc98 	bl	800bd38 <lv_obj_get_child>
 8020408:	4605      	mov	r5, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 802040a:	f7e7 fe7f 	bl	800810c <lv_obj_get_x>
 802040e:	4606      	mov	r6, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 8020410:	4628      	mov	r0, r5
 8020412:	f7e7 fe9e 	bl	8008152 <lv_obj_get_y>
            if(x == tx && y == ty) {
 8020416:	45b0      	cmp	r8, r6
 8020418:	d1ec      	bne.n	80203f4 <tileview_event_cb+0x7c>
 802041a:	4581      	cmp	r9, r0
 802041c:	d1ea      	bne.n	80203f4 <tileview_event_cb+0x7c>
                tv->tile_act = (lv_obj_t *)tile;
 802041e:	627d      	str	r5, [r7, #36]	; 0x24
                dir = tile->dir;
 8020420:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8020424:	2200      	movs	r2, #0
 8020426:	211c      	movs	r1, #28
 8020428:	4638      	mov	r0, r7
 802042a:	f7e3 ffcb 	bl	80043c4 <lv_event_send>
                break;
 802042e:	e000      	b.n	8020432 <tileview_event_cb+0xba>
        lv_dir_t dir = LV_DIR_ALL;
 8020430:	240f      	movs	r4, #15
        lv_obj_set_scroll_dir(obj, dir);
 8020432:	4621      	mov	r1, r4
 8020434:	4638      	mov	r0, r7
 8020436:	f7e9 fa55 	bl	80098e4 <lv_obj_set_scroll_dir>
 802043a:	e7a9      	b.n	8020390 <tileview_event_cb+0x18>

0802043c <lv_tileview_tile_constructor>:
{
 802043c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020440:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8020442:	4608      	mov	r0, r1
 8020444:	f7eb fc74 	bl	800bd30 <lv_obj_get_parent>
 8020448:	4606      	mov	r6, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 802044a:	f242 0264 	movw	r2, #8292	; 0x2064
 802044e:	4611      	mov	r1, r2
 8020450:	4620      	mov	r0, r4
 8020452:	f7e7 fddb 	bl	800800c <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 8020456:	4620      	mov	r0, r4
 8020458:	f7e8 ffa4 	bl	80093a4 <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 802045c:	4630      	mov	r0, r6
 802045e:	f7e7 feb2 	bl	80081c6 <lv_obj_get_content_width>
 8020462:	4f11      	ldr	r7, [pc, #68]	; (80204a8 <lv_tileview_tile_constructor+0x6c>)
 8020464:	683d      	ldr	r5, [r7, #0]
 8020466:	fb00 f505 	mul.w	r5, r0, r5
 802046a:	b22d      	sxth	r5, r5
                   create_row_id * lv_obj_get_content_height(parent));
 802046c:	4630      	mov	r0, r6
 802046e:	f7e7 fec7 	bl	8008200 <lv_obj_get_content_height>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 8020472:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80204ac <lv_tileview_tile_constructor+0x70>
 8020476:	f8d8 2000 	ldr.w	r2, [r8]
 802047a:	fb00 f202 	mul.w	r2, r0, r2
 802047e:	b212      	sxth	r2, r2
 8020480:	4629      	mov	r1, r5
 8020482:	4620      	mov	r0, r4
 8020484:	f7e7 fd8a 	bl	8007f9c <lv_obj_set_pos>
    tile->dir = create_dir;
 8020488:	4b09      	ldr	r3, [pc, #36]	; (80204b0 <lv_tileview_tile_constructor+0x74>)
 802048a:	7819      	ldrb	r1, [r3, #0]
 802048c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 8020490:	683a      	ldr	r2, [r7, #0]
 8020492:	f8d8 3000 	ldr.w	r3, [r8]
 8020496:	4313      	orrs	r3, r2
 8020498:	d001      	beq.n	802049e <lv_tileview_tile_constructor+0x62>
}
 802049a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_set_scroll_dir(parent, create_dir);
 802049e:	4630      	mov	r0, r6
 80204a0:	f7e9 fa20 	bl	80098e4 <lv_obj_set_scroll_dir>
}
 80204a4:	e7f9      	b.n	802049a <lv_tileview_tile_constructor+0x5e>
 80204a6:	bf00      	nop
 80204a8:	200027c8 	.word	0x200027c8
 80204ac:	200027d0 	.word	0x200027d0
 80204b0:	200027cc 	.word	0x200027cc

080204b4 <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80204b4:	b570      	push	{r4, r5, r6, lr}
 80204b6:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80204b8:	4608      	mov	r0, r1
 80204ba:	f7eb fc39 	bl	800bd30 <lv_obj_get_parent>
 80204be:	4606      	mov	r6, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 80204c0:	f7e7 fe75 	bl	80081ae <lv_obj_get_width>
 80204c4:	4605      	mov	r5, r0
 80204c6:	4630      	mov	r0, r6
 80204c8:	f7e7 fe77 	bl	80081ba <lv_obj_get_height>
 80204cc:	4602      	mov	r2, r0
 80204ce:	4629      	mov	r1, r5
 80204d0:	4620      	mov	r0, r4
 80204d2:	f7e7 fd9b 	bl	800800c <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 80204d6:	2101      	movs	r1, #1
 80204d8:	4620      	mov	r0, r4
 80204da:	f7f6 fda1 	bl	8017020 <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 80204de:	4620      	mov	r0, r4
 80204e0:	f7e6 fd3c 	bl	8006f5c <lv_obj_create>
 80204e4:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 80204e6:	4b0f      	ldr	r3, [pc, #60]	; (8020524 <lv_win_constructor+0x70>)
 80204e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80204ec:	f242 0164 	movw	r1, #8292	; 0x2064
 80204f0:	f7e7 fd8c 	bl	800800c <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 80204f4:	2100      	movs	r1, #0
 80204f6:	4628      	mov	r0, r5
 80204f8:	f7f6 fd92 	bl	8017020 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 80204fc:	2302      	movs	r3, #2
 80204fe:	461a      	mov	r2, r3
 8020500:	2100      	movs	r1, #0
 8020502:	4628      	mov	r0, r5
 8020504:	f7f6 fdb8 	bl	8017078 <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 8020508:	4620      	mov	r0, r4
 802050a:	f7e6 fd27 	bl	8006f5c <lv_obj_create>
 802050e:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 8020510:	2101      	movs	r1, #1
 8020512:	f7f6 fdd5 	bl	80170c0 <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 8020516:	f242 0164 	movw	r1, #8292	; 0x2064
 802051a:	4620      	mov	r0, r4
 802051c:	f7e7 fd48 	bl	8007fb0 <lv_obj_set_width>
}
 8020520:	bd70      	pop	{r4, r5, r6, pc}
 8020522:	bf00      	nop
 8020524:	200027d4 	.word	0x200027d4

08020528 <lv_font_get_glyph_bitmap>:
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    LV_ASSERT_NULL(font_p);
 8020528:	b118      	cbz	r0, 8020532 <lv_font_get_glyph_bitmap+0xa>
{
 802052a:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 802052c:	6842      	ldr	r2, [r0, #4]
 802052e:	4790      	blx	r2
}
 8020530:	bd08      	pop	{r3, pc}
    LV_ASSERT_NULL(font_p);
 8020532:	e7fe      	b.n	8020532 <lv_font_get_glyph_bitmap+0xa>

08020534 <lv_font_get_glyph_dsc>:
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{

    LV_ASSERT_NULL(font_p);
 8020534:	b150      	cbz	r0, 802054c <lv_font_get_glyph_dsc+0x18>
{
 8020536:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802053a:	460d      	mov	r5, r1
 802053c:	4617      	mov	r7, r2
 802053e:	4698      	mov	r8, r3
 8020540:	4681      	mov	r9, r0
    LV_ASSERT_NULL(dsc_out);
 8020542:	b121      	cbz	r1, 802054e <lv_font_get_glyph_dsc+0x1a>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 8020544:	2600      	movs	r6, #0
 8020546:	600e      	str	r6, [r1, #0]
    const lv_font_t * f = font_p;
 8020548:	4604      	mov	r4, r0
 802054a:	e006      	b.n	802055a <lv_font_get_glyph_dsc+0x26>
    LV_ASSERT_NULL(font_p);
 802054c:	e7fe      	b.n	802054c <lv_font_get_glyph_dsc+0x18>
    LV_ASSERT_NULL(dsc_out);
 802054e:	e7fe      	b.n	802054e <lv_font_get_glyph_dsc+0x1a>
            if(!dsc_out->is_placeholder) {
                dsc_out->resolved_font = f;
                return true;
            }
#if LV_USE_FONT_PLACEHOLDER
            else if(placeholder_font == NULL) {
 8020550:	2e00      	cmp	r6, #0
 8020552:	bf08      	it	eq
 8020554:	4626      	moveq	r6, r4
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 8020556:	6964      	ldr	r4, [r4, #20]
    while(f) {
 8020558:	b17c      	cbz	r4, 802057a <lv_font_get_glyph_dsc+0x46>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 802055a:	4643      	mov	r3, r8
 802055c:	463a      	mov	r2, r7
 802055e:	4629      	mov	r1, r5
 8020560:	4620      	mov	r0, r4
 8020562:	f8d4 c000 	ldr.w	ip, [r4]
 8020566:	47e0      	blx	ip
        if(found) {
 8020568:	4603      	mov	r3, r0
 802056a:	2800      	cmp	r0, #0
 802056c:	d0f3      	beq.n	8020556 <lv_font_get_glyph_dsc+0x22>
            if(!dsc_out->is_placeholder) {
 802056e:	7baa      	ldrb	r2, [r5, #14]
 8020570:	f012 0f10 	tst.w	r2, #16
 8020574:	d1ec      	bne.n	8020550 <lv_font_get_glyph_dsc+0x1c>
                dsc_out->resolved_font = f;
 8020576:	602c      	str	r4, [r5, #0]
                return true;
 8020578:	e008      	b.n	802058c <lv_font_get_glyph_dsc+0x58>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 802057a:	b156      	cbz	r6, 8020592 <lv_font_get_glyph_dsc+0x5e>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 802057c:	6834      	ldr	r4, [r6, #0]
 802057e:	4643      	mov	r3, r8
 8020580:	463a      	mov	r2, r7
 8020582:	4629      	mov	r1, r5
 8020584:	4630      	mov	r0, r6
 8020586:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 8020588:	602e      	str	r6, [r5, #0]
        return true;
 802058a:	2301      	movs	r3, #1
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
    dsc_out->is_placeholder = true;

    return false;
}
 802058c:	4618      	mov	r0, r3
 802058e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(letter < 0x20 ||
 8020592:	2f1f      	cmp	r7, #31
 8020594:	d911      	bls.n	80205ba <lv_font_get_glyph_dsc+0x86>
 8020596:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802059a:	429f      	cmp	r7, r3
 802059c:	d00d      	beq.n	80205ba <lv_font_get_glyph_dsc+0x86>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 802059e:	f242 030c 	movw	r3, #8204	; 0x200c
 80205a2:	429f      	cmp	r7, r3
 80205a4:	d009      	beq.n	80205ba <lv_font_get_glyph_dsc+0x86>
        dsc_out->box_w = font_p->line_height / 2;
 80205a6:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
 80205aa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80205ae:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80205b2:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 80205b4:	3302      	adds	r3, #2
 80205b6:	80ab      	strh	r3, [r5, #4]
 80205b8:	e002      	b.n	80205c0 <lv_font_get_glyph_dsc+0x8c>
        dsc_out->box_w = 0;
 80205ba:	2300      	movs	r3, #0
 80205bc:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = 0;
 80205be:	80ab      	strh	r3, [r5, #4]
    dsc_out->resolved_font = NULL;
 80205c0:	2300      	movs	r3, #0
 80205c2:	602b      	str	r3, [r5, #0]
    dsc_out->box_h = font_p->line_height;
 80205c4:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 80205c8:	812a      	strh	r2, [r5, #8]
    dsc_out->ofs_x = 0;
 80205ca:	816b      	strh	r3, [r5, #10]
    dsc_out->ofs_y = 0;
 80205cc:	81ab      	strh	r3, [r5, #12]
    dsc_out->bpp   = 1;
 80205ce:	7baa      	ldrb	r2, [r5, #14]
 80205d0:	2101      	movs	r1, #1
 80205d2:	f361 0203 	bfi	r2, r1, #0, #4
    dsc_out->is_placeholder = true;
 80205d6:	f042 0210 	orr.w	r2, r2, #16
 80205da:	73aa      	strb	r2, [r5, #14]
    return false;
 80205dc:	e7d6      	b.n	802058c <lv_font_get_glyph_dsc+0x58>

080205de <lv_font_get_glyph_width>:
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    LV_ASSERT_NULL(font);
 80205de:	b158      	cbz	r0, 80205f8 <lv_font_get_glyph_width+0x1a>
{
 80205e0:	b500      	push	{lr}
 80205e2:	b085      	sub	sp, #20
 80205e4:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 80205e6:	460a      	mov	r2, r1
 80205e8:	4669      	mov	r1, sp
 80205ea:	f7ff ffa3 	bl	8020534 <lv_font_get_glyph_dsc>
    return g.adv_w;
}
 80205ee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80205f2:	b005      	add	sp, #20
 80205f4:	f85d fb04 	ldr.w	pc, [sp], #4
    LV_ASSERT_NULL(font);
 80205f8:	e7fe      	b.n	80205f8 <lv_font_get_glyph_width+0x1a>

080205fa <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 80205fa:	7803      	ldrb	r3, [r0, #0]
 80205fc:	780a      	ldrb	r2, [r1, #0]
 80205fe:	4293      	cmp	r3, r2
 8020600:	bf11      	iteee	ne
 8020602:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
 8020604:	7840      	ldrbeq	r0, [r0, #1]
 8020606:	784b      	ldrbeq	r3, [r1, #1]
 8020608:	1ac0      	subeq	r0, r0, r3

}
 802060a:	4770      	bx	lr

0802060c <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 802060c:	8803      	ldrh	r3, [r0, #0]
 802060e:	880a      	ldrh	r2, [r1, #0]
 8020610:	4293      	cmp	r3, r2
 8020612:	bf11      	iteee	ne
 8020614:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
 8020616:	8840      	ldrheq	r0, [r0, #2]
 8020618:	884b      	ldrheq	r3, [r1, #2]
 802061a:	1ac0      	subeq	r0, r0, r3
}
 802061c:	4770      	bx	lr

0802061e <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 802061e:	8800      	ldrh	r0, [r0, #0]
 8020620:	880b      	ldrh	r3, [r1, #0]
}
 8020622:	1ac0      	subs	r0, r0, r3
 8020624:	4770      	bx	lr
	...

08020628 <get_glyph_dsc_id>:
{
 8020628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802062c:	b084      	sub	sp, #16
    if(letter == '\0') return 0;
 802062e:	460d      	mov	r5, r1
 8020630:	2900      	cmp	r1, #0
 8020632:	d06f      	beq.n	8020714 <get_glyph_dsc_id+0xec>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8020634:	6904      	ldr	r4, [r0, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8020636:	6967      	ldr	r7, [r4, #20]
 8020638:	2f00      	cmp	r7, #0
 802063a:	d06f      	beq.n	802071c <get_glyph_dsc_id+0xf4>
 802063c:	683b      	ldr	r3, [r7, #0]
 802063e:	428b      	cmp	r3, r1
 8020640:	d019      	beq.n	8020676 <get_glyph_dsc_id+0x4e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8020642:	8a62      	ldrh	r2, [r4, #18]
 8020644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8020648:	b30a      	cbz	r2, 802068e <get_glyph_dsc_id+0x66>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 802064a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 802064e:	4663      	mov	r3, ip
 8020650:	2600      	movs	r6, #0
 8020652:	46b0      	mov	r8, r6
 8020654:	4619      	mov	r1, r3
 8020656:	f85c 0006 	ldr.w	r0, [ip, r6]
 802065a:	1a28      	subs	r0, r5, r0
        if(rcp > fdsc->cmaps[i].range_length) continue;
 802065c:	f8b3 e004 	ldrh.w	lr, [r3, #4]
 8020660:	4586      	cmp	lr, r0
 8020662:	d30a      	bcc.n	802067a <get_glyph_dsc_id+0x52>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8020664:	7c9b      	ldrb	r3, [r3, #18]
 8020666:	2b02      	cmp	r3, #2
 8020668:	d016      	beq.n	8020698 <get_glyph_dsc_id+0x70>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 802066a:	b9fb      	cbnz	r3, 80206ac <get_glyph_dsc_id+0x84>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 802066c:	68cb      	ldr	r3, [r1, #12]
 802066e:	5c18      	ldrb	r0, [r3, r0]
 8020670:	88cb      	ldrh	r3, [r1, #6]
 8020672:	4418      	add	r0, r3
 8020674:	e012      	b.n	802069c <get_glyph_dsc_id+0x74>
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8020676:	6878      	ldr	r0, [r7, #4]
 8020678:	e015      	b.n	80206a6 <get_glyph_dsc_id+0x7e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 802067a:	f108 0801 	add.w	r8, r8, #1
 802067e:	3614      	adds	r6, #20
 8020680:	3314      	adds	r3, #20
 8020682:	fa1f f188 	uxth.w	r1, r8
 8020686:	428a      	cmp	r2, r1
 8020688:	d8e4      	bhi.n	8020654 <get_glyph_dsc_id+0x2c>
    if(fdsc->cache) {
 802068a:	2f00      	cmp	r7, #0
 802068c:	d044      	beq.n	8020718 <get_glyph_dsc_id+0xf0>
        fdsc->cache->last_letter = letter;
 802068e:	603d      	str	r5, [r7, #0]
        fdsc->cache->last_glyph_id = 0;
 8020690:	6963      	ldr	r3, [r4, #20]
 8020692:	2000      	movs	r0, #0
 8020694:	6058      	str	r0, [r3, #4]
 8020696:	e006      	b.n	80206a6 <get_glyph_dsc_id+0x7e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8020698:	88cb      	ldrh	r3, [r1, #6]
 802069a:	4418      	add	r0, r3
        if(fdsc->cache) {
 802069c:	6963      	ldr	r3, [r4, #20]
 802069e:	b113      	cbz	r3, 80206a6 <get_glyph_dsc_id+0x7e>
            fdsc->cache->last_letter = letter;
 80206a0:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 80206a2:	6963      	ldr	r3, [r4, #20]
 80206a4:	6058      	str	r0, [r3, #4]
}
 80206a6:	b004      	add	sp, #16
 80206a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 80206ac:	2b03      	cmp	r3, #3
 80206ae:	d003      	beq.n	80206b8 <get_glyph_dsc_id+0x90>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 80206b0:	2b01      	cmp	r3, #1
 80206b2:	d018      	beq.n	80206e6 <get_glyph_dsc_id+0xbe>
        uint32_t glyph_id = 0;
 80206b4:	2000      	movs	r0, #0
 80206b6:	e7f1      	b.n	802069c <get_glyph_dsc_id+0x74>
            uint16_t key = rcp;
 80206b8:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80206bc:	8a0a      	ldrh	r2, [r1, #16]
 80206be:	6889      	ldr	r1, [r1, #8]
 80206c0:	4b1a      	ldr	r3, [pc, #104]	; (802072c <get_glyph_dsc_id+0x104>)
 80206c2:	9300      	str	r3, [sp, #0]
 80206c4:	2302      	movs	r3, #2
 80206c6:	f10d 000e 	add.w	r0, sp, #14
 80206ca:	f003 ffd2 	bl	8024672 <_lv_utils_bsearch>
            if(p) {
 80206ce:	4602      	mov	r2, r0
 80206d0:	b138      	cbz	r0, 80206e2 <get_glyph_dsc_id+0xba>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80206d2:	68a3      	ldr	r3, [r4, #8]
 80206d4:	441e      	add	r6, r3
 80206d6:	68b0      	ldr	r0, [r6, #8]
 80206d8:	1a12      	subs	r2, r2, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 80206da:	88f0      	ldrh	r0, [r6, #6]
 80206dc:	eb00 0062 	add.w	r0, r0, r2, asr #1
 80206e0:	e7dc      	b.n	802069c <get_glyph_dsc_id+0x74>
        uint32_t glyph_id = 0;
 80206e2:	2000      	movs	r0, #0
 80206e4:	e7da      	b.n	802069c <get_glyph_dsc_id+0x74>
            uint16_t key = rcp;
 80206e6:	f8ad 000e 	strh.w	r0, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 80206ea:	8a0a      	ldrh	r2, [r1, #16]
 80206ec:	6889      	ldr	r1, [r1, #8]
 80206ee:	4b0f      	ldr	r3, [pc, #60]	; (802072c <get_glyph_dsc_id+0x104>)
 80206f0:	9300      	str	r3, [sp, #0]
 80206f2:	2302      	movs	r3, #2
 80206f4:	f10d 000e 	add.w	r0, sp, #14
 80206f8:	f003 ffbb 	bl	8024672 <_lv_utils_bsearch>
            if(p) {
 80206fc:	b140      	cbz	r0, 8020710 <get_glyph_dsc_id+0xe8>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 80206fe:	68a3      	ldr	r3, [r4, #8]
 8020700:	441e      	add	r6, r3
 8020702:	68b3      	ldr	r3, [r6, #8]
 8020704:	1ac2      	subs	r2, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8020706:	68f3      	ldr	r3, [r6, #12]
 8020708:	5a98      	ldrh	r0, [r3, r2]
 802070a:	88f3      	ldrh	r3, [r6, #6]
 802070c:	4418      	add	r0, r3
 802070e:	e7c5      	b.n	802069c <get_glyph_dsc_id+0x74>
        uint32_t glyph_id = 0;
 8020710:	2000      	movs	r0, #0
 8020712:	e7c3      	b.n	802069c <get_glyph_dsc_id+0x74>
    if(letter == '\0') return 0;
 8020714:	4608      	mov	r0, r1
 8020716:	e7c6      	b.n	80206a6 <get_glyph_dsc_id+0x7e>
    return 0;
 8020718:	2000      	movs	r0, #0
 802071a:	e7c4      	b.n	80206a6 <get_glyph_dsc_id+0x7e>
    for(i = 0; i < fdsc->cmap_num; i++) {
 802071c:	8a62      	ldrh	r2, [r4, #18]
 802071e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8020722:	2a00      	cmp	r2, #0
 8020724:	d191      	bne.n	802064a <get_glyph_dsc_id+0x22>
    return 0;
 8020726:	2000      	movs	r0, #0
 8020728:	e7bd      	b.n	80206a6 <get_glyph_dsc_id+0x7e>
 802072a:	bf00      	nop
 802072c:	0802061f 	.word	0x0802061f

08020730 <lv_font_get_bitmap_fmt_txt>:
{
 8020730:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8020732:	2909      	cmp	r1, #9
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8020734:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8020736:	bf08      	it	eq
 8020738:	2120      	moveq	r1, #32
 802073a:	f7ff ff75 	bl	8020628 <get_glyph_dsc_id>
    if(!gid) return NULL;
 802073e:	b158      	cbz	r0, 8020758 <lv_font_get_bitmap_fmt_txt+0x28>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8020740:	7ce3      	ldrb	r3, [r4, #19]
 8020742:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8020746:	d109      	bne.n	802075c <lv_font_get_bitmap_fmt_txt+0x2c>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8020748:	6863      	ldr	r3, [r4, #4]
 802074a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 802074e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020752:	6820      	ldr	r0, [r4, #0]
 8020754:	4418      	add	r0, r3
}
 8020756:	bd10      	pop	{r4, pc}
    if(!gid) return NULL;
 8020758:	2000      	movs	r0, #0
 802075a:	e7fc      	b.n	8020756 <lv_font_get_bitmap_fmt_txt+0x26>
        return NULL;
 802075c:	2000      	movs	r0, #0
 802075e:	e7fa      	b.n	8020756 <lv_font_get_bitmap_fmt_txt+0x26>

08020760 <lv_font_get_glyph_dsc_fmt_txt>:
{
 8020760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020764:	b085      	sub	sp, #20
 8020766:	4607      	mov	r7, r0
 8020768:	460c      	mov	r4, r1
 802076a:	4698      	mov	r8, r3
    if(unicode_letter == '\t') {
 802076c:	2a09      	cmp	r2, #9
        is_tab = true;
 802076e:	bf07      	ittee	eq
 8020770:	2501      	moveq	r5, #1
        unicode_letter = ' ';
 8020772:	2120      	moveq	r1, #32
 8020774:	4611      	movne	r1, r2
    bool is_tab = false;
 8020776:	2500      	movne	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8020778:	6906      	ldr	r6, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 802077a:	f7ff ff55 	bl	8020628 <get_glyph_dsc_id>
    if(!gid) return false;
 802077e:	4681      	mov	r9, r0
 8020780:	2800      	cmp	r0, #0
 8020782:	f000 8089 	beq.w	8020898 <lv_font_get_glyph_dsc_fmt_txt+0x138>
    if(fdsc->kern_dsc) {
 8020786:	68f3      	ldr	r3, [r6, #12]
 8020788:	2b00      	cmp	r3, #0
 802078a:	d059      	beq.n	8020840 <lv_font_get_glyph_dsc_fmt_txt+0xe0>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 802078c:	4641      	mov	r1, r8
 802078e:	4638      	mov	r0, r7
 8020790:	f7ff ff4a 	bl	8020628 <get_glyph_dsc_id>
        if(gid_next) {
 8020794:	4603      	mov	r3, r0
 8020796:	b908      	cbnz	r0, 802079c <lv_font_get_glyph_dsc_fmt_txt+0x3c>
    int8_t kvalue = 0;
 8020798:	2100      	movs	r1, #0
 802079a:	e052      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 802079c:	693a      	ldr	r2, [r7, #16]
    if(fdsc->kern_classes == 0) {
 802079e:	7cd1      	ldrb	r1, [r2, #19]
 80207a0:	f011 0f20 	tst.w	r1, #32
 80207a4:	d139      	bne.n	802081a <lv_font_get_glyph_dsc_fmt_txt+0xba>
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 80207a6:	68d7      	ldr	r7, [r2, #12]
        if(kdsc->glyph_ids_size == 0) {
 80207a8:	7afa      	ldrb	r2, [r7, #11]
 80207aa:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
 80207ae:	d003      	beq.n	80207b8 <lv_font_get_glyph_dsc_fmt_txt+0x58>
        else if(kdsc->glyph_ids_size == 1) {
 80207b0:	2a40      	cmp	r2, #64	; 0x40
 80207b2:	d01a      	beq.n	80207ea <lv_font_get_glyph_dsc_fmt_txt+0x8a>
    int8_t value = 0;
 80207b4:	2100      	movs	r1, #0
 80207b6:	e044      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            const uint16_t * g_ids = kdsc->glyph_ids;
 80207b8:	f8d7 8000 	ldr.w	r8, [r7]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 80207bc:	eb09 2300 	add.w	r3, r9, r0, lsl #8
 80207c0:	f8ad 300c 	strh.w	r3, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 80207c4:	68ba      	ldr	r2, [r7, #8]
 80207c6:	4b38      	ldr	r3, [pc, #224]	; (80208a8 <lv_font_get_glyph_dsc_fmt_txt+0x148>)
 80207c8:	9300      	str	r3, [sp, #0]
 80207ca:	2302      	movs	r3, #2
 80207cc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80207d0:	4641      	mov	r1, r8
 80207d2:	a803      	add	r0, sp, #12
 80207d4:	f003 ff4d 	bl	8024672 <_lv_utils_bsearch>
            if(kid_p) {
 80207d8:	b128      	cbz	r0, 80207e6 <lv_font_get_glyph_dsc_fmt_txt+0x86>
                lv_uintptr_t ofs = kid_p - g_ids;
 80207da:	eba0 0308 	sub.w	r3, r0, r8
 80207de:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 80207e0:	687a      	ldr	r2, [r7, #4]
 80207e2:	56d1      	ldrsb	r1, [r2, r3]
 80207e4:	e02d      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    int8_t value = 0;
 80207e6:	2100      	movs	r1, #0
 80207e8:	e02b      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            const uint32_t * g_ids = kdsc->glyph_ids;
 80207ea:	f8d7 8000 	ldr.w	r8, [r7]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 80207ee:	eb09 4300 	add.w	r3, r9, r0, lsl #16
 80207f2:	9303      	str	r3, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 80207f4:	68ba      	ldr	r2, [r7, #8]
 80207f6:	4b2d      	ldr	r3, [pc, #180]	; (80208ac <lv_font_get_glyph_dsc_fmt_txt+0x14c>)
 80207f8:	9300      	str	r3, [sp, #0]
 80207fa:	2304      	movs	r3, #4
 80207fc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8020800:	4641      	mov	r1, r8
 8020802:	a803      	add	r0, sp, #12
 8020804:	f003 ff35 	bl	8024672 <_lv_utils_bsearch>
            if(kid_p) {
 8020808:	b128      	cbz	r0, 8020816 <lv_font_get_glyph_dsc_fmt_txt+0xb6>
                lv_uintptr_t ofs = kid_p - g_ids;
 802080a:	eba0 0308 	sub.w	r3, r0, r8
 802080e:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
 8020810:	687a      	ldr	r2, [r7, #4]
 8020812:	56d1      	ldrsb	r1, [r2, r3]
 8020814:	e015      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    int8_t value = 0;
 8020816:	2100      	movs	r1, #0
 8020818:	e013      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 802081a:	68d2      	ldr	r2, [r2, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 802081c:	6851      	ldr	r1, [r2, #4]
 802081e:	f811 1009 	ldrb.w	r1, [r1, r9]
        if(left_class > 0 && right_class > 0) {
 8020822:	2900      	cmp	r1, #0
 8020824:	d034      	beq.n	8020890 <lv_font_get_glyph_dsc_fmt_txt+0x130>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8020826:	6890      	ldr	r0, [r2, #8]
 8020828:	5cc0      	ldrb	r0, [r0, r3]
        if(left_class > 0 && right_class > 0) {
 802082a:	2800      	cmp	r0, #0
 802082c:	d032      	beq.n	8020894 <lv_font_get_glyph_dsc_fmt_txt+0x134>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 802082e:	3901      	subs	r1, #1
 8020830:	7b57      	ldrb	r7, [r2, #13]
 8020832:	6813      	ldr	r3, [r2, #0]
 8020834:	4403      	add	r3, r0
 8020836:	fb07 3101 	mla	r1, r7, r1, r3
 802083a:	f911 1c01 	ldrsb.w	r1, [r1, #-1]
 802083e:	e000      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    int8_t kvalue = 0;
 8020840:	2100      	movs	r1, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8020842:	6872      	ldr	r2, [r6, #4]
 8020844:	eb02 02c9 	add.w	r2, r2, r9, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8020848:	8a33      	ldrh	r3, [r6, #16]
 802084a:	fb01 f303 	mul.w	r3, r1, r3
 802084e:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8020850:	8851      	ldrh	r1, [r2, #2]
 8020852:	f3c1 110b 	ubfx	r1, r1, #4, #12
    if(is_tab) adv_w *= 2;
 8020856:	b105      	cbz	r5, 802085a <lv_font_get_glyph_dsc_fmt_txt+0xfa>
 8020858:	0049      	lsls	r1, r1, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
 802085a:	3308      	adds	r3, #8
 802085c:	440b      	add	r3, r1
 802085e:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8020860:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 8020862:	7953      	ldrb	r3, [r2, #5]
 8020864:	8123      	strh	r3, [r4, #8]
    dsc_out->box_w = gdsc->box_w;
 8020866:	7911      	ldrb	r1, [r2, #4]
 8020868:	80e1      	strh	r1, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 802086a:	f992 3006 	ldrsb.w	r3, [r2, #6]
 802086e:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 8020870:	f992 3007 	ldrsb.w	r3, [r2, #7]
 8020874:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8020876:	7cf2      	ldrb	r2, [r6, #19]
 8020878:	f3c2 0243 	ubfx	r2, r2, #1, #4
 802087c:	7ba3      	ldrb	r3, [r4, #14]
 802087e:	f362 0303 	bfi	r3, r2, #0, #4
    dsc_out->is_placeholder = false;
 8020882:	f36f 1304 	bfc	r3, #4, #1
 8020886:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8020888:	b15d      	cbz	r5, 80208a2 <lv_font_get_glyph_dsc_fmt_txt+0x142>
 802088a:	0049      	lsls	r1, r1, #1
 802088c:	80e1      	strh	r1, [r4, #6]
 802088e:	e004      	b.n	802089a <lv_font_get_glyph_dsc_fmt_txt+0x13a>
    int8_t value = 0;
 8020890:	2100      	movs	r1, #0
 8020892:	e7d6      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
 8020894:	2100      	movs	r1, #0
 8020896:	e7d4      	b.n	8020842 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
    if(!gid) return false;
 8020898:	2500      	movs	r5, #0
}
 802089a:	4628      	mov	r0, r5
 802089c:	b005      	add	sp, #20
 802089e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return true;
 80208a2:	2501      	movs	r5, #1
 80208a4:	e7f9      	b.n	802089a <lv_font_get_glyph_dsc_fmt_txt+0x13a>
 80208a6:	bf00      	nop
 80208a8:	080205fb 	.word	0x080205fb
 80208ac:	0802060d 	.word	0x0802060d

080208b0 <_lv_font_clean_up_fmt_txt>:
}
 80208b0:	4770      	bx	lr
	...

080208b4 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80208b4:	b510      	push	{r4, lr}
 80208b6:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80208b8:	2150      	movs	r1, #80	; 0x50
 80208ba:	f001 fdb7 	bl	802242c <lv_memset_00>

    driver->hor_res          = 320;
 80208be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80208c2:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = 240;
 80208c4:	23f0      	movs	r3, #240	; 0xf0
 80208c6:	8063      	strh	r3, [r4, #2]
    driver->physical_hor_res = -1;
 80208c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80208cc:	80a3      	strh	r3, [r4, #4]
    driver->physical_ver_res = -1;
 80208ce:	80e3      	strh	r3, [r4, #6]
    driver->offset_x         = 0;
 80208d0:	2200      	movs	r2, #0
 80208d2:	8122      	strh	r2, [r4, #8]
    driver->offset_y         = 0;
 80208d4:	8162      	strh	r2, [r4, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80208d6:	7c23      	ldrb	r3, [r4, #16]
    driver->screen_transp    = 0;
 80208d8:	f043 0308 	orr.w	r3, r3, #8
 80208dc:	f362 1386 	bfi	r3, r2, #6, #1
 80208e0:	7423      	strb	r3, [r4, #16]
    driver->dpi              = LV_DPI_DEF;
 80208e2:	6923      	ldr	r3, [r4, #16]
 80208e4:	2282      	movs	r2, #130	; 0x82
 80208e6:	f362 13d0 	bfi	r3, r2, #7, #10
 80208ea:	6123      	str	r3, [r4, #16]
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 80208ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80208f0:	8723      	strh	r3, [r4, #56]	; 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 80208f2:	4b03      	ldr	r3, [pc, #12]	; (8020900 <lv_disp_drv_init+0x4c>)
 80208f4:	6423      	str	r3, [r4, #64]	; 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 80208f6:	6463      	str	r3, [r4, #68]	; 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 80208f8:	2358      	movs	r3, #88	; 0x58
 80208fa:	64a3      	str	r3, [r4, #72]	; 0x48
#endif

}
 80208fc:	bd10      	pop	{r4, pc}
 80208fe:	bf00      	nop
 8020900:	08010359 	.word	0x08010359

08020904 <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 8020904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020906:	4604      	mov	r4, r0
 8020908:	460d      	mov	r5, r1
 802090a:	4617      	mov	r7, r2
 802090c:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 802090e:	211c      	movs	r1, #28
 8020910:	f001 fd8c 	bl	802242c <lv_memset_00>

    draw_buf->buf1    = buf1;
 8020914:	6025      	str	r5, [r4, #0]
    draw_buf->buf2    = buf2;
 8020916:	6067      	str	r7, [r4, #4]
    draw_buf->buf_act = draw_buf->buf1;
 8020918:	60a5      	str	r5, [r4, #8]
    draw_buf->size    = size_in_px_cnt;
 802091a:	60e6      	str	r6, [r4, #12]
}
 802091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020920 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8020920:	b570      	push	{r4, r5, r6, lr}
 8020922:	b082      	sub	sp, #8
 8020924:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 8020926:	484d      	ldr	r0, [pc, #308]	; (8020a5c <lv_disp_drv_register+0x13c>)
 8020928:	f001 f949 	bl	8021bbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(disp);
 802092c:	2800      	cmp	r0, #0
 802092e:	d07f      	beq.n	8020a30 <lv_disp_drv_register+0x110>
 8020930:	4604      	mov	r4, r0
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 8020932:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020934:	2b00      	cmp	r3, #0
 8020936:	d07c      	beq.n	8020a32 <lv_disp_drv_register+0x112>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
        driver->draw_ctx = draw_ctx;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 8020938:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 802093c:	4620      	mov	r0, r4
 802093e:	f001 fd75 	bl	802242c <lv_memset_00>

    disp->driver = driver;
 8020942:	6025      	str	r5, [r4, #0]

    disp->inv_en_cnt = 1;
 8020944:	2301      	movs	r3, #1
 8020946:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154

    lv_disp_t * disp_def_tmp = disp_def;
 802094a:	4b45      	ldr	r3, [pc, #276]	; (8020a60 <lv_disp_drv_register+0x140>)
 802094c:	681e      	ldr	r6, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 802094e:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8020950:	4622      	mov	r2, r4
 8020952:	2128      	movs	r1, #40	; 0x28
 8020954:	4843      	ldr	r0, [pc, #268]	; (8020a64 <lv_disp_drv_register+0x144>)
 8020956:	f002 fe91 	bl	802367c <lv_timer_create>
 802095a:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 802095c:	2800      	cmp	r0, #0
 802095e:	d074      	beq.n	8020a4a <lv_disp_drv_register+0x12a>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 8020960:	7c2b      	ldrb	r3, [r5, #16]
 8020962:	f013 0f02 	tst.w	r3, #2
 8020966:	d00d      	beq.n	8020984 <lv_disp_drv_register+0x64>
 8020968:	68ea      	ldr	r2, [r5, #12]
 802096a:	f9b5 3000 	ldrsh.w	r3, [r5]
 802096e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8020972:	fb01 f303 	mul.w	r3, r1, r3
 8020976:	68d2      	ldr	r2, [r2, #12]
 8020978:	429a      	cmp	r2, r3
 802097a:	d203      	bcs.n	8020984 <lv_disp_drv_register+0x64>
        driver->full_refresh = 0;
 802097c:	7c2b      	ldrb	r3, [r5, #16]
 802097e:	f36f 0341 	bfc	r3, #1, #1
 8020982:	742b      	strb	r3, [r5, #16]
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 8020984:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8020988:	f043 031f 	orr.w	r3, r3, #31
 802098c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 8020990:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8020992:	f443 63fc 	orr.w	r3, r3, #2016	; 0x7e0
 8020996:	8563      	strh	r3, [r4, #42]	; 0x2a
 8020998:	23ff      	movs	r3, #255	; 0xff
 802099a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 802099e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 80209a2:	f7fb fa7b 	bl	801be9c <lv_theme_default_is_inited>
 80209a6:	2800      	cmp	r0, #0
 80209a8:	d150      	bne.n	8020a4c <lv_disp_drv_register+0x12c>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED),
 80209aa:	2005      	movs	r0, #5
 80209ac:	f000 ff02 	bl	80217b4 <lv_palette_main>
 80209b0:	4605      	mov	r5, r0
 80209b2:	2000      	movs	r0, #0
 80209b4:	f000 fefe 	bl	80217b4 <lv_palette_main>
 80209b8:	4602      	mov	r2, r0
 80209ba:	4b2b      	ldr	r3, [pc, #172]	; (8020a68 <lv_disp_drv_register+0x148>)
 80209bc:	9300      	str	r3, [sp, #0]
 80209be:	2300      	movs	r3, #0
 80209c0:	4629      	mov	r1, r5
 80209c2:	4620      	mov	r0, r4
 80209c4:	f7f8 f962 	bl	8018c8c <lv_theme_default_init>
 80209c8:	60a0      	str	r0, [r4, #8]
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 80209ca:	2000      	movs	r0, #0
 80209cc:	f7e6 fac6 	bl	8006f5c <lv_obj_create>
 80209d0:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 80209d2:	2000      	movs	r0, #0
 80209d4:	f7e6 fac2 	bl	8006f5c <lv_obj_create>
 80209d8:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 80209da:	2000      	movs	r0, #0
 80209dc:	f7e6 fabe 	bl	8006f5c <lv_obj_create>
 80209e0:	6220      	str	r0, [r4, #32]
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80209e2:	4d22      	ldr	r5, [pc, #136]	; (8020a6c <lv_disp_drv_register+0x14c>)
 80209e4:	462a      	mov	r2, r5
 80209e6:	2100      	movs	r1, #0
 80209e8:	69e0      	ldr	r0, [r4, #28]
 80209ea:	f7ea fd55 	bl	800b498 <lv_obj_remove_style>
 80209ee:	462a      	mov	r2, r5
 80209f0:	2100      	movs	r1, #0
 80209f2:	6a20      	ldr	r0, [r4, #32]
 80209f4:	f7ea fd50 	bl	800b498 <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 80209f8:	2102      	movs	r1, #2
 80209fa:	69e0      	ldr	r0, [r4, #28]
 80209fc:	f7e6 faf4 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8020a00:	2102      	movs	r1, #2
 8020a02:	6a20      	ldr	r0, [r4, #32]
 8020a04:	f7e6 faf0 	bl	8006fe8 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 8020a08:	2100      	movs	r1, #0
 8020a0a:	69e0      	ldr	r0, [r4, #28]
 8020a0c:	f7e8 ff57 	bl	80098be <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8020a10:	2100      	movs	r1, #0
 8020a12:	6a20      	ldr	r0, [r4, #32]
 8020a14:	f7e8 ff53 	bl	80098be <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 8020a18:	6920      	ldr	r0, [r4, #16]
 8020a1a:	f7e7 fe0f 	bl	800863c <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8020a1e:	b1ce      	cbz	r6, 8020a54 <lv_disp_drv_register+0x134>
    disp_def = disp_def_tmp; /*Revert the default display*/
 8020a20:	4b0f      	ldr	r3, [pc, #60]	; (8020a60 <lv_disp_drv_register+0x140>)
 8020a22:	601e      	str	r6, [r3, #0]

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8020a24:	6860      	ldr	r0, [r4, #4]
 8020a26:	f002 ff49 	bl	80238bc <lv_timer_ready>

    return disp;
}
 8020a2a:	4620      	mov	r0, r4
 8020a2c:	b002      	add	sp, #8
 8020a2e:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(disp);
 8020a30:	e7fe      	b.n	8020a30 <lv_disp_drv_register+0x110>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8020a32:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8020a34:	f001 fa7a 	bl	8021f2c <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 8020a38:	4606      	mov	r6, r0
 8020a3a:	b128      	cbz	r0, 8020a48 <lv_disp_drv_register+0x128>
        driver->draw_ctx_init(driver, draw_ctx);
 8020a3c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8020a3e:	4601      	mov	r1, r0
 8020a40:	4628      	mov	r0, r5
 8020a42:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8020a44:	63ee      	str	r6, [r5, #60]	; 0x3c
 8020a46:	e777      	b.n	8020938 <lv_disp_drv_register+0x18>
        LV_ASSERT_MALLOC(draw_ctx);
 8020a48:	e7fe      	b.n	8020a48 <lv_disp_drv_register+0x128>
    LV_ASSERT_MALLOC(disp->refr_timer);
 8020a4a:	e7fe      	b.n	8020a4a <lv_disp_drv_register+0x12a>
        disp->theme = lv_theme_default_get();
 8020a4c:	f7fb fa1a 	bl	801be84 <lv_theme_default_get>
 8020a50:	60a0      	str	r0, [r4, #8]
 8020a52:	e7ba      	b.n	80209ca <lv_disp_drv_register+0xaa>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8020a54:	4b02      	ldr	r3, [pc, #8]	; (8020a60 <lv_disp_drv_register+0x140>)
 8020a56:	601c      	str	r4, [r3, #0]
 8020a58:	e7e4      	b.n	8020a24 <lv_disp_drv_register+0x104>
 8020a5a:	bf00      	nop
 8020a5c:	2000287c 	.word	0x2000287c
 8020a60:	200027e8 	.word	0x200027e8
 8020a64:	0800cde1 	.word	0x0800cde1
 8020a68:	08031440 	.word	0x08031440
 8020a6c:	000fffff 	.word	0x000fffff

08020a70 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 8020a70:	4b01      	ldr	r3, [pc, #4]	; (8020a78 <lv_disp_get_default+0x8>)
 8020a72:	6818      	ldr	r0, [r3, #0]
 8020a74:	4770      	bx	lr
 8020a76:	bf00      	nop
 8020a78:	200027e8 	.word	0x200027e8

08020a7c <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8020a7c:	4603      	mov	r3, r0
 8020a7e:	b148      	cbz	r0, 8020a94 <lv_disp_get_hor_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8020a80:	681b      	ldr	r3, [r3, #0]
 8020a82:	7c1a      	ldrb	r2, [r3, #16]
 8020a84:	f012 0f10 	tst.w	r2, #16
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
 8020a88:	bf14      	ite	ne
 8020a8a:	f9b3 0002 	ldrshne.w	r0, [r3, #2]
            default:
                return disp->driver->hor_res;
 8020a8e:	f9b3 0000 	ldrsheq.w	r0, [r3]
 8020a92:	4770      	bx	lr
    return disp_def;
 8020a94:	4b02      	ldr	r3, [pc, #8]	; (8020aa0 <lv_disp_get_hor_res+0x24>)
 8020a96:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	d1f1      	bne.n	8020a80 <lv_disp_get_hor_res+0x4>
        return 0;
 8020a9c:	2000      	movs	r0, #0
        }
    }
}
 8020a9e:	4770      	bx	lr
 8020aa0:	200027e8 	.word	0x200027e8

08020aa4 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8020aa4:	4603      	mov	r3, r0
 8020aa6:	b148      	cbz	r0, 8020abc <lv_disp_get_ver_res+0x18>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	7c1a      	ldrb	r2, [r3, #16]
 8020aac:	f012 0f10 	tst.w	r2, #16
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
 8020ab0:	bf14      	ite	ne
 8020ab2:	f9b3 0000 	ldrshne.w	r0, [r3]
            default:
                return disp->driver->ver_res;
 8020ab6:	f9b3 0002 	ldrsheq.w	r0, [r3, #2]
 8020aba:	4770      	bx	lr
    return disp_def;
 8020abc:	4b02      	ldr	r3, [pc, #8]	; (8020ac8 <lv_disp_get_ver_res+0x24>)
 8020abe:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) {
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d1f1      	bne.n	8020aa8 <lv_disp_get_ver_res+0x4>
        return 0;
 8020ac4:	2000      	movs	r0, #0
        }
    }
}
 8020ac6:	4770      	bx	lr
 8020ac8:	200027e8 	.word	0x200027e8

08020acc <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
 8020acc:	4603      	mov	r3, r0
 8020ace:	b120      	cbz	r0, 8020ada <lv_disp_get_dpi+0xe>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
    return disp->driver->dpi;
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	6918      	ldr	r0, [r3, #16]
 8020ad4:	f3c0 10c9 	ubfx	r0, r0, #7, #10
 8020ad8:	4770      	bx	lr
    return disp_def;
 8020ada:	4b03      	ldr	r3, [pc, #12]	; (8020ae8 <lv_disp_get_dpi+0x1c>)
 8020adc:	681b      	ldr	r3, [r3, #0]
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 8020ade:	2b00      	cmp	r3, #0
 8020ae0:	d1f6      	bne.n	8020ad0 <lv_disp_get_dpi+0x4>
 8020ae2:	2082      	movs	r0, #130	; 0x82
}
 8020ae4:	4770      	bx	lr
 8020ae6:	bf00      	nop
 8020ae8:	200027e8 	.word	0x200027e8

08020aec <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->draw_buf->flushing = 0;
 8020aec:	68c2      	ldr	r2, [r0, #12]
 8020aee:	2300      	movs	r3, #0
 8020af0:	6113      	str	r3, [r2, #16]
    disp_drv->draw_buf->flushing_last = 0;
 8020af2:	68c2      	ldr	r2, [r0, #12]
 8020af4:	6153      	str	r3, [r2, #20]
}
 8020af6:	4770      	bx	lr

08020af8 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 8020af8:	b508      	push	{r3, lr}
    if(disp == NULL)
 8020afa:	b120      	cbz	r0, 8020b06 <lv_disp_get_next+0xe>
 8020afc:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 8020afe:	4804      	ldr	r0, [pc, #16]	; (8020b10 <lv_disp_get_next+0x18>)
 8020b00:	f001 f8e6 	bl	8021cd0 <_lv_ll_get_next>
}
 8020b04:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8020b06:	4802      	ldr	r0, [pc, #8]	; (8020b10 <lv_disp_get_next+0x18>)
 8020b08:	f001 f8da 	bl	8021cc0 <_lv_ll_get_head>
 8020b0c:	e7fa      	b.n	8020b04 <lv_disp_get_next+0xc>
 8020b0e:	bf00      	nop
 8020b10:	2000287c 	.word	0x2000287c

08020b14 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8020b14:	6803      	ldr	r3, [r0, #0]
}
 8020b16:	68d8      	ldr	r0, [r3, #12]
 8020b18:	4770      	bx	lr

08020b1a <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 8020b1a:	b510      	push	{r4, lr}
 8020b1c:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_indev_drv_t));
 8020b1e:	2120      	movs	r1, #32
 8020b20:	f001 fc84 	bl	802242c <lv_memset_00>

    driver->type                 = LV_INDEV_TYPE_NONE;
 8020b24:	2300      	movs	r3, #0
 8020b26:	7023      	strb	r3, [r4, #0]
    driver->scroll_limit         = LV_INDEV_DEF_SCROLL_LIMIT;
 8020b28:	230a      	movs	r3, #10
 8020b2a:	7623      	strb	r3, [r4, #24]
    driver->scroll_throw         = LV_INDEV_DEF_SCROLL_THROW;
 8020b2c:	7663      	strb	r3, [r4, #25]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
 8020b2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020b32:	83a3      	strh	r3, [r4, #28]
    driver->long_press_repeat_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 8020b34:	2364      	movs	r3, #100	; 0x64
 8020b36:	83e3      	strh	r3, [r4, #30]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
 8020b38:	2332      	movs	r3, #50	; 0x32
 8020b3a:	76e3      	strb	r3, [r4, #27]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
 8020b3c:	2303      	movs	r3, #3
 8020b3e:	76a3      	strb	r3, [r4, #26]
}
 8020b40:	bd10      	pop	{r4, pc}
	...

08020b44 <lv_indev_drv_register>:
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable.
 * Only pointer is saved, so the driver should be static or dynamically allocated.
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 8020b44:	b538      	push	{r3, r4, r5, lr}
 8020b46:	4604      	mov	r4, r0
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8020b48:	6903      	ldr	r3, [r0, #16]
 8020b4a:	b1a3      	cbz	r3, 8020b76 <lv_indev_drv_register+0x32>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 8020b4c:	480e      	ldr	r0, [pc, #56]	; (8020b88 <lv_indev_drv_register+0x44>)
 8020b4e:	f001 f836 	bl	8021bbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(indev);
 8020b52:	4605      	mov	r5, r0
 8020b54:	b1b0      	cbz	r0, 8020b84 <lv_indev_drv_register+0x40>
    if(!indev) {
        return NULL;
    }

    lv_memset_00(indev, sizeof(lv_indev_t));
 8020b56:	215c      	movs	r1, #92	; 0x5c
 8020b58:	f001 fc68 	bl	802242c <lv_memset_00>
    indev->driver = driver;
 8020b5c:	602c      	str	r4, [r5, #0]

    indev->proc.reset_query  = 1;
 8020b5e:	796b      	ldrb	r3, [r5, #5]
 8020b60:	f043 0302 	orr.w	r3, r3, #2
 8020b64:	716b      	strb	r3, [r5, #5]
    indev->driver->read_timer = lv_timer_create(lv_indev_read_timer_cb, LV_INDEV_DEF_READ_PERIOD, indev);
 8020b66:	462a      	mov	r2, r5
 8020b68:	211e      	movs	r1, #30
 8020b6a:	4808      	ldr	r0, [pc, #32]	; (8020b8c <lv_indev_drv_register+0x48>)
 8020b6c:	f002 fd86 	bl	802367c <lv_timer_create>
 8020b70:	6160      	str	r0, [r4, #20]

    return indev;
}
 8020b72:	4628      	mov	r0, r5
 8020b74:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 8020b76:	f7ff ff7b 	bl	8020a70 <lv_disp_get_default>
 8020b7a:	4605      	mov	r5, r0
 8020b7c:	6120      	str	r0, [r4, #16]
    if(driver->disp == NULL) {
 8020b7e:	2800      	cmp	r0, #0
 8020b80:	d0f7      	beq.n	8020b72 <lv_indev_drv_register+0x2e>
 8020b82:	e7e3      	b.n	8020b4c <lv_indev_drv_register+0x8>
    LV_ASSERT_MALLOC(indev);
 8020b84:	e7fe      	b.n	8020b84 <lv_indev_drv_register+0x40>
 8020b86:	bf00      	nop
 8020b88:	2000295c 	.word	0x2000295c
 8020b8c:	0800517d 	.word	0x0800517d

08020b90 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8020b90:	b508      	push	{r3, lr}
    if(indev == NULL)
 8020b92:	b120      	cbz	r0, 8020b9e <lv_indev_get_next+0xe>
 8020b94:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 8020b96:	4804      	ldr	r0, [pc, #16]	; (8020ba8 <lv_indev_get_next+0x18>)
 8020b98:	f001 f89a 	bl	8021cd0 <_lv_ll_get_next>
}
 8020b9c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8020b9e:	4802      	ldr	r0, [pc, #8]	; (8020ba8 <lv_indev_get_next+0x18>)
 8020ba0:	f001 f88e 	bl	8021cc0 <_lv_ll_get_head>
 8020ba4:	e7fa      	b.n	8020b9c <lv_indev_get_next+0xc>
 8020ba6:	bf00      	nop
 8020ba8:	2000295c 	.word	0x2000295c

08020bac <_lv_indev_read>:
 * Read data from an input device.
 * @param indev pointer to an input device
 * @param data input device will write its data here
 */
void _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 8020bac:	b538      	push	{r3, r4, r5, lr}
 8020bae:	4604      	mov	r4, r0
 8020bb0:	460d      	mov	r5, r1
    lv_memset_00(data, sizeof(lv_indev_data_t));
 8020bb2:	2110      	movs	r1, #16
 8020bb4:	4628      	mov	r0, r5
 8020bb6:	f001 fc39 	bl	802242c <lv_memset_00>

    /* For touchpad sometimes users don't set the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver->type == LV_INDEV_TYPE_POINTER) {
 8020bba:	6823      	ldr	r3, [r4, #0]
 8020bbc:	781b      	ldrb	r3, [r3, #0]
 8020bbe:	2b01      	cmp	r3, #1
 8020bc0:	d00b      	beq.n	8020bda <_lv_indev_read+0x2e>
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8020bc2:	2b02      	cmp	r3, #2
 8020bc4:	d010      	beq.n	8020be8 <_lv_indev_read+0x3c>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push)*/
    else if(indev->driver->type == LV_INDEV_TYPE_ENCODER) {
 8020bc6:	2b04      	cmp	r3, #4
        data->key = LV_KEY_ENTER;
 8020bc8:	bf04      	itt	eq
 8020bca:	230a      	moveq	r3, #10
 8020bcc:	606b      	streq	r3, [r5, #4]
    }

    if(indev->driver->read_cb) {
 8020bce:	6820      	ldr	r0, [r4, #0]
 8020bd0:	6843      	ldr	r3, [r0, #4]
 8020bd2:	b10b      	cbz	r3, 8020bd8 <_lv_indev_read+0x2c>
        INDEV_TRACE("calling indev_read_cb");
        indev->driver->read_cb(indev->driver, data);
 8020bd4:	4629      	mov	r1, r5
 8020bd6:	4798      	blx	r3
    }
    else {
        LV_LOG_WARN("indev_read_cb is not registered");
    }
}
 8020bd8:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.last_raw_point.x;
 8020bda:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8020bde:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.last_raw_point.y;
 8020be0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8020be4:	806b      	strh	r3, [r5, #2]
 8020be6:	e7f2      	b.n	8020bce <_lv_indev_read+0x22>
        data->key = indev->proc.types.keypad.last_key;
 8020be8:	68e3      	ldr	r3, [r4, #12]
 8020bea:	606b      	str	r3, [r5, #4]
 8020bec:	e7ef      	b.n	8020bce <_lv_indev_read+0x22>

08020bee <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 8020bee:	b508      	push	{r3, lr}
        result        = sys_time;
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
 8020bf0:	f7e0 fb0a 	bl	8001208 <HAL_GetTick>
#endif
}
 8020bf4:	bd08      	pop	{r3, pc}

08020bf6 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8020bf6:	b510      	push	{r4, lr}
 8020bf8:	4604      	mov	r4, r0
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
 8020bfa:	f7e0 fb05 	bl	8001208 <HAL_GetTick>
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8020bfe:	1b00      	subs	r0, r0, r4
 8020c00:	bd10      	pop	{r4, pc}
	...

08020c04 <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 8020c04:	b508      	push	{r3, lr}
    anim_list_changed = true;
 8020c06:	4b08      	ldr	r3, [pc, #32]	; (8020c28 <anim_mark_list_change+0x24>)
 8020c08:	2201      	movs	r2, #1
 8020c0a:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8020c0c:	4807      	ldr	r0, [pc, #28]	; (8020c2c <anim_mark_list_change+0x28>)
 8020c0e:	f001 f857 	bl	8021cc0 <_lv_ll_get_head>
 8020c12:	b120      	cbz	r0, 8020c1e <anim_mark_list_change+0x1a>
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
 8020c14:	4b06      	ldr	r3, [pc, #24]	; (8020c30 <anim_mark_list_change+0x2c>)
 8020c16:	6818      	ldr	r0, [r3, #0]
 8020c18:	f002 fe4b 	bl	80238b2 <lv_timer_resume>
}
 8020c1c:	bd08      	pop	{r3, pc}
        lv_timer_pause(_lv_anim_tmr);
 8020c1e:	4b04      	ldr	r3, [pc, #16]	; (8020c30 <anim_mark_list_change+0x2c>)
 8020c20:	6818      	ldr	r0, [r3, #0]
 8020c22:	f002 fe41 	bl	80238a8 <lv_timer_pause>
 8020c26:	e7f9      	b.n	8020c1c <anim_mark_list_change+0x18>
 8020c28:	200027f0 	.word	0x200027f0
 8020c2c:	20002800 	.word	0x20002800
 8020c30:	200027ec 	.word	0x200027ec

08020c34 <anim_timer>:
{
 8020c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 8020c38:	4b64      	ldr	r3, [pc, #400]	; (8020dcc <anim_timer+0x198>)
 8020c3a:	6818      	ldr	r0, [r3, #0]
 8020c3c:	f7ff ffdb 	bl	8020bf6 <lv_tick_elaps>
 8020c40:	4606      	mov	r6, r0
    anim_run_round = anim_run_round ? false : true;
 8020c42:	4a63      	ldr	r2, [pc, #396]	; (8020dd0 <anim_timer+0x19c>)
 8020c44:	7813      	ldrb	r3, [r2, #0]
 8020c46:	f083 0301 	eor.w	r3, r3, #1
 8020c4a:	7013      	strb	r3, [r2, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8020c4c:	4861      	ldr	r0, [pc, #388]	; (8020dd4 <anim_timer+0x1a0>)
 8020c4e:	f001 f837 	bl	8021cc0 <_lv_ll_get_head>
    while(a != NULL) {
 8020c52:	2800      	cmp	r0, #0
 8020c54:	f000 809e 	beq.w	8020d94 <anim_timer+0x160>
 8020c58:	4604      	mov	r4, r0
        anim_list_changed = false;
 8020c5a:	4d5f      	ldr	r5, [pc, #380]	; (8020dd8 <anim_timer+0x1a4>)
 8020c5c:	f04f 0900 	mov.w	r9, #0
        if(a->run_round != anim_run_round) {
 8020c60:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8020dd0 <anim_timer+0x19c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8020c64:	4f5b      	ldr	r7, [pc, #364]	; (8020dd4 <anim_timer+0x1a0>)
 8020c66:	e027      	b.n	8020cb8 <anim_timer+0x84>
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8020c68:	199b      	adds	r3, r3, r6
 8020c6a:	f100 8099 	bmi.w	8020da0 <anim_timer+0x16c>
                if(a->early_apply == 0 && a->get_value_cb) {
 8020c6e:	f012 0f01 	tst.w	r2, #1
 8020c72:	d109      	bne.n	8020c88 <anim_timer+0x54>
 8020c74:	6963      	ldr	r3, [r4, #20]
 8020c76:	b13b      	cbz	r3, 8020c88 <anim_timer+0x54>
                    int32_t v_ofs = a->get_value_cb(a);
 8020c78:	4620      	mov	r0, r4
 8020c7a:	4798      	blx	r3
                    a->start_value += v_ofs;
 8020c7c:	6a23      	ldr	r3, [r4, #32]
 8020c7e:	4403      	add	r3, r0
 8020c80:	6223      	str	r3, [r4, #32]
                    a->end_value += v_ofs;
 8020c82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020c84:	4418      	add	r0, r3
 8020c86:	62a0      	str	r0, [r4, #40]	; 0x28
                if(a->start_cb) a->start_cb(a);
 8020c88:	68a3      	ldr	r3, [r4, #8]
 8020c8a:	b10b      	cbz	r3, 8020c90 <anim_timer+0x5c>
 8020c8c:	4620      	mov	r0, r4
 8020c8e:	4798      	blx	r3
                a->start_cb_called = 1;
 8020c90:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020c94:	f043 0308 	orr.w	r3, r3, #8
 8020c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020c9c:	e023      	b.n	8020ce6 <anim_timer+0xb2>
                if(a->act_time >= a->time) {
 8020c9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8020ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8020ca2:	429a      	cmp	r2, r3
 8020ca4:	da36      	bge.n	8020d14 <anim_timer+0xe0>
        if(anim_list_changed)
 8020ca6:	782b      	ldrb	r3, [r5, #0]
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	d07a      	beq.n	8020da2 <anim_timer+0x16e>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8020cac:	4638      	mov	r0, r7
 8020cae:	f001 f807 	bl	8021cc0 <_lv_ll_get_head>
 8020cb2:	4604      	mov	r4, r0
    while(a != NULL) {
 8020cb4:	2c00      	cmp	r4, #0
 8020cb6:	d06d      	beq.n	8020d94 <anim_timer+0x160>
        anim_list_changed = false;
 8020cb8:	f885 9000 	strb.w	r9, [r5]
        if(a->run_round != anim_run_round) {
 8020cbc:	f898 2000 	ldrb.w	r2, [r8]
 8020cc0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020cc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8020cc8:	4293      	cmp	r3, r2
 8020cca:	d06a      	beq.n	8020da2 <anim_timer+0x16e>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 8020ccc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020cd0:	f362 0382 	bfi	r3, r2, #2, #1
 8020cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8020cd8:	b2da      	uxtb	r2, r3
 8020cda:	f013 0f08 	tst.w	r3, #8
 8020cde:	d102      	bne.n	8020ce6 <anim_timer+0xb2>
            int32_t new_act_time = a->act_time + elaps;
 8020ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	ddc0      	ble.n	8020c68 <anim_timer+0x34>
            a->act_time += elaps;
 8020ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020ce8:	4433      	add	r3, r6
 8020cea:	6323      	str	r3, [r4, #48]	; 0x30
            if(a->act_time >= 0) {
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	dbda      	blt.n	8020ca6 <anim_timer+0x72>
                if(a->act_time > a->time) a->act_time = a->time;
 8020cf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8020cf2:	4293      	cmp	r3, r2
 8020cf4:	bfc8      	it	gt
 8020cf6:	6322      	strgt	r2, [r4, #48]	; 0x30
                new_value = a->path_cb(a);
 8020cf8:	69e3      	ldr	r3, [r4, #28]
 8020cfa:	4620      	mov	r0, r4
 8020cfc:	4798      	blx	r3
                if(new_value != a->current_value) {
 8020cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020d00:	4283      	cmp	r3, r0
 8020d02:	d0cc      	beq.n	8020c9e <anim_timer+0x6a>
                    a->current_value = new_value;
 8020d04:	6260      	str	r0, [r4, #36]	; 0x24
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 8020d06:	6863      	ldr	r3, [r4, #4]
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d0c8      	beq.n	8020c9e <anim_timer+0x6a>
 8020d0c:	4601      	mov	r1, r0
 8020d0e:	6820      	ldr	r0, [r4, #0]
 8020d10:	4798      	blx	r3
 8020d12:	e7c4      	b.n	8020c9e <anim_timer+0x6a>
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 8020d14:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8020d18:	f012 0202 	ands.w	r2, r2, #2
 8020d1c:	d10a      	bne.n	8020d34 <anim_timer+0x100>
 8020d1e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8020d22:	2900      	cmp	r1, #0
 8020d24:	d043      	beq.n	8020dae <anim_timer+0x17a>
 8020d26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8020d2a:	4281      	cmp	r1, r0
 8020d2c:	d046      	beq.n	8020dbc <anim_timer+0x188>
        a->repeat_cnt--;
 8020d2e:	3901      	subs	r1, #1
 8020d30:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8020d34:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8020d38:	b1b9      	cbz	r1, 8020d6a <anim_timer+0x136>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8020d3a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8020d3c:	4249      	negs	r1, r1
 8020d3e:	6321      	str	r1, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 8020d40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020d42:	2900      	cmp	r1, #0
 8020d44:	d0af      	beq.n	8020ca6 <anim_timer+0x72>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8020d46:	2a00      	cmp	r2, #0
 8020d48:	d034      	beq.n	8020db4 <anim_timer+0x180>
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 8020d4a:	fab2 f282 	clz	r2, r2
 8020d4e:	0952      	lsrs	r2, r2, #5
 8020d50:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
 8020d54:	f362 0041 	bfi	r0, r2, #1, #1
 8020d58:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
            int32_t tmp    = a->start_value;
 8020d5c:	6a22      	ldr	r2, [r4, #32]
            a->start_value = a->end_value;
 8020d5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8020d60:	6220      	str	r0, [r4, #32]
            a->end_value   = tmp;
 8020d62:	62a2      	str	r2, [r4, #40]	; 0x28
            a->time = a->playback_time;
 8020d64:	62e1      	str	r1, [r4, #44]	; 0x2c
            a->playback_time = tmp;
 8020d66:	63a3      	str	r3, [r4, #56]	; 0x38
 8020d68:	e79d      	b.n	8020ca6 <anim_timer+0x72>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8020d6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020d6c:	b101      	cbz	r1, 8020d70 <anim_timer+0x13c>
 8020d6e:	b30a      	cbz	r2, 8020db4 <anim_timer+0x180>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8020d70:	4621      	mov	r1, r4
 8020d72:	4638      	mov	r0, r7
 8020d74:	f000 ff61 	bl	8021c3a <_lv_ll_remove>
        anim_mark_list_change();
 8020d78:	f7ff ff44 	bl	8020c04 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 8020d7c:	68e3      	ldr	r3, [r4, #12]
 8020d7e:	b10b      	cbz	r3, 8020d84 <anim_timer+0x150>
 8020d80:	4620      	mov	r0, r4
 8020d82:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 8020d84:	6923      	ldr	r3, [r4, #16]
 8020d86:	b10b      	cbz	r3, 8020d8c <anim_timer+0x158>
 8020d88:	4620      	mov	r0, r4
 8020d8a:	4798      	blx	r3
        lv_mem_free(a);
 8020d8c:	4620      	mov	r0, r4
 8020d8e:	f001 f8eb 	bl	8021f68 <lv_mem_free>
 8020d92:	e788      	b.n	8020ca6 <anim_timer+0x72>
    last_timer_run = lv_tick_get();
 8020d94:	f7ff ff2b 	bl	8020bee <lv_tick_get>
 8020d98:	4b0c      	ldr	r3, [pc, #48]	; (8020dcc <anim_timer+0x198>)
 8020d9a:	6018      	str	r0, [r3, #0]
}
 8020d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            a->act_time += elaps;
 8020da0:	6323      	str	r3, [r4, #48]	; 0x30
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8020da2:	4621      	mov	r1, r4
 8020da4:	4638      	mov	r0, r7
 8020da6:	f000 ff93 	bl	8021cd0 <_lv_ll_get_next>
 8020daa:	4604      	mov	r4, r0
 8020dac:	e782      	b.n	8020cb4 <anim_timer+0x80>
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 8020dae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020db0:	2900      	cmp	r1, #0
 8020db2:	d0dd      	beq.n	8020d70 <anim_timer+0x13c>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 8020db4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8020db6:	4240      	negs	r0, r0
 8020db8:	6320      	str	r0, [r4, #48]	; 0x30
 8020dba:	e7c6      	b.n	8020d4a <anim_timer+0x116>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 8020dbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8020dbe:	4249      	negs	r1, r1
 8020dc0:	6321      	str	r1, [r4, #48]	; 0x30
        if(a->playback_time != 0) {
 8020dc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020dc4:	2900      	cmp	r1, #0
 8020dc6:	f43f af6e 	beq.w	8020ca6 <anim_timer+0x72>
 8020dca:	e7f3      	b.n	8020db4 <anim_timer+0x180>
 8020dcc:	200027f4 	.word	0x200027f4
 8020dd0:	200027f1 	.word	0x200027f1
 8020dd4:	20002800 	.word	0x20002800
 8020dd8:	200027f0 	.word	0x200027f0

08020ddc <lv_anim_path_linear>:
{
 8020ddc:	b510      	push	{r4, lr}
 8020dde:	b082      	sub	sp, #8
 8020de0:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 8020de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020de6:	9300      	str	r3, [sp, #0]
 8020de8:	2300      	movs	r3, #0
 8020dea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8020dec:	4619      	mov	r1, r3
 8020dee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020df0:	f001 f86c 	bl	8021ecc <lv_map>
    new_value = step * (a->end_value - a->start_value);
 8020df4:	6a22      	ldr	r2, [r4, #32]
 8020df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020df8:	1a9b      	subs	r3, r3, r2
 8020dfa:	fb03 f000 	mul.w	r0, r3, r0
}
 8020dfe:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8020e02:	b002      	add	sp, #8
 8020e04:	bd10      	pop	{r4, pc}
	...

08020e08 <_lv_anim_core_init>:
{
 8020e08:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8020e0a:	2144      	movs	r1, #68	; 0x44
 8020e0c:	4807      	ldr	r0, [pc, #28]	; (8020e2c <_lv_anim_core_init+0x24>)
 8020e0e:	f000 fece 	bl	8021bae <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 8020e12:	2200      	movs	r2, #0
 8020e14:	2128      	movs	r1, #40	; 0x28
 8020e16:	4806      	ldr	r0, [pc, #24]	; (8020e30 <_lv_anim_core_init+0x28>)
 8020e18:	f002 fc30 	bl	802367c <lv_timer_create>
 8020e1c:	4b05      	ldr	r3, [pc, #20]	; (8020e34 <_lv_anim_core_init+0x2c>)
 8020e1e:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 8020e20:	f7ff fef0 	bl	8020c04 <anim_mark_list_change>
    anim_list_changed = false;
 8020e24:	4b04      	ldr	r3, [pc, #16]	; (8020e38 <_lv_anim_core_init+0x30>)
 8020e26:	2200      	movs	r2, #0
 8020e28:	701a      	strb	r2, [r3, #0]
}
 8020e2a:	bd08      	pop	{r3, pc}
 8020e2c:	20002800 	.word	0x20002800
 8020e30:	08020c35 	.word	0x08020c35
 8020e34:	200027ec 	.word	0x200027ec
 8020e38:	200027f0 	.word	0x200027f0

08020e3c <lv_anim_init>:
{
 8020e3c:	b510      	push	{r4, lr}
 8020e3e:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8020e40:	2144      	movs	r1, #68	; 0x44
 8020e42:	f001 faf3 	bl	802242c <lv_memset_00>
    a->time = 500;
 8020e46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8020e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
    a->start_value = 0;
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	6223      	str	r3, [r4, #32]
    a->end_value = 100;
 8020e50:	2364      	movs	r3, #100	; 0x64
 8020e52:	62a3      	str	r3, [r4, #40]	; 0x28
    a->repeat_cnt = 1;
 8020e54:	2301      	movs	r3, #1
 8020e56:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    a->path_cb = lv_anim_path_linear;
 8020e5a:	4b04      	ldr	r3, [pc, #16]	; (8020e6c <lv_anim_init+0x30>)
 8020e5c:	61e3      	str	r3, [r4, #28]
    a->early_apply = 1;
 8020e5e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8020e62:	f043 0301 	orr.w	r3, r3, #1
 8020e66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8020e6a:	bd10      	pop	{r4, pc}
 8020e6c:	08020ddd 	.word	0x08020ddd

08020e70 <lv_anim_del>:
{
 8020e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020e74:	4606      	mov	r6, r0
 8020e76:	4688      	mov	r8, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8020e78:	4818      	ldr	r0, [pc, #96]	; (8020edc <lv_anim_del+0x6c>)
 8020e7a:	f000 ff21 	bl	8021cc0 <_lv_ll_get_head>
    while(a != NULL) {
 8020e7e:	b340      	cbz	r0, 8020ed2 <lv_anim_del+0x62>
 8020e80:	4604      	mov	r4, r0
    bool del = false;
 8020e82:	f04f 0900 	mov.w	r9, #0
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8020e86:	4f15      	ldr	r7, [pc, #84]	; (8020edc <lv_anim_del+0x6c>)
            del = true;
 8020e88:	f04f 0a01 	mov.w	sl, #1
 8020e8c:	e006      	b.n	8020e9c <lv_anim_del+0x2c>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8020e8e:	686b      	ldr	r3, [r5, #4]
 8020e90:	4543      	cmp	r3, r8
 8020e92:	d00f      	beq.n	8020eb4 <lv_anim_del+0x44>
 8020e94:	f1b8 0f00 	cmp.w	r8, #0
 8020e98:	d00c      	beq.n	8020eb4 <lv_anim_del+0x44>
    while(a != NULL) {
 8020e9a:	b1e4      	cbz	r4, 8020ed6 <lv_anim_del+0x66>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 8020e9c:	4625      	mov	r5, r4
 8020e9e:	4621      	mov	r1, r4
 8020ea0:	4638      	mov	r0, r7
 8020ea2:	f000 ff15 	bl	8021cd0 <_lv_ll_get_next>
 8020ea6:	4604      	mov	r4, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8020ea8:	682b      	ldr	r3, [r5, #0]
 8020eaa:	42b3      	cmp	r3, r6
 8020eac:	d0ef      	beq.n	8020e8e <lv_anim_del+0x1e>
 8020eae:	2e00      	cmp	r6, #0
 8020eb0:	d1f3      	bne.n	8020e9a <lv_anim_del+0x2a>
 8020eb2:	e7ec      	b.n	8020e8e <lv_anim_del+0x1e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8020eb4:	4629      	mov	r1, r5
 8020eb6:	4638      	mov	r0, r7
 8020eb8:	f000 febf 	bl	8021c3a <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 8020ebc:	692b      	ldr	r3, [r5, #16]
 8020ebe:	b10b      	cbz	r3, 8020ec4 <lv_anim_del+0x54>
 8020ec0:	4628      	mov	r0, r5
 8020ec2:	4798      	blx	r3
            lv_mem_free(a);
 8020ec4:	4628      	mov	r0, r5
 8020ec6:	f001 f84f 	bl	8021f68 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 8020eca:	f7ff fe9b 	bl	8020c04 <anim_mark_list_change>
            del = true;
 8020ece:	46d1      	mov	r9, sl
 8020ed0:	e7e3      	b.n	8020e9a <lv_anim_del+0x2a>
    bool del = false;
 8020ed2:	f04f 0900 	mov.w	r9, #0
}
 8020ed6:	4648      	mov	r0, r9
 8020ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020edc:	20002800 	.word	0x20002800

08020ee0 <lv_anim_start>:
{
 8020ee0:	b538      	push	{r3, r4, r5, lr}
 8020ee2:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 8020ee4:	6841      	ldr	r1, [r0, #4]
 8020ee6:	b111      	cbz	r1, 8020eee <lv_anim_start+0xe>
 8020ee8:	6800      	ldr	r0, [r0, #0]
 8020eea:	f7ff ffc1 	bl	8020e70 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 8020eee:	481b      	ldr	r0, [pc, #108]	; (8020f5c <lv_anim_start+0x7c>)
 8020ef0:	f000 ff04 	bl	8021cfc <_lv_ll_is_empty>
 8020ef4:	bb58      	cbnz	r0, 8020f4e <lv_anim_start+0x6e>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8020ef6:	4819      	ldr	r0, [pc, #100]	; (8020f5c <lv_anim_start+0x7c>)
 8020ef8:	f000 fe61 	bl	8021bbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 8020efc:	4605      	mov	r5, r0
 8020efe:	b358      	cbz	r0, 8020f58 <lv_anim_start+0x78>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 8020f00:	2244      	movs	r2, #68	; 0x44
 8020f02:	4621      	mov	r1, r4
 8020f04:	f001 f8fc 	bl	8022100 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8020f08:	6823      	ldr	r3, [r4, #0]
 8020f0a:	42a3      	cmp	r3, r4
 8020f0c:	bf08      	it	eq
 8020f0e:	602d      	streq	r5, [r5, #0]
    new_anim->run_round = anim_run_round;
 8020f10:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 8020f14:	4a12      	ldr	r2, [pc, #72]	; (8020f60 <lv_anim_start+0x80>)
 8020f16:	7812      	ldrb	r2, [r2, #0]
 8020f18:	f362 0382 	bfi	r3, r2, #2, #1
 8020f1c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    if(new_anim->early_apply) {
 8020f20:	f013 0f01 	tst.w	r3, #1
 8020f24:	d00f      	beq.n	8020f46 <lv_anim_start+0x66>
        if(new_anim->get_value_cb) {
 8020f26:	696b      	ldr	r3, [r5, #20]
 8020f28:	b13b      	cbz	r3, 8020f3a <lv_anim_start+0x5a>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 8020f2a:	4628      	mov	r0, r5
 8020f2c:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 8020f2e:	6a2b      	ldr	r3, [r5, #32]
 8020f30:	4403      	add	r3, r0
 8020f32:	622b      	str	r3, [r5, #32]
            new_anim->end_value += v_ofs;
 8020f34:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8020f36:	4403      	add	r3, r0
 8020f38:	62ab      	str	r3, [r5, #40]	; 0x28
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8020f3a:	686b      	ldr	r3, [r5, #4]
 8020f3c:	b11b      	cbz	r3, 8020f46 <lv_anim_start+0x66>
 8020f3e:	6828      	ldr	r0, [r5, #0]
 8020f40:	b108      	cbz	r0, 8020f46 <lv_anim_start+0x66>
 8020f42:	6a29      	ldr	r1, [r5, #32]
 8020f44:	4798      	blx	r3
    anim_mark_list_change();
 8020f46:	f7ff fe5d 	bl	8020c04 <anim_mark_list_change>
}
 8020f4a:	4628      	mov	r0, r5
 8020f4c:	bd38      	pop	{r3, r4, r5, pc}
        last_timer_run = lv_tick_get();
 8020f4e:	f7ff fe4e 	bl	8020bee <lv_tick_get>
 8020f52:	4b04      	ldr	r3, [pc, #16]	; (8020f64 <lv_anim_start+0x84>)
 8020f54:	6018      	str	r0, [r3, #0]
 8020f56:	e7ce      	b.n	8020ef6 <lv_anim_start+0x16>
    LV_ASSERT_MALLOC(new_anim);
 8020f58:	e7fe      	b.n	8020f58 <lv_anim_start+0x78>
 8020f5a:	bf00      	nop
 8020f5c:	20002800 	.word	0x20002800
 8020f60:	200027f1 	.word	0x200027f1
 8020f64:	200027f4 	.word	0x200027f4

08020f68 <lv_anim_get>:
{
 8020f68:	b570      	push	{r4, r5, r6, lr}
 8020f6a:	4604      	mov	r4, r0
 8020f6c:	460d      	mov	r5, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 8020f6e:	480b      	ldr	r0, [pc, #44]	; (8020f9c <lv_anim_get+0x34>)
 8020f70:	f000 fea6 	bl	8021cc0 <_lv_ll_get_head>
 8020f74:	4601      	mov	r1, r0
 8020f76:	b170      	cbz	r0, 8020f96 <lv_anim_get+0x2e>
 8020f78:	4e08      	ldr	r6, [pc, #32]	; (8020f9c <lv_anim_get+0x34>)
 8020f7a:	e004      	b.n	8020f86 <lv_anim_get+0x1e>
 8020f7c:	4630      	mov	r0, r6
 8020f7e:	f000 fea7 	bl	8021cd0 <_lv_ll_get_next>
 8020f82:	4601      	mov	r1, r0
 8020f84:	b138      	cbz	r0, 8020f96 <lv_anim_get+0x2e>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8020f86:	680b      	ldr	r3, [r1, #0]
 8020f88:	42a3      	cmp	r3, r4
 8020f8a:	d1f7      	bne.n	8020f7c <lv_anim_get+0x14>
 8020f8c:	684b      	ldr	r3, [r1, #4]
 8020f8e:	42ab      	cmp	r3, r5
 8020f90:	d001      	beq.n	8020f96 <lv_anim_get+0x2e>
 8020f92:	2d00      	cmp	r5, #0
 8020f94:	d1f2      	bne.n	8020f7c <lv_anim_get+0x14>
}
 8020f96:	4608      	mov	r0, r1
 8020f98:	bd70      	pop	{r4, r5, r6, pc}
 8020f9a:	bf00      	nop
 8020f9c:	20002800 	.word	0x20002800

08020fa0 <lv_anim_speed_to_time>:
{
 8020fa0:	4603      	mov	r3, r0
    uint32_t d    = LV_ABS(start - end);
 8020fa2:	1a8a      	subs	r2, r1, r2
 8020fa4:	2a00      	cmp	r2, #0
 8020fa6:	bfb8      	it	lt
 8020fa8:	4252      	neglt	r2, r2
    uint32_t time = (d * 1000) / speed;
 8020faa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8020fae:	fb01 f202 	mul.w	r2, r1, r2
 8020fb2:	fbb2 f0f0 	udiv	r0, r2, r0
    if(time == 0) {
 8020fb6:	429a      	cmp	r2, r3
        time++;
 8020fb8:	bf38      	it	cc
 8020fba:	3001      	addcc	r0, #1
}
 8020fbc:	4770      	bx	lr

08020fbe <lv_anim_path_ease_out>:
{
 8020fbe:	b530      	push	{r4, r5, lr}
 8020fc0:	b083      	sub	sp, #12
 8020fc2:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8020fc4:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8020fc8:	9500      	str	r5, [sp, #0]
 8020fca:	2300      	movs	r3, #0
 8020fcc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8020fce:	4619      	mov	r1, r3
 8020fd0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8020fd2:	f000 ff7b 	bl	8021ecc <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 8020fd6:	9500      	str	r5, [sp, #0]
 8020fd8:	f240 33b6 	movw	r3, #950	; 0x3b6
 8020fdc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8020fe0:	2100      	movs	r1, #0
 8020fe2:	f000 fed3 	bl	8021d8c <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 8020fe6:	6a22      	ldr	r2, [r4, #32]
 8020fe8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020fea:	1a9b      	subs	r3, r3, r2
 8020fec:	fb03 f000 	mul.w	r0, r3, r0
}
 8020ff0:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8020ff4:	b003      	add	sp, #12
 8020ff6:	bd30      	pop	{r4, r5, pc}

08020ff8 <lv_anim_path_ease_in_out>:
{
 8020ff8:	b530      	push	{r4, r5, lr}
 8020ffa:	b083      	sub	sp, #12
 8020ffc:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 8020ffe:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8021002:	9500      	str	r5, [sp, #0]
 8021004:	2300      	movs	r3, #0
 8021006:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8021008:	4619      	mov	r1, r3
 802100a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802100c:	f000 ff5e 	bl	8021ecc <lv_map>
    int32_t step = lv_bezier3(t, 0, 50, 952, LV_BEZIER_VAL_MAX);
 8021010:	9500      	str	r5, [sp, #0]
 8021012:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 8021016:	2232      	movs	r2, #50	; 0x32
 8021018:	2100      	movs	r1, #0
 802101a:	f000 feb7 	bl	8021d8c <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 802101e:	6a22      	ldr	r2, [r4, #32]
 8021020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021022:	1a9b      	subs	r3, r3, r2
 8021024:	fb03 f000 	mul.w	r0, r3, r0
}
 8021028:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 802102c:	b003      	add	sp, #12
 802102e:	bd30      	pop	{r4, r5, pc}

08021030 <lv_anim_path_step>:
    if(a->act_time >= a->time)
 8021030:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8021032:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8021034:	429a      	cmp	r2, r3
        return a->end_value;
 8021036:	bfac      	ite	ge
 8021038:	6a80      	ldrge	r0, [r0, #40]	; 0x28
        return a->start_value;
 802103a:	6a00      	ldrlt	r0, [r0, #32]
}
 802103c:	4770      	bx	lr

0802103e <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 802103e:	b500      	push	{lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 8021040:	f9b0 e000 	ldrsh.w	lr, [r0]
 8021044:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8021048:	eba3 030e 	sub.w	r3, r3, lr
 802104c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 8021050:	f3c3 0c4f 	ubfx	ip, r3, #1, #16

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
    lv_coord_t py = p->y - cy;

    uint32_t r_sqrd = r * r;
 8021054:	f343 034f 	sbfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
 8021058:	880a      	ldrh	r2, [r1, #0]
 802105a:	eba2 020e 	sub.w	r2, r2, lr
 802105e:	eba2 020c 	sub.w	r2, r2, ip
    uint32_t dist = (px * px) + (py * py);
 8021062:	b212      	sxth	r2, r2
    lv_coord_t py = p->y - cy;
 8021064:	8849      	ldrh	r1, [r1, #2]
 8021066:	8840      	ldrh	r0, [r0, #2]
 8021068:	1a08      	subs	r0, r1, r0
 802106a:	eba0 000c 	sub.w	r0, r0, ip
    uint32_t dist = (px * px) + (py * py);
 802106e:	b200      	sxth	r0, r0
    uint32_t r_sqrd = r * r;
 8021070:	fb03 f303 	mul.w	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
 8021074:	fb00 f000 	mul.w	r0, r0, r0
 8021078:	fb02 0202 	mla	r2, r2, r2, r0

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
 802107c:	4293      	cmp	r3, r2
 802107e:	bf34      	ite	cc
 8021080:	2000      	movcc	r0, #0
 8021082:	2001      	movcs	r0, #1
 8021084:	f85d fb04 	ldr.w	pc, [sp], #4

08021088 <lv_area_set>:
    area_p->x1 = x1;
 8021088:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 802108a:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 802108c:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 802108e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8021092:	80c3      	strh	r3, [r0, #6]
}
 8021094:	4770      	bx	lr

08021096 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 8021096:	3901      	subs	r1, #1
 8021098:	8803      	ldrh	r3, [r0, #0]
 802109a:	4419      	add	r1, r3
 802109c:	8081      	strh	r1, [r0, #4]
}
 802109e:	4770      	bx	lr

080210a0 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 80210a0:	3901      	subs	r1, #1
 80210a2:	8843      	ldrh	r3, [r0, #2]
 80210a4:	4419      	add	r1, r3
 80210a6:	80c1      	strh	r1, [r0, #6]
}
 80210a8:	4770      	bx	lr

080210aa <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 80210aa:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80210ae:	f9b0 3000 	ldrsh.w	r3, [r0]
 80210b2:	1ad2      	subs	r2, r2, r3
 80210b4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80210b8:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 80210bc:	1a18      	subs	r0, r3, r0
 80210be:	3001      	adds	r0, #1
}
 80210c0:	fb02 0000 	mla	r0, r2, r0, r0
 80210c4:	4770      	bx	lr

080210c6 <lv_area_increase>:
    area->x1 -= w_extra;
 80210c6:	b289      	uxth	r1, r1
 80210c8:	8803      	ldrh	r3, [r0, #0]
 80210ca:	1a5b      	subs	r3, r3, r1
 80210cc:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 80210ce:	8883      	ldrh	r3, [r0, #4]
 80210d0:	4419      	add	r1, r3
 80210d2:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 80210d4:	b292      	uxth	r2, r2
 80210d6:	8843      	ldrh	r3, [r0, #2]
 80210d8:	1a9b      	subs	r3, r3, r2
 80210da:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 80210dc:	88c3      	ldrh	r3, [r0, #6]
 80210de:	441a      	add	r2, r3
 80210e0:	80c2      	strh	r2, [r0, #6]
}
 80210e2:	4770      	bx	lr

080210e4 <lv_area_move>:
    area->x1 += x_ofs;
 80210e4:	b289      	uxth	r1, r1
 80210e6:	8803      	ldrh	r3, [r0, #0]
 80210e8:	440b      	add	r3, r1
 80210ea:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 80210ec:	8883      	ldrh	r3, [r0, #4]
 80210ee:	4419      	add	r1, r3
 80210f0:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 80210f2:	b292      	uxth	r2, r2
 80210f4:	8843      	ldrh	r3, [r0, #2]
 80210f6:	4413      	add	r3, r2
 80210f8:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 80210fa:	88c3      	ldrh	r3, [r0, #6]
 80210fc:	441a      	add	r2, r3
 80210fe:	80c2      	strh	r2, [r0, #6]
}
 8021100:	4770      	bx	lr

08021102 <_lv_area_intersect>:
{
 8021102:	b510      	push	{r4, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 8021104:	f9b2 e000 	ldrsh.w	lr, [r2]
 8021108:	f9b1 3000 	ldrsh.w	r3, [r1]
 802110c:	459e      	cmp	lr, r3
 802110e:	bfb8      	it	lt
 8021110:	469e      	movlt	lr, r3
 8021112:	f8a0 e000 	strh.w	lr, [r0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8021116:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 802111a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 802111e:	42a3      	cmp	r3, r4
 8021120:	bfb8      	it	lt
 8021122:	4623      	movlt	r3, r4
 8021124:	8043      	strh	r3, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8021126:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 802112a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 802112e:	45a4      	cmp	ip, r4
 8021130:	bfa8      	it	ge
 8021132:	46a4      	movge	ip, r4
 8021134:	f8a0 c004 	strh.w	ip, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8021138:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 802113c:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8021140:	428a      	cmp	r2, r1
 8021142:	bfa8      	it	ge
 8021144:	460a      	movge	r2, r1
 8021146:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8021148:	45e6      	cmp	lr, ip
 802114a:	dc04      	bgt.n	8021156 <_lv_area_intersect+0x54>
 802114c:	4293      	cmp	r3, r2
 802114e:	bfcc      	ite	gt
 8021150:	2000      	movgt	r0, #0
 8021152:	2001      	movle	r0, #1
}
 8021154:	bd10      	pop	{r4, pc}
        union_ok = false;
 8021156:	2000      	movs	r0, #0
 8021158:	e7fc      	b.n	8021154 <_lv_area_intersect+0x52>

0802115a <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 802115a:	f9b2 3000 	ldrsh.w	r3, [r2]
 802115e:	f9b1 c000 	ldrsh.w	ip, [r1]
 8021162:	4563      	cmp	r3, ip
 8021164:	bfa8      	it	ge
 8021166:	4663      	movge	r3, ip
 8021168:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 802116a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 802116e:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8021172:	4563      	cmp	r3, ip
 8021174:	bfa8      	it	ge
 8021176:	4663      	movge	r3, ip
 8021178:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 802117a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802117e:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
 8021182:	4563      	cmp	r3, ip
 8021184:	bfb8      	it	lt
 8021186:	4663      	movlt	r3, ip
 8021188:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 802118a:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 802118e:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8021192:	4293      	cmp	r3, r2
 8021194:	bfb8      	it	lt
 8021196:	4613      	movlt	r3, r2
 8021198:	80c3      	strh	r3, [r0, #6]
}
 802119a:	4770      	bx	lr

0802119c <_lv_area_is_point_on>:
{
 802119c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211a0:	b085      	sub	sp, #20
 80211a2:	460c      	mov	r4, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 80211a4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80211a8:	f9b0 1000 	ldrsh.w	r1, [r0]
 80211ac:	428b      	cmp	r3, r1
 80211ae:	f2c0 80a5 	blt.w	80212fc <_lv_area_is_point_on+0x160>
 80211b2:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 80211b6:	42b3      	cmp	r3, r6
 80211b8:	f300 80a4 	bgt.w	8021304 <_lv_area_is_point_on+0x168>
 80211bc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80211c0:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 80211c4:	42bb      	cmp	r3, r7
 80211c6:	f2c0 809f 	blt.w	8021308 <_lv_area_is_point_on+0x16c>
 80211ca:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 80211ce:	454b      	cmp	r3, r9
 80211d0:	f300 809c 	bgt.w	802130c <_lv_area_is_point_on+0x170>
    if(radius <= 0) {
 80211d4:	2a00      	cmp	r2, #0
 80211d6:	f340 809b 	ble.w	8021310 <_lv_area_is_point_on+0x174>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80211da:	fa1f fb86 	uxth.w	fp, r6
 80211de:	fa1f f881 	uxth.w	r8, r1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80211e2:	fa1f fa89 	uxth.w	sl, r9
 80211e6:	b2b8      	uxth	r0, r7
    corner_area.x1 = a_p->x1;
 80211e8:	f8ad 1008 	strh.w	r1, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80211ec:	f10b 0301 	add.w	r3, fp, #1
 80211f0:	eba3 0308 	sub.w	r3, r3, r8
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 80211f4:	b219      	sxth	r1, r3
 80211f6:	f3c3 35c0 	ubfx	r5, r3, #15, #1
 80211fa:	440d      	add	r5, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80211fc:	f10a 0301 	add.w	r3, sl, #1
 8021200:	4601      	mov	r1, r0
 8021202:	1a1b      	subs	r3, r3, r0
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8021204:	b218      	sxth	r0, r3
 8021206:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 802120a:	4403      	add	r3, r0
    lv_coord_t max_radius = LV_MIN(w, h);
 802120c:	106d      	asrs	r5, r5, #1
 802120e:	105b      	asrs	r3, r3, #1
    corner_area.x2 = a_p->x1 + radius;
 8021210:	429d      	cmp	r5, r3
 8021212:	bfa8      	it	ge
 8021214:	461d      	movge	r5, r3
 8021216:	42aa      	cmp	r2, r5
 8021218:	bfa8      	it	ge
 802121a:	462a      	movge	r2, r5
 802121c:	b295      	uxth	r5, r2
 802121e:	44a8      	add	r8, r5
 8021220:	fa1f f888 	uxth.w	r8, r8
 8021224:	f8ad 800c 	strh.w	r8, [sp, #12]
    corner_area.y1 = a_p->y1;
 8021228:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 802122c:	4429      	add	r1, r5
 802122e:	b28b      	uxth	r3, r1
 8021230:	9300      	str	r3, [sp, #0]
 8021232:	b20b      	sxth	r3, r1
 8021234:	9301      	str	r3, [sp, #4]
 8021236:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 802123a:	2200      	movs	r2, #0
 802123c:	4621      	mov	r1, r4
 802123e:	a802      	add	r0, sp, #8
 8021240:	f7ff ffac 	bl	802119c <_lv_area_is_point_on>
 8021244:	b158      	cbz	r0, 802125e <_lv_area_is_point_on+0xc2>
        corner_area.x2 += radius;
 8021246:	44a8      	add	r8, r5
 8021248:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y2 += radius;
 802124c:	9b00      	ldr	r3, [sp, #0]
 802124e:	441d      	add	r5, r3
 8021250:	f8ad 500e 	strh.w	r5, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
 8021254:	4621      	mov	r1, r4
 8021256:	a802      	add	r0, sp, #8
 8021258:	f7ff fef1 	bl	802103e <lv_point_within_circle>
 802125c:	e04f      	b.n	80212fe <_lv_area_is_point_on+0x162>
    corner_area.y1 = a_p->y2 - radius;
 802125e:	ebaa 0a05 	sub.w	sl, sl, r5
 8021262:	fa1f fa8a 	uxth.w	sl, sl
 8021266:	f8ad a00a 	strh.w	sl, [sp, #10]
    corner_area.y2 = a_p->y2;
 802126a:	f8ad 900e 	strh.w	r9, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 802126e:	2200      	movs	r2, #0
 8021270:	4621      	mov	r1, r4
 8021272:	a802      	add	r0, sp, #8
 8021274:	f7ff ff92 	bl	802119c <_lv_area_is_point_on>
 8021278:	b158      	cbz	r0, 8021292 <_lv_area_is_point_on+0xf6>
        corner_area.x2 += radius;
 802127a:	44a8      	add	r8, r5
 802127c:	f8ad 800c 	strh.w	r8, [sp, #12]
        corner_area.y1 -= radius;
 8021280:	ebaa 0a05 	sub.w	sl, sl, r5
 8021284:	f8ad a00a 	strh.w	sl, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 8021288:	4621      	mov	r1, r4
 802128a:	a802      	add	r0, sp, #8
 802128c:	f7ff fed7 	bl	802103e <lv_point_within_circle>
 8021290:	e035      	b.n	80212fe <_lv_area_is_point_on+0x162>
    corner_area.x1 = a_p->x2 - radius;
 8021292:	ebab 0b05 	sub.w	fp, fp, r5
 8021296:	fa1f fb8b 	uxth.w	fp, fp
 802129a:	f8ad b008 	strh.w	fp, [sp, #8]
    corner_area.x2 = a_p->x2;
 802129e:	f8ad 600c 	strh.w	r6, [sp, #12]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80212a2:	2200      	movs	r2, #0
 80212a4:	4621      	mov	r1, r4
 80212a6:	a802      	add	r0, sp, #8
 80212a8:	f7ff ff78 	bl	802119c <_lv_area_is_point_on>
 80212ac:	b160      	cbz	r0, 80212c8 <_lv_area_is_point_on+0x12c>
        corner_area.x1 -= radius;
 80212ae:	ebab 0b05 	sub.w	fp, fp, r5
 80212b2:	f8ad b008 	strh.w	fp, [sp, #8]
        corner_area.y1 -= radius;
 80212b6:	ebaa 0505 	sub.w	r5, sl, r5
 80212ba:	f8ad 500a 	strh.w	r5, [sp, #10]
        return lv_point_within_circle(&corner_area, p_p);
 80212be:	4621      	mov	r1, r4
 80212c0:	a802      	add	r0, sp, #8
 80212c2:	f7ff febc 	bl	802103e <lv_point_within_circle>
 80212c6:	e01a      	b.n	80212fe <_lv_area_is_point_on+0x162>
    corner_area.y1 = a_p->y1;
 80212c8:	f8ad 700a 	strh.w	r7, [sp, #10]
    corner_area.y2 = a_p->y1 + radius;
 80212cc:	9b01      	ldr	r3, [sp, #4]
 80212ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 80212d2:	2200      	movs	r2, #0
 80212d4:	4621      	mov	r1, r4
 80212d6:	a802      	add	r0, sp, #8
 80212d8:	f7ff ff60 	bl	802119c <_lv_area_is_point_on>
 80212dc:	b908      	cbnz	r0, 80212e2 <_lv_area_is_point_on+0x146>
    return true;
 80212de:	2001      	movs	r0, #1
 80212e0:	e00d      	b.n	80212fe <_lv_area_is_point_on+0x162>
        corner_area.x1 -= radius;
 80212e2:	ebab 0b05 	sub.w	fp, fp, r5
 80212e6:	f8ad b008 	strh.w	fp, [sp, #8]
        corner_area.y2 += radius;
 80212ea:	9b00      	ldr	r3, [sp, #0]
 80212ec:	441d      	add	r5, r3
 80212ee:	f8ad 500e 	strh.w	r5, [sp, #14]
        return lv_point_within_circle(&corner_area, p_p);
 80212f2:	4621      	mov	r1, r4
 80212f4:	a802      	add	r0, sp, #8
 80212f6:	f7ff fea2 	bl	802103e <lv_point_within_circle>
 80212fa:	e000      	b.n	80212fe <_lv_area_is_point_on+0x162>
        return false;
 80212fc:	2000      	movs	r0, #0
}
 80212fe:	b005      	add	sp, #20
 8021300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return false;
 8021304:	2000      	movs	r0, #0
 8021306:	e7fa      	b.n	80212fe <_lv_area_is_point_on+0x162>
 8021308:	2000      	movs	r0, #0
 802130a:	e7f8      	b.n	80212fe <_lv_area_is_point_on+0x162>
 802130c:	2000      	movs	r0, #0
 802130e:	e7f6      	b.n	80212fe <_lv_area_is_point_on+0x162>
        return true;
 8021310:	2001      	movs	r0, #1
 8021312:	e7f4      	b.n	80212fe <_lv_area_is_point_on+0x162>

08021314 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8021314:	f9b0 2000 	ldrsh.w	r2, [r0]
 8021318:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802131c:	429a      	cmp	r2, r3
 802131e:	dc14      	bgt.n	802134a <_lv_area_is_on+0x36>
 8021320:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8021324:	f9b1 3000 	ldrsh.w	r3, [r1]
 8021328:	429a      	cmp	r2, r3
 802132a:	db10      	blt.n	802134e <_lv_area_is_on+0x3a>
 802132c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8021330:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8021334:	429a      	cmp	r2, r3
 8021336:	dc0c      	bgt.n	8021352 <_lv_area_is_on+0x3e>
 8021338:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 802133c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8021340:	4298      	cmp	r0, r3
 8021342:	bfb4      	ite	lt
 8021344:	2000      	movlt	r0, #0
 8021346:	2001      	movge	r0, #1
 8021348:	4770      	bx	lr
        return false;
 802134a:	2000      	movs	r0, #0
 802134c:	4770      	bx	lr
 802134e:	2000      	movs	r0, #0
 8021350:	4770      	bx	lr
 8021352:	2000      	movs	r0, #0
}
 8021354:	4770      	bx	lr

08021356 <_lv_area_is_in>:
{
 8021356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802135a:	b082      	sub	sp, #8
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 802135c:	f9b0 6000 	ldrsh.w	r6, [r0]
 8021360:	f9b1 3000 	ldrsh.w	r3, [r1]
 8021364:	42b3      	cmp	r3, r6
 8021366:	dc3a      	bgt.n	80213de <_lv_area_is_in+0x88>
 8021368:	460c      	mov	r4, r1
 802136a:	4615      	mov	r5, r2
 802136c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021370:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8021374:	429a      	cmp	r2, r3
 8021376:	dc36      	bgt.n	80213e6 <_lv_area_is_in+0x90>
 8021378:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 802137c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8021380:	42ba      	cmp	r2, r7
 8021382:	db32      	blt.n	80213ea <_lv_area_is_in+0x94>
       ain_p->y2 <= aholder_p->y2) {
 8021384:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8021388:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 802138c:	4542      	cmp	r2, r8
 802138e:	db2e      	blt.n	80213ee <_lv_area_is_in+0x98>
    if(radius == 0) return true;
 8021390:	b90d      	cbnz	r5, 8021396 <_lv_area_is_in+0x40>
 8021392:	2001      	movs	r0, #1
 8021394:	e024      	b.n	80213e0 <_lv_area_is_in+0x8a>
    p.x = ain_p->x1;
 8021396:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y1;
 802139a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 802139e:	462a      	mov	r2, r5
 80213a0:	a901      	add	r1, sp, #4
 80213a2:	4620      	mov	r0, r4
 80213a4:	f7ff fefa 	bl	802119c <_lv_area_is_point_on>
 80213a8:	b1d0      	cbz	r0, 80213e0 <_lv_area_is_in+0x8a>
    p.x = ain_p->x2;
 80213aa:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80213ae:	462a      	mov	r2, r5
 80213b0:	a901      	add	r1, sp, #4
 80213b2:	4620      	mov	r0, r4
 80213b4:	f7ff fef2 	bl	802119c <_lv_area_is_point_on>
 80213b8:	b190      	cbz	r0, 80213e0 <_lv_area_is_in+0x8a>
    p.x = ain_p->x1;
 80213ba:	f8ad 6004 	strh.w	r6, [sp, #4]
    p.y = ain_p->y2;
 80213be:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80213c2:	462a      	mov	r2, r5
 80213c4:	a901      	add	r1, sp, #4
 80213c6:	4620      	mov	r0, r4
 80213c8:	f7ff fee8 	bl	802119c <_lv_area_is_point_on>
 80213cc:	b140      	cbz	r0, 80213e0 <_lv_area_is_in+0x8a>
    p.x = ain_p->x2;
 80213ce:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 80213d2:	462a      	mov	r2, r5
 80213d4:	a901      	add	r1, sp, #4
 80213d6:	4620      	mov	r0, r4
 80213d8:	f7ff fee0 	bl	802119c <_lv_area_is_point_on>
 80213dc:	e000      	b.n	80213e0 <_lv_area_is_in+0x8a>
    if(!is_in) return false;
 80213de:	2000      	movs	r0, #0
}
 80213e0:	b002      	add	sp, #8
 80213e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!is_in) return false;
 80213e6:	2000      	movs	r0, #0
 80213e8:	e7fa      	b.n	80213e0 <_lv_area_is_in+0x8a>
 80213ea:	2000      	movs	r0, #0
 80213ec:	e7f8      	b.n	80213e0 <_lv_area_is_in+0x8a>
 80213ee:	2000      	movs	r0, #0
 80213f0:	e7f6      	b.n	80213e0 <_lv_area_is_in+0x8a>

080213f2 <_lv_area_is_out>:
{
 80213f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80213f6:	b082      	sub	sp, #8
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 80213f8:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 80213fc:	f9b1 3000 	ldrsh.w	r3, [r1]
 8021400:	42bb      	cmp	r3, r7
 8021402:	dc43      	bgt.n	802148c <_lv_area_is_out+0x9a>
 8021404:	460c      	mov	r4, r1
 8021406:	4616      	mov	r6, r2
 8021408:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 802140c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8021410:	4543      	cmp	r3, r8
 8021412:	dc40      	bgt.n	8021496 <_lv_area_is_out+0xa4>
 8021414:	f9b0 9000 	ldrsh.w	r9, [r0]
 8021418:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802141c:	454b      	cmp	r3, r9
 802141e:	db3c      	blt.n	802149a <_lv_area_is_out+0xa8>
       aout_p->y1 > aholder_p->y2) {
 8021420:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8021424:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8021428:	429a      	cmp	r2, r3
 802142a:	db38      	blt.n	802149e <_lv_area_is_out+0xac>
    if(radius == 0) return false;
 802142c:	b90e      	cbnz	r6, 8021432 <_lv_area_is_out+0x40>
 802142e:	2500      	movs	r5, #0
 8021430:	e02d      	b.n	802148e <_lv_area_is_out+0x9c>
    p.x = aout_p->x1;
 8021432:	f8ad 9004 	strh.w	r9, [sp, #4]
    p.y = aout_p->y1;
 8021436:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 802143a:	4632      	mov	r2, r6
 802143c:	a901      	add	r1, sp, #4
 802143e:	4620      	mov	r0, r4
 8021440:	f7ff feac 	bl	802119c <_lv_area_is_point_on>
 8021444:	4605      	mov	r5, r0
 8021446:	b108      	cbz	r0, 802144c <_lv_area_is_out+0x5a>
 8021448:	2500      	movs	r5, #0
 802144a:	e020      	b.n	802148e <_lv_area_is_out+0x9c>
    p.x = aout_p->x2;
 802144c:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8021450:	4632      	mov	r2, r6
 8021452:	a901      	add	r1, sp, #4
 8021454:	4620      	mov	r0, r4
 8021456:	f7ff fea1 	bl	802119c <_lv_area_is_point_on>
 802145a:	4682      	mov	sl, r0
 802145c:	b9b8      	cbnz	r0, 802148e <_lv_area_is_out+0x9c>
    p.x = aout_p->x1;
 802145e:	f8ad 9004 	strh.w	r9, [sp, #4]
    p.y = aout_p->y2;
 8021462:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8021466:	4632      	mov	r2, r6
 8021468:	a901      	add	r1, sp, #4
 802146a:	4620      	mov	r0, r4
 802146c:	f7ff fe96 	bl	802119c <_lv_area_is_point_on>
 8021470:	b108      	cbz	r0, 8021476 <_lv_area_is_out+0x84>
 8021472:	4655      	mov	r5, sl
 8021474:	e00b      	b.n	802148e <_lv_area_is_out+0x9c>
    p.x = aout_p->x2;
 8021476:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 802147a:	4632      	mov	r2, r6
 802147c:	a901      	add	r1, sp, #4
 802147e:	4620      	mov	r0, r4
 8021480:	f7ff fe8c 	bl	802119c <_lv_area_is_point_on>
 8021484:	f080 0501 	eor.w	r5, r0, #1
 8021488:	b2ed      	uxtb	r5, r5
 802148a:	e000      	b.n	802148e <_lv_area_is_out+0x9c>
        return true;
 802148c:	2501      	movs	r5, #1
}
 802148e:	4628      	mov	r0, r5
 8021490:	b002      	add	sp, #8
 8021492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
 8021496:	2501      	movs	r5, #1
 8021498:	e7f9      	b.n	802148e <_lv_area_is_out+0x9c>
 802149a:	2501      	movs	r5, #1
 802149c:	e7f7      	b.n	802148e <_lv_area_is_out+0x9c>
 802149e:	2501      	movs	r5, #1
 80214a0:	e7f5      	b.n	802148e <_lv_area_is_out+0x9c>
	...

080214a4 <lv_point_transform>:
{
 80214a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214a8:	b083      	sub	sp, #12
 80214aa:	4604      	mov	r4, r0
 80214ac:	4616      	mov	r6, r2
 80214ae:	461d      	mov	r5, r3
    if(angle == 0 && zoom == 256) {
 80214b0:	2900      	cmp	r1, #0
 80214b2:	d136      	bne.n	8021522 <lv_point_transform+0x7e>
 80214b4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80214b8:	f000 80a6 	beq.w	8021608 <lv_point_transform+0x164>
    p->x -= pivot->x;
 80214bc:	8803      	ldrh	r3, [r0, #0]
 80214be:	882a      	ldrh	r2, [r5, #0]
 80214c0:	1a9b      	subs	r3, r3, r2
 80214c2:	b21b      	sxth	r3, r3
 80214c4:	8003      	strh	r3, [r0, #0]
    p->y -= pivot->y;
 80214c6:	8842      	ldrh	r2, [r0, #2]
 80214c8:	8869      	ldrh	r1, [r5, #2]
 80214ca:	1a52      	subs	r2, r2, r1
 80214cc:	b212      	sxth	r2, r2
 80214ce:	8042      	strh	r2, [r0, #2]
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 80214d0:	fb06 f303 	mul.w	r3, r6, r3
 80214d4:	8829      	ldrh	r1, [r5, #0]
 80214d6:	eb01 2323 	add.w	r3, r1, r3, asr #8
 80214da:	8003      	strh	r3, [r0, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 80214dc:	fb06 f202 	mul.w	r2, r6, r2
 80214e0:	886e      	ldrh	r6, [r5, #2]
 80214e2:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80214e6:	8042      	strh	r2, [r0, #2]
        return;
 80214e8:	e08e      	b.n	8021608 <lv_point_transform+0x164>
        if(angle_limited < 0) angle_limited += 3600;
 80214ea:	f1b9 0f00 	cmp.w	r9, #0
 80214ee:	bfb4      	ite	lt
 80214f0:	f509 6861 	addlt.w	r8, r9, #3600	; 0xe10
        int32_t angle_limited = angle;
 80214f4:	46c8      	movge	r8, r9
 80214f6:	e026      	b.n	8021546 <lv_point_transform+0xa2>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 80214f8:	4b45      	ldr	r3, [pc, #276]	; (8021610 <lv_point_transform+0x16c>)
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	4a45      	ldr	r2, [pc, #276]	; (8021614 <lv_point_transform+0x170>)
 80214fe:	6817      	ldr	r7, [r2, #0]
 8021500:	fb01 f203 	mul.w	r2, r1, r3
 8021504:	fb00 2617 	mls	r6, r0, r7, r2
 8021508:	882a      	ldrh	r2, [r5, #0]
 802150a:	eb02 22a6 	add.w	r2, r2, r6, asr #10
 802150e:	8022      	strh	r2, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 8021510:	fb00 f303 	mul.w	r3, r0, r3
 8021514:	fb01 3307 	mla	r3, r1, r7, r3
 8021518:	8869      	ldrh	r1, [r5, #2]
 802151a:	eb01 23a3 	add.w	r3, r1, r3, asr #10
 802151e:	8063      	strh	r3, [r4, #2]
 8021520:	e072      	b.n	8021608 <lv_point_transform+0x164>
 8021522:	4689      	mov	r9, r1
    p->x -= pivot->x;
 8021524:	8803      	ldrh	r3, [r0, #0]
 8021526:	882a      	ldrh	r2, [r5, #0]
 8021528:	1a9b      	subs	r3, r3, r2
 802152a:	8003      	strh	r3, [r0, #0]
    p->y -= pivot->y;
 802152c:	8843      	ldrh	r3, [r0, #2]
 802152e:	886a      	ldrh	r2, [r5, #2]
 8021530:	1a9b      	subs	r3, r3, r2
 8021532:	8043      	strh	r3, [r0, #2]
    if(angle_prev != angle) {
 8021534:	4b38      	ldr	r3, [pc, #224]	; (8021618 <lv_point_transform+0x174>)
 8021536:	681b      	ldr	r3, [r3, #0]
 8021538:	428b      	cmp	r3, r1
 802153a:	d045      	beq.n	80215c8 <lv_point_transform+0x124>
        if(angle_limited > 3600) angle_limited -= 3600;
 802153c:	f5b9 6f61 	cmp.w	r9, #3600	; 0xe10
 8021540:	ddd3      	ble.n	80214ea <lv_point_transform+0x46>
 8021542:	f5a9 6861 	sub.w	r8, r9, #3600	; 0xe10
        int32_t angle_low = angle_limited / 10;
 8021546:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802161c <lv_point_transform+0x178>
 802154a:	fb8a 3008 	smull	r3, r0, sl, r8
 802154e:	ea4f 77e8 	mov.w	r7, r8, asr #31
 8021552:	ebc7 07a0 	rsb	r7, r7, r0, asr #2
        int32_t angle_high = angle_low + 1;
 8021556:	f107 0b01 	add.w	fp, r7, #1
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 802155a:	f06f 0309 	mvn.w	r3, #9
 802155e:	fb03 8807 	mla	r8, r3, r7, r8
        int32_t s1 = lv_trigo_sin(angle_low);
 8021562:	b238      	sxth	r0, r7
 8021564:	f000 fbd6 	bl	8021d14 <lv_trigo_sin>
 8021568:	9000      	str	r0, [sp, #0]
        int32_t s2 = lv_trigo_sin(angle_high);
 802156a:	fa0f f08b 	sxth.w	r0, fp
 802156e:	f000 fbd1 	bl	8021d14 <lv_trigo_sin>
 8021572:	9001      	str	r0, [sp, #4]
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8021574:	f107 005a 	add.w	r0, r7, #90	; 0x5a
 8021578:	b200      	sxth	r0, r0
 802157a:	f000 fbcb 	bl	8021d14 <lv_trigo_sin>
 802157e:	4607      	mov	r7, r0
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8021580:	f10b 005a 	add.w	r0, fp, #90	; 0x5a
 8021584:	b200      	sxth	r0, r0
 8021586:	f000 fbc5 	bl	8021d14 <lv_trigo_sin>
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 802158a:	f1c8 020a 	rsb	r2, r8, #10
 802158e:	9b01      	ldr	r3, [sp, #4]
 8021590:	fb08 f303 	mul.w	r3, r8, r3
 8021594:	9900      	ldr	r1, [sp, #0]
 8021596:	fb02 3301 	mla	r3, r2, r1, r3
 802159a:	fb8a c103 	smull	ip, r1, sl, r3
 802159e:	17db      	asrs	r3, r3, #31
 80215a0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80215a4:	115b      	asrs	r3, r3, #5
 80215a6:	491b      	ldr	r1, [pc, #108]	; (8021614 <lv_point_transform+0x170>)
 80215a8:	600b      	str	r3, [r1, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 80215aa:	fb08 f800 	mul.w	r8, r8, r0
 80215ae:	fb02 8707 	mla	r7, r2, r7, r8
 80215b2:	fb8a 3a07 	smull	r3, sl, sl, r7
 80215b6:	17ff      	asrs	r7, r7, #31
 80215b8:	ebc7 07aa 	rsb	r7, r7, sl, asr #2
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 80215bc:	117f      	asrs	r7, r7, #5
 80215be:	4b14      	ldr	r3, [pc, #80]	; (8021610 <lv_point_transform+0x16c>)
 80215c0:	601f      	str	r7, [r3, #0]
        angle_prev = angle;
 80215c2:	4b15      	ldr	r3, [pc, #84]	; (8021618 <lv_point_transform+0x174>)
 80215c4:	f8c3 9000 	str.w	r9, [r3]
    int32_t x = p->x;
 80215c8:	f9b4 1000 	ldrsh.w	r1, [r4]
    int32_t y = p->y;
 80215cc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    if(zoom == 256) {
 80215d0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80215d4:	d090      	beq.n	80214f8 <lv_point_transform+0x54>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 80215d6:	4b0e      	ldr	r3, [pc, #56]	; (8021610 <lv_point_transform+0x16c>)
 80215d8:	681b      	ldr	r3, [r3, #0]
 80215da:	4a0e      	ldr	r2, [pc, #56]	; (8021614 <lv_point_transform+0x170>)
 80215dc:	f8d2 c000 	ldr.w	ip, [r2]
 80215e0:	fb01 f203 	mul.w	r2, r1, r3
 80215e4:	fb00 221c 	mls	r2, r0, ip, r2
 80215e8:	fb06 f202 	mul.w	r2, r6, r2
 80215ec:	882f      	ldrh	r7, [r5, #0]
 80215ee:	eb07 42a2 	add.w	r2, r7, r2, asr #18
 80215f2:	8022      	strh	r2, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 80215f4:	fb00 f303 	mul.w	r3, r0, r3
 80215f8:	fb01 330c 	mla	r3, r1, ip, r3
 80215fc:	fb03 f606 	mul.w	r6, r3, r6
 8021600:	886a      	ldrh	r2, [r5, #2]
 8021602:	eb02 46a6 	add.w	r6, r2, r6, asr #18
 8021606:	8066      	strh	r6, [r4, #2]
}
 8021608:	b003      	add	sp, #12
 802160a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802160e:	bf00      	nop
 8021610:	200027f8 	.word	0x200027f8
 8021614:	200027fc 	.word	0x200027fc
 8021618:	20000758 	.word	0x20000758
 802161c:	66666667 	.word	0x66666667

08021620 <lv_color_fill>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
 8021620:	b500      	push	{lr}
 8021622:	fa1f fe81 	uxth.w	lr, r1
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t)buf;
    if(buf_int & 0x3) {
 8021626:	f010 0f03 	tst.w	r0, #3
        *buf = color;
 802162a:	bf1c      	itt	ne
 802162c:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
 8021630:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
    }

    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 8021634:	eb0e 410e 	add.w	r1, lr, lr, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 8021638:	2a10      	cmp	r2, #16
 802163a:	d923      	bls.n	8021684 <lv_color_fill+0x64>
 802163c:	f100 0320 	add.w	r3, r0, #32
 8021640:	4694      	mov	ip, r2
        *buf32 = c32;
 8021642:	f843 1c20 	str.w	r1, [r3, #-32]
        buf32++;
        *buf32 = c32;
 8021646:	f843 1c1c 	str.w	r1, [r3, #-28]
        buf32++;
        *buf32 = c32;
 802164a:	f843 1c18 	str.w	r1, [r3, #-24]
        buf32++;
        *buf32 = c32;
 802164e:	f843 1c14 	str.w	r1, [r3, #-20]
        buf32++;

        *buf32 = c32;
 8021652:	f843 1c10 	str.w	r1, [r3, #-16]
        buf32++;
        *buf32 = c32;
 8021656:	f843 1c0c 	str.w	r1, [r3, #-12]
        buf32++;
        *buf32 = c32;
 802165a:	f843 1c08 	str.w	r1, [r3, #-8]
        buf32++;
        *buf32 = c32;
 802165e:	f843 1c04 	str.w	r1, [r3, #-4]
        buf32++;

        px_num -= 16;
 8021662:	f1ac 0c10 	sub.w	ip, ip, #16
    while(px_num > 16) {
 8021666:	3320      	adds	r3, #32
 8021668:	f1bc 0f10 	cmp.w	ip, #16
 802166c:	d8e9      	bhi.n	8021642 <lv_color_fill+0x22>
 802166e:	f1a2 0311 	sub.w	r3, r2, #17
 8021672:	091b      	lsrs	r3, r3, #4
        buf32++;
 8021674:	1c59      	adds	r1, r3, #1
 8021676:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 802167a:	3a10      	subs	r2, #16
        px_num -= 16;
 802167c:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
 8021680:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
 8021684:	b11a      	cbz	r2, 802168e <lv_color_fill+0x6e>
        *buf = color;
 8021686:	f820 eb02 	strh.w	lr, [r0], #2
    while(px_num) {
 802168a:	3a01      	subs	r2, #1
 802168c:	d1fb      	bne.n	8021686 <lv_color_fill+0x66>
        *buf = color;
        buf++;
        px_num--;
    }
#endif
}
 802168e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08021694 <lv_color_darken>:
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_16_SWAP == 0 && LV_COLOR_MIX_ROUND_OFS == 0
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8021694:	b283      	uxth	r3, r0
 8021696:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 802169a:	4b06      	ldr	r3, [pc, #24]	; (80216b4 <lv_color_darken+0x20>)
 802169c:	4018      	ands	r0, r3
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 802169e:	3104      	adds	r1, #4
 80216a0:	08c9      	lsrs	r1, r1, #3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80216a2:	fb00 f101 	mul.w	r1, r0, r1
 80216a6:	4249      	negs	r1, r1
 80216a8:	eb00 1051 	add.w	r0, r0, r1, lsr #5
 80216ac:	4018      	ands	r0, r3
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
    return lv_color_mix(lv_color_black(), c, lvl);
}
 80216ae:	ea40 4010 	orr.w	r0, r0, r0, lsr #16
 80216b2:	4770      	bx	lr
 80216b4:	07e0f81f 	.word	0x07e0f81f

080216b8 <lv_color_hsv_to_rgb>:
 * @param s saturation [0..100]
 * @param v value [0..100]
 * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 */
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
{
 80216b8:	b410      	push	{r4}
    h = (uint32_t)((uint32_t)h * 255) / 360;
    s = (uint16_t)((uint16_t)s * 255) / 100;
 80216ba:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80216be:	b28b      	uxth	r3, r1
 80216c0:	4939      	ldr	r1, [pc, #228]	; (80217a8 <lv_color_hsv_to_rgb+0xf0>)
 80216c2:	fba1 4303 	umull	r4, r3, r1, r3
 80216c6:	f3c3 1447 	ubfx	r4, r3, #5, #8
    v = (uint16_t)((uint16_t)v * 255) / 100;
 80216ca:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 80216ce:	b292      	uxth	r2, r2
 80216d0:	fba1 3202 	umull	r3, r2, r1, r2
 80216d4:	f3c2 1247 	ubfx	r2, r2, #5, #8

    uint8_t r, g, b;

    uint8_t region, remainder, p, q, t;

    if(s == 0) {
 80216d8:	2c00      	cmp	r4, #0
 80216da:	d038      	beq.n	802174e <lv_color_hsv_to_rgb+0x96>
    h = (uint32_t)((uint32_t)h * 255) / 360;
 80216dc:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80216e0:	08c3      	lsrs	r3, r0, #3
 80216e2:	4832      	ldr	r0, [pc, #200]	; (80217ac <lv_color_hsv_to_rgb+0xf4>)
 80216e4:	fba0 3c03 	umull	r3, ip, r0, r3
        return lv_color_make(v, v, v);
    }

    region    = h / 43;
 80216e8:	f3cc 008f 	ubfx	r0, ip, #2, #16
 80216ec:	4b30      	ldr	r3, [pc, #192]	; (80217b0 <lv_color_hsv_to_rgb+0xf8>)
 80216ee:	fba3 3000 	umull	r3, r0, r3, r0
 80216f2:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    remainder = (h - (region * 43)) * 6;

    p = (v * (255 - s)) >> 8;
 80216f6:	f1c4 01ff 	rsb	r1, r4, #255	; 0xff
 80216fa:	fb02 f101 	mul.w	r1, r2, r1
 80216fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
    remainder = (h - (region * 43)) * 6;
 8021702:	f06f 032a 	mvn.w	r3, #42	; 0x2a
 8021706:	fb00 f303 	mul.w	r3, r0, r3
 802170a:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 802170e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021712:	005b      	lsls	r3, r3, #1
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 8021714:	b2db      	uxtb	r3, r3
 8021716:	fb03 fc04 	mul.w	ip, r3, r4
 802171a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802171e:	f1cc 0cff 	rsb	ip, ip, #255	; 0xff
 8021722:	fb02 fc0c 	mul.w	ip, r2, ip
 8021726:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 802172a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 802172e:	fb04 f303 	mul.w	r3, r4, r3
 8021732:	121b      	asrs	r3, r3, #8
 8021734:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8021738:	fb02 f303 	mul.w	r3, r2, r3
 802173c:	f3c3 2307 	ubfx	r3, r3, #8, #8

    switch(region) {
 8021740:	2804      	cmp	r0, #4
 8021742:	d82d      	bhi.n	80217a0 <lv_color_hsv_to_rgb+0xe8>
 8021744:	e8df f000 	tbb	[pc, r0]
 8021748:	221d0e10 	.word	0x221d0e10
 802174c:	27          	.byte	0x27
 802174d:	00          	.byte	0x00
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 802174e:	08d3      	lsrs	r3, r2, #3
 8021750:	f04f 0000 	mov.w	r0, #0
 8021754:	f363 0004 	bfi	r0, r3, #0, #5
 8021758:	0892      	lsrs	r2, r2, #2
 802175a:	f362 104a 	bfi	r0, r2, #5, #6
 802175e:	f363 20cf 	bfi	r0, r3, #11, #5
        return lv_color_make(v, v, v);
 8021762:	e00c      	b.n	802177e <lv_color_hsv_to_rgb+0xc6>
    switch(region) {
 8021764:	4613      	mov	r3, r2
 8021766:	4662      	mov	r2, ip
 8021768:	08c9      	lsrs	r1, r1, #3
            b = q;
            break;
    }

    lv_color_t result = lv_color_make(r, g, b);
    return result;
 802176a:	f04f 0000 	mov.w	r0, #0
 802176e:	f361 0004 	bfi	r0, r1, #0, #5
 8021772:	089b      	lsrs	r3, r3, #2
 8021774:	f363 104a 	bfi	r0, r3, #5, #6
 8021778:	08d2      	lsrs	r2, r2, #3
 802177a:	f362 20cf 	bfi	r0, r2, #11, #5
}
 802177e:	bc10      	pop	{r4}
 8021780:	4770      	bx	lr
            break;
 8021782:	4610      	mov	r0, r2
            r = p;
 8021784:	460a      	mov	r2, r1
            b = t;
 8021786:	4619      	mov	r1, r3
            g = v;
 8021788:	4603      	mov	r3, r0
            break;
 802178a:	e7ed      	b.n	8021768 <lv_color_hsv_to_rgb+0xb0>
            g = q;
 802178c:	4663      	mov	r3, ip
            break;
 802178e:	4610      	mov	r0, r2
            r = p;
 8021790:	460a      	mov	r2, r1
            b = v;
 8021792:	4601      	mov	r1, r0
            break;
 8021794:	e7e8      	b.n	8021768 <lv_color_hsv_to_rgb+0xb0>
            break;
 8021796:	4610      	mov	r0, r2
            r = t;
 8021798:	461a      	mov	r2, r3
            g = p;
 802179a:	460b      	mov	r3, r1
            b = v;
 802179c:	4601      	mov	r1, r0
            break;
 802179e:	e7e3      	b.n	8021768 <lv_color_hsv_to_rgb+0xb0>
            g = p;
 80217a0:	460b      	mov	r3, r1
            b = q;
 80217a2:	4661      	mov	r1, ip
            break;
 80217a4:	e7e0      	b.n	8021768 <lv_color_hsv_to_rgb+0xb0>
 80217a6:	bf00      	nop
 80217a8:	51eb851f 	.word	0x51eb851f
 80217ac:	16c16c17 	.word	0x16c16c17
 80217b0:	2fa0be83 	.word	0x2fa0be83

080217b4 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 80217b4:	2812      	cmp	r0, #18
 80217b6:	bf8e      	itee	hi
 80217b8:	2000      	movhi	r0, #0
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 80217ba:	4b02      	ldrls	r3, [pc, #8]	; (80217c4 <lv_palette_main+0x10>)
 80217bc:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]

}
 80217c0:	4770      	bx	lr
 80217c2:	bf00      	nop
 80217c4:	08033450 	.word	0x08033450

080217c8 <lv_palette_lighten>:
        {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
        {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
        {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80217c8:	2812      	cmp	r0, #18
 80217ca:	d80a      	bhi.n	80217e2 <lv_palette_lighten+0x1a>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 5) {
 80217cc:	3901      	subs	r1, #1
 80217ce:	b2c9      	uxtb	r1, r1
 80217d0:	2904      	cmp	r1, #4
 80217d2:	d809      	bhi.n	80217e8 <lv_palette_lighten+0x20>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80217d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80217d8:	4401      	add	r1, r0
 80217da:	4b05      	ldr	r3, [pc, #20]	; (80217f0 <lv_palette_lighten+0x28>)
 80217dc:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 80217e0:	4770      	bx	lr
 80217e2:	f04f 0000 	mov.w	r0, #0
        return lv_color_black();
 80217e6:	4770      	bx	lr
 80217e8:	f04f 0000 	mov.w	r0, #0
        return lv_color_black();
 80217ec:	4770      	bx	lr
 80217ee:	bf00      	nop
 80217f0:	08033390 	.word	0x08033390

080217f4 <lv_palette_darken>:
        {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
        {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
        {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80217f4:	2812      	cmp	r0, #18
 80217f6:	d80a      	bhi.n	802180e <lv_palette_darken+0x1a>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 4) {
 80217f8:	3901      	subs	r1, #1
 80217fa:	b2c9      	uxtb	r1, r1
 80217fc:	2903      	cmp	r1, #3
 80217fe:	bf8f      	iteee	hi
 8021800:	2000      	movhi	r0, #0
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 8021802:	eb01 0180 	addls.w	r1, r1, r0, lsl #2
 8021806:	4b03      	ldrls	r3, [pc, #12]	; (8021814 <lv_palette_darken+0x20>)
 8021808:	f833 0011 	ldrhls.w	r0, [r3, r1, lsl #1]
}
 802180c:	4770      	bx	lr
 802180e:	f04f 0000 	mov.w	r0, #0
        return lv_color_black();
 8021812:	4770      	bx	lr
 8021814:	080332f8 	.word	0x080332f8

08021818 <_lv_fs_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void _lv_fs_init(void)
{
 8021818:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 802181a:	2104      	movs	r1, #4
 802181c:	4801      	ldr	r0, [pc, #4]	; (8021824 <_lv_fs_init+0xc>)
 802181e:	f000 f9c6 	bl	8021bae <_lv_ll_init>
}
 8021822:	bd08      	pop	{r3, pc}
 8021824:	20002908 	.word	0x20002908

08021828 <lv_fs_close>:

    return LV_FS_RES_OK;
}

lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 8021828:	b538      	push	{r3, r4, r5, lr}
 802182a:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 802182c:	6840      	ldr	r0, [r0, #4]
 802182e:	b1b0      	cbz	r0, 802185e <lv_fs_close+0x36>
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->close_cb == NULL) {
 8021830:	68c3      	ldr	r3, [r0, #12]
 8021832:	b1b3      	cbz	r3, 8021862 <lv_fs_close+0x3a>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8021834:	6821      	ldr	r1, [r4, #0]
 8021836:	4798      	blx	r3
 8021838:	4605      	mov	r5, r0

    if(file_p->drv->cache_size && file_p->cache) {
 802183a:	6863      	ldr	r3, [r4, #4]
 802183c:	885b      	ldrh	r3, [r3, #2]
 802183e:	b143      	cbz	r3, 8021852 <lv_fs_close+0x2a>
 8021840:	68a3      	ldr	r3, [r4, #8]
 8021842:	b133      	cbz	r3, 8021852 <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 8021844:	68d8      	ldr	r0, [r3, #12]
 8021846:	b108      	cbz	r0, 802184c <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 8021848:	f000 fb8e 	bl	8021f68 <lv_mem_free>
        }

        lv_mem_free(file_p->cache);
 802184c:	68a0      	ldr	r0, [r4, #8]
 802184e:	f000 fb8b 	bl	8021f68 <lv_mem_free>
    }

    file_p->file_d = NULL;
 8021852:	2300      	movs	r3, #0
 8021854:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 8021856:	6063      	str	r3, [r4, #4]
    file_p->cache  = NULL;
 8021858:	60a3      	str	r3, [r4, #8]

    return res;
}
 802185a:	4628      	mov	r0, r5
 802185c:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 802185e:	250b      	movs	r5, #11
 8021860:	e7fb      	b.n	802185a <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 8021862:	2509      	movs	r5, #9
 8021864:	e7f9      	b.n	802185a <lv_fs_close+0x32>

08021866 <lv_fs_read>:

    return res;
}

lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 8021866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802186a:	b087      	sub	sp, #28
 802186c:	4604      	mov	r4, r0
 802186e:	460e      	mov	r6, r1
 8021870:	4615      	mov	r5, r2
    if(br != NULL) *br = 0;
 8021872:	461f      	mov	r7, r3
 8021874:	b10b      	cbz	r3, 802187a <lv_fs_read+0x14>
 8021876:	2300      	movs	r3, #0
 8021878:	603b      	str	r3, [r7, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 802187a:	6860      	ldr	r0, [r4, #4]
 802187c:	2800      	cmp	r0, #0
 802187e:	f000 80bc 	beq.w	80219fa <lv_fs_read+0x194>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8021882:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8021886:	f1b8 0f00 	cmp.w	r8, #0
 802188a:	f000 80b9 	beq.w	8021a00 <lv_fs_read+0x19a>

    uint32_t br_tmp = 0;
 802188e:	2300      	movs	r3, #0
 8021890:	9305      	str	r3, [sp, #20]
    lv_fs_res_t res;

    if(file_p->drv->cache_size) {
 8021892:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8021896:	f1b9 0f00 	cmp.w	r9, #0
 802189a:	d10d      	bne.n	80218b8 <lv_fs_read+0x52>
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
    }
    else {
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 802189c:	ab05      	add	r3, sp, #20
 802189e:	9300      	str	r3, [sp, #0]
 80218a0:	462b      	mov	r3, r5
 80218a2:	4632      	mov	r2, r6
 80218a4:	6821      	ldr	r1, [r4, #0]
 80218a6:	47c0      	blx	r8
 80218a8:	4680      	mov	r8, r0
    }

    if(br != NULL) *br = br_tmp;
 80218aa:	b10f      	cbz	r7, 80218b0 <lv_fs_read+0x4a>
 80218ac:	9b05      	ldr	r3, [sp, #20]
 80218ae:	603b      	str	r3, [r7, #0]

    return res;
}
 80218b0:	4640      	mov	r0, r8
 80218b2:	b007      	add	sp, #28
 80218b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t file_position = file_p->cache->file_position;
 80218b8:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80218bc:	f8da b008 	ldr.w	fp, [sl, #8]
    uint32_t start = file_p->cache->start;
 80218c0:	f8da 1000 	ldr.w	r1, [sl]
    char * buffer = file_p->cache->buffer;
 80218c4:	f8da c00c 	ldr.w	ip, [sl, #12]
 80218c8:	f8cd c00c 	str.w	ip, [sp, #12]
    if(start <= file_position && file_position < end) {
 80218cc:	458b      	cmp	fp, r1
 80218ce:	d354      	bcc.n	802197a <lv_fs_read+0x114>
    uint32_t end = file_p->cache->end;
 80218d0:	f8da 3004 	ldr.w	r3, [sl, #4]
    if(start <= file_position && file_position < end) {
 80218d4:	459b      	cmp	fp, r3
 80218d6:	d250      	bcs.n	802197a <lv_fs_read+0x114>
        uint16_t buffer_offset = file_position - start;
 80218d8:	ebab 0101 	sub.w	r1, fp, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 80218dc:	b289      	uxth	r1, r1
 80218de:	eba3 0b0b 	sub.w	fp, r3, fp
 80218e2:	eba9 0301 	sub.w	r3, r9, r1
 80218e6:	459b      	cmp	fp, r3
 80218e8:	bf28      	it	cs
 80218ea:	469b      	movcs	fp, r3
        if(btr <= buffer_remaining_length) {
 80218ec:	455d      	cmp	r5, fp
 80218ee:	d807      	bhi.n	8021900 <lv_fs_read+0x9a>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 80218f0:	462a      	mov	r2, r5
 80218f2:	448c      	add	ip, r1
 80218f4:	4661      	mov	r1, ip
 80218f6:	4630      	mov	r0, r6
 80218f8:	f000 fc02 	bl	8022100 <lv_memcpy>
            *br = btr;
 80218fc:	9505      	str	r5, [sp, #20]
    if(res == LV_FS_RES_OK) {
 80218fe:	e048      	b.n	8021992 <lv_fs_read+0x12c>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 8021900:	465a      	mov	r2, fp
 8021902:	9b03      	ldr	r3, [sp, #12]
 8021904:	4419      	add	r1, r3
 8021906:	4630      	mov	r0, r6
 8021908:	f000 fbfa 	bl	8022100 <lv_memcpy>
            uint32_t bytes_read_to_buffer = 0;
 802190c:	2300      	movs	r3, #0
 802190e:	9304      	str	r3, [sp, #16]
            if(btr > buffer_size) {
 8021910:	454d      	cmp	r5, r9
 8021912:	d912      	bls.n	802193a <lv_fs_read+0xd4>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8021914:	6860      	ldr	r0, [r4, #4]
 8021916:	ab04      	add	r3, sp, #16
 8021918:	9300      	str	r3, [sp, #0]
 802191a:	f8d0 8010 	ldr.w	r8, [r0, #16]
 802191e:	eba5 030b 	sub.w	r3, r5, fp
 8021922:	eb06 020b 	add.w	r2, r6, fp
 8021926:	6821      	ldr	r1, [r4, #0]
 8021928:	47c0      	blx	r8
 802192a:	4680      	mov	r8, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 802192c:	9b04      	ldr	r3, [sp, #16]
 802192e:	449b      	add	fp, r3
 8021930:	455d      	cmp	r5, fp
 8021932:	bf28      	it	cs
 8021934:	465d      	movcs	r5, fp
 8021936:	9505      	str	r5, [sp, #20]
 8021938:	e028      	b.n	802198c <lv_fs_read+0x126>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 802193a:	6860      	ldr	r0, [r4, #4]
 802193c:	ab04      	add	r3, sp, #16
 802193e:	9300      	str	r3, [sp, #0]
 8021940:	f8d0 8010 	ldr.w	r8, [r0, #16]
 8021944:	464b      	mov	r3, r9
 8021946:	f8dd 900c 	ldr.w	r9, [sp, #12]
 802194a:	464a      	mov	r2, r9
 802194c:	6821      	ldr	r1, [r4, #0]
 802194e:	47c0      	blx	r8
 8021950:	4680      	mov	r8, r0
                file_p->cache->start = file_p->cache->end;
 8021952:	68a3      	ldr	r3, [r4, #8]
 8021954:	685a      	ldr	r2, [r3, #4]
 8021956:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8021958:	68a2      	ldr	r2, [r4, #8]
 802195a:	9904      	ldr	r1, [sp, #16]
 802195c:	6813      	ldr	r3, [r2, #0]
 802195e:	440b      	add	r3, r1
 8021960:	6053      	str	r3, [r2, #4]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8021962:	eba5 020b 	sub.w	r2, r5, fp
 8021966:	428a      	cmp	r2, r1
 8021968:	bf28      	it	cs
 802196a:	460a      	movcs	r2, r1
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 802196c:	b292      	uxth	r2, r2
 802196e:	4649      	mov	r1, r9
 8021970:	eb06 000b 	add.w	r0, r6, fp
 8021974:	f000 fbc4 	bl	8022100 <lv_memcpy>
 8021978:	e7d8      	b.n	802192c <lv_fs_read+0xc6>
        if(btr > buffer_size) {
 802197a:	454d      	cmp	r5, r9
 802197c:	d911      	bls.n	80219a2 <lv_fs_read+0x13c>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 802197e:	ab05      	add	r3, sp, #20
 8021980:	9300      	str	r3, [sp, #0]
 8021982:	462b      	mov	r3, r5
 8021984:	4632      	mov	r2, r6
 8021986:	6821      	ldr	r1, [r4, #0]
 8021988:	47c0      	blx	r8
 802198a:	4680      	mov	r8, r0
    if(res == LV_FS_RES_OK) {
 802198c:	f1b8 0f00 	cmp.w	r8, #0
 8021990:	d18b      	bne.n	80218aa <lv_fs_read+0x44>
        file_p->cache->file_position += *br;
 8021992:	68a2      	ldr	r2, [r4, #8]
 8021994:	6893      	ldr	r3, [r2, #8]
 8021996:	9905      	ldr	r1, [sp, #20]
 8021998:	440b      	add	r3, r1
 802199a:	6093      	str	r3, [r2, #8]
 802199c:	f04f 0800 	mov.w	r8, #0
 80219a0:	e783      	b.n	80218aa <lv_fs_read+0x44>
            if(buffer == NULL) {
 80219a2:	9b03      	ldr	r3, [sp, #12]
 80219a4:	b1f3      	cbz	r3, 80219e4 <lv_fs_read+0x17e>
            uint32_t bytes_read_to_buffer = 0;
 80219a6:	2300      	movs	r3, #0
 80219a8:	9304      	str	r3, [sp, #16]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 80219aa:	6860      	ldr	r0, [r4, #4]
 80219ac:	ab04      	add	r3, sp, #16
 80219ae:	9300      	str	r3, [sp, #0]
 80219b0:	f8d0 8010 	ldr.w	r8, [r0, #16]
 80219b4:	464b      	mov	r3, r9
 80219b6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80219ba:	464a      	mov	r2, r9
 80219bc:	6821      	ldr	r1, [r4, #0]
 80219be:	47c0      	blx	r8
 80219c0:	4680      	mov	r8, r0
            file_p->cache->start = file_position;
 80219c2:	68a3      	ldr	r3, [r4, #8]
 80219c4:	f8c3 b000 	str.w	fp, [r3]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 80219c8:	68a1      	ldr	r1, [r4, #8]
 80219ca:	9a04      	ldr	r2, [sp, #16]
 80219cc:	680b      	ldr	r3, [r1, #0]
 80219ce:	4413      	add	r3, r2
 80219d0:	604b      	str	r3, [r1, #4]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 80219d2:	42aa      	cmp	r2, r5
 80219d4:	bf28      	it	cs
 80219d6:	462a      	movcs	r2, r5
 80219d8:	9205      	str	r2, [sp, #20]
            lv_memcpy(buf, buffer, *br);
 80219da:	4649      	mov	r1, r9
 80219dc:	4630      	mov	r0, r6
 80219de:	f000 fb8f 	bl	8022100 <lv_memcpy>
 80219e2:	e7d3      	b.n	802198c <lv_fs_read+0x126>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 80219e4:	4648      	mov	r0, r9
 80219e6:	f000 faa1 	bl	8021f2c <lv_mem_alloc>
 80219ea:	f8ca 000c 	str.w	r0, [sl, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 80219ee:	68a3      	ldr	r3, [r4, #8]
 80219f0:	68db      	ldr	r3, [r3, #12]
 80219f2:	9303      	str	r3, [sp, #12]
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	d1d6      	bne.n	80219a6 <lv_fs_read+0x140>
 80219f8:	e7fe      	b.n	80219f8 <lv_fs_read+0x192>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 80219fa:	f04f 080b 	mov.w	r8, #11
 80219fe:	e757      	b.n	80218b0 <lv_fs_read+0x4a>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8021a00:	f04f 0809 	mov.w	r8, #9
 8021a04:	e754      	b.n	80218b0 <lv_fs_read+0x4a>

08021a06 <lv_fs_seek>:

    return res;
}

lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos, lv_fs_whence_t whence)
{
 8021a06:	b530      	push	{r4, r5, lr}
 8021a08:	b083      	sub	sp, #12
 8021a0a:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8021a0c:	6840      	ldr	r0, [r0, #4]
 8021a0e:	2800      	cmp	r0, #0
 8021a10:	d043      	beq.n	8021a9a <lv_fs_seek+0x94>
 8021a12:	4613      	mov	r3, r2
        return LV_FS_RES_INV_PARAM;
    }

    if(file_p->drv->seek_cb == NULL) {
 8021a14:	6985      	ldr	r5, [r0, #24]
 8021a16:	2d00      	cmp	r5, #0
 8021a18:	d041      	beq.n	8021a9e <lv_fs_seek+0x98>
        return LV_FS_RES_NOT_IMP;
    }

    lv_fs_res_t res = LV_FS_RES_OK;
    if(file_p->drv->cache_size) {
 8021a1a:	8842      	ldrh	r2, [r0, #2]
 8021a1c:	2a00      	cmp	r2, #0
 8021a1e:	d037      	beq.n	8021a90 <lv_fs_seek+0x8a>
        switch(whence) {
 8021a20:	2b01      	cmp	r3, #1
 8021a22:	d014      	beq.n	8021a4e <lv_fs_seek+0x48>
 8021a24:	2b02      	cmp	r3, #2
 8021a26:	d024      	beq.n	8021a72 <lv_fs_seek+0x6c>
 8021a28:	b10b      	cbz	r3, 8021a2e <lv_fs_seek+0x28>
 8021a2a:	2000      	movs	r0, #0
 8021a2c:	e033      	b.n	8021a96 <lv_fs_seek+0x90>
            case LV_FS_SEEK_SET: {
                    file_p->cache->file_position = pos;
 8021a2e:	68a2      	ldr	r2, [r4, #8]
 8021a30:	6091      	str	r1, [r2, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8021a32:	68a1      	ldr	r1, [r4, #8]
 8021a34:	688a      	ldr	r2, [r1, #8]
 8021a36:	6808      	ldr	r0, [r1, #0]
 8021a38:	4282      	cmp	r2, r0
 8021a3a:	d302      	bcc.n	8021a42 <lv_fs_seek+0x3c>
 8021a3c:	6849      	ldr	r1, [r1, #4]
 8021a3e:	428a      	cmp	r2, r1
 8021a40:	d92f      	bls.n	8021aa2 <lv_fs_seek+0x9c>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8021a42:	6860      	ldr	r0, [r4, #4]
 8021a44:	6985      	ldr	r5, [r0, #24]
 8021a46:	2300      	movs	r3, #0
 8021a48:	6821      	ldr	r1, [r4, #0]
 8021a4a:	47a8      	blx	r5
 8021a4c:	e023      	b.n	8021a96 <lv_fs_seek+0x90>
                    }

                    break;
                }
            case LV_FS_SEEK_CUR: {
                    file_p->cache->file_position += pos;
 8021a4e:	68a2      	ldr	r2, [r4, #8]
 8021a50:	6893      	ldr	r3, [r2, #8]
 8021a52:	4419      	add	r1, r3
 8021a54:	6091      	str	r1, [r2, #8]

                    /*FS seek if new position is outside cache buffer*/
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 8021a56:	68a3      	ldr	r3, [r4, #8]
 8021a58:	689a      	ldr	r2, [r3, #8]
 8021a5a:	6819      	ldr	r1, [r3, #0]
 8021a5c:	428a      	cmp	r2, r1
 8021a5e:	d302      	bcc.n	8021a66 <lv_fs_seek+0x60>
 8021a60:	685b      	ldr	r3, [r3, #4]
 8021a62:	429a      	cmp	r2, r3
 8021a64:	d91f      	bls.n	8021aa6 <lv_fs_seek+0xa0>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 8021a66:	6860      	ldr	r0, [r4, #4]
 8021a68:	6985      	ldr	r5, [r0, #24]
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	6821      	ldr	r1, [r4, #0]
 8021a6e:	47a8      	blx	r5
 8021a70:	e011      	b.n	8021a96 <lv_fs_seek+0x90>

                    break;
                }
            case LV_FS_SEEK_END: {
                    /*Because we don't know the file size, we do a little trick: do a FS seek, then get new file position from FS*/
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8021a72:	2302      	movs	r3, #2
 8021a74:	460a      	mov	r2, r1
 8021a76:	6821      	ldr	r1, [r4, #0]
 8021a78:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 8021a7a:	b960      	cbnz	r0, 8021a96 <lv_fs_seek+0x90>
                        uint32_t tmp_position;
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 8021a7c:	6860      	ldr	r0, [r4, #4]
 8021a7e:	69c3      	ldr	r3, [r0, #28]
 8021a80:	aa01      	add	r2, sp, #4
 8021a82:	6821      	ldr	r1, [r4, #0]
 8021a84:	4798      	blx	r3

                        if(res == LV_FS_RES_OK) {
 8021a86:	b930      	cbnz	r0, 8021a96 <lv_fs_seek+0x90>
                            file_p->cache->file_position = tmp_position;
 8021a88:	68a3      	ldr	r3, [r4, #8]
 8021a8a:	9a01      	ldr	r2, [sp, #4]
 8021a8c:	609a      	str	r2, [r3, #8]
 8021a8e:	e002      	b.n	8021a96 <lv_fs_seek+0x90>
                    break;
                }
        }
    }
    else {
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8021a90:	460a      	mov	r2, r1
 8021a92:	6821      	ldr	r1, [r4, #0]
 8021a94:	47a8      	blx	r5
    }

    return res;
}
 8021a96:	b003      	add	sp, #12
 8021a98:	bd30      	pop	{r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 8021a9a:	200b      	movs	r0, #11
 8021a9c:	e7fb      	b.n	8021a96 <lv_fs_seek+0x90>
        return LV_FS_RES_NOT_IMP;
 8021a9e:	2009      	movs	r0, #9
 8021aa0:	e7f9      	b.n	8021a96 <lv_fs_seek+0x90>
    lv_fs_res_t res = LV_FS_RES_OK;
 8021aa2:	4618      	mov	r0, r3
 8021aa4:	e7f7      	b.n	8021a96 <lv_fs_seek+0x90>
 8021aa6:	2000      	movs	r0, #0
 8021aa8:	e7f5      	b.n	8021a96 <lv_fs_seek+0x90>
	...

08021aac <lv_fs_get_drv>:

    *new_drv = drv_p;
}

lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 8021aac:	b538      	push	{r3, r4, r5, lr}
 8021aae:	4604      	mov	r4, r0
    lv_fs_drv_t ** drv;

    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8021ab0:	4808      	ldr	r0, [pc, #32]	; (8021ad4 <lv_fs_get_drv+0x28>)
 8021ab2:	f000 f905 	bl	8021cc0 <_lv_ll_get_head>
 8021ab6:	4601      	mov	r1, r0
 8021ab8:	b150      	cbz	r0, 8021ad0 <lv_fs_get_drv+0x24>
 8021aba:	4d06      	ldr	r5, [pc, #24]	; (8021ad4 <lv_fs_get_drv+0x28>)
        if((*drv)->letter == letter) {
 8021abc:	6808      	ldr	r0, [r1, #0]
 8021abe:	7803      	ldrb	r3, [r0, #0]
 8021ac0:	42a3      	cmp	r3, r4
 8021ac2:	d005      	beq.n	8021ad0 <lv_fs_get_drv+0x24>
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8021ac4:	4628      	mov	r0, r5
 8021ac6:	f000 f903 	bl	8021cd0 <_lv_ll_get_next>
 8021aca:	4601      	mov	r1, r0
 8021acc:	2800      	cmp	r0, #0
 8021ace:	d1f5      	bne.n	8021abc <lv_fs_get_drv+0x10>
            return *drv;
        }
    }

    return NULL;
}
 8021ad0:	bd38      	pop	{r3, r4, r5, pc}
 8021ad2:	bf00      	nop
 8021ad4:	20002908 	.word	0x20002908

08021ad8 <lv_fs_open>:
    if(path == NULL) {
 8021ad8:	2900      	cmp	r1, #0
 8021ada:	d033      	beq.n	8021b44 <lv_fs_open+0x6c>
{
 8021adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ade:	4604      	mov	r4, r0
 8021ae0:	4617      	mov	r7, r2
 8021ae2:	460e      	mov	r6, r1
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 8021ae4:	7808      	ldrb	r0, [r1, #0]
 8021ae6:	f7ff ffe1 	bl	8021aac <lv_fs_get_drv>
    if(drv == NULL) {
 8021aea:	4605      	mov	r5, r0
 8021aec:	b360      	cbz	r0, 8021b48 <lv_fs_open+0x70>
    if(drv->ready_cb) {
 8021aee:	6843      	ldr	r3, [r0, #4]
 8021af0:	b10b      	cbz	r3, 8021af6 <lv_fs_open+0x1e>
        if(drv->ready_cb(drv) == false) {
 8021af2:	4798      	blx	r3
 8021af4:	b350      	cbz	r0, 8021b4c <lv_fs_open+0x74>
    if(drv->open_cb == NULL) {
 8021af6:	68ab      	ldr	r3, [r5, #8]
 8021af8:	b353      	cbz	r3, 8021b50 <lv_fs_open+0x78>
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
    path++; /*Ignore the driver letter*/
    if(*path == ':') path++;
 8021afa:	7872      	ldrb	r2, [r6, #1]
 8021afc:	2a3a      	cmp	r2, #58	; 0x3a
    path++; /*Ignore the driver letter*/
 8021afe:	bf14      	ite	ne
 8021b00:	1c71      	addne	r1, r6, #1
    if(*path == ':') path++;
 8021b02:	1cb1      	addeq	r1, r6, #2
    void * file_d = drv->open_cb(drv, real_path, mode);
 8021b04:	463a      	mov	r2, r7
 8021b06:	4628      	mov	r0, r5
 8021b08:	4798      	blx	r3
    if(file_d == NULL || file_d == (void *)(-1)) {
 8021b0a:	1e43      	subs	r3, r0, #1
 8021b0c:	f113 0f03 	cmn.w	r3, #3
 8021b10:	d820      	bhi.n	8021b54 <lv_fs_open+0x7c>
    file_p->drv = drv;
 8021b12:	6065      	str	r5, [r4, #4]
    file_p->file_d = file_d;
 8021b14:	6020      	str	r0, [r4, #0]
    if(drv->cache_size) {
 8021b16:	886b      	ldrh	r3, [r5, #2]
 8021b18:	b90b      	cbnz	r3, 8021b1e <lv_fs_open+0x46>
    return LV_FS_RES_OK;
 8021b1a:	2000      	movs	r0, #0
}
 8021b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 8021b1e:	2010      	movs	r0, #16
 8021b20:	f000 fa04 	bl	8021f2c <lv_mem_alloc>
 8021b24:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 8021b26:	b160      	cbz	r0, 8021b42 <lv_fs_open+0x6a>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 8021b28:	2110      	movs	r1, #16
 8021b2a:	f000 fc7f 	bl	802242c <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 8021b2e:	68a3      	ldr	r3, [r4, #8]
 8021b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021b34:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 8021b36:	68a3      	ldr	r3, [r4, #8]
 8021b38:	f06f 0201 	mvn.w	r2, #1
 8021b3c:	605a      	str	r2, [r3, #4]
    return LV_FS_RES_OK;
 8021b3e:	2000      	movs	r0, #0
 8021b40:	e7ec      	b.n	8021b1c <lv_fs_open+0x44>
        LV_ASSERT_MALLOC(file_p->cache);
 8021b42:	e7fe      	b.n	8021b42 <lv_fs_open+0x6a>
        return LV_FS_RES_INV_PARAM;
 8021b44:	200b      	movs	r0, #11
}
 8021b46:	4770      	bx	lr
        return LV_FS_RES_NOT_EX;
 8021b48:	2003      	movs	r0, #3
 8021b4a:	e7e7      	b.n	8021b1c <lv_fs_open+0x44>
            return LV_FS_RES_HW_ERR;
 8021b4c:	2001      	movs	r0, #1
 8021b4e:	e7e5      	b.n	8021b1c <lv_fs_open+0x44>
        return LV_FS_RES_NOT_IMP;
 8021b50:	2009      	movs	r0, #9
 8021b52:	e7e3      	b.n	8021b1c <lv_fs_open+0x44>
        return LV_FS_RES_UNKNOWN;
 8021b54:	200c      	movs	r0, #12
 8021b56:	e7e1      	b.n	8021b1c <lv_fs_open+0x44>

08021b58 <lv_fs_get_ext>:
{
 8021b58:	b510      	push	{r4, lr}
 8021b5a:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 8021b5c:	f7de fb6c 	bl	8000238 <strlen>
 8021b60:	b188      	cbz	r0, 8021b86 <lv_fs_get_ext+0x2e>
 8021b62:	4602      	mov	r2, r0
 8021b64:	1c41      	adds	r1, r0, #1
 8021b66:	4421      	add	r1, r4
        if(fn[i] == '.') {
 8021b68:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
 8021b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8021b6e:	d007      	beq.n	8021b80 <lv_fs_get_ext+0x28>
        else if(fn[i] == '/' || fn[i] == '\\') {
 8021b70:	2b2f      	cmp	r3, #47	; 0x2f
 8021b72:	d00a      	beq.n	8021b8a <lv_fs_get_ext+0x32>
 8021b74:	2b5c      	cmp	r3, #92	; 0x5c
 8021b76:	d00a      	beq.n	8021b8e <lv_fs_get_ext+0x36>
    for(i = strlen(fn); i > 0; i--) {
 8021b78:	3a01      	subs	r2, #1
 8021b7a:	d1f5      	bne.n	8021b68 <lv_fs_get_ext+0x10>
    return ""; /*Empty string if no '.' in the file name.*/
 8021b7c:	4805      	ldr	r0, [pc, #20]	; (8021b94 <lv_fs_get_ext+0x3c>)
 8021b7e:	e001      	b.n	8021b84 <lv_fs_get_ext+0x2c>
            return &fn[i + 1];
 8021b80:	3201      	adds	r2, #1
 8021b82:	18a0      	adds	r0, r4, r2
}
 8021b84:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name.*/
 8021b86:	4803      	ldr	r0, [pc, #12]	; (8021b94 <lv_fs_get_ext+0x3c>)
 8021b88:	e7fc      	b.n	8021b84 <lv_fs_get_ext+0x2c>
            return ""; /*No extension if a '\' or '/' found*/
 8021b8a:	4802      	ldr	r0, [pc, #8]	; (8021b94 <lv_fs_get_ext+0x3c>)
 8021b8c:	e7fa      	b.n	8021b84 <lv_fs_get_ext+0x2c>
 8021b8e:	4801      	ldr	r0, [pc, #4]	; (8021b94 <lv_fs_get_ext+0x3c>)
 8021b90:	e7f8      	b.n	8021b84 <lv_fs_get_ext+0x2c>
 8021b92:	bf00      	nop
 8021b94:	0802d578 	.word	0x0802d578

08021b98 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 8021b98:	460b      	mov	r3, r1
 8021b9a:	b109      	cbz	r1, 8021ba0 <node_set_prev+0x8>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 8021b9c:	6801      	ldr	r1, [r0, #0]
 8021b9e:	505a      	str	r2, [r3, r1]
}
 8021ba0:	4770      	bx	lr

08021ba2 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 8021ba2:	460b      	mov	r3, r1
 8021ba4:	b111      	cbz	r1, 8021bac <node_set_next+0xa>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 8021ba6:	6801      	ldr	r1, [r0, #0]
 8021ba8:	440b      	add	r3, r1
 8021baa:	605a      	str	r2, [r3, #4]
}
 8021bac:	4770      	bx	lr

08021bae <_lv_ll_init>:
    ll_p->head = NULL;
 8021bae:	2300      	movs	r3, #0
 8021bb0:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 8021bb2:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
 8021bb4:	3103      	adds	r1, #3
 8021bb6:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
 8021bba:	6001      	str	r1, [r0, #0]
}
 8021bbc:	4770      	bx	lr

08021bbe <_lv_ll_ins_head>:
{
 8021bbe:	b538      	push	{r3, r4, r5, lr}
 8021bc0:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8021bc2:	6800      	ldr	r0, [r0, #0]
 8021bc4:	3008      	adds	r0, #8
 8021bc6:	f000 f9b1 	bl	8021f2c <lv_mem_alloc>
    if(n_new != NULL) {
 8021bca:	4605      	mov	r5, r0
 8021bcc:	b190      	cbz	r0, 8021bf4 <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 8021bce:	2200      	movs	r2, #0
 8021bd0:	4601      	mov	r1, r0
 8021bd2:	4620      	mov	r0, r4
 8021bd4:	f7ff ffe0 	bl	8021b98 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8021bd8:	6862      	ldr	r2, [r4, #4]
 8021bda:	4629      	mov	r1, r5
 8021bdc:	4620      	mov	r0, r4
 8021bde:	f7ff ffe0 	bl	8021ba2 <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 8021be2:	6861      	ldr	r1, [r4, #4]
 8021be4:	b119      	cbz	r1, 8021bee <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 8021be6:	462a      	mov	r2, r5
 8021be8:	4620      	mov	r0, r4
 8021bea:	f7ff ffd5 	bl	8021b98 <node_set_prev>
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8021bee:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8021bf0:	68a3      	ldr	r3, [r4, #8]
 8021bf2:	b10b      	cbz	r3, 8021bf8 <_lv_ll_ins_head+0x3a>
}
 8021bf4:	4628      	mov	r0, r5
 8021bf6:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
 8021bf8:	60a5      	str	r5, [r4, #8]
    return n_new;
 8021bfa:	e7fb      	b.n	8021bf4 <_lv_ll_ins_head+0x36>

08021bfc <_lv_ll_ins_tail>:
{
 8021bfc:	b538      	push	{r3, r4, r5, lr}
 8021bfe:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8021c00:	6800      	ldr	r0, [r0, #0]
 8021c02:	3008      	adds	r0, #8
 8021c04:	f000 f992 	bl	8021f2c <lv_mem_alloc>
    if(n_new != NULL) {
 8021c08:	4605      	mov	r5, r0
 8021c0a:	b190      	cbz	r0, 8021c32 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	4601      	mov	r1, r0
 8021c10:	4620      	mov	r0, r4
 8021c12:	f7ff ffc6 	bl	8021ba2 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 8021c16:	68a2      	ldr	r2, [r4, #8]
 8021c18:	4629      	mov	r1, r5
 8021c1a:	4620      	mov	r0, r4
 8021c1c:	f7ff ffbc 	bl	8021b98 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8021c20:	68a1      	ldr	r1, [r4, #8]
 8021c22:	b119      	cbz	r1, 8021c2c <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 8021c24:	462a      	mov	r2, r5
 8021c26:	4620      	mov	r0, r4
 8021c28:	f7ff ffbb 	bl	8021ba2 <node_set_next>
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8021c2c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8021c2e:	6863      	ldr	r3, [r4, #4]
 8021c30:	b10b      	cbz	r3, 8021c36 <_lv_ll_ins_tail+0x3a>
}
 8021c32:	4628      	mov	r0, r5
 8021c34:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
 8021c36:	6065      	str	r5, [r4, #4]
    return n_new;
 8021c38:	e7fb      	b.n	8021c32 <_lv_ll_ins_tail+0x36>

08021c3a <_lv_ll_remove>:
    if(ll_p == NULL) return;
 8021c3a:	b360      	cbz	r0, 8021c96 <_lv_ll_remove+0x5c>
{
 8021c3c:	b570      	push	{r4, r5, r6, lr}
 8021c3e:	4604      	mov	r4, r0
    if(_lv_ll_get_head(ll_p) == node_p) {
 8021c40:	6843      	ldr	r3, [r0, #4]
 8021c42:	4299      	cmp	r1, r3
 8021c44:	d010      	beq.n	8021c68 <_lv_ll_remove+0x2e>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 8021c46:	6883      	ldr	r3, [r0, #8]
 8021c48:	4299      	cmp	r1, r3
 8021c4a:	d019      	beq.n	8021c80 <_lv_ll_remove+0x46>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 8021c4c:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
 8021c4e:	58ce      	ldr	r6, [r1, r3]
    return *((lv_ll_node_t **)n_act_d);
 8021c50:	4419      	add	r1, r3
 8021c52:	684d      	ldr	r5, [r1, #4]
        node_set_next(ll_p, n_prev, n_next);
 8021c54:	462a      	mov	r2, r5
 8021c56:	4631      	mov	r1, r6
 8021c58:	f7ff ffa3 	bl	8021ba2 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8021c5c:	4632      	mov	r2, r6
 8021c5e:	4629      	mov	r1, r5
 8021c60:	4620      	mov	r0, r4
 8021c62:	f7ff ff99 	bl	8021b98 <node_set_prev>
}
 8021c66:	bd70      	pop	{r4, r5, r6, pc}
    return *((lv_ll_node_t **)n_act_d);
 8021c68:	6803      	ldr	r3, [r0, #0]
 8021c6a:	4419      	add	r1, r3
 8021c6c:	6849      	ldr	r1, [r1, #4]
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 8021c6e:	6041      	str	r1, [r0, #4]
        if(ll_p->head == NULL) {
 8021c70:	b119      	cbz	r1, 8021c7a <_lv_ll_remove+0x40>
            node_set_prev(ll_p, ll_p->head, NULL);
 8021c72:	2200      	movs	r2, #0
 8021c74:	f7ff ff90 	bl	8021b98 <node_set_prev>
 8021c78:	e7f5      	b.n	8021c66 <_lv_ll_remove+0x2c>
            ll_p->tail = NULL;
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	6083      	str	r3, [r0, #8]
 8021c7e:	e7f2      	b.n	8021c66 <_lv_ll_remove+0x2c>
    return *((lv_ll_node_t **)n_act_d);
 8021c80:	6803      	ldr	r3, [r0, #0]
 8021c82:	58c9      	ldr	r1, [r1, r3]
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 8021c84:	6081      	str	r1, [r0, #8]
        if(ll_p->tail == NULL) {
 8021c86:	b119      	cbz	r1, 8021c90 <_lv_ll_remove+0x56>
            node_set_next(ll_p, ll_p->tail, NULL);
 8021c88:	2200      	movs	r2, #0
 8021c8a:	f7ff ff8a 	bl	8021ba2 <node_set_next>
 8021c8e:	e7ea      	b.n	8021c66 <_lv_ll_remove+0x2c>
            ll_p->head = NULL;
 8021c90:	2300      	movs	r3, #0
 8021c92:	6043      	str	r3, [r0, #4]
 8021c94:	e7e7      	b.n	8021c66 <_lv_ll_remove+0x2c>
 8021c96:	4770      	bx	lr

08021c98 <_lv_ll_clear>:
    if(ll_p == NULL) return NULL;
 8021c98:	b188      	cbz	r0, 8021cbe <_lv_ll_clear+0x26>
{
 8021c9a:	b570      	push	{r4, r5, r6, lr}
 8021c9c:	4606      	mov	r6, r0
    return ll_p->head;
 8021c9e:	6844      	ldr	r4, [r0, #4]
    while(i != NULL) {
 8021ca0:	b164      	cbz	r4, 8021cbc <_lv_ll_clear+0x24>
    return *((lv_ll_node_t **)n_act_d);
 8021ca2:	4625      	mov	r5, r4
 8021ca4:	6833      	ldr	r3, [r6, #0]
 8021ca6:	441c      	add	r4, r3
 8021ca8:	6864      	ldr	r4, [r4, #4]
        _lv_ll_remove(ll_p, i);
 8021caa:	4629      	mov	r1, r5
 8021cac:	4630      	mov	r0, r6
 8021cae:	f7ff ffc4 	bl	8021c3a <_lv_ll_remove>
        lv_mem_free(i);
 8021cb2:	4628      	mov	r0, r5
 8021cb4:	f000 f958 	bl	8021f68 <lv_mem_free>
    while(i != NULL) {
 8021cb8:	2c00      	cmp	r4, #0
 8021cba:	d1f2      	bne.n	8021ca2 <_lv_ll_clear+0xa>
}
 8021cbc:	bd70      	pop	{r4, r5, r6, pc}
 8021cbe:	4770      	bx	lr

08021cc0 <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8021cc0:	b108      	cbz	r0, 8021cc6 <_lv_ll_get_head+0x6>
    return ll_p->head;
 8021cc2:	6840      	ldr	r0, [r0, #4]
 8021cc4:	4770      	bx	lr
}
 8021cc6:	4770      	bx	lr

08021cc8 <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 8021cc8:	b108      	cbz	r0, 8021cce <_lv_ll_get_tail+0x6>
    return ll_p->tail;
 8021cca:	6880      	ldr	r0, [r0, #8]
 8021ccc:	4770      	bx	lr
}
 8021cce:	4770      	bx	lr

08021cd0 <_lv_ll_get_next>:
    return *((lv_ll_node_t **)n_act_d);
 8021cd0:	6803      	ldr	r3, [r0, #0]
 8021cd2:	4419      	add	r1, r3
}
 8021cd4:	6848      	ldr	r0, [r1, #4]
 8021cd6:	4770      	bx	lr

08021cd8 <_lv_ll_get_prev>:
    return *((lv_ll_node_t **)n_act_d);
 8021cd8:	6803      	ldr	r3, [r0, #0]
}
 8021cda:	58c8      	ldr	r0, [r1, r3]
 8021cdc:	4770      	bx	lr

08021cde <_lv_ll_get_len>:
    if(ll_p == NULL) return NULL;
 8021cde:	b148      	cbz	r0, 8021cf4 <_lv_ll_get_len+0x16>
    return ll_p->head;
 8021ce0:	6843      	ldr	r3, [r0, #4]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8021ce2:	b14b      	cbz	r3, 8021cf8 <_lv_ll_get_len+0x1a>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8021ce4:	6802      	ldr	r2, [r0, #0]
 8021ce6:	3204      	adds	r2, #4
 8021ce8:	2000      	movs	r0, #0
        len++;
 8021cea:	3001      	adds	r0, #1
    return *((lv_ll_node_t **)n_act_d);
 8021cec:	589b      	ldr	r3, [r3, r2]
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d1fb      	bne.n	8021cea <_lv_ll_get_len+0xc>
 8021cf2:	4770      	bx	lr
 8021cf4:	2000      	movs	r0, #0
 8021cf6:	4770      	bx	lr
 8021cf8:	2000      	movs	r0, #0
}
 8021cfa:	4770      	bx	lr

08021cfc <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 8021cfc:	b140      	cbz	r0, 8021d10 <_lv_ll_is_empty+0x14>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8021cfe:	6842      	ldr	r2, [r0, #4]
 8021d00:	b10a      	cbz	r2, 8021d06 <_lv_ll_is_empty+0xa>
    return false;
 8021d02:	2000      	movs	r0, #0
}
 8021d04:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 8021d06:	6880      	ldr	r0, [r0, #8]
 8021d08:	fab0 f080 	clz	r0, r0
 8021d0c:	0940      	lsrs	r0, r0, #5
 8021d0e:	4770      	bx	lr
    if(ll_p == NULL) return true;
 8021d10:	2001      	movs	r0, #1
 8021d12:	4770      	bx	lr

08021d14 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 8021d14:	4b1b      	ldr	r3, [pc, #108]	; (8021d84 <lv_trigo_sin+0x70>)
 8021d16:	fb83 2300 	smull	r2, r3, r3, r0
 8021d1a:	4403      	add	r3, r0
 8021d1c:	17c2      	asrs	r2, r0, #31
 8021d1e:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 8021d22:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021d26:	fb02 0013 	mls	r0, r2, r3, r0
 8021d2a:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 8021d2c:	2800      	cmp	r0, #0
 8021d2e:	bfbc      	itt	lt
 8021d30:	1880      	addlt	r0, r0, r2
 8021d32:	b200      	sxthlt	r0, r0

    if(angle < 90) {
 8021d34:	2859      	cmp	r0, #89	; 0x59
 8021d36:	dc03      	bgt.n	8021d40 <lv_trigo_sin+0x2c>
        ret = sin0_90_table[angle];
 8021d38:	4b13      	ldr	r3, [pc, #76]	; (8021d88 <lv_trigo_sin+0x74>)
 8021d3a:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8021d3e:	4770      	bx	lr
    }
    else if(angle >= 90 && angle < 180) {
 8021d40:	b280      	uxth	r0, r0
 8021d42:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
 8021d46:	b29b      	uxth	r3, r3
 8021d48:	2b59      	cmp	r3, #89	; 0x59
 8021d4a:	d806      	bhi.n	8021d5a <lv_trigo_sin+0x46>
        angle = 180 - angle;
 8021d4c:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
        ret   = sin0_90_table[angle];
 8021d50:	b200      	sxth	r0, r0
 8021d52:	4b0d      	ldr	r3, [pc, #52]	; (8021d88 <lv_trigo_sin+0x74>)
 8021d54:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8021d58:	4770      	bx	lr
    }
    else if(angle >= 180 && angle < 270) {
 8021d5a:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
 8021d5e:	b29b      	uxth	r3, r3
 8021d60:	2b59      	cmp	r3, #89	; 0x59
 8021d62:	d806      	bhi.n	8021d72 <lv_trigo_sin+0x5e>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
 8021d64:	b21b      	sxth	r3, r3
 8021d66:	4a08      	ldr	r2, [pc, #32]	; (8021d88 <lv_trigo_sin+0x74>)
 8021d68:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8021d6c:	4240      	negs	r0, r0
 8021d6e:	b200      	sxth	r0, r0
 8021d70:	4770      	bx	lr
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8021d72:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
        ret   = -sin0_90_table[angle];
 8021d76:	b200      	sxth	r0, r0
 8021d78:	4b03      	ldr	r3, [pc, #12]	; (8021d88 <lv_trigo_sin+0x74>)
 8021d7a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8021d7e:	4240      	negs	r0, r0
 8021d80:	b200      	sxth	r0, r0
    }

    return ret;
}
 8021d82:	4770      	bx	lr
 8021d84:	b60b60b7 	.word	0xb60b60b7
 8021d88:	08033478 	.word	0x08033478

08021d8c <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 8021d8c:	b530      	push	{r4, r5, lr}
    uint32_t t_rem  = 1024 - t;
 8021d8e:	f5c0 6c80 	rsb	ip, r0, #1024	; 0x400
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8021d92:	fb0c fe0c 	mul.w	lr, ip, ip
 8021d96:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
    uint32_t t2     = (t * t) >> 10;
 8021d9a:	fb00 f400 	mul.w	r4, r0, r0
 8021d9e:	0aa4      	lsrs	r4, r4, #10
    uint32_t t3     = (t2 * t) >> 10;

    uint32_t v1 = (t_rem3 * u0) >> 10;
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8021da0:	fb00 f202 	mul.w	r2, r0, r2
 8021da4:	fb0e f202 	mul.w	r2, lr, r2
 8021da8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    uint32_t t3     = (t2 * t) >> 10;
 8021dac:	fb04 f000 	mul.w	r0, r4, r0
 8021db0:	0a80      	lsrs	r0, r0, #10
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
    uint32_t v4 = (t3 * u3) >> 10;
 8021db2:	9d03      	ldr	r5, [sp, #12]
 8021db4:	fb05 f000 	mul.w	r0, r5, r0
 8021db8:	0a80      	lsrs	r0, r0, #10

    return v1 + v2 + v3 + v4;
 8021dba:	eb00 5012 	add.w	r0, r0, r2, lsr #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 8021dbe:	fb03 f30c 	mul.w	r3, r3, ip
 8021dc2:	fb04 f303 	mul.w	r3, r4, r3
 8021dc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    return v1 + v2 + v3 + v4;
 8021dca:	eb00 5013 	add.w	r0, r0, r3, lsr #20
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8021dce:	fb0e fc0c 	mul.w	ip, lr, ip
 8021dd2:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    uint32_t v1 = (t_rem3 * u0) >> 10;
 8021dd6:	fb01 fc0c 	mul.w	ip, r1, ip
}
 8021dda:	eb00 209c 	add.w	r0, r0, ip, lsr #10
 8021dde:	bd30      	pop	{r4, r5, pc}

08021de0 <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 8021de0:	2800      	cmp	r0, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
 8021de2:	bfba      	itte	lt
 8021de4:	4240      	neglt	r0, r0
        negflag += 0x01;    // x flag bit
 8021de6:	2201      	movlt	r2, #1
    negflag = 0;
 8021de8:	2200      	movge	r2, #0
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 8021dea:	2900      	cmp	r1, #0
 8021dec:	db1c      	blt.n	8021e28 <lv_atan2+0x48>
        y = (0 - y);        // is now +
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 8021dee:	4288      	cmp	r0, r1
 8021df0:	d91e      	bls.n	8021e30 <lv_atan2+0x50>
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 8021df2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021df6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8021dfa:	fbb1 f0f0 	udiv	r0, r1, r0
        negflag += 0x10;    // octant flag bit
 8021dfe:	3210      	adds	r2, #16
 8021e00:	b2d2      	uxtb	r2, r2
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 8021e02:	b2c1      	uxtb	r1, r0
    if(tempdegree > 22) {    // if top half of range
 8021e04:	2916      	cmp	r1, #22
 8021e06:	d91a      	bls.n	8021e3e <lv_atan2+0x5e>
    comp = 0;
 8021e08:	292c      	cmp	r1, #44	; 0x2c
 8021e0a:	bf8c      	ite	hi
 8021e0c:	2300      	movhi	r3, #0
 8021e0e:	2301      	movls	r3, #1
        if(tempdegree <= 44) comp++;
        if(tempdegree <= 41) comp++;
 8021e10:	2929      	cmp	r1, #41	; 0x29
 8021e12:	bf98      	it	ls
 8021e14:	3301      	addls	r3, #1
        if(tempdegree <= 37) comp++;
 8021e16:	2925      	cmp	r1, #37	; 0x25
 8021e18:	bf9c      	itt	ls
 8021e1a:	3301      	addls	r3, #1
 8021e1c:	b2db      	uxtbls	r3, r3
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 8021e1e:	2920      	cmp	r1, #32
 8021e20:	d81c      	bhi.n	8021e5c <lv_atan2+0x7c>
 8021e22:	3301      	adds	r3, #1
 8021e24:	b2db      	uxtb	r3, r3
 8021e26:	e019      	b.n	8021e5c <lv_atan2+0x7c>
        negflag += 0x02;    // y flag bit
 8021e28:	3202      	adds	r2, #2
 8021e2a:	b2d2      	uxtb	r2, r2
        y = (0 - y);        // is now +
 8021e2c:	4249      	negs	r1, r1
 8021e2e:	e7de      	b.n	8021dee <lv_atan2+0xe>
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 8021e30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021e34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8021e38:	fbb0 f0f1 	udiv	r0, r0, r1
 8021e3c:	e7e1      	b.n	8021e02 <lv_atan2+0x22>
    comp = 0;
 8021e3e:	2901      	cmp	r1, #1
 8021e40:	bf94      	ite	ls
 8021e42:	2300      	movls	r3, #0
 8021e44:	2301      	movhi	r3, #1
    }
    else {   // else is lower half of range
        if(tempdegree >= 2) comp++;
        if(tempdegree >= 6) comp++;
 8021e46:	2905      	cmp	r1, #5
 8021e48:	bf88      	it	hi
 8021e4a:	3301      	addhi	r3, #1
        if(tempdegree >= 10) comp++;
 8021e4c:	2909      	cmp	r1, #9
 8021e4e:	bf84      	itt	hi
 8021e50:	3301      	addhi	r3, #1
 8021e52:	b2db      	uxtbhi	r3, r3
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 8021e54:	290e      	cmp	r1, #14
 8021e56:	bf84      	itt	hi
 8021e58:	3301      	addhi	r3, #1
 8021e5a:	b2db      	uxtbhi	r3, r3
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!
 8021e5c:	4418      	add	r0, r3

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 8021e5e:	f012 0f10 	tst.w	r2, #16
 8021e62:	bf18      	it	ne
 8021e64:	f1c0 005a 	rsbne	r0, r0, #90	; 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 8021e68:	f012 0f02 	tst.w	r2, #2
 8021e6c:	d007      	beq.n	8021e7e <lv_atan2+0x9e>
        if(negflag & 0x01)   // if -Y -X
 8021e6e:	f012 0f01 	tst.w	r2, #1
            degree = (180 + degree);
 8021e72:	bf14      	ite	ne
 8021e74:	30b4      	addne	r0, #180	; 0xb4
        else        // else is -Y +X
            degree = (180 - degree);
 8021e76:	f1c0 00b4 	rsbeq	r0, r0, #180	; 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 8021e7a:	b280      	uxth	r0, r0
 8021e7c:	4770      	bx	lr
        if(negflag & 0x01)   // if +Y -X
 8021e7e:	f012 0f01 	tst.w	r2, #1
            degree = (360 - degree);
 8021e82:	bf18      	it	ne
 8021e84:	f5c0 70b4 	rsbne	r0, r0, #360	; 0x168
 8021e88:	e7f7      	b.n	8021e7a <lv_atan2+0x9a>

08021e8a <lv_pow>:
 * @return base raised to the power exponent
 */
int64_t lv_pow(int64_t base, int8_t exp)
{
    int64_t result = 1;
    while(exp) {
 8021e8a:	b1d2      	cbz	r2, 8021ec2 <lv_pow+0x38>
{
 8021e8c:	b500      	push	{lr}
 8021e8e:	4603      	mov	r3, r0
 8021e90:	468c      	mov	ip, r1
 8021e92:	4696      	mov	lr, r2
    int64_t result = 1;
 8021e94:	2001      	movs	r0, #1
 8021e96:	2100      	movs	r1, #0
 8021e98:	e008      	b.n	8021eac <lv_pow+0x22>
        if(exp & 1)
            result *= base;
        exp >>= 1;
        base *= base;
 8021e9a:	fb03 f20c 	mul.w	r2, r3, ip
 8021e9e:	fba3 3c03 	umull	r3, ip, r3, r3
 8021ea2:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
    while(exp) {
 8021ea6:	ea5f 0e6e 	movs.w	lr, lr, asr #1
 8021eaa:	d00d      	beq.n	8021ec8 <lv_pow+0x3e>
        if(exp & 1)
 8021eac:	f01e 0f01 	tst.w	lr, #1
 8021eb0:	d0f3      	beq.n	8021e9a <lv_pow+0x10>
            result *= base;
 8021eb2:	fb00 f20c 	mul.w	r2, r0, ip
 8021eb6:	fb03 2201 	mla	r2, r3, r1, r2
 8021eba:	fba0 0103 	umull	r0, r1, r0, r3
 8021ebe:	4411      	add	r1, r2
 8021ec0:	e7eb      	b.n	8021e9a <lv_pow+0x10>
    int64_t result = 1;
 8021ec2:	2001      	movs	r0, #1
 8021ec4:	2100      	movs	r1, #0
    }

    return result;
}
 8021ec6:	4770      	bx	lr
 8021ec8:	f85d fb04 	ldr.w	pc, [sp], #4

08021ecc <lv_map>:
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
    if(max_in >= min_in && x >= max_in) return max_out;
 8021ecc:	428a      	cmp	r2, r1
 8021ece:	db10      	blt.n	8021ef2 <lv_map+0x26>
 8021ed0:	4282      	cmp	r2, r0
 8021ed2:	dd14      	ble.n	8021efe <lv_map+0x32>
    if(max_in >= min_in && x <= min_in) return min_out;
 8021ed4:	4281      	cmp	r1, r0
 8021ed6:	da14      	bge.n	8021f02 <lv_map+0x36>

    if(max_in <= min_in && x <= max_in) return max_out;
 8021ed8:	428a      	cmp	r2, r1
 8021eda:	d014      	beq.n	8021f06 <lv_map+0x3a>
     */

    int32_t delta_in = max_in - min_in;
    int32_t delta_out = max_out - min_out;

    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021edc:	eba0 0c01 	sub.w	ip, r0, r1
    int32_t delta_out = max_out - min_out;
 8021ee0:	9800      	ldr	r0, [sp, #0]
 8021ee2:	1ac0      	subs	r0, r0, r3
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021ee4:	fb00 fc0c 	mul.w	ip, r0, ip
    int32_t delta_in = max_in - min_in;
 8021ee8:	1a52      	subs	r2, r2, r1
    return ((x - min_in) * delta_out) / delta_in + min_out;
 8021eea:	fb9c f2f2 	sdiv	r2, ip, r2
 8021eee:	18d0      	adds	r0, r2, r3
 8021ef0:	4770      	bx	lr
    if(max_in <= min_in && x <= max_in) return max_out;
 8021ef2:	4282      	cmp	r2, r0
 8021ef4:	da09      	bge.n	8021f0a <lv_map+0x3e>
    if(max_in <= min_in && x >= min_in) return min_out;
 8021ef6:	4281      	cmp	r1, r0
 8021ef8:	dcf0      	bgt.n	8021edc <lv_map+0x10>
 8021efa:	4618      	mov	r0, r3
}
 8021efc:	4770      	bx	lr
    if(max_in >= min_in && x >= max_in) return max_out;
 8021efe:	9800      	ldr	r0, [sp, #0]
 8021f00:	4770      	bx	lr
    if(max_in >= min_in && x <= min_in) return min_out;
 8021f02:	4618      	mov	r0, r3
 8021f04:	4770      	bx	lr
    if(max_in <= min_in && x <= max_in) return max_out;
 8021f06:	9800      	ldr	r0, [sp, #0]
 8021f08:	4770      	bx	lr
 8021f0a:	9800      	ldr	r0, [sp, #0]
 8021f0c:	4770      	bx	lr
	...

08021f10 <lv_mem_init>:

/**
 * Initialize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8021f10:	b508      	push	{r3, lr}
#ifdef LV_MEM_POOL_ALLOC
    tlsf = lv_tlsf_create_with_pool((void *)LV_MEM_POOL_ALLOC(LV_MEM_SIZE), LV_MEM_SIZE);
#else
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_ATTRIBUTE_LARGE_RAM_ARRAY MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 8021f12:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8021f16:	4803      	ldr	r0, [pc, #12]	; (8021f24 <lv_mem_init+0x14>)
 8021f18:	f001 feaa 	bl	8023c70 <lv_tlsf_create_with_pool>
 8021f1c:	4b02      	ldr	r3, [pc, #8]	; (8021f28 <lv_mem_init+0x18>)
 8021f1e:	6018      	str	r0, [r3, #0]
#endif

#if LV_MEM_ADD_JUNK
    LV_LOG_WARN("LV_MEM_ADD_JUNK is enabled which makes LVGL much slower");
#endif
}
 8021f20:	bd08      	pop	{r3, pc}
 8021f22:	bf00      	nop
 8021f24:	20002a1c 	.word	0x20002a1c
 8021f28:	20002a18 	.word	0x20002a18

08021f2c <lv_mem_alloc>:
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
    MEM_TRACE("allocating %lu bytes", (unsigned long)size);
    if(size == 0) {
 8021f2c:	b908      	cbnz	r0, 8021f32 <lv_mem_alloc+0x6>
        MEM_TRACE("using zero_mem");
        return &zero_mem;
 8021f2e:	480a      	ldr	r0, [pc, #40]	; (8021f58 <lv_mem_alloc+0x2c>)
        max_used = LV_MAX(cur_used, max_used);
#endif
        MEM_TRACE("allocated at %p", alloc);
    }
    return alloc;
}
 8021f30:	4770      	bx	lr
{
 8021f32:	b510      	push	{r4, lr}
 8021f34:	4604      	mov	r4, r0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8021f36:	4601      	mov	r1, r0
 8021f38:	4b08      	ldr	r3, [pc, #32]	; (8021f5c <lv_mem_alloc+0x30>)
 8021f3a:	6818      	ldr	r0, [r3, #0]
 8021f3c:	f001 fea6 	bl	8023c8c <lv_tlsf_malloc>
    if(alloc) {
 8021f40:	b148      	cbz	r0, 8021f56 <lv_mem_alloc+0x2a>
        cur_used += size;
 8021f42:	4b07      	ldr	r3, [pc, #28]	; (8021f60 <lv_mem_alloc+0x34>)
 8021f44:	681a      	ldr	r2, [r3, #0]
 8021f46:	4414      	add	r4, r2
 8021f48:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8021f4a:	4a06      	ldr	r2, [pc, #24]	; (8021f64 <lv_mem_alloc+0x38>)
 8021f4c:	6813      	ldr	r3, [r2, #0]
 8021f4e:	429c      	cmp	r4, r3
 8021f50:	bf38      	it	cc
 8021f52:	461c      	movcc	r4, r3
 8021f54:	6014      	str	r4, [r2, #0]
}
 8021f56:	bd10      	pop	{r4, pc}
 8021f58:	2000075c 	.word	0x2000075c
 8021f5c:	20002a18 	.word	0x20002a18
 8021f60:	20002a10 	.word	0x20002a10
 8021f64:	20002a14 	.word	0x20002a14

08021f68 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(void * data)
{
 8021f68:	b508      	push	{r3, lr}
    MEM_TRACE("freeing %p", data);
    if(data == &zero_mem) return;
 8021f6a:	4b0a      	ldr	r3, [pc, #40]	; (8021f94 <lv_mem_free+0x2c>)
 8021f6c:	4298      	cmp	r0, r3
 8021f6e:	d00c      	beq.n	8021f8a <lv_mem_free+0x22>
 8021f70:	4601      	mov	r1, r0
    if(data == NULL) return;
 8021f72:	b150      	cbz	r0, 8021f8a <lv_mem_free+0x22>

#if LV_MEM_CUSTOM == 0
#  if LV_MEM_ADD_JUNK
    lv_memset(data, 0xbb, lv_tlsf_block_size(data));
#  endif
    size_t size = lv_tlsf_free(tlsf, data);
 8021f74:	4b08      	ldr	r3, [pc, #32]	; (8021f98 <lv_mem_free+0x30>)
 8021f76:	6818      	ldr	r0, [r3, #0]
 8021f78:	f001 fea2 	bl	8023cc0 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8021f7c:	4b07      	ldr	r3, [pc, #28]	; (8021f9c <lv_mem_free+0x34>)
 8021f7e:	681b      	ldr	r3, [r3, #0]
 8021f80:	4283      	cmp	r3, r0
 8021f82:	d903      	bls.n	8021f8c <lv_mem_free+0x24>
 8021f84:	1a18      	subs	r0, r3, r0
 8021f86:	4b05      	ldr	r3, [pc, #20]	; (8021f9c <lv_mem_free+0x34>)
 8021f88:	6018      	str	r0, [r3, #0]
    else cur_used = 0;
#else
    LV_MEM_CUSTOM_FREE(data);
#endif
}
 8021f8a:	bd08      	pop	{r3, pc}
    else cur_used = 0;
 8021f8c:	4b03      	ldr	r3, [pc, #12]	; (8021f9c <lv_mem_free+0x34>)
 8021f8e:	2200      	movs	r2, #0
 8021f90:	601a      	str	r2, [r3, #0]
 8021f92:	e7fa      	b.n	8021f8a <lv_mem_free+0x22>
 8021f94:	2000075c 	.word	0x2000075c
 8021f98:	20002a18 	.word	0x20002a18
 8021f9c:	20002a10 	.word	0x20002a10

08021fa0 <lv_mem_realloc>:
 * Its content will be copied to the new memory block and freed
 * @param new_size the desired new size in byte
 * @return pointer to the new memory
 */
void * lv_mem_realloc(void * data_p, size_t new_size)
{
 8021fa0:	b508      	push	{r3, lr}
    MEM_TRACE("reallocating %p with %lu size", data_p, (unsigned long)new_size);
    if(new_size == 0) {
 8021fa2:	b149      	cbz	r1, 8021fb8 <lv_mem_realloc+0x18>
 8021fa4:	460a      	mov	r2, r1
        MEM_TRACE("using zero_mem");
        lv_mem_free(data_p);
        return &zero_mem;
    }

    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8021fa6:	4b08      	ldr	r3, [pc, #32]	; (8021fc8 <lv_mem_realloc+0x28>)
 8021fa8:	4298      	cmp	r0, r3
 8021faa:	d009      	beq.n	8021fc0 <lv_mem_realloc+0x20>

#if LV_MEM_CUSTOM == 0
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8021fac:	4601      	mov	r1, r0
 8021fae:	4b07      	ldr	r3, [pc, #28]	; (8021fcc <lv_mem_realloc+0x2c>)
 8021fb0:	6818      	ldr	r0, [r3, #0]
 8021fb2:	f001 fecb 	bl	8023d4c <lv_tlsf_realloc>
        return NULL;
    }

    MEM_TRACE("allocated at %p", new_p);
    return new_p;
}
 8021fb6:	bd08      	pop	{r3, pc}
        lv_mem_free(data_p);
 8021fb8:	f7ff ffd6 	bl	8021f68 <lv_mem_free>
        return &zero_mem;
 8021fbc:	4802      	ldr	r0, [pc, #8]	; (8021fc8 <lv_mem_realloc+0x28>)
 8021fbe:	e7fa      	b.n	8021fb6 <lv_mem_realloc+0x16>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8021fc0:	4608      	mov	r0, r1
 8021fc2:	f7ff ffb3 	bl	8021f2c <lv_mem_alloc>
 8021fc6:	e7f6      	b.n	8021fb6 <lv_mem_realloc+0x16>
 8021fc8:	2000075c 	.word	0x2000075c
 8021fcc:	20002a18 	.word	0x20002a18

08021fd0 <lv_mem_buf_get>:
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * lv_mem_buf_get(uint32_t size)
{
    if(size == 0) return NULL;
 8021fd0:	2800      	cmp	r0, #0
 8021fd2:	d05a      	beq.n	802208a <lv_mem_buf_get+0xba>
{
 8021fd4:	b538      	push	{r3, r4, r5, lr}
 8021fd6:	4604      	mov	r4, r0
 8021fd8:	2300      	movs	r3, #0

    MEM_TRACE("begin, getting %d bytes", size);

    /*Try to find a free buffer with suitable size*/
    int8_t i_guess = -1;
 8021fda:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8021fde:	492c      	ldr	r1, [pc, #176]	; (8022090 <lv_mem_buf_get+0xc0>)
 8021fe0:	1d0d      	adds	r5, r1, #4
 8021fe2:	e00e      	b.n	8022002 <lv_mem_buf_get+0x32>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8021fe4:	4a2a      	ldr	r2, [pc, #168]	; (8022090 <lv_mem_buf_get+0xc0>)
 8021fe6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8021fea:	798b      	ldrb	r3, [r1, #6]
 8021fec:	f043 0301 	orr.w	r3, r3, #1
 8021ff0:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 8021ff2:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 8021ff6:	e034      	b.n	8022062 <lv_mem_buf_get+0x92>
            }
            else if(i_guess < 0) {
                i_guess = i;
 8021ff8:	fa4f fc83 	sxtb.w	ip, r3
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8021ffc:	3301      	adds	r3, #1
 8021ffe:	2b10      	cmp	r3, #16
 8022000:	d016      	beq.n	8022030 <lv_mem_buf_get+0x60>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 8022002:	4618      	mov	r0, r3
 8022004:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8022008:	7992      	ldrb	r2, [r2, #6]
 802200a:	f012 0f01 	tst.w	r2, #1
 802200e:	d1f5      	bne.n	8021ffc <lv_mem_buf_get+0x2c>
 8022010:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
 8022014:	42a2      	cmp	r2, r4
 8022016:	d3f1      	bcc.n	8021ffc <lv_mem_buf_get+0x2c>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8022018:	d0e4      	beq.n	8021fe4 <lv_mem_buf_get+0x14>
            else if(i_guess < 0) {
 802201a:	f1bc 0f00 	cmp.w	ip, #0
 802201e:	dbeb      	blt.n	8021ff8 <lv_mem_buf_get+0x28>
            }
            /*If size of `i` is closer to `size` prefer it*/
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8022020:	eb01 00cc 	add.w	r0, r1, ip, lsl #3
 8022024:	8880      	ldrh	r0, [r0, #4]
 8022026:	4290      	cmp	r0, r2
                i_guess = i;
 8022028:	bf88      	it	hi
 802202a:	fa4f fc83 	sxtbhi.w	ip, r3
 802202e:	e7e5      	b.n	8021ffc <lv_mem_buf_get+0x2c>
            }
        }
    }

    if(i_guess >= 0) {
 8022030:	f1bc 0f00 	cmp.w	ip, #0
 8022034:	da0c      	bge.n	8022050 <lv_mem_buf_get+0x80>
 8022036:	2300      	movs	r3, #0
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
    }

    /*Reallocate a free buffer*/
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8022038:	4915      	ldr	r1, [pc, #84]	; (8022090 <lv_mem_buf_get+0xc0>)
 802203a:	461d      	mov	r5, r3
 802203c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8022040:	7992      	ldrb	r2, [r2, #6]
 8022042:	f012 0f01 	tst.w	r2, #1
 8022046:	d00d      	beq.n	8022064 <lv_mem_buf_get+0x94>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8022048:	3301      	adds	r3, #1
 802204a:	2b10      	cmp	r3, #16
 802204c:	d1f5      	bne.n	802203a <lv_mem_buf_get+0x6a>
            return LV_GC_ROOT(lv_mem_buf[i]).p;
        }
    }

    LV_LOG_ERROR("no more buffers. (increase LV_MEM_BUF_MAX_NUM)");
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 802204e:	e7fe      	b.n	802204e <lv_mem_buf_get+0x7e>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8022050:	4a0f      	ldr	r2, [pc, #60]	; (8022090 <lv_mem_buf_get+0xc0>)
 8022052:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
 8022056:	798b      	ldrb	r3, [r1, #6]
 8022058:	f043 0301 	orr.w	r3, r3, #1
 802205c:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 802205e:	f852 003c 	ldr.w	r0, [r2, ip, lsl #3]
    return NULL;
}
 8022062:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8022064:	4621      	mov	r1, r4
 8022066:	4b0a      	ldr	r3, [pc, #40]	; (8022090 <lv_mem_buf_get+0xc0>)
 8022068:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 802206c:	f7ff ff98 	bl	8021fa0 <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8022070:	b150      	cbz	r0, 8022088 <lv_mem_buf_get+0xb8>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8022072:	4907      	ldr	r1, [pc, #28]	; (8022090 <lv_mem_buf_get+0xc0>)
 8022074:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8022078:	799a      	ldrb	r2, [r3, #6]
 802207a:	f042 0201 	orr.w	r2, r2, #1
 802207e:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8022080:	809c      	strh	r4, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8022082:	f841 0035 	str.w	r0, [r1, r5, lsl #3]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8022086:	e7ec      	b.n	8022062 <lv_mem_buf_get+0x92>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8022088:	e7fe      	b.n	8022088 <lv_mem_buf_get+0xb8>
    if(size == 0) return NULL;
 802208a:	2000      	movs	r0, #0
}
 802208c:	4770      	bx	lr
 802208e:	bf00      	nop
 8022090:	20002990 	.word	0x20002990

08022094 <lv_mem_buf_release>:
/**
 * Release a memory buffer
 * @param p buffer to release
 */
void lv_mem_buf_release(void * p)
{
 8022094:	2300      	movs	r3, #0
    MEM_TRACE("begin (address: %p)", p);

    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8022096:	490a      	ldr	r1, [pc, #40]	; (80220c0 <lv_mem_buf_release+0x2c>)
 8022098:	469c      	mov	ip, r3
 802209a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 802209e:	4282      	cmp	r2, r0
 80220a0:	d003      	beq.n	80220aa <lv_mem_buf_release+0x16>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80220a2:	3301      	adds	r3, #1
 80220a4:	2b10      	cmp	r3, #16
 80220a6:	d1f7      	bne.n	8022098 <lv_mem_buf_release+0x4>
            return;
        }
    }

    LV_LOG_ERROR("p is not a known buffer");
}
 80220a8:	4770      	bx	lr
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80220aa:	4b05      	ldr	r3, [pc, #20]	; (80220c0 <lv_mem_buf_release+0x2c>)
 80220ac:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 80220b0:	f89c 3006 	ldrb.w	r3, [ip, #6]
 80220b4:	f36f 0300 	bfc	r3, #0, #1
 80220b8:	f88c 3006 	strb.w	r3, [ip, #6]
            return;
 80220bc:	4770      	bx	lr
 80220be:	bf00      	nop
 80220c0:	20002990 	.word	0x20002990

080220c4 <lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void lv_mem_buf_free_all(void)
{
 80220c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80220c6:	2400      	movs	r4, #0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 80220c8:	4d0c      	ldr	r5, [pc, #48]	; (80220fc <lv_mem_buf_free_all+0x38>)
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80220ca:	4626      	mov	r6, r4
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80220cc:	1d2f      	adds	r7, r5, #4
 80220ce:	e002      	b.n	80220d6 <lv_mem_buf_free_all+0x12>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80220d0:	3401      	adds	r4, #1
 80220d2:	2c10      	cmp	r4, #16
 80220d4:	d010      	beq.n	80220f8 <lv_mem_buf_free_all+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 80220d6:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 80220da:	2800      	cmp	r0, #0
 80220dc:	d0f8      	beq.n	80220d0 <lv_mem_buf_free_all+0xc>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 80220de:	f7ff ff43 	bl	8021f68 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 80220e2:	f845 6034 	str.w	r6, [r5, r4, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 80220e6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80220ea:	799a      	ldrb	r2, [r3, #6]
 80220ec:	f366 0200 	bfi	r2, r6, #0, #1
 80220f0:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 80220f2:	f827 6034 	strh.w	r6, [r7, r4, lsl #3]
 80220f6:	e7eb      	b.n	80220d0 <lv_mem_buf_free_all+0xc>
        }
    }
}
 80220f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220fa:	bf00      	nop
 80220fc:	20002990 	.word	0x20002990

08022100 <lv_memcpy>:
 * @param dst pointer to the destination buffer
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * lv_memcpy(void * dst, const void * src, size_t len)
{
 8022100:	b570      	push	{r4, r5, r6, lr}
    uint8_t * d8 = dst;
    const uint8_t * s8 = src;

    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8022102:	f000 0303 	and.w	r3, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8022106:	f001 0503 	and.w	r5, r1, #3

    /*Byte copy for unaligned memories*/
    if(s_align != d_align) {
 802210a:	42ab      	cmp	r3, r5
 802210c:	f000 80ac 	beq.w	8022268 <lv_memcpy+0x168>
        while(len > 32) {
 8022110:	2a20      	cmp	r2, #32
 8022112:	f240 80a7 	bls.w	8022264 <lv_memcpy+0x164>
 8022116:	f100 0320 	add.w	r3, r0, #32
 802211a:	f101 0420 	add.w	r4, r1, #32
 802211e:	f1a2 0e21 	sub.w	lr, r2, #33	; 0x21
 8022122:	ea4f 1c5e 	mov.w	ip, lr, lsr #5
 8022126:	f02e 0e1f 	bic.w	lr, lr, #31
 802212a:	4486      	add	lr, r0
 802212c:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            REPEAT8(COPY8);
 8022130:	f814 5c20 	ldrb.w	r5, [r4, #-32]
 8022134:	f803 5c20 	strb.w	r5, [r3, #-32]
 8022138:	f814 5c1f 	ldrb.w	r5, [r4, #-31]
 802213c:	f803 5c1f 	strb.w	r5, [r3, #-31]
 8022140:	f814 5c1e 	ldrb.w	r5, [r4, #-30]
 8022144:	f803 5c1e 	strb.w	r5, [r3, #-30]
 8022148:	f814 5c1d 	ldrb.w	r5, [r4, #-29]
 802214c:	f803 5c1d 	strb.w	r5, [r3, #-29]
 8022150:	f814 5c1c 	ldrb.w	r5, [r4, #-28]
 8022154:	f803 5c1c 	strb.w	r5, [r3, #-28]
 8022158:	f814 5c1b 	ldrb.w	r5, [r4, #-27]
 802215c:	f803 5c1b 	strb.w	r5, [r3, #-27]
 8022160:	f814 5c1a 	ldrb.w	r5, [r4, #-26]
 8022164:	f803 5c1a 	strb.w	r5, [r3, #-26]
 8022168:	f814 5c19 	ldrb.w	r5, [r4, #-25]
 802216c:	f803 5c19 	strb.w	r5, [r3, #-25]
            REPEAT8(COPY8);
 8022170:	f814 5c18 	ldrb.w	r5, [r4, #-24]
 8022174:	f803 5c18 	strb.w	r5, [r3, #-24]
 8022178:	f814 5c17 	ldrb.w	r5, [r4, #-23]
 802217c:	f803 5c17 	strb.w	r5, [r3, #-23]
 8022180:	f814 5c16 	ldrb.w	r5, [r4, #-22]
 8022184:	f803 5c16 	strb.w	r5, [r3, #-22]
 8022188:	f814 5c15 	ldrb.w	r5, [r4, #-21]
 802218c:	f803 5c15 	strb.w	r5, [r3, #-21]
 8022190:	f814 5c14 	ldrb.w	r5, [r4, #-20]
 8022194:	f803 5c14 	strb.w	r5, [r3, #-20]
 8022198:	f814 5c13 	ldrb.w	r5, [r4, #-19]
 802219c:	f803 5c13 	strb.w	r5, [r3, #-19]
 80221a0:	f814 5c12 	ldrb.w	r5, [r4, #-18]
 80221a4:	f803 5c12 	strb.w	r5, [r3, #-18]
 80221a8:	f814 5c11 	ldrb.w	r5, [r4, #-17]
 80221ac:	f803 5c11 	strb.w	r5, [r3, #-17]
            REPEAT8(COPY8);
 80221b0:	f814 5c10 	ldrb.w	r5, [r4, #-16]
 80221b4:	f803 5c10 	strb.w	r5, [r3, #-16]
 80221b8:	f814 5c0f 	ldrb.w	r5, [r4, #-15]
 80221bc:	f803 5c0f 	strb.w	r5, [r3, #-15]
 80221c0:	f814 5c0e 	ldrb.w	r5, [r4, #-14]
 80221c4:	f803 5c0e 	strb.w	r5, [r3, #-14]
 80221c8:	f814 5c0d 	ldrb.w	r5, [r4, #-13]
 80221cc:	f803 5c0d 	strb.w	r5, [r3, #-13]
 80221d0:	f814 5c0c 	ldrb.w	r5, [r4, #-12]
 80221d4:	f803 5c0c 	strb.w	r5, [r3, #-12]
 80221d8:	f814 5c0b 	ldrb.w	r5, [r4, #-11]
 80221dc:	f803 5c0b 	strb.w	r5, [r3, #-11]
 80221e0:	f814 5c0a 	ldrb.w	r5, [r4, #-10]
 80221e4:	f803 5c0a 	strb.w	r5, [r3, #-10]
 80221e8:	f814 5c09 	ldrb.w	r5, [r4, #-9]
 80221ec:	f803 5c09 	strb.w	r5, [r3, #-9]
            REPEAT8(COPY8);
 80221f0:	f814 5c08 	ldrb.w	r5, [r4, #-8]
 80221f4:	f803 5c08 	strb.w	r5, [r3, #-8]
 80221f8:	f814 5c07 	ldrb.w	r5, [r4, #-7]
 80221fc:	f803 5c07 	strb.w	r5, [r3, #-7]
 8022200:	f814 5c06 	ldrb.w	r5, [r4, #-6]
 8022204:	f803 5c06 	strb.w	r5, [r3, #-6]
 8022208:	f814 5c05 	ldrb.w	r5, [r4, #-5]
 802220c:	f803 5c05 	strb.w	r5, [r3, #-5]
 8022210:	f814 5c04 	ldrb.w	r5, [r4, #-4]
 8022214:	f803 5c04 	strb.w	r5, [r3, #-4]
 8022218:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 802221c:	f803 5c03 	strb.w	r5, [r3, #-3]
 8022220:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 8022224:	f803 5c02 	strb.w	r5, [r3, #-2]
 8022228:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 802222c:	f803 5c01 	strb.w	r5, [r3, #-1]
        while(len > 32) {
 8022230:	3320      	adds	r3, #32
 8022232:	3420      	adds	r4, #32
 8022234:	4573      	cmp	r3, lr
 8022236:	f47f af7b 	bne.w	8022130 <lv_memcpy+0x30>
 802223a:	f10c 0401 	add.w	r4, ip, #1
            REPEAT8(COPY8);
 802223e:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8022242:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 8022246:	3a20      	subs	r2, #32
            len -= 32;
 8022248:	ebcc 6ccc 	rsb	ip, ip, ip, lsl #27
 802224c:	eb02 124c 	add.w	r2, r2, ip, lsl #5
        }
        while(len) {
 8022250:	b13a      	cbz	r2, 8022262 <lv_memcpy+0x162>
 8022252:	3901      	subs	r1, #1
 8022254:	441a      	add	r2, r3
            COPY8
 8022256:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802225a:	f803 4b01 	strb.w	r4, [r3], #1
        while(len) {
 802225e:	4293      	cmp	r3, r2
 8022260:	d1f9      	bne.n	8022256 <lv_memcpy+0x156>
        COPY8
        len--;
    }

    return dst;
}
 8022262:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t * d8 = dst;
 8022264:	4603      	mov	r3, r0
 8022266:	e7f3      	b.n	8022250 <lv_memcpy+0x150>
 8022268:	460c      	mov	r4, r1
    if(d_align) {
 802226a:	2b00      	cmp	r3, #0
 802226c:	d166      	bne.n	802233c <lv_memcpy+0x23c>
    uint8_t * d8 = dst;
 802226e:	4686      	mov	lr, r0
    while(len > 32) {
 8022270:	2a20      	cmp	r2, #32
 8022272:	bf98      	it	ls
 8022274:	4673      	movls	r3, lr
 8022276:	d93a      	bls.n	80222ee <lv_memcpy+0x1ee>
 8022278:	f10e 0320 	add.w	r3, lr, #32
 802227c:	f101 0c20 	add.w	ip, r1, #32
 8022280:	f1a2 0621 	sub.w	r6, r2, #33	; 0x21
 8022284:	0975      	lsrs	r5, r6, #5
 8022286:	f10e 0440 	add.w	r4, lr, #64	; 0x40
 802228a:	f026 061f 	bic.w	r6, r6, #31
 802228e:	4434      	add	r4, r6
        REPEAT8(COPY32)
 8022290:	f85c 6c20 	ldr.w	r6, [ip, #-32]
 8022294:	f843 6c20 	str.w	r6, [r3, #-32]
 8022298:	f85c 6c1c 	ldr.w	r6, [ip, #-28]
 802229c:	f843 6c1c 	str.w	r6, [r3, #-28]
 80222a0:	f85c 6c18 	ldr.w	r6, [ip, #-24]
 80222a4:	f843 6c18 	str.w	r6, [r3, #-24]
 80222a8:	f85c 6c14 	ldr.w	r6, [ip, #-20]
 80222ac:	f843 6c14 	str.w	r6, [r3, #-20]
 80222b0:	f85c 6c10 	ldr.w	r6, [ip, #-16]
 80222b4:	f843 6c10 	str.w	r6, [r3, #-16]
 80222b8:	f85c 6c0c 	ldr.w	r6, [ip, #-12]
 80222bc:	f843 6c0c 	str.w	r6, [r3, #-12]
 80222c0:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80222c4:	f843 6c08 	str.w	r6, [r3, #-8]
 80222c8:	f85c 6c04 	ldr.w	r6, [ip, #-4]
 80222cc:	f843 6c04 	str.w	r6, [r3, #-4]
    while(len > 32) {
 80222d0:	3320      	adds	r3, #32
 80222d2:	f10c 0c20 	add.w	ip, ip, #32
 80222d6:	42a3      	cmp	r3, r4
 80222d8:	d1da      	bne.n	8022290 <lv_memcpy+0x190>
 80222da:	1c6c      	adds	r4, r5, #1
        REPEAT8(COPY32)
 80222dc:	eb0e 1344 	add.w	r3, lr, r4, lsl #5
 80222e0:	eb01 1144 	add.w	r1, r1, r4, lsl #5
 80222e4:	3a20      	subs	r2, #32
        len -= 32;
 80222e6:	ebc5 65c5 	rsb	r5, r5, r5, lsl #27
 80222ea:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    while(len > 4) {
 80222ee:	2a04      	cmp	r2, #4
 80222f0:	d919      	bls.n	8022326 <lv_memcpy+0x226>
 80222f2:	1f0c      	subs	r4, r1, #4
 80222f4:	f1a2 0c05 	sub.w	ip, r2, #5
 80222f8:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
 80222fc:	f02c 0c03 	bic.w	ip, ip, #3
 8022300:	448c      	add	ip, r1
 8022302:	461d      	mov	r5, r3
        COPY32;
 8022304:	f854 6f04 	ldr.w	r6, [r4, #4]!
 8022308:	f845 6b04 	str.w	r6, [r5], #4
    while(len > 4) {
 802230c:	4564      	cmp	r4, ip
 802230e:	d1f9      	bne.n	8022304 <lv_memcpy+0x204>
 8022310:	f10e 0401 	add.w	r4, lr, #1
        COPY32;
 8022314:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802231c:	3a04      	subs	r2, #4
        len -= 4;
 802231e:	ebce 7e8e 	rsb	lr, lr, lr, lsl #30
 8022322:	eb02 028e 	add.w	r2, r2, lr, lsl #2
    while(len) {
 8022326:	2a00      	cmp	r2, #0
 8022328:	d09b      	beq.n	8022262 <lv_memcpy+0x162>
 802232a:	3901      	subs	r1, #1
 802232c:	441a      	add	r2, r3
        COPY8
 802232e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022332:	f803 4b01 	strb.w	r4, [r3], #1
    while(len) {
 8022336:	4293      	cmp	r3, r2
 8022338:	d1f9      	bne.n	802232e <lv_memcpy+0x22e>
 802233a:	e792      	b.n	8022262 <lv_memcpy+0x162>
        d_align = ALIGN_MASK + 1 - d_align;
 802233c:	f1c3 0e04 	rsb	lr, r3, #4
        while(d_align && len) {
 8022340:	b16a      	cbz	r2, 802235e <lv_memcpy+0x25e>
 8022342:	4486      	add	lr, r0
    uint8_t * d8 = dst;
 8022344:	4603      	mov	r3, r0
            COPY8;
 8022346:	f814 1b01 	ldrb.w	r1, [r4], #1
 802234a:	f803 1b01 	strb.w	r1, [r3], #1
 802234e:	4621      	mov	r1, r4
            len--;
 8022350:	3a01      	subs	r2, #1
        while(d_align && len) {
 8022352:	4573      	cmp	r3, lr
 8022354:	d08c      	beq.n	8022270 <lv_memcpy+0x170>
 8022356:	2a00      	cmp	r2, #0
 8022358:	d1f5      	bne.n	8022346 <lv_memcpy+0x246>
    while(len > 4) {
 802235a:	2200      	movs	r2, #0
 802235c:	e7e3      	b.n	8022326 <lv_memcpy+0x226>
    uint8_t * d8 = dst;
 802235e:	4603      	mov	r3, r0
 8022360:	e7fb      	b.n	802235a <lv_memcpy+0x25a>

08022362 <lv_memset>:
    uint8_t * d8 = (uint8_t *)dst;

    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 8022362:	f010 0303 	ands.w	r3, r0, #3
 8022366:	d013      	beq.n	8022390 <lv_memset+0x2e>
        d_align = ALIGN_MASK + 1 - d_align;
 8022368:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 802236c:	b13a      	cbz	r2, 802237e <lv_memset+0x1c>
 802236e:	4403      	add	r3, r0
            SET8(v);
 8022370:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
 8022374:	3a01      	subs	r2, #1
        while(d_align && len) {
 8022376:	4298      	cmp	r0, r3
 8022378:	d009      	beq.n	802238e <lv_memset+0x2c>
 802237a:	2a00      	cmp	r2, #0
 802237c:	d1f8      	bne.n	8022370 <lv_memset+0xe>

    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);

    uint32_t * d32 = (uint32_t *)d8;

    while(len > 32) {
 802237e:	2200      	movs	r2, #0
        SET32(v32);
        len -= 4;
    }

    d8 = (uint8_t *)d32;
    while(len) {
 8022380:	b122      	cbz	r2, 802238c <lv_memset+0x2a>
 8022382:	4402      	add	r2, r0
        SET8(v);
 8022384:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
 8022388:	4290      	cmp	r0, r2
 802238a:	d1fb      	bne.n	8022384 <lv_memset+0x22>
 802238c:	4770      	bx	lr
            SET8(v);
 802238e:	4618      	mov	r0, r3
{
 8022390:	b530      	push	{r4, r5, lr}
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 8022392:	040c      	lsls	r4, r1, #16
 8022394:	eb04 2401 	add.w	r4, r4, r1, lsl #8
 8022398:	440c      	add	r4, r1
 802239a:	eb04 6401 	add.w	r4, r4, r1, lsl #24
    while(len > 32) {
 802239e:	2a20      	cmp	r2, #32
 80223a0:	d940      	bls.n	8022424 <lv_memset+0xc2>
 80223a2:	f100 0320 	add.w	r3, r0, #32
 80223a6:	f1a2 0521 	sub.w	r5, r2, #33	; 0x21
 80223aa:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 80223ae:	f100 0c40 	add.w	ip, r0, #64	; 0x40
 80223b2:	f025 051f 	bic.w	r5, r5, #31
 80223b6:	44ac      	add	ip, r5
        REPEAT8(SET32(v32));
 80223b8:	f843 4c20 	str.w	r4, [r3, #-32]
 80223bc:	f843 4c1c 	str.w	r4, [r3, #-28]
 80223c0:	f843 4c18 	str.w	r4, [r3, #-24]
 80223c4:	f843 4c14 	str.w	r4, [r3, #-20]
 80223c8:	f843 4c10 	str.w	r4, [r3, #-16]
 80223cc:	f843 4c0c 	str.w	r4, [r3, #-12]
 80223d0:	f843 4c08 	str.w	r4, [r3, #-8]
 80223d4:	f843 4c04 	str.w	r4, [r3, #-4]
    while(len > 32) {
 80223d8:	3320      	adds	r3, #32
 80223da:	4563      	cmp	r3, ip
 80223dc:	d1ec      	bne.n	80223b8 <lv_memset+0x56>
        REPEAT8(SET32(v32));
 80223de:	f10e 0301 	add.w	r3, lr, #1
 80223e2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80223e6:	3a20      	subs	r2, #32
        len -= 32;
 80223e8:	ebce 6ece 	rsb	lr, lr, lr, lsl #27
 80223ec:	eb02 124e 	add.w	r2, r2, lr, lsl #5
    while(len > 4) {
 80223f0:	2a04      	cmp	r2, #4
 80223f2:	d919      	bls.n	8022428 <lv_memset+0xc6>
 80223f4:	f1a2 0c05 	sub.w	ip, r2, #5
 80223f8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80223fc:	f10c 0001 	add.w	r0, ip, #1
 8022400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        SET32(v32);
 8022404:	f843 4b04 	str.w	r4, [r3], #4
    while(len > 4) {
 8022408:	4283      	cmp	r3, r0
 802240a:	d1fb      	bne.n	8022404 <lv_memset+0xa2>
 802240c:	3a04      	subs	r2, #4
        len -= 4;
 802240e:	ebcc 7c8c 	rsb	ip, ip, ip, lsl #30
 8022412:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    while(len) {
 8022416:	b122      	cbz	r2, 8022422 <lv_memset+0xc0>
 8022418:	4402      	add	r2, r0
        SET8(v);
 802241a:	f800 1b01 	strb.w	r1, [r0], #1
    while(len) {
 802241e:	4290      	cmp	r0, r2
 8022420:	d1fb      	bne.n	802241a <lv_memset+0xb8>
        len--;
    }
}
 8022422:	bd30      	pop	{r4, r5, pc}
    while(len > 32) {
 8022424:	4603      	mov	r3, r0
 8022426:	e7e3      	b.n	80223f0 <lv_memset+0x8e>
    while(len > 4) {
 8022428:	4618      	mov	r0, r3
 802242a:	e7f4      	b.n	8022416 <lv_memset+0xb4>

0802242c <lv_memset_00>:
{
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 802242c:	f010 0303 	ands.w	r3, r0, #3
 8022430:	d14b      	bne.n	80224ca <lv_memset_00+0x9e>
{
 8022432:	b500      	push	{lr}
            d_align--;
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 8022434:	2920      	cmp	r1, #32
 8022436:	bf98      	it	ls
 8022438:	4603      	movls	r3, r0
 802243a:	d927      	bls.n	802248c <lv_memset_00+0x60>
 802243c:	f100 0320 	add.w	r3, r0, #32
 8022440:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
 8022444:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8022448:	f100 0c40 	add.w	ip, r0, #64	; 0x40
 802244c:	f022 021f 	bic.w	r2, r2, #31
 8022450:	4494      	add	ip, r2
        REPEAT8(SET32(0));
 8022452:	2200      	movs	r2, #0
 8022454:	f843 2c20 	str.w	r2, [r3, #-32]
 8022458:	f843 2c1c 	str.w	r2, [r3, #-28]
 802245c:	f843 2c18 	str.w	r2, [r3, #-24]
 8022460:	f843 2c14 	str.w	r2, [r3, #-20]
 8022464:	f843 2c10 	str.w	r2, [r3, #-16]
 8022468:	f843 2c0c 	str.w	r2, [r3, #-12]
 802246c:	f843 2c08 	str.w	r2, [r3, #-8]
 8022470:	f843 2c04 	str.w	r2, [r3, #-4]
    while(len > 32) {
 8022474:	3320      	adds	r3, #32
 8022476:	4563      	cmp	r3, ip
 8022478:	d1ec      	bne.n	8022454 <lv_memset_00+0x28>
        REPEAT8(SET32(0));
 802247a:	f10e 0301 	add.w	r3, lr, #1
 802247e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8022482:	3920      	subs	r1, #32
        len -= 32;
 8022484:	ebce 6ece 	rsb	lr, lr, lr, lsl #27
 8022488:	eb01 114e 	add.w	r1, r1, lr, lsl #5
    }

    while(len > 4) {
 802248c:	2904      	cmp	r1, #4
 802248e:	d931      	bls.n	80224f4 <lv_memset_00+0xc8>
 8022490:	f1a1 0c05 	sub.w	ip, r1, #5
 8022494:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8022498:	f10c 0001 	add.w	r0, ip, #1
 802249c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        SET32(0);
 80224a0:	2200      	movs	r2, #0
 80224a2:	f843 2b04 	str.w	r2, [r3], #4
    while(len > 4) {
 80224a6:	4283      	cmp	r3, r0
 80224a8:	d1fb      	bne.n	80224a2 <lv_memset_00+0x76>
 80224aa:	3904      	subs	r1, #4
        len -= 4;
 80224ac:	ebcc 7c8c 	rsb	ip, ip, ip, lsl #30
 80224b0:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    }

    d8 = (uint8_t *)d32;
    while(len) {
 80224b4:	b129      	cbz	r1, 80224c2 <lv_memset_00+0x96>
 80224b6:	4401      	add	r1, r0
        SET8(0);
 80224b8:	2300      	movs	r3, #0
 80224ba:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 80224be:	4288      	cmp	r0, r1
 80224c0:	d1fb      	bne.n	80224ba <lv_memset_00+0x8e>
        len--;
    }
}
 80224c2:	f85d fb04 	ldr.w	pc, [sp], #4
            SET8(0);
 80224c6:	4618      	mov	r0, r3
 80224c8:	e7b3      	b.n	8022432 <lv_memset_00+0x6>
        d_align = ALIGN_MASK + 1 - d_align;
 80224ca:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 80224ce:	b141      	cbz	r1, 80224e2 <lv_memset_00+0xb6>
 80224d0:	4403      	add	r3, r0
            SET8(0);
 80224d2:	2200      	movs	r2, #0
 80224d4:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 80224d8:	3901      	subs	r1, #1
        while(d_align && len) {
 80224da:	4298      	cmp	r0, r3
 80224dc:	d0f3      	beq.n	80224c6 <lv_memset_00+0x9a>
 80224de:	2900      	cmp	r1, #0
 80224e0:	d1f8      	bne.n	80224d4 <lv_memset_00+0xa8>
    while(len > 32) {
 80224e2:	2100      	movs	r1, #0
    while(len) {
 80224e4:	b129      	cbz	r1, 80224f2 <lv_memset_00+0xc6>
 80224e6:	4401      	add	r1, r0
        SET8(0);
 80224e8:	2300      	movs	r3, #0
 80224ea:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 80224ee:	4288      	cmp	r0, r1
 80224f0:	d1fb      	bne.n	80224ea <lv_memset_00+0xbe>
 80224f2:	4770      	bx	lr
    while(len > 4) {
 80224f4:	4618      	mov	r0, r3
 80224f6:	e7dd      	b.n	80224b4 <lv_memset_00+0x88>

080224f8 <lv_memset_ff>:
{
    uint8_t * d8 = (uint8_t *)dst;
    uintptr_t d_align = (lv_uintptr_t) d8 & ALIGN_MASK;

    /*Make the address aligned*/
    if(d_align) {
 80224f8:	f010 0303 	ands.w	r3, r0, #3
 80224fc:	d14d      	bne.n	802259a <lv_memset_ff+0xa2>
{
 80224fe:	b500      	push	{lr}
            d_align--;
        }
    }

    uint32_t * d32 = (uint32_t *)d8;
    while(len > 32) {
 8022500:	2920      	cmp	r1, #32
 8022502:	bf98      	it	ls
 8022504:	4603      	movls	r3, r0
 8022506:	d928      	bls.n	802255a <lv_memset_ff+0x62>
 8022508:	f100 0320 	add.w	r3, r0, #32
 802250c:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
 8022510:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8022514:	f100 0c40 	add.w	ip, r0, #64	; 0x40
 8022518:	f022 021f 	bic.w	r2, r2, #31
 802251c:	4494      	add	ip, r2
        REPEAT8(SET32(0xFFFFFFFF));
 802251e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022522:	f843 2c20 	str.w	r2, [r3, #-32]
 8022526:	f843 2c1c 	str.w	r2, [r3, #-28]
 802252a:	f843 2c18 	str.w	r2, [r3, #-24]
 802252e:	f843 2c14 	str.w	r2, [r3, #-20]
 8022532:	f843 2c10 	str.w	r2, [r3, #-16]
 8022536:	f843 2c0c 	str.w	r2, [r3, #-12]
 802253a:	f843 2c08 	str.w	r2, [r3, #-8]
 802253e:	f843 2c04 	str.w	r2, [r3, #-4]
    while(len > 32) {
 8022542:	3320      	adds	r3, #32
 8022544:	4563      	cmp	r3, ip
 8022546:	d1ec      	bne.n	8022522 <lv_memset_ff+0x2a>
        REPEAT8(SET32(0xFFFFFFFF));
 8022548:	f10e 0301 	add.w	r3, lr, #1
 802254c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8022550:	3920      	subs	r1, #32
        len -= 32;
 8022552:	ebce 6ece 	rsb	lr, lr, lr, lsl #27
 8022556:	eb01 114e 	add.w	r1, r1, lr, lsl #5
    }

    while(len > 4) {
 802255a:	2904      	cmp	r1, #4
 802255c:	d932      	bls.n	80225c4 <lv_memset_ff+0xcc>
 802255e:	f1a1 0c05 	sub.w	ip, r1, #5
 8022562:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8022566:	f10c 0001 	add.w	r0, ip, #1
 802256a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        SET32(0xFFFFFFFF);
 802256e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022572:	f843 2b04 	str.w	r2, [r3], #4
    while(len > 4) {
 8022576:	4283      	cmp	r3, r0
 8022578:	d1fb      	bne.n	8022572 <lv_memset_ff+0x7a>
 802257a:	3904      	subs	r1, #4
        len -= 4;
 802257c:	ebcc 7c8c 	rsb	ip, ip, ip, lsl #30
 8022580:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    }

    d8 = (uint8_t *)d32;
    while(len) {
 8022584:	b129      	cbz	r1, 8022592 <lv_memset_ff+0x9a>
 8022586:	4401      	add	r1, r0
        SET8(0xFF);
 8022588:	23ff      	movs	r3, #255	; 0xff
 802258a:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 802258e:	4288      	cmp	r0, r1
 8022590:	d1fb      	bne.n	802258a <lv_memset_ff+0x92>
        len--;
    }
}
 8022592:	f85d fb04 	ldr.w	pc, [sp], #4
            SET8(0xFF);
 8022596:	4618      	mov	r0, r3
 8022598:	e7b1      	b.n	80224fe <lv_memset_ff+0x6>
        d_align = ALIGN_MASK + 1 - d_align;
 802259a:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 802259e:	b141      	cbz	r1, 80225b2 <lv_memset_ff+0xba>
 80225a0:	4403      	add	r3, r0
            SET8(0xFF);
 80225a2:	22ff      	movs	r2, #255	; 0xff
 80225a4:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 80225a8:	3901      	subs	r1, #1
        while(d_align && len) {
 80225aa:	4298      	cmp	r0, r3
 80225ac:	d0f3      	beq.n	8022596 <lv_memset_ff+0x9e>
 80225ae:	2900      	cmp	r1, #0
 80225b0:	d1f8      	bne.n	80225a4 <lv_memset_ff+0xac>
    while(len > 32) {
 80225b2:	2100      	movs	r1, #0
    while(len) {
 80225b4:	b129      	cbz	r1, 80225c2 <lv_memset_ff+0xca>
 80225b6:	4401      	add	r1, r0
        SET8(0xFF);
 80225b8:	23ff      	movs	r3, #255	; 0xff
 80225ba:	f800 3b01 	strb.w	r3, [r0], #1
    while(len) {
 80225be:	4288      	cmp	r0, r1
 80225c0:	d1fb      	bne.n	80225ba <lv_memset_ff+0xc2>
 80225c2:	4770      	bx	lr
    while(len > 4) {
 80225c4:	4618      	mov	r0, r3
 80225c6:	e7dd      	b.n	8022584 <lv_memset_ff+0x8c>

080225c8 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 80225c8:	429a      	cmp	r2, r3
        ((char *)buffer)[idx] = character;
 80225ca:	bf38      	it	cc
 80225cc:	5488      	strbcc	r0, [r1, r2]
    }
}
 80225ce:	4770      	bx	lr

080225d0 <_out_null>:
{
    LV_UNUSED(character);
    LV_UNUSED(buffer);
    LV_UNUSED(idx);
    LV_UNUSED(maxlen);
}
 80225d0:	4770      	bx	lr

080225d2 <_ntoa_format>:
}

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80225d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225d6:	b083      	sub	sp, #12
 80225d8:	4607      	mov	r7, r0
 80225da:	4688      	mov	r8, r1
 80225dc:	9200      	str	r2, [sp, #0]
 80225de:	4699      	mov	r9, r3
 80225e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80225e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80225e6:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80225ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80225ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 80225ee:	f012 0302 	ands.w	r3, r2, #2
 80225f2:	9301      	str	r3, [sp, #4]
 80225f4:	d172      	bne.n	80226dc <_ntoa_format+0x10a>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80225f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80225f8:	b17b      	cbz	r3, 802261a <_ntoa_format+0x48>
 80225fa:	f012 0f01 	tst.w	r2, #1
 80225fe:	f000 80c6 	beq.w	802278e <_ntoa_format+0x1bc>
 8022602:	b910      	cbnz	r0, 802260a <_ntoa_format+0x38>
 8022604:	f012 0f0c 	tst.w	r2, #12
 8022608:	d002      	beq.n	8022610 <_ntoa_format+0x3e>
            width--;
 802260a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802260c:	3b01      	subs	r3, #1
 802260e:	9311      	str	r3, [sp, #68]	; 0x44
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8022610:	428c      	cmp	r4, r1
 8022612:	d213      	bcs.n	802263c <_ntoa_format+0x6a>
 8022614:	2c1f      	cmp	r4, #31
 8022616:	d904      	bls.n	8022622 <_ntoa_format+0x50>
 8022618:	e010      	b.n	802263c <_ntoa_format+0x6a>
 802261a:	428c      	cmp	r4, r1
 802261c:	d20b      	bcs.n	8022636 <_ntoa_format+0x64>
 802261e:	2c1f      	cmp	r4, #31
 8022620:	d809      	bhi.n	8022636 <_ntoa_format+0x64>
 8022622:	1e63      	subs	r3, r4, #1
 8022624:	4453      	add	r3, sl
            buf[len++] = '0';
 8022626:	2530      	movs	r5, #48	; 0x30
 8022628:	3401      	adds	r4, #1
 802262a:	f803 5f01 	strb.w	r5, [r3, #1]!
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 802262e:	42a1      	cmp	r1, r4
 8022630:	d901      	bls.n	8022636 <_ntoa_format+0x64>
 8022632:	2c20      	cmp	r4, #32
 8022634:	d1f8      	bne.n	8022628 <_ntoa_format+0x56>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8022636:	f012 0f01 	tst.w	r2, #1
 802263a:	d04f      	beq.n	80226dc <_ntoa_format+0x10a>
 802263c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802263e:	42a3      	cmp	r3, r4
 8022640:	d94c      	bls.n	80226dc <_ntoa_format+0x10a>
 8022642:	2c1f      	cmp	r4, #31
 8022644:	d80a      	bhi.n	802265c <_ntoa_format+0x8a>
 8022646:	1e63      	subs	r3, r4, #1
 8022648:	4453      	add	r3, sl
            buf[len++] = '0';
 802264a:	2530      	movs	r5, #48	; 0x30
 802264c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802264e:	3401      	adds	r4, #1
 8022650:	f803 5f01 	strb.w	r5, [r3, #1]!
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8022654:	42b4      	cmp	r4, r6
 8022656:	d040      	beq.n	80226da <_ntoa_format+0x108>
 8022658:	2c20      	cmp	r4, #32
 802265a:	d1f8      	bne.n	802264e <_ntoa_format+0x7c>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 802265c:	f012 0f10 	tst.w	r2, #16
 8022660:	d13f      	bne.n	80226e2 <_ntoa_format+0x110>
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8022662:	f012 0f03 	tst.w	r2, #3
 8022666:	f040 808d 	bne.w	8022784 <_ntoa_format+0x1b2>
        for(i = len; i < width; i++) {
 802266a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802266c:	429c      	cmp	r4, r3
 802266e:	f080 8086 	bcs.w	802277e <_ntoa_format+0x1ac>
 8022672:	9d00      	ldr	r5, [sp, #0]
 8022674:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022676:	eb05 0b03 	add.w	fp, r5, r3
 802267a:	ebab 0b04 	sub.w	fp, fp, r4
            out(' ', buffer, idx++, maxlen);
 802267e:	2620      	movs	r6, #32
 8022680:	462a      	mov	r2, r5
 8022682:	3501      	adds	r5, #1
 8022684:	464b      	mov	r3, r9
 8022686:	4641      	mov	r1, r8
 8022688:	4630      	mov	r0, r6
 802268a:	47b8      	blx	r7
        for(i = len; i < width; i++) {
 802268c:	455d      	cmp	r5, fp
 802268e:	d1f7      	bne.n	8022680 <_ntoa_format+0xae>
    while(len) {
 8022690:	2c00      	cmp	r4, #0
 8022692:	d07a      	beq.n	802278a <_ntoa_format+0x1b8>
 8022694:	44a2      	add	sl, r4
        for(i = len; i < width; i++) {
 8022696:	4625      	mov	r5, r4
 8022698:	eb04 060b 	add.w	r6, r4, fp
 802269c:	1b72      	subs	r2, r6, r5
        out(buf[--len], buffer, idx++, maxlen);
 802269e:	3d01      	subs	r5, #1
 80226a0:	464b      	mov	r3, r9
 80226a2:	4641      	mov	r1, r8
 80226a4:	f81a 0d01 	ldrb.w	r0, [sl, #-1]!
 80226a8:	47b8      	blx	r7
    while(len) {
 80226aa:	2d00      	cmp	r5, #0
 80226ac:	d1f4      	bne.n	8022698 <_ntoa_format+0xc6>
    if(flags & FLAGS_LEFT) {
 80226ae:	9b01      	ldr	r3, [sp, #4]
 80226b0:	b17b      	cbz	r3, 80226d2 <_ntoa_format+0x100>
        while(idx - start_idx < width) {
 80226b2:	9b00      	ldr	r3, [sp, #0]
 80226b4:	1af4      	subs	r4, r6, r3
 80226b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226b8:	429c      	cmp	r4, r3
 80226ba:	d20a      	bcs.n	80226d2 <_ntoa_format+0x100>
            out(' ', buffer, idx++, maxlen);
 80226bc:	2520      	movs	r5, #32
 80226be:	469a      	mov	sl, r3
 80226c0:	4632      	mov	r2, r6
 80226c2:	464b      	mov	r3, r9
 80226c4:	3601      	adds	r6, #1
 80226c6:	4641      	mov	r1, r8
 80226c8:	4628      	mov	r0, r5
 80226ca:	47b8      	blx	r7
        while(idx - start_idx < width) {
 80226cc:	3401      	adds	r4, #1
 80226ce:	4554      	cmp	r4, sl
 80226d0:	d3f6      	bcc.n	80226c0 <_ntoa_format+0xee>
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 80226d2:	4630      	mov	r0, r6
 80226d4:	b003      	add	sp, #12
 80226d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buf[len++] = '0';
 80226da:	9c11      	ldr	r4, [sp, #68]	; 0x44
    if(flags & FLAGS_HASH) {
 80226dc:	f012 0f10 	tst.w	r2, #16
 80226e0:	d014      	beq.n	802270c <_ntoa_format+0x13a>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80226e2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80226e6:	d105      	bne.n	80226f4 <_ntoa_format+0x122>
 80226e8:	b124      	cbz	r4, 80226f4 <_ntoa_format+0x122>
 80226ea:	42a1      	cmp	r1, r4
 80226ec:	d01b      	beq.n	8022726 <_ntoa_format+0x154>
 80226ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80226f0:	429c      	cmp	r4, r3
 80226f2:	d018      	beq.n	8022726 <_ntoa_format+0x154>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80226f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80226f6:	2b10      	cmp	r3, #16
 80226f8:	d01d      	beq.n	8022736 <_ntoa_format+0x164>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80226fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80226fc:	2b02      	cmp	r3, #2
 80226fe:	d026      	beq.n	802274e <_ntoa_format+0x17c>
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 8022700:	2c1f      	cmp	r4, #31
 8022702:	d8ae      	bhi.n	8022662 <_ntoa_format+0x90>
            buf[len++] = '0';
 8022704:	2330      	movs	r3, #48	; 0x30
 8022706:	f80a 3004 	strb.w	r3, [sl, r4]
 802270a:	3401      	adds	r4, #1
    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 802270c:	2c1f      	cmp	r4, #31
 802270e:	d8a8      	bhi.n	8022662 <_ntoa_format+0x90>
        if(negative) {
 8022710:	b320      	cbz	r0, 802275c <_ntoa_format+0x18a>
            buf[len++] = '-';
 8022712:	232d      	movs	r3, #45	; 0x2d
 8022714:	f80a 3004 	strb.w	r3, [sl, r4]
 8022718:	3401      	adds	r4, #1
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 802271a:	f012 0f03 	tst.w	r2, #3
 802271e:	d03c      	beq.n	802279a <_ntoa_format+0x1c8>
 8022720:	f8dd b000 	ldr.w	fp, [sp]
 8022724:	e7b6      	b.n	8022694 <_ntoa_format+0xc2>
            if(len && (base == 16U)) {
 8022726:	1e63      	subs	r3, r4, #1
 8022728:	d00f      	beq.n	802274a <_ntoa_format+0x178>
 802272a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802272c:	2910      	cmp	r1, #16
 802272e:	d001      	beq.n	8022734 <_ntoa_format+0x162>
            len--;
 8022730:	461c      	mov	r4, r3
 8022732:	e7e2      	b.n	80226fa <_ntoa_format+0x128>
                len--;
 8022734:	3c02      	subs	r4, #2
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8022736:	f012 0f20 	tst.w	r2, #32
 802273a:	d135      	bne.n	80227a8 <_ntoa_format+0x1d6>
 802273c:	2c1f      	cmp	r4, #31
 802273e:	d8df      	bhi.n	8022700 <_ntoa_format+0x12e>
            buf[len++] = 'x';
 8022740:	2378      	movs	r3, #120	; 0x78
 8022742:	f80a 3004 	strb.w	r3, [sl, r4]
 8022746:	3401      	adds	r4, #1
 8022748:	e7da      	b.n	8022700 <_ntoa_format+0x12e>
            len--;
 802274a:	461c      	mov	r4, r3
 802274c:	e7d2      	b.n	80226f4 <_ntoa_format+0x122>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 802274e:	2c1f      	cmp	r4, #31
 8022750:	d887      	bhi.n	8022662 <_ntoa_format+0x90>
            buf[len++] = 'b';
 8022752:	2362      	movs	r3, #98	; 0x62
 8022754:	f80a 3004 	strb.w	r3, [sl, r4]
 8022758:	3401      	adds	r4, #1
 802275a:	e7d1      	b.n	8022700 <_ntoa_format+0x12e>
        else if(flags & FLAGS_PLUS) {
 802275c:	f012 0f04 	tst.w	r2, #4
 8022760:	d004      	beq.n	802276c <_ntoa_format+0x19a>
            buf[len++] = '+';  // ignore the space if the '+' exists
 8022762:	232b      	movs	r3, #43	; 0x2b
 8022764:	f80a 3004 	strb.w	r3, [sl, r4]
 8022768:	3401      	adds	r4, #1
 802276a:	e7d6      	b.n	802271a <_ntoa_format+0x148>
        else if(flags & FLAGS_SPACE) {
 802276c:	f012 0f08 	tst.w	r2, #8
 8022770:	f43f af77 	beq.w	8022662 <_ntoa_format+0x90>
            buf[len++] = ' ';
 8022774:	2320      	movs	r3, #32
 8022776:	f80a 3004 	strb.w	r3, [sl, r4]
 802277a:	3401      	adds	r4, #1
 802277c:	e7cd      	b.n	802271a <_ntoa_format+0x148>
        for(i = len; i < width; i++) {
 802277e:	f8dd b000 	ldr.w	fp, [sp]
 8022782:	e785      	b.n	8022690 <_ntoa_format+0xbe>
 8022784:	f8dd b000 	ldr.w	fp, [sp]
 8022788:	e782      	b.n	8022690 <_ntoa_format+0xbe>
    while(len) {
 802278a:	465e      	mov	r6, fp
 802278c:	e78f      	b.n	80226ae <_ntoa_format+0xdc>
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 802278e:	428c      	cmp	r4, r1
 8022790:	d2a4      	bcs.n	80226dc <_ntoa_format+0x10a>
 8022792:	2c1f      	cmp	r4, #31
 8022794:	f67f af45 	bls.w	8022622 <_ntoa_format+0x50>
 8022798:	e7a0      	b.n	80226dc <_ntoa_format+0x10a>
        for(i = len; i < width; i++) {
 802279a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802279c:	429c      	cmp	r4, r3
 802279e:	f4ff af68 	bcc.w	8022672 <_ntoa_format+0xa0>
 80227a2:	f8dd b000 	ldr.w	fp, [sp]
 80227a6:	e775      	b.n	8022694 <_ntoa_format+0xc2>
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80227a8:	2c1f      	cmp	r4, #31
 80227aa:	f63f af5a 	bhi.w	8022662 <_ntoa_format+0x90>
            buf[len++] = 'X';
 80227ae:	2358      	movs	r3, #88	; 0x58
 80227b0:	f80a 3004 	strb.w	r3, [sl, r4]
 80227b4:	3401      	adds	r4, #1
 80227b6:	e7a3      	b.n	8022700 <_ntoa_format+0x12e>

080227b8 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80227b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227bc:	b090      	sub	sp, #64	; 0x40
 80227be:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80227c0:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80227c2:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 80227c6:	b92c      	cbnz	r4, 80227d4 <_ntoa_long+0x1c>
        flags &= ~FLAGS_HASH;
 80227c8:	f028 0610 	bic.w	r6, r8, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 80227cc:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80227d0:	d134      	bne.n	802283c <_ntoa_long+0x84>
        flags &= ~FLAGS_HASH;
 80227d2:	46b0      	mov	r8, r6
 80227d4:	f018 0f20 	tst.w	r8, #32
 80227d8:	bf14      	ite	ne
 80227da:	2741      	movne	r7, #65	; 0x41
 80227dc:	2761      	moveq	r7, #97	; 0x61
 80227de:	f10d 0e20 	add.w	lr, sp, #32
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80227e2:	2600      	movs	r6, #0
 80227e4:	3f0a      	subs	r7, #10
 80227e6:	e000      	b.n	80227ea <_ntoa_long+0x32>
            value /= base;
 80227e8:	4664      	mov	r4, ip
            const char digit = (char)(value % base);
 80227ea:	fbb4 fcf5 	udiv	ip, r4, r5
 80227ee:	fb05 4c1c 	mls	ip, r5, ip, r4
 80227f2:	fa5f fc8c 	uxtb.w	ip, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80227f6:	f1bc 0f09 	cmp.w	ip, #9
 80227fa:	bf94      	ite	ls
 80227fc:	f10c 0c30 	addls.w	ip, ip, #48	; 0x30
 8022800:	44bc      	addhi	ip, r7
 8022802:	fa5f fc8c 	uxtb.w	ip, ip
 8022806:	3601      	adds	r6, #1
 8022808:	f80e cb01 	strb.w	ip, [lr], #1
            value /= base;
 802280c:	fbb4 fcf5 	udiv	ip, r4, r5
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8022810:	42ac      	cmp	r4, r5
 8022812:	d301      	bcc.n	8022818 <_ntoa_long+0x60>
 8022814:	2e20      	cmp	r6, #32
 8022816:	d1e7      	bne.n	80227e8 <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8022818:	f8cd 8018 	str.w	r8, [sp, #24]
 802281c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 802281e:	9405      	str	r4, [sp, #20]
 8022820:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8022822:	9404      	str	r4, [sp, #16]
 8022824:	9503      	str	r5, [sp, #12]
 8022826:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 802282a:	9402      	str	r4, [sp, #8]
 802282c:	9601      	str	r6, [sp, #4]
 802282e:	ac08      	add	r4, sp, #32
 8022830:	9400      	str	r4, [sp, #0]
 8022832:	f7ff fece 	bl	80225d2 <_ntoa_format>
}
 8022836:	b010      	add	sp, #64	; 0x40
 8022838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        flags &= ~FLAGS_HASH;
 802283c:	46b0      	mov	r8, r6
    size_t len = 0U;
 802283e:	4626      	mov	r6, r4
 8022840:	e7ea      	b.n	8022818 <_ntoa_long+0x60>

08022842 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8022842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022846:	b095      	sub	sp, #84	; 0x54
 8022848:	9008      	str	r0, [sp, #32]
 802284a:	9109      	str	r1, [sp, #36]	; 0x24
 802284c:	920a      	str	r2, [sp, #40]	; 0x28
 802284e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022850:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8022852:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8022854:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8022856:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 802285a:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 802285e:	ea54 0305 	orrs.w	r3, r4, r5
 8022862:	d105      	bne.n	8022870 <_ntoa_long_long+0x2e>
        flags &= ~FLAGS_HASH;
 8022864:	f02b 0310 	bic.w	r3, fp, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 8022868:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 802286c:	d140      	bne.n	80228f0 <_ntoa_long_long+0xae>
        flags &= ~FLAGS_HASH;
 802286e:	469b      	mov	fp, r3
 8022870:	f01b 0f20 	tst.w	fp, #32
 8022874:	bf14      	ite	ne
 8022876:	f04f 0a41 	movne.w	sl, #65	; 0x41
 802287a:	f04f 0a61 	moveq.w	sl, #97	; 0x61
 802287e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8022882:	2700      	movs	r7, #0
 8022884:	f1aa 0a0a 	sub.w	sl, sl, #10
 8022888:	e001      	b.n	802288e <_ntoa_long_long+0x4c>
            value /= base;
 802288a:	4604      	mov	r4, r0
 802288c:	460d      	mov	r5, r1
            const char digit = (char)(value % base);
 802288e:	4632      	mov	r2, r6
 8022890:	4643      	mov	r3, r8
 8022892:	4620      	mov	r0, r4
 8022894:	4629      	mov	r1, r5
 8022896:	f7dd febf 	bl	8000618 <__aeabi_uldivmod>
 802289a:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 802289c:	2a09      	cmp	r2, #9
 802289e:	bf94      	ite	ls
 80228a0:	3230      	addls	r2, #48	; 0x30
 80228a2:	4452      	addhi	r2, sl
 80228a4:	b2d2      	uxtb	r2, r2
 80228a6:	3701      	adds	r7, #1
 80228a8:	f809 2b01 	strb.w	r2, [r9], #1
            value /= base;
 80228ac:	4632      	mov	r2, r6
 80228ae:	4643      	mov	r3, r8
 80228b0:	4620      	mov	r0, r4
 80228b2:	4629      	mov	r1, r5
 80228b4:	f7dd feb0 	bl	8000618 <__aeabi_uldivmod>
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80228b8:	42b4      	cmp	r4, r6
 80228ba:	eb75 0308 	sbcs.w	r3, r5, r8
 80228be:	d301      	bcc.n	80228c4 <_ntoa_long_long+0x82>
 80228c0:	2f20      	cmp	r7, #32
 80228c2:	d1e2      	bne.n	802288a <_ntoa_long_long+0x48>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80228c4:	f8cd b018 	str.w	fp, [sp, #24]
 80228c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80228ca:	9305      	str	r3, [sp, #20]
 80228cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228ce:	9304      	str	r3, [sp, #16]
 80228d0:	9603      	str	r6, [sp, #12]
 80228d2:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 80228d6:	9302      	str	r3, [sp, #8]
 80228d8:	9701      	str	r7, [sp, #4]
 80228da:	ab0c      	add	r3, sp, #48	; 0x30
 80228dc:	9300      	str	r3, [sp, #0]
 80228de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80228e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80228e4:	9808      	ldr	r0, [sp, #32]
 80228e6:	f7ff fe74 	bl	80225d2 <_ntoa_format>
}
 80228ea:	b015      	add	sp, #84	; 0x54
 80228ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        flags &= ~FLAGS_HASH;
 80228f0:	469b      	mov	fp, r3
    size_t len = 0U;
 80228f2:	2700      	movs	r7, #0
 80228f4:	e7e6      	b.n	80228c4 <_ntoa_long_long+0x82>
	...

080228f8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
 80228f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228fc:	b093      	sub	sp, #76	; 0x4c
 80228fe:	4690      	mov	r8, r2
 8022900:	461c      	mov	r4, r3
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
        // use null output function
        out = _out_null;
 8022902:	f1b1 0a00 	subs.w	sl, r1, #0
 8022906:	4b8a      	ldr	r3, [pc, #552]	; (8022b30 <_vsnprintf+0x238>)
 8022908:	bf14      	ite	ne
 802290a:	4681      	movne	r9, r0
 802290c:	4699      	moveq	r9, r3
    }

    while(*format) {
 802290e:	7820      	ldrb	r0, [r4, #0]
 8022910:	2800      	cmp	r0, #0
 8022912:	f000 8291 	beq.w	8022e38 <_vsnprintf+0x540>
 8022916:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8022918:	f04f 0b00 	mov.w	fp, #0
 802291c:	e25b      	b.n	8022dd6 <_vsnprintf+0x4de>
            format++;
            continue;
        }
        else {
            // yes, evaluate it
            format++;
 802291e:	1c62      	adds	r2, r4, #1
        }

        // evaluate flags
        flags = 0U;
 8022920:	f04f 0c00 	mov.w	ip, #0
 8022924:	4614      	mov	r4, r2
        do {
            switch(*format) {
 8022926:	f812 3b01 	ldrb.w	r3, [r2], #1
 802292a:	f1a3 0120 	sub.w	r1, r3, #32
 802292e:	2910      	cmp	r1, #16
 8022930:	d80a      	bhi.n	8022948 <_vsnprintf+0x50>
 8022932:	e8df f001 	tbb	[pc, r1]
 8022936:	092e      	.short	0x092e
 8022938:	09093109 	.word	0x09093109
 802293c:	09090909 	.word	0x09090909
 8022940:	28092b09 	.word	0x28092b09
 8022944:	0909      	.short	0x0909
 8022946:	25          	.byte	0x25
 8022947:	00          	.byte	0x00
    return (ch >= '0') && (ch <= '9');
 8022948:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            }
        } while(n);

        // evaluate width field
        width = 0U;
        if(_is_digit(*format)) {
 802294c:	b2d2      	uxtb	r2, r2
 802294e:	2a09      	cmp	r2, #9
 8022950:	d925      	bls.n	802299e <_vsnprintf+0xa6>
            width = _atoi(&format);
        }
        else if(*format == '*') {
 8022952:	2b2a      	cmp	r3, #42	; 0x2a
 8022954:	d031      	beq.n	80229ba <_vsnprintf+0xc2>
        width = 0U;
 8022956:	2500      	movs	r5, #0
            format++;
        }

        // evaluate precision field
        precision = 0U;
        if(*format == '.') {
 8022958:	7823      	ldrb	r3, [r4, #0]
 802295a:	2b2e      	cmp	r3, #46	; 0x2e
 802295c:	d036      	beq.n	80229cc <_vsnprintf+0xd4>
        precision = 0U;
 802295e:	2600      	movs	r6, #0
                format++;
            }
        }

        // evaluate length field
        switch(*format) {
 8022960:	7823      	ldrb	r3, [r4, #0]
 8022962:	3b68      	subs	r3, #104	; 0x68
 8022964:	2b12      	cmp	r3, #18
 8022966:	d85d      	bhi.n	8022a24 <_vsnprintf+0x12c>
 8022968:	e8df f003 	tbb	[pc, r3]
 802296c:	5cc65cb8 	.word	0x5cc65cb8
 8022970:	5c5c5c53 	.word	0x5c5c5c53
 8022974:	5c5c5c5c 	.word	0x5c5c5c5c
 8022978:	5c5c5cc2 	.word	0x5c5c5cc2
 802297c:	5c5c      	.short	0x5c5c
 802297e:	ca          	.byte	0xca
 802297f:	00          	.byte	0x00
                    flags |= FLAGS_ZEROPAD;
 8022980:	f04c 0c01 	orr.w	ip, ip, #1
        } while(n);
 8022984:	e7ce      	b.n	8022924 <_vsnprintf+0x2c>
                    flags |= FLAGS_LEFT;
 8022986:	f04c 0c02 	orr.w	ip, ip, #2
        } while(n);
 802298a:	e7cb      	b.n	8022924 <_vsnprintf+0x2c>
                    flags |= FLAGS_PLUS;
 802298c:	f04c 0c04 	orr.w	ip, ip, #4
        } while(n);
 8022990:	e7c8      	b.n	8022924 <_vsnprintf+0x2c>
                    flags |= FLAGS_SPACE;
 8022992:	f04c 0c08 	orr.w	ip, ip, #8
        } while(n);
 8022996:	e7c5      	b.n	8022924 <_vsnprintf+0x2c>
                    flags |= FLAGS_HASH;
 8022998:	f04c 0c10 	orr.w	ip, ip, #16
        } while(n);
 802299c:	e7c2      	b.n	8022924 <_vsnprintf+0x2c>
    unsigned int i = 0U;
 802299e:	2500      	movs	r5, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80229a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80229a4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80229a8:	3d30      	subs	r5, #48	; 0x30
    while(_is_digit(**str)) {
 80229aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    return (ch >= '0') && (ch <= '9');
 80229ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
 80229b2:	b2d2      	uxtb	r2, r2
 80229b4:	2a09      	cmp	r2, #9
 80229b6:	d9f3      	bls.n	80229a0 <_vsnprintf+0xa8>
 80229b8:	e7ce      	b.n	8022958 <_vsnprintf+0x60>
            const int w = va_arg(va, int);
 80229ba:	f857 5b04 	ldr.w	r5, [r7], #4
            if(w < 0) {
 80229be:	2d00      	cmp	r5, #0
                flags |= FLAGS_LEFT;    // reverse padding
 80229c0:	bfbc      	itt	lt
 80229c2:	f04c 0c02 	orrlt.w	ip, ip, #2
                width = (unsigned int) - w;
 80229c6:	426d      	neglt	r5, r5
            format++;
 80229c8:	3401      	adds	r4, #1
 80229ca:	e7c5      	b.n	8022958 <_vsnprintf+0x60>
            flags |= FLAGS_PRECISION;
 80229cc:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
            format++;
 80229d0:	1c61      	adds	r1, r4, #1
            if(_is_digit(*format)) {
 80229d2:	7863      	ldrb	r3, [r4, #1]
    return (ch >= '0') && (ch <= '9');
 80229d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
            if(_is_digit(*format)) {
 80229d8:	b2d2      	uxtb	r2, r2
 80229da:	2a09      	cmp	r2, #9
 80229dc:	d904      	bls.n	80229e8 <_vsnprintf+0xf0>
            else if(*format == '*') {
 80229de:	2b2a      	cmp	r3, #42	; 0x2a
 80229e0:	d011      	beq.n	8022a06 <_vsnprintf+0x10e>
            format++;
 80229e2:	460c      	mov	r4, r1
        precision = 0U;
 80229e4:	2600      	movs	r6, #0
 80229e6:	e7bb      	b.n	8022960 <_vsnprintf+0x68>
    unsigned int i = 0U;
 80229e8:	2600      	movs	r6, #0
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80229ea:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80229ee:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 80229f2:	3e30      	subs	r6, #48	; 0x30
    while(_is_digit(**str)) {
 80229f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    return (ch >= '0') && (ch <= '9');
 80229f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    while(_is_digit(**str)) {
 80229fc:	b2d2      	uxtb	r2, r2
 80229fe:	2a09      	cmp	r2, #9
 8022a00:	d9f3      	bls.n	80229ea <_vsnprintf+0xf2>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8022a02:	460c      	mov	r4, r1
 8022a04:	e7ac      	b.n	8022960 <_vsnprintf+0x68>
                precision = prec > 0 ? (unsigned int)prec : 0U;
 8022a06:	f857 6b04 	ldr.w	r6, [r7], #4
 8022a0a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
                format++;
 8022a0e:	3402      	adds	r4, #2
 8022a10:	e7a6      	b.n	8022960 <_vsnprintf+0x68>
            case 'l' :
                flags |= FLAGS_LONG;
                format++;
                if(*format == 'l') {
 8022a12:	7863      	ldrb	r3, [r4, #1]
 8022a14:	2b6c      	cmp	r3, #108	; 0x6c
                flags |= FLAGS_LONG;
 8022a16:	bf19      	ittee	ne
 8022a18:	f44c 7c80 	orrne.w	ip, ip, #256	; 0x100
                format++;
 8022a1c:	3401      	addne	r4, #1
                    flags |= FLAGS_LONG_LONG;
 8022a1e:	f44c 7c40 	orreq.w	ip, ip, #768	; 0x300
                    format++;
 8022a22:	3402      	addeq	r4, #2
            default :
                break;
        }

        // evaluate specifier
        switch(*format) {
 8022a24:	7820      	ldrb	r0, [r4, #0]
 8022a26:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8022a2a:	2b53      	cmp	r3, #83	; 0x53
 8022a2c:	f200 81fb 	bhi.w	8022e26 <_vsnprintf+0x52e>
 8022a30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8022a34:	01f901ef 	.word	0x01f901ef
 8022a38:	01f901f9 	.word	0x01f901f9
 8022a3c:	01f901f9 	.word	0x01f901f9
 8022a40:	01f901f9 	.word	0x01f901f9
 8022a44:	01f901f9 	.word	0x01f901f9
 8022a48:	01f901f9 	.word	0x01f901f9
 8022a4c:	01f901f9 	.word	0x01f901f9
 8022a50:	01f901f9 	.word	0x01f901f9
 8022a54:	01f901f9 	.word	0x01f901f9
 8022a58:	01f901f9 	.word	0x01f901f9
 8022a5c:	01f901f9 	.word	0x01f901f9
 8022a60:	01f901f9 	.word	0x01f901f9
 8022a64:	01f901f9 	.word	0x01f901f9
 8022a68:	01f901f9 	.word	0x01f901f9
 8022a6c:	01f901f9 	.word	0x01f901f9
 8022a70:	01f901f9 	.word	0x01f901f9
 8022a74:	01f901f9 	.word	0x01f901f9
 8022a78:	01f901f9 	.word	0x01f901f9
 8022a7c:	01f901f9 	.word	0x01f901f9
 8022a80:	01f901f9 	.word	0x01f901f9
 8022a84:	01f901f9 	.word	0x01f901f9
 8022a88:	006a01f9 	.word	0x006a01f9
 8022a8c:	01f901f9 	.word	0x01f901f9
 8022a90:	01f901f9 	.word	0x01f901f9
 8022a94:	01f901f9 	.word	0x01f901f9
 8022a98:	006a01f9 	.word	0x006a01f9
 8022a9c:	01f901f9 	.word	0x01f901f9
 8022aa0:	01f901f9 	.word	0x01f901f9
 8022aa4:	01f901f9 	.word	0x01f901f9
 8022aa8:	01f901f9 	.word	0x01f901f9
 8022aac:	006a01f9 	.word	0x006a01f9
 8022ab0:	006a0139 	.word	0x006a0139
 8022ab4:	01f901f9 	.word	0x01f901f9
 8022ab8:	01f901f9 	.word	0x01f901f9
 8022abc:	01f9006a 	.word	0x01f9006a
 8022ac0:	01f901f9 	.word	0x01f901f9
 8022ac4:	01f901f9 	.word	0x01f901f9
 8022ac8:	006a006a 	.word	0x006a006a
 8022acc:	01f901f9 	.word	0x01f901f9
 8022ad0:	01f90172 	.word	0x01f90172
 8022ad4:	01f9006a 	.word	0x01f9006a
 8022ad8:	006a01f9 	.word	0x006a01f9
                if(*format == 'h') {
 8022adc:	7863      	ldrb	r3, [r4, #1]
 8022ade:	2b68      	cmp	r3, #104	; 0x68
                flags |= FLAGS_SHORT;
 8022ae0:	bf19      	ittee	ne
 8022ae2:	f04c 0c80 	orrne.w	ip, ip, #128	; 0x80
                format++;
 8022ae6:	3401      	addne	r4, #1
                    flags |= FLAGS_CHAR;
 8022ae8:	f04c 0cc0 	orreq.w	ip, ip, #192	; 0xc0
                    format++;
 8022aec:	3402      	addeq	r4, #2
 8022aee:	e799      	b.n	8022a24 <_vsnprintf+0x12c>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8022af0:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
                format++;
 8022af4:	3401      	adds	r4, #1
                break;
 8022af6:	e795      	b.n	8022a24 <_vsnprintf+0x12c>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8022af8:	f44c 7c00 	orr.w	ip, ip, #512	; 0x200
                format++;
 8022afc:	3401      	adds	r4, #1
                break;
 8022afe:	e791      	b.n	8022a24 <_vsnprintf+0x12c>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8022b00:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
                format++;
 8022b04:	3401      	adds	r4, #1
                break;
 8022b06:	e78d      	b.n	8022a24 <_vsnprintf+0x12c>
            case 'P' :
            case 'o' :
            case 'b' : {
                    // set the base
                    unsigned int base;
                    if(*format == 'x' || *format == 'X') {
 8022b08:	2878      	cmp	r0, #120	; 0x78
 8022b0a:	f000 81a4 	beq.w	8022e56 <_vsnprintf+0x55e>
 8022b0e:	2858      	cmp	r0, #88	; 0x58
 8022b10:	d019      	beq.n	8022b46 <_vsnprintf+0x24e>
                        base = 16U;
                    }
                    else if(*format == 'p' || *format == 'P') {
 8022b12:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8022b16:	2b50      	cmp	r3, #80	; 0x50
 8022b18:	d00c      	beq.n	8022b34 <_vsnprintf+0x23c>
                            flags |= FLAGS_LONG;

                        if(*(format + 1) == 'V')
                            format++;
                    }
                    else if(*format == 'o') {
 8022b1a:	286f      	cmp	r0, #111	; 0x6f
 8022b1c:	f000 81c5 	beq.w	8022eaa <_vsnprintf+0x5b2>
                        base =  8U;
                    }
                    else if(*format == 'b') {
 8022b20:	2862      	cmp	r0, #98	; 0x62
 8022b22:	f000 81c4 	beq.w	8022eae <_vsnprintf+0x5b6>
                        base =  2U;
                    }
                    else {
                        base = 10U;
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 8022b26:	f02c 0c10 	bic.w	ip, ip, #16
                        base = 10U;
 8022b2a:	230a      	movs	r3, #10
 8022b2c:	e194      	b.n	8022e58 <_vsnprintf+0x560>
 8022b2e:	bf00      	nop
 8022b30:	080225d1 	.word	0x080225d1
                            flags |= FLAGS_LONG;
 8022b34:	f44c 7c88 	orr.w	ip, ip, #272	; 0x110
                        if(*(format + 1) == 'V')
 8022b38:	7863      	ldrb	r3, [r4, #1]
 8022b3a:	2b56      	cmp	r3, #86	; 0x56
 8022b3c:	d101      	bne.n	8022b42 <_vsnprintf+0x24a>
                            format++;
 8022b3e:	3401      	adds	r4, #1
                    }
                    // uppercase
                    if(*format == 'X' || *format == 'P') {
 8022b40:	4618      	mov	r0, r3
 8022b42:	2850      	cmp	r0, #80	; 0x50
 8022b44:	d128      	bne.n	8022b98 <_vsnprintf+0x2a0>
                        flags |= FLAGS_UPPERCASE;
 8022b46:	f04c 0c20 	orr.w	ip, ip, #32
 8022b4a:	2310      	movs	r3, #16
                    }

                    // no plus or space flag for u, x, X, o, b
                    if((*format != 'i') && (*format != 'd')) {
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8022b4c:	f02c 020c 	bic.w	r2, ip, #12
                    }

                    // ignore '0' flag when precision is given
                    if(flags & FLAGS_PRECISION) {
 8022b50:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 8022b54:	d001      	beq.n	8022b5a <_vsnprintf+0x262>
                        flags &= ~FLAGS_ZEROPAD;
 8022b56:	f02c 020d 	bic.w	r2, ip, #13
                                                                                                                                       int) : va_arg(va, int);
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
                                             width, flags);
                        }
                    }
                    else if(*format == 'V') {
 8022b5a:	2856      	cmp	r0, #86	; 0x56
 8022b5c:	d065      	beq.n	8022c2a <_vsnprintf+0x332>
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
                        va_end(copy);
                    }
                    else {
                        // unsigned
                        if(flags & FLAGS_LONG_LONG) {
 8022b5e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8022b62:	d172      	bne.n	8022c4a <_vsnprintf+0x352>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
#endif
                        }
                        else if(flags & FLAGS_LONG) {
 8022b64:	f412 7f80 	tst.w	r2, #256	; 0x100
 8022b68:	f040 8085 	bne.w	8022c76 <_vsnprintf+0x37e>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
                        }
                        else {
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8022b6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8022b70:	f000 8092 	beq.w	8022c98 <_vsnprintf+0x3a0>
 8022b74:	f857 1b04 	ldr.w	r1, [r7], #4
 8022b78:	b2c9      	uxtb	r1, r1
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8022b7a:	9205      	str	r2, [sp, #20]
 8022b7c:	9504      	str	r5, [sp, #16]
 8022b7e:	9603      	str	r6, [sp, #12]
 8022b80:	9302      	str	r3, [sp, #8]
 8022b82:	2300      	movs	r3, #0
 8022b84:	9301      	str	r3, [sp, #4]
 8022b86:	9100      	str	r1, [sp, #0]
 8022b88:	4643      	mov	r3, r8
 8022b8a:	465a      	mov	r2, fp
 8022b8c:	4651      	mov	r1, sl
 8022b8e:	4648      	mov	r0, r9
 8022b90:	f7ff fe12 	bl	80227b8 <_ntoa_long>
 8022b94:	4683      	mov	fp, r0
 8022b96:	e186      	b.n	8022ea6 <_vsnprintf+0x5ae>
 8022b98:	2310      	movs	r3, #16
 8022b9a:	e15d      	b.n	8022e58 <_vsnprintf+0x560>
                    if((*format != 'i') && (*format != 'd')) {
 8022b9c:	2864      	cmp	r0, #100	; 0x64
 8022b9e:	d1d5      	bne.n	8022b4c <_vsnprintf+0x254>
                    if(flags & FLAGS_PRECISION) {
 8022ba0:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 8022ba4:	f000 815e 	beq.w	8022e64 <_vsnprintf+0x56c>
                        flags &= ~FLAGS_ZEROPAD;
 8022ba8:	f02c 0c01 	bic.w	ip, ip, #1
                    if((*format == 'i') || (*format == 'd')) {
 8022bac:	e15a      	b.n	8022e64 <_vsnprintf+0x56c>
                            const long long value = va_arg(va, long long);
 8022bae:	1df9      	adds	r1, r7, #7
 8022bb0:	f021 0107 	bic.w	r1, r1, #7
 8022bb4:	460f      	mov	r7, r1
 8022bb6:	f857 2b08 	ldr.w	r2, [r7], #8
 8022bba:	6849      	ldr	r1, [r1, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 8022bbc:	f8cd c020 	str.w	ip, [sp, #32]
 8022bc0:	9507      	str	r5, [sp, #28]
 8022bc2:	9606      	str	r6, [sp, #24]
 8022bc4:	9304      	str	r3, [sp, #16]
 8022bc6:	2300      	movs	r3, #0
 8022bc8:	9305      	str	r3, [sp, #20]
 8022bca:	0fcb      	lsrs	r3, r1, #31
 8022bcc:	9302      	str	r3, [sp, #8]
 8022bce:	4613      	mov	r3, r2
 8022bd0:	460a      	mov	r2, r1
 8022bd2:	2900      	cmp	r1, #0
 8022bd4:	db09      	blt.n	8022bea <_vsnprintf+0x2f2>
 8022bd6:	9300      	str	r3, [sp, #0]
 8022bd8:	9201      	str	r2, [sp, #4]
 8022bda:	4643      	mov	r3, r8
 8022bdc:	465a      	mov	r2, fp
 8022bde:	4651      	mov	r1, sl
 8022be0:	4648      	mov	r0, r9
 8022be2:	f7ff fe2e 	bl	8022842 <_ntoa_long_long>
 8022be6:	4683      	mov	fp, r0
 8022be8:	e15d      	b.n	8022ea6 <_vsnprintf+0x5ae>
 8022bea:	425b      	negs	r3, r3
 8022bec:	eb61 0241 	sbc.w	r2, r1, r1, lsl #1
 8022bf0:	e7f1      	b.n	8022bd6 <_vsnprintf+0x2de>
                            const long value = va_arg(va, long);
 8022bf2:	f857 2b04 	ldr.w	r2, [r7], #4
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
 8022bf6:	f8cd c014 	str.w	ip, [sp, #20]
 8022bfa:	9504      	str	r5, [sp, #16]
 8022bfc:	9603      	str	r6, [sp, #12]
 8022bfe:	9302      	str	r3, [sp, #8]
 8022c00:	0fd3      	lsrs	r3, r2, #31
 8022c02:	9301      	str	r3, [sp, #4]
 8022c04:	2a00      	cmp	r2, #0
 8022c06:	bfb8      	it	lt
 8022c08:	4252      	neglt	r2, r2
 8022c0a:	9200      	str	r2, [sp, #0]
 8022c0c:	4643      	mov	r3, r8
 8022c0e:	465a      	mov	r2, fp
 8022c10:	4651      	mov	r1, sl
 8022c12:	4648      	mov	r0, r9
 8022c14:	f7ff fdd0 	bl	80227b8 <_ntoa_long>
 8022c18:	4683      	mov	fp, r0
 8022c1a:	e144      	b.n	8022ea6 <_vsnprintf+0x5ae>
                                                                                                                                       int) : va_arg(va, int);
 8022c1c:	f01c 0f80 	tst.w	ip, #128	; 0x80
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 8022c20:	f857 2b04 	ldr.w	r2, [r7], #4
                                                                                                                                       int) : va_arg(va, int);
 8022c24:	bf18      	it	ne
 8022c26:	b212      	sxthne	r2, r2
 8022c28:	e12b      	b.n	8022e82 <_vsnprintf+0x58a>
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 8022c2a:	f857 3b04 	ldr.w	r3, [r7], #4
                        va_copy(copy, *vaf->va);
 8022c2e:	685a      	ldr	r2, [r3, #4]
 8022c30:	6812      	ldr	r2, [r2, #0]
 8022c32:	9211      	str	r2, [sp, #68]	; 0x44
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	9200      	str	r2, [sp, #0]
 8022c38:	eba8 020b 	sub.w	r2, r8, fp
 8022c3c:	eb0a 010b 	add.w	r1, sl, fp
 8022c40:	4648      	mov	r0, r9
 8022c42:	f7ff fe59 	bl	80228f8 <_vsnprintf>
 8022c46:	4483      	add	fp, r0
                        va_end(copy);
 8022c48:	e12d      	b.n	8022ea6 <_vsnprintf+0x5ae>
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8022c4a:	3707      	adds	r7, #7
 8022c4c:	f027 0707 	bic.w	r7, r7, #7
 8022c50:	9208      	str	r2, [sp, #32]
 8022c52:	9507      	str	r5, [sp, #28]
 8022c54:	9606      	str	r6, [sp, #24]
 8022c56:	2200      	movs	r2, #0
 8022c58:	9304      	str	r3, [sp, #16]
 8022c5a:	9205      	str	r2, [sp, #20]
 8022c5c:	9202      	str	r2, [sp, #8]
 8022c5e:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8022c62:	e9cd 2300 	strd	r2, r3, [sp]
 8022c66:	4643      	mov	r3, r8
 8022c68:	465a      	mov	r2, fp
 8022c6a:	4651      	mov	r1, sl
 8022c6c:	4648      	mov	r0, r9
 8022c6e:	f7ff fde8 	bl	8022842 <_ntoa_long_long>
 8022c72:	4683      	mov	fp, r0
 8022c74:	e117      	b.n	8022ea6 <_vsnprintf+0x5ae>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8022c76:	9205      	str	r2, [sp, #20]
 8022c78:	9504      	str	r5, [sp, #16]
 8022c7a:	9603      	str	r6, [sp, #12]
 8022c7c:	9302      	str	r3, [sp, #8]
 8022c7e:	2300      	movs	r3, #0
 8022c80:	9301      	str	r3, [sp, #4]
 8022c82:	f857 3b04 	ldr.w	r3, [r7], #4
 8022c86:	9300      	str	r3, [sp, #0]
 8022c88:	4643      	mov	r3, r8
 8022c8a:	465a      	mov	r2, fp
 8022c8c:	4651      	mov	r1, sl
 8022c8e:	4648      	mov	r0, r9
 8022c90:	f7ff fd92 	bl	80227b8 <_ntoa_long>
 8022c94:	4683      	mov	fp, r0
 8022c96:	e106      	b.n	8022ea6 <_vsnprintf+0x5ae>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8022c98:	f012 0f80 	tst.w	r2, #128	; 0x80
 8022c9c:	f857 1b04 	ldr.w	r1, [r7], #4
 8022ca0:	bf18      	it	ne
 8022ca2:	b289      	uxthne	r1, r1
 8022ca4:	e769      	b.n	8022b7a <_vsnprintf+0x282>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
            case 'c' : {
                    unsigned int l = 1U;
                    // pre padding
                    if(!(flags & FLAGS_LEFT)) {
 8022ca6:	f01c 0f02 	tst.w	ip, #2
 8022caa:	d01b      	beq.n	8022ce4 <_vsnprintf+0x3ec>
                        while(l++ < width) {
                            out(' ', buffer, idx++, maxlen);
                        }
                    }
                    // char output
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8022cac:	463b      	mov	r3, r7
 8022cae:	f10b 0601 	add.w	r6, fp, #1
 8022cb2:	f853 0b04 	ldr.w	r0, [r3], #4
 8022cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cb8:	4643      	mov	r3, r8
 8022cba:	465a      	mov	r2, fp
 8022cbc:	4651      	mov	r1, sl
 8022cbe:	b2c0      	uxtb	r0, r0
 8022cc0:	47c8      	blx	r9
                    // post padding
                    if(flags & FLAGS_LEFT) {
                        while(l++ < width) {
 8022cc2:	2d01      	cmp	r5, #1
 8022cc4:	bf88      	it	hi
 8022cc6:	eb05 070b 	addhi.w	r7, r5, fp
 8022cca:	f240 80f4 	bls.w	8022eb6 <_vsnprintf+0x5be>
                            out(' ', buffer, idx++, maxlen);
 8022cce:	4632      	mov	r2, r6
 8022cd0:	3601      	adds	r6, #1
 8022cd2:	4643      	mov	r3, r8
 8022cd4:	4651      	mov	r1, sl
 8022cd6:	2020      	movs	r0, #32
 8022cd8:	47c8      	blx	r9
                        while(l++ < width) {
 8022cda:	42be      	cmp	r6, r7
 8022cdc:	d1f7      	bne.n	8022cce <_vsnprintf+0x3d6>
                            out(' ', buffer, idx++, maxlen);
 8022cde:	44ab      	add	fp, r5
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8022ce0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022ce2:	e017      	b.n	8022d14 <_vsnprintf+0x41c>
                        while(l++ < width) {
 8022ce4:	2d01      	cmp	r5, #1
 8022ce6:	f240 80e4 	bls.w	8022eb2 <_vsnprintf+0x5ba>
 8022cea:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8022cee:	441d      	add	r5, r3
                            out(' ', buffer, idx++, maxlen);
 8022cf0:	465a      	mov	r2, fp
 8022cf2:	f10b 0b01 	add.w	fp, fp, #1
 8022cf6:	4643      	mov	r3, r8
 8022cf8:	4651      	mov	r1, sl
 8022cfa:	2020      	movs	r0, #32
 8022cfc:	47c8      	blx	r9
                        while(l++ < width) {
 8022cfe:	45ab      	cmp	fp, r5
 8022d00:	d1f6      	bne.n	8022cf0 <_vsnprintf+0x3f8>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8022d02:	f105 0b01 	add.w	fp, r5, #1
 8022d06:	f857 0b04 	ldr.w	r0, [r7], #4
 8022d0a:	4643      	mov	r3, r8
 8022d0c:	462a      	mov	r2, r5
 8022d0e:	4651      	mov	r1, sl
 8022d10:	b2c0      	uxtb	r0, r0
 8022d12:	47c8      	blx	r9
                        }
                    }
                    format++;
 8022d14:	3401      	adds	r4, #1
                    break;
 8022d16:	e05c      	b.n	8022dd2 <_vsnprintf+0x4da>
                }

            case 's' : {
                    const char * p = va_arg(va, char *);
 8022d18:	463b      	mov	r3, r7
 8022d1a:	f853 7b04 	ldr.w	r7, [r3], #4
 8022d1e:	930c      	str	r3, [sp, #48]	; 0x30
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 8022d20:	2e00      	cmp	r6, #0
 8022d22:	bf14      	ite	ne
 8022d24:	4631      	movne	r1, r6
 8022d26:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
    for(s = str; *s && maxsize--; ++s);
 8022d2a:	7838      	ldrb	r0, [r7, #0]
 8022d2c:	2800      	cmp	r0, #0
 8022d2e:	f000 80c9 	beq.w	8022ec4 <_vsnprintf+0x5cc>
 8022d32:	463b      	mov	r3, r7
 8022d34:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8022d38:	b112      	cbz	r2, 8022d40 <_vsnprintf+0x448>
 8022d3a:	1afa      	subs	r2, r7, r3
 8022d3c:	42ca      	cmn	r2, r1
 8022d3e:	d1f9      	bne.n	8022d34 <_vsnprintf+0x43c>
    return (unsigned int)(s - str);
 8022d40:	1bdb      	subs	r3, r3, r7
 8022d42:	930b      	str	r3, [sp, #44]	; 0x2c
                    // pre padding
                    if(flags & FLAGS_PRECISION) {
 8022d44:	f41c 6280 	ands.w	r2, ip, #1024	; 0x400
 8022d48:	920d      	str	r2, [sp, #52]	; 0x34
 8022d4a:	d003      	beq.n	8022d54 <_vsnprintf+0x45c>
                        l = (l < precision ? l : precision);
 8022d4c:	42b3      	cmp	r3, r6
 8022d4e:	bf28      	it	cs
 8022d50:	4633      	movcs	r3, r6
 8022d52:	930b      	str	r3, [sp, #44]	; 0x2c
                    }
                    if(!(flags & FLAGS_LEFT)) {
 8022d54:	f01c 0302 	ands.w	r3, ip, #2
 8022d58:	930e      	str	r3, [sp, #56]	; 0x38
 8022d5a:	d006      	beq.n	8022d6a <_vsnprintf+0x472>
                        while(l++ < width) {
                            out(' ', buffer, idx++, maxlen);
                        }
                    }
                    // string output
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8022d5c:	2800      	cmp	r0, #0
 8022d5e:	f000 80ad 	beq.w	8022ebc <_vsnprintf+0x5c4>
 8022d62:	465a      	mov	r2, fp
 8022d64:	950f      	str	r5, [sp, #60]	; 0x3c
 8022d66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022d68:	e026      	b.n	8022db8 <_vsnprintf+0x4c0>
                        while(l++ < width) {
 8022d6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022d6c:	1c53      	adds	r3, r2, #1
 8022d6e:	4295      	cmp	r5, r2
 8022d70:	f240 80a6 	bls.w	8022ec0 <_vsnprintf+0x5c8>
 8022d74:	eb05 030b 	add.w	r3, r5, fp
 8022d78:	1a9b      	subs	r3, r3, r2
 8022d7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8022d7c:	970b      	str	r7, [sp, #44]	; 0x2c
 8022d7e:	461f      	mov	r7, r3
                            out(' ', buffer, idx++, maxlen);
 8022d80:	465a      	mov	r2, fp
 8022d82:	f10b 0b01 	add.w	fp, fp, #1
 8022d86:	4643      	mov	r3, r8
 8022d88:	4651      	mov	r1, sl
 8022d8a:	2020      	movs	r0, #32
 8022d8c:	47c8      	blx	r9
                        while(l++ < width) {
 8022d8e:	455f      	cmp	r7, fp
 8022d90:	d1f6      	bne.n	8022d80 <_vsnprintf+0x488>
 8022d92:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022d94:	1c6b      	adds	r3, r5, #1
 8022d96:	930b      	str	r3, [sp, #44]	; 0x2c
                            out(' ', buffer, idx++, maxlen);
 8022d98:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8022d9c:	7838      	ldrb	r0, [r7, #0]
 8022d9e:	2800      	cmp	r0, #0
 8022da0:	d1df      	bne.n	8022d62 <_vsnprintf+0x46a>
 8022da2:	e014      	b.n	8022dce <_vsnprintf+0x4d6>
 8022da4:	461e      	mov	r6, r3
                        out(*(p++), buffer, idx++, maxlen);
 8022da6:	f102 0b01 	add.w	fp, r2, #1
 8022daa:	4643      	mov	r3, r8
 8022dac:	4651      	mov	r1, sl
 8022dae:	47c8      	blx	r9
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8022db0:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8022db4:	b140      	cbz	r0, 8022dc8 <_vsnprintf+0x4d0>
                        out(*(p++), buffer, idx++, maxlen);
 8022db6:	465a      	mov	r2, fp
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8022db8:	2d00      	cmp	r5, #0
 8022dba:	d0f4      	beq.n	8022da6 <_vsnprintf+0x4ae>
 8022dbc:	1e73      	subs	r3, r6, #1
 8022dbe:	2e00      	cmp	r6, #0
 8022dc0:	d1f0      	bne.n	8022da4 <_vsnprintf+0x4ac>
 8022dc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022dc4:	4693      	mov	fp, r2
 8022dc6:	e000      	b.n	8022dca <_vsnprintf+0x4d2>
 8022dc8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
                    }
                    // post padding
                    if(flags & FLAGS_LEFT) {
 8022dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022dcc:	b97b      	cbnz	r3, 8022dee <_vsnprintf+0x4f6>
                        while(l++ < width) {
                            out(' ', buffer, idx++, maxlen);
                        }
                    }
                    format++;
 8022dce:	3401      	adds	r4, #1
                    const char * p = va_arg(va, char *);
 8022dd0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    while(*format) {
 8022dd2:	7820      	ldrb	r0, [r4, #0]
 8022dd4:	b390      	cbz	r0, 8022e3c <_vsnprintf+0x544>
        if(*format != '%') {
 8022dd6:	2825      	cmp	r0, #37	; 0x25
 8022dd8:	f43f ada1 	beq.w	802291e <_vsnprintf+0x26>
            out(*format, buffer, idx++, maxlen);
 8022ddc:	f10b 0501 	add.w	r5, fp, #1
 8022de0:	4643      	mov	r3, r8
 8022de2:	465a      	mov	r2, fp
 8022de4:	4651      	mov	r1, sl
 8022de6:	47c8      	blx	r9
            format++;
 8022de8:	3401      	adds	r4, #1
            out(*format, buffer, idx++, maxlen);
 8022dea:	46ab      	mov	fp, r5
            continue;
 8022dec:	e7f1      	b.n	8022dd2 <_vsnprintf+0x4da>
 8022dee:	465e      	mov	r6, fp
                        while(l++ < width) {
 8022df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022df2:	429d      	cmp	r5, r3
 8022df4:	d90b      	bls.n	8022e0e <_vsnprintf+0x516>
 8022df6:	4435      	add	r5, r6
 8022df8:	eba5 0b03 	sub.w	fp, r5, r3
                            out(' ', buffer, idx++, maxlen);
 8022dfc:	4632      	mov	r2, r6
 8022dfe:	3601      	adds	r6, #1
 8022e00:	4643      	mov	r3, r8
 8022e02:	4651      	mov	r1, sl
 8022e04:	2020      	movs	r0, #32
 8022e06:	47c8      	blx	r9
                        while(l++ < width) {
 8022e08:	455e      	cmp	r6, fp
 8022e0a:	d1f7      	bne.n	8022dfc <_vsnprintf+0x504>
 8022e0c:	e7df      	b.n	8022dce <_vsnprintf+0x4d6>
 8022e0e:	46b3      	mov	fp, r6
 8022e10:	e7dd      	b.n	8022dce <_vsnprintf+0x4d6>
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
 8022e12:	f10b 0501 	add.w	r5, fp, #1
 8022e16:	4643      	mov	r3, r8
 8022e18:	465a      	mov	r2, fp
 8022e1a:	4651      	mov	r1, sl
 8022e1c:	2025      	movs	r0, #37	; 0x25
 8022e1e:	47c8      	blx	r9
                format++;
 8022e20:	3401      	adds	r4, #1
                out('%', buffer, idx++, maxlen);
 8022e22:	46ab      	mov	fp, r5
                break;
 8022e24:	e7d5      	b.n	8022dd2 <_vsnprintf+0x4da>

            default :
                out(*format, buffer, idx++, maxlen);
 8022e26:	f10b 0501 	add.w	r5, fp, #1
 8022e2a:	4643      	mov	r3, r8
 8022e2c:	465a      	mov	r2, fp
 8022e2e:	4651      	mov	r1, sl
 8022e30:	47c8      	blx	r9
                format++;
 8022e32:	3401      	adds	r4, #1
                out(*format, buffer, idx++, maxlen);
 8022e34:	46ab      	mov	fp, r5
                break;
 8022e36:	e7cc      	b.n	8022dd2 <_vsnprintf+0x4da>
    while(*format) {
 8022e38:	f04f 0b00 	mov.w	fp, #0
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8022e3c:	45d8      	cmp	r8, fp
 8022e3e:	bf94      	ite	ls
 8022e40:	f108 32ff 	addls.w	r2, r8, #4294967295	; 0xffffffff
 8022e44:	465a      	movhi	r2, fp
 8022e46:	4643      	mov	r3, r8
 8022e48:	4651      	mov	r1, sl
 8022e4a:	2000      	movs	r0, #0
 8022e4c:	47c8      	blx	r9

    // return written chars without terminating \0
    return (int)idx;
}
 8022e4e:	4658      	mov	r0, fp
 8022e50:	b013      	add	sp, #76	; 0x4c
 8022e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        base = 16U;
 8022e56:	2310      	movs	r3, #16
                    if((*format != 'i') && (*format != 'd')) {
 8022e58:	2869      	cmp	r0, #105	; 0x69
 8022e5a:	f47f ae9f 	bne.w	8022b9c <_vsnprintf+0x2a4>
                    if(flags & FLAGS_PRECISION) {
 8022e5e:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 8022e62:	d131      	bne.n	8022ec8 <_vsnprintf+0x5d0>
                        if(flags & FLAGS_LONG_LONG) {
 8022e64:	f41c 7f00 	tst.w	ip, #512	; 0x200
 8022e68:	f47f aea1 	bne.w	8022bae <_vsnprintf+0x2b6>
                        else if(flags & FLAGS_LONG) {
 8022e6c:	f41c 7f80 	tst.w	ip, #256	; 0x100
 8022e70:	f47f aebf 	bne.w	8022bf2 <_vsnprintf+0x2fa>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 8022e74:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8022e78:	f43f aed0 	beq.w	8022c1c <_vsnprintf+0x324>
 8022e7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8022e80:	b2d2      	uxtb	r2, r2
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 8022e82:	f8cd c014 	str.w	ip, [sp, #20]
 8022e86:	9504      	str	r5, [sp, #16]
 8022e88:	9603      	str	r6, [sp, #12]
 8022e8a:	9302      	str	r3, [sp, #8]
 8022e8c:	0fd3      	lsrs	r3, r2, #31
 8022e8e:	9301      	str	r3, [sp, #4]
 8022e90:	2a00      	cmp	r2, #0
 8022e92:	bfb8      	it	lt
 8022e94:	4252      	neglt	r2, r2
 8022e96:	9200      	str	r2, [sp, #0]
 8022e98:	4643      	mov	r3, r8
 8022e9a:	465a      	mov	r2, fp
 8022e9c:	4651      	mov	r1, sl
 8022e9e:	4648      	mov	r0, r9
 8022ea0:	f7ff fc8a 	bl	80227b8 <_ntoa_long>
 8022ea4:	4683      	mov	fp, r0
                    format++;
 8022ea6:	3401      	adds	r4, #1
                    break;
 8022ea8:	e793      	b.n	8022dd2 <_vsnprintf+0x4da>
                        base =  8U;
 8022eaa:	2308      	movs	r3, #8
 8022eac:	e7d4      	b.n	8022e58 <_vsnprintf+0x560>
                        base =  2U;
 8022eae:	2302      	movs	r3, #2
                    if(*format == 'X' || *format == 'P') {
 8022eb0:	e7d2      	b.n	8022e58 <_vsnprintf+0x560>
                        while(l++ < width) {
 8022eb2:	465d      	mov	r5, fp
 8022eb4:	e725      	b.n	8022d02 <_vsnprintf+0x40a>
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 8022eb6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022eb8:	46b3      	mov	fp, r6
 8022eba:	e72b      	b.n	8022d14 <_vsnprintf+0x41c>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8022ebc:	465e      	mov	r6, fp
 8022ebe:	e797      	b.n	8022df0 <_vsnprintf+0x4f8>
                        while(l++ < width) {
 8022ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8022ec2:	e76b      	b.n	8022d9c <_vsnprintf+0x4a4>
    for(s = str; *s && maxsize--; ++s);
 8022ec4:	463b      	mov	r3, r7
 8022ec6:	e73b      	b.n	8022d40 <_vsnprintf+0x448>
                        flags &= ~FLAGS_ZEROPAD;
 8022ec8:	f02c 0c01 	bic.w	ip, ip, #1
                    if((*format == 'i') || (*format == 'd')) {
 8022ecc:	e7ca      	b.n	8022e64 <_vsnprintf+0x56c>
 8022ece:	bf00      	nop

08022ed0 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 8022ed0:	b40c      	push	{r2, r3}
 8022ed2:	b510      	push	{r4, lr}
 8022ed4:	b084      	sub	sp, #16
 8022ed6:	460a      	mov	r2, r1
 8022ed8:	ac06      	add	r4, sp, #24
 8022eda:	f854 3b04 	ldr.w	r3, [r4], #4
    va_list va;
    va_start(va, format);
 8022ede:	9403      	str	r4, [sp, #12]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8022ee0:	9400      	str	r4, [sp, #0]
 8022ee2:	4601      	mov	r1, r0
 8022ee4:	4803      	ldr	r0, [pc, #12]	; (8022ef4 <lv_snprintf+0x24>)
 8022ee6:	f7ff fd07 	bl	80228f8 <_vsnprintf>
    va_end(va);
    return ret;
}
 8022eea:	b004      	add	sp, #16
 8022eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ef0:	b002      	add	sp, #8
 8022ef2:	4770      	bx	lr
 8022ef4:	080225c9 	.word	0x080225c9

08022ef8 <lv_vsnprintf>:

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
 8022ef8:	b500      	push	{lr}
 8022efa:	b083      	sub	sp, #12
    return _vsnprintf(_out_buffer, buffer, count, format, va);
 8022efc:	9300      	str	r3, [sp, #0]
 8022efe:	4613      	mov	r3, r2
 8022f00:	460a      	mov	r2, r1
 8022f02:	4601      	mov	r1, r0
 8022f04:	4802      	ldr	r0, [pc, #8]	; (8022f10 <lv_vsnprintf+0x18>)
 8022f06:	f7ff fcf7 	bl	80228f8 <_vsnprintf>
}
 8022f0a:	b003      	add	sp, #12
 8022f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022f10:	080225c9 	.word	0x080225c9

08022f14 <lv_style_set_prop_helper>:
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
    *prop_storage = prop;
 8022f14:	8010      	strh	r0, [r2, #0]
    *value_storage = value;
 8022f16:	6019      	str	r1, [r3, #0]
}
 8022f18:	4770      	bx	lr

08022f1a <lv_style_init>:
{
 8022f1a:	b508      	push	{r3, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8022f1c:	2108      	movs	r1, #8
 8022f1e:	f7ff fa85 	bl	802242c <lv_memset_00>
}
 8022f22:	bd08      	pop	{r3, pc}

08022f24 <lv_style_reset>:
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022f24:	8882      	ldrh	r2, [r0, #4]
 8022f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022f2a:	429a      	cmp	r2, r3
 8022f2c:	d00d      	beq.n	8022f4a <lv_style_reset+0x26>
{
 8022f2e:	b510      	push	{r4, lr}
 8022f30:	4604      	mov	r4, r0
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8022f32:	79c3      	ldrb	r3, [r0, #7]
 8022f34:	2b01      	cmp	r3, #1
 8022f36:	d804      	bhi.n	8022f42 <lv_style_reset+0x1e>
    lv_memset_00(style, sizeof(lv_style_t));
 8022f38:	2108      	movs	r1, #8
 8022f3a:	4620      	mov	r0, r4
 8022f3c:	f7ff fa76 	bl	802242c <lv_memset_00>
}
 8022f40:	bd10      	pop	{r4, pc}
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8022f42:	6800      	ldr	r0, [r0, #0]
 8022f44:	f7ff f810 	bl	8021f68 <lv_mem_free>
 8022f48:	e7f6      	b.n	8022f38 <lv_style_reset+0x14>
 8022f4a:	4770      	bx	lr

08022f4c <lv_style_register_prop>:
{
 8022f4c:	b538      	push	{r3, r4, r5, lr}
 8022f4e:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 8022f50:	4b19      	ldr	r3, [pc, #100]	; (8022fb8 <lv_style_register_prop+0x6c>)
 8022f52:	6818      	ldr	r0, [r3, #0]
 8022f54:	b1b8      	cbz	r0, 8022f86 <lv_style_register_prop+0x3a>
    if(((last_custom_prop_id + 1) & LV_STYLE_PROP_META_MASK) != 0) {
 8022f56:	4b19      	ldr	r3, [pc, #100]	; (8022fbc <lv_style_register_prop+0x70>)
 8022f58:	881b      	ldrh	r3, [r3, #0]
 8022f5a:	1c5a      	adds	r2, r3, #1
 8022f5c:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8022f60:	d126      	bne.n	8022fb0 <lv_style_register_prop+0x64>
    size_t required_size = (last_custom_prop_id + 1 - _LV_STYLE_LAST_BUILT_IN_PROP);
 8022f62:	f1a3 026e 	sub.w	r2, r3, #110	; 0x6e
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 8022f66:	4916      	ldr	r1, [pc, #88]	; (8022fc0 <lv_style_register_prop+0x74>)
 8022f68:	6809      	ldr	r1, [r1, #0]
 8022f6a:	4291      	cmp	r1, r2
 8022f6c:	d311      	bcc.n	8022f92 <lv_style_register_prop+0x46>
    last_custom_prop_id++;
 8022f6e:	4a13      	ldr	r2, [pc, #76]	; (8022fbc <lv_style_register_prop+0x70>)
 8022f70:	8813      	ldrh	r3, [r2, #0]
 8022f72:	3301      	adds	r3, #1
 8022f74:	b298      	uxth	r0, r3
 8022f76:	8010      	strh	r0, [r2, #0]
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8022f78:	4b0f      	ldr	r3, [pc, #60]	; (8022fb8 <lv_style_register_prop+0x6c>)
 8022f7a:	681b      	ldr	r3, [r3, #0]
 8022f7c:	b1bb      	cbz	r3, 8022fae <lv_style_register_prop+0x62>
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
 8022f7e:	4403      	add	r3, r0
 8022f80:	f803 5c70 	strb.w	r5, [r3, #-112]
    return last_custom_prop_id;
 8022f84:	e015      	b.n	8022fb2 <lv_style_register_prop+0x66>
        _lv_style_custom_prop_flag_lookup_table_size = 0;
 8022f86:	4b0e      	ldr	r3, [pc, #56]	; (8022fc0 <lv_style_register_prop+0x74>)
 8022f88:	2200      	movs	r2, #0
 8022f8a:	601a      	str	r2, [r3, #0]
        last_custom_prop_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 8022f8c:	236f      	movs	r3, #111	; 0x6f
 8022f8e:	4a0b      	ldr	r2, [pc, #44]	; (8022fbc <lv_style_register_prop+0x70>)
 8022f90:	8013      	strh	r3, [r2, #0]
        required_size = (required_size + 31) & ~31;
 8022f92:	3b4f      	subs	r3, #79	; 0x4f
        LV_ASSERT_MSG(required_size > 0, "required size has become 0?");
 8022f94:	f033 041f 	bics.w	r4, r3, #31
 8022f98:	d100      	bne.n	8022f9c <lv_style_register_prop+0x50>
 8022f9a:	e7fe      	b.n	8022f9a <lv_style_register_prop+0x4e>
        uint8_t * new_p = lv_mem_realloc(old_p, required_size * sizeof(uint8_t));
 8022f9c:	4621      	mov	r1, r4
 8022f9e:	f7fe ffff 	bl	8021fa0 <lv_mem_realloc>
        if(new_p == NULL) {
 8022fa2:	b138      	cbz	r0, 8022fb4 <lv_style_register_prop+0x68>
        LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) = new_p;
 8022fa4:	4b04      	ldr	r3, [pc, #16]	; (8022fb8 <lv_style_register_prop+0x6c>)
 8022fa6:	6018      	str	r0, [r3, #0]
        _lv_style_custom_prop_flag_lookup_table_size = required_size;
 8022fa8:	4b05      	ldr	r3, [pc, #20]	; (8022fc0 <lv_style_register_prop+0x74>)
 8022faa:	601c      	str	r4, [r3, #0]
 8022fac:	e7df      	b.n	8022f6e <lv_style_register_prop+0x22>
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8022fae:	e7fe      	b.n	8022fae <lv_style_register_prop+0x62>
        return LV_STYLE_PROP_INV;
 8022fb0:	2000      	movs	r0, #0
}
 8022fb2:	bd38      	pop	{r3, r4, r5, pc}
            return LV_STYLE_PROP_INV;
 8022fb4:	2000      	movs	r0, #0
 8022fb6:	e7fc      	b.n	8022fb2 <lv_style_register_prop+0x66>
 8022fb8:	20002978 	.word	0x20002978
 8022fbc:	20000760 	.word	0x20000760
 8022fc0:	2000c21c 	.word	0x2000c21c

08022fc4 <lv_style_remove_prop>:
{
 8022fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8022fc6:	8883      	ldrh	r3, [r0, #4]
 8022fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022fcc:	4293      	cmp	r3, r2
 8022fce:	d05c      	beq.n	802308a <lv_style_remove_prop+0xc6>
 8022fd0:	4605      	mov	r5, r0
 8022fd2:	460c      	mov	r4, r1
    if(style->prop_cnt == 0)  return false;
 8022fd4:	79c0      	ldrb	r0, [r0, #7]
 8022fd6:	2800      	cmp	r0, #0
 8022fd8:	d059      	beq.n	802308e <lv_style_remove_prop+0xca>
    if(style->prop_cnt == 1) {
 8022fda:	2801      	cmp	r0, #1
 8022fdc:	d011      	beq.n	8023002 <lv_style_remove_prop+0x3e>
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022fde:	682f      	ldr	r7, [r5, #0]
 8022fe0:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
    for(i = 0; i < style->prop_cnt; i++) {
 8022fe4:	f1ac 0602 	sub.w	r6, ip, #2
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8022fe8:	4631      	mov	r1, r6
    for(i = 0; i < style->prop_cnt; i++) {
 8022fea:	2200      	movs	r2, #0
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8022fec:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8022ff0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022ff4:	42a3      	cmp	r3, r4
 8022ff6:	d00e      	beq.n	8023016 <lv_style_remove_prop+0x52>
    for(i = 0; i < style->prop_cnt; i++) {
 8022ff8:	3201      	adds	r2, #1
 8022ffa:	4290      	cmp	r0, r2
 8022ffc:	d1f6      	bne.n	8022fec <lv_style_remove_prop+0x28>
    return false;
 8022ffe:	2000      	movs	r0, #0
 8023000:	e046      	b.n	8023090 <lv_style_remove_prop+0xcc>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8023002:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8023006:	428b      	cmp	r3, r1
 8023008:	d001      	beq.n	802300e <lv_style_remove_prop+0x4a>
        return false;
 802300a:	2000      	movs	r0, #0
 802300c:	e040      	b.n	8023090 <lv_style_remove_prop+0xcc>
            style->prop1 = LV_STYLE_PROP_INV;
 802300e:	2300      	movs	r3, #0
 8023010:	80ab      	strh	r3, [r5, #4]
            style->prop_cnt = 0;
 8023012:	71eb      	strb	r3, [r5, #7]
            return true;
 8023014:	e03c      	b.n	8023090 <lv_style_remove_prop+0xcc>
            if(style->prop_cnt == 2) {
 8023016:	2802      	cmp	r0, #2
 8023018:	d010      	beq.n	802303c <lv_style_remove_prop+0x78>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 802301a:	3801      	subs	r0, #1
 802301c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8023020:	0040      	lsls	r0, r0, #1
 8023022:	f7fe ff83 	bl	8021f2c <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 8023026:	4684      	mov	ip, r0
 8023028:	b398      	cbz	r0, 8023092 <lv_style_remove_prop+0xce>
                style->v_p.values_and_props = new_values_and_props;
 802302a:	6028      	str	r0, [r5, #0]
                style->prop_cnt--;
 802302c:	79e8      	ldrb	r0, [r5, #7]
 802302e:	3801      	subs	r0, #1
 8023030:	b2c0      	uxtb	r0, r0
 8023032:	71e8      	strb	r0, [r5, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8023034:	0080      	lsls	r0, r0, #2
                for(i = j = 0; j <= style->prop_cnt;
 8023036:	2300      	movs	r3, #0
 8023038:	461a      	mov	r2, r3
 802303a:	e016      	b.n	802306a <lv_style_remove_prop+0xa6>
                style->prop_cnt = 1;
 802303c:	2301      	movs	r3, #1
 802303e:	71eb      	strb	r3, [r5, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8023040:	b94a      	cbnz	r2, 8023056 <lv_style_remove_prop+0x92>
 8023042:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 8023046:	80ab      	strh	r3, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8023048:	687b      	ldr	r3, [r7, #4]
 802304a:	602b      	str	r3, [r5, #0]
            lv_mem_free(old_values);
 802304c:	4638      	mov	r0, r7
 802304e:	f7fe ff8b 	bl	8021f68 <lv_mem_free>
            return true;
 8023052:	2001      	movs	r0, #1
 8023054:	e01c      	b.n	8023090 <lv_style_remove_prop+0xcc>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8023056:	f837 3020 	ldrh.w	r3, [r7, r0, lsl #2]
 802305a:	80ab      	strh	r3, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 802305c:	683b      	ldr	r3, [r7, #0]
 802305e:	602b      	str	r3, [r5, #0]
 8023060:	e7f4      	b.n	802304c <lv_style_remove_prop+0x88>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8023062:	3301      	adds	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 8023064:	79e9      	ldrb	r1, [r5, #7]
 8023066:	4299      	cmp	r1, r3
 8023068:	d3f0      	bcc.n	802304c <lv_style_remove_prop+0x88>
                    if(old_props[j] != prop) {
 802306a:	f836 1f02 	ldrh.w	r1, [r6, #2]!
 802306e:	42a1      	cmp	r1, r4
 8023070:	d0f7      	beq.n	8023062 <lv_style_remove_prop+0x9e>
                        new_values[i] = old_values[j];
 8023072:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8023076:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
                        new_props[i++] = old_props[j];
 802307a:	f8b6 e000 	ldrh.w	lr, [r6]
 802307e:	eb0c 0142 	add.w	r1, ip, r2, lsl #1
 8023082:	f821 e000 	strh.w	lr, [r1, r0]
 8023086:	3201      	adds	r2, #1
 8023088:	e7eb      	b.n	8023062 <lv_style_remove_prop+0x9e>
        return false;
 802308a:	2000      	movs	r0, #0
 802308c:	e000      	b.n	8023090 <lv_style_remove_prop+0xcc>
    if(style->prop_cnt == 0)  return false;
 802308e:	2000      	movs	r0, #0
}
 8023090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(new_values_and_props == NULL) return false;
 8023092:	2000      	movs	r0, #0
 8023094:	e7fc      	b.n	8023090 <lv_style_remove_prop+0xcc>
	...

08023098 <lv_style_transition_dsc_init>:
{
 8023098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802309a:	4604      	mov	r4, r0
 802309c:	460f      	mov	r7, r1
 802309e:	4615      	mov	r5, r2
 80230a0:	461e      	mov	r6, r3
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 80230a2:	2114      	movs	r1, #20
 80230a4:	f7ff f9c2 	bl	802242c <lv_memset_00>
    tr->props = props;
 80230a8:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 80230aa:	4b05      	ldr	r3, [pc, #20]	; (80230c0 <lv_style_transition_dsc_init+0x28>)
 80230ac:	2d00      	cmp	r5, #0
 80230ae:	bf08      	it	eq
 80230b0:	461d      	moveq	r5, r3
 80230b2:	60a5      	str	r5, [r4, #8]
    tr->time = time;
 80230b4:	60e6      	str	r6, [r4, #12]
    tr->delay = delay;
 80230b6:	9b06      	ldr	r3, [sp, #24]
 80230b8:	6123      	str	r3, [r4, #16]
    tr->user_data = user_data;
 80230ba:	9b07      	ldr	r3, [sp, #28]
 80230bc:	6063      	str	r3, [r4, #4]
}
 80230be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80230c0:	08020ddd 	.word	0x08020ddd

080230c4 <lv_style_prop_get_default>:
    switch(prop) {
 80230c4:	3803      	subs	r0, #3
 80230c6:	2869      	cmp	r0, #105	; 0x69
 80230c8:	d84f      	bhi.n	802316a <lv_style_prop_get_default+0xa6>
 80230ca:	e8df f000 	tbb	[pc, r0]
 80230ce:	4e4b      	.short	0x4e4b
 80230d0:	4e4e4b4e 	.word	0x4e4e4b4e
 80230d4:	4e4e4e4e 	.word	0x4e4e4e4e
 80230d8:	4e4e4e4e 	.word	0x4e4e4e4e
 80230dc:	4e4e4e4e 	.word	0x4e4e4e4e
 80230e0:	4e4e4e4e 	.word	0x4e4e4e4e
 80230e4:	4e4e4e4e 	.word	0x4e4e4e4e
 80230e8:	384e4e4e 	.word	0x384e4e4e
 80230ec:	4e4e3b4e 	.word	0x4e4e3b4e
 80230f0:	4e4e4e45 	.word	0x4e4e4e45
 80230f4:	4e4e4e43 	.word	0x4e4e4e43
 80230f8:	3b4e4e4e 	.word	0x3b4e4e4e
 80230fc:	4e474e43 	.word	0x4e474e43
 8023100:	4e433b4e 	.word	0x4e433b4e
 8023104:	4e4e4e4e 	.word	0x4e4e4e4e
 8023108:	4e4e4e4e 	.word	0x4e4e4e4e
 802310c:	3b4e4e4e 	.word	0x3b4e4e4e
 8023110:	4e3b4343 	.word	0x4e3b4343
 8023114:	4e4e4e4e 	.word	0x4e4e4e4e
 8023118:	4e4e433b 	.word	0x4e4e433b
 802311c:	4e433b4e 	.word	0x4e433b4e
 8023120:	4e49433b 	.word	0x4e49433b
 8023124:	4e4e4e4e 	.word	0x4e4e4e4e
 8023128:	434e4e4e 	.word	0x434e4e4e
 802312c:	4e4e4e4e 	.word	0x4e4e4e4e
 8023130:	4e4e4e4e 	.word	0x4e4e4e4e
 8023134:	354e4e4e 	.word	0x354e4e4e
            value.num = LV_IMG_ZOOM_NONE;
 8023138:	f44f 7080 	mov.w	r0, #256	; 0x100
            break;
 802313c:	4770      	bx	lr
 802313e:	f64f 70ff 	movw	r0, #65535	; 0xffff
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 8023142:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8023144:	2000      	movs	r0, #0
 8023146:	f36f 0004 	bfc	r0, #0, #5
 802314a:	f36f 104a 	bfc	r0, #5, #6
 802314e:	f36f 20cf 	bfc	r0, #11, #5
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 8023152:	4770      	bx	lr
            value.num = LV_OPA_COVER;
 8023154:	20ff      	movs	r0, #255	; 0xff
            break;
 8023156:	4770      	bx	lr
            value.num = 255;
 8023158:	20ff      	movs	r0, #255	; 0xff
            break;
 802315a:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 802315c:	200f      	movs	r0, #15
            break;
 802315e:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 8023160:	4803      	ldr	r0, [pc, #12]	; (8023170 <lv_style_prop_get_default+0xac>)
            break;
 8023162:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 8023164:	f641 70ff 	movw	r0, #8191	; 0x1fff
            break;
 8023168:	4770      	bx	lr
            value.ptr = NULL;
 802316a:	2000      	movs	r0, #0
}
 802316c:	4770      	bx	lr
 802316e:	bf00      	nop
 8023170:	08031440 	.word	0x08031440

08023174 <lv_style_get_prop>:
{
 8023174:	b570      	push	{r4, r5, r6, lr}
 8023176:	4603      	mov	r3, r0
 8023178:	4614      	mov	r4, r2
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 802317a:	8882      	ldrh	r2, [r0, #4]
 802317c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8023180:	4282      	cmp	r2, r0
 8023182:	d016      	beq.n	80231b2 <lv_style_get_prop+0x3e>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8023184:	79d8      	ldrb	r0, [r3, #7]
 8023186:	b338      	cbz	r0, 80231d8 <lv_style_get_prop+0x64>

    if(style->prop_cnt > 1) {
 8023188:	2801      	cmp	r0, #1
 802318a:	d946      	bls.n	802321a <lv_style_get_prop+0xa6>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802318c:	681e      	ldr	r6, [r3, #0]
 802318e:	4605      	mov	r5, r0
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8023190:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8023194:	1e83      	subs	r3, r0, #2
 8023196:	f04f 0c00 	mov.w	ip, #0
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 802319a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 802319e:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 80231a2:	4281      	cmp	r1, r0
 80231a4:	d029      	beq.n	80231fa <lv_style_get_prop+0x86>
        for(i = 0; i < style->prop_cnt; i++) {
 80231a6:	f10c 0c01 	add.w	ip, ip, #1
 80231aa:	4565      	cmp	r5, ip
 80231ac:	d1f5      	bne.n	802319a <lv_style_get_prop+0x26>
            return LV_STYLE_RES_INHERIT;
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
    }
    return LV_STYLE_RES_NOT_FOUND;
 80231ae:	2000      	movs	r0, #0
 80231b0:	e012      	b.n	80231d8 <lv_style_get_prop+0x64>
        for(i = 0; i < style->prop_cnt; i++) {
 80231b2:	79de      	ldrb	r6, [r3, #7]
 80231b4:	2e00      	cmp	r6, #0
 80231b6:	d045      	beq.n	8023244 <lv_style_get_prop+0xd0>
            const_prop = style->v_p.const_props + i;
 80231b8:	681d      	ldr	r5, [r3, #0]
 80231ba:	46ac      	mov	ip, r5
        for(i = 0; i < style->prop_cnt; i++) {
 80231bc:	2300      	movs	r3, #0
            const_prop = style->v_p.const_props + i;
 80231be:	46e6      	mov	lr, ip
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 80231c0:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
 80231c4:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 80231c8:	4281      	cmp	r1, r0
 80231ca:	d006      	beq.n	80231da <lv_style_get_prop+0x66>
        for(i = 0; i < style->prop_cnt; i++) {
 80231cc:	3301      	adds	r3, #1
 80231ce:	f10c 0c08 	add.w	ip, ip, #8
 80231d2:	42b3      	cmp	r3, r6
 80231d4:	d1f3      	bne.n	80231be <lv_style_get_prop+0x4a>
        return LV_STYLE_RES_NOT_FOUND;
 80231d6:	2000      	movs	r0, #0
}
 80231d8:	bd70      	pop	{r4, r5, r6, pc}
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 80231da:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80231de:	d133      	bne.n	8023248 <lv_style_get_prop+0xd4>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80231e0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80231e4:	d104      	bne.n	80231f0 <lv_style_get_prop+0x7c>
 80231e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80231ea:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 80231ec:	2001      	movs	r0, #1
 80231ee:	e7f3      	b.n	80231d8 <lv_style_get_prop+0x64>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80231f0:	f7ff ff68 	bl	80230c4 <lv_style_prop_get_default>
 80231f4:	6020      	str	r0, [r4, #0]
                return LV_STYLE_RES_FOUND;
 80231f6:	2001      	movs	r0, #1
 80231f8:	e7ee      	b.n	80231d8 <lv_style_get_prop+0x64>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 80231fa:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80231fe:	d125      	bne.n	802324c <lv_style_get_prop+0xd8>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8023200:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8023204:	d104      	bne.n	8023210 <lv_style_get_prop+0x9c>
                    *value = values[i];
 8023206:	f856 302c 	ldr.w	r3, [r6, ip, lsl #2]
 802320a:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 802320c:	2001      	movs	r0, #1
 802320e:	e7e3      	b.n	80231d8 <lv_style_get_prop+0x64>
                    *value = lv_style_prop_get_default(prop_id);
 8023210:	f7ff ff58 	bl	80230c4 <lv_style_prop_get_default>
 8023214:	6020      	str	r0, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8023216:	2001      	movs	r0, #1
 8023218:	e7de      	b.n	80231d8 <lv_style_get_prop+0x64>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 802321a:	f3c2 000d 	ubfx	r0, r2, #0, #14
 802321e:	4281      	cmp	r1, r0
 8023220:	d001      	beq.n	8023226 <lv_style_get_prop+0xb2>
    return LV_STYLE_RES_NOT_FOUND;
 8023222:	2000      	movs	r0, #0
 8023224:	e7d8      	b.n	80231d8 <lv_style_get_prop+0x64>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8023226:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 802322a:	d111      	bne.n	8023250 <lv_style_get_prop+0xdc>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 802322c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8023230:	d103      	bne.n	802323a <lv_style_get_prop+0xc6>
 8023232:	681b      	ldr	r3, [r3, #0]
 8023234:	6023      	str	r3, [r4, #0]
        return LV_STYLE_RES_FOUND;
 8023236:	2001      	movs	r0, #1
 8023238:	e7ce      	b.n	80231d8 <lv_style_get_prop+0x64>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 802323a:	f7ff ff43 	bl	80230c4 <lv_style_prop_get_default>
 802323e:	6020      	str	r0, [r4, #0]
        return LV_STYLE_RES_FOUND;
 8023240:	2001      	movs	r0, #1
 8023242:	e7c9      	b.n	80231d8 <lv_style_get_prop+0x64>
        return LV_STYLE_RES_NOT_FOUND;
 8023244:	2000      	movs	r0, #0
 8023246:	e7c7      	b.n	80231d8 <lv_style_get_prop+0x64>
                    return LV_STYLE_RES_INHERIT;
 8023248:	2002      	movs	r0, #2
 802324a:	e7c5      	b.n	80231d8 <lv_style_get_prop+0x64>
                    return LV_STYLE_RES_INHERIT;
 802324c:	2002      	movs	r0, #2
 802324e:	e7c3      	b.n	80231d8 <lv_style_get_prop+0x64>
            return LV_STYLE_RES_INHERIT;
 8023250:	2002      	movs	r0, #2
 8023252:	e7c1      	b.n	80231d8 <lv_style_get_prop+0x64>

08023254 <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 8023254:	79c0      	ldrb	r0, [r0, #7]
}
 8023256:	fab0 f080 	clz	r0, r0
 802325a:	0940      	lsrs	r0, r0, #5
 802325c:	4770      	bx	lr

0802325e <_lv_style_get_prop_group>:
    uint16_t group = (prop & 0x1FF) >> 4;
 802325e:	0900      	lsrs	r0, r0, #4
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8023260:	f010 0f18 	tst.w	r0, #24
    uint16_t group = (prop & 0x1FF) >> 4;
 8023264:	bf0c      	ite	eq
 8023266:	f000 001f 	andeq.w	r0, r0, #31
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 802326a:	2007      	movne	r0, #7
}
 802326c:	4770      	bx	lr

0802326e <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 802326e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023272:	4690      	mov	r8, r2
 8023274:	461f      	mov	r7, r3
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8023276:	8882      	ldrh	r2, [r0, #4]
 8023278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802327c:	429a      	cmp	r2, r3
 802327e:	d05f      	beq.n	8023340 <lv_style_set_prop_internal+0xd2>
 8023280:	4604      	mov	r4, r0
 8023282:	460e      	mov	r6, r1
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8023284:	f3c1 050d 	ubfx	r5, r1, #0, #14

    if(style->prop_cnt > 1) {
 8023288:	79c3      	ldrb	r3, [r0, #7]
 802328a:	2b01      	cmp	r3, #1
 802328c:	d947      	bls.n	802331e <lv_style_set_prop_internal+0xb0>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 802328e:	6800      	ldr	r0, [r0, #0]
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 8023290:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8023294:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8023298:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802329c:	4401      	add	r1, r0
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 802329e:	460a      	mov	r2, r1
 80232a0:	3902      	subs	r1, #2
 80232a2:	f8b2 e000 	ldrh.w	lr, [r2]
 80232a6:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
 80232aa:	4575      	cmp	r5, lr
 80232ac:	d031      	beq.n	8023312 <lv_style_set_prop_internal+0xa4>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80232ae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80232b2:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80232b6:	d1f2      	bne.n	802329e <lv_style_set_prop_internal+0x30>
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
                return;
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80232b8:	3301      	adds	r3, #1
 80232ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 80232be:	0059      	lsls	r1, r3, #1
 80232c0:	f7fe fe6e 	bl	8021fa0 <lv_mem_realloc>
        if(values_and_props == NULL) return;
 80232c4:	4602      	mov	r2, r0
 80232c6:	2800      	cmp	r0, #0
 80232c8:	d03a      	beq.n	8023340 <lv_style_set_prop_internal+0xd2>
        style->v_p.values_and_props = values_and_props;
 80232ca:	6020      	str	r0, [r4, #0]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80232cc:	79e3      	ldrb	r3, [r4, #7]
 80232ce:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
        props = (uint16_t *)tmp;
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80232d2:	1e59      	subs	r1, r3, #1
 80232d4:	d40c      	bmi.n	80232f0 <lv_style_set_prop_internal+0x82>
 80232d6:	3302      	adds	r3, #2
 80232d8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80232dc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80232e0:	f10c 0c04 	add.w	ip, ip, #4
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 80232e4:	f831 0902 	ldrh.w	r0, [r1], #-2
 80232e8:	f823 0d02 	strh.w	r0, [r3, #-2]!
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80232ec:	4563      	cmp	r3, ip
 80232ee:	d1f9      	bne.n	80232e4 <lv_style_set_prop_internal+0x76>
        }
        style->prop_cnt++;
 80232f0:	79e1      	ldrb	r1, [r4, #7]
 80232f2:	3101      	adds	r1, #1
 80232f4:	b2c9      	uxtb	r1, r1
 80232f6:	71e1      	strb	r1, [r4, #7]

        /*Go to the new position wit the props*/
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80232f8:	0088      	lsls	r0, r1, #2
        props = (uint16_t *)tmp;
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 80232fa:	1f03      	subs	r3, r0, #4
 80232fc:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8023300:	3901      	subs	r1, #1
 8023302:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8023306:	4413      	add	r3, r2
 8023308:	440a      	add	r2, r1
 802330a:	4641      	mov	r1, r8
 802330c:	4630      	mov	r0, r6
 802330e:	47b8      	blx	r7
 8023310:	e00e      	b.n	8023330 <lv_style_set_prop_internal+0xc2>
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 8023312:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8023316:	4641      	mov	r1, r8
 8023318:	4630      	mov	r0, r6
 802331a:	47b8      	blx	r7
                return;
 802331c:	e010      	b.n	8023340 <lv_style_set_prop_internal+0xd2>
    }
    else if(style->prop_cnt == 1) {
 802331e:	2b01      	cmp	r3, #1
 8023320:	d010      	beq.n	8023344 <lv_style_set_prop_internal+0xd6>
        props[0] = style->prop1;
        values[0] = value_tmp;
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
    }
    else {
        style->prop_cnt = 1;
 8023322:	2301      	movs	r3, #1
 8023324:	71c3      	strb	r3, [r0, #7]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8023326:	4603      	mov	r3, r0
 8023328:	1d02      	adds	r2, r0, #4
 802332a:	4641      	mov	r1, r8
 802332c:	4630      	mov	r0, r6
 802332e:	47b8      	blx	r7
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 8023330:	4628      	mov	r0, r5
 8023332:	f7ff ff94 	bl	802325e <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8023336:	2301      	movs	r3, #1
 8023338:	4083      	lsls	r3, r0
 802333a:	79a0      	ldrb	r0, [r4, #6]
 802333c:	4318      	orrs	r0, r3
 802333e:	71a0      	strb	r0, [r4, #6]
}
 8023340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 8023344:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8023348:	42aa      	cmp	r2, r5
 802334a:	d018      	beq.n	802337e <lv_style_set_prop_internal+0x110>
        uint8_t * values_and_props = lv_mem_alloc(size);
 802334c:	200c      	movs	r0, #12
 802334e:	f7fe fded 	bl	8021f2c <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8023352:	4603      	mov	r3, r0
 8023354:	2800      	cmp	r0, #0
 8023356:	d0f3      	beq.n	8023340 <lv_style_set_prop_internal+0xd2>
        lv_style_value_t value_tmp = style->v_p.value1;
 8023358:	6820      	ldr	r0, [r4, #0]
        style->v_p.values_and_props = values_and_props;
 802335a:	6023      	str	r3, [r4, #0]
        style->prop_cnt++;
 802335c:	79e1      	ldrb	r1, [r4, #7]
 802335e:	3101      	adds	r1, #1
 8023360:	b2c9      	uxtb	r1, r1
 8023362:	71e1      	strb	r1, [r4, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8023364:	eb03 0281 	add.w	r2, r3, r1, lsl #2
        props[0] = style->prop1;
 8023368:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 802336c:	f823 c021 	strh.w	ip, [r3, r1, lsl #2]
        values[0] = value_tmp;
 8023370:	f843 0b04 	str.w	r0, [r3], #4
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8023374:	3202      	adds	r2, #2
 8023376:	4641      	mov	r1, r8
 8023378:	4630      	mov	r0, r6
 802337a:	47b8      	blx	r7
 802337c:	e7d8      	b.n	8023330 <lv_style_set_prop_internal+0xc2>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 802337e:	4603      	mov	r3, r0
 8023380:	1d02      	adds	r2, r0, #4
 8023382:	4641      	mov	r1, r8
 8023384:	4630      	mov	r0, r6
 8023386:	47b8      	blx	r7
            return;
 8023388:	e7da      	b.n	8023340 <lv_style_set_prop_internal+0xd2>
	...

0802338c <lv_style_set_prop>:
{
 802338c:	b508      	push	{r3, lr}
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 802338e:	4b02      	ldr	r3, [pc, #8]	; (8023398 <lv_style_set_prop+0xc>)
 8023390:	f7ff ff6d 	bl	802326e <lv_style_set_prop_internal>
}
 8023394:	bd08      	pop	{r3, pc}
 8023396:	bf00      	nop
 8023398:	08022f15 	.word	0x08022f15

0802339c <_lv_style_prop_lookup_flags>:
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 802339c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80233a0:	4298      	cmp	r0, r3
 80233a2:	d012      	beq.n	80233ca <_lv_style_prop_lookup_flags+0x2e>
    if(prop == LV_STYLE_PROP_INV) return 0;
 80233a4:	b198      	cbz	r0, 80233ce <_lv_style_prop_lookup_flags+0x32>
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 80233a6:	286f      	cmp	r0, #111	; 0x6f
 80233a8:	d90a      	bls.n	80233c0 <_lv_style_prop_lookup_flags+0x24>
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 80233aa:	4b0b      	ldr	r3, [pc, #44]	; (80233d8 <_lv_style_prop_lookup_flags+0x3c>)
 80233ac:	681b      	ldr	r3, [r3, #0]
 80233ae:	b183      	cbz	r3, 80233d2 <_lv_style_prop_lookup_flags+0x36>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 80233b0:	3870      	subs	r0, #112	; 0x70
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 80233b2:	b280      	uxth	r0, r0
 80233b4:	4a09      	ldr	r2, [pc, #36]	; (80233dc <_lv_style_prop_lookup_flags+0x40>)
 80233b6:	6812      	ldr	r2, [r2, #0]
 80233b8:	4290      	cmp	r0, r2
 80233ba:	d304      	bcc.n	80233c6 <_lv_style_prop_lookup_flags+0x2a>
    return 0;
 80233bc:	2000      	movs	r0, #0
}
 80233be:	4770      	bx	lr
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 80233c0:	4b07      	ldr	r3, [pc, #28]	; (80233e0 <_lv_style_prop_lookup_flags+0x44>)
 80233c2:	5c18      	ldrb	r0, [r3, r0]
 80233c4:	4770      	bx	lr
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 80233c6:	5c18      	ldrb	r0, [r3, r0]
 80233c8:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80233ca:	201f      	movs	r0, #31
 80233cc:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 80233ce:	2000      	movs	r0, #0
 80233d0:	4770      	bx	lr
    return 0;
 80233d2:	2000      	movs	r0, #0
 80233d4:	4770      	bx	lr
 80233d6:	bf00      	nop
 80233d8:	20002978 	.word	0x20002978
 80233dc:	2000c21c 	.word	0x2000c21c
 80233e0:	08033530 	.word	0x08033530

080233e4 <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 80233e4:	b508      	push	{r3, lr}
 80233e6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 80233e8:	2101      	movs	r1, #1
 80233ea:	f7ff ffcf 	bl	802338c <lv_style_set_prop>
}
 80233ee:	bd08      	pop	{r3, pc}

080233f0 <lv_style_set_max_width>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_WIDTH, v);
}

void lv_style_set_max_width(lv_style_t * style, lv_coord_t value)
{
 80233f0:	b508      	push	{r3, lr}
 80233f2:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 80233f4:	2103      	movs	r1, #3
 80233f6:	f7ff ffc9 	bl	802338c <lv_style_set_prop>
}
 80233fa:	bd08      	pop	{r3, pc}

080233fc <lv_style_set_height>:

void lv_style_set_height(lv_style_t * style, lv_coord_t value)
{
 80233fc:	b508      	push	{r3, lr}
 80233fe:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 8023400:	2104      	movs	r1, #4
 8023402:	f7ff ffc3 	bl	802338c <lv_style_set_prop>
}
 8023406:	bd08      	pop	{r3, pc}

08023408 <lv_style_set_max_height>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_HEIGHT, v);
}

void lv_style_set_max_height(lv_style_t * style, lv_coord_t value)
{
 8023408:	b508      	push	{r3, lr}
 802340a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 802340c:	2106      	movs	r1, #6
 802340e:	f7ff ffbd 	bl	802338c <lv_style_set_prop>
}
 8023412:	bd08      	pop	{r3, pc}

08023414 <lv_style_set_transform_width>:
    };
    lv_style_set_prop(style, LV_STYLE_ALIGN, v);
}

void lv_style_set_transform_width(lv_style_t * style, lv_coord_t value)
{
 8023414:	b508      	push	{r3, lr}
 8023416:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8023418:	2168      	movs	r1, #104	; 0x68
 802341a:	f7ff ffb7 	bl	802338c <lv_style_set_prop>
}
 802341e:	bd08      	pop	{r3, pc}

08023420 <lv_style_set_transform_height>:

void lv_style_set_transform_height(lv_style_t * style, lv_coord_t value)
{
 8023420:	b508      	push	{r3, lr}
 8023422:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8023424:	2169      	movs	r1, #105	; 0x69
 8023426:	f7ff ffb1 	bl	802338c <lv_style_set_prop>
}
 802342a:	bd08      	pop	{r3, pc}

0802342c <lv_style_set_pad_top>:
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_PIVOT_Y, v);
}

void lv_style_set_pad_top(lv_style_t * style, lv_coord_t value)
{
 802342c:	b508      	push	{r3, lr}
 802342e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 8023430:	2110      	movs	r1, #16
 8023432:	f7ff ffab 	bl	802338c <lv_style_set_prop>
}
 8023436:	bd08      	pop	{r3, pc}

08023438 <lv_style_set_pad_bottom>:

void lv_style_set_pad_bottom(lv_style_t * style, lv_coord_t value)
{
 8023438:	b508      	push	{r3, lr}
 802343a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 802343c:	2111      	movs	r1, #17
 802343e:	f7ff ffa5 	bl	802338c <lv_style_set_prop>
}
 8023442:	bd08      	pop	{r3, pc}

08023444 <lv_style_set_pad_left>:

void lv_style_set_pad_left(lv_style_t * style, lv_coord_t value)
{
 8023444:	b508      	push	{r3, lr}
 8023446:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8023448:	2112      	movs	r1, #18
 802344a:	f7ff ff9f 	bl	802338c <lv_style_set_prop>
}
 802344e:	bd08      	pop	{r3, pc}

08023450 <lv_style_set_pad_right>:

void lv_style_set_pad_right(lv_style_t * style, lv_coord_t value)
{
 8023450:	b508      	push	{r3, lr}
 8023452:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8023454:	2113      	movs	r1, #19
 8023456:	f7ff ff99 	bl	802338c <lv_style_set_prop>
}
 802345a:	bd08      	pop	{r3, pc}

0802345c <lv_style_set_pad_row>:

void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 802345c:	b508      	push	{r3, lr}
 802345e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 8023460:	2114      	movs	r1, #20
 8023462:	f7ff ff93 	bl	802338c <lv_style_set_prop>
}
 8023466:	bd08      	pop	{r3, pc}

08023468 <lv_style_set_pad_column>:

void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value)
{
 8023468:	b508      	push	{r3, lr}
 802346a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 802346c:	2115      	movs	r1, #21
 802346e:	f7ff ff8d 	bl	802338c <lv_style_set_prop>
}
 8023472:	bd08      	pop	{r3, pc}

08023474 <lv_style_set_bg_color>:

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8023474:	b500      	push	{lr}
 8023476:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8023478:	2300      	movs	r3, #0
 802347a:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 802347e:	b28a      	uxth	r2, r1
 8023480:	2120      	movs	r1, #32
 8023482:	f7ff ff83 	bl	802338c <lv_style_set_prop>
}
 8023486:	b003      	add	sp, #12
 8023488:	f85d fb04 	ldr.w	pc, [sp], #4

0802348c <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 802348c:	b508      	push	{r3, lr}
 802348e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8023490:	2121      	movs	r1, #33	; 0x21
 8023492:	f7ff ff7b 	bl	802338c <lv_style_set_prop>
}
 8023496:	bd08      	pop	{r3, pc}

08023498 <lv_style_set_bg_grad_color>:

void lv_style_set_bg_grad_color(lv_style_t * style, lv_color_t value)
{
 8023498:	b500      	push	{lr}
 802349a:	b083      	sub	sp, #12
    lv_style_value_t v = {
 802349c:	2300      	movs	r3, #0
 802349e:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 80234a2:	b28a      	uxth	r2, r1
 80234a4:	2122      	movs	r1, #34	; 0x22
 80234a6:	f7ff ff71 	bl	802338c <lv_style_set_prop>
}
 80234aa:	b003      	add	sp, #12
 80234ac:	f85d fb04 	ldr.w	pc, [sp], #4

080234b0 <lv_style_set_bg_img_src>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_DITHER_MODE, v);
}

void lv_style_set_bg_img_src(lv_style_t * style, const void * value)
{
 80234b0:	b508      	push	{r3, lr}
 80234b2:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 80234b4:	2128      	movs	r1, #40	; 0x28
 80234b6:	f7ff ff69 	bl	802338c <lv_style_set_prop>
}
 80234ba:	bd08      	pop	{r3, pc}

080234bc <lv_style_set_border_color>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_TILED, v);
}

void lv_style_set_border_color(lv_style_t * style, lv_color_t value)
{
 80234bc:	b500      	push	{lr}
 80234be:	b083      	sub	sp, #12
    lv_style_value_t v = {
 80234c0:	2300      	movs	r3, #0
 80234c2:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 80234c6:	b28a      	uxth	r2, r1
 80234c8:	2130      	movs	r1, #48	; 0x30
 80234ca:	f7ff ff5f 	bl	802338c <lv_style_set_prop>
}
 80234ce:	b003      	add	sp, #12
 80234d0:	f85d fb04 	ldr.w	pc, [sp], #4

080234d4 <lv_style_set_border_opa>:

void lv_style_set_border_opa(lv_style_t * style, lv_opa_t value)
{
 80234d4:	b508      	push	{r3, lr}
 80234d6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_OPA, v);
 80234d8:	2131      	movs	r1, #49	; 0x31
 80234da:	f7ff ff57 	bl	802338c <lv_style_set_prop>
}
 80234de:	bd08      	pop	{r3, pc}

080234e0 <lv_style_set_border_width>:

void lv_style_set_border_width(lv_style_t * style, lv_coord_t value)
{
 80234e0:	b508      	push	{r3, lr}
 80234e2:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 80234e4:	2132      	movs	r1, #50	; 0x32
 80234e6:	f7ff ff51 	bl	802338c <lv_style_set_prop>
}
 80234ea:	bd08      	pop	{r3, pc}

080234ec <lv_style_set_border_side>:

void lv_style_set_border_side(lv_style_t * style, lv_border_side_t value)
{
 80234ec:	b508      	push	{r3, lr}
 80234ee:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 80234f0:	2133      	movs	r1, #51	; 0x33
 80234f2:	f7ff ff4b 	bl	802338c <lv_style_set_prop>
}
 80234f6:	bd08      	pop	{r3, pc}

080234f8 <lv_style_set_border_post>:

void lv_style_set_border_post(lv_style_t * style, bool value)
{
 80234f8:	b508      	push	{r3, lr}
 80234fa:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 80234fc:	2134      	movs	r1, #52	; 0x34
 80234fe:	f7ff ff45 	bl	802338c <lv_style_set_prop>
}
 8023502:	bd08      	pop	{r3, pc}

08023504 <lv_style_set_outline_width>:

void lv_style_set_outline_width(lv_style_t * style, lv_coord_t value)
{
 8023504:	b508      	push	{r3, lr}
 8023506:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 8023508:	2135      	movs	r1, #53	; 0x35
 802350a:	f7ff ff3f 	bl	802338c <lv_style_set_prop>
}
 802350e:	bd08      	pop	{r3, pc}

08023510 <lv_style_set_outline_color>:

void lv_style_set_outline_color(lv_style_t * style, lv_color_t value)
{
 8023510:	b500      	push	{lr}
 8023512:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8023514:	2300      	movs	r3, #0
 8023516:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 802351a:	b28a      	uxth	r2, r1
 802351c:	2136      	movs	r1, #54	; 0x36
 802351e:	f7ff ff35 	bl	802338c <lv_style_set_prop>
}
 8023522:	b003      	add	sp, #12
 8023524:	f85d fb04 	ldr.w	pc, [sp], #4

08023528 <lv_style_set_outline_opa>:

void lv_style_set_outline_opa(lv_style_t * style, lv_opa_t value)
{
 8023528:	b508      	push	{r3, lr}
 802352a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 802352c:	2137      	movs	r1, #55	; 0x37
 802352e:	f7ff ff2d 	bl	802338c <lv_style_set_prop>
}
 8023532:	bd08      	pop	{r3, pc}

08023534 <lv_style_set_outline_pad>:

void lv_style_set_outline_pad(lv_style_t * style, lv_coord_t value)
{
 8023534:	b508      	push	{r3, lr}
 8023536:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8023538:	2138      	movs	r1, #56	; 0x38
 802353a:	f7ff ff27 	bl	802338c <lv_style_set_prop>
}
 802353e:	bd08      	pop	{r3, pc}

08023540 <lv_style_set_shadow_width>:

void lv_style_set_shadow_width(lv_style_t * style, lv_coord_t value)
{
 8023540:	b508      	push	{r3, lr}
 8023542:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8023544:	2140      	movs	r1, #64	; 0x40
 8023546:	f7ff ff21 	bl	802338c <lv_style_set_prop>
}
 802354a:	bd08      	pop	{r3, pc}

0802354c <lv_style_set_shadow_ofs_y>:
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_X, v);
}

void lv_style_set_shadow_ofs_y(lv_style_t * style, lv_coord_t value)
{
 802354c:	b508      	push	{r3, lr}
 802354e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8023550:	2142      	movs	r1, #66	; 0x42
 8023552:	f7ff ff1b 	bl	802338c <lv_style_set_prop>
}
 8023556:	bd08      	pop	{r3, pc}

08023558 <lv_style_set_shadow_spread>:

void lv_style_set_shadow_spread(lv_style_t * style, lv_coord_t value)
{
 8023558:	b508      	push	{r3, lr}
 802355a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 802355c:	2143      	movs	r1, #67	; 0x43
 802355e:	f7ff ff15 	bl	802338c <lv_style_set_prop>
}
 8023562:	bd08      	pop	{r3, pc}

08023564 <lv_style_set_shadow_color>:

void lv_style_set_shadow_color(lv_style_t * style, lv_color_t value)
{
 8023564:	b500      	push	{lr}
 8023566:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8023568:	2300      	movs	r3, #0
 802356a:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 802356e:	b28a      	uxth	r2, r1
 8023570:	2144      	movs	r1, #68	; 0x44
 8023572:	f7ff ff0b 	bl	802338c <lv_style_set_prop>
}
 8023576:	b003      	add	sp, #12
 8023578:	f85d fb04 	ldr.w	pc, [sp], #4

0802357c <lv_style_set_shadow_opa>:

void lv_style_set_shadow_opa(lv_style_t * style, lv_opa_t value)
{
 802357c:	b508      	push	{r3, lr}
 802357e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OPA, v);
 8023580:	2145      	movs	r1, #69	; 0x45
 8023582:	f7ff ff03 	bl	802338c <lv_style_set_prop>
}
 8023586:	bd08      	pop	{r3, pc}

08023588 <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 8023588:	b508      	push	{r3, lr}
 802358a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 802358c:	2149      	movs	r1, #73	; 0x49
 802358e:	f7ff fefd 	bl	802338c <lv_style_set_prop>
}
 8023592:	bd08      	pop	{r3, pc}

08023594 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8023594:	b500      	push	{lr}
 8023596:	b083      	sub	sp, #12
    lv_style_value_t v = {
 8023598:	2300      	movs	r3, #0
 802359a:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 802359e:	b28a      	uxth	r2, r1
 80235a0:	214d      	movs	r1, #77	; 0x4d
 80235a2:	f7ff fef3 	bl	802338c <lv_style_set_prop>
}
 80235a6:	b003      	add	sp, #12
 80235a8:	f85d fb04 	ldr.w	pc, [sp], #4

080235ac <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 80235ac:	b508      	push	{r3, lr}
 80235ae:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 80235b0:	2150      	movs	r1, #80	; 0x50
 80235b2:	f7ff feeb 	bl	802338c <lv_style_set_prop>
}
 80235b6:	bd08      	pop	{r3, pc}

080235b8 <lv_style_set_arc_rounded>:

void lv_style_set_arc_rounded(lv_style_t * style, bool value)
{
 80235b8:	b508      	push	{r3, lr}
 80235ba:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 80235bc:	2151      	movs	r1, #81	; 0x51
 80235be:	f7ff fee5 	bl	802338c <lv_style_set_prop>
}
 80235c2:	bd08      	pop	{r3, pc}

080235c4 <lv_style_set_arc_color>:

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 80235c4:	b500      	push	{lr}
 80235c6:	b083      	sub	sp, #12
    lv_style_value_t v = {
 80235c8:	2300      	movs	r3, #0
 80235ca:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 80235ce:	b28a      	uxth	r2, r1
 80235d0:	2152      	movs	r1, #82	; 0x52
 80235d2:	f7ff fedb 	bl	802338c <lv_style_set_prop>
}
 80235d6:	b003      	add	sp, #12
 80235d8:	f85d fb04 	ldr.w	pc, [sp], #4

080235dc <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 80235dc:	b500      	push	{lr}
 80235de:	b083      	sub	sp, #12
    lv_style_value_t v = {
 80235e0:	2300      	movs	r3, #0
 80235e2:	f8ad 3000 	strh.w	r3, [sp]
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 80235e6:	b28a      	uxth	r2, r1
 80235e8:	2155      	movs	r1, #85	; 0x55
 80235ea:	f7ff fecf 	bl	802338c <lv_style_set_prop>
}
 80235ee:	b003      	add	sp, #12
 80235f0:	f85d fb04 	ldr.w	pc, [sp], #4

080235f4 <lv_style_set_text_font>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 80235f4:	b508      	push	{r3, lr}
 80235f6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 80235f8:	2157      	movs	r1, #87	; 0x57
 80235fa:	f7ff fec7 	bl	802338c <lv_style_set_prop>
}
 80235fe:	bd08      	pop	{r3, pc}

08023600 <lv_style_set_text_line_space>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LETTER_SPACE, v);
}

void lv_style_set_text_line_space(lv_style_t * style, lv_coord_t value)
{
 8023600:	b508      	push	{r3, lr}
 8023602:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 8023604:	2159      	movs	r1, #89	; 0x59
 8023606:	f7ff fec1 	bl	802338c <lv_style_set_prop>
}
 802360a:	bd08      	pop	{r3, pc}

0802360c <lv_style_set_text_align>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_DECOR, v);
}

void lv_style_set_text_align(lv_style_t * style, lv_text_align_t value)
{
 802360c:	b508      	push	{r3, lr}
 802360e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 8023610:	215b      	movs	r1, #91	; 0x5b
 8023612:	f7ff febb 	bl	802338c <lv_style_set_prop>
}
 8023616:	bd08      	pop	{r3, pc}

08023618 <lv_style_set_radius>:

void lv_style_set_radius(lv_style_t * style, lv_coord_t value)
{
 8023618:	b508      	push	{r3, lr}
 802361a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 802361c:	210b      	movs	r1, #11
 802361e:	f7ff feb5 	bl	802338c <lv_style_set_prop>
}
 8023622:	bd08      	pop	{r3, pc}

08023624 <lv_style_set_clip_corner>:

void lv_style_set_clip_corner(lv_style_t * style, bool value)
{
 8023624:	b508      	push	{r3, lr}
 8023626:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 8023628:	2117      	movs	r1, #23
 802362a:	f7ff feaf 	bl	802338c <lv_style_set_prop>
}
 802362e:	bd08      	pop	{r3, pc}

08023630 <lv_style_set_color_filter_dsc>:
    };
    lv_style_set_prop(style, LV_STYLE_OPA, v);
}

void lv_style_set_color_filter_dsc(lv_style_t * style, const lv_color_filter_dsc_t * value)
{
 8023630:	b508      	push	{r3, lr}
 8023632:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 8023634:	2161      	movs	r1, #97	; 0x61
 8023636:	f7ff fea9 	bl	802338c <lv_style_set_prop>
}
 802363a:	bd08      	pop	{r3, pc}

0802363c <lv_style_set_color_filter_opa>:

void lv_style_set_color_filter_opa(lv_style_t * style, lv_opa_t value)
{
 802363c:	b508      	push	{r3, lr}
 802363e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 8023640:	2162      	movs	r1, #98	; 0x62
 8023642:	f7ff fea3 	bl	802338c <lv_style_set_prop>
}
 8023646:	bd08      	pop	{r3, pc}

08023648 <lv_style_set_anim_time>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM, v);
}

void lv_style_set_anim_time(lv_style_t * style, uint32_t value)
{
 8023648:	b508      	push	{r3, lr}
 802364a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 802364c:	2164      	movs	r1, #100	; 0x64
 802364e:	f7ff fe9d 	bl	802338c <lv_style_set_prop>
}
 8023652:	bd08      	pop	{r3, pc}

08023654 <lv_style_set_transition>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_SPEED, v);
}

void lv_style_set_transition(lv_style_t * style, const lv_style_transition_dsc_t * value)
{
 8023654:	b508      	push	{r3, lr}
 8023656:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 8023658:	2166      	movs	r1, #102	; 0x66
 802365a:	f7ff fe97 	bl	802338c <lv_style_set_prop>
}
 802365e:	bd08      	pop	{r3, pc}

08023660 <_lv_timer_core_init>:

/**
 * Init the lv_timer module
 */
void _lv_timer_core_init(void)
{
 8023660:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8023662:	2118      	movs	r1, #24
 8023664:	4803      	ldr	r0, [pc, #12]	; (8023674 <_lv_timer_core_init+0x14>)
 8023666:	f7fe faa2 	bl	8021bae <_lv_ll_init>
 * Enable or disable the whole lv_timer handling
 * @param en true: lv_timer handling is running, false: lv_timer handling is suspended
 */
void lv_timer_enable(bool en)
{
    lv_timer_run = en;
 802366a:	4b03      	ldr	r3, [pc, #12]	; (8023678 <_lv_timer_core_init+0x18>)
 802366c:	2201      	movs	r2, #1
 802366e:	701a      	strb	r2, [r3, #0]
}
 8023670:	bd08      	pop	{r3, pc}
 8023672:	bf00      	nop
 8023674:	20002984 	.word	0x20002984
 8023678:	2000c230 	.word	0x2000c230

0802367c <lv_timer_create>:
{
 802367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802367e:	4606      	mov	r6, r0
 8023680:	460f      	mov	r7, r1
 8023682:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8023684:	480b      	ldr	r0, [pc, #44]	; (80236b4 <lv_timer_create+0x38>)
 8023686:	f7fe fa9a 	bl	8021bbe <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 802368a:	b190      	cbz	r0, 80236b2 <lv_timer_create+0x36>
 802368c:	4604      	mov	r4, r0
    new_timer->period = period;
 802368e:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 8023690:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 8023692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023696:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8023698:	7d03      	ldrb	r3, [r0, #20]
 802369a:	f36f 0300 	bfc	r3, #0, #1
 802369e:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 80236a0:	f7fd faa5 	bl	8020bee <lv_tick_get>
 80236a4:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 80236a6:	60e5      	str	r5, [r4, #12]
    timer_created = true;
 80236a8:	4b03      	ldr	r3, [pc, #12]	; (80236b8 <lv_timer_create+0x3c>)
 80236aa:	2201      	movs	r2, #1
 80236ac:	701a      	strb	r2, [r3, #0]
}
 80236ae:	4620      	mov	r0, r4
 80236b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
 80236b2:	e7fe      	b.n	80236b2 <lv_timer_create+0x36>
 80236b4:	20002984 	.word	0x20002984
 80236b8:	2000c238 	.word	0x2000c238

080236bc <lv_timer_del>:
{
 80236bc:	b510      	push	{r4, lr}
 80236be:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 80236c0:	4601      	mov	r1, r0
 80236c2:	4805      	ldr	r0, [pc, #20]	; (80236d8 <lv_timer_del+0x1c>)
 80236c4:	f7fe fab9 	bl	8021c3a <_lv_ll_remove>
    timer_deleted = true;
 80236c8:	4b04      	ldr	r3, [pc, #16]	; (80236dc <lv_timer_del+0x20>)
 80236ca:	2201      	movs	r2, #1
 80236cc:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 80236ce:	4620      	mov	r0, r4
 80236d0:	f7fe fc4a 	bl	8021f68 <lv_mem_free>
}
 80236d4:	bd10      	pop	{r4, pc}
 80236d6:	bf00      	nop
 80236d8:	20002984 	.word	0x20002984
 80236dc:	2000c239 	.word	0x2000c239

080236e0 <lv_timer_handler>:
{
 80236e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e4:	b083      	sub	sp, #12
    if(already_running) {
 80236e6:	4b66      	ldr	r3, [pc, #408]	; (8023880 <lv_timer_handler+0x1a0>)
 80236e8:	781b      	ldrb	r3, [r3, #0]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d16d      	bne.n	80237ca <lv_timer_handler+0xea>
    already_running = true;
 80236ee:	4b64      	ldr	r3, [pc, #400]	; (8023880 <lv_timer_handler+0x1a0>)
 80236f0:	2201      	movs	r2, #1
 80236f2:	701a      	strb	r2, [r3, #0]
    if(lv_timer_run == false) {
 80236f4:	4b63      	ldr	r3, [pc, #396]	; (8023884 <lv_timer_handler+0x1a4>)
 80236f6:	781b      	ldrb	r3, [r3, #0]
 80236f8:	9300      	str	r3, [sp, #0]
 80236fa:	b923      	cbnz	r3, 8023706 <lv_timer_handler+0x26>
        already_running = false; /*Release mutex*/
 80236fc:	4b60      	ldr	r3, [pc, #384]	; (8023880 <lv_timer_handler+0x1a0>)
 80236fe:	2200      	movs	r2, #0
 8023700:	701a      	strb	r2, [r3, #0]
        return 1;
 8023702:	2501      	movs	r5, #1
 8023704:	e062      	b.n	80237cc <lv_timer_handler+0xec>
    uint32_t handler_start = lv_tick_get();
 8023706:	f7fd fa72 	bl	8020bee <lv_tick_get>
    if(handler_start == 0) {
 802370a:	9001      	str	r0, [sp, #4]
 802370c:	b930      	cbnz	r0, 802371c <lv_timer_handler+0x3c>
        run_cnt++;
 802370e:	4b5e      	ldr	r3, [pc, #376]	; (8023888 <lv_timer_handler+0x1a8>)
 8023710:	681b      	ldr	r3, [r3, #0]
 8023712:	3301      	adds	r3, #1
        if(run_cnt > 100) {
 8023714:	2b64      	cmp	r3, #100	; 0x64
 8023716:	d80a      	bhi.n	802372e <lv_timer_handler+0x4e>
        run_cnt++;
 8023718:	4a5b      	ldr	r2, [pc, #364]	; (8023888 <lv_timer_handler+0x1a8>)
 802371a:	6013      	str	r3, [r2, #0]
        timer_deleted             = false;
 802371c:	4f5b      	ldr	r7, [pc, #364]	; (802388c <lv_timer_handler+0x1ac>)
 802371e:	f04f 0b00 	mov.w	fp, #0
        timer_created             = false;
 8023722:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8023890 <lv_timer_handler+0x1b0>
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8023726:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8023894 <lv_timer_handler+0x1b4>
 802372a:	4e5b      	ldr	r6, [pc, #364]	; (8023898 <lv_timer_handler+0x1b8>)
 802372c:	e065      	b.n	80237fa <lv_timer_handler+0x11a>
            run_cnt = 0;
 802372e:	4b56      	ldr	r3, [pc, #344]	; (8023888 <lv_timer_handler+0x1a8>)
 8023730:	2200      	movs	r2, #0
 8023732:	601a      	str	r2, [r3, #0]
 8023734:	e7f2      	b.n	802371c <lv_timer_handler+0x3c>
        /* Decrement the repeat count before executing the timer_cb.
         * If any timer is deleted `if(timer->repeat_count == 0)` is not executed below
         * but at least the repeat count is zero and the timer can be deleted in the next round*/
        int32_t original_repeat_count = timer->repeat_count;
        if(timer->repeat_count > 0) timer->repeat_count--;
        timer->last_run = lv_tick_get();
 8023736:	f7fd fa5a 	bl	8020bee <lv_tick_get>
 802373a:	6068      	str	r0, [r5, #4]
        TIMER_TRACE("calling timer callback: %p", *((void **)&timer->timer_cb));
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 802373c:	68ab      	ldr	r3, [r5, #8]
 802373e:	2b00      	cmp	r3, #0
 8023740:	d057      	beq.n	80237f2 <lv_timer_handler+0x112>
 8023742:	f1b9 0f00 	cmp.w	r9, #0
 8023746:	d054      	beq.n	80237f2 <lv_timer_handler+0x112>
 8023748:	e051      	b.n	80237ee <lv_timer_handler+0x10e>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 802374a:	4621      	mov	r1, r4
 802374c:	4630      	mov	r0, r6
 802374e:	f7fe fabf 	bl	8021cd0 <_lv_ll_get_next>
    while(next) {
 8023752:	4604      	mov	r4, r0
 8023754:	b188      	cbz	r0, 802377a <lv_timer_handler+0x9a>
        if(!next->paused) {
 8023756:	7d23      	ldrb	r3, [r4, #20]
 8023758:	f013 0f01 	tst.w	r3, #1
 802375c:	d1f5      	bne.n	802374a <lv_timer_handler+0x6a>
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 802375e:	6860      	ldr	r0, [r4, #4]
 8023760:	f7fd fa49 	bl	8020bf6 <lv_tick_elaps>
    if(elp >= timer->period)
 8023764:	6823      	ldr	r3, [r4, #0]
 8023766:	4298      	cmp	r0, r3
        return 0;
    return timer->period - elp;
 8023768:	bf34      	ite	cc
 802376a:	1a1b      	subcc	r3, r3, r0
        return 0;
 802376c:	463b      	movcs	r3, r7
            if(delay < time_till_next)
 802376e:	429d      	cmp	r5, r3
 8023770:	bf28      	it	cs
 8023772:	461d      	movcs	r5, r3
 8023774:	e7e9      	b.n	802374a <lv_timer_handler+0x6a>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8023776:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    busy_time += lv_tick_elaps(handler_start);
 802377a:	9801      	ldr	r0, [sp, #4]
 802377c:	f7fd fa3b 	bl	8020bf6 <lv_tick_elaps>
 8023780:	4a46      	ldr	r2, [pc, #280]	; (802389c <lv_timer_handler+0x1bc>)
 8023782:	6813      	ldr	r3, [r2, #0]
 8023784:	4403      	add	r3, r0
 8023786:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8023788:	4b45      	ldr	r3, [pc, #276]	; (80238a0 <lv_timer_handler+0x1c0>)
 802378a:	6818      	ldr	r0, [r3, #0]
 802378c:	f7fd fa33 	bl	8020bf6 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8023790:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8023794:	d315      	bcc.n	80237c2 <lv_timer_handler+0xe2>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 8023796:	4b41      	ldr	r3, [pc, #260]	; (802389c <lv_timer_handler+0x1bc>)
 8023798:	681b      	ldr	r3, [r3, #0]
 802379a:	2264      	movs	r2, #100	; 0x64
 802379c:	fb02 f303 	mul.w	r3, r2, r3
 80237a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80237a4:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 80237a6:	4293      	cmp	r3, r2
 80237a8:	bf9a      	itte	ls
 80237aa:	1ad3      	subls	r3, r2, r3
 80237ac:	b2db      	uxtbls	r3, r3
 80237ae:	2300      	movhi	r3, #0
 80237b0:	4a3c      	ldr	r2, [pc, #240]	; (80238a4 <lv_timer_handler+0x1c4>)
 80237b2:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 80237b4:	4b39      	ldr	r3, [pc, #228]	; (802389c <lv_timer_handler+0x1bc>)
 80237b6:	2200      	movs	r2, #0
 80237b8:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 80237ba:	f7fd fa18 	bl	8020bee <lv_tick_get>
 80237be:	4b38      	ldr	r3, [pc, #224]	; (80238a0 <lv_timer_handler+0x1c0>)
 80237c0:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
 80237c2:	4b2f      	ldr	r3, [pc, #188]	; (8023880 <lv_timer_handler+0x1a0>)
 80237c4:	2200      	movs	r2, #0
 80237c6:	701a      	strb	r2, [r3, #0]
    return time_till_next;
 80237c8:	e000      	b.n	80237cc <lv_timer_handler+0xec>
        return 1;
 80237ca:	2501      	movs	r5, #1
}
 80237cc:	4628      	mov	r0, r5
 80237ce:	b003      	add	sp, #12
 80237d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int32_t original_repeat_count = timer->repeat_count;
 80237d4:	f8d5 9010 	ldr.w	r9, [r5, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 80237d8:	f1b9 0f00 	cmp.w	r9, #0
 80237dc:	ddab      	ble.n	8023736 <lv_timer_handler+0x56>
 80237de:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80237e2:	612b      	str	r3, [r5, #16]
        timer->last_run = lv_tick_get();
 80237e4:	f7fd fa03 	bl	8020bee <lv_tick_get>
 80237e8:	6068      	str	r0, [r5, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 80237ea:	68ab      	ldr	r3, [r5, #8]
 80237ec:	b10b      	cbz	r3, 80237f2 <lv_timer_handler+0x112>
 80237ee:	4628      	mov	r0, r5
 80237f0:	4798      	blx	r3
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 80237f2:	783b      	ldrb	r3, [r7, #0]
 80237f4:	b1b3      	cbz	r3, 8023824 <lv_timer_handler+0x144>
    } while(LV_GC_ROOT(_lv_timer_act));
 80237f6:	6833      	ldr	r3, [r6, #0]
 80237f8:	b14b      	cbz	r3, 802380e <lv_timer_handler+0x12e>
        timer_deleted             = false;
 80237fa:	f887 b000 	strb.w	fp, [r7]
        timer_created             = false;
 80237fe:	f88a b000 	strb.w	fp, [sl]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8023802:	4640      	mov	r0, r8
 8023804:	f7fe fa5c 	bl	8021cc0 <_lv_ll_get_head>
 8023808:	4604      	mov	r4, r0
 802380a:	6030      	str	r0, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 802380c:	b9f0      	cbnz	r0, 802384c <lv_timer_handler+0x16c>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 802380e:	4821      	ldr	r0, [pc, #132]	; (8023894 <lv_timer_handler+0x1b4>)
 8023810:	f7fe fa56 	bl	8021cc0 <_lv_ll_get_head>
    while(next) {
 8023814:	4604      	mov	r4, r0
 8023816:	2800      	cmp	r0, #0
 8023818:	d0ad      	beq.n	8023776 <lv_timer_handler+0x96>
    uint32_t time_till_next = LV_NO_TIMER_READY;
 802381a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        return 0;
 802381e:	2700      	movs	r7, #0
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 8023820:	4e1c      	ldr	r6, [pc, #112]	; (8023894 <lv_timer_handler+0x1b4>)
 8023822:	e798      	b.n	8023756 <lv_timer_handler+0x76>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8023824:	692b      	ldr	r3, [r5, #16]
 8023826:	b93b      	cbnz	r3, 8023838 <lv_timer_handler+0x158>
 8023828:	f8dd 9000 	ldr.w	r9, [sp]
            lv_timer_del(timer);
 802382c:	4628      	mov	r0, r5
 802382e:	f7ff ff45 	bl	80236bc <lv_timer_del>
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8023832:	f1b9 0f00 	cmp.w	r9, #0
 8023836:	d006      	beq.n	8023846 <lv_timer_handler+0x166>
                if(timer_created || timer_deleted) {
 8023838:	f89a 3000 	ldrb.w	r3, [sl]
 802383c:	2b00      	cmp	r3, #0
 802383e:	d1da      	bne.n	80237f6 <lv_timer_handler+0x116>
 8023840:	783b      	ldrb	r3, [r7, #0]
 8023842:	2b00      	cmp	r3, #0
 8023844:	d1d7      	bne.n	80237f6 <lv_timer_handler+0x116>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 8023846:	6034      	str	r4, [r6, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 8023848:	2c00      	cmp	r4, #0
 802384a:	d0e0      	beq.n	802380e <lv_timer_handler+0x12e>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 802384c:	4621      	mov	r1, r4
 802384e:	4640      	mov	r0, r8
 8023850:	f7fe fa3e 	bl	8021cd0 <_lv_ll_get_next>
 8023854:	4604      	mov	r4, r0
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8023856:	6835      	ldr	r5, [r6, #0]
    if(timer->paused) return false;
 8023858:	7d2b      	ldrb	r3, [r5, #20]
 802385a:	f013 0f01 	tst.w	r3, #1
 802385e:	d1f2      	bne.n	8023846 <lv_timer_handler+0x166>
    uint32_t elp = lv_tick_elaps(timer->last_run);
 8023860:	6868      	ldr	r0, [r5, #4]
 8023862:	f7fd f9c8 	bl	8020bf6 <lv_tick_elaps>
    if(elp >= timer->period)
 8023866:	682b      	ldr	r3, [r5, #0]
 8023868:	4298      	cmp	r0, r3
 802386a:	d2b3      	bcs.n	80237d4 <lv_timer_handler+0xf4>
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 802386c:	f897 9000 	ldrb.w	r9, [r7]
 8023870:	f1b9 0f00 	cmp.w	r9, #0
 8023874:	d1e7      	bne.n	8023846 <lv_timer_handler+0x166>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 8023876:	692b      	ldr	r3, [r5, #16]
 8023878:	2b00      	cmp	r3, #0
 802387a:	d0d7      	beq.n	802382c <lv_timer_handler+0x14c>
 802387c:	e7e3      	b.n	8023846 <lv_timer_handler+0x166>
 802387e:	bf00      	nop
 8023880:	2000c220 	.word	0x2000c220
 8023884:	2000c230 	.word	0x2000c230
 8023888:	2000c234 	.word	0x2000c234
 802388c:	2000c239 	.word	0x2000c239
 8023890:	2000c238 	.word	0x2000c238
 8023894:	20002984 	.word	0x20002984
 8023898:	20002980 	.word	0x20002980
 802389c:	2000c224 	.word	0x2000c224
 80238a0:	2000c22c 	.word	0x2000c22c
 80238a4:	2000c228 	.word	0x2000c228

080238a8 <lv_timer_pause>:
    timer->paused = true;
 80238a8:	7d03      	ldrb	r3, [r0, #20]
 80238aa:	f043 0301 	orr.w	r3, r3, #1
 80238ae:	7503      	strb	r3, [r0, #20]
}
 80238b0:	4770      	bx	lr

080238b2 <lv_timer_resume>:
    timer->paused = false;
 80238b2:	7d03      	ldrb	r3, [r0, #20]
 80238b4:	f36f 0300 	bfc	r3, #0, #1
 80238b8:	7503      	strb	r3, [r0, #20]
}
 80238ba:	4770      	bx	lr

080238bc <lv_timer_ready>:
{
 80238bc:	b510      	push	{r4, lr}
 80238be:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 80238c0:	f7fd f995 	bl	8020bee <lv_tick_get>
 80238c4:	6823      	ldr	r3, [r4, #0]
 80238c6:	43db      	mvns	r3, r3
 80238c8:	4403      	add	r3, r0
 80238ca:	6063      	str	r3, [r4, #4]
}
 80238cc:	bd10      	pop	{r4, pc}
	...

080238d0 <lv_timer_get_idle>:
}
 80238d0:	4b01      	ldr	r3, [pc, #4]	; (80238d8 <lv_timer_get_idle+0x8>)
 80238d2:	7818      	ldrb	r0, [r3, #0]
 80238d4:	4770      	bx	lr
 80238d6:	bf00      	nop
 80238d8:	2000c228 	.word	0x2000c228

080238dc <adjust_request_size>:
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
    size_t adjust = 0;
    if(size) {
 80238dc:	4603      	mov	r3, r0
 80238de:	b908      	cbnz	r0, 80238e4 <adjust_request_size+0x8>
        if(aligned < block_size_max) {
            adjust = tlsf_max(aligned, block_size_min);
        }
    }
    return adjust;
}
 80238e0:	4618      	mov	r0, r3
 80238e2:	4770      	bx	lr
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 80238e4:	1e4a      	subs	r2, r1, #1
 80238e6:	ea11 0002 	ands.w	r0, r1, r2
 80238ea:	d000      	beq.n	80238ee <adjust_request_size+0x12>
 80238ec:	e7fe      	b.n	80238ec <adjust_request_size+0x10>
    return (x + (align - 1)) & ~(align - 1);
 80238ee:	4413      	add	r3, r2
 80238f0:	4249      	negs	r1, r1
 80238f2:	400b      	ands	r3, r1
        if(aligned < block_size_max) {
 80238f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80238f8:	d203      	bcs.n	8023902 <adjust_request_size+0x26>
            adjust = tlsf_max(aligned, block_size_min);
 80238fa:	2b0c      	cmp	r3, #12
 80238fc:	bf38      	it	cc
 80238fe:	230c      	movcc	r3, #12
 8023900:	e7ee      	b.n	80238e0 <adjust_request_size+0x4>
    size_t adjust = 0;
 8023902:	4603      	mov	r3, r0
 8023904:	e7ec      	b.n	80238e0 <adjust_request_size+0x4>

08023906 <remove_free_block>:
    return control->blocks[fl][sl];
}

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8023906:	b510      	push	{r4, lr}
 8023908:	4696      	mov	lr, r2
    block_header_t * prev = block->prev_free;
 802390a:	68ca      	ldr	r2, [r1, #12]
    block_header_t * next = block->next_free;
    tlsf_assert(prev && "prev_free field can not be null");
 802390c:	b16a      	cbz	r2, 802392a <remove_free_block+0x24>
 802390e:	4604      	mov	r4, r0
    block_header_t * next = block->next_free;
 8023910:	6888      	ldr	r0, [r1, #8]
    tlsf_assert(next && "next_free field can not be null");
 8023912:	b158      	cbz	r0, 802392c <remove_free_block+0x26>
    next->prev_free = prev;
 8023914:	60c2      	str	r2, [r0, #12]
    prev->next_free = next;
 8023916:	6090      	str	r0, [r2, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 8023918:	eb03 1c4e 	add.w	ip, r3, lr, lsl #5
 802391c:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8023920:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 8023924:	428a      	cmp	r2, r1
 8023926:	d002      	beq.n	802392e <remove_free_block+0x28>
            if(!control->sl_bitmap[fl]) {
                control->fl_bitmap &= ~(1U << fl);
            }
        }
    }
}
 8023928:	bd10      	pop	{r4, pc}
    tlsf_assert(prev && "prev_free field can not be null");
 802392a:	e7fe      	b.n	802392a <remove_free_block+0x24>
    tlsf_assert(next && "next_free field can not be null");
 802392c:	e7fe      	b.n	802392c <remove_free_block+0x26>
        control->blocks[fl][sl] = next;
 802392e:	f8cc 003c 	str.w	r0, [ip, #60]	; 0x3c
        if(next == &control->block_null) {
 8023932:	4284      	cmp	r4, r0
 8023934:	d1f8      	bne.n	8023928 <remove_free_block+0x22>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8023936:	eb04 018e 	add.w	r1, r4, lr, lsl #2
 802393a:	2201      	movs	r2, #1
 802393c:	409a      	lsls	r2, r3
 802393e:	694b      	ldr	r3, [r1, #20]
 8023940:	ea23 0302 	bic.w	r3, r3, r2
 8023944:	614b      	str	r3, [r1, #20]
            if(!control->sl_bitmap[fl]) {
 8023946:	2b00      	cmp	r3, #0
 8023948:	d1ee      	bne.n	8023928 <remove_free_block+0x22>
                control->fl_bitmap &= ~(1U << fl);
 802394a:	2301      	movs	r3, #1
 802394c:	fa03 f20e 	lsl.w	r2, r3, lr
 8023950:	6923      	ldr	r3, [r4, #16]
 8023952:	ea23 0302 	bic.w	r3, r3, r2
 8023956:	6123      	str	r3, [r4, #16]
}
 8023958:	e7e6      	b.n	8023928 <remove_free_block+0x22>

0802395a <mapping_insert>:
    if(size < SMALL_BLOCK_SIZE) {
 802395a:	287f      	cmp	r0, #127	; 0x7f
 802395c:	d808      	bhi.n	8023970 <mapping_insert+0x16>
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 802395e:	4603      	mov	r3, r0
 8023960:	2800      	cmp	r0, #0
 8023962:	bfb8      	it	lt
 8023964:	1cc3      	addlt	r3, r0, #3
 8023966:	1098      	asrs	r0, r3, #2
        fl = 0;
 8023968:	2300      	movs	r3, #0
    *fli = fl;
 802396a:	600b      	str	r3, [r1, #0]
    *sli = sl;
 802396c:	6010      	str	r0, [r2, #0]
}
 802396e:	4770      	bx	lr
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8023970:	fab0 f380 	clz	r3, r0
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8023974:	f1c3 0c1a 	rsb	ip, r3, #26
 8023978:	fa20 f00c 	lsr.w	r0, r0, ip
 802397c:	f080 0020 	eor.w	r0, r0, #32
        fl -= (FL_INDEX_SHIFT - 1);
 8023980:	f1c3 0319 	rsb	r3, r3, #25
 8023984:	e7f1      	b.n	802396a <mapping_insert+0x10>

08023986 <block_remove>:
    control->sl_bitmap[fl] |= (1U << sl);
}

/* Remove a given block from the free list. */
static void block_remove(control_t * control, block_header_t * block)
{
 8023986:	b530      	push	{r4, r5, lr}
 8023988:	b083      	sub	sp, #12
 802398a:	4605      	mov	r5, r0
 802398c:	460c      	mov	r4, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 802398e:	6848      	ldr	r0, [r1, #4]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 8023990:	466a      	mov	r2, sp
 8023992:	a901      	add	r1, sp, #4
 8023994:	f020 0003 	bic.w	r0, r0, #3
 8023998:	f7ff ffdf 	bl	802395a <mapping_insert>
    remove_free_block(control, block, fl, sl);
 802399c:	9b00      	ldr	r3, [sp, #0]
 802399e:	9a01      	ldr	r2, [sp, #4]
 80239a0:	4621      	mov	r1, r4
 80239a2:	4628      	mov	r0, r5
 80239a4:	f7ff ffaf 	bl	8023906 <remove_free_block>
}
 80239a8:	b003      	add	sp, #12
 80239aa:	bd30      	pop	{r4, r5, pc}

080239ac <block_insert>:

/* Insert a given block into the free list. */
static void block_insert(control_t * control, block_header_t * block)
{
 80239ac:	b530      	push	{r4, r5, lr}
 80239ae:	b083      	sub	sp, #12
 80239b0:	4605      	mov	r5, r0
 80239b2:	460c      	mov	r4, r1
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 80239b4:	6848      	ldr	r0, [r1, #4]
    int fl, sl;
    mapping_insert(block_size(block), &fl, &sl);
 80239b6:	466a      	mov	r2, sp
 80239b8:	a901      	add	r1, sp, #4
 80239ba:	f020 0003 	bic.w	r0, r0, #3
 80239be:	f7ff ffcc 	bl	802395a <mapping_insert>
    insert_free_block(control, block, fl, sl);
 80239c2:	9901      	ldr	r1, [sp, #4]
 80239c4:	9800      	ldr	r0, [sp, #0]
    block_header_t * current = control->blocks[fl][sl];
 80239c6:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80239ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80239ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    tlsf_assert(current && "free list cannot have a null entry");
 80239d0:	b15a      	cbz	r2, 80239ea <block_insert+0x3e>
    block->next_free = current;
 80239d2:	60a2      	str	r2, [r4, #8]
    block->prev_free = &control->block_null;
 80239d4:	60e5      	str	r5, [r4, #12]
    current->prev_free = block;
 80239d6:	60d4      	str	r4, [r2, #12]
    return tlsf_cast(void *,
 80239d8:	f104 0c08 	add.w	ip, r4, #8
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 80239dc:	f104 020b 	add.w	r2, r4, #11
 80239e0:	f022 0203 	bic.w	r2, r2, #3
    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 80239e4:	4594      	cmp	ip, r2
 80239e6:	d001      	beq.n	80239ec <block_insert+0x40>
 80239e8:	e7fe      	b.n	80239e8 <block_insert+0x3c>
    tlsf_assert(current && "free list cannot have a null entry");
 80239ea:	e7fe      	b.n	80239ea <block_insert+0x3e>
    control->blocks[fl][sl] = block;
 80239ec:	63dc      	str	r4, [r3, #60]	; 0x3c
    control->fl_bitmap |= (1U << fl);
 80239ee:	2301      	movs	r3, #1
 80239f0:	fa03 f401 	lsl.w	r4, r3, r1
 80239f4:	692a      	ldr	r2, [r5, #16]
 80239f6:	4322      	orrs	r2, r4
 80239f8:	612a      	str	r2, [r5, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 80239fa:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80239fe:	4083      	lsls	r3, r0
 8023a00:	696a      	ldr	r2, [r5, #20]
 8023a02:	4313      	orrs	r3, r2
 8023a04:	616b      	str	r3, [r5, #20]
}
 8023a06:	b003      	add	sp, #12
 8023a08:	bd30      	pop	{r4, r5, pc}

08023a0a <block_next>:
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023a0a:	6843      	ldr	r3, [r0, #4]
    tlsf_assert(!block_is_last(block));
 8023a0c:	f033 0303 	bics.w	r3, r3, #3
 8023a10:	d100      	bne.n	8023a14 <block_next+0xa>
 8023a12:	e7fe      	b.n	8023a12 <block_next+0x8>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023a14:	4418      	add	r0, r3
}
 8023a16:	3004      	adds	r0, #4
 8023a18:	4770      	bx	lr

08023a1a <block_link_next>:
{
 8023a1a:	b510      	push	{r4, lr}
 8023a1c:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 8023a1e:	f7ff fff4 	bl	8023a0a <block_next>
    next->prev_phys_block = block;
 8023a22:	6004      	str	r4, [r0, #0]
}
 8023a24:	bd10      	pop	{r4, pc}

08023a26 <block_split>:
    return block_size(block) >= sizeof(block_header_t) + size;
}

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8023a26:	b510      	push	{r4, lr}
    return tlsf_cast(void *,
 8023a28:	1843      	adds	r3, r0, r1
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023a2a:	1d1c      	adds	r4, r3, #4
    return tlsf_cast(void *,
 8023a2c:	f103 020c 	add.w	r2, r3, #12
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8023a30:	330f      	adds	r3, #15
 8023a32:	f023 0303 	bic.w	r3, r3, #3
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);

    const size_t remain_size = block_size(block) - (size + block_header_overhead);

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8023a36:	429a      	cmp	r2, r3
 8023a38:	d000      	beq.n	8023a3c <block_split+0x16>
 8023a3a:	e7fe      	b.n	8023a3a <block_split+0x14>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023a3c:	6843      	ldr	r3, [r0, #4]
 8023a3e:	f023 0303 	bic.w	r3, r3, #3
    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8023a42:	1a5a      	subs	r2, r3, r1
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8023a44:	f1a2 0c04 	sub.w	ip, r2, #4
 8023a48:	440a      	add	r2, r1
 8023a4a:	429a      	cmp	r2, r3
 8023a4c:	d000      	beq.n	8023a50 <block_split+0x2a>
 8023a4e:	e7fe      	b.n	8023a4e <block_split+0x28>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8023a50:	6863      	ldr	r3, [r4, #4]
 8023a52:	f003 0303 	and.w	r3, r3, #3
 8023a56:	ea43 030c 	orr.w	r3, r3, ip
 8023a5a:	6063      	str	r3, [r4, #4]
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023a5c:	f023 0303 	bic.w	r3, r3, #3
    block_set_size(remaining, remain_size);
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8023a60:	2b0b      	cmp	r3, #11
 8023a62:	d800      	bhi.n	8023a66 <block_split+0x40>
 8023a64:	e7fe      	b.n	8023a64 <block_split+0x3e>
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8023a66:	6843      	ldr	r3, [r0, #4]
 8023a68:	f003 0303 	and.w	r3, r3, #3
 8023a6c:	4319      	orrs	r1, r3
 8023a6e:	6041      	str	r1, [r0, #4]
    block_header_t * next = block_link_next(block);
 8023a70:	4620      	mov	r0, r4
 8023a72:	f7ff ffd2 	bl	8023a1a <block_link_next>
    block->size |= block_header_prev_free_bit;
 8023a76:	6842      	ldr	r2, [r0, #4]
 8023a78:	f042 0202 	orr.w	r2, r2, #2
 8023a7c:	6042      	str	r2, [r0, #4]
    block->size |= block_header_free_bit;
 8023a7e:	6863      	ldr	r3, [r4, #4]
 8023a80:	f043 0301 	orr.w	r3, r3, #1
 8023a84:	6063      	str	r3, [r4, #4]

    block_set_size(block, size);
    block_mark_as_free(remaining);

    return remaining;
}
 8023a86:	4620      	mov	r0, r4
 8023a88:	bd10      	pop	{r4, pc}

08023a8a <block_trim_free>:
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023a8a:	684b      	ldr	r3, [r1, #4]
}

/* Trim any trailing block space off the end of a block, return to pool. */
static void block_trim_free(control_t * control, block_header_t * block, size_t size)
{
    tlsf_assert(block_is_free(block) && "block must be free");
 8023a8c:	f013 0f01 	tst.w	r3, #1
 8023a90:	d100      	bne.n	8023a94 <block_trim_free+0xa>
 8023a92:	e7fe      	b.n	8023a92 <block_trim_free+0x8>
{
 8023a94:	b570      	push	{r4, r5, r6, lr}
 8023a96:	4605      	mov	r5, r0
 8023a98:	460c      	mov	r4, r1
    return block_size(block) >= sizeof(block_header_t) + size;
 8023a9a:	f102 0110 	add.w	r1, r2, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023a9e:	f023 0303 	bic.w	r3, r3, #3
    if(block_can_split(block, size)) {
 8023aa2:	4299      	cmp	r1, r3
 8023aa4:	d900      	bls.n	8023aa8 <block_trim_free+0x1e>
        block_header_t * remaining_block = block_split(block, size);
        block_link_next(block);
        block_set_prev_free(remaining_block);
        block_insert(control, remaining_block);
    }
}
 8023aa6:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 8023aa8:	4611      	mov	r1, r2
 8023aaa:	4620      	mov	r0, r4
 8023aac:	f7ff ffbb 	bl	8023a26 <block_split>
 8023ab0:	4606      	mov	r6, r0
        block_link_next(block);
 8023ab2:	4620      	mov	r0, r4
 8023ab4:	f7ff ffb1 	bl	8023a1a <block_link_next>
    block->size |= block_header_prev_free_bit;
 8023ab8:	6873      	ldr	r3, [r6, #4]
 8023aba:	f043 0302 	orr.w	r3, r3, #2
 8023abe:	6073      	str	r3, [r6, #4]
        block_insert(control, remaining_block);
 8023ac0:	4631      	mov	r1, r6
 8023ac2:	4628      	mov	r0, r5
 8023ac4:	f7ff ff72 	bl	80239ac <block_insert>
}
 8023ac8:	e7ed      	b.n	8023aa6 <block_trim_free+0x1c>

08023aca <block_mark_as_used>:
{
 8023aca:	b510      	push	{r4, lr}
 8023acc:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 8023ace:	f7ff ff9c 	bl	8023a0a <block_next>
    block->size &= ~block_header_prev_free_bit;
 8023ad2:	6843      	ldr	r3, [r0, #4]
 8023ad4:	f023 0302 	bic.w	r3, r3, #2
 8023ad8:	6043      	str	r3, [r0, #4]
    block->size &= ~block_header_free_bit;
 8023ada:	6863      	ldr	r3, [r4, #4]
 8023adc:	f023 0301 	bic.w	r3, r3, #1
 8023ae0:	6063      	str	r3, [r4, #4]
}
 8023ae2:	bd10      	pop	{r4, pc}

08023ae4 <block_locate_free>:

    return remaining_block;
}

static block_header_t * block_locate_free(control_t * control, size_t size)
{
 8023ae4:	b570      	push	{r4, r5, r6, lr}
 8023ae6:	b082      	sub	sp, #8
    int fl = 0, sl = 0;
 8023ae8:	2300      	movs	r3, #0
 8023aea:	9301      	str	r3, [sp, #4]
 8023aec:	9300      	str	r3, [sp, #0]
    block_header_t * block = 0;

    if(size) {
 8023aee:	2900      	cmp	r1, #0
 8023af0:	d050      	beq.n	8023b94 <block_locate_free+0xb0>
 8023af2:	4604      	mov	r4, r0
 8023af4:	460d      	mov	r5, r1
    if(size >= SMALL_BLOCK_SIZE) {
 8023af6:	297f      	cmp	r1, #127	; 0x7f
 8023af8:	d92e      	bls.n	8023b58 <block_locate_free+0x74>
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8023afa:	fab1 f081 	clz	r0, r1
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8023afe:	f1c0 031a 	rsb	r3, r0, #26
 8023b02:	2001      	movs	r0, #1
 8023b04:	4098      	lsls	r0, r3
 8023b06:	3801      	subs	r0, #1
        size += round;
 8023b08:	4408      	add	r0, r1
    mapping_insert(size, fli, sli);
 8023b0a:	466a      	mov	r2, sp
 8023b0c:	a901      	add	r1, sp, #4
 8023b0e:	f7ff ff24 	bl	802395a <mapping_insert>
        ** mapping_search can futz with the size, so for excessively large sizes it can sometimes wind up
        ** with indices that are off the end of the block array.
        ** So, we protect against that here, since this is the only callsite of mapping_search.
        ** Note that we don't need to check sl, since it comes from a modulo operation that guarantees it's always in range.
        */
        if(fl < FL_INDEX_COUNT) {
 8023b12:	9a01      	ldr	r2, [sp, #4]
 8023b14:	2a09      	cmp	r2, #9
 8023b16:	dc41      	bgt.n	8023b9c <block_locate_free+0xb8>
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8023b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023b1c:	9900      	ldr	r1, [sp, #0]
 8023b1e:	408b      	lsls	r3, r1
 8023b20:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8023b24:	6949      	ldr	r1, [r1, #20]
    if(!sl_map) {
 8023b26:	400b      	ands	r3, r1
 8023b28:	d118      	bne.n	8023b5c <block_locate_free+0x78>
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8023b2a:	3201      	adds	r2, #1
 8023b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023b30:	fa03 f202 	lsl.w	r2, r3, r2
 8023b34:	6923      	ldr	r3, [r4, #16]
        if(!fl_map) {
 8023b36:	401a      	ands	r2, r3
 8023b38:	d032      	beq.n	8023ba0 <block_locate_free+0xbc>
    return __builtin_ffs(word) - 1;
 8023b3a:	fa92 f3a2 	rbit	r3, r2
 8023b3e:	fab3 f383 	clz	r3, r3
 8023b42:	2a00      	cmp	r2, #0
 8023b44:	bf08      	it	eq
 8023b46:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
 8023b4a:	461a      	mov	r2, r3
        *fli = fl;
 8023b4c:	9301      	str	r3, [sp, #4]
        sl_map = control->sl_bitmap[fl];
 8023b4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8023b52:	695b      	ldr	r3, [r3, #20]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8023b54:	b913      	cbnz	r3, 8023b5c <block_locate_free+0x78>
 8023b56:	e7fe      	b.n	8023b56 <block_locate_free+0x72>
 8023b58:	4608      	mov	r0, r1
 8023b5a:	e7d6      	b.n	8023b0a <block_locate_free+0x26>
    return __builtin_ffs(word) - 1;
 8023b5c:	fa93 f1a3 	rbit	r1, r3
 8023b60:	fab1 f181 	clz	r1, r1
 8023b64:	2b00      	cmp	r3, #0
 8023b66:	bf08      	it	eq
 8023b68:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
 8023b6c:	460b      	mov	r3, r1
    *sli = sl;
 8023b6e:	9100      	str	r1, [sp, #0]
    return control->blocks[fl][sl];
 8023b70:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8023b74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023b78:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
            block = search_suitable_block(control, &fl, &sl);
        }
    }

    if(block) {
 8023b7a:	b166      	cbz	r6, 8023b96 <block_locate_free+0xb2>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023b7c:	6872      	ldr	r2, [r6, #4]
 8023b7e:	f022 0203 	bic.w	r2, r2, #3
        tlsf_assert(block_size(block) >= size);
 8023b82:	4295      	cmp	r5, r2
 8023b84:	d900      	bls.n	8023b88 <block_locate_free+0xa4>
 8023b86:	e7fe      	b.n	8023b86 <block_locate_free+0xa2>
        remove_free_block(control, block, fl, sl);
 8023b88:	9a01      	ldr	r2, [sp, #4]
 8023b8a:	4631      	mov	r1, r6
 8023b8c:	4620      	mov	r0, r4
 8023b8e:	f7ff feba 	bl	8023906 <remove_free_block>
 8023b92:	e000      	b.n	8023b96 <block_locate_free+0xb2>
    block_header_t * block = 0;
 8023b94:	2600      	movs	r6, #0
    }

    return block;
}
 8023b96:	4630      	mov	r0, r6
 8023b98:	b002      	add	sp, #8
 8023b9a:	bd70      	pop	{r4, r5, r6, pc}
    block_header_t * block = 0;
 8023b9c:	2600      	movs	r6, #0
 8023b9e:	e7fa      	b.n	8023b96 <block_locate_free+0xb2>
            block = search_suitable_block(control, &fl, &sl);
 8023ba0:	2600      	movs	r6, #0
    return block;
 8023ba2:	e7f8      	b.n	8023b96 <block_locate_free+0xb2>

08023ba4 <block_merge_next>:
{
 8023ba4:	b570      	push	{r4, r5, r6, lr}
 8023ba6:	4605      	mov	r5, r0
 8023ba8:	460c      	mov	r4, r1
    block_header_t * next = block_next(block);
 8023baa:	4608      	mov	r0, r1
 8023bac:	f7ff ff2d 	bl	8023a0a <block_next>
    tlsf_assert(next && "next physical block can't be null");
 8023bb0:	b148      	cbz	r0, 8023bc6 <block_merge_next+0x22>
 8023bb2:	4606      	mov	r6, r0
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023bb4:	6843      	ldr	r3, [r0, #4]
    if(block_is_free(next)) {
 8023bb6:	f013 0f01 	tst.w	r3, #1
 8023bba:	d017      	beq.n	8023bec <block_merge_next+0x48>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023bbc:	6863      	ldr	r3, [r4, #4]
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8023bbe:	f033 0303 	bics.w	r3, r3, #3
 8023bc2:	d101      	bne.n	8023bc8 <block_merge_next+0x24>
 8023bc4:	e7fe      	b.n	8023bc4 <block_merge_next+0x20>
    tlsf_assert(next && "next physical block can't be null");
 8023bc6:	e7fe      	b.n	8023bc6 <block_merge_next+0x22>
        block_remove(control, next);
 8023bc8:	4601      	mov	r1, r0
 8023bca:	4628      	mov	r0, r5
 8023bcc:	f7ff fedb 	bl	8023986 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023bd0:	6863      	ldr	r3, [r4, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8023bd2:	f033 0203 	bics.w	r2, r3, #3
 8023bd6:	d100      	bne.n	8023bda <block_merge_next+0x36>
 8023bd8:	e7fe      	b.n	8023bd8 <block_merge_next+0x34>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023bda:	6872      	ldr	r2, [r6, #4]
 8023bdc:	f022 0203 	bic.w	r2, r2, #3
    prev->size += block_size(block) + block_header_overhead;
 8023be0:	3304      	adds	r3, #4
 8023be2:	4413      	add	r3, r2
 8023be4:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 8023be6:	4620      	mov	r0, r4
 8023be8:	f7ff ff17 	bl	8023a1a <block_link_next>
}
 8023bec:	4620      	mov	r0, r4
 8023bee:	bd70      	pop	{r4, r5, r6, pc}

08023bf0 <lv_tlsf_add_pool>:
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8023bf0:	f011 0f03 	tst.w	r1, #3
 8023bf4:	d11a      	bne.n	8023c2c <lv_tlsf_add_pool+0x3c>
{
 8023bf6:	b538      	push	{r3, r4, r5, lr}
 8023bf8:	460c      	mov	r4, r1
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8023bfa:	3a08      	subs	r2, #8
    return x - (x & (align - 1));
 8023bfc:	f022 0303 	bic.w	r3, r2, #3
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 8023c00:	f1a3 010c 	sub.w	r1, r3, #12
 8023c04:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8023c08:	4291      	cmp	r1, r2
 8023c0a:	d811      	bhi.n	8023c30 <lv_tlsf_add_pool+0x40>
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
 8023c0c:	4625      	mov	r5, r4
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8023c0e:	f855 2904 	ldr.w	r2, [r5], #-4
    block->size &= ~block_header_prev_free_bit;
 8023c12:	f043 0301 	orr.w	r3, r3, #1
 8023c16:	606b      	str	r3, [r5, #4]
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
    block_set_size(block, pool_bytes);
    block_set_free(block);
    block_set_prev_used(block);
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8023c18:	4629      	mov	r1, r5
 8023c1a:	f7ff fec7 	bl	80239ac <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8023c1e:	4628      	mov	r0, r5
 8023c20:	f7ff fefb 	bl	8023a1a <block_link_next>
    block->size |= block_header_prev_free_bit;
 8023c24:	2302      	movs	r3, #2
 8023c26:	6043      	str	r3, [r0, #4]
    block_set_size(next, 0);
    block_set_used(next);
    block_set_prev_free(next);

    return mem;
 8023c28:	4620      	mov	r0, r4
}
 8023c2a:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 8023c2c:	2000      	movs	r0, #0
}
 8023c2e:	4770      	bx	lr
        return 0;
 8023c30:	2000      	movs	r0, #0
 8023c32:	e7fa      	b.n	8023c2a <lv_tlsf_add_pool+0x3a>

08023c34 <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8023c34:	f010 0f03 	tst.w	r0, #3
 8023c38:	d118      	bne.n	8023c6c <lv_tlsf_create+0x38>
{
 8023c3a:	b510      	push	{r4, lr}
    control->block_null.next_free = &control->block_null;
 8023c3c:	4601      	mov	r1, r0
 8023c3e:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
 8023c40:	60c0      	str	r0, [r0, #12]
    control->fl_bitmap = 0;
 8023c42:	4684      	mov	ip, r0
 8023c44:	2300      	movs	r3, #0
 8023c46:	f84c 3f10 	str.w	r3, [ip, #16]!
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8023c4a:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
 8023c4e:	f100 0e38 	add.w	lr, r0, #56	; 0x38
        control->sl_bitmap[i] = 0;
 8023c52:	461c      	mov	r4, r3
 8023c54:	f84c 4f04 	str.w	r4, [ip, #4]!
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8023c58:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
            control->blocks[i][j] = &control->block_null;
 8023c5c:	f843 1f04 	str.w	r1, [r3, #4]!
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8023c60:	4293      	cmp	r3, r2
 8023c62:	d1fb      	bne.n	8023c5c <lv_tlsf_create+0x28>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8023c64:	3280      	adds	r2, #128	; 0x80
 8023c66:	45f4      	cmp	ip, lr
 8023c68:	d1f4      	bne.n	8023c54 <lv_tlsf_create+0x20>
    }

    control_constructor(tlsf_cast(control_t *, mem));

    return tlsf_cast(lv_tlsf_t, mem);
}
 8023c6a:	bd10      	pop	{r4, pc}
        return 0;
 8023c6c:	2000      	movs	r0, #0
}
 8023c6e:	4770      	bx	lr

08023c70 <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 8023c70:	b570      	push	{r4, r5, r6, lr}
 8023c72:	4605      	mov	r5, r0
 8023c74:	460e      	mov	r6, r1
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8023c76:	f7ff ffdd 	bl	8023c34 <lv_tlsf_create>
 8023c7a:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8023c7c:	f2a6 523c 	subw	r2, r6, #1340	; 0x53c
 8023c80:	f205 513c 	addw	r1, r5, #1340	; 0x53c
 8023c84:	f7ff ffb4 	bl	8023bf0 <lv_tlsf_add_pool>
    return tlsf;
}
 8023c88:	4620      	mov	r0, r4
 8023c8a:	bd70      	pop	{r4, r5, r6, pc}

08023c8c <lv_tlsf_malloc>:
{
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
}

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 8023c8c:	b570      	push	{r4, r5, r6, lr}
 8023c8e:	4605      	mov	r5, r0
 8023c90:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8023c92:	2104      	movs	r1, #4
 8023c94:	f7ff fe22 	bl	80238dc <adjust_request_size>
 8023c98:	4604      	mov	r4, r0
    block_header_t * block = block_locate_free(control, adjust);
 8023c9a:	4601      	mov	r1, r0
 8023c9c:	4628      	mov	r0, r5
 8023c9e:	f7ff ff21 	bl	8023ae4 <block_locate_free>
    if(block) {
 8023ca2:	4606      	mov	r6, r0
 8023ca4:	b150      	cbz	r0, 8023cbc <lv_tlsf_malloc+0x30>
        tlsf_assert(size && "size must be non-zero");
 8023ca6:	b904      	cbnz	r4, 8023caa <lv_tlsf_malloc+0x1e>
 8023ca8:	e7fe      	b.n	8023ca8 <lv_tlsf_malloc+0x1c>
        block_trim_free(control, block, size);
 8023caa:	4622      	mov	r2, r4
 8023cac:	4601      	mov	r1, r0
 8023cae:	4628      	mov	r0, r5
 8023cb0:	f7ff feeb 	bl	8023a8a <block_trim_free>
        block_mark_as_used(block);
 8023cb4:	4630      	mov	r0, r6
 8023cb6:	f7ff ff08 	bl	8023aca <block_mark_as_used>
    return tlsf_cast(void *,
 8023cba:	3608      	adds	r6, #8
    return block_prepare_used(control, block, adjust);
}
 8023cbc:	4630      	mov	r0, r6
 8023cbe:	bd70      	pop	{r4, r5, r6, pc}

08023cc0 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 8023cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 8023cc2:	2900      	cmp	r1, #0
 8023cc4:	d03f      	beq.n	8023d46 <lv_tlsf_free+0x86>
 8023cc6:	4605      	mov	r5, r0
 8023cc8:	460e      	mov	r6, r1
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023cca:	f851 4c04 	ldr.w	r4, [r1, #-4]
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8023cce:	f014 0f01 	tst.w	r4, #1
 8023cd2:	d000      	beq.n	8023cd6 <lv_tlsf_free+0x16>
 8023cd4:	e7fe      	b.n	8023cd4 <lv_tlsf_free+0x14>
    return tlsf_cast(block_header_t *,
 8023cd6:	f1a1 0708 	sub.w	r7, r1, #8
    block_header_t * next = block_link_next(block);
 8023cda:	4638      	mov	r0, r7
 8023cdc:	f7ff fe9d 	bl	8023a1a <block_link_next>
    block->size |= block_header_prev_free_bit;
 8023ce0:	6843      	ldr	r3, [r0, #4]
 8023ce2:	f043 0302 	orr.w	r3, r3, #2
 8023ce6:	6043      	str	r3, [r0, #4]
    block->size |= block_header_free_bit;
 8023ce8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023cec:	f043 0301 	orr.w	r3, r3, #1
 8023cf0:	f846 3c04 	str.w	r3, [r6, #-4]
    if(block_is_prev_free(block)) {
 8023cf4:	f013 0f02 	tst.w	r3, #2
 8023cf8:	d108      	bne.n	8023d0c <lv_tlsf_free+0x4c>
        size = block->size;
        block_mark_as_free(block);
        block = block_merge_prev(control, block);
        block = block_merge_next(control, block);
 8023cfa:	4639      	mov	r1, r7
 8023cfc:	4628      	mov	r0, r5
 8023cfe:	f7ff ff51 	bl	8023ba4 <block_merge_next>
 8023d02:	4601      	mov	r1, r0
        block_insert(control, block);
 8023d04:	4628      	mov	r0, r5
 8023d06:	f7ff fe51 	bl	80239ac <block_insert>
 8023d0a:	e01d      	b.n	8023d48 <lv_tlsf_free+0x88>
    return block->prev_phys_block;
 8023d0c:	f856 7c08 	ldr.w	r7, [r6, #-8]
        tlsf_assert(prev && "prev physical block can't be null");
 8023d10:	b127      	cbz	r7, 8023d1c <lv_tlsf_free+0x5c>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023d12:	687b      	ldr	r3, [r7, #4]
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8023d14:	f013 0f01 	tst.w	r3, #1
 8023d18:	d101      	bne.n	8023d1e <lv_tlsf_free+0x5e>
 8023d1a:	e7fe      	b.n	8023d1a <lv_tlsf_free+0x5a>
        tlsf_assert(prev && "prev physical block can't be null");
 8023d1c:	e7fe      	b.n	8023d1c <lv_tlsf_free+0x5c>
        block_remove(control, prev);
 8023d1e:	4639      	mov	r1, r7
 8023d20:	4628      	mov	r0, r5
 8023d22:	f7ff fe30 	bl	8023986 <block_remove>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023d26:	687a      	ldr	r2, [r7, #4]
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8023d28:	f032 0303 	bics.w	r3, r2, #3
 8023d2c:	d100      	bne.n	8023d30 <lv_tlsf_free+0x70>
 8023d2e:	e7fe      	b.n	8023d2e <lv_tlsf_free+0x6e>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023d30:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8023d34:	f023 0303 	bic.w	r3, r3, #3
    prev->size += block_size(block) + block_header_overhead;
 8023d38:	4413      	add	r3, r2
 8023d3a:	3304      	adds	r3, #4
 8023d3c:	607b      	str	r3, [r7, #4]
    block_link_next(prev);
 8023d3e:	4638      	mov	r0, r7
 8023d40:	f7ff fe6b 	bl	8023a1a <block_link_next>
    return prev;
 8023d44:	e7d9      	b.n	8023cfa <lv_tlsf_free+0x3a>
    size_t size = 0;
 8023d46:	2400      	movs	r4, #0
    }

    return size;
}
 8023d48:	4620      	mov	r0, r4
 8023d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023d4c <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8023d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d50:	4680      	mov	r8, r0
 8023d52:	4614      	mov	r4, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 8023d54:	b1e1      	cbz	r1, 8023d90 <lv_tlsf_realloc+0x44>
 8023d56:	460f      	mov	r7, r1
 8023d58:	b1b2      	cbz	r2, 8023d88 <lv_tlsf_realloc+0x3c>
    return tlsf_cast(block_header_t *,
 8023d5a:	f1a1 0a08 	sub.w	sl, r1, #8
    else if(!ptr) {
        p = lv_tlsf_malloc(tlsf, size);
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
        block_header_t * next = block_next(block);
 8023d5e:	4650      	mov	r0, sl
 8023d60:	f7ff fe53 	bl	8023a0a <block_next>
 8023d64:	4681      	mov	r9, r0
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023d66:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8023d6a:	f026 0b03 	bic.w	fp, r6, #3

        const size_t cursize = block_size(block);
        const size_t combined = cursize + block_size(next) + block_header_overhead;
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8023d6e:	2104      	movs	r1, #4
 8023d70:	4620      	mov	r0, r4
 8023d72:	f7ff fdb3 	bl	80238dc <adjust_request_size>
 8023d76:	4605      	mov	r5, r0
        if(size > cursize && adjust == 0) {
 8023d78:	455c      	cmp	r4, fp
 8023d7a:	d901      	bls.n	8023d80 <lv_tlsf_realloc+0x34>
 8023d7c:	2800      	cmp	r0, #0
 8023d7e:	d056      	beq.n	8023e2e <lv_tlsf_realloc+0xe2>
            /* The request is probably too large, fail */
            return NULL;
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8023d80:	f016 0f01 	tst.w	r6, #1
 8023d84:	d00b      	beq.n	8023d9e <lv_tlsf_realloc+0x52>
 8023d86:	e7fe      	b.n	8023d86 <lv_tlsf_realloc+0x3a>
        lv_tlsf_free(tlsf, ptr);
 8023d88:	f7ff ff9a 	bl	8023cc0 <lv_tlsf_free>
    void * p = 0;
 8023d8c:	2500      	movs	r5, #0
        lv_tlsf_free(tlsf, ptr);
 8023d8e:	e003      	b.n	8023d98 <lv_tlsf_realloc+0x4c>
        p = lv_tlsf_malloc(tlsf, size);
 8023d90:	4611      	mov	r1, r2
 8023d92:	f7ff ff7b 	bl	8023c8c <lv_tlsf_malloc>
 8023d96:	4605      	mov	r5, r0
            p = ptr;
        }
    }

    return p;
}
 8023d98:	4628      	mov	r0, r5
 8023d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8023d9e:	455d      	cmp	r5, fp
 8023da0:	d92b      	bls.n	8023dfa <lv_tlsf_realloc+0xae>
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023da2:	f8d9 3004 	ldr.w	r3, [r9, #4]
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8023da6:	f013 0f01 	tst.w	r3, #1
 8023daa:	d006      	beq.n	8023dba <lv_tlsf_realloc+0x6e>
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8023dac:	f10b 0204 	add.w	r2, fp, #4
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023db0:	f023 0303 	bic.w	r3, r3, #3
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 8023db4:	4413      	add	r3, r2
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8023db6:	42ab      	cmp	r3, r5
 8023db8:	d212      	bcs.n	8023de0 <lv_tlsf_realloc+0x94>
            p = lv_tlsf_malloc(tlsf, size);
 8023dba:	4621      	mov	r1, r4
 8023dbc:	4640      	mov	r0, r8
 8023dbe:	f7ff ff65 	bl	8023c8c <lv_tlsf_malloc>
            if(p) {
 8023dc2:	4605      	mov	r5, r0
 8023dc4:	2800      	cmp	r0, #0
 8023dc6:	d0e7      	beq.n	8023d98 <lv_tlsf_realloc+0x4c>
                lv_memcpy(p, ptr, minsize);
 8023dc8:	4622      	mov	r2, r4
 8023dca:	455c      	cmp	r4, fp
 8023dcc:	bf28      	it	cs
 8023dce:	465a      	movcs	r2, fp
 8023dd0:	4639      	mov	r1, r7
 8023dd2:	f7fe f995 	bl	8022100 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8023dd6:	4639      	mov	r1, r7
 8023dd8:	4640      	mov	r0, r8
 8023dda:	f7ff ff71 	bl	8023cc0 <lv_tlsf_free>
 8023dde:	e7db      	b.n	8023d98 <lv_tlsf_realloc+0x4c>
                block_merge_next(control, block);
 8023de0:	4651      	mov	r1, sl
 8023de2:	4640      	mov	r0, r8
 8023de4:	f7ff fede 	bl	8023ba4 <block_merge_next>
                block_mark_as_used(block);
 8023de8:	4650      	mov	r0, sl
 8023dea:	f7ff fe6e 	bl	8023aca <block_mark_as_used>
    return tlsf_cast(int, block->size & block_header_free_bit);
 8023dee:	f857 6c04 	ldr.w	r6, [r7, #-4]
    tlsf_assert(!block_is_free(block) && "block must be used");
 8023df2:	f016 0f01 	tst.w	r6, #1
 8023df6:	d000      	beq.n	8023dfa <lv_tlsf_realloc+0xae>
 8023df8:	e7fe      	b.n	8023df8 <lv_tlsf_realloc+0xac>
    return block_size(block) >= sizeof(block_header_t) + size;
 8023dfa:	f105 0310 	add.w	r3, r5, #16
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8023dfe:	f026 0603 	bic.w	r6, r6, #3
    if(block_can_split(block, size)) {
 8023e02:	42b3      	cmp	r3, r6
 8023e04:	d901      	bls.n	8023e0a <lv_tlsf_realloc+0xbe>
            p = ptr;
 8023e06:	463d      	mov	r5, r7
 8023e08:	e7c6      	b.n	8023d98 <lv_tlsf_realloc+0x4c>
        block_header_t * remaining_block = block_split(block, size);
 8023e0a:	4629      	mov	r1, r5
 8023e0c:	4650      	mov	r0, sl
 8023e0e:	f7ff fe0a 	bl	8023a26 <block_split>
 8023e12:	4601      	mov	r1, r0
    block->size &= ~block_header_prev_free_bit;
 8023e14:	6843      	ldr	r3, [r0, #4]
 8023e16:	f023 0302 	bic.w	r3, r3, #2
 8023e1a:	6043      	str	r3, [r0, #4]
        remaining_block = block_merge_next(control, remaining_block);
 8023e1c:	4640      	mov	r0, r8
 8023e1e:	f7ff fec1 	bl	8023ba4 <block_merge_next>
 8023e22:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 8023e24:	4640      	mov	r0, r8
 8023e26:	f7ff fdc1 	bl	80239ac <block_insert>
            p = ptr;
 8023e2a:	463d      	mov	r5, r7
 8023e2c:	e7b4      	b.n	8023d98 <lv_tlsf_realloc+0x4c>
            return NULL;
 8023e2e:	2500      	movs	r5, #0
 8023e30:	e7b2      	b.n	8023d98 <lv_tlsf_realloc+0x4c>

08023e32 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 8023e32:	7803      	ldrb	r3, [r0, #0]
 8023e34:	f990 2000 	ldrsb.w	r2, [r0]
 8023e38:	2a00      	cmp	r2, #0
 8023e3a:	da0e      	bge.n	8023e5a <lv_txt_utf8_size+0x28>
        return 1;
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 8023e3c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8023e40:	2ac0      	cmp	r2, #192	; 0xc0
 8023e42:	d00c      	beq.n	8023e5e <lv_txt_utf8_size+0x2c>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 8023e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8023e48:	2ae0      	cmp	r2, #224	; 0xe0
 8023e4a:	d00a      	beq.n	8023e62 <lv_txt_utf8_size+0x30>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 8023e4c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
        return 4;
 8023e50:	2bf0      	cmp	r3, #240	; 0xf0
 8023e52:	bf14      	ite	ne
 8023e54:	2000      	movne	r0, #0
 8023e56:	2004      	moveq	r0, #4
 8023e58:	4770      	bx	lr
        return 1;
 8023e5a:	2001      	movs	r0, #1
 8023e5c:	4770      	bx	lr
        return 2;
 8023e5e:	2002      	movs	r0, #2
 8023e60:	4770      	bx	lr
        return 3;
 8023e62:	2003      	movs	r0, #3
    return 0;
}
 8023e64:	4770      	bx	lr

08023e66 <lv_txt_unicode_to_utf8>:
 * @param letter_uni a Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
 8023e66:	287f      	cmp	r0, #127	; 0x7f
 8023e68:	d94b      	bls.n	8023f02 <lv_txt_unicode_to_utf8+0x9c>
{
 8023e6a:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
 8023e6c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8023e70:	d212      	bcs.n	8023e98 <lv_txt_unicode_to_utf8+0x32>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8023e72:	0983      	lsrs	r3, r0, #6
 8023e74:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8023e78:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8023e7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023e80:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8023e84:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 8023e88:	2300      	movs	r3, #0
 8023e8a:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
 8023e8e:	f88d 3007 	strb.w	r3, [sp, #7]
    else {
        return 0;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
 8023e92:	9801      	ldr	r0, [sp, #4]
}
 8023e94:	b002      	add	sp, #8
 8023e96:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 8023e98:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8023e9c:	d214      	bcs.n	8023ec8 <lv_txt_unicode_to_utf8+0x62>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8023e9e:	0b03      	lsrs	r3, r0, #12
 8023ea0:	f063 031f 	orn	r3, r3, #31
 8023ea4:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8023ea8:	f3c0 1385 	ubfx	r3, r0, #6, #6
 8023eac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023eb0:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8023eb4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023eb8:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8023ebc:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 8023ec0:	2300      	movs	r3, #0
 8023ec2:	f88d 3007 	strb.w	r3, [sp, #7]
 8023ec6:	e7e4      	b.n	8023e92 <lv_txt_unicode_to_utf8+0x2c>
    else if(letter_uni < 0x110000) {
 8023ec8:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8023ecc:	d217      	bcs.n	8023efe <lv_txt_unicode_to_utf8+0x98>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8023ece:	0c83      	lsrs	r3, r0, #18
 8023ed0:	f063 030f 	orn	r3, r3, #15
 8023ed4:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8023ed8:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8023edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023ee0:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8023ee4:	f3c0 1385 	ubfx	r3, r0, #6, #6
 8023ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023eec:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8023ef0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023ef4:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8023ef8:	f88d 0007 	strb.w	r0, [sp, #7]
 8023efc:	e7c9      	b.n	8023e92 <lv_txt_unicode_to_utf8+0x2c>
        return 0;
 8023efe:	2000      	movs	r0, #0
 8023f00:	e7c8      	b.n	8023e94 <lv_txt_unicode_to_utf8+0x2e>
}
 8023f02:	4770      	bx	lr

08023f04 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8023f04:	b530      	push	{r4, r5, lr}
 8023f06:	b083      	sub	sp, #12
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8023f08:	2300      	movs	r3, #0
 8023f0a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 8023f0c:	468c      	mov	ip, r1
 8023f0e:	b159      	cbz	r1, 8023f28 <lv_txt_utf8_next+0x24>

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 8023f10:	f8dc 3000 	ldr.w	r3, [ip]
 8023f14:	5cc2      	ldrb	r2, [r0, r3]
 8023f16:	56c1      	ldrsb	r1, [r0, r3]
 8023f18:	2900      	cmp	r1, #0
 8023f1a:	db08      	blt.n	8023f2e <lv_txt_utf8_next+0x2a>
        result = txt[*i];
 8023f1c:	4610      	mov	r0, r2
        (*i)++;
 8023f1e:	3301      	adds	r3, #1
 8023f20:	f8cc 3000 	str.w	r3, [ip]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 8023f24:	b003      	add	sp, #12
 8023f26:	bd30      	pop	{r4, r5, pc}
    if(i == NULL) i = &i_tmp;
 8023f28:	f10d 0c04 	add.w	ip, sp, #4
 8023f2c:	e7f0      	b.n	8023f10 <lv_txt_utf8_next+0xc>
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 8023f2e:	f002 01e0 	and.w	r1, r2, #224	; 0xe0
 8023f32:	29c0      	cmp	r1, #192	; 0xc0
 8023f34:	d00c      	beq.n	8023f50 <lv_txt_utf8_next+0x4c>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 8023f36:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 8023f3a:	29e0      	cmp	r1, #224	; 0xe0
 8023f3c:	d01a      	beq.n	8023f74 <lv_txt_utf8_next+0x70>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 8023f3e:	f002 01f8 	and.w	r1, r2, #248	; 0xf8
 8023f42:	29f0      	cmp	r1, #240	; 0xf0
 8023f44:	d034      	beq.n	8023fb0 <lv_txt_utf8_next+0xac>
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8023f46:	3301      	adds	r3, #1
 8023f48:	f8cc 3000 	str.w	r3, [ip]
    uint32_t result = 0;
 8023f4c:	2000      	movs	r0, #0
 8023f4e:	e7e9      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            (*i)++;
 8023f50:	1c59      	adds	r1, r3, #1
 8023f52:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023f56:	5c40      	ldrb	r0, [r0, r1]
 8023f58:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
 8023f5c:	2980      	cmp	r1, #128	; 0x80
 8023f5e:	d153      	bne.n	8024008 <lv_txt_utf8_next+0x104>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8023f60:	0192      	lsls	r2, r2, #6
 8023f62:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
 8023f66:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023f6a:	4410      	add	r0, r2
            (*i)++;
 8023f6c:	3302      	adds	r3, #2
 8023f6e:	f8cc 3000 	str.w	r3, [ip]
 8023f72:	e7d7      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            (*i)++;
 8023f74:	1c59      	adds	r1, r3, #1
 8023f76:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023f7a:	5c41      	ldrb	r1, [r0, r1]
 8023f7c:	f001 0ec0 	and.w	lr, r1, #192	; 0xc0
 8023f80:	f1be 0f80 	cmp.w	lr, #128	; 0x80
 8023f84:	d142      	bne.n	802400c <lv_txt_utf8_next+0x108>
            (*i)++;
 8023f86:	1c9c      	adds	r4, r3, #2
 8023f88:	f8cc 4000 	str.w	r4, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023f8c:	5d00      	ldrb	r0, [r0, r4]
 8023f8e:	f000 04c0 	and.w	r4, r0, #192	; 0xc0
 8023f92:	2c80      	cmp	r4, #128	; 0x80
 8023f94:	d13c      	bne.n	8024010 <lv_txt_utf8_next+0x10c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8023f96:	0312      	lsls	r2, r2, #12
 8023f98:	b292      	uxth	r2, r2
            result += (txt[*i] & 0x3F);
 8023f9a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8023f9e:	4402      	add	r2, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8023fa0:	0188      	lsls	r0, r1, #6
 8023fa2:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
 8023fa6:	4410      	add	r0, r2
            (*i)++;
 8023fa8:	3303      	adds	r3, #3
 8023faa:	f8cc 3000 	str.w	r3, [ip]
 8023fae:	e7b9      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            (*i)++;
 8023fb0:	1c59      	adds	r1, r3, #1
 8023fb2:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023fb6:	5c41      	ldrb	r1, [r0, r1]
 8023fb8:	f001 04c0 	and.w	r4, r1, #192	; 0xc0
 8023fbc:	2c80      	cmp	r4, #128	; 0x80
 8023fbe:	d129      	bne.n	8024014 <lv_txt_utf8_next+0x110>
            (*i)++;
 8023fc0:	1c9c      	adds	r4, r3, #2
 8023fc2:	f8cc 4000 	str.w	r4, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023fc6:	5d04      	ldrb	r4, [r0, r4]
 8023fc8:	f004 0ec0 	and.w	lr, r4, #192	; 0xc0
 8023fcc:	f1be 0f80 	cmp.w	lr, #128	; 0x80
 8023fd0:	d122      	bne.n	8024018 <lv_txt_utf8_next+0x114>
            (*i)++;
 8023fd2:	1cdd      	adds	r5, r3, #3
 8023fd4:	f8cc 5000 	str.w	r5, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8023fd8:	f810 e005 	ldrb.w	lr, [r0, r5]
 8023fdc:	f00e 00c0 	and.w	r0, lr, #192	; 0xc0
 8023fe0:	2880      	cmp	r0, #128	; 0x80
 8023fe2:	d11b      	bne.n	802401c <lv_txt_utf8_next+0x118>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8023fe4:	0492      	lsls	r2, r2, #18
 8023fe6:	f402 12e0 	and.w	r2, r2, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 8023fea:	0309      	lsls	r1, r1, #12
 8023fec:	f401 307c 	and.w	r0, r1, #258048	; 0x3f000
 8023ff0:	4302      	orrs	r2, r0
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8023ff2:	01a0      	lsls	r0, r4, #6
 8023ff4:	f400 607c 	and.w	r0, r0, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
 8023ff8:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
 8023ffc:	4470      	add	r0, lr
 8023ffe:	4410      	add	r0, r2
            (*i)++;
 8024000:	3304      	adds	r3, #4
 8024002:	f8cc 3000 	str.w	r3, [ip]
 8024006:	e78d      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024008:	2000      	movs	r0, #0
 802400a:	e78b      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802400c:	2000      	movs	r0, #0
 802400e:	e789      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024010:	2000      	movs	r0, #0
 8024012:	e787      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024014:	2000      	movs	r0, #0
 8024016:	e785      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8024018:	2000      	movs	r0, #0
 802401a:	e783      	b.n	8023f24 <lv_txt_utf8_next+0x20>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802401c:	2000      	movs	r0, #0
 802401e:	e781      	b.n	8023f24 <lv_txt_utf8_next+0x20>

08024020 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8024020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024022:	b083      	sub	sp, #12
 8024024:	4606      	mov	r6, r0
 8024026:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 8024028:	680b      	ldr	r3, [r1, #0]
 802402a:	3b01      	subs	r3, #1
 802402c:	600b      	str	r3, [r1, #0]
 802402e:	2404      	movs	r4, #4
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
 8024030:	4f0d      	ldr	r7, [pc, #52]	; (8024068 <lv_txt_utf8_prev+0x48>)
 8024032:	e005      	b.n	8024040 <lv_txt_utf8_prev+0x20>
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
 8024034:	3801      	subs	r0, #1
 8024036:	6028      	str	r0, [r5, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8024038:	1e63      	subs	r3, r4, #1
 802403a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 802403e:	d008      	beq.n	8024052 <lv_txt_utf8_prev+0x32>
        c_size = _lv_txt_encoded_size(&txt[*i]);
 8024040:	6828      	ldr	r0, [r5, #0]
 8024042:	683b      	ldr	r3, [r7, #0]
 8024044:	4430      	add	r0, r6
 8024046:	4798      	blx	r3
        if(c_size == 0) {
 8024048:	b930      	cbnz	r0, 8024058 <lv_txt_utf8_prev+0x38>
            if(*i != 0)
 802404a:	6828      	ldr	r0, [r5, #0]
 802404c:	2800      	cmp	r0, #0
 802404e:	d1f1      	bne.n	8024034 <lv_txt_utf8_prev+0x14>
 8024050:	e000      	b.n	8024054 <lv_txt_utf8_prev+0x34>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8024052:	2000      	movs	r0, #0

    uint32_t i_tmp  = *i;
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/

    return letter;
}
 8024054:	b003      	add	sp, #12
 8024056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
 8024058:	682b      	ldr	r3, [r5, #0]
 802405a:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 802405c:	4b03      	ldr	r3, [pc, #12]	; (802406c <lv_txt_utf8_prev+0x4c>)
 802405e:	681b      	ldr	r3, [r3, #0]
 8024060:	a901      	add	r1, sp, #4
 8024062:	4630      	mov	r0, r6
 8024064:	4798      	blx	r3
    return letter;
 8024066:	e7f5      	b.n	8024054 <lv_txt_utf8_prev+0x34>
 8024068:	20000774 	.word	0x20000774
 802406c:	2000076c 	.word	0x2000076c

08024070 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 8024070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024074:	460f      	mov	r7, r1
    uint32_t byte_cnt = 0;
 8024076:	460c      	mov	r4, r1
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024078:	b191      	cbz	r1, 80240a0 <lv_txt_utf8_get_byte_id+0x30>
 802407a:	4606      	mov	r6, r0
    uint32_t byte_cnt = 0;
 802407c:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 802407e:	4625      	mov	r5, r4
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8024080:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80240a8 <lv_txt_utf8_get_byte_id+0x38>
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8024084:	1930      	adds	r0, r6, r4
 8024086:	5d33      	ldrb	r3, [r6, r4]
 8024088:	b153      	cbz	r3, 80240a0 <lv_txt_utf8_get_byte_id+0x30>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 802408a:	f8d8 3000 	ldr.w	r3, [r8]
 802408e:	4798      	blx	r3
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 8024090:	2801      	cmp	r0, #1
 8024092:	bf38      	it	cc
 8024094:	2001      	movcc	r0, #1
 8024096:	b2c3      	uxtb	r3, r0
 8024098:	441c      	add	r4, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 802409a:	3501      	adds	r5, #1
 802409c:	42af      	cmp	r7, r5
 802409e:	d1f1      	bne.n	8024084 <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
}
 80240a0:	4620      	mov	r0, r4
 80240a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80240a6:	bf00      	nop
 80240a8:	20000774 	.word	0x20000774

080240ac <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 80240ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80240ae:	b083      	sub	sp, #12
    uint32_t i        = 0;
 80240b0:	2300      	movs	r3, #0
 80240b2:	9301      	str	r3, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 80240b4:	460e      	mov	r6, r1
 80240b6:	b169      	cbz	r1, 80240d4 <lv_txt_utf8_get_char_id+0x28>
 80240b8:	4605      	mov	r5, r0
    uint32_t char_cnt = 0;
 80240ba:	461c      	mov	r4, r3
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 80240bc:	4f06      	ldr	r7, [pc, #24]	; (80240d8 <lv_txt_utf8_get_char_id+0x2c>)
 80240be:	683b      	ldr	r3, [r7, #0]
 80240c0:	a901      	add	r1, sp, #4
 80240c2:	4628      	mov	r0, r5
 80240c4:	4798      	blx	r3
        char_cnt++;
 80240c6:	3401      	adds	r4, #1
    while(i < byte_id) {
 80240c8:	9b01      	ldr	r3, [sp, #4]
 80240ca:	42b3      	cmp	r3, r6
 80240cc:	d3f7      	bcc.n	80240be <lv_txt_utf8_get_char_id+0x12>
    }

    return char_cnt;
}
 80240ce:	4620      	mov	r0, r4
 80240d0:	b003      	add	sp, #12
 80240d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t char_cnt = 0;
 80240d4:	460c      	mov	r4, r1
    return char_cnt;
 80240d6:	e7fa      	b.n	80240ce <lv_txt_utf8_get_char_id+0x22>
 80240d8:	2000076c 	.word	0x2000076c

080240dc <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 80240dc:	b570      	push	{r4, r5, r6, lr}
 80240de:	b082      	sub	sp, #8
    uint32_t len = 0;
    uint32_t i   = 0;
 80240e0:	2300      	movs	r3, #0
 80240e2:	9301      	str	r3, [sp, #4]

    while(txt[i] != '\0') {
 80240e4:	7803      	ldrb	r3, [r0, #0]
 80240e6:	b173      	cbz	r3, 8024106 <lv_txt_utf8_get_length+0x2a>
 80240e8:	4604      	mov	r4, r0
    uint32_t len = 0;
 80240ea:	2500      	movs	r5, #0
        _lv_txt_encoded_next(txt, &i);
 80240ec:	4e07      	ldr	r6, [pc, #28]	; (802410c <lv_txt_utf8_get_length+0x30>)
 80240ee:	6833      	ldr	r3, [r6, #0]
 80240f0:	a901      	add	r1, sp, #4
 80240f2:	4620      	mov	r0, r4
 80240f4:	4798      	blx	r3
        len++;
 80240f6:	3501      	adds	r5, #1
    while(txt[i] != '\0') {
 80240f8:	9b01      	ldr	r3, [sp, #4]
 80240fa:	5ce3      	ldrb	r3, [r4, r3]
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d1f6      	bne.n	80240ee <lv_txt_utf8_get_length+0x12>
    }

    return len;
}
 8024100:	4628      	mov	r0, r5
 8024102:	b002      	add	sp, #8
 8024104:	bd70      	pop	{r4, r5, r6, pc}
    uint32_t len = 0;
 8024106:	2500      	movs	r5, #0
    return len;
 8024108:	e7fa      	b.n	8024100 <lv_txt_utf8_get_length+0x24>
 802410a:	bf00      	nop
 802410c:	2000076c 	.word	0x2000076c

08024110 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8024110:	2923      	cmp	r1, #35	; 0x23
 8024112:	d004      	beq.n	802411e <_lv_txt_is_cmd+0xe>
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 8024114:	7803      	ldrb	r3, [r0, #0]
 8024116:	2b01      	cmp	r3, #1
 8024118:	d015      	beq.n	8024146 <_lv_txt_is_cmd+0x36>
    bool ret = false;
 802411a:	2000      	movs	r0, #0
 802411c:	4770      	bx	lr
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 802411e:	7803      	ldrb	r3, [r0, #0]
 8024120:	b91b      	cbnz	r3, 802412a <_lv_txt_is_cmd+0x1a>
            *state = LV_TEXT_CMD_STATE_PAR;
 8024122:	2301      	movs	r3, #1
 8024124:	7003      	strb	r3, [r0, #0]
        ret = true;
 8024126:	4618      	mov	r0, r3
 8024128:	4770      	bx	lr
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 802412a:	2b01      	cmp	r3, #1
 802412c:	d003      	beq.n	8024136 <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 802412e:	2b02      	cmp	r3, #2
 8024130:	d005      	beq.n	802413e <_lv_txt_is_cmd+0x2e>
    bool ret = false;
 8024132:	2000      	movs	r0, #0
}
 8024134:	4770      	bx	lr
            *state = LV_TEXT_CMD_STATE_WAIT;
 8024136:	2300      	movs	r3, #0
 8024138:	7003      	strb	r3, [r0, #0]
    bool ret = false;
 802413a:	4618      	mov	r0, r3
 802413c:	4770      	bx	lr
            *state = LV_TEXT_CMD_STATE_WAIT;
 802413e:	2300      	movs	r3, #0
 8024140:	7003      	strb	r3, [r0, #0]
            ret    = true;
 8024142:	2001      	movs	r0, #1
 8024144:	4770      	bx	lr
        if(c == ' ') {
 8024146:	2920      	cmp	r1, #32
 8024148:	d103      	bne.n	8024152 <_lv_txt_is_cmd+0x42>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 802414a:	2302      	movs	r3, #2
 802414c:	7003      	strb	r3, [r0, #0]
        ret = true;
 802414e:	2001      	movs	r0, #1
 8024150:	4770      	bx	lr
 8024152:	2001      	movs	r0, #1
 8024154:	4770      	bx	lr
	...

08024158 <_lv_txt_get_next_line>:
{
 8024158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802415c:	b093      	sub	sp, #76	; 0x4c
 802415e:	4606      	mov	r6, r0
 8024160:	9107      	str	r1, [sp, #28]
 8024162:	9209      	str	r2, [sp, #36]	; 0x24
 8024164:	9302      	str	r3, [sp, #8]
 8024166:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 802416a:	9304      	str	r3, [sp, #16]
    if(used_width) *used_width = 0;
 802416c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802416e:	b113      	cbz	r3, 8024176 <_lv_txt_get_next_line+0x1e>
 8024170:	2300      	movs	r3, #0
 8024172:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8024174:	8013      	strh	r3, [r2, #0]
    if(txt == NULL) return 0;
 8024176:	2e00      	cmp	r6, #0
 8024178:	f000 811f 	beq.w	80243ba <_lv_txt_get_next_line+0x262>
    if(txt[0] == '\0') return 0;
 802417c:	7833      	ldrb	r3, [r6, #0]
 802417e:	2b00      	cmp	r3, #0
 8024180:	f000 811d 	beq.w	80243be <_lv_txt_get_next_line+0x266>
    if(font == NULL) return 0;
 8024184:	9a07      	ldr	r2, [sp, #28]
 8024186:	2a00      	cmp	r2, #0
 8024188:	f000 811b 	beq.w	80243c2 <_lv_txt_get_next_line+0x26a>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 802418c:	9a04      	ldr	r2, [sp, #16]
 802418e:	f012 0206 	ands.w	r2, r2, #6
 8024192:	920b      	str	r2, [sp, #44]	; 0x2c
 8024194:	d113      	bne.n	80241be <_lv_txt_get_next_line+0x66>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8024196:	9b04      	ldr	r3, [sp, #16]
 8024198:	f013 0302 	ands.w	r3, r3, #2
 802419c:	930d      	str	r3, [sp, #52]	; 0x34
 802419e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80241a2:	9a02      	ldr	r2, [sp, #8]
 80241a4:	bf18      	it	ne
 80241a6:	461a      	movne	r2, r3
 80241a8:	9202      	str	r2, [sp, #8]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80241aa:	2700      	movs	r7, #0
 80241ac:	f88d 7047 	strb.w	r7, [sp, #71]	; 0x47
    uint32_t i = 0;                                        /*Iterating index into txt*/
 80241b0:	9710      	str	r7, [sp, #64]	; 0x40
    while(txt[i] != '\0' && max_width > 0) {
 80241b2:	46b3      	mov	fp, r6
    lv_coord_t line_w = 0;
 80241b4:	9705      	str	r7, [sp, #20]
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80241b6:	f8df a214 	ldr.w	sl, [pc, #532]	; 80243cc <_lv_txt_get_next_line+0x274>
 80241ba:	9608      	str	r6, [sp, #32]
 80241bc:	e0c1      	b.n	8024342 <_lv_txt_get_next_line+0x1ea>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 80241be:	2b0a      	cmp	r3, #10
 80241c0:	f000 8101 	beq.w	80243c6 <_lv_txt_get_next_line+0x26e>
 80241c4:	4632      	mov	r2, r6
 80241c6:	2000      	movs	r0, #0
 80241c8:	2b0d      	cmp	r3, #13
 80241ca:	d005      	beq.n	80241d8 <_lv_txt_get_next_line+0x80>
 80241cc:	b12b      	cbz	r3, 80241da <_lv_txt_get_next_line+0x82>
 80241ce:	3001      	adds	r0, #1
 80241d0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80241d4:	2b0a      	cmp	r3, #10
 80241d6:	d1f7      	bne.n	80241c8 <_lv_txt_get_next_line+0x70>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 80241d8:	3001      	adds	r0, #1
        if(used_width) *used_width = -1;
 80241da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80241dc:	2b00      	cmp	r3, #0
 80241de:	f000 80e9 	beq.w	80243b4 <_lv_txt_get_next_line+0x25c>
 80241e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80241e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80241e8:	8013      	strh	r3, [r2, #0]
 80241ea:	e0e3      	b.n	80243b4 <_lv_txt_get_next_line+0x25c>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 80241ec:	9a01      	ldr	r2, [sp, #4]
 80241ee:	4621      	mov	r1, r4
 80241f0:	9807      	ldr	r0, [sp, #28]
 80241f2:	f7fc f9f4 	bl	80205de <lv_font_get_glyph_width>
        cur_w += letter_w;
 80241f6:	4405      	add	r5, r0
 80241f8:	b2ad      	uxth	r5, r5
        if(letter_w > 0) {
 80241fa:	b200      	sxth	r0, r0
 80241fc:	2800      	cmp	r0, #0
 80241fe:	dd02      	ble.n	8024206 <_lv_txt_get_next_line+0xae>
            cur_w += letter_space;
 8024200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024202:	441d      	add	r5, r3
 8024204:	b2ad      	uxth	r5, r5
 8024206:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8024208:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 802420c:	d038      	beq.n	8024280 <_lv_txt_get_next_line+0x128>
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 802420e:	2c0a      	cmp	r4, #10
 8024210:	d03d      	beq.n	802428e <_lv_txt_get_next_line+0x136>
 8024212:	2c0d      	cmp	r4, #13
 8024214:	d03e      	beq.n	8024294 <_lv_txt_get_next_line+0x13c>
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8024216:	f5a4 429c 	sub.w	r2, r4, #19968	; 0x4e00
 802421a:	f245 13a5 	movw	r3, #20901	; 0x51a5
 802421e:	429a      	cmp	r2, r3
 8024220:	d93b      	bls.n	802429a <_lv_txt_get_next_line+0x142>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 8024222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024224:	2220      	movs	r2, #32
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8024226:	42a2      	cmp	r2, r4
 8024228:	d047      	beq.n	80242ba <_lv_txt_get_next_line+0x162>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 802422a:	3301      	adds	r3, #1
 802422c:	b2db      	uxtb	r3, r3
 802422e:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8024232:	2a00      	cmp	r2, #0
 8024234:	d1f7      	bne.n	8024226 <_lv_txt_get_next_line+0xce>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8024236:	9b03      	ldr	r3, [sp, #12]
 8024238:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 802423c:	bf08      	it	eq
 802423e:	462b      	moveq	r3, r5
 8024240:	9303      	str	r3, [sp, #12]
        i = i_next;
 8024242:	9f0e      	ldr	r7, [sp, #56]	; 0x38
        i_next = i_next_next;
 8024244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024246:	930e      	str	r3, [sp, #56]	; 0x38
    while(txt[i] != '\0') {
 8024248:	f81b 3007 	ldrb.w	r3, [fp, r7]
 802424c:	2b00      	cmp	r3, #0
 802424e:	d037      	beq.n	80242c0 <_lv_txt_get_next_line+0x168>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8024250:	9c01      	ldr	r4, [sp, #4]
 8024252:	f8d9 3000 	ldr.w	r3, [r9]
 8024256:	a90f      	add	r1, sp, #60	; 0x3c
 8024258:	4658      	mov	r0, fp
 802425a:	4798      	blx	r3
 802425c:	9001      	str	r0, [sp, #4]
        word_len++;
 802425e:	9606      	str	r6, [sp, #24]
 8024260:	3601      	adds	r6, #1
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8024262:	9b04      	ldr	r3, [sp, #16]
 8024264:	f013 0f01 	tst.w	r3, #1
 8024268:	d0c0      	beq.n	80241ec <_lv_txt_get_next_line+0x94>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 802426a:	4621      	mov	r1, r4
 802426c:	f10d 0047 	add.w	r0, sp, #71	; 0x47
 8024270:	f7ff ff4e 	bl	8024110 <_lv_txt_is_cmd>
 8024274:	2800      	cmp	r0, #0
 8024276:	d0b9      	beq.n	80241ec <_lv_txt_get_next_line+0x94>
                i = i_next;
 8024278:	9f0e      	ldr	r7, [sp, #56]	; 0x38
                i_next = i_next_next;
 802427a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802427c:	930e      	str	r3, [sp, #56]	; 0x38
                continue;   /*Skip the letter if it is part of a command*/
 802427e:	e7e3      	b.n	8024248 <_lv_txt_get_next_line+0xf0>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8024280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024282:	1aeb      	subs	r3, r5, r3
 8024284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024286:	4293      	cmp	r3, r2
 8024288:	bfc8      	it	gt
 802428a:	46b8      	movgt	r8, r7
 802428c:	e7bf      	b.n	802420e <_lv_txt_get_next_line+0xb6>
 802428e:	463b      	mov	r3, r7
 8024290:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024292:	e004      	b.n	802429e <_lv_txt_get_next_line+0x146>
 8024294:	463b      	mov	r3, r7
 8024296:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024298:	e001      	b.n	802429e <_lv_txt_get_next_line+0x146>
 802429a:	463b      	mov	r3, r7
 802429c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 802429e:	b99b      	cbnz	r3, 80242c8 <_lv_txt_get_next_line+0x170>
 80242a0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80242a4:	d113      	bne.n	80242ce <_lv_txt_get_next_line+0x176>
 80242a6:	9503      	str	r5, [sp, #12]
 80242a8:	4698      	mov	r8, r3
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 80242aa:	9b06      	ldr	r3, [sp, #24]
 80242ac:	b343      	cbz	r3, 8024300 <_lv_txt_get_next_line+0x1a8>
 80242ae:	2c0d      	cmp	r4, #13
 80242b0:	d128      	bne.n	8024304 <_lv_txt_get_next_line+0x1ac>
 80242b2:	9b01      	ldr	r3, [sp, #4]
 80242b4:	2b0a      	cmp	r3, #10
 80242b6:	d125      	bne.n	8024304 <_lv_txt_get_next_line+0x1ac>
 80242b8:	e022      	b.n	8024300 <_lv_txt_get_next_line+0x1a8>
 80242ba:	463b      	mov	r3, r7
 80242bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80242be:	e7ee      	b.n	802429e <_lv_txt_get_next_line+0x146>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80242c0:	463b      	mov	r3, r7
 80242c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80242c4:	9c01      	ldr	r4, [sp, #4]
 80242c6:	9606      	str	r6, [sp, #24]
    if(break_index == NO_BREAK_FOUND) {
 80242c8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80242cc:	d014      	beq.n	80242f8 <_lv_txt_get_next_line+0x1a0>
    if(force) return break_index;
 80242ce:	b1cf      	cbz	r7, 8024304 <_lv_txt_get_next_line+0x1ac>
 80242d0:	9e08      	ldr	r6, [sp, #32]
    if(i == 0) {
 80242d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80242d4:	2b00      	cmp	r3, #0
 80242d6:	d167      	bne.n	80243a8 <_lv_txt_get_next_line+0x250>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 80242d8:	4b3d      	ldr	r3, [pc, #244]	; (80243d0 <_lv_txt_get_next_line+0x278>)
 80242da:	681b      	ldr	r3, [r3, #0]
 80242dc:	a910      	add	r1, sp, #64	; 0x40
 80242de:	4630      	mov	r0, r6
 80242e0:	4798      	blx	r3
        if(used_width != NULL) {
 80242e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	d064      	beq.n	80243b2 <_lv_txt_get_next_line+0x25a>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 80242e8:	2200      	movs	r2, #0
 80242ea:	4601      	mov	r1, r0
 80242ec:	9807      	ldr	r0, [sp, #28]
 80242ee:	f7fc f976 	bl	80205de <lv_font_get_glyph_width>
 80242f2:	b203      	sxth	r3, r0
 80242f4:	9305      	str	r3, [sp, #20]
    if(used_width != NULL) {
 80242f6:	e059      	b.n	80243ac <_lv_txt_get_next_line+0x254>
 80242f8:	4698      	mov	r8, r3
 80242fa:	e7d6      	b.n	80242aa <_lv_txt_get_next_line+0x152>
        uint32_t word_w = 0;
 80242fc:	2300      	movs	r3, #0
 80242fe:	9303      	str	r3, [sp, #12]
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8024300:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
        max_width -= word_w;
 8024304:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8024308:	9a02      	ldr	r2, [sp, #8]
 802430a:	1ad2      	subs	r2, r2, r3
 802430c:	b212      	sxth	r2, r2
 802430e:	9202      	str	r2, [sp, #8]
        line_w += word_w;
 8024310:	9a05      	ldr	r2, [sp, #20]
 8024312:	4413      	add	r3, r2
 8024314:	b21b      	sxth	r3, r3
 8024316:	9305      	str	r3, [sp, #20]
        if(advance == 0) {
 8024318:	f1b8 0f00 	cmp.w	r8, #0
 802431c:	d03c      	beq.n	8024398 <_lv_txt_get_next_line+0x240>
        i += advance;
 802431e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8024320:	4447      	add	r7, r8
 8024322:	9710      	str	r7, [sp, #64]	; 0x40
        if(txt[0] == '\n' || txt[0] == '\r') break;
 8024324:	9a08      	ldr	r2, [sp, #32]
 8024326:	7813      	ldrb	r3, [r2, #0]
 8024328:	2b0a      	cmp	r3, #10
 802432a:	d037      	beq.n	802439c <_lv_txt_get_next_line+0x244>
 802432c:	2b0d      	cmp	r3, #13
 802432e:	d037      	beq.n	80243a0 <_lv_txt_get_next_line+0x248>
        if(txt[i] == '\n' || txt[i] == '\r') {
 8024330:	eb02 0b07 	add.w	fp, r2, r7
 8024334:	5dd3      	ldrb	r3, [r2, r7]
 8024336:	2b0a      	cmp	r3, #10
 8024338:	d028      	beq.n	802438c <_lv_txt_get_next_line+0x234>
 802433a:	2b0d      	cmp	r3, #13
 802433c:	d026      	beq.n	802438c <_lv_txt_get_next_line+0x234>
    while(txt[i] != '\0' && max_width > 0) {
 802433e:	2b00      	cmp	r3, #0
 8024340:	d030      	beq.n	80243a4 <_lv_txt_get_next_line+0x24c>
 8024342:	9b02      	ldr	r3, [sp, #8]
 8024344:	2b00      	cmp	r3, #0
 8024346:	dd25      	ble.n	8024394 <_lv_txt_get_next_line+0x23c>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8024348:	f641 73ff 	movw	r3, #8191	; 0x1fff
 802434c:	9a02      	ldr	r2, [sp, #8]
 802434e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024350:	2900      	cmp	r1, #0
 8024352:	bf08      	it	eq
 8024354:	4613      	moveq	r3, r2
 8024356:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8024358:	2300      	movs	r3, #0
 802435a:	930e      	str	r3, [sp, #56]	; 0x38
 802435c:	930f      	str	r3, [sp, #60]	; 0x3c
    letter = _lv_txt_encoded_next(txt, &i_next);
 802435e:	4b1c      	ldr	r3, [pc, #112]	; (80243d0 <_lv_txt_get_next_line+0x278>)
 8024360:	681b      	ldr	r3, [r3, #0]
 8024362:	a90e      	add	r1, sp, #56	; 0x38
 8024364:	4658      	mov	r0, fp
 8024366:	4798      	blx	r3
 8024368:	9001      	str	r0, [sp, #4]
    i_next_next = i_next;
 802436a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802436c:	930f      	str	r3, [sp, #60]	; 0x3c
    while(txt[i] != '\0') {
 802436e:	f89b 3000 	ldrb.w	r3, [fp]
 8024372:	2b00      	cmp	r3, #0
 8024374:	d0c2      	beq.n	80242fc <_lv_txt_get_next_line+0x1a4>
        uint32_t word_w = 0;
 8024376:	2200      	movs	r2, #0
 8024378:	4616      	mov	r6, r2
 802437a:	9203      	str	r2, [sp, #12]
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 802437c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 8024380:	4615      	mov	r5, r2
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 8024382:	f8df 904c 	ldr.w	r9, [pc, #76]	; 80243d0 <_lv_txt_get_next_line+0x278>
 8024386:	970a      	str	r7, [sp, #40]	; 0x28
 8024388:	4617      	mov	r7, r2
 802438a:	e761      	b.n	8024250 <_lv_txt_get_next_line+0xf8>
            i++;  /*Include the following newline in the current line*/
 802438c:	9e08      	ldr	r6, [sp, #32]
 802438e:	1c7b      	adds	r3, r7, #1
 8024390:	9310      	str	r3, [sp, #64]	; 0x40
            break;
 8024392:	e79e      	b.n	80242d2 <_lv_txt_get_next_line+0x17a>
 8024394:	9e08      	ldr	r6, [sp, #32]
 8024396:	e79c      	b.n	80242d2 <_lv_txt_get_next_line+0x17a>
 8024398:	9e08      	ldr	r6, [sp, #32]
 802439a:	e79a      	b.n	80242d2 <_lv_txt_get_next_line+0x17a>
 802439c:	9e08      	ldr	r6, [sp, #32]
 802439e:	e798      	b.n	80242d2 <_lv_txt_get_next_line+0x17a>
 80243a0:	9e08      	ldr	r6, [sp, #32]
 80243a2:	e796      	b.n	80242d2 <_lv_txt_get_next_line+0x17a>
 80243a4:	9e08      	ldr	r6, [sp, #32]
 80243a6:	e794      	b.n	80242d2 <_lv_txt_get_next_line+0x17a>
    if(used_width != NULL) {
 80243a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80243aa:	b113      	cbz	r3, 80243b2 <_lv_txt_get_next_line+0x25a>
        *used_width = line_w;
 80243ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80243ae:	9a05      	ldr	r2, [sp, #20]
 80243b0:	801a      	strh	r2, [r3, #0]
    return i;
 80243b2:	9810      	ldr	r0, [sp, #64]	; 0x40
}
 80243b4:	b013      	add	sp, #76	; 0x4c
 80243b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
 80243ba:	2000      	movs	r0, #0
 80243bc:	e7fa      	b.n	80243b4 <_lv_txt_get_next_line+0x25c>
    if(txt[0] == '\0') return 0;
 80243be:	2000      	movs	r0, #0
 80243c0:	e7f8      	b.n	80243b4 <_lv_txt_get_next_line+0x25c>
    if(font == NULL) return 0;
 80243c2:	2000      	movs	r0, #0
 80243c4:	e7f6      	b.n	80243b4 <_lv_txt_get_next_line+0x25c>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 80243c6:	2000      	movs	r0, #0
 80243c8:	e706      	b.n	80241d8 <_lv_txt_get_next_line+0x80>
 80243ca:	bf00      	nop
 80243cc:	080335a0 	.word	0x080335a0
 80243d0:	2000076c 	.word	0x2000076c

080243d4 <_lv_txt_ins>:
    if(txt_buf == NULL || ins_txt == NULL) return;
 80243d4:	b390      	cbz	r0, 802443c <_lv_txt_ins+0x68>
{
 80243d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80243da:	4689      	mov	r9, r1
 80243dc:	4616      	mov	r6, r2
 80243de:	4604      	mov	r4, r0
    if(txt_buf == NULL || ins_txt == NULL) return;
 80243e0:	b352      	cbz	r2, 8024438 <_lv_txt_ins+0x64>
    size_t ins_len = strlen(ins_txt);
 80243e2:	4610      	mov	r0, r2
 80243e4:	f7db ff28 	bl	8000238 <strlen>
    if(ins_len == 0) return;
 80243e8:	4607      	mov	r7, r0
 80243ea:	b328      	cbz	r0, 8024438 <_lv_txt_ins+0x64>
    size_t old_len = strlen(txt_buf);
 80243ec:	4620      	mov	r0, r4
 80243ee:	f7db ff23 	bl	8000238 <strlen>
 80243f2:	4605      	mov	r5, r0
    size_t new_len = ins_len + old_len;
 80243f4:	eb00 0807 	add.w	r8, r0, r7
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 80243f8:	4b11      	ldr	r3, [pc, #68]	; (8024440 <_lv_txt_ins+0x6c>)
 80243fa:	681b      	ldr	r3, [r3, #0]
 80243fc:	4649      	mov	r1, r9
 80243fe:	4620      	mov	r0, r4
 8024400:	4798      	blx	r3
    for(i = new_len; i >= pos + ins_len; i--) {
 8024402:	eb07 0c00 	add.w	ip, r7, r0
 8024406:	45e0      	cmp	r8, ip
 8024408:	d30d      	bcc.n	8024426 <_lv_txt_ins+0x52>
 802440a:	1961      	adds	r1, r4, r5
 802440c:	f108 0201 	add.w	r2, r8, #1
 8024410:	4422      	add	r2, r4
 8024412:	eba7 0e04 	sub.w	lr, r7, r4
        txt_buf[i] = txt_buf[i - ins_len];
 8024416:	f811 5901 	ldrb.w	r5, [r1], #-1
 802441a:	f802 5d01 	strb.w	r5, [r2, #-1]!
    for(i = new_len; i >= pos + ins_len; i--) {
 802441e:	eb0e 0501 	add.w	r5, lr, r1
 8024422:	45ac      	cmp	ip, r5
 8024424:	d9f7      	bls.n	8024416 <_lv_txt_ins+0x42>
    lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
 8024426:	1823      	adds	r3, r4, r0
LV_ATTRIBUTE_FAST_MEM static inline void * lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 8024428:	1e72      	subs	r2, r6, #1
 802442a:	441f      	add	r7, r3
        *d8 = *s8;
 802442c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8024430:	f803 1b01 	strb.w	r1, [r3], #1
    while(len) {
 8024434:	42bb      	cmp	r3, r7
 8024436:	d1f9      	bne.n	802442c <_lv_txt_ins+0x58>
}
 8024438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802443c:	4770      	bx	lr
 802443e:	bf00      	nop
 8024440:	20000764 	.word	0x20000764

08024444 <_lv_txt_cut>:
    if(txt == NULL) return;
 8024444:	b318      	cbz	r0, 802448e <_lv_txt_cut+0x4a>
{
 8024446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802444a:	460c      	mov	r4, r1
 802444c:	4690      	mov	r8, r2
 802444e:	4605      	mov	r5, r0
    size_t old_len = strlen(txt);
 8024450:	f7db fef2 	bl	8000238 <strlen>
 8024454:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8024456:	4f0e      	ldr	r7, [pc, #56]	; (8024490 <_lv_txt_cut+0x4c>)
 8024458:	683b      	ldr	r3, [r7, #0]
 802445a:	4621      	mov	r1, r4
 802445c:	4628      	mov	r0, r5
 802445e:	4798      	blx	r3
 8024460:	4604      	mov	r4, r0
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 8024462:	683b      	ldr	r3, [r7, #0]
 8024464:	4641      	mov	r1, r8
 8024466:	1828      	adds	r0, r5, r0
 8024468:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 802446a:	eba6 0c00 	sub.w	ip, r6, r0
 802446e:	4564      	cmp	r4, ip
 8024470:	d80b      	bhi.n	802448a <_lv_txt_cut+0x46>
 8024472:	1823      	adds	r3, r4, r0
 8024474:	442b      	add	r3, r5
 8024476:	1e62      	subs	r2, r4, #1
 8024478:	442a      	add	r2, r5
 802447a:	4428      	add	r0, r5
        txt[i] = txt[i + len];
 802447c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8024480:	f802 1f01 	strb.w	r1, [r2, #1]!
    for(i = pos; i <= old_len - len; i++) {
 8024484:	1a19      	subs	r1, r3, r0
 8024486:	458c      	cmp	ip, r1
 8024488:	d2f8      	bcs.n	802447c <_lv_txt_cut+0x38>
}
 802448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802448e:	4770      	bx	lr
 8024490:	20000764 	.word	0x20000764

08024494 <_lv_txt_set_text_vfmt>:
{
 8024494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024498:	b082      	sub	sp, #8
 802449a:	4605      	mov	r5, r0
 802449c:	460c      	mov	r4, r1
    va_copy(ap_copy, ap);
 802449e:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 80244a0:	460b      	mov	r3, r1
 80244a2:	4602      	mov	r2, r0
 80244a4:	2100      	movs	r1, #0
 80244a6:	4608      	mov	r0, r1
 80244a8:	f7fe fd26 	bl	8022ef8 <lv_vsnprintf>
 80244ac:	4606      	mov	r6, r0
    text = lv_mem_alloc(len + 1);
 80244ae:	f100 0801 	add.w	r8, r0, #1
 80244b2:	4640      	mov	r0, r8
 80244b4:	f7fd fd3a 	bl	8021f2c <lv_mem_alloc>
    LV_ASSERT_MALLOC(text);
 80244b8:	b158      	cbz	r0, 80244d2 <_lv_txt_set_text_vfmt+0x3e>
 80244ba:	4607      	mov	r7, r0
    text[len] = 0; /*Ensure NULL termination*/
 80244bc:	2300      	movs	r3, #0
 80244be:	5583      	strb	r3, [r0, r6]
    lv_vsnprintf(text, len + 1, fmt, ap);
 80244c0:	4623      	mov	r3, r4
 80244c2:	462a      	mov	r2, r5
 80244c4:	4641      	mov	r1, r8
 80244c6:	f7fe fd17 	bl	8022ef8 <lv_vsnprintf>
}
 80244ca:	4638      	mov	r0, r7
 80244cc:	b002      	add	sp, #8
 80244ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(text);
 80244d2:	e7fe      	b.n	80244d2 <_lv_txt_set_text_vfmt+0x3e>

080244d4 <_lv_txt_encoded_letter_next_2>:
{
 80244d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244d6:	4607      	mov	r7, r0
 80244d8:	460e      	mov	r6, r1
 80244da:	4615      	mov	r5, r2
 80244dc:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 80244de:	4b07      	ldr	r3, [pc, #28]	; (80244fc <_lv_txt_encoded_letter_next_2+0x28>)
 80244e0:	681b      	ldr	r3, [r3, #0]
 80244e2:	4621      	mov	r1, r4
 80244e4:	4798      	blx	r3
 80244e6:	6030      	str	r0, [r6, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 80244e8:	b128      	cbz	r0, 80244f6 <_lv_txt_encoded_letter_next_2+0x22>
 80244ea:	6820      	ldr	r0, [r4, #0]
 80244ec:	4b03      	ldr	r3, [pc, #12]	; (80244fc <_lv_txt_encoded_letter_next_2+0x28>)
 80244ee:	681b      	ldr	r3, [r3, #0]
 80244f0:	2100      	movs	r1, #0
 80244f2:	4438      	add	r0, r7
 80244f4:	4798      	blx	r3
 80244f6:	6028      	str	r0, [r5, #0]
}
 80244f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80244fa:	bf00      	nop
 80244fc:	2000076c 	.word	0x2000076c

08024500 <lv_txt_get_width>:
{
 8024500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024504:	b085      	sub	sp, #20
    if(txt == NULL) return 0;
 8024506:	2800      	cmp	r0, #0
 8024508:	d03c      	beq.n	8024584 <lv_txt_get_width+0x84>
 802450a:	460d      	mov	r5, r1
 802450c:	4614      	mov	r4, r2
 802450e:	461e      	mov	r6, r3
 8024510:	4607      	mov	r7, r0
    if(font == NULL) return 0;
 8024512:	2a00      	cmp	r2, #0
 8024514:	d039      	beq.n	802458a <lv_txt_get_width+0x8a>
    if(txt[0] == '\0') return 0;
 8024516:	7803      	ldrb	r3, [r0, #0]
 8024518:	2b00      	cmp	r3, #0
 802451a:	d039      	beq.n	8024590 <lv_txt_get_width+0x90>
    uint32_t i                   = 0;
 802451c:	2300      	movs	r3, #0
 802451e:	9303      	str	r3, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8024520:	f88d 300b 	strb.w	r3, [sp, #11]
    if(length != 0) {
 8024524:	2900      	cmp	r1, #0
 8024526:	d039      	beq.n	802459c <lv_txt_get_width+0x9c>
    lv_coord_t width             = 0;
 8024528:	4699      	mov	r9, r3
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802452a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 802452e:	f008 0801 	and.w	r8, r8, #1
 8024532:	e00e      	b.n	8024552 <lv_txt_get_width+0x52>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8024534:	9a01      	ldr	r2, [sp, #4]
 8024536:	9900      	ldr	r1, [sp, #0]
 8024538:	4620      	mov	r0, r4
 802453a:	f7fc f850 	bl	80205de <lv_font_get_glyph_width>
            if(char_width > 0) {
 802453e:	b203      	sxth	r3, r0
 8024540:	2b00      	cmp	r3, #0
 8024542:	dd03      	ble.n	802454c <lv_txt_get_width+0x4c>
                width += letter_space;
 8024544:	44b1      	add	r9, r6
 8024546:	4448      	add	r0, r9
 8024548:	fa0f f980 	sxth.w	r9, r0
        while(i < length) {
 802454c:	9b03      	ldr	r3, [sp, #12]
 802454e:	42ab      	cmp	r3, r5
 8024550:	d210      	bcs.n	8024574 <lv_txt_get_width+0x74>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8024552:	ab03      	add	r3, sp, #12
 8024554:	aa01      	add	r2, sp, #4
 8024556:	4669      	mov	r1, sp
 8024558:	4638      	mov	r0, r7
 802455a:	f7ff ffbb 	bl	80244d4 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802455e:	f1b8 0f00 	cmp.w	r8, #0
 8024562:	d0e7      	beq.n	8024534 <lv_txt_get_width+0x34>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 8024564:	9900      	ldr	r1, [sp, #0]
 8024566:	f10d 000b 	add.w	r0, sp, #11
 802456a:	f7ff fdd1 	bl	8024110 <_lv_txt_is_cmd>
 802456e:	2800      	cmp	r0, #0
 8024570:	d0e0      	beq.n	8024534 <lv_txt_get_width+0x34>
 8024572:	e7eb      	b.n	802454c <lv_txt_get_width+0x4c>
        if(width > 0) {
 8024574:	f1b9 0f00 	cmp.w	r9, #0
 8024578:	dd0c      	ble.n	8024594 <lv_txt_get_width+0x94>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 802457a:	eba9 0006 	sub.w	r0, r9, r6
 802457e:	fa0f f980 	sxth.w	r9, r0
 8024582:	e007      	b.n	8024594 <lv_txt_get_width+0x94>
    if(txt == NULL) return 0;
 8024584:	f04f 0900 	mov.w	r9, #0
 8024588:	e004      	b.n	8024594 <lv_txt_get_width+0x94>
    if(font == NULL) return 0;
 802458a:	f04f 0900 	mov.w	r9, #0
 802458e:	e001      	b.n	8024594 <lv_txt_get_width+0x94>
    if(txt[0] == '\0') return 0;
 8024590:	f04f 0900 	mov.w	r9, #0
}
 8024594:	4648      	mov	r0, r9
 8024596:	b005      	add	sp, #20
 8024598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_coord_t width             = 0;
 802459c:	f04f 0900 	mov.w	r9, #0
 80245a0:	e7f8      	b.n	8024594 <lv_txt_get_width+0x94>

080245a2 <lv_txt_get_size>:
{
 80245a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a6:	b087      	sub	sp, #28
 80245a8:	4604      	mov	r4, r0
 80245aa:	4698      	mov	r8, r3
 80245ac:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80245b0:	9004      	str	r0, [sp, #16]
 80245b2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80245b6:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    size_res->x = 0;
 80245ba:	2300      	movs	r3, #0
 80245bc:	8023      	strh	r3, [r4, #0]
    size_res->y = 0;
 80245be:	8063      	strh	r3, [r4, #2]
    if(text == NULL) return;
 80245c0:	2900      	cmp	r1, #0
 80245c2:	d053      	beq.n	802466c <lv_txt_get_size+0xca>
 80245c4:	4617      	mov	r7, r2
 80245c6:	4689      	mov	r9, r1
    if(font == NULL) return;
 80245c8:	2a00      	cmp	r2, #0
 80245ca:	d04f      	beq.n	802466c <lv_txt_get_size+0xca>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 80245cc:	f01a 0f02 	tst.w	sl, #2
 80245d0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80245d4:	bf18      	it	ne
 80245d6:	469b      	movne	fp, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 80245d8:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 80245dc:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
 80245de:	b29a      	uxth	r2, r3
    while(text[line_start] != '\0') {
 80245e0:	780b      	ldrb	r3, [r1, #0]
 80245e2:	2b00      	cmp	r3, #0
 80245e4:	d040      	beq.n	8024668 <lv_txt_get_size+0xc6>
 80245e6:	460e      	mov	r6, r1
    uint32_t line_start     = 0;
 80245e8:	2500      	movs	r5, #0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 80245ea:	1813      	adds	r3, r2, r0
 80245ec:	9302      	str	r3, [sp, #8]
 80245ee:	b29b      	uxth	r3, r3
 80245f0:	9303      	str	r3, [sp, #12]
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 80245f2:	f8cd a004 	str.w	sl, [sp, #4]
 80245f6:	2300      	movs	r3, #0
 80245f8:	9300      	str	r3, [sp, #0]
 80245fa:	465b      	mov	r3, fp
 80245fc:	4642      	mov	r2, r8
 80245fe:	4639      	mov	r1, r7
 8024600:	4630      	mov	r0, r6
 8024602:	f7ff fda9 	bl	8024158 <_lv_txt_get_next_line>
 8024606:	4601      	mov	r1, r0
 8024608:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 802460a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 802460e:	9a02      	ldr	r2, [sp, #8]
 8024610:	441a      	add	r2, r3
 8024612:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8024616:	d229      	bcs.n	802466c <lv_txt_get_size+0xca>
            size_res->y += line_space;
 8024618:	9a03      	ldr	r2, [sp, #12]
 802461a:	4413      	add	r3, r2
 802461c:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 802461e:	f8cd a000 	str.w	sl, [sp]
 8024622:	4643      	mov	r3, r8
 8024624:	463a      	mov	r2, r7
 8024626:	4630      	mov	r0, r6
 8024628:	f7ff ff6a 	bl	8024500 <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 802462c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8024630:	4283      	cmp	r3, r0
 8024632:	bfb8      	it	lt
 8024634:	4603      	movlt	r3, r0
 8024636:	8023      	strh	r3, [r4, #0]
    while(text[line_start] != '\0') {
 8024638:	eb09 0605 	add.w	r6, r9, r5
 802463c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8024640:	2b00      	cmp	r3, #0
 8024642:	d1d6      	bne.n	80245f2 <lv_txt_get_size+0x50>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 8024644:	b14d      	cbz	r5, 802465a <lv_txt_get_size+0xb8>
 8024646:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802464a:	2b0a      	cmp	r3, #10
 802464c:	d001      	beq.n	8024652 <lv_txt_get_size+0xb0>
 802464e:	2b0d      	cmp	r3, #13
 8024650:	d103      	bne.n	802465a <lv_txt_get_size+0xb8>
        size_res->y += letter_height + line_space;
 8024652:	8863      	ldrh	r3, [r4, #2]
 8024654:	9a03      	ldr	r2, [sp, #12]
 8024656:	441a      	add	r2, r3
 8024658:	8062      	strh	r2, [r4, #2]
    if(size_res->y == 0)
 802465a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 802465e:	b11b      	cbz	r3, 8024668 <lv_txt_get_size+0xc6>
        size_res->y -= line_space;
 8024660:	9a04      	ldr	r2, [sp, #16]
 8024662:	1a9b      	subs	r3, r3, r2
 8024664:	8063      	strh	r3, [r4, #2]
 8024666:	e001      	b.n	802466c <lv_txt_get_size+0xca>
        size_res->y = letter_height;
 8024668:	9b05      	ldr	r3, [sp, #20]
 802466a:	8063      	strh	r3, [r4, #2]
}
 802466c:	b007      	add	sp, #28
 802466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024672 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 8024672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024676:	4681      	mov	r9, r0
 8024678:	4688      	mov	r8, r1
 802467a:	461f      	mov	r7, r3
 802467c:	f8dd a020 	ldr.w	sl, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8024680:	4614      	mov	r4, r2
 8024682:	b94a      	cbnz	r2, 8024698 <_lv_utils_bsearch+0x26>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8024684:	2600      	movs	r6, #0
 8024686:	e014      	b.n	80246b2 <_lv_utils_bsearch+0x40>
            n    = (n / 2) - ((n & 1) == 0);
 8024688:	f084 0401 	eor.w	r4, r4, #1
 802468c:	f004 0401 	and.w	r4, r4, #1
 8024690:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
 8024692:	eb06 0807 	add.w	r8, r6, r7
    for(middle = base; n != 0;) {
 8024696:	b15c      	cbz	r4, 80246b0 <_lv_utils_bsearch+0x3e>
        middle += (n / 2) * size;
 8024698:	0865      	lsrs	r5, r4, #1
 802469a:	fb07 8605 	mla	r6, r7, r5, r8
        if((c = (*cmp)(key, middle)) > 0) {
 802469e:	4631      	mov	r1, r6
 80246a0:	4648      	mov	r0, r9
 80246a2:	47d0      	blx	sl
 80246a4:	2800      	cmp	r0, #0
 80246a6:	dcef      	bgt.n	8024688 <_lv_utils_bsearch+0x16>
        else if(c < 0) {
 80246a8:	2800      	cmp	r0, #0
 80246aa:	da02      	bge.n	80246b2 <_lv_utils_bsearch+0x40>
            n /= 2;
 80246ac:	462c      	mov	r4, r5
 80246ae:	e7f2      	b.n	8024696 <_lv_utils_bsearch+0x24>
    return NULL;
 80246b0:	2600      	movs	r6, #0
}
 80246b2:	4630      	mov	r0, r6
 80246b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080246b8 <get_angle>:
}

static lv_coord_t get_angle(const lv_obj_t * obj)
{
    lv_arc_t * arc = (lv_arc_t *)obj;
    uint16_t angle = arc->rotation;
 80246b8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 80246ba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80246be:	f013 0306 	ands.w	r3, r3, #6
 80246c2:	d104      	bne.n	80246ce <get_angle+0x16>
        angle += arc->indic_angle_end;
 80246c4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80246c6:	441a      	add	r2, r3
 80246c8:	b292      	uxth	r2, r2
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
        else angle += angle_midpoint;
    }

    return angle;
}
 80246ca:	b210      	sxth	r0, r2
 80246cc:	4770      	bx	lr
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 80246ce:	2b04      	cmp	r3, #4
 80246d0:	d020      	beq.n	8024714 <get_angle+0x5c>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 80246d2:	2b02      	cmp	r3, #2
 80246d4:	d1f9      	bne.n	80246ca <get_angle+0x12>
{
 80246d6:	b500      	push	{lr}
        int16_t bg_end = arc->bg_angle_end;
 80246d8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80246da:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80246dc:	4299      	cmp	r1, r3
 80246de:	bf3c      	itt	cc
 80246e0:	f501 71b4 	addcc.w	r1, r1, #360	; 0x168
 80246e4:	b289      	uxthcc	r1, r1
 80246e6:	b209      	sxth	r1, r1
        int16_t indic_end = arc->indic_angle_end;
 80246e8:	f8b0 c028 	ldrh.w	ip, [r0, #40]	; 0x28
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 80246ec:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 80246ee:	4584      	cmp	ip, r0
 80246f0:	bf3a      	itte	cc
 80246f2:	f50c 7eb4 	addcc.w	lr, ip, #360	; 0x168
 80246f6:	fa1f fe8e 	uxthcc.w	lr, lr
 80246fa:	46e6      	movcs	lr, ip
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 80246fc:	440b      	add	r3, r1
 80246fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8024702:	1059      	asrs	r1, r3, #1
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 8024704:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 8024708:	da08      	bge.n	802471c <get_angle+0x64>
 802470a:	4402      	add	r2, r0
 802470c:	b292      	uxth	r2, r2
}
 802470e:	b210      	sxth	r0, r2
 8024710:	f85d fb04 	ldr.w	pc, [sp], #4
        angle += arc->indic_angle_start;
 8024714:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8024716:	441a      	add	r2, r3
 8024718:	b292      	uxth	r2, r2
 802471a:	e7d6      	b.n	80246ca <get_angle+0x12>
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 802471c:	fa0f fe8e 	sxth.w	lr, lr
 8024720:	458e      	cmp	lr, r1
 8024722:	bfcc      	ite	gt
 8024724:	4462      	addgt	r2, ip
        else angle += angle_midpoint;
 8024726:	1852      	addle	r2, r2, r1
 8024728:	b292      	uxth	r2, r2
 802472a:	e7f0      	b.n	802470e <get_angle+0x56>

0802472c <get_center>:
{
 802472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024730:	b083      	sub	sp, #12
 8024732:	4604      	mov	r4, r0
 8024734:	460e      	mov	r6, r1
 8024736:	4617      	mov	r7, r2
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024738:	2212      	movs	r2, #18
 802473a:	2100      	movs	r1, #0
 802473c:	f7e6 fbb6 	bl	800aeac <lv_obj_get_style_prop>
 8024740:	4605      	mov	r5, r0
 8024742:	9001      	str	r0, [sp, #4]
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8024744:	2213      	movs	r2, #19
 8024746:	2100      	movs	r1, #0
 8024748:	4620      	mov	r0, r4
 802474a:	f7e6 fbaf 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802474e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024752:	2210      	movs	r2, #16
 8024754:	2100      	movs	r1, #0
 8024756:	4620      	mov	r0, r4
 8024758:	f7e6 fba8 	bl	800aeac <lv_obj_get_style_prop>
 802475c:	4682      	mov	sl, r0
 802475e:	9000      	str	r0, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024760:	2211      	movs	r2, #17
 8024762:	2100      	movs	r1, #0
 8024764:	4620      	mov	r0, r4
 8024766:	f7e6 fba1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802476a:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 802476e:	4620      	mov	r0, r4
 8024770:	f7e3 fd1d 	bl	80081ae <lv_obj_get_width>
 8024774:	fa0f fb85 	sxth.w	fp, r5
 8024778:	eba0 050b 	sub.w	r5, r0, fp
 802477c:	eba5 0509 	sub.w	r5, r5, r9
 8024780:	4620      	mov	r0, r4
 8024782:	f7e3 fd1a 	bl	80081ba <lv_obj_get_height>
 8024786:	fa0f fa8a 	sxth.w	sl, sl
 802478a:	eba0 000a 	sub.w	r0, r0, sl
 802478e:	eba0 0008 	sub.w	r0, r0, r8
 8024792:	4285      	cmp	r5, r0
 8024794:	da1d      	bge.n	80247d2 <get_center+0xa6>
 8024796:	4620      	mov	r0, r4
 8024798:	f7e3 fd09 	bl	80081ae <lv_obj_get_width>
 802479c:	eba0 0b0b 	sub.w	fp, r0, fp
 80247a0:	ebab 0909 	sub.w	r9, fp, r9
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 80247a4:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80247a8:	f349 084f 	sbfx	r8, r9, #1, #16
    center->x = obj->coords.x1 + r + left_bg;
 80247ac:	fa1f f388 	uxth.w	r3, r8
 80247b0:	8aa0      	ldrh	r0, [r4, #20]
 80247b2:	9a01      	ldr	r2, [sp, #4]
 80247b4:	4402      	add	r2, r0
 80247b6:	4610      	mov	r0, r2
 80247b8:	4418      	add	r0, r3
 80247ba:	8030      	strh	r0, [r6, #0]
    center->y = obj->coords.y1 + r + top_bg;
 80247bc:	8ae0      	ldrh	r0, [r4, #22]
 80247be:	9a00      	ldr	r2, [sp, #0]
 80247c0:	4402      	add	r2, r0
 80247c2:	4413      	add	r3, r2
 80247c4:	8073      	strh	r3, [r6, #2]
    if(arc_r) *arc_r = r;
 80247c6:	b10f      	cbz	r7, 80247cc <get_center+0xa0>
 80247c8:	f8a7 8000 	strh.w	r8, [r7]
}
 80247cc:	b003      	add	sp, #12
 80247ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80247d2:	4620      	mov	r0, r4
 80247d4:	f7e3 fcf1 	bl	80081ba <lv_obj_get_height>
 80247d8:	eba0 0a0a 	sub.w	sl, r0, sl
 80247dc:	ebaa 0808 	sub.w	r8, sl, r8
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 80247e0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 80247e4:	f348 084f 	sbfx	r8, r8, #1, #16
 80247e8:	e7e0      	b.n	80247ac <get_center+0x80>

080247ea <get_knob_area>:


static void get_knob_area(lv_obj_t * obj, const lv_point_t * center, lv_coord_t r, lv_area_t * knob_area)
{
 80247ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247ee:	b083      	sub	sp, #12
 80247f0:	4680      	mov	r8, r0
 80247f2:	468a      	mov	sl, r1
 80247f4:	4615      	mov	r5, r2
 80247f6:	4699      	mov	r9, r3
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80247f8:	2250      	movs	r2, #80	; 0x50
 80247fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80247fe:	f7e6 fb55 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024802:	b203      	sxth	r3, r0
    lv_coord_t indic_width = lv_obj_get_style_arc_width(obj, LV_PART_INDICATOR);
    lv_coord_t indic_width_half = indic_width / 2;
 8024804:	f3c0 34c0 	ubfx	r4, r0, #15, #1
 8024808:	441c      	add	r4, r3
    r -= indic_width_half;
 802480a:	f3c4 044f 	ubfx	r4, r4, #1, #16
 802480e:	1b2d      	subs	r5, r5, r4
 8024810:	b2ad      	uxth	r5, r5

    lv_coord_t angle = get_angle(obj);
 8024812:	4640      	mov	r0, r8
 8024814:	f7ff ff50 	bl	80246b8 <get_angle>
 8024818:	4607      	mov	r7, r0
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 802481a:	b22d      	sxth	r5, r5
 802481c:	305a      	adds	r0, #90	; 0x5a
 802481e:	b200      	sxth	r0, r0
 8024820:	f7fd fa78 	bl	8021d14 <lv_trigo_sin>
 8024824:	4606      	mov	r6, r0
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8024826:	4638      	mov	r0, r7
 8024828:	f7fd fa74 	bl	8021d14 <lv_trigo_sin>
 802482c:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802482e:	2212      	movs	r2, #18
 8024830:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024834:	4640      	mov	r0, r8
 8024836:	f7e6 fb39 	bl	800aeac <lv_obj_get_style_prop>
 802483a:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802483c:	2213      	movs	r2, #19
 802483e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024842:	4640      	mov	r0, r8
 8024844:	f7e6 fb32 	bl	800aeac <lv_obj_get_style_prop>
 8024848:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802484a:	2210      	movs	r2, #16
 802484c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024850:	4640      	mov	r0, r8
 8024852:	f7e6 fb2b 	bl	800aeac <lv_obj_get_style_prop>
 8024856:	9000      	str	r0, [sp, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024858:	2211      	movs	r2, #17
 802485a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802485e:	4640      	mov	r0, r8
 8024860:	f7e6 fb24 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8024864:	fb05 f606 	mul.w	r6, r5, r6
    lv_coord_t left_knob = lv_obj_get_style_pad_left(obj, LV_PART_KNOB);
    lv_coord_t right_knob = lv_obj_get_style_pad_right(obj, LV_PART_KNOB);
    lv_coord_t top_knob = lv_obj_get_style_pad_top(obj, LV_PART_KNOB);
    lv_coord_t bottom_knob = lv_obj_get_style_pad_bottom(obj, LV_PART_KNOB);

    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8024868:	f3c6 36cf 	ubfx	r6, r6, #15, #16
 802486c:	eb04 030b 	add.w	r3, r4, fp
 8024870:	f8ba b000 	ldrh.w	fp, [sl]
 8024874:	ebab 0b03 	sub.w	fp, fp, r3
 8024878:	44b3      	add	fp, r6
 802487a:	f8a9 b000 	strh.w	fp, [r9]
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 802487e:	4427      	add	r7, r4
 8024880:	f8ba 3000 	ldrh.w	r3, [sl]
 8024884:	441f      	add	r7, r3
 8024886:	443e      	add	r6, r7
 8024888:	f8a9 6004 	strh.w	r6, [r9, #4]
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 802488c:	9b01      	ldr	r3, [sp, #4]
 802488e:	fb05 f303 	mul.w	r3, r5, r3
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8024892:	f3c3 35cf 	ubfx	r5, r3, #15, #16
 8024896:	9a00      	ldr	r2, [sp, #0]
 8024898:	4422      	add	r2, r4
 802489a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
 802489e:	1a9b      	subs	r3, r3, r2
 80248a0:	442b      	add	r3, r5
 80248a2:	f8a9 3002 	strh.w	r3, [r9, #2]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 80248a6:	4404      	add	r4, r0
 80248a8:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80248ac:	4404      	add	r4, r0
 80248ae:	4425      	add	r5, r4
 80248b0:	f8a9 5006 	strh.w	r5, [r9, #6]
}
 80248b4:	b003      	add	sp, #12
 80248b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080248ba <lv_arc_constructor>:
{
 80248ba:	b510      	push	{r4, lr}
 80248bc:	460c      	mov	r4, r1
    arc->rotation = 0;
 80248be:	2200      	movs	r2, #0
 80248c0:	848a      	strh	r2, [r1, #36]	; 0x24
    arc->bg_angle_start = 135;
 80248c2:	2387      	movs	r3, #135	; 0x87
 80248c4:	854b      	strh	r3, [r1, #42]	; 0x2a
    arc->bg_angle_end   = 45;
 80248c6:	212d      	movs	r1, #45	; 0x2d
 80248c8:	85a1      	strh	r1, [r4, #44]	; 0x2c
    arc->indic_angle_start = 135;
 80248ca:	84e3      	strh	r3, [r4, #38]	; 0x26
    arc->indic_angle_end   = 270;
 80248cc:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80248d0:	8523      	strh	r3, [r4, #40]	; 0x28
    arc->type = LV_ARC_MODE_NORMAL;
 80248d2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    arc->value = VALUE_UNSET;
 80248d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80248da:	85e1      	strh	r1, [r4, #46]	; 0x2e
    arc->min_close = 1;
 80248dc:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    arc->min_value = 0;
 80248e0:	8622      	strh	r2, [r4, #48]	; 0x30
    arc->max_value = 100;
 80248e2:	2164      	movs	r1, #100	; 0x64
 80248e4:	8661      	strh	r1, [r4, #50]	; 0x32
    arc->dragging = false;
 80248e6:	f043 0308 	orr.w	r3, r3, #8
 80248ea:	f362 0300 	bfi	r3, r2, #0, #1
 80248ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    arc->chg_rate = 720;
 80248f2:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80248f6:	86e3      	strh	r3, [r4, #54]	; 0x36
    arc->last_tick = lv_tick_get();
 80248f8:	f7fc f979 	bl	8020bee <lv_tick_get>
 80248fc:	63a0      	str	r0, [r4, #56]	; 0x38
    arc->last_angle = arc->indic_angle_end;
 80248fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8024900:	87a3      	strh	r3, [r4, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8024902:	2102      	movs	r1, #2
 8024904:	4620      	mov	r0, r4
 8024906:	f7e2 fb35 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN | LV_OBJ_FLAG_SCROLLABLE);
 802490a:	f44f 7144 	mov.w	r1, #784	; 0x310
 802490e:	4620      	mov	r0, r4
 8024910:	f7e2 fb6a 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8024914:	210d      	movs	r1, #13
 8024916:	4620      	mov	r0, r4
 8024918:	f7e4 f8cb 	bl	8008ab2 <lv_obj_set_ext_click_area>
}
 802491c:	bd10      	pop	{r4, pc}

0802491e <inv_arc_area>:
{
 802491e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024922:	b088      	sub	sp, #32
 8024924:	4606      	mov	r6, r0
 8024926:	460c      	mov	r4, r1
 8024928:	4615      	mov	r5, r2
 802492a:	461f      	mov	r7, r3
    if(lv_obj_is_visible(obj) == false) return;
 802492c:	f7e4 f8a0 	bl	8008a70 <lv_obj_is_visible>
 8024930:	2800      	cmp	r0, #0
 8024932:	d047      	beq.n	80249c4 <inv_arc_area+0xa6>
    if(start_angle == end_angle) return;
 8024934:	42ac      	cmp	r4, r5
 8024936:	d045      	beq.n	80249c4 <inv_arc_area+0xa6>
    if(start_angle > 360) start_angle -= 360;
 8024938:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 802493c:	bf84      	itt	hi
 802493e:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 8024942:	b2a4      	uxthhi	r4, r4
    if(end_angle > 360) end_angle -= 360;
 8024944:	f5b5 7fb4 	cmp.w	r5, #360	; 0x168
 8024948:	bf84      	itt	hi
 802494a:	f5a5 75b4 	subhi.w	r5, r5, #360	; 0x168
 802494e:	b2ad      	uxthhi	r5, r5
    start_angle += arc->rotation;
 8024950:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 8024952:	4414      	add	r4, r2
 8024954:	b2a4      	uxth	r4, r4
    end_angle += arc->rotation;
 8024956:	442a      	add	r2, r5
 8024958:	fa1f f882 	uxth.w	r8, r2
    if(start_angle > 360) start_angle -= 360;
 802495c:	f5b4 7fb4 	cmp.w	r4, #360	; 0x168
 8024960:	bf84      	itt	hi
 8024962:	f5a4 74b4 	subhi.w	r4, r4, #360	; 0x168
 8024966:	b2a4      	uxthhi	r4, r4
    if(end_angle > 360) end_angle -= 360;
 8024968:	f5b8 7fb4 	cmp.w	r8, #360	; 0x168
 802496c:	bf84      	itt	hi
 802496e:	f5a8 72b4 	subhi.w	r2, r8, #360	; 0x168
 8024972:	fa1f f882 	uxthhi.w	r8, r2
    get_center(obj, &c, &r);
 8024976:	f10d 021e 	add.w	r2, sp, #30
 802497a:	a906      	add	r1, sp, #24
 802497c:	4630      	mov	r0, r6
 802497e:	f7ff fed5 	bl	802472c <get_center>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8024982:	2250      	movs	r2, #80	; 0x50
 8024984:	4639      	mov	r1, r7
 8024986:	4630      	mov	r0, r6
 8024988:	f7e6 fa90 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802498c:	b205      	sxth	r5, r0
}

static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 802498e:	2251      	movs	r2, #81	; 0x51
 8024990:	4639      	mov	r1, r7
 8024992:	4630      	mov	r0, r6
 8024994:	f7e6 fa8a 	bl	800aeac <lv_obj_get_style_prop>
    return (bool)v.num;
 8024998:	3800      	subs	r0, #0
 802499a:	bf18      	it	ne
 802499c:	2001      	movne	r0, #1
    lv_draw_arc_get_area(c.x, c.y, r, start_angle, end_angle, w, rounded, &inv_area);
 802499e:	af04      	add	r7, sp, #16
 80249a0:	9703      	str	r7, [sp, #12]
 80249a2:	9002      	str	r0, [sp, #8]
 80249a4:	9501      	str	r5, [sp, #4]
 80249a6:	f8cd 8000 	str.w	r8, [sp]
 80249aa:	4623      	mov	r3, r4
 80249ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80249b0:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80249b4:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80249b8:	f7e8 fd44 	bl	800d444 <lv_draw_arc_get_area>
    lv_obj_invalidate_area(obj, &inv_area);
 80249bc:	4639      	mov	r1, r7
 80249be:	4630      	mov	r0, r6
 80249c0:	f7e3 fe18 	bl	80085f4 <lv_obj_invalidate_area>
}
 80249c4:	b008      	add	sp, #32
 80249c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080249ca <inv_knob_area>:
{
 80249ca:	b510      	push	{r4, lr}
 80249cc:	b084      	sub	sp, #16
 80249ce:	4604      	mov	r4, r0
    get_center(obj, &c, &r);
 80249d0:	f10d 020a 	add.w	r2, sp, #10
 80249d4:	a903      	add	r1, sp, #12
 80249d6:	f7ff fea9 	bl	802472c <get_center>
    get_knob_area(obj, &c, r, &a);
 80249da:	466b      	mov	r3, sp
 80249dc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80249e0:	a903      	add	r1, sp, #12
 80249e2:	4620      	mov	r0, r4
 80249e4:	f7ff ff01 	bl	80247ea <get_knob_area>
    lv_obj_invalidate_area(obj, &a);
 80249e8:	4669      	mov	r1, sp
 80249ea:	4620      	mov	r0, r4
 80249ec:	f7e3 fe02 	bl	80085f4 <lv_obj_invalidate_area>
}
 80249f0:	b004      	add	sp, #16
 80249f2:	bd10      	pop	{r4, pc}

080249f4 <lv_arc_set_start_angle>:
{
 80249f4:	b538      	push	{r3, r4, r5, lr}
 80249f6:	4604      	mov	r4, r0
 80249f8:	460d      	mov	r5, r1
    if(start > 360) start -= 360;
 80249fa:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 80249fe:	bf84      	itt	hi
 8024a00:	f5a1 75b4 	subhi.w	r5, r1, #360	; 0x168
 8024a04:	b2ad      	uxthhi	r5, r5
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8024a06:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8024a08:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
 8024a0a:	1a5a      	subs	r2, r3, r1
 8024a0c:	fa1f fc82 	uxth.w	ip, r2
 8024a10:	b212      	sxth	r2, r2
    int16_t new_delta = arc->indic_angle_end - start;
 8024a12:	1b5b      	subs	r3, r3, r5
 8024a14:	b298      	uxth	r0, r3
 8024a16:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8024a18:	2a00      	cmp	r2, #0
 8024a1a:	bfbc      	itt	lt
 8024a1c:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 8024a20:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	bfbc      	itt	lt
 8024a26:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8024a2a:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024a2c:	1a98      	subs	r0, r3, r2
 8024a2e:	2800      	cmp	r0, #0
 8024a30:	bfb8      	it	lt
 8024a32:	4240      	neglt	r0, r0
 8024a34:	28b4      	cmp	r0, #180	; 0xb4
 8024a36:	dc0b      	bgt.n	8024a50 <lv_arc_set_start_angle+0x5c>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 8024a38:	429a      	cmp	r2, r3
 8024a3a:	dc14      	bgt.n	8024a66 <lv_arc_set_start_angle+0x72>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->indic_angle_start, LV_PART_INDICATOR);
 8024a3c:	429a      	cmp	r2, r3
 8024a3e:	da0a      	bge.n	8024a56 <lv_arc_set_start_angle+0x62>
 8024a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024a44:	460a      	mov	r2, r1
 8024a46:	4629      	mov	r1, r5
 8024a48:	4620      	mov	r0, r4
 8024a4a:	f7ff ff68 	bl	802491e <inv_arc_area>
 8024a4e:	e002      	b.n	8024a56 <lv_arc_set_start_angle+0x62>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024a50:	4620      	mov	r0, r4
 8024a52:	f7e3 fdf3 	bl	800863c <lv_obj_invalidate>
    inv_knob_area(obj);
 8024a56:	4620      	mov	r0, r4
 8024a58:	f7ff ffb7 	bl	80249ca <inv_knob_area>
    arc->indic_angle_start = start;
 8024a5c:	84e5      	strh	r5, [r4, #38]	; 0x26
    inv_knob_area(obj);
 8024a5e:	4620      	mov	r0, r4
 8024a60:	f7ff ffb3 	bl	80249ca <inv_knob_area>
}
 8024a64:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 8024a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024a6a:	462a      	mov	r2, r5
 8024a6c:	4620      	mov	r0, r4
 8024a6e:	f7ff ff56 	bl	802491e <inv_arc_area>
 8024a72:	e7f0      	b.n	8024a56 <lv_arc_set_start_angle+0x62>

08024a74 <lv_arc_set_end_angle>:
{
 8024a74:	b538      	push	{r3, r4, r5, lr}
 8024a76:	4604      	mov	r4, r0
 8024a78:	460d      	mov	r5, r1
    if(end > 360) end -= 360;
 8024a7a:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8024a7e:	bf84      	itt	hi
 8024a80:	f5a1 75b4 	subhi.w	r5, r1, #360	; 0x168
 8024a84:	b2ad      	uxthhi	r5, r5
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8024a86:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8024a88:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8024a8a:	1aca      	subs	r2, r1, r3
 8024a8c:	fa1f fc82 	uxth.w	ip, r2
 8024a90:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->indic_angle_start;
 8024a92:	1aeb      	subs	r3, r5, r3
 8024a94:	b298      	uxth	r0, r3
 8024a96:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8024a98:	2a00      	cmp	r2, #0
 8024a9a:	bfbc      	itt	lt
 8024a9c:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 8024aa0:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	bfbc      	itt	lt
 8024aa6:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8024aaa:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024aac:	1a98      	subs	r0, r3, r2
 8024aae:	2800      	cmp	r0, #0
 8024ab0:	bfb8      	it	lt
 8024ab2:	4240      	neglt	r0, r0
 8024ab4:	28b4      	cmp	r0, #180	; 0xb4
 8024ab6:	dc0a      	bgt.n	8024ace <lv_arc_set_end_angle+0x5a>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8024ab8:	429a      	cmp	r2, r3
 8024aba:	dc13      	bgt.n	8024ae4 <lv_arc_set_end_angle+0x70>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->indic_angle_end, end, LV_PART_INDICATOR);
 8024abc:	429a      	cmp	r2, r3
 8024abe:	da09      	bge.n	8024ad4 <lv_arc_set_end_angle+0x60>
 8024ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024ac4:	462a      	mov	r2, r5
 8024ac6:	4620      	mov	r0, r4
 8024ac8:	f7ff ff29 	bl	802491e <inv_arc_area>
 8024acc:	e002      	b.n	8024ad4 <lv_arc_set_end_angle+0x60>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024ace:	4620      	mov	r0, r4
 8024ad0:	f7e3 fdb4 	bl	800863c <lv_obj_invalidate>
    inv_knob_area(obj);
 8024ad4:	4620      	mov	r0, r4
 8024ad6:	f7ff ff78 	bl	80249ca <inv_knob_area>
    arc->indic_angle_end = end;
 8024ada:	8525      	strh	r5, [r4, #40]	; 0x28
    inv_knob_area(obj);
 8024adc:	4620      	mov	r0, r4
 8024ade:	f7ff ff74 	bl	80249ca <inv_knob_area>
}
 8024ae2:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8024ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024ae8:	460a      	mov	r2, r1
 8024aea:	4629      	mov	r1, r5
 8024aec:	4620      	mov	r0, r4
 8024aee:	f7ff ff16 	bl	802491e <inv_arc_area>
 8024af2:	e7ef      	b.n	8024ad4 <lv_arc_set_end_angle+0x60>

08024af4 <lv_arc_set_angles>:
{
 8024af4:	b538      	push	{r3, r4, r5, lr}
 8024af6:	4604      	mov	r4, r0
 8024af8:	460d      	mov	r5, r1
    lv_arc_set_end_angle(obj, end);
 8024afa:	4611      	mov	r1, r2
 8024afc:	f7ff ffba 	bl	8024a74 <lv_arc_set_end_angle>
    lv_arc_set_start_angle(obj, start);
 8024b00:	4629      	mov	r1, r5
 8024b02:	4620      	mov	r0, r4
 8024b04:	f7ff ff76 	bl	80249f4 <lv_arc_set_start_angle>
}
 8024b08:	bd38      	pop	{r3, r4, r5, pc}

08024b0a <value_update>:
/**
 * Used internally to update arc angles after a value change
 * @param arc pointer to an arc object
 */
static void value_update(lv_obj_t * obj)
{
 8024b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b0c:	b083      	sub	sp, #12
 8024b0e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_arc_t * arc = (lv_arc_t *)obj;

    /*If the value is still not set to any value do not update*/
    if(arc->value == VALUE_UNSET) return;
 8024b10:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	; 0x2e
 8024b14:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8024b18:	d05e      	beq.n	8024bd8 <value_update+0xce>

    int16_t bg_midpoint, range_midpoint, bg_end = arc->bg_angle_end;
 8024b1a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8024b1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8024b1e:	429a      	cmp	r2, r3
 8024b20:	bf3c      	itt	cc
 8024b22:	f502 72b4 	addcc.w	r2, r2, #360	; 0x168
 8024b26:	b292      	uxthcc	r2, r2
 8024b28:	b215      	sxth	r5, r2

    int16_t angle;
    switch(arc->type) {
 8024b2a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8024b2e:	f3c2 0241 	ubfx	r2, r2, #1, #2
 8024b32:	2a01      	cmp	r2, #1
 8024b34:	d011      	beq.n	8024b5a <value_update+0x50>
 8024b36:	2a02      	cmp	r2, #2
 8024b38:	d03f      	beq.n	8024bba <value_update+0xb0>
 8024b3a:	2a00      	cmp	r2, #0
 8024b3c:	d14c      	bne.n	8024bd8 <value_update+0xce>
        case LV_ARC_MODE_REVERSE:
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
            break;
        case LV_ARC_MODE_NORMAL:
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 8024b3e:	9500      	str	r5, [sp, #0]
 8024b40:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8024b44:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8024b48:	f7fd f9c0 	bl	8021ecc <lv_map>
 8024b4c:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 8024b4e:	b282      	uxth	r2, r0
 8024b50:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8024b52:	4620      	mov	r0, r4
 8024b54:	f7ff ffce 	bl	8024af4 <lv_arc_set_angles>

            break;
 8024b58:	e03d      	b.n	8024bd6 <value_update+0xcc>
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 8024b5a:	195a      	adds	r2, r3, r5
 8024b5c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8024b60:	1056      	asrs	r6, r2, #1
 8024b62:	f342 074f 	sbfx	r7, r2, #1, #16
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 8024b66:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8024b6a:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8024b6e:	eb01 0c02 	add.w	ip, r1, r2
 8024b72:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8024b76:	f34c 0c4f 	sbfx	ip, ip, #1, #16
            if(arc->value < range_midpoint) {
 8024b7a:	4560      	cmp	r0, ip
 8024b7c:	da0d      	bge.n	8024b9a <value_update+0x90>
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8024b7e:	9700      	str	r7, [sp, #0]
 8024b80:	4662      	mov	r2, ip
 8024b82:	f7fd f9a3 	bl	8021ecc <lv_map>
 8024b86:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 8024b88:	b281      	uxth	r1, r0
 8024b8a:	4620      	mov	r0, r4
 8024b8c:	f7ff ff32 	bl	80249f4 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 8024b90:	b2b1      	uxth	r1, r6
 8024b92:	4620      	mov	r0, r4
 8024b94:	f7ff ff6e 	bl	8024a74 <lv_arc_set_end_angle>
 8024b98:	e01d      	b.n	8024bd6 <value_update+0xcc>
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 8024b9a:	9500      	str	r5, [sp, #0]
 8024b9c:	463b      	mov	r3, r7
 8024b9e:	4661      	mov	r1, ip
 8024ba0:	f7fd f994 	bl	8021ecc <lv_map>
 8024ba4:	4607      	mov	r7, r0
 8024ba6:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 8024ba8:	b2b1      	uxth	r1, r6
 8024baa:	4620      	mov	r0, r4
 8024bac:	f7ff ff22 	bl	80249f4 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8024bb0:	b2b9      	uxth	r1, r7
 8024bb2:	4620      	mov	r0, r4
 8024bb4:	f7ff ff5e 	bl	8024a74 <lv_arc_set_end_angle>
 8024bb8:	e00d      	b.n	8024bd6 <value_update+0xcc>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 8024bba:	9300      	str	r3, [sp, #0]
 8024bbc:	462b      	mov	r3, r5
 8024bbe:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	; 0x32
 8024bc2:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8024bc6:	f7fd f981 	bl	8021ecc <lv_map>
 8024bca:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 8024bcc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8024bce:	b281      	uxth	r1, r0
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	f7ff ff8f 	bl	8024af4 <lv_arc_set_angles>
        default:
            LV_LOG_WARN("Invalid mode: %d", arc->type);
            return;
    }
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8024bd6:	87a5      	strh	r5, [r4, #60]	; 0x3c
}
 8024bd8:	b003      	add	sp, #12
 8024bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024bdc <lv_arc_set_bg_start_angle>:
{
 8024bdc:	b538      	push	{r3, r4, r5, lr}
 8024bde:	4605      	mov	r5, r0
 8024be0:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 8024be2:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8024be6:	bf84      	itt	hi
 8024be8:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
 8024bec:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8024bee:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8024bf0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8024bf2:	1a5a      	subs	r2, r3, r1
 8024bf4:	fa1f fc82 	uxth.w	ip, r2
 8024bf8:	b212      	sxth	r2, r2
    int16_t new_delta = arc->bg_angle_end - start;
 8024bfa:	1b1b      	subs	r3, r3, r4
 8024bfc:	b298      	uxth	r0, r3
 8024bfe:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8024c00:	2a00      	cmp	r2, #0
 8024c02:	bfbc      	itt	lt
 8024c04:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 8024c08:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8024c0a:	2b00      	cmp	r3, #0
 8024c0c:	bfbc      	itt	lt
 8024c0e:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8024c12:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024c14:	1a98      	subs	r0, r3, r2
 8024c16:	2800      	cmp	r0, #0
 8024c18:	bfb8      	it	lt
 8024c1a:	4240      	neglt	r0, r0
 8024c1c:	28b4      	cmp	r0, #180	; 0xb4
 8024c1e:	dc0a      	bgt.n	8024c36 <lv_arc_set_bg_start_angle+0x5a>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 8024c20:	429a      	cmp	r2, r3
 8024c22:	dc10      	bgt.n	8024c46 <lv_arc_set_bg_start_angle+0x6a>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->bg_angle_start, LV_PART_MAIN);
 8024c24:	429a      	cmp	r2, r3
 8024c26:	da09      	bge.n	8024c3c <lv_arc_set_bg_start_angle+0x60>
 8024c28:	2300      	movs	r3, #0
 8024c2a:	460a      	mov	r2, r1
 8024c2c:	4621      	mov	r1, r4
 8024c2e:	4628      	mov	r0, r5
 8024c30:	f7ff fe75 	bl	802491e <inv_arc_area>
 8024c34:	e002      	b.n	8024c3c <lv_arc_set_bg_start_angle+0x60>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024c36:	4628      	mov	r0, r5
 8024c38:	f7e3 fd00 	bl	800863c <lv_obj_invalidate>
    arc->bg_angle_start = start;
 8024c3c:	856c      	strh	r4, [r5, #42]	; 0x2a
    value_update(obj);
 8024c3e:	4628      	mov	r0, r5
 8024c40:	f7ff ff63 	bl	8024b0a <value_update>
}
 8024c44:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 8024c46:	2300      	movs	r3, #0
 8024c48:	4622      	mov	r2, r4
 8024c4a:	4628      	mov	r0, r5
 8024c4c:	f7ff fe67 	bl	802491e <inv_arc_area>
 8024c50:	e7f4      	b.n	8024c3c <lv_arc_set_bg_start_angle+0x60>

08024c52 <lv_arc_set_bg_end_angle>:
{
 8024c52:	b538      	push	{r3, r4, r5, lr}
 8024c54:	4605      	mov	r5, r0
 8024c56:	460c      	mov	r4, r1
    if(end > 360) end -= 360;
 8024c58:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 8024c5c:	bf84      	itt	hi
 8024c5e:	f5a1 74b4 	subhi.w	r4, r1, #360	; 0x168
 8024c62:	b2a4      	uxthhi	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8024c64:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8024c66:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8024c68:	1aca      	subs	r2, r1, r3
 8024c6a:	fa1f fc82 	uxth.w	ip, r2
 8024c6e:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->bg_angle_start;
 8024c70:	1ae3      	subs	r3, r4, r3
 8024c72:	b298      	uxth	r0, r3
 8024c74:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8024c76:	2a00      	cmp	r2, #0
 8024c78:	bfbc      	itt	lt
 8024c7a:	f50c 72b4 	addlt.w	r2, ip, #360	; 0x168
 8024c7e:	b212      	sxthlt	r2, r2
    if(new_delta < 0) new_delta = 360 + new_delta;
 8024c80:	2b00      	cmp	r3, #0
 8024c82:	bfbc      	itt	lt
 8024c84:	f500 73b4 	addlt.w	r3, r0, #360	; 0x168
 8024c88:	b21b      	sxthlt	r3, r3
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024c8a:	1a98      	subs	r0, r3, r2
 8024c8c:	2800      	cmp	r0, #0
 8024c8e:	bfb8      	it	lt
 8024c90:	4240      	neglt	r0, r0
 8024c92:	28b4      	cmp	r0, #180	; 0xb4
 8024c94:	dc09      	bgt.n	8024caa <lv_arc_set_bg_end_angle+0x58>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 8024c96:	429a      	cmp	r2, r3
 8024c98:	dc0f      	bgt.n	8024cba <lv_arc_set_bg_end_angle+0x68>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->bg_angle_end, end, LV_PART_MAIN);
 8024c9a:	429a      	cmp	r2, r3
 8024c9c:	da08      	bge.n	8024cb0 <lv_arc_set_bg_end_angle+0x5e>
 8024c9e:	2300      	movs	r3, #0
 8024ca0:	4622      	mov	r2, r4
 8024ca2:	4628      	mov	r0, r5
 8024ca4:	f7ff fe3b 	bl	802491e <inv_arc_area>
 8024ca8:	e002      	b.n	8024cb0 <lv_arc_set_bg_end_angle+0x5e>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8024caa:	4628      	mov	r0, r5
 8024cac:	f7e3 fcc6 	bl	800863c <lv_obj_invalidate>
    arc->bg_angle_end = end;
 8024cb0:	85ac      	strh	r4, [r5, #44]	; 0x2c
    value_update(obj);
 8024cb2:	4628      	mov	r0, r5
 8024cb4:	f7ff ff29 	bl	8024b0a <value_update>
}
 8024cb8:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 8024cba:	2300      	movs	r3, #0
 8024cbc:	460a      	mov	r2, r1
 8024cbe:	4621      	mov	r1, r4
 8024cc0:	4628      	mov	r0, r5
 8024cc2:	f7ff fe2c 	bl	802491e <inv_arc_area>
 8024cc6:	e7f3      	b.n	8024cb0 <lv_arc_set_bg_end_angle+0x5e>

08024cc8 <lv_arc_set_bg_angles>:
{
 8024cc8:	b538      	push	{r3, r4, r5, lr}
 8024cca:	4604      	mov	r4, r0
 8024ccc:	460d      	mov	r5, r1
    lv_arc_set_bg_end_angle(obj, end);
 8024cce:	4611      	mov	r1, r2
 8024cd0:	f7ff ffbf 	bl	8024c52 <lv_arc_set_bg_end_angle>
    lv_arc_set_bg_start_angle(obj, start);
 8024cd4:	4629      	mov	r1, r5
 8024cd6:	4620      	mov	r0, r4
 8024cd8:	f7ff ff80 	bl	8024bdc <lv_arc_set_bg_start_angle>
}
 8024cdc:	bd38      	pop	{r3, r4, r5, pc}

08024cde <lv_arc_set_rotation>:
{
 8024cde:	b508      	push	{r3, lr}
    arc->rotation = rotation;
 8024ce0:	8481      	strh	r1, [r0, #36]	; 0x24
    lv_obj_invalidate(obj);
 8024ce2:	f7e3 fcab 	bl	800863c <lv_obj_invalidate>
}
 8024ce6:	bd08      	pop	{r3, pc}

08024ce8 <lv_arc_set_value>:
    if(arc->value == value) return;
 8024ce8:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8024cec:	428a      	cmp	r2, r1
 8024cee:	d010      	beq.n	8024d12 <lv_arc_set_value+0x2a>
{
 8024cf0:	b508      	push	{r3, lr}
    new_value = value > arc->max_value ? arc->max_value : value;
 8024cf2:	f9b0 3032 	ldrsh.w	r3, [r0, #50]	; 0x32
 8024cf6:	428b      	cmp	r3, r1
 8024cf8:	bfa8      	it	ge
 8024cfa:	460b      	movge	r3, r1
    new_value = new_value < arc->min_value ? arc->min_value : new_value;
 8024cfc:	f9b0 1030 	ldrsh.w	r1, [r0, #48]	; 0x30
 8024d00:	4299      	cmp	r1, r3
 8024d02:	bfb8      	it	lt
 8024d04:	4619      	movlt	r1, r3
    if(arc->value == new_value) return;
 8024d06:	428a      	cmp	r2, r1
 8024d08:	d002      	beq.n	8024d10 <lv_arc_set_value+0x28>
    arc->value = new_value;
 8024d0a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    value_update(obj);
 8024d0c:	f7ff fefd 	bl	8024b0a <value_update>
}
 8024d10:	bd08      	pop	{r3, pc}
 8024d12:	4770      	bx	lr

08024d14 <lv_arc_event>:
{
 8024d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024d18:	b0ab      	sub	sp, #172	; 0xac
 8024d1a:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8024d1c:	48c5      	ldr	r0, [pc, #788]	; (8025034 <lv_arc_event+0x320>)
 8024d1e:	f7df fa54 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8024d22:	2801      	cmp	r0, #1
 8024d24:	d002      	beq.n	8024d2c <lv_arc_event+0x18>
}
 8024d26:	b02b      	add	sp, #172	; 0xac
 8024d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8024d2c:	4620      	mov	r0, r4
 8024d2e:	f7df fb6f 	bl	8004410 <lv_event_get_code>
 8024d32:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8024d34:	4620      	mov	r0, r4
 8024d36:	f7df fb67 	bl	8004408 <lv_event_get_target>
 8024d3a:	4607      	mov	r7, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 8024d3c:	4620      	mov	r0, r4
 8024d3e:	f7df fb63 	bl	8004408 <lv_event_get_target>
 8024d42:	4606      	mov	r6, r0
    if(code == LV_EVENT_PRESSING) {
 8024d44:	2d02      	cmp	r5, #2
 8024d46:	d07f      	beq.n	8024e48 <lv_arc_event+0x134>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8024d48:	2d08      	cmp	r5, #8
 8024d4a:	f000 8189 	beq.w	8025060 <lv_arc_event+0x34c>
 8024d4e:	2d03      	cmp	r5, #3
 8024d50:	f000 8186 	beq.w	8025060 <lv_arc_event+0x34c>
    else if(code == LV_EVENT_KEY) {
 8024d54:	2d0d      	cmp	r5, #13
 8024d56:	f000 819f 	beq.w	8025098 <lv_arc_event+0x384>
    else if(code == LV_EVENT_HIT_TEST) {
 8024d5a:	2d11      	cmp	r5, #17
 8024d5c:	f000 81c3 	beq.w	80250e6 <lv_arc_event+0x3d2>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8024d60:	2d13      	cmp	r5, #19
 8024d62:	f000 8208 	beq.w	8025176 <lv_arc_event+0x462>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8024d66:	2d15      	cmp	r5, #21
 8024d68:	d1dd      	bne.n	8024d26 <lv_arc_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 8024d6a:	4620      	mov	r0, r4
 8024d6c:	f7df fb4c 	bl	8004408 <lv_event_get_target>
 8024d70:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8024d72:	4620      	mov	r0, r4
 8024d74:	f7df fbbc 	bl	80044f0 <lv_event_get_draw_ctx>
 8024d78:	4606      	mov	r6, r0
    get_center(obj, &center, &arc_r);
 8024d7a:	f10d 020a 	add.w	r2, sp, #10
 8024d7e:	a903      	add	r1, sp, #12
 8024d80:	4628      	mov	r0, r5
 8024d82:	f7ff fcd3 	bl	802472c <get_center>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8024d86:	4631      	mov	r1, r6
 8024d88:	a818      	add	r0, sp, #96	; 0x60
 8024d8a:	f7e3 f804 	bl	8007d96 <lv_obj_draw_dsc_init>
    if(arc_r > 0) {
 8024d8e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024d92:	2b00      	cmp	r3, #0
 8024d94:	f300 8248 	bgt.w	8025228 <lv_arc_event+0x514>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8024d98:	2212      	movs	r2, #18
 8024d9a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8024d9e:	4628      	mov	r0, r5
 8024da0:	f7e6 f884 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024da4:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8024da6:	2213      	movs	r2, #19
 8024da8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8024dac:	4628      	mov	r0, r5
 8024dae:	f7e6 f87d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024db2:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8024db6:	2210      	movs	r2, #16
 8024db8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8024dbc:	4628      	mov	r0, r5
 8024dbe:	f7e6 f875 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024dc2:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8024dc4:	2211      	movs	r2, #17
 8024dc6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8024dca:	4628      	mov	r0, r5
 8024dcc:	f7e6 f86e 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8024dd0:	b202      	sxth	r2, r0
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 8024dd2:	4544      	cmp	r4, r8
 8024dd4:	bfb8      	it	lt
 8024dd6:	4644      	movlt	r4, r8
 8024dd8:	42bc      	cmp	r4, r7
 8024dda:	bfb8      	it	lt
 8024ddc:	463c      	movlt	r4, r7
 8024dde:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8024de2:	4294      	cmp	r4, r2
 8024de4:	bfac      	ite	ge
 8024de6:	1b1b      	subge	r3, r3, r4
 8024de8:	1a9b      	sublt	r3, r3, r2
 8024dea:	b21c      	sxth	r4, r3
    if(indic_r > 0) {
 8024dec:	2c00      	cmp	r4, #0
 8024dee:	f300 824b 	bgt.w	8025288 <lv_arc_event+0x574>
    get_knob_area(obj, &center, arc_r, &knob_area);
 8024df2:	af04      	add	r7, sp, #16
 8024df4:	463b      	mov	r3, r7
 8024df6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8024dfa:	a903      	add	r1, sp, #12
 8024dfc:	4628      	mov	r0, r5
 8024dfe:	f7ff fcf4 	bl	80247ea <get_knob_area>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8024e02:	ac0a      	add	r4, sp, #40	; 0x28
 8024e04:	4620      	mov	r0, r4
 8024e06:	f7ea fd11 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 8024e0a:	4622      	mov	r2, r4
 8024e0c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8024e10:	4628      	mov	r0, r5
 8024e12:	f7e2 fc85 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    part_draw_dsc.part = LV_PART_KNOB;
 8024e16:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8024e1a:	9325      	str	r3, [sp, #148]	; 0x94
    part_draw_dsc.class_p = MY_CLASS;
 8024e1c:	4b85      	ldr	r3, [pc, #532]	; (8025034 <lv_arc_event+0x320>)
 8024e1e:	9319      	str	r3, [sp, #100]	; 0x64
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
 8024e20:	2302      	movs	r3, #2
 8024e22:	931a      	str	r3, [sp, #104]	; 0x68
    part_draw_dsc.draw_area = &knob_area;
 8024e24:	971b      	str	r7, [sp, #108]	; 0x6c
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8024e26:	941c      	str	r4, [sp, #112]	; 0x70
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8024e28:	aa18      	add	r2, sp, #96	; 0x60
 8024e2a:	211a      	movs	r1, #26
 8024e2c:	4628      	mov	r0, r5
 8024e2e:	f7df fac9 	bl	80043c4 <lv_event_send>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 8024e32:	463a      	mov	r2, r7
 8024e34:	4621      	mov	r1, r4
 8024e36:	4630      	mov	r0, r6
 8024e38:	f7ea fd54 	bl	800f8e4 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8024e3c:	aa18      	add	r2, sp, #96	; 0x60
 8024e3e:	211b      	movs	r1, #27
 8024e40:	4628      	mov	r0, r5
 8024e42:	f7df fabf 	bl	80043c4 <lv_event_send>
}
 8024e46:	e76e      	b.n	8024d26 <lv_arc_event+0x12>
        lv_indev_t * indev = lv_indev_get_act();
 8024e48:	f7df fe62 	bl	8004b10 <lv_indev_get_act>
        if(indev == NULL) return;
 8024e4c:	4604      	mov	r4, r0
 8024e4e:	2800      	cmp	r0, #0
 8024e50:	f43f af69 	beq.w	8024d26 <lv_arc_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8024e54:	f7df fe62 	bl	8004b1c <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 8024e58:	2801      	cmp	r0, #1
 8024e5a:	f47f af64 	bne.w	8024d26 <lv_arc_event+0x12>
        lv_indev_get_point(indev, &p);
 8024e5e:	a90a      	add	r1, sp, #40	; 0x28
 8024e60:	4620      	mov	r0, r4
 8024e62:	f7df fed2 	bl	8004c0a <lv_indev_get_point>
        get_center(obj, &center, &r);
 8024e66:	aa06      	add	r2, sp, #24
 8024e68:	a918      	add	r1, sp, #96	; 0x60
 8024e6a:	4638      	mov	r0, r7
 8024e6c:	f7ff fc5e 	bl	802472c <get_center>
        p.x -= center.x;
 8024e70:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8024e74:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 8024e78:	1a9b      	subs	r3, r3, r2
 8024e7a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        p.y -= center.y;
 8024e7e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8024e82:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
 8024e86:	1a9b      	subs	r3, r3, r2
 8024e88:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        if(arc->dragging == false) {
 8024e8c:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8024e90:	f013 0f01 	tst.w	r3, #1
 8024e94:	d077      	beq.n	8024f86 <lv_arc_event+0x272>
        if(p.x == 0 && p.y == 0) return;
 8024e96:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8024e9a:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	; 0x2a
 8024e9e:	ea51 0300 	orrs.w	r3, r1, r0
 8024ea2:	f43f af40 	beq.w	8024d26 <lv_arc_event+0x12>
        int16_t bg_end = arc->bg_angle_end;
 8024ea6:	8db4      	ldrh	r4, [r6, #44]	; 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) {
 8024ea8:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 8024eaa:	42a3      	cmp	r3, r4
            bg_end = arc->bg_angle_end + 360;
 8024eac:	bf84      	itt	hi
 8024eae:	f504 72b4 	addhi.w	r2, r4, #360	; 0x168
 8024eb2:	b294      	uxthhi	r4, r2
 8024eb4:	fa0f f884 	sxth.w	r8, r4
        angle = lv_atan2(p.y, p.x);
 8024eb8:	f7fc ff92 	bl	8021de0 <lv_atan2>
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 8024ebc:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 8024ebe:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
 8024ec0:	4419      	add	r1, r3
 8024ec2:	1a41      	subs	r1, r0, r1
 8024ec4:	b28a      	uxth	r2, r1
 8024ec6:	b209      	sxth	r1, r1
        if(angle < 0) angle += 360;
 8024ec8:	2900      	cmp	r1, #0
 8024eca:	bfbc      	itt	lt
 8024ecc:	f502 72b4 	addlt.w	r2, r2, #360	; 0x168
 8024ed0:	b211      	sxthlt	r1, r2
        int16_t deg_range = bg_end - arc->bg_angle_start;
 8024ed2:	1ae2      	subs	r2, r4, r3
 8024ed4:	b210      	sxth	r0, r2
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8024ed6:	8fb2      	ldrh	r2, [r6, #60]	; 0x3c
 8024ed8:	1ad5      	subs	r5, r2, r3
 8024eda:	b2ad      	uxth	r5, r5
        int16_t delta_angle = angle - last_angle_rel;
 8024edc:	1a9b      	subs	r3, r3, r2
 8024ede:	b29b      	uxth	r3, r3
 8024ee0:	185a      	adds	r2, r3, r1
        if(LV_ABS(delta_angle) > 280) {
 8024ee2:	b212      	sxth	r2, r2
 8024ee4:	2a00      	cmp	r2, #0
 8024ee6:	bfb8      	it	lt
 8024ee8:	4252      	neglt	r2, r2
 8024eea:	b292      	uxth	r2, r2
 8024eec:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 8024ef0:	f240 8092 	bls.w	8025018 <lv_arc_event+0x304>
            if(arc->min_close) angle = 0;
 8024ef4:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
            else angle = deg_range;
 8024ef8:	f012 0f08 	tst.w	r2, #8
 8024efc:	bf0c      	ite	eq
 8024efe:	4601      	moveq	r1, r0
 8024f00:	2100      	movne	r1, #0
        delta_angle = angle - last_angle_rel;
 8024f02:	440b      	add	r3, r1
 8024f04:	b21c      	sxth	r4, r3
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 8024f06:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8024f08:	f7fb fe75 	bl	8020bf6 <lv_tick_elaps>
        int16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 8024f0c:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 8024f0e:	fb00 f203 	mul.w	r2, r0, r3
 8024f12:	4b49      	ldr	r3, [pc, #292]	; (8025038 <lv_arc_event+0x324>)
 8024f14:	fba3 3202 	umull	r3, r2, r3, r2
 8024f18:	0993      	lsrs	r3, r2, #6
 8024f1a:	f342 128f 	sbfx	r2, r2, #6, #16
        if(delta_angle > delta_angle_max) {
 8024f1e:	4294      	cmp	r4, r2
 8024f20:	dc05      	bgt.n	8024f2e <lv_arc_event+0x21a>
        else if(delta_angle < -delta_angle_max) {
 8024f22:	4252      	negs	r2, r2
 8024f24:	4294      	cmp	r4, r2
            delta_angle = -delta_angle_max;
 8024f26:	bfba      	itte	lt
 8024f28:	425b      	neglt	r3, r3
 8024f2a:	b21a      	sxthlt	r2, r3
        delta_angle = angle - last_angle_rel;
 8024f2c:	4622      	movge	r2, r4
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 8024f2e:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8024f30:	f9b6 e032 	ldrsh.w	lr, [r6, #50]	; 0x32
 8024f34:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 8024f38:	eba8 0001 	sub.w	r0, r8, r1
 8024f3c:	00c0      	lsls	r0, r0, #3
 8024f3e:	ebae 0c03 	sub.w	ip, lr, r3
 8024f42:	fb90 f0fc 	sdiv	r0, r0, ip
        round = (round + 4) >> 4;
 8024f46:	f100 0c04 	add.w	ip, r0, #4
        int16_t old_value = arc->value;
 8024f4a:	f9b6 402e 	ldrsh.w	r4, [r6, #46]	; 0x2e
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 8024f4e:	1868      	adds	r0, r5, r1
 8024f50:	eb00 102c 	add.w	r0, r0, ip, asr #4
 8024f54:	4410      	add	r0, r2
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 8024f56:	f8cd e000 	str.w	lr, [sp]
 8024f5a:	4642      	mov	r2, r8
 8024f5c:	b200      	sxth	r0, r0
 8024f5e:	f7fc ffb5 	bl	8021ecc <lv_map>
 8024f62:	b205      	sxth	r5, r0
        if(new_value != lv_arc_get_value(obj)) {
 8024f64:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8024f68:	42ab      	cmp	r3, r5
 8024f6a:	d167      	bne.n	802503c <lv_arc_event+0x328>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 8024f6c:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 8024f70:	42ab      	cmp	r3, r5
 8024f72:	d004      	beq.n	8024f7e <lv_arc_event+0x26a>
 8024f74:	f9b6 3032 	ldrsh.w	r3, [r6, #50]	; 0x32
 8024f78:	42ab      	cmp	r3, r5
 8024f7a:	f47f aed4 	bne.w	8024d26 <lv_arc_event+0x12>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 8024f7e:	f7fb fe36 	bl	8020bee <lv_tick_get>
 8024f82:	63b0      	str	r0, [r6, #56]	; 0x38
 8024f84:	e6cf      	b.n	8024d26 <lv_arc_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8024f86:	2250      	movs	r2, #80	; 0x50
 8024f88:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8024f8c:	4638      	mov	r0, r7
 8024f8e:	f7e5 ff8d 	bl	800aeac <lv_obj_get_style_prop>
 8024f92:	4604      	mov	r4, r0
            r -= indic_width;
 8024f94:	b285      	uxth	r5, r0
 8024f96:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8024f9a:	1b5b      	subs	r3, r3, r5
 8024f9c:	f8ad 3018 	strh.w	r3, [sp, #24]
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 8024fa0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8024fa4:	4638      	mov	r0, r7
 8024fa6:	f7e2 f875 	bl	8007094 <lv_obj_has_flag>
 8024faa:	b1e8      	cbz	r0, 8024fe8 <lv_arc_event+0x2d4>
                r -= indic_width;
 8024fac:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8024fb0:	1b5b      	subs	r3, r3, r5
 8024fb2:	b21b      	sxth	r3, r3
            if(r < 1) r = 1;
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	bfd8      	it	le
 8024fb8:	2301      	movle	r3, #1
 8024fba:	f8ad 3018 	strh.w	r3, [sp, #24]
            if(p.x * p.x + p.y * p.y > r * r) {
 8024fbe:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8024fc2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8024fc6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024fca:	fb01 f101 	mul.w	r1, r1, r1
 8024fce:	fb02 1202 	mla	r2, r2, r2, r1
 8024fd2:	fb03 f303 	mul.w	r3, r3, r3
 8024fd6:	429a      	cmp	r2, r3
 8024fd8:	dc14      	bgt.n	8025004 <lv_arc_event+0x2f0>
        if(arc->dragging == false) return;
 8024fda:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8024fde:	f013 0f01 	tst.w	r3, #1
 8024fe2:	f43f aea0 	beq.w	8024d26 <lv_arc_event+0x12>
 8024fe6:	e756      	b.n	8024e96 <lv_arc_event+0x182>
                r -= LV_MAX(r / 4, indic_width);
 8024fe8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8024fec:	461a      	mov	r2, r3
 8024fee:	2b00      	cmp	r3, #0
 8024ff0:	bfb8      	it	lt
 8024ff2:	1cda      	addlt	r2, r3, #3
 8024ff4:	1092      	asrs	r2, r2, #2
 8024ff6:	b224      	sxth	r4, r4
 8024ff8:	42a2      	cmp	r2, r4
 8024ffa:	bfac      	ite	ge
 8024ffc:	1a9b      	subge	r3, r3, r2
 8024ffe:	1b1b      	sublt	r3, r3, r4
 8025000:	b21b      	sxth	r3, r3
 8025002:	e7d7      	b.n	8024fb4 <lv_arc_event+0x2a0>
                arc->dragging = true;
 8025004:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8025008:	f043 0301 	orr.w	r3, r3, #1
 802500c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
                arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 8025010:	f7fb fded 	bl	8020bee <lv_tick_get>
 8025014:	63b0      	str	r0, [r6, #56]	; 0x38
 8025016:	e7e0      	b.n	8024fda <lv_arc_event+0x2c6>
            if(angle < deg_range / 2)arc->min_close = 1;
 8025018:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 802501c:	ebb1 0f62 	cmp.w	r1, r2, asr #1
 8025020:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
 8025024:	bfb4      	ite	lt
 8025026:	f042 0208 	orrlt.w	r2, r2, #8
            else arc->min_close = 0;
 802502a:	f36f 02c3 	bfcge	r2, #3, #1
 802502e:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
 8025032:	e766      	b.n	8024f02 <lv_arc_event+0x1ee>
 8025034:	080335a8 	.word	0x080335a8
 8025038:	10624dd3 	.word	0x10624dd3
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 802503c:	f7fb fdd7 	bl	8020bee <lv_tick_get>
 8025040:	63b0      	str	r0, [r6, #56]	; 0x38
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8025042:	4629      	mov	r1, r5
 8025044:	4638      	mov	r0, r7
 8025046:	f7ff fe4f 	bl	8024ce8 <lv_arc_set_value>
            if(new_value != old_value) {
 802504a:	42ac      	cmp	r4, r5
 802504c:	d08e      	beq.n	8024f6c <lv_arc_event+0x258>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802504e:	2200      	movs	r2, #0
 8025050:	211c      	movs	r1, #28
 8025052:	4638      	mov	r0, r7
 8025054:	f7df f9b6 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 8025058:	2801      	cmp	r0, #1
 802505a:	f47f ae64 	bne.w	8024d26 <lv_arc_event+0x12>
 802505e:	e785      	b.n	8024f6c <lv_arc_event+0x258>
        arc->dragging = false;
 8025060:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8025064:	f36f 0300 	bfc	r3, #0, #1
 8025068:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 802506c:	4638      	mov	r0, r7
 802506e:	f7e2 f826 	bl	80070be <lv_obj_get_group>
 8025072:	4605      	mov	r5, r0
        bool editing               = lv_group_get_editing(g);
 8025074:	f7df fc6a 	bl	800494c <lv_group_get_editing>
 8025078:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802507a:	f7df fd49 	bl	8004b10 <lv_indev_get_act>
 802507e:	f7df fd4d 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8025082:	2804      	cmp	r0, #4
 8025084:	f47f ae4f 	bne.w	8024d26 <lv_arc_event+0x12>
            if(editing) lv_group_set_editing(g, false);
 8025088:	2c00      	cmp	r4, #0
 802508a:	f43f ae4c 	beq.w	8024d26 <lv_arc_event+0x12>
 802508e:	2100      	movs	r1, #0
 8025090:	4628      	mov	r0, r5
 8025092:	f7df fbee 	bl	8004872 <lv_group_set_editing>
 8025096:	e646      	b.n	8024d26 <lv_arc_event+0x12>
        char c = *((char *)lv_event_get_param(e));
 8025098:	4620      	mov	r0, r4
 802509a:	f7df f9bd 	bl	8004418 <lv_event_get_param>
 802509e:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value = arc->value;
 80250a0:	f9b6 402e 	ldrsh.w	r4, [r6, #46]	; 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80250a4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80250a8:	2a11      	cmp	r2, #17
 80250aa:	d00b      	beq.n	80250c4 <lv_arc_event+0x3b0>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 80250ac:	2b14      	cmp	r3, #20
 80250ae:	d002      	beq.n	80250b6 <lv_arc_event+0x3a2>
 80250b0:	2b12      	cmp	r3, #18
 80250b2:	f47f ae38 	bne.w	8024d26 <lv_arc_event+0x12>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 80250b6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80250b8:	3901      	subs	r1, #1
 80250ba:	b209      	sxth	r1, r1
 80250bc:	4638      	mov	r0, r7
 80250be:	f7ff fe13 	bl	8024ce8 <lv_arc_set_value>
 80250c2:	e005      	b.n	80250d0 <lv_arc_event+0x3bc>
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 80250c4:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80250c6:	3101      	adds	r1, #1
 80250c8:	b209      	sxth	r1, r1
 80250ca:	4638      	mov	r0, r7
 80250cc:	f7ff fe0c 	bl	8024ce8 <lv_arc_set_value>
        if(old_value != arc->value) {
 80250d0:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 80250d4:	42a3      	cmp	r3, r4
 80250d6:	f43f ae26 	beq.w	8024d26 <lv_arc_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80250da:	2200      	movs	r2, #0
 80250dc:	211c      	movs	r1, #28
 80250de:	4638      	mov	r0, r7
 80250e0:	f7df f970 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 80250e4:	e61f      	b.n	8024d26 <lv_arc_event+0x12>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 80250e6:	4620      	mov	r0, r4
 80250e8:	f7df f996 	bl	8004418 <lv_event_get_param>
 80250ec:	4606      	mov	r6, r0
        get_center(obj, &p, &r);
 80250ee:	aa06      	add	r2, sp, #24
 80250f0:	a90a      	add	r1, sp, #40	; 0x28
 80250f2:	4638      	mov	r0, r7
 80250f4:	f7ff fb1a 	bl	802472c <get_center>
        if(obj->spec_attr) ext_click_area = obj->spec_attr->ext_click_pad;
 80250f8:	68bb      	ldr	r3, [r7, #8]
 80250fa:	b363      	cbz	r3, 8025156 <lv_arc_event+0x442>
 80250fc:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8025100:	2250      	movs	r2, #80	; 0x50
 8025102:	2100      	movs	r1, #0
 8025104:	4638      	mov	r0, r7
 8025106:	f7e5 fed1 	bl	800aeac <lv_obj_get_style_prop>
        r -= w + ext_click_area;
 802510a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802510e:	b2a7      	uxth	r7, r4
 8025110:	183d      	adds	r5, r7, r0
 8025112:	b2ad      	uxth	r5, r5
 8025114:	1b5c      	subs	r4, r3, r5
 8025116:	b2a4      	uxth	r4, r4
 8025118:	f8ad 4018 	strh.w	r4, [sp, #24]
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 802511c:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 8025120:	1aeb      	subs	r3, r5, r3
 8025122:	b299      	uxth	r1, r3
 8025124:	f8bd c02a 	ldrh.w	ip, [sp, #42]	; 0x2a
 8025128:	1823      	adds	r3, r4, r0
 802512a:	eb0c 0201 	add.w	r2, ip, r1
 802512e:	4401      	add	r1, r0
 8025130:	4464      	add	r4, ip
 8025132:	b224      	sxth	r4, r4
 8025134:	9400      	str	r4, [sp, #0]
 8025136:	b21b      	sxth	r3, r3
 8025138:	b212      	sxth	r2, r2
 802513a:	b209      	sxth	r1, r1
 802513c:	a818      	add	r0, sp, #96	; 0x60
 802513e:	f7fb ffa3 	bl	8021088 <lv_area_set>
        if(_lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE)) {
 8025142:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8025146:	6831      	ldr	r1, [r6, #0]
 8025148:	a818      	add	r0, sp, #96	; 0x60
 802514a:	f7fc f827 	bl	802119c <_lv_area_is_point_on>
 802514e:	b120      	cbz	r0, 802515a <lv_arc_event+0x446>
            info->res = false;
 8025150:	2300      	movs	r3, #0
 8025152:	7133      	strb	r3, [r6, #4]
            return;
 8025154:	e5e7      	b.n	8024d26 <lv_arc_event+0x12>
        lv_coord_t ext_click_area = 0;
 8025156:	2400      	movs	r4, #0
 8025158:	e7d2      	b.n	8025100 <lv_arc_event+0x3ec>
        lv_area_increase(&a, w + ext_click_area * 2, w + ext_click_area * 2);
 802515a:	1979      	adds	r1, r7, r5
 802515c:	b209      	sxth	r1, r1
 802515e:	460a      	mov	r2, r1
 8025160:	a818      	add	r0, sp, #96	; 0x60
 8025162:	f7fb ffb0 	bl	80210c6 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE);
 8025166:	f647 72ff 	movw	r2, #32767	; 0x7fff
 802516a:	6831      	ldr	r1, [r6, #0]
 802516c:	a818      	add	r0, sp, #96	; 0x60
 802516e:	f7fc f815 	bl	802119c <_lv_area_is_point_on>
 8025172:	7130      	strb	r0, [r6, #4]
 8025174:	e5d7      	b.n	8024d26 <lv_arc_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8025176:	2212      	movs	r2, #18
 8025178:	2100      	movs	r1, #0
 802517a:	4638      	mov	r0, r7
 802517c:	f7e5 fe96 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025180:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8025184:	2213      	movs	r2, #19
 8025186:	2100      	movs	r1, #0
 8025188:	4638      	mov	r0, r7
 802518a:	f7e5 fe8f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802518e:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025190:	2210      	movs	r2, #16
 8025192:	2100      	movs	r1, #0
 8025194:	4638      	mov	r0, r7
 8025196:	f7e5 fe89 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802519a:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802519e:	2211      	movs	r2, #17
 80251a0:	2100      	movs	r1, #0
 80251a2:	4638      	mov	r0, r7
 80251a4:	f7e5 fe82 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80251a8:	b206      	sxth	r6, r0
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 80251aa:	462b      	mov	r3, r5
 80251ac:	454d      	cmp	r5, r9
 80251ae:	bfb8      	it	lt
 80251b0:	464b      	movlt	r3, r9
 80251b2:	4543      	cmp	r3, r8
 80251b4:	bfb8      	it	lt
 80251b6:	4643      	movlt	r3, r8
 80251b8:	429e      	cmp	r6, r3
 80251ba:	bfb8      	it	lt
 80251bc:	461e      	movlt	r6, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80251be:	2212      	movs	r2, #18
 80251c0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80251c4:	4638      	mov	r0, r7
 80251c6:	f7e5 fe71 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80251ca:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80251ce:	2213      	movs	r2, #19
 80251d0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80251d4:	4638      	mov	r0, r7
 80251d6:	f7e5 fe69 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80251da:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80251dc:	2210      	movs	r2, #16
 80251de:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80251e2:	4638      	mov	r0, r7
 80251e4:	f7e5 fe62 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80251e8:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80251ec:	2211      	movs	r2, #17
 80251ee:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80251f2:	4638      	mov	r0, r7
 80251f4:	f7e5 fe5a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80251f8:	b207      	sxth	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 80251fa:	4620      	mov	r0, r4
 80251fc:	f7df f90c 	bl	8004418 <lv_event_get_param>
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 8025200:	462b      	mov	r3, r5
 8025202:	454d      	cmp	r5, r9
 8025204:	bfb8      	it	lt
 8025206:	464b      	movlt	r3, r9
 8025208:	4543      	cmp	r3, r8
 802520a:	bfb8      	it	lt
 802520c:	4643      	movlt	r3, r8
 802520e:	42bb      	cmp	r3, r7
 8025210:	bfb8      	it	lt
 8025212:	463b      	movlt	r3, r7
 8025214:	3302      	adds	r3, #2
        *s = LV_MAX(*s, knob_pad - bg_pad);
 8025216:	b21b      	sxth	r3, r3
 8025218:	1b9b      	subs	r3, r3, r6
 802521a:	f9b0 2000 	ldrsh.w	r2, [r0]
 802521e:	4293      	cmp	r3, r2
 8025220:	bfb8      	it	lt
 8025222:	4613      	movlt	r3, r2
 8025224:	8003      	strh	r3, [r0, #0]
 8025226:	e57e      	b.n	8024d26 <lv_arc_event+0x12>
        lv_draw_arc_dsc_init(&arc_dsc);
 8025228:	ac06      	add	r4, sp, #24
 802522a:	4620      	mov	r0, r4
 802522c:	f7e8 f8dc 	bl	800d3e8 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 8025230:	4622      	mov	r2, r4
 8025232:	2100      	movs	r1, #0
 8025234:	4628      	mov	r0, r5
 8025236:	f7e2 fcf3 	bl	8007c20 <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_MAIN;
 802523a:	2300      	movs	r3, #0
 802523c:	9325      	str	r3, [sp, #148]	; 0x94
        part_draw_dsc.class_p = MY_CLASS;
 802523e:	4a2e      	ldr	r2, [pc, #184]	; (80252f8 <lv_arc_event+0x5e4>)
 8025240:	9219      	str	r2, [sp, #100]	; 0x64
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
 8025242:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p1 = &center;
 8025244:	af03      	add	r7, sp, #12
 8025246:	9721      	str	r7, [sp, #132]	; 0x84
        part_draw_dsc.radius = arc_r;
 8025248:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802524c:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
        part_draw_dsc.arc_dsc = &arc_dsc;
 8025250:	9420      	str	r4, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8025252:	aa18      	add	r2, sp, #96	; 0x60
 8025254:	211a      	movs	r1, #26
 8025256:	4628      	mov	r0, r5
 8025258:	f7df f8b4 	bl	80043c4 <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->bg_angle_start + arc->rotation,
 802525c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 802525e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8025260:	441a      	add	r2, r3
 8025262:	b292      	uxth	r2, r2
 8025264:	9201      	str	r2, [sp, #4]
 8025266:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8025268:	4413      	add	r3, r2
 802526a:	b29b      	uxth	r3, r3
 802526c:	9300      	str	r3, [sp, #0]
 802526e:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8025272:	463a      	mov	r2, r7
 8025274:	4621      	mov	r1, r4
 8025276:	4630      	mov	r0, r6
 8025278:	f7e8 f8cd 	bl	800d416 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802527c:	aa18      	add	r2, sp, #96	; 0x60
 802527e:	211b      	movs	r1, #27
 8025280:	4628      	mov	r0, r5
 8025282:	f7df f89f 	bl	80043c4 <lv_event_send>
 8025286:	e587      	b.n	8024d98 <lv_arc_event+0x84>
        lv_draw_arc_dsc_init(&arc_dsc);
 8025288:	af06      	add	r7, sp, #24
 802528a:	4638      	mov	r0, r7
 802528c:	f7e8 f8ac 	bl	800d3e8 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 8025290:	463a      	mov	r2, r7
 8025292:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8025296:	4628      	mov	r0, r5
 8025298:	f7e2 fcc2 	bl	8007c20 <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_INDICATOR;
 802529c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80252a0:	9325      	str	r3, [sp, #148]	; 0x94
        part_draw_dsc.class_p = MY_CLASS;
 80252a2:	4b15      	ldr	r3, [pc, #84]	; (80252f8 <lv_arc_event+0x5e4>)
 80252a4:	9319      	str	r3, [sp, #100]	; 0x64
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 80252a6:	2301      	movs	r3, #1
 80252a8:	931a      	str	r3, [sp, #104]	; 0x68
        part_draw_dsc.p1 = &center;
 80252aa:	ab03      	add	r3, sp, #12
 80252ac:	9321      	str	r3, [sp, #132]	; 0x84
        part_draw_dsc.radius = indic_r;
 80252ae:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
        part_draw_dsc.arc_dsc = &arc_dsc;
 80252b2:	9720      	str	r7, [sp, #128]	; 0x80
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80252b4:	aa18      	add	r2, sp, #96	; 0x60
 80252b6:	211a      	movs	r1, #26
 80252b8:	4628      	mov	r0, r5
 80252ba:	f7df f883 	bl	80043c4 <lv_event_send>
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 80252be:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	; 0x9c
 80252c2:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 80252c6:	429a      	cmp	r2, r3
 80252c8:	bfc8      	it	gt
 80252ca:	f8ad 301a 	strhgt.w	r3, [sp, #26]
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 80252ce:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 80252d0:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 80252d2:	4411      	add	r1, r2
 80252d4:	b289      	uxth	r1, r1
 80252d6:	9101      	str	r1, [sp, #4]
 80252d8:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 80252da:	440a      	add	r2, r1
 80252dc:	b292      	uxth	r2, r2
 80252de:	9200      	str	r2, [sp, #0]
 80252e0:	b29b      	uxth	r3, r3
 80252e2:	aa03      	add	r2, sp, #12
 80252e4:	a906      	add	r1, sp, #24
 80252e6:	4630      	mov	r0, r6
 80252e8:	f7e8 f895 	bl	800d416 <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80252ec:	aa18      	add	r2, sp, #96	; 0x60
 80252ee:	211b      	movs	r1, #27
 80252f0:	4628      	mov	r0, r5
 80252f2:	f7df f867 	bl	80043c4 <lv_event_send>
 80252f6:	e57c      	b.n	8024df2 <lv_arc_event+0xde>
 80252f8:	080335a8 	.word	0x080335a8

080252fc <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80252fc:	8883      	ldrh	r3, [r0, #4]
 80252fe:	3301      	adds	r3, #1
 8025300:	8800      	ldrh	r0, [r0, #0]
 8025302:	1a18      	subs	r0, r3, r0
}
 8025304:	b200      	sxth	r0, r0
 8025306:	4770      	bx	lr

08025308 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8025308:	88c3      	ldrh	r3, [r0, #6]
 802530a:	3301      	adds	r3, #1
 802530c:	8840      	ldrh	r0, [r0, #2]
 802530e:	1a18      	subs	r0, r3, r0
}
 8025310:	b200      	sxth	r0, r0
 8025312:	4770      	bx	lr

08025314 <draw_indic>:
    lv_anim_del(&bar->cur_value_anim, NULL);
    lv_anim_del(&bar->start_value_anim, NULL);
}

static void draw_indic(lv_event_t * e)
{
 8025314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025318:	b0d1      	sub	sp, #324	; 0x144
 802531a:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802531c:	f7df f874 	bl	8004408 <lv_event_get_target>
 8025320:	4604      	mov	r4, r0
    lv_bar_t * bar = (lv_bar_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8025322:	4628      	mov	r0, r5
 8025324:	f7df f8e4 	bl	80044f0 <lv_event_get_draw_ctx>
 8025328:	9003      	str	r0, [sp, #12]

    lv_area_t bar_coords;
    lv_obj_get_coords(obj, &bar_coords);
 802532a:	a94e      	add	r1, sp, #312	; 0x138
 802532c:	4620      	mov	r0, r4
 802532e:	f7e2 fee0 	bl	80080f2 <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8025332:	2268      	movs	r2, #104	; 0x68
 8025334:	2100      	movs	r1, #0
 8025336:	4620      	mov	r0, r4
 8025338:	f7e5 fdb8 	bl	800aeac <lv_obj_get_style_prop>
 802533c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 802533e:	2269      	movs	r2, #105	; 0x69
 8025340:	2100      	movs	r1, #0
 8025342:	4620      	mov	r0, r4
 8025344:	f7e5 fdb2 	bl	800aeac <lv_obj_get_style_prop>

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_MAIN);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_MAIN);
    bar_coords.x1 -= transf_w;
 8025348:	f8bd 7138 	ldrh.w	r7, [sp, #312]	; 0x138
 802534c:	b2b6      	uxth	r6, r6
 802534e:	1bbb      	subs	r3, r7, r6
 8025350:	f8ad 3138 	strh.w	r3, [sp, #312]	; 0x138
    bar_coords.x2 += transf_w;
 8025354:	f8bd 213c 	ldrh.w	r2, [sp, #316]	; 0x13c
 8025358:	4432      	add	r2, r6
 802535a:	b292      	uxth	r2, r2
 802535c:	f8ad 213c 	strh.w	r2, [sp, #316]	; 0x13c
    bar_coords.y1 -= transf_h;
 8025360:	f8bd 113a 	ldrh.w	r1, [sp, #314]	; 0x13a
 8025364:	b285      	uxth	r5, r0
 8025366:	1b4b      	subs	r3, r1, r5
 8025368:	f8ad 313a 	strh.w	r3, [sp, #314]	; 0x13a
    bar_coords.y2 += transf_h;
 802536c:	f8bd 313e 	ldrh.w	r3, [sp, #318]	; 0x13e
 8025370:	442b      	add	r3, r5
 8025372:	b29b      	uxth	r3, r3
 8025374:	f8ad 313e 	strh.w	r3, [sp, #318]	; 0x13e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8025378:	3601      	adds	r6, #1
 802537a:	4416      	add	r6, r2
 802537c:	1bf6      	subs	r6, r6, r7
 802537e:	b232      	sxth	r2, r6
 8025380:	9201      	str	r2, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8025382:	3501      	adds	r5, #1
 8025384:	441d      	add	r5, r3
 8025386:	1a6d      	subs	r5, r5, r1
 8025388:	b22d      	sxth	r5, r5
    lv_coord_t barw = lv_area_get_width(&bar_coords);
    lv_coord_t barh = lv_area_get_height(&bar_coords);
    int32_t range = bar->max_value - bar->min_value;
 802538a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802538c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802538e:	eba1 0b02 	sub.w	fp, r1, r2
    bool hor = barw >= barh ? true : false;
    bool sym = false;
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8025392:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8025396:	f003 0303 	and.w	r3, r3, #3
 802539a:	2b01      	cmp	r3, #1
 802539c:	f000 80cf 	beq.w	802553e <draw_indic+0x22a>
    bool sym = false;
 80253a0:	2300      	movs	r3, #0
 80253a2:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80253a4:	2212      	movs	r2, #18
 80253a6:	2100      	movs	r1, #0
 80253a8:	4620      	mov	r0, r4
 80253aa:	f7e5 fd7f 	bl	800aeac <lv_obj_get_style_prop>
 80253ae:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80253b0:	2213      	movs	r2, #19
 80253b2:	2100      	movs	r1, #0
 80253b4:	4620      	mov	r0, r4
 80253b6:	f7e5 fd79 	bl	800aeac <lv_obj_get_style_prop>
 80253ba:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80253bc:	2210      	movs	r2, #16
 80253be:	2100      	movs	r1, #0
 80253c0:	4620      	mov	r0, r4
 80253c2:	f7e5 fd73 	bl	800aeac <lv_obj_get_style_prop>
 80253c6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80253c8:	2211      	movs	r2, #17
 80253ca:	2100      	movs	r1, #0
 80253cc:	4620      	mov	r0, r4
 80253ce:	f7e5 fd6d 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t bg_left = lv_obj_get_style_pad_left(obj,     LV_PART_MAIN);
    lv_coord_t bg_right = lv_obj_get_style_pad_right(obj,   LV_PART_MAIN);
    lv_coord_t bg_top = lv_obj_get_style_pad_top(obj,       LV_PART_MAIN);
    lv_coord_t bg_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    /*Respect padding and minimum width/height too*/
    lv_area_copy(&bar->indic_area, &bar_coords);
 80253d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80253d6:	9302      	str	r3, [sp, #8]
    dest->y1 = src->y1;
 80253d8:	f9bd 113a 	ldrsh.w	r1, [sp, #314]	; 0x13a
    dest->x2 = src->x2;
 80253dc:	f9bd 213c 	ldrsh.w	r2, [sp, #316]	; 0x13c
    dest->y2 = src->y2;
 80253e0:	f9bd 313e 	ldrsh.w	r3, [sp, #318]	; 0x13e
    bar->indic_area.x1 += bg_left;
 80253e4:	fa1f f689 	uxth.w	r6, r9
 80253e8:	9606      	str	r6, [sp, #24]
 80253ea:	f8bd c138 	ldrh.w	ip, [sp, #312]	; 0x138
 80253ee:	44b4      	add	ip, r6
 80253f0:	fa1f fc8c 	uxth.w	ip, ip
 80253f4:	f8a4 c034 	strh.w	ip, [r4, #52]	; 0x34
    bar->indic_area.x2 -= bg_right;
 80253f8:	fa1f f688 	uxth.w	r6, r8
 80253fc:	9607      	str	r6, [sp, #28]
 80253fe:	1b92      	subs	r2, r2, r6
 8025400:	b292      	uxth	r2, r2
 8025402:	8722      	strh	r2, [r4, #56]	; 0x38
    bar->indic_area.y1 += bg_top;
 8025404:	b2be      	uxth	r6, r7
 8025406:	9608      	str	r6, [sp, #32]
 8025408:	4431      	add	r1, r6
 802540a:	b289      	uxth	r1, r1
 802540c:	86e1      	strh	r1, [r4, #54]	; 0x36
    bar->indic_area.y2 -= bg_bottom;
 802540e:	b280      	uxth	r0, r0
 8025410:	9004      	str	r0, [sp, #16]
 8025412:	1a1b      	subs	r3, r3, r0
 8025414:	b29b      	uxth	r3, r3
 8025416:	8763      	strh	r3, [r4, #58]	; 0x3a

    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8025418:	9801      	ldr	r0, [sp, #4]
 802541a:	4285      	cmp	r5, r0
 802541c:	f300 80a0 	bgt.w	8025560 <draw_indic+0x24c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8025420:	3301      	adds	r3, #1
 8025422:	1a5b      	subs	r3, r3, r1
 8025424:	b21b      	sxth	r3, r3
 8025426:	2b03      	cmp	r3, #3
 8025428:	dc09      	bgt.n	802543e <draw_indic+0x12a>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 802542a:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 802542e:	8ae2      	ldrh	r2, [r4, #22]
 8025430:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8025434:	b29b      	uxth	r3, r3
 8025436:	1e9a      	subs	r2, r3, #2
 8025438:	86e2      	strh	r2, [r4, #54]	; 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 802543a:	3302      	adds	r3, #2
 802543c:	8763      	strh	r3, [r4, #58]	; 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802543e:	f8b4 9038 	ldrh.w	r9, [r4, #56]	; 0x38
 8025442:	f109 0901 	add.w	r9, r9, #1
 8025446:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8025448:	eba9 0903 	sub.w	r9, r9, r3
 802544c:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8025450:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8025452:	3301      	adds	r3, #1
 8025454:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8025456:	1a9b      	subs	r3, r3, r2
 8025458:	b21b      	sxth	r3, r3
 802545a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_coord_t * axis1, * axis2;
    lv_coord_t (*indic_length_calc)(const lv_area_t * area);

    if(hor) {
        axis1 = &bar->indic_area.x1;
        axis2 = &bar->indic_area.x2;
 802545c:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8025460:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8025462:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        axis1 = &bar->indic_area.x1;
 8025466:	f8dd a008 	ldr.w	sl, [sp, #8]
        indic_length_calc = lv_area_get_width;
 802546a:	4b8c      	ldr	r3, [pc, #560]	; (802569c <draw_indic+0x388>)
 802546c:	930b      	str	r3, [sp, #44]	; 0x2c
        axis1 = &bar->indic_area.y1;
        axis2 = &bar->indic_area.y2;
        indic_length_calc = lv_area_get_height;
    }

    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 802546e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8025470:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8025474:	f000 809e 	beq.w	80255b4 <draw_indic+0x2a0>
        lv_coord_t anim_start_value_start_x =
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 8025478:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802547a:	6d27      	ldr	r7, [r4, #80]	; 0x50
 802547c:	1aff      	subs	r7, r7, r3
 802547e:	fb09 f707 	mul.w	r7, r9, r7
 8025482:	fb97 f7fb 	sdiv	r7, r7, fp
        lv_coord_t anim_start_value_end_x =
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 8025486:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8025488:	1ad3      	subs	r3, r2, r3
 802548a:	fb09 f303 	mul.w	r3, r9, r3
 802548e:	fb93 f3fb 	sdiv	r3, r3, fp

        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 8025492:	b21b      	sxth	r3, r3
 8025494:	b23a      	sxth	r2, r7
 8025496:	1a9b      	subs	r3, r3, r2
 8025498:	fb01 f303 	mul.w	r3, r1, r3
 802549c:	2b00      	cmp	r3, #0
 802549e:	bfb8      	it	lt
 80254a0:	33ff      	addlt	r3, #255	; 0xff
                              LV_BAR_ANIM_STATE_END);

        anim_start_value_x += anim_start_value_start_x;
 80254a2:	eb07 2723 	add.w	r7, r7, r3, asr #8
 80254a6:	b23f      	sxth	r7, r7
    }
    else {
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
    }

    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 80254a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80254aa:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80254ae:	f000 808a 	beq.w	80255c6 <draw_indic+0x2b2>
        lv_coord_t anim_cur_value_start_x =
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 80254b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80254b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80254b6:	eba0 0803 	sub.w	r8, r0, r3
 80254ba:	fb09 f808 	mul.w	r8, r9, r8
 80254be:	fb98 f8fb 	sdiv	r8, r8, fp
        lv_coord_t anim_cur_value_end_x =
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 80254c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80254c4:	1ad3      	subs	r3, r2, r3
 80254c6:	fb09 f303 	mul.w	r3, r9, r3
 80254ca:	fb93 f3fb 	sdiv	r3, r3, fp

        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 80254ce:	b21b      	sxth	r3, r3
 80254d0:	fa0f f288 	sxth.w	r2, r8
 80254d4:	1a9b      	subs	r3, r3, r2
 80254d6:	fb01 f303 	mul.w	r3, r1, r3
                                                      bar->cur_value_anim.anim_state) /
 80254da:	2b00      	cmp	r3, #0
 80254dc:	bfb8      	it	lt
 80254de:	33ff      	addlt	r3, #255	; 0xff
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 80254e0:	eb08 2823 	add.w	r8, r8, r3, asr #8
 80254e4:	fa0f f888 	sxth.w	r8, r8
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80254e8:	2216      	movs	r2, #22
 80254ea:	2100      	movs	r1, #0
 80254ec:	4620      	mov	r0, r4
 80254ee:	f7e5 fcdd 	bl	800aeac <lv_obj_get_style_prop>
    else {
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
    }

    lv_base_dir_t base_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 80254f2:	9b01      	ldr	r3, [sp, #4]
 80254f4:	429d      	cmp	r5, r3
 80254f6:	f300 80d7 	bgt.w	80256a8 <draw_indic+0x394>
 80254fa:	b2c0      	uxtb	r0, r0
 80254fc:	2801      	cmp	r0, #1
 80254fe:	d06d      	beq.n	80255dc <draw_indic+0x2c8>
        anim_start_value_x = -anim_start_value_x;
    }

    /*Set the indicator length*/
    if(hor) {
        *axis2 = *axis1 + anim_cur_value_x;
 8025500:	f8ba 3000 	ldrh.w	r3, [sl]
 8025504:	4498      	add	r8, r3
 8025506:	f8a6 8000 	strh.w	r8, [r6]
        *axis1 += anim_start_value_x;
 802550a:	f8ba 3000 	ldrh.w	r3, [sl]
 802550e:	441f      	add	r7, r3
 8025510:	b2bf      	uxth	r7, r7
 8025512:	f8aa 7000 	strh.w	r7, [sl]
    }
    else {
        *axis1 = *axis2 - anim_cur_value_x + 1;
        *axis2 -= anim_start_value_x;
    }
    if(sym) {
 8025516:	9b05      	ldr	r3, [sp, #20]
 8025518:	2b00      	cmp	r3, #0
 802551a:	f000 80d2 	beq.w	80256c2 <draw_indic+0x3ae>
        lv_coord_t zero, shift;
        shift = (-bar->min_value * anim_length) / range;
 802551e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8025520:	425b      	negs	r3, r3
 8025522:	fb09 f903 	mul.w	r9, r9, r3
 8025526:	fb99 fbfb 	sdiv	fp, r9, fp
        if(hor) {
            zero = *axis1 + shift;
 802552a:	445f      	add	r7, fp
 802552c:	b23f      	sxth	r7, r7
            if(*axis2 > zero)
 802552e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8025532:	42bb      	cmp	r3, r7
 8025534:	dc5c      	bgt.n	80255f0 <draw_indic+0x2dc>
                *axis1 = zero;
            else {
                *axis1 = *axis2;
 8025536:	f8aa 3000 	strh.w	r3, [sl]
                *axis2 = zero;
 802553a:	8037      	strh	r7, [r6, #0]
 802553c:	e0c6      	b.n	80256cc <draw_indic+0x3b8>
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 802553e:	2a00      	cmp	r2, #0
 8025540:	db02      	blt.n	8025548 <draw_indic+0x234>
    bool sym = false;
 8025542:	2300      	movs	r3, #0
 8025544:	9305      	str	r3, [sp, #20]
 8025546:	e72d      	b.n	80253a4 <draw_indic+0x90>
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8025548:	2900      	cmp	r1, #0
 802554a:	dd06      	ble.n	802555a <draw_indic+0x246>
 802554c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802554e:	4293      	cmp	r3, r2
 8025550:	bf14      	ite	ne
 8025552:	2300      	movne	r3, #0
 8025554:	2301      	moveq	r3, #1
 8025556:	9305      	str	r3, [sp, #20]
 8025558:	e724      	b.n	80253a4 <draw_indic+0x90>
    bool sym = false;
 802555a:	2300      	movs	r3, #0
 802555c:	9305      	str	r3, [sp, #20]
 802555e:	e721      	b.n	80253a4 <draw_indic+0x90>
 8025560:	3201      	adds	r2, #1
 8025562:	eba2 020c 	sub.w	r2, r2, ip
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8025566:	b212      	sxth	r2, r2
 8025568:	2a03      	cmp	r2, #3
 802556a:	dc0a      	bgt.n	8025582 <draw_indic+0x26e>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 802556c:	9b01      	ldr	r3, [sp, #4]
 802556e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8025572:	8aa2      	ldrh	r2, [r4, #20]
 8025574:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8025578:	b29b      	uxth	r3, r3
 802557a:	1e9a      	subs	r2, r3, #2
 802557c:	86a2      	strh	r2, [r4, #52]	; 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 802557e:	3302      	adds	r3, #2
 8025580:	8723      	strh	r3, [r4, #56]	; 0x38
 8025582:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8025584:	3301      	adds	r3, #1
 8025586:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8025588:	1a9b      	subs	r3, r3, r2
 802558a:	b21b      	sxth	r3, r3
 802558c:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802558e:	f8b4 903a 	ldrh.w	r9, [r4, #58]	; 0x3a
 8025592:	f109 0901 	add.w	r9, r9, #1
 8025596:	46a2      	mov	sl, r4
 8025598:	f83a 3f36 	ldrh.w	r3, [sl, #54]!
 802559c:	eba9 0903 	sub.w	r9, r9, r3
 80255a0:	fa0f f989 	sxth.w	r9, r9
        axis2 = &bar->indic_area.y2;
 80255a4:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 80255a8:	461e      	mov	r6, r3
 80255aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
        indic_length_calc = lv_area_get_height;
 80255ae:	4b3c      	ldr	r3, [pc, #240]	; (80256a0 <draw_indic+0x38c>)
 80255b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80255b2:	e75c      	b.n	802546e <draw_indic+0x15a>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 80255b4:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80255b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80255b8:	1aff      	subs	r7, r7, r3
 80255ba:	fb09 f707 	mul.w	r7, r9, r7
 80255be:	fb97 f7fb 	sdiv	r7, r7, fp
 80255c2:	b23f      	sxth	r7, r7
 80255c4:	e770      	b.n	80254a8 <draw_indic+0x194>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 80255c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80255c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80255ca:	eba3 0802 	sub.w	r8, r3, r2
 80255ce:	fb09 f808 	mul.w	r8, r9, r8
 80255d2:	fb98 f8fb 	sdiv	r8, r8, fp
 80255d6:	fa0f f888 	sxth.w	r8, r8
 80255da:	e785      	b.n	80254e8 <draw_indic+0x1d4>
        anim_cur_value_x = -anim_cur_value_x;
 80255dc:	f1c8 0800 	rsb	r8, r8, #0
 80255e0:	fa0f f888 	sxth.w	r8, r8
        anim_start_value_x = -anim_start_value_x;
 80255e4:	427f      	negs	r7, r7
 80255e6:	b23f      	sxth	r7, r7
 80255e8:	4653      	mov	r3, sl
        axis1 = axis2;
 80255ea:	46b2      	mov	sl, r6
        axis2 = tmp;
 80255ec:	461e      	mov	r6, r3
 80255ee:	e787      	b.n	8025500 <draw_indic+0x1ec>
                *axis1 = zero;
 80255f0:	f8aa 7000 	strh.w	r7, [sl]
 80255f4:	e06a      	b.n	80256cc <draw_indic+0x3b8>
            }
        }
        else {
            zero = *axis2 - shift + 1;
            if(*axis1 > zero)
                *axis2 = zero;
 80255f6:	8037      	strh	r7, [r6, #0]
            else {
                *axis2 = *axis1;
                *axis1 = zero;
            }
            if(*axis2 < *axis1) {
 80255f8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80255fc:	f9ba 3000 	ldrsh.w	r3, [sl]
 8025600:	429a      	cmp	r2, r3
 8025602:	da63      	bge.n	80256cc <draw_indic+0x3b8>
                /*swap*/
                zero = *axis1;
                *axis1 = *axis2;
 8025604:	f8aa 2000 	strh.w	r2, [sl]
                *axis2 = zero;
 8025608:	8033      	strh	r3, [r6, #0]
 802560a:	e05f      	b.n	80256cc <draw_indic+0x3b8>

    /*Do not draw a zero length indicator but at least call the draw part events*/
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {

        lv_obj_draw_part_dsc_t part_draw_dsc;
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 802560c:	9903      	ldr	r1, [sp, #12]
 802560e:	a80c      	add	r0, sp, #48	; 0x30
 8025610:	f7e2 fbc1 	bl	8007d96 <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_INDICATOR;
 8025614:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8025618:	9319      	str	r3, [sp, #100]	; 0x64
        part_draw_dsc.class_p = MY_CLASS;
 802561a:	4b22      	ldr	r3, [pc, #136]	; (80256a4 <draw_indic+0x390>)
 802561c:	930d      	str	r3, [sp, #52]	; 0x34
        part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 802561e:	2300      	movs	r3, #0
 8025620:	930e      	str	r3, [sp, #56]	; 0x38
        part_draw_dsc.draw_area = &bar->indic_area;
 8025622:	9b02      	ldr	r3, [sp, #8]
 8025624:	930f      	str	r3, [sp, #60]	; 0x3c

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8025626:	aa0c      	add	r2, sp, #48	; 0x30
 8025628:	211a      	movs	r1, #26
 802562a:	4620      	mov	r0, r4
 802562c:	f7de feca 	bl	80043c4 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8025630:	aa0c      	add	r2, sp, #48	; 0x30
 8025632:	211b      	movs	r1, #27
 8025634:	4620      	mov	r0, r4
 8025636:	f7de fec5 	bl	80043c4 <lv_event_send>
        return;
 802563a:	e12c      	b.n	8025896 <draw_indic+0x582>
 802563c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 802563e:	3201      	adds	r2, #1
 8025640:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8025642:	1a52      	subs	r2, r2, r1

    /*Draw only the shadow and outline only if the indicator is long enough.
     *The radius of the bg and the indicator can make a strange shape where
     *it'd be very difficult to draw shadow.*/
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
       (!hor && lv_area_get_height(&bar->indic_area) > indic_radius * 2)) {
 8025644:	b212      	sxth	r2, r2
 8025646:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 802564a:	f340 809b 	ble.w	8025784 <draw_indic+0x470>
 802564e:	e081      	b.n	8025754 <draw_indic+0x440>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8025650:	3301      	adds	r3, #1
 8025652:	1a5b      	subs	r3, r3, r1
    mask_indic_max_area.y2 -= bg_bottom;
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
    }
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8025654:	b21b      	sxth	r3, r3
 8025656:	2b03      	cmp	r3, #3
 8025658:	f300 80ea 	bgt.w	8025830 <draw_indic+0x51c>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 802565c:	9b01      	ldr	r3, [sp, #4]
 802565e:	eb03 76d3 	add.w	r6, r3, r3, lsr #31
 8025662:	8aa3      	ldrh	r3, [r4, #20]
 8025664:	eb03 0666 	add.w	r6, r3, r6, asr #1
 8025668:	b2b6      	uxth	r6, r6
 802566a:	1eb3      	subs	r3, r6, #2
 802566c:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 8025670:	3602      	adds	r6, #2
 8025672:	f8ad 6094 	strh.w	r6, [sp, #148]	; 0x94
 8025676:	e0db      	b.n	8025830 <draw_indic+0x51c>
            zero = *axis2 - shift + 1;
 8025678:	3701      	adds	r7, #1
        shift = (-bar->min_value * anim_length) / range;
 802567a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802567c:	425b      	negs	r3, r3
 802567e:	fb09 f903 	mul.w	r9, r9, r3
 8025682:	fb99 fbfb 	sdiv	fp, r9, fp
            zero = *axis2 - shift + 1;
 8025686:	eba7 070b 	sub.w	r7, r7, fp
 802568a:	b23f      	sxth	r7, r7
            if(*axis1 > zero)
 802568c:	f9ba 3000 	ldrsh.w	r3, [sl]
 8025690:	42bb      	cmp	r3, r7
 8025692:	dcb0      	bgt.n	80255f6 <draw_indic+0x2e2>
                *axis2 = *axis1;
 8025694:	8033      	strh	r3, [r6, #0]
                *axis1 = zero;
 8025696:	f8aa 7000 	strh.w	r7, [sl]
 802569a:	e7ad      	b.n	80255f8 <draw_indic+0x2e4>
 802569c:	080252fd 	.word	0x080252fd
 80256a0:	08025309 	.word	0x08025309
 80256a4:	080335c4 	.word	0x080335c4
        *axis1 = *axis2 - anim_cur_value_x + 1;
 80256a8:	8833      	ldrh	r3, [r6, #0]
 80256aa:	3301      	adds	r3, #1
 80256ac:	eba3 0808 	sub.w	r8, r3, r8
 80256b0:	f8aa 8000 	strh.w	r8, [sl]
        *axis2 -= anim_start_value_x;
 80256b4:	8833      	ldrh	r3, [r6, #0]
 80256b6:	1bdf      	subs	r7, r3, r7
 80256b8:	b2bf      	uxth	r7, r7
 80256ba:	8037      	strh	r7, [r6, #0]
    if(sym) {
 80256bc:	9b05      	ldr	r3, [sp, #20]
 80256be:	2b00      	cmp	r3, #0
 80256c0:	d1da      	bne.n	8025678 <draw_indic+0x364>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 80256c2:	9802      	ldr	r0, [sp, #8]
 80256c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80256c6:	4798      	blx	r3
 80256c8:	2801      	cmp	r0, #1
 80256ca:	dd9f      	ble.n	802560c <draw_indic+0x2f8>
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 80256cc:	af40      	add	r7, sp, #256	; 0x100
 80256ce:	4638      	mov	r0, r7
 80256d0:	f7ea f8ac 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 80256d4:	463a      	mov	r2, r7
 80256d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80256da:	4620      	mov	r0, r4
 80256dc:	f7e2 f820 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80256e0:	9903      	ldr	r1, [sp, #12]
 80256e2:	a82e      	add	r0, sp, #184	; 0xb8
 80256e4:	f7e2 fb57 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 80256e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80256ec:	933b      	str	r3, [sp, #236]	; 0xec
    part_draw_dsc.class_p = MY_CLASS;
 80256ee:	4b6b      	ldr	r3, [pc, #428]	; (802589c <draw_indic+0x588>)
 80256f0:	932f      	str	r3, [sp, #188]	; 0xbc
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 80256f2:	f04f 0800 	mov.w	r8, #0
 80256f6:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
    part_draw_dsc.rect_dsc = &draw_rect_dsc;
 80256fa:	9732      	str	r7, [sp, #200]	; 0xc8
    part_draw_dsc.draw_area = &bar->indic_area;
 80256fc:	9b02      	ldr	r3, [sp, #8]
 80256fe:	9331      	str	r3, [sp, #196]	; 0xc4
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8025700:	aa2e      	add	r2, sp, #184	; 0xb8
 8025702:	211a      	movs	r1, #26
 8025704:	4620      	mov	r0, r4
 8025706:	f7de fe5d 	bl	80043c4 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 802570a:	220b      	movs	r2, #11
 802570c:	4641      	mov	r1, r8
 802570e:	4620      	mov	r0, r4
 8025710:	f7e5 fbcc 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025714:	b200      	sxth	r0, r0
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 8025716:	462f      	mov	r7, r5
 8025718:	9e01      	ldr	r6, [sp, #4]
 802571a:	42b5      	cmp	r5, r6
 802571c:	bfa8      	it	ge
 802571e:	4637      	movge	r7, r6
 8025720:	107f      	asrs	r7, r7, #1
 8025722:	4287      	cmp	r7, r0
 8025724:	bfa8      	it	ge
 8025726:	4607      	movge	r7, r0
    lv_coord_t indic_radius = draw_rect_dsc.radius;
 8025728:	f9bd 1100 	ldrsh.w	r1, [sp, #256]	; 0x100
    if(indic_radius > short_side >> 1) indic_radius = short_side >> 1;
 802572c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802572e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025730:	429a      	cmp	r2, r3
 8025732:	bfa8      	it	ge
 8025734:	461a      	movge	r2, r3
 8025736:	1053      	asrs	r3, r2, #1
 8025738:	428b      	cmp	r3, r1
 802573a:	bfa8      	it	ge
 802573c:	460b      	movge	r3, r1
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
 802573e:	42b5      	cmp	r5, r6
 8025740:	f73f af7c 	bgt.w	802563c <draw_indic+0x328>
 8025744:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8025746:	3201      	adds	r2, #1
 8025748:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 802574a:	1a52      	subs	r2, r2, r1
 802574c:	b212      	sxth	r2, r2
 802574e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8025752:	dd17      	ble.n	8025784 <draw_indic+0x470>
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 8025754:	f89d a103 	ldrb.w	sl, [sp, #259]	; 0x103
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 8025758:	f89d 911a 	ldrb.w	r9, [sp, #282]	; 0x11a
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 802575c:	f89d 8122 	ldrb.w	r8, [sp, #290]	; 0x122
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8025760:	2300      	movs	r3, #0
 8025762:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8025766:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 802576a:	f88d 3122 	strb.w	r3, [sp, #290]	; 0x122
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 802576e:	9a02      	ldr	r2, [sp, #8]
 8025770:	a940      	add	r1, sp, #256	; 0x100
 8025772:	9803      	ldr	r0, [sp, #12]
 8025774:	f7ea f8b6 	bl	800f8e4 <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 8025778:	f88d a103 	strb.w	sl, [sp, #259]	; 0x103
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 802577c:	f88d 911a 	strb.w	r9, [sp, #282]	; 0x11a
        draw_rect_dsc.border_opa = border_opa;
 8025780:	f88d 8122 	strb.w	r8, [sp, #290]	; 0x122
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 8025784:	8aa3      	ldrh	r3, [r4, #20]
 8025786:	f8dd 9018 	ldr.w	r9, [sp, #24]
 802578a:	444b      	add	r3, r9
 802578c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8025790:	8b23      	ldrh	r3, [r4, #24]
 8025792:	9e07      	ldr	r6, [sp, #28]
 8025794:	1b9b      	subs	r3, r3, r6
 8025796:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 802579a:	8ae3      	ldrh	r3, [r4, #22]
 802579c:	f8dd a020 	ldr.w	sl, [sp, #32]
 80257a0:	4453      	add	r3, sl
 80257a2:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 80257a6:	8b63      	ldrh	r3, [r4, #26]
 80257a8:	9904      	ldr	r1, [sp, #16]
 80257aa:	1a5b      	subs	r3, r3, r1
 80257ac:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 80257b0:	2300      	movs	r3, #0
 80257b2:	463a      	mov	r2, r7
 80257b4:	a926      	add	r1, sp, #152	; 0x98
 80257b6:	a828      	add	r0, sp, #160	; 0xa0
 80257b8:	f7e9 fde4 	bl	800f384 <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 80257bc:	2100      	movs	r1, #0
 80257be:	a828      	add	r0, sp, #160	; 0xa0
 80257c0:	f7e9 fbde 	bl	800ef80 <lv_draw_mask_add>
 80257c4:	4607      	mov	r7, r0
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 80257c6:	f89d 8122 	ldrb.w	r8, [sp, #290]	; 0x122
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 80257ca:	2300      	movs	r3, #0
 80257cc:	f88d 3122 	strb.w	r3, [sp, #290]	; 0x122
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 80257d0:	f88d 3136 	strb.w	r3, [sp, #310]	; 0x136
    dest->y1 = src->y1;
 80257d4:	f9bd 213a 	ldrsh.w	r2, [sp, #314]	; 0x13a
    dest->x2 = src->x2;
 80257d8:	f9bd 313c 	ldrsh.w	r3, [sp, #316]	; 0x13c
    dest->y2 = src->y2;
 80257dc:	f9bd 013e 	ldrsh.w	r0, [sp, #318]	; 0x13e
    mask_indic_max_area.x1 += bg_left;
 80257e0:	f8bd 1138 	ldrh.w	r1, [sp, #312]	; 0x138
 80257e4:	4449      	add	r1, r9
 80257e6:	b289      	uxth	r1, r1
 80257e8:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
    mask_indic_max_area.y1 += bg_top;
 80257ec:	4452      	add	r2, sl
 80257ee:	b292      	uxth	r2, r2
 80257f0:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
    mask_indic_max_area.x2 -= bg_right;
 80257f4:	1b9b      	subs	r3, r3, r6
 80257f6:	b29b      	uxth	r3, r3
 80257f8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
    mask_indic_max_area.y2 -= bg_bottom;
 80257fc:	9e04      	ldr	r6, [sp, #16]
 80257fe:	1b80      	subs	r0, r0, r6
 8025800:	b280      	uxth	r0, r0
 8025802:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 8025806:	9e01      	ldr	r6, [sp, #4]
 8025808:	42b5      	cmp	r5, r6
 802580a:	f73f af21 	bgt.w	8025650 <draw_indic+0x33c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802580e:	3001      	adds	r0, #1
 8025810:	1a80      	subs	r0, r0, r2
 8025812:	b200      	sxth	r0, r0
 8025814:	2803      	cmp	r0, #3
 8025816:	dc0b      	bgt.n	8025830 <draw_indic+0x51c>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8025818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802581c:	8ae3      	ldrh	r3, [r4, #22]
 802581e:	eb03 0565 	add.w	r5, r3, r5, asr #1
 8025822:	b2ad      	uxth	r5, r5
 8025824:	1eab      	subs	r3, r5, #2
 8025826:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 802582a:	3502      	adds	r5, #2
 802582c:	f8ad 5096 	strh.w	r5, [sp, #150]	; 0x96
    }

#if LV_DRAW_COMPLEX
    /*Create a mask to the current indicator area to see only this part from the whole gradient.*/
    lv_draw_mask_radius_param_t mask_indic_param;
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 8025830:	2300      	movs	r3, #0
 8025832:	f9bd 2100 	ldrsh.w	r2, [sp, #256]	; 0x100
 8025836:	f8dd 9008 	ldr.w	r9, [sp, #8]
 802583a:	4649      	mov	r1, r9
 802583c:	a81e      	add	r0, sp, #120	; 0x78
 802583e:	f7e9 fda1 	bl	800f384 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 8025842:	2100      	movs	r1, #0
 8025844:	a81e      	add	r0, sp, #120	; 0x78
 8025846:	f7e9 fb9b 	bl	800ef80 <lv_draw_mask_add>
 802584a:	4605      	mov	r5, r0
#endif

    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 802584c:	aa24      	add	r2, sp, #144	; 0x90
 802584e:	a940      	add	r1, sp, #256	; 0x100
 8025850:	9e03      	ldr	r6, [sp, #12]
 8025852:	4630      	mov	r0, r6
 8025854:	f7ea f846 	bl	800f8e4 <lv_draw_rect>
    draw_rect_dsc.border_opa = border_opa;
 8025858:	f88d 8122 	strb.w	r8, [sp, #290]	; 0x122
    draw_rect_dsc.shadow_opa = shadow_opa;

    /*Draw the border*/
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 802585c:	2300      	movs	r3, #0
 802585e:	f88d 3103 	strb.w	r3, [sp, #259]	; 0x103
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8025862:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 8025866:	f88d 3136 	strb.w	r3, [sp, #310]	; 0x136
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 802586a:	464a      	mov	r2, r9
 802586c:	a940      	add	r1, sp, #256	; 0x100
 802586e:	4630      	mov	r0, r6
 8025870:	f7ea f838 	bl	800f8e4 <lv_draw_rect>

#if LV_DRAW_COMPLEX
    lv_draw_mask_free_param(&mask_indic_param);
 8025874:	a81e      	add	r0, sp, #120	; 0x78
 8025876:	f7e9 fbf7 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_bg_param);
 802587a:	a828      	add	r0, sp, #160	; 0xa0
 802587c:	f7e9 fbf4 	bl	800f068 <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_indic_id);
 8025880:	4628      	mov	r0, r5
 8025882:	f7e9 fbc7 	bl	800f014 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 8025886:	4638      	mov	r0, r7
 8025888:	f7e9 fbc4 	bl	800f014 <lv_draw_mask_remove_id>
#endif

    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802588c:	aa2e      	add	r2, sp, #184	; 0xb8
 802588e:	211b      	movs	r1, #27
 8025890:	4620      	mov	r0, r4
 8025892:	f7de fd97 	bl	80043c4 <lv_event_send>
}
 8025896:	b051      	add	sp, #324	; 0x144
 8025898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802589c:	080335c4 	.word	0x080335c4

080258a0 <lv_bar_event>:

static void lv_bar_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80258a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80258a4:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 80258a6:	482e      	ldr	r0, [pc, #184]	; (8025960 <lv_bar_event+0xc0>)
 80258a8:	f7de fc8f 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80258ac:	2801      	cmp	r0, #1
 80258ae:	d001      	beq.n	80258b4 <lv_bar_event+0x14>
        lv_obj_invalidate_area(obj, &bar->indic_area);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        draw_indic(e);
    }
}
 80258b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80258b4:	4620      	mov	r0, r4
 80258b6:	f7de fdab 	bl	8004410 <lv_event_get_code>
 80258ba:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80258bc:	4620      	mov	r0, r4
 80258be:	f7de fda3 	bl	8004408 <lv_event_get_target>
 80258c2:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80258c4:	2d13      	cmp	r5, #19
 80258c6:	d009      	beq.n	80258dc <lv_bar_event+0x3c>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 80258c8:	2d01      	cmp	r5, #1
 80258ca:	d043      	beq.n	8025954 <lv_bar_event+0xb4>
 80258cc:	2d08      	cmp	r5, #8
 80258ce:	d041      	beq.n	8025954 <lv_bar_event+0xb4>
    else if(code == LV_EVENT_DRAW_MAIN) {
 80258d0:	2d15      	cmp	r5, #21
 80258d2:	d1ed      	bne.n	80258b0 <lv_bar_event+0x10>
        draw_indic(e);
 80258d4:	4620      	mov	r0, r4
 80258d6:	f7ff fd1d 	bl	8025314 <draw_indic>
 80258da:	e7e9      	b.n	80258b0 <lv_bar_event+0x10>
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 80258dc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80258e0:	f7e2 f9ef 	bl	8007cc2 <lv_obj_calculate_ext_draw_size>
 80258e4:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 80258e6:	4620      	mov	r0, r4
 80258e8:	f7de fd96 	bl	8004418 <lv_event_get_param>
 80258ec:	4605      	mov	r5, r0
        *s = LV_MAX(*s, indic_size);
 80258ee:	f9b0 0000 	ldrsh.w	r0, [r0]
 80258f2:	42b8      	cmp	r0, r7
 80258f4:	bfb8      	it	lt
 80258f6:	4638      	movlt	r0, r7
 80258f8:	8028      	strh	r0, [r5, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80258fa:	2212      	movs	r2, #18
 80258fc:	2100      	movs	r1, #0
 80258fe:	4630      	mov	r0, r6
 8025900:	f7e5 fad4 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025904:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8025908:	2213      	movs	r2, #19
 802590a:	2100      	movs	r1, #0
 802590c:	4630      	mov	r0, r6
 802590e:	f7e5 facd 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025912:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025914:	2210      	movs	r2, #16
 8025916:	2100      	movs	r1, #0
 8025918:	4630      	mov	r0, r6
 802591a:	f7e5 fac7 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802591e:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8025920:	2211      	movs	r2, #17
 8025922:	2100      	movs	r1, #0
 8025924:	4630      	mov	r0, r6
 8025926:	f7e5 fac1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802592a:	b200      	sxth	r0, r0
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 802592c:	4623      	mov	r3, r4
 802592e:	4544      	cmp	r4, r8
 8025930:	bfa8      	it	ge
 8025932:	4643      	movge	r3, r8
 8025934:	42bb      	cmp	r3, r7
 8025936:	bfa8      	it	ge
 8025938:	463b      	movge	r3, r7
 802593a:	4283      	cmp	r3, r0
 802593c:	bfa8      	it	ge
 802593e:	4603      	movge	r3, r0
        if(pad < 0) {
 8025940:	2b00      	cmp	r3, #0
 8025942:	dab5      	bge.n	80258b0 <lv_bar_event+0x10>
            *s = LV_MAX(*s, -pad);
 8025944:	425b      	negs	r3, r3
 8025946:	f9b5 2000 	ldrsh.w	r2, [r5]
 802594a:	4293      	cmp	r3, r2
 802594c:	bfb8      	it	lt
 802594e:	4613      	movlt	r3, r2
 8025950:	802b      	strh	r3, [r5, #0]
 8025952:	e7ad      	b.n	80258b0 <lv_bar_event+0x10>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 8025954:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8025958:	4630      	mov	r0, r6
 802595a:	f7e2 fe4b 	bl	80085f4 <lv_obj_invalidate_area>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 802595e:	e7a7      	b.n	80258b0 <lv_bar_event+0x10>
 8025960:	080335c4 	.word	0x080335c4

08025964 <lv_bar_destructor>:
{
 8025964:	b510      	push	{r4, lr}
 8025966:	460c      	mov	r4, r1
    lv_anim_del(&bar->cur_value_anim, NULL);
 8025968:	2100      	movs	r1, #0
 802596a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 802596e:	f7fb fa7f 	bl	8020e70 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 8025972:	2100      	movs	r1, #0
 8025974:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8025978:	f7fb fa7a 	bl	8020e70 <lv_anim_del>
}
 802597c:	bd10      	pop	{r4, pc}

0802597e <lv_bar_anim_ready>:
    bar_anim->anim_state    = value;
    lv_obj_invalidate(bar_anim->bar);
}

static void lv_bar_anim_ready(lv_anim_t * a)
{
 802597e:	b508      	push	{r3, lr}
    _lv_bar_anim_t * var = a->var;
 8025980:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 8025982:	681a      	ldr	r2, [r3, #0]
    lv_bar_t * bar = (lv_bar_t *)obj;

    var->anim_state = LV_BAR_ANIM_STATE_INV;
 8025984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025988:	60d9      	str	r1, [r3, #12]
    if(var == &bar->cur_value_anim)
 802598a:	f102 013c 	add.w	r1, r2, #60	; 0x3c
 802598e:	428b      	cmp	r3, r1
 8025990:	d009      	beq.n	80259a6 <lv_bar_anim_ready+0x28>
        bar->cur_value = var->anim_end;
    else if(var == &bar->start_value_anim)
 8025992:	f102 014c 	add.w	r1, r2, #76	; 0x4c
 8025996:	428b      	cmp	r3, r1
        bar->start_value = var->anim_end;
 8025998:	bf04      	itt	eq
 802599a:	6899      	ldreq	r1, [r3, #8]
 802599c:	6311      	streq	r1, [r2, #48]	; 0x30
    lv_obj_invalidate(var->bar);
 802599e:	6818      	ldr	r0, [r3, #0]
 80259a0:	f7e2 fe4c 	bl	800863c <lv_obj_invalidate>
}
 80259a4:	bd08      	pop	{r3, pc}
        bar->cur_value = var->anim_end;
 80259a6:	6899      	ldr	r1, [r3, #8]
 80259a8:	6251      	str	r1, [r2, #36]	; 0x24
 80259aa:	e7f8      	b.n	802599e <lv_bar_anim_ready+0x20>

080259ac <lv_bar_anim>:
{
 80259ac:	b508      	push	{r3, lr}
    bar_anim->anim_state    = value;
 80259ae:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 80259b0:	6800      	ldr	r0, [r0, #0]
 80259b2:	f7e2 fe43 	bl	800863c <lv_obj_invalidate>
}
 80259b6:	bd08      	pop	{r3, pc}

080259b8 <lv_bar_set_value_with_anim>:

static void lv_bar_set_value_with_anim(lv_obj_t * obj, int32_t new_value, int32_t * value_ptr,
                                       _lv_bar_anim_t * anim_info, lv_anim_enable_t en)
{
 80259b8:	b530      	push	{r4, r5, lr}
 80259ba:	b093      	sub	sp, #76	; 0x4c
 80259bc:	4605      	mov	r5, r0
 80259be:	461c      	mov	r4, r3
 80259c0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    if(en == LV_ANIM_OFF) {
 80259c4:	b323      	cbz	r3, 8025a10 <lv_bar_set_value_with_anim+0x58>
        *value_ptr = new_value;
        lv_obj_invalidate((lv_obj_t *)obj);
    }
    else {
        /*No animation in progress -> simply set the values*/
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 80259c6:	68e3      	ldr	r3, [r4, #12]
 80259c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
            anim_info->anim_start = *value_ptr;
 80259cc:	bf0c      	ite	eq
 80259ce:	6813      	ldreq	r3, [r2, #0]
            anim_info->anim_end   = new_value;
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_info->anim_start = anim_info->anim_end;
 80259d0:	68a3      	ldrne	r3, [r4, #8]
 80259d2:	6063      	str	r3, [r4, #4]
            anim_info->anim_end   = new_value;
 80259d4:	60a1      	str	r1, [r4, #8]
        }
        *value_ptr = new_value;
 80259d6:	6011      	str	r1, [r2, #0]
        /*Stop the previous animation if it exists*/
        lv_anim_del(anim_info, NULL);
 80259d8:	2100      	movs	r1, #0
 80259da:	4620      	mov	r0, r4
 80259dc:	f7fb fa48 	bl	8020e70 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 80259e0:	a801      	add	r0, sp, #4
 80259e2:	f7fb fa2b 	bl	8020e3c <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 80259e6:	9401      	str	r4, [sp, #4]
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 80259e8:	4b0b      	ldr	r3, [pc, #44]	; (8025a18 <lv_bar_set_value_with_anim+0x60>)
 80259ea:	9302      	str	r3, [sp, #8]
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
    a->start_value = start;
 80259ec:	2100      	movs	r1, #0
 80259ee:	9109      	str	r1, [sp, #36]	; 0x24
    a->current_value = start;
 80259f0:	910a      	str	r1, [sp, #40]	; 0x28
    a->end_value = end;
 80259f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80259f6:	930b      	str	r3, [sp, #44]	; 0x2c
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 80259f8:	4b08      	ldr	r3, [pc, #32]	; (8025a1c <lv_bar_set_value_with_anim+0x64>)
 80259fa:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 80259fc:	2264      	movs	r2, #100	; 0x64
 80259fe:	4628      	mov	r0, r5
 8025a00:	f7e5 fa54 	bl	800aeac <lv_obj_get_style_prop>
    a->time = duration;
 8025a04:	900c      	str	r0, [sp, #48]	; 0x30
        lv_anim_set_var(&a, anim_info);
        lv_anim_set_exec_cb(&a, lv_bar_anim);
        lv_anim_set_values(&a, LV_BAR_ANIM_STATE_START, LV_BAR_ANIM_STATE_END);
        lv_anim_set_ready_cb(&a, lv_bar_anim_ready);
        lv_anim_set_time(&a, lv_obj_get_style_anim_time(obj, LV_PART_MAIN));
        lv_anim_start(&a);
 8025a06:	a801      	add	r0, sp, #4
 8025a08:	f7fb fa6a 	bl	8020ee0 <lv_anim_start>
    }
}
 8025a0c:	b013      	add	sp, #76	; 0x4c
 8025a0e:	bd30      	pop	{r4, r5, pc}
        *value_ptr = new_value;
 8025a10:	6011      	str	r1, [r2, #0]
        lv_obj_invalidate((lv_obj_t *)obj);
 8025a12:	f7e2 fe13 	bl	800863c <lv_obj_invalidate>
 8025a16:	e7f9      	b.n	8025a0c <lv_bar_set_value_with_anim+0x54>
 8025a18:	080259ad 	.word	0x080259ad
 8025a1c:	0802597f 	.word	0x0802597f

08025a20 <lv_bar_set_value>:
{
 8025a20:	b510      	push	{r4, lr}
 8025a22:	b082      	sub	sp, #8
    if(bar->cur_value == value) return;
 8025a24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8025a26:	428c      	cmp	r4, r1
 8025a28:	d015      	beq.n	8025a56 <lv_bar_set_value+0x36>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8025a2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8025a2c:	4299      	cmp	r1, r3
 8025a2e:	bfa8      	it	ge
 8025a30:	4619      	movge	r1, r3
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 8025a32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8025a34:	f8d0 c030 	ldr.w	ip, [r0, #48]	; 0x30
 8025a38:	4563      	cmp	r3, ip
 8025a3a:	bfb8      	it	lt
 8025a3c:	4663      	movlt	r3, ip
 8025a3e:	4299      	cmp	r1, r3
 8025a40:	bfb8      	it	lt
 8025a42:	4619      	movlt	r1, r3
    if(bar->cur_value == value) return;
 8025a44:	428c      	cmp	r4, r1
 8025a46:	d006      	beq.n	8025a56 <lv_bar_set_value+0x36>
    lv_bar_set_value_with_anim(obj, value, &bar->cur_value, &bar->cur_value_anim, anim);
 8025a48:	9200      	str	r2, [sp, #0]
 8025a4a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8025a4e:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8025a52:	f7ff ffb1 	bl	80259b8 <lv_bar_set_value_with_anim>
}
 8025a56:	b002      	add	sp, #8
 8025a58:	bd10      	pop	{r4, pc}

08025a5a <lv_bar_constructor>:
{
 8025a5a:	b538      	push	{r3, r4, r5, lr}
 8025a5c:	460c      	mov	r4, r1
    bar->min_value = 0;
 8025a5e:	2500      	movs	r5, #0
 8025a60:	628d      	str	r5, [r1, #40]	; 0x28
    bar->max_value = 100;
 8025a62:	2364      	movs	r3, #100	; 0x64
 8025a64:	62cb      	str	r3, [r1, #44]	; 0x2c
    bar->start_value = 0;
 8025a66:	630d      	str	r5, [r1, #48]	; 0x30
    bar->cur_value = 0;
 8025a68:	624d      	str	r5, [r1, #36]	; 0x24
    bar->indic_area.x1 = 0;
 8025a6a:	868d      	strh	r5, [r1, #52]	; 0x34
    bar->indic_area.x2 = 0;
 8025a6c:	870d      	strh	r5, [r1, #56]	; 0x38
    bar->indic_area.y1 = 0;
 8025a6e:	86cd      	strh	r5, [r1, #54]	; 0x36
    bar->indic_area.y2 = 0;
 8025a70:	874d      	strh	r5, [r1, #58]	; 0x3a
    bar->mode = LV_BAR_MODE_NORMAL;
 8025a72:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
 8025a76:	f365 0301 	bfi	r3, r5, #0, #2
 8025a7a:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
 8025a7e:	63c9      	str	r1, [r1, #60]	; 0x3c
    bar_anim->anim_start = 0;
 8025a80:	640d      	str	r5, [r1, #64]	; 0x40
    bar_anim->anim_end = 0;
 8025a82:	644d      	str	r5, [r1, #68]	; 0x44
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 8025a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8025a88:	648b      	str	r3, [r1, #72]	; 0x48
    bar_anim->bar = obj;
 8025a8a:	64c9      	str	r1, [r1, #76]	; 0x4c
    bar_anim->anim_start = 0;
 8025a8c:	650d      	str	r5, [r1, #80]	; 0x50
    bar_anim->anim_end = 0;
 8025a8e:	654d      	str	r5, [r1, #84]	; 0x54
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 8025a90:	658b      	str	r3, [r1, #88]	; 0x58
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8025a92:	2108      	movs	r1, #8
 8025a94:	4620      	mov	r0, r4
 8025a96:	f7e1 faa7 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8025a9a:	2110      	movs	r1, #16
 8025a9c:	4620      	mov	r0, r4
 8025a9e:	f7e1 faa3 	bl	8006fe8 <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 8025aa2:	462a      	mov	r2, r5
 8025aa4:	4629      	mov	r1, r5
 8025aa6:	4620      	mov	r0, r4
 8025aa8:	f7ff ffba 	bl	8025a20 <lv_bar_set_value>
}
 8025aac:	bd38      	pop	{r3, r4, r5, pc}

08025aae <lv_bar_set_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) {
 8025aae:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8025ab2:	f003 0303 	and.w	r3, r3, #3
 8025ab6:	2b02      	cmp	r3, #2
 8025ab8:	d11a      	bne.n	8025af0 <lv_bar_set_start_value+0x42>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8025aba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8025abc:	4299      	cmp	r1, r3
 8025abe:	bfa8      	it	ge
 8025ac0:	4619      	movge	r1, r3
 8025ac2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8025ac4:	4299      	cmp	r1, r3
 8025ac6:	bfb8      	it	lt
 8025ac8:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater than the right value*/
 8025aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8025acc:	4299      	cmp	r1, r3
 8025ace:	bfa8      	it	ge
 8025ad0:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 8025ad2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8025ad4:	428b      	cmp	r3, r1
 8025ad6:	d00b      	beq.n	8025af0 <lv_bar_set_start_value+0x42>
{
 8025ad8:	b500      	push	{lr}
 8025ada:	b083      	sub	sp, #12
    lv_bar_set_value_with_anim(obj, value, &bar->start_value, &bar->start_value_anim, anim);
 8025adc:	9200      	str	r2, [sp, #0]
 8025ade:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8025ae2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8025ae6:	f7ff ff67 	bl	80259b8 <lv_bar_set_value_with_anim>
}
 8025aea:	b003      	add	sp, #12
 8025aec:	f85d fb04 	ldr.w	pc, [sp], #4
 8025af0:	4770      	bx	lr

08025af2 <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 8025af2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8025af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025af8:	bf14      	ite	ne
 8025afa:	6c40      	ldrne	r0, [r0, #68]	; 0x44
 8025afc:	6a40      	ldreq	r0, [r0, #36]	; 0x24
}
 8025afe:	4770      	bx	lr

08025b00 <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 8025b00:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8025b04:	f003 0303 	and.w	r3, r3, #3
 8025b08:	2b02      	cmp	r3, #2
 8025b0a:	d001      	beq.n	8025b10 <lv_bar_get_start_value+0x10>
 8025b0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8025b0e:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 8025b10:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8025b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8025b16:	bf14      	ite	ne
 8025b18:	6d40      	ldrne	r0, [r0, #84]	; 0x54
 8025b1a:	6b00      	ldreq	r0, [r0, #48]	; 0x30
}
 8025b1c:	4770      	bx	lr

08025b1e <lv_bar_get_mode>:
    return bar->mode;
 8025b1e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
}
 8025b22:	f000 0003 	and.w	r0, r0, #3
 8025b26:	4770      	bx	lr

08025b28 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8025b28:	b510      	push	{r4, lr}
 8025b2a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8025b2c:	2110      	movs	r1, #16
 8025b2e:	4620      	mov	r0, r4
 8025b30:	f7e1 fa5a 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8025b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025b38:	4620      	mov	r0, r4
 8025b3a:	f7e1 fa1b 	bl	8006f74 <lv_obj_add_flag>

    LV_TRACE_OBJ_CREATE("finished");
}
 8025b3e:	bd10      	pop	{r4, pc}

08025b40 <lv_btn_create>:
{
 8025b40:	b510      	push	{r4, lr}
 8025b42:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8025b44:	4803      	ldr	r0, [pc, #12]	; (8025b54 <lv_btn_create+0x14>)
 8025b46:	f7e1 fd05 	bl	8007554 <lv_obj_class_create_obj>
 8025b4a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8025b4c:	f7e1 fdaf 	bl	80076ae <lv_obj_class_init_obj>
}
 8025b50:	4620      	mov	r0, r4
 8025b52:	bd10      	pop	{r4, pc}
 8025b54:	080335e0 	.word	0x080335e0

08025b58 <get_button_from_point>:
 * @param obj pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNMATRIX_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * obj, lv_point_t * p)
{
 8025b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b5c:	b08b      	sub	sp, #44	; 0x2c
 8025b5e:	4604      	mov	r4, r0
 8025b60:	9100      	str	r1, [sp, #0]
    lv_area_t obj_cords;
    lv_area_t btn_area;
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    uint16_t i;
    lv_obj_get_coords(obj, &obj_cords);
 8025b62:	a908      	add	r1, sp, #32
 8025b64:	f7e2 fac5 	bl	80080f2 <lv_obj_get_coords>

    lv_coord_t w = lv_obj_get_width(obj);
 8025b68:	4620      	mov	r0, r4
 8025b6a:	f7e2 fb20 	bl	80081ae <lv_obj_get_width>
 8025b6e:	4607      	mov	r7, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8025b70:	4620      	mov	r0, r4
 8025b72:	f7e2 fb22 	bl	80081ba <lv_obj_get_height>
 8025b76:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8025b78:	2212      	movs	r2, #18
 8025b7a:	2100      	movs	r1, #0
 8025b7c:	4620      	mov	r0, r4
 8025b7e:	f7e5 f995 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025b82:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8025b86:	2213      	movs	r2, #19
 8025b88:	2100      	movs	r1, #0
 8025b8a:	4620      	mov	r0, r4
 8025b8c:	f7e5 f98e 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025b90:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025b92:	2210      	movs	r2, #16
 8025b94:	2100      	movs	r1, #0
 8025b96:	4620      	mov	r0, r4
 8025b98:	f7e5 f988 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025b9c:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8025ba0:	2211      	movs	r2, #17
 8025ba2:	2100      	movs	r1, #0
 8025ba4:	4620      	mov	r0, r4
 8025ba6:	f7e5 f981 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025baa:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8025bae:	2214      	movs	r2, #20
 8025bb0:	2100      	movs	r1, #0
 8025bb2:	4620      	mov	r0, r4
 8025bb4:	f7e5 f97a 	bl	800aeac <lv_obj_get_style_prop>
 8025bb8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8025bba:	2215      	movs	r2, #21
 8025bbc:	2100      	movs	r1, #0
 8025bbe:	4620      	mov	r0, r4
 8025bc0:	f7e5 f974 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
    lv_coord_t prow = lv_obj_get_style_pad_row(obj, LV_PART_MAIN);
    lv_coord_t pcol = lv_obj_get_style_pad_column(obj, LV_PART_MAIN);

    /*Get the half gap. Button look larger with this value. (+1 for rounding error)*/
    prow = (prow / 2) + 1 + (prow & 1);
 8025bc4:	f005 0301 	and.w	r3, r5, #1
 8025bc8:	3301      	adds	r3, #1
 8025bca:	b22a      	sxth	r2, r5
 8025bcc:	f3c5 35c0 	ubfx	r5, r5, #15, #1
 8025bd0:	4415      	add	r5, r2
 8025bd2:	eb03 0565 	add.w	r5, r3, r5, asr #1
 8025bd6:	b22b      	sxth	r3, r5
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8025bd8:	f000 0501 	and.w	r5, r0, #1
 8025bdc:	3501      	adds	r5, #1
 8025bde:	b202      	sxth	r2, r0
 8025be0:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8025be4:	4410      	add	r0, r2
 8025be6:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8025bea:	b22d      	sxth	r5, r5

    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8025bec:	469b      	mov	fp, r3
 8025bee:	2b0d      	cmp	r3, #13
 8025bf0:	bfa8      	it	ge
 8025bf2:	f04f 0b0d 	movge.w	fp, #13
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 8025bf6:	2d0d      	cmp	r5, #13
 8025bf8:	bfa8      	it	ge
 8025bfa:	250d      	movge	r5, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 8025bfc:	4633      	mov	r3, r6
 8025bfe:	2e0d      	cmp	r6, #13
 8025c00:	bfa8      	it	ge
 8025c02:	230d      	movge	r3, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8025c04:	f1b8 0f0d 	cmp.w	r8, #13
 8025c08:	bfa8      	it	ge
 8025c0a:	f04f 080d 	movge.w	r8, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 8025c0e:	4652      	mov	r2, sl
 8025c10:	2a0d      	cmp	r2, #13
 8025c12:	bfa8      	it	ge
 8025c14:	220d      	movge	r2, #13
 8025c16:	4610      	mov	r0, r2

    for(i = 0; i < btnm->btn_cnt; i++) {
 8025c18:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8025c1a:	2a00      	cmp	r2, #0
 8025c1c:	d068      	beq.n	8025cf0 <get_button_from_point+0x198>
 8025c1e:	f04f 0a00 	mov.w	sl, #0
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8025c22:	464a      	mov	r2, r9
 8025c24:	2a0d      	cmp	r2, #13
 8025c26:	bfa8      	it	ge
 8025c28:	220d      	movge	r2, #13
 8025c2a:	9202      	str	r2, [sp, #8]
        else btn_area.x1 += obj_cords.x1 - pcol;

        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8025c2c:	4642      	mov	r2, r8
 8025c2e:	2a0d      	cmp	r2, #13
 8025c30:	bfa8      	it	ge
 8025c32:	220d      	movge	r2, #13
 8025c34:	9203      	str	r2, [sp, #12]
        else btn_area.y1 += obj_cords.y1 - prow;

        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8025c36:	1aff      	subs	r7, r7, r3
 8025c38:	3f02      	subs	r7, #2
 8025c3a:	2b0d      	cmp	r3, #13
 8025c3c:	bfa8      	it	ge
 8025c3e:	230d      	movge	r3, #13
 8025c40:	9304      	str	r3, [sp, #16]
                                                                                   BTN_EXTRA_CLICK_AREA_MAX);  /*-2 for rounding error*/
        else btn_area.x2 += obj_cords.x1 + pcol;

        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8025c42:	9b01      	ldr	r3, [sp, #4]
 8025c44:	1a1e      	subs	r6, r3, r0
 8025c46:	3e02      	subs	r6, #2
 8025c48:	280d      	cmp	r0, #13
 8025c4a:	bfa8      	it	ge
 8025c4c:	200d      	movge	r0, #13
 8025c4e:	9005      	str	r0, [sp, #20]
 8025c50:	9501      	str	r5, [sp, #4]
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 8025c52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8025c54:	eb03 02ca 	add.w	r2, r3, sl, lsl #3
    dest->x1 = src->x1;
 8025c58:	f933 c03a 	ldrsh.w	ip, [r3, sl, lsl #3]
    dest->y1 = src->y1;
 8025c5c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
    dest->x2 = src->x2;
 8025c60:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
    dest->y2 = src->y2;
 8025c64:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8025c68:	45e1      	cmp	r9, ip
 8025c6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8025c6e:	bfac      	ite	ge
 8025c70:	9d02      	ldrge	r5, [sp, #8]
        else btn_area.x1 += obj_cords.x1 - pcol;
 8025c72:	9d01      	ldrlt	r5, [sp, #4]
 8025c74:	1b52      	subs	r2, r2, r5
 8025c76:	4462      	add	r2, ip
 8025c78:	b212      	sxth	r2, r2
 8025c7a:	f8ad 2018 	strh.w	r2, [sp, #24]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8025c7e:	4580      	cmp	r8, r0
 8025c80:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8025c84:	bfa6      	itte	ge
 8025c86:	9d03      	ldrge	r5, [sp, #12]
 8025c88:	1b52      	subge	r2, r2, r5
        else btn_area.y1 += obj_cords.y1 - prow;
 8025c8a:	eba2 020b 	sublt.w	r2, r2, fp
 8025c8e:	4402      	add	r2, r0
 8025c90:	b212      	sxth	r2, r2
 8025c92:	f8ad 201a 	strh.w	r2, [sp, #26]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8025c96:	42bb      	cmp	r3, r7
 8025c98:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8025c9c:	bfac      	ite	ge
 8025c9e:	9804      	ldrge	r0, [sp, #16]
        else btn_area.x2 += obj_cords.x1 + pcol;
 8025ca0:	9801      	ldrlt	r0, [sp, #4]
 8025ca2:	4402      	add	r2, r0
 8025ca4:	441a      	add	r2, r3
 8025ca6:	b212      	sxth	r2, r2
 8025ca8:	f8ad 201c 	strh.w	r2, [sp, #28]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8025cac:	42b1      	cmp	r1, r6
 8025cae:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8025cb2:	bfa6      	itte	ge
 8025cb4:	9a05      	ldrge	r2, [sp, #20]
 8025cb6:	189b      	addge	r3, r3, r2
                                                                                    BTN_EXTRA_CLICK_AREA_MAX); /*-2 for rounding error*/
        else btn_area.y2 += obj_cords.y1 + prow;
 8025cb8:	445b      	addlt	r3, fp
 8025cba:	440b      	add	r3, r1
 8025cbc:	b21b      	sxth	r3, r3
 8025cbe:	f8ad 301e 	strh.w	r3, [sp, #30]

        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8025cc2:	2200      	movs	r2, #0
 8025cc4:	9900      	ldr	r1, [sp, #0]
 8025cc6:	a806      	add	r0, sp, #24
 8025cc8:	f7fb fa68 	bl	802119c <_lv_area_is_point_on>
 8025ccc:	b930      	cbnz	r0, 8025cdc <get_button_from_point+0x184>
    for(i = 0; i < btnm->btn_cnt; i++) {
 8025cce:	f10a 0a01 	add.w	sl, sl, #1
 8025cd2:	fa1f fa8a 	uxth.w	sl, sl
 8025cd6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8025cd8:	4553      	cmp	r3, sl
 8025cda:	d8ba      	bhi.n	8025c52 <get_button_from_point+0xfa>
            break;
        }
    }

    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 8025cdc:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8025cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025ce2:	4552      	cmp	r2, sl
 8025ce4:	bf08      	it	eq
 8025ce6:	469a      	moveq	sl, r3

    return i;
}
 8025ce8:	4650      	mov	r0, sl
 8025cea:	b00b      	add	sp, #44	; 0x2c
 8025cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 8025cf0:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8025cf4:	e7f8      	b.n	8025ce8 <get_button_from_point+0x190>
	...

08025cf8 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * obj, uint16_t btn_idx)
{
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8025cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025cfc:	4299      	cmp	r1, r3
 8025cfe:	d073      	beq.n	8025de8 <invalidate_button_area+0xf0>
{
 8025d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025d02:	b085      	sub	sp, #20
 8025d04:	4604      	mov	r4, r0
 8025d06:	460d      	mov	r5, r1

    lv_area_t btn_area;
    lv_area_t obj_area;

    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;;
    if(btn_idx >= btnm->btn_cnt) return;
 8025d08:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025d0a:	428b      	cmp	r3, r1
 8025d0c:	d801      	bhi.n	8025d12 <invalidate_button_area+0x1a>
        /*Push up the upper boundary of the btn area to also invalidate the popover*/
        btn_area.y1 -= lv_area_get_height(&btn_area);
    }

    lv_obj_invalidate_area(obj, &btn_area);
}
 8025d0e:	b005      	add	sp, #20
 8025d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 8025d12:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8025d14:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 8025d18:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 8025d1c:	f8ad 2008 	strh.w	r2, [sp, #8]
    dest->y1 = src->y1;
 8025d20:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8025d24:	f8ad 200a 	strh.w	r2, [sp, #10]
    dest->x2 = src->x2;
 8025d28:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8025d2c:	f8ad 200c 	strh.w	r2, [sp, #12]
    dest->y2 = src->y2;
 8025d30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8025d34:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_obj_get_coords(obj, &obj_area);
 8025d38:	4669      	mov	r1, sp
 8025d3a:	f7e2 f9da 	bl	80080f2 <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8025d3e:	2214      	movs	r2, #20
 8025d40:	2100      	movs	r1, #0
 8025d42:	4620      	mov	r0, r4
 8025d44:	f7e5 f8b2 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025d48:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8025d4a:	2215      	movs	r2, #21
 8025d4c:	2100      	movs	r1, #0
 8025d4e:	4620      	mov	r0, r4
 8025d50:	f7e5 f8ac 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025d54:	b207      	sxth	r7, r0
    lv_coord_t dpi = lv_disp_get_dpi(lv_obj_get_disp(obj));
 8025d56:	4620      	mov	r0, r4
 8025d58:	f7e5 ffc6 	bl	800bce8 <lv_obj_get_disp>
 8025d5c:	f7fa feb6 	bl	8020acc <lv_disp_get_dpi>
 8025d60:	4602      	mov	r2, r0
    row_gap = LV_MAX(row_gap, dpi / 10);
 8025d62:	4822      	ldr	r0, [pc, #136]	; (8025dec <invalidate_button_area+0xf4>)
 8025d64:	fb80 3002 	smull	r3, r0, r0, r2
 8025d68:	17d3      	asrs	r3, r2, #31
 8025d6a:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 8025d6e:	b21b      	sxth	r3, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 8025d70:	f8bd c000 	ldrh.w	ip, [sp]
    row_gap = LV_MAX(row_gap, dpi / 10);
 8025d74:	429e      	cmp	r6, r3
 8025d76:	bfb8      	it	lt
 8025d78:	461e      	movlt	r6, r3
    btn_area.x1 += obj_area.x1 - row_gap;
 8025d7a:	b2b6      	uxth	r6, r6
 8025d7c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8025d80:	4462      	add	r2, ip
 8025d82:	1b92      	subs	r2, r2, r6
 8025d84:	f8ad 2008 	strh.w	r2, [sp, #8]
    btn_area.y1 += obj_area.y1 - col_gap;
 8025d88:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    col_gap = LV_MAX(col_gap, dpi / 10);
 8025d8c:	42bb      	cmp	r3, r7
 8025d8e:	bfb8      	it	lt
 8025d90:	463b      	movlt	r3, r7
    btn_area.y1 += obj_area.y1 - col_gap;
 8025d92:	b29b      	uxth	r3, r3
 8025d94:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8025d98:	4411      	add	r1, r2
 8025d9a:	b289      	uxth	r1, r1
 8025d9c:	1ac8      	subs	r0, r1, r3
 8025d9e:	b280      	uxth	r0, r0
 8025da0:	f8ad 000a 	strh.w	r0, [sp, #10]
    btn_area.x2 += obj_area.x1 + row_gap;
 8025da4:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8025da8:	44bc      	add	ip, r7
 8025daa:	4466      	add	r6, ip
 8025dac:	f8ad 600c 	strh.w	r6, [sp, #12]
    btn_area.y2 += obj_area.y1 + col_gap;
 8025db0:	f8bd 600e 	ldrh.w	r6, [sp, #14]
 8025db4:	4432      	add	r2, r6
 8025db6:	441a      	add	r2, r3
 8025db8:	b292      	uxth	r2, r2
 8025dba:	f8ad 200e 	strh.w	r2, [sp, #14]
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8025dbe:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8025dc0:	42ae      	cmp	r6, r5
 8025dc2:	d004      	beq.n	8025dce <invalidate_button_area+0xd6>
    lv_obj_invalidate_area(obj, &btn_area);
 8025dc4:	a902      	add	r1, sp, #8
 8025dc6:	4620      	mov	r0, r4
 8025dc8:	f7e2 fc14 	bl	80085f4 <lv_obj_invalidate_area>
 8025dcc:	e79f      	b.n	8025d0e <invalidate_button_area+0x16>
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8025dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025dd0:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 8025dd4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8025dd8:	d0f4      	beq.n	8025dc4 <invalidate_button_area+0xcc>
        btn_area.y1 -= lv_area_get_height(&btn_area);
 8025dda:	3901      	subs	r1, #1
 8025ddc:	4401      	add	r1, r0
 8025dde:	1acb      	subs	r3, r1, r3
 8025de0:	1a9a      	subs	r2, r3, r2
 8025de2:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025de6:	e7ed      	b.n	8025dc4 <invalidate_button_area+0xcc>
 8025de8:	4770      	bx	lr
 8025dea:	bf00      	nop
 8025dec:	66666667 	.word	0x66666667

08025df0 <draw_main>:
{
 8025df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025df4:	b0d1      	sub	sp, #324	; 0x144
 8025df6:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8025df8:	f7de fb06 	bl	8004408 <lv_event_get_target>
    if(btnm->btn_cnt == 0) return;
 8025dfc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8025dfe:	b913      	cbnz	r3, 8025e06 <draw_main+0x16>
}
 8025e00:	b051      	add	sp, #324	; 0x144
 8025e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e06:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8025e08:	4620      	mov	r0, r4
 8025e0a:	f7de fb71 	bl	80044f0 <lv_event_get_draw_ctx>
 8025e0e:	4607      	mov	r7, r0
 8025e10:	9004      	str	r0, [sp, #16]
    obj->skip_trans = 1;
 8025e12:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8025e16:	f043 0304 	orr.w	r3, r3, #4
 8025e1a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_obj_get_coords(obj, &area_obj);
 8025e1e:	a94e      	add	r1, sp, #312	; 0x138
 8025e20:	4628      	mov	r0, r5
 8025e22:	f7e2 f966 	bl	80080f2 <lv_obj_get_coords>
    lv_state_t state_ori = obj->state;
 8025e26:	8c2e      	ldrh	r6, [r5, #32]
 8025e28:	9605      	str	r6, [sp, #20]
    obj->state = LV_STATE_DEFAULT;
 8025e2a:	2400      	movs	r4, #0
 8025e2c:	842c      	strh	r4, [r5, #32]
    obj->skip_trans = 1;
 8025e2e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8025e32:	f043 0304 	orr.w	r3, r3, #4
 8025e36:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8025e3a:	a828      	add	r0, sp, #160	; 0xa0
 8025e3c:	f7e9 fcf6 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 8025e40:	a820      	add	r0, sp, #128	; 0x80
 8025e42:	f7e7 ff37 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 8025e46:	aa28      	add	r2, sp, #160	; 0xa0
 8025e48:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8025e4c:	4628      	mov	r0, r5
 8025e4e:	f7e1 fc67 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 8025e52:	aa20      	add	r2, sp, #128	; 0x80
 8025e54:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8025e58:	4628      	mov	r0, r5
 8025e5a:	f7e1 fdd6 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 8025e5e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8025e62:	f364 0382 	bfi	r3, r4, #2, #1
 8025e66:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    obj->state = state_ori;
 8025e6a:	842e      	strh	r6, [r5, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8025e6c:	2210      	movs	r2, #16
 8025e6e:	4621      	mov	r1, r4
 8025e70:	4628      	mov	r0, r5
 8025e72:	f7e5 f81b 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025e76:	b203      	sxth	r3, r0
 8025e78:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8025e7a:	2211      	movs	r2, #17
 8025e7c:	4621      	mov	r1, r4
 8025e7e:	4628      	mov	r0, r5
 8025e80:	f7e5 f814 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025e84:	b203      	sxth	r3, r0
 8025e86:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8025e88:	2212      	movs	r2, #18
 8025e8a:	4621      	mov	r1, r4
 8025e8c:	4628      	mov	r0, r5
 8025e8e:	f7e5 f80d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025e92:	b203      	sxth	r3, r0
 8025e94:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8025e96:	2213      	movs	r2, #19
 8025e98:	4621      	mov	r1, r4
 8025e9a:	4628      	mov	r0, r5
 8025e9c:	f7e5 f806 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8025ea0:	b203      	sxth	r3, r0
 8025ea2:	930a      	str	r3, [sp, #40]	; 0x28
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8025ea4:	4639      	mov	r1, r7
 8025ea6:	a80e      	add	r0, sp, #56	; 0x38
 8025ea8:	f7e1 ff75 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 8025eac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8025eb0:	931b      	str	r3, [sp, #108]	; 0x6c
    part_draw_dsc.class_p = MY_CLASS;
 8025eb2:	4bcc      	ldr	r3, [pc, #816]	; (80261e4 <draw_main+0x3f4>)
 8025eb4:	930f      	str	r3, [sp, #60]	; 0x3c
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 8025eb6:	9410      	str	r4, [sp, #64]	; 0x40
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 8025eb8:	ab3e      	add	r3, sp, #248	; 0xf8
 8025eba:	9312      	str	r3, [sp, #72]	; 0x48
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 8025ebc:	ab36      	add	r3, sp, #216	; 0xd8
 8025ebe:	9313      	str	r3, [sp, #76]	; 0x4c
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8025ec0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8025ec2:	2b00      	cmp	r3, #0
 8025ec4:	f000 8192 	beq.w	80261ec <draw_main+0x3fc>
 8025ec8:	f04f 0b00 	mov.w	fp, #0
    uint16_t txt_i = 0;
 8025ecc:	465c      	mov	r4, fp
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8025ece:	4fc6      	ldr	r7, [pc, #792]	; (80261e8 <draw_main+0x3f8>)
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 8025ed0:	9b05      	ldr	r3, [sp, #20]
 8025ed2:	f003 0320 	and.w	r3, r3, #32
 8025ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8025ed8:	e118      	b.n	802610c <draw_main+0x31c>
            txt_i++;
 8025eda:	3401      	adds	r4, #1
 8025edc:	b2a4      	uxth	r4, r4
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8025ede:	00a6      	lsls	r6, r4, #2
 8025ee0:	4639      	mov	r1, r7
 8025ee2:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8025ee6:	f7da f99d 	bl	8000224 <strcmp>
 8025eea:	2800      	cmp	r0, #0
 8025eec:	d0f5      	beq.n	8025eda <draw_main+0xea>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 8025eee:	fa1f f98b 	uxth.w	r9, fp
 8025ef2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8025ef4:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8025ef8:	f013 0f08 	tst.w	r3, #8
 8025efc:	f040 80fd 	bne.w	80260fa <draw_main+0x30a>
        lv_state_t btn_state = LV_STATE_DEFAULT;
 8025f00:	f3c3 18c0 	ubfx	r8, r3, #7, #1
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 8025f04:	f013 0f20 	tst.w	r3, #32
 8025f08:	f000 8105 	beq.w	8026116 <draw_main+0x326>
 8025f0c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 8025f10:	f8d5 e028 	ldr.w	lr, [r5, #40]	; 0x28
 8025f14:	eb0e 03c9 	add.w	r3, lr, r9, lsl #3
    dest->y1 = src->y1;
 8025f18:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
    dest->x2 = src->x2;
 8025f1c:	f9b3 c004 	ldrsh.w	ip, [r3, #4]
    dest->y2 = src->y2;
 8025f20:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
        btn_area.x1 += area_obj.x1;
 8025f24:	f8bd 2138 	ldrh.w	r2, [sp, #312]	; 0x138
 8025f28:	f83e 3039 	ldrh.w	r3, [lr, r9, lsl #3]
 8025f2c:	4413      	add	r3, r2
 8025f2e:	f8ad 3130 	strh.w	r3, [sp, #304]	; 0x130
        btn_area.y1 += area_obj.y1;
 8025f32:	f8bd 313a 	ldrh.w	r3, [sp, #314]	; 0x13a
 8025f36:	4419      	add	r1, r3
 8025f38:	f8ad 1132 	strh.w	r1, [sp, #306]	; 0x132
        btn_area.x2 += area_obj.x1;
 8025f3c:	4462      	add	r2, ip
 8025f3e:	f8ad 2134 	strh.w	r2, [sp, #308]	; 0x134
        btn_area.y2 += area_obj.y1;
 8025f42:	4403      	add	r3, r0
 8025f44:	f8ad 3136 	strh.w	r3, [sp, #310]	; 0x136
        if(btn_state == LV_STATE_DEFAULT) {
 8025f48:	f1b8 0f00 	cmp.w	r8, #0
 8025f4c:	f040 80fe 	bne.w	802614c <draw_main+0x35c>
            lv_memcpy(&draw_rect_dsc_act, &draw_rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 8025f50:	2238      	movs	r2, #56	; 0x38
 8025f52:	a928      	add	r1, sp, #160	; 0xa0
 8025f54:	a83e      	add	r0, sp, #248	; 0xf8
 8025f56:	f7fc f8d3 	bl	8022100 <lv_memcpy>
            lv_memcpy(&draw_label_dsc_act, &draw_label_dsc_def, sizeof(lv_draw_label_dsc_t));
 8025f5a:	2220      	movs	r2, #32
 8025f5c:	a920      	add	r1, sp, #128	; 0x80
 8025f5e:	a836      	add	r0, sp, #216	; 0xd8
 8025f60:	f7fc f8ce 	bl	8022100 <lv_memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 8025f64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 8025f66:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8025f6a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8025f6e:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 8025f72:	bf14      	ite	ne
 8025f74:	f043 0301 	orrne.w	r3, r3, #1
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 8025f78:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
 8025f7c:	f88d 30f5 	strb.w	r3, [sp, #245]	; 0xf5
        part_draw_dsc.draw_area = &btn_area;
 8025f80:	ab4c      	add	r3, sp, #304	; 0x130
 8025f82:	9311      	str	r3, [sp, #68]	; 0x44
        part_draw_dsc.id = btn_i;
 8025f84:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8025f88:	aa0e      	add	r2, sp, #56	; 0x38
 8025f8a:	211a      	movs	r1, #26
 8025f8c:	4628      	mov	r0, r5
 8025f8e:	f7de fa19 	bl	80043c4 <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 8025f92:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 8025f96:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8025f9a:	f013 0f10 	tst.w	r3, #16
 8025f9e:	d02a      	beq.n	8025ff6 <draw_main+0x206>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 8025fa0:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 8025fa4:	220f      	movs	r2, #15
 8025fa6:	f362 0345 	bfi	r3, r2, #1, #5
 8025faa:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 8025fae:	f9bd 2130 	ldrsh.w	r2, [sp, #304]	; 0x130
 8025fb2:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8025fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025fb8:	440b      	add	r3, r1
 8025fba:	429a      	cmp	r2, r3
 8025fbc:	f000 80e9 	beq.w	8026192 <draw_main+0x3a2>
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8025fc0:	f9bd 2134 	ldrsh.w	r2, [sp, #308]	; 0x134
 8025fc4:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8025fc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025fca:	1a5b      	subs	r3, r3, r1
 8025fcc:	429a      	cmp	r2, r3
 8025fce:	f000 80e8 	beq.w	80261a2 <draw_main+0x3b2>
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 8025fd2:	f9bd 2132 	ldrsh.w	r2, [sp, #306]	; 0x132
 8025fd6:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8025fda:	9907      	ldr	r1, [sp, #28]
 8025fdc:	440b      	add	r3, r1
 8025fde:	429a      	cmp	r2, r3
 8025fe0:	f000 80ea 	beq.w	80261b8 <draw_main+0x3c8>
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 8025fe4:	f9bd 2136 	ldrsh.w	r2, [sp, #310]	; 0x136
 8025fe8:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8025fec:	9908      	ldr	r1, [sp, #32]
 8025fee:	1a5b      	subs	r3, r3, r1
 8025ff0:	429a      	cmp	r2, r3
 8025ff2:	f000 80ec 	beq.w	80261ce <draw_main+0x3de>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8025ff6:	f8bd 2132 	ldrh.w	r2, [sp, #306]	; 0x132
 8025ffa:	9206      	str	r2, [sp, #24]
 8025ffc:	f8bd a136 	ldrh.w	sl, [sp, #310]	; 0x136
 8026000:	f10a 0a01 	add.w	sl, sl, #1
 8026004:	fa1f fa8a 	uxth.w	sl, sl
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8026008:	f018 0820 	ands.w	r8, r8, #32
 802600c:	d009      	beq.n	8026022 <draw_main+0x232>
 802600e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8026010:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8026014:	f413 7f00 	tst.w	r3, #512	; 0x200
            btn_area.y1 -= btn_height;
 8026018:	bf1c      	itt	ne
 802601a:	ebca 0342 	rsbne	r3, sl, r2, lsl #1
 802601e:	f8ad 3132 	strhne.w	r3, [sp, #306]	; 0x132
        lv_draw_rect(draw_ctx, &draw_rect_dsc_act, &btn_area);
 8026022:	aa4c      	add	r2, sp, #304	; 0x130
 8026024:	a93e      	add	r1, sp, #248	; 0xf8
 8026026:	9804      	ldr	r0, [sp, #16]
 8026028:	f7e9 fc5c 	bl	800f8e4 <lv_draw_rect>
        const char * txt = btnm->map_p[txt_i];
 802602c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802602e:	599e      	ldr	r6, [r3, r6]
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 8026030:	f89d 30f5 	ldrb.w	r3, [sp, #245]	; 0xf5
 8026034:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026036:	f8bd 313c 	ldrh.w	r3, [sp, #316]	; 0x13c
 802603a:	3301      	adds	r3, #1
 802603c:	f8bd 2138 	ldrh.w	r2, [sp, #312]	; 0x138
 8026040:	1a9b      	subs	r3, r3, r2
 8026042:	b21b      	sxth	r3, r3
 8026044:	9301      	str	r3, [sp, #4]
 8026046:	f9bd 30ea 	ldrsh.w	r3, [sp, #234]	; 0xea
 802604a:	9300      	str	r3, [sp, #0]
 802604c:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8026050:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8026052:	4631      	mov	r1, r6
 8026054:	a80d      	add	r0, sp, #52	; 0x34
 8026056:	f7fe faa4 	bl	80245a2 <lv_txt_get_size>
 802605a:	f8bd 2130 	ldrh.w	r2, [sp, #304]	; 0x130
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 802605e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8026062:	f8bd 3134 	ldrh.w	r3, [sp, #308]	; 0x134
 8026066:	3301      	adds	r3, #1
 8026068:	1a9b      	subs	r3, r3, r2
 802606a:	b21b      	sxth	r3, r3
 802606c:	eba3 030c 	sub.w	r3, r3, ip
 8026070:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8026074:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8026078:	b292      	uxth	r2, r2
 802607a:	f8ad 2130 	strh.w	r2, [sp, #304]	; 0x130
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 802607e:	f8bd 1132 	ldrh.w	r1, [sp, #306]	; 0x132
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 8026082:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8026086:	f8bd 3136 	ldrh.w	r3, [sp, #310]	; 0x136
 802608a:	3301      	adds	r3, #1
 802608c:	1a5b      	subs	r3, r3, r1
 802608e:	b21b      	sxth	r3, r3
 8026090:	1a1b      	subs	r3, r3, r0
 8026092:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8026096:	eb01 0363 	add.w	r3, r1, r3, asr #1
 802609a:	b29b      	uxth	r3, r3
 802609c:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
        btn_area.x2 = btn_area.x1 + txt_size.x;
 80260a0:	4462      	add	r2, ip
 80260a2:	f8ad 2134 	strh.w	r2, [sp, #308]	; 0x134
        btn_area.y2 = btn_area.y1 + txt_size.y;
 80260a6:	4418      	add	r0, r3
 80260a8:	b280      	uxth	r0, r0
 80260aa:	f8ad 0136 	strh.w	r0, [sp, #310]	; 0x136
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 80260ae:	f1b8 0f00 	cmp.w	r8, #0
 80260b2:	d015      	beq.n	80260e0 <draw_main+0x2f0>
 80260b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80260b6:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 80260ba:	f412 7f00 	tst.w	r2, #512	; 0x200
 80260be:	d00f      	beq.n	80260e0 <draw_main+0x2f0>
 80260c0:	9a06      	ldr	r2, [sp, #24]
 80260c2:	ebaa 0a02 	sub.w	sl, sl, r2
            btn_area.y1 -= btn_height / 2;
 80260c6:	fa0f f28a 	sxth.w	r2, sl
 80260ca:	f3ca 3ac0 	ubfx	sl, sl, #15, #1
 80260ce:	4452      	add	r2, sl
 80260d0:	f3c2 024f 	ubfx	r2, r2, #1, #16
 80260d4:	1a9b      	subs	r3, r3, r2
 80260d6:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
            btn_area.y2 -= btn_height / 2;
 80260da:	1a80      	subs	r0, r0, r2
 80260dc:	f8ad 0136 	strh.w	r0, [sp, #310]	; 0x136
        lv_draw_label(draw_ctx, &draw_label_dsc_act, &btn_area, txt, NULL);
 80260e0:	2300      	movs	r3, #0
 80260e2:	9300      	str	r3, [sp, #0]
 80260e4:	4633      	mov	r3, r6
 80260e6:	aa4c      	add	r2, sp, #304	; 0x130
 80260e8:	a936      	add	r1, sp, #216	; 0xd8
 80260ea:	9804      	ldr	r0, [sp, #16]
 80260ec:	f7e7 fe16 	bl	800dd1c <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80260f0:	aa0e      	add	r2, sp, #56	; 0x38
 80260f2:	211b      	movs	r1, #27
 80260f4:	4628      	mov	r0, r5
 80260f6:	f7de f965 	bl	80043c4 <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 80260fa:	3401      	adds	r4, #1
 80260fc:	b2a4      	uxth	r4, r4
 80260fe:	f10b 0b01 	add.w	fp, fp, #1
 8026102:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8026104:	fa1f f38b 	uxth.w	r3, fp
 8026108:	429a      	cmp	r2, r3
 802610a:	d96f      	bls.n	80261ec <draw_main+0x3fc>
 802610c:	fa1f fa8b 	uxth.w	sl, fp
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8026110:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8026114:	e6e3      	b.n	8025ede <draw_main+0xee>
        else if(btn_i == btnm->btn_id_sel) {
 8026116:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8026118:	4553      	cmp	r3, sl
 802611a:	f47f aef9 	bne.w	8025f10 <draw_main+0x120>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 802611e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026120:	b10b      	cbz	r3, 8026126 <draw_main+0x336>
 8026122:	f048 0820 	orr.w	r8, r8, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 8026126:	9b05      	ldr	r3, [sp, #20]
 8026128:	f013 0f02 	tst.w	r3, #2
 802612c:	bf18      	it	ne
 802612e:	f048 0802 	orrne.w	r8, r8, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 8026132:	9b05      	ldr	r3, [sp, #20]
 8026134:	f013 0f04 	tst.w	r3, #4
 8026138:	bf18      	it	ne
 802613a:	f048 0804 	orrne.w	r8, r8, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 802613e:	9b05      	ldr	r3, [sp, #20]
 8026140:	f013 0f08 	tst.w	r3, #8
 8026144:	bf18      	it	ne
 8026146:	f048 0808 	orrne.w	r8, r8, #8
 802614a:	e6e1      	b.n	8025f10 <draw_main+0x120>
            obj->state = btn_state;
 802614c:	f8a5 8020 	strh.w	r8, [r5, #32]
            obj->skip_trans = 1;
 8026150:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8026154:	f043 0304 	orr.w	r3, r3, #4
 8026158:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 802615c:	a83e      	add	r0, sp, #248	; 0xf8
 802615e:	f7e9 fb65 	bl	800f82c <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 8026162:	a836      	add	r0, sp, #216	; 0xd8
 8026164:	f7e7 fda6 	bl	800dcb4 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 8026168:	aa3e      	add	r2, sp, #248	; 0xf8
 802616a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802616e:	4628      	mov	r0, r5
 8026170:	f7e1 fad6 	bl	8007720 <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 8026174:	aa36      	add	r2, sp, #216	; 0xd8
 8026176:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802617a:	4628      	mov	r0, r5
 802617c:	f7e1 fc45 	bl	8007a0a <lv_obj_init_draw_label_dsc>
            obj->state = state_ori;
 8026180:	9b05      	ldr	r3, [sp, #20]
 8026182:	842b      	strh	r3, [r5, #32]
            obj->skip_trans = 0;
 8026184:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8026188:	f36f 0382 	bfc	r3, #2, #1
 802618c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8026190:	e6e8      	b.n	8025f64 <draw_main+0x174>
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 8026192:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 8026196:	220b      	movs	r2, #11
 8026198:	f362 0345 	bfi	r3, r2, #1, #5
 802619c:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 80261a0:	e70e      	b.n	8025fc0 <draw_main+0x1d0>
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 80261a2:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 80261a6:	f3c3 0244 	ubfx	r2, r3, #1, #5
 80261aa:	f002 0217 	and.w	r2, r2, #23
 80261ae:	f362 0345 	bfi	r3, r2, #1, #5
 80261b2:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 80261b6:	e70c      	b.n	8025fd2 <draw_main+0x1e2>
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 80261b8:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 80261bc:	f3c3 0244 	ubfx	r2, r3, #1, #5
 80261c0:	f002 021d 	and.w	r2, r2, #29
 80261c4:	f362 0345 	bfi	r3, r2, #1, #5
 80261c8:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 80261cc:	e70a      	b.n	8025fe4 <draw_main+0x1f4>
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 80261ce:	f89d 311b 	ldrb.w	r3, [sp, #283]	; 0x11b
 80261d2:	f3c3 0244 	ubfx	r2, r3, #1, #5
 80261d6:	f002 021e 	and.w	r2, r2, #30
 80261da:	f362 0345 	bfi	r3, r2, #1, #5
 80261de:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 80261e2:	e708      	b.n	8025ff6 <draw_main+0x206>
 80261e4:	08033624 	.word	0x08033624
 80261e8:	0802d52c 	.word	0x0802d52c
    obj->skip_trans = 0;
 80261ec:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80261f0:	f36f 0382 	bfc	r3, #2, #1
 80261f4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 80261f8:	e602      	b.n	8025e00 <draw_main+0x10>
 80261fa:	bf00      	nop

080261fc <lv_btnmatrix_destructor>:
{
 80261fc:	b510      	push	{r4, lr}
 80261fe:	460c      	mov	r4, r1
    lv_mem_free(btnm->button_areas);
 8026200:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8026202:	f7fb feb1 	bl	8021f68 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 8026206:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8026208:	f7fb feae 	bl	8021f68 <lv_mem_free>
    btnm->button_areas = NULL;
 802620c:	2300      	movs	r3, #0
 802620e:	62a3      	str	r3, [r4, #40]	; 0x28
    btnm->ctrl_bits = NULL;
 8026210:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8026212:	bd10      	pop	{r4, pc}

08026214 <lv_btnmatrix_create>:
{
 8026214:	b510      	push	{r4, lr}
 8026216:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8026218:	4803      	ldr	r0, [pc, #12]	; (8026228 <lv_btnmatrix_create+0x14>)
 802621a:	f7e1 f99b 	bl	8007554 <lv_obj_class_create_obj>
 802621e:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8026220:	f7e1 fa45 	bl	80076ae <lv_obj_class_init_obj>
}
 8026224:	4620      	mov	r0, r4
 8026226:	bd10      	pop	{r4, pc}
 8026228:	08033624 	.word	0x08033624

0802622c <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 802622c:	2900      	cmp	r1, #0
 802622e:	f000 8144 	beq.w	80264ba <lv_btnmatrix_set_map+0x28e>
{
 8026232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026236:	b093      	sub	sp, #76	; 0x4c
 8026238:	4683      	mov	fp, r0
 802623a:	4689      	mov	r9, r1
    btnm->row_cnt = 1;
 802623c:	2301      	movs	r3, #1
 802623e:	8643      	strh	r3, [r0, #50]	; 0x32
    while(map[i] && map[i][0] != '\0') {
 8026240:	6808      	ldr	r0, [r1, #0]
    uint16_t btn_cnt = 0;
 8026242:	2500      	movs	r5, #0
    while(map[i] && map[i][0] != '\0') {
 8026244:	b1b8      	cbz	r0, 8026276 <lv_btnmatrix_set_map+0x4a>
    uint16_t i       = 0;
 8026246:	2400      	movs	r4, #0
    uint16_t btn_cnt = 0;
 8026248:	4625      	mov	r5, r4
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 802624a:	4e9c      	ldr	r6, [pc, #624]	; (80264bc <lv_btnmatrix_set_map+0x290>)
 802624c:	e009      	b.n	8026262 <lv_btnmatrix_set_map+0x36>
            btnm->row_cnt++;
 802624e:	f8bb 3032 	ldrh.w	r3, [fp, #50]	; 0x32
 8026252:	3301      	adds	r3, #1
 8026254:	f8ab 3032 	strh.w	r3, [fp, #50]	; 0x32
        i++;
 8026258:	3401      	adds	r4, #1
 802625a:	b2a4      	uxth	r4, r4
    while(map[i] && map[i][0] != '\0') {
 802625c:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 8026260:	b148      	cbz	r0, 8026276 <lv_btnmatrix_set_map+0x4a>
 8026262:	7803      	ldrb	r3, [r0, #0]
 8026264:	b13b      	cbz	r3, 8026276 <lv_btnmatrix_set_map+0x4a>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8026266:	4631      	mov	r1, r6
 8026268:	f7d9 ffdc 	bl	8000224 <strcmp>
 802626c:	2800      	cmp	r0, #0
 802626e:	d0ee      	beq.n	802624e <lv_btnmatrix_set_map+0x22>
            btn_cnt++;
 8026270:	3501      	adds	r5, #1
 8026272:	b2ad      	uxth	r5, r5
 8026274:	e7f0      	b.n	8026258 <lv_btnmatrix_set_map+0x2c>
    if(btn_cnt == btnm->btn_cnt) return;
 8026276:	f8bb 3030 	ldrh.w	r3, [fp, #48]	; 0x30
 802627a:	42ab      	cmp	r3, r5
 802627c:	d027      	beq.n	80262ce <lv_btnmatrix_set_map+0xa2>
    if(btnm->button_areas != NULL) {
 802627e:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
 8026282:	b120      	cbz	r0, 802628e <lv_btnmatrix_set_map+0x62>
        lv_mem_free(btnm->button_areas);
 8026284:	f7fb fe70 	bl	8021f68 <lv_mem_free>
        btnm->button_areas = NULL;
 8026288:	2300      	movs	r3, #0
 802628a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
    if(btnm->ctrl_bits != NULL) {
 802628e:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8026292:	b120      	cbz	r0, 802629e <lv_btnmatrix_set_map+0x72>
        lv_mem_free(btnm->ctrl_bits);
 8026294:	f7fb fe68 	bl	8021f68 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 8026298:	2300      	movs	r3, #0
 802629a:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 802629e:	00e8      	lsls	r0, r5, #3
 80262a0:	f7fb fe44 	bl	8021f2c <lv_mem_alloc>
 80262a4:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 80262a8:	2800      	cmp	r0, #0
 80262aa:	d051      	beq.n	8026350 <lv_btnmatrix_set_map+0x124>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 80262ac:	0068      	lsls	r0, r5, #1
 80262ae:	f7fb fe3d 	bl	8021f2c <lv_mem_alloc>
 80262b2:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 80262b6:	2800      	cmp	r0, #0
 80262b8:	d04b      	beq.n	8026352 <lv_btnmatrix_set_map+0x126>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 80262ba:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 80262be:	2b00      	cmp	r3, #0
 80262c0:	bf08      	it	eq
 80262c2:	2500      	moveq	r5, #0
    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 80262c4:	0069      	lsls	r1, r5, #1
 80262c6:	f7fc f8b1 	bl	802242c <lv_memset_00>
    btnm->btn_cnt = btn_cnt;
 80262ca:	f8ab 5030 	strh.w	r5, [fp, #48]	; 0x30
    btnm->map_p = map;
 80262ce:	f8cb 9024 	str.w	r9, [fp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80262d2:	2216      	movs	r2, #22
 80262d4:	2100      	movs	r1, #0
 80262d6:	4658      	mov	r0, fp
 80262d8:	f7e4 fde8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80262dc:	b2c3      	uxtb	r3, r0
 80262de:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80262e0:	2212      	movs	r2, #18
 80262e2:	2100      	movs	r1, #0
 80262e4:	4658      	mov	r0, fp
 80262e6:	f7e4 fde1 	bl	800aeac <lv_obj_get_style_prop>
 80262ea:	9011      	str	r0, [sp, #68]	; 0x44
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80262ec:	2210      	movs	r2, #16
 80262ee:	2100      	movs	r1, #0
 80262f0:	4658      	mov	r0, fp
 80262f2:	f7e4 fddb 	bl	800aeac <lv_obj_get_style_prop>
 80262f6:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80262f8:	2214      	movs	r2, #20
 80262fa:	2100      	movs	r1, #0
 80262fc:	4658      	mov	r0, fp
 80262fe:	f7e4 fdd5 	bl	800aeac <lv_obj_get_style_prop>
 8026302:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8026304:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8026306:	2215      	movs	r2, #21
 8026308:	2100      	movs	r1, #0
 802630a:	4658      	mov	r0, fp
 802630c:	f7e4 fdce 	bl	800aeac <lv_obj_get_style_prop>
 8026310:	900f      	str	r0, [sp, #60]	; 0x3c
    return (lv_coord_t)v.num;
 8026312:	b203      	sxth	r3, r0
 8026314:	9310      	str	r3, [sp, #64]	; 0x40
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 8026316:	4658      	mov	r0, fp
 8026318:	f7e1 ff55 	bl	80081c6 <lv_obj_get_content_width>
 802631c:	900e      	str	r0, [sp, #56]	; 0x38
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 802631e:	4658      	mov	r0, fp
 8026320:	f7e1 ff6e 	bl	8008200 <lv_obj_get_content_height>
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8026324:	f8bb 3032 	ldrh.w	r3, [fp, #50]	; 0x32
 8026328:	1e5a      	subs	r2, r3, #1
 802632a:	fb02 0616 	mls	r6, r2, r6, r0
 802632e:	b232      	sxth	r2, r6
 8026330:	920a      	str	r2, [sp, #40]	; 0x28
    for(row = 0; row < btnm->row_cnt; row++) {
 8026332:	4698      	mov	r8, r3
 8026334:	2b00      	cmp	r3, #0
 8026336:	f000 80b7 	beq.w	80264a8 <lv_btnmatrix_set_map+0x27c>
 802633a:	b2ab      	uxth	r3, r5
 802633c:	930b      	str	r3, [sp, #44]	; 0x2c
 802633e:	b2a3      	uxth	r3, r4
 8026340:	9307      	str	r3, [sp, #28]
 8026342:	f04f 0a00 	mov.w	sl, #0
 8026346:	f8cd a018 	str.w	sl, [sp, #24]
 802634a:	f8cd a020 	str.w	sl, [sp, #32]
 802634e:	e017      	b.n	8026380 <lv_btnmatrix_set_map+0x154>
    LV_ASSERT_MALLOC(btnm->button_areas);
 8026350:	e7fe      	b.n	8026350 <lv_btnmatrix_set_map+0x124>
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 8026352:	e7fe      	b.n	8026352 <lv_btnmatrix_set_map+0x126>
        if(btn_cnt == 0) {
 8026354:	2c00      	cmp	r4, #0
 8026356:	d138      	bne.n	80263ca <lv_btnmatrix_set_map+0x19e>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 8026358:	3601      	adds	r6, #1
 802635a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
    for(row = 0; row < btnm->row_cnt; row++) {
 802635e:	9a08      	ldr	r2, [sp, #32]
 8026360:	3201      	adds	r2, #1
 8026362:	9208      	str	r2, [sp, #32]
 8026364:	f8bb 8032 	ldrh.w	r8, [fp, #50]	; 0x32
 8026368:	9b06      	ldr	r3, [sp, #24]
 802636a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802636c:	440b      	add	r3, r1
 802636e:	9306      	str	r3, [sp, #24]
 8026370:	9b07      	ldr	r3, [sp, #28]
 8026372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026374:	440b      	add	r3, r1
 8026376:	b29b      	uxth	r3, r3
 8026378:	9307      	str	r3, [sp, #28]
 802637a:	4590      	cmp	r8, r2
 802637c:	f240 8094 	bls.w	80264a8 <lv_btnmatrix_set_map+0x27c>
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8026380:	f8d9 7000 	ldr.w	r7, [r9]
 8026384:	2600      	movs	r6, #0
 8026386:	2f00      	cmp	r7, #0
 8026388:	d0e6      	beq.n	8026358 <lv_btnmatrix_set_map+0x12c>
        uint16_t btn_cnt = 0;            /*Number of buttons in a row*/
 802638a:	2400      	movs	r4, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 802638c:	4625      	mov	r5, r4
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 802638e:	4626      	mov	r6, r4
 8026390:	494a      	ldr	r1, [pc, #296]	; (80264bc <lv_btnmatrix_set_map+0x290>)
 8026392:	4638      	mov	r0, r7
 8026394:	f7d9 ff46 	bl	8000224 <strcmp>
 8026398:	2800      	cmp	r0, #0
 802639a:	d0db      	beq.n	8026354 <lv_btnmatrix_set_map+0x128>
 802639c:	783b      	ldrb	r3, [r7, #0]
 802639e:	2b00      	cmp	r3, #0
 80263a0:	d0d8      	beq.n	8026354 <lv_btnmatrix_set_map+0x128>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 80263a2:	4456      	add	r6, sl
 80263a4:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 80263a8:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 80263ac:	f003 0307 	and.w	r3, r3, #7
 80263b0:	2b01      	cmp	r3, #1
 80263b2:	bf2c      	ite	cs
 80263b4:	18ed      	addcs	r5, r5, r3
 80263b6:	3501      	addcc	r5, #1
 80263b8:	b2ad      	uxth	r5, r5
            btn_cnt++;
 80263ba:	3401      	adds	r4, #1
 80263bc:	b2a4      	uxth	r4, r4
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 80263be:	4626      	mov	r6, r4
 80263c0:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 80263c4:	2f00      	cmp	r7, #0
 80263c6:	d1e3      	bne.n	8026390 <lv_btnmatrix_set_map+0x164>
 80263c8:	e7c4      	b.n	8026354 <lv_btnmatrix_set_map+0x128>
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 80263ca:	9a06      	ldr	r2, [sp, #24]
 80263cc:	fbb2 f3f8 	udiv	r3, r2, r8
 80263d0:	9907      	ldr	r1, [sp, #28]
 80263d2:	440b      	add	r3, r1
 80263d4:	b21b      	sxth	r3, r3
 80263d6:	9303      	str	r3, [sp, #12]
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 80263d8:	4613      	mov	r3, r2
 80263da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80263dc:	4413      	add	r3, r2
 80263de:	fbb3 f8f8 	udiv	r8, r3, r8
 80263e2:	1e4b      	subs	r3, r1, #1
 80263e4:	4498      	add	r8, r3
 80263e6:	fa0f f388 	sxth.w	r3, r8
 80263ea:	9304      	str	r3, [sp, #16]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 80263ec:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80263f0:	9309      	str	r3, [sp, #36]	; 0x24
 80263f2:	3c01      	subs	r4, #1
 80263f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80263f6:	fb04 3412 	mls	r4, r4, r2, r3
 80263fa:	b224      	sxth	r4, r4
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 80263fc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8026400:	2e00      	cmp	r6, #0
 8026402:	d04e      	beq.n	80264a2 <lv_btnmatrix_set_map+0x276>
 8026404:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8026408:	eb06 020a 	add.w	r2, r6, sl
 802640c:	9202      	str	r2, [sp, #8]
 802640e:	2700      	movs	r7, #0
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 8026410:	46b8      	mov	r8, r7
            btn_x1 += pleft;
 8026412:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8026416:	960c      	str	r6, [sp, #48]	; 0x30
 8026418:	4616      	mov	r6, r2
 802641a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 802641e:	4699      	mov	r9, r3
 8026420:	e018      	b.n	8026454 <lv_btnmatrix_set_map+0x228>
                btn_x1 = max_w - btn_x1;
 8026422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026424:	1ac3      	subs	r3, r0, r3
 8026426:	b219      	sxth	r1, r3
                btn_x2 = max_w - btn_x2;
 8026428:	1a83      	subs	r3, r0, r2
 802642a:	b21b      	sxth	r3, r3
            btn_x1 += pleft;
 802642c:	4431      	add	r1, r6
            btn_x2 += pleft;
 802642e:	4433      	add	r3, r6
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 8026430:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
 8026434:	9a04      	ldr	r2, [sp, #16]
 8026436:	9200      	str	r2, [sp, #0]
 8026438:	b21b      	sxth	r3, r3
 802643a:	9a03      	ldr	r2, [sp, #12]
 802643c:	b209      	sxth	r1, r1
 802643e:	eb00 00ca 	add.w	r0, r0, sl, lsl #3
 8026442:	f7fa fe21 	bl	8021088 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8026446:	f10a 0a01 	add.w	sl, sl, #1
 802644a:	444f      	add	r7, r9
 802644c:	b2bf      	uxth	r7, r7
 802644e:	9b02      	ldr	r3, [sp, #8]
 8026450:	459a      	cmp	sl, r3
 8026452:	d01d      	beq.n	8026490 <lv_btnmatrix_set_map+0x264>
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 8026454:	fb08 f304 	mul.w	r3, r8, r4
 8026458:	fbb3 f3f5 	udiv	r3, r3, r5
 802645c:	443b      	add	r3, r7
 802645e:	b29a      	uxth	r2, r3
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8026460:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
 8026464:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8026468:	f003 0307 	and.w	r3, r3, #7
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 802646c:	2b01      	cmp	r3, #1
 802646e:	bf2c      	ite	cs
 8026470:	4498      	addcs	r8, r3
 8026472:	f108 0801 	addcc.w	r8, r8, #1
 8026476:	fb08 f304 	mul.w	r3, r8, r4
 802647a:	fbb3 f3f5 	udiv	r3, r3, r5
 802647e:	1e79      	subs	r1, r7, #1
 8026480:	440b      	add	r3, r1
 8026482:	b29b      	uxth	r3, r3
            if(base_dir == LV_BASE_DIR_RTL) {
 8026484:	9905      	ldr	r1, [sp, #20]
 8026486:	2901      	cmp	r1, #1
 8026488:	d0cb      	beq.n	8026422 <lv_btnmatrix_set_map+0x1f6>
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 802648a:	b211      	sxth	r1, r2
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 802648c:	b21b      	sxth	r3, r3
 802648e:	e7cd      	b.n	802642c <lv_btnmatrix_set_map+0x200>
 8026490:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026492:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 8026496:	3601      	adds	r6, #1
 8026498:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 802649c:	f8dd a008 	ldr.w	sl, [sp, #8]
 80264a0:	e75d      	b.n	802635e <lv_btnmatrix_set_map+0x132>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 80264a2:	f8cd a008 	str.w	sl, [sp, #8]
 80264a6:	e7f6      	b.n	8026496 <lv_btnmatrix_set_map+0x26a>
    lv_obj_refresh_ext_draw_size(obj);
 80264a8:	4658      	mov	r0, fp
 80264aa:	f7e1 fc83 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 80264ae:	4658      	mov	r0, fp
 80264b0:	f7e2 f8c4 	bl	800863c <lv_obj_invalidate>
}
 80264b4:	b013      	add	sp, #76	; 0x4c
 80264b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264ba:	4770      	bx	lr
 80264bc:	0802d52c 	.word	0x0802d52c

080264c0 <lv_btnmatrix_constructor>:
{
 80264c0:	b508      	push	{r3, lr}
 80264c2:	4608      	mov	r0, r1
    btnm->btn_cnt        = 0;
 80264c4:	2300      	movs	r3, #0
 80264c6:	860b      	strh	r3, [r1, #48]	; 0x30
    btnm->row_cnt        = 0;
 80264c8:	864b      	strh	r3, [r1, #50]	; 0x32
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 80264ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80264ce:	868a      	strh	r2, [r1, #52]	; 0x34
    btnm->button_areas   = NULL;
 80264d0:	628b      	str	r3, [r1, #40]	; 0x28
    btnm->ctrl_bits      = NULL;
 80264d2:	62cb      	str	r3, [r1, #44]	; 0x2c
    btnm->map_p          = NULL;
 80264d4:	624b      	str	r3, [r1, #36]	; 0x24
    btnm->one_check      = 0;
 80264d6:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 80264da:	f363 0200 	bfi	r2, r3, #0, #1
 80264de:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    lv_btnmatrix_set_map(obj, lv_btnmatrix_def_map);
 80264e2:	4902      	ldr	r1, [pc, #8]	; (80264ec <lv_btnmatrix_constructor+0x2c>)
 80264e4:	f7ff fea2 	bl	802622c <lv_btnmatrix_set_map>
}
 80264e8:	bd08      	pop	{r3, pc}
 80264ea:	bf00      	nop
 80264ec:	20000780 	.word	0x20000780

080264f0 <lv_btnmatrix_set_ctrl_map>:
{
 80264f0:	b510      	push	{r4, lr}
 80264f2:	4604      	mov	r4, r0
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 80264f4:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80264f6:	0052      	lsls	r2, r2, #1
 80264f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80264fa:	f7fb fe01 	bl	8022100 <lv_memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 80264fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026500:	4620      	mov	r0, r4
 8026502:	f7ff fe93 	bl	802622c <lv_btnmatrix_set_map>
}
 8026506:	bd10      	pop	{r4, pc}

08026508 <lv_btnmatrix_clear_btn_ctrl>:
{
 8026508:	b538      	push	{r3, r4, r5, lr}
    if(btn_id >= btnm->btn_cnt) return;
 802650a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 802650c:	428b      	cmp	r3, r1
 802650e:	d800      	bhi.n	8026512 <lv_btnmatrix_clear_btn_ctrl+0xa>
}
 8026510:	bd38      	pop	{r3, r4, r5, pc}
 8026512:	4604      	mov	r4, r0
 8026514:	4615      	mov	r5, r2
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 8026516:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8026518:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 802651c:	ea23 0305 	bic.w	r3, r3, r5
 8026520:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    invalidate_button_area(obj, btn_id);
 8026524:	f7ff fbe8 	bl	8025cf8 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 8026528:	f415 7f00 	tst.w	r5, #512	; 0x200
 802652c:	d0f0      	beq.n	8026510 <lv_btnmatrix_clear_btn_ctrl+0x8>
        lv_obj_refresh_ext_draw_size(obj);
 802652e:	4620      	mov	r0, r4
 8026530:	f7e1 fc40 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
 8026534:	e7ec      	b.n	8026510 <lv_btnmatrix_clear_btn_ctrl+0x8>

08026536 <lv_btnmatrix_clear_btn_ctrl_all>:
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026536:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8026538:	b173      	cbz	r3, 8026558 <lv_btnmatrix_clear_btn_ctrl_all+0x22>
{
 802653a:	b570      	push	{r4, r5, r6, lr}
 802653c:	4605      	mov	r5, r0
 802653e:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 8026540:	2400      	movs	r4, #0
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 8026542:	4632      	mov	r2, r6
 8026544:	b2a1      	uxth	r1, r4
 8026546:	4628      	mov	r0, r5
 8026548:	f7ff ffde 	bl	8026508 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 802654c:	3401      	adds	r4, #1
 802654e:	8e28      	ldrh	r0, [r5, #48]	; 0x30
 8026550:	b2a3      	uxth	r3, r4
 8026552:	4298      	cmp	r0, r3
 8026554:	d8f5      	bhi.n	8026542 <lv_btnmatrix_clear_btn_ctrl_all+0xc>
}
 8026556:	bd70      	pop	{r4, r5, r6, pc}
 8026558:	4770      	bx	lr

0802655a <lv_btnmatrix_set_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 802655a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 802655c:	428b      	cmp	r3, r1
 802655e:	d921      	bls.n	80265a4 <lv_btnmatrix_set_btn_ctrl+0x4a>
{
 8026560:	b570      	push	{r4, r5, r6, lr}
 8026562:	4604      	mov	r4, r0
 8026564:	460d      	mov	r5, r1
 8026566:	4616      	mov	r6, r2
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 8026568:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 802656c:	f013 0f01 	tst.w	r3, #1
 8026570:	d002      	beq.n	8026578 <lv_btnmatrix_set_btn_ctrl+0x1e>
 8026572:	f012 0f80 	tst.w	r2, #128	; 0x80
 8026576:	d10d      	bne.n	8026594 <lv_btnmatrix_set_btn_ctrl+0x3a>
    btnm->ctrl_bits[btn_id] |= ctrl;
 8026578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802657a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 802657e:	4333      	orrs	r3, r6
 8026580:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    invalidate_button_area(obj, btn_id);
 8026584:	4629      	mov	r1, r5
 8026586:	4620      	mov	r0, r4
 8026588:	f7ff fbb6 	bl	8025cf8 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 802658c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8026590:	d104      	bne.n	802659c <lv_btnmatrix_set_btn_ctrl+0x42>
}
 8026592:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8026594:	2180      	movs	r1, #128	; 0x80
 8026596:	f7ff ffce 	bl	8026536 <lv_btnmatrix_clear_btn_ctrl_all>
 802659a:	e7ed      	b.n	8026578 <lv_btnmatrix_set_btn_ctrl+0x1e>
        lv_obj_refresh_ext_draw_size(obj);
 802659c:	4620      	mov	r0, r4
 802659e:	f7e1 fc09 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
 80265a2:	e7f6      	b.n	8026592 <lv_btnmatrix_set_btn_ctrl+0x38>
 80265a4:	4770      	bx	lr

080265a6 <lv_btnmatrix_get_selected_btn>:
}
 80265a6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80265a8:	4770      	bx	lr
	...

080265ac <lv_btnmatrix_get_btn_text>:
{
 80265ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 80265b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80265b4:	4299      	cmp	r1, r3
 80265b6:	d028      	beq.n	802660a <lv_btnmatrix_get_btn_text+0x5e>
 80265b8:	4682      	mov	sl, r0
 80265ba:	460f      	mov	r7, r1
    if(btn_id > btnm->btn_cnt) return NULL;
 80265bc:	f8b0 b030 	ldrh.w	fp, [r0, #48]	; 0x30
 80265c0:	458b      	cmp	fp, r1
 80265c2:	d324      	bcc.n	802660e <lv_btnmatrix_get_btn_text+0x62>
    while(btn_i != btn_id) {
 80265c4:	b1b9      	cbz	r1, 80265f6 <lv_btnmatrix_get_btn_text+0x4a>
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 80265c6:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
    uint16_t btn_i = 0;
 80265ca:	2400      	movs	r4, #0
    uint16_t txt_i = 0;
 80265cc:	4626      	mov	r6, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 80265ce:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8026618 <lv_btnmatrix_get_btn_text+0x6c>
 80265d2:	e002      	b.n	80265da <lv_btnmatrix_get_btn_text+0x2e>
        txt_i++;
 80265d4:	462e      	mov	r6, r5
    while(btn_i != btn_id) {
 80265d6:	42a7      	cmp	r7, r4
 80265d8:	d00f      	beq.n	80265fa <lv_btnmatrix_get_btn_text+0x4e>
        btn_i++;
 80265da:	3401      	adds	r4, #1
 80265dc:	b2a4      	uxth	r4, r4
        txt_i++;
 80265de:	1c75      	adds	r5, r6, #1
 80265e0:	b2ad      	uxth	r5, r5
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 80265e2:	4641      	mov	r1, r8
 80265e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80265e8:	f7d9 fe1c 	bl	8000224 <strcmp>
 80265ec:	2800      	cmp	r0, #0
 80265ee:	d1f1      	bne.n	80265d4 <lv_btnmatrix_get_btn_text+0x28>
 80265f0:	3602      	adds	r6, #2
 80265f2:	b2b6      	uxth	r6, r6
 80265f4:	e7ef      	b.n	80265d6 <lv_btnmatrix_get_btn_text+0x2a>
    uint16_t btn_i = 0;
 80265f6:	460c      	mov	r4, r1
    uint16_t txt_i = 0;
 80265f8:	460e      	mov	r6, r1
    if(btn_i == btnm->btn_cnt) return NULL;
 80265fa:	45a3      	cmp	fp, r4
 80265fc:	d009      	beq.n	8026612 <lv_btnmatrix_get_btn_text+0x66>
    return btnm->map_p[txt_i];
 80265fe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8026602:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
 8026606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 802660a:	2000      	movs	r0, #0
 802660c:	e7fb      	b.n	8026606 <lv_btnmatrix_get_btn_text+0x5a>
    if(btn_id > btnm->btn_cnt) return NULL;
 802660e:	2000      	movs	r0, #0
 8026610:	e7f9      	b.n	8026606 <lv_btnmatrix_get_btn_text+0x5a>
    if(btn_i == btnm->btn_cnt) return NULL;
 8026612:	2000      	movs	r0, #0
 8026614:	e7f7      	b.n	8026606 <lv_btnmatrix_get_btn_text+0x5a>
 8026616:	bf00      	nop
 8026618:	0802d52c 	.word	0x0802d52c

0802661c <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 802661c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 802661e:	428b      	cmp	r3, r1
 8026620:	d908      	bls.n	8026634 <lv_btnmatrix_has_btn_ctrl+0x18>
    return ((btnm->ctrl_bits[btn_id] & ctrl) == ctrl) ? true : false;
 8026622:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8026624:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8026628:	ea32 0303 	bics.w	r3, r2, r3
 802662c:	bf0c      	ite	eq
 802662e:	2001      	moveq	r0, #1
 8026630:	2000      	movne	r0, #0
 8026632:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 8026634:	2000      	movs	r0, #0
}
 8026636:	4770      	bx	lr

08026638 <make_one_button_checked>:
 * It simply clears the toggle flag on other buttons.
 * @param obj Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_checked(lv_obj_t * obj, uint16_t btn_idx)
{
 8026638:	b570      	push	{r4, r5, r6, lr}
 802663a:	4604      	mov	r4, r0
 802663c:	460e      	mov	r6, r1
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 802663e:	2280      	movs	r2, #128	; 0x80
 8026640:	f7ff ffec 	bl	802661c <lv_btnmatrix_has_btn_ctrl>
 8026644:	4605      	mov	r5, r0

    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8026646:	2180      	movs	r1, #128	; 0x80
 8026648:	4620      	mov	r0, r4
 802664a:	f7ff ff74 	bl	8026536 <lv_btnmatrix_clear_btn_ctrl_all>

    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 802664e:	b905      	cbnz	r5, 8026652 <make_one_button_checked+0x1a>
}
 8026650:	bd70      	pop	{r4, r5, r6, pc}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8026652:	2280      	movs	r2, #128	; 0x80
 8026654:	4631      	mov	r1, r6
 8026656:	4620      	mov	r0, r4
 8026658:	f7ff ff7f 	bl	802655a <lv_btnmatrix_set_btn_ctrl>
}
 802665c:	e7f8      	b.n	8026650 <make_one_button_checked+0x18>
	...

08026660 <lv_btnmatrix_event>:
{
 8026660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026664:	b082      	sub	sp, #8
 8026666:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8026668:	48ba      	ldr	r0, [pc, #744]	; (8026954 <lv_btnmatrix_event+0x2f4>)
 802666a:	f7dd fdae 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802666e:	2801      	cmp	r0, #1
 8026670:	d002      	beq.n	8026678 <lv_btnmatrix_event+0x18>
}
 8026672:	b002      	add	sp, #8
 8026674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8026678:	4630      	mov	r0, r6
 802667a:	f7dd fec9 	bl	8004410 <lv_event_get_code>
 802667e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8026680:	4630      	mov	r0, r6
 8026682:	f7dd fec1 	bl	8004408 <lv_event_get_target>
 8026686:	4604      	mov	r4, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8026688:	2d13      	cmp	r5, #19
 802668a:	d024      	beq.n	80266d6 <lv_btnmatrix_event+0x76>
    if(code == LV_EVENT_STYLE_CHANGED) {
 802668c:	2d2a      	cmp	r5, #42	; 0x2a
 802668e:	d047      	beq.n	8026720 <lv_btnmatrix_event+0xc0>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8026690:	2d29      	cmp	r5, #41	; 0x29
 8026692:	d049      	beq.n	8026728 <lv_btnmatrix_event+0xc8>
    else if(code == LV_EVENT_PRESSED) {
 8026694:	2d01      	cmp	r5, #1
 8026696:	d04b      	beq.n	8026730 <lv_btnmatrix_event+0xd0>
    else if(code == LV_EVENT_PRESSING) {
 8026698:	2d02      	cmp	r5, #2
 802669a:	f000 808e 	beq.w	80267ba <lv_btnmatrix_event+0x15a>
    else if(code == LV_EVENT_RELEASED) {
 802669e:	2d08      	cmp	r5, #8
 80266a0:	f000 80db 	beq.w	802685a <lv_btnmatrix_event+0x1fa>
    else if(code == LV_EVENT_LONG_PRESSED_REPEAT) {
 80266a4:	2d06      	cmp	r5, #6
 80266a6:	f040 811f 	bne.w	80268e8 <lv_btnmatrix_event+0x288>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80266aa:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 80266ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80266b0:	429a      	cmp	r2, r3
 80266b2:	d0de      	beq.n	8026672 <lv_btnmatrix_event+0x12>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80266b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
 80266b6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80266ba:	110b      	asrs	r3, r1, #4
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80266bc:	ea43 1361 	orr.w	r3, r3, r1, asr #5
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80266c0:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80266c4:	f013 0f01 	tst.w	r3, #1
 80266c8:	d1d3      	bne.n	8026672 <lv_btnmatrix_event+0x12>
                uint32_t b = btnm->btn_id_sel;
 80266ca:	9200      	str	r2, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 80266cc:	466a      	mov	r2, sp
 80266ce:	211c      	movs	r1, #28
 80266d0:	f7dd fe78 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 80266d4:	e7cd      	b.n	8026672 <lv_btnmatrix_event+0x12>
 */
static bool has_popovers_in_top_row(lv_obj_t * obj)
{
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;

    if(btnm->row_cnt <= 0) {
 80266d6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80266d8:	2b00      	cmp	r3, #0
 80266da:	d0ca      	beq.n	8026672 <lv_btnmatrix_event+0x12>
        return false;
    }

    const char ** map_row = btnm->map_p;
 80266dc:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
    uint16_t btn_cnt = 0;

    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 80266e0:	f8d9 7000 	ldr.w	r7, [r9]
 80266e4:	2f00      	cmp	r7, #0
 80266e6:	d0c4      	beq.n	8026672 <lv_btnmatrix_event+0x12>
    uint16_t btn_cnt = 0;
 80266e8:	2500      	movs	r5, #0
    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 80266ea:	46a8      	mov	r8, r5
 80266ec:	f8df a268 	ldr.w	sl, [pc, #616]	; 8026958 <lv_btnmatrix_event+0x2f8>
 80266f0:	4651      	mov	r1, sl
 80266f2:	4638      	mov	r0, r7
 80266f4:	f7d9 fd96 	bl	8000224 <strcmp>
 80266f8:	2800      	cmp	r0, #0
 80266fa:	d0ba      	beq.n	8026672 <lv_btnmatrix_event+0x12>
 80266fc:	783b      	ldrb	r3, [r7, #0]
 80266fe:	2b00      	cmp	r3, #0
 8026700:	d0b7      	beq.n	8026672 <lv_btnmatrix_event+0x12>
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 8026702:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8026704:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 8026708:	f413 7f00 	tst.w	r3, #512	; 0x200
 802670c:	f040 8272 	bne.w	8026bf4 <lv_btnmatrix_event+0x594>
            return true;
        }
        btn_cnt++;
 8026710:	3501      	adds	r5, #1
 8026712:	b2ad      	uxth	r5, r5
    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8026714:	46a8      	mov	r8, r5
 8026716:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 802671a:	2f00      	cmp	r7, #0
 802671c:	d1e8      	bne.n	80266f0 <lv_btnmatrix_event+0x90>
 802671e:	e7a8      	b.n	8026672 <lv_btnmatrix_event+0x12>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 8026720:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8026722:	f7ff fd83 	bl	802622c <lv_btnmatrix_set_map>
 8026726:	e7a4      	b.n	8026672 <lv_btnmatrix_event+0x12>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 8026728:	6a41      	ldr	r1, [r0, #36]	; 0x24
 802672a:	f7ff fd7f 	bl	802622c <lv_btnmatrix_set_map>
 802672e:	e7a0      	b.n	8026672 <lv_btnmatrix_event+0x12>
        void * param = lv_event_get_param(e);
 8026730:	4630      	mov	r0, r6
 8026732:	f7dd fe71 	bl	8004418 <lv_event_get_param>
 8026736:	4605      	mov	r5, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 8026738:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 802673a:	4620      	mov	r0, r4
 802673c:	f7ff fadc 	bl	8025cf8 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8026740:	f7de f9e6 	bl	8004b10 <lv_indev_get_act>
 8026744:	f7de f9ea 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 8026748:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 802674c:	2b01      	cmp	r3, #1
 802674e:	d019      	beq.n	8026784 <lv_btnmatrix_event+0x124>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8026750:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8026752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026756:	4299      	cmp	r1, r3
 8026758:	d08b      	beq.n	8026672 <lv_btnmatrix_event+0x12>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 802675a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 802675c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 8026760:	1253      	asrs	r3, r2, #9
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8026762:	ea43 2322 	orr.w	r3, r3, r2, asr #8
 8026766:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 802676a:	ea43 03e2 	orr.w	r3, r3, r2, asr #3
 802676e:	f013 0f01 	tst.w	r3, #1
 8026772:	f47f af7e 	bne.w	8026672 <lv_btnmatrix_event+0x12>
                uint32_t b = btnm->btn_id_sel;
 8026776:	9100      	str	r1, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8026778:	466a      	mov	r2, sp
 802677a:	211c      	movs	r1, #28
 802677c:	4620      	mov	r0, r4
 802677e:	f7dd fe21 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 8026782:	e776      	b.n	8026672 <lv_btnmatrix_event+0x12>
            lv_indev_get_point(param, &p);
 8026784:	a901      	add	r1, sp, #4
 8026786:	4628      	mov	r0, r5
 8026788:	f7de fa3f 	bl	8004c0a <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 802678c:	a901      	add	r1, sp, #4
 802678e:	4620      	mov	r0, r4
 8026790:	f7ff f9e2 	bl	8025b58 <get_button_from_point>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 8026794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026798:	4298      	cmp	r0, r3
 802679a:	d0d9      	beq.n	8026750 <lv_btnmatrix_event+0xf0>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 802679c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 802679e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
 80267a2:	1153      	asrs	r3, r2, #5
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80267a4:	ea43 03e2 	orr.w	r3, r3, r2, asr #3
 80267a8:	f013 0f01 	tst.w	r3, #1
 80267ac:	d1d0      	bne.n	8026750 <lv_btnmatrix_event+0xf0>
                    btnm->btn_id_sel = btn_pr;
 80267ae:	86a0      	strh	r0, [r4, #52]	; 0x34
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 80267b0:	4601      	mov	r1, r0
 80267b2:	4620      	mov	r0, r4
 80267b4:	f7ff faa0 	bl	8025cf8 <invalidate_button_area>
 80267b8:	e7ca      	b.n	8026750 <lv_btnmatrix_event+0xf0>
        void * param = lv_event_get_param(e);
 80267ba:	4630      	mov	r0, r6
 80267bc:	f7dd fe2c 	bl	8004418 <lv_event_get_param>
 80267c0:	4606      	mov	r6, r0
        lv_indev_t * indev = lv_indev_get_act();
 80267c2:	f7de f9a5 	bl	8004b10 <lv_indev_get_act>
 80267c6:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80267c8:	f7de f9a8 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 80267cc:	2804      	cmp	r0, #4
 80267ce:	f43f af50 	beq.w	8026672 <lv_btnmatrix_event+0x12>
 80267d2:	2802      	cmp	r0, #2
 80267d4:	f43f af4d 	beq.w	8026672 <lv_btnmatrix_event+0x12>
        lv_indev_get_point(indev, &p);
 80267d8:	a901      	add	r1, sp, #4
 80267da:	4628      	mov	r0, r5
 80267dc:	f7de fa15 	bl	8004c0a <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 80267e0:	a901      	add	r1, sp, #4
 80267e2:	4620      	mov	r0, r4
 80267e4:	f7ff f9b8 	bl	8025b58 <get_button_from_point>
 80267e8:	4605      	mov	r5, r0
        if(btn_pr != btnm->btn_id_sel) {
 80267ea:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80267ec:	4281      	cmp	r1, r0
 80267ee:	f43f af40 	beq.w	8026672 <lv_btnmatrix_event+0x12>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80267f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80267f6:	4299      	cmp	r1, r3
 80267f8:	d12b      	bne.n	8026852 <lv_btnmatrix_event+0x1f2>
            btnm->btn_id_sel = btn_pr;
 80267fa:	86a5      	strh	r5, [r4, #52]	; 0x34
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 80267fc:	4630      	mov	r0, r6
 80267fe:	f7de f9f7 	bl	8004bf0 <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 8026802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026806:	429d      	cmp	r5, r3
 8026808:	f43f af33 	beq.w	8026672 <lv_btnmatrix_event+0x12>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 802680c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 802680e:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026812:	10d3      	asrs	r3, r2, #3
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8026814:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 8026818:	f013 0f01 	tst.w	r3, #1
 802681c:	f47f af29 	bne.w	8026672 <lv_btnmatrix_event+0x12>
                invalidate_button_area(obj, btn_pr);
 8026820:	4629      	mov	r1, r5
 8026822:	4620      	mov	r0, r4
 8026824:	f7ff fa68 	bl	8025cf8 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8026828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 802682a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 802682e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8026832:	f47f af1e 	bne.w	8026672 <lv_btnmatrix_event+0x12>
                   button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 8026836:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
 8026838:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 802683c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8026840:	f47f af17 	bne.w	8026672 <lv_btnmatrix_event+0x12>
                    uint32_t b = btn_pr;
 8026844:	9500      	str	r5, [sp, #0]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8026846:	466a      	mov	r2, sp
 8026848:	211c      	movs	r1, #28
 802684a:	4620      	mov	r0, r4
 802684c:	f7dd fdba 	bl	80043c4 <lv_event_send>
                    if(res != LV_RES_OK) return;
 8026850:	e70f      	b.n	8026672 <lv_btnmatrix_event+0x12>
                invalidate_button_area(obj, btnm->btn_id_sel);
 8026852:	4620      	mov	r0, r4
 8026854:	f7ff fa50 	bl	8025cf8 <invalidate_button_area>
 8026858:	e7cf      	b.n	80267fa <lv_btnmatrix_event+0x19a>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 802685a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 802685c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026860:	4293      	cmp	r3, r2
 8026862:	d02d      	beq.n	80268c0 <lv_btnmatrix_event+0x260>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 8026864:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8026866:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 802686a:	f012 0f40 	tst.w	r2, #64	; 0x40
 802686e:	d017      	beq.n	80268a0 <lv_btnmatrix_event+0x240>
 8026870:	f012 0f20 	tst.w	r2, #32
 8026874:	d114      	bne.n	80268a0 <lv_btnmatrix_event+0x240>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 8026876:	f012 0f80 	tst.w	r2, #128	; 0x80
 802687a:	d008      	beq.n	802688e <lv_btnmatrix_event+0x22e>
 802687c:	f890 0036 	ldrb.w	r0, [r0, #54]	; 0x36
 8026880:	f010 0f01 	tst.w	r0, #1
 8026884:	d103      	bne.n	802688e <lv_btnmatrix_event+0x22e>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 8026886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802688a:	b292      	uxth	r2, r2
 802688c:	e001      	b.n	8026892 <lv_btnmatrix_event+0x232>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 802688e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8026892:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 8026896:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 802689a:	f013 0f01 	tst.w	r3, #1
 802689e:	d114      	bne.n	80268ca <lv_btnmatrix_event+0x26a>
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 80268a0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80268a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
 80268a4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80268a8:	121a      	asrs	r2, r3, #8
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 80268aa:	ea42 2263 	orr.w	r2, r2, r3, asr #9
 80268ae:	f012 0f01 	tst.w	r2, #1
 80268b2:	d005      	beq.n	80268c0 <lv_btnmatrix_event+0x260>
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 80268b4:	10da      	asrs	r2, r3, #3
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80268b6:	ea42 1363 	orr.w	r3, r2, r3, asr #5
 80268ba:	f013 0f01 	tst.w	r3, #1
 80268be:	d009      	beq.n	80268d4 <lv_btnmatrix_event+0x274>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80268c0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80268c2:	4620      	mov	r0, r4
 80268c4:	f7ff fa18 	bl	8025cf8 <invalidate_button_area>
 80268c8:	e6d3      	b.n	8026672 <lv_btnmatrix_event+0x12>
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 80268ca:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80268cc:	4620      	mov	r0, r4
 80268ce:	f7ff feb3 	bl	8026638 <make_one_button_checked>
 80268d2:	e7e5      	b.n	80268a0 <lv_btnmatrix_event+0x240>
                uint32_t b = btnm->btn_id_sel;
 80268d4:	9100      	str	r1, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 80268d6:	466a      	mov	r2, sp
 80268d8:	211c      	movs	r1, #28
 80268da:	4620      	mov	r0, r4
 80268dc:	f7dd fd72 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return;
 80268e0:	2801      	cmp	r0, #1
 80268e2:	f47f aec6 	bne.w	8026672 <lv_btnmatrix_event+0x12>
 80268e6:	e7eb      	b.n	80268c0 <lv_btnmatrix_event+0x260>
    else if(code == LV_EVENT_PRESS_LOST) {
 80268e8:	2d03      	cmp	r5, #3
 80268ea:	d106      	bne.n	80268fa <lv_btnmatrix_event+0x29a>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80268ec:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80268ee:	f7ff fa03 	bl	8025cf8 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 80268f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80268f6:	86a3      	strh	r3, [r4, #52]	; 0x34
 80268f8:	e6bb      	b.n	8026672 <lv_btnmatrix_event+0x12>
    else if(code == LV_EVENT_FOCUSED) {
 80268fa:	2d0e      	cmp	r5, #14
 80268fc:	d150      	bne.n	80269a0 <lv_btnmatrix_event+0x340>
        lv_indev_t * indev = lv_event_get_param(e);
 80268fe:	4630      	mov	r0, r6
 8026900:	f7dd fd8a 	bl	8004418 <lv_event_get_param>
 8026904:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8026906:	f7de f909 	bl	8004b1c <lv_indev_get_type>
 802690a:	4606      	mov	r6, r0
        if(indev == NULL) {
 802690c:	b1dd      	cbz	r5, 8026946 <lv_btnmatrix_event+0x2e6>
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 802690e:	4620      	mov	r0, r4
 8026910:	f7e0 fbd5 	bl	80070be <lv_obj_get_group>
 8026914:	f7de f81a 	bl	800494c <lv_group_get_editing>
        if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8026918:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 802691a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802691e:	429a      	cmp	r2, r3
 8026920:	f47f aea7 	bne.w	8026672 <lv_btnmatrix_event+0x12>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 8026924:	2e02      	cmp	r6, #2
 8026926:	d005      	beq.n	8026934 <lv_btnmatrix_event+0x2d4>
 8026928:	2e04      	cmp	r6, #4
 802692a:	f47f aea2 	bne.w	8026672 <lv_btnmatrix_event+0x12>
 802692e:	2800      	cmp	r0, #0
 8026930:	f43f ae9f 	beq.w	8026672 <lv_btnmatrix_event+0x12>
                if(btnm->one_check) {
 8026934:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8026938:	f013 0f01 	tst.w	r3, #1
 802693c:	d00e      	beq.n	802695c <lv_btnmatrix_event+0x2fc>
 802693e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8026940:	3802      	subs	r0, #2
                uint32_t b = 0;
 8026942:	2100      	movs	r1, #0
 8026944:	e01f      	b.n	8026986 <lv_btnmatrix_event+0x326>
            indev = lv_indev_get_next(NULL);
 8026946:	2000      	movs	r0, #0
 8026948:	f7fa f922 	bl	8020b90 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 802694c:	f7de f8e6 	bl	8004b1c <lv_indev_get_type>
 8026950:	4606      	mov	r6, r0
 8026952:	e7dc      	b.n	802690e <lv_btnmatrix_event+0x2ae>
 8026954:	08033624 	.word	0x08033624
 8026958:	0802d52c 	.word	0x0802d52c
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 802695c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 802695e:	8803      	ldrh	r3, [r0, #0]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026960:	1159      	asrs	r1, r3, #5
 8026962:	ea41 01e3 	orr.w	r1, r1, r3, asr #3
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 8026966:	f011 0101 	ands.w	r1, r1, #1
                uint32_t b = 0;
 802696a:	bf18      	it	ne
 802696c:	2100      	movne	r1, #0
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 802696e:	d015      	beq.n	802699c <lv_btnmatrix_event+0x33c>
 8026970:	3101      	adds	r1, #1
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026972:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8026976:	10d3      	asrs	r3, r2, #3
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 8026978:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 802697c:	f013 0f01 	tst.w	r3, #1
 8026980:	d1f6      	bne.n	8026970 <lv_btnmatrix_event+0x310>
 8026982:	e00b      	b.n	802699c <lv_btnmatrix_event+0x33c>
                          button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 8026984:	3101      	adds	r1, #1
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 8026986:	f830 2f02 	ldrh.w	r2, [r0, #2]!
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 802698a:	10d3      	asrs	r3, r2, #3
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 802698c:	ea43 1362 	orr.w	r3, r3, r2, asr #5
 8026990:	f013 0f01 	tst.w	r3, #1
 8026994:	d1f6      	bne.n	8026984 <lv_btnmatrix_event+0x324>
 8026996:	f012 0f80 	tst.w	r2, #128	; 0x80
 802699a:	d0f3      	beq.n	8026984 <lv_btnmatrix_event+0x324>
                btnm->btn_id_sel = b;
 802699c:	86a1      	strh	r1, [r4, #52]	; 0x34
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 802699e:	e668      	b.n	8026672 <lv_btnmatrix_event+0x12>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 80269a0:	f1a5 030f 	sub.w	r3, r5, #15
 80269a4:	b2db      	uxtb	r3, r3
 80269a6:	2b01      	cmp	r3, #1
 80269a8:	d80b      	bhi.n	80269c2 <lv_btnmatrix_event+0x362>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 80269aa:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80269ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80269b0:	4299      	cmp	r1, r3
 80269b2:	d103      	bne.n	80269bc <lv_btnmatrix_event+0x35c>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 80269b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80269b8:	86a3      	strh	r3, [r4, #52]	; 0x34
 80269ba:	e65a      	b.n	8026672 <lv_btnmatrix_event+0x12>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 80269bc:	f7ff f99c 	bl	8025cf8 <invalidate_button_area>
 80269c0:	e7f8      	b.n	80269b4 <lv_btnmatrix_event+0x354>
    else if(code == LV_EVENT_KEY) {
 80269c2:	2d0d      	cmp	r5, #13
 80269c4:	f040 810f 	bne.w	8026be6 <lv_btnmatrix_event+0x586>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80269c8:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80269ca:	f7ff f995 	bl	8025cf8 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 80269ce:	4630      	mov	r0, r6
 80269d0:	f7dd fd22 	bl	8004418 <lv_event_get_param>
 80269d4:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 80269d6:	2b13      	cmp	r3, #19
 80269d8:	d027      	beq.n	8026a2a <lv_btnmatrix_event+0x3ca>
        else if(c == LV_KEY_LEFT) {
 80269da:	2b14      	cmp	r3, #20
 80269dc:	d04a      	beq.n	8026a74 <lv_btnmatrix_event+0x414>
        else if(c == LV_KEY_DOWN) {
 80269de:	2b12      	cmp	r3, #18
 80269e0:	d070      	beq.n	8026ac4 <lv_btnmatrix_event+0x464>
        else if(c == LV_KEY_UP) {
 80269e2:	2b11      	cmp	r3, #17
 80269e4:	d141      	bne.n	8026a6a <lv_btnmatrix_event+0x40a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80269e6:	2215      	movs	r2, #21
 80269e8:	2100      	movs	r1, #0
 80269ea:	4620      	mov	r0, r4
 80269ec:	f7e4 fa5e 	bl	800aeac <lv_obj_get_style_prop>
 80269f0:	4605      	mov	r5, r0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 80269f2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80269f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80269f8:	4293      	cmp	r3, r2
 80269fa:	f000 80bd 	beq.w	8026b78 <lv_btnmatrix_event+0x518>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 80269fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026a00:	eb00 06c3 	add.w	r6, r0, r3, lsl #3
 8026a04:	f830 1033 	ldrh.w	r1, [r0, r3, lsl #3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8026a08:	88b2      	ldrh	r2, [r6, #4]
 8026a0a:	3201      	adds	r2, #1
 8026a0c:	1a52      	subs	r2, r2, r1
 8026a0e:	f342 024e 	sbfx	r2, r2, #1, #15
 8026a12:	440a      	add	r2, r1
                lv_coord_t pr_center =
 8026a14:	b211      	sxth	r1, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8026a16:	b21b      	sxth	r3, r3
 8026a18:	2b00      	cmp	r3, #0
 8026a1a:	db26      	blt.n	8026a6a <lv_btnmatrix_event+0x40a>
    return (lv_coord_t)v.num;
 8026a1c:	b22d      	sxth	r5, r5
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8026a1e:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
 8026a22:	1c87      	adds	r7, r0, #2
                       pr_center <= btnm->button_areas[area_above].x2 &&
 8026a24:	f100 0e04 	add.w	lr, r0, #4
 8026a28:	e0c1      	b.n	8026bae <lv_btnmatrix_event+0x54e>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8026a2a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8026a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026a30:	4293      	cmp	r3, r2
            else btnm->btn_id_sel++;
 8026a32:	bf1a      	itte	ne
 8026a34:	3301      	addne	r3, #1
 8026a36:	b29b      	uxthne	r3, r3
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8026a38:	2300      	moveq	r3, #0
 8026a3a:	86a3      	strh	r3, [r4, #52]	; 0x34
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026a3c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8026a3e:	429d      	cmp	r5, r3
 8026a40:	bf9c      	itt	ls
 8026a42:	2300      	movls	r3, #0
 8026a44:	86a3      	strhls	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026a46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026a48:	2600      	movs	r6, #0
 8026a4a:	e005      	b.n	8026a58 <lv_btnmatrix_event+0x3f8>
                btnm->btn_id_sel++;
 8026a4c:	3301      	adds	r3, #1
 8026a4e:	b29b      	uxth	r3, r3
 8026a50:	86a3      	strh	r3, [r4, #52]	; 0x34
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026a52:	429d      	cmp	r5, r3
 8026a54:	bf98      	it	ls
 8026a56:	86a6      	strhls	r6, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026a58:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026a5a:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8026a5e:	10ca      	asrs	r2, r1, #3
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026a60:	ea42 1261 	orr.w	r2, r2, r1, asr #5
 8026a64:	f012 0f01 	tst.w	r2, #1
 8026a68:	d1f0      	bne.n	8026a4c <lv_btnmatrix_event+0x3ec>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8026a6a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8026a6c:	4620      	mov	r0, r4
 8026a6e:	f7ff f943 	bl	8025cf8 <invalidate_button_area>
 8026a72:	e5fe      	b.n	8026672 <lv_btnmatrix_event+0x12>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 8026a74:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8026a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026a7a:	4293      	cmp	r3, r2
 8026a7c:	d003      	beq.n	8026a86 <lv_btnmatrix_event+0x426>
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 8026a7e:	b113      	cbz	r3, 8026a86 <lv_btnmatrix_event+0x426>
            else if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 8026a80:	3b01      	subs	r3, #1
 8026a82:	b29b      	uxth	r3, r3
 8026a84:	e002      	b.n	8026a8c <lv_btnmatrix_event+0x42c>
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 8026a86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8026a88:	3b01      	subs	r3, #1
 8026a8a:	b29b      	uxth	r3, r3
 8026a8c:	86a3      	strh	r3, [r4, #52]	; 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026a8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026a90:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026a94:	114a      	asrs	r2, r1, #5
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026a96:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
 8026a9a:	f012 0f01 	tst.w	r2, #1
 8026a9e:	d10c      	bne.n	8026aba <lv_btnmatrix_event+0x45a>
 8026aa0:	e7e3      	b.n	8026a6a <lv_btnmatrix_event+0x40a>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 8026aa2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8026aa4:	3b01      	subs	r3, #1
 8026aa6:	b29b      	uxth	r3, r3
 8026aa8:	86a3      	strh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026aaa:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8026aae:	10ca      	asrs	r2, r1, #3
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026ab0:	ea42 1261 	orr.w	r2, r2, r1, asr #5
 8026ab4:	f012 0f01 	tst.w	r2, #1
 8026ab8:	d0d7      	beq.n	8026a6a <lv_btnmatrix_event+0x40a>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 8026aba:	2b00      	cmp	r3, #0
 8026abc:	d0f1      	beq.n	8026aa2 <lv_btnmatrix_event+0x442>
 8026abe:	3b01      	subs	r3, #1
 8026ac0:	b29b      	uxth	r3, r3
 8026ac2:	e7f1      	b.n	8026aa8 <lv_btnmatrix_event+0x448>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8026ac4:	2215      	movs	r2, #21
 8026ac6:	2100      	movs	r1, #0
 8026ac8:	4620      	mov	r0, r4
 8026aca:	f7e4 f9ef 	bl	800aeac <lv_obj_get_style_prop>
 8026ace:	4606      	mov	r6, r0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8026ad0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8026ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026ad6:	4299      	cmp	r1, r3
 8026ad8:	d017      	beq.n	8026b0a <lv_btnmatrix_event+0x4aa>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8026ada:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8026adc:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8026ae0:	f837 2031 	ldrh.w	r2, [r7, r1, lsl #3]
 8026ae4:	8883      	ldrh	r3, [r0, #4]
 8026ae6:	3301      	adds	r3, #1
 8026ae8:	1a9b      	subs	r3, r3, r2
 8026aea:	f343 034e 	sbfx	r3, r3, #1, #15
 8026aee:	441a      	add	r2, r3
                lv_coord_t pr_center =
 8026af0:	b212      	sxth	r2, r2
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8026af2:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8026af4:	428d      	cmp	r5, r1
 8026af6:	d9b8      	bls.n	8026a6a <lv_btnmatrix_event+0x40a>
    return (lv_coord_t)v.num;
 8026af8:	b236      	sxth	r6, r6
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 8026afa:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8026afe:	004b      	lsls	r3, r1, #1
 8026b00:	f107 0c02 	add.w	ip, r7, #2
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 8026b04:	f107 0804 	add.w	r8, r7, #4
 8026b08:	e01a      	b.n	8026b40 <lv_btnmatrix_event+0x4e0>
                btnm->btn_id_sel = 0;
 8026b0a:	2300      	movs	r3, #0
 8026b0c:	86a3      	strh	r3, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026b10:	461d      	mov	r5, r3
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b12:	e006      	b.n	8026b22 <lv_btnmatrix_event+0x4c2>
                    btnm->btn_id_sel++;
 8026b14:	3301      	adds	r3, #1
 8026b16:	b29b      	uxth	r3, r3
 8026b18:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026b1a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8026b1c:	429a      	cmp	r2, r3
 8026b1e:	bf98      	it	ls
 8026b20:	86a5      	strhls	r5, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b22:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026b24:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026b28:	114a      	asrs	r2, r1, #5
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b2a:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
 8026b2e:	f012 0f01 	tst.w	r2, #1
 8026b32:	d1ef      	bne.n	8026b14 <lv_btnmatrix_event+0x4b4>
 8026b34:	e799      	b.n	8026a6a <lv_btnmatrix_event+0x40a>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8026b36:	3101      	adds	r1, #1
 8026b38:	b289      	uxth	r1, r1
 8026b3a:	3302      	adds	r3, #2
 8026b3c:	428d      	cmp	r5, r1
 8026b3e:	d994      	bls.n	8026a6a <lv_btnmatrix_event+0x40a>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 8026b40:	f93c 0023 	ldrsh.w	r0, [ip, r3, lsl #2]
 8026b44:	4570      	cmp	r0, lr
 8026b46:	ddf6      	ble.n	8026b36 <lv_btnmatrix_event+0x4d6>
 8026b48:	f937 0023 	ldrsh.w	r0, [r7, r3, lsl #2]
 8026b4c:	4290      	cmp	r0, r2
 8026b4e:	dcf2      	bgt.n	8026b36 <lv_btnmatrix_event+0x4d6>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 8026b50:	f938 0023 	ldrsh.w	r0, [r8, r3, lsl #2]
 8026b54:	4430      	add	r0, r6
                       pr_center >= btnm->button_areas[area_below].x1 &&
 8026b56:	4282      	cmp	r2, r0
 8026b58:	dced      	bgt.n	8026b36 <lv_btnmatrix_event+0x4d6>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 8026b5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026b5c:	f830 9003 	ldrh.w	r9, [r0, r3]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026b60:	ea4f 00e9 	mov.w	r0, r9, asr #3
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 8026b64:	ea40 1069 	orr.w	r0, r0, r9, asr #5
 8026b68:	f010 0f01 	tst.w	r0, #1
 8026b6c:	d1e3      	bne.n	8026b36 <lv_btnmatrix_event+0x4d6>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 8026b6e:	42a9      	cmp	r1, r5
 8026b70:	f4bf af7b 	bcs.w	8026a6a <lv_btnmatrix_event+0x40a>
 8026b74:	86a1      	strh	r1, [r4, #52]	; 0x34
 8026b76:	e778      	b.n	8026a6a <lv_btnmatrix_event+0x40a>
                btnm->btn_id_sel = 0;
 8026b78:	2300      	movs	r3, #0
 8026b7a:	86a3      	strh	r3, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026b7e:	461d      	mov	r5, r3
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b80:	e006      	b.n	8026b90 <lv_btnmatrix_event+0x530>
                    btnm->btn_id_sel++;
 8026b82:	3301      	adds	r3, #1
 8026b84:	b29b      	uxth	r3, r3
 8026b86:	86a3      	strh	r3, [r4, #52]	; 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8026b88:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8026b8a:	429a      	cmp	r2, r3
 8026b8c:	bf98      	it	ls
 8026b8e:	86a5      	strhls	r5, [r4, #52]	; 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026b92:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026b96:	114a      	asrs	r2, r1, #5
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8026b98:	ea42 02e1 	orr.w	r2, r2, r1, asr #3
 8026b9c:	f012 0f01 	tst.w	r2, #1
 8026ba0:	d1ef      	bne.n	8026b82 <lv_btnmatrix_event+0x522>
 8026ba2:	e762      	b.n	8026a6a <lv_btnmatrix_event+0x40a>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8026ba4:	3b01      	subs	r3, #1
 8026ba6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8026baa:	f47f af5e 	bne.w	8026a6a <lv_btnmatrix_event+0x40a>
 8026bae:	b21e      	sxth	r6, r3
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8026bb0:	f937 2033 	ldrsh.w	r2, [r7, r3, lsl #3]
 8026bb4:	4562      	cmp	r2, ip
 8026bb6:	daf5      	bge.n	8026ba4 <lv_btnmatrix_event+0x544>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8026bb8:	f930 2033 	ldrsh.w	r2, [r0, r3, lsl #3]
 8026bbc:	1b52      	subs	r2, r2, r5
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8026bbe:	4291      	cmp	r1, r2
 8026bc0:	dbf0      	blt.n	8026ba4 <lv_btnmatrix_event+0x544>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8026bc2:	f93e 2033 	ldrsh.w	r2, [lr, r3, lsl #3]
 8026bc6:	428a      	cmp	r2, r1
 8026bc8:	dbec      	blt.n	8026ba4 <lv_btnmatrix_event+0x544>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8026bca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
 8026bcc:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
 8026bd0:	ea4f 02e8 	mov.w	r2, r8, asr #3
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8026bd4:	ea42 1268 	orr.w	r2, r2, r8, asr #5
 8026bd8:	f012 0f01 	tst.w	r2, #1
 8026bdc:	d1e2      	bne.n	8026ba4 <lv_btnmatrix_event+0x544>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 8026bde:	2e00      	cmp	r6, #0
 8026be0:	bfa8      	it	ge
 8026be2:	86a3      	strhge	r3, [r4, #52]	; 0x34
 8026be4:	e741      	b.n	8026a6a <lv_btnmatrix_event+0x40a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8026be6:	2d15      	cmp	r5, #21
 8026be8:	f47f ad43 	bne.w	8026672 <lv_btnmatrix_event+0x12>
        draw_main(e);
 8026bec:	4630      	mov	r0, r6
 8026bee:	f7ff f8ff 	bl	8025df0 <draw_main>
 8026bf2:	e53e      	b.n	8026672 <lv_btnmatrix_event+0x12>
            lv_coord_t s = btnm->row_cnt > 0 ? lv_obj_get_content_height(obj) / btnm->row_cnt : 0;
 8026bf4:	4620      	mov	r0, r4
 8026bf6:	f7e1 fb03 	bl	8008200 <lv_obj_get_content_height>
 8026bfa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8026bfc:	fb90 f1f1 	sdiv	r1, r0, r1
            lv_event_set_ext_draw_size(e, s);
 8026c00:	b209      	sxth	r1, r1
 8026c02:	4630      	mov	r0, r6
 8026c04:	f7dd fc7c 	bl	8004500 <lv_event_set_ext_draw_size>
 8026c08:	e533      	b.n	8026672 <lv_btnmatrix_event+0x12>
 8026c0a:	bf00      	nop

08026c0c <lv_btnmatrix_set_one_checked>:
{
 8026c0c:	b508      	push	{r3, lr}
    btnm->one_check     = en;
 8026c0e:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8026c12:	f361 0200 	bfi	r2, r1, #0, #1
 8026c16:	f880 2036 	strb.w	r2, [r0, #54]	; 0x36
    make_one_button_checked(obj, 0);
 8026c1a:	2100      	movs	r1, #0
 8026c1c:	f7ff fd0c 	bl	8026638 <make_one_button_checked>
}
 8026c20:	bd08      	pop	{r3, pc}
	...

08026c24 <lv_checkbox_event>:
    }
    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_checkbox_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8026c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c28:	b0b9      	sub	sp, #228	; 0xe4
 8026c2a:	460d      	mov	r5, r1
    LV_UNUSED(class_p);

    lv_res_t res;
    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8026c2c:	48bb      	ldr	r0, [pc, #748]	; (8026f1c <lv_checkbox_event+0x2f8>)
 8026c2e:	f7dd facc 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8026c32:	2801      	cmp	r0, #1
 8026c34:	d002      	beq.n	8026c3c <lv_checkbox_event+0x18>
        *s = LV_MAX(*s, m);
    }
    else if(code == LV_EVENT_DRAW_MAIN) {
        lv_checkbox_draw(e);
    }
}
 8026c36:	b039      	add	sp, #228	; 0xe4
 8026c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8026c3c:	4628      	mov	r0, r5
 8026c3e:	f7dd fbe7 	bl	8004410 <lv_event_get_code>
 8026c42:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8026c44:	4628      	mov	r0, r5
 8026c46:	f7dd fbdf 	bl	8004408 <lv_event_get_target>
 8026c4a:	4606      	mov	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8026c4c:	2c2c      	cmp	r4, #44	; 0x2c
 8026c4e:	f000 80fa 	beq.w	8026e46 <lv_checkbox_event+0x222>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8026c52:	2c13      	cmp	r4, #19
 8026c54:	f000 8151 	beq.w	8026efa <lv_checkbox_event+0x2d6>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8026c58:	2c15      	cmp	r4, #21
 8026c5a:	d1ec      	bne.n	8026c36 <lv_checkbox_event+0x12>

static void lv_checkbox_draw(lv_event_t * e)
{
    lv_obj_t * obj = lv_event_get_target(e);
 8026c5c:	4628      	mov	r0, r5
 8026c5e:	f7dd fbd3 	bl	8004408 <lv_event_get_target>
 8026c62:	4604      	mov	r4, r0
    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8026c64:	4628      	mov	r0, r5
 8026c66:	f7dd fc43 	bl	80044f0 <lv_event_get_draw_ctx>
 8026c6a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026c6c:	2257      	movs	r2, #87	; 0x57
 8026c6e:	2100      	movs	r1, #0
 8026c70:	4620      	mov	r0, r4
 8026c72:	f7e4 f91b 	bl	800aeac <lv_obj_get_style_prop>
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8026c76:	9005      	str	r0, [sp, #20]
 8026c78:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8026c7c:	9104      	str	r1, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8026c7e:	2232      	movs	r2, #50	; 0x32
 8026c80:	2100      	movs	r1, #0
 8026c82:	4620      	mov	r0, r4
 8026c84:	f7e4 f912 	bl	800aeac <lv_obj_get_style_prop>
 8026c88:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8026c8a:	2210      	movs	r2, #16
 8026c8c:	2100      	movs	r1, #0
 8026c8e:	4620      	mov	r0, r4
 8026c90:	f7e4 f90c 	bl	800aeac <lv_obj_get_style_prop>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
    lv_coord_t font_h = lv_font_get_line_height(font);

    lv_coord_t bg_border = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 8026c94:	b2ad      	uxth	r5, r5
 8026c96:	182f      	adds	r7, r5, r0
 8026c98:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8026c9a:	2212      	movs	r2, #18
 8026c9c:	2100      	movs	r1, #0
 8026c9e:	4620      	mov	r0, r4
 8026ca0:	f7e4 f904 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 8026ca4:	4405      	add	r5, r0
 8026ca6:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8026ca8:	2215      	movs	r2, #21
 8026caa:	2100      	movs	r1, #0
 8026cac:	4620      	mov	r0, r4
 8026cae:	f7e4 f8fd 	bl	800aeac <lv_obj_get_style_prop>
 8026cb2:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8026cb4:	2212      	movs	r2, #18
 8026cb6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026cba:	4620      	mov	r0, r4
 8026cbc:	f7e4 f8f6 	bl	800aeac <lv_obj_get_style_prop>
 8026cc0:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8026cc2:	2213      	movs	r2, #19
 8026cc4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026cc8:	4620      	mov	r0, r4
 8026cca:	f7e4 f8ef 	bl	800aeac <lv_obj_get_style_prop>
 8026cce:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8026cd0:	2210      	movs	r2, #16
 8026cd2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026cd6:	4620      	mov	r0, r4
 8026cd8:	f7e4 f8e8 	bl	800aeac <lv_obj_get_style_prop>
 8026cdc:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026cde:	2211      	movs	r2, #17
 8026ce0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026ce4:	4620      	mov	r0, r4
 8026ce6:	f7e4 f8e1 	bl	800aeac <lv_obj_get_style_prop>
 8026cea:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8026cec:	2268      	movs	r2, #104	; 0x68
 8026cee:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026cf2:	4620      	mov	r0, r4
 8026cf4:	f7e4 f8da 	bl	800aeac <lv_obj_get_style_prop>
 8026cf8:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8026cfa:	2269      	movs	r2, #105	; 0x69
 8026cfc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026d00:	4620      	mov	r0, r4
 8026d02:	f7e4 f8d3 	bl	800aeac <lv_obj_get_style_prop>
 8026d06:	9009      	str	r0, [sp, #36]	; 0x24

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 8026d08:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8026d0c:	4650      	mov	r0, sl
 8026d0e:	f7e8 fd8d 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 8026d12:	4652      	mov	r2, sl
 8026d14:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026d18:	4620      	mov	r0, r4
 8026d1a:	f7e0 fd01 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 8026d1e:	8aa3      	ldrh	r3, [r4, #20]
 8026d20:	441d      	add	r5, r3
 8026d22:	b2ab      	uxth	r3, r5
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 8026d24:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8026d28:	eb08 050b 	add.w	r5, r8, fp
 8026d2c:	3d01      	subs	r5, #1
 8026d2e:	4415      	add	r5, r2
 8026d30:	441d      	add	r5, r3
 8026d32:	b2ad      	uxth	r5, r5
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8026d34:	8ae1      	ldrh	r1, [r4, #22]
 8026d36:	4439      	add	r1, r7
 8026d38:	b289      	uxth	r1, r1
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;
 8026d3a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8026d3e:	44b4      	add	ip, r6
 8026d40:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8026d44:	4416      	add	r6, r2
 8026d46:	b2b6      	uxth	r6, r6

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 8026d48:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8026d4c:	1a1b      	subs	r3, r3, r0
 8026d4e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    marker_area_transf.x2 += transf_w;
 8026d52:	4428      	add	r0, r5
 8026d54:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    marker_area_transf.y1 -= transf_h;
 8026d58:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8026d5c:	1a0b      	subs	r3, r1, r0
 8026d5e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    marker_area_transf.y2 += transf_h;
 8026d62:	4430      	add	r0, r6
 8026d64:	4408      	add	r0, r1
 8026d66:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8026d6a:	4649      	mov	r1, r9
 8026d6c:	a826      	add	r0, sp, #152	; 0x98
 8026d6e:	f7e1 f812 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.rect_dsc = &indic_dsc;
 8026d72:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
    part_draw_dsc.class_p = MY_CLASS;
 8026d76:	4b69      	ldr	r3, [pc, #420]	; (8026f1c <lv_checkbox_event+0x2f8>)
 8026d78:	9327      	str	r3, [sp, #156]	; 0x9c
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 8026d7a:	f04f 0800 	mov.w	r8, #0
 8026d7e:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
    part_draw_dsc.draw_area = &marker_area_transf;
 8026d82:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8026d86:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
    part_draw_dsc.part = LV_PART_INDICATOR;
 8026d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8026d8e:	9333      	str	r3, [sp, #204]	; 0xcc

    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8026d90:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
 8026d94:	4662      	mov	r2, ip
 8026d96:	211a      	movs	r1, #26
 8026d98:	4620      	mov	r0, r4
 8026d9a:	f7dd fb13 	bl	80043c4 <lv_event_send>
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 8026d9e:	465a      	mov	r2, fp
 8026da0:	4651      	mov	r1, sl
 8026da2:	4648      	mov	r0, r9
 8026da4:	f7e8 fd9e 	bl	800f8e4 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8026da8:	f10d 0c98 	add.w	ip, sp, #152	; 0x98
 8026dac:	4662      	mov	r2, ip
 8026dae:	211b      	movs	r1, #27
 8026db0:	4620      	mov	r0, r4
 8026db2:	f7dd fb07 	bl	80043c4 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026db6:	2259      	movs	r2, #89	; 0x59
 8026db8:	4641      	mov	r1, r8
 8026dba:	4620      	mov	r0, r4
 8026dbc:	f7e4 f876 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8026dc0:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026dc4:	2258      	movs	r2, #88	; 0x58
 8026dc6:	4641      	mov	r1, r8
 8026dc8:	4620      	mov	r0, r4
 8026dca:	f7e4 f86f 	bl	800aeac <lv_obj_get_style_prop>

    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

    lv_point_t txt_size;
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8026dce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8026dd0:	f8cd 8008 	str.w	r8, [sp, #8]
 8026dd4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8026dd8:	9301      	str	r3, [sp, #4]
 8026dda:	f8cd a000 	str.w	sl, [sp]
 8026dde:	b203      	sxth	r3, r0
 8026de0:	9a05      	ldr	r2, [sp, #20]
 8026de2:	a80b      	add	r0, sp, #44	; 0x2c
 8026de4:	f7fd fbdd 	bl	80245a2 <lv_txt_get_size>

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
 8026de8:	ab10      	add	r3, sp, #64	; 0x40
 8026dea:	4618      	mov	r0, r3
 8026dec:	f7e6 ff62 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 8026df0:	ab10      	add	r3, sp, #64	; 0x40
 8026df2:	461a      	mov	r2, r3
 8026df4:	4641      	mov	r1, r8
 8026df6:	4620      	mov	r0, r4
 8026df8:	f7e0 fe07 	bl	8007a0a <lv_obj_init_draw_label_dsc>

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 8026dfc:	9b06      	ldr	r3, [sp, #24]
 8026dfe:	441d      	add	r5, r3
 8026e00:	b2ad      	uxth	r5, r5
 8026e02:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8026e06:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8026e0a:	441d      	add	r5, r3
 8026e0c:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8026e10:	1c73      	adds	r3, r6, #1
    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 8026e12:	b21b      	sxth	r3, r3
 8026e14:	9a04      	ldr	r2, [sp, #16]
 8026e16:	1a9b      	subs	r3, r3, r2
 8026e18:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8026e1c:	eb07 0363 	add.w	r3, r7, r3, asr #1
 8026e20:	8ae7      	ldrh	r7, [r4, #22]
 8026e22:	443b      	add	r3, r7
 8026e24:	b29b      	uxth	r3, r3
 8026e26:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    txt_area.y2 = txt_area.y1 + txt_size.y;
 8026e2a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8026e2e:	4413      	add	r3, r2
 8026e30:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e

    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 8026e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026e36:	f8cd 8000 	str.w	r8, [sp]
 8026e3a:	aa0e      	add	r2, sp, #56	; 0x38
 8026e3c:	a910      	add	r1, sp, #64	; 0x40
 8026e3e:	4648      	mov	r0, r9
 8026e40:	f7e6 ff6c 	bl	800dd1c <lv_draw_label>
}
 8026e44:	e6f7      	b.n	8026c36 <lv_checkbox_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 8026e46:	4628      	mov	r0, r5
 8026e48:	f7dd fae6 	bl	8004418 <lv_event_get_param>
 8026e4c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026e4e:	2257      	movs	r2, #87	; 0x57
 8026e50:	2100      	movs	r1, #0
 8026e52:	4630      	mov	r0, r6
 8026e54:	f7e4 f82a 	bl	800aeac <lv_obj_get_style_prop>
 8026e58:	4604      	mov	r4, r0
 8026e5a:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026e5e:	2259      	movs	r2, #89	; 0x59
 8026e60:	2100      	movs	r1, #0
 8026e62:	4630      	mov	r0, r6
 8026e64:	f7e4 f822 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8026e68:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8026e6a:	2258      	movs	r2, #88	; 0x58
 8026e6c:	2100      	movs	r1, #0
 8026e6e:	4630      	mov	r0, r6
 8026e70:	f7e4 f81c 	bl	800aeac <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8026e74:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8026e76:	f04f 0800 	mov.w	r8, #0
 8026e7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8026e7e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8026e82:	9301      	str	r3, [sp, #4]
 8026e84:	9700      	str	r7, [sp, #0]
 8026e86:	b203      	sxth	r3, r0
 8026e88:	4622      	mov	r2, r4
 8026e8a:	a826      	add	r0, sp, #152	; 0x98
 8026e8c:	f7fd fb89 	bl	80245a2 <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8026e90:	2215      	movs	r2, #21
 8026e92:	4641      	mov	r1, r8
 8026e94:	4630      	mov	r0, r6
 8026e96:	f7e4 f809 	bl	800aeac <lv_obj_get_style_prop>
 8026e9a:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8026e9c:	2212      	movs	r2, #18
 8026e9e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026ea2:	4630      	mov	r0, r6
 8026ea4:	f7e4 f802 	bl	800aeac <lv_obj_get_style_prop>
 8026ea8:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8026eaa:	2213      	movs	r2, #19
 8026eac:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026eb0:	4630      	mov	r0, r6
 8026eb2:	f7e3 fffb 	bl	800aeac <lv_obj_get_style_prop>
 8026eb6:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8026eb8:	2210      	movs	r2, #16
 8026eba:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026ebe:	4630      	mov	r0, r6
 8026ec0:	f7e3 fff4 	bl	800aeac <lv_obj_get_style_prop>
 8026ec4:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8026ec6:	2211      	movs	r2, #17
 8026ec8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026ecc:	4630      	mov	r0, r6
 8026ece:	f7e3 ffed 	bl	800aeac <lv_obj_get_style_prop>
        marker_size.x = font_h + marker_leftp + marker_rightp;
 8026ed2:	fa1f f389 	uxth.w	r3, r9
        p->x = marker_size.x + txt_size.x + bg_colp;
 8026ed6:	eb04 020a 	add.w	r2, r4, sl
 8026eda:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8026ede:	4422      	add	r2, r4
 8026ee0:	4442      	add	r2, r8
 8026ee2:	441a      	add	r2, r3
 8026ee4:	802a      	strh	r2, [r5, #0]
        marker_size.y = font_h + marker_topp + marker_bottomp;
 8026ee6:	4407      	add	r7, r0
 8026ee8:	443b      	add	r3, r7
        p->y = LV_MAX(marker_size.y, txt_size.y);
 8026eea:	b21b      	sxth	r3, r3
 8026eec:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
 8026ef0:	4293      	cmp	r3, r2
 8026ef2:	bfb8      	it	lt
 8026ef4:	4613      	movlt	r3, r2
 8026ef6:	806b      	strh	r3, [r5, #2]
 8026ef8:	e69d      	b.n	8026c36 <lv_checkbox_event+0x12>
        lv_coord_t * s = lv_event_get_param(e);
 8026efa:	4628      	mov	r0, r5
 8026efc:	f7dd fa8c 	bl	8004418 <lv_event_get_param>
 8026f00:	4604      	mov	r4, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8026f02:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8026f06:	4630      	mov	r0, r6
 8026f08:	f7e0 fedb 	bl	8007cc2 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 8026f0c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8026f10:	4283      	cmp	r3, r0
 8026f12:	bfb8      	it	lt
 8026f14:	4603      	movlt	r3, r0
 8026f16:	8023      	strh	r3, [r4, #0]
 8026f18:	e68d      	b.n	8026c36 <lv_checkbox_event+0x12>
 8026f1a:	bf00      	nop
 8026f1c:	0803364c 	.word	0x0803364c

08026f20 <lv_checkbox_destructor>:
    if(!cb->static_txt) {
 8026f20:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8026f24:	f013 0f01 	tst.w	r3, #1
 8026f28:	d000      	beq.n	8026f2c <lv_checkbox_destructor+0xc>
 8026f2a:	4770      	bx	lr
{
 8026f2c:	b510      	push	{r4, lr}
 8026f2e:	460c      	mov	r4, r1
        lv_mem_free(cb->txt);
 8026f30:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8026f32:	f7fb f819 	bl	8021f68 <lv_mem_free>
        cb->txt = NULL;
 8026f36:	2300      	movs	r3, #0
 8026f38:	6263      	str	r3, [r4, #36]	; 0x24
}
 8026f3a:	bd10      	pop	{r4, pc}

08026f3c <lv_checkbox_constructor>:
{
 8026f3c:	b510      	push	{r4, lr}
 8026f3e:	460c      	mov	r4, r1
    cb->txt = "Check box";
 8026f40:	4b0a      	ldr	r3, [pc, #40]	; (8026f6c <lv_checkbox_constructor+0x30>)
 8026f42:	624b      	str	r3, [r1, #36]	; 0x24
    cb->static_txt = 1;
 8026f44:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8026f48:	f043 0301 	orr.w	r3, r3, #1
 8026f4c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8026f50:	2102      	movs	r1, #2
 8026f52:	4620      	mov	r0, r4
 8026f54:	f7e0 f80e 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8026f58:	2108      	movs	r1, #8
 8026f5a:	4620      	mov	r0, r4
 8026f5c:	f7e0 f80a 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8026f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026f64:	4620      	mov	r0, r4
 8026f66:	f7e0 f805 	bl	8006f74 <lv_obj_add_flag>
}
 8026f6a:	bd10      	pop	{r4, pc}
 8026f6c:	08033640 	.word	0x08033640

08026f70 <lv_dropdownlist_destructor>:

static void lv_dropdownlist_destructor(const lv_obj_class_t * class_p, lv_obj_t * list_obj)
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
 8026f70:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 8026f72:	2200      	movs	r2, #0
 8026f74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8026f76:	4770      	bx	lr

08026f78 <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 8026f78:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026f7a:	b120      	cbz	r0, 8026f86 <get_label+0xe>
{
 8026f7c:	b508      	push	{r3, lr}

    return lv_obj_get_child(dropdown->list, 0);
 8026f7e:	2100      	movs	r1, #0
 8026f80:	f7e4 feda 	bl	800bd38 <lv_obj_get_child>
}
 8026f84:	bd08      	pop	{r3, pc}
 8026f86:	4770      	bx	lr

08026f88 <position_to_selected>:
{
 8026f88:	b570      	push	{r4, r5, r6, lr}
 8026f8a:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 8026f8c:	f7ff fff4 	bl	8026f78 <get_label>
    if(label == NULL) return;
 8026f90:	b140      	cbz	r0, 8026fa4 <position_to_selected+0x1c>
 8026f92:	4606      	mov	r6, r0
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 8026f94:	f7e1 f911 	bl	80081ba <lv_obj_get_height>
 8026f98:	4605      	mov	r5, r0
 8026f9a:	4620      	mov	r0, r4
 8026f9c:	f7e1 f930 	bl	8008200 <lv_obj_get_content_height>
 8026fa0:	4285      	cmp	r5, r0
 8026fa2:	dc00      	bgt.n	8026fa6 <position_to_selected+0x1e>
}
 8026fa4:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026fa6:	2257      	movs	r2, #87	; 0x57
 8026fa8:	2100      	movs	r1, #0
 8026faa:	4630      	mov	r0, r6
 8026fac:	f7e3 ff7e 	bl	800aeac <lv_obj_get_style_prop>
 8026fb0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026fb4:	2259      	movs	r2, #89	; 0x59
 8026fb6:	2100      	movs	r1, #0
 8026fb8:	4630      	mov	r0, r6
 8026fba:	f7e3 ff77 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t unit_h = font_h + line_space;
 8026fbe:	4405      	add	r5, r0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 8026fc0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8026fc2:	fb05 f101 	mul.w	r1, r5, r1
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 8026fc6:	2200      	movs	r2, #0
 8026fc8:	b209      	sxth	r1, r1
 8026fca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026fcc:	f7e2 ffc2 	bl	8009f54 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 8026fd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026fd2:	f7e1 fb33 	bl	800863c <lv_obj_invalidate>
 8026fd6:	e7e5      	b.n	8026fa4 <position_to_selected+0x1c>

08026fd8 <get_id_on_point>:
{
 8026fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026fdc:	4606      	mov	r6, r0
 8026fde:	460c      	mov	r4, r1
    lv_obj_t * label = get_label(dropdown_obj);
 8026fe0:	f7ff ffca 	bl	8026f78 <get_label>
    if(label == NULL) return 0;
 8026fe4:	b310      	cbz	r0, 802702c <get_id_on_point+0x54>
 8026fe6:	4607      	mov	r7, r0
    y -= label->coords.y1;
 8026fe8:	f8b0 8016 	ldrh.w	r8, [r0, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8026fec:	2257      	movs	r2, #87	; 0x57
 8026fee:	2100      	movs	r1, #0
 8026ff0:	f7e3 ff5c 	bl	800aeac <lv_obj_get_style_prop>
 8026ff4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8026ff8:	2259      	movs	r2, #89	; 0x59
 8026ffa:	2100      	movs	r1, #0
 8026ffc:	4638      	mov	r0, r7
 8026ffe:	f7e3 ff55 	bl	800aeac <lv_obj_get_style_prop>
    y += line_space / 2;
 8027002:	b203      	sxth	r3, r0
 8027004:	f3c0 31c0 	ubfx	r1, r0, #15, #1
 8027008:	4419      	add	r1, r3
 802700a:	eb04 0461 	add.w	r4, r4, r1, asr #1
 802700e:	eba4 0408 	sub.w	r4, r4, r8
    uint16_t opt = y / h;
 8027012:	b224      	sxth	r4, r4
    lv_coord_t h = font_h + line_space;
 8027014:	4428      	add	r0, r5
    uint16_t opt = y / h;
 8027016:	b200      	sxth	r0, r0
 8027018:	fb94 f4f0 	sdiv	r4, r4, r0
 802701c:	b2a0      	uxth	r0, r4
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 802701e:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 8027020:	4283      	cmp	r3, r0
 8027022:	d801      	bhi.n	8027028 <get_id_on_point+0x50>
 8027024:	1e58      	subs	r0, r3, #1
 8027026:	b280      	uxth	r0, r0
}
 8027028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(label == NULL) return 0;
 802702c:	2000      	movs	r0, #0
 802702e:	e7fb      	b.n	8027028 <get_id_on_point+0x50>

08027030 <lv_dropdown_destructor>:
{
 8027030:	b510      	push	{r4, lr}
 8027032:	460c      	mov	r4, r1
    if(dropdown->list) {
 8027034:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8027036:	b118      	cbz	r0, 8027040 <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 8027038:	f7e4 ff4a 	bl	800bed0 <lv_obj_del>
        dropdown->list = NULL;
 802703c:	2300      	movs	r3, #0
 802703e:	6263      	str	r3, [r4, #36]	; 0x24
    if(!dropdown->static_txt) {
 8027040:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8027044:	f013 0f10 	tst.w	r3, #16
 8027048:	d000      	beq.n	802704c <lv_dropdown_destructor+0x1c>
}
 802704a:	bd10      	pop	{r4, pc}
        lv_mem_free(dropdown->options);
 802704c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802704e:	f7fa ff8b 	bl	8021f68 <lv_mem_free>
        dropdown->options = NULL;
 8027052:	2300      	movs	r3, #0
 8027054:	6323      	str	r3, [r4, #48]	; 0x30
}
 8027056:	e7f8      	b.n	802704a <lv_dropdown_destructor+0x1a>

08027058 <draw_box>:
{
 8027058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802705c:	b091      	sub	sp, #68	; 0x44
 802705e:	4614      	mov	r4, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 8027060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027064:	4294      	cmp	r4, r2
 8027066:	d051      	beq.n	802710c <draw_box+0xb4>
 8027068:	4607      	mov	r7, r0
 802706a:	4688      	mov	r8, r1
    lv_obj_t * list_obj = dropdown->list;
 802706c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_state_t state_ori = list_obj->state;
 802706e:	f8b5 9020 	ldrh.w	r9, [r5, #32]
    if(state != list_obj->state) {
 8027072:	4599      	cmp	r9, r3
 8027074:	d006      	beq.n	8027084 <draw_box+0x2c>
        list_obj->state = state;
 8027076:	842b      	strh	r3, [r5, #32]
        list_obj->skip_trans = 1;
 8027078:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 802707c:	f043 0304 	orr.w	r3, r3, #4
 8027080:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027084:	2257      	movs	r2, #87	; 0x57
 8027086:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802708a:	4628      	mov	r0, r5
 802708c:	f7e3 ff0e 	bl	800aeac <lv_obj_get_style_prop>
 8027090:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8027092:	2259      	movs	r2, #89	; 0x59
 8027094:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8027098:	4628      	mov	r0, r5
 802709a:	f7e3 ff07 	bl	800aeac <lv_obj_get_style_prop>
 802709e:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 80270a0:	fa0f fb80 	sxth.w	fp, r0
 80270a4:	f9ba a008 	ldrsh.w	sl, [sl, #8]
    lv_obj_t * label = get_label(dropdown_obj);
 80270a8:	4638      	mov	r0, r7
 80270aa:	f7ff ff65 	bl	8026f78 <get_label>
    rect_area.y1 += id * (font_h + line_space);
 80270ae:	eb0a 020b 	add.w	r2, sl, fp
 80270b2:	fb02 f404 	mul.w	r4, r2, r4
    rect_area.y1 -= line_space / 2;
 80270b6:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 80270ba:	eba4 046b 	sub.w	r4, r4, fp, asr #1
 80270be:	8ac3      	ldrh	r3, [r0, #22]
 80270c0:	441c      	add	r4, r3
 80270c2:	b2a4      	uxth	r4, r4
 80270c4:	f8ad 403a 	strh.w	r4, [sp, #58]	; 0x3a
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 80270c8:	3e01      	subs	r6, #1
 80270ca:	44b2      	add	sl, r6
 80270cc:	4454      	add	r4, sl
 80270ce:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    rect_area.x1 = dropdown->list->coords.x1;
 80270d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80270d4:	8a9a      	ldrh	r2, [r3, #20]
 80270d6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
    rect_area.x2 = dropdown->list->coords.x2;
 80270da:	8b1b      	ldrh	r3, [r3, #24]
 80270dc:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    lv_draw_rect_dsc_init(&sel_rect);
 80270e0:	4668      	mov	r0, sp
 80270e2:	f7e8 fba3 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 80270e6:	466a      	mov	r2, sp
 80270e8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80270ec:	4628      	mov	r0, r5
 80270ee:	f7e0 fb17 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 80270f2:	aa0e      	add	r2, sp, #56	; 0x38
 80270f4:	4669      	mov	r1, sp
 80270f6:	4640      	mov	r0, r8
 80270f8:	f7e8 fbf4 	bl	800f8e4 <lv_draw_rect>
    list_obj->state = state_ori;
 80270fc:	f8a5 9020 	strh.w	r9, [r5, #32]
    list_obj->skip_trans = 0;
 8027100:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8027104:	f36f 0382 	bfc	r3, #2, #1
 8027108:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 802710c:	b011      	add	sp, #68	; 0x44
 802710e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027112 <draw_box_label>:
{
 8027112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027116:	b08e      	sub	sp, #56	; 0x38
 8027118:	4614      	mov	r4, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 802711a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802711e:	4294      	cmp	r4, r2
 8027120:	d04b      	beq.n	80271ba <draw_box_label+0xa8>
 8027122:	4680      	mov	r8, r0
 8027124:	460e      	mov	r6, r1
    lv_obj_t * list_obj = dropdown->list;
 8027126:	6a45      	ldr	r5, [r0, #36]	; 0x24
    lv_state_t state_orig = list_obj->state;
 8027128:	8c2f      	ldrh	r7, [r5, #32]
    if(state != list_obj->state) {
 802712a:	429f      	cmp	r7, r3
 802712c:	d006      	beq.n	802713c <draw_box_label+0x2a>
        list_obj->state = state;
 802712e:	842b      	strh	r3, [r5, #32]
        list_obj->skip_trans = 1;
 8027130:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8027134:	f043 0304 	orr.w	r3, r3, #4
 8027138:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    lv_draw_label_dsc_init(&label_dsc);
 802713c:	a806      	add	r0, sp, #24
 802713e:	f7e6 fdb9 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 8027142:	aa06      	add	r2, sp, #24
 8027144:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8027148:	4628      	mov	r0, r5
 802714a:	f7e0 fc5e 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802714e:	2259      	movs	r2, #89	; 0x59
 8027150:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8027154:	4628      	mov	r0, r5
 8027156:	f7e3 fea9 	bl	800aeac <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 802715a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 802715e:	4640      	mov	r0, r8
 8027160:	f7ff ff0a 	bl	8026f78 <get_label>
    if(label == NULL) return;
 8027164:	4680      	mov	r8, r0
 8027166:	b340      	cbz	r0, 80271ba <draw_box_label+0xa8>
 8027168:	9b06      	ldr	r3, [sp, #24]
 802716a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 802716e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8027172:	18ca      	adds	r2, r1, r3
 8027174:	fb02 f404 	mul.w	r4, r2, r4
    area_sel.y1 -= label_dsc.line_space / 2;
 8027178:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 802717c:	eba4 0462 	sub.w	r4, r4, r2, asr #1
 8027180:	8ac2      	ldrh	r2, [r0, #22]
 8027182:	4414      	add	r4, r2
 8027184:	b2a4      	uxth	r4, r4
 8027186:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 802718a:	3b01      	subs	r3, #1
 802718c:	440b      	add	r3, r1
 802718e:	441c      	add	r4, r3
 8027190:	f8ad 4016 	strh.w	r4, [sp, #22]
    area_sel.x1 = list_obj->coords.x1;
 8027194:	8aab      	ldrh	r3, [r5, #20]
 8027196:	f8ad 3010 	strh.w	r3, [sp, #16]
    area_sel.x2 = list_obj->coords.x2;
 802719a:	8b2b      	ldrh	r3, [r5, #24]
 802719c:	f8ad 3014 	strh.w	r3, [sp, #20]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 80271a0:	aa04      	add	r2, sp, #16
 80271a2:	68b1      	ldr	r1, [r6, #8]
 80271a4:	a802      	add	r0, sp, #8
 80271a6:	f7f9 ffac 	bl	8021102 <_lv_area_intersect>
    if(area_ok) {
 80271aa:	b948      	cbnz	r0, 80271c0 <draw_box_label+0xae>
    list_obj->state = state_orig;
 80271ac:	842f      	strh	r7, [r5, #32]
    list_obj->skip_trans = 0;
 80271ae:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80271b2:	f36f 0382 	bfc	r3, #2, #1
 80271b6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 80271ba:	b00e      	add	sp, #56	; 0x38
 80271bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80271c0:	68b4      	ldr	r4, [r6, #8]
        draw_ctx->clip_area = &mask_sel;
 80271c2:	ab02      	add	r3, sp, #8
 80271c4:	60b3      	str	r3, [r6, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 80271c6:	4640      	mov	r0, r8
 80271c8:	f001 fa28 	bl	802861c <lv_label_get_text>
 80271cc:	4603      	mov	r3, r0
 80271ce:	2200      	movs	r2, #0
 80271d0:	9200      	str	r2, [sp, #0]
 80271d2:	f108 0214 	add.w	r2, r8, #20
 80271d6:	a906      	add	r1, sp, #24
 80271d8:	4630      	mov	r0, r6
 80271da:	f7e6 fd9f 	bl	800dd1c <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 80271de:	60b4      	str	r4, [r6, #8]
 80271e0:	e7e4      	b.n	80271ac <draw_box_label+0x9a>

080271e2 <lv_dropdownlist_constructor>:
{
 80271e2:	b510      	push	{r4, lr}
 80271e4:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80271e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80271ea:	4620      	mov	r0, r4
 80271ec:	f7df fefc 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 80271f0:	2104      	movs	r1, #4
 80271f2:	4620      	mov	r0, r4
 80271f4:	f7df fef8 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 80271f8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80271fc:	4620      	mov	r0, r4
 80271fe:	f7df feb9 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8027202:	2101      	movs	r1, #1
 8027204:	4620      	mov	r0, r4
 8027206:	f7df feb5 	bl	8006f74 <lv_obj_add_flag>
    lv_label_create(obj);
 802720a:	4620      	mov	r0, r4
 802720c:	f001 f9f0 	bl	80285f0 <lv_label_create>
}
 8027210:	bd10      	pop	{r4, pc}

08027212 <lv_dropdown_set_options_static>:
    LV_ASSERT_NULL(options);
 8027212:	b141      	cbz	r1, 8027226 <lv_dropdown_set_options_static+0x14>
{
 8027214:	b538      	push	{r3, r4, r5, lr}
 8027216:	4604      	mov	r4, r0
 8027218:	460d      	mov	r5, r1
    dropdown->option_cnt = 0;
 802721a:	2300      	movs	r3, #0
 802721c:	8683      	strh	r3, [r0, #52]	; 0x34
    for(i = 0; options[i] != '\0'; i++) {
 802721e:	780b      	ldrb	r3, [r1, #0]
 8027220:	b15b      	cbz	r3, 802723a <lv_dropdown_set_options_static+0x28>
 8027222:	460a      	mov	r2, r1
 8027224:	e003      	b.n	802722e <lv_dropdown_set_options_static+0x1c>
    LV_ASSERT_NULL(options);
 8027226:	e7fe      	b.n	8027226 <lv_dropdown_set_options_static+0x14>
    for(i = 0; options[i] != '\0'; i++) {
 8027228:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802722c:	b12b      	cbz	r3, 802723a <lv_dropdown_set_options_static+0x28>
        if(options[i] == '\n') dropdown->option_cnt++;
 802722e:	2b0a      	cmp	r3, #10
 8027230:	d1fa      	bne.n	8027228 <lv_dropdown_set_options_static+0x16>
 8027232:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8027234:	3301      	adds	r3, #1
 8027236:	86a3      	strh	r3, [r4, #52]	; 0x34
 8027238:	e7f6      	b.n	8027228 <lv_dropdown_set_options_static+0x16>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 802723a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 802723c:	3301      	adds	r3, #1
 802723e:	86a3      	strh	r3, [r4, #52]	; 0x34
    dropdown->sel_opt_id      = 0;
 8027240:	2300      	movs	r3, #0
 8027242:	86e3      	strh	r3, [r4, #54]	; 0x36
    dropdown->sel_opt_id_orig = 0;
 8027244:	8723      	strh	r3, [r4, #56]	; 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 8027246:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802724a:	f013 0f10 	tst.w	r3, #16
 802724e:	d103      	bne.n	8027258 <lv_dropdown_set_options_static+0x46>
 8027250:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8027252:	b108      	cbz	r0, 8027258 <lv_dropdown_set_options_static+0x46>
        lv_mem_free(dropdown->options);
 8027254:	f7fa fe88 	bl	8021f68 <lv_mem_free>
    dropdown->static_txt = 1;
 8027258:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802725c:	f043 0310 	orr.w	r3, r3, #16
 8027260:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    dropdown->options = (char *)options;
 8027264:	6325      	str	r5, [r4, #48]	; 0x30
    lv_obj_invalidate(obj);
 8027266:	4620      	mov	r0, r4
 8027268:	f7e1 f9e8 	bl	800863c <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 802726c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802726e:	b108      	cbz	r0, 8027274 <lv_dropdown_set_options_static+0x62>
 8027270:	f7e1 f9e4 	bl	800863c <lv_obj_invalidate>
}
 8027274:	bd38      	pop	{r3, r4, r5, pc}
	...

08027278 <lv_dropdown_constructor>:
{
 8027278:	b538      	push	{r3, r4, r5, lr}
 802727a:	460c      	mov	r4, r1
    dropdown->list          = NULL;
 802727c:	2300      	movs	r3, #0
 802727e:	624b      	str	r3, [r1, #36]	; 0x24
    dropdown->options     = NULL;
 8027280:	630b      	str	r3, [r1, #48]	; 0x30
    dropdown->symbol         = LV_SYMBOL_DOWN;
 8027282:	4a14      	ldr	r2, [pc, #80]	; (80272d4 <lv_dropdown_constructor+0x5c>)
 8027284:	62ca      	str	r2, [r1, #44]	; 0x2c
    dropdown->text         = NULL;
 8027286:	628b      	str	r3, [r1, #40]	; 0x28
    dropdown->static_txt = 1;
 8027288:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
    dropdown->sel_opt_id      = 0;
 802728c:	86cb      	strh	r3, [r1, #54]	; 0x36
    dropdown->sel_opt_id_orig = 0;
 802728e:	870b      	strh	r3, [r1, #56]	; 0x38
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8027290:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8027294:	8761      	strh	r1, [r4, #58]	; 0x3a
    dropdown->option_cnt      = 0;
 8027296:	86a3      	strh	r3, [r4, #52]	; 0x34
    dropdown->dir = LV_DIR_BOTTOM;
 8027298:	f042 0330 	orr.w	r3, r2, #48	; 0x30
 802729c:	2208      	movs	r2, #8
 802729e:	f362 0303 	bfi	r3, r2, #0, #4
 80272a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80272a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80272aa:	4620      	mov	r0, r4
 80272ac:	f7df fe62 	bl	8006f74 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 80272b0:	4909      	ldr	r1, [pc, #36]	; (80272d8 <lv_dropdown_constructor+0x60>)
 80272b2:	4620      	mov	r0, r4
 80272b4:	f7ff ffad 	bl	8027212 <lv_dropdown_set_options_static>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 80272b8:	4620      	mov	r0, r4
 80272ba:	f7e4 fd0e 	bl	800bcda <lv_obj_get_screen>
 80272be:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 80272c0:	4806      	ldr	r0, [pc, #24]	; (80272dc <lv_dropdown_constructor+0x64>)
 80272c2:	f7e0 f947 	bl	8007554 <lv_obj_class_create_obj>
 80272c6:	4605      	mov	r5, r0
    lv_obj_class_init_obj(obj);
 80272c8:	f7e0 f9f1 	bl	80076ae <lv_obj_class_init_obj>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 80272cc:	6265      	str	r5, [r4, #36]	; 0x24
    list->dropdown = obj;
 80272ce:	626c      	str	r4, [r5, #36]	; 0x24
}
 80272d0:	bd38      	pop	{r3, r4, r5, pc}
 80272d2:	bf00      	nop
 80272d4:	08033668 	.word	0x08033668
 80272d8:	0803366c 	.word	0x0803366c
 80272dc:	080336a4 	.word	0x080336a4

080272e0 <lv_dropdown_get_selected_str>:
{
 80272e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80272e4:	460e      	mov	r6, r1
    if(dropdown->options)  {
 80272e6:	6b07      	ldr	r7, [r0, #48]	; 0x30
 80272e8:	b1ff      	cbz	r7, 802732a <lv_dropdown_get_selected_str+0x4a>
 80272ea:	4604      	mov	r4, r0
 80272ec:	4615      	mov	r5, r2
        txt_len     = strlen(dropdown->options);
 80272ee:	4638      	mov	r0, r7
 80272f0:	f7d8 ffa2 	bl	8000238 <strlen>
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 80272f4:	4603      	mov	r3, r0
 80272f6:	b1a0      	cbz	r0, 8027322 <lv_dropdown_get_selected_str+0x42>
 80272f8:	f8b4 e038 	ldrh.w	lr, [r4, #56]	; 0x38
 80272fc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8027300:	eb0c 0800 	add.w	r8, ip, r0
    uint32_t line        = 0;
 8027304:	2100      	movs	r1, #0
 8027306:	f1c7 0001 	rsb	r0, r7, #1
 802730a:	eb00 020c 	add.w	r2, r0, ip
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 802730e:	458e      	cmp	lr, r1
 8027310:	d00e      	beq.n	8027330 <lv_dropdown_get_selected_str+0x50>
        if(dropdown->options[i] == '\n') line++;
 8027312:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8027316:	2a0a      	cmp	r2, #10
 8027318:	bf08      	it	eq
 802731a:	3101      	addeq	r1, #1
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 802731c:	45c4      	cmp	ip, r8
 802731e:	d1f4      	bne.n	802730a <lv_dropdown_get_selected_str+0x2a>
 8027320:	2300      	movs	r3, #0
    buf[c] = '\0';
 8027322:	2200      	movs	r2, #0
 8027324:	54f2      	strb	r2, [r6, r3]
}
 8027326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        buf[0] = '\0';
 802732a:	2300      	movs	r3, #0
 802732c:	700b      	strb	r3, [r1, #0]
        return;
 802732e:	e7fa      	b.n	8027326 <lv_dropdown_get_selected_str+0x46>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8027330:	4293      	cmp	r3, r2
 8027332:	d916      	bls.n	8027362 <lv_dropdown_get_selected_str+0x82>
 8027334:	1e71      	subs	r1, r6, #1
 8027336:	1a98      	subs	r0, r3, r2
 8027338:	2300      	movs	r3, #0
        if(buf_size && c >= buf_size - 1) {
 802733a:	1e6f      	subs	r7, r5, #1
 802733c:	e004      	b.n	8027348 <lv_dropdown_get_selected_str+0x68>
        buf[c] = dropdown->options[i];
 802733e:	f801 cf01 	strb.w	ip, [r1, #1]!
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8027342:	3301      	adds	r3, #1
 8027344:	4298      	cmp	r0, r3
 8027346:	d00e      	beq.n	8027366 <lv_dropdown_get_selected_str+0x86>
 8027348:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 802734c:	449c      	add	ip, r3
 802734e:	f81c c002 	ldrb.w	ip, [ip, r2]
 8027352:	f1bc 0f0a 	cmp.w	ip, #10
 8027356:	d0e4      	beq.n	8027322 <lv_dropdown_get_selected_str+0x42>
        if(buf_size && c >= buf_size - 1) {
 8027358:	2d00      	cmp	r5, #0
 802735a:	d0f0      	beq.n	802733e <lv_dropdown_get_selected_str+0x5e>
 802735c:	429f      	cmp	r7, r3
 802735e:	d8ee      	bhi.n	802733e <lv_dropdown_get_selected_str+0x5e>
 8027360:	e7df      	b.n	8027322 <lv_dropdown_get_selected_str+0x42>
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 8027362:	2300      	movs	r3, #0
 8027364:	e7dd      	b.n	8027322 <lv_dropdown_get_selected_str+0x42>
 8027366:	4603      	mov	r3, r0
 8027368:	e7db      	b.n	8027322 <lv_dropdown_get_selected_str+0x42>

0802736a <lv_dropdown_open>:
{
 802736a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802736e:	b082      	sub	sp, #8
 8027370:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8027372:	2101      	movs	r1, #1
 8027374:	f7df fe77 	bl	8007066 <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 8027378:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802737a:	4620      	mov	r0, r4
 802737c:	f7e4 fcad 	bl	800bcda <lv_obj_get_screen>
 8027380:	4601      	mov	r1, r0
 8027382:	4628      	mov	r0, r5
 8027384:	f7e4 fdd5 	bl	800bf32 <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 8027388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802738c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802738e:	f7e4 fe45 	bl	800c01c <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8027392:	2101      	movs	r1, #1
 8027394:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027396:	f7df fe27 	bl	8006fe8 <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 802739a:	2200      	movs	r2, #0
 802739c:	211f      	movs	r1, #31
 802739e:	4620      	mov	r0, r4
 80273a0:	f7dd f810 	bl	80043c4 <lv_event_send>
    lv_obj_t * label = get_label(dropdown_obj);
 80273a4:	4620      	mov	r0, r4
 80273a6:	f7ff fde7 	bl	8026f78 <get_label>
 80273aa:	4607      	mov	r7, r0
    lv_label_set_text_static(label, dropdown->options);
 80273ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80273ae:	f001 fe5f 	bl	8029070 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 80273b2:	f242 71d1 	movw	r1, #10193	; 0x27d1
 80273b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80273b8:	f7e0 fdfa 	bl	8007fb0 <lv_obj_set_width>
    lv_obj_update_layout(label);
 80273bc:	4638      	mov	r0, r7
 80273be:	f7e1 fff1 	bl	80093a4 <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80273c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80273c4:	f7e0 fef3 	bl	80081ae <lv_obj_get_width>
 80273c8:	4605      	mov	r5, r0
 80273ca:	4620      	mov	r0, r4
 80273cc:	f7e0 feef 	bl	80081ae <lv_obj_get_width>
 80273d0:	4285      	cmp	r5, r0
 80273d2:	dc07      	bgt.n	80273e4 <lv_dropdown_open+0x7a>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 80273d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80273d8:	f003 030f 	and.w	r3, r3, #15
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 80273dc:	2b04      	cmp	r3, #4
 80273de:	d059      	beq.n	8027494 <lv_dropdown_open+0x12a>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 80273e0:	2b08      	cmp	r3, #8
 80273e2:	d057      	beq.n	8027494 <lv_dropdown_open+0x12a>
    lv_coord_t label_h = lv_obj_get_height(label);
 80273e4:	4638      	mov	r0, r7
 80273e6:	f7e0 fee8 	bl	80081ba <lv_obj_get_height>
 80273ea:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80273ec:	2232      	movs	r2, #50	; 0x32
 80273ee:	2100      	movs	r1, #0
 80273f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80273f2:	f7e3 fd5b 	bl	800aeac <lv_obj_get_style_prop>
 80273f6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80273f8:	2210      	movs	r2, #16
 80273fa:	2100      	movs	r1, #0
 80273fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80273fe:	f7e3 fd55 	bl	800aeac <lv_obj_get_style_prop>
 8027402:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8027404:	2211      	movs	r2, #17
 8027406:	2100      	movs	r1, #0
 8027408:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802740a:	f7e3 fd4f 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t list_fit_h = label_h + top + bottom;
 802740e:	4406      	add	r6, r0
 8027410:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8027414:	4445      	add	r5, r8
 8027416:	b22d      	sxth	r5, r5
    lv_dir_t dir = dropdown->dir;
 8027418:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802741c:	f003 060f 	and.w	r6, r3, #15
    if(dropdown->dir == LV_DIR_BOTTOM) {
 8027420:	2e08      	cmp	r6, #8
 8027422:	d040      	beq.n	80274a6 <lv_dropdown_open+0x13c>
    else if(dropdown->dir == LV_DIR_TOP) {
 8027424:	2e04      	cmp	r6, #4
 8027426:	d071      	beq.n	802750c <lv_dropdown_open+0x1a2>
    lv_coord_t list_h = list_fit_h;
 8027428:	4629      	mov	r1, r5
    lv_obj_set_height(dropdown->list, list_h);
 802742a:	42a9      	cmp	r1, r5
 802742c:	bfa8      	it	ge
 802742e:	4629      	movge	r1, r5
 8027430:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027432:	f7e0 fdd4 	bl	8007fde <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 8027436:	4620      	mov	r0, r4
 8027438:	f7ff fda6 	bl	8026f88 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 802743c:	2e08      	cmp	r6, #8
 802743e:	f000 8089 	beq.w	8027554 <lv_dropdown_open+0x1ea>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 8027442:	2e04      	cmp	r6, #4
 8027444:	d051      	beq.n	80274ea <lv_dropdown_open+0x180>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8027446:	2e01      	cmp	r6, #1
 8027448:	f000 808c 	beq.w	8027564 <lv_dropdown_open+0x1fa>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 802744c:	2e02      	cmp	r6, #2
 802744e:	f000 8091 	beq.w	8027574 <lv_dropdown_open+0x20a>
    lv_obj_update_layout(dropdown->list);
 8027452:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027454:	f7e1 ffa6 	bl	80093a4 <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 8027458:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 802745c:	f003 030f 	and.w	r3, r3, #15
 8027460:	3b01      	subs	r3, #1
 8027462:	b2db      	uxtb	r3, r3
 8027464:	2b01      	cmp	r3, #1
 8027466:	f240 808d 	bls.w	8027584 <lv_dropdown_open+0x21a>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 802746a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802746c:	2100      	movs	r1, #0
 802746e:	4638      	mov	r0, r7
 8027470:	f7e4 fb9c 	bl	800bbac <lv_obj_calculate_style_text_align>
    switch(align) {
 8027474:	2802      	cmp	r0, #2
 8027476:	f000 80a2 	beq.w	80275be <lv_dropdown_open+0x254>
 802747a:	2803      	cmp	r0, #3
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 802747c:	f04f 0300 	mov.w	r3, #0
 8027480:	461a      	mov	r2, r3
 8027482:	bf14      	ite	ne
 8027484:	2101      	movne	r1, #1
            lv_obj_align(label, LV_ALIGN_TOP_RIGHT, 0, 0);
 8027486:	2103      	moveq	r1, #3
 8027488:	4638      	mov	r0, r7
 802748a:	f7e0 fe25 	bl	80080d8 <lv_obj_align>
}
 802748e:	b002      	add	sp, #8
 8027490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 8027494:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8027496:	4620      	mov	r0, r4
 8027498:	f7e0 fe89 	bl	80081ae <lv_obj_get_width>
 802749c:	4601      	mov	r1, r0
 802749e:	4628      	mov	r0, r5
 80274a0:	f7e0 fd86 	bl	8007fb0 <lv_obj_set_width>
 80274a4:	e79e      	b.n	80273e4 <lv_dropdown_open+0x7a>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 80274a6:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 80274aa:	44a8      	add	r8, r5
 80274ac:	f7f9 fae0 	bl	8020a70 <lv_disp_get_default>
 80274b0:	f7f9 faf8 	bl	8020aa4 <lv_disp_get_ver_res>
 80274b4:	4580      	cmp	r8, r0
 80274b6:	dc01      	bgt.n	80274bc <lv_dropdown_open+0x152>
    lv_coord_t list_h = list_fit_h;
 80274b8:	4629      	mov	r1, r5
 80274ba:	e7b6      	b.n	802742a <lv_dropdown_open+0xc0>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 80274bc:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80274c0:	f7f9 fad6 	bl	8020a70 <lv_disp_get_default>
 80274c4:	f7f9 faee 	bl	8020aa4 <lv_disp_get_ver_res>
 80274c8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80274cc:	1ac0      	subs	r0, r0, r3
 80274ce:	4580      	cmp	r8, r0
 80274d0:	dd13      	ble.n	80274fa <lv_dropdown_open+0x190>
                list_h = dropdown_obj->coords.y1 - 1;
 80274d2:	8ae1      	ldrh	r1, [r4, #22]
 80274d4:	3901      	subs	r1, #1
 80274d6:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 80274d8:	42a9      	cmp	r1, r5
 80274da:	bfa8      	it	ge
 80274dc:	4629      	movge	r1, r5
 80274de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80274e0:	f7e0 fd7d 	bl	8007fde <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 80274e4:	4620      	mov	r0, r4
 80274e6:	f7ff fd4f 	bl	8026f88 <position_to_selected>
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 80274ea:	2300      	movs	r3, #0
 80274ec:	9300      	str	r3, [sp, #0]
 80274ee:	220a      	movs	r2, #10
 80274f0:	4621      	mov	r1, r4
 80274f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80274f4:	f7e1 ff7a 	bl	80093ec <lv_obj_align_to>
 80274f8:	e7ab      	b.n	8027452 <lv_dropdown_open+0xe8>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 80274fa:	f7f9 fab9 	bl	8020a70 <lv_disp_get_default>
 80274fe:	f7f9 fad1 	bl	8020aa4 <lv_disp_get_ver_res>
 8027502:	8b61      	ldrh	r1, [r4, #26]
 8027504:	43c9      	mvns	r1, r1
 8027506:	4401      	add	r1, r0
 8027508:	b209      	sxth	r1, r1
 802750a:	e78e      	b.n	802742a <lv_dropdown_open+0xc0>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 802750c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8027510:	eba8 0305 	sub.w	r3, r8, r5
 8027514:	2b00      	cmp	r3, #0
 8027516:	db01      	blt.n	802751c <lv_dropdown_open+0x1b2>
    lv_coord_t list_h = list_fit_h;
 8027518:	4629      	mov	r1, r5
 802751a:	e786      	b.n	802742a <lv_dropdown_open+0xc0>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 802751c:	f7f9 faa8 	bl	8020a70 <lv_disp_get_default>
 8027520:	f7f9 fac0 	bl	8020aa4 <lv_disp_get_ver_res>
 8027524:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8027528:	1ac0      	subs	r0, r0, r3
 802752a:	4580      	cmp	r8, r0
 802752c:	db02      	blt.n	8027534 <lv_dropdown_open+0x1ca>
                list_h = dropdown_obj->coords.y1;
 802752e:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8027532:	e77a      	b.n	802742a <lv_dropdown_open+0xc0>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8027534:	f7f9 fa9c 	bl	8020a70 <lv_disp_get_default>
 8027538:	f7f9 fab4 	bl	8020aa4 <lv_disp_get_ver_res>
 802753c:	8b61      	ldrh	r1, [r4, #26]
 802753e:	1a41      	subs	r1, r0, r1
 8027540:	b209      	sxth	r1, r1
    lv_obj_set_height(dropdown->list, list_h);
 8027542:	42a9      	cmp	r1, r5
 8027544:	bfa8      	it	ge
 8027546:	4629      	movge	r1, r5
 8027548:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802754a:	f7e0 fd48 	bl	8007fde <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 802754e:	4620      	mov	r0, r4
 8027550:	f7ff fd1a 	bl	8026f88 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 8027554:	2300      	movs	r3, #0
 8027556:	9300      	str	r3, [sp, #0]
 8027558:	220d      	movs	r2, #13
 802755a:	4621      	mov	r1, r4
 802755c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802755e:	f7e1 ff45 	bl	80093ec <lv_obj_align_to>
 8027562:	e776      	b.n	8027452 <lv_dropdown_open+0xe8>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 8027564:	2300      	movs	r3, #0
 8027566:	9300      	str	r3, [sp, #0]
 8027568:	2210      	movs	r2, #16
 802756a:	4621      	mov	r1, r4
 802756c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802756e:	f7e1 ff3d 	bl	80093ec <lv_obj_align_to>
 8027572:	e76e      	b.n	8027452 <lv_dropdown_open+0xe8>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 8027574:	2300      	movs	r3, #0
 8027576:	9300      	str	r3, [sp, #0]
 8027578:	2213      	movs	r2, #19
 802757a:	4621      	mov	r1, r4
 802757c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802757e:	f7e1 ff35 	bl	80093ec <lv_obj_align_to>
 8027582:	e766      	b.n	8027452 <lv_dropdown_open+0xe8>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 8027584:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027586:	f7e0 fde4 	bl	8008152 <lv_obj_get_y>
 802758a:	4605      	mov	r5, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 802758c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802758e:	f7e0 fe03 	bl	8008198 <lv_obj_get_y2>
 8027592:	4606      	mov	r6, r0
        if(y2 >= LV_VER_RES) {
 8027594:	f7f9 fa6c 	bl	8020a70 <lv_disp_get_default>
 8027598:	f7f9 fa84 	bl	8020aa4 <lv_disp_get_ver_res>
 802759c:	42b0      	cmp	r0, r6
 802759e:	f73f af64 	bgt.w	802746a <lv_dropdown_open+0x100>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 80275a2:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 80275a6:	f7f9 fa63 	bl	8020a70 <lv_disp_get_default>
 80275aa:	f7f9 fa7b 	bl	8020aa4 <lv_disp_get_ver_res>
 80275ae:	3d01      	subs	r5, #1
 80275b0:	1ba9      	subs	r1, r5, r6
 80275b2:	4401      	add	r1, r0
 80275b4:	b209      	sxth	r1, r1
 80275b6:	4640      	mov	r0, r8
 80275b8:	f7e0 fcd9 	bl	8007f6e <lv_obj_set_y>
 80275bc:	e755      	b.n	802746a <lv_dropdown_open+0x100>
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 80275be:	2300      	movs	r3, #0
 80275c0:	461a      	mov	r2, r3
 80275c2:	2102      	movs	r1, #2
 80275c4:	4638      	mov	r0, r7
 80275c6:	f7e0 fd87 	bl	80080d8 <lv_obj_align>
}
 80275ca:	e760      	b.n	802748e <lv_dropdown_open+0x124>

080275cc <lv_dropdown_close>:
{
 80275cc:	b510      	push	{r4, lr}
 80275ce:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 80275d0:	2101      	movs	r1, #1
 80275d2:	f7df fd54 	bl	800707e <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 80275d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80275da:	8763      	strh	r3, [r4, #58]	; 0x3a
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 80275dc:	2101      	movs	r1, #1
 80275de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80275e0:	f7df fcc8 	bl	8006f74 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 80275e4:	2200      	movs	r2, #0
 80275e6:	2120      	movs	r1, #32
 80275e8:	4620      	mov	r0, r4
 80275ea:	f7dc feeb 	bl	80043c4 <lv_event_send>
}
 80275ee:	bd10      	pop	{r4, pc}

080275f0 <lv_dropdown_list_event>:
{
 80275f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80275f2:	b083      	sub	sp, #12
 80275f4:	460c      	mov	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 80275f6:	4608      	mov	r0, r1
 80275f8:	f7dc ff0a 	bl	8004410 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_POST) {
 80275fc:	2818      	cmp	r0, #24
 80275fe:	f000 8092 	beq.w	8027726 <lv_dropdown_list_event+0x136>
 8027602:	4605      	mov	r5, r0
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8027604:	4621      	mov	r1, r4
 8027606:	4865      	ldr	r0, [pc, #404]	; (802779c <lv_dropdown_list_event+0x1ac>)
 8027608:	f7dc fddf 	bl	80041ca <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 802760c:	2801      	cmp	r0, #1
 802760e:	d10a      	bne.n	8027626 <lv_dropdown_list_event+0x36>
    lv_obj_t * list = lv_event_get_target(e);
 8027610:	4620      	mov	r0, r4
 8027612:	f7dc fef9 	bl	8004408 <lv_event_get_target>
 8027616:	4604      	mov	r4, r0
    if(code == LV_EVENT_RELEASED) {
 8027618:	2d08      	cmp	r5, #8
 802761a:	d006      	beq.n	802762a <lv_dropdown_list_event+0x3a>
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 802761c:	6a46      	ldr	r6, [r0, #36]	; 0x24
    else if(code == LV_EVENT_PRESSED) {
 802761e:	2d01      	cmp	r5, #1
 8027620:	d046      	beq.n	80276b0 <lv_dropdown_list_event+0xc0>
    else if(code == LV_EVENT_SCROLL_BEGIN) {
 8027622:	2d09      	cmp	r5, #9
 8027624:	d060      	beq.n	80276e8 <lv_dropdown_list_event+0xf8>
}
 8027626:	b003      	add	sp, #12
 8027628:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 802762a:	f7dd fa71 	bl	8004b10 <lv_indev_get_act>
 802762e:	f7dd fb13 	bl	8004c58 <lv_indev_get_scroll_obj>
 8027632:	2800      	cmp	r0, #0
 8027634:	d1f7      	bne.n	8027626 <lv_dropdown_list_event+0x36>
    lv_obj_t * dropdown_obj = list->dropdown;
 8027636:	6a64      	ldr	r4, [r4, #36]	; 0x24
    lv_indev_t * indev = lv_indev_get_act();
 8027638:	f7dd fa6a 	bl	8004b10 <lv_indev_get_act>
 802763c:	4605      	mov	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 802763e:	f7dd fa6d 	bl	8004b1c <lv_indev_get_type>
 8027642:	2804      	cmp	r0, #4
 8027644:	d021      	beq.n	802768a <lv_dropdown_list_event+0x9a>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8027646:	4628      	mov	r0, r5
 8027648:	f7dd fa68 	bl	8004b1c <lv_indev_get_type>
 802764c:	2801      	cmp	r0, #1
 802764e:	d004      	beq.n	802765a <lv_dropdown_list_event+0x6a>
 8027650:	4628      	mov	r0, r5
 8027652:	f7dd fa63 	bl	8004b1c <lv_indev_get_type>
 8027656:	2803      	cmp	r0, #3
 8027658:	d10a      	bne.n	8027670 <lv_dropdown_list_event+0x80>
        lv_indev_get_point(indev, &p);
 802765a:	4669      	mov	r1, sp
 802765c:	4628      	mov	r0, r5
 802765e:	f7dd fad4 	bl	8004c0a <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 8027662:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8027666:	4620      	mov	r0, r4
 8027668:	f7ff fcb6 	bl	8026fd8 <get_id_on_point>
 802766c:	86e0      	strh	r0, [r4, #54]	; 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 802766e:	8720      	strh	r0, [r4, #56]	; 0x38
    lv_dropdown_close(dropdown_obj);
 8027670:	4620      	mov	r0, r4
 8027672:	f7ff ffab 	bl	80275cc <lv_dropdown_close>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 8027676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027678:	b1b3      	cbz	r3, 80276a8 <lv_dropdown_list_event+0xb8>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 802767a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 802767c:	9300      	str	r3, [sp, #0]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 802767e:	466a      	mov	r2, sp
 8027680:	211c      	movs	r1, #28
 8027682:	4620      	mov	r0, r4
 8027684:	f7dc fe9e 	bl	80043c4 <lv_event_send>
    if(res != LV_RES_OK) return res;
 8027688:	e7cd      	b.n	8027626 <lv_dropdown_list_event+0x36>
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 802768a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 802768c:	8723      	strh	r3, [r4, #56]	; 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 802768e:	4620      	mov	r0, r4
 8027690:	f7df fd15 	bl	80070be <lv_obj_get_group>
 8027694:	4606      	mov	r6, r0
        if(lv_group_get_editing(g)) {
 8027696:	f7dd f959 	bl	800494c <lv_group_get_editing>
 802769a:	2800      	cmp	r0, #0
 802769c:	d0d3      	beq.n	8027646 <lv_dropdown_list_event+0x56>
            lv_group_set_editing(g, false);
 802769e:	2100      	movs	r1, #0
 80276a0:	4630      	mov	r0, r6
 80276a2:	f7dd f8e6 	bl	8004872 <lv_group_set_editing>
 80276a6:	e7ce      	b.n	8027646 <lv_dropdown_list_event+0x56>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 80276a8:	4620      	mov	r0, r4
 80276aa:	f7e0 ffc7 	bl	800863c <lv_obj_invalidate>
 80276ae:	e7e4      	b.n	802767a <lv_dropdown_list_event+0x8a>
    lv_indev_t * indev = lv_indev_get_act();
 80276b0:	f7dd fa2e 	bl	8004b10 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 80276b4:	4605      	mov	r5, r0
 80276b6:	2800      	cmp	r0, #0
 80276b8:	d0b5      	beq.n	8027626 <lv_dropdown_list_event+0x36>
 80276ba:	f7dd fa2f 	bl	8004b1c <lv_indev_get_type>
 80276be:	2801      	cmp	r0, #1
 80276c0:	d004      	beq.n	80276cc <lv_dropdown_list_event+0xdc>
 80276c2:	4628      	mov	r0, r5
 80276c4:	f7dd fa2a 	bl	8004b1c <lv_indev_get_type>
 80276c8:	2803      	cmp	r0, #3
 80276ca:	d1ac      	bne.n	8027626 <lv_dropdown_list_event+0x36>
        lv_indev_get_point(indev, &p);
 80276cc:	4669      	mov	r1, sp
 80276ce:	4628      	mov	r0, r5
 80276d0:	f7dd fa9b 	bl	8004c0a <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 80276d4:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80276d8:	4630      	mov	r0, r6
 80276da:	f7ff fc7d 	bl	8026fd8 <get_id_on_point>
 80276de:	8770      	strh	r0, [r6, #58]	; 0x3a
        lv_obj_invalidate(list_obj);
 80276e0:	4620      	mov	r0, r4
 80276e2:	f7e0 ffab 	bl	800863c <lv_obj_invalidate>
 80276e6:	e79e      	b.n	8027626 <lv_dropdown_list_event+0x36>
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 80276e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80276ec:	8773      	strh	r3, [r6, #58]	; 0x3a
        lv_obj_invalidate(list);
 80276ee:	f7e0 ffa5 	bl	800863c <lv_obj_invalidate>
 80276f2:	e798      	b.n	8027626 <lv_dropdown_list_event+0x36>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 80276f4:	2321      	movs	r3, #33	; 0x21
 80276f6:	4629      	mov	r1, r5
 80276f8:	4630      	mov	r0, r6
 80276fa:	f7ff fcad 	bl	8027058 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 80276fe:	2321      	movs	r3, #33	; 0x21
 8027700:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 8027702:	4629      	mov	r1, r5
 8027704:	4630      	mov	r0, r6
 8027706:	f7ff fd04 	bl	8027112 <draw_box_label>
 802770a:	e041      	b.n	8027790 <lv_dropdown_list_event+0x1a0>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 802770c:	2320      	movs	r3, #32
 802770e:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 8027710:	4629      	mov	r1, r5
 8027712:	4630      	mov	r0, r6
 8027714:	f7ff fca0 	bl	8027058 <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8027718:	2320      	movs	r3, #32
 802771a:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 802771c:	4629      	mov	r1, r5
 802771e:	4630      	mov	r0, r6
 8027720:	f7ff fcf7 	bl	8027112 <draw_box_label>
 8027724:	e034      	b.n	8027790 <lv_dropdown_list_event+0x1a0>
    lv_obj_t * list = lv_event_get_target(e);
 8027726:	4620      	mov	r0, r4
 8027728:	f7dc fe6e 	bl	8004408 <lv_event_get_target>
    lv_obj_t * list_obj = lv_event_get_target(e);
 802772c:	4620      	mov	r0, r4
 802772e:	f7dc fe6b 	bl	8004408 <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 8027732:	6a46      	ldr	r6, [r0, #36]	; 0x24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8027734:	4620      	mov	r0, r4
 8027736:	f7dc fedb 	bl	80044f0 <lv_event_get_draw_ctx>
 802773a:	4605      	mov	r5, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 802773c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 802773e:	3214      	adds	r2, #20
 8027740:	6881      	ldr	r1, [r0, #8]
 8027742:	4668      	mov	r0, sp
 8027744:	f7f9 fcdd 	bl	8021102 <_lv_area_intersect>
    if(has_common) {
 8027748:	b318      	cbz	r0, 8027792 <lv_dropdown_list_event+0x1a2>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 802774a:	68af      	ldr	r7, [r5, #8]
        draw_ctx->clip_area = &clip_area_core;
 802774c:	f8c5 d008 	str.w	sp, [r5, #8]
        if(dropdown->selected_highlight) {
 8027750:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 8027754:	f013 0f20 	tst.w	r3, #32
 8027758:	d0d8      	beq.n	802770c <lv_dropdown_list_event+0x11c>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 802775a:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 802775c:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 802775e:	4293      	cmp	r3, r2
 8027760:	d0c8      	beq.n	80276f4 <lv_dropdown_list_event+0x104>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8027762:	2320      	movs	r3, #32
 8027764:	4629      	mov	r1, r5
 8027766:	4630      	mov	r0, r6
 8027768:	f7ff fc76 	bl	8027058 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 802776c:	2320      	movs	r3, #32
 802776e:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 8027770:	4629      	mov	r1, r5
 8027772:	4630      	mov	r0, r6
 8027774:	f7ff fccd 	bl	8027112 <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 8027778:	2301      	movs	r3, #1
 802777a:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 802777c:	4629      	mov	r1, r5
 802777e:	4630      	mov	r0, r6
 8027780:	f7ff fc6a 	bl	8027058 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 8027784:	2301      	movs	r3, #1
 8027786:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 8027788:	4629      	mov	r1, r5
 802778a:	4630      	mov	r0, r6
 802778c:	f7ff fcc1 	bl	8027112 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 8027790:	60af      	str	r7, [r5, #8]
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8027792:	4621      	mov	r1, r4
 8027794:	4801      	ldr	r0, [pc, #4]	; (802779c <lv_dropdown_list_event+0x1ac>)
 8027796:	f7dc fd18 	bl	80041ca <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 802779a:	e744      	b.n	8027626 <lv_dropdown_list_event+0x36>
 802779c:	080336a4 	.word	0x080336a4

080277a0 <lv_dropdown_is_open>:
{
 80277a0:	b508      	push	{r3, lr}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 80277a2:	2101      	movs	r1, #1
 80277a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80277a6:	f7df fc75 	bl	8007094 <lv_obj_has_flag>
 80277aa:	f080 0001 	eor.w	r0, r0, #1
}
 80277ae:	b2c0      	uxtb	r0, r0
 80277b0:	bd08      	pop	{r3, pc}

080277b2 <btn_release_handler>:
{
 80277b2:	b530      	push	{r4, r5, lr}
 80277b4:	b083      	sub	sp, #12
 80277b6:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 80277b8:	f7dd f9aa 	bl	8004b10 <lv_indev_get_act>
 80277bc:	4605      	mov	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 80277be:	f7dd fa4b 	bl	8004c58 <lv_indev_get_scroll_obj>
 80277c2:	b138      	cbz	r0, 80277d4 <btn_release_handler+0x22>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80277c4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80277c6:	86e3      	strh	r3, [r4, #54]	; 0x36
        lv_obj_invalidate(obj);
 80277c8:	4620      	mov	r0, r4
 80277ca:	f7e0 ff37 	bl	800863c <lv_obj_invalidate>
    return LV_RES_OK;
 80277ce:	2001      	movs	r0, #1
}
 80277d0:	b003      	add	sp, #12
 80277d2:	bd30      	pop	{r4, r5, pc}
        if(lv_dropdown_is_open(obj)) {
 80277d4:	4620      	mov	r0, r4
 80277d6:	f7ff ffe3 	bl	80277a0 <lv_dropdown_is_open>
 80277da:	b308      	cbz	r0, 8027820 <btn_release_handler+0x6e>
            lv_dropdown_close(obj);
 80277dc:	4620      	mov	r0, r4
 80277de:	f7ff fef5 	bl	80275cc <lv_dropdown_close>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 80277e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80277e4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80277e6:	429a      	cmp	r2, r3
 80277e8:	d00b      	beq.n	8027802 <btn_release_handler+0x50>
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 80277ea:	8723      	strh	r3, [r4, #56]	; 0x38
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 80277ec:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 80277ee:	aa01      	add	r2, sp, #4
 80277f0:	211c      	movs	r1, #28
 80277f2:	4620      	mov	r0, r4
 80277f4:	f7dc fde6 	bl	80043c4 <lv_event_send>
                if(res != LV_RES_OK) return res;
 80277f8:	2801      	cmp	r0, #1
 80277fa:	d1e9      	bne.n	80277d0 <btn_release_handler+0x1e>
                lv_obj_invalidate(obj);
 80277fc:	4620      	mov	r0, r4
 80277fe:	f7e0 ff1d 	bl	800863c <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8027802:	4628      	mov	r0, r5
 8027804:	f7dd f98a 	bl	8004b1c <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8027808:	2804      	cmp	r0, #4
 802780a:	d001      	beq.n	8027810 <btn_release_handler+0x5e>
    return LV_RES_OK;
 802780c:	2001      	movs	r0, #1
 802780e:	e7df      	b.n	80277d0 <btn_release_handler+0x1e>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 8027810:	4620      	mov	r0, r4
 8027812:	f7df fc54 	bl	80070be <lv_obj_get_group>
 8027816:	2100      	movs	r1, #0
 8027818:	f7dd f82b 	bl	8004872 <lv_group_set_editing>
    return LV_RES_OK;
 802781c:	2001      	movs	r0, #1
 802781e:	e7d7      	b.n	80277d0 <btn_release_handler+0x1e>
            lv_dropdown_open(obj);
 8027820:	4620      	mov	r0, r4
 8027822:	f7ff fda2 	bl	802736a <lv_dropdown_open>
    return LV_RES_OK;
 8027826:	2001      	movs	r0, #1
 8027828:	e7d2      	b.n	80277d0 <btn_release_handler+0x1e>
	...

0802782c <lv_dropdown_event>:
{
 802782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027830:	b09b      	sub	sp, #108	; 0x6c
 8027832:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8027834:	48c2      	ldr	r0, [pc, #776]	; (8027b40 <lv_dropdown_event+0x314>)
 8027836:	f7dc fcc8 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802783a:	2801      	cmp	r0, #1
 802783c:	d002      	beq.n	8027844 <lv_dropdown_event+0x18>
}
 802783e:	b01b      	add	sp, #108	; 0x6c
 8027840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8027844:	4628      	mov	r0, r5
 8027846:	f7dc fde3 	bl	8004410 <lv_event_get_code>
 802784a:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802784c:	4628      	mov	r0, r5
 802784e:	f7dc fddb 	bl	8004408 <lv_event_get_target>
 8027852:	4606      	mov	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 8027854:	2c0e      	cmp	r4, #14
 8027856:	f000 80fc 	beq.w	8027a52 <lv_dropdown_event+0x226>
    else if(code == LV_EVENT_DEFOCUSED || code == LV_EVENT_LEAVE) {
 802785a:	f1a4 030f 	sub.w	r3, r4, #15
 802785e:	b2db      	uxtb	r3, r3
 8027860:	2b01      	cmp	r3, #1
 8027862:	f240 810d 	bls.w	8027a80 <lv_dropdown_event+0x254>
    else if(code == LV_EVENT_RELEASED) {
 8027866:	2c08      	cmp	r4, #8
 8027868:	f000 810d 	beq.w	8027a86 <lv_dropdown_event+0x25a>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 802786c:	2c2a      	cmp	r4, #42	; 0x2a
 802786e:	f000 810d 	beq.w	8027a8c <lv_dropdown_event+0x260>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8027872:	2c29      	cmp	r4, #41	; 0x29
 8027874:	f000 810d 	beq.w	8027a92 <lv_dropdown_event+0x266>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8027878:	2c2c      	cmp	r4, #44	; 0x2c
 802787a:	f000 810d 	beq.w	8027a98 <lv_dropdown_event+0x26c>
    else if(code == LV_EVENT_KEY) {
 802787e:	2c0d      	cmp	r4, #13
 8027880:	f000 8117 	beq.w	8027ab2 <lv_dropdown_event+0x286>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8027884:	2c15      	cmp	r4, #21
 8027886:	d1da      	bne.n	802783e <lv_dropdown_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 8027888:	4628      	mov	r0, r5
 802788a:	f7dc fdbd 	bl	8004408 <lv_event_get_target>
 802788e:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8027890:	4628      	mov	r0, r5
 8027892:	f7dc fe2d 	bl	80044f0 <lv_event_get_draw_ctx>
 8027896:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8027898:	2232      	movs	r2, #50	; 0x32
 802789a:	2100      	movs	r1, #0
 802789c:	4620      	mov	r0, r4
 802789e:	f7e3 fb05 	bl	800aeac <lv_obj_get_style_prop>
 80278a2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80278a4:	2212      	movs	r2, #18
 80278a6:	2100      	movs	r1, #0
 80278a8:	4620      	mov	r0, r4
 80278aa:	f7e3 faff 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 80278ae:	b2ad      	uxth	r5, r5
 80278b0:	182e      	adds	r6, r5, r0
 80278b2:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80278b4:	2213      	movs	r2, #19
 80278b6:	2100      	movs	r1, #0
 80278b8:	4620      	mov	r0, r4
 80278ba:	f7e3 faf7 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 80278be:	182f      	adds	r7, r5, r0
 80278c0:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80278c2:	2210      	movs	r2, #16
 80278c4:	2100      	movs	r1, #0
 80278c6:	4620      	mov	r0, r4
 80278c8:	f7e3 faf0 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80278cc:	4405      	add	r5, r0
 80278ce:	b2ad      	uxth	r5, r5
    lv_draw_label_dsc_init(&symbol_dsc);
 80278d0:	a80a      	add	r0, sp, #40	; 0x28
 80278d2:	f7e6 f9ef 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 80278d6:	aa0a      	add	r2, sp, #40	; 0x28
 80278d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80278dc:	4620      	mov	r0, r4
 80278de:	f7e0 f894 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 80278e2:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 80278e6:	f1b9 0f00 	cmp.w	r9, #0
 80278ea:	f000 812b 	beq.w	8027b44 <lv_dropdown_event+0x318>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 80278ee:	f894 803c 	ldrb.w	r8, [r4, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80278f2:	2216      	movs	r2, #22
 80278f4:	2100      	movs	r1, #0
 80278f6:	4620      	mov	r0, r4
 80278f8:	f7e3 fad8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80278fc:	b2c3      	uxtb	r3, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 80278fe:	2b01      	cmp	r3, #1
 8027900:	f000 812a 	beq.w	8027b58 <lv_dropdown_event+0x32c>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 8027904:	f008 080f 	and.w	r8, r8, #15
 8027908:	f1b8 0f01 	cmp.w	r8, #1
 802790c:	bf14      	ite	ne
 802790e:	f04f 0800 	movne.w	r8, #0
 8027912:	f04f 0801 	moveq.w	r8, #1
    if(dropdown->symbol) {
 8027916:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8027918:	2800      	cmp	r0, #0
 802791a:	d056      	beq.n	80279ca <lv_dropdown_event+0x19e>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 802791c:	f7e6 f84d 	bl	800d9ba <lv_img_src_get_type>
 8027920:	9005      	str	r0, [sp, #20]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8027922:	2802      	cmp	r0, #2
 8027924:	f000 811b 	beq.w	8027b5e <lv_dropdown_event+0x332>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 8027928:	a912      	add	r1, sp, #72	; 0x48
 802792a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802792c:	f7e8 fbee 	bl	801010c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 8027930:	2801      	cmp	r0, #1
 8027932:	f000 8129 	beq.w	8027b88 <lv_dropdown_event+0x35c>
                symbol_h = -1;
 8027936:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
                symbol_w = -1;
 802793a:	46da      	mov	sl, fp
        if(symbol_to_left) {
 802793c:	f1b8 0f00 	cmp.w	r8, #0
 8027940:	f000 812a 	beq.w	8027b98 <lv_dropdown_event+0x36c>
            symbol_area.x1 = obj->coords.x1 + left;
 8027944:	8aa3      	ldrh	r3, [r4, #20]
 8027946:	4433      	add	r3, r6
 8027948:	b29b      	uxth	r3, r3
 802794a:	f8ad 3020 	strh.w	r3, [sp, #32]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 802794e:	3b01      	subs	r3, #1
 8027950:	4453      	add	r3, sl
 8027952:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8027956:	9b05      	ldr	r3, [sp, #20]
 8027958:	2b02      	cmp	r3, #2
 802795a:	f000 8128 	beq.w	8027bae <lv_dropdown_event+0x382>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 802795e:	8ae3      	ldrh	r3, [r4, #22]
 8027960:	9305      	str	r3, [sp, #20]
 8027962:	4620      	mov	r0, r4
 8027964:	f7e0 fc29 	bl	80081ba <lv_obj_get_height>
 8027968:	eba0 030b 	sub.w	r3, r0, fp
 802796c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027970:	9a05      	ldr	r2, [sp, #20]
 8027972:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8027976:	b29b      	uxth	r3, r3
 8027978:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 802797c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8027980:	4413      	add	r3, r2
 8027982:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            lv_draw_img_dsc_init(&img_dsc);
 8027986:	a812      	add	r0, sp, #72	; 0x48
 8027988:	f7e5 ffcb 	bl	800d922 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 802798c:	aa12      	add	r2, sp, #72	; 0x48
 802798e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8027992:	4620      	mov	r0, r4
 8027994:	f7e0 f890 	bl	8007ab8 <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 8027998:	eb0a 73da 	add.w	r3, sl, sl, lsr #31
 802799c:	105b      	asrs	r3, r3, #1
 802799e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
            img_dsc.pivot.y = symbol_h / 2;
 80279a2:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 80279a6:	ea4f 036b 	mov.w	r3, fp, asr #1
 80279aa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 80279ae:	226d      	movs	r2, #109	; 0x6d
 80279b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80279b4:	4620      	mov	r0, r4
 80279b6:	f7e3 fa79 	bl	800aeac <lv_obj_get_style_prop>
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 80279ba:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 80279be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80279c0:	aa08      	add	r2, sp, #32
 80279c2:	a912      	add	r1, sp, #72	; 0x48
 80279c4:	9804      	ldr	r0, [sp, #16]
 80279c6:	f7e6 f813 	bl	800d9f0 <lv_draw_img>
    lv_draw_label_dsc_init(&label_dsc);
 80279ca:	a812      	add	r0, sp, #72	; 0x48
 80279cc:	f7e6 f972 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80279d0:	aa12      	add	r2, sp, #72	; 0x48
 80279d2:	2100      	movs	r1, #0
 80279d4:	4620      	mov	r0, r4
 80279d6:	f7e0 f818 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 80279da:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 80279de:	9302      	str	r3, [sp, #8]
 80279e0:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80279e4:	9301      	str	r3, [sp, #4]
 80279e6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80279ea:	9300      	str	r3, [sp, #0]
 80279ec:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80279f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80279f2:	4649      	mov	r1, r9
 80279f4:	a807      	add	r0, sp, #28
 80279f6:	f7fc fdd4 	bl	80245a2 <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 80279fa:	8ae3      	ldrh	r3, [r4, #22]
 80279fc:	442b      	add	r3, r5
 80279fe:	b29b      	uxth	r3, r3
 8027a00:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    txt_area.y2 = txt_area.y1 + size.y;
 8027a04:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027a08:	4413      	add	r3, r2
 8027a0a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if(dropdown->symbol == NULL) {
 8027a0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8027a10:	2b00      	cmp	r3, #0
 8027a12:	f000 80de 	beq.w	8027bd2 <lv_dropdown_event+0x3a6>
        if(symbol_to_left) {
 8027a16:	f1b8 0f00 	cmp.w	r8, #0
 8027a1a:	f000 80ec 	beq.w	8027bf6 <lv_dropdown_event+0x3ca>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 8027a1e:	8b23      	ldrh	r3, [r4, #24]
 8027a20:	1bdb      	subs	r3, r3, r7
 8027a22:	b29b      	uxth	r3, r3
 8027a24:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027a28:	1a9a      	subs	r2, r3, r2
 8027a2a:	f8ad 2020 	strh.w	r2, [sp, #32]
            txt_area.x2 = txt_area.x1 + size.x;
 8027a2e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 8027a32:	2300      	movs	r3, #0
 8027a34:	9300      	str	r3, [sp, #0]
 8027a36:	464b      	mov	r3, r9
 8027a38:	aa08      	add	r2, sp, #32
 8027a3a:	a912      	add	r1, sp, #72	; 0x48
 8027a3c:	9804      	ldr	r0, [sp, #16]
 8027a3e:	f7e6 f96d 	bl	800dd1c <lv_draw_label>
    if(dropdown->text == NULL) {
 8027a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8027a44:	2b00      	cmp	r3, #0
 8027a46:	f47f aefa 	bne.w	802783e <lv_dropdown_event+0x12>
        lv_mem_buf_release((char *)opt_txt);
 8027a4a:	4648      	mov	r0, r9
 8027a4c:	f7fa fb22 	bl	8022094 <lv_mem_buf_release>
}
 8027a50:	e6f5      	b.n	802783e <lv_dropdown_event+0x12>
        lv_group_t * g             = lv_obj_get_group(obj);
 8027a52:	f7df fb34 	bl	80070be <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 8027a56:	f7dc ff79 	bl	800494c <lv_group_get_editing>
 8027a5a:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8027a5c:	f7dd f858 	bl	8004b10 <lv_indev_get_act>
 8027a60:	f7dd f85c 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8027a64:	2804      	cmp	r0, #4
 8027a66:	f47f aeea 	bne.w	802783e <lv_dropdown_event+0x12>
            if(editing) {
 8027a6a:	b11c      	cbz	r4, 8027a74 <lv_dropdown_event+0x248>
                lv_dropdown_open(obj);
 8027a6c:	4630      	mov	r0, r6
 8027a6e:	f7ff fc7c 	bl	802736a <lv_dropdown_open>
 8027a72:	e6e4      	b.n	802783e <lv_dropdown_event+0x12>
                dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8027a74:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8027a76:	86f3      	strh	r3, [r6, #54]	; 0x36
                lv_dropdown_close(obj);
 8027a78:	4630      	mov	r0, r6
 8027a7a:	f7ff fda7 	bl	80275cc <lv_dropdown_close>
 8027a7e:	e6de      	b.n	802783e <lv_dropdown_event+0x12>
        lv_dropdown_close(obj);
 8027a80:	f7ff fda4 	bl	80275cc <lv_dropdown_close>
 8027a84:	e6db      	b.n	802783e <lv_dropdown_event+0x12>
        res = btn_release_handler(obj);
 8027a86:	f7ff fe94 	bl	80277b2 <btn_release_handler>
        if(res != LV_RES_OK) return;
 8027a8a:	e6d8      	b.n	802783e <lv_dropdown_event+0x12>
        lv_obj_refresh_self_size(obj);
 8027a8c:	f7e0 fc2c 	bl	80082e8 <lv_obj_refresh_self_size>
 8027a90:	e6d5      	b.n	802783e <lv_dropdown_event+0x12>
        lv_obj_refresh_self_size(obj);
 8027a92:	f7e0 fc29 	bl	80082e8 <lv_obj_refresh_self_size>
 8027a96:	e6d2      	b.n	802783e <lv_dropdown_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 8027a98:	4628      	mov	r0, r5
 8027a9a:	f7dc fcbd 	bl	8004418 <lv_event_get_param>
 8027a9e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8027aa0:	2257      	movs	r2, #87	; 0x57
 8027aa2:	2100      	movs	r1, #0
 8027aa4:	4630      	mov	r0, r6
 8027aa6:	f7e3 fa01 	bl	800aeac <lv_obj_get_style_prop>
 8027aaa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
        p->y = lv_font_get_line_height(font);
 8027aae:	8063      	strh	r3, [r4, #2]
 8027ab0:	e6c5      	b.n	802783e <lv_dropdown_event+0x12>
        char c = *((char *)lv_event_get_param(e));
 8027ab2:	4628      	mov	r0, r5
 8027ab4:	f7dc fcb0 	bl	8004418 <lv_event_get_param>
 8027ab8:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8027aba:	f1a3 0212 	sub.w	r2, r3, #18
 8027abe:	b2d2      	uxtb	r2, r2
 8027ac0:	2a01      	cmp	r2, #1
 8027ac2:	d911      	bls.n	8027ae8 <lv_dropdown_event+0x2bc>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 8027ac4:	2b14      	cmp	r3, #20
 8027ac6:	d022      	beq.n	8027b0e <lv_dropdown_event+0x2e2>
 8027ac8:	2b11      	cmp	r3, #17
 8027aca:	d020      	beq.n	8027b0e <lv_dropdown_event+0x2e2>
        else if(c == LV_KEY_ESC) {
 8027acc:	2b1b      	cmp	r3, #27
 8027ace:	d030      	beq.n	8027b32 <lv_dropdown_event+0x306>
        else if(c == LV_KEY_ENTER) {
 8027ad0:	2b0a      	cmp	r3, #10
 8027ad2:	f47f aeb4 	bne.w	802783e <lv_dropdown_event+0x12>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 8027ad6:	f7dd f8e3 	bl	8004ca0 <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 8027ada:	4286      	cmp	r6, r0
 8027adc:	f43f aeaf 	beq.w	802783e <lv_dropdown_event+0x12>
                res = btn_release_handler(obj);
 8027ae0:	4630      	mov	r0, r6
 8027ae2:	f7ff fe66 	bl	80277b2 <btn_release_handler>
                if(res != LV_RES_OK) return;
 8027ae6:	e6aa      	b.n	802783e <lv_dropdown_event+0x12>
            if(!lv_dropdown_is_open(obj)) {
 8027ae8:	4630      	mov	r0, r6
 8027aea:	f7ff fe59 	bl	80277a0 <lv_dropdown_is_open>
 8027aee:	b150      	cbz	r0, 8027b06 <lv_dropdown_event+0x2da>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 8027af0:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 8027af2:	1c59      	adds	r1, r3, #1
 8027af4:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 8027af6:	4291      	cmp	r1, r2
 8027af8:	f6bf aea1 	bge.w	802783e <lv_dropdown_event+0x12>
                dropdown->sel_opt_id++;
 8027afc:	86f1      	strh	r1, [r6, #54]	; 0x36
                position_to_selected(obj);
 8027afe:	4630      	mov	r0, r6
 8027b00:	f7ff fa42 	bl	8026f88 <position_to_selected>
 8027b04:	e69b      	b.n	802783e <lv_dropdown_event+0x12>
                lv_dropdown_open(obj);
 8027b06:	4630      	mov	r0, r6
 8027b08:	f7ff fc2f 	bl	802736a <lv_dropdown_open>
 8027b0c:	e697      	b.n	802783e <lv_dropdown_event+0x12>
            if(!lv_dropdown_is_open(obj)) {
 8027b0e:	4630      	mov	r0, r6
 8027b10:	f7ff fe46 	bl	80277a0 <lv_dropdown_is_open>
 8027b14:	b148      	cbz	r0, 8027b2a <lv_dropdown_event+0x2fe>
            else if(dropdown->sel_opt_id > 0) {
 8027b16:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 8027b18:	2b00      	cmp	r3, #0
 8027b1a:	f43f ae90 	beq.w	802783e <lv_dropdown_event+0x12>
                dropdown->sel_opt_id--;
 8027b1e:	3b01      	subs	r3, #1
 8027b20:	86f3      	strh	r3, [r6, #54]	; 0x36
                position_to_selected(obj);
 8027b22:	4630      	mov	r0, r6
 8027b24:	f7ff fa30 	bl	8026f88 <position_to_selected>
 8027b28:	e689      	b.n	802783e <lv_dropdown_event+0x12>
                lv_dropdown_open(obj);
 8027b2a:	4630      	mov	r0, r6
 8027b2c:	f7ff fc1d 	bl	802736a <lv_dropdown_open>
 8027b30:	e685      	b.n	802783e <lv_dropdown_event+0x12>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8027b32:	8f33      	ldrh	r3, [r6, #56]	; 0x38
 8027b34:	86f3      	strh	r3, [r6, #54]	; 0x36
            lv_dropdown_close(obj);
 8027b36:	4630      	mov	r0, r6
 8027b38:	f7ff fd48 	bl	80275cc <lv_dropdown_close>
 8027b3c:	e67f      	b.n	802783e <lv_dropdown_event+0x12>
 8027b3e:	bf00      	nop
 8027b40:	08033688 	.word	0x08033688
        char * buf = lv_mem_buf_get(128);
 8027b44:	2080      	movs	r0, #128	; 0x80
 8027b46:	f7fa fa43 	bl	8021fd0 <lv_mem_buf_get>
 8027b4a:	4681      	mov	r9, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 8027b4c:	2280      	movs	r2, #128	; 0x80
 8027b4e:	4601      	mov	r1, r0
 8027b50:	4620      	mov	r0, r4
 8027b52:	f7ff fbc5 	bl	80272e0 <lv_dropdown_get_selected_str>
        opt_txt = buf;
 8027b56:	e6ca      	b.n	80278ee <lv_dropdown_event+0xc2>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8027b58:	f04f 0801 	mov.w	r8, #1
 8027b5c:	e6db      	b.n	8027916 <lv_dropdown_event+0xea>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 8027b5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8027b60:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8027b64:	9302      	str	r3, [sp, #8]
 8027b66:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8027b6a:	9301      	str	r3, [sp, #4]
 8027b6c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8027b70:	9300      	str	r3, [sp, #0]
 8027b72:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8027b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027b78:	a812      	add	r0, sp, #72	; 0x48
 8027b7a:	f7fc fd12 	bl	80245a2 <lv_txt_get_size>
            symbol_w = size.x;
 8027b7e:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
            symbol_h = size.y;
 8027b82:	f9bd b04a 	ldrsh.w	fp, [sp, #74]	; 0x4a
 8027b86:	e6d9      	b.n	802793c <lv_dropdown_event+0x110>
                symbol_w = header.w;
 8027b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027b8a:	f3c3 2a8a 	ubfx	sl, r3, #10, #11
                symbol_h = header.h;
 8027b8e:	f8bd b04a 	ldrh.w	fp, [sp, #74]	; 0x4a
 8027b92:	f3cb 1b4a 	ubfx	fp, fp, #5, #11
 8027b96:	e6d1      	b.n	802793c <lv_dropdown_event+0x110>
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8027b98:	8b23      	ldrh	r3, [r4, #24]
 8027b9a:	1bdb      	subs	r3, r3, r7
 8027b9c:	b29b      	uxth	r3, r3
 8027b9e:	eba3 020a 	sub.w	r2, r3, sl
 8027ba2:	f8ad 2020 	strh.w	r2, [sp, #32]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8027ba6:	3b01      	subs	r3, #1
 8027ba8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8027bac:	e6d3      	b.n	8027956 <lv_dropdown_event+0x12a>
            symbol_area.y1 = obj->coords.y1 + top;
 8027bae:	8ae3      	ldrh	r3, [r4, #22]
 8027bb0:	442b      	add	r3, r5
 8027bb2:	b29b      	uxth	r3, r3
 8027bb4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8027bb8:	3b01      	subs	r3, #1
 8027bba:	449b      	add	fp, r3
 8027bbc:	f8ad b026 	strh.w	fp, [sp, #38]	; 0x26
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 8027bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8027bc2:	2200      	movs	r2, #0
 8027bc4:	9200      	str	r2, [sp, #0]
 8027bc6:	aa08      	add	r2, sp, #32
 8027bc8:	a90a      	add	r1, sp, #40	; 0x28
 8027bca:	9804      	ldr	r0, [sp, #16]
 8027bcc:	f7e6 f8a6 	bl	800dd1c <lv_draw_label>
 8027bd0:	e6fb      	b.n	80279ca <lv_dropdown_event+0x19e>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 8027bd2:	8aa5      	ldrh	r5, [r4, #20]
 8027bd4:	4620      	mov	r0, r4
 8027bd6:	f7e0 faea 	bl	80081ae <lv_obj_get_width>
 8027bda:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8027bde:	1a83      	subs	r3, r0, r2
 8027be0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8027be4:	eb05 0363 	add.w	r3, r5, r3, asr #1
 8027be8:	b29b      	uxth	r3, r3
 8027bea:	f8ad 3020 	strh.w	r3, [sp, #32]
        txt_area.x2 = txt_area.x1 + size.x;
 8027bee:	4413      	add	r3, r2
 8027bf0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8027bf4:	e71d      	b.n	8027a32 <lv_dropdown_event+0x206>
            txt_area.x1 = obj->coords.x1 + left;
 8027bf6:	8aa3      	ldrh	r3, [r4, #20]
 8027bf8:	4433      	add	r3, r6
 8027bfa:	b29b      	uxth	r3, r3
 8027bfc:	f8ad 3020 	strh.w	r3, [sp, #32]
            txt_area.x2 = txt_area.x1 + size.x;
 8027c00:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027c04:	4413      	add	r3, r2
 8027c06:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8027c0a:	e712      	b.n	8027a32 <lv_dropdown_event+0x206>

08027c0c <lv_img_get_transformed_size>:
        img->src_type = LV_IMG_SRC_UNKNOWN;
    }
}

static lv_point_t lv_img_get_transformed_size(lv_obj_t * obj)
{
 8027c0c:	b500      	push	{lr}
 8027c0e:	b087      	sub	sp, #28
    lv_img_t * img = (lv_img_t *)obj;


    lv_area_t area_transform;
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
                                     img->angle, img->zoom, &img->pivot);
 8027c10:	f100 0332 	add.w	r3, r0, #50	; 0x32
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 8027c14:	9301      	str	r3, [sp, #4]
 8027c16:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8027c18:	9300      	str	r3, [sp, #0]
 8027c1a:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8027c1e:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8027c22:	f9b0 102c 	ldrsh.w	r1, [r0, #44]	; 0x2c
 8027c26:	a803      	add	r0, sp, #12
 8027c28:	f7e7 fe8c 	bl	800f944 <_lv_img_buf_get_transformed_area>
 8027c2c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8027c30:	3301      	adds	r3, #1
 8027c32:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8027c36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8027c3a:	3201      	adds	r2, #1
 8027c3c:	f8bd 000c 	ldrh.w	r0, [sp, #12]

    return (lv_point_t) {
 8027c40:	1a12      	subs	r2, r2, r0
 8027c42:	1a5b      	subs	r3, r3, r1
 8027c44:	2000      	movs	r0, #0
 8027c46:	b292      	uxth	r2, r2
 8027c48:	f362 000f 	bfi	r0, r2, #0, #16
 8027c4c:	b29b      	uxth	r3, r3
 8027c4e:	f363 401f 	bfi	r0, r3, #16, #16
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}
 8027c52:	b007      	add	sp, #28
 8027c54:	f85d fb04 	ldr.w	pc, [sp], #4

08027c58 <lv_img_destructor>:
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8027c58:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8027c5c:	f003 0303 	and.w	r3, r3, #3
 8027c60:	3b01      	subs	r3, #1
 8027c62:	b2db      	uxtb	r3, r3
 8027c64:	2b01      	cmp	r3, #1
 8027c66:	d900      	bls.n	8027c6a <lv_img_destructor+0x12>
 8027c68:	4770      	bx	lr
{
 8027c6a:	b510      	push	{r4, lr}
 8027c6c:	460c      	mov	r4, r1
        lv_mem_free((void *)img->src);
 8027c6e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8027c70:	f7fa f97a 	bl	8021f68 <lv_mem_free>
        img->src      = NULL;
 8027c74:	2300      	movs	r3, #0
 8027c76:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8027c78:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027c7c:	f043 0303 	orr.w	r3, r3, #3
 8027c80:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8027c84:	bd10      	pop	{r4, pc}

08027c86 <lv_img_constructor>:
{
 8027c86:	b538      	push	{r3, r4, r5, lr}
 8027c88:	460c      	mov	r4, r1
    img->src       = NULL;
 8027c8a:	2500      	movs	r5, #0
 8027c8c:	624d      	str	r5, [r1, #36]	; 0x24
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 8027c8e:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    img->cf        = LV_IMG_CF_UNKNOWN;
 8027c92:	f043 0303 	orr.w	r3, r3, #3
 8027c96:	f365 0386 	bfi	r3, r5, #2, #5
 8027c9a:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    img->w         = lv_obj_get_width(obj);
 8027c9e:	4608      	mov	r0, r1
 8027ca0:	f7e0 fa85 	bl	80081ae <lv_obj_get_width>
 8027ca4:	85a0      	strh	r0, [r4, #44]	; 0x2c
    img->h         = lv_obj_get_height(obj);
 8027ca6:	4620      	mov	r0, r4
 8027ca8:	f7e0 fa87 	bl	80081ba <lv_obj_get_height>
 8027cac:	85e0      	strh	r0, [r4, #46]	; 0x2e
    img->angle = 0;
 8027cae:	8625      	strh	r5, [r4, #48]	; 0x30
    img->zoom = LV_IMG_ZOOM_NONE;
 8027cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8027cb4:	86e3      	strh	r3, [r4, #54]	; 0x36
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8027cb6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027cbe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    img->offset.x  = 0;
 8027cc2:	8525      	strh	r5, [r4, #40]	; 0x28
    img->offset.y  = 0;
 8027cc4:	8565      	strh	r5, [r4, #42]	; 0x2a
    img->pivot.x = 0;
 8027cc6:	8665      	strh	r5, [r4, #50]	; 0x32
    img->pivot.y = 0;
 8027cc8:	86a5      	strh	r5, [r4, #52]	; 0x34
    img->obj_size_mode = LV_IMG_SIZE_MODE_VIRTUAL;
 8027cca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8027cce:	f365 0301 	bfi	r3, r5, #0, #2
 8027cd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8027cd6:	2102      	movs	r1, #2
 8027cd8:	4620      	mov	r0, r4
 8027cda:	f7df f985 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8027cde:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8027ce2:	4620      	mov	r0, r4
 8027ce4:	f7df f946 	bl	8006f74 <lv_obj_add_flag>
}
 8027ce8:	bd38      	pop	{r3, r4, r5, pc}
	...

08027cec <lv_img_create>:
{
 8027cec:	b510      	push	{r4, lr}
 8027cee:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8027cf0:	4803      	ldr	r0, [pc, #12]	; (8027d00 <lv_img_create+0x14>)
 8027cf2:	f7df fc2f 	bl	8007554 <lv_obj_class_create_obj>
 8027cf6:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8027cf8:	f7df fcd9 	bl	80076ae <lv_obj_class_init_obj>
}
 8027cfc:	4620      	mov	r0, r4
 8027cfe:	bd10      	pop	{r4, pc}
 8027d00:	080336c0 	.word	0x080336c0

08027d04 <lv_img_set_src>:
{
 8027d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027d08:	b086      	sub	sp, #24
 8027d0a:	4604      	mov	r4, r0
 8027d0c:	460e      	mov	r6, r1
    lv_obj_invalidate(obj);
 8027d0e:	f7e0 fc95 	bl	800863c <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8027d12:	4630      	mov	r0, r6
 8027d14:	f7e5 fe51 	bl	800d9ba <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 8027d18:	2803      	cmp	r0, #3
 8027d1a:	d03c      	beq.n	8027d96 <lv_img_set_src+0x92>
 8027d1c:	4605      	mov	r5, r0
    lv_img_decoder_get_info(src, &header);
 8027d1e:	a905      	add	r1, sp, #20
 8027d20:	4630      	mov	r0, r6
 8027d22:	f7e8 f9f3 	bl	801010c <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8027d26:	2d00      	cmp	r5, #0
 8027d28:	d14e      	bne.n	8027dc8 <lv_img_set_src+0xc4>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8027d2a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027d2e:	f003 0303 	and.w	r3, r3, #3
 8027d32:	3b01      	subs	r3, #1
 8027d34:	b2db      	uxtb	r3, r3
 8027d36:	2b01      	cmp	r3, #1
 8027d38:	d942      	bls.n	8027dc0 <lv_img_set_src+0xbc>
        img->src = src;
 8027d3a:	6266      	str	r6, [r4, #36]	; 0x24
    img->src_type = src_type;
 8027d3c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027d40:	f365 0301 	bfi	r3, r5, #0, #2
    img->w        = header.w;
 8027d44:	9905      	ldr	r1, [sp, #20]
 8027d46:	f3c1 228a 	ubfx	r2, r1, #10, #11
 8027d4a:	85a2      	strh	r2, [r4, #44]	; 0x2c
    img->h        = header.h;
 8027d4c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8027d50:	f3c2 104a 	ubfx	r0, r2, #5, #11
 8027d54:	85e0      	strh	r0, [r4, #46]	; 0x2e
    img->cf       = header.cf;
 8027d56:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8027d5a:	f3c0 0004 	ubfx	r0, r0, #0, #5
 8027d5e:	f360 0386 	bfi	r3, r0, #2, #5
 8027d62:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    img->pivot.x = header.w / 2;
 8027d66:	f3c1 21c9 	ubfx	r1, r1, #11, #10
 8027d6a:	8661      	strh	r1, [r4, #50]	; 0x32
    img->pivot.y = header.h / 2;
 8027d6c:	f3c2 1289 	ubfx	r2, r2, #6, #10
 8027d70:	86a2      	strh	r2, [r4, #52]	; 0x34
    lv_obj_refresh_self_size(obj);
 8027d72:	4620      	mov	r0, r4
 8027d74:	f7e0 fab8 	bl	80082e8 <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 8027d78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8027d7a:	b91b      	cbnz	r3, 8027d84 <lv_img_set_src+0x80>
 8027d7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8027d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8027d82:	d002      	beq.n	8027d8a <lv_img_set_src+0x86>
 8027d84:	4620      	mov	r0, r4
 8027d86:	f7e0 f815 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8027d8a:	4620      	mov	r0, r4
 8027d8c:	f7e0 fc56 	bl	800863c <lv_obj_invalidate>
}
 8027d90:	b006      	add	sp, #24
 8027d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 8027d96:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027d9a:	f003 0303 	and.w	r3, r3, #3
 8027d9e:	3b01      	subs	r3, #1
 8027da0:	b2db      	uxtb	r3, r3
 8027da2:	2b01      	cmp	r3, #1
 8027da4:	d908      	bls.n	8027db8 <lv_img_set_src+0xb4>
        img->src      = NULL;
 8027da6:	2300      	movs	r3, #0
 8027da8:	6263      	str	r3, [r4, #36]	; 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8027daa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027dae:	f043 0303 	orr.w	r3, r3, #3
 8027db2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return;
 8027db6:	e7eb      	b.n	8027d90 <lv_img_set_src+0x8c>
            lv_mem_free((void *)img->src);
 8027db8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027dba:	f7fa f8d5 	bl	8021f68 <lv_mem_free>
 8027dbe:	e7f2      	b.n	8027da6 <lv_img_set_src+0xa2>
            lv_mem_free((void *)img->src);
 8027dc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8027dc2:	f7fa f8d1 	bl	8021f68 <lv_mem_free>
 8027dc6:	e7b8      	b.n	8027d3a <lv_img_set_src+0x36>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8027dc8:	1e6b      	subs	r3, r5, #1
 8027dca:	b2db      	uxtb	r3, r3
 8027dcc:	2b01      	cmp	r3, #1
 8027dce:	d92f      	bls.n	8027e30 <lv_img_set_src+0x12c>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 8027dd0:	2d02      	cmp	r5, #2
 8027dd2:	d1b3      	bne.n	8027d3c <lv_img_set_src+0x38>
 8027dd4:	2257      	movs	r2, #87	; 0x57
 8027dd6:	2100      	movs	r1, #0
 8027dd8:	4620      	mov	r0, r4
 8027dda:	f7e3 f867 	bl	800aeac <lv_obj_get_style_prop>
 8027dde:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8027de0:	2258      	movs	r2, #88	; 0x58
 8027de2:	2100      	movs	r1, #0
 8027de4:	4620      	mov	r0, r4
 8027de6:	f7e3 f861 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8027dea:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8027dee:	2259      	movs	r2, #89	; 0x59
 8027df0:	2100      	movs	r1, #0
 8027df2:	4620      	mov	r0, r4
 8027df4:	f7e3 f85a 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8027df8:	b200      	sxth	r0, r0
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8027dfa:	2300      	movs	r3, #0
 8027dfc:	9302      	str	r3, [sp, #8]
 8027dfe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8027e02:	9301      	str	r3, [sp, #4]
 8027e04:	9000      	str	r0, [sp, #0]
 8027e06:	4643      	mov	r3, r8
 8027e08:	463a      	mov	r2, r7
 8027e0a:	4631      	mov	r1, r6
 8027e0c:	a804      	add	r0, sp, #16
 8027e0e:	f7fc fbc8 	bl	80245a2 <lv_txt_get_size>
        header.w = size.x;
 8027e12:	9b05      	ldr	r3, [sp, #20]
 8027e14:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8027e18:	f362 2394 	bfi	r3, r2, #10, #11
 8027e1c:	9305      	str	r3, [sp, #20]
        header.h = size.y;
 8027e1e:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8027e22:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8027e26:	f362 134f 	bfi	r3, r2, #5, #11
 8027e2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8027e2e:	e785      	b.n	8027d3c <lv_img_set_src+0x38>
        if(img->src != src) {
 8027e30:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8027e32:	42b7      	cmp	r7, r6
 8027e34:	d0cc      	beq.n	8027dd0 <lv_img_set_src+0xcc>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8027e36:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8027e3a:	f003 0303 	and.w	r3, r3, #3
 8027e3e:	3b01      	subs	r3, #1
 8027e40:	b2db      	uxtb	r3, r3
 8027e42:	2b01      	cmp	r3, #1
 8027e44:	d908      	bls.n	8027e58 <lv_img_set_src+0x154>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8027e46:	4630      	mov	r0, r6
 8027e48:	f7d8 f9f6 	bl	8000238 <strlen>
 8027e4c:	3001      	adds	r0, #1
 8027e4e:	f7fa f86d 	bl	8021f2c <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 8027e52:	4607      	mov	r7, r0
 8027e54:	b9a0      	cbnz	r0, 8027e80 <lv_img_set_src+0x17c>
 8027e56:	e7fe      	b.n	8027e56 <lv_img_set_src+0x152>
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8027e58:	4630      	mov	r0, r6
 8027e5a:	f7d8 f9ed 	bl	8000238 <strlen>
 8027e5e:	3001      	adds	r0, #1
 8027e60:	f7fa f864 	bl	8021f2c <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 8027e64:	4680      	mov	r8, r0
 8027e66:	2800      	cmp	r0, #0
 8027e68:	d0f5      	beq.n	8027e56 <lv_img_set_src+0x152>
            strcpy(new_str, src);
 8027e6a:	4631      	mov	r1, r6
 8027e6c:	f005 f852 	bl	802cf14 <strcpy>
            img->src = new_str;
 8027e70:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void *)old_src);
 8027e74:	2f00      	cmp	r7, #0
 8027e76:	d0ab      	beq.n	8027dd0 <lv_img_set_src+0xcc>
 8027e78:	4638      	mov	r0, r7
 8027e7a:	f7fa f875 	bl	8021f68 <lv_mem_free>
 8027e7e:	e7a7      	b.n	8027dd0 <lv_img_set_src+0xcc>
            strcpy(new_str, src);
 8027e80:	4631      	mov	r1, r6
 8027e82:	4638      	mov	r0, r7
 8027e84:	f005 f846 	bl	802cf14 <strcpy>
            img->src = new_str;
 8027e88:	6267      	str	r7, [r4, #36]	; 0x24
            if(old_src) lv_mem_free((void *)old_src);
 8027e8a:	e7a1      	b.n	8027dd0 <lv_img_set_src+0xcc>

08027e8c <lv_img_event>:

static void lv_img_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8027e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e90:	b099      	sub	sp, #100	; 0x64
 8027e92:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_event_code_t code = lv_event_get_code(e);
 8027e94:	4608      	mov	r0, r1
 8027e96:	f7dc fabb 	bl	8004410 <lv_event_get_code>

    /*Ancestor events will be called during drawing*/
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8027e9a:	2815      	cmp	r0, #21
 8027e9c:	f000 8333 	beq.w	8028506 <lv_img_event+0x67a>
 8027ea0:	4605      	mov	r5, r0
 8027ea2:	2818      	cmp	r0, #24
 8027ea4:	f040 80df 	bne.w	8028066 <lv_img_event+0x1da>
        /*Call the ancestor's event handler*/
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
        if(res != LV_RES_OK) return;
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8027ea8:	4620      	mov	r0, r4
 8027eaa:	f7dc faad 	bl	8004408 <lv_event_get_target>
    }
}

static void draw_img(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
 8027eae:	4620      	mov	r0, r4
 8027eb0:	f7dc faae 	bl	8004410 <lv_event_get_code>
 8027eb4:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8027eb6:	4620      	mov	r0, r4
 8027eb8:	f7dc faa6 	bl	8004408 <lv_event_get_target>
 8027ebc:	4605      	mov	r5, r0
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 8027ebe:	2e12      	cmp	r6, #18
 8027ec0:	f000 81bf 	beq.w	8028242 <lv_img_event+0x3b6>
                info->res = LV_COVER_RES_NOT_COVER;
                return;
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8027ec4:	2e15      	cmp	r6, #21
 8027ec6:	d002      	beq.n	8027ece <lv_img_event+0x42>
 8027ec8:	2e18      	cmp	r6, #24
 8027eca:	f040 80f2 	bne.w	80280b2 <lv_img_event+0x226>

        lv_coord_t obj_w = lv_obj_get_width(obj);
 8027ece:	4628      	mov	r0, r5
 8027ed0:	f7e0 f96d 	bl	80081ae <lv_obj_get_width>
 8027ed4:	4680      	mov	r8, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 8027ed6:	4628      	mov	r0, r5
 8027ed8:	f7e0 f96f 	bl	80081ba <lv_obj_get_height>
 8027edc:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8027ede:	2232      	movs	r2, #50	; 0x32
 8027ee0:	2100      	movs	r1, #0
 8027ee2:	4628      	mov	r0, r5
 8027ee4:	f7e2 ffe2 	bl	800aeac <lv_obj_get_style_prop>
 8027ee8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8027eea:	2212      	movs	r2, #18
 8027eec:	2100      	movs	r1, #0
 8027eee:	4628      	mov	r0, r5
 8027ef0:	f7e2 ffdc 	bl	800aeac <lv_obj_get_style_prop>

        lv_coord_t border_width = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8027ef4:	b2bf      	uxth	r7, r7
 8027ef6:	4438      	add	r0, r7
 8027ef8:	fa1f fa80 	uxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8027efc:	2213      	movs	r2, #19
 8027efe:	2100      	movs	r1, #0
 8027f00:	4628      	mov	r0, r5
 8027f02:	f7e2 ffd3 	bl	800aeac <lv_obj_get_style_prop>
 8027f06:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8027f08:	2210      	movs	r2, #16
 8027f0a:	2100      	movs	r1, #0
 8027f0c:	4628      	mov	r0, r5
 8027f0e:	f7e2 ffcd 	bl	800aeac <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8027f12:	4438      	add	r0, r7
 8027f14:	fa1f fb80 	uxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8027f18:	2211      	movs	r2, #17
 8027f1a:	2100      	movs	r1, #0
 8027f1c:	4628      	mov	r0, r5
 8027f1e:	f7e2 ffc5 	bl	800aeac <lv_obj_get_style_prop>
 8027f22:	9005      	str	r0, [sp, #20]
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;

        lv_point_t bg_pivot;
        bg_pivot.x = img->pivot.x + pleft;
 8027f24:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8027f26:	4453      	add	r3, sl
 8027f28:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_pivot.y = img->pivot.y + ptop;
 8027f2c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8027f2e:	445b      	add	r3, fp
 8027f30:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
        lv_area_t bg_coords;

        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8027f34:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8027f38:	f003 0303 	and.w	r3, r3, #3
 8027f3c:	2b01      	cmp	r3, #1
 8027f3e:	f000 81f1 	beq.w	8028324 <lv_img_event+0x498>
            /*Object size equals to transformed image size*/
            lv_obj_get_coords(obj, &bg_coords);
        }
        else {
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 8027f42:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8027f46:	aa08      	add	r2, sp, #32
 8027f48:	9201      	str	r2, [sp, #4]
 8027f4a:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8027f4c:	9200      	str	r2, [sp, #0]
 8027f4e:	464a      	mov	r2, r9
 8027f50:	4641      	mov	r1, r8
 8027f52:	a80a      	add	r0, sp, #40	; 0x28
 8027f54:	f7e7 fcf6 	bl	800f944 <_lv_img_buf_get_transformed_area>
                                             img->angle, img->zoom, &bg_pivot);

            /*Modify the coordinates to draw the background for the rotated and scaled coordinates*/
            bg_coords.x1 += obj->coords.x1;
 8027f58:	8aaa      	ldrh	r2, [r5, #20]
 8027f5a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8027f5e:	4413      	add	r3, r2
 8027f60:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            bg_coords.y1 += obj->coords.y1;
 8027f64:	8aeb      	ldrh	r3, [r5, #22]
 8027f66:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8027f6a:	4419      	add	r1, r3
 8027f6c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            bg_coords.x2 += obj->coords.x1;
 8027f70:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8027f74:	440a      	add	r2, r1
 8027f76:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            bg_coords.y2 += obj->coords.y1;
 8027f7a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8027f7e:	4413      	add	r3, r2
 8027f80:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    dest->x1 = src->x1;
 8027f84:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8027f88:	9302      	str	r3, [sp, #8]
    dest->y1 = src->y1;
 8027f8a:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8027f8e:	9203      	str	r2, [sp, #12]
    dest->x2 = src->x2;
 8027f90:	f9b5 9018 	ldrsh.w	r9, [r5, #24]
    dest->y2 = src->y2;
 8027f94:	f9b5 801a 	ldrsh.w	r8, [r5, #26]
    dest->x1 = src->x1;
 8027f98:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8027f9c:	82ab      	strh	r3, [r5, #20]
    dest->y1 = src->y1;
 8027f9e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8027fa2:	82eb      	strh	r3, [r5, #22]
    dest->x2 = src->x2;
 8027fa4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8027fa8:	832b      	strh	r3, [r5, #24]
    dest->y2 = src->y2;
 8027faa:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8027fae:	836b      	strh	r3, [r5, #26]

        lv_area_t ori_coords;
        lv_area_copy(&ori_coords, &obj->coords);
        lv_area_copy(&obj->coords, &bg_coords);

        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8027fb0:	4621      	mov	r1, r4
 8027fb2:	48b8      	ldr	r0, [pc, #736]	; (8028294 <lv_img_event+0x408>)
 8027fb4:	f7dc f909 	bl	80041ca <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8027fb8:	2801      	cmp	r0, #1
 8027fba:	d17a      	bne.n	80280b2 <lv_img_event+0x226>
    dest->x1 = src->x1;
 8027fbc:	9b02      	ldr	r3, [sp, #8]
 8027fbe:	82ab      	strh	r3, [r5, #20]
    dest->y1 = src->y1;
 8027fc0:	9a03      	ldr	r2, [sp, #12]
 8027fc2:	82ea      	strh	r2, [r5, #22]
    dest->x2 = src->x2;
 8027fc4:	f8a5 9018 	strh.w	r9, [r5, #24]
    dest->y2 = src->y2;
 8027fc8:	f8a5 801a 	strh.w	r8, [r5, #26]

        lv_area_copy(&obj->coords, &ori_coords);

        if(code == LV_EVENT_DRAW_MAIN) {
 8027fcc:	2e15      	cmp	r6, #21
 8027fce:	d170      	bne.n	80280b2 <lv_img_event+0x226>
            if(img->h == 0 || img->w == 0) return;
 8027fd0:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
 8027fd4:	2b00      	cmp	r3, #0
 8027fd6:	d06c      	beq.n	80280b2 <lv_img_event+0x226>
 8027fd8:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d068      	beq.n	80280b2 <lv_img_event+0x226>
            if(img->zoom == 0) return;
 8027fe0:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8027fe2:	2b00      	cmp	r3, #0
 8027fe4:	d065      	beq.n	80280b2 <lv_img_event+0x226>

            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8027fe6:	4620      	mov	r0, r4
 8027fe8:	f7dc fa82 	bl	80044f0 <lv_event_get_draw_ctx>
 8027fec:	4680      	mov	r8, r0
    dest->x1 = src->x1;
 8027fee:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8027ff2:	9303      	str	r3, [sp, #12]
    dest->y1 = src->y1;
 8027ff4:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
    dest->x2 = src->x2;
 8027ff8:	f9b5 6018 	ldrsh.w	r6, [r5, #24]
    dest->y2 = src->y2;
 8027ffc:	f9b5 401a 	ldrsh.w	r4, [r5, #26]

            lv_area_t img_max_area;
            lv_area_copy(&img_max_area, &obj->coords);

            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 8028000:	4628      	mov	r0, r5
 8028002:	f7ff fe03 	bl	8027c0c <lv_img_get_transformed_size>
 8028006:	9009      	str	r0, [sp, #36]	; 0x24
 8028008:	b203      	sxth	r3, r0
 802800a:	9306      	str	r3, [sp, #24]
 802800c:	1403      	asrs	r3, r0, #16
 802800e:	9302      	str	r3, [sp, #8]

            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8028010:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8028014:	f003 0303 	and.w	r3, r3, #3
 8028018:	2b01      	cmp	r3, #1
 802801a:	f000 8188 	beq.w	802832e <lv_img_event+0x4a2>
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
            }
            else {
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 802801e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8028022:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8028026:	1ad3      	subs	r3, r2, r3
 8028028:	9a03      	ldr	r2, [sp, #12]
 802802a:	4413      	add	r3, r2
 802802c:	b21b      	sxth	r3, r3
 802802e:	9307      	str	r3, [sp, #28]
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 8028030:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8028034:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8028038:	1ae4      	subs	r4, r4, r3
 802803a:	444c      	add	r4, r9
 802803c:	b224      	sxth	r4, r4
            img_max_area.x1 += pleft;
            img_max_area.y1 += ptop;
            img_max_area.x2 -= pright;
            img_max_area.y2 -= pbottom;

            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 802803e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8028042:	f013 0f02 	tst.w	r3, #2
 8028046:	f000 8193 	beq.w	8028370 <lv_img_event+0x4e4>
        lv_area_copy(&obj->coords, &bg_coords);
 802804a:	f105 0414 	add.w	r4, r5, #20
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
                    }
                }
                draw_ctx->clip_area = clip_area_ori;
            }
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 802804e:	f003 0303 	and.w	r3, r3, #3
 8028052:	2b02      	cmp	r3, #2
 8028054:	f000 8246 	beq.w	80284e4 <lv_img_event+0x658>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
            }
            else {
                /*Trigger the error handler of image draw*/
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 8028058:	2300      	movs	r3, #0
 802805a:	4622      	mov	r2, r4
 802805c:	4619      	mov	r1, r3
 802805e:	4640      	mov	r0, r8
 8028060:	f7e5 fcc6 	bl	800d9f0 <lv_draw_img>
 8028064:	e025      	b.n	80280b2 <lv_img_event+0x226>
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8028066:	4621      	mov	r1, r4
 8028068:	488a      	ldr	r0, [pc, #552]	; (8028294 <lv_img_event+0x408>)
 802806a:	f7dc f8ae 	bl	80041ca <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 802806e:	2801      	cmp	r0, #1
 8028070:	d11f      	bne.n	80280b2 <lv_img_event+0x226>
    lv_obj_t * obj = lv_event_get_target(e);
 8028072:	4620      	mov	r0, r4
 8028074:	f7dc f9c8 	bl	8004408 <lv_event_get_target>
 8028078:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 802807a:	2d2a      	cmp	r5, #42	; 0x2a
 802807c:	d011      	beq.n	80280a2 <lv_img_event+0x216>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802807e:	2d13      	cmp	r5, #19
 8028080:	d01e      	beq.n	80280c0 <lv_img_event+0x234>
    else if(code == LV_EVENT_HIT_TEST) {
 8028082:	2d11      	cmp	r5, #17
 8028084:	d05e      	beq.n	8028144 <lv_img_event+0x2b8>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8028086:	2d2c      	cmp	r5, #44	; 0x2c
 8028088:	f000 80c2 	beq.w	8028210 <lv_img_event+0x384>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST || code == LV_EVENT_COVER_CHECK) {
 802808c:	2d18      	cmp	r5, #24
 802808e:	d810      	bhi.n	80280b2 <lv_img_event+0x226>
 8028090:	f04f 7092 	mov.w	r0, #19136512	; 0x1240000
 8028094:	fa20 f505 	lsr.w	r5, r0, r5
 8028098:	f015 0f01 	tst.w	r5, #1
 802809c:	f47f af07 	bne.w	8027eae <lv_img_event+0x22>
 80280a0:	e007      	b.n	80280b2 <lv_img_event+0x226>
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 80280a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80280a6:	f003 0303 	and.w	r3, r3, #3
 80280aa:	2b02      	cmp	r3, #2
 80280ac:	d004      	beq.n	80280b8 <lv_img_event+0x22c>
            lv_obj_refresh_ext_draw_size(obj);
 80280ae:	f7df fe81 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
}
 80280b2:	b019      	add	sp, #100	; 0x64
 80280b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_img_set_src(obj, img->src);
 80280b8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80280ba:	f7ff fe23 	bl	8027d04 <lv_img_set_src>
 80280be:	e7f8      	b.n	80280b2 <lv_img_event+0x226>
        lv_coord_t * s = lv_event_get_param(e);
 80280c0:	4620      	mov	r0, r4
 80280c2:	f7dc f9a9 	bl	8004418 <lv_event_get_param>
 80280c6:	4607      	mov	r7, r0
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 80280c8:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 80280ca:	b91b      	cbnz	r3, 80280d4 <lv_img_event+0x248>
 80280cc:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 80280ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80280d2:	d0ee      	beq.n	80280b2 <lv_img_event+0x226>
            lv_coord_t w = lv_obj_get_width(obj);
 80280d4:	4630      	mov	r0, r6
 80280d6:	f7e0 f86a 	bl	80081ae <lv_obj_get_width>
 80280da:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(obj);
 80280dc:	4630      	mov	r0, r6
 80280de:	f7e0 f86c 	bl	80081ba <lv_obj_get_height>
 80280e2:	4680      	mov	r8, r0
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 80280e4:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 80280e8:	f106 0232 	add.w	r2, r6, #50	; 0x32
 80280ec:	9201      	str	r2, [sp, #4]
 80280ee:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 80280f0:	9200      	str	r2, [sp, #0]
 80280f2:	4602      	mov	r2, r0
 80280f4:	4649      	mov	r1, r9
 80280f6:	a810      	add	r0, sp, #64	; 0x40
 80280f8:	f7e7 fc24 	bl	800f944 <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, -a.x1);
 80280fc:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 8028100:	426d      	negs	r5, r5
 8028102:	f9b7 3000 	ldrsh.w	r3, [r7]
 8028106:	429d      	cmp	r5, r3
 8028108:	bfb8      	it	lt
 802810a:	461d      	movlt	r5, r3
 802810c:	b22d      	sxth	r5, r5
 802810e:	803d      	strh	r5, [r7, #0]
            *s = LV_MAX(*s, -a.y1);
 8028110:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8028114:	4253      	negs	r3, r2
 8028116:	42ab      	cmp	r3, r5
 8028118:	bfb8      	it	lt
 802811a:	462b      	movlt	r3, r5
 802811c:	b21d      	sxth	r5, r3
 802811e:	803d      	strh	r5, [r7, #0]
            *s = LV_MAX(*s, a.x2 - w);
 8028120:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8028124:	eba4 0309 	sub.w	r3, r4, r9
 8028128:	42ab      	cmp	r3, r5
 802812a:	bfb8      	it	lt
 802812c:	462b      	movlt	r3, r5
 802812e:	b21b      	sxth	r3, r3
 8028130:	803b      	strh	r3, [r7, #0]
            *s = LV_MAX(*s, a.y2 - h);
 8028132:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	; 0x46
 8028136:	eba0 0808 	sub.w	r8, r0, r8
 802813a:	4543      	cmp	r3, r8
 802813c:	bfb8      	it	lt
 802813e:	4643      	movlt	r3, r8
 8028140:	803b      	strh	r3, [r7, #0]
 8028142:	e7b6      	b.n	80280b2 <lv_img_event+0x226>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8028144:	4620      	mov	r0, r4
 8028146:	f7dc f967 	bl	8004418 <lv_event_get_param>
 802814a:	4604      	mov	r4, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 802814c:	f9b6 502c 	ldrsh.w	r5, [r6, #44]	; 0x2c
 8028150:	4630      	mov	r0, r6
 8028152:	f7e0 f82c 	bl	80081ae <lv_obj_get_width>
 8028156:	4285      	cmp	r5, r0
 8028158:	d00a      	beq.n	8028170 <lv_img_event+0x2e4>
            lv_obj_get_click_area(obj, &a);
 802815a:	a910      	add	r1, sp, #64	; 0x40
 802815c:	4630      	mov	r0, r6
 802815e:	f7e0 fcb0 	bl	8008ac2 <lv_obj_get_click_area>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8028162:	2200      	movs	r2, #0
 8028164:	6821      	ldr	r1, [r4, #0]
 8028166:	a810      	add	r0, sp, #64	; 0x40
 8028168:	f7f9 f818 	bl	802119c <_lv_area_is_point_on>
 802816c:	7120      	strb	r0, [r4, #4]
 802816e:	e7a0      	b.n	80280b2 <lv_img_event+0x226>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8028170:	f9b6 502e 	ldrsh.w	r5, [r6, #46]	; 0x2e
 8028174:	4630      	mov	r0, r6
 8028176:	f7e0 f820 	bl	80081ba <lv_obj_get_height>
 802817a:	4285      	cmp	r5, r0
 802817c:	d1ed      	bne.n	802815a <lv_img_event+0x2ce>
 802817e:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 8028180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8028184:	d10a      	bne.n	802819c <lv_img_event+0x310>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8028186:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8028188:	b943      	cbnz	r3, 802819c <lv_img_event+0x310>
 802818a:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
 802818e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8028192:	f9b6 2032 	ldrsh.w	r2, [r6, #50]	; 0x32
 8028196:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 802819a:	d02f      	beq.n	80281fc <lv_img_event+0x370>
            lv_coord_t w = lv_obj_get_width(obj);
 802819c:	4630      	mov	r0, r6
 802819e:	f7e0 f806 	bl	80081ae <lv_obj_get_width>
 80281a2:	4605      	mov	r5, r0
            lv_coord_t h = lv_obj_get_height(obj);
 80281a4:	4630      	mov	r0, r6
 80281a6:	f7e0 f808 	bl	80081ba <lv_obj_get_height>
 80281aa:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 80281ac:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	; 0x30
 80281b0:	f106 0132 	add.w	r1, r6, #50	; 0x32
 80281b4:	9101      	str	r1, [sp, #4]
 80281b6:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
 80281b8:	9100      	str	r1, [sp, #0]
 80281ba:	4629      	mov	r1, r5
 80281bc:	a810      	add	r0, sp, #64	; 0x40
 80281be:	f7e7 fbc1 	bl	800f944 <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 80281c2:	8ab2      	ldrh	r2, [r6, #20]
 80281c4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80281c8:	4413      	add	r3, r2
 80281ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            coords.y1 += obj->coords.y1;
 80281ce:	8af3      	ldrh	r3, [r6, #22]
 80281d0:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 80281d4:	4419      	add	r1, r3
 80281d6:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            coords.x2 += obj->coords.x1;
 80281da:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80281de:	440a      	add	r2, r1
 80281e0:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            coords.y2 += obj->coords.y1;
 80281e4:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 80281e8:	4413      	add	r3, r2
 80281ea:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 80281ee:	2200      	movs	r2, #0
 80281f0:	6821      	ldr	r1, [r4, #0]
 80281f2:	a810      	add	r0, sp, #64	; 0x40
 80281f4:	f7f8 ffd2 	bl	802119c <_lv_area_is_point_on>
 80281f8:	7120      	strb	r0, [r4, #4]
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 80281fa:	e75a      	b.n	80280b2 <lv_img_event+0x226>
 80281fc:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 8028200:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8028204:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8028208:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 802820c:	d1c6      	bne.n	802819c <lv_img_event+0x310>
 802820e:	e7a4      	b.n	802815a <lv_img_event+0x2ce>
        lv_point_t * p = lv_event_get_param(e);
 8028210:	4620      	mov	r0, r4
 8028212:	f7dc f901 	bl	8004418 <lv_event_get_param>
 8028216:	4604      	mov	r4, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8028218:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
 802821c:	f003 0303 	and.w	r3, r3, #3
 8028220:	2b01      	cmp	r3, #1
 8028222:	d006      	beq.n	8028232 <lv_img_event+0x3a6>
            p->x = img->w;
 8028224:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	; 0x2c
 8028228:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 802822a:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 802822e:	8043      	strh	r3, [r0, #2]
 8028230:	e73f      	b.n	80280b2 <lv_img_event+0x226>
            *p = lv_img_get_transformed_size(obj);
 8028232:	4630      	mov	r0, r6
 8028234:	f7ff fcea 	bl	8027c0c <lv_img_get_transformed_size>
 8028238:	8020      	strh	r0, [r4, #0]
 802823a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 802823e:	8060      	strh	r0, [r4, #2]
 8028240:	e737      	b.n	80280b2 <lv_img_event+0x226>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8028242:	4620      	mov	r0, r4
 8028244:	f7dc f8e8 	bl	8004418 <lv_event_get_param>
 8028248:	4606      	mov	r6, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 802824a:	7803      	ldrb	r3, [r0, #0]
 802824c:	2b02      	cmp	r3, #2
 802824e:	f43f af30 	beq.w	80280b2 <lv_img_event+0x226>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 8028252:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8028256:	f013 0f02 	tst.w	r3, #2
 802825a:	d108      	bne.n	802826e <lv_img_event+0x3e2>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 802825c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8028260:	2b10      	cmp	r3, #16
 8028262:	d007      	beq.n	8028274 <lv_img_event+0x3e8>
 8028264:	2b04      	cmp	r3, #4
 8028266:	d005      	beq.n	8028274 <lv_img_event+0x3e8>
            info->res = LV_COVER_RES_NOT_COVER;
 8028268:	2301      	movs	r3, #1
 802826a:	7003      	strb	r3, [r0, #0]
            return;
 802826c:	e721      	b.n	80280b2 <lv_img_event+0x226>
            info->res = LV_COVER_RES_NOT_COVER;
 802826e:	2301      	movs	r3, #1
 8028270:	7003      	strb	r3, [r0, #0]
            return;
 8028272:	e71e      	b.n	80280b2 <lv_img_event+0x226>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8028274:	2246      	movs	r2, #70	; 0x46
 8028276:	2100      	movs	r1, #0
 8028278:	4628      	mov	r0, r5
 802827a:	f7e2 fe17 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 802827e:	b2c3      	uxtb	r3, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 8028280:	2bff      	cmp	r3, #255	; 0xff
 8028282:	d002      	beq.n	802828a <lv_img_event+0x3fe>
            info->res = LV_COVER_RES_NOT_COVER;
 8028284:	2301      	movs	r3, #1
 8028286:	7033      	strb	r3, [r6, #0]
            return;
 8028288:	e713      	b.n	80280b2 <lv_img_event+0x226>
        if(img->angle != 0) {
 802828a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 802828c:	b123      	cbz	r3, 8028298 <lv_img_event+0x40c>
            info->res = LV_COVER_RES_NOT_COVER;
 802828e:	2301      	movs	r3, #1
 8028290:	7033      	strb	r3, [r6, #0]
            return;
 8028292:	e70e      	b.n	80280b2 <lv_img_event+0x226>
 8028294:	080336c0 	.word	0x080336c0
        const lv_area_t * clip_area = lv_event_get_param(e);
 8028298:	4620      	mov	r0, r4
 802829a:	f7dc f8bd 	bl	8004418 <lv_event_get_param>
 802829e:	4604      	mov	r4, r0
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 80282a0:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80282a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80282a6:	d032      	beq.n	802830e <lv_img_event+0x482>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, img->zoom, &img->pivot);
 80282a8:	4628      	mov	r0, r5
 80282aa:	f7df ff80 	bl	80081ae <lv_obj_get_width>
 80282ae:	4607      	mov	r7, r0
 80282b0:	4628      	mov	r0, r5
 80282b2:	f7df ff82 	bl	80081ba <lv_obj_get_height>
 80282b6:	4602      	mov	r2, r0
 80282b8:	f105 0332 	add.w	r3, r5, #50	; 0x32
 80282bc:	9301      	str	r3, [sp, #4]
 80282be:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 80282c0:	9300      	str	r3, [sp, #0]
 80282c2:	2300      	movs	r3, #0
 80282c4:	4639      	mov	r1, r7
 80282c6:	a810      	add	r0, sp, #64	; 0x40
 80282c8:	f7e7 fb3c 	bl	800f944 <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 80282cc:	8aaa      	ldrh	r2, [r5, #20]
 80282ce:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80282d2:	4413      	add	r3, r2
 80282d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            a.y1 += obj->coords.y1;
 80282d8:	8aeb      	ldrh	r3, [r5, #22]
 80282da:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 80282de:	4419      	add	r1, r3
 80282e0:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            a.x2 += obj->coords.x1;
 80282e4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 80282e8:	440a      	add	r2, r1
 80282ea:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            a.y2 += obj->coords.y1;
 80282ee:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 80282f2:	4413      	add	r3, r2
 80282f4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80282f8:	2200      	movs	r2, #0
 80282fa:	a910      	add	r1, sp, #64	; 0x40
 80282fc:	4620      	mov	r0, r4
 80282fe:	f7f9 f82a 	bl	8021356 <_lv_area_is_in>
 8028302:	2800      	cmp	r0, #0
 8028304:	f47f aed5 	bne.w	80280b2 <lv_img_event+0x226>
                info->res = LV_COVER_RES_NOT_COVER;
 8028308:	2301      	movs	r3, #1
 802830a:	7033      	strb	r3, [r6, #0]
                return;
 802830c:	e6d1      	b.n	80280b2 <lv_img_event+0x226>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 802830e:	2200      	movs	r2, #0
 8028310:	f105 0114 	add.w	r1, r5, #20
 8028314:	f7f9 f81f 	bl	8021356 <_lv_area_is_in>
 8028318:	2800      	cmp	r0, #0
 802831a:	f47f aeca 	bne.w	80280b2 <lv_img_event+0x226>
                info->res = LV_COVER_RES_NOT_COVER;
 802831e:	2301      	movs	r3, #1
 8028320:	7033      	strb	r3, [r6, #0]
                return;
 8028322:	e6c6      	b.n	80280b2 <lv_img_event+0x226>
            lv_obj_get_coords(obj, &bg_coords);
 8028324:	a90a      	add	r1, sp, #40	; 0x28
 8028326:	4628      	mov	r0, r5
 8028328:	f7df fee3 	bl	80080f2 <lv_obj_get_coords>
 802832c:	e62a      	b.n	8027f84 <lv_img_event+0xf8>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 802832e:	f9b5 302c 	ldrsh.w	r3, [r5, #44]	; 0x2c
 8028332:	9a06      	ldr	r2, [sp, #24]
 8028334:	1a9b      	subs	r3, r3, r2
 8028336:	3301      	adds	r3, #1
 8028338:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802833c:	105b      	asrs	r3, r3, #1
 802833e:	425b      	negs	r3, r3
 8028340:	b29b      	uxth	r3, r3
 8028342:	9a03      	ldr	r2, [sp, #12]
 8028344:	441a      	add	r2, r3
 8028346:	b212      	sxth	r2, r2
 8028348:	9203      	str	r2, [sp, #12]
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 802834a:	4433      	add	r3, r6
 802834c:	b21b      	sxth	r3, r3
 802834e:	9307      	str	r3, [sp, #28]
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 8028350:	f9b5 302e 	ldrsh.w	r3, [r5, #46]	; 0x2e
 8028354:	9a02      	ldr	r2, [sp, #8]
 8028356:	1a9b      	subs	r3, r3, r2
 8028358:	3301      	adds	r3, #1
 802835a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802835e:	105b      	asrs	r3, r3, #1
 8028360:	425b      	negs	r3, r3
 8028362:	b29b      	uxth	r3, r3
 8028364:	4499      	add	r9, r3
 8028366:	fa0f f989 	sxth.w	r9, r9
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 802836a:	4423      	add	r3, r4
 802836c:	b21c      	sxth	r4, r3
 802836e:	e666      	b.n	802803e <lv_img_event+0x1b2>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8028370:	9b04      	ldr	r3, [sp, #16]
 8028372:	443b      	add	r3, r7
 8028374:	b29a      	uxth	r2, r3
 8028376:	9204      	str	r2, [sp, #16]
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8028378:	9e05      	ldr	r6, [sp, #20]
 802837a:	443e      	add	r6, r7
 802837c:	b2b6      	uxth	r6, r6
                lv_draw_img_dsc_init(&img_dsc);
 802837e:	a810      	add	r0, sp, #64	; 0x40
 8028380:	f7e5 facf 	bl	800d922 <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 8028384:	ab10      	add	r3, sp, #64	; 0x40
 8028386:	461a      	mov	r2, r3
 8028388:	2100      	movs	r1, #0
 802838a:	4628      	mov	r0, r5
 802838c:	f7df fb94 	bl	8007ab8 <lv_obj_init_draw_img_dsc>
                img_dsc.zoom = img->zoom;
 8028390:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8028392:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
                img_dsc.angle = img->angle;
 8028396:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8028398:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                img_dsc.pivot.x = img->pivot.x;
 802839c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 802839e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                img_dsc.pivot.y = img->pivot.y;
 80283a2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80283a4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                img_dsc.antialias = img->antialias;
 80283a8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80283ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80283b0:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80283b4:	f363 0200 	bfi	r2, r3, #0, #1
 80283b8:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
                img_clip_area.x1 = bg_coords.x1 + pleft;
 80283bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80283c0:	4453      	add	r3, sl
 80283c2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
                img_clip_area.y1 = bg_coords.y1 + ptop;
 80283c6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80283ca:	445b      	add	r3, fp
 80283cc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
                img_clip_area.x2 = bg_coords.x2 - pright;
 80283d0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80283d4:	9a04      	ldr	r2, [sp, #16]
 80283d6:	1a9b      	subs	r3, r3, r2
 80283d8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 80283dc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80283e0:	1b9b      	subs	r3, r3, r6
 80283e2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80283e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80283ea:	9305      	str	r3, [sp, #20]
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 80283ec:	aa0c      	add	r2, sp, #48	; 0x30
 80283ee:	4619      	mov	r1, r3
 80283f0:	4610      	mov	r0, r2
 80283f2:	f7f8 fe86 	bl	8021102 <_lv_area_intersect>
 80283f6:	2800      	cmp	r0, #0
 80283f8:	f43f ae5b 	beq.w	80280b2 <lv_img_event+0x226>
            img_max_area.y1 += ptop;
 80283fc:	eb0b 0309 	add.w	r3, fp, r9
 8028400:	b29b      	uxth	r3, r3
                draw_ctx->clip_area = &img_clip_area;
 8028402:	aa0c      	add	r2, sp, #48	; 0x30
 8028404:	f8c8 2008 	str.w	r2, [r8, #8]
                lv_coord_t offset_x = img->offset.x % img->w;
 8028408:	f9b5 1028 	ldrsh.w	r1, [r5, #40]	; 0x28
 802840c:	f9b5 202c 	ldrsh.w	r2, [r5, #44]	; 0x2c
 8028410:	fb91 f0f2 	sdiv	r0, r1, r2
 8028414:	fb02 1110 	mls	r1, r2, r0, r1
                lv_coord_t offset_y = img->offset.y % img->h;
 8028418:	f9b5 002e 	ldrsh.w	r0, [r5, #46]	; 0x2e
 802841c:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
 8028420:	fb92 f7f0 	sdiv	r7, r2, r0
 8028424:	fb00 2217 	mls	r2, r0, r7, r2
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8028428:	441a      	add	r2, r3
 802842a:	b297      	uxth	r7, r2
 802842c:	b212      	sxth	r2, r2
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 802842e:	b21b      	sxth	r3, r3
 8028430:	4293      	cmp	r3, r2
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8028432:	bfae      	itee	ge
 8028434:	f8ad 203a 	strhge.w	r2, [sp, #58]	; 0x3a
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8028438:	1a3f      	sublt	r7, r7, r0
 802843a:	f8ad 703a 	strhlt.w	r7, [sp, #58]	; 0x3a
            img_max_area.y2 -= pbottom;
 802843e:	1ba4      	subs	r4, r4, r6
 8028440:	fa0f f984 	sxth.w	r9, r4
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 8028444:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
 8028448:	1e53      	subs	r3, r2, #1
 802844a:	4418      	add	r0, r3
 802844c:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 8028450:	4591      	cmp	r9, r2
 8028452:	dd43      	ble.n	80284dc <lv_img_event+0x650>
            img_max_area.x1 += pleft;
 8028454:	9c03      	ldr	r4, [sp, #12]
 8028456:	4454      	add	r4, sl
 8028458:	fa0f fa84 	sxth.w	sl, r4
            img_max_area.x2 -= pright;
 802845c:	9b07      	ldr	r3, [sp, #28]
 802845e:	9a04      	ldr	r2, [sp, #16]
 8028460:	1a9f      	subs	r7, r3, r2
 8028462:	b23f      	sxth	r7, r7
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 8028464:	440c      	add	r4, r1
 8028466:	fa1f fb84 	uxth.w	fp, r4
 802846a:	b224      	sxth	r4, r4
 802846c:	e02c      	b.n	80284c8 <lv_img_event+0x63c>
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 802846e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8028472:	1e53      	subs	r3, r2, #1
 8028474:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 8028476:	440b      	add	r3, r1
 8028478:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 802847c:	4297      	cmp	r7, r2
 802847e:	dd14      	ble.n	80284aa <lv_img_event+0x61e>
 8028480:	f8bd 6018 	ldrh.w	r6, [sp, #24]
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 8028484:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8028486:	aa0e      	add	r2, sp, #56	; 0x38
 8028488:	a910      	add	r1, sp, #64	; 0x40
 802848a:	4640      	mov	r0, r8
 802848c:	f7e5 fab0 	bl	800d9f0 <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 8028490:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8028494:	4433      	add	r3, r6
 8028496:	b21b      	sxth	r3, r3
 8028498:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 802849c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80284a0:	4432      	add	r2, r6
 80284a2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80284a6:	429f      	cmp	r7, r3
 80284a8:	dcec      	bgt.n	8028484 <lv_img_event+0x5f8>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 80284aa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80284ae:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80284b2:	4413      	add	r3, r2
 80284b4:	b21b      	sxth	r3, r3
 80284b6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80284ba:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 80284be:	440a      	add	r2, r1
 80284c0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80284c4:	4599      	cmp	r9, r3
 80284c6:	dd09      	ble.n	80284dc <lv_img_event+0x650>
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 80284c8:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 80284cc:	45a2      	cmp	sl, r4
 80284ce:	dace      	bge.n	802846e <lv_img_event+0x5e2>
 80284d0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80284d2:	ebab 0303 	sub.w	r3, fp, r3
 80284d6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80284da:	e7c8      	b.n	802846e <lv_img_event+0x5e2>
                draw_ctx->clip_area = clip_area_ori;
 80284dc:	9b05      	ldr	r3, [sp, #20]
 80284de:	f8c8 3008 	str.w	r3, [r8, #8]
 80284e2:	e5e6      	b.n	80280b2 <lv_img_event+0x226>
                lv_draw_label_dsc_init(&label_dsc);
 80284e4:	a810      	add	r0, sp, #64	; 0x40
 80284e6:	f7e5 fbe5 	bl	800dcb4 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80284ea:	aa10      	add	r2, sp, #64	; 0x40
 80284ec:	2100      	movs	r1, #0
 80284ee:	4628      	mov	r0, r5
 80284f0:	f7df fa8b 	bl	8007a0a <lv_obj_init_draw_label_dsc>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 80284f4:	2300      	movs	r3, #0
 80284f6:	9300      	str	r3, [sp, #0]
 80284f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80284fa:	4622      	mov	r2, r4
 80284fc:	a910      	add	r1, sp, #64	; 0x40
 80284fe:	4640      	mov	r0, r8
 8028500:	f7e5 fc0c 	bl	800dd1c <lv_draw_label>
 8028504:	e5d5      	b.n	80280b2 <lv_img_event+0x226>
    lv_obj_t * obj = lv_event_get_target(e);
 8028506:	4620      	mov	r0, r4
 8028508:	f7db ff7e 	bl	8004408 <lv_event_get_target>
    if(code == LV_EVENT_STYLE_CHANGED) {
 802850c:	e4cf      	b.n	8027eae <lv_img_event+0x22>
 802850e:	bf00      	nop

08028510 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 8028510:	b510      	push	{r4, lr}
 8028512:	4604      	mov	r4, r0
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8028514:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8028518:	f013 0f40 	tst.w	r3, #64	; 0x40
 802851c:	d003      	beq.n	8028526 <lv_label_dot_tmp_free+0x16>
 802851e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8028520:	b108      	cbz	r0, 8028526 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(label->dot.tmp_ptr);
 8028522:	f7f9 fd21 	bl	8021f68 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 8028526:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 802852a:	f36f 1386 	bfc	r3, #6, #1
 802852e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    label->dot.tmp_ptr   = NULL;
 8028532:	2300      	movs	r3, #0
 8028534:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8028536:	bd10      	pop	{r4, pc}

08028538 <lv_label_revert_dots>:
{
 8028538:	b538      	push	{r3, r4, r5, lr}
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 802853a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 802853e:	f003 0307 	and.w	r3, r3, #7
 8028542:	2b01      	cmp	r3, #1
 8028544:	d130      	bne.n	80285a8 <lv_label_revert_dots+0x70>
 8028546:	4604      	mov	r4, r0
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8028548:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 802854a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 802854e:	d02b      	beq.n	80285a8 <lv_label_revert_dots+0x70>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8028550:	4b17      	ldr	r3, [pc, #92]	; (80285b0 <lv_label_revert_dots+0x78>)
 8028552:	681b      	ldr	r3, [r3, #0]
 8028554:	3903      	subs	r1, #3
 8028556:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8028558:	4798      	blx	r3
    if(label->dot_tmp_alloc) {
 802855a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 802855e:	f013 0f40 	tst.w	r3, #64	; 0x40
        return label->dot.tmp_ptr;
 8028562:	bf14      	ite	ne
 8028564:	6aa5      	ldrne	r5, [r4, #40]	; 0x28
        return label->dot.tmp;
 8028566:	f104 0528 	addeq.w	r5, r4, #40	; 0x28
    while(label->text[byte_i + i] != '\0') {
 802856a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802856c:	eb03 0c00 	add.w	ip, r3, r0
 8028570:	5c1b      	ldrb	r3, [r3, r0]
 8028572:	b1d3      	cbz	r3, 80285aa <lv_label_revert_dots+0x72>
    uint8_t i      = 0;
 8028574:	2300      	movs	r3, #0
    while(label->text[byte_i + i] != '\0') {
 8028576:	469e      	mov	lr, r3
        label->text[byte_i + i] = dot_tmp[i];
 8028578:	f815 200e 	ldrb.w	r2, [r5, lr]
 802857c:	f88c 2000 	strb.w	r2, [ip]
        i++;
 8028580:	3301      	adds	r3, #1
 8028582:	b2db      	uxtb	r3, r3
    while(label->text[byte_i + i] != '\0') {
 8028584:	469e      	mov	lr, r3
 8028586:	181a      	adds	r2, r3, r0
 8028588:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802858a:	eb01 0c02 	add.w	ip, r1, r2
 802858e:	5c8a      	ldrb	r2, [r1, r2]
 8028590:	2a00      	cmp	r2, #0
 8028592:	d1f1      	bne.n	8028578 <lv_label_revert_dots+0x40>
    label->text[byte_i + i] = dot_tmp[i];
 8028594:	f815 300e 	ldrb.w	r3, [r5, lr]
 8028598:	f88c 3000 	strb.w	r3, [ip]
    lv_label_dot_tmp_free(obj);
 802859c:	4620      	mov	r0, r4
 802859e:	f7ff ffb7 	bl	8028510 <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 80285a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80285a6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80285a8:	bd38      	pop	{r3, r4, r5, pc}
    while(label->text[byte_i + i] != '\0') {
 80285aa:	f04f 0e00 	mov.w	lr, #0
 80285ae:	e7f1      	b.n	8028594 <lv_label_revert_dots+0x5c>
 80285b0:	20000764 	.word	0x20000764

080285b4 <lv_label_destructor>:
{
 80285b4:	b510      	push	{r4, lr}
 80285b6:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 80285b8:	4608      	mov	r0, r1
 80285ba:	f7ff ffa9 	bl	8028510 <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 80285be:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80285c2:	f013 0f08 	tst.w	r3, #8
 80285c6:	d002      	beq.n	80285ce <lv_label_destructor+0x1a>
    label->text = NULL;
 80285c8:	2300      	movs	r3, #0
 80285ca:	6263      	str	r3, [r4, #36]	; 0x24
}
 80285cc:	bd10      	pop	{r4, pc}
    if(!label->static_txt) lv_mem_free(label->text);
 80285ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80285d0:	f7f9 fcca 	bl	8021f68 <lv_mem_free>
 80285d4:	e7f8      	b.n	80285c8 <lv_label_destructor+0x14>

080285d6 <set_ofs_y_anim>:
    label->offset.x    = v;
    lv_obj_invalidate(obj);
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
 80285d6:	b508      	push	{r3, lr}
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 80285d8:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    lv_obj_invalidate(obj);
 80285dc:	f7e0 f82e 	bl	800863c <lv_obj_invalidate>
}
 80285e0:	bd08      	pop	{r3, pc}

080285e2 <set_ofs_x_anim>:
{
 80285e2:	b508      	push	{r3, lr}
    label->offset.x    = v;
 80285e4:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    lv_obj_invalidate(obj);
 80285e8:	f7e0 f828 	bl	800863c <lv_obj_invalidate>
}
 80285ec:	bd08      	pop	{r3, pc}
	...

080285f0 <lv_label_create>:
{
 80285f0:	b510      	push	{r4, lr}
 80285f2:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80285f4:	4803      	ldr	r0, [pc, #12]	; (8028604 <lv_label_create+0x14>)
 80285f6:	f7de ffad 	bl	8007554 <lv_obj_class_create_obj>
 80285fa:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80285fc:	f7df f857 	bl	80076ae <lv_obj_class_init_obj>
}
 8028600:	4620      	mov	r0, r4
 8028602:	bd10      	pop	{r4, pc}
 8028604:	080336dc 	.word	0x080336dc

08028608 <lv_label_set_text_sel_start>:
{
 8028608:	b508      	push	{r3, lr}
    label->sel_start   = index;
 802860a:	63c1      	str	r1, [r0, #60]	; 0x3c
    lv_obj_invalidate(obj);
 802860c:	f7e0 f816 	bl	800863c <lv_obj_invalidate>
}
 8028610:	bd08      	pop	{r3, pc}

08028612 <lv_label_set_text_sel_end>:
{
 8028612:	b508      	push	{r3, lr}
    label->sel_end     = index;
 8028614:	6401      	str	r1, [r0, #64]	; 0x40
    lv_obj_invalidate(obj);
 8028616:	f7e0 f811 	bl	800863c <lv_obj_invalidate>
}
 802861a:	bd08      	pop	{r3, pc}

0802861c <lv_label_get_text>:
}
 802861c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802861e:	4770      	bx	lr

08028620 <lv_label_get_recolor>:
    return label->recolor == 0 ? false : true;
 8028620:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
}
 8028624:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8028628:	4770      	bx	lr
	...

0802862c <lv_label_get_letter_pos>:
{
 802862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028630:	b08d      	sub	sp, #52	; 0x34
 8028632:	9104      	str	r1, [sp, #16]
    LV_ASSERT_NULL(pos);
 8028634:	9203      	str	r2, [sp, #12]
 8028636:	b1a2      	cbz	r2, 8028662 <lv_label_get_letter_pos+0x36>
 8028638:	4604      	mov	r4, r0
    return label->text;
 802863a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 802863c:	4632      	mov	r2, r6
 802863e:	2100      	movs	r1, #0
 8028640:	f7e3 fab4 	bl	800bbac <lv_obj_calculate_style_text_align>
 8028644:	9005      	str	r0, [sp, #20]
    if(txt[0] == '\0') {
 8028646:	7833      	ldrb	r3, [r6, #0]
 8028648:	b9db      	cbnz	r3, 8028682 <lv_label_get_letter_pos+0x56>
        pos->y = 0;
 802864a:	9a03      	ldr	r2, [sp, #12]
 802864c:	8053      	strh	r3, [r2, #2]
        switch(align) {
 802864e:	2802      	cmp	r0, #2
 8028650:	d00e      	beq.n	8028670 <lv_label_get_letter_pos+0x44>
 8028652:	2803      	cmp	r0, #3
 8028654:	d006      	beq.n	8028664 <lv_label_get_letter_pos+0x38>
 8028656:	2801      	cmp	r0, #1
 8028658:	f040 80a3 	bne.w	80287a2 <lv_label_get_letter_pos+0x176>
                pos->x = 0;
 802865c:	2300      	movs	r3, #0
 802865e:	8013      	strh	r3, [r2, #0]
                break;
 8028660:	e09f      	b.n	80287a2 <lv_label_get_letter_pos+0x176>
    LV_ASSERT_NULL(pos);
 8028662:	e7fe      	b.n	8028662 <lv_label_get_letter_pos+0x36>
                pos->x = lv_obj_get_content_width(obj);
 8028664:	4620      	mov	r0, r4
 8028666:	f7df fdae 	bl	80081c6 <lv_obj_get_content_width>
 802866a:	9b03      	ldr	r3, [sp, #12]
 802866c:	8018      	strh	r0, [r3, #0]
                break;
 802866e:	e098      	b.n	80287a2 <lv_label_get_letter_pos+0x176>
                pos->x = lv_obj_get_content_width(obj) / 2;
 8028670:	4620      	mov	r0, r4
 8028672:	f7df fda8 	bl	80081c6 <lv_obj_get_content_width>
 8028676:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802867a:	1043      	asrs	r3, r0, #1
 802867c:	9a03      	ldr	r2, [sp, #12]
 802867e:	8013      	strh	r3, [r2, #0]
                break;
 8028680:	e08f      	b.n	80287a2 <lv_label_get_letter_pos+0x176>
    lv_obj_get_content_coords(obj, &txt_coords);
 8028682:	a90a      	add	r1, sp, #40	; 0x28
 8028684:	4620      	mov	r0, r4
 8028686:	f7df fdd8 	bl	800823a <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802868a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 802868e:	3301      	adds	r3, #1
 8028690:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8028694:	1a9b      	subs	r3, r3, r2
 8028696:	b21b      	sxth	r3, r3
 8028698:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802869a:	2257      	movs	r2, #87	; 0x57
 802869c:	2100      	movs	r1, #0
 802869e:	4620      	mov	r0, r4
 80286a0:	f7e2 fc04 	bl	800aeac <lv_obj_get_style_prop>
 80286a4:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80286a6:	2259      	movs	r2, #89	; 0x59
 80286a8:	2100      	movs	r1, #0
 80286aa:	4620      	mov	r0, r4
 80286ac:	f7e2 fbfe 	bl	800aeac <lv_obj_get_style_prop>
 80286b0:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80286b2:	2258      	movs	r2, #88	; 0x58
 80286b4:	2100      	movs	r1, #0
 80286b6:	4620      	mov	r0, r4
 80286b8:	f7e2 fbf8 	bl	800aeac <lv_obj_get_style_prop>
 80286bc:	9009      	str	r0, [sp, #36]	; 0x24
    return (lv_coord_t)v.num;
 80286be:	b203      	sxth	r3, r0
 80286c0:	9302      	str	r3, [sp, #8]
 80286c2:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 80286c6:	9307      	str	r3, [sp, #28]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80286c8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 80286cc:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80286d0:	f013 0f20 	tst.w	r3, #32
 80286d4:	bf18      	it	ne
 80286d6:	f049 0902 	orrne.w	r9, r9, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80286da:	2201      	movs	r2, #1
 80286dc:	2100      	movs	r1, #0
 80286de:	4620      	mov	r0, r4
 80286e0:	f7e2 fbe4 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80286e4:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80286e6:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80286ea:	4293      	cmp	r3, r2
 80286ec:	d024      	beq.n	8028738 <lv_label_get_letter_pos+0x10c>
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 80286ee:	4b4d      	ldr	r3, [pc, #308]	; (8028824 <lv_label_get_letter_pos+0x1f8>)
 80286f0:	681b      	ldr	r3, [r3, #0]
 80286f2:	9904      	ldr	r1, [sp, #16]
 80286f4:	4630      	mov	r0, r6
 80286f6:	4798      	blx	r3
 80286f8:	4680      	mov	r8, r0
    while(txt[new_line_start] != '\0') {
 80286fa:	7833      	ldrb	r3, [r6, #0]
 80286fc:	b323      	cbz	r3, 8028748 <lv_label_get_letter_pos+0x11c>
 80286fe:	4630      	mov	r0, r6
    lv_coord_t y             = 0;
 8028700:	2500      	movs	r5, #0
    uint32_t line_start      = 0;
 8028702:	462f      	mov	r7, r5
        y += letter_height + line_space;
 8028704:	9b07      	ldr	r3, [sp, #28]
 8028706:	9a06      	ldr	r2, [sp, #24]
 8028708:	eb03 0b02 	add.w	fp, r3, r2
 802870c:	464c      	mov	r4, r9
 802870e:	f8dd 9020 	ldr.w	r9, [sp, #32]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028712:	9401      	str	r4, [sp, #4]
 8028714:	2300      	movs	r3, #0
 8028716:	9300      	str	r3, [sp, #0]
 8028718:	464b      	mov	r3, r9
 802871a:	9a02      	ldr	r2, [sp, #8]
 802871c:	4651      	mov	r1, sl
 802871e:	f7fb fd1b 	bl	8024158 <_lv_txt_get_next_line>
 8028722:	19c3      	adds	r3, r0, r7
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 8028724:	4598      	cmp	r8, r3
 8028726:	d313      	bcc.n	8028750 <lv_label_get_letter_pos+0x124>
 8028728:	18f0      	adds	r0, r6, r3
 802872a:	5cf2      	ldrb	r2, [r6, r3]
 802872c:	2a00      	cmp	r2, #0
 802872e:	d03b      	beq.n	80287a8 <lv_label_get_letter_pos+0x17c>
        y += letter_height + line_space;
 8028730:	445d      	add	r5, fp
 8028732:	b22d      	sxth	r5, r5
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028734:	461f      	mov	r7, r3
 8028736:	e7ec      	b.n	8028712 <lv_label_get_letter_pos+0xe6>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028738:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 802873c:	f013 0f04 	tst.w	r3, #4
 8028740:	bf08      	it	eq
 8028742:	f049 0904 	orreq.w	r9, r9, #4
 8028746:	e7d2      	b.n	80286ee <lv_label_get_letter_pos+0xc2>
    lv_coord_t y             = 0;
 8028748:	2500      	movs	r5, #0
    uint32_t line_start      = 0;
 802874a:	462f      	mov	r7, r5
 802874c:	462c      	mov	r4, r5
 802874e:	e001      	b.n	8028754 <lv_label_get_letter_pos+0x128>
 8028750:	46a1      	mov	r9, r4
 8028752:	461c      	mov	r4, r3
    if(byte_id > 0) {
 8028754:	f1b8 0f00 	cmp.w	r8, #0
 8028758:	d007      	beq.n	802876a <lv_label_get_letter_pos+0x13e>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 802875a:	eb06 0308 	add.w	r3, r6, r8
 802875e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8028762:	2b0a      	cmp	r3, #10
 8028764:	d023      	beq.n	80287ae <lv_label_get_letter_pos+0x182>
 8028766:	2b0d      	cmp	r3, #13
 8028768:	d021      	beq.n	80287ae <lv_label_get_letter_pos+0x182>
    bidi_txt = &txt[line_start];
 802876a:	443e      	add	r6, r7
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 802876c:	f8cd 9000 	str.w	r9, [sp]
 8028770:	9b02      	ldr	r3, [sp, #8]
 8028772:	4652      	mov	r2, sl
 8028774:	eba8 0107 	sub.w	r1, r8, r7
 8028778:	4630      	mov	r0, r6
 802877a:	f7fb fec1 	bl	8024500 <lv_txt_get_width>
 802877e:	4680      	mov	r8, r0
    if(char_id != line_start) x += letter_space;
 8028780:	9b04      	ldr	r3, [sp, #16]
 8028782:	429f      	cmp	r7, r3
 8028784:	d003      	beq.n	802878e <lv_label_get_letter_pos+0x162>
 8028786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028788:	4498      	add	r8, r3
 802878a:	fa0f f888 	sxth.w	r8, r8
    if(align == LV_TEXT_ALIGN_CENTER) {
 802878e:	9b05      	ldr	r3, [sp, #20]
 8028790:	2b02      	cmp	r3, #2
 8028792:	d017      	beq.n	80287c4 <lv_label_get_letter_pos+0x198>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8028794:	9b05      	ldr	r3, [sp, #20]
 8028796:	2b03      	cmp	r3, #3
 8028798:	d030      	beq.n	80287fc <lv_label_get_letter_pos+0x1d0>
    pos->x = x;
 802879a:	9b03      	ldr	r3, [sp, #12]
 802879c:	f8a3 8000 	strh.w	r8, [r3]
    pos->y = y;
 80287a0:	805d      	strh	r5, [r3, #2]
}
 80287a2:	b00d      	add	sp, #52	; 0x34
 80287a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287a8:	46a1      	mov	r9, r4
 80287aa:	461c      	mov	r4, r3
 80287ac:	e7d2      	b.n	8028754 <lv_label_get_letter_pos+0x128>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 80287ae:	f816 3008 	ldrb.w	r3, [r6, r8]
 80287b2:	2b00      	cmp	r3, #0
 80287b4:	d1d9      	bne.n	802876a <lv_label_get_letter_pos+0x13e>
            y += letter_height + line_space;
 80287b6:	9b07      	ldr	r3, [sp, #28]
 80287b8:	9a06      	ldr	r2, [sp, #24]
 80287ba:	4413      	add	r3, r2
 80287bc:	441d      	add	r5, r3
 80287be:	b22d      	sxth	r5, r5
            line_start = byte_id;
 80287c0:	4647      	mov	r7, r8
 80287c2:	e7d2      	b.n	802876a <lv_label_get_letter_pos+0x13e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80287c4:	f8cd 9000 	str.w	r9, [sp]
 80287c8:	9b02      	ldr	r3, [sp, #8]
 80287ca:	4652      	mov	r2, sl
 80287cc:	1be1      	subs	r1, r4, r7
 80287ce:	4630      	mov	r0, r6
 80287d0:	f7fb fe96 	bl	8024500 <lv_txt_get_width>
 80287d4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80287d8:	3301      	adds	r3, #1
 80287da:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80287de:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80287e0:	b21a      	sxth	r2, r3
 80287e2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80287e6:	441a      	add	r2, r3
 80287e8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80287ec:	f340 034f 	sbfx	r3, r0, #1, #16
 80287f0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80287f4:	4498      	add	r8, r3
 80287f6:	fa0f f888 	sxth.w	r8, r8
 80287fa:	e7ce      	b.n	802879a <lv_label_get_letter_pos+0x16e>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80287fc:	f8cd 9000 	str.w	r9, [sp]
 8028800:	9b02      	ldr	r3, [sp, #8]
 8028802:	4652      	mov	r2, sl
 8028804:	1be1      	subs	r1, r4, r7
 8028806:	4630      	mov	r0, r6
 8028808:	f7fb fe7a 	bl	8024500 <lv_txt_get_width>
 802880c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8028810:	3301      	adds	r3, #1
 8028812:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8028816:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 8028818:	b21b      	sxth	r3, r3
 802881a:	1a1b      	subs	r3, r3, r0
 802881c:	4498      	add	r8, r3
 802881e:	fa0f f888 	sxth.w	r8, r8
 8028822:	e7ba      	b.n	802879a <lv_label_get_letter_pos+0x16e>
 8028824:	20000764 	.word	0x20000764

08028828 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 8028828:	2900      	cmp	r1, #0
 802882a:	f000 8096 	beq.w	802895a <lv_label_get_letter_on+0x132>
{
 802882e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028832:	b091      	sub	sp, #68	; 0x44
 8028834:	4604      	mov	r4, r0
 8028836:	460d      	mov	r5, r1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8028838:	f9b1 3000 	ldrsh.w	r3, [r1]
 802883c:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802883e:	2212      	movs	r2, #18
 8028840:	2100      	movs	r1, #0
 8028842:	f7e2 fb33 	bl	800aeac <lv_obj_get_style_prop>
 8028846:	9009      	str	r0, [sp, #36]	; 0x24
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8028848:	886d      	ldrh	r5, [r5, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802884a:	2210      	movs	r2, #16
 802884c:	2100      	movs	r1, #0
 802884e:	4620      	mov	r0, r4
 8028850:	f7e2 fb2c 	bl	800aeac <lv_obj_get_style_prop>
 8028854:	1a2d      	subs	r5, r5, r0
 8028856:	fa0f f985 	sxth.w	r9, r5
    lv_obj_get_content_coords(obj, &txt_coords);
 802885a:	a90e      	add	r1, sp, #56	; 0x38
 802885c:	4620      	mov	r0, r4
 802885e:	f7df fcec 	bl	800823a <lv_obj_get_content_coords>
    return label->text;
 8028862:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8028864:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8028868:	3301      	adds	r3, #1
 802886a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 802886e:	1a9b      	subs	r3, r3, r2
 8028870:	b21b      	sxth	r3, r3
 8028872:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8028874:	2257      	movs	r2, #87	; 0x57
 8028876:	2100      	movs	r1, #0
 8028878:	4620      	mov	r0, r4
 802887a:	f7e2 fb17 	bl	800aeac <lv_obj_get_style_prop>
 802887e:	4605      	mov	r5, r0
 8028880:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8028882:	2259      	movs	r2, #89	; 0x59
 8028884:	2100      	movs	r1, #0
 8028886:	4620      	mov	r0, r4
 8028888:	f7e2 fb10 	bl	800aeac <lv_obj_get_style_prop>
 802888c:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802888e:	2258      	movs	r2, #88	; 0x58
 8028890:	2100      	movs	r1, #0
 8028892:	4620      	mov	r0, r4
 8028894:	f7e2 fb0a 	bl	800aeac <lv_obj_get_style_prop>
 8028898:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)v.num;
 802889a:	b203      	sxth	r3, r0
 802889c:	9303      	str	r3, [sp, #12]
 802889e:	f9b5 b008 	ldrsh.w	fp, [r5, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80288a2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 80288a6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80288aa:	9206      	str	r2, [sp, #24]
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80288ac:	f013 0f20 	tst.w	r3, #32
 80288b0:	bf1c      	itt	ne
 80288b2:	f042 0302 	orrne.w	r3, r2, #2
 80288b6:	9306      	strne	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80288b8:	2201      	movs	r2, #1
 80288ba:	2100      	movs	r1, #0
 80288bc:	4620      	mov	r0, r4
 80288be:	f7e2 faf5 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80288c2:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80288c4:	f242 72d1 	movw	r2, #10193	; 0x27d1
 80288c8:	4293      	cmp	r3, r2
 80288ca:	d047      	beq.n	802895c <lv_label_get_letter_on+0x134>
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 80288cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80288ce:	2100      	movs	r1, #0
 80288d0:	4620      	mov	r0, r4
 80288d2:	f7e3 f96b 	bl	800bbac <lv_obj_calculate_style_text_align>
 80288d6:	9007      	str	r0, [sp, #28]
    while(txt[line_start] != '\0') {
 80288d8:	7833      	ldrb	r3, [r6, #0]
 80288da:	2b00      	cmp	r3, #0
 80288dc:	d056      	beq.n	802898c <lv_label_get_letter_on+0x164>
 80288de:	4635      	mov	r5, r6
    lv_coord_t y             = 0;
 80288e0:	f04f 0800 	mov.w	r8, #0
    uint32_t line_start      = 0;
 80288e4:	4644      	mov	r4, r8
        y += letter_height + line_space;
 80288e6:	44da      	add	sl, fp
 80288e8:	9f06      	ldr	r7, [sp, #24]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80288ea:	9701      	str	r7, [sp, #4]
 80288ec:	2300      	movs	r3, #0
 80288ee:	9300      	str	r3, [sp, #0]
 80288f0:	9b04      	ldr	r3, [sp, #16]
 80288f2:	9a03      	ldr	r2, [sp, #12]
 80288f4:	9902      	ldr	r1, [sp, #8]
 80288f6:	4628      	mov	r0, r5
 80288f8:	f7fb fc2e 	bl	8024158 <_lv_txt_get_next_line>
 80288fc:	4622      	mov	r2, r4
 80288fe:	4404      	add	r4, r0
        if(pos.y <= y + letter_height) {
 8028900:	eb08 030b 	add.w	r3, r8, fp
 8028904:	4599      	cmp	r9, r3
 8028906:	dd33      	ble.n	8028970 <lv_label_get_letter_on+0x148>
        y += letter_height + line_space;
 8028908:	44d0      	add	r8, sl
 802890a:	fa0f f888 	sxth.w	r8, r8
    while(txt[line_start] != '\0') {
 802890e:	1935      	adds	r5, r6, r4
 8028910:	5d33      	ldrb	r3, [r6, r4]
 8028912:	2b00      	cmp	r3, #0
 8028914:	d1e9      	bne.n	80288ea <lv_label_get_letter_on+0xc2>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8028916:	4627      	mov	r7, r4
    if(align == LV_TEXT_ALIGN_CENTER) {
 8028918:	9b07      	ldr	r3, [sp, #28]
 802891a:	2b02      	cmp	r3, #2
 802891c:	d03a      	beq.n	8028994 <lv_label_get_letter_on+0x16c>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 802891e:	9b07      	ldr	r3, [sp, #28]
 8028920:	2b03      	cmp	r3, #3
 8028922:	d052      	beq.n	80289ca <lv_label_get_letter_on+0x1a2>
    lv_coord_t x = 0;
 8028924:	f04f 0800 	mov.w	r8, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8028928:	2300      	movs	r3, #0
 802892a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    uint32_t i = 0;
 802892e:	930c      	str	r3, [sp, #48]	; 0x30
    if(new_line_start > 0) {
 8028930:	2c00      	cmp	r4, #0
 8028932:	f000 808c 	beq.w	8028a4e <lv_label_get_letter_on+0x226>
        while(i + line_start < new_line_start) {
 8028936:	42bc      	cmp	r4, r7
 8028938:	f240 8089 	bls.w	8028a4e <lv_label_get_letter_on+0x226>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802893c:	9b08      	ldr	r3, [sp, #32]
 802893e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028940:	eba3 0b02 	sub.w	fp, r3, r2
 8028944:	fa0f fb8b 	sxth.w	fp, fp
    uint32_t i_act = i;
 8028948:	f04f 0a00 	mov.w	sl, #0
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802894c:	9b06      	ldr	r3, [sp, #24]
 802894e:	f003 0901 	and.w	r9, r3, #1
 8028952:	464b      	mov	r3, r9
 8028954:	46b1      	mov	r9, r6
 8028956:	461e      	mov	r6, r3
 8028958:	e065      	b.n	8028a26 <lv_label_get_letter_on+0x1fe>
    LV_ASSERT_NULL(pos_in);
 802895a:	e7fe      	b.n	802895a <lv_label_get_letter_on+0x132>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 802895c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8028960:	f013 0f04 	tst.w	r3, #4
 8028964:	d1b2      	bne.n	80288cc <lv_label_get_letter_on+0xa4>
 8028966:	9b06      	ldr	r3, [sp, #24]
 8028968:	f043 0304 	orr.w	r3, r3, #4
 802896c:	9306      	str	r3, [sp, #24]
 802896e:	e7ad      	b.n	80288cc <lv_label_get_letter_on+0xa4>
            uint32_t tmp = new_line_start;
 8028970:	4617      	mov	r7, r2
 8028972:	940b      	str	r4, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
 8028974:	4b3f      	ldr	r3, [pc, #252]	; (8028a74 <lv_label_get_letter_on+0x24c>)
 8028976:	681b      	ldr	r3, [r3, #0]
 8028978:	a90b      	add	r1, sp, #44	; 0x2c
 802897a:	4630      	mov	r0, r6
 802897c:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 802897e:	280a      	cmp	r0, #10
 8028980:	d0ca      	beq.n	8028918 <lv_label_get_letter_on+0xf0>
 8028982:	5d33      	ldrb	r3, [r6, r4]
 8028984:	2b00      	cmp	r3, #0
 8028986:	d1c7      	bne.n	8028918 <lv_label_get_letter_on+0xf0>
 8028988:	3401      	adds	r4, #1
            break;
 802898a:	e7c5      	b.n	8028918 <lv_label_get_letter_on+0xf0>
    while(txt[line_start] != '\0') {
 802898c:	4635      	mov	r5, r6
    uint32_t line_start      = 0;
 802898e:	2700      	movs	r7, #0
 8028990:	463c      	mov	r4, r7
 8028992:	e7c1      	b.n	8028918 <lv_label_get_letter_on+0xf0>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8028994:	9b06      	ldr	r3, [sp, #24]
 8028996:	9300      	str	r3, [sp, #0]
 8028998:	9b03      	ldr	r3, [sp, #12]
 802899a:	9a02      	ldr	r2, [sp, #8]
 802899c:	1be1      	subs	r1, r4, r7
 802899e:	4628      	mov	r0, r5
 80289a0:	f7fb fdae 	bl	8024500 <lv_txt_get_width>
 80289a4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80289a8:	3301      	adds	r3, #1
 80289aa:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80289ae:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 80289b0:	b21a      	sxth	r2, r3
 80289b2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80289b6:	4413      	add	r3, r2
 80289b8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80289bc:	ea4f 0860 	mov.w	r8, r0, asr #1
 80289c0:	ebc8 0363 	rsb	r3, r8, r3, asr #1
 80289c4:	fa0f f883 	sxth.w	r8, r3
 80289c8:	e7ae      	b.n	8028928 <lv_label_get_letter_on+0x100>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 80289ca:	9b06      	ldr	r3, [sp, #24]
 80289cc:	9300      	str	r3, [sp, #0]
 80289ce:	9b03      	ldr	r3, [sp, #12]
 80289d0:	9a02      	ldr	r2, [sp, #8]
 80289d2:	1be1      	subs	r1, r4, r7
 80289d4:	4628      	mov	r0, r5
 80289d6:	f7fb fd93 	bl	8024500 <lv_txt_get_width>
 80289da:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80289de:	3301      	adds	r3, #1
 80289e0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80289e4:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 80289e6:	1a1b      	subs	r3, r3, r0
 80289e8:	fa0f f883 	sxth.w	r8, r3
 80289ec:	e79c      	b.n	8028928 <lv_label_get_letter_on+0x100>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 80289ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80289f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80289f2:	9802      	ldr	r0, [sp, #8]
 80289f4:	f7f7 fdf3 	bl	80205de <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 80289f8:	b203      	sxth	r3, r0
 80289fa:	4443      	add	r3, r8
 80289fc:	459b      	cmp	fp, r3
 80289fe:	db23      	blt.n	8028a48 <lv_label_get_letter_on+0x220>
 8028a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a02:	19da      	adds	r2, r3, r7
 8028a04:	42a2      	cmp	r2, r4
 8028a06:	d01f      	beq.n	8028a48 <lv_label_get_letter_on+0x220>
 8028a08:	eb09 0207 	add.w	r2, r9, r7
 8028a0c:	f812 200a 	ldrb.w	r2, [r2, sl]
 8028a10:	b1d2      	cbz	r2, 8028a48 <lv_label_get_letter_on+0x220>
            x += letter_space;
 8028a12:	9a05      	ldr	r2, [sp, #20]
 8028a14:	4490      	add	r8, r2
 8028a16:	4440      	add	r0, r8
 8028a18:	fa0f f880 	sxth.w	r8, r0
            i_act = i;
 8028a1c:	469a      	mov	sl, r3
        while(i + line_start < new_line_start) {
 8028a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a20:	443b      	add	r3, r7
 8028a22:	42a3      	cmp	r3, r4
 8028a24:	d224      	bcs.n	8028a70 <lv_label_get_letter_on+0x248>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 8028a26:	ab0c      	add	r3, sp, #48	; 0x30
 8028a28:	aa0b      	add	r2, sp, #44	; 0x2c
 8028a2a:	a90a      	add	r1, sp, #40	; 0x28
 8028a2c:	4628      	mov	r0, r5
 8028a2e:	f7fb fd51 	bl	80244d4 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8028a32:	2e00      	cmp	r6, #0
 8028a34:	d0db      	beq.n	80289ee <lv_label_get_letter_on+0x1c6>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 8028a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028a38:	5ce9      	ldrb	r1, [r5, r3]
 8028a3a:	f10d 0037 	add.w	r0, sp, #55	; 0x37
 8028a3e:	f7fb fb67 	bl	8024110 <_lv_txt_is_cmd>
 8028a42:	2800      	cmp	r0, #0
 8028a44:	d0d3      	beq.n	80289ee <lv_label_get_letter_on+0x1c6>
 8028a46:	e7ea      	b.n	8028a1e <lv_label_get_letter_on+0x1f6>
                i = i_act;
 8028a48:	464e      	mov	r6, r9
 8028a4a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 8028a4e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8028a78 <lv_label_get_letter_on+0x250>
 8028a52:	f8d8 3000 	ldr.w	r3, [r8]
 8028a56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028a58:	4628      	mov	r0, r5
 8028a5a:	4798      	blx	r3
 8028a5c:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8028a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8028a62:	4639      	mov	r1, r7
 8028a64:	4630      	mov	r0, r6
 8028a66:	4798      	blx	r3
}
 8028a68:	4420      	add	r0, r4
 8028a6a:	b011      	add	sp, #68	; 0x44
 8028a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a70:	464e      	mov	r6, r9
 8028a72:	e7ec      	b.n	8028a4e <lv_label_get_letter_on+0x226>
 8028a74:	20000770 	.word	0x20000770
 8028a78:	20000768 	.word	0x20000768

08028a7c <lv_label_refr_text>:
    if(label->text == NULL) return;
 8028a7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8028a7e:	2b00      	cmp	r3, #0
 8028a80:	f000 8289 	beq.w	8028f96 <lv_label_refr_text+0x51a>
{
 8028a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a88:	b09d      	sub	sp, #116	; 0x74
 8028a8a:	4604      	mov	r4, r0
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8028a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028a90:	6303      	str	r3, [r0, #48]	; 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 8028a92:	a91a      	add	r1, sp, #104	; 0x68
 8028a94:	f7df fbd1 	bl	800823a <lv_obj_get_content_coords>
 8028a98:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8028a9c:	3501      	adds	r5, #1
 8028a9e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8028aa2:	1aed      	subs	r5, r5, r3
 8028aa4:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8028aa6:	2257      	movs	r2, #87	; 0x57
 8028aa8:	2100      	movs	r1, #0
 8028aaa:	4620      	mov	r0, r4
 8028aac:	f7e2 f9fe 	bl	800aeac <lv_obj_get_style_prop>
 8028ab0:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8028ab2:	2259      	movs	r2, #89	; 0x59
 8028ab4:	2100      	movs	r1, #0
 8028ab6:	4620      	mov	r0, r4
 8028ab8:	f7e2 f9f8 	bl	800aeac <lv_obj_get_style_prop>
 8028abc:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8028abe:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8028ac2:	2258      	movs	r2, #88	; 0x58
 8028ac4:	2100      	movs	r1, #0
 8028ac6:	4620      	mov	r0, r4
 8028ac8:	f7e2 f9f0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028acc:	b207      	sxth	r7, r0
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8028ace:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8028ad2:	f3c3 1a00 	ubfx	sl, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8028ad6:	f013 0f20 	tst.w	r3, #32
 8028ada:	bf18      	it	ne
 8028adc:	f04a 0a02 	orrne.w	sl, sl, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8028ae0:	2201      	movs	r2, #1
 8028ae2:	2100      	movs	r1, #0
 8028ae4:	4620      	mov	r0, r4
 8028ae6:	f7e2 f9e1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8028aea:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028aec:	f242 73d1 	movw	r3, #10193	; 0x27d1
 8028af0:	4298      	cmp	r0, r3
 8028af2:	d01f      	beq.n	8028b34 <lv_label_refr_text+0xb8>
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8028af4:	f8cd a008 	str.w	sl, [sp, #8]
 8028af8:	9501      	str	r5, [sp, #4]
 8028afa:	f8cd 9000 	str.w	r9, [sp]
 8028afe:	463b      	mov	r3, r7
 8028b00:	4632      	mov	r2, r6
 8028b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8028b04:	a819      	add	r0, sp, #100	; 0x64
 8028b06:	f7fb fd4c 	bl	80245a2 <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 8028b0a:	4620      	mov	r0, r4
 8028b0c:	f7df fbec 	bl	80082e8 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8028b10:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 8028b14:	f001 0107 	and.w	r1, r1, #7
 8028b18:	2902      	cmp	r1, #2
 8028b1a:	d013      	beq.n	8028b44 <lv_label_refr_text+0xc8>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8028b1c:	2903      	cmp	r1, #3
 8028b1e:	f000 80be 	beq.w	8028c9e <lv_label_refr_text+0x222>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 8028b22:	2901      	cmp	r1, #1
 8028b24:	f000 815c 	beq.w	8028de0 <lv_label_refr_text+0x364>
    lv_obj_invalidate(obj);
 8028b28:	4620      	mov	r0, r4
 8028b2a:	f7df fd87 	bl	800863c <lv_obj_invalidate>
}
 8028b2e:	b01d      	add	sp, #116	; 0x74
 8028b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8028b34:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8028b38:	f013 0f04 	tst.w	r3, #4
 8028b3c:	bf08      	it	eq
 8028b3e:	f04a 0a04 	orreq.w	sl, sl, #4
 8028b42:	e7d7      	b.n	8028af4 <lv_label_refr_text+0x78>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8028b44:	2265      	movs	r2, #101	; 0x65
 8028b46:	2100      	movs	r1, #0
 8028b48:	4620      	mov	r0, r4
 8028b4a:	f7e2 f9af 	bl	800aeac <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8028b4e:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8028b50:	2d00      	cmp	r5, #0
 8028b52:	d04d      	beq.n	8028bf0 <lv_label_refr_text+0x174>
        lv_anim_init(&a);
 8028b54:	a808      	add	r0, sp, #32
 8028b56:	f7f8 f971 	bl	8020e3c <lv_anim_init>
    a->var = var;
 8028b5a:	9408      	str	r4, [sp, #32]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 8028b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028b60:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    a->playback_delay = delay;
 8028b64:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8028b68:	9315      	str	r3, [sp, #84]	; 0x54
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 8028b6a:	9317      	str	r3, [sp, #92]	; 0x5c
        if(size.x > lv_area_get_width(&txt_coords)) {
 8028b6c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8028b70:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8028b74:	3301      	adds	r3, #1
 8028b76:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8028b7a:	1a5b      	subs	r3, r3, r1
 8028b7c:	b21b      	sxth	r3, r3
 8028b7e:	429a      	cmp	r2, r3
 8028b80:	dd46      	ble.n	8028c10 <lv_label_refr_text+0x194>
    a->start_value = start;
 8028b82:	2100      	movs	r1, #0
 8028b84:	9110      	str	r1, [sp, #64]	; 0x40
    a->current_value = start;
 8028b86:	9111      	str	r1, [sp, #68]	; 0x44
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8028b88:	1a9b      	subs	r3, r3, r2
    a->end_value = end;
 8028b8a:	9312      	str	r3, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 8028b8c:	49a5      	ldr	r1, [pc, #660]	; (8028e24 <lv_label_refr_text+0x3a8>)
 8028b8e:	9109      	str	r1, [sp, #36]	; 0x24
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8028b90:	4620      	mov	r0, r4
 8028b92:	f7f8 f9e9 	bl	8020f68 <lv_anim_get>
            if(anim_cur) {
 8028b96:	2800      	cmp	r0, #0
 8028b98:	d037      	beq.n	8028c0a <lv_label_refr_text+0x18e>
                act_time = anim_cur->act_time;
 8028b9a:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 8028b9c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8028ba0:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
 8028ba4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028ba6:	4291      	cmp	r1, r2
 8028ba8:	dd10      	ble.n	8028bcc <lv_label_refr_text+0x150>
                a.act_time = act_time;      /*To keep the old position*/
 8028baa:	9214      	str	r2, [sp, #80]	; 0x50
                a.early_apply = 0;
 8028bac:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 8028bb0:	f36f 0200 	bfc	r2, #0, #1
 8028bb4:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
                if(playback_now) {
 8028bb8:	b143      	cbz	r3, 8028bcc <lv_label_refr_text+0x150>
                    a.playback_now = 1;
 8028bba:	b2d3      	uxtb	r3, r2
 8028bbc:	f043 0302 	orr.w	r3, r3, #2
 8028bc0:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    tmp      = a.start_value;
 8028bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
                    a.start_value = a.end_value;
 8028bc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028bc8:	9210      	str	r2, [sp, #64]	; 0x40
                    a.end_value   = tmp;
 8028bca:	9312      	str	r3, [sp, #72]	; 0x48
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8028bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028bce:	9910      	ldr	r1, [sp, #64]	; 0x40
 8028bd0:	4628      	mov	r0, r5
 8028bd2:	f7f8 f9e5 	bl	8020fa0 <lv_anim_speed_to_time>
    a->time = duration;
 8028bd6:	9013      	str	r0, [sp, #76]	; 0x4c
    a->playback_time = time;
 8028bd8:	9016      	str	r0, [sp, #88]	; 0x58
            lv_anim_start(&a);
 8028bda:	a808      	add	r0, sp, #32
 8028bdc:	f7f8 f980 	bl	8020ee0 <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 8028be0:	4991      	ldr	r1, [pc, #580]	; (8028e28 <lv_label_refr_text+0x3ac>)
 8028be2:	4620      	mov	r0, r4
 8028be4:	f7f8 f944 	bl	8020e70 <lv_anim_del>
            label->offset.y = 0;
 8028be8:	2300      	movs	r3, #0
 8028bea:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8028bee:	e79b      	b.n	8028b28 <lv_label_refr_text+0xac>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8028bf0:	4620      	mov	r0, r4
 8028bf2:	f7e3 f879 	bl	800bce8 <lv_obj_get_disp>
 8028bf6:	f7f7 ff69 	bl	8020acc <lv_disp_get_dpi>
 8028bfa:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
 8028bfe:	fb85 3500 	smull	r3, r5, r5, r0
 8028c02:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 8028c06:	b2ad      	uxth	r5, r5
 8028c08:	e7a4      	b.n	8028b54 <lv_label_refr_text+0xd8>
            bool playback_now = false;
 8028c0a:	2300      	movs	r3, #0
            int32_t act_time = 0;
 8028c0c:	461a      	mov	r2, r3
 8028c0e:	e7c9      	b.n	8028ba4 <lv_label_refr_text+0x128>
            lv_anim_del(obj, set_ofs_x_anim);
 8028c10:	4984      	ldr	r1, [pc, #528]	; (8028e24 <lv_label_refr_text+0x3a8>)
 8028c12:	4620      	mov	r0, r4
 8028c14:	f7f8 f92c 	bl	8020e70 <lv_anim_del>
            label->offset.x = 0;
 8028c18:	2300      	movs	r3, #0
 8028c1a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8028c1e:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8028c22:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8028c26:	3301      	adds	r3, #1
 8028c28:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 8028c2c:	1a5b      	subs	r3, r3, r1
 8028c2e:	b21b      	sxth	r3, r3
 8028c30:	429a      	cmp	r2, r3
 8028c32:	ddd5      	ble.n	8028be0 <lv_label_refr_text+0x164>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 8028c34:	1a9b      	subs	r3, r3, r2
 8028c36:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
 8028c3a:	1a9b      	subs	r3, r3, r2
    a->start_value = start;
 8028c3c:	2200      	movs	r2, #0
 8028c3e:	9210      	str	r2, [sp, #64]	; 0x40
    a->current_value = start;
 8028c40:	9211      	str	r2, [sp, #68]	; 0x44
    a->end_value = end;
 8028c42:	9312      	str	r3, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 8028c44:	4978      	ldr	r1, [pc, #480]	; (8028e28 <lv_label_refr_text+0x3ac>)
 8028c46:	9109      	str	r1, [sp, #36]	; 0x24
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8028c48:	4620      	mov	r0, r4
 8028c4a:	f7f8 f98d 	bl	8020f68 <lv_anim_get>
            if(anim_cur) {
 8028c4e:	b318      	cbz	r0, 8028c98 <lv_label_refr_text+0x21c>
                act_time = anim_cur->act_time;
 8028c50:	6b02      	ldr	r2, [r0, #48]	; 0x30
                playback_now = anim_cur->playback_now;
 8028c52:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8028c56:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
 8028c5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028c5c:	4291      	cmp	r1, r2
 8028c5e:	dd10      	ble.n	8028c82 <lv_label_refr_text+0x206>
                a.act_time = act_time;      /*To keep the old position*/
 8028c60:	9214      	str	r2, [sp, #80]	; 0x50
                a.early_apply = 0;
 8028c62:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
 8028c66:	f36f 0200 	bfc	r2, #0, #1
 8028c6a:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
                if(playback_now) {
 8028c6e:	b143      	cbz	r3, 8028c82 <lv_label_refr_text+0x206>
                    a.playback_now = 1;
 8028c70:	b2d3      	uxtb	r3, r2
 8028c72:	f043 0302 	orr.w	r3, r3, #2
 8028c76:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
                    tmp      = a.start_value;
 8028c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
                    a.start_value = a.end_value;
 8028c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028c7e:	9210      	str	r2, [sp, #64]	; 0x40
                    a.end_value   = tmp;
 8028c80:	9312      	str	r3, [sp, #72]	; 0x48
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8028c82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028c84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8028c86:	4628      	mov	r0, r5
 8028c88:	f7f8 f98a 	bl	8020fa0 <lv_anim_speed_to_time>
    a->time = duration;
 8028c8c:	9013      	str	r0, [sp, #76]	; 0x4c
    a->playback_time = time;
 8028c8e:	9016      	str	r0, [sp, #88]	; 0x58
            lv_anim_start(&a);
 8028c90:	a808      	add	r0, sp, #32
 8028c92:	f7f8 f925 	bl	8020ee0 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8028c96:	e747      	b.n	8028b28 <lv_label_refr_text+0xac>
            bool playback_now = false;
 8028c98:	2300      	movs	r3, #0
            int32_t act_time = 0;
 8028c9a:	461a      	mov	r2, r3
 8028c9c:	e7dd      	b.n	8028c5a <lv_label_refr_text+0x1de>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8028c9e:	2263      	movs	r2, #99	; 0x63
 8028ca0:	2100      	movs	r1, #0
 8028ca2:	4620      	mov	r0, r4
 8028ca4:	f7e2 f902 	bl	800aeac <lv_obj_get_style_prop>
 8028ca8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8028caa:	2265      	movs	r2, #101	; 0x65
 8028cac:	2100      	movs	r1, #0
 8028cae:	4620      	mov	r0, r4
 8028cb0:	f7e2 f8fc 	bl	800aeac <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 8028cb4:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8028cb6:	2d00      	cmp	r5, #0
 8028cb8:	d03c      	beq.n	8028d34 <lv_label_refr_text+0x2b8>
        lv_anim_init(&a);
 8028cba:	a808      	add	r0, sp, #32
 8028cbc:	f7f8 f8be 	bl	8020e3c <lv_anim_init>
    a->var = var;
 8028cc0:	9408      	str	r4, [sp, #32]
    a->repeat_cnt = cnt;
 8028cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028cc6:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8028cca:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8028cce:	3301      	adds	r3, #1
 8028cd0:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8028cd4:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 8028cd6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8028cda:	b21b      	sxth	r3, r3
 8028cdc:	429a      	cmp	r2, r3
 8028cde:	dd43      	ble.n	8028d68 <lv_label_refr_text+0x2ec>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 8028ce0:	2220      	movs	r2, #32
 8028ce2:	4611      	mov	r1, r2
 8028ce4:	4630      	mov	r0, r6
 8028ce6:	f7f7 fc7a 	bl	80205de <lv_font_get_glyph_width>
 8028cea:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8028cee:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8028cf2:	1a82      	subs	r2, r0, r2
    a->start_value = start;
 8028cf4:	2100      	movs	r1, #0
 8028cf6:	9110      	str	r1, [sp, #64]	; 0x40
    a->current_value = start;
 8028cf8:	9111      	str	r1, [sp, #68]	; 0x44
    a->end_value = end;
 8028cfa:	9212      	str	r2, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 8028cfc:	4e49      	ldr	r6, [pc, #292]	; (8028e24 <lv_label_refr_text+0x3a8>)
 8028cfe:	9609      	str	r6, [sp, #36]	; 0x24
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8028d00:	4628      	mov	r0, r5
 8028d02:	f7f8 f94d 	bl	8020fa0 <lv_anim_speed_to_time>
    a->time = duration;
 8028d06:	9013      	str	r0, [sp, #76]	; 0x4c
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8028d08:	4631      	mov	r1, r6
 8028d0a:	4620      	mov	r0, r4
 8028d0c:	f7f8 f92c 	bl	8020f68 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028d10:	b1e8      	cbz	r0, 8028d4e <lv_label_refr_text+0x2d2>
 8028d12:	6b03      	ldr	r3, [r0, #48]	; 0x30
            if(anim_template) {
 8028d14:	b1ef      	cbz	r7, 8028d52 <lv_label_refr_text+0x2d6>
                a.act_time = anim_template->act_time;
 8028d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028d18:	9314      	str	r3, [sp, #80]	; 0x50
                a.repeat_delay = anim_template->repeat_delay;
 8028d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028d1c:	9317      	str	r3, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 8028d1e:	a808      	add	r0, sp, #32
 8028d20:	f7f8 f8de 	bl	8020ee0 <lv_anim_start>
            lv_anim_del(obj, set_ofs_y_anim);
 8028d24:	4940      	ldr	r1, [pc, #256]	; (8028e28 <lv_label_refr_text+0x3ac>)
 8028d26:	4620      	mov	r0, r4
 8028d28:	f7f8 f8a2 	bl	8020e70 <lv_anim_del>
            label->offset.y = 0;
 8028d2c:	2300      	movs	r3, #0
 8028d2e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8028d32:	e6f9      	b.n	8028b28 <lv_label_refr_text+0xac>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 8028d34:	4620      	mov	r0, r4
 8028d36:	f7e2 ffd7 	bl	800bce8 <lv_obj_get_disp>
 8028d3a:	f7f7 fec7 	bl	8020acc <lv_disp_get_dpi>
 8028d3e:	f1a5 35aa 	sub.w	r5, r5, #2863311530	; 0xaaaaaaaa
 8028d42:	fb85 3500 	smull	r3, r5, r5, r0
 8028d46:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 8028d4a:	b2ad      	uxth	r5, r5
 8028d4c:	e7b5      	b.n	8028cba <lv_label_refr_text+0x23e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028d4e:	2300      	movs	r3, #0
 8028d50:	e7e0      	b.n	8028d14 <lv_label_refr_text+0x298>
            else if(act_time < a.time) {
 8028d52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028d54:	429a      	cmp	r2, r3
 8028d56:	dde2      	ble.n	8028d1e <lv_label_refr_text+0x2a2>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8028d58:	9314      	str	r3, [sp, #80]	; 0x50
                a.early_apply = 0;
 8028d5a:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8028d5e:	f36f 0300 	bfc	r3, #0, #1
 8028d62:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
 8028d66:	e7da      	b.n	8028d1e <lv_label_refr_text+0x2a2>
            lv_anim_del(obj, set_ofs_x_anim);
 8028d68:	492e      	ldr	r1, [pc, #184]	; (8028e24 <lv_label_refr_text+0x3a8>)
 8028d6a:	4620      	mov	r0, r4
 8028d6c:	f7f8 f880 	bl	8020e70 <lv_anim_del>
            label->offset.x = 0;
 8028d70:	2300      	movs	r3, #0
 8028d72:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8028d76:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8028d7a:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8028d7e:	3301      	adds	r3, #1
 8028d80:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 8028d84:	1a5b      	subs	r3, r3, r1
 8028d86:	b21b      	sxth	r3, r3
 8028d88:	429a      	cmp	r2, r3
 8028d8a:	ddcb      	ble.n	8028d24 <lv_label_refr_text+0x2a8>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8028d8c:	4252      	negs	r2, r2
 8028d8e:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8028d92:	1ad2      	subs	r2, r2, r3
    a->start_value = start;
 8028d94:	2100      	movs	r1, #0
 8028d96:	9110      	str	r1, [sp, #64]	; 0x40
    a->current_value = start;
 8028d98:	9111      	str	r1, [sp, #68]	; 0x44
    a->end_value = end;
 8028d9a:	9212      	str	r2, [sp, #72]	; 0x48
    a->exec_cb = exec_cb;
 8028d9c:	4e22      	ldr	r6, [pc, #136]	; (8028e28 <lv_label_refr_text+0x3ac>)
 8028d9e:	9609      	str	r6, [sp, #36]	; 0x24
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8028da0:	4628      	mov	r0, r5
 8028da2:	f7f8 f8fd 	bl	8020fa0 <lv_anim_speed_to_time>
    a->time = duration;
 8028da6:	9013      	str	r0, [sp, #76]	; 0x4c
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 8028da8:	4631      	mov	r1, r6
 8028daa:	4620      	mov	r0, r4
 8028dac:	f7f8 f8dc 	bl	8020f68 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028db0:	b148      	cbz	r0, 8028dc6 <lv_label_refr_text+0x34a>
 8028db2:	6b03      	ldr	r3, [r0, #48]	; 0x30
            if(anim_template) {
 8028db4:	b14f      	cbz	r7, 8028dca <lv_label_refr_text+0x34e>
                a.act_time = anim_template->act_time;
 8028db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028db8:	9314      	str	r3, [sp, #80]	; 0x50
                a.repeat_delay = anim_template->repeat_delay;
 8028dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028dbc:	9317      	str	r3, [sp, #92]	; 0x5c
            lv_anim_start(&a);
 8028dbe:	a808      	add	r0, sp, #32
 8028dc0:	f7f8 f88e 	bl	8020ee0 <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8028dc4:	e6b0      	b.n	8028b28 <lv_label_refr_text+0xac>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028dc6:	2300      	movs	r3, #0
 8028dc8:	e7f4      	b.n	8028db4 <lv_label_refr_text+0x338>
            else if(act_time < a.time) {
 8028dca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028dcc:	429a      	cmp	r2, r3
 8028dce:	ddf6      	ble.n	8028dbe <lv_label_refr_text+0x342>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8028dd0:	9314      	str	r3, [sp, #80]	; 0x50
                a.early_apply = 0;
 8028dd2:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8028dd6:	f36f 0300 	bfc	r3, #0, #1
 8028dda:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
 8028dde:	e7ee      	b.n	8028dbe <lv_label_refr_text+0x342>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8028de0:	f9bd 2066 	ldrsh.w	r2, [sp, #102]	; 0x66
 8028de4:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8028de8:	3301      	adds	r3, #1
 8028dea:	f8bd 106a 	ldrh.w	r1, [sp, #106]	; 0x6a
 8028dee:	1a5b      	subs	r3, r3, r1
 8028df0:	b21b      	sxth	r3, r3
 8028df2:	429a      	cmp	r2, r3
 8028df4:	dc03      	bgt.n	8028dfe <lv_label_refr_text+0x382>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8028df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028dfa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028dfc:	e694      	b.n	8028b28 <lv_label_refr_text+0xac>
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8028dfe:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8028e02:	4293      	cmp	r3, r2
 8028e04:	db03      	blt.n	8028e0e <lv_label_refr_text+0x392>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8028e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028e0c:	e68c      	b.n	8028b28 <lv_label_refr_text+0xac>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 8028e0e:	4b07      	ldr	r3, [pc, #28]	; (8028e2c <lv_label_refr_text+0x3b0>)
 8028e10:	681b      	ldr	r3, [r3, #0]
 8028e12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028e14:	4798      	blx	r3
 8028e16:	2803      	cmp	r0, #3
 8028e18:	d80a      	bhi.n	8028e30 <lv_label_refr_text+0x3b4>
            label->dot_end = LV_LABEL_DOT_END_INV;
 8028e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8028e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028e20:	e682      	b.n	8028b28 <lv_label_refr_text+0xac>
 8028e22:	bf00      	nop
 8028e24:	080285e3 	.word	0x080285e3
 8028e28:	080285d7 	.word	0x080285d7
 8028e2c:	20000778 	.word	0x20000778
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8028e30:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8028e34:	3501      	adds	r5, #1
 8028e36:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8028e3a:	1aed      	subs	r5, r5, r3
 8028e3c:	b2ad      	uxth	r5, r5
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 8028e3e:	222e      	movs	r2, #46	; 0x2e
 8028e40:	4611      	mov	r1, r2
 8028e42:	4630      	mov	r0, r6
 8028e44:	f7f7 fbcb 	bl	80205de <lv_font_get_glyph_width>
 8028e48:	4407      	add	r7, r0
            p.x = lv_area_get_width(&txt_coords) -
 8028e4a:	ebc7 3387 	rsb	r3, r7, r7, lsl #14
 8028e4e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8028e52:	442f      	add	r7, r5
 8028e54:	f8ad 701c 	strh.w	r7, [sp, #28]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8028e58:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
 8028e5c:	3301      	adds	r3, #1
 8028e5e:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
 8028e62:	1a9b      	subs	r3, r3, r2
 8028e64:	b29a      	uxth	r2, r3
 8028e66:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
            y_overed = p.y %
 8028e6a:	b21b      	sxth	r3, r3
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8028e6c:	4489      	add	r9, r1
            y_overed = p.y %
 8028e6e:	fb93 f0f9 	sdiv	r0, r3, r9
 8028e72:	fb09 3910 	mls	r9, r9, r0, r3
            if(y_overed >= lv_font_get_line_height(font)) {
 8028e76:	fa0f f389 	sxth.w	r3, r9
 8028e7a:	428b      	cmp	r3, r1
                p.y += lv_font_get_line_height(font);
 8028e7c:	bfac      	ite	ge
 8028e7e:	1853      	addge	r3, r2, r1
                p.y -= line_space;
 8028e80:	eba2 0308 	sublt.w	r3, r2, r8
 8028e84:	eba3 0909 	sub.w	r9, r3, r9
 8028e88:	fa0f f389 	sxth.w	r3, r9
 8028e8c:	f8ad 301e 	strh.w	r3, [sp, #30]
            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 8028e90:	a907      	add	r1, sp, #28
 8028e92:	4620      	mov	r0, r4
 8028e94:	f7ff fcc8 	bl	8028828 <lv_label_get_letter_on>
 8028e98:	4606      	mov	r6, r0
            size_t txt_len = strlen(label->text);
 8028e9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8028e9c:	4628      	mov	r0, r5
 8028e9e:	f7d7 f9cb 	bl	8000238 <strlen>
 8028ea2:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8028ea4:	4b3c      	ldr	r3, [pc, #240]	; (8028f98 <lv_label_refr_text+0x51c>)
 8028ea6:	681b      	ldr	r3, [r3, #0]
 8028ea8:	4631      	mov	r1, r6
 8028eaa:	4628      	mov	r0, r5
 8028eac:	4798      	blx	r3
 8028eae:	4605      	mov	r5, r0
 8028eb0:	9008      	str	r0, [sp, #32]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8028eb2:	1cc7      	adds	r7, r0, #3
 8028eb4:	45b8      	cmp	r8, r7
 8028eb6:	d20b      	bcs.n	8028ed0 <lv_label_refr_text+0x454>
                _lv_txt_encoded_prev(label->text, &byte_id);
 8028eb8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8028f9c <lv_label_refr_text+0x520>
 8028ebc:	f8d9 3000 	ldr.w	r3, [r9]
 8028ec0:	a908      	add	r1, sp, #32
 8028ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028ec4:	4798      	blx	r3
                letter_id--;
 8028ec6:	3e01      	subs	r6, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8028ec8:	9d08      	ldr	r5, [sp, #32]
 8028eca:	1cef      	adds	r7, r5, #3
 8028ecc:	4547      	cmp	r7, r8
 8028ece:	d8f5      	bhi.n	8028ebc <lv_label_refr_text+0x440>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8028ed0:	2304      	movs	r3, #4
 8028ed2:	9305      	str	r3, [sp, #20]
            uint8_t len = 0;
 8028ed4:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8028ed8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8028fa0 <lv_label_refr_text+0x524>
                _lv_txt_encoded_next(label->text, &byte_id);
 8028edc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8028fa4 <lv_label_refr_text+0x528>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8028ee0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028ee2:	f8db 3000 	ldr.w	r3, [fp]
 8028ee6:	9a08      	ldr	r2, [sp, #32]
 8028ee8:	4410      	add	r0, r2
 8028eea:	4798      	blx	r3
 8028eec:	4481      	add	r9, r0
 8028eee:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(label->text, &byte_id);
 8028ef2:	f8da 3000 	ldr.w	r3, [sl]
 8028ef6:	a908      	add	r1, sp, #32
 8028ef8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028efa:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8028efc:	f1b9 0f03 	cmp.w	r9, #3
 8028f00:	d828      	bhi.n	8028f54 <lv_label_refr_text+0x4d8>
 8028f02:	9b08      	ldr	r3, [sp, #32]
 8028f04:	4543      	cmp	r3, r8
 8028f06:	d803      	bhi.n	8028f10 <lv_label_refr_text+0x494>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8028f08:	9b05      	ldr	r3, [sp, #20]
 8028f0a:	3b01      	subs	r3, #1
 8028f0c:	9305      	str	r3, [sp, #20]
 8028f0e:	d1e7      	bne.n	8028ee0 <lv_label_refr_text+0x464>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8028f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028f12:	eb03 0805 	add.w	r8, r3, r5
 8028f16:	46ca      	mov	sl, r9
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8028f18:	4620      	mov	r0, r4
 8028f1a:	f7ff faf9 	bl	8028510 <lv_label_dot_tmp_free>
        label->dot_tmp_alloc = false;
 8028f1e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028f22:	f36f 1386 	bfc	r3, #6, #1
 8028f26:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        lv_memcpy(label->dot.tmp, data, len);
 8028f2a:	4652      	mov	r2, sl
 8028f2c:	4641      	mov	r1, r8
 8028f2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8028f32:	f7f9 f8e5 	bl	8022100 <lv_memcpy>
                    label->text[byte_id_ori + i] = '.';
 8028f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028f38:	222e      	movs	r2, #46	; 0x2e
 8028f3a:	555a      	strb	r2, [r3, r5]
 8028f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028f3e:	442b      	add	r3, r5
 8028f40:	705a      	strb	r2, [r3, #1]
 8028f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028f44:	442b      	add	r3, r5
 8028f46:	709a      	strb	r2, [r3, #2]
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8028f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028f4a:	2200      	movs	r2, #0
 8028f4c:	55da      	strb	r2, [r3, r7]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8028f4e:	3603      	adds	r6, #3
 8028f50:	62e6      	str	r6, [r4, #44]	; 0x2c
 8028f52:	e5e9      	b.n	8028b28 <lv_label_refr_text+0xac>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 8028f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028f56:	eb03 0805 	add.w	r8, r3, r5
 8028f5a:	46ca      	mov	sl, r9
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8028f5c:	4620      	mov	r0, r4
 8028f5e:	f7ff fad7 	bl	8028510 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8028f62:	f1b9 0f04 	cmp.w	r9, #4
 8028f66:	d9da      	bls.n	8028f1e <lv_label_refr_text+0x4a2>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8028f68:	f109 0001 	add.w	r0, r9, #1
 8028f6c:	f7f8 ffde 	bl	8021f2c <lv_mem_alloc>
 8028f70:	62a0      	str	r0, [r4, #40]	; 0x28
        if(label->dot.tmp_ptr == NULL) {
 8028f72:	2800      	cmp	r0, #0
 8028f74:	f43f add8 	beq.w	8028b28 <lv_label_refr_text+0xac>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8028f78:	464a      	mov	r2, r9
 8028f7a:	4641      	mov	r1, r8
 8028f7c:	f7f9 f8c0 	bl	8022100 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8028f80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8028f82:	2200      	movs	r2, #0
 8028f84:	f803 2009 	strb.w	r2, [r3, r9]
        label->dot_tmp_alloc    = true;
 8028f88:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028f90:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8028f94:	e7cf      	b.n	8028f36 <lv_label_refr_text+0x4ba>
 8028f96:	4770      	bx	lr
 8028f98:	20000764 	.word	0x20000764
 8028f9c:	20000770 	.word	0x20000770
 8028fa0:	20000774 	.word	0x20000774
 8028fa4:	2000076c 	.word	0x2000076c

08028fa8 <lv_label_set_text>:
{
 8028fa8:	b538      	push	{r3, r4, r5, lr}
 8028faa:	4604      	mov	r4, r0
 8028fac:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 8028fae:	f7df fb45 	bl	800863c <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 8028fb2:	b1ed      	cbz	r5, 8028ff0 <lv_label_set_text+0x48>
    if(label->text == text && label->static_txt == 0) {
 8028fb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8028fb6:	42a8      	cmp	r0, r5
 8028fb8:	d01b      	beq.n	8028ff2 <lv_label_set_text+0x4a>
        if(label->text != NULL && label->static_txt == 0) {
 8028fba:	b120      	cbz	r0, 8028fc6 <lv_label_set_text+0x1e>
 8028fbc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028fc0:	f013 0f08 	tst.w	r3, #8
 8028fc4:	d025      	beq.n	8029012 <lv_label_set_text+0x6a>
        size_t len = strlen(text) + 1;
 8028fc6:	4628      	mov	r0, r5
 8028fc8:	f7d7 f936 	bl	8000238 <strlen>
        label->text = lv_mem_alloc(len);
 8028fcc:	3001      	adds	r0, #1
 8028fce:	f7f8 ffad 	bl	8021f2c <lv_mem_alloc>
 8028fd2:	6260      	str	r0, [r4, #36]	; 0x24
        LV_ASSERT_MALLOC(label->text);
 8028fd4:	b310      	cbz	r0, 802901c <lv_label_set_text+0x74>
        strcpy(label->text, text);
 8028fd6:	4629      	mov	r1, r5
 8028fd8:	f003 ff9c 	bl	802cf14 <strcpy>
        label->static_txt = 0;
 8028fdc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028fe0:	f36f 03c3 	bfc	r3, #3, #1
 8028fe4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8028fe8:	4620      	mov	r0, r4
 8028fea:	f7ff fd47 	bl	8028a7c <lv_label_refr_text>
}
 8028fee:	bd38      	pop	{r3, r4, r5, pc}
    if(text == NULL) text = label->text;
 8028ff0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if(label->text == text && label->static_txt == 0) {
 8028ff2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8028ff6:	f013 0f08 	tst.w	r3, #8
 8028ffa:	d1e4      	bne.n	8028fc6 <lv_label_set_text+0x1e>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 8028ffc:	4628      	mov	r0, r5
 8028ffe:	f7d7 f91b 	bl	8000238 <strlen>
 8029002:	1c41      	adds	r1, r0, #1
 8029004:	4628      	mov	r0, r5
 8029006:	f7f8 ffcb 	bl	8021fa0 <lv_mem_realloc>
        LV_ASSERT_MALLOC(label->text);
 802900a:	b108      	cbz	r0, 8029010 <lv_label_set_text+0x68>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 802900c:	6260      	str	r0, [r4, #36]	; 0x24
 802900e:	e7eb      	b.n	8028fe8 <lv_label_set_text+0x40>
        LV_ASSERT_MALLOC(label->text);
 8029010:	e7fe      	b.n	8029010 <lv_label_set_text+0x68>
            lv_mem_free(label->text);
 8029012:	f7f8 ffa9 	bl	8021f68 <lv_mem_free>
            label->text = NULL;
 8029016:	2300      	movs	r3, #0
 8029018:	6263      	str	r3, [r4, #36]	; 0x24
 802901a:	e7d4      	b.n	8028fc6 <lv_label_set_text+0x1e>
        LV_ASSERT_MALLOC(label->text);
 802901c:	e7fe      	b.n	802901c <lv_label_set_text+0x74>

0802901e <lv_label_set_text_fmt>:
{
 802901e:	b40e      	push	{r1, r2, r3}
 8029020:	b530      	push	{r4, r5, lr}
 8029022:	b082      	sub	sp, #8
 8029024:	9d05      	ldr	r5, [sp, #20]
    LV_ASSERT_NULL(fmt);
 8029026:	b1ed      	cbz	r5, 8029064 <lv_label_set_text_fmt+0x46>
 8029028:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 802902a:	f7df fb07 	bl	800863c <lv_obj_invalidate>
    if(label->text != NULL && label->static_txt == 0) {
 802902e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8029030:	b120      	cbz	r0, 802903c <lv_label_set_text_fmt+0x1e>
 8029032:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8029036:	f013 0f08 	tst.w	r3, #8
 802903a:	d014      	beq.n	8029066 <lv_label_set_text_fmt+0x48>
    va_start(args, fmt);
 802903c:	a906      	add	r1, sp, #24
 802903e:	9101      	str	r1, [sp, #4]
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8029040:	4628      	mov	r0, r5
 8029042:	f7fb fa27 	bl	8024494 <_lv_txt_set_text_vfmt>
 8029046:	6260      	str	r0, [r4, #36]	; 0x24
    label->static_txt = 0; /*Now the text is dynamically allocated*/
 8029048:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 802904c:	f36f 03c3 	bfc	r3, #3, #1
 8029050:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 8029054:	4620      	mov	r0, r4
 8029056:	f7ff fd11 	bl	8028a7c <lv_label_refr_text>
}
 802905a:	b002      	add	sp, #8
 802905c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029060:	b003      	add	sp, #12
 8029062:	4770      	bx	lr
    LV_ASSERT_NULL(fmt);
 8029064:	e7fe      	b.n	8029064 <lv_label_set_text_fmt+0x46>
        lv_mem_free(label->text);
 8029066:	f7f8 ff7f 	bl	8021f68 <lv_mem_free>
        label->text = NULL;
 802906a:	2300      	movs	r3, #0
 802906c:	6263      	str	r3, [r4, #36]	; 0x24
 802906e:	e7e5      	b.n	802903c <lv_label_set_text_fmt+0x1e>

08029070 <lv_label_set_text_static>:
{
 8029070:	b538      	push	{r3, r4, r5, lr}
 8029072:	4604      	mov	r4, r0
 8029074:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 8029076:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 802907a:	f013 0f08 	tst.w	r3, #8
 802907e:	d105      	bne.n	802908c <lv_label_set_text_static+0x1c>
 8029080:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8029082:	b118      	cbz	r0, 802908c <lv_label_set_text_static+0x1c>
        lv_mem_free(label->text);
 8029084:	f7f8 ff70 	bl	8021f68 <lv_mem_free>
        label->text = NULL;
 8029088:	2300      	movs	r3, #0
 802908a:	6263      	str	r3, [r4, #36]	; 0x24
    if(text != NULL) {
 802908c:	b135      	cbz	r5, 802909c <lv_label_set_text_static+0x2c>
        label->static_txt = 1;
 802908e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8029092:	f043 0308 	orr.w	r3, r3, #8
 8029096:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        label->text       = (char *)text;
 802909a:	6265      	str	r5, [r4, #36]	; 0x24
    lv_label_refr_text(obj);
 802909c:	4620      	mov	r0, r4
 802909e:	f7ff fced 	bl	8028a7c <lv_label_refr_text>
}
 80290a2:	bd38      	pop	{r3, r4, r5, pc}

080290a4 <lv_label_set_long_mode>:
{
 80290a4:	b538      	push	{r3, r4, r5, lr}
 80290a6:	4604      	mov	r4, r0
 80290a8:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 80290aa:	4917      	ldr	r1, [pc, #92]	; (8029108 <lv_label_set_long_mode+0x64>)
 80290ac:	f7f7 fee0 	bl	8020e70 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 80290b0:	4916      	ldr	r1, [pc, #88]	; (802910c <lv_label_set_long_mode+0x68>)
 80290b2:	4620      	mov	r0, r4
 80290b4:	f7f7 fedc 	bl	8020e70 <lv_anim_del>
    label->offset.x = 0;
 80290b8:	2300      	movs	r3, #0
 80290ba:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    label->offset.y = 0;
 80290be:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 80290c2:	1eaa      	subs	r2, r5, #2
 80290c4:	b2d2      	uxtb	r2, r2
 80290c6:	2a02      	cmp	r2, #2
 80290c8:	bf8c      	ite	hi
 80290ca:	2200      	movhi	r2, #0
 80290cc:	2201      	movls	r2, #1
 80290ce:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80290d2:	f362 1345 	bfi	r3, r2, #5, #1
 80290d6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 80290da:	f003 0307 	and.w	r3, r3, #7
 80290de:	2b01      	cmp	r3, #1
 80290e0:	d009      	beq.n	80290f6 <lv_label_set_long_mode+0x52>
    label->long_mode = long_mode;
 80290e2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80290e6:	f365 0302 	bfi	r3, r5, #0, #3
 80290ea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    lv_label_refr_text(obj);
 80290ee:	4620      	mov	r0, r4
 80290f0:	f7ff fcc4 	bl	8028a7c <lv_label_refr_text>
}
 80290f4:	bd38      	pop	{r3, r4, r5, pc}
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 80290f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80290f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80290fc:	d0f1      	beq.n	80290e2 <lv_label_set_long_mode+0x3e>
        lv_label_revert_dots(obj);
 80290fe:	4620      	mov	r0, r4
 8029100:	f7ff fa1a 	bl	8028538 <lv_label_revert_dots>
 8029104:	e7ed      	b.n	80290e2 <lv_label_set_long_mode+0x3e>
 8029106:	bf00      	nop
 8029108:	080285e3 	.word	0x080285e3
 802910c:	080285d7 	.word	0x080285d7

08029110 <lv_label_constructor>:
{
 8029110:	b538      	push	{r3, r4, r5, lr}
 8029112:	460c      	mov	r4, r1
    label->text       = NULL;
 8029114:	2500      	movs	r5, #0
 8029116:	624d      	str	r5, [r1, #36]	; 0x24
    label->static_txt = 0;
 8029118:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 802911c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8029120:	62ca      	str	r2, [r1, #44]	; 0x2c
    label->offset.x = 0;
 8029122:	f8a1 5044 	strh.w	r5, [r1, #68]	; 0x44
    label->offset.y = 0;
 8029126:	f8a1 5046 	strh.w	r5, [r1, #70]	; 0x46
    label->hint.line_start = -1;
 802912a:	630a      	str	r2, [r1, #48]	; 0x30
    label->hint.coord_y    = 0;
 802912c:	638d      	str	r5, [r1, #56]	; 0x38
    label->hint.y          = 0;
 802912e:	634d      	str	r5, [r1, #52]	; 0x34
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8029130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8029134:	63ca      	str	r2, [r1, #60]	; 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 8029136:	640a      	str	r2, [r1, #64]	; 0x40
    label->dot.tmp_ptr   = NULL;
 8029138:	628d      	str	r5, [r1, #40]	; 0x28
    label->dot_tmp_alloc = 0;
 802913a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 802913e:	f365 1386 	bfi	r3, r5, #6, #1
 8029142:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8029146:	2102      	movs	r1, #2
 8029148:	4620      	mov	r0, r4
 802914a:	f7dd ff4d 	bl	8006fe8 <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 802914e:	4629      	mov	r1, r5
 8029150:	4620      	mov	r0, r4
 8029152:	f7ff ffa7 	bl	80290a4 <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 8029156:	4902      	ldr	r1, [pc, #8]	; (8029160 <lv_label_constructor+0x50>)
 8029158:	4620      	mov	r0, r4
 802915a:	f7ff ff25 	bl	8028fa8 <lv_label_set_text>
}
 802915e:	bd38      	pop	{r3, r4, r5, pc}
 8029160:	0802d4b4 	.word	0x0802d4b4

08029164 <lv_label_event>:
{
 8029164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029168:	b093      	sub	sp, #76	; 0x4c
 802916a:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802916c:	48b6      	ldr	r0, [pc, #728]	; (8029448 <lv_label_event+0x2e4>)
 802916e:	f7db f82c 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8029172:	2801      	cmp	r0, #1
 8029174:	d002      	beq.n	802917c <lv_label_event+0x18>
}
 8029176:	b013      	add	sp, #76	; 0x4c
 8029178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802917c:	4628      	mov	r0, r5
 802917e:	f7db f947 	bl	8004410 <lv_event_get_code>
 8029182:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8029184:	4628      	mov	r0, r5
 8029186:	f7db f93f 	bl	8004408 <lv_event_get_target>
 802918a:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 802918c:	2c2a      	cmp	r4, #42	; 0x2a
 802918e:	d066      	beq.n	802925e <lv_label_event+0xfa>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8029190:	2c13      	cmp	r4, #19
 8029192:	d06a      	beq.n	802926a <lv_label_event+0x106>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8029194:	2c29      	cmp	r4, #41	; 0x29
 8029196:	d076      	beq.n	8029286 <lv_label_event+0x122>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8029198:	2c2c      	cmp	r4, #44	; 0x2c
 802919a:	d07a      	beq.n	8029292 <lv_label_event+0x12e>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802919c:	2c15      	cmp	r4, #21
 802919e:	d1ea      	bne.n	8029176 <lv_label_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 80291a0:	4628      	mov	r0, r5
 80291a2:	f7db f931 	bl	8004408 <lv_event_get_target>
 80291a6:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80291a8:	4628      	mov	r0, r5
 80291aa:	f7db f9a1 	bl	80044f0 <lv_event_get_draw_ctx>
 80291ae:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 80291b0:	a906      	add	r1, sp, #24
 80291b2:	4620      	mov	r0, r4
 80291b4:	f7df f841 	bl	800823a <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80291b8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 80291bc:	f3c3 1600 	ubfx	r6, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80291c0:	f013 0f20 	tst.w	r3, #32
 80291c4:	bf18      	it	ne
 80291c6:	f046 0602 	orrne.w	r6, r6, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80291ca:	2201      	movs	r2, #1
 80291cc:	2100      	movs	r1, #0
 80291ce:	4620      	mov	r0, r4
 80291d0:	f7e1 fe6c 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80291d4:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80291d6:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80291da:	4298      	cmp	r0, r3
 80291dc:	f000 80ab 	beq.w	8029336 <lv_label_event+0x1d2>
    lv_draw_label_dsc_init(&label_draw_dsc);
 80291e0:	a80a      	add	r0, sp, #40	; 0x28
 80291e2:	f7e4 fd67 	bl	800dcb4 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 80291e6:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80291ea:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    label_draw_dsc.ofs_y = label->offset.y;
 80291ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80291f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    label_draw_dsc.flag = flag;
 80291f6:	f88d 6045 	strb.w	r6, [sp, #69]	; 0x45
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 80291fa:	aa0a      	add	r2, sp, #40	; 0x28
 80291fc:	2100      	movs	r1, #0
 80291fe:	4620      	mov	r0, r4
 8029200:	f7de fc03 	bl	8007a0a <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8029204:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8029208:	b913      	cbnz	r3, 8029210 <lv_label_event+0xac>
 802920a:	2301      	movs	r3, #1
 802920c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    return label->sel_start;
 8029210:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8029212:	930b      	str	r3, [sp, #44]	; 0x2c
    return label->sel_end;
 8029214:	6c22      	ldr	r2, [r4, #64]	; 0x40
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8029216:	920c      	str	r2, [sp, #48]	; 0x30
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8029218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802921c:	428b      	cmp	r3, r1
 802921e:	d002      	beq.n	8029226 <lv_label_event+0xc2>
 8029220:	428a      	cmp	r2, r1
 8029222:	f040 8090 	bne.w	8029346 <lv_label_event+0x1e2>
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8029226:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 802922a:	f003 0306 	and.w	r3, r3, #6
 802922e:	2b02      	cmp	r3, #2
 8029230:	f000 80a0 	beq.w	8029374 <lv_label_event+0x210>
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8029234:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8029238:	f003 0307 	and.w	r3, r3, #7
 802923c:	2b03      	cmp	r3, #3
 802923e:	f000 80bd 	beq.w	80293bc <lv_label_event+0x258>
 8029242:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8029246:	3301      	adds	r3, #1
 8029248:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802924c:	1a9b      	subs	r3, r3, r2
 802924e:	b21b      	sxth	r3, r3
 8029250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029254:	f2c0 80da 	blt.w	802940c <lv_label_event+0x2a8>
    lv_draw_label_hint_t * hint = &label->hint;
 8029258:	f104 0730 	add.w	r7, r4, #48	; 0x30
 802925c:	e0af      	b.n	80293be <lv_label_event+0x25a>
        lv_label_revert_dots(obj);
 802925e:	f7ff f96b 	bl	8028538 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8029262:	4630      	mov	r0, r6
 8029264:	f7ff fc0a 	bl	8028a7c <lv_label_refr_text>
 8029268:	e785      	b.n	8029176 <lv_label_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802926a:	2257      	movs	r2, #87	; 0x57
 802926c:	2100      	movs	r1, #0
 802926e:	f7e1 fe1d 	bl	800aeac <lv_obj_get_style_prop>
        lv_event_set_ext_draw_size(e, font_h / 4);
 8029272:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8029276:	2900      	cmp	r1, #0
 8029278:	bfb8      	it	lt
 802927a:	3103      	addlt	r1, #3
 802927c:	1089      	asrs	r1, r1, #2
 802927e:	4628      	mov	r0, r5
 8029280:	f7db f93e 	bl	8004500 <lv_event_set_ext_draw_size>
 8029284:	e777      	b.n	8029176 <lv_label_event+0x12>
        lv_label_revert_dots(obj);
 8029286:	f7ff f957 	bl	8028538 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 802928a:	4630      	mov	r0, r6
 802928c:	f7ff fbf6 	bl	8028a7c <lv_label_refr_text>
 8029290:	e771      	b.n	8029176 <lv_label_event+0x12>
 8029292:	2257      	movs	r2, #87	; 0x57
 8029294:	2100      	movs	r1, #0
 8029296:	f7e1 fe09 	bl	800aeac <lv_obj_get_style_prop>
 802929a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802929c:	2258      	movs	r2, #88	; 0x58
 802929e:	2100      	movs	r1, #0
 80292a0:	4630      	mov	r0, r6
 80292a2:	f7e1 fe03 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80292a6:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80292a8:	2259      	movs	r2, #89	; 0x59
 80292aa:	2100      	movs	r1, #0
 80292ac:	4630      	mov	r0, r6
 80292ae:	f7e1 fdfd 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80292b2:	fa0f f880 	sxth.w	r8, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 80292b6:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 80292ba:	f3c3 1900 	ubfx	r9, r3, #4, #1
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 80292be:	f013 0f20 	tst.w	r3, #32
 80292c2:	bf18      	it	ne
 80292c4:	f049 0902 	orrne.w	r9, r9, #2
        lv_coord_t w = lv_obj_get_content_width(obj);
 80292c8:	4630      	mov	r0, r6
 80292ca:	f7de ff7c 	bl	80081c6 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 80292ce:	2201      	movs	r2, #1
 80292d0:	2100      	movs	r1, #0
 80292d2:	4630      	mov	r0, r6
 80292d4:	f7e1 fdea 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80292d8:	b200      	sxth	r0, r0
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 80292da:	f242 73d1 	movw	r3, #10193	; 0x27d1
 80292de:	4298      	cmp	r0, r3
 80292e0:	d104      	bne.n	80292ec <lv_label_event+0x188>
 80292e2:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 80292e6:	f013 0f04 	tst.w	r3, #4
 80292ea:	d021      	beq.n	8029330 <lv_label_event+0x1cc>
        else w = lv_obj_get_content_width(obj);
 80292ec:	4630      	mov	r0, r6
 80292ee:	f7de ff6a 	bl	80081c6 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 80292f2:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80292f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80292f8:	9001      	str	r0, [sp, #4]
 80292fa:	f8cd 8000 	str.w	r8, [sp]
 80292fe:	463b      	mov	r3, r7
 8029300:	4622      	mov	r2, r4
 8029302:	a80a      	add	r0, sp, #40	; 0x28
 8029304:	f7fb f94d 	bl	80245a2 <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8029308:	4628      	mov	r0, r5
 802930a:	f7db f885 	bl	8004418 <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 802930e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8029312:	f9b0 2000 	ldrsh.w	r2, [r0]
 8029316:	4293      	cmp	r3, r2
 8029318:	bfb8      	it	lt
 802931a:	4613      	movlt	r3, r2
 802931c:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 802931e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8029322:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8029326:	4293      	cmp	r3, r2
 8029328:	bfb8      	it	lt
 802932a:	4613      	movlt	r3, r2
 802932c:	8043      	strh	r3, [r0, #2]
 802932e:	e722      	b.n	8029176 <lv_label_event+0x12>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8029330:	f641 70ff 	movw	r0, #8191	; 0x1fff
 8029334:	e7dd      	b.n	80292f2 <lv_label_event+0x18e>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8029336:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 802933a:	f013 0f04 	tst.w	r3, #4
 802933e:	bf08      	it	eq
 8029340:	f046 0604 	orreq.w	r6, r6, #4
 8029344:	e74c      	b.n	80291e0 <lv_label_event+0x7c>
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8029346:	2255      	movs	r2, #85	; 0x55
 8029348:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802934c:	4620      	mov	r0, r4
 802934e:	f7e1 fdad 	bl	800aeac <lv_obj_get_style_prop>
 8029352:	4602      	mov	r2, r0
 8029354:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029358:	4620      	mov	r0, r4
 802935a:	f7e2 facd 	bl	800b8f8 <_lv_obj_style_apply_color_filter>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 802935e:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8029362:	2220      	movs	r2, #32
 8029364:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029368:	4620      	mov	r0, r4
 802936a:	f7e1 fd9f 	bl	800aeac <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 802936e:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8029372:	e758      	b.n	8029226 <lv_label_event+0xc2>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8029374:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8029378:	3b02      	subs	r3, #2
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 802937a:	b2db      	uxtb	r3, r3
 802937c:	2b01      	cmp	r3, #1
 802937e:	f63f af59 	bhi.w	8029234 <lv_label_event+0xd0>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8029382:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8029384:	9602      	str	r6, [sp, #8]
 8029386:	f641 73ff 	movw	r3, #8191	; 0x1fff
 802938a:	9301      	str	r3, [sp, #4]
 802938c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8029390:	9300      	str	r3, [sp, #0]
 8029392:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8029396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029398:	a808      	add	r0, sp, #32
 802939a:	f7fb f902 	bl	80245a2 <lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802939e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80293a2:	3301      	adds	r3, #1
 80293a4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80293a8:	1a9b      	subs	r3, r3, r2
        if(size.x > lv_area_get_width(&txt_coords)) {
 80293aa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80293ae:	b21b      	sxth	r3, r3
 80293b0:	429a      	cmp	r2, r3
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 80293b2:	bfc4      	itt	gt
 80293b4:	2301      	movgt	r3, #1
 80293b6:	f88d 3044 	strbgt.w	r3, [sp, #68]	; 0x44
 80293ba:	e73b      	b.n	8029234 <lv_label_event+0xd0>
        hint = NULL;
 80293bc:	2700      	movs	r7, #0
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 80293be:	68aa      	ldr	r2, [r5, #8]
 80293c0:	a906      	add	r1, sp, #24
 80293c2:	a808      	add	r0, sp, #32
 80293c4:	f7f7 fe9d 	bl	8021102 <_lv_area_intersect>
    if(!is_common) return;
 80293c8:	2800      	cmp	r0, #0
 80293ca:	f43f aed4 	beq.w	8029176 <lv_label_event+0x12>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 80293ce:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80293d2:	f013 0f07 	tst.w	r3, #7
 80293d6:	d01b      	beq.n	8029410 <lv_label_event+0x2ac>
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 80293d8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80293dc:	f003 0306 	and.w	r3, r3, #6
 80293e0:	2b02      	cmp	r3, #2
 80293e2:	d022      	beq.n	802942a <lv_label_event+0x2c6>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80293e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80293e6:	9700      	str	r7, [sp, #0]
 80293e8:	aa06      	add	r2, sp, #24
 80293ea:	a90a      	add	r1, sp, #40	; 0x28
 80293ec:	4628      	mov	r0, r5
 80293ee:	f7e4 fc95 	bl	800dd1c <lv_draw_label>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80293f2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 80293f6:	ab08      	add	r3, sp, #32
 80293f8:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 80293fa:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80293fe:	f003 0307 	and.w	r3, r3, #7
 8029402:	2b03      	cmp	r3, #3
 8029404:	d022      	beq.n	802944c <lv_label_event+0x2e8>
    draw_ctx->clip_area = clip_area_ori;
 8029406:	f8c5 8008 	str.w	r8, [r5, #8]
 802940a:	e6b4      	b.n	8029176 <lv_label_event+0x12>
        hint = NULL;
 802940c:	2700      	movs	r7, #0
 802940e:	e7d6      	b.n	80293be <lv_label_event+0x25a>
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8029410:	4620      	mov	r0, r4
 8029412:	f7e0 fabd 	bl	8009990 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 8029416:	4242      	negs	r2, r0
 8029418:	b212      	sxth	r2, r2
 802941a:	2100      	movs	r1, #0
 802941c:	a806      	add	r0, sp, #24
 802941e:	f7f7 fe61 	bl	80210e4 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8029422:	8b63      	ldrh	r3, [r4, #26]
 8029424:	f8ad 301e 	strh.w	r3, [sp, #30]
 8029428:	e7d6      	b.n	80293d8 <lv_label_event+0x274>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 802942a:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &txt_clip;
 802942e:	ab08      	add	r3, sp, #32
 8029430:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8029432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029434:	9700      	str	r7, [sp, #0]
 8029436:	aa06      	add	r2, sp, #24
 8029438:	a90a      	add	r1, sp, #40	; 0x28
 802943a:	4628      	mov	r0, r5
 802943c:	f7e4 fc6e 	bl	800dd1c <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8029440:	f8c5 8008 	str.w	r8, [r5, #8]
 8029444:	e7d5      	b.n	80293f2 <lv_label_event+0x28e>
 8029446:	bf00      	nop
 8029448:	080336dc 	.word	0x080336dc
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 802944c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802944e:	9602      	str	r6, [sp, #8]
 8029450:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8029454:	9301      	str	r3, [sp, #4]
 8029456:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802945a:	9300      	str	r3, [sp, #0]
 802945c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8029460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029462:	a805      	add	r0, sp, #20
 8029464:	f7fb f89d 	bl	80245a2 <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 8029468:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 802946c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8029470:	3301      	adds	r3, #1
 8029472:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8029476:	1a5b      	subs	r3, r3, r1
 8029478:	b21b      	sxth	r3, r3
 802947a:	429a      	cmp	r2, r3
 802947c:	dc1e      	bgt.n	80294bc <lv_label_event+0x358>
        if(size.y > lv_area_get_height(&txt_coords)) {
 802947e:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8029482:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8029486:	3301      	adds	r3, #1
 8029488:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 802948c:	1a5b      	subs	r3, r3, r1
 802948e:	b21b      	sxth	r3, r3
 8029490:	429a      	cmp	r2, r3
 8029492:	ddb8      	ble.n	8029406 <lv_label_event+0x2a2>
            label_draw_dsc.ofs_x = label->offset.x;
 8029494:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8029498:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 802949c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 802949e:	891b      	ldrh	r3, [r3, #8]
 80294a0:	4413      	add	r3, r2
 80294a2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80294a6:	4413      	add	r3, r2
 80294a8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80294ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80294ae:	9700      	str	r7, [sp, #0]
 80294b0:	aa06      	add	r2, sp, #24
 80294b2:	a90a      	add	r1, sp, #40	; 0x28
 80294b4:	4628      	mov	r0, r5
 80294b6:	f7e4 fc31 	bl	800dd1c <lv_draw_label>
 80294ba:	e7a4      	b.n	8029406 <lv_label_event+0x2a2>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80294bc:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
 80294c0:	4432      	add	r2, r6
 80294c2:	b296      	uxth	r6, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 80294c4:	2220      	movs	r2, #32
 80294c6:	4611      	mov	r1, r2
 80294c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80294ca:	f7f7 f888 	bl	80205de <lv_font_get_glyph_width>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 80294ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80294d2:	4406      	add	r6, r0
 80294d4:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
            label_draw_dsc.ofs_y = label->offset.y;
 80294d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80294dc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 80294e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80294e2:	9700      	str	r7, [sp, #0]
 80294e4:	aa06      	add	r2, sp, #24
 80294e6:	a90a      	add	r1, sp, #40	; 0x28
 80294e8:	4628      	mov	r0, r5
 80294ea:	f7e4 fc17 	bl	800dd1c <lv_draw_label>
 80294ee:	e7c6      	b.n	802947e <lv_label_event+0x31a>

080294f0 <lv_label_is_char_under_pos>:
    LV_ASSERT_NULL(pos);
 80294f0:	2900      	cmp	r1, #0
 80294f2:	d062      	beq.n	80295ba <lv_label_is_char_under_pos+0xca>
{
 80294f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80294f8:	b08f      	sub	sp, #60	; 0x3c
 80294fa:	4604      	mov	r4, r0
 80294fc:	468a      	mov	sl, r1
    lv_obj_get_content_coords(obj, &txt_coords);
 80294fe:	a90c      	add	r1, sp, #48	; 0x30
 8029500:	f7de fe9b 	bl	800823a <lv_obj_get_content_coords>
    return label->text;
 8029504:	6a66      	ldr	r6, [r4, #36]	; 0x24
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8029506:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802950a:	3301      	adds	r3, #1
 802950c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8029510:	1a9b      	subs	r3, r3, r2
 8029512:	b21b      	sxth	r3, r3
 8029514:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029516:	2257      	movs	r2, #87	; 0x57
 8029518:	2100      	movs	r1, #0
 802951a:	4620      	mov	r0, r4
 802951c:	f7e1 fcc6 	bl	800aeac <lv_obj_get_style_prop>
 8029520:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8029522:	2259      	movs	r2, #89	; 0x59
 8029524:	2100      	movs	r1, #0
 8029526:	4620      	mov	r0, r4
 8029528:	f7e1 fcc0 	bl	800aeac <lv_obj_get_style_prop>
 802952c:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802952e:	2258      	movs	r2, #88	; 0x58
 8029530:	2100      	movs	r1, #0
 8029532:	4620      	mov	r0, r4
 8029534:	f7e1 fcba 	bl	800aeac <lv_obj_get_style_prop>
 8029538:	9007      	str	r0, [sp, #28]
    return (lv_coord_t)v.num;
 802953a:	b203      	sxth	r3, r0
 802953c:	9303      	str	r3, [sp, #12]
 802953e:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 8029542:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8029544:	2100      	movs	r1, #0
 8029546:	4620      	mov	r0, r4
 8029548:	f7e2 fb30 	bl	800bbac <lv_obj_calculate_style_text_align>
 802954c:	9006      	str	r0, [sp, #24]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 802954e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    lv_text_flag_t flag       = LV_TEXT_FLAG_NONE;
 8029552:	f3c3 1900 	ubfx	r9, r3, #4, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8029556:	f013 0f20 	tst.w	r3, #32
 802955a:	bf18      	it	ne
 802955c:	f049 0902 	orrne.w	r9, r9, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8029560:	2201      	movs	r2, #1
 8029562:	2100      	movs	r1, #0
 8029564:	4620      	mov	r0, r4
 8029566:	f7e1 fca1 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802956a:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 802956c:	f242 72d1 	movw	r2, #10193	; 0x27d1
 8029570:	4293      	cmp	r3, r2
 8029572:	d023      	beq.n	80295bc <lv_label_is_char_under_pos+0xcc>
    while(txt[line_start] != '\0') {
 8029574:	7833      	ldrb	r3, [r6, #0]
 8029576:	b34b      	cbz	r3, 80295cc <lv_label_is_char_under_pos+0xdc>
 8029578:	4637      	mov	r7, r6
 802957a:	2500      	movs	r5, #0
 802957c:	462c      	mov	r4, r5
        y += letter_height + line_space;
 802957e:	9b05      	ldr	r3, [sp, #20]
 8029580:	445b      	add	r3, fp
 8029582:	9305      	str	r3, [sp, #20]
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8029584:	f8cd 9004 	str.w	r9, [sp, #4]
 8029588:	2300      	movs	r3, #0
 802958a:	9300      	str	r3, [sp, #0]
 802958c:	9b04      	ldr	r3, [sp, #16]
 802958e:	9a03      	ldr	r2, [sp, #12]
 8029590:	4641      	mov	r1, r8
 8029592:	4638      	mov	r0, r7
 8029594:	f7fa fde0 	bl	8024158 <_lv_txt_get_next_line>
 8029598:	4621      	mov	r1, r4
 802959a:	4404      	add	r4, r0
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 802959c:	f9ba 2002 	ldrsh.w	r2, [sl, #2]
 80295a0:	eb05 030b 	add.w	r3, r5, fp
 80295a4:	429a      	cmp	r2, r3
 80295a6:	dd15      	ble.n	80295d4 <lv_label_is_char_under_pos+0xe4>
        y += letter_height + line_space;
 80295a8:	9b05      	ldr	r3, [sp, #20]
 80295aa:	441d      	add	r5, r3
 80295ac:	b22d      	sxth	r5, r5
    while(txt[line_start] != '\0') {
 80295ae:	1937      	adds	r7, r6, r4
 80295b0:	5d33      	ldrb	r3, [r6, r4]
 80295b2:	2b00      	cmp	r3, #0
 80295b4:	d1e6      	bne.n	8029584 <lv_label_is_char_under_pos+0x94>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 80295b6:	46a3      	mov	fp, r4
 80295b8:	e00d      	b.n	80295d6 <lv_label_is_char_under_pos+0xe6>
    LV_ASSERT_NULL(pos);
 80295ba:	e7fe      	b.n	80295ba <lv_label_is_char_under_pos+0xca>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80295bc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80295c0:	f013 0f04 	tst.w	r3, #4
 80295c4:	d1d6      	bne.n	8029574 <lv_label_is_char_under_pos+0x84>
 80295c6:	f049 0904 	orr.w	r9, r9, #4
 80295ca:	e7d3      	b.n	8029574 <lv_label_is_char_under_pos+0x84>
    while(txt[line_start] != '\0') {
 80295cc:	4637      	mov	r7, r6
 80295ce:	469b      	mov	fp, r3
 80295d0:	461c      	mov	r4, r3
 80295d2:	e000      	b.n	80295d6 <lv_label_is_char_under_pos+0xe6>
 80295d4:	468b      	mov	fp, r1
    if(align == LV_TEXT_ALIGN_CENTER) {
 80295d6:	9b06      	ldr	r3, [sp, #24]
 80295d8:	2b02      	cmp	r3, #2
 80295da:	d019      	beq.n	8029610 <lv_label_is_char_under_pos+0x120>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80295dc:	9b06      	ldr	r3, [sp, #24]
 80295de:	2b03      	cmp	r3, #3
 80295e0:	d030      	beq.n	8029644 <lv_label_is_char_under_pos+0x154>
    lv_coord_t x      = 0;
 80295e2:	2500      	movs	r5, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80295e4:	2300      	movs	r3, #0
 80295e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i           = line_start;
 80295ea:	465a      	mov	r2, fp
 80295ec:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    uint32_t letter      = '\0';
 80295f0:	9309      	str	r3, [sp, #36]	; 0x24
    uint32_t letter_next = '\0';
 80295f2:	9308      	str	r3, [sp, #32]
    if(new_line_start > 0) {
 80295f4:	2c00      	cmp	r4, #0
 80295f6:	d062      	beq.n	80296be <lv_label_is_char_under_pos+0x1ce>
        while(i <= new_line_start - 1) {
 80295f8:	3c01      	subs	r4, #1
 80295fa:	455c      	cmp	r4, fp
 80295fc:	d375      	bcc.n	80296ea <lv_label_is_char_under_pos+0x1fa>
    lv_coord_t last_x = 0;
 80295fe:	2700      	movs	r7, #0
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8029600:	f009 0901 	and.w	r9, r9, #1
 8029604:	9704      	str	r7, [sp, #16]
 8029606:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802960a:	464f      	mov	r7, r9
 802960c:	4691      	mov	r9, r2
 802960e:	e03f      	b.n	8029690 <lv_label_is_char_under_pos+0x1a0>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8029610:	f8cd 9000 	str.w	r9, [sp]
 8029614:	9b03      	ldr	r3, [sp, #12]
 8029616:	4642      	mov	r2, r8
 8029618:	4659      	mov	r1, fp
 802961a:	1a61      	subs	r1, r4, r1
 802961c:	4638      	mov	r0, r7
 802961e:	f7fa ff6f 	bl	8024500 <lv_txt_get_width>
 8029622:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8029626:	3301      	adds	r3, #1
 8029628:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802962c:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 802962e:	b21a      	sxth	r2, r3
 8029630:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8029634:	4413      	add	r3, r2
 8029636:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802963a:	1045      	asrs	r5, r0, #1
 802963c:	ebc5 0363 	rsb	r3, r5, r3, asr #1
 8029640:	b21d      	sxth	r5, r3
 8029642:	e7cf      	b.n	80295e4 <lv_label_is_char_under_pos+0xf4>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8029644:	f8cd 9000 	str.w	r9, [sp]
 8029648:	9b03      	ldr	r3, [sp, #12]
 802964a:	4642      	mov	r2, r8
 802964c:	4659      	mov	r1, fp
 802964e:	1a61      	subs	r1, r4, r1
 8029650:	4638      	mov	r0, r7
 8029652:	f7fa ff55 	bl	8024500 <lv_txt_get_width>
 8029656:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 802965a:	3301      	adds	r3, #1
 802965c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8029660:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
 8029662:	1a1b      	subs	r3, r3, r0
 8029664:	b21d      	sxth	r5, r3
 8029666:	e7bd      	b.n	80295e4 <lv_label_is_char_under_pos+0xf4>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8029668:	9a08      	ldr	r2, [sp, #32]
 802966a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802966c:	4640      	mov	r0, r8
 802966e:	f7f6 ffb6 	bl	80205de <lv_font_get_glyph_width>
 8029672:	4428      	add	r0, r5
 8029674:	b283      	uxth	r3, r0
            if(pos->x < x) {
 8029676:	f9ba 2000 	ldrsh.w	r2, [sl]
 802967a:	b200      	sxth	r0, r0
 802967c:	4282      	cmp	r2, r0
 802967e:	db18      	blt.n	80296b2 <lv_label_is_char_under_pos+0x1c2>
            x += letter_space;
 8029680:	445b      	add	r3, fp
            i_current = i;
 8029682:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029686:	9504      	str	r5, [sp, #16]
            x += letter_space;
 8029688:	b21d      	sxth	r5, r3
        while(i <= new_line_start - 1) {
 802968a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802968c:	42a3      	cmp	r3, r4
 802968e:	d814      	bhi.n	80296ba <lv_label_is_char_under_pos+0x1ca>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8029690:	ab0a      	add	r3, sp, #40	; 0x28
 8029692:	aa08      	add	r2, sp, #32
 8029694:	a909      	add	r1, sp, #36	; 0x24
 8029696:	4630      	mov	r0, r6
 8029698:	f7fa ff1c 	bl	80244d4 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 802969c:	2f00      	cmp	r7, #0
 802969e:	d0e3      	beq.n	8029668 <lv_label_is_char_under_pos+0x178>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 80296a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80296a2:	5cf1      	ldrb	r1, [r6, r3]
 80296a4:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 80296a8:	f7fa fd32 	bl	8024110 <_lv_txt_is_cmd>
 80296ac:	2800      	cmp	r0, #0
 80296ae:	d0db      	beq.n	8029668 <lv_label_is_char_under_pos+0x178>
 80296b0:	e7eb      	b.n	802968a <lv_label_is_char_under_pos+0x19a>
                i = i_current;
 80296b2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                break;
 80296b6:	462f      	mov	r7, r5
 80296b8:	e002      	b.n	80296c0 <lv_label_is_char_under_pos+0x1d0>
 80296ba:	9f04      	ldr	r7, [sp, #16]
 80296bc:	e000      	b.n	80296c0 <lv_label_is_char_under_pos+0x1d0>
    lv_coord_t last_x = 0;
 80296be:	2700      	movs	r7, #0
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 80296c0:	9a08      	ldr	r2, [sp, #32]
 80296c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80296c4:	4640      	mov	r0, r8
 80296c6:	f7f6 ff8a 	bl	80205de <lv_font_get_glyph_width>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 80296ca:	f9ba 2000 	ldrsh.w	r2, [sl]
 80296ce:	9903      	ldr	r1, [sp, #12]
 80296d0:	1a7b      	subs	r3, r7, r1
 80296d2:	429a      	cmp	r2, r3
 80296d4:	db0b      	blt.n	80296ee <lv_label_is_char_under_pos+0x1fe>
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 80296d6:	4408      	add	r0, r1
 80296d8:	1c43      	adds	r3, r0, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 80296da:	441f      	add	r7, r3
 80296dc:	42ba      	cmp	r2, r7
 80296de:	bfcc      	ite	gt
 80296e0:	2000      	movgt	r0, #0
 80296e2:	2001      	movle	r0, #1
}
 80296e4:	b00f      	add	sp, #60	; 0x3c
 80296e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t last_x = 0;
 80296ea:	2700      	movs	r7, #0
 80296ec:	e7e8      	b.n	80296c0 <lv_label_is_char_under_pos+0x1d0>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 80296ee:	2000      	movs	r0, #0
 80296f0:	e7f8      	b.n	80296e4 <lv_label_is_char_under_pos+0x1f4>

080296f2 <lv_label_get_text_selection_start>:
}
 80296f2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80296f4:	4770      	bx	lr

080296f6 <lv_label_get_text_selection_end>:
}
 80296f6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80296f8:	4770      	bx	lr
	...

080296fc <lv_label_ins_text>:
    LV_ASSERT_NULL(txt);
 80296fc:	b15a      	cbz	r2, 8029716 <lv_label_ins_text+0x1a>
{
 80296fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029702:	4604      	mov	r4, r0
 8029704:	460e      	mov	r6, r1
 8029706:	4617      	mov	r7, r2
    if(label->static_txt != 0) return;
 8029708:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 802970c:	f013 0f08 	tst.w	r3, #8
 8029710:	d002      	beq.n	8029718 <lv_label_ins_text+0x1c>
}
 8029712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_NULL(txt);
 8029716:	e7fe      	b.n	8029716 <lv_label_ins_text+0x1a>
    lv_obj_invalidate(obj);
 8029718:	f7de ff90 	bl	800863c <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 802971c:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8029720:	4640      	mov	r0, r8
 8029722:	f7d6 fd89 	bl	8000238 <strlen>
 8029726:	4605      	mov	r5, r0
    size_t ins_len = strlen(txt);
 8029728:	4638      	mov	r0, r7
 802972a:	f7d6 fd85 	bl	8000238 <strlen>
    size_t new_len = ins_len + old_len;
 802972e:	4405      	add	r5, r0
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 8029730:	1c69      	adds	r1, r5, #1
 8029732:	4640      	mov	r0, r8
 8029734:	f7f8 fc34 	bl	8021fa0 <lv_mem_realloc>
 8029738:	6260      	str	r0, [r4, #36]	; 0x24
    LV_ASSERT_MALLOC(label->text);
 802973a:	b168      	cbz	r0, 8029758 <lv_label_ins_text+0x5c>
    if(pos == LV_LABEL_POS_LAST) {
 802973c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8029740:	429e      	cmp	r6, r3
 8029742:	d00a      	beq.n	802975a <lv_label_ins_text+0x5e>
    _lv_txt_ins(label->text, pos, txt);
 8029744:	463a      	mov	r2, r7
 8029746:	4631      	mov	r1, r6
 8029748:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802974a:	f7fa fe43 	bl	80243d4 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 802974e:	2100      	movs	r1, #0
 8029750:	4620      	mov	r0, r4
 8029752:	f7ff fc29 	bl	8028fa8 <lv_label_set_text>
 8029756:	e7dc      	b.n	8029712 <lv_label_ins_text+0x16>
    LV_ASSERT_MALLOC(label->text);
 8029758:	e7fe      	b.n	8029758 <lv_label_ins_text+0x5c>
        pos = _lv_txt_get_encoded_length(label->text);
 802975a:	4b02      	ldr	r3, [pc, #8]	; (8029764 <lv_label_ins_text+0x68>)
 802975c:	681b      	ldr	r3, [r3, #0]
 802975e:	4798      	blx	r3
 8029760:	4606      	mov	r6, r0
 8029762:	e7ef      	b.n	8029744 <lv_label_ins_text+0x48>
 8029764:	20000778 	.word	0x20000778

08029768 <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8029768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802976c:	b089      	sub	sp, #36	; 0x24
 802976e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 8029770:	485f      	ldr	r0, [pc, #380]	; (80298f0 <lv_line_event+0x188>)
 8029772:	f7da fd2a 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8029776:	2801      	cmp	r0, #1
 8029778:	d002      	beq.n	8029780 <lv_line_event+0x18>
            }
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 802977a:	b009      	add	sp, #36	; 0x24
 802977c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8029780:	4620      	mov	r0, r4
 8029782:	f7da fe45 	bl	8004410 <lv_event_get_code>
 8029786:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8029788:	4620      	mov	r0, r4
 802978a:	f7da fe3d 	bl	8004408 <lv_event_get_target>
 802978e:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8029790:	2e13      	cmp	r6, #19
 8029792:	d035      	beq.n	8029800 <lv_line_event+0x98>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8029794:	2e2c      	cmp	r6, #44	; 0x2c
 8029796:	d041      	beq.n	802981c <lv_line_event+0xb4>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8029798:	2e15      	cmp	r6, #21
 802979a:	d1ee      	bne.n	802977a <lv_line_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802979c:	4620      	mov	r0, r4
 802979e:	f7da fea7 	bl	80044f0 <lv_event_get_draw_ctx>
 80297a2:	4607      	mov	r7, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 80297a4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80297a6:	2b00      	cmp	r3, #0
 80297a8:	d0e7      	beq.n	802977a <lv_line_event+0x12>
 80297aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80297ac:	2b00      	cmp	r3, #0
 80297ae:	d0e4      	beq.n	802977a <lv_line_event+0x12>
        lv_obj_get_coords(obj, &area);
 80297b0:	a903      	add	r1, sp, #12
 80297b2:	4628      	mov	r0, r5
 80297b4:	f7de fc9d 	bl	80080f2 <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 80297b8:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 80297bc:	4628      	mov	r0, r5
 80297be:	f7e0 f8d7 	bl	8009970 <lv_obj_get_scroll_x>
 80297c2:	1a36      	subs	r6, r6, r0
 80297c4:	b2b6      	uxth	r6, r6
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 80297c6:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80297ca:	4628      	mov	r0, r5
 80297cc:	f7e0 f8d8 	bl	8009980 <lv_obj_get_scroll_y>
 80297d0:	eba9 0900 	sub.w	r9, r9, r0
 80297d4:	fa1f f989 	uxth.w	r9, r9
        lv_coord_t h = lv_obj_get_height(obj);
 80297d8:	4628      	mov	r0, r5
 80297da:	f7de fcee 	bl	80081ba <lv_obj_get_height>
 80297de:	4680      	mov	r8, r0
        lv_draw_line_dsc_init(&line_dsc);
 80297e0:	a805      	add	r0, sp, #20
 80297e2:	f7e4 fdd0 	bl	800e386 <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 80297e6:	aa05      	add	r2, sp, #20
 80297e8:	2100      	movs	r1, #0
 80297ea:	4628      	mov	r0, r5
 80297ec:	f7de f9bc 	bl	8007b68 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 80297f0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80297f2:	2b01      	cmp	r3, #1
 80297f4:	d9c1      	bls.n	802977a <lv_line_event+0x12>
 80297f6:	2400      	movs	r4, #0
 80297f8:	44c8      	add	r8, r9
 80297fa:	fa1f f888 	uxth.w	r8, r8
 80297fe:	e059      	b.n	80298b4 <lv_line_event+0x14c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 8029800:	2249      	movs	r2, #73	; 0x49
 8029802:	2100      	movs	r1, #0
 8029804:	f7e1 fb52 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8029808:	b205      	sxth	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 802980a:	4620      	mov	r0, r4
 802980c:	f7da fe04 	bl	8004418 <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 8029810:	f9b0 3000 	ldrsh.w	r3, [r0]
 8029814:	42ab      	cmp	r3, r5
 8029816:	dab0      	bge.n	802977a <lv_line_event+0x12>
 8029818:	8005      	strh	r5, [r0, #0]
 802981a:	e7ae      	b.n	802977a <lv_line_event+0x12>
        if(line->point_num == 0 || line->point_array == NULL) return;
 802981c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 802981e:	2b00      	cmp	r3, #0
 8029820:	d0ab      	beq.n	802977a <lv_line_event+0x12>
 8029822:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8029824:	2b00      	cmp	r3, #0
 8029826:	d0a8      	beq.n	802977a <lv_line_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 8029828:	4620      	mov	r0, r4
 802982a:	f7da fdf5 	bl	8004418 <lv_event_get_param>
 802982e:	4607      	mov	r7, r0
        for(i = 0; i < line->point_num; i++) {
 8029830:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8029832:	b1fa      	cbz	r2, 8029874 <lv_line_event+0x10c>
 8029834:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8029836:	3a01      	subs	r2, #1
 8029838:	b292      	uxth	r2, r2
 802983a:	1d19      	adds	r1, r3, #4
 802983c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
        lv_coord_t h = 0;
 8029840:	2600      	movs	r6, #0
        lv_coord_t w = 0;
 8029842:	4634      	mov	r4, r6
            w = LV_MAX(line->point_array[i].x, w);
 8029844:	f9b3 2000 	ldrsh.w	r2, [r3]
 8029848:	4294      	cmp	r4, r2
 802984a:	bfb8      	it	lt
 802984c:	4614      	movlt	r4, r2
            h = LV_MAX(line->point_array[i].y, h);
 802984e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8029852:	4296      	cmp	r6, r2
 8029854:	bfb8      	it	lt
 8029856:	4616      	movlt	r6, r2
        for(i = 0; i < line->point_num; i++) {
 8029858:	3304      	adds	r3, #4
 802985a:	428b      	cmp	r3, r1
 802985c:	d1f2      	bne.n	8029844 <lv_line_event+0xdc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 802985e:	2249      	movs	r2, #73	; 0x49
 8029860:	2100      	movs	r1, #0
 8029862:	4628      	mov	r0, r5
 8029864:	f7e1 fb22 	bl	800aeac <lv_obj_get_style_prop>
        w += line_width;
 8029868:	b280      	uxth	r0, r0
 802986a:	4404      	add	r4, r0
        h += line_width;
 802986c:	4430      	add	r0, r6
        p->x = w;
 802986e:	803c      	strh	r4, [r7, #0]
        p->y = h;
 8029870:	8078      	strh	r0, [r7, #2]
 8029872:	e782      	b.n	802977a <lv_line_event+0x12>
        lv_coord_t h = 0;
 8029874:	2600      	movs	r6, #0
        lv_coord_t w = 0;
 8029876:	4634      	mov	r4, r6
 8029878:	e7f1      	b.n	802985e <lv_line_event+0xf6>
                p1.y = h - line->point_array[i].y + y_ofs;
 802987a:	8843      	ldrh	r3, [r0, #2]
 802987c:	eba8 0303 	sub.w	r3, r8, r3
 8029880:	f8ad 3006 	strh.w	r3, [sp, #6]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 8029884:	884b      	ldrh	r3, [r1, #2]
 8029886:	eba8 0303 	sub.w	r3, r8, r3
 802988a:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 802988e:	ab02      	add	r3, sp, #8
 8029890:	aa01      	add	r2, sp, #4
 8029892:	a905      	add	r1, sp, #20
 8029894:	4638      	mov	r0, r7
 8029896:	f7e4 fd8d 	bl	800e3b4 <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 802989a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 802989e:	f36f 0382 	bfc	r3, #2, #1
 80298a2:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 80298a6:	3401      	adds	r4, #1
 80298a8:	b2a4      	uxth	r4, r4
 80298aa:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80298ac:	3b01      	subs	r3, #1
 80298ae:	429c      	cmp	r4, r3
 80298b0:	f6bf af63 	bge.w	802977a <lv_line_event+0x12>
            p1.x = line->point_array[i].x + x_ofs;
 80298b4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80298b6:	00a3      	lsls	r3, r4, #2
 80298b8:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 80298bc:	f832 1024 	ldrh.w	r1, [r2, r4, lsl #2]
 80298c0:	4431      	add	r1, r6
 80298c2:	f8ad 1004 	strh.w	r1, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 80298c6:	3304      	adds	r3, #4
 80298c8:	18d1      	adds	r1, r2, r3
 80298ca:	5ad3      	ldrh	r3, [r2, r3]
 80298cc:	4433      	add	r3, r6
 80298ce:	f8ad 3008 	strh.w	r3, [sp, #8]
            if(line->y_inv == 0) {
 80298d2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 80298d6:	f013 0f01 	tst.w	r3, #1
 80298da:	d1ce      	bne.n	802987a <lv_line_event+0x112>
                p1.y = line->point_array[i].y + y_ofs;
 80298dc:	8843      	ldrh	r3, [r0, #2]
 80298de:	444b      	add	r3, r9
 80298e0:	f8ad 3006 	strh.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 80298e4:	884b      	ldrh	r3, [r1, #2]
 80298e6:	444b      	add	r3, r9
 80298e8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80298ec:	e7cf      	b.n	802988e <lv_line_event+0x126>
 80298ee:	bf00      	nop
 80298f0:	080336f8 	.word	0x080336f8

080298f4 <lv_line_constructor>:
{
 80298f4:	b508      	push	{r3, lr}
 80298f6:	4608      	mov	r0, r1
    line->point_num   = 0;
 80298f8:	2300      	movs	r3, #0
 80298fa:	850b      	strh	r3, [r1, #40]	; 0x28
    line->point_array = NULL;
 80298fc:	624b      	str	r3, [r1, #36]	; 0x24
    line->y_inv       = 0;
 80298fe:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8029902:	f363 0200 	bfi	r2, r3, #0, #1
 8029906:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 802990a:	2102      	movs	r1, #2
 802990c:	f7dd fb6c 	bl	8006fe8 <lv_obj_clear_flag>
}
 8029910:	bd08      	pop	{r3, pc}

08029912 <set_y_anim>:
    inf_normalize(obj);
}


static void set_y_anim(void * obj, int32_t v)
{
 8029912:	b508      	push	{r3, lr}
    lv_obj_set_y(obj, v);
 8029914:	b209      	sxth	r1, r1
 8029916:	f7de fb2a 	bl	8007f6e <lv_obj_set_y>
}
 802991a:	bd08      	pop	{r3, pc}

0802991c <get_label>:
{
 802991c:	b508      	push	{r3, lr}
    return lv_obj_get_child(obj, 0);
 802991e:	2100      	movs	r1, #0
 8029920:	f7e2 fa0a 	bl	800bd38 <lv_obj_get_child>
}
 8029924:	bd08      	pop	{r3, pc}

08029926 <get_selected_label_width>:
{
 8029926:	b570      	push	{r4, r5, r6, lr}
 8029928:	b086      	sub	sp, #24
 802992a:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(obj);
 802992c:	f7ff fff6 	bl	802991c <get_label>
    if(label == NULL) return 0;
 8029930:	b308      	cbz	r0, 8029976 <get_selected_label_width+0x50>
 8029932:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029934:	2257      	movs	r2, #87	; 0x57
 8029936:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802993a:	4620      	mov	r0, r4
 802993c:	f7e1 fab6 	bl	800aeac <lv_obj_get_style_prop>
 8029940:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8029942:	2258      	movs	r2, #88	; 0x58
 8029944:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029948:	4620      	mov	r0, r4
 802994a:	f7e1 faaf 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802994e:	b204      	sxth	r4, r0
    const char * txt = lv_label_get_text(label);
 8029950:	4630      	mov	r0, r6
 8029952:	f7fe fe63 	bl	802861c <lv_label_get_text>
 8029956:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 8029958:	2300      	movs	r3, #0
 802995a:	9302      	str	r3, [sp, #8]
 802995c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8029960:	9201      	str	r2, [sp, #4]
 8029962:	9300      	str	r3, [sp, #0]
 8029964:	4623      	mov	r3, r4
 8029966:	462a      	mov	r2, r5
 8029968:	a805      	add	r0, sp, #20
 802996a:	f7fa fe1a 	bl	80245a2 <lv_txt_get_size>
    return size.x;
 802996e:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
}
 8029972:	b006      	add	sp, #24
 8029974:	bd70      	pop	{r4, r5, r6, pc}
    if(label == NULL) return 0;
 8029976:	2000      	movs	r0, #0
 8029978:	e7fb      	b.n	8029972 <get_selected_label_width+0x4c>
	...

0802997c <inf_normalize>:
{
 802997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 802997e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 8029982:	f013 0f01 	tst.w	r3, #1
 8029986:	d100      	bne.n	802998a <inf_normalize+0xe>
}
 8029988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802998a:	4604      	mov	r4, r0
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 802998c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 802998e:	4b1e      	ldr	r3, [pc, #120]	; (8029a08 <inf_normalize+0x8c>)
 8029990:	fba3 1302 	umull	r1, r3, r3, r2
 8029994:	1ad2      	subs	r2, r2, r3
 8029996:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 802999a:	f3c3 038f 	ubfx	r3, r3, #2, #16
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 802999e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80299a2:	b289      	uxth	r1, r1
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 80299a4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80299a6:	fbb2 f0f3 	udiv	r0, r2, r3
 80299aa:	fb03 2210 	mls	r2, r3, r0, r2
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80299ae:	440a      	add	r2, r1
 80299b0:	b292      	uxth	r2, r2
 80299b2:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 80299b4:	fbb2 f0f3 	udiv	r0, r2, r3
 80299b8:	fb03 2310 	mls	r3, r3, r0, r2
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 80299bc:	440b      	add	r3, r1
 80299be:	8523      	strh	r3, [r4, #40]	; 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80299c0:	2257      	movs	r2, #87	; 0x57
 80299c2:	2100      	movs	r1, #0
 80299c4:	4620      	mov	r0, r4
 80299c6:	f7e1 fa71 	bl	800aeac <lv_obj_get_style_prop>
 80299ca:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80299cc:	2259      	movs	r2, #89	; 0x59
 80299ce:	2100      	movs	r1, #0
 80299d0:	4620      	mov	r0, r4
 80299d2:	f7e1 fa6b 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80299d6:	b207      	sxth	r7, r0
 80299d8:	f9b5 5008 	ldrsh.w	r5, [r5, #8]
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 80299dc:	4620      	mov	r0, r4
 80299de:	f7de fc0f 	bl	8008200 <lv_obj_get_content_height>
 80299e2:	4606      	mov	r6, r0
        lv_obj_t * label = get_label(obj);
 80299e4:	4620      	mov	r0, r4
 80299e6:	f7ff ff99 	bl	802991c <get_label>
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80299ea:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 80299ee:	442f      	add	r7, r5
 80299f0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 80299f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80299f6:	1069      	asrs	r1, r5, #1
        lv_coord_t new_y = mid_y1 - sel_y1;
 80299f8:	fb07 1103 	mla	r1, r7, r3, r1
 80299fc:	ebc1 0166 	rsb	r1, r1, r6, asr #1
        lv_obj_set_y(label, new_y);
 8029a00:	b209      	sxth	r1, r1
 8029a02:	f7de fab4 	bl	8007f6e <lv_obj_set_y>
}
 8029a06:	e7bf      	b.n	8029988 <inf_normalize+0xc>
 8029a08:	24924925 	.word	0x24924925

08029a0c <scroll_anim_ready_cb>:
{
 8029a0c:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 8029a0e:	6800      	ldr	r0, [r0, #0]
 8029a10:	f7e2 f98e 	bl	800bd30 <lv_obj_get_parent>
    inf_normalize(obj);
 8029a14:	f7ff ffb2 	bl	802997c <inf_normalize>
}
 8029a18:	bd08      	pop	{r3, pc}
	...

08029a1c <refr_position>:
{
 8029a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a20:	b093      	sub	sp, #76	; 0x4c
 8029a22:	4681      	mov	r9, r0
 8029a24:	460e      	mov	r6, r1
    lv_obj_t * label = get_label(obj);
 8029a26:	f7ff ff79 	bl	802991c <get_label>
    if(label == NULL) return;
 8029a2a:	2800      	cmp	r0, #0
 8029a2c:	d048      	beq.n	8029ac0 <refr_position+0xa4>
 8029a2e:	4605      	mov	r5, r0
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 8029a30:	f7fe fdf4 	bl	802861c <lv_label_get_text>
 8029a34:	4602      	mov	r2, r0
 8029a36:	2100      	movs	r1, #0
 8029a38:	4628      	mov	r0, r5
 8029a3a:	f7e2 f8b7 	bl	800bbac <lv_obj_calculate_style_text_align>
    switch(align) {
 8029a3e:	2802      	cmp	r0, #2
 8029a40:	d041      	beq.n	8029ac6 <refr_position+0xaa>
 8029a42:	2803      	cmp	r0, #3
 8029a44:	d04f      	beq.n	8029ae6 <refr_position+0xca>
 8029a46:	2801      	cmp	r0, #1
 8029a48:	d05a      	beq.n	8029b00 <refr_position+0xe4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029a4a:	2257      	movs	r2, #87	; 0x57
 8029a4c:	2100      	movs	r1, #0
 8029a4e:	4648      	mov	r0, r9
 8029a50:	f7e1 fa2c 	bl	800aeac <lv_obj_get_style_prop>
 8029a54:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8029a56:	2259      	movs	r2, #89	; 0x59
 8029a58:	2100      	movs	r1, #0
 8029a5a:	4648      	mov	r0, r9
 8029a5c:	f7e1 fa26 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8029a60:	fa0f fb80 	sxth.w	fp, r0
 8029a64:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 8029a68:	4648      	mov	r0, r9
 8029a6a:	f7de fbc9 	bl	8008200 <lv_obj_get_content_height>
 8029a6e:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8029a70:	2264      	movs	r2, #100	; 0x64
 8029a72:	2100      	movs	r1, #0
 8029a74:	4648      	mov	r0, r9
 8029a76:	f7e1 fa19 	bl	800aeac <lv_obj_get_style_prop>
 8029a7a:	4607      	mov	r7, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 8029a7c:	fa1f f880 	uxth.w	r8, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 8029a80:	b116      	cbz	r6, 8029a88 <refr_position+0x6c>
 8029a82:	f1b8 0f00 	cmp.w	r8, #0
 8029a86:	d140      	bne.n	8029b0a <refr_position+0xee>
        inf_normalize(obj);
 8029a88:	4648      	mov	r0, r9
 8029a8a:	f7ff ff77 	bl	802997c <inf_normalize>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8029a8e:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8029a92:	44a3      	add	fp, r4
 8029a94:	f8b9 3026 	ldrh.w	r3, [r9, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8029a98:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8029a9c:	1064      	asrs	r4, r4, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 8029a9e:	fb0b 4403 	mla	r4, fp, r3, r4
 8029aa2:	ebc4 046a 	rsb	r4, r4, sl, asr #1
 8029aa6:	b224      	sxth	r4, r4
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 8029aa8:	b116      	cbz	r6, 8029ab0 <refr_position+0x94>
 8029aaa:	f1b8 0f00 	cmp.w	r8, #0
 8029aae:	d139      	bne.n	8029b24 <refr_position+0x108>
        lv_anim_del(label, set_y_anim);
 8029ab0:	4927      	ldr	r1, [pc, #156]	; (8029b50 <refr_position+0x134>)
 8029ab2:	4628      	mov	r0, r5
 8029ab4:	f7f7 f9dc 	bl	8020e70 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 8029ab8:	4621      	mov	r1, r4
 8029aba:	4628      	mov	r0, r5
 8029abc:	f7de fa57 	bl	8007f6e <lv_obj_set_y>
}
 8029ac0:	b013      	add	sp, #76	; 0x4c
 8029ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 8029ac6:	4648      	mov	r0, r9
 8029ac8:	f7de fb7d 	bl	80081c6 <lv_obj_get_content_width>
 8029acc:	4604      	mov	r4, r0
 8029ace:	4628      	mov	r0, r5
 8029ad0:	f7de fb6d 	bl	80081ae <lv_obj_get_width>
 8029ad4:	1a21      	subs	r1, r4, r0
 8029ad6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8029ada:	f341 014f 	sbfx	r1, r1, #1, #16
 8029ade:	4628      	mov	r0, r5
 8029ae0:	f7de fa2e 	bl	8007f40 <lv_obj_set_x>
            break;
 8029ae4:	e7b1      	b.n	8029a4a <refr_position+0x2e>
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 8029ae6:	4648      	mov	r0, r9
 8029ae8:	f7de fb6d 	bl	80081c6 <lv_obj_get_content_width>
 8029aec:	4604      	mov	r4, r0
 8029aee:	4628      	mov	r0, r5
 8029af0:	f7de fb5d 	bl	80081ae <lv_obj_get_width>
 8029af4:	1a21      	subs	r1, r4, r0
 8029af6:	b209      	sxth	r1, r1
 8029af8:	4628      	mov	r0, r5
 8029afa:	f7de fa21 	bl	8007f40 <lv_obj_set_x>
            break;
 8029afe:	e7a4      	b.n	8029a4a <refr_position+0x2e>
            lv_obj_set_x(label, 0);
 8029b00:	2100      	movs	r1, #0
 8029b02:	4628      	mov	r0, r5
 8029b04:	f7de fa1c 	bl	8007f40 <lv_obj_set_x>
            break;
 8029b08:	e79f      	b.n	8029a4a <refr_position+0x2e>
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8029b0a:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    lv_coord_t sel_y1 = id * (font_h + line_space);
 8029b0e:	44a3      	add	fp, r4
 8029b10:	f8b9 3026 	ldrh.w	r3, [r9, #38]	; 0x26
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 8029b14:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8029b18:	1064      	asrs	r4, r4, #1
    lv_coord_t new_y = mid_y1 - sel_y1;
 8029b1a:	fb0b 4403 	mla	r4, fp, r3, r4
 8029b1e:	ebc4 046a 	rsb	r4, r4, sl, asr #1
 8029b22:	b224      	sxth	r4, r4
        lv_anim_init(&a);
 8029b24:	a801      	add	r0, sp, #4
 8029b26:	f7f7 f989 	bl	8020e3c <lv_anim_init>
    a->var = var;
 8029b2a:	9501      	str	r5, [sp, #4]
    a->exec_cb = exec_cb;
 8029b2c:	4b08      	ldr	r3, [pc, #32]	; (8029b50 <refr_position+0x134>)
 8029b2e:	9302      	str	r3, [sp, #8]
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 8029b30:	4628      	mov	r0, r5
 8029b32:	f7de fb0e 	bl	8008152 <lv_obj_get_y>
    a->start_value = start;
 8029b36:	9009      	str	r0, [sp, #36]	; 0x24
    a->current_value = start;
 8029b38:	900a      	str	r0, [sp, #40]	; 0x28
 8029b3a:	940b      	str	r4, [sp, #44]	; 0x2c
    a->time = duration;
 8029b3c:	b2bf      	uxth	r7, r7
 8029b3e:	970c      	str	r7, [sp, #48]	; 0x30
    a->ready_cb = ready_cb;
 8029b40:	4b04      	ldr	r3, [pc, #16]	; (8029b54 <refr_position+0x138>)
 8029b42:	9304      	str	r3, [sp, #16]
    a->path_cb = path_cb;
 8029b44:	4b04      	ldr	r3, [pc, #16]	; (8029b58 <refr_position+0x13c>)
 8029b46:	9308      	str	r3, [sp, #32]
        lv_anim_start(&a);
 8029b48:	a801      	add	r0, sp, #4
 8029b4a:	f7f7 f9c9 	bl	8020ee0 <lv_anim_start>
 8029b4e:	e7b7      	b.n	8029ac0 <refr_position+0xa4>
 8029b50:	08029913 	.word	0x08029913
 8029b54:	08029a0d 	.word	0x08029a0d
 8029b58:	08020fbf 	.word	0x08020fbf

08029b5c <get_sel_area>:
{
 8029b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029b5e:	b083      	sub	sp, #12
 8029b60:	4606      	mov	r6, r0
 8029b62:	460f      	mov	r7, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029b64:	2257      	movs	r2, #87	; 0x57
 8029b66:	2100      	movs	r1, #0
 8029b68:	f7e1 f9a0 	bl	800aeac <lv_obj_get_style_prop>
 8029b6c:	4604      	mov	r4, r0
 8029b6e:	2257      	movs	r2, #87	; 0x57
 8029b70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029b74:	4630      	mov	r0, r6
 8029b76:	f7e1 f999 	bl	800aeac <lv_obj_get_style_prop>
 8029b7a:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8029b7e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8029b82:	2259      	movs	r2, #89	; 0x59
 8029b84:	2100      	movs	r1, #0
 8029b86:	4630      	mov	r0, r6
 8029b88:	f7e1 f990 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 8029b8c:	192b      	adds	r3, r5, r4
 8029b8e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8029b92:	eb00 0363 	add.w	r3, r0, r3, asr #1
 8029b96:	b29c      	uxth	r4, r3
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 8029b98:	8af5      	ldrh	r5, [r6, #22]
 8029b9a:	4630      	mov	r0, r6
 8029b9c:	f7de fb0d 	bl	80081ba <lv_obj_get_height>
 8029ba0:	b223      	sxth	r3, r4
 8029ba2:	eb03 33d4 	add.w	r3, r3, r4, lsr #15
 8029ba6:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 8029baa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8029bae:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8029bb2:	b2ab      	uxth	r3, r5
 8029bb4:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 8029bb6:	4423      	add	r3, r4
 8029bb8:	80fb      	strh	r3, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 8029bba:	4669      	mov	r1, sp
 8029bbc:	4630      	mov	r0, r6
 8029bbe:	f7de fa98 	bl	80080f2 <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 8029bc2:	f8bd 3000 	ldrh.w	r3, [sp]
 8029bc6:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 8029bc8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8029bcc:	80bb      	strh	r3, [r7, #4]
}
 8029bce:	b003      	add	sp, #12
 8029bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08029bd4 <lv_roller_label_event>:
{
 8029bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029bd6:	b091      	sub	sp, #68	; 0x44
 8029bd8:	460c      	mov	r4, r1
    lv_event_code_t code = lv_event_get_code(e);
 8029bda:	4608      	mov	r0, r1
 8029bdc:	f7da fc18 	bl	8004410 <lv_event_get_code>
    if(code != LV_EVENT_DRAW_MAIN) {
 8029be0:	2815      	cmp	r0, #21
 8029be2:	d04b      	beq.n	8029c7c <lv_roller_label_event+0xa8>
 8029be4:	4605      	mov	r5, r0
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 8029be6:	4621      	mov	r1, r4
 8029be8:	4851      	ldr	r0, [pc, #324]	; (8029d30 <lv_roller_label_event+0x15c>)
 8029bea:	f7da faee 	bl	80041ca <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8029bee:	2801      	cmp	r0, #1
 8029bf0:	d107      	bne.n	8029c02 <lv_roller_label_event+0x2e>
    lv_obj_t * label = lv_event_get_target(e);
 8029bf2:	4620      	mov	r0, r4
 8029bf4:	f7da fc08 	bl	8004408 <lv_event_get_target>
 8029bf8:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8029bfa:	2d13      	cmp	r5, #19
 8029bfc:	d003      	beq.n	8029c06 <lv_roller_label_event+0x32>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8029bfe:	2d29      	cmp	r5, #41	; 0x29
 8029c00:	d016      	beq.n	8029c30 <lv_roller_label_event+0x5c>
}
 8029c02:	b011      	add	sp, #68	; 0x44
 8029c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_coord_t * s = lv_event_get_param(e);
 8029c06:	4620      	mov	r0, r4
 8029c08:	f7da fc06 	bl	8004418 <lv_event_get_param>
 8029c0c:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 8029c0e:	4630      	mov	r0, r6
 8029c10:	f7e2 f88e 	bl	800bd30 <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 8029c14:	f7ff fe87 	bl	8029926 <get_selected_label_width>
 8029c18:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 8029c1a:	4630      	mov	r0, r6
 8029c1c:	f7de fac7 	bl	80081ae <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 8029c20:	1a24      	subs	r4, r4, r0
 8029c22:	f9b5 0000 	ldrsh.w	r0, [r5]
 8029c26:	4284      	cmp	r4, r0
 8029c28:	bfb8      	it	lt
 8029c2a:	4604      	movlt	r4, r0
 8029c2c:	802c      	strh	r4, [r5, #0]
 8029c2e:	e7e8      	b.n	8029c02 <lv_roller_label_event+0x2e>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 8029c30:	f7e2 f87e 	bl	800bd30 <lv_obj_get_parent>
 8029c34:	2100      	movs	r1, #0
 8029c36:	f7ff fef1 	bl	8029a1c <refr_position>
 8029c3a:	e7e2      	b.n	8029c02 <lv_roller_label_event+0x2e>
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 8029c3c:	68a6      	ldr	r6, [r4, #8]
        draw_ctx->clip_area = &clip2;
 8029c3e:	ab06      	add	r3, sp, #24
 8029c40:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8029c42:	4628      	mov	r0, r5
 8029c44:	f7fe fcea 	bl	802861c <lv_label_get_text>
 8029c48:	4603      	mov	r3, r0
 8029c4a:	2200      	movs	r2, #0
 8029c4c:	9200      	str	r2, [sp, #0]
 8029c4e:	f105 0214 	add.w	r2, r5, #20
 8029c52:	a908      	add	r1, sp, #32
 8029c54:	4620      	mov	r0, r4
 8029c56:	f7e4 f861 	bl	800dd1c <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 8029c5a:	60a6      	str	r6, [r4, #8]
 8029c5c:	e051      	b.n	8029d02 <lv_roller_label_event+0x12e>
        draw_ctx->clip_area = &clip2;
 8029c5e:	ab06      	add	r3, sp, #24
 8029c60:	60a3      	str	r3, [r4, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 8029c62:	4628      	mov	r0, r5
 8029c64:	f7fe fcda 	bl	802861c <lv_label_get_text>
 8029c68:	4603      	mov	r3, r0
 8029c6a:	2200      	movs	r2, #0
 8029c6c:	9200      	str	r2, [sp, #0]
 8029c6e:	f105 0214 	add.w	r2, r5, #20
 8029c72:	a908      	add	r1, sp, #32
 8029c74:	4620      	mov	r0, r4
 8029c76:	f7e4 f851 	bl	800dd1c <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 8029c7a:	e056      	b.n	8029d2a <lv_roller_label_event+0x156>
    lv_obj_t * label = lv_event_get_target(e);
 8029c7c:	4620      	mov	r0, r4
 8029c7e:	f7da fbc3 	bl	8004408 <lv_event_get_target>
    lv_obj_t * label_obj = lv_event_get_target(e);
 8029c82:	4620      	mov	r0, r4
 8029c84:	f7da fbc0 	bl	8004408 <lv_event_get_target>
 8029c88:	4605      	mov	r5, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 8029c8a:	f7e2 f851 	bl	800bd30 <lv_obj_get_parent>
 8029c8e:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 8029c90:	a808      	add	r0, sp, #32
 8029c92:	f7e4 f80f 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 8029c96:	aa08      	add	r2, sp, #32
 8029c98:	2100      	movs	r1, #0
 8029c9a:	4630      	mov	r0, r6
 8029c9c:	f7dd feb5 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8029ca0:	4628      	mov	r0, r5
 8029ca2:	f7fe fcbd 	bl	8028620 <lv_label_get_recolor>
 8029ca6:	b128      	cbz	r0, 8029cb4 <lv_roller_label_event+0xe0>
 8029ca8:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8029cac:	f043 0301 	orr.w	r3, r3, #1
 8029cb0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8029cb4:	4620      	mov	r0, r4
 8029cb6:	f7da fc1b 	bl	80044f0 <lv_event_get_draw_ctx>
 8029cba:	4604      	mov	r4, r0
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8029cbc:	6887      	ldr	r7, [r0, #8]
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 8029cbe:	f106 0214 	add.w	r2, r6, #20
 8029cc2:	4639      	mov	r1, r7
 8029cc4:	a802      	add	r0, sp, #8
 8029cc6:	f7f7 fa1c 	bl	8021102 <_lv_area_intersect>
 8029cca:	2800      	cmp	r0, #0
 8029ccc:	d099      	beq.n	8029c02 <lv_roller_label_event+0x2e>
    draw_ctx->clip_area = &roller_clip_area;
 8029cce:	ab02      	add	r3, sp, #8
 8029cd0:	60a3      	str	r3, [r4, #8]
    get_sel_area(roller, &sel_area);
 8029cd2:	a904      	add	r1, sp, #16
 8029cd4:	4630      	mov	r0, r6
 8029cd6:	f7ff ff41 	bl	8029b5c <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 8029cda:	8aab      	ldrh	r3, [r5, #20]
 8029cdc:	f8ad 3018 	strh.w	r3, [sp, #24]
    clip2.y1 = label_obj->coords.y1;
 8029ce0:	8aeb      	ldrh	r3, [r5, #22]
 8029ce2:	f8ad 301a 	strh.w	r3, [sp, #26]
    clip2.x2 = label_obj->coords.x2;
 8029ce6:	8b2b      	ldrh	r3, [r5, #24]
 8029ce8:	f8ad 301c 	strh.w	r3, [sp, #28]
    clip2.y2 = sel_area.y1;
 8029cec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8029cf0:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8029cf4:	aa06      	add	r2, sp, #24
 8029cf6:	68a1      	ldr	r1, [r4, #8]
 8029cf8:	4610      	mov	r0, r2
 8029cfa:	f7f7 fa02 	bl	8021102 <_lv_area_intersect>
 8029cfe:	2800      	cmp	r0, #0
 8029d00:	d19c      	bne.n	8029c3c <lv_roller_label_event+0x68>
    clip2.x1 = label_obj->coords.x1;
 8029d02:	8aab      	ldrh	r3, [r5, #20]
 8029d04:	f8ad 3018 	strh.w	r3, [sp, #24]
    clip2.y1 = sel_area.y2;
 8029d08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8029d0c:	f8ad 301a 	strh.w	r3, [sp, #26]
    clip2.x2 = label_obj->coords.x2;
 8029d10:	8b2b      	ldrh	r3, [r5, #24]
 8029d12:	f8ad 301c 	strh.w	r3, [sp, #28]
    clip2.y2 = label_obj->coords.y2;
 8029d16:	8b6b      	ldrh	r3, [r5, #26]
 8029d18:	f8ad 301e 	strh.w	r3, [sp, #30]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 8029d1c:	aa06      	add	r2, sp, #24
 8029d1e:	68a1      	ldr	r1, [r4, #8]
 8029d20:	4610      	mov	r0, r2
 8029d22:	f7f7 f9ee 	bl	8021102 <_lv_area_intersect>
 8029d26:	2800      	cmp	r0, #0
 8029d28:	d199      	bne.n	8029c5e <lv_roller_label_event+0x8a>
    draw_ctx->clip_area = clip_area_ori;
 8029d2a:	60a7      	str	r7, [r4, #8]
 8029d2c:	e769      	b.n	8029c02 <lv_roller_label_event+0x2e>
 8029d2e:	bf00      	nop
 8029d30:	08033760 	.word	0x08033760

08029d34 <lv_roller_set_options>:
    LV_ASSERT_NULL(options);
 8029d34:	b189      	cbz	r1, 8029d5a <lv_roller_set_options+0x26>
{
 8029d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d3a:	b083      	sub	sp, #12
 8029d3c:	4604      	mov	r4, r0
 8029d3e:	4615      	mov	r5, r2
 8029d40:	4688      	mov	r8, r1
    lv_obj_t * label = get_label(obj);
 8029d42:	f7ff fdeb 	bl	802991c <get_label>
 8029d46:	4681      	mov	r9, r0
    roller->sel_opt_id     = 0;
 8029d48:	2300      	movs	r3, #0
 8029d4a:	84e3      	strh	r3, [r4, #38]	; 0x26
    roller->sel_opt_id_ori = 0;
 8029d4c:	8523      	strh	r3, [r4, #40]	; 0x28
    roller->option_cnt = 0;
 8029d4e:	84a3      	strh	r3, [r4, #36]	; 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8029d50:	f898 3000 	ldrb.w	r3, [r8]
 8029d54:	b15b      	cbz	r3, 8029d6e <lv_roller_set_options+0x3a>
 8029d56:	4641      	mov	r1, r8
 8029d58:	e003      	b.n	8029d62 <lv_roller_set_options+0x2e>
    LV_ASSERT_NULL(options);
 8029d5a:	e7fe      	b.n	8029d5a <lv_roller_set_options+0x26>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 8029d5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8029d60:	b12b      	cbz	r3, 8029d6e <lv_roller_set_options+0x3a>
        if(options[cnt] == '\n') roller->option_cnt++;
 8029d62:	2b0a      	cmp	r3, #10
 8029d64:	d1fa      	bne.n	8029d5c <lv_roller_set_options+0x28>
 8029d66:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8029d68:	3301      	adds	r3, #1
 8029d6a:	84a3      	strh	r3, [r4, #36]	; 0x24
 8029d6c:	e7f6      	b.n	8029d5c <lv_roller_set_options+0x28>
    roller->option_cnt++; /*Last option has no `\n`*/
 8029d6e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8029d70:	3301      	adds	r3, #1
 8029d72:	84a3      	strh	r3, [r4, #36]	; 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 8029d74:	b98d      	cbnz	r5, 8029d9a <lv_roller_set_options+0x66>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 8029d76:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8029d7a:	f36f 0300 	bfc	r3, #0, #1
 8029d7e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        lv_label_set_text(label, options);
 8029d82:	4641      	mov	r1, r8
 8029d84:	4648      	mov	r0, r9
 8029d86:	f7ff f90f 	bl	8028fa8 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8029d8a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8029d8c:	8523      	strh	r3, [r4, #40]	; 0x28
    lv_obj_refresh_ext_draw_size(label);
 8029d8e:	4648      	mov	r0, r9
 8029d90:	f7de f810 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
}
 8029d94:	b003      	add	sp, #12
 8029d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        roller->mode = LV_ROLLER_MODE_INFINITE;
 8029d9a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8029d9e:	f043 0301 	orr.w	r3, r3, #1
 8029da2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 8029da6:	4640      	mov	r0, r8
 8029da8:	f7d6 fa46 	bl	8000238 <strlen>
 8029dac:	1c47      	adds	r7, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 8029dae:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
 8029db2:	9301      	str	r3, [sp, #4]
 8029db4:	4618      	mov	r0, r3
 8029db6:	f7f8 f90b 	bl	8021fd0 <lv_mem_buf_get>
 8029dba:	4683      	mov	fp, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8029dbc:	19c6      	adds	r6, r0, r7
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 8029dbe:	2507      	movs	r5, #7
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8029dc0:	f04f 0a0a 	mov.w	sl, #10
            strcpy(&opt_extra[opt_len * i], options);
 8029dc4:	4641      	mov	r1, r8
 8029dc6:	1bf0      	subs	r0, r6, r7
 8029dc8:	f003 f8a4 	bl	802cf14 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 8029dcc:	f806 ac01 	strb.w	sl, [r6, #-1]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 8029dd0:	3d01      	subs	r5, #1
 8029dd2:	443e      	add	r6, r7
 8029dd4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8029dd8:	d1f4      	bne.n	8029dc4 <lv_roller_set_options+0x90>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 8029dda:	9b01      	ldr	r3, [sp, #4]
 8029ddc:	445b      	add	r3, fp
 8029dde:	2200      	movs	r2, #0
 8029de0:	f803 2c01 	strb.w	r2, [r3, #-1]
        lv_label_set_text(label, opt_extra);
 8029de4:	4659      	mov	r1, fp
 8029de6:	4648      	mov	r0, r9
 8029de8:	f7ff f8de 	bl	8028fa8 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 8029dec:	4658      	mov	r0, fp
 8029dee:	f7f8 f951 	bl	8022094 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 8029df2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8029df4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8029df8:	84e2      	strh	r2, [r4, #38]	; 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 8029dfa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8029dfe:	84a3      	strh	r3, [r4, #36]	; 0x24
        inf_normalize(obj);
 8029e00:	4620      	mov	r0, r4
 8029e02:	f7ff fdbb 	bl	802997c <inf_normalize>
 8029e06:	e7c0      	b.n	8029d8a <lv_roller_set_options+0x56>

08029e08 <lv_roller_constructor>:
{
 8029e08:	b538      	push	{r3, r4, r5, lr}
 8029e0a:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 8029e0c:	f891 302a 	ldrb.w	r3, [r1, #42]	; 0x2a
 8029e10:	f36f 0300 	bfc	r3, #0, #1
 8029e14:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
    roller->option_cnt = 0;
 8029e18:	2500      	movs	r5, #0
 8029e1a:	848d      	strh	r5, [r1, #36]	; 0x24
    roller->sel_opt_id = 0;
 8029e1c:	84cd      	strh	r5, [r1, #38]	; 0x26
    roller->sel_opt_id_ori = 0;
 8029e1e:	850d      	strh	r5, [r1, #40]	; 0x28
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8029e20:	2110      	movs	r1, #16
 8029e22:	4620      	mov	r0, r4
 8029e24:	f7dd f8e0 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 8029e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8029e2c:	4620      	mov	r0, r4
 8029e2e:	f7dd f8db 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 8029e32:	4621      	mov	r1, r4
 8029e34:	4805      	ldr	r0, [pc, #20]	; (8029e4c <lv_roller_constructor+0x44>)
 8029e36:	f7dd fb8d 	bl	8007554 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 8029e3a:	f7dd fc38 	bl	80076ae <lv_obj_class_init_obj>
    lv_roller_set_options(obj, "Option 1\nOption 2\nOption 3\nOption 4\nOption 5", LV_ROLLER_MODE_NORMAL);
 8029e3e:	462a      	mov	r2, r5
 8029e40:	4903      	ldr	r1, [pc, #12]	; (8029e50 <lv_roller_constructor+0x48>)
 8029e42:	4620      	mov	r0, r4
 8029e44:	f7ff ff76 	bl	8029d34 <lv_roller_set_options>
}
 8029e48:	bd38      	pop	{r3, r4, r5, pc}
 8029e4a:	bf00      	nop
 8029e4c:	08033760 	.word	0x08033760
 8029e50:	08033714 	.word	0x08033714

08029e54 <lv_roller_set_selected>:
{
 8029e54:	b538      	push	{r3, r4, r5, lr}
 8029e56:	460b      	mov	r3, r1
 8029e58:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 8029e5a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
 8029e5e:	f012 0f01 	tst.w	r2, #1
 8029e62:	d025      	beq.n	8029eb0 <lv_roller_set_selected+0x5c>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 8029e64:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8029e66:	4c18      	ldr	r4, [pc, #96]	; (8029ec8 <lv_roller_set_selected+0x74>)
 8029e68:	fba4 4c02 	umull	r4, ip, r4, r2
 8029e6c:	eba2 020c 	sub.w	r2, r2, ip
 8029e70:	eb0c 0c52 	add.w	ip, ip, r2, lsr #1
 8029e74:	f3cc 0c8f 	ubfx	ip, ip, #2, #16
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8029e78:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
        if(sel_opt < real_option_cnt) {
 8029e7a:	459c      	cmp	ip, r3
 8029e7c:	d918      	bls.n	8029eb0 <lv_roller_set_selected+0x5c>
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 8029e7e:	fbb2 f4fc 	udiv	r4, r2, ip
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 8029e82:	fb0c f404 	mul.w	r4, ip, r4
 8029e86:	b2a4      	uxth	r4, r4
 8029e88:	1b12      	subs	r2, r2, r4
 8029e8a:	b295      	uxth	r5, r2
            int32_t sel_opt_signed = sel_opt;
 8029e8c:	469e      	mov	lr, r3
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 8029e8e:	b212      	sxth	r2, r2
 8029e90:	1ad2      	subs	r2, r2, r3
 8029e92:	2a00      	cmp	r2, #0
 8029e94:	bfb8      	it	lt
 8029e96:	4252      	neglt	r2, r2
 8029e98:	ebb2 0f5c 	cmp.w	r2, ip, lsr #1
 8029e9c:	d905      	bls.n	8029eaa <lv_roller_set_selected+0x56>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 8029e9e:	42ab      	cmp	r3, r5
 8029ea0:	bf34      	ite	cc
 8029ea2:	eb03 0e0c 	addcc.w	lr, r3, ip
                else sel_opt_signed -= real_option_cnt;
 8029ea6:	eba3 0e0c 	subcs.w	lr, r3, ip
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 8029eaa:	eb04 030e 	add.w	r3, r4, lr
 8029eae:	b29b      	uxth	r3, r3
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 8029eb0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 8029eb2:	429a      	cmp	r2, r3
 8029eb4:	bf9c      	itt	ls
 8029eb6:	f102 33ff 	addls.w	r3, r2, #4294967295	; 0xffffffff
 8029eba:	b29b      	uxthls	r3, r3
 8029ebc:	84c3      	strh	r3, [r0, #38]	; 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 8029ebe:	8503      	strh	r3, [r0, #40]	; 0x28
    refr_position(obj, anim);
 8029ec0:	f7ff fdac 	bl	8029a1c <refr_position>
}
 8029ec4:	bd38      	pop	{r3, r4, r5, pc}
 8029ec6:	bf00      	nop
 8029ec8:	24924925 	.word	0x24924925

08029ecc <lv_roller_event>:
{
 8029ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029ed0:	b09a      	sub	sp, #104	; 0x68
 8029ed2:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8029ed4:	48c4      	ldr	r0, [pc, #784]	; (802a1e8 <lv_roller_event+0x31c>)
 8029ed6:	f7da f978 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8029eda:	2801      	cmp	r0, #1
 8029edc:	d002      	beq.n	8029ee4 <lv_roller_event+0x18>
}
 8029ede:	b01a      	add	sp, #104	; 0x68
 8029ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8029ee4:	4628      	mov	r0, r5
 8029ee6:	f7da fa93 	bl	8004410 <lv_event_get_code>
 8029eea:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8029eec:	4628      	mov	r0, r5
 8029eee:	f7da fa8b 	bl	8004408 <lv_event_get_target>
 8029ef2:	4606      	mov	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 8029ef4:	2c2c      	cmp	r4, #44	; 0x2c
 8029ef6:	f000 80d8 	beq.w	802a0aa <lv_roller_event+0x1de>
    else if(code == LV_EVENT_STYLE_CHANGED) {
 8029efa:	2c2a      	cmp	r4, #42	; 0x2a
 8029efc:	f000 80de 	beq.w	802a0bc <lv_roller_event+0x1f0>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 8029f00:	2c29      	cmp	r4, #41	; 0x29
 8029f02:	f000 80ea 	beq.w	802a0da <lv_roller_event+0x20e>
    else if(code == LV_EVENT_PRESSED) {
 8029f06:	2c01      	cmp	r4, #1
 8029f08:	f000 80eb 	beq.w	802a0e2 <lv_roller_event+0x216>
    else if(code == LV_EVENT_PRESSING) {
 8029f0c:	2c02      	cmp	r4, #2
 8029f0e:	f000 80f4 	beq.w	802a0fa <lv_roller_event+0x22e>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 8029f12:	2c08      	cmp	r4, #8
 8029f14:	f000 810f 	beq.w	802a136 <lv_roller_event+0x26a>
 8029f18:	2c03      	cmp	r4, #3
 8029f1a:	f000 810c 	beq.w	802a136 <lv_roller_event+0x26a>
    else if(code == LV_EVENT_FOCUSED) {
 8029f1e:	2c0e      	cmp	r4, #14
 8029f20:	f000 81a4 	beq.w	802a26c <lv_roller_event+0x3a0>
    else if(code == LV_EVENT_DEFOCUSED) {
 8029f24:	2c0f      	cmp	r4, #15
 8029f26:	f000 81be 	beq.w	802a2a6 <lv_roller_event+0x3da>
    else if(code == LV_EVENT_KEY) {
 8029f2a:	2c0d      	cmp	r4, #13
 8029f2c:	f000 81c5 	beq.w	802a2ba <lv_roller_event+0x3ee>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8029f30:	2c13      	cmp	r4, #19
 8029f32:	f000 81eb 	beq.w	802a30c <lv_roller_event+0x440>
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8029f36:	2c15      	cmp	r4, #21
 8029f38:	d001      	beq.n	8029f3e <lv_roller_event+0x72>
 8029f3a:	2c18      	cmp	r4, #24
 8029f3c:	d1cf      	bne.n	8029ede <lv_roller_event+0x12>
    lv_event_code_t code = lv_event_get_code(e);
 8029f3e:	4628      	mov	r0, r5
 8029f40:	f7da fa66 	bl	8004410 <lv_event_get_code>
 8029f44:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8029f46:	4628      	mov	r0, r5
 8029f48:	f7da fa5e 	bl	8004408 <lv_event_get_target>
 8029f4c:	4604      	mov	r4, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8029f4e:	2e15      	cmp	r6, #21
 8029f50:	f000 81e1 	beq.w	802a316 <lv_roller_event+0x44a>
    else if(code == LV_EVENT_DRAW_POST) {
 8029f54:	2e18      	cmp	r6, #24
 8029f56:	d1c2      	bne.n	8029ede <lv_roller_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8029f58:	4628      	mov	r0, r5
 8029f5a:	f7da fac9 	bl	80044f0 <lv_event_get_draw_ctx>
 8029f5e:	4606      	mov	r6, r0
        lv_draw_label_dsc_init(&label_dsc);
 8029f60:	a80c      	add	r0, sp, #48	; 0x30
 8029f62:	f7e3 fea7 	bl	800dcb4 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 8029f66:	aa0c      	add	r2, sp, #48	; 0x30
 8029f68:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8029f6c:	4620      	mov	r0, r4
 8029f6e:	f7dd fd4c 	bl	8007a0a <lv_obj_init_draw_label_dsc>
        get_sel_area(obj, &sel_area);
 8029f72:	a906      	add	r1, sp, #24
 8029f74:	4620      	mov	r0, r4
 8029f76:	f7ff fdf1 	bl	8029b5c <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 8029f7a:	aa06      	add	r2, sp, #24
 8029f7c:	68b1      	ldr	r1, [r6, #8]
 8029f7e:	a808      	add	r0, sp, #32
 8029f80:	f7f7 f8bf 	bl	8021102 <_lv_area_intersect>
        if(area_ok) {
 8029f84:	2800      	cmp	r0, #0
 8029f86:	d0aa      	beq.n	8029ede <lv_roller_event+0x12>
            lv_obj_t * label = get_label(obj);
 8029f88:	4620      	mov	r0, r4
 8029f8a:	f7ff fcc7 	bl	802991c <get_label>
 8029f8e:	4607      	mov	r7, r0
            if(lv_label_get_recolor(label)) label_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 8029f90:	f7fe fb46 	bl	8028620 <lv_label_get_recolor>
 8029f94:	b128      	cbz	r0, 8029fa2 <lv_roller_event+0xd6>
 8029f96:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 8029f9a:	f043 0301 	orr.w	r3, r3, #1
 8029f9e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 8029fa2:	4638      	mov	r0, r7
 8029fa4:	f7fe fb3a 	bl	802861c <lv_label_get_text>
 8029fa8:	4605      	mov	r5, r0
 8029faa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8029fae:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8029fb2:	f9bd a042 	ldrsh.w	sl, [sp, #66]	; 0x42
 8029fb6:	4620      	mov	r0, r4
 8029fb8:	f7de f8f9 	bl	80081ae <lv_obj_get_width>
 8029fbc:	2302      	movs	r3, #2
 8029fbe:	9302      	str	r3, [sp, #8]
 8029fc0:	9001      	str	r0, [sp, #4]
 8029fc2:	f8cd a000 	str.w	sl, [sp]
 8029fc6:	464b      	mov	r3, r9
 8029fc8:	4642      	mov	r2, r8
 8029fca:	4629      	mov	r1, r5
 8029fcc:	a805      	add	r0, sp, #20
 8029fce:	f7fa fae8 	bl	80245a2 <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 8029fd2:	4620      	mov	r0, r4
 8029fd4:	f7de f8f1 	bl	80081ba <lv_obj_get_height>
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8029fd8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8029fdc:	f340 084f 	sbfx	r8, r0, #1, #16
 8029fe0:	f9b7 5016 	ldrsh.w	r5, [r7, #22]
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 8029fe4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 8029fe8:	4443      	add	r3, r8
 8029fea:	1aed      	subs	r5, r5, r3
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 8029fec:	03ad      	lsls	r5, r5, #14
 8029fee:	4638      	mov	r0, r7
 8029ff0:	f7de f8e3 	bl	80081ba <lv_obj_get_height>
 8029ff4:	fb95 f5f0 	sdiv	r5, r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8029ff8:	2257      	movs	r2, #87	; 0x57
 8029ffa:	2100      	movs	r1, #0
 8029ffc:	4620      	mov	r0, r4
 8029ffe:	f7e0 ff55 	bl	800aeac <lv_obj_get_style_prop>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 802a002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a004:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802a008:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 802a00c:	1a9b      	subs	r3, r3, r2
 802a00e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
            res_p.y -= corr;
 802a012:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 802a016:	eba2 0263 	sub.w	r2, r2, r3, asr #1
 802a01a:	b212      	sxth	r2, r2
 802a01c:	f8ad 2016 	strh.w	r2, [sp, #22]
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 802a020:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 802a024:	4488      	add	r8, r1
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 802a026:	fb05 f202 	mul.w	r2, r5, r2
 802a02a:	eb08 32a2 	add.w	r2, r8, r2, asr #14
            label_sel_y -= corr;
 802a02e:	f343 034f 	sbfx	r3, r3, #1, #16
 802a032:	1ad5      	subs	r5, r2, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802a034:	2232      	movs	r2, #50	; 0x32
 802a036:	2100      	movs	r1, #0
 802a038:	4620      	mov	r0, r4
 802a03a:	f7e0 ff37 	bl	800aeac <lv_obj_get_style_prop>
 802a03e:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a040:	2212      	movs	r2, #18
 802a042:	2100      	movs	r1, #0
 802a044:	4620      	mov	r0, r4
 802a046:	f7e0 ff31 	bl	800aeac <lv_obj_get_style_prop>
 802a04a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a04c:	2213      	movs	r2, #19
 802a04e:	2100      	movs	r1, #0
 802a050:	4620      	mov	r0, r4
 802a052:	f7e0 ff2b 	bl	800aeac <lv_obj_get_style_prop>
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 802a056:	fa1f f388 	uxth.w	r3, r8
 802a05a:	eb03 0209 	add.w	r2, r3, r9
 802a05e:	8aa1      	ldrh	r1, [r4, #20]
 802a060:	440a      	add	r2, r1
 802a062:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            label_sel_area.y1 = label_sel_y;
 802a066:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 802a06a:	4403      	add	r3, r0
 802a06c:	8b22      	ldrh	r2, [r4, #24]
 802a06e:	1ad3      	subs	r3, r2, r3
 802a070:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 802a074:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802a078:	441d      	add	r5, r3
 802a07a:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 802a07e:	f89d 304d 	ldrb.w	r3, [sp, #77]	; 0x4d
 802a082:	f043 0302 	orr.w	r3, r3, #2
 802a086:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 802a08a:	68b4      	ldr	r4, [r6, #8]
            draw_ctx->clip_area = &mask_sel;
 802a08c:	ab08      	add	r3, sp, #32
 802a08e:	60b3      	str	r3, [r6, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 802a090:	4638      	mov	r0, r7
 802a092:	f7fe fac3 	bl	802861c <lv_label_get_text>
 802a096:	4603      	mov	r3, r0
 802a098:	2200      	movs	r2, #0
 802a09a:	9200      	str	r2, [sp, #0]
 802a09c:	aa0a      	add	r2, sp, #40	; 0x28
 802a09e:	a90c      	add	r1, sp, #48	; 0x30
 802a0a0:	4630      	mov	r0, r6
 802a0a2:	f7e3 fe3b 	bl	800dd1c <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 802a0a6:	60b4      	str	r4, [r6, #8]
 802a0a8:	e719      	b.n	8029ede <lv_roller_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 802a0aa:	4628      	mov	r0, r5
 802a0ac:	f7da f9b4 	bl	8004418 <lv_event_get_param>
 802a0b0:	4604      	mov	r4, r0
        p->x = get_selected_label_width(obj);
 802a0b2:	4630      	mov	r0, r6
 802a0b4:	f7ff fc37 	bl	8029926 <get_selected_label_width>
 802a0b8:	8020      	strh	r0, [r4, #0]
 802a0ba:	e710      	b.n	8029ede <lv_roller_event+0x12>
        lv_obj_t * label = get_label(obj);
 802a0bc:	f7ff fc2e 	bl	802991c <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 802a0c0:	b118      	cbz	r0, 802a0ca <lv_roller_event+0x1fe>
 802a0c2:	2200      	movs	r2, #0
 802a0c4:	212a      	movs	r1, #42	; 0x2a
 802a0c6:	f7da f97d 	bl	80043c4 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 802a0ca:	4630      	mov	r0, r6
 802a0cc:	f7de f90c 	bl	80082e8 <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 802a0d0:	2100      	movs	r1, #0
 802a0d2:	4630      	mov	r0, r6
 802a0d4:	f7ff fca2 	bl	8029a1c <refr_position>
 802a0d8:	e701      	b.n	8029ede <lv_roller_event+0x12>
        refr_position(obj, LV_ANIM_OFF);
 802a0da:	2100      	movs	r1, #0
 802a0dc:	f7ff fc9e 	bl	8029a1c <refr_position>
 802a0e0:	e6fd      	b.n	8029ede <lv_roller_event+0x12>
        roller->moved = 0;
 802a0e2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 802a0e6:	f36f 0341 	bfc	r3, #1, #1
 802a0ea:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 802a0ee:	f7ff fc15 	bl	802991c <get_label>
 802a0f2:	493e      	ldr	r1, [pc, #248]	; (802a1ec <lv_roller_event+0x320>)
 802a0f4:	f7f6 febc 	bl	8020e70 <lv_anim_del>
 802a0f8:	e6f1      	b.n	8029ede <lv_roller_event+0x12>
        lv_indev_t * indev = lv_indev_get_act();
 802a0fa:	f7da fd09 	bl	8004b10 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 802a0fe:	a90c      	add	r1, sp, #48	; 0x30
 802a100:	f7da fdb6 	bl	8004c70 <lv_indev_get_vect>
        if(p.y) {
 802a104:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 802a108:	2b00      	cmp	r3, #0
 802a10a:	f43f aee8 	beq.w	8029ede <lv_roller_event+0x12>
            lv_obj_t * label = get_label(obj);
 802a10e:	4630      	mov	r0, r6
 802a110:	f7ff fc04 	bl	802991c <get_label>
 802a114:	4604      	mov	r4, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 802a116:	f7de f81c 	bl	8008152 <lv_obj_get_y>
 802a11a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 802a11e:	4401      	add	r1, r0
 802a120:	b209      	sxth	r1, r1
 802a122:	4620      	mov	r0, r4
 802a124:	f7dd ff23 	bl	8007f6e <lv_obj_set_y>
            roller->moved = 1;
 802a128:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 802a12c:	f043 0302 	orr.w	r3, r3, #2
 802a130:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 802a134:	e6d3      	b.n	8029ede <lv_roller_event+0x12>
    lv_obj_t * label = get_label(obj);
 802a136:	4630      	mov	r0, r6
 802a138:	f7ff fbf0 	bl	802991c <get_label>
    if(label == NULL) return LV_RES_OK;
 802a13c:	4680      	mov	r8, r0
 802a13e:	2800      	cmp	r0, #0
 802a140:	f43f aecd 	beq.w	8029ede <lv_roller_event+0x12>
    lv_indev_t * indev = lv_indev_get_act();
 802a144:	f7da fce4 	bl	8004b10 <lv_indev_get_act>
 802a148:	4604      	mov	r4, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 802a14a:	f7da fce7 	bl	8004b1c <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 802a14e:	2804      	cmp	r0, #4
 802a150:	f000 80f8 	beq.w	802a344 <lv_roller_event+0x478>
 802a154:	2802      	cmp	r0, #2
 802a156:	f000 8105 	beq.w	802a364 <lv_roller_event+0x498>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 802a15a:	4620      	mov	r0, r4
 802a15c:	f7da fcde 	bl	8004b1c <lv_indev_get_type>
 802a160:	2801      	cmp	r0, #1
 802a162:	d128      	bne.n	802a1b6 <lv_roller_event+0x2ea>
        if(roller->moved == 0) {
 802a164:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
 802a168:	f013 0f02 	tst.w	r3, #2
 802a16c:	d142      	bne.n	802a1f4 <lv_roller_event+0x328>
            lv_indev_get_point(indev, &p);
 802a16e:	a90a      	add	r1, sp, #40	; 0x28
 802a170:	4620      	mov	r0, r4
 802a172:	f7da fd4a 	bl	8004c0a <lv_indev_get_point>
            p.y -= label->coords.y1;
 802a176:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802a17a:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 802a17e:	1a9b      	subs	r3, r3, r2
 802a180:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            p.x -= label->coords.x1;
 802a184:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802a188:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 802a18c:	1a9b      	subs	r3, r3, r2
 802a18e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            letter_i = lv_label_get_letter_on(label, &p);
 802a192:	a90a      	add	r1, sp, #40	; 0x28
 802a194:	4640      	mov	r0, r8
 802a196:	f7fe fb47 	bl	8028828 <lv_label_get_letter_on>
 802a19a:	4607      	mov	r7, r0
            const char * txt  = lv_label_get_text(label);
 802a19c:	4640      	mov	r0, r8
 802a19e:	f7fe fa3d 	bl	802861c <lv_label_get_text>
 802a1a2:	4681      	mov	r9, r0
            uint32_t i        = 0;
 802a1a4:	2300      	movs	r3, #0
 802a1a6:	930c      	str	r3, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 802a1a8:	b1e7      	cbz	r7, 802a1e4 <lv_roller_event+0x318>
 802a1aa:	461c      	mov	r4, r3
            new_opt = 0;
 802a1ac:	461d      	mov	r5, r3
            uint32_t i_prev   = 0;
 802a1ae:	4698      	mov	r8, r3
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 802a1b0:	f8df a03c 	ldr.w	sl, [pc, #60]	; 802a1f0 <lv_roller_event+0x324>
 802a1b4:	e00a      	b.n	802a1cc <lv_roller_event+0x300>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 802a1b6:	4620      	mov	r0, r4
 802a1b8:	f7da fcb0 	bl	8004b1c <lv_indev_get_type>
 802a1bc:	2803      	cmp	r0, #3
 802a1be:	d147      	bne.n	802a250 <lv_roller_event+0x384>
 802a1c0:	e7d0      	b.n	802a164 <lv_roller_event+0x298>
                i_prev = i;
 802a1c2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 802a1c6:	3401      	adds	r4, #1
 802a1c8:	42a7      	cmp	r7, r4
 802a1ca:	d03f      	beq.n	802a24c <lv_roller_event+0x380>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 802a1cc:	f8da 3000 	ldr.w	r3, [sl]
 802a1d0:	a90c      	add	r1, sp, #48	; 0x30
 802a1d2:	4648      	mov	r0, r9
 802a1d4:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 802a1d6:	280a      	cmp	r0, #10
 802a1d8:	d1f3      	bne.n	802a1c2 <lv_roller_event+0x2f6>
 802a1da:	45b8      	cmp	r8, r7
 802a1dc:	bf1c      	itt	ne
 802a1de:	3501      	addne	r5, #1
 802a1e0:	b22d      	sxthne	r5, r5
 802a1e2:	e7ee      	b.n	802a1c2 <lv_roller_event+0x2f6>
            new_opt = 0;
 802a1e4:	2500      	movs	r5, #0
 802a1e6:	e031      	b.n	802a24c <lv_roller_event+0x380>
 802a1e8:	08033744 	.word	0x08033744
 802a1ec:	08029913 	.word	0x08029913
 802a1f0:	2000076c 	.word	0x2000076c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802a1f4:	2257      	movs	r2, #87	; 0x57
 802a1f6:	2100      	movs	r1, #0
 802a1f8:	4630      	mov	r0, r6
 802a1fa:	f7e0 fe57 	bl	800aeac <lv_obj_get_style_prop>
 802a1fe:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802a200:	2259      	movs	r2, #89	; 0x59
 802a202:	2100      	movs	r1, #0
 802a204:	4630      	mov	r0, r6
 802a206:	f7e0 fe51 	bl	800aeac <lv_obj_get_style_prop>
            lv_coord_t label_unit = font_h + line_space;
 802a20a:	892d      	ldrh	r5, [r5, #8]
 802a20c:	4405      	add	r5, r0
 802a20e:	b22f      	sxth	r7, r5
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 802a210:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 802a214:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 802a218:	1a9b      	subs	r3, r3, r2
 802a21a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802a21e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 802a222:	b21d      	sxth	r5, r3
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 802a224:	f8b8 8016 	ldrh.w	r8, [r8, #22]
 802a228:	210c      	movs	r1, #12
 802a22a:	4620      	mov	r0, r4
 802a22c:	f7dc fa8a 	bl	8006744 <lv_indev_scroll_throw_predict>
 802a230:	eb08 0300 	add.w	r3, r8, r0
            int32_t id = (mid - label_y1) / label_unit;
 802a234:	b21b      	sxth	r3, r3
 802a236:	1aed      	subs	r5, r5, r3
 802a238:	fb95 f5f7 	sdiv	r5, r5, r7
            if(id < 0) id = 0;
 802a23c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 802a240:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 802a242:	429d      	cmp	r5, r3
 802a244:	bfa8      	it	ge
 802a246:	f103 35ff 	addge.w	r5, r3, #4294967295	; 0xffffffff
            new_opt = id;
 802a24a:	b22d      	sxth	r5, r5
        if(new_opt >= 0) {
 802a24c:	2d00      	cmp	r5, #0
 802a24e:	da07      	bge.n	802a260 <lv_roller_event+0x394>
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 802a250:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 802a252:	930c      	str	r3, [sp, #48]	; 0x30
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 802a254:	aa0c      	add	r2, sp, #48	; 0x30
 802a256:	211c      	movs	r1, #28
 802a258:	4630      	mov	r0, r6
 802a25a:	f7da f8b3 	bl	80043c4 <lv_event_send>
    return res;
 802a25e:	e63e      	b.n	8029ede <lv_roller_event+0x12>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 802a260:	2201      	movs	r2, #1
 802a262:	b2a9      	uxth	r1, r5
 802a264:	4630      	mov	r0, r6
 802a266:	f7ff fdf5 	bl	8029e54 <lv_roller_set_selected>
 802a26a:	e7f1      	b.n	802a250 <lv_roller_event+0x384>
        lv_group_t * g             = lv_obj_get_group(obj);
 802a26c:	f7dc ff27 	bl	80070be <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 802a270:	f7da fb6c 	bl	800494c <lv_group_get_editing>
 802a274:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802a276:	f7da fc4b 	bl	8004b10 <lv_indev_get_act>
 802a27a:	f7da fc4f 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 802a27e:	2804      	cmp	r0, #4
 802a280:	d002      	beq.n	802a288 <lv_roller_event+0x3bc>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 802a282:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 802a284:	8533      	strh	r3, [r6, #40]	; 0x28
 802a286:	e62a      	b.n	8029ede <lv_roller_event+0x12>
            if(!editing) {
 802a288:	b954      	cbnz	r4, 802a2a0 <lv_roller_event+0x3d4>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 802a28a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 802a28c:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
 802a28e:	429a      	cmp	r2, r3
 802a290:	f43f ae25 	beq.w	8029ede <lv_roller_event+0x12>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 802a294:	84f3      	strh	r3, [r6, #38]	; 0x26
                    refr_position(obj, LV_ANIM_ON);
 802a296:	2101      	movs	r1, #1
 802a298:	4630      	mov	r0, r6
 802a29a:	f7ff fbbf 	bl	8029a1c <refr_position>
 802a29e:	e61e      	b.n	8029ede <lv_roller_event+0x12>
                roller->sel_opt_id_ori = roller->sel_opt_id;
 802a2a0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 802a2a2:	8533      	strh	r3, [r6, #40]	; 0x28
 802a2a4:	e61b      	b.n	8029ede <lv_roller_event+0x12>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 802a2a6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 802a2a8:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 802a2aa:	429a      	cmp	r2, r3
 802a2ac:	f43f ae17 	beq.w	8029ede <lv_roller_event+0x12>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 802a2b0:	84c3      	strh	r3, [r0, #38]	; 0x26
            refr_position(obj, LV_ANIM_ON);
 802a2b2:	2101      	movs	r1, #1
 802a2b4:	f7ff fbb2 	bl	8029a1c <refr_position>
 802a2b8:	e611      	b.n	8029ede <lv_roller_event+0x12>
        char c = *((char *)lv_event_get_param(e));
 802a2ba:	4628      	mov	r0, r5
 802a2bc:	f7da f8ac 	bl	8004418 <lv_event_get_param>
 802a2c0:	7802      	ldrb	r2, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 802a2c2:	f1a2 0312 	sub.w	r3, r2, #18
 802a2c6:	b2db      	uxtb	r3, r3
 802a2c8:	2b01      	cmp	r3, #1
 802a2ca:	d911      	bls.n	802a2f0 <lv_roller_event+0x424>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 802a2cc:	2a14      	cmp	r2, #20
 802a2ce:	d002      	beq.n	802a2d6 <lv_roller_event+0x40a>
 802a2d0:	2a11      	cmp	r2, #17
 802a2d2:	f47f ae04 	bne.w	8029ede <lv_roller_event+0x12>
            if(roller->sel_opt_id > 0) {
 802a2d6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 802a2d8:	2b00      	cmp	r3, #0
 802a2da:	f43f ae00 	beq.w	8029ede <lv_roller_event+0x12>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 802a2de:	8d34      	ldrh	r4, [r6, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 802a2e0:	3b01      	subs	r3, #1
 802a2e2:	2201      	movs	r2, #1
 802a2e4:	b299      	uxth	r1, r3
 802a2e6:	4630      	mov	r0, r6
 802a2e8:	f7ff fdb4 	bl	8029e54 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 802a2ec:	8534      	strh	r4, [r6, #40]	; 0x28
 802a2ee:	e5f6      	b.n	8029ede <lv_roller_event+0x12>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 802a2f0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 802a2f2:	1c59      	adds	r1, r3, #1
 802a2f4:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 802a2f6:	4291      	cmp	r1, r2
 802a2f8:	f6bf adf1 	bge.w	8029ede <lv_roller_event+0x12>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 802a2fc:	8d34      	ldrh	r4, [r6, #40]	; 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id + 1, LV_ANIM_ON);
 802a2fe:	2201      	movs	r2, #1
 802a300:	b289      	uxth	r1, r1
 802a302:	4630      	mov	r0, r6
 802a304:	f7ff fda6 	bl	8029e54 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 802a308:	8534      	strh	r4, [r6, #40]	; 0x28
 802a30a:	e5e8      	b.n	8029ede <lv_roller_event+0x12>
        lv_obj_t * label = get_label(obj);
 802a30c:	f7ff fb06 	bl	802991c <get_label>
        lv_obj_refresh_ext_draw_size(label);
 802a310:	f7dd fd50 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
 802a314:	e5e3      	b.n	8029ede <lv_roller_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802a316:	4628      	mov	r0, r5
 802a318:	f7da f8ea 	bl	80044f0 <lv_event_get_draw_ctx>
 802a31c:	4605      	mov	r5, r0
        get_sel_area(obj, &sel_area);
 802a31e:	a90a      	add	r1, sp, #40	; 0x28
 802a320:	4620      	mov	r0, r4
 802a322:	f7ff fc1b 	bl	8029b5c <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 802a326:	a80c      	add	r0, sp, #48	; 0x30
 802a328:	f7e5 fa80 	bl	800f82c <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 802a32c:	aa0c      	add	r2, sp, #48	; 0x30
 802a32e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 802a332:	4620      	mov	r0, r4
 802a334:	f7dd f9f4 	bl	8007720 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 802a338:	aa0a      	add	r2, sp, #40	; 0x28
 802a33a:	a90c      	add	r1, sp, #48	; 0x30
 802a33c:	4628      	mov	r0, r5
 802a33e:	f7e5 fad1 	bl	800f8e4 <lv_draw_rect>
 802a342:	e5cc      	b.n	8029ede <lv_roller_event+0x12>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 802a344:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 802a346:	8533      	strh	r3, [r6, #40]	; 0x28
            lv_group_t * g      = lv_obj_get_group(obj);
 802a348:	4630      	mov	r0, r6
 802a34a:	f7dc feb8 	bl	80070be <lv_obj_get_group>
 802a34e:	4605      	mov	r5, r0
            if(lv_group_get_editing(g)) {
 802a350:	f7da fafc 	bl	800494c <lv_group_get_editing>
 802a354:	2800      	cmp	r0, #0
 802a356:	f43f af00 	beq.w	802a15a <lv_roller_event+0x28e>
                lv_group_set_editing(g, false);
 802a35a:	2100      	movs	r1, #0
 802a35c:	4628      	mov	r0, r5
 802a35e:	f7da fa88 	bl	8004872 <lv_group_set_editing>
 802a362:	e6fa      	b.n	802a15a <lv_roller_event+0x28e>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 802a364:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 802a366:	8533      	strh	r3, [r6, #40]	; 0x28
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 802a368:	e6f7      	b.n	802a15a <lv_roller_event+0x28e>
 802a36a:	bf00      	nop

0802a36c <position_knob>:
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}

static void position_knob(lv_obj_t * obj, lv_area_t * knob_area, const lv_coord_t knob_size, const bool hor)
{
 802a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a370:	4682      	mov	sl, r0
 802a372:	460c      	mov	r4, r1
    if(hor) {
 802a374:	2b00      	cmp	r3, #0
 802a376:	d04c      	beq.n	802a412 <position_knob+0xa6>
        knob_area->x1 -= (knob_size >> 1);
 802a378:	880b      	ldrh	r3, [r1, #0]
 802a37a:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 802a37e:	b29b      	uxth	r3, r3
 802a380:	800b      	strh	r3, [r1, #0]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 802a382:	3a01      	subs	r2, #1
 802a384:	441a      	add	r2, r3
 802a386:	808a      	strh	r2, [r1, #4]
        knob_area->y1 = obj->coords.y1;
 802a388:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 802a38c:	804b      	strh	r3, [r1, #2]
        knob_area->y2 = obj->coords.y2;
 802a38e:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 802a392:	80cb      	strh	r3, [r1, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a394:	2212      	movs	r2, #18
 802a396:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a39a:	4650      	mov	r0, sl
 802a39c:	f7e0 fd86 	bl	800aeac <lv_obj_get_style_prop>
 802a3a0:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a3a2:	2213      	movs	r2, #19
 802a3a4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a3a8:	4650      	mov	r0, sl
 802a3aa:	f7e0 fd7f 	bl	800aeac <lv_obj_get_style_prop>
 802a3ae:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a3b0:	2210      	movs	r2, #16
 802a3b2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a3b6:	4650      	mov	r0, sl
 802a3b8:	f7e0 fd78 	bl	800aeac <lv_obj_get_style_prop>
 802a3bc:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a3be:	2211      	movs	r2, #17
 802a3c0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a3c4:	4650      	mov	r0, sl
 802a3c6:	f7e0 fd71 	bl	800aeac <lv_obj_get_style_prop>
 802a3ca:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 802a3cc:	2268      	movs	r2, #104	; 0x68
 802a3ce:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a3d2:	4650      	mov	r0, sl
 802a3d4:	f7e0 fd6a 	bl	800aeac <lv_obj_get_style_prop>
 802a3d8:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 802a3da:	2269      	movs	r2, #105	; 0x69
 802a3dc:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a3e0:	4650      	mov	r0, sl
 802a3e2:	f7e0 fd63 	bl	800aeac <lv_obj_get_style_prop>

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_KNOB);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_KNOB);

    /*Apply the paddings on the knob area*/
    knob_area->x1 -= knob_left + transf_w;
 802a3e6:	b2ab      	uxth	r3, r5
 802a3e8:	4498      	add	r8, r3
 802a3ea:	8822      	ldrh	r2, [r4, #0]
 802a3ec:	eba2 0808 	sub.w	r8, r2, r8
 802a3f0:	f8a4 8000 	strh.w	r8, [r4]
    knob_area->x2 += knob_right + transf_w;
 802a3f4:	444b      	add	r3, r9
 802a3f6:	88a2      	ldrh	r2, [r4, #4]
 802a3f8:	4413      	add	r3, r2
 802a3fa:	80a3      	strh	r3, [r4, #4]
    knob_area->y1 -= knob_top + transf_h;
 802a3fc:	b280      	uxth	r0, r0
 802a3fe:	4406      	add	r6, r0
 802a400:	8863      	ldrh	r3, [r4, #2]
 802a402:	1b9e      	subs	r6, r3, r6
 802a404:	8066      	strh	r6, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 802a406:	4438      	add	r0, r7
 802a408:	88e7      	ldrh	r7, [r4, #6]
 802a40a:	4438      	add	r0, r7
 802a40c:	80e0      	strh	r0, [r4, #6]
}
 802a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 802a412:	884b      	ldrh	r3, [r1, #2]
 802a414:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 802a418:	b29b      	uxth	r3, r3
 802a41a:	804b      	strh	r3, [r1, #2]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 802a41c:	3a01      	subs	r2, #1
 802a41e:	441a      	add	r2, r3
 802a420:	80ca      	strh	r2, [r1, #6]
        knob_area->x1 = obj->coords.x1;
 802a422:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 802a426:	800b      	strh	r3, [r1, #0]
        knob_area->x2 = obj->coords.x2;
 802a428:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 802a42c:	808b      	strh	r3, [r1, #4]
 802a42e:	e7b1      	b.n	802a394 <position_knob+0x28>

0802a430 <lv_slider_constructor>:
{
 802a430:	b538      	push	{r3, r4, r5, lr}
 802a432:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 802a434:	2500      	movs	r5, #0
 802a436:	670d      	str	r5, [r1, #112]	; 0x70
    slider->dragging = 0U;
 802a438:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
    slider->left_knob_focus = 0U;
 802a43c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802a440:	f365 0341 	bfi	r3, r5, #1, #1
 802a444:	f881 3074 	strb.w	r3, [r1, #116]	; 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802a448:	f44f 7140 	mov.w	r1, #768	; 0x300
 802a44c:	4620      	mov	r0, r4
 802a44e:	f7dc fdcb 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 802a452:	2110      	movs	r1, #16
 802a454:	4620      	mov	r0, r4
 802a456:	f7dc fdc7 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 802a45a:	4628      	mov	r0, r5
 802a45c:	f7f6 fb36 	bl	8020acc <lv_disp_get_dpi>
 802a460:	281d      	cmp	r0, #29
 802a462:	dc04      	bgt.n	802a46e <lv_slider_constructor+0x3e>
 802a464:	2101      	movs	r1, #1
 802a466:	4620      	mov	r0, r4
 802a468:	f7de fb23 	bl	8008ab2 <lv_obj_set_ext_click_area>
}
 802a46c:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 802a46e:	4628      	mov	r0, r5
 802a470:	f7f6 fb2c 	bl	8020acc <lv_disp_get_dpi>
 802a474:	300a      	adds	r0, #10
 802a476:	4b04      	ldr	r3, [pc, #16]	; (802a488 <lv_slider_constructor+0x58>)
 802a478:	fb83 2300 	smull	r2, r3, r3, r0
 802a47c:	17c1      	asrs	r1, r0, #31
 802a47e:	ebc1 01e3 	rsb	r1, r1, r3, asr #3
 802a482:	b209      	sxth	r1, r1
 802a484:	e7ef      	b.n	802a466 <lv_slider_constructor+0x36>
 802a486:	bf00      	nop
 802a488:	66666667 	.word	0x66666667

0802a48c <lv_slider_event>:
{
 802a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a490:	b0b5      	sub	sp, #212	; 0xd4
 802a492:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802a494:	48a4      	ldr	r0, [pc, #656]	; (802a728 <lv_slider_event+0x29c>)
 802a496:	f7d9 fe98 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802a49a:	2801      	cmp	r0, #1
 802a49c:	d002      	beq.n	802a4a4 <lv_slider_event+0x18>
}
 802a49e:	b035      	add	sp, #212	; 0xd4
 802a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802a4a4:	4620      	mov	r0, r4
 802a4a6:	f7d9 ffb3 	bl	8004410 <lv_event_get_code>
 802a4aa:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802a4ac:	4620      	mov	r0, r4
 802a4ae:	f7d9 ffab 	bl	8004408 <lv_event_get_target>
 802a4b2:	4605      	mov	r5, r0
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 802a4b4:	f7fb fb33 	bl	8025b1e <lv_bar_get_mode>
 802a4b8:	4607      	mov	r7, r0
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 802a4ba:	2801      	cmp	r0, #1
 802a4bc:	d003      	beq.n	802a4c6 <lv_slider_event+0x3a>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
    else return LV_SLIDER_MODE_NORMAL;
 802a4be:	2802      	cmp	r0, #2
 802a4c0:	bf0c      	ite	eq
 802a4c2:	4607      	moveq	r7, r0
 802a4c4:	2700      	movne	r7, #0
    if(code == LV_EVENT_HIT_TEST) {
 802a4c6:	2e11      	cmp	r6, #17
 802a4c8:	d032      	beq.n	802a530 <lv_slider_event+0xa4>
    else if(code == LV_EVENT_PRESSED) {
 802a4ca:	2e01      	cmp	r6, #1
 802a4cc:	d076      	beq.n	802a5bc <lv_slider_event+0x130>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 802a4ce:	2e02      	cmp	r6, #2
 802a4d0:	f000 812c 	beq.w	802a72c <lv_slider_event+0x2a0>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 802a4d4:	2e08      	cmp	r6, #8
 802a4d6:	f000 81ca 	beq.w	802a86e <lv_slider_event+0x3e2>
 802a4da:	2e03      	cmp	r6, #3
 802a4dc:	f000 81c7 	beq.w	802a86e <lv_slider_event+0x3e2>
    else if(code == LV_EVENT_FOCUSED) {
 802a4e0:	2e0e      	cmp	r6, #14
 802a4e2:	f000 81fd 	beq.w	802a8e0 <lv_slider_event+0x454>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 802a4e6:	2e29      	cmp	r6, #41	; 0x29
 802a4e8:	f000 820a 	beq.w	802a900 <lv_slider_event+0x474>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802a4ec:	2e13      	cmp	r6, #19
 802a4ee:	f000 820b 	beq.w	802a908 <lv_slider_event+0x47c>
    else if(code == LV_EVENT_KEY) {
 802a4f2:	2e0d      	cmp	r6, #13
 802a4f4:	f040 82a6 	bne.w	802aa44 <lv_slider_event+0x5b8>
        char c = *((char *)lv_event_get_param(e));
 802a4f8:	4620      	mov	r0, r4
 802a4fa:	f7d9 ff8d 	bl	8004418 <lv_event_get_param>
 802a4fe:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 802a500:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 802a504:	2a11      	cmp	r2, #17
 802a506:	f000 8278 	beq.w	802a9fa <lv_slider_event+0x56e>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
 802a50a:	2b14      	cmp	r3, #20
 802a50c:	d001      	beq.n	802a512 <lv_slider_event+0x86>
 802a50e:	2b12      	cmp	r3, #18
 802a510:	d1c5      	bne.n	802a49e <lv_slider_event+0x12>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 802a512:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a516:	f013 0f02 	tst.w	r3, #2
 802a51a:	f040 828a 	bne.w	802aa32 <lv_slider_event+0x5a6>
    return lv_bar_get_value(obj);
 802a51e:	4628      	mov	r0, r5
 802a520:	f7fb fae7 	bl	8025af2 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 802a524:	2201      	movs	r2, #1
 802a526:	1e41      	subs	r1, r0, #1
 802a528:	4628      	mov	r0, r5
 802a52a:	f7fb fa79 	bl	8025a20 <lv_bar_set_value>
}
 802a52e:	e271      	b.n	802aa14 <lv_slider_event+0x588>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 802a530:	4620      	mov	r0, r4
 802a532:	f7d9 ff71 	bl	8004418 <lv_event_get_param>
 802a536:	4604      	mov	r4, r0
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 802a538:	68ab      	ldr	r3, [r5, #8]
 802a53a:	2b00      	cmp	r3, #0
 802a53c:	d03c      	beq.n	802a5b8 <lv_slider_event+0x12c>
 802a53e:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
    dest->x1 = src->x1;
 802a542:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 802a546:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    dest->y1 = src->y1;
 802a54a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
 802a54e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    dest->x2 = src->x2;
 802a552:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
 802a556:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    dest->y2 = src->y2;
 802a55a:	f8b5 306e 	ldrh.w	r3, [r5, #110]	; 0x6e
 802a55e:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
        lv_area_increase(&a, ext_click_area, ext_click_area);
 802a562:	4632      	mov	r2, r6
 802a564:	4631      	mov	r1, r6
 802a566:	a822      	add	r0, sp, #136	; 0x88
 802a568:	f7f6 fdad 	bl	80210c6 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, 0);
 802a56c:	2200      	movs	r2, #0
 802a56e:	6821      	ldr	r1, [r4, #0]
 802a570:	a822      	add	r0, sp, #136	; 0x88
 802a572:	f7f6 fe13 	bl	802119c <_lv_area_is_point_on>
 802a576:	7120      	strb	r0, [r4, #4]
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 802a578:	2800      	cmp	r0, #0
 802a57a:	d190      	bne.n	802a49e <lv_slider_event+0x12>
 802a57c:	2f02      	cmp	r7, #2
 802a57e:	d18e      	bne.n	802a49e <lv_slider_event+0x12>
    dest->x1 = src->x1;
 802a580:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 802a584:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    dest->y1 = src->y1;
 802a588:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 802a58c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
    dest->x2 = src->x2;
 802a590:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 802a594:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    dest->y2 = src->y2;
 802a598:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 802a59c:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
            lv_area_increase(&a, ext_click_area, ext_click_area);
 802a5a0:	4632      	mov	r2, r6
 802a5a2:	4631      	mov	r1, r6
 802a5a4:	a822      	add	r0, sp, #136	; 0x88
 802a5a6:	f7f6 fd8e 	bl	80210c6 <lv_area_increase>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 802a5aa:	2200      	movs	r2, #0
 802a5ac:	6821      	ldr	r1, [r4, #0]
 802a5ae:	a822      	add	r0, sp, #136	; 0x88
 802a5b0:	f7f6 fdf4 	bl	802119c <_lv_area_is_point_on>
 802a5b4:	7120      	strb	r0, [r4, #4]
 802a5b6:	e772      	b.n	802a49e <lv_slider_event+0x12>
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 802a5b8:	2600      	movs	r6, #0
 802a5ba:	e7c2      	b.n	802a542 <lv_slider_event+0xb6>
        lv_obj_invalidate(obj);
 802a5bc:	4628      	mov	r0, r5
 802a5be:	f7de f83d 	bl	800863c <lv_obj_invalidate>
        slider->dragging = true;
 802a5c2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a5c6:	f043 0301 	orr.w	r3, r3, #1
 802a5ca:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 802a5ce:	2f01      	cmp	r7, #1
 802a5d0:	d94a      	bls.n	802a668 <lv_slider_event+0x1dc>
            lv_indev_get_point(lv_indev_get_act(), &p);
 802a5d2:	f7da fa9d 	bl	8004b10 <lv_indev_get_act>
 802a5d6:	a922      	add	r1, sp, #136	; 0x88
 802a5d8:	f7da fb17 	bl	8004c0a <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 802a5dc:	4628      	mov	r0, r5
 802a5de:	f7dd fde6 	bl	80081ae <lv_obj_get_width>
 802a5e2:	4606      	mov	r6, r0
 802a5e4:	4628      	mov	r0, r5
 802a5e6:	f7dd fde8 	bl	80081ba <lv_obj_get_height>
 802a5ea:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802a5ec:	2216      	movs	r2, #22
 802a5ee:	2100      	movs	r1, #0
 802a5f0:	4628      	mov	r0, r5
 802a5f2:	f7e0 fc5b 	bl	800aeac <lv_obj_get_style_prop>
            if(hor) {
 802a5f6:	42a6      	cmp	r6, r4
 802a5f8:	db56      	blt.n	802a6a8 <lv_slider_event+0x21c>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 802a5fa:	b2c0      	uxtb	r0, r0
 802a5fc:	2801      	cmp	r0, #1
 802a5fe:	d037      	beq.n	802a670 <lv_slider_event+0x1e4>
 802a600:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 802a604:	f9b5 206c 	ldrsh.w	r2, [r5, #108]	; 0x6c
 802a608:	429a      	cmp	r2, r3
 802a60a:	db37      	blt.n	802a67c <lv_slider_event+0x1f0>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 802a60c:	f9b5 2060 	ldrsh.w	r2, [r5, #96]	; 0x60
 802a610:	429a      	cmp	r2, r3
 802a612:	dc3b      	bgt.n	802a68c <lv_slider_event+0x200>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 802a614:	f9b5 2060 	ldrsh.w	r2, [r5, #96]	; 0x60
 802a618:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 802a61c:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	; 0x68
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 802a620:	f9b5 1064 	ldrsh.w	r1, [r5, #100]	; 0x64
 802a624:	1a89      	subs	r1, r1, r2
 802a626:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 802a62a:	eb02 0261 	add.w	r2, r2, r1, asr #1
 802a62e:	1a12      	subs	r2, r2, r0
 802a630:	2a00      	cmp	r2, #0
 802a632:	bfb8      	it	lt
 802a634:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 802a636:	f9b5 106c 	ldrsh.w	r1, [r5, #108]	; 0x6c
 802a63a:	1ac9      	subs	r1, r1, r3
 802a63c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 802a640:	eb03 0361 	add.w	r3, r3, r1, asr #1
 802a644:	1a1b      	subs	r3, r3, r0
 802a646:	2b00      	cmp	r3, #0
 802a648:	bfb8      	it	lt
 802a64a:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 802a64c:	b212      	sxth	r2, r2
 802a64e:	b21b      	sxth	r3, r3
 802a650:	429a      	cmp	r2, r3
 802a652:	dd1f      	ble.n	802a694 <lv_slider_event+0x208>
                        slider->value_to_set = &slider->bar.cur_value;
 802a654:	f105 0324 	add.w	r3, r5, #36	; 0x24
 802a658:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 0;
 802a65a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a65e:	f36f 0341 	bfc	r3, #1, #1
 802a662:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a666:	e71a      	b.n	802a49e <lv_slider_event+0x12>
            slider->value_to_set = &slider->bar.cur_value;
 802a668:	f105 0324 	add.w	r3, r5, #36	; 0x24
 802a66c:	672b      	str	r3, [r5, #112]	; 0x70
 802a66e:	e716      	b.n	802a49e <lv_slider_event+0x12>
                                                                                         p.x < slider->right_knob_area.x1)) {
 802a670:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 802a674:	f9b5 2068 	ldrsh.w	r2, [r5, #104]	; 0x68
 802a678:	429a      	cmp	r2, r3
 802a67a:	dd03      	ble.n	802a684 <lv_slider_event+0x1f8>
                    slider->value_to_set = &slider->bar.cur_value;
 802a67c:	f105 0324 	add.w	r3, r5, #36	; 0x24
 802a680:	672b      	str	r3, [r5, #112]	; 0x70
 802a682:	e70c      	b.n	802a49e <lv_slider_event+0x12>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 802a684:	f9b5 2064 	ldrsh.w	r2, [r5, #100]	; 0x64
 802a688:	429a      	cmp	r2, r3
 802a68a:	dac3      	bge.n	802a614 <lv_slider_event+0x188>
                    slider->value_to_set = &slider->bar.start_value;
 802a68c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 802a690:	672b      	str	r3, [r5, #112]	; 0x70
 802a692:	e704      	b.n	802a49e <lv_slider_event+0x12>
                        slider->value_to_set = &slider->bar.start_value;
 802a694:	f105 0330 	add.w	r3, r5, #48	; 0x30
 802a698:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 1;
 802a69a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a69e:	f043 0302 	orr.w	r3, r3, #2
 802a6a2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a6a6:	e6fa      	b.n	802a49e <lv_slider_event+0x12>
                if(p.y < slider->right_knob_area.y1) {
 802a6a8:	f9bd 108a 	ldrsh.w	r1, [sp, #138]	; 0x8a
 802a6ac:	f9b5 306a 	ldrsh.w	r3, [r5, #106]	; 0x6a
 802a6b0:	4299      	cmp	r1, r3
 802a6b2:	da03      	bge.n	802a6bc <lv_slider_event+0x230>
                    slider->value_to_set = &slider->bar.cur_value;
 802a6b4:	f105 0324 	add.w	r3, r5, #36	; 0x24
 802a6b8:	672b      	str	r3, [r5, #112]	; 0x70
 802a6ba:	e6f0      	b.n	802a49e <lv_slider_event+0x12>
                else if(p.y > slider->left_knob_area.y2) {
 802a6bc:	f9b5 0066 	ldrsh.w	r0, [r5, #102]	; 0x66
 802a6c0:	4281      	cmp	r1, r0
 802a6c2:	dd03      	ble.n	802a6cc <lv_slider_event+0x240>
                    slider->value_to_set = &slider->bar.start_value;
 802a6c4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 802a6c8:	672b      	str	r3, [r5, #112]	; 0x70
 802a6ca:	e6e8      	b.n	802a49e <lv_slider_event+0x12>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 802a6cc:	f9b5 2062 	ldrsh.w	r2, [r5, #98]	; 0x62
 802a6d0:	1a80      	subs	r0, r0, r2
 802a6d2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802a6d6:	eb02 0260 	add.w	r2, r2, r0, asr #1
 802a6da:	1a52      	subs	r2, r2, r1
 802a6dc:	2a00      	cmp	r2, #0
 802a6de:	bfb8      	it	lt
 802a6e0:	4252      	neglt	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 802a6e2:	f9b5 006e 	ldrsh.w	r0, [r5, #110]	; 0x6e
 802a6e6:	1ac0      	subs	r0, r0, r3
 802a6e8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802a6ec:	eb03 0360 	add.w	r3, r3, r0, asr #1
 802a6f0:	1a5b      	subs	r3, r3, r1
 802a6f2:	2b00      	cmp	r3, #0
 802a6f4:	bfb8      	it	lt
 802a6f6:	425b      	neglt	r3, r3
                    if(dist_right < dist_left) {
 802a6f8:	b212      	sxth	r2, r2
 802a6fa:	b21b      	sxth	r3, r3
 802a6fc:	429a      	cmp	r2, r3
 802a6fe:	dd09      	ble.n	802a714 <lv_slider_event+0x288>
                        slider->value_to_set = &slider->bar.cur_value;
 802a700:	f105 0324 	add.w	r3, r5, #36	; 0x24
 802a704:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 0;
 802a706:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a70a:	f36f 0341 	bfc	r3, #1, #1
 802a70e:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a712:	e6c4      	b.n	802a49e <lv_slider_event+0x12>
                        slider->value_to_set = &slider->bar.start_value;
 802a714:	f105 0330 	add.w	r3, r5, #48	; 0x30
 802a718:	672b      	str	r3, [r5, #112]	; 0x70
                        slider->left_knob_focus = 1;
 802a71a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a71e:	f043 0302 	orr.w	r3, r3, #2
 802a722:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a726:	e6ba      	b.n	802a49e <lv_slider_event+0x12>
 802a728:	0803377c 	.word	0x0803377c
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 802a72c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802a72e:	2b00      	cmp	r3, #0
 802a730:	f43f aeb5 	beq.w	802a49e <lv_slider_event+0x12>
        lv_indev_t * indev = lv_indev_get_act();
 802a734:	f7da f9ec 	bl	8004b10 <lv_indev_get_act>
 802a738:	4604      	mov	r4, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 802a73a:	f7da f9ef 	bl	8004b1c <lv_indev_get_type>
 802a73e:	2801      	cmp	r0, #1
 802a740:	f47f aead 	bne.w	802a49e <lv_slider_event+0x12>
        lv_indev_get_point(indev, &p);
 802a744:	a922      	add	r1, sp, #136	; 0x88
 802a746:	4620      	mov	r0, r4
 802a748:	f7da fa5f 	bl	8004c0a <lv_indev_get_point>
        const int32_t range = slider->bar.max_value - slider->bar.min_value;
 802a74c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 802a74e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a750:	1acc      	subs	r4, r1, r3

static bool is_slider_horizontal(lv_obj_t * obj)
{
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 802a752:	4628      	mov	r0, r5
 802a754:	f7dd fd2b 	bl	80081ae <lv_obj_get_width>
 802a758:	4606      	mov	r6, r0
 802a75a:	4628      	mov	r0, r5
 802a75c:	f7dd fd2d 	bl	80081ba <lv_obj_get_height>
        if(is_slider_horizontal(obj)) {
 802a760:	4286      	cmp	r6, r0
 802a762:	db4f      	blt.n	802a804 <lv_slider_event+0x378>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a764:	2212      	movs	r2, #18
 802a766:	2100      	movs	r1, #0
 802a768:	4628      	mov	r0, r5
 802a76a:	f7e0 fb9f 	bl	800aeac <lv_obj_get_style_prop>
 802a76e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a770:	2213      	movs	r2, #19
 802a772:	2100      	movs	r1, #0
 802a774:	4628      	mov	r0, r5
 802a776:	f7e0 fb99 	bl	800aeac <lv_obj_get_style_prop>
 802a77a:	4680      	mov	r8, r0
            const lv_coord_t w = lv_obj_get_width(obj);
 802a77c:	4628      	mov	r0, r5
 802a77e:	f7dd fd16 	bl	80081ae <lv_obj_get_width>
            const lv_coord_t indic_w = w - bg_left - bg_right;
 802a782:	eb07 0108 	add.w	r1, r7, r8
 802a786:	1a41      	subs	r1, r0, r1
 802a788:	b20e      	sxth	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802a78a:	2216      	movs	r2, #22
 802a78c:	2100      	movs	r1, #0
 802a78e:	4628      	mov	r0, r5
 802a790:	f7e0 fb8c 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802a794:	b2c3      	uxtb	r3, r0
            if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 802a796:	2b01      	cmp	r3, #1
 802a798:	d02a      	beq.n	802a7f0 <lv_slider_event+0x364>
                new_value = p.x - (obj->coords.x1 + bg_left);
 802a79a:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 802a79e:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 802a7a2:	b23f      	sxth	r7, r7
 802a7a4:	4417      	add	r7, r2
 802a7a6:	1bdb      	subs	r3, r3, r7
            new_value = (new_value * range + indic_w / 2) / indic_w;
 802a7a8:	eb06 71d6 	add.w	r1, r6, r6, lsr #31
 802a7ac:	1049      	asrs	r1, r1, #1
 802a7ae:	fb04 1103 	mla	r1, r4, r3, r1
 802a7b2:	fb91 f1f6 	sdiv	r1, r1, r6
            new_value += slider->bar.min_value;
 802a7b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a7b8:	4419      	add	r1, r3
        if(slider->value_to_set == &slider->bar.start_value) {
 802a7ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802a7bc:	f105 0230 	add.w	r2, r5, #48	; 0x30
 802a7c0:	4293      	cmp	r3, r2
 802a7c2:	d043      	beq.n	802a84c <lv_slider_event+0x3c0>
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 802a7c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 802a7c6:	4291      	cmp	r1, r2
 802a7c8:	bfa8      	it	ge
 802a7ca:	4611      	movge	r1, r2
 802a7cc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802a7ce:	4291      	cmp	r1, r2
 802a7d0:	bfb8      	it	lt
 802a7d2:	4611      	movlt	r1, r2
        if(*slider->value_to_set != new_value) {
 802a7d4:	681b      	ldr	r3, [r3, #0]
 802a7d6:	4299      	cmp	r1, r3
 802a7d8:	f43f ae61 	beq.w	802a49e <lv_slider_event+0x12>
                lv_bar_set_value(obj, new_value, LV_ANIM_ON);
 802a7dc:	2201      	movs	r2, #1
 802a7de:	4628      	mov	r0, r5
 802a7e0:	f7fb f91e 	bl	8025a20 <lv_bar_set_value>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802a7e4:	2200      	movs	r2, #0
 802a7e6:	211c      	movs	r1, #28
 802a7e8:	4628      	mov	r0, r5
 802a7ea:	f7d9 fdeb 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 802a7ee:	e656      	b.n	802a49e <lv_slider_event+0x12>
                new_value = (obj->coords.x2 - bg_right) - p.x;
 802a7f0:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 802a7f4:	fa0f f888 	sxth.w	r8, r8
 802a7f8:	eba3 0308 	sub.w	r3, r3, r8
 802a7fc:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
 802a800:	1a5b      	subs	r3, r3, r1
 802a802:	e7d1      	b.n	802a7a8 <lv_slider_event+0x31c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a804:	2210      	movs	r2, #16
 802a806:	2100      	movs	r1, #0
 802a808:	4628      	mov	r0, r5
 802a80a:	f7e0 fb4f 	bl	800aeac <lv_obj_get_style_prop>
 802a80e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a810:	2211      	movs	r2, #17
 802a812:	2100      	movs	r1, #0
 802a814:	4628      	mov	r0, r5
 802a816:	f7e0 fb49 	bl	800aeac <lv_obj_get_style_prop>
 802a81a:	4606      	mov	r6, r0
            const lv_coord_t h = lv_obj_get_height(obj);
 802a81c:	4628      	mov	r0, r5
 802a81e:	f7dd fccc 	bl	80081ba <lv_obj_get_height>
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 802a822:	19f3      	adds	r3, r6, r7
 802a824:	1ac3      	subs	r3, r0, r3
 802a826:	b218      	sxth	r0, r3
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 802a828:	f9b5 201a 	ldrsh.w	r2, [r5, #26]
 802a82c:	b236      	sxth	r6, r6
 802a82e:	4432      	add	r2, r6
 802a830:	f9bd 108a 	ldrsh.w	r1, [sp, #138]	; 0x8a
            new_value = (-new_value * range + indic_h / 2) / indic_h;
 802a834:	1a52      	subs	r2, r2, r1
 802a836:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 802a83a:	4401      	add	r1, r0
 802a83c:	1049      	asrs	r1, r1, #1
 802a83e:	fb04 1102 	mla	r1, r4, r2, r1
 802a842:	fb91 f1f0 	sdiv	r1, r1, r0
            new_value += slider->bar.min_value;
 802a846:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a848:	4419      	add	r1, r3
 802a84a:	e7b6      	b.n	802a7ba <lv_slider_event+0x32e>
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 802a84c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 802a84e:	4291      	cmp	r1, r2
 802a850:	bfa8      	it	ge
 802a852:	4611      	movge	r1, r2
 802a854:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802a856:	4291      	cmp	r1, r2
 802a858:	bfb8      	it	lt
 802a85a:	4611      	movlt	r1, r2
        if(*slider->value_to_set != new_value) {
 802a85c:	681b      	ldr	r3, [r3, #0]
 802a85e:	4299      	cmp	r1, r3
 802a860:	f43f ae1d 	beq.w	802a49e <lv_slider_event+0x12>
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 802a864:	2201      	movs	r2, #1
 802a866:	4628      	mov	r0, r5
 802a868:	f7fb f921 	bl	8025aae <lv_bar_set_start_value>
 802a86c:	e7ba      	b.n	802a7e4 <lv_slider_event+0x358>
        slider->dragging = false;
 802a86e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a872:	f36f 0300 	bfc	r3, #0, #1
 802a876:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        slider->value_to_set = NULL;
 802a87a:	2300      	movs	r3, #0
 802a87c:	672b      	str	r3, [r5, #112]	; 0x70
        lv_obj_invalidate(obj);
 802a87e:	4628      	mov	r0, r5
 802a880:	f7dd fedc 	bl	800863c <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 802a884:	4628      	mov	r0, r5
 802a886:	f7dc fc1a 	bl	80070be <lv_obj_get_group>
 802a88a:	4606      	mov	r6, r0
        bool editing     = lv_group_get_editing(g);
 802a88c:	f7da f85e 	bl	800494c <lv_group_get_editing>
 802a890:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802a892:	f7da f93d 	bl	8004b10 <lv_indev_get_act>
 802a896:	f7da f941 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 802a89a:	2804      	cmp	r0, #4
 802a89c:	f47f adff 	bne.w	802a49e <lv_slider_event+0x12>
            if(editing) {
 802a8a0:	2c00      	cmp	r4, #0
 802a8a2:	f43f adfc 	beq.w	802a49e <lv_slider_event+0x12>
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 802a8a6:	4628      	mov	r0, r5
 802a8a8:	f7fb f939 	bl	8025b1e <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 802a8ac:	2802      	cmp	r0, #2
 802a8ae:	f040 8158 	bne.w	802ab62 <lv_slider_event+0x6d6>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 802a8b2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a8b6:	f013 0f02 	tst.w	r3, #2
 802a8ba:	d106      	bne.n	802a8ca <lv_slider_event+0x43e>
 802a8bc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a8c0:	f043 0302 	orr.w	r3, r3, #2
 802a8c4:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a8c8:	e5e9      	b.n	802a49e <lv_slider_event+0x12>
                        slider->left_knob_focus = 0;
 802a8ca:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a8ce:	f36f 0341 	bfc	r3, #1, #1
 802a8d2:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
                        lv_group_set_editing(g, false);
 802a8d6:	2100      	movs	r1, #0
 802a8d8:	4630      	mov	r0, r6
 802a8da:	f7d9 ffca 	bl	8004872 <lv_group_set_editing>
 802a8de:	e5de      	b.n	802a49e <lv_slider_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802a8e0:	f7da f916 	bl	8004b10 <lv_indev_get_act>
 802a8e4:	f7da f91a 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 802a8e8:	2804      	cmp	r0, #4
 802a8ea:	d002      	beq.n	802a8f2 <lv_slider_event+0x466>
 802a8ec:	2802      	cmp	r0, #2
 802a8ee:	f47f add6 	bne.w	802a49e <lv_slider_event+0x12>
            slider->left_knob_focus = 0;
 802a8f2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a8f6:	f36f 0341 	bfc	r3, #1, #1
 802a8fa:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
 802a8fe:	e5ce      	b.n	802a49e <lv_slider_event+0x12>
        lv_obj_refresh_ext_draw_size(obj);
 802a900:	4628      	mov	r0, r5
 802a902:	f7dd fa57 	bl	8007db4 <lv_obj_refresh_ext_draw_size>
 802a906:	e5ca      	b.n	802a49e <lv_slider_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802a908:	2212      	movs	r2, #18
 802a90a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a90e:	4628      	mov	r0, r5
 802a910:	f7e0 facc 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a914:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802a918:	2213      	movs	r2, #19
 802a91a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a91e:	4628      	mov	r0, r5
 802a920:	f7e0 fac4 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a924:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802a926:	2210      	movs	r2, #16
 802a928:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a92c:	4628      	mov	r0, r5
 802a92e:	f7e0 fabd 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a932:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802a936:	2211      	movs	r2, #17
 802a938:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a93c:	4628      	mov	r0, r5
 802a93e:	f7e0 fab5 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a942:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 802a946:	226c      	movs	r2, #108	; 0x6c
 802a948:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a94c:	4628      	mov	r0, r5
 802a94e:	f7e0 faad 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a952:	b203      	sxth	r3, r0
 802a954:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 802a956:	2268      	movs	r2, #104	; 0x68
 802a958:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a95c:	4628      	mov	r0, r5
 802a95e:	f7e0 faa5 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a962:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 802a966:	2269      	movs	r2, #105	; 0x69
 802a968:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a96c:	4628      	mov	r0, r5
 802a96e:	f7e0 fa9d 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802a972:	b207      	sxth	r7, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 802a974:	4628      	mov	r0, r5
 802a976:	f7dd fc1a 	bl	80081ae <lv_obj_get_width>
 802a97a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802a97e:	9302      	str	r3, [sp, #8]
 802a980:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 802a984:	4628      	mov	r0, r5
 802a986:	f7dd fc18 	bl	80081ba <lv_obj_get_height>
 802a98a:	007b      	lsls	r3, r7, #1
 802a98c:	9303      	str	r3, [sp, #12]
 802a98e:	eb00 0747 	add.w	r7, r0, r7, lsl #1
 802a992:	45b8      	cmp	r8, r7
 802a994:	da29      	bge.n	802a9ea <lv_slider_event+0x55e>
 802a996:	4628      	mov	r0, r5
 802a998:	f7dd fc09 	bl	80081ae <lv_obj_get_width>
 802a99c:	9f02      	ldr	r7, [sp, #8]
 802a99e:	4407      	add	r7, r0
 802a9a0:	f347 074f 	sbfx	r7, r7, #1, #16
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a9a4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802a9a8:	4628      	mov	r0, r5
 802a9aa:	f7dd f98a 	bl	8007cc2 <lv_obj_calculate_ext_draw_size>
 802a9ae:	4605      	mov	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 802a9b0:	4620      	mov	r0, r4
 802a9b2:	f7d9 fd31 	bl	8004418 <lv_event_get_param>
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 802a9b6:	4633      	mov	r3, r6
 802a9b8:	455e      	cmp	r6, fp
 802a9ba:	bfb8      	it	lt
 802a9bc:	465b      	movlt	r3, fp
 802a9be:	4553      	cmp	r3, sl
 802a9c0:	bfb8      	it	lt
 802a9c2:	4653      	movlt	r3, sl
 802a9c4:	4599      	cmp	r9, r3
 802a9c6:	bfb8      	it	lt
 802a9c8:	4699      	movlt	r9, r3
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a9ca:	f109 0302 	add.w	r3, r9, #2
 802a9ce:	442b      	add	r3, r5
        knob_size = (knob_size * zoom) >> 8;
 802a9d0:	9a01      	ldr	r2, [sp, #4]
 802a9d2:	fb02 f707 	mul.w	r7, r2, r7
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802a9d6:	eb03 2327 	add.w	r3, r3, r7, asr #8
        *s  = LV_MAX(*s, knob_size);
 802a9da:	b21b      	sxth	r3, r3
 802a9dc:	f9b0 2000 	ldrsh.w	r2, [r0]
 802a9e0:	4293      	cmp	r3, r2
 802a9e2:	bfb8      	it	lt
 802a9e4:	4613      	movlt	r3, r2
 802a9e6:	8003      	strh	r3, [r0, #0]
 802a9e8:	e559      	b.n	802a49e <lv_slider_event+0x12>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 802a9ea:	4628      	mov	r0, r5
 802a9ec:	f7dd fbe5 	bl	80081ba <lv_obj_get_height>
 802a9f0:	9f03      	ldr	r7, [sp, #12]
 802a9f2:	4407      	add	r7, r0
 802a9f4:	f347 074f 	sbfx	r7, r7, #1, #16
 802a9f8:	e7d4      	b.n	802a9a4 <lv_slider_event+0x518>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 802a9fa:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 802a9fe:	f013 0f02 	tst.w	r3, #2
 802aa02:	d10d      	bne.n	802aa20 <lv_slider_event+0x594>
    return lv_bar_get_value(obj);
 802aa04:	4628      	mov	r0, r5
 802aa06:	f7fb f874 	bl	8025af2 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 802aa0a:	2201      	movs	r2, #1
 802aa0c:	1881      	adds	r1, r0, r2
 802aa0e:	4628      	mov	r0, r5
 802aa10:	f7fb f806 	bl	8025a20 <lv_bar_set_value>
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802aa14:	2200      	movs	r2, #0
 802aa16:	211c      	movs	r1, #28
 802aa18:	4628      	mov	r0, r5
 802aa1a:	f7d9 fcd3 	bl	80043c4 <lv_event_send>
        if(res != LV_RES_OK) return;
 802aa1e:	e53e      	b.n	802a49e <lv_slider_event+0x12>
    return lv_bar_get_start_value(obj);
 802aa20:	4628      	mov	r0, r5
 802aa22:	f7fb f86d 	bl	8025b00 <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 802aa26:	2201      	movs	r2, #1
 802aa28:	1881      	adds	r1, r0, r2
 802aa2a:	4628      	mov	r0, r5
 802aa2c:	f7fb f83f 	bl	8025aae <lv_bar_set_start_value>
}
 802aa30:	e7f0      	b.n	802aa14 <lv_slider_event+0x588>
    return lv_bar_get_start_value(obj);
 802aa32:	4628      	mov	r0, r5
 802aa34:	f7fb f864 	bl	8025b00 <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 802aa38:	2201      	movs	r2, #1
 802aa3a:	1e41      	subs	r1, r0, #1
 802aa3c:	4628      	mov	r0, r5
 802aa3e:	f7fb f836 	bl	8025aae <lv_bar_set_start_value>
}
 802aa42:	e7e7      	b.n	802aa14 <lv_slider_event+0x588>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802aa44:	2e15      	cmp	r6, #21
 802aa46:	f47f ad2a 	bne.w	802a49e <lv_slider_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802aa4a:	4620      	mov	r0, r4
 802aa4c:	f7d9 fcdc 	bl	8004408 <lv_event_get_target>
 802aa50:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802aa52:	4620      	mov	r0, r4
 802aa54:	f7d9 fd4c 	bl	80044f0 <lv_event_get_draw_ctx>
 802aa58:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802aa5a:	2216      	movs	r2, #22
 802aa5c:	2100      	movs	r1, #0
 802aa5e:	4628      	mov	r0, r5
 802aa60:	f7e0 fa24 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802aa64:	fa5f f980 	uxtb.w	r9, r0
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 802aa68:	4628      	mov	r0, r5
 802aa6a:	f7dd fba0 	bl	80081ae <lv_obj_get_width>
 802aa6e:	4604      	mov	r4, r0
 802aa70:	4628      	mov	r0, r5
 802aa72:	f7dd fba2 	bl	80081ba <lv_obj_get_height>
 802aa76:	4606      	mov	r6, r0
 802aa78:	4284      	cmp	r4, r0
 802aa7a:	bfb4      	ite	lt
 802aa7c:	f04f 0b00 	movlt.w	fp, #0
 802aa80:	f04f 0b01 	movge.w	fp, #1
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 802aa84:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 802aa88:	f003 0303 	and.w	r3, r3, #3
 802aa8c:	2b01      	cmp	r3, #1
 802aa8e:	d009      	beq.n	802aaa4 <lv_slider_event+0x618>
    if(is_horizontal) {
 802aa90:	42b4      	cmp	r4, r6
 802aa92:	da7b      	bge.n	802ab8c <lv_slider_event+0x700>
        knob_size = lv_obj_get_width(obj);
 802aa94:	4628      	mov	r0, r5
 802aa96:	f7dd fb8a 	bl	80081ae <lv_obj_get_width>
 802aa9a:	9001      	str	r0, [sp, #4]
        else knob_area.y1 = slider->bar.indic_area.y1;
 802aa9c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 802aa9e:	f8ad 3012 	strh.w	r3, [sp, #18]
 802aaa2:	e080      	b.n	802aba6 <lv_slider_event+0x71a>
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 802aaa4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	daf2      	bge.n	802aa90 <lv_slider_event+0x604>
       slider->bar.max_value > 0) is_symmetrical = true;
 802aaaa:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    if(is_horizontal) {
 802aaae:	4284      	cmp	r4, r0
 802aab0:	db0d      	blt.n	802aace <lv_slider_event+0x642>
        knob_size = lv_obj_get_height(obj);
 802aab2:	4628      	mov	r0, r5
 802aab4:	f7dd fb81 	bl	80081ba <lv_obj_get_height>
 802aab8:	9001      	str	r0, [sp, #4]
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 802aaba:	f1b8 0f00 	cmp.w	r8, #0
 802aabe:	dd69      	ble.n	802ab94 <lv_slider_event+0x708>
 802aac0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802aac2:	2b00      	cmp	r3, #0
 802aac4:	da66      	bge.n	802ab94 <lv_slider_event+0x708>
 802aac6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 802aac8:	f8ad 3010 	strh.w	r3, [sp, #16]
 802aacc:	e06b      	b.n	802aba6 <lv_slider_event+0x71a>
        knob_size = lv_obj_get_width(obj);
 802aace:	4628      	mov	r0, r5
 802aad0:	f7dd fb6d 	bl	80081ae <lv_obj_get_width>
 802aad4:	9001      	str	r0, [sp, #4]
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 802aad6:	f1b8 0f00 	cmp.w	r8, #0
 802aada:	dddf      	ble.n	802aa9c <lv_slider_event+0x610>
 802aadc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802aade:	2b00      	cmp	r3, #0
 802aae0:	dadc      	bge.n	802aa9c <lv_slider_event+0x610>
 802aae2:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 802aae4:	f8ad 3012 	strh.w	r3, [sp, #18]
 802aae8:	e05d      	b.n	802aba6 <lv_slider_event+0x71a>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(!is_rtl, slider->bar.indic_area);
 802aaea:	f1b9 0f01 	cmp.w	r9, #1
 802aaee:	bf14      	ite	ne
 802aaf0:	f9b5 3034 	ldrshne.w	r3, [r5, #52]	; 0x34
 802aaf4:	f9b5 3038 	ldrsheq.w	r3, [r5, #56]	; 0x38
 802aaf8:	f8ad 3010 	strh.w	r3, [sp, #16]
        position_knob(obj, &knob_area, knob_size, is_horizontal);
 802aafc:	465b      	mov	r3, fp
 802aafe:	9a01      	ldr	r2, [sp, #4]
 802ab00:	a904      	add	r1, sp, #16
 802ab02:	4628      	mov	r0, r5
 802ab04:	f7ff fc32 	bl	802a36c <position_knob>
        lv_area_copy(&slider->left_knob_area, &knob_area);
 802ab08:	f105 0660 	add.w	r6, r5, #96	; 0x60
    dest->x1 = src->x1;
 802ab0c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802ab10:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    dest->y1 = src->y1;
 802ab14:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802ab18:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
    dest->x2 = src->x2;
 802ab1c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 802ab20:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
    dest->y2 = src->y2;
 802ab24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802ab28:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 802ab2c:	ac06      	add	r4, sp, #24
 802ab2e:	2238      	movs	r2, #56	; 0x38
 802ab30:	a914      	add	r1, sp, #80	; 0x50
 802ab32:	4620      	mov	r0, r4
 802ab34:	f7f7 fae4 	bl	8022100 <lv_memcpy>
        part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB_LEFT;
 802ab38:	2301      	movs	r3, #1
 802ab3a:	9324      	str	r3, [sp, #144]	; 0x90
        part_draw_dsc.draw_area = &slider->left_knob_area;
 802ab3c:	9625      	str	r6, [sp, #148]	; 0x94
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 802ab3e:	9426      	str	r4, [sp, #152]	; 0x98
        part_draw_dsc.id = 1;
 802ab40:	9330      	str	r3, [sp, #192]	; 0xc0
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802ab42:	aa22      	add	r2, sp, #136	; 0x88
 802ab44:	211a      	movs	r1, #26
 802ab46:	4628      	mov	r0, r5
 802ab48:	f7d9 fc3c 	bl	80043c4 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 802ab4c:	4632      	mov	r2, r6
 802ab4e:	4621      	mov	r1, r4
 802ab50:	4638      	mov	r0, r7
 802ab52:	f7e4 fec7 	bl	800f8e4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802ab56:	aa22      	add	r2, sp, #136	; 0x88
 802ab58:	211b      	movs	r1, #27
 802ab5a:	4628      	mov	r0, r5
 802ab5c:	f7d9 fc32 	bl	80043c4 <lv_event_send>
}
 802ab60:	e49d      	b.n	802a49e <lv_slider_event+0x12>
                    lv_group_set_editing(g, false);
 802ab62:	2100      	movs	r1, #0
 802ab64:	4630      	mov	r0, r6
 802ab66:	f7d9 fe84 	bl	8004872 <lv_group_set_editing>
 802ab6a:	e498      	b.n	802a49e <lv_slider_event+0x12>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802ab6c:	aa22      	add	r2, sp, #136	; 0x88
 802ab6e:	211a      	movs	r1, #26
 802ab70:	4628      	mov	r0, r5
 802ab72:	f7d9 fc27 	bl	80043c4 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 802ab76:	4652      	mov	r2, sl
 802ab78:	a906      	add	r1, sp, #24
 802ab7a:	4638      	mov	r0, r7
 802ab7c:	f7e4 feb2 	bl	800f8e4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802ab80:	aa22      	add	r2, sp, #136	; 0x88
 802ab82:	211b      	movs	r1, #27
 802ab84:	4628      	mov	r0, r5
 802ab86:	f7d9 fc1d 	bl	80043c4 <lv_event_send>
 802ab8a:	e488      	b.n	802a49e <lv_slider_event+0x12>
        knob_size = lv_obj_get_height(obj);
 802ab8c:	4628      	mov	r0, r5
 802ab8e:	f7dd fb14 	bl	80081ba <lv_obj_get_height>
 802ab92:	9001      	str	r0, [sp, #4]
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 802ab94:	f1b9 0f01 	cmp.w	r9, #1
 802ab98:	bf0c      	ite	eq
 802ab9a:	f9b5 3034 	ldrsheq.w	r3, [r5, #52]	; 0x34
 802ab9e:	f9b5 3038 	ldrshne.w	r3, [r5, #56]	; 0x38
 802aba2:	f8ad 3010 	strh.w	r3, [sp, #16]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 802aba6:	f10d 0818 	add.w	r8, sp, #24
 802abaa:	4640      	mov	r0, r8
 802abac:	f7e4 fe3e 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 802abb0:	4642      	mov	r2, r8
 802abb2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802abb6:	4628      	mov	r0, r5
 802abb8:	f7dc fdb2 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, is_horizontal);
 802abbc:	465b      	mov	r3, fp
 802abbe:	9a01      	ldr	r2, [sp, #4]
 802abc0:	a904      	add	r1, sp, #16
 802abc2:	4628      	mov	r0, r5
 802abc4:	f7ff fbd2 	bl	802a36c <position_knob>
    lv_area_copy(&slider->right_knob_area, &knob_area);
 802abc8:	f105 0a68 	add.w	sl, r5, #104	; 0x68
    dest->x1 = src->x1;
 802abcc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802abd0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    dest->y1 = src->y1;
 802abd4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802abd8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    dest->x2 = src->x2;
 802abdc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 802abe0:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
    dest->y2 = src->y2;
 802abe4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802abe8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 802abec:	4639      	mov	r1, r7
 802abee:	a822      	add	r0, sp, #136	; 0x88
 802abf0:	f7dd f8d1 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_KNOB;
 802abf4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 802abf8:	932f      	str	r3, [sp, #188]	; 0xbc
    part_draw_dsc.class_p = MY_CLASS;
 802abfa:	4b14      	ldr	r3, [pc, #80]	; (802ac4c <lv_slider_event+0x7c0>)
 802abfc:	9323      	str	r3, [sp, #140]	; 0x8c
    part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB;
 802abfe:	2300      	movs	r3, #0
 802ac00:	9324      	str	r3, [sp, #144]	; 0x90
    part_draw_dsc.id = 0;
 802ac02:	9330      	str	r3, [sp, #192]	; 0xc0
    part_draw_dsc.draw_area = &slider->right_knob_area;
 802ac04:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 802ac08:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 802ac0c:	4628      	mov	r0, r5
 802ac0e:	f7fa ff86 	bl	8025b1e <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 802ac12:	2802      	cmp	r0, #2
 802ac14:	d1aa      	bne.n	802ab6c <lv_slider_event+0x6e0>
        lv_memcpy(&knob_rect_dsc_tmp, &knob_rect_dsc, sizeof(lv_draw_rect_dsc_t));
 802ac16:	2238      	movs	r2, #56	; 0x38
 802ac18:	a906      	add	r1, sp, #24
 802ac1a:	a814      	add	r0, sp, #80	; 0x50
 802ac1c:	f7f7 fa70 	bl	8022100 <lv_memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802ac20:	aa22      	add	r2, sp, #136	; 0x88
 802ac22:	211a      	movs	r1, #26
 802ac24:	4628      	mov	r0, r5
 802ac26:	f7d9 fbcd 	bl	80043c4 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 802ac2a:	4652      	mov	r2, sl
 802ac2c:	a906      	add	r1, sp, #24
 802ac2e:	4638      	mov	r0, r7
 802ac30:	f7e4 fe58 	bl	800f8e4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802ac34:	aa22      	add	r2, sp, #136	; 0x88
 802ac36:	211b      	movs	r1, #27
 802ac38:	4628      	mov	r0, r5
 802ac3a:	f7d9 fbc3 	bl	80043c4 <lv_event_send>
        if(is_horizontal) {
 802ac3e:	42b4      	cmp	r4, r6
 802ac40:	f6bf af53 	bge.w	802aaea <lv_slider_event+0x65e>
            knob_area.y1 = slider->bar.indic_area.y2;
 802ac44:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 802ac46:	f8ad 3012 	strh.w	r3, [sp, #18]
 802ac4a:	e757      	b.n	802aafc <lv_slider_event+0x670>
 802ac4c:	0803377c 	.word	0x0803377c

0802ac50 <lv_switch_anim_ready>:

/**
 * Resets the switch's animation state to "no animation in progress".
 */
static void lv_switch_anim_ready(lv_anim_t * a)
{
 802ac50:	b508      	push	{r3, lr}
    lv_switch_t * sw = a->var;
 802ac52:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 802ac54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802ac58:	6243      	str	r3, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 802ac5a:	f7dd fcef 	bl	800863c <lv_obj_invalidate>
}
 802ac5e:	bd08      	pop	{r3, pc}

0802ac60 <lv_switch_anim_exec_cb>:
{
 802ac60:	b508      	push	{r3, lr}
    sw->anim_state = value;
 802ac62:	6241      	str	r1, [r0, #36]	; 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 802ac64:	f7dd fcea 	bl	800863c <lv_obj_invalidate>
}
 802ac68:	bd08      	pop	{r3, pc}

0802ac6a <lv_switch_destructor>:
{
 802ac6a:	b508      	push	{r3, lr}
 802ac6c:	4608      	mov	r0, r1
    lv_anim_del(sw, NULL);
 802ac6e:	2100      	movs	r1, #0
 802ac70:	f7f6 f8fe 	bl	8020e70 <lv_anim_del>
}
 802ac74:	bd08      	pop	{r3, pc}
	...

0802ac78 <lv_switch_event>:
{
 802ac78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802ac7c:	b0a5      	sub	sp, #148	; 0x94
 802ac7e:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802ac80:	48a8      	ldr	r0, [pc, #672]	; (802af24 <lv_switch_event+0x2ac>)
 802ac82:	f7d9 faa2 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802ac86:	2801      	cmp	r0, #1
 802ac88:	d002      	beq.n	802ac90 <lv_switch_event+0x18>
}
 802ac8a:	b025      	add	sp, #148	; 0x94
 802ac8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802ac90:	4620      	mov	r0, r4
 802ac92:	f7d9 fbbd 	bl	8004410 <lv_event_get_code>
 802ac96:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802ac98:	4620      	mov	r0, r4
 802ac9a:	f7d9 fbb5 	bl	8004408 <lv_event_get_target>
 802ac9e:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802aca0:	2d13      	cmp	r5, #19
 802aca2:	f000 80b7 	beq.w	802ae14 <lv_switch_event+0x19c>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 802aca6:	2d1c      	cmp	r5, #28
 802aca8:	f000 80fe 	beq.w	802aea8 <lv_switch_event+0x230>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802acac:	2d15      	cmp	r5, #21
 802acae:	d1ec      	bne.n	802ac8a <lv_switch_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802acb0:	4620      	mov	r0, r4
 802acb2:	f7d9 fba9 	bl	8004408 <lv_event_get_target>
 802acb6:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802acb8:	4620      	mov	r0, r4
 802acba:	f7d9 fc19 	bl	80044f0 <lv_event_get_draw_ctx>
 802acbe:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802acc0:	2212      	movs	r2, #18
 802acc2:	2100      	movs	r1, #0
 802acc4:	4628      	mov	r0, r5
 802acc6:	f7e0 f8f1 	bl	800aeac <lv_obj_get_style_prop>
 802acca:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802accc:	2213      	movs	r2, #19
 802acce:	2100      	movs	r1, #0
 802acd0:	4628      	mov	r0, r5
 802acd2:	f7e0 f8eb 	bl	800aeac <lv_obj_get_style_prop>
 802acd6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802acd8:	2210      	movs	r2, #16
 802acda:	2100      	movs	r1, #0
 802acdc:	4628      	mov	r0, r5
 802acde:	f7e0 f8e5 	bl	800aeac <lv_obj_get_style_prop>
 802ace2:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802ace4:	2211      	movs	r2, #17
 802ace6:	2100      	movs	r1, #0
 802ace8:	4628      	mov	r0, r5
 802acea:	f7e0 f8df 	bl	800aeac <lv_obj_get_style_prop>
    dest->y1 = src->y1;
 802acee:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
    dest->x2 = src->x2;
 802acf2:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
    dest->y2 = src->y2;
 802acf6:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
    indic_area.x1 += bg_left;
 802acfa:	f8b5 c014 	ldrh.w	ip, [r5, #20]
 802acfe:	4464      	add	r4, ip
 802ad00:	f8ad 4004 	strh.w	r4, [sp, #4]
    indic_area.x2 -= bg_right;
 802ad04:	eba1 0108 	sub.w	r1, r1, r8
 802ad08:	f8ad 1008 	strh.w	r1, [sp, #8]
    indic_area.y1 += bg_top;
 802ad0c:	4432      	add	r2, r6
 802ad0e:	f8ad 2006 	strh.w	r2, [sp, #6]
    indic_area.y2 -= bg_bottom;
 802ad12:	1a1b      	subs	r3, r3, r0
 802ad14:	f8ad 300a 	strh.w	r3, [sp, #10]
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 802ad18:	a805      	add	r0, sp, #20
 802ad1a:	f7e4 fd87 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 802ad1e:	aa05      	add	r2, sp, #20
 802ad20:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802ad24:	4628      	mov	r0, r5
 802ad26:	f7dc fcfb 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 802ad2a:	aa01      	add	r2, sp, #4
 802ad2c:	a905      	add	r1, sp, #20
 802ad2e:	4638      	mov	r0, r7
 802ad30:	f7e4 fdd8 	bl	800f8e4 <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 802ad34:	4628      	mov	r0, r5
 802ad36:	f7dd fa40 	bl	80081ba <lv_obj_get_height>
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 802ad3a:	b286      	uxth	r6, r0
 802ad3c:	8b2c      	ldrh	r4, [r5, #24]
 802ad3e:	1ba4      	subs	r4, r4, r6
 802ad40:	3401      	adds	r4, #1
 802ad42:	8aab      	ldrh	r3, [r5, #20]
 802ad44:	1ae4      	subs	r4, r4, r3
 802ad46:	fa1f f884 	uxth.w	r8, r4
 802ad4a:	b224      	sxth	r4, r4
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 802ad4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802ad4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802ad52:	f000 80df 	beq.w	802af14 <lv_switch_event+0x29c>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 802ad56:	fb03 f404 	mul.w	r4, r3, r4
 802ad5a:	2c00      	cmp	r4, #0
 802ad5c:	bfb8      	it	lt
 802ad5e:	34ff      	addlt	r4, #255	; 0xff
 802ad60:	f344 240f 	sbfx	r4, r4, #8, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802ad64:	2216      	movs	r2, #22
 802ad66:	2100      	movs	r1, #0
 802ad68:	4628      	mov	r0, r5
 802ad6a:	f7e0 f89f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802ad6e:	b2c0      	uxtb	r0, r0
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 802ad70:	2801      	cmp	r0, #1
        anim_value_x = anim_length - anim_value_x;
 802ad72:	bf04      	itt	eq
 802ad74:	eba8 0404 	subeq.w	r4, r8, r4
 802ad78:	b224      	sxtheq	r4, r4
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 802ad7a:	8aab      	ldrh	r3, [r5, #20]
 802ad7c:	441c      	add	r4, r3
 802ad7e:	b2a4      	uxth	r4, r4
 802ad80:	f8ad 400c 	strh.w	r4, [sp, #12]
    knob_area.x2 = knob_area.x1 + knob_size;
 802ad84:	4434      	add	r4, r6
 802ad86:	f8ad 4010 	strh.w	r4, [sp, #16]
    knob_area.y1 = obj->coords.y1;
 802ad8a:	8aeb      	ldrh	r3, [r5, #22]
 802ad8c:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 = obj->coords.y2;
 802ad90:	8b6b      	ldrh	r3, [r5, #26]
 802ad92:	f8ad 3012 	strh.w	r3, [sp, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802ad96:	2212      	movs	r2, #18
 802ad98:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802ad9c:	4628      	mov	r0, r5
 802ad9e:	f7e0 f885 	bl	800aeac <lv_obj_get_style_prop>
 802ada2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802ada4:	2213      	movs	r2, #19
 802ada6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802adaa:	4628      	mov	r0, r5
 802adac:	f7e0 f87e 	bl	800aeac <lv_obj_get_style_prop>
 802adb0:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802adb2:	2210      	movs	r2, #16
 802adb4:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802adb8:	4628      	mov	r0, r5
 802adba:	f7e0 f877 	bl	800aeac <lv_obj_get_style_prop>
 802adbe:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802adc0:	2211      	movs	r2, #17
 802adc2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802adc6:	4628      	mov	r0, r5
 802adc8:	f7e0 f870 	bl	800aeac <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 802adcc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802add0:	eba3 0308 	sub.w	r3, r3, r8
 802add4:	f8ad 300c 	strh.w	r3, [sp, #12]
    knob_area.x2 += knob_right;
 802add8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802addc:	441c      	add	r4, r3
 802adde:	f8ad 4010 	strh.w	r4, [sp, #16]
    knob_area.y1 -= knob_top;
 802ade2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 802ade6:	1b9b      	subs	r3, r3, r6
 802ade8:	f8ad 300e 	strh.w	r3, [sp, #14]
    knob_area.y2 += knob_bottom;
 802adec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802adf0:	4418      	add	r0, r3
 802adf2:	f8ad 0012 	strh.w	r0, [sp, #18]
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 802adf6:	a813      	add	r0, sp, #76	; 0x4c
 802adf8:	f7e4 fd18 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 802adfc:	aa13      	add	r2, sp, #76	; 0x4c
 802adfe:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802ae02:	4628      	mov	r0, r5
 802ae04:	f7dc fc8c 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 802ae08:	aa03      	add	r2, sp, #12
 802ae0a:	a913      	add	r1, sp, #76	; 0x4c
 802ae0c:	4638      	mov	r0, r7
 802ae0e:	f7e4 fd69 	bl	800f8e4 <lv_draw_rect>
}
 802ae12:	e73a      	b.n	802ac8a <lv_switch_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802ae14:	2212      	movs	r2, #18
 802ae16:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802ae1a:	f7e0 f847 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802ae1e:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802ae22:	2213      	movs	r2, #19
 802ae24:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802ae28:	4630      	mov	r0, r6
 802ae2a:	f7e0 f83f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802ae2e:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802ae30:	2210      	movs	r2, #16
 802ae32:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802ae36:	4630      	mov	r0, r6
 802ae38:	f7e0 f838 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802ae3c:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802ae40:	2211      	movs	r2, #17
 802ae42:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802ae46:	4630      	mov	r0, r6
 802ae48:	f7e0 f830 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802ae4c:	b207      	sxth	r7, r0
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802ae4e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 802ae52:	4630      	mov	r0, r6
 802ae54:	f7dc ff35 	bl	8007cc2 <lv_obj_calculate_ext_draw_size>
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 802ae58:	454d      	cmp	r5, r9
 802ae5a:	bfb8      	it	lt
 802ae5c:	464d      	movlt	r5, r9
 802ae5e:	4545      	cmp	r5, r8
 802ae60:	bfb8      	it	lt
 802ae62:	4645      	movlt	r5, r8
 802ae64:	42bd      	cmp	r5, r7
 802ae66:	bfb8      	it	lt
 802ae68:	463d      	movlt	r5, r7
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 802ae6a:	3502      	adds	r5, #2
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 802ae6c:	4405      	add	r5, r0
 802ae6e:	b2ad      	uxth	r5, r5
        lv_coord_t * s = lv_event_get_param(e);
 802ae70:	4620      	mov	r0, r4
 802ae72:	f7d9 fad1 	bl	8004418 <lv_event_get_param>
 802ae76:	4604      	mov	r4, r0
        *s = LV_MAX(*s, knob_size);
 802ae78:	f9b0 3000 	ldrsh.w	r3, [r0]
 802ae7c:	b22d      	sxth	r5, r5
 802ae7e:	429d      	cmp	r5, r3
 802ae80:	bfb8      	it	lt
 802ae82:	461d      	movlt	r5, r3
 802ae84:	8005      	strh	r5, [r0, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 802ae86:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802ae8a:	4630      	mov	r0, r6
 802ae8c:	f7dc ff19 	bl	8007cc2 <lv_obj_calculate_ext_draw_size>
 802ae90:	4285      	cmp	r5, r0
 802ae92:	dd03      	ble.n	802ae9c <lv_switch_event+0x224>
 802ae94:	f9b4 0000 	ldrsh.w	r0, [r4]
 802ae98:	8020      	strh	r0, [r4, #0]
 802ae9a:	e6f6      	b.n	802ac8a <lv_switch_event+0x12>
 802ae9c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 802aea0:	4630      	mov	r0, r6
 802aea2:	f7dc ff0e 	bl	8007cc2 <lv_obj_calculate_ext_draw_size>
 802aea6:	e7f7      	b.n	802ae98 <lv_switch_event+0x220>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 802aea8:	2264      	movs	r2, #100	; 0x64
 802aeaa:	2100      	movs	r1, #0
 802aeac:	f7df fffe 	bl	800aeac <lv_obj_get_style_prop>
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 802aeb0:	4605      	mov	r5, r0
 802aeb2:	b918      	cbnz	r0, 802aebc <lv_switch_event+0x244>
        lv_obj_invalidate(obj);
 802aeb4:	4630      	mov	r0, r6
 802aeb6:	f7dd fbc1 	bl	800863c <lv_obj_invalidate>
 802aeba:	e6e6      	b.n	802ac8a <lv_switch_event+0x12>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 802aebc:	4630      	mov	r0, r6
 802aebe:	f7dc f8f6 	bl	80070ae <lv_obj_get_state>
 802aec2:	f000 0001 	and.w	r0, r0, #1
        int32_t anim_start;
        int32_t anim_end;
        /*No animation in progress -> simply set the values*/
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 802aec6:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802aec8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 802aecc:	d01b      	beq.n	802af06 <lv_switch_event+0x28e>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
        }
        /*Animation in progress. Start from the animation end value*/
        else {
            anim_start = sw->anim_state;
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 802aece:	0207      	lsls	r7, r0, #8
        }
        /*Calculate actual animation duration*/
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;

        /*Stop the previous animation if it exists*/
        lv_anim_del(sw, NULL);
 802aed0:	2100      	movs	r1, #0
 802aed2:	4630      	mov	r0, r6
 802aed4:	f7f5 ffcc 	bl	8020e70 <lv_anim_del>

        lv_anim_t a;
        lv_anim_init(&a);
 802aed8:	a813      	add	r0, sp, #76	; 0x4c
 802aeda:	f7f5 ffaf 	bl	8020e3c <lv_anim_init>
    a->var = var;
 802aede:	9613      	str	r6, [sp, #76]	; 0x4c
    a->exec_cb = exec_cb;
 802aee0:	4b11      	ldr	r3, [pc, #68]	; (802af28 <lv_switch_event+0x2b0>)
 802aee2:	9314      	str	r3, [sp, #80]	; 0x50
    a->start_value = start;
 802aee4:	941b      	str	r4, [sp, #108]	; 0x6c
    a->current_value = start;
 802aee6:	941c      	str	r4, [sp, #112]	; 0x70
    a->end_value = end;
 802aee8:	971d      	str	r7, [sp, #116]	; 0x74
    a->ready_cb = ready_cb;
 802aeea:	4b10      	ldr	r3, [pc, #64]	; (802af2c <lv_switch_event+0x2b4>)
 802aeec:	9316      	str	r3, [sp, #88]	; 0x58
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 802aeee:	1be3      	subs	r3, r4, r7
 802aef0:	2b00      	cmp	r3, #0
 802aef2:	bfb8      	it	lt
 802aef4:	425b      	neglt	r3, r3
 802aef6:	fb05 f303 	mul.w	r3, r5, r3
 802aefa:	0a1b      	lsrs	r3, r3, #8
    a->time = duration;
 802aefc:	931e      	str	r3, [sp, #120]	; 0x78
        lv_anim_set_var(&a, sw);
        lv_anim_set_exec_cb(&a, lv_switch_anim_exec_cb);
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
 802aefe:	a813      	add	r0, sp, #76	; 0x4c
 802af00:	f7f5 ffee 	bl	8020ee0 <lv_anim_start>
 802af04:	e7d6      	b.n	802aeb4 <lv_switch_event+0x23c>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 802af06:	0207      	lsls	r7, r0, #8
 802af08:	2800      	cmp	r0, #0
 802af0a:	bf14      	ite	ne
 802af0c:	2400      	movne	r4, #0
 802af0e:	f44f 7480 	moveq.w	r4, #256	; 0x100
 802af12:	e7dd      	b.n	802aed0 <lv_switch_event+0x258>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 802af14:	4628      	mov	r0, r5
 802af16:	f7dc f8ca 	bl	80070ae <lv_obj_get_state>
        anim_value_x = chk ? anim_length : 0;
 802af1a:	f010 0f01 	tst.w	r0, #1
 802af1e:	bf08      	it	eq
 802af20:	2400      	moveq	r4, #0
 802af22:	e71f      	b.n	802ad64 <lv_switch_event+0xec>
 802af24:	08033798 	.word	0x08033798
 802af28:	0802ac61 	.word	0x0802ac61
 802af2c:	0802ac51 	.word	0x0802ac51

0802af30 <lv_switch_constructor>:
{
 802af30:	b510      	push	{r4, lr}
 802af32:	460c      	mov	r4, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 802af34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802af38:	624b      	str	r3, [r1, #36]	; 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 802af3a:	2110      	movs	r1, #16
 802af3c:	4620      	mov	r0, r4
 802af3e:	f7dc f853 	bl	8006fe8 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 802af42:	2108      	movs	r1, #8
 802af44:	4620      	mov	r0, r4
 802af46:	f7dc f815 	bl	8006f74 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 802af4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802af4e:	4620      	mov	r0, r4
 802af50:	f7dc f810 	bl	8006f74 <lv_obj_add_flag>
}
 802af54:	bd10      	pop	{r4, pc}

0802af56 <get_row_height>:
}

static lv_coord_t get_row_height(lv_obj_t * obj, uint16_t row_id, const lv_font_t * font,
                                 lv_coord_t letter_space, lv_coord_t line_space,
                                 lv_coord_t cell_left, lv_coord_t cell_right, lv_coord_t cell_top, lv_coord_t cell_bottom)
{
 802af56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af5a:	b08f      	sub	sp, #60	; 0x3c
 802af5c:	4680      	mov	r8, r0
 802af5e:	9205      	str	r2, [sp, #20]
 802af60:	9309      	str	r3, [sp, #36]	; 0x24
 802af62:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 802af66:	930a      	str	r3, [sp, #40]	; 0x28
 802af68:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 802af6c:	9306      	str	r3, [sp, #24]
 802af6e:	f9bd 0070 	ldrsh.w	r0, [sp, #112]	; 0x70
 802af72:	9007      	str	r0, [sp, #28]
 802af74:	4403      	add	r3, r0
 802af76:	b29b      	uxth	r3, r3
 802af78:	9308      	str	r3, [sp, #32]
    lv_table_t * table = (lv_table_t *)obj;

    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 802af7a:	8917      	ldrh	r7, [r2, #8]
 802af7c:	441f      	add	r7, r3
 802af7e:	b23b      	sxth	r3, r7
 802af80:	9304      	str	r3, [sp, #16]
    /* Calculate the cell_data index where to start */
    uint16_t row_start = row_id * table->col_cnt;
 802af82:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 802af86:	fb03 f101 	mul.w	r1, r3, r1

    /* Traverse the cells in the row_id row */
    uint16_t cell;
    uint16_t col;
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 802af8a:	2b00      	cmp	r3, #0
 802af8c:	d072      	beq.n	802b074 <get_row_height+0x11e>
 802af8e:	b28e      	uxth	r6, r1
 802af90:	4637      	mov	r7, r6
 802af92:	4618      	mov	r0, r3
 802af94:	46b6      	mov	lr, r6
 802af96:	2500      	movs	r5, #0
                           h_max);
        }
        /*Else we have to calculate the height of the cell text*/
        else {
            lv_point_t txt_size;
            txt_w -= cell_left + cell_right;
 802af98:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 802af9c:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 802afa0:	18d3      	adds	r3, r2, r3
 802afa2:	930b      	str	r3, [sp, #44]	; 0x2c
 802afa4:	e01d      	b.n	802afe2 <get_row_height+0x8c>
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802afa6:	2400      	movs	r4, #0
        if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 802afa8:	f899 2000 	ldrb.w	r2, [r9]
 802afac:	f012 0f02 	tst.w	r2, #2
 802afb0:	d040      	beq.n	802b034 <get_row_height+0xde>
 802afb2:	9b05      	ldr	r3, [sp, #20]
 802afb4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
            h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 802afb8:	9b06      	ldr	r3, [sp, #24]
 802afba:	18d3      	adds	r3, r2, r3
 802afbc:	9907      	ldr	r1, [sp, #28]
 802afbe:	440b      	add	r3, r1
 802afc0:	9904      	ldr	r1, [sp, #16]
 802afc2:	428b      	cmp	r3, r1
 802afc4:	dd03      	ble.n	802afce <get_row_height+0x78>
 802afc6:	9b08      	ldr	r3, [sp, #32]
 802afc8:	441a      	add	r2, r3
 802afca:	b213      	sxth	r3, r2
 802afcc:	9304      	str	r3, [sp, #16]
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 802afce:	3601      	adds	r6, #1
 802afd0:	b2b6      	uxth	r6, r6
 802afd2:	3501      	adds	r5, #1
 802afd4:	b2ad      	uxth	r5, r5
 802afd6:	46b6      	mov	lr, r6
 802afd8:	f8b8 0024 	ldrh.w	r0, [r8, #36]	; 0x24
 802afdc:	19c3      	adds	r3, r0, r7
 802afde:	429e      	cmp	r6, r3
 802afe0:	da48      	bge.n	802b074 <get_row_height+0x11e>
        char * cell_data = table->cell_data[cell];
 802afe2:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 802afe6:	f851 9026 	ldr.w	r9, [r1, r6, lsl #2]
        if(is_cell_empty(cell_data)) {
 802afea:	f1b9 0f00 	cmp.w	r9, #0
 802afee:	d0ee      	beq.n	802afce <get_row_height+0x78>
        lv_coord_t txt_w = table->col_w[col];
 802aff0:	f8d8 a030 	ldr.w	sl, [r8, #48]	; 0x30
 802aff4:	f93a 3015 	ldrsh.w	r3, [sl, r5, lsl #1]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802aff8:	46ab      	mov	fp, r5
 802affa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 802affe:	4565      	cmp	r5, ip
 802b000:	dad1      	bge.n	802afa6 <get_row_height+0x50>
 802b002:	462a      	mov	r2, r5
 802b004:	2400      	movs	r4, #0
 802b006:	4620      	mov	r0, r4
            char * next_cell_data = table->cell_data[cell + col_merge];
 802b008:	4470      	add	r0, lr
 802b00a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
            if(is_cell_empty(next_cell_data)) break;
 802b00e:	2800      	cmp	r0, #0
 802b010:	d0ca      	beq.n	802afa8 <get_row_height+0x52>
            if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 802b012:	7800      	ldrb	r0, [r0, #0]
 802b014:	f010 0f01 	tst.w	r0, #1
 802b018:	d0c6      	beq.n	802afa8 <get_row_height+0x52>
                txt_w += table->col_w[col + col_merge + 1];
 802b01a:	3201      	adds	r2, #1
 802b01c:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 802b020:	4413      	add	r3, r2
 802b022:	b21b      	sxth	r3, r3
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802b024:	3401      	adds	r4, #1
 802b026:	b2a4      	uxth	r4, r4
 802b028:	4620      	mov	r0, r4
 802b02a:	eb04 020b 	add.w	r2, r4, fp
 802b02e:	4562      	cmp	r2, ip
 802b030:	dbea      	blt.n	802b008 <get_row_height+0xb2>
 802b032:	e7b9      	b.n	802afa8 <get_row_height+0x52>
            txt_w -= cell_left + cell_right;
 802b034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b036:	1a9b      	subs	r3, r3, r2

            lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, font,
 802b038:	2200      	movs	r2, #0
 802b03a:	9202      	str	r2, [sp, #8]
 802b03c:	b21b      	sxth	r3, r3
 802b03e:	9301      	str	r3, [sp, #4]
 802b040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b042:	9300      	str	r3, [sp, #0]
 802b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b046:	9a05      	ldr	r2, [sp, #20]
 802b048:	f109 0101 	add.w	r1, r9, #1
 802b04c:	a80d      	add	r0, sp, #52	; 0x34
 802b04e:	f7f9 faa8 	bl	80245a2 <lv_txt_get_size>
                            letter_space, line_space, txt_w, LV_TEXT_FLAG_NONE);

            h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 802b052:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 802b056:	9a06      	ldr	r2, [sp, #24]
 802b058:	4413      	add	r3, r2
 802b05a:	9a07      	ldr	r2, [sp, #28]
 802b05c:	4413      	add	r3, r2
 802b05e:	9a04      	ldr	r2, [sp, #16]
 802b060:	4293      	cmp	r3, r2
 802b062:	bfb8      	it	lt
 802b064:	4613      	movlt	r3, r2
 802b066:	b21b      	sxth	r3, r3
 802b068:	9304      	str	r3, [sp, #16]
            /*Skip until one element after the last merged column*/
            cell += col_merge;
 802b06a:	4426      	add	r6, r4
 802b06c:	b2b6      	uxth	r6, r6
            col += col_merge;
 802b06e:	4425      	add	r5, r4
 802b070:	b2ad      	uxth	r5, r5
 802b072:	e7ac      	b.n	802afce <get_row_height+0x78>
        }
    }

    return h_max;
}
 802b074:	9804      	ldr	r0, [sp, #16]
 802b076:	b00f      	add	sp, #60	; 0x3c
 802b078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b07c <refr_size_form_row>:
{
 802b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b080:	b08b      	sub	sp, #44	; 0x2c
 802b082:	4605      	mov	r5, r0
 802b084:	460c      	mov	r4, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802b086:	2212      	movs	r2, #18
 802b088:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b08c:	f7df ff0e 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b090:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802b094:	2213      	movs	r2, #19
 802b096:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b09a:	4628      	mov	r0, r5
 802b09c:	f7df ff06 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b0a0:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802b0a4:	2210      	movs	r2, #16
 802b0a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b0aa:	4628      	mov	r0, r5
 802b0ac:	f7df fefe 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b0b0:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802b0b4:	2211      	movs	r2, #17
 802b0b6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b0ba:	4628      	mov	r0, r5
 802b0bc:	f7df fef6 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b0c0:	b203      	sxth	r3, r0
 802b0c2:	9309      	str	r3, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 802b0c4:	2258      	movs	r2, #88	; 0x58
 802b0c6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b0ca:	4628      	mov	r0, r5
 802b0cc:	f7df feee 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b0d0:	b203      	sxth	r3, r0
 802b0d2:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802b0d4:	2259      	movs	r2, #89	; 0x59
 802b0d6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b0da:	4628      	mov	r0, r5
 802b0dc:	f7df fee6 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b0e0:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802b0e2:	2257      	movs	r2, #87	; 0x57
 802b0e4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b0e8:	4628      	mov	r0, r5
 802b0ea:	f7df fedf 	bl	800aeac <lv_obj_get_style_prop>
 802b0ee:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 802b0f0:	2205      	movs	r2, #5
 802b0f2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b0f6:	4628      	mov	r0, r5
 802b0f8:	f7df fed8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b0fc:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 802b100:	2206      	movs	r2, #6
 802b102:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b106:	4628      	mov	r0, r5
 802b108:	f7df fed0 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b10c:	b206      	sxth	r6, r0
    for(i = start_row; i < table->row_cnt; i++) {
 802b10e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 802b110:	429c      	cmp	r4, r3
 802b112:	d21c      	bcs.n	802b14e <refr_size_form_row+0xd2>
        lv_coord_t calculated_height = get_row_height(obj, i, font, letter_space, line_space,
 802b114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b116:	9304      	str	r3, [sp, #16]
 802b118:	f8cd 900c 	str.w	r9, [sp, #12]
 802b11c:	f8cd a008 	str.w	sl, [sp, #8]
 802b120:	f8cd b004 	str.w	fp, [sp, #4]
 802b124:	9700      	str	r7, [sp, #0]
 802b126:	9b08      	ldr	r3, [sp, #32]
 802b128:	9a07      	ldr	r2, [sp, #28]
 802b12a:	b2a1      	uxth	r1, r4
 802b12c:	4628      	mov	r0, r5
 802b12e:	f7ff ff12 	bl	802af56 <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, calculated_height, maxh);
 802b132:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802b134:	42b0      	cmp	r0, r6
 802b136:	bfa8      	it	ge
 802b138:	4630      	movge	r0, r6
 802b13a:	b200      	sxth	r0, r0
 802b13c:	4540      	cmp	r0, r8
 802b13e:	bfb8      	it	lt
 802b140:	4640      	movlt	r0, r8
 802b142:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for(i = start_row; i < table->row_cnt; i++) {
 802b146:	3401      	adds	r4, #1
 802b148:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 802b14a:	42a3      	cmp	r3, r4
 802b14c:	d8e2      	bhi.n	802b114 <refr_size_form_row+0x98>
    lv_obj_refresh_self_size(obj);
 802b14e:	4628      	mov	r0, r5
 802b150:	f7dd f8ca 	bl	80082e8 <lv_obj_refresh_self_size>
    lv_obj_invalidate(obj);
 802b154:	4628      	mov	r0, r5
 802b156:	f7dd fa71 	bl	800863c <lv_obj_invalidate>
}
 802b15a:	b00b      	add	sp, #44	; 0x2c
 802b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b160 <get_cell_area>:
    strcpy(&dst[1], txt);
#endif
}

static void get_cell_area(lv_obj_t * obj, uint16_t row, uint16_t col, lv_area_t * area)
{
 802b160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b164:	4605      	mov	r5, r0
 802b166:	460e      	mov	r6, r1
 802b168:	461c      	mov	r4, r3
    lv_table_t * table = (lv_table_t *)obj;

    uint32_t c;
    area->x1 = 0;
 802b16a:	2300      	movs	r3, #0
 802b16c:	8023      	strh	r3, [r4, #0]
    for(c = 0; c < col; c++) {
 802b16e:	4617      	mov	r7, r2
 802b170:	b142      	cbz	r2, 802b184 <get_cell_area+0x24>
        area->x1 += table->col_w[c];
 802b172:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802b174:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802b178:	8821      	ldrh	r1, [r4, #0]
 802b17a:	440a      	add	r2, r1
 802b17c:	8022      	strh	r2, [r4, #0]
    for(c = 0; c < col; c++) {
 802b17e:	3301      	adds	r3, #1
 802b180:	42bb      	cmp	r3, r7
 802b182:	d1f6      	bne.n	802b172 <get_cell_area+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802b184:	2216      	movs	r2, #22
 802b186:	2100      	movs	r1, #0
 802b188:	4628      	mov	r0, r5
 802b18a:	f7df fe8f 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802b18e:	b2c0      	uxtb	r0, r0
    }

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL;
    if(rtl) {
 802b190:	2801      	cmp	r0, #1
 802b192:	d037      	beq.n	802b204 <get_cell_area+0xa4>
        lv_coord_t w = lv_obj_get_width(obj);
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
        area->x1 = area->x2 - table->col_w[col];
    }
    else {
        area->x1 -= lv_obj_get_scroll_x(obj);
 802b194:	4628      	mov	r0, r5
 802b196:	f7de fbeb 	bl	8009970 <lv_obj_get_scroll_x>
 802b19a:	8823      	ldrh	r3, [r4, #0]
 802b19c:	1a1b      	subs	r3, r3, r0
 802b19e:	8023      	strh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802b1a0:	2212      	movs	r2, #18
 802b1a2:	2100      	movs	r1, #0
 802b1a4:	4628      	mov	r0, r5
 802b1a6:	f7df fe81 	bl	800aeac <lv_obj_get_style_prop>
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 802b1aa:	8823      	ldrh	r3, [r4, #0]
 802b1ac:	4418      	add	r0, r3
 802b1ae:	b280      	uxth	r0, r0
 802b1b0:	8020      	strh	r0, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
 802b1b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802b1b4:	3801      	subs	r0, #1
 802b1b6:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 802b1ba:	4418      	add	r0, r3
 802b1bc:	80a0      	strh	r0, [r4, #4]
    }

    uint32_t r;
    area->y1 = 0;
 802b1be:	2300      	movs	r3, #0
 802b1c0:	8063      	strh	r3, [r4, #2]
    for(r = 0; r < row; r++) {
 802b1c2:	b146      	cbz	r6, 802b1d6 <get_cell_area+0x76>
        area->y1 += table->row_h[r];
 802b1c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 802b1c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802b1ca:	8861      	ldrh	r1, [r4, #2]
 802b1cc:	440a      	add	r2, r1
 802b1ce:	8062      	strh	r2, [r4, #2]
    for(r = 0; r < row; r++) {
 802b1d0:	3301      	adds	r3, #1
 802b1d2:	42b3      	cmp	r3, r6
 802b1d4:	d1f6      	bne.n	802b1c4 <get_cell_area+0x64>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802b1d6:	2210      	movs	r2, #16
 802b1d8:	2100      	movs	r1, #0
 802b1da:	4628      	mov	r0, r5
 802b1dc:	f7df fe66 	bl	800aeac <lv_obj_get_style_prop>
    }

    area->y1 += lv_obj_get_style_pad_top(obj, 0);
 802b1e0:	8863      	ldrh	r3, [r4, #2]
 802b1e2:	4418      	add	r0, r3
 802b1e4:	8060      	strh	r0, [r4, #2]
    area->y1 -= lv_obj_get_scroll_y(obj);
 802b1e6:	4628      	mov	r0, r5
 802b1e8:	f7de fbca 	bl	8009980 <lv_obj_get_scroll_y>
 802b1ec:	8863      	ldrh	r3, [r4, #2]
 802b1ee:	1a18      	subs	r0, r3, r0
 802b1f0:	b280      	uxth	r0, r0
 802b1f2:	8060      	strh	r0, [r4, #2]
    area->y2 = area->y1 + table->row_h[row] - 1;
 802b1f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802b1f6:	3801      	subs	r0, #1
 802b1f8:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 802b1fc:	4418      	add	r0, r3
 802b1fe:	80e0      	strh	r0, [r4, #6]

}
 802b200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        area->x1 += lv_obj_get_scroll_x(obj);
 802b204:	4628      	mov	r0, r5
 802b206:	f7de fbb3 	bl	8009970 <lv_obj_get_scroll_x>
 802b20a:	8823      	ldrh	r3, [r4, #0]
 802b20c:	4418      	add	r0, r3
 802b20e:	8020      	strh	r0, [r4, #0]
        lv_coord_t w = lv_obj_get_width(obj);
 802b210:	4628      	mov	r0, r5
 802b212:	f7dc ffcc 	bl	80081ae <lv_obj_get_width>
 802b216:	4680      	mov	r8, r0
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
 802b218:	f8b4 9000 	ldrh.w	r9, [r4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802b21c:	2213      	movs	r2, #19
 802b21e:	2100      	movs	r1, #0
 802b220:	4628      	mov	r0, r5
 802b222:	f7df fe43 	bl	800aeac <lv_obj_get_style_prop>
 802b226:	eb09 0300 	add.w	r3, r9, r0
 802b22a:	eba8 0303 	sub.w	r3, r8, r3
 802b22e:	b29b      	uxth	r3, r3
 802b230:	80a3      	strh	r3, [r4, #4]
        area->x1 = area->x2 - table->col_w[col];
 802b232:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 802b234:	f832 2017 	ldrh.w	r2, [r2, r7, lsl #1]
 802b238:	1a9b      	subs	r3, r3, r2
 802b23a:	8023      	strh	r3, [r4, #0]
 802b23c:	e7bf      	b.n	802b1be <get_cell_area+0x5e>

0802b23e <scroll_to_selected_cell>:


static void scroll_to_selected_cell(lv_obj_t * obj)
{
 802b23e:	b530      	push	{r4, r5, lr}
 802b240:	b083      	sub	sp, #12
 802b242:	4604      	mov	r4, r0
    lv_table_t * table = (lv_table_t *)obj;

    lv_area_t a;
    get_cell_area(obj, table->row_act, table->col_act, &a);
 802b244:	466b      	mov	r3, sp
 802b246:	8e82      	ldrh	r2, [r0, #52]	; 0x34
 802b248:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 802b24a:	f7ff ff89 	bl	802b160 <get_cell_area>
    if(a.x1 < 0) {
 802b24e:	f9bd 1000 	ldrsh.w	r1, [sp]
 802b252:	2900      	cmp	r1, #0
 802b254:	db13      	blt.n	802b27e <scroll_to_selected_cell+0x40>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
    }
    else if(a.x2 > lv_obj_get_width(obj)) {
 802b256:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 802b25a:	4620      	mov	r0, r4
 802b25c:	f7dc ffa7 	bl	80081ae <lv_obj_get_width>
 802b260:	4285      	cmp	r5, r0
 802b262:	dd13      	ble.n	802b28c <scroll_to_selected_cell+0x4e>
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 802b264:	4620      	mov	r0, r4
 802b266:	f7dc ffa2 	bl	80081ae <lv_obj_get_width>
 802b26a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802b26e:	1a41      	subs	r1, r0, r1
 802b270:	2301      	movs	r3, #1
 802b272:	2200      	movs	r2, #0
 802b274:	b209      	sxth	r1, r1
 802b276:	4620      	mov	r0, r4
 802b278:	f7de fde6 	bl	8009e48 <lv_obj_scroll_by_bounded>
 802b27c:	e006      	b.n	802b28c <scroll_to_selected_cell+0x4e>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
 802b27e:	4249      	negs	r1, r1
 802b280:	2301      	movs	r3, #1
 802b282:	2200      	movs	r2, #0
 802b284:	b209      	sxth	r1, r1
 802b286:	4620      	mov	r0, r4
 802b288:	f7de fdde 	bl	8009e48 <lv_obj_scroll_by_bounded>
    }

    if(a.y1 < 0) {
 802b28c:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 802b290:	2a00      	cmp	r2, #0
 802b292:	db13      	blt.n	802b2bc <scroll_to_selected_cell+0x7e>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
    }
    else if(a.y2 > lv_obj_get_height(obj)) {
 802b294:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 802b298:	4620      	mov	r0, r4
 802b29a:	f7dc ff8e 	bl	80081ba <lv_obj_get_height>
 802b29e:	4285      	cmp	r5, r0
 802b2a0:	dd13      	ble.n	802b2ca <scroll_to_selected_cell+0x8c>
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 802b2a2:	4620      	mov	r0, r4
 802b2a4:	f7dc ff89 	bl	80081ba <lv_obj_get_height>
 802b2a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 802b2ac:	1a82      	subs	r2, r0, r2
 802b2ae:	2301      	movs	r3, #1
 802b2b0:	b212      	sxth	r2, r2
 802b2b2:	2100      	movs	r1, #0
 802b2b4:	4620      	mov	r0, r4
 802b2b6:	f7de fdc7 	bl	8009e48 <lv_obj_scroll_by_bounded>
    }

}
 802b2ba:	e006      	b.n	802b2ca <scroll_to_selected_cell+0x8c>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
 802b2bc:	4252      	negs	r2, r2
 802b2be:	2301      	movs	r3, #1
 802b2c0:	b212      	sxth	r2, r2
 802b2c2:	2100      	movs	r1, #0
 802b2c4:	4620      	mov	r0, r4
 802b2c6:	f7de fdbf 	bl	8009e48 <lv_obj_scroll_by_bounded>
}
 802b2ca:	b003      	add	sp, #12
 802b2cc:	bd30      	pop	{r4, r5, pc}
	...

0802b2d0 <draw_main>:
{
 802b2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b2d4:	b0df      	sub	sp, #380	; 0x17c
 802b2d6:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802b2d8:	f7d9 f896 	bl	8004408 <lv_event_get_target>
 802b2dc:	4680      	mov	r8, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802b2de:	4620      	mov	r0, r4
 802b2e0:	f7d9 f906 	bl	80044f0 <lv_event_get_draw_ctx>
 802b2e4:	4683      	mov	fp, r0
 802b2e6:	9007      	str	r0, [sp, #28]
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 802b2e8:	6882      	ldr	r2, [r0, #8]
 802b2ea:	f108 0114 	add.w	r1, r8, #20
 802b2ee:	a85c      	add	r0, sp, #368	; 0x170
 802b2f0:	f7f5 ff07 	bl	8021102 <_lv_area_intersect>
 802b2f4:	b910      	cbnz	r0, 802b2fc <draw_main+0x2c>
}
 802b2f6:	b05f      	add	sp, #380	; 0x17c
 802b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 802b2fc:	f8db 3008 	ldr.w	r3, [fp, #8]
 802b300:	9313      	str	r3, [sp, #76]	; 0x4c
    draw_ctx->clip_area = &clip_area;
 802b302:	ab5c      	add	r3, sp, #368	; 0x170
 802b304:	f8cb 3008 	str.w	r3, [fp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802b308:	2232      	movs	r2, #50	; 0x32
 802b30a:	2100      	movs	r1, #0
 802b30c:	4640      	mov	r0, r8
 802b30e:	f7df fdcd 	bl	800aeac <lv_obj_get_style_prop>
 802b312:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802b314:	2210      	movs	r2, #16
 802b316:	2100      	movs	r1, #0
 802b318:	4640      	mov	r0, r8
 802b31a:	f7df fdc7 	bl	800aeac <lv_obj_get_style_prop>
 802b31e:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 802b320:	b203      	sxth	r3, r0
 802b322:	930d      	str	r3, [sp, #52]	; 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802b324:	2211      	movs	r2, #17
 802b326:	2100      	movs	r1, #0
 802b328:	4640      	mov	r0, r8
 802b32a:	f7df fdbf 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b32e:	b203      	sxth	r3, r0
 802b330:	930c      	str	r3, [sp, #48]	; 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802b332:	2212      	movs	r2, #18
 802b334:	2100      	movs	r1, #0
 802b336:	4640      	mov	r0, r8
 802b338:	f7df fdb8 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802b33c:	9004      	str	r0, [sp, #16]
 802b33e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802b342:	920b      	str	r2, [sp, #44]	; 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802b344:	2213      	movs	r2, #19
 802b346:	2100      	movs	r1, #0
 802b348:	4640      	mov	r0, r8
 802b34a:	f7df fdaf 	bl	800aeac <lv_obj_get_style_prop>
 802b34e:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 802b350:	b202      	sxth	r2, r0
 802b352:	920a      	str	r2, [sp, #40]	; 0x28
    lv_state_t state_ori = obj->state;
 802b354:	f8b8 6020 	ldrh.w	r6, [r8, #32]
 802b358:	9611      	str	r6, [sp, #68]	; 0x44
    obj->state = LV_STATE_DEFAULT;
 802b35a:	2500      	movs	r5, #0
 802b35c:	f8a8 5020 	strh.w	r5, [r8, #32]
    obj->skip_trans = 1;
 802b360:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802b364:	f043 0304 	orr.w	r3, r3, #4
 802b368:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
    lv_draw_rect_dsc_init(&rect_dsc_def);
 802b36c:	a84b      	add	r0, sp, #300	; 0x12c
 802b36e:	f7e4 fa5d 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 802b372:	aa4b      	add	r2, sp, #300	; 0x12c
 802b374:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b378:	4640      	mov	r0, r8
 802b37a:	f7dc f9d1 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    lv_draw_label_dsc_init(&label_dsc_def);
 802b37e:	a835      	add	r0, sp, #212	; 0xd4
 802b380:	f7e2 fc98 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 802b384:	aa35      	add	r2, sp, #212	; 0xd4
 802b386:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b38a:	4640      	mov	r0, r8
 802b38c:	f7dc fb3d 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 802b390:	f8a8 6020 	strh.w	r6, [r8, #32]
    obj->skip_trans = 0;
 802b394:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802b398:	f365 0382 	bfi	r3, r5, #2, #1
 802b39c:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 802b3a0:	f8b8 6016 	ldrh.w	r6, [r8, #22]
 802b3a4:	4640      	mov	r0, r8
 802b3a6:	f7de faeb 	bl	8009980 <lv_obj_get_scroll_y>
 802b3aa:	b2a4      	uxth	r4, r4
 802b3ac:	19e3      	adds	r3, r4, r7
 802b3ae:	3b01      	subs	r3, #1
 802b3b0:	4433      	add	r3, r6
 802b3b2:	1a1b      	subs	r3, r3, r0
 802b3b4:	f8ad 316a 	strh.w	r3, [sp, #362]	; 0x16a
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 802b3b8:	4640      	mov	r0, r8
 802b3ba:	f7de fad9 	bl	8009970 <lv_obj_get_scroll_x>
 802b3be:	900f      	str	r0, [sp, #60]	; 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802b3c0:	2216      	movs	r2, #22
 802b3c2:	4629      	mov	r1, r5
 802b3c4:	4640      	mov	r0, r8
 802b3c6:	f7df fd71 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802b3ca:	fa5f fa80 	uxtb.w	sl, r0
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 802b3ce:	4659      	mov	r1, fp
 802b3d0:	a81b      	add	r0, sp, #108	; 0x6c
 802b3d2:	f7dc fce0 	bl	8007d96 <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 802b3d6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 802b3da:	9328      	str	r3, [sp, #160]	; 0xa0
    part_draw_dsc.class_p = MY_CLASS;
 802b3dc:	4bc1      	ldr	r3, [pc, #772]	; (802b6e4 <draw_main+0x414>)
 802b3de:	931c      	str	r3, [sp, #112]	; 0x70
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 802b3e0:	951d      	str	r5, [sp, #116]	; 0x74
    part_draw_dsc.rect_dsc = &rect_dsc_act;
 802b3e2:	ab3d      	add	r3, sp, #244	; 0xf4
 802b3e4:	931f      	str	r3, [sp, #124]	; 0x7c
    part_draw_dsc.label_dsc = &label_dsc_act;
 802b3e6:	ab2d      	add	r3, sp, #180	; 0xb4
 802b3e8:	9320      	str	r3, [sp, #128]	; 0x80
    for(row = 0; row < table->row_cnt; row++) {
 802b3ea:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 802b3ee:	2b00      	cmp	r3, #0
 802b3f0:	f000 8205 	beq.w	802b7fe <draw_main+0x52e>
 802b3f4:	9506      	str	r5, [sp, #24]
    uint16_t cell = 0;
 802b3f6:	46ab      	mov	fp, r5
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 802b3f8:	9b04      	ldr	r3, [sp, #16]
 802b3fa:	4423      	add	r3, r4
 802b3fc:	3b01      	subs	r3, #1
 802b3fe:	9310      	str	r3, [sp, #64]	; 0x40
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 802b400:	eb04 0309 	add.w	r3, r4, r9
 802b404:	9312      	str	r3, [sp, #72]	; 0x48
 802b406:	e1cc      	b.n	802b7a2 <draw_main+0x4d2>
 802b408:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b40a:	43d2      	mvns	r2, r2
 802b40c:	f8b8 1018 	ldrh.w	r1, [r8, #24]
 802b410:	440a      	add	r2, r1
 802b412:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b414:	1a52      	subs	r2, r2, r1
 802b416:	f8ad 2164 	strh.w	r2, [sp, #356]	; 0x164
 802b41a:	e1e3      	b.n	802b7e4 <draw_main+0x514>
            lv_table_cell_ctrl_t ctrl = 0;
 802b41c:	2300      	movs	r3, #0
 802b41e:	9305      	str	r3, [sp, #20]
 802b420:	e13c      	b.n	802b69c <draw_main+0x3cc>
                cell_area.x2 = cell_area.x1 - 1;
 802b422:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 802b426:	1e5a      	subs	r2, r3, #1
 802b428:	f8ad 2168 	strh.w	r2, [sp, #360]	; 0x168
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 802b42c:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802b430:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 802b434:	1a9b      	subs	r3, r3, r2
 802b436:	f8ad 3164 	strh.w	r3, [sp, #356]	; 0x164
 802b43a:	e13f      	b.n	802b6bc <draw_main+0x3ec>
                    if(rtl) cell_area.x1 -= offset;
 802b43c:	f8bd 2164 	ldrh.w	r2, [sp, #356]	; 0x164
 802b440:	1ad3      	subs	r3, r2, r3
 802b442:	f8ad 3164 	strh.w	r3, [sp, #356]	; 0x164
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802b446:	3401      	adds	r4, #1
 802b448:	b2a4      	uxth	r4, r4
 802b44a:	4622      	mov	r2, r4
 802b44c:	1963      	adds	r3, r4, r5
 802b44e:	428b      	cmp	r3, r1
 802b450:	da15      	bge.n	802b47e <draw_main+0x1ae>
                char * next_cell_data = table->cell_data[cell + col_merge];
 802b452:	445a      	add	r2, fp
 802b454:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                if(is_cell_empty(next_cell_data)) break;
 802b458:	b18a      	cbz	r2, 802b47e <draw_main+0x1ae>
                if(merge_ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 802b45a:	7812      	ldrb	r2, [r2, #0]
 802b45c:	f012 0f01 	tst.w	r2, #1
 802b460:	d00d      	beq.n	802b47e <draw_main+0x1ae>
                    lv_coord_t offset = table->col_w[col + col_merge + 1];
 802b462:	3301      	adds	r3, #1
 802b464:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802b468:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
                    if(rtl) cell_area.x1 -= offset;
 802b46c:	f1ba 0f01 	cmp.w	sl, #1
 802b470:	d0e4      	beq.n	802b43c <draw_main+0x16c>
                    else cell_area.x2 += offset;
 802b472:	f8bd 2168 	ldrh.w	r2, [sp, #360]	; 0x168
 802b476:	4413      	add	r3, r2
 802b478:	f8ad 3168 	strh.w	r3, [sp, #360]	; 0x168
 802b47c:	e7e3      	b.n	802b446 <draw_main+0x176>
            if(cell_area.y2 < clip_area.y1) {
 802b47e:	f9bd 316a 	ldrsh.w	r3, [sp, #362]	; 0x16a
 802b482:	f9bd 2172 	ldrsh.w	r2, [sp, #370]	; 0x172
 802b486:	429a      	cmp	r2, r3
 802b488:	f300 8123 	bgt.w	802b6d2 <draw_main+0x402>
    dest->x1 = src->x1;
 802b48c:	f9bd 0164 	ldrsh.w	r0, [sp, #356]	; 0x164
 802b490:	8030      	strh	r0, [r6, #0]
    dest->y1 = src->y1;
 802b492:	f9bd 1166 	ldrsh.w	r1, [sp, #358]	; 0x166
 802b496:	8071      	strh	r1, [r6, #2]
    dest->x2 = src->x2;
 802b498:	f9bd 7168 	ldrsh.w	r7, [sp, #360]	; 0x168
 802b49c:	80b7      	strh	r7, [r6, #4]
    dest->y2 = src->y2;
 802b49e:	80f3      	strh	r3, [r6, #6]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 802b4a0:	f89d c14f 	ldrb.w	ip, [sp, #335]	; 0x14f
 802b4a4:	f3cc 0244 	ubfx	r2, ip, #1, #5
 802b4a8:	f01c 0f08 	tst.w	ip, #8
 802b4ac:	d00d      	beq.n	802b4ca <draw_main+0x1fa>
 802b4ae:	f9b8 c014 	ldrsh.w	ip, [r8, #20]
 802b4b2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 802b4b6:	44f4      	add	ip, lr
 802b4b8:	4560      	cmp	r0, ip
 802b4ba:	dd06      	ble.n	802b4ca <draw_main+0x1fa>
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 802b4bc:	f9bd c14c 	ldrsh.w	ip, [sp, #332]	; 0x14c
 802b4c0:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 802b4c4:	eba0 006c 	sub.w	r0, r0, ip, asr #1
 802b4c8:	8030      	strh	r0, [r6, #0]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 802b4ca:	f012 0f02 	tst.w	r2, #2
 802b4ce:	d00d      	beq.n	802b4ec <draw_main+0x21c>
 802b4d0:	f9b8 0016 	ldrsh.w	r0, [r8, #22]
 802b4d4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 802b4d8:	4460      	add	r0, ip
 802b4da:	4281      	cmp	r1, r0
 802b4dc:	dd06      	ble.n	802b4ec <draw_main+0x21c>
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 802b4de:	f9bd 014c 	ldrsh.w	r0, [sp, #332]	; 0x14c
 802b4e2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802b4e6:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 802b4ea:	8071      	strh	r1, [r6, #2]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 802b4ec:	f012 0f08 	tst.w	r2, #8
 802b4f0:	d010      	beq.n	802b514 <draw_main+0x244>
 802b4f2:	f9b8 1018 	ldrsh.w	r1, [r8, #24]
 802b4f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 802b4f8:	1a09      	subs	r1, r1, r0
 802b4fa:	3901      	subs	r1, #1
 802b4fc:	428f      	cmp	r7, r1
 802b4fe:	da09      	bge.n	802b514 <draw_main+0x244>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 802b500:	f9bd 114c 	ldrsh.w	r1, [sp, #332]	; 0x14c
 802b504:	eb01 70d1 	add.w	r0, r1, r1, lsr #31
 802b508:	f001 0101 	and.w	r1, r1, #1
 802b50c:	eb01 0160 	add.w	r1, r1, r0, asr #1
 802b510:	440f      	add	r7, r1
 802b512:	80b7      	strh	r7, [r6, #4]
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 802b514:	f012 0f01 	tst.w	r2, #1
 802b518:	d010      	beq.n	802b53c <draw_main+0x26c>
               cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 802b51a:	f9b8 201a 	ldrsh.w	r2, [r8, #26]
 802b51e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802b520:	1a52      	subs	r2, r2, r1
 802b522:	3a01      	subs	r2, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 802b524:	4293      	cmp	r3, r2
 802b526:	da09      	bge.n	802b53c <draw_main+0x26c>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 802b528:	f9bd 214c 	ldrsh.w	r2, [sp, #332]	; 0x14c
 802b52c:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 802b530:	f002 0201 	and.w	r2, r2, #1
 802b534:	eb02 0261 	add.w	r2, r2, r1, asr #1
 802b538:	4413      	add	r3, r2
 802b53a:	80f3      	strh	r3, [r6, #6]
            if(row == table->row_act && col == table->col_act) {
 802b53c:	f8b8 3036 	ldrh.w	r3, [r8, #54]	; 0x36
 802b540:	9a08      	ldr	r2, [sp, #32]
 802b542:	4293      	cmp	r3, r2
 802b544:	d104      	bne.n	802b550 <draw_main+0x280>
 802b546:	f8b8 3034 	ldrh.w	r3, [r8, #52]	; 0x34
 802b54a:	454b      	cmp	r3, r9
 802b54c:	f000 80cc 	beq.w	802b6e8 <draw_main+0x418>
                lv_memcpy(&rect_dsc_act, &rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 802b550:	2238      	movs	r2, #56	; 0x38
 802b552:	a94b      	add	r1, sp, #300	; 0x12c
 802b554:	a83d      	add	r0, sp, #244	; 0xf4
 802b556:	f7f6 fdd3 	bl	8022100 <lv_memcpy>
                lv_memcpy(&label_dsc_act, &label_dsc_def, sizeof(lv_draw_label_dsc_t));
 802b55a:	2220      	movs	r2, #32
 802b55c:	a935      	add	r1, sp, #212	; 0xd4
 802b55e:	a82d      	add	r0, sp, #180	; 0xb4
 802b560:	f7f6 fdce 	bl	8022100 <lv_memcpy>
            part_draw_dsc.draw_area = &cell_area_border;
 802b564:	961e      	str	r6, [sp, #120]	; 0x78
            part_draw_dsc.id = row * table->col_cnt + col;
 802b566:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802b56a:	f8b8 2024 	ldrh.w	r2, [r8, #36]	; 0x24
 802b56e:	fb02 5503 	mla	r5, r2, r3, r5
 802b572:	9529      	str	r5, [sp, #164]	; 0xa4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802b574:	aa1b      	add	r2, sp, #108	; 0x6c
 802b576:	211a      	movs	r1, #26
 802b578:	4640      	mov	r0, r8
 802b57a:	f7d8 ff23 	bl	80043c4 <lv_event_send>
            lv_draw_rect(draw_ctx, &rect_dsc_act, &cell_area_border);
 802b57e:	4632      	mov	r2, r6
 802b580:	a93d      	add	r1, sp, #244	; 0xf4
 802b582:	9807      	ldr	r0, [sp, #28]
 802b584:	f7e4 f9ae 	bl	800f8e4 <lv_draw_rect>
            if(table->cell_data[cell]) {
 802b588:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802b58c:	9a04      	ldr	r2, [sp, #16]
 802b58e:	589b      	ldr	r3, [r3, r2]
 802b590:	2b00      	cmp	r3, #0
 802b592:	d063      	beq.n	802b65c <draw_main+0x38c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802b594:	2212      	movs	r2, #18
 802b596:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b59a:	4640      	mov	r0, r8
 802b59c:	f7df fc86 	bl	800aeac <lv_obj_get_style_prop>
 802b5a0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802b5a2:	2213      	movs	r2, #19
 802b5a4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b5a8:	4640      	mov	r0, r8
 802b5aa:	f7df fc7f 	bl	800aeac <lv_obj_get_style_prop>
 802b5ae:	9009      	str	r0, [sp, #36]	; 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802b5b0:	2210      	movs	r2, #16
 802b5b2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b5b6:	4640      	mov	r0, r8
 802b5b8:	f7df fc78 	bl	800aeac <lv_obj_get_style_prop>
 802b5bc:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802b5be:	2211      	movs	r2, #17
 802b5c0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b5c4:	4640      	mov	r0, r8
 802b5c6:	f7df fc71 	bl	800aeac <lv_obj_get_style_prop>
                txt_area.x1 = cell_area.x1 + cell_left;
 802b5ca:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
 802b5ce:	441d      	add	r5, r3
 802b5d0:	b2ad      	uxth	r5, r5
 802b5d2:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
                txt_area.x2 = cell_area.x2 - cell_right;
 802b5d6:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 802b5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b5dc:	1a9b      	subs	r3, r3, r2
 802b5de:	b29a      	uxth	r2, r3
 802b5e0:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
                txt_area.y1 = cell_area.y1 + cell_top;
 802b5e4:	f8bd 3166 	ldrh.w	r3, [sp, #358]	; 0x166
 802b5e8:	441f      	add	r7, r3
 802b5ea:	f8ad 705e 	strh.w	r7, [sp, #94]	; 0x5e
                txt_area.y2 = cell_area.y2 - cell_bottom;
 802b5ee:	f8bd 316a 	ldrh.w	r3, [sp, #362]	; 0x16a
 802b5f2:	1a1b      	subs	r3, r3, r0
 802b5f4:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                if(crop) txt_flags = LV_TEXT_FLAG_EXPAND;
 802b5f8:	9b05      	ldr	r3, [sp, #20]
 802b5fa:	f013 0f02 	tst.w	r3, #2
 802b5fe:	f040 8102 	bne.w	802b806 <draw_main+0x536>
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 802b602:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802b606:	9904      	ldr	r1, [sp, #16]
 802b608:	5859      	ldr	r1, [r3, r1]
 802b60a:	2300      	movs	r3, #0
 802b60c:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802b60e:	1c53      	adds	r3, r2, #1
 802b610:	1b5b      	subs	r3, r3, r5
 802b612:	b21b      	sxth	r3, r3
 802b614:	9301      	str	r3, [sp, #4]
 802b616:	f9bd 30c6 	ldrsh.w	r3, [sp, #198]	; 0xc6
 802b61a:	9300      	str	r3, [sp, #0]
 802b61c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802b620:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802b622:	3101      	adds	r1, #1
 802b624:	a85b      	add	r0, sp, #364	; 0x16c
 802b626:	f7f8 ffbc 	bl	80245a2 <lv_txt_get_size>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 802b62a:	f8bd 3166 	ldrh.w	r3, [sp, #358]	; 0x166
 802b62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b630:	4413      	add	r3, r2
 802b632:	b29b      	uxth	r3, r3
 802b634:	f9bd 216e 	ldrsh.w	r2, [sp, #366]	; 0x16e
 802b638:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 802b63c:	f3c2 024f 	ubfx	r2, r2, #1, #16
 802b640:	1a99      	subs	r1, r3, r2
 802b642:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 802b646:	4413      	add	r3, r2
 802b648:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                label_mask_ok = _lv_area_intersect(&label_clip_area, &clip_area, &cell_area);
 802b64c:	aa59      	add	r2, sp, #356	; 0x164
 802b64e:	a95c      	add	r1, sp, #368	; 0x170
 802b650:	a819      	add	r0, sp, #100	; 0x64
 802b652:	f7f5 fd56 	bl	8021102 <_lv_area_intersect>
                if(label_mask_ok) {
 802b656:	2800      	cmp	r0, #0
 802b658:	f040 8089 	bne.w	802b76e <draw_main+0x49e>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802b65c:	aa1b      	add	r2, sp, #108	; 0x6c
 802b65e:	211b      	movs	r1, #27
 802b660:	4640      	mov	r0, r8
 802b662:	f7d8 feaf 	bl	80043c4 <lv_event_send>
            cell += col_merge + 1;
 802b666:	f10b 0b01 	add.w	fp, fp, #1
 802b66a:	44a3      	add	fp, r4
 802b66c:	fa1f fb8b 	uxth.w	fp, fp
            col += col_merge;
 802b670:	444c      	add	r4, r9
 802b672:	b2a4      	uxth	r4, r4
        for(col = 0; col < table->col_cnt; col++) {
 802b674:	3401      	adds	r4, #1
 802b676:	fa1f f984 	uxth.w	r9, r4
 802b67a:	f8b8 1024 	ldrh.w	r1, [r8, #36]	; 0x24
 802b67e:	4549      	cmp	r1, r9
 802b680:	f240 8087 	bls.w	802b792 <draw_main+0x4c2>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell][0];
 802b684:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 802b688:	ea4f 038b 	mov.w	r3, fp, lsl #2
 802b68c:	9304      	str	r3, [sp, #16]
 802b68e:	f850 302b 	ldr.w	r3, [r0, fp, lsl #2]
 802b692:	2b00      	cmp	r3, #0
 802b694:	f43f aec2 	beq.w	802b41c <draw_main+0x14c>
 802b698:	781b      	ldrb	r3, [r3, #0]
 802b69a:	9305      	str	r3, [sp, #20]
            if(rtl) {
 802b69c:	f1ba 0f01 	cmp.w	sl, #1
 802b6a0:	f43f aebf 	beq.w	802b422 <draw_main+0x152>
                cell_area.x1 = cell_area.x2 + 1;
 802b6a4:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
 802b6a8:	1c5a      	adds	r2, r3, #1
 802b6aa:	f8ad 2164 	strh.w	r2, [sp, #356]	; 0x164
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 802b6ae:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 802b6b2:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 802b6b6:	4413      	add	r3, r2
 802b6b8:	f8ad 3168 	strh.w	r3, [sp, #360]	; 0x168
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 802b6bc:	464d      	mov	r5, r9
 802b6be:	3901      	subs	r1, #1
 802b6c0:	4589      	cmp	r9, r1
 802b6c2:	bfa8      	it	ge
 802b6c4:	2400      	movge	r4, #0
 802b6c6:	f6bf aeda 	bge.w	802b47e <draw_main+0x1ae>
 802b6ca:	464b      	mov	r3, r9
 802b6cc:	2400      	movs	r4, #0
 802b6ce:	4622      	mov	r2, r4
 802b6d0:	e6bf      	b.n	802b452 <draw_main+0x182>
                cell += col_merge + 1;
 802b6d2:	f10b 0b01 	add.w	fp, fp, #1
 802b6d6:	44a3      	add	fp, r4
 802b6d8:	fa1f fb8b 	uxth.w	fp, fp
                col += col_merge;
 802b6dc:	444c      	add	r4, r9
 802b6de:	b2a4      	uxth	r4, r4
                continue;
 802b6e0:	e7c8      	b.n	802b674 <draw_main+0x3a4>
 802b6e2:	bf00      	nop
 802b6e4:	080337b4 	.word	0x080337b4
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 802b6e8:	f8b8 2020 	ldrh.w	r2, [r8, #32]
 802b6ec:	f002 0360 	and.w	r3, r2, #96	; 0x60
            lv_state_t cell_state = LV_STATE_DEFAULT;
 802b6f0:	2b20      	cmp	r3, #32
 802b6f2:	bf18      	it	ne
 802b6f4:	2300      	movne	r3, #0
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 802b6f6:	f012 0f02 	tst.w	r2, #2
 802b6fa:	bf18      	it	ne
 802b6fc:	f043 0302 	orrne.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 802b700:	f012 0f04 	tst.w	r2, #4
 802b704:	d02c      	beq.n	802b760 <draw_main+0x490>
 802b706:	f043 0304 	orr.w	r3, r3, #4
 802b70a:	b29b      	uxth	r3, r3
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 802b70c:	f012 0f08 	tst.w	r2, #8
 802b710:	d002      	beq.n	802b718 <draw_main+0x448>
 802b712:	f043 0308 	orr.w	r3, r3, #8
 802b716:	b29b      	uxth	r3, r3
                obj->state = cell_state;
 802b718:	f8a8 3020 	strh.w	r3, [r8, #32]
                obj->skip_trans = 1;
 802b71c:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802b720:	f043 0304 	orr.w	r3, r3, #4
 802b724:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 802b728:	a83d      	add	r0, sp, #244	; 0xf4
 802b72a:	f7e4 f87f 	bl	800f82c <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 802b72e:	a82d      	add	r0, sp, #180	; 0xb4
 802b730:	f7e2 fac0 	bl	800dcb4 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 802b734:	aa3d      	add	r2, sp, #244	; 0xf4
 802b736:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b73a:	4640      	mov	r0, r8
 802b73c:	f7db fff0 	bl	8007720 <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 802b740:	aa2d      	add	r2, sp, #180	; 0xb4
 802b742:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802b746:	4640      	mov	r0, r8
 802b748:	f7dc f95f 	bl	8007a0a <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 802b74c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802b74e:	f8a8 3020 	strh.w	r3, [r8, #32]
                obj->skip_trans = 0;
 802b752:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 802b756:	f36f 0382 	bfc	r3, #2, #1
 802b75a:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
 802b75e:	e701      	b.n	802b564 <draw_main+0x294>
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 802b760:	f012 0f08 	tst.w	r2, #8
 802b764:	d1d5      	bne.n	802b712 <draw_main+0x442>
            if(cell_state == LV_STATE_DEFAULT) {
 802b766:	2b00      	cmp	r3, #0
 802b768:	f43f aef2 	beq.w	802b550 <draw_main+0x280>
 802b76c:	e7d4      	b.n	802b718 <draw_main+0x448>
                    draw_ctx->clip_area = &label_clip_area;
 802b76e:	ab19      	add	r3, sp, #100	; 0x64
 802b770:	9d07      	ldr	r5, [sp, #28]
 802b772:	4628      	mov	r0, r5
 802b774:	60ab      	str	r3, [r5, #8]
                    lv_draw_label(draw_ctx, &label_dsc_act, &txt_area, table->cell_data[cell] + 1, NULL);
 802b776:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802b77a:	9a04      	ldr	r2, [sp, #16]
 802b77c:	589b      	ldr	r3, [r3, r2]
 802b77e:	2200      	movs	r2, #0
 802b780:	9200      	str	r2, [sp, #0]
 802b782:	3301      	adds	r3, #1
 802b784:	aa17      	add	r2, sp, #92	; 0x5c
 802b786:	a92d      	add	r1, sp, #180	; 0xb4
 802b788:	f7e2 fac8 	bl	800dd1c <lv_draw_label>
                    draw_ctx->clip_area = &clip_area;
 802b78c:	ab5c      	add	r3, sp, #368	; 0x170
 802b78e:	60ab      	str	r3, [r5, #8]
 802b790:	e764      	b.n	802b65c <draw_main+0x38c>
    for(row = 0; row < table->row_cnt; row++) {
 802b792:	9b06      	ldr	r3, [sp, #24]
 802b794:	3301      	adds	r3, #1
 802b796:	9306      	str	r3, [sp, #24]
 802b798:	f8b8 2026 	ldrh.w	r2, [r8, #38]	; 0x26
 802b79c:	b29b      	uxth	r3, r3
 802b79e:	429a      	cmp	r2, r3
 802b7a0:	d92d      	bls.n	802b7fe <draw_main+0x52e>
 802b7a2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 802b7a6:	461a      	mov	r2, r3
 802b7a8:	9308      	str	r3, [sp, #32]
        lv_coord_t h_row = table->row_h[row];
 802b7aa:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 802b7ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
        cell_area.y1 = cell_area.y2 + 1;
 802b7b2:	f8bd 116a 	ldrh.w	r1, [sp, #362]	; 0x16a
 802b7b6:	1c4a      	adds	r2, r1, #1
 802b7b8:	b212      	sxth	r2, r2
 802b7ba:	f8ad 2166 	strh.w	r2, [sp, #358]	; 0x166
        cell_area.y2 = cell_area.y1 + h_row - 1;
 802b7be:	4419      	add	r1, r3
 802b7c0:	f8ad 116a 	strh.w	r1, [sp, #362]	; 0x16a
        if(cell_area.y1 > clip_area.y2) break;
 802b7c4:	f9bd 1176 	ldrsh.w	r1, [sp, #374]	; 0x176
 802b7c8:	4291      	cmp	r1, r2
 802b7ca:	db18      	blt.n	802b7fe <draw_main+0x52e>
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 802b7cc:	f1ba 0f01 	cmp.w	sl, #1
 802b7d0:	f43f ae1a 	beq.w	802b408 <draw_main+0x138>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 802b7d4:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 802b7d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 802b7da:	440a      	add	r2, r1
 802b7dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802b7de:	1a52      	subs	r2, r2, r1
 802b7e0:	f8ad 2168 	strh.w	r2, [sp, #360]	; 0x168
        for(col = 0; col < table->col_cnt; col++) {
 802b7e4:	f8b8 1024 	ldrh.w	r1, [r8, #36]	; 0x24
 802b7e8:	2900      	cmp	r1, #0
 802b7ea:	d0d2      	beq.n	802b792 <draw_main+0x4c2>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 802b7ec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802b7f0:	f3c3 034f 	ubfx	r3, r3, #1, #16
 802b7f4:	930e      	str	r3, [sp, #56]	; 0x38
 802b7f6:	f04f 0900 	mov.w	r9, #0
    dest->x1 = src->x1;
 802b7fa:	ae15      	add	r6, sp, #84	; 0x54
 802b7fc:	e742      	b.n	802b684 <draw_main+0x3b4>
    draw_ctx->clip_area = clip_area_ori;
 802b7fe:	9b07      	ldr	r3, [sp, #28]
 802b800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b802:	609a      	str	r2, [r3, #8]
 802b804:	e577      	b.n	802b2f6 <draw_main+0x26>
                lv_txt_get_size(&txt_size, table->cell_data[cell] + 1, label_dsc_def.font,
 802b806:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 802b80a:	9904      	ldr	r1, [sp, #16]
 802b80c:	5859      	ldr	r1, [r3, r1]
 802b80e:	2302      	movs	r3, #2
 802b810:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802b812:	1c53      	adds	r3, r2, #1
 802b814:	1b5b      	subs	r3, r3, r5
 802b816:	b21b      	sxth	r3, r3
 802b818:	9301      	str	r3, [sp, #4]
 802b81a:	f9bd 30c6 	ldrsh.w	r3, [sp, #198]	; 0xc6
 802b81e:	9300      	str	r3, [sp, #0]
 802b820:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 802b824:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802b826:	3101      	adds	r1, #1
 802b828:	a85b      	add	r0, sp, #364	; 0x16c
 802b82a:	f7f8 feba 	bl	80245a2 <lv_txt_get_size>
                if(!crop) {
 802b82e:	e70d      	b.n	802b64c <draw_main+0x37c>

0802b830 <lv_table_event>:
{
 802b830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b834:	b082      	sub	sp, #8
 802b836:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802b838:	48a5      	ldr	r0, [pc, #660]	; (802bad0 <lv_table_event+0x2a0>)
 802b83a:	f7d8 fcc6 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802b83e:	2801      	cmp	r0, #1
 802b840:	d002      	beq.n	802b848 <lv_table_event+0x18>
}
 802b842:	b002      	add	sp, #8
 802b844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802b848:	4620      	mov	r0, r4
 802b84a:	f7d8 fde1 	bl	8004410 <lv_event_get_code>
 802b84e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802b850:	4620      	mov	r0, r4
 802b852:	f7d8 fdd9 	bl	8004408 <lv_event_get_target>
 802b856:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 802b858:	2d2a      	cmp	r5, #42	; 0x2a
 802b85a:	d014      	beq.n	802b886 <lv_table_event+0x56>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 802b85c:	2d2c      	cmp	r5, #44	; 0x2c
 802b85e:	d016      	beq.n	802b88e <lv_table_event+0x5e>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING) {
 802b860:	1e6b      	subs	r3, r5, #1
 802b862:	b2db      	uxtb	r3, r3
 802b864:	2b01      	cmp	r3, #1
 802b866:	d936      	bls.n	802b8d6 <lv_table_event+0xa6>
    else if(code == LV_EVENT_RELEASED) {
 802b868:	2d08      	cmp	r5, #8
 802b86a:	f000 80ab 	beq.w	802b9c4 <lv_table_event+0x194>
    else if(code == LV_EVENT_FOCUSED) {
 802b86e:	2d0e      	cmp	r5, #14
 802b870:	f000 80ce 	beq.w	802ba10 <lv_table_event+0x1e0>
    else if(code == LV_EVENT_KEY) {
 802b874:	2d0d      	cmp	r5, #13
 802b876:	f000 80ce 	beq.w	802ba16 <lv_table_event+0x1e6>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802b87a:	2d15      	cmp	r5, #21
 802b87c:	d1e1      	bne.n	802b842 <lv_table_event+0x12>
        draw_main(e);
 802b87e:	4620      	mov	r0, r4
 802b880:	f7ff fd26 	bl	802b2d0 <draw_main>
 802b884:	e7dd      	b.n	802b842 <lv_table_event+0x12>
        refr_size_form_row(obj, 0);
 802b886:	2100      	movs	r1, #0
 802b888:	f7ff fbf8 	bl	802b07c <refr_size_form_row>
 802b88c:	e7d9      	b.n	802b842 <lv_table_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 802b88e:	4620      	mov	r0, r4
 802b890:	f7d8 fdc2 	bl	8004418 <lv_event_get_param>
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 802b894:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
 802b896:	b1d4      	cbz	r4, 802b8ce <lv_table_event+0x9e>
 802b898:	6b33      	ldr	r3, [r6, #48]	; 0x30
 802b89a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
        lv_coord_t w = 0;
 802b89e:	2200      	movs	r2, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 802b8a0:	f933 1b02 	ldrsh.w	r1, [r3], #2
 802b8a4:	440a      	add	r2, r1
 802b8a6:	b212      	sxth	r2, r2
 802b8a8:	42a3      	cmp	r3, r4
 802b8aa:	d1f9      	bne.n	802b8a0 <lv_table_event+0x70>
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 802b8ac:	8cf5      	ldrh	r5, [r6, #38]	; 0x26
 802b8ae:	b185      	cbz	r5, 802b8d2 <lv_table_event+0xa2>
 802b8b0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 802b8b2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
        lv_coord_t h = 0;
 802b8b6:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 802b8b8:	f931 4b02 	ldrsh.w	r4, [r1], #2
 802b8bc:	4423      	add	r3, r4
 802b8be:	b21b      	sxth	r3, r3
 802b8c0:	428d      	cmp	r5, r1
 802b8c2:	d1f9      	bne.n	802b8b8 <lv_table_event+0x88>
        p->x = w - 1;
 802b8c4:	3a01      	subs	r2, #1
 802b8c6:	8002      	strh	r2, [r0, #0]
        p->y = h - 1;
 802b8c8:	3b01      	subs	r3, #1
 802b8ca:	8043      	strh	r3, [r0, #2]
 802b8cc:	e7b9      	b.n	802b842 <lv_table_event+0x12>
        lv_coord_t w = 0;
 802b8ce:	2200      	movs	r2, #0
 802b8d0:	e7ec      	b.n	802b8ac <lv_table_event+0x7c>
        lv_coord_t h = 0;
 802b8d2:	2300      	movs	r3, #0
 802b8d4:	e7f6      	b.n	802b8c4 <lv_table_event+0x94>
    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 802b8d6:	f7d9 f91b 	bl	8004b10 <lv_indev_get_act>
 802b8da:	f7d9 f91f 	bl	8004b1c <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 802b8de:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 802b8e2:	2801      	cmp	r0, #1
 802b8e4:	d1ad      	bne.n	802b842 <lv_table_event+0x12>
    lv_indev_get_point(lv_indev_get_act(), &p);
 802b8e6:	f7d9 f913 	bl	8004b10 <lv_indev_get_act>
 802b8ea:	a901      	add	r1, sp, #4
 802b8ec:	f7d9 f98d 	bl	8004c0a <lv_indev_get_point>
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 802b8f0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 802b8f4:	4630      	mov	r0, r6
 802b8f6:	f7de f83b 	bl	8009970 <lv_obj_get_scroll_x>
 802b8fa:	4404      	add	r4, r0
 802b8fc:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802b8fe:	2216      	movs	r2, #22
 802b900:	2100      	movs	r1, #0
 802b902:	4630      	mov	r0, r6
 802b904:	f7df fad2 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802b908:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 802b90a:	2801      	cmp	r0, #1
 802b90c:	d04e      	beq.n	802b9ac <lv_table_event+0x17c>
            x -= obj->coords.x1;
 802b90e:	8ab5      	ldrh	r5, [r6, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802b910:	2212      	movs	r2, #18
 802b912:	2100      	movs	r1, #0
 802b914:	4630      	mov	r0, r6
 802b916:	f7df fac9 	bl	800aeac <lv_obj_get_style_prop>
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 802b91a:	4405      	add	r5, r0
 802b91c:	1b65      	subs	r5, r4, r5
 802b91e:	b22d      	sxth	r5, r5
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 802b920:	8cb4      	ldrh	r4, [r6, #36]	; 0x24
 802b922:	b184      	cbz	r4, 802b946 <lv_table_event+0x116>
            tmp += table->col_w[*col];
 802b924:	6b31      	ldr	r1, [r6, #48]	; 0x30
 802b926:	f9b1 2000 	ldrsh.w	r2, [r1]
            if(x < tmp) break;
 802b92a:	4295      	cmp	r5, r2
 802b92c:	db48      	blt.n	802b9c0 <lv_table_event+0x190>
        *col = 0;
 802b92e:	2300      	movs	r3, #0
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 802b930:	3301      	adds	r3, #1
 802b932:	b29b      	uxth	r3, r3
 802b934:	42a3      	cmp	r3, r4
 802b936:	d006      	beq.n	802b946 <lv_table_event+0x116>
            tmp += table->col_w[*col];
 802b938:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 802b93c:	4402      	add	r2, r0
 802b93e:	b212      	sxth	r2, r2
            if(x < tmp) break;
 802b940:	42aa      	cmp	r2, r5
 802b942:	ddf5      	ble.n	802b930 <lv_table_event+0x100>
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 802b944:	461c      	mov	r4, r3
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 802b946:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 802b94a:	4630      	mov	r0, r6
 802b94c:	f7de f818 	bl	8009980 <lv_obj_get_scroll_y>
 802b950:	4607      	mov	r7, r0
        y -= obj->coords.y1;
 802b952:	f8b6 8016 	ldrh.w	r8, [r6, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802b956:	2210      	movs	r2, #16
 802b958:	2100      	movs	r1, #0
 802b95a:	4630      	mov	r0, r6
 802b95c:	f7df faa6 	bl	800aeac <lv_obj_get_style_prop>
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 802b960:	1a2d      	subs	r5, r5, r0
 802b962:	eba5 0508 	sub.w	r5, r5, r8
 802b966:	19e8      	adds	r0, r5, r7
 802b968:	b200      	sxth	r0, r0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 802b96a:	8cf7      	ldrh	r7, [r6, #38]	; 0x26
 802b96c:	b18f      	cbz	r7, 802b992 <lv_table_event+0x162>
            tmp += table->row_h[*row];
 802b96e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 802b970:	f9b1 2000 	ldrsh.w	r2, [r1]
            if(y < tmp) break;
 802b974:	4282      	cmp	r2, r0
 802b976:	f300 80a9 	bgt.w	802bacc <lv_table_event+0x29c>
        *row = 0;
 802b97a:	2300      	movs	r3, #0
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 802b97c:	3301      	adds	r3, #1
 802b97e:	b29b      	uxth	r3, r3
 802b980:	42bb      	cmp	r3, r7
 802b982:	d006      	beq.n	802b992 <lv_table_event+0x162>
            tmp += table->row_h[*row];
 802b984:	f831 5f02 	ldrh.w	r5, [r1, #2]!
 802b988:	442a      	add	r2, r5
 802b98a:	b212      	sxth	r2, r2
            if(y < tmp) break;
 802b98c:	4290      	cmp	r0, r2
 802b98e:	daf5      	bge.n	802b97c <lv_table_event+0x14c>
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 802b990:	461f      	mov	r7, r3
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 802b992:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
 802b994:	42a3      	cmp	r3, r4
 802b996:	d103      	bne.n	802b9a0 <lv_table_event+0x170>
 802b998:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
 802b99a:	42bb      	cmp	r3, r7
 802b99c:	f43f af51 	beq.w	802b842 <lv_table_event+0x12>
            table->col_act = col;
 802b9a0:	86b4      	strh	r4, [r6, #52]	; 0x34
            table->row_act = row;
 802b9a2:	86f7      	strh	r7, [r6, #54]	; 0x36
            lv_obj_invalidate(obj);
 802b9a4:	4630      	mov	r0, r6
 802b9a6:	f7dc fe49 	bl	800863c <lv_obj_invalidate>
 802b9aa:	e74a      	b.n	802b842 <lv_table_event+0x12>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 802b9ac:	8b35      	ldrh	r5, [r6, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802b9ae:	2213      	movs	r2, #19
 802b9b0:	2100      	movs	r1, #0
 802b9b2:	4630      	mov	r0, r6
 802b9b4:	f7df fa7a 	bl	800aeac <lv_obj_get_style_prop>
 802b9b8:	1a2d      	subs	r5, r5, r0
 802b9ba:	1b2c      	subs	r4, r5, r4
 802b9bc:	b225      	sxth	r5, r4
 802b9be:	e7af      	b.n	802b920 <lv_table_event+0xf0>
        *col = 0;
 802b9c0:	2400      	movs	r4, #0
 802b9c2:	e7c0      	b.n	802b946 <lv_table_event+0x116>
        lv_obj_invalidate(obj);
 802b9c4:	f7dc fe3a 	bl	800863c <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 802b9c8:	f7d9 f8a2 	bl	8004b10 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 802b9cc:	f7d9 f944 	bl	8004c58 <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 802b9d0:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
 802b9d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b9d6:	429a      	cmp	r2, r3
 802b9d8:	d003      	beq.n	802b9e2 <lv_table_event+0x1b2>
 802b9da:	8ef2      	ldrh	r2, [r6, #54]	; 0x36
 802b9dc:	429a      	cmp	r2, r3
 802b9de:	d000      	beq.n	802b9e2 <lv_table_event+0x1b2>
 802b9e0:	b168      	cbz	r0, 802b9fe <lv_table_event+0x1ce>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 802b9e2:	f7d9 f895 	bl	8004b10 <lv_indev_get_act>
 802b9e6:	f7d9 f899 	bl	8004b1c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 802b9ea:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 802b9ee:	2801      	cmp	r0, #1
 802b9f0:	f47f af27 	bne.w	802b842 <lv_table_event+0x12>
            table->col_act = LV_TABLE_CELL_NONE;
 802b9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b9f8:	86b3      	strh	r3, [r6, #52]	; 0x34
            table->row_act = LV_TABLE_CELL_NONE;
 802b9fa:	86f3      	strh	r3, [r6, #54]	; 0x36
 802b9fc:	e721      	b.n	802b842 <lv_table_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802b9fe:	2200      	movs	r2, #0
 802ba00:	211c      	movs	r1, #28
 802ba02:	4630      	mov	r0, r6
 802ba04:	f7d8 fcde 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 802ba08:	2801      	cmp	r0, #1
 802ba0a:	f47f af1a 	bne.w	802b842 <lv_table_event+0x12>
 802ba0e:	e7e8      	b.n	802b9e2 <lv_table_event+0x1b2>
        lv_obj_invalidate(obj);
 802ba10:	f7dc fe14 	bl	800863c <lv_obj_invalidate>
 802ba14:	e715      	b.n	802b842 <lv_table_event+0x12>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 802ba16:	4620      	mov	r0, r4
 802ba18:	f7d8 fcfe 	bl	8004418 <lv_event_get_param>
        int32_t col = table->col_act;
 802ba1c:	8eb2      	ldrh	r2, [r6, #52]	; 0x34
        int32_t row = table->row_act;
 802ba1e:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 802ba20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802ba24:	429a      	cmp	r2, r3
 802ba26:	d017      	beq.n	802ba58 <lv_table_event+0x228>
 802ba28:	4299      	cmp	r1, r3
 802ba2a:	d015      	beq.n	802ba58 <lv_table_event+0x228>
        if(col >= table->col_cnt) col = 0;
 802ba2c:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
 802ba2e:	42ba      	cmp	r2, r7
 802ba30:	bf34      	ite	cc
 802ba32:	4614      	movcc	r4, r2
 802ba34:	2400      	movcs	r4, #0
        if(row >= table->row_cnt) row = 0;
 802ba36:	8cf5      	ldrh	r5, [r6, #38]	; 0x26
 802ba38:	42a9      	cmp	r1, r5
 802ba3a:	bf34      	ite	cc
 802ba3c:	460b      	movcc	r3, r1
 802ba3e:	2300      	movcs	r3, #0
        int32_t c = *((int32_t *)lv_event_get_param(e));
 802ba40:	6800      	ldr	r0, [r0, #0]
        if(c == LV_KEY_LEFT) col--;
 802ba42:	2814      	cmp	r0, #20
 802ba44:	d012      	beq.n	802ba6c <lv_table_event+0x23c>
        else if(c == LV_KEY_RIGHT) col++;
 802ba46:	2813      	cmp	r0, #19
 802ba48:	d019      	beq.n	802ba7e <lv_table_event+0x24e>
        else if(c == LV_KEY_UP) row--;
 802ba4a:	2811      	cmp	r0, #17
 802ba4c:	d03a      	beq.n	802bac4 <lv_table_event+0x294>
        else if(c == LV_KEY_DOWN) row++;
 802ba4e:	2812      	cmp	r0, #18
 802ba50:	f47f aef7 	bne.w	802b842 <lv_table_event+0x12>
 802ba54:	3301      	adds	r3, #1
 802ba56:	e013      	b.n	802ba80 <lv_table_event+0x250>
            table->col_act = 0;
 802ba58:	2300      	movs	r3, #0
 802ba5a:	86b3      	strh	r3, [r6, #52]	; 0x34
            table->row_act = 0;
 802ba5c:	86f3      	strh	r3, [r6, #54]	; 0x36
            scroll_to_selected_cell(obj);
 802ba5e:	4630      	mov	r0, r6
 802ba60:	f7ff fbed 	bl	802b23e <scroll_to_selected_cell>
            lv_obj_invalidate(obj);
 802ba64:	4630      	mov	r0, r6
 802ba66:	f7dc fde9 	bl	800863c <lv_obj_invalidate>
            return;
 802ba6a:	e6ea      	b.n	802b842 <lv_table_event+0x12>
        if(c == LV_KEY_LEFT) col--;
 802ba6c:	3c01      	subs	r4, #1
        if(col >= table->col_cnt) {
 802ba6e:	42a7      	cmp	r7, r4
 802ba70:	dd08      	ble.n	802ba84 <lv_table_event+0x254>
        else if(col < 0) {
 802ba72:	2c00      	cmp	r4, #0
 802ba74:	da0d      	bge.n	802ba92 <lv_table_event+0x262>
            if(row != 0) {
 802ba76:	b33b      	cbz	r3, 802bac8 <lv_table_event+0x298>
                col = table->col_cnt - 1;
 802ba78:	1e7c      	subs	r4, r7, #1
                row--;
 802ba7a:	3b01      	subs	r3, #1
 802ba7c:	e009      	b.n	802ba92 <lv_table_event+0x262>
        else if(c == LV_KEY_RIGHT) col++;
 802ba7e:	3401      	adds	r4, #1
        if(col >= table->col_cnt) {
 802ba80:	42a7      	cmp	r7, r4
 802ba82:	dc06      	bgt.n	802ba92 <lv_table_event+0x262>
            if(row < table->row_cnt - 1) {
 802ba84:	1e68      	subs	r0, r5, #1
 802ba86:	4298      	cmp	r0, r3
                row++;
 802ba88:	bfc6      	itte	gt
 802ba8a:	3301      	addgt	r3, #1
                col = 0;
 802ba8c:	2400      	movgt	r4, #0
                col = table->col_cnt - 1;
 802ba8e:	f107 34ff 	addle.w	r4, r7, #4294967295	; 0xffffffff
        if(row >= table->row_cnt) {
 802ba92:	429d      	cmp	r5, r3
            row = table->row_cnt - 1;
 802ba94:	bfd4      	ite	le
 802ba96:	f105 33ff 	addle.w	r3, r5, #4294967295	; 0xffffffff
        else if(row < 0) {
 802ba9a:	ea23 73e3 	bicgt.w	r3, r3, r3, asr #31
        if(table->col_act != col || table->row_act != row) {
 802ba9e:	4294      	cmp	r4, r2
 802baa0:	d102      	bne.n	802baa8 <lv_table_event+0x278>
 802baa2:	428b      	cmp	r3, r1
 802baa4:	f43f aecd 	beq.w	802b842 <lv_table_event+0x12>
            table->col_act = col;
 802baa8:	86b4      	strh	r4, [r6, #52]	; 0x34
            table->row_act = row;
 802baaa:	86f3      	strh	r3, [r6, #54]	; 0x36
            lv_obj_invalidate(obj);
 802baac:	4630      	mov	r0, r6
 802baae:	f7dc fdc5 	bl	800863c <lv_obj_invalidate>
            scroll_to_selected_cell(obj);
 802bab2:	4630      	mov	r0, r6
 802bab4:	f7ff fbc3 	bl	802b23e <scroll_to_selected_cell>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802bab8:	2200      	movs	r2, #0
 802baba:	211c      	movs	r1, #28
 802babc:	4630      	mov	r0, r6
 802babe:	f7d8 fc81 	bl	80043c4 <lv_event_send>
            if(res != LV_RES_OK) return;
 802bac2:	e6be      	b.n	802b842 <lv_table_event+0x12>
        else if(c == LV_KEY_UP) row--;
 802bac4:	3b01      	subs	r3, #1
 802bac6:	e7db      	b.n	802ba80 <lv_table_event+0x250>
                col = 0;
 802bac8:	461c      	mov	r4, r3
 802baca:	e7e2      	b.n	802ba92 <lv_table_event+0x262>
        *row = 0;
 802bacc:	2700      	movs	r7, #0
 802bace:	e760      	b.n	802b992 <lv_table_event+0x162>
 802bad0:	080337b4 	.word	0x080337b4

0802bad4 <lv_table_destructor>:
{
 802bad4:	b570      	push	{r4, r5, r6, lr}
 802bad6:	460d      	mov	r5, r1
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 802bad8:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 802bada:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 802badc:	fb02 f303 	mul.w	r3, r2, r3
 802bae0:	2b00      	cmp	r3, #0
 802bae2:	dd15      	ble.n	802bb10 <lv_table_destructor+0x3c>
 802bae4:	2400      	movs	r4, #0
            table->cell_data[i] = NULL;
 802bae6:	4626      	mov	r6, r4
 802bae8:	e007      	b.n	802bafa <lv_table_destructor+0x26>
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 802baea:	3401      	adds	r4, #1
 802baec:	b2a4      	uxth	r4, r4
 802baee:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 802baf0:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 802baf2:	fb02 f303 	mul.w	r3, r2, r3
 802baf6:	429c      	cmp	r4, r3
 802baf8:	da0a      	bge.n	802bb10 <lv_table_destructor+0x3c>
        if(table->cell_data[i]) {
 802bafa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802bafc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802bb00:	2800      	cmp	r0, #0
 802bb02:	d0f2      	beq.n	802baea <lv_table_destructor+0x16>
            lv_mem_free(table->cell_data[i]);
 802bb04:	f7f6 fa30 	bl	8021f68 <lv_mem_free>
            table->cell_data[i] = NULL;
 802bb08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802bb0a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 802bb0e:	e7ec      	b.n	802baea <lv_table_destructor+0x16>
    if(table->cell_data) lv_mem_free(table->cell_data);
 802bb10:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 802bb12:	b108      	cbz	r0, 802bb18 <lv_table_destructor+0x44>
 802bb14:	f7f6 fa28 	bl	8021f68 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 802bb18:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 802bb1a:	b108      	cbz	r0, 802bb20 <lv_table_destructor+0x4c>
 802bb1c:	f7f6 fa24 	bl	8021f68 <lv_mem_free>
    if(table->col_w) lv_mem_free(table->col_w);
 802bb20:	6b28      	ldr	r0, [r5, #48]	; 0x30
 802bb22:	b108      	cbz	r0, 802bb28 <lv_table_destructor+0x54>
 802bb24:	f7f6 fa20 	bl	8021f68 <lv_mem_free>
}
 802bb28:	bd70      	pop	{r4, r5, r6, pc}

0802bb2a <lv_table_constructor>:
{
 802bb2a:	b510      	push	{r4, lr}
 802bb2c:	460c      	mov	r4, r1
    table->col_cnt = 1;
 802bb2e:	2301      	movs	r3, #1
 802bb30:	848b      	strh	r3, [r1, #36]	; 0x24
    table->row_cnt = 1;
 802bb32:	84cb      	strh	r3, [r1, #38]	; 0x26
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 802bb34:	2002      	movs	r0, #2
 802bb36:	f7f6 f9f9 	bl	8021f2c <lv_mem_alloc>
 802bb3a:	6320      	str	r0, [r4, #48]	; 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 802bb3c:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 802bb3e:	0040      	lsls	r0, r0, #1
 802bb40:	f7f6 f9f4 	bl	8021f2c <lv_mem_alloc>
 802bb44:	62e0      	str	r0, [r4, #44]	; 0x2c
    table->col_w[0] = LV_DPI_DEF;
 802bb46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802bb48:	2382      	movs	r3, #130	; 0x82
 802bb4a:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 802bb4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802bb4e:	8013      	strh	r3, [r2, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(char *));
 802bb50:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 802bb52:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 802bb54:	fb03 f101 	mul.w	r1, r3, r1
 802bb58:	0089      	lsls	r1, r1, #2
 802bb5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802bb5c:	f7f6 fa20 	bl	8021fa0 <lv_mem_realloc>
 802bb60:	62a0      	str	r0, [r4, #40]	; 0x28
    table->cell_data[0] = NULL;
 802bb62:	2300      	movs	r3, #0
 802bb64:	6003      	str	r3, [r0, #0]
}
 802bb66:	bd10      	pop	{r4, pc}

0802bb68 <pwd_char_hider_anim>:
 */
static void pwd_char_hider_anim(void * obj, int32_t x)
{
    LV_UNUSED(obj);
    LV_UNUSED(x);
}
 802bb68:	4770      	bx	lr

0802bb6a <cursor_blink_anim_cb>:
    if(show != ta->cursor.show) {
 802bb6a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802bb6e:	f003 0301 	and.w	r3, r3, #1
 802bb72:	428b      	cmp	r3, r1
 802bb74:	d026      	beq.n	802bbc4 <cursor_blink_anim_cb+0x5a>
{
 802bb76:	b530      	push	{r4, r5, lr}
 802bb78:	b083      	sub	sp, #12
        ta->cursor.show = show ? 1U : 0U;
 802bb7a:	3900      	subs	r1, #0
 802bb7c:	bf18      	it	ne
 802bb7e:	2101      	movne	r1, #1
 802bb80:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802bb84:	f361 0300 	bfi	r3, r1, #0, #1
 802bb88:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    dest->y1 = src->y1;
 802bb8c:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	; 0x4a
    dest->x2 = src->x2;
 802bb90:	f9b0 504c 	ldrsh.w	r5, [r0, #76]	; 0x4c
    dest->y2 = src->y2;
 802bb94:	f9b0 e04e 	ldrsh.w	lr, [r0, #78]	; 0x4e
        area_tmp.x1 += ta->label->coords.x1;
 802bb98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802bb9a:	8aa2      	ldrh	r2, [r4, #20]
 802bb9c:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 802bba0:	4494      	add	ip, r2
 802bba2:	f8ad c000 	strh.w	ip, [sp]
        area_tmp.y1 += ta->label->coords.y1;
 802bba6:	8ae3      	ldrh	r3, [r4, #22]
 802bba8:	4419      	add	r1, r3
 802bbaa:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_tmp.x2 += ta->label->coords.x1;
 802bbae:	442a      	add	r2, r5
 802bbb0:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y2 += ta->label->coords.y1;
 802bbb4:	4473      	add	r3, lr
 802bbb6:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 802bbba:	4669      	mov	r1, sp
 802bbbc:	f7dc fd1a 	bl	80085f4 <lv_obj_invalidate_area>
}
 802bbc0:	b003      	add	sp, #12
 802bbc2:	bd30      	pop	{r4, r5, pc}
 802bbc4:	4770      	bx	lr
	...

0802bbc8 <start_cursor_blink>:

    return false; /*The character wasn't in the list*/
}

static void start_cursor_blink(lv_obj_t * obj)
{
 802bbc8:	b530      	push	{r4, r5, lr}
 802bbca:	b093      	sub	sp, #76	; 0x4c
 802bbcc:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 802bbce:	2264      	movs	r2, #100	; 0x64
 802bbd0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802bbd4:	f7df f96a 	bl	800aeac <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 802bbd8:	b958      	cbnz	r0, 802bbf2 <start_cursor_blink+0x2a>
        lv_anim_del(obj, cursor_blink_anim_cb);
 802bbda:	4912      	ldr	r1, [pc, #72]	; (802bc24 <start_cursor_blink+0x5c>)
 802bbdc:	4620      	mov	r0, r4
 802bbde:	f7f5 f947 	bl	8020e70 <lv_anim_del>
        ta->cursor.show = 1;
 802bbe2:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 802bbe6:	f043 0301 	orr.w	r3, r3, #1
 802bbea:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 802bbee:	b013      	add	sp, #76	; 0x4c
 802bbf0:	bd30      	pop	{r4, r5, pc}
 802bbf2:	4605      	mov	r5, r0
        lv_anim_init(&a);
 802bbf4:	a801      	add	r0, sp, #4
 802bbf6:	f7f5 f921 	bl	8020e3c <lv_anim_init>
    a->var = var;
 802bbfa:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 802bbfc:	4b09      	ldr	r3, [pc, #36]	; (802bc24 <start_cursor_blink+0x5c>)
 802bbfe:	9302      	str	r3, [sp, #8]
    a->time = duration;
 802bc00:	950c      	str	r5, [sp, #48]	; 0x30
    a->playback_time = time;
 802bc02:	950f      	str	r5, [sp, #60]	; 0x3c
    a->start_value = start;
 802bc04:	2301      	movs	r3, #1
 802bc06:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 802bc08:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 802bc0a:	2300      	movs	r3, #0
 802bc0c:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 802bc0e:	4b06      	ldr	r3, [pc, #24]	; (802bc28 <start_cursor_blink+0x60>)
 802bc10:	9308      	str	r3, [sp, #32]
    a->repeat_cnt = cnt;
 802bc12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802bc16:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        lv_anim_start(&a);
 802bc1a:	a801      	add	r0, sp, #4
 802bc1c:	f7f5 f960 	bl	8020ee0 <lv_anim_start>
}
 802bc20:	e7e5      	b.n	802bbee <start_cursor_blink+0x26>
 802bc22:	bf00      	nop
 802bc24:	0802bb6b 	.word	0x0802bb6b
 802bc28:	08021031 	.word	0x08021031

0802bc2c <lv_textarea_destructor>:
{
 802bc2c:	b510      	push	{r4, lr}
 802bc2e:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 802bc30:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 802bc32:	b118      	cbz	r0, 802bc3c <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 802bc34:	f7f6 f998 	bl	8021f68 <lv_mem_free>
        ta->pwd_tmp = NULL;
 802bc38:	2300      	movs	r3, #0
 802bc3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    if(ta->pwd_bullet != NULL) {
 802bc3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802bc3e:	b118      	cbz	r0, 802bc48 <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->pwd_bullet);
 802bc40:	f7f6 f992 	bl	8021f68 <lv_mem_free>
        ta->pwd_bullet = NULL;
 802bc44:	2300      	movs	r3, #0
 802bc46:	6323      	str	r3, [r4, #48]	; 0x30
    if(ta->placeholder_txt != NULL) {
 802bc48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802bc4a:	b118      	cbz	r0, 802bc54 <lv_textarea_destructor+0x28>
        lv_mem_free(ta->placeholder_txt);
 802bc4c:	f7f6 f98c 	bl	8021f68 <lv_mem_free>
        ta->placeholder_txt = NULL;
 802bc50:	2300      	movs	r3, #0
 802bc52:	62a3      	str	r3, [r4, #40]	; 0x28
}
 802bc54:	bd10      	pop	{r4, pc}
	...

0802bc58 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * obj)
{
 802bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc5c:	b087      	sub	sp, #28
 802bc5e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802bc60:	2257      	movs	r2, #87	; 0x57
 802bc62:	2100      	movs	r1, #0
 802bc64:	f7df f922 	bl	800aeac <lv_obj_get_style_prop>
 802bc68:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802bc6a:	2259      	movs	r2, #89	; 0x59
 802bc6c:	2100      	movs	r1, #0
 802bc6e:	4620      	mov	r0, r4
 802bc70:	f7df f91c 	bl	800aeac <lv_obj_get_style_prop>
 802bc74:	9000      	str	r0, [sp, #0]
    return ta->cursor.pos;
 802bc76:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44

    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);

    uint32_t cur_pos = lv_textarea_get_cursor_pos(obj);
    const char * txt = lv_label_get_text(ta->label);
 802bc7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bc7c:	f7fc fcce 	bl	802861c <lv_label_get_text>
 802bc80:	4605      	mov	r5, r0
 802bc82:	9001      	str	r0, [sp, #4]

    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 802bc84:	4b71      	ldr	r3, [pc, #452]	; (802be4c <refr_cursor_area+0x1f4>)
 802bc86:	681b      	ldr	r3, [r3, #0]
 802bc88:	4649      	mov	r1, r9
 802bc8a:	4798      	blx	r3
 802bc8c:	4607      	mov	r7, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 802bc8e:	eb05 0b00 	add.w	fp, r5, r0
 802bc92:	4b6f      	ldr	r3, [pc, #444]	; (802be50 <refr_cursor_area+0x1f8>)
 802bc94:	681b      	ldr	r3, [r3, #0]
 802bc96:	2100      	movs	r1, #0
 802bc98:	4658      	mov	r0, fp
 802bc9a:	4798      	blx	r3
 802bc9c:	4605      	mov	r5, r0
 802bc9e:	f9b8 a008 	ldrsh.w	sl, [r8, #8]
    }
}

static inline bool is_valid_but_non_printable_char(const uint32_t letter)
{
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 802bca2:	280d      	cmp	r0, #13
 802bca4:	d808      	bhi.n	802bcb8 <refr_cursor_area+0x60>
 802bca6:	f242 4301 	movw	r3, #9217	; 0x2401
 802bcaa:	40c3      	lsrs	r3, r0
        letter_space = ' ';
 802bcac:	f013 0f01 	tst.w	r3, #1
 802bcb0:	bf0c      	ite	eq
 802bcb2:	4601      	moveq	r1, r0
 802bcb4:	2120      	movne	r1, #32
 802bcb6:	e000      	b.n	802bcba <refr_cursor_area+0x62>
    uint32_t letter_space = letter;
 802bcb8:	4601      	mov	r1, r0
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 802bcba:	2200      	movs	r2, #0
 802bcbc:	4640      	mov	r0, r8
 802bcbe:	f7f4 fc8e 	bl	80205de <lv_font_get_glyph_width>
 802bcc2:	b206      	sxth	r6, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 802bcc4:	aa05      	add	r2, sp, #20
 802bcc6:	4649      	mov	r1, r9
 802bcc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bcca:	f7fc fcaf 	bl	802862c <lv_label_get_letter_pos>
    lv_text_align_t align = lv_obj_calculate_style_text_align(ta->label, LV_PART_MAIN, lv_label_get_text(ta->label));
 802bcce:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
 802bcd2:	4648      	mov	r0, r9
 802bcd4:	f7fc fca2 	bl	802861c <lv_label_get_text>
 802bcd8:	4602      	mov	r2, r0
 802bcda:	2100      	movs	r1, #0
 802bcdc:	4648      	mov	r0, r9
 802bcde:	f7df ff65 	bl	800bbac <lv_obj_calculate_style_text_align>
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 802bce2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802bce4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 802bce8:	f9b2 1014 	ldrsh.w	r1, [r2, #20]
 802bcec:	440b      	add	r3, r1
 802bcee:	4433      	add	r3, r6
 802bcf0:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 802bcf4:	4293      	cmp	r3, r2
 802bcf6:	dd2f      	ble.n	802bd58 <refr_cursor_area+0x100>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 802bcf8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 802bcfc:	f013 0f08 	tst.w	r3, #8
 802bd00:	d12a      	bne.n	802bd58 <refr_cursor_area+0x100>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 802bd02:	2803      	cmp	r0, #3
 802bd04:	d028      	beq.n	802bd58 <refr_cursor_area+0x100>
        letter_pos.x = 0;
 802bd06:	2300      	movs	r3, #0
 802bd08:	f8ad 3014 	strh.w	r3, [sp, #20]
        letter_pos.y += letter_h + line_space;
 802bd0c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802bd10:	9b00      	ldr	r3, [sp, #0]
 802bd12:	4403      	add	r3, r0
 802bd14:	4618      	mov	r0, r3
 802bd16:	4450      	add	r0, sl
 802bd18:	f8ad 0016 	strh.w	r0, [sp, #22]
        if(letter != '\0') {
 802bd1c:	b1b5      	cbz	r5, 802bd4c <refr_cursor_area+0xf4>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 802bd1e:	4b4d      	ldr	r3, [pc, #308]	; (802be54 <refr_cursor_area+0x1fc>)
 802bd20:	681b      	ldr	r3, [r3, #0]
 802bd22:	4658      	mov	r0, fp
 802bd24:	4798      	blx	r3
 802bd26:	4407      	add	r7, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 802bd28:	4b49      	ldr	r3, [pc, #292]	; (802be50 <refr_cursor_area+0x1f8>)
 802bd2a:	681b      	ldr	r3, [r3, #0]
 802bd2c:	2100      	movs	r1, #0
 802bd2e:	9801      	ldr	r0, [sp, #4]
 802bd30:	4438      	add	r0, r7
 802bd32:	4798      	blx	r3
 802bd34:	4601      	mov	r1, r0
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 802bd36:	280d      	cmp	r0, #13
 802bd38:	d809      	bhi.n	802bd4e <refr_cursor_area+0xf6>
 802bd3a:	f242 4301 	movw	r3, #9217	; 0x2401
 802bd3e:	40c3      	lsrs	r3, r0
            tmp = ' ';
 802bd40:	f013 0f01 	tst.w	r3, #1
 802bd44:	bf0c      	ite	eq
 802bd46:	4601      	moveq	r1, r0
 802bd48:	2120      	movne	r1, #32
 802bd4a:	e000      	b.n	802bd4e <refr_cursor_area+0xf6>
 802bd4c:	2120      	movs	r1, #32
        letter_w = lv_font_get_glyph_width(font, tmp, IGNORE_KERNING);
 802bd4e:	2200      	movs	r2, #0
 802bd50:	4640      	mov	r0, r8
 802bd52:	f7f4 fc44 	bl	80205de <lv_font_get_glyph_width>
 802bd56:	b206      	sxth	r6, r0
    ta->cursor.txt_byte_pos = byte_pos;
 802bd58:	6527      	str	r7, [r4, #80]	; 0x50
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802bd5a:	2232      	movs	r2, #50	; 0x32
 802bd5c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802bd60:	4620      	mov	r0, r4
 802bd62:	f7df f8a3 	bl	800aeac <lv_obj_get_style_prop>
 802bd66:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802bd68:	2210      	movs	r2, #16
 802bd6a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802bd6e:	4620      	mov	r0, r4
 802bd70:	f7df f89c 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 802bd74:	fa1f f888 	uxth.w	r8, r8
 802bd78:	eb08 0500 	add.w	r5, r8, r0
 802bd7c:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 802bd7e:	2211      	movs	r2, #17
 802bd80:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802bd84:	4620      	mov	r0, r4
 802bd86:	f7df f891 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR) + border_width;
 802bd8a:	eb08 0900 	add.w	r9, r8, r0
 802bd8e:	fa1f f989 	uxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802bd92:	2212      	movs	r2, #18
 802bd94:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802bd98:	4620      	mov	r0, r4
 802bd9a:	f7df f887 	bl	800aeac <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802bd9e:	eb08 0700 	add.w	r7, r8, r0
 802bda2:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 802bda4:	2213      	movs	r2, #19
 802bda6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802bdaa:	4620      	mov	r0, r4
 802bdac:	f7df f87e 	bl	800aeac <lv_obj_get_style_prop>
    cur_area.x1 = letter_pos.x - left;
 802bdb0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802bdb4:	1bd7      	subs	r7, r2, r7
 802bdb6:	b2bf      	uxth	r7, r7
    cur_area.y1 = letter_pos.y - top;
 802bdb8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802bdbc:	1b5d      	subs	r5, r3, r5
 802bdbe:	b2ad      	uxth	r5, r5
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR) + border_width;
 802bdc0:	4480      	add	r8, r0
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 802bdc2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802bdc6:	4490      	add	r8, r2
 802bdc8:	4446      	add	r6, r8
 802bdca:	b2b6      	uxth	r6, r6
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 802bdcc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802bdd0:	444b      	add	r3, r9
 802bdd2:	449a      	add	sl, r3
 802bdd4:	fa1f fa8a 	uxth.w	sl, sl
    dest->y1 = src->y1;
 802bdd8:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 802bddc:	f9b4 e04c 	ldrsh.w	lr, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 802bde0:	f9b4 c04e 	ldrsh.w	ip, [r4, #78]	; 0x4e
    area_tmp.x1 += ta->label->coords.x1;
 802bde4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802bde6:	8a9a      	ldrh	r2, [r3, #20]
 802bde8:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 802bdec:	4410      	add	r0, r2
 802bdee:	f8ad 000c 	strh.w	r0, [sp, #12]
    area_tmp.y1 += ta->label->coords.y1;
 802bdf2:	8adb      	ldrh	r3, [r3, #22]
 802bdf4:	4419      	add	r1, r3
 802bdf6:	f8ad 100e 	strh.w	r1, [sp, #14]
    area_tmp.x2 += ta->label->coords.x1;
 802bdfa:	4472      	add	r2, lr
 802bdfc:	f8ad 2010 	strh.w	r2, [sp, #16]
    area_tmp.y2 += ta->label->coords.y1;
 802be00:	4463      	add	r3, ip
 802be02:	f8ad 3012 	strh.w	r3, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 802be06:	a903      	add	r1, sp, #12
 802be08:	4620      	mov	r0, r4
 802be0a:	f7dc fbf3 	bl	80085f4 <lv_obj_invalidate_area>
    dest->x1 = src->x1;
 802be0e:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
    dest->y1 = src->y1;
 802be12:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 802be16:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 802be1a:	f8a4 a04e 	strh.w	sl, [r4, #78]	; 0x4e
    area_tmp.x1 += ta->label->coords.x1;
 802be1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802be20:	f8b3 8014 	ldrh.w	r8, [r3, #20]
 802be24:	4447      	add	r7, r8
 802be26:	f8ad 700c 	strh.w	r7, [sp, #12]
    area_tmp.y1 += ta->label->coords.y1;
 802be2a:	8adb      	ldrh	r3, [r3, #22]
 802be2c:	441d      	add	r5, r3
 802be2e:	f8ad 500e 	strh.w	r5, [sp, #14]
    area_tmp.x2 += ta->label->coords.x1;
 802be32:	4446      	add	r6, r8
 802be34:	f8ad 6010 	strh.w	r6, [sp, #16]
    area_tmp.y2 += ta->label->coords.y1;
 802be38:	449a      	add	sl, r3
 802be3a:	f8ad a012 	strh.w	sl, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 802be3e:	a903      	add	r1, sp, #12
 802be40:	4620      	mov	r0, r4
 802be42:	f7dc fbd7 	bl	80085f4 <lv_obj_invalidate_area>
}
 802be46:	b007      	add	sp, #28
 802be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be4c:	20000764 	.word	0x20000764
 802be50:	2000076c 	.word	0x2000076c
 802be54:	20000774 	.word	0x20000774

0802be58 <label_event_cb>:
{
 802be58:	b570      	push	{r4, r5, r6, lr}
 802be5a:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 802be5c:	f7d8 fad8 	bl	8004410 <lv_event_get_code>
 802be60:	4604      	mov	r4, r0
    lv_obj_t * label = lv_event_get_target(e);
 802be62:	4628      	mov	r0, r5
 802be64:	f7d8 fad0 	bl	8004408 <lv_event_get_target>
 802be68:	4606      	mov	r6, r0
    lv_obj_t * ta = lv_obj_get_parent(label);
 802be6a:	f7df ff61 	bl	800bd30 <lv_obj_get_parent>
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 802be6e:	3c29      	subs	r4, #41	; 0x29
 802be70:	b2e4      	uxtb	r4, r4
 802be72:	2c01      	cmp	r4, #1
 802be74:	d900      	bls.n	802be78 <label_event_cb+0x20>
}
 802be76:	bd70      	pop	{r4, r5, r6, pc}
 802be78:	4605      	mov	r5, r0
        lv_label_set_text(label, NULL);
 802be7a:	2100      	movs	r1, #0
 802be7c:	4630      	mov	r0, r6
 802be7e:	f7fd f893 	bl	8028fa8 <lv_label_set_text>
        refr_cursor_area(ta);
 802be82:	4628      	mov	r0, r5
 802be84:	f7ff fee8 	bl	802bc58 <refr_cursor_area>
        start_cursor_blink(ta);
 802be88:	4628      	mov	r0, r5
 802be8a:	f7ff fe9d 	bl	802bbc8 <start_cursor_blink>
}
 802be8e:	e7f2      	b.n	802be76 <label_event_cb+0x1e>

0802be90 <lv_textarea_set_cursor_pos>:
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 802be90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 802be92:	428b      	cmp	r3, r1
 802be94:	d07b      	beq.n	802bf8e <lv_textarea_set_cursor_pos+0xfe>
{
 802be96:	b5f0      	push	{r4, r5, r6, r7, lr}
 802be98:	b083      	sub	sp, #12
 802be9a:	4604      	mov	r4, r0
 802be9c:	460d      	mov	r5, r1
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 802be9e:	4b3c      	ldr	r3, [pc, #240]	; (802bf90 <lv_textarea_set_cursor_pos+0x100>)
 802bea0:	681e      	ldr	r6, [r3, #0]
 802bea2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802bea4:	f7fc fbba 	bl	802861c <lv_label_get_text>
 802bea8:	47b0      	blx	r6
    if(pos < 0) pos = len + pos;
 802beaa:	2d00      	cmp	r5, #0
 802beac:	bfb8      	it	lt
 802beae:	182d      	addlt	r5, r5, r0
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 802beb0:	4606      	mov	r6, r0
 802beb2:	42a8      	cmp	r0, r5
 802beb4:	db04      	blt.n	802bec0 <lv_textarea_set_cursor_pos+0x30>
 802beb6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802beba:	429d      	cmp	r5, r3
 802bebc:	bf18      	it	ne
 802bebe:	462e      	movne	r6, r5
    ta->cursor.pos = pos;
 802bec0:	6466      	str	r6, [r4, #68]	; 0x44
    lv_obj_update_layout(obj);
 802bec2:	4620      	mov	r0, r4
 802bec4:	f7dd fa6e 	bl	80093a4 <lv_obj_update_layout>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802bec8:	2257      	movs	r2, #87	; 0x57
 802beca:	2100      	movs	r1, #0
 802becc:	4620      	mov	r0, r4
 802bece:	f7de ffed 	bl	800aeac <lv_obj_get_style_prop>
 802bed2:	4605      	mov	r5, r0
    lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 802bed4:	aa01      	add	r2, sp, #4
 802bed6:	4631      	mov	r1, r6
 802bed8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802beda:	f7fc fba7 	bl	802862c <lv_label_get_letter_pos>
 802bede:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
    if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 802bee2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 802bee6:	4620      	mov	r0, r4
 802bee8:	f7dd fd52 	bl	8009990 <lv_obj_get_scroll_top>
 802beec:	4285      	cmp	r5, r0
 802beee:	db2c      	blt.n	802bf4a <lv_textarea_set_cursor_pos+0xba>
    lv_coord_t h = lv_obj_get_content_height(obj);
 802bef0:	4620      	mov	r0, r4
 802bef2:	f7dc f985 	bl	8008200 <lv_obj_get_content_height>
 802bef6:	4607      	mov	r7, r0
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 802bef8:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 802befc:	4435      	add	r5, r6
 802befe:	4620      	mov	r0, r4
 802bf00:	f7dd fd46 	bl	8009990 <lv_obj_get_scroll_top>
 802bf04:	1a2d      	subs	r5, r5, r0
 802bf06:	42bd      	cmp	r5, r7
 802bf08:	dc26      	bgt.n	802bf58 <lv_textarea_set_cursor_pos+0xc8>
    if(cur_pos.x < lv_obj_get_scroll_left(obj)) {
 802bf0a:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 802bf0e:	4620      	mov	r0, r4
 802bf10:	f7dd fdb0 	bl	8009a74 <lv_obj_get_scroll_left>
 802bf14:	4285      	cmp	r5, r0
 802bf16:	db29      	blt.n	802bf6c <lv_textarea_set_cursor_pos+0xdc>
    lv_coord_t w = lv_obj_get_content_width(obj);
 802bf18:	4620      	mov	r0, r4
 802bf1a:	f7dc f954 	bl	80081c6 <lv_obj_get_content_width>
 802bf1e:	4607      	mov	r7, r0
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 802bf20:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 802bf24:	4435      	add	r5, r6
 802bf26:	4620      	mov	r0, r4
 802bf28:	f7dd fda4 	bl	8009a74 <lv_obj_get_scroll_left>
 802bf2c:	1a2d      	subs	r5, r5, r0
 802bf2e:	42bd      	cmp	r5, r7
 802bf30:	dc23      	bgt.n	802bf7a <lv_textarea_set_cursor_pos+0xea>
    ta->cursor.valid_x = cur_pos.x;
 802bf32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 802bf36:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    start_cursor_blink(obj);
 802bf3a:	4620      	mov	r0, r4
 802bf3c:	f7ff fe44 	bl	802bbc8 <start_cursor_blink>
    refr_cursor_area(obj);
 802bf40:	4620      	mov	r0, r4
 802bf42:	f7ff fe89 	bl	802bc58 <refr_cursor_area>
}
 802bf46:	b003      	add	sp, #12
 802bf48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 802bf4a:	2201      	movs	r2, #1
 802bf4c:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 802bf50:	4620      	mov	r0, r4
 802bf52:	f7dd ffff 	bl	8009f54 <lv_obj_scroll_to_y>
 802bf56:	e7cb      	b.n	802bef0 <lv_textarea_set_cursor_pos+0x60>
        lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 802bf58:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 802bf5c:	4431      	add	r1, r6
 802bf5e:	1bc9      	subs	r1, r1, r7
 802bf60:	2201      	movs	r2, #1
 802bf62:	b209      	sxth	r1, r1
 802bf64:	4620      	mov	r0, r4
 802bf66:	f7dd fff5 	bl	8009f54 <lv_obj_scroll_to_y>
 802bf6a:	e7ce      	b.n	802bf0a <lv_textarea_set_cursor_pos+0x7a>
        lv_obj_scroll_to_x(obj, cur_pos.x, LV_ANIM_ON);
 802bf6c:	2201      	movs	r2, #1
 802bf6e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 802bf72:	4620      	mov	r0, r4
 802bf74:	f7dd ffda 	bl	8009f2c <lv_obj_scroll_to_x>
 802bf78:	e7ce      	b.n	802bf18 <lv_textarea_set_cursor_pos+0x88>
        lv_obj_scroll_to_x(obj, cur_pos.x - w + font_h, LV_ANIM_ON);
 802bf7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802bf7e:	440e      	add	r6, r1
 802bf80:	1bf1      	subs	r1, r6, r7
 802bf82:	2201      	movs	r2, #1
 802bf84:	b209      	sxth	r1, r1
 802bf86:	4620      	mov	r0, r4
 802bf88:	f7dd ffd0 	bl	8009f2c <lv_obj_scroll_to_x>
 802bf8c:	e7d1      	b.n	802bf32 <lv_textarea_set_cursor_pos+0xa2>
 802bf8e:	4770      	bx	lr
 802bf90:	20000778 	.word	0x20000778

0802bf94 <lv_textarea_constructor>:
{
 802bf94:	b538      	push	{r3, r4, r5, lr}
 802bf96:	460c      	mov	r4, r1
    ta->pwd_mode          = 0;
 802bf98:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    ta->pwd_tmp           = NULL;
 802bf9c:	2500      	movs	r5, #0
 802bf9e:	62cd      	str	r5, [r1, #44]	; 0x2c
    ta->pwd_bullet        = NULL;
 802bfa0:	630d      	str	r5, [r1, #48]	; 0x30
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 802bfa2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 802bfa6:	878a      	strh	r2, [r1, #60]	; 0x3c
    ta->accepted_chars    = NULL;
 802bfa8:	634d      	str	r5, [r1, #52]	; 0x34
    ta->max_length        = 0;
 802bfaa:	638d      	str	r5, [r1, #56]	; 0x38
    ta->cursor.show      = 1;
 802bfac:	f891 2054 	ldrb.w	r2, [r1, #84]	; 0x54
    ta->cursor.pos        = 1;
 802bfb0:	2101      	movs	r1, #1
 802bfb2:	6461      	str	r1, [r4, #68]	; 0x44
    ta->cursor.click_pos  = 1;
 802bfb4:	f042 0203 	orr.w	r2, r2, #3
 802bfb8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    ta->cursor.valid_x    = 0;
 802bfbc:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
    ta->text_sel_en = 0;
 802bfc0:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 802bfc4:	f365 0341 	bfi	r3, r5, #1, #1
 802bfc8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    ta->label       = NULL;
 802bfcc:	6265      	str	r5, [r4, #36]	; 0x24
    ta->placeholder_txt = NULL;
 802bfce:	62a5      	str	r5, [r4, #40]	; 0x28
    ta->label = lv_label_create(obj);
 802bfd0:	4620      	mov	r0, r4
 802bfd2:	f7fc fb0d 	bl	80285f0 <lv_label_create>
 802bfd6:	6260      	str	r0, [r4, #36]	; 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 802bfd8:	f242 0164 	movw	r1, #8292	; 0x2064
 802bfdc:	f7db ffe8 	bl	8007fb0 <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 802bfe0:	490b      	ldr	r1, [pc, #44]	; (802c010 <lv_textarea_constructor+0x7c>)
 802bfe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bfe4:	f7fc ffe0 	bl	8028fa8 <lv_label_set_text>
    lv_obj_add_event_cb(ta->label, label_event_cb, LV_EVENT_ALL, NULL);
 802bfe8:	462b      	mov	r3, r5
 802bfea:	462a      	mov	r2, r5
 802bfec:	4909      	ldr	r1, [pc, #36]	; (802c014 <lv_textarea_constructor+0x80>)
 802bfee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802bff0:	f7d8 fa2a 	bl	8004448 <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 802bff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802bff8:	4620      	mov	r0, r4
 802bffa:	f7da ffbb 	bl	8006f74 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 802bffe:	4629      	mov	r1, r5
 802c000:	4620      	mov	r0, r4
 802c002:	f7ff ff45 	bl	802be90 <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 802c006:	4620      	mov	r0, r4
 802c008:	f7ff fdde 	bl	802bbc8 <start_cursor_blink>
}
 802c00c:	bd38      	pop	{r3, r4, r5, pc}
 802c00e:	bf00      	nop
 802c010:	0802d578 	.word	0x0802d578
 802c014:	0802be59 	.word	0x0802be59

0802c018 <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1U : 0U;
 802c018:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802c01c:	f361 0341 	bfi	r3, r1, #1, #1
 802c020:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
}
 802c024:	4770      	bx	lr

0802c026 <lv_textarea_set_one_line>:
    if(ta->one_line == en) return;
 802c026:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802c02a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802c02e:	428b      	cmp	r3, r1
 802c030:	d02f      	beq.n	802c092 <lv_textarea_set_one_line+0x6c>
{
 802c032:	b510      	push	{r4, lr}
 802c034:	4604      	mov	r4, r0
    ta->one_line = en ? 1U : 0U;
 802c036:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802c03a:	f361 03c3 	bfi	r3, r1, #3, #1
 802c03e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 802c042:	b979      	cbnz	r1, 802c064 <lv_textarea_set_one_line+0x3e>
    lv_obj_set_width(ta->label, width);
 802c044:	f242 0164 	movw	r1, #8292	; 0x2064
 802c048:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802c04a:	f7db ffb1 	bl	8007fb0 <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 802c04e:	2200      	movs	r2, #0
 802c050:	4611      	mov	r1, r2
 802c052:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c054:	f7df fdc2 	bl	800bbdc <lv_obj_set_style_min_width>
        lv_obj_remove_local_style_prop(obj, LV_STYLE_HEIGHT, LV_PART_MAIN);
 802c058:	2200      	movs	r2, #0
 802c05a:	2104      	movs	r1, #4
 802c05c:	4620      	mov	r0, r4
 802c05e:	f7df fb61 	bl	800b724 <lv_obj_remove_local_style_prop>
 802c062:	e00f      	b.n	802c084 <lv_textarea_set_one_line+0x5e>
    lv_obj_set_width(ta->label, width);
 802c064:	f242 71d1 	movw	r1, #10193	; 0x27d1
 802c068:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802c06a:	f7db ffa1 	bl	8007fb0 <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 802c06e:	2200      	movs	r2, #0
 802c070:	f242 0164 	movw	r1, #8292	; 0x2064
 802c074:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c076:	f7df fdb1 	bl	800bbdc <lv_obj_set_style_min_width>
        lv_obj_set_height(obj, LV_SIZE_CONTENT);
 802c07a:	f242 71d1 	movw	r1, #10193	; 0x27d1
 802c07e:	4620      	mov	r0, r4
 802c080:	f7db ffad 	bl	8007fde <lv_obj_set_height>
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 802c084:	2300      	movs	r3, #0
 802c086:	461a      	mov	r2, r3
 802c088:	4619      	mov	r1, r3
 802c08a:	4620      	mov	r0, r4
 802c08c:	f7dd ff76 	bl	8009f7c <lv_obj_scroll_to>
}
 802c090:	bd10      	pop	{r4, pc}
 802c092:	4770      	bx	lr

0802c094 <lv_textarea_get_text>:
{
 802c094:	b508      	push	{r3, lr}
    if(ta->pwd_mode == 0) {
 802c096:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802c09a:	f013 0f04 	tst.w	r3, #4
 802c09e:	d001      	beq.n	802c0a4 <lv_textarea_get_text+0x10>
        txt = ta->pwd_tmp;
 802c0a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 802c0a2:	bd08      	pop	{r3, pc}
        txt = lv_label_get_text(ta->label);
 802c0a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802c0a6:	f7fc fab9 	bl	802861c <lv_label_get_text>
 802c0aa:	e7fa      	b.n	802c0a2 <lv_textarea_get_text+0xe>

0802c0ac <lv_textarea_get_cursor_pos>:
}
 802c0ac:	6c40      	ldr	r0, [r0, #68]	; 0x44
 802c0ae:	4770      	bx	lr

0802c0b0 <lv_textarea_get_password_bullet>:
{
 802c0b0:	4603      	mov	r3, r0
    if(ta->pwd_bullet) return ta->pwd_bullet;
 802c0b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 802c0b4:	b100      	cbz	r0, 802c0b8 <lv_textarea_get_password_bullet+0x8>
}
 802c0b6:	4770      	bx	lr
{
 802c0b8:	b500      	push	{lr}
 802c0ba:	b085      	sub	sp, #20
 802c0bc:	2257      	movs	r2, #87	; 0x57
 802c0be:	2100      	movs	r1, #0
 802c0c0:	4618      	mov	r0, r3
 802c0c2:	f7de fef3 	bl	800aeac <lv_obj_get_style_prop>
    if(lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0))
 802c0c6:	2300      	movs	r3, #0
 802c0c8:	f242 0222 	movw	r2, #8226	; 0x2022
 802c0cc:	4669      	mov	r1, sp
 802c0ce:	f7f4 fa31 	bl	8020534 <lv_font_get_glyph_dsc>
 802c0d2:	4601      	mov	r1, r0
        return LV_SYMBOL_BULLET;
 802c0d4:	4b03      	ldr	r3, [pc, #12]	; (802c0e4 <lv_textarea_get_password_bullet+0x34>)
 802c0d6:	4804      	ldr	r0, [pc, #16]	; (802c0e8 <lv_textarea_get_password_bullet+0x38>)
 802c0d8:	2900      	cmp	r1, #0
 802c0da:	bf08      	it	eq
 802c0dc:	4618      	moveq	r0, r3
}
 802c0de:	b005      	add	sp, #20
 802c0e0:	f85d fb04 	ldr.w	pc, [sp], #4
 802c0e4:	0802d87c 	.word	0x0802d87c
 802c0e8:	080337d0 	.word	0x080337d0

0802c0ec <pwd_char_hider>:
{
 802c0ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(ta->pwd_mode == 0) {
 802c0f0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802c0f4:	f013 0f04 	tst.w	r3, #4
 802c0f8:	d101      	bne.n	802c0fe <pwd_char_hider+0x12>
}
 802c0fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c0fe:	4606      	mov	r6, r0
    char * txt = lv_label_get_text(ta->label);
 802c100:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802c102:	f7fc fa8b 	bl	802861c <lv_label_get_text>
    uint32_t enc_len = _lv_txt_get_encoded_length(txt);
 802c106:	4b16      	ldr	r3, [pc, #88]	; (802c160 <pwd_char_hider+0x74>)
 802c108:	681b      	ldr	r3, [r3, #0]
 802c10a:	4798      	blx	r3
    if(enc_len == 0) return;
 802c10c:	4680      	mov	r8, r0
 802c10e:	2800      	cmp	r0, #0
 802c110:	d0f3      	beq.n	802c0fa <pwd_char_hider+0xe>
    const char * bullet = lv_textarea_get_password_bullet(obj);
 802c112:	4630      	mov	r0, r6
 802c114:	f7ff ffcc 	bl	802c0b0 <lv_textarea_get_password_bullet>
 802c118:	4681      	mov	r9, r0
    const size_t bullet_len = strlen(bullet);
 802c11a:	f7d4 f88d 	bl	8000238 <strlen>
 802c11e:	4607      	mov	r7, r0
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 802c120:	fb00 fb08 	mul.w	fp, r0, r8
 802c124:	f10b 0001 	add.w	r0, fp, #1
 802c128:	f7f5 ff52 	bl	8021fd0 <lv_mem_buf_get>
 802c12c:	4682      	mov	sl, r0
    for(i = 0; i < enc_len; i++) {
 802c12e:	4605      	mov	r5, r0
 802c130:	2400      	movs	r4, #0
        lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 802c132:	463a      	mov	r2, r7
 802c134:	4649      	mov	r1, r9
 802c136:	4628      	mov	r0, r5
 802c138:	f7f5 ffe2 	bl	8022100 <lv_memcpy>
    for(i = 0; i < enc_len; i++) {
 802c13c:	3401      	adds	r4, #1
 802c13e:	443d      	add	r5, r7
 802c140:	45a0      	cmp	r8, r4
 802c142:	d1f6      	bne.n	802c132 <pwd_char_hider+0x46>
    txt_tmp[i * bullet_len] = '\0';
 802c144:	2300      	movs	r3, #0
 802c146:	f80a 300b 	strb.w	r3, [sl, fp]
    lv_label_set_text(ta->label, txt_tmp);
 802c14a:	4651      	mov	r1, sl
 802c14c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 802c14e:	f7fc ff2b 	bl	8028fa8 <lv_label_set_text>
    lv_mem_buf_release(txt_tmp);
 802c152:	4650      	mov	r0, sl
 802c154:	f7f5 ff9e 	bl	8022094 <lv_mem_buf_release>
    refr_cursor_area(obj);
 802c158:	4630      	mov	r0, r6
 802c15a:	f7ff fd7d 	bl	802bc58 <refr_cursor_area>
 802c15e:	e7cc      	b.n	802c0fa <pwd_char_hider+0xe>
 802c160:	20000778 	.word	0x20000778

0802c164 <auto_hide_characters>:
{
 802c164:	b510      	push	{r4, lr}
 802c166:	b092      	sub	sp, #72	; 0x48
 802c168:	4604      	mov	r4, r0
    if(ta->pwd_show_time == 0) {
 802c16a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 802c16c:	b91b      	cbnz	r3, 802c176 <auto_hide_characters+0x12>
        pwd_char_hider(obj);
 802c16e:	f7ff ffbd 	bl	802c0ec <pwd_char_hider>
}
 802c172:	b012      	add	sp, #72	; 0x48
 802c174:	bd10      	pop	{r4, pc}
        lv_anim_init(&a);
 802c176:	a801      	add	r0, sp, #4
 802c178:	f7f4 fe60 	bl	8020e3c <lv_anim_init>
    a->var = var;
 802c17c:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 802c17e:	4b08      	ldr	r3, [pc, #32]	; (802c1a0 <auto_hide_characters+0x3c>)
 802c180:	9302      	str	r3, [sp, #8]
    a->time = duration;
 802c182:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 802c184:	930c      	str	r3, [sp, #48]	; 0x30
    a->start_value = start;
 802c186:	2300      	movs	r3, #0
 802c188:	9309      	str	r3, [sp, #36]	; 0x24
    a->current_value = start;
 802c18a:	930a      	str	r3, [sp, #40]	; 0x28
    a->end_value = end;
 802c18c:	2301      	movs	r3, #1
 802c18e:	930b      	str	r3, [sp, #44]	; 0x2c
    a->path_cb = path_cb;
 802c190:	4b04      	ldr	r3, [pc, #16]	; (802c1a4 <auto_hide_characters+0x40>)
 802c192:	9308      	str	r3, [sp, #32]
    a->ready_cb = ready_cb;
 802c194:	4b04      	ldr	r3, [pc, #16]	; (802c1a8 <auto_hide_characters+0x44>)
 802c196:	9304      	str	r3, [sp, #16]
        lv_anim_start(&a);
 802c198:	a801      	add	r0, sp, #4
 802c19a:	f7f4 fea1 	bl	8020ee0 <lv_anim_start>
}
 802c19e:	e7e8      	b.n	802c172 <auto_hide_characters+0xe>
 802c1a0:	0802bb69 	.word	0x0802bb69
 802c1a4:	08021031 	.word	0x08021031
 802c1a8:	0802c1ad 	.word	0x0802c1ad

0802c1ac <pwd_char_hider_anim_ready>:
{
 802c1ac:	b508      	push	{r3, lr}
    pwd_char_hider(obj);
 802c1ae:	6800      	ldr	r0, [r0, #0]
 802c1b0:	f7ff ff9c 	bl	802c0ec <pwd_char_hider>
}
 802c1b4:	bd08      	pop	{r3, pc}

0802c1b6 <lv_textarea_get_one_line>:
    return ta->one_line == 1U;
 802c1b6:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
}
 802c1ba:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 802c1be:	4770      	bx	lr

0802c1c0 <lv_textarea_clear_selection>:
{
 802c1c0:	b510      	push	{r4, lr}
 802c1c2:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 802c1c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802c1c6:	f7fd fa94 	bl	80296f2 <lv_label_get_text_selection_start>
 802c1ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802c1ce:	4298      	cmp	r0, r3
 802c1d0:	d00a      	beq.n	802c1e8 <lv_textarea_clear_selection+0x28>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 802c1d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802c1d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c1d8:	f7fc fa16 	bl	8028608 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 802c1dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802c1e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c1e2:	f7fc fa16 	bl	8028612 <lv_label_set_text_sel_end>
}
 802c1e6:	bd10      	pop	{r4, pc}
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 802c1e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c1ea:	f7fd fa84 	bl	80296f6 <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 802c1ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802c1f2:	4298      	cmp	r0, r3
 802c1f4:	d1ed      	bne.n	802c1d2 <lv_textarea_clear_selection+0x12>
 802c1f6:	e7f6      	b.n	802c1e6 <lv_textarea_clear_selection+0x26>

0802c1f8 <lv_textarea_add_text>:
    LV_ASSERT_NULL(txt);
 802c1f8:	b301      	cbz	r1, 802c23c <lv_textarea_add_text+0x44>
{
 802c1fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c1fc:	b083      	sub	sp, #12
 802c1fe:	4605      	mov	r5, r0
 802c200:	460c      	mov	r4, r1
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802c202:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802c206:	f013 0f04 	tst.w	r3, #4
 802c20a:	d118      	bne.n	802c23e <lv_textarea_add_text+0x46>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802c20c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802c20e:	b1cb      	cbz	r3, 802c244 <lv_textarea_add_text+0x4c>
        uint32_t i = 0;
 802c210:	2300      	movs	r3, #0
 802c212:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 802c214:	7823      	ldrb	r3, [r4, #0]
 802c216:	b17b      	cbz	r3, 802c238 <lv_textarea_add_text+0x40>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802c218:	4f2e      	ldr	r7, [pc, #184]	; (802c2d4 <lv_textarea_add_text+0xdc>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802c21a:	4e2f      	ldr	r6, [pc, #188]	; (802c2d8 <lv_textarea_add_text+0xe0>)
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802c21c:	683b      	ldr	r3, [r7, #0]
 802c21e:	a901      	add	r1, sp, #4
 802c220:	4620      	mov	r0, r4
 802c222:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802c224:	6833      	ldr	r3, [r6, #0]
 802c226:	4798      	blx	r3
 802c228:	4601      	mov	r1, r0
 802c22a:	4628      	mov	r0, r5
 802c22c:	f000 f878 	bl	802c320 <lv_textarea_add_char>
        while(txt[i] != '\0') {
 802c230:	9b01      	ldr	r3, [sp, #4]
 802c232:	5ce3      	ldrb	r3, [r4, r3]
 802c234:	2b00      	cmp	r3, #0
 802c236:	d1f1      	bne.n	802c21c <lv_textarea_add_text+0x24>
}
 802c238:	b003      	add	sp, #12
 802c23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(txt);
 802c23c:	e7fe      	b.n	802c23c <lv_textarea_add_text+0x44>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802c23e:	f7ff ff55 	bl	802c0ec <pwd_char_hider>
 802c242:	e7e3      	b.n	802c20c <lv_textarea_add_text+0x14>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802c244:	6bab      	ldr	r3, [r5, #56]	; 0x38
 802c246:	2b00      	cmp	r3, #0
 802c248:	d1e2      	bne.n	802c210 <lv_textarea_add_text+0x18>
    lv_res_t res = insert_handler(obj, txt);
 802c24a:	4621      	mov	r1, r4
 802c24c:	4628      	mov	r0, r5
 802c24e:	f000 f847 	bl	802c2e0 <insert_handler>
    if(res != LV_RES_OK) return;
 802c252:	2801      	cmp	r0, #1
 802c254:	d1f0      	bne.n	802c238 <lv_textarea_add_text+0x40>
    if(ta->placeholder_txt) {
 802c256:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802c258:	b123      	cbz	r3, 802c264 <lv_textarea_add_text+0x6c>
        const char * txt_act = lv_label_get_text(ta->label);
 802c25a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802c25c:	f7fc f9de 	bl	802861c <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802c260:	7803      	ldrb	r3, [r0, #0]
 802c262:	b1db      	cbz	r3, 802c29c <lv_textarea_add_text+0xa4>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 802c264:	4622      	mov	r2, r4
 802c266:	6c69      	ldr	r1, [r5, #68]	; 0x44
 802c268:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802c26a:	f7fd fa47 	bl	80296fc <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 802c26e:	4628      	mov	r0, r5
 802c270:	f7ff ffa6 	bl	802c1c0 <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 802c274:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
 802c278:	f013 0f04 	tst.w	r3, #4
 802c27c:	d112      	bne.n	802c2a4 <lv_textarea_add_text+0xac>
    return ta->cursor.pos;
 802c27e:	6c6e      	ldr	r6, [r5, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 802c280:	4b16      	ldr	r3, [pc, #88]	; (802c2dc <lv_textarea_add_text+0xe4>)
 802c282:	681b      	ldr	r3, [r3, #0]
 802c284:	4620      	mov	r0, r4
 802c286:	4798      	blx	r3
 802c288:	1981      	adds	r1, r0, r6
 802c28a:	4628      	mov	r0, r5
 802c28c:	f7ff fe00 	bl	802be90 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802c290:	2200      	movs	r2, #0
 802c292:	211c      	movs	r1, #28
 802c294:	4628      	mov	r0, r5
 802c296:	f7d8 f895 	bl	80043c4 <lv_event_send>
 802c29a:	e7cd      	b.n	802c238 <lv_textarea_add_text+0x40>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802c29c:	4628      	mov	r0, r5
 802c29e:	f7dc f9cd 	bl	800863c <lv_obj_invalidate>
 802c2a2:	e7df      	b.n	802c264 <lv_textarea_add_text+0x6c>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(txt) + 1;
 802c2a4:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 802c2a6:	4638      	mov	r0, r7
 802c2a8:	f7d3 ffc6 	bl	8000238 <strlen>
 802c2ac:	4606      	mov	r6, r0
 802c2ae:	4620      	mov	r0, r4
 802c2b0:	f7d3 ffc2 	bl	8000238 <strlen>
 802c2b4:	1831      	adds	r1, r6, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 802c2b6:	3101      	adds	r1, #1
 802c2b8:	4638      	mov	r0, r7
 802c2ba:	f7f5 fe71 	bl	8021fa0 <lv_mem_realloc>
 802c2be:	62e8      	str	r0, [r5, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c2c0:	b138      	cbz	r0, 802c2d2 <lv_textarea_add_text+0xda>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 802c2c2:	4622      	mov	r2, r4
 802c2c4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 802c2c6:	f7f8 f885 	bl	80243d4 <_lv_txt_ins>
        auto_hide_characters(obj);
 802c2ca:	4628      	mov	r0, r5
 802c2cc:	f7ff ff4a 	bl	802c164 <auto_hide_characters>
 802c2d0:	e7d5      	b.n	802c27e <lv_textarea_add_text+0x86>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c2d2:	e7fe      	b.n	802c2d2 <lv_textarea_add_text+0xda>
 802c2d4:	2000076c 	.word	0x2000076c
 802c2d8:	2000077c 	.word	0x2000077c
 802c2dc:	20000778 	.word	0x20000778

0802c2e0 <insert_handler>:
{
 802c2e0:	b570      	push	{r4, r5, r6, lr}
 802c2e2:	4606      	mov	r6, r0
 802c2e4:	460c      	mov	r4, r1
    ta_insert_replace = NULL;
 802c2e6:	4d0d      	ldr	r5, [pc, #52]	; (802c31c <insert_handler+0x3c>)
 802c2e8:	2300      	movs	r3, #0
 802c2ea:	602b      	str	r3, [r5, #0]
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 802c2ec:	460a      	mov	r2, r1
 802c2ee:	211d      	movs	r1, #29
 802c2f0:	f7d8 f868 	bl	80043c4 <lv_event_send>
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 802c2f4:	682d      	ldr	r5, [r5, #0]
 802c2f6:	b175      	cbz	r5, 802c316 <insert_handler+0x36>
 802c2f8:	7828      	ldrb	r0, [r5, #0]
 802c2fa:	b128      	cbz	r0, 802c308 <insert_handler+0x28>
        if(strcmp(ta_insert_replace, txt)) {
 802c2fc:	4621      	mov	r1, r4
 802c2fe:	4628      	mov	r0, r5
 802c300:	f7d3 ff90 	bl	8000224 <strcmp>
 802c304:	b908      	cbnz	r0, 802c30a <insert_handler+0x2a>
    return LV_RES_OK;
 802c306:	2001      	movs	r0, #1
}
 802c308:	bd70      	pop	{r4, r5, r6, pc}
            lv_textarea_add_text(obj, ta_insert_replace);
 802c30a:	4629      	mov	r1, r5
 802c30c:	4630      	mov	r0, r6
 802c30e:	f7ff ff73 	bl	802c1f8 <lv_textarea_add_text>
            return LV_RES_INV;
 802c312:	2000      	movs	r0, #0
 802c314:	e7f8      	b.n	802c308 <insert_handler+0x28>
    return LV_RES_OK;
 802c316:	2001      	movs	r0, #1
 802c318:	e7f6      	b.n	802c308 <insert_handler+0x28>
 802c31a:	bf00      	nop
 802c31c:	2000c23c 	.word	0x2000c23c

0802c320 <lv_textarea_add_char>:
{
 802c320:	b570      	push	{r4, r5, r6, lr}
 802c322:	b086      	sub	sp, #24
 802c324:	4604      	mov	r4, r0
 802c326:	9101      	str	r1, [sp, #4]
    if(ta->one_line && (c == '\n' || c == '\r')) {
 802c328:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 802c32c:	f013 0f08 	tst.w	r3, #8
 802c330:	d003      	beq.n	802c33a <lv_textarea_add_char+0x1a>
 802c332:	290a      	cmp	r1, #10
 802c334:	d05f      	beq.n	802c3f6 <lv_textarea_add_char+0xd6>
 802c336:	290d      	cmp	r1, #13
 802c338:	d05d      	beq.n	802c3f6 <lv_textarea_add_char+0xd6>
    u32_buf[0] = c;
 802c33a:	9b01      	ldr	r3, [sp, #4]
 802c33c:	9304      	str	r3, [sp, #16]
    u32_buf[1] = 0;
 802c33e:	2300      	movs	r3, #0
 802c340:	9305      	str	r3, [sp, #20]
    lv_res_t res = insert_handler(obj, letter_buf);
 802c342:	a904      	add	r1, sp, #16
 802c344:	4620      	mov	r0, r4
 802c346:	f7ff ffcb 	bl	802c2e0 <insert_handler>
    if(res != LV_RES_OK) return;
 802c34a:	2801      	cmp	r0, #1
 802c34c:	d153      	bne.n	802c3f6 <lv_textarea_add_char+0xd6>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 802c34e:	4b34      	ldr	r3, [pc, #208]	; (802c420 <lv_textarea_add_char+0x100>)
 802c350:	681b      	ldr	r3, [r3, #0]
 802c352:	2100      	movs	r1, #0
 802c354:	a801      	add	r0, sp, #4
 802c356:	4798      	blx	r3
 802c358:	4605      	mov	r5, r0
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 802c35a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c35c:	2b00      	cmp	r3, #0
 802c35e:	d14c      	bne.n	802c3fa <lv_textarea_add_char+0xda>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 802c360:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c362:	b173      	cbz	r3, 802c382 <lv_textarea_add_char+0x62>
 802c364:	781b      	ldrb	r3, [r3, #0]
 802c366:	b163      	cbz	r3, 802c382 <lv_textarea_add_char+0x62>
    uint32_t i = 0;
 802c368:	2300      	movs	r3, #0
 802c36a:	9303      	str	r3, [sp, #12]
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 802c36c:	4e2c      	ldr	r6, [pc, #176]	; (802c420 <lv_textarea_add_char+0x100>)
    while(ta->accepted_chars[i] != '\0') {
 802c36e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802c370:	9b03      	ldr	r3, [sp, #12]
 802c372:	5cc3      	ldrb	r3, [r0, r3]
 802c374:	2b00      	cmp	r3, #0
 802c376:	d03e      	beq.n	802c3f6 <lv_textarea_add_char+0xd6>
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 802c378:	6833      	ldr	r3, [r6, #0]
 802c37a:	a903      	add	r1, sp, #12
 802c37c:	4798      	blx	r3
        if(a == c) return true; /*Accepted*/
 802c37e:	4285      	cmp	r5, r0
 802c380:	d1f5      	bne.n	802c36e <lv_textarea_add_char+0x4e>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802c382:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c386:	f013 0f04 	tst.w	r3, #4
 802c38a:	d140      	bne.n	802c40e <lv_textarea_add_char+0xee>
    if(ta->placeholder_txt) {
 802c38c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802c38e:	b12b      	cbz	r3, 802c39c <lv_textarea_add_char+0x7c>
        const char * txt = lv_label_get_text(ta->label);
 802c390:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c392:	f7fc f943 	bl	802861c <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802c396:	7803      	ldrb	r3, [r0, #0]
 802c398:	2b00      	cmp	r3, #0
 802c39a:	d03c      	beq.n	802c416 <lv_textarea_add_char+0xf6>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 802c39c:	aa04      	add	r2, sp, #16
 802c39e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802c3a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c3a2:	f7fd f9ab 	bl	80296fc <lv_label_ins_text>
    lv_textarea_clear_selection(obj); /*Clear selection*/
 802c3a6:	4620      	mov	r0, r4
 802c3a8:	f7ff ff0a 	bl	802c1c0 <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 802c3ac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c3b0:	f013 0f04 	tst.w	r3, #4
 802c3b4:	d015      	beq.n	802c3e2 <lv_textarea_add_char+0xc2>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(letter_buf) + 1;
 802c3b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802c3b8:	4630      	mov	r0, r6
 802c3ba:	f7d3 ff3d 	bl	8000238 <strlen>
 802c3be:	4605      	mov	r5, r0
 802c3c0:	a804      	add	r0, sp, #16
 802c3c2:	f7d3 ff39 	bl	8000238 <strlen>
 802c3c6:	1829      	adds	r1, r5, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 802c3c8:	3101      	adds	r1, #1
 802c3ca:	4630      	mov	r0, r6
 802c3cc:	f7f5 fde8 	bl	8021fa0 <lv_mem_realloc>
 802c3d0:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c3d2:	b320      	cbz	r0, 802c41e <lv_textarea_add_char+0xfe>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 802c3d4:	aa04      	add	r2, sp, #16
 802c3d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802c3d8:	f7f7 fffc 	bl	80243d4 <_lv_txt_ins>
        auto_hide_characters(obj);
 802c3dc:	4620      	mov	r0, r4
 802c3de:	f7ff fec1 	bl	802c164 <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 802c3e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802c3e4:	3101      	adds	r1, #1
 802c3e6:	4620      	mov	r0, r4
 802c3e8:	f7ff fd52 	bl	802be90 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802c3ec:	2200      	movs	r2, #0
 802c3ee:	211c      	movs	r1, #28
 802c3f0:	4620      	mov	r0, r4
 802c3f2:	f7d7 ffe7 	bl	80043c4 <lv_event_send>
}
 802c3f6:	b006      	add	sp, #24
 802c3f8:	bd70      	pop	{r4, r5, r6, pc}
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 802c3fa:	4b0a      	ldr	r3, [pc, #40]	; (802c424 <lv_textarea_add_char+0x104>)
 802c3fc:	681e      	ldr	r6, [r3, #0]
 802c3fe:	4620      	mov	r0, r4
 802c400:	f7ff fe48 	bl	802c094 <lv_textarea_get_text>
 802c404:	47b0      	blx	r6
 802c406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c408:	4298      	cmp	r0, r3
 802c40a:	d3a9      	bcc.n	802c360 <lv_textarea_add_char+0x40>
 802c40c:	e7f3      	b.n	802c3f6 <lv_textarea_add_char+0xd6>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802c40e:	4620      	mov	r0, r4
 802c410:	f7ff fe6c 	bl	802c0ec <pwd_char_hider>
 802c414:	e7ba      	b.n	802c38c <lv_textarea_add_char+0x6c>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802c416:	4620      	mov	r0, r4
 802c418:	f7dc f910 	bl	800863c <lv_obj_invalidate>
 802c41c:	e7be      	b.n	802c39c <lv_textarea_add_char+0x7c>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c41e:	e7fe      	b.n	802c41e <lv_textarea_add_char+0xfe>
 802c420:	2000076c 	.word	0x2000076c
 802c424:	20000778 	.word	0x20000778

0802c428 <lv_textarea_del_char>:
    if(cur_pos == 0) return;
 802c428:	6c43      	ldr	r3, [r0, #68]	; 0x44
 802c42a:	b903      	cbnz	r3, 802c42e <lv_textarea_del_char+0x6>
 802c42c:	4770      	bx	lr
{
 802c42e:	b530      	push	{r4, r5, lr}
 802c430:	b083      	sub	sp, #12
 802c432:	4604      	mov	r4, r0
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 802c434:	237f      	movs	r3, #127	; 0x7f
 802c436:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_res_t res = insert_handler(obj, del_buf);
 802c43a:	a901      	add	r1, sp, #4
 802c43c:	f7ff ff50 	bl	802c2e0 <insert_handler>
    if(res != LV_RES_OK) return;
 802c440:	2801      	cmp	r0, #1
 802c442:	d001      	beq.n	802c448 <lv_textarea_del_char+0x20>
}
 802c444:	b003      	add	sp, #12
 802c446:	bd30      	pop	{r4, r5, pc}
    char * label_txt = lv_label_get_text(ta->label);
 802c448:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c44a:	f7fc f8e7 	bl	802861c <lv_label_get_text>
 802c44e:	4605      	mov	r5, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 802c450:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802c452:	2201      	movs	r2, #1
 802c454:	3901      	subs	r1, #1
 802c456:	f7f7 fff5 	bl	8024444 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 802c45a:	4629      	mov	r1, r5
 802c45c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c45e:	f7fc fda3 	bl	8028fa8 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 802c462:	4620      	mov	r0, r4
 802c464:	f7ff feac 	bl	802c1c0 <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 802c468:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802c46a:	b123      	cbz	r3, 802c476 <lv_textarea_del_char+0x4e>
        const char * txt = lv_label_get_text(ta->label);
 802c46c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c46e:	f7fc f8d5 	bl	802861c <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802c472:	7803      	ldrb	r3, [r0, #0]
 802c474:	b1fb      	cbz	r3, 802c4b6 <lv_textarea_del_char+0x8e>
    if(ta->pwd_mode) {
 802c476:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c47a:	f013 0f04 	tst.w	r3, #4
 802c47e:	d00f      	beq.n	802c4a0 <lv_textarea_del_char+0x78>
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 802c480:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802c482:	2201      	movs	r2, #1
 802c484:	3901      	subs	r1, #1
 802c486:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802c488:	f7f7 ffdc 	bl	8024444 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 802c48c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 802c48e:	4628      	mov	r0, r5
 802c490:	f7d3 fed2 	bl	8000238 <strlen>
 802c494:	1c41      	adds	r1, r0, #1
 802c496:	4628      	mov	r0, r5
 802c498:	f7f5 fd82 	bl	8021fa0 <lv_mem_realloc>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c49c:	b178      	cbz	r0, 802c4be <lv_textarea_del_char+0x96>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 802c49e:	62e0      	str	r0, [r4, #44]	; 0x2c
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 802c4a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802c4a2:	3901      	subs	r1, #1
 802c4a4:	4620      	mov	r0, r4
 802c4a6:	f7ff fcf3 	bl	802be90 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802c4aa:	2200      	movs	r2, #0
 802c4ac:	211c      	movs	r1, #28
 802c4ae:	4620      	mov	r0, r4
 802c4b0:	f7d7 ff88 	bl	80043c4 <lv_event_send>
 802c4b4:	e7c6      	b.n	802c444 <lv_textarea_del_char+0x1c>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802c4b6:	4620      	mov	r0, r4
 802c4b8:	f7dc f8c0 	bl	800863c <lv_obj_invalidate>
 802c4bc:	e7db      	b.n	802c476 <lv_textarea_del_char+0x4e>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c4be:	e7fe      	b.n	802c4be <lv_textarea_del_char+0x96>

0802c4c0 <lv_textarea_del_char_forward>:
{
 802c4c0:	b538      	push	{r3, r4, r5, lr}
 802c4c2:	4604      	mov	r4, r0
    return ta->cursor.pos;
 802c4c4:	6c45      	ldr	r5, [r0, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, cp + 1);
 802c4c6:	1c69      	adds	r1, r5, #1
 802c4c8:	f7ff fce2 	bl	802be90 <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 802c4cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802c4ce:	42ab      	cmp	r3, r5
 802c4d0:	d100      	bne.n	802c4d4 <lv_textarea_del_char_forward+0x14>
}
 802c4d2:	bd38      	pop	{r3, r4, r5, pc}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 802c4d4:	4620      	mov	r0, r4
 802c4d6:	f7ff ffa7 	bl	802c428 <lv_textarea_del_char>
}
 802c4da:	e7fa      	b.n	802c4d2 <lv_textarea_del_char_forward+0x12>

0802c4dc <lv_textarea_set_text>:
    LV_ASSERT_NULL(txt);
 802c4dc:	2900      	cmp	r1, #0
 802c4de:	d04f      	beq.n	802c580 <lv_textarea_set_text+0xa4>
{
 802c4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c4e2:	b083      	sub	sp, #12
 802c4e4:	4604      	mov	r4, r0
 802c4e6:	460d      	mov	r5, r1
    lv_textarea_clear_selection(obj);
 802c4e8:	f7ff fe6a 	bl	802c1c0 <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802c4ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c4ee:	2b00      	cmp	r3, #0
 802c4f0:	d047      	beq.n	802c582 <lv_textarea_set_text+0xa6>
        lv_label_set_text(ta->label, "");
 802c4f2:	492d      	ldr	r1, [pc, #180]	; (802c5a8 <lv_textarea_set_text+0xcc>)
 802c4f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c4f6:	f7fc fd57 	bl	8028fa8 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802c4fa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802c4fe:	4620      	mov	r0, r4
 802c500:	f7ff fcc6 	bl	802be90 <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode) {
 802c504:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c508:	f013 0f04 	tst.w	r3, #4
 802c50c:	d002      	beq.n	802c514 <lv_textarea_set_text+0x38>
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 802c50e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802c510:	2200      	movs	r2, #0
 802c512:	701a      	strb	r2, [r3, #0]
        uint32_t i = 0;
 802c514:	2300      	movs	r3, #0
 802c516:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 802c518:	782b      	ldrb	r3, [r5, #0]
 802c51a:	b17b      	cbz	r3, 802c53c <lv_textarea_set_text+0x60>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802c51c:	4f23      	ldr	r7, [pc, #140]	; (802c5ac <lv_textarea_set_text+0xd0>)
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802c51e:	4e24      	ldr	r6, [pc, #144]	; (802c5b0 <lv_textarea_set_text+0xd4>)
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802c520:	683b      	ldr	r3, [r7, #0]
 802c522:	a901      	add	r1, sp, #4
 802c524:	4628      	mov	r0, r5
 802c526:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 802c528:	6833      	ldr	r3, [r6, #0]
 802c52a:	4798      	blx	r3
 802c52c:	4601      	mov	r1, r0
 802c52e:	4620      	mov	r0, r4
 802c530:	f7ff fef6 	bl	802c320 <lv_textarea_add_char>
        while(txt[i] != '\0') {
 802c534:	9b01      	ldr	r3, [sp, #4]
 802c536:	5ceb      	ldrb	r3, [r5, r3]
 802c538:	2b00      	cmp	r3, #0
 802c53a:	d1f1      	bne.n	802c520 <lv_textarea_set_text+0x44>
    if(ta->placeholder_txt) {
 802c53c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802c53e:	b123      	cbz	r3, 802c54a <lv_textarea_set_text+0x6e>
        const char * txt_act = lv_label_get_text(ta->label);
 802c540:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c542:	f7fc f86b 	bl	802861c <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802c546:	7803      	ldrb	r3, [r0, #0]
 802c548:	b343      	cbz	r3, 802c59c <lv_textarea_set_text+0xc0>
    if(ta->pwd_mode) {
 802c54a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c54e:	f013 0f04 	tst.w	r3, #4
 802c552:	d00e      	beq.n	802c572 <lv_textarea_set_text+0x96>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 802c554:	4628      	mov	r0, r5
 802c556:	f7d3 fe6f 	bl	8000238 <strlen>
 802c55a:	1c41      	adds	r1, r0, #1
 802c55c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802c55e:	f7f5 fd1f 	bl	8021fa0 <lv_mem_realloc>
 802c562:	62e0      	str	r0, [r4, #44]	; 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c564:	b1f0      	cbz	r0, 802c5a4 <lv_textarea_set_text+0xc8>
        strcpy(ta->pwd_tmp, txt);
 802c566:	4629      	mov	r1, r5
 802c568:	f000 fcd4 	bl	802cf14 <strcpy>
        auto_hide_characters(obj);
 802c56c:	4620      	mov	r0, r4
 802c56e:	f7ff fdf9 	bl	802c164 <auto_hide_characters>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802c572:	2200      	movs	r2, #0
 802c574:	211c      	movs	r1, #28
 802c576:	4620      	mov	r0, r4
 802c578:	f7d7 ff24 	bl	80043c4 <lv_event_send>
}
 802c57c:	b003      	add	sp, #12
 802c57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LV_ASSERT_NULL(txt);
 802c580:	e7fe      	b.n	802c580 <lv_textarea_set_text+0xa4>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802c582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c584:	2b00      	cmp	r3, #0
 802c586:	d1b4      	bne.n	802c4f2 <lv_textarea_set_text+0x16>
        lv_label_set_text(ta->label, txt);
 802c588:	4629      	mov	r1, r5
 802c58a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c58c:	f7fc fd0c 	bl	8028fa8 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802c590:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802c594:	4620      	mov	r0, r4
 802c596:	f7ff fc7b 	bl	802be90 <lv_textarea_set_cursor_pos>
 802c59a:	e7cf      	b.n	802c53c <lv_textarea_set_text+0x60>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 802c59c:	4620      	mov	r0, r4
 802c59e:	f7dc f84d 	bl	800863c <lv_obj_invalidate>
 802c5a2:	e7d2      	b.n	802c54a <lv_textarea_set_text+0x6e>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802c5a4:	e7fe      	b.n	802c5a4 <lv_textarea_set_text+0xc8>
 802c5a6:	bf00      	nop
 802c5a8:	0802d578 	.word	0x0802d578
 802c5ac:	2000076c 	.word	0x2000076c
 802c5b0:	2000077c 	.word	0x2000077c

0802c5b4 <lv_textarea_cursor_right>:
{
 802c5b4:	b508      	push	{r3, lr}
    cp++;
 802c5b6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    lv_textarea_set_cursor_pos(obj, cp);
 802c5b8:	3101      	adds	r1, #1
 802c5ba:	f7ff fc69 	bl	802be90 <lv_textarea_set_cursor_pos>
}
 802c5be:	bd08      	pop	{r3, pc}

0802c5c0 <lv_textarea_cursor_left>:
    return ta->cursor.pos;
 802c5c0:	6c41      	ldr	r1, [r0, #68]	; 0x44
    if(cp > 0) {
 802c5c2:	b901      	cbnz	r1, 802c5c6 <lv_textarea_cursor_left+0x6>
 802c5c4:	4770      	bx	lr
{
 802c5c6:	b508      	push	{r3, lr}
        lv_textarea_set_cursor_pos(obj, cp);
 802c5c8:	3901      	subs	r1, #1
 802c5ca:	f7ff fc61 	bl	802be90 <lv_textarea_set_cursor_pos>
}
 802c5ce:	bd08      	pop	{r3, pc}

0802c5d0 <lv_textarea_cursor_down>:
{
 802c5d0:	b530      	push	{r4, r5, lr}
 802c5d2:	b083      	sub	sp, #12
 802c5d4:	4605      	mov	r5, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 802c5d6:	aa01      	add	r2, sp, #4
 802c5d8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 802c5da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802c5dc:	f7fc f826 	bl	802862c <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802c5e0:	2259      	movs	r2, #89	; 0x59
 802c5e2:	2100      	movs	r1, #0
 802c5e4:	4628      	mov	r0, r5
 802c5e6:	f7de fc61 	bl	800aeac <lv_obj_get_style_prop>
 802c5ea:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802c5ec:	2257      	movs	r2, #87	; 0x57
 802c5ee:	2100      	movs	r1, #0
 802c5f0:	4628      	mov	r0, r5
 802c5f2:	f7de fc5b 	bl	800aeac <lv_obj_get_style_prop>
    pos.y += font_h + line_space + 1;
 802c5f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802c5fa:	441c      	add	r4, r3
 802c5fc:	3401      	adds	r4, #1
 802c5fe:	8903      	ldrh	r3, [r0, #8]
 802c600:	441c      	add	r4, r3
 802c602:	b224      	sxth	r4, r4
 802c604:	f8ad 4006 	strh.w	r4, [sp, #6]
    pos.x = ta->cursor.valid_x;
 802c608:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 802c60c:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(pos.y < lv_obj_get_height(ta->label)) {
 802c610:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802c612:	f7db fdd2 	bl	80081ba <lv_obj_get_height>
 802c616:	4284      	cmp	r4, r0
 802c618:	db01      	blt.n	802c61e <lv_textarea_cursor_down+0x4e>
}
 802c61a:	b003      	add	sp, #12
 802c61c:	bd30      	pop	{r4, r5, pc}
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 802c61e:	a901      	add	r1, sp, #4
 802c620:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802c622:	f7fc f901 	bl	8028828 <lv_label_get_letter_on>
 802c626:	4601      	mov	r1, r0
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 802c628:	f9b5 4040 	ldrsh.w	r4, [r5, #64]	; 0x40
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 802c62c:	4628      	mov	r0, r5
 802c62e:	f7ff fc2f 	bl	802be90 <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 802c632:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
}
 802c636:	e7f0      	b.n	802c61a <lv_textarea_cursor_down+0x4a>

0802c638 <lv_textarea_cursor_up>:
{
 802c638:	b530      	push	{r4, r5, lr}
 802c63a:	b083      	sub	sp, #12
 802c63c:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 802c63e:	aa01      	add	r2, sp, #4
 802c640:	6c41      	ldr	r1, [r0, #68]	; 0x44
 802c642:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802c644:	f7fb fff2 	bl	802862c <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 802c648:	2259      	movs	r2, #89	; 0x59
 802c64a:	2100      	movs	r1, #0
 802c64c:	4620      	mov	r0, r4
 802c64e:	f7de fc2d 	bl	800aeac <lv_obj_get_style_prop>
 802c652:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 802c654:	2257      	movs	r2, #87	; 0x57
 802c656:	2100      	movs	r1, #0
 802c658:	4620      	mov	r0, r4
 802c65a:	f7de fc27 	bl	800aeac <lv_obj_get_style_prop>
    pos.y -= font_h + line_space - 1;
 802c65e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802c662:	3301      	adds	r3, #1
 802c664:	1b5b      	subs	r3, r3, r5
 802c666:	8900      	ldrh	r0, [r0, #8]
 802c668:	1a1b      	subs	r3, r3, r0
 802c66a:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 802c66e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 802c672:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 802c676:	a901      	add	r1, sp, #4
 802c678:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c67a:	f7fc f8d5 	bl	8028828 <lv_label_get_letter_on>
 802c67e:	4601      	mov	r1, r0
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 802c680:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 802c684:	4620      	mov	r0, r4
 802c686:	f7ff fc03 	bl	802be90 <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 802c68a:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
 802c68e:	b003      	add	sp, #12
 802c690:	bd30      	pop	{r4, r5, pc}
	...

0802c694 <lv_textarea_event>:
{
 802c694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802c698:	b09d      	sub	sp, #116	; 0x74
 802c69a:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802c69c:	48b9      	ldr	r0, [pc, #740]	; (802c984 <lv_textarea_event+0x2f0>)
 802c69e:	f7d7 fd94 	bl	80041ca <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 802c6a2:	2801      	cmp	r0, #1
 802c6a4:	d002      	beq.n	802c6ac <lv_textarea_event+0x18>
}
 802c6a6:	b01d      	add	sp, #116	; 0x74
 802c6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802c6ac:	4628      	mov	r0, r5
 802c6ae:	f7d7 feaf 	bl	8004410 <lv_event_get_code>
 802c6b2:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 802c6b4:	4628      	mov	r0, r5
 802c6b6:	f7d7 fea7 	bl	8004408 <lv_event_get_target>
 802c6ba:	4606      	mov	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 802c6bc:	2c0e      	cmp	r4, #14
 802c6be:	f000 809c 	beq.w	802c7fa <lv_textarea_event+0x166>
    else if(code == LV_EVENT_KEY) {
 802c6c2:	2c0d      	cmp	r4, #13
 802c6c4:	f000 809c 	beq.w	802c800 <lv_textarea_event+0x16c>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_PRESSING || code == LV_EVENT_PRESS_LOST ||
 802c6c8:	1e63      	subs	r3, r4, #1
 802c6ca:	b2db      	uxtb	r3, r3
 802c6cc:	2b02      	cmp	r3, #2
 802c6ce:	f240 80df 	bls.w	802c890 <lv_textarea_event+0x1fc>
 802c6d2:	2c08      	cmp	r4, #8
 802c6d4:	f000 80dc 	beq.w	802c890 <lv_textarea_event+0x1fc>
    else if(code == LV_EVENT_DRAW_MAIN) {
 802c6d8:	2c15      	cmp	r4, #21
 802c6da:	f000 81b1 	beq.w	802ca40 <lv_textarea_event+0x3ac>
    else if(code == LV_EVENT_DRAW_POST) {
 802c6de:	2c18      	cmp	r4, #24
 802c6e0:	d1e1      	bne.n	802c6a6 <lv_textarea_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802c6e2:	4628      	mov	r0, r5
 802c6e4:	f7d7 fe90 	bl	8004408 <lv_event_get_target>
 802c6e8:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802c6ea:	4628      	mov	r0, r5
 802c6ec:	f7d7 ff00 	bl	80044f0 <lv_event_get_draw_ctx>
 802c6f0:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 802c6f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c6f4:	f7fb ff92 	bl	802861c <lv_label_get_text>
 802c6f8:	4607      	mov	r7, r0
    if(ta->cursor.show == 0) return;
 802c6fa:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 802c6fe:	f013 0f01 	tst.w	r3, #1
 802c702:	d0d0      	beq.n	802c6a6 <lv_textarea_event+0x12>
    lv_draw_rect_dsc_init(&cur_dsc);
 802c704:	a80e      	add	r0, sp, #56	; 0x38
 802c706:	f7e3 f891 	bl	800f82c <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 802c70a:	aa0e      	add	r2, sp, #56	; 0x38
 802c70c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c710:	4620      	mov	r0, r4
 802c712:	f7db f805 	bl	8007720 <lv_obj_init_draw_rect_dsc>
    dest->y1 = src->y1;
 802c716:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
    dest->x2 = src->x2;
 802c71a:	f9b4 c04c 	ldrsh.w	ip, [r4, #76]	; 0x4c
    dest->y2 = src->y2;
 802c71e:	f9b4 504e 	ldrsh.w	r5, [r4, #78]	; 0x4e
    cur_area.x1 += ta->label->coords.x1;
 802c722:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c724:	8a82      	ldrh	r2, [r0, #20]
 802c726:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 802c72a:	4413      	add	r3, r2
 802c72c:	f8ad 3008 	strh.w	r3, [sp, #8]
    cur_area.y1 += ta->label->coords.y1;
 802c730:	8ac3      	ldrh	r3, [r0, #22]
 802c732:	4419      	add	r1, r3
 802c734:	f8ad 100a 	strh.w	r1, [sp, #10]
    cur_area.x2 += ta->label->coords.x1;
 802c738:	4462      	add	r2, ip
 802c73a:	f8ad 200c 	strh.w	r2, [sp, #12]
    cur_area.y2 += ta->label->coords.y1;
 802c73e:	442b      	add	r3, r5
 802c740:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 802c744:	aa02      	add	r2, sp, #8
 802c746:	a90e      	add	r1, sp, #56	; 0x38
 802c748:	4630      	mov	r0, r6
 802c74a:	f7e3 f8cb 	bl	800f8e4 <lv_draw_rect>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802c74e:	2232      	movs	r2, #50	; 0x32
 802c750:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c754:	4620      	mov	r0, r4
 802c756:	f7de fba9 	bl	800aeac <lv_obj_get_style_prop>
 802c75a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802c75c:	2212      	movs	r2, #18
 802c75e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c762:	4620      	mov	r0, r4
 802c764:	f7de fba2 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 802c768:	b2ad      	uxth	r5, r5
 802c76a:	eb05 0800 	add.w	r8, r5, r0
 802c76e:	fa1f f888 	uxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802c772:	2210      	movs	r2, #16
 802c774:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c778:	4620      	mov	r0, r4
 802c77a:	f7de fb97 	bl	800aeac <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 802c77e:	4405      	add	r5, r0
 802c780:	b2ad      	uxth	r5, r5
    char letter_buf[8] = {0};
 802c782:	f04f 0900 	mov.w	r9, #0
 802c786:	f8cd 9010 	str.w	r9, [sp, #16]
 802c78a:	f8cd 9014 	str.w	r9, [sp, #20]
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 802c78e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802c790:	441f      	add	r7, r3
 802c792:	4b7d      	ldr	r3, [pc, #500]	; (802c988 <lv_textarea_event+0x2f4>)
 802c794:	681b      	ldr	r3, [r3, #0]
 802c796:	4638      	mov	r0, r7
 802c798:	4798      	blx	r3
 802c79a:	4602      	mov	r2, r0
 802c79c:	4639      	mov	r1, r7
 802c79e:	a804      	add	r0, sp, #16
 802c7a0:	f7f5 fcae 	bl	8022100 <lv_memcpy>
    cur_area.x1 += left;
 802c7a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 802c7a8:	4498      	add	r8, r3
 802c7aa:	f8ad 8008 	strh.w	r8, [sp, #8]
    cur_area.y1 += top;
 802c7ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802c7b2:	441d      	add	r5, r3
 802c7b4:	f8ad 500a 	strh.w	r5, [sp, #10]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 802c7b8:	2255      	movs	r2, #85	; 0x55
 802c7ba:	4649      	mov	r1, r9
 802c7bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c7be:	f7de fb75 	bl	800aeac <lv_obj_get_style_prop>
    return v.color;
 802c7c2:	b285      	uxth	r5, r0
    lv_draw_label_dsc_init(&cur_label_dsc);
 802c7c4:	a806      	add	r0, sp, #24
 802c7c6:	f7e1 fa75 	bl	800dcb4 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 802c7ca:	aa06      	add	r2, sp, #24
 802c7cc:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 802c7d0:	4620      	mov	r0, r4
 802c7d2:	f7db f91a 	bl	8007a0a <lv_obj_init_draw_label_dsc>
    if(cur_dsc.bg_opa > LV_OPA_MIN || cur_label_dsc.color.full != label_color.full) {
 802c7d6:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 802c7da:	2b02      	cmp	r3, #2
 802c7dc:	d804      	bhi.n	802c7e8 <lv_textarea_event+0x154>
 802c7de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 802c7e2:	42ab      	cmp	r3, r5
 802c7e4:	f43f af5f 	beq.w	802c6a6 <lv_textarea_event+0x12>
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 802c7e8:	2300      	movs	r3, #0
 802c7ea:	9300      	str	r3, [sp, #0]
 802c7ec:	ab04      	add	r3, sp, #16
 802c7ee:	aa02      	add	r2, sp, #8
 802c7f0:	a906      	add	r1, sp, #24
 802c7f2:	4630      	mov	r0, r6
 802c7f4:	f7e1 fa92 	bl	800dd1c <lv_draw_label>
 802c7f8:	e755      	b.n	802c6a6 <lv_textarea_event+0x12>
        start_cursor_blink(obj);
 802c7fa:	f7ff f9e5 	bl	802bbc8 <start_cursor_blink>
 802c7fe:	e752      	b.n	802c6a6 <lv_textarea_event+0x12>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 802c800:	4628      	mov	r0, r5
 802c802:	f7d7 fe09 	bl	8004418 <lv_event_get_param>
 802c806:	6801      	ldr	r1, [r0, #0]
        if(c == LV_KEY_RIGHT)
 802c808:	2913      	cmp	r1, #19
 802c80a:	d018      	beq.n	802c83e <lv_textarea_event+0x1aa>
        else if(c == LV_KEY_LEFT)
 802c80c:	2914      	cmp	r1, #20
 802c80e:	d01a      	beq.n	802c846 <lv_textarea_event+0x1b2>
        else if(c == LV_KEY_UP)
 802c810:	2911      	cmp	r1, #17
 802c812:	d01c      	beq.n	802c84e <lv_textarea_event+0x1ba>
        else if(c == LV_KEY_DOWN)
 802c814:	2912      	cmp	r1, #18
 802c816:	d01e      	beq.n	802c856 <lv_textarea_event+0x1c2>
        else if(c == LV_KEY_BACKSPACE)
 802c818:	2908      	cmp	r1, #8
 802c81a:	d020      	beq.n	802c85e <lv_textarea_event+0x1ca>
        else if(c == LV_KEY_DEL)
 802c81c:	297f      	cmp	r1, #127	; 0x7f
 802c81e:	d022      	beq.n	802c866 <lv_textarea_event+0x1d2>
        else if(c == LV_KEY_HOME)
 802c820:	2902      	cmp	r1, #2
 802c822:	d024      	beq.n	802c86e <lv_textarea_event+0x1da>
        else if(c == LV_KEY_END)
 802c824:	2903      	cmp	r1, #3
 802c826:	d027      	beq.n	802c878 <lv_textarea_event+0x1e4>
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 802c828:	290a      	cmp	r1, #10
 802c82a:	d104      	bne.n	802c836 <lv_textarea_event+0x1a2>
    return ta->one_line == 1U;
 802c82c:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 802c830:	f013 0f08 	tst.w	r3, #8
 802c834:	d126      	bne.n	802c884 <lv_textarea_event+0x1f0>
            lv_textarea_add_char(obj, c);
 802c836:	4630      	mov	r0, r6
 802c838:	f7ff fd72 	bl	802c320 <lv_textarea_add_char>
 802c83c:	e733      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_cursor_right(obj);
 802c83e:	4630      	mov	r0, r6
 802c840:	f7ff feb8 	bl	802c5b4 <lv_textarea_cursor_right>
 802c844:	e72f      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_cursor_left(obj);
 802c846:	4630      	mov	r0, r6
 802c848:	f7ff feba 	bl	802c5c0 <lv_textarea_cursor_left>
 802c84c:	e72b      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_cursor_up(obj);
 802c84e:	4630      	mov	r0, r6
 802c850:	f7ff fef2 	bl	802c638 <lv_textarea_cursor_up>
 802c854:	e727      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_cursor_down(obj);
 802c856:	4630      	mov	r0, r6
 802c858:	f7ff feba 	bl	802c5d0 <lv_textarea_cursor_down>
 802c85c:	e723      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_del_char(obj);
 802c85e:	4630      	mov	r0, r6
 802c860:	f7ff fde2 	bl	802c428 <lv_textarea_del_char>
 802c864:	e71f      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_del_char_forward(obj);
 802c866:	4630      	mov	r0, r6
 802c868:	f7ff fe2a 	bl	802c4c0 <lv_textarea_del_char_forward>
 802c86c:	e71b      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_set_cursor_pos(obj, 0);
 802c86e:	2100      	movs	r1, #0
 802c870:	4630      	mov	r0, r6
 802c872:	f7ff fb0d 	bl	802be90 <lv_textarea_set_cursor_pos>
 802c876:	e716      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802c878:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802c87c:	4630      	mov	r0, r6
 802c87e:	f7ff fb07 	bl	802be90 <lv_textarea_set_cursor_pos>
 802c882:	e710      	b.n	802c6a6 <lv_textarea_event+0x12>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 802c884:	2200      	movs	r2, #0
 802c886:	211f      	movs	r1, #31
 802c888:	4630      	mov	r0, r6
 802c88a:	f7d7 fd9b 	bl	80043c4 <lv_event_send>
 802c88e:	e70a      	b.n	802c6a6 <lv_textarea_event+0x12>
    lv_indev_t * click_source = lv_indev_get_act();
 802c890:	f7d8 f93e 	bl	8004b10 <lv_indev_get_act>
    if(click_source == NULL) return;
 802c894:	4606      	mov	r6, r0
 802c896:	2800      	cmp	r0, #0
 802c898:	f43f af05 	beq.w	802c6a6 <lv_textarea_event+0x12>
    lv_obj_t * obj = lv_event_get_target(e);
 802c89c:	4628      	mov	r0, r5
 802c89e:	f7d7 fdb3 	bl	8004408 <lv_event_get_target>
 802c8a2:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 802c8a4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 802c8a8:	f013 0f02 	tst.w	r3, #2
 802c8ac:	f43f aefb 	beq.w	802c6a6 <lv_textarea_event+0x12>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 802c8b0:	4630      	mov	r0, r6
 802c8b2:	f7d8 f933 	bl	8004b1c <lv_indev_get_type>
 802c8b6:	2802      	cmp	r0, #2
 802c8b8:	f43f aef5 	beq.w	802c6a6 <lv_textarea_event+0x12>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 802c8bc:	4630      	mov	r0, r6
 802c8be:	f7d8 f92d 	bl	8004b1c <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 802c8c2:	2804      	cmp	r0, #4
 802c8c4:	f43f aeef 	beq.w	802c6a6 <lv_textarea_event+0x12>
    lv_obj_get_coords(ta->label, &label_coords);
 802c8c8:	a90e      	add	r1, sp, #56	; 0x38
 802c8ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c8cc:	f7db fc11 	bl	80080f2 <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 802c8d0:	a902      	add	r1, sp, #8
 802c8d2:	4630      	mov	r0, r6
 802c8d4:	f7d8 f999 	bl	8004c0a <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 802c8d8:	a904      	add	r1, sp, #16
 802c8da:	4630      	mov	r0, r6
 802c8dc:	f7d8 f9c8 	bl	8004c70 <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 802c8e0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802c8e4:	2b00      	cmp	r3, #0
 802c8e6:	f6ff aede 	blt.w	802c6a6 <lv_textarea_event+0x12>
 802c8ea:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 802c8ee:	2a00      	cmp	r2, #0
 802c8f0:	f6ff aed9 	blt.w	802c6a6 <lv_textarea_event+0x12>
    rel_pos.x = point_act.x - label_coords.x1;
 802c8f4:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802c8f8:	1a5b      	subs	r3, r3, r1
 802c8fa:	f8ad 3018 	strh.w	r3, [sp, #24]
    rel_pos.y = point_act.y - label_coords.y1;
 802c8fe:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 802c902:	1ad2      	subs	r2, r2, r3
 802c904:	f8ad 201a 	strh.w	r2, [sp, #26]
    const lv_event_code_t code = lv_event_get_code(e);
 802c908:	4628      	mov	r0, r5
 802c90a:	f7d7 fd81 	bl	8004410 <lv_event_get_code>
 802c90e:	4605      	mov	r5, r0
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 802c910:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c912:	f7db fc4c 	bl	80081ae <lv_obj_get_width>
    lv_label_t * label_data = (lv_label_t *)ta->label;
 802c916:	6a66      	ldr	r6, [r4, #36]	; 0x24
    if(rel_pos.x < 0) {
 802c918:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802c91c:	2b00      	cmp	r3, #0
 802c91e:	db12      	blt.n	802c946 <lv_textarea_event+0x2b2>
    else if(rel_pos.x >= label_width) {
 802c920:	4298      	cmp	r0, r3
 802c922:	dc03      	bgt.n	802c92c <lv_textarea_event+0x298>
        click_outside_label = true;
 802c924:	2201      	movs	r2, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 802c926:	f647 77ff 	movw	r7, #32767	; 0x7fff
 802c92a:	e00e      	b.n	802c94a <lv_textarea_event+0x2b6>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 802c92c:	a906      	add	r1, sp, #24
 802c92e:	4630      	mov	r0, r6
 802c930:	f7fb ff7a 	bl	8028828 <lv_label_get_letter_on>
 802c934:	b287      	uxth	r7, r0
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 802c936:	a906      	add	r1, sp, #24
 802c938:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802c93a:	f7fc fdd9 	bl	80294f0 <lv_label_is_char_under_pos>
 802c93e:	f080 0201 	eor.w	r2, r0, #1
 802c942:	b2d2      	uxtb	r2, r2
 802c944:	e001      	b.n	802c94a <lv_textarea_event+0x2b6>
        click_outside_label = true;
 802c946:	2201      	movs	r2, #1
        char_id_at_click = 0;
 802c948:	2700      	movs	r7, #0
    if(ta->text_sel_en) {
 802c94a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c94e:	f013 0f02 	tst.w	r3, #2
 802c952:	d026      	beq.n	802c9a2 <lv_textarea_event+0x30e>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 802c954:	f013 0f01 	tst.w	r3, #1
 802c958:	d118      	bne.n	802c98c <lv_textarea_event+0x2f8>
 802c95a:	bb3a      	cbnz	r2, 802c9ac <lv_textarea_event+0x318>
 802c95c:	2d01      	cmp	r5, #1
 802c95e:	f47f aea2 	bne.w	802c6a6 <lv_textarea_event+0x12>
            ta->sel_start    = char_id_at_click;
 802c962:	65a7      	str	r7, [r4, #88]	; 0x58
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 802c964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802c968:	65e3      	str	r3, [r4, #92]	; 0x5c
            ta->text_sel_in_prog = 1;
 802c96a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c96e:	f043 0301 	orr.w	r3, r3, #1
 802c972:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802c976:	f44f 7140 	mov.w	r1, #768	; 0x300
 802c97a:	4620      	mov	r0, r4
 802c97c:	f7da fb34 	bl	8006fe8 <lv_obj_clear_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 802c980:	e017      	b.n	802c9b2 <lv_textarea_event+0x31e>
 802c982:	bf00      	nop
 802c984:	080337d4 	.word	0x080337d4
 802c988:	20000774 	.word	0x20000774
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 802c98c:	2d02      	cmp	r5, #2
 802c98e:	d036      	beq.n	802c9fe <lv_textarea_event+0x36a>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 802c990:	2d03      	cmp	r5, #3
 802c992:	d001      	beq.n	802c998 <lv_textarea_event+0x304>
 802c994:	2d08      	cmp	r5, #8
 802c996:	d10c      	bne.n	802c9b2 <lv_textarea_event+0x31e>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802c998:	f44f 7140 	mov.w	r1, #768	; 0x300
 802c99c:	4620      	mov	r0, r4
 802c99e:	f7da fae9 	bl	8006f74 <lv_obj_add_flag>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 802c9a2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c9a6:	f013 0f01 	tst.w	r3, #1
 802c9aa:	d102      	bne.n	802c9b2 <lv_textarea_event+0x31e>
 802c9ac:	2d01      	cmp	r5, #1
 802c9ae:	f47f ae7a 	bne.w	802c6a6 <lv_textarea_event+0x12>
 802c9b2:	4639      	mov	r1, r7
 802c9b4:	4620      	mov	r0, r4
 802c9b6:	f7ff fa6b 	bl	802be90 <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 802c9ba:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c9be:	f013 0f01 	tst.w	r3, #1
 802c9c2:	f43f ae70 	beq.w	802c6a6 <lv_textarea_event+0x12>
        if(ta->sel_start > ta->sel_end) {
 802c9c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c9c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 802c9ca:	4293      	cmp	r3, r2
 802c9cc:	d919      	bls.n	802ca02 <lv_textarea_event+0x36e>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 802c9ce:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 802c9d0:	428a      	cmp	r2, r1
 802c9d2:	d102      	bne.n	802c9da <lv_textarea_event+0x346>
 802c9d4:	6c31      	ldr	r1, [r6, #64]	; 0x40
 802c9d6:	428b      	cmp	r3, r1
 802c9d8:	d005      	beq.n	802c9e6 <lv_textarea_event+0x352>
                label_data->sel_start = ta->sel_end;
 802c9da:	63f2      	str	r2, [r6, #60]	; 0x3c
                label_data->sel_end   = ta->sel_start;
 802c9dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c9de:	6433      	str	r3, [r6, #64]	; 0x40
                lv_obj_invalidate(obj);
 802c9e0:	4620      	mov	r0, r4
 802c9e2:	f7db fe2b 	bl	800863c <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 802c9e6:	2d03      	cmp	r5, #3
 802c9e8:	d002      	beq.n	802c9f0 <lv_textarea_event+0x35c>
 802c9ea:	2d08      	cmp	r5, #8
 802c9ec:	f47f ae5b 	bne.w	802c6a6 <lv_textarea_event+0x12>
            ta->text_sel_in_prog = 0;
 802c9f0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802c9f4:	f36f 0300 	bfc	r3, #0, #1
 802c9f8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 802c9fc:	e653      	b.n	802c6a6 <lv_textarea_event+0x12>
            ta->sel_end = char_id_at_click;
 802c9fe:	65e7      	str	r7, [r4, #92]	; 0x5c
 802ca00:	e7d7      	b.n	802c9b2 <lv_textarea_event+0x31e>
        else if(ta->sel_start < ta->sel_end) {
 802ca02:	4293      	cmp	r3, r2
 802ca04:	d20c      	bcs.n	802ca20 <lv_textarea_event+0x38c>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 802ca06:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 802ca08:	428b      	cmp	r3, r1
 802ca0a:	d102      	bne.n	802ca12 <lv_textarea_event+0x37e>
 802ca0c:	6c31      	ldr	r1, [r6, #64]	; 0x40
 802ca0e:	428a      	cmp	r2, r1
 802ca10:	d0e9      	beq.n	802c9e6 <lv_textarea_event+0x352>
                label_data->sel_start = ta->sel_start;
 802ca12:	63f3      	str	r3, [r6, #60]	; 0x3c
                label_data->sel_end   = ta->sel_end;
 802ca14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 802ca16:	6433      	str	r3, [r6, #64]	; 0x40
                lv_obj_invalidate(obj);
 802ca18:	4620      	mov	r0, r4
 802ca1a:	f7db fe0f 	bl	800863c <lv_obj_invalidate>
 802ca1e:	e7e2      	b.n	802c9e6 <lv_textarea_event+0x352>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 802ca20:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 802ca22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802ca26:	429a      	cmp	r2, r3
 802ca28:	d102      	bne.n	802ca30 <lv_textarea_event+0x39c>
 802ca2a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 802ca2c:	429a      	cmp	r2, r3
 802ca2e:	d0da      	beq.n	802c9e6 <lv_textarea_event+0x352>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 802ca30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802ca34:	63f3      	str	r3, [r6, #60]	; 0x3c
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 802ca36:	6433      	str	r3, [r6, #64]	; 0x40
                lv_obj_invalidate(obj);
 802ca38:	4620      	mov	r0, r4
 802ca3a:	f7db fdff 	bl	800863c <lv_obj_invalidate>
 802ca3e:	e7d2      	b.n	802c9e6 <lv_textarea_event+0x352>
    lv_obj_t * obj = lv_event_get_target(e);
 802ca40:	4628      	mov	r0, r5
 802ca42:	f7d7 fce1 	bl	8004408 <lv_event_get_target>
 802ca46:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 802ca48:	4628      	mov	r0, r5
 802ca4a:	f7d7 fd51 	bl	80044f0 <lv_event_get_draw_ctx>
 802ca4e:	4605      	mov	r5, r0
    const char * txt = lv_label_get_text(ta->label);
 802ca50:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802ca52:	f7fb fde3 	bl	802861c <lv_label_get_text>
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 802ca56:	7803      	ldrb	r3, [r0, #0]
 802ca58:	2b00      	cmp	r3, #0
 802ca5a:	f47f ae24 	bne.w	802c6a6 <lv_textarea_event+0x12>
 802ca5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802ca60:	2b00      	cmp	r3, #0
 802ca62:	f43f ae20 	beq.w	802c6a6 <lv_textarea_event+0x12>
 802ca66:	781b      	ldrb	r3, [r3, #0]
 802ca68:	2b00      	cmp	r3, #0
 802ca6a:	f43f ae1c 	beq.w	802c6a6 <lv_textarea_event+0x12>
        lv_draw_label_dsc_init(&ph_dsc);
 802ca6e:	a80e      	add	r0, sp, #56	; 0x38
 802ca70:	f7e1 f920 	bl	800dcb4 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 802ca74:	aa0e      	add	r2, sp, #56	; 0x38
 802ca76:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 802ca7a:	4620      	mov	r0, r4
 802ca7c:	f7da ffc5 	bl	8007a0a <lv_obj_init_draw_label_dsc>
        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 802ca80:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 802ca84:	f013 0f08 	tst.w	r3, #8
 802ca88:	d005      	beq.n	802ca96 <lv_textarea_event+0x402>
 802ca8a:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
 802ca8e:	f043 0302 	orr.w	r3, r3, #2
 802ca92:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802ca96:	2212      	movs	r2, #18
 802ca98:	2100      	movs	r1, #0
 802ca9a:	4620      	mov	r0, r4
 802ca9c:	f7de fa06 	bl	800aeac <lv_obj_get_style_prop>
 802caa0:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802caa2:	2210      	movs	r2, #16
 802caa4:	2100      	movs	r1, #0
 802caa6:	4620      	mov	r0, r4
 802caa8:	f7de fa00 	bl	800aeac <lv_obj_get_style_prop>
 802caac:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 802caae:	2232      	movs	r2, #50	; 0x32
 802cab0:	2100      	movs	r1, #0
 802cab2:	4620      	mov	r0, r4
 802cab4:	f7de f9fa 	bl	800aeac <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 802cab8:	8aa3      	ldrh	r3, [r4, #20]
 802caba:	f8ad 3018 	strh.w	r3, [sp, #24]
    dest->y1 = src->y1;
 802cabe:	8ae3      	ldrh	r3, [r4, #22]
 802cac0:	f8ad 301a 	strh.w	r3, [sp, #26]
    dest->x2 = src->x2;
 802cac4:	8b23      	ldrh	r3, [r4, #24]
 802cac6:	f8ad 301c 	strh.w	r3, [sp, #28]
    dest->y2 = src->y2;
 802caca:	8b63      	ldrh	r3, [r4, #26]
 802cacc:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 802cad0:	b283      	uxth	r3, r0
 802cad2:	199a      	adds	r2, r3, r6
 802cad4:	443b      	add	r3, r7
 802cad6:	b212      	sxth	r2, r2
 802cad8:	b219      	sxth	r1, r3
 802cada:	a806      	add	r0, sp, #24
 802cadc:	f7f4 fb02 	bl	80210e4 <lv_area_move>
        lv_draw_label(draw_ctx, &ph_dsc, &ph_coords, ta->placeholder_txt, NULL);
 802cae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802cae2:	2200      	movs	r2, #0
 802cae4:	9200      	str	r2, [sp, #0]
 802cae6:	aa06      	add	r2, sp, #24
 802cae8:	a90e      	add	r1, sp, #56	; 0x38
 802caea:	4628      	mov	r0, r5
 802caec:	f7e1 f916 	bl	800dd1c <lv_draw_label>
 802caf0:	e5d9      	b.n	802c6a6 <lv_textarea_event+0x12>
 802caf2:	bf00      	nop

0802caf4 <__errno>:
 802caf4:	4b01      	ldr	r3, [pc, #4]	; (802cafc <__errno+0x8>)
 802caf6:	6818      	ldr	r0, [r3, #0]
 802caf8:	4770      	bx	lr
 802cafa:	bf00      	nop
 802cafc:	2000079c 	.word	0x2000079c

0802cb00 <__libc_init_array>:
 802cb00:	b570      	push	{r4, r5, r6, lr}
 802cb02:	2600      	movs	r6, #0
 802cb04:	4d0c      	ldr	r5, [pc, #48]	; (802cb38 <__libc_init_array+0x38>)
 802cb06:	4c0d      	ldr	r4, [pc, #52]	; (802cb3c <__libc_init_array+0x3c>)
 802cb08:	1b64      	subs	r4, r4, r5
 802cb0a:	10a4      	asrs	r4, r4, #2
 802cb0c:	42a6      	cmp	r6, r4
 802cb0e:	d109      	bne.n	802cb24 <__libc_init_array+0x24>
 802cb10:	f000 fcb8 	bl	802d484 <_init>
 802cb14:	2600      	movs	r6, #0
 802cb16:	4d0a      	ldr	r5, [pc, #40]	; (802cb40 <__libc_init_array+0x40>)
 802cb18:	4c0a      	ldr	r4, [pc, #40]	; (802cb44 <__libc_init_array+0x44>)
 802cb1a:	1b64      	subs	r4, r4, r5
 802cb1c:	10a4      	asrs	r4, r4, #2
 802cb1e:	42a6      	cmp	r6, r4
 802cb20:	d105      	bne.n	802cb2e <__libc_init_array+0x2e>
 802cb22:	bd70      	pop	{r4, r5, r6, pc}
 802cb24:	f855 3b04 	ldr.w	r3, [r5], #4
 802cb28:	4798      	blx	r3
 802cb2a:	3601      	adds	r6, #1
 802cb2c:	e7ee      	b.n	802cb0c <__libc_init_array+0xc>
 802cb2e:	f855 3b04 	ldr.w	r3, [r5], #4
 802cb32:	4798      	blx	r3
 802cb34:	3601      	adds	r6, #1
 802cb36:	e7f2      	b.n	802cb1e <__libc_init_array+0x1e>
 802cb38:	08033890 	.word	0x08033890
 802cb3c:	08033890 	.word	0x08033890
 802cb40:	08033890 	.word	0x08033890
 802cb44:	08033894 	.word	0x08033894

0802cb48 <memcpy>:
 802cb48:	440a      	add	r2, r1
 802cb4a:	4291      	cmp	r1, r2
 802cb4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 802cb50:	d100      	bne.n	802cb54 <memcpy+0xc>
 802cb52:	4770      	bx	lr
 802cb54:	b510      	push	{r4, lr}
 802cb56:	f811 4b01 	ldrb.w	r4, [r1], #1
 802cb5a:	4291      	cmp	r1, r2
 802cb5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802cb60:	d1f9      	bne.n	802cb56 <memcpy+0xe>
 802cb62:	bd10      	pop	{r4, pc}

0802cb64 <memmove>:
 802cb64:	4288      	cmp	r0, r1
 802cb66:	b510      	push	{r4, lr}
 802cb68:	eb01 0402 	add.w	r4, r1, r2
 802cb6c:	d902      	bls.n	802cb74 <memmove+0x10>
 802cb6e:	4284      	cmp	r4, r0
 802cb70:	4623      	mov	r3, r4
 802cb72:	d807      	bhi.n	802cb84 <memmove+0x20>
 802cb74:	1e43      	subs	r3, r0, #1
 802cb76:	42a1      	cmp	r1, r4
 802cb78:	d008      	beq.n	802cb8c <memmove+0x28>
 802cb7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802cb7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802cb82:	e7f8      	b.n	802cb76 <memmove+0x12>
 802cb84:	4601      	mov	r1, r0
 802cb86:	4402      	add	r2, r0
 802cb88:	428a      	cmp	r2, r1
 802cb8a:	d100      	bne.n	802cb8e <memmove+0x2a>
 802cb8c:	bd10      	pop	{r4, pc}
 802cb8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802cb92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802cb96:	e7f7      	b.n	802cb88 <memmove+0x24>

0802cb98 <memset>:
 802cb98:	4603      	mov	r3, r0
 802cb9a:	4402      	add	r2, r0
 802cb9c:	4293      	cmp	r3, r2
 802cb9e:	d100      	bne.n	802cba2 <memset+0xa>
 802cba0:	4770      	bx	lr
 802cba2:	f803 1b01 	strb.w	r1, [r3], #1
 802cba6:	e7f9      	b.n	802cb9c <memset+0x4>

0802cba8 <_printf_common>:
 802cba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cbac:	4616      	mov	r6, r2
 802cbae:	4699      	mov	r9, r3
 802cbb0:	688a      	ldr	r2, [r1, #8]
 802cbb2:	690b      	ldr	r3, [r1, #16]
 802cbb4:	4607      	mov	r7, r0
 802cbb6:	4293      	cmp	r3, r2
 802cbb8:	bfb8      	it	lt
 802cbba:	4613      	movlt	r3, r2
 802cbbc:	6033      	str	r3, [r6, #0]
 802cbbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802cbc2:	460c      	mov	r4, r1
 802cbc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802cbc8:	b10a      	cbz	r2, 802cbce <_printf_common+0x26>
 802cbca:	3301      	adds	r3, #1
 802cbcc:	6033      	str	r3, [r6, #0]
 802cbce:	6823      	ldr	r3, [r4, #0]
 802cbd0:	0699      	lsls	r1, r3, #26
 802cbd2:	bf42      	ittt	mi
 802cbd4:	6833      	ldrmi	r3, [r6, #0]
 802cbd6:	3302      	addmi	r3, #2
 802cbd8:	6033      	strmi	r3, [r6, #0]
 802cbda:	6825      	ldr	r5, [r4, #0]
 802cbdc:	f015 0506 	ands.w	r5, r5, #6
 802cbe0:	d106      	bne.n	802cbf0 <_printf_common+0x48>
 802cbe2:	f104 0a19 	add.w	sl, r4, #25
 802cbe6:	68e3      	ldr	r3, [r4, #12]
 802cbe8:	6832      	ldr	r2, [r6, #0]
 802cbea:	1a9b      	subs	r3, r3, r2
 802cbec:	42ab      	cmp	r3, r5
 802cbee:	dc28      	bgt.n	802cc42 <_printf_common+0x9a>
 802cbf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cbf4:	1e13      	subs	r3, r2, #0
 802cbf6:	6822      	ldr	r2, [r4, #0]
 802cbf8:	bf18      	it	ne
 802cbfa:	2301      	movne	r3, #1
 802cbfc:	0692      	lsls	r2, r2, #26
 802cbfe:	d42d      	bmi.n	802cc5c <_printf_common+0xb4>
 802cc00:	4649      	mov	r1, r9
 802cc02:	4638      	mov	r0, r7
 802cc04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cc08:	47c0      	blx	r8
 802cc0a:	3001      	adds	r0, #1
 802cc0c:	d020      	beq.n	802cc50 <_printf_common+0xa8>
 802cc0e:	6823      	ldr	r3, [r4, #0]
 802cc10:	68e5      	ldr	r5, [r4, #12]
 802cc12:	f003 0306 	and.w	r3, r3, #6
 802cc16:	2b04      	cmp	r3, #4
 802cc18:	bf18      	it	ne
 802cc1a:	2500      	movne	r5, #0
 802cc1c:	6832      	ldr	r2, [r6, #0]
 802cc1e:	f04f 0600 	mov.w	r6, #0
 802cc22:	68a3      	ldr	r3, [r4, #8]
 802cc24:	bf08      	it	eq
 802cc26:	1aad      	subeq	r5, r5, r2
 802cc28:	6922      	ldr	r2, [r4, #16]
 802cc2a:	bf08      	it	eq
 802cc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cc30:	4293      	cmp	r3, r2
 802cc32:	bfc4      	itt	gt
 802cc34:	1a9b      	subgt	r3, r3, r2
 802cc36:	18ed      	addgt	r5, r5, r3
 802cc38:	341a      	adds	r4, #26
 802cc3a:	42b5      	cmp	r5, r6
 802cc3c:	d11a      	bne.n	802cc74 <_printf_common+0xcc>
 802cc3e:	2000      	movs	r0, #0
 802cc40:	e008      	b.n	802cc54 <_printf_common+0xac>
 802cc42:	2301      	movs	r3, #1
 802cc44:	4652      	mov	r2, sl
 802cc46:	4649      	mov	r1, r9
 802cc48:	4638      	mov	r0, r7
 802cc4a:	47c0      	blx	r8
 802cc4c:	3001      	adds	r0, #1
 802cc4e:	d103      	bne.n	802cc58 <_printf_common+0xb0>
 802cc50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802cc54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cc58:	3501      	adds	r5, #1
 802cc5a:	e7c4      	b.n	802cbe6 <_printf_common+0x3e>
 802cc5c:	2030      	movs	r0, #48	; 0x30
 802cc5e:	18e1      	adds	r1, r4, r3
 802cc60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cc64:	1c5a      	adds	r2, r3, #1
 802cc66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cc6a:	4422      	add	r2, r4
 802cc6c:	3302      	adds	r3, #2
 802cc6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cc72:	e7c5      	b.n	802cc00 <_printf_common+0x58>
 802cc74:	2301      	movs	r3, #1
 802cc76:	4622      	mov	r2, r4
 802cc78:	4649      	mov	r1, r9
 802cc7a:	4638      	mov	r0, r7
 802cc7c:	47c0      	blx	r8
 802cc7e:	3001      	adds	r0, #1
 802cc80:	d0e6      	beq.n	802cc50 <_printf_common+0xa8>
 802cc82:	3601      	adds	r6, #1
 802cc84:	e7d9      	b.n	802cc3a <_printf_common+0x92>
	...

0802cc88 <_printf_i>:
 802cc88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cc8c:	7e0f      	ldrb	r7, [r1, #24]
 802cc8e:	4691      	mov	r9, r2
 802cc90:	2f78      	cmp	r7, #120	; 0x78
 802cc92:	4680      	mov	r8, r0
 802cc94:	460c      	mov	r4, r1
 802cc96:	469a      	mov	sl, r3
 802cc98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802cc9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802cc9e:	d807      	bhi.n	802ccb0 <_printf_i+0x28>
 802cca0:	2f62      	cmp	r7, #98	; 0x62
 802cca2:	d80a      	bhi.n	802ccba <_printf_i+0x32>
 802cca4:	2f00      	cmp	r7, #0
 802cca6:	f000 80d9 	beq.w	802ce5c <_printf_i+0x1d4>
 802ccaa:	2f58      	cmp	r7, #88	; 0x58
 802ccac:	f000 80a4 	beq.w	802cdf8 <_printf_i+0x170>
 802ccb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ccb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ccb8:	e03a      	b.n	802cd30 <_printf_i+0xa8>
 802ccba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ccbe:	2b15      	cmp	r3, #21
 802ccc0:	d8f6      	bhi.n	802ccb0 <_printf_i+0x28>
 802ccc2:	a101      	add	r1, pc, #4	; (adr r1, 802ccc8 <_printf_i+0x40>)
 802ccc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ccc8:	0802cd21 	.word	0x0802cd21
 802cccc:	0802cd35 	.word	0x0802cd35
 802ccd0:	0802ccb1 	.word	0x0802ccb1
 802ccd4:	0802ccb1 	.word	0x0802ccb1
 802ccd8:	0802ccb1 	.word	0x0802ccb1
 802ccdc:	0802ccb1 	.word	0x0802ccb1
 802cce0:	0802cd35 	.word	0x0802cd35
 802cce4:	0802ccb1 	.word	0x0802ccb1
 802cce8:	0802ccb1 	.word	0x0802ccb1
 802ccec:	0802ccb1 	.word	0x0802ccb1
 802ccf0:	0802ccb1 	.word	0x0802ccb1
 802ccf4:	0802ce43 	.word	0x0802ce43
 802ccf8:	0802cd65 	.word	0x0802cd65
 802ccfc:	0802ce25 	.word	0x0802ce25
 802cd00:	0802ccb1 	.word	0x0802ccb1
 802cd04:	0802ccb1 	.word	0x0802ccb1
 802cd08:	0802ce65 	.word	0x0802ce65
 802cd0c:	0802ccb1 	.word	0x0802ccb1
 802cd10:	0802cd65 	.word	0x0802cd65
 802cd14:	0802ccb1 	.word	0x0802ccb1
 802cd18:	0802ccb1 	.word	0x0802ccb1
 802cd1c:	0802ce2d 	.word	0x0802ce2d
 802cd20:	682b      	ldr	r3, [r5, #0]
 802cd22:	1d1a      	adds	r2, r3, #4
 802cd24:	681b      	ldr	r3, [r3, #0]
 802cd26:	602a      	str	r2, [r5, #0]
 802cd28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cd2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802cd30:	2301      	movs	r3, #1
 802cd32:	e0a4      	b.n	802ce7e <_printf_i+0x1f6>
 802cd34:	6820      	ldr	r0, [r4, #0]
 802cd36:	6829      	ldr	r1, [r5, #0]
 802cd38:	0606      	lsls	r6, r0, #24
 802cd3a:	f101 0304 	add.w	r3, r1, #4
 802cd3e:	d50a      	bpl.n	802cd56 <_printf_i+0xce>
 802cd40:	680e      	ldr	r6, [r1, #0]
 802cd42:	602b      	str	r3, [r5, #0]
 802cd44:	2e00      	cmp	r6, #0
 802cd46:	da03      	bge.n	802cd50 <_printf_i+0xc8>
 802cd48:	232d      	movs	r3, #45	; 0x2d
 802cd4a:	4276      	negs	r6, r6
 802cd4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cd50:	230a      	movs	r3, #10
 802cd52:	485e      	ldr	r0, [pc, #376]	; (802cecc <_printf_i+0x244>)
 802cd54:	e019      	b.n	802cd8a <_printf_i+0x102>
 802cd56:	680e      	ldr	r6, [r1, #0]
 802cd58:	f010 0f40 	tst.w	r0, #64	; 0x40
 802cd5c:	602b      	str	r3, [r5, #0]
 802cd5e:	bf18      	it	ne
 802cd60:	b236      	sxthne	r6, r6
 802cd62:	e7ef      	b.n	802cd44 <_printf_i+0xbc>
 802cd64:	682b      	ldr	r3, [r5, #0]
 802cd66:	6820      	ldr	r0, [r4, #0]
 802cd68:	1d19      	adds	r1, r3, #4
 802cd6a:	6029      	str	r1, [r5, #0]
 802cd6c:	0601      	lsls	r1, r0, #24
 802cd6e:	d501      	bpl.n	802cd74 <_printf_i+0xec>
 802cd70:	681e      	ldr	r6, [r3, #0]
 802cd72:	e002      	b.n	802cd7a <_printf_i+0xf2>
 802cd74:	0646      	lsls	r6, r0, #25
 802cd76:	d5fb      	bpl.n	802cd70 <_printf_i+0xe8>
 802cd78:	881e      	ldrh	r6, [r3, #0]
 802cd7a:	2f6f      	cmp	r7, #111	; 0x6f
 802cd7c:	bf0c      	ite	eq
 802cd7e:	2308      	moveq	r3, #8
 802cd80:	230a      	movne	r3, #10
 802cd82:	4852      	ldr	r0, [pc, #328]	; (802cecc <_printf_i+0x244>)
 802cd84:	2100      	movs	r1, #0
 802cd86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802cd8a:	6865      	ldr	r5, [r4, #4]
 802cd8c:	2d00      	cmp	r5, #0
 802cd8e:	bfa8      	it	ge
 802cd90:	6821      	ldrge	r1, [r4, #0]
 802cd92:	60a5      	str	r5, [r4, #8]
 802cd94:	bfa4      	itt	ge
 802cd96:	f021 0104 	bicge.w	r1, r1, #4
 802cd9a:	6021      	strge	r1, [r4, #0]
 802cd9c:	b90e      	cbnz	r6, 802cda2 <_printf_i+0x11a>
 802cd9e:	2d00      	cmp	r5, #0
 802cda0:	d04d      	beq.n	802ce3e <_printf_i+0x1b6>
 802cda2:	4615      	mov	r5, r2
 802cda4:	fbb6 f1f3 	udiv	r1, r6, r3
 802cda8:	fb03 6711 	mls	r7, r3, r1, r6
 802cdac:	5dc7      	ldrb	r7, [r0, r7]
 802cdae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802cdb2:	4637      	mov	r7, r6
 802cdb4:	42bb      	cmp	r3, r7
 802cdb6:	460e      	mov	r6, r1
 802cdb8:	d9f4      	bls.n	802cda4 <_printf_i+0x11c>
 802cdba:	2b08      	cmp	r3, #8
 802cdbc:	d10b      	bne.n	802cdd6 <_printf_i+0x14e>
 802cdbe:	6823      	ldr	r3, [r4, #0]
 802cdc0:	07de      	lsls	r6, r3, #31
 802cdc2:	d508      	bpl.n	802cdd6 <_printf_i+0x14e>
 802cdc4:	6923      	ldr	r3, [r4, #16]
 802cdc6:	6861      	ldr	r1, [r4, #4]
 802cdc8:	4299      	cmp	r1, r3
 802cdca:	bfde      	ittt	le
 802cdcc:	2330      	movle	r3, #48	; 0x30
 802cdce:	f805 3c01 	strble.w	r3, [r5, #-1]
 802cdd2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802cdd6:	1b52      	subs	r2, r2, r5
 802cdd8:	6122      	str	r2, [r4, #16]
 802cdda:	464b      	mov	r3, r9
 802cddc:	4621      	mov	r1, r4
 802cdde:	4640      	mov	r0, r8
 802cde0:	f8cd a000 	str.w	sl, [sp]
 802cde4:	aa03      	add	r2, sp, #12
 802cde6:	f7ff fedf 	bl	802cba8 <_printf_common>
 802cdea:	3001      	adds	r0, #1
 802cdec:	d14c      	bne.n	802ce88 <_printf_i+0x200>
 802cdee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802cdf2:	b004      	add	sp, #16
 802cdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cdf8:	4834      	ldr	r0, [pc, #208]	; (802cecc <_printf_i+0x244>)
 802cdfa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802cdfe:	6829      	ldr	r1, [r5, #0]
 802ce00:	6823      	ldr	r3, [r4, #0]
 802ce02:	f851 6b04 	ldr.w	r6, [r1], #4
 802ce06:	6029      	str	r1, [r5, #0]
 802ce08:	061d      	lsls	r5, r3, #24
 802ce0a:	d514      	bpl.n	802ce36 <_printf_i+0x1ae>
 802ce0c:	07df      	lsls	r7, r3, #31
 802ce0e:	bf44      	itt	mi
 802ce10:	f043 0320 	orrmi.w	r3, r3, #32
 802ce14:	6023      	strmi	r3, [r4, #0]
 802ce16:	b91e      	cbnz	r6, 802ce20 <_printf_i+0x198>
 802ce18:	6823      	ldr	r3, [r4, #0]
 802ce1a:	f023 0320 	bic.w	r3, r3, #32
 802ce1e:	6023      	str	r3, [r4, #0]
 802ce20:	2310      	movs	r3, #16
 802ce22:	e7af      	b.n	802cd84 <_printf_i+0xfc>
 802ce24:	6823      	ldr	r3, [r4, #0]
 802ce26:	f043 0320 	orr.w	r3, r3, #32
 802ce2a:	6023      	str	r3, [r4, #0]
 802ce2c:	2378      	movs	r3, #120	; 0x78
 802ce2e:	4828      	ldr	r0, [pc, #160]	; (802ced0 <_printf_i+0x248>)
 802ce30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ce34:	e7e3      	b.n	802cdfe <_printf_i+0x176>
 802ce36:	0659      	lsls	r1, r3, #25
 802ce38:	bf48      	it	mi
 802ce3a:	b2b6      	uxthmi	r6, r6
 802ce3c:	e7e6      	b.n	802ce0c <_printf_i+0x184>
 802ce3e:	4615      	mov	r5, r2
 802ce40:	e7bb      	b.n	802cdba <_printf_i+0x132>
 802ce42:	682b      	ldr	r3, [r5, #0]
 802ce44:	6826      	ldr	r6, [r4, #0]
 802ce46:	1d18      	adds	r0, r3, #4
 802ce48:	6961      	ldr	r1, [r4, #20]
 802ce4a:	6028      	str	r0, [r5, #0]
 802ce4c:	0635      	lsls	r5, r6, #24
 802ce4e:	681b      	ldr	r3, [r3, #0]
 802ce50:	d501      	bpl.n	802ce56 <_printf_i+0x1ce>
 802ce52:	6019      	str	r1, [r3, #0]
 802ce54:	e002      	b.n	802ce5c <_printf_i+0x1d4>
 802ce56:	0670      	lsls	r0, r6, #25
 802ce58:	d5fb      	bpl.n	802ce52 <_printf_i+0x1ca>
 802ce5a:	8019      	strh	r1, [r3, #0]
 802ce5c:	2300      	movs	r3, #0
 802ce5e:	4615      	mov	r5, r2
 802ce60:	6123      	str	r3, [r4, #16]
 802ce62:	e7ba      	b.n	802cdda <_printf_i+0x152>
 802ce64:	682b      	ldr	r3, [r5, #0]
 802ce66:	2100      	movs	r1, #0
 802ce68:	1d1a      	adds	r2, r3, #4
 802ce6a:	602a      	str	r2, [r5, #0]
 802ce6c:	681d      	ldr	r5, [r3, #0]
 802ce6e:	6862      	ldr	r2, [r4, #4]
 802ce70:	4628      	mov	r0, r5
 802ce72:	f000 f86f 	bl	802cf54 <memchr>
 802ce76:	b108      	cbz	r0, 802ce7c <_printf_i+0x1f4>
 802ce78:	1b40      	subs	r0, r0, r5
 802ce7a:	6060      	str	r0, [r4, #4]
 802ce7c:	6863      	ldr	r3, [r4, #4]
 802ce7e:	6123      	str	r3, [r4, #16]
 802ce80:	2300      	movs	r3, #0
 802ce82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ce86:	e7a8      	b.n	802cdda <_printf_i+0x152>
 802ce88:	462a      	mov	r2, r5
 802ce8a:	4649      	mov	r1, r9
 802ce8c:	4640      	mov	r0, r8
 802ce8e:	6923      	ldr	r3, [r4, #16]
 802ce90:	47d0      	blx	sl
 802ce92:	3001      	adds	r0, #1
 802ce94:	d0ab      	beq.n	802cdee <_printf_i+0x166>
 802ce96:	6823      	ldr	r3, [r4, #0]
 802ce98:	079b      	lsls	r3, r3, #30
 802ce9a:	d413      	bmi.n	802cec4 <_printf_i+0x23c>
 802ce9c:	68e0      	ldr	r0, [r4, #12]
 802ce9e:	9b03      	ldr	r3, [sp, #12]
 802cea0:	4298      	cmp	r0, r3
 802cea2:	bfb8      	it	lt
 802cea4:	4618      	movlt	r0, r3
 802cea6:	e7a4      	b.n	802cdf2 <_printf_i+0x16a>
 802cea8:	2301      	movs	r3, #1
 802ceaa:	4632      	mov	r2, r6
 802ceac:	4649      	mov	r1, r9
 802ceae:	4640      	mov	r0, r8
 802ceb0:	47d0      	blx	sl
 802ceb2:	3001      	adds	r0, #1
 802ceb4:	d09b      	beq.n	802cdee <_printf_i+0x166>
 802ceb6:	3501      	adds	r5, #1
 802ceb8:	68e3      	ldr	r3, [r4, #12]
 802ceba:	9903      	ldr	r1, [sp, #12]
 802cebc:	1a5b      	subs	r3, r3, r1
 802cebe:	42ab      	cmp	r3, r5
 802cec0:	dcf2      	bgt.n	802cea8 <_printf_i+0x220>
 802cec2:	e7eb      	b.n	802ce9c <_printf_i+0x214>
 802cec4:	2500      	movs	r5, #0
 802cec6:	f104 0619 	add.w	r6, r4, #25
 802ceca:	e7f5      	b.n	802ceb8 <_printf_i+0x230>
 802cecc:	080337f0 	.word	0x080337f0
 802ced0:	08033801 	.word	0x08033801

0802ced4 <siprintf>:
 802ced4:	b40e      	push	{r1, r2, r3}
 802ced6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802ceda:	b500      	push	{lr}
 802cedc:	b09c      	sub	sp, #112	; 0x70
 802cede:	ab1d      	add	r3, sp, #116	; 0x74
 802cee0:	9002      	str	r0, [sp, #8]
 802cee2:	9006      	str	r0, [sp, #24]
 802cee4:	9107      	str	r1, [sp, #28]
 802cee6:	9104      	str	r1, [sp, #16]
 802cee8:	4808      	ldr	r0, [pc, #32]	; (802cf0c <siprintf+0x38>)
 802ceea:	4909      	ldr	r1, [pc, #36]	; (802cf10 <siprintf+0x3c>)
 802ceec:	f853 2b04 	ldr.w	r2, [r3], #4
 802cef0:	9105      	str	r1, [sp, #20]
 802cef2:	6800      	ldr	r0, [r0, #0]
 802cef4:	a902      	add	r1, sp, #8
 802cef6:	9301      	str	r3, [sp, #4]
 802cef8:	f000 f9a0 	bl	802d23c <_svfiprintf_r>
 802cefc:	2200      	movs	r2, #0
 802cefe:	9b02      	ldr	r3, [sp, #8]
 802cf00:	701a      	strb	r2, [r3, #0]
 802cf02:	b01c      	add	sp, #112	; 0x70
 802cf04:	f85d eb04 	ldr.w	lr, [sp], #4
 802cf08:	b003      	add	sp, #12
 802cf0a:	4770      	bx	lr
 802cf0c:	2000079c 	.word	0x2000079c
 802cf10:	ffff0208 	.word	0xffff0208

0802cf14 <strcpy>:
 802cf14:	4603      	mov	r3, r0
 802cf16:	f811 2b01 	ldrb.w	r2, [r1], #1
 802cf1a:	f803 2b01 	strb.w	r2, [r3], #1
 802cf1e:	2a00      	cmp	r2, #0
 802cf20:	d1f9      	bne.n	802cf16 <strcpy+0x2>
 802cf22:	4770      	bx	lr

0802cf24 <strstr>:
 802cf24:	780a      	ldrb	r2, [r1, #0]
 802cf26:	b570      	push	{r4, r5, r6, lr}
 802cf28:	b96a      	cbnz	r2, 802cf46 <strstr+0x22>
 802cf2a:	bd70      	pop	{r4, r5, r6, pc}
 802cf2c:	429a      	cmp	r2, r3
 802cf2e:	d109      	bne.n	802cf44 <strstr+0x20>
 802cf30:	460c      	mov	r4, r1
 802cf32:	4605      	mov	r5, r0
 802cf34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802cf38:	2b00      	cmp	r3, #0
 802cf3a:	d0f6      	beq.n	802cf2a <strstr+0x6>
 802cf3c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802cf40:	429e      	cmp	r6, r3
 802cf42:	d0f7      	beq.n	802cf34 <strstr+0x10>
 802cf44:	3001      	adds	r0, #1
 802cf46:	7803      	ldrb	r3, [r0, #0]
 802cf48:	2b00      	cmp	r3, #0
 802cf4a:	d1ef      	bne.n	802cf2c <strstr+0x8>
 802cf4c:	4618      	mov	r0, r3
 802cf4e:	e7ec      	b.n	802cf2a <strstr+0x6>

0802cf50 <__retarget_lock_acquire_recursive>:
 802cf50:	4770      	bx	lr

0802cf52 <__retarget_lock_release_recursive>:
 802cf52:	4770      	bx	lr

0802cf54 <memchr>:
 802cf54:	4603      	mov	r3, r0
 802cf56:	b510      	push	{r4, lr}
 802cf58:	b2c9      	uxtb	r1, r1
 802cf5a:	4402      	add	r2, r0
 802cf5c:	4293      	cmp	r3, r2
 802cf5e:	4618      	mov	r0, r3
 802cf60:	d101      	bne.n	802cf66 <memchr+0x12>
 802cf62:	2000      	movs	r0, #0
 802cf64:	e003      	b.n	802cf6e <memchr+0x1a>
 802cf66:	7804      	ldrb	r4, [r0, #0]
 802cf68:	3301      	adds	r3, #1
 802cf6a:	428c      	cmp	r4, r1
 802cf6c:	d1f6      	bne.n	802cf5c <memchr+0x8>
 802cf6e:	bd10      	pop	{r4, pc}

0802cf70 <_free_r>:
 802cf70:	b538      	push	{r3, r4, r5, lr}
 802cf72:	4605      	mov	r5, r0
 802cf74:	2900      	cmp	r1, #0
 802cf76:	d040      	beq.n	802cffa <_free_r+0x8a>
 802cf78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cf7c:	1f0c      	subs	r4, r1, #4
 802cf7e:	2b00      	cmp	r3, #0
 802cf80:	bfb8      	it	lt
 802cf82:	18e4      	addlt	r4, r4, r3
 802cf84:	f000 fa6a 	bl	802d45c <__malloc_lock>
 802cf88:	4a1c      	ldr	r2, [pc, #112]	; (802cffc <_free_r+0x8c>)
 802cf8a:	6813      	ldr	r3, [r2, #0]
 802cf8c:	b933      	cbnz	r3, 802cf9c <_free_r+0x2c>
 802cf8e:	6063      	str	r3, [r4, #4]
 802cf90:	6014      	str	r4, [r2, #0]
 802cf92:	4628      	mov	r0, r5
 802cf94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cf98:	f000 ba66 	b.w	802d468 <__malloc_unlock>
 802cf9c:	42a3      	cmp	r3, r4
 802cf9e:	d908      	bls.n	802cfb2 <_free_r+0x42>
 802cfa0:	6820      	ldr	r0, [r4, #0]
 802cfa2:	1821      	adds	r1, r4, r0
 802cfa4:	428b      	cmp	r3, r1
 802cfa6:	bf01      	itttt	eq
 802cfa8:	6819      	ldreq	r1, [r3, #0]
 802cfaa:	685b      	ldreq	r3, [r3, #4]
 802cfac:	1809      	addeq	r1, r1, r0
 802cfae:	6021      	streq	r1, [r4, #0]
 802cfb0:	e7ed      	b.n	802cf8e <_free_r+0x1e>
 802cfb2:	461a      	mov	r2, r3
 802cfb4:	685b      	ldr	r3, [r3, #4]
 802cfb6:	b10b      	cbz	r3, 802cfbc <_free_r+0x4c>
 802cfb8:	42a3      	cmp	r3, r4
 802cfba:	d9fa      	bls.n	802cfb2 <_free_r+0x42>
 802cfbc:	6811      	ldr	r1, [r2, #0]
 802cfbe:	1850      	adds	r0, r2, r1
 802cfc0:	42a0      	cmp	r0, r4
 802cfc2:	d10b      	bne.n	802cfdc <_free_r+0x6c>
 802cfc4:	6820      	ldr	r0, [r4, #0]
 802cfc6:	4401      	add	r1, r0
 802cfc8:	1850      	adds	r0, r2, r1
 802cfca:	4283      	cmp	r3, r0
 802cfcc:	6011      	str	r1, [r2, #0]
 802cfce:	d1e0      	bne.n	802cf92 <_free_r+0x22>
 802cfd0:	6818      	ldr	r0, [r3, #0]
 802cfd2:	685b      	ldr	r3, [r3, #4]
 802cfd4:	4401      	add	r1, r0
 802cfd6:	6011      	str	r1, [r2, #0]
 802cfd8:	6053      	str	r3, [r2, #4]
 802cfda:	e7da      	b.n	802cf92 <_free_r+0x22>
 802cfdc:	d902      	bls.n	802cfe4 <_free_r+0x74>
 802cfde:	230c      	movs	r3, #12
 802cfe0:	602b      	str	r3, [r5, #0]
 802cfe2:	e7d6      	b.n	802cf92 <_free_r+0x22>
 802cfe4:	6820      	ldr	r0, [r4, #0]
 802cfe6:	1821      	adds	r1, r4, r0
 802cfe8:	428b      	cmp	r3, r1
 802cfea:	bf01      	itttt	eq
 802cfec:	6819      	ldreq	r1, [r3, #0]
 802cfee:	685b      	ldreq	r3, [r3, #4]
 802cff0:	1809      	addeq	r1, r1, r0
 802cff2:	6021      	streq	r1, [r4, #0]
 802cff4:	6063      	str	r3, [r4, #4]
 802cff6:	6054      	str	r4, [r2, #4]
 802cff8:	e7cb      	b.n	802cf92 <_free_r+0x22>
 802cffa:	bd38      	pop	{r3, r4, r5, pc}
 802cffc:	2000c244 	.word	0x2000c244

0802d000 <sbrk_aligned>:
 802d000:	b570      	push	{r4, r5, r6, lr}
 802d002:	4e0e      	ldr	r6, [pc, #56]	; (802d03c <sbrk_aligned+0x3c>)
 802d004:	460c      	mov	r4, r1
 802d006:	6831      	ldr	r1, [r6, #0]
 802d008:	4605      	mov	r5, r0
 802d00a:	b911      	cbnz	r1, 802d012 <sbrk_aligned+0x12>
 802d00c:	f000 fa16 	bl	802d43c <_sbrk_r>
 802d010:	6030      	str	r0, [r6, #0]
 802d012:	4621      	mov	r1, r4
 802d014:	4628      	mov	r0, r5
 802d016:	f000 fa11 	bl	802d43c <_sbrk_r>
 802d01a:	1c43      	adds	r3, r0, #1
 802d01c:	d00a      	beq.n	802d034 <sbrk_aligned+0x34>
 802d01e:	1cc4      	adds	r4, r0, #3
 802d020:	f024 0403 	bic.w	r4, r4, #3
 802d024:	42a0      	cmp	r0, r4
 802d026:	d007      	beq.n	802d038 <sbrk_aligned+0x38>
 802d028:	1a21      	subs	r1, r4, r0
 802d02a:	4628      	mov	r0, r5
 802d02c:	f000 fa06 	bl	802d43c <_sbrk_r>
 802d030:	3001      	adds	r0, #1
 802d032:	d101      	bne.n	802d038 <sbrk_aligned+0x38>
 802d034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 802d038:	4620      	mov	r0, r4
 802d03a:	bd70      	pop	{r4, r5, r6, pc}
 802d03c:	2000c248 	.word	0x2000c248

0802d040 <_malloc_r>:
 802d040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d044:	1ccd      	adds	r5, r1, #3
 802d046:	f025 0503 	bic.w	r5, r5, #3
 802d04a:	3508      	adds	r5, #8
 802d04c:	2d0c      	cmp	r5, #12
 802d04e:	bf38      	it	cc
 802d050:	250c      	movcc	r5, #12
 802d052:	2d00      	cmp	r5, #0
 802d054:	4607      	mov	r7, r0
 802d056:	db01      	blt.n	802d05c <_malloc_r+0x1c>
 802d058:	42a9      	cmp	r1, r5
 802d05a:	d905      	bls.n	802d068 <_malloc_r+0x28>
 802d05c:	230c      	movs	r3, #12
 802d05e:	2600      	movs	r6, #0
 802d060:	603b      	str	r3, [r7, #0]
 802d062:	4630      	mov	r0, r6
 802d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d068:	4e2e      	ldr	r6, [pc, #184]	; (802d124 <_malloc_r+0xe4>)
 802d06a:	f000 f9f7 	bl	802d45c <__malloc_lock>
 802d06e:	6833      	ldr	r3, [r6, #0]
 802d070:	461c      	mov	r4, r3
 802d072:	bb34      	cbnz	r4, 802d0c2 <_malloc_r+0x82>
 802d074:	4629      	mov	r1, r5
 802d076:	4638      	mov	r0, r7
 802d078:	f7ff ffc2 	bl	802d000 <sbrk_aligned>
 802d07c:	1c43      	adds	r3, r0, #1
 802d07e:	4604      	mov	r4, r0
 802d080:	d14d      	bne.n	802d11e <_malloc_r+0xde>
 802d082:	6834      	ldr	r4, [r6, #0]
 802d084:	4626      	mov	r6, r4
 802d086:	2e00      	cmp	r6, #0
 802d088:	d140      	bne.n	802d10c <_malloc_r+0xcc>
 802d08a:	6823      	ldr	r3, [r4, #0]
 802d08c:	4631      	mov	r1, r6
 802d08e:	4638      	mov	r0, r7
 802d090:	eb04 0803 	add.w	r8, r4, r3
 802d094:	f000 f9d2 	bl	802d43c <_sbrk_r>
 802d098:	4580      	cmp	r8, r0
 802d09a:	d13a      	bne.n	802d112 <_malloc_r+0xd2>
 802d09c:	6821      	ldr	r1, [r4, #0]
 802d09e:	3503      	adds	r5, #3
 802d0a0:	1a6d      	subs	r5, r5, r1
 802d0a2:	f025 0503 	bic.w	r5, r5, #3
 802d0a6:	3508      	adds	r5, #8
 802d0a8:	2d0c      	cmp	r5, #12
 802d0aa:	bf38      	it	cc
 802d0ac:	250c      	movcc	r5, #12
 802d0ae:	4638      	mov	r0, r7
 802d0b0:	4629      	mov	r1, r5
 802d0b2:	f7ff ffa5 	bl	802d000 <sbrk_aligned>
 802d0b6:	3001      	adds	r0, #1
 802d0b8:	d02b      	beq.n	802d112 <_malloc_r+0xd2>
 802d0ba:	6823      	ldr	r3, [r4, #0]
 802d0bc:	442b      	add	r3, r5
 802d0be:	6023      	str	r3, [r4, #0]
 802d0c0:	e00e      	b.n	802d0e0 <_malloc_r+0xa0>
 802d0c2:	6822      	ldr	r2, [r4, #0]
 802d0c4:	1b52      	subs	r2, r2, r5
 802d0c6:	d41e      	bmi.n	802d106 <_malloc_r+0xc6>
 802d0c8:	2a0b      	cmp	r2, #11
 802d0ca:	d916      	bls.n	802d0fa <_malloc_r+0xba>
 802d0cc:	1961      	adds	r1, r4, r5
 802d0ce:	42a3      	cmp	r3, r4
 802d0d0:	6025      	str	r5, [r4, #0]
 802d0d2:	bf18      	it	ne
 802d0d4:	6059      	strne	r1, [r3, #4]
 802d0d6:	6863      	ldr	r3, [r4, #4]
 802d0d8:	bf08      	it	eq
 802d0da:	6031      	streq	r1, [r6, #0]
 802d0dc:	5162      	str	r2, [r4, r5]
 802d0de:	604b      	str	r3, [r1, #4]
 802d0e0:	4638      	mov	r0, r7
 802d0e2:	f104 060b 	add.w	r6, r4, #11
 802d0e6:	f000 f9bf 	bl	802d468 <__malloc_unlock>
 802d0ea:	f026 0607 	bic.w	r6, r6, #7
 802d0ee:	1d23      	adds	r3, r4, #4
 802d0f0:	1af2      	subs	r2, r6, r3
 802d0f2:	d0b6      	beq.n	802d062 <_malloc_r+0x22>
 802d0f4:	1b9b      	subs	r3, r3, r6
 802d0f6:	50a3      	str	r3, [r4, r2]
 802d0f8:	e7b3      	b.n	802d062 <_malloc_r+0x22>
 802d0fa:	6862      	ldr	r2, [r4, #4]
 802d0fc:	42a3      	cmp	r3, r4
 802d0fe:	bf0c      	ite	eq
 802d100:	6032      	streq	r2, [r6, #0]
 802d102:	605a      	strne	r2, [r3, #4]
 802d104:	e7ec      	b.n	802d0e0 <_malloc_r+0xa0>
 802d106:	4623      	mov	r3, r4
 802d108:	6864      	ldr	r4, [r4, #4]
 802d10a:	e7b2      	b.n	802d072 <_malloc_r+0x32>
 802d10c:	4634      	mov	r4, r6
 802d10e:	6876      	ldr	r6, [r6, #4]
 802d110:	e7b9      	b.n	802d086 <_malloc_r+0x46>
 802d112:	230c      	movs	r3, #12
 802d114:	4638      	mov	r0, r7
 802d116:	603b      	str	r3, [r7, #0]
 802d118:	f000 f9a6 	bl	802d468 <__malloc_unlock>
 802d11c:	e7a1      	b.n	802d062 <_malloc_r+0x22>
 802d11e:	6025      	str	r5, [r4, #0]
 802d120:	e7de      	b.n	802d0e0 <_malloc_r+0xa0>
 802d122:	bf00      	nop
 802d124:	2000c244 	.word	0x2000c244

0802d128 <_realloc_r>:
 802d128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d12c:	4680      	mov	r8, r0
 802d12e:	4614      	mov	r4, r2
 802d130:	460e      	mov	r6, r1
 802d132:	b921      	cbnz	r1, 802d13e <_realloc_r+0x16>
 802d134:	4611      	mov	r1, r2
 802d136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d13a:	f7ff bf81 	b.w	802d040 <_malloc_r>
 802d13e:	b92a      	cbnz	r2, 802d14c <_realloc_r+0x24>
 802d140:	f7ff ff16 	bl	802cf70 <_free_r>
 802d144:	4625      	mov	r5, r4
 802d146:	4628      	mov	r0, r5
 802d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d14c:	f000 f992 	bl	802d474 <_malloc_usable_size_r>
 802d150:	4284      	cmp	r4, r0
 802d152:	4607      	mov	r7, r0
 802d154:	d802      	bhi.n	802d15c <_realloc_r+0x34>
 802d156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802d15a:	d812      	bhi.n	802d182 <_realloc_r+0x5a>
 802d15c:	4621      	mov	r1, r4
 802d15e:	4640      	mov	r0, r8
 802d160:	f7ff ff6e 	bl	802d040 <_malloc_r>
 802d164:	4605      	mov	r5, r0
 802d166:	2800      	cmp	r0, #0
 802d168:	d0ed      	beq.n	802d146 <_realloc_r+0x1e>
 802d16a:	42bc      	cmp	r4, r7
 802d16c:	4622      	mov	r2, r4
 802d16e:	4631      	mov	r1, r6
 802d170:	bf28      	it	cs
 802d172:	463a      	movcs	r2, r7
 802d174:	f7ff fce8 	bl	802cb48 <memcpy>
 802d178:	4631      	mov	r1, r6
 802d17a:	4640      	mov	r0, r8
 802d17c:	f7ff fef8 	bl	802cf70 <_free_r>
 802d180:	e7e1      	b.n	802d146 <_realloc_r+0x1e>
 802d182:	4635      	mov	r5, r6
 802d184:	e7df      	b.n	802d146 <_realloc_r+0x1e>

0802d186 <__ssputs_r>:
 802d186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d18a:	688e      	ldr	r6, [r1, #8]
 802d18c:	4682      	mov	sl, r0
 802d18e:	429e      	cmp	r6, r3
 802d190:	460c      	mov	r4, r1
 802d192:	4690      	mov	r8, r2
 802d194:	461f      	mov	r7, r3
 802d196:	d838      	bhi.n	802d20a <__ssputs_r+0x84>
 802d198:	898a      	ldrh	r2, [r1, #12]
 802d19a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802d19e:	d032      	beq.n	802d206 <__ssputs_r+0x80>
 802d1a0:	6825      	ldr	r5, [r4, #0]
 802d1a2:	6909      	ldr	r1, [r1, #16]
 802d1a4:	3301      	adds	r3, #1
 802d1a6:	eba5 0901 	sub.w	r9, r5, r1
 802d1aa:	6965      	ldr	r5, [r4, #20]
 802d1ac:	444b      	add	r3, r9
 802d1ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802d1b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802d1b6:	106d      	asrs	r5, r5, #1
 802d1b8:	429d      	cmp	r5, r3
 802d1ba:	bf38      	it	cc
 802d1bc:	461d      	movcc	r5, r3
 802d1be:	0553      	lsls	r3, r2, #21
 802d1c0:	d531      	bpl.n	802d226 <__ssputs_r+0xa0>
 802d1c2:	4629      	mov	r1, r5
 802d1c4:	f7ff ff3c 	bl	802d040 <_malloc_r>
 802d1c8:	4606      	mov	r6, r0
 802d1ca:	b950      	cbnz	r0, 802d1e2 <__ssputs_r+0x5c>
 802d1cc:	230c      	movs	r3, #12
 802d1ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802d1d2:	f8ca 3000 	str.w	r3, [sl]
 802d1d6:	89a3      	ldrh	r3, [r4, #12]
 802d1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d1dc:	81a3      	strh	r3, [r4, #12]
 802d1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d1e2:	464a      	mov	r2, r9
 802d1e4:	6921      	ldr	r1, [r4, #16]
 802d1e6:	f7ff fcaf 	bl	802cb48 <memcpy>
 802d1ea:	89a3      	ldrh	r3, [r4, #12]
 802d1ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802d1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d1f4:	81a3      	strh	r3, [r4, #12]
 802d1f6:	6126      	str	r6, [r4, #16]
 802d1f8:	444e      	add	r6, r9
 802d1fa:	6026      	str	r6, [r4, #0]
 802d1fc:	463e      	mov	r6, r7
 802d1fe:	6165      	str	r5, [r4, #20]
 802d200:	eba5 0509 	sub.w	r5, r5, r9
 802d204:	60a5      	str	r5, [r4, #8]
 802d206:	42be      	cmp	r6, r7
 802d208:	d900      	bls.n	802d20c <__ssputs_r+0x86>
 802d20a:	463e      	mov	r6, r7
 802d20c:	4632      	mov	r2, r6
 802d20e:	4641      	mov	r1, r8
 802d210:	6820      	ldr	r0, [r4, #0]
 802d212:	f7ff fca7 	bl	802cb64 <memmove>
 802d216:	68a3      	ldr	r3, [r4, #8]
 802d218:	2000      	movs	r0, #0
 802d21a:	1b9b      	subs	r3, r3, r6
 802d21c:	60a3      	str	r3, [r4, #8]
 802d21e:	6823      	ldr	r3, [r4, #0]
 802d220:	4433      	add	r3, r6
 802d222:	6023      	str	r3, [r4, #0]
 802d224:	e7db      	b.n	802d1de <__ssputs_r+0x58>
 802d226:	462a      	mov	r2, r5
 802d228:	f7ff ff7e 	bl	802d128 <_realloc_r>
 802d22c:	4606      	mov	r6, r0
 802d22e:	2800      	cmp	r0, #0
 802d230:	d1e1      	bne.n	802d1f6 <__ssputs_r+0x70>
 802d232:	4650      	mov	r0, sl
 802d234:	6921      	ldr	r1, [r4, #16]
 802d236:	f7ff fe9b 	bl	802cf70 <_free_r>
 802d23a:	e7c7      	b.n	802d1cc <__ssputs_r+0x46>

0802d23c <_svfiprintf_r>:
 802d23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d240:	4698      	mov	r8, r3
 802d242:	898b      	ldrh	r3, [r1, #12]
 802d244:	4607      	mov	r7, r0
 802d246:	061b      	lsls	r3, r3, #24
 802d248:	460d      	mov	r5, r1
 802d24a:	4614      	mov	r4, r2
 802d24c:	b09d      	sub	sp, #116	; 0x74
 802d24e:	d50e      	bpl.n	802d26e <_svfiprintf_r+0x32>
 802d250:	690b      	ldr	r3, [r1, #16]
 802d252:	b963      	cbnz	r3, 802d26e <_svfiprintf_r+0x32>
 802d254:	2140      	movs	r1, #64	; 0x40
 802d256:	f7ff fef3 	bl	802d040 <_malloc_r>
 802d25a:	6028      	str	r0, [r5, #0]
 802d25c:	6128      	str	r0, [r5, #16]
 802d25e:	b920      	cbnz	r0, 802d26a <_svfiprintf_r+0x2e>
 802d260:	230c      	movs	r3, #12
 802d262:	603b      	str	r3, [r7, #0]
 802d264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802d268:	e0d1      	b.n	802d40e <_svfiprintf_r+0x1d2>
 802d26a:	2340      	movs	r3, #64	; 0x40
 802d26c:	616b      	str	r3, [r5, #20]
 802d26e:	2300      	movs	r3, #0
 802d270:	9309      	str	r3, [sp, #36]	; 0x24
 802d272:	2320      	movs	r3, #32
 802d274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802d278:	2330      	movs	r3, #48	; 0x30
 802d27a:	f04f 0901 	mov.w	r9, #1
 802d27e:	f8cd 800c 	str.w	r8, [sp, #12]
 802d282:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802d428 <_svfiprintf_r+0x1ec>
 802d286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802d28a:	4623      	mov	r3, r4
 802d28c:	469a      	mov	sl, r3
 802d28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802d292:	b10a      	cbz	r2, 802d298 <_svfiprintf_r+0x5c>
 802d294:	2a25      	cmp	r2, #37	; 0x25
 802d296:	d1f9      	bne.n	802d28c <_svfiprintf_r+0x50>
 802d298:	ebba 0b04 	subs.w	fp, sl, r4
 802d29c:	d00b      	beq.n	802d2b6 <_svfiprintf_r+0x7a>
 802d29e:	465b      	mov	r3, fp
 802d2a0:	4622      	mov	r2, r4
 802d2a2:	4629      	mov	r1, r5
 802d2a4:	4638      	mov	r0, r7
 802d2a6:	f7ff ff6e 	bl	802d186 <__ssputs_r>
 802d2aa:	3001      	adds	r0, #1
 802d2ac:	f000 80aa 	beq.w	802d404 <_svfiprintf_r+0x1c8>
 802d2b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d2b2:	445a      	add	r2, fp
 802d2b4:	9209      	str	r2, [sp, #36]	; 0x24
 802d2b6:	f89a 3000 	ldrb.w	r3, [sl]
 802d2ba:	2b00      	cmp	r3, #0
 802d2bc:	f000 80a2 	beq.w	802d404 <_svfiprintf_r+0x1c8>
 802d2c0:	2300      	movs	r3, #0
 802d2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802d2c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802d2ca:	f10a 0a01 	add.w	sl, sl, #1
 802d2ce:	9304      	str	r3, [sp, #16]
 802d2d0:	9307      	str	r3, [sp, #28]
 802d2d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802d2d6:	931a      	str	r3, [sp, #104]	; 0x68
 802d2d8:	4654      	mov	r4, sl
 802d2da:	2205      	movs	r2, #5
 802d2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d2e0:	4851      	ldr	r0, [pc, #324]	; (802d428 <_svfiprintf_r+0x1ec>)
 802d2e2:	f7ff fe37 	bl	802cf54 <memchr>
 802d2e6:	9a04      	ldr	r2, [sp, #16]
 802d2e8:	b9d8      	cbnz	r0, 802d322 <_svfiprintf_r+0xe6>
 802d2ea:	06d0      	lsls	r0, r2, #27
 802d2ec:	bf44      	itt	mi
 802d2ee:	2320      	movmi	r3, #32
 802d2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d2f4:	0711      	lsls	r1, r2, #28
 802d2f6:	bf44      	itt	mi
 802d2f8:	232b      	movmi	r3, #43	; 0x2b
 802d2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802d2fe:	f89a 3000 	ldrb.w	r3, [sl]
 802d302:	2b2a      	cmp	r3, #42	; 0x2a
 802d304:	d015      	beq.n	802d332 <_svfiprintf_r+0xf6>
 802d306:	4654      	mov	r4, sl
 802d308:	2000      	movs	r0, #0
 802d30a:	f04f 0c0a 	mov.w	ip, #10
 802d30e:	9a07      	ldr	r2, [sp, #28]
 802d310:	4621      	mov	r1, r4
 802d312:	f811 3b01 	ldrb.w	r3, [r1], #1
 802d316:	3b30      	subs	r3, #48	; 0x30
 802d318:	2b09      	cmp	r3, #9
 802d31a:	d94e      	bls.n	802d3ba <_svfiprintf_r+0x17e>
 802d31c:	b1b0      	cbz	r0, 802d34c <_svfiprintf_r+0x110>
 802d31e:	9207      	str	r2, [sp, #28]
 802d320:	e014      	b.n	802d34c <_svfiprintf_r+0x110>
 802d322:	eba0 0308 	sub.w	r3, r0, r8
 802d326:	fa09 f303 	lsl.w	r3, r9, r3
 802d32a:	4313      	orrs	r3, r2
 802d32c:	46a2      	mov	sl, r4
 802d32e:	9304      	str	r3, [sp, #16]
 802d330:	e7d2      	b.n	802d2d8 <_svfiprintf_r+0x9c>
 802d332:	9b03      	ldr	r3, [sp, #12]
 802d334:	1d19      	adds	r1, r3, #4
 802d336:	681b      	ldr	r3, [r3, #0]
 802d338:	9103      	str	r1, [sp, #12]
 802d33a:	2b00      	cmp	r3, #0
 802d33c:	bfbb      	ittet	lt
 802d33e:	425b      	neglt	r3, r3
 802d340:	f042 0202 	orrlt.w	r2, r2, #2
 802d344:	9307      	strge	r3, [sp, #28]
 802d346:	9307      	strlt	r3, [sp, #28]
 802d348:	bfb8      	it	lt
 802d34a:	9204      	strlt	r2, [sp, #16]
 802d34c:	7823      	ldrb	r3, [r4, #0]
 802d34e:	2b2e      	cmp	r3, #46	; 0x2e
 802d350:	d10c      	bne.n	802d36c <_svfiprintf_r+0x130>
 802d352:	7863      	ldrb	r3, [r4, #1]
 802d354:	2b2a      	cmp	r3, #42	; 0x2a
 802d356:	d135      	bne.n	802d3c4 <_svfiprintf_r+0x188>
 802d358:	9b03      	ldr	r3, [sp, #12]
 802d35a:	3402      	adds	r4, #2
 802d35c:	1d1a      	adds	r2, r3, #4
 802d35e:	681b      	ldr	r3, [r3, #0]
 802d360:	9203      	str	r2, [sp, #12]
 802d362:	2b00      	cmp	r3, #0
 802d364:	bfb8      	it	lt
 802d366:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802d36a:	9305      	str	r3, [sp, #20]
 802d36c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 802d42c <_svfiprintf_r+0x1f0>
 802d370:	2203      	movs	r2, #3
 802d372:	4650      	mov	r0, sl
 802d374:	7821      	ldrb	r1, [r4, #0]
 802d376:	f7ff fded 	bl	802cf54 <memchr>
 802d37a:	b140      	cbz	r0, 802d38e <_svfiprintf_r+0x152>
 802d37c:	2340      	movs	r3, #64	; 0x40
 802d37e:	eba0 000a 	sub.w	r0, r0, sl
 802d382:	fa03 f000 	lsl.w	r0, r3, r0
 802d386:	9b04      	ldr	r3, [sp, #16]
 802d388:	3401      	adds	r4, #1
 802d38a:	4303      	orrs	r3, r0
 802d38c:	9304      	str	r3, [sp, #16]
 802d38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d392:	2206      	movs	r2, #6
 802d394:	4826      	ldr	r0, [pc, #152]	; (802d430 <_svfiprintf_r+0x1f4>)
 802d396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d39a:	f7ff fddb 	bl	802cf54 <memchr>
 802d39e:	2800      	cmp	r0, #0
 802d3a0:	d038      	beq.n	802d414 <_svfiprintf_r+0x1d8>
 802d3a2:	4b24      	ldr	r3, [pc, #144]	; (802d434 <_svfiprintf_r+0x1f8>)
 802d3a4:	bb1b      	cbnz	r3, 802d3ee <_svfiprintf_r+0x1b2>
 802d3a6:	9b03      	ldr	r3, [sp, #12]
 802d3a8:	3307      	adds	r3, #7
 802d3aa:	f023 0307 	bic.w	r3, r3, #7
 802d3ae:	3308      	adds	r3, #8
 802d3b0:	9303      	str	r3, [sp, #12]
 802d3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d3b4:	4433      	add	r3, r6
 802d3b6:	9309      	str	r3, [sp, #36]	; 0x24
 802d3b8:	e767      	b.n	802d28a <_svfiprintf_r+0x4e>
 802d3ba:	460c      	mov	r4, r1
 802d3bc:	2001      	movs	r0, #1
 802d3be:	fb0c 3202 	mla	r2, ip, r2, r3
 802d3c2:	e7a5      	b.n	802d310 <_svfiprintf_r+0xd4>
 802d3c4:	2300      	movs	r3, #0
 802d3c6:	f04f 0c0a 	mov.w	ip, #10
 802d3ca:	4619      	mov	r1, r3
 802d3cc:	3401      	adds	r4, #1
 802d3ce:	9305      	str	r3, [sp, #20]
 802d3d0:	4620      	mov	r0, r4
 802d3d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d3d6:	3a30      	subs	r2, #48	; 0x30
 802d3d8:	2a09      	cmp	r2, #9
 802d3da:	d903      	bls.n	802d3e4 <_svfiprintf_r+0x1a8>
 802d3dc:	2b00      	cmp	r3, #0
 802d3de:	d0c5      	beq.n	802d36c <_svfiprintf_r+0x130>
 802d3e0:	9105      	str	r1, [sp, #20]
 802d3e2:	e7c3      	b.n	802d36c <_svfiprintf_r+0x130>
 802d3e4:	4604      	mov	r4, r0
 802d3e6:	2301      	movs	r3, #1
 802d3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 802d3ec:	e7f0      	b.n	802d3d0 <_svfiprintf_r+0x194>
 802d3ee:	ab03      	add	r3, sp, #12
 802d3f0:	9300      	str	r3, [sp, #0]
 802d3f2:	462a      	mov	r2, r5
 802d3f4:	4638      	mov	r0, r7
 802d3f6:	4b10      	ldr	r3, [pc, #64]	; (802d438 <_svfiprintf_r+0x1fc>)
 802d3f8:	a904      	add	r1, sp, #16
 802d3fa:	f3af 8000 	nop.w
 802d3fe:	1c42      	adds	r2, r0, #1
 802d400:	4606      	mov	r6, r0
 802d402:	d1d6      	bne.n	802d3b2 <_svfiprintf_r+0x176>
 802d404:	89ab      	ldrh	r3, [r5, #12]
 802d406:	065b      	lsls	r3, r3, #25
 802d408:	f53f af2c 	bmi.w	802d264 <_svfiprintf_r+0x28>
 802d40c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d40e:	b01d      	add	sp, #116	; 0x74
 802d410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d414:	ab03      	add	r3, sp, #12
 802d416:	9300      	str	r3, [sp, #0]
 802d418:	462a      	mov	r2, r5
 802d41a:	4638      	mov	r0, r7
 802d41c:	4b06      	ldr	r3, [pc, #24]	; (802d438 <_svfiprintf_r+0x1fc>)
 802d41e:	a904      	add	r1, sp, #16
 802d420:	f7ff fc32 	bl	802cc88 <_printf_i>
 802d424:	e7eb      	b.n	802d3fe <_svfiprintf_r+0x1c2>
 802d426:	bf00      	nop
 802d428:	08033874 	.word	0x08033874
 802d42c:	0803387a 	.word	0x0803387a
 802d430:	0803387e 	.word	0x0803387e
 802d434:	00000000 	.word	0x00000000
 802d438:	0802d187 	.word	0x0802d187

0802d43c <_sbrk_r>:
 802d43c:	b538      	push	{r3, r4, r5, lr}
 802d43e:	2300      	movs	r3, #0
 802d440:	4d05      	ldr	r5, [pc, #20]	; (802d458 <_sbrk_r+0x1c>)
 802d442:	4604      	mov	r4, r0
 802d444:	4608      	mov	r0, r1
 802d446:	602b      	str	r3, [r5, #0]
 802d448:	f7d3 fe4e 	bl	80010e8 <_sbrk>
 802d44c:	1c43      	adds	r3, r0, #1
 802d44e:	d102      	bne.n	802d456 <_sbrk_r+0x1a>
 802d450:	682b      	ldr	r3, [r5, #0]
 802d452:	b103      	cbz	r3, 802d456 <_sbrk_r+0x1a>
 802d454:	6023      	str	r3, [r4, #0]
 802d456:	bd38      	pop	{r3, r4, r5, pc}
 802d458:	2000c24c 	.word	0x2000c24c

0802d45c <__malloc_lock>:
 802d45c:	4801      	ldr	r0, [pc, #4]	; (802d464 <__malloc_lock+0x8>)
 802d45e:	f7ff bd77 	b.w	802cf50 <__retarget_lock_acquire_recursive>
 802d462:	bf00      	nop
 802d464:	2000c240 	.word	0x2000c240

0802d468 <__malloc_unlock>:
 802d468:	4801      	ldr	r0, [pc, #4]	; (802d470 <__malloc_unlock+0x8>)
 802d46a:	f7ff bd72 	b.w	802cf52 <__retarget_lock_release_recursive>
 802d46e:	bf00      	nop
 802d470:	2000c240 	.word	0x2000c240

0802d474 <_malloc_usable_size_r>:
 802d474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d478:	1f18      	subs	r0, r3, #4
 802d47a:	2b00      	cmp	r3, #0
 802d47c:	bfbc      	itt	lt
 802d47e:	580b      	ldrlt	r3, [r1, r0]
 802d480:	18c0      	addlt	r0, r0, r3
 802d482:	4770      	bx	lr

0802d484 <_init>:
 802d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d486:	bf00      	nop
 802d488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d48a:	bc08      	pop	{r3}
 802d48c:	469e      	mov	lr, r3
 802d48e:	4770      	bx	lr

0802d490 <_fini>:
 802d490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d492:	bf00      	nop
 802d494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d496:	bc08      	pop	{r3}
 802d498:	469e      	mov	lr, r3
 802d49a:	4770      	bx	lr
