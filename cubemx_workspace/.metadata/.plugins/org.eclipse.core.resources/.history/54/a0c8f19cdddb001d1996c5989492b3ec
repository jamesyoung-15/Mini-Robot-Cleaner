// Header for esp driver

#ifndef ESP_H
#define ESP_H

// Includes
#include "stdio.h"
#include "string.h"
#include "stm32f1xx_hal.h"
#include "../LCD/gui/menu.h"

// Var
char* html_file="<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <header>\n        <h1>Mini Robot Cleaner</h1>\n    </header>\n    <main>\n        <div class=\"test-area\">\n            <button class=\"button-style\" onclick=\"inputIP()\">Connect Socket</button>\n            <button class=\"button-style\" onclick=\"sendData()\">Send to Socket</button>\n            <button class=\"button-style\" onclick=\"closeSocket()\">Close Socket</button>\n        </div>\n    </main>\n</body>\n<style>\n    *{\n    font-family: monospace;\n    font-size: 18px;\n    }\n    body\n    {\n        overflow: hidden;\n        background-color: #0a0a23;;\n        margin: 0;\n    }\n    header\n    {\n        text-align: center;\n        background-color: #0a0a23;\n        text-align: center;\n        color: #f8f8f2;\n        height: 60px;\n        width: 100%;\n        align-items: center;\n        /* padding: 0 15px; */\n    }\n    header h1\n    {\n        font-size: 24px;\n    }\n    main\n    {\n        background-color: #1b1b32;\n        color: white;\n        height: 100vh;\n        width: 100%;\n    }\n    .button-style\n    {\n        border: 1px solid #383a59;\n        cursor: pointer;\n        display: inline-block;\n        outline: none;\n        padding: 5px 20px;\n        text-align: center;\n        transition: all .3s ease-in-out;\n        background-color: #0a0a23;\n        color: #ffffff;\n        border-radius: 5px;\n    }\n    .button-style:hover{\n        background: #bd93f9;\n        color: #000;\n    }\n    .test-area\n    {\n        padding-top: 20px;\n        width: 70%;\n        margin: 0 auto;\n        display: flex;\n        justify-content: space-between;\n        flex-direction: row;\n        flex-wrap: wrap;\n    }\n</style>\n<script>\n    var socket = null;\n    function sendData()\n    {\n        if(socket==null)\n        {\n            console.log(\"No connection.\");\n            // alert(\"Not connected\");\n        }\n        else\n        {\n            console.log(\"Sent message\");\n            socket.send(\"Hello\");\n        }\n    }\n    function connectSocket(ipaddr)\n    {\n        console.log(\"wsl://\"+ipaddr+\":80\");\n        socket = new WebSocket(\"ws://\"+ipaddr);\n        // socket = new WebSocket(\"ws://ws.ifelse.io\");\n        if(socket!=null)\n        {\n            socket.onopen = function(){\n                console.log(\"Connected\");\n            }\n            socket.onerror = function (error) {\n                console.log('Web Socket Error ', error);\n                alert('Web Socket Error ', error);\n            };\n            socket.onclose = function(){\n                alert('Web socket closed')\n            };\n            socket.onmessage = function(message){\n                console.log(\"Received: \");\n                console.log(message)\n            };\n        }\n    }\n    function closeSocket()\n    {\n        if(socket!=null)\n        {\n            socket.close();\n            console.log(\"Closed socket\");\n        }\n    }\n    //check if input IP is an valid IP address\n    // function validateIP(input)\n    // {\n    //     var ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n    //     if(input.match(ipformat)){\n    //         return true;\n    //     }\n    //     else{\n    //         return false;\n    //     }\n    // };\n\n    function inputIP()\n    {\n        let text;\n        var ipaddr = prompt(\"Please enter robot's IP and port:\", \"\");\n        if (ipaddr == null || ipaddr == \"\") {\n            text = \"No IP entered.\";\n            alert(text);\n            ipaddr =null;\n        }\n        // else if(validateIP(ipaddr)!=true){\n        //     text = \"Invalid IP.\";\n        //     ipaddr=null;\n        //     alert(text);\n        // }\n        else {\n            text = \"Entered IP: \" + ipaddr + \".\";\n            connectSocket(ipaddr);\n        }\n    }\n</script>\n</html>";

extern UART_HandleTypeDef huart3;
extern uint8_t single_buffer;

// Functions
void sendData(char * command);
void showResponse();
void clearReceivedBuffer();
void echoOff();
void checkAT();
void resetEsp();
void connectWifi(char* ssid, char* passwd);
void sendResponse(char *response);
void sendWebsite();
void serverHandler();
void checkWifiState();
void checkIP();
void checkAPs();
#endif
