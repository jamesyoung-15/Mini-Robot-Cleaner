#include "test_esp.h"

uint8_t buffer[1000]={0};
uint16_t buffer_index = 0;
uint16_t messageHandlerFlag = 0;
void ESP_RESET()
{
	HAL_GPIO_WritePin(GPIOB, 8, GPIO_PIN_RESET); // turn off
	HAL_GPIO_WritePin(GPIOB, 9, GPIO_PIN_RESET); // reset
	HAL_Delay(3000);
	HAL_GPIO_WritePin(GPIOB, 8, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, 9, GPIO_PIN_SET);
}

void ESP_Server_Init()
{
	ESP_RESET();
	HAL_Delay(4000);
	ESP_Clear_Buffer();

	HAL_UART_Transmit(&huart3, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 100);
	HAL_Delay(200);
	ESP_Clear_Buffer();

//	HAL_UART_Transmit(&huart3, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
//	HAL_Delay(4000);
//	ESP_Clear_Buffer();
//
//	HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), 100);
//	HAL_Delay(1000);
//	ESP_Clear_Buffer();
//
//	HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CWDHCP=1,1\r\n", strlen("AT+CWDHCP=1,1\r\n"), 100);
//	HAL_Delay(1000);
//	ESP_Clear_Buffer();
//
//	HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"), 100);
//	HAL_Delay(1000);
//	ESP_Clear_Buffer();
//
//	HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CIPSERVER=1,80\r\n", strlen("AT+CIPSERVER=1,80\r\n"), 100);
//	HAL_Delay(1000);
//	ESP_Clear_Buffer();
//
//	HAL_UART_Transmit(&huart3, (uint8_t*)WiFi_Credentials, strlen(WiFi_Credentials), 100);
}

void ESP_Clear_Buffer()
{
	memset(buffer, 0, 1000);
	buffer_index = 0;
}

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
	 uint16_t comVAR=0, i;
	 for(i=0;i<length;i++)
	   	{
	   		  if(array1[i]==array2[i])
	   	  		  comVAR++;
	   	  	  else comVAR=0;
	   	}
	 if (comVAR==length)
		 	return 1;
	 else 	return 0;
}

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
	uint8_t result=0;
	for(uint16_t i=0; i<length; i++)
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
		if(result == 1)
			return i;
	}
	return -1;
}

void messageHandler()
{
	__HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE);

	ESP_Clear_Buffer();
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
}


